   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_can.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_IsPanelControlReady,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CAN_IsPanelControlReady:
  25              	.LFB169:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_can.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @file xmc_can.h
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @date 2017-11-09
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @cond
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * All rights reserved.                        
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *                                             
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * following conditions are met:   
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *                                                                              
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * disclaimer.                        
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *                                                                              
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *                                                                              
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Change History
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * --------------
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 2015-02-20:
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - Initial <br>
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - Documentation improved <br>
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 2015-05-20:
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 2015-06-20:
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *      
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 2015-07-09:
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 2015-09-01:
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 2015-09-15:
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 2016-06-07:
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_IsPanelControlReady()
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 2017-11-09:
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * related APIs.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * <b>Example Usage:</b>
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @code
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * //disabling the Node
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * //allowing the configuration change
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * //Node configuration
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * //disable configuration
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * //Enabling node for communication
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @endcode
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 2016-06-20:
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *     - Fixed bug in XMC_CAN_MO_Config() <br>  
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @endcond
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #ifndef XMC_CAN_H
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #define XMC_CAN_H
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * HEADER FILES
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #include "xmc_common.h"
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #if defined(CAN)
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #include "xmc_scu.h"
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #include "xmc_can_map.h"
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #include <string.h>
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @{
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @addtogroup CAN
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * CAN nodes. 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * gateways between 
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * node analysis.
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * The driver is divided into five sections:
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par CAN Global features:
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par CAN_NODE features:
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par CAN_MO features:
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par CAN_FIFO features:
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @{
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * MACROS
 164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)   /**< Standard Identifier bitposition */
 166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 169:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL) /**< Node event mask */
 170:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 171:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)  /**< Message Object event mask */
 172:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 173:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 174:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * ENUMS
 175:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 176:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 177:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 178:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** */
 179:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 180:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 181:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 182:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 183:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 184:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 185:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 186:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 187:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 188:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 189:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 190:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** */
 191:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 192:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 193:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 194:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 195:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 196:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 197:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,   /**< Remove a message object from the list and insert
 198:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 199:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 200:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 201:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 202:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 203:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 204:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 205:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 206:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** */
 207:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 208:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 209:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 210:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 211:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 212:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 213:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 214:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 215:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 216:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 217:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 218:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 219:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 220:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 221:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 222:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 223:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 224:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 225:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 226:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 227:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 228:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 229:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 230:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 231:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 232:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 233:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 234:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 235:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 236:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 237:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 238:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 239:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 240:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 241:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 242:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 243:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 244:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 245:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 246:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 247:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U,       /**< Frame Count Mode */
 248:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 249:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 250:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 251:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 252:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 253:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 254:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 255:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_DM
 256:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 257:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 258:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 259:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 260:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_DM_t;
 261:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 262:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 263:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 264:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 265:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 266:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 267:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 268:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 269:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 270:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 271:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 272:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 273:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 274:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 275:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 276:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 277:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 278:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 279:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 280:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 281:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 282:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 283:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 284:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 285:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 286:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 287:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 288:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 289:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 290:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 291:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 292:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 293:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 294:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 295:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 296:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 297:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 298:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 299:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 300:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 301:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 302:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 303:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 304:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 305:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 306:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 307:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 308:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 309:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 310:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 311:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 312:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 313:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 314:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 315:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 316:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 317:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 318:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,     /**< Pointer to previous 
 319:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 320:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 321:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 322:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 323:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 324:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 325:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 326:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 327:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 328:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 329:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 330:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 331:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 332:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,       /**< Bus-off status */
 333:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 334:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 335:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 336:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 337:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #endif
 338:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 339:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 340:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 341:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 342:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 343:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 344:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 345:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 346:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 347:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 348:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 349:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 350:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 351:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 352:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 353:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 354:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 355:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #endif
 356:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 357:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 358:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 359:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 360:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 361:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 362:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 363:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 364:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 365:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 366:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 367:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 368:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 369:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 370:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 371:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 372:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 373:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 374:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 375:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 376:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 377:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 378:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 379:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 380:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 381:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 382:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 383:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 384:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 385:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 386:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 387:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 388:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 389:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 390:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 391:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 392:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 393:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 394:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 395:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 396:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 397:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 398:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 399:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 400:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 401:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 402:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 403:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 404:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA,   /**< CAN Receive Input A */
 405:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,   /**< CAN Receive Input B */
 406:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,   /**< CAN Receive Input C */
 407:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,   /**< CAN Receive Input D */
 408:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,   /**< CAN Receive Input E */
 409:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,   /**< CAN Receive Input F */
 410:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,   /**< CAN Receive Input G */
 411:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH    /**< CAN Receive Input H */
 412:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 413:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 414:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 415:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 416:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 417:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 418:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 419:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 420:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 421:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 422:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 423:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 424:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 425:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 426:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 427:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 428:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 429:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 430:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 431:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 432:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 433:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 434:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 435:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 436:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 437:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 438:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 439:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 440:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 441:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 442:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 443:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 444:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 445:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 446:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 447:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 448:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 449:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines the Clock source used for the MCAN baudrate generator 
 450:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 451:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 452:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {  
 453:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 454:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #if (UC_FAMILY == XMC4)
 455:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 456:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #else
 457:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock. 
 458:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #endif
 459:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U, /**< Use high performance oscillator (fOHP) as MCAN baudrate gener
 460:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #else
 461:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U, /**< Use peripheral clock as MCAN baudrate generator input clock.
 462:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #endif
 463:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 464:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 465:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 466:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * DATA STRUCTURES
 467:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 468:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 469:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 470:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** */
 471:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 472:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 473:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 474:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint32_t baudrate;          /**< Specifies the node baud rate. Unit: baud \a baudrate shall be ra
 475:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint16_t sample_point;      /**< Sample point is used to compensate mismatch between transmitter 
 476:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                    the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 
 477:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint16_t sjw;               /**< (Re) Synchronization Jump Width. Range:0-3 */
 478:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 479:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 480:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 481:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 482:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 483:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 484:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 485:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 486:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint8_t fifo_bottom;    /**< points to the first element(slave object) in a FIFO structure.Range 
 487:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint8_t fifo_top;     /**< points to the last element(slave object) in a FIFO structure. Range :0
 488:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint8_t fifo_base;    /**< points to the actual target object(Base object) within a FIFO/Gateway 
 489:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 490:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 491:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 492:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 493:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 494:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 495:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 496:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 497:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint8_t gateway_bottom;       /**< points to the first element(gateway destination object) in a F
 498:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint8_t gateway_top;        /**< points to the last element(gateway destination object) in a FIFO
 499:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint8_t gateway_base;       /**< points to the actual target object within a FIFO/Gateway structu
 500:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   bool gateway_data_frame_send;   /**< TXRQ updated in the gateway destination object after the int
 501:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object */
 502:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   bool gateway_identifier_copy;   /**< The identifier of the gateway source object (after storing t
 503:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                          to the gateway destination object. */
 504:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 505:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 506:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                            gateway destination object */
 507:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 508:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                 are copied to the gateway destination.*/
 509:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 510:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 511:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 512:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 513:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** * Defines CAN Global Initialization structure
 514:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** */
 515:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 516:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 517:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 518:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 519:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   #pragma push
 520:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   #pragma anon_unions
 521:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 522:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   #pragma warning 586
 523:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #endif
 524:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 525:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 526:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 527:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 528:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 529:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** */
 530:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 531:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 532:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 533:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   union{
 534:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****     struct{
 535:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t : 16;
 536:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_selection:3;   /**<   Defines function of the frame counter  */
 537:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t can_frame_count_mode:2;      /**<   Determines the operation mode of the frame count
 538:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t : 11;
 539:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****     };
 540:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****     uint32_t nfcr;
 541:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 542:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   };
 543:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 544:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 545:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 546:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *Defines Node Runtime structure.
 547:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** */
 548:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 549:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 550:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 551:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 552:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 553:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** typedef struct XMC_CAN_MO
 554:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 555:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register *
 556:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   union{
 557:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****     struct{
 558:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message ident
 559:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 560:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 561:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****     };
 562:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****     uint32_t mo_ar;
 563:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   };
 564:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   union{
 565:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****     struct{
 566:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 567:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 568:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****     };
 569:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****     uint32_t mo_amr;
 570:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   };
 571:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 572:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 573:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   union{
 574:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 575:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint8_t can_data_byte[8];                 /**< Each position of the array represents a data b
 576:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bit
 577:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_dat
 578:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                               of the data */
 579:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       uint64_t can_data_long;                   /** Data of the Message Object*/
 580:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****       };
 581:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 582:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 583:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 584:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** } XMC_CAN_MO_t;
 585:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 586:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #if defined(__CC_ARM)
 587:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   #pragma pop
 588:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #elif defined(__TASKING__)
 589:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   #pragma warning restore
 590:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #endif
 591:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**************************************************************************************************
 592:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * API Prototypes
 593:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  **************************************************************************************************
 594:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #ifdef __cplusplus
 595:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** extern "C" {
 596:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #endif
 597:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 598:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 599:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 600:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 601:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        for details.
 602:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 603:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 604:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 605:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 606:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 607:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 608:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 609:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 610:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 611:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 612:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 613:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 614:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 615:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 616:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 617:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 618:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *         for details.
 619:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 620:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 621:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 622:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 623:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 624:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 625:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 626:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 627:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 628:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 629:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 630:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 631:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 632:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 633:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 634:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 635:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 636:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *       for details.
 637:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 638:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param node_num  CAN node number,Range : 0-2
 639:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param mo_num  CAN Message Object number,Range : 0-63
 640:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 641:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 642:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 643:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 644:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 645:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 646:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  It configures PANCTR register.
 647:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 648:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 649:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  None
 650:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 651:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 652:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 653:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 654:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 655:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 656:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 657:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 658:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *       for details.
 659:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 660:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return Ready status of list controller
 661:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 662:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 663:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Returns ready status of the list controller
 664:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 665:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 666:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_PanelControl()
 667:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 668:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 669:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
 670:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
  27              	 .loc 1 670 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 671:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
  43              	 .loc 1 671 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F8C431 	 ldr r3,[r3,#452]
  46 000e 03F44073 	 and r3,r3,#768
  47 0012 002B     	 cmp r3,#0
  48 0014 0CBF     	 ite eq
  49 0016 0123     	 moveq r3,#1
  50 0018 0023     	 movne r3,#0
  51 001a DBB2     	 uxtb r3,r3
 672:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
  52              	 .loc 1 672 0
  53 001c 1846     	 mov r0,r3
  54 001e 0C37     	 adds r7,r7,#12
  55              	.LCFI3:
  56              	 .cfi_def_cfa_offset 4
  57 0020 BD46     	 mov sp,r7
  58              	.LCFI4:
  59              	 .cfi_def_cfa_register 13
  60              	 
  61 0022 5DF8047B 	 ldr r7,[sp],#4
  62              	.LCFI5:
  63              	 .cfi_restore 7
  64              	 .cfi_def_cfa_offset 0
  65 0026 7047     	 bx lr
  66              	 .cfi_endproc
  67              	.LFE169:
  69              	 .section .text.XMC_CAN_PanelControl,"ax",%progbits
  70              	 .align 2
  71              	 .thumb
  72              	 .thumb_func
  74              	XMC_CAN_PanelControl:
  75              	.LFB170:
 673:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 674:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 675:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 676:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 677:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        for details.
 678:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 679:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 680:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param arg1   Panel Argument 1,Range : 0-2
 681:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param arg2   Panel Argument 2, Range : 0-63
 682:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 683:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 684:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 685:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 686:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 687:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 688:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 689:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 690:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  register.
 691:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 692:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  None
 694:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 695:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 696:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 697:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 698:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 699:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg1,
 700:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                       const uint8_t arg2)
 701:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
  76              	 .loc 1 701 0
  77              	 .cfi_startproc
  78              	 
  79              	 
  80              	 
  81 0000 80B4     	 push {r7}
  82              	.LCFI6:
  83              	 .cfi_def_cfa_offset 4
  84              	 .cfi_offset 7,-4
  85 0002 83B0     	 sub sp,sp,#12
  86              	.LCFI7:
  87              	 .cfi_def_cfa_offset 16
  88 0004 00AF     	 add r7,sp,#0
  89              	.LCFI8:
  90              	 .cfi_def_cfa_register 7
  91 0006 7860     	 str r0,[r7,#4]
  92 0008 0846     	 mov r0,r1
  93 000a 1146     	 mov r1,r2
  94 000c 1A46     	 mov r2,r3
  95 000e 0346     	 mov r3,r0
  96 0010 FB70     	 strb r3,[r7,#3]
  97 0012 0B46     	 mov r3,r1
  98 0014 BB70     	 strb r3,[r7,#2]
  99 0016 1346     	 mov r3,r2
 100 0018 7B70     	 strb r3,[r7,#1]
 702:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 101              	 .loc 1 702 0
 102 001a FA78     	 ldrb r2,[r7,#3]
 703:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 103              	 .loc 1 703 0
 104 001c BB78     	 ldrb r3,[r7,#2]
 105 001e 1B04     	 lsls r3,r3,#16
 106 0020 03F47F03 	 and r3,r3,#16711680
 702:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 107              	 .loc 1 702 0
 108 0024 1A43     	 orrs r2,r2,r3
 704:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 109              	 .loc 1 704 0
 110 0026 7B78     	 ldrb r3,[r7,#1]
 111 0028 1B06     	 lsls r3,r3,#24
 703:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****             (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 112              	 .loc 1 703 0
 113 002a 1A43     	 orrs r2,r2,r3
 702:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 114              	 .loc 1 702 0
 115 002c 7B68     	 ldr r3,[r7,#4]
 116 002e D3F8C411 	 ldr r1,[r3,#452]
 117 0032 0021     	 movs r1,#0
 118 0034 0A43     	 orrs r2,r2,r1
 119 0036 C3F8C421 	 str r2,[r3,#452]
 705:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
 120              	 .loc 1 705 0
 121 003a 0C37     	 adds r7,r7,#12
 122              	.LCFI9:
 123              	 .cfi_def_cfa_offset 4
 124 003c BD46     	 mov sp,r7
 125              	.LCFI10:
 126              	 .cfi_def_cfa_register 13
 127              	 
 128 003e 5DF8047B 	 ldr r7,[sp],#4
 129              	.LCFI11:
 130              	 .cfi_restore 7
 131              	 .cfi_def_cfa_offset 0
 132 0042 7047     	 bx lr
 133              	 .cfi_endproc
 134              	.LFE170:
 136              	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
 137              	 .align 2
 138              	 .thumb
 139              	 .thumb_func
 141              	XMC_CAN_NODE_EnableConfigurationChange:
 142              	.LFB186:
 706:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 707:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 708:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 709:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 710:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 711:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        for details.
 712:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 713:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param service_requestr  Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_T
 714:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *               Multiple interrupt trigger events can be ORed.
 715:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 716:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 717:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 718:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 719:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 720:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 721:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 722:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 723:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  None
 724:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 725:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 726:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 727:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 728:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 729:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 730:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
 731:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 732:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 733:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 734:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 735:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 736:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        for details.
 737:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 738:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source
 739:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). 
 740:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        The can_frequency shall be an integer divisor of the CAN clock source frequency (fPERI/fM
 741:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        it should be selected such that if fulfills the minimum operating frequency specified in 
 742:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        In addition the can_frequency shall be an integer multiple of the baudrate.
 743:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        Max. value: Max. clock source frequency, i.e. if using fOHP and using a XTAL of 20MHz the
 744:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 745:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return Actual frequency
 746:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 747:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 748:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_Init() configures clock rate of the module timer clock fCAN. 
 749:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * The difference being that only the normal divider is used to avoid jitter.
 750:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * In addition the actual achievable frequency is returned.
 751:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 752:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 753:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Altering CAN module \a can_frequency shall affects baud rate, call XMC_CAN_NODE_NominalBitTimeCo
 754:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 755:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 756:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 757:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx()\n\n\n
 758:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 759:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 760:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 761:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 762:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 763:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 764:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        for details.
 765:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 766:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return Baudrate generator clock source
 767:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 768:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 769:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Returns CAN baudrate generator clock source
 770:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 771:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 772:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 773:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 774:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 775:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 776:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 777:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 778:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        for details.
 779:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 780:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 781:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * 
 782:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 783:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Sets CAN baudrate generator clock source
 784:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 785:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 786:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 787:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 788:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 789:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 790:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 791:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 792:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        for details.
 793:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 794:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return baudrate generator input clock frequency 
 795:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 796:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 797:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Gets CAN baudrate generator input clock frequency
 798:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 799:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @note Use only for XMC1400 series and XMC47/4800 series projects
 800:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 801:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 802:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 803:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 804:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 805:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 806:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 807:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 808:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *        for details.
 809:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 810:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param clksrc CAN module frequency clock source.
 811:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_frequency CAN module frequency(fCAN). Max. value: Max. clock source frequency, i.e. i
 812:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @note Use clksrc parameter only for XMC1400 series and XMC47/4800 series projects, otherwise omi
 813:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 814:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 815:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 816:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 817:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 818:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() or XMC_CAN_NODE_NominalBitTimeConfigureEx() to confi
 819:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * It configures FDR register.
 820:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 821:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @note Use XMC_CAN_InitEx() for new projects. XMC_CAN_Init() is kept for backward compatibility r
 822:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 823:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 824:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure(), XMC_CAN_NODE_NominalBitTimeConfigureEx(), XMC_CAN_InitEx
 825:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 826:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 827:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 828:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #else
 829:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 830:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** #endif
 831:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 832:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 833:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 834:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 835:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 836:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 837:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 838:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 839:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 840:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 841:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 842:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 843:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * None
 844:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 845:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 846:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 847:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 848:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /* NODE APIs */
 849:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 850:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 851:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 852:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node      Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 853:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param ptr_event     CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_
 854:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 855:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 856:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 857:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 858:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 859:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 860:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 861:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 862:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * None
 863:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 864:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 865:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 866:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 867:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 868:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                           const uint32_t service_request)
 869:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 870:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 871:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
 872:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 873:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 874:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 875:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 876:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 877:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 878:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 879:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 880:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 881:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 882:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 883:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 884:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 885:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 886:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * None
 887:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 888:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 889:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure(XMC_CAN_NODE_t *const can_node,
 890:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                           const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_b
 891:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 892:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 893:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 894:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node    Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CA
 895:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_bit_time  Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMI
 896:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 897:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return Status on the sucess setting the desired bitrate XMC_CAN_STATUS_t
 898:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 899:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 900:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Similar to XMC_CAN_NODE_NominalBitTimeConfigure() configures the CAN node baudrate. 
 901:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * The difference being that allows bitrates below 100kpbs.
 902:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @note Consider using the new API for new projects. XMC_CAN_NODE_NominalBitTimeConfigure() is kep
 903:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 904:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 905:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * It configures NBTR register.
 906:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 907:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 908:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_InitEx()
 909:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 910:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 911:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 912:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 913:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 914:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 915:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 916:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 917:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 918:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 919:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 920:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 921:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 922:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 923:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 924:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 925:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 926:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 927:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * None
 928:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 929:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 930:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 931:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 932:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 933:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 934:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 935:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                                               const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 936:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 937:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 938:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 939:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
 940:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 941:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 942:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 943:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node  Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_
 944:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 945:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 946:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 947:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 948:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 949:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 950:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 951:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 952:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 953:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 954:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 955:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 956:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 957:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 958:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 959:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 960:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 961:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 962:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 963:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 964:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 965:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
 966:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 967:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 968:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 969:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 970:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 971:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
 972:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 973:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
 974:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 975:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 976:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * API after NPCRx configuration.
 977:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 978:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 979:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 980:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 981:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 982:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
 983:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 984:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 985:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
 986:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 987:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 988:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 989:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 990:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
 991:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 992:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
 993:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
 994:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 995:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 996:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 997:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
 998:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
 999:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
1000:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1001:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1002:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
1003:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1004:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1005:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
1006:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1007:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1008:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1009:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1010:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1011:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1012:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1013:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1014:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1015:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param event    CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
1016:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *           multiple events can be ORed.
1017:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1018:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
1019:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1020:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1021:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
1022:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1023:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1024:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
1025:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1026:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1027:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1028:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
1029:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1030:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1031:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1032:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1033:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1034:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1035:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
1036:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1037:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1038:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
1039:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1040:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1041:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
1042:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1043:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1044:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1045:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
1046:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1047:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
1048:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1049:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1050:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1051:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1052:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1053:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
1054:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1055:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
1056:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1057:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1058:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
1059:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1060:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1061:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
1062:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1063:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1064:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1065:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
1066:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1067:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
1068:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1069:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1070:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1071:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1072:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1073:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1074:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param  error_warning_level  Error Warning level value. Range :0-255.
1075:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1076:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
1077:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1078:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1079:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
1080:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
1081:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1082:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1083:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
1084:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1085:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1086:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1087:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1088:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1089:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1090:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
1091:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1092:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
1093:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
1094:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1095:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1096:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1097:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1098:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1099:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
1101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
1103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
1106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
1107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
1130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Returns error warning level. This determines the threshold value (warning level, default 96) to
1158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  to set the corresponding error warning bit EWRN. It reads NECNT register.
1159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1169:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1170:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1171:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1172:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1173:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1174:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1175:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1176:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1177:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1178:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1179:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a trans
1180:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the err
1181:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1182:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1183:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1184:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1185:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1186:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Note:</b><br>
1187:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1188:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1189:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1190:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1191:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1192:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1193:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1194:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1195:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1196:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1197:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1198:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1199:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1200:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1201:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return uint8_t  receive error counter value.
1202:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1203:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1204:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Returns Receive Error Counter value. It reads NECNT register.
1205:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1206:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1207:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1208:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1209:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1210:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1211:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1212:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1213:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1214:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1215:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1216:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1217:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1218:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1219:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1220:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1221:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1222:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1223:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1224:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1225:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1226:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1227:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1228:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1229:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1230:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1231:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1232:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1233:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   return ((can_node->NSR));
1234:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1235:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1236:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1237:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1238:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1239:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1240:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1241:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
1242:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1243:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1244:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1245:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1246:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1247:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1248:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1249:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1250:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1251:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1252:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
1253:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1254:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
1255:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1256:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1257:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1258:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1259:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1260:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1261:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
1262:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1263:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1264:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1265:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1266:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1267:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1268:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1269:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1270:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1271:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1272:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1273:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 143              	 .loc 1 1273 0
 144              	 .cfi_startproc
 145              	 
 146              	 
 147              	 
 148 0000 80B4     	 push {r7}
 149              	.LCFI12:
 150              	 .cfi_def_cfa_offset 4
 151              	 .cfi_offset 7,-4
 152 0002 83B0     	 sub sp,sp,#12
 153              	.LCFI13:
 154              	 .cfi_def_cfa_offset 16
 155 0004 00AF     	 add r7,sp,#0
 156              	.LCFI14:
 157              	 .cfi_def_cfa_register 7
 158 0006 7860     	 str r0,[r7,#4]
1274:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 159              	 .loc 1 1274 0
 160 0008 7B68     	 ldr r3,[r7,#4]
 161 000a 1B68     	 ldr r3,[r3]
 162 000c 43F04002 	 orr r2,r3,#64
 163 0010 7B68     	 ldr r3,[r7,#4]
 164 0012 1968     	 ldr r1,[r3]
 165 0014 0021     	 movs r1,#0
 166 0016 0A43     	 orrs r2,r2,r1
 167 0018 1A60     	 str r2,[r3]
1275:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
 168              	 .loc 1 1275 0
 169 001a 0C37     	 adds r7,r7,#12
 170              	.LCFI15:
 171              	 .cfi_def_cfa_offset 4
 172 001c BD46     	 mov sp,r7
 173              	.LCFI16:
 174              	 .cfi_def_cfa_register 13
 175              	 
 176 001e 5DF8047B 	 ldr r7,[sp],#4
 177              	.LCFI17:
 178              	 .cfi_restore 7
 179              	 .cfi_def_cfa_offset 0
 180 0022 7047     	 bx lr
 181              	 .cfi_endproc
 182              	.LFE186:
 184              	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 185              	 .align 2
 186              	 .thumb
 187              	 .thumb_func
 189              	XMC_CAN_NODE_DisableConfigurationChange:
 190              	.LFB187:
1276:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1277:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1278:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** /**
1279:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1280:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1281:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1282:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * @return None
1283:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1284:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Description:</b><br>
1285:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *  Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1286:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1287:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1288:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1289:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  *
1290:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****  */
1291:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** 
1292:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1293:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** {
 191              	 .loc 1 1293 0
 192              	 .cfi_startproc
 193              	 
 194              	 
 195              	 
 196 0000 80B4     	 push {r7}
 197              	.LCFI18:
 198              	 .cfi_def_cfa_offset 4
 199              	 .cfi_offset 7,-4
 200 0002 83B0     	 sub sp,sp,#12
 201              	.LCFI19:
 202              	 .cfi_def_cfa_offset 16
 203 0004 00AF     	 add r7,sp,#0
 204              	.LCFI20:
 205              	 .cfi_def_cfa_register 7
 206 0006 7860     	 str r0,[r7,#4]
1294:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 207              	 .loc 1 1294 0
 208 0008 7B68     	 ldr r3,[r7,#4]
 209 000a 1B68     	 ldr r3,[r3]
 210 000c 23F04002 	 bic r2,r3,#64
 211 0010 7B68     	 ldr r3,[r7,#4]
 212 0012 1968     	 ldr r1,[r3]
 213 0014 0021     	 movs r1,#0
 214 0016 0A43     	 orrs r2,r2,r1
 215 0018 1A60     	 str r2,[r3]
1295:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_can.h **** }
 216              	 .loc 1 1295 0
 217 001a 0C37     	 adds r7,r7,#12
 218              	.LCFI21:
 219              	 .cfi_def_cfa_offset 4
 220 001c BD46     	 mov sp,r7
 221              	.LCFI22:
 222              	 .cfi_def_cfa_register 13
 223              	 
 224 001e 5DF8047B 	 ldr r7,[sp],#4
 225              	.LCFI23:
 226              	 .cfi_restore 7
 227              	 .cfi_def_cfa_offset 0
 228 0022 7047     	 bx lr
 229              	 .cfi_endproc
 230              	.LFE187:
 232              	 .section .text.max,"ax",%progbits
 233              	 .align 2
 234              	 .thumb
 235              	 .thumb_func
 237              	max:
 238              	.LFB222:
 239              	 .file 2 "../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c"
   1:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /**
   2:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * @date 2018-06-21
   4:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
   5:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * @cond
   6:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  **************************************************************************************************
   7:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
   9:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * All rights reserved.                        
  11:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *                                             
  12:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * following conditions are met:   
  14:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *                                                                              
  15:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * disclaimer.                        
  17:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 
  18:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 
  21:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *                                                                              
  24:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *                                                                              
  32:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  **************************************************************************************************
  35:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  36:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * Change History
  37:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * --------------
  38:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  39:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  40:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  41:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  42:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  43:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  47:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  48:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  50:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  51:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  53:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  54:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  56:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 2016-06-07:
  57:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Changed XMC_CAN_AllocateMOtoNodeList to wait for ready status of list controller
  58:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  59:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 2016-06-20:
  60:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_MO_Config() <br> 
  61:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  62:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 2017-11-09:
  63:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Added XMC_CAN_InitEx() and XMC_CAN_NODE_NominalBitTimeConfigureEx()
  64:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Make XMC_CAN_GetBaudrateClockSource(), XMC_CAN_SetBaudrateClockSource() and XMC_CAN_GetBau
  65:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Changed refactoring XMC_CAN_MO_Config() to configure MOCTR depending on transmit or receiv
  66:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  67:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * 2018-06-21:
  68:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *     - Fixed XMC_CAN_NODE_NominalBitTimeConfigureEx()
  69:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  70:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * @endcond
  71:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *
  72:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  */ 
  73:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
  74:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /*******************************************************************************
  75:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * HEADER FILES
  76:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  77:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  78:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
  79:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if defined(CAN)
  80:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
  81:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
  82:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  83:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 240              	 .loc 2 83 0
 241              	 .cfi_startproc
 242              	 
 243              	 
 244              	 
 245 0000 80B4     	 push {r7}
 246              	.LCFI24:
 247              	 .cfi_def_cfa_offset 4
 248              	 .cfi_offset 7,-4
 249 0002 83B0     	 sub sp,sp,#12
 250              	.LCFI25:
 251              	 .cfi_def_cfa_offset 16
 252 0004 00AF     	 add r7,sp,#0
 253              	.LCFI26:
 254              	 .cfi_def_cfa_register 7
 255 0006 7860     	 str r0,[r7,#4]
 256 0008 3960     	 str r1,[r7]
  84:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
 257              	 .loc 2 84 0
 258 000a 3A68     	 ldr r2,[r7]
 259 000c 7B68     	 ldr r3,[r7,#4]
 260 000e 9342     	 cmp r3,r2
 261 0010 38BF     	 it cc
 262 0012 1346     	 movcc r3,r2
  85:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 263              	 .loc 2 85 0
 264 0014 1846     	 mov r0,r3
 265 0016 0C37     	 adds r7,r7,#12
 266              	.LCFI27:
 267              	 .cfi_def_cfa_offset 4
 268 0018 BD46     	 mov sp,r7
 269              	.LCFI28:
 270              	 .cfi_def_cfa_register 13
 271              	 
 272 001a 5DF8047B 	 ldr r7,[sp],#4
 273              	.LCFI29:
 274              	 .cfi_restore 7
 275              	 .cfi_def_cfa_offset 0
 276 001e 7047     	 bx lr
 277              	 .cfi_endproc
 278              	.LFE222:
 280              	 .section .text.min,"ax",%progbits
 281              	 .align 2
 282              	 .thumb
 283              	 .thumb_func
 285              	min:
 286              	.LFB223:
  86:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
  87:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  88:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 287              	 .loc 2 88 0
 288              	 .cfi_startproc
 289              	 
 290              	 
 291              	 
 292 0000 80B4     	 push {r7}
 293              	.LCFI30:
 294              	 .cfi_def_cfa_offset 4
 295              	 .cfi_offset 7,-4
 296 0002 83B0     	 sub sp,sp,#12
 297              	.LCFI31:
 298              	 .cfi_def_cfa_offset 16
 299 0004 00AF     	 add r7,sp,#0
 300              	.LCFI32:
 301              	 .cfi_def_cfa_register 7
 302 0006 7860     	 str r0,[r7,#4]
 303 0008 3960     	 str r1,[r7]
  89:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
 304              	 .loc 2 89 0
 305 000a 3A68     	 ldr r2,[r7]
 306 000c 7B68     	 ldr r3,[r7,#4]
 307 000e 9342     	 cmp r3,r2
 308 0010 28BF     	 it cs
 309 0012 1346     	 movcs r3,r2
  90:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 310              	 .loc 2 90 0
 311 0014 1846     	 mov r0,r3
 312 0016 0C37     	 adds r7,r7,#12
 313              	.LCFI33:
 314              	 .cfi_def_cfa_offset 4
 315 0018 BD46     	 mov sp,r7
 316              	.LCFI34:
 317              	 .cfi_def_cfa_register 13
 318              	 
 319 001a 5DF8047B 	 ldr r7,[sp],#4
 320              	.LCFI35:
 321              	 .cfi_restore 7
 322              	 .cfi_def_cfa_offset 0
 323 001e 7047     	 bx lr
 324              	 .cfi_endproc
 325              	.LFE223:
 327              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigureEx,"ax",%progbits
 328              	 .align 2
 329              	 .global XMC_CAN_NODE_NominalBitTimeConfigureEx
 330              	 .thumb
 331              	 .thumb_func
 333              	XMC_CAN_NODE_NominalBitTimeConfigureEx:
 334              	.LFB224:
  91:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
  92:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /*******************************************************************************
  93:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
  94:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  95:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
  96:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* The max prescaler is the equal to max BRP setting (64) multiply by 8 (DIV8) */
  97:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_PRESCALER 512
  98:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
  99:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* maximum TSEG1 is 16 and maximum TSEG2 is 8, plus one fix sync tq */
 100:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_NTQ 25
 101:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_NTQ 8
 102:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 103:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG1 3
 104:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MIN_TSEG2 2
 105:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 106:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG1 15
 107:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #define XMC_CAN_NODE_MAX_TSEG2 7
 108:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 109:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 110:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
 111:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                                const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const 
 112:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 335              	 .loc 2 112 0
 336              	 .cfi_startproc
 337              	 
 338              	 
 339 0000 80B5     	 push {r7,lr}
 340              	.LCFI36:
 341              	 .cfi_def_cfa_offset 8
 342              	 .cfi_offset 7,-8
 343              	 .cfi_offset 14,-4
 344 0002 88B0     	 sub sp,sp,#32
 345              	.LCFI37:
 346              	 .cfi_def_cfa_offset 40
 347 0004 00AF     	 add r7,sp,#0
 348              	.LCFI38:
 349              	 .cfi_def_cfa_register 7
 350 0006 7860     	 str r0,[r7,#4]
 351 0008 3960     	 str r1,[r7]
 113:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Check that the CAN frequency is a multiple of the required baudrate */
 114:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 352              	 .loc 2 114 0
 353 000a 3B68     	 ldr r3,[r7]
 354 000c 1B68     	 ldr r3,[r3]
 355 000e 3A68     	 ldr r2,[r7]
 356 0010 5268     	 ldr r2,[r2,#4]
 357 0012 B3FBF2F1 	 udiv r1,r3,r2
 358 0016 02FB01F2 	 mul r2,r2,r1
 359 001a 9B1A     	 subs r3,r3,r2
 360 001c 002B     	 cmp r3,#0
 361 001e 40F09180 	 bne .L11
 362              	.LBB2:
 115:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 116:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t prescaler;
 117:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t div8 = 0;
 363              	 .loc 2 117 0
 364 0022 0023     	 movs r3,#0
 365 0024 BB61     	 str r3,[r7,#24]
 118:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 119:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler 
 120:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 366              	 .loc 2 120 0
 367 0026 3B68     	 ldr r3,[r7]
 368 0028 1A68     	 ldr r2,[r3]
 369 002a 3B68     	 ldr r3,[r7]
 370 002c 5B68     	 ldr r3,[r3,#4]
 371 002e B2FBF3F3 	 udiv r3,r2,r3
 372 0032 BB60     	 str r3,[r7,#8]
 121:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 122:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bi
 123:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 373              	 .loc 2 123 0
 374 0034 1923     	 movs r3,#25
 375 0036 7B61     	 str r3,[r7,#20]
 124:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     uint32_t tseg1 = 0;
 376              	 .loc 2 124 0
 377 0038 0023     	 movs r3,#0
 378 003a 3B61     	 str r3,[r7,#16]
 125:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     uint32_t tseg2 = 0;
 379              	 .loc 2 125 0
 380 003c 0023     	 movs r3,#0
 381 003e FB60     	 str r3,[r7,#12]
 126:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 382              	 .loc 2 126 0
 383 0040 4AE0     	 b .L12
 384              	.L17:
 127:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 128:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       /* consider this ntq, only if fcan_div is multiple of ntq */
 129:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       if ((fcan_div % ntq) == 0)
 385              	 .loc 2 129 0
 386 0042 BB68     	 ldr r3,[r7,#8]
 387 0044 7A69     	 ldr r2,[r7,#20]
 388 0046 B3FBF2F2 	 udiv r2,r3,r2
 389 004a 7969     	 ldr r1,[r7,#20]
 390 004c 01FB02F2 	 mul r2,r1,r2
 391 0050 9B1A     	 subs r3,r3,r2
 392 0052 002B     	 cmp r3,#0
 393 0054 3DD1     	 bne .L13
 130:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       {
 131:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     	div8 = 0;
 394              	 .loc 2 131 0
 395 0056 0023     	 movs r3,#0
 396 0058 BB61     	 str r3,[r7,#24]
 132:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         prescaler = fcan_div / ntq;
 397              	 .loc 2 132 0
 398 005a BA68     	 ldr r2,[r7,#8]
 399 005c 7B69     	 ldr r3,[r7,#20]
 400 005e B2FBF3F3 	 udiv r3,r2,r3
 401 0062 FB61     	 str r3,[r7,#28]
 133:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 402              	 .loc 2 133 0
 403 0064 FB69     	 ldr r3,[r7,#28]
 404 0066 002B     	 cmp r3,#0
 405 0068 33D0     	 beq .L13
 406              	 .loc 2 133 0 is_stmt 0 discriminator 1
 407 006a FB69     	 ldr r3,[r7,#28]
 408 006c B3F5007F 	 cmp r3,#512
 409 0070 2FD8     	 bhi .L13
 134:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         {
 135:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           if (prescaler >= 64)
 410              	 .loc 2 135 0 is_stmt 1
 411 0072 FB69     	 ldr r3,[r7,#28]
 412 0074 3F2B     	 cmp r3,#63
 413 0076 07D9     	 bls .L14
 136:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           {
 137:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****             /* consider prescaler >=64, if it is integer divisible by 8*/
 138:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****             if ((prescaler & 0x7U) != 0)
 414              	 .loc 2 138 0
 415 0078 FB69     	 ldr r3,[r7,#28]
 416 007a 03F00703 	 and r3,r3,#7
 417 007e 002B     	 cmp r3,#0
 418 0080 00D0     	 beq .L15
 139:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****             {
 140:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****               continue;
 419              	 .loc 2 140 0
 420 0082 29E0     	 b .L12
 421              	.L15:
 141:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****             }
 142:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****             else
 143:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****             {
 144:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****               div8 = 1;
 422              	 .loc 2 144 0
 423 0084 0123     	 movs r3,#1
 424 0086 BB61     	 str r3,[r7,#24]
 425              	.L14:
 145:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****             }
 146:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           }
 147:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 148:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 426              	 .loc 2 148 0
 427 0088 7B69     	 ldr r3,[r7,#20]
 428 008a 013B     	 subs r3,r3,#1
 429 008c 3A68     	 ldr r2,[r7]
 430 008e 1289     	 ldrh r2,[r2,#8]
 431 0090 92B2     	 uxth r2,r2
 432 0092 02FB03F3 	 mul r3,r2,r3
 433 0096 2E4A     	 ldr r2,.L19
 434 0098 A2FB0323 	 umull r2,r3,r2,r3
 435 009c 5B0B     	 lsrs r3,r3,#13
 436 009e 3B61     	 str r3,[r7,#16]
 149:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           tseg2 = ntq - tseg1 - 1;
 437              	 .loc 2 149 0
 438 00a0 7A69     	 ldr r2,[r7,#20]
 439 00a2 3B69     	 ldr r3,[r7,#16]
 440 00a4 D31A     	 subs r3,r2,r3
 441 00a6 013B     	 subs r3,r3,#1
 442 00a8 FB60     	 str r3,[r7,#12]
 150:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 151:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 443              	 .loc 2 151 0
 444 00aa 3B69     	 ldr r3,[r7,#16]
 445 00ac 022B     	 cmp r3,#2
 446 00ae 10D9     	 bls .L13
 447              	 .loc 2 151 0 is_stmt 0 discriminator 1
 448 00b0 3B69     	 ldr r3,[r7,#16]
 449 00b2 0F2B     	 cmp r3,#15
 450 00b4 0DD8     	 bhi .L13
 451              	 .loc 2 151 0 discriminator 2
 452 00b6 FB68     	 ldr r3,[r7,#12]
 453 00b8 012B     	 cmp r3,#1
 454 00ba 0AD9     	 bls .L13
 152:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         		  (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_
 455              	 .loc 2 152 0 is_stmt 1
 456 00bc FB68     	 ldr r3,[r7,#12]
 457 00be 062B     	 cmp r3,#6
 458 00c0 07D8     	 bhi .L13
 459              	 .loc 2 152 0 is_stmt 0 discriminator 1
 460 00c2 3B68     	 ldr r3,[r7]
 461 00c4 5B89     	 ldrh r3,[r3,#10]
 462 00c6 9BB2     	 uxth r3,r3
 463 00c8 1A46     	 mov r2,r3
 464 00ca FB68     	 ldr r3,[r7,#12]
 465 00cc 9A42     	 cmp r2,r3
 466 00ce 00D8     	 bhi .L13
 153:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           {
 154:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****             break;
 467              	 .loc 2 154 0 is_stmt 1
 468 00d0 05E0     	 b .L16
 469              	.L13:
 155:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           }
 156:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 157:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 158:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         }
 159:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       }
 160:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       --ntq;
 470              	 .loc 2 160 0
 471 00d2 7B69     	 ldr r3,[r7,#20]
 472 00d4 013B     	 subs r3,r3,#1
 473 00d6 7B61     	 str r3,[r7,#20]
 474              	.L12:
 126:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 475              	 .loc 2 126 0
 476 00d8 7B69     	 ldr r3,[r7,#20]
 477 00da 072B     	 cmp r3,#7
 478 00dc B1D8     	 bhi .L17
 479              	.L16:
 161:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     }
 162:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 163:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 480              	 .loc 2 163 0
 481 00de 7B69     	 ldr r3,[r7,#20]
 482 00e0 072B     	 cmp r3,#7
 483 00e2 2FD9     	 bls .L11
 164:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 165:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 166:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 167:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_EnableConfigurationChange(can_node);
 484              	 .loc 2 167 0
 485 00e4 7868     	 ldr r0,[r7,#4]
 486 00e6 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 168:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 169:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       /* Configure bit timing register */
 170:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_M
 487              	 .loc 2 170 0
 488 00ea FB68     	 ldr r3,[r7,#12]
 489 00ec 013B     	 subs r3,r3,#1
 490 00ee 1B03     	 lsls r3,r3,#12
 491 00f0 03F4E042 	 and r2,r3,#28672
 171:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 492              	 .loc 2 171 0
 493 00f4 3B68     	 ldr r3,[r7]
 494 00f6 5B89     	 ldrh r3,[r3,#10]
 495 00f8 9BB2     	 uxth r3,r3
 496 00fa 013B     	 subs r3,r3,#1
 497 00fc 9B01     	 lsls r3,r3,#6
 498 00fe DBB2     	 uxtb r3,r3
 170:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 499              	 .loc 2 170 0
 500 0100 1A43     	 orrs r2,r2,r3
 172:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 501              	 .loc 2 172 0
 502 0102 3B69     	 ldr r3,[r7,#16]
 503 0104 013B     	 subs r3,r3,#1
 504 0106 1B02     	 lsls r3,r3,#8
 505 0108 03F47063 	 and r3,r3,#3840
 171:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 506              	 .loc 2 171 0
 507 010c 42EA0301 	 orr r1,r2,r3
 173:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 508              	 .loc 2 173 0
 509 0110 BA69     	 ldr r2,[r7,#24]
 510 0112 1346     	 mov r3,r2
 511 0114 5B00     	 lsls r3,r3,#1
 512 0116 1344     	 add r3,r3,r2
 513 0118 1A46     	 mov r2,r3
 514 011a FB69     	 ldr r3,[r7,#28]
 515 011c D340     	 lsrs r3,r3,r2
 516 011e 013B     	 subs r3,r3,#1
 517 0120 03F03F03 	 and r3,r3,#63
 172:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                         (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_
 518              	 .loc 2 172 0
 519 0124 41EA0302 	 orr r2,r1,r3
 174:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                         ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 520              	 .loc 2 174 0
 521 0128 BB69     	 ldr r3,[r7,#24]
 522 012a DB03     	 lsls r3,r3,#15
 523 012c 9BB2     	 uxth r3,r3
 173:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                         ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CA
 524              	 .loc 2 173 0
 525 012e 1A43     	 orrs r2,r2,r3
 170:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                         (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NOD
 526              	 .loc 2 170 0
 527 0130 7B68     	 ldr r3,[r7,#4]
 528 0132 1969     	 ldr r1,[r3,#16]
 529 0134 0021     	 movs r1,#0
 530 0136 0A43     	 orrs r2,r2,r1
 531 0138 1A61     	 str r2,[r3,#16]
 175:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 176:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       XMC_CAN_NODE_DisableConfigurationChange(can_node);
 532              	 .loc 2 176 0
 533 013a 7868     	 ldr r0,[r7,#4]
 534 013c FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 177:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 178:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       return XMC_CAN_STATUS_SUCCESS;
 535              	 .loc 2 178 0
 536 0140 0023     	 movs r3,#0
 537 0142 00E0     	 b .L18
 538              	.L11:
 539              	.LBE2:
 179:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     }
 180:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 181:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 182:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return XMC_CAN_STATUS_ERROR;
 540              	 .loc 2 182 0
 541 0144 0123     	 movs r3,#1
 542              	.L18:
 183:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 543              	 .loc 2 183 0
 544 0146 1846     	 mov r0,r3
 545 0148 2037     	 adds r7,r7,#32
 546              	.LCFI39:
 547              	 .cfi_def_cfa_offset 8
 548 014a BD46     	 mov sp,r7
 549              	.LCFI40:
 550              	 .cfi_def_cfa_register 13
 551              	 
 552 014c 80BD     	 pop {r7,pc}
 553              	.L20:
 554 014e 00BF     	 .align 2
 555              	.L19:
 556 0150 5917B7D1 	 .word -776530087
 557              	 .cfi_endproc
 558              	.LFE224:
 560              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 561              	 .align 2
 562              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 563              	 .thumb
 564              	 .thumb_func
 566              	XMC_CAN_NODE_NominalBitTimeConfigure:
 567              	.LFB225:
 184:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 185:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
 186:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 187:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 188:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 568              	 .loc 2 188 0
 569              	 .cfi_startproc
 570              	 
 571              	 
 572 0000 80B5     	 push {r7,lr}
 573              	.LCFI41:
 574              	 .cfi_def_cfa_offset 8
 575              	 .cfi_offset 7,-8
 576              	 .cfi_offset 14,-4
 577 0002 90B0     	 sub sp,sp,#64
 578              	.LCFI42:
 579              	 .cfi_def_cfa_offset 72
 580 0004 00AF     	 add r7,sp,#0
 581              	.LCFI43:
 582              	 .cfi_def_cfa_register 7
 583 0006 7860     	 str r0,[r7,#4]
 584 0008 3960     	 str r1,[r7]
 189:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 585              	 .loc 2 189 0
 586 000a 0C23     	 movs r3,#12
 587 000c FB63     	 str r3,[r7,#60]
 190:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 588              	 .loc 2 190 0
 589 000e 0C23     	 movs r3,#12
 590 0010 BB63     	 str r3,[r7,#56]
 191:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 591              	 .loc 2 191 0
 592 0012 0023     	 movs r3,#0
 593 0014 7B63     	 str r3,[r7,#52]
 192:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 594              	 .loc 2 192 0
 595 0016 0123     	 movs r3,#1
 596 0018 3B63     	 str r3,[r7,#48]
 193:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 597              	 .loc 2 193 0
 598 001a 0023     	 movs r3,#0
 599 001c 7B61     	 str r3,[r7,#20]
 194:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 600              	 .loc 2 194 0
 601 001e 0023     	 movs r3,#0
 602 0020 FB62     	 str r3,[r7,#44]
 195:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 603              	 .loc 2 195 0
 604 0022 42F21073 	 movw r3,#10000
 605 0026 BB62     	 str r3,[r7,#40]
 196:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 197:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
 198:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
 199:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 200:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
 201:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
 202:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 203:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 204:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 205:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****        
 206:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /*
 207:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 208:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 209:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 210:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 211:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 212:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 213:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 214:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    *
 215:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * Resynchronization:
 216:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    *
 217:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 218:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 219:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 220:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    */
 221:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 222:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 606              	 .loc 2 222 0
 607 0028 0123     	 movs r3,#1
 608 002a FB63     	 str r3,[r7,#60]
 609 002c 67E0     	 b .L22
 610              	.L31:
 611              	.LBB3:
 223:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 224:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 225:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 612              	 .loc 2 225 0
 613 002e 3B68     	 ldr r3,[r7]
 614 0030 1A68     	 ldr r2,[r3]
 615 0032 1346     	 mov r3,r2
 616 0034 9B00     	 lsls r3,r3,#2
 617 0036 1344     	 add r3,r3,r2
 618 0038 5B00     	 lsls r3,r3,#1
 619 003a 1A46     	 mov r2,r3
 620 003c FB6B     	 ldr r3,[r7,#60]
 621 003e B2FBF3F3 	 udiv r3,r2,r3
 622 0042 3B61     	 str r3,[r7,#16]
 226:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 623              	 .loc 2 226 0
 624 0044 3B68     	 ldr r3,[r7]
 625 0046 5B68     	 ldr r3,[r3,#4]
 626 0048 3A69     	 ldr r2,[r7,#16]
 627 004a B2FBF3F3 	 udiv r3,r2,r3
 628 004e 7B62     	 str r3,[r7,#36]
 227:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 228:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     uint32_t error;
 229:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 230:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 629              	 .loc 2 230 0
 630 0050 796A     	 ldr r1,[r7,#36]
 631 0052 5F4B     	 ldr r3,.L39
 632 0054 A3FB0123 	 umull r2,r3,r3,r1
 633 0058 DA08     	 lsrs r2,r3,#3
 634 005a 1346     	 mov r3,r2
 635 005c 9B00     	 lsls r3,r3,#2
 636 005e 1344     	 add r3,r3,r2
 637 0060 5B00     	 lsls r3,r3,#1
 638 0062 CA1A     	 subs r2,r1,r3
 639 0064 052A     	 cmp r2,#5
 640 0066 09D9     	 bls .L23
 231:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 232:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 641              	 .loc 2 232 0
 642 0068 7B6A     	 ldr r3,[r7,#36]
 643 006a 594A     	 ldr r2,.L39
 644 006c A2FB0323 	 umull r2,r3,r2,r3
 645 0070 DB08     	 lsrs r3,r3,#3
 646 0072 7B62     	 str r3,[r7,#36]
 233:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   temp_tbaud++;
 647              	 .loc 2 233 0
 648 0074 7B6A     	 ldr r3,[r7,#36]
 649 0076 0133     	 adds r3,r3,#1
 650 0078 7B62     	 str r3,[r7,#36]
 651 007a 05E0     	 b .L24
 652              	.L23:
 234:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 235:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 236:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 237:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 653              	 .loc 2 237 0
 654 007c 7B6A     	 ldr r3,[r7,#36]
 655 007e 544A     	 ldr r2,.L39
 656 0080 A2FB0323 	 umull r2,r3,r2,r3
 657 0084 DB08     	 lsrs r3,r3,#3
 658 0086 7B62     	 str r3,[r7,#36]
 659              	.L24:
 238:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 239:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 240:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if(temp_tbaud > 0U)
 660              	 .loc 2 240 0
 661 0088 7B6A     	 ldr r3,[r7,#36]
 662 008a 002B     	 cmp r3,#0
 663 008c 0AD0     	 beq .L25
 241:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 242:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 664              	 .loc 2 242 0
 665 008e 7A6A     	 ldr r2,[r7,#36]
 666 0090 1346     	 mov r3,r2
 667 0092 9B00     	 lsls r3,r3,#2
 668 0094 1344     	 add r3,r3,r2
 669 0096 5B00     	 lsls r3,r3,#1
 670 0098 1A46     	 mov r2,r3
 671 009a 3B69     	 ldr r3,[r7,#16]
 672 009c B3FBF2F3 	 udiv r3,r3,r2
 673 00a0 3B62     	 str r3,[r7,#32]
 674 00a2 07E0     	 b .L26
 675              	.L25:
 243:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 244:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 245:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 246:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 676              	 .loc 2 246 0
 677 00a4 3B69     	 ldr r3,[r7,#16]
 678 00a6 4A4A     	 ldr r2,.L39
 679 00a8 A2FB0323 	 umull r2,r3,r2,r3
 680 00ac DB08     	 lsrs r3,r3,#3
 681 00ae 3B62     	 str r3,[r7,#32]
 247:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   temp_tbaud = 1;
 682              	 .loc 2 247 0
 683 00b0 0123     	 movs r3,#1
 684 00b2 7B62     	 str r3,[r7,#36]
 685              	.L26:
 248:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 249:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 250:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 686              	 .loc 2 250 0
 687 00b4 3B68     	 ldr r3,[r7]
 688 00b6 5A68     	 ldr r2,[r3,#4]
 689 00b8 3B6A     	 ldr r3,[r7,#32]
 690 00ba 9A42     	 cmp r2,r3
 691 00bc 05D8     	 bhi .L27
 251:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 252:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   error = temp_baudrate - can_bit_time->baudrate;
 692              	 .loc 2 252 0
 693 00be 3B68     	 ldr r3,[r7]
 694 00c0 5B68     	 ldr r3,[r3,#4]
 695 00c2 3A6A     	 ldr r2,[r7,#32]
 696 00c4 D31A     	 subs r3,r2,r3
 697 00c6 FB61     	 str r3,[r7,#28]
 698 00c8 04E0     	 b .L28
 699              	.L27:
 253:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 254:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 255:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 256:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   error = can_bit_time->baudrate - temp_baudrate;
 700              	 .loc 2 256 0
 701 00ca 3B68     	 ldr r3,[r7]
 702 00cc 5A68     	 ldr r2,[r3,#4]
 703 00ce 3B6A     	 ldr r3,[r7,#32]
 704 00d0 D31A     	 subs r3,r2,r3
 705 00d2 FB61     	 str r3,[r7,#28]
 706              	.L28:
 257:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 258:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 259:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 707              	 .loc 2 259 0
 708 00d4 7B6A     	 ldr r3,[r7,#36]
 709 00d6 142B     	 cmp r3,#20
 710 00d8 0ED8     	 bhi .L29
 711              	 .loc 2 259 0 is_stmt 0 discriminator 1
 712 00da BA6A     	 ldr r2,[r7,#40]
 713 00dc FB69     	 ldr r3,[r7,#28]
 714 00de 9A42     	 cmp r2,r3
 715 00e0 0AD9     	 bls .L29
 260:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 261:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     best_brp = temp_brp;
 716              	 .loc 2 261 0 is_stmt 1
 717 00e2 FB6B     	 ldr r3,[r7,#60]
 718 00e4 7B63     	 str r3,[r7,#52]
 262:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     best_tbaud = temp_tbaud;
 719              	 .loc 2 262 0
 720 00e6 7B6A     	 ldr r3,[r7,#36]
 721 00e8 FB62     	 str r3,[r7,#44]
 263:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     best_error = (error);
 722              	 .loc 2 263 0
 723 00ea FB69     	 ldr r3,[r7,#28]
 724 00ec BB62     	 str r3,[r7,#40]
 264:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 265:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     if (error < 1000U)
 725              	 .loc 2 265 0
 726 00ee FB69     	 ldr r3,[r7,#28]
 727 00f0 B3F57A7F 	 cmp r3,#1000
 728 00f4 00D2     	 bcs .L29
 266:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 267:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       break;
 729              	 .loc 2 267 0
 730 00f6 05E0     	 b .L30
 731              	.L29:
 732              	.LBE3:
 222:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 733              	 .loc 2 222 0 discriminator 2
 734 00f8 FB6B     	 ldr r3,[r7,#60]
 735 00fa 0133     	 adds r3,r3,#1
 736 00fc FB63     	 str r3,[r7,#60]
 737              	.L22:
 222:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 738              	 .loc 2 222 0 is_stmt 0 discriminator 1
 739 00fe FB6B     	 ldr r3,[r7,#60]
 740 0100 402B     	 cmp r3,#64
 741 0102 94D9     	 bls .L31
 742              	.L30:
 268:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     }
 269:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****    }
 270:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 271:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 272:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 743              	 .loc 2 272 0 is_stmt 1
 744 0104 42F21073 	 movw r3,#10000
 745 0108 BB62     	 str r3,[r7,#40]
 273:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 274:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 746              	 .loc 2 274 0
 747 010a 4023     	 movs r3,#64
 748 010c BB63     	 str r3,[r7,#56]
 749 010e 32E0     	 b .L32
 750              	.L38:
 751              	.LBB4:
 275:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 276:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 752              	 .loc 2 276 0
 753 0110 BB6B     	 ldr r3,[r7,#56]
 754 0112 0133     	 adds r3,r3,#1
 755 0114 42F21072 	 movw r2,#10000
 756 0118 02FB03F2 	 mul r2,r2,r3
 757 011c FB6A     	 ldr r3,[r7,#44]
 758 011e B2FBF3F3 	 udiv r3,r2,r3
 759 0122 FB60     	 str r3,[r7,#12]
 277:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t error;
 278:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if (tempSamplePoint >= can_bit_time->sample_point)
 760              	 .loc 2 278 0
 761 0124 3B68     	 ldr r3,[r7]
 762 0126 1B89     	 ldrh r3,[r3,#8]
 763 0128 9BB2     	 uxth r3,r3
 764 012a 1A46     	 mov r2,r3
 765 012c FB68     	 ldr r3,[r7,#12]
 766 012e 9A42     	 cmp r2,r3
 767 0130 07D8     	 bhi .L33
 279:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 280:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 768              	 .loc 2 280 0
 769 0132 3B68     	 ldr r3,[r7]
 770 0134 1B89     	 ldrh r3,[r3,#8]
 771 0136 9BB2     	 uxth r3,r3
 772 0138 1A46     	 mov r2,r3
 773 013a FB68     	 ldr r3,[r7,#12]
 774 013c 9B1A     	 subs r3,r3,r2
 775 013e BB61     	 str r3,[r7,#24]
 776 0140 06E0     	 b .L34
 777              	.L33:
 281:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 282:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 283:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 284:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = can_bit_time->sample_point  - tempSamplePoint;
 778              	 .loc 2 284 0
 779 0142 3B68     	 ldr r3,[r7]
 780 0144 1B89     	 ldrh r3,[r3,#8]
 781 0146 9BB2     	 uxth r3,r3
 782 0148 1A46     	 mov r2,r3
 783 014a FB68     	 ldr r3,[r7,#12]
 784 014c D31A     	 subs r3,r2,r3
 785 014e BB61     	 str r3,[r7,#24]
 786              	.L34:
 285:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 286:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     if (best_error > error)
 787              	 .loc 2 286 0
 788 0150 BA6A     	 ldr r2,[r7,#40]
 789 0152 BB69     	 ldr r3,[r7,#24]
 790 0154 9A42     	 cmp r2,r3
 791 0156 03D9     	 bls .L35
 287:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 288:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 792              	 .loc 2 288 0
 793 0158 BB6B     	 ldr r3,[r7,#56]
 794 015a 3B63     	 str r3,[r7,#48]
 289:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       best_error = error;
 795              	 .loc 2 289 0
 796 015c BB69     	 ldr r3,[r7,#24]
 797 015e BB62     	 str r3,[r7,#40]
 798              	.L35:
 290:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     }
 291:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 799              	 .loc 2 291 0
 800 0160 3B68     	 ldr r3,[r7]
 801 0162 1B89     	 ldrh r3,[r3,#8]
 802 0164 9BB2     	 uxth r3,r3
 803 0166 1A46     	 mov r2,r3
 804 0168 FB68     	 ldr r3,[r7,#12]
 805 016a 9A42     	 cmp r2,r3
 806 016c 00D9     	 bls .L36
 292:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 293:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       break;
 807              	 .loc 2 293 0
 808 016e 05E0     	 b .L37
 809              	.L36:
 810              	.LBE4:
 274:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 811              	 .loc 2 274 0 discriminator 2
 812 0170 BB6B     	 ldr r3,[r7,#56]
 813 0172 013B     	 subs r3,r3,#1
 814 0174 BB63     	 str r3,[r7,#56]
 815              	.L32:
 274:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 816              	 .loc 2 274 0 is_stmt 0 discriminator 1
 817 0176 BB6B     	 ldr r3,[r7,#56]
 818 0178 022B     	 cmp r3,#2
 819 017a C9D8     	 bhi .L38
 820              	.L37:
 294:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     }
 295:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 296:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 297:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 821              	 .loc 2 297 0 is_stmt 1
 822 017c FA6A     	 ldr r2,[r7,#44]
 823 017e 3B6B     	 ldr r3,[r7,#48]
 824 0180 D31A     	 subs r3,r2,r3
 825 0182 013B     	 subs r3,r3,#1
 826 0184 7B61     	 str r3,[r7,#20]
 298:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 299:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 827              	 .loc 2 299 0
 828 0186 7868     	 ldr r0,[r7,#4]
 829 0188 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 300:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 301:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 830              	 .loc 2 301 0
 831 018c 7B69     	 ldr r3,[r7,#20]
 832 018e 013B     	 subs r3,r3,#1
 833 0190 1B03     	 lsls r3,r3,#12
 834 0192 03F4E042 	 and r2,r3,#28672
 302:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 835              	 .loc 2 302 0
 836 0196 3B68     	 ldr r3,[r7]
 837 0198 5B89     	 ldrh r3,[r3,#10]
 838 019a 9BB2     	 uxth r3,r3
 839 019c 013B     	 subs r3,r3,#1
 840 019e 9B01     	 lsls r3,r3,#6
 841 01a0 DBB2     	 uxtb r3,r3
 301:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 842              	 .loc 2 301 0
 843 01a2 1A43     	 orrs r2,r2,r3
 303:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 844              	 .loc 2 303 0
 845 01a4 3B6B     	 ldr r3,[r7,#48]
 846 01a6 013B     	 subs r3,r3,#1
 847 01a8 1B02     	 lsls r3,r3,#8
 848 01aa 03F47063 	 and r3,r3,#3840
 302:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 849              	 .loc 2 302 0
 850 01ae 1A43     	 orrs r2,r2,r3
 304:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 851              	 .loc 2 304 0
 852 01b0 7B6B     	 ldr r3,[r7,#52]
 853 01b2 013B     	 subs r3,r3,#1
 854 01b4 03F03F03 	 and r3,r3,#63
 855 01b8 1A43     	 orrs r2,r2,r3
 301:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 856              	 .loc 2 301 0
 857 01ba 7B68     	 ldr r3,[r7,#4]
 858 01bc 1969     	 ldr r1,[r3,#16]
 859 01be 0021     	 movs r1,#0
 860 01c0 0A43     	 orrs r2,r2,r1
 861 01c2 1A61     	 str r2,[r3,#16]
 305:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 306:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 862              	 .loc 2 306 0
 863 01c4 7868     	 ldr r0,[r7,#4]
 864 01c6 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 307:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 865              	 .loc 2 307 0
 866 01ca 4037     	 adds r7,r7,#64
 867              	.LCFI44:
 868              	 .cfi_def_cfa_offset 8
 869 01cc BD46     	 mov sp,r7
 870              	.LCFI45:
 871              	 .cfi_def_cfa_register 13
 872              	 
 873 01ce 80BD     	 pop {r7,pc}
 874              	.L40:
 875              	 .align 2
 876              	.L39:
 877 01d0 CDCCCCCC 	 .word -858993459
 878              	 .cfi_endproc
 879              	.LFE225:
 881              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 882              	 .align 2
 883              	 .global XMC_CAN_AllocateMOtoNodeList
 884              	 .thumb
 885              	 .thumb_func
 887              	XMC_CAN_AllocateMOtoNodeList:
 888              	.LFB226:
 308:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 309:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 310:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 889              	 .loc 2 310 0
 890              	 .cfi_startproc
 891              	 
 892              	 
 893 0000 80B5     	 push {r7,lr}
 894              	.LCFI46:
 895              	 .cfi_def_cfa_offset 8
 896              	 .cfi_offset 7,-8
 897              	 .cfi_offset 14,-4
 898 0002 82B0     	 sub sp,sp,#8
 899              	.LCFI47:
 900              	 .cfi_def_cfa_offset 16
 901 0004 00AF     	 add r7,sp,#0
 902              	.LCFI48:
 903              	 .cfi_def_cfa_register 7
 904 0006 7860     	 str r0,[r7,#4]
 905 0008 0B46     	 mov r3,r1
 906 000a FB70     	 strb r3,[r7,#3]
 907 000c 1346     	 mov r3,r2
 908 000e BB70     	 strb r3,[r7,#2]
 311:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* wait while panel operation is in progress. */
 312:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   while (XMC_CAN_IsPanelControlReady(obj) == false)
 909              	 .loc 2 312 0
 910 0010 00BF     	 nop
 911              	.L42:
 912              	 .loc 2 312 0 is_stmt 0 discriminator 1
 913 0012 7868     	 ldr r0,[r7,#4]
 914 0014 FFF7FEFF 	 bl XMC_CAN_IsPanelControlReady
 915 0018 0346     	 mov r3,r0
 916 001a 83F00103 	 eor r3,r3,#1
 917 001e DBB2     	 uxtb r3,r3
 918 0020 002B     	 cmp r3,#0
 919 0022 F6D1     	 bne .L42
 313:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 314:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 315:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   };
 316:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 317:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 318:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 920              	 .loc 2 318 0 is_stmt 1
 921 0024 FB78     	 ldrb r3,[r7,#3]
 922 0026 0133     	 adds r3,r3,#1
 923 0028 DBB2     	 uxtb r3,r3
 924 002a BA78     	 ldrb r2,[r7,#2]
 925 002c 7868     	 ldr r0,[r7,#4]
 926 002e 0221     	 movs r1,#2
 927 0030 FFF7FEFF 	 bl XMC_CAN_PanelControl
 319:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 928              	 .loc 2 319 0
 929 0034 0837     	 adds r7,r7,#8
 930              	.LCFI49:
 931              	 .cfi_def_cfa_offset 8
 932 0036 BD46     	 mov sp,r7
 933              	.LCFI50:
 934              	 .cfi_def_cfa_register 13
 935              	 
 936 0038 80BD     	 pop {r7,pc}
 937              	 .cfi_endproc
 938              	.LFE226:
 940 003a 00BF     	 .section .text.XMC_CAN_Disable,"ax",%progbits
 941              	 .align 2
 942              	 .global XMC_CAN_Disable
 943              	 .thumb
 944              	 .thumb_func
 946              	XMC_CAN_Disable:
 947              	.LFB227:
 320:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 321:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 322:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 323:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 948              	 .loc 2 323 0
 949              	 .cfi_startproc
 950              	 
 951              	 
 952 0000 80B5     	 push {r7,lr}
 953              	.LCFI51:
 954              	 .cfi_def_cfa_offset 8
 955              	 .cfi_offset 7,-8
 956              	 .cfi_offset 14,-4
 957 0002 82B0     	 sub sp,sp,#8
 958              	.LCFI52:
 959              	 .cfi_def_cfa_offset 16
 960 0004 00AF     	 add r7,sp,#0
 961              	.LCFI53:
 962              	 .cfi_def_cfa_register 7
 963 0006 7860     	 str r0,[r7,#4]
 324:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 325:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 964              	 .loc 2 325 0
 965 0008 7B68     	 ldr r3,[r7,#4]
 966 000a 1A68     	 ldr r2,[r3]
 967 000c 0022     	 movs r2,#0
 968 000e 42F00102 	 orr r2,r2,#1
 969 0012 1A60     	 str r2,[r3]
 326:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 327:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 970              	 .loc 2 327 0
 971 0014 0448     	 ldr r0,.L44
 972 0016 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 328:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #endif
 329:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 330:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 973              	 .loc 2 330 0
 974 001a 0348     	 ldr r0,.L44
 975 001c FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 331:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #endif
 332:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 976              	 .loc 2 332 0
 977 0020 0837     	 adds r7,r7,#8
 978              	.LCFI54:
 979              	 .cfi_def_cfa_offset 8
 980 0022 BD46     	 mov sp,r7
 981              	.LCFI55:
 982              	 .cfi_def_cfa_register 13
 983              	 
 984 0024 80BD     	 pop {r7,pc}
 985              	.L45:
 986 0026 00BF     	 .align 2
 987              	.L44:
 988 0028 10000010 	 .word 268435472
 989              	 .cfi_endproc
 990              	.LFE227:
 992              	 .section .text.XMC_CAN_Enable,"ax",%progbits
 993              	 .align 2
 994              	 .global XMC_CAN_Enable
 995              	 .thumb
 996              	 .thumb_func
 998              	XMC_CAN_Enable:
 999              	.LFB228:
 333:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 334:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 335:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 336:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1000              	 .loc 2 336 0
 1001              	 .cfi_startproc
 1002              	 
 1003              	 
 1004 0000 80B5     	 push {r7,lr}
 1005              	.LCFI56:
 1006              	 .cfi_def_cfa_offset 8
 1007              	 .cfi_offset 7,-8
 1008              	 .cfi_offset 14,-4
 1009 0002 82B0     	 sub sp,sp,#8
 1010              	.LCFI57:
 1011              	 .cfi_def_cfa_offset 16
 1012 0004 00AF     	 add r7,sp,#0
 1013              	.LCFI58:
 1014              	 .cfi_def_cfa_register 7
 1015 0006 7860     	 str r0,[r7,#4]
 337:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 338:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 1016              	 .loc 2 338 0
 1017 0008 0C48     	 ldr r0,.L48
 1018 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 339:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #endif
 340:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 341:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 1019              	 .loc 2 341 0
 1020 000e 0B48     	 ldr r0,.L48
 1021 0010 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 342:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #endif
 343:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 344:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 1022              	 .loc 2 344 0
 1023 0014 7B68     	 ldr r3,[r7,#4]
 1024 0016 1B68     	 ldr r3,[r3]
 1025 0018 23F00102 	 bic r2,r3,#1
 1026 001c 7B68     	 ldr r3,[r7,#4]
 1027 001e 1968     	 ldr r1,[r3]
 1028 0020 0021     	 movs r1,#0
 1029 0022 0A43     	 orrs r2,r2,r1
 1030 0024 1A60     	 str r2,[r3]
 345:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 1031              	 .loc 2 345 0
 1032 0026 00BF     	 nop
 1033              	.L47:
 1034              	 .loc 2 345 0 is_stmt 0 discriminator 1
 1035 0028 7B68     	 ldr r3,[r7,#4]
 1036 002a 1B68     	 ldr r3,[r3]
 1037 002c 03F00203 	 and r3,r3,#2
 1038 0030 002B     	 cmp r3,#0
 1039 0032 F9D1     	 bne .L47
 346:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 347:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 348:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   };
 349:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1040              	 .loc 2 349 0 is_stmt 1
 1041 0034 0837     	 adds r7,r7,#8
 1042              	.LCFI59:
 1043              	 .cfi_def_cfa_offset 8
 1044 0036 BD46     	 mov sp,r7
 1045              	.LCFI60:
 1046              	 .cfi_def_cfa_register 13
 1047              	 
 1048 0038 80BD     	 pop {r7,pc}
 1049              	.L49:
 1050 003a 00BF     	 .align 2
 1051              	.L48:
 1052 003c 10000010 	 .word 268435472
 1053              	 .cfi_endproc
 1054              	.LFE228:
 1056              	 .section .text.XMC_CAN_Init,"ax",%progbits
 1057              	 .align 2
 1058              	 .global XMC_CAN_Init
 1059              	 .thumb
 1060              	 .thumb_func
 1062              	XMC_CAN_Init:
 1063              	.LFB229:
 350:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 351:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 352:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 353:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1064              	 .loc 2 353 0
 1065              	 .cfi_startproc
 1066              	 
 1067              	 
 1068 0000 80B5     	 push {r7,lr}
 1069              	.LCFI61:
 1070              	 .cfi_def_cfa_offset 8
 1071              	 .cfi_offset 7,-8
 1072              	 .cfi_offset 14,-4
 1073 0002 8EB0     	 sub sp,sp,#56
 1074              	.LCFI62:
 1075              	 .cfi_def_cfa_offset 64
 1076 0004 00AF     	 add r7,sp,#0
 1077              	.LCFI63:
 1078              	 .cfi_def_cfa_register 7
 1079 0006 F860     	 str r0,[r7,#12]
 1080 0008 0B46     	 mov r3,r1
 1081 000a 7A60     	 str r2,[r7,#4]
 1082 000c FB72     	 strb r3,[r7,#11]
 354:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 355:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   bool normal_divider;
 356:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 357:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t step;
 358:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 359:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 360:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 361:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 362:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 363:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 364:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1083              	 .loc 2 364 0
 1084 000e F868     	 ldr r0,[r7,#12]
 1085 0010 FFF7FEFF 	 bl XMC_CAN_Enable
 365:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 366:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1086              	 .loc 2 366 0
 1087 0014 FB7A     	 ldrb r3,[r7,#11]
 1088 0016 F868     	 ldr r0,[r7,#12]
 1089 0018 1946     	 mov r1,r3
 1090 001a FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 367:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 368:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1091              	 .loc 2 368 0
 1092 001e F868     	 ldr r0,[r7,#12]
 1093 0020 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1094 0024 7863     	 str r0,[r7,#52]
 369:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 370:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 371:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 372:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 373:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1095              	 .loc 2 373 0
 1096 0026 7A6B     	 ldr r2,[r7,#52]
 1097 0028 7B68     	 ldr r3,[r7,#4]
 1098 002a B2FBF3F3 	 udiv r3,r2,r3
 1099 002e C3F58063 	 rsb r3,r3,#1024
 1100 0032 0020     	 movs r0,#0
 1101 0034 1946     	 mov r1,r3
 1102 0036 FFF7FEFF 	 bl max
 1103 003a 0346     	 mov r3,r0
 1104 003c 1846     	 mov r0,r3
 1105 003e 40F2FF31 	 movw r1,#1023
 1106 0042 FFF7FEFF 	 bl min
 1107 0046 3863     	 str r0,[r7,#48]
 374:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 1108              	 .loc 2 374 0
 1109 0048 3B6B     	 ldr r3,[r7,#48]
 1110 004a C3F58063 	 rsb r3,r3,#1024
 1111 004e 7A6B     	 ldr r2,[r7,#52]
 1112 0050 B2FBF3F3 	 udiv r3,r2,r3
 1113 0054 FB62     	 str r3,[r7,#44]
 375:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 376:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 377:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 1114              	 .loc 2 377 0
 1115 0056 7B68     	 ldr r3,[r7,#4]
 1116 0058 9B09     	 lsrs r3,r3,#6
 1117 005a BB62     	 str r3,[r7,#40]
 378:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 1118              	 .loc 2 378 0
 1119 005c 7B6B     	 ldr r3,[r7,#52]
 1120 005e 9B09     	 lsrs r3,r3,#6
 1121 0060 7B62     	 str r3,[r7,#36]
 379:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 380:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 1122              	 .loc 2 380 0
 1123 0062 BB6A     	 ldr r3,[r7,#40]
 1124 0064 9A02     	 lsls r2,r3,#10
 1125 0066 7B6A     	 ldr r3,[r7,#36]
 1126 0068 B2FBF3F3 	 udiv r3,r2,r3
 1127 006c 1846     	 mov r0,r3
 1128 006e 40F2FF31 	 movw r1,#1023
 1129 0072 FFF7FEFF 	 bl min
 1130 0076 3862     	 str r0,[r7,#32]
 381:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 1131              	 .loc 2 381 0
 1132 0078 7B6A     	 ldr r3,[r7,#36]
 1133 007a 3A6A     	 ldr r2,[r7,#32]
 1134 007c 02FB03F3 	 mul r3,r2,r3
 1135 0080 9B0A     	 lsrs r3,r3,#10
 1136 0082 FB61     	 str r3,[r7,#28]
 382:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 1137              	 .loc 2 382 0
 1138 0084 FB69     	 ldr r3,[r7,#28]
 1139 0086 9B01     	 lsls r3,r3,#6
 1140 0088 FB61     	 str r3,[r7,#28]
 383:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 384:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 1141              	 .loc 2 384 0
 1142 008a 7A68     	 ldr r2,[r7,#4]
 1143 008c FB6A     	 ldr r3,[r7,#44]
 1144 008e D21A     	 subs r2,r2,r3
 1145 0090 7968     	 ldr r1,[r7,#4]
 1146 0092 FB69     	 ldr r3,[r7,#28]
 1147 0094 CB1A     	 subs r3,r1,r3
 1148 0096 9A42     	 cmp r2,r3
 1149 0098 94BF     	 ite ls
 1150 009a 0123     	 movls r3,#1
 1151 009c 0023     	 movhi r3,#0
 1152 009e FB76     	 strb r3,[r7,#27]
 385:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 386:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 1153              	 .loc 2 386 0
 1154 00a0 FB7E     	 ldrb r3,[r7,#27]
 1155 00a2 002B     	 cmp r3,#0
 1156 00a4 01D0     	 beq .L51
 1157              	 .loc 2 386 0 is_stmt 0 discriminator 1
 1158 00a6 3B6B     	 ldr r3,[r7,#48]
 1159 00a8 00E0     	 b .L52
 1160              	.L51:
 1161              	 .loc 2 386 0 discriminator 2
 1162 00aa 3B6A     	 ldr r3,[r7,#32]
 1163              	.L52:
 1164              	 .loc 2 386 0 discriminator 4
 1165 00ac 7B61     	 str r3,[r7,#20]
 387:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 1166              	 .loc 2 387 0 is_stmt 1 discriminator 4
 1167 00ae FB7E     	 ldrb r3,[r7,#27]
 1168 00b0 002B     	 cmp r3,#0
 1169 00b2 01D0     	 beq .L53
 1170              	 .loc 2 387 0 is_stmt 0 discriminator 1
 1171 00b4 0123     	 movs r3,#1
 1172 00b6 00E0     	 b .L54
 1173              	.L53:
 1174              	 .loc 2 387 0 discriminator 2
 1175 00b8 0223     	 movs r3,#2
 1176              	.L54:
 1177              	 .loc 2 387 0 discriminator 4
 1178 00ba FB74     	 strb r3,[r7,#19]
 388:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 389:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1179              	 .loc 2 389 0 is_stmt 1 discriminator 4
 1180 00bc FB68     	 ldr r3,[r7,#12]
 1181 00be DB68     	 ldr r3,[r3,#12]
 1182 00c0 23F44343 	 bic r3,r3,#49920
 1183 00c4 23F0FF03 	 bic r3,r3,#255
 1184 00c8 FA68     	 ldr r2,[r7,#12]
 1185 00ca D168     	 ldr r1,[r2,#12]
 1186 00cc 0021     	 movs r1,#0
 1187 00ce 0B43     	 orrs r3,r3,r1
 1188 00d0 D360     	 str r3,[r2,#12]
 390:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 1189              	 .loc 2 390 0 discriminator 4
 1190 00d2 FB68     	 ldr r3,[r7,#12]
 1191 00d4 DA68     	 ldr r2,[r3,#12]
 1192 00d6 FB7C     	 ldrb r3,[r7,#19]
 1193 00d8 9903     	 lsls r1,r3,#14
 1194 00da 7B69     	 ldr r3,[r7,#20]
 1195 00dc 0B43     	 orrs r3,r3,r1
 1196 00de 1A43     	 orrs r2,r2,r3
 1197 00e0 FB68     	 ldr r3,[r7,#12]
 1198 00e2 D968     	 ldr r1,[r3,#12]
 1199 00e4 0021     	 movs r1,#0
 1200 00e6 0A43     	 orrs r2,r2,r1
 1201 00e8 DA60     	 str r2,[r3,#12]
 391:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 392:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1202              	 .loc 2 392 0 discriminator 4
 1203 00ea 3837     	 adds r7,r7,#56
 1204              	.LCFI64:
 1205              	 .cfi_def_cfa_offset 8
 1206 00ec BD46     	 mov sp,r7
 1207              	.LCFI65:
 1208              	 .cfi_def_cfa_register 13
 1209              	 
 1210 00ee 80BD     	 pop {r7,pc}
 1211              	 .cfi_endproc
 1212              	.LFE229:
 1214              	 .section .text.XMC_CAN_SetBaudrateClockSource,"ax",%progbits
 1215              	 .align 2
 1216              	 .global XMC_CAN_SetBaudrateClockSource
 1217              	 .thumb
 1218              	 .thumb_func
 1220              	XMC_CAN_SetBaudrateClockSource:
 1221              	.LFB230:
 393:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 394:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #else
 395:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 396:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 397:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 398:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 399:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   bool normal_divider;
 400:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 401:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t step;
 402:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 403:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 404:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 405:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 406:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 407:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 408:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 409:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 410:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 411:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 412:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 413:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 414:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 415:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 416:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 417:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 418:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 419:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 420:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 421:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 422:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 423:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 424:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 425:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 426:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 427:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 428:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 429:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 430:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 431:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 432:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 433:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #endif
 434:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 435:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 436:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1222              	 .loc 2 436 0
 1223              	 .cfi_startproc
 1224              	 
 1225              	 
 1226              	 
 1227 0000 80B4     	 push {r7}
 1228              	.LCFI66:
 1229              	 .cfi_def_cfa_offset 4
 1230              	 .cfi_offset 7,-4
 1231 0002 83B0     	 sub sp,sp,#12
 1232              	.LCFI67:
 1233              	 .cfi_def_cfa_offset 16
 1234 0004 00AF     	 add r7,sp,#0
 1235              	.LCFI68:
 1236              	 .cfi_def_cfa_register 7
 1237 0006 7860     	 str r0,[r7,#4]
 1238 0008 0B46     	 mov r3,r1
 1239 000a FB70     	 strb r3,[r7,#3]
 437:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 438:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 1240              	 .loc 2 438 0
 1241 000c 7B68     	 ldr r3,[r7,#4]
 1242 000e D3F8C831 	 ldr r3,[r3,#456]
 1243 0012 23F00F02 	 bic r2,r3,#15
 1244 0016 FB78     	 ldrb r3,[r7,#3]
 1245 0018 1A43     	 orrs r2,r2,r3
 1246 001a 7B68     	 ldr r3,[r7,#4]
 1247 001c D3F8C811 	 ldr r1,[r3,#456]
 1248 0020 0021     	 movs r1,#0
 1249 0022 0A43     	 orrs r2,r2,r1
 1250 0024 C3F8C821 	 str r2,[r3,#456]
 439:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #endif  
 440:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1251              	 .loc 2 440 0
 1252 0028 0C37     	 adds r7,r7,#12
 1253              	.LCFI69:
 1254              	 .cfi_def_cfa_offset 4
 1255 002a BD46     	 mov sp,r7
 1256              	.LCFI70:
 1257              	 .cfi_def_cfa_register 13
 1258              	 
 1259 002c 5DF8047B 	 ldr r7,[sp],#4
 1260              	.LCFI71:
 1261              	 .cfi_restore 7
 1262              	 .cfi_def_cfa_offset 0
 1263 0030 7047     	 bx lr
 1264              	 .cfi_endproc
 1265              	.LFE230:
 1267 0032 00BF     	 .section .text.XMC_CAN_GetBaudrateClockSource,"ax",%progbits
 1268              	 .align 2
 1269              	 .global XMC_CAN_GetBaudrateClockSource
 1270              	 .thumb
 1271              	 .thumb_func
 1273              	XMC_CAN_GetBaudrateClockSource:
 1274              	.LFB231:
 441:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 442:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 443:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1275              	 .loc 2 443 0
 1276              	 .cfi_startproc
 1277              	 
 1278              	 
 1279              	 
 1280 0000 80B4     	 push {r7}
 1281              	.LCFI72:
 1282              	 .cfi_def_cfa_offset 4
 1283              	 .cfi_offset 7,-4
 1284 0002 83B0     	 sub sp,sp,#12
 1285              	.LCFI73:
 1286              	 .cfi_def_cfa_offset 16
 1287 0004 00AF     	 add r7,sp,#0
 1288              	.LCFI74:
 1289              	 .cfi_def_cfa_register 7
 1290 0006 7860     	 str r0,[r7,#4]
 444:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 445:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 1291              	 .loc 2 445 0
 1292 0008 7B68     	 ldr r3,[r7,#4]
 1293 000a D3F8C831 	 ldr r3,[r3,#456]
 1294 000e DBB2     	 uxtb r3,r3
 1295 0010 03F00F03 	 and r3,r3,#15
 1296 0014 DBB2     	 uxtb r3,r3
 446:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #elif (UC_FAMILY == XMC4) 
 447:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return XMC_CAN_CANCLKSRC_FPERI;
 448:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #endif    
 449:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1297              	 .loc 2 449 0
 1298 0016 1846     	 mov r0,r3
 1299 0018 0C37     	 adds r7,r7,#12
 1300              	.LCFI75:
 1301              	 .cfi_def_cfa_offset 4
 1302 001a BD46     	 mov sp,r7
 1303              	.LCFI76:
 1304              	 .cfi_def_cfa_register 13
 1305              	 
 1306 001c 5DF8047B 	 ldr r7,[sp],#4
 1307              	.LCFI77:
 1308              	 .cfi_restore 7
 1309              	 .cfi_def_cfa_offset 0
 1310 0020 7047     	 bx lr
 1311              	 .cfi_endproc
 1312              	.LFE231:
 1314 0022 00BF     	 .section .text.XMC_CAN_GetBaudrateClockFrequency,"ax",%progbits
 1315              	 .align 2
 1316              	 .global XMC_CAN_GetBaudrateClockFrequency
 1317              	 .thumb
 1318              	 .thumb_func
 1320              	XMC_CAN_GetBaudrateClockFrequency:
 1321              	.LFB232:
 450:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 451:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 452:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1322              	 .loc 2 452 0
 1323              	 .cfi_startproc
 1324              	 
 1325              	 
 1326 0000 80B5     	 push {r7,lr}
 1327              	.LCFI78:
 1328              	 .cfi_def_cfa_offset 8
 1329              	 .cfi_offset 7,-8
 1330              	 .cfi_offset 14,-4
 1331 0002 84B0     	 sub sp,sp,#16
 1332              	.LCFI79:
 1333              	 .cfi_def_cfa_offset 24
 1334 0004 00AF     	 add r7,sp,#0
 1335              	.LCFI80:
 1336              	 .cfi_def_cfa_register 7
 1337 0006 7860     	 str r0,[r7,#4]
 453:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t frequency;
 454:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 455:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 456:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 1338              	 .loc 2 456 0
 1339 0008 7868     	 ldr r0,[r7,#4]
 1340 000a FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockSource
 1341 000e 0346     	 mov r3,r0
 1342 0010 012B     	 cmp r3,#1
 1343 0012 02D0     	 beq .L60
 1344 0014 022B     	 cmp r3,#2
 1345 0016 04D0     	 beq .L61
 1346 0018 07E0     	 b .L64
 1347              	.L60:
 457:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 458:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 459:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 460:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 1348              	 .loc 2 460 0
 1349 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1350 001e F860     	 str r0,[r7,#12]
 461:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       break;
 1351              	 .loc 2 461 0
 1352 0020 06E0     	 b .L62
 1353              	.L61:
 462:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #else
 463:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 464:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 465:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       break;
 466:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #endif
 467:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 468:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       frequency = OSCHP_GetFrequency();
 1354              	 .loc 2 468 0
 1355 0022 FFF7FEFF 	 bl OSCHP_GetFrequency
 1356 0026 F860     	 str r0,[r7,#12]
 469:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       break;
 1357              	 .loc 2 469 0
 1358 0028 02E0     	 b .L62
 1359              	.L64:
 470:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 471:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     default:
 472:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       frequency = 0;
 1360              	 .loc 2 472 0
 1361 002a 0023     	 movs r3,#0
 1362 002c FB60     	 str r3,[r7,#12]
 473:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       break;
 1363              	 .loc 2 473 0
 1364 002e 00BF     	 nop
 1365              	.L62:
 474:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 475:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #else
 476:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 477:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** #endif  
 478:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 479:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return frequency;
 1366              	 .loc 2 479 0
 1367 0030 FB68     	 ldr r3,[r7,#12]
 480:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1368              	 .loc 2 480 0
 1369 0032 1846     	 mov r0,r3
 1370 0034 1037     	 adds r7,r7,#16
 1371              	.LCFI81:
 1372              	 .cfi_def_cfa_offset 8
 1373 0036 BD46     	 mov sp,r7
 1374              	.LCFI82:
 1375              	 .cfi_def_cfa_register 13
 1376              	 
 1377 0038 80BD     	 pop {r7,pc}
 1378              	 .cfi_endproc
 1379              	.LFE232:
 1381 003a 00BF     	 .section .text.XMC_CAN_InitEx,"ax",%progbits
 1382              	 .align 2
 1383              	 .global XMC_CAN_InitEx
 1384              	 .thumb
 1385              	 .thumb_func
 1387              	XMC_CAN_InitEx:
 1388              	.LFB233:
 481:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 482:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 483:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1389              	 .loc 2 483 0
 1390              	 .cfi_startproc
 1391              	 
 1392              	 
 1393 0000 80B5     	 push {r7,lr}
 1394              	.LCFI83:
 1395              	 .cfi_def_cfa_offset 8
 1396              	 .cfi_offset 7,-8
 1397              	 .cfi_offset 14,-4
 1398 0002 88B0     	 sub sp,sp,#32
 1399              	.LCFI84:
 1400              	 .cfi_def_cfa_offset 40
 1401 0004 00AF     	 add r7,sp,#0
 1402              	.LCFI85:
 1403              	 .cfi_def_cfa_register 7
 1404 0006 F860     	 str r0,[r7,#12]
 1405 0008 0B46     	 mov r3,r1
 1406 000a 7A60     	 str r2,[r7,#4]
 1407 000c FB72     	 strb r3,[r7,#11]
 484:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t step_n;
 485:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t freq_n;
 486:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 487:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 488:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 489:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 490:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 491:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 1408              	 .loc 2 491 0
 1409 000e F868     	 ldr r0,[r7,#12]
 1410 0010 FFF7FEFF 	 bl XMC_CAN_Enable
 492:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 493:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 1411              	 .loc 2 493 0
 1412 0014 FB7A     	 ldrb r3,[r7,#11]
 1413 0016 F868     	 ldr r0,[r7,#12]
 1414 0018 1946     	 mov r1,r3
 1415 001a FFF7FEFF 	 bl XMC_CAN_SetBaudrateClockSource
 494:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 1416              	 .loc 2 494 0
 1417 001e F868     	 ldr r0,[r7,#12]
 1418 0020 FFF7FEFF 	 bl XMC_CAN_GetBaudrateClockFrequency
 1419 0024 F861     	 str r0,[r7,#28]
 495:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 496:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 497:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 1420              	 .loc 2 497 0
 1421 0026 FA69     	 ldr r2,[r7,#28]
 1422 0028 7B68     	 ldr r3,[r7,#4]
 1423 002a B2FBF3F3 	 udiv r3,r2,r3
 1424 002e C3F58063 	 rsb r3,r3,#1024
 1425 0032 0020     	 movs r0,#0
 1426 0034 1946     	 mov r1,r3
 1427 0036 FFF7FEFF 	 bl max
 1428 003a 0346     	 mov r3,r0
 1429 003c 1846     	 mov r0,r3
 1430 003e 40F2FF31 	 movw r1,#1023
 1431 0042 FFF7FEFF 	 bl min
 1432 0046 B861     	 str r0,[r7,#24]
 498:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 1433              	 .loc 2 498 0
 1434 0048 BB69     	 ldr r3,[r7,#24]
 1435 004a C3F58063 	 rsb r3,r3,#1024
 1436 004e FA69     	 ldr r2,[r7,#28]
 1437 0050 B2FBF3F3 	 udiv r3,r2,r3
 1438 0054 7B61     	 str r3,[r7,#20]
 499:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 500:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 1439              	 .loc 2 500 0
 1440 0056 FB68     	 ldr r3,[r7,#12]
 1441 0058 DB68     	 ldr r3,[r3,#12]
 1442 005a 23F44343 	 bic r3,r3,#49920
 1443 005e 23F0FF03 	 bic r3,r3,#255
 1444 0062 FA68     	 ldr r2,[r7,#12]
 1445 0064 D168     	 ldr r1,[r2,#12]
 1446 0066 0021     	 movs r1,#0
 1447 0068 0B43     	 orrs r3,r3,r1
 1448 006a D360     	 str r3,[r2,#12]
 501:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_P
 1449              	 .loc 2 501 0
 1450 006c FB68     	 ldr r3,[r7,#12]
 1451 006e DA68     	 ldr r2,[r3,#12]
 1452 0070 BB69     	 ldr r3,[r7,#24]
 1453 0072 1343     	 orrs r3,r3,r2
 1454 0074 43F48042 	 orr r2,r3,#16384
 1455 0078 FB68     	 ldr r3,[r7,#12]
 1456 007a D968     	 ldr r1,[r3,#12]
 1457 007c 0021     	 movs r1,#0
 1458 007e 0A43     	 orrs r2,r2,r1
 1459 0080 DA60     	 str r2,[r3,#12]
 502:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 503:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return freq_n;
 1460              	 .loc 2 503 0
 1461 0082 7B69     	 ldr r3,[r7,#20]
 504:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1462              	 .loc 2 504 0
 1463 0084 1846     	 mov r0,r3
 1464 0086 2037     	 adds r7,r7,#32
 1465              	.LCFI86:
 1466              	 .cfi_def_cfa_offset 8
 1467 0088 BD46     	 mov sp,r7
 1468              	.LCFI87:
 1469              	 .cfi_def_cfa_register 13
 1470              	 
 1471 008a 80BD     	 pop {r7,pc}
 1472              	 .cfi_endproc
 1473              	.LFE233:
 1475              	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 1476              	 .align 2
 1477              	 .global XMC_CAN_MO_SetIdentifier
 1478              	 .thumb
 1479              	 .thumb_func
 1481              	XMC_CAN_MO_SetIdentifier:
 1482              	.LFB234:
 505:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 506:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 507:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 508:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1483              	 .loc 2 508 0
 1484              	 .cfi_startproc
 1485              	 
 1486              	 
 1487              	 
 1488 0000 80B4     	 push {r7}
 1489              	.LCFI88:
 1490              	 .cfi_def_cfa_offset 4
 1491              	 .cfi_offset 7,-4
 1492 0002 83B0     	 sub sp,sp,#12
 1493              	.LCFI89:
 1494              	 .cfi_def_cfa_offset 16
 1495 0004 00AF     	 add r7,sp,#0
 1496              	.LCFI90:
 1497              	 .cfi_def_cfa_register 7
 1498 0006 7860     	 str r0,[r7,#4]
 1499 0008 3960     	 str r1,[r7]
 509:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1500              	 .loc 2 509 0
 1501 000a 7B68     	 ldr r3,[r7,#4]
 1502 000c 1B68     	 ldr r3,[r3]
 1503 000e 9B69     	 ldr r3,[r3,#24]
 1504 0010 03F00053 	 and r3,r3,#536870912
 1505 0014 002B     	 cmp r3,#0
 1506 0016 10D1     	 bne .L68
 510:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 511:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1507              	 .loc 2 511 0
 1508 0018 7B68     	 ldr r3,[r7,#4]
 1509 001a 1B68     	 ldr r3,[r3]
 1510 001c 7A68     	 ldr r2,[r7,#4]
 1511 001e 1268     	 ldr r2,[r2]
 1512 0020 9269     	 ldr r2,[r2,#24]
 1513 0022 02F06041 	 and r1,r2,#-536870912
 512:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1514              	 .loc 2 512 0
 1515 0026 3A68     	 ldr r2,[r7]
 1516 0028 9204     	 lsls r2,r2,#18
 1517 002a 22F06042 	 bic r2,r2,#-536870912
 511:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                              ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR
 1518              	 .loc 2 511 0
 1519 002e 0A43     	 orrs r2,r2,r1
 1520 0030 9969     	 ldr r1,[r3,#24]
 1521 0032 0021     	 movs r1,#0
 1522 0034 0A43     	 orrs r2,r2,r1
 1523 0036 9A61     	 str r2,[r3,#24]
 1524 0038 0EE0     	 b .L69
 1525              	.L68:
 513:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 514:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 515:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 516:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 1526              	 .loc 2 516 0
 1527 003a 7B68     	 ldr r3,[r7,#4]
 1528 003c 1B68     	 ldr r3,[r3]
 1529 003e 7A68     	 ldr r2,[r7,#4]
 1530 0040 1268     	 ldr r2,[r2]
 1531 0042 9269     	 ldr r2,[r2,#24]
 1532 0044 02F06041 	 and r1,r2,#-536870912
 517:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1533              	 .loc 2 517 0
 1534 0048 3A68     	 ldr r2,[r7]
 1535 004a 22F06042 	 bic r2,r2,#-536870912
 516:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                            (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 1536              	 .loc 2 516 0
 1537 004e 0A43     	 orrs r2,r2,r1
 1538 0050 9969     	 ldr r1,[r3,#24]
 1539 0052 0021     	 movs r1,#0
 1540 0054 0A43     	 orrs r2,r2,r1
 1541 0056 9A61     	 str r2,[r3,#24]
 1542              	.L69:
 518:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 519:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 1543              	 .loc 2 519 0
 1544 0058 3B68     	 ldr r3,[r7]
 1545 005a 23F06042 	 bic r2,r3,#-536870912
 1546 005e 7B68     	 ldr r3,[r7,#4]
 1547 0060 D1B2     	 uxtb r1,r2
 1548 0062 0020     	 movs r0,#0
 1549 0064 0143     	 orrs r1,r1,r0
 1550 0066 1971     	 strb r1,[r3,#4]
 1551 0068 110A     	 lsrs r1,r2,#8
 1552 006a C9B2     	 uxtb r1,r1
 1553 006c 0020     	 movs r0,#0
 1554 006e 0143     	 orrs r1,r1,r0
 1555 0070 5971     	 strb r1,[r3,#5]
 1556 0072 110C     	 lsrs r1,r2,#16
 1557 0074 C9B2     	 uxtb r1,r1
 1558 0076 0020     	 movs r0,#0
 1559 0078 0143     	 orrs r1,r1,r0
 1560 007a 9971     	 strb r1,[r3,#6]
 1561 007c 120E     	 lsrs r2,r2,#24
 1562 007e 02F01F02 	 and r2,r2,#31
 1563 0082 02F01F00 	 and r0,r2,#31
 1564 0086 DA79     	 ldrb r2,[r3,#7]
 1565 0088 22F01F02 	 bic r2,r2,#31
 1566 008c 1146     	 mov r1,r2
 1567 008e 0246     	 mov r2,r0
 1568 0090 0A43     	 orrs r2,r2,r1
 1569 0092 DA71     	 strb r2,[r3,#7]
 520:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1570              	 .loc 2 520 0
 1571 0094 0C37     	 adds r7,r7,#12
 1572              	.LCFI91:
 1573              	 .cfi_def_cfa_offset 4
 1574 0096 BD46     	 mov sp,r7
 1575              	.LCFI92:
 1576              	 .cfi_def_cfa_register 13
 1577              	 
 1578 0098 5DF8047B 	 ldr r7,[sp],#4
 1579              	.LCFI93:
 1580              	 .cfi_restore 7
 1581              	 .cfi_def_cfa_offset 0
 1582 009c 7047     	 bx lr
 1583              	 .cfi_endproc
 1584              	.LFE234:
 1586 009e 00BF     	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 1587              	 .align 2
 1588              	 .global XMC_CAN_MO_GetIdentifier
 1589              	 .thumb
 1590              	 .thumb_func
 1592              	XMC_CAN_MO_GetIdentifier:
 1593              	.LFB235:
 521:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 522:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 523:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 524:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 525:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1594              	 .loc 2 525 0
 1595              	 .cfi_startproc
 1596              	 
 1597              	 
 1598              	 
 1599 0000 80B4     	 push {r7}
 1600              	.LCFI94:
 1601              	 .cfi_def_cfa_offset 4
 1602              	 .cfi_offset 7,-4
 1603 0002 85B0     	 sub sp,sp,#20
 1604              	.LCFI95:
 1605              	 .cfi_def_cfa_offset 24
 1606 0004 00AF     	 add r7,sp,#0
 1607              	.LCFI96:
 1608              	 .cfi_def_cfa_register 7
 1609 0006 7860     	 str r0,[r7,#4]
 526:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 527:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 1610              	 .loc 2 527 0
 1611 0008 7B68     	 ldr r3,[r7,#4]
 1612 000a 1B68     	 ldr r3,[r3]
 1613 000c 9B69     	 ldr r3,[r3,#24]
 1614 000e 03F00053 	 and r3,r3,#536870912
 1615 0012 002B     	 cmp r3,#0
 1616 0014 07D1     	 bne .L71
 528:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 529:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STD
 1617              	 .loc 2 529 0
 1618 0016 7B68     	 ldr r3,[r7,#4]
 1619 0018 1B68     	 ldr r3,[r3]
 1620 001a 9B69     	 ldr r3,[r3,#24]
 1621 001c 23F06043 	 bic r3,r3,#-536870912
 1622 0020 9B0C     	 lsrs r3,r3,#18
 1623 0022 FB60     	 str r3,[r7,#12]
 1624 0024 05E0     	 b .L72
 1625              	.L71:
 530:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 531:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 532:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 533:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 1626              	 .loc 2 533 0
 1627 0026 7B68     	 ldr r3,[r7,#4]
 1628 0028 1B68     	 ldr r3,[r3]
 1629 002a 9B69     	 ldr r3,[r3,#24]
 1630 002c 23F06043 	 bic r3,r3,#-536870912
 1631 0030 FB60     	 str r3,[r7,#12]
 1632              	.L72:
 534:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 535:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return identifier;
 1633              	 .loc 2 535 0
 1634 0032 FB68     	 ldr r3,[r7,#12]
 536:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1635              	 .loc 2 536 0
 1636 0034 1846     	 mov r0,r3
 1637 0036 1437     	 adds r7,r7,#20
 1638              	.LCFI97:
 1639              	 .cfi_def_cfa_offset 4
 1640 0038 BD46     	 mov sp,r7
 1641              	.LCFI98:
 1642              	 .cfi_def_cfa_register 13
 1643              	 
 1644 003a 5DF8047B 	 ldr r7,[sp],#4
 1645              	.LCFI99:
 1646              	 .cfi_restore 7
 1647              	 .cfi_def_cfa_offset 0
 1648 003e 7047     	 bx lr
 1649              	 .cfi_endproc
 1650              	.LFE235:
 1652              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 1653              	 .align 2
 1654              	 .global XMC_CAN_MO_GetAcceptanceMask
 1655              	 .thumb
 1656              	 .thumb_func
 1658              	XMC_CAN_MO_GetAcceptanceMask:
 1659              	.LFB236:
 537:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 538:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 539:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 540:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1660              	 .loc 2 540 0
 1661              	 .cfi_startproc
 1662              	 
 1663              	 
 1664              	 
 1665 0000 80B4     	 push {r7}
 1666              	.LCFI100:
 1667              	 .cfi_def_cfa_offset 4
 1668              	 .cfi_offset 7,-4
 1669 0002 85B0     	 sub sp,sp,#20
 1670              	.LCFI101:
 1671              	 .cfi_def_cfa_offset 24
 1672 0004 00AF     	 add r7,sp,#0
 1673              	.LCFI102:
 1674              	 .cfi_def_cfa_register 7
 1675 0006 7860     	 str r0,[r7,#4]
 541:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 542:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1676              	 .loc 2 542 0
 1677 0008 7B68     	 ldr r3,[r7,#4]
 1678 000a 1B68     	 ldr r3,[r3]
 1679 000c DB68     	 ldr r3,[r3,#12]
 1680 000e 03F00053 	 and r3,r3,#536870912
 1681 0012 002B     	 cmp r3,#0
 1682 0014 0ED1     	 bne .L75
 543:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1683              	 .loc 2 543 0
 1684 0016 7B68     	 ldr r3,[r7,#4]
 1685 0018 1B68     	 ldr r3,[r3]
 1686 001a 9B69     	 ldr r3,[r3,#24]
 1687 001c 03F00053 	 and r3,r3,#536870912
 1688 0020 002B     	 cmp r3,#0
 1689 0022 07D1     	 bne .L75
 544:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 545:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 1690              	 .loc 2 545 0
 1691 0024 7B68     	 ldr r3,[r7,#4]
 1692 0026 1B68     	 ldr r3,[r3]
 1693 0028 DB68     	 ldr r3,[r3,#12]
 1694 002a 23F06043 	 bic r3,r3,#-536870912
 1695 002e 9B0C     	 lsrs r3,r3,#18
 1696 0030 FB60     	 str r3,[r7,#12]
 1697 0032 05E0     	 b .L76
 1698              	.L75:
 546:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 547:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 548:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 549:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 1699              	 .loc 2 549 0
 1700 0034 7B68     	 ldr r3,[r7,#4]
 1701 0036 1B68     	 ldr r3,[r3]
 1702 0038 DB68     	 ldr r3,[r3,#12]
 1703 003a 23F06043 	 bic r3,r3,#-536870912
 1704 003e FB60     	 str r3,[r7,#12]
 1705              	.L76:
 550:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 551:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return identifier_mask;
 1706              	 .loc 2 551 0
 1707 0040 FB68     	 ldr r3,[r7,#12]
 552:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1708              	 .loc 2 552 0
 1709 0042 1846     	 mov r0,r3
 1710 0044 1437     	 adds r7,r7,#20
 1711              	.LCFI103:
 1712              	 .cfi_def_cfa_offset 4
 1713 0046 BD46     	 mov sp,r7
 1714              	.LCFI104:
 1715              	 .cfi_def_cfa_register 13
 1716              	 
 1717 0048 5DF8047B 	 ldr r7,[sp],#4
 1718              	.LCFI105:
 1719              	 .cfi_restore 7
 1720              	 .cfi_def_cfa_offset 0
 1721 004c 7047     	 bx lr
 1722              	 .cfi_endproc
 1723              	.LFE236:
 1725 004e 00BF     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 1726              	 .align 2
 1727              	 .global XMC_CAN_MO_SetAcceptanceMask
 1728              	 .thumb
 1729              	 .thumb_func
 1731              	XMC_CAN_MO_SetAcceptanceMask:
 1732              	.LFB237:
 553:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 554:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask of the MO */
 555:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 556:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1733              	 .loc 2 556 0
 1734              	 .cfi_startproc
 1735              	 
 1736              	 
 1737              	 
 1738 0000 80B4     	 push {r7}
 1739              	.LCFI106:
 1740              	 .cfi_def_cfa_offset 4
 1741              	 .cfi_offset 7,-4
 1742 0002 83B0     	 sub sp,sp,#12
 1743              	.LCFI107:
 1744              	 .cfi_def_cfa_offset 16
 1745 0004 00AF     	 add r7,sp,#0
 1746              	.LCFI108:
 1747              	 .cfi_def_cfa_register 7
 1748 0006 7860     	 str r0,[r7,#4]
 1749 0008 3960     	 str r1,[r7]
 557:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1750              	 .loc 2 557 0
 1751 000a 7B68     	 ldr r3,[r7,#4]
 1752 000c 1B68     	 ldr r3,[r3]
 1753 000e DB68     	 ldr r3,[r3,#12]
 1754 0010 03F00053 	 and r3,r3,#536870912
 1755 0014 002B     	 cmp r3,#0
 1756 0016 15D1     	 bne .L79
 558:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1757              	 .loc 2 558 0
 1758 0018 7B68     	 ldr r3,[r7,#4]
 1759 001a 1B68     	 ldr r3,[r3]
 1760 001c 9B69     	 ldr r3,[r3,#24]
 1761 001e 03F00053 	 and r3,r3,#536870912
 1762 0022 002B     	 cmp r3,#0
 1763 0024 0ED1     	 bne .L79
 559:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 560:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1764              	 .loc 2 560 0
 1765 0026 7B68     	 ldr r3,[r7,#4]
 1766 0028 1B68     	 ldr r3,[r3]
 1767 002a 7A68     	 ldr r2,[r7,#4]
 1768 002c 1268     	 ldr r2,[r2]
 1769 002e D268     	 ldr r2,[r2,#12]
 1770 0030 02F06041 	 and r1,r2,#-536870912
 561:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1771              	 .loc 2 561 0
 1772 0034 3A68     	 ldr r2,[r7]
 1773 0036 9204     	 lsls r2,r2,#18
 560:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                   (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1774              	 .loc 2 560 0
 1775 0038 0A43     	 orrs r2,r2,r1
 1776 003a D968     	 ldr r1,[r3,#12]
 1777 003c 0021     	 movs r1,#0
 1778 003e 0A43     	 orrs r2,r2,r1
 1779 0040 DA60     	 str r2,[r3,#12]
 1780 0042 0EE0     	 b .L80
 1781              	.L79:
 562:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 563:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 564:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 565:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1782              	 .loc 2 565 0
 1783 0044 7B68     	 ldr r3,[r7,#4]
 1784 0046 1B68     	 ldr r3,[r3]
 1785 0048 7A68     	 ldr r2,[r7,#4]
 1786 004a 1268     	 ldr r2,[r2]
 1787 004c D268     	 ldr r2,[r2,#12]
 1788 004e 02F06041 	 and r1,r2,#-536870912
 566:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1789              	 .loc 2 566 0
 1790 0052 3A68     	 ldr r2,[r7]
 1791 0054 22F06042 	 bic r2,r2,#-536870912
 565:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                   (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1792              	 .loc 2 565 0
 1793 0058 0A43     	 orrs r2,r2,r1
 1794 005a D968     	 ldr r1,[r3,#12]
 1795 005c 0021     	 movs r1,#0
 1796 005e 0A43     	 orrs r2,r2,r1
 1797 0060 DA60     	 str r2,[r3,#12]
 1798              	.L80:
 567:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 568:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1799              	 .loc 2 568 0
 1800 0062 3B68     	 ldr r3,[r7]
 1801 0064 23F06042 	 bic r2,r3,#-536870912
 1802 0068 7B68     	 ldr r3,[r7,#4]
 1803 006a D1B2     	 uxtb r1,r2
 1804 006c 0020     	 movs r0,#0
 1805 006e 0143     	 orrs r1,r1,r0
 1806 0070 1972     	 strb r1,[r3,#8]
 1807 0072 110A     	 lsrs r1,r2,#8
 1808 0074 C9B2     	 uxtb r1,r1
 1809 0076 0020     	 movs r0,#0
 1810 0078 0143     	 orrs r1,r1,r0
 1811 007a 5972     	 strb r1,[r3,#9]
 1812 007c 110C     	 lsrs r1,r2,#16
 1813 007e C9B2     	 uxtb r1,r1
 1814 0080 0020     	 movs r0,#0
 1815 0082 0143     	 orrs r1,r1,r0
 1816 0084 9972     	 strb r1,[r3,#10]
 1817 0086 120E     	 lsrs r2,r2,#24
 1818 0088 02F01F02 	 and r2,r2,#31
 1819 008c 02F01F00 	 and r0,r2,#31
 1820 0090 DA7A     	 ldrb r2,[r3,#11]
 1821 0092 22F01F02 	 bic r2,r2,#31
 1822 0096 1146     	 mov r1,r2
 1823 0098 0246     	 mov r2,r0
 1824 009a 0A43     	 orrs r2,r2,r1
 1825 009c DA72     	 strb r2,[r3,#11]
 569:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 1826              	 .loc 2 569 0
 1827 009e 0C37     	 adds r7,r7,#12
 1828              	.LCFI109:
 1829              	 .cfi_def_cfa_offset 4
 1830 00a0 BD46     	 mov sp,r7
 1831              	.LCFI110:
 1832              	 .cfi_def_cfa_register 13
 1833              	 
 1834 00a2 5DF8047B 	 ldr r7,[sp],#4
 1835              	.LCFI111:
 1836              	 .cfi_restore 7
 1837              	 .cfi_def_cfa_offset 0
 1838 00a6 7047     	 bx lr
 1839              	 .cfi_endproc
 1840              	.LFE237:
 1842              	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1843              	 .align 2
 1844              	 .global XMC_CAN_MO_Config
 1845              	 .thumb
 1846              	 .thumb_func
 1848              	XMC_CAN_MO_Config:
 1849              	.LFB238:
 570:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 571:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 572:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 573:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 1850              	 .loc 2 573 0
 1851              	 .cfi_startproc
 1852              	 
 1853              	 
 1854 0000 80B5     	 push {r7,lr}
 1855              	.LCFI112:
 1856              	 .cfi_def_cfa_offset 8
 1857              	 .cfi_offset 7,-8
 1858              	 .cfi_offset 14,-4
 1859 0002 86B0     	 sub sp,sp,#24
 1860              	.LCFI113:
 1861              	 .cfi_def_cfa_offset 32
 1862 0004 00AF     	 add r7,sp,#0
 1863              	.LCFI114:
 1864              	 .cfi_def_cfa_register 7
 1865 0006 7860     	 str r0,[r7,#4]
 574:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t reg;
 575:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   
 576:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 577:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 1866              	 .loc 2 577 0
 1867 0008 7B68     	 ldr r3,[r7,#4]
 1868 000a 1B68     	 ldr r3,[r3]
 1869 000c 03F13843 	 add r3,r3,#-1207959552
 1870 0010 A3F5A833 	 sub r3,r3,#86016
 1871 0014 5B09     	 lsrs r3,r3,#5
 1872 0016 7B61     	 str r3,[r7,#20]
 578:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t set = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num%32) << CAN_
 1873              	 .loc 2 578 0
 1874 0018 7B69     	 ldr r3,[r7,#20]
 1875 001a 5B09     	 lsrs r3,r3,#5
 1876 001c 5A03     	 lsls r2,r3,#13
 1877 001e 7B69     	 ldr r3,[r7,#20]
 1878 0020 03F01F03 	 and r3,r3,#31
 1879 0024 1B02     	 lsls r3,r3,#8
 1880 0026 1343     	 orrs r3,r3,r2
 1881 0028 3B61     	 str r3,[r7,#16]
 579:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 1882              	 .loc 2 579 0
 1883 002a 7B68     	 ldr r3,[r7,#4]
 1884 002c 1B68     	 ldr r3,[r3]
 1885 002e 7A68     	 ldr r2,[r7,#4]
 1886 0030 1268     	 ldr r2,[r2]
 1887 0032 9268     	 ldr r2,[r2,#8]
 1888 0034 22F47F42 	 bic r2,r2,#65280
 1889 0038 9968     	 ldr r1,[r3,#8]
 1890 003a 0021     	 movs r1,#0
 1891 003c 0A43     	 orrs r2,r2,r1
 1892 003e 9A60     	 str r2,[r3,#8]
 580:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR |= set;
 1893              	 .loc 2 580 0
 1894 0040 7B68     	 ldr r3,[r7,#4]
 1895 0042 1B68     	 ldr r3,[r3]
 1896 0044 7A68     	 ldr r2,[r7,#4]
 1897 0046 1268     	 ldr r2,[r2]
 1898 0048 9168     	 ldr r1,[r2,#8]
 1899 004a 3A69     	 ldr r2,[r7,#16]
 1900 004c 0A43     	 orrs r2,r2,r1
 1901 004e 9968     	 ldr r1,[r3,#8]
 1902 0050 0021     	 movs r1,#0
 1903 0052 0A43     	 orrs r2,r2,r1
 1904 0054 9A60     	 str r2,[r3,#8]
 581:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   
 582:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 1905              	 .loc 2 582 0
 1906 0056 7B68     	 ldr r3,[r7,#4]
 1907 0058 DB79     	 ldrb r3,[r3,#7]
 1908 005a 03F02003 	 and r3,r3,#32
 1909 005e DBB2     	 uxtb r3,r3
 1910 0060 002B     	 cmp r3,#0
 1911 0062 07D0     	 beq .L82
 583:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1912              	 .loc 2 583 0 discriminator 1
 1913 0064 7B68     	 ldr r3,[r7,#4]
 1914 0066 DB79     	 ldrb r3,[r3,#7]
 1915 0068 03F02003 	 and r3,r3,#32
 1916 006c DBB2     	 uxtb r3,r3
 582:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1917              	 .loc 2 582 0 discriminator 1
 1918 006e 002B     	 cmp r3,#0
 1919 0070 00D1     	 bne .L82
 582:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1920              	 .loc 2 582 0 is_stmt 0
 1921 0072 8FE0     	 b .L81
 1922              	.L82:
 584:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1923              	 .loc 2 584 0 is_stmt 1
 1924 0074 7B68     	 ldr r3,[r7,#4]
 1925 0076 5B7D     	 ldrb r3,[r3,#21]
 583:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1926              	 .loc 2 583 0
 1927 0078 002B     	 cmp r3,#0
 1928 007a 04D0     	 beq .L84
 585:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 1929              	 .loc 2 585 0
 1930 007c 7B68     	 ldr r3,[r7,#4]
 1931 007e 5B7D     	 ldrb r3,[r3,#21]
 584:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1932              	 .loc 2 584 0
 1933 0080 012B     	 cmp r3,#1
 1934 0082 00D0     	 beq .L84
 1935 0084 86E0     	 b .L81
 1936              	.L84:
 586:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 587:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     ; /*Do nothing*/
 588:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 589:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 590:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 591:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 592:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 593:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1937              	 .loc 2 593 0
 1938 0086 7B68     	 ldr r3,[r7,#4]
 1939 0088 1B68     	 ldr r3,[r3]
 1940 008a DA69     	 ldr r2,[r3,#28]
 1941 008c 0022     	 movs r2,#0
 1942 008e 42F02002 	 orr r2,r2,#32
 1943 0092 DA61     	 str r2,[r3,#28]
 594:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1944              	 .loc 2 594 0
 1945 0094 7B68     	 ldr r3,[r7,#4]
 1946 0096 DB79     	 ldrb r3,[r3,#7]
 1947 0098 03F02003 	 and r3,r3,#32
 1948 009c DBB2     	 uxtb r3,r3
 1949 009e 002B     	 cmp r3,#0
 1950 00a0 40D1     	 bne .L85
 595:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 596:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 1951              	 .loc 2 596 0
 1952 00a2 7B68     	 ldr r3,[r7,#4]
 1953 00a4 5B68     	 ldr r3,[r3,#4]
 1954 00a6 FB60     	 str r3,[r7,#12]
 597:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1955              	 .loc 2 597 0
 1956 00a8 FB68     	 ldr r3,[r7,#12]
 1957 00aa 03F06043 	 and r3,r3,#-536870912
 1958 00ae FB60     	 str r3,[r7,#12]
 598:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1959              	 .loc 2 598 0
 1960 00b0 7B68     	 ldr r3,[r7,#4]
 1961 00b2 1A79     	 ldrb r2,[r3,#4]
 1962 00b4 5979     	 ldrb r1,[r3,#5]
 1963 00b6 0902     	 lsls r1,r1,#8
 1964 00b8 0A43     	 orrs r2,r2,r1
 1965 00ba 9979     	 ldrb r1,[r3,#6]
 1966 00bc 0904     	 lsls r1,r1,#16
 1967 00be 0A43     	 orrs r2,r2,r1
 1968 00c0 DB79     	 ldrb r3,[r3,#7]
 1969 00c2 03F01F03 	 and r3,r3,#31
 1970 00c6 1B06     	 lsls r3,r3,#24
 1971 00c8 1343     	 orrs r3,r3,r2
 1972 00ca 9B04     	 lsls r3,r3,#18
 1973 00cc 1A46     	 mov r2,r3
 1974 00ce FB68     	 ldr r3,[r7,#12]
 1975 00d0 1343     	 orrs r3,r3,r2
 1976 00d2 FB60     	 str r3,[r7,#12]
 599:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1977              	 .loc 2 599 0
 1978 00d4 7B68     	 ldr r3,[r7,#4]
 1979 00d6 1B68     	 ldr r3,[r3]
 1980 00d8 9A69     	 ldr r2,[r3,#24]
 1981 00da 0021     	 movs r1,#0
 1982 00dc FA68     	 ldr r2,[r7,#12]
 1983 00de 0A43     	 orrs r2,r2,r1
 1984 00e0 9A61     	 str r2,[r3,#24]
 600:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 601:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 1985              	 .loc 2 601 0
 1986 00e2 7B68     	 ldr r3,[r7,#4]
 1987 00e4 9B68     	 ldr r3,[r3,#8]
 1988 00e6 FB60     	 str r3,[r7,#12]
 602:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1989              	 .loc 2 602 0
 1990 00e8 FB68     	 ldr r3,[r7,#12]
 1991 00ea 03F06043 	 and r3,r3,#-536870912
 1992 00ee FB60     	 str r3,[r7,#12]
 603:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1993              	 .loc 2 603 0
 1994 00f0 7B68     	 ldr r3,[r7,#4]
 1995 00f2 1A7A     	 ldrb r2,[r3,#8]
 1996 00f4 597A     	 ldrb r1,[r3,#9]
 1997 00f6 0902     	 lsls r1,r1,#8
 1998 00f8 0A43     	 orrs r2,r2,r1
 1999 00fa 997A     	 ldrb r1,[r3,#10]
 2000 00fc 0904     	 lsls r1,r1,#16
 2001 00fe 0A43     	 orrs r2,r2,r1
 2002 0100 DB7A     	 ldrb r3,[r3,#11]
 2003 0102 03F01F03 	 and r3,r3,#31
 2004 0106 1B06     	 lsls r3,r3,#24
 2005 0108 1343     	 orrs r3,r3,r2
 2006 010a 9B04     	 lsls r3,r3,#18
 2007 010c 1A46     	 mov r2,r3
 2008 010e FB68     	 ldr r3,[r7,#12]
 2009 0110 1343     	 orrs r3,r3,r2
 2010 0112 FB60     	 str r3,[r7,#12]
 604:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 2011              	 .loc 2 604 0
 2012 0114 7B68     	 ldr r3,[r7,#4]
 2013 0116 1B68     	 ldr r3,[r3]
 2014 0118 DA68     	 ldr r2,[r3,#12]
 2015 011a 0021     	 movs r1,#0
 2016 011c FA68     	 ldr r2,[r7,#12]
 2017 011e 0A43     	 orrs r2,r2,r1
 2018 0120 DA60     	 str r2,[r3,#12]
 2019 0122 0FE0     	 b .L86
 2020              	.L85:
 605:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     }
 606:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     else
 607:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 608:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 2021              	 .loc 2 608 0
 2022 0124 7B68     	 ldr r3,[r7,#4]
 2023 0126 1B68     	 ldr r3,[r3]
 2024 0128 7A68     	 ldr r2,[r7,#4]
 2025 012a 5268     	 ldr r2,[r2,#4]
 2026 012c 9969     	 ldr r1,[r3,#24]
 2027 012e 0021     	 movs r1,#0
 2028 0130 0A43     	 orrs r2,r2,r1
 2029 0132 9A61     	 str r2,[r3,#24]
 609:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 2030              	 .loc 2 609 0
 2031 0134 7B68     	 ldr r3,[r7,#4]
 2032 0136 1B68     	 ldr r3,[r3]
 2033 0138 7A68     	 ldr r2,[r7,#4]
 2034 013a 9268     	 ldr r2,[r2,#8]
 2035 013c D968     	 ldr r1,[r3,#12]
 2036 013e 0021     	 movs r1,#0
 2037 0140 0A43     	 orrs r2,r2,r1
 2038 0142 DA60     	 str r2,[r3,#12]
 2039              	.L86:
 610:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     }
 611:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 612:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 2040              	 .loc 2 612 0
 2041 0144 7B68     	 ldr r3,[r7,#4]
 2042 0146 5B7D     	 ldrb r3,[r3,#21]
 2043 0148 012B     	 cmp r3,#1
 2044 014a 13D1     	 bne .L87
 613:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 614:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 615:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 2045              	 .loc 2 615 0
 2046 014c 7868     	 ldr r0,[r7,#4]
 2047 014e FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 616:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 2048              	 .loc 2 616 0
 2049 0152 7B68     	 ldr r3,[r7,#4]
 2050 0154 1B68     	 ldr r3,[r3]
 2051 0156 DA69     	 ldr r2,[r3,#28]
 2052 0158 0022     	 movs r2,#0
 2053 015a 42F00062 	 orr r2,r2,#134217728
 2054 015e DA61     	 str r2,[r3,#28]
 617:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 618:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
 619:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_M
 2055              	 .loc 2 619 0
 2056 0160 7B68     	 ldr r3,[r7,#4]
 2057 0162 1A68     	 ldr r2,[r3]
 2058 0164 D369     	 ldr r3,[r2,#28]
 2059 0166 0023     	 movs r3,#0
 2060 0168 43F0C463 	 orr r3,r3,#102760448
 2061 016c 43F0C003 	 orr r3,r3,#192
 2062 0170 D361     	 str r3,[r2,#28]
 2063 0172 0FE0     	 b .L81
 2064              	.L87:
 620:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
 621:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     }
 622:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     else
 623:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 624:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 625:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 2065              	 .loc 2 625 0
 2066 0174 7B68     	 ldr r3,[r7,#4]
 2067 0176 1B68     	 ldr r3,[r3]
 2068 0178 DA69     	 ldr r2,[r3,#28]
 2069 017a 0022     	 movs r2,#0
 2070 017c 42F40062 	 orr r2,r2,#2048
 2071 0180 DA61     	 str r2,[r3,#28]
 626:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 627:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
 628:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_M
 2072              	 .loc 2 628 0
 2073 0182 7B68     	 ldr r3,[r7,#4]
 2074 0184 1A68     	 ldr r2,[r3]
 2075 0186 D369     	 ldr r3,[r2,#28]
 2076 0188 0023     	 movs r3,#0
 2077 018a 43F42003 	 orr r3,r3,#10485760
 2078 018e 43F4C863 	 orr r3,r3,#1600
 2079 0192 D361     	 str r3,[r2,#28]
 2080              	.L81:
 629:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                    CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 630:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     }
 631:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 632:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 633:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 2081              	 .loc 2 633 0
 2082 0194 1837     	 adds r7,r7,#24
 2083              	.LCFI115:
 2084              	 .cfi_def_cfa_offset 8
 2085 0196 BD46     	 mov sp,r7
 2086              	.LCFI116:
 2087              	 .cfi_def_cfa_register 13
 2088              	 
 2089 0198 80BD     	 pop {r7,pc}
 2090              	 .cfi_endproc
 2091              	.LFE238:
 2093 019a 00BF     	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 2094              	 .align 2
 2095              	 .global XMC_CAN_MO_UpdateData
 2096              	 .thumb
 2097              	 .thumb_func
 2099              	XMC_CAN_MO_UpdateData:
 2100              	.LFB239:
 634:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 635:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 636:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 637:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 2101              	 .loc 2 637 0
 2102              	 .cfi_startproc
 2103              	 
 2104              	 
 2105              	 
 2106 0000 80B4     	 push {r7}
 2107              	.LCFI117:
 2108              	 .cfi_def_cfa_offset 4
 2109              	 .cfi_offset 7,-4
 2110 0002 85B0     	 sub sp,sp,#20
 2111              	.LCFI118:
 2112              	 .cfi_def_cfa_offset 24
 2113 0004 00AF     	 add r7,sp,#0
 2114              	.LCFI119:
 2115              	 .cfi_def_cfa_register 7
 2116 0006 7860     	 str r0,[r7,#4]
 638:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2117              	 .loc 2 638 0
 2118 0008 0323     	 movs r3,#3
 2119 000a FB73     	 strb r3,[r7,#15]
 639:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 640:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 2120              	 .loc 2 640 0
 2121 000c 7B68     	 ldr r3,[r7,#4]
 2122 000e 5B7D     	 ldrb r3,[r3,#21]
 2123 0010 012B     	 cmp r3,#1
 2124 0012 35D1     	 bne .L89
 641:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 642:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 2125              	 .loc 2 642 0
 2126 0014 7B68     	 ldr r3,[r7,#4]
 2127 0016 1B68     	 ldr r3,[r3]
 2128 0018 DA69     	 ldr r2,[r3,#28]
 2129 001a 0022     	 movs r2,#0
 2130 001c 42F02002 	 orr r2,r2,#32
 2131 0020 DA61     	 str r2,[r3,#28]
 643:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /* Configure data length */
 644:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 2132              	 .loc 2 644 0
 2133 0022 7B68     	 ldr r3,[r7,#4]
 2134 0024 1B68     	 ldr r3,[r3]
 2135 0026 7A68     	 ldr r2,[r7,#4]
 2136 0028 1268     	 ldr r2,[r2]
 2137 002a 1268     	 ldr r2,[r2]
 2138 002c 22F07061 	 bic r1,r2,#251658240
 645:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2139              	 .loc 2 645 0
 2140 0030 7A68     	 ldr r2,[r7,#4]
 2141 0032 127B     	 ldrb r2,[r2,#12]
 2142 0034 1206     	 lsls r2,r2,#24
 2143 0036 02F07062 	 and r2,r2,#251658240
 644:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 2144              	 .loc 2 644 0
 2145 003a 0A43     	 orrs r2,r2,r1
 2146 003c 1968     	 ldr r1,[r3]
 2147 003e 0021     	 movs r1,#0
 2148 0040 0A43     	 orrs r2,r2,r1
 2149 0042 1A60     	 str r2,[r3]
 646:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 647:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 2150              	 .loc 2 647 0
 2151 0044 7B68     	 ldr r3,[r7,#4]
 2152 0046 1B68     	 ldr r3,[r3]
 2153 0048 7A68     	 ldr r2,[r7,#4]
 2154 004a D2F80D20 	 ldr r2,[r2,#13]
 2155 004e 1969     	 ldr r1,[r3,#16]
 2156 0050 0021     	 movs r1,#0
 2157 0052 0A43     	 orrs r2,r2,r1
 2158 0054 1A61     	 str r2,[r3,#16]
 648:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 2159              	 .loc 2 648 0
 2160 0056 7B68     	 ldr r3,[r7,#4]
 2161 0058 1B68     	 ldr r3,[r3]
 2162 005a 7A68     	 ldr r2,[r7,#4]
 2163 005c D2F81120 	 ldr r2,[r2,#17]
 2164 0060 5969     	 ldr r1,[r3,#20]
 2165 0062 0021     	 movs r1,#0
 2166 0064 0A43     	 orrs r2,r2,r1
 2167 0066 5A61     	 str r2,[r3,#20]
 649:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 650:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 2168              	 .loc 2 650 0
 2169 0068 7B68     	 ldr r3,[r7,#4]
 2170 006a 1A68     	 ldr r2,[r3]
 2171 006c D369     	 ldr r3,[r2,#28]
 2172 006e 0023     	 movs r3,#0
 2173 0070 43F42013 	 orr r3,r3,#2621440
 2174 0074 43F04003 	 orr r3,r3,#64
 2175 0078 D361     	 str r3,[r2,#28]
 651:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2176              	 .loc 2 651 0
 2177 007a 0023     	 movs r3,#0
 2178 007c FB73     	 strb r3,[r7,#15]
 2179 007e 01E0     	 b .L90
 2180              	.L89:
 652:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 653:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 654:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 655:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2181              	 .loc 2 655 0
 2182 0080 0323     	 movs r3,#3
 2183 0082 FB73     	 strb r3,[r7,#15]
 2184              	.L90:
 656:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 657:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return error;
 2185              	 .loc 2 657 0
 2186 0084 FB7B     	 ldrb r3,[r7,#15]
 658:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 2187              	 .loc 2 658 0
 2188 0086 1846     	 mov r0,r3
 2189 0088 1437     	 adds r7,r7,#20
 2190              	.LCFI120:
 2191              	 .cfi_def_cfa_offset 4
 2192 008a BD46     	 mov sp,r7
 2193              	.LCFI121:
 2194              	 .cfi_def_cfa_register 13
 2195              	 
 2196 008c 5DF8047B 	 ldr r7,[sp],#4
 2197              	.LCFI122:
 2198              	 .cfi_restore 7
 2199              	 .cfi_def_cfa_offset 0
 2200 0090 7047     	 bx lr
 2201              	 .cfi_endproc
 2202              	.LFE239:
 2204 0092 00BF     	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 2205              	 .align 2
 2206              	 .global XMC_CAN_MO_Transmit
 2207              	 .thumb
 2208              	 .thumb_func
 2210              	XMC_CAN_MO_Transmit:
 2211              	.LFB240:
 659:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 660:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 661:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 662:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 2212              	 .loc 2 662 0
 2213              	 .cfi_startproc
 2214              	 
 2215              	 
 2216              	 
 2217 0000 80B4     	 push {r7}
 2218              	.LCFI123:
 2219              	 .cfi_def_cfa_offset 4
 2220              	 .cfi_offset 7,-4
 2221 0002 87B0     	 sub sp,sp,#28
 2222              	.LCFI124:
 2223              	 .cfi_def_cfa_offset 32
 2224 0004 00AF     	 add r7,sp,#0
 2225              	.LCFI125:
 2226              	 .cfi_def_cfa_register 7
 2227 0006 7860     	 str r0,[r7,#4]
 663:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2228              	 .loc 2 663 0
 2229 0008 0123     	 movs r3,#1
 2230 000a FB75     	 strb r3,[r7,#23]
 664:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2231              	 .loc 2 664 0
 2232 000c 7B68     	 ldr r3,[r7,#4]
 2233 000e 1B68     	 ldr r3,[r3]
 2234 0010 DB69     	 ldr r3,[r3,#28]
 2235 0012 03F02003 	 and r3,r3,#32
 2236 0016 5B09     	 lsrs r3,r3,#5
 2237 0018 3B61     	 str r3,[r7,#16]
 665:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 2238              	 .loc 2 665 0
 2239 001a 7B68     	 ldr r3,[r7,#4]
 2240 001c 1B68     	 ldr r3,[r3]
 2241 001e DB69     	 ldr r3,[r3,#28]
 2242 0020 03F48073 	 and r3,r3,#256
 2243 0024 1B0A     	 lsrs r3,r3,#8
 2244 0026 FB60     	 str r3,[r7,#12]
 666:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 667:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2245              	 .loc 2 667 0
 2246 0028 3B69     	 ldr r3,[r7,#16]
 2247 002a 002B     	 cmp r3,#0
 2248 002c 02D1     	 bne .L93
 668:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 669:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2249              	 .loc 2 669 0
 2250 002e 0423     	 movs r3,#4
 2251 0030 FB75     	 strb r3,[r7,#23]
 2252 0032 0EE0     	 b .L94
 2253              	.L93:
 670:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 671:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 672:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2254              	 .loc 2 672 0
 2255 0034 FB68     	 ldr r3,[r7,#12]
 2256 0036 012B     	 cmp r3,#1
 2257 0038 02D1     	 bne .L95
 673:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 674:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2258              	 .loc 2 674 0
 2259 003a 0223     	 movs r3,#2
 2260 003c FB75     	 strb r3,[r7,#23]
 2261 003e 08E0     	 b .L94
 2262              	.L95:
 675:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 676:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 677:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 678:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 679:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 2263              	 .loc 2 679 0
 2264 0040 7B68     	 ldr r3,[r7,#4]
 2265 0042 1B68     	 ldr r3,[r3]
 2266 0044 DA69     	 ldr r2,[r3,#28]
 2267 0046 0022     	 movs r2,#0
 2268 0048 42F0E062 	 orr r2,r2,#117440512
 2269 004c DA61     	 str r2,[r3,#28]
 680:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2270              	 .loc 2 680 0
 2271 004e 0023     	 movs r3,#0
 2272 0050 FB75     	 strb r3,[r7,#23]
 2273              	.L94:
 681:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 682:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return error;
 2274              	 .loc 2 682 0
 2275 0052 FB7D     	 ldrb r3,[r7,#23]
 683:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 2276              	 .loc 2 683 0
 2277 0054 1846     	 mov r0,r3
 2278 0056 1C37     	 adds r7,r7,#28
 2279              	.LCFI126:
 2280              	 .cfi_def_cfa_offset 4
 2281 0058 BD46     	 mov sp,r7
 2282              	.LCFI127:
 2283              	 .cfi_def_cfa_register 13
 2284              	 
 2285 005a 5DF8047B 	 ldr r7,[sp],#4
 2286              	.LCFI128:
 2287              	 .cfi_restore 7
 2288              	 .cfi_def_cfa_offset 0
 2289 005e 7047     	 bx lr
 2290              	 .cfi_endproc
 2291              	.LFE240:
 2293              	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 2294              	 .align 2
 2295              	 .global XMC_CAN_MO_ReceiveData
 2296              	 .thumb
 2297              	 .thumb_func
 2299              	XMC_CAN_MO_ReceiveData:
 2300              	.LFB241:
 684:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 685:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 686:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 687:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 2301              	 .loc 2 687 0
 2302              	 .cfi_startproc
 2303              	 
 2304              	 
 2305              	 
 2306 0000 80B4     	 push {r7}
 2307              	.LCFI129:
 2308              	 .cfi_def_cfa_offset 4
 2309              	 .cfi_offset 7,-4
 2310 0002 87B0     	 sub sp,sp,#28
 2311              	.LCFI130:
 2312              	 .cfi_def_cfa_offset 32
 2313 0004 00AF     	 add r7,sp,#0
 2314              	.LCFI131:
 2315              	 .cfi_def_cfa_register 7
 2316 0006 7860     	 str r0,[r7,#4]
 688:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2317              	 .loc 2 688 0
 2318 0008 0123     	 movs r3,#1
 2319 000a FB75     	 strb r3,[r7,#23]
 689:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2320              	 .loc 2 689 0
 2321 000c 0023     	 movs r3,#0
 2322 000e BB75     	 strb r3,[r7,#22]
 690:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2323              	 .loc 2 690 0
 2324 0010 0023     	 movs r3,#0
 2325 0012 7B75     	 strb r3,[r7,#21]
 691:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2326              	 .loc 2 691 0
 2327 0014 7B68     	 ldr r3,[r7,#4]
 2328 0016 1B68     	 ldr r3,[r3]
 2329 0018 DB69     	 ldr r3,[r3,#28]
 2330 001a 03F40063 	 and r3,r3,#2048
 2331 001e DB0A     	 lsrs r3,r3,#11
 2332 0020 3B61     	 str r3,[r7,#16]
 692:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2333              	 .loc 2 692 0
 2334 0022 7B68     	 ldr r3,[r7,#4]
 2335 0024 1B68     	 ldr r3,[r3]
 2336 0026 DB69     	 ldr r3,[r3,#28]
 2337 0028 03F00403 	 and r3,r3,#4
 2338 002c 9B08     	 lsrs r3,r3,#2
 2339 002e FB60     	 str r3,[r7,#12]
 693:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 694:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2340              	 .loc 2 694 0
 2341 0030 3B69     	 ldr r3,[r7,#16]
 2342 0032 002B     	 cmp r3,#0
 2343 0034 02D0     	 beq .L98
 695:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 696:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2344              	 .loc 2 696 0
 2345 0036 0323     	 movs r3,#3
 2346 0038 FB75     	 strb r3,[r7,#23]
 2347 003a 27E0     	 b .L99
 2348              	.L98:
 697:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 698:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 699:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2349              	 .loc 2 699 0
 2350 003c FB68     	 ldr r3,[r7,#12]
 2351 003e 012B     	 cmp r3,#1
 2352 0040 02D1     	 bne .L100
 700:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 701:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2353              	 .loc 2 701 0
 2354 0042 0223     	 movs r3,#2
 2355 0044 FB75     	 strb r3,[r7,#23]
 2356 0046 21E0     	 b .L99
 2357              	.L100:
 702:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 703:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 704:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 705:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /* read message parameters */
 706:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     do
 707:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 708:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2358              	 .loc 2 708 0 discriminator 2
 2359 0048 7B68     	 ldr r3,[r7,#4]
 2360 004a 1B68     	 ldr r3,[r3]
 2361 004c 1A69     	 ldr r2,[r3,#16]
 2362 004e 7B68     	 ldr r3,[r7,#4]
 2363 0050 C3F80D20 	 str r2,[r3,#13]
 709:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2364              	 .loc 2 709 0 discriminator 2
 2365 0054 7B68     	 ldr r3,[r7,#4]
 2366 0056 1B68     	 ldr r3,[r3]
 2367 0058 5A69     	 ldr r2,[r3,#20]
 2368 005a 7B68     	 ldr r3,[r7,#4]
 2369 005c C3F81120 	 str r2,[r3,#17]
 710:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 711:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2370              	 .loc 2 711 0 discriminator 2
 2371 0060 7B68     	 ldr r3,[r7,#4]
 2372 0062 1B68     	 ldr r3,[r3]
 2373 0064 DB69     	 ldr r3,[r3,#28]
 2374 0066 03F00403 	 and r3,r3,#4
 2375 006a 9B08     	 lsrs r3,r3,#2
 2376 006c BB75     	 strb r3,[r7,#22]
 712:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2377              	 .loc 2 712 0 discriminator 2
 2378 006e 7B68     	 ldr r3,[r7,#4]
 2379 0070 1B68     	 ldr r3,[r3]
 2380 0072 DB69     	 ldr r3,[r3,#28]
 2381 0074 03F00803 	 and r3,r3,#8
 2382 0078 DB08     	 lsrs r3,r3,#3
 2383 007a 7B75     	 strb r3,[r7,#21]
 713:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2384              	 .loc 2 713 0 discriminator 2
 2385 007c BB7D     	 ldrb r3,[r7,#22]
 2386 007e 002B     	 cmp r3,#0
 2387 0080 02D0     	 beq .L101
 2388              	 .loc 2 713 0 is_stmt 0 discriminator 1
 2389 0082 7B7D     	 ldrb r3,[r7,#21]
 2390 0084 002B     	 cmp r3,#0
 2391 0086 DFD1     	 bne .L100
 2392              	.L101:
 714:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 715:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2393              	 .loc 2 715 0 is_stmt 1
 2394 0088 0023     	 movs r3,#0
 2395 008a FB75     	 strb r3,[r7,#23]
 2396              	.L99:
 716:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 717:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return error;
 2397              	 .loc 2 717 0
 2398 008c FB7D     	 ldrb r3,[r7,#23]
 718:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 2399              	 .loc 2 718 0
 2400 008e 1846     	 mov r0,r3
 2401 0090 1C37     	 adds r7,r7,#28
 2402              	.LCFI132:
 2403              	 .cfi_def_cfa_offset 4
 2404 0092 BD46     	 mov sp,r7
 2405              	.LCFI133:
 2406              	 .cfi_def_cfa_register 13
 2407              	 
 2408 0094 5DF8047B 	 ldr r7,[sp],#4
 2409              	.LCFI134:
 2410              	 .cfi_restore 7
 2411              	 .cfi_def_cfa_offset 0
 2412 0098 7047     	 bx lr
 2413              	 .cfi_endproc
 2414              	.LFE241:
 2416 009a 00BF     	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 2417              	 .align 2
 2418              	 .global XMC_CAN_MO_Receive
 2419              	 .thumb
 2420              	 .thumb_func
 2422              	XMC_CAN_MO_Receive:
 2423              	.LFB242:
 719:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 720:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 721:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 722:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 723:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 2424              	 .loc 2 723 0
 2425              	 .cfi_startproc
 2426              	 
 2427              	 
 2428              	 
 2429 0000 80B4     	 push {r7}
 2430              	.LCFI135:
 2431              	 .cfi_def_cfa_offset 4
 2432              	 .cfi_offset 7,-4
 2433 0002 87B0     	 sub sp,sp,#28
 2434              	.LCFI136:
 2435              	 .cfi_def_cfa_offset 32
 2436 0004 00AF     	 add r7,sp,#0
 2437              	.LCFI137:
 2438              	 .cfi_def_cfa_register 7
 2439 0006 7860     	 str r0,[r7,#4]
 724:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2440              	 .loc 2 724 0
 2441 0008 0123     	 movs r3,#1
 2442 000a FB75     	 strb r3,[r7,#23]
 725:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 2443              	 .loc 2 725 0
 2444 000c 0023     	 movs r3,#0
 2445 000e BB75     	 strb r3,[r7,#22]
 726:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 2446              	 .loc 2 726 0
 2447 0010 0023     	 movs r3,#0
 2448 0012 7B75     	 strb r3,[r7,#21]
 727:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 2449              	 .loc 2 727 0
 2450 0014 7B68     	 ldr r3,[r7,#4]
 2451 0016 1B68     	 ldr r3,[r3]
 2452 0018 DB69     	 ldr r3,[r3,#28]
 2453 001a 03F40063 	 and r3,r3,#2048
 2454 001e DB0A     	 lsrs r3,r3,#11
 2455 0020 3B61     	 str r3,[r7,#16]
 728:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 2456              	 .loc 2 728 0
 2457 0022 7B68     	 ldr r3,[r7,#4]
 2458 0024 1B68     	 ldr r3,[r3]
 2459 0026 DB69     	 ldr r3,[r3,#28]
 2460 0028 03F00403 	 and r3,r3,#4
 2461 002c 9B08     	 lsrs r3,r3,#2
 2462 002e FB60     	 str r3,[r7,#12]
 729:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 730:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 2463              	 .loc 2 730 0
 2464 0030 3B69     	 ldr r3,[r7,#16]
 2465 0032 002B     	 cmp r3,#0
 2466 0034 02D0     	 beq .L104
 731:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 732:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 2467              	 .loc 2 732 0
 2468 0036 0323     	 movs r3,#3
 2469 0038 FB75     	 strb r3,[r7,#23]
 2470 003a 1BE1     	 b .L105
 2471              	.L104:
 733:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 734:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 735:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 2472              	 .loc 2 735 0
 2473 003c FB68     	 ldr r3,[r7,#12]
 2474 003e 012B     	 cmp r3,#1
 2475 0040 02D1     	 bne .L106
 736:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 737:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2476              	 .loc 2 737 0
 2477 0042 0223     	 movs r3,#2
 2478 0044 FB75     	 strb r3,[r7,#23]
 2479 0046 15E1     	 b .L105
 2480              	.L106:
 738:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 739:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 740:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 741:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     /* read message parameters */
 742:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     do
 743:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     {
 744:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 2481              	 .loc 2 744 0
 2482 0048 7B68     	 ldr r3,[r7,#4]
 2483 004a 1B68     	 ldr r3,[r3]
 2484 004c DA69     	 ldr r2,[r3,#28]
 2485 004e 0022     	 movs r2,#0
 2486 0050 42F00802 	 orr r2,r2,#8
 2487 0054 DA61     	 str r2,[r3,#28]
 745:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 2488              	 .loc 2 745 0
 2489 0056 7B68     	 ldr r3,[r7,#4]
 2490 0058 1B68     	 ldr r3,[r3]
 2491 005a 9B69     	 ldr r3,[r3,#24]
 2492 005c 03F00053 	 and r3,r3,#536870912
 2493 0060 5B0F     	 lsrs r3,r3,#29
 2494 0062 002B     	 cmp r3,#0
 2495 0064 40F08380 	 bne .L107
 746:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       {
 747:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 2496              	 .loc 2 747 0
 2497 0068 7A68     	 ldr r2,[r7,#4]
 2498 006a D379     	 ldrb r3,[r2,#7]
 2499 006c 6FF34513 	 bfc r3,#5,#1
 2500 0070 D371     	 strb r3,[r2,#7]
 748:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 2501              	 .loc 2 748 0
 2502 0072 7B68     	 ldr r3,[r7,#4]
 2503 0074 1B68     	 ldr r3,[r3]
 2504 0076 9A69     	 ldr r2,[r3,#24]
 2505 0078 824B     	 ldr r3,.L113
 2506 007a 1340     	 ands r3,r3,r2
 2507 007c 9B0C     	 lsrs r3,r3,#18
 2508 007e 23F06042 	 bic r2,r3,#-536870912
 2509 0082 7B68     	 ldr r3,[r7,#4]
 2510 0084 D1B2     	 uxtb r1,r2
 2511 0086 0020     	 movs r0,#0
 2512 0088 0143     	 orrs r1,r1,r0
 2513 008a 1971     	 strb r1,[r3,#4]
 2514 008c 110A     	 lsrs r1,r2,#8
 2515 008e C9B2     	 uxtb r1,r1
 2516 0090 0020     	 movs r0,#0
 2517 0092 0143     	 orrs r1,r1,r0
 2518 0094 5971     	 strb r1,[r3,#5]
 2519 0096 110C     	 lsrs r1,r2,#16
 2520 0098 C9B2     	 uxtb r1,r1
 2521 009a 0020     	 movs r0,#0
 2522 009c 0143     	 orrs r1,r1,r0
 2523 009e 9971     	 strb r1,[r3,#6]
 2524 00a0 120E     	 lsrs r2,r2,#24
 2525 00a2 02F01F02 	 and r2,r2,#31
 2526 00a6 02F01F00 	 and r0,r2,#31
 2527 00aa DA79     	 ldrb r2,[r3,#7]
 2528 00ac 22F01F02 	 bic r2,r2,#31
 2529 00b0 1146     	 mov r1,r2
 2530 00b2 0246     	 mov r2,r0
 2531 00b4 0A43     	 orrs r2,r2,r1
 2532 00b6 DA71     	 strb r2,[r3,#7]
 749:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2533              	 .loc 2 749 0
 2534 00b8 7B68     	 ldr r3,[r7,#4]
 2535 00ba 1B68     	 ldr r3,[r3]
 2536 00bc DB68     	 ldr r3,[r3,#12]
 2537 00be 03F00053 	 and r3,r3,#536870912
 2538 00c2 5B0F     	 lsrs r3,r3,#29
 2539 00c4 DBB2     	 uxtb r3,r3
 2540 00c6 03F00103 	 and r3,r3,#1
 2541 00ca D9B2     	 uxtb r1,r3
 2542 00cc 7A68     	 ldr r2,[r7,#4]
 2543 00ce D37A     	 ldrb r3,[r2,#11]
 2544 00d0 61F34513 	 bfi r3,r1,#5,#1
 2545 00d4 D372     	 strb r3,[r2,#11]
 750:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 2546              	 .loc 2 750 0
 2547 00d6 7B68     	 ldr r3,[r7,#4]
 2548 00d8 DB7A     	 ldrb r3,[r3,#11]
 2549 00da 03F02003 	 and r3,r3,#32
 2550 00de DBB2     	 uxtb r3,r3
 2551 00e0 002B     	 cmp r3,#0
 2552 00e2 23D0     	 beq .L108
 751:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         {
 752:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 2553              	 .loc 2 752 0
 2554 00e4 7B68     	 ldr r3,[r7,#4]
 2555 00e6 1B68     	 ldr r3,[r3]
 2556 00e8 DA68     	 ldr r2,[r3,#12]
 2557 00ea 664B     	 ldr r3,.L113
 2558 00ec 1340     	 ands r3,r3,r2
 2559 00ee 9B0C     	 lsrs r3,r3,#18
 2560 00f0 23F06042 	 bic r2,r3,#-536870912
 2561 00f4 7B68     	 ldr r3,[r7,#4]
 2562 00f6 D1B2     	 uxtb r1,r2
 2563 00f8 0020     	 movs r0,#0
 2564 00fa 0143     	 orrs r1,r1,r0
 2565 00fc 1972     	 strb r1,[r3,#8]
 2566 00fe 110A     	 lsrs r1,r2,#8
 2567 0100 C9B2     	 uxtb r1,r1
 2568 0102 0020     	 movs r0,#0
 2569 0104 0143     	 orrs r1,r1,r0
 2570 0106 5972     	 strb r1,[r3,#9]
 2571 0108 110C     	 lsrs r1,r2,#16
 2572 010a C9B2     	 uxtb r1,r1
 2573 010c 0020     	 movs r0,#0
 2574 010e 0143     	 orrs r1,r1,r0
 2575 0110 9972     	 strb r1,[r3,#10]
 2576 0112 120E     	 lsrs r2,r2,#24
 2577 0114 02F01F02 	 and r2,r2,#31
 2578 0118 02F01F00 	 and r0,r2,#31
 2579 011c DA7A     	 ldrb r2,[r3,#11]
 2580 011e 22F01F02 	 bic r2,r2,#31
 2581 0122 1146     	 mov r1,r2
 2582 0124 0246     	 mov r2,r0
 2583 0126 0A43     	 orrs r2,r2,r1
 2584 0128 DA72     	 strb r2,[r3,#11]
 2585 012a 74E0     	 b .L110
 2586              	.L108:
 753:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         }
 754:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         else
 755:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         {
 756:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2587              	 .loc 2 756 0
 2588 012c 7B68     	 ldr r3,[r7,#4]
 2589 012e 1B68     	 ldr r3,[r3]
 2590 0130 DB68     	 ldr r3,[r3,#12]
 2591 0132 23F06042 	 bic r2,r3,#-536870912
 2592 0136 7B68     	 ldr r3,[r7,#4]
 2593 0138 D1B2     	 uxtb r1,r2
 2594 013a 0020     	 movs r0,#0
 2595 013c 0143     	 orrs r1,r1,r0
 2596 013e 1972     	 strb r1,[r3,#8]
 2597 0140 110A     	 lsrs r1,r2,#8
 2598 0142 C9B2     	 uxtb r1,r1
 2599 0144 0020     	 movs r0,#0
 2600 0146 0143     	 orrs r1,r1,r0
 2601 0148 5972     	 strb r1,[r3,#9]
 2602 014a 110C     	 lsrs r1,r2,#16
 2603 014c C9B2     	 uxtb r1,r1
 2604 014e 0020     	 movs r0,#0
 2605 0150 0143     	 orrs r1,r1,r0
 2606 0152 9972     	 strb r1,[r3,#10]
 2607 0154 120E     	 lsrs r2,r2,#24
 2608 0156 02F01F02 	 and r2,r2,#31
 2609 015a 02F01F00 	 and r0,r2,#31
 2610 015e DA7A     	 ldrb r2,[r3,#11]
 2611 0160 22F01F02 	 bic r2,r2,#31
 2612 0164 1146     	 mov r1,r2
 2613 0166 0246     	 mov r2,r0
 2614 0168 0A43     	 orrs r2,r2,r1
 2615 016a DA72     	 strb r2,[r3,#11]
 2616 016c 53E0     	 b .L110
 2617              	.L107:
 757:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         }
 758:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       }
 759:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       else
 760:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       {
 761:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 2618              	 .loc 2 761 0
 2619 016e 7A68     	 ldr r2,[r7,#4]
 2620 0170 D379     	 ldrb r3,[r2,#7]
 2621 0172 43F02003 	 orr r3,r3,#32
 2622 0176 D371     	 strb r3,[r2,#7]
 762:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 2623              	 .loc 2 762 0
 2624 0178 7B68     	 ldr r3,[r7,#4]
 2625 017a 1B68     	 ldr r3,[r3]
 2626 017c 9B69     	 ldr r3,[r3,#24]
 2627 017e 23F06042 	 bic r2,r3,#-536870912
 2628 0182 7B68     	 ldr r3,[r7,#4]
 2629 0184 D1B2     	 uxtb r1,r2
 2630 0186 0020     	 movs r0,#0
 2631 0188 0143     	 orrs r1,r1,r0
 2632 018a 1971     	 strb r1,[r3,#4]
 2633 018c 110A     	 lsrs r1,r2,#8
 2634 018e C9B2     	 uxtb r1,r1
 2635 0190 0020     	 movs r0,#0
 2636 0192 0143     	 orrs r1,r1,r0
 2637 0194 5971     	 strb r1,[r3,#5]
 2638 0196 110C     	 lsrs r1,r2,#16
 2639 0198 C9B2     	 uxtb r1,r1
 2640 019a 0020     	 movs r0,#0
 2641 019c 0143     	 orrs r1,r1,r0
 2642 019e 9971     	 strb r1,[r3,#6]
 2643 01a0 120E     	 lsrs r2,r2,#24
 2644 01a2 02F01F02 	 and r2,r2,#31
 2645 01a6 02F01F00 	 and r0,r2,#31
 2646 01aa DA79     	 ldrb r2,[r3,#7]
 2647 01ac 22F01F02 	 bic r2,r2,#31
 2648 01b0 1146     	 mov r1,r2
 2649 01b2 0246     	 mov r2,r0
 2650 01b4 0A43     	 orrs r2,r2,r1
 2651 01b6 DA71     	 strb r2,[r3,#7]
 763:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 2652              	 .loc 2 763 0
 2653 01b8 7B68     	 ldr r3,[r7,#4]
 2654 01ba 1B68     	 ldr r3,[r3]
 2655 01bc DB68     	 ldr r3,[r3,#12]
 2656 01be 23F06042 	 bic r2,r3,#-536870912
 2657 01c2 7B68     	 ldr r3,[r7,#4]
 2658 01c4 D1B2     	 uxtb r1,r2
 2659 01c6 0020     	 movs r0,#0
 2660 01c8 0143     	 orrs r1,r1,r0
 2661 01ca 1972     	 strb r1,[r3,#8]
 2662 01cc 110A     	 lsrs r1,r2,#8
 2663 01ce C9B2     	 uxtb r1,r1
 2664 01d0 0020     	 movs r0,#0
 2665 01d2 0143     	 orrs r1,r1,r0
 2666 01d4 5972     	 strb r1,[r3,#9]
 2667 01d6 110C     	 lsrs r1,r2,#16
 2668 01d8 C9B2     	 uxtb r1,r1
 2669 01da 0020     	 movs r0,#0
 2670 01dc 0143     	 orrs r1,r1,r0
 2671 01de 9972     	 strb r1,[r3,#10]
 2672 01e0 120E     	 lsrs r2,r2,#24
 2673 01e2 02F01F02 	 and r2,r2,#31
 2674 01e6 02F01F00 	 and r0,r2,#31
 2675 01ea DA7A     	 ldrb r2,[r3,#11]
 2676 01ec 22F01F02 	 bic r2,r2,#31
 2677 01f0 1146     	 mov r1,r2
 2678 01f2 0246     	 mov r2,r0
 2679 01f4 0A43     	 orrs r2,r2,r1
 2680 01f6 DA72     	 strb r2,[r3,#11]
 764:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 2681              	 .loc 2 764 0
 2682 01f8 7B68     	 ldr r3,[r7,#4]
 2683 01fa 1B68     	 ldr r3,[r3]
 2684 01fc DB68     	 ldr r3,[r3,#12]
 2685 01fe 03F00053 	 and r3,r3,#536870912
 2686 0202 5B0F     	 lsrs r3,r3,#29
 2687 0204 DBB2     	 uxtb r3,r3
 2688 0206 03F00103 	 and r3,r3,#1
 2689 020a D9B2     	 uxtb r1,r3
 2690 020c 7A68     	 ldr r2,[r7,#4]
 2691 020e D37A     	 ldrb r3,[r2,#11]
 2692 0210 61F34513 	 bfi r3,r1,#5,#1
 2693 0214 D372     	 strb r3,[r2,#11]
 2694              	.L110:
 765:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       }
 766:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 2695              	 .loc 2 766 0
 2696 0216 7B68     	 ldr r3,[r7,#4]
 2697 0218 1B68     	 ldr r3,[r3]
 2698 021a 1B68     	 ldr r3,[r3]
 2699 021c 03F07063 	 and r3,r3,#251658240
 2700 0220 1B0E     	 lsrs r3,r3,#24
 2701 0222 DAB2     	 uxtb r2,r3
 2702 0224 7B68     	 ldr r3,[r7,#4]
 2703 0226 1A73     	 strb r2,[r3,#12]
 767:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 768:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 2704              	 .loc 2 768 0
 2705 0228 7B68     	 ldr r3,[r7,#4]
 2706 022a 1B68     	 ldr r3,[r3]
 2707 022c 1A69     	 ldr r2,[r3,#16]
 2708 022e 7B68     	 ldr r3,[r7,#4]
 2709 0230 C3F80D20 	 str r2,[r3,#13]
 769:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 2710              	 .loc 2 769 0
 2711 0234 7B68     	 ldr r3,[r7,#4]
 2712 0236 1B68     	 ldr r3,[r3]
 2713 0238 5A69     	 ldr r2,[r3,#20]
 2714 023a 7B68     	 ldr r3,[r7,#4]
 2715 023c C3F81120 	 str r2,[r3,#17]
 770:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 771:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 2716              	 .loc 2 771 0
 2717 0240 7B68     	 ldr r3,[r7,#4]
 2718 0242 1B68     	 ldr r3,[r3]
 2719 0244 DB69     	 ldr r3,[r3,#28]
 2720 0246 03F00403 	 and r3,r3,#4
 2721 024a 9B08     	 lsrs r3,r3,#2
 2722 024c BB75     	 strb r3,[r7,#22]
 772:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 2723              	 .loc 2 772 0
 2724 024e 7B68     	 ldr r3,[r7,#4]
 2725 0250 1B68     	 ldr r3,[r3]
 2726 0252 DB69     	 ldr r3,[r3,#28]
 2727 0254 03F00803 	 and r3,r3,#8
 2728 0258 DB08     	 lsrs r3,r3,#3
 2729 025a 7B75     	 strb r3,[r7,#21]
 773:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 2730              	 .loc 2 773 0
 2731 025c BB7D     	 ldrb r3,[r7,#22]
 2732 025e 002B     	 cmp r3,#0
 2733 0260 03D0     	 beq .L111
 2734              	 .loc 2 773 0 is_stmt 0 discriminator 1
 2735 0262 7B7D     	 ldrb r3,[r7,#21]
 2736 0264 002B     	 cmp r3,#0
 2737 0266 7FF4EFAE 	 bne .L106
 2738              	.L111:
 774:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 775:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 2739              	 .loc 2 775 0 is_stmt 1
 2740 026a 7B68     	 ldr r3,[r7,#4]
 2741 026c 0022     	 movs r2,#0
 2742 026e 5A75     	 strb r2,[r3,#21]
 776:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2743              	 .loc 2 776 0
 2744 0270 0023     	 movs r3,#0
 2745 0272 FB75     	 strb r3,[r7,#23]
 2746              	.L105:
 777:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 778:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return error;
 2747              	 .loc 2 778 0
 2748 0274 FB7D     	 ldrb r3,[r7,#23]
 779:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 2749              	 .loc 2 779 0
 2750 0276 1846     	 mov r0,r3
 2751 0278 1C37     	 adds r7,r7,#28
 2752              	.LCFI138:
 2753              	 .cfi_def_cfa_offset 4
 2754 027a BD46     	 mov sp,r7
 2755              	.LCFI139:
 2756              	 .cfi_def_cfa_register 13
 2757              	 
 2758 027c 5DF8047B 	 ldr r7,[sp],#4
 2759              	.LCFI140:
 2760              	 .cfi_restore 7
 2761              	 .cfi_def_cfa_offset 0
 2762 0280 7047     	 bx lr
 2763              	.L114:
 2764 0282 00BF     	 .align 2
 2765              	.L113:
 2766 0284 0000FC1F 	 .word 536608768
 2767              	 .cfi_endproc
 2768              	.LFE242:
 2770              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 2771              	 .align 2
 2772              	 .global XMC_CAN_NODE_EnableEvent
 2773              	 .thumb
 2774              	 .thumb_func
 2776              	XMC_CAN_NODE_EnableEvent:
 2777              	.LFB243:
 780:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 781:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 782:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 783:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 2778              	 .loc 2 783 0
 2779              	 .cfi_startproc
 2780              	 
 2781              	 
 2782              	 
 2783 0000 80B4     	 push {r7}
 2784              	.LCFI141:
 2785              	 .cfi_def_cfa_offset 4
 2786              	 .cfi_offset 7,-4
 2787 0002 83B0     	 sub sp,sp,#12
 2788              	.LCFI142:
 2789              	 .cfi_def_cfa_offset 16
 2790 0004 00AF     	 add r7,sp,#0
 2791              	.LCFI143:
 2792              	 .cfi_def_cfa_register 7
 2793 0006 7860     	 str r0,[r7,#4]
 2794 0008 3960     	 str r1,[r7]
 784:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2795              	 .loc 2 784 0
 2796 000a 3B68     	 ldr r3,[r7]
 2797 000c B3F5800F 	 cmp r3,#4194304
 2798 0010 09D0     	 beq .L116
 785:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 786:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 2799              	 .loc 2 786 0
 2800 0012 7B68     	 ldr r3,[r7,#4]
 2801 0014 1A68     	 ldr r2,[r3]
 2802 0016 3B68     	 ldr r3,[r7]
 2803 0018 1A43     	 orrs r2,r2,r3
 2804 001a 7B68     	 ldr r3,[r7,#4]
 2805 001c 1968     	 ldr r1,[r3]
 2806 001e 0021     	 movs r1,#0
 2807 0020 0A43     	 orrs r2,r2,r1
 2808 0022 1A60     	 str r2,[r3]
 2809 0024 08E0     	 b .L115
 2810              	.L116:
 787:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 788:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 789:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 790:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 2811              	 .loc 2 790 0
 2812 0026 7B68     	 ldr r3,[r7,#4]
 2813 0028 9A69     	 ldr r2,[r3,#24]
 2814 002a 3B68     	 ldr r3,[r7]
 2815 002c 1A43     	 orrs r2,r2,r3
 2816 002e 7B68     	 ldr r3,[r7,#4]
 2817 0030 9969     	 ldr r1,[r3,#24]
 2818 0032 0021     	 movs r1,#0
 2819 0034 0A43     	 orrs r2,r2,r1
 2820 0036 9A61     	 str r2,[r3,#24]
 2821              	.L115:
 791:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 792:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 2822              	 .loc 2 792 0
 2823 0038 0C37     	 adds r7,r7,#12
 2824              	.LCFI144:
 2825              	 .cfi_def_cfa_offset 4
 2826 003a BD46     	 mov sp,r7
 2827              	.LCFI145:
 2828              	 .cfi_def_cfa_register 13
 2829              	 
 2830 003c 5DF8047B 	 ldr r7,[sp],#4
 2831              	.LCFI146:
 2832              	 .cfi_restore 7
 2833              	 .cfi_def_cfa_offset 0
 2834 0040 7047     	 bx lr
 2835              	 .cfi_endproc
 2836              	.LFE243:
 2838 0042 00BF     	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 2839              	 .align 2
 2840              	 .global XMC_CAN_NODE_DisableEvent
 2841              	 .thumb
 2842              	 .thumb_func
 2844              	XMC_CAN_NODE_DisableEvent:
 2845              	.LFB244:
 793:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 794:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 795:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 796:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 2846              	 .loc 2 796 0
 2847              	 .cfi_startproc
 2848              	 
 2849              	 
 2850              	 
 2851 0000 80B4     	 push {r7}
 2852              	.LCFI147:
 2853              	 .cfi_def_cfa_offset 4
 2854              	 .cfi_offset 7,-4
 2855 0002 83B0     	 sub sp,sp,#12
 2856              	.LCFI148:
 2857              	 .cfi_def_cfa_offset 16
 2858 0004 00AF     	 add r7,sp,#0
 2859              	.LCFI149:
 2860              	 .cfi_def_cfa_register 7
 2861 0006 7860     	 str r0,[r7,#4]
 2862 0008 3960     	 str r1,[r7]
 797:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2863              	 .loc 2 797 0
 2864 000a 3B68     	 ldr r3,[r7]
 2865 000c B3F5800F 	 cmp r3,#4194304
 2866 0010 0AD0     	 beq .L119
 798:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 799:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 2867              	 .loc 2 799 0
 2868 0012 7B68     	 ldr r3,[r7,#4]
 2869 0014 1A68     	 ldr r2,[r3]
 2870 0016 3B68     	 ldr r3,[r7]
 2871 0018 DB43     	 mvns r3,r3
 2872 001a 1A40     	 ands r2,r2,r3
 2873 001c 7B68     	 ldr r3,[r7,#4]
 2874 001e 1968     	 ldr r1,[r3]
 2875 0020 0021     	 movs r1,#0
 2876 0022 0A43     	 orrs r2,r2,r1
 2877 0024 1A60     	 str r2,[r3]
 2878 0026 09E0     	 b .L118
 2879              	.L119:
 800:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 801:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 802:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 803:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 2880              	 .loc 2 803 0
 2881 0028 7B68     	 ldr r3,[r7,#4]
 2882 002a 9A69     	 ldr r2,[r3,#24]
 2883 002c 3B68     	 ldr r3,[r7]
 2884 002e DB43     	 mvns r3,r3
 2885 0030 1A40     	 ands r2,r2,r3
 2886 0032 7B68     	 ldr r3,[r7,#4]
 2887 0034 9969     	 ldr r1,[r3,#24]
 2888 0036 0021     	 movs r1,#0
 2889 0038 0A43     	 orrs r2,r2,r1
 2890 003a 9A61     	 str r2,[r3,#24]
 2891              	.L118:
 804:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 805:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 2892              	 .loc 2 805 0
 2893 003c 0C37     	 adds r7,r7,#12
 2894              	.LCFI150:
 2895              	 .cfi_def_cfa_offset 4
 2896 003e BD46     	 mov sp,r7
 2897              	.LCFI151:
 2898              	 .cfi_def_cfa_register 13
 2899              	 
 2900 0040 5DF8047B 	 ldr r7,[sp],#4
 2901              	.LCFI152:
 2902              	 .cfi_restore 7
 2903              	 .cfi_def_cfa_offset 0
 2904 0044 7047     	 bx lr
 2905              	 .cfi_endproc
 2906              	.LFE244:
 2908              	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 2909              	 .align 2
 2910              	 .global XMC_CAN_TXFIFO_Transmit
 2911              	 .thumb
 2912              	 .thumb_func
 2914              	XMC_CAN_TXFIFO_Transmit:
 2915              	.LFB245:
 806:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 807:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 808:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 2916              	 .loc 2 808 0
 2917              	 .cfi_startproc
 2918              	 
 2919              	 
 2920              	 
 2921 0000 80B4     	 push {r7}
 2922              	.LCFI153:
 2923              	 .cfi_def_cfa_offset 4
 2924              	 .cfi_offset 7,-4
 2925 0002 89B0     	 sub sp,sp,#36
 2926              	.LCFI154:
 2927              	 .cfi_def_cfa_offset 40
 2928 0004 00AF     	 add r7,sp,#0
 2929              	.LCFI155:
 2930              	 .cfi_def_cfa_register 7
 2931 0006 7860     	 str r0,[r7,#4]
 809:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2932              	 .loc 2 809 0
 2933 0008 0123     	 movs r3,#1
 2934 000a FB77     	 strb r3,[r7,#31]
 810:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2935              	 .loc 2 810 0
 2936 000c 7B68     	 ldr r3,[r7,#4]
 2937 000e 1B68     	 ldr r3,[r3]
 2938 0010 DB69     	 ldr r3,[r3,#28]
 2939 0012 03F02003 	 and r3,r3,#32
 2940 0016 5B09     	 lsrs r3,r3,#5
 2941 0018 BB61     	 str r3,[r7,#24]
 811:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 2942              	 .loc 2 811 0
 2943 001a 7B68     	 ldr r3,[r7,#4]
 2944 001c 1B68     	 ldr r3,[r3]
 2945 001e DB69     	 ldr r3,[r3,#28]
 2946 0020 03F48073 	 and r3,r3,#256
 2947 0024 1B0A     	 lsrs r3,r3,#8
 2948 0026 7B61     	 str r3,[r7,#20]
 812:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 2949              	 .loc 2 812 0
 2950 0028 7B68     	 ldr r3,[r7,#4]
 2951 002a 1B68     	 ldr r3,[r3]
 2952 002c 5B68     	 ldr r3,[r3,#4]
 2953 002e 03F47F03 	 and r3,r3,#16711680
 2954 0032 1B0C     	 lsrs r3,r3,#16
 2955 0034 3B61     	 str r3,[r7,#16]
 813:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 2956              	 .loc 2 813 0
 2957 0036 3B69     	 ldr r3,[r7,#16]
 2958 0038 03F11073 	 add r3,r3,#37748736
 2959 003c 03F52863 	 add r3,r3,#2688
 2960 0040 5B01     	 lsls r3,r3,#5
 2961 0042 FB60     	 str r3,[r7,#12]
 814:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 815:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2962              	 .loc 2 815 0
 2963 0044 BB69     	 ldr r3,[r7,#24]
 2964 0046 002B     	 cmp r3,#0
 2965 0048 02D1     	 bne .L122
 816:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 817:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2966              	 .loc 2 817 0
 2967 004a 0423     	 movs r3,#4
 2968 004c FB77     	 strb r3,[r7,#31]
 2969 004e 0DE0     	 b .L123
 2970              	.L122:
 818:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 819:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 820:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2971              	 .loc 2 820 0
 2972 0050 7B69     	 ldr r3,[r7,#20]
 2973 0052 012B     	 cmp r3,#1
 2974 0054 02D1     	 bne .L124
 821:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 822:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2975              	 .loc 2 822 0
 2976 0056 0223     	 movs r3,#2
 2977 0058 FB77     	 strb r3,[r7,#31]
 2978 005a 07E0     	 b .L123
 2979              	.L124:
 823:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 824:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   else
 825:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   {
 826:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 2980              	 .loc 2 826 0
 2981 005c FB68     	 ldr r3,[r7,#12]
 2982 005e DA69     	 ldr r2,[r3,#28]
 2983 0060 0022     	 movs r2,#0
 2984 0062 42F0E062 	 orr r2,r2,#117440512
 2985 0066 DA61     	 str r2,[r3,#28]
 827:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2986              	 .loc 2 827 0
 2987 0068 0023     	 movs r3,#0
 2988 006a FB77     	 strb r3,[r7,#31]
 2989              	.L123:
 828:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   }
 829:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   return error;
 2990              	 .loc 2 829 0
 2991 006c FB7F     	 ldrb r3,[r7,#31]
 830:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 2992              	 .loc 2 830 0
 2993 006e 1846     	 mov r0,r3
 2994 0070 2437     	 adds r7,r7,#36
 2995              	.LCFI156:
 2996              	 .cfi_def_cfa_offset 4
 2997 0072 BD46     	 mov sp,r7
 2998              	.LCFI157:
 2999              	 .cfi_def_cfa_register 13
 3000              	 
 3001 0074 5DF8047B 	 ldr r7,[sp],#4
 3002              	.LCFI158:
 3003              	 .cfi_restore 7
 3004              	 .cfi_def_cfa_offset 0
 3005 0078 7047     	 bx lr
 3006              	 .cfi_endproc
 3007              	.LFE245:
 3009 007a 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 3010              	 .align 2
 3011              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 3012              	 .thumb
 3013              	 .thumb_func
 3015              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 3016              	.LFB246:
 831:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 832:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 833:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 834:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 3017              	 .loc 2 834 0
 3018              	 .cfi_startproc
 3019              	 
 3020              	 
 3021              	 
 3022 0000 80B4     	 push {r7}
 3023              	.LCFI159:
 3024              	 .cfi_def_cfa_offset 4
 3025              	 .cfi_offset 7,-4
 3026 0002 83B0     	 sub sp,sp,#12
 3027              	.LCFI160:
 3028              	 .cfi_def_cfa_offset 16
 3029 0004 00AF     	 add r7,sp,#0
 3030              	.LCFI161:
 3031              	 .cfi_def_cfa_register 7
 3032 0006 7860     	 str r0,[r7,#4]
 3033 0008 3960     	 str r1,[r7]
 835:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 3034              	 .loc 2 835 0
 3035 000a 7B68     	 ldr r3,[r7,#4]
 3036 000c 1B68     	 ldr r3,[r3]
 3037 000e 7A68     	 ldr r2,[r7,#4]
 3038 0010 1268     	 ldr r2,[r2]
 3039 0012 1268     	 ldr r2,[r2]
 3040 0014 22F00F02 	 bic r2,r2,#15
 3041 0018 42F00202 	 orr r2,r2,#2
 3042 001c 1968     	 ldr r1,[r3]
 3043 001e 0021     	 movs r1,#0
 3044 0020 0A43     	 orrs r2,r2,r1
 3045 0022 1A60     	 str r2,[r3]
 836:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 837:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 3046              	 .loc 2 837 0
 3047 0024 7B68     	 ldr r3,[r7,#4]
 3048 0026 1B68     	 ldr r3,[r3]
 3049 0028 7A68     	 ldr r2,[r7,#4]
 3050 002a 1268     	 ldr r2,[r2]
 3051 002c 5268     	 ldr r2,[r2,#4]
 3052 002e 02F07F42 	 and r2,r2,#-16777216
 838:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 839:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 840:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 3053              	 .loc 2 840 0
 3054 0032 3978     	 ldrb r1,[r7]
 839:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 3055              	 .loc 2 839 0
 3056 0034 1143     	 orrs r1,r1,r2
 841:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3057              	 .loc 2 841 0
 3058 0036 BA78     	 ldrb r2,[r7,#2]
 3059 0038 1204     	 lsls r2,r2,#16
 3060 003a 02F47F02 	 and r2,r2,#16711680
 840:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3061              	 .loc 2 840 0
 3062 003e 1143     	 orrs r1,r1,r2
 842:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 3063              	 .loc 2 842 0
 3064 0040 7A78     	 ldrb r2,[r7,#1]
 3065 0042 1202     	 lsls r2,r2,#8
 3066 0044 92B2     	 uxth r2,r2
 841:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3067              	 .loc 2 841 0
 3068 0046 0A43     	 orrs r2,r2,r1
 837:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 3069              	 .loc 2 837 0
 3070 0048 5968     	 ldr r1,[r3,#4]
 3071 004a 0021     	 movs r1,#0
 3072 004c 0A43     	 orrs r2,r2,r1
 3073 004e 5A60     	 str r2,[r3,#4]
 843:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 3074              	 .loc 2 843 0
 3075 0050 0C37     	 adds r7,r7,#12
 3076              	.LCFI162:
 3077              	 .cfi_def_cfa_offset 4
 3078 0052 BD46     	 mov sp,r7
 3079              	.LCFI163:
 3080              	 .cfi_def_cfa_register 13
 3081              	 
 3082 0054 5DF8047B 	 ldr r7,[sp],#4
 3083              	.LCFI164:
 3084              	 .cfi_restore 7
 3085              	 .cfi_def_cfa_offset 0
 3086 0058 7047     	 bx lr
 3087              	 .cfi_endproc
 3088              	.LFE246:
 3090 005a 00BF     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 3091              	 .align 2
 3092              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 3093              	 .thumb
 3094              	 .thumb_func
 3096              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 3097              	.LFB247:
 844:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 845:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 846:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 3098              	 .loc 2 846 0
 3099              	 .cfi_startproc
 3100              	 
 3101              	 
 3102              	 
 3103 0000 80B4     	 push {r7}
 3104              	.LCFI165:
 3105              	 .cfi_def_cfa_offset 4
 3106              	 .cfi_offset 7,-4
 3107 0002 83B0     	 sub sp,sp,#12
 3108              	.LCFI166:
 3109              	 .cfi_def_cfa_offset 16
 3110 0004 00AF     	 add r7,sp,#0
 3111              	.LCFI167:
 3112              	 .cfi_def_cfa_register 7
 3113 0006 7860     	 str r0,[r7,#4]
 3114 0008 3960     	 str r1,[r7]
 847:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 3115              	 .loc 2 847 0
 3116 000a 7B68     	 ldr r3,[r7,#4]
 3117 000c 1B68     	 ldr r3,[r3]
 3118 000e 7A68     	 ldr r2,[r7,#4]
 3119 0010 1268     	 ldr r2,[r2]
 3120 0012 1268     	 ldr r2,[r2]
 3121 0014 22F00F02 	 bic r2,r2,#15
 3122 0018 42F00102 	 orr r2,r2,#1
 3123 001c 1968     	 ldr r1,[r3]
 3124 001e 0021     	 movs r1,#0
 3125 0020 0A43     	 orrs r2,r2,r1
 3126 0022 1A60     	 str r2,[r3]
 848:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 849:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 3127              	 .loc 2 849 0
 3128 0024 7B68     	 ldr r3,[r7,#4]
 3129 0026 1B68     	 ldr r3,[r3]
 3130 0028 7A68     	 ldr r2,[r7,#4]
 3131 002a 1268     	 ldr r2,[r2]
 3132 002c 5268     	 ldr r2,[r2,#4]
 3133 002e 02F07F42 	 and r2,r2,#-16777216
 850:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 851:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 852:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 3134              	 .loc 2 852 0
 3135 0032 3978     	 ldrb r1,[r7]
 851:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 3136              	 .loc 2 851 0
 3137 0034 1143     	 orrs r1,r1,r2
 853:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3138              	 .loc 2 853 0
 3139 0036 BA78     	 ldrb r2,[r7,#2]
 3140 0038 1204     	 lsls r2,r2,#16
 3141 003a 02F47F02 	 and r2,r2,#16711680
 852:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3142              	 .loc 2 852 0
 3143 003e 1143     	 orrs r1,r1,r2
 854:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 3144              	 .loc 2 854 0
 3145 0040 7A78     	 ldrb r2,[r7,#1]
 3146 0042 1202     	 lsls r2,r2,#8
 3147 0044 92B2     	 uxth r2,r2
 853:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3148              	 .loc 2 853 0
 3149 0046 0A43     	 orrs r2,r2,r1
 849:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 3150              	 .loc 2 849 0
 3151 0048 5968     	 ldr r1,[r3,#4]
 3152 004a 0021     	 movs r1,#0
 3153 004c 0A43     	 orrs r2,r2,r1
 3154 004e 5A60     	 str r2,[r3,#4]
 855:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 3155              	 .loc 2 855 0
 3156 0050 0C37     	 adds r7,r7,#12
 3157              	.LCFI168:
 3158              	 .cfi_def_cfa_offset 4
 3159 0052 BD46     	 mov sp,r7
 3160              	.LCFI169:
 3161              	 .cfi_def_cfa_register 13
 3162              	 
 3163 0054 5DF8047B 	 ldr r7,[sp],#4
 3164              	.LCFI170:
 3165              	 .cfi_restore 7
 3166              	 .cfi_def_cfa_offset 0
 3167 0058 7047     	 bx lr
 3168              	 .cfi_endproc
 3169              	.LFE247:
 3171 005a 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 3172              	 .align 2
 3173              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 3174              	 .thumb
 3175              	 .thumb_func
 3177              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 3178              	.LFB248:
 856:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 857:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 858:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 859:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 3179              	 .loc 2 859 0
 3180              	 .cfi_startproc
 3181              	 
 3182              	 
 3183              	 
 3184 0000 80B4     	 push {r7}
 3185              	.LCFI171:
 3186              	 .cfi_def_cfa_offset 4
 3187              	 .cfi_offset 7,-4
 3188 0002 83B0     	 sub sp,sp,#12
 3189              	.LCFI172:
 3190              	 .cfi_def_cfa_offset 16
 3191 0004 00AF     	 add r7,sp,#0
 3192              	.LCFI173:
 3193              	 .cfi_def_cfa_register 7
 3194 0006 7860     	 str r0,[r7,#4]
 3195 0008 3960     	 str r1,[r7]
 860:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 3196              	 .loc 2 860 0
 3197 000a 7B68     	 ldr r3,[r7,#4]
 3198 000c 1B68     	 ldr r3,[r3]
 3199 000e 7A68     	 ldr r2,[r7,#4]
 3200 0010 1268     	 ldr r2,[r2]
 3201 0012 1268     	 ldr r2,[r2]
 3202 0014 22F00F02 	 bic r2,r2,#15
 3203 0018 42F00302 	 orr r2,r2,#3
 3204 001c 1968     	 ldr r1,[r3]
 3205 001e 0021     	 movs r1,#0
 3206 0020 0A43     	 orrs r2,r2,r1
 3207 0022 1A60     	 str r2,[r3]
 861:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 862:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 3208              	 .loc 2 862 0
 3209 0024 7B68     	 ldr r3,[r7,#4]
 3210 0026 1B68     	 ldr r3,[r3]
 3211 0028 7A68     	 ldr r2,[r7,#4]
 3212 002a 1268     	 ldr r2,[r2]
 3213 002c 5268     	 ldr r2,[r2,#4]
 3214 002e 22F47F01 	 bic r1,r2,#16711680
 863:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3215              	 .loc 2 863 0
 3216 0032 BA78     	 ldrb r2,[r7,#2]
 3217 0034 1204     	 lsls r2,r2,#16
 3218 0036 02F47F02 	 and r2,r2,#16711680
 862:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 3219              	 .loc 2 862 0
 3220 003a 0A43     	 orrs r2,r2,r1
 3221 003c 5968     	 ldr r1,[r3,#4]
 3222 003e 0021     	 movs r1,#0
 3223 0040 0A43     	 orrs r2,r2,r1
 3224 0042 5A60     	 str r2,[r3,#4]
 864:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 865:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 3225              	 .loc 2 865 0
 3226 0044 7B68     	 ldr r3,[r7,#4]
 3227 0046 1A68     	 ldr r2,[r3]
 3228 0048 D369     	 ldr r3,[r2,#28]
 3229 004a 0023     	 movs r3,#0
 3230 004c 43F00073 	 orr r3,r3,#33554432
 3231 0050 43F48063 	 orr r3,r3,#1024
 3232 0054 D361     	 str r3,[r2,#28]
 866:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 867:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 3233              	 .loc 2 867 0
 3234 0056 0C37     	 adds r7,r7,#12
 3235              	.LCFI174:
 3236              	 .cfi_def_cfa_offset 4
 3237 0058 BD46     	 mov sp,r7
 3238              	.LCFI175:
 3239              	 .cfi_def_cfa_register 13
 3240              	 
 3241 005a 5DF8047B 	 ldr r7,[sp],#4
 3242              	.LCFI176:
 3243              	 .cfi_restore 7
 3244              	 .cfi_def_cfa_offset 0
 3245 005e 7047     	 bx lr
 3246              	 .cfi_endproc
 3247              	.LFE248:
 3249              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 3250              	 .align 2
 3251              	 .global XMC_CAN_GATEWAY_InitSourceObject
 3252              	 .thumb
 3253              	 .thumb_func
 3255              	XMC_CAN_GATEWAY_InitSourceObject:
 3256              	.LFB249:
 868:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** 
 869:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 870:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 871:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** {
 3257              	 .loc 2 871 0
 3258              	 .cfi_startproc
 3259              	 
 3260              	 
 3261              	 
 3262 0000 80B4     	 push {r7}
 3263              	.LCFI177:
 3264              	 .cfi_def_cfa_offset 4
 3265              	 .cfi_offset 7,-4
 3266 0002 85B0     	 sub sp,sp,#20
 3267              	.LCFI178:
 3268              	 .cfi_def_cfa_offset 24
 3269 0004 00AF     	 add r7,sp,#0
 3270              	.LCFI179:
 3271              	 .cfi_def_cfa_register 7
 3272 0006 F860     	 str r0,[r7,#12]
 3273 0008 3B1D     	 adds r3,r7,#4
 3274 000a 83E80600 	 stmia r3,{r1,r2}
 872:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 3275              	 .loc 2 872 0
 3276 000e FB68     	 ldr r3,[r7,#12]
 3277 0010 1B68     	 ldr r3,[r3]
 873:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3278              	 .loc 2 873 0
 3279 0012 FA79     	 ldrb r2,[r7,#7]
 3280 0014 1202     	 lsls r2,r2,#8
 3281 0016 02F48071 	 and r1,r2,#256
 874:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3282              	 .loc 2 874 0
 3283 001a 7A7A     	 ldrb r2,[r7,#9]
 3284 001c 9202     	 lsls r2,r2,#10
 3285 001e 02F48062 	 and r2,r2,#1024
 873:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3286              	 .loc 2 873 0
 3287 0022 1143     	 orrs r1,r1,r2
 875:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3288              	 .loc 2 875 0
 3289 0024 3A7A     	 ldrb r2,[r7,#8]
 3290 0026 5202     	 lsls r2,r2,#9
 3291 0028 02F40072 	 and r2,r2,#512
 874:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 3292              	 .loc 2 874 0
 3293 002c 1143     	 orrs r1,r1,r2
 876:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 3294              	 .loc 2 876 0
 3295 002e BA7A     	 ldrb r2,[r7,#10]
 3296 0030 D202     	 lsls r2,r2,#11
 3297 0032 02F40062 	 and r2,r2,#2048
 875:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 3298              	 .loc 2 875 0
 3299 0036 0A43     	 orrs r2,r2,r1
 3300 0038 42F00402 	 orr r2,r2,#4
 872:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 3301              	 .loc 2 872 0
 3302 003c 1968     	 ldr r1,[r3]
 3303 003e 0021     	 movs r1,#0
 3304 0040 0A43     	 orrs r2,r2,r1
 3305 0042 1A60     	 str r2,[r3]
 877:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3306              	 .loc 2 877 0
 3307 0044 FB68     	 ldr r3,[r7,#12]
 3308 0046 1B68     	 ldr r3,[r3]
 3309 0048 3A79     	 ldrb r2,[r7,#4]
 3310 004a 1146     	 mov r1,r2
 878:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 3311              	 .loc 2 878 0
 3312 004c BA79     	 ldrb r2,[r7,#6]
 3313 004e 1204     	 lsls r2,r2,#16
 3314 0050 02F47F02 	 and r2,r2,#16711680
 877:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3315              	 .loc 2 877 0
 3316 0054 1143     	 orrs r1,r1,r2
 879:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 3317              	 .loc 2 879 0
 3318 0056 7A79     	 ldrb r2,[r7,#5]
 3319 0058 1202     	 lsls r2,r2,#8
 3320 005a 92B2     	 uxth r2,r2
 877:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 3321              	 .loc 2 877 0
 3322 005c 0A43     	 orrs r2,r2,r1
 3323 005e 5968     	 ldr r1,[r3,#4]
 3324 0060 0021     	 movs r1,#0
 3325 0062 0A43     	 orrs r2,r2,r1
 3326 0064 5A60     	 str r2,[r3,#4]
 880:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_can.c **** }
 3327              	 .loc 2 880 0
 3328 0066 1437     	 adds r7,r7,#20
 3329              	.LCFI180:
 3330              	 .cfi_def_cfa_offset 4
 3331 0068 BD46     	 mov sp,r7
 3332              	.LCFI181:
 3333              	 .cfi_def_cfa_register 13
 3334              	 
 3335 006a 5DF8047B 	 ldr r7,[sp],#4
 3336              	.LCFI182:
 3337              	 .cfi_restore 7
 3338              	 .cfi_def_cfa_offset 0
 3339 006e 7047     	 bx lr
 3340              	 .cfi_endproc
 3341              	.LFE249:
 3343              	 .text
 3344              	.Letext0:
 3345              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3346              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3347              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMC4700.h"
 3348              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc4_scu.h"
 3349              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 3350              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:20     .text.XMC_CAN_IsPanelControlReady:00000000 $t
    {standard input}:24     .text.XMC_CAN_IsPanelControlReady:00000000 XMC_CAN_IsPanelControlReady
    {standard input}:70     .text.XMC_CAN_PanelControl:00000000 $t
    {standard input}:74     .text.XMC_CAN_PanelControl:00000000 XMC_CAN_PanelControl
    {standard input}:137    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:141    .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:185    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:189    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:233    .text.max:00000000 $t
    {standard input}:237    .text.max:00000000 max
    {standard input}:281    .text.min:00000000 $t
    {standard input}:285    .text.min:00000000 min
    {standard input}:328    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 $t
    {standard input}:333    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000000 XMC_CAN_NODE_NominalBitTimeConfigureEx
    {standard input}:556    .text.XMC_CAN_NODE_NominalBitTimeConfigureEx:00000150 $d
    {standard input}:561    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:566    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:877    .text.XMC_CAN_NODE_NominalBitTimeConfigure:000001d0 $d
    {standard input}:882    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:887    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:941    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:946    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:988    .text.XMC_CAN_Disable:00000028 $d
    {standard input}:993    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:998    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:1052   .text.XMC_CAN_Enable:0000003c $d
    {standard input}:1057   .text.XMC_CAN_Init:00000000 $t
    {standard input}:1062   .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:1220   .text.XMC_CAN_SetBaudrateClockSource:00000000 XMC_CAN_SetBaudrateClockSource
    {standard input}:1320   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 XMC_CAN_GetBaudrateClockFrequency
    {standard input}:1215   .text.XMC_CAN_SetBaudrateClockSource:00000000 $t
    {standard input}:1268   .text.XMC_CAN_GetBaudrateClockSource:00000000 $t
    {standard input}:1273   .text.XMC_CAN_GetBaudrateClockSource:00000000 XMC_CAN_GetBaudrateClockSource
    {standard input}:1315   .text.XMC_CAN_GetBaudrateClockFrequency:00000000 $t
    {standard input}:1382   .text.XMC_CAN_InitEx:00000000 $t
    {standard input}:1387   .text.XMC_CAN_InitEx:00000000 XMC_CAN_InitEx
    {standard input}:1476   .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:1481   .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:1587   .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:1592   .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:1653   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:1658   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:1726   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1731   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1843   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1848   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:2099   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:2094   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:2205   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:2210   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:2294   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:2299   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:2417   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:2422   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:2766   .text.XMC_CAN_MO_Receive:00000284 $d
    {standard input}:2771   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:2776   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:2839   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:2844   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:2909   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:2914   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:3010   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:3015   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:3091   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:3096   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:3172   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:3177   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:3250   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:3255   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GetPeripheralClockFrequency
OSCHP_GetFrequency
