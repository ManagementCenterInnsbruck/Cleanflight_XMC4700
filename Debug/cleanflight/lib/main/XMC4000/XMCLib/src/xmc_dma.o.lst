   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_dma.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_DMA_GetEventStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_DMA_GetEventStatus:
  25              	.LFB135:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_dma.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @file xmc_dma.h
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @date 2018-09-18
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @cond
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * All rights reserved.                        
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *                                             
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * following conditions are met:   
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *                                                                              
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * disclaimer.                        
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * 
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * products derived from this software without specific prior written permission.                  
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *                                                                              
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *                                                                              
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  **************************************************************************************************
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Change History
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * --------------
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * 2015-02-20:
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *     - Initial <br>
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * 2015-06-20:
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *     - Add the declarations for the following APIs: <br>
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *     - Documentation updates <br>
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * 2016-10-28:
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *     - Fix documentation on maximum block size
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * 2017-09-28:
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *     - Improved documentation and added XMC_DMA_CH_EnableFifo() and XMC_DMA_CH_DisableFifo()
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * 2018-09-18:
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *     - Added XMC_DMA_CH_GetTransferredData()
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @endcond
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #ifndef XMC_DMA_H
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #define XMC_DMA_H
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * HEADER FILES
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #include "xmc_common.h"
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #include "xmc_dma_map.h"
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @addtogroup XMClib XMC Peripheral Library
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @{
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @addtogroup DMA
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @brief General purpose DMA (GPDMA) driver for the XMC4000 microcontroller family
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The GPDMA is a highly configurable DMA controller that allows high-speed data transfers
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * between peripherals and memories. Complex data transfers can be done with minimal
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * intervention of the processor, making CPU available for other operations.
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * GPDMA provides extensive support for XMC microcontroller peripherals like A/D, D/A
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * converters and timers. Data transfers through communication interfaces (USIC) using the
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * GPDMA increase efficiency and parallelism for real-time applications.
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The DMA low level driver provides functions to configure and initialize the GPDMA
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * hardware peripheral.
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @{
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * MACROS
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA0)
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0 ((XMC_DMA_t *)GPDMA0_CH0_BASE) /**< DMA module 0 */
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #define XMC_DMA0_NUM_CHANNELS 8
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #endif
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #if defined (GPDMA1)
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1 ((XMC_DMA_t *)GPDMA1_CH0_BASE) /**< DMA module 1, only available in XMC45xx series
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #define XMC_DMA1_NUM_CHANNELS 4
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #endif
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * ENUMS
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA transfer types
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_TYPE
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK,                                /**< Single block */
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD, /**< Multi-block: src addre
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD,     /**< Multi-block: src addre
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED, /**< Multi-block: src addre
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED,     /**< Multi-block: src addre
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS, /**< Multi-block: src addre
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD,     /**< Multi-block: src addre
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED      /**< Multi-block: src addre
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_TYPE_t;
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA transfer flow modes
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_FLOW
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2M_DMA    = 0x0UL, /**< Memory to memory (DMA flow controller) */
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA    = 0x1UL, /**< Memory to peripheral (DMA flow controller) */
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA    = 0x2UL, /**< Peripheral to memory (DMA flow controller) */
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA    = 0x3UL, /**< Peripheral to peripheral (DMA flow controller) 
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2M_PER    = 0x4UL, /**< Peripheral to memory (Peripheral flow controlle
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_SRCPER = 0x5UL, /**< Peripheral to peripheral (Source peripheral flo
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_M2P_PER    = 0x6UL, /**< Memory to peripheral (Peripheral flow controlle
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_FLOW_P2P_DSTPER = 0x7UL  /**< Peripheral to peripheral (Destination periphera
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_FLOW_t;
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Valid burst length values
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_BURST_LENGTH
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_1 = 0x0UL, /**< Burst length: 1 word */
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_4 = 0x1UL, /**< Burst length: 4 words */
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_BURST_LENGTH_8 = 0x2UL  /**< Burst length: 8 words */
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_BURST_LENGTH_t;
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Valid transfer width values
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSFER_WIDTH
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_8  = 0x0UL, /**< 8-bit transfer width */
 162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_16 = 0x1UL, /**< 16-bit transfer width */
 163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_WIDTH_32 = 0x2UL  /**< 32-bit transfer width */
 164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSFER_WIDTH_t;
 165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA address count mode
 168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 169:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_ADDRESS_COUNT_MODE
 170:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 171:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT = 0x0UL, /**< Address count mode: increment */
 172:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_DECREMENT = 0x1UL, /**< Address count mode: decrement */
 173:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE = 0x2UL  /**< Address count mode: no change */
 174:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_ADDRESS_COUNT_MODE_t;
 175:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 176:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 177:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA channel priorities
 178:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 179:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_PRIORITY
 180:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 181:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_0 = 0x0UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 0 (low) *
 182:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_1 = 0x1UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 1 */
 183:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_2 = 0x2UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 2 */
 184:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_3 = 0x3UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 3 */
 185:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_4 = 0x4UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 4 */
 186:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_5 = 0x5UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 5 */
 187:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_6 = 0x6UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos, /**< DMA channel priority 6 */
 188:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_7 = 0x7UL << GPDMA0_CH_CFGL_CH_PRIOR_Pos  /**< DMA channel priority 7 (high) 
 189:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_PRIORITY_t;
 190:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 191:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 192:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Source handshake interface
 193:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 194:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_SRC_HANDSHAKING
 195:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 196:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos, /**< Source: hardwa
 197:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_SRC_Pos  /**< Source: softwa
 198:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_SRC_HANDSHAKING_t;
 199:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 200:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 201:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Destination handshake interface
 202:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 203:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_DST_HANDSHAKING
 204:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 205:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_HARDWARE = 0x0UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos, /**< Destination: h
 206:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_SOFTWARE = 0x1UL << GPDMA0_CH_CFGL_HS_SEL_DST_Pos  /**< Destination: s
 207:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_DST_HANDSHAKING_t;
 208:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 209:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 210:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA hardware handshaking interface
 211:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Hardware handshaking available only if DMA is flow controller
 212:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 213:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_HARDWARE_HANDSHAKING_IF
 214:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 215:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_0 = 0x0UL, /**< Hardware handshaking interface 0 */
 216:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_1 = 0x1UL, /**< Hardware handshaking interface 1 */
 217:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_2 = 0x2UL, /**< Hardware handshaking interface 2 */
 218:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_3 = 0x3UL, /**< Hardware handshaking interface 3 */
 219:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_4 = 0x4UL, /**< Hardware handshaking interface 4 */
 220:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_5 = 0x5UL, /**< Hardware handshaking interface 5 */
 221:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_6 = 0x6UL, /**< Hardware handshaking interface 6 */
 222:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_7 = 0x7UL  /**< Hardware handshaking interface 7 */
 223:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_HARDWARE_HANDSHAKING_IF_t;
 224:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 225:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 226:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA events
 227:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 228:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_EVENT
 229:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 230:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_TRANSFER_COMPLETE        = 0x1UL, /**< Transfer complete event */
 231:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE  = 0x2UL, /**< Block transfer complete event */
 232:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE = 0x4UL, /**< Source transaction complete event */
 233:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE = 0x8UL, /**< Destination transaction complete event */
 234:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_EVENT_ERROR                    = 0x10UL /**< DMA error event */
 235:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_EVENT_t;
 236:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 237:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 238:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Transaction types
 239:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 240:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_TRANSACTION_TYPE
 241:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 242:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_SINGLE, /**< Single DMA transaction */
 243:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSACTION_TYPE_BURST   /**< Burst transaction */
 244:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_TRANSACTION_TYPE_t;
 245:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 246:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 247:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA channel status values
 248:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 249:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef enum XMC_DMA_CH_STATUS
 250:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 251:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_OK,    /**< DMA status OK */
 252:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_ERROR, /**< DMA status error */
 253:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_STATUS_BUSY   /**< DMA is busy */
 254:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_STATUS_t;
 255:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 256:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 257:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DATA STRUCTURES
 258:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 259:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 260:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 261:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure <br>
 262:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 263:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 264:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * to configure the DMA channel. It is contained within the ::XMC_DMA_t
 265:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * structure. It's registers can be used to configure DMA transfer details
 266:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * like source address, destination address, block size, incrementation
 267:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * modes and the like.
 268:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 269:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  
 270:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef struct {
 271:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SAR;
 272:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED0;
 273:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DAR;
 274:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED1;
 275:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LLP;
 276:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED2;
 277:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLL;
 278:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CTLH;
 279:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTAT;
 280:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED3;
 281:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTAT;
 282:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED4;
 283:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SSTATAR;
 284:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED5;
 285:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSTATAR;
 286:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED6;
 287:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGL;
 288:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CFGH;
 289:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGR;
 290:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED7;
 291:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DSR;
 292:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED8;
 293:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } GPDMA_CH_t;
 294:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 295:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 296:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA device structure <br>
 297:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 298:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The structure represents a collection of all hardware registers used
 299:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * to configure the GPDMA peripheral on the XMC4000 series of microcontrollers.
 300:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The registers can be accessed with ::XMC_DMA0 and ::XMC_DMA1.
 301:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 302:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef struct {
 303:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   GPDMA_CH_t CH[8];
 304:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 305:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  RAWCHEV[10];
 306:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSCHEV[10];
 307:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  MASKCHEV[10];
 308:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __O  uint32_t  CLEARCHEV[10];
 309:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  STATUSGLEV;
 310:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED20;
 311:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQSRCREG;
 312:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED21;
 313:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  REQDSTREG;
 314:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED22;
 315:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQSRCREG;
 316:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED23;
 317:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  SGLREQDSTREG;
 318:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED24;
 319:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTSRCREG;
 320:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED25;
 321:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  LSTDSTREG;
 322:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED26;
 323:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  DMACFGREG;
 324:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED27;
 325:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __IO uint32_t  CHENREG;
 326:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED28;
 327:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  ID;
 328:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  RESERVED29[19];
 329:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  TYPE;
 330:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   __I  uint32_t  VERSION;
 331:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_t;
 332:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 333:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard start */
 334:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 335:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   #pragma push
 336:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   #pragma anon_unions
 337:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 338:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   #pragma warning 586
 339:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #endif
 340:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 341:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 342:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA channel linked list item.
 343:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Note: Needs to be word aligned
 344:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 345:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_LLI
 346:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 347:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 348:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 349:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   struct XMC_DMA_LLI *llp;                      /**< Linked list pointer of type XMC_DMA_LLI_t */
 350:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   union
 351:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   {
 352:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     struct
 353:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     {
 354:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 355:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 356:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 357:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 358:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 359:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 360:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 361:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 362:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 363:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             /**< Reserved bits */
 364:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 365:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t : 4;                             /**< Reserved bits */
 366:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_linked_list: 1;       /**< Enable destination linked list? */
 367:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_linked_list: 1;       /**< Enable source linked list? */
 368:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t : 3;                             /**< Reserved bits */
 369:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     };
 370:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 371:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   };
 372:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint32_t block_size;                          /**< Transfer block size */
 373:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint32_t src_status;                          /**< Source status */
 374:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint32_t dst_status;                          /**< Destination status */
 375:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_LLI_t;
 376:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 377:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef XMC_DMA_LLI_t **XMC_DMA_LIST_t;         /**< Type definition for a linked list pointer */
 378:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 379:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 380:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA channel configuration structure
 381:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 382:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef struct XMC_DMA_CH_CONFIG
 383:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 384:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   union
 385:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   {
 386:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     uint32_t control;
 387:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     struct
 388:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     {
 389:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t enable_interrupt: 1;             /**< Enable interrupts? */
 390:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t dst_transfer_width: 3;           /**< Destination transfer width (:: XMC_DMA_CH_TRAN
 391:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t src_transfer_width: 3;           /**< Source transfer width (:: XMC_DMA_CH_TRANSFER_
 392:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t dst_address_count_mode: 2;       /**< Destination address count mode (:: XMC_DMA_CH_
 393:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t src_address_count_mode: 2;       /**< Source address count mode (:: XMC_DMA_CH_ADDRE
 394:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t dst_burst_length: 3;             /**< Destination burst length (:: XMC_DMA_CH_BURST_
 395:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t src_burst_length: 3;             /**< Source burst length (:: XMC_DMA_CH_BURST_LENGT
 396:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t enable_src_gather: 1;            /**< Enable source gather? */
 397:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t enable_dst_scatter: 1;           /**< Enable destination scatter? */
 398:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t : 1;                             
 399:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t transfer_flow: 3;                /**< DMA transfer flow (:: XMC_DMA_CH_TRANSFER_FLOW
 400:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t : 9;                             
 401:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     };
 402:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   };
 403:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 404:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint32_t src_addr;                            /**< Source address */
 405:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint32_t dst_addr;                            /**< Destination address */
 406:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_LLI_t *linked_list_pointer;           /**< Linked list pointer */
 407:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   
 408:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   union
 409:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   {
 410:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     uint32_t src_gather_control;
 411:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     struct
 412:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     {
 413:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_interval: 20;         /**< Source gather interval */
 414:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t src_gather_count: 12;            /**< Source gather count */
 415:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     };
 416:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   };
 417:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 418:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   union
 419:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   {
 420:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     uint32_t dst_scatter_control;
 421:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     struct
 422:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     {
 423:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_interval: 20;        /**< Destination scatter interval */
 424:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****       uint32_t dst_scatter_count: 12;           /**< Destination scatter count */
 425:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****     };
 426:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   };
 427:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   
 428:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint16_t block_size;                          /**< Block size for DMA controlled transfers [max. 
 429:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_TRANSFER_TYPE_t transfer_type;     /**< DMA transfer type (:: XMC_DMA_CH_TRANSFER_TYPE
 430:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_PRIORITY_t priority;               /**< DMA channel priority (::XMC_DMA_CH_PRIORITY_t)
 431:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_SRC_HANDSHAKING_t src_handshaking; /**< DMA source handshaking interface (:: XMC_DMA_C
 432:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint8_t src_peripheral_request;               /**< Source peripheral request. See xmc_dma_map.h *
 433:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   XMC_DMA_CH_DST_HANDSHAKING_t dst_handshaking; /**< DMA destination handshaking interface (:: XMC_
 434:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   uint8_t dst_peripheral_request;               /**< Destination peripheral request. See xmc_dma_ma
 435:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** } XMC_DMA_CH_CONFIG_t;
 436:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 437:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /* Anonymous structure/union guard end */
 438:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #if defined (__CC_ARM)
 439:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   #pragma pop
 440:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #elif defined (__TASKING__)
 441:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   #pragma warning restore
 442:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #endif
 443:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 444:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 445:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA channel event handler
 446:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 447:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** typedef void (*XMC_DMA_CH_EVENT_HANDLER_t)(XMC_DMA_CH_EVENT_t event);
 448:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 449:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /*******************************************************************************
 450:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * API PROTOTYPES
 451:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *******************************************************************************/
 452:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 453:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #ifdef __cplusplus
 454:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** extern "C" {
 455:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** #endif
 456:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 457:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 458:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 459:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return None
 460:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 461:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 462:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Initialize the GPDMA peripheral <br>
 463:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 464:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 465:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The function initializes a prioritized list of DMA channels and enables the GPDMA
 466:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * peripheral.
 467:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 468:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Init(XMC_DMA_t *const dma);
 469:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 470:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 471:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 472:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return None
 473:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 474:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 475:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Enable the GPDMA peripheral <br>
 476:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 477:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 478:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The function de-asserts the GPDMA peripheral reset. In addition, it un-gates the
 479:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * GPDMA0 peripheral clock for all XMC4000 series of microcontrollers with an exception
 480:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * of the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 481:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 482:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Enable(XMC_DMA_t *const dma);
 483:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 484:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 485:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 486:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return None
 487:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 488:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 489:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Disable the GPDMA peripheral <br>
 490:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 491:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 492:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The function asserts the GPDMA peripheral reset. In addition, it gates the GPDMA0
 493:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * peripheral clock for all XMC4000 series of microcontrollers with an exception of
 494:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * the XMC4500 microcontroller. The XMC4500 doesn't support gating.
 495:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 496:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** void XMC_DMA_Disable(XMC_DMA_t *const dma);
 497:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 498:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 499:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 500:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return bool
 501:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 502:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 503:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Check if the GPDMA peripheral is enabled <br>
 504:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 505:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 506:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * For the XMC4500 microcontroller, the function checks if the GPDMA module is asserted
 507:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * and returns "false" if it is. In addition, it also checks if the clock is gated
 508:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * for the other XMC4000 series of microcontrollers. It returns "true" if the peripheral
 509:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * is enabled.
 510:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 511:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma);
 512:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 513:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 514:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 515:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 516:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 517:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 518:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Get DMA event status <br>
 519:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 520:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 521:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The function returns the collective (global) status of GPDMA events. The following
 522:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * lists the various DMA events and their corresponding enumeration. The return value
 523:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * of this function may then be masked with any one of the following enumerations to
 524:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * obtain the status of individual DMA events. <br>
 525:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 526:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 527:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Transfer complete -> ::XMC_DMA_CH_EVENT_TRANSFER_COMPLETE                       <br>
 528:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Block transfer complete -> ::XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE           <br>
 529:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 530:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 531:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 532:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 533:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
 534:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
  27              	 .loc 1 534 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 535:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSGLEV);
  43              	 .loc 1 535 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a D3F86033 	 ldr r3,[r3,#864]
 536:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** }
  46              	 .loc 1 536 0
  47 000e 1846     	 mov r0,r3
  48 0010 0C37     	 adds r7,r7,#12
  49              	.LCFI3:
  50              	 .cfi_def_cfa_offset 4
  51 0012 BD46     	 mov sp,r7
  52              	.LCFI4:
  53              	 .cfi_def_cfa_register 13
  54              	 
  55 0014 5DF8047B 	 ldr r7,[sp],#4
  56              	.LCFI5:
  57              	 .cfi_restore 7
  58              	 .cfi_def_cfa_offset 0
  59 0018 7047     	 bx lr
  60              	 .cfi_endproc
  61              	.LFE135:
  63 001a 00BF     	 .section .text.XMC_DMA_GetChannelsTransferCompleteStatus,"ax",%progbits
  64              	 .align 2
  65              	 .thumb
  66              	 .thumb_func
  68              	XMC_DMA_GetChannelsTransferCompleteStatus:
  69              	.LFB136:
 537:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 538:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 539:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 540:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA transfer complete status
 541:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 542:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 543:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Get transfer complete status <br>
 544:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 545:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 546:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA transfer complete interrupt status. <br>
 547:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 548:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
 549:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
  70              	 .loc 1 549 0
  71              	 .cfi_startproc
  72              	 
  73              	 
  74              	 
  75 0000 80B4     	 push {r7}
  76              	.LCFI6:
  77              	 .cfi_def_cfa_offset 4
  78              	 .cfi_offset 7,-4
  79 0002 83B0     	 sub sp,sp,#12
  80              	.LCFI7:
  81              	 .cfi_def_cfa_offset 16
  82 0004 00AF     	 add r7,sp,#0
  83              	.LCFI8:
  84              	 .cfi_def_cfa_register 7
  85 0006 7860     	 str r0,[r7,#4]
 550:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[0]);
  86              	 .loc 1 550 0
  87 0008 7B68     	 ldr r3,[r7,#4]
  88 000a D3F8E832 	 ldr r3,[r3,#744]
 551:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** }
  89              	 .loc 1 551 0
  90 000e 1846     	 mov r0,r3
  91 0010 0C37     	 adds r7,r7,#12
  92              	.LCFI9:
  93              	 .cfi_def_cfa_offset 4
  94 0012 BD46     	 mov sp,r7
  95              	.LCFI10:
  96              	 .cfi_def_cfa_register 13
  97              	 
  98 0014 5DF8047B 	 ldr r7,[sp],#4
  99              	.LCFI11:
 100              	 .cfi_restore 7
 101              	 .cfi_def_cfa_offset 0
 102 0018 7047     	 bx lr
 103              	 .cfi_endproc
 104              	.LFE136:
 106 001a 00BF     	 .section .text.XMC_DMA_GetChannelsBlockCompleteStatus,"ax",%progbits
 107              	 .align 2
 108              	 .thumb
 109              	 .thumb_func
 111              	XMC_DMA_GetChannelsBlockCompleteStatus:
 112              	.LFB137:
 552:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 553:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 554:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 555:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA block complete status
 556:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 557:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 558:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Get block transfer complete status <br>
 559:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 560:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 561:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The function returns GPDMA block transfer complete interrupt status. <br>
 562:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 563:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
 564:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 113              	 .loc 1 564 0
 114              	 .cfi_startproc
 115              	 
 116              	 
 117              	 
 118 0000 80B4     	 push {r7}
 119              	.LCFI12:
 120              	 .cfi_def_cfa_offset 4
 121              	 .cfi_offset 7,-4
 122 0002 83B0     	 sub sp,sp,#12
 123              	.LCFI13:
 124              	 .cfi_def_cfa_offset 16
 125 0004 00AF     	 add r7,sp,#0
 126              	.LCFI14:
 127              	 .cfi_def_cfa_register 7
 128 0006 7860     	 str r0,[r7,#4]
 565:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[2]);
 129              	 .loc 1 565 0
 130 0008 7B68     	 ldr r3,[r7,#4]
 131 000a D3F8F032 	 ldr r3,[r3,#752]
 566:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** }
 132              	 .loc 1 566 0
 133 000e 1846     	 mov r0,r3
 134 0010 0C37     	 adds r7,r7,#12
 135              	.LCFI15:
 136              	 .cfi_def_cfa_offset 4
 137 0012 BD46     	 mov sp,r7
 138              	.LCFI16:
 139              	 .cfi_def_cfa_register 13
 140              	 
 141 0014 5DF8047B 	 ldr r7,[sp],#4
 142              	.LCFI17:
 143              	 .cfi_restore 7
 144              	 .cfi_def_cfa_offset 0
 145 0018 7047     	 bx lr
 146              	 .cfi_endproc
 147              	.LFE137:
 149 001a 00BF     	 .section .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus,"ax",%progbits
 150              	 .align 2
 151              	 .thumb
 152              	 .thumb_func
 154              	XMC_DMA_GetChannelsSourceTransactionCompleteStatus:
 155              	.LFB138:
 567:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 568:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 569:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 570:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 571:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 572:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 573:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Get source transaction complete status <br>
 574:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 575:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 576:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The function returns the source transaction complete interrupt status. <br>
 577:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 578:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 579:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * If the source peripheral is memory, the source transaction complete interrupt is
 580:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * ignored.
 581:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 582:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
 583:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 156              	 .loc 1 583 0
 157              	 .cfi_startproc
 158              	 
 159              	 
 160              	 
 161 0000 80B4     	 push {r7}
 162              	.LCFI18:
 163              	 .cfi_def_cfa_offset 4
 164              	 .cfi_offset 7,-4
 165 0002 83B0     	 sub sp,sp,#12
 166              	.LCFI19:
 167              	 .cfi_def_cfa_offset 16
 168 0004 00AF     	 add r7,sp,#0
 169              	.LCFI20:
 170              	 .cfi_def_cfa_register 7
 171 0006 7860     	 str r0,[r7,#4]
 584:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[4]);
 172              	 .loc 1 584 0
 173 0008 7B68     	 ldr r3,[r7,#4]
 174 000a D3F8F832 	 ldr r3,[r3,#760]
 585:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** }
 175              	 .loc 1 585 0
 176 000e 1846     	 mov r0,r3
 177 0010 0C37     	 adds r7,r7,#12
 178              	.LCFI21:
 179              	 .cfi_def_cfa_offset 4
 180 0012 BD46     	 mov sp,r7
 181              	.LCFI22:
 182              	 .cfi_def_cfa_register 13
 183              	 
 184 0014 5DF8047B 	 ldr r7,[sp],#4
 185              	.LCFI23:
 186              	 .cfi_restore 7
 187              	 .cfi_def_cfa_offset 0
 188 0018 7047     	 bx lr
 189              	 .cfi_endproc
 190              	.LFE138:
 192 001a 00BF     	 .section .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus,"ax",%progbits
 193              	 .align 2
 194              	 .thumb
 195              	 .thumb_func
 197              	XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:
 198              	.LFB139:
 586:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 587:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 588:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 589:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA event status
 590:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 591:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 592:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Get destination transaction complete status <br>
 593:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 594:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 595:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The function returns the destination transaction complete interrupt status <br>
 596:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 597:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Note: </b><br>
 598:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * If the destination peripheral is memory, the destination transaction complete
 599:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * interrupt is ignored.
 600:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 601:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const d
 602:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 199              	 .loc 1 602 0
 200              	 .cfi_startproc
 201              	 
 202              	 
 203              	 
 204 0000 80B4     	 push {r7}
 205              	.LCFI24:
 206              	 .cfi_def_cfa_offset 4
 207              	 .cfi_offset 7,-4
 208 0002 83B0     	 sub sp,sp,#12
 209              	.LCFI25:
 210              	 .cfi_def_cfa_offset 16
 211 0004 00AF     	 add r7,sp,#0
 212              	.LCFI26:
 213              	 .cfi_def_cfa_register 7
 214 0006 7860     	 str r0,[r7,#4]
 603:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[6]);
 215              	 .loc 1 603 0
 216 0008 7B68     	 ldr r3,[r7,#4]
 217 000a D3F80033 	 ldr r3,[r3,#768]
 604:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** }
 218              	 .loc 1 604 0
 219 000e 1846     	 mov r0,r3
 220 0010 0C37     	 adds r7,r7,#12
 221              	.LCFI27:
 222              	 .cfi_def_cfa_offset 4
 223 0012 BD46     	 mov sp,r7
 224              	.LCFI28:
 225              	 .cfi_def_cfa_register 13
 226              	 
 227 0014 5DF8047B 	 ldr r7,[sp],#4
 228              	.LCFI29:
 229              	 .cfi_restore 7
 230              	 .cfi_def_cfa_offset 0
 231 0018 7047     	 bx lr
 232              	 .cfi_endproc
 233              	.LFE139:
 235 001a 00BF     	 .section .text.XMC_DMA_GetChannelsErrorStatus,"ax",%progbits
 236              	 .align 2
 237              	 .thumb
 238              	 .thumb_func
 240              	XMC_DMA_GetChannelsErrorStatus:
 241              	.LFB140:
 605:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** 
 606:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** /**
 607:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @param dma A constant pointer to XMC_DMA_t, pointing to the GPDMA base address
 608:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * @return uint32_t DMA error event status
 609:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 610:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par<b>Description: </b><br>
 611:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * Get DMA error event status <br>
 612:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  *
 613:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * \par
 614:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  * The function returns error interrupt status. <br>
 615:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****  */
 616:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** __STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
 617:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** {
 242              	 .loc 1 617 0
 243              	 .cfi_startproc
 244              	 
 245              	 
 246              	 
 247 0000 80B4     	 push {r7}
 248              	.LCFI30:
 249              	 .cfi_def_cfa_offset 4
 250              	 .cfi_offset 7,-4
 251 0002 83B0     	 sub sp,sp,#12
 252              	.LCFI31:
 253              	 .cfi_def_cfa_offset 16
 254 0004 00AF     	 add r7,sp,#0
 255              	.LCFI32:
 256              	 .cfi_def_cfa_register 7
 257 0006 7860     	 str r0,[r7,#4]
 618:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h ****   return (dma->STATUSCHEV[8]);
 258              	 .loc 1 618 0
 259 0008 7B68     	 ldr r3,[r7,#4]
 260 000a D3F80833 	 ldr r3,[r3,#776]
 619:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_dma.h **** }
 261              	 .loc 1 619 0
 262 000e 1846     	 mov r0,r3
 263 0010 0C37     	 adds r7,r7,#12
 264              	.LCFI33:
 265              	 .cfi_def_cfa_offset 4
 266 0012 BD46     	 mov sp,r7
 267              	.LCFI34:
 268              	 .cfi_def_cfa_register 13
 269              	 
 270 0014 5DF8047B 	 ldr r7,[sp],#4
 271              	.LCFI35:
 272              	 .cfi_restore 7
 273              	 .cfi_def_cfa_offset 0
 274 0018 7047     	 bx lr
 275              	 .cfi_endproc
 276              	.LFE140:
 278              	 .comm dma0_event_handlers,32,4
 279              	 .comm dma1_event_handlers,16,4
 280 001a 00BF     	 .section .text.XMC_DMA_Init,"ax",%progbits
 281              	 .align 2
 282              	 .global XMC_DMA_Init
 283              	 .thumb
 284              	 .thumb_func
 286              	XMC_DMA_Init:
 287              	.LFB183:
 288              	 .file 2 "../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c"
   1:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
   2:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /**
   3:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * @file xmc_dma.c
   4:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * @date 2016-04-08
   5:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
   6:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * @cond
   7:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
   8:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   9:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
  10:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  11:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * All rights reserved.                        
  12:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *                                             
  13:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * following conditions are met:   
  15:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *                                                                              
  16:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * disclaimer.                        
  18:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * 
  19:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * 
  22:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * products derived from this software without specific prior written permission.                  
  24:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *                                                                              
  25:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *                                                                              
  33:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  **************************************************************************************************
  36:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
  37:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * Change History
  38:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * --------------
  39:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
  40:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * 2015-02-20:
  41:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Initial <br>
  42:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
  43:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * 2015-05-20:
  44:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Add the declarations for the following APIs: <br>
  45:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_DisableRequestLine, XMC_DMA_ClearRequestLine, <br>
  46:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearSourcePeripheralRequest, <br>
  47:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *       XMC_DMA_CH_ClearDestinationPeripheralRequest <br>
  48:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Remove PRIOARRAY <br>
  49:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Documentation updates <br>
  50:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
  51:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * 2015-06-20:
  52:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Removed GetDriverVersion API <br>
  53:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Init() to support scatter/gather functionality (only
  54:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *       on advanced DMA channels) <br>
  55:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Updated XMC_DMA_CH_Disable() <br>
  56:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
  57:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * 2016-03-09:
  58:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Optimize write only registers
  59:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
  60:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * 2016-04-08:
  61:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Update XMC_DMA_CH_EnableEvent and XMC_DMA_CH_DisableEvent.
  62:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *       Write optimization of MASKCHEV 
  63:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_IRQHandler, clear channel event status before processing the event handler.
  64:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *       It corrects event losses if the DMA triggered in the event handler finished before returni
  65:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
  66:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * 2018-02-08:
  67:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *     - Fix XMC_DMA_CH_RequestLastMultiblockTransfer() clearing CTLL_LLP_SRC_EN and CTLL_LLP_DST_E
  68:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *
  69:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * @endcond
  70:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  */
  71:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
  72:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  73:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * HEADER FILES
  74:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  75:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
  76:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #include "xmc_dma.h"
  77:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
  78:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
  79:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
  80:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #include "xmc_scu.h"
  81:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
  82:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  83:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * MACROS
  84:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  85:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
  86:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_MSK (0xfUL)
  87:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #define DLR_SRSEL_RS_BITSIZE (4UL)
  88:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #define DMA_EVENT_MAX (5UL)
  89:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_DEST_PER_Pos GPDMA0_CH_CFGH_DEST_PER_Pos
  90:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_SRC_PER_Pos GPDMA0_CH_CFGH_SRC_PER_Pos
  91:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #define GPDMA0_CH_CFGH_PER_Msk (0x7U)
  92:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #define GPDMA1_CH_CFGH_PER_Msk (0x3U)
  93:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CFGH_PER_BITSIZE (4U)
  94:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #define GPDMA_CH_CTLL_INT_EN_Msk GPDMA0_CH_CTLL_INT_EN_Msk
  95:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
  96:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /*******************************************************************************
  97:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * LOCAL DATA
  98:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
  99:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 100:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined (GPDMA0)
 101:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma0_event_handlers[XMC_DMA0_NUM_CHANNELS];
 102:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 103:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 104:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined (GPDMA1)
 105:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_EVENT_HANDLER_t dma1_event_handlers[XMC_DMA1_NUM_CHANNELS];
 106:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 107:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  
 108:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /*******************************************************************************
 109:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  * API IMPLEMENTATION
 110:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****  *******************************************************************************/
 111:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 112:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Initialize GPDMA */
 113:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_Init(XMC_DMA_t *const dma)
 114:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 289              	 .loc 2 114 0
 290              	 .cfi_startproc
 291              	 
 292              	 
 293 0000 80B5     	 push {r7,lr}
 294              	.LCFI36:
 295              	 .cfi_def_cfa_offset 8
 296              	 .cfi_offset 7,-8
 297              	 .cfi_offset 14,-4
 298 0002 82B0     	 sub sp,sp,#8
 299              	.LCFI37:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI38:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
 115:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   XMC_DMA_Enable(dma);
 305              	 .loc 2 115 0
 306 0008 7868     	 ldr r0,[r7,#4]
 307 000a FFF7FEFF 	 bl XMC_DMA_Enable
 116:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 308              	 .loc 2 116 0
 309 000e 0837     	 adds r7,r7,#8
 310              	.LCFI39:
 311              	 .cfi_def_cfa_offset 8
 312 0010 BD46     	 mov sp,r7
 313              	.LCFI40:
 314              	 .cfi_def_cfa_register 13
 315              	 
 316 0012 80BD     	 pop {r7,pc}
 317              	 .cfi_endproc
 318              	.LFE183:
 320              	 .section .text.XMC_DMA_Enable,"ax",%progbits
 321              	 .align 2
 322              	 .global XMC_DMA_Enable
 323              	 .thumb
 324              	 .thumb_func
 326              	XMC_DMA_Enable:
 327              	.LFB184:
 117:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 118:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Enable GPDMA module */
 119:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_Enable(XMC_DMA_t *const dma)
 120:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 328              	 .loc 2 120 0
 329              	 .cfi_startproc
 330              	 
 331              	 
 332 0000 80B5     	 push {r7,lr}
 333              	.LCFI41:
 334              	 .cfi_def_cfa_offset 8
 335              	 .cfi_offset 7,-8
 336              	 .cfi_offset 14,-4
 337 0002 82B0     	 sub sp,sp,#8
 338              	.LCFI42:
 339              	 .cfi_def_cfa_offset 16
 340 0004 00AF     	 add r7,sp,#0
 341              	.LCFI43:
 342              	 .cfi_def_cfa_register 7
 343 0006 7860     	 str r0,[r7,#4]
 121:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 122:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 344              	 .loc 2 122 0
 345 0008 7B68     	 ldr r3,[r7,#4]
 346 000a 0D4A     	 ldr r2,.L17
 347 000c 9342     	 cmp r3,r2
 348 000e 06D1     	 bne .L15
 123:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 124:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 125:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 126:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 349              	 .loc 2 126 0
 350 0010 0C48     	 ldr r0,.L17+4
 351 0012 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 127:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 128:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 352              	 .loc 2 128 0
 353 0016 0B48     	 ldr r0,.L17+4
 354 0018 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 355 001c 05E0     	 b .L16
 356              	.L15:
 129:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 130:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 131:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 132:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 133:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 134:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 357              	 .loc 2 134 0
 358 001e 0A48     	 ldr r0,.L17+8
 359 0020 FFF7FEFF 	 bl XMC_SCU_CLOCK_UngatePeripheralClock
 135:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 136:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 360              	 .loc 2 136 0
 361 0024 0848     	 ldr r0,.L17+8
 362 0026 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 363              	.L16:
 137:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 138:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 139:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 140:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x1U;
 364              	 .loc 2 140 0
 365 002a 7B68     	 ldr r3,[r7,#4]
 366 002c D3F89823 	 ldr r2,[r3,#920]
 367 0030 0022     	 movs r2,#0
 368 0032 42F00102 	 orr r2,r2,#1
 369 0036 C3F89823 	 str r2,[r3,#920]
 141:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 370              	 .loc 2 141 0
 371 003a 0837     	 adds r7,r7,#8
 372              	.LCFI44:
 373              	 .cfi_def_cfa_offset 8
 374 003c BD46     	 mov sp,r7
 375              	.LCFI45:
 376              	 .cfi_def_cfa_register 13
 377              	 
 378 003e 80BD     	 pop {r7,pc}
 379              	.L18:
 380              	 .align 2
 381              	.L17:
 382 0040 00400150 	 .word 1342259200
 383 0044 10000020 	 .word 536870928
 384 0048 20000020 	 .word 536870944
 385              	 .cfi_endproc
 386              	.LFE184:
 388              	 .section .text.XMC_DMA_Disable,"ax",%progbits
 389              	 .align 2
 390              	 .global XMC_DMA_Disable
 391              	 .thumb
 392              	 .thumb_func
 394              	XMC_DMA_Disable:
 395              	.LFB185:
 142:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 143:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Disable GPDMA module */
 144:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_Disable(XMC_DMA_t *const dma)
 145:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 396              	 .loc 2 145 0
 397              	 .cfi_startproc
 398              	 
 399              	 
 400 0000 80B5     	 push {r7,lr}
 401              	.LCFI46:
 402              	 .cfi_def_cfa_offset 8
 403              	 .cfi_offset 7,-8
 404              	 .cfi_offset 14,-4
 405 0002 82B0     	 sub sp,sp,#8
 406              	.LCFI47:
 407              	 .cfi_def_cfa_offset 16
 408 0004 00AF     	 add r7,sp,#0
 409              	.LCFI48:
 410              	 .cfi_def_cfa_register 7
 411 0006 7860     	 str r0,[r7,#4]
 146:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->DMACFGREG = 0x0U;
 412              	 .loc 2 146 0
 413 0008 7B68     	 ldr r3,[r7,#4]
 414 000a D3F89823 	 ldr r2,[r3,#920]
 415 000e 0022     	 movs r2,#0
 416 0010 C3F89823 	 str r2,[r3,#920]
 147:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 148:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 149:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 417              	 .loc 2 149 0
 418 0014 7B68     	 ldr r3,[r7,#4]
 419 0016 094A     	 ldr r2,.L22
 420 0018 9342     	 cmp r3,r2
 421 001a 06D1     	 bne .L20
 150:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 151:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 152:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 422              	 .loc 2 152 0
 423 001c 0848     	 ldr r0,.L22+4
 424 001e FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 153:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 154:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 425              	 .loc 2 154 0
 426 0022 0748     	 ldr r0,.L22+4
 427 0024 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 428 0028 05E0     	 b .L19
 429              	.L20:
 155:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 156:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 157:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 158:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 159:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 160:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 430              	 .loc 2 160 0
 431 002a 0648     	 ldr r0,.L22+8
 432 002c FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 161:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 162:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 433              	 .loc 2 162 0
 434 0030 0448     	 ldr r0,.L22+8
 435 0032 FFF7FEFF 	 bl XMC_SCU_CLOCK_GatePeripheralClock
 436              	.L19:
 163:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 164:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 165:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 166:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 437              	 .loc 2 166 0
 438 0036 0837     	 adds r7,r7,#8
 439              	.LCFI49:
 440              	 .cfi_def_cfa_offset 8
 441 0038 BD46     	 mov sp,r7
 442              	.LCFI50:
 443              	 .cfi_def_cfa_register 13
 444              	 
 445 003a 80BD     	 pop {r7,pc}
 446              	.L23:
 447              	 .align 2
 448              	.L22:
 449 003c 00400150 	 .word 1342259200
 450 0040 10000020 	 .word 536870928
 451 0044 20000020 	 .word 536870944
 452              	 .cfi_endproc
 453              	.LFE185:
 455              	 .section .text.XMC_DMA_IsEnabled,"ax",%progbits
 456              	 .align 2
 457              	 .global XMC_DMA_IsEnabled
 458              	 .thumb
 459              	 .thumb_func
 461              	XMC_DMA_IsEnabled:
 462              	.LFB186:
 167:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 168:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Check is the GPDMA peripheral is enabled */
 169:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
 170:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 463              	 .loc 2 170 0
 464              	 .cfi_startproc
 465              	 
 466              	 
 467 0000 80B5     	 push {r7,lr}
 468              	.LCFI51:
 469              	 .cfi_def_cfa_offset 8
 470              	 .cfi_offset 7,-8
 471              	 .cfi_offset 14,-4
 472 0002 84B0     	 sub sp,sp,#16
 473              	.LCFI52:
 474              	 .cfi_def_cfa_offset 24
 475 0004 00AF     	 add r7,sp,#0
 476              	.LCFI53:
 477              	 .cfi_def_cfa_register 7
 478 0006 7860     	 str r0,[r7,#4]
 171:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   bool status;
 172:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 173:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 174:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 479              	 .loc 2 174 0
 480 0008 7B68     	 ldr r3,[r7,#4]
 481 000a 334A     	 ldr r2,.L35
 482 000c 9342     	 cmp r3,r2
 483 000e 25D1     	 bne .L25
 175:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 176:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 177:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 484              	 .loc 2 177 0
 485 0010 3248     	 ldr r0,.L35+4
 486 0012 FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 487 0016 0346     	 mov r3,r0
 488 0018 002B     	 cmp r3,#0
 489 001a 14BF     	 ite ne
 490 001c 0123     	 movne r3,#1
 491 001e 0023     	 moveq r3,#0
 492 0020 DBB2     	 uxtb r3,r3
 493 0022 83F00103 	 eor r3,r3,#1
 494 0026 DBB2     	 uxtb r3,r3
 495 0028 FB73     	 strb r3,[r7,#15]
 496 002a FB7B     	 ldrb r3,[r7,#15]
 497 002c 03F00103 	 and r3,r3,#1
 498 0030 FB73     	 strb r3,[r7,#15]
 178:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 179:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 499              	 .loc 2 179 0
 500 0032 FB7B     	 ldrb r3,[r7,#15]
 501 0034 002B     	 cmp r3,#0
 502 0036 0AD0     	 beq .L26
 503              	 .loc 2 179 0 is_stmt 0 discriminator 1
 504 0038 2848     	 ldr r0,.L35+4
 505 003a FFF7FEFF 	 bl XMC_SCU_CLOCK_IsPeripheralClockGated
 506 003e 0346     	 mov r3,r0
 507 0040 83F00103 	 eor r3,r3,#1
 508 0044 DBB2     	 uxtb r3,r3
 509 0046 002B     	 cmp r3,#0
 510 0048 01D0     	 beq .L26
 511              	 .loc 2 179 0 discriminator 3
 512 004a 0123     	 movs r3,#1
 513 004c 00E0     	 b .L27
 514              	.L26:
 515              	 .loc 2 179 0 discriminator 4
 516 004e 0023     	 movs r3,#0
 517              	.L27:
 518              	 .loc 2 179 0 discriminator 6
 519 0050 FB73     	 strb r3,[r7,#15]
 520 0052 FB7B     	 ldrb r3,[r7,#15]
 521 0054 03F00103 	 and r3,r3,#1
 522 0058 FB73     	 strb r3,[r7,#15]
 523 005a 24E0     	 b .L28
 524              	.L25:
 180:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 181:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 182:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 183:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 184:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 185:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 525              	 .loc 2 185 0 is_stmt 1
 526 005c 2048     	 ldr r0,.L35+8
 527 005e FFF7FEFF 	 bl XMC_SCU_RESET_IsPeripheralResetAsserted
 528 0062 0346     	 mov r3,r0
 529 0064 002B     	 cmp r3,#0
 530 0066 14BF     	 ite ne
 531 0068 0123     	 movne r3,#1
 532 006a 0023     	 moveq r3,#0
 533 006c DBB2     	 uxtb r3,r3
 534 006e 83F00103 	 eor r3,r3,#1
 535 0072 DBB2     	 uxtb r3,r3
 536 0074 FB73     	 strb r3,[r7,#15]
 537 0076 FB7B     	 ldrb r3,[r7,#15]
 538 0078 03F00103 	 and r3,r3,#1
 539 007c FB73     	 strb r3,[r7,#15]
 186:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(CLOCK_GATING_SUPPORTED)
 187:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 540              	 .loc 2 187 0
 541 007e FB7B     	 ldrb r3,[r7,#15]
 542 0080 002B     	 cmp r3,#0
 543 0082 0AD0     	 beq .L29
 544              	 .loc 2 187 0 is_stmt 0 discriminator 1
 545 0084 1648     	 ldr r0,.L35+8
 546 0086 FFF7FEFF 	 bl XMC_SCU_CLOCK_IsPeripheralClockGated
 547 008a 0346     	 mov r3,r0
 548 008c 83F00103 	 eor r3,r3,#1
 549 0090 DBB2     	 uxtb r3,r3
 550 0092 002B     	 cmp r3,#0
 551 0094 01D0     	 beq .L29
 552              	 .loc 2 187 0 discriminator 3
 553 0096 0123     	 movs r3,#1
 554 0098 00E0     	 b .L30
 555              	.L29:
 556              	 .loc 2 187 0 discriminator 4
 557 009a 0023     	 movs r3,#0
 558              	.L30:
 559              	 .loc 2 187 0 discriminator 6
 560 009c FB73     	 strb r3,[r7,#15]
 561 009e FB7B     	 ldrb r3,[r7,#15]
 562 00a0 03F00103 	 and r3,r3,#1
 563 00a4 FB73     	 strb r3,[r7,#15]
 564              	.L28:
 188:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 189:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 190:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 191:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 192:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   /* DMA reset is not asserted and peripheral clock is not gated */
 193:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (status == true)
 565              	 .loc 2 193 0 is_stmt 1
 566 00a6 FB7B     	 ldrb r3,[r7,#15]
 567 00a8 002B     	 cmp r3,#0
 568 00aa 0FD0     	 beq .L31
 194:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 195:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     status = status && (dma->DMACFGREG != 0U);
 569              	 .loc 2 195 0
 570 00ac FB7B     	 ldrb r3,[r7,#15]
 571 00ae 002B     	 cmp r3,#0
 572 00b0 06D0     	 beq .L32
 573              	 .loc 2 195 0 is_stmt 0 discriminator 1
 574 00b2 7B68     	 ldr r3,[r7,#4]
 575 00b4 D3F89833 	 ldr r3,[r3,#920]
 576 00b8 002B     	 cmp r3,#0
 577 00ba 01D0     	 beq .L32
 578              	 .loc 2 195 0 discriminator 3
 579 00bc 0123     	 movs r3,#1
 580 00be 00E0     	 b .L33
 581              	.L32:
 582              	 .loc 2 195 0 discriminator 4
 583 00c0 0023     	 movs r3,#0
 584              	.L33:
 585              	 .loc 2 195 0 discriminator 6
 586 00c2 FB73     	 strb r3,[r7,#15]
 587 00c4 FB7B     	 ldrb r3,[r7,#15]
 588 00c6 03F00103 	 and r3,r3,#1
 589 00ca FB73     	 strb r3,[r7,#15]
 590              	.L31:
 196:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 197:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 198:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   return status;
 591              	 .loc 2 198 0 is_stmt 1
 592 00cc FB7B     	 ldrb r3,[r7,#15]
 199:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 593              	 .loc 2 199 0
 594 00ce 1846     	 mov r0,r3
 595 00d0 1037     	 adds r7,r7,#16
 596              	.LCFI54:
 597              	 .cfi_def_cfa_offset 8
 598 00d2 BD46     	 mov sp,r7
 599              	.LCFI55:
 600              	 .cfi_def_cfa_register 13
 601              	 
 602 00d4 80BD     	 pop {r7,pc}
 603              	.L36:
 604 00d6 00BF     	 .align 2
 605              	.L35:
 606 00d8 00400150 	 .word 1342259200
 607 00dc 10000020 	 .word 536870928
 608 00e0 20000020 	 .word 536870944
 609              	 .cfi_endproc
 610              	.LFE186:
 612              	 .section .text.XMC_DMA_EnableRequestLine,"ax",%progbits
 613              	 .align 2
 614              	 .global XMC_DMA_EnableRequestLine
 615              	 .thumb
 616              	 .thumb_func
 618              	XMC_DMA_EnableRequestLine:
 619              	.LFB187:
 200:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 201:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Enable request line */
 202:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
 203:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 620              	 .loc 2 203 0
 621              	 .cfi_startproc
 622              	 
 623              	 
 624              	 
 625 0000 80B4     	 push {r7}
 626              	.LCFI56:
 627              	 .cfi_def_cfa_offset 4
 628              	 .cfi_offset 7,-4
 629 0002 83B0     	 sub sp,sp,#12
 630              	.LCFI57:
 631              	 .cfi_def_cfa_offset 16
 632 0004 00AF     	 add r7,sp,#0
 633              	.LCFI58:
 634              	 .cfi_def_cfa_register 7
 635 0006 7860     	 str r0,[r7,#4]
 636 0008 0B46     	 mov r3,r1
 637 000a FB70     	 strb r3,[r7,#3]
 638 000c 1346     	 mov r3,r2
 639 000e BB70     	 strb r3,[r7,#2]
 204:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 205:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 640              	 .loc 2 205 0
 641 0010 7B68     	 ldr r3,[r7,#4]
 642 0012 254A     	 ldr r2,.L40
 643 0014 9342     	 cmp r3,r2
 644 0016 21D1     	 bne .L38
 206:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 207:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 208:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 645              	 .loc 2 208 0
 646 0018 244B     	 ldr r3,.L40+4
 647 001a 244A     	 ldr r2,.L40+4
 648 001c 9168     	 ldr r1,[r2,#8]
 649 001e FA78     	 ldrb r2,[r7,#3]
 650 0020 9200     	 lsls r2,r2,#2
 651 0022 1046     	 mov r0,r2
 652 0024 0F22     	 movs r2,#15
 653 0026 8240     	 lsls r2,r2,r0
 654 0028 D243     	 mvns r2,r2
 655 002a 1140     	 ands r1,r1,r2
 209:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 656              	 .loc 2 209 0
 657 002c BA78     	 ldrb r2,[r7,#2]
 658 002e F878     	 ldrb r0,[r7,#3]
 659 0030 8000     	 lsls r0,r0,#2
 660 0032 8240     	 lsls r2,r2,r0
 208:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 661              	 .loc 2 208 0
 662 0034 0A43     	 orrs r2,r2,r1
 663 0036 9968     	 ldr r1,[r3,#8]
 664 0038 0021     	 movs r1,#0
 665 003a 0A43     	 orrs r2,r2,r1
 666 003c 9A60     	 str r2,[r3,#8]
 210:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 667              	 .loc 2 210 0
 668 003e 1B4B     	 ldr r3,.L40+4
 669 0040 1A4A     	 ldr r2,.L40+4
 670 0042 1169     	 ldr r1,[r2,#16]
 671 0044 FA78     	 ldrb r2,[r7,#3]
 672 0046 02F00702 	 and r2,r2,#7
 673 004a 0120     	 movs r0,#1
 674 004c 00FA02F2 	 lsl r2,r0,r2
 675 0050 0A43     	 orrs r2,r2,r1
 676 0052 1969     	 ldr r1,[r3,#16]
 677 0054 0021     	 movs r1,#0
 678 0056 0A43     	 orrs r2,r2,r1
 679 0058 1A61     	 str r2,[r3,#16]
 680 005a 1FE0     	 b .L37
 681              	.L38:
 211:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 212:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 213:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 214:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 215:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 682              	 .loc 2 215 0
 683 005c 134B     	 ldr r3,.L40+4
 684 005e 134A     	 ldr r2,.L40+4
 685 0060 D168     	 ldr r1,[r2,#12]
 686 0062 FA78     	 ldrb r2,[r7,#3]
 687 0064 9200     	 lsls r2,r2,#2
 688 0066 1046     	 mov r0,r2
 689 0068 0F22     	 movs r2,#15
 690 006a 8240     	 lsls r2,r2,r0
 691 006c D243     	 mvns r2,r2
 692 006e 1140     	 ands r1,r1,r2
 216:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 693              	 .loc 2 216 0
 694 0070 BA78     	 ldrb r2,[r7,#2]
 695 0072 F878     	 ldrb r0,[r7,#3]
 696 0074 8000     	 lsls r0,r0,#2
 697 0076 8240     	 lsls r2,r2,r0
 215:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                    ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 698              	 .loc 2 215 0
 699 0078 0A43     	 orrs r2,r2,r1
 700 007a D968     	 ldr r1,[r3,#12]
 701 007c 0021     	 movs r1,#0
 702 007e 0A43     	 orrs r2,r2,r1
 703 0080 DA60     	 str r2,[r3,#12]
 217:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->LNEN |= (0x100UL << line);
 704              	 .loc 2 217 0
 705 0082 0A4B     	 ldr r3,.L40+4
 706 0084 094A     	 ldr r2,.L40+4
 707 0086 1169     	 ldr r1,[r2,#16]
 708 0088 FA78     	 ldrb r2,[r7,#3]
 709 008a 4FF48070 	 mov r0,#256
 710 008e 00FA02F2 	 lsl r2,r0,r2
 711 0092 0A43     	 orrs r2,r2,r1
 712 0094 1969     	 ldr r1,[r3,#16]
 713 0096 0021     	 movs r1,#0
 714 0098 0A43     	 orrs r2,r2,r1
 715 009a 1A61     	 str r2,[r3,#16]
 716              	.L37:
 218:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 219:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 220:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 717              	 .loc 2 220 0
 718 009c 0C37     	 adds r7,r7,#12
 719              	.LCFI59:
 720              	 .cfi_def_cfa_offset 4
 721 009e BD46     	 mov sp,r7
 722              	.LCFI60:
 723              	 .cfi_def_cfa_register 13
 724              	 
 725 00a0 5DF8047B 	 ldr r7,[sp],#4
 726              	.LCFI61:
 727              	 .cfi_restore 7
 728              	 .cfi_def_cfa_offset 0
 729 00a4 7047     	 bx lr
 730              	.L41:
 731 00a6 00BF     	 .align 2
 732              	.L40:
 733 00a8 00400150 	 .word 1342259200
 734 00ac 00490050 	 .word 1342195968
 735              	 .cfi_endproc
 736              	.LFE187:
 738              	 .section .text.XMC_DMA_DisableRequestLine,"ax",%progbits
 739              	 .align 2
 740              	 .global XMC_DMA_DisableRequestLine
 741              	 .thumb
 742              	 .thumb_func
 744              	XMC_DMA_DisableRequestLine:
 745              	.LFB188:
 221:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 222:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_DisableRequestLine(XMC_DMA_t *const dma, uint8_t line)
 223:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 746              	 .loc 2 223 0
 747              	 .cfi_startproc
 748              	 
 749              	 
 750              	 
 751 0000 80B4     	 push {r7}
 752              	.LCFI62:
 753              	 .cfi_def_cfa_offset 4
 754              	 .cfi_offset 7,-4
 755 0002 83B0     	 sub sp,sp,#12
 756              	.LCFI63:
 757              	 .cfi_def_cfa_offset 16
 758 0004 00AF     	 add r7,sp,#0
 759              	.LCFI64:
 760              	 .cfi_def_cfa_register 7
 761 0006 7860     	 str r0,[r7,#4]
 762 0008 0B46     	 mov r3,r1
 763 000a FB70     	 strb r3,[r7,#3]
 224:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 225:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 764              	 .loc 2 225 0
 765 000c 7B68     	 ldr r3,[r7,#4]
 766 000e 124A     	 ldr r2,.L45
 767 0010 9342     	 cmp r3,r2
 768 0012 0DD1     	 bne .L43
 226:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 227:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 228:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 769              	 .loc 2 228 0
 770 0014 114B     	 ldr r3,.L45+4
 771 0016 114A     	 ldr r2,.L45+4
 772 0018 1169     	 ldr r1,[r2,#16]
 773 001a FA78     	 ldrb r2,[r7,#3]
 774 001c 0120     	 movs r0,#1
 775 001e 00FA02F2 	 lsl r2,r0,r2
 776 0022 D243     	 mvns r2,r2
 777 0024 0A40     	 ands r2,r2,r1
 778 0026 1969     	 ldr r1,[r3,#16]
 779 0028 0021     	 movs r1,#0
 780 002a 0A43     	 orrs r2,r2,r1
 781 002c 1A61     	 str r2,[r3,#16]
 782 002e 0DE0     	 b .L42
 783              	.L43:
 229:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 230:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 231:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 232:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 233:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 784              	 .loc 2 233 0
 785 0030 0A4B     	 ldr r3,.L45+4
 786 0032 0A4A     	 ldr r2,.L45+4
 787 0034 1169     	 ldr r1,[r2,#16]
 788 0036 FA78     	 ldrb r2,[r7,#3]
 789 0038 4FF48070 	 mov r0,#256
 790 003c 00FA02F2 	 lsl r2,r0,r2
 791 0040 D243     	 mvns r2,r2
 792 0042 0A40     	 ands r2,r2,r1
 793 0044 1969     	 ldr r1,[r3,#16]
 794 0046 0021     	 movs r1,#0
 795 0048 0A43     	 orrs r2,r2,r1
 796 004a 1A61     	 str r2,[r3,#16]
 797              	.L42:
 234:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 235:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 236:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 798              	 .loc 2 236 0
 799 004c 0C37     	 adds r7,r7,#12
 800              	.LCFI65:
 801              	 .cfi_def_cfa_offset 4
 802 004e BD46     	 mov sp,r7
 803              	.LCFI66:
 804              	 .cfi_def_cfa_register 13
 805              	 
 806 0050 5DF8047B 	 ldr r7,[sp],#4
 807              	.LCFI67:
 808              	 .cfi_restore 7
 809              	 .cfi_def_cfa_offset 0
 810 0054 7047     	 bx lr
 811              	.L46:
 812 0056 00BF     	 .align 2
 813              	.L45:
 814 0058 00400150 	 .word 1342259200
 815 005c 00490050 	 .word 1342195968
 816              	 .cfi_endproc
 817              	.LFE188:
 819              	 .section .text.XMC_DMA_ClearRequestLine,"ax",%progbits
 820              	 .align 2
 821              	 .global XMC_DMA_ClearRequestLine
 822              	 .thumb
 823              	 .thumb_func
 825              	XMC_DMA_ClearRequestLine:
 826              	.LFB189:
 237:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 238:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearRequestLine(XMC_DMA_t *const dma, uint8_t line)
 239:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 827              	 .loc 2 239 0
 828              	 .cfi_startproc
 829              	 
 830              	 
 831              	 
 832 0000 80B4     	 push {r7}
 833              	.LCFI68:
 834              	 .cfi_def_cfa_offset 4
 835              	 .cfi_offset 7,-4
 836 0002 83B0     	 sub sp,sp,#12
 837              	.LCFI69:
 838              	 .cfi_def_cfa_offset 16
 839 0004 00AF     	 add r7,sp,#0
 840              	.LCFI70:
 841              	 .cfi_def_cfa_register 7
 842 0006 7860     	 str r0,[r7,#4]
 843 0008 0B46     	 mov r3,r1
 844 000a FB70     	 strb r3,[r7,#3]
 240:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 241:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 845              	 .loc 2 241 0
 846 000c 7B68     	 ldr r3,[r7,#4]
 847 000e 1E4A     	 ldr r2,.L50
 848 0010 9342     	 cmp r3,r2
 849 0012 19D1     	 bne .L48
 242:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 243:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 244:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x1UL << line);
 850              	 .loc 2 244 0
 851 0014 1D4B     	 ldr r3,.L50+4
 852 0016 1D4A     	 ldr r2,.L50+4
 853 0018 1169     	 ldr r1,[r2,#16]
 854 001a FA78     	 ldrb r2,[r7,#3]
 855 001c 0120     	 movs r0,#1
 856 001e 00FA02F2 	 lsl r2,r0,r2
 857 0022 D243     	 mvns r2,r2
 858 0024 0A40     	 ands r2,r2,r1
 859 0026 1969     	 ldr r1,[r3,#16]
 860 0028 0021     	 movs r1,#0
 861 002a 0A43     	 orrs r2,r2,r1
 862 002c 1A61     	 str r2,[r3,#16]
 245:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x1UL << line;
 863              	 .loc 2 245 0
 864 002e 174B     	 ldr r3,.L50+4
 865 0030 164A     	 ldr r2,.L50+4
 866 0032 1169     	 ldr r1,[r2,#16]
 867 0034 FA78     	 ldrb r2,[r7,#3]
 868 0036 0120     	 movs r0,#1
 869 0038 00FA02F2 	 lsl r2,r0,r2
 870 003c 0A43     	 orrs r2,r2,r1
 871 003e 1969     	 ldr r1,[r3,#16]
 872 0040 0021     	 movs r1,#0
 873 0042 0A43     	 orrs r2,r2,r1
 874 0044 1A61     	 str r2,[r3,#16]
 875 0046 1AE0     	 b .L47
 876              	.L48:
 246:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 247:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 248:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 249:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 250:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->LNEN &= ~(0x100UL << line);
 877              	 .loc 2 250 0
 878 0048 104B     	 ldr r3,.L50+4
 879 004a 104A     	 ldr r2,.L50+4
 880 004c 1169     	 ldr r1,[r2,#16]
 881 004e FA78     	 ldrb r2,[r7,#3]
 882 0050 4FF48070 	 mov r0,#256
 883 0054 00FA02F2 	 lsl r2,r0,r2
 884 0058 D243     	 mvns r2,r2
 885 005a 0A40     	 ands r2,r2,r1
 886 005c 1969     	 ldr r1,[r3,#16]
 887 005e 0021     	 movs r1,#0
 888 0060 0A43     	 orrs r2,r2,r1
 889 0062 1A61     	 str r2,[r3,#16]
 251:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 	DLR->LNEN |= 0x100UL << line;
 890              	 .loc 2 251 0
 891 0064 094B     	 ldr r3,.L50+4
 892 0066 094A     	 ldr r2,.L50+4
 893 0068 1169     	 ldr r1,[r2,#16]
 894 006a FA78     	 ldrb r2,[r7,#3]
 895 006c 4FF48070 	 mov r0,#256
 896 0070 00FA02F2 	 lsl r2,r0,r2
 897 0074 0A43     	 orrs r2,r2,r1
 898 0076 1969     	 ldr r1,[r3,#16]
 899 0078 0021     	 movs r1,#0
 900 007a 0A43     	 orrs r2,r2,r1
 901 007c 1A61     	 str r2,[r3,#16]
 902              	.L47:
 252:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 253:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 254:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 903              	 .loc 2 254 0
 904 007e 0C37     	 adds r7,r7,#12
 905              	.LCFI71:
 906              	 .cfi_def_cfa_offset 4
 907 0080 BD46     	 mov sp,r7
 908              	.LCFI72:
 909              	 .cfi_def_cfa_register 13
 910              	 
 911 0082 5DF8047B 	 ldr r7,[sp],#4
 912              	.LCFI73:
 913              	 .cfi_restore 7
 914              	 .cfi_def_cfa_offset 0
 915 0086 7047     	 bx lr
 916              	.L51:
 917              	 .align 2
 918              	.L50:
 919 0088 00400150 	 .word 1342259200
 920 008c 00490050 	 .word 1342195968
 921              	 .cfi_endproc
 922              	.LFE189:
 924              	 .section .text.XMC_DMA_GetOverrunStatus,"ax",%progbits
 925              	 .align 2
 926              	 .global XMC_DMA_GetOverrunStatus
 927              	 .thumb
 928              	 .thumb_func
 930              	XMC_DMA_GetOverrunStatus:
 931              	.LFB190:
 255:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 256:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Get DMA DLR overrun status */
 257:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** bool XMC_DMA_GetOverrunStatus(XMC_DMA_t *const dma, uint8_t line)
 258:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 932              	 .loc 2 258 0
 933              	 .cfi_startproc
 934              	 
 935              	 
 936              	 
 937 0000 80B4     	 push {r7}
 938              	.LCFI74:
 939              	 .cfi_def_cfa_offset 4
 940              	 .cfi_offset 7,-4
 941 0002 85B0     	 sub sp,sp,#20
 942              	.LCFI75:
 943              	 .cfi_def_cfa_offset 24
 944 0004 00AF     	 add r7,sp,#0
 945              	.LCFI76:
 946              	 .cfi_def_cfa_register 7
 947 0006 7860     	 str r0,[r7,#4]
 948 0008 0B46     	 mov r3,r1
 949 000a FB70     	 strb r3,[r7,#3]
 259:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   bool status;
 260:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 261:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 262:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 950              	 .loc 2 262 0
 951 000c 7B68     	 ldr r3,[r7,#4]
 952 000e 124A     	 ldr r2,.L56
 953 0010 9342     	 cmp r3,r2
 954 0012 0CD1     	 bne .L53
 263:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 264:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 265:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x1UL << line));
 955              	 .loc 2 265 0
 956 0014 114B     	 ldr r3,.L56+4
 957 0016 1A68     	 ldr r2,[r3]
 958 0018 FB78     	 ldrb r3,[r7,#3]
 959 001a 22FA03F3 	 lsr r3,r2,r3
 960 001e 03F00103 	 and r3,r3,#1
 961 0022 002B     	 cmp r3,#0
 962 0024 14BF     	 ite ne
 963 0026 0123     	 movne r3,#1
 964 0028 0023     	 moveq r3,#0
 965 002a FB73     	 strb r3,[r7,#15]
 966 002c 0CE0     	 b .L54
 967              	.L53:
 266:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 267:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 268:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 269:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 270:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     status = (bool)(DLR->OVRSTAT & (0x100UL << line));
 968              	 .loc 2 270 0
 969 002e 0B4B     	 ldr r3,.L56+4
 970 0030 1A68     	 ldr r2,[r3]
 971 0032 FB78     	 ldrb r3,[r7,#3]
 972 0034 4FF48071 	 mov r1,#256
 973 0038 01FA03F3 	 lsl r3,r1,r3
 974 003c 1340     	 ands r3,r3,r2
 975 003e 002B     	 cmp r3,#0
 976 0040 14BF     	 ite ne
 977 0042 0123     	 movne r3,#1
 978 0044 0023     	 moveq r3,#0
 979 0046 FB73     	 strb r3,[r7,#15]
 980              	.L54:
 271:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 272:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 273:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 274:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   return status;
 981              	 .loc 2 274 0
 982 0048 FB7B     	 ldrb r3,[r7,#15]
 275:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 983              	 .loc 2 275 0
 984 004a 1846     	 mov r0,r3
 985 004c 1437     	 adds r7,r7,#20
 986              	.LCFI77:
 987              	 .cfi_def_cfa_offset 4
 988 004e BD46     	 mov sp,r7
 989              	.LCFI78:
 990              	 .cfi_def_cfa_register 13
 991              	 
 992 0050 5DF8047B 	 ldr r7,[sp],#4
 993              	.LCFI79:
 994              	 .cfi_restore 7
 995              	 .cfi_def_cfa_offset 0
 996 0054 7047     	 bx lr
 997              	.L57:
 998 0056 00BF     	 .align 2
 999              	.L56:
 1000 0058 00400150 	 .word 1342259200
 1001 005c 00490050 	 .word 1342195968
 1002              	 .cfi_endproc
 1003              	.LFE190:
 1005              	 .section .text.XMC_DMA_ClearOverrunStatus,"ax",%progbits
 1006              	 .align 2
 1007              	 .global XMC_DMA_ClearOverrunStatus
 1008              	 .thumb
 1009              	 .thumb_func
 1011              	XMC_DMA_ClearOverrunStatus:
 1012              	.LFB191:
 276:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 277:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Clear DMA DLR overrun status */
 278:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_ClearOverrunStatus(XMC_DMA_t *const dma, const uint8_t line)
 279:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 1013              	 .loc 2 279 0
 1014              	 .cfi_startproc
 1015              	 
 1016              	 
 1017              	 
 1018 0000 80B4     	 push {r7}
 1019              	.LCFI80:
 1020              	 .cfi_def_cfa_offset 4
 1021              	 .cfi_offset 7,-4
 1022 0002 83B0     	 sub sp,sp,#12
 1023              	.LCFI81:
 1024              	 .cfi_def_cfa_offset 16
 1025 0004 00AF     	 add r7,sp,#0
 1026              	.LCFI82:
 1027              	 .cfi_def_cfa_register 7
 1028 0006 7860     	 str r0,[r7,#4]
 1029 0008 0B46     	 mov r3,r1
 1030 000a FB70     	 strb r3,[r7,#3]
 280:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 281:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 1031              	 .loc 2 281 0
 1032 000c 7B68     	 ldr r3,[r7,#4]
 1033 000e 0E4A     	 ldr r2,.L61
 1034 0010 9342     	 cmp r3,r2
 1035 0012 09D1     	 bne .L59
 282:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 283:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 284:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x1UL << line);
 1036              	 .loc 2 284 0
 1037 0014 0D4B     	 ldr r3,.L61+4
 1038 0016 FA78     	 ldrb r2,[r7,#3]
 1039 0018 0121     	 movs r1,#1
 1040 001a 01FA02F2 	 lsl r2,r1,r2
 1041 001e 5968     	 ldr r1,[r3,#4]
 1042 0020 0021     	 movs r1,#0
 1043 0022 0A43     	 orrs r2,r2,r1
 1044 0024 5A60     	 str r2,[r3,#4]
 1045 0026 09E0     	 b .L58
 1046              	.L59:
 285:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 286:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 287:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 288:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 289:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     DLR->OVRCLR = (uint32_t)(0x100UL << line);
 1047              	 .loc 2 289 0
 1048 0028 084B     	 ldr r3,.L61+4
 1049 002a FA78     	 ldrb r2,[r7,#3]
 1050 002c 4FF48071 	 mov r1,#256
 1051 0030 01FA02F2 	 lsl r2,r1,r2
 1052 0034 5968     	 ldr r1,[r3,#4]
 1053 0036 0021     	 movs r1,#0
 1054 0038 0A43     	 orrs r2,r2,r1
 1055 003a 5A60     	 str r2,[r3,#4]
 1056              	.L58:
 290:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 291:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 292:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 1057              	 .loc 2 292 0
 1058 003c 0C37     	 adds r7,r7,#12
 1059              	.LCFI83:
 1060              	 .cfi_def_cfa_offset 4
 1061 003e BD46     	 mov sp,r7
 1062              	.LCFI84:
 1063              	 .cfi_def_cfa_register 13
 1064              	 
 1065 0040 5DF8047B 	 ldr r7,[sp],#4
 1066              	.LCFI85:
 1067              	 .cfi_restore 7
 1068              	 .cfi_def_cfa_offset 0
 1069 0044 7047     	 bx lr
 1070              	.L62:
 1071 0046 00BF     	 .align 2
 1072              	.L61:
 1073 0048 00400150 	 .word 1342259200
 1074 004c 00490050 	 .word 1342195968
 1075              	 .cfi_endproc
 1076              	.LFE191:
 1078              	 .section .text.XMC_DMA_CH_Disable,"ax",%progbits
 1079              	 .align 2
 1080              	 .global XMC_DMA_CH_Disable
 1081              	 .thumb
 1082              	 .thumb_func
 1084              	XMC_DMA_CH_Disable:
 1085              	.LFB192:
 293:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 294:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Disable DMA channel */
 295:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
 296:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 1086              	 .loc 2 296 0
 1087              	 .cfi_startproc
 1088              	 
 1089              	 
 1090              	 
 1091 0000 80B4     	 push {r7}
 1092              	.LCFI86:
 1093              	 .cfi_def_cfa_offset 4
 1094              	 .cfi_offset 7,-4
 1095 0002 83B0     	 sub sp,sp,#12
 1096              	.LCFI87:
 1097              	 .cfi_def_cfa_offset 16
 1098 0004 00AF     	 add r7,sp,#0
 1099              	.LCFI88:
 1100              	 .cfi_def_cfa_register 7
 1101 0006 7860     	 str r0,[r7,#4]
 1102 0008 0B46     	 mov r3,r1
 1103 000a FB70     	 strb r3,[r7,#3]
 297:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CHENREG = (uint32_t)(0x100UL << channel);
 1104              	 .loc 2 297 0
 1105 000c FB78     	 ldrb r3,[r7,#3]
 1106 000e 4FF48072 	 mov r2,#256
 1107 0012 9A40     	 lsls r2,r2,r3
 1108 0014 7B68     	 ldr r3,[r7,#4]
 1109 0016 D3F8A013 	 ldr r1,[r3,#928]
 1110 001a 0021     	 movs r1,#0
 1111 001c 0A43     	 orrs r2,r2,r1
 1112 001e C3F8A023 	 str r2,[r3,#928]
 298:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 1113              	 .loc 2 298 0
 1114 0022 00BF     	 nop
 1115              	.L64:
 1116              	 .loc 2 298 0 is_stmt 0 discriminator 1
 1117 0024 7B68     	 ldr r3,[r7,#4]
 1118 0026 D3F8A023 	 ldr r2,[r3,#928]
 1119 002a FB78     	 ldrb r3,[r7,#3]
 1120 002c 22FA03F3 	 lsr r3,r2,r3
 1121 0030 03F00103 	 and r3,r3,#1
 1122 0034 002B     	 cmp r3,#0
 1123 0036 F5D1     	 bne .L64
 299:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 300:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     /* wait until channel is disabled */
 301:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 302:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 1124              	 .loc 2 302 0 is_stmt 1
 1125 0038 0C37     	 adds r7,r7,#12
 1126              	.LCFI89:
 1127              	 .cfi_def_cfa_offset 4
 1128 003a BD46     	 mov sp,r7
 1129              	.LCFI90:
 1130              	 .cfi_def_cfa_register 13
 1131              	 
 1132 003c 5DF8047B 	 ldr r7,[sp],#4
 1133              	.LCFI91:
 1134              	 .cfi_restore 7
 1135              	 .cfi_def_cfa_offset 0
 1136 0040 7047     	 bx lr
 1137              	 .cfi_endproc
 1138              	.LFE192:
 1140 0042 00BF     	 .section .text.XMC_DMA_CH_IsEnabled,"ax",%progbits
 1141              	 .align 2
 1142              	 .global XMC_DMA_CH_IsEnabled
 1143              	 .thumb
 1144              	 .thumb_func
 1146              	XMC_DMA_CH_IsEnabled:
 1147              	.LFB193:
 303:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 304:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is enabled */
 305:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
 306:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 1148              	 .loc 2 306 0
 1149              	 .cfi_startproc
 1150              	 
 1151              	 
 1152              	 
 1153 0000 80B4     	 push {r7}
 1154              	.LCFI92:
 1155              	 .cfi_def_cfa_offset 4
 1156              	 .cfi_offset 7,-4
 1157 0002 83B0     	 sub sp,sp,#12
 1158              	.LCFI93:
 1159              	 .cfi_def_cfa_offset 16
 1160 0004 00AF     	 add r7,sp,#0
 1161              	.LCFI94:
 1162              	 .cfi_def_cfa_register 7
 1163 0006 7860     	 str r0,[r7,#4]
 1164 0008 0B46     	 mov r3,r1
 1165 000a FB70     	 strb r3,[r7,#3]
 307:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 1166              	 .loc 2 307 0
 1167 000c 7B68     	 ldr r3,[r7,#4]
 1168 000e D3F8A023 	 ldr r2,[r3,#928]
 1169 0012 FB78     	 ldrb r3,[r7,#3]
 1170 0014 22FA03F3 	 lsr r3,r2,r3
 1171 0018 03F00103 	 and r3,r3,#1
 1172 001c 002B     	 cmp r3,#0
 1173 001e 14BF     	 ite ne
 1174 0020 0123     	 movne r3,#1
 1175 0022 0023     	 moveq r3,#0
 1176 0024 DBB2     	 uxtb r3,r3
 308:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 1177              	 .loc 2 308 0
 1178 0026 1846     	 mov r0,r3
 1179 0028 0C37     	 adds r7,r7,#12
 1180              	.LCFI95:
 1181              	 .cfi_def_cfa_offset 4
 1182 002a BD46     	 mov sp,r7
 1183              	.LCFI96:
 1184              	 .cfi_def_cfa_register 13
 1185              	 
 1186 002c 5DF8047B 	 ldr r7,[sp],#4
 1187              	.LCFI97:
 1188              	 .cfi_restore 7
 1189              	 .cfi_def_cfa_offset 0
 1190 0030 7047     	 bx lr
 1191              	 .cfi_endproc
 1192              	.LFE193:
 1194 0032 00BF     	 .section .text.XMC_DMA_CH_Init,"ax",%progbits
 1195              	 .align 2
 1196              	 .global XMC_DMA_CH_Init
 1197              	 .thumb
 1198              	 .thumb_func
 1200              	XMC_DMA_CH_Init:
 1201              	.LFB194:
 309:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 310:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Initialize DMA channel */
 311:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_C
 312:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 1202              	 .loc 2 312 0
 1203              	 .cfi_startproc
 1204              	 
 1205              	 
 1206 0000 80B5     	 push {r7,lr}
 1207              	.LCFI98:
 1208              	 .cfi_def_cfa_offset 8
 1209              	 .cfi_offset 7,-8
 1210              	 .cfi_offset 14,-4
 1211 0002 86B0     	 sub sp,sp,#24
 1212              	.LCFI99:
 1213              	 .cfi_def_cfa_offset 32
 1214 0004 00AF     	 add r7,sp,#0
 1215              	.LCFI100:
 1216              	 .cfi_def_cfa_register 7
 1217 0006 F860     	 str r0,[r7,#12]
 1218 0008 0B46     	 mov r3,r1
 1219 000a 7A60     	 str r2,[r7,#4]
 1220 000c FB72     	 strb r3,[r7,#11]
 313:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_STATUS_t status;
 314:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint8_t line;
 315:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint8_t peripheral;
 316:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 317:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (XMC_DMA_IsEnabled(dma) == true)
 1221              	 .loc 2 317 0
 1222 000e F868     	 ldr r0,[r7,#12]
 1223 0010 FFF7FEFF 	 bl XMC_DMA_IsEnabled
 1224 0014 0346     	 mov r3,r0
 1225 0016 002B     	 cmp r3,#0
 1226 0018 00F03782 	 beq .L68
 318:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 319:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 1227              	 .loc 2 319 0
 1228 001c FB7A     	 ldrb r3,[r7,#11]
 1229 001e F868     	 ldr r0,[r7,#12]
 1230 0020 1946     	 mov r1,r3
 1231 0022 FFF7FEFF 	 bl XMC_DMA_CH_IsEnabled
 1232 0026 0346     	 mov r3,r0
 1233 0028 83F00103 	 eor r3,r3,#1
 1234 002c DBB2     	 uxtb r3,r3
 1235 002e 002B     	 cmp r3,#0
 1236 0030 00F02882 	 beq .L69
 320:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 321:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       dma->CH[channel].SAR = config->src_addr;
 1237              	 .loc 2 321 0
 1238 0034 FB7A     	 ldrb r3,[r7,#11]
 1239 0036 7A68     	 ldr r2,[r7,#4]
 1240 0038 5268     	 ldr r2,[r2,#4]
 1241 003a F968     	 ldr r1,[r7,#12]
 1242 003c 5820     	 movs r0,#88
 1243 003e 00FB03F3 	 mul r3,r0,r3
 1244 0042 0B44     	 add r3,r3,r1
 1245 0044 1968     	 ldr r1,[r3]
 1246 0046 0021     	 movs r1,#0
 1247 0048 0A43     	 orrs r2,r2,r1
 1248 004a 1A60     	 str r2,[r3]
 322:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       dma->CH[channel].DAR = config->dst_addr;
 1249              	 .loc 2 322 0
 1250 004c FB7A     	 ldrb r3,[r7,#11]
 1251 004e 7A68     	 ldr r2,[r7,#4]
 1252 0050 9268     	 ldr r2,[r2,#8]
 1253 0052 F968     	 ldr r1,[r7,#12]
 1254 0054 5820     	 movs r0,#88
 1255 0056 00FB03F3 	 mul r3,r0,r3
 1256 005a 0B44     	 add r3,r3,r1
 1257 005c 0833     	 adds r3,r3,#8
 1258 005e 1968     	 ldr r1,[r3]
 1259 0060 0021     	 movs r1,#0
 1260 0062 0A43     	 orrs r2,r2,r1
 1261 0064 1A60     	 str r2,[r3]
 323:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 1262              	 .loc 2 323 0
 1263 0066 FB7A     	 ldrb r3,[r7,#11]
 1264 0068 7A68     	 ldr r2,[r7,#4]
 1265 006a D268     	 ldr r2,[r2,#12]
 1266 006c 1046     	 mov r0,r2
 1267 006e FA68     	 ldr r2,[r7,#12]
 1268 0070 5821     	 movs r1,#88
 1269 0072 01FB03F3 	 mul r3,r1,r3
 1270 0076 1344     	 add r3,r3,r2
 1271 0078 1033     	 adds r3,r3,#16
 1272 007a 1A68     	 ldr r2,[r3]
 1273 007c 0022     	 movs r2,#0
 1274 007e 0243     	 orrs r2,r2,r0
 1275 0080 1A60     	 str r2,[r3]
 324:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLH = (uint32_t)config->block_size;
 1276              	 .loc 2 324 0
 1277 0082 FB7A     	 ldrb r3,[r7,#11]
 1278 0084 7A68     	 ldr r2,[r7,#4]
 1279 0086 128B     	 ldrh r2,[r2,#24]
 1280 0088 92B2     	 uxth r2,r2
 1281 008a 1046     	 mov r0,r2
 1282 008c FA68     	 ldr r2,[r7,#12]
 1283 008e 5821     	 movs r1,#88
 1284 0090 01FB03F3 	 mul r3,r1,r3
 1285 0094 1344     	 add r3,r3,r2
 1286 0096 1833     	 adds r3,r3,#24
 1287 0098 5A68     	 ldr r2,[r3,#4]
 1288 009a 0022     	 movs r2,#0
 1289 009c 0243     	 orrs r2,r2,r0
 1290 009e 5A60     	 str r2,[r3,#4]
 325:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CTLL = config->control;
 1291              	 .loc 2 325 0
 1292 00a0 FB7A     	 ldrb r3,[r7,#11]
 1293 00a2 7A68     	 ldr r2,[r7,#4]
 1294 00a4 1268     	 ldr r2,[r2]
 1295 00a6 F968     	 ldr r1,[r7,#12]
 1296 00a8 5820     	 movs r0,#88
 1297 00aa 00FB03F3 	 mul r3,r0,r3
 1298 00ae 0B44     	 add r3,r3,r1
 1299 00b0 1833     	 adds r3,r3,#24
 1300 00b2 1968     	 ldr r1,[r3]
 1301 00b4 0021     	 movs r1,#0
 1302 00b6 0A43     	 orrs r2,r2,r1
 1303 00b8 1A60     	 str r2,[r3]
 326:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 327:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 1304              	 .loc 2 327 0
 1305 00ba FB7A     	 ldrb r3,[r7,#11]
 1306 00bc 7A68     	 ldr r2,[r7,#4]
 1307 00be D27E     	 ldrb r2,[r2,#27]
 1308 00c0 42F44062 	 orr r2,r2,#3072
 1309 00c4 F968     	 ldr r1,[r7,#12]
 1310 00c6 5820     	 movs r0,#88
 1311 00c8 00FB03F3 	 mul r3,r0,r3
 1312 00cc 0B44     	 add r3,r3,r1
 1313 00ce 4033     	 adds r3,r3,#64
 1314 00d0 1968     	 ldr r1,[r3]
 1315 00d2 0021     	 movs r1,#0
 1316 00d4 0A43     	 orrs r2,r2,r1
 1317 00d6 1A60     	 str r2,[r3]
 328:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
 329:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                          (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);
 330:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 331:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 1318              	 .loc 2 331 0
 1319 00d8 FB68     	 ldr r3,[r7,#12]
 1320 00da A64A     	 ldr r2,.L95
 1321 00dc 9342     	 cmp r3,r2
 1322 00de 1CD1     	 bne .L70
 1323              	 .loc 2 331 0 is_stmt 0 discriminator 1
 1324 00e0 FB7A     	 ldrb r3,[r7,#11]
 1325 00e2 012B     	 cmp r3,#1
 1326 00e4 19D8     	 bhi .L70
 332:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       {
 333:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         /* Configure scatter and gather */
 334:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         dma->CH[channel].SGR = config->src_gather_control;
 1327              	 .loc 2 334 0 is_stmt 1
 1328 00e6 FB7A     	 ldrb r3,[r7,#11]
 1329 00e8 7A68     	 ldr r2,[r7,#4]
 1330 00ea 1269     	 ldr r2,[r2,#16]
 1331 00ec F968     	 ldr r1,[r7,#12]
 1332 00ee 5820     	 movs r0,#88
 1333 00f0 00FB03F3 	 mul r3,r0,r3
 1334 00f4 0B44     	 add r3,r3,r1
 1335 00f6 4833     	 adds r3,r3,#72
 1336 00f8 1968     	 ldr r1,[r3]
 1337 00fa 0021     	 movs r1,#0
 1338 00fc 0A43     	 orrs r2,r2,r1
 1339 00fe 1A60     	 str r2,[r3]
 335:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         dma->CH[channel].DSR = config->dst_scatter_control;
 1340              	 .loc 2 335 0
 1341 0100 FB7A     	 ldrb r3,[r7,#11]
 1342 0102 7A68     	 ldr r2,[r7,#4]
 1343 0104 5269     	 ldr r2,[r2,#20]
 1344 0106 F968     	 ldr r1,[r7,#12]
 1345 0108 5820     	 movs r0,#88
 1346 010a 00FB03F3 	 mul r3,r0,r3
 1347 010e 0B44     	 add r3,r3,r1
 1348 0110 5033     	 adds r3,r3,#80
 1349 0112 1968     	 ldr r1,[r3]
 1350 0114 0021     	 movs r1,#0
 1351 0116 0A43     	 orrs r2,r2,r1
 1352 0118 1A60     	 str r2,[r3]
 1353              	.L70:
 336:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       }
 337:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 338:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 1354              	 .loc 2 338 0
 1355 011a 7B68     	 ldr r3,[r7,#4]
 1356 011c B3F81F30 	 ldrh r3,[r3,#31]
 1357 0120 9BB2     	 uxth r3,r3
 1358 0122 002B     	 cmp r3,#0
 1359 0124 55D1     	 bne .L71
 339:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       {
 340:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         /* Hardware handshaking interface configuration */
 341:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 1360              	 .loc 2 341 0
 1361 0126 7B68     	 ldr r3,[r7,#4]
 1362 0128 9B78     	 ldrb r3,[r3,#2]
 1363 012a 03F07003 	 and r3,r3,#112
 1364 012e DBB2     	 uxtb r3,r3
 1365 0130 102B     	 cmp r3,#16
 1366 0132 06D0     	 beq .L72
 342:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1367              	 .loc 2 342 0 discriminator 1
 1368 0134 7B68     	 ldr r3,[r7,#4]
 1369 0136 9B78     	 ldrb r3,[r3,#2]
 1370 0138 03F07003 	 and r3,r3,#112
 1371 013c DBB2     	 uxtb r3,r3
 341:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1372              	 .loc 2 341 0 discriminator 1
 1373 013e 302B     	 cmp r3,#48
 1374 0140 47D1     	 bne .L71
 1375              	.L72:
 343:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         {
 344:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 345:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1376              	 .loc 2 345 0
 1377 0142 FB68     	 ldr r3,[r7,#12]
 1378 0144 8B4A     	 ldr r2,.L95
 1379 0146 9342     	 cmp r3,r2
 1380 0148 06D1     	 bne .L73
 346:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           {
 347:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 348:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1381              	 .loc 2 348 0
 1382 014a 7B68     	 ldr r3,[r7,#4]
 1383 014c 93F82130 	 ldrb r3,[r3,#33]
 1384 0150 03F00703 	 and r3,r3,#7
 1385 0154 BB75     	 strb r3,[r7,#22]
 1386 0156 05E0     	 b .L74
 1387              	.L73:
 349:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 350:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           }
 351:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           else
 352:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           {
 353:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****             line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1388              	 .loc 2 353 0
 1389 0158 7B68     	 ldr r3,[r7,#4]
 1390 015a 93F82130 	 ldrb r3,[r3,#33]
 1391 015e 03F00303 	 and r3,r3,#3
 1392 0162 BB75     	 strb r3,[r7,#22]
 1393              	.L74:
 354:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           }
 355:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 356:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1394              	 .loc 2 356 0
 1395 0164 7B68     	 ldr r3,[r7,#4]
 1396 0166 93F82130 	 ldrb r3,[r3,#33]
 1397 016a 1B09     	 lsrs r3,r3,#4
 1398 016c 7B75     	 strb r3,[r7,#21]
 357:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 358:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 1399              	 .loc 2 358 0
 1400 016e FB7A     	 ldrb r3,[r7,#11]
 1401 0170 FA7A     	 ldrb r2,[r7,#11]
 1402 0172 F968     	 ldr r1,[r7,#12]
 1403 0174 5820     	 movs r0,#88
 1404 0176 00FB02F2 	 mul r2,r0,r2
 1405 017a 0A44     	 add r2,r2,r1
 1406 017c 4032     	 adds r2,r2,#64
 1407 017e 5168     	 ldr r1,[r2,#4]
 1408 0180 BA7D     	 ldrb r2,[r7,#22]
 1409 0182 D202     	 lsls r2,r2,#11
 1410 0184 0A43     	 orrs r2,r2,r1
 1411 0186 F968     	 ldr r1,[r7,#12]
 1412 0188 5820     	 movs r0,#88
 1413 018a 00FB03F3 	 mul r3,r0,r3
 1414 018e 0B44     	 add r3,r3,r1
 1415 0190 4033     	 adds r3,r3,#64
 1416 0192 5968     	 ldr r1,[r3,#4]
 1417 0194 0021     	 movs r1,#0
 1418 0196 0A43     	 orrs r2,r2,r1
 1419 0198 5A60     	 str r2,[r3,#4]
 359:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1420              	 .loc 2 359 0
 1421 019a BA7D     	 ldrb r2,[r7,#22]
 1422 019c 7B7D     	 ldrb r3,[r7,#21]
 1423 019e F868     	 ldr r0,[r7,#12]
 1424 01a0 1146     	 mov r1,r2
 1425 01a2 1A46     	 mov r2,r3
 1426 01a4 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 360:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 1427              	 .loc 2 360 0
 1428 01a8 FB7A     	 ldrb r3,[r7,#11]
 1429 01aa FA7A     	 ldrb r2,[r7,#11]
 1430 01ac F968     	 ldr r1,[r7,#12]
 1431 01ae 5820     	 movs r0,#88
 1432 01b0 00FB02F2 	 mul r2,r0,r2
 1433 01b4 0A44     	 add r2,r2,r1
 1434 01b6 4032     	 adds r2,r2,#64
 1435 01b8 1268     	 ldr r2,[r2]
 1436 01ba 22F48062 	 bic r2,r2,#1024
 1437 01be F968     	 ldr r1,[r7,#12]
 1438 01c0 5820     	 movs r0,#88
 1439 01c2 00FB03F3 	 mul r3,r0,r3
 1440 01c6 0B44     	 add r3,r3,r1
 1441 01c8 4033     	 adds r3,r3,#64
 1442 01ca 1968     	 ldr r1,[r3]
 1443 01cc 0021     	 movs r1,#0
 1444 01ce 0A43     	 orrs r2,r2,r1
 1445 01d0 1A60     	 str r2,[r3]
 1446              	.L71:
 361:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         }
 362:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       }
 363:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 364:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 365:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 1447              	 .loc 2 365 0
 1448 01d2 7B68     	 ldr r3,[r7,#4]
 1449 01d4 9B8B     	 ldrh r3,[r3,#28]
 1450 01d6 9BB2     	 uxth r3,r3
 1451 01d8 002B     	 cmp r3,#0
 1452 01da 52D1     	 bne .L75
 366:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       {
 367:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 1453              	 .loc 2 367 0
 1454 01dc 7B68     	 ldr r3,[r7,#4]
 1455 01de 9B78     	 ldrb r3,[r3,#2]
 1456 01e0 03F07003 	 and r3,r3,#112
 1457 01e4 DBB2     	 uxtb r3,r3
 1458 01e6 202B     	 cmp r3,#32
 1459 01e8 06D0     	 beq .L76
 368:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1460              	 .loc 2 368 0 discriminator 1
 1461 01ea 7B68     	 ldr r3,[r7,#4]
 1462 01ec 9B78     	 ldrb r3,[r3,#2]
 1463 01ee 03F07003 	 and r3,r3,#112
 1464 01f2 DBB2     	 uxtb r3,r3
 367:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****             (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 1465              	 .loc 2 367 0 discriminator 1
 1466 01f4 302B     	 cmp r3,#48
 1467 01f6 44D1     	 bne .L75
 1468              	.L76:
 369:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         {
 370:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 371:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           if (dma == XMC_DMA0)
 1469              	 .loc 2 371 0
 1470 01f8 FB68     	 ldr r3,[r7,#12]
 1471 01fa 5E4A     	 ldr r2,.L95
 1472 01fc 9342     	 cmp r3,r2
 1473 01fe 05D1     	 bne .L77
 372:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           {
 373:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 374:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 1474              	 .loc 2 374 0
 1475 0200 7B68     	 ldr r3,[r7,#4]
 1476 0202 9B7F     	 ldrb r3,[r3,#30]
 1477 0204 03F00703 	 and r3,r3,#7
 1478 0208 BB75     	 strb r3,[r7,#22]
 1479 020a 04E0     	 b .L78
 1480              	.L77:
 375:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 376:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           }
 377:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           else
 378:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           {
 379:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****             line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 1481              	 .loc 2 379 0
 1482 020c 7B68     	 ldr r3,[r7,#4]
 1483 020e 9B7F     	 ldrb r3,[r3,#30]
 1484 0210 03F00303 	 and r3,r3,#3
 1485 0214 BB75     	 strb r3,[r7,#22]
 1486              	.L78:
 380:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           }
 381:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 382:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 1487              	 .loc 2 382 0
 1488 0216 7B68     	 ldr r3,[r7,#4]
 1489 0218 9B7F     	 ldrb r3,[r3,#30]
 1490 021a 1B09     	 lsrs r3,r3,#4
 1491 021c 7B75     	 strb r3,[r7,#21]
 383:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 384:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 1492              	 .loc 2 384 0
 1493 021e FB7A     	 ldrb r3,[r7,#11]
 1494 0220 FA7A     	 ldrb r2,[r7,#11]
 1495 0222 F968     	 ldr r1,[r7,#12]
 1496 0224 5820     	 movs r0,#88
 1497 0226 00FB02F2 	 mul r2,r0,r2
 1498 022a 0A44     	 add r2,r2,r1
 1499 022c 4032     	 adds r2,r2,#64
 1500 022e 5168     	 ldr r1,[r2,#4]
 1501 0230 BA7D     	 ldrb r2,[r7,#22]
 1502 0232 D201     	 lsls r2,r2,#7
 1503 0234 0A43     	 orrs r2,r2,r1
 1504 0236 F968     	 ldr r1,[r7,#12]
 1505 0238 5820     	 movs r0,#88
 1506 023a 00FB03F3 	 mul r3,r0,r3
 1507 023e 0B44     	 add r3,r3,r1
 1508 0240 4033     	 adds r3,r3,#64
 1509 0242 5968     	 ldr r1,[r3,#4]
 1510 0244 0021     	 movs r1,#0
 1511 0246 0A43     	 orrs r2,r2,r1
 1512 0248 5A60     	 str r2,[r3,#4]
 385:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           XMC_DMA_EnableRequestLine(dma, line, peripheral);
 1513              	 .loc 2 385 0
 1514 024a BA7D     	 ldrb r2,[r7,#22]
 1515 024c 7B7D     	 ldrb r3,[r7,#21]
 1516 024e F868     	 ldr r0,[r7,#12]
 1517 0250 1146     	 mov r1,r2
 1518 0252 1A46     	 mov r2,r3
 1519 0254 FFF7FEFF 	 bl XMC_DMA_EnableRequestLine
 386:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 1520              	 .loc 2 386 0
 1521 0258 FB7A     	 ldrb r3,[r7,#11]
 1522 025a FA7A     	 ldrb r2,[r7,#11]
 1523 025c F968     	 ldr r1,[r7,#12]
 1524 025e 5820     	 movs r0,#88
 1525 0260 00FB02F2 	 mul r2,r0,r2
 1526 0264 0A44     	 add r2,r2,r1
 1527 0266 4032     	 adds r2,r2,#64
 1528 0268 1268     	 ldr r2,[r2]
 1529 026a 22F40062 	 bic r2,r2,#2048
 1530 026e F968     	 ldr r1,[r7,#12]
 1531 0270 5820     	 movs r0,#88
 1532 0272 00FB03F3 	 mul r3,r0,r3
 1533 0276 0B44     	 add r3,r3,r1
 1534 0278 4033     	 adds r3,r3,#64
 1535 027a 1968     	 ldr r1,[r3]
 1536 027c 0021     	 movs r1,#0
 1537 027e 0A43     	 orrs r2,r2,r1
 1538 0280 1A60     	 str r2,[r3]
 1539              	.L75:
 387:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         }
 388:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       }
 389:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       
 390:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMP
 1540              	 .loc 2 390 0
 1541 0282 FB7A     	 ldrb r3,[r7,#11]
 1542 0284 F868     	 ldr r0,[r7,#12]
 1543 0286 1946     	 mov r1,r3
 1544 0288 1F22     	 movs r2,#31
 1545 028a FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 391:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFE
 392:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 393:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 394:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                                            (uint32_t)XMC_DMA_CH_EVENT_ERROR));
 395:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 396:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       switch (config->transfer_type)
 1546              	 .loc 2 396 0
 1547 028e 7B68     	 ldr r3,[r7,#4]
 1548 0290 9B7E     	 ldrb r3,[r3,#26]
 1549 0292 082B     	 cmp r3,#8
 1550 0294 00F2F280 	 bhi .L94
 1551 0298 01A2     	 adr r2,.L81
 1552 029a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1553 029e 00BF     	 .p2align 2
 1554              	.L81:
 1555 02a0 7D040000 	 .word .L94+1
 1556 02a4 C5020000 	 .word .L82+1
 1557 02a8 F1020000 	 .word .L83+1
 1558 02ac 1D030000 	 .word .L84+1
 1559 02b0 49030000 	 .word .L85+1
 1560 02b4 79030000 	 .word .L86+1
 1561 02b8 CF030000 	 .word .L87+1
 1562 02bc FB030000 	 .word .L88+1
 1563 02c0 51040000 	 .word .L89+1
 1564              	 .p2align 1
 1565              	.L82:
 397:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       {
 398:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
 399:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 400:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 401:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
 402:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1566              	 .loc 2 402 0
 1567 02c4 FB7A     	 ldrb r3,[r7,#11]
 1568 02c6 FA7A     	 ldrb r2,[r7,#11]
 1569 02c8 F968     	 ldr r1,[r7,#12]
 1570 02ca 5820     	 movs r0,#88
 1571 02cc 00FB02F2 	 mul r2,r0,r2
 1572 02d0 0A44     	 add r2,r2,r1
 1573 02d2 4032     	 adds r2,r2,#64
 1574 02d4 1268     	 ldr r2,[r2]
 1575 02d6 42F00042 	 orr r2,r2,#-2147483648
 1576 02da F968     	 ldr r1,[r7,#12]
 1577 02dc 5820     	 movs r0,#88
 1578 02de 00FB03F3 	 mul r3,r0,r3
 1579 02e2 0B44     	 add r3,r3,r1
 1580 02e4 4033     	 adds r3,r3,#64
 1581 02e6 1968     	 ldr r1,[r3]
 1582 02e8 0021     	 movs r1,#0
 1583 02ea 0A43     	 orrs r2,r2,r1
 1584 02ec 1A60     	 str r2,[r3]
 403:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 1585              	 .loc 2 403 0
 1586 02ee C6E0     	 b .L90
 1587              	.L83:
 404:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 405:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
 406:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1588              	 .loc 2 406 0
 1589 02f0 FB7A     	 ldrb r3,[r7,#11]
 1590 02f2 FA7A     	 ldrb r2,[r7,#11]
 1591 02f4 F968     	 ldr r1,[r7,#12]
 1592 02f6 5820     	 movs r0,#88
 1593 02f8 00FB02F2 	 mul r2,r0,r2
 1594 02fc 0A44     	 add r2,r2,r1
 1595 02fe 4032     	 adds r2,r2,#64
 1596 0300 1268     	 ldr r2,[r2]
 1597 0302 42F08042 	 orr r2,r2,#1073741824
 1598 0306 F968     	 ldr r1,[r7,#12]
 1599 0308 5820     	 movs r0,#88
 1600 030a 00FB03F3 	 mul r3,r0,r3
 1601 030e 0B44     	 add r3,r3,r1
 1602 0310 4033     	 adds r3,r3,#64
 1603 0312 1968     	 ldr r1,[r3]
 1604 0314 0021     	 movs r1,#0
 1605 0316 0A43     	 orrs r2,r2,r1
 1606 0318 1A60     	 str r2,[r3]
 407:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 1607              	 .loc 2 407 0
 1608 031a B0E0     	 b .L90
 1609              	.L84:
 408:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 409:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
 410:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 1610              	 .loc 2 410 0
 1611 031c FB7A     	 ldrb r3,[r7,#11]
 1612 031e FA7A     	 ldrb r2,[r7,#11]
 1613 0320 F968     	 ldr r1,[r7,#12]
 1614 0322 5820     	 movs r0,#88
 1615 0324 00FB02F2 	 mul r2,r0,r2
 1616 0328 0A44     	 add r2,r2,r1
 1617 032a 4032     	 adds r2,r2,#64
 1618 032c 1268     	 ldr r2,[r2]
 1619 032e 42F04042 	 orr r2,r2,#-1073741824
 1620 0332 F968     	 ldr r1,[r7,#12]
 1621 0334 5820     	 movs r0,#88
 1622 0336 00FB03F3 	 mul r3,r0,r3
 1623 033a 0B44     	 add r3,r3,r1
 1624 033c 4033     	 adds r3,r3,#64
 1625 033e 1968     	 ldr r1,[r3]
 1626 0340 0021     	 movs r1,#0
 1627 0342 0A43     	 orrs r2,r2,r1
 1628 0344 1A60     	 str r2,[r3]
 411:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
 412:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 1629              	 .loc 2 412 0
 1630 0346 9AE0     	 b .L90
 1631              	.L85:
 413:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 414:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
 415:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1632              	 .loc 2 415 0
 1633 0348 FB7A     	 ldrb r3,[r7,#11]
 1634 034a FA7A     	 ldrb r2,[r7,#11]
 1635 034c F968     	 ldr r1,[r7,#12]
 1636 034e 5820     	 movs r0,#88
 1637 0350 00FB02F2 	 mul r2,r0,r2
 1638 0354 0A44     	 add r2,r2,r1
 1639 0356 1832     	 adds r2,r2,#24
 1640 0358 1268     	 ldr r2,[r2]
 1641 035a 42F00062 	 orr r2,r2,#134217728
 1642 035e F968     	 ldr r1,[r7,#12]
 1643 0360 5820     	 movs r0,#88
 1644 0362 00FB03F3 	 mul r3,r0,r3
 1645 0366 0B44     	 add r3,r3,r1
 1646 0368 1833     	 adds r3,r3,#24
 1647 036a 1968     	 ldr r1,[r3]
 1648 036c 0021     	 movs r1,#0
 1649 036e 0A43     	 orrs r2,r2,r1
 1650 0370 1A60     	 str r2,[r3]
 416:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 1651              	 .loc 2 416 0
 1652 0372 84E0     	 b .L90
 1653              	.L96:
 1654              	 .align 2
 1655              	.L95:
 1656 0374 00400150 	 .word 1342259200
 1657              	.L86:
 417:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 418:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
 419:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 1658              	 .loc 2 419 0
 1659 0378 FB7A     	 ldrb r3,[r7,#11]
 1660 037a FA7A     	 ldrb r2,[r7,#11]
 1661 037c F968     	 ldr r1,[r7,#12]
 1662 037e 5820     	 movs r0,#88
 1663 0380 00FB02F2 	 mul r2,r0,r2
 1664 0384 0A44     	 add r2,r2,r1
 1665 0386 4032     	 adds r2,r2,#64
 1666 0388 1268     	 ldr r2,[r2]
 1667 038a 42F08042 	 orr r2,r2,#1073741824
 1668 038e F968     	 ldr r1,[r7,#12]
 1669 0390 5820     	 movs r0,#88
 1670 0392 00FB03F3 	 mul r3,r0,r3
 1671 0396 0B44     	 add r3,r3,r1
 1672 0398 4033     	 adds r3,r3,#64
 1673 039a 1968     	 ldr r1,[r3]
 1674 039c 0021     	 movs r1,#0
 1675 039e 0A43     	 orrs r2,r2,r1
 1676 03a0 1A60     	 str r2,[r3]
 420:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 1677              	 .loc 2 420 0
 1678 03a2 FB7A     	 ldrb r3,[r7,#11]
 1679 03a4 FA7A     	 ldrb r2,[r7,#11]
 1680 03a6 F968     	 ldr r1,[r7,#12]
 1681 03a8 5820     	 movs r0,#88
 1682 03aa 00FB02F2 	 mul r2,r0,r2
 1683 03ae 0A44     	 add r2,r2,r1
 1684 03b0 1832     	 adds r2,r2,#24
 1685 03b2 1268     	 ldr r2,[r2]
 1686 03b4 42F00062 	 orr r2,r2,#134217728
 1687 03b8 F968     	 ldr r1,[r7,#12]
 1688 03ba 5820     	 movs r0,#88
 1689 03bc 00FB03F3 	 mul r3,r0,r3
 1690 03c0 0B44     	 add r3,r3,r1
 1691 03c2 1833     	 adds r3,r3,#24
 1692 03c4 1968     	 ldr r1,[r3]
 1693 03c6 0021     	 movs r1,#0
 1694 03c8 0A43     	 orrs r2,r2,r1
 1695 03ca 1A60     	 str r2,[r3]
 421:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 1696              	 .loc 2 421 0
 1697 03cc 57E0     	 b .L90
 1698              	.L87:
 422:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 423:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
 424:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1699              	 .loc 2 424 0
 1700 03ce FB7A     	 ldrb r3,[r7,#11]
 1701 03d0 FA7A     	 ldrb r2,[r7,#11]
 1702 03d2 F968     	 ldr r1,[r7,#12]
 1703 03d4 5820     	 movs r0,#88
 1704 03d6 00FB02F2 	 mul r2,r0,r2
 1705 03da 0A44     	 add r2,r2,r1
 1706 03dc 1832     	 adds r2,r2,#24
 1707 03de 1268     	 ldr r2,[r2]
 1708 03e0 42F08052 	 orr r2,r2,#268435456
 1709 03e4 F968     	 ldr r1,[r7,#12]
 1710 03e6 5820     	 movs r0,#88
 1711 03e8 00FB03F3 	 mul r3,r0,r3
 1712 03ec 0B44     	 add r3,r3,r1
 1713 03ee 1833     	 adds r3,r3,#24
 1714 03f0 1968     	 ldr r1,[r3]
 1715 03f2 0021     	 movs r1,#0
 1716 03f4 0A43     	 orrs r2,r2,r1
 1717 03f6 1A60     	 str r2,[r3]
 425:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 1718              	 .loc 2 425 0
 1719 03f8 41E0     	 b .L90
 1720              	.L88:
 426:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 427:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
 428:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 1721              	 .loc 2 428 0
 1722 03fa FB7A     	 ldrb r3,[r7,#11]
 1723 03fc FA7A     	 ldrb r2,[r7,#11]
 1724 03fe F968     	 ldr r1,[r7,#12]
 1725 0400 5820     	 movs r0,#88
 1726 0402 00FB02F2 	 mul r2,r0,r2
 1727 0406 0A44     	 add r2,r2,r1
 1728 0408 4032     	 adds r2,r2,#64
 1729 040a 1268     	 ldr r2,[r2]
 1730 040c 42F00042 	 orr r2,r2,#-2147483648
 1731 0410 F968     	 ldr r1,[r7,#12]
 1732 0412 5820     	 movs r0,#88
 1733 0414 00FB03F3 	 mul r3,r0,r3
 1734 0418 0B44     	 add r3,r3,r1
 1735 041a 4033     	 adds r3,r3,#64
 1736 041c 1968     	 ldr r1,[r3]
 1737 041e 0021     	 movs r1,#0
 1738 0420 0A43     	 orrs r2,r2,r1
 1739 0422 1A60     	 str r2,[r3]
 429:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 1740              	 .loc 2 429 0
 1741 0424 FB7A     	 ldrb r3,[r7,#11]
 1742 0426 FA7A     	 ldrb r2,[r7,#11]
 1743 0428 F968     	 ldr r1,[r7,#12]
 1744 042a 5820     	 movs r0,#88
 1745 042c 00FB02F2 	 mul r2,r0,r2
 1746 0430 0A44     	 add r2,r2,r1
 1747 0432 1832     	 adds r2,r2,#24
 1748 0434 1268     	 ldr r2,[r2]
 1749 0436 42F08052 	 orr r2,r2,#268435456
 1750 043a F968     	 ldr r1,[r7,#12]
 1751 043c 5820     	 movs r0,#88
 1752 043e 00FB03F3 	 mul r3,r0,r3
 1753 0442 0B44     	 add r3,r3,r1
 1754 0444 1833     	 adds r3,r3,#24
 1755 0446 1968     	 ldr r1,[r3]
 1756 0448 0021     	 movs r1,#0
 1757 044a 0A43     	 orrs r2,r2,r1
 1758 044c 1A60     	 str r2,[r3]
 430:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 1759              	 .loc 2 430 0
 1760 044e 16E0     	 b .L90
 1761              	.L89:
 431:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 432:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
 433:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 1762              	 .loc 2 433 0
 1763 0450 FB7A     	 ldrb r3,[r7,#11]
 1764 0452 FA7A     	 ldrb r2,[r7,#11]
 1765 0454 F968     	 ldr r1,[r7,#12]
 1766 0456 5820     	 movs r0,#88
 1767 0458 00FB02F2 	 mul r2,r0,r2
 1768 045c 0A44     	 add r2,r2,r1
 1769 045e 1832     	 adds r2,r2,#24
 1770 0460 1268     	 ldr r2,[r2]
 1771 0462 42F0C052 	 orr r2,r2,#402653184
 1772 0466 F968     	 ldr r1,[r7,#12]
 1773 0468 5820     	 movs r0,#88
 1774 046a 00FB03F3 	 mul r3,r0,r3
 1775 046e 0B44     	 add r3,r3,r1
 1776 0470 1833     	 adds r3,r3,#24
 1777 0472 1968     	 ldr r1,[r3]
 1778 0474 0021     	 movs r1,#0
 1779 0476 0A43     	 orrs r2,r2,r1
 1780 0478 1A60     	 str r2,[r3]
 434:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                               (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
 435:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 1781              	 .loc 2 435 0
 1782 047a 00E0     	 b .L90
 1783              	.L94:
 436:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 437:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         default:
 438:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           break;
 1784              	 .loc 2 438 0
 1785 047c 00BF     	 nop
 1786              	.L90:
 439:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       }
 440:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 441:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_OK;
 1787              	 .loc 2 441 0
 1788 047e 0023     	 movs r3,#0
 1789 0480 FB75     	 strb r3,[r7,#23]
 1790 0482 04E0     	 b .L92
 1791              	.L69:
 442:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 443:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 444:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     else
 445:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 446:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       status = XMC_DMA_CH_STATUS_BUSY;
 1792              	 .loc 2 446 0
 1793 0484 0223     	 movs r3,#2
 1794 0486 FB75     	 strb r3,[r7,#23]
 1795 0488 01E0     	 b .L92
 1796              	.L68:
 447:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 448:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 449:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else 
 450:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 451:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     status = XMC_DMA_CH_STATUS_ERROR;
 1797              	 .loc 2 451 0
 1798 048a 0123     	 movs r3,#1
 1799 048c FB75     	 strb r3,[r7,#23]
 1800              	.L92:
 452:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 453:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   
 454:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   return status;
 1801              	 .loc 2 454 0
 1802 048e FB7D     	 ldrb r3,[r7,#23]
 455:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 1803              	 .loc 2 455 0
 1804 0490 1846     	 mov r0,r3
 1805 0492 1837     	 adds r7,r7,#24
 1806              	.LCFI101:
 1807              	 .cfi_def_cfa_offset 8
 1808 0494 BD46     	 mov sp,r7
 1809              	.LCFI102:
 1810              	 .cfi_def_cfa_register 13
 1811              	 
 1812 0496 80BD     	 pop {r7,pc}
 1813              	 .cfi_endproc
 1814              	.LFE194:
 1816              	 .section .text.XMC_DMA_CH_Suspend,"ax",%progbits
 1817              	 .align 2
 1818              	 .global XMC_DMA_CH_Suspend
 1819              	 .thumb
 1820              	 .thumb_func
 1822              	XMC_DMA_CH_Suspend:
 1823              	.LFB195:
 456:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 457:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Suspend DMA channel transfer */
 458:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Suspend(XMC_DMA_t *const dma, const uint8_t channel)
 459:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 1824              	 .loc 2 459 0
 1825              	 .cfi_startproc
 1826              	 
 1827              	 
 1828              	 
 1829 0000 80B4     	 push {r7}
 1830              	.LCFI103:
 1831              	 .cfi_def_cfa_offset 4
 1832              	 .cfi_offset 7,-4
 1833 0002 83B0     	 sub sp,sp,#12
 1834              	.LCFI104:
 1835              	 .cfi_def_cfa_offset 16
 1836 0004 00AF     	 add r7,sp,#0
 1837              	.LCFI105:
 1838              	 .cfi_def_cfa_register 7
 1839 0006 7860     	 str r0,[r7,#4]
 1840 0008 0B46     	 mov r3,r1
 1841 000a FB70     	 strb r3,[r7,#3]
 460:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1842              	 .loc 2 460 0
 1843 000c FB78     	 ldrb r3,[r7,#3]
 1844 000e FA78     	 ldrb r2,[r7,#3]
 1845 0010 7968     	 ldr r1,[r7,#4]
 1846 0012 5820     	 movs r0,#88
 1847 0014 00FB02F2 	 mul r2,r0,r2
 1848 0018 0A44     	 add r2,r2,r1
 1849 001a 4032     	 adds r2,r2,#64
 1850 001c 1268     	 ldr r2,[r2]
 1851 001e 42F48072 	 orr r2,r2,#256
 1852 0022 7968     	 ldr r1,[r7,#4]
 1853 0024 5820     	 movs r0,#88
 1854 0026 00FB03F3 	 mul r3,r0,r3
 1855 002a 0B44     	 add r3,r3,r1
 1856 002c 4033     	 adds r3,r3,#64
 1857 002e 1968     	 ldr r1,[r3]
 1858 0030 0021     	 movs r1,#0
 1859 0032 0A43     	 orrs r2,r2,r1
 1860 0034 1A60     	 str r2,[r3]
 461:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 1861              	 .loc 2 461 0
 1862 0036 0C37     	 adds r7,r7,#12
 1863              	.LCFI106:
 1864              	 .cfi_def_cfa_offset 4
 1865 0038 BD46     	 mov sp,r7
 1866              	.LCFI107:
 1867              	 .cfi_def_cfa_register 13
 1868              	 
 1869 003a 5DF8047B 	 ldr r7,[sp],#4
 1870              	.LCFI108:
 1871              	 .cfi_restore 7
 1872              	 .cfi_def_cfa_offset 0
 1873 003e 7047     	 bx lr
 1874              	 .cfi_endproc
 1875              	.LFE195:
 1877              	 .section .text.XMC_DMA_CH_Resume,"ax",%progbits
 1878              	 .align 2
 1879              	 .global XMC_DMA_CH_Resume
 1880              	 .thumb
 1881              	 .thumb_func
 1883              	XMC_DMA_CH_Resume:
 1884              	.LFB196:
 462:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 463:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Resume DMA channel transfer */
 464:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_Resume(XMC_DMA_t *const dma, const uint8_t channel)
 465:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 1885              	 .loc 2 465 0
 1886              	 .cfi_startproc
 1887              	 
 1888              	 
 1889              	 
 1890 0000 80B4     	 push {r7}
 1891              	.LCFI109:
 1892              	 .cfi_def_cfa_offset 4
 1893              	 .cfi_offset 7,-4
 1894 0002 83B0     	 sub sp,sp,#12
 1895              	.LCFI110:
 1896              	 .cfi_def_cfa_offset 16
 1897 0004 00AF     	 add r7,sp,#0
 1898              	.LCFI111:
 1899              	 .cfi_def_cfa_register 7
 1900 0006 7860     	 str r0,[r7,#4]
 1901 0008 0B46     	 mov r3,r1
 1902 000a FB70     	 strb r3,[r7,#3]
 466:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_CH_SUSP_Msk;
 1903              	 .loc 2 466 0
 1904 000c FB78     	 ldrb r3,[r7,#3]
 1905 000e FA78     	 ldrb r2,[r7,#3]
 1906 0010 7968     	 ldr r1,[r7,#4]
 1907 0012 5820     	 movs r0,#88
 1908 0014 00FB02F2 	 mul r2,r0,r2
 1909 0018 0A44     	 add r2,r2,r1
 1910 001a 4032     	 adds r2,r2,#64
 1911 001c 1268     	 ldr r2,[r2]
 1912 001e 22F48072 	 bic r2,r2,#256
 1913 0022 7968     	 ldr r1,[r7,#4]
 1914 0024 5820     	 movs r0,#88
 1915 0026 00FB03F3 	 mul r3,r0,r3
 1916 002a 0B44     	 add r3,r3,r1
 1917 002c 4033     	 adds r3,r3,#64
 1918 002e 1968     	 ldr r1,[r3]
 1919 0030 0021     	 movs r1,#0
 1920 0032 0A43     	 orrs r2,r2,r1
 1921 0034 1A60     	 str r2,[r3]
 467:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 1922              	 .loc 2 467 0
 1923 0036 0C37     	 adds r7,r7,#12
 1924              	.LCFI112:
 1925              	 .cfi_def_cfa_offset 4
 1926 0038 BD46     	 mov sp,r7
 1927              	.LCFI113:
 1928              	 .cfi_def_cfa_register 13
 1929              	 
 1930 003a 5DF8047B 	 ldr r7,[sp],#4
 1931              	.LCFI114:
 1932              	 .cfi_restore 7
 1933              	 .cfi_def_cfa_offset 0
 1934 003e 7047     	 bx lr
 1935              	 .cfi_endproc
 1936              	.LFE196:
 1938              	 .section .text.XMC_DMA_CH_IsSuspended,"ax",%progbits
 1939              	 .align 2
 1940              	 .global XMC_DMA_CH_IsSuspended
 1941              	 .thumb
 1942              	 .thumb_func
 1944              	XMC_DMA_CH_IsSuspended:
 1945              	.LFB197:
 468:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 469:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Check if a DMA channel is suspended */
 470:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** bool XMC_DMA_CH_IsSuspended(XMC_DMA_t *const dma, const uint8_t channel)
 471:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 1946              	 .loc 2 471 0
 1947              	 .cfi_startproc
 1948              	 
 1949              	 
 1950              	 
 1951 0000 80B4     	 push {r7}
 1952              	.LCFI115:
 1953              	 .cfi_def_cfa_offset 4
 1954              	 .cfi_offset 7,-4
 1955 0002 83B0     	 sub sp,sp,#12
 1956              	.LCFI116:
 1957              	 .cfi_def_cfa_offset 16
 1958 0004 00AF     	 add r7,sp,#0
 1959              	.LCFI117:
 1960              	 .cfi_def_cfa_register 7
 1961 0006 7860     	 str r0,[r7,#4]
 1962 0008 0B46     	 mov r3,r1
 1963 000a FB70     	 strb r3,[r7,#3]
 472:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
 1964              	 .loc 2 472 0
 1965 000c FB78     	 ldrb r3,[r7,#3]
 1966 000e 7A68     	 ldr r2,[r7,#4]
 1967 0010 5821     	 movs r1,#88
 1968 0012 01FB03F3 	 mul r3,r1,r3
 1969 0016 1344     	 add r3,r3,r2
 1970 0018 4033     	 adds r3,r3,#64
 1971 001a 1B68     	 ldr r3,[r3]
 1972 001c 03F48073 	 and r3,r3,#256
 1973 0020 002B     	 cmp r3,#0
 1974 0022 14BF     	 ite ne
 1975 0024 0123     	 movne r3,#1
 1976 0026 0023     	 moveq r3,#0
 1977 0028 DBB2     	 uxtb r3,r3
 473:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 1978              	 .loc 2 473 0
 1979 002a 1846     	 mov r0,r3
 1980 002c 0C37     	 adds r7,r7,#12
 1981              	.LCFI118:
 1982              	 .cfi_def_cfa_offset 4
 1983 002e BD46     	 mov sp,r7
 1984              	.LCFI119:
 1985              	 .cfi_def_cfa_register 13
 1986              	 
 1987 0030 5DF8047B 	 ldr r7,[sp],#4
 1988              	.LCFI120:
 1989              	 .cfi_restore 7
 1990              	 .cfi_def_cfa_offset 0
 1991 0034 7047     	 bx lr
 1992              	 .cfi_endproc
 1993              	.LFE197:
 1995 0036 00BF     	 .section .text.XMC_DMA_CH_EnableEvent,"ax",%progbits
 1996              	 .align 2
 1997              	 .global XMC_DMA_CH_EnableEvent
 1998              	 .thumb
 1999              	 .thumb_func
 2001              	XMC_DMA_CH_EnableEvent:
 2002              	.LFB198:
 474:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 475:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Enable GPDMA event */
 476:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 477:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2003              	 .loc 2 477 0
 2004              	 .cfi_startproc
 2005              	 
 2006              	 
 2007              	 
 2008 0000 80B4     	 push {r7}
 2009              	.LCFI121:
 2010              	 .cfi_def_cfa_offset 4
 2011              	 .cfi_offset 7,-4
 2012 0002 87B0     	 sub sp,sp,#28
 2013              	.LCFI122:
 2014              	 .cfi_def_cfa_offset 32
 2015 0004 00AF     	 add r7,sp,#0
 2016              	.LCFI123:
 2017              	 .cfi_def_cfa_register 7
 2018 0006 F860     	 str r0,[r7,#12]
 2019 0008 0B46     	 mov r3,r1
 2020 000a 7A60     	 str r2,[r7,#4]
 2021 000c FB72     	 strb r3,[r7,#11]
 478:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 479:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 480:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2022              	 .loc 2 480 0
 2023 000e 0023     	 movs r3,#0
 2024 0010 7B61     	 str r3,[r7,#20]
 2025 0012 18E0     	 b .L102
 2026              	.L104:
 481:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 482:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 2027              	 .loc 2 482 0
 2028 0014 7B69     	 ldr r3,[r7,#20]
 2029 0016 7A68     	 ldr r2,[r7,#4]
 2030 0018 22FA03F3 	 lsr r3,r2,r3
 2031 001c 03F00103 	 and r3,r3,#1
 2032 0020 002B     	 cmp r3,#0
 2033 0022 0DD0     	 beq .L103
 483:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 484:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 2034              	 .loc 2 484 0
 2035 0024 7B69     	 ldr r3,[r7,#20]
 2036 0026 5A00     	 lsls r2,r3,#1
 2037 0028 FB7A     	 ldrb r3,[r7,#11]
 2038 002a 40F20111 	 movw r1,#257
 2039 002e 9940     	 lsls r1,r1,r3
 2040 0030 FB68     	 ldr r3,[r7,#12]
 2041 0032 C432     	 adds r2,r2,#196
 2042 0034 53F82200 	 ldr r0,[r3,r2,lsl#2]
 2043 0038 0020     	 movs r0,#0
 2044 003a 0143     	 orrs r1,r1,r0
 2045 003c 43F82210 	 str r1,[r3,r2,lsl#2]
 2046              	.L103:
 480:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 2047              	 .loc 2 480 0 discriminator 2
 2048 0040 7B69     	 ldr r3,[r7,#20]
 2049 0042 0133     	 adds r3,r3,#1
 2050 0044 7B61     	 str r3,[r7,#20]
 2051              	.L102:
 480:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 2052              	 .loc 2 480 0 is_stmt 0 discriminator 1
 2053 0046 7B69     	 ldr r3,[r7,#20]
 2054 0048 042B     	 cmp r3,#4
 2055 004a E3D9     	 bls .L104
 485:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 486:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 487:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2056              	 .loc 2 487 0 is_stmt 1
 2057 004c 1C37     	 adds r7,r7,#28
 2058              	.LCFI124:
 2059              	 .cfi_def_cfa_offset 4
 2060 004e BD46     	 mov sp,r7
 2061              	.LCFI125:
 2062              	 .cfi_def_cfa_register 13
 2063              	 
 2064 0050 5DF8047B 	 ldr r7,[sp],#4
 2065              	.LCFI126:
 2066              	 .cfi_restore 7
 2067              	 .cfi_def_cfa_offset 0
 2068 0054 7047     	 bx lr
 2069              	 .cfi_endproc
 2070              	.LFE198:
 2072 0056 00BF     	 .section .text.XMC_DMA_CH_DisableEvent,"ax",%progbits
 2073              	 .align 2
 2074              	 .global XMC_DMA_CH_DisableEvent
 2075              	 .thumb
 2076              	 .thumb_func
 2078              	XMC_DMA_CH_DisableEvent:
 2079              	.LFB199:
 488:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 489:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Disable GPDMA event */
 490:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 491:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2080              	 .loc 2 491 0
 2081              	 .cfi_startproc
 2082              	 
 2083              	 
 2084              	 
 2085 0000 80B4     	 push {r7}
 2086              	.LCFI127:
 2087              	 .cfi_def_cfa_offset 4
 2088              	 .cfi_offset 7,-4
 2089 0002 87B0     	 sub sp,sp,#28
 2090              	.LCFI128:
 2091              	 .cfi_def_cfa_offset 32
 2092 0004 00AF     	 add r7,sp,#0
 2093              	.LCFI129:
 2094              	 .cfi_def_cfa_register 7
 2095 0006 F860     	 str r0,[r7,#12]
 2096 0008 0B46     	 mov r3,r1
 2097 000a 7A60     	 str r2,[r7,#4]
 2098 000c FB72     	 strb r3,[r7,#11]
 492:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 493:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 494:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2099              	 .loc 2 494 0
 2100 000e 0023     	 movs r3,#0
 2101 0010 7B61     	 str r3,[r7,#20]
 2102 0012 18E0     	 b .L106
 2103              	.L108:
 495:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 496:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     if (event & ((uint32_t)0x1UL << event_idx))
 2104              	 .loc 2 496 0
 2105 0014 7B69     	 ldr r3,[r7,#20]
 2106 0016 7A68     	 ldr r2,[r7,#4]
 2107 0018 22FA03F3 	 lsr r3,r2,r3
 2108 001c 03F00103 	 and r3,r3,#1
 2109 0020 002B     	 cmp r3,#0
 2110 0022 0DD0     	 beq .L107
 497:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 498:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x100UL << channel);
 2111              	 .loc 2 498 0
 2112 0024 7B69     	 ldr r3,[r7,#20]
 2113 0026 5A00     	 lsls r2,r3,#1
 2114 0028 FB7A     	 ldrb r3,[r7,#11]
 2115 002a 4FF48071 	 mov r1,#256
 2116 002e 9940     	 lsls r1,r1,r3
 2117 0030 FB68     	 ldr r3,[r7,#12]
 2118 0032 C432     	 adds r2,r2,#196
 2119 0034 53F82200 	 ldr r0,[r3,r2,lsl#2]
 2120 0038 0020     	 movs r0,#0
 2121 003a 0143     	 orrs r1,r1,r0
 2122 003c 43F82210 	 str r1,[r3,r2,lsl#2]
 2123              	.L107:
 494:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 2124              	 .loc 2 494 0 discriminator 2
 2125 0040 7B69     	 ldr r3,[r7,#20]
 2126 0042 0133     	 adds r3,r3,#1
 2127 0044 7B61     	 str r3,[r7,#20]
 2128              	.L106:
 494:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 2129              	 .loc 2 494 0 is_stmt 0 discriminator 1
 2130 0046 7B69     	 ldr r3,[r7,#20]
 2131 0048 042B     	 cmp r3,#4
 2132 004a E3D9     	 bls .L108
 499:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 500:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 501:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2133              	 .loc 2 501 0 is_stmt 1
 2134 004c 1C37     	 adds r7,r7,#28
 2135              	.LCFI130:
 2136              	 .cfi_def_cfa_offset 4
 2137 004e BD46     	 mov sp,r7
 2138              	.LCFI131:
 2139              	 .cfi_def_cfa_register 13
 2140              	 
 2141 0050 5DF8047B 	 ldr r7,[sp],#4
 2142              	.LCFI132:
 2143              	 .cfi_restore 7
 2144              	 .cfi_def_cfa_offset 0
 2145 0054 7047     	 bx lr
 2146              	 .cfi_endproc
 2147              	.LFE199:
 2149 0056 00BF     	 .section .text.XMC_DMA_CH_ClearEventStatus,"ax",%progbits
 2150              	 .align 2
 2151              	 .global XMC_DMA_CH_ClearEventStatus
 2152              	 .thumb
 2153              	 .thumb_func
 2155              	XMC_DMA_CH_ClearEventStatus:
 2156              	.LFB200:
 502:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 503:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Clear GPDMA event */
 504:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
 505:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2157              	 .loc 2 505 0
 2158              	 .cfi_startproc
 2159              	 
 2160              	 
 2161              	 
 2162 0000 80B4     	 push {r7}
 2163              	.LCFI133:
 2164              	 .cfi_def_cfa_offset 4
 2165              	 .cfi_offset 7,-4
 2166 0002 87B0     	 sub sp,sp,#28
 2167              	.LCFI134:
 2168              	 .cfi_def_cfa_offset 32
 2169 0004 00AF     	 add r7,sp,#0
 2170              	.LCFI135:
 2171              	 .cfi_def_cfa_register 7
 2172 0006 F860     	 str r0,[r7,#12]
 2173 0008 0B46     	 mov r3,r1
 2174 000a 7A60     	 str r2,[r7,#4]
 2175 000c FB72     	 strb r3,[r7,#11]
 506:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 507:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 508:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2176              	 .loc 2 508 0
 2177 000e 0023     	 movs r3,#0
 2178 0010 7B61     	 str r3,[r7,#20]
 2179 0012 17E0     	 b .L110
 2180              	.L112:
 509:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 510:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 2181              	 .loc 2 510 0
 2182 0014 7B69     	 ldr r3,[r7,#20]
 2183 0016 7A68     	 ldr r2,[r7,#4]
 2184 0018 22FA03F3 	 lsr r3,r2,r3
 2185 001c 03F00103 	 and r3,r3,#1
 2186 0020 002B     	 cmp r3,#0
 2187 0022 0CD0     	 beq .L111
 511:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 512:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 2188              	 .loc 2 512 0
 2189 0024 7B69     	 ldr r3,[r7,#20]
 2190 0026 5A00     	 lsls r2,r3,#1
 2191 0028 FB7A     	 ldrb r3,[r7,#11]
 2192 002a 0121     	 movs r1,#1
 2193 002c 9940     	 lsls r1,r1,r3
 2194 002e FB68     	 ldr r3,[r7,#12]
 2195 0030 CE32     	 adds r2,r2,#206
 2196 0032 53F82200 	 ldr r0,[r3,r2,lsl#2]
 2197 0036 0020     	 movs r0,#0
 2198 0038 0143     	 orrs r1,r1,r0
 2199 003a 43F82210 	 str r1,[r3,r2,lsl#2]
 2200              	.L111:
 508:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 2201              	 .loc 2 508 0 discriminator 2
 2202 003e 7B69     	 ldr r3,[r7,#20]
 2203 0040 0133     	 adds r3,r3,#1
 2204 0042 7B61     	 str r3,[r7,#20]
 2205              	.L110:
 508:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 2206              	 .loc 2 508 0 is_stmt 0 discriminator 1
 2207 0044 7B69     	 ldr r3,[r7,#20]
 2208 0046 042B     	 cmp r3,#4
 2209 0048 E4D9     	 bls .L112
 513:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 514:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 515:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 516:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2210              	 .loc 2 516 0 is_stmt 1
 2211 004a 1C37     	 adds r7,r7,#28
 2212              	.LCFI136:
 2213              	 .cfi_def_cfa_offset 4
 2214 004c BD46     	 mov sp,r7
 2215              	.LCFI137:
 2216              	 .cfi_def_cfa_register 13
 2217              	 
 2218 004e 5DF8047B 	 ldr r7,[sp],#4
 2219              	.LCFI138:
 2220              	 .cfi_restore 7
 2221              	 .cfi_def_cfa_offset 0
 2222 0052 7047     	 bx lr
 2223              	 .cfi_endproc
 2224              	.LFE200:
 2226              	 .section .text.XMC_DMA_CH_GetEventStatus,"ax",%progbits
 2227              	 .align 2
 2228              	 .global XMC_DMA_CH_GetEventStatus
 2229              	 .thumb
 2230              	 .thumb_func
 2232              	XMC_DMA_CH_GetEventStatus:
 2233              	.LFB201:
 517:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 518:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Get GPDMA event status */
 519:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** uint32_t XMC_DMA_CH_GetEventStatus(XMC_DMA_t *const dma, const uint8_t channel)
 520:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2234              	 .loc 2 520 0
 2235              	 .cfi_startproc
 2236              	 
 2237              	 
 2238              	 
 2239 0000 80B4     	 push {r7}
 2240              	.LCFI139:
 2241              	 .cfi_def_cfa_offset 4
 2242              	 .cfi_offset 7,-4
 2243 0002 85B0     	 sub sp,sp,#20
 2244              	.LCFI140:
 2245              	 .cfi_def_cfa_offset 24
 2246 0004 00AF     	 add r7,sp,#0
 2247              	.LCFI141:
 2248              	 .cfi_def_cfa_register 7
 2249 0006 7860     	 str r0,[r7,#4]
 2250 0008 0B46     	 mov r3,r1
 2251 000a FB70     	 strb r3,[r7,#3]
 521:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint32_t event_idx;
 522:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint32_t status = 0UL;
 2252              	 .loc 2 522 0
 2253 000c 0023     	 movs r3,#0
 2254 000e BB60     	 str r3,[r7,#8]
 523:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 524:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 2255              	 .loc 2 524 0
 2256 0010 0023     	 movs r3,#0
 2257 0012 FB60     	 str r3,[r7,#12]
 2258 0014 18E0     	 b .L114
 2259              	.L117:
 525:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 526:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     status |= (uint32_t)((dma->STATUSCHEV[event_idx * 2UL] & (uint32_t)((uint32_t)0x1UL << (uint32_
 2260              	 .loc 2 526 0
 2261 0016 FB68     	 ldr r3,[r7,#12]
 2262 0018 5A00     	 lsls r2,r3,#1
 2263 001a 7B68     	 ldr r3,[r7,#4]
 2264 001c BA32     	 adds r2,r2,#186
 2265 001e 53F82220 	 ldr r2,[r3,r2,lsl#2]
 2266 0022 FB78     	 ldrb r3,[r7,#3]
 2267 0024 22FA03F3 	 lsr r3,r2,r3
 2268 0028 03F00103 	 and r3,r3,#1
 2269 002c 002B     	 cmp r3,#0
 2270 002e 04D0     	 beq .L115
 2271              	 .loc 2 526 0 is_stmt 0 discriminator 1
 2272 0030 FB68     	 ldr r3,[r7,#12]
 2273 0032 0122     	 movs r2,#1
 2274 0034 02FA03F3 	 lsl r3,r2,r3
 2275 0038 00E0     	 b .L116
 2276              	.L115:
 2277              	 .loc 2 526 0 discriminator 2
 2278 003a 0023     	 movs r3,#0
 2279              	.L116:
 2280              	 .loc 2 526 0 discriminator 4
 2281 003c BA68     	 ldr r2,[r7,#8]
 2282 003e 1343     	 orrs r3,r3,r2
 2283 0040 BB60     	 str r3,[r7,#8]
 524:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 2284              	 .loc 2 524 0 is_stmt 1 discriminator 4
 2285 0042 FB68     	 ldr r3,[r7,#12]
 2286 0044 0133     	 adds r3,r3,#1
 2287 0046 FB60     	 str r3,[r7,#12]
 2288              	.L114:
 524:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 2289              	 .loc 2 524 0 is_stmt 0 discriminator 2
 2290 0048 FB68     	 ldr r3,[r7,#12]
 2291 004a 042B     	 cmp r3,#4
 2292 004c E3D9     	 bls .L117
 527:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                          ((uint32_t)0x1UL << event_idx) : (uint32_t)0UL);
 528:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 529:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 530:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   return status;
 2293              	 .loc 2 530 0 is_stmt 1
 2294 004e BB68     	 ldr r3,[r7,#8]
 531:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2295              	 .loc 2 531 0
 2296 0050 1846     	 mov r0,r3
 2297 0052 1437     	 adds r7,r7,#20
 2298              	.LCFI142:
 2299              	 .cfi_def_cfa_offset 4
 2300 0054 BD46     	 mov sp,r7
 2301              	.LCFI143:
 2302              	 .cfi_def_cfa_register 13
 2303              	 
 2304 0056 5DF8047B 	 ldr r7,[sp],#4
 2305              	.LCFI144:
 2306              	 .cfi_restore 7
 2307              	 .cfi_def_cfa_offset 0
 2308 005a 7047     	 bx lr
 2309              	 .cfi_endproc
 2310              	.LFE201:
 2312              	 .section .text.XMC_DMA_CH_EnableSourceGather,"ax",%progbits
 2313              	 .align 2
 2314              	 .global XMC_DMA_CH_EnableSourceGather
 2315              	 .thumb
 2316              	 .thumb_func
 2318              	XMC_DMA_CH_EnableSourceGather:
 2319              	.LFB202:
 532:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 533:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Enable source gather */
 534:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceGather(XMC_DMA_t *const dma, const uint8_t channel, uint32_t interval, 
 535:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2320              	 .loc 2 535 0
 2321              	 .cfi_startproc
 2322              	 
 2323              	 
 2324              	 
 2325 0000 80B4     	 push {r7}
 2326              	.LCFI145:
 2327              	 .cfi_def_cfa_offset 4
 2328              	 .cfi_offset 7,-4
 2329 0002 85B0     	 sub sp,sp,#20
 2330              	.LCFI146:
 2331              	 .cfi_def_cfa_offset 24
 2332 0004 00AF     	 add r7,sp,#0
 2333              	.LCFI147:
 2334              	 .cfi_def_cfa_register 7
 2335 0006 F860     	 str r0,[r7,#12]
 2336 0008 7A60     	 str r2,[r7,#4]
 2337 000a 1A46     	 mov r2,r3
 2338 000c 0B46     	 mov r3,r1
 2339 000e FB72     	 strb r3,[r7,#11]
 2340 0010 1346     	 mov r3,r2
 2341 0012 3B81     	 strh r3,[r7,#8]
 536:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2342              	 .loc 2 536 0
 2343 0014 FB7A     	 ldrb r3,[r7,#11]
 2344 0016 FA7A     	 ldrb r2,[r7,#11]
 2345 0018 F968     	 ldr r1,[r7,#12]
 2346 001a 5820     	 movs r0,#88
 2347 001c 00FB02F2 	 mul r2,r0,r2
 2348 0020 0A44     	 add r2,r2,r1
 2349 0022 1832     	 adds r2,r2,#24
 2350 0024 1268     	 ldr r2,[r2]
 2351 0026 42F40032 	 orr r2,r2,#131072
 2352 002a F968     	 ldr r1,[r7,#12]
 2353 002c 5820     	 movs r0,#88
 2354 002e 00FB03F3 	 mul r3,r0,r3
 2355 0032 0B44     	 add r3,r3,r1
 2356 0034 1833     	 adds r3,r3,#24
 2357 0036 1968     	 ldr r1,[r3]
 2358 0038 0021     	 movs r1,#0
 2359 003a 0A43     	 orrs r2,r2,r1
 2360 003c 1A60     	 str r2,[r3]
 537:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].SGR = ((uint32_t)interval << GPDMA0_CH_SGR_SGI_Pos) | ((uint32_t)count << GPDMA0
 2361              	 .loc 2 537 0
 2362 003e FB7A     	 ldrb r3,[r7,#11]
 2363 0040 3A89     	 ldrh r2,[r7,#8]
 2364 0042 1105     	 lsls r1,r2,#20
 2365 0044 7A68     	 ldr r2,[r7,#4]
 2366 0046 0A43     	 orrs r2,r2,r1
 2367 0048 F968     	 ldr r1,[r7,#12]
 2368 004a 5820     	 movs r0,#88
 2369 004c 00FB03F3 	 mul r3,r0,r3
 2370 0050 0B44     	 add r3,r3,r1
 2371 0052 4833     	 adds r3,r3,#72
 2372 0054 1968     	 ldr r1,[r3]
 2373 0056 0021     	 movs r1,#0
 2374 0058 0A43     	 orrs r2,r2,r1
 2375 005a 1A60     	 str r2,[r3]
 538:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2376              	 .loc 2 538 0
 2377 005c 1437     	 adds r7,r7,#20
 2378              	.LCFI148:
 2379              	 .cfi_def_cfa_offset 4
 2380 005e BD46     	 mov sp,r7
 2381              	.LCFI149:
 2382              	 .cfi_def_cfa_register 13
 2383              	 
 2384 0060 5DF8047B 	 ldr r7,[sp],#4
 2385              	.LCFI150:
 2386              	 .cfi_restore 7
 2387              	 .cfi_def_cfa_offset 0
 2388 0064 7047     	 bx lr
 2389              	 .cfi_endproc
 2390              	.LFE202:
 2392 0066 00BF     	 .section .text.XMC_DMA_CH_DisableSourceGather,"ax",%progbits
 2393              	 .align 2
 2394              	 .global XMC_DMA_CH_DisableSourceGather
 2395              	 .thumb
 2396              	 .thumb_func
 2398              	XMC_DMA_CH_DisableSourceGather:
 2399              	.LFB203:
 539:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 540:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Disable source gather */
 541:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceGather(XMC_DMA_t *const dma, const uint8_t channel)
 542:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2400              	 .loc 2 542 0
 2401              	 .cfi_startproc
 2402              	 
 2403              	 
 2404              	 
 2405 0000 80B4     	 push {r7}
 2406              	.LCFI151:
 2407              	 .cfi_def_cfa_offset 4
 2408              	 .cfi_offset 7,-4
 2409 0002 83B0     	 sub sp,sp,#12
 2410              	.LCFI152:
 2411              	 .cfi_def_cfa_offset 16
 2412 0004 00AF     	 add r7,sp,#0
 2413              	.LCFI153:
 2414              	 .cfi_def_cfa_register 7
 2415 0006 7860     	 str r0,[r7,#4]
 2416 0008 0B46     	 mov r3,r1
 2417 000a FB70     	 strb r3,[r7,#3]
 543:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_SRC_GATHER_EN_Msk;
 2418              	 .loc 2 543 0
 2419 000c FB78     	 ldrb r3,[r7,#3]
 2420 000e FA78     	 ldrb r2,[r7,#3]
 2421 0010 7968     	 ldr r1,[r7,#4]
 2422 0012 5820     	 movs r0,#88
 2423 0014 00FB02F2 	 mul r2,r0,r2
 2424 0018 0A44     	 add r2,r2,r1
 2425 001a 1832     	 adds r2,r2,#24
 2426 001c 1268     	 ldr r2,[r2]
 2427 001e 22F40032 	 bic r2,r2,#131072
 2428 0022 7968     	 ldr r1,[r7,#4]
 2429 0024 5820     	 movs r0,#88
 2430 0026 00FB03F3 	 mul r3,r0,r3
 2431 002a 0B44     	 add r3,r3,r1
 2432 002c 1833     	 adds r3,r3,#24
 2433 002e 1968     	 ldr r1,[r3]
 2434 0030 0021     	 movs r1,#0
 2435 0032 0A43     	 orrs r2,r2,r1
 2436 0034 1A60     	 str r2,[r3]
 544:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2437              	 .loc 2 544 0
 2438 0036 0C37     	 adds r7,r7,#12
 2439              	.LCFI154:
 2440              	 .cfi_def_cfa_offset 4
 2441 0038 BD46     	 mov sp,r7
 2442              	.LCFI155:
 2443              	 .cfi_def_cfa_register 13
 2444              	 
 2445 003a 5DF8047B 	 ldr r7,[sp],#4
 2446              	.LCFI156:
 2447              	 .cfi_restore 7
 2448              	 .cfi_def_cfa_offset 0
 2449 003e 7047     	 bx lr
 2450              	 .cfi_endproc
 2451              	.LFE203:
 2453              	 .section .text.XMC_DMA_CH_EnableDestinationScatter,"ax",%progbits
 2454              	 .align 2
 2455              	 .global XMC_DMA_CH_EnableDestinationScatter
 2456              	 .thumb
 2457              	 .thumb_func
 2459              	XMC_DMA_CH_EnableDestinationScatter:
 2460              	.LFB204:
 545:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 546:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Enable destination scatter */
 547:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel, uint32_t inte
 548:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2461              	 .loc 2 548 0
 2462              	 .cfi_startproc
 2463              	 
 2464              	 
 2465              	 
 2466 0000 80B4     	 push {r7}
 2467              	.LCFI157:
 2468              	 .cfi_def_cfa_offset 4
 2469              	 .cfi_offset 7,-4
 2470 0002 85B0     	 sub sp,sp,#20
 2471              	.LCFI158:
 2472              	 .cfi_def_cfa_offset 24
 2473 0004 00AF     	 add r7,sp,#0
 2474              	.LCFI159:
 2475              	 .cfi_def_cfa_register 7
 2476 0006 F860     	 str r0,[r7,#12]
 2477 0008 7A60     	 str r2,[r7,#4]
 2478 000a 1A46     	 mov r2,r3
 2479 000c 0B46     	 mov r3,r1
 2480 000e FB72     	 strb r3,[r7,#11]
 2481 0010 1346     	 mov r3,r2
 2482 0012 3B81     	 strh r3,[r7,#8]
 549:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2483              	 .loc 2 549 0
 2484 0014 FB7A     	 ldrb r3,[r7,#11]
 2485 0016 FA7A     	 ldrb r2,[r7,#11]
 2486 0018 F968     	 ldr r1,[r7,#12]
 2487 001a 5820     	 movs r0,#88
 2488 001c 00FB02F2 	 mul r2,r0,r2
 2489 0020 0A44     	 add r2,r2,r1
 2490 0022 1832     	 adds r2,r2,#24
 2491 0024 1268     	 ldr r2,[r2]
 2492 0026 42F48022 	 orr r2,r2,#262144
 2493 002a F968     	 ldr r1,[r7,#12]
 2494 002c 5820     	 movs r0,#88
 2495 002e 00FB03F3 	 mul r3,r0,r3
 2496 0032 0B44     	 add r3,r3,r1
 2497 0034 1833     	 adds r3,r3,#24
 2498 0036 1968     	 ldr r1,[r3]
 2499 0038 0021     	 movs r1,#0
 2500 003a 0A43     	 orrs r2,r2,r1
 2501 003c 1A60     	 str r2,[r3]
 550:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].DSR = ((uint32_t)interval << GPDMA0_CH_DSR_DSI_Pos) | ((uint32_t)count << GPDMA0
 2502              	 .loc 2 550 0
 2503 003e FB7A     	 ldrb r3,[r7,#11]
 2504 0040 3A89     	 ldrh r2,[r7,#8]
 2505 0042 1105     	 lsls r1,r2,#20
 2506 0044 7A68     	 ldr r2,[r7,#4]
 2507 0046 0A43     	 orrs r2,r2,r1
 2508 0048 F968     	 ldr r1,[r7,#12]
 2509 004a 5820     	 movs r0,#88
 2510 004c 00FB03F3 	 mul r3,r0,r3
 2511 0050 0B44     	 add r3,r3,r1
 2512 0052 5033     	 adds r3,r3,#80
 2513 0054 1968     	 ldr r1,[r3]
 2514 0056 0021     	 movs r1,#0
 2515 0058 0A43     	 orrs r2,r2,r1
 2516 005a 1A60     	 str r2,[r3]
 551:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2517              	 .loc 2 551 0
 2518 005c 1437     	 adds r7,r7,#20
 2519              	.LCFI160:
 2520              	 .cfi_def_cfa_offset 4
 2521 005e BD46     	 mov sp,r7
 2522              	.LCFI161:
 2523              	 .cfi_def_cfa_register 13
 2524              	 
 2525 0060 5DF8047B 	 ldr r7,[sp],#4
 2526              	.LCFI162:
 2527              	 .cfi_restore 7
 2528              	 .cfi_def_cfa_offset 0
 2529 0064 7047     	 bx lr
 2530              	 .cfi_endproc
 2531              	.LFE204:
 2533 0066 00BF     	 .section .text.XMC_DMA_CH_DisableDestinationScatter,"ax",%progbits
 2534              	 .align 2
 2535              	 .global XMC_DMA_CH_DisableDestinationScatter
 2536              	 .thumb
 2537              	 .thumb_func
 2539              	XMC_DMA_CH_DisableDestinationScatter:
 2540              	.LFB205:
 552:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 553:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Disable destination scatter */
 554:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationScatter(XMC_DMA_t *const dma, const uint8_t channel)
 555:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2541              	 .loc 2 555 0
 2542              	 .cfi_startproc
 2543              	 
 2544              	 
 2545              	 
 2546 0000 80B4     	 push {r7}
 2547              	.LCFI163:
 2548              	 .cfi_def_cfa_offset 4
 2549              	 .cfi_offset 7,-4
 2550 0002 83B0     	 sub sp,sp,#12
 2551              	.LCFI164:
 2552              	 .cfi_def_cfa_offset 16
 2553 0004 00AF     	 add r7,sp,#0
 2554              	.LCFI165:
 2555              	 .cfi_def_cfa_register 7
 2556 0006 7860     	 str r0,[r7,#4]
 2557 0008 0B46     	 mov r3,r1
 2558 000a FB70     	 strb r3,[r7,#3]
 556:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~GPDMA0_CH_CTLL_DST_SCATTER_EN_Msk;
 2559              	 .loc 2 556 0
 2560 000c FB78     	 ldrb r3,[r7,#3]
 2561 000e FA78     	 ldrb r2,[r7,#3]
 2562 0010 7968     	 ldr r1,[r7,#4]
 2563 0012 5820     	 movs r0,#88
 2564 0014 00FB02F2 	 mul r2,r0,r2
 2565 0018 0A44     	 add r2,r2,r1
 2566 001a 1832     	 adds r2,r2,#24
 2567 001c 1268     	 ldr r2,[r2]
 2568 001e 22F48022 	 bic r2,r2,#262144
 2569 0022 7968     	 ldr r1,[r7,#4]
 2570 0024 5820     	 movs r0,#88
 2571 0026 00FB03F3 	 mul r3,r0,r3
 2572 002a 0B44     	 add r3,r3,r1
 2573 002c 1833     	 adds r3,r3,#24
 2574 002e 1968     	 ldr r1,[r3]
 2575 0030 0021     	 movs r1,#0
 2576 0032 0A43     	 orrs r2,r2,r1
 2577 0034 1A60     	 str r2,[r3]
 557:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2578              	 .loc 2 557 0
 2579 0036 0C37     	 adds r7,r7,#12
 2580              	.LCFI166:
 2581              	 .cfi_def_cfa_offset 4
 2582 0038 BD46     	 mov sp,r7
 2583              	.LCFI167:
 2584              	 .cfi_def_cfa_register 13
 2585              	 
 2586 003a 5DF8047B 	 ldr r7,[sp],#4
 2587              	.LCFI168:
 2588              	 .cfi_restore 7
 2589              	 .cfi_def_cfa_offset 0
 2590 003e 7047     	 bx lr
 2591              	 .cfi_endproc
 2592              	.LFE205:
 2594              	 .section .text.XMC_DMA_CH_TriggerSourceRequest,"ax",%progbits
 2595              	 .align 2
 2596              	 .global XMC_DMA_CH_TriggerSourceRequest
 2597              	 .thumb
 2598              	 .thumb_func
 2600              	XMC_DMA_CH_TriggerSourceRequest:
 2601              	.LFB206:
 558:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 559:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Trigger source request */
 560:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerSourceRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_
 561:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2602              	 .loc 2 561 0
 2603              	 .cfi_startproc
 2604              	 
 2605              	 
 2606              	 
 2607 0000 80B4     	 push {r7}
 2608              	.LCFI169:
 2609              	 .cfi_def_cfa_offset 4
 2610              	 .cfi_offset 7,-4
 2611 0002 83B0     	 sub sp,sp,#12
 2612              	.LCFI170:
 2613              	 .cfi_def_cfa_offset 16
 2614 0004 00AF     	 add r7,sp,#0
 2615              	.LCFI171:
 2616              	 .cfi_def_cfa_register 7
 2617 0006 7860     	 str r0,[r7,#4]
 2618 0008 0846     	 mov r0,r1
 2619 000a 1146     	 mov r1,r2
 2620 000c 1A46     	 mov r2,r3
 2621 000e 0346     	 mov r3,r0
 2622 0010 FB70     	 strb r3,[r7,#3]
 2623 0012 0B46     	 mov r3,r1
 2624 0014 BB70     	 strb r3,[r7,#2]
 2625 0016 1346     	 mov r3,r2
 2626 0018 7B70     	 strb r3,[r7,#1]
 562:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if ((uint32_t)type == (uint32_t)XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2627              	 .loc 2 562 0
 2628 001a BB78     	 ldrb r3,[r7,#2]
 2629 001c 002B     	 cmp r3,#0
 2630 001e 0AD1     	 bne .L124
 563:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {  
 564:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     dma->SGLREQSRCREG = ((uint32_t)0x101UL << channel);
 2631              	 .loc 2 564 0
 2632 0020 FB78     	 ldrb r3,[r7,#3]
 2633 0022 40F20112 	 movw r2,#257
 2634 0026 9A40     	 lsls r2,r2,r3
 2635 0028 7B68     	 ldr r3,[r7,#4]
 2636 002a D3F87813 	 ldr r1,[r3,#888]
 2637 002e 0021     	 movs r1,#0
 2638 0030 0A43     	 orrs r2,r2,r1
 2639 0032 C3F87823 	 str r2,[r3,#888]
 2640              	.L124:
 565:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 566:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 567:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (last == true)
 2641              	 .loc 2 567 0
 2642 0036 7B78     	 ldrb r3,[r7,#1]
 2643 0038 002B     	 cmp r3,#0
 2644 003a 0AD0     	 beq .L125
 568:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 569:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->LSTSRCREG = (uint32_t)0x101UL << channel;
 2645              	 .loc 2 569 0
 2646 003c FB78     	 ldrb r3,[r7,#3]
 2647 003e 40F20112 	 movw r2,#257
 2648 0042 9A40     	 lsls r2,r2,r3
 2649 0044 7B68     	 ldr r3,[r7,#4]
 2650 0046 D3F88813 	 ldr r1,[r3,#904]
 2651 004a 0021     	 movs r1,#0
 2652 004c 0A43     	 orrs r2,r2,r1
 2653 004e C3F88823 	 str r2,[r3,#904]
 2654              	.L125:
 570:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 571:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   
 572:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->REQSRCREG = (uint32_t)0x101UL << channel;
 2655              	 .loc 2 572 0
 2656 0052 FB78     	 ldrb r3,[r7,#3]
 2657 0054 40F20112 	 movw r2,#257
 2658 0058 9A40     	 lsls r2,r2,r3
 2659 005a 7B68     	 ldr r3,[r7,#4]
 2660 005c D3F86813 	 ldr r1,[r3,#872]
 2661 0060 0021     	 movs r1,#0
 2662 0062 0A43     	 orrs r2,r2,r1
 2663 0064 C3F86823 	 str r2,[r3,#872]
 573:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2664              	 .loc 2 573 0
 2665 0068 0C37     	 adds r7,r7,#12
 2666              	.LCFI172:
 2667              	 .cfi_def_cfa_offset 4
 2668 006a BD46     	 mov sp,r7
 2669              	.LCFI173:
 2670              	 .cfi_def_cfa_register 13
 2671              	 
 2672 006c 5DF8047B 	 ldr r7,[sp],#4
 2673              	.LCFI174:
 2674              	 .cfi_restore 7
 2675              	 .cfi_def_cfa_offset 0
 2676 0070 7047     	 bx lr
 2677              	 .cfi_endproc
 2678              	.LFE206:
 2680 0072 00BF     	 .section .text.XMC_DMA_CH_TriggerDestinationRequest,"ax",%progbits
 2681              	 .align 2
 2682              	 .global XMC_DMA_CH_TriggerDestinationRequest
 2683              	 .thumb
 2684              	 .thumb_func
 2686              	XMC_DMA_CH_TriggerDestinationRequest:
 2687              	.LFB207:
 574:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 575:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Trigger destination request */
 576:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_TriggerDestinationRequest(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DM
 577:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2688              	 .loc 2 577 0
 2689              	 .cfi_startproc
 2690              	 
 2691              	 
 2692              	 
 2693 0000 80B4     	 push {r7}
 2694              	.LCFI175:
 2695              	 .cfi_def_cfa_offset 4
 2696              	 .cfi_offset 7,-4
 2697 0002 83B0     	 sub sp,sp,#12
 2698              	.LCFI176:
 2699              	 .cfi_def_cfa_offset 16
 2700 0004 00AF     	 add r7,sp,#0
 2701              	.LCFI177:
 2702              	 .cfi_def_cfa_register 7
 2703 0006 7860     	 str r0,[r7,#4]
 2704 0008 0846     	 mov r0,r1
 2705 000a 1146     	 mov r1,r2
 2706 000c 1A46     	 mov r2,r3
 2707 000e 0346     	 mov r3,r0
 2708 0010 FB70     	 strb r3,[r7,#3]
 2709 0012 0B46     	 mov r3,r1
 2710 0014 BB70     	 strb r3,[r7,#2]
 2711 0016 1346     	 mov r3,r2
 2712 0018 7B70     	 strb r3,[r7,#1]
 578:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if(type == XMC_DMA_CH_TRANSACTION_TYPE_SINGLE)
 2713              	 .loc 2 578 0
 2714 001a BB78     	 ldrb r3,[r7,#2]
 2715 001c 002B     	 cmp r3,#0
 2716 001e 0AD1     	 bne .L127
 579:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {  
 580:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     dma->SGLREQDSTREG = (uint32_t)0x101UL << channel;
 2717              	 .loc 2 580 0
 2718 0020 FB78     	 ldrb r3,[r7,#3]
 2719 0022 40F20112 	 movw r2,#257
 2720 0026 9A40     	 lsls r2,r2,r3
 2721 0028 7B68     	 ldr r3,[r7,#4]
 2722 002a D3F88013 	 ldr r1,[r3,#896]
 2723 002e 0021     	 movs r1,#0
 2724 0030 0A43     	 orrs r2,r2,r1
 2725 0032 C3F88023 	 str r2,[r3,#896]
 2726              	.L127:
 581:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 582:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 583:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (last == true)
 2727              	 .loc 2 583 0
 2728 0036 7B78     	 ldrb r3,[r7,#1]
 2729 0038 002B     	 cmp r3,#0
 2730 003a 0AD0     	 beq .L128
 584:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 585:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     dma->LSTDSTREG = (uint32_t)0x101UL << channel;
 2731              	 .loc 2 585 0
 2732 003c FB78     	 ldrb r3,[r7,#3]
 2733 003e 40F20112 	 movw r2,#257
 2734 0042 9A40     	 lsls r2,r2,r3
 2735 0044 7B68     	 ldr r3,[r7,#4]
 2736 0046 D3F89013 	 ldr r1,[r3,#912]
 2737 004a 0021     	 movs r1,#0
 2738 004c 0A43     	 orrs r2,r2,r1
 2739 004e C3F89023 	 str r2,[r3,#912]
 2740              	.L128:
 586:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 587:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 588:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->REQDSTREG = (uint32_t)0x101UL << channel;
 2741              	 .loc 2 588 0
 2742 0052 FB78     	 ldrb r3,[r7,#3]
 2743 0054 40F20112 	 movw r2,#257
 2744 0058 9A40     	 lsls r2,r2,r3
 2745 005a 7B68     	 ldr r3,[r7,#4]
 2746 005c D3F87013 	 ldr r1,[r3,#880]
 2747 0060 0021     	 movs r1,#0
 2748 0062 0A43     	 orrs r2,r2,r1
 2749 0064 C3F87023 	 str r2,[r3,#880]
 589:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2750              	 .loc 2 589 0
 2751 0068 0C37     	 adds r7,r7,#12
 2752              	.LCFI178:
 2753              	 .cfi_def_cfa_offset 4
 2754 006a BD46     	 mov sp,r7
 2755              	.LCFI179:
 2756              	 .cfi_def_cfa_register 13
 2757              	 
 2758 006c 5DF8047B 	 ldr r7,[sp],#4
 2759              	.LCFI180:
 2760              	 .cfi_restore 7
 2761              	 .cfi_def_cfa_offset 0
 2762 0070 7047     	 bx lr
 2763              	 .cfi_endproc
 2764              	.LFE207:
 2766 0072 00BF     	 .section .text.XMC_DMA_CH_EnableSourceAddressReload,"ax",%progbits
 2767              	 .align 2
 2768              	 .global XMC_DMA_CH_EnableSourceAddressReload
 2769              	 .thumb
 2770              	 .thumb_func
 2772              	XMC_DMA_CH_EnableSourceAddressReload:
 2773              	.LFB208:
 590:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 591:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Enable source address reload */
 592:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 593:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2774              	 .loc 2 593 0
 2775              	 .cfi_startproc
 2776              	 
 2777              	 
 2778              	 
 2779 0000 80B4     	 push {r7}
 2780              	.LCFI181:
 2781              	 .cfi_def_cfa_offset 4
 2782              	 .cfi_offset 7,-4
 2783 0002 83B0     	 sub sp,sp,#12
 2784              	.LCFI182:
 2785              	 .cfi_def_cfa_offset 16
 2786 0004 00AF     	 add r7,sp,#0
 2787              	.LCFI183:
 2788              	 .cfi_def_cfa_register 7
 2789 0006 7860     	 str r0,[r7,#4]
 2790 0008 0B46     	 mov r3,r1
 2791 000a FB70     	 strb r3,[r7,#3]
 594:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2792              	 .loc 2 594 0
 2793 000c FB78     	 ldrb r3,[r7,#3]
 2794 000e FA78     	 ldrb r2,[r7,#3]
 2795 0010 7968     	 ldr r1,[r7,#4]
 2796 0012 5820     	 movs r0,#88
 2797 0014 00FB02F2 	 mul r2,r0,r2
 2798 0018 0A44     	 add r2,r2,r1
 2799 001a 4032     	 adds r2,r2,#64
 2800 001c 1268     	 ldr r2,[r2]
 2801 001e 42F08042 	 orr r2,r2,#1073741824
 2802 0022 7968     	 ldr r1,[r7,#4]
 2803 0024 5820     	 movs r0,#88
 2804 0026 00FB03F3 	 mul r3,r0,r3
 2805 002a 0B44     	 add r3,r3,r1
 2806 002c 4033     	 adds r3,r3,#64
 2807 002e 1968     	 ldr r1,[r3]
 2808 0030 0021     	 movs r1,#0
 2809 0032 0A43     	 orrs r2,r2,r1
 2810 0034 1A60     	 str r2,[r3]
 595:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2811              	 .loc 2 595 0
 2812 0036 0C37     	 adds r7,r7,#12
 2813              	.LCFI184:
 2814              	 .cfi_def_cfa_offset 4
 2815 0038 BD46     	 mov sp,r7
 2816              	.LCFI185:
 2817              	 .cfi_def_cfa_register 13
 2818              	 
 2819 003a 5DF8047B 	 ldr r7,[sp],#4
 2820              	.LCFI186:
 2821              	 .cfi_restore 7
 2822              	 .cfi_def_cfa_offset 0
 2823 003e 7047     	 bx lr
 2824              	 .cfi_endproc
 2825              	.LFE208:
 2827              	 .section .text.XMC_DMA_CH_DisableSourceAddressReload,"ax",%progbits
 2828              	 .align 2
 2829              	 .global XMC_DMA_CH_DisableSourceAddressReload
 2830              	 .thumb
 2831              	 .thumb_func
 2833              	XMC_DMA_CH_DisableSourceAddressReload:
 2834              	.LFB209:
 596:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 597:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Disable source address reload */
 598:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableSourceAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 599:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2835              	 .loc 2 599 0
 2836              	 .cfi_startproc
 2837              	 
 2838              	 
 2839              	 
 2840 0000 80B4     	 push {r7}
 2841              	.LCFI187:
 2842              	 .cfi_def_cfa_offset 4
 2843              	 .cfi_offset 7,-4
 2844 0002 83B0     	 sub sp,sp,#12
 2845              	.LCFI188:
 2846              	 .cfi_def_cfa_offset 16
 2847 0004 00AF     	 add r7,sp,#0
 2848              	.LCFI189:
 2849              	 .cfi_def_cfa_register 7
 2850 0006 7860     	 str r0,[r7,#4]
 2851 0008 0B46     	 mov r3,r1
 2852 000a FB70     	 strb r3,[r7,#3]
 600:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 2853              	 .loc 2 600 0
 2854 000c FB78     	 ldrb r3,[r7,#3]
 2855 000e FA78     	 ldrb r2,[r7,#3]
 2856 0010 7968     	 ldr r1,[r7,#4]
 2857 0012 5820     	 movs r0,#88
 2858 0014 00FB02F2 	 mul r2,r0,r2
 2859 0018 0A44     	 add r2,r2,r1
 2860 001a 4032     	 adds r2,r2,#64
 2861 001c 1268     	 ldr r2,[r2]
 2862 001e 22F08042 	 bic r2,r2,#1073741824
 2863 0022 7968     	 ldr r1,[r7,#4]
 2864 0024 5820     	 movs r0,#88
 2865 0026 00FB03F3 	 mul r3,r0,r3
 2866 002a 0B44     	 add r3,r3,r1
 2867 002c 4033     	 adds r3,r3,#64
 2868 002e 1968     	 ldr r1,[r3]
 2869 0030 0021     	 movs r1,#0
 2870 0032 0A43     	 orrs r2,r2,r1
 2871 0034 1A60     	 str r2,[r3]
 601:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2872              	 .loc 2 601 0
 2873 0036 0C37     	 adds r7,r7,#12
 2874              	.LCFI190:
 2875              	 .cfi_def_cfa_offset 4
 2876 0038 BD46     	 mov sp,r7
 2877              	.LCFI191:
 2878              	 .cfi_def_cfa_register 13
 2879              	 
 2880 003a 5DF8047B 	 ldr r7,[sp],#4
 2881              	.LCFI192:
 2882              	 .cfi_restore 7
 2883              	 .cfi_def_cfa_offset 0
 2884 003e 7047     	 bx lr
 2885              	 .cfi_endproc
 2886              	.LFE209:
 2888              	 .section .text.XMC_DMA_CH_EnableDestinationAddressReload,"ax",%progbits
 2889              	 .align 2
 2890              	 .global XMC_DMA_CH_EnableDestinationAddressReload
 2891              	 .thumb
 2892              	 .thumb_func
 2894              	XMC_DMA_CH_EnableDestinationAddressReload:
 2895              	.LFB210:
 602:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 603:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Enable destination address reload */
 604:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_EnableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 605:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2896              	 .loc 2 605 0
 2897              	 .cfi_startproc
 2898              	 
 2899              	 
 2900              	 
 2901 0000 80B4     	 push {r7}
 2902              	.LCFI193:
 2903              	 .cfi_def_cfa_offset 4
 2904              	 .cfi_offset 7,-4
 2905 0002 83B0     	 sub sp,sp,#12
 2906              	.LCFI194:
 2907              	 .cfi_def_cfa_offset 16
 2908 0004 00AF     	 add r7,sp,#0
 2909              	.LCFI195:
 2910              	 .cfi_def_cfa_register 7
 2911 0006 7860     	 str r0,[r7,#4]
 2912 0008 0B46     	 mov r3,r1
 2913 000a FB70     	 strb r3,[r7,#3]
 606:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2914              	 .loc 2 606 0
 2915 000c FB78     	 ldrb r3,[r7,#3]
 2916 000e FA78     	 ldrb r2,[r7,#3]
 2917 0010 7968     	 ldr r1,[r7,#4]
 2918 0012 5820     	 movs r0,#88
 2919 0014 00FB02F2 	 mul r2,r0,r2
 2920 0018 0A44     	 add r2,r2,r1
 2921 001a 4032     	 adds r2,r2,#64
 2922 001c 1268     	 ldr r2,[r2]
 2923 001e 42F00042 	 orr r2,r2,#-2147483648
 2924 0022 7968     	 ldr r1,[r7,#4]
 2925 0024 5820     	 movs r0,#88
 2926 0026 00FB03F3 	 mul r3,r0,r3
 2927 002a 0B44     	 add r3,r3,r1
 2928 002c 4033     	 adds r3,r3,#64
 2929 002e 1968     	 ldr r1,[r3]
 2930 0030 0021     	 movs r1,#0
 2931 0032 0A43     	 orrs r2,r2,r1
 2932 0034 1A60     	 str r2,[r3]
 607:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2933              	 .loc 2 607 0
 2934 0036 0C37     	 adds r7,r7,#12
 2935              	.LCFI196:
 2936              	 .cfi_def_cfa_offset 4
 2937 0038 BD46     	 mov sp,r7
 2938              	.LCFI197:
 2939              	 .cfi_def_cfa_register 13
 2940              	 
 2941 003a 5DF8047B 	 ldr r7,[sp],#4
 2942              	.LCFI198:
 2943              	 .cfi_restore 7
 2944              	 .cfi_def_cfa_offset 0
 2945 003e 7047     	 bx lr
 2946              	 .cfi_endproc
 2947              	.LFE210:
 2949              	 .section .text.XMC_DMA_CH_DisableDestinationAddressReload,"ax",%progbits
 2950              	 .align 2
 2951              	 .global XMC_DMA_CH_DisableDestinationAddressReload
 2952              	 .thumb
 2953              	 .thumb_func
 2955              	XMC_DMA_CH_DisableDestinationAddressReload:
 2956              	.LFB211:
 608:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 609:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Disable destination address reload */
 610:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_DisableDestinationAddressReload(XMC_DMA_t *const dma, const uint8_t channel)
 611:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 2957              	 .loc 2 611 0
 2958              	 .cfi_startproc
 2959              	 
 2960              	 
 2961              	 
 2962 0000 80B4     	 push {r7}
 2963              	.LCFI199:
 2964              	 .cfi_def_cfa_offset 4
 2965              	 .cfi_offset 7,-4
 2966 0002 83B0     	 sub sp,sp,#12
 2967              	.LCFI200:
 2968              	 .cfi_def_cfa_offset 16
 2969 0004 00AF     	 add r7,sp,#0
 2970              	.LCFI201:
 2971              	 .cfi_def_cfa_register 7
 2972 0006 7860     	 str r0,[r7,#4]
 2973 0008 0B46     	 mov r3,r1
 2974 000a FB70     	 strb r3,[r7,#3]
 612:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 2975              	 .loc 2 612 0
 2976 000c FB78     	 ldrb r3,[r7,#3]
 2977 000e FA78     	 ldrb r2,[r7,#3]
 2978 0010 7968     	 ldr r1,[r7,#4]
 2979 0012 5820     	 movs r0,#88
 2980 0014 00FB02F2 	 mul r2,r0,r2
 2981 0018 0A44     	 add r2,r2,r1
 2982 001a 4032     	 adds r2,r2,#64
 2983 001c 1268     	 ldr r2,[r2]
 2984 001e 22F00042 	 bic r2,r2,#-2147483648
 2985 0022 7968     	 ldr r1,[r7,#4]
 2986 0024 5820     	 movs r0,#88
 2987 0026 00FB03F3 	 mul r3,r0,r3
 2988 002a 0B44     	 add r3,r3,r1
 2989 002c 4033     	 adds r3,r3,#64
 2990 002e 1968     	 ldr r1,[r3]
 2991 0030 0021     	 movs r1,#0
 2992 0032 0A43     	 orrs r2,r2,r1
 2993 0034 1A60     	 str r2,[r3]
 613:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 2994              	 .loc 2 613 0
 2995 0036 0C37     	 adds r7,r7,#12
 2996              	.LCFI202:
 2997              	 .cfi_def_cfa_offset 4
 2998 0038 BD46     	 mov sp,r7
 2999              	.LCFI203:
 3000              	 .cfi_def_cfa_register 13
 3001              	 
 3002 003a 5DF8047B 	 ldr r7,[sp],#4
 3003              	.LCFI204:
 3004              	 .cfi_restore 7
 3005              	 .cfi_def_cfa_offset 0
 3006 003e 7047     	 bx lr
 3007              	 .cfi_endproc
 3008              	.LFE211:
 3010              	 .section .text.XMC_DMA_CH_RequestLastMultiblockTransfer,"ax",%progbits
 3011              	 .align 2
 3012              	 .global XMC_DMA_CH_RequestLastMultiblockTransfer
 3013              	 .thumb
 3014              	 .thumb_func
 3016              	XMC_DMA_CH_RequestLastMultiblockTransfer:
 3017              	.LFB212:
 614:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 615:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Request last multi-block transfer */
 616:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_RequestLastMultiblockTransfer(XMC_DMA_t *const dma, const uint8_t channel)
 617:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 3018              	 .loc 2 617 0
 3019              	 .cfi_startproc
 3020              	 
 3021              	 
 3022              	 
 3023 0000 80B4     	 push {r7}
 3024              	.LCFI205:
 3025              	 .cfi_def_cfa_offset 4
 3026              	 .cfi_offset 7,-4
 3027 0002 83B0     	 sub sp,sp,#12
 3028              	.LCFI206:
 3029              	 .cfi_def_cfa_offset 16
 3030 0004 00AF     	 add r7,sp,#0
 3031              	.LCFI207:
 3032              	 .cfi_def_cfa_register 7
 3033 0006 7860     	 str r0,[r7,#4]
 3034 0008 0B46     	 mov r3,r1
 3035 000a FB70     	 strb r3,[r7,#3]
 618:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Ms
 3036              	 .loc 2 618 0
 3037 000c FB78     	 ldrb r3,[r7,#3]
 3038 000e FA78     	 ldrb r2,[r7,#3]
 3039 0010 7968     	 ldr r1,[r7,#4]
 3040 0012 5820     	 movs r0,#88
 3041 0014 00FB02F2 	 mul r2,r0,r2
 3042 0018 0A44     	 add r2,r2,r1
 3043 001a 4032     	 adds r2,r2,#64
 3044 001c 1268     	 ldr r2,[r2]
 3045 001e 22F04042 	 bic r2,r2,#-1073741824
 3046 0022 7968     	 ldr r1,[r7,#4]
 3047 0024 5820     	 movs r0,#88
 3048 0026 00FB03F3 	 mul r3,r0,r3
 3049 002a 0B44     	 add r3,r3,r1
 3050 002c 4033     	 adds r3,r3,#64
 3051 002e 1968     	 ldr r1,[r3]
 3052 0030 0021     	 movs r1,#0
 3053 0032 0A43     	 orrs r2,r2,r1
 3054 0034 1A60     	 str r2,[r3]
 619:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Ms
 3055              	 .loc 2 619 0
 3056 0036 FB78     	 ldrb r3,[r7,#3]
 3057 0038 FA78     	 ldrb r2,[r7,#3]
 3058 003a 7968     	 ldr r1,[r7,#4]
 3059 003c 5820     	 movs r0,#88
 3060 003e 00FB02F2 	 mul r2,r0,r2
 3061 0042 0A44     	 add r2,r2,r1
 3062 0044 1832     	 adds r2,r2,#24
 3063 0046 1268     	 ldr r2,[r2]
 3064 0048 22F0C052 	 bic r2,r2,#402653184
 3065 004c 7968     	 ldr r1,[r7,#4]
 3066 004e 5820     	 movs r0,#88
 3067 0050 00FB03F3 	 mul r3,r0,r3
 3068 0054 0B44     	 add r3,r3,r1
 3069 0056 1833     	 adds r3,r3,#24
 3070 0058 1968     	 ldr r1,[r3]
 3071 005a 0021     	 movs r1,#0
 3072 005c 0A43     	 orrs r2,r2,r1
 3073 005e 1A60     	 str r2,[r3]
 620:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 3074              	 .loc 2 620 0
 3075 0060 0C37     	 adds r7,r7,#12
 3076              	.LCFI208:
 3077              	 .cfi_def_cfa_offset 4
 3078 0062 BD46     	 mov sp,r7
 3079              	.LCFI209:
 3080              	 .cfi_def_cfa_register 13
 3081              	 
 3082 0064 5DF8047B 	 ldr r7,[sp],#4
 3083              	.LCFI210:
 3084              	 .cfi_restore 7
 3085              	 .cfi_def_cfa_offset 0
 3086 0068 7047     	 bx lr
 3087              	 .cfi_endproc
 3088              	.LFE212:
 3090 006a 00BF     	 .section .text.XMC_DMA_CH_SetEventHandler,"ax",%progbits
 3091              	 .align 2
 3092              	 .global XMC_DMA_CH_SetEventHandler
 3093              	 .thumb
 3094              	 .thumb_func
 3096              	XMC_DMA_CH_SetEventHandler:
 3097              	.LFB213:
 621:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 622:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Set event handler */
 623:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDL
 624:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 3098              	 .loc 2 624 0
 3099              	 .cfi_startproc
 3100              	 
 3101              	 
 3102              	 
 3103 0000 80B4     	 push {r7}
 3104              	.LCFI211:
 3105              	 .cfi_def_cfa_offset 4
 3106              	 .cfi_offset 7,-4
 3107 0002 85B0     	 sub sp,sp,#20
 3108              	.LCFI212:
 3109              	 .cfi_def_cfa_offset 24
 3110 0004 00AF     	 add r7,sp,#0
 3111              	.LCFI213:
 3112              	 .cfi_def_cfa_register 7
 3113 0006 F860     	 str r0,[r7,#12]
 3114 0008 0B46     	 mov r3,r1
 3115 000a 7A60     	 str r2,[r7,#4]
 3116 000c FB72     	 strb r3,[r7,#11]
 625:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 626:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 3117              	 .loc 2 626 0
 3118 000e FB68     	 ldr r3,[r7,#12]
 3119 0010 094A     	 ldr r2,.L137
 3120 0012 9342     	 cmp r3,r2
 3121 0014 05D1     	 bne .L135
 627:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 628:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 629:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     dma0_event_handlers[channel] = event_handler;
 3122              	 .loc 2 629 0
 3123 0016 FB7A     	 ldrb r3,[r7,#11]
 3124 0018 0849     	 ldr r1,.L137+4
 3125 001a 7A68     	 ldr r2,[r7,#4]
 3126 001c 41F82320 	 str r2,[r1,r3,lsl#2]
 3127 0020 04E0     	 b .L134
 3128              	.L135:
 630:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 631:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 632:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 633:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 634:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     dma1_event_handlers[channel] = event_handler;
 3129              	 .loc 2 634 0
 3130 0022 FB7A     	 ldrb r3,[r7,#11]
 3131 0024 0649     	 ldr r1,.L137+8
 3132 0026 7A68     	 ldr r2,[r7,#4]
 3133 0028 41F82320 	 str r2,[r1,r3,lsl#2]
 3134              	.L134:
 635:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 636:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 637:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 3135              	 .loc 2 637 0
 3136 002c 1437     	 adds r7,r7,#20
 3137              	.LCFI214:
 3138              	 .cfi_def_cfa_offset 4
 3139 002e BD46     	 mov sp,r7
 3140              	.LCFI215:
 3141              	 .cfi_def_cfa_register 13
 3142              	 
 3143 0030 5DF8047B 	 ldr r7,[sp],#4
 3144              	.LCFI216:
 3145              	 .cfi_restore 7
 3146              	 .cfi_def_cfa_offset 0
 3147 0034 7047     	 bx lr
 3148              	.L138:
 3149 0036 00BF     	 .align 2
 3150              	.L137:
 3151 0038 00400150 	 .word 1342259200
 3152 003c 00000000 	 .word dma0_event_handlers
 3153 0040 00000000 	 .word dma1_event_handlers
 3154              	 .cfi_endproc
 3155              	.LFE213:
 3157              	 .section .text.XMC_DMA_CH_ClearSourcePeripheralRequest,"ax",%progbits
 3158              	 .align 2
 3159              	 .global XMC_DMA_CH_ClearSourcePeripheralRequest
 3160              	 .thumb
 3161              	 .thumb_func
 3163              	XMC_DMA_CH_ClearSourcePeripheralRequest:
 3164              	.LFB214:
 638:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 639:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearSourcePeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 640:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 3165              	 .loc 2 640 0
 3166              	 .cfi_startproc
 3167              	 
 3168              	 
 3169 0000 80B5     	 push {r7,lr}
 3170              	.LCFI217:
 3171              	 .cfi_def_cfa_offset 8
 3172              	 .cfi_offset 7,-8
 3173              	 .cfi_offset 14,-4
 3174 0002 84B0     	 sub sp,sp,#16
 3175              	.LCFI218:
 3176              	 .cfi_def_cfa_offset 24
 3177 0004 00AF     	 add r7,sp,#0
 3178              	.LCFI219:
 3179              	 .cfi_def_cfa_register 7
 3180 0006 7860     	 str r0,[r7,#4]
 3181 0008 0B46     	 mov r3,r1
 3182 000a FB70     	 strb r3,[r7,#3]
 641:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint32_t line;
 642:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_SRC_PER_Msk) >> GPDMA0_CH_CFGH_SRC_PER_Pos;
 3183              	 .loc 2 642 0
 3184 000c FB78     	 ldrb r3,[r7,#3]
 3185 000e 7A68     	 ldr r2,[r7,#4]
 3186 0010 5821     	 movs r1,#88
 3187 0012 01FB03F3 	 mul r3,r1,r3
 3188 0016 1344     	 add r3,r3,r2
 3189 0018 4033     	 adds r3,r3,#64
 3190 001a 5B68     	 ldr r3,[r3,#4]
 3191 001c 03F4F063 	 and r3,r3,#1920
 3192 0020 DB09     	 lsrs r3,r3,#7
 3193 0022 FB60     	 str r3,[r7,#12]
 643:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 644:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3194              	 .loc 2 644 0
 3195 0024 FB68     	 ldr r3,[r7,#12]
 3196 0026 DBB2     	 uxtb r3,r3
 3197 0028 7868     	 ldr r0,[r7,#4]
 3198 002a 1946     	 mov r1,r3
 3199 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 645:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 3200              	 .loc 2 645 0
 3201 0030 1037     	 adds r7,r7,#16
 3202              	.LCFI220:
 3203              	 .cfi_def_cfa_offset 8
 3204 0032 BD46     	 mov sp,r7
 3205              	.LCFI221:
 3206              	 .cfi_def_cfa_register 13
 3207              	 
 3208 0034 80BD     	 pop {r7,pc}
 3209              	 .cfi_endproc
 3210              	.LFE214:
 3212 0036 00BF     	 .section .text.XMC_DMA_CH_ClearDestinationPeripheralRequest,"ax",%progbits
 3213              	 .align 2
 3214              	 .global XMC_DMA_CH_ClearDestinationPeripheralRequest
 3215              	 .thumb
 3216              	 .thumb_func
 3218              	XMC_DMA_CH_ClearDestinationPeripheralRequest:
 3219              	.LFB215:
 646:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 647:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_CH_ClearDestinationPeripheralRequest(XMC_DMA_t *const dma, uint8_t channel)
 648:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 3220              	 .loc 2 648 0
 3221              	 .cfi_startproc
 3222              	 
 3223              	 
 3224 0000 80B5     	 push {r7,lr}
 3225              	.LCFI222:
 3226              	 .cfi_def_cfa_offset 8
 3227              	 .cfi_offset 7,-8
 3228              	 .cfi_offset 14,-4
 3229 0002 84B0     	 sub sp,sp,#16
 3230              	.LCFI223:
 3231              	 .cfi_def_cfa_offset 24
 3232 0004 00AF     	 add r7,sp,#0
 3233              	.LCFI224:
 3234              	 .cfi_def_cfa_register 7
 3235 0006 7860     	 str r0,[r7,#4]
 3236 0008 0B46     	 mov r3,r1
 3237 000a FB70     	 strb r3,[r7,#3]
 649:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint32_t line;
 650:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   line = (dma->CH[channel].CFGH & GPDMA0_CH_CFGH_DEST_PER_Msk) >> GPDMA0_CH_CFGH_DEST_PER_Pos;
 3238              	 .loc 2 650 0
 3239 000c FB78     	 ldrb r3,[r7,#3]
 3240 000e 7A68     	 ldr r2,[r7,#4]
 3241 0010 5821     	 movs r1,#88
 3242 0012 01FB03F3 	 mul r3,r1,r3
 3243 0016 1344     	 add r3,r3,r2
 3244 0018 4033     	 adds r3,r3,#64
 3245 001a 5B68     	 ldr r3,[r3,#4]
 3246 001c 03F4F043 	 and r3,r3,#30720
 3247 0020 DB0A     	 lsrs r3,r3,#11
 3248 0022 FB60     	 str r3,[r7,#12]
 651:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 652:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
 3249              	 .loc 2 652 0
 3250 0024 FB68     	 ldr r3,[r7,#12]
 3251 0026 DBB2     	 uxtb r3,r3
 3252 0028 7868     	 ldr r0,[r7,#4]
 3253 002a 1946     	 mov r1,r3
 3254 002c FFF7FEFF 	 bl XMC_DMA_ClearRequestLine
 653:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 3255              	 .loc 2 653 0
 3256 0030 1037     	 adds r7,r7,#16
 3257              	.LCFI225:
 3258              	 .cfi_def_cfa_offset 8
 3259 0032 BD46     	 mov sp,r7
 3260              	.LCFI226:
 3261              	 .cfi_def_cfa_register 13
 3262              	 
 3263 0034 80BD     	 pop {r7,pc}
 3264              	 .cfi_endproc
 3265              	.LFE215:
 3267 0036 00BF     	 .section .text.XMC_DMA_IRQHandler,"ax",%progbits
 3268              	 .align 2
 3269              	 .global XMC_DMA_IRQHandler
 3270              	 .thumb
 3271              	 .thumb_func
 3273              	XMC_DMA_IRQHandler:
 3274              	.LFB216:
 654:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 655:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** /* Default DMA IRQ handler */
 656:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
 657:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** {
 3275              	 .loc 2 657 0
 3276              	 .cfi_startproc
 3277              	 
 3278              	 
 3279 0000 80B5     	 push {r7,lr}
 3280              	.LCFI227:
 3281              	 .cfi_def_cfa_offset 8
 3282              	 .cfi_offset 7,-8
 3283              	 .cfi_offset 14,-4
 3284 0002 88B0     	 sub sp,sp,#32
 3285              	.LCFI228:
 3286              	 .cfi_def_cfa_offset 40
 3287 0004 00AF     	 add r7,sp,#0
 3288              	.LCFI229:
 3289              	 .cfi_def_cfa_register 7
 3290 0006 7860     	 str r0,[r7,#4]
 658:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint32_t event;
 659:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   int32_t channel;
 660:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   uint32_t mask;
 661:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
 662:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   XMC_DMA_CH_EVENT_HANDLER_t event_handler;
 663:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 664:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 665:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if (dma == XMC_DMA0)
 3291              	 .loc 2 665 0
 3292 0008 7B68     	 ldr r3,[r7,#4]
 3293 000a 824A     	 ldr r2,.L174
 3294 000c 9342     	 cmp r3,r2
 3295 000e 02D1     	 bne .L142
 666:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 667:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 668:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma0_event_handlers;
 3296              	 .loc 2 668 0
 3297 0010 814B     	 ldr r3,.L174+4
 3298 0012 BB61     	 str r3,[r7,#24]
 3299 0014 01E0     	 b .L143
 3300              	.L142:
 669:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #if defined(GPDMA1)
 670:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 671:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 672:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 673:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     dma_event_handlers = dma1_event_handlers;
 3301              	 .loc 2 673 0
 3302 0016 814B     	 ldr r3,.L174+8
 3303 0018 BB61     	 str r3,[r7,#24]
 3304              	.L143:
 674:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 675:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** #endif
 676:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   
 677:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   event = XMC_DMA_GetEventStatus(dma);
 3305              	 .loc 2 677 0
 3306 001a 7868     	 ldr r0,[r7,#4]
 3307 001c FFF7FEFF 	 bl XMC_DMA_GetEventStatus
 3308 0020 7861     	 str r0,[r7,#20]
 678:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   channel = 0;
 3309              	 .loc 2 678 0
 3310 0022 0023     	 movs r3,#0
 3311 0024 FB61     	 str r3,[r7,#28]
 679:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 680:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 3312              	 .loc 2 680 0
 3313 0026 7B69     	 ldr r3,[r7,#20]
 3314 0028 03F01003 	 and r3,r3,#16
 3315 002c 002B     	 cmp r3,#0
 3316 002e 2BD0     	 beq .L144
 681:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 682:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsErrorStatus(dma);
 3317              	 .loc 2 682 0
 3318 0030 7868     	 ldr r0,[r7,#4]
 3319 0032 FFF7FEFF 	 bl XMC_DMA_GetChannelsErrorStatus
 3320 0036 7861     	 str r0,[r7,#20]
 683:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3321              	 .loc 2 683 0
 3322 0038 21E0     	 b .L145
 3323              	.L149:
 684:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 685:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3324              	 .loc 2 685 0
 3325 003a 0122     	 movs r2,#1
 3326 003c FB69     	 ldr r3,[r7,#28]
 3327 003e 02FA03F3 	 lsl r3,r2,r3
 3328 0042 3B61     	 str r3,[r7,#16]
 686:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       if ((event & mask) != 0)
 3329              	 .loc 2 686 0
 3330 0044 7A69     	 ldr r2,[r7,#20]
 3331 0046 3B69     	 ldr r3,[r7,#16]
 3332 0048 1340     	 ands r3,r3,r2
 3333 004a 002B     	 cmp r3,#0
 3334 004c 14D0     	 beq .L146
 687:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       {
 688:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 3335              	 .loc 2 688 0
 3336 004e FB69     	 ldr r3,[r7,#28]
 3337 0050 DBB2     	 uxtb r3,r3
 3338 0052 7868     	 ldr r0,[r7,#4]
 3339 0054 1946     	 mov r1,r3
 3340 0056 1022     	 movs r2,#16
 3341 0058 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 689:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 690:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 691:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3342              	 .loc 2 691 0
 3343 005c FB69     	 ldr r3,[r7,#28]
 3344 005e 9B00     	 lsls r3,r3,#2
 3345 0060 BA69     	 ldr r2,[r7,#24]
 3346 0062 1344     	 add r3,r3,r2
 3347 0064 1B68     	 ldr r3,[r3]
 3348 0066 FB60     	 str r3,[r7,#12]
 692:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3349              	 .loc 2 692 0
 3350 0068 FB68     	 ldr r3,[r7,#12]
 3351 006a 002B     	 cmp r3,#0
 3352 006c 03D0     	 beq .L147
 693:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         {
 694:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_ERROR);
 3353              	 .loc 2 694 0
 3354 006e FB68     	 ldr r3,[r7,#12]
 3355 0070 1020     	 movs r0,#16
 3356 0072 9847     	 blx r3
 695:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         }
 696:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****        
 697:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         break;
 3357              	 .loc 2 697 0
 3358 0074 07E0     	 b .L148
 3359              	.L147:
 3360 0076 06E0     	 b .L148
 3361              	.L146:
 698:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       }
 699:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       ++channel;
 3362              	 .loc 2 699 0
 3363 0078 FB69     	 ldr r3,[r7,#28]
 3364 007a 0133     	 adds r3,r3,#1
 3365 007c FB61     	 str r3,[r7,#28]
 3366              	.L145:
 683:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 3367              	 .loc 2 683 0
 3368 007e 7B69     	 ldr r3,[r7,#20]
 3369 0080 002B     	 cmp r3,#0
 3370 0082 DAD1     	 bne .L149
 3371 0084 C3E0     	 b .L141
 3372              	.L148:
 3373 0086 C2E0     	 b .L141
 3374              	.L144:
 700:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 701:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 702:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3375              	 .loc 2 702 0
 3376 0088 7B69     	 ldr r3,[r7,#20]
 3377 008a 03F00103 	 and r3,r3,#1
 3378 008e 002B     	 cmp r3,#0
 3379 0090 2BD0     	 beq .L151
 703:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 704:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 3380              	 .loc 2 704 0
 3381 0092 7868     	 ldr r0,[r7,#4]
 3382 0094 FFF7FEFF 	 bl XMC_DMA_GetChannelsTransferCompleteStatus
 3383 0098 7861     	 str r0,[r7,#20]
 705:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3384              	 .loc 2 705 0
 3385 009a 21E0     	 b .L152
 3386              	.L156:
 706:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 707:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3387              	 .loc 2 707 0
 3388 009c 0122     	 movs r2,#1
 3389 009e FB69     	 ldr r3,[r7,#28]
 3390 00a0 02FA03F3 	 lsl r3,r2,r3
 3391 00a4 3B61     	 str r3,[r7,#16]
 708:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3392              	 .loc 2 708 0
 3393 00a6 7A69     	 ldr r2,[r7,#20]
 3394 00a8 3B69     	 ldr r3,[r7,#16]
 3395 00aa 1340     	 ands r3,r3,r2
 3396 00ac 002B     	 cmp r3,#0
 3397 00ae 14D0     	 beq .L153
 709:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       {
 710:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TR
 3398              	 .loc 2 710 0
 3399 00b0 FB69     	 ldr r3,[r7,#28]
 3400 00b2 DBB2     	 uxtb r3,r3
 3401 00b4 7868     	 ldr r0,[r7,#4]
 3402 00b6 1946     	 mov r1,r3
 3403 00b8 0F22     	 movs r2,#15
 3404 00ba FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 711:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_BL
 712:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 713:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 714:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 715:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 716:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3405              	 .loc 2 716 0
 3406 00be FB69     	 ldr r3,[r7,#28]
 3407 00c0 9B00     	 lsls r3,r3,#2
 3408 00c2 BA69     	 ldr r2,[r7,#24]
 3409 00c4 1344     	 add r3,r3,r2
 3410 00c6 1B68     	 ldr r3,[r3]
 3411 00c8 FB60     	 str r3,[r7,#12]
 717:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3412              	 .loc 2 717 0
 3413 00ca FB68     	 ldr r3,[r7,#12]
 3414 00cc 002B     	 cmp r3,#0
 3415 00ce 03D0     	 beq .L154
 718:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         {
 719:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 3416              	 .loc 2 719 0
 3417 00d0 FB68     	 ldr r3,[r7,#12]
 3418 00d2 0120     	 movs r0,#1
 3419 00d4 9847     	 blx r3
 720:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         }
 721:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 																	  
 722:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         break;
 3420              	 .loc 2 722 0
 3421 00d6 07E0     	 b .L155
 3422              	.L154:
 3423 00d8 06E0     	 b .L155
 3424              	.L153:
 723:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       }
 724:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       ++channel;
 3425              	 .loc 2 724 0
 3426 00da FB69     	 ldr r3,[r7,#28]
 3427 00dc 0133     	 adds r3,r3,#1
 3428 00de FB61     	 str r3,[r7,#28]
 3429              	.L152:
 705:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 3430              	 .loc 2 705 0
 3431 00e0 7B69     	 ldr r3,[r7,#20]
 3432 00e2 002B     	 cmp r3,#0
 3433 00e4 DAD1     	 bne .L156
 3434 00e6 92E0     	 b .L141
 3435              	.L155:
 3436 00e8 91E0     	 b .L141
 3437              	.L151:
 725:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 726:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 727:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 3438              	 .loc 2 727 0
 3439 00ea 7B69     	 ldr r3,[r7,#20]
 3440 00ec 03F00203 	 and r3,r3,#2
 3441 00f0 002B     	 cmp r3,#0
 3442 00f2 2BD0     	 beq .L157
 728:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 729:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 3443              	 .loc 2 729 0
 3444 00f4 7868     	 ldr r0,[r7,#4]
 3445 00f6 FFF7FEFF 	 bl XMC_DMA_GetChannelsBlockCompleteStatus
 3446 00fa 7861     	 str r0,[r7,#20]
 730:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3447              	 .loc 2 730 0
 3448 00fc 21E0     	 b .L158
 3449              	.L162:
 731:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 732:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3450              	 .loc 2 732 0
 3451 00fe 0122     	 movs r2,#1
 3452 0100 FB69     	 ldr r3,[r7,#28]
 3453 0102 02FA03F3 	 lsl r3,r2,r3
 3454 0106 3B61     	 str r3,[r7,#16]
 733:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3455              	 .loc 2 733 0
 3456 0108 7A69     	 ldr r2,[r7,#20]
 3457 010a 3B69     	 ldr r3,[r7,#16]
 3458 010c 1340     	 ands r3,r3,r2
 3459 010e 002B     	 cmp r3,#0
 3460 0110 14D0     	 beq .L159
 734:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       {
 735:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BL
 3461              	 .loc 2 735 0
 3462 0112 FB69     	 ldr r3,[r7,#28]
 3463 0114 DBB2     	 uxtb r3,r3
 3464 0116 7868     	 ldr r0,[r7,#4]
 3465 0118 1946     	 mov r1,r3
 3466 011a 0E22     	 movs r2,#14
 3467 011c FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 736:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_SR
 737:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****                                                                       (uint32_t)XMC_DMA_CH_EVENT_DS
 738:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 739:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 740:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3468              	 .loc 2 740 0
 3469 0120 FB69     	 ldr r3,[r7,#28]
 3470 0122 9B00     	 lsls r3,r3,#2
 3471 0124 BA69     	 ldr r2,[r7,#24]
 3472 0126 1344     	 add r3,r3,r2
 3473 0128 1B68     	 ldr r3,[r3]
 3474 012a FB60     	 str r3,[r7,#12]
 741:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3475              	 .loc 2 741 0
 3476 012c FB68     	 ldr r3,[r7,#12]
 3477 012e 002B     	 cmp r3,#0
 3478 0130 03D0     	 beq .L160
 742:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         {
 743:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 3479              	 .loc 2 743 0
 3480 0132 FB68     	 ldr r3,[r7,#12]
 3481 0134 0220     	 movs r0,#2
 3482 0136 9847     	 blx r3
 744:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         }
 745:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 746:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         break;
 3483              	 .loc 2 746 0
 3484 0138 07E0     	 b .L161
 3485              	.L160:
 3486 013a 06E0     	 b .L161
 3487              	.L159:
 747:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       }
 748:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       ++channel;
 3488              	 .loc 2 748 0
 3489 013c FB69     	 ldr r3,[r7,#28]
 3490 013e 0133     	 adds r3,r3,#1
 3491 0140 FB61     	 str r3,[r7,#28]
 3492              	.L158:
 730:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 3493              	 .loc 2 730 0
 3494 0142 7B69     	 ldr r3,[r7,#20]
 3495 0144 002B     	 cmp r3,#0
 3496 0146 DAD1     	 bne .L162
 3497 0148 61E0     	 b .L141
 3498              	.L161:
 3499 014a 60E0     	 b .L141
 3500              	.L157:
 749:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 750:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 751:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3501              	 .loc 2 751 0
 3502 014c 7B69     	 ldr r3,[r7,#20]
 3503 014e 03F00403 	 and r3,r3,#4
 3504 0152 002B     	 cmp r3,#0
 3505 0154 2BD0     	 beq .L163
 752:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 753:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 3506              	 .loc 2 753 0
 3507 0156 7868     	 ldr r0,[r7,#4]
 3508 0158 FFF7FEFF 	 bl XMC_DMA_GetChannelsSourceTransactionCompleteStatus
 3509 015c 7861     	 str r0,[r7,#20]
 754:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3510              	 .loc 2 754 0
 3511 015e 21E0     	 b .L164
 3512              	.L168:
 755:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 756:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3513              	 .loc 2 756 0
 3514 0160 0122     	 movs r2,#1
 3515 0162 FB69     	 ldr r3,[r7,#28]
 3516 0164 02FA03F3 	 lsl r3,r2,r3
 3517 0168 3B61     	 str r3,[r7,#16]
 757:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3518              	 .loc 2 757 0
 3519 016a 7A69     	 ldr r2,[r7,#20]
 3520 016c 3B69     	 ldr r3,[r7,#16]
 3521 016e 1340     	 ands r3,r3,r2
 3522 0170 002B     	 cmp r3,#0
 3523 0172 14D0     	 beq .L165
 758:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       {
 759:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTI
 3524              	 .loc 2 759 0
 3525 0174 FB69     	 ldr r3,[r7,#28]
 3526 0176 DBB2     	 uxtb r3,r3
 3527 0178 7868     	 ldr r0,[r7,#4]
 3528 017a 1946     	 mov r1,r3
 3529 017c 0422     	 movs r2,#4
 3530 017e FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 760:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 761:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 762:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3531              	 .loc 2 762 0
 3532 0182 FB69     	 ldr r3,[r7,#28]
 3533 0184 9B00     	 lsls r3,r3,#2
 3534 0186 BA69     	 ldr r2,[r7,#24]
 3535 0188 1344     	 add r3,r3,r2
 3536 018a 1B68     	 ldr r3,[r3]
 3537 018c FB60     	 str r3,[r7,#12]
 763:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3538              	 .loc 2 763 0
 3539 018e FB68     	 ldr r3,[r7,#12]
 3540 0190 002B     	 cmp r3,#0
 3541 0192 03D0     	 beq .L166
 764:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         {
 765:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 3542              	 .loc 2 765 0
 3543 0194 FB68     	 ldr r3,[r7,#12]
 3544 0196 0420     	 movs r0,#4
 3545 0198 9847     	 blx r3
 766:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         }
 767:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         
 768:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         break;
 3546              	 .loc 2 768 0
 3547 019a 07E0     	 b .L167
 3548              	.L166:
 3549 019c 06E0     	 b .L167
 3550              	.L165:
 769:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       }
 770:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       ++channel;
 3551              	 .loc 2 770 0
 3552 019e FB69     	 ldr r3,[r7,#28]
 3553 01a0 0133     	 adds r3,r3,#1
 3554 01a2 FB61     	 str r3,[r7,#28]
 3555              	.L164:
 754:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 3556              	 .loc 2 754 0
 3557 01a4 7B69     	 ldr r3,[r7,#20]
 3558 01a6 002B     	 cmp r3,#0
 3559 01a8 DAD1     	 bne .L168
 3560 01aa 30E0     	 b .L141
 3561              	.L167:
 3562 01ac 2FE0     	 b .L141
 3563              	.L163:
 771:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 772:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 773:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 3564              	 .loc 2 773 0
 3565 01ae 7B69     	 ldr r3,[r7,#20]
 3566 01b0 03F00803 	 and r3,r3,#8
 3567 01b4 002B     	 cmp r3,#0
 3568 01b6 2AD0     	 beq .L141
 774:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 775:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 3569              	 .loc 2 775 0
 3570 01b8 7868     	 ldr r0,[r7,#4]
 3571 01ba FFF7FEFF 	 bl XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
 3572 01be 7861     	 str r0,[r7,#20]
 776:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     while (event != 0)
 3573              	 .loc 2 776 0
 3574 01c0 21E0     	 b .L169
 3575              	.L173:
 777:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 778:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       mask = (uint32_t)1U << channel;
 3576              	 .loc 2 778 0
 3577 01c2 0122     	 movs r2,#1
 3578 01c4 FB69     	 ldr r3,[r7,#28]
 3579 01c6 02FA03F3 	 lsl r3,r2,r3
 3580 01ca 3B61     	 str r3,[r7,#16]
 779:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       if (event & mask)
 3581              	 .loc 2 779 0
 3582 01cc 7A69     	 ldr r2,[r7,#20]
 3583 01ce 3B69     	 ldr r3,[r7,#16]
 3584 01d0 1340     	 ands r3,r3,r2
 3585 01d2 002B     	 cmp r3,#0
 3586 01d4 14D0     	 beq .L170
 780:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       {
 781:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTI
 3587              	 .loc 2 781 0
 3588 01d6 FB69     	 ldr r3,[r7,#28]
 3589 01d8 DBB2     	 uxtb r3,r3
 3590 01da 7868     	 ldr r0,[r7,#4]
 3591 01dc 1946     	 mov r1,r3
 3592 01de 0822     	 movs r2,#8
 3593 01e0 FFF7FEFF 	 bl XMC_DMA_CH_ClearEventStatus
 782:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 783:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         /* Call user callback to handle event */
 784:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         event_handler = dma_event_handlers[channel];
 3594              	 .loc 2 784 0
 3595 01e4 FB69     	 ldr r3,[r7,#28]
 3596 01e6 9B00     	 lsls r3,r3,#2
 3597 01e8 BA69     	 ldr r2,[r7,#24]
 3598 01ea 1344     	 add r3,r3,r2
 3599 01ec 1B68     	 ldr r3,[r3]
 3600 01ee FB60     	 str r3,[r7,#12]
 785:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         if (event_handler != NULL)
 3601              	 .loc 2 785 0
 3602 01f0 FB68     	 ldr r3,[r7,#12]
 3603 01f2 002B     	 cmp r3,#0
 3604 01f4 03D0     	 beq .L171
 786:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         {
 787:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****           event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 3605              	 .loc 2 787 0
 3606 01f6 FB68     	 ldr r3,[r7,#12]
 3607 01f8 0820     	 movs r0,#8
 3608 01fa 9847     	 blx r3
 788:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         }      
 789:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 790:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****         break;
 3609              	 .loc 2 790 0
 3610 01fc 07E0     	 b .L172
 3611              	.L171:
 3612 01fe 06E0     	 b .L172
 3613              	.L170:
 791:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       }
 792:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****       ++channel;
 3614              	 .loc 2 792 0
 3615 0200 FB69     	 ldr r3,[r7,#28]
 3616 0202 0133     	 adds r3,r3,#1
 3617 0204 FB61     	 str r3,[r7,#28]
 3618              	.L169:
 776:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     {
 3619              	 .loc 2 776 0
 3620 0206 7B69     	 ldr r3,[r7,#20]
 3621 0208 002B     	 cmp r3,#0
 3622 020a DAD1     	 bne .L173
 3623 020c FFE7     	 b .L141
 3624              	.L172:
 3625              	.L141:
 793:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     }
 794:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 795:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   else
 796:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   {
 797:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****     /* no active interrupt was found? */
 798:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c ****   }
 799:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** 
 800:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_dma.c **** }
 3626              	 .loc 2 800 0
 3627 020e 2037     	 adds r7,r7,#32
 3628              	.LCFI230:
 3629              	 .cfi_def_cfa_offset 8
 3630 0210 BD46     	 mov sp,r7
 3631              	.LCFI231:
 3632              	 .cfi_def_cfa_register 13
 3633              	 
 3634 0212 80BD     	 pop {r7,pc}
 3635              	.L175:
 3636              	 .align 2
 3637              	.L174:
 3638 0214 00400150 	 .word 1342259200
 3639 0218 00000000 	 .word dma0_event_handlers
 3640 021c 00000000 	 .word dma1_event_handlers
 3641              	 .cfi_endproc
 3642              	.LFE216:
 3644              	 .text
 3645              	.Letext0:
 3646              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3647              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3648              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMC4700.h"
 3649              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc4_scu.h"
 3650              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 3651              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_dma.c
    {standard input}:20     .text.XMC_DMA_GetEventStatus:00000000 $t
    {standard input}:24     .text.XMC_DMA_GetEventStatus:00000000 XMC_DMA_GetEventStatus
    {standard input}:64     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 $t
    {standard input}:68     .text.XMC_DMA_GetChannelsTransferCompleteStatus:00000000 XMC_DMA_GetChannelsTransferCompleteStatus
    {standard input}:107    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 $t
    {standard input}:111    .text.XMC_DMA_GetChannelsBlockCompleteStatus:00000000 XMC_DMA_GetChannelsBlockCompleteStatus
    {standard input}:150    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 $t
    {standard input}:154    .text.XMC_DMA_GetChannelsSourceTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsSourceTransactionCompleteStatus
    {standard input}:193    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 $t
    {standard input}:197    .text.XMC_DMA_GetChannelsDestinationTransactionCompleteStatus:00000000 XMC_DMA_GetChannelsDestinationTransactionCompleteStatus
    {standard input}:236    .text.XMC_DMA_GetChannelsErrorStatus:00000000 $t
    {standard input}:240    .text.XMC_DMA_GetChannelsErrorStatus:00000000 XMC_DMA_GetChannelsErrorStatus
                            *COM*:00000020 dma0_event_handlers
                            *COM*:00000010 dma1_event_handlers
    {standard input}:281    .text.XMC_DMA_Init:00000000 $t
    {standard input}:286    .text.XMC_DMA_Init:00000000 XMC_DMA_Init
    {standard input}:326    .text.XMC_DMA_Enable:00000000 XMC_DMA_Enable
    {standard input}:321    .text.XMC_DMA_Enable:00000000 $t
    {standard input}:382    .text.XMC_DMA_Enable:00000040 $d
    {standard input}:389    .text.XMC_DMA_Disable:00000000 $t
    {standard input}:394    .text.XMC_DMA_Disable:00000000 XMC_DMA_Disable
    {standard input}:449    .text.XMC_DMA_Disable:0000003c $d
    {standard input}:456    .text.XMC_DMA_IsEnabled:00000000 $t
    {standard input}:461    .text.XMC_DMA_IsEnabled:00000000 XMC_DMA_IsEnabled
    {standard input}:606    .text.XMC_DMA_IsEnabled:000000d8 $d
    {standard input}:613    .text.XMC_DMA_EnableRequestLine:00000000 $t
    {standard input}:618    .text.XMC_DMA_EnableRequestLine:00000000 XMC_DMA_EnableRequestLine
    {standard input}:733    .text.XMC_DMA_EnableRequestLine:000000a8 $d
    {standard input}:739    .text.XMC_DMA_DisableRequestLine:00000000 $t
    {standard input}:744    .text.XMC_DMA_DisableRequestLine:00000000 XMC_DMA_DisableRequestLine
    {standard input}:814    .text.XMC_DMA_DisableRequestLine:00000058 $d
    {standard input}:820    .text.XMC_DMA_ClearRequestLine:00000000 $t
    {standard input}:825    .text.XMC_DMA_ClearRequestLine:00000000 XMC_DMA_ClearRequestLine
    {standard input}:919    .text.XMC_DMA_ClearRequestLine:00000088 $d
    {standard input}:925    .text.XMC_DMA_GetOverrunStatus:00000000 $t
    {standard input}:930    .text.XMC_DMA_GetOverrunStatus:00000000 XMC_DMA_GetOverrunStatus
    {standard input}:1000   .text.XMC_DMA_GetOverrunStatus:00000058 $d
    {standard input}:1006   .text.XMC_DMA_ClearOverrunStatus:00000000 $t
    {standard input}:1011   .text.XMC_DMA_ClearOverrunStatus:00000000 XMC_DMA_ClearOverrunStatus
    {standard input}:1073   .text.XMC_DMA_ClearOverrunStatus:00000048 $d
    {standard input}:1079   .text.XMC_DMA_CH_Disable:00000000 $t
    {standard input}:1084   .text.XMC_DMA_CH_Disable:00000000 XMC_DMA_CH_Disable
    {standard input}:1141   .text.XMC_DMA_CH_IsEnabled:00000000 $t
    {standard input}:1146   .text.XMC_DMA_CH_IsEnabled:00000000 XMC_DMA_CH_IsEnabled
    {standard input}:1195   .text.XMC_DMA_CH_Init:00000000 $t
    {standard input}:1200   .text.XMC_DMA_CH_Init:00000000 XMC_DMA_CH_Init
    {standard input}:2155   .text.XMC_DMA_CH_ClearEventStatus:00000000 XMC_DMA_CH_ClearEventStatus
    {standard input}:1555   .text.XMC_DMA_CH_Init:000002a0 $d
    {standard input}:1564   .text.XMC_DMA_CH_Init:000002c4 $t
    {standard input}:1656   .text.XMC_DMA_CH_Init:00000374 $d
    {standard input}:1659   .text.XMC_DMA_CH_Init:00000378 $t
    {standard input}:1817   .text.XMC_DMA_CH_Suspend:00000000 $t
    {standard input}:1822   .text.XMC_DMA_CH_Suspend:00000000 XMC_DMA_CH_Suspend
    {standard input}:1878   .text.XMC_DMA_CH_Resume:00000000 $t
    {standard input}:1883   .text.XMC_DMA_CH_Resume:00000000 XMC_DMA_CH_Resume
    {standard input}:1939   .text.XMC_DMA_CH_IsSuspended:00000000 $t
    {standard input}:1944   .text.XMC_DMA_CH_IsSuspended:00000000 XMC_DMA_CH_IsSuspended
    {standard input}:1996   .text.XMC_DMA_CH_EnableEvent:00000000 $t
    {standard input}:2001   .text.XMC_DMA_CH_EnableEvent:00000000 XMC_DMA_CH_EnableEvent
    {standard input}:2073   .text.XMC_DMA_CH_DisableEvent:00000000 $t
    {standard input}:2078   .text.XMC_DMA_CH_DisableEvent:00000000 XMC_DMA_CH_DisableEvent
    {standard input}:2150   .text.XMC_DMA_CH_ClearEventStatus:00000000 $t
    {standard input}:2227   .text.XMC_DMA_CH_GetEventStatus:00000000 $t
    {standard input}:2232   .text.XMC_DMA_CH_GetEventStatus:00000000 XMC_DMA_CH_GetEventStatus
    {standard input}:2313   .text.XMC_DMA_CH_EnableSourceGather:00000000 $t
    {standard input}:2318   .text.XMC_DMA_CH_EnableSourceGather:00000000 XMC_DMA_CH_EnableSourceGather
    {standard input}:2393   .text.XMC_DMA_CH_DisableSourceGather:00000000 $t
    {standard input}:2398   .text.XMC_DMA_CH_DisableSourceGather:00000000 XMC_DMA_CH_DisableSourceGather
    {standard input}:2454   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 $t
    {standard input}:2459   .text.XMC_DMA_CH_EnableDestinationScatter:00000000 XMC_DMA_CH_EnableDestinationScatter
    {standard input}:2534   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 $t
    {standard input}:2539   .text.XMC_DMA_CH_DisableDestinationScatter:00000000 XMC_DMA_CH_DisableDestinationScatter
    {standard input}:2595   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 $t
    {standard input}:2600   .text.XMC_DMA_CH_TriggerSourceRequest:00000000 XMC_DMA_CH_TriggerSourceRequest
    {standard input}:2681   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 $t
    {standard input}:2686   .text.XMC_DMA_CH_TriggerDestinationRequest:00000000 XMC_DMA_CH_TriggerDestinationRequest
    {standard input}:2767   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 $t
    {standard input}:2772   .text.XMC_DMA_CH_EnableSourceAddressReload:00000000 XMC_DMA_CH_EnableSourceAddressReload
    {standard input}:2828   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 $t
    {standard input}:2833   .text.XMC_DMA_CH_DisableSourceAddressReload:00000000 XMC_DMA_CH_DisableSourceAddressReload
    {standard input}:2889   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 $t
    {standard input}:2894   .text.XMC_DMA_CH_EnableDestinationAddressReload:00000000 XMC_DMA_CH_EnableDestinationAddressReload
    {standard input}:2950   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 $t
    {standard input}:2955   .text.XMC_DMA_CH_DisableDestinationAddressReload:00000000 XMC_DMA_CH_DisableDestinationAddressReload
    {standard input}:3011   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 $t
    {standard input}:3016   .text.XMC_DMA_CH_RequestLastMultiblockTransfer:00000000 XMC_DMA_CH_RequestLastMultiblockTransfer
    {standard input}:3091   .text.XMC_DMA_CH_SetEventHandler:00000000 $t
    {standard input}:3096   .text.XMC_DMA_CH_SetEventHandler:00000000 XMC_DMA_CH_SetEventHandler
    {standard input}:3151   .text.XMC_DMA_CH_SetEventHandler:00000038 $d
    {standard input}:3158   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 $t
    {standard input}:3163   .text.XMC_DMA_CH_ClearSourcePeripheralRequest:00000000 XMC_DMA_CH_ClearSourcePeripheralRequest
    {standard input}:3213   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 $t
    {standard input}:3218   .text.XMC_DMA_CH_ClearDestinationPeripheralRequest:00000000 XMC_DMA_CH_ClearDestinationPeripheralRequest
    {standard input}:3268   .text.XMC_DMA_IRQHandler:00000000 $t
    {standard input}:3273   .text.XMC_DMA_IRQHandler:00000000 XMC_DMA_IRQHandler
    {standard input}:3638   .text.XMC_DMA_IRQHandler:00000214 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_CLOCK_UngatePeripheralClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_GatePeripheralClock
XMC_SCU_RESET_IsPeripheralResetAsserted
XMC_SCU_CLOCK_IsPeripheralClockGated
