   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_eru.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_ERU_ETL_Init,"ax",%progbits
  20              	 .align 2
  21              	 .global XMC_ERU_ETL_Init
  22              	 .thumb
  23              	 .thumb_func
  25              	XMC_ERU_ETL_Init:
  26              	.LFB139:
  27              	 .file 1 "../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c"
   1:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /**
   2:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * @file xmc_eru.c
   3:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * @date 2016-03-10
   4:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *
   5:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * @cond
   6:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
   7:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *
   9:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * All rights reserved.                        
  11:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *                                             
  12:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * following conditions are met:   
  14:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *                                                                              
  15:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * disclaimer.                        
  17:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * 
  18:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * 
  21:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * products derived from this software without specific prior written permission.                  
  23:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *                                                                              
  24:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *                                                                              
  32:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  35:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *
  36:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * Change History
  37:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * --------------
  38:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *
  39:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * 2015-02-20:
  40:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *     - Initial <br>
  41:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *
  42:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * 2015-06-20:
  43:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *     - Removed definition of GetDriverVersion API <br>
  44:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *
  45:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * 2016-03-10:
  46:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *     - XMC_ERU_ETL_GetEdgeDetection() API is added to get the configured edge for event generatio
  47:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  *
  48:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * @endcond
  49:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  */
  50:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
  51:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  52:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * HEADER FILES
  53:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  54:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
  55:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #include "xmc_eru.h"
  56:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
  57:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
  58:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * MACROS
  59:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
  60:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
  61:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_BITSIZE (4UL) /* Used to set the input for path A and path B based on the channe
  62:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define ERU_EXISEL_INPUT_BITSIZE (2UL)
  63:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
  64:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_A(input) \
  65:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_A0) || \
  66:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A1) || \
  67:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A2) || \
  68:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_A3))
  69:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
  70:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_INPUT_B(input) \
  71:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_ETL_INPUT_B0) || \
  72:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B1) || \
  73:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B2) || \
  74:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_ETL_INPUT_B3))
  75:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
  76:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_STATUS_FLAG_MODE(mode) \
  77:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****     ((mode == XMC_ERU_ETL_STATUS_FLAG_MODE_SWCTRL) || \
  78:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (mode == XMC_ERU_ETL_STATUS_FLAG_MODE_HWCTRL))
  79:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
  80:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_EVENT_SOURCE(source) \
  81:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****     ((source == XMC_ERU_ETL_SOURCE_A)              || \
  82:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_B)              || \
  83:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_B)         || \
  84:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_B)        || \
  85:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A)          || \
  86:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_B)     || \
  87:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_B)    || \
  88:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_B)          || \
  89:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_OR_NOT_B)     || \
  90:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_A_AND_NOT_B)    || \
  91:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_OR_NOT_B) || \
  92:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (source == XMC_ERU_ETL_SOURCE_NOT_A_AND_NOT_B))
  93:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
  94:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_EDGE(edge) \
  95:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****     ((edge == XMC_ERU_ETL_EDGE_DETECTION_DISABLED) || \
  96:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_RISING) || \
  97:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_FALLING) || \
  98:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (edge == XMC_ERU_ETL_EDGE_DETECTION_BOTH))
  99:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 100:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define XMC_ERU_ETL_CHECK_TRIGGER_CHANNEL(channel) \
 101:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****     ((channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL0) || \
 102:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL1) || \
 103:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL2) || \
 104:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (channel == XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL3))
 105:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 106:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PATTERN_INPUT(input) \
 107:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****     ((input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT0) || \
 108:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT1) || \
 109:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT2) || \
 110:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (input == XMC_ERU_OGU_PATTERN_DETECTION_INPUT3))
 111:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 112:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(trigger) \
 113:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****     ((trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER1) || \
 114:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER2) || \
 115:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (trigger == XMC_ERU_OGU_PERIPHERAL_TRIGGER3))
 116:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 117:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** #define XMC_ERU_OGU_CHECK_SERIVCE_REQUEST(service) \
 118:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****     ((service == XMC_ERU_OGU_SERVICE_REQUEST_DISABLED) || \
 119:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER) || \
 120:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MATCH) || \
 121:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****      (service == XMC_ERU_OGU_SERVICE_REQUEST_ON_TRIGGER_AND_PATTERN_MISMATCH))
 122:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  
 123:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /**************************************************************************************************
 124:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * API IMPLEMENTATION
 125:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  **************************************************************************************************
 126:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_ETLx channel with the config structure.  */
 127:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_Init(XMC_ERU_t *const eru,
 128:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 129:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_ETL_CONFIG_t *const config)
 130:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** { 
  28              	 .loc 1 130 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 80B5     	 push {r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 7,-8
  36              	 .cfi_offset 14,-4
  37 0002 84B0     	 sub sp,sp,#16
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 24
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 0B46     	 mov r3,r1
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c FB72     	 strb r3,[r7,#11]
 131:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 132:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_Init:Invalid Channel Number", (channel < 4U));
 133:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 134:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
  47              	 .loc 1 134 0
  48 000e F868     	 ldr r0,[r7,#12]
  49 0010 FFF7FEFF 	 bl XMC_ERU_Enable
 135:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 136:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & 
  50              	 .loc 1 136 0
  51 0014 FB68     	 ldr r3,[r7,#12]
  52 0016 1A68     	 ldr r2,[r3]
 137:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  53              	 .loc 1 137 0
  54 0018 FB7A     	 ldrb r3,[r7,#11]
  55 001a 9B00     	 lsls r3,r3,#2
  56 001c 1946     	 mov r1,r3
  57 001e 0F23     	 movs r3,#15
  58 0020 8B40     	 lsls r3,r3,r1
  59 0022 DB43     	 mvns r3,r3
 136:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  60              	 .loc 1 136 0
  61 0024 1A40     	 ands r2,r2,r3
 138:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                 (config->input << (channel * (uint32_t)ERU_EXISEL_BITSIZE));
  62              	 .loc 1 138 0
  63 0026 7B68     	 ldr r3,[r7,#4]
  64 0028 1B68     	 ldr r3,[r3]
  65 002a F97A     	 ldrb r1,[r7,#11]
  66 002c 8900     	 lsls r1,r1,#2
  67 002e 8B40     	 lsls r3,r3,r1
 137:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  68              	 .loc 1 137 0
  69 0030 1A43     	 orrs r2,r2,r3
 136:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                  ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channel * ERU_EXISEL
  70              	 .loc 1 136 0
  71 0032 FB68     	 ldr r3,[r7,#12]
  72 0034 1968     	 ldr r1,[r3]
  73 0036 0021     	 movs r1,#0
  74 0038 0A43     	 orrs r2,r2,r1
  75 003a 1A60     	 str r2,[r3]
 139:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   
 140:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXICON[channel] = config->raw;
  76              	 .loc 1 140 0
  77 003c FA7A     	 ldrb r2,[r7,#11]
  78 003e 7B68     	 ldr r3,[r7,#4]
  79 0040 5968     	 ldr r1,[r3,#4]
  80 0042 FB68     	 ldr r3,[r7,#12]
  81 0044 0432     	 adds r2,r2,#4
  82 0046 53F82200 	 ldr r0,[r3,r2,lsl#2]
  83 004a 0020     	 movs r0,#0
  84 004c 0143     	 orrs r1,r1,r0
  85 004e 43F82210 	 str r1,[r3,r2,lsl#2]
 141:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
  86              	 .loc 1 141 0
  87 0052 1037     	 adds r7,r7,#16
  88              	.LCFI3:
  89              	 .cfi_def_cfa_offset 8
  90 0054 BD46     	 mov sp,r7
  91              	.LCFI4:
  92              	 .cfi_def_cfa_register 13
  93              	 
  94 0056 80BD     	 pop {r7,pc}
  95              	 .cfi_endproc
  96              	.LFE139:
  98              	 .section .text.XMC_ERU_OGU_Init,"ax",%progbits
  99              	 .align 2
 100              	 .global XMC_ERU_OGU_Init
 101              	 .thumb
 102              	 .thumb_func
 104              	XMC_ERU_OGU_Init:
 105              	.LFB140:
 142:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 143:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Initializes the selected ERU_OGUy channel with the config structure.  */
 144:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_Init(XMC_ERU_t *const eru,
 145:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                       const uint8_t channel,
 146:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                       const XMC_ERU_OGU_CONFIG_t *const config)
 147:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 106              	 .loc 1 147 0
 107              	 .cfi_startproc
 108              	 
 109              	 
 110 0000 80B5     	 push {r7,lr}
 111              	.LCFI5:
 112              	 .cfi_def_cfa_offset 8
 113              	 .cfi_offset 7,-8
 114              	 .cfi_offset 14,-4
 115 0002 84B0     	 sub sp,sp,#16
 116              	.LCFI6:
 117              	 .cfi_def_cfa_offset 24
 118 0004 00AF     	 add r7,sp,#0
 119              	.LCFI7:
 120              	 .cfi_def_cfa_register 7
 121 0006 F860     	 str r0,[r7,#12]
 122 0008 0B46     	 mov r3,r1
 123 000a 7A60     	 str r2,[r7,#4]
 124 000c FB72     	 strb r3,[r7,#11]
 148:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 149:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_Init:Invalid Channel Number", (channel < 4U));
 150:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 151:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ERU_Enable(eru);
 125              	 .loc 1 151 0
 126 000e F868     	 ldr r0,[r7,#12]
 127 0010 FFF7FEFF 	 bl XMC_ERU_Enable
 152:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 153:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXOCON[channel] = config->raw;
 128              	 .loc 1 153 0
 129 0014 FA7A     	 ldrb r2,[r7,#11]
 130 0016 7B68     	 ldr r3,[r7,#4]
 131 0018 1968     	 ldr r1,[r3]
 132 001a FB68     	 ldr r3,[r7,#12]
 133 001c 0832     	 adds r2,r2,#8
 134 001e 53F82200 	 ldr r0,[r3,r2,lsl#2]
 135 0022 0020     	 movs r0,#0
 136 0024 0143     	 orrs r1,r1,r0
 137 0026 43F82210 	 str r1,[r3,r2,lsl#2]
 154:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 138              	 .loc 1 154 0
 139 002a 1037     	 adds r7,r7,#16
 140              	.LCFI8:
 141              	 .cfi_def_cfa_offset 8
 142 002c BD46     	 mov sp,r7
 143              	.LCFI9:
 144              	 .cfi_def_cfa_register 13
 145              	 
 146 002e 80BD     	 pop {r7,pc}
 147              	 .cfi_endproc
 148              	.LFE140:
 150              	 .section .text.XMC_ERU_ETL_SetInput,"ax",%progbits
 151              	 .align 2
 152              	 .global XMC_ERU_ETL_SetInput
 153              	 .thumb
 154              	 .thumb_func
 156              	XMC_ERU_ETL_SetInput:
 157              	.LFB141:
 155:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 156:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Configures the event source for path A and path B, with selected input_a and input_b respectivel
 157:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetInput(XMC_ERU_t *const eru,
 158:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 159:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_A_t input_a,
 160:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_INPUT_B_t input_b)
 161:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 158              	 .loc 1 161 0
 159              	 .cfi_startproc
 160              	 
 161              	 
 162              	 
 163 0000 80B4     	 push {r7}
 164              	.LCFI10:
 165              	 .cfi_def_cfa_offset 4
 166              	 .cfi_offset 7,-4
 167 0002 83B0     	 sub sp,sp,#12
 168              	.LCFI11:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI12:
 172              	 .cfi_def_cfa_register 7
 173 0006 7860     	 str r0,[r7,#4]
 174 0008 0846     	 mov r0,r1
 175 000a 1146     	 mov r1,r2
 176 000c 1A46     	 mov r2,r3
 177 000e 0346     	 mov r3,r0
 178 0010 FB70     	 strb r3,[r7,#3]
 179 0012 0B46     	 mov r3,r1
 180 0014 BB70     	 strb r3,[r7,#2]
 181 0016 1346     	 mov r3,r2
 182 0018 7B70     	 strb r3,[r7,#1]
 162:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 163:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid Channel Number", (channel < 4U));
 164:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid A", XMC_ERU_ETL_CHECK_INPUT_A(input_a));
 165:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetInput:Invalid B", XMC_ERU_ETL_CHECK_INPUT_B(input_b));
 166:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 167:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXISEL = (eru->EXISEL & ~((uint32_t)(ERU_EXISEL_EXS0A_Msk | ERU_EXISEL_EXS0B_Msk) << (channe
 183              	 .loc 1 167 0
 184 001a 7B68     	 ldr r3,[r7,#4]
 185 001c 1A68     	 ldr r2,[r3]
 186 001e FB78     	 ldrb r3,[r7,#3]
 187 0020 9B00     	 lsls r3,r3,#2
 188 0022 1946     	 mov r1,r3
 189 0024 0F23     	 movs r3,#15
 190 0026 8B40     	 lsls r3,r3,r1
 191 0028 DB43     	 mvns r3,r3
 192 002a 1A40     	 ands r2,r2,r3
 168:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 193              	 .loc 1 168 0
 194 002c BB78     	 ldrb r3,[r7,#2]
 195 002e 7978     	 ldrb r1,[r7,#1]
 196 0030 8900     	 lsls r1,r1,#2
 197 0032 0B43     	 orrs r3,r3,r1
 198 0034 F978     	 ldrb r1,[r7,#3]
 199 0036 8900     	 lsls r1,r1,#2
 200 0038 8B40     	 lsls r3,r3,r1
 167:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                 (((uint32_t)input_a | (uint32_t)(input_b << ERU_EXISEL_INPUT_BITSIZE))  << (channel
 201              	 .loc 1 167 0
 202 003a 1A43     	 orrs r2,r2,r3
 203 003c 7B68     	 ldr r3,[r7,#4]
 204 003e 1968     	 ldr r1,[r3]
 205 0040 0021     	 movs r1,#0
 206 0042 0A43     	 orrs r2,r2,r1
 207 0044 1A60     	 str r2,[r3]
 169:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 208              	 .loc 1 169 0
 209 0046 0C37     	 adds r7,r7,#12
 210              	.LCFI13:
 211              	 .cfi_def_cfa_offset 4
 212 0048 BD46     	 mov sp,r7
 213              	.LCFI14:
 214              	 .cfi_def_cfa_register 13
 215              	 
 216 004a 5DF8047B 	 ldr r7,[sp],#4
 217              	.LCFI15:
 218              	 .cfi_restore 7
 219              	 .cfi_def_cfa_offset 0
 220 004e 7047     	 bx lr
 221              	 .cfi_endproc
 222              	.LFE141:
 224              	 .section .text.XMC_ERU_ETL_SetSource,"ax",%progbits
 225              	 .align 2
 226              	 .global XMC_ERU_ETL_SetSource
 227              	 .thumb
 228              	 .thumb_func
 230              	XMC_ERU_ETL_SetSource:
 231              	.LFB142:
 170:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 171:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Select input path combination along with polarity for event generation by setting (SS, NA, NB) b
 172:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****    EXICONx(x = [0 to 3]) register */
 173:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetSource(XMC_ERU_t *const eru,
 174:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                           const uint8_t channel,
 175:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                           const XMC_ERU_ETL_SOURCE_t source)
 176:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 232              	 .loc 1 176 0
 233              	 .cfi_startproc
 234              	 
 235              	 
 236              	 
 237 0000 80B4     	 push {r7}
 238              	.LCFI16:
 239              	 .cfi_def_cfa_offset 4
 240              	 .cfi_offset 7,-4
 241 0002 83B0     	 sub sp,sp,#12
 242              	.LCFI17:
 243              	 .cfi_def_cfa_offset 16
 244 0004 00AF     	 add r7,sp,#0
 245              	.LCFI18:
 246              	 .cfi_def_cfa_register 7
 247 0006 7860     	 str r0,[r7,#4]
 248 0008 0B46     	 mov r3,r1
 249 000a FB70     	 strb r3,[r7,#3]
 250 000c 1346     	 mov r3,r2
 251 000e BB70     	 strb r3,[r7,#2]
 177:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 178:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Channel Number", (channel < 4U));
 179:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetSource:Invalid Source", XMC_ERU_ETL_CHECK_EVENT_SOURCE(source));
 180:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 181:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].SS = (uint8_t)source;
 252              	 .loc 1 181 0
 253 0010 FA78     	 ldrb r2,[r7,#3]
 254 0012 BB78     	 ldrb r3,[r7,#2]
 255 0014 03F00F03 	 and r3,r3,#15
 256 0018 D9B2     	 uxtb r1,r3
 257 001a 7B68     	 ldr r3,[r7,#4]
 258 001c 0432     	 adds r2,r2,#4
 259 001e 01F00F01 	 and r1,r1,#15
 260 0022 0902     	 lsls r1,r1,#8
 261 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 262 0028 20F47060 	 bic r0,r0,#3840
 263 002c 0143     	 orrs r1,r1,r0
 264 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 182:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 265              	 .loc 1 182 0
 266 0032 0C37     	 adds r7,r7,#12
 267              	.LCFI19:
 268              	 .cfi_def_cfa_offset 4
 269 0034 BD46     	 mov sp,r7
 270              	.LCFI20:
 271              	 .cfi_def_cfa_register 13
 272              	 
 273 0036 5DF8047B 	 ldr r7,[sp],#4
 274              	.LCFI21:
 275              	 .cfi_restore 7
 276              	 .cfi_def_cfa_offset 0
 277 003a 7047     	 bx lr
 278              	 .cfi_endproc
 279              	.LFE142:
 281              	 .section .text.XMC_ERU_ETL_SetEdgeDetection,"ax",%progbits
 282              	 .align 2
 283              	 .global XMC_ERU_ETL_SetEdgeDetection
 284              	 .thumb
 285              	 .thumb_func
 287              	XMC_ERU_ETL_SetEdgeDetection:
 288              	.LFB143:
 183:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 184:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Configure event trigger edge/s by setting (RE, FE) bits of EXICONx(x = [0 to 3]) register.*/
 185:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetEdgeDetection(XMC_ERU_t *const eru,
 186:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                   const uint8_t channel,
 187:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                   const XMC_ERU_ETL_EDGE_DETECTION_t edge_detection)
 188:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 289              	 .loc 1 188 0
 290              	 .cfi_startproc
 291              	 
 292              	 
 293              	 
 294 0000 80B4     	 push {r7}
 295              	.LCFI22:
 296              	 .cfi_def_cfa_offset 4
 297              	 .cfi_offset 7,-4
 298 0002 83B0     	 sub sp,sp,#12
 299              	.LCFI23:
 300              	 .cfi_def_cfa_offset 16
 301 0004 00AF     	 add r7,sp,#0
 302              	.LCFI24:
 303              	 .cfi_def_cfa_register 7
 304 0006 7860     	 str r0,[r7,#4]
 305 0008 0B46     	 mov r3,r1
 306 000a FB70     	 strb r3,[r7,#3]
 307 000c 1346     	 mov r3,r2
 308 000e BB70     	 strb r3,[r7,#2]
 189:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 190:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Channel Number", (channel < 4U));
 191:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetEdgeDetection:Invalid Trigger Edge", XMC_ERU_ETL_CHECK_TRIGGER_EDGE(ed
 192:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 193:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].ED = (uint8_t)edge_detection;
 309              	 .loc 1 193 0
 310 0010 FA78     	 ldrb r2,[r7,#3]
 311 0012 BB78     	 ldrb r3,[r7,#2]
 312 0014 03F00303 	 and r3,r3,#3
 313 0018 D9B2     	 uxtb r1,r3
 314 001a 7B68     	 ldr r3,[r7,#4]
 315 001c 0432     	 adds r2,r2,#4
 316 001e 01F00301 	 and r1,r1,#3
 317 0022 8900     	 lsls r1,r1,#2
 318 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 319 0028 20F00C00 	 bic r0,r0,#12
 320 002c 0143     	 orrs r1,r1,r0
 321 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 194:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 322              	 .loc 1 194 0
 323 0032 0C37     	 adds r7,r7,#12
 324              	.LCFI25:
 325              	 .cfi_def_cfa_offset 4
 326 0034 BD46     	 mov sp,r7
 327              	.LCFI26:
 328              	 .cfi_def_cfa_register 13
 329              	 
 330 0036 5DF8047B 	 ldr r7,[sp],#4
 331              	.LCFI27:
 332              	 .cfi_restore 7
 333              	 .cfi_def_cfa_offset 0
 334 003a 7047     	 bx lr
 335              	 .cfi_endproc
 336              	.LFE143:
 338              	 .section .text.XMC_ERU_ETL_GetEdgeDetection,"ax",%progbits
 339              	 .align 2
 340              	 .global XMC_ERU_ETL_GetEdgeDetection
 341              	 .thumb
 342              	 .thumb_func
 344              	XMC_ERU_ETL_GetEdgeDetection:
 345              	.LFB144:
 195:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 196:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Returns the configured event trigger edge/s by reading (RE, FE) bits of EXICONx(x = [0 to 3]) re
 197:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** XMC_ERU_ETL_EDGE_DETECTION_t XMC_ERU_ETL_GetEdgeDetection(XMC_ERU_t *const eru, const uint8_t chann
 198:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 346              	 .loc 1 198 0
 347              	 .cfi_startproc
 348              	 
 349              	 
 350              	 
 351 0000 80B4     	 push {r7}
 352              	.LCFI28:
 353              	 .cfi_def_cfa_offset 4
 354              	 .cfi_offset 7,-4
 355 0002 83B0     	 sub sp,sp,#12
 356              	.LCFI29:
 357              	 .cfi_def_cfa_offset 16
 358 0004 00AF     	 add r7,sp,#0
 359              	.LCFI30:
 360              	 .cfi_def_cfa_register 7
 361 0006 7860     	 str r0,[r7,#4]
 362 0008 0B46     	 mov r3,r1
 363 000a FB70     	 strb r3,[r7,#3]
 199:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru));
 200:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_GetEdgeDetection:Invalid Channel Number", (channel < 4U));
 201:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   return ((XMC_ERU_ETL_EDGE_DETECTION_t)(eru->EXICON_b[channel].ED));
 364              	 .loc 1 201 0
 365 000c FA78     	 ldrb r2,[r7,#3]
 366 000e 7B68     	 ldr r3,[r7,#4]
 367 0010 0432     	 adds r2,r2,#4
 368 0012 53F82230 	 ldr r3,[r3,r2,lsl#2]
 369 0016 9B08     	 lsrs r3,r3,#2
 370 0018 03F00303 	 and r3,r3,#3
 371 001c DBB2     	 uxtb r3,r3
 202:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 372              	 .loc 1 202 0
 373 001e 1846     	 mov r0,r3
 374 0020 0C37     	 adds r7,r7,#12
 375              	.LCFI31:
 376              	 .cfi_def_cfa_offset 4
 377 0022 BD46     	 mov sp,r7
 378              	.LCFI32:
 379              	 .cfi_def_cfa_register 13
 380              	 
 381 0024 5DF8047B 	 ldr r7,[sp],#4
 382              	.LCFI33:
 383              	 .cfi_restore 7
 384              	 .cfi_def_cfa_offset 0
 385 0028 7047     	 bx lr
 386              	 .cfi_endproc
 387              	.LFE144:
 389 002a 00BF     	 .section .text.XMC_ERU_ETL_SetStatusFlagMode,"ax",%progbits
 390              	 .align 2
 391              	 .global XMC_ERU_ETL_SetStatusFlagMode
 392              	 .thumb
 393              	 .thumb_func
 395              	XMC_ERU_ETL_SetStatusFlagMode:
 396              	.LFB145:
 203:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 204:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Set the status flag bit(FL) in EXICONx(x = [0 to 3]). */
 205:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_SetStatusFlagMode(XMC_ERU_t *const eru,
 206:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                    const uint8_t channel,
 207:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                    const XMC_ERU_ETL_STATUS_FLAG_MODE_t mode)
 208:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 397              	 .loc 1 208 0
 398              	 .cfi_startproc
 399              	 
 400              	 
 401              	 
 402 0000 80B4     	 push {r7}
 403              	.LCFI34:
 404              	 .cfi_def_cfa_offset 4
 405              	 .cfi_offset 7,-4
 406 0002 83B0     	 sub sp,sp,#12
 407              	.LCFI35:
 408              	 .cfi_def_cfa_offset 16
 409 0004 00AF     	 add r7,sp,#0
 410              	.LCFI36:
 411              	 .cfi_def_cfa_register 7
 412 0006 7860     	 str r0,[r7,#4]
 413 0008 0B46     	 mov r3,r1
 414 000a FB70     	 strb r3,[r7,#3]
 415 000c 1346     	 mov r3,r2
 416 000e BB70     	 strb r3,[r7,#2]
 209:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru))
 210:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Channel Number", (channel < 4U));
 211:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_SetStatusFlagMode:Invalid Status Flag Mode", XMC_ERU_ETL_CHECK_STATUS_FLA
 212:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 213:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].LD = (uint8_t)mode;
 417              	 .loc 1 213 0
 418 0010 FA78     	 ldrb r2,[r7,#3]
 419 0012 BB78     	 ldrb r3,[r7,#2]
 420 0014 03F00103 	 and r3,r3,#1
 421 0018 D9B2     	 uxtb r1,r3
 422 001a 7B68     	 ldr r3,[r7,#4]
 423 001c 0432     	 adds r2,r2,#4
 424 001e 01F00101 	 and r1,r1,#1
 425 0022 4900     	 lsls r1,r1,#1
 426 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 427 0028 20F00200 	 bic r0,r0,#2
 428 002c 0143     	 orrs r1,r1,r0
 429 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 214:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 430              	 .loc 1 214 0
 431 0032 0C37     	 adds r7,r7,#12
 432              	.LCFI37:
 433              	 .cfi_def_cfa_offset 4
 434 0034 BD46     	 mov sp,r7
 435              	.LCFI38:
 436              	 .cfi_def_cfa_register 13
 437              	 
 438 0036 5DF8047B 	 ldr r7,[sp],#4
 439              	.LCFI39:
 440              	 .cfi_restore 7
 441              	 .cfi_def_cfa_offset 0
 442 003a 7047     	 bx lr
 443              	 .cfi_endproc
 444              	.LFE145:
 446              	 .section .text.XMC_ERU_ETL_EnableOutputTrigger,"ax",%progbits
 447              	 .align 2
 448              	 .global XMC_ERU_ETL_EnableOutputTrigger
 449              	 .thumb
 450              	 .thumb_func
 452              	XMC_ERU_ETL_EnableOutputTrigger:
 453              	.LFB146:
 215:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 216:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Configure which Channel of OGUy(Output gating unit y = [0 to 3]) to be mapped by the trigger pul
 217:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****  * ETLx(Event Trigger Logic, x = [0 to 3]) by setting (OCS and PE) bit fields. */
 218:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_EnableOutputTrigger(XMC_ERU_t *const eru,
 219:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                      const uint8_t channel,
 220:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                      const XMC_ERU_ETL_OUTPUT_TRIGGER_CHANNEL_t trigger)
 221:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 454              	 .loc 1 221 0
 455              	 .cfi_startproc
 456              	 
 457              	 
 458              	 
 459 0000 80B4     	 push {r7}
 460              	.LCFI40:
 461              	 .cfi_def_cfa_offset 4
 462              	 .cfi_offset 7,-4
 463 0002 83B0     	 sub sp,sp,#12
 464              	.LCFI41:
 465              	 .cfi_def_cfa_offset 16
 466 0004 00AF     	 add r7,sp,#0
 467              	.LCFI42:
 468              	 .cfi_def_cfa_register 7
 469 0006 7860     	 str r0,[r7,#4]
 470 0008 0B46     	 mov r3,r1
 471 000a FB70     	 strb r3,[r7,#3]
 472 000c 1346     	 mov r3,r2
 473 000e BB70     	 strb r3,[r7,#2]
 222:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(eru
 223:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Channel Number", (channel < 4U));
 224:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_EnableOutputTrigger:Invalid Output Channel", XMC_ERU_ETL_CHECK_TRIGGER_CH
 225:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 226:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].OCS = (uint8_t)trigger;
 474              	 .loc 1 226 0
 475 0010 FA78     	 ldrb r2,[r7,#3]
 476 0012 BB78     	 ldrb r3,[r7,#2]
 477 0014 03F00703 	 and r3,r3,#7
 478 0018 D9B2     	 uxtb r1,r3
 479 001a 7B68     	 ldr r3,[r7,#4]
 480 001c 0432     	 adds r2,r2,#4
 481 001e 01F00701 	 and r1,r1,#7
 482 0022 0901     	 lsls r1,r1,#4
 483 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 484 0028 20F07000 	 bic r0,r0,#112
 485 002c 0143     	 orrs r1,r1,r0
 486 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 227:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = (uint8_t)true;
 487              	 .loc 1 227 0
 488 0032 FA78     	 ldrb r2,[r7,#3]
 489 0034 7B68     	 ldr r3,[r7,#4]
 490 0036 0432     	 adds r2,r2,#4
 491 0038 53F82210 	 ldr r1,[r3,r2,lsl#2]
 492 003c 41F00101 	 orr r1,r1,#1
 493 0040 43F82210 	 str r1,[r3,r2,lsl#2]
 228:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 494              	 .loc 1 228 0
 495 0044 0C37     	 adds r7,r7,#12
 496              	.LCFI43:
 497              	 .cfi_def_cfa_offset 4
 498 0046 BD46     	 mov sp,r7
 499              	.LCFI44:
 500              	 .cfi_def_cfa_register 13
 501              	 
 502 0048 5DF8047B 	 ldr r7,[sp],#4
 503              	.LCFI45:
 504              	 .cfi_restore 7
 505              	 .cfi_def_cfa_offset 0
 506 004c 7047     	 bx lr
 507              	 .cfi_endproc
 508              	.LFE146:
 510 004e 00BF     	 .section .text.XMC_ERU_ETL_DisableOutputTrigger,"ax",%progbits
 511              	 .align 2
 512              	 .global XMC_ERU_ETL_DisableOutputTrigger
 513              	 .thumb
 514              	 .thumb_func
 516              	XMC_ERU_ETL_DisableOutputTrigger:
 517              	.LFB147:
 229:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 230:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Disables the trigger pulse generation by clearing the (PE) of the EXICONx(x = [0 to 3]). */
 231:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_ETL_DisableOutputTrigger(XMC_ERU_t *const eru, const uint8_t channel)
 232:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 518              	 .loc 1 232 0
 519              	 .cfi_startproc
 520              	 
 521              	 
 522              	 
 523 0000 80B4     	 push {r7}
 524              	.LCFI46:
 525              	 .cfi_def_cfa_offset 4
 526              	 .cfi_offset 7,-4
 527 0002 83B0     	 sub sp,sp,#12
 528              	.LCFI47:
 529              	 .cfi_def_cfa_offset 16
 530 0004 00AF     	 add r7,sp,#0
 531              	.LCFI48:
 532              	 .cfi_def_cfa_register 7
 533 0006 7860     	 str r0,[r7,#4]
 534 0008 0B46     	 mov r3,r1
 535 000a FB70     	 strb r3,[r7,#3]
 233:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(er
 234:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_ETL_DisableOutputTrigger:Invalid Channel Number", (channel < 4U));
 235:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 236:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXICON_b[channel].PE = false;
 536              	 .loc 1 236 0
 537 000c FA78     	 ldrb r2,[r7,#3]
 538 000e 7B68     	 ldr r3,[r7,#4]
 539 0010 0432     	 adds r2,r2,#4
 540 0012 53F82210 	 ldr r1,[r3,r2,lsl#2]
 541 0016 21F00101 	 bic r1,r1,#1
 542 001a 43F82210 	 str r1,[r3,r2,lsl#2]
 237:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 543              	 .loc 1 237 0
 544 001e 0C37     	 adds r7,r7,#12
 545              	.LCFI49:
 546              	 .cfi_def_cfa_offset 4
 547 0020 BD46     	 mov sp,r7
 548              	.LCFI50:
 549              	 .cfi_def_cfa_register 13
 550              	 
 551 0022 5DF8047B 	 ldr r7,[sp],#4
 552              	.LCFI51:
 553              	 .cfi_restore 7
 554              	 .cfi_def_cfa_offset 0
 555 0026 7047     	 bx lr
 556              	 .cfi_endproc
 557              	.LFE147:
 559              	 .section .text.XMC_ERU_OGU_EnablePatternDetection,"ax",%progbits
 560              	 .align 2
 561              	 .global XMC_ERU_OGU_EnablePatternDetection
 562              	 .thumb
 563              	 .thumb_func
 565              	XMC_ERU_OGU_EnablePatternDetection:
 566              	.LFB148:
 238:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 239:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Configures ERU_ETLx(x = [0 to 3]) for pattern match detection by setting IPENx(x = [0 to 3) and 
 240:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePatternDetection(XMC_ERU_t *const eru,
 241:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                         const uint8_t channel,
 242:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                         const XMC_ERU_OGU_PATTERN_DETECTION_INPUT_t input)
 243:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 567              	 .loc 1 243 0
 568              	 .cfi_startproc
 569              	 
 570              	 
 571              	 
 572 0000 80B4     	 push {r7}
 573              	.LCFI52:
 574              	 .cfi_def_cfa_offset 4
 575              	 .cfi_offset 7,-4
 576 0002 83B0     	 sub sp,sp,#12
 577              	.LCFI53:
 578              	 .cfi_def_cfa_offset 16
 579 0004 00AF     	 add r7,sp,#0
 580              	.LCFI54:
 581              	 .cfi_def_cfa_register 7
 582 0006 7860     	 str r0,[r7,#4]
 583 0008 0B46     	 mov r3,r1
 584 000a FB70     	 strb r3,[r7,#3]
 585 000c 1346     	 mov r3,r2
 586 000e BB70     	 strb r3,[r7,#2]
 244:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(
 245:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Channel Number", (channel < 4U));
 246:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePatternDetection:Invalid Pattern input", XMC_ERU_OGU_CHECK_PATTERN_
 247:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 248:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].IPEN = (uint8_t)input;
 587              	 .loc 1 248 0
 588 0010 FA78     	 ldrb r2,[r7,#3]
 589 0012 BB78     	 ldrb r3,[r7,#2]
 590 0014 03F00F03 	 and r3,r3,#15
 591 0018 D9B2     	 uxtb r1,r3
 592 001a 7B68     	 ldr r3,[r7,#4]
 593 001c 0832     	 adds r2,r2,#8
 594 001e 01F00F01 	 and r1,r1,#15
 595 0022 0903     	 lsls r1,r1,#12
 596 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 597 0028 20F47040 	 bic r0,r0,#61440
 598 002c 0143     	 orrs r1,r1,r0
 599 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 249:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = true;
 600              	 .loc 1 249 0
 601 0032 FA78     	 ldrb r2,[r7,#3]
 602 0034 7B68     	 ldr r3,[r7,#4]
 603 0036 0832     	 adds r2,r2,#8
 604 0038 53F82210 	 ldr r1,[r3,r2,lsl#2]
 605 003c 41F00401 	 orr r1,r1,#4
 606 0040 43F82210 	 str r1,[r3,r2,lsl#2]
 250:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 607              	 .loc 1 250 0
 608 0044 0C37     	 adds r7,r7,#12
 609              	.LCFI55:
 610              	 .cfi_def_cfa_offset 4
 611 0046 BD46     	 mov sp,r7
 612              	.LCFI56:
 613              	 .cfi_def_cfa_register 13
 614              	 
 615 0048 5DF8047B 	 ldr r7,[sp],#4
 616              	.LCFI57:
 617              	 .cfi_restore 7
 618              	 .cfi_def_cfa_offset 0
 619 004c 7047     	 bx lr
 620              	 .cfi_endproc
 621              	.LFE148:
 623 004e 00BF     	 .section .text.XMC_ERU_OGU_DisablePatternDetection,"ax",%progbits
 624              	 .align 2
 625              	 .global XMC_ERU_OGU_DisablePatternDetection
 626              	 .thumb
 627              	 .thumb_func
 629              	XMC_ERU_OGU_DisablePatternDetection:
 630              	.LFB149:
 251:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 252:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Disable the pattern detection by clearing (GEEN) bit. */
 253:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePatternDetection(XMC_ERU_t *const eru, const uint8_t channel)
 254:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 631              	 .loc 1 254 0
 632              	 .cfi_startproc
 633              	 
 634              	 
 635              	 
 636 0000 80B4     	 push {r7}
 637              	.LCFI58:
 638              	 .cfi_def_cfa_offset 4
 639              	 .cfi_offset 7,-4
 640 0002 83B0     	 sub sp,sp,#12
 641              	.LCFI59:
 642              	 .cfi_def_cfa_offset 16
 643 0004 00AF     	 add r7,sp,#0
 644              	.LCFI60:
 645              	 .cfi_def_cfa_register 7
 646 0006 7860     	 str r0,[r7,#4]
 647 0008 0B46     	 mov r3,r1
 648 000a FB70     	 strb r3,[r7,#3]
 255:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 256:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePatternDetection:Invalid Channel Number", (channel < 4U));
 257:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 258:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GEEN = false;
 649              	 .loc 1 258 0
 650 000c FA78     	 ldrb r2,[r7,#3]
 651 000e 7B68     	 ldr r3,[r7,#4]
 652 0010 0832     	 adds r2,r2,#8
 653 0012 53F82210 	 ldr r1,[r3,r2,lsl#2]
 654 0016 21F00401 	 bic r1,r1,#4
 655 001a 43F82210 	 str r1,[r3,r2,lsl#2]
 259:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 656              	 .loc 1 259 0
 657 001e 0C37     	 adds r7,r7,#12
 658              	.LCFI61:
 659              	 .cfi_def_cfa_offset 4
 660 0020 BD46     	 mov sp,r7
 661              	.LCFI62:
 662              	 .cfi_def_cfa_register 13
 663              	 
 664 0022 5DF8047B 	 ldr r7,[sp],#4
 665              	.LCFI63:
 666              	 .cfi_restore 7
 667              	 .cfi_def_cfa_offset 0
 668 0026 7047     	 bx lr
 669              	 .cfi_endproc
 670              	.LFE149:
 672              	 .section .text.XMC_ERU_OGU_EnablePeripheralTrigger,"ax",%progbits
 673              	 .align 2
 674              	 .global XMC_ERU_OGU_EnablePeripheralTrigger
 675              	 .thumb
 676              	 .thumb_func
 678              	XMC_ERU_OGU_EnablePeripheralTrigger:
 679              	.LFB150:
 260:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 261:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Configures peripheral trigger input, by setting (ISS) bit. */
 262:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_EnablePeripheralTrigger(XMC_ERU_t *const eru,
 263:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                          const uint8_t channel,
 264:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                          const XMC_ERU_OGU_PERIPHERAL_TRIGGER_t peripheral_trigger)
 265:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 680              	 .loc 1 265 0
 681              	 .cfi_startproc
 682              	 
 683              	 
 684              	 
 685 0000 80B4     	 push {r7}
 686              	.LCFI64:
 687              	 .cfi_def_cfa_offset 4
 688              	 .cfi_offset 7,-4
 689 0002 83B0     	 sub sp,sp,#12
 690              	.LCFI65:
 691              	 .cfi_def_cfa_offset 16
 692 0004 00AF     	 add r7,sp,#0
 693              	.LCFI66:
 694              	 .cfi_def_cfa_register 7
 695 0006 7860     	 str r0,[r7,#4]
 696 0008 0B46     	 mov r3,r1
 697 000a FB70     	 strb r3,[r7,#3]
 698 000c 1346     	 mov r3,r2
 699 000e BB70     	 strb r3,[r7,#2]
 266:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR
 267:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 268:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_EnablePeripheralTrigger:Invalid Peripheral Trigger Input", 
 269:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****               XMC_ERU_OGU_CHECK_PERIPHERAL_TRIGGER(peripheral_trigger));
 270:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 271:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)peripheral_trigger;
 700              	 .loc 1 271 0
 701 0010 FA78     	 ldrb r2,[r7,#3]
 702 0012 BB78     	 ldrb r3,[r7,#2]
 703 0014 03F00303 	 and r3,r3,#3
 704 0018 D9B2     	 uxtb r1,r3
 705 001a 7B68     	 ldr r3,[r7,#4]
 706 001c 0832     	 adds r2,r2,#8
 707 001e 01F00301 	 and r1,r1,#3
 708 0022 53F82200 	 ldr r0,[r3,r2,lsl#2]
 709 0026 20F00300 	 bic r0,r0,#3
 710 002a 0143     	 orrs r1,r1,r0
 711 002c 43F82210 	 str r1,[r3,r2,lsl#2]
 272:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 712              	 .loc 1 272 0
 713 0030 0C37     	 adds r7,r7,#12
 714              	.LCFI67:
 715              	 .cfi_def_cfa_offset 4
 716 0032 BD46     	 mov sp,r7
 717              	.LCFI68:
 718              	 .cfi_def_cfa_register 13
 719              	 
 720 0034 5DF8047B 	 ldr r7,[sp],#4
 721              	.LCFI69:
 722              	 .cfi_restore 7
 723              	 .cfi_def_cfa_offset 0
 724 0038 7047     	 bx lr
 725              	 .cfi_endproc
 726              	.LFE150:
 728 003a 00BF     	 .section .text.XMC_ERU_OGU_DisablePeripheralTrigger,"ax",%progbits
 729              	 .align 2
 730              	 .global XMC_ERU_OGU_DisablePeripheralTrigger
 731              	 .thumb
 732              	 .thumb_func
 734              	XMC_ERU_OGU_DisablePeripheralTrigger:
 735              	.LFB151:
 273:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 274:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Disables event generation based on peripheral trigger by clearing (ISS) bit. */
 275:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_DisablePeripheralTrigger(XMC_ERU_t *const eru,
 276:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                           const uint8_t channel)
 277:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 736              	 .loc 1 277 0
 737              	 .cfi_startproc
 738              	 
 739              	 
 740              	 
 741 0000 80B4     	 push {r7}
 742              	.LCFI70:
 743              	 .cfi_def_cfa_offset 4
 744              	 .cfi_offset 7,-4
 745 0002 83B0     	 sub sp,sp,#12
 746              	.LCFI71:
 747              	 .cfi_def_cfa_offset 16
 748 0004 00AF     	 add r7,sp,#0
 749              	.LCFI72:
 750              	 .cfi_def_cfa_register 7
 751 0006 7860     	 str r0,[r7,#4]
 752 0008 0B46     	 mov r3,r1
 753 000a FB70     	 strb r3,[r7,#3]
 278:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PT
 279:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_DisablePeripheralTrigger:Invalid Channel Number", (channel < 4U));
 280:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 281:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].ISS = (uint8_t)0;
 754              	 .loc 1 281 0
 755 000c FA78     	 ldrb r2,[r7,#3]
 756 000e 7B68     	 ldr r3,[r7,#4]
 757 0010 0832     	 adds r2,r2,#8
 758 0012 53F82210 	 ldr r1,[r3,r2,lsl#2]
 759 0016 21F00301 	 bic r1,r1,#3
 760 001a 43F82210 	 str r1,[r3,r2,lsl#2]
 282:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 761              	 .loc 1 282 0
 762 001e 0C37     	 adds r7,r7,#12
 763              	.LCFI73:
 764              	 .cfi_def_cfa_offset 4
 765 0020 BD46     	 mov sp,r7
 766              	.LCFI74:
 767              	 .cfi_def_cfa_register 13
 768              	 
 769 0022 5DF8047B 	 ldr r7,[sp],#4
 770              	.LCFI75:
 771              	 .cfi_restore 7
 772              	 .cfi_def_cfa_offset 0
 773 0026 7047     	 bx lr
 774              	 .cfi_endproc
 775              	.LFE151:
 777              	 .section .text.XMC_ERU_OGU_SetServiceRequestMode,"ax",%progbits
 778              	 .align 2
 779              	 .global XMC_ERU_OGU_SetServiceRequestMode
 780              	 .thumb
 781              	 .thumb_func
 783              	XMC_ERU_OGU_SetServiceRequestMode:
 784              	.LFB152:
 283:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 284:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** /* Configures the gating scheme for service request generation by setting (GP) bit. */
 285:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** void XMC_ERU_OGU_SetServiceRequestMode(XMC_ERU_t *const eru,
 286:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                        const uint8_t channel,
 287:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****                                        const XMC_ERU_OGU_SERVICE_REQUEST_t mode)
 288:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** {
 785              	 .loc 1 288 0
 786              	 .cfi_startproc
 787              	 
 788              	 
 789              	 
 790 0000 80B4     	 push {r7}
 791              	.LCFI76:
 792              	 .cfi_def_cfa_offset 4
 793              	 .cfi_offset 7,-4
 794 0002 83B0     	 sub sp,sp,#12
 795              	.LCFI77:
 796              	 .cfi_def_cfa_offset 16
 797 0004 00AF     	 add r7,sp,#0
 798              	.LCFI78:
 799              	 .cfi_def_cfa_register 7
 800 0006 7860     	 str r0,[r7,#4]
 801 0008 0B46     	 mov r3,r1
 802 000a FB70     	 strb r3,[r7,#3]
 803 000c 1346     	 mov r3,r2
 804 000e BB70     	 strb r3,[r7,#2]
 289:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Module Pointer", XMC_ERU_CHECK_MODULE_PTR(e
 290:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Channel Number", (channel < 4U));
 291:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   XMC_ASSERT("XMC_ERU_OGU_SetServiceRequestMode:Invalid Service Request Mode", XMC_ERU_OGU_CHECK_SE
 292:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 293:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c ****   eru->EXOCON_b[channel].GP = (uint8_t)mode;
 805              	 .loc 1 293 0
 806 0010 FA78     	 ldrb r2,[r7,#3]
 807 0012 BB78     	 ldrb r3,[r7,#2]
 808 0014 03F00303 	 and r3,r3,#3
 809 0018 D9B2     	 uxtb r1,r3
 810 001a 7B68     	 ldr r3,[r7,#4]
 811 001c 0832     	 adds r2,r2,#8
 812 001e 01F00301 	 and r1,r1,#3
 813 0022 0901     	 lsls r1,r1,#4
 814 0024 53F82200 	 ldr r0,[r3,r2,lsl#2]
 815 0028 20F03000 	 bic r0,r0,#48
 816 002c 0143     	 orrs r1,r1,r0
 817 002e 43F82210 	 str r1,[r3,r2,lsl#2]
 294:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** 
 295:../cleanflight/lib/main/XMC4000/XMCLib/src/xmc_eru.c **** }
 818              	 .loc 1 295 0
 819 0032 0C37     	 adds r7,r7,#12
 820              	.LCFI79:
 821              	 .cfi_def_cfa_offset 4
 822 0034 BD46     	 mov sp,r7
 823              	.LCFI80:
 824              	 .cfi_def_cfa_register 13
 825              	 
 826 0036 5DF8047B 	 ldr r7,[sp],#4
 827              	.LCFI81:
 828              	 .cfi_restore 7
 829              	 .cfi_def_cfa_offset 0
 830 003a 7047     	 bx lr
 831              	 .cfi_endproc
 832              	.LFE152:
 834              	 .text
 835              	.Letext0:
 836              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 837              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 838              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_eru.h"
 839              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eru.c
    {standard input}:20     .text.XMC_ERU_ETL_Init:00000000 $t
    {standard input}:25     .text.XMC_ERU_ETL_Init:00000000 XMC_ERU_ETL_Init
    {standard input}:99     .text.XMC_ERU_OGU_Init:00000000 $t
    {standard input}:104    .text.XMC_ERU_OGU_Init:00000000 XMC_ERU_OGU_Init
    {standard input}:151    .text.XMC_ERU_ETL_SetInput:00000000 $t
    {standard input}:156    .text.XMC_ERU_ETL_SetInput:00000000 XMC_ERU_ETL_SetInput
    {standard input}:225    .text.XMC_ERU_ETL_SetSource:00000000 $t
    {standard input}:230    .text.XMC_ERU_ETL_SetSource:00000000 XMC_ERU_ETL_SetSource
    {standard input}:282    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 $t
    {standard input}:287    .text.XMC_ERU_ETL_SetEdgeDetection:00000000 XMC_ERU_ETL_SetEdgeDetection
    {standard input}:339    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 $t
    {standard input}:344    .text.XMC_ERU_ETL_GetEdgeDetection:00000000 XMC_ERU_ETL_GetEdgeDetection
    {standard input}:390    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 $t
    {standard input}:395    .text.XMC_ERU_ETL_SetStatusFlagMode:00000000 XMC_ERU_ETL_SetStatusFlagMode
    {standard input}:447    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 $t
    {standard input}:452    .text.XMC_ERU_ETL_EnableOutputTrigger:00000000 XMC_ERU_ETL_EnableOutputTrigger
    {standard input}:511    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 $t
    {standard input}:516    .text.XMC_ERU_ETL_DisableOutputTrigger:00000000 XMC_ERU_ETL_DisableOutputTrigger
    {standard input}:560    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 $t
    {standard input}:565    .text.XMC_ERU_OGU_EnablePatternDetection:00000000 XMC_ERU_OGU_EnablePatternDetection
    {standard input}:624    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 $t
    {standard input}:629    .text.XMC_ERU_OGU_DisablePatternDetection:00000000 XMC_ERU_OGU_DisablePatternDetection
    {standard input}:673    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 $t
    {standard input}:678    .text.XMC_ERU_OGU_EnablePeripheralTrigger:00000000 XMC_ERU_OGU_EnablePeripheralTrigger
    {standard input}:729    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 $t
    {standard input}:734    .text.XMC_ERU_OGU_DisablePeripheralTrigger:00000000 XMC_ERU_OGU_DisablePeripheralTrigger
    {standard input}:778    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 $t
    {standard input}:783    .text.XMC_ERU_OGU_SetServiceRequestMode:00000000 XMC_ERU_OGU_SetServiceRequestMode
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_ERU_Enable
