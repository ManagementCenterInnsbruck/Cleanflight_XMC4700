   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "blackbox.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.blackboxConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	blackboxConfig:
  25              	.LFB527:
  26              	 .file 1 "../cleanflight/src/main/blackbox/blackbox.h"
   1:../cleanflight/src/main/blackbox/blackbox.h **** /*
   2:../cleanflight/src/main/blackbox/blackbox.h ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/blackbox/blackbox.h ****  *
   4:../cleanflight/src/main/blackbox/blackbox.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/blackbox/blackbox.h ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/blackbox/blackbox.h ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/blackbox/blackbox.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/blackbox/blackbox.h ****  * any later version.
   9:../cleanflight/src/main/blackbox/blackbox.h ****  *
  10:../cleanflight/src/main/blackbox/blackbox.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/blackbox/blackbox.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/blackbox/blackbox.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/blackbox/blackbox.h ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/blackbox/blackbox.h ****  *
  15:../cleanflight/src/main/blackbox/blackbox.h ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/blackbox/blackbox.h ****  * along with this software.
  17:../cleanflight/src/main/blackbox/blackbox.h ****  *
  18:../cleanflight/src/main/blackbox/blackbox.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/blackbox/blackbox.h ****  */
  20:../cleanflight/src/main/blackbox/blackbox.h **** 
  21:../cleanflight/src/main/blackbox/blackbox.h **** #pragma once
  22:../cleanflight/src/main/blackbox/blackbox.h **** 
  23:../cleanflight/src/main/blackbox/blackbox.h **** #include "platform.h"
  24:../cleanflight/src/main/blackbox/blackbox.h **** #include "build/build_config.h"
  25:../cleanflight/src/main/blackbox/blackbox.h **** #include "common/time.h"
  26:../cleanflight/src/main/blackbox/blackbox.h **** #include "pg/pg.h"
  27:../cleanflight/src/main/blackbox/blackbox.h **** 
  28:../cleanflight/src/main/blackbox/blackbox.h **** typedef enum BlackboxDevice {
  29:../cleanflight/src/main/blackbox/blackbox.h ****     BLACKBOX_DEVICE_NONE = 0,
  30:../cleanflight/src/main/blackbox/blackbox.h **** #ifdef USE_FLASHFS
  31:../cleanflight/src/main/blackbox/blackbox.h ****     BLACKBOX_DEVICE_FLASH = 1,
  32:../cleanflight/src/main/blackbox/blackbox.h **** #endif
  33:../cleanflight/src/main/blackbox/blackbox.h **** #ifdef USE_SDCARD
  34:../cleanflight/src/main/blackbox/blackbox.h ****     BLACKBOX_DEVICE_SDCARD = 2,
  35:../cleanflight/src/main/blackbox/blackbox.h **** #endif
  36:../cleanflight/src/main/blackbox/blackbox.h ****     BLACKBOX_DEVICE_SERIAL = 3
  37:../cleanflight/src/main/blackbox/blackbox.h **** } BlackboxDevice_e;
  38:../cleanflight/src/main/blackbox/blackbox.h **** 
  39:../cleanflight/src/main/blackbox/blackbox.h **** typedef enum BlackboxMode {
  40:../cleanflight/src/main/blackbox/blackbox.h ****     BLACKBOX_MODE_NORMAL = 0,
  41:../cleanflight/src/main/blackbox/blackbox.h ****     BLACKBOX_MODE_MOTOR_TEST,
  42:../cleanflight/src/main/blackbox/blackbox.h ****     BLACKBOX_MODE_ALWAYS_ON
  43:../cleanflight/src/main/blackbox/blackbox.h **** } BlackboxMode;
  44:../cleanflight/src/main/blackbox/blackbox.h **** 
  45:../cleanflight/src/main/blackbox/blackbox.h **** typedef enum FlightLogEvent {
  46:../cleanflight/src/main/blackbox/blackbox.h ****     FLIGHT_LOG_EVENT_SYNC_BEEP = 0,
  47:../cleanflight/src/main/blackbox/blackbox.h ****     FLIGHT_LOG_EVENT_INFLIGHT_ADJUSTMENT = 13,
  48:../cleanflight/src/main/blackbox/blackbox.h ****     FLIGHT_LOG_EVENT_LOGGING_RESUME = 14,
  49:../cleanflight/src/main/blackbox/blackbox.h ****     FLIGHT_LOG_EVENT_FLIGHTMODE = 30, // Add new event type for flight mode status.
  50:../cleanflight/src/main/blackbox/blackbox.h ****     FLIGHT_LOG_EVENT_LOG_END = 255
  51:../cleanflight/src/main/blackbox/blackbox.h **** } FlightLogEvent;
  52:../cleanflight/src/main/blackbox/blackbox.h **** 
  53:../cleanflight/src/main/blackbox/blackbox.h **** typedef struct blackboxConfig_s {
  54:../cleanflight/src/main/blackbox/blackbox.h ****     uint16_t p_ratio; // I-frame interval / P-frame interval
  55:../cleanflight/src/main/blackbox/blackbox.h ****     uint8_t device;
  56:../cleanflight/src/main/blackbox/blackbox.h ****     uint8_t record_acc;
  57:../cleanflight/src/main/blackbox/blackbox.h ****     uint8_t mode;
  58:../cleanflight/src/main/blackbox/blackbox.h **** } blackboxConfig_t;
  59:../cleanflight/src/main/blackbox/blackbox.h **** 
  60:../cleanflight/src/main/blackbox/blackbox.h **** PG_DECLARE(blackboxConfig_t, blackboxConfig);
  27              	 .loc 1 60 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 60 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word blackboxConfig_System
  55              	 .cfi_endproc
  56              	.LFE527:
  58              	 .section .text.blackboxConfigMutable,"ax",%progbits
  59              	 .align 2
  60              	 .thumb
  61              	 .thumb_func
  63              	blackboxConfigMutable:
  64              	.LFB528:
  65              	 .loc 1 60 0
  66              	 .cfi_startproc
  67              	 
  68              	 
  69              	 
  70 0000 80B4     	 push {r7}
  71              	.LCFI4:
  72              	 .cfi_def_cfa_offset 4
  73              	 .cfi_offset 7,-4
  74 0002 00AF     	 add r7,sp,#0
  75              	.LCFI5:
  76              	 .cfi_def_cfa_register 7
  77              	 .loc 1 60 0
  78 0004 024B     	 ldr r3,.L7
  79 0006 1846     	 mov r0,r3
  80 0008 BD46     	 mov sp,r7
  81              	.LCFI6:
  82              	 .cfi_def_cfa_register 13
  83              	 
  84 000a 5DF8047B 	 ldr r7,[sp],#4
  85              	.LCFI7:
  86              	 .cfi_restore 7
  87              	 .cfi_def_cfa_offset 0
  88 000e 7047     	 bx lr
  89              	.L8:
  90              	 .align 2
  91              	.L7:
  92 0010 00000000 	 .word blackboxConfig_System
  93              	 .cfi_endproc
  94              	.LFE528:
  96              	 .section .text.featureConfig,"ax",%progbits
  97              	 .align 2
  98              	 .thumb
  99              	 .thumb_func
 101              	featureConfig:
 102              	.LFB531:
 103              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #ifndef DEFAULT_FEATURES
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #define DEFAULT_FEATURES 0
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #ifndef DEFAULT_RX_FEATURE
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #define DEFAULT_RX_FEATURE FEATURE_RX_PARALLEL_PWM
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #endif
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** typedef enum {
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_PPM = 1 << 0,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_INFLIGHT_ACC_CAL = 1 << 2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_SERIAL = 1 << 3,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_MOTOR_STOP = 1 << 4,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_SERVO_TILT = 1 << 5,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_SOFTSERIAL = 1 << 6,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_GPS = 1 << 7,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RANGEFINDER = 1 << 9,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_TELEMETRY = 1 << 10,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_3D = 1 << 12,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_PARALLEL_PWM = 1 << 13,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_MSP = 1 << 14,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RSSI_ADC = 1 << 15,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_LED_STRIP = 1 << 16,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_DASHBOARD = 1 << 17,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_OSD = 1 << 18,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_CHANNEL_FORWARDING = 1 << 20,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_TRANSPONDER = 1 << 21,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_AIRMODE = 1 << 22,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_SPI = 1 << 25,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_SOFTSPI = 1 << 26,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_ESC_SENSOR = 1 << 27,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_ANTI_GRAVITY = 1 << 28,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_DYNAMIC_FILTER = 1 << 29,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** } features_e;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** typedef struct featureConfig_s {
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     uint32_t enabledFeatures;
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** } featureConfig_t;
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** PG_DECLARE(featureConfig_t, featureConfig);
 104              	 .loc 2 63 0
 105              	 .cfi_startproc
 106              	 
 107              	 
 108              	 
 109 0000 80B4     	 push {r7}
 110              	.LCFI8:
 111              	 .cfi_def_cfa_offset 4
 112              	 .cfi_offset 7,-4
 113 0002 00AF     	 add r7,sp,#0
 114              	.LCFI9:
 115              	 .cfi_def_cfa_register 7
 116              	 .loc 2 63 0
 117 0004 024B     	 ldr r3,.L11
 118 0006 1846     	 mov r0,r3
 119 0008 BD46     	 mov sp,r7
 120              	.LCFI10:
 121              	 .cfi_def_cfa_register 13
 122              	 
 123 000a 5DF8047B 	 ldr r7,[sp],#4
 124              	.LCFI11:
 125              	 .cfi_restore 7
 126              	 .cfi_def_cfa_offset 0
 127 000e 7047     	 bx lr
 128              	.L12:
 129              	 .align 2
 130              	.L11:
 131 0010 00000000 	 .word featureConfig_System
 132              	 .cfi_endproc
 133              	.LFE531:
 135              	 .section .text.rxConfig,"ax",%progbits
 136              	 .align 2
 137              	 .thumb
 138              	 .thumb_func
 140              	rxConfig:
 141              	.LFB533:
 142              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
 143              	 .loc 3 61 0
 144              	 .cfi_startproc
 145              	 
 146              	 
 147              	 
 148 0000 80B4     	 push {r7}
 149              	.LCFI12:
 150              	 .cfi_def_cfa_offset 4
 151              	 .cfi_offset 7,-4
 152 0002 00AF     	 add r7,sp,#0
 153              	.LCFI13:
 154              	 .cfi_def_cfa_register 7
 155              	 .loc 3 61 0
 156 0004 024B     	 ldr r3,.L15
 157 0006 1846     	 mov r0,r3
 158 0008 BD46     	 mov sp,r7
 159              	.LCFI14:
 160              	 .cfi_def_cfa_register 13
 161              	 
 162 000a 5DF8047B 	 ldr r7,[sp],#4
 163              	.LCFI15:
 164              	 .cfi_restore 7
 165              	 .cfi_def_cfa_offset 0
 166 000e 7047     	 bx lr
 167              	.L16:
 168              	 .align 2
 169              	.L15:
 170 0010 00000000 	 .word rxConfig_System
 171              	 .cfi_endproc
 172              	.LFE533:
 174              	 .section .text.pilotConfig,"ax",%progbits
 175              	 .align 2
 176              	 .thumb
 177              	 .thumb_func
 179              	pilotConfig:
 180              	.LFB535:
 181              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdbool.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #define MAX_NAME_LENGTH 16u
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** typedef struct pilotConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     char name[MAX_NAME_LENGTH + 1];
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** } pilotConfig_t;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** PG_DECLARE(pilotConfig_t, pilotConfig);
 182              	 .loc 4 34 0
 183              	 .cfi_startproc
 184              	 
 185              	 
 186              	 
 187 0000 80B4     	 push {r7}
 188              	.LCFI16:
 189              	 .cfi_def_cfa_offset 4
 190              	 .cfi_offset 7,-4
 191 0002 00AF     	 add r7,sp,#0
 192              	.LCFI17:
 193              	 .cfi_def_cfa_register 7
 194              	 .loc 4 34 0
 195 0004 024B     	 ldr r3,.L19
 196 0006 1846     	 mov r0,r3
 197 0008 BD46     	 mov sp,r7
 198              	.LCFI18:
 199              	 .cfi_def_cfa_register 13
 200              	 
 201 000a 5DF8047B 	 ldr r7,[sp],#4
 202              	.LCFI19:
 203              	 .cfi_restore 7
 204              	 .cfi_def_cfa_offset 0
 205 000e 7047     	 bx lr
 206              	.L20:
 207              	 .align 2
 208              	.L19:
 209 0010 00000000 	 .word pilotConfig_System
 210              	 .cfi_endproc
 211              	.LFE535:
 213              	 .section .text.systemConfig,"ax",%progbits
 214              	 .align 2
 215              	 .thumb
 216              	 .thumb_func
 218              	systemConfig:
 219              	.LFB537:
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** typedef struct systemConfig_s {
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t pidProfileIndex;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t activeRateProfile;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t debug_mode;
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t task_statistics;
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t rateProfile6PosSwitch;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t cpu_overclock;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t powerOnArmingGraceTime; // in seconds
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     char boardIdentifier[sizeof(TARGET_BOARD_IDENTIFIER) + 1];
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** } systemConfig_t;
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** PG_DECLARE(systemConfig_t, systemConfig);
 220              	 .loc 4 47 0
 221              	 .cfi_startproc
 222              	 
 223              	 
 224              	 
 225 0000 80B4     	 push {r7}
 226              	.LCFI20:
 227              	 .cfi_def_cfa_offset 4
 228              	 .cfi_offset 7,-4
 229 0002 00AF     	 add r7,sp,#0
 230              	.LCFI21:
 231              	 .cfi_def_cfa_register 7
 232              	 .loc 4 47 0
 233 0004 024B     	 ldr r3,.L23
 234 0006 1846     	 mov r0,r3
 235 0008 BD46     	 mov sp,r7
 236              	.LCFI22:
 237              	 .cfi_def_cfa_register 13
 238              	 
 239 000a 5DF8047B 	 ldr r7,[sp],#4
 240              	.LCFI23:
 241              	 .cfi_restore 7
 242              	 .cfi_def_cfa_offset 0
 243 000e 7047     	 bx lr
 244              	.L24:
 245              	 .align 2
 246              	.L23:
 247 0010 00000000 	 .word systemConfig_System
 248              	 .cfi_endproc
 249              	.LFE537:
 251              	 .section .text.controlRateProfiles,"ax",%progbits
 252              	 .align 2
 253              	 .thumb
 254              	 .thumb_func
 256              	controlRateProfiles:
 257              	.LFB539:
 258              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/controlrate_profile.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** #define CONTROL_RATE_PROFILE_COUNT  6
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     RATES_TYPE_BETAFLIGHT = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     RATES_TYPE_RACEFLIGHT,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** } ratesType_e;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** typedef enum {
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     THROTTLE_LIMIT_TYPE_OFF = 0,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     THROTTLE_LIMIT_TYPE_SCALE,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     THROTTLE_LIMIT_TYPE_CLIP,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** } throttleLimitType_e;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** typedef struct controlRateConfig_s {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t thrMid8;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t thrExpo8;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t rates_type;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t rcRates[3];
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t rcExpo[3];
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t rates[3];
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t dynThrPID;
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint16_t tpa_breakpoint;                // Breakpoint where TPA is activated
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t throttle_limit_type;            // Sets the throttle limiting type - off, scale or clip
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t throttle_limit_percent;         // Sets the maximum pilot commanded throttle limit
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** } controlRateConfig_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** PG_DECLARE_ARRAY(controlRateConfig_t, CONTROL_RATE_PROFILE_COUNT, controlRateProfiles);
 259              	 .loc 5 53 0
 260              	 .cfi_startproc
 261              	 
 262              	 
 263              	 
 264 0000 80B4     	 push {r7}
 265              	.LCFI24:
 266              	 .cfi_def_cfa_offset 4
 267              	 .cfi_offset 7,-4
 268 0002 83B0     	 sub sp,sp,#12
 269              	.LCFI25:
 270              	 .cfi_def_cfa_offset 16
 271 0004 00AF     	 add r7,sp,#0
 272              	.LCFI26:
 273              	 .cfi_def_cfa_register 7
 274 0006 7860     	 str r0,[r7,#4]
 275              	 .loc 5 53 0
 276 0008 7A68     	 ldr r2,[r7,#4]
 277 000a 1346     	 mov r3,r2
 278 000c 1B01     	 lsls r3,r3,#4
 279 000e 1344     	 add r3,r3,r2
 280 0010 034A     	 ldr r2,.L27
 281 0012 1344     	 add r3,r3,r2
 282 0014 1846     	 mov r0,r3
 283 0016 0C37     	 adds r7,r7,#12
 284              	.LCFI27:
 285              	 .cfi_def_cfa_offset 4
 286 0018 BD46     	 mov sp,r7
 287              	.LCFI28:
 288              	 .cfi_def_cfa_register 13
 289              	 
 290 001a 5DF8047B 	 ldr r7,[sp],#4
 291              	.LCFI29:
 292              	 .cfi_restore 7
 293              	 .cfi_def_cfa_offset 0
 294 001e 7047     	 bx lr
 295              	.L28:
 296              	 .align 2
 297              	.L27:
 298 0020 00000000 	 .word controlRateProfiles_SystemArray
 299              	 .cfi_endproc
 300              	.LFE539:
 302              	 .section .text.rcControlsConfig,"ax",%progbits
 303              	 .align 2
 304              	 .thumb
 305              	 .thumb_func
 307              	rcControlsConfig:
 308              	.LFB542:
 309              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum rc_alias {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     ROLL = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     PITCH,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     YAW,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX1,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX3,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX4,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX5,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX6,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX7,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX8
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rc_alias_e;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PRIMARY_CHANNEL_COUNT (THROTTLE + 1)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_LOW = 0,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_HIGH
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } throttleStatus_e;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define AIRMODEDEADBAND 12
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     NOT_CENTERED = 0,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     CENTERED
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rollPitchStatus_e;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_OFF = 0,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DEFAULT,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_AUTO,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_MANUAL
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothing_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_INTERPOLATION,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_FILTER
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingType_e;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_PT1,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_BIQUAD
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInputFilter_e;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_OFF,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_PT1,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_BIQUAD
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingDerivativeFilter_e;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_INPUT_ACTIVE,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_DERIVATIVE_ACTIVE,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_AVERAGE_FRAME
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInfoType_e;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_LO (1 << (2 * ROLL))
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_CE (3 << (2 * ROLL))
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_HI (2 << (2 * ROLL))
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_LO (1 << (2 * PITCH))
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_CE (3 << (2 * PITCH))
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_HI (2 << (2 * PITCH))
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_LO (1 << (2 * YAW))
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_CE (3 << (2 * YAW))
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_HI (2 << (2 * YAW))
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_LO (1 << (2 * THROTTLE))
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_CE (3 << (2 * THROTTLE))
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_HI (2 << (2 * THROTTLE))
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_EXPO_MAX  100
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_RATES_MAX  255
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** // (Super) rates are constrained to [0, 100] for Betaflight rates, so values higher than 100 won't 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RATE_MAX  255
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_TPA_MAX              100
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** extern float rcCommand[4];
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilterTraining_s {
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     float sum;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int count;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t min;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t max;
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTraining_t;
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef union rcSmoothingFilterTypes_u {
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     pt1Filter_t pt1Filter;
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     biquadFilter_t biquadFilter;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTypes_t;
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilter_s {
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool filterInitialized;
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTypes_t filter[4];
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t inputCutoffFrequency;
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t derivativeCutoffFrequency;
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int averageFrameTimeUs;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTraining_t training;
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilter_t;
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcControlsConfig_s {
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t deadband;                       // introduce a deadband around the stick center for pit
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t yaw_deadband;                   // introduce a deadband around the stick center for yaw
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_deadband;              // defines the neutral zone of throttle stick during al
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_fast_change;           // when disabled, turn off the althold when throttle st
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool yaw_control_reversed;            // invert control direction of yaw
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcControlsConfig_t;
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(rcControlsConfig_t, rcControlsConfig);
 310              	 .loc 6 139 0
 311              	 .cfi_startproc
 312              	 
 313              	 
 314              	 
 315 0000 80B4     	 push {r7}
 316              	.LCFI30:
 317              	 .cfi_def_cfa_offset 4
 318              	 .cfi_offset 7,-4
 319 0002 00AF     	 add r7,sp,#0
 320              	.LCFI31:
 321              	 .cfi_def_cfa_register 7
 322              	 .loc 6 139 0
 323 0004 024B     	 ldr r3,.L31
 324 0006 1846     	 mov r0,r3
 325 0008 BD46     	 mov sp,r7
 326              	.LCFI32:
 327              	 .cfi_def_cfa_register 13
 328              	 
 329 000a 5DF8047B 	 ldr r7,[sp],#4
 330              	.LCFI33:
 331              	 .cfi_restore 7
 332              	 .cfi_def_cfa_offset 0
 333 000e 7047     	 bx lr
 334              	.L32:
 335              	 .align 2
 336              	.L31:
 337 0010 00000000 	 .word rcControlsConfig_System
 338              	 .cfi_endproc
 339              	.LFE542:
 341              	 .section .text.armingConfig,"ax",%progbits
 342              	 .align 2
 343              	 .thumb
 344              	 .thumb_func
 346              	armingConfig:
 347              	.LFB546:
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct flight3DConfig_s {
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_low;                // min 3d value
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_high;               // max 3d value
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t neutral3d;                     // center 3d value
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_throttle;           // default throttle deadband from MIDRC
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_low;                   // pwm output value for max negative thrust
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_high;                  // pwm output value for max positive thrust
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t switched_mode3d;                // enable '3D Switched Mode'
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } flight3DConfig_t;
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(flight3DConfig_t, flight3DConfig);
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct armingConfig_s {
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t gyro_cal_on_first_arm;          // allow disarm/arm on throttle down + roll left/right
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t auto_disarm_delay;              // allow automatically disarming multicopters after aut
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } armingConfig_t;
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(armingConfig_t, armingConfig);
 348              	 .loc 6 158 0
 349              	 .cfi_startproc
 350              	 
 351              	 
 352              	 
 353 0000 80B4     	 push {r7}
 354              	.LCFI34:
 355              	 .cfi_def_cfa_offset 4
 356              	 .cfi_offset 7,-4
 357 0002 00AF     	 add r7,sp,#0
 358              	.LCFI35:
 359              	 .cfi_def_cfa_register 7
 360              	 .loc 6 158 0
 361 0004 024B     	 ldr r3,.L35
 362 0006 1846     	 mov r0,r3
 363 0008 BD46     	 mov sp,r7
 364              	.LCFI36:
 365              	 .cfi_def_cfa_register 13
 366              	 
 367 000a 5DF8047B 	 ldr r7,[sp],#4
 368              	.LCFI37:
 369              	 .cfi_restore 7
 370              	 .cfi_def_cfa_offset 0
 371 000e 7047     	 bx lr
 372              	.L36:
 373              	 .align 2
 374              	.L35:
 375 0010 00000000 	 .word armingConfig_System
 376              	 .cfi_endproc
 377              	.LFE546:
 379              	 .section .text.mixerConfig,"ax",%progbits
 380              	 .align 2
 381              	 .thumb
 382              	 .thumb_func
 384              	mixerConfig:
 385              	.LFB556:
 386              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "platform.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "common/time.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output_counts.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/io_types.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output.h"
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define QUAD_MOTOR_COUNT 4
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHED_MOTORS_PWM_RATE 16000
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHLESS_MOTORS_PWM_RATE 480
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Digital protocol has fixed values
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_DISARM_COMMAND      0
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MIN_THROTTLE       48
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MAX_THROTTLE     2047
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_LOW  1047
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_HIGH 1048
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Note: this is called MultiType/MULTITYPE_* in baseflight.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef enum mixerMode
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** {
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_TRI = 1,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADP = 2,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX = 3,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_BICOPTER = 4,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_GIMBAL = 5,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y6 = 6,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6 = 7,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_FLYING_WING = 8,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y4 = 9,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6X = 10,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOX8 = 11,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATP = 12,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATX = 13,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_AIRPLANE = 14,        // airplane / singlecopter / dualcopter (not yet properly supported
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_120_CCPM = 15,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_90_DEG = 16,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_VTAIL4 = 17,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6H = 18,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_RX_TO_SERVO = 19,    // PPM -> servo relay
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_DUALCOPTER = 20,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_SINGLECOPTER = 21,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_ATAIL4 = 22,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM = 23,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_AIRPLANE = 24,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_TRI = 25,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX_1234 = 26
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerMode_e;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer data per motor
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct motorMixer_s {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float throttle;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float roll;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float pitch;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float yaw;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } motorMixer_t;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE_ARRAY(motorMixer_t, MAX_SUPPORTED_MOTORS, customMotorMixer);
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer configuration
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixer_s {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t motorCount;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t useServo;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     const motorMixer_t *motor;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixer_t;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixerConfig_s {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t mixerMode;
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     bool yaw_motors_reversed;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t crashflip_motor_percent;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerConfig_t;
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE(mixerConfig_t, mixerConfig);
 387              	 .loc 7 96 0
 388              	 .cfi_startproc
 389              	 
 390              	 
 391              	 
 392 0000 80B4     	 push {r7}
 393              	.LCFI38:
 394              	 .cfi_def_cfa_offset 4
 395              	 .cfi_offset 7,-4
 396 0002 00AF     	 add r7,sp,#0
 397              	.LCFI39:
 398              	 .cfi_def_cfa_register 7
 399              	 .loc 7 96 0
 400 0004 024B     	 ldr r3,.L39
 401 0006 1846     	 mov r0,r3
 402 0008 BD46     	 mov sp,r7
 403              	.LCFI40:
 404              	 .cfi_def_cfa_register 13
 405              	 
 406 000a 5DF8047B 	 ldr r7,[sp],#4
 407              	.LCFI41:
 408              	 .cfi_restore 7
 409              	 .cfi_def_cfa_offset 0
 410 000e 7047     	 bx lr
 411              	.L40:
 412              	 .align 2
 413              	.L39:
 414 0010 00000000 	 .word mixerConfig_System
 415              	 .cfi_endproc
 416              	.LFE556:
 418              	 .section .text.motorConfig,"ax",%progbits
 419              	 .align 2
 420              	 .thumb
 421              	 .thumb_func
 423              	motorConfig:
 424              	.LFB558:
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct motorConfig_s {
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     motorDevConfig_t dev;
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t digitalIdleOffsetValue;        // Idle value for DShot protocol, full motor output = 1
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t minthrottle;                   // Set the minimum throttle command sent to the ESC (El
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t maxthrottle;                   // This is the maximum value for the ESCs at full power
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t mincommand;                    // This is the value for the ESCs when they are not arm
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t motorPoleCount;                // Magnetic poles in the motors for calculating actual R
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } motorConfig_t;
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE(motorConfig_t, motorConfig);
 425              	 .loc 7 107 0
 426              	 .cfi_startproc
 427              	 
 428              	 
 429              	 
 430 0000 80B4     	 push {r7}
 431              	.LCFI42:
 432              	 .cfi_def_cfa_offset 4
 433              	 .cfi_offset 7,-4
 434 0002 00AF     	 add r7,sp,#0
 435              	.LCFI43:
 436              	 .cfi_def_cfa_register 7
 437              	 .loc 7 107 0
 438 0004 024B     	 ldr r3,.L43
 439 0006 1846     	 mov r0,r3
 440 0008 BD46     	 mov sp,r7
 441              	.LCFI44:
 442              	 .cfi_def_cfa_register 13
 443              	 
 444 000a 5DF8047B 	 ldr r7,[sp],#4
 445              	.LCFI45:
 446              	 .cfi_restore 7
 447              	 .cfi_def_cfa_offset 0
 448 000e 7047     	 bx lr
 449              	.L44:
 450              	 .align 2
 451              	.L43:
 452 0010 00000000 	 .word motorConfig_System
 453              	 .cfi_endproc
 454              	.LFE558:
 456              	 .section .text.pidConfig,"ax",%progbits
 457              	 .align 2
 458              	 .thumb
 459              	 .thumb_func
 461              	pidConfig:
 462              	.LFB563:
 463              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define MAX_PID_PROCESS_DENOM       16
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_CONTROLLER_BETAFLIGHT   1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_MIXER_SCALING           1000.0f
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_SERVO_MIXER_SCALING     0.7f
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT                500
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_YAW            400
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MIN            100
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MAX            1000
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // Scaling factors for Pids for better tunable range in configurator for betaflight pid controller.
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PTERM_SCALE 0.032029f
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define ITERM_SCALE 0.244381f
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define DTERM_SCALE 0.000529f
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // The constant scale factor to replace the Kd component of the feedforward calculation.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // This value gives the same "feel" as the previous Kd default of 26 (26 * DTERM_SCALE)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define FEEDFORWARD_SCALE 0.013754f
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ROLL,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_PITCH,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_YAW,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_LEVEL,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_MAG,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ITEM_COUNT
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidIndex_e;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_OFF = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ON,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ALWAYS
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidSuperExpoYaw_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_OFF = 0,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_ON
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidStabilisationState_e;
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_OFF = 0,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_ON,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_BEEP
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidCrashRecovery_e;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidf_s {
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t P;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t I;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t D;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t F;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidf_t;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_SMOOTH,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_STEP
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } antiGravityMode_e;
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_OFF,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP_INC,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY_INC
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelax_e;
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_GYRO,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_SETPOINT
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelaxType_e;
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidProfile_s {
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yaw_lowpass_hz;                // Additional yaw filter when yaw axis too noisy
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass_hz;              // Delta Filter in hz
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_hz;                // Biquad dterm notch hz
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_cutoff;            // Biquad dterm notch low cutoff
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     pidf_t  pid[PID_ITEM_COUNT];
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t dterm_filter_type;              // Filter selection for dterm
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t itermWindupPointPercent;        // Experimental ITerm windup threshold, percent motor s
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimit;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimitYaw;
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pidAtMinThrottle;               // Disable/Enable pids on zero throttle. Normally even 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t levelAngleLimit;                // Max angle in degrees in level mode
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_effect;            // inclination factor for Horizon mode
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_expert_mode;       // OFF or ON
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     // Betaflight PID controller parameters
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t  antiGravityMode;             // type of anti gravity method
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermThrottleThreshold;        // max allowed throttle delta before iterm accelerated 
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermAcceleratorGain;          // Iterm Accelerator Gain when itermThrottlethreshold i
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yawRateAccelLimit;             // yaw accel limiter for deg/sec/ms
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t rateAccelLimit;                // accel limiter roll/pitch deg/sec/ms
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_dthreshold;              // dterm crash value
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_gthreshold;              // gyro crash value
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_setpoint_threshold;      // setpoint must be below this value to detect crash, s
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_time;                    // ms
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_delay;                   // ms
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_angle;           // degrees
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_rate;            // degree/second
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t vbatPidCompensation;            // Scale PIDsum to battery voltage
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t feedForwardTransition;          // Feed forward weight transition
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_limit_yaw;               // limits yaw errorRate, so crashes don't cause huge th
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermLimit;
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass2_hz;             // Extra PT1 Filter on D in hz
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery;                 // off, on, on and beeps when it is in crash recovery m
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost;                 // how much should throttle be boosted during transient
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost_cutoff;          // Which cutoff frequency to use for throttle boost. hi
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_rotation;                 // rotates iterm to translate world errors to local coo
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t smart_feedforward;              // takes only the larger of P and the D weight feed for
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_type;               // Specifies type of relax algorithm
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_cutoff;             // This cutoff frequency specifies a low pass filter wh
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax;                    // Enable iterm suppression during stick input
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_angle_limit;       // Acro trainer roll/pitch angle limit in degrees
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_debug_axis;        // The axis for which record debugging values are captu
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_gain;              // The strength of the limiting. Raising may reduce ove
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t acro_trainer_lookahead_ms;     // The lookahead window in milliseconds used to reduce 
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_gain;               // How strongly should the absolute accumulated error b
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_limit;              // Limit to the correction
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_error_limit;        // Limit to the accumulated error
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidProfile_t;
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #ifndef USE_OSD_SLAVE
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE_ARRAY(pidProfile_t, MAX_PROFILE_COUNT, pidProfiles);
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #endif
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidConfig_s {
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pid_process_denom;              // Processing denominator for PID controller vs gyro sa
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_prevention;          // off, on - enables pidsum runaway disarm logic
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t runaway_takeoff_deactivate_delay;   // delay in ms for "in-flight" conditions before d
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_deactivate_throttle; // minimum throttle percent required during deacti
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidConfig_t;
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE(pidConfig_t, pidConfig);
 464              	 .loc 8 161 0
 465              	 .cfi_startproc
 466              	 
 467              	 
 468              	 
 469 0000 80B4     	 push {r7}
 470              	.LCFI46:
 471              	 .cfi_def_cfa_offset 4
 472              	 .cfi_offset 7,-4
 473 0002 00AF     	 add r7,sp,#0
 474              	.LCFI47:
 475              	 .cfi_def_cfa_register 7
 476              	 .loc 8 161 0
 477 0004 024B     	 ldr r3,.L47
 478 0006 1846     	 mov r0,r3
 479 0008 BD46     	 mov sp,r7
 480              	.LCFI48:
 481              	 .cfi_def_cfa_register 13
 482              	 
 483 000a 5DF8047B 	 ldr r7,[sp],#4
 484              	.LCFI49:
 485              	 .cfi_restore 7
 486              	 .cfi_def_cfa_offset 0
 487 000e 7047     	 bx lr
 488              	.L48:
 489              	 .align 2
 490              	.L47:
 491 0010 00000000 	 .word pidConfig_System
 492              	 .cfi_endproc
 493              	.LFE563:
 495              	 .comm inputSource_e,1,1
 496              	 .section .text.gyroConfig,"ax",%progbits
 497              	 .align 2
 498              	 .thumb
 499              	 .thumb_func
 501              	gyroConfig:
 502              	.LFB585:
 503              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/gyro.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "common/axis.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "drivers/bus.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "drivers/sensor.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_NONE = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_DEFAULT,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU6050,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_L3G4200D,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU3050,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_L3GD20,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU6000,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU6500,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU9250,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20601,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20602,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20608G,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20649,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20689,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_BMI160,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_FAKE
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } gyroSensor_e;
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef struct gyro_s {
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint32_t targetLooptime;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     float gyroADCf[XYZ_AXIS_COUNT];
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } gyro_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** extern gyro_t gyro;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_OVERFLOW_CHECK_NONE = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_OVERFLOW_CHECK_YAW,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_OVERFLOW_CHECK_ALL_AXES
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } gyroOverflowCheck_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #define GYRO_CONFIG_USE_GYRO_1      0
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #define GYRO_CONFIG_USE_GYRO_2      1
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #define GYRO_CONFIG_USE_GYRO_BOTH   2
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef enum {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     FILTER_LOWPASS = 0,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     FILTER_LOWPASS2
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } filterSlots;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef struct gyroConfig_s {
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_align;                       // gyro alignment
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyroMovementCalibrationThreshold; // people keep forgetting that moving model while in
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_sync_denom;                  // Gyro sample divider
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_hardware_lpf;                // gyro DLPF setting
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_32khz_hardware_lpf;          // gyro 32khz DLPF setting
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_high_fsr;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_use_32khz;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_to_use;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_lowpass_hz;
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_lowpass2_hz;
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_soft_notch_hz_1;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_soft_notch_cutoff_1;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_soft_notch_hz_2;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_soft_notch_cutoff_2;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     int16_t  gyro_offset_yaw;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  checkOverflow;
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     // Lowpass primary/secondary
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_lowpass_type;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_lowpass2_type;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  yaw_spin_recovery;
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     int16_t  yaw_spin_threshold;
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyroCalibrationDuration;  // Gyro calibration duration in 1/100 second
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t dyn_notch_quality; // bandpass quality factor, 100 for steep sided bandpass
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t dyn_notch_width_percent;
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } gyroConfig_t;
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** PG_DECLARE(gyroConfig_t, gyroConfig);
 504              	 .loc 9 103 0
 505              	 .cfi_startproc
 506              	 
 507              	 
 508              	 
 509 0000 80B4     	 push {r7}
 510              	.LCFI50:
 511              	 .cfi_def_cfa_offset 4
 512              	 .cfi_offset 7,-4
 513 0002 00AF     	 add r7,sp,#0
 514              	.LCFI51:
 515              	 .cfi_def_cfa_register 7
 516              	 .loc 9 103 0
 517 0004 024B     	 ldr r3,.L51
 518 0006 1846     	 mov r0,r3
 519 0008 BD46     	 mov sp,r7
 520              	.LCFI52:
 521              	 .cfi_def_cfa_register 13
 522              	 
 523 000a 5DF8047B 	 ldr r7,[sp],#4
 524              	.LCFI53:
 525              	 .cfi_restore 7
 526              	 .cfi_def_cfa_offset 0
 527 000e 7047     	 bx lr
 528              	.L52:
 529              	 .align 2
 530              	.L51:
 531 0010 00000000 	 .word gyroConfig_System
 532              	 .cfi_endproc
 533              	.LFE585:
 535              	 .section .text.accelerometerConfig,"ax",%progbits
 536              	 .align 2
 537              	 .thumb
 538              	 .thumb_func
 540              	accelerometerConfig:
 541              	.LFB591:
 542              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/acceleration.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "pg/pg.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "drivers/accgyro/accgyro.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "sensors/sensors.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** // Type of accelerometer used/detected
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_DEFAULT,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_NONE,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ADXL345,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU6050,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MMA8452,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_BMA280,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_LSM303DLHC,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU6000,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU6500,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU9250,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20601,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20602,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20608G,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20649,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20689,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_BMI160,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_FAKE
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } accelerationSensor_e;
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef struct acc_s {
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     accDev_t dev;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     uint32_t accSamplingInterval;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     float accADC[XYZ_AXIS_COUNT];
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     bool isAccelUpdatedAtLeastOnce;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } acc_t;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** extern acc_t acc;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef struct rollAndPitchTrims_s {
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     int16_t roll;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     int16_t pitch;
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } rollAndPitchTrims_t_def;
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef union rollAndPitchTrims_u {
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     int16_t raw[2];
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     rollAndPitchTrims_t_def values;
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } rollAndPitchTrims_t;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef struct accelerometerConfig_s {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     uint16_t acc_lpf_hz;                    // cutoff frequency for the low pass filter used on the
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     sensor_align_e acc_align;               // acc alignment
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     uint8_t acc_hardware;                   // Which acc hardware to use on boards with more than o
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     bool acc_high_fsr;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     flightDynamicsTrims_t accZero;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     rollAndPitchTrims_t accelerometerTrims;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } accelerometerConfig_t;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** PG_DECLARE(accelerometerConfig_t, accelerometerConfig);
 543              	 .loc 10 78 0
 544              	 .cfi_startproc
 545              	 
 546              	 
 547              	 
 548 0000 80B4     	 push {r7}
 549              	.LCFI54:
 550              	 .cfi_def_cfa_offset 4
 551              	 .cfi_offset 7,-4
 552 0002 00AF     	 add r7,sp,#0
 553              	.LCFI55:
 554              	 .cfi_def_cfa_register 7
 555              	 .loc 10 78 0
 556 0004 024B     	 ldr r3,.L55
 557 0006 1846     	 mov r0,r3
 558 0008 BD46     	 mov sp,r7
 559              	.LCFI56:
 560              	 .cfi_def_cfa_register 13
 561              	 
 562 000a 5DF8047B 	 ldr r7,[sp],#4
 563              	.LCFI57:
 564              	 .cfi_restore 7
 565              	 .cfi_def_cfa_offset 0
 566 000e 7047     	 bx lr
 567              	.L56:
 568              	 .align 2
 569              	.L55:
 570 0010 00000000 	 .word accelerometerConfig_System
 571              	 .cfi_endproc
 572              	.LFE591:
 574              	 .section .text.barometerConfig,"ax",%progbits
 575              	 .align 2
 576              	 .thumb
 577              	 .thumb_func
 579              	barometerConfig:
 580              	.LFB593:
 581              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/barometer.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** #include "drivers/barometer/barometer.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** typedef enum {
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_DEFAULT = 0,
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_NONE = 1,
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_BMP085 = 2,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_MS5611 = 3,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_BMP280 = 4,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_LPS = 5,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_QMP6988 = 6,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 	BARO_DPS310 = 7
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** } baroSensor_e;
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** #define BARO_SAMPLE_COUNT_MAX   48
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** typedef struct barometerConfig_s {
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_bustype;
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_spi_device;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     ioTag_t baro_spi_csn;                   // Also used as XCLR (positive logic) for BMP085
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_i2c_device;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_i2c_address;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_hardware;                  // Barometer hardware to use
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_sample_count;              // size of baro filter array
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint16_t baro_noise_lpf;                // additional LPF to reduce baro noise
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint16_t baro_cf_vel;                   // apply Complimentary Filter to keep the calculated ve
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint16_t baro_cf_alt;                   // apply CF to use ACC for height estimation
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** } barometerConfig_t;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** PG_DECLARE(barometerConfig_t, barometerConfig);
 582              	 .loc 11 52 0
 583              	 .cfi_startproc
 584              	 
 585              	 
 586              	 
 587 0000 80B4     	 push {r7}
 588              	.LCFI58:
 589              	 .cfi_def_cfa_offset 4
 590              	 .cfi_offset 7,-4
 591 0002 00AF     	 add r7,sp,#0
 592              	.LCFI59:
 593              	 .cfi_def_cfa_register 7
 594              	 .loc 11 52 0
 595 0004 024B     	 ldr r3,.L59
 596 0006 1846     	 mov r0,r3
 597 0008 BD46     	 mov sp,r7
 598              	.LCFI60:
 599              	 .cfi_def_cfa_register 13
 600              	 
 601 000a 5DF8047B 	 ldr r7,[sp],#4
 602              	.LCFI61:
 603              	 .cfi_restore 7
 604              	 .cfi_def_cfa_offset 0
 605 000e 7047     	 bx lr
 606              	.L60:
 607              	 .align 2
 608              	.L59:
 609 0010 00000000 	 .word barometerConfig_System
 610              	 .cfi_endproc
 611              	.LFE593:
 613              	 .section .text.currentSensorADCConfig,"ax",%progbits
 614              	 .align 2
 615              	 .thumb
 616              	 .thumb_func
 618              	currentSensorADCConfig:
 619              	.LFB595:
 620              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** #include "current_ids.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef enum {
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_NONE = 0,
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_ADC,
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_VIRTUAL,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_ESC,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_MSP,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_COUNT
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeterSource_e;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** extern const char * const currentMeterSourceNames[CURRENT_METER_COUNT];
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeter_s {
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperage;           // current read by current sensor in centiampere (1/100th A)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperageLatest;     // current read by current sensor in centiampere (1/100th A) (unfil
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t mAhDrawn;           // milliampere hours drawn from the battery since start
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeter_t;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // WARNING - do not mix usage of CURRENT_SENSOR_* and CURRENT_METER_*, they are separate concerns.
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeterMAhDrawnState_s {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t mAhDrawn;           // milliampere hours drawn from the battery since start
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     float mAhDrawnF;
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeterMAhDrawnState_t;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // Sensors
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef enum {
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_VIRTUAL = 0,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_ADC,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_ESC,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_MSP
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensor_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // ADC
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeterADCState_s {
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     currentMeterMAhDrawnState_t mahDrawnState;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperage;           // current read by current sensor in centiampere (1/100th A)
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperageLatest;     // current read by current sensor in centiampere (1/100th A) (unfil
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeterADCState_t;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentSensorADCConfig_s {
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int16_t scale;              // scale the current sensor output voltage to milliamps. Value in m
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int16_t offset;             // offset of the current sensor in mA
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensorADCConfig_t;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** PG_DECLARE(currentSensorADCConfig_t, currentSensorADCConfig);
 621              	 .loc 12 77 0
 622              	 .cfi_startproc
 623              	 
 624              	 
 625              	 
 626 0000 80B4     	 push {r7}
 627              	.LCFI62:
 628              	 .cfi_def_cfa_offset 4
 629              	 .cfi_offset 7,-4
 630 0002 00AF     	 add r7,sp,#0
 631              	.LCFI63:
 632              	 .cfi_def_cfa_register 7
 633              	 .loc 12 77 0
 634 0004 024B     	 ldr r3,.L63
 635 0006 1846     	 mov r0,r3
 636 0008 BD46     	 mov sp,r7
 637              	.LCFI64:
 638              	 .cfi_def_cfa_register 13
 639              	 
 640 000a 5DF8047B 	 ldr r7,[sp],#4
 641              	.LCFI65:
 642              	 .cfi_restore 7
 643              	 .cfi_def_cfa_offset 0
 644 000e 7047     	 bx lr
 645              	.L64:
 646              	 .align 2
 647              	.L63:
 648 0010 00000000 	 .word currentSensorADCConfig_System
 649              	 .cfi_endproc
 650              	.LFE595:
 652              	 .section .text.voltageSensorADCConfig,"ax",%progbits
 653              	 .align 2
 654              	 .thumb
 655              	 .thumb_func
 657              	voltageSensorADCConfig:
 658              	.LFB599:
 659              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #include "voltage_ids.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** // meters
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_METER_NONE = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_METER_ADC,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_METER_ESC,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_METER_COUNT
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageMeterSource_e;
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** extern const char * const voltageMeterSourceNames[VOLTAGE_METER_COUNT];
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** // WARNING - do not mix usage of VOLTAGE_METER_* and VOLTAGE_SENSOR_*, they are separate concerns.
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef struct voltageMeter_s {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint16_t filtered;                      // voltage in 0.1V steps
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint16_t unfiltered;                    // voltage in 0.1V steps
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     bool lowVoltageCutoff;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageMeter_t;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** // sensors
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef enum {
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_TYPE_ADC_RESISTOR_DIVIDER = 0,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_TYPE_ESC
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageSensorType_e;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** // adc sensors
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_SCALE_MIN 0
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_SCALE_MAX 255
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_DIVIDER_MIN 1
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_DIVIDER_MAX 255
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_MULTIPLIER_MIN 1
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_MULTIPLIER_MAX 255
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #ifndef VBAT_LPF_FREQ
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_LPF_FREQ  0.1f
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #endif
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #ifndef MAX_VOLTAGE_SENSOR_ADC
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define MAX_VOLTAGE_SENSOR_ADC 1 // VBAT - some boards have external, 12V, 9V and 5V meters.
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #endif
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VOLTAGE_METER_ID_ESC_COUNT 12
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef enum {
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_ADC_VBAT = 0,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_ADC_12V = 1,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_ADC_9V = 2,
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_ADC_5V = 3
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageSensorADC_e; // see also voltageMeterADCtoIDMap
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef struct voltageSensorADCConfig_s {
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint8_t vbatscale;                      // adjust this to match battery voltage to reported val
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint8_t vbatresdivval;                  // resistor divider R2 (default NAZE 10(K))
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint8_t vbatresdivmultiplier;           // multiplier for scale (e.g. 2.5:1 ratio with multipli
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageSensorADCConfig_t;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** PG_DECLARE_ARRAY(voltageSensorADCConfig_t, MAX_VOLTAGE_SENSOR_ADC, voltageSensorADCConfig);
 660              	 .loc 13 94 0
 661              	 .cfi_startproc
 662              	 
 663              	 
 664              	 
 665 0000 80B4     	 push {r7}
 666              	.LCFI66:
 667              	 .cfi_def_cfa_offset 4
 668              	 .cfi_offset 7,-4
 669 0002 83B0     	 sub sp,sp,#12
 670              	.LCFI67:
 671              	 .cfi_def_cfa_offset 16
 672 0004 00AF     	 add r7,sp,#0
 673              	.LCFI68:
 674              	 .cfi_def_cfa_register 7
 675 0006 7860     	 str r0,[r7,#4]
 676              	 .loc 13 94 0
 677 0008 7A68     	 ldr r2,[r7,#4]
 678 000a 1346     	 mov r3,r2
 679 000c 5B00     	 lsls r3,r3,#1
 680 000e 1344     	 add r3,r3,r2
 681 0010 034A     	 ldr r2,.L67
 682 0012 1344     	 add r3,r3,r2
 683 0014 1846     	 mov r0,r3
 684 0016 0C37     	 adds r7,r7,#12
 685              	.LCFI69:
 686              	 .cfi_def_cfa_offset 4
 687 0018 BD46     	 mov sp,r7
 688              	.LCFI70:
 689              	 .cfi_def_cfa_register 13
 690              	 
 691 001a 5DF8047B 	 ldr r7,[sp],#4
 692              	.LCFI71:
 693              	 .cfi_restore 7
 694              	 .cfi_def_cfa_offset 0
 695 001e 7047     	 bx lr
 696              	.L68:
 697              	 .align 2
 698              	.L67:
 699 0020 00000000 	 .word voltageSensorADCConfig_SystemArray
 700              	 .cfi_endproc
 701              	.LFE599:
 703              	 .section .text.batteryConfig,"ax",%progbits
 704              	 .align 2
 705              	 .thumb
 706              	 .thumb_func
 708              	batteryConfig:
 709              	.LFB602:
 710              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/time.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/current.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/voltage.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct batteryConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // voltage
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmaxcellvoltage;             // maximum voltage per cell, used for auto-detecting ba
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmincellvoltage;             // minimum voltage per cell, this triggers battery crit
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatwarningcellvoltage;         // warning voltage per cell, this triggers battery warn
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatnotpresentcellvoltage;      // Between vbatmaxcellvoltage and 2*this is considered 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t lvcPercentage;                  // Percentage of throttle when lvc is triggered
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     voltageMeterSource_e voltageMeterSource; // source of battery voltage meter used, either ADC or
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // current
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     currentMeterSource_e currentMeterSource; // source of battery current meter used, either ADC, V
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint16_t batteryCapacity;               // mAh
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // warnings / alerts
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useVBatAlerts;                     // Issue alerts based on VBat readings
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useConsumptionAlerts;              // Issue alerts based on total power consumption
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t consumptionWarningPercentage;   // Percentage of remaining capacity that should trigger
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbathysteresis;                 // hysteresis for alarm, default 1 = 0.1V
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatfullcellvoltage;            // Cell voltage at which the battery is deemed to be "f
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } batteryConfig_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct lowVoltageCutoff_s {
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool enabled;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t percentage;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     timeUs_t startTime;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } lowVoltageCutoff_t;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** PG_DECLARE(batteryConfig_t, batteryConfig);
 711              	 .loc 14 59 0
 712              	 .cfi_startproc
 713              	 
 714              	 
 715              	 
 716 0000 80B4     	 push {r7}
 717              	.LCFI72:
 718              	 .cfi_def_cfa_offset 4
 719              	 .cfi_offset 7,-4
 720 0002 00AF     	 add r7,sp,#0
 721              	.LCFI73:
 722              	 .cfi_def_cfa_register 7
 723              	 .loc 14 59 0
 724 0004 024B     	 ldr r3,.L71
 725 0006 1846     	 mov r0,r3
 726 0008 BD46     	 mov sp,r7
 727              	.LCFI74:
 728              	 .cfi_def_cfa_register 13
 729              	 
 730 000a 5DF8047B 	 ldr r7,[sp],#4
 731              	.LCFI75:
 732              	 .cfi_restore 7
 733              	 .cfi_def_cfa_offset 0
 734 000e 7047     	 bx lr
 735              	.L72:
 736              	 .align 2
 737              	.L71:
 738 0010 00000000 	 .word batteryConfig_System
 739              	 .cfi_endproc
 740              	.LFE602:
 742              	 .section .text.compassConfig,"ax",%progbits
 743              	 .align 2
 744              	 .thumb
 745              	 .thumb_func
 747              	compassConfig:
 748              	.LFB604:
 749              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/compass.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "drivers/io_types.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "drivers/sensor.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "sensors/sensors.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** // Type of magnetometer used/detected
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** typedef enum {
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_DEFAULT = 0,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_NONE = 1,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_HMC5883 = 2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_AK8975 = 3,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_AK8963 = 4,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_QMC5883 = 5
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** } magSensor_e;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** typedef struct mag_s {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     float magADC[XYZ_AXIS_COUNT];
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     float magneticDeclination;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** } mag_t;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** extern mag_t mag;
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** typedef struct compassConfig_s {
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     int16_t mag_declination;                // Get your magnetic decliniation from here : http://ma
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****                                             // For example, -6deg 37min, = -637 Japan, format is [s
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     sensor_align_e mag_align;               // mag alignment
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_hardware;                   // Which mag hardware to use on boards with more than o
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_bustype;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_i2c_device;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_i2c_address;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_spi_device;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     ioTag_t mag_spi_csn;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     ioTag_t interruptTag;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     flightDynamicsTrims_t magZero;
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** } compassConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** PG_DECLARE(compassConfig_t, compassConfig);
 750              	 .loc 15 61 0
 751              	 .cfi_startproc
 752              	 
 753              	 
 754              	 
 755 0000 80B4     	 push {r7}
 756              	.LCFI76:
 757              	 .cfi_def_cfa_offset 4
 758              	 .cfi_offset 7,-4
 759 0002 00AF     	 add r7,sp,#0
 760              	.LCFI77:
 761              	 .cfi_def_cfa_register 7
 762              	 .loc 15 61 0
 763 0004 024B     	 ldr r3,.L75
 764 0006 1846     	 mov r0,r3
 765 0008 BD46     	 mov sp,r7
 766              	.LCFI78:
 767              	 .cfi_def_cfa_register 13
 768              	 
 769 000a 5DF8047B 	 ldr r7,[sp],#4
 770              	.LCFI79:
 771              	 .cfi_restore 7
 772              	 .cfi_def_cfa_offset 0
 773 000e 7047     	 bx lr
 774              	.L76:
 775              	 .align 2
 776              	.L75:
 777 0010 00000000 	 .word compassConfig_System
 778              	 .cfi_endproc
 779              	.LFE604:
 781              	 .comm blackboxConfig_System,5,4
 782              	 .comm blackboxConfig_Copy,5,4
 783              	 .global blackboxConfig_Registry
 784              	 .section .pg_registry,"a",%progbits
 785              	 .align 2
 788              	blackboxConfig_Registry:
 789 0000 0510     	 .short 4101
 790 0002 0500     	 .short 5
 791 0004 00000000 	 .word blackboxConfig_System
 792 0008 00000000 	 .word blackboxConfig_Copy
 793 000c 00000000 	 .word 0
 794 0010 00000000 	 .word pgResetTemplate_blackboxConfig
 795              	 .global pgResetTemplate_blackboxConfig
 796              	 .section .pg_resetdata,"a",%progbits
 797              	 .align 1
 800              	pgResetTemplate_blackboxConfig:
 801 0000 2000     	 .short 32
 802 0002 02       	 .byte 2
 803 0003 01       	 .byte 1
 804 0004 00       	 .byte 0
 805 0005 00       	 .section .rodata.blackboxHeader,"a",%progbits
 806              	 .align 2
 809              	blackboxHeader:
 810 0000 48205072 	 .ascii "H Product:Blackbox flight data recorder by Nicholas"
 810      6F647563 
 810      743A426C 
 810      61636B62 
 810      6F782066 
 811 0033 20536865 	 .ascii " Sherlock\012H Data version:2\012\000"
 811      726C6F63 
 811      6B0A4820 
 811      44617461 
 811      20766572 
 812 004f 00       	 .section .rodata
 813              	 .align 2
 814              	.LC0:
 815 0000 6E616D65 	 .ascii "name\000"
 815      00
 816 0005 000000   	 .align 2
 817              	.LC1:
 818 0008 7369676E 	 .ascii "signed\000"
 818      656400
 819 000f 00       	 .align 2
 820              	.LC2:
 821 0010 70726564 	 .ascii "predictor\000"
 821      6963746F 
 821      7200
 822 001a 0000     	 .align 2
 823              	.LC3:
 824 001c 656E636F 	 .ascii "encoding\000"
 824      64696E67 
 824      00
 825              	 .section .rodata.blackboxFieldHeaderNames,"a",%progbits
 826              	 .align 2
 829              	blackboxFieldHeaderNames:
 830 0000 00000000 	 .word .LC0
 831 0004 08000000 	 .word .LC1
 832 0008 10000000 	 .word .LC2
 833 000c 1C000000 	 .word .LC3
 834 0010 10000000 	 .word .LC2
 835 0014 1C000000 	 .word .LC3
 836              	 .section .rodata
 837 0025 000000   	 .align 2
 838              	.LC4:
 839 0028 6C6F6F70 	 .ascii "loopIteration\000"
 839      49746572 
 839      6174696F 
 839      6E00
 840 0036 0000     	 .align 2
 841              	.LC5:
 842 0038 74696D65 	 .ascii "time\000"
 842      00
 843 003d 000000   	 .align 2
 844              	.LC6:
 845 0040 61786973 	 .ascii "axisP\000"
 845      5000
 846 0046 0000     	 .align 2
 847              	.LC7:
 848 0048 61786973 	 .ascii "axisI\000"
 848      4900
 849 004e 0000     	 .align 2
 850              	.LC8:
 851 0050 61786973 	 .ascii "axisD\000"
 851      4400
 852 0056 0000     	 .align 2
 853              	.LC9:
 854 0058 61786973 	 .ascii "axisF\000"
 854      4600
 855 005e 0000     	 .align 2
 856              	.LC10:
 857 0060 7263436F 	 .ascii "rcCommand\000"
 857      6D6D616E 
 857      6400
 858 006a 0000     	 .align 2
 859              	.LC11:
 860 006c 76626174 	 .ascii "vbatLatest\000"
 860      4C617465 
 860      737400
 861 0077 00       	 .align 2
 862              	.LC12:
 863 0078 616D7065 	 .ascii "amperageLatest\000"
 863      72616765 
 863      4C617465 
 863      737400
 864 0087 00       	 .align 2
 865              	.LC13:
 866 0088 6D616741 	 .ascii "magADC\000"
 866      444300
 867 008f 00       	 .align 2
 868              	.LC14:
 869 0090 4261726F 	 .ascii "BaroAlt\000"
 869      416C7400 
 870              	 .align 2
 871              	.LC15:
 872 0098 72737369 	 .ascii "rssi\000"
 872      00
 873 009d 000000   	 .align 2
 874              	.LC16:
 875 00a0 6779726F 	 .ascii "gyroADC\000"
 875      41444300 
 876              	 .align 2
 877              	.LC17:
 878 00a8 61636353 	 .ascii "accSmooth\000"
 878      6D6F6F74 
 878      6800
 879 00b2 0000     	 .align 2
 880              	.LC18:
 881 00b4 64656275 	 .ascii "debug\000"
 881      6700
 882 00ba 0000     	 .align 2
 883              	.LC19:
 884 00bc 6D6F746F 	 .ascii "motor\000"
 884      7200
 885 00c2 0000     	 .align 2
 886              	.LC20:
 887 00c4 73657276 	 .ascii "servo\000"
 887      6F00
 888              	 .section .rodata.blackboxMainFields,"a",%progbits
 889              	 .align 2
 892              	blackboxMainFields:
 893 0000 28000000 	 .word .LC4
 894 0004 FF       	 .byte -1
 895 0005 00       	 .byte 0
 896 0006 00       	 .byte 0
 897 0007 01       	 .byte 1
 898 0008 06       	 .byte 6
 899 0009 09       	 .byte 9
 900 000a 00       	 .byte 0
 901 000b 38000000 	 .4byte .LC5
 902 000f FF       	 .byte -1
 903 0010 00       	 .byte 0
 904 0011 00       	 .byte 0
 905 0012 01       	 .byte 1
 906 0013 02       	 .byte 2
 907 0014 00       	 .byte 0
 908 0015 00       	 .byte 0
 909 0016 40000000 	 .4byte .LC6
 910 001a 00       	 .byte 0
 911 001b 01       	 .byte 1
 912 001c 00       	 .byte 0
 913 001d 00       	 .byte 0
 914 001e 01       	 .byte 1
 915 001f 00       	 .byte 0
 916 0020 00       	 .byte 0
 917 0021 40000000 	 .4byte .LC6
 918 0025 01       	 .byte 1
 919 0026 01       	 .byte 1
 920 0027 00       	 .byte 0
 921 0028 00       	 .byte 0
 922 0029 01       	 .byte 1
 923 002a 00       	 .byte 0
 924 002b 00       	 .byte 0
 925 002c 40000000 	 .word .LC6
 926 0030 02       	 .byte 2
 927 0031 01       	 .byte 1
 928 0032 00       	 .byte 0
 929 0033 00       	 .byte 0
 930 0034 01       	 .byte 1
 931 0035 00       	 .byte 0
 932 0036 00       	 .byte 0
 933 0037 48000000 	 .4byte .LC7
 934 003b 00       	 .byte 0
 935 003c 01       	 .byte 1
 936 003d 00       	 .byte 0
 937 003e 00       	 .byte 0
 938 003f 01       	 .byte 1
 939 0040 07       	 .byte 7
 940 0041 00       	 .byte 0
 941 0042 48000000 	 .4byte .LC7
 942 0046 01       	 .byte 1
 943 0047 01       	 .byte 1
 944 0048 00       	 .byte 0
 945 0049 00       	 .byte 0
 946 004a 01       	 .byte 1
 947 004b 07       	 .byte 7
 948 004c 00       	 .byte 0
 949 004d 48000000 	 .4byte .LC7
 950 0051 02       	 .byte 2
 951 0052 01       	 .byte 1
 952 0053 00       	 .byte 0
 953 0054 00       	 .byte 0
 954 0055 01       	 .byte 1
 955 0056 07       	 .byte 7
 956 0057 00       	 .byte 0
 957 0058 50000000 	 .word .LC8
 958 005c 00       	 .byte 0
 959 005d 01       	 .byte 1
 960 005e 00       	 .byte 0
 961 005f 00       	 .byte 0
 962 0060 01       	 .byte 1
 963 0061 00       	 .byte 0
 964 0062 10       	 .byte 16
 965 0063 50000000 	 .4byte .LC8
 966 0067 01       	 .byte 1
 967 0068 01       	 .byte 1
 968 0069 00       	 .byte 0
 969 006a 00       	 .byte 0
 970 006b 01       	 .byte 1
 971 006c 00       	 .byte 0
 972 006d 11       	 .byte 17
 973 006e 50000000 	 .4byte .LC8
 974 0072 02       	 .byte 2
 975 0073 01       	 .byte 1
 976 0074 00       	 .byte 0
 977 0075 00       	 .byte 0
 978 0076 01       	 .byte 1
 979 0077 00       	 .byte 0
 980 0078 12       	 .byte 18
 981 0079 58000000 	 .4byte .LC9
 982 007d 00       	 .byte 0
 983 007e 01       	 .byte 1
 984 007f 00       	 .byte 0
 985 0080 00       	 .byte 0
 986 0081 01       	 .byte 1
 987 0082 00       	 .byte 0
 988 0083 00       	 .byte 0
 989 0084 58000000 	 .word .LC9
 990 0088 01       	 .byte 1
 991 0089 01       	 .byte 1
 992 008a 00       	 .byte 0
 993 008b 00       	 .byte 0
 994 008c 01       	 .byte 1
 995 008d 00       	 .byte 0
 996 008e 00       	 .byte 0
 997 008f 58000000 	 .4byte .LC9
 998 0093 02       	 .byte 2
 999 0094 01       	 .byte 1
 1000 0095 00       	 .byte 0
 1001 0096 00       	 .byte 0
 1002 0097 01       	 .byte 1
 1003 0098 00       	 .byte 0
 1004 0099 00       	 .byte 0
 1005 009a 60000000 	 .4byte .LC10
 1006 009e 00       	 .byte 0
 1007 009f 01       	 .byte 1
 1008 00a0 00       	 .byte 0
 1009 00a1 00       	 .byte 0
 1010 00a2 01       	 .byte 1
 1011 00a3 08       	 .byte 8
 1012 00a4 00       	 .byte 0
 1013 00a5 60000000 	 .4byte .LC10
 1014 00a9 01       	 .byte 1
 1015 00aa 01       	 .byte 1
 1016 00ab 00       	 .byte 0
 1017 00ac 00       	 .byte 0
 1018 00ad 01       	 .byte 1
 1019 00ae 08       	 .byte 8
 1020 00af 00       	 .byte 0
 1021 00b0 60000000 	 .word .LC10
 1022 00b4 02       	 .byte 2
 1023 00b5 01       	 .byte 1
 1024 00b6 00       	 .byte 0
 1025 00b7 00       	 .byte 0
 1026 00b8 01       	 .byte 1
 1027 00b9 08       	 .byte 8
 1028 00ba 00       	 .byte 0
 1029 00bb 60000000 	 .4byte .LC10
 1030 00bf 03       	 .byte 3
 1031 00c0 00       	 .byte 0
 1032 00c1 04       	 .byte 4
 1033 00c2 01       	 .byte 1
 1034 00c3 01       	 .byte 1
 1035 00c4 08       	 .byte 8
 1036 00c5 00       	 .byte 0
 1037 00c6 6C000000 	 .4byte .LC11
 1038 00ca FF       	 .byte -1
 1039 00cb 00       	 .byte 0
 1040 00cc 09       	 .byte 9
 1041 00cd 03       	 .byte 3
 1042 00ce 01       	 .byte 1
 1043 00cf 06       	 .byte 6
 1044 00d0 0C       	 .byte 12
 1045 00d1 78000000 	 .4byte .LC12
 1046 00d5 FF       	 .byte -1
 1047 00d6 01       	 .byte 1
 1048 00d7 00       	 .byte 0
 1049 00d8 00       	 .byte 0
 1050 00d9 01       	 .byte 1
 1051 00da 06       	 .byte 6
 1052 00db 0D       	 .byte 13
 1053 00dc 88000000 	 .word .LC13
 1054 00e0 00       	 .byte 0
 1055 00e1 01       	 .byte 1
 1056 00e2 00       	 .byte 0
 1057 00e3 00       	 .byte 0
 1058 00e4 01       	 .byte 1
 1059 00e5 06       	 .byte 6
 1060 00e6 0A       	 .byte 10
 1061 00e7 88000000 	 .4byte .LC13
 1062 00eb 01       	 .byte 1
 1063 00ec 01       	 .byte 1
 1064 00ed 00       	 .byte 0
 1065 00ee 00       	 .byte 0
 1066 00ef 01       	 .byte 1
 1067 00f0 06       	 .byte 6
 1068 00f1 0A       	 .byte 10
 1069 00f2 88000000 	 .4byte .LC13
 1070 00f6 02       	 .byte 2
 1071 00f7 01       	 .byte 1
 1072 00f8 00       	 .byte 0
 1073 00f9 00       	 .byte 0
 1074 00fa 01       	 .byte 1
 1075 00fb 06       	 .byte 6
 1076 00fc 0A       	 .byte 10
 1077 00fd 90000000 	 .4byte .LC14
 1078 0101 FF       	 .byte -1
 1079 0102 01       	 .byte 1
 1080 0103 00       	 .byte 0
 1081 0104 00       	 .byte 0
 1082 0105 01       	 .byte 1
 1083 0106 06       	 .byte 6
 1084 0107 0B       	 .byte 11
 1085 0108 98000000 	 .word .LC15
 1086 010c FF       	 .byte -1
 1087 010d 00       	 .byte 0
 1088 010e 00       	 .byte 0
 1089 010f 01       	 .byte 1
 1090 0110 01       	 .byte 1
 1091 0111 06       	 .byte 6
 1092 0112 0F       	 .byte 15
 1093 0113 A0000000 	 .4byte .LC16
 1094 0117 00       	 .byte 0
 1095 0118 01       	 .byte 1
 1096 0119 00       	 .byte 0
 1097 011a 00       	 .byte 0
 1098 011b 03       	 .byte 3
 1099 011c 00       	 .byte 0
 1100 011d 00       	 .byte 0
 1101 011e A0000000 	 .4byte .LC16
 1102 0122 01       	 .byte 1
 1103 0123 01       	 .byte 1
 1104 0124 00       	 .byte 0
 1105 0125 00       	 .byte 0
 1106 0126 03       	 .byte 3
 1107 0127 00       	 .byte 0
 1108 0128 00       	 .byte 0
 1109 0129 A0000000 	 .4byte .LC16
 1110 012d 02       	 .byte 2
 1111 012e 01       	 .byte 1
 1112 012f 00       	 .byte 0
 1113 0130 00       	 .byte 0
 1114 0131 03       	 .byte 3
 1115 0132 00       	 .byte 0
 1116 0133 00       	 .byte 0
 1117 0134 A8000000 	 .word .LC17
 1118 0138 00       	 .byte 0
 1119 0139 01       	 .byte 1
 1120 013a 00       	 .byte 0
 1121 013b 00       	 .byte 0
 1122 013c 03       	 .byte 3
 1123 013d 00       	 .byte 0
 1124 013e 14       	 .byte 20
 1125 013f A8000000 	 .4byte .LC17
 1126 0143 01       	 .byte 1
 1127 0144 01       	 .byte 1
 1128 0145 00       	 .byte 0
 1129 0146 00       	 .byte 0
 1130 0147 03       	 .byte 3
 1131 0148 00       	 .byte 0
 1132 0149 14       	 .byte 20
 1133 014a A8000000 	 .4byte .LC17
 1134 014e 02       	 .byte 2
 1135 014f 01       	 .byte 1
 1136 0150 00       	 .byte 0
 1137 0151 00       	 .byte 0
 1138 0152 03       	 .byte 3
 1139 0153 00       	 .byte 0
 1140 0154 14       	 .byte 20
 1141 0155 B4000000 	 .4byte .LC18
 1142 0159 00       	 .byte 0
 1143 015a 01       	 .byte 1
 1144 015b 00       	 .byte 0
 1145 015c 00       	 .byte 0
 1146 015d 03       	 .byte 3
 1147 015e 00       	 .byte 0
 1148 015f 15       	 .byte 21
 1149 0160 B4000000 	 .word .LC18
 1150 0164 01       	 .byte 1
 1151 0165 01       	 .byte 1
 1152 0166 00       	 .byte 0
 1153 0167 00       	 .byte 0
 1154 0168 03       	 .byte 3
 1155 0169 00       	 .byte 0
 1156 016a 15       	 .byte 21
 1157 016b B4000000 	 .4byte .LC18
 1158 016f 02       	 .byte 2
 1159 0170 01       	 .byte 1
 1160 0171 00       	 .byte 0
 1161 0172 00       	 .byte 0
 1162 0173 03       	 .byte 3
 1163 0174 00       	 .byte 0
 1164 0175 15       	 .byte 21
 1165 0176 B4000000 	 .4byte .LC18
 1166 017a 03       	 .byte 3
 1167 017b 01       	 .byte 1
 1168 017c 00       	 .byte 0
 1169 017d 00       	 .byte 0
 1170 017e 03       	 .byte 3
 1171 017f 00       	 .byte 0
 1172 0180 15       	 .byte 21
 1173 0181 BC000000 	 .4byte .LC19
 1174 0185 00       	 .byte 0
 1175 0186 00       	 .byte 0
 1176 0187 0B       	 .byte 11
 1177 0188 01       	 .byte 1
 1178 0189 03       	 .byte 3
 1179 018a 00       	 .byte 0
 1180 018b 01       	 .byte 1
 1181 018c BC000000 	 .word .LC19
 1182 0190 01       	 .byte 1
 1183 0191 00       	 .byte 0
 1184 0192 05       	 .byte 5
 1185 0193 00       	 .byte 0
 1186 0194 03       	 .byte 3
 1187 0195 00       	 .byte 0
 1188 0196 02       	 .byte 2
 1189 0197 BC000000 	 .4byte .LC19
 1190 019b 02       	 .byte 2
 1191 019c 00       	 .byte 0
 1192 019d 05       	 .byte 5
 1193 019e 00       	 .byte 0
 1194 019f 03       	 .byte 3
 1195 01a0 00       	 .byte 0
 1196 01a1 03       	 .byte 3
 1197 01a2 BC000000 	 .4byte .LC19
 1198 01a6 03       	 .byte 3
 1199 01a7 00       	 .byte 0
 1200 01a8 05       	 .byte 5
 1201 01a9 00       	 .byte 0
 1202 01aa 03       	 .byte 3
 1203 01ab 00       	 .byte 0
 1204 01ac 04       	 .byte 4
 1205 01ad BC000000 	 .4byte .LC19
 1206 01b1 04       	 .byte 4
 1207 01b2 00       	 .byte 0
 1208 01b3 05       	 .byte 5
 1209 01b4 00       	 .byte 0
 1210 01b5 03       	 .byte 3
 1211 01b6 00       	 .byte 0
 1212 01b7 05       	 .byte 5
 1213 01b8 BC000000 	 .word .LC19
 1214 01bc 05       	 .byte 5
 1215 01bd 00       	 .byte 0
 1216 01be 05       	 .byte 5
 1217 01bf 00       	 .byte 0
 1218 01c0 03       	 .byte 3
 1219 01c1 00       	 .byte 0
 1220 01c2 06       	 .byte 6
 1221 01c3 BC000000 	 .4byte .LC19
 1222 01c7 06       	 .byte 6
 1223 01c8 00       	 .byte 0
 1224 01c9 05       	 .byte 5
 1225 01ca 00       	 .byte 0
 1226 01cb 03       	 .byte 3
 1227 01cc 00       	 .byte 0
 1228 01cd 07       	 .byte 7
 1229 01ce BC000000 	 .4byte .LC19
 1230 01d2 07       	 .byte 7
 1231 01d3 00       	 .byte 0
 1232 01d4 05       	 .byte 5
 1233 01d5 00       	 .byte 0
 1234 01d6 03       	 .byte 3
 1235 01d7 00       	 .byte 0
 1236 01d8 08       	 .byte 8
 1237 01d9 C4000000 	 .4byte .LC20
 1238 01dd 05       	 .byte 5
 1239 01de 00       	 .byte 0
 1240 01df 08       	 .byte 8
 1241 01e0 00       	 .byte 0
 1242 01e1 01       	 .byte 1
 1243 01e2 00       	 .byte 0
 1244 01e3 09       	 .byte 9
 1245              	 .section .rodata
 1246 00ca 0000     	 .align 2
 1247              	.LC21:
 1248 00cc 4750535F 	 .ascii "GPS_numSat\000"
 1248      6E756D53 
 1248      617400
 1249 00d7 00       	 .align 2
 1250              	.LC22:
 1251 00d8 4750535F 	 .ascii "GPS_coord\000"
 1251      636F6F72 
 1251      6400
 1252 00e2 0000     	 .align 2
 1253              	.LC23:
 1254 00e4 4750535F 	 .ascii "GPS_altitude\000"
 1254      616C7469 
 1254      74756465 
 1254      00
 1255 00f1 000000   	 .align 2
 1256              	.LC24:
 1257 00f4 4750535F 	 .ascii "GPS_speed\000"
 1257      73706565 
 1257      6400
 1258 00fe 0000     	 .align 2
 1259              	.LC25:
 1260 0100 4750535F 	 .ascii "GPS_ground_course\000"
 1260      67726F75 
 1260      6E645F63 
 1260      6F757273 
 1260      6500
 1261              	 .section .rodata.blackboxGpsGFields,"a",%progbits
 1262              	 .align 2
 1265              	blackboxGpsGFields:
 1266 0000 38000000 	 .word .LC5
 1267 0004 FF       	 .byte -1
 1268 0005 00       	 .byte 0
 1269 0006 0A       	 .byte 10
 1270 0007 01       	 .byte 1
 1271 0008 13       	 .byte 19
 1272 0009 CC000000 	 .4byte .LC21
 1273 000d FF       	 .byte -1
 1274 000e 00       	 .byte 0
 1275 000f 00       	 .byte 0
 1276 0010 01       	 .byte 1
 1277 0011 00       	 .byte 0
 1278 0012 D8000000 	 .4byte .LC22
 1279 0016 00       	 .byte 0
 1280 0017 01       	 .byte 1
 1281 0018 07       	 .byte 7
 1282 0019 00       	 .byte 0
 1283 001a 00       	 .byte 0
 1284 001b D8000000 	 .4byte .LC22
 1285 001f 01       	 .byte 1
 1286 0020 01       	 .byte 1
 1287 0021 07       	 .byte 7
 1288 0022 00       	 .byte 0
 1289 0023 00       	 .byte 0
 1290 0024 E4000000 	 .word .LC23
 1291 0028 FF       	 .byte -1
 1292 0029 00       	 .byte 0
 1293 002a 00       	 .byte 0
 1294 002b 01       	 .byte 1
 1295 002c 00       	 .byte 0
 1296 002d F4000000 	 .4byte .LC24
 1297 0031 FF       	 .byte -1
 1298 0032 00       	 .byte 0
 1299 0033 00       	 .byte 0
 1300 0034 01       	 .byte 1
 1301 0035 00       	 .byte 0
 1302 0036 00010000 	 .4byte .LC25
 1303 003a FF       	 .byte -1
 1304 003b 00       	 .byte 0
 1305 003c 00       	 .byte 0
 1306 003d 01       	 .byte 1
 1307 003e 00       	 .byte 0
 1308 003f 00       	 .section .rodata
 1309 0112 0000     	 .align 2
 1310              	.LC26:
 1311 0114 4750535F 	 .ascii "GPS_home\000"
 1311      686F6D65 
 1311      00
 1312              	 .section .rodata.blackboxGpsHFields,"a",%progbits
 1313              	 .align 2
 1316              	blackboxGpsHFields:
 1317 0000 14010000 	 .word .LC26
 1318 0004 00       	 .byte 0
 1319 0005 01       	 .byte 1
 1320 0006 00       	 .byte 0
 1321 0007 00       	 .byte 0
 1322 0008 14010000 	 .word .LC26
 1323 000c 01       	 .byte 1
 1324 000d 01       	 .byte 1
 1325 000e 00       	 .byte 0
 1326 000f 00       	 .byte 0
 1327              	 .section .rodata
 1328 011d 000000   	 .align 2
 1329              	.LC27:
 1330 0120 666C6967 	 .ascii "flightModeFlags\000"
 1330      68744D6F 
 1330      6465466C 
 1330      61677300 
 1331              	 .align 2
 1332              	.LC28:
 1333 0130 73746174 	 .ascii "stateFlags\000"
 1333      65466C61 
 1333      677300
 1334 013b 00       	 .align 2
 1335              	.LC29:
 1336 013c 6661696C 	 .ascii "failsafePhase\000"
 1336      73616665 
 1336      50686173 
 1336      6500
 1337 014a 0000     	 .align 2
 1338              	.LC30:
 1339 014c 72785369 	 .ascii "rxSignalReceived\000"
 1339      676E616C 
 1339      52656365 
 1339      69766564 
 1339      00
 1340 015d 000000   	 .align 2
 1341              	.LC31:
 1342 0160 7278466C 	 .ascii "rxFlightChannelsValid\000"
 1342      69676874 
 1342      4368616E 
 1342      6E656C73 
 1342      56616C69 
 1343              	 .section .rodata.blackboxSlowFields,"a",%progbits
 1344              	 .align 2
 1347              	blackboxSlowFields:
 1348 0000 20010000 	 .word .LC27
 1349 0004 FF       	 .byte -1
 1350 0005 00       	 .byte 0
 1351 0006 00       	 .byte 0
 1352 0007 01       	 .byte 1
 1353 0008 30010000 	 .word .LC28
 1354 000c FF       	 .byte -1
 1355 000d 00       	 .byte 0
 1356 000e 00       	 .byte 0
 1357 000f 01       	 .byte 1
 1358 0010 3C010000 	 .word .LC29
 1359 0014 FF       	 .byte -1
 1360 0015 00       	 .byte 0
 1361 0016 00       	 .byte 0
 1362 0017 07       	 .byte 7
 1363 0018 4C010000 	 .word .LC30
 1364 001c FF       	 .byte -1
 1365 001d 00       	 .byte 0
 1366 001e 00       	 .byte 0
 1367 001f 07       	 .byte 7
 1368 0020 60010000 	 .word .LC31
 1369 0024 FF       	 .byte -1
 1370 0025 00       	 .byte 0
 1371 0026 00       	 .byte 0
 1372 0027 07       	 .byte 7
 1373              	 .section .bss.blackboxState,"aw",%nobits
 1376              	blackboxState:
 1377 0000 00       	 .space 1
 1378              	 .section .bss.blackboxLastArmingBeep,"aw",%nobits
 1379              	 .align 2
 1382              	blackboxLastArmingBeep:
 1383 0000 00000000 	 .space 4
 1384              	 .section .bss.blackboxLastFlightModeFlags,"aw",%nobits
 1385              	 .align 2
 1388              	blackboxLastFlightModeFlags:
 1389 0000 00000000 	 .space 4
 1390              	 .section .bss.xmitState,"aw",%nobits
 1391              	 .align 2
 1394              	xmitState:
 1395 0000 00000000 	 .space 8
 1395      00000000 
 1396              	 .section .bss.blackboxConditionCache,"aw",%nobits
 1397              	 .align 2
 1400              	blackboxConditionCache:
 1401 0000 00000000 	 .space 4
 1402              	 .section .bss.blackboxIteration,"aw",%nobits
 1403              	 .align 2
 1406              	blackboxIteration:
 1407 0000 00000000 	 .space 4
 1408              	 .section .bss.blackboxLoopIndex,"aw",%nobits
 1409              	 .align 1
 1412              	blackboxLoopIndex:
 1413 0000 0000     	 .space 2
 1414              	 .section .bss.blackboxPFrameIndex,"aw",%nobits
 1415              	 .align 1
 1418              	blackboxPFrameIndex:
 1419 0000 0000     	 .space 2
 1420              	 .section .bss.blackboxIFrameIndex,"aw",%nobits
 1421              	 .align 1
 1424              	blackboxIFrameIndex:
 1425 0000 0000     	 .space 2
 1426              	 .section .bss.blackboxIInterval,"aw",%nobits
 1427              	 .align 1
 1430              	blackboxIInterval:
 1431 0000 0000     	 .space 2
 1432              	 .section .bss.blackboxPInterval,"aw",%nobits
 1433              	 .align 1
 1436              	blackboxPInterval:
 1437 0000 0000     	 .space 2
 1438              	 .section .bss.blackboxSInterval,"aw",%nobits
 1439              	 .align 2
 1442              	blackboxSInterval:
 1443 0000 00000000 	 .space 4
 1444              	 .section .bss.blackboxSlowFrameIterationTimer,"aw",%nobits
 1445              	 .align 2
 1448              	blackboxSlowFrameIterationTimer:
 1449 0000 00000000 	 .space 4
 1450              	 .section .bss.blackboxLoggedAnyFrames,"aw",%nobits
 1453              	blackboxLoggedAnyFrames:
 1454 0000 00       	 .space 1
 1455              	 .section .bss.vbatReference,"aw",%nobits
 1456              	 .align 1
 1459              	vbatReference:
 1460 0000 0000     	 .space 2
 1461              	 .section .bss.gpsHistory,"aw",%nobits
 1462              	 .align 2
 1465              	gpsHistory:
 1466 0000 00000000 	 .space 17
 1466      00000000 
 1466      00000000 
 1466      00000000 
 1466      00
 1467 0011 000000   	 .section .bss.slowHistory,"aw",%nobits
 1468              	 .align 2
 1471              	slowHistory:
 1472 0000 00000000 	 .space 8
 1472      00000000 
 1473              	 .section .bss.blackboxHistoryRing,"aw",%nobits
 1474              	 .align 2
 1477              	blackboxHistoryRing:
 1478 0000 00000000 	 .space 390
 1478      00000000 
 1478      00000000 
 1478      00000000 
 1478      00000000 
 1479 0186 0000     	 .section .bss.blackboxHistory,"aw",%nobits
 1480              	 .align 2
 1483              	blackboxHistory:
 1484 0000 00000000 	 .space 12
 1484      00000000 
 1484      00000000 
 1485              	 .section .bss.blackboxModeActivationConditionPresent,"aw",%nobits
 1488              	blackboxModeActivationConditionPresent:
 1489 0000 00       	 .space 1
 1490              	 .section .text.blackboxMayEditConfig,"ax",%progbits
 1491              	 .align 2
 1492              	 .global blackboxMayEditConfig
 1493              	 .thumb
 1494              	 .thumb_func
 1496              	blackboxMayEditConfig:
 1497              	.LFB608:
 1498              	 .file 16 "../cleanflight/src/main/blackbox/blackbox.c"
   1:../cleanflight/src/main/blackbox/blackbox.c **** /*
   2:../cleanflight/src/main/blackbox/blackbox.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/blackbox/blackbox.c ****  *
   4:../cleanflight/src/main/blackbox/blackbox.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/blackbox/blackbox.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/blackbox/blackbox.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/blackbox/blackbox.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/blackbox/blackbox.c ****  * any later version.
   9:../cleanflight/src/main/blackbox/blackbox.c ****  *
  10:../cleanflight/src/main/blackbox/blackbox.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/blackbox/blackbox.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/blackbox/blackbox.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/blackbox/blackbox.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/blackbox/blackbox.c ****  *
  15:../cleanflight/src/main/blackbox/blackbox.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/blackbox/blackbox.c ****  * along with this software.
  17:../cleanflight/src/main/blackbox/blackbox.c ****  *
  18:../cleanflight/src/main/blackbox/blackbox.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/blackbox/blackbox.c ****  */
  20:../cleanflight/src/main/blackbox/blackbox.c **** 
  21:../cleanflight/src/main/blackbox/blackbox.c **** #include <stdbool.h>
  22:../cleanflight/src/main/blackbox/blackbox.c **** #include <stdint.h>
  23:../cleanflight/src/main/blackbox/blackbox.c **** #include <string.h>
  24:../cleanflight/src/main/blackbox/blackbox.c **** #include <math.h>
  25:../cleanflight/src/main/blackbox/blackbox.c **** 
  26:../cleanflight/src/main/blackbox/blackbox.c **** #include "platform.h"
  27:../cleanflight/src/main/blackbox/blackbox.c **** 
  28:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_BLACKBOX
  29:../cleanflight/src/main/blackbox/blackbox.c **** 
  30:../cleanflight/src/main/blackbox/blackbox.c **** #include "blackbox.h"
  31:../cleanflight/src/main/blackbox/blackbox.c **** #include "blackbox_encoding.h"
  32:../cleanflight/src/main/blackbox/blackbox.c **** #include "blackbox_fielddefs.h"
  33:../cleanflight/src/main/blackbox/blackbox.c **** #include "blackbox_io.h"
  34:../cleanflight/src/main/blackbox/blackbox.c **** 
  35:../cleanflight/src/main/blackbox/blackbox.c **** #include "build/build_config.h"
  36:../cleanflight/src/main/blackbox/blackbox.c **** #include "build/debug.h"
  37:../cleanflight/src/main/blackbox/blackbox.c **** #include "build/version.h"
  38:../cleanflight/src/main/blackbox/blackbox.c **** 
  39:../cleanflight/src/main/blackbox/blackbox.c **** #include "common/axis.h"
  40:../cleanflight/src/main/blackbox/blackbox.c **** #include "common/encoding.h"
  41:../cleanflight/src/main/blackbox/blackbox.c **** #include "common/maths.h"
  42:../cleanflight/src/main/blackbox/blackbox.c **** #include "common/time.h"
  43:../cleanflight/src/main/blackbox/blackbox.c **** #include "common/utils.h"
  44:../cleanflight/src/main/blackbox/blackbox.c **** 
  45:../cleanflight/src/main/blackbox/blackbox.c **** #include "config/feature.h"
  46:../cleanflight/src/main/blackbox/blackbox.c **** #include "pg/pg.h"
  47:../cleanflight/src/main/blackbox/blackbox.c **** #include "pg/pg_ids.h"
  48:../cleanflight/src/main/blackbox/blackbox.c **** #include "pg/rx.h"
  49:../cleanflight/src/main/blackbox/blackbox.c **** 
  50:../cleanflight/src/main/blackbox/blackbox.c **** #include "drivers/compass/compass.h"
  51:../cleanflight/src/main/blackbox/blackbox.c **** #include "drivers/sensor.h"
  52:../cleanflight/src/main/blackbox/blackbox.c **** #include "drivers/time.h"
  53:../cleanflight/src/main/blackbox/blackbox.c **** 
  54:../cleanflight/src/main/blackbox/blackbox.c **** #include "fc/config.h"
  55:../cleanflight/src/main/blackbox/blackbox.c **** #include "fc/controlrate_profile.h"
  56:../cleanflight/src/main/blackbox/blackbox.c **** #include "fc/fc_rc.h"
  57:../cleanflight/src/main/blackbox/blackbox.c **** #include "fc/rc_controls.h"
  58:../cleanflight/src/main/blackbox/blackbox.c **** #include "fc/rc_modes.h"
  59:../cleanflight/src/main/blackbox/blackbox.c **** #include "fc/runtime_config.h"
  60:../cleanflight/src/main/blackbox/blackbox.c **** 
  61:../cleanflight/src/main/blackbox/blackbox.c **** #include "flight/failsafe.h"
  62:../cleanflight/src/main/blackbox/blackbox.c **** #include "flight/mixer.h"
  63:../cleanflight/src/main/blackbox/blackbox.c **** #include "flight/pid.h"
  64:../cleanflight/src/main/blackbox/blackbox.c **** #include "flight/servos.h"
  65:../cleanflight/src/main/blackbox/blackbox.c **** 
  66:../cleanflight/src/main/blackbox/blackbox.c **** #include "io/beeper.h"
  67:../cleanflight/src/main/blackbox/blackbox.c **** #include "io/gps.h"
  68:../cleanflight/src/main/blackbox/blackbox.c **** #include "io/serial.h"
  69:../cleanflight/src/main/blackbox/blackbox.c **** 
  70:../cleanflight/src/main/blackbox/blackbox.c **** #include "rx/rx.h"
  71:../cleanflight/src/main/blackbox/blackbox.c **** 
  72:../cleanflight/src/main/blackbox/blackbox.c **** #include "sensors/acceleration.h"
  73:../cleanflight/src/main/blackbox/blackbox.c **** #include "sensors/barometer.h"
  74:../cleanflight/src/main/blackbox/blackbox.c **** #include "sensors/battery.h"
  75:../cleanflight/src/main/blackbox/blackbox.c **** #include "sensors/compass.h"
  76:../cleanflight/src/main/blackbox/blackbox.c **** #include "sensors/gyro.h"
  77:../cleanflight/src/main/blackbox/blackbox.c **** #include "sensors/rangefinder.h"
  78:../cleanflight/src/main/blackbox/blackbox.c **** 
  79:../cleanflight/src/main/blackbox/blackbox.c **** #if defined(ENABLE_BLACKBOX_LOGGING_ON_SPIFLASH_BY_DEFAULT)
  80:../cleanflight/src/main/blackbox/blackbox.c **** #define DEFAULT_BLACKBOX_DEVICE     BLACKBOX_DEVICE_FLASH
  81:../cleanflight/src/main/blackbox/blackbox.c **** #elif defined(ENABLE_BLACKBOX_LOGGING_ON_SDCARD_BY_DEFAULT)
  82:../cleanflight/src/main/blackbox/blackbox.c **** #define DEFAULT_BLACKBOX_DEVICE     BLACKBOX_DEVICE_SDCARD
  83:../cleanflight/src/main/blackbox/blackbox.c **** #else
  84:../cleanflight/src/main/blackbox/blackbox.c **** #define DEFAULT_BLACKBOX_DEVICE     BLACKBOX_DEVICE_SERIAL
  85:../cleanflight/src/main/blackbox/blackbox.c **** #endif
  86:../cleanflight/src/main/blackbox/blackbox.c **** 
  87:../cleanflight/src/main/blackbox/blackbox.c **** PG_REGISTER_WITH_RESET_TEMPLATE(blackboxConfig_t, blackboxConfig, PG_BLACKBOX_CONFIG, 1);
  88:../cleanflight/src/main/blackbox/blackbox.c **** 
  89:../cleanflight/src/main/blackbox/blackbox.c **** PG_RESET_TEMPLATE(blackboxConfig_t, blackboxConfig,
  90:../cleanflight/src/main/blackbox/blackbox.c ****     .p_ratio = 32,
  91:../cleanflight/src/main/blackbox/blackbox.c ****     .device = DEFAULT_BLACKBOX_DEVICE,
  92:../cleanflight/src/main/blackbox/blackbox.c ****     .record_acc = 1,
  93:../cleanflight/src/main/blackbox/blackbox.c ****     .mode = BLACKBOX_MODE_NORMAL
  94:../cleanflight/src/main/blackbox/blackbox.c **** );
  95:../cleanflight/src/main/blackbox/blackbox.c **** 
  96:../cleanflight/src/main/blackbox/blackbox.c **** #define BLACKBOX_SHUTDOWN_TIMEOUT_MILLIS 200
  97:../cleanflight/src/main/blackbox/blackbox.c **** 
  98:../cleanflight/src/main/blackbox/blackbox.c **** // Some macros to make writing FLIGHT_LOG_FIELD_* constants shorter:
  99:../cleanflight/src/main/blackbox/blackbox.c **** 
 100:../cleanflight/src/main/blackbox/blackbox.c **** #define PREDICT(x) CONCAT(FLIGHT_LOG_FIELD_PREDICTOR_, x)
 101:../cleanflight/src/main/blackbox/blackbox.c **** #define ENCODING(x) CONCAT(FLIGHT_LOG_FIELD_ENCODING_, x)
 102:../cleanflight/src/main/blackbox/blackbox.c **** #define CONDITION(x) CONCAT(FLIGHT_LOG_FIELD_CONDITION_, x)
 103:../cleanflight/src/main/blackbox/blackbox.c **** #define UNSIGNED FLIGHT_LOG_FIELD_UNSIGNED
 104:../cleanflight/src/main/blackbox/blackbox.c **** #define SIGNED FLIGHT_LOG_FIELD_SIGNED
 105:../cleanflight/src/main/blackbox/blackbox.c **** 
 106:../cleanflight/src/main/blackbox/blackbox.c **** static const char blackboxHeader[] =
 107:../cleanflight/src/main/blackbox/blackbox.c ****     "H Product:Blackbox flight data recorder by Nicholas Sherlock\n"
 108:../cleanflight/src/main/blackbox/blackbox.c ****     "H Data version:2\n";
 109:../cleanflight/src/main/blackbox/blackbox.c **** 
 110:../cleanflight/src/main/blackbox/blackbox.c **** static const char* const blackboxFieldHeaderNames[] = {
 111:../cleanflight/src/main/blackbox/blackbox.c ****     "name",
 112:../cleanflight/src/main/blackbox/blackbox.c ****     "signed",
 113:../cleanflight/src/main/blackbox/blackbox.c ****     "predictor",
 114:../cleanflight/src/main/blackbox/blackbox.c ****     "encoding",
 115:../cleanflight/src/main/blackbox/blackbox.c ****     "predictor",
 116:../cleanflight/src/main/blackbox/blackbox.c ****     "encoding"
 117:../cleanflight/src/main/blackbox/blackbox.c **** };
 118:../cleanflight/src/main/blackbox/blackbox.c **** 
 119:../cleanflight/src/main/blackbox/blackbox.c **** /* All field definition structs should look like this (but with longer arrs): */
 120:../cleanflight/src/main/blackbox/blackbox.c **** typedef struct blackboxFieldDefinition_s {
 121:../cleanflight/src/main/blackbox/blackbox.c ****     const char *name;
 122:../cleanflight/src/main/blackbox/blackbox.c ****     // If the field name has a number to be included in square brackets [1] afterwards, set it here
 123:../cleanflight/src/main/blackbox/blackbox.c ****     int8_t fieldNameIndex;
 124:../cleanflight/src/main/blackbox/blackbox.c **** 
 125:../cleanflight/src/main/blackbox/blackbox.c ****     // Each member of this array will be the value to print for this field for the given header ind
 126:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t arr[1];
 127:../cleanflight/src/main/blackbox/blackbox.c **** } blackboxFieldDefinition_t;
 128:../cleanflight/src/main/blackbox/blackbox.c **** 
 129:../cleanflight/src/main/blackbox/blackbox.c **** #define BLACKBOX_DELTA_FIELD_HEADER_COUNT       ARRAYLEN(blackboxFieldHeaderNames)
 130:../cleanflight/src/main/blackbox/blackbox.c **** #define BLACKBOX_SIMPLE_FIELD_HEADER_COUNT      (BLACKBOX_DELTA_FIELD_HEADER_COUNT - 2)
 131:../cleanflight/src/main/blackbox/blackbox.c **** #define BLACKBOX_CONDITIONAL_FIELD_HEADER_COUNT (BLACKBOX_DELTA_FIELD_HEADER_COUNT - 2)
 132:../cleanflight/src/main/blackbox/blackbox.c **** 
 133:../cleanflight/src/main/blackbox/blackbox.c **** typedef struct blackboxSimpleFieldDefinition_s {
 134:../cleanflight/src/main/blackbox/blackbox.c ****     const char *name;
 135:../cleanflight/src/main/blackbox/blackbox.c ****     int8_t fieldNameIndex;
 136:../cleanflight/src/main/blackbox/blackbox.c **** 
 137:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t isSigned;
 138:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t predict;
 139:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t encode;
 140:../cleanflight/src/main/blackbox/blackbox.c **** } blackboxSimpleFieldDefinition_t;
 141:../cleanflight/src/main/blackbox/blackbox.c **** 
 142:../cleanflight/src/main/blackbox/blackbox.c **** typedef struct blackboxConditionalFieldDefinition_s {
 143:../cleanflight/src/main/blackbox/blackbox.c ****     const char *name;
 144:../cleanflight/src/main/blackbox/blackbox.c ****     int8_t fieldNameIndex;
 145:../cleanflight/src/main/blackbox/blackbox.c **** 
 146:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t isSigned;
 147:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t predict;
 148:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t encode;
 149:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t condition; // Decide whether this field should appear in the log
 150:../cleanflight/src/main/blackbox/blackbox.c **** } blackboxConditionalFieldDefinition_t;
 151:../cleanflight/src/main/blackbox/blackbox.c **** 
 152:../cleanflight/src/main/blackbox/blackbox.c **** typedef struct blackboxDeltaFieldDefinition_s {
 153:../cleanflight/src/main/blackbox/blackbox.c ****     const char *name;
 154:../cleanflight/src/main/blackbox/blackbox.c ****     int8_t fieldNameIndex;
 155:../cleanflight/src/main/blackbox/blackbox.c **** 
 156:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t isSigned;
 157:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t Ipredict;
 158:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t Iencode;
 159:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t Ppredict;
 160:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t Pencode;
 161:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t condition; // Decide whether this field should appear in the log
 162:../cleanflight/src/main/blackbox/blackbox.c **** } blackboxDeltaFieldDefinition_t;
 163:../cleanflight/src/main/blackbox/blackbox.c **** 
 164:../cleanflight/src/main/blackbox/blackbox.c **** /**
 165:../cleanflight/src/main/blackbox/blackbox.c ****  * Description of the blackbox fields we are writing in our main intra (I) and inter (P) frames. Th
 166:../cleanflight/src/main/blackbox/blackbox.c ****  * written into the flight log header so the log can be properly interpreted (but these definitions
 167:../cleanflight/src/main/blackbox/blackbox.c ****  * the encoding to happen, we have to encode the flight log ourselves in write{Inter|Intra}frame() 
 168:../cleanflight/src/main/blackbox/blackbox.c ****  * the encoding we've promised here).
 169:../cleanflight/src/main/blackbox/blackbox.c ****  */
 170:../cleanflight/src/main/blackbox/blackbox.c **** static const blackboxDeltaFieldDefinition_t blackboxMainFields[] = {
 171:../cleanflight/src/main/blackbox/blackbox.c ****     /* loopIteration doesn't appear in P frames since it always increments */
 172:../cleanflight/src/main/blackbox/blackbox.c ****     {"loopIteration",-1, UNSIGNED, .Ipredict = PREDICT(0),     .Iencode = ENCODING(UNSIGNED_VB), .P
 173:../cleanflight/src/main/blackbox/blackbox.c ****     /* Time advances pretty steadily so the P-frame prediction is a straight line */
 174:../cleanflight/src/main/blackbox/blackbox.c ****     {"time",       -1, UNSIGNED, .Ipredict = PREDICT(0),       .Iencode = ENCODING(UNSIGNED_VB), .P
 175:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisP",       0, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 176:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisP",       1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 177:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisP",       2, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 178:../cleanflight/src/main/blackbox/blackbox.c ****     /* I terms get special packed encoding in P frames: */
 179:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisI",       0, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 180:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisI",       1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 181:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisI",       2, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 182:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisD",       0, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 183:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisD",       1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 184:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisD",       2, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 185:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisF",       0, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 186:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisF",       1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 187:../cleanflight/src/main/blackbox/blackbox.c ****     {"axisF",       2, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 188:../cleanflight/src/main/blackbox/blackbox.c ****     /* rcCommands are encoded together as a group in P-frames: */
 189:../cleanflight/src/main/blackbox/blackbox.c ****     {"rcCommand",   0, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 190:../cleanflight/src/main/blackbox/blackbox.c ****     {"rcCommand",   1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 191:../cleanflight/src/main/blackbox/blackbox.c ****     {"rcCommand",   2, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 192:../cleanflight/src/main/blackbox/blackbox.c ****     /* Throttle is always in the range [minthrottle..maxthrottle]: */
 193:../cleanflight/src/main/blackbox/blackbox.c ****     {"rcCommand",   3, UNSIGNED, .Ipredict = PREDICT(MINTHROTTLE), .Iencode = ENCODING(UNSIGNED_VB)
 194:../cleanflight/src/main/blackbox/blackbox.c **** 
 195:../cleanflight/src/main/blackbox/blackbox.c ****     {"vbatLatest",    -1, UNSIGNED, .Ipredict = PREDICT(VBATREF),  .Iencode = ENCODING(NEG_14BIT), 
 196:../cleanflight/src/main/blackbox/blackbox.c ****     {"amperageLatest",-1, SIGNED,   .Ipredict = PREDICT(0),        .Iencode = ENCODING(SIGNED_VB), 
 197:../cleanflight/src/main/blackbox/blackbox.c **** 
 198:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_MAG
 199:../cleanflight/src/main/blackbox/blackbox.c ****     {"magADC",      0, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 200:../cleanflight/src/main/blackbox/blackbox.c ****     {"magADC",      1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 201:../cleanflight/src/main/blackbox/blackbox.c ****     {"magADC",      2, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 202:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 203:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_BARO
 204:../cleanflight/src/main/blackbox/blackbox.c ****     {"BaroAlt",    -1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 205:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 206:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_RANGEFINDER
 207:../cleanflight/src/main/blackbox/blackbox.c ****     {"surfaceRaw",   -1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   
 208:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 209:../cleanflight/src/main/blackbox/blackbox.c ****     {"rssi",       -1, UNSIGNED, .Ipredict = PREDICT(0),       .Iencode = ENCODING(UNSIGNED_VB), .P
 210:../cleanflight/src/main/blackbox/blackbox.c **** 
 211:../cleanflight/src/main/blackbox/blackbox.c ****     /* Gyros and accelerometers base their P-predictions on the average of the previous 2 frames to
 212:../cleanflight/src/main/blackbox/blackbox.c ****     {"gyroADC",     0, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 213:../cleanflight/src/main/blackbox/blackbox.c ****     {"gyroADC",     1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 214:../cleanflight/src/main/blackbox/blackbox.c ****     {"gyroADC",     2, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 215:../cleanflight/src/main/blackbox/blackbox.c ****     {"accSmooth",   0, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 216:../cleanflight/src/main/blackbox/blackbox.c ****     {"accSmooth",   1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 217:../cleanflight/src/main/blackbox/blackbox.c ****     {"accSmooth",   2, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 218:../cleanflight/src/main/blackbox/blackbox.c ****     {"debug",       0, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 219:../cleanflight/src/main/blackbox/blackbox.c ****     {"debug",       1, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 220:../cleanflight/src/main/blackbox/blackbox.c ****     {"debug",       2, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 221:../cleanflight/src/main/blackbox/blackbox.c ****     {"debug",       3, SIGNED,   .Ipredict = PREDICT(0),       .Iencode = ENCODING(SIGNED_VB),   .P
 222:../cleanflight/src/main/blackbox/blackbox.c ****     /* Motors only rarely drops under minthrottle (when stick falls below mincommand), so predict m
 223:../cleanflight/src/main/blackbox/blackbox.c ****     {"motor",       0, UNSIGNED, .Ipredict = PREDICT(MINMOTOR), .Iencode = ENCODING(UNSIGNED_VB), .
 224:../cleanflight/src/main/blackbox/blackbox.c ****     /* Subsequent motors base their I-frame values on the first one, P-frame values on the average 
 225:../cleanflight/src/main/blackbox/blackbox.c ****     {"motor",       1, UNSIGNED, .Ipredict = PREDICT(MOTOR_0), .Iencode = ENCODING(SIGNED_VB),   .P
 226:../cleanflight/src/main/blackbox/blackbox.c ****     {"motor",       2, UNSIGNED, .Ipredict = PREDICT(MOTOR_0), .Iencode = ENCODING(SIGNED_VB),   .P
 227:../cleanflight/src/main/blackbox/blackbox.c ****     {"motor",       3, UNSIGNED, .Ipredict = PREDICT(MOTOR_0), .Iencode = ENCODING(SIGNED_VB),   .P
 228:../cleanflight/src/main/blackbox/blackbox.c ****     {"motor",       4, UNSIGNED, .Ipredict = PREDICT(MOTOR_0), .Iencode = ENCODING(SIGNED_VB),   .P
 229:../cleanflight/src/main/blackbox/blackbox.c ****     {"motor",       5, UNSIGNED, .Ipredict = PREDICT(MOTOR_0), .Iencode = ENCODING(SIGNED_VB),   .P
 230:../cleanflight/src/main/blackbox/blackbox.c ****     {"motor",       6, UNSIGNED, .Ipredict = PREDICT(MOTOR_0), .Iencode = ENCODING(SIGNED_VB),   .P
 231:../cleanflight/src/main/blackbox/blackbox.c ****     {"motor",       7, UNSIGNED, .Ipredict = PREDICT(MOTOR_0), .Iencode = ENCODING(SIGNED_VB),   .P
 232:../cleanflight/src/main/blackbox/blackbox.c **** 
 233:../cleanflight/src/main/blackbox/blackbox.c ****     /* Tricopter tail servo */
 234:../cleanflight/src/main/blackbox/blackbox.c ****     {"servo",       5, UNSIGNED, .Ipredict = PREDICT(1500),    .Iencode = ENCODING(SIGNED_VB),   .P
 235:../cleanflight/src/main/blackbox/blackbox.c **** };
 236:../cleanflight/src/main/blackbox/blackbox.c **** 
 237:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_GPS
 238:../cleanflight/src/main/blackbox/blackbox.c **** // GPS position/vel frame
 239:../cleanflight/src/main/blackbox/blackbox.c **** static const blackboxConditionalFieldDefinition_t blackboxGpsGFields[] = {
 240:../cleanflight/src/main/blackbox/blackbox.c ****     {"time",              -1, UNSIGNED, PREDICT(LAST_MAIN_FRAME_TIME), ENCODING(UNSIGNED_VB), CONDI
 241:../cleanflight/src/main/blackbox/blackbox.c ****     {"GPS_numSat",        -1, UNSIGNED, PREDICT(0),          ENCODING(UNSIGNED_VB), CONDITION(ALWAY
 242:../cleanflight/src/main/blackbox/blackbox.c ****     {"GPS_coord",          0, SIGNED,   PREDICT(HOME_COORD), ENCODING(SIGNED_VB),   CONDITION(ALWAY
 243:../cleanflight/src/main/blackbox/blackbox.c ****     {"GPS_coord",          1, SIGNED,   PREDICT(HOME_COORD), ENCODING(SIGNED_VB),   CONDITION(ALWAY
 244:../cleanflight/src/main/blackbox/blackbox.c ****     {"GPS_altitude",      -1, UNSIGNED, PREDICT(0),          ENCODING(UNSIGNED_VB), CONDITION(ALWAY
 245:../cleanflight/src/main/blackbox/blackbox.c ****     {"GPS_speed",         -1, UNSIGNED, PREDICT(0),          ENCODING(UNSIGNED_VB), CONDITION(ALWAY
 246:../cleanflight/src/main/blackbox/blackbox.c ****     {"GPS_ground_course", -1, UNSIGNED, PREDICT(0),          ENCODING(UNSIGNED_VB), CONDITION(ALWAY
 247:../cleanflight/src/main/blackbox/blackbox.c **** };
 248:../cleanflight/src/main/blackbox/blackbox.c **** 
 249:../cleanflight/src/main/blackbox/blackbox.c **** // GPS home frame
 250:../cleanflight/src/main/blackbox/blackbox.c **** static const blackboxSimpleFieldDefinition_t blackboxGpsHFields[] = {
 251:../cleanflight/src/main/blackbox/blackbox.c ****     {"GPS_home",           0, SIGNED,   PREDICT(0),          ENCODING(SIGNED_VB)},
 252:../cleanflight/src/main/blackbox/blackbox.c ****     {"GPS_home",           1, SIGNED,   PREDICT(0),          ENCODING(SIGNED_VB)}
 253:../cleanflight/src/main/blackbox/blackbox.c **** };
 254:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 255:../cleanflight/src/main/blackbox/blackbox.c **** 
 256:../cleanflight/src/main/blackbox/blackbox.c **** // Rarely-updated fields
 257:../cleanflight/src/main/blackbox/blackbox.c **** static const blackboxSimpleFieldDefinition_t blackboxSlowFields[] = {
 258:../cleanflight/src/main/blackbox/blackbox.c ****     {"flightModeFlags",       -1, UNSIGNED, PREDICT(0),      ENCODING(UNSIGNED_VB)},
 259:../cleanflight/src/main/blackbox/blackbox.c ****     {"stateFlags",            -1, UNSIGNED, PREDICT(0),      ENCODING(UNSIGNED_VB)},
 260:../cleanflight/src/main/blackbox/blackbox.c **** 
 261:../cleanflight/src/main/blackbox/blackbox.c ****     {"failsafePhase",         -1, UNSIGNED, PREDICT(0),      ENCODING(TAG2_3S32)},
 262:../cleanflight/src/main/blackbox/blackbox.c ****     {"rxSignalReceived",      -1, UNSIGNED, PREDICT(0),      ENCODING(TAG2_3S32)},
 263:../cleanflight/src/main/blackbox/blackbox.c ****     {"rxFlightChannelsValid", -1, UNSIGNED, PREDICT(0),      ENCODING(TAG2_3S32)}
 264:../cleanflight/src/main/blackbox/blackbox.c **** };
 265:../cleanflight/src/main/blackbox/blackbox.c **** 
 266:../cleanflight/src/main/blackbox/blackbox.c **** typedef enum BlackboxState {
 267:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_DISABLED = 0,
 268:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_STOPPED,
 269:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_PREPARE_LOG_FILE,
 270:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_SEND_HEADER,
 271:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_SEND_MAIN_FIELD_HEADER,
 272:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_SEND_GPS_H_HEADER,
 273:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_SEND_GPS_G_HEADER,
 274:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_SEND_SLOW_HEADER,
 275:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_SEND_SYSINFO,
 276:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_PAUSED,
 277:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_RUNNING,
 278:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_SHUTTING_DOWN,
 279:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_START_ERASE,
 280:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_ERASING,
 281:../cleanflight/src/main/blackbox/blackbox.c ****     BLACKBOX_STATE_ERASED
 282:../cleanflight/src/main/blackbox/blackbox.c **** } BlackboxState;
 283:../cleanflight/src/main/blackbox/blackbox.c **** 
 284:../cleanflight/src/main/blackbox/blackbox.c **** 
 285:../cleanflight/src/main/blackbox/blackbox.c **** typedef struct blackboxMainState_s {
 286:../cleanflight/src/main/blackbox/blackbox.c ****     uint32_t time;
 287:../cleanflight/src/main/blackbox/blackbox.c **** 
 288:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t axisPID_P[XYZ_AXIS_COUNT];
 289:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t axisPID_I[XYZ_AXIS_COUNT];
 290:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t axisPID_D[XYZ_AXIS_COUNT];
 291:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t axisPID_F[XYZ_AXIS_COUNT];
 292:../cleanflight/src/main/blackbox/blackbox.c **** 
 293:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t rcCommand[4];
 294:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t gyroADC[XYZ_AXIS_COUNT];
 295:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t accADC[XYZ_AXIS_COUNT];
 296:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t debug[DEBUG16_VALUE_COUNT];
 297:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t motor[MAX_SUPPORTED_MOTORS];
 298:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t servo[MAX_SUPPORTED_SERVOS];
 299:../cleanflight/src/main/blackbox/blackbox.c **** 
 300:../cleanflight/src/main/blackbox/blackbox.c ****     uint16_t vbatLatest;
 301:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t amperageLatest;
 302:../cleanflight/src/main/blackbox/blackbox.c **** 
 303:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_BARO
 304:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t BaroAlt;
 305:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 306:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_MAG
 307:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t magADC[XYZ_AXIS_COUNT];
 308:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 309:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_RANGEFINDER
 310:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t surfaceRaw;
 311:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 312:../cleanflight/src/main/blackbox/blackbox.c ****     uint16_t rssi;
 313:../cleanflight/src/main/blackbox/blackbox.c **** } blackboxMainState_t;
 314:../cleanflight/src/main/blackbox/blackbox.c **** 
 315:../cleanflight/src/main/blackbox/blackbox.c **** typedef struct blackboxGpsState_s {
 316:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t GPS_home[2];
 317:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t GPS_coord[2];
 318:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t GPS_numSat;
 319:../cleanflight/src/main/blackbox/blackbox.c **** } blackboxGpsState_t;
 320:../cleanflight/src/main/blackbox/blackbox.c **** 
 321:../cleanflight/src/main/blackbox/blackbox.c **** // This data is updated really infrequently:
 322:../cleanflight/src/main/blackbox/blackbox.c **** typedef struct blackboxSlowState_s {
 323:../cleanflight/src/main/blackbox/blackbox.c ****     uint32_t flightModeFlags; // extend this data size (from uint16_t)
 324:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t stateFlags;
 325:../cleanflight/src/main/blackbox/blackbox.c ****     uint8_t failsafePhase;
 326:../cleanflight/src/main/blackbox/blackbox.c ****     bool rxSignalReceived;
 327:../cleanflight/src/main/blackbox/blackbox.c ****     bool rxFlightChannelsValid;
 328:../cleanflight/src/main/blackbox/blackbox.c **** } __attribute__((__packed__)) blackboxSlowState_t; // We pack this struct so that padding doesn't i
 329:../cleanflight/src/main/blackbox/blackbox.c **** 
 330:../cleanflight/src/main/blackbox/blackbox.c **** //From rc_controls.c
 331:../cleanflight/src/main/blackbox/blackbox.c **** extern boxBitmask_t rcModeActivationMask;
 332:../cleanflight/src/main/blackbox/blackbox.c **** 
 333:../cleanflight/src/main/blackbox/blackbox.c **** static BlackboxState blackboxState = BLACKBOX_STATE_DISABLED;
 334:../cleanflight/src/main/blackbox/blackbox.c **** 
 335:../cleanflight/src/main/blackbox/blackbox.c **** static uint32_t blackboxLastArmingBeep = 0;
 336:../cleanflight/src/main/blackbox/blackbox.c **** static uint32_t blackboxLastFlightModeFlags = 0; // New event tracking of flight modes
 337:../cleanflight/src/main/blackbox/blackbox.c **** 
 338:../cleanflight/src/main/blackbox/blackbox.c **** static struct {
 339:../cleanflight/src/main/blackbox/blackbox.c ****     uint32_t headerIndex;
 340:../cleanflight/src/main/blackbox/blackbox.c **** 
 341:../cleanflight/src/main/blackbox/blackbox.c ****     /* Since these fields are used during different blackbox states (never simultaneously) we can
 342:../cleanflight/src/main/blackbox/blackbox.c ****      * overlap them to save on RAM
 343:../cleanflight/src/main/blackbox/blackbox.c ****      */
 344:../cleanflight/src/main/blackbox/blackbox.c ****     union {
 345:../cleanflight/src/main/blackbox/blackbox.c ****         int fieldIndex;
 346:../cleanflight/src/main/blackbox/blackbox.c ****         uint32_t startTime;
 347:../cleanflight/src/main/blackbox/blackbox.c ****     } u;
 348:../cleanflight/src/main/blackbox/blackbox.c **** } xmitState;
 349:../cleanflight/src/main/blackbox/blackbox.c **** 
 350:../cleanflight/src/main/blackbox/blackbox.c **** // Cache for FLIGHT_LOG_FIELD_CONDITION_* test results:
 351:../cleanflight/src/main/blackbox/blackbox.c **** static uint32_t blackboxConditionCache;
 352:../cleanflight/src/main/blackbox/blackbox.c **** 
 353:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_ASSERT((sizeof(blackboxConditionCache) * 8) >= FLIGHT_LOG_FIELD_CONDITION_LAST, too_many_fli
 354:../cleanflight/src/main/blackbox/blackbox.c **** 
 355:../cleanflight/src/main/blackbox/blackbox.c **** static uint32_t blackboxIteration;
 356:../cleanflight/src/main/blackbox/blackbox.c **** static uint16_t blackboxLoopIndex;
 357:../cleanflight/src/main/blackbox/blackbox.c **** static uint16_t blackboxPFrameIndex;
 358:../cleanflight/src/main/blackbox/blackbox.c **** static uint16_t blackboxIFrameIndex;
 359:../cleanflight/src/main/blackbox/blackbox.c **** // number of flight loop iterations before logging I-frame
 360:../cleanflight/src/main/blackbox/blackbox.c **** // typically 32 for 1kHz loop, 64 for 2kHz loop etc
 361:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED int16_t blackboxIInterval = 0;
 362:../cleanflight/src/main/blackbox/blackbox.c **** // number of flight loop iterations before logging P-frame
 363:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED int16_t blackboxPInterval = 0;
 364:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED int32_t blackboxSInterval = 0;
 365:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED int32_t blackboxSlowFrameIterationTimer;
 366:../cleanflight/src/main/blackbox/blackbox.c **** static bool blackboxLoggedAnyFrames;
 367:../cleanflight/src/main/blackbox/blackbox.c **** 
 368:../cleanflight/src/main/blackbox/blackbox.c **** /*
 369:../cleanflight/src/main/blackbox/blackbox.c ****  * We store voltages in I-frames relative to this, which was the voltage when the blackbox was acti
 370:../cleanflight/src/main/blackbox/blackbox.c ****  * This helps out since the voltage is only expected to fall from that point and we can reduce our 
 371:../cleanflight/src/main/blackbox/blackbox.c ****  * to encode:
 372:../cleanflight/src/main/blackbox/blackbox.c ****  */
 373:../cleanflight/src/main/blackbox/blackbox.c **** static uint16_t vbatReference;
 374:../cleanflight/src/main/blackbox/blackbox.c **** 
 375:../cleanflight/src/main/blackbox/blackbox.c **** static blackboxGpsState_t gpsHistory;
 376:../cleanflight/src/main/blackbox/blackbox.c **** static blackboxSlowState_t slowHistory;
 377:../cleanflight/src/main/blackbox/blackbox.c **** 
 378:../cleanflight/src/main/blackbox/blackbox.c **** // Keep a history of length 2, plus a buffer for MW to store the new values into
 379:../cleanflight/src/main/blackbox/blackbox.c **** static blackboxMainState_t blackboxHistoryRing[3];
 380:../cleanflight/src/main/blackbox/blackbox.c **** 
 381:../cleanflight/src/main/blackbox/blackbox.c **** // These point into blackboxHistoryRing, use them to know where to store history of a given age (0,
 382:../cleanflight/src/main/blackbox/blackbox.c **** static blackboxMainState_t* blackboxHistory[3];
 383:../cleanflight/src/main/blackbox/blackbox.c **** 
 384:../cleanflight/src/main/blackbox/blackbox.c **** static bool blackboxModeActivationConditionPresent = false;
 385:../cleanflight/src/main/blackbox/blackbox.c **** 
 386:../cleanflight/src/main/blackbox/blackbox.c **** /**
 387:../cleanflight/src/main/blackbox/blackbox.c ****  * Return true if it is safe to edit the Blackbox configuration.
 388:../cleanflight/src/main/blackbox/blackbox.c ****  */
 389:../cleanflight/src/main/blackbox/blackbox.c **** bool blackboxMayEditConfig(void)
 390:../cleanflight/src/main/blackbox/blackbox.c **** {
 1499              	 .loc 16 390 0
 1500              	 .cfi_startproc
 1501              	 
 1502              	 
 1503              	 
 1504 0000 80B4     	 push {r7}
 1505              	.LCFI80:
 1506              	 .cfi_def_cfa_offset 4
 1507              	 .cfi_offset 7,-4
 1508 0002 00AF     	 add r7,sp,#0
 1509              	.LCFI81:
 1510              	 .cfi_def_cfa_register 7
 391:../cleanflight/src/main/blackbox/blackbox.c ****     return blackboxState <= BLACKBOX_STATE_STOPPED;
 1511              	 .loc 16 391 0
 1512 0004 054B     	 ldr r3,.L79
 1513 0006 1B78     	 ldrb r3,[r3]
 1514 0008 012B     	 cmp r3,#1
 1515 000a 94BF     	 ite ls
 1516 000c 0123     	 movls r3,#1
 1517 000e 0023     	 movhi r3,#0
 1518 0010 DBB2     	 uxtb r3,r3
 392:../cleanflight/src/main/blackbox/blackbox.c **** }
 1519              	 .loc 16 392 0
 1520 0012 1846     	 mov r0,r3
 1521 0014 BD46     	 mov sp,r7
 1522              	.LCFI82:
 1523              	 .cfi_def_cfa_register 13
 1524              	 
 1525 0016 5DF8047B 	 ldr r7,[sp],#4
 1526              	.LCFI83:
 1527              	 .cfi_restore 7
 1528              	 .cfi_def_cfa_offset 0
 1529 001a 7047     	 bx lr
 1530              	.L80:
 1531              	 .align 2
 1532              	.L79:
 1533 001c 00000000 	 .word blackboxState
 1534              	 .cfi_endproc
 1535              	.LFE608:
 1537              	 .section .text.blackboxIsOnlyLoggingIntraframes,"ax",%progbits
 1538              	 .align 2
 1539              	 .thumb
 1540              	 .thumb_func
 1542              	blackboxIsOnlyLoggingIntraframes:
 1543              	.LFB609:
 393:../cleanflight/src/main/blackbox/blackbox.c **** 
 394:../cleanflight/src/main/blackbox/blackbox.c **** static bool blackboxIsOnlyLoggingIntraframes(void)
 395:../cleanflight/src/main/blackbox/blackbox.c **** {
 1544              	 .loc 16 395 0
 1545              	 .cfi_startproc
 1546              	 
 1547              	 
 1548 0000 80B5     	 push {r7,lr}
 1549              	.LCFI84:
 1550              	 .cfi_def_cfa_offset 8
 1551              	 .cfi_offset 7,-8
 1552              	 .cfi_offset 14,-4
 1553 0002 00AF     	 add r7,sp,#0
 1554              	.LCFI85:
 1555              	 .cfi_def_cfa_register 7
 396:../cleanflight/src/main/blackbox/blackbox.c ****     return blackboxConfig()->p_ratio == 0;
 1556              	 .loc 16 396 0
 1557 0004 FFF7FEFF 	 bl blackboxConfig
 1558 0008 0346     	 mov r3,r0
 1559 000a 1B88     	 ldrh r3,[r3]
 1560 000c 9BB2     	 uxth r3,r3
 1561 000e 002B     	 cmp r3,#0
 1562 0010 0CBF     	 ite eq
 1563 0012 0123     	 moveq r3,#1
 1564 0014 0023     	 movne r3,#0
 1565 0016 DBB2     	 uxtb r3,r3
 397:../cleanflight/src/main/blackbox/blackbox.c **** }
 1566              	 .loc 16 397 0
 1567 0018 1846     	 mov r0,r3
 1568 001a 80BD     	 pop {r7,pc}
 1569              	 .cfi_endproc
 1570              	.LFE609:
 1572              	 .section .text.testBlackboxConditionUncached,"ax",%progbits
 1573              	 .align 2
 1574              	 .thumb
 1575              	 .thumb_func
 1577              	testBlackboxConditionUncached:
 1578              	.LFB610:
 398:../cleanflight/src/main/blackbox/blackbox.c **** 
 399:../cleanflight/src/main/blackbox/blackbox.c **** static bool testBlackboxConditionUncached(FlightLogFieldCondition condition)
 400:../cleanflight/src/main/blackbox/blackbox.c **** {
 1579              	 .loc 16 400 0
 1580              	 .cfi_startproc
 1581              	 
 1582              	 
 1583 0000 80B5     	 push {r7,lr}
 1584              	.LCFI86:
 1585              	 .cfi_def_cfa_offset 8
 1586              	 .cfi_offset 7,-8
 1587              	 .cfi_offset 14,-4
 1588 0002 82B0     	 sub sp,sp,#8
 1589              	.LCFI87:
 1590              	 .cfi_def_cfa_offset 16
 1591 0004 00AF     	 add r7,sp,#0
 1592              	.LCFI88:
 1593              	 .cfi_def_cfa_register 7
 1594 0006 0346     	 mov r3,r0
 1595 0008 FB71     	 strb r3,[r7,#7]
 401:../cleanflight/src/main/blackbox/blackbox.c ****     switch (condition) {
 1596              	 .loc 16 401 0
 1597 000a FB79     	 ldrb r3,[r7,#7]
 1598 000c 162B     	 cmp r3,#22
 1599 000e 00F2C780 	 bhi .L84
 1600 0012 01A2     	 adr r2,.L86
 1601 0014 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1602              	 .p2align 2
 1603              	.L86:
 1604 0018 75000000 	 .word .L85+1
 1605 001c 79000000 	 .word .L87+1
 1606 0020 79000000 	 .word .L87+1
 1607 0024 79000000 	 .word .L87+1
 1608 0028 79000000 	 .word .L87+1
 1609 002c 79000000 	 .word .L87+1
 1610 0030 79000000 	 .word .L87+1
 1611 0034 79000000 	 .word .L87+1
 1612 0038 79000000 	 .word .L87+1
 1613 003c 8F000000 	 .word .L88+1
 1614 0040 D7000000 	 .word .L89+1
 1615 0044 E1000000 	 .word .L90+1
 1616 0048 EB000000 	 .word .L91+1
 1617 004c FF000000 	 .word .L92+1
 1618 0050 25010000 	 .word .L93+1
 1619 0054 29010000 	 .word .L94+1
 1620 0058 B5000000 	 .word .L95+1
 1621 005c B5000000 	 .word .L95+1
 1622 0060 B5000000 	 .word .L95+1
 1623 0064 51010000 	 .word .L96+1
 1624 0068 67010000 	 .word .L97+1
 1625 006c 8D010000 	 .word .L98+1
 1626 0070 9D010000 	 .word .L99+1
 1627              	 .p2align 1
 1628              	.L85:
 402:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_ALWAYS:
 403:../cleanflight/src/main/blackbox/blackbox.c ****         return true;
 1629              	 .loc 16 403 0
 1630 0074 0123     	 movs r3,#1
 1631 0076 94E0     	 b .L100
 1632              	.L87:
 404:../cleanflight/src/main/blackbox/blackbox.c **** 
 405:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_1:
 406:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_2:
 407:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_3:
 408:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_4:
 409:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_5:
 410:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_6:
 411:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_7:
 412:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_8:
 413:../cleanflight/src/main/blackbox/blackbox.c ****         return getMotorCount() >= condition - FLIGHT_LOG_FIELD_CONDITION_AT_LEAST_MOTORS_1 + 1;
 1633              	 .loc 16 413 0
 1634 0078 FFF7FEFF 	 bl getMotorCount
 1635 007c 0346     	 mov r3,r0
 1636 007e 1A46     	 mov r2,r3
 1637 0080 FB79     	 ldrb r3,[r7,#7]
 1638 0082 9A42     	 cmp r2,r3
 1639 0084 ACBF     	 ite ge
 1640 0086 0123     	 movge r3,#1
 1641 0088 0023     	 movlt r3,#0
 1642 008a DBB2     	 uxtb r3,r3
 1643 008c 89E0     	 b .L100
 1644              	.L88:
 414:../cleanflight/src/main/blackbox/blackbox.c **** 
 415:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_TRICOPTER:
 416:../cleanflight/src/main/blackbox/blackbox.c ****         return mixerConfig()->mixerMode == MIXER_TRI || mixerConfig()->mixerMode == MIXER_CUSTOM_TR
 1645              	 .loc 16 416 0
 1646 008e FFF7FEFF 	 bl mixerConfig
 1647 0092 0346     	 mov r3,r0
 1648 0094 1B78     	 ldrb r3,[r3]
 1649 0096 012B     	 cmp r3,#1
 1650 0098 05D0     	 beq .L101
 1651              	 .loc 16 416 0 is_stmt 0 discriminator 2
 1652 009a FFF7FEFF 	 bl mixerConfig
 1653 009e 0346     	 mov r3,r0
 1654 00a0 1B78     	 ldrb r3,[r3]
 1655 00a2 192B     	 cmp r3,#25
 1656 00a4 01D1     	 bne .L102
 1657              	.L101:
 1658              	 .loc 16 416 0 discriminator 3
 1659 00a6 0123     	 movs r3,#1
 1660 00a8 00E0     	 b .L103
 1661              	.L102:
 1662              	 .loc 16 416 0 discriminator 4
 1663 00aa 0023     	 movs r3,#0
 1664              	.L103:
 1665              	 .loc 16 416 0 discriminator 6
 1666 00ac 03F00103 	 and r3,r3,#1
 1667 00b0 DBB2     	 uxtb r3,r3
 1668 00b2 76E0     	 b .L100
 1669              	.L95:
 417:../cleanflight/src/main/blackbox/blackbox.c **** 
 418:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0:
 419:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_1:
 420:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_2:
 421:../cleanflight/src/main/blackbox/blackbox.c ****         return currentPidProfile->pid[condition - FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0].D != 
 1670              	 .loc 16 421 0 is_stmt 1
 1671 00b4 3D4B     	 ldr r3,.L111
 1672 00b6 1968     	 ldr r1,[r3]
 1673 00b8 FB79     	 ldrb r3,[r7,#7]
 1674 00ba A3F11002 	 sub r2,r3,#16
 1675 00be 1346     	 mov r3,r2
 1676 00c0 9B00     	 lsls r3,r3,#2
 1677 00c2 1344     	 add r3,r3,r2
 1678 00c4 0B44     	 add r3,r3,r1
 1679 00c6 0833     	 adds r3,r3,#8
 1680 00c8 9B78     	 ldrb r3,[r3,#2]
 1681 00ca 002B     	 cmp r3,#0
 1682 00cc 14BF     	 ite ne
 1683 00ce 0123     	 movne r3,#1
 1684 00d0 0023     	 moveq r3,#0
 1685 00d2 DBB2     	 uxtb r3,r3
 1686 00d4 65E0     	 b .L100
 1687              	.L89:
 422:../cleanflight/src/main/blackbox/blackbox.c **** 
 423:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_MAG:
 424:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_MAG
 425:../cleanflight/src/main/blackbox/blackbox.c ****         return sensors(SENSOR_MAG);
 1688              	 .loc 16 425 0
 1689 00d6 0820     	 movs r0,#8
 1690 00d8 FFF7FEFF 	 bl sensors
 1691 00dc 0346     	 mov r3,r0
 1692 00de 60E0     	 b .L100
 1693              	.L90:
 426:../cleanflight/src/main/blackbox/blackbox.c **** #else
 427:../cleanflight/src/main/blackbox/blackbox.c ****         return false;
 428:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 429:../cleanflight/src/main/blackbox/blackbox.c **** 
 430:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_BARO:
 431:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_BARO
 432:../cleanflight/src/main/blackbox/blackbox.c ****         return sensors(SENSOR_BARO);
 1694              	 .loc 16 432 0
 1695 00e0 0420     	 movs r0,#4
 1696 00e2 FFF7FEFF 	 bl sensors
 1697 00e6 0346     	 mov r3,r0
 1698 00e8 5BE0     	 b .L100
 1699              	.L91:
 433:../cleanflight/src/main/blackbox/blackbox.c **** #else
 434:../cleanflight/src/main/blackbox/blackbox.c ****         return false;
 435:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 436:../cleanflight/src/main/blackbox/blackbox.c **** 
 437:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_VBAT:
 438:../cleanflight/src/main/blackbox/blackbox.c ****         return batteryConfig()->voltageMeterSource != VOLTAGE_METER_NONE;
 1700              	 .loc 16 438 0
 1701 00ea FFF7FEFF 	 bl batteryConfig
 1702 00ee 0346     	 mov r3,r0
 1703 00f0 5B79     	 ldrb r3,[r3,#5]
 1704 00f2 002B     	 cmp r3,#0
 1705 00f4 14BF     	 ite ne
 1706 00f6 0123     	 movne r3,#1
 1707 00f8 0023     	 moveq r3,#0
 1708 00fa DBB2     	 uxtb r3,r3
 1709 00fc 51E0     	 b .L100
 1710              	.L92:
 439:../cleanflight/src/main/blackbox/blackbox.c **** 
 440:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_AMPERAGE_ADC:
 441:../cleanflight/src/main/blackbox/blackbox.c ****         return (batteryConfig()->currentMeterSource != CURRENT_METER_NONE) && (batteryConfig()->cur
 1711              	 .loc 16 441 0
 1712 00fe FFF7FEFF 	 bl batteryConfig
 1713 0102 0346     	 mov r3,r0
 1714 0104 9B79     	 ldrb r3,[r3,#6]
 1715 0106 002B     	 cmp r3,#0
 1716 0108 07D0     	 beq .L104
 1717              	 .loc 16 441 0 is_stmt 0 discriminator 1
 1718 010a FFF7FEFF 	 bl batteryConfig
 1719 010e 0346     	 mov r3,r0
 1720 0110 9B79     	 ldrb r3,[r3,#6]
 1721 0112 022B     	 cmp r3,#2
 1722 0114 01D0     	 beq .L104
 1723              	 .loc 16 441 0 discriminator 3
 1724 0116 0123     	 movs r3,#1
 1725 0118 00E0     	 b .L105
 1726              	.L104:
 1727              	 .loc 16 441 0 discriminator 4
 1728 011a 0023     	 movs r3,#0
 1729              	.L105:
 1730              	 .loc 16 441 0 discriminator 6
 1731 011c 03F00103 	 and r3,r3,#1
 1732 0120 DBB2     	 uxtb r3,r3
 1733 0122 3EE0     	 b .L100
 1734              	.L93:
 442:../cleanflight/src/main/blackbox/blackbox.c **** 
 443:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_RANGEFINDER:
 444:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_RANGEFINDER
 445:../cleanflight/src/main/blackbox/blackbox.c ****         return sensors(SENSOR_RANGEFINDER);
 446:../cleanflight/src/main/blackbox/blackbox.c **** #else
 447:../cleanflight/src/main/blackbox/blackbox.c ****         return false;
 1735              	 .loc 16 447 0 is_stmt 1
 1736 0124 0023     	 movs r3,#0
 1737 0126 3CE0     	 b .L100
 1738              	.L94:
 448:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 449:../cleanflight/src/main/blackbox/blackbox.c **** 
 450:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_RSSI:
 451:../cleanflight/src/main/blackbox/blackbox.c ****         return rxConfig()->rssi_channel > 0 || feature(FEATURE_RSSI_ADC);
 1739              	 .loc 16 451 0
 1740 0128 FFF7FEFF 	 bl rxConfig
 1741 012c 0346     	 mov r3,r0
 1742 012e DB7B     	 ldrb r3,[r3,#15]
 1743 0130 002B     	 cmp r3,#0
 1744 0132 06D1     	 bne .L106
 1745              	 .loc 16 451 0 is_stmt 0 discriminator 2
 1746 0134 4FF40040 	 mov r0,#32768
 1747 0138 FFF7FEFF 	 bl feature
 1748 013c 0346     	 mov r3,r0
 1749 013e 002B     	 cmp r3,#0
 1750 0140 01D0     	 beq .L107
 1751              	.L106:
 1752              	 .loc 16 451 0 discriminator 3
 1753 0142 0123     	 movs r3,#1
 1754 0144 00E0     	 b .L108
 1755              	.L107:
 1756              	 .loc 16 451 0 discriminator 4
 1757 0146 0023     	 movs r3,#0
 1758              	.L108:
 1759              	 .loc 16 451 0 discriminator 6
 1760 0148 03F00103 	 and r3,r3,#1
 1761 014c DBB2     	 uxtb r3,r3
 1762 014e 28E0     	 b .L100
 1763              	.L96:
 452:../cleanflight/src/main/blackbox/blackbox.c **** 
 453:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_NOT_LOGGING_EVERY_FRAME:
 454:../cleanflight/src/main/blackbox/blackbox.c ****         return blackboxConfig()->p_ratio != 1;
 1764              	 .loc 16 454 0 is_stmt 1
 1765 0150 FFF7FEFF 	 bl blackboxConfig
 1766 0154 0346     	 mov r3,r0
 1767 0156 1B88     	 ldrh r3,[r3]
 1768 0158 9BB2     	 uxth r3,r3
 1769 015a 012B     	 cmp r3,#1
 1770 015c 14BF     	 ite ne
 1771 015e 0123     	 movne r3,#1
 1772 0160 0023     	 moveq r3,#0
 1773 0162 DBB2     	 uxtb r3,r3
 1774 0164 1DE0     	 b .L100
 1775              	.L97:
 455:../cleanflight/src/main/blackbox/blackbox.c **** 
 456:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_ACC:
 457:../cleanflight/src/main/blackbox/blackbox.c ****         return sensors(SENSOR_ACC) && blackboxConfig()->record_acc;
 1776              	 .loc 16 457 0
 1777 0166 0220     	 movs r0,#2
 1778 0168 FFF7FEFF 	 bl sensors
 1779 016c 0346     	 mov r3,r0
 1780 016e 002B     	 cmp r3,#0
 1781 0170 07D0     	 beq .L109
 1782              	 .loc 16 457 0 is_stmt 0 discriminator 1
 1783 0172 FFF7FEFF 	 bl blackboxConfig
 1784 0176 0346     	 mov r3,r0
 1785 0178 DB78     	 ldrb r3,[r3,#3]
 1786 017a 002B     	 cmp r3,#0
 1787 017c 01D0     	 beq .L109
 1788              	 .loc 16 457 0 discriminator 3
 1789 017e 0123     	 movs r3,#1
 1790 0180 00E0     	 b .L110
 1791              	.L109:
 1792              	 .loc 16 457 0 discriminator 4
 1793 0182 0023     	 movs r3,#0
 1794              	.L110:
 1795              	 .loc 16 457 0 discriminator 6
 1796 0184 03F00103 	 and r3,r3,#1
 1797 0188 DBB2     	 uxtb r3,r3
 1798 018a 0AE0     	 b .L100
 1799              	.L98:
 458:../cleanflight/src/main/blackbox/blackbox.c **** 
 459:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_DEBUG:
 460:../cleanflight/src/main/blackbox/blackbox.c ****         return debugMode != DEBUG_NONE;
 1800              	 .loc 16 460 0 is_stmt 1
 1801 018c 084B     	 ldr r3,.L111+4
 1802 018e 1B78     	 ldrb r3,[r3]
 1803 0190 002B     	 cmp r3,#0
 1804 0192 14BF     	 ite ne
 1805 0194 0123     	 movne r3,#1
 1806 0196 0023     	 moveq r3,#0
 1807 0198 DBB2     	 uxtb r3,r3
 1808 019a 02E0     	 b .L100
 1809              	.L99:
 461:../cleanflight/src/main/blackbox/blackbox.c **** 
 462:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_FIELD_CONDITION_NEVER:
 463:../cleanflight/src/main/blackbox/blackbox.c ****         return false;
 1810              	 .loc 16 463 0
 1811 019c 0023     	 movs r3,#0
 1812 019e 00E0     	 b .L100
 1813              	.L84:
 464:../cleanflight/src/main/blackbox/blackbox.c **** 
 465:../cleanflight/src/main/blackbox/blackbox.c ****     default:
 466:../cleanflight/src/main/blackbox/blackbox.c ****         return false;
 1814              	 .loc 16 466 0
 1815 01a0 0023     	 movs r3,#0
 1816              	.L100:
 467:../cleanflight/src/main/blackbox/blackbox.c ****     }
 468:../cleanflight/src/main/blackbox/blackbox.c **** }
 1817              	 .loc 16 468 0
 1818 01a2 1846     	 mov r0,r3
 1819 01a4 0837     	 adds r7,r7,#8
 1820              	.LCFI89:
 1821              	 .cfi_def_cfa_offset 8
 1822 01a6 BD46     	 mov sp,r7
 1823              	.LCFI90:
 1824              	 .cfi_def_cfa_register 13
 1825              	 
 1826 01a8 80BD     	 pop {r7,pc}
 1827              	.L112:
 1828 01aa 00BF     	 .align 2
 1829              	.L111:
 1830 01ac 00000000 	 .word currentPidProfile
 1831 01b0 00000000 	 .word debugMode
 1832              	 .cfi_endproc
 1833              	.LFE610:
 1835              	 .section .text.blackboxBuildConditionCache,"ax",%progbits
 1836              	 .align 2
 1837              	 .thumb
 1838              	 .thumb_func
 1840              	blackboxBuildConditionCache:
 1841              	.LFB611:
 469:../cleanflight/src/main/blackbox/blackbox.c **** 
 470:../cleanflight/src/main/blackbox/blackbox.c **** static void blackboxBuildConditionCache(void)
 471:../cleanflight/src/main/blackbox/blackbox.c **** {
 1842              	 .loc 16 471 0
 1843              	 .cfi_startproc
 1844              	 
 1845              	 
 1846 0000 80B5     	 push {r7,lr}
 1847              	.LCFI91:
 1848              	 .cfi_def_cfa_offset 8
 1849              	 .cfi_offset 7,-8
 1850              	 .cfi_offset 14,-4
 1851 0002 82B0     	 sub sp,sp,#8
 1852              	.LCFI92:
 1853              	 .cfi_def_cfa_offset 16
 1854 0004 00AF     	 add r7,sp,#0
 1855              	.LCFI93:
 1856              	 .cfi_def_cfa_register 7
 472:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxConditionCache = 0;
 1857              	 .loc 16 472 0
 1858 0006 104B     	 ldr r3,.L117
 1859 0008 0022     	 movs r2,#0
 1860 000a 1A60     	 str r2,[r3]
 1861              	.LBB2:
 473:../cleanflight/src/main/blackbox/blackbox.c ****     for (FlightLogFieldCondition cond = FLIGHT_LOG_FIELD_CONDITION_FIRST; cond <= FLIGHT_LOG_FIELD_
 1862              	 .loc 16 473 0
 1863 000c 0023     	 movs r3,#0
 1864 000e FB71     	 strb r3,[r7,#7]
 1865 0010 13E0     	 b .L114
 1866              	.L116:
 474:../cleanflight/src/main/blackbox/blackbox.c ****         if (testBlackboxConditionUncached(cond)) {
 1867              	 .loc 16 474 0
 1868 0012 FB79     	 ldrb r3,[r7,#7]
 1869 0014 1846     	 mov r0,r3
 1870 0016 FFF7FEFF 	 bl testBlackboxConditionUncached
 1871 001a 0346     	 mov r3,r0
 1872 001c 002B     	 cmp r3,#0
 1873 001e 09D0     	 beq .L115
 475:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxConditionCache |= 1 << cond;
 1874              	 .loc 16 475 0
 1875 0020 FB79     	 ldrb r3,[r7,#7]
 1876 0022 0122     	 movs r2,#1
 1877 0024 02FA03F3 	 lsl r3,r2,r3
 1878 0028 1A46     	 mov r2,r3
 1879 002a 074B     	 ldr r3,.L117
 1880 002c 1B68     	 ldr r3,[r3]
 1881 002e 1343     	 orrs r3,r3,r2
 1882 0030 054A     	 ldr r2,.L117
 1883 0032 1360     	 str r3,[r2]
 1884              	.L115:
 473:../cleanflight/src/main/blackbox/blackbox.c ****     for (FlightLogFieldCondition cond = FLIGHT_LOG_FIELD_CONDITION_FIRST; cond <= FLIGHT_LOG_FIELD_
 1885              	 .loc 16 473 0 discriminator 2
 1886 0034 FB79     	 ldrb r3,[r7,#7]
 1887 0036 0133     	 adds r3,r3,#1
 1888 0038 FB71     	 strb r3,[r7,#7]
 1889              	.L114:
 473:../cleanflight/src/main/blackbox/blackbox.c ****     for (FlightLogFieldCondition cond = FLIGHT_LOG_FIELD_CONDITION_FIRST; cond <= FLIGHT_LOG_FIELD_
 1890              	 .loc 16 473 0 is_stmt 0 discriminator 1
 1891 003a FB79     	 ldrb r3,[r7,#7]
 1892 003c 162B     	 cmp r3,#22
 1893 003e E8D9     	 bls .L116
 1894              	.LBE2:
 476:../cleanflight/src/main/blackbox/blackbox.c ****         }
 477:../cleanflight/src/main/blackbox/blackbox.c ****     }
 478:../cleanflight/src/main/blackbox/blackbox.c **** }
 1895              	 .loc 16 478 0 is_stmt 1
 1896 0040 0837     	 adds r7,r7,#8
 1897              	.LCFI94:
 1898              	 .cfi_def_cfa_offset 8
 1899 0042 BD46     	 mov sp,r7
 1900              	.LCFI95:
 1901              	 .cfi_def_cfa_register 13
 1902              	 
 1903 0044 80BD     	 pop {r7,pc}
 1904              	.L118:
 1905 0046 00BF     	 .align 2
 1906              	.L117:
 1907 0048 00000000 	 .word blackboxConditionCache
 1908              	 .cfi_endproc
 1909              	.LFE611:
 1911              	 .section .text.testBlackboxCondition,"ax",%progbits
 1912              	 .align 2
 1913              	 .thumb
 1914              	 .thumb_func
 1916              	testBlackboxCondition:
 1917              	.LFB612:
 479:../cleanflight/src/main/blackbox/blackbox.c **** 
 480:../cleanflight/src/main/blackbox/blackbox.c **** static bool testBlackboxCondition(FlightLogFieldCondition condition)
 481:../cleanflight/src/main/blackbox/blackbox.c **** {
 1918              	 .loc 16 481 0
 1919              	 .cfi_startproc
 1920              	 
 1921              	 
 1922              	 
 1923 0000 80B4     	 push {r7}
 1924              	.LCFI96:
 1925              	 .cfi_def_cfa_offset 4
 1926              	 .cfi_offset 7,-4
 1927 0002 83B0     	 sub sp,sp,#12
 1928              	.LCFI97:
 1929              	 .cfi_def_cfa_offset 16
 1930 0004 00AF     	 add r7,sp,#0
 1931              	.LCFI98:
 1932              	 .cfi_def_cfa_register 7
 1933 0006 0346     	 mov r3,r0
 1934 0008 FB71     	 strb r3,[r7,#7]
 482:../cleanflight/src/main/blackbox/blackbox.c ****     return (blackboxConditionCache & (1 << condition)) != 0;
 1935              	 .loc 16 482 0
 1936 000a FB79     	 ldrb r3,[r7,#7]
 1937 000c 0122     	 movs r2,#1
 1938 000e 02FA03F3 	 lsl r3,r2,r3
 1939 0012 1A46     	 mov r2,r3
 1940 0014 064B     	 ldr r3,.L121
 1941 0016 1B68     	 ldr r3,[r3]
 1942 0018 1340     	 ands r3,r3,r2
 1943 001a 002B     	 cmp r3,#0
 1944 001c 14BF     	 ite ne
 1945 001e 0123     	 movne r3,#1
 1946 0020 0023     	 moveq r3,#0
 1947 0022 DBB2     	 uxtb r3,r3
 483:../cleanflight/src/main/blackbox/blackbox.c **** }
 1948              	 .loc 16 483 0
 1949 0024 1846     	 mov r0,r3
 1950 0026 0C37     	 adds r7,r7,#12
 1951              	.LCFI99:
 1952              	 .cfi_def_cfa_offset 4
 1953 0028 BD46     	 mov sp,r7
 1954              	.LCFI100:
 1955              	 .cfi_def_cfa_register 13
 1956              	 
 1957 002a 5DF8047B 	 ldr r7,[sp],#4
 1958              	.LCFI101:
 1959              	 .cfi_restore 7
 1960              	 .cfi_def_cfa_offset 0
 1961 002e 7047     	 bx lr
 1962              	.L122:
 1963              	 .align 2
 1964              	.L121:
 1965 0030 00000000 	 .word blackboxConditionCache
 1966              	 .cfi_endproc
 1967              	.LFE612:
 1969              	 .section .text.blackboxSetState,"ax",%progbits
 1970              	 .align 2
 1971              	 .thumb
 1972              	 .thumb_func
 1974              	blackboxSetState:
 1975              	.LFB613:
 484:../cleanflight/src/main/blackbox/blackbox.c **** 
 485:../cleanflight/src/main/blackbox/blackbox.c **** static void blackboxSetState(BlackboxState newState)
 486:../cleanflight/src/main/blackbox/blackbox.c **** {
 1976              	 .loc 16 486 0
 1977              	 .cfi_startproc
 1978              	 
 1979              	 
 1980 0000 80B5     	 push {r7,lr}
 1981              	.LCFI102:
 1982              	 .cfi_def_cfa_offset 8
 1983              	 .cfi_offset 7,-8
 1984              	 .cfi_offset 14,-4
 1985 0002 82B0     	 sub sp,sp,#8
 1986              	.LCFI103:
 1987              	 .cfi_def_cfa_offset 16
 1988 0004 00AF     	 add r7,sp,#0
 1989              	.LCFI104:
 1990              	 .cfi_def_cfa_register 7
 1991 0006 0346     	 mov r3,r0
 1992 0008 FB71     	 strb r3,[r7,#7]
 487:../cleanflight/src/main/blackbox/blackbox.c ****     //Perform initial setup required for the new state
 488:../cleanflight/src/main/blackbox/blackbox.c ****     switch (newState) {
 1993              	 .loc 16 488 0
 1994 000a FB79     	 ldrb r3,[r7,#7]
 1995 000c 023B     	 subs r3,r3,#2
 1996 000e 092B     	 cmp r3,#9
 1997 0010 3DD8     	 bhi .L124
 1998 0012 01A2     	 adr r2,.L126
 1999 0014 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2000              	 .p2align 2
 2001              	.L126:
 2002 0018 41000000 	 .word .L125+1
 2003 001c 49000000 	 .word .L127+1
 2004 0020 61000000 	 .word .L128+1
 2005 0024 61000000 	 .word .L128+1
 2006 0028 61000000 	 .word .L128+1
 2007 002c 61000000 	 .word .L128+1
 2008 0030 71000000 	 .word .L129+1
 2009 0034 8F000000 	 .word .L124+1
 2010 0038 79000000 	 .word .L130+1
 2011 003c 83000000 	 .word .L131+1
 2012              	 .p2align 1
 2013              	.L125:
 489:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_PREPARE_LOG_FILE:
 490:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxLoggedAnyFrames = false;
 2014              	 .loc 16 490 0
 2015 0040 164B     	 ldr r3,.L132
 2016 0042 0022     	 movs r2,#0
 2017 0044 1A70     	 strb r2,[r3]
 491:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 2018              	 .loc 16 491 0
 2019 0046 22E0     	 b .L124
 2020              	.L127:
 492:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_HEADER:
 493:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxHeaderBudget = 0;
 2021              	 .loc 16 493 0
 2022 0048 154B     	 ldr r3,.L132+4
 2023 004a 0022     	 movs r2,#0
 2024 004c 1A60     	 str r2,[r3]
 494:../cleanflight/src/main/blackbox/blackbox.c ****         xmitState.headerIndex = 0;
 2025              	 .loc 16 494 0
 2026 004e 154B     	 ldr r3,.L132+8
 2027 0050 0022     	 movs r2,#0
 2028 0052 1A60     	 str r2,[r3]
 495:../cleanflight/src/main/blackbox/blackbox.c ****         xmitState.u.startTime = millis();
 2029              	 .loc 16 495 0
 2030 0054 FFF7FEFF 	 bl millis
 2031 0058 0246     	 mov r2,r0
 2032 005a 124B     	 ldr r3,.L132+8
 2033 005c 5A60     	 str r2,[r3,#4]
 496:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 2034              	 .loc 16 496 0
 2035 005e 16E0     	 b .L124
 2036              	.L128:
 497:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_MAIN_FIELD_HEADER:
 498:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_GPS_G_HEADER:
 499:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_GPS_H_HEADER:
 500:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_SLOW_HEADER:
 501:../cleanflight/src/main/blackbox/blackbox.c ****         xmitState.headerIndex = 0;
 2037              	 .loc 16 501 0
 2038 0060 104B     	 ldr r3,.L132+8
 2039 0062 0022     	 movs r2,#0
 2040 0064 1A60     	 str r2,[r3]
 502:../cleanflight/src/main/blackbox/blackbox.c ****         xmitState.u.fieldIndex = -1;
 2041              	 .loc 16 502 0
 2042 0066 0F4B     	 ldr r3,.L132+8
 2043 0068 4FF0FF32 	 mov r2,#-1
 2044 006c 5A60     	 str r2,[r3,#4]
 503:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 2045              	 .loc 16 503 0
 2046 006e 0EE0     	 b .L124
 2047              	.L129:
 504:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_SYSINFO:
 505:../cleanflight/src/main/blackbox/blackbox.c ****         xmitState.headerIndex = 0;
 2048              	 .loc 16 505 0
 2049 0070 0C4B     	 ldr r3,.L132+8
 2050 0072 0022     	 movs r2,#0
 2051 0074 1A60     	 str r2,[r3]
 506:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 2052              	 .loc 16 506 0
 2053 0076 0AE0     	 b .L124
 2054              	.L130:
 507:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_RUNNING:
 508:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxSlowFrameIterationTimer = blackboxSInterval; //Force a slow frame to be written on 
 2055              	 .loc 16 508 0
 2056 0078 0B4B     	 ldr r3,.L132+12
 2057 007a 1B68     	 ldr r3,[r3]
 2058 007c 0B4A     	 ldr r2,.L132+16
 2059 007e 1360     	 str r3,[r2]
 509:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 2060              	 .loc 16 509 0
 2061 0080 05E0     	 b .L124
 2062              	.L131:
 510:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SHUTTING_DOWN:
 511:../cleanflight/src/main/blackbox/blackbox.c ****         xmitState.u.startTime = millis();
 2063              	 .loc 16 511 0
 2064 0082 FFF7FEFF 	 bl millis
 2065 0086 0246     	 mov r2,r0
 2066 0088 064B     	 ldr r3,.L132+8
 2067 008a 5A60     	 str r2,[r3,#4]
 512:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 2068              	 .loc 16 512 0
 2069 008c 00BF     	 nop
 2070              	.L124:
 513:../cleanflight/src/main/blackbox/blackbox.c ****     default:
 514:../cleanflight/src/main/blackbox/blackbox.c ****         ;
 515:../cleanflight/src/main/blackbox/blackbox.c ****     }
 516:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxState = newState;
 2071              	 .loc 16 516 0
 2072 008e 084A     	 ldr r2,.L132+20
 2073 0090 FB79     	 ldrb r3,[r7,#7]
 2074 0092 1370     	 strb r3,[r2]
 517:../cleanflight/src/main/blackbox/blackbox.c **** }
 2075              	 .loc 16 517 0
 2076 0094 0837     	 adds r7,r7,#8
 2077              	.LCFI105:
 2078              	 .cfi_def_cfa_offset 8
 2079 0096 BD46     	 mov sp,r7
 2080              	.LCFI106:
 2081              	 .cfi_def_cfa_register 13
 2082              	 
 2083 0098 80BD     	 pop {r7,pc}
 2084              	.L133:
 2085 009a 00BF     	 .align 2
 2086              	.L132:
 2087 009c 00000000 	 .word blackboxLoggedAnyFrames
 2088 00a0 00000000 	 .word blackboxHeaderBudget
 2089 00a4 00000000 	 .word xmitState
 2090 00a8 00000000 	 .word blackboxSInterval
 2091 00ac 00000000 	 .word blackboxSlowFrameIterationTimer
 2092 00b0 00000000 	 .word blackboxState
 2093              	 .cfi_endproc
 2094              	.LFE613:
 2096              	 .section .text.writeIntraframe,"ax",%progbits
 2097              	 .align 2
 2098              	 .thumb
 2099              	 .thumb_func
 2101              	writeIntraframe:
 2102              	.LFB614:
 518:../cleanflight/src/main/blackbox/blackbox.c **** 
 519:../cleanflight/src/main/blackbox/blackbox.c **** static void writeIntraframe(void)
 520:../cleanflight/src/main/blackbox/blackbox.c **** {
 2103              	 .loc 16 520 0
 2104              	 .cfi_startproc
 2105              	 
 2106              	 
 2107 0000 90B5     	 push {r4,r7,lr}
 2108              	.LCFI107:
 2109              	 .cfi_def_cfa_offset 12
 2110              	 .cfi_offset 4,-12
 2111              	 .cfi_offset 7,-8
 2112              	 .cfi_offset 14,-4
 2113 0002 85B0     	 sub sp,sp,#20
 2114              	.LCFI108:
 2115              	 .cfi_def_cfa_offset 32
 2116 0004 00AF     	 add r7,sp,#0
 2117              	.LCFI109:
 2118              	 .cfi_def_cfa_register 7
 521:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxMainState_t *blackboxCurrent = blackboxHistory[0];
 2119              	 .loc 16 521 0
 2120 0006 934B     	 ldr r3,.L148
 2121 0008 1B68     	 ldr r3,[r3]
 2122 000a 7B60     	 str r3,[r7,#4]
 522:../cleanflight/src/main/blackbox/blackbox.c **** 
 523:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWrite('I');
 2123              	 .loc 16 523 0
 2124 000c 4920     	 movs r0,#73
 2125 000e FFF7FEFF 	 bl blackboxWrite
 524:../cleanflight/src/main/blackbox/blackbox.c **** 
 525:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(blackboxIteration);
 2126              	 .loc 16 525 0
 2127 0012 914B     	 ldr r3,.L148+4
 2128 0014 1B68     	 ldr r3,[r3]
 2129 0016 1846     	 mov r0,r3
 2130 0018 FFF7FEFF 	 bl blackboxWriteUnsignedVB
 526:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(blackboxCurrent->time);
 2131              	 .loc 16 526 0
 2132 001c 7B68     	 ldr r3,[r7,#4]
 2133 001e 1B68     	 ldr r3,[r3]
 2134 0020 1846     	 mov r0,r3
 2135 0022 FFF7FEFF 	 bl blackboxWriteUnsignedVB
 527:../cleanflight/src/main/blackbox/blackbox.c **** 
 528:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVBArray(blackboxCurrent->axisPID_P, XYZ_AXIS_COUNT);
 2136              	 .loc 16 528 0
 2137 0026 7B68     	 ldr r3,[r7,#4]
 2138 0028 0433     	 adds r3,r3,#4
 2139 002a 1846     	 mov r0,r3
 2140 002c 0321     	 movs r1,#3
 2141 002e FFF7FEFF 	 bl blackboxWriteSignedVBArray
 529:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVBArray(blackboxCurrent->axisPID_I, XYZ_AXIS_COUNT);
 2142              	 .loc 16 529 0
 2143 0032 7B68     	 ldr r3,[r7,#4]
 2144 0034 1033     	 adds r3,r3,#16
 2145 0036 1846     	 mov r0,r3
 2146 0038 0321     	 movs r1,#3
 2147 003a FFF7FEFF 	 bl blackboxWriteSignedVBArray
 2148              	.LBB3:
 530:../cleanflight/src/main/blackbox/blackbox.c **** 
 531:../cleanflight/src/main/blackbox/blackbox.c ****     // Don't bother writing the current D term if the corresponding PID setting is zero
 532:../cleanflight/src/main/blackbox/blackbox.c ****     for (int x = 0; x < XYZ_AXIS_COUNT; x++) {
 2149              	 .loc 16 532 0
 2150 003e 0023     	 movs r3,#0
 2151 0040 FB60     	 str r3,[r7,#12]
 2152 0042 15E0     	 b .L135
 2153              	.L137:
 533:../cleanflight/src/main/blackbox/blackbox.c ****         if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0 + x)) {
 2154              	 .loc 16 533 0
 2155 0044 FB68     	 ldr r3,[r7,#12]
 2156 0046 DBB2     	 uxtb r3,r3
 2157 0048 1033     	 adds r3,r3,#16
 2158 004a DBB2     	 uxtb r3,r3
 2159 004c 1846     	 mov r0,r3
 2160 004e FFF7FEFF 	 bl testBlackboxCondition
 2161 0052 0346     	 mov r3,r0
 2162 0054 002B     	 cmp r3,#0
 2163 0056 08D0     	 beq .L136
 534:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxWriteSignedVB(blackboxCurrent->axisPID_D[x]);
 2164              	 .loc 16 534 0
 2165 0058 7A68     	 ldr r2,[r7,#4]
 2166 005a FB68     	 ldr r3,[r7,#12]
 2167 005c 0633     	 adds r3,r3,#6
 2168 005e 9B00     	 lsls r3,r3,#2
 2169 0060 1344     	 add r3,r3,r2
 2170 0062 5B68     	 ldr r3,[r3,#4]
 2171 0064 1846     	 mov r0,r3
 2172 0066 FFF7FEFF 	 bl blackboxWriteSignedVB
 2173              	.L136:
 532:../cleanflight/src/main/blackbox/blackbox.c ****         if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0 + x)) {
 2174              	 .loc 16 532 0 discriminator 2
 2175 006a FB68     	 ldr r3,[r7,#12]
 2176 006c 0133     	 adds r3,r3,#1
 2177 006e FB60     	 str r3,[r7,#12]
 2178              	.L135:
 532:../cleanflight/src/main/blackbox/blackbox.c ****         if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0 + x)) {
 2179              	 .loc 16 532 0 is_stmt 0 discriminator 1
 2180 0070 FB68     	 ldr r3,[r7,#12]
 2181 0072 022B     	 cmp r3,#2
 2182 0074 E6DD     	 ble .L137
 2183              	.LBE3:
 535:../cleanflight/src/main/blackbox/blackbox.c ****         }
 536:../cleanflight/src/main/blackbox/blackbox.c ****     }
 537:../cleanflight/src/main/blackbox/blackbox.c **** 
 538:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVBArray(blackboxCurrent->axisPID_F, XYZ_AXIS_COUNT);
 2184              	 .loc 16 538 0 is_stmt 1
 2185 0076 7B68     	 ldr r3,[r7,#4]
 2186 0078 2833     	 adds r3,r3,#40
 2187 007a 1846     	 mov r0,r3
 2188 007c 0321     	 movs r1,#3
 2189 007e FFF7FEFF 	 bl blackboxWriteSignedVBArray
 539:../cleanflight/src/main/blackbox/blackbox.c **** 
 540:../cleanflight/src/main/blackbox/blackbox.c ****     // Write roll, pitch and yaw first:
 541:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSigned16VBArray(blackboxCurrent->rcCommand, 3);
 2190              	 .loc 16 541 0
 2191 0082 7B68     	 ldr r3,[r7,#4]
 2192 0084 3433     	 adds r3,r3,#52
 2193 0086 1846     	 mov r0,r3
 2194 0088 0321     	 movs r1,#3
 2195 008a FFF7FEFF 	 bl blackboxWriteSigned16VBArray
 542:../cleanflight/src/main/blackbox/blackbox.c **** 
 543:../cleanflight/src/main/blackbox/blackbox.c ****     /*
 544:../cleanflight/src/main/blackbox/blackbox.c ****      * Write the throttle separately from the rest of the RC data so we can apply a predictor to it
 545:../cleanflight/src/main/blackbox/blackbox.c ****      * Throttle lies in range [minthrottle..maxthrottle]:
 546:../cleanflight/src/main/blackbox/blackbox.c ****      */
 547:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(blackboxCurrent->rcCommand[THROTTLE] - motorConfig()->minthrottle);
 2196              	 .loc 16 547 0
 2197 008e 7B68     	 ldr r3,[r7,#4]
 2198 0090 B3F93A30 	 ldrsh r3,[r3,#58]
 2199 0094 9BB2     	 uxth r3,r3
 2200 0096 1CB2     	 sxth r4,r3
 2201 0098 FFF7FEFF 	 bl motorConfig
 2202 009c 0346     	 mov r3,r0
 2203 009e 1B8A     	 ldrh r3,[r3,#16]
 2204 00a0 9BB2     	 uxth r3,r3
 2205 00a2 E31A     	 subs r3,r4,r3
 2206 00a4 1846     	 mov r0,r3
 2207 00a6 FFF7FEFF 	 bl blackboxWriteUnsignedVB
 548:../cleanflight/src/main/blackbox/blackbox.c **** 
 549:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_VBAT)) {
 2208              	 .loc 16 549 0
 2209 00aa 0C20     	 movs r0,#12
 2210 00ac FFF7FEFF 	 bl testBlackboxCondition
 2211 00b0 0346     	 mov r3,r0
 2212 00b2 002B     	 cmp r3,#0
 2213 00b4 0CD0     	 beq .L138
 550:../cleanflight/src/main/blackbox/blackbox.c ****         /*
 551:../cleanflight/src/main/blackbox/blackbox.c ****          * Our voltage is expected to decrease over the course of the flight, so store our differen
 552:../cleanflight/src/main/blackbox/blackbox.c ****          * the reference:
 553:../cleanflight/src/main/blackbox/blackbox.c ****          *
 554:../cleanflight/src/main/blackbox/blackbox.c ****          * Write 14 bits even if the number is negative (which would otherwise result in 32 bits)
 555:../cleanflight/src/main/blackbox/blackbox.c ****          */
 556:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteUnsignedVB((vbatReference - blackboxCurrent->vbatLatest) & 0x3FFF);
 2214              	 .loc 16 556 0
 2215 00b6 694B     	 ldr r3,.L148+8
 2216 00b8 1B88     	 ldrh r3,[r3]
 2217 00ba 1A46     	 mov r2,r3
 2218 00bc 7B68     	 ldr r3,[r7,#4]
 2219 00be B3F87030 	 ldrh r3,[r3,#112]
 2220 00c2 9BB2     	 uxth r3,r3
 2221 00c4 D31A     	 subs r3,r2,r3
 2222 00c6 C3F30D03 	 ubfx r3,r3,#0,#14
 2223 00ca 1846     	 mov r0,r3
 2224 00cc FFF7FEFF 	 bl blackboxWriteUnsignedVB
 2225              	.L138:
 557:../cleanflight/src/main/blackbox/blackbox.c ****     }
 558:../cleanflight/src/main/blackbox/blackbox.c **** 
 559:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_AMPERAGE_ADC)) {
 2226              	 .loc 16 559 0
 2227 00d0 0D20     	 movs r0,#13
 2228 00d2 FFF7FEFF 	 bl testBlackboxCondition
 2229 00d6 0346     	 mov r3,r0
 2230 00d8 002B     	 cmp r3,#0
 2231 00da 05D0     	 beq .L139
 560:../cleanflight/src/main/blackbox/blackbox.c ****         // 12bit value directly from ADC
 561:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSignedVB(blackboxCurrent->amperageLatest);
 2232              	 .loc 16 561 0
 2233 00dc 7B68     	 ldr r3,[r7,#4]
 2234 00de D3F87230 	 ldr r3,[r3,#114]
 2235 00e2 1846     	 mov r0,r3
 2236 00e4 FFF7FEFF 	 bl blackboxWriteSignedVB
 2237              	.L139:
 562:../cleanflight/src/main/blackbox/blackbox.c ****     }
 563:../cleanflight/src/main/blackbox/blackbox.c **** 
 564:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_MAG
 565:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_MAG)) {
 2238              	 .loc 16 565 0
 2239 00e8 0A20     	 movs r0,#10
 2240 00ea FFF7FEFF 	 bl testBlackboxCondition
 2241 00ee 0346     	 mov r3,r0
 2242 00f0 002B     	 cmp r3,#0
 2243 00f2 05D0     	 beq .L140
 566:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSigned16VBArray(blackboxCurrent->magADC, XYZ_AXIS_COUNT);
 2244              	 .loc 16 566 0
 2245 00f4 7B68     	 ldr r3,[r7,#4]
 2246 00f6 7A33     	 adds r3,r3,#122
 2247 00f8 1846     	 mov r0,r3
 2248 00fa 0321     	 movs r1,#3
 2249 00fc FFF7FEFF 	 bl blackboxWriteSigned16VBArray
 2250              	.L140:
 567:../cleanflight/src/main/blackbox/blackbox.c ****     }
 568:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 569:../cleanflight/src/main/blackbox/blackbox.c **** 
 570:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_BARO
 571:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_BARO)) {
 2251              	 .loc 16 571 0
 2252 0100 0B20     	 movs r0,#11
 2253 0102 FFF7FEFF 	 bl testBlackboxCondition
 2254 0106 0346     	 mov r3,r0
 2255 0108 002B     	 cmp r3,#0
 2256 010a 05D0     	 beq .L141
 572:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSignedVB(blackboxCurrent->BaroAlt);
 2257              	 .loc 16 572 0
 2258 010c 7B68     	 ldr r3,[r7,#4]
 2259 010e D3F87630 	 ldr r3,[r3,#118]
 2260 0112 1846     	 mov r0,r3
 2261 0114 FFF7FEFF 	 bl blackboxWriteSignedVB
 2262              	.L141:
 573:../cleanflight/src/main/blackbox/blackbox.c ****     }
 574:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 575:../cleanflight/src/main/blackbox/blackbox.c **** 
 576:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_RANGEFINDER
 577:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_RANGEFINDER)) {
 578:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSignedVB(blackboxCurrent->surfaceRaw);
 579:../cleanflight/src/main/blackbox/blackbox.c ****     }
 580:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 581:../cleanflight/src/main/blackbox/blackbox.c **** 
 582:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_RSSI)) {
 2263              	 .loc 16 582 0
 2264 0118 0F20     	 movs r0,#15
 2265 011a FFF7FEFF 	 bl testBlackboxCondition
 2266 011e 0346     	 mov r3,r0
 2267 0120 002B     	 cmp r3,#0
 2268 0122 06D0     	 beq .L142
 583:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteUnsignedVB(blackboxCurrent->rssi);
 2269              	 .loc 16 583 0
 2270 0124 7B68     	 ldr r3,[r7,#4]
 2271 0126 B3F88030 	 ldrh r3,[r3,#128]
 2272 012a 9BB2     	 uxth r3,r3
 2273 012c 1846     	 mov r0,r3
 2274 012e FFF7FEFF 	 bl blackboxWriteUnsignedVB
 2275              	.L142:
 584:../cleanflight/src/main/blackbox/blackbox.c ****     }
 585:../cleanflight/src/main/blackbox/blackbox.c **** 
 586:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSigned16VBArray(blackboxCurrent->gyroADC, XYZ_AXIS_COUNT);
 2276              	 .loc 16 586 0
 2277 0132 7B68     	 ldr r3,[r7,#4]
 2278 0134 3C33     	 adds r3,r3,#60
 2279 0136 1846     	 mov r0,r3
 2280 0138 0321     	 movs r1,#3
 2281 013a FFF7FEFF 	 bl blackboxWriteSigned16VBArray
 587:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_ACC)) {
 2282              	 .loc 16 587 0
 2283 013e 1420     	 movs r0,#20
 2284 0140 FFF7FEFF 	 bl testBlackboxCondition
 2285 0144 0346     	 mov r3,r0
 2286 0146 002B     	 cmp r3,#0
 2287 0148 05D0     	 beq .L143
 588:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSigned16VBArray(blackboxCurrent->accADC, XYZ_AXIS_COUNT);
 2288              	 .loc 16 588 0
 2289 014a 7B68     	 ldr r3,[r7,#4]
 2290 014c 4233     	 adds r3,r3,#66
 2291 014e 1846     	 mov r0,r3
 2292 0150 0321     	 movs r1,#3
 2293 0152 FFF7FEFF 	 bl blackboxWriteSigned16VBArray
 2294              	.L143:
 589:../cleanflight/src/main/blackbox/blackbox.c ****     }
 590:../cleanflight/src/main/blackbox/blackbox.c **** 
 591:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_DEBUG)) {
 2295              	 .loc 16 591 0
 2296 0156 1520     	 movs r0,#21
 2297 0158 FFF7FEFF 	 bl testBlackboxCondition
 2298 015c 0346     	 mov r3,r0
 2299 015e 002B     	 cmp r3,#0
 2300 0160 05D0     	 beq .L144
 592:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSigned16VBArray(blackboxCurrent->debug, DEBUG16_VALUE_COUNT);
 2301              	 .loc 16 592 0
 2302 0162 7B68     	 ldr r3,[r7,#4]
 2303 0164 4833     	 adds r3,r3,#72
 2304 0166 1846     	 mov r0,r3
 2305 0168 0421     	 movs r1,#4
 2306 016a FFF7FEFF 	 bl blackboxWriteSigned16VBArray
 2307              	.L144:
 593:../cleanflight/src/main/blackbox/blackbox.c ****     }
 594:../cleanflight/src/main/blackbox/blackbox.c **** 
 595:../cleanflight/src/main/blackbox/blackbox.c ****     //Motors can be below minimum output when disarmed, but that doesn't happen much
 596:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(blackboxCurrent->motor[0] - motorOutputLow);
 2308              	 .loc 16 596 0
 2309 016e 7B68     	 ldr r3,[r7,#4]
 2310 0170 B3F95030 	 ldrsh r3,[r3,#80]
 2311 0174 9BB2     	 uxth r3,r3
 2312 0176 1BB2     	 sxth r3,r3
 2313 0178 07EE903A 	 fmsr s15,r3
 2314 017c B8EEE77A 	 fsitos s14,s15
 2315 0180 374B     	 ldr r3,.L148+12
 2316 0182 D3ED007A 	 flds s15,[r3]
 2317 0186 77EE677A 	 fsubs s15,s14,s15
 2318 018a FCEEE77A 	 ftouizs s15,s15
 2319 018e 17EE900A 	 fmrs r0,s15
 2320 0192 FFF7FEFF 	 bl blackboxWriteUnsignedVB
 597:../cleanflight/src/main/blackbox/blackbox.c **** 
 598:../cleanflight/src/main/blackbox/blackbox.c ****     //Motors tend to be similar to each other so use the first motor's value as a predictor of the 
 599:../cleanflight/src/main/blackbox/blackbox.c ****     const int motorCount = getMotorCount();
 2321              	 .loc 16 599 0
 2322 0196 FFF7FEFF 	 bl getMotorCount
 2323 019a 0346     	 mov r3,r0
 2324 019c 3B60     	 str r3,[r7]
 2325              	.LBB4:
 600:../cleanflight/src/main/blackbox/blackbox.c ****     for (int x = 1; x < motorCount; x++) {
 2326              	 .loc 16 600 0
 2327 019e 0123     	 movs r3,#1
 2328 01a0 BB60     	 str r3,[r7,#8]
 2329 01a2 12E0     	 b .L145
 2330              	.L146:
 601:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSignedVB(blackboxCurrent->motor[x] - blackboxCurrent->motor[0]);
 2331              	 .loc 16 601 0 discriminator 3
 2332 01a4 7B68     	 ldr r3,[r7,#4]
 2333 01a6 BA68     	 ldr r2,[r7,#8]
 2334 01a8 2832     	 adds r2,r2,#40
 2335 01aa 33F91230 	 ldrsh r3,[r3,r2,lsl#1]
 2336 01ae 9BB2     	 uxth r3,r3
 2337 01b0 1AB2     	 sxth r2,r3
 2338 01b2 7B68     	 ldr r3,[r7,#4]
 2339 01b4 B3F95030 	 ldrsh r3,[r3,#80]
 2340 01b8 9BB2     	 uxth r3,r3
 2341 01ba 1BB2     	 sxth r3,r3
 2342 01bc D31A     	 subs r3,r2,r3
 2343 01be 1846     	 mov r0,r3
 2344 01c0 FFF7FEFF 	 bl blackboxWriteSignedVB
 600:../cleanflight/src/main/blackbox/blackbox.c ****     for (int x = 1; x < motorCount; x++) {
 2345              	 .loc 16 600 0 discriminator 3
 2346 01c4 BB68     	 ldr r3,[r7,#8]
 2347 01c6 0133     	 adds r3,r3,#1
 2348 01c8 BB60     	 str r3,[r7,#8]
 2349              	.L145:
 600:../cleanflight/src/main/blackbox/blackbox.c ****     for (int x = 1; x < motorCount; x++) {
 2350              	 .loc 16 600 0 is_stmt 0 discriminator 1
 2351 01ca BA68     	 ldr r2,[r7,#8]
 2352 01cc 3B68     	 ldr r3,[r7]
 2353 01ce 9A42     	 cmp r2,r3
 2354 01d0 E8DB     	 blt .L146
 2355              	.LBE4:
 602:../cleanflight/src/main/blackbox/blackbox.c ****     }
 603:../cleanflight/src/main/blackbox/blackbox.c **** 
 604:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_TRICOPTER)) {
 2356              	 .loc 16 604 0 is_stmt 1
 2357 01d2 0920     	 movs r0,#9
 2358 01d4 FFF7FEFF 	 bl testBlackboxCondition
 2359 01d8 0346     	 mov r3,r0
 2360 01da 002B     	 cmp r3,#0
 2361 01dc 09D0     	 beq .L147
 605:../cleanflight/src/main/blackbox/blackbox.c ****         //Assume the tail spends most of its time around the center
 606:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSignedVB(blackboxCurrent->servo[5] - 1500);
 2362              	 .loc 16 606 0
 2363 01de 7B68     	 ldr r3,[r7,#4]
 2364 01e0 B3F96A30 	 ldrsh r3,[r3,#106]
 2365 01e4 9BB2     	 uxth r3,r3
 2366 01e6 1BB2     	 sxth r3,r3
 2367 01e8 A3F2DC53 	 subw r3,r3,#1500
 2368 01ec 1846     	 mov r0,r3
 2369 01ee FFF7FEFF 	 bl blackboxWriteSignedVB
 2370              	.L147:
 607:../cleanflight/src/main/blackbox/blackbox.c ****     }
 608:../cleanflight/src/main/blackbox/blackbox.c **** 
 609:../cleanflight/src/main/blackbox/blackbox.c ****     //Rotate our history buffers:
 610:../cleanflight/src/main/blackbox/blackbox.c **** 
 611:../cleanflight/src/main/blackbox/blackbox.c ****     //The current state becomes the new "before" state
 612:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxHistory[1] = blackboxHistory[0];
 2371              	 .loc 16 612 0
 2372 01f2 184B     	 ldr r3,.L148
 2373 01f4 1B68     	 ldr r3,[r3]
 2374 01f6 174A     	 ldr r2,.L148
 2375 01f8 5360     	 str r3,[r2,#4]
 613:../cleanflight/src/main/blackbox/blackbox.c ****     //And since we have no other history, we also use it for the "before, before" state
 614:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxHistory[2] = blackboxHistory[0];
 2376              	 .loc 16 614 0
 2377 01fa 164B     	 ldr r3,.L148
 2378 01fc 1B68     	 ldr r3,[r3]
 2379 01fe 154A     	 ldr r2,.L148
 2380 0200 9360     	 str r3,[r2,#8]
 615:../cleanflight/src/main/blackbox/blackbox.c ****     //And advance the current state over to a blank space ready to be filled
 616:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxHistory[0] = ((blackboxHistory[0] - blackboxHistoryRing + 1) % 3) + blackboxHistoryRing
 2381              	 .loc 16 616 0
 2382 0202 144B     	 ldr r3,.L148
 2383 0204 1B68     	 ldr r3,[r3]
 2384 0206 1A46     	 mov r2,r3
 2385 0208 164B     	 ldr r3,.L148+16
 2386 020a D31A     	 subs r3,r2,r3
 2387 020c 5A10     	 asrs r2,r3,#1
 2388 020e 1346     	 mov r3,r2
 2389 0210 9B01     	 lsls r3,r3,#6
 2390 0212 9B1A     	 subs r3,r3,r2
 2391 0214 9B01     	 lsls r3,r3,#6
 2392 0216 1344     	 add r3,r3,r2
 2393 0218 9A04     	 lsls r2,r3,#18
 2394 021a D21A     	 subs r2,r2,r3
 2395 021c 5342     	 negs r3,r2
 2396 021e 5A1C     	 adds r2,r3,#1
 2397 0220 114B     	 ldr r3,.L148+20
 2398 0222 83FB0231 	 smull r3,r1,r3,r2
 2399 0226 D317     	 asrs r3,r2,#31
 2400 0228 C91A     	 subs r1,r1,r3
 2401 022a 0B46     	 mov r3,r1
 2402 022c 5B00     	 lsls r3,r3,#1
 2403 022e 0B44     	 add r3,r3,r1
 2404 0230 D11A     	 subs r1,r2,r3
 2405 0232 0A46     	 mov r2,r1
 2406 0234 1346     	 mov r3,r2
 2407 0236 9B01     	 lsls r3,r3,#6
 2408 0238 1344     	 add r3,r3,r2
 2409 023a 5B00     	 lsls r3,r3,#1
 2410 023c 1A46     	 mov r2,r3
 2411 023e 094B     	 ldr r3,.L148+16
 2412 0240 1344     	 add r3,r3,r2
 2413 0242 044A     	 ldr r2,.L148
 2414 0244 1360     	 str r3,[r2]
 617:../cleanflight/src/main/blackbox/blackbox.c **** 
 618:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxLoggedAnyFrames = true;
 2415              	 .loc 16 618 0
 2416 0246 094B     	 ldr r3,.L148+24
 2417 0248 0122     	 movs r2,#1
 2418 024a 1A70     	 strb r2,[r3]
 619:../cleanflight/src/main/blackbox/blackbox.c **** }
 2419              	 .loc 16 619 0
 2420 024c 1437     	 adds r7,r7,#20
 2421              	.LCFI110:
 2422              	 .cfi_def_cfa_offset 12
 2423 024e BD46     	 mov sp,r7
 2424              	.LCFI111:
 2425              	 .cfi_def_cfa_register 13
 2426              	 
 2427 0250 90BD     	 pop {r4,r7,pc}
 2428              	.L149:
 2429 0252 00BF     	 .align 2
 2430              	.L148:
 2431 0254 00000000 	 .word blackboxHistory
 2432 0258 00000000 	 .word blackboxIteration
 2433 025c 00000000 	 .word vbatReference
 2434 0260 00000000 	 .word motorOutputLow
 2435 0264 00000000 	 .word blackboxHistoryRing
 2436 0268 56555555 	 .word 1431655766
 2437 026c 00000000 	 .word blackboxLoggedAnyFrames
 2438              	 .cfi_endproc
 2439              	.LFE614:
 2441              	 .section .text.blackboxWriteMainStateArrayUsingAveragePredictor,"ax",%progbits
 2442              	 .align 2
 2443              	 .thumb
 2444              	 .thumb_func
 2446              	blackboxWriteMainStateArrayUsingAveragePredictor:
 2447              	.LFB615:
 620:../cleanflight/src/main/blackbox/blackbox.c **** 
 621:../cleanflight/src/main/blackbox/blackbox.c **** static void blackboxWriteMainStateArrayUsingAveragePredictor(int arrOffsetInHistory, int count)
 622:../cleanflight/src/main/blackbox/blackbox.c **** {
 2448              	 .loc 16 622 0
 2449              	 .cfi_startproc
 2450              	 
 2451              	 
 2452 0000 80B5     	 push {r7,lr}
 2453              	.LCFI112:
 2454              	 .cfi_def_cfa_offset 8
 2455              	 .cfi_offset 7,-8
 2456              	 .cfi_offset 14,-4
 2457 0002 88B0     	 sub sp,sp,#32
 2458              	.LCFI113:
 2459              	 .cfi_def_cfa_offset 40
 2460 0004 00AF     	 add r7,sp,#0
 2461              	.LCFI114:
 2462              	 .cfi_def_cfa_register 7
 2463 0006 7860     	 str r0,[r7,#4]
 2464 0008 3960     	 str r1,[r7]
 623:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t *curr  = (int16_t*) ((char*) (blackboxHistory[0]) + arrOffsetInHistory);
 2465              	 .loc 16 623 0
 2466 000a 1C4B     	 ldr r3,.L153
 2467 000c 1A68     	 ldr r2,[r3]
 2468 000e 7B68     	 ldr r3,[r7,#4]
 2469 0010 1344     	 add r3,r3,r2
 2470 0012 BB61     	 str r3,[r7,#24]
 624:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t *prev1 = (int16_t*) ((char*) (blackboxHistory[1]) + arrOffsetInHistory);
 2471              	 .loc 16 624 0
 2472 0014 194B     	 ldr r3,.L153
 2473 0016 5A68     	 ldr r2,[r3,#4]
 2474 0018 7B68     	 ldr r3,[r7,#4]
 2475 001a 1344     	 add r3,r3,r2
 2476 001c 7B61     	 str r3,[r7,#20]
 625:../cleanflight/src/main/blackbox/blackbox.c ****     int16_t *prev2 = (int16_t*) ((char*) (blackboxHistory[2]) + arrOffsetInHistory);
 2477              	 .loc 16 625 0
 2478 001e 174B     	 ldr r3,.L153
 2479 0020 9A68     	 ldr r2,[r3,#8]
 2480 0022 7B68     	 ldr r3,[r7,#4]
 2481 0024 1344     	 add r3,r3,r2
 2482 0026 3B61     	 str r3,[r7,#16]
 2483              	.LBB5:
 626:../cleanflight/src/main/blackbox/blackbox.c **** 
 627:../cleanflight/src/main/blackbox/blackbox.c ****     for (int i = 0; i < count; i++) {
 2484              	 .loc 16 627 0
 2485 0028 0023     	 movs r3,#0
 2486 002a FB61     	 str r3,[r7,#28]
 2487 002c 1EE0     	 b .L151
 2488              	.L152:
 2489              	.LBB6:
 628:../cleanflight/src/main/blackbox/blackbox.c ****         // Predictor is the average of the previous two history states
 629:../cleanflight/src/main/blackbox/blackbox.c ****         int32_t predictor = (prev1[i] + prev2[i]) / 2;
 2490              	 .loc 16 629 0 discriminator 3
 2491 002e FB69     	 ldr r3,[r7,#28]
 2492 0030 5B00     	 lsls r3,r3,#1
 2493 0032 7A69     	 ldr r2,[r7,#20]
 2494 0034 1344     	 add r3,r3,r2
 2495 0036 1B88     	 ldrh r3,[r3]
 2496 0038 1AB2     	 sxth r2,r3
 2497 003a FB69     	 ldr r3,[r7,#28]
 2498 003c 5B00     	 lsls r3,r3,#1
 2499 003e 3969     	 ldr r1,[r7,#16]
 2500 0040 0B44     	 add r3,r3,r1
 2501 0042 1B88     	 ldrh r3,[r3]
 2502 0044 1BB2     	 sxth r3,r3
 2503 0046 1344     	 add r3,r3,r2
 2504 0048 DA0F     	 lsrs r2,r3,#31
 2505 004a 1344     	 add r3,r3,r2
 2506 004c 5B10     	 asrs r3,r3,#1
 2507 004e FB60     	 str r3,[r7,#12]
 630:../cleanflight/src/main/blackbox/blackbox.c **** 
 631:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSignedVB(curr[i] - predictor);
 2508              	 .loc 16 631 0 discriminator 3
 2509 0050 FB69     	 ldr r3,[r7,#28]
 2510 0052 5B00     	 lsls r3,r3,#1
 2511 0054 BA69     	 ldr r2,[r7,#24]
 2512 0056 1344     	 add r3,r3,r2
 2513 0058 1B88     	 ldrh r3,[r3]
 2514 005a 1AB2     	 sxth r2,r3
 2515 005c FB68     	 ldr r3,[r7,#12]
 2516 005e D31A     	 subs r3,r2,r3
 2517 0060 1846     	 mov r0,r3
 2518 0062 FFF7FEFF 	 bl blackboxWriteSignedVB
 2519              	.LBE6:
 627:../cleanflight/src/main/blackbox/blackbox.c ****         // Predictor is the average of the previous two history states
 2520              	 .loc 16 627 0 discriminator 3
 2521 0066 FB69     	 ldr r3,[r7,#28]
 2522 0068 0133     	 adds r3,r3,#1
 2523 006a FB61     	 str r3,[r7,#28]
 2524              	.L151:
 627:../cleanflight/src/main/blackbox/blackbox.c ****         // Predictor is the average of the previous two history states
 2525              	 .loc 16 627 0 is_stmt 0 discriminator 1
 2526 006c FA69     	 ldr r2,[r7,#28]
 2527 006e 3B68     	 ldr r3,[r7]
 2528 0070 9A42     	 cmp r2,r3
 2529 0072 DCDB     	 blt .L152
 2530              	.LBE5:
 632:../cleanflight/src/main/blackbox/blackbox.c ****     }
 633:../cleanflight/src/main/blackbox/blackbox.c **** }
 2531              	 .loc 16 633 0 is_stmt 1
 2532 0074 2037     	 adds r7,r7,#32
 2533              	.LCFI115:
 2534              	 .cfi_def_cfa_offset 8
 2535 0076 BD46     	 mov sp,r7
 2536              	.LCFI116:
 2537              	 .cfi_def_cfa_register 13
 2538              	 
 2539 0078 80BD     	 pop {r7,pc}
 2540              	.L154:
 2541 007a 00BF     	 .align 2
 2542              	.L153:
 2543 007c 00000000 	 .word blackboxHistory
 2544              	 .cfi_endproc
 2545              	.LFE615:
 2547              	 .section .text.writeInterframe,"ax",%progbits
 2548              	 .align 2
 2549              	 .thumb
 2550              	 .thumb_func
 2552              	writeInterframe:
 2553              	.LFB616:
 634:../cleanflight/src/main/blackbox/blackbox.c **** 
 635:../cleanflight/src/main/blackbox/blackbox.c **** static void writeInterframe(void)
 636:../cleanflight/src/main/blackbox/blackbox.c **** {
 2554              	 .loc 16 636 0
 2555              	 .cfi_startproc
 2556              	 
 2557              	 
 2558 0000 80B5     	 push {r7,lr}
 2559              	.LCFI117:
 2560              	 .cfi_def_cfa_offset 8
 2561              	 .cfi_offset 7,-8
 2562              	 .cfi_offset 14,-4
 2563 0002 8EB0     	 sub sp,sp,#56
 2564              	.LCFI118:
 2565              	 .cfi_def_cfa_offset 64
 2566 0004 00AF     	 add r7,sp,#0
 2567              	.LCFI119:
 2568              	 .cfi_def_cfa_register 7
 637:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxMainState_t *blackboxCurrent = blackboxHistory[0];
 2569              	 .loc 16 637 0
 2570 0006 C34B     	 ldr r3,.L171
 2571 0008 1B68     	 ldr r3,[r3]
 2572 000a 7B62     	 str r3,[r7,#36]
 638:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxMainState_t *blackboxLast = blackboxHistory[1];
 2573              	 .loc 16 638 0
 2574 000c C14B     	 ldr r3,.L171
 2575 000e 5B68     	 ldr r3,[r3,#4]
 2576 0010 3B62     	 str r3,[r7,#32]
 639:../cleanflight/src/main/blackbox/blackbox.c **** 
 640:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWrite('P');
 2577              	 .loc 16 640 0
 2578 0012 5020     	 movs r0,#80
 2579 0014 FFF7FEFF 	 bl blackboxWrite
 641:../cleanflight/src/main/blackbox/blackbox.c **** 
 642:../cleanflight/src/main/blackbox/blackbox.c ****     //No need to store iteration count since its delta is always 1
 643:../cleanflight/src/main/blackbox/blackbox.c **** 
 644:../cleanflight/src/main/blackbox/blackbox.c ****     /*
 645:../cleanflight/src/main/blackbox/blackbox.c ****      * Since the difference between the difference between successive times will be nearly zero (du
 646:../cleanflight/src/main/blackbox/blackbox.c ****      * looptime spacing), use second-order differences.
 647:../cleanflight/src/main/blackbox/blackbox.c ****      */
 648:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVB((int32_t) (blackboxHistory[0]->time - 2 * blackboxHistory[1]->time + blac
 2580              	 .loc 16 648 0
 2581 0018 BE4B     	 ldr r3,.L171
 2582 001a 1B68     	 ldr r3,[r3]
 2583 001c 1A68     	 ldr r2,[r3]
 2584 001e BD4B     	 ldr r3,.L171
 2585 0020 5B68     	 ldr r3,[r3,#4]
 2586 0022 1B68     	 ldr r3,[r3]
 2587 0024 5B00     	 lsls r3,r3,#1
 2588 0026 D21A     	 subs r2,r2,r3
 2589 0028 BA4B     	 ldr r3,.L171
 2590 002a 9B68     	 ldr r3,[r3,#8]
 2591 002c 1B68     	 ldr r3,[r3]
 2592 002e 1344     	 add r3,r3,r2
 2593 0030 1846     	 mov r0,r3
 2594 0032 FFF7FEFF 	 bl blackboxWriteSignedVB
 649:../cleanflight/src/main/blackbox/blackbox.c **** 
 650:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t deltas[8];
 651:../cleanflight/src/main/blackbox/blackbox.c ****     arraySubInt32(deltas, blackboxCurrent->axisPID_P, blackboxLast->axisPID_P, XYZ_AXIS_COUNT);
 2595              	 .loc 16 651 0
 2596 0036 7B6A     	 ldr r3,[r7,#36]
 2597 0038 1A1D     	 adds r2,r3,#4
 2598 003a 3B6A     	 ldr r3,[r7,#32]
 2599 003c 0433     	 adds r3,r3,#4
 2600 003e 3946     	 mov r1,r7
 2601 0040 0846     	 mov r0,r1
 2602 0042 1146     	 mov r1,r2
 2603 0044 1A46     	 mov r2,r3
 2604 0046 0323     	 movs r3,#3
 2605 0048 FFF7FEFF 	 bl arraySubInt32
 652:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVBArray(deltas, XYZ_AXIS_COUNT);
 2606              	 .loc 16 652 0
 2607 004c 3B46     	 mov r3,r7
 2608 004e 1846     	 mov r0,r3
 2609 0050 0321     	 movs r1,#3
 2610 0052 FFF7FEFF 	 bl blackboxWriteSignedVBArray
 653:../cleanflight/src/main/blackbox/blackbox.c **** 
 654:../cleanflight/src/main/blackbox/blackbox.c ****     /*
 655:../cleanflight/src/main/blackbox/blackbox.c ****      * The PID I field changes very slowly, most of the time +-2, so use an encoding
 656:../cleanflight/src/main/blackbox/blackbox.c ****      * that can pack all three fields into one byte in that situation.
 657:../cleanflight/src/main/blackbox/blackbox.c ****      */
 658:../cleanflight/src/main/blackbox/blackbox.c ****     arraySubInt32(deltas, blackboxCurrent->axisPID_I, blackboxLast->axisPID_I, XYZ_AXIS_COUNT);
 2611              	 .loc 16 658 0
 2612 0056 7B6A     	 ldr r3,[r7,#36]
 2613 0058 03F11002 	 add r2,r3,#16
 2614 005c 3B6A     	 ldr r3,[r7,#32]
 2615 005e 1033     	 adds r3,r3,#16
 2616 0060 3946     	 mov r1,r7
 2617 0062 0846     	 mov r0,r1
 2618 0064 1146     	 mov r1,r2
 2619 0066 1A46     	 mov r2,r3
 2620 0068 0323     	 movs r3,#3
 2621 006a FFF7FEFF 	 bl arraySubInt32
 659:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteTag2_3S32(deltas);
 2622              	 .loc 16 659 0
 2623 006e 3B46     	 mov r3,r7
 2624 0070 1846     	 mov r0,r3
 2625 0072 FFF7FEFF 	 bl blackboxWriteTag2_3S32
 2626              	.LBB7:
 660:../cleanflight/src/main/blackbox/blackbox.c **** 
 661:../cleanflight/src/main/blackbox/blackbox.c ****     /*
 662:../cleanflight/src/main/blackbox/blackbox.c ****      * The PID D term is frequently set to zero for yaw, which makes the result from the calculatio
 663:../cleanflight/src/main/blackbox/blackbox.c ****      * always zero. So don't bother recording D results when PID D terms are zero.
 664:../cleanflight/src/main/blackbox/blackbox.c ****      */
 665:../cleanflight/src/main/blackbox/blackbox.c ****     for (int x = 0; x < XYZ_AXIS_COUNT; x++) {
 2627              	 .loc 16 665 0
 2628 0076 0023     	 movs r3,#0
 2629 0078 7B63     	 str r3,[r7,#52]
 2630 007a 1CE0     	 b .L156
 2631              	.L158:
 666:../cleanflight/src/main/blackbox/blackbox.c ****         if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0 + x)) {
 2632              	 .loc 16 666 0
 2633 007c 7B6B     	 ldr r3,[r7,#52]
 2634 007e DBB2     	 uxtb r3,r3
 2635 0080 1033     	 adds r3,r3,#16
 2636 0082 DBB2     	 uxtb r3,r3
 2637 0084 1846     	 mov r0,r3
 2638 0086 FFF7FEFF 	 bl testBlackboxCondition
 2639 008a 0346     	 mov r3,r0
 2640 008c 002B     	 cmp r3,#0
 2641 008e 0FD0     	 beq .L157
 667:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxWriteSignedVB(blackboxCurrent->axisPID_D[x] - blackboxLast->axisPID_D[x]);
 2642              	 .loc 16 667 0
 2643 0090 7A6A     	 ldr r2,[r7,#36]
 2644 0092 7B6B     	 ldr r3,[r7,#52]
 2645 0094 0633     	 adds r3,r3,#6
 2646 0096 9B00     	 lsls r3,r3,#2
 2647 0098 1344     	 add r3,r3,r2
 2648 009a 5A68     	 ldr r2,[r3,#4]
 2649 009c 396A     	 ldr r1,[r7,#32]
 2650 009e 7B6B     	 ldr r3,[r7,#52]
 2651 00a0 0633     	 adds r3,r3,#6
 2652 00a2 9B00     	 lsls r3,r3,#2
 2653 00a4 0B44     	 add r3,r3,r1
 2654 00a6 5B68     	 ldr r3,[r3,#4]
 2655 00a8 D31A     	 subs r3,r2,r3
 2656 00aa 1846     	 mov r0,r3
 2657 00ac FFF7FEFF 	 bl blackboxWriteSignedVB
 2658              	.L157:
 665:../cleanflight/src/main/blackbox/blackbox.c ****         if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0 + x)) {
 2659              	 .loc 16 665 0 discriminator 2
 2660 00b0 7B6B     	 ldr r3,[r7,#52]
 2661 00b2 0133     	 adds r3,r3,#1
 2662 00b4 7B63     	 str r3,[r7,#52]
 2663              	.L156:
 665:../cleanflight/src/main/blackbox/blackbox.c ****         if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_NONZERO_PID_D_0 + x)) {
 2664              	 .loc 16 665 0 is_stmt 0 discriminator 1
 2665 00b6 7B6B     	 ldr r3,[r7,#52]
 2666 00b8 022B     	 cmp r3,#2
 2667 00ba DFDD     	 ble .L158
 2668              	.LBE7:
 668:../cleanflight/src/main/blackbox/blackbox.c ****         }
 669:../cleanflight/src/main/blackbox/blackbox.c ****     }
 670:../cleanflight/src/main/blackbox/blackbox.c **** 
 671:../cleanflight/src/main/blackbox/blackbox.c ****     arraySubInt32(deltas, blackboxCurrent->axisPID_F, blackboxLast->axisPID_F, XYZ_AXIS_COUNT);
 2669              	 .loc 16 671 0 is_stmt 1
 2670 00bc 7B6A     	 ldr r3,[r7,#36]
 2671 00be 03F12802 	 add r2,r3,#40
 2672 00c2 3B6A     	 ldr r3,[r7,#32]
 2673 00c4 2833     	 adds r3,r3,#40
 2674 00c6 3946     	 mov r1,r7
 2675 00c8 0846     	 mov r0,r1
 2676 00ca 1146     	 mov r1,r2
 2677 00cc 1A46     	 mov r2,r3
 2678 00ce 0323     	 movs r3,#3
 2679 00d0 FFF7FEFF 	 bl arraySubInt32
 672:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVBArray(deltas, XYZ_AXIS_COUNT);
 2680              	 .loc 16 672 0
 2681 00d4 3B46     	 mov r3,r7
 2682 00d6 1846     	 mov r0,r3
 2683 00d8 0321     	 movs r1,#3
 2684 00da FFF7FEFF 	 bl blackboxWriteSignedVBArray
 2685              	.LBB8:
 673:../cleanflight/src/main/blackbox/blackbox.c **** 
 674:../cleanflight/src/main/blackbox/blackbox.c ****     /*
 675:../cleanflight/src/main/blackbox/blackbox.c ****      * RC tends to stay the same or fairly small for many frames at a time, so use an encoding that
 676:../cleanflight/src/main/blackbox/blackbox.c ****      * can pack multiple values per byte:
 677:../cleanflight/src/main/blackbox/blackbox.c ****      */
 678:../cleanflight/src/main/blackbox/blackbox.c ****     for (int x = 0; x < 4; x++) {
 2686              	 .loc 16 678 0
 2687 00de 0023     	 movs r3,#0
 2688 00e0 3B63     	 str r3,[r7,#48]
 2689 00e2 1CE0     	 b .L159
 2690              	.L160:
 679:../cleanflight/src/main/blackbox/blackbox.c ****         deltas[x] = blackboxCurrent->rcCommand[x] - blackboxLast->rcCommand[x];
 2691              	 .loc 16 679 0 discriminator 3
 2692 00e4 7A6A     	 ldr r2,[r7,#36]
 2693 00e6 3B6B     	 ldr r3,[r7,#48]
 2694 00e8 1833     	 adds r3,r3,#24
 2695 00ea 5B00     	 lsls r3,r3,#1
 2696 00ec 1344     	 add r3,r3,r2
 2697 00ee B3F90430 	 ldrsh r3,[r3,#4]
 2698 00f2 9BB2     	 uxth r3,r3
 2699 00f4 1AB2     	 sxth r2,r3
 2700 00f6 396A     	 ldr r1,[r7,#32]
 2701 00f8 3B6B     	 ldr r3,[r7,#48]
 2702 00fa 1833     	 adds r3,r3,#24
 2703 00fc 5B00     	 lsls r3,r3,#1
 2704 00fe 0B44     	 add r3,r3,r1
 2705 0100 B3F90430 	 ldrsh r3,[r3,#4]
 2706 0104 9BB2     	 uxth r3,r3
 2707 0106 1BB2     	 sxth r3,r3
 2708 0108 D21A     	 subs r2,r2,r3
 2709 010a 3B6B     	 ldr r3,[r7,#48]
 2710 010c 9B00     	 lsls r3,r3,#2
 2711 010e 07F13801 	 add r1,r7,#56
 2712 0112 0B44     	 add r3,r3,r1
 2713 0114 43F8382C 	 str r2,[r3,#-56]
 678:../cleanflight/src/main/blackbox/blackbox.c ****         deltas[x] = blackboxCurrent->rcCommand[x] - blackboxLast->rcCommand[x];
 2714              	 .loc 16 678 0 discriminator 3
 2715 0118 3B6B     	 ldr r3,[r7,#48]
 2716 011a 0133     	 adds r3,r3,#1
 2717 011c 3B63     	 str r3,[r7,#48]
 2718              	.L159:
 678:../cleanflight/src/main/blackbox/blackbox.c ****         deltas[x] = blackboxCurrent->rcCommand[x] - blackboxLast->rcCommand[x];
 2719              	 .loc 16 678 0 is_stmt 0 discriminator 1
 2720 011e 3B6B     	 ldr r3,[r7,#48]
 2721 0120 032B     	 cmp r3,#3
 2722 0122 DFDD     	 ble .L160
 2723              	.LBE8:
 680:../cleanflight/src/main/blackbox/blackbox.c ****     }
 681:../cleanflight/src/main/blackbox/blackbox.c **** 
 682:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteTag8_4S16(deltas);
 2724              	 .loc 16 682 0 is_stmt 1
 2725 0124 3B46     	 mov r3,r7
 2726 0126 1846     	 mov r0,r3
 2727 0128 FFF7FEFF 	 bl blackboxWriteTag8_4S16
 683:../cleanflight/src/main/blackbox/blackbox.c **** 
 684:../cleanflight/src/main/blackbox/blackbox.c ****     //Check for sensors that are updated periodically (so deltas are normally zero)
 685:../cleanflight/src/main/blackbox/blackbox.c ****     int optionalFieldCount = 0;
 2728              	 .loc 16 685 0
 2729 012c 0023     	 movs r3,#0
 2730 012e FB62     	 str r3,[r7,#44]
 686:../cleanflight/src/main/blackbox/blackbox.c **** 
 687:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_VBAT)) {
 2731              	 .loc 16 687 0
 2732 0130 0C20     	 movs r0,#12
 2733 0132 FFF7FEFF 	 bl testBlackboxCondition
 2734 0136 0346     	 mov r3,r0
 2735 0138 002B     	 cmp r3,#0
 2736 013a 12D0     	 beq .L161
 688:../cleanflight/src/main/blackbox/blackbox.c ****         deltas[optionalFieldCount++] = (int32_t) blackboxCurrent->vbatLatest - blackboxLast->vbatLa
 2737              	 .loc 16 688 0
 2738 013c FB6A     	 ldr r3,[r7,#44]
 2739 013e 5A1C     	 adds r2,r3,#1
 2740 0140 FA62     	 str r2,[r7,#44]
 2741 0142 7A6A     	 ldr r2,[r7,#36]
 2742 0144 B2F87020 	 ldrh r2,[r2,#112]
 2743 0148 92B2     	 uxth r2,r2
 2744 014a 1146     	 mov r1,r2
 2745 014c 3A6A     	 ldr r2,[r7,#32]
 2746 014e B2F87020 	 ldrh r2,[r2,#112]
 2747 0152 92B2     	 uxth r2,r2
 2748 0154 8A1A     	 subs r2,r1,r2
 2749 0156 9B00     	 lsls r3,r3,#2
 2750 0158 07F13801 	 add r1,r7,#56
 2751 015c 0B44     	 add r3,r3,r1
 2752 015e 43F8382C 	 str r2,[r3,#-56]
 2753              	.L161:
 689:../cleanflight/src/main/blackbox/blackbox.c ****     }
 690:../cleanflight/src/main/blackbox/blackbox.c **** 
 691:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_AMPERAGE_ADC)) {
 2754              	 .loc 16 691 0
 2755 0162 0D20     	 movs r0,#13
 2756 0164 FFF7FEFF 	 bl testBlackboxCondition
 2757 0168 0346     	 mov r3,r0
 2758 016a 002B     	 cmp r3,#0
 2759 016c 0FD0     	 beq .L162
 692:../cleanflight/src/main/blackbox/blackbox.c ****         deltas[optionalFieldCount++] = blackboxCurrent->amperageLatest - blackboxLast->amperageLate
 2760              	 .loc 16 692 0
 2761 016e FB6A     	 ldr r3,[r7,#44]
 2762 0170 5A1C     	 adds r2,r3,#1
 2763 0172 FA62     	 str r2,[r7,#44]
 2764 0174 7A6A     	 ldr r2,[r7,#36]
 2765 0176 D2F87210 	 ldr r1,[r2,#114]
 2766 017a 3A6A     	 ldr r2,[r7,#32]
 2767 017c D2F87220 	 ldr r2,[r2,#114]
 2768 0180 8A1A     	 subs r2,r1,r2
 2769 0182 9B00     	 lsls r3,r3,#2
 2770 0184 07F13801 	 add r1,r7,#56
 2771 0188 0B44     	 add r3,r3,r1
 2772 018a 43F8382C 	 str r2,[r3,#-56]
 2773              	.L162:
 693:../cleanflight/src/main/blackbox/blackbox.c ****     }
 694:../cleanflight/src/main/blackbox/blackbox.c **** 
 695:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_MAG
 696:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_MAG)) {
 2774              	 .loc 16 696 0
 2775 018e 0A20     	 movs r0,#10
 2776 0190 FFF7FEFF 	 bl testBlackboxCondition
 2777 0194 0346     	 mov r3,r0
 2778 0196 002B     	 cmp r3,#0
 2779 0198 24D0     	 beq .L163
 2780              	.LBB9:
 697:../cleanflight/src/main/blackbox/blackbox.c ****         for (int x = 0; x < XYZ_AXIS_COUNT; x++) {
 2781              	 .loc 16 697 0
 2782 019a 0023     	 movs r3,#0
 2783 019c BB62     	 str r3,[r7,#40]
 2784 019e 1EE0     	 b .L164
 2785              	.L165:
 698:../cleanflight/src/main/blackbox/blackbox.c ****             deltas[optionalFieldCount++] = blackboxCurrent->magADC[x] - blackboxLast->magADC[x];
 2786              	 .loc 16 698 0 discriminator 3
 2787 01a0 FA6A     	 ldr r2,[r7,#44]
 2788 01a2 531C     	 adds r3,r2,#1
 2789 01a4 FB62     	 str r3,[r7,#44]
 2790 01a6 796A     	 ldr r1,[r7,#36]
 2791 01a8 BB6A     	 ldr r3,[r7,#40]
 2792 01aa 3C33     	 adds r3,r3,#60
 2793 01ac 5B00     	 lsls r3,r3,#1
 2794 01ae 0B44     	 add r3,r3,r1
 2795 01b0 B3F90230 	 ldrsh r3,[r3,#2]
 2796 01b4 9BB2     	 uxth r3,r3
 2797 01b6 19B2     	 sxth r1,r3
 2798 01b8 386A     	 ldr r0,[r7,#32]
 2799 01ba BB6A     	 ldr r3,[r7,#40]
 2800 01bc 3C33     	 adds r3,r3,#60
 2801 01be 5B00     	 lsls r3,r3,#1
 2802 01c0 0344     	 add r3,r3,r0
 2803 01c2 B3F90230 	 ldrsh r3,[r3,#2]
 2804 01c6 9BB2     	 uxth r3,r3
 2805 01c8 1BB2     	 sxth r3,r3
 2806 01ca C91A     	 subs r1,r1,r3
 2807 01cc 9300     	 lsls r3,r2,#2
 2808 01ce 07F13802 	 add r2,r7,#56
 2809 01d2 1344     	 add r3,r3,r2
 2810 01d4 43F8381C 	 str r1,[r3,#-56]
 697:../cleanflight/src/main/blackbox/blackbox.c ****         for (int x = 0; x < XYZ_AXIS_COUNT; x++) {
 2811              	 .loc 16 697 0 discriminator 3
 2812 01d8 BB6A     	 ldr r3,[r7,#40]
 2813 01da 0133     	 adds r3,r3,#1
 2814 01dc BB62     	 str r3,[r7,#40]
 2815              	.L164:
 697:../cleanflight/src/main/blackbox/blackbox.c ****         for (int x = 0; x < XYZ_AXIS_COUNT; x++) {
 2816              	 .loc 16 697 0 is_stmt 0 discriminator 1
 2817 01de BB6A     	 ldr r3,[r7,#40]
 2818 01e0 022B     	 cmp r3,#2
 2819 01e2 DDDD     	 ble .L165
 2820              	.L163:
 2821              	.LBE9:
 699:../cleanflight/src/main/blackbox/blackbox.c ****         }
 700:../cleanflight/src/main/blackbox/blackbox.c ****     }
 701:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 702:../cleanflight/src/main/blackbox/blackbox.c **** 
 703:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_BARO
 704:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_BARO)) {
 2822              	 .loc 16 704 0 is_stmt 1
 2823 01e4 0B20     	 movs r0,#11
 2824 01e6 FFF7FEFF 	 bl testBlackboxCondition
 2825 01ea 0346     	 mov r3,r0
 2826 01ec 002B     	 cmp r3,#0
 2827 01ee 0FD0     	 beq .L166
 705:../cleanflight/src/main/blackbox/blackbox.c ****         deltas[optionalFieldCount++] = blackboxCurrent->BaroAlt - blackboxLast->BaroAlt;
 2828              	 .loc 16 705 0
 2829 01f0 FB6A     	 ldr r3,[r7,#44]
 2830 01f2 5A1C     	 adds r2,r3,#1
 2831 01f4 FA62     	 str r2,[r7,#44]
 2832 01f6 7A6A     	 ldr r2,[r7,#36]
 2833 01f8 D2F87610 	 ldr r1,[r2,#118]
 2834 01fc 3A6A     	 ldr r2,[r7,#32]
 2835 01fe D2F87620 	 ldr r2,[r2,#118]
 2836 0202 8A1A     	 subs r2,r1,r2
 2837 0204 9B00     	 lsls r3,r3,#2
 2838 0206 07F13801 	 add r1,r7,#56
 2839 020a 0B44     	 add r3,r3,r1
 2840 020c 43F8382C 	 str r2,[r3,#-56]
 2841              	.L166:
 706:../cleanflight/src/main/blackbox/blackbox.c ****     }
 707:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 708:../cleanflight/src/main/blackbox/blackbox.c **** 
 709:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_RANGEFINDER
 710:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_RANGEFINDER)) {
 711:../cleanflight/src/main/blackbox/blackbox.c ****         deltas[optionalFieldCount++] = blackboxCurrent->surfaceRaw - blackboxLast->surfaceRaw;
 712:../cleanflight/src/main/blackbox/blackbox.c ****     }
 713:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 714:../cleanflight/src/main/blackbox/blackbox.c **** 
 715:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_RSSI)) {
 2842              	 .loc 16 715 0
 2843 0210 0F20     	 movs r0,#15
 2844 0212 FFF7FEFF 	 bl testBlackboxCondition
 2845 0216 0346     	 mov r3,r0
 2846 0218 002B     	 cmp r3,#0
 2847 021a 12D0     	 beq .L167
 716:../cleanflight/src/main/blackbox/blackbox.c ****         deltas[optionalFieldCount++] = (int32_t) blackboxCurrent->rssi - blackboxLast->rssi;
 2848              	 .loc 16 716 0
 2849 021c FB6A     	 ldr r3,[r7,#44]
 2850 021e 5A1C     	 adds r2,r3,#1
 2851 0220 FA62     	 str r2,[r7,#44]
 2852 0222 7A6A     	 ldr r2,[r7,#36]
 2853 0224 B2F88020 	 ldrh r2,[r2,#128]
 2854 0228 92B2     	 uxth r2,r2
 2855 022a 1146     	 mov r1,r2
 2856 022c 3A6A     	 ldr r2,[r7,#32]
 2857 022e B2F88020 	 ldrh r2,[r2,#128]
 2858 0232 92B2     	 uxth r2,r2
 2859 0234 8A1A     	 subs r2,r1,r2
 2860 0236 9B00     	 lsls r3,r3,#2
 2861 0238 07F13801 	 add r1,r7,#56
 2862 023c 0B44     	 add r3,r3,r1
 2863 023e 43F8382C 	 str r2,[r3,#-56]
 2864              	.L167:
 717:../cleanflight/src/main/blackbox/blackbox.c ****     }
 718:../cleanflight/src/main/blackbox/blackbox.c **** 
 719:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteTag8_8SVB(deltas, optionalFieldCount);
 2865              	 .loc 16 719 0
 2866 0242 3B46     	 mov r3,r7
 2867 0244 1846     	 mov r0,r3
 2868 0246 F96A     	 ldr r1,[r7,#44]
 2869 0248 FFF7FEFF 	 bl blackboxWriteTag8_8SVB
 720:../cleanflight/src/main/blackbox/blackbox.c **** 
 721:../cleanflight/src/main/blackbox/blackbox.c ****     //Since gyros, accs and motors are noisy, base their predictions on the average of the history:
 722:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteMainStateArrayUsingAveragePredictor(offsetof(blackboxMainState_t, gyroADC),   XYZ_
 2870              	 .loc 16 722 0
 2871 024c 3C20     	 movs r0,#60
 2872 024e 0321     	 movs r1,#3
 2873 0250 FFF7FEFF 	 bl blackboxWriteMainStateArrayUsingAveragePredictor
 723:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_ACC)) {
 2874              	 .loc 16 723 0
 2875 0254 1420     	 movs r0,#20
 2876 0256 FFF7FEFF 	 bl testBlackboxCondition
 2877 025a 0346     	 mov r3,r0
 2878 025c 002B     	 cmp r3,#0
 2879 025e 03D0     	 beq .L168
 724:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteMainStateArrayUsingAveragePredictor(offsetof(blackboxMainState_t, accADC), XYZ
 2880              	 .loc 16 724 0
 2881 0260 4220     	 movs r0,#66
 2882 0262 0321     	 movs r1,#3
 2883 0264 FFF7FEFF 	 bl blackboxWriteMainStateArrayUsingAveragePredictor
 2884              	.L168:
 725:../cleanflight/src/main/blackbox/blackbox.c ****     }
 726:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_DEBUG)) {
 2885              	 .loc 16 726 0
 2886 0268 1520     	 movs r0,#21
 2887 026a FFF7FEFF 	 bl testBlackboxCondition
 2888 026e 0346     	 mov r3,r0
 2889 0270 002B     	 cmp r3,#0
 2890 0272 03D0     	 beq .L169
 727:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteMainStateArrayUsingAveragePredictor(offsetof(blackboxMainState_t, debug), DEBU
 2891              	 .loc 16 727 0
 2892 0274 4820     	 movs r0,#72
 2893 0276 0421     	 movs r1,#4
 2894 0278 FFF7FEFF 	 bl blackboxWriteMainStateArrayUsingAveragePredictor
 2895              	.L169:
 728:../cleanflight/src/main/blackbox/blackbox.c ****     }
 729:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteMainStateArrayUsingAveragePredictor(offsetof(blackboxMainState_t, motor),     getM
 2896              	 .loc 16 729 0
 2897 027c FFF7FEFF 	 bl getMotorCount
 2898 0280 0346     	 mov r3,r0
 2899 0282 5020     	 movs r0,#80
 2900 0284 1946     	 mov r1,r3
 2901 0286 FFF7FEFF 	 bl blackboxWriteMainStateArrayUsingAveragePredictor
 730:../cleanflight/src/main/blackbox/blackbox.c **** 
 731:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_TRICOPTER)) {
 2902              	 .loc 16 731 0
 2903 028a 0920     	 movs r0,#9
 2904 028c FFF7FEFF 	 bl testBlackboxCondition
 2905 0290 0346     	 mov r3,r0
 2906 0292 002B     	 cmp r3,#0
 2907 0294 0DD0     	 beq .L170
 732:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteSignedVB(blackboxCurrent->servo[5] - blackboxLast->servo[5]);
 2908              	 .loc 16 732 0
 2909 0296 7B6A     	 ldr r3,[r7,#36]
 2910 0298 B3F96A30 	 ldrsh r3,[r3,#106]
 2911 029c 9BB2     	 uxth r3,r3
 2912 029e 1AB2     	 sxth r2,r3
 2913 02a0 3B6A     	 ldr r3,[r7,#32]
 2914 02a2 B3F96A30 	 ldrsh r3,[r3,#106]
 2915 02a6 9BB2     	 uxth r3,r3
 2916 02a8 1BB2     	 sxth r3,r3
 2917 02aa D31A     	 subs r3,r2,r3
 2918 02ac 1846     	 mov r0,r3
 2919 02ae FFF7FEFF 	 bl blackboxWriteSignedVB
 2920              	.L170:
 733:../cleanflight/src/main/blackbox/blackbox.c ****     }
 734:../cleanflight/src/main/blackbox/blackbox.c **** 
 735:../cleanflight/src/main/blackbox/blackbox.c ****     //Rotate our history buffers
 736:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxHistory[2] = blackboxHistory[1];
 2921              	 .loc 16 736 0
 2922 02b2 184B     	 ldr r3,.L171
 2923 02b4 5B68     	 ldr r3,[r3,#4]
 2924 02b6 174A     	 ldr r2,.L171
 2925 02b8 9360     	 str r3,[r2,#8]
 737:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxHistory[1] = blackboxHistory[0];
 2926              	 .loc 16 737 0
 2927 02ba 164B     	 ldr r3,.L171
 2928 02bc 1B68     	 ldr r3,[r3]
 2929 02be 154A     	 ldr r2,.L171
 2930 02c0 5360     	 str r3,[r2,#4]
 738:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxHistory[0] = ((blackboxHistory[0] - blackboxHistoryRing + 1) % 3) + blackboxHistoryRing
 2931              	 .loc 16 738 0
 2932 02c2 144B     	 ldr r3,.L171
 2933 02c4 1B68     	 ldr r3,[r3]
 2934 02c6 1A46     	 mov r2,r3
 2935 02c8 134B     	 ldr r3,.L171+4
 2936 02ca D31A     	 subs r3,r2,r3
 2937 02cc 5A10     	 asrs r2,r3,#1
 2938 02ce 1346     	 mov r3,r2
 2939 02d0 9B01     	 lsls r3,r3,#6
 2940 02d2 9B1A     	 subs r3,r3,r2
 2941 02d4 9B01     	 lsls r3,r3,#6
 2942 02d6 1344     	 add r3,r3,r2
 2943 02d8 9A04     	 lsls r2,r3,#18
 2944 02da D21A     	 subs r2,r2,r3
 2945 02dc 5342     	 negs r3,r2
 2946 02de 5A1C     	 adds r2,r3,#1
 2947 02e0 0E4B     	 ldr r3,.L171+8
 2948 02e2 83FB0231 	 smull r3,r1,r3,r2
 2949 02e6 D317     	 asrs r3,r2,#31
 2950 02e8 C91A     	 subs r1,r1,r3
 2951 02ea 0B46     	 mov r3,r1
 2952 02ec 5B00     	 lsls r3,r3,#1
 2953 02ee 0B44     	 add r3,r3,r1
 2954 02f0 D11A     	 subs r1,r2,r3
 2955 02f2 0A46     	 mov r2,r1
 2956 02f4 1346     	 mov r3,r2
 2957 02f6 9B01     	 lsls r3,r3,#6
 2958 02f8 1344     	 add r3,r3,r2
 2959 02fa 5B00     	 lsls r3,r3,#1
 2960 02fc 1A46     	 mov r2,r3
 2961 02fe 064B     	 ldr r3,.L171+4
 2962 0300 1344     	 add r3,r3,r2
 2963 0302 044A     	 ldr r2,.L171
 2964 0304 1360     	 str r3,[r2]
 739:../cleanflight/src/main/blackbox/blackbox.c **** 
 740:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxLoggedAnyFrames = true;
 2965              	 .loc 16 740 0
 2966 0306 064B     	 ldr r3,.L171+12
 2967 0308 0122     	 movs r2,#1
 2968 030a 1A70     	 strb r2,[r3]
 741:../cleanflight/src/main/blackbox/blackbox.c **** }
 2969              	 .loc 16 741 0
 2970 030c 3837     	 adds r7,r7,#56
 2971              	.LCFI120:
 2972              	 .cfi_def_cfa_offset 8
 2973 030e BD46     	 mov sp,r7
 2974              	.LCFI121:
 2975              	 .cfi_def_cfa_register 13
 2976              	 
 2977 0310 80BD     	 pop {r7,pc}
 2978              	.L172:
 2979 0312 00BF     	 .align 2
 2980              	.L171:
 2981 0314 00000000 	 .word blackboxHistory
 2982 0318 00000000 	 .word blackboxHistoryRing
 2983 031c 56555555 	 .word 1431655766
 2984 0320 00000000 	 .word blackboxLoggedAnyFrames
 2985              	 .cfi_endproc
 2986              	.LFE616:
 2988              	 .section .text.writeSlowFrame,"ax",%progbits
 2989              	 .align 2
 2990              	 .thumb
 2991              	 .thumb_func
 2993              	writeSlowFrame:
 2994              	.LFB617:
 742:../cleanflight/src/main/blackbox/blackbox.c **** 
 743:../cleanflight/src/main/blackbox/blackbox.c **** /* Write the contents of the global "slowHistory" to the log as an "S" frame. Because this data is 
 744:../cleanflight/src/main/blackbox/blackbox.c ****  * infrequently, delta updates are not reasonable, so we log independent frames. */
 745:../cleanflight/src/main/blackbox/blackbox.c **** static void writeSlowFrame(void)
 746:../cleanflight/src/main/blackbox/blackbox.c **** {
 2995              	 .loc 16 746 0
 2996              	 .cfi_startproc
 2997              	 
 2998              	 
 2999 0000 80B5     	 push {r7,lr}
 3000              	.LCFI122:
 3001              	 .cfi_def_cfa_offset 8
 3002              	 .cfi_offset 7,-8
 3003              	 .cfi_offset 14,-4
 3004 0002 84B0     	 sub sp,sp,#16
 3005              	.LCFI123:
 3006              	 .cfi_def_cfa_offset 24
 3007 0004 00AF     	 add r7,sp,#0
 3008              	.LCFI124:
 3009              	 .cfi_def_cfa_register 7
 747:../cleanflight/src/main/blackbox/blackbox.c ****     int32_t values[3];
 748:../cleanflight/src/main/blackbox/blackbox.c **** 
 749:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWrite('S');
 3010              	 .loc 16 749 0
 3011 0006 5320     	 movs r0,#83
 3012 0008 FFF7FEFF 	 bl blackboxWrite
 750:../cleanflight/src/main/blackbox/blackbox.c **** 
 751:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(slowHistory.flightModeFlags);
 3013              	 .loc 16 751 0
 3014 000c 0E4B     	 ldr r3,.L174
 3015 000e 1B68     	 ldr r3,[r3]
 3016 0010 1846     	 mov r0,r3
 3017 0012 FFF7FEFF 	 bl blackboxWriteUnsignedVB
 752:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(slowHistory.stateFlags);
 3018              	 .loc 16 752 0
 3019 0016 0C4B     	 ldr r3,.L174
 3020 0018 1B79     	 ldrb r3,[r3,#4]
 3021 001a 1846     	 mov r0,r3
 3022 001c FFF7FEFF 	 bl blackboxWriteUnsignedVB
 753:../cleanflight/src/main/blackbox/blackbox.c **** 
 754:../cleanflight/src/main/blackbox/blackbox.c ****     /*
 755:../cleanflight/src/main/blackbox/blackbox.c ****      * Most of the time these three values will be able to pack into one byte for us:
 756:../cleanflight/src/main/blackbox/blackbox.c ****      */
 757:../cleanflight/src/main/blackbox/blackbox.c ****     values[0] = slowHistory.failsafePhase;
 3023              	 .loc 16 757 0
 3024 0020 094B     	 ldr r3,.L174
 3025 0022 5B79     	 ldrb r3,[r3,#5]
 3026 0024 7B60     	 str r3,[r7,#4]
 758:../cleanflight/src/main/blackbox/blackbox.c ****     values[1] = slowHistory.rxSignalReceived ? 1 : 0;
 3027              	 .loc 16 758 0
 3028 0026 084B     	 ldr r3,.L174
 3029 0028 9B79     	 ldrb r3,[r3,#6]
 3030 002a BB60     	 str r3,[r7,#8]
 759:../cleanflight/src/main/blackbox/blackbox.c ****     values[2] = slowHistory.rxFlightChannelsValid ? 1 : 0;
 3031              	 .loc 16 759 0
 3032 002c 064B     	 ldr r3,.L174
 3033 002e DB79     	 ldrb r3,[r3,#7]
 3034 0030 FB60     	 str r3,[r7,#12]
 760:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteTag2_3S32(values);
 3035              	 .loc 16 760 0
 3036 0032 3B1D     	 adds r3,r7,#4
 3037 0034 1846     	 mov r0,r3
 3038 0036 FFF7FEFF 	 bl blackboxWriteTag2_3S32
 761:../cleanflight/src/main/blackbox/blackbox.c **** 
 762:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxSlowFrameIterationTimer = 0;
 3039              	 .loc 16 762 0
 3040 003a 044B     	 ldr r3,.L174+4
 3041 003c 0022     	 movs r2,#0
 3042 003e 1A60     	 str r2,[r3]
 763:../cleanflight/src/main/blackbox/blackbox.c **** }
 3043              	 .loc 16 763 0
 3044 0040 1037     	 adds r7,r7,#16
 3045              	.LCFI125:
 3046              	 .cfi_def_cfa_offset 8
 3047 0042 BD46     	 mov sp,r7
 3048              	.LCFI126:
 3049              	 .cfi_def_cfa_register 13
 3050              	 
 3051 0044 80BD     	 pop {r7,pc}
 3052              	.L175:
 3053 0046 00BF     	 .align 2
 3054              	.L174:
 3055 0048 00000000 	 .word slowHistory
 3056 004c 00000000 	 .word blackboxSlowFrameIterationTimer
 3057              	 .cfi_endproc
 3058              	.LFE617:
 3060              	 .section .text.loadSlowState,"ax",%progbits
 3061              	 .align 2
 3062              	 .thumb
 3063              	 .thumb_func
 3065              	loadSlowState:
 3066              	.LFB618:
 764:../cleanflight/src/main/blackbox/blackbox.c **** 
 765:../cleanflight/src/main/blackbox/blackbox.c **** /**
 766:../cleanflight/src/main/blackbox/blackbox.c ****  * Load rarely-changing values from the FC into the given structure
 767:../cleanflight/src/main/blackbox/blackbox.c ****  */
 768:../cleanflight/src/main/blackbox/blackbox.c **** static void loadSlowState(blackboxSlowState_t *slow)
 769:../cleanflight/src/main/blackbox/blackbox.c **** {
 3067              	 .loc 16 769 0
 3068              	 .cfi_startproc
 3069              	 
 3070              	 
 3071 0000 80B5     	 push {r7,lr}
 3072              	.LCFI127:
 3073              	 .cfi_def_cfa_offset 8
 3074              	 .cfi_offset 7,-8
 3075              	 .cfi_offset 14,-4
 3076 0002 82B0     	 sub sp,sp,#8
 3077              	.LCFI128:
 3078              	 .cfi_def_cfa_offset 16
 3079 0004 00AF     	 add r7,sp,#0
 3080              	.LCFI129:
 3081              	 .cfi_def_cfa_register 7
 3082 0006 7860     	 str r0,[r7,#4]
 770:../cleanflight/src/main/blackbox/blackbox.c ****     memcpy(&slow->flightModeFlags, &rcModeActivationMask, sizeof(slow->flightModeFlags)); //was fli
 3083              	 .loc 16 770 0
 3084 0008 7B68     	 ldr r3,[r7,#4]
 3085 000a 1846     	 mov r0,r3
 3086 000c 0E49     	 ldr r1,.L177
 3087 000e 0422     	 movs r2,#4
 3088 0010 FFF7FEFF 	 bl memcpy
 771:../cleanflight/src/main/blackbox/blackbox.c ****     slow->stateFlags = stateFlags;
 3089              	 .loc 16 771 0
 3090 0014 0D4B     	 ldr r3,.L177+4
 3091 0016 1A78     	 ldrb r2,[r3]
 3092 0018 7B68     	 ldr r3,[r7,#4]
 3093 001a 1A71     	 strb r2,[r3,#4]
 772:../cleanflight/src/main/blackbox/blackbox.c ****     slow->failsafePhase = failsafePhase();
 3094              	 .loc 16 772 0
 3095 001c FFF7FEFF 	 bl failsafePhase
 3096 0020 0346     	 mov r3,r0
 3097 0022 1A46     	 mov r2,r3
 3098 0024 7B68     	 ldr r3,[r7,#4]
 3099 0026 5A71     	 strb r2,[r3,#5]
 773:../cleanflight/src/main/blackbox/blackbox.c ****     slow->rxSignalReceived = rxIsReceivingSignal();
 3100              	 .loc 16 773 0
 3101 0028 FFF7FEFF 	 bl rxIsReceivingSignal
 3102 002c 0346     	 mov r3,r0
 3103 002e 1A46     	 mov r2,r3
 3104 0030 7B68     	 ldr r3,[r7,#4]
 3105 0032 9A71     	 strb r2,[r3,#6]
 774:../cleanflight/src/main/blackbox/blackbox.c ****     slow->rxFlightChannelsValid = rxAreFlightChannelsValid();
 3106              	 .loc 16 774 0
 3107 0034 FFF7FEFF 	 bl rxAreFlightChannelsValid
 3108 0038 0346     	 mov r3,r0
 3109 003a 1A46     	 mov r2,r3
 3110 003c 7B68     	 ldr r3,[r7,#4]
 3111 003e DA71     	 strb r2,[r3,#7]
 775:../cleanflight/src/main/blackbox/blackbox.c **** }
 3112              	 .loc 16 775 0
 3113 0040 0837     	 adds r7,r7,#8
 3114              	.LCFI130:
 3115              	 .cfi_def_cfa_offset 8
 3116 0042 BD46     	 mov sp,r7
 3117              	.LCFI131:
 3118              	 .cfi_def_cfa_register 13
 3119              	 
 3120 0044 80BD     	 pop {r7,pc}
 3121              	.L178:
 3122 0046 00BF     	 .align 2
 3123              	.L177:
 3124 0048 00000000 	 .word rcModeActivationMask
 3125 004c 00000000 	 .word stateFlags
 3126              	 .cfi_endproc
 3127              	.LFE618:
 3129              	 .section .text.writeSlowFrameIfNeeded,"ax",%progbits
 3130              	 .align 2
 3131              	 .thumb
 3132              	 .thumb_func
 3134              	writeSlowFrameIfNeeded:
 3135              	.LFB619:
 776:../cleanflight/src/main/blackbox/blackbox.c **** 
 777:../cleanflight/src/main/blackbox/blackbox.c **** /**
 778:../cleanflight/src/main/blackbox/blackbox.c ****  * If the data in the slow frame has changed, log a slow frame.
 779:../cleanflight/src/main/blackbox/blackbox.c ****  *
 780:../cleanflight/src/main/blackbox/blackbox.c ****  * If allowPeriodicWrite is true, the frame is also logged if it has been more than blackboxSInterv
 781:../cleanflight/src/main/blackbox/blackbox.c ****  * since the field was last logged.
 782:../cleanflight/src/main/blackbox/blackbox.c ****  */
 783:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED bool writeSlowFrameIfNeeded(void)
 784:../cleanflight/src/main/blackbox/blackbox.c **** {
 3136              	 .loc 16 784 0
 3137              	 .cfi_startproc
 3138              	 
 3139              	 
 3140 0000 80B5     	 push {r7,lr}
 3141              	.LCFI132:
 3142              	 .cfi_def_cfa_offset 8
 3143              	 .cfi_offset 7,-8
 3144              	 .cfi_offset 14,-4
 3145 0002 84B0     	 sub sp,sp,#16
 3146              	.LCFI133:
 3147              	 .cfi_def_cfa_offset 24
 3148 0004 00AF     	 add r7,sp,#0
 3149              	.LCFI134:
 3150              	 .cfi_def_cfa_register 7
 785:../cleanflight/src/main/blackbox/blackbox.c ****     // Write the slow frame peridocially so it can be recovered if we ever lose sync
 786:../cleanflight/src/main/blackbox/blackbox.c ****     bool shouldWrite = blackboxSlowFrameIterationTimer >= blackboxSInterval;
 3151              	 .loc 16 786 0
 3152 0006 184B     	 ldr r3,.L185
 3153 0008 1A68     	 ldr r2,[r3]
 3154 000a 184B     	 ldr r3,.L185+4
 3155 000c 1B68     	 ldr r3,[r3]
 3156 000e 9A42     	 cmp r2,r3
 3157 0010 ACBF     	 ite ge
 3158 0012 0123     	 movge r3,#1
 3159 0014 0023     	 movlt r3,#0
 3160 0016 FB73     	 strb r3,[r7,#15]
 787:../cleanflight/src/main/blackbox/blackbox.c **** 
 788:../cleanflight/src/main/blackbox/blackbox.c ****     if (shouldWrite) {
 3161              	 .loc 16 788 0
 3162 0018 FB7B     	 ldrb r3,[r7,#15]
 3163 001a 002B     	 cmp r3,#0
 3164 001c 03D0     	 beq .L180
 789:../cleanflight/src/main/blackbox/blackbox.c ****         loadSlowState(&slowHistory);
 3165              	 .loc 16 789 0
 3166 001e 1448     	 ldr r0,.L185+8
 3167 0020 FFF7FEFF 	 bl loadSlowState
 3168 0024 15E0     	 b .L181
 3169              	.L180:
 3170              	.LBB10:
 790:../cleanflight/src/main/blackbox/blackbox.c ****     } else {
 791:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxSlowState_t newSlowState;
 792:../cleanflight/src/main/blackbox/blackbox.c **** 
 793:../cleanflight/src/main/blackbox/blackbox.c ****         loadSlowState(&newSlowState);
 3171              	 .loc 16 793 0
 3172 0026 3B1D     	 adds r3,r7,#4
 3173 0028 1846     	 mov r0,r3
 3174 002a FFF7FEFF 	 bl loadSlowState
 794:../cleanflight/src/main/blackbox/blackbox.c **** 
 795:../cleanflight/src/main/blackbox/blackbox.c ****         // Only write a slow frame if it was different from the previous state
 796:../cleanflight/src/main/blackbox/blackbox.c ****         if (memcmp(&newSlowState, &slowHistory, sizeof(slowHistory)) != 0) {
 3175              	 .loc 16 796 0
 3176 002e 3B1D     	 adds r3,r7,#4
 3177 0030 1846     	 mov r0,r3
 3178 0032 0F49     	 ldr r1,.L185+8
 3179 0034 0822     	 movs r2,#8
 3180 0036 FFF7FEFF 	 bl memcmp
 3181 003a 0346     	 mov r3,r0
 3182 003c 002B     	 cmp r3,#0
 3183 003e 08D0     	 beq .L181
 797:../cleanflight/src/main/blackbox/blackbox.c ****             // Use the new state as our new history
 798:../cleanflight/src/main/blackbox/blackbox.c ****             memcpy(&slowHistory, &newSlowState, sizeof(slowHistory));
 3184              	 .loc 16 798 0
 3185 0040 0B4B     	 ldr r3,.L185+8
 3186 0042 1A46     	 mov r2,r3
 3187 0044 3B1D     	 adds r3,r7,#4
 3188 0046 93E80300 	 ldmia r3,{r0,r1}
 3189 004a 82E80300 	 stmia r2,{r0,r1}
 799:../cleanflight/src/main/blackbox/blackbox.c ****             shouldWrite = true;
 3190              	 .loc 16 799 0
 3191 004e 0123     	 movs r3,#1
 3192 0050 FB73     	 strb r3,[r7,#15]
 3193              	.L181:
 3194              	.LBE10:
 800:../cleanflight/src/main/blackbox/blackbox.c ****         }
 801:../cleanflight/src/main/blackbox/blackbox.c ****     }
 802:../cleanflight/src/main/blackbox/blackbox.c **** 
 803:../cleanflight/src/main/blackbox/blackbox.c ****     if (shouldWrite) {
 3195              	 .loc 16 803 0
 3196 0052 FB7B     	 ldrb r3,[r7,#15]
 3197 0054 002B     	 cmp r3,#0
 3198 0056 01D0     	 beq .L183
 804:../cleanflight/src/main/blackbox/blackbox.c ****         writeSlowFrame();
 3199              	 .loc 16 804 0
 3200 0058 FFF7FEFF 	 bl writeSlowFrame
 3201              	.L183:
 805:../cleanflight/src/main/blackbox/blackbox.c ****     }
 806:../cleanflight/src/main/blackbox/blackbox.c ****     return shouldWrite;
 3202              	 .loc 16 806 0
 3203 005c FB7B     	 ldrb r3,[r7,#15]
 807:../cleanflight/src/main/blackbox/blackbox.c **** }
 3204              	 .loc 16 807 0
 3205 005e 1846     	 mov r0,r3
 3206 0060 1037     	 adds r7,r7,#16
 3207              	.LCFI135:
 3208              	 .cfi_def_cfa_offset 8
 3209 0062 BD46     	 mov sp,r7
 3210              	.LCFI136:
 3211              	 .cfi_def_cfa_register 13
 3212              	 
 3213 0064 80BD     	 pop {r7,pc}
 3214              	.L186:
 3215 0066 00BF     	 .align 2
 3216              	.L185:
 3217 0068 00000000 	 .word blackboxSlowFrameIterationTimer
 3218 006c 00000000 	 .word blackboxSInterval
 3219 0070 00000000 	 .word slowHistory
 3220              	 .cfi_endproc
 3221              	.LFE619:
 3223              	 .section .text.blackboxValidateConfig,"ax",%progbits
 3224              	 .align 2
 3225              	 .global blackboxValidateConfig
 3226              	 .thumb
 3227              	 .thumb_func
 3229              	blackboxValidateConfig:
 3230              	.LFB620:
 808:../cleanflight/src/main/blackbox/blackbox.c **** 
 809:../cleanflight/src/main/blackbox/blackbox.c **** void blackboxValidateConfig(void)
 810:../cleanflight/src/main/blackbox/blackbox.c **** {
 3231              	 .loc 16 810 0
 3232              	 .cfi_startproc
 3233              	 
 3234              	 
 3235 0000 80B5     	 push {r7,lr}
 3236              	.LCFI137:
 3237              	 .cfi_def_cfa_offset 8
 3238              	 .cfi_offset 7,-8
 3239              	 .cfi_offset 14,-4
 3240 0002 00AF     	 add r7,sp,#0
 3241              	.LCFI138:
 3242              	 .cfi_def_cfa_register 7
 811:../cleanflight/src/main/blackbox/blackbox.c ****     // If we've chosen an unsupported device, change the device to serial
 812:../cleanflight/src/main/blackbox/blackbox.c ****     switch (blackboxConfig()->device) {
 3243              	 .loc 16 812 0
 3244 0004 FFF7FEFF 	 bl blackboxConfig
 3245 0008 0346     	 mov r3,r0
 3246 000a 9B78     	 ldrb r3,[r3,#2]
 3247 000c 023B     	 subs r3,r3,#2
 3248 000e 012B     	 cmp r3,#1
 3249 0010 05D9     	 bls .L191
 813:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_FLASHFS
 814:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_DEVICE_FLASH:
 815:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 816:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_SDCARD
 817:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_DEVICE_SDCARD:
 818:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 819:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_DEVICE_SERIAL:
 820:../cleanflight/src/main/blackbox/blackbox.c ****         // Device supported, leave the setting alone
 821:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 822:../cleanflight/src/main/blackbox/blackbox.c **** 
 823:../cleanflight/src/main/blackbox/blackbox.c ****     default:
 824:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxConfigMutable()->device = BLACKBOX_DEVICE_SERIAL;
 3250              	 .loc 16 824 0
 3251 0012 FFF7FEFF 	 bl blackboxConfigMutable
 3252 0016 0346     	 mov r3,r0
 3253 0018 0322     	 movs r2,#3
 3254 001a 9A70     	 strb r2,[r3,#2]
 3255 001c 00E0     	 b .L187
 3256              	.L191:
 821:../cleanflight/src/main/blackbox/blackbox.c **** 
 3257              	 .loc 16 821 0
 3258 001e 00BF     	 nop
 3259              	.L187:
 825:../cleanflight/src/main/blackbox/blackbox.c ****     }
 826:../cleanflight/src/main/blackbox/blackbox.c **** }
 3260              	 .loc 16 826 0
 3261 0020 80BD     	 pop {r7,pc}
 3262              	 .cfi_endproc
 3263              	.LFE620:
 3265 0022 00BF     	 .section .text.blackboxResetIterationTimers,"ax",%progbits
 3266              	 .align 2
 3267              	 .thumb
 3268              	 .thumb_func
 3270              	blackboxResetIterationTimers:
 3271              	.LFB621:
 827:../cleanflight/src/main/blackbox/blackbox.c **** 
 828:../cleanflight/src/main/blackbox/blackbox.c **** static void blackboxResetIterationTimers(void)
 829:../cleanflight/src/main/blackbox/blackbox.c **** {
 3272              	 .loc 16 829 0
 3273              	 .cfi_startproc
 3274              	 
 3275              	 
 3276              	 
 3277 0000 80B4     	 push {r7}
 3278              	.LCFI139:
 3279              	 .cfi_def_cfa_offset 4
 3280              	 .cfi_offset 7,-4
 3281 0002 00AF     	 add r7,sp,#0
 3282              	.LCFI140:
 3283              	 .cfi_def_cfa_register 7
 830:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxIteration = 0;
 3284              	 .loc 16 830 0
 3285 0004 094B     	 ldr r3,.L193
 3286 0006 0022     	 movs r2,#0
 3287 0008 1A60     	 str r2,[r3]
 831:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxLoopIndex = 0;
 3288              	 .loc 16 831 0
 3289 000a 094B     	 ldr r3,.L193+4
 3290 000c 0022     	 movs r2,#0
 3291 000e 1A80     	 strh r2,[r3]
 832:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxIFrameIndex = 0;
 3292              	 .loc 16 832 0
 3293 0010 084B     	 ldr r3,.L193+8
 3294 0012 0022     	 movs r2,#0
 3295 0014 1A80     	 strh r2,[r3]
 833:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxPFrameIndex = 0;
 3296              	 .loc 16 833 0
 3297 0016 084B     	 ldr r3,.L193+12
 3298 0018 0022     	 movs r2,#0
 3299 001a 1A80     	 strh r2,[r3]
 834:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxSlowFrameIterationTimer = 0;
 3300              	 .loc 16 834 0
 3301 001c 074B     	 ldr r3,.L193+16
 3302 001e 0022     	 movs r2,#0
 3303 0020 1A60     	 str r2,[r3]
 835:../cleanflight/src/main/blackbox/blackbox.c **** }
 3304              	 .loc 16 835 0
 3305 0022 BD46     	 mov sp,r7
 3306              	.LCFI141:
 3307              	 .cfi_def_cfa_register 13
 3308              	 
 3309 0024 5DF8047B 	 ldr r7,[sp],#4
 3310              	.LCFI142:
 3311              	 .cfi_restore 7
 3312              	 .cfi_def_cfa_offset 0
 3313 0028 7047     	 bx lr
 3314              	.L194:
 3315 002a 00BF     	 .align 2
 3316              	.L193:
 3317 002c 00000000 	 .word blackboxIteration
 3318 0030 00000000 	 .word blackboxLoopIndex
 3319 0034 00000000 	 .word blackboxIFrameIndex
 3320 0038 00000000 	 .word blackboxPFrameIndex
 3321 003c 00000000 	 .word blackboxSlowFrameIterationTimer
 3322              	 .cfi_endproc
 3323              	.LFE621:
 3325              	 .section .text.blackboxStart,"ax",%progbits
 3326              	 .align 2
 3327              	 .thumb
 3328              	 .thumb_func
 3330              	blackboxStart:
 3331              	.LFB622:
 836:../cleanflight/src/main/blackbox/blackbox.c **** 
 837:../cleanflight/src/main/blackbox/blackbox.c **** /**
 838:../cleanflight/src/main/blackbox/blackbox.c ****  * Start Blackbox logging if it is not already running. Intended to be called upon arming.
 839:../cleanflight/src/main/blackbox/blackbox.c ****  */
 840:../cleanflight/src/main/blackbox/blackbox.c **** static void blackboxStart(void)
 841:../cleanflight/src/main/blackbox/blackbox.c **** {
 3332              	 .loc 16 841 0
 3333              	 .cfi_startproc
 3334              	 
 3335              	 
 3336 0000 80B5     	 push {r7,lr}
 3337              	.LCFI143:
 3338              	 .cfi_def_cfa_offset 8
 3339              	 .cfi_offset 7,-8
 3340              	 .cfi_offset 14,-4
 3341 0002 00AF     	 add r7,sp,#0
 3342              	.LCFI144:
 3343              	 .cfi_def_cfa_register 7
 842:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxValidateConfig();
 3344              	 .loc 16 842 0
 3345 0004 FFF7FEFF 	 bl blackboxValidateConfig
 843:../cleanflight/src/main/blackbox/blackbox.c **** 
 844:../cleanflight/src/main/blackbox/blackbox.c ****     if (!blackboxDeviceOpen()) {
 3346              	 .loc 16 844 0
 3347 0008 FFF7FEFF 	 bl blackboxDeviceOpen
 3348 000c 0346     	 mov r3,r0
 3349 000e 83F00103 	 eor r3,r3,#1
 3350 0012 DBB2     	 uxtb r3,r3
 3351 0014 002B     	 cmp r3,#0
 3352 0016 03D0     	 beq .L196
 845:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxSetState(BLACKBOX_STATE_DISABLED);
 3353              	 .loc 16 845 0
 3354 0018 0020     	 movs r0,#0
 3355 001a FFF7FEFF 	 bl blackboxSetState
 846:../cleanflight/src/main/blackbox/blackbox.c ****         return;
 3356              	 .loc 16 846 0
 3357 001e 2BE0     	 b .L195
 3358              	.L196:
 847:../cleanflight/src/main/blackbox/blackbox.c ****     }
 848:../cleanflight/src/main/blackbox/blackbox.c **** 
 849:../cleanflight/src/main/blackbox/blackbox.c ****     memset(&gpsHistory, 0, sizeof(gpsHistory));
 3359              	 .loc 16 849 0
 3360 0020 1648     	 ldr r0,.L198
 3361 0022 0021     	 movs r1,#0
 3362 0024 1122     	 movs r2,#17
 3363 0026 FFF7FEFF 	 bl memset
 850:../cleanflight/src/main/blackbox/blackbox.c **** 
 851:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxHistory[0] = &blackboxHistoryRing[0];
 3364              	 .loc 16 851 0
 3365 002a 154B     	 ldr r3,.L198+4
 3366 002c 154A     	 ldr r2,.L198+8
 3367 002e 1A60     	 str r2,[r3]
 852:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxHistory[1] = &blackboxHistoryRing[1];
 3368              	 .loc 16 852 0
 3369 0030 134B     	 ldr r3,.L198+4
 3370 0032 154A     	 ldr r2,.L198+12
 3371 0034 5A60     	 str r2,[r3,#4]
 853:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxHistory[2] = &blackboxHistoryRing[2];
 3372              	 .loc 16 853 0
 3373 0036 124B     	 ldr r3,.L198+4
 3374 0038 144A     	 ldr r2,.L198+16
 3375 003a 9A60     	 str r2,[r3,#8]
 854:../cleanflight/src/main/blackbox/blackbox.c **** 
 855:../cleanflight/src/main/blackbox/blackbox.c ****     vbatReference = getBatteryVoltageLatest();
 3376              	 .loc 16 855 0
 3377 003c FFF7FEFF 	 bl getBatteryVoltageLatest
 3378 0040 0346     	 mov r3,r0
 3379 0042 1A46     	 mov r2,r3
 3380 0044 124B     	 ldr r3,.L198+20
 3381 0046 1A80     	 strh r2,[r3]
 856:../cleanflight/src/main/blackbox/blackbox.c **** 
 857:../cleanflight/src/main/blackbox/blackbox.c ****     //No need to clear the content of blackboxHistoryRing since our first frame will be an intra wh
 858:../cleanflight/src/main/blackbox/blackbox.c **** 
 859:../cleanflight/src/main/blackbox/blackbox.c ****     /*
 860:../cleanflight/src/main/blackbox/blackbox.c ****      * We use conditional tests to decide whether or not certain fields should be logged. Since our
 861:../cleanflight/src/main/blackbox/blackbox.c ****      * must always agree with the logged data, the results of these tests must not change during lo
 862:../cleanflight/src/main/blackbox/blackbox.c ****      * cache those now.
 863:../cleanflight/src/main/blackbox/blackbox.c ****      */
 864:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxBuildConditionCache();
 3382              	 .loc 16 864 0
 3383 0048 FFF7FEFF 	 bl blackboxBuildConditionCache
 865:../cleanflight/src/main/blackbox/blackbox.c **** 
 866:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxModeActivationConditionPresent = isModeActivationConditionPresent(BOXBLACKBOX);
 3384              	 .loc 16 866 0
 3385 004c 1620     	 movs r0,#22
 3386 004e FFF7FEFF 	 bl isModeActivationConditionPresent
 3387 0052 0346     	 mov r3,r0
 3388 0054 1A46     	 mov r2,r3
 3389 0056 0F4B     	 ldr r3,.L198+24
 3390 0058 1A70     	 strb r2,[r3]
 867:../cleanflight/src/main/blackbox/blackbox.c **** 
 868:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxResetIterationTimers();
 3391              	 .loc 16 868 0
 3392 005a FFF7FEFF 	 bl blackboxResetIterationTimers
 869:../cleanflight/src/main/blackbox/blackbox.c **** 
 870:../cleanflight/src/main/blackbox/blackbox.c ****     /*
 871:../cleanflight/src/main/blackbox/blackbox.c ****      * Record the beeper's current idea of the last arming beep time, so that we can detect it chan
 872:../cleanflight/src/main/blackbox/blackbox.c ****      * it finally plays the beep for this arming event.
 873:../cleanflight/src/main/blackbox/blackbox.c ****      */
 874:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxLastArmingBeep = getArmingBeepTimeMicros();
 3393              	 .loc 16 874 0
 3394 005e FFF7FEFF 	 bl getArmingBeepTimeMicros
 3395 0062 0246     	 mov r2,r0
 3396 0064 0C4B     	 ldr r3,.L198+28
 3397 0066 1A60     	 str r2,[r3]
 875:../cleanflight/src/main/blackbox/blackbox.c ****     memcpy(&blackboxLastFlightModeFlags, &rcModeActivationMask, sizeof(blackboxLastFlightModeFlags)
 3398              	 .loc 16 875 0
 3399 0068 0C48     	 ldr r0,.L198+32
 3400 006a 0D49     	 ldr r1,.L198+36
 3401 006c 0422     	 movs r2,#4
 3402 006e FFF7FEFF 	 bl memcpy
 876:../cleanflight/src/main/blackbox/blackbox.c **** 
 877:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxSetState(BLACKBOX_STATE_PREPARE_LOG_FILE);
 3403              	 .loc 16 877 0
 3404 0072 0220     	 movs r0,#2
 3405 0074 FFF7FEFF 	 bl blackboxSetState
 3406              	.L195:
 878:../cleanflight/src/main/blackbox/blackbox.c **** }
 3407              	 .loc 16 878 0
 3408 0078 80BD     	 pop {r7,pc}
 3409              	.L199:
 3410 007a 00BF     	 .align 2
 3411              	.L198:
 3412 007c 00000000 	 .word gpsHistory
 3413 0080 00000000 	 .word blackboxHistory
 3414 0084 00000000 	 .word blackboxHistoryRing
 3415 0088 82000000 	 .word blackboxHistoryRing+130
 3416 008c 04010000 	 .word blackboxHistoryRing+260
 3417 0090 00000000 	 .word vbatReference
 3418 0094 00000000 	 .word blackboxModeActivationConditionPresent
 3419 0098 00000000 	 .word blackboxLastArmingBeep
 3420 009c 00000000 	 .word blackboxLastFlightModeFlags
 3421 00a0 00000000 	 .word rcModeActivationMask
 3422              	 .cfi_endproc
 3423              	.LFE622:
 3425              	 .section .text.blackboxFinish,"ax",%progbits
 3426              	 .align 2
 3427              	 .global blackboxFinish
 3428              	 .thumb
 3429              	 .thumb_func
 3431              	blackboxFinish:
 3432              	.LFB623:
 879:../cleanflight/src/main/blackbox/blackbox.c **** 
 880:../cleanflight/src/main/blackbox/blackbox.c **** /**
 881:../cleanflight/src/main/blackbox/blackbox.c ****  * Begin Blackbox shutdown.
 882:../cleanflight/src/main/blackbox/blackbox.c ****  */
 883:../cleanflight/src/main/blackbox/blackbox.c **** void blackboxFinish(void)
 884:../cleanflight/src/main/blackbox/blackbox.c **** {
 3433              	 .loc 16 884 0
 3434              	 .cfi_startproc
 3435              	 
 3436              	 
 3437 0000 80B5     	 push {r7,lr}
 3438              	.LCFI145:
 3439              	 .cfi_def_cfa_offset 8
 3440              	 .cfi_offset 7,-8
 3441              	 .cfi_offset 14,-4
 3442 0002 00AF     	 add r7,sp,#0
 3443              	.LCFI146:
 3444              	 .cfi_def_cfa_register 7
 885:../cleanflight/src/main/blackbox/blackbox.c ****     switch (blackboxState) {
 3445              	 .loc 16 885 0
 3446 0004 144B     	 ldr r3,.L207
 3447 0006 1B78     	 ldrb r3,[r3]
 3448 0008 0B2B     	 cmp r3,#11
 3449 000a 1FD8     	 bhi .L201
 3450 000c 01A2     	 adr r2,.L203
 3451 000e 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 3452 0012 00BF     	 .p2align 2
 3453              	.L203:
 3454 0014 55000000 	 .word .L206+1
 3455 0018 55000000 	 .word .L206+1
 3456 001c 4D000000 	 .word .L201+1
 3457 0020 4D000000 	 .word .L201+1
 3458 0024 4D000000 	 .word .L201+1
 3459 0028 4D000000 	 .word .L201+1
 3460 002c 4D000000 	 .word .L201+1
 3461 0030 4D000000 	 .word .L201+1
 3462 0034 4D000000 	 .word .L201+1
 3463 0038 45000000 	 .word .L204+1
 3464 003c 45000000 	 .word .L204+1
 3465 0040 55000000 	 .word .L206+1
 3466              	 .p2align 1
 3467              	.L204:
 886:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_DISABLED:
 887:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_STOPPED:
 888:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SHUTTING_DOWN:
 889:../cleanflight/src/main/blackbox/blackbox.c ****         // We're already stopped/shutting down
 890:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 891:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_RUNNING:
 892:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_PAUSED:
 893:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxLogEvent(FLIGHT_LOG_EVENT_LOG_END, NULL);
 3468              	 .loc 16 893 0
 3469 0044 FF20     	 movs r0,#255
 3470 0046 0021     	 movs r1,#0
 3471 0048 FFF7FEFF 	 bl blackboxLogEvent
 3472              	.L201:
 894:../cleanflight/src/main/blackbox/blackbox.c ****         FALLTHROUGH;
 895:../cleanflight/src/main/blackbox/blackbox.c ****     default:
 896:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxSetState(BLACKBOX_STATE_SHUTTING_DOWN);
 3473              	 .loc 16 896 0
 3474 004c 0B20     	 movs r0,#11
 3475 004e FFF7FEFF 	 bl blackboxSetState
 3476 0052 00E0     	 b .L200
 3477              	.L206:
 890:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_RUNNING:
 3478              	 .loc 16 890 0
 3479 0054 00BF     	 nop
 3480              	.L200:
 897:../cleanflight/src/main/blackbox/blackbox.c ****     }
 898:../cleanflight/src/main/blackbox/blackbox.c **** }
 3481              	 .loc 16 898 0
 3482 0056 80BD     	 pop {r7,pc}
 3483              	.L208:
 3484              	 .align 2
 3485              	.L207:
 3486 0058 00000000 	 .word blackboxState
 3487              	 .cfi_endproc
 3488              	.LFE623:
 3490              	 .section .bss.startedLoggingInTestMode,"aw",%nobits
 3493              	startedLoggingInTestMode:
 3494 0000 00       	 .space 1
 3495              	 .section .text.startInTestMode,"ax",%progbits
 3496              	 .align 2
 3497              	 .thumb
 3498              	 .thumb_func
 3500              	startInTestMode:
 3501              	.LFB624:
 899:../cleanflight/src/main/blackbox/blackbox.c **** 
 900:../cleanflight/src/main/blackbox/blackbox.c **** /**
 901:../cleanflight/src/main/blackbox/blackbox.c ****  * Test Motors Blackbox Logging
 902:../cleanflight/src/main/blackbox/blackbox.c ****  */
 903:../cleanflight/src/main/blackbox/blackbox.c **** static bool startedLoggingInTestMode = false;
 904:../cleanflight/src/main/blackbox/blackbox.c **** 
 905:../cleanflight/src/main/blackbox/blackbox.c **** static void startInTestMode(void)
 906:../cleanflight/src/main/blackbox/blackbox.c **** {
 3502              	 .loc 16 906 0
 3503              	 .cfi_startproc
 3504              	 
 3505              	 
 3506 0000 80B5     	 push {r7,lr}
 3507              	.LCFI147:
 3508              	 .cfi_def_cfa_offset 8
 3509              	 .cfi_offset 7,-8
 3510              	 .cfi_offset 14,-4
 3511 0002 82B0     	 sub sp,sp,#8
 3512              	.LCFI148:
 3513              	 .cfi_def_cfa_offset 16
 3514 0004 00AF     	 add r7,sp,#0
 3515              	.LCFI149:
 3516              	 .cfi_def_cfa_register 7
 907:../cleanflight/src/main/blackbox/blackbox.c ****     if (!startedLoggingInTestMode) {
 3517              	 .loc 16 907 0
 3518 0006 0F4B     	 ldr r3,.L212
 3519 0008 1B78     	 ldrb r3,[r3]
 3520 000a 83F00103 	 eor r3,r3,#1
 3521 000e DBB2     	 uxtb r3,r3
 3522 0010 002B     	 cmp r3,#0
 3523 0012 13D0     	 beq .L209
 908:../cleanflight/src/main/blackbox/blackbox.c ****         if (blackboxConfig()->device == BLACKBOX_DEVICE_SERIAL) {
 3524              	 .loc 16 908 0
 3525 0014 FFF7FEFF 	 bl blackboxConfig
 3526 0018 0346     	 mov r3,r0
 3527 001a 9B78     	 ldrb r3,[r3,#2]
 3528 001c 032B     	 cmp r3,#3
 3529 001e 08D1     	 bne .L211
 3530              	.LBB11:
 909:../cleanflight/src/main/blackbox/blackbox.c ****             serialPort_t *sharedBlackboxAndMspPort = findSharedSerialPort(FUNCTION_BLACKBOX, FUNCTI
 3531              	 .loc 16 909 0
 3532 0020 8020     	 movs r0,#128
 3533 0022 0121     	 movs r1,#1
 3534 0024 FFF7FEFF 	 bl findSharedSerialPort
 3535 0028 7860     	 str r0,[r7,#4]
 910:../cleanflight/src/main/blackbox/blackbox.c ****             if (sharedBlackboxAndMspPort) {
 3536              	 .loc 16 910 0
 3537 002a 7B68     	 ldr r3,[r7,#4]
 3538 002c 002B     	 cmp r3,#0
 3539 002e 00D0     	 beq .L211
 911:../cleanflight/src/main/blackbox/blackbox.c ****                 return; // When in test mode, we cannot share the MSP and serial logger port!
 3540              	 .loc 16 911 0
 3541 0030 04E0     	 b .L209
 3542              	.L211:
 3543              	.LBE11:
 912:../cleanflight/src/main/blackbox/blackbox.c ****             }
 913:../cleanflight/src/main/blackbox/blackbox.c ****         }
 914:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxStart();
 3544              	 .loc 16 914 0
 3545 0032 FFF7FEFF 	 bl blackboxStart
 915:../cleanflight/src/main/blackbox/blackbox.c ****         startedLoggingInTestMode = true;
 3546              	 .loc 16 915 0
 3547 0036 034B     	 ldr r3,.L212
 3548 0038 0122     	 movs r2,#1
 3549 003a 1A70     	 strb r2,[r3]
 3550              	.L209:
 916:../cleanflight/src/main/blackbox/blackbox.c ****     }
 917:../cleanflight/src/main/blackbox/blackbox.c **** }
 3551              	 .loc 16 917 0
 3552 003c 0837     	 adds r7,r7,#8
 3553              	.LCFI150:
 3554              	 .cfi_def_cfa_offset 8
 3555 003e BD46     	 mov sp,r7
 3556              	.LCFI151:
 3557              	 .cfi_def_cfa_register 13
 3558              	 
 3559 0040 80BD     	 pop {r7,pc}
 3560              	.L213:
 3561 0042 00BF     	 .align 2
 3562              	.L212:
 3563 0044 00000000 	 .word startedLoggingInTestMode
 3564              	 .cfi_endproc
 3565              	.LFE624:
 3567              	 .section .text.stopInTestMode,"ax",%progbits
 3568              	 .align 2
 3569              	 .thumb
 3570              	 .thumb_func
 3572              	stopInTestMode:
 3573              	.LFB625:
 918:../cleanflight/src/main/blackbox/blackbox.c **** 
 919:../cleanflight/src/main/blackbox/blackbox.c **** static void stopInTestMode(void)
 920:../cleanflight/src/main/blackbox/blackbox.c **** {
 3574              	 .loc 16 920 0
 3575              	 .cfi_startproc
 3576              	 
 3577              	 
 3578 0000 80B5     	 push {r7,lr}
 3579              	.LCFI152:
 3580              	 .cfi_def_cfa_offset 8
 3581              	 .cfi_offset 7,-8
 3582              	 .cfi_offset 14,-4
 3583 0002 00AF     	 add r7,sp,#0
 3584              	.LCFI153:
 3585              	 .cfi_def_cfa_register 7
 921:../cleanflight/src/main/blackbox/blackbox.c ****     if (startedLoggingInTestMode) {
 3586              	 .loc 16 921 0
 3587 0004 044B     	 ldr r3,.L216
 3588 0006 1B78     	 ldrb r3,[r3]
 3589 0008 002B     	 cmp r3,#0
 3590 000a 04D0     	 beq .L214
 922:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxFinish();
 3591              	 .loc 16 922 0
 3592 000c FFF7FEFF 	 bl blackboxFinish
 923:../cleanflight/src/main/blackbox/blackbox.c ****         startedLoggingInTestMode = false;
 3593              	 .loc 16 923 0
 3594 0010 014B     	 ldr r3,.L216
 3595 0012 0022     	 movs r2,#0
 3596 0014 1A70     	 strb r2,[r3]
 3597              	.L214:
 924:../cleanflight/src/main/blackbox/blackbox.c ****     }
 925:../cleanflight/src/main/blackbox/blackbox.c **** }
 3598              	 .loc 16 925 0
 3599 0016 80BD     	 pop {r7,pc}
 3600              	.L217:
 3601              	 .align 2
 3602              	.L216:
 3603 0018 00000000 	 .word startedLoggingInTestMode
 3604              	 .cfi_endproc
 3605              	.LFE625:
 3607              	 .section .text.inMotorTestMode,"ax",%progbits
 3608              	 .align 2
 3609              	 .thumb
 3610              	 .thumb_func
 3612              	inMotorTestMode:
 3613              	.LFB626:
 926:../cleanflight/src/main/blackbox/blackbox.c **** /**
 927:../cleanflight/src/main/blackbox/blackbox.c ****  * We are going to monitor the MSP_SET_MOTOR target variables motor_disarmed[] for values other tha
 928:../cleanflight/src/main/blackbox/blackbox.c ****  * on reading a value (i.e. the user is testing the motors), then we enable test mode logging;
 929:../cleanflight/src/main/blackbox/blackbox.c ****  * we monitor when the values return to minthrottle and start a delay timer (5 seconds); if
 930:../cleanflight/src/main/blackbox/blackbox.c ****  * the test motors are left at minimum throttle for this delay timer, then we assume we are done te
 931:../cleanflight/src/main/blackbox/blackbox.c ****  * shutdown the logger.
 932:../cleanflight/src/main/blackbox/blackbox.c ****  *
 933:../cleanflight/src/main/blackbox/blackbox.c ****  * Of course, after the 5 seconds and shutdown of the logger, the system will be re-enabled to allo
 934:../cleanflight/src/main/blackbox/blackbox.c ****  * test mode to trigger again; its just that the data will be in a second, third, fourth etc log fi
 935:../cleanflight/src/main/blackbox/blackbox.c ****  */
 936:../cleanflight/src/main/blackbox/blackbox.c **** static bool inMotorTestMode(void) {
 3614              	 .loc 16 936 0
 3615              	 .cfi_startproc
 3616              	 
 3617              	 
 3618 0000 80B5     	 push {r7,lr}
 3619              	.LCFI154:
 3620              	 .cfi_def_cfa_offset 8
 3621              	 .cfi_offset 7,-8
 3622              	 .cfi_offset 14,-4
 3623 0002 00AF     	 add r7,sp,#0
 3624              	.LCFI155:
 3625              	 .cfi_def_cfa_register 7
 937:../cleanflight/src/main/blackbox/blackbox.c ****     static uint32_t resetTime = 0;
 938:../cleanflight/src/main/blackbox/blackbox.c **** 
 939:../cleanflight/src/main/blackbox/blackbox.c ****     if (!ARMING_FLAG(ARMED) && areMotorsRunning()) {
 3626              	 .loc 16 939 0
 3627 0004 104B     	 ldr r3,.L221
 3628 0006 1B78     	 ldrb r3,[r3]
 3629 0008 03F00103 	 and r3,r3,#1
 3630 000c 002B     	 cmp r3,#0
 3631 000e 0ED1     	 bne .L219
 3632              	 .loc 16 939 0 is_stmt 0 discriminator 1
 3633 0010 FFF7FEFF 	 bl areMotorsRunning
 3634 0014 0346     	 mov r3,r0
 3635 0016 002B     	 cmp r3,#0
 3636 0018 09D0     	 beq .L219
 940:../cleanflight/src/main/blackbox/blackbox.c ****         resetTime = millis() + 5000; // add 5 seconds
 3637              	 .loc 16 940 0 is_stmt 1
 3638 001a FFF7FEFF 	 bl millis
 3639 001e 0346     	 mov r3,r0
 3640 0020 03F59C53 	 add r3,r3,#4992
 3641 0024 0833     	 adds r3,r3,#8
 3642 0026 094A     	 ldr r2,.L221+4
 3643 0028 1360     	 str r3,[r2]
 941:../cleanflight/src/main/blackbox/blackbox.c ****         return true;
 3644              	 .loc 16 941 0
 3645 002a 0123     	 movs r3,#1
 3646 002c 09E0     	 b .L220
 3647              	.L219:
 942:../cleanflight/src/main/blackbox/blackbox.c ****     } else {
 943:../cleanflight/src/main/blackbox/blackbox.c ****         // Monitor the duration at minimum
 944:../cleanflight/src/main/blackbox/blackbox.c ****         return (millis() < resetTime);
 3648              	 .loc 16 944 0
 3649 002e FFF7FEFF 	 bl millis
 3650 0032 0246     	 mov r2,r0
 3651 0034 054B     	 ldr r3,.L221+4
 3652 0036 1B68     	 ldr r3,[r3]
 3653 0038 9A42     	 cmp r2,r3
 3654 003a 34BF     	 ite cc
 3655 003c 0123     	 movcc r3,#1
 3656 003e 0023     	 movcs r3,#0
 3657 0040 DBB2     	 uxtb r3,r3
 3658              	.L220:
 945:../cleanflight/src/main/blackbox/blackbox.c ****     }
 946:../cleanflight/src/main/blackbox/blackbox.c ****     return false;
 947:../cleanflight/src/main/blackbox/blackbox.c **** }
 3659              	 .loc 16 947 0
 3660 0042 1846     	 mov r0,r3
 3661 0044 80BD     	 pop {r7,pc}
 3662              	.L222:
 3663 0046 00BF     	 .align 2
 3664              	.L221:
 3665 0048 00000000 	 .word armingFlags
 3666 004c 00000000 	 .word resetTime.15745
 3667              	 .cfi_endproc
 3668              	.LFE626:
 3670              	 .section .text.writeGPSHomeFrame,"ax",%progbits
 3671              	 .align 2
 3672              	 .thumb
 3673              	 .thumb_func
 3675              	writeGPSHomeFrame:
 3676              	.LFB627:
 948:../cleanflight/src/main/blackbox/blackbox.c **** 
 949:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_GPS
 950:../cleanflight/src/main/blackbox/blackbox.c **** static void writeGPSHomeFrame(void)
 951:../cleanflight/src/main/blackbox/blackbox.c **** {
 3677              	 .loc 16 951 0
 3678              	 .cfi_startproc
 3679              	 
 3680              	 
 3681 0000 80B5     	 push {r7,lr}
 3682              	.LCFI156:
 3683              	 .cfi_def_cfa_offset 8
 3684              	 .cfi_offset 7,-8
 3685              	 .cfi_offset 14,-4
 3686 0002 00AF     	 add r7,sp,#0
 3687              	.LCFI157:
 3688              	 .cfi_def_cfa_register 7
 952:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWrite('H');
 3689              	 .loc 16 952 0
 3690 0004 4820     	 movs r0,#72
 3691 0006 FFF7FEFF 	 bl blackboxWrite
 953:../cleanflight/src/main/blackbox/blackbox.c **** 
 954:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVB(GPS_home[0]);
 3692              	 .loc 16 954 0
 3693 000a 094B     	 ldr r3,.L224
 3694 000c 1B68     	 ldr r3,[r3]
 3695 000e 1846     	 mov r0,r3
 3696 0010 FFF7FEFF 	 bl blackboxWriteSignedVB
 955:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVB(GPS_home[1]);
 3697              	 .loc 16 955 0
 3698 0014 064B     	 ldr r3,.L224
 3699 0016 5B68     	 ldr r3,[r3,#4]
 3700 0018 1846     	 mov r0,r3
 3701 001a FFF7FEFF 	 bl blackboxWriteSignedVB
 956:../cleanflight/src/main/blackbox/blackbox.c ****     //TODO it'd be great if we could grab the GPS current time and write that too
 957:../cleanflight/src/main/blackbox/blackbox.c **** 
 958:../cleanflight/src/main/blackbox/blackbox.c ****     gpsHistory.GPS_home[0] = GPS_home[0];
 3702              	 .loc 16 958 0
 3703 001e 044B     	 ldr r3,.L224
 3704 0020 1B68     	 ldr r3,[r3]
 3705 0022 044A     	 ldr r2,.L224+4
 3706 0024 1360     	 str r3,[r2]
 959:../cleanflight/src/main/blackbox/blackbox.c ****     gpsHistory.GPS_home[1] = GPS_home[1];
 3707              	 .loc 16 959 0
 3708 0026 024B     	 ldr r3,.L224
 3709 0028 5B68     	 ldr r3,[r3,#4]
 3710 002a 024A     	 ldr r2,.L224+4
 3711 002c 5360     	 str r3,[r2,#4]
 960:../cleanflight/src/main/blackbox/blackbox.c **** }
 3712              	 .loc 16 960 0
 3713 002e 80BD     	 pop {r7,pc}
 3714              	.L225:
 3715              	 .align 2
 3716              	.L224:
 3717 0030 00000000 	 .word GPS_home
 3718 0034 00000000 	 .word gpsHistory
 3719              	 .cfi_endproc
 3720              	.LFE627:
 3722              	 .section .text.writeGPSFrame,"ax",%progbits
 3723              	 .align 2
 3724              	 .thumb
 3725              	 .thumb_func
 3727              	writeGPSFrame:
 3728              	.LFB628:
 961:../cleanflight/src/main/blackbox/blackbox.c **** 
 962:../cleanflight/src/main/blackbox/blackbox.c **** static void writeGPSFrame(timeUs_t currentTimeUs)
 963:../cleanflight/src/main/blackbox/blackbox.c **** {
 3729              	 .loc 16 963 0
 3730              	 .cfi_startproc
 3731              	 
 3732              	 
 3733 0000 80B5     	 push {r7,lr}
 3734              	.LCFI158:
 3735              	 .cfi_def_cfa_offset 8
 3736              	 .cfi_offset 7,-8
 3737              	 .cfi_offset 14,-4
 3738 0002 82B0     	 sub sp,sp,#8
 3739              	.LCFI159:
 3740              	 .cfi_def_cfa_offset 16
 3741 0004 00AF     	 add r7,sp,#0
 3742              	.LCFI160:
 3743              	 .cfi_def_cfa_register 7
 3744 0006 7860     	 str r0,[r7,#4]
 964:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWrite('G');
 3745              	 .loc 16 964 0
 3746 0008 4720     	 movs r0,#71
 3747 000a FFF7FEFF 	 bl blackboxWrite
 965:../cleanflight/src/main/blackbox/blackbox.c **** 
 966:../cleanflight/src/main/blackbox/blackbox.c ****     /*
 967:../cleanflight/src/main/blackbox/blackbox.c ****      * If we're logging every frame, then a GPS frame always appears just after a frame with the
 968:../cleanflight/src/main/blackbox/blackbox.c ****      * currentTime timestamp in the log, so the reader can just use that timestamp for the GPS fram
 969:../cleanflight/src/main/blackbox/blackbox.c ****      *
 970:../cleanflight/src/main/blackbox/blackbox.c ****      * If we're not logging every frame, we need to store the time of this GPS frame.
 971:../cleanflight/src/main/blackbox/blackbox.c ****      */
 972:../cleanflight/src/main/blackbox/blackbox.c ****     if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_NOT_LOGGING_EVERY_FRAME)) {
 3748              	 .loc 16 972 0
 3749 000e 1320     	 movs r0,#19
 3750 0010 FFF7FEFF 	 bl testBlackboxCondition
 3751 0014 0346     	 mov r3,r0
 3752 0016 002B     	 cmp r3,#0
 3753 0018 07D0     	 beq .L227
 973:../cleanflight/src/main/blackbox/blackbox.c ****         // Predict the time of the last frame in the main log
 974:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteUnsignedVB(currentTimeUs - blackboxHistory[1]->time);
 3754              	 .loc 16 974 0
 3755 001a 1E4B     	 ldr r3,.L228
 3756 001c 5B68     	 ldr r3,[r3,#4]
 3757 001e 1B68     	 ldr r3,[r3]
 3758 0020 7A68     	 ldr r2,[r7,#4]
 3759 0022 D31A     	 subs r3,r2,r3
 3760 0024 1846     	 mov r0,r3
 3761 0026 FFF7FEFF 	 bl blackboxWriteUnsignedVB
 3762              	.L227:
 975:../cleanflight/src/main/blackbox/blackbox.c ****     }
 976:../cleanflight/src/main/blackbox/blackbox.c **** 
 977:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(gpsSol.numSat);
 3763              	 .loc 16 977 0
 3764 002a 1B4B     	 ldr r3,.L228+4
 3765 002c 9B7C     	 ldrb r3,[r3,#18]
 3766 002e 1846     	 mov r0,r3
 3767 0030 FFF7FEFF 	 bl blackboxWriteUnsignedVB
 978:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVB(gpsSol.llh.lat - gpsHistory.GPS_home[LAT]);
 3768              	 .loc 16 978 0
 3769 0034 184B     	 ldr r3,.L228+4
 3770 0036 1A68     	 ldr r2,[r3]
 3771 0038 184B     	 ldr r3,.L228+8
 3772 003a 1B68     	 ldr r3,[r3]
 3773 003c D31A     	 subs r3,r2,r3
 3774 003e 1846     	 mov r0,r3
 3775 0040 FFF7FEFF 	 bl blackboxWriteSignedVB
 979:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteSignedVB(gpsSol.llh.lon - gpsHistory.GPS_home[LON]);
 3776              	 .loc 16 979 0
 3777 0044 144B     	 ldr r3,.L228+4
 3778 0046 5A68     	 ldr r2,[r3,#4]
 3779 0048 144B     	 ldr r3,.L228+8
 3780 004a 5B68     	 ldr r3,[r3,#4]
 3781 004c D31A     	 subs r3,r2,r3
 3782 004e 1846     	 mov r0,r3
 3783 0050 FFF7FEFF 	 bl blackboxWriteSignedVB
 980:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(gpsSol.llh.alt);
 3784              	 .loc 16 980 0
 3785 0054 104B     	 ldr r3,.L228+4
 3786 0056 9B68     	 ldr r3,[r3,#8]
 3787 0058 1846     	 mov r0,r3
 3788 005a FFF7FEFF 	 bl blackboxWriteUnsignedVB
 981:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(gpsSol.groundSpeed);
 3789              	 .loc 16 981 0
 3790 005e 0E4B     	 ldr r3,.L228+4
 3791 0060 9B89     	 ldrh r3,[r3,#12]
 3792 0062 9BB2     	 uxth r3,r3
 3793 0064 1846     	 mov r0,r3
 3794 0066 FFF7FEFF 	 bl blackboxWriteUnsignedVB
 982:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWriteUnsignedVB(gpsSol.groundCourse);
 3795              	 .loc 16 982 0
 3796 006a 0B4B     	 ldr r3,.L228+4
 3797 006c DB89     	 ldrh r3,[r3,#14]
 3798 006e 9BB2     	 uxth r3,r3
 3799 0070 1846     	 mov r0,r3
 3800 0072 FFF7FEFF 	 bl blackboxWriteUnsignedVB
 983:../cleanflight/src/main/blackbox/blackbox.c **** 
 984:../cleanflight/src/main/blackbox/blackbox.c ****     gpsHistory.GPS_numSat = gpsSol.numSat;
 3801              	 .loc 16 984 0
 3802 0076 084B     	 ldr r3,.L228+4
 3803 0078 9A7C     	 ldrb r2,[r3,#18]
 3804 007a 084B     	 ldr r3,.L228+8
 3805 007c 1A74     	 strb r2,[r3,#16]
 985:../cleanflight/src/main/blackbox/blackbox.c ****     gpsHistory.GPS_coord[LAT] = gpsSol.llh.lat;
 3806              	 .loc 16 985 0
 3807 007e 064B     	 ldr r3,.L228+4
 3808 0080 1B68     	 ldr r3,[r3]
 3809 0082 064A     	 ldr r2,.L228+8
 3810 0084 9360     	 str r3,[r2,#8]
 986:../cleanflight/src/main/blackbox/blackbox.c ****     gpsHistory.GPS_coord[LON] = gpsSol.llh.lon;
 3811              	 .loc 16 986 0
 3812 0086 044B     	 ldr r3,.L228+4
 3813 0088 5B68     	 ldr r3,[r3,#4]
 3814 008a 044A     	 ldr r2,.L228+8
 3815 008c D360     	 str r3,[r2,#12]
 987:../cleanflight/src/main/blackbox/blackbox.c **** }
 3816              	 .loc 16 987 0
 3817 008e 0837     	 adds r7,r7,#8
 3818              	.LCFI161:
 3819              	 .cfi_def_cfa_offset 8
 3820 0090 BD46     	 mov sp,r7
 3821              	.LCFI162:
 3822              	 .cfi_def_cfa_register 13
 3823              	 
 3824 0092 80BD     	 pop {r7,pc}
 3825              	.L229:
 3826              	 .align 2
 3827              	.L228:
 3828 0094 00000000 	 .word blackboxHistory
 3829 0098 00000000 	 .word gpsSol
 3830 009c 00000000 	 .word gpsHistory
 3831              	 .cfi_endproc
 3832              	.LFE628:
 3834              	 .section .text.loadMainState,"ax",%progbits
 3835              	 .align 2
 3836              	 .thumb
 3837              	 .thumb_func
 3839              	loadMainState:
 3840              	.LFB629:
 988:../cleanflight/src/main/blackbox/blackbox.c **** #endif
 989:../cleanflight/src/main/blackbox/blackbox.c **** 
 990:../cleanflight/src/main/blackbox/blackbox.c **** /**
 991:../cleanflight/src/main/blackbox/blackbox.c ****  * Fill the current state of the blackbox using values read from the flight controller
 992:../cleanflight/src/main/blackbox/blackbox.c ****  */
 993:../cleanflight/src/main/blackbox/blackbox.c **** static void loadMainState(timeUs_t currentTimeUs)
 994:../cleanflight/src/main/blackbox/blackbox.c **** {
 3841              	 .loc 16 994 0
 3842              	 .cfi_startproc
 3843              	 
 3844              	 
 3845 0000 80B5     	 push {r7,lr}
 3846              	.LCFI163:
 3847              	 .cfi_def_cfa_offset 8
 3848              	 .cfi_offset 7,-8
 3849              	 .cfi_offset 14,-4
 3850 0002 88B0     	 sub sp,sp,#32
 3851              	.LCFI164:
 3852              	 .cfi_def_cfa_offset 40
 3853 0004 00AF     	 add r7,sp,#0
 3854              	.LCFI165:
 3855              	 .cfi_def_cfa_register 7
 3856 0006 7860     	 str r0,[r7,#4]
 995:../cleanflight/src/main/blackbox/blackbox.c **** #ifndef UNIT_TEST
 996:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxMainState_t *blackboxCurrent = blackboxHistory[0];
 3857              	 .loc 16 996 0
 3858 0008 824B     	 ldr r3,.L239
 3859 000a 1B68     	 ldr r3,[r3]
 3860 000c FB60     	 str r3,[r7,#12]
 997:../cleanflight/src/main/blackbox/blackbox.c **** 
 998:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxCurrent->time = currentTimeUs;
 3861              	 .loc 16 998 0
 3862 000e FB68     	 ldr r3,[r7,#12]
 3863 0010 7A68     	 ldr r2,[r7,#4]
 3864 0012 1A60     	 str r2,[r3]
 3865              	.LBB12:
 999:../cleanflight/src/main/blackbox/blackbox.c **** 
1000:../cleanflight/src/main/blackbox/blackbox.c ****     for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 3866              	 .loc 16 1000 0
 3867 0014 0023     	 movs r3,#0
 3868 0016 FB61     	 str r3,[r7,#28]
 3869 0018 89E0     	 b .L231
 3870              	.L232:
1001:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->axisPID_P[i] = pidData[i].P;
 3871              	 .loc 16 1001 0 discriminator 3
 3872 001a 7F49     	 ldr r1,.L239+4
 3873 001c FA69     	 ldr r2,[r7,#28]
 3874 001e 1346     	 mov r3,r2
 3875 0020 9B00     	 lsls r3,r3,#2
 3876 0022 1344     	 add r3,r3,r2
 3877 0024 9B00     	 lsls r3,r3,#2
 3878 0026 0B44     	 add r3,r3,r1
 3879 0028 1B68     	 ldr r3,[r3]
 3880 002a 07EE903A 	 fmsr s15,r3
 3881 002e FDEEE77A 	 ftosizs s15,s15
 3882 0032 17EE901A 	 fmrs r1,s15
 3883 0036 FA68     	 ldr r2,[r7,#12]
 3884 0038 FB69     	 ldr r3,[r7,#28]
 3885 003a 9B00     	 lsls r3,r3,#2
 3886 003c 1344     	 add r3,r3,r2
 3887 003e 5960     	 str r1,[r3,#4]
1002:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->axisPID_I[i] = pidData[i].I;
 3888              	 .loc 16 1002 0 discriminator 3
 3889 0040 7549     	 ldr r1,.L239+4
 3890 0042 FA69     	 ldr r2,[r7,#28]
 3891 0044 1346     	 mov r3,r2
 3892 0046 9B00     	 lsls r3,r3,#2
 3893 0048 1344     	 add r3,r3,r2
 3894 004a 9B00     	 lsls r3,r3,#2
 3895 004c 0B44     	 add r3,r3,r1
 3896 004e 5B68     	 ldr r3,[r3,#4]
 3897 0050 07EE903A 	 fmsr s15,r3
 3898 0054 FDEEE77A 	 ftosizs s15,s15
 3899 0058 17EE901A 	 fmrs r1,s15
 3900 005c FB68     	 ldr r3,[r7,#12]
 3901 005e FA69     	 ldr r2,[r7,#28]
 3902 0060 0432     	 adds r2,r2,#4
 3903 0062 43F82210 	 str r1,[r3,r2,lsl#2]
1003:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->axisPID_D[i] = pidData[i].D;
 3904              	 .loc 16 1003 0 discriminator 3
 3905 0066 6C49     	 ldr r1,.L239+4
 3906 0068 FA69     	 ldr r2,[r7,#28]
 3907 006a 1346     	 mov r3,r2
 3908 006c 9B00     	 lsls r3,r3,#2
 3909 006e 1344     	 add r3,r3,r2
 3910 0070 9B00     	 lsls r3,r3,#2
 3911 0072 0B44     	 add r3,r3,r1
 3912 0074 0833     	 adds r3,r3,#8
 3913 0076 1B68     	 ldr r3,[r3]
 3914 0078 07EE903A 	 fmsr s15,r3
 3915 007c FDEEE77A 	 ftosizs s15,s15
 3916 0080 17EE901A 	 fmrs r1,s15
 3917 0084 FA68     	 ldr r2,[r7,#12]
 3918 0086 FB69     	 ldr r3,[r7,#28]
 3919 0088 0633     	 adds r3,r3,#6
 3920 008a 9B00     	 lsls r3,r3,#2
 3921 008c 1344     	 add r3,r3,r2
 3922 008e 5960     	 str r1,[r3,#4]
1004:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->axisPID_F[i] = pidData[i].F;
 3923              	 .loc 16 1004 0 discriminator 3
 3924 0090 6149     	 ldr r1,.L239+4
 3925 0092 FA69     	 ldr r2,[r7,#28]
 3926 0094 1346     	 mov r3,r2
 3927 0096 9B00     	 lsls r3,r3,#2
 3928 0098 1344     	 add r3,r3,r2
 3929 009a 9B00     	 lsls r3,r3,#2
 3930 009c 0B44     	 add r3,r3,r1
 3931 009e 0833     	 adds r3,r3,#8
 3932 00a0 5B68     	 ldr r3,[r3,#4]
 3933 00a2 07EE903A 	 fmsr s15,r3
 3934 00a6 FDEEE77A 	 ftosizs s15,s15
 3935 00aa 17EE901A 	 fmrs r1,s15
 3936 00ae FB68     	 ldr r3,[r7,#12]
 3937 00b0 FA69     	 ldr r2,[r7,#28]
 3938 00b2 0A32     	 adds r2,r2,#10
 3939 00b4 43F82210 	 str r1,[r3,r2,lsl#2]
1005:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->gyroADC[i] = lrintf(gyro.gyroADCf[i]);
 3940              	 .loc 16 1005 0 discriminator 3
 3941 00b8 584A     	 ldr r2,.L239+8
 3942 00ba FB69     	 ldr r3,[r7,#28]
 3943 00bc 9B00     	 lsls r3,r3,#2
 3944 00be 1344     	 add r3,r3,r2
 3945 00c0 5B68     	 ldr r3,[r3,#4]
 3946 00c2 1846     	 mov r0,r3
 3947 00c4 FFF7FEFF 	 bl lrintf
 3948 00c8 0346     	 mov r3,r0
 3949 00ca 99B2     	 uxth r1,r3
 3950 00cc FA68     	 ldr r2,[r7,#12]
 3951 00ce FB69     	 ldr r3,[r7,#28]
 3952 00d0 1C33     	 adds r3,r3,#28
 3953 00d2 5B00     	 lsls r3,r3,#1
 3954 00d4 1344     	 add r3,r3,r2
 3955 00d6 0A46     	 mov r2,r1
 3956 00d8 9A80     	 strh r2,[r3,#4]
1006:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->accADC[i] = lrintf(acc.accADC[i]);
 3957              	 .loc 16 1006 0 discriminator 3
 3958 00da 514A     	 ldr r2,.L239+12
 3959 00dc FB69     	 ldr r3,[r7,#28]
 3960 00de 0833     	 adds r3,r3,#8
 3961 00e0 9B00     	 lsls r3,r3,#2
 3962 00e2 1344     	 add r3,r3,r2
 3963 00e4 D3F80530 	 ldr r3,[r3,#5]
 3964 00e8 1846     	 mov r0,r3
 3965 00ea FFF7FEFF 	 bl lrintf
 3966 00ee 0346     	 mov r3,r0
 3967 00f0 99B2     	 uxth r1,r3
 3968 00f2 FA68     	 ldr r2,[r7,#12]
 3969 00f4 FB69     	 ldr r3,[r7,#28]
 3970 00f6 2033     	 adds r3,r3,#32
 3971 00f8 5B00     	 lsls r3,r3,#1
 3972 00fa 1344     	 add r3,r3,r2
 3973 00fc 0A46     	 mov r2,r1
 3974 00fe 5A80     	 strh r2,[r3,#2]
1007:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_MAG
1008:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->magADC[i] = mag.magADC[i];
 3975              	 .loc 16 1008 0 discriminator 3
 3976 0100 484A     	 ldr r2,.L239+16
 3977 0102 FB69     	 ldr r3,[r7,#28]
 3978 0104 9B00     	 lsls r3,r3,#2
 3979 0106 1344     	 add r3,r3,r2
 3980 0108 1B68     	 ldr r3,[r3]
 3981 010a 07EE903A 	 fmsr s15,r3
 3982 010e FDEEE77A 	 ftosizs s15,s15
 3983 0112 C7ED007A 	 fsts s15,[r7]
 3984 0116 3B88     	 ldrh r3,[r7]
 3985 0118 99B2     	 uxth r1,r3
 3986 011a FA68     	 ldr r2,[r7,#12]
 3987 011c FB69     	 ldr r3,[r7,#28]
 3988 011e 3C33     	 adds r3,r3,#60
 3989 0120 5B00     	 lsls r3,r3,#1
 3990 0122 1344     	 add r3,r3,r2
 3991 0124 0A46     	 mov r2,r1
 3992 0126 5A80     	 strh r2,[r3,#2]
1000:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->axisPID_P[i] = pidData[i].P;
 3993              	 .loc 16 1000 0 discriminator 3
 3994 0128 FB69     	 ldr r3,[r7,#28]
 3995 012a 0133     	 adds r3,r3,#1
 3996 012c FB61     	 str r3,[r7,#28]
 3997              	.L231:
1000:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->axisPID_P[i] = pidData[i].P;
 3998              	 .loc 16 1000 0 is_stmt 0 discriminator 1
 3999 012e FB69     	 ldr r3,[r7,#28]
 4000 0130 022B     	 cmp r3,#2
 4001 0132 7FF772AF 	 ble .L232
 4002              	.LBE12:
 4003              	.LBB13:
1009:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1010:../cleanflight/src/main/blackbox/blackbox.c ****     }
1011:../cleanflight/src/main/blackbox/blackbox.c **** 
1012:../cleanflight/src/main/blackbox/blackbox.c ****     for (int i = 0; i < 4; i++) {
 4004              	 .loc 16 1012 0 is_stmt 1
 4005 0136 0023     	 movs r3,#0
 4006 0138 BB61     	 str r3,[r7,#24]
 4007 013a 15E0     	 b .L233
 4008              	.L234:
1013:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->rcCommand[i] = rcCommand[i];
 4009              	 .loc 16 1013 0 discriminator 3
 4010 013c 3A4A     	 ldr r2,.L239+20
 4011 013e BB69     	 ldr r3,[r7,#24]
 4012 0140 9B00     	 lsls r3,r3,#2
 4013 0142 1344     	 add r3,r3,r2
 4014 0144 D3ED007A 	 flds s15,[r3]
 4015 0148 FDEEE77A 	 ftosizs s15,s15
 4016 014c C7ED007A 	 fsts s15,[r7]
 4017 0150 3B88     	 ldrh r3,[r7]
 4018 0152 99B2     	 uxth r1,r3
 4019 0154 FA68     	 ldr r2,[r7,#12]
 4020 0156 BB69     	 ldr r3,[r7,#24]
 4021 0158 1833     	 adds r3,r3,#24
 4022 015a 5B00     	 lsls r3,r3,#1
 4023 015c 1344     	 add r3,r3,r2
 4024 015e 0A46     	 mov r2,r1
 4025 0160 9A80     	 strh r2,[r3,#4]
1012:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->rcCommand[i] = rcCommand[i];
 4026              	 .loc 16 1012 0 discriminator 3
 4027 0162 BB69     	 ldr r3,[r7,#24]
 4028 0164 0133     	 adds r3,r3,#1
 4029 0166 BB61     	 str r3,[r7,#24]
 4030              	.L233:
1012:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->rcCommand[i] = rcCommand[i];
 4031              	 .loc 16 1012 0 is_stmt 0 discriminator 1
 4032 0168 BB69     	 ldr r3,[r7,#24]
 4033 016a 032B     	 cmp r3,#3
 4034 016c E6DD     	 ble .L234
 4035              	.LBE13:
 4036              	.LBB14:
1014:../cleanflight/src/main/blackbox/blackbox.c ****     }
1015:../cleanflight/src/main/blackbox/blackbox.c **** 
1016:../cleanflight/src/main/blackbox/blackbox.c ****     for (int i = 0; i < DEBUG16_VALUE_COUNT; i++) {
 4037              	 .loc 16 1016 0 is_stmt 1
 4038 016e 0023     	 movs r3,#0
 4039 0170 7B61     	 str r3,[r7,#20]
 4040 0172 0BE0     	 b .L235
 4041              	.L236:
1017:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->debug[i] = debug[i];
 4042              	 .loc 16 1017 0 discriminator 3
 4043 0174 2D4A     	 ldr r2,.L239+24
 4044 0176 7B69     	 ldr r3,[r7,#20]
 4045 0178 32F81310 	 ldrh r1,[r2,r3,lsl#1]
 4046 017c FB68     	 ldr r3,[r7,#12]
 4047 017e 7A69     	 ldr r2,[r7,#20]
 4048 0180 2432     	 adds r2,r2,#36
 4049 0182 23F81210 	 strh r1,[r3,r2,lsl#1]
1016:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->debug[i] = debug[i];
 4050              	 .loc 16 1016 0 discriminator 3
 4051 0186 7B69     	 ldr r3,[r7,#20]
 4052 0188 0133     	 adds r3,r3,#1
 4053 018a 7B61     	 str r3,[r7,#20]
 4054              	.L235:
1016:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->debug[i] = debug[i];
 4055              	 .loc 16 1016 0 is_stmt 0 discriminator 1
 4056 018c 7B69     	 ldr r3,[r7,#20]
 4057 018e 032B     	 cmp r3,#3
 4058 0190 F0DD     	 ble .L236
 4059              	.LBE14:
1018:../cleanflight/src/main/blackbox/blackbox.c ****     }
1019:../cleanflight/src/main/blackbox/blackbox.c **** 
1020:../cleanflight/src/main/blackbox/blackbox.c ****     const int motorCount = getMotorCount();
 4060              	 .loc 16 1020 0 is_stmt 1
 4061 0192 FFF7FEFF 	 bl getMotorCount
 4062 0196 0346     	 mov r3,r0
 4063 0198 BB60     	 str r3,[r7,#8]
 4064              	.LBB15:
1021:../cleanflight/src/main/blackbox/blackbox.c ****     for (int i = 0; i < motorCount; i++) {
 4065              	 .loc 16 1021 0
 4066 019a 0023     	 movs r3,#0
 4067 019c 3B61     	 str r3,[r7,#16]
 4068 019e 13E0     	 b .L237
 4069              	.L238:
1022:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCurrent->motor[i] = motor[i];
 4070              	 .loc 16 1022 0 discriminator 3
 4071 01a0 234A     	 ldr r2,.L239+28
 4072 01a2 3B69     	 ldr r3,[r7,#16]
 4073 01a4 9B00     	 lsls r3,r3,#2
 4074 01a6 1344     	 add r3,r3,r2
 4075 01a8 D3ED007A 	 flds s15,[r3]
 4076 01ac FDEEE77A 	 ftosizs s15,s15
 4077 01b0 C7ED007A 	 fsts s15,[r7]
 4078 01b4 3B88     	 ldrh r3,[r7]
 4079 01b6 99B2     	 uxth r1,r3
 4080 01b8 FB68     	 ldr r3,[r7,#12]
 4081 01ba 3A69     	 ldr r2,[r7,#16]
 4082 01bc 2832     	 adds r2,r2,#40
 4083 01be 23F81210 	 strh r1,[r3,r2,lsl#1]
1021:../cleanflight/src/main/blackbox/blackbox.c ****     for (int i = 0; i < motorCount; i++) {
 4084              	 .loc 16 1021 0 discriminator 3
 4085 01c2 3B69     	 ldr r3,[r7,#16]
 4086 01c4 0133     	 adds r3,r3,#1
 4087 01c6 3B61     	 str r3,[r7,#16]
 4088              	.L237:
1021:../cleanflight/src/main/blackbox/blackbox.c ****     for (int i = 0; i < motorCount; i++) {
 4089              	 .loc 16 1021 0 is_stmt 0 discriminator 1
 4090 01c8 3A69     	 ldr r2,[r7,#16]
 4091 01ca BB68     	 ldr r3,[r7,#8]
 4092 01cc 9A42     	 cmp r2,r3
 4093 01ce E7DB     	 blt .L238
 4094              	.LBE15:
1023:../cleanflight/src/main/blackbox/blackbox.c ****     }
1024:../cleanflight/src/main/blackbox/blackbox.c **** 
1025:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxCurrent->vbatLatest = getBatteryVoltageLatest();
 4095              	 .loc 16 1025 0 is_stmt 1
 4096 01d0 FFF7FEFF 	 bl getBatteryVoltageLatest
 4097 01d4 0346     	 mov r3,r0
 4098 01d6 1A46     	 mov r2,r3
 4099 01d8 FB68     	 ldr r3,[r7,#12]
 4100 01da A3F87020 	 strh r2,[r3,#112]
1026:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxCurrent->amperageLatest = getAmperageLatest();
 4101              	 .loc 16 1026 0
 4102 01de FFF7FEFF 	 bl getAmperageLatest
 4103 01e2 0246     	 mov r2,r0
 4104 01e4 FB68     	 ldr r3,[r7,#12]
 4105 01e6 C3F87220 	 str r2,[r3,#114]
1027:../cleanflight/src/main/blackbox/blackbox.c **** 
1028:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_BARO
1029:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxCurrent->BaroAlt = baro.BaroAlt;
 4106              	 .loc 16 1029 0
 4107 01ea 124B     	 ldr r3,.L239+32
 4108 01ec D3F82120 	 ldr r2,[r3,#33]
 4109 01f0 FB68     	 ldr r3,[r7,#12]
 4110 01f2 C3F87620 	 str r2,[r3,#118]
1030:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1031:../cleanflight/src/main/blackbox/blackbox.c **** 
1032:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_RANGEFINDER
1033:../cleanflight/src/main/blackbox/blackbox.c ****     // Store the raw sonar value without applying tilt correction
1034:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxCurrent->surfaceRaw = rangefinderGetLatestAltitude();
1035:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1036:../cleanflight/src/main/blackbox/blackbox.c **** 
1037:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxCurrent->rssi = getRssi();
 4111              	 .loc 16 1037 0
 4112 01f6 FFF7FEFF 	 bl getRssi
 4113 01fa 0346     	 mov r3,r0
 4114 01fc 1A46     	 mov r2,r3
 4115 01fe FB68     	 ldr r3,[r7,#12]
 4116 0200 A3F88020 	 strh r2,[r3,#128]
1038:../cleanflight/src/main/blackbox/blackbox.c **** 
1039:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_SERVOS
1040:../cleanflight/src/main/blackbox/blackbox.c ****     //Tail servo for tricopters
1041:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxCurrent->servo[5] = servo[5];
 4117              	 .loc 16 1041 0
 4118 0204 0C4B     	 ldr r3,.L239+36
 4119 0206 5A89     	 ldrh r2,[r3,#10]
 4120 0208 FB68     	 ldr r3,[r7,#12]
 4121 020a A3F86A20 	 strh r2,[r3,#106]
1042:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1043:../cleanflight/src/main/blackbox/blackbox.c **** #else
1044:../cleanflight/src/main/blackbox/blackbox.c ****     UNUSED(currentTimeUs);
1045:../cleanflight/src/main/blackbox/blackbox.c **** #endif // UNIT_TEST
1046:../cleanflight/src/main/blackbox/blackbox.c **** }
 4122              	 .loc 16 1046 0
 4123 020e 2037     	 adds r7,r7,#32
 4124              	.LCFI166:
 4125              	 .cfi_def_cfa_offset 8
 4126 0210 BD46     	 mov sp,r7
 4127              	.LCFI167:
 4128              	 .cfi_def_cfa_register 13
 4129              	 
 4130 0212 80BD     	 pop {r7,pc}
 4131              	.L240:
 4132              	 .align 2
 4133              	.L239:
 4134 0214 00000000 	 .word blackboxHistory
 4135 0218 00000000 	 .word pidData
 4136 021c 00000000 	 .word gyro
 4137 0220 00000000 	 .word acc
 4138 0224 00000000 	 .word mag
 4139 0228 00000000 	 .word rcCommand
 4140 022c 00000000 	 .word debug
 4141 0230 00000000 	 .word motor
 4142 0234 00000000 	 .word baro
 4143 0238 00000000 	 .word servo
 4144              	 .cfi_endproc
 4145              	.LFE629:
 4147              	 .section .rodata
 4148 0176 0000     	 .align 2
 4149              	.LC32:
 4150 0178 48204669 	 .ascii "H Field %c %s:\000"
 4150      656C6420 
 4150      25632025 
 4150      733A00
 4151 0187 00       	 .align 2
 4152              	.LC33:
 4153 0188 5B25645D 	 .ascii "[%d]\000"
 4153      00
 4154 018d 000000   	 .align 2
 4155              	.LC34:
 4156 0190 256400   	 .ascii "%d\000"
 4157              	 .section .text.sendFieldDefinition,"ax",%progbits
 4158              	 .align 2
 4159              	 .thumb
 4160              	 .thumb_func
 4162              	sendFieldDefinition:
 4163              	.LFB630:
1047:../cleanflight/src/main/blackbox/blackbox.c **** 
1048:../cleanflight/src/main/blackbox/blackbox.c **** /**
1049:../cleanflight/src/main/blackbox/blackbox.c ****  * Transmit the header information for the given field definitions. Transmitted header lines look l
1050:../cleanflight/src/main/blackbox/blackbox.c ****  *
1051:../cleanflight/src/main/blackbox/blackbox.c ****  * H Field I name:a,b,c
1052:../cleanflight/src/main/blackbox/blackbox.c ****  * H Field I predictor:0,1,2
1053:../cleanflight/src/main/blackbox/blackbox.c ****  *
1054:../cleanflight/src/main/blackbox/blackbox.c ****  * For all header types, provide a "mainFrameChar" which is the name for the field and will be used
1055:../cleanflight/src/main/blackbox/blackbox.c ****  * header (e.g. P, I etc). For blackboxDeltaField_t fields, also provide deltaFrameChar, otherwise 
1056:../cleanflight/src/main/blackbox/blackbox.c ****  *
1057:../cleanflight/src/main/blackbox/blackbox.c ****  * Provide an array 'conditions' of FlightLogFieldCondition enums if you want these conditions to d
1058:../cleanflight/src/main/blackbox/blackbox.c ****  * should be included or not. Otherwise provide NULL for this parameter and NULL for secondConditio
1059:../cleanflight/src/main/blackbox/blackbox.c ****  *
1060:../cleanflight/src/main/blackbox/blackbox.c ****  * Set xmitState.headerIndex to 0 and xmitState.u.fieldIndex to -1 before calling for the first tim
1061:../cleanflight/src/main/blackbox/blackbox.c ****  *
1062:../cleanflight/src/main/blackbox/blackbox.c ****  * secondFieldDefinition and secondCondition element pointers need to be provided in order to compu
1063:../cleanflight/src/main/blackbox/blackbox.c ****  * fieldDefinition and secondCondition arrays.
1064:../cleanflight/src/main/blackbox/blackbox.c ****  *
1065:../cleanflight/src/main/blackbox/blackbox.c ****  * Returns true if there is still header left to transmit (so call again to continue transmission).
1066:../cleanflight/src/main/blackbox/blackbox.c ****  */
1067:../cleanflight/src/main/blackbox/blackbox.c **** static bool sendFieldDefinition(char mainFrameChar, char deltaFrameChar, const void *fieldDefinitio
1068:../cleanflight/src/main/blackbox/blackbox.c ****         const void *secondFieldDefinition, int fieldCount, const uint8_t *conditions, const uint8_t
1069:../cleanflight/src/main/blackbox/blackbox.c **** {
 4164              	 .loc 16 1069 0
 4165              	 .cfi_startproc
 4166              	 
 4167              	 
 4168 0000 80B5     	 push {r7,lr}
 4169              	.LCFI168:
 4170              	 .cfi_def_cfa_offset 8
 4171              	 .cfi_offset 7,-8
 4172              	 .cfi_offset 14,-4
 4173 0002 8CB0     	 sub sp,sp,#48
 4174              	.LCFI169:
 4175              	 .cfi_def_cfa_offset 56
 4176 0004 00AF     	 add r7,sp,#0
 4177              	.LCFI170:
 4178              	 .cfi_def_cfa_register 7
 4179 0006 BA60     	 str r2,[r7,#8]
 4180 0008 7B60     	 str r3,[r7,#4]
 4181 000a 0346     	 mov r3,r0
 4182 000c FB73     	 strb r3,[r7,#15]
 4183 000e 0B46     	 mov r3,r1
 4184 0010 BB73     	 strb r3,[r7,#14]
1070:../cleanflight/src/main/blackbox/blackbox.c ****     const blackboxFieldDefinition_t *def;
1071:../cleanflight/src/main/blackbox/blackbox.c ****     unsigned int headerCount;
1072:../cleanflight/src/main/blackbox/blackbox.c ****     static bool needComma = false;
1073:../cleanflight/src/main/blackbox/blackbox.c ****     size_t definitionStride = (char*) secondFieldDefinition - (char*) fieldDefinitions;
 4185              	 .loc 16 1073 0
 4186 0012 7A68     	 ldr r2,[r7,#4]
 4187 0014 BB68     	 ldr r3,[r7,#8]
 4188 0016 D31A     	 subs r3,r2,r3
 4189 0018 7B62     	 str r3,[r7,#36]
1074:../cleanflight/src/main/blackbox/blackbox.c ****     size_t conditionsStride = (char*) secondCondition - (char*) conditions;
 4190              	 .loc 16 1074 0
 4191 001a 3A6C     	 ldr r2,[r7,#64]
 4192 001c FB6B     	 ldr r3,[r7,#60]
 4193 001e D31A     	 subs r3,r2,r3
 4194 0020 3B62     	 str r3,[r7,#32]
1075:../cleanflight/src/main/blackbox/blackbox.c **** 
1076:../cleanflight/src/main/blackbox/blackbox.c ****     if (deltaFrameChar) {
 4195              	 .loc 16 1076 0
 4196 0022 BB7B     	 ldrb r3,[r7,#14]
 4197 0024 002B     	 cmp r3,#0
 4198 0026 02D0     	 beq .L242
1077:../cleanflight/src/main/blackbox/blackbox.c ****         headerCount = BLACKBOX_DELTA_FIELD_HEADER_COUNT;
 4199              	 .loc 16 1077 0
 4200 0028 0623     	 movs r3,#6
 4201 002a FB62     	 str r3,[r7,#44]
 4202 002c 01E0     	 b .L243
 4203              	.L242:
1078:../cleanflight/src/main/blackbox/blackbox.c ****     } else {
1079:../cleanflight/src/main/blackbox/blackbox.c ****         headerCount = BLACKBOX_SIMPLE_FIELD_HEADER_COUNT;
 4204              	 .loc 16 1079 0
 4205 002e 0423     	 movs r3,#4
 4206 0030 FB62     	 str r3,[r7,#44]
 4207              	.L243:
1080:../cleanflight/src/main/blackbox/blackbox.c ****     }
1081:../cleanflight/src/main/blackbox/blackbox.c **** 
1082:../cleanflight/src/main/blackbox/blackbox.c ****     /*
1083:../cleanflight/src/main/blackbox/blackbox.c ****      * We're chunking up the header data so we don't exceed our datarate. So we'll be called multip
1084:../cleanflight/src/main/blackbox/blackbox.c ****      * the whole header.
1085:../cleanflight/src/main/blackbox/blackbox.c ****      */
1086:../cleanflight/src/main/blackbox/blackbox.c **** 
1087:../cleanflight/src/main/blackbox/blackbox.c ****     // On our first call we need to print the name of the header and a colon
1088:../cleanflight/src/main/blackbox/blackbox.c ****     if (xmitState.u.fieldIndex == -1) {
 4208              	 .loc 16 1088 0
 4209 0032 6F4B     	 ldr r3,.L262
 4210 0034 5B68     	 ldr r3,[r3,#4]
 4211 0036 B3F1FF3F 	 cmp r3,#-1
 4212 003a 38D1     	 bne .L244
 4213              	.LBB16:
1089:../cleanflight/src/main/blackbox/blackbox.c ****         if (xmitState.headerIndex >= headerCount) {
 4214              	 .loc 16 1089 0
 4215 003c 6C4B     	 ldr r3,.L262
 4216 003e 1A68     	 ldr r2,[r3]
 4217 0040 FB6A     	 ldr r3,[r7,#44]
 4218 0042 9A42     	 cmp r2,r3
 4219 0044 01D3     	 bcc .L245
1090:../cleanflight/src/main/blackbox/blackbox.c ****             return false; //Someone probably called us again after we had already completed transmi
 4220              	 .loc 16 1090 0
 4221 0046 0023     	 movs r3,#0
 4222 0048 CEE0     	 b .L246
 4223              	.L245:
1091:../cleanflight/src/main/blackbox/blackbox.c ****         }
1092:../cleanflight/src/main/blackbox/blackbox.c **** 
1093:../cleanflight/src/main/blackbox/blackbox.c ****         uint32_t charsToBeWritten = strlen("H Field x :") + strlen(blackboxFieldHeaderNames[xmitSta
 4224              	 .loc 16 1093 0
 4225 004a 694B     	 ldr r3,.L262
 4226 004c 1B68     	 ldr r3,[r3]
 4227 004e 694A     	 ldr r2,.L262+4
 4228 0050 52F82330 	 ldr r3,[r2,r3,lsl#2]
 4229 0054 1846     	 mov r0,r3
 4230 0056 FFF7FEFF 	 bl strlen
 4231 005a 0346     	 mov r3,r0
 4232 005c 0B33     	 adds r3,r3,#11
 4233 005e FB61     	 str r3,[r7,#28]
1094:../cleanflight/src/main/blackbox/blackbox.c **** 
1095:../cleanflight/src/main/blackbox/blackbox.c ****         if (blackboxDeviceReserveBufferSpace(charsToBeWritten) != BLACKBOX_RESERVE_SUCCESS) {
 4234              	 .loc 16 1095 0
 4235 0060 FB69     	 ldr r3,[r7,#28]
 4236 0062 1846     	 mov r0,r3
 4237 0064 FFF7FEFF 	 bl blackboxDeviceReserveBufferSpace
 4238 0068 0346     	 mov r3,r0
 4239 006a 002B     	 cmp r3,#0
 4240 006c 01D0     	 beq .L247
1096:../cleanflight/src/main/blackbox/blackbox.c ****             return true; // Try again later
 4241              	 .loc 16 1096 0
 4242 006e 0123     	 movs r3,#1
 4243 0070 BAE0     	 b .L246
 4244              	.L247:
1097:../cleanflight/src/main/blackbox/blackbox.c ****         }
1098:../cleanflight/src/main/blackbox/blackbox.c **** 
1099:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxHeaderBudget -= blackboxPrintf("H Field %c %s:", xmitState.headerIndex >= BLACKBOX_
 4245              	 .loc 16 1099 0
 4246 0072 5F4B     	 ldr r3,.L262
 4247 0074 1B68     	 ldr r3,[r3]
 4248 0076 032B     	 cmp r3,#3
 4249 0078 01D9     	 bls .L248
 4250              	 .loc 16 1099 0 is_stmt 0 discriminator 1
 4251 007a BB7B     	 ldrb r3,[r7,#14]
 4252 007c 00E0     	 b .L249
 4253              	.L248:
 4254              	 .loc 16 1099 0 discriminator 2
 4255 007e FB7B     	 ldrb r3,[r7,#15]
 4256              	.L249:
 4257              	 .loc 16 1099 0 discriminator 4
 4258 0080 5B4A     	 ldr r2,.L262
 4259 0082 1268     	 ldr r2,[r2]
 4260 0084 5B49     	 ldr r1,.L262+4
 4261 0086 51F82220 	 ldr r2,[r1,r2,lsl#2]
 4262 008a 5B48     	 ldr r0,.L262+8
 4263 008c 1946     	 mov r1,r3
 4264 008e FFF7FEFF 	 bl blackboxPrintf
 4265 0092 0246     	 mov r2,r0
 4266 0094 594B     	 ldr r3,.L262+12
 4267 0096 1B68     	 ldr r3,[r3]
 4268 0098 9B1A     	 subs r3,r3,r2
 4269 009a 584A     	 ldr r2,.L262+12
 4270 009c 1360     	 str r3,[r2]
1100:../cleanflight/src/main/blackbox/blackbox.c **** 
1101:../cleanflight/src/main/blackbox/blackbox.c ****         xmitState.u.fieldIndex++;
 4271              	 .loc 16 1101 0 is_stmt 1 discriminator 4
 4272 009e 544B     	 ldr r3,.L262
 4273 00a0 5B68     	 ldr r3,[r3,#4]
 4274 00a2 0133     	 adds r3,r3,#1
 4275 00a4 524A     	 ldr r2,.L262
 4276 00a6 5360     	 str r3,[r2,#4]
1102:../cleanflight/src/main/blackbox/blackbox.c ****         needComma = false;
 4277              	 .loc 16 1102 0 discriminator 4
 4278 00a8 554B     	 ldr r3,.L262+16
 4279 00aa 0022     	 movs r2,#0
 4280 00ac 1A70     	 strb r2,[r3]
 4281              	.L244:
 4282              	.LBE16:
1103:../cleanflight/src/main/blackbox/blackbox.c ****     }
1104:../cleanflight/src/main/blackbox/blackbox.c **** 
1105:../cleanflight/src/main/blackbox/blackbox.c ****     // The longest we expect an integer to be as a string:
1106:../cleanflight/src/main/blackbox/blackbox.c ****     const uint32_t LONGEST_INTEGER_STRLEN = 2;
 4283              	 .loc 16 1106 0
 4284 00ae 0223     	 movs r3,#2
 4285 00b0 BB61     	 str r3,[r7,#24]
1107:../cleanflight/src/main/blackbox/blackbox.c **** 
1108:../cleanflight/src/main/blackbox/blackbox.c ****     for (; xmitState.u.fieldIndex < fieldCount; xmitState.u.fieldIndex++) {
 4286              	 .loc 16 1108 0
 4287 00b2 70E0     	 b .L250
 4288              	.L260:
1109:../cleanflight/src/main/blackbox/blackbox.c ****         def = (const blackboxFieldDefinition_t*) ((const char*)fieldDefinitions + definitionStride 
 4289              	 .loc 16 1109 0
 4290 00b4 4E4B     	 ldr r3,.L262
 4291 00b6 5B68     	 ldr r3,[r3,#4]
 4292 00b8 1A46     	 mov r2,r3
 4293 00ba 7B6A     	 ldr r3,[r7,#36]
 4294 00bc 03FB02F3 	 mul r3,r3,r2
 4295 00c0 BA68     	 ldr r2,[r7,#8]
 4296 00c2 1344     	 add r3,r3,r2
 4297 00c4 7B61     	 str r3,[r7,#20]
1110:../cleanflight/src/main/blackbox/blackbox.c **** 
1111:../cleanflight/src/main/blackbox/blackbox.c ****         if (!conditions || testBlackboxCondition(conditions[conditionsStride * xmitState.u.fieldInd
 4298              	 .loc 16 1111 0
 4299 00c6 FB6B     	 ldr r3,[r7,#60]
 4300 00c8 002B     	 cmp r3,#0
 4301 00ca 0ED0     	 beq .L251
 4302              	 .loc 16 1111 0 is_stmt 0 discriminator 1
 4303 00cc 484B     	 ldr r3,.L262
 4304 00ce 5B68     	 ldr r3,[r3,#4]
 4305 00d0 1A46     	 mov r2,r3
 4306 00d2 3B6A     	 ldr r3,[r7,#32]
 4307 00d4 03FB02F3 	 mul r3,r3,r2
 4308 00d8 FA6B     	 ldr r2,[r7,#60]
 4309 00da 1344     	 add r3,r3,r2
 4310 00dc 1B78     	 ldrb r3,[r3]
 4311 00de 1846     	 mov r0,r3
 4312 00e0 FFF7FEFF 	 bl testBlackboxCondition
 4313 00e4 0346     	 mov r3,r0
 4314 00e6 002B     	 cmp r3,#0
 4315 00e8 50D0     	 beq .L252
 4316              	.L251:
 4317              	.LBB17:
1112:../cleanflight/src/main/blackbox/blackbox.c ****             // First (over)estimate the length of the string we want to print
1113:../cleanflight/src/main/blackbox/blackbox.c **** 
1114:../cleanflight/src/main/blackbox/blackbox.c ****             int32_t bytesToWrite = 1; // Leading comma
 4318              	 .loc 16 1114 0 is_stmt 1
 4319 00ea 0123     	 movs r3,#1
 4320 00ec BB62     	 str r3,[r7,#40]
1115:../cleanflight/src/main/blackbox/blackbox.c **** 
1116:../cleanflight/src/main/blackbox/blackbox.c ****             // The first header is a field name
1117:../cleanflight/src/main/blackbox/blackbox.c ****             if (xmitState.headerIndex == 0) {
 4321              	 .loc 16 1117 0
 4322 00ee 404B     	 ldr r3,.L262
 4323 00f0 1B68     	 ldr r3,[r3]
 4324 00f2 002B     	 cmp r3,#0
 4325 00f4 0CD1     	 bne .L253
1118:../cleanflight/src/main/blackbox/blackbox.c ****                 bytesToWrite += strlen(def->name) + strlen("[]") + LONGEST_INTEGER_STRLEN;
 4326              	 .loc 16 1118 0
 4327 00f6 7B69     	 ldr r3,[r7,#20]
 4328 00f8 1B68     	 ldr r3,[r3]
 4329 00fa 1846     	 mov r0,r3
 4330 00fc FFF7FEFF 	 bl strlen
 4331 0100 0246     	 mov r2,r0
 4332 0102 BB69     	 ldr r3,[r7,#24]
 4333 0104 1A44     	 add r2,r2,r3
 4334 0106 BB6A     	 ldr r3,[r7,#40]
 4335 0108 1344     	 add r3,r3,r2
 4336 010a 0233     	 adds r3,r3,#2
 4337 010c BB62     	 str r3,[r7,#40]
 4338 010e 03E0     	 b .L254
 4339              	.L253:
1119:../cleanflight/src/main/blackbox/blackbox.c ****             } else {
1120:../cleanflight/src/main/blackbox/blackbox.c ****                 //The other headers are integers
1121:../cleanflight/src/main/blackbox/blackbox.c ****                 bytesToWrite += LONGEST_INTEGER_STRLEN;
 4340              	 .loc 16 1121 0
 4341 0110 BA6A     	 ldr r2,[r7,#40]
 4342 0112 BB69     	 ldr r3,[r7,#24]
 4343 0114 1344     	 add r3,r3,r2
 4344 0116 BB62     	 str r3,[r7,#40]
 4345              	.L254:
1122:../cleanflight/src/main/blackbox/blackbox.c ****             }
1123:../cleanflight/src/main/blackbox/blackbox.c **** 
1124:../cleanflight/src/main/blackbox/blackbox.c ****             // Now perform the write if the buffer is large enough
1125:../cleanflight/src/main/blackbox/blackbox.c ****             if (blackboxDeviceReserveBufferSpace(bytesToWrite) != BLACKBOX_RESERVE_SUCCESS) {
 4346              	 .loc 16 1125 0
 4347 0118 B86A     	 ldr r0,[r7,#40]
 4348 011a FFF7FEFF 	 bl blackboxDeviceReserveBufferSpace
 4349 011e 0346     	 mov r3,r0
 4350 0120 002B     	 cmp r3,#0
 4351 0122 01D0     	 beq .L255
1126:../cleanflight/src/main/blackbox/blackbox.c ****                 // Ran out of space!
1127:../cleanflight/src/main/blackbox/blackbox.c ****                 return true;
 4352              	 .loc 16 1127 0
 4353 0124 0123     	 movs r3,#1
 4354 0126 5FE0     	 b .L246
 4355              	.L255:
1128:../cleanflight/src/main/blackbox/blackbox.c ****             }
1129:../cleanflight/src/main/blackbox/blackbox.c **** 
1130:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxHeaderBudget -= bytesToWrite;
 4356              	 .loc 16 1130 0
 4357 0128 344B     	 ldr r3,.L262+12
 4358 012a 1A68     	 ldr r2,[r3]
 4359 012c BB6A     	 ldr r3,[r7,#40]
 4360 012e D31A     	 subs r3,r2,r3
 4361 0130 324A     	 ldr r2,.L262+12
 4362 0132 1360     	 str r3,[r2]
1131:../cleanflight/src/main/blackbox/blackbox.c **** 
1132:../cleanflight/src/main/blackbox/blackbox.c ****             if (needComma) {
 4363              	 .loc 16 1132 0
 4364 0134 324B     	 ldr r3,.L262+16
 4365 0136 1B78     	 ldrb r3,[r3]
 4366 0138 002B     	 cmp r3,#0
 4367 013a 03D0     	 beq .L256
1133:../cleanflight/src/main/blackbox/blackbox.c ****                 blackboxWrite(',');
 4368              	 .loc 16 1133 0
 4369 013c 2C20     	 movs r0,#44
 4370 013e FFF7FEFF 	 bl blackboxWrite
 4371 0142 02E0     	 b .L257
 4372              	.L256:
1134:../cleanflight/src/main/blackbox/blackbox.c ****             } else {
1135:../cleanflight/src/main/blackbox/blackbox.c ****                 needComma = true;
 4373              	 .loc 16 1135 0
 4374 0144 2E4B     	 ldr r3,.L262+16
 4375 0146 0122     	 movs r2,#1
 4376 0148 1A70     	 strb r2,[r3]
 4377              	.L257:
1136:../cleanflight/src/main/blackbox/blackbox.c ****             }
1137:../cleanflight/src/main/blackbox/blackbox.c **** 
1138:../cleanflight/src/main/blackbox/blackbox.c ****             // The first header is a field name
1139:../cleanflight/src/main/blackbox/blackbox.c ****             if (xmitState.headerIndex == 0) {
 4378              	 .loc 16 1139 0
 4379 014a 294B     	 ldr r3,.L262
 4380 014c 1B68     	 ldr r3,[r3]
 4381 014e 002B     	 cmp r3,#0
 4382 0150 12D1     	 bne .L258
1140:../cleanflight/src/main/blackbox/blackbox.c ****                 blackboxWriteString(def->name);
 4383              	 .loc 16 1140 0
 4384 0152 7B69     	 ldr r3,[r7,#20]
 4385 0154 1B68     	 ldr r3,[r3]
 4386 0156 1846     	 mov r0,r3
 4387 0158 FFF7FEFF 	 bl blackboxWriteString
1141:../cleanflight/src/main/blackbox/blackbox.c **** 
1142:../cleanflight/src/main/blackbox/blackbox.c ****                 // Do we need to print an index in brackets after the name?
1143:../cleanflight/src/main/blackbox/blackbox.c ****                 if (def->fieldNameIndex != -1) {
 4388              	 .loc 16 1143 0
 4389 015c 7B69     	 ldr r3,[r7,#20]
 4390 015e 1B79     	 ldrb r3,[r3,#4]
 4391 0160 5BB2     	 sxtb r3,r3
 4392 0162 B3F1FF3F 	 cmp r3,#-1
 4393 0166 11D0     	 beq .L252
1144:../cleanflight/src/main/blackbox/blackbox.c ****                     blackboxPrintf("[%d]", def->fieldNameIndex);
 4394              	 .loc 16 1144 0
 4395 0168 7B69     	 ldr r3,[r7,#20]
 4396 016a 1B79     	 ldrb r3,[r3,#4]
 4397 016c 5BB2     	 sxtb r3,r3
 4398 016e 2548     	 ldr r0,.L262+20
 4399 0170 1946     	 mov r1,r3
 4400 0172 FFF7FEFF 	 bl blackboxPrintf
 4401 0176 09E0     	 b .L252
 4402              	.L258:
1145:../cleanflight/src/main/blackbox/blackbox.c ****                 }
1146:../cleanflight/src/main/blackbox/blackbox.c ****             } else {
1147:../cleanflight/src/main/blackbox/blackbox.c ****                 //The other headers are integers
1148:../cleanflight/src/main/blackbox/blackbox.c ****                 blackboxPrintf("%d", def->arr[xmitState.headerIndex - 1]);
 4403              	 .loc 16 1148 0
 4404 0178 1D4B     	 ldr r3,.L262
 4405 017a 1B68     	 ldr r3,[r3]
 4406 017c 013B     	 subs r3,r3,#1
 4407 017e 7A69     	 ldr r2,[r7,#20]
 4408 0180 1344     	 add r3,r3,r2
 4409 0182 5B79     	 ldrb r3,[r3,#5]
 4410 0184 2048     	 ldr r0,.L262+24
 4411 0186 1946     	 mov r1,r3
 4412 0188 FFF7FEFF 	 bl blackboxPrintf
 4413              	.L252:
 4414              	.LBE17:
1108:../cleanflight/src/main/blackbox/blackbox.c ****         def = (const blackboxFieldDefinition_t*) ((const char*)fieldDefinitions + definitionStride 
 4415              	 .loc 16 1108 0
 4416 018c 184B     	 ldr r3,.L262
 4417 018e 5B68     	 ldr r3,[r3,#4]
 4418 0190 0133     	 adds r3,r3,#1
 4419 0192 174A     	 ldr r2,.L262
 4420 0194 5360     	 str r3,[r2,#4]
 4421              	.L250:
1108:../cleanflight/src/main/blackbox/blackbox.c ****         def = (const blackboxFieldDefinition_t*) ((const char*)fieldDefinitions + definitionStride 
 4422              	 .loc 16 1108 0 is_stmt 0 discriminator 1
 4423 0196 164B     	 ldr r3,.L262
 4424 0198 5A68     	 ldr r2,[r3,#4]
 4425 019a BB6B     	 ldr r3,[r7,#56]
 4426 019c 9A42     	 cmp r2,r3
 4427 019e 89DB     	 blt .L260
1149:../cleanflight/src/main/blackbox/blackbox.c ****             }
1150:../cleanflight/src/main/blackbox/blackbox.c ****         }
1151:../cleanflight/src/main/blackbox/blackbox.c ****     }
1152:../cleanflight/src/main/blackbox/blackbox.c **** 
1153:../cleanflight/src/main/blackbox/blackbox.c ****     // Did we complete this line?
1154:../cleanflight/src/main/blackbox/blackbox.c ****     if (xmitState.u.fieldIndex == fieldCount && blackboxDeviceReserveBufferSpace(1) == BLACKBOX_RES
 4428              	 .loc 16 1154 0 is_stmt 1
 4429 01a0 134B     	 ldr r3,.L262
 4430 01a2 5A68     	 ldr r2,[r3,#4]
 4431 01a4 BB6B     	 ldr r3,[r7,#56]
 4432 01a6 9A42     	 cmp r2,r3
 4433 01a8 16D1     	 bne .L261
 4434              	 .loc 16 1154 0 is_stmt 0 discriminator 1
 4435 01aa 0120     	 movs r0,#1
 4436 01ac FFF7FEFF 	 bl blackboxDeviceReserveBufferSpace
 4437 01b0 0346     	 mov r3,r0
 4438 01b2 002B     	 cmp r3,#0
 4439 01b4 10D1     	 bne .L261
1155:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxHeaderBudget--;
 4440              	 .loc 16 1155 0 is_stmt 1
 4441 01b6 114B     	 ldr r3,.L262+12
 4442 01b8 1B68     	 ldr r3,[r3]
 4443 01ba 013B     	 subs r3,r3,#1
 4444 01bc 0F4A     	 ldr r2,.L262+12
 4445 01be 1360     	 str r3,[r2]
1156:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWrite('\n');
 4446              	 .loc 16 1156 0
 4447 01c0 0A20     	 movs r0,#10
 4448 01c2 FFF7FEFF 	 bl blackboxWrite
1157:../cleanflight/src/main/blackbox/blackbox.c ****         xmitState.headerIndex++;
 4449              	 .loc 16 1157 0
 4450 01c6 0A4B     	 ldr r3,.L262
 4451 01c8 1B68     	 ldr r3,[r3]
 4452 01ca 0133     	 adds r3,r3,#1
 4453 01cc 084A     	 ldr r2,.L262
 4454 01ce 1360     	 str r3,[r2]
1158:../cleanflight/src/main/blackbox/blackbox.c ****         xmitState.u.fieldIndex = -1;
 4455              	 .loc 16 1158 0
 4456 01d0 074B     	 ldr r3,.L262
 4457 01d2 4FF0FF32 	 mov r2,#-1
 4458 01d6 5A60     	 str r2,[r3,#4]
 4459              	.L261:
1159:../cleanflight/src/main/blackbox/blackbox.c ****     }
1160:../cleanflight/src/main/blackbox/blackbox.c **** 
1161:../cleanflight/src/main/blackbox/blackbox.c ****     return xmitState.headerIndex < headerCount;
 4460              	 .loc 16 1161 0
 4461 01d8 054B     	 ldr r3,.L262
 4462 01da 1A68     	 ldr r2,[r3]
 4463 01dc FB6A     	 ldr r3,[r7,#44]
 4464 01de 9A42     	 cmp r2,r3
 4465 01e0 34BF     	 ite cc
 4466 01e2 0123     	 movcc r3,#1
 4467 01e4 0023     	 movcs r3,#0
 4468 01e6 DBB2     	 uxtb r3,r3
 4469              	.L246:
1162:../cleanflight/src/main/blackbox/blackbox.c **** }
 4470              	 .loc 16 1162 0
 4471 01e8 1846     	 mov r0,r3
 4472 01ea 3037     	 adds r7,r7,#48
 4473              	.LCFI171:
 4474              	 .cfi_def_cfa_offset 8
 4475 01ec BD46     	 mov sp,r7
 4476              	.LCFI172:
 4477              	 .cfi_def_cfa_register 13
 4478              	 
 4479 01ee 80BD     	 pop {r7,pc}
 4480              	.L263:
 4481              	 .align 2
 4482              	.L262:
 4483 01f0 00000000 	 .word xmitState
 4484 01f4 00000000 	 .word blackboxFieldHeaderNames
 4485 01f8 78010000 	 .word .LC32
 4486 01fc 00000000 	 .word blackboxHeaderBudget
 4487 0200 00000000 	 .word needComma.15784
 4488 0204 88010000 	 .word .LC33
 4489 0208 90010000 	 .word .LC34
 4490              	 .cfi_endproc
 4491              	.LFE630:
 4493              	 .section .text.blackboxGetStartDateTime,"ax",%progbits
 4494              	 .align 2
 4495              	 .thumb
 4496              	 .thumb_func
 4498              	blackboxGetStartDateTime:
 4499              	.LFB631:
1163:../cleanflight/src/main/blackbox/blackbox.c **** 
1164:../cleanflight/src/main/blackbox/blackbox.c **** // Buf must be at least FORMATTED_DATE_TIME_BUFSIZE
1165:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED char *blackboxGetStartDateTime(char *buf)
1166:../cleanflight/src/main/blackbox/blackbox.c **** {
 4500              	 .loc 16 1166 0
 4501              	 .cfi_startproc
 4502              	 
 4503              	 
 4504 0000 80B5     	 push {r7,lr}
 4505              	.LCFI173:
 4506              	 .cfi_def_cfa_offset 8
 4507              	 .cfi_offset 7,-8
 4508              	 .cfi_offset 14,-4
 4509 0002 86B0     	 sub sp,sp,#24
 4510              	.LCFI174:
 4511              	 .cfi_def_cfa_offset 32
 4512 0004 00AF     	 add r7,sp,#0
 4513              	.LCFI175:
 4514              	 .cfi_def_cfa_register 7
 4515 0006 7860     	 str r0,[r7,#4]
1167:../cleanflight/src/main/blackbox/blackbox.c ****     #ifdef USE_RTC_TIME
1168:../cleanflight/src/main/blackbox/blackbox.c ****     dateTime_t dt;
1169:../cleanflight/src/main/blackbox/blackbox.c ****     // rtcGetDateTime will fill dt with 0000-01-01T00:00:00
1170:../cleanflight/src/main/blackbox/blackbox.c ****     // when time is not known.
1171:../cleanflight/src/main/blackbox/blackbox.c ****     rtcGetDateTime(&dt);
 4516              	 .loc 16 1171 0
 4517 0008 07F10C03 	 add r3,r7,#12
 4518 000c 1846     	 mov r0,r3
 4519 000e FFF7FEFF 	 bl rtcGetDateTime
1172:../cleanflight/src/main/blackbox/blackbox.c ****     dateTimeFormatLocal(buf, &dt);
 4520              	 .loc 16 1172 0
 4521 0012 07F10C03 	 add r3,r7,#12
 4522 0016 7868     	 ldr r0,[r7,#4]
 4523 0018 1946     	 mov r1,r3
 4524 001a FFF7FEFF 	 bl dateTimeFormatLocal
1173:../cleanflight/src/main/blackbox/blackbox.c ****     #else
1174:../cleanflight/src/main/blackbox/blackbox.c ****     buf = "0000-01-01T00:00:00.000";
1175:../cleanflight/src/main/blackbox/blackbox.c ****     #endif
1176:../cleanflight/src/main/blackbox/blackbox.c **** 
1177:../cleanflight/src/main/blackbox/blackbox.c ****     return buf;
 4525              	 .loc 16 1177 0
 4526 001e 7B68     	 ldr r3,[r7,#4]
1178:../cleanflight/src/main/blackbox/blackbox.c **** }
 4527              	 .loc 16 1178 0
 4528 0020 1846     	 mov r0,r3
 4529 0022 1837     	 adds r7,r7,#24
 4530              	.LCFI176:
 4531              	 .cfi_def_cfa_offset 8
 4532 0024 BD46     	 mov sp,r7
 4533              	.LCFI177:
 4534              	 .cfi_def_cfa_register 13
 4535              	 
 4536 0026 80BD     	 pop {r7,pc}
 4537              	 .cfi_endproc
 4538              	.LFE631:
 4540              	 .section .rodata
 4541 0193 00       	 .align 2
 4542              	.LC35:
 4543 0194 4669726D 	 .ascii "Firmware type\000"
 4543      77617265 
 4543      20747970 
 4543      6500
 4544 01a2 0000     	 .align 2
 4545              	.LC36:
 4546 01a4 257300   	 .ascii "%s\000"
 4547 01a7 00       	 .align 2
 4548              	.LC37:
 4549 01a8 436C6561 	 .ascii "Cleanflight\000"
 4549      6E666C69 
 4549      67687400 
 4550              	 .align 2
 4551              	.LC38:
 4552 01b4 4669726D 	 .ascii "Firmware revision\000"
 4552      77617265 
 4552      20726576 
 4552      6973696F 
 4552      6E00
 4553 01c6 0000     	 .align 2
 4554              	.LC39:
 4555 01c8 25732025 	 .ascii "%s %s (%s) %s\000"
 4555      73202825 
 4555      73292025 
 4555      7300
 4556 01d6 0000     	 .align 2
 4557              	.LC40:
 4558 01d8 322E352E 	 .ascii "2.5.0\000"
 4558      3000
 4559 01de 0000     	 .align 2
 4560              	.LC41:
 4561 01e0 4669726D 	 .ascii "Firmware date\000"
 4561      77617265 
 4561      20646174 
 4561      6500
 4562 01ee 0000     	 .align 2
 4563              	.LC42:
 4564 01f0 25732025 	 .ascii "%s %s\000"
 4564      7300
 4565 01f6 0000     	 .align 2
 4566              	.LC43:
 4567 01f8 4C6F6720 	 .ascii "Log start datetime\000"
 4567      73746172 
 4567      74206461 
 4567      74657469 
 4567      6D6500
 4568 020b 00       	 .align 2
 4569              	.LC44:
 4570 020c 43726166 	 .ascii "Craft name\000"
 4570      74206E61 
 4570      6D6500
 4571 0217 00       	 .align 2
 4572              	.LC45:
 4573 0218 4920696E 	 .ascii "I interval\000"
 4573      74657276 
 4573      616C00
 4574 0223 00       	 .align 2
 4575              	.LC46:
 4576 0224 5020696E 	 .ascii "P interval\000"
 4576      74657276 
 4576      616C00
 4577 022f 00       	 .align 2
 4578              	.LC47:
 4579 0230 50207261 	 .ascii "P ratio\000"
 4579      74696F00 
 4580              	 .align 2
 4581              	.LC48:
 4582 0238 6D696E74 	 .ascii "minthrottle\000"
 4582      68726F74 
 4582      746C6500 
 4583              	 .align 2
 4584              	.LC49:
 4585 0244 6D617874 	 .ascii "maxthrottle\000"
 4585      68726F74 
 4585      746C6500 
 4586              	 .align 2
 4587              	.LC50:
 4588 0250 6779726F 	 .ascii "gyro_scale\000"
 4588      5F736361 
 4588      6C6500
 4589 025b 00       	 .align 2
 4590              	.LC51:
 4591 025c 30782578 	 .ascii "0x%x\000"
 4591      00
 4592 0261 000000   	 .align 2
 4593              	.LC52:
 4594 0264 6D6F746F 	 .ascii "motorOutput\000"
 4594      724F7574 
 4594      70757400 
 4595              	 .align 2
 4596              	.LC53:
 4597 0270 25642C25 	 .ascii "%d,%d\000"
 4597      6400
 4598 0276 0000     	 .align 2
 4599              	.LC54:
 4600 0278 6163635F 	 .ascii "acc_1G\000"
 4600      314700
 4601 027f 00       	 .align 2
 4602              	.LC55:
 4603 0280 257500   	 .ascii "%u\000"
 4604 0283 00       	 .align 2
 4605              	.LC56:
 4606 0284 76626174 	 .ascii "vbat_scale\000"
 4606      5F736361 
 4606      6C6500
 4607 028f 00       	 .align 2
 4608              	.LC57:
 4609 0290 76626174 	 .ascii "vbatcellvoltage\000"
 4609      63656C6C 
 4609      766F6C74 
 4609      61676500 
 4610              	 .align 2
 4611              	.LC58:
 4612 02a0 25752C25 	 .ascii "%u,%u,%u\000"
 4612      752C2575 
 4612      00
 4613 02a9 000000   	 .align 2
 4614              	.LC59:
 4615 02ac 76626174 	 .ascii "vbatref\000"
 4615      72656600 
 4616              	 .align 2
 4617              	.LC60:
 4618 02b4 63757272 	 .ascii "currentSensor\000"
 4618      656E7453 
 4618      656E736F 
 4618      7200
 4619 02c2 0000     	 .align 2
 4620              	.LC61:
 4621 02c4 6C6F6F70 	 .ascii "looptime\000"
 4621      74696D65 
 4621      00
 4622 02cd 000000   	 .align 2
 4623              	.LC62:
 4624 02d0 6779726F 	 .ascii "gyro_sync_denom\000"
 4624      5F73796E 
 4624      635F6465 
 4624      6E6F6D00 
 4625              	 .align 2
 4626              	.LC63:
 4627 02e0 7069645F 	 .ascii "pid_process_denom\000"
 4627      70726F63 
 4627      6573735F 
 4627      64656E6F 
 4627      6D00
 4628 02f2 0000     	 .align 2
 4629              	.LC64:
 4630 02f4 7468725F 	 .ascii "thr_mid\000"
 4630      6D696400 
 4631              	 .align 2
 4632              	.LC65:
 4633 02fc 7468725F 	 .ascii "thr_expo\000"
 4633      6578706F 
 4633      00
 4634 0305 000000   	 .align 2
 4635              	.LC66:
 4636 0308 7470615F 	 .ascii "tpa_rate\000"
 4636      72617465 
 4636      00
 4637 0311 000000   	 .align 2
 4638              	.LC67:
 4639 0314 7470615F 	 .ascii "tpa_breakpoint\000"
 4639      62726561 
 4639      6B706F69 
 4639      6E7400
 4640 0323 00       	 .align 2
 4641              	.LC68:
 4642 0324 72635F72 	 .ascii "rc_rates\000"
 4642      61746573 
 4642      00
 4643 032d 000000   	 .align 2
 4644              	.LC69:
 4645 0330 25642C25 	 .ascii "%d,%d,%d\000"
 4645      642C2564 
 4645      00
 4646 0339 000000   	 .align 2
 4647              	.LC70:
 4648 033c 72635F65 	 .ascii "rc_expo\000"
 4648      78706F00 
 4649              	 .align 2
 4650              	.LC71:
 4651 0344 72617465 	 .ascii "rates\000"
 4651      7300
 4652 034a 0000     	 .align 2
 4653              	.LC72:
 4654 034c 726F6C6C 	 .ascii "rollPID\000"
 4654      50494400 
 4655              	 .align 2
 4656              	.LC73:
 4657 0354 70697463 	 .ascii "pitchPID\000"
 4657      68504944 
 4657      00
 4658 035d 000000   	 .align 2
 4659              	.LC74:
 4660 0360 79617750 	 .ascii "yawPID\000"
 4660      494400
 4661 0367 00       	 .align 2
 4662              	.LC75:
 4663 0368 6C657665 	 .ascii "levelPID\000"
 4663      6C504944 
 4663      00
 4664 0371 000000   	 .align 2
 4665              	.LC76:
 4666 0374 6D616750 	 .ascii "magPID\000"
 4666      494400
 4667 037b 00       	 .align 2
 4668              	.LC77:
 4669 037c 64746572 	 .ascii "dterm_filter_type\000"
 4669      6D5F6669 
 4669      6C746572 
 4669      5F747970 
 4669      6500
 4670 038e 0000     	 .align 2
 4671              	.LC78:
 4672 0390 64746572 	 .ascii "dterm_lowpass_hz\000"
 4672      6D5F6C6F 
 4672      77706173 
 4672      735F687A 
 4672      00
 4673 03a1 000000   	 .align 2
 4674              	.LC79:
 4675 03a4 64746572 	 .ascii "dterm_lowpass2_hz\000"
 4675      6D5F6C6F 
 4675      77706173 
 4675      73325F68 
 4675      7A00
 4676 03b6 0000     	 .align 2
 4677              	.LC80:
 4678 03b8 7961775F 	 .ascii "yaw_lowpass_hz\000"
 4678      6C6F7770 
 4678      6173735F 
 4678      687A00
 4679 03c7 00       	 .align 2
 4680              	.LC81:
 4681 03c8 64746572 	 .ascii "dterm_notch_hz\000"
 4681      6D5F6E6F 
 4681      7463685F 
 4681      687A00
 4682 03d7 00       	 .align 2
 4683              	.LC82:
 4684 03d8 64746572 	 .ascii "dterm_notch_cutoff\000"
 4684      6D5F6E6F 
 4684      7463685F 
 4684      6375746F 
 4684      666600
 4685 03eb 00       	 .align 2
 4686              	.LC83:
 4687 03ec 69746572 	 .ascii "iterm_windup\000"
 4687      6D5F7769 
 4687      6E647570 
 4687      00
 4688 03f9 000000   	 .align 2
 4689              	.LC84:
 4690 03fc 76626174 	 .ascii "vbat_pid_gain\000"
 4690      5F706964 
 4690      5F676169 
 4690      6E00
 4691 040a 0000     	 .align 2
 4692              	.LC85:
 4693 040c 70696441 	 .ascii "pidAtMinThrottle\000"
 4693      744D696E 
 4693      5468726F 
 4693      74746C65 
 4693      00
 4694 041d 000000   	 .align 2
 4695              	.LC86:
 4696 0420 616E7469 	 .ascii "anti_gravity_mode\000"
 4696      5F677261 
 4696      76697479 
 4696      5F6D6F64 
 4696      6500
 4697 0432 0000     	 .align 2
 4698              	.LC87:
 4699 0434 616E7469 	 .ascii "anti_gravity_threshold\000"
 4699      5F677261 
 4699      76697479 
 4699      5F746872 
 4699      6573686F 
 4700 044b 00       	 .align 2
 4701              	.LC88:
 4702 044c 616E7469 	 .ascii "anti_gravity_gain\000"
 4702      5F677261 
 4702      76697479 
 4702      5F676169 
 4702      6E00
 4703 045e 0000     	 .align 2
 4704              	.LC89:
 4705 0460 66656564 	 .ascii "feedforward_transition\000"
 4705      666F7277 
 4705      6172645F 
 4705      7472616E 
 4705      73697469 
 4706 0477 00       	 .align 2
 4707              	.LC90:
 4708 0478 66656564 	 .ascii "feedforward_weight\000"
 4708      666F7277 
 4708      6172645F 
 4708      77656967 
 4708      687400
 4709 048b 00       	 .align 2
 4710              	.LC91:
 4711 048c 6163635F 	 .ascii "acc_limit_yaw\000"
 4711      6C696D69 
 4711      745F7961 
 4711      7700
 4712 049a 0000     	 .align 2
 4713              	.LC92:
 4714 049c 6163635F 	 .ascii "acc_limit\000"
 4714      6C696D69 
 4714      7400
 4715 04a6 0000     	 .align 2
 4716              	.LC93:
 4717 04a8 70696473 	 .ascii "pidsum_limit\000"
 4717      756D5F6C 
 4717      696D6974 
 4717      00
 4718 04b5 000000   	 .align 2
 4719              	.LC94:
 4720 04b8 70696473 	 .ascii "pidsum_limit_yaw\000"
 4720      756D5F6C 
 4720      696D6974 
 4720      5F796177 
 4720      00
 4721 04c9 000000   	 .align 2
 4722              	.LC95:
 4723 04cc 64656164 	 .ascii "deadband\000"
 4723      62616E64 
 4723      00
 4724 04d5 000000   	 .align 2
 4725              	.LC96:
 4726 04d8 7961775F 	 .ascii "yaw_deadband\000"
 4726      64656164 
 4726      62616E64 
 4726      00
 4727 04e5 000000   	 .align 2
 4728              	.LC97:
 4729 04e8 6779726F 	 .ascii "gyro_hardware_lpf\000"
 4729      5F686172 
 4729      64776172 
 4729      655F6C70 
 4729      6600
 4730 04fa 0000     	 .align 2
 4731              	.LC98:
 4732 04fc 6779726F 	 .ascii "gyro_lowpass_type\000"
 4732      5F6C6F77 
 4732      70617373 
 4732      5F747970 
 4732      6500
 4733 050e 0000     	 .align 2
 4734              	.LC99:
 4735 0510 6779726F 	 .ascii "gyro_lowpass_hz\000"
 4735      5F6C6F77 
 4735      70617373 
 4735      5F687A00 
 4736              	 .align 2
 4737              	.LC100:
 4738 0520 6779726F 	 .ascii "gyro_lowpass2_type\000"
 4738      5F6C6F77 
 4738      70617373 
 4738      325F7479 
 4738      706500
 4739 0533 00       	 .align 2
 4740              	.LC101:
 4741 0534 6779726F 	 .ascii "gyro_lowpass2_hz\000"
 4741      5F6C6F77 
 4741      70617373 
 4741      325F687A 
 4741      00
 4742 0545 000000   	 .align 2
 4743              	.LC102:
 4744 0548 6779726F 	 .ascii "gyro_notch_hz\000"
 4744      5F6E6F74 
 4744      63685F68 
 4744      7A00
 4745 0556 0000     	 .align 2
 4746              	.LC103:
 4747 0558 6779726F 	 .ascii "gyro_notch_cutoff\000"
 4747      5F6E6F74 
 4747      63685F63 
 4747      75746F66 
 4747      6600
 4748 056a 0000     	 .align 2
 4749              	.LC104:
 4750 056c 6163635F 	 .ascii "acc_lpf_hz\000"
 4750      6C70665F 
 4750      687A00
 4751 0577 00       	 .align 2
 4752              	.LC105:
 4753 0578 6163635F 	 .ascii "acc_hardware\000"
 4753      68617264 
 4753      77617265 
 4753      00
 4754 0585 000000   	 .align 2
 4755              	.LC106:
 4756 0588 6261726F 	 .ascii "baro_hardware\000"
 4756      5F686172 
 4756      64776172 
 4756      6500
 4757 0596 0000     	 .align 2
 4758              	.LC107:
 4759 0598 6D61675F 	 .ascii "mag_hardware\000"
 4759      68617264 
 4759      77617265 
 4759      00
 4760 05a5 000000   	 .align 2
 4761              	.LC108:
 4762 05a8 6779726F 	 .ascii "gyro_cal_on_first_arm\000"
 4762      5F63616C 
 4762      5F6F6E5F 
 4762      66697273 
 4762      745F6172 
 4763 05be 0000     	 .align 2
 4764              	.LC109:
 4765 05c0 72635F69 	 .ascii "rc_interpolation\000"
 4765      6E746572 
 4765      706F6C61 
 4765      74696F6E 
 4765      00
 4766 05d1 000000   	 .align 2
 4767              	.LC110:
 4768 05d4 72635F69 	 .ascii "rc_interpolation_interval\000"
 4768      6E746572 
 4768      706F6C61 
 4768      74696F6E 
 4768      5F696E74 
 4769 05ee 0000     	 .align 2
 4770              	.LC111:
 4771 05f0 6169726D 	 .ascii "airmode_activate_throttle\000"
 4771      6F64655F 
 4771      61637469 
 4771      76617465 
 4771      5F746872 
 4772 060a 0000     	 .align 2
 4773              	.LC112:
 4774 060c 73657269 	 .ascii "serialrx_provider\000"
 4774      616C7278 
 4774      5F70726F 
 4774      76696465 
 4774      7200
 4775 061e 0000     	 .align 2
 4776              	.LC113:
 4777 0620 7573655F 	 .ascii "use_unsynced_pwm\000"
 4777      756E7379 
 4777      6E636564 
 4777      5F70776D 
 4777      00
 4778 0631 000000   	 .align 2
 4779              	.LC114:
 4780 0634 6D6F746F 	 .ascii "motor_pwm_protocol\000"
 4780      725F7077 
 4780      6D5F7072 
 4780      6F746F63 
 4780      6F6C00
 4781 0647 00       	 .align 2
 4782              	.LC115:
 4783 0648 6D6F746F 	 .ascii "motor_pwm_rate\000"
 4783      725F7077 
 4783      6D5F7261 
 4783      746500
 4784 0657 00       	 .align 2
 4785              	.LC116:
 4786 0658 6473686F 	 .ascii "dshot_idle_value\000"
 4786      745F6964 
 4786      6C655F76 
 4786      616C7565 
 4786      00
 4787 0669 000000   	 .align 2
 4788              	.LC117:
 4789 066c 64656275 	 .ascii "debug_mode\000"
 4789      675F6D6F 
 4789      646500
 4790 0677 00       	 .align 2
 4791              	.LC118:
 4792 0678 66656174 	 .ascii "features\000"
 4792      75726573 
 4792      00
 4793 0681 000000   	 .align 2
 4794              	.LC119:
 4795 0684 72635F73 	 .ascii "rc_smoothing_type\000"
 4795      6D6F6F74 
 4795      68696E67 
 4795      5F747970 
 4795      6500
 4796 0696 0000     	 .align 2
 4797              	.LC120:
 4798 0698 72635F73 	 .ascii "rc_smoothing_debug_axis\000"
 4798      6D6F6F74 
 4798      68696E67 
 4798      5F646562 
 4798      75675F61 
 4799              	 .align 2
 4800              	.LC121:
 4801 06b0 72635F73 	 .ascii "rc_smoothing_cutoffs\000"
 4801      6D6F6F74 
 4801      68696E67 
 4801      5F637574 
 4801      6F666673 
 4802 06c5 000000   	 .align 2
 4803              	.LC122:
 4804 06c8 25642C20 	 .ascii "%d, %d\000"
 4804      256400
 4805 06cf 00       	 .align 2
 4806              	.LC123:
 4807 06d0 72635F73 	 .ascii "rc_smoothing_filter_type\000"
 4807      6D6F6F74 
 4807      68696E67 
 4807      5F66696C 
 4807      7465725F 
 4808 06e9 000000   	 .align 2
 4809              	.LC124:
 4810 06ec 72635F73 	 .ascii "rc_smoothing_active_cutoffs\000"
 4810      6D6F6F74 
 4810      68696E67 
 4810      5F616374 
 4810      6976655F 
 4811              	 .align 2
 4812              	.LC125:
 4813 0708 72635F73 	 .ascii "rc_smoothing_rx_average\000"
 4813      6D6F6F74 
 4813      68696E67 
 4813      5F72785F 
 4813      61766572 
 4814              	 .section .text.blackboxWriteSysinfo,"ax",%progbits
 4815              	 .align 2
 4816              	 .thumb
 4817              	 .thumb_func
 4819              	blackboxWriteSysinfo:
 4820              	.LFB632:
1179:../cleanflight/src/main/blackbox/blackbox.c **** 
1180:../cleanflight/src/main/blackbox/blackbox.c **** #ifndef BLACKBOX_PRINT_HEADER_LINE
1181:../cleanflight/src/main/blackbox/blackbox.c **** #define BLACKBOX_PRINT_HEADER_LINE(name, format, ...) case __COUNTER__: \
1182:../cleanflight/src/main/blackbox/blackbox.c ****                                                 blackboxPrintfHeaderLine(name, format, __VA_ARGS__)
1183:../cleanflight/src/main/blackbox/blackbox.c ****                                                 break;
1184:../cleanflight/src/main/blackbox/blackbox.c **** #define BLACKBOX_PRINT_HEADER_LINE_CUSTOM(...) case __COUNTER__: \
1185:../cleanflight/src/main/blackbox/blackbox.c ****                                                     {__VA_ARGS__}; \
1186:../cleanflight/src/main/blackbox/blackbox.c ****                                                break;
1187:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1188:../cleanflight/src/main/blackbox/blackbox.c **** 
1189:../cleanflight/src/main/blackbox/blackbox.c **** /**
1190:../cleanflight/src/main/blackbox/blackbox.c ****  * Transmit a portion of the system information headers. Call the first time with xmitState.headerI
1191:../cleanflight/src/main/blackbox/blackbox.c ****  * true iff transmission is complete, otherwise call again later to continue transmission.
1192:../cleanflight/src/main/blackbox/blackbox.c ****  */
1193:../cleanflight/src/main/blackbox/blackbox.c **** static bool blackboxWriteSysinfo(void)
1194:../cleanflight/src/main/blackbox/blackbox.c **** {
 4821              	 .loc 16 1194 0
 4822              	 .cfi_startproc
 4823              	 
 4824              	 
 4825 0000 B0B5     	 push {r4,r5,r7,lr}
 4826              	.LCFI178:
 4827              	 .cfi_def_cfa_offset 16
 4828              	 .cfi_offset 4,-16
 4829              	 .cfi_offset 5,-12
 4830              	 .cfi_offset 7,-8
 4831              	 .cfi_offset 14,-4
 4832 0002 8CB0     	 sub sp,sp,#48
 4833              	.LCFI179:
 4834              	 .cfi_def_cfa_offset 64
 4835 0004 02AF     	 add r7,sp,#8
 4836              	.LCFI180:
 4837              	 .cfi_def_cfa 7,56
1195:../cleanflight/src/main/blackbox/blackbox.c **** #ifndef UNIT_TEST
1196:../cleanflight/src/main/blackbox/blackbox.c ****     const uint16_t motorOutputLowInt = lrintf(motorOutputLow);
 4838              	 .loc 16 1196 0
 4839 0006 C44B     	 ldr r3,.L356
 4840 0008 1B68     	 ldr r3,[r3]
 4841 000a 1846     	 mov r0,r3
 4842 000c FFF7FEFF 	 bl lrintf
 4843 0010 0346     	 mov r3,r0
 4844 0012 FB84     	 strh r3,[r7,#38]
1197:../cleanflight/src/main/blackbox/blackbox.c ****     const uint16_t motorOutputHighInt = lrintf(motorOutputHigh);
 4845              	 .loc 16 1197 0
 4846 0014 C14B     	 ldr r3,.L356+4
 4847 0016 1B68     	 ldr r3,[r3]
 4848 0018 1846     	 mov r0,r3
 4849 001a FFF7FEFF 	 bl lrintf
 4850 001e 0346     	 mov r3,r0
 4851 0020 BB84     	 strh r3,[r7,#36]
1198:../cleanflight/src/main/blackbox/blackbox.c **** 
1199:../cleanflight/src/main/blackbox/blackbox.c ****     // Make sure we have enough room in the buffer for our longest line (as of this writing, the "F
1200:../cleanflight/src/main/blackbox/blackbox.c ****     if (blackboxDeviceReserveBufferSpace(64) != BLACKBOX_RESERVE_SUCCESS) {
 4852              	 .loc 16 1200 0
 4853 0022 4020     	 movs r0,#64
 4854 0024 FFF7FEFF 	 bl blackboxDeviceReserveBufferSpace
 4855 0028 0346     	 mov r3,r0
 4856 002a 002B     	 cmp r3,#0
 4857 002c 02D0     	 beq .L267
1201:../cleanflight/src/main/blackbox/blackbox.c ****         return false;
 4858              	 .loc 16 1201 0
 4859 002e 0023     	 movs r3,#0
 4860 0030 00F047BD 	 b .L355
 4861              	.L267:
1202:../cleanflight/src/main/blackbox/blackbox.c ****     }
1203:../cleanflight/src/main/blackbox/blackbox.c **** 
1204:../cleanflight/src/main/blackbox/blackbox.c ****     char buf[FORMATTED_DATE_TIME_BUFSIZE];
1205:../cleanflight/src/main/blackbox/blackbox.c **** 
1206:../cleanflight/src/main/blackbox/blackbox.c ****     const controlRateConfig_t *currentControlRateProfile = controlRateProfiles(systemConfig()->acti
 4862              	 .loc 16 1206 0
 4863 0034 FFF7FEFF 	 bl systemConfig
 4864 0038 0346     	 mov r3,r0
 4865 003a 5B78     	 ldrb r3,[r3,#1]
 4866 003c 1846     	 mov r0,r3
 4867 003e FFF7FEFF 	 bl controlRateProfiles
 4868 0042 3862     	 str r0,[r7,#32]
1207:../cleanflight/src/main/blackbox/blackbox.c ****     switch (xmitState.headerIndex) {
 4869              	 .loc 16 1207 0
 4870 0044 B64B     	 ldr r3,.L356+8
 4871 0046 1B68     	 ldr r3,[r3]
 4872 0048 4F2B     	 cmp r3,#79
 4873 004a 00F23285 	 bhi .L269
 4874 004e 01A2     	 adr r2,.L271
 4875 0050 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 4876              	 .p2align 2
 4877              	.L271:
 4878 0054 95010000 	 .word .L270+1
 4879 0058 A3010000 	 .word .L272+1
 4880 005c BF010000 	 .word .L273+1
 4881 0060 D3010000 	 .word .L274+1
 4882 0064 EB010000 	 .word .L275+1
 4883 0068 FF010000 	 .word .L276+1
 4884 006c 13020000 	 .word .L277+1
 4885 0070 27020000 	 .word .L278+1
 4886 0074 3F020000 	 .word .L279+1
 4887 0078 57020000 	 .word .L280+1
 4888 007c 6F020000 	 .word .L281+1
 4889 0080 87020000 	 .word .L282+1
 4890 0084 97020000 	 .word .L283+1
 4891 0088 AD020000 	 .word .L284+1
 4892 008c DB020000 	 .word .L285+1
 4893 0090 07030000 	 .word .L286+1
 4894 0094 AD030000 	 .word .L287+1
 4895 0098 E3030000 	 .word .L288+1
 4896 009c F3030000 	 .word .L289+1
 4897 00a0 07040000 	 .word .L290+1
 4898 00a4 1B040000 	 .word .L291+1
 4899 00a8 2B040000 	 .word .L292+1
 4900 00ac 3B040000 	 .word .L293+1
 4901 00b0 4B040000 	 .word .L294+1
 4902 00b4 5F040000 	 .word .L295+1
 4903 00b8 7D040000 	 .word .L296+1
 4904 00bc 9B040000 	 .word .L297+1
 4905 00c0 B9040000 	 .word .L298+1
 4906 00c4 DD040000 	 .word .L299+1
 4907 00c8 01050000 	 .word .L300+1
 4908 00cc 25050000 	 .word .L301+1
 4909 00d0 49050000 	 .word .L302+1
 4910 00d4 5B050000 	 .word .L303+1
 4911 00d8 6F050000 	 .word .L304+1
 4912 00dc 83050000 	 .word .L305+1
 4913 00e0 99050000 	 .word .L306+1
 4914 00e4 AD050000 	 .word .L307+1
 4915 00e8 C1050000 	 .word .L308+1
 4916 00ec D5050000 	 .word .L309+1
 4917 00f0 E9050000 	 .word .L310+1
 4918 00f4 FD050000 	 .word .L311+1
 4919 00f8 11060000 	 .word .L312+1
 4920 00fc 25060000 	 .word .L313+1
 4921 0100 39060000 	 .word .L314+1
 4922 0104 D1060000 	 .word .L315+1
 4923 0108 E5060000 	 .word .L316+1
 4924 010c 13070000 	 .word .L317+1
 4925 0110 27070000 	 .word .L318+1
 4926 0114 3B070000 	 .word .L319+1
 4927 0118 51070000 	 .word .L320+1
 4928 011c 67070000 	 .word .L321+1
 4929 0120 7B070000 	 .word .L322+1
 4930 0124 8F070000 	 .word .L323+1
 4931 0128 A3070000 	 .word .L324+1
 4932 012c B7070000 	 .word .L325+1
 4933 0130 CD070000 	 .word .L326+1
 4934 0134 E1070000 	 .word .L327+1
 4935 0138 F7070000 	 .word .L328+1
 4936 013c 19080000 	 .word .L329+1
 4937 0140 3B080000 	 .word .L330+1
 4938 0144 67080000 	 .word .L331+1
 4939 0148 7B080000 	 .word .L332+1
 4940 014c 8F080000 	 .word .L333+1
 4941 0150 A3080000 	 .word .L334+1
 4942 0154 B7080000 	 .word .L335+1
 4943 0158 CB080000 	 .word .L336+1
 4944 015c DF080000 	 .word .L337+1
 4945 0160 F3080000 	 .word .L338+1
 4946 0164 07090000 	 .word .L339+1
 4947 0168 1B090000 	 .word .L340+1
 4948 016c 2F090000 	 .word .L341+1
 4949 0170 45090000 	 .word .L342+1
 4950 0174 5B090000 	 .word .L343+1
 4951 0178 6F090000 	 .word .L344+1
 4952 017c 83090000 	 .word .L345+1
 4953 0180 290A0000 	 .word .L346+1
 4954 0184 3F0A0000 	 .word .L347+1
 4955 0188 610A0000 	 .word .L348+1
 4956 018c 830A0000 	 .word .L349+1
 4957 0190 9F0A0000 	 .word .L350+1
 4958              	 .p2align 1
 4959              	.L270:
1208:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("Firmware type", "%s",                   "Cleanflight");
 4960              	 .loc 16 1208 0
 4961 0194 6348     	 ldr r0,.L356+12
 4962 0196 6449     	 ldr r1,.L356+16
 4963 0198 644A     	 ldr r2,.L356+20
 4964 019a FFF7FEFF 	 bl blackboxPrintfHeaderLine
 4965 019e 00F08ABC 	 b .L351
 4966              	.L272:
1209:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("Firmware revision", "%s %s (%s) %s",    FC_FIRMWARE_NAME, FC_VE
 4967              	 .loc 16 1209 0
 4968 01a2 634B     	 ldr r3,.L356+24
 4969 01a4 1A68     	 ldr r2,[r3]
 4970 01a6 634B     	 ldr r3,.L356+28
 4971 01a8 1B68     	 ldr r3,[r3]
 4972 01aa 0092     	 str r2,[sp]
 4973 01ac 0193     	 str r3,[sp,#4]
 4974 01ae 6248     	 ldr r0,.L356+32
 4975 01b0 6249     	 ldr r1,.L356+36
 4976 01b2 5E4A     	 ldr r2,.L356+20
 4977 01b4 624B     	 ldr r3,.L356+40
 4978 01b6 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 4979 01ba 00F07CBC 	 b .L351
 4980              	.L273:
1210:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("Firmware date", "%s %s",                buildDate, buildTime);
 4981              	 .loc 16 1210 0
 4982 01be 614B     	 ldr r3,.L356+44
 4983 01c0 1A68     	 ldr r2,[r3]
 4984 01c2 614B     	 ldr r3,.L356+48
 4985 01c4 1B68     	 ldr r3,[r3]
 4986 01c6 6148     	 ldr r0,.L356+52
 4987 01c8 6149     	 ldr r1,.L356+56
 4988 01ca FFF7FEFF 	 bl blackboxPrintfHeaderLine
 4989 01ce 00F072BC 	 b .L351
 4990              	.L274:
1211:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("Log start datetime", "%s",              blackboxGetStartDateTim
 4991              	 .loc 16 1211 0
 4992 01d2 3B46     	 mov r3,r7
 4993 01d4 1846     	 mov r0,r3
 4994 01d6 FFF7FEFF 	 bl blackboxGetStartDateTime
 4995 01da 0346     	 mov r3,r0
 4996 01dc 5D48     	 ldr r0,.L356+60
 4997 01de 5249     	 ldr r1,.L356+16
 4998 01e0 1A46     	 mov r2,r3
 4999 01e2 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5000 01e6 00F066BC 	 b .L351
 5001              	.L275:
1212:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("Craft name", "%s",                      pilotConfig()->name);
 5002              	 .loc 16 1212 0
 5003 01ea FFF7FEFF 	 bl pilotConfig
 5004 01ee 0346     	 mov r3,r0
 5005 01f0 5948     	 ldr r0,.L356+64
 5006 01f2 4D49     	 ldr r1,.L356+16
 5007 01f4 1A46     	 mov r2,r3
 5008 01f6 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5009 01fa 00F05CBC 	 b .L351
 5010              	.L276:
1213:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("I interval", "%d",                      blackboxIInterval);
 5011              	 .loc 16 1213 0
 5012 01fe 574B     	 ldr r3,.L356+68
 5013 0200 1B88     	 ldrh r3,[r3]
 5014 0202 1BB2     	 sxth r3,r3
 5015 0204 5648     	 ldr r0,.L356+72
 5016 0206 5749     	 ldr r1,.L356+76
 5017 0208 1A46     	 mov r2,r3
 5018 020a FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5019 020e 00F052BC 	 b .L351
 5020              	.L277:
1214:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("P interval", "%d",                      blackboxPInterval);
 5021              	 .loc 16 1214 0
 5022 0212 554B     	 ldr r3,.L356+80
 5023 0214 1B88     	 ldrh r3,[r3]
 5024 0216 1BB2     	 sxth r3,r3
 5025 0218 5448     	 ldr r0,.L356+84
 5026 021a 5249     	 ldr r1,.L356+76
 5027 021c 1A46     	 mov r2,r3
 5028 021e FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5029 0222 00F048BC 	 b .L351
 5030              	.L278:
1215:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("P ratio", "%d",                         blackboxConfig()->p_rat
 5031              	 .loc 16 1215 0
 5032 0226 FFF7FEFF 	 bl blackboxConfig
 5033 022a 0346     	 mov r3,r0
 5034 022c 1B88     	 ldrh r3,[r3]
 5035 022e 9BB2     	 uxth r3,r3
 5036 0230 4F48     	 ldr r0,.L356+88
 5037 0232 4C49     	 ldr r1,.L356+76
 5038 0234 1A46     	 mov r2,r3
 5039 0236 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5040 023a 00F03CBC 	 b .L351
 5041              	.L279:
1216:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("minthrottle", "%d",                     motorConfig()->minthrot
 5042              	 .loc 16 1216 0
 5043 023e FFF7FEFF 	 bl motorConfig
 5044 0242 0346     	 mov r3,r0
 5045 0244 1B8A     	 ldrh r3,[r3,#16]
 5046 0246 9BB2     	 uxth r3,r3
 5047 0248 4A48     	 ldr r0,.L356+92
 5048 024a 4649     	 ldr r1,.L356+76
 5049 024c 1A46     	 mov r2,r3
 5050 024e FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5051 0252 00F030BC 	 b .L351
 5052              	.L280:
1217:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("maxthrottle", "%d",                     motorConfig()->maxthrot
 5053              	 .loc 16 1217 0
 5054 0256 FFF7FEFF 	 bl motorConfig
 5055 025a 0346     	 mov r3,r0
 5056 025c 5B8A     	 ldrh r3,[r3,#18]
 5057 025e 9BB2     	 uxth r3,r3
 5058 0260 4548     	 ldr r0,.L356+96
 5059 0262 4049     	 ldr r1,.L356+76
 5060 0264 1A46     	 mov r2,r3
 5061 0266 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5062 026a 00F024BC 	 b .L351
 5063              	.L281:
1218:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_scale","0x%x",                     castFloatBytesToInt(1.0
 5064              	 .loc 16 1218 0
 5065 026e 4FF07E50 	 mov r0,#1065353216
 5066 0272 FFF7FEFF 	 bl castFloatBytesToInt
 5067 0276 0346     	 mov r3,r0
 5068 0278 4048     	 ldr r0,.L356+100
 5069 027a 4149     	 ldr r1,.L356+104
 5070 027c 1A46     	 mov r2,r3
 5071 027e FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5072 0282 00F018BC 	 b .L351
 5073              	.L282:
1219:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("motorOutput", "%d,%d",                  motorOutputLowInt,motor
 5074              	 .loc 16 1219 0
 5075 0286 FA8C     	 ldrh r2,[r7,#38]
 5076 0288 BB8C     	 ldrh r3,[r7,#36]
 5077 028a 3E48     	 ldr r0,.L356+108
 5078 028c 3E49     	 ldr r1,.L356+112
 5079 028e FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5080 0292 00F010BC 	 b .L351
 5081              	.L283:
1220:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("acc_1G", "%u",                          acc.dev.acc_1G);
 5082              	 .loc 16 1220 0
 5083 0296 3D4B     	 ldr r3,.L356+116
 5084 0298 B3F81130 	 ldrh r3,[r3,#17]
 5085 029c 9BB2     	 uxth r3,r3
 5086 029e 3C48     	 ldr r0,.L356+120
 5087 02a0 3C49     	 ldr r1,.L356+124
 5088 02a2 1A46     	 mov r2,r3
 5089 02a4 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5090 02a8 00F005BC 	 b .L351
 5091              	.L284:
1221:../cleanflight/src/main/blackbox/blackbox.c **** 
1222:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE_CUSTOM(
 5092              	 .loc 16 1222 0
 5093 02ac 0C20     	 movs r0,#12
 5094 02ae FFF7FEFF 	 bl testBlackboxCondition
 5095 02b2 0346     	 mov r3,r0
 5096 02b4 002B     	 cmp r3,#0
 5097 02b6 0AD0     	 beq .L352
 5098              	 .loc 16 1222 0 is_stmt 0 discriminator 1
 5099 02b8 0020     	 movs r0,#0
 5100 02ba FFF7FEFF 	 bl voltageSensorADCConfig
 5101 02be 0346     	 mov r3,r0
 5102 02c0 1B78     	 ldrb r3,[r3]
 5103 02c2 3548     	 ldr r0,.L356+128
 5104 02c4 3349     	 ldr r1,.L356+124
 5105 02c6 1A46     	 mov r2,r3
 5106 02c8 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5107 02cc F3E3     	 b .L351
 5108              	.L352:
 5109              	 .loc 16 1222 0 discriminator 2
 5110 02ce 144B     	 ldr r3,.L356+8
 5111 02d0 1B68     	 ldr r3,[r3]
 5112 02d2 0233     	 adds r3,r3,#2
 5113 02d4 124A     	 ldr r2,.L356+8
 5114 02d6 1360     	 str r3,[r2]
 5115 02d8 EDE3     	 b .L351
 5116              	.L285:
1223:../cleanflight/src/main/blackbox/blackbox.c ****             if (testBlackboxCondition(FLIGHT_LOG_FIELD_CONDITION_VBAT)) {
1224:../cleanflight/src/main/blackbox/blackbox.c ****                 blackboxPrintfHeaderLine("vbat_scale", "%u", voltageSensorADCConfig(VOLTAGE_SENSOR_
1225:../cleanflight/src/main/blackbox/blackbox.c ****             } else {
1226:../cleanflight/src/main/blackbox/blackbox.c ****                 xmitState.headerIndex += 2; // Skip the next two vbat fields too
1227:../cleanflight/src/main/blackbox/blackbox.c ****             }
1228:../cleanflight/src/main/blackbox/blackbox.c ****             );
1229:../cleanflight/src/main/blackbox/blackbox.c **** 
1230:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("vbatcellvoltage", "%u,%u,%u",           batteryConfig()->vbatmi
 5117              	 .loc 16 1230 0 is_stmt 1
 5118 02da FFF7FEFF 	 bl batteryConfig
 5119 02de 0346     	 mov r3,r0
 5120 02e0 5B78     	 ldrb r3,[r3,#1]
 5121 02e2 1D46     	 mov r5,r3
 5122 02e4 FFF7FEFF 	 bl batteryConfig
 5123 02e8 0346     	 mov r3,r0
 5124 02ea 9B78     	 ldrb r3,[r3,#2]
 5125 02ec 1C46     	 mov r4,r3
 5126 02ee FFF7FEFF 	 bl batteryConfig
 5127 02f2 0346     	 mov r3,r0
 5128 02f4 1B78     	 ldrb r3,[r3]
 5129 02f6 0093     	 str r3,[sp]
 5130 02f8 2848     	 ldr r0,.L356+132
 5131 02fa 2949     	 ldr r1,.L356+136
 5132 02fc 2A46     	 mov r2,r5
 5133 02fe 2346     	 mov r3,r4
 5134 0300 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5135 0304 D7E3     	 b .L351
 5136              	.L286:
1231:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             batteryConfig()->vbatwa
1232:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             batteryConfig()->vbatma
1233:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("vbatref", "%u",                         vbatReference);
 5137              	 .loc 16 1233 0
 5138 0306 274B     	 ldr r3,.L356+140
 5139 0308 1B88     	 ldrh r3,[r3]
 5140 030a 2748     	 ldr r0,.L356+144
 5141 030c 2149     	 ldr r1,.L356+124
 5142 030e 1A46     	 mov r2,r3
 5143 0310 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5144 0314 CFE3     	 b .L351
 5145              	.L357:
 5146 0316 00BF     	 .align 2
 5147              	.L356:
 5148 0318 00000000 	 .word motorOutputLow
 5149 031c 00000000 	 .word motorOutputHigh
 5150 0320 00000000 	 .word xmitState
 5151 0324 94010000 	 .word .LC35
 5152 0328 A4010000 	 .word .LC36
 5153 032c A8010000 	 .word .LC37
 5154 0330 00000000 	 .word shortGitRevision
 5155 0334 00000000 	 .word targetName
 5156 0338 B4010000 	 .word .LC38
 5157 033c C8010000 	 .word .LC39
 5158 0340 D8010000 	 .word .LC40
 5159 0344 00000000 	 .word buildDate
 5160 0348 00000000 	 .word buildTime
 5161 034c E0010000 	 .word .LC41
 5162 0350 F0010000 	 .word .LC42
 5163 0354 F8010000 	 .word .LC43
 5164 0358 0C020000 	 .word .LC44
 5165 035c 00000000 	 .word blackboxIInterval
 5166 0360 18020000 	 .word .LC45
 5167 0364 90010000 	 .word .LC34
 5168 0368 00000000 	 .word blackboxPInterval
 5169 036c 24020000 	 .word .LC46
 5170 0370 30020000 	 .word .LC47
 5171 0374 38020000 	 .word .LC48
 5172 0378 44020000 	 .word .LC49
 5173 037c 50020000 	 .word .LC50
 5174 0380 5C020000 	 .word .LC51
 5175 0384 64020000 	 .word .LC52
 5176 0388 70020000 	 .word .LC53
 5177 038c 00000000 	 .word acc
 5178 0390 78020000 	 .word .LC54
 5179 0394 80020000 	 .word .LC55
 5180 0398 84020000 	 .word .LC56
 5181 039c 90020000 	 .word .LC57
 5182 03a0 A0020000 	 .word .LC58
 5183 03a4 00000000 	 .word vbatReference
 5184 03a8 AC020000 	 .word .LC59
 5185              	.L287:
1234:../cleanflight/src/main/blackbox/blackbox.c **** 
1235:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE_CUSTOM(
 5186              	 .loc 16 1235 0
 5187 03ac FFF7FEFF 	 bl batteryConfig
 5188 03b0 0346     	 mov r3,r0
 5189 03b2 9B79     	 ldrb r3,[r3,#6]
 5190 03b4 012B     	 cmp r3,#1
 5191 03b6 13D1     	 bne .L354
 5192              	 .loc 16 1235 0 is_stmt 0 discriminator 1
 5193 03b8 FFF7FEFF 	 bl currentSensorADCConfig
 5194 03bc 0346     	 mov r3,r0
 5195 03be B3F90230 	 ldrsh r3,[r3,#2]
 5196 03c2 9BB2     	 uxth r3,r3
 5197 03c4 1CB2     	 sxth r4,r3
 5198 03c6 FFF7FEFF 	 bl currentSensorADCConfig
 5199 03ca 0346     	 mov r3,r0
 5200 03cc B3F90030 	 ldrsh r3,[r3]
 5201 03d0 9BB2     	 uxth r3,r3
 5202 03d2 1BB2     	 sxth r3,r3
 5203 03d4 9D48     	 ldr r0,.L358
 5204 03d6 9E49     	 ldr r1,.L358+4
 5205 03d8 2246     	 mov r2,r4
 5206 03da FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5207 03de 6AE3     	 b .L351
 5208              	.L354:
 5209              	 .loc 16 1235 0
 5210 03e0 69E3     	 b .L351
 5211              	.L288:
1236:../cleanflight/src/main/blackbox/blackbox.c ****             if (batteryConfig()->currentMeterSource == CURRENT_METER_ADC) {
1237:../cleanflight/src/main/blackbox/blackbox.c ****                 blackboxPrintfHeaderLine("currentSensor", "%d,%d",currentSensorADCConfig()->offset,
1238:../cleanflight/src/main/blackbox/blackbox.c ****             }
1239:../cleanflight/src/main/blackbox/blackbox.c ****             );
1240:../cleanflight/src/main/blackbox/blackbox.c **** 
1241:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("looptime", "%d",                        gyro.targetLooptime);
 5212              	 .loc 16 1241 0 is_stmt 1
 5213 03e2 9C4B     	 ldr r3,.L358+8
 5214 03e4 1B68     	 ldr r3,[r3]
 5215 03e6 9C48     	 ldr r0,.L358+12
 5216 03e8 9C49     	 ldr r1,.L358+16
 5217 03ea 1A46     	 mov r2,r3
 5218 03ec FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5219 03f0 61E3     	 b .L351
 5220              	.L289:
1242:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_sync_denom", "%d",                 gyroConfig()->gyro_sync
 5221              	 .loc 16 1242 0
 5222 03f2 FFF7FEFF 	 bl gyroConfig
 5223 03f6 0346     	 mov r3,r0
 5224 03f8 9B78     	 ldrb r3,[r3,#2]
 5225 03fa 9948     	 ldr r0,.L358+20
 5226 03fc 9749     	 ldr r1,.L358+16
 5227 03fe 1A46     	 mov r2,r3
 5228 0400 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5229 0404 57E3     	 b .L351
 5230              	.L290:
1243:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("pid_process_denom", "%d",               pidConfig()->pid_proces
 5231              	 .loc 16 1243 0
 5232 0406 FFF7FEFF 	 bl pidConfig
 5233 040a 0346     	 mov r3,r0
 5234 040c 1B78     	 ldrb r3,[r3]
 5235 040e 9548     	 ldr r0,.L358+24
 5236 0410 9249     	 ldr r1,.L358+16
 5237 0412 1A46     	 mov r2,r3
 5238 0414 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5239 0418 4DE3     	 b .L351
 5240              	.L291:
1244:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("thr_mid", "%d",                         currentControlRateProfi
 5241              	 .loc 16 1244 0
 5242 041a 3B6A     	 ldr r3,[r7,#32]
 5243 041c 1B78     	 ldrb r3,[r3]
 5244 041e 9248     	 ldr r0,.L358+28
 5245 0420 8E49     	 ldr r1,.L358+16
 5246 0422 1A46     	 mov r2,r3
 5247 0424 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5248 0428 45E3     	 b .L351
 5249              	.L292:
1245:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("thr_expo", "%d",                        currentControlRateProfi
 5250              	 .loc 16 1245 0
 5251 042a 3B6A     	 ldr r3,[r7,#32]
 5252 042c 5B78     	 ldrb r3,[r3,#1]
 5253 042e 8F48     	 ldr r0,.L358+32
 5254 0430 8A49     	 ldr r1,.L358+16
 5255 0432 1A46     	 mov r2,r3
 5256 0434 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5257 0438 3DE3     	 b .L351
 5258              	.L293:
1246:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("tpa_rate", "%d",                        currentControlRateProfi
 5259              	 .loc 16 1246 0
 5260 043a 3B6A     	 ldr r3,[r7,#32]
 5261 043c 1B7B     	 ldrb r3,[r3,#12]
 5262 043e 8C48     	 ldr r0,.L358+36
 5263 0440 8649     	 ldr r1,.L358+16
 5264 0442 1A46     	 mov r2,r3
 5265 0444 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5266 0448 35E3     	 b .L351
 5267              	.L294:
1247:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("tpa_breakpoint", "%d",                  currentControlRateProfi
 5268              	 .loc 16 1247 0
 5269 044a 3B6A     	 ldr r3,[r7,#32]
 5270 044c B3F80D30 	 ldrh r3,[r3,#13]
 5271 0450 9BB2     	 uxth r3,r3
 5272 0452 8848     	 ldr r0,.L358+40
 5273 0454 8149     	 ldr r1,.L358+16
 5274 0456 1A46     	 mov r2,r3
 5275 0458 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5276 045c 2BE3     	 b .L351
 5277              	.L295:
1248:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_rates", "%d,%d,%d",                  currentControlRateProfi
 5278              	 .loc 16 1248 0
 5279 045e 3B6A     	 ldr r3,[r7,#32]
 5280 0460 DB78     	 ldrb r3,[r3,#3]
 5281 0462 1A46     	 mov r2,r3
 5282 0464 3B6A     	 ldr r3,[r7,#32]
 5283 0466 1B79     	 ldrb r3,[r3,#4]
 5284 0468 1C46     	 mov r4,r3
 5285 046a 3B6A     	 ldr r3,[r7,#32]
 5286 046c 5B79     	 ldrb r3,[r3,#5]
 5287 046e 0093     	 str r3,[sp]
 5288 0470 8148     	 ldr r0,.L358+44
 5289 0472 8249     	 ldr r1,.L358+48
 5290 0474 2346     	 mov r3,r4
 5291 0476 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5292 047a 1CE3     	 b .L351
 5293              	.L296:
1249:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentControlRateProfi
1250:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentControlRateProfi
1251:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_expo", "%d,%d,%d",                   currentControlRateProfi
 5294              	 .loc 16 1251 0
 5295 047c 3B6A     	 ldr r3,[r7,#32]
 5296 047e 9B79     	 ldrb r3,[r3,#6]
 5297 0480 1A46     	 mov r2,r3
 5298 0482 3B6A     	 ldr r3,[r7,#32]
 5299 0484 DB79     	 ldrb r3,[r3,#7]
 5300 0486 1C46     	 mov r4,r3
 5301 0488 3B6A     	 ldr r3,[r7,#32]
 5302 048a 1B7A     	 ldrb r3,[r3,#8]
 5303 048c 0093     	 str r3,[sp]
 5304 048e 7C48     	 ldr r0,.L358+52
 5305 0490 7A49     	 ldr r1,.L358+48
 5306 0492 2346     	 mov r3,r4
 5307 0494 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5308 0498 0DE3     	 b .L351
 5309              	.L297:
1252:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentControlRateProfi
1253:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentControlRateProfi
1254:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rates", "%d,%d,%d",                     currentControlRateProfi
 5310              	 .loc 16 1254 0
 5311 049a 3B6A     	 ldr r3,[r7,#32]
 5312 049c 5B7A     	 ldrb r3,[r3,#9]
 5313 049e 1A46     	 mov r2,r3
 5314 04a0 3B6A     	 ldr r3,[r7,#32]
 5315 04a2 9B7A     	 ldrb r3,[r3,#10]
 5316 04a4 1C46     	 mov r4,r3
 5317 04a6 3B6A     	 ldr r3,[r7,#32]
 5318 04a8 DB7A     	 ldrb r3,[r3,#11]
 5319 04aa 0093     	 str r3,[sp]
 5320 04ac 7548     	 ldr r0,.L358+56
 5321 04ae 7349     	 ldr r1,.L358+48
 5322 04b0 2346     	 mov r3,r4
 5323 04b2 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5324 04b6 FEE2     	 b .L351
 5325              	.L298:
1255:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentControlRateProfi
1256:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentControlRateProfi
1257:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rollPID", "%d,%d,%d",                   currentPidProfile->pid[
 5326              	 .loc 16 1257 0
 5327 04b8 734B     	 ldr r3,.L358+60
 5328 04ba 1B68     	 ldr r3,[r3]
 5329 04bc 1B7A     	 ldrb r3,[r3,#8]
 5330 04be 1A46     	 mov r2,r3
 5331 04c0 714B     	 ldr r3,.L358+60
 5332 04c2 1B68     	 ldr r3,[r3]
 5333 04c4 5B7A     	 ldrb r3,[r3,#9]
 5334 04c6 1C46     	 mov r4,r3
 5335 04c8 6F4B     	 ldr r3,.L358+60
 5336 04ca 1B68     	 ldr r3,[r3]
 5337 04cc 9B7A     	 ldrb r3,[r3,#10]
 5338 04ce 0093     	 str r3,[sp]
 5339 04d0 6E48     	 ldr r0,.L358+64
 5340 04d2 6A49     	 ldr r1,.L358+48
 5341 04d4 2346     	 mov r3,r4
 5342 04d6 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5343 04da ECE2     	 b .L351
 5344              	.L299:
1258:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1259:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1260:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("pitchPID", "%d,%d,%d",                  currentPidProfile->pid[
 5345              	 .loc 16 1260 0
 5346 04dc 6A4B     	 ldr r3,.L358+60
 5347 04de 1B68     	 ldr r3,[r3]
 5348 04e0 5B7B     	 ldrb r3,[r3,#13]
 5349 04e2 1A46     	 mov r2,r3
 5350 04e4 684B     	 ldr r3,.L358+60
 5351 04e6 1B68     	 ldr r3,[r3]
 5352 04e8 9B7B     	 ldrb r3,[r3,#14]
 5353 04ea 1C46     	 mov r4,r3
 5354 04ec 664B     	 ldr r3,.L358+60
 5355 04ee 1B68     	 ldr r3,[r3]
 5356 04f0 DB7B     	 ldrb r3,[r3,#15]
 5357 04f2 0093     	 str r3,[sp]
 5358 04f4 6648     	 ldr r0,.L358+68
 5359 04f6 6149     	 ldr r1,.L358+48
 5360 04f8 2346     	 mov r3,r4
 5361 04fa FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5362 04fe DAE2     	 b .L351
 5363              	.L300:
1261:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1262:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1263:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("yawPID", "%d,%d,%d",                    currentPidProfile->pid[
 5364              	 .loc 16 1263 0
 5365 0500 614B     	 ldr r3,.L358+60
 5366 0502 1B68     	 ldr r3,[r3]
 5367 0504 9B7C     	 ldrb r3,[r3,#18]
 5368 0506 1A46     	 mov r2,r3
 5369 0508 5F4B     	 ldr r3,.L358+60
 5370 050a 1B68     	 ldr r3,[r3]
 5371 050c DB7C     	 ldrb r3,[r3,#19]
 5372 050e 1C46     	 mov r4,r3
 5373 0510 5D4B     	 ldr r3,.L358+60
 5374 0512 1B68     	 ldr r3,[r3]
 5375 0514 1B7D     	 ldrb r3,[r3,#20]
 5376 0516 0093     	 str r3,[sp]
 5377 0518 5E48     	 ldr r0,.L358+72
 5378 051a 5849     	 ldr r1,.L358+48
 5379 051c 2346     	 mov r3,r4
 5380 051e FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5381 0522 C8E2     	 b .L351
 5382              	.L301:
1264:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1265:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1266:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("levelPID", "%d,%d,%d",                  currentPidProfile->pid[
 5383              	 .loc 16 1266 0
 5384 0524 584B     	 ldr r3,.L358+60
 5385 0526 1B68     	 ldr r3,[r3]
 5386 0528 DB7D     	 ldrb r3,[r3,#23]
 5387 052a 1A46     	 mov r2,r3
 5388 052c 564B     	 ldr r3,.L358+60
 5389 052e 1B68     	 ldr r3,[r3]
 5390 0530 1B7E     	 ldrb r3,[r3,#24]
 5391 0532 1C46     	 mov r4,r3
 5392 0534 544B     	 ldr r3,.L358+60
 5393 0536 1B68     	 ldr r3,[r3]
 5394 0538 5B7E     	 ldrb r3,[r3,#25]
 5395 053a 0093     	 str r3,[sp]
 5396 053c 5648     	 ldr r0,.L358+76
 5397 053e 4F49     	 ldr r1,.L358+48
 5398 0540 2346     	 mov r3,r4
 5399 0542 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5400 0546 B6E2     	 b .L351
 5401              	.L302:
1267:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1268:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1269:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("magPID", "%d",                          currentPidProfile->pid[
 5402              	 .loc 16 1269 0
 5403 0548 4F4B     	 ldr r3,.L358+60
 5404 054a 1B68     	 ldr r3,[r3]
 5405 054c 1B7F     	 ldrb r3,[r3,#28]
 5406 054e 5348     	 ldr r0,.L358+80
 5407 0550 4249     	 ldr r1,.L358+16
 5408 0552 1A46     	 mov r2,r3
 5409 0554 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5410 0558 ADE2     	 b .L351
 5411              	.L303:
1270:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("dterm_filter_type", "%d",               currentPidProfile->dter
 5412              	 .loc 16 1270 0
 5413 055a 4B4B     	 ldr r3,.L358+60
 5414 055c 1B68     	 ldr r3,[r3]
 5415 055e 93F82130 	 ldrb r3,[r3,#33]
 5416 0562 4F48     	 ldr r0,.L358+84
 5417 0564 3D49     	 ldr r1,.L358+16
 5418 0566 1A46     	 mov r2,r3
 5419 0568 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5420 056c A3E2     	 b .L351
 5421              	.L304:
1271:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("dterm_lowpass_hz", "%d",                currentPidProfile->dter
 5422              	 .loc 16 1271 0
 5423 056e 464B     	 ldr r3,.L358+60
 5424 0570 1B68     	 ldr r3,[r3]
 5425 0572 5B88     	 ldrh r3,[r3,#2]
 5426 0574 9BB2     	 uxth r3,r3
 5427 0576 4B48     	 ldr r0,.L358+88
 5428 0578 3849     	 ldr r1,.L358+16
 5429 057a 1A46     	 mov r2,r3
 5430 057c FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5431 0580 99E2     	 b .L351
 5432              	.L305:
1272:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("dterm_lowpass2_hz", "%d",               currentPidProfile->dter
 5433              	 .loc 16 1272 0
 5434 0582 414B     	 ldr r3,.L358+60
 5435 0584 1B68     	 ldr r3,[r3]
 5436 0586 B3F84630 	 ldrh r3,[r3,#70]
 5437 058a 9BB2     	 uxth r3,r3
 5438 058c 4648     	 ldr r0,.L358+92
 5439 058e 3349     	 ldr r1,.L358+16
 5440 0590 1A46     	 mov r2,r3
 5441 0592 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5442 0596 8EE2     	 b .L351
 5443              	.L306:
1273:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("yaw_lowpass_hz", "%d",                  currentPidProfile->yaw_
 5444              	 .loc 16 1273 0
 5445 0598 3B4B     	 ldr r3,.L358+60
 5446 059a 1B68     	 ldr r3,[r3]
 5447 059c 1B88     	 ldrh r3,[r3]
 5448 059e 9BB2     	 uxth r3,r3
 5449 05a0 4248     	 ldr r0,.L358+96
 5450 05a2 2E49     	 ldr r1,.L358+16
 5451 05a4 1A46     	 mov r2,r3
 5452 05a6 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5453 05aa 84E2     	 b .L351
 5454              	.L307:
1274:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("dterm_notch_hz", "%d",                  currentPidProfile->dter
 5455              	 .loc 16 1274 0
 5456 05ac 364B     	 ldr r3,.L358+60
 5457 05ae 1B68     	 ldr r3,[r3]
 5458 05b0 9B88     	 ldrh r3,[r3,#4]
 5459 05b2 9BB2     	 uxth r3,r3
 5460 05b4 3E48     	 ldr r0,.L358+100
 5461 05b6 2949     	 ldr r1,.L358+16
 5462 05b8 1A46     	 mov r2,r3
 5463 05ba FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5464 05be 7AE2     	 b .L351
 5465              	.L308:
1275:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("dterm_notch_cutoff", "%d",              currentPidProfile->dter
 5466              	 .loc 16 1275 0
 5467 05c0 314B     	 ldr r3,.L358+60
 5468 05c2 1B68     	 ldr r3,[r3]
 5469 05c4 DB88     	 ldrh r3,[r3,#6]
 5470 05c6 9BB2     	 uxth r3,r3
 5471 05c8 3A48     	 ldr r0,.L358+104
 5472 05ca 2449     	 ldr r1,.L358+16
 5473 05cc 1A46     	 mov r2,r3
 5474 05ce FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5475 05d2 70E2     	 b .L351
 5476              	.L309:
1276:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("iterm_windup", "%d",                    currentPidProfile->iter
 5477              	 .loc 16 1276 0
 5478 05d4 2C4B     	 ldr r3,.L358+60
 5479 05d6 1B68     	 ldr r3,[r3]
 5480 05d8 93F82230 	 ldrb r3,[r3,#34]
 5481 05dc 3648     	 ldr r0,.L358+108
 5482 05de 1F49     	 ldr r1,.L358+16
 5483 05e0 1A46     	 mov r2,r3
 5484 05e2 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5485 05e6 66E2     	 b .L351
 5486              	.L310:
1277:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("vbat_pid_gain", "%d",                   currentPidProfile->vbat
 5487              	 .loc 16 1277 0
 5488 05e8 274B     	 ldr r3,.L358+60
 5489 05ea 1B68     	 ldr r3,[r3]
 5490 05ec 93F84030 	 ldrb r3,[r3,#64]
 5491 05f0 3248     	 ldr r0,.L358+112
 5492 05f2 1A49     	 ldr r1,.L358+16
 5493 05f4 1A46     	 mov r2,r3
 5494 05f6 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5495 05fa 5CE2     	 b .L351
 5496              	.L311:
1278:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("pidAtMinThrottle", "%d",                currentPidProfile->pidA
 5497              	 .loc 16 1278 0
 5498 05fc 224B     	 ldr r3,.L358+60
 5499 05fe 1B68     	 ldr r3,[r3]
 5500 0600 93F82730 	 ldrb r3,[r3,#39]
 5501 0604 2E48     	 ldr r0,.L358+116
 5502 0606 1549     	 ldr r1,.L358+16
 5503 0608 1A46     	 mov r2,r3
 5504 060a FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5505 060e 52E2     	 b .L351
 5506              	.L312:
1279:../cleanflight/src/main/blackbox/blackbox.c **** 
1280:../cleanflight/src/main/blackbox/blackbox.c ****         // Betaflight PID controller parameters
1281:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("anti_gravity_mode", "%d",               currentPidProfile->anti
 5507              	 .loc 16 1281 0
 5508 0610 1D4B     	 ldr r3,.L358+60
 5509 0612 1B68     	 ldr r3,[r3]
 5510 0614 93F82B30 	 ldrb r3,[r3,#43]
 5511 0618 2A48     	 ldr r0,.L358+120
 5512 061a 1049     	 ldr r1,.L358+16
 5513 061c 1A46     	 mov r2,r3
 5514 061e FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5515 0622 48E2     	 b .L351
 5516              	.L313:
1282:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("anti_gravity_threshold", "%d",          currentPidProfile->iter
 5517              	 .loc 16 1282 0
 5518 0624 184B     	 ldr r3,.L358+60
 5519 0626 1B68     	 ldr r3,[r3]
 5520 0628 9B8D     	 ldrh r3,[r3,#44]
 5521 062a 9BB2     	 uxth r3,r3
 5522 062c 2648     	 ldr r0,.L358+124
 5523 062e 0B49     	 ldr r1,.L358+16
 5524 0630 1A46     	 mov r2,r3
 5525 0632 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5526 0636 3EE2     	 b .L351
 5527              	.L314:
1283:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("anti_gravity_gain", "%d",               currentPidProfile->iter
 5528              	 .loc 16 1283 0
 5529 0638 134B     	 ldr r3,.L358+60
 5530 063a 1B68     	 ldr r3,[r3]
 5531 063c DB8D     	 ldrh r3,[r3,#46]
 5532 063e 9BB2     	 uxth r3,r3
 5533 0640 2248     	 ldr r0,.L358+128
 5534 0642 0649     	 ldr r1,.L358+16
 5535 0644 1A46     	 mov r2,r3
 5536 0646 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5537 064a 34E2     	 b .L351
 5538              	.L359:
 5539              	 .align 2
 5540              	.L358:
 5541 064c B4020000 	 .word .LC60
 5542 0650 70020000 	 .word .LC53
 5543 0654 00000000 	 .word gyro
 5544 0658 C4020000 	 .word .LC61
 5545 065c 90010000 	 .word .LC34
 5546 0660 D0020000 	 .word .LC62
 5547 0664 E0020000 	 .word .LC63
 5548 0668 F4020000 	 .word .LC64
 5549 066c FC020000 	 .word .LC65
 5550 0670 08030000 	 .word .LC66
 5551 0674 14030000 	 .word .LC67
 5552 0678 24030000 	 .word .LC68
 5553 067c 30030000 	 .word .LC69
 5554 0680 3C030000 	 .word .LC70
 5555 0684 44030000 	 .word .LC71
 5556 0688 00000000 	 .word currentPidProfile
 5557 068c 4C030000 	 .word .LC72
 5558 0690 54030000 	 .word .LC73
 5559 0694 60030000 	 .word .LC74
 5560 0698 68030000 	 .word .LC75
 5561 069c 74030000 	 .word .LC76
 5562 06a0 7C030000 	 .word .LC77
 5563 06a4 90030000 	 .word .LC78
 5564 06a8 A4030000 	 .word .LC79
 5565 06ac B8030000 	 .word .LC80
 5566 06b0 C8030000 	 .word .LC81
 5567 06b4 D8030000 	 .word .LC82
 5568 06b8 EC030000 	 .word .LC83
 5569 06bc FC030000 	 .word .LC84
 5570 06c0 0C040000 	 .word .LC85
 5571 06c4 20040000 	 .word .LC86
 5572 06c8 34040000 	 .word .LC87
 5573 06cc 4C040000 	 .word .LC88
 5574              	.L315:
1284:../cleanflight/src/main/blackbox/blackbox.c **** 
1285:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("feedforward_transition", "%d",          currentPidProfile->feed
 5575              	 .loc 16 1285 0
 5576 06d0 B14B     	 ldr r3,.L360
 5577 06d2 1B68     	 ldr r3,[r3]
 5578 06d4 93F84130 	 ldrb r3,[r3,#65]
 5579 06d8 B048     	 ldr r0,.L360+4
 5580 06da B149     	 ldr r1,.L360+8
 5581 06dc 1A46     	 mov r2,r3
 5582 06de FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5583 06e2 E8E1     	 b .L351
 5584              	.L316:
1286:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("feedforward_weight", "%d,%d,%d",        currentPidProfile->pid[
 5585              	 .loc 16 1286 0
 5586 06e4 AC4B     	 ldr r3,.L360
 5587 06e6 1B68     	 ldr r3,[r3]
 5588 06e8 B3F80B30 	 ldrh r3,[r3,#11]
 5589 06ec 9BB2     	 uxth r3,r3
 5590 06ee 1A46     	 mov r2,r3
 5591 06f0 A94B     	 ldr r3,.L360
 5592 06f2 1B68     	 ldr r3,[r3]
 5593 06f4 1B8A     	 ldrh r3,[r3,#16]
 5594 06f6 9BB2     	 uxth r3,r3
 5595 06f8 1C46     	 mov r4,r3
 5596 06fa A74B     	 ldr r3,.L360
 5597 06fc 1B68     	 ldr r3,[r3]
 5598 06fe B3F81530 	 ldrh r3,[r3,#21]
 5599 0702 9BB2     	 uxth r3,r3
 5600 0704 0093     	 str r3,[sp]
 5601 0706 A748     	 ldr r0,.L360+12
 5602 0708 A749     	 ldr r1,.L360+16
 5603 070a 2346     	 mov r3,r4
 5604 070c FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5605 0710 D1E1     	 b .L351
 5606              	.L317:
1287:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1288:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             currentPidProfile->pid[
1289:../cleanflight/src/main/blackbox/blackbox.c **** 
1290:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("acc_limit_yaw", "%d",                   currentPidProfile->yawR
 5607              	 .loc 16 1290 0
 5608 0712 A14B     	 ldr r3,.L360
 5609 0714 1B68     	 ldr r3,[r3]
 5610 0716 1B8E     	 ldrh r3,[r3,#48]
 5611 0718 9BB2     	 uxth r3,r3
 5612 071a A448     	 ldr r0,.L360+20
 5613 071c A049     	 ldr r1,.L360+8
 5614 071e 1A46     	 mov r2,r3
 5615 0720 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5616 0724 C7E1     	 b .L351
 5617              	.L318:
1291:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("acc_limit", "%d",                       currentPidProfile->rate
 5618              	 .loc 16 1291 0
 5619 0726 9C4B     	 ldr r3,.L360
 5620 0728 1B68     	 ldr r3,[r3]
 5621 072a 5B8E     	 ldrh r3,[r3,#50]
 5622 072c 9BB2     	 uxth r3,r3
 5623 072e A048     	 ldr r0,.L360+24
 5624 0730 9B49     	 ldr r1,.L360+8
 5625 0732 1A46     	 mov r2,r3
 5626 0734 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5627 0738 BDE1     	 b .L351
 5628              	.L319:
1292:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("pidsum_limit", "%d",                    currentPidProfile->pidS
 5629              	 .loc 16 1292 0
 5630 073a 974B     	 ldr r3,.L360
 5631 073c 1B68     	 ldr r3,[r3]
 5632 073e B3F82330 	 ldrh r3,[r3,#35]
 5633 0742 9BB2     	 uxth r3,r3
 5634 0744 9B48     	 ldr r0,.L360+28
 5635 0746 9649     	 ldr r1,.L360+8
 5636 0748 1A46     	 mov r2,r3
 5637 074a FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5638 074e B2E1     	 b .L351
 5639              	.L320:
1293:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("pidsum_limit_yaw", "%d",                currentPidProfile->pidS
 5640              	 .loc 16 1293 0
 5641 0750 914B     	 ldr r3,.L360
 5642 0752 1B68     	 ldr r3,[r3]
 5643 0754 B3F82530 	 ldrh r3,[r3,#37]
 5644 0758 9BB2     	 uxth r3,r3
 5645 075a 9748     	 ldr r0,.L360+32
 5646 075c 9049     	 ldr r1,.L360+8
 5647 075e 1A46     	 mov r2,r3
 5648 0760 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5649 0764 A7E1     	 b .L351
 5650              	.L321:
1294:../cleanflight/src/main/blackbox/blackbox.c ****         // End of Betaflight controller parameters
1295:../cleanflight/src/main/blackbox/blackbox.c **** 
1296:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("deadband", "%d",                        rcControlsConfig()->dea
 5651              	 .loc 16 1296 0
 5652 0766 FFF7FEFF 	 bl rcControlsConfig
 5653 076a 0346     	 mov r3,r0
 5654 076c 1B78     	 ldrb r3,[r3]
 5655 076e 9348     	 ldr r0,.L360+36
 5656 0770 8B49     	 ldr r1,.L360+8
 5657 0772 1A46     	 mov r2,r3
 5658 0774 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5659 0778 9DE1     	 b .L351
 5660              	.L322:
1297:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("yaw_deadband", "%d",                    rcControlsConfig()->yaw
 5661              	 .loc 16 1297 0
 5662 077a FFF7FEFF 	 bl rcControlsConfig
 5663 077e 0346     	 mov r3,r0
 5664 0780 5B78     	 ldrb r3,[r3,#1]
 5665 0782 8F48     	 ldr r0,.L360+40
 5666 0784 8649     	 ldr r1,.L360+8
 5667 0786 1A46     	 mov r2,r3
 5668 0788 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5669 078c 93E1     	 b .L351
 5670              	.L323:
1298:../cleanflight/src/main/blackbox/blackbox.c **** 
1299:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_hardware_lpf", "%d",               gyroConfig()->gyro_hard
 5671              	 .loc 16 1299 0
 5672 078e FFF7FEFF 	 bl gyroConfig
 5673 0792 0346     	 mov r3,r0
 5674 0794 DB78     	 ldrb r3,[r3,#3]
 5675 0796 8B48     	 ldr r0,.L360+44
 5676 0798 8149     	 ldr r1,.L360+8
 5677 079a 1A46     	 mov r2,r3
 5678 079c FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5679 07a0 89E1     	 b .L351
 5680              	.L324:
1300:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_32K_CAPABLE_GYRO
1301:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_32khz_hardware_lpf", "%d",         gyroConfig()->gyro_32kh
1302:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1303:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_lowpass_type", "%d",               gyroConfig()->gyro_lowp
 5681              	 .loc 16 1303 0
 5682 07a2 FFF7FEFF 	 bl gyroConfig
 5683 07a6 0346     	 mov r3,r0
 5684 07a8 DB7D     	 ldrb r3,[r3,#23]
 5685 07aa 8748     	 ldr r0,.L360+48
 5686 07ac 7C49     	 ldr r1,.L360+8
 5687 07ae 1A46     	 mov r2,r3
 5688 07b0 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5689 07b4 7FE1     	 b .L351
 5690              	.L325:
1304:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_lowpass_hz", "%d",                 gyroConfig()->gyro_lowp
 5691              	 .loc 16 1304 0
 5692 07b6 FFF7FEFF 	 bl gyroConfig
 5693 07ba 0346     	 mov r3,r0
 5694 07bc 1B89     	 ldrh r3,[r3,#8]
 5695 07be 9BB2     	 uxth r3,r3
 5696 07c0 8248     	 ldr r0,.L360+52
 5697 07c2 7749     	 ldr r1,.L360+8
 5698 07c4 1A46     	 mov r2,r3
 5699 07c6 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5700 07ca 74E1     	 b .L351
 5701              	.L326:
1305:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_lowpass2_type", "%d",              gyroConfig()->gyro_lowp
 5702              	 .loc 16 1305 0
 5703 07cc FFF7FEFF 	 bl gyroConfig
 5704 07d0 0346     	 mov r3,r0
 5705 07d2 1B7E     	 ldrb r3,[r3,#24]
 5706 07d4 7E48     	 ldr r0,.L360+56
 5707 07d6 7249     	 ldr r1,.L360+8
 5708 07d8 1A46     	 mov r2,r3
 5709 07da FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5710 07de 6AE1     	 b .L351
 5711              	.L327:
1306:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_lowpass2_hz", "%d",                gyroConfig()->gyro_lowp
 5712              	 .loc 16 1306 0
 5713 07e0 FFF7FEFF 	 bl gyroConfig
 5714 07e4 0346     	 mov r3,r0
 5715 07e6 5B89     	 ldrh r3,[r3,#10]
 5716 07e8 9BB2     	 uxth r3,r3
 5717 07ea 7A48     	 ldr r0,.L360+60
 5718 07ec 6C49     	 ldr r1,.L360+8
 5719 07ee 1A46     	 mov r2,r3
 5720 07f0 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5721 07f4 5FE1     	 b .L351
 5722              	.L328:
1307:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_notch_hz", "%d,%d",                gyroConfig()->gyro_soft
 5723              	 .loc 16 1307 0
 5724 07f6 FFF7FEFF 	 bl gyroConfig
 5725 07fa 0346     	 mov r3,r0
 5726 07fc 9B89     	 ldrh r3,[r3,#12]
 5727 07fe 9BB2     	 uxth r3,r3
 5728 0800 1C46     	 mov r4,r3
 5729 0802 FFF7FEFF 	 bl gyroConfig
 5730 0806 0346     	 mov r3,r0
 5731 0808 1B8A     	 ldrh r3,[r3,#16]
 5732 080a 9BB2     	 uxth r3,r3
 5733 080c 7248     	 ldr r0,.L360+64
 5734 080e 7349     	 ldr r1,.L360+68
 5735 0810 2246     	 mov r2,r4
 5736 0812 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5737 0816 4EE1     	 b .L351
 5738              	.L329:
1308:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             gyroConfig()->gyro_soft
1309:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_notch_cutoff", "%d,%d",            gyroConfig()->gyro_soft
 5739              	 .loc 16 1309 0
 5740 0818 FFF7FEFF 	 bl gyroConfig
 5741 081c 0346     	 mov r3,r0
 5742 081e DB89     	 ldrh r3,[r3,#14]
 5743 0820 9BB2     	 uxth r3,r3
 5744 0822 1C46     	 mov r4,r3
 5745 0824 FFF7FEFF 	 bl gyroConfig
 5746 0828 0346     	 mov r3,r0
 5747 082a 5B8A     	 ldrh r3,[r3,#18]
 5748 082c 9BB2     	 uxth r3,r3
 5749 082e 6C48     	 ldr r0,.L360+72
 5750 0830 6A49     	 ldr r1,.L360+68
 5751 0832 2246     	 mov r2,r4
 5752 0834 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5753 0838 3DE1     	 b .L351
 5754              	.L330:
1310:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             gyroConfig()->gyro_soft
1311:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("acc_lpf_hz", "%d",                 (int)(accelerometerConfig()-
 5755              	 .loc 16 1311 0
 5756 083a FFF7FEFF 	 bl accelerometerConfig
 5757 083e 0346     	 mov r3,r0
 5758 0840 1B88     	 ldrh r3,[r3]
 5759 0842 9BB2     	 uxth r3,r3
 5760 0844 07EE903A 	 fmsr s15,r3
 5761 0848 F8EEE77A 	 fsitos s15,s15
 5762 084c 9FED657A 	 flds s14,.L360+76
 5763 0850 67EE877A 	 fmuls s15,s15,s14
 5764 0854 FDEEE77A 	 ftosizs s15,s15
 5765 0858 6348     	 ldr r0,.L360+80
 5766 085a 5149     	 ldr r1,.L360+8
 5767 085c 17EE902A 	 fmrs r2,s15
 5768 0860 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5769 0864 27E1     	 b .L351
 5770              	.L331:
1312:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("acc_hardware", "%d",                    accelerometerConfig()->
 5771              	 .loc 16 1312 0
 5772 0866 FFF7FEFF 	 bl accelerometerConfig
 5773 086a 0346     	 mov r3,r0
 5774 086c DB78     	 ldrb r3,[r3,#3]
 5775 086e 5F48     	 ldr r0,.L360+84
 5776 0870 4B49     	 ldr r1,.L360+8
 5777 0872 1A46     	 mov r2,r3
 5778 0874 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5779 0878 1DE1     	 b .L351
 5780              	.L332:
1313:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("baro_hardware", "%d",                   barometerConfig()->baro
 5781              	 .loc 16 1313 0
 5782 087a FFF7FEFF 	 bl barometerConfig
 5783 087e 0346     	 mov r3,r0
 5784 0880 5B79     	 ldrb r3,[r3,#5]
 5785 0882 5B48     	 ldr r0,.L360+88
 5786 0884 4649     	 ldr r1,.L360+8
 5787 0886 1A46     	 mov r2,r3
 5788 0888 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5789 088c 13E1     	 b .L351
 5790              	.L333:
1314:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("mag_hardware", "%d",                    compassConfig()->mag_ha
 5791              	 .loc 16 1314 0
 5792 088e FFF7FEFF 	 bl compassConfig
 5793 0892 0346     	 mov r3,r0
 5794 0894 DB78     	 ldrb r3,[r3,#3]
 5795 0896 5748     	 ldr r0,.L360+92
 5796 0898 4149     	 ldr r1,.L360+8
 5797 089a 1A46     	 mov r2,r3
 5798 089c FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5799 08a0 09E1     	 b .L351
 5800              	.L334:
1315:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("gyro_cal_on_first_arm", "%d",           armingConfig()->gyro_ca
 5801              	 .loc 16 1315 0
 5802 08a2 FFF7FEFF 	 bl armingConfig
 5803 08a6 0346     	 mov r3,r0
 5804 08a8 1B78     	 ldrb r3,[r3]
 5805 08aa 5348     	 ldr r0,.L360+96
 5806 08ac 3C49     	 ldr r1,.L360+8
 5807 08ae 1A46     	 mov r2,r3
 5808 08b0 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5809 08b4 FFE0     	 b .L351
 5810              	.L335:
1316:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_interpolation", "%d",                rxConfig()->rcInterpola
 5811              	 .loc 16 1316 0
 5812 08b6 FFF7FEFF 	 bl rxConfig
 5813 08ba 0346     	 mov r3,r0
 5814 08bc 1B7E     	 ldrb r3,[r3,#24]
 5815 08be 4F48     	 ldr r0,.L360+100
 5816 08c0 3749     	 ldr r1,.L360+8
 5817 08c2 1A46     	 mov r2,r3
 5818 08c4 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5819 08c8 F5E0     	 b .L351
 5820              	.L336:
1317:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_interpolation_interval", "%d",       rxConfig()->rcInterpola
 5821              	 .loc 16 1317 0
 5822 08ca FFF7FEFF 	 bl rxConfig
 5823 08ce 0346     	 mov r3,r0
 5824 08d0 9B7E     	 ldrb r3,[r3,#26]
 5825 08d2 4B48     	 ldr r0,.L360+104
 5826 08d4 3249     	 ldr r1,.L360+8
 5827 08d6 1A46     	 mov r2,r3
 5828 08d8 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5829 08dc EBE0     	 b .L351
 5830              	.L337:
1318:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("airmode_activate_throttle", "%d",       rxConfig()->airModeActi
 5831              	 .loc 16 1318 0
 5832 08de FFF7FEFF 	 bl rxConfig
 5833 08e2 0346     	 mov r3,r0
 5834 08e4 1B7F     	 ldrb r3,[r3,#28]
 5835 08e6 4748     	 ldr r0,.L360+108
 5836 08e8 2D49     	 ldr r1,.L360+8
 5837 08ea 1A46     	 mov r2,r3
 5838 08ec FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5839 08f0 E1E0     	 b .L351
 5840              	.L338:
1319:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("serialrx_provider", "%d",               rxConfig()->serialrx_pr
 5841              	 .loc 16 1319 0
 5842 08f2 FFF7FEFF 	 bl rxConfig
 5843 08f6 0346     	 mov r3,r0
 5844 08f8 1B7A     	 ldrb r3,[r3,#8]
 5845 08fa 4348     	 ldr r0,.L360+112
 5846 08fc 2849     	 ldr r1,.L360+8
 5847 08fe 1A46     	 mov r2,r3
 5848 0900 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5849 0904 D7E0     	 b .L351
 5850              	.L339:
1320:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("use_unsynced_pwm", "%d",                motorConfig()->dev.useU
 5851              	 .loc 16 1320 0
 5852 0906 FFF7FEFF 	 bl motorConfig
 5853 090a 0346     	 mov r3,r0
 5854 090c 1B79     	 ldrb r3,[r3,#4]
 5855 090e 3F48     	 ldr r0,.L360+116
 5856 0910 2349     	 ldr r1,.L360+8
 5857 0912 1A46     	 mov r2,r3
 5858 0914 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5859 0918 CDE0     	 b .L351
 5860              	.L340:
1321:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("motor_pwm_protocol", "%d",              motorConfig()->dev.moto
 5861              	 .loc 16 1321 0
 5862 091a FFF7FEFF 	 bl motorConfig
 5863 091e 0346     	 mov r3,r0
 5864 0920 9B78     	 ldrb r3,[r3,#2]
 5865 0922 3B48     	 ldr r0,.L360+120
 5866 0924 1E49     	 ldr r1,.L360+8
 5867 0926 1A46     	 mov r2,r3
 5868 0928 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5869 092c C3E0     	 b .L351
 5870              	.L341:
1322:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("motor_pwm_rate", "%d",                  motorConfig()->dev.moto
 5871              	 .loc 16 1322 0
 5872 092e FFF7FEFF 	 bl motorConfig
 5873 0932 0346     	 mov r3,r0
 5874 0934 1B88     	 ldrh r3,[r3]
 5875 0936 9BB2     	 uxth r3,r3
 5876 0938 3648     	 ldr r0,.L360+124
 5877 093a 1949     	 ldr r1,.L360+8
 5878 093c 1A46     	 mov r2,r3
 5879 093e FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5880 0942 B8E0     	 b .L351
 5881              	.L342:
1323:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("dshot_idle_value", "%d",                motorConfig()->digitalI
 5882              	 .loc 16 1323 0
 5883 0944 FFF7FEFF 	 bl motorConfig
 5884 0948 0346     	 mov r3,r0
 5885 094a DB89     	 ldrh r3,[r3,#14]
 5886 094c 9BB2     	 uxth r3,r3
 5887 094e 3248     	 ldr r0,.L360+128
 5888 0950 1349     	 ldr r1,.L360+8
 5889 0952 1A46     	 mov r2,r3
 5890 0954 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5891 0958 ADE0     	 b .L351
 5892              	.L343:
1324:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("debug_mode", "%d",                      systemConfig()->debug_m
 5893              	 .loc 16 1324 0
 5894 095a FFF7FEFF 	 bl systemConfig
 5895 095e 0346     	 mov r3,r0
 5896 0960 9B78     	 ldrb r3,[r3,#2]
 5897 0962 2E48     	 ldr r0,.L360+132
 5898 0964 0E49     	 ldr r1,.L360+8
 5899 0966 1A46     	 mov r2,r3
 5900 0968 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5901 096c A3E0     	 b .L351
 5902              	.L344:
1325:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("features", "%d",                        featureConfig()->enable
 5903              	 .loc 16 1325 0
 5904 096e FFF7FEFF 	 bl featureConfig
 5905 0972 0346     	 mov r3,r0
 5906 0974 1B68     	 ldr r3,[r3]
 5907 0976 2A48     	 ldr r0,.L360+136
 5908 0978 0949     	 ldr r1,.L360+8
 5909 097a 1A46     	 mov r2,r3
 5910 097c FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5911 0980 99E0     	 b .L351
 5912              	.L345:
1326:../cleanflight/src/main/blackbox/blackbox.c **** 
1327:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_RC_SMOOTHING_FILTER
1328:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_smoothing_type", "%d",               rxConfig()->rc_smoothin
 5913              	 .loc 16 1328 0
 5914 0982 FFF7FEFF 	 bl rxConfig
 5915 0986 0346     	 mov r3,r0
 5916 0988 93F82430 	 ldrb r3,[r3,#36]
 5917 098c 2548     	 ldr r0,.L360+140
 5918 098e 0449     	 ldr r1,.L360+8
 5919 0990 1A46     	 mov r2,r3
 5920 0992 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5921 0996 8EE0     	 b .L351
 5922              	.L361:
 5923              	 .align 2
 5924              	.L360:
 5925 0998 00000000 	 .word currentPidProfile
 5926 099c 60040000 	 .word .LC89
 5927 09a0 90010000 	 .word .LC34
 5928 09a4 78040000 	 .word .LC90
 5929 09a8 30030000 	 .word .LC69
 5930 09ac 8C040000 	 .word .LC91
 5931 09b0 9C040000 	 .word .LC92
 5932 09b4 A8040000 	 .word .LC93
 5933 09b8 B8040000 	 .word .LC94
 5934 09bc CC040000 	 .word .LC95
 5935 09c0 D8040000 	 .word .LC96
 5936 09c4 E8040000 	 .word .LC97
 5937 09c8 FC040000 	 .word .LC98
 5938 09cc 10050000 	 .word .LC99
 5939 09d0 20050000 	 .word .LC100
 5940 09d4 34050000 	 .word .LC101
 5941 09d8 48050000 	 .word .LC102
 5942 09dc 70020000 	 .word .LC53
 5943 09e0 58050000 	 .word .LC103
 5944 09e4 0000C842 	 .word 1120403456
 5945 09e8 6C050000 	 .word .LC104
 5946 09ec 78050000 	 .word .LC105
 5947 09f0 88050000 	 .word .LC106
 5948 09f4 98050000 	 .word .LC107
 5949 09f8 A8050000 	 .word .LC108
 5950 09fc C0050000 	 .word .LC109
 5951 0a00 D4050000 	 .word .LC110
 5952 0a04 F0050000 	 .word .LC111
 5953 0a08 0C060000 	 .word .LC112
 5954 0a0c 20060000 	 .word .LC113
 5955 0a10 34060000 	 .word .LC114
 5956 0a14 48060000 	 .word .LC115
 5957 0a18 58060000 	 .word .LC116
 5958 0a1c 6C060000 	 .word .LC117
 5959 0a20 78060000 	 .word .LC118
 5960 0a24 84060000 	 .word .LC119
 5961              	.L346:
1329:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_smoothing_debug_axis", "%d",         rxConfig()->rc_smoothin
 5962              	 .loc 16 1329 0
 5963 0a28 FFF7FEFF 	 bl rxConfig
 5964 0a2c 0346     	 mov r3,r0
 5965 0a2e 93F82730 	 ldrb r3,[r3,#39]
 5966 0a32 2648     	 ldr r0,.L362
 5967 0a34 2649     	 ldr r1,.L362+4
 5968 0a36 1A46     	 mov r2,r3
 5969 0a38 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5970 0a3c 3BE0     	 b .L351
 5971              	.L347:
1330:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_smoothing_cutoffs", "%d, %d",        rxConfig()->rc_smoothin
 5972              	 .loc 16 1330 0
 5973 0a3e FFF7FEFF 	 bl rxConfig
 5974 0a42 0346     	 mov r3,r0
 5975 0a44 93F82530 	 ldrb r3,[r3,#37]
 5976 0a48 1C46     	 mov r4,r3
 5977 0a4a FFF7FEFF 	 bl rxConfig
 5978 0a4e 0346     	 mov r3,r0
 5979 0a50 93F82630 	 ldrb r3,[r3,#38]
 5980 0a54 1F48     	 ldr r0,.L362+8
 5981 0a56 2049     	 ldr r1,.L362+12
 5982 0a58 2246     	 mov r2,r4
 5983 0a5a FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5984 0a5e 2AE0     	 b .L351
 5985              	.L348:
1331:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             rxConfig()->rc_smoothin
1332:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_smoothing_filter_type", "%d, %d",    rxConfig()->rc_smoothin
 5986              	 .loc 16 1332 0
 5987 0a60 FFF7FEFF 	 bl rxConfig
 5988 0a64 0346     	 mov r3,r0
 5989 0a66 93F82830 	 ldrb r3,[r3,#40]
 5990 0a6a 1C46     	 mov r4,r3
 5991 0a6c FFF7FEFF 	 bl rxConfig
 5992 0a70 0346     	 mov r3,r0
 5993 0a72 93F82930 	 ldrb r3,[r3,#41]
 5994 0a76 1948     	 ldr r0,.L362+16
 5995 0a78 1749     	 ldr r1,.L362+12
 5996 0a7a 2246     	 mov r2,r4
 5997 0a7c FFF7FEFF 	 bl blackboxPrintfHeaderLine
 5998 0a80 19E0     	 b .L351
 5999              	.L349:
1333:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             rxConfig()->rc_smoothin
1334:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_smoothing_active_cutoffs", "%d, %d", rcSmoothingGetValue(RC_
 6000              	 .loc 16 1334 0
 6001 0a82 0020     	 movs r0,#0
 6002 0a84 FFF7FEFF 	 bl rcSmoothingGetValue
 6003 0a88 0446     	 mov r4,r0
 6004 0a8a 0120     	 movs r0,#1
 6005 0a8c FFF7FEFF 	 bl rcSmoothingGetValue
 6006 0a90 0346     	 mov r3,r0
 6007 0a92 1348     	 ldr r0,.L362+20
 6008 0a94 1049     	 ldr r1,.L362+12
 6009 0a96 2246     	 mov r2,r4
 6010 0a98 FFF7FEFF 	 bl blackboxPrintfHeaderLine
 6011 0a9c 0BE0     	 b .L351
 6012              	.L350:
1335:../cleanflight/src/main/blackbox/blackbox.c ****                                                                             rcSmoothingGetValue(RC_
1336:../cleanflight/src/main/blackbox/blackbox.c ****         BLACKBOX_PRINT_HEADER_LINE("rc_smoothing_rx_average", "%d",         rcSmoothingGetValue(RC_
 6013              	 .loc 16 1336 0
 6014 0a9e 0220     	 movs r0,#2
 6015 0aa0 FFF7FEFF 	 bl rcSmoothingGetValue
 6016 0aa4 0346     	 mov r3,r0
 6017 0aa6 0F48     	 ldr r0,.L362+24
 6018 0aa8 0949     	 ldr r1,.L362+4
 6019 0aaa 1A46     	 mov r2,r3
 6020 0aac FFF7FEFF 	 bl blackboxPrintfHeaderLine
 6021 0ab0 01E0     	 b .L351
 6022              	.L269:
1337:../cleanflight/src/main/blackbox/blackbox.c **** #endif // USE_RC_SMOOTHING_FILTER
1338:../cleanflight/src/main/blackbox/blackbox.c **** 
1339:../cleanflight/src/main/blackbox/blackbox.c **** 
1340:../cleanflight/src/main/blackbox/blackbox.c ****         default:
1341:../cleanflight/src/main/blackbox/blackbox.c ****             return true;
 6023              	 .loc 16 1341 0
 6024 0ab2 0123     	 movs r3,#1
 6025 0ab4 05E0     	 b .L355
 6026              	.L351:
1342:../cleanflight/src/main/blackbox/blackbox.c ****     }
1343:../cleanflight/src/main/blackbox/blackbox.c **** 
1344:../cleanflight/src/main/blackbox/blackbox.c ****     xmitState.headerIndex++;
 6027              	 .loc 16 1344 0
 6028 0ab6 0C4B     	 ldr r3,.L362+28
 6029 0ab8 1B68     	 ldr r3,[r3]
 6030 0aba 0133     	 adds r3,r3,#1
 6031 0abc 0A4A     	 ldr r2,.L362+28
 6032 0abe 1360     	 str r3,[r2]
1345:../cleanflight/src/main/blackbox/blackbox.c **** #endif // UNIT_TEST
1346:../cleanflight/src/main/blackbox/blackbox.c ****     return false;
 6033              	 .loc 16 1346 0
 6034 0ac0 0023     	 movs r3,#0
 6035              	.L355:
1347:../cleanflight/src/main/blackbox/blackbox.c **** }
 6036              	 .loc 16 1347 0 discriminator 1
 6037 0ac2 1846     	 mov r0,r3
 6038 0ac4 2837     	 adds r7,r7,#40
 6039              	.LCFI181:
 6040              	 .cfi_def_cfa_offset 16
 6041 0ac6 BD46     	 mov sp,r7
 6042              	.LCFI182:
 6043              	 .cfi_def_cfa_register 13
 6044              	 
 6045 0ac8 B0BD     	 pop {r4,r5,r7,pc}
 6046              	.L363:
 6047 0aca 00BF     	 .align 2
 6048              	.L362:
 6049 0acc 98060000 	 .word .LC120
 6050 0ad0 90010000 	 .word .LC34
 6051 0ad4 B0060000 	 .word .LC121
 6052 0ad8 C8060000 	 .word .LC122
 6053 0adc D0060000 	 .word .LC123
 6054 0ae0 EC060000 	 .word .LC124
 6055 0ae4 08070000 	 .word .LC125
 6056 0ae8 00000000 	 .word xmitState
 6057              	 .cfi_endproc
 6058              	.LFE632:
 6060              	 .section .rodata
 6061              	 .align 2
 6062              	.LC126:
 6063 0720 456E6420 	 .ascii "End of log\000"
 6063      6F66206C 
 6063      6F6700
 6064 072b 00       	 .section .text.blackboxLogEvent,"ax",%progbits
 6065              	 .align 2
 6066              	 .global blackboxLogEvent
 6067              	 .thumb
 6068              	 .thumb_func
 6070              	blackboxLogEvent:
 6071              	.LFB633:
1348:../cleanflight/src/main/blackbox/blackbox.c **** 
1349:../cleanflight/src/main/blackbox/blackbox.c **** /**
1350:../cleanflight/src/main/blackbox/blackbox.c ****  * Write the given event to the log immediately
1351:../cleanflight/src/main/blackbox/blackbox.c ****  */
1352:../cleanflight/src/main/blackbox/blackbox.c **** void blackboxLogEvent(FlightLogEvent event, flightLogEventData_t *data)
1353:../cleanflight/src/main/blackbox/blackbox.c **** {
 6072              	 .loc 16 1353 0
 6073              	 .cfi_startproc
 6074              	 
 6075              	 
 6076 0000 80B5     	 push {r7,lr}
 6077              	.LCFI183:
 6078              	 .cfi_def_cfa_offset 8
 6079              	 .cfi_offset 7,-8
 6080              	 .cfi_offset 14,-4
 6081 0002 82B0     	 sub sp,sp,#8
 6082              	.LCFI184:
 6083              	 .cfi_def_cfa_offset 16
 6084 0004 00AF     	 add r7,sp,#0
 6085              	.LCFI185:
 6086              	 .cfi_def_cfa_register 7
 6087 0006 0346     	 mov r3,r0
 6088 0008 3960     	 str r1,[r7]
 6089 000a FB71     	 strb r3,[r7,#7]
1354:../cleanflight/src/main/blackbox/blackbox.c ****     // Only allow events to be logged after headers have been written
1355:../cleanflight/src/main/blackbox/blackbox.c ****     if (!(blackboxState == BLACKBOX_STATE_RUNNING || blackboxState == BLACKBOX_STATE_PAUSED)) {
 6090              	 .loc 16 1355 0
 6091 000c 304B     	 ldr r3,.L375
 6092 000e 1B78     	 ldrb r3,[r3]
 6093 0010 0A2B     	 cmp r3,#10
 6094 0012 04D0     	 beq .L365
 6095              	 .loc 16 1355 0 is_stmt 0 discriminator 1
 6096 0014 2E4B     	 ldr r3,.L375
 6097 0016 1B78     	 ldrb r3,[r3]
 6098 0018 092B     	 cmp r3,#9
 6099 001a 00D0     	 beq .L365
1356:../cleanflight/src/main/blackbox/blackbox.c ****         return;
 6100              	 .loc 16 1356 0 is_stmt 1
 6101 001c 54E0     	 b .L364
 6102              	.L365:
1357:../cleanflight/src/main/blackbox/blackbox.c ****     }
1358:../cleanflight/src/main/blackbox/blackbox.c **** 
1359:../cleanflight/src/main/blackbox/blackbox.c ****     //Shared header for event frames
1360:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWrite('E');
 6103              	 .loc 16 1360 0
 6104 001e 4520     	 movs r0,#69
 6105 0020 FFF7FEFF 	 bl blackboxWrite
1361:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxWrite(event);
 6106              	 .loc 16 1361 0
 6107 0024 FB79     	 ldrb r3,[r7,#7]
 6108 0026 1846     	 mov r0,r3
 6109 0028 FFF7FEFF 	 bl blackboxWrite
1362:../cleanflight/src/main/blackbox/blackbox.c **** 
1363:../cleanflight/src/main/blackbox/blackbox.c ****     //Now serialize the data for this specific frame type
1364:../cleanflight/src/main/blackbox/blackbox.c ****     switch (event) {
 6110              	 .loc 16 1364 0
 6111 002c FB79     	 ldrb r3,[r7,#7]
 6112 002e 0E2B     	 cmp r3,#14
 6113 0030 38D0     	 beq .L367
 6114 0032 0E2B     	 cmp r3,#14
 6115 0034 04DC     	 bgt .L368
 6116 0036 002B     	 cmp r3,#0
 6117 0038 07D0     	 beq .L369
 6118 003a 0D2B     	 cmp r3,#13
 6119 003c 16D0     	 beq .L370
 6120 003e 43E0     	 b .L364
 6121              	.L368:
 6122 0040 1E2B     	 cmp r3,#30
 6123 0042 08D0     	 beq .L371
 6124 0044 FF2B     	 cmp r3,#255
 6125 0046 38D0     	 beq .L372
 6126 0048 3EE0     	 b .L364
 6127              	.L369:
1365:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_EVENT_SYNC_BEEP:
1366:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteUnsignedVB(data->syncBeep.time);
 6128              	 .loc 16 1366 0
 6129 004a 3B68     	 ldr r3,[r7]
 6130 004c 1B68     	 ldr r3,[r3]
 6131 004e 1846     	 mov r0,r3
 6132 0050 FFF7FEFF 	 bl blackboxWriteUnsignedVB
1367:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6133              	 .loc 16 1367 0
 6134 0054 38E0     	 b .L364
 6135              	.L371:
1368:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_EVENT_FLIGHTMODE: // New flightmode flags write
1369:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteUnsignedVB(data->flightMode.flags);
 6136              	 .loc 16 1369 0
 6137 0056 3B68     	 ldr r3,[r7]
 6138 0058 1B68     	 ldr r3,[r3]
 6139 005a 1846     	 mov r0,r3
 6140 005c FFF7FEFF 	 bl blackboxWriteUnsignedVB
1370:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteUnsignedVB(data->flightMode.lastFlags);
 6141              	 .loc 16 1370 0
 6142 0060 3B68     	 ldr r3,[r7]
 6143 0062 5B68     	 ldr r3,[r3,#4]
 6144 0064 1846     	 mov r0,r3
 6145 0066 FFF7FEFF 	 bl blackboxWriteUnsignedVB
1371:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6146              	 .loc 16 1371 0
 6147 006a 2DE0     	 b .L364
 6148              	.L370:
1372:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_EVENT_INFLIGHT_ADJUSTMENT:
1373:../cleanflight/src/main/blackbox/blackbox.c ****         if (data->inflightAdjustment.floatFlag) {
 6149              	 .loc 16 1373 0
 6150 006c 3B68     	 ldr r3,[r7]
 6151 006e 5B7A     	 ldrb r3,[r3,#9]
 6152 0070 002B     	 cmp r3,#0
 6153 0072 0CD0     	 beq .L373
1374:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxWrite(data->inflightAdjustment.adjustmentFunction + FLIGHT_LOG_EVENT_INFLIGHT_A
 6154              	 .loc 16 1374 0
 6155 0074 3B68     	 ldr r3,[r7]
 6156 0076 1B7A     	 ldrb r3,[r3,#8]
 6157 0078 803B     	 subs r3,r3,#128
 6158 007a DBB2     	 uxtb r3,r3
 6159 007c 1846     	 mov r0,r3
 6160 007e FFF7FEFF 	 bl blackboxWrite
1375:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxWriteFloat(data->inflightAdjustment.newFloatValue);
 6161              	 .loc 16 1375 0
 6162 0082 3B68     	 ldr r3,[r7]
 6163 0084 5B68     	 ldr r3,[r3,#4]
 6164 0086 1846     	 mov r0,r3
 6165 0088 FFF7FEFF 	 bl blackboxWriteFloat
1376:../cleanflight/src/main/blackbox/blackbox.c ****         } else {
1377:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxWrite(data->inflightAdjustment.adjustmentFunction);
1378:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxWriteSignedVB(data->inflightAdjustment.newValue);
1379:../cleanflight/src/main/blackbox/blackbox.c ****         }
1380:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6166              	 .loc 16 1380 0
 6167 008c 1CE0     	 b .L364
 6168              	.L373:
1377:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxWriteSignedVB(data->inflightAdjustment.newValue);
 6169              	 .loc 16 1377 0
 6170 008e 3B68     	 ldr r3,[r7]
 6171 0090 1B7A     	 ldrb r3,[r3,#8]
 6172 0092 1846     	 mov r0,r3
 6173 0094 FFF7FEFF 	 bl blackboxWrite
1378:../cleanflight/src/main/blackbox/blackbox.c ****         }
 6174              	 .loc 16 1378 0
 6175 0098 3B68     	 ldr r3,[r7]
 6176 009a 1B68     	 ldr r3,[r3]
 6177 009c 1846     	 mov r0,r3
 6178 009e FFF7FEFF 	 bl blackboxWriteSignedVB
 6179              	 .loc 16 1380 0
 6180 00a2 11E0     	 b .L364
 6181              	.L367:
1381:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_EVENT_LOGGING_RESUME:
1382:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteUnsignedVB(data->loggingResume.logIteration);
 6182              	 .loc 16 1382 0
 6183 00a4 3B68     	 ldr r3,[r7]
 6184 00a6 1B68     	 ldr r3,[r3]
 6185 00a8 1846     	 mov r0,r3
 6186 00aa FFF7FEFF 	 bl blackboxWriteUnsignedVB
1383:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteUnsignedVB(data->loggingResume.currentTime);
 6187              	 .loc 16 1383 0
 6188 00ae 3B68     	 ldr r3,[r7]
 6189 00b0 5B68     	 ldr r3,[r3,#4]
 6190 00b2 1846     	 mov r0,r3
 6191 00b4 FFF7FEFF 	 bl blackboxWriteUnsignedVB
1384:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6192              	 .loc 16 1384 0
 6193 00b8 06E0     	 b .L364
 6194              	.L372:
1385:../cleanflight/src/main/blackbox/blackbox.c ****     case FLIGHT_LOG_EVENT_LOG_END:
1386:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWriteString("End of log");
 6195              	 .loc 16 1386 0
 6196 00ba 0648     	 ldr r0,.L375+4
 6197 00bc FFF7FEFF 	 bl blackboxWriteString
1387:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxWrite(0);
 6198              	 .loc 16 1387 0
 6199 00c0 0020     	 movs r0,#0
 6200 00c2 FFF7FEFF 	 bl blackboxWrite
1388:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6201              	 .loc 16 1388 0
 6202 00c6 00BF     	 nop
 6203              	.L364:
1389:../cleanflight/src/main/blackbox/blackbox.c ****     }
1390:../cleanflight/src/main/blackbox/blackbox.c **** }
 6204              	 .loc 16 1390 0
 6205 00c8 0837     	 adds r7,r7,#8
 6206              	.LCFI186:
 6207              	 .cfi_def_cfa_offset 8
 6208 00ca BD46     	 mov sp,r7
 6209              	.LCFI187:
 6210              	 .cfi_def_cfa_register 13
 6211              	 
 6212 00cc 80BD     	 pop {r7,pc}
 6213              	.L376:
 6214 00ce 00BF     	 .align 2
 6215              	.L375:
 6216 00d0 00000000 	 .word blackboxState
 6217 00d4 20070000 	 .word .LC126
 6218              	 .cfi_endproc
 6219              	.LFE633:
 6221              	 .section .text.blackboxCheckAndLogArmingBeep,"ax",%progbits
 6222              	 .align 2
 6223              	 .thumb
 6224              	 .thumb_func
 6226              	blackboxCheckAndLogArmingBeep:
 6227              	.LFB634:
1391:../cleanflight/src/main/blackbox/blackbox.c **** 
1392:../cleanflight/src/main/blackbox/blackbox.c **** /* If an arming beep has played since it was last logged, write the time of the arming beep to the 
1393:../cleanflight/src/main/blackbox/blackbox.c **** static void blackboxCheckAndLogArmingBeep(void)
1394:../cleanflight/src/main/blackbox/blackbox.c **** {
 6228              	 .loc 16 1394 0
 6229              	 .cfi_startproc
 6230              	 
 6231              	 
 6232 0000 80B5     	 push {r7,lr}
 6233              	.LCFI188:
 6234              	 .cfi_def_cfa_offset 8
 6235              	 .cfi_offset 7,-8
 6236              	 .cfi_offset 14,-4
 6237 0002 82B0     	 sub sp,sp,#8
 6238              	.LCFI189:
 6239              	 .cfi_def_cfa_offset 16
 6240 0004 00AF     	 add r7,sp,#0
 6241              	.LCFI190:
 6242              	 .cfi_def_cfa_register 7
1395:../cleanflight/src/main/blackbox/blackbox.c ****     // Use != so that we can still detect a change if the counter wraps
1396:../cleanflight/src/main/blackbox/blackbox.c ****     if (getArmingBeepTimeMicros() != blackboxLastArmingBeep) {
 6243              	 .loc 16 1396 0
 6244 0006 FFF7FEFF 	 bl getArmingBeepTimeMicros
 6245 000a 0246     	 mov r2,r0
 6246 000c 094B     	 ldr r3,.L379
 6247 000e 1B68     	 ldr r3,[r3]
 6248 0010 9A42     	 cmp r2,r3
 6249 0012 0CD0     	 beq .L377
 6250              	.LBB18:
1397:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxLastArmingBeep = getArmingBeepTimeMicros();
 6251              	 .loc 16 1397 0
 6252 0014 FFF7FEFF 	 bl getArmingBeepTimeMicros
 6253 0018 0246     	 mov r2,r0
 6254 001a 064B     	 ldr r3,.L379
 6255 001c 1A60     	 str r2,[r3]
1398:../cleanflight/src/main/blackbox/blackbox.c ****         flightLogEvent_syncBeep_t eventData;
1399:../cleanflight/src/main/blackbox/blackbox.c ****         eventData.time = blackboxLastArmingBeep;
 6256              	 .loc 16 1399 0
 6257 001e 054B     	 ldr r3,.L379
 6258 0020 1B68     	 ldr r3,[r3]
 6259 0022 7B60     	 str r3,[r7,#4]
1400:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxLogEvent(FLIGHT_LOG_EVENT_SYNC_BEEP, (flightLogEventData_t *)&eventData);
 6260              	 .loc 16 1400 0
 6261 0024 3B1D     	 adds r3,r7,#4
 6262 0026 0020     	 movs r0,#0
 6263 0028 1946     	 mov r1,r3
 6264 002a FFF7FEFF 	 bl blackboxLogEvent
 6265              	.L377:
 6266              	.LBE18:
1401:../cleanflight/src/main/blackbox/blackbox.c ****     }
1402:../cleanflight/src/main/blackbox/blackbox.c **** }
 6267              	 .loc 16 1402 0
 6268 002e 0837     	 adds r7,r7,#8
 6269              	.LCFI191:
 6270              	 .cfi_def_cfa_offset 8
 6271 0030 BD46     	 mov sp,r7
 6272              	.LCFI192:
 6273              	 .cfi_def_cfa_register 13
 6274              	 
 6275 0032 80BD     	 pop {r7,pc}
 6276              	.L380:
 6277              	 .align 2
 6278              	.L379:
 6279 0034 00000000 	 .word blackboxLastArmingBeep
 6280              	 .cfi_endproc
 6281              	.LFE634:
 6283              	 .section .text.blackboxCheckAndLogFlightMode,"ax",%progbits
 6284              	 .align 2
 6285              	 .thumb
 6286              	 .thumb_func
 6288              	blackboxCheckAndLogFlightMode:
 6289              	.LFB635:
1403:../cleanflight/src/main/blackbox/blackbox.c **** 
1404:../cleanflight/src/main/blackbox/blackbox.c **** /* monitor the flight mode event status and trigger an event record if the state changes */
1405:../cleanflight/src/main/blackbox/blackbox.c **** static void blackboxCheckAndLogFlightMode(void)
1406:../cleanflight/src/main/blackbox/blackbox.c **** {
 6290              	 .loc 16 1406 0
 6291              	 .cfi_startproc
 6292              	 
 6293              	 
 6294 0000 80B5     	 push {r7,lr}
 6295              	.LCFI193:
 6296              	 .cfi_def_cfa_offset 8
 6297              	 .cfi_offset 7,-8
 6298              	 .cfi_offset 14,-4
 6299 0002 82B0     	 sub sp,sp,#8
 6300              	.LCFI194:
 6301              	 .cfi_def_cfa_offset 16
 6302 0004 00AF     	 add r7,sp,#0
 6303              	.LCFI195:
 6304              	 .cfi_def_cfa_register 7
1407:../cleanflight/src/main/blackbox/blackbox.c ****     // Use != so that we can still detect a change if the counter wraps
1408:../cleanflight/src/main/blackbox/blackbox.c ****     if (memcmp(&rcModeActivationMask, &blackboxLastFlightModeFlags, sizeof(blackboxLastFlightModeFl
 6305              	 .loc 16 1408 0
 6306 0006 0F48     	 ldr r0,.L383
 6307 0008 0F49     	 ldr r1,.L383+4
 6308 000a 0422     	 movs r2,#4
 6309 000c FFF7FEFF 	 bl memcmp
 6310 0010 0346     	 mov r3,r0
 6311 0012 002B     	 cmp r3,#0
 6312 0014 12D0     	 beq .L381
 6313              	.LBB19:
1409:../cleanflight/src/main/blackbox/blackbox.c ****         flightLogEvent_flightMode_t eventData; // Add new data for current flight mode flags
1410:../cleanflight/src/main/blackbox/blackbox.c ****         eventData.lastFlags = blackboxLastFlightModeFlags;
 6314              	 .loc 16 1410 0
 6315 0016 0C4B     	 ldr r3,.L383+4
 6316 0018 1B68     	 ldr r3,[r3]
 6317 001a 7B60     	 str r3,[r7,#4]
1411:../cleanflight/src/main/blackbox/blackbox.c ****         memcpy(&blackboxLastFlightModeFlags, &rcModeActivationMask, sizeof(blackboxLastFlightModeFl
 6318              	 .loc 16 1411 0
 6319 001c 0A48     	 ldr r0,.L383+4
 6320 001e 0949     	 ldr r1,.L383
 6321 0020 0422     	 movs r2,#4
 6322 0022 FFF7FEFF 	 bl memcpy
1412:../cleanflight/src/main/blackbox/blackbox.c ****         memcpy(&eventData.flags, &rcModeActivationMask, sizeof(eventData.flags));
 6323              	 .loc 16 1412 0
 6324 0026 3B46     	 mov r3,r7
 6325 0028 1846     	 mov r0,r3
 6326 002a 0649     	 ldr r1,.L383
 6327 002c 0422     	 movs r2,#4
 6328 002e FFF7FEFF 	 bl memcpy
1413:../cleanflight/src/main/blackbox/blackbox.c **** 
1414:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxLogEvent(FLIGHT_LOG_EVENT_FLIGHTMODE, (flightLogEventData_t *)&eventData);
 6329              	 .loc 16 1414 0
 6330 0032 3B46     	 mov r3,r7
 6331 0034 1E20     	 movs r0,#30
 6332 0036 1946     	 mov r1,r3
 6333 0038 FFF7FEFF 	 bl blackboxLogEvent
 6334              	.L381:
 6335              	.LBE19:
1415:../cleanflight/src/main/blackbox/blackbox.c ****     }
1416:../cleanflight/src/main/blackbox/blackbox.c **** }
 6336              	 .loc 16 1416 0
 6337 003c 0837     	 adds r7,r7,#8
 6338              	.LCFI196:
 6339              	 .cfi_def_cfa_offset 8
 6340 003e BD46     	 mov sp,r7
 6341              	.LCFI197:
 6342              	 .cfi_def_cfa_register 13
 6343              	 
 6344 0040 80BD     	 pop {r7,pc}
 6345              	.L384:
 6346 0042 00BF     	 .align 2
 6347              	.L383:
 6348 0044 00000000 	 .word rcModeActivationMask
 6349 0048 00000000 	 .word blackboxLastFlightModeFlags
 6350              	 .cfi_endproc
 6351              	.LFE635:
 6353              	 .section .text.blackboxShouldLogPFrame,"ax",%progbits
 6354              	 .align 2
 6355              	 .thumb
 6356              	 .thumb_func
 6358              	blackboxShouldLogPFrame:
 6359              	.LFB636:
1417:../cleanflight/src/main/blackbox/blackbox.c **** 
1418:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED bool blackboxShouldLogPFrame(void)
1419:../cleanflight/src/main/blackbox/blackbox.c **** {
 6360              	 .loc 16 1419 0
 6361              	 .cfi_startproc
 6362              	 
 6363              	 
 6364 0000 80B5     	 push {r7,lr}
 6365              	.LCFI198:
 6366              	 .cfi_def_cfa_offset 8
 6367              	 .cfi_offset 7,-8
 6368              	 .cfi_offset 14,-4
 6369 0002 00AF     	 add r7,sp,#0
 6370              	.LCFI199:
 6371              	 .cfi_def_cfa_register 7
1420:../cleanflight/src/main/blackbox/blackbox.c ****     return blackboxPFrameIndex == 0 && blackboxConfig()->p_ratio != 0;
 6372              	 .loc 16 1420 0
 6373 0004 094B     	 ldr r3,.L389
 6374 0006 1B88     	 ldrh r3,[r3]
 6375 0008 002B     	 cmp r3,#0
 6376 000a 08D1     	 bne .L386
 6377              	 .loc 16 1420 0 is_stmt 0 discriminator 1
 6378 000c FFF7FEFF 	 bl blackboxConfig
 6379 0010 0346     	 mov r3,r0
 6380 0012 1B88     	 ldrh r3,[r3]
 6381 0014 9BB2     	 uxth r3,r3
 6382 0016 002B     	 cmp r3,#0
 6383 0018 01D0     	 beq .L386
 6384              	 .loc 16 1420 0 discriminator 3
 6385 001a 0123     	 movs r3,#1
 6386 001c 00E0     	 b .L387
 6387              	.L386:
 6388              	 .loc 16 1420 0 discriminator 4
 6389 001e 0023     	 movs r3,#0
 6390              	.L387:
 6391              	 .loc 16 1420 0 discriminator 6
 6392 0020 03F00103 	 and r3,r3,#1
 6393 0024 DBB2     	 uxtb r3,r3
1421:../cleanflight/src/main/blackbox/blackbox.c **** }
 6394              	 .loc 16 1421 0 is_stmt 1 discriminator 6
 6395 0026 1846     	 mov r0,r3
 6396 0028 80BD     	 pop {r7,pc}
 6397              	.L390:
 6398 002a 00BF     	 .align 2
 6399              	.L389:
 6400 002c 00000000 	 .word blackboxPFrameIndex
 6401              	 .cfi_endproc
 6402              	.LFE636:
 6404              	 .section .text.blackboxShouldLogIFrame,"ax",%progbits
 6405              	 .align 2
 6406              	 .thumb
 6407              	 .thumb_func
 6409              	blackboxShouldLogIFrame:
 6410              	.LFB637:
1422:../cleanflight/src/main/blackbox/blackbox.c **** 
1423:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED bool blackboxShouldLogIFrame(void)
1424:../cleanflight/src/main/blackbox/blackbox.c **** {
 6411              	 .loc 16 1424 0
 6412              	 .cfi_startproc
 6413              	 
 6414              	 
 6415              	 
 6416 0000 80B4     	 push {r7}
 6417              	.LCFI200:
 6418              	 .cfi_def_cfa_offset 4
 6419              	 .cfi_offset 7,-4
 6420 0002 00AF     	 add r7,sp,#0
 6421              	.LCFI201:
 6422              	 .cfi_def_cfa_register 7
1425:../cleanflight/src/main/blackbox/blackbox.c ****     return blackboxLoopIndex == 0;
 6423              	 .loc 16 1425 0
 6424 0004 054B     	 ldr r3,.L393
 6425 0006 1B88     	 ldrh r3,[r3]
 6426 0008 002B     	 cmp r3,#0
 6427 000a 0CBF     	 ite eq
 6428 000c 0123     	 moveq r3,#1
 6429 000e 0023     	 movne r3,#0
 6430 0010 DBB2     	 uxtb r3,r3
1426:../cleanflight/src/main/blackbox/blackbox.c **** }
 6431              	 .loc 16 1426 0
 6432 0012 1846     	 mov r0,r3
 6433 0014 BD46     	 mov sp,r7
 6434              	.LCFI202:
 6435              	 .cfi_def_cfa_register 13
 6436              	 
 6437 0016 5DF8047B 	 ldr r7,[sp],#4
 6438              	.LCFI203:
 6439              	 .cfi_restore 7
 6440              	 .cfi_def_cfa_offset 0
 6441 001a 7047     	 bx lr
 6442              	.L394:
 6443              	 .align 2
 6444              	.L393:
 6445 001c 00000000 	 .word blackboxLoopIndex
 6446              	 .cfi_endproc
 6447              	.LFE637:
 6449              	 .section .text.blackboxShouldLogGpsHomeFrame,"ax",%progbits
 6450              	 .align 2
 6451              	 .thumb
 6452              	 .thumb_func
 6454              	blackboxShouldLogGpsHomeFrame:
 6455              	.LFB638:
1427:../cleanflight/src/main/blackbox/blackbox.c **** 
1428:../cleanflight/src/main/blackbox/blackbox.c **** /*
1429:../cleanflight/src/main/blackbox/blackbox.c ****  * If the GPS home point has been updated, or every 128 I-frames (~10 seconds), write the
1430:../cleanflight/src/main/blackbox/blackbox.c ****  * GPS home position.
1431:../cleanflight/src/main/blackbox/blackbox.c ****  *
1432:../cleanflight/src/main/blackbox/blackbox.c ****  * We write it periodically so that if one Home Frame goes missing, the GPS coordinates can
1433:../cleanflight/src/main/blackbox/blackbox.c ****  * still be interpreted correctly.
1434:../cleanflight/src/main/blackbox/blackbox.c ****  */
1435:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_GPS
1436:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED bool blackboxShouldLogGpsHomeFrame(void)
1437:../cleanflight/src/main/blackbox/blackbox.c **** {
 6456              	 .loc 16 1437 0
 6457              	 .cfi_startproc
 6458              	 
 6459              	 
 6460              	 
 6461 0000 80B4     	 push {r7}
 6462              	.LCFI204:
 6463              	 .cfi_def_cfa_offset 4
 6464              	 .cfi_offset 7,-4
 6465 0002 00AF     	 add r7,sp,#0
 6466              	.LCFI205:
 6467              	 .cfi_def_cfa_register 7
1438:../cleanflight/src/main/blackbox/blackbox.c ****     if (GPS_home[0] != gpsHistory.GPS_home[0] || GPS_home[1] != gpsHistory.GPS_home[1]
 6468              	 .loc 16 1438 0
 6469 0004 134B     	 ldr r3,.L399
 6470 0006 1A68     	 ldr r2,[r3]
 6471 0008 134B     	 ldr r3,.L399+4
 6472 000a 1B68     	 ldr r3,[r3]
 6473 000c 9A42     	 cmp r2,r3
 6474 000e 19D1     	 bne .L396
 6475              	 .loc 16 1438 0 is_stmt 0 discriminator 1
 6476 0010 104B     	 ldr r3,.L399
 6477 0012 5A68     	 ldr r2,[r3,#4]
 6478 0014 104B     	 ldr r3,.L399+4
 6479 0016 5B68     	 ldr r3,[r3,#4]
 6480 0018 9A42     	 cmp r2,r3
 6481 001a 13D1     	 bne .L396
1439:../cleanflight/src/main/blackbox/blackbox.c ****         || (blackboxPFrameIndex == blackboxIInterval / 2 && blackboxIFrameIndex % 128 == 0)) {
 6482              	 .loc 16 1439 0 is_stmt 1
 6483 001c 0F4B     	 ldr r3,.L399+8
 6484 001e 1B88     	 ldrh r3,[r3]
 6485 0020 1946     	 mov r1,r3
 6486 0022 0F4B     	 ldr r3,.L399+12
 6487 0024 1B88     	 ldrh r3,[r3]
 6488 0026 1BB2     	 sxth r3,r3
 6489 0028 DA0F     	 lsrs r2,r3,#31
 6490 002a 1344     	 add r3,r3,r2
 6491 002c 5B10     	 asrs r3,r3,#1
 6492 002e 9BB2     	 uxth r3,r3
 6493 0030 1BB2     	 sxth r3,r3
 6494 0032 9942     	 cmp r1,r3
 6495 0034 08D1     	 bne .L397
 6496              	 .loc 16 1439 0 is_stmt 0 discriminator 1
 6497 0036 0B4B     	 ldr r3,.L399+16
 6498 0038 1B88     	 ldrh r3,[r3]
 6499 003a 03F07F03 	 and r3,r3,#127
 6500 003e 9BB2     	 uxth r3,r3
 6501 0040 002B     	 cmp r3,#0
 6502 0042 01D1     	 bne .L397
 6503              	.L396:
1440:../cleanflight/src/main/blackbox/blackbox.c ****         return true;
 6504              	 .loc 16 1440 0 is_stmt 1
 6505 0044 0123     	 movs r3,#1
 6506 0046 00E0     	 b .L398
 6507              	.L397:
1441:../cleanflight/src/main/blackbox/blackbox.c ****     }
1442:../cleanflight/src/main/blackbox/blackbox.c ****     return false;
 6508              	 .loc 16 1442 0
 6509 0048 0023     	 movs r3,#0
 6510              	.L398:
1443:../cleanflight/src/main/blackbox/blackbox.c **** }
 6511              	 .loc 16 1443 0
 6512 004a 1846     	 mov r0,r3
 6513 004c BD46     	 mov sp,r7
 6514              	.LCFI206:
 6515              	 .cfi_def_cfa_register 13
 6516              	 
 6517 004e 5DF8047B 	 ldr r7,[sp],#4
 6518              	.LCFI207:
 6519              	 .cfi_restore 7
 6520              	 .cfi_def_cfa_offset 0
 6521 0052 7047     	 bx lr
 6522              	.L400:
 6523              	 .align 2
 6524              	.L399:
 6525 0054 00000000 	 .word GPS_home
 6526 0058 00000000 	 .word gpsHistory
 6527 005c 00000000 	 .word blackboxPFrameIndex
 6528 0060 00000000 	 .word blackboxIInterval
 6529 0064 00000000 	 .word blackboxIFrameIndex
 6530              	 .cfi_endproc
 6531              	.LFE638:
 6533              	 .section .text.blackboxAdvanceIterationTimers,"ax",%progbits
 6534              	 .align 2
 6535              	 .thumb
 6536              	 .thumb_func
 6538              	blackboxAdvanceIterationTimers:
 6539              	.LFB639:
1444:../cleanflight/src/main/blackbox/blackbox.c **** #endif // GPS
1445:../cleanflight/src/main/blackbox/blackbox.c **** 
1446:../cleanflight/src/main/blackbox/blackbox.c **** // Called once every FC loop in order to keep track of how many FC loop iterations have passed
1447:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED void blackboxAdvanceIterationTimers(void)
1448:../cleanflight/src/main/blackbox/blackbox.c **** {
 6540              	 .loc 16 1448 0
 6541              	 .cfi_startproc
 6542              	 
 6543              	 
 6544              	 
 6545 0000 80B4     	 push {r7}
 6546              	.LCFI208:
 6547              	 .cfi_def_cfa_offset 4
 6548              	 .cfi_offset 7,-4
 6549 0002 00AF     	 add r7,sp,#0
 6550              	.LCFI209:
 6551              	 .cfi_def_cfa_register 7
1449:../cleanflight/src/main/blackbox/blackbox.c ****     ++blackboxSlowFrameIterationTimer;
 6552              	 .loc 16 1449 0
 6553 0004 1C4B     	 ldr r3,.L404
 6554 0006 1B68     	 ldr r3,[r3]
 6555 0008 0133     	 adds r3,r3,#1
 6556 000a 1B4A     	 ldr r2,.L404
 6557 000c 1360     	 str r3,[r2]
1450:../cleanflight/src/main/blackbox/blackbox.c ****     ++blackboxIteration;
 6558              	 .loc 16 1450 0
 6559 000e 1B4B     	 ldr r3,.L404+4
 6560 0010 1B68     	 ldr r3,[r3]
 6561 0012 0133     	 adds r3,r3,#1
 6562 0014 194A     	 ldr r2,.L404+4
 6563 0016 1360     	 str r3,[r2]
1451:../cleanflight/src/main/blackbox/blackbox.c **** 
1452:../cleanflight/src/main/blackbox/blackbox.c ****     if (++blackboxLoopIndex >= blackboxIInterval) {
 6564              	 .loc 16 1452 0
 6565 0018 194B     	 ldr r3,.L404+8
 6566 001a 1B88     	 ldrh r3,[r3]
 6567 001c 0133     	 adds r3,r3,#1
 6568 001e 9AB2     	 uxth r2,r3
 6569 0020 174B     	 ldr r3,.L404+8
 6570 0022 1A80     	 strh r2,[r3]
 6571 0024 164B     	 ldr r3,.L404+8
 6572 0026 1B88     	 ldrh r3,[r3]
 6573 0028 1A46     	 mov r2,r3
 6574 002a 164B     	 ldr r3,.L404+12
 6575 002c 1B88     	 ldrh r3,[r3]
 6576 002e 1BB2     	 sxth r3,r3
 6577 0030 9A42     	 cmp r2,r3
 6578 0032 0CDB     	 blt .L402
1453:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxLoopIndex = 0;
 6579              	 .loc 16 1453 0
 6580 0034 124B     	 ldr r3,.L404+8
 6581 0036 0022     	 movs r2,#0
 6582 0038 1A80     	 strh r2,[r3]
1454:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxIFrameIndex++;
 6583              	 .loc 16 1454 0
 6584 003a 134B     	 ldr r3,.L404+16
 6585 003c 1B88     	 ldrh r3,[r3]
 6586 003e 0133     	 adds r3,r3,#1
 6587 0040 9AB2     	 uxth r2,r3
 6588 0042 114B     	 ldr r3,.L404+16
 6589 0044 1A80     	 strh r2,[r3]
1455:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxPFrameIndex = 0;
 6590              	 .loc 16 1455 0
 6591 0046 114B     	 ldr r3,.L404+20
 6592 0048 0022     	 movs r2,#0
 6593 004a 1A80     	 strh r2,[r3]
 6594 004c 10E0     	 b .L401
 6595              	.L402:
1456:../cleanflight/src/main/blackbox/blackbox.c ****     } else if (++blackboxPFrameIndex >= blackboxPInterval) {
 6596              	 .loc 16 1456 0
 6597 004e 0F4B     	 ldr r3,.L404+20
 6598 0050 1B88     	 ldrh r3,[r3]
 6599 0052 0133     	 adds r3,r3,#1
 6600 0054 9AB2     	 uxth r2,r3
 6601 0056 0D4B     	 ldr r3,.L404+20
 6602 0058 1A80     	 strh r2,[r3]
 6603 005a 0C4B     	 ldr r3,.L404+20
 6604 005c 1B88     	 ldrh r3,[r3]
 6605 005e 1A46     	 mov r2,r3
 6606 0060 0B4B     	 ldr r3,.L404+24
 6607 0062 1B88     	 ldrh r3,[r3]
 6608 0064 1BB2     	 sxth r3,r3
 6609 0066 9A42     	 cmp r2,r3
 6610 0068 02DB     	 blt .L401
1457:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxPFrameIndex = 0;
 6611              	 .loc 16 1457 0
 6612 006a 084B     	 ldr r3,.L404+20
 6613 006c 0022     	 movs r2,#0
 6614 006e 1A80     	 strh r2,[r3]
 6615              	.L401:
1458:../cleanflight/src/main/blackbox/blackbox.c ****     }
1459:../cleanflight/src/main/blackbox/blackbox.c **** }
 6616              	 .loc 16 1459 0
 6617 0070 BD46     	 mov sp,r7
 6618              	.LCFI210:
 6619              	 .cfi_def_cfa_register 13
 6620              	 
 6621 0072 5DF8047B 	 ldr r7,[sp],#4
 6622              	.LCFI211:
 6623              	 .cfi_restore 7
 6624              	 .cfi_def_cfa_offset 0
 6625 0076 7047     	 bx lr
 6626              	.L405:
 6627              	 .align 2
 6628              	.L404:
 6629 0078 00000000 	 .word blackboxSlowFrameIterationTimer
 6630 007c 00000000 	 .word blackboxIteration
 6631 0080 00000000 	 .word blackboxLoopIndex
 6632 0084 00000000 	 .word blackboxIInterval
 6633 0088 00000000 	 .word blackboxIFrameIndex
 6634 008c 00000000 	 .word blackboxPFrameIndex
 6635 0090 00000000 	 .word blackboxPInterval
 6636              	 .cfi_endproc
 6637              	.LFE639:
 6639              	 .section .text.blackboxLogIteration,"ax",%progbits
 6640              	 .align 2
 6641              	 .thumb
 6642              	 .thumb_func
 6644              	blackboxLogIteration:
 6645              	.LFB640:
1460:../cleanflight/src/main/blackbox/blackbox.c **** 
1461:../cleanflight/src/main/blackbox/blackbox.c **** // Called once every FC loop in order to log the current state
1462:../cleanflight/src/main/blackbox/blackbox.c **** STATIC_UNIT_TESTED void blackboxLogIteration(timeUs_t currentTimeUs)
1463:../cleanflight/src/main/blackbox/blackbox.c **** {
 6646              	 .loc 16 1463 0
 6647              	 .cfi_startproc
 6648              	 
 6649              	 
 6650 0000 80B5     	 push {r7,lr}
 6651              	.LCFI212:
 6652              	 .cfi_def_cfa_offset 8
 6653              	 .cfi_offset 7,-8
 6654              	 .cfi_offset 14,-4
 6655 0002 82B0     	 sub sp,sp,#8
 6656              	.LCFI213:
 6657              	 .cfi_def_cfa_offset 16
 6658 0004 00AF     	 add r7,sp,#0
 6659              	.LCFI214:
 6660              	 .cfi_def_cfa_register 7
 6661 0006 7860     	 str r0,[r7,#4]
1464:../cleanflight/src/main/blackbox/blackbox.c ****     // Write a keyframe every blackboxIInterval frames so we can resynchronise upon missing frames
1465:../cleanflight/src/main/blackbox/blackbox.c ****     if (blackboxShouldLogIFrame()) {
 6662              	 .loc 16 1465 0
 6663 0008 FFF7FEFF 	 bl blackboxShouldLogIFrame
 6664 000c 0346     	 mov r3,r0
 6665 000e 002B     	 cmp r3,#0
 6666 0010 0CD0     	 beq .L407
1466:../cleanflight/src/main/blackbox/blackbox.c ****         /*
1467:../cleanflight/src/main/blackbox/blackbox.c ****          * Don't log a slow frame if the slow data didn't change ("I" frames are already large enou
1468:../cleanflight/src/main/blackbox/blackbox.c ****          * an additional item to write at the same time). Unless we're *only* logging "I" frames, t
1469:../cleanflight/src/main/blackbox/blackbox.c ****          */
1470:../cleanflight/src/main/blackbox/blackbox.c ****         if (blackboxIsOnlyLoggingIntraframes()) {
 6667              	 .loc 16 1470 0
 6668 0012 FFF7FEFF 	 bl blackboxIsOnlyLoggingIntraframes
 6669 0016 0346     	 mov r3,r0
 6670 0018 002B     	 cmp r3,#0
 6671 001a 01D0     	 beq .L408
1471:../cleanflight/src/main/blackbox/blackbox.c ****             writeSlowFrameIfNeeded();
 6672              	 .loc 16 1471 0
 6673 001c FFF7FEFF 	 bl writeSlowFrameIfNeeded
 6674              	.L408:
1472:../cleanflight/src/main/blackbox/blackbox.c ****         }
1473:../cleanflight/src/main/blackbox/blackbox.c **** 
1474:../cleanflight/src/main/blackbox/blackbox.c ****         loadMainState(currentTimeUs);
 6675              	 .loc 16 1474 0
 6676 0020 7868     	 ldr r0,[r7,#4]
 6677 0022 FFF7FEFF 	 bl loadMainState
1475:../cleanflight/src/main/blackbox/blackbox.c ****         writeIntraframe();
 6678              	 .loc 16 1475 0
 6679 0026 FFF7FEFF 	 bl writeIntraframe
 6680 002a 35E0     	 b .L409
 6681              	.L407:
1476:../cleanflight/src/main/blackbox/blackbox.c ****     } else {
1477:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCheckAndLogArmingBeep();
 6682              	 .loc 16 1477 0
 6683 002c FFF7FEFF 	 bl blackboxCheckAndLogArmingBeep
1478:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxCheckAndLogFlightMode(); // Check for FlightMode status change event
 6684              	 .loc 16 1478 0
 6685 0030 FFF7FEFF 	 bl blackboxCheckAndLogFlightMode
1479:../cleanflight/src/main/blackbox/blackbox.c **** 
1480:../cleanflight/src/main/blackbox/blackbox.c ****         if (blackboxShouldLogPFrame()) {
 6686              	 .loc 16 1480 0
 6687 0034 FFF7FEFF 	 bl blackboxShouldLogPFrame
 6688 0038 0346     	 mov r3,r0
 6689 003a 002B     	 cmp r3,#0
 6690 003c 06D0     	 beq .L410
1481:../cleanflight/src/main/blackbox/blackbox.c ****             /*
1482:../cleanflight/src/main/blackbox/blackbox.c ****              * We assume that slow frames are only interesting in that they aid the interpretation 
1483:../cleanflight/src/main/blackbox/blackbox.c ****              * So only log slow frames during loop iterations where we log a main frame.
1484:../cleanflight/src/main/blackbox/blackbox.c ****              */
1485:../cleanflight/src/main/blackbox/blackbox.c ****             writeSlowFrameIfNeeded();
 6691              	 .loc 16 1485 0
 6692 003e FFF7FEFF 	 bl writeSlowFrameIfNeeded
1486:../cleanflight/src/main/blackbox/blackbox.c **** 
1487:../cleanflight/src/main/blackbox/blackbox.c ****             loadMainState(currentTimeUs);
 6693              	 .loc 16 1487 0
 6694 0042 7868     	 ldr r0,[r7,#4]
 6695 0044 FFF7FEFF 	 bl loadMainState
1488:../cleanflight/src/main/blackbox/blackbox.c ****             writeInterframe();
 6696              	 .loc 16 1488 0
 6697 0048 FFF7FEFF 	 bl writeInterframe
 6698              	.L410:
1489:../cleanflight/src/main/blackbox/blackbox.c ****         }
1490:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_GPS
1491:../cleanflight/src/main/blackbox/blackbox.c ****         if (feature(FEATURE_GPS)) {
 6699              	 .loc 16 1491 0
 6700 004c 8020     	 movs r0,#128
 6701 004e FFF7FEFF 	 bl feature
 6702 0052 0346     	 mov r3,r0
 6703 0054 002B     	 cmp r3,#0
 6704 0056 1FD0     	 beq .L409
1492:../cleanflight/src/main/blackbox/blackbox.c ****             if (blackboxShouldLogGpsHomeFrame()) {
 6705              	 .loc 16 1492 0
 6706 0058 FFF7FEFF 	 bl blackboxShouldLogGpsHomeFrame
 6707 005c 0346     	 mov r3,r0
 6708 005e 002B     	 cmp r3,#0
 6709 0060 05D0     	 beq .L411
1493:../cleanflight/src/main/blackbox/blackbox.c ****                 writeGPSHomeFrame();
 6710              	 .loc 16 1493 0
 6711 0062 FFF7FEFF 	 bl writeGPSHomeFrame
1494:../cleanflight/src/main/blackbox/blackbox.c ****                 writeGPSFrame(currentTimeUs);
 6712              	 .loc 16 1494 0
 6713 0066 7868     	 ldr r0,[r7,#4]
 6714 0068 FFF7FEFF 	 bl writeGPSFrame
 6715 006c 14E0     	 b .L409
 6716              	.L411:
1495:../cleanflight/src/main/blackbox/blackbox.c ****             } else if (gpsSol.numSat != gpsHistory.GPS_numSat
 6717              	 .loc 16 1495 0
 6718 006e 0D4B     	 ldr r3,.L413
 6719 0070 9A7C     	 ldrb r2,[r3,#18]
 6720 0072 0D4B     	 ldr r3,.L413+4
 6721 0074 1B7C     	 ldrb r3,[r3,#16]
 6722 0076 9A42     	 cmp r2,r3
 6723 0078 0BD1     	 bne .L412
1496:../cleanflight/src/main/blackbox/blackbox.c ****                     || gpsSol.llh.lat != gpsHistory.GPS_coord[LAT]
 6724              	 .loc 16 1496 0
 6725 007a 0A4B     	 ldr r3,.L413
 6726 007c 1A68     	 ldr r2,[r3]
 6727 007e 0A4B     	 ldr r3,.L413+4
 6728 0080 9B68     	 ldr r3,[r3,#8]
 6729 0082 9A42     	 cmp r2,r3
 6730 0084 05D1     	 bne .L412
1497:../cleanflight/src/main/blackbox/blackbox.c ****                     || gpsSol.llh.lon != gpsHistory.GPS_coord[LON]) {
 6731              	 .loc 16 1497 0
 6732 0086 074B     	 ldr r3,.L413
 6733 0088 5A68     	 ldr r2,[r3,#4]
 6734 008a 074B     	 ldr r3,.L413+4
 6735 008c DB68     	 ldr r3,[r3,#12]
 6736 008e 9A42     	 cmp r2,r3
 6737 0090 02D0     	 beq .L409
 6738              	.L412:
1498:../cleanflight/src/main/blackbox/blackbox.c ****                 //We could check for velocity changes as well but I doubt it changes independent of
1499:../cleanflight/src/main/blackbox/blackbox.c ****                 writeGPSFrame(currentTimeUs);
 6739              	 .loc 16 1499 0
 6740 0092 7868     	 ldr r0,[r7,#4]
 6741 0094 FFF7FEFF 	 bl writeGPSFrame
 6742              	.L409:
1500:../cleanflight/src/main/blackbox/blackbox.c ****             }
1501:../cleanflight/src/main/blackbox/blackbox.c ****         }
1502:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1503:../cleanflight/src/main/blackbox/blackbox.c ****     }
1504:../cleanflight/src/main/blackbox/blackbox.c **** 
1505:../cleanflight/src/main/blackbox/blackbox.c ****     //Flush every iteration so that our runtime variance is minimized
1506:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxDeviceFlush();
 6743              	 .loc 16 1506 0
 6744 0098 FFF7FEFF 	 bl blackboxDeviceFlush
1507:../cleanflight/src/main/blackbox/blackbox.c **** }
 6745              	 .loc 16 1507 0
 6746 009c 0837     	 adds r7,r7,#8
 6747              	.LCFI215:
 6748              	 .cfi_def_cfa_offset 8
 6749 009e BD46     	 mov sp,r7
 6750              	.LCFI216:
 6751              	 .cfi_def_cfa_register 13
 6752              	 
 6753 00a0 80BD     	 pop {r7,pc}
 6754              	.L414:
 6755 00a2 00BF     	 .align 2
 6756              	.L413:
 6757 00a4 00000000 	 .word gpsSol
 6758 00a8 00000000 	 .word gpsHistory
 6759              	 .cfi_endproc
 6760              	.LFE640:
 6762              	 .section .text.blackboxUpdate,"ax",%progbits
 6763              	 .align 2
 6764              	 .global blackboxUpdate
 6765              	 .thumb
 6766              	 .thumb_func
 6768              	blackboxUpdate:
 6769              	.LFB641:
1508:../cleanflight/src/main/blackbox/blackbox.c **** 
1509:../cleanflight/src/main/blackbox/blackbox.c **** /**
1510:../cleanflight/src/main/blackbox/blackbox.c ****  * Call each flight loop iteration to perform blackbox logging.
1511:../cleanflight/src/main/blackbox/blackbox.c ****  */
1512:../cleanflight/src/main/blackbox/blackbox.c **** void blackboxUpdate(timeUs_t currentTimeUs)
1513:../cleanflight/src/main/blackbox/blackbox.c **** {
 6770              	 .loc 16 1513 0
 6771              	 .cfi_startproc
 6772              	 
 6773              	 
 6774 0000 80B5     	 push {r7,lr}
 6775              	.LCFI217:
 6776              	 .cfi_def_cfa_offset 8
 6777              	 .cfi_offset 7,-8
 6778              	 .cfi_offset 14,-4
 6779 0002 8AB0     	 sub sp,sp,#40
 6780              	.LCFI218:
 6781              	 .cfi_def_cfa_offset 48
 6782 0004 04AF     	 add r7,sp,#16
 6783              	.LCFI219:
 6784              	 .cfi_def_cfa 7,32
 6785 0006 7860     	 str r0,[r7,#4]
1514:../cleanflight/src/main/blackbox/blackbox.c ****     switch (blackboxState) {
 6786              	 .loc 16 1514 0
 6787 0008 B74B     	 ldr r3,.L459
 6788 000a 1B78     	 ldrb r3,[r3]
 6789 000c 013B     	 subs r3,r3,#1
 6790 000e 0A2B     	 cmp r3,#10
 6791 0010 00F24381 	 bhi .L457
 6792 0014 01A2     	 adr r2,.L418
 6793 0016 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6794 001a 00BF     	 .p2align 2
 6795              	.L418:
 6796 001c 49000000 	 .word .L417+1
 6797 0020 61000000 	 .word .L419+1
 6798 0024 75000000 	 .word .L420+1
 6799 0028 EB000000 	 .word .L421+1
 6800 002c 31010000 	 .word .L422+1
 6801 0030 63010000 	 .word .L423+1
 6802 0034 95010000 	 .word .L424+1
 6803 0038 C7010000 	 .word .L425+1
 6804 003c E9010000 	 .word .L426+1
 6805 0040 27020000 	 .word .L427+1
 6806 0044 63020000 	 .word .L428+1
 6807              	 .p2align 1
 6808              	.L417:
1515:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_STOPPED:
1516:../cleanflight/src/main/blackbox/blackbox.c ****         if (ARMING_FLAG(ARMED)) {
 6809              	 .loc 16 1516 0
 6810 0048 A84B     	 ldr r3,.L459+4
 6811 004a 1B78     	 ldrb r3,[r3]
 6812 004c 03F00103 	 and r3,r3,#1
 6813 0050 002B     	 cmp r3,#0
 6814 0052 04D0     	 beq .L429
1517:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxOpen();
 6815              	 .loc 16 1517 0
 6816 0054 FFF7FEFF 	 bl blackboxOpen
1518:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxStart();
 6817              	 .loc 16 1518 0
 6818 0058 FFF7FEFF 	 bl blackboxStart
1519:../cleanflight/src/main/blackbox/blackbox.c ****         }
1520:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_FLASHFS
1521:../cleanflight/src/main/blackbox/blackbox.c ****         if (IS_RC_MODE_ACTIVE(BOXBLACKBOXERASE)) {
1522:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_START_ERASE);
1523:../cleanflight/src/main/blackbox/blackbox.c ****         }
1524:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1525:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6819              	 .loc 16 1525 0
 6820 005c 1EE1     	 b .L430
 6821              	.L429:
 6822 005e 1DE1     	 b .L430
 6823              	.L419:
1526:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_PREPARE_LOG_FILE:
1527:../cleanflight/src/main/blackbox/blackbox.c ****         if (blackboxDeviceBeginLog()) {
 6824              	 .loc 16 1527 0
 6825 0060 FFF7FEFF 	 bl blackboxDeviceBeginLog
 6826 0064 0346     	 mov r3,r0
 6827 0066 002B     	 cmp r3,#0
 6828 0068 03D0     	 beq .L431
1528:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_SEND_HEADER);
 6829              	 .loc 16 1528 0
 6830 006a 0320     	 movs r0,#3
 6831 006c FFF7FEFF 	 bl blackboxSetState
1529:../cleanflight/src/main/blackbox/blackbox.c ****         }
1530:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6832              	 .loc 16 1530 0
 6833 0070 14E1     	 b .L430
 6834              	.L431:
 6835 0072 13E1     	 b .L430
 6836              	.L420:
1531:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_HEADER:
1532:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxReplenishHeaderBudget();
 6837              	 .loc 16 1532 0
 6838 0074 FFF7FEFF 	 bl blackboxReplenishHeaderBudget
1533:../cleanflight/src/main/blackbox/blackbox.c ****         //On entry of this state, xmitState.headerIndex is 0 and startTime is intialised
1534:../cleanflight/src/main/blackbox/blackbox.c **** 
1535:../cleanflight/src/main/blackbox/blackbox.c ****         /*
1536:../cleanflight/src/main/blackbox/blackbox.c ****          * Once the UART has had time to init, transmit the header in chunks so we don't overflow i
1537:../cleanflight/src/main/blackbox/blackbox.c ****          * buffer, overflow the OpenLog's buffer, or keep the main loop busy for too long.
1538:../cleanflight/src/main/blackbox/blackbox.c ****          */
1539:../cleanflight/src/main/blackbox/blackbox.c ****         if (millis() > xmitState.u.startTime + 100) {
 6839              	 .loc 16 1539 0
 6840 0078 FFF7FEFF 	 bl millis
 6841 007c 0246     	 mov r2,r0
 6842 007e 9C4B     	 ldr r3,.L459+8
 6843 0080 5B68     	 ldr r3,[r3,#4]
 6844 0082 6433     	 adds r3,r3,#100
 6845 0084 9A42     	 cmp r2,r3
 6846 0086 2FD9     	 bls .L432
1540:../cleanflight/src/main/blackbox/blackbox.c ****             if (blackboxDeviceReserveBufferSpace(BLACKBOX_TARGET_HEADER_BUDGET_PER_ITERATION) == BL
 6847              	 .loc 16 1540 0
 6848 0088 4020     	 movs r0,#64
 6849 008a FFF7FEFF 	 bl blackboxDeviceReserveBufferSpace
 6850 008e 0346     	 mov r3,r0
 6851 0090 002B     	 cmp r3,#0
 6852 0092 29D1     	 bne .L432
 6853              	.LBB20:
1541:../cleanflight/src/main/blackbox/blackbox.c ****                 for (int i = 0; i < BLACKBOX_TARGET_HEADER_BUDGET_PER_ITERATION && blackboxHeader[x
 6854              	 .loc 16 1541 0
 6855 0094 0023     	 movs r3,#0
 6856 0096 7B61     	 str r3,[r7,#20]
 6857 0098 13E0     	 b .L433
 6858              	.L435:
1542:../cleanflight/src/main/blackbox/blackbox.c ****                     blackboxWrite(blackboxHeader[xmitState.headerIndex]);
 6859              	 .loc 16 1542 0 discriminator 4
 6860 009a 954B     	 ldr r3,.L459+8
 6861 009c 1B68     	 ldr r3,[r3]
 6862 009e 954A     	 ldr r2,.L459+12
 6863 00a0 D35C     	 ldrb r3,[r2,r3]
 6864 00a2 1846     	 mov r0,r3
 6865 00a4 FFF7FEFF 	 bl blackboxWrite
1543:../cleanflight/src/main/blackbox/blackbox.c ****                     blackboxHeaderBudget--;
 6866              	 .loc 16 1543 0 discriminator 4
 6867 00a8 934B     	 ldr r3,.L459+16
 6868 00aa 1B68     	 ldr r3,[r3]
 6869 00ac 013B     	 subs r3,r3,#1
 6870 00ae 924A     	 ldr r2,.L459+16
 6871 00b0 1360     	 str r3,[r2]
1541:../cleanflight/src/main/blackbox/blackbox.c ****                 for (int i = 0; i < BLACKBOX_TARGET_HEADER_BUDGET_PER_ITERATION && blackboxHeader[x
 6872              	 .loc 16 1541 0 discriminator 4
 6873 00b2 7B69     	 ldr r3,[r7,#20]
 6874 00b4 0133     	 adds r3,r3,#1
 6875 00b6 7B61     	 str r3,[r7,#20]
 6876 00b8 8D4B     	 ldr r3,.L459+8
 6877 00ba 1B68     	 ldr r3,[r3]
 6878 00bc 0133     	 adds r3,r3,#1
 6879 00be 8C4A     	 ldr r2,.L459+8
 6880 00c0 1360     	 str r3,[r2]
 6881              	.L433:
1541:../cleanflight/src/main/blackbox/blackbox.c ****                 for (int i = 0; i < BLACKBOX_TARGET_HEADER_BUDGET_PER_ITERATION && blackboxHeader[x
 6882              	 .loc 16 1541 0 is_stmt 0 discriminator 1
 6883 00c2 7B69     	 ldr r3,[r7,#20]
 6884 00c4 3F2B     	 cmp r3,#63
 6885 00c6 05DC     	 bgt .L434
1541:../cleanflight/src/main/blackbox/blackbox.c ****                 for (int i = 0; i < BLACKBOX_TARGET_HEADER_BUDGET_PER_ITERATION && blackboxHeader[x
 6886              	 .loc 16 1541 0 discriminator 3
 6887 00c8 894B     	 ldr r3,.L459+8
 6888 00ca 1B68     	 ldr r3,[r3]
 6889 00cc 894A     	 ldr r2,.L459+12
 6890 00ce D35C     	 ldrb r3,[r2,r3]
 6891 00d0 002B     	 cmp r3,#0
 6892 00d2 E2D1     	 bne .L435
 6893              	.L434:
 6894              	.LBE20:
1544:../cleanflight/src/main/blackbox/blackbox.c ****                 }
1545:../cleanflight/src/main/blackbox/blackbox.c ****                 if (blackboxHeader[xmitState.headerIndex] == '\0') {
 6895              	 .loc 16 1545 0 is_stmt 1
 6896 00d4 864B     	 ldr r3,.L459+8
 6897 00d6 1B68     	 ldr r3,[r3]
 6898 00d8 864A     	 ldr r2,.L459+12
 6899 00da D35C     	 ldrb r3,[r2,r3]
 6900 00dc 002B     	 cmp r3,#0
 6901 00de 03D1     	 bne .L432
1546:../cleanflight/src/main/blackbox/blackbox.c ****                     blackboxSetState(BLACKBOX_STATE_SEND_MAIN_FIELD_HEADER);
 6902              	 .loc 16 1546 0
 6903 00e0 0420     	 movs r0,#4
 6904 00e2 FFF7FEFF 	 bl blackboxSetState
1547:../cleanflight/src/main/blackbox/blackbox.c ****                 }
1548:../cleanflight/src/main/blackbox/blackbox.c ****             }
1549:../cleanflight/src/main/blackbox/blackbox.c ****         }
1550:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6905              	 .loc 16 1550 0
 6906 00e6 D9E0     	 b .L430
 6907              	.L432:
 6908 00e8 D8E0     	 b .L430
 6909              	.L421:
1551:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_MAIN_FIELD_HEADER:
1552:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxReplenishHeaderBudget();
 6910              	 .loc 16 1552 0
 6911 00ea FFF7FEFF 	 bl blackboxReplenishHeaderBudget
1553:../cleanflight/src/main/blackbox/blackbox.c ****         //On entry of this state, xmitState.headerIndex is 0 and xmitState.u.fieldIndex is -1
1554:../cleanflight/src/main/blackbox/blackbox.c ****         if (!sendFieldDefinition('I', 'P', blackboxMainFields, blackboxMainFields + 1, ARRAYLEN(bla
 6912              	 .loc 16 1554 0
 6913 00ee 2C23     	 movs r3,#44
 6914 00f0 0093     	 str r3,[sp]
 6915 00f2 824B     	 ldr r3,.L459+20
 6916 00f4 0193     	 str r3,[sp,#4]
 6917 00f6 824B     	 ldr r3,.L459+24
 6918 00f8 0293     	 str r3,[sp,#8]
 6919 00fa 4920     	 movs r0,#73
 6920 00fc 5021     	 movs r1,#80
 6921 00fe 814A     	 ldr r2,.L459+28
 6922 0100 814B     	 ldr r3,.L459+32
 6923 0102 FFF7FEFF 	 bl sendFieldDefinition
 6924 0106 0346     	 mov r3,r0
 6925 0108 83F00103 	 eor r3,r3,#1
 6926 010c DBB2     	 uxtb r3,r3
 6927 010e 002B     	 cmp r3,#0
 6928 0110 0DD0     	 beq .L436
1555:../cleanflight/src/main/blackbox/blackbox.c ****                 &blackboxMainFields[0].condition, &blackboxMainFields[1].condition)) {
1556:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_GPS
1557:../cleanflight/src/main/blackbox/blackbox.c ****             if (feature(FEATURE_GPS)) {
 6929              	 .loc 16 1557 0
 6930 0112 8020     	 movs r0,#128
 6931 0114 FFF7FEFF 	 bl feature
 6932 0118 0346     	 mov r3,r0
 6933 011a 002B     	 cmp r3,#0
 6934 011c 03D0     	 beq .L437
1558:../cleanflight/src/main/blackbox/blackbox.c ****                 blackboxSetState(BLACKBOX_STATE_SEND_GPS_H_HEADER);
 6935              	 .loc 16 1558 0
 6936 011e 0520     	 movs r0,#5
 6937 0120 FFF7FEFF 	 bl blackboxSetState
 6938 0124 03E0     	 b .L436
 6939              	.L437:
1559:../cleanflight/src/main/blackbox/blackbox.c ****             } else
1560:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1561:../cleanflight/src/main/blackbox/blackbox.c ****                 blackboxSetState(BLACKBOX_STATE_SEND_SLOW_HEADER);
 6940              	 .loc 16 1561 0
 6941 0126 0720     	 movs r0,#7
 6942 0128 FFF7FEFF 	 bl blackboxSetState
1562:../cleanflight/src/main/blackbox/blackbox.c ****         }
1563:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6943              	 .loc 16 1563 0
 6944 012c B6E0     	 b .L430
 6945              	.L436:
 6946 012e B5E0     	 b .L430
 6947              	.L422:
1564:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_GPS
1565:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_GPS_H_HEADER:
1566:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxReplenishHeaderBudget();
 6948              	 .loc 16 1566 0
 6949 0130 FFF7FEFF 	 bl blackboxReplenishHeaderBudget
1567:../cleanflight/src/main/blackbox/blackbox.c ****         //On entry of this state, xmitState.headerIndex is 0 and xmitState.u.fieldIndex is -1
1568:../cleanflight/src/main/blackbox/blackbox.c ****         if (!sendFieldDefinition('H', 0, blackboxGpsHFields, blackboxGpsHFields + 1, ARRAYLEN(black
 6950              	 .loc 16 1568 0
 6951 0134 0223     	 movs r3,#2
 6952 0136 0093     	 str r3,[sp]
 6953 0138 0023     	 movs r3,#0
 6954 013a 0193     	 str r3,[sp,#4]
 6955 013c 0023     	 movs r3,#0
 6956 013e 0293     	 str r3,[sp,#8]
 6957 0140 4820     	 movs r0,#72
 6958 0142 0021     	 movs r1,#0
 6959 0144 714A     	 ldr r2,.L459+36
 6960 0146 724B     	 ldr r3,.L459+40
 6961 0148 FFF7FEFF 	 bl sendFieldDefinition
 6962 014c 0346     	 mov r3,r0
 6963 014e 83F00103 	 eor r3,r3,#1
 6964 0152 DBB2     	 uxtb r3,r3
 6965 0154 002B     	 cmp r3,#0
 6966 0156 03D0     	 beq .L438
1569:../cleanflight/src/main/blackbox/blackbox.c ****                 NULL, NULL)) {
1570:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_SEND_GPS_G_HEADER);
 6967              	 .loc 16 1570 0
 6968 0158 0620     	 movs r0,#6
 6969 015a FFF7FEFF 	 bl blackboxSetState
1571:../cleanflight/src/main/blackbox/blackbox.c ****         }
1572:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6970              	 .loc 16 1572 0
 6971 015e 9DE0     	 b .L430
 6972              	.L438:
 6973 0160 9CE0     	 b .L430
 6974              	.L423:
1573:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_GPS_G_HEADER:
1574:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxReplenishHeaderBudget();
 6975              	 .loc 16 1574 0
 6976 0162 FFF7FEFF 	 bl blackboxReplenishHeaderBudget
1575:../cleanflight/src/main/blackbox/blackbox.c ****         //On entry of this state, xmitState.headerIndex is 0 and xmitState.u.fieldIndex is -1
1576:../cleanflight/src/main/blackbox/blackbox.c ****         if (!sendFieldDefinition('G', 0, blackboxGpsGFields, blackboxGpsGFields + 1, ARRAYLEN(black
 6977              	 .loc 16 1576 0
 6978 0166 0723     	 movs r3,#7
 6979 0168 0093     	 str r3,[sp]
 6980 016a 6A4B     	 ldr r3,.L459+44
 6981 016c 0193     	 str r3,[sp,#4]
 6982 016e 6A4B     	 ldr r3,.L459+48
 6983 0170 0293     	 str r3,[sp,#8]
 6984 0172 4720     	 movs r0,#71
 6985 0174 0021     	 movs r1,#0
 6986 0176 694A     	 ldr r2,.L459+52
 6987 0178 694B     	 ldr r3,.L459+56
 6988 017a FFF7FEFF 	 bl sendFieldDefinition
 6989 017e 0346     	 mov r3,r0
 6990 0180 83F00103 	 eor r3,r3,#1
 6991 0184 DBB2     	 uxtb r3,r3
 6992 0186 002B     	 cmp r3,#0
 6993 0188 03D0     	 beq .L439
1577:../cleanflight/src/main/blackbox/blackbox.c ****                 &blackboxGpsGFields[0].condition, &blackboxGpsGFields[1].condition)) {
1578:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_SEND_SLOW_HEADER);
 6994              	 .loc 16 1578 0
 6995 018a 0720     	 movs r0,#7
 6996 018c FFF7FEFF 	 bl blackboxSetState
1579:../cleanflight/src/main/blackbox/blackbox.c ****         }
1580:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 6997              	 .loc 16 1580 0
 6998 0190 84E0     	 b .L430
 6999              	.L439:
 7000 0192 83E0     	 b .L430
 7001              	.L424:
1581:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1582:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_SLOW_HEADER:
1583:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxReplenishHeaderBudget();
 7002              	 .loc 16 1583 0
 7003 0194 FFF7FEFF 	 bl blackboxReplenishHeaderBudget
1584:../cleanflight/src/main/blackbox/blackbox.c ****         //On entry of this state, xmitState.headerIndex is 0 and xmitState.u.fieldIndex is -1
1585:../cleanflight/src/main/blackbox/blackbox.c ****         if (!sendFieldDefinition('S', 0, blackboxSlowFields, blackboxSlowFields + 1, ARRAYLEN(black
 7004              	 .loc 16 1585 0
 7005 0198 0523     	 movs r3,#5
 7006 019a 0093     	 str r3,[sp]
 7007 019c 0023     	 movs r3,#0
 7008 019e 0193     	 str r3,[sp,#4]
 7009 01a0 0023     	 movs r3,#0
 7010 01a2 0293     	 str r3,[sp,#8]
 7011 01a4 5320     	 movs r0,#83
 7012 01a6 0021     	 movs r1,#0
 7013 01a8 5E4A     	 ldr r2,.L459+60
 7014 01aa 5F4B     	 ldr r3,.L459+64
 7015 01ac FFF7FEFF 	 bl sendFieldDefinition
 7016 01b0 0346     	 mov r3,r0
 7017 01b2 83F00103 	 eor r3,r3,#1
 7018 01b6 DBB2     	 uxtb r3,r3
 7019 01b8 002B     	 cmp r3,#0
 7020 01ba 03D0     	 beq .L440
1586:../cleanflight/src/main/blackbox/blackbox.c ****                 NULL, NULL)) {
1587:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_SEND_SYSINFO);
 7021              	 .loc 16 1587 0
 7022 01bc 0820     	 movs r0,#8
 7023 01be FFF7FEFF 	 bl blackboxSetState
1588:../cleanflight/src/main/blackbox/blackbox.c ****         }
1589:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 7024              	 .loc 16 1589 0
 7025 01c2 6BE0     	 b .L430
 7026              	.L440:
 7027 01c4 6AE0     	 b .L430
 7028              	.L425:
1590:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SEND_SYSINFO:
1591:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxReplenishHeaderBudget();
 7029              	 .loc 16 1591 0
 7030 01c6 FFF7FEFF 	 bl blackboxReplenishHeaderBudget
1592:../cleanflight/src/main/blackbox/blackbox.c ****         //On entry of this state, xmitState.headerIndex is 0
1593:../cleanflight/src/main/blackbox/blackbox.c **** 
1594:../cleanflight/src/main/blackbox/blackbox.c ****         //Keep writing chunks of the system info headers until it returns true to signal completion
1595:../cleanflight/src/main/blackbox/blackbox.c ****         if (blackboxWriteSysinfo()) {
 7031              	 .loc 16 1595 0
 7032 01ca FFF7FEFF 	 bl blackboxWriteSysinfo
 7033 01ce 0346     	 mov r3,r0
 7034 01d0 002B     	 cmp r3,#0
 7035 01d2 08D0     	 beq .L441
1596:../cleanflight/src/main/blackbox/blackbox.c ****             /*
1597:../cleanflight/src/main/blackbox/blackbox.c ****              * Wait for header buffers to drain completely before data logging begins to ensure rel
1598:../cleanflight/src/main/blackbox/blackbox.c ****              * (overflowing circular buffers causes all data to be discarded, so the first few logg
1599:../cleanflight/src/main/blackbox/blackbox.c ****              * could wipe out the end of the header if we weren't careful)
1600:../cleanflight/src/main/blackbox/blackbox.c ****              */
1601:../cleanflight/src/main/blackbox/blackbox.c ****             if (blackboxDeviceFlushForce()) {
 7036              	 .loc 16 1601 0
 7037 01d4 FFF7FEFF 	 bl blackboxDeviceFlushForce
 7038 01d8 0346     	 mov r3,r0
 7039 01da 002B     	 cmp r3,#0
 7040 01dc 03D0     	 beq .L441
1602:../cleanflight/src/main/blackbox/blackbox.c ****                 blackboxSetState(BLACKBOX_STATE_RUNNING);
 7041              	 .loc 16 1602 0
 7042 01de 0A20     	 movs r0,#10
 7043 01e0 FFF7FEFF 	 bl blackboxSetState
1603:../cleanflight/src/main/blackbox/blackbox.c ****             }
1604:../cleanflight/src/main/blackbox/blackbox.c ****         }
1605:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 7044              	 .loc 16 1605 0
 7045 01e4 5AE0     	 b .L430
 7046              	.L441:
 7047 01e6 59E0     	 b .L430
 7048              	.L426:
1606:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_PAUSED:
1607:../cleanflight/src/main/blackbox/blackbox.c ****         // Only allow resume to occur during an I-frame iteration, so that we have an "I" base to w
1608:../cleanflight/src/main/blackbox/blackbox.c ****         if (IS_RC_MODE_ACTIVE(BOXBLACKBOX) && blackboxShouldLogIFrame()) {
 7049              	 .loc 16 1608 0
 7050 01e8 1620     	 movs r0,#22
 7051 01ea FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 7052 01ee 0346     	 mov r3,r0
 7053 01f0 002B     	 cmp r3,#0
 7054 01f2 15D0     	 beq .L442
 7055              	 .loc 16 1608 0 is_stmt 0 discriminator 1
 7056 01f4 FFF7FEFF 	 bl blackboxShouldLogIFrame
 7057 01f8 0346     	 mov r3,r0
 7058 01fa 002B     	 cmp r3,#0
 7059 01fc 10D0     	 beq .L442
 7060              	.LBB21:
1609:../cleanflight/src/main/blackbox/blackbox.c ****             // Write a log entry so the decoder is aware that our large time/iteration skip is inte
1610:../cleanflight/src/main/blackbox/blackbox.c ****             flightLogEvent_loggingResume_t resume;
1611:../cleanflight/src/main/blackbox/blackbox.c **** 
1612:../cleanflight/src/main/blackbox/blackbox.c ****             resume.logIteration = blackboxIteration;
 7061              	 .loc 16 1612 0 is_stmt 1
 7062 01fe 4B4B     	 ldr r3,.L459+68
 7063 0200 1B68     	 ldr r3,[r3]
 7064 0202 FB60     	 str r3,[r7,#12]
1613:../cleanflight/src/main/blackbox/blackbox.c ****             resume.currentTime = currentTimeUs;
 7065              	 .loc 16 1613 0
 7066 0204 7B68     	 ldr r3,[r7,#4]
 7067 0206 3B61     	 str r3,[r7,#16]
1614:../cleanflight/src/main/blackbox/blackbox.c **** 
1615:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxLogEvent(FLIGHT_LOG_EVENT_LOGGING_RESUME, (flightLogEventData_t *) &resume);
 7068              	 .loc 16 1615 0
 7069 0208 07F10C03 	 add r3,r7,#12
 7070 020c 0E20     	 movs r0,#14
 7071 020e 1946     	 mov r1,r3
 7072 0210 FFF7FEFF 	 bl blackboxLogEvent
1616:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_RUNNING);
 7073              	 .loc 16 1616 0
 7074 0214 0A20     	 movs r0,#10
 7075 0216 FFF7FEFF 	 bl blackboxSetState
1617:../cleanflight/src/main/blackbox/blackbox.c **** 
1618:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxLogIteration(currentTimeUs);
 7076              	 .loc 16 1618 0
 7077 021a 7868     	 ldr r0,[r7,#4]
 7078 021c FFF7FEFF 	 bl blackboxLogIteration
 7079              	.L442:
 7080              	.LBE21:
1619:../cleanflight/src/main/blackbox/blackbox.c ****         }
1620:../cleanflight/src/main/blackbox/blackbox.c ****         // Keep the logging timers ticking so our log iteration continues to advance
1621:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxAdvanceIterationTimers();
 7081              	 .loc 16 1621 0
 7082 0220 FFF7FEFF 	 bl blackboxAdvanceIterationTimers
1622:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 7083              	 .loc 16 1622 0
 7084 0224 3AE0     	 b .L430
 7085              	.L427:
1623:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_RUNNING:
1624:../cleanflight/src/main/blackbox/blackbox.c ****         // On entry to this state, blackboxIteration, blackboxPFrameIndex and blackboxIFrameIndex a
1625:../cleanflight/src/main/blackbox/blackbox.c ****         // Prevent the Pausing of the log on the mode switch if in Motor Test Mode
1626:../cleanflight/src/main/blackbox/blackbox.c ****         if (blackboxModeActivationConditionPresent && !IS_RC_MODE_ACTIVE(BOXBLACKBOX) && !startedLo
 7086              	 .loc 16 1626 0
 7087 0226 424B     	 ldr r3,.L459+72
 7088 0228 1B78     	 ldrb r3,[r3]
 7089 022a 002B     	 cmp r3,#0
 7090 022c 13D0     	 beq .L443
 7091              	 .loc 16 1626 0 is_stmt 0 discriminator 1
 7092 022e 1620     	 movs r0,#22
 7093 0230 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 7094 0234 0346     	 mov r3,r0
 7095 0236 83F00103 	 eor r3,r3,#1
 7096 023a DBB2     	 uxtb r3,r3
 7097 023c 002B     	 cmp r3,#0
 7098 023e 0AD0     	 beq .L443
 7099              	 .loc 16 1626 0 discriminator 2
 7100 0240 3C4B     	 ldr r3,.L459+76
 7101 0242 1B78     	 ldrb r3,[r3]
 7102 0244 83F00103 	 eor r3,r3,#1
 7103 0248 DBB2     	 uxtb r3,r3
 7104 024a 002B     	 cmp r3,#0
 7105 024c 03D0     	 beq .L443
1627:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_PAUSED);
 7106              	 .loc 16 1627 0 is_stmt 1
 7107 024e 0920     	 movs r0,#9
 7108 0250 FFF7FEFF 	 bl blackboxSetState
 7109 0254 02E0     	 b .L444
 7110              	.L443:
1628:../cleanflight/src/main/blackbox/blackbox.c ****         } else {
1629:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxLogIteration(currentTimeUs);
 7111              	 .loc 16 1629 0
 7112 0256 7868     	 ldr r0,[r7,#4]
 7113 0258 FFF7FEFF 	 bl blackboxLogIteration
 7114              	.L444:
1630:../cleanflight/src/main/blackbox/blackbox.c ****         }
1631:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxAdvanceIterationTimers();
 7115              	 .loc 16 1631 0
 7116 025c FFF7FEFF 	 bl blackboxAdvanceIterationTimers
1632:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 7117              	 .loc 16 1632 0
 7118 0260 1CE0     	 b .L430
 7119              	.L428:
1633:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_SHUTTING_DOWN:
1634:../cleanflight/src/main/blackbox/blackbox.c ****         //On entry of this state, startTime is set
1635:../cleanflight/src/main/blackbox/blackbox.c ****         /*
1636:../cleanflight/src/main/blackbox/blackbox.c ****          * Wait for the log we've transmitted to make its way to the logger before we release the s
1637:../cleanflight/src/main/blackbox/blackbox.c ****          * since releasing the port clears the Tx buffer.
1638:../cleanflight/src/main/blackbox/blackbox.c ****          *
1639:../cleanflight/src/main/blackbox/blackbox.c ****          * Don't wait longer than it could possibly take if something funky happens.
1640:../cleanflight/src/main/blackbox/blackbox.c ****          */
1641:../cleanflight/src/main/blackbox/blackbox.c ****         if (blackboxDeviceEndLog(blackboxLoggedAnyFrames) && (millis() > xmitState.u.startTime + BL
 7120              	 .loc 16 1641 0
 7121 0262 354B     	 ldr r3,.L459+80
 7122 0264 1B78     	 ldrb r3,[r3]
 7123 0266 1846     	 mov r0,r3
 7124 0268 FFF7FEFF 	 bl blackboxDeviceEndLog
 7125 026c 0346     	 mov r3,r0
 7126 026e 002B     	 cmp r3,#0
 7127 0270 12D0     	 beq .L445
 7128              	 .loc 16 1641 0 is_stmt 0 discriminator 1
 7129 0272 FFF7FEFF 	 bl millis
 7130 0276 0246     	 mov r2,r0
 7131 0278 1D4B     	 ldr r3,.L459+8
 7132 027a 5B68     	 ldr r3,[r3,#4]
 7133 027c C833     	 adds r3,r3,#200
 7134 027e 9A42     	 cmp r2,r3
 7135 0280 04D8     	 bhi .L446
 7136              	 .loc 16 1641 0 discriminator 2
 7137 0282 FFF7FEFF 	 bl blackboxDeviceFlushForce
 7138 0286 0346     	 mov r3,r0
 7139 0288 002B     	 cmp r3,#0
 7140 028a 05D0     	 beq .L445
 7141              	.L446:
1642:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxDeviceClose();
 7142              	 .loc 16 1642 0 is_stmt 1
 7143 028c FFF7FEFF 	 bl blackboxDeviceClose
1643:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_STOPPED);
 7144              	 .loc 16 1643 0
 7145 0290 0120     	 movs r0,#1
 7146 0292 FFF7FEFF 	 bl blackboxSetState
1644:../cleanflight/src/main/blackbox/blackbox.c ****         }
1645:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 7147              	 .loc 16 1645 0
 7148 0296 01E0     	 b .L430
 7149              	.L445:
 7150 0298 00E0     	 b .L430
 7151              	.L457:
1646:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_FLASHFS
1647:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_START_ERASE:
1648:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxEraseAll();
1649:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxSetState(BLACKBOX_STATE_ERASING);
1650:../cleanflight/src/main/blackbox/blackbox.c ****         beeper(BEEPER_BLACKBOX_ERASE);
1651:../cleanflight/src/main/blackbox/blackbox.c ****         break;
1652:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_ERASING:
1653:../cleanflight/src/main/blackbox/blackbox.c ****         if (isBlackboxErased()) {
1654:../cleanflight/src/main/blackbox/blackbox.c ****             //Done erasing
1655:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_ERASED);
1656:../cleanflight/src/main/blackbox/blackbox.c ****             beeper(BEEPER_BLACKBOX_ERASE);
1657:../cleanflight/src/main/blackbox/blackbox.c ****         }
1658:../cleanflight/src/main/blackbox/blackbox.c ****         break;
1659:../cleanflight/src/main/blackbox/blackbox.c ****     case BLACKBOX_STATE_ERASED:
1660:../cleanflight/src/main/blackbox/blackbox.c ****         if (!IS_RC_MODE_ACTIVE(BOXBLACKBOXERASE)) {
1661:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_STOPPED);
1662:../cleanflight/src/main/blackbox/blackbox.c ****         }
1663:../cleanflight/src/main/blackbox/blackbox.c ****     break;
1664:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1665:../cleanflight/src/main/blackbox/blackbox.c ****     default:
1666:../cleanflight/src/main/blackbox/blackbox.c ****         break;
 7152              	 .loc 16 1666 0
 7153 029a 00BF     	 nop
 7154              	.L430:
1667:../cleanflight/src/main/blackbox/blackbox.c ****     }
1668:../cleanflight/src/main/blackbox/blackbox.c **** 
1669:../cleanflight/src/main/blackbox/blackbox.c ****     // Did we run out of room on the device? Stop!
1670:../cleanflight/src/main/blackbox/blackbox.c ****     if (isBlackboxDeviceFull()) {
 7155              	 .loc 16 1670 0
 7156 029c FFF7FEFF 	 bl isBlackboxDeviceFull
 7157 02a0 0346     	 mov r3,r0
 7158 02a2 002B     	 cmp r3,#0
 7159 02a4 0AD0     	 beq .L447
1671:../cleanflight/src/main/blackbox/blackbox.c **** #ifdef USE_FLASHFS
1672:../cleanflight/src/main/blackbox/blackbox.c ****         if (blackboxState != BLACKBOX_STATE_ERASING
1673:../cleanflight/src/main/blackbox/blackbox.c ****             && blackboxState != BLACKBOX_STATE_START_ERASE
1674:../cleanflight/src/main/blackbox/blackbox.c ****             && blackboxState != BLACKBOX_STATE_ERASED)
1675:../cleanflight/src/main/blackbox/blackbox.c **** #endif
1676:../cleanflight/src/main/blackbox/blackbox.c ****         {
1677:../cleanflight/src/main/blackbox/blackbox.c ****             blackboxSetState(BLACKBOX_STATE_STOPPED);
 7160              	 .loc 16 1677 0
 7161 02a6 0120     	 movs r0,#1
 7162 02a8 FFF7FEFF 	 bl blackboxSetState
1678:../cleanflight/src/main/blackbox/blackbox.c ****             // ensure we reset the test mode flag if we stop due to full memory card
1679:../cleanflight/src/main/blackbox/blackbox.c ****             if (startedLoggingInTestMode) {
 7163              	 .loc 16 1679 0
 7164 02ac 214B     	 ldr r3,.L459+76
 7165 02ae 1B78     	 ldrb r3,[r3]
 7166 02b0 002B     	 cmp r3,#0
 7167 02b2 53D0     	 beq .L415
1680:../cleanflight/src/main/blackbox/blackbox.c ****                 startedLoggingInTestMode = false;
 7168              	 .loc 16 1680 0
 7169 02b4 1F4B     	 ldr r3,.L459+76
 7170 02b6 0022     	 movs r2,#0
 7171 02b8 1A70     	 strb r2,[r3]
 7172 02ba 4FE0     	 b .L415
 7173              	.L447:
1681:../cleanflight/src/main/blackbox/blackbox.c ****             }
1682:../cleanflight/src/main/blackbox/blackbox.c ****         }
1683:../cleanflight/src/main/blackbox/blackbox.c ****     } else { // Only log in test mode if there is room!
1684:../cleanflight/src/main/blackbox/blackbox.c ****         switch (blackboxConfig()->mode) {
 7174              	 .loc 16 1684 0
 7175 02bc FFF7FEFF 	 bl blackboxConfig
 7176 02c0 0346     	 mov r3,r0
 7177 02c2 1B79     	 ldrb r3,[r3,#4]
 7178 02c4 012B     	 cmp r3,#1
 7179 02c6 02D0     	 beq .L451
 7180 02c8 022B     	 cmp r3,#2
 7181 02ca 3FD0     	 beq .L452
1685:../cleanflight/src/main/blackbox/blackbox.c ****         case BLACKBOX_MODE_MOTOR_TEST:
1686:../cleanflight/src/main/blackbox/blackbox.c ****             // Handle Motor Test Mode
1687:../cleanflight/src/main/blackbox/blackbox.c ****             if (inMotorTestMode()) {
1688:../cleanflight/src/main/blackbox/blackbox.c ****                 if (blackboxState==BLACKBOX_STATE_STOPPED) {
1689:../cleanflight/src/main/blackbox/blackbox.c ****                     startInTestMode();
1690:../cleanflight/src/main/blackbox/blackbox.c ****                 }
1691:../cleanflight/src/main/blackbox/blackbox.c ****             } else {
1692:../cleanflight/src/main/blackbox/blackbox.c ****                 if (blackboxState!=BLACKBOX_STATE_STOPPED) {
1693:../cleanflight/src/main/blackbox/blackbox.c ****                     stopInTestMode();
1694:../cleanflight/src/main/blackbox/blackbox.c ****                 }
1695:../cleanflight/src/main/blackbox/blackbox.c ****             }
1696:../cleanflight/src/main/blackbox/blackbox.c **** 
1697:../cleanflight/src/main/blackbox/blackbox.c ****             break;
1698:../cleanflight/src/main/blackbox/blackbox.c ****         case BLACKBOX_MODE_ALWAYS_ON:
1699:../cleanflight/src/main/blackbox/blackbox.c ****             if (blackboxState==BLACKBOX_STATE_STOPPED) {
1700:../cleanflight/src/main/blackbox/blackbox.c ****                 startInTestMode();
1701:../cleanflight/src/main/blackbox/blackbox.c ****             }
1702:../cleanflight/src/main/blackbox/blackbox.c **** 
1703:../cleanflight/src/main/blackbox/blackbox.c ****             break;
1704:../cleanflight/src/main/blackbox/blackbox.c ****         case BLACKBOX_MODE_NORMAL:
1705:../cleanflight/src/main/blackbox/blackbox.c ****         default:
1706:../cleanflight/src/main/blackbox/blackbox.c **** 
1707:../cleanflight/src/main/blackbox/blackbox.c ****             break;
 7182              	 .loc 16 1707 0
 7183 02cc 46E0     	 b .L415
 7184              	.L451:
1687:../cleanflight/src/main/blackbox/blackbox.c ****                 if (blackboxState==BLACKBOX_STATE_STOPPED) {
 7185              	 .loc 16 1687 0
 7186 02ce FFF7FEFF 	 bl inMotorTestMode
 7187 02d2 0346     	 mov r3,r0
 7188 02d4 002B     	 cmp r3,#0
 7189 02d6 31D0     	 beq .L453
1688:../cleanflight/src/main/blackbox/blackbox.c ****                     startInTestMode();
 7190              	 .loc 16 1688 0
 7191 02d8 034B     	 ldr r3,.L459
 7192 02da 1B78     	 ldrb r3,[r3]
 7193 02dc 012B     	 cmp r3,#1
 7194 02de 34D1     	 bne .L455
1689:../cleanflight/src/main/blackbox/blackbox.c ****                 }
 7195              	 .loc 16 1689 0
 7196 02e0 FFF7FEFF 	 bl startInTestMode
1697:../cleanflight/src/main/blackbox/blackbox.c ****         case BLACKBOX_MODE_ALWAYS_ON:
 7197              	 .loc 16 1697 0
 7198 02e4 3AE0     	 b .L415
 7199              	.L460:
 7200 02e6 00BF     	 .align 2
 7201              	.L459:
 7202 02e8 00000000 	 .word blackboxState
 7203 02ec 00000000 	 .word armingFlags
 7204 02f0 00000000 	 .word xmitState
 7205 02f4 00000000 	 .word blackboxHeader
 7206 02f8 00000000 	 .word blackboxHeaderBudget
 7207 02fc 0A000000 	 .word blackboxMainFields+10
 7208 0300 15000000 	 .word blackboxMainFields+21
 7209 0304 00000000 	 .word blackboxMainFields
 7210 0308 0B000000 	 .word blackboxMainFields+11
 7211 030c 00000000 	 .word blackboxGpsHFields
 7212 0310 08000000 	 .word blackboxGpsHFields+8
 7213 0314 08000000 	 .word blackboxGpsGFields+8
 7214 0318 11000000 	 .word blackboxGpsGFields+17
 7215 031c 00000000 	 .word blackboxGpsGFields
 7216 0320 09000000 	 .word blackboxGpsGFields+9
 7217 0324 00000000 	 .word blackboxSlowFields
 7218 0328 08000000 	 .word blackboxSlowFields+8
 7219 032c 00000000 	 .word blackboxIteration
 7220 0330 00000000 	 .word blackboxModeActivationConditionPresent
 7221 0334 00000000 	 .word startedLoggingInTestMode
 7222 0338 00000000 	 .word blackboxLoggedAnyFrames
 7223              	.L453:
1692:../cleanflight/src/main/blackbox/blackbox.c ****                     stopInTestMode();
 7224              	 .loc 16 1692 0
 7225 033c 094B     	 ldr r3,.L461
 7226 033e 1B78     	 ldrb r3,[r3]
 7227 0340 012B     	 cmp r3,#1
 7228 0342 02D0     	 beq .L455
1693:../cleanflight/src/main/blackbox/blackbox.c ****                 }
 7229              	 .loc 16 1693 0
 7230 0344 FFF7FEFF 	 bl stopInTestMode
1697:../cleanflight/src/main/blackbox/blackbox.c ****         case BLACKBOX_MODE_ALWAYS_ON:
 7231              	 .loc 16 1697 0
 7232 0348 08E0     	 b .L415
 7233              	.L455:
1697:../cleanflight/src/main/blackbox/blackbox.c ****         case BLACKBOX_MODE_ALWAYS_ON:
 7234              	 .loc 16 1697 0 is_stmt 0 discriminator 1
 7235 034a 07E0     	 b .L415
 7236              	.L452:
1699:../cleanflight/src/main/blackbox/blackbox.c ****                 startInTestMode();
 7237              	 .loc 16 1699 0 is_stmt 1
 7238 034c 054B     	 ldr r3,.L461
 7239 034e 1B78     	 ldrb r3,[r3]
 7240 0350 012B     	 cmp r3,#1
 7241 0352 02D1     	 bne .L456
1700:../cleanflight/src/main/blackbox/blackbox.c ****             }
 7242              	 .loc 16 1700 0
 7243 0354 FFF7FEFF 	 bl startInTestMode
1703:../cleanflight/src/main/blackbox/blackbox.c ****         case BLACKBOX_MODE_NORMAL:
 7244              	 .loc 16 1703 0
 7245 0358 FFE7     	 b .L458
 7246              	.L456:
 7247              	.L458:
 7248 035a 00BF     	 nop
 7249              	.L415:
1708:../cleanflight/src/main/blackbox/blackbox.c ****         }
1709:../cleanflight/src/main/blackbox/blackbox.c ****     }
1710:../cleanflight/src/main/blackbox/blackbox.c **** }
 7250              	 .loc 16 1710 0
 7251 035c 1837     	 adds r7,r7,#24
 7252              	.LCFI220:
 7253              	 .cfi_def_cfa_offset 8
 7254 035e BD46     	 mov sp,r7
 7255              	.LCFI221:
 7256              	 .cfi_def_cfa_register 13
 7257              	 
 7258 0360 80BD     	 pop {r7,pc}
 7259              	.L462:
 7260 0362 00BF     	 .align 2
 7261              	.L461:
 7262 0364 00000000 	 .word blackboxState
 7263              	 .cfi_endproc
 7264              	.LFE641:
 7266              	 .section .text.blackboxCalculatePDenom,"ax",%progbits
 7267              	 .align 2
 7268              	 .global blackboxCalculatePDenom
 7269              	 .thumb
 7270              	 .thumb_func
 7272              	blackboxCalculatePDenom:
 7273              	.LFB642:
1711:../cleanflight/src/main/blackbox/blackbox.c **** 
1712:../cleanflight/src/main/blackbox/blackbox.c **** int blackboxCalculatePDenom(int rateNum, int rateDenom)
1713:../cleanflight/src/main/blackbox/blackbox.c **** {
 7274              	 .loc 16 1713 0
 7275              	 .cfi_startproc
 7276              	 
 7277              	 
 7278              	 
 7279 0000 80B4     	 push {r7}
 7280              	.LCFI222:
 7281              	 .cfi_def_cfa_offset 4
 7282              	 .cfi_offset 7,-4
 7283 0002 83B0     	 sub sp,sp,#12
 7284              	.LCFI223:
 7285              	 .cfi_def_cfa_offset 16
 7286 0004 00AF     	 add r7,sp,#0
 7287              	.LCFI224:
 7288              	 .cfi_def_cfa_register 7
 7289 0006 7860     	 str r0,[r7,#4]
 7290 0008 3960     	 str r1,[r7]
1714:../cleanflight/src/main/blackbox/blackbox.c ****     return blackboxIInterval * rateNum / rateDenom;
 7291              	 .loc 16 1714 0
 7292 000a 074B     	 ldr r3,.L465
 7293 000c 1B88     	 ldrh r3,[r3]
 7294 000e 1BB2     	 sxth r3,r3
 7295 0010 7A68     	 ldr r2,[r7,#4]
 7296 0012 02FB03F2 	 mul r2,r2,r3
 7297 0016 3B68     	 ldr r3,[r7]
 7298 0018 92FBF3F3 	 sdiv r3,r2,r3
1715:../cleanflight/src/main/blackbox/blackbox.c **** }
 7299              	 .loc 16 1715 0
 7300 001c 1846     	 mov r0,r3
 7301 001e 0C37     	 adds r7,r7,#12
 7302              	.LCFI225:
 7303              	 .cfi_def_cfa_offset 4
 7304 0020 BD46     	 mov sp,r7
 7305              	.LCFI226:
 7306              	 .cfi_def_cfa_register 13
 7307              	 
 7308 0022 5DF8047B 	 ldr r7,[sp],#4
 7309              	.LCFI227:
 7310              	 .cfi_restore 7
 7311              	 .cfi_def_cfa_offset 0
 7312 0026 7047     	 bx lr
 7313              	.L466:
 7314              	 .align 2
 7315              	.L465:
 7316 0028 00000000 	 .word blackboxIInterval
 7317              	 .cfi_endproc
 7318              	.LFE642:
 7320              	 .section .text.blackboxGetRateDenom,"ax",%progbits
 7321              	 .align 2
 7322              	 .global blackboxGetRateDenom
 7323              	 .thumb
 7324              	 .thumb_func
 7326              	blackboxGetRateDenom:
 7327              	.LFB643:
1716:../cleanflight/src/main/blackbox/blackbox.c **** 
1717:../cleanflight/src/main/blackbox/blackbox.c **** uint8_t blackboxGetRateDenom(void)
1718:../cleanflight/src/main/blackbox/blackbox.c **** {
 7328              	 .loc 16 1718 0
 7329              	 .cfi_startproc
 7330              	 
 7331              	 
 7332              	 
 7333 0000 80B4     	 push {r7}
 7334              	.LCFI228:
 7335              	 .cfi_def_cfa_offset 4
 7336              	 .cfi_offset 7,-4
 7337 0002 00AF     	 add r7,sp,#0
 7338              	.LCFI229:
 7339              	 .cfi_def_cfa_register 7
1719:../cleanflight/src/main/blackbox/blackbox.c ****     return blackboxPInterval;
 7340              	 .loc 16 1719 0
 7341 0004 034B     	 ldr r3,.L469
 7342 0006 1B88     	 ldrh r3,[r3]
 7343 0008 DBB2     	 uxtb r3,r3
1720:../cleanflight/src/main/blackbox/blackbox.c **** 
1721:../cleanflight/src/main/blackbox/blackbox.c **** }
 7344              	 .loc 16 1721 0
 7345 000a 1846     	 mov r0,r3
 7346 000c BD46     	 mov sp,r7
 7347              	.LCFI230:
 7348              	 .cfi_def_cfa_register 13
 7349              	 
 7350 000e 5DF8047B 	 ldr r7,[sp],#4
 7351              	.LCFI231:
 7352              	 .cfi_restore 7
 7353              	 .cfi_def_cfa_offset 0
 7354 0012 7047     	 bx lr
 7355              	.L470:
 7356              	 .align 2
 7357              	.L469:
 7358 0014 00000000 	 .word blackboxPInterval
 7359              	 .cfi_endproc
 7360              	.LFE643:
 7362              	 .section .text.blackboxInit,"ax",%progbits
 7363              	 .align 2
 7364              	 .global blackboxInit
 7365              	 .thumb
 7366              	 .thumb_func
 7368              	blackboxInit:
 7369              	.LFB644:
1722:../cleanflight/src/main/blackbox/blackbox.c **** 
1723:../cleanflight/src/main/blackbox/blackbox.c **** /**
1724:../cleanflight/src/main/blackbox/blackbox.c ****  * Call during system startup to initialize the blackbox.
1725:../cleanflight/src/main/blackbox/blackbox.c ****  */
1726:../cleanflight/src/main/blackbox/blackbox.c **** void blackboxInit(void)
1727:../cleanflight/src/main/blackbox/blackbox.c **** {
 7370              	 .loc 16 1727 0
 7371              	 .cfi_startproc
 7372              	 
 7373              	 
 7374 0000 98B5     	 push {r3,r4,r7,lr}
 7375              	.LCFI232:
 7376              	 .cfi_def_cfa_offset 16
 7377              	 .cfi_offset 3,-16
 7378              	 .cfi_offset 4,-12
 7379              	 .cfi_offset 7,-8
 7380              	 .cfi_offset 14,-4
 7381 0002 00AF     	 add r7,sp,#0
 7382              	.LCFI233:
 7383              	 .cfi_def_cfa_register 7
1728:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxResetIterationTimers();
 7384              	 .loc 16 1728 0
 7385 0004 FFF7FEFF 	 bl blackboxResetIterationTimers
1729:../cleanflight/src/main/blackbox/blackbox.c **** 
1730:../cleanflight/src/main/blackbox/blackbox.c ****     // an I-frame is written every 32ms
1731:../cleanflight/src/main/blackbox/blackbox.c ****     // blackboxUpdate() is run in synchronisation with the PID loop
1732:../cleanflight/src/main/blackbox/blackbox.c ****     // targetPidLooptime is 1000 for 1kHz loop, 500 for 2kHz loop etc, targetPidLooptime is rounded
1733:../cleanflight/src/main/blackbox/blackbox.c ****     if (targetPidLooptime == 31) { // rounded from 31.25us
 7386              	 .loc 16 1733 0
 7387 0008 2D4B     	 ldr r3,.L480
 7388 000a 1B68     	 ldr r3,[r3]
 7389 000c 1F2B     	 cmp r3,#31
 7390 000e 04D1     	 bne .L472
1734:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxIInterval = 1024;
 7391              	 .loc 16 1734 0
 7392 0010 2C4B     	 ldr r3,.L480+4
 7393 0012 4FF48062 	 mov r2,#1024
 7394 0016 1A80     	 strh r2,[r3]
 7395 0018 11E0     	 b .L473
 7396              	.L472:
1735:../cleanflight/src/main/blackbox/blackbox.c ****     } else if (targetPidLooptime == 63) { // rounded from 62.5us
 7397              	 .loc 16 1735 0
 7398 001a 294B     	 ldr r3,.L480
 7399 001c 1B68     	 ldr r3,[r3]
 7400 001e 3F2B     	 cmp r3,#63
 7401 0020 04D1     	 bne .L474
1736:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxIInterval = 512;
 7402              	 .loc 16 1736 0
 7403 0022 284B     	 ldr r3,.L480+4
 7404 0024 4FF40072 	 mov r2,#512
 7405 0028 1A80     	 strh r2,[r3]
 7406 002a 08E0     	 b .L473
 7407              	.L474:
1737:../cleanflight/src/main/blackbox/blackbox.c ****     } else {
1738:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxIInterval = (uint16_t)(32 * 1000 / targetPidLooptime);
 7408              	 .loc 16 1738 0
 7409 002c 244B     	 ldr r3,.L480
 7410 002e 1B68     	 ldr r3,[r3]
 7411 0030 4FF4FA42 	 mov r2,#32000
 7412 0034 B2FBF3F3 	 udiv r3,r2,r3
 7413 0038 9AB2     	 uxth r2,r3
 7414 003a 224B     	 ldr r3,.L480+4
 7415 003c 1A80     	 strh r2,[r3]
 7416              	.L473:
1739:../cleanflight/src/main/blackbox/blackbox.c ****     }
1740:../cleanflight/src/main/blackbox/blackbox.c ****     // by default p_ratio is 32 and a P-frame is written every 1ms
1741:../cleanflight/src/main/blackbox/blackbox.c ****     // if p_ratio is zero then no P-frames are logged
1742:../cleanflight/src/main/blackbox/blackbox.c ****     if (blackboxConfig()->p_ratio == 0) {
 7417              	 .loc 16 1742 0
 7418 003e FFF7FEFF 	 bl blackboxConfig
 7419 0042 0346     	 mov r3,r0
 7420 0044 1B88     	 ldrh r3,[r3]
 7421 0046 9BB2     	 uxth r3,r3
 7422 0048 002B     	 cmp r3,#0
 7423 004a 03D1     	 bne .L475
1743:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxPInterval = 0; // blackboxPInterval not used when p_ratio is zero, so just set it t
 7424              	 .loc 16 1743 0
 7425 004c 1E4B     	 ldr r3,.L480+8
 7426 004e 0022     	 movs r2,#0
 7427 0050 1A80     	 strh r2,[r3]
 7428 0052 20E0     	 b .L476
 7429              	.L475:
1744:../cleanflight/src/main/blackbox/blackbox.c ****     } else if (blackboxConfig()->p_ratio > blackboxIInterval && blackboxIInterval >= 32) {
 7430              	 .loc 16 1744 0
 7431 0054 FFF7FEFF 	 bl blackboxConfig
 7432 0058 0346     	 mov r3,r0
 7433 005a 1B88     	 ldrh r3,[r3]
 7434 005c 9BB2     	 uxth r3,r3
 7435 005e 1A46     	 mov r2,r3
 7436 0060 184B     	 ldr r3,.L480+4
 7437 0062 1B88     	 ldrh r3,[r3]
 7438 0064 1BB2     	 sxth r3,r3
 7439 0066 9A42     	 cmp r2,r3
 7440 0068 08DD     	 ble .L477
 7441              	 .loc 16 1744 0 is_stmt 0 discriminator 1
 7442 006a 164B     	 ldr r3,.L480+4
 7443 006c 1B88     	 ldrh r3,[r3]
 7444 006e 1BB2     	 sxth r3,r3
 7445 0070 1F2B     	 cmp r3,#31
 7446 0072 03DD     	 ble .L477
1745:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxPInterval = 1;
 7447              	 .loc 16 1745 0 is_stmt 1
 7448 0074 144B     	 ldr r3,.L480+8
 7449 0076 0122     	 movs r2,#1
 7450 0078 1A80     	 strh r2,[r3]
 7451 007a 0CE0     	 b .L476
 7452              	.L477:
1746:../cleanflight/src/main/blackbox/blackbox.c ****     } else {
1747:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxPInterval = blackboxIInterval /  blackboxConfig()->p_ratio;
 7453              	 .loc 16 1747 0
 7454 007c 114B     	 ldr r3,.L480+4
 7455 007e 1B88     	 ldrh r3,[r3]
 7456 0080 1CB2     	 sxth r4,r3
 7457 0082 FFF7FEFF 	 bl blackboxConfig
 7458 0086 0346     	 mov r3,r0
 7459 0088 1B88     	 ldrh r3,[r3]
 7460 008a 9BB2     	 uxth r3,r3
 7461 008c 94FBF3F3 	 sdiv r3,r4,r3
 7462 0090 9AB2     	 uxth r2,r3
 7463 0092 0D4B     	 ldr r3,.L480+8
 7464 0094 1A80     	 strh r2,[r3]
 7465              	.L476:
1748:../cleanflight/src/main/blackbox/blackbox.c ****     }
1749:../cleanflight/src/main/blackbox/blackbox.c ****     if (blackboxConfig()->device) {
 7466              	 .loc 16 1749 0
 7467 0096 FFF7FEFF 	 bl blackboxConfig
 7468 009a 0346     	 mov r3,r0
 7469 009c 9B78     	 ldrb r3,[r3,#2]
 7470 009e 002B     	 cmp r3,#0
 7471 00a0 03D0     	 beq .L478
1750:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxSetState(BLACKBOX_STATE_STOPPED);
 7472              	 .loc 16 1750 0
 7473 00a2 0120     	 movs r0,#1
 7474 00a4 FFF7FEFF 	 bl blackboxSetState
 7475 00a8 02E0     	 b .L479
 7476              	.L478:
1751:../cleanflight/src/main/blackbox/blackbox.c ****     } else {
1752:../cleanflight/src/main/blackbox/blackbox.c ****         blackboxSetState(BLACKBOX_STATE_DISABLED);
 7477              	 .loc 16 1752 0
 7478 00aa 0020     	 movs r0,#0
 7479 00ac FFF7FEFF 	 bl blackboxSetState
 7480              	.L479:
1753:../cleanflight/src/main/blackbox/blackbox.c ****     }
1754:../cleanflight/src/main/blackbox/blackbox.c ****     blackboxSInterval = blackboxIInterval * 256; // S-frame is written every 256*32 = 8192ms, appro
 7481              	 .loc 16 1754 0
 7482 00b0 044B     	 ldr r3,.L480+4
 7483 00b2 1B88     	 ldrh r3,[r3]
 7484 00b4 1BB2     	 sxth r3,r3
 7485 00b6 1B02     	 lsls r3,r3,#8
 7486 00b8 044A     	 ldr r2,.L480+12
 7487 00ba 1360     	 str r3,[r2]
1755:../cleanflight/src/main/blackbox/blackbox.c **** }
 7488              	 .loc 16 1755 0
 7489 00bc 98BD     	 pop {r3,r4,r7,pc}
 7490              	.L481:
 7491 00be 00BF     	 .align 2
 7492              	.L480:
 7493 00c0 00000000 	 .word targetPidLooptime
 7494 00c4 00000000 	 .word blackboxIInterval
 7495 00c8 00000000 	 .word blackboxPInterval
 7496 00cc 00000000 	 .word blackboxSInterval
 7497              	 .cfi_endproc
 7498              	.LFE644:
 7500              	 .section .bss.resetTime.15745,"aw",%nobits
 7501              	 .align 2
 7504              	resetTime.15745:
 7505 0000 00000000 	 .space 4
 7506              	 .section .bss.needComma.15784,"aw",%nobits
 7509              	needComma.15784:
 7510 0000 00       	 .space 1
 7511              	 .text
 7512              	.Letext0:
 7513              	 .file 17 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 7514              	 .file 18 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 7515              	 .file 19 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 7516              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/xmc4700.h"
 7517              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 7518              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/platform.h"
 7519              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 7520              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 7521              	 .file 25 "../cleanflight/src/main/blackbox/blackbox_fielddefs.h"
 7522              	 .file 26 "../cleanflight/src/main/blackbox/blackbox_io.h"
 7523              	 .file 27 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 7524              	 .file 28 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 7525              	 .file 29 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus_i2c.h"
 7526              	 .file 30 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus.h"
 7527              	 .file 31 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sensor.h"
 7528              	 .file 32 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro.h"
 7529              	 .file 33 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 7530              	 .file 34 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 7531              	 .file 35 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
 7532              	 .file 36 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
 7533              	 .file 37 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/servos.h"
 7534              	 .file 38 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
 7535              	 .file 39 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 7536              	 .file 40 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 7537              	 .file 41 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
 7538              	 .file 42 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 7539              	 .file 43 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro_mpu.h"
 7540              	 .file 44 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/sensors.h"
 7541              	 .file 45 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/barometer/barometer.h"
 7542              	 .file 46 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/rangefinder.h"
 7543              	 .file 47 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 7544              	 .file 48 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
 7545              	 .file 49 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/version.h"
DEFINED SYMBOLS
                            *ABS*:00000000 blackbox.c
    {standard input}:20     .text.blackboxConfig:00000000 $t
    {standard input}:24     .text.blackboxConfig:00000000 blackboxConfig
    {standard input}:54     .text.blackboxConfig:00000010 $d
                            *COM*:00000005 blackboxConfig_System
    {standard input}:59     .text.blackboxConfigMutable:00000000 $t
    {standard input}:63     .text.blackboxConfigMutable:00000000 blackboxConfigMutable
    {standard input}:92     .text.blackboxConfigMutable:00000010 $d
    {standard input}:97     .text.featureConfig:00000000 $t
    {standard input}:101    .text.featureConfig:00000000 featureConfig
    {standard input}:131    .text.featureConfig:00000010 $d
    {standard input}:136    .text.rxConfig:00000000 $t
    {standard input}:140    .text.rxConfig:00000000 rxConfig
    {standard input}:170    .text.rxConfig:00000010 $d
    {standard input}:175    .text.pilotConfig:00000000 $t
    {standard input}:179    .text.pilotConfig:00000000 pilotConfig
    {standard input}:209    .text.pilotConfig:00000010 $d
    {standard input}:214    .text.systemConfig:00000000 $t
    {standard input}:218    .text.systemConfig:00000000 systemConfig
    {standard input}:247    .text.systemConfig:00000010 $d
    {standard input}:252    .text.controlRateProfiles:00000000 $t
    {standard input}:256    .text.controlRateProfiles:00000000 controlRateProfiles
    {standard input}:298    .text.controlRateProfiles:00000020 $d
    {standard input}:303    .text.rcControlsConfig:00000000 $t
    {standard input}:307    .text.rcControlsConfig:00000000 rcControlsConfig
    {standard input}:337    .text.rcControlsConfig:00000010 $d
    {standard input}:342    .text.armingConfig:00000000 $t
    {standard input}:346    .text.armingConfig:00000000 armingConfig
    {standard input}:375    .text.armingConfig:00000010 $d
    {standard input}:380    .text.mixerConfig:00000000 $t
    {standard input}:384    .text.mixerConfig:00000000 mixerConfig
    {standard input}:414    .text.mixerConfig:00000010 $d
    {standard input}:419    .text.motorConfig:00000000 $t
    {standard input}:423    .text.motorConfig:00000000 motorConfig
    {standard input}:452    .text.motorConfig:00000010 $d
    {standard input}:457    .text.pidConfig:00000000 $t
    {standard input}:461    .text.pidConfig:00000000 pidConfig
    {standard input}:491    .text.pidConfig:00000010 $d
                            *COM*:00000001 inputSource_e
    {standard input}:497    .text.gyroConfig:00000000 $t
    {standard input}:501    .text.gyroConfig:00000000 gyroConfig
    {standard input}:531    .text.gyroConfig:00000010 $d
    {standard input}:536    .text.accelerometerConfig:00000000 $t
    {standard input}:540    .text.accelerometerConfig:00000000 accelerometerConfig
    {standard input}:570    .text.accelerometerConfig:00000010 $d
    {standard input}:575    .text.barometerConfig:00000000 $t
    {standard input}:579    .text.barometerConfig:00000000 barometerConfig
    {standard input}:609    .text.barometerConfig:00000010 $d
    {standard input}:614    .text.currentSensorADCConfig:00000000 $t
    {standard input}:618    .text.currentSensorADCConfig:00000000 currentSensorADCConfig
    {standard input}:648    .text.currentSensorADCConfig:00000010 $d
    {standard input}:653    .text.voltageSensorADCConfig:00000000 $t
    {standard input}:657    .text.voltageSensorADCConfig:00000000 voltageSensorADCConfig
    {standard input}:699    .text.voltageSensorADCConfig:00000020 $d
    {standard input}:704    .text.batteryConfig:00000000 $t
    {standard input}:708    .text.batteryConfig:00000000 batteryConfig
    {standard input}:738    .text.batteryConfig:00000010 $d
    {standard input}:743    .text.compassConfig:00000000 $t
    {standard input}:747    .text.compassConfig:00000000 compassConfig
    {standard input}:777    .text.compassConfig:00000010 $d
                            *COM*:00000005 blackboxConfig_Copy
    {standard input}:788    .pg_registry:00000000 blackboxConfig_Registry
    {standard input}:785    .pg_registry:00000000 $d
    {standard input}:800    .pg_resetdata:00000000 pgResetTemplate_blackboxConfig
    {standard input}:797    .pg_resetdata:00000000 $d
    {standard input}:806    .rodata.blackboxHeader:00000000 $d
    {standard input}:809    .rodata.blackboxHeader:00000000 blackboxHeader
    {standard input}:813    .rodata:00000000 $d
    {standard input}:826    .rodata.blackboxFieldHeaderNames:00000000 $d
    {standard input}:829    .rodata.blackboxFieldHeaderNames:00000000 blackboxFieldHeaderNames
    {standard input}:889    .rodata.blackboxMainFields:00000000 $d
    {standard input}:892    .rodata.blackboxMainFields:00000000 blackboxMainFields
    {standard input}:1262   .rodata.blackboxGpsGFields:00000000 $d
    {standard input}:1265   .rodata.blackboxGpsGFields:00000000 blackboxGpsGFields
    {standard input}:1313   .rodata.blackboxGpsHFields:00000000 $d
    {standard input}:1316   .rodata.blackboxGpsHFields:00000000 blackboxGpsHFields
    {standard input}:1344   .rodata.blackboxSlowFields:00000000 $d
    {standard input}:1347   .rodata.blackboxSlowFields:00000000 blackboxSlowFields
    {standard input}:1376   .bss.blackboxState:00000000 blackboxState
    {standard input}:1377   .bss.blackboxState:00000000 $d
    {standard input}:1379   .bss.blackboxLastArmingBeep:00000000 $d
    {standard input}:1382   .bss.blackboxLastArmingBeep:00000000 blackboxLastArmingBeep
    {standard input}:1385   .bss.blackboxLastFlightModeFlags:00000000 $d
    {standard input}:1388   .bss.blackboxLastFlightModeFlags:00000000 blackboxLastFlightModeFlags
    {standard input}:1391   .bss.xmitState:00000000 $d
    {standard input}:1394   .bss.xmitState:00000000 xmitState
    {standard input}:1397   .bss.blackboxConditionCache:00000000 $d
    {standard input}:1400   .bss.blackboxConditionCache:00000000 blackboxConditionCache
    {standard input}:1403   .bss.blackboxIteration:00000000 $d
    {standard input}:1406   .bss.blackboxIteration:00000000 blackboxIteration
    {standard input}:1409   .bss.blackboxLoopIndex:00000000 $d
    {standard input}:1412   .bss.blackboxLoopIndex:00000000 blackboxLoopIndex
    {standard input}:1415   .bss.blackboxPFrameIndex:00000000 $d
    {standard input}:1418   .bss.blackboxPFrameIndex:00000000 blackboxPFrameIndex
    {standard input}:1421   .bss.blackboxIFrameIndex:00000000 $d
    {standard input}:1424   .bss.blackboxIFrameIndex:00000000 blackboxIFrameIndex
    {standard input}:1427   .bss.blackboxIInterval:00000000 $d
    {standard input}:1430   .bss.blackboxIInterval:00000000 blackboxIInterval
    {standard input}:1433   .bss.blackboxPInterval:00000000 $d
    {standard input}:1436   .bss.blackboxPInterval:00000000 blackboxPInterval
    {standard input}:1439   .bss.blackboxSInterval:00000000 $d
    {standard input}:1442   .bss.blackboxSInterval:00000000 blackboxSInterval
    {standard input}:1445   .bss.blackboxSlowFrameIterationTimer:00000000 $d
    {standard input}:1448   .bss.blackboxSlowFrameIterationTimer:00000000 blackboxSlowFrameIterationTimer
    {standard input}:1453   .bss.blackboxLoggedAnyFrames:00000000 blackboxLoggedAnyFrames
    {standard input}:1454   .bss.blackboxLoggedAnyFrames:00000000 $d
    {standard input}:1456   .bss.vbatReference:00000000 $d
    {standard input}:1459   .bss.vbatReference:00000000 vbatReference
    {standard input}:1462   .bss.gpsHistory:00000000 $d
    {standard input}:1465   .bss.gpsHistory:00000000 gpsHistory
    {standard input}:1468   .bss.slowHistory:00000000 $d
    {standard input}:1471   .bss.slowHistory:00000000 slowHistory
    {standard input}:1474   .bss.blackboxHistoryRing:00000000 $d
    {standard input}:1477   .bss.blackboxHistoryRing:00000000 blackboxHistoryRing
    {standard input}:1480   .bss.blackboxHistory:00000000 $d
    {standard input}:1483   .bss.blackboxHistory:00000000 blackboxHistory
    {standard input}:1488   .bss.blackboxModeActivationConditionPresent:00000000 blackboxModeActivationConditionPresent
    {standard input}:1489   .bss.blackboxModeActivationConditionPresent:00000000 $d
    {standard input}:1491   .text.blackboxMayEditConfig:00000000 $t
    {standard input}:1496   .text.blackboxMayEditConfig:00000000 blackboxMayEditConfig
    {standard input}:1533   .text.blackboxMayEditConfig:0000001c $d
    {standard input}:1538   .text.blackboxIsOnlyLoggingIntraframes:00000000 $t
    {standard input}:1542   .text.blackboxIsOnlyLoggingIntraframes:00000000 blackboxIsOnlyLoggingIntraframes
    {standard input}:1573   .text.testBlackboxConditionUncached:00000000 $t
    {standard input}:1577   .text.testBlackboxConditionUncached:00000000 testBlackboxConditionUncached
    {standard input}:1604   .text.testBlackboxConditionUncached:00000018 $d
    {standard input}:1627   .text.testBlackboxConditionUncached:00000074 $t
    {standard input}:1830   .text.testBlackboxConditionUncached:000001ac $d
    {standard input}:1836   .text.blackboxBuildConditionCache:00000000 $t
    {standard input}:1840   .text.blackboxBuildConditionCache:00000000 blackboxBuildConditionCache
    {standard input}:1907   .text.blackboxBuildConditionCache:00000048 $d
    {standard input}:1912   .text.testBlackboxCondition:00000000 $t
    {standard input}:1916   .text.testBlackboxCondition:00000000 testBlackboxCondition
    {standard input}:1965   .text.testBlackboxCondition:00000030 $d
    {standard input}:1970   .text.blackboxSetState:00000000 $t
    {standard input}:1974   .text.blackboxSetState:00000000 blackboxSetState
    {standard input}:2002   .text.blackboxSetState:00000018 $d
    {standard input}:2012   .text.blackboxSetState:00000040 $t
    {standard input}:2087   .text.blackboxSetState:0000009c $d
    {standard input}:2097   .text.writeIntraframe:00000000 $t
    {standard input}:2101   .text.writeIntraframe:00000000 writeIntraframe
    {standard input}:2431   .text.writeIntraframe:00000254 $d
    {standard input}:2442   .text.blackboxWriteMainStateArrayUsingAveragePredictor:00000000 $t
    {standard input}:2446   .text.blackboxWriteMainStateArrayUsingAveragePredictor:00000000 blackboxWriteMainStateArrayUsingAveragePredictor
    {standard input}:2543   .text.blackboxWriteMainStateArrayUsingAveragePredictor:0000007c $d
    {standard input}:2548   .text.writeInterframe:00000000 $t
    {standard input}:2552   .text.writeInterframe:00000000 writeInterframe
    {standard input}:2981   .text.writeInterframe:00000314 $d
    {standard input}:2989   .text.writeSlowFrame:00000000 $t
    {standard input}:2993   .text.writeSlowFrame:00000000 writeSlowFrame
    {standard input}:3055   .text.writeSlowFrame:00000048 $d
    {standard input}:3061   .text.loadSlowState:00000000 $t
    {standard input}:3065   .text.loadSlowState:00000000 loadSlowState
    {standard input}:3124   .text.loadSlowState:00000048 $d
    {standard input}:3130   .text.writeSlowFrameIfNeeded:00000000 $t
    {standard input}:3134   .text.writeSlowFrameIfNeeded:00000000 writeSlowFrameIfNeeded
    {standard input}:3217   .text.writeSlowFrameIfNeeded:00000068 $d
    {standard input}:3224   .text.blackboxValidateConfig:00000000 $t
    {standard input}:3229   .text.blackboxValidateConfig:00000000 blackboxValidateConfig
    {standard input}:3266   .text.blackboxResetIterationTimers:00000000 $t
    {standard input}:3270   .text.blackboxResetIterationTimers:00000000 blackboxResetIterationTimers
    {standard input}:3317   .text.blackboxResetIterationTimers:0000002c $d
    {standard input}:3326   .text.blackboxStart:00000000 $t
    {standard input}:3330   .text.blackboxStart:00000000 blackboxStart
    {standard input}:3412   .text.blackboxStart:0000007c $d
    {standard input}:3426   .text.blackboxFinish:00000000 $t
    {standard input}:3431   .text.blackboxFinish:00000000 blackboxFinish
    {standard input}:3454   .text.blackboxFinish:00000014 $d
    {standard input}:3466   .text.blackboxFinish:00000044 $t
    {standard input}:6070   .text.blackboxLogEvent:00000000 blackboxLogEvent
    {standard input}:3486   .text.blackboxFinish:00000058 $d
    {standard input}:3493   .bss.startedLoggingInTestMode:00000000 startedLoggingInTestMode
    {standard input}:3494   .bss.startedLoggingInTestMode:00000000 $d
    {standard input}:3496   .text.startInTestMode:00000000 $t
    {standard input}:3500   .text.startInTestMode:00000000 startInTestMode
    {standard input}:3563   .text.startInTestMode:00000044 $d
    {standard input}:3568   .text.stopInTestMode:00000000 $t
    {standard input}:3572   .text.stopInTestMode:00000000 stopInTestMode
    {standard input}:3603   .text.stopInTestMode:00000018 $d
    {standard input}:3608   .text.inMotorTestMode:00000000 $t
    {standard input}:3612   .text.inMotorTestMode:00000000 inMotorTestMode
    {standard input}:3665   .text.inMotorTestMode:00000048 $d
    {standard input}:7504   .bss.resetTime.15745:00000000 resetTime.15745
    {standard input}:3671   .text.writeGPSHomeFrame:00000000 $t
    {standard input}:3675   .text.writeGPSHomeFrame:00000000 writeGPSHomeFrame
    {standard input}:3717   .text.writeGPSHomeFrame:00000030 $d
    {standard input}:3723   .text.writeGPSFrame:00000000 $t
    {standard input}:3727   .text.writeGPSFrame:00000000 writeGPSFrame
    {standard input}:3828   .text.writeGPSFrame:00000094 $d
    {standard input}:3835   .text.loadMainState:00000000 $t
    {standard input}:3839   .text.loadMainState:00000000 loadMainState
    {standard input}:4134   .text.loadMainState:00000214 $d
    {standard input}:4158   .text.sendFieldDefinition:00000000 $t
    {standard input}:4162   .text.sendFieldDefinition:00000000 sendFieldDefinition
    {standard input}:4483   .text.sendFieldDefinition:000001f0 $d
    {standard input}:7509   .bss.needComma.15784:00000000 needComma.15784
    {standard input}:4494   .text.blackboxGetStartDateTime:00000000 $t
    {standard input}:4498   .text.blackboxGetStartDateTime:00000000 blackboxGetStartDateTime
    {standard input}:4815   .text.blackboxWriteSysinfo:00000000 $t
    {standard input}:4819   .text.blackboxWriteSysinfo:00000000 blackboxWriteSysinfo
    {standard input}:4878   .text.blackboxWriteSysinfo:00000054 $d
    {standard input}:4958   .text.blackboxWriteSysinfo:00000194 $t
    {standard input}:5148   .text.blackboxWriteSysinfo:00000318 $d
    {standard input}:5187   .text.blackboxWriteSysinfo:000003ac $t
    {standard input}:5541   .text.blackboxWriteSysinfo:0000064c $d
    {standard input}:5576   .text.blackboxWriteSysinfo:000006d0 $t
    {standard input}:5925   .text.blackboxWriteSysinfo:00000998 $d
    {standard input}:5963   .text.blackboxWriteSysinfo:00000a28 $t
    {standard input}:6049   .text.blackboxWriteSysinfo:00000acc $d
    {standard input}:6065   .text.blackboxLogEvent:00000000 $t
    {standard input}:6216   .text.blackboxLogEvent:000000d0 $d
    {standard input}:6222   .text.blackboxCheckAndLogArmingBeep:00000000 $t
    {standard input}:6226   .text.blackboxCheckAndLogArmingBeep:00000000 blackboxCheckAndLogArmingBeep
    {standard input}:6279   .text.blackboxCheckAndLogArmingBeep:00000034 $d
    {standard input}:6284   .text.blackboxCheckAndLogFlightMode:00000000 $t
    {standard input}:6288   .text.blackboxCheckAndLogFlightMode:00000000 blackboxCheckAndLogFlightMode
    {standard input}:6348   .text.blackboxCheckAndLogFlightMode:00000044 $d
    {standard input}:6354   .text.blackboxShouldLogPFrame:00000000 $t
    {standard input}:6358   .text.blackboxShouldLogPFrame:00000000 blackboxShouldLogPFrame
    {standard input}:6400   .text.blackboxShouldLogPFrame:0000002c $d
    {standard input}:6405   .text.blackboxShouldLogIFrame:00000000 $t
    {standard input}:6409   .text.blackboxShouldLogIFrame:00000000 blackboxShouldLogIFrame
    {standard input}:6445   .text.blackboxShouldLogIFrame:0000001c $d
    {standard input}:6450   .text.blackboxShouldLogGpsHomeFrame:00000000 $t
    {standard input}:6454   .text.blackboxShouldLogGpsHomeFrame:00000000 blackboxShouldLogGpsHomeFrame
    {standard input}:6525   .text.blackboxShouldLogGpsHomeFrame:00000054 $d
    {standard input}:6534   .text.blackboxAdvanceIterationTimers:00000000 $t
    {standard input}:6538   .text.blackboxAdvanceIterationTimers:00000000 blackboxAdvanceIterationTimers
    {standard input}:6629   .text.blackboxAdvanceIterationTimers:00000078 $d
    {standard input}:6640   .text.blackboxLogIteration:00000000 $t
    {standard input}:6644   .text.blackboxLogIteration:00000000 blackboxLogIteration
    {standard input}:6757   .text.blackboxLogIteration:000000a4 $d
    {standard input}:6763   .text.blackboxUpdate:00000000 $t
    {standard input}:6768   .text.blackboxUpdate:00000000 blackboxUpdate
    {standard input}:6796   .text.blackboxUpdate:0000001c $d
    {standard input}:6807   .text.blackboxUpdate:00000048 $t
    {standard input}:7202   .text.blackboxUpdate:000002e8 $d
    {standard input}:7225   .text.blackboxUpdate:0000033c $t
    {standard input}:7262   .text.blackboxUpdate:00000364 $d
    {standard input}:7267   .text.blackboxCalculatePDenom:00000000 $t
    {standard input}:7272   .text.blackboxCalculatePDenom:00000000 blackboxCalculatePDenom
    {standard input}:7316   .text.blackboxCalculatePDenom:00000028 $d
    {standard input}:7321   .text.blackboxGetRateDenom:00000000 $t
    {standard input}:7326   .text.blackboxGetRateDenom:00000000 blackboxGetRateDenom
    {standard input}:7358   .text.blackboxGetRateDenom:00000014 $d
    {standard input}:7363   .text.blackboxInit:00000000 $t
    {standard input}:7368   .text.blackboxInit:00000000 blackboxInit
    {standard input}:7493   .text.blackboxInit:000000c0 $d
    {standard input}:7501   .bss.resetTime.15745:00000000 $d
    {standard input}:7510   .bss.needComma.15784:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
featureConfig_System
rxConfig_System
pilotConfig_System
systemConfig_System
controlRateProfiles_SystemArray
rcControlsConfig_System
armingConfig_System
mixerConfig_System
motorConfig_System
pidConfig_System
gyroConfig_System
accelerometerConfig_System
barometerConfig_System
currentSensorADCConfig_System
voltageSensorADCConfig_SystemArray
batteryConfig_System
compassConfig_System
getMotorCount
sensors
feature
currentPidProfile
debugMode
millis
blackboxHeaderBudget
blackboxWrite
blackboxWriteUnsignedVB
blackboxWriteSignedVBArray
blackboxWriteSignedVB
blackboxWriteSigned16VBArray
motorOutputLow
arraySubInt32
blackboxWriteTag2_3S32
blackboxWriteTag8_4S16
blackboxWriteTag8_8SVB
memcpy
failsafePhase
rxIsReceivingSignal
rxAreFlightChannelsValid
rcModeActivationMask
stateFlags
memcmp
blackboxDeviceOpen
memset
getBatteryVoltageLatest
isModeActivationConditionPresent
getArmingBeepTimeMicros
findSharedSerialPort
areMotorsRunning
armingFlags
GPS_home
gpsSol
lrintf
getAmperageLatest
getRssi
pidData
gyro
acc
mag
rcCommand
debug
motor
baro
servo
strlen
blackboxDeviceReserveBufferSpace
blackboxPrintf
blackboxWriteString
rtcGetDateTime
dateTimeFormatLocal
blackboxPrintfHeaderLine
castFloatBytesToInt
motorOutputHigh
shortGitRevision
targetName
buildDate
buildTime
rcSmoothingGetValue
blackboxWriteFloat
blackboxDeviceFlush
blackboxOpen
blackboxDeviceBeginLog
blackboxReplenishHeaderBudget
blackboxDeviceFlushForce
IS_RC_MODE_ACTIVE
blackboxDeviceEndLog
blackboxDeviceClose
isBlackboxDeviceFull
targetPidLooptime
