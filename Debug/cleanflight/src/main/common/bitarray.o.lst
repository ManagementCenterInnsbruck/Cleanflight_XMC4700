   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "bitarray.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.bitArrayGet,"ax",%progbits
  20              	 .align 2
  21              	 .global bitArrayGet
  22              	 .thumb
  23              	 .thumb_func
  25              	bitArrayGet:
  26              	.LFB0:
  27              	 .file 1 "../cleanflight/src/main/common/bitarray.c"
   1:../cleanflight/src/main/common/bitarray.c **** /*
   2:../cleanflight/src/main/common/bitarray.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/common/bitarray.c ****  *
   4:../cleanflight/src/main/common/bitarray.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/common/bitarray.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/common/bitarray.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/common/bitarray.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/common/bitarray.c ****  * any later version.
   9:../cleanflight/src/main/common/bitarray.c ****  *
  10:../cleanflight/src/main/common/bitarray.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/common/bitarray.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/common/bitarray.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/common/bitarray.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/common/bitarray.c ****  *
  15:../cleanflight/src/main/common/bitarray.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/common/bitarray.c ****  * along with this software.
  17:../cleanflight/src/main/common/bitarray.c ****  *
  18:../cleanflight/src/main/common/bitarray.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/common/bitarray.c ****  */
  20:../cleanflight/src/main/common/bitarray.c **** 
  21:../cleanflight/src/main/common/bitarray.c **** #include <stdint.h>
  22:../cleanflight/src/main/common/bitarray.c **** #include <stdbool.h>
  23:../cleanflight/src/main/common/bitarray.c **** #include <string.h>
  24:../cleanflight/src/main/common/bitarray.c **** 
  25:../cleanflight/src/main/common/bitarray.c **** #include "bitarray.h"
  26:../cleanflight/src/main/common/bitarray.c **** 
  27:../cleanflight/src/main/common/bitarray.c **** #define BITARRAY_BIT_OP(array, bit, op) ((array)[(bit) / (sizeof((array)[0]) * 8)] op (1 << ((bit) 
  28:../cleanflight/src/main/common/bitarray.c **** 
  29:../cleanflight/src/main/common/bitarray.c **** bool bitArrayGet(const void *array, unsigned bit)
  30:../cleanflight/src/main/common/bitarray.c **** {
  28              	 .loc 1 30 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 83B0     	 sub sp,sp,#12
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 16
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 7860     	 str r0,[r7,#4]
  44 0008 3960     	 str r1,[r7]
  31:../cleanflight/src/main/common/bitarray.c ****     return BITARRAY_BIT_OP((uint32_t*)array, bit, &);
  45              	 .loc 1 31 0
  46 000a 3B68     	 ldr r3,[r7]
  47 000c 5B09     	 lsrs r3,r3,#5
  48 000e 9B00     	 lsls r3,r3,#2
  49 0010 7A68     	 ldr r2,[r7,#4]
  50 0012 1344     	 add r3,r3,r2
  51 0014 1B68     	 ldr r3,[r3]
  52 0016 3A68     	 ldr r2,[r7]
  53 0018 02F01F02 	 and r2,r2,#31
  54 001c 0121     	 movs r1,#1
  55 001e 01FA02F2 	 lsl r2,r1,r2
  56 0022 1340     	 ands r3,r3,r2
  57 0024 002B     	 cmp r3,#0
  58 0026 14BF     	 ite ne
  59 0028 0123     	 movne r3,#1
  60 002a 0023     	 moveq r3,#0
  61 002c DBB2     	 uxtb r3,r3
  32:../cleanflight/src/main/common/bitarray.c **** }
  62              	 .loc 1 32 0
  63 002e 1846     	 mov r0,r3
  64 0030 0C37     	 adds r7,r7,#12
  65              	.LCFI3:
  66              	 .cfi_def_cfa_offset 4
  67 0032 BD46     	 mov sp,r7
  68              	.LCFI4:
  69              	 .cfi_def_cfa_register 13
  70              	 
  71 0034 5DF8047B 	 ldr r7,[sp],#4
  72              	.LCFI5:
  73              	 .cfi_restore 7
  74              	 .cfi_def_cfa_offset 0
  75 0038 7047     	 bx lr
  76              	 .cfi_endproc
  77              	.LFE0:
  79 003a 00BF     	 .section .text.bitArraySet,"ax",%progbits
  80              	 .align 2
  81              	 .global bitArraySet
  82              	 .thumb
  83              	 .thumb_func
  85              	bitArraySet:
  86              	.LFB1:
  33:../cleanflight/src/main/common/bitarray.c **** 
  34:../cleanflight/src/main/common/bitarray.c **** void bitArraySet(void *array, unsigned bit)
  35:../cleanflight/src/main/common/bitarray.c **** {
  87              	 .loc 1 35 0
  88              	 .cfi_startproc
  89              	 
  90              	 
  91              	 
  92 0000 80B4     	 push {r7}
  93              	.LCFI6:
  94              	 .cfi_def_cfa_offset 4
  95              	 .cfi_offset 7,-4
  96 0002 83B0     	 sub sp,sp,#12
  97              	.LCFI7:
  98              	 .cfi_def_cfa_offset 16
  99 0004 00AF     	 add r7,sp,#0
 100              	.LCFI8:
 101              	 .cfi_def_cfa_register 7
 102 0006 7860     	 str r0,[r7,#4]
 103 0008 3960     	 str r1,[r7]
  36:../cleanflight/src/main/common/bitarray.c ****     BITARRAY_BIT_OP((uint32_t*)array, bit, |=);
 104              	 .loc 1 36 0
 105 000a 3B68     	 ldr r3,[r7]
 106 000c 5B09     	 lsrs r3,r3,#5
 107 000e 9A00     	 lsls r2,r3,#2
 108 0010 7968     	 ldr r1,[r7,#4]
 109 0012 0A44     	 add r2,r2,r1
 110 0014 9B00     	 lsls r3,r3,#2
 111 0016 7968     	 ldr r1,[r7,#4]
 112 0018 0B44     	 add r3,r3,r1
 113 001a 1B68     	 ldr r3,[r3]
 114 001c 3968     	 ldr r1,[r7]
 115 001e 01F01F01 	 and r1,r1,#31
 116 0022 0120     	 movs r0,#1
 117 0024 00FA01F1 	 lsl r1,r0,r1
 118 0028 0B43     	 orrs r3,r3,r1
 119 002a 1360     	 str r3,[r2]
  37:../cleanflight/src/main/common/bitarray.c **** }
 120              	 .loc 1 37 0
 121 002c 0C37     	 adds r7,r7,#12
 122              	.LCFI9:
 123              	 .cfi_def_cfa_offset 4
 124 002e BD46     	 mov sp,r7
 125              	.LCFI10:
 126              	 .cfi_def_cfa_register 13
 127              	 
 128 0030 5DF8047B 	 ldr r7,[sp],#4
 129              	.LCFI11:
 130              	 .cfi_restore 7
 131              	 .cfi_def_cfa_offset 0
 132 0034 7047     	 bx lr
 133              	 .cfi_endproc
 134              	.LFE1:
 136 0036 00BF     	 .section .text.bitArrayClr,"ax",%progbits
 137              	 .align 2
 138              	 .global bitArrayClr
 139              	 .thumb
 140              	 .thumb_func
 142              	bitArrayClr:
 143              	.LFB2:
  38:../cleanflight/src/main/common/bitarray.c **** 
  39:../cleanflight/src/main/common/bitarray.c **** void bitArrayClr(void *array, unsigned bit)
  40:../cleanflight/src/main/common/bitarray.c **** {
 144              	 .loc 1 40 0
 145              	 .cfi_startproc
 146              	 
 147              	 
 148              	 
 149 0000 80B4     	 push {r7}
 150              	.LCFI12:
 151              	 .cfi_def_cfa_offset 4
 152              	 .cfi_offset 7,-4
 153 0002 83B0     	 sub sp,sp,#12
 154              	.LCFI13:
 155              	 .cfi_def_cfa_offset 16
 156 0004 00AF     	 add r7,sp,#0
 157              	.LCFI14:
 158              	 .cfi_def_cfa_register 7
 159 0006 7860     	 str r0,[r7,#4]
 160 0008 3960     	 str r1,[r7]
  41:../cleanflight/src/main/common/bitarray.c ****     BITARRAY_BIT_OP((uint32_t*)array, bit, &=~);
 161              	 .loc 1 41 0
 162 000a 3B68     	 ldr r3,[r7]
 163 000c 5B09     	 lsrs r3,r3,#5
 164 000e 9A00     	 lsls r2,r3,#2
 165 0010 7968     	 ldr r1,[r7,#4]
 166 0012 0A44     	 add r2,r2,r1
 167 0014 9B00     	 lsls r3,r3,#2
 168 0016 7968     	 ldr r1,[r7,#4]
 169 0018 0B44     	 add r3,r3,r1
 170 001a 1B68     	 ldr r3,[r3]
 171 001c 3968     	 ldr r1,[r7]
 172 001e 01F01F01 	 and r1,r1,#31
 173 0022 0120     	 movs r0,#1
 174 0024 00FA01F1 	 lsl r1,r0,r1
 175 0028 C943     	 mvns r1,r1
 176 002a 0B40     	 ands r3,r3,r1
 177 002c 1360     	 str r3,[r2]
  42:../cleanflight/src/main/common/bitarray.c **** }
 178              	 .loc 1 42 0
 179 002e 0C37     	 adds r7,r7,#12
 180              	.LCFI15:
 181              	 .cfi_def_cfa_offset 4
 182 0030 BD46     	 mov sp,r7
 183              	.LCFI16:
 184              	 .cfi_def_cfa_register 13
 185              	 
 186 0032 5DF8047B 	 ldr r7,[sp],#4
 187              	.LCFI17:
 188              	 .cfi_restore 7
 189              	 .cfi_def_cfa_offset 0
 190 0036 7047     	 bx lr
 191              	 .cfi_endproc
 192              	.LFE2:
 194              	 .section .text.bitArrayXor,"ax",%progbits
 195              	 .align 2
 196              	 .global bitArrayXor
 197              	 .thumb
 198              	 .thumb_func
 200              	bitArrayXor:
 201              	.LFB3:
  43:../cleanflight/src/main/common/bitarray.c **** 
  44:../cleanflight/src/main/common/bitarray.c **** void bitArrayXor(void *dest, size_t size, void *op1, void *op2)
  45:../cleanflight/src/main/common/bitarray.c **** {
 202              	 .loc 1 45 0
 203              	 .cfi_startproc
 204              	 
 205              	 
 206              	 
 207 0000 80B4     	 push {r7}
 208              	.LCFI18:
 209              	 .cfi_def_cfa_offset 4
 210              	 .cfi_offset 7,-4
 211 0002 87B0     	 sub sp,sp,#28
 212              	.LCFI19:
 213              	 .cfi_def_cfa_offset 32
 214 0004 00AF     	 add r7,sp,#0
 215              	.LCFI20:
 216              	 .cfi_def_cfa_register 7
 217 0006 F860     	 str r0,[r7,#12]
 218 0008 B960     	 str r1,[r7,#8]
 219 000a 7A60     	 str r2,[r7,#4]
 220 000c 3B60     	 str r3,[r7]
 221              	.LBB2:
  46:../cleanflight/src/main/common/bitarray.c ****     for (size_t i = 0; i < size; i++) {
 222              	 .loc 1 46 0
 223 000e 0023     	 movs r3,#0
 224 0010 7B61     	 str r3,[r7,#20]
 225 0012 10E0     	 b .L6
 226              	.L7:
  47:../cleanflight/src/main/common/bitarray.c ****         ((uint8_t*)dest)[i] = ((uint8_t*)op1)[i] ^ ((uint8_t*)op2)[i];
 227              	 .loc 1 47 0 discriminator 3
 228 0014 FA68     	 ldr r2,[r7,#12]
 229 0016 7B69     	 ldr r3,[r7,#20]
 230 0018 1344     	 add r3,r3,r2
 231 001a 7968     	 ldr r1,[r7,#4]
 232 001c 7A69     	 ldr r2,[r7,#20]
 233 001e 0A44     	 add r2,r2,r1
 234 0020 1178     	 ldrb r1,[r2]
 235 0022 3868     	 ldr r0,[r7]
 236 0024 7A69     	 ldr r2,[r7,#20]
 237 0026 0244     	 add r2,r2,r0
 238 0028 1278     	 ldrb r2,[r2]
 239 002a 4A40     	 eors r2,r2,r1
 240 002c D2B2     	 uxtb r2,r2
 241 002e 1A70     	 strb r2,[r3]
  46:../cleanflight/src/main/common/bitarray.c ****     for (size_t i = 0; i < size; i++) {
 242              	 .loc 1 46 0 discriminator 3
 243 0030 7B69     	 ldr r3,[r7,#20]
 244 0032 0133     	 adds r3,r3,#1
 245 0034 7B61     	 str r3,[r7,#20]
 246              	.L6:
  46:../cleanflight/src/main/common/bitarray.c ****     for (size_t i = 0; i < size; i++) {
 247              	 .loc 1 46 0 is_stmt 0 discriminator 1
 248 0036 7A69     	 ldr r2,[r7,#20]
 249 0038 BB68     	 ldr r3,[r7,#8]
 250 003a 9A42     	 cmp r2,r3
 251 003c EAD3     	 bcc .L7
 252              	.LBE2:
  48:../cleanflight/src/main/common/bitarray.c ****     }
  49:../cleanflight/src/main/common/bitarray.c **** }
 253              	 .loc 1 49 0 is_stmt 1
 254 003e 1C37     	 adds r7,r7,#28
 255              	.LCFI21:
 256              	 .cfi_def_cfa_offset 4
 257 0040 BD46     	 mov sp,r7
 258              	.LCFI22:
 259              	 .cfi_def_cfa_register 13
 260              	 
 261 0042 5DF8047B 	 ldr r7,[sp],#4
 262              	.LCFI23:
 263              	 .cfi_restore 7
 264              	 .cfi_def_cfa_offset 0
 265 0046 7047     	 bx lr
 266              	 .cfi_endproc
 267              	.LFE3:
 269              	 .section .text.bitArrayCopy,"ax",%progbits
 270              	 .align 2
 271              	 .global bitArrayCopy
 272              	 .thumb
 273              	 .thumb_func
 275              	bitArrayCopy:
 276              	.LFB4:
  50:../cleanflight/src/main/common/bitarray.c **** 
  51:../cleanflight/src/main/common/bitarray.c **** void bitArrayCopy(void *array, unsigned from, unsigned to)
  52:../cleanflight/src/main/common/bitarray.c **** {
 277              	 .loc 1 52 0
 278              	 .cfi_startproc
 279              	 
 280              	 
 281 0000 80B5     	 push {r7,lr}
 282              	.LCFI24:
 283              	 .cfi_def_cfa_offset 8
 284              	 .cfi_offset 7,-8
 285              	 .cfi_offset 14,-4
 286 0002 84B0     	 sub sp,sp,#16
 287              	.LCFI25:
 288              	 .cfi_def_cfa_offset 24
 289 0004 00AF     	 add r7,sp,#0
 290              	.LCFI26:
 291              	 .cfi_def_cfa_register 7
 292 0006 F860     	 str r0,[r7,#12]
 293 0008 B960     	 str r1,[r7,#8]
 294 000a 7A60     	 str r2,[r7,#4]
  53:../cleanflight/src/main/common/bitarray.c ****     if (bitArrayGet(array, from)) {
 295              	 .loc 1 53 0
 296 000c F868     	 ldr r0,[r7,#12]
 297 000e B968     	 ldr r1,[r7,#8]
 298 0010 FFF7FEFF 	 bl bitArrayGet
 299 0014 0346     	 mov r3,r0
 300 0016 002B     	 cmp r3,#0
 301 0018 04D0     	 beq .L9
  54:../cleanflight/src/main/common/bitarray.c ****         bitArraySet(array, to);
 302              	 .loc 1 54 0
 303 001a F868     	 ldr r0,[r7,#12]
 304 001c 7968     	 ldr r1,[r7,#4]
 305 001e FFF7FEFF 	 bl bitArraySet
 306 0022 03E0     	 b .L8
 307              	.L9:
  55:../cleanflight/src/main/common/bitarray.c ****     } else {
  56:../cleanflight/src/main/common/bitarray.c ****         bitArrayClr(array, to);
 308              	 .loc 1 56 0
 309 0024 F868     	 ldr r0,[r7,#12]
 310 0026 7968     	 ldr r1,[r7,#4]
 311 0028 FFF7FEFF 	 bl bitArrayClr
 312              	.L8:
  57:../cleanflight/src/main/common/bitarray.c ****     }
  58:../cleanflight/src/main/common/bitarray.c **** }
 313              	 .loc 1 58 0
 314 002c 1037     	 adds r7,r7,#16
 315              	.LCFI27:
 316              	 .cfi_def_cfa_offset 8
 317 002e BD46     	 mov sp,r7
 318              	.LCFI28:
 319              	 .cfi_def_cfa_register 13
 320              	 
 321 0030 80BD     	 pop {r7,pc}
 322              	 .cfi_endproc
 323              	.LFE4:
 325 0032 00BF     	 .text
 326              	.Letext0:
 327              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 328              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 329              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bitarray.c
    {standard input}:20     .text.bitArrayGet:00000000 $t
    {standard input}:25     .text.bitArrayGet:00000000 bitArrayGet
    {standard input}:80     .text.bitArraySet:00000000 $t
    {standard input}:85     .text.bitArraySet:00000000 bitArraySet
    {standard input}:137    .text.bitArrayClr:00000000 $t
    {standard input}:142    .text.bitArrayClr:00000000 bitArrayClr
    {standard input}:195    .text.bitArrayXor:00000000 $t
    {standard input}:200    .text.bitArrayXor:00000000 bitArrayXor
    {standard input}:270    .text.bitArrayCopy:00000000 $t
    {standard input}:275    .text.bitArrayCopy:00000000 bitArrayCopy
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
