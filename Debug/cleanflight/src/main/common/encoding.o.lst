   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "encoding.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.castFloatBytesToInt,"ax",%progbits
  20              	 .align 2
  21              	 .global castFloatBytesToInt
  22              	 .thumb
  23              	 .thumb_func
  25              	castFloatBytesToInt:
  26              	.LFB0:
  27              	 .file 1 "../cleanflight/src/main/common/encoding.c"
   1:../cleanflight/src/main/common/encoding.c **** /*
   2:../cleanflight/src/main/common/encoding.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/common/encoding.c ****  *
   4:../cleanflight/src/main/common/encoding.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/common/encoding.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/common/encoding.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/common/encoding.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/common/encoding.c ****  * any later version.
   9:../cleanflight/src/main/common/encoding.c ****  *
  10:../cleanflight/src/main/common/encoding.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/common/encoding.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/common/encoding.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/common/encoding.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/common/encoding.c ****  *
  15:../cleanflight/src/main/common/encoding.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/common/encoding.c ****  * along with this software.
  17:../cleanflight/src/main/common/encoding.c ****  *
  18:../cleanflight/src/main/common/encoding.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/common/encoding.c ****  */
  20:../cleanflight/src/main/common/encoding.c **** 
  21:../cleanflight/src/main/common/encoding.c **** #include "encoding.h"
  22:../cleanflight/src/main/common/encoding.c **** 
  23:../cleanflight/src/main/common/encoding.c **** /**
  24:../cleanflight/src/main/common/encoding.c ****  * Cast the in-memory representation of the given float directly to an int.
  25:../cleanflight/src/main/common/encoding.c ****  *
  26:../cleanflight/src/main/common/encoding.c ****  * This is useful for printing the hex representation of a float number (which is considerably chea
  27:../cleanflight/src/main/common/encoding.c ****  * than a full decimal float formatter, in both code size and output length).
  28:../cleanflight/src/main/common/encoding.c ****  */
  29:../cleanflight/src/main/common/encoding.c **** uint32_t castFloatBytesToInt(float f)
  30:../cleanflight/src/main/common/encoding.c **** {
  28              	 .loc 1 30 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 85B0     	 sub sp,sp,#20
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 24
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 7860     	 str r0,[r7,#4]
  31:../cleanflight/src/main/common/encoding.c ****     union floatConvert_t {
  32:../cleanflight/src/main/common/encoding.c ****         float f;
  33:../cleanflight/src/main/common/encoding.c ****         uint32_t u;
  34:../cleanflight/src/main/common/encoding.c ****     } floatConvert;
  35:../cleanflight/src/main/common/encoding.c **** 
  36:../cleanflight/src/main/common/encoding.c ****     floatConvert.f = f;
  44              	 .loc 1 36 0
  45 0008 7B68     	 ldr r3,[r7,#4]
  46 000a FB60     	 str r3,[r7,#12]
  37:../cleanflight/src/main/common/encoding.c **** 
  38:../cleanflight/src/main/common/encoding.c ****     return floatConvert.u;
  47              	 .loc 1 38 0
  48 000c FB68     	 ldr r3,[r7,#12]
  39:../cleanflight/src/main/common/encoding.c **** }
  49              	 .loc 1 39 0
  50 000e 1846     	 mov r0,r3
  51 0010 1437     	 adds r7,r7,#20
  52              	.LCFI3:
  53              	 .cfi_def_cfa_offset 4
  54 0012 BD46     	 mov sp,r7
  55              	.LCFI4:
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 0014 5DF8047B 	 ldr r7,[sp],#4
  59              	.LCFI5:
  60              	 .cfi_restore 7
  61              	 .cfi_def_cfa_offset 0
  62 0018 7047     	 bx lr
  63              	 .cfi_endproc
  64              	.LFE0:
  66 001a 00BF     	 .section .text.zigzagEncode,"ax",%progbits
  67              	 .align 2
  68              	 .global zigzagEncode
  69              	 .thumb
  70              	 .thumb_func
  72              	zigzagEncode:
  73              	.LFB1:
  40:../cleanflight/src/main/common/encoding.c **** 
  41:../cleanflight/src/main/common/encoding.c **** /**
  42:../cleanflight/src/main/common/encoding.c ****  * ZigZag encoding maps all values of a signed integer into those of an unsigned integer in such
  43:../cleanflight/src/main/common/encoding.c ****  * a way that numbers of small absolute value correspond to small integers in the result.
  44:../cleanflight/src/main/common/encoding.c ****  *
  45:../cleanflight/src/main/common/encoding.c ****  * (Compared to just casting a signed to an unsigned which creates huge resulting numbers for
  46:../cleanflight/src/main/common/encoding.c ****  * small negative integers).
  47:../cleanflight/src/main/common/encoding.c ****  */
  48:../cleanflight/src/main/common/encoding.c **** uint32_t zigzagEncode(int32_t value)
  49:../cleanflight/src/main/common/encoding.c **** {
  74              	 .loc 1 49 0
  75              	 .cfi_startproc
  76              	 
  77              	 
  78              	 
  79 0000 80B4     	 push {r7}
  80              	.LCFI6:
  81              	 .cfi_def_cfa_offset 4
  82              	 .cfi_offset 7,-4
  83 0002 83B0     	 sub sp,sp,#12
  84              	.LCFI7:
  85              	 .cfi_def_cfa_offset 16
  86 0004 00AF     	 add r7,sp,#0
  87              	.LCFI8:
  88              	 .cfi_def_cfa_register 7
  89 0006 7860     	 str r0,[r7,#4]
  50:../cleanflight/src/main/common/encoding.c ****     return (uint32_t)((value << 1) ^ (value >> 31));
  90              	 .loc 1 50 0
  91 0008 7B68     	 ldr r3,[r7,#4]
  92 000a 5A00     	 lsls r2,r3,#1
  93 000c 7B68     	 ldr r3,[r7,#4]
  94 000e DB17     	 asrs r3,r3,#31
  95 0010 5340     	 eors r3,r3,r2
  51:../cleanflight/src/main/common/encoding.c **** }
  96              	 .loc 1 51 0
  97 0012 1846     	 mov r0,r3
  98 0014 0C37     	 adds r7,r7,#12
  99              	.LCFI9:
 100              	 .cfi_def_cfa_offset 4
 101 0016 BD46     	 mov sp,r7
 102              	.LCFI10:
 103              	 .cfi_def_cfa_register 13
 104              	 
 105 0018 5DF8047B 	 ldr r7,[sp],#4
 106              	.LCFI11:
 107              	 .cfi_restore 7
 108              	 .cfi_def_cfa_offset 0
 109 001c 7047     	 bx lr
 110              	 .cfi_endproc
 111              	.LFE1:
 113 001e 00BF     	 .text
 114              	.Letext0:
 115              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 116              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 encoding.c
    {standard input}:20     .text.castFloatBytesToInt:00000000 $t
    {standard input}:25     .text.castFloatBytesToInt:00000000 castFloatBytesToInt
    {standard input}:67     .text.zigzagEncode:00000000 $t
    {standard input}:72     .text.zigzagEncode:00000000 zigzagEncode
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
