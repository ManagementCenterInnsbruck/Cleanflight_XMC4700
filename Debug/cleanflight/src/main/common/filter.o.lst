   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "filter.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.nullFilterApply,"ax",%progbits
  20              	 .align 2
  21              	 .global nullFilterApply
  22              	 .thumb
  23              	 .thumb_func
  25              	nullFilterApply:
  26              	.LFB523:
  27              	 .file 1 "../cleanflight/src/main/common/filter.c"
   1:../cleanflight/src/main/common/filter.c **** /*
   2:../cleanflight/src/main/common/filter.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/common/filter.c ****  *
   4:../cleanflight/src/main/common/filter.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/common/filter.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/common/filter.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/common/filter.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/common/filter.c ****  * any later version.
   9:../cleanflight/src/main/common/filter.c ****  *
  10:../cleanflight/src/main/common/filter.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/common/filter.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/common/filter.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/common/filter.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/common/filter.c ****  *
  15:../cleanflight/src/main/common/filter.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/common/filter.c ****  * along with this software.
  17:../cleanflight/src/main/common/filter.c ****  *
  18:../cleanflight/src/main/common/filter.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/common/filter.c ****  */
  20:../cleanflight/src/main/common/filter.c **** 
  21:../cleanflight/src/main/common/filter.c **** #include <stdbool.h>
  22:../cleanflight/src/main/common/filter.c **** #include <stdint.h>
  23:../cleanflight/src/main/common/filter.c **** #include <string.h>
  24:../cleanflight/src/main/common/filter.c **** #include <math.h>
  25:../cleanflight/src/main/common/filter.c **** 
  26:../cleanflight/src/main/common/filter.c **** #include "platform.h"
  27:../cleanflight/src/main/common/filter.c **** 
  28:../cleanflight/src/main/common/filter.c **** #include "common/filter.h"
  29:../cleanflight/src/main/common/filter.c **** #include "common/maths.h"
  30:../cleanflight/src/main/common/filter.c **** #include "common/utils.h"
  31:../cleanflight/src/main/common/filter.c **** 
  32:../cleanflight/src/main/common/filter.c **** #define M_LN2_FLOAT 0.69314718055994530942f
  33:../cleanflight/src/main/common/filter.c **** #define M_PI_FLOAT  3.14159265358979323846f
  34:../cleanflight/src/main/common/filter.c **** #define BIQUAD_Q 1.0f / sqrtf(2.0f)     /* quality factor - 2nd order butterworth*/
  35:../cleanflight/src/main/common/filter.c **** 
  36:../cleanflight/src/main/common/filter.c **** // NULL filter
  37:../cleanflight/src/main/common/filter.c **** 
  38:../cleanflight/src/main/common/filter.c **** FAST_CODE float nullFilterApply(filter_t *filter, float input)
  39:../cleanflight/src/main/common/filter.c **** {
  28              	 .loc 1 39 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 83B0     	 sub sp,sp,#12
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 16
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 7860     	 str r0,[r7,#4]
  44 0008 3960     	 str r1,[r7]
  40:../cleanflight/src/main/common/filter.c ****     UNUSED(filter);
  41:../cleanflight/src/main/common/filter.c ****     return input;
  45              	 .loc 1 41 0
  46 000a 3B68     	 ldr r3,[r7]
  42:../cleanflight/src/main/common/filter.c **** }
  47              	 .loc 1 42 0
  48 000c 1846     	 mov r0,r3
  49 000e 0C37     	 adds r7,r7,#12
  50              	.LCFI3:
  51              	 .cfi_def_cfa_offset 4
  52 0010 BD46     	 mov sp,r7
  53              	.LCFI4:
  54              	 .cfi_def_cfa_register 13
  55              	 
  56 0012 5DF8047B 	 ldr r7,[sp],#4
  57              	.LCFI5:
  58              	 .cfi_restore 7
  59              	 .cfi_def_cfa_offset 0
  60 0016 7047     	 bx lr
  61              	 .cfi_endproc
  62              	.LFE523:
  64              	 .section .text.pt1FilterGain,"ax",%progbits
  65              	 .align 2
  66              	 .global pt1FilterGain
  67              	 .thumb
  68              	 .thumb_func
  70              	pt1FilterGain:
  71              	.LFB524:
  43:../cleanflight/src/main/common/filter.c **** 
  44:../cleanflight/src/main/common/filter.c **** 
  45:../cleanflight/src/main/common/filter.c **** // PT1 Low Pass filter
  46:../cleanflight/src/main/common/filter.c **** 
  47:../cleanflight/src/main/common/filter.c **** float pt1FilterGain(uint16_t f_cut, float dT)
  48:../cleanflight/src/main/common/filter.c **** {
  72              	 .loc 1 48 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 85B0     	 sub sp,sp,#20
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 24
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 0346     	 mov r3,r0
  88 0008 3960     	 str r1,[r7]
  89 000a FB80     	 strh r3,[r7,#6]
  49:../cleanflight/src/main/common/filter.c ****     float RC = 1 / ( 2 * M_PI_FLOAT * f_cut);
  90              	 .loc 1 49 0
  91 000c FB88     	 ldrh r3,[r7,#6]
  92 000e 07EE903A 	 fmsr s15,r3
  93 0012 F8EEE77A 	 fsitos s15,s15
  94 0016 9FED0E7A 	 flds s14,.L5
  95 001a 67EE877A 	 fmuls s15,s15,s14
  96 001e B7EE007A 	 fconsts s14,#112
  97 0022 C7EE277A 	 fdivs s15,s14,s15
  98 0026 C7ED037A 	 fsts s15,[r7,#12]
  50:../cleanflight/src/main/common/filter.c ****     return dT / (RC + dT);
  99              	 .loc 1 50 0
 100 002a 97ED037A 	 flds s14,[r7,#12]
 101 002e D7ED007A 	 flds s15,[r7]
 102 0032 77EE277A 	 fadds s15,s14,s15
 103 0036 97ED007A 	 flds s14,[r7]
 104 003a C7EE277A 	 fdivs s15,s14,s15
 105 003e 17EE903A 	 fmrs r3,s15
  51:../cleanflight/src/main/common/filter.c **** }
 106              	 .loc 1 51 0
 107 0042 1846     	 mov r0,r3
 108 0044 1437     	 adds r7,r7,#20
 109              	.LCFI9:
 110              	 .cfi_def_cfa_offset 4
 111 0046 BD46     	 mov sp,r7
 112              	.LCFI10:
 113              	 .cfi_def_cfa_register 13
 114              	 
 115 0048 5DF8047B 	 ldr r7,[sp],#4
 116              	.LCFI11:
 117              	 .cfi_restore 7
 118              	 .cfi_def_cfa_offset 0
 119 004c 7047     	 bx lr
 120              	.L6:
 121 004e 00BF     	 .align 2
 122              	.L5:
 123 0050 DB0FC940 	 .word 1086918619
 124              	 .cfi_endproc
 125              	.LFE524:
 127              	 .section .text.pt1FilterInit,"ax",%progbits
 128              	 .align 2
 129              	 .global pt1FilterInit
 130              	 .thumb
 131              	 .thumb_func
 133              	pt1FilterInit:
 134              	.LFB525:
  52:../cleanflight/src/main/common/filter.c **** 
  53:../cleanflight/src/main/common/filter.c **** void pt1FilterInit(pt1Filter_t *filter, float k)
  54:../cleanflight/src/main/common/filter.c **** {
 135              	 .loc 1 54 0
 136              	 .cfi_startproc
 137              	 
 138              	 
 139              	 
 140 0000 80B4     	 push {r7}
 141              	.LCFI12:
 142              	 .cfi_def_cfa_offset 4
 143              	 .cfi_offset 7,-4
 144 0002 83B0     	 sub sp,sp,#12
 145              	.LCFI13:
 146              	 .cfi_def_cfa_offset 16
 147 0004 00AF     	 add r7,sp,#0
 148              	.LCFI14:
 149              	 .cfi_def_cfa_register 7
 150 0006 7860     	 str r0,[r7,#4]
 151 0008 3960     	 str r1,[r7]
  55:../cleanflight/src/main/common/filter.c ****     filter->state = 0.0f;
 152              	 .loc 1 55 0
 153 000a 7B68     	 ldr r3,[r7,#4]
 154 000c 4FF00002 	 mov r2,#0
 155 0010 1A60     	 str r2,[r3]
  56:../cleanflight/src/main/common/filter.c ****     filter->k = k;
 156              	 .loc 1 56 0
 157 0012 7B68     	 ldr r3,[r7,#4]
 158 0014 3A68     	 ldr r2,[r7]
 159 0016 5A60     	 str r2,[r3,#4]
  57:../cleanflight/src/main/common/filter.c **** }
 160              	 .loc 1 57 0
 161 0018 0C37     	 adds r7,r7,#12
 162              	.LCFI15:
 163              	 .cfi_def_cfa_offset 4
 164 001a BD46     	 mov sp,r7
 165              	.LCFI16:
 166              	 .cfi_def_cfa_register 13
 167              	 
 168 001c 5DF8047B 	 ldr r7,[sp],#4
 169              	.LCFI17:
 170              	 .cfi_restore 7
 171              	 .cfi_def_cfa_offset 0
 172 0020 7047     	 bx lr
 173              	 .cfi_endproc
 174              	.LFE525:
 176 0022 00BF     	 .section .text.pt1FilterUpdateCutoff,"ax",%progbits
 177              	 .align 2
 178              	 .global pt1FilterUpdateCutoff
 179              	 .thumb
 180              	 .thumb_func
 182              	pt1FilterUpdateCutoff:
 183              	.LFB526:
  58:../cleanflight/src/main/common/filter.c **** 
  59:../cleanflight/src/main/common/filter.c **** void pt1FilterUpdateCutoff(pt1Filter_t *filter, float k)
  60:../cleanflight/src/main/common/filter.c **** {
 184              	 .loc 1 60 0
 185              	 .cfi_startproc
 186              	 
 187              	 
 188              	 
 189 0000 80B4     	 push {r7}
 190              	.LCFI18:
 191              	 .cfi_def_cfa_offset 4
 192              	 .cfi_offset 7,-4
 193 0002 83B0     	 sub sp,sp,#12
 194              	.LCFI19:
 195              	 .cfi_def_cfa_offset 16
 196 0004 00AF     	 add r7,sp,#0
 197              	.LCFI20:
 198              	 .cfi_def_cfa_register 7
 199 0006 7860     	 str r0,[r7,#4]
 200 0008 3960     	 str r1,[r7]
  61:../cleanflight/src/main/common/filter.c ****     filter->k = k;
 201              	 .loc 1 61 0
 202 000a 7B68     	 ldr r3,[r7,#4]
 203 000c 3A68     	 ldr r2,[r7]
 204 000e 5A60     	 str r2,[r3,#4]
  62:../cleanflight/src/main/common/filter.c **** }
 205              	 .loc 1 62 0
 206 0010 0C37     	 adds r7,r7,#12
 207              	.LCFI21:
 208              	 .cfi_def_cfa_offset 4
 209 0012 BD46     	 mov sp,r7
 210              	.LCFI22:
 211              	 .cfi_def_cfa_register 13
 212              	 
 213 0014 5DF8047B 	 ldr r7,[sp],#4
 214              	.LCFI23:
 215              	 .cfi_restore 7
 216              	 .cfi_def_cfa_offset 0
 217 0018 7047     	 bx lr
 218              	 .cfi_endproc
 219              	.LFE526:
 221 001a 00BF     	 .section .text.pt1FilterApply,"ax",%progbits
 222              	 .align 2
 223              	 .global pt1FilterApply
 224              	 .thumb
 225              	 .thumb_func
 227              	pt1FilterApply:
 228              	.LFB527:
  63:../cleanflight/src/main/common/filter.c **** 
  64:../cleanflight/src/main/common/filter.c **** FAST_CODE float pt1FilterApply(pt1Filter_t *filter, float input)
  65:../cleanflight/src/main/common/filter.c **** {
 229              	 .loc 1 65 0
 230              	 .cfi_startproc
 231              	 
 232              	 
 233              	 
 234 0000 80B4     	 push {r7}
 235              	.LCFI24:
 236              	 .cfi_def_cfa_offset 4
 237              	 .cfi_offset 7,-4
 238 0002 83B0     	 sub sp,sp,#12
 239              	.LCFI25:
 240              	 .cfi_def_cfa_offset 16
 241 0004 00AF     	 add r7,sp,#0
 242              	.LCFI26:
 243              	 .cfi_def_cfa_register 7
 244 0006 7860     	 str r0,[r7,#4]
 245 0008 3960     	 str r1,[r7]
  66:../cleanflight/src/main/common/filter.c ****     filter->state = filter->state + filter->k * (input - filter->state);
 246              	 .loc 1 66 0
 247 000a 7B68     	 ldr r3,[r7,#4]
 248 000c 1A68     	 ldr r2,[r3]
 249 000e 1346     	 mov r3,r2
 250 0010 1A46     	 mov r2,r3
 251 0012 7B68     	 ldr r3,[r7,#4]
 252 0014 5968     	 ldr r1,[r3,#4]
 253 0016 0B46     	 mov r3,r1
 254 0018 1946     	 mov r1,r3
 255 001a 7B68     	 ldr r3,[r7,#4]
 256 001c 1B68     	 ldr r3,[r3]
 257 001e D7ED007A 	 flds s15,[r7]
 258 0022 07EE103A 	 fmsr s14,r3
 259 0026 77EEC77A 	 fsubs s15,s15,s14
 260 002a 07EE101A 	 fmsr s14,r1
 261 002e 67EE277A 	 fmuls s15,s14,s15
 262 0032 07EE102A 	 fmsr s14,r2
 263 0036 77EE277A 	 fadds s15,s14,s15
 264 003a 7B68     	 ldr r3,[r7,#4]
 265 003c 17EE902A 	 fmrs r2,s15
 266 0040 1A60     	 str r2,[r3]
  67:../cleanflight/src/main/common/filter.c ****     return filter->state;
 267              	 .loc 1 67 0
 268 0042 7B68     	 ldr r3,[r7,#4]
 269 0044 1B68     	 ldr r3,[r3]
  68:../cleanflight/src/main/common/filter.c **** }
 270              	 .loc 1 68 0
 271 0046 1846     	 mov r0,r3
 272 0048 0C37     	 adds r7,r7,#12
 273              	.LCFI27:
 274              	 .cfi_def_cfa_offset 4
 275 004a BD46     	 mov sp,r7
 276              	.LCFI28:
 277              	 .cfi_def_cfa_register 13
 278              	 
 279 004c 5DF8047B 	 ldr r7,[sp],#4
 280              	.LCFI29:
 281              	 .cfi_restore 7
 282              	 .cfi_def_cfa_offset 0
 283 0050 7047     	 bx lr
 284              	 .cfi_endproc
 285              	.LFE527:
 287 0052 00BF     	 .section .text.slewFilterInit,"ax",%progbits
 288              	 .align 2
 289              	 .global slewFilterInit
 290              	 .thumb
 291              	 .thumb_func
 293              	slewFilterInit:
 294              	.LFB528:
  69:../cleanflight/src/main/common/filter.c **** 
  70:../cleanflight/src/main/common/filter.c **** // Slew filter with limit
  71:../cleanflight/src/main/common/filter.c **** 
  72:../cleanflight/src/main/common/filter.c **** void slewFilterInit(slewFilter_t *filter, float slewLimit, float threshold)
  73:../cleanflight/src/main/common/filter.c **** {
 295              	 .loc 1 73 0
 296              	 .cfi_startproc
 297              	 
 298              	 
 299              	 
 300 0000 80B4     	 push {r7}
 301              	.LCFI30:
 302              	 .cfi_def_cfa_offset 4
 303              	 .cfi_offset 7,-4
 304 0002 85B0     	 sub sp,sp,#20
 305              	.LCFI31:
 306              	 .cfi_def_cfa_offset 24
 307 0004 00AF     	 add r7,sp,#0
 308              	.LCFI32:
 309              	 .cfi_def_cfa_register 7
 310 0006 F860     	 str r0,[r7,#12]
 311 0008 B960     	 str r1,[r7,#8]
 312 000a 7A60     	 str r2,[r7,#4]
  74:../cleanflight/src/main/common/filter.c ****     filter->state = 0.0f;
 313              	 .loc 1 74 0
 314 000c FB68     	 ldr r3,[r7,#12]
 315 000e 4FF00002 	 mov r2,#0
 316 0012 1A60     	 str r2,[r3]
  75:../cleanflight/src/main/common/filter.c ****     filter->slewLimit = slewLimit;
 317              	 .loc 1 75 0
 318 0014 FB68     	 ldr r3,[r7,#12]
 319 0016 BA68     	 ldr r2,[r7,#8]
 320 0018 5A60     	 str r2,[r3,#4]
  76:../cleanflight/src/main/common/filter.c ****     filter->threshold = threshold;
 321              	 .loc 1 76 0
 322 001a FB68     	 ldr r3,[r7,#12]
 323 001c 7A68     	 ldr r2,[r7,#4]
 324 001e 9A60     	 str r2,[r3,#8]
  77:../cleanflight/src/main/common/filter.c **** }
 325              	 .loc 1 77 0
 326 0020 1437     	 adds r7,r7,#20
 327              	.LCFI33:
 328              	 .cfi_def_cfa_offset 4
 329 0022 BD46     	 mov sp,r7
 330              	.LCFI34:
 331              	 .cfi_def_cfa_register 13
 332              	 
 333 0024 5DF8047B 	 ldr r7,[sp],#4
 334              	.LCFI35:
 335              	 .cfi_restore 7
 336              	 .cfi_def_cfa_offset 0
 337 0028 7047     	 bx lr
 338              	 .cfi_endproc
 339              	.LFE528:
 341 002a 00BF     	 .section .text.slewFilterApply,"ax",%progbits
 342              	 .align 2
 343              	 .global slewFilterApply
 344              	 .thumb
 345              	 .thumb_func
 347              	slewFilterApply:
 348              	.LFB529:
  78:../cleanflight/src/main/common/filter.c **** 
  79:../cleanflight/src/main/common/filter.c **** FAST_CODE float slewFilterApply(slewFilter_t *filter, float input)
  80:../cleanflight/src/main/common/filter.c **** {
 349              	 .loc 1 80 0
 350              	 .cfi_startproc
 351              	 
 352              	 
 353              	 
 354 0000 80B4     	 push {r7}
 355              	.LCFI36:
 356              	 .cfi_def_cfa_offset 4
 357              	 .cfi_offset 7,-4
 358 0002 83B0     	 sub sp,sp,#12
 359              	.LCFI37:
 360              	 .cfi_def_cfa_offset 16
 361 0004 00AF     	 add r7,sp,#0
 362              	.LCFI38:
 363              	 .cfi_def_cfa_register 7
 364 0006 7860     	 str r0,[r7,#4]
 365 0008 3960     	 str r1,[r7]
  81:../cleanflight/src/main/common/filter.c ****     if (filter->state >= filter->threshold) {
 366              	 .loc 1 81 0
 367 000a 7B68     	 ldr r3,[r7,#4]
 368 000c 1A68     	 ldr r2,[r3]
 369 000e 1346     	 mov r3,r2
 370 0010 1A46     	 mov r2,r3
 371 0012 7B68     	 ldr r3,[r7,#4]
 372 0014 9B68     	 ldr r3,[r3,#8]
 373 0016 07EE902A 	 fmsr s15,r2
 374 001a 07EE103A 	 fmsr s14,r3
 375 001e F4EEC77A 	 fcmpes s15,s14
 376 0022 F1EE10FA 	 fmstat
 377 0026 17DB     	 blt .L27
  82:../cleanflight/src/main/common/filter.c ****         if (input >= filter->state - filter->slewLimit) {
 378              	 .loc 1 82 0
 379 0028 7B68     	 ldr r3,[r7,#4]
 380 002a 1A68     	 ldr r2,[r3]
 381 002c 1346     	 mov r3,r2
 382 002e 1A46     	 mov r2,r3
 383 0030 7B68     	 ldr r3,[r7,#4]
 384 0032 5B68     	 ldr r3,[r3,#4]
 385 0034 07EE902A 	 fmsr s15,r2
 386 0038 07EE103A 	 fmsr s14,r3
 387 003c 37EEC77A 	 fsubs s14,s15,s14
 388 0040 D7ED007A 	 flds s15,[r7]
 389 0044 B4EEE77A 	 fcmpes s14,s15
 390 0048 F1EE10FA 	 fmstat
 391 004c 00D9     	 bls .L24
 392 004e 2FE0     	 b .L17
 393              	.L24:
  83:../cleanflight/src/main/common/filter.c ****             filter->state = input;
 394              	 .loc 1 83 0
 395 0050 7B68     	 ldr r3,[r7,#4]
 396 0052 3A68     	 ldr r2,[r7]
 397 0054 1A60     	 str r2,[r3]
 398 0056 2BE0     	 b .L17
 399              	.L27:
  84:../cleanflight/src/main/common/filter.c ****         }
  85:../cleanflight/src/main/common/filter.c ****     } else if (filter->state <= -filter->threshold) {
 400              	 .loc 1 85 0
 401 0058 7B68     	 ldr r3,[r7,#4]
 402 005a 1A68     	 ldr r2,[r3]
 403 005c 1346     	 mov r3,r2
 404 005e 1A46     	 mov r2,r3
 405 0060 7B68     	 ldr r3,[r7,#4]
 406 0062 9B68     	 ldr r3,[r3,#8]
 407 0064 07EE903A 	 fmsr s15,r3
 408 0068 F1EE677A 	 fnegs s15,s15
 409 006c 07EE102A 	 fmsr s14,r2
 410 0070 B4EEE77A 	 fcmpes s14,s15
 411 0074 F1EE10FA 	 fmstat
 412 0078 17D8     	 bhi .L28
  86:../cleanflight/src/main/common/filter.c ****         if (input <= filter->state + filter->slewLimit) {
 413              	 .loc 1 86 0
 414 007a 7B68     	 ldr r3,[r7,#4]
 415 007c 1A68     	 ldr r2,[r3]
 416 007e 1346     	 mov r3,r2
 417 0080 1A46     	 mov r2,r3
 418 0082 7B68     	 ldr r3,[r7,#4]
 419 0084 5B68     	 ldr r3,[r3,#4]
 420 0086 07EE902A 	 fmsr s15,r2
 421 008a 07EE103A 	 fmsr s14,r3
 422 008e 37EE877A 	 fadds s14,s15,s14
 423 0092 D7ED007A 	 flds s15,[r7]
 424 0096 B4EEE77A 	 fcmpes s14,s15
 425 009a F1EE10FA 	 fmstat
 426 009e 00DA     	 bge .L26
 427 00a0 06E0     	 b .L17
 428              	.L26:
  87:../cleanflight/src/main/common/filter.c ****             filter->state = input;
 429              	 .loc 1 87 0
 430 00a2 7B68     	 ldr r3,[r7,#4]
 431 00a4 3A68     	 ldr r2,[r7]
 432 00a6 1A60     	 str r2,[r3]
 433 00a8 02E0     	 b .L17
 434              	.L28:
  88:../cleanflight/src/main/common/filter.c ****         }
  89:../cleanflight/src/main/common/filter.c ****     } else {
  90:../cleanflight/src/main/common/filter.c ****         filter->state = input;
 435              	 .loc 1 90 0
 436 00aa 7B68     	 ldr r3,[r7,#4]
 437 00ac 3A68     	 ldr r2,[r7]
 438 00ae 1A60     	 str r2,[r3]
 439              	.L17:
  91:../cleanflight/src/main/common/filter.c ****     }
  92:../cleanflight/src/main/common/filter.c ****     return filter->state;
 440              	 .loc 1 92 0
 441 00b0 7B68     	 ldr r3,[r7,#4]
 442 00b2 1B68     	 ldr r3,[r3]
  93:../cleanflight/src/main/common/filter.c **** }
 443              	 .loc 1 93 0
 444 00b4 1846     	 mov r0,r3
 445 00b6 0C37     	 adds r7,r7,#12
 446              	.LCFI39:
 447              	 .cfi_def_cfa_offset 4
 448 00b8 BD46     	 mov sp,r7
 449              	.LCFI40:
 450              	 .cfi_def_cfa_register 13
 451              	 
 452 00ba 5DF8047B 	 ldr r7,[sp],#4
 453              	.LCFI41:
 454              	 .cfi_restore 7
 455              	 .cfi_def_cfa_offset 0
 456 00be 7047     	 bx lr
 457              	 .cfi_endproc
 458              	.LFE529:
 460              	 .section .text.filterGetNotchQ,"ax",%progbits
 461              	 .align 2
 462              	 .global filterGetNotchQ
 463              	 .thumb
 464              	 .thumb_func
 466              	filterGetNotchQ:
 467              	.LFB530:
  94:../cleanflight/src/main/common/filter.c **** 
  95:../cleanflight/src/main/common/filter.c **** // get notch filter Q given center frequency (f0) and lower cutoff frequency (f1)
  96:../cleanflight/src/main/common/filter.c **** // Q = f0 / (f2 - f1) ; f2 = f0^2 / f1
  97:../cleanflight/src/main/common/filter.c **** float filterGetNotchQ(float centerFreq, float cutoffFreq) {
 468              	 .loc 1 97 0
 469              	 .cfi_startproc
 470              	 
 471              	 
 472              	 
 473 0000 80B4     	 push {r7}
 474              	.LCFI42:
 475              	 .cfi_def_cfa_offset 4
 476              	 .cfi_offset 7,-4
 477 0002 83B0     	 sub sp,sp,#12
 478              	.LCFI43:
 479              	 .cfi_def_cfa_offset 16
 480 0004 00AF     	 add r7,sp,#0
 481              	.LCFI44:
 482              	 .cfi_def_cfa_register 7
 483 0006 7860     	 str r0,[r7,#4]
 484 0008 3960     	 str r1,[r7]
  98:../cleanflight/src/main/common/filter.c ****     return centerFreq * cutoffFreq / (centerFreq * centerFreq - cutoffFreq * cutoffFreq);
 485              	 .loc 1 98 0
 486 000a 97ED017A 	 flds s14,[r7,#4]
 487 000e D7ED007A 	 flds s15,[r7]
 488 0012 27EE277A 	 fmuls s14,s14,s15
 489 0016 D7ED016A 	 flds s13,[r7,#4]
 490 001a D7ED017A 	 flds s15,[r7,#4]
 491 001e 66EEA76A 	 fmuls s13,s13,s15
 492 0022 97ED006A 	 flds s12,[r7]
 493 0026 D7ED007A 	 flds s15,[r7]
 494 002a 66EE277A 	 fmuls s15,s12,s15
 495 002e 76EEE77A 	 fsubs s15,s13,s15
 496 0032 C7EE277A 	 fdivs s15,s14,s15
 497 0036 17EE903A 	 fmrs r3,s15
  99:../cleanflight/src/main/common/filter.c **** }
 498              	 .loc 1 99 0
 499 003a 1846     	 mov r0,r3
 500 003c 0C37     	 adds r7,r7,#12
 501              	.LCFI45:
 502              	 .cfi_def_cfa_offset 4
 503 003e BD46     	 mov sp,r7
 504              	.LCFI46:
 505              	 .cfi_def_cfa_register 13
 506              	 
 507 0040 5DF8047B 	 ldr r7,[sp],#4
 508              	.LCFI47:
 509              	 .cfi_restore 7
 510              	 .cfi_def_cfa_offset 0
 511 0044 7047     	 bx lr
 512              	 .cfi_endproc
 513              	.LFE530:
 515 0046 00BF     	 .section .text.biquadFilterInitLPF,"ax",%progbits
 516              	 .align 2
 517              	 .global biquadFilterInitLPF
 518              	 .thumb
 519              	 .thumb_func
 521              	biquadFilterInitLPF:
 522              	.LFB531:
 100:../cleanflight/src/main/common/filter.c **** 
 101:../cleanflight/src/main/common/filter.c **** /* sets up a biquad Filter */
 102:../cleanflight/src/main/common/filter.c **** void biquadFilterInitLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate)
 103:../cleanflight/src/main/common/filter.c **** {
 523              	 .loc 1 103 0
 524              	 .cfi_startproc
 525              	 
 526              	 
 527 0000 80B5     	 push {r7,lr}
 528              	.LCFI48:
 529              	 .cfi_def_cfa_offset 8
 530              	 .cfi_offset 7,-8
 531              	 .cfi_offset 14,-4
 532 0002 86B0     	 sub sp,sp,#24
 533              	.LCFI49:
 534              	 .cfi_def_cfa_offset 32
 535 0004 02AF     	 add r7,sp,#8
 536              	.LCFI50:
 537              	 .cfi_def_cfa 7,24
 538 0006 F860     	 str r0,[r7,#12]
 539 0008 B960     	 str r1,[r7,#8]
 540 000a 7A60     	 str r2,[r7,#4]
 104:../cleanflight/src/main/common/filter.c ****     biquadFilterInit(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF);
 541              	 .loc 1 104 0
 542 000c 0023     	 movs r3,#0
 543 000e 0093     	 str r3,[sp]
 544 0010 F868     	 ldr r0,[r7,#12]
 545 0012 B968     	 ldr r1,[r7,#8]
 546 0014 7A68     	 ldr r2,[r7,#4]
 547 0016 034B     	 ldr r3,.L32
 548 0018 FFF7FEFF 	 bl biquadFilterInit
 105:../cleanflight/src/main/common/filter.c **** }
 549              	 .loc 1 105 0
 550 001c 1037     	 adds r7,r7,#16
 551              	.LCFI51:
 552              	 .cfi_def_cfa_offset 8
 553 001e BD46     	 mov sp,r7
 554              	.LCFI52:
 555              	 .cfi_def_cfa_register 13
 556              	 
 557 0020 80BD     	 pop {r7,pc}
 558              	.L33:
 559 0022 00BF     	 .align 2
 560              	.L32:
 561 0024 F304353F 	 .word 1060439283
 562              	 .cfi_endproc
 563              	.LFE531:
 565              	 .section .text.biquadFilterInit,"ax",%progbits
 566              	 .align 2
 567              	 .global biquadFilterInit
 568              	 .thumb
 569              	 .thumb_func
 571              	biquadFilterInit:
 572              	.LFB532:
 106:../cleanflight/src/main/common/filter.c **** 
 107:../cleanflight/src/main/common/filter.c **** void biquadFilterInit(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, float Q, biqu
 108:../cleanflight/src/main/common/filter.c **** {
 573              	 .loc 1 108 0
 574              	 .cfi_startproc
 575              	 
 576              	 
 577 0000 80B5     	 push {r7,lr}
 578              	.LCFI53:
 579              	 .cfi_def_cfa_offset 8
 580              	 .cfi_offset 7,-8
 581              	 .cfi_offset 14,-4
 582 0002 8EB0     	 sub sp,sp,#56
 583              	.LCFI54:
 584              	 .cfi_def_cfa_offset 64
 585 0004 00AF     	 add r7,sp,#0
 586              	.LCFI55:
 587              	 .cfi_def_cfa_register 7
 588 0006 F860     	 str r0,[r7,#12]
 589 0008 B960     	 str r1,[r7,#8]
 590 000a 7A60     	 str r2,[r7,#4]
 591 000c 3B60     	 str r3,[r7]
 109:../cleanflight/src/main/common/filter.c ****     // setup variables
 110:../cleanflight/src/main/common/filter.c ****     const float omega = 2.0f * M_PI_FLOAT * filterFreq * refreshRate * 0.000001f;
 592              	 .loc 1 110 0
 593 000e D7ED027A 	 flds s15,[r7,#8]
 594 0012 9FED857A 	 flds s14,.L39
 595 0016 27EE877A 	 fmuls s14,s15,s14
 596 001a 7B68     	 ldr r3,[r7,#4]
 597 001c 07EE903A 	 fmsr s15,r3
 598 0020 F8EE677A 	 fuitos s15,s15
 599 0024 67EE277A 	 fmuls s15,s14,s15
 600 0028 9FED807A 	 flds s14,.L39+4
 601 002c 67EE877A 	 fmuls s15,s15,s14
 602 0030 C7ED077A 	 fsts s15,[r7,#28]
 111:../cleanflight/src/main/common/filter.c ****     const float sn = sin_approx(omega);
 603              	 .loc 1 111 0
 604 0034 F869     	 ldr r0,[r7,#28]
 605 0036 FFF7FEFF 	 bl sin_approx
 606 003a B861     	 str r0,[r7,#24]
 112:../cleanflight/src/main/common/filter.c ****     const float cs = cos_approx(omega);
 607              	 .loc 1 112 0
 608 003c F869     	 ldr r0,[r7,#28]
 609 003e FFF7FEFF 	 bl cos_approx
 610 0042 7861     	 str r0,[r7,#20]
 113:../cleanflight/src/main/common/filter.c ****     const float alpha = sn / (2.0f * Q);
 611              	 .loc 1 113 0
 612 0044 D7ED007A 	 flds s15,[r7]
 613 0048 77EEA77A 	 fadds s15,s15,s15
 614 004c 97ED067A 	 flds s14,[r7,#24]
 615 0050 C7EE277A 	 fdivs s15,s14,s15
 616 0054 C7ED047A 	 fsts s15,[r7,#16]
 114:../cleanflight/src/main/common/filter.c **** 
 115:../cleanflight/src/main/common/filter.c ****     float b0 = 0, b1 = 0, b2 = 0, a0 = 0, a1 = 0, a2 = 0;
 617              	 .loc 1 115 0
 618 0058 4FF00003 	 mov r3,#0
 619 005c 7B63     	 str r3,[r7,#52]
 620 005e 4FF00003 	 mov r3,#0
 621 0062 3B63     	 str r3,[r7,#48]
 622 0064 4FF00003 	 mov r3,#0
 623 0068 FB62     	 str r3,[r7,#44]
 624 006a 4FF00003 	 mov r3,#0
 625 006e BB62     	 str r3,[r7,#40]
 626 0070 4FF00003 	 mov r3,#0
 627 0074 7B62     	 str r3,[r7,#36]
 628 0076 4FF00003 	 mov r3,#0
 629 007a 3B62     	 str r3,[r7,#32]
 116:../cleanflight/src/main/common/filter.c **** 
 117:../cleanflight/src/main/common/filter.c ****     switch (filterType) {
 630              	 .loc 1 117 0
 631 007c 97F84030 	 ldrb r3,[r7,#64]
 632 0080 012B     	 cmp r3,#1
 633 0082 3DD0     	 beq .L36
 634 0084 022B     	 cmp r3,#2
 635 0086 62D0     	 beq .L37
 636 0088 002B     	 cmp r3,#0
 637 008a 40F08480 	 bne .L35
 118:../cleanflight/src/main/common/filter.c ****     case FILTER_LPF:
 119:../cleanflight/src/main/common/filter.c ****         // 2nd order Butterworth (with Q=1/sqrt(2)) / Butterworth biquad section with Q
 120:../cleanflight/src/main/common/filter.c ****         // described in http://www.ti.com/lit/an/slaa447/slaa447.pdf
 121:../cleanflight/src/main/common/filter.c ****         b0 = (1 - cs) * 0.5f;
 638              	 .loc 1 121 0
 639 008e B7EE007A 	 fconsts s14,#112
 640 0092 D7ED057A 	 flds s15,[r7,#20]
 641 0096 77EE677A 	 fsubs s15,s14,s15
 642 009a B6EE007A 	 fconsts s14,#96
 643 009e 67EE877A 	 fmuls s15,s15,s14
 644 00a2 C7ED0D7A 	 fsts s15,[r7,#52]
 122:../cleanflight/src/main/common/filter.c ****         b1 = 1 - cs;
 645              	 .loc 1 122 0
 646 00a6 B7EE007A 	 fconsts s14,#112
 647 00aa D7ED057A 	 flds s15,[r7,#20]
 648 00ae 77EE677A 	 fsubs s15,s14,s15
 649 00b2 C7ED0C7A 	 fsts s15,[r7,#48]
 123:../cleanflight/src/main/common/filter.c ****         b2 = (1 - cs) * 0.5f;
 650              	 .loc 1 123 0
 651 00b6 B7EE007A 	 fconsts s14,#112
 652 00ba D7ED057A 	 flds s15,[r7,#20]
 653 00be 77EE677A 	 fsubs s15,s14,s15
 654 00c2 B6EE007A 	 fconsts s14,#96
 655 00c6 67EE877A 	 fmuls s15,s15,s14
 656 00ca C7ED0B7A 	 fsts s15,[r7,#44]
 124:../cleanflight/src/main/common/filter.c ****         a0 = 1 + alpha;
 657              	 .loc 1 124 0
 658 00ce D7ED047A 	 flds s15,[r7,#16]
 659 00d2 B7EE007A 	 fconsts s14,#112
 660 00d6 77EE877A 	 fadds s15,s15,s14
 661 00da C7ED0A7A 	 fsts s15,[r7,#40]
 125:../cleanflight/src/main/common/filter.c ****         a1 = -2 * cs;
 662              	 .loc 1 125 0
 663 00de D7ED057A 	 flds s15,[r7,#20]
 664 00e2 B8EE007A 	 fconsts s14,#128
 665 00e6 67EE877A 	 fmuls s15,s15,s14
 666 00ea C7ED097A 	 fsts s15,[r7,#36]
 126:../cleanflight/src/main/common/filter.c ****         a2 = 1 - alpha;
 667              	 .loc 1 126 0
 668 00ee B7EE007A 	 fconsts s14,#112
 669 00f2 D7ED047A 	 flds s15,[r7,#16]
 670 00f6 77EE677A 	 fsubs s15,s14,s15
 671 00fa C7ED087A 	 fsts s15,[r7,#32]
 127:../cleanflight/src/main/common/filter.c ****         break;
 672              	 .loc 1 127 0
 673 00fe 4AE0     	 b .L35
 674              	.L36:
 128:../cleanflight/src/main/common/filter.c ****     case FILTER_NOTCH:
 129:../cleanflight/src/main/common/filter.c ****         b0 =  1;
 675              	 .loc 1 129 0
 676 0100 4FF07E53 	 mov r3,#1065353216
 677 0104 7B63     	 str r3,[r7,#52]
 130:../cleanflight/src/main/common/filter.c ****         b1 = -2 * cs;
 678              	 .loc 1 130 0
 679 0106 D7ED057A 	 flds s15,[r7,#20]
 680 010a B8EE007A 	 fconsts s14,#128
 681 010e 67EE877A 	 fmuls s15,s15,s14
 682 0112 C7ED0C7A 	 fsts s15,[r7,#48]
 131:../cleanflight/src/main/common/filter.c ****         b2 =  1;
 683              	 .loc 1 131 0
 684 0116 4FF07E53 	 mov r3,#1065353216
 685 011a FB62     	 str r3,[r7,#44]
 132:../cleanflight/src/main/common/filter.c ****         a0 =  1 + alpha;
 686              	 .loc 1 132 0
 687 011c D7ED047A 	 flds s15,[r7,#16]
 688 0120 B7EE007A 	 fconsts s14,#112
 689 0124 77EE877A 	 fadds s15,s15,s14
 690 0128 C7ED0A7A 	 fsts s15,[r7,#40]
 133:../cleanflight/src/main/common/filter.c ****         a1 = -2 * cs;
 691              	 .loc 1 133 0
 692 012c D7ED057A 	 flds s15,[r7,#20]
 693 0130 B8EE007A 	 fconsts s14,#128
 694 0134 67EE877A 	 fmuls s15,s15,s14
 695 0138 C7ED097A 	 fsts s15,[r7,#36]
 134:../cleanflight/src/main/common/filter.c ****         a2 =  1 - alpha;
 696              	 .loc 1 134 0
 697 013c B7EE007A 	 fconsts s14,#112
 698 0140 D7ED047A 	 flds s15,[r7,#16]
 699 0144 77EE677A 	 fsubs s15,s14,s15
 700 0148 C7ED087A 	 fsts s15,[r7,#32]
 135:../cleanflight/src/main/common/filter.c ****         break;
 701              	 .loc 1 135 0
 702 014c 23E0     	 b .L35
 703              	.L37:
 136:../cleanflight/src/main/common/filter.c ****     case FILTER_BPF:
 137:../cleanflight/src/main/common/filter.c ****         b0 = alpha;
 704              	 .loc 1 137 0
 705 014e 3B69     	 ldr r3,[r7,#16]
 706 0150 7B63     	 str r3,[r7,#52]
 138:../cleanflight/src/main/common/filter.c ****         b1 = 0;
 707              	 .loc 1 138 0
 708 0152 4FF00003 	 mov r3,#0
 709 0156 3B63     	 str r3,[r7,#48]
 139:../cleanflight/src/main/common/filter.c ****         b2 = -alpha;
 710              	 .loc 1 139 0
 711 0158 D7ED047A 	 flds s15,[r7,#16]
 712 015c F1EE677A 	 fnegs s15,s15
 713 0160 C7ED0B7A 	 fsts s15,[r7,#44]
 140:../cleanflight/src/main/common/filter.c ****         a0 = 1 + alpha;
 714              	 .loc 1 140 0
 715 0164 D7ED047A 	 flds s15,[r7,#16]
 716 0168 B7EE007A 	 fconsts s14,#112
 717 016c 77EE877A 	 fadds s15,s15,s14
 718 0170 C7ED0A7A 	 fsts s15,[r7,#40]
 141:../cleanflight/src/main/common/filter.c ****         a1 = -2 * cs;
 719              	 .loc 1 141 0
 720 0174 D7ED057A 	 flds s15,[r7,#20]
 721 0178 B8EE007A 	 fconsts s14,#128
 722 017c 67EE877A 	 fmuls s15,s15,s14
 723 0180 C7ED097A 	 fsts s15,[r7,#36]
 142:../cleanflight/src/main/common/filter.c ****         a2 = 1 - alpha;
 724              	 .loc 1 142 0
 725 0184 B7EE007A 	 fconsts s14,#112
 726 0188 D7ED047A 	 flds s15,[r7,#16]
 727 018c 77EE677A 	 fsubs s15,s14,s15
 728 0190 C7ED087A 	 fsts s15,[r7,#32]
 143:../cleanflight/src/main/common/filter.c ****         break;
 729              	 .loc 1 143 0
 730 0194 00BF     	 nop
 731              	.L35:
 144:../cleanflight/src/main/common/filter.c ****     }
 145:../cleanflight/src/main/common/filter.c **** 
 146:../cleanflight/src/main/common/filter.c ****     // precompute the coefficients
 147:../cleanflight/src/main/common/filter.c ****     filter->b0 = b0 / a0;
 732              	 .loc 1 147 0
 733 0196 97ED0D7A 	 flds s14,[r7,#52]
 734 019a D7ED0A7A 	 flds s15,[r7,#40]
 735 019e C7EE277A 	 fdivs s15,s14,s15
 736 01a2 FB68     	 ldr r3,[r7,#12]
 737 01a4 17EE902A 	 fmrs r2,s15
 738 01a8 1A60     	 str r2,[r3]
 148:../cleanflight/src/main/common/filter.c ****     filter->b1 = b1 / a0;
 739              	 .loc 1 148 0
 740 01aa 97ED0C7A 	 flds s14,[r7,#48]
 741 01ae D7ED0A7A 	 flds s15,[r7,#40]
 742 01b2 C7EE277A 	 fdivs s15,s14,s15
 743 01b6 FB68     	 ldr r3,[r7,#12]
 744 01b8 17EE902A 	 fmrs r2,s15
 745 01bc 5A60     	 str r2,[r3,#4]
 149:../cleanflight/src/main/common/filter.c ****     filter->b2 = b2 / a0;
 746              	 .loc 1 149 0
 747 01be 97ED0B7A 	 flds s14,[r7,#44]
 748 01c2 D7ED0A7A 	 flds s15,[r7,#40]
 749 01c6 C7EE277A 	 fdivs s15,s14,s15
 750 01ca FB68     	 ldr r3,[r7,#12]
 751 01cc 17EE902A 	 fmrs r2,s15
 752 01d0 9A60     	 str r2,[r3,#8]
 150:../cleanflight/src/main/common/filter.c ****     filter->a1 = a1 / a0;
 753              	 .loc 1 150 0
 754 01d2 97ED097A 	 flds s14,[r7,#36]
 755 01d6 D7ED0A7A 	 flds s15,[r7,#40]
 756 01da C7EE277A 	 fdivs s15,s14,s15
 757 01de FB68     	 ldr r3,[r7,#12]
 758 01e0 17EE902A 	 fmrs r2,s15
 759 01e4 DA60     	 str r2,[r3,#12]
 151:../cleanflight/src/main/common/filter.c ****     filter->a2 = a2 / a0;
 760              	 .loc 1 151 0
 761 01e6 97ED087A 	 flds s14,[r7,#32]
 762 01ea D7ED0A7A 	 flds s15,[r7,#40]
 763 01ee C7EE277A 	 fdivs s15,s14,s15
 764 01f2 FB68     	 ldr r3,[r7,#12]
 765 01f4 17EE902A 	 fmrs r2,s15
 766 01f8 1A61     	 str r2,[r3,#16]
 152:../cleanflight/src/main/common/filter.c **** 
 153:../cleanflight/src/main/common/filter.c ****     // zero initial samples
 154:../cleanflight/src/main/common/filter.c ****     filter->x1 = filter->x2 = 0;
 767              	 .loc 1 154 0
 768 01fa FB68     	 ldr r3,[r7,#12]
 769 01fc 4FF00002 	 mov r2,#0
 770 0200 9A61     	 str r2,[r3,#24]
 771 0202 FB68     	 ldr r3,[r7,#12]
 772 0204 9A69     	 ldr r2,[r3,#24]
 773 0206 1346     	 mov r3,r2
 774 0208 1A46     	 mov r2,r3
 775 020a FB68     	 ldr r3,[r7,#12]
 776 020c 5A61     	 str r2,[r3,#20]
 155:../cleanflight/src/main/common/filter.c ****     filter->y1 = filter->y2 = 0;
 777              	 .loc 1 155 0
 778 020e FB68     	 ldr r3,[r7,#12]
 779 0210 4FF00002 	 mov r2,#0
 780 0214 1A62     	 str r2,[r3,#32]
 781 0216 FB68     	 ldr r3,[r7,#12]
 782 0218 1A6A     	 ldr r2,[r3,#32]
 783 021a 1346     	 mov r3,r2
 784 021c 1A46     	 mov r2,r3
 785 021e FB68     	 ldr r3,[r7,#12]
 786 0220 DA61     	 str r2,[r3,#28]
 156:../cleanflight/src/main/common/filter.c **** }
 787              	 .loc 1 156 0
 788 0222 3837     	 adds r7,r7,#56
 789              	.LCFI56:
 790              	 .cfi_def_cfa_offset 8
 791 0224 BD46     	 mov sp,r7
 792              	.LCFI57:
 793              	 .cfi_def_cfa_register 13
 794              	 
 795 0226 80BD     	 pop {r7,pc}
 796              	.L40:
 797              	 .align 2
 798              	.L39:
 799 0228 DB0FC940 	 .word 1086918619
 800 022c BD378635 	 .word 897988541
 801              	 .cfi_endproc
 802              	.LFE532:
 804              	 .section .text.biquadFilterUpdate,"ax",%progbits
 805              	 .align 2
 806              	 .global biquadFilterUpdate
 807              	 .thumb
 808              	 .thumb_func
 810              	biquadFilterUpdate:
 811              	.LFB533:
 157:../cleanflight/src/main/common/filter.c **** 
 158:../cleanflight/src/main/common/filter.c **** FAST_CODE void biquadFilterUpdate(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate, f
 159:../cleanflight/src/main/common/filter.c **** {
 812              	 .loc 1 159 0
 813              	 .cfi_startproc
 814              	 
 815              	 
 816 0000 80B5     	 push {r7,lr}
 817              	.LCFI58:
 818              	 .cfi_def_cfa_offset 8
 819              	 .cfi_offset 7,-8
 820              	 .cfi_offset 14,-4
 821 0002 8AB0     	 sub sp,sp,#40
 822              	.LCFI59:
 823              	 .cfi_def_cfa_offset 48
 824 0004 02AF     	 add r7,sp,#8
 825              	.LCFI60:
 826              	 .cfi_def_cfa 7,40
 827 0006 F860     	 str r0,[r7,#12]
 828 0008 B960     	 str r1,[r7,#8]
 829 000a 7A60     	 str r2,[r7,#4]
 830 000c 3B60     	 str r3,[r7]
 160:../cleanflight/src/main/common/filter.c ****     // backup state
 161:../cleanflight/src/main/common/filter.c ****     float x1 = filter->x1;
 831              	 .loc 1 161 0
 832 000e FB68     	 ldr r3,[r7,#12]
 833 0010 5B69     	 ldr r3,[r3,#20]
 834 0012 FB61     	 str r3,[r7,#28]
 162:../cleanflight/src/main/common/filter.c ****     float x2 = filter->x2;
 835              	 .loc 1 162 0
 836 0014 FB68     	 ldr r3,[r7,#12]
 837 0016 9B69     	 ldr r3,[r3,#24]
 838 0018 BB61     	 str r3,[r7,#24]
 163:../cleanflight/src/main/common/filter.c ****     float y1 = filter->y1;
 839              	 .loc 1 163 0
 840 001a FB68     	 ldr r3,[r7,#12]
 841 001c DB69     	 ldr r3,[r3,#28]
 842 001e 7B61     	 str r3,[r7,#20]
 164:../cleanflight/src/main/common/filter.c ****     float y2 = filter->y2;
 843              	 .loc 1 164 0
 844 0020 FB68     	 ldr r3,[r7,#12]
 845 0022 1B6A     	 ldr r3,[r3,#32]
 846 0024 3B61     	 str r3,[r7,#16]
 165:../cleanflight/src/main/common/filter.c **** 
 166:../cleanflight/src/main/common/filter.c ****     biquadFilterInit(filter, filterFreq, refreshRate, Q, filterType);
 847              	 .loc 1 166 0
 848 0026 97F82830 	 ldrb r3,[r7,#40]
 849 002a 0093     	 str r3,[sp]
 850 002c F868     	 ldr r0,[r7,#12]
 851 002e B968     	 ldr r1,[r7,#8]
 852 0030 7A68     	 ldr r2,[r7,#4]
 853 0032 3B68     	 ldr r3,[r7]
 854 0034 FFF7FEFF 	 bl biquadFilterInit
 167:../cleanflight/src/main/common/filter.c **** 
 168:../cleanflight/src/main/common/filter.c ****     // restore state
 169:../cleanflight/src/main/common/filter.c ****     filter->x1 = x1;
 855              	 .loc 1 169 0
 856 0038 FB68     	 ldr r3,[r7,#12]
 857 003a FA69     	 ldr r2,[r7,#28]
 858 003c 5A61     	 str r2,[r3,#20]
 170:../cleanflight/src/main/common/filter.c ****     filter->x2 = x2;
 859              	 .loc 1 170 0
 860 003e FB68     	 ldr r3,[r7,#12]
 861 0040 BA69     	 ldr r2,[r7,#24]
 862 0042 9A61     	 str r2,[r3,#24]
 171:../cleanflight/src/main/common/filter.c ****     filter->y1 = y1;
 863              	 .loc 1 171 0
 864 0044 FB68     	 ldr r3,[r7,#12]
 865 0046 7A69     	 ldr r2,[r7,#20]
 866 0048 DA61     	 str r2,[r3,#28]
 172:../cleanflight/src/main/common/filter.c ****     filter->y2 = y2;
 867              	 .loc 1 172 0
 868 004a FB68     	 ldr r3,[r7,#12]
 869 004c 3A69     	 ldr r2,[r7,#16]
 870 004e 1A62     	 str r2,[r3,#32]
 173:../cleanflight/src/main/common/filter.c **** }
 871              	 .loc 1 173 0
 872 0050 2037     	 adds r7,r7,#32
 873              	.LCFI61:
 874              	 .cfi_def_cfa_offset 8
 875 0052 BD46     	 mov sp,r7
 876              	.LCFI62:
 877              	 .cfi_def_cfa_register 13
 878              	 
 879 0054 80BD     	 pop {r7,pc}
 880              	 .cfi_endproc
 881              	.LFE533:
 883 0056 00BF     	 .section .text.biquadFilterUpdateLPF,"ax",%progbits
 884              	 .align 2
 885              	 .global biquadFilterUpdateLPF
 886              	 .thumb
 887              	 .thumb_func
 889              	biquadFilterUpdateLPF:
 890              	.LFB534:
 174:../cleanflight/src/main/common/filter.c **** 
 175:../cleanflight/src/main/common/filter.c **** FAST_CODE void biquadFilterUpdateLPF(biquadFilter_t *filter, float filterFreq, uint32_t refreshRate
 176:../cleanflight/src/main/common/filter.c **** {
 891              	 .loc 1 176 0
 892              	 .cfi_startproc
 893              	 
 894              	 
 895 0000 80B5     	 push {r7,lr}
 896              	.LCFI63:
 897              	 .cfi_def_cfa_offset 8
 898              	 .cfi_offset 7,-8
 899              	 .cfi_offset 14,-4
 900 0002 86B0     	 sub sp,sp,#24
 901              	.LCFI64:
 902              	 .cfi_def_cfa_offset 32
 903 0004 02AF     	 add r7,sp,#8
 904              	.LCFI65:
 905              	 .cfi_def_cfa 7,24
 906 0006 F860     	 str r0,[r7,#12]
 907 0008 B960     	 str r1,[r7,#8]
 908 000a 7A60     	 str r2,[r7,#4]
 177:../cleanflight/src/main/common/filter.c ****     biquadFilterUpdate(filter, filterFreq, refreshRate, BIQUAD_Q, FILTER_LPF);
 909              	 .loc 1 177 0
 910 000c 0023     	 movs r3,#0
 911 000e 0093     	 str r3,[sp]
 912 0010 F868     	 ldr r0,[r7,#12]
 913 0012 B968     	 ldr r1,[r7,#8]
 914 0014 7A68     	 ldr r2,[r7,#4]
 915 0016 034B     	 ldr r3,.L43
 916 0018 FFF7FEFF 	 bl biquadFilterUpdate
 178:../cleanflight/src/main/common/filter.c **** }
 917              	 .loc 1 178 0
 918 001c 1037     	 adds r7,r7,#16
 919              	.LCFI66:
 920              	 .cfi_def_cfa_offset 8
 921 001e BD46     	 mov sp,r7
 922              	.LCFI67:
 923              	 .cfi_def_cfa_register 13
 924              	 
 925 0020 80BD     	 pop {r7,pc}
 926              	.L44:
 927 0022 00BF     	 .align 2
 928              	.L43:
 929 0024 F304353F 	 .word 1060439283
 930              	 .cfi_endproc
 931              	.LFE534:
 933              	 .section .text.biquadFilterApplyDF1,"ax",%progbits
 934              	 .align 2
 935              	 .global biquadFilterApplyDF1
 936              	 .thumb
 937              	 .thumb_func
 939              	biquadFilterApplyDF1:
 940              	.LFB535:
 179:../cleanflight/src/main/common/filter.c **** 
 180:../cleanflight/src/main/common/filter.c **** /* Computes a biquadFilter_t filter on a sample (slightly less precise than df2 but works in dynami
 181:../cleanflight/src/main/common/filter.c **** FAST_CODE float biquadFilterApplyDF1(biquadFilter_t *filter, float input)
 182:../cleanflight/src/main/common/filter.c **** {
 941              	 .loc 1 182 0
 942              	 .cfi_startproc
 943              	 
 944              	 
 945              	 
 946 0000 80B4     	 push {r7}
 947              	.LCFI68:
 948              	 .cfi_def_cfa_offset 4
 949              	 .cfi_offset 7,-4
 950 0002 85B0     	 sub sp,sp,#20
 951              	.LCFI69:
 952              	 .cfi_def_cfa_offset 24
 953 0004 00AF     	 add r7,sp,#0
 954              	.LCFI70:
 955              	 .cfi_def_cfa_register 7
 956 0006 7860     	 str r0,[r7,#4]
 957 0008 3960     	 str r1,[r7]
 183:../cleanflight/src/main/common/filter.c ****     /* compute result */
 184:../cleanflight/src/main/common/filter.c ****     const float result = filter->b0 * input + filter->b1 * filter->x1 + filter->b2 * filter->x2 - f
 958              	 .loc 1 184 0
 959 000a 7B68     	 ldr r3,[r7,#4]
 960 000c 1B68     	 ldr r3,[r3]
 961 000e D7ED007A 	 flds s15,[r7]
 962 0012 07EE103A 	 fmsr s14,r3
 963 0016 27EE277A 	 fmuls s14,s14,s15
 964 001a 7B68     	 ldr r3,[r7,#4]
 965 001c 5A68     	 ldr r2,[r3,#4]
 966 001e 1346     	 mov r3,r2
 967 0020 1A46     	 mov r2,r3
 968 0022 7B68     	 ldr r3,[r7,#4]
 969 0024 5B69     	 ldr r3,[r3,#20]
 970 0026 07EE902A 	 fmsr s15,r2
 971 002a 06EE903A 	 fmsr s13,r3
 972 002e 67EEA67A 	 fmuls s15,s15,s13
 973 0032 37EE277A 	 fadds s14,s14,s15
 974 0036 7B68     	 ldr r3,[r7,#4]
 975 0038 9A68     	 ldr r2,[r3,#8]
 976 003a 1346     	 mov r3,r2
 977 003c 1A46     	 mov r2,r3
 978 003e 7B68     	 ldr r3,[r7,#4]
 979 0040 9B69     	 ldr r3,[r3,#24]
 980 0042 07EE902A 	 fmsr s15,r2
 981 0046 06EE903A 	 fmsr s13,r3
 982 004a 67EEA67A 	 fmuls s15,s15,s13
 983 004e 37EE277A 	 fadds s14,s14,s15
 984 0052 7B68     	 ldr r3,[r7,#4]
 985 0054 DA68     	 ldr r2,[r3,#12]
 986 0056 1346     	 mov r3,r2
 987 0058 1A46     	 mov r2,r3
 988 005a 7B68     	 ldr r3,[r7,#4]
 989 005c DB69     	 ldr r3,[r3,#28]
 990 005e 07EE902A 	 fmsr s15,r2
 991 0062 06EE903A 	 fmsr s13,r3
 992 0066 67EEA67A 	 fmuls s15,s15,s13
 993 006a 37EE677A 	 fsubs s14,s14,s15
 994 006e 7B68     	 ldr r3,[r7,#4]
 995 0070 1A69     	 ldr r2,[r3,#16]
 996 0072 1346     	 mov r3,r2
 997 0074 1A46     	 mov r2,r3
 998 0076 7B68     	 ldr r3,[r7,#4]
 999 0078 1B6A     	 ldr r3,[r3,#32]
 1000 007a 07EE902A 	 fmsr s15,r2
 1001 007e 06EE903A 	 fmsr s13,r3
 1002 0082 67EEA67A 	 fmuls s15,s15,s13
 1003 0086 77EE677A 	 fsubs s15,s14,s15
 1004 008a C7ED037A 	 fsts s15,[r7,#12]
 185:../cleanflight/src/main/common/filter.c **** 
 186:../cleanflight/src/main/common/filter.c ****     /* shift x1 to x2, input to x1 */
 187:../cleanflight/src/main/common/filter.c ****     filter->x2 = filter->x1;
 1005              	 .loc 1 187 0
 1006 008e 7B68     	 ldr r3,[r7,#4]
 1007 0090 5A69     	 ldr r2,[r3,#20]
 1008 0092 1346     	 mov r3,r2
 1009 0094 1A46     	 mov r2,r3
 1010 0096 7B68     	 ldr r3,[r7,#4]
 1011 0098 9A61     	 str r2,[r3,#24]
 188:../cleanflight/src/main/common/filter.c ****     filter->x1 = input;
 1012              	 .loc 1 188 0
 1013 009a 7B68     	 ldr r3,[r7,#4]
 1014 009c 3A68     	 ldr r2,[r7]
 1015 009e 5A61     	 str r2,[r3,#20]
 189:../cleanflight/src/main/common/filter.c **** 
 190:../cleanflight/src/main/common/filter.c ****     /* shift y1 to y2, result to y1 */
 191:../cleanflight/src/main/common/filter.c ****     filter->y2 = filter->y1;
 1016              	 .loc 1 191 0
 1017 00a0 7B68     	 ldr r3,[r7,#4]
 1018 00a2 DA69     	 ldr r2,[r3,#28]
 1019 00a4 1346     	 mov r3,r2
 1020 00a6 1A46     	 mov r2,r3
 1021 00a8 7B68     	 ldr r3,[r7,#4]
 1022 00aa 1A62     	 str r2,[r3,#32]
 192:../cleanflight/src/main/common/filter.c ****     filter->y1 = result;
 1023              	 .loc 1 192 0
 1024 00ac 7B68     	 ldr r3,[r7,#4]
 1025 00ae FA68     	 ldr r2,[r7,#12]
 1026 00b0 DA61     	 str r2,[r3,#28]
 193:../cleanflight/src/main/common/filter.c **** 
 194:../cleanflight/src/main/common/filter.c ****     return result;
 1027              	 .loc 1 194 0
 1028 00b2 FB68     	 ldr r3,[r7,#12]
 195:../cleanflight/src/main/common/filter.c **** }
 1029              	 .loc 1 195 0
 1030 00b4 1846     	 mov r0,r3
 1031 00b6 1437     	 adds r7,r7,#20
 1032              	.LCFI71:
 1033              	 .cfi_def_cfa_offset 4
 1034 00b8 BD46     	 mov sp,r7
 1035              	.LCFI72:
 1036              	 .cfi_def_cfa_register 13
 1037              	 
 1038 00ba 5DF8047B 	 ldr r7,[sp],#4
 1039              	.LCFI73:
 1040              	 .cfi_restore 7
 1041              	 .cfi_def_cfa_offset 0
 1042 00be 7047     	 bx lr
 1043              	 .cfi_endproc
 1044              	.LFE535:
 1046              	 .section .text.biquadFilterApply,"ax",%progbits
 1047              	 .align 2
 1048              	 .global biquadFilterApply
 1049              	 .thumb
 1050              	 .thumb_func
 1052              	biquadFilterApply:
 1053              	.LFB536:
 196:../cleanflight/src/main/common/filter.c **** 
 197:../cleanflight/src/main/common/filter.c **** /* Computes a biquadFilter_t filter in direct form 2 on a sample (higher precision but can't handle
 198:../cleanflight/src/main/common/filter.c **** FAST_CODE float biquadFilterApply(biquadFilter_t *filter, float input)
 199:../cleanflight/src/main/common/filter.c **** {
 1054              	 .loc 1 199 0
 1055              	 .cfi_startproc
 1056              	 
 1057              	 
 1058              	 
 1059 0000 80B4     	 push {r7}
 1060              	.LCFI74:
 1061              	 .cfi_def_cfa_offset 4
 1062              	 .cfi_offset 7,-4
 1063 0002 85B0     	 sub sp,sp,#20
 1064              	.LCFI75:
 1065              	 .cfi_def_cfa_offset 24
 1066 0004 00AF     	 add r7,sp,#0
 1067              	.LCFI76:
 1068              	 .cfi_def_cfa_register 7
 1069 0006 7860     	 str r0,[r7,#4]
 1070 0008 3960     	 str r1,[r7]
 200:../cleanflight/src/main/common/filter.c ****     const float result = filter->b0 * input + filter->x1;
 1071              	 .loc 1 200 0
 1072 000a 7B68     	 ldr r3,[r7,#4]
 1073 000c 1B68     	 ldr r3,[r3]
 1074 000e D7ED007A 	 flds s15,[r7]
 1075 0012 07EE103A 	 fmsr s14,r3
 1076 0016 67EE277A 	 fmuls s15,s14,s15
 1077 001a 7B68     	 ldr r3,[r7,#4]
 1078 001c 5B69     	 ldr r3,[r3,#20]
 1079 001e 07EE103A 	 fmsr s14,r3
 1080 0022 77EE877A 	 fadds s15,s15,s14
 1081 0026 C7ED037A 	 fsts s15,[r7,#12]
 201:../cleanflight/src/main/common/filter.c ****     filter->x1 = filter->b1 * input - filter->a1 * result + filter->x2;
 1082              	 .loc 1 201 0
 1083 002a 7B68     	 ldr r3,[r7,#4]
 1084 002c 5B68     	 ldr r3,[r3,#4]
 1085 002e D7ED007A 	 flds s15,[r7]
 1086 0032 07EE103A 	 fmsr s14,r3
 1087 0036 27EE277A 	 fmuls s14,s14,s15
 1088 003a 7B68     	 ldr r3,[r7,#4]
 1089 003c DB68     	 ldr r3,[r3,#12]
 1090 003e D7ED037A 	 flds s15,[r7,#12]
 1091 0042 06EE903A 	 fmsr s13,r3
 1092 0046 66EEA77A 	 fmuls s15,s13,s15
 1093 004a 77EE677A 	 fsubs s15,s14,s15
 1094 004e 7B68     	 ldr r3,[r7,#4]
 1095 0050 9B69     	 ldr r3,[r3,#24]
 1096 0052 07EE103A 	 fmsr s14,r3
 1097 0056 77EE877A 	 fadds s15,s15,s14
 1098 005a 7B68     	 ldr r3,[r7,#4]
 1099 005c 17EE902A 	 fmrs r2,s15
 1100 0060 5A61     	 str r2,[r3,#20]
 202:../cleanflight/src/main/common/filter.c ****     filter->x2 = filter->b2 * input - filter->a2 * result;
 1101              	 .loc 1 202 0
 1102 0062 7B68     	 ldr r3,[r7,#4]
 1103 0064 9B68     	 ldr r3,[r3,#8]
 1104 0066 D7ED007A 	 flds s15,[r7]
 1105 006a 07EE103A 	 fmsr s14,r3
 1106 006e 27EE277A 	 fmuls s14,s14,s15
 1107 0072 7B68     	 ldr r3,[r7,#4]
 1108 0074 1B69     	 ldr r3,[r3,#16]
 1109 0076 D7ED037A 	 flds s15,[r7,#12]
 1110 007a 06EE903A 	 fmsr s13,r3
 1111 007e 66EEA77A 	 fmuls s15,s13,s15
 1112 0082 77EE677A 	 fsubs s15,s14,s15
 1113 0086 7B68     	 ldr r3,[r7,#4]
 1114 0088 17EE902A 	 fmrs r2,s15
 1115 008c 9A61     	 str r2,[r3,#24]
 203:../cleanflight/src/main/common/filter.c ****     return result;
 1116              	 .loc 1 203 0
 1117 008e FB68     	 ldr r3,[r7,#12]
 204:../cleanflight/src/main/common/filter.c **** }
 1118              	 .loc 1 204 0
 1119 0090 1846     	 mov r0,r3
 1120 0092 1437     	 adds r7,r7,#20
 1121              	.LCFI77:
 1122              	 .cfi_def_cfa_offset 4
 1123 0094 BD46     	 mov sp,r7
 1124              	.LCFI78:
 1125              	 .cfi_def_cfa_register 13
 1126              	 
 1127 0096 5DF8047B 	 ldr r7,[sp],#4
 1128              	.LCFI79:
 1129              	 .cfi_restore 7
 1130              	 .cfi_def_cfa_offset 0
 1131 009a 7047     	 bx lr
 1132              	 .cfi_endproc
 1133              	.LFE536:
 1135              	 .section .text.laggedMovingAverageInit,"ax",%progbits
 1136              	 .align 2
 1137              	 .global laggedMovingAverageInit
 1138              	 .thumb
 1139              	 .thumb_func
 1141              	laggedMovingAverageInit:
 1142              	.LFB537:
 205:../cleanflight/src/main/common/filter.c **** 
 206:../cleanflight/src/main/common/filter.c **** void laggedMovingAverageInit(laggedMovingAverage_t *filter, uint16_t windowSize, float *buf)
 207:../cleanflight/src/main/common/filter.c **** {
 1143              	 .loc 1 207 0
 1144              	 .cfi_startproc
 1145              	 
 1146              	 
 1147              	 
 1148 0000 80B4     	 push {r7}
 1149              	.LCFI80:
 1150              	 .cfi_def_cfa_offset 4
 1151              	 .cfi_offset 7,-4
 1152 0002 85B0     	 sub sp,sp,#20
 1153              	.LCFI81:
 1154              	 .cfi_def_cfa_offset 24
 1155 0004 00AF     	 add r7,sp,#0
 1156              	.LCFI82:
 1157              	 .cfi_def_cfa_register 7
 1158 0006 F860     	 str r0,[r7,#12]
 1159 0008 0B46     	 mov r3,r1
 1160 000a 7A60     	 str r2,[r7,#4]
 1161 000c 7B81     	 strh r3,[r7,#10]
 208:../cleanflight/src/main/common/filter.c ****     filter->movingWindowIndex = 0;
 1162              	 .loc 1 208 0
 1163 000e FB68     	 ldr r3,[r7,#12]
 1164 0010 0022     	 movs r2,#0
 1165 0012 1A70     	 strb r2,[r3]
 1166 0014 0022     	 movs r2,#0
 1167 0016 5A70     	 strb r2,[r3,#1]
 209:../cleanflight/src/main/common/filter.c ****     filter->windowSize = windowSize;
 1168              	 .loc 1 209 0
 1169 0018 FB68     	 ldr r3,[r7,#12]
 1170 001a 7A89     	 ldrh r2,[r7,#10]
 1171 001c 5A80     	 strh r2,[r3,#2]
 210:../cleanflight/src/main/common/filter.c ****     filter->buf = buf;
 1172              	 .loc 1 210 0
 1173 001e FB68     	 ldr r3,[r7,#12]
 1174 0020 7A68     	 ldr r2,[r7,#4]
 1175 0022 9A60     	 str r2,[r3,#8]
 211:../cleanflight/src/main/common/filter.c ****     filter->primed = false;
 1176              	 .loc 1 211 0
 1177 0024 FB68     	 ldr r3,[r7,#12]
 1178 0026 0022     	 movs r2,#0
 1179 0028 1A73     	 strb r2,[r3,#12]
 212:../cleanflight/src/main/common/filter.c **** }
 1180              	 .loc 1 212 0
 1181 002a 1437     	 adds r7,r7,#20
 1182              	.LCFI83:
 1183              	 .cfi_def_cfa_offset 4
 1184 002c BD46     	 mov sp,r7
 1185              	.LCFI84:
 1186              	 .cfi_def_cfa_register 13
 1187              	 
 1188 002e 5DF8047B 	 ldr r7,[sp],#4
 1189              	.LCFI85:
 1190              	 .cfi_restore 7
 1191              	 .cfi_def_cfa_offset 0
 1192 0032 7047     	 bx lr
 1193              	 .cfi_endproc
 1194              	.LFE537:
 1196              	 .section .text.laggedMovingAverageUpdate,"ax",%progbits
 1197              	 .align 2
 1198              	 .global laggedMovingAverageUpdate
 1199              	 .thumb
 1200              	 .thumb_func
 1202              	laggedMovingAverageUpdate:
 1203              	.LFB538:
 213:../cleanflight/src/main/common/filter.c **** 
 214:../cleanflight/src/main/common/filter.c **** FAST_CODE float laggedMovingAverageUpdate(laggedMovingAverage_t *filter, float input)
 215:../cleanflight/src/main/common/filter.c **** {
 1204              	 .loc 1 215 0
 1205              	 .cfi_startproc
 1206              	 
 1207              	 
 1208              	 
 1209 0000 80B4     	 push {r7}
 1210              	.LCFI86:
 1211              	 .cfi_def_cfa_offset 4
 1212              	 .cfi_offset 7,-4
 1213 0002 85B0     	 sub sp,sp,#20
 1214              	.LCFI87:
 1215              	 .cfi_def_cfa_offset 24
 1216 0004 00AF     	 add r7,sp,#0
 1217              	.LCFI88:
 1218              	 .cfi_def_cfa_register 7
 1219 0006 7860     	 str r0,[r7,#4]
 1220 0008 3960     	 str r1,[r7]
 216:../cleanflight/src/main/common/filter.c ****     filter->movingSum -= filter->buf[filter->movingWindowIndex];
 1221              	 .loc 1 216 0
 1222 000a 7B68     	 ldr r3,[r7,#4]
 1223 000c 5968     	 ldr r1,[r3,#4]
 1224 000e 0B46     	 mov r3,r1
 1225 0010 1946     	 mov r1,r3
 1226 0012 7B68     	 ldr r3,[r7,#4]
 1227 0014 9A68     	 ldr r2,[r3,#8]
 1228 0016 7B68     	 ldr r3,[r7,#4]
 1229 0018 1B88     	 ldrh r3,[r3]
 1230 001a 9BB2     	 uxth r3,r3
 1231 001c 9B00     	 lsls r3,r3,#2
 1232 001e 1344     	 add r3,r3,r2
 1233 0020 D3ED007A 	 flds s15,[r3]
 1234 0024 07EE101A 	 fmsr s14,r1
 1235 0028 77EE677A 	 fsubs s15,s14,s15
 1236 002c 7B68     	 ldr r3,[r7,#4]
 1237 002e 17EE902A 	 fmrs r2,s15
 1238 0032 5A60     	 str r2,[r3,#4]
 217:../cleanflight/src/main/common/filter.c ****     filter->buf[filter->movingWindowIndex] = input;
 1239              	 .loc 1 217 0
 1240 0034 7B68     	 ldr r3,[r7,#4]
 1241 0036 9A68     	 ldr r2,[r3,#8]
 1242 0038 7B68     	 ldr r3,[r7,#4]
 1243 003a 1B88     	 ldrh r3,[r3]
 1244 003c 9BB2     	 uxth r3,r3
 1245 003e 9B00     	 lsls r3,r3,#2
 1246 0040 1344     	 add r3,r3,r2
 1247 0042 3A68     	 ldr r2,[r7]
 1248 0044 1A60     	 str r2,[r3]
 218:../cleanflight/src/main/common/filter.c ****     filter->movingSum += input;
 1249              	 .loc 1 218 0
 1250 0046 7B68     	 ldr r3,[r7,#4]
 1251 0048 5B68     	 ldr r3,[r3,#4]
 1252 004a D7ED007A 	 flds s15,[r7]
 1253 004e 07EE103A 	 fmsr s14,r3
 1254 0052 77EE277A 	 fadds s15,s14,s15
 1255 0056 7B68     	 ldr r3,[r7,#4]
 1256 0058 17EE902A 	 fmrs r2,s15
 1257 005c 5A60     	 str r2,[r3,#4]
 219:../cleanflight/src/main/common/filter.c **** 
 220:../cleanflight/src/main/common/filter.c ****     if (++filter->movingWindowIndex == filter->windowSize) {
 1258              	 .loc 1 220 0
 1259 005e 7B68     	 ldr r3,[r7,#4]
 1260 0060 1B88     	 ldrh r3,[r3]
 1261 0062 9BB2     	 uxth r3,r3
 1262 0064 0133     	 adds r3,r3,#1
 1263 0066 9AB2     	 uxth r2,r3
 1264 0068 7B68     	 ldr r3,[r7,#4]
 1265 006a 1A80     	 strh r2,[r3]
 1266 006c 7B68     	 ldr r3,[r7,#4]
 1267 006e 1B88     	 ldrh r3,[r3]
 1268 0070 9AB2     	 uxth r2,r3
 1269 0072 7B68     	 ldr r3,[r7,#4]
 1270 0074 5B88     	 ldrh r3,[r3,#2]
 1271 0076 9BB2     	 uxth r3,r3
 1272 0078 9A42     	 cmp r2,r3
 1273 007a 07D1     	 bne .L51
 221:../cleanflight/src/main/common/filter.c ****         filter->movingWindowIndex = 0;
 1274              	 .loc 1 221 0
 1275 007c 7B68     	 ldr r3,[r7,#4]
 1276 007e 0022     	 movs r2,#0
 1277 0080 1A70     	 strb r2,[r3]
 1278 0082 0022     	 movs r2,#0
 1279 0084 5A70     	 strb r2,[r3,#1]
 222:../cleanflight/src/main/common/filter.c ****         filter->primed = true;
 1280              	 .loc 1 222 0
 1281 0086 7B68     	 ldr r3,[r7,#4]
 1282 0088 0122     	 movs r2,#1
 1283 008a 1A73     	 strb r2,[r3,#12]
 1284              	.L51:
 223:../cleanflight/src/main/common/filter.c ****     }
 224:../cleanflight/src/main/common/filter.c **** 
 225:../cleanflight/src/main/common/filter.c ****     const uint16_t denom = filter->primed ? filter->windowSize : filter->movingWindowIndex;
 1285              	 .loc 1 225 0
 1286 008c 7B68     	 ldr r3,[r7,#4]
 1287 008e 1B7B     	 ldrb r3,[r3,#12]
 1288 0090 002B     	 cmp r3,#0
 1289 0092 03D0     	 beq .L52
 1290              	 .loc 1 225 0 is_stmt 0 discriminator 1
 1291 0094 7B68     	 ldr r3,[r7,#4]
 1292 0096 5B88     	 ldrh r3,[r3,#2]
 1293 0098 9BB2     	 uxth r3,r3
 1294 009a 02E0     	 b .L53
 1295              	.L52:
 1296              	 .loc 1 225 0 discriminator 2
 1297 009c 7B68     	 ldr r3,[r7,#4]
 1298 009e 1B88     	 ldrh r3,[r3]
 1299 00a0 9BB2     	 uxth r3,r3
 1300              	.L53:
 1301              	 .loc 1 225 0 discriminator 4
 1302 00a2 FB81     	 strh r3,[r7,#14]
 226:../cleanflight/src/main/common/filter.c ****     return filter->movingSum  / denom;
 1303              	 .loc 1 226 0 is_stmt 1 discriminator 4
 1304 00a4 7B68     	 ldr r3,[r7,#4]
 1305 00a6 5B68     	 ldr r3,[r3,#4]
 1306 00a8 FA89     	 ldrh r2,[r7,#14]
 1307 00aa 07EE902A 	 fmsr s15,r2
 1308 00ae F8EEE77A 	 fsitos s15,s15
 1309 00b2 07EE103A 	 fmsr s14,r3
 1310 00b6 C7EE277A 	 fdivs s15,s14,s15
 1311 00ba 17EE903A 	 fmrs r3,s15
 227:../cleanflight/src/main/common/filter.c **** }
 1312              	 .loc 1 227 0 discriminator 4
 1313 00be 1846     	 mov r0,r3
 1314 00c0 1437     	 adds r7,r7,#20
 1315              	.LCFI89:
 1316              	 .cfi_def_cfa_offset 4
 1317 00c2 BD46     	 mov sp,r7
 1318              	.LCFI90:
 1319              	 .cfi_def_cfa_register 13
 1320              	 
 1321 00c4 5DF8047B 	 ldr r7,[sp],#4
 1322              	.LCFI91:
 1323              	 .cfi_restore 7
 1324              	 .cfi_def_cfa_offset 0
 1325 00c8 7047     	 bx lr
 1326              	 .cfi_endproc
 1327              	.LFE538:
 1329 00ca 00BF     	 .text
 1330              	.Letext0:
 1331              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1332              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1333              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/filter.h"
 1334              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 1335              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 filter.c
    {standard input}:20     .text.nullFilterApply:00000000 $t
    {standard input}:25     .text.nullFilterApply:00000000 nullFilterApply
    {standard input}:65     .text.pt1FilterGain:00000000 $t
    {standard input}:70     .text.pt1FilterGain:00000000 pt1FilterGain
    {standard input}:123    .text.pt1FilterGain:00000050 $d
    {standard input}:128    .text.pt1FilterInit:00000000 $t
    {standard input}:133    .text.pt1FilterInit:00000000 pt1FilterInit
    {standard input}:177    .text.pt1FilterUpdateCutoff:00000000 $t
    {standard input}:182    .text.pt1FilterUpdateCutoff:00000000 pt1FilterUpdateCutoff
    {standard input}:222    .text.pt1FilterApply:00000000 $t
    {standard input}:227    .text.pt1FilterApply:00000000 pt1FilterApply
    {standard input}:288    .text.slewFilterInit:00000000 $t
    {standard input}:293    .text.slewFilterInit:00000000 slewFilterInit
    {standard input}:342    .text.slewFilterApply:00000000 $t
    {standard input}:347    .text.slewFilterApply:00000000 slewFilterApply
    {standard input}:461    .text.filterGetNotchQ:00000000 $t
    {standard input}:466    .text.filterGetNotchQ:00000000 filterGetNotchQ
    {standard input}:516    .text.biquadFilterInitLPF:00000000 $t
    {standard input}:521    .text.biquadFilterInitLPF:00000000 biquadFilterInitLPF
    {standard input}:571    .text.biquadFilterInit:00000000 biquadFilterInit
    {standard input}:561    .text.biquadFilterInitLPF:00000024 $d
    {standard input}:566    .text.biquadFilterInit:00000000 $t
    {standard input}:799    .text.biquadFilterInit:00000228 $d
    {standard input}:805    .text.biquadFilterUpdate:00000000 $t
    {standard input}:810    .text.biquadFilterUpdate:00000000 biquadFilterUpdate
    {standard input}:884    .text.biquadFilterUpdateLPF:00000000 $t
    {standard input}:889    .text.biquadFilterUpdateLPF:00000000 biquadFilterUpdateLPF
    {standard input}:929    .text.biquadFilterUpdateLPF:00000024 $d
    {standard input}:934    .text.biquadFilterApplyDF1:00000000 $t
    {standard input}:939    .text.biquadFilterApplyDF1:00000000 biquadFilterApplyDF1
    {standard input}:1047   .text.biquadFilterApply:00000000 $t
    {standard input}:1052   .text.biquadFilterApply:00000000 biquadFilterApply
    {standard input}:1136   .text.laggedMovingAverageInit:00000000 $t
    {standard input}:1141   .text.laggedMovingAverageInit:00000000 laggedMovingAverageInit
    {standard input}:1197   .text.laggedMovingAverageUpdate:00000000 $t
    {standard input}:1202   .text.laggedMovingAverageUpdate:00000000 laggedMovingAverageUpdate
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sin_approx
cos_approx
