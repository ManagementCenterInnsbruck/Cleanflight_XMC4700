   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "gps_conversion.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.GPS_coord_to_degrees,"ax",%progbits
  20              	 .align 2
  21              	 .global GPS_coord_to_degrees
  22              	 .thumb
  23              	 .thumb_func
  25              	GPS_coord_to_degrees:
  26              	.LFB521:
  27              	 .file 1 "../cleanflight/src/main/common/gps_conversion.c"
   1:../cleanflight/src/main/common/gps_conversion.c **** /*
   2:../cleanflight/src/main/common/gps_conversion.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/common/gps_conversion.c ****  *
   4:../cleanflight/src/main/common/gps_conversion.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/common/gps_conversion.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/common/gps_conversion.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/common/gps_conversion.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/common/gps_conversion.c ****  * any later version.
   9:../cleanflight/src/main/common/gps_conversion.c ****  *
  10:../cleanflight/src/main/common/gps_conversion.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/common/gps_conversion.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/common/gps_conversion.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/common/gps_conversion.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/common/gps_conversion.c ****  *
  15:../cleanflight/src/main/common/gps_conversion.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/common/gps_conversion.c ****  * along with this software.
  17:../cleanflight/src/main/common/gps_conversion.c ****  *
  18:../cleanflight/src/main/common/gps_conversion.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/common/gps_conversion.c ****  */
  20:../cleanflight/src/main/common/gps_conversion.c **** 
  21:../cleanflight/src/main/common/gps_conversion.c **** #include <stdbool.h>
  22:../cleanflight/src/main/common/gps_conversion.c **** #include <stdint.h>
  23:../cleanflight/src/main/common/gps_conversion.c **** #include <ctype.h>
  24:../cleanflight/src/main/common/gps_conversion.c **** #include <string.h>
  25:../cleanflight/src/main/common/gps_conversion.c **** 
  26:../cleanflight/src/main/common/gps_conversion.c **** #include "platform.h"
  27:../cleanflight/src/main/common/gps_conversion.c **** 
  28:../cleanflight/src/main/common/gps_conversion.c **** #ifdef USE_GPS
  29:../cleanflight/src/main/common/gps_conversion.c **** 
  30:../cleanflight/src/main/common/gps_conversion.c **** 
  31:../cleanflight/src/main/common/gps_conversion.c **** #define DIGIT_TO_VAL(_x)    (_x - '0')
  32:../cleanflight/src/main/common/gps_conversion.c **** uint32_t GPS_coord_to_degrees(const char* coordinateString)
  33:../cleanflight/src/main/common/gps_conversion.c **** {
  28              	 .loc 1 33 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 87B0     	 sub sp,sp,#28
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 32
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 7860     	 str r0,[r7,#4]
  34:../cleanflight/src/main/common/gps_conversion.c ****     const char *fieldSeparator, *remainingString;
  35:../cleanflight/src/main/common/gps_conversion.c ****     uint8_t degress = 0, minutes = 0;
  44              	 .loc 1 35 0
  45 0008 0023     	 movs r3,#0
  46 000a FB73     	 strb r3,[r7,#15]
  47 000c 0023     	 movs r3,#0
  48 000e BB73     	 strb r3,[r7,#14]
  36:../cleanflight/src/main/common/gps_conversion.c ****     uint16_t fractionalMinutes = 0;
  49              	 .loc 1 36 0
  50 0010 0023     	 movs r3,#0
  51 0012 BB81     	 strh r3,[r7,#12]
  37:../cleanflight/src/main/common/gps_conversion.c ****     uint8_t digitIndex;
  38:../cleanflight/src/main/common/gps_conversion.c **** 
  39:../cleanflight/src/main/common/gps_conversion.c ****     // scan for decimal point or end of field
  40:../cleanflight/src/main/common/gps_conversion.c ****     for (fieldSeparator = coordinateString; isdigit((unsigned char)*fieldSeparator); fieldSeparator
  52              	 .loc 1 40 0
  53 0014 7B68     	 ldr r3,[r7,#4]
  54 0016 7B61     	 str r3,[r7,#20]
  55 0018 0AE0     	 b .L2
  56              	.L5:
  41:../cleanflight/src/main/common/gps_conversion.c ****         if (fieldSeparator >= coordinateString + 15)
  57              	 .loc 1 41 0
  58 001a 7B68     	 ldr r3,[r7,#4]
  59 001c 03F10F02 	 add r2,r3,#15
  60 0020 7B69     	 ldr r3,[r7,#20]
  61 0022 9A42     	 cmp r2,r3
  62 0024 01D8     	 bhi .L3
  42:../cleanflight/src/main/common/gps_conversion.c ****             return 0; // stop potential fail
  63              	 .loc 1 42 0
  64 0026 0023     	 movs r3,#0
  65 0028 6EE0     	 b .L4
  66              	.L3:
  40:../cleanflight/src/main/common/gps_conversion.c ****         if (fieldSeparator >= coordinateString + 15)
  67              	 .loc 1 40 0 discriminator 2
  68 002a 7B69     	 ldr r3,[r7,#20]
  69 002c 0133     	 adds r3,r3,#1
  70 002e 7B61     	 str r3,[r7,#20]
  71              	.L2:
  40:../cleanflight/src/main/common/gps_conversion.c ****         if (fieldSeparator >= coordinateString + 15)
  72              	 .loc 1 40 0 is_stmt 0 discriminator 1
  73 0030 7B69     	 ldr r3,[r7,#20]
  74 0032 1B78     	 ldrb r3,[r3]
  75 0034 303B     	 subs r3,r3,#48
  76 0036 092B     	 cmp r3,#9
  77 0038 EFD9     	 bls .L5
  43:../cleanflight/src/main/common/gps_conversion.c ****     }
  44:../cleanflight/src/main/common/gps_conversion.c ****     remainingString = coordinateString;
  78              	 .loc 1 44 0 is_stmt 1
  79 003a 7B68     	 ldr r3,[r7,#4]
  80 003c 3B61     	 str r3,[r7,#16]
  45:../cleanflight/src/main/common/gps_conversion.c **** 
  46:../cleanflight/src/main/common/gps_conversion.c ****     // convert degrees
  47:../cleanflight/src/main/common/gps_conversion.c ****     while ((fieldSeparator - remainingString) > 2) {
  81              	 .loc 1 47 0
  82 003e 11E0     	 b .L6
  83              	.L8:
  48:../cleanflight/src/main/common/gps_conversion.c ****         if (degress)
  84              	 .loc 1 48 0
  85 0040 FB7B     	 ldrb r3,[r7,#15]
  86 0042 002B     	 cmp r3,#0
  87 0044 05D0     	 beq .L7
  49:../cleanflight/src/main/common/gps_conversion.c ****             degress *= 10;
  88              	 .loc 1 49 0
  89 0046 FB7B     	 ldrb r3,[r7,#15]
  90 0048 1A46     	 mov r2,r3
  91 004a 9200     	 lsls r2,r2,#2
  92 004c 1344     	 add r3,r3,r2
  93 004e 5B00     	 lsls r3,r3,#1
  94 0050 FB73     	 strb r3,[r7,#15]
  95              	.L7:
  50:../cleanflight/src/main/common/gps_conversion.c ****         degress += DIGIT_TO_VAL(*remainingString++);
  96              	 .loc 1 50 0
  97 0052 3B69     	 ldr r3,[r7,#16]
  98 0054 5A1C     	 adds r2,r3,#1
  99 0056 3A61     	 str r2,[r7,#16]
 100 0058 1B78     	 ldrb r3,[r3]
 101 005a 303B     	 subs r3,r3,#48
 102 005c DAB2     	 uxtb r2,r3
 103 005e FB7B     	 ldrb r3,[r7,#15]
 104 0060 1344     	 add r3,r3,r2
 105 0062 FB73     	 strb r3,[r7,#15]
 106              	.L6:
  47:../cleanflight/src/main/common/gps_conversion.c ****         if (degress)
 107              	 .loc 1 47 0
 108 0064 7A69     	 ldr r2,[r7,#20]
 109 0066 3B69     	 ldr r3,[r7,#16]
 110 0068 D31A     	 subs r3,r2,r3
 111 006a 022B     	 cmp r3,#2
 112 006c E8DC     	 bgt .L8
  51:../cleanflight/src/main/common/gps_conversion.c ****     }
  52:../cleanflight/src/main/common/gps_conversion.c ****     // convert minutes
  53:../cleanflight/src/main/common/gps_conversion.c ****     while (fieldSeparator > remainingString) {
 113              	 .loc 1 53 0
 114 006e 11E0     	 b .L9
 115              	.L11:
  54:../cleanflight/src/main/common/gps_conversion.c ****         if (minutes)
 116              	 .loc 1 54 0
 117 0070 BB7B     	 ldrb r3,[r7,#14]
 118 0072 002B     	 cmp r3,#0
 119 0074 05D0     	 beq .L10
  55:../cleanflight/src/main/common/gps_conversion.c ****             minutes *= 10;
 120              	 .loc 1 55 0
 121 0076 BB7B     	 ldrb r3,[r7,#14]
 122 0078 1A46     	 mov r2,r3
 123 007a 9200     	 lsls r2,r2,#2
 124 007c 1344     	 add r3,r3,r2
 125 007e 5B00     	 lsls r3,r3,#1
 126 0080 BB73     	 strb r3,[r7,#14]
 127              	.L10:
  56:../cleanflight/src/main/common/gps_conversion.c ****         minutes += DIGIT_TO_VAL(*remainingString++);
 128              	 .loc 1 56 0
 129 0082 3B69     	 ldr r3,[r7,#16]
 130 0084 5A1C     	 adds r2,r3,#1
 131 0086 3A61     	 str r2,[r7,#16]
 132 0088 1B78     	 ldrb r3,[r3]
 133 008a 303B     	 subs r3,r3,#48
 134 008c DAB2     	 uxtb r2,r3
 135 008e BB7B     	 ldrb r3,[r7,#14]
 136 0090 1344     	 add r3,r3,r2
 137 0092 BB73     	 strb r3,[r7,#14]
 138              	.L9:
  53:../cleanflight/src/main/common/gps_conversion.c ****         if (minutes)
 139              	 .loc 1 53 0
 140 0094 7A69     	 ldr r2,[r7,#20]
 141 0096 3B69     	 ldr r3,[r7,#16]
 142 0098 9A42     	 cmp r2,r3
 143 009a E9D8     	 bhi .L11
  57:../cleanflight/src/main/common/gps_conversion.c ****     }
  58:../cleanflight/src/main/common/gps_conversion.c ****     // convert fractional minutes
  59:../cleanflight/src/main/common/gps_conversion.c ****     // expect up to four digits, result is in
  60:../cleanflight/src/main/common/gps_conversion.c ****     // ten-thousandths of a minute
  61:../cleanflight/src/main/common/gps_conversion.c ****     if (*fieldSeparator == '.') {
 144              	 .loc 1 61 0
 145 009c 7B69     	 ldr r3,[r7,#20]
 146 009e 1B78     	 ldrb r3,[r3]
 147 00a0 2E2B     	 cmp r3,#46
 148 00a2 1FD1     	 bne .L12
  62:../cleanflight/src/main/common/gps_conversion.c ****         remainingString = fieldSeparator + 1;
 149              	 .loc 1 62 0
 150 00a4 7B69     	 ldr r3,[r7,#20]
 151 00a6 0133     	 adds r3,r3,#1
 152 00a8 3B61     	 str r3,[r7,#16]
  63:../cleanflight/src/main/common/gps_conversion.c ****         for (digitIndex = 0; digitIndex < 4; digitIndex++) {
 153              	 .loc 1 63 0
 154 00aa 0023     	 movs r3,#0
 155 00ac FB72     	 strb r3,[r7,#11]
 156 00ae 16E0     	 b .L13
 157              	.L15:
  64:../cleanflight/src/main/common/gps_conversion.c ****             fractionalMinutes *= 10;
 158              	 .loc 1 64 0
 159 00b0 BB89     	 ldrh r3,[r7,#12]
 160 00b2 1A46     	 mov r2,r3
 161 00b4 9200     	 lsls r2,r2,#2
 162 00b6 1344     	 add r3,r3,r2
 163 00b8 5B00     	 lsls r3,r3,#1
 164 00ba BB81     	 strh r3,[r7,#12]
  65:../cleanflight/src/main/common/gps_conversion.c ****             if (isdigit((unsigned char)*remainingString))
 165              	 .loc 1 65 0
 166 00bc 3B69     	 ldr r3,[r7,#16]
 167 00be 1B78     	 ldrb r3,[r3]
 168 00c0 303B     	 subs r3,r3,#48
 169 00c2 092B     	 cmp r3,#9
 170 00c4 08D8     	 bhi .L14
  66:../cleanflight/src/main/common/gps_conversion.c ****                 fractionalMinutes += *remainingString++ - '0';
 171              	 .loc 1 66 0
 172 00c6 3B69     	 ldr r3,[r7,#16]
 173 00c8 5A1C     	 adds r2,r3,#1
 174 00ca 3A61     	 str r2,[r7,#16]
 175 00cc 1B78     	 ldrb r3,[r3]
 176 00ce 303B     	 subs r3,r3,#48
 177 00d0 9AB2     	 uxth r2,r3
 178 00d2 BB89     	 ldrh r3,[r7,#12]
 179 00d4 1344     	 add r3,r3,r2
 180 00d6 BB81     	 strh r3,[r7,#12]
 181              	.L14:
  63:../cleanflight/src/main/common/gps_conversion.c ****             fractionalMinutes *= 10;
 182              	 .loc 1 63 0 discriminator 2
 183 00d8 FB7A     	 ldrb r3,[r7,#11]
 184 00da 0133     	 adds r3,r3,#1
 185 00dc FB72     	 strb r3,[r7,#11]
 186              	.L13:
  63:../cleanflight/src/main/common/gps_conversion.c ****             fractionalMinutes *= 10;
 187              	 .loc 1 63 0 is_stmt 0 discriminator 1
 188 00de FB7A     	 ldrb r3,[r7,#11]
 189 00e0 032B     	 cmp r3,#3
 190 00e2 E5D9     	 bls .L15
 191              	.L12:
  67:../cleanflight/src/main/common/gps_conversion.c ****         }
  68:../cleanflight/src/main/common/gps_conversion.c ****     }
  69:../cleanflight/src/main/common/gps_conversion.c ****     return degress * 10000000UL + (minutes * 1000000UL + fractionalMinutes * 100UL) / 6;
 192              	 .loc 1 69 0 is_stmt 1
 193 00e4 FB7B     	 ldrb r3,[r7,#15]
 194 00e6 0B4A     	 ldr r2,.L16
 195 00e8 02FB03F2 	 mul r2,r2,r3
 196 00ec BB7B     	 ldrb r3,[r7,#14]
 197 00ee 0A49     	 ldr r1,.L16+4
 198 00f0 01FB03F1 	 mul r1,r1,r3
 199 00f4 BB89     	 ldrh r3,[r7,#12]
 200 00f6 6420     	 movs r0,#100
 201 00f8 00FB03F3 	 mul r3,r0,r3
 202 00fc 0B44     	 add r3,r3,r1
 203 00fe 0749     	 ldr r1,.L16+8
 204 0100 A1FB0313 	 umull r1,r3,r1,r3
 205 0104 9B08     	 lsrs r3,r3,#2
 206 0106 1344     	 add r3,r3,r2
 207              	.L4:
  70:../cleanflight/src/main/common/gps_conversion.c **** }
 208              	 .loc 1 70 0
 209 0108 1846     	 mov r0,r3
 210 010a 1C37     	 adds r7,r7,#28
 211              	.LCFI3:
 212              	 .cfi_def_cfa_offset 4
 213 010c BD46     	 mov sp,r7
 214              	.LCFI4:
 215              	 .cfi_def_cfa_register 13
 216              	 
 217 010e 5DF8047B 	 ldr r7,[sp],#4
 218              	.LCFI5:
 219              	 .cfi_restore 7
 220              	 .cfi_def_cfa_offset 0
 221 0112 7047     	 bx lr
 222              	.L17:
 223              	 .align 2
 224              	.L16:
 225 0114 80969800 	 .word 10000000
 226 0118 40420F00 	 .word 1000000
 227 011c ABAAAAAA 	 .word -1431655765
 228              	 .cfi_endproc
 229              	.LFE521:
 231              	 .text
 232              	.Letext0:
 233              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 234              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 235              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 236              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 gps_conversion.c
    {standard input}:20     .text.GPS_coord_to_degrees:00000000 $t
    {standard input}:25     .text.GPS_coord_to_degrees:00000000 GPS_coord_to_degrees
    {standard input}:225    .text.GPS_coord_to_degrees:00000114 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
