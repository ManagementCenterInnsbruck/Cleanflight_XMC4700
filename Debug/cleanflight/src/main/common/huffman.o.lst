   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "huffman.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.huffmanEncodeBuf,"ax",%progbits
  20              	 .align 2
  21              	 .global huffmanEncodeBuf
  22              	 .thumb
  23              	 .thumb_func
  25              	huffmanEncodeBuf:
  26              	.LFB521:
  27              	 .file 1 "../cleanflight/src/main/common/huffman.c"
   1:../cleanflight/src/main/common/huffman.c **** /*
   2:../cleanflight/src/main/common/huffman.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/common/huffman.c ****  *
   4:../cleanflight/src/main/common/huffman.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/common/huffman.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/common/huffman.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/common/huffman.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/common/huffman.c ****  * any later version.
   9:../cleanflight/src/main/common/huffman.c ****  *
  10:../cleanflight/src/main/common/huffman.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/common/huffman.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/common/huffman.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/common/huffman.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/common/huffman.c ****  *
  15:../cleanflight/src/main/common/huffman.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/common/huffman.c ****  * along with this software.
  17:../cleanflight/src/main/common/huffman.c ****  *
  18:../cleanflight/src/main/common/huffman.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/common/huffman.c ****  */
  20:../cleanflight/src/main/common/huffman.c **** 
  21:../cleanflight/src/main/common/huffman.c **** #include <stdbool.h>
  22:../cleanflight/src/main/common/huffman.c **** #include <stdint.h>
  23:../cleanflight/src/main/common/huffman.c **** 
  24:../cleanflight/src/main/common/huffman.c **** #include "platform.h"
  25:../cleanflight/src/main/common/huffman.c **** 
  26:../cleanflight/src/main/common/huffman.c **** #ifdef USE_HUFFMAN
  27:../cleanflight/src/main/common/huffman.c **** 
  28:../cleanflight/src/main/common/huffman.c **** #include "huffman.h"
  29:../cleanflight/src/main/common/huffman.c **** 
  30:../cleanflight/src/main/common/huffman.c **** 
  31:../cleanflight/src/main/common/huffman.c **** int huffmanEncodeBuf(uint8_t *outBuf, int outBufLen, const uint8_t *inBuf, int inLen, const huffman
  32:../cleanflight/src/main/common/huffman.c **** {
  28              	 .loc 1 32 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 8DB0     	 sub sp,sp,#52
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 56
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
  33:../cleanflight/src/main/common/huffman.c ****     int ret = 0;
  47              	 .loc 1 33 0
  48 000e 0023     	 movs r3,#0
  49 0010 FB62     	 str r3,[r7,#44]
  34:../cleanflight/src/main/common/huffman.c **** 
  35:../cleanflight/src/main/common/huffman.c ****     uint8_t *outByte = outBuf;
  50              	 .loc 1 35 0
  51 0012 FB68     	 ldr r3,[r7,#12]
  52 0014 BB62     	 str r3,[r7,#40]
  36:../cleanflight/src/main/common/huffman.c ****     *outByte = 0;
  53              	 .loc 1 36 0
  54 0016 BB6A     	 ldr r3,[r7,#40]
  55 0018 0022     	 movs r2,#0
  56 001a 1A70     	 strb r2,[r3]
  37:../cleanflight/src/main/common/huffman.c ****     uint8_t outBit = 0x80;
  57              	 .loc 1 37 0
  58 001c 8023     	 movs r3,#128
  59 001e 87F82730 	 strb r3,[r7,#39]
  60              	.LBB2:
  38:../cleanflight/src/main/common/huffman.c **** 
  39:../cleanflight/src/main/common/huffman.c ****     for (int ii = 0; ii < inLen; ++ii) {
  61              	 .loc 1 39 0
  62 0022 0023     	 movs r3,#0
  63 0024 3B62     	 str r3,[r7,#32]
  64 0026 60E0     	 b .L2
  65              	.L9:
  66              	.LBB3:
  40:../cleanflight/src/main/common/huffman.c ****         const int huffCodeLen = huffmanTable[*inBuf].codeLen;
  67              	 .loc 1 40 0
  68 0028 7B68     	 ldr r3,[r7,#4]
  69 002a 1B78     	 ldrb r3,[r3]
  70 002c 1A46     	 mov r2,r3
  71 002e 1346     	 mov r3,r2
  72 0030 5B00     	 lsls r3,r3,#1
  73 0032 1344     	 add r3,r3,r2
  74 0034 BA6B     	 ldr r2,[r7,#56]
  75 0036 1344     	 add r3,r3,r2
  76 0038 1B78     	 ldrb r3,[r3]
  77 003a 7B61     	 str r3,[r7,#20]
  41:../cleanflight/src/main/common/huffman.c ****         const uint16_t huffCode = huffmanTable[*inBuf].code;
  78              	 .loc 1 41 0
  79 003c 7B68     	 ldr r3,[r7,#4]
  80 003e 1B78     	 ldrb r3,[r3]
  81 0040 1A46     	 mov r2,r3
  82 0042 1346     	 mov r3,r2
  83 0044 5B00     	 lsls r3,r3,#1
  84 0046 1344     	 add r3,r3,r2
  85 0048 BA6B     	 ldr r2,[r7,#56]
  86 004a 1344     	 add r3,r3,r2
  87 004c 5A78     	 ldrb r2,[r3,#1]
  88 004e 9B78     	 ldrb r3,[r3,#2]
  89 0050 1B02     	 lsls r3,r3,#8
  90 0052 1343     	 orrs r3,r3,r2
  91 0054 7B82     	 strh r3,[r7,#18]
  42:../cleanflight/src/main/common/huffman.c ****         ++inBuf;
  92              	 .loc 1 42 0
  93 0056 7B68     	 ldr r3,[r7,#4]
  94 0058 0133     	 adds r3,r3,#1
  95 005a 7B60     	 str r3,[r7,#4]
  43:../cleanflight/src/main/common/huffman.c ****         uint16_t testBit = 0x8000;
  96              	 .loc 1 43 0
  97 005c 4FF40043 	 mov r3,#32768
  98 0060 FB83     	 strh r3,[r7,#30]
  99              	.LBB4:
  44:../cleanflight/src/main/common/huffman.c **** 
  45:../cleanflight/src/main/common/huffman.c ****         for (int jj = 0; jj < huffCodeLen; ++jj) {
 100              	 .loc 1 45 0
 101 0062 0023     	 movs r3,#0
 102 0064 BB61     	 str r3,[r7,#24]
 103 0066 39E0     	 b .L3
 104              	.L8:
  46:../cleanflight/src/main/common/huffman.c ****             if (huffCode & testBit) {
 105              	 .loc 1 46 0
 106 0068 7A8A     	 ldrh r2,[r7,#18]
 107 006a FB8B     	 ldrh r3,[r7,#30]
 108 006c 1340     	 ands r3,r3,r2
 109 006e 9BB2     	 uxth r3,r3
 110 0070 002B     	 cmp r3,#0
 111 0072 07D0     	 beq .L4
  47:../cleanflight/src/main/common/huffman.c ****                 *outByte |= outBit;
 112              	 .loc 1 47 0
 113 0074 BB6A     	 ldr r3,[r7,#40]
 114 0076 1A78     	 ldrb r2,[r3]
 115 0078 97F82730 	 ldrb r3,[r7,#39]
 116 007c 1343     	 orrs r3,r3,r2
 117 007e DAB2     	 uxtb r2,r3
 118 0080 BB6A     	 ldr r3,[r7,#40]
 119 0082 1A70     	 strb r2,[r3]
 120              	.L4:
  48:../cleanflight/src/main/common/huffman.c ****             }
  49:../cleanflight/src/main/common/huffman.c **** 
  50:../cleanflight/src/main/common/huffman.c ****             testBit >>= 1;
 121              	 .loc 1 50 0
 122 0084 FB8B     	 ldrh r3,[r7,#30]
 123 0086 5B08     	 lsrs r3,r3,#1
 124 0088 FB83     	 strh r3,[r7,#30]
  51:../cleanflight/src/main/common/huffman.c ****             outBit >>= 1;
 125              	 .loc 1 51 0
 126 008a 97F82730 	 ldrb r3,[r7,#39]
 127 008e 5B08     	 lsrs r3,r3,#1
 128 0090 87F82730 	 strb r3,[r7,#39]
  52:../cleanflight/src/main/common/huffman.c ****             if (outBit == 0) {
 129              	 .loc 1 52 0
 130 0094 97F82730 	 ldrb r3,[r7,#39]
 131 0098 002B     	 cmp r3,#0
 132 009a 0BD1     	 bne .L5
  53:../cleanflight/src/main/common/huffman.c ****                 outBit = 0x80;
 133              	 .loc 1 53 0
 134 009c 8023     	 movs r3,#128
 135 009e 87F82730 	 strb r3,[r7,#39]
  54:../cleanflight/src/main/common/huffman.c ****                 ++outByte;
 136              	 .loc 1 54 0
 137 00a2 BB6A     	 ldr r3,[r7,#40]
 138 00a4 0133     	 adds r3,r3,#1
 139 00a6 BB62     	 str r3,[r7,#40]
  55:../cleanflight/src/main/common/huffman.c ****                 *outByte = 0;
 140              	 .loc 1 55 0
 141 00a8 BB6A     	 ldr r3,[r7,#40]
 142 00aa 0022     	 movs r2,#0
 143 00ac 1A70     	 strb r2,[r3]
  56:../cleanflight/src/main/common/huffman.c ****                 ++ret;
 144              	 .loc 1 56 0
 145 00ae FB6A     	 ldr r3,[r7,#44]
 146 00b0 0133     	 adds r3,r3,#1
 147 00b2 FB62     	 str r3,[r7,#44]
 148              	.L5:
  57:../cleanflight/src/main/common/huffman.c ****             }
  58:../cleanflight/src/main/common/huffman.c **** 
  59:../cleanflight/src/main/common/huffman.c ****             if (ret >= outBufLen && ii < inLen - 1 && jj < huffCodeLen - 1) {
 149              	 .loc 1 59 0
 150 00b4 FA6A     	 ldr r2,[r7,#44]
 151 00b6 BB68     	 ldr r3,[r7,#8]
 152 00b8 9A42     	 cmp r2,r3
 153 00ba 0CDB     	 blt .L6
 154              	 .loc 1 59 0 is_stmt 0 discriminator 1
 155 00bc 3B68     	 ldr r3,[r7]
 156 00be 5A1E     	 subs r2,r3,#1
 157 00c0 3B6A     	 ldr r3,[r7,#32]
 158 00c2 9A42     	 cmp r2,r3
 159 00c4 07DD     	 ble .L6
 160              	 .loc 1 59 0 discriminator 2
 161 00c6 7B69     	 ldr r3,[r7,#20]
 162 00c8 5A1E     	 subs r2,r3,#1
 163 00ca BB69     	 ldr r3,[r7,#24]
 164 00cc 9A42     	 cmp r2,r3
 165 00ce 02DD     	 ble .L6
  60:../cleanflight/src/main/common/huffman.c ****                 return -1;
 166              	 .loc 1 60 0 is_stmt 1
 167 00d0 4FF0FF33 	 mov r3,#-1
 168 00d4 15E0     	 b .L7
 169              	.L6:
  45:../cleanflight/src/main/common/huffman.c ****             if (huffCode & testBit) {
 170              	 .loc 1 45 0 discriminator 2
 171 00d6 BB69     	 ldr r3,[r7,#24]
 172 00d8 0133     	 adds r3,r3,#1
 173 00da BB61     	 str r3,[r7,#24]
 174              	.L3:
  45:../cleanflight/src/main/common/huffman.c ****             if (huffCode & testBit) {
 175              	 .loc 1 45 0 is_stmt 0 discriminator 1
 176 00dc BA69     	 ldr r2,[r7,#24]
 177 00de 7B69     	 ldr r3,[r7,#20]
 178 00e0 9A42     	 cmp r2,r3
 179 00e2 C1DB     	 blt .L8
 180              	.LBE4:
 181              	.LBE3:
  39:../cleanflight/src/main/common/huffman.c ****         const int huffCodeLen = huffmanTable[*inBuf].codeLen;
 182              	 .loc 1 39 0 is_stmt 1 discriminator 2
 183 00e4 3B6A     	 ldr r3,[r7,#32]
 184 00e6 0133     	 adds r3,r3,#1
 185 00e8 3B62     	 str r3,[r7,#32]
 186              	.L2:
  39:../cleanflight/src/main/common/huffman.c ****         const int huffCodeLen = huffmanTable[*inBuf].codeLen;
 187              	 .loc 1 39 0 is_stmt 0 discriminator 1
 188 00ea 3A6A     	 ldr r2,[r7,#32]
 189 00ec 3B68     	 ldr r3,[r7]
 190 00ee 9A42     	 cmp r2,r3
 191 00f0 9ADB     	 blt .L9
 192              	.LBE2:
  61:../cleanflight/src/main/common/huffman.c ****             }
  62:../cleanflight/src/main/common/huffman.c ****         }
  63:../cleanflight/src/main/common/huffman.c ****     }
  64:../cleanflight/src/main/common/huffman.c ****     if (outBit != 0x80) {
 193              	 .loc 1 64 0 is_stmt 1
 194 00f2 97F82730 	 ldrb r3,[r7,#39]
 195 00f6 802B     	 cmp r3,#128
 196 00f8 02D0     	 beq .L10
  65:../cleanflight/src/main/common/huffman.c ****         // ensure last character in output buffer is counted
  66:../cleanflight/src/main/common/huffman.c ****         ++ret;
 197              	 .loc 1 66 0
 198 00fa FB6A     	 ldr r3,[r7,#44]
 199 00fc 0133     	 adds r3,r3,#1
 200 00fe FB62     	 str r3,[r7,#44]
 201              	.L10:
  67:../cleanflight/src/main/common/huffman.c ****     }
  68:../cleanflight/src/main/common/huffman.c ****     return ret;
 202              	 .loc 1 68 0
 203 0100 FB6A     	 ldr r3,[r7,#44]
 204              	.L7:
  69:../cleanflight/src/main/common/huffman.c **** }
 205              	 .loc 1 69 0
 206 0102 1846     	 mov r0,r3
 207 0104 3437     	 adds r7,r7,#52
 208              	.LCFI3:
 209              	 .cfi_def_cfa_offset 4
 210 0106 BD46     	 mov sp,r7
 211              	.LCFI4:
 212              	 .cfi_def_cfa_register 13
 213              	 
 214 0108 5DF8047B 	 ldr r7,[sp],#4
 215              	.LCFI5:
 216              	 .cfi_restore 7
 217              	 .cfi_def_cfa_offset 0
 218 010c 7047     	 bx lr
 219              	 .cfi_endproc
 220              	.LFE521:
 222 010e 00BF     	 .section .text.huffmanEncodeBufStreaming,"ax",%progbits
 223              	 .align 2
 224              	 .global huffmanEncodeBufStreaming
 225              	 .thumb
 226              	 .thumb_func
 228              	huffmanEncodeBufStreaming:
 229              	.LFB522:
  70:../cleanflight/src/main/common/huffman.c **** 
  71:../cleanflight/src/main/common/huffman.c **** int huffmanEncodeBufStreaming(huffmanState_t *state, const uint8_t *inBuf, int inLen, const huffman
  72:../cleanflight/src/main/common/huffman.c **** {
 230              	 .loc 1 72 0
 231              	 .cfi_startproc
 232              	 
 233              	 
 234              	 
 235 0000 80B4     	 push {r7}
 236              	.LCFI6:
 237              	 .cfi_def_cfa_offset 4
 238              	 .cfi_offset 7,-4
 239 0002 8DB0     	 sub sp,sp,#52
 240              	.LCFI7:
 241              	 .cfi_def_cfa_offset 56
 242 0004 00AF     	 add r7,sp,#0
 243              	.LCFI8:
 244              	 .cfi_def_cfa_register 7
 245 0006 F860     	 str r0,[r7,#12]
 246 0008 B960     	 str r1,[r7,#8]
 247 000a 7A60     	 str r2,[r7,#4]
 248 000c 3B60     	 str r3,[r7]
  73:../cleanflight/src/main/common/huffman.c ****     uint8_t *savedOutBytePtr = state->outByte;
 249              	 .loc 1 73 0
 250 000e FB68     	 ldr r3,[r7,#12]
 251 0010 D3F80230 	 ldr r3,[r3,#2]
 252 0014 3B62     	 str r3,[r7,#32]
  74:../cleanflight/src/main/common/huffman.c ****     uint8_t savedOutByte = *savedOutBytePtr;
 253              	 .loc 1 74 0
 254 0016 3B6A     	 ldr r3,[r7,#32]
 255 0018 1B78     	 ldrb r3,[r3]
 256 001a FB77     	 strb r3,[r7,#31]
 257              	.LBB5:
  75:../cleanflight/src/main/common/huffman.c **** 
  76:../cleanflight/src/main/common/huffman.c ****     for (const uint8_t *pos = inBuf, *end = inBuf + inLen; pos < end; ++pos) {
 258              	 .loc 1 76 0
 259 001c BB68     	 ldr r3,[r7,#8]
 260 001e FB62     	 str r3,[r7,#44]
 261 0020 7B68     	 ldr r3,[r7,#4]
 262 0022 BA68     	 ldr r2,[r7,#8]
 263 0024 1344     	 add r3,r3,r2
 264 0026 BB61     	 str r3,[r7,#24]
 265 0028 73E0     	 b .L12
 266              	.L20:
 267              	.LBB6:
  77:../cleanflight/src/main/common/huffman.c ****         const int huffCodeLen = huffmanTable[*pos].codeLen;
 268              	 .loc 1 77 0
 269 002a FB6A     	 ldr r3,[r7,#44]
 270 002c 1B78     	 ldrb r3,[r3]
 271 002e 1A46     	 mov r2,r3
 272 0030 1346     	 mov r3,r2
 273 0032 5B00     	 lsls r3,r3,#1
 274 0034 1344     	 add r3,r3,r2
 275 0036 3A68     	 ldr r2,[r7]
 276 0038 1344     	 add r3,r3,r2
 277 003a 1B78     	 ldrb r3,[r3]
 278 003c 7B61     	 str r3,[r7,#20]
  78:../cleanflight/src/main/common/huffman.c ****         const uint16_t huffCode = huffmanTable[*pos].code;
 279              	 .loc 1 78 0
 280 003e FB6A     	 ldr r3,[r7,#44]
 281 0040 1B78     	 ldrb r3,[r3]
 282 0042 1A46     	 mov r2,r3
 283 0044 1346     	 mov r3,r2
 284 0046 5B00     	 lsls r3,r3,#1
 285 0048 1344     	 add r3,r3,r2
 286 004a 3A68     	 ldr r2,[r7]
 287 004c 1344     	 add r3,r3,r2
 288 004e 5A78     	 ldrb r2,[r3,#1]
 289 0050 9B78     	 ldrb r3,[r3,#2]
 290 0052 1B02     	 lsls r3,r3,#8
 291 0054 1343     	 orrs r3,r3,r2
 292 0056 7B82     	 strh r3,[r7,#18]
  79:../cleanflight/src/main/common/huffman.c ****         uint16_t testBit = 0x8000;
 293              	 .loc 1 79 0
 294 0058 4FF40043 	 mov r3,#32768
 295 005c 7B85     	 strh r3,[r7,#42]
 296              	.LBB7:
  80:../cleanflight/src/main/common/huffman.c **** 
  81:../cleanflight/src/main/common/huffman.c ****         for (int jj = 0; jj < huffCodeLen; ++jj) {
 297              	 .loc 1 81 0
 298 005e 0023     	 movs r3,#0
 299 0060 7B62     	 str r3,[r7,#36]
 300 0062 4FE0     	 b .L13
 301              	.L19:
  82:../cleanflight/src/main/common/huffman.c ****             if (huffCode & testBit) {
 302              	 .loc 1 82 0
 303 0064 7A8A     	 ldrh r2,[r7,#18]
 304 0066 7B8D     	 ldrh r3,[r7,#42]
 305 0068 1340     	 ands r3,r3,r2
 306 006a 9BB2     	 uxth r3,r3
 307 006c 002B     	 cmp r3,#0
 308 006e 0BD0     	 beq .L14
  83:../cleanflight/src/main/common/huffman.c ****                 *state->outByte |= state->outBit;
 309              	 .loc 1 83 0
 310 0070 FB68     	 ldr r3,[r7,#12]
 311 0072 D3F80230 	 ldr r3,[r3,#2]
 312 0076 FA68     	 ldr r2,[r7,#12]
 313 0078 D2F80220 	 ldr r2,[r2,#2]
 314 007c 1178     	 ldrb r1,[r2]
 315 007e FA68     	 ldr r2,[r7,#12]
 316 0080 127A     	 ldrb r2,[r2,#8]
 317 0082 0A43     	 orrs r2,r2,r1
 318 0084 D2B2     	 uxtb r2,r2
 319 0086 1A70     	 strb r2,[r3]
 320              	.L14:
  84:../cleanflight/src/main/common/huffman.c ****             }
  85:../cleanflight/src/main/common/huffman.c **** 
  86:../cleanflight/src/main/common/huffman.c ****             testBit >>= 1;
 321              	 .loc 1 86 0
 322 0088 7B8D     	 ldrh r3,[r7,#42]
 323 008a 5B08     	 lsrs r3,r3,#1
 324 008c 7B85     	 strh r3,[r7,#42]
  87:../cleanflight/src/main/common/huffman.c ****             state->outBit >>= 1;
 325              	 .loc 1 87 0
 326 008e FB68     	 ldr r3,[r7,#12]
 327 0090 1B7A     	 ldrb r3,[r3,#8]
 328 0092 5B08     	 lsrs r3,r3,#1
 329 0094 DAB2     	 uxtb r2,r3
 330 0096 FB68     	 ldr r3,[r7,#12]
 331 0098 1A72     	 strb r2,[r3,#8]
  88:../cleanflight/src/main/common/huffman.c ****             if (state->outBit == 0) {
 332              	 .loc 1 88 0
 333 009a FB68     	 ldr r3,[r7,#12]
 334 009c 1B7A     	 ldrb r3,[r3,#8]
 335 009e 002B     	 cmp r3,#0
 336 00a0 15D1     	 bne .L15
  89:../cleanflight/src/main/common/huffman.c ****                 state->outBit = 0x80;
 337              	 .loc 1 89 0
 338 00a2 FB68     	 ldr r3,[r7,#12]
 339 00a4 8022     	 movs r2,#128
 340 00a6 1A72     	 strb r2,[r3,#8]
  90:../cleanflight/src/main/common/huffman.c ****                 ++state->outByte;
 341              	 .loc 1 90 0
 342 00a8 FB68     	 ldr r3,[r7,#12]
 343 00aa D3F80230 	 ldr r3,[r3,#2]
 344 00ae 5A1C     	 adds r2,r3,#1
 345 00b0 FB68     	 ldr r3,[r7,#12]
 346 00b2 C3F80220 	 str r2,[r3,#2]
  91:../cleanflight/src/main/common/huffman.c ****                 *state->outByte = 0;
 347              	 .loc 1 91 0
 348 00b6 FB68     	 ldr r3,[r7,#12]
 349 00b8 D3F80230 	 ldr r3,[r3,#2]
 350 00bc 0022     	 movs r2,#0
 351 00be 1A70     	 strb r2,[r3]
  92:../cleanflight/src/main/common/huffman.c ****                 ++state->bytesWritten;
 352              	 .loc 1 92 0
 353 00c0 FB68     	 ldr r3,[r7,#12]
 354 00c2 1B88     	 ldrh r3,[r3]
 355 00c4 9BB2     	 uxth r3,r3
 356 00c6 0133     	 adds r3,r3,#1
 357 00c8 9AB2     	 uxth r2,r3
 358 00ca FB68     	 ldr r3,[r7,#12]
 359 00cc 1A80     	 strh r2,[r3]
 360              	.L15:
  93:../cleanflight/src/main/common/huffman.c ****             }
  94:../cleanflight/src/main/common/huffman.c **** 
  95:../cleanflight/src/main/common/huffman.c ****             // if buffer is filled and we haven't finished compressing
  96:../cleanflight/src/main/common/huffman.c ****             if (state->bytesWritten >= state->outBufLen && (pos < end - 1 || jj < huffCodeLen - 1))
 361              	 .loc 1 96 0
 362 00ce FB68     	 ldr r3,[r7,#12]
 363 00d0 1B88     	 ldrh r3,[r3]
 364 00d2 9AB2     	 uxth r2,r3
 365 00d4 FB68     	 ldr r3,[r7,#12]
 366 00d6 DB88     	 ldrh r3,[r3,#6]
 367 00d8 9BB2     	 uxth r3,r3
 368 00da 9A42     	 cmp r2,r3
 369 00dc 0FD3     	 bcc .L16
 370              	 .loc 1 96 0 is_stmt 0 discriminator 1
 371 00de BB69     	 ldr r3,[r7,#24]
 372 00e0 5A1E     	 subs r2,r3,#1
 373 00e2 FB6A     	 ldr r3,[r7,#44]
 374 00e4 9A42     	 cmp r2,r3
 375 00e6 04D8     	 bhi .L17
 376              	 .loc 1 96 0 discriminator 2
 377 00e8 7B69     	 ldr r3,[r7,#20]
 378 00ea 5A1E     	 subs r2,r3,#1
 379 00ec 7B6A     	 ldr r3,[r7,#36]
 380 00ee 9A42     	 cmp r2,r3
 381 00f0 05DD     	 ble .L16
 382              	.L17:
  97:../cleanflight/src/main/common/huffman.c ****                 // restore savedOutByte
  98:../cleanflight/src/main/common/huffman.c ****                 *savedOutBytePtr = savedOutByte;
 383              	 .loc 1 98 0 is_stmt 1
 384 00f2 3B6A     	 ldr r3,[r7,#32]
 385 00f4 FA7F     	 ldrb r2,[r7,#31]
 386 00f6 1A70     	 strb r2,[r3]
  99:../cleanflight/src/main/common/huffman.c ****                 return -1;
 387              	 .loc 1 99 0
 388 00f8 4FF0FF33 	 mov r3,#-1
 389 00fc 0EE0     	 b .L18
 390              	.L16:
  81:../cleanflight/src/main/common/huffman.c ****             if (huffCode & testBit) {
 391              	 .loc 1 81 0 discriminator 2
 392 00fe 7B6A     	 ldr r3,[r7,#36]
 393 0100 0133     	 adds r3,r3,#1
 394 0102 7B62     	 str r3,[r7,#36]
 395              	.L13:
  81:../cleanflight/src/main/common/huffman.c ****             if (huffCode & testBit) {
 396              	 .loc 1 81 0 is_stmt 0 discriminator 1
 397 0104 7A6A     	 ldr r2,[r7,#36]
 398 0106 7B69     	 ldr r3,[r7,#20]
 399 0108 9A42     	 cmp r2,r3
 400 010a ABDB     	 blt .L19
 401              	.LBE7:
 402              	.LBE6:
  76:../cleanflight/src/main/common/huffman.c ****         const int huffCodeLen = huffmanTable[*pos].codeLen;
 403              	 .loc 1 76 0 is_stmt 1 discriminator 2
 404 010c FB6A     	 ldr r3,[r7,#44]
 405 010e 0133     	 adds r3,r3,#1
 406 0110 FB62     	 str r3,[r7,#44]
 407              	.L12:
  76:../cleanflight/src/main/common/huffman.c ****         const int huffCodeLen = huffmanTable[*pos].codeLen;
 408              	 .loc 1 76 0 is_stmt 0 discriminator 1
 409 0112 FA6A     	 ldr r2,[r7,#44]
 410 0114 BB69     	 ldr r3,[r7,#24]
 411 0116 9A42     	 cmp r2,r3
 412 0118 87D3     	 bcc .L20
 413              	.LBE5:
 100:../cleanflight/src/main/common/huffman.c ****             }
 101:../cleanflight/src/main/common/huffman.c ****         }
 102:../cleanflight/src/main/common/huffman.c ****     }
 103:../cleanflight/src/main/common/huffman.c **** 
 104:../cleanflight/src/main/common/huffman.c ****     return 0;
 414              	 .loc 1 104 0 is_stmt 1
 415 011a 0023     	 movs r3,#0
 416              	.L18:
 105:../cleanflight/src/main/common/huffman.c **** }
 417              	 .loc 1 105 0
 418 011c 1846     	 mov r0,r3
 419 011e 3437     	 adds r7,r7,#52
 420              	.LCFI9:
 421              	 .cfi_def_cfa_offset 4
 422 0120 BD46     	 mov sp,r7
 423              	.LCFI10:
 424              	 .cfi_def_cfa_register 13
 425              	 
 426 0122 5DF8047B 	 ldr r7,[sp],#4
 427              	.LCFI11:
 428              	 .cfi_restore 7
 429              	 .cfi_def_cfa_offset 0
 430 0126 7047     	 bx lr
 431              	 .cfi_endproc
 432              	.LFE522:
 434              	 .text
 435              	.Letext0:
 436              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 437              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 438              	 .file 4 "../cleanflight/src/main/common/huffman.h"
 439              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 440              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 huffman.c
    {standard input}:20     .text.huffmanEncodeBuf:00000000 $t
    {standard input}:25     .text.huffmanEncodeBuf:00000000 huffmanEncodeBuf
    {standard input}:223    .text.huffmanEncodeBufStreaming:00000000 $t
    {standard input}:228    .text.huffmanEncodeBufStreaming:00000000 huffmanEncodeBufStreaming
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
