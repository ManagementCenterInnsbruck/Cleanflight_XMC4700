   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "string_light.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.isalnum,"ax",%progbits
  20              	 .align 2
  21              	 .global isalnum
  22              	 .thumb
  23              	 .thumb_func
  25              	isalnum:
  26              	.LFB0:
  27              	 .file 1 "../cleanflight/src/main/common/string_light.c"
   1:../cleanflight/src/main/common/string_light.c **** /*
   2:../cleanflight/src/main/common/string_light.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/common/string_light.c ****  *
   4:../cleanflight/src/main/common/string_light.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/common/string_light.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/common/string_light.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/common/string_light.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/common/string_light.c ****  * any later version.
   9:../cleanflight/src/main/common/string_light.c ****  *
  10:../cleanflight/src/main/common/string_light.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/common/string_light.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/common/string_light.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/common/string_light.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/common/string_light.c ****  *
  15:../cleanflight/src/main/common/string_light.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/common/string_light.c ****  * along with this software.
  17:../cleanflight/src/main/common/string_light.c ****  *
  18:../cleanflight/src/main/common/string_light.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/common/string_light.c ****  */
  20:../cleanflight/src/main/common/string_light.c **** 
  21:../cleanflight/src/main/common/string_light.c **** #include <limits.h>
  22:../cleanflight/src/main/common/string_light.c **** #include <ctype.h>
  23:../cleanflight/src/main/common/string_light.c **** #include <string.h>
  24:../cleanflight/src/main/common/string_light.c **** 
  25:../cleanflight/src/main/common/string_light.c **** #include "typeconversion.h"
  26:../cleanflight/src/main/common/string_light.c **** 
  27:../cleanflight/src/main/common/string_light.c **** int isalnum(int c)
  28:../cleanflight/src/main/common/string_light.c **** {
  28              	 .loc 1 28 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 80B5     	 push {r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 7,-8
  36              	 .cfi_offset 14,-4
  37 0002 82B0     	 sub sp,sp,#8
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 16
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 7860     	 str r0,[r7,#4]
  29:../cleanflight/src/main/common/string_light.c ****     return isdigit(c) || isupper(c) || islower(c);
  44              	 .loc 1 29 0
  45 0008 7B68     	 ldr r3,[r7,#4]
  46 000a 303B     	 subs r3,r3,#48
  47 000c 092B     	 cmp r3,#9
  48 000e 0BD9     	 bls .L2
  49              	 .loc 1 29 0 is_stmt 0 discriminator 2
  50 0010 7868     	 ldr r0,[r7,#4]
  51 0012 FFF7FEFF 	 bl isupper
  52 0016 0346     	 mov r3,r0
  53 0018 002B     	 cmp r3,#0
  54 001a 05D1     	 bne .L2
  55              	 .loc 1 29 0 discriminator 4
  56 001c 7868     	 ldr r0,[r7,#4]
  57 001e FFF7FEFF 	 bl islower
  58 0022 0346     	 mov r3,r0
  59 0024 002B     	 cmp r3,#0
  60 0026 01D0     	 beq .L3
  61              	.L2:
  62              	 .loc 1 29 0 discriminator 5
  63 0028 0123     	 movs r3,#1
  64 002a 00E0     	 b .L4
  65              	.L3:
  66              	 .loc 1 29 0 discriminator 6
  67 002c 0023     	 movs r3,#0
  68              	.L4:
  30:../cleanflight/src/main/common/string_light.c **** }
  69              	 .loc 1 30 0 is_stmt 1 discriminator 8
  70 002e 1846     	 mov r0,r3
  71 0030 0837     	 adds r7,r7,#8
  72              	.LCFI3:
  73              	 .cfi_def_cfa_offset 8
  74 0032 BD46     	 mov sp,r7
  75              	.LCFI4:
  76              	 .cfi_def_cfa_register 13
  77              	 
  78 0034 80BD     	 pop {r7,pc}
  79              	 .cfi_endproc
  80              	.LFE0:
  82 0036 00BF     	 .section .text.isdigit,"ax",%progbits
  83              	 .align 2
  84              	 .global isdigit
  85              	 .thumb
  86              	 .thumb_func
  88              	isdigit:
  89              	.LFB1:
  31:../cleanflight/src/main/common/string_light.c **** 
  32:../cleanflight/src/main/common/string_light.c **** int isdigit(int c)
  33:../cleanflight/src/main/common/string_light.c **** {
  90              	 .loc 1 33 0
  91              	 .cfi_startproc
  92              	 
  93              	 
  94              	 
  95 0000 80B4     	 push {r7}
  96              	.LCFI5:
  97              	 .cfi_def_cfa_offset 4
  98              	 .cfi_offset 7,-4
  99 0002 83B0     	 sub sp,sp,#12
 100              	.LCFI6:
 101              	 .cfi_def_cfa_offset 16
 102 0004 00AF     	 add r7,sp,#0
 103              	.LCFI7:
 104              	 .cfi_def_cfa_register 7
 105 0006 7860     	 str r0,[r7,#4]
  34:../cleanflight/src/main/common/string_light.c ****     return (c >= '0' && c <= '9');
 106              	 .loc 1 34 0
 107 0008 7B68     	 ldr r3,[r7,#4]
 108 000a 2F2B     	 cmp r3,#47
 109 000c 04DD     	 ble .L7
 110              	 .loc 1 34 0 is_stmt 0 discriminator 1
 111 000e 7B68     	 ldr r3,[r7,#4]
 112 0010 392B     	 cmp r3,#57
 113 0012 01DC     	 bgt .L7
 114              	 .loc 1 34 0 discriminator 3
 115 0014 0123     	 movs r3,#1
 116 0016 00E0     	 b .L8
 117              	.L7:
 118              	 .loc 1 34 0 discriminator 4
 119 0018 0023     	 movs r3,#0
 120              	.L8:
  35:../cleanflight/src/main/common/string_light.c **** }
 121              	 .loc 1 35 0 is_stmt 1 discriminator 6
 122 001a 1846     	 mov r0,r3
 123 001c 0C37     	 adds r7,r7,#12
 124              	.LCFI8:
 125              	 .cfi_def_cfa_offset 4
 126 001e BD46     	 mov sp,r7
 127              	.LCFI9:
 128              	 .cfi_def_cfa_register 13
 129              	 
 130 0020 5DF8047B 	 ldr r7,[sp],#4
 131              	.LCFI10:
 132              	 .cfi_restore 7
 133              	 .cfi_def_cfa_offset 0
 134 0024 7047     	 bx lr
 135              	 .cfi_endproc
 136              	.LFE1:
 138 0026 00BF     	 .section .text.isupper,"ax",%progbits
 139              	 .align 2
 140              	 .global isupper
 141              	 .thumb
 142              	 .thumb_func
 144              	isupper:
 145              	.LFB2:
  36:../cleanflight/src/main/common/string_light.c **** 
  37:../cleanflight/src/main/common/string_light.c **** int isupper(int c)
  38:../cleanflight/src/main/common/string_light.c **** {
 146              	 .loc 1 38 0
 147              	 .cfi_startproc
 148              	 
 149              	 
 150              	 
 151 0000 80B4     	 push {r7}
 152              	.LCFI11:
 153              	 .cfi_def_cfa_offset 4
 154              	 .cfi_offset 7,-4
 155 0002 83B0     	 sub sp,sp,#12
 156              	.LCFI12:
 157              	 .cfi_def_cfa_offset 16
 158 0004 00AF     	 add r7,sp,#0
 159              	.LCFI13:
 160              	 .cfi_def_cfa_register 7
 161 0006 7860     	 str r0,[r7,#4]
  39:../cleanflight/src/main/common/string_light.c ****     return (c >= 'A' && c <= 'Z');
 162              	 .loc 1 39 0
 163 0008 7B68     	 ldr r3,[r7,#4]
 164 000a 402B     	 cmp r3,#64
 165 000c 04DD     	 ble .L11
 166              	 .loc 1 39 0 is_stmt 0 discriminator 1
 167 000e 7B68     	 ldr r3,[r7,#4]
 168 0010 5A2B     	 cmp r3,#90
 169 0012 01DC     	 bgt .L11
 170              	 .loc 1 39 0 discriminator 3
 171 0014 0123     	 movs r3,#1
 172 0016 00E0     	 b .L12
 173              	.L11:
 174              	 .loc 1 39 0 discriminator 4
 175 0018 0023     	 movs r3,#0
 176              	.L12:
  40:../cleanflight/src/main/common/string_light.c **** }
 177              	 .loc 1 40 0 is_stmt 1 discriminator 6
 178 001a 1846     	 mov r0,r3
 179 001c 0C37     	 adds r7,r7,#12
 180              	.LCFI14:
 181              	 .cfi_def_cfa_offset 4
 182 001e BD46     	 mov sp,r7
 183              	.LCFI15:
 184              	 .cfi_def_cfa_register 13
 185              	 
 186 0020 5DF8047B 	 ldr r7,[sp],#4
 187              	.LCFI16:
 188              	 .cfi_restore 7
 189              	 .cfi_def_cfa_offset 0
 190 0024 7047     	 bx lr
 191              	 .cfi_endproc
 192              	.LFE2:
 194 0026 00BF     	 .section .text.islower,"ax",%progbits
 195              	 .align 2
 196              	 .global islower
 197              	 .thumb
 198              	 .thumb_func
 200              	islower:
 201              	.LFB3:
  41:../cleanflight/src/main/common/string_light.c **** 
  42:../cleanflight/src/main/common/string_light.c **** int islower(int c)
  43:../cleanflight/src/main/common/string_light.c **** {
 202              	 .loc 1 43 0
 203              	 .cfi_startproc
 204              	 
 205              	 
 206              	 
 207 0000 80B4     	 push {r7}
 208              	.LCFI17:
 209              	 .cfi_def_cfa_offset 4
 210              	 .cfi_offset 7,-4
 211 0002 83B0     	 sub sp,sp,#12
 212              	.LCFI18:
 213              	 .cfi_def_cfa_offset 16
 214 0004 00AF     	 add r7,sp,#0
 215              	.LCFI19:
 216              	 .cfi_def_cfa_register 7
 217 0006 7860     	 str r0,[r7,#4]
  44:../cleanflight/src/main/common/string_light.c ****     return (c >= 'a' && c <= 'z');
 218              	 .loc 1 44 0
 219 0008 7B68     	 ldr r3,[r7,#4]
 220 000a 602B     	 cmp r3,#96
 221 000c 04DD     	 ble .L15
 222              	 .loc 1 44 0 is_stmt 0 discriminator 1
 223 000e 7B68     	 ldr r3,[r7,#4]
 224 0010 7A2B     	 cmp r3,#122
 225 0012 01DC     	 bgt .L15
 226              	 .loc 1 44 0 discriminator 3
 227 0014 0123     	 movs r3,#1
 228 0016 00E0     	 b .L16
 229              	.L15:
 230              	 .loc 1 44 0 discriminator 4
 231 0018 0023     	 movs r3,#0
 232              	.L16:
  45:../cleanflight/src/main/common/string_light.c **** }
 233              	 .loc 1 45 0 is_stmt 1 discriminator 6
 234 001a 1846     	 mov r0,r3
 235 001c 0C37     	 adds r7,r7,#12
 236              	.LCFI20:
 237              	 .cfi_def_cfa_offset 4
 238 001e BD46     	 mov sp,r7
 239              	.LCFI21:
 240              	 .cfi_def_cfa_register 13
 241              	 
 242 0020 5DF8047B 	 ldr r7,[sp],#4
 243              	.LCFI22:
 244              	 .cfi_restore 7
 245              	 .cfi_def_cfa_offset 0
 246 0024 7047     	 bx lr
 247              	 .cfi_endproc
 248              	.LFE3:
 250 0026 00BF     	 .section .text.isspace,"ax",%progbits
 251              	 .align 2
 252              	 .global isspace
 253              	 .thumb
 254              	 .thumb_func
 256              	isspace:
 257              	.LFB4:
  46:../cleanflight/src/main/common/string_light.c **** 
  47:../cleanflight/src/main/common/string_light.c **** int isspace(int c)
  48:../cleanflight/src/main/common/string_light.c **** {
 258              	 .loc 1 48 0
 259              	 .cfi_startproc
 260              	 
 261              	 
 262              	 
 263 0000 80B4     	 push {r7}
 264              	.LCFI23:
 265              	 .cfi_def_cfa_offset 4
 266              	 .cfi_offset 7,-4
 267 0002 83B0     	 sub sp,sp,#12
 268              	.LCFI24:
 269              	 .cfi_def_cfa_offset 16
 270 0004 00AF     	 add r7,sp,#0
 271              	.LCFI25:
 272              	 .cfi_def_cfa_register 7
 273 0006 7860     	 str r0,[r7,#4]
  49:../cleanflight/src/main/common/string_light.c ****     return (c == ' ' || c == '\t' || c == '\n' || c == '\r' || c == '\f' || c == '\v');
 274              	 .loc 1 49 0
 275 0008 7B68     	 ldr r3,[r7,#4]
 276 000a 202B     	 cmp r3,#32
 277 000c 0ED0     	 beq .L19
 278              	 .loc 1 49 0 is_stmt 0 discriminator 2
 279 000e 7B68     	 ldr r3,[r7,#4]
 280 0010 092B     	 cmp r3,#9
 281 0012 0BD0     	 beq .L19
 282              	 .loc 1 49 0 discriminator 4
 283 0014 7B68     	 ldr r3,[r7,#4]
 284 0016 0A2B     	 cmp r3,#10
 285 0018 08D0     	 beq .L19
 286              	 .loc 1 49 0 discriminator 6
 287 001a 7B68     	 ldr r3,[r7,#4]
 288 001c 0D2B     	 cmp r3,#13
 289 001e 05D0     	 beq .L19
 290              	 .loc 1 49 0 discriminator 8
 291 0020 7B68     	 ldr r3,[r7,#4]
 292 0022 0C2B     	 cmp r3,#12
 293 0024 02D0     	 beq .L19
 294              	 .loc 1 49 0 discriminator 10
 295 0026 7B68     	 ldr r3,[r7,#4]
 296 0028 0B2B     	 cmp r3,#11
 297 002a 01D1     	 bne .L20
 298              	.L19:
 299              	 .loc 1 49 0 discriminator 11
 300 002c 0123     	 movs r3,#1
 301 002e 00E0     	 b .L21
 302              	.L20:
 303              	 .loc 1 49 0 discriminator 12
 304 0030 0023     	 movs r3,#0
 305              	.L21:
  50:../cleanflight/src/main/common/string_light.c **** }
 306              	 .loc 1 50 0 is_stmt 1 discriminator 14
 307 0032 1846     	 mov r0,r3
 308 0034 0C37     	 adds r7,r7,#12
 309              	.LCFI26:
 310              	 .cfi_def_cfa_offset 4
 311 0036 BD46     	 mov sp,r7
 312              	.LCFI27:
 313              	 .cfi_def_cfa_register 13
 314              	 
 315 0038 5DF8047B 	 ldr r7,[sp],#4
 316              	.LCFI28:
 317              	 .cfi_restore 7
 318              	 .cfi_def_cfa_offset 0
 319 003c 7047     	 bx lr
 320              	 .cfi_endproc
 321              	.LFE4:
 323 003e 00BF     	 .section .text.tolower,"ax",%progbits
 324              	 .align 2
 325              	 .global tolower
 326              	 .thumb
 327              	 .thumb_func
 329              	tolower:
 330              	.LFB5:
  51:../cleanflight/src/main/common/string_light.c **** 
  52:../cleanflight/src/main/common/string_light.c **** int tolower(int c)
  53:../cleanflight/src/main/common/string_light.c **** {
 331              	 .loc 1 53 0
 332              	 .cfi_startproc
 333              	 
 334              	 
 335 0000 80B5     	 push {r7,lr}
 336              	.LCFI29:
 337              	 .cfi_def_cfa_offset 8
 338              	 .cfi_offset 7,-8
 339              	 .cfi_offset 14,-4
 340 0002 82B0     	 sub sp,sp,#8
 341              	.LCFI30:
 342              	 .cfi_def_cfa_offset 16
 343 0004 00AF     	 add r7,sp,#0
 344              	.LCFI31:
 345              	 .cfi_def_cfa_register 7
 346 0006 7860     	 str r0,[r7,#4]
  54:../cleanflight/src/main/common/string_light.c ****     return isupper(c) ? (c) - 'A' + 'a' : c;
 347              	 .loc 1 54 0
 348 0008 7868     	 ldr r0,[r7,#4]
 349 000a FFF7FEFF 	 bl isupper
 350 000e 0346     	 mov r3,r0
 351 0010 002B     	 cmp r3,#0
 352 0012 02D0     	 beq .L24
 353              	 .loc 1 54 0 is_stmt 0 discriminator 1
 354 0014 7B68     	 ldr r3,[r7,#4]
 355 0016 2033     	 adds r3,r3,#32
 356 0018 00E0     	 b .L25
 357              	.L24:
 358              	 .loc 1 54 0 discriminator 2
 359 001a 7B68     	 ldr r3,[r7,#4]
 360              	.L25:
  55:../cleanflight/src/main/common/string_light.c **** }
 361              	 .loc 1 55 0 is_stmt 1 discriminator 4
 362 001c 1846     	 mov r0,r3
 363 001e 0837     	 adds r7,r7,#8
 364              	.LCFI32:
 365              	 .cfi_def_cfa_offset 8
 366 0020 BD46     	 mov sp,r7
 367              	.LCFI33:
 368              	 .cfi_def_cfa_register 13
 369              	 
 370 0022 80BD     	 pop {r7,pc}
 371              	 .cfi_endproc
 372              	.LFE5:
 374              	 .section .text.toupper,"ax",%progbits
 375              	 .align 2
 376              	 .global toupper
 377              	 .thumb
 378              	 .thumb_func
 380              	toupper:
 381              	.LFB6:
  56:../cleanflight/src/main/common/string_light.c **** 
  57:../cleanflight/src/main/common/string_light.c **** int toupper(int c)
  58:../cleanflight/src/main/common/string_light.c **** {
 382              	 .loc 1 58 0
 383              	 .cfi_startproc
 384              	 
 385              	 
 386 0000 80B5     	 push {r7,lr}
 387              	.LCFI34:
 388              	 .cfi_def_cfa_offset 8
 389              	 .cfi_offset 7,-8
 390              	 .cfi_offset 14,-4
 391 0002 82B0     	 sub sp,sp,#8
 392              	.LCFI35:
 393              	 .cfi_def_cfa_offset 16
 394 0004 00AF     	 add r7,sp,#0
 395              	.LCFI36:
 396              	 .cfi_def_cfa_register 7
 397 0006 7860     	 str r0,[r7,#4]
  59:../cleanflight/src/main/common/string_light.c ****     return islower(c) ? (c) - 'a' + 'A' : c;
 398              	 .loc 1 59 0
 399 0008 7868     	 ldr r0,[r7,#4]
 400 000a FFF7FEFF 	 bl islower
 401 000e 0346     	 mov r3,r0
 402 0010 002B     	 cmp r3,#0
 403 0012 02D0     	 beq .L28
 404              	 .loc 1 59 0 is_stmt 0 discriminator 1
 405 0014 7B68     	 ldr r3,[r7,#4]
 406 0016 203B     	 subs r3,r3,#32
 407 0018 00E0     	 b .L29
 408              	.L28:
 409              	 .loc 1 59 0 discriminator 2
 410 001a 7B68     	 ldr r3,[r7,#4]
 411              	.L29:
  60:../cleanflight/src/main/common/string_light.c **** }
 412              	 .loc 1 60 0 is_stmt 1 discriminator 4
 413 001c 1846     	 mov r0,r3
 414 001e 0837     	 adds r7,r7,#8
 415              	.LCFI37:
 416              	 .cfi_def_cfa_offset 8
 417 0020 BD46     	 mov sp,r7
 418              	.LCFI38:
 419              	 .cfi_def_cfa_register 13
 420              	 
 421 0022 80BD     	 pop {r7,pc}
 422              	 .cfi_endproc
 423              	.LFE6:
 425              	 .section .text.strcasecmp,"ax",%progbits
 426              	 .align 2
 427              	 .global strcasecmp
 428              	 .thumb
 429              	 .thumb_func
 431              	strcasecmp:
 432              	.LFB7:
  61:../cleanflight/src/main/common/string_light.c **** 
  62:../cleanflight/src/main/common/string_light.c **** int strcasecmp(const char * s1, const char * s2)
  63:../cleanflight/src/main/common/string_light.c **** {
 433              	 .loc 1 63 0
 434              	 .cfi_startproc
 435              	 
 436              	 
 437 0000 80B5     	 push {r7,lr}
 438              	.LCFI39:
 439              	 .cfi_def_cfa_offset 8
 440              	 .cfi_offset 7,-8
 441              	 .cfi_offset 14,-4
 442 0002 82B0     	 sub sp,sp,#8
 443              	.LCFI40:
 444              	 .cfi_def_cfa_offset 16
 445 0004 00AF     	 add r7,sp,#0
 446              	.LCFI41:
 447              	 .cfi_def_cfa_register 7
 448 0006 7860     	 str r0,[r7,#4]
 449 0008 3960     	 str r1,[r7]
  64:../cleanflight/src/main/common/string_light.c ****     return strncasecmp(s1, s2, (size_t)-1);
 450              	 .loc 1 64 0
 451 000a 7868     	 ldr r0,[r7,#4]
 452 000c 3968     	 ldr r1,[r7]
 453 000e 4FF0FF32 	 mov r2,#-1
 454 0012 FFF7FEFF 	 bl strncasecmp
 455 0016 0346     	 mov r3,r0
  65:../cleanflight/src/main/common/string_light.c **** }
 456              	 .loc 1 65 0
 457 0018 1846     	 mov r0,r3
 458 001a 0837     	 adds r7,r7,#8
 459              	.LCFI42:
 460              	 .cfi_def_cfa_offset 8
 461 001c BD46     	 mov sp,r7
 462              	.LCFI43:
 463              	 .cfi_def_cfa_register 13
 464              	 
 465 001e 80BD     	 pop {r7,pc}
 466              	 .cfi_endproc
 467              	.LFE7:
 469              	 .section .text.strncasecmp,"ax",%progbits
 470              	 .align 2
 471              	 .global strncasecmp
 472              	 .thumb
 473              	 .thumb_func
 475              	strncasecmp:
 476              	.LFB8:
  66:../cleanflight/src/main/common/string_light.c **** 
  67:../cleanflight/src/main/common/string_light.c **** int strncasecmp(const char * s1, const char * s2, size_t n)
  68:../cleanflight/src/main/common/string_light.c **** {
 477              	 .loc 1 68 0
 478              	 .cfi_startproc
 479              	 
 480              	 
 481 0000 80B5     	 push {r7,lr}
 482              	.LCFI44:
 483              	 .cfi_def_cfa_offset 8
 484              	 .cfi_offset 7,-8
 485              	 .cfi_offset 14,-4
 486 0002 8AB0     	 sub sp,sp,#40
 487              	.LCFI45:
 488              	 .cfi_def_cfa_offset 48
 489 0004 00AF     	 add r7,sp,#0
 490              	.LCFI46:
 491              	 .cfi_def_cfa_register 7
 492 0006 F860     	 str r0,[r7,#12]
 493 0008 B960     	 str r1,[r7,#8]
 494 000a 7A60     	 str r2,[r7,#4]
  69:../cleanflight/src/main/common/string_light.c ****     const unsigned char * ucs1 = (const unsigned char *) s1;
 495              	 .loc 1 69 0
 496 000c FB68     	 ldr r3,[r7,#12]
 497 000e 7B62     	 str r3,[r7,#36]
  70:../cleanflight/src/main/common/string_light.c ****     const unsigned char * ucs2 = (const unsigned char *) s2;
 498              	 .loc 1 70 0
 499 0010 BB68     	 ldr r3,[r7,#8]
 500 0012 3B62     	 str r3,[r7,#32]
  71:../cleanflight/src/main/common/string_light.c **** 
  72:../cleanflight/src/main/common/string_light.c ****     int d = 0;
 501              	 .loc 1 72 0
 502 0014 0023     	 movs r3,#0
 503 0016 FB61     	 str r3,[r7,#28]
  73:../cleanflight/src/main/common/string_light.c **** 
  74:../cleanflight/src/main/common/string_light.c ****     for ( ; n != 0; n--) {
 504              	 .loc 1 74 0
 505 0018 1CE0     	 b .L34
 506              	.L36:
 507              	.LBB2:
  75:../cleanflight/src/main/common/string_light.c ****         const int c1 = tolower(*ucs1++);
 508              	 .loc 1 75 0
 509 001a 7B6A     	 ldr r3,[r7,#36]
 510 001c 5A1C     	 adds r2,r3,#1
 511 001e 7A62     	 str r2,[r7,#36]
 512 0020 1B78     	 ldrb r3,[r3]
 513 0022 1846     	 mov r0,r3
 514 0024 FFF7FEFF 	 bl tolower
 515 0028 B861     	 str r0,[r7,#24]
  76:../cleanflight/src/main/common/string_light.c ****         const int c2 = tolower(*ucs2++);
 516              	 .loc 1 76 0
 517 002a 3B6A     	 ldr r3,[r7,#32]
 518 002c 5A1C     	 adds r2,r3,#1
 519 002e 3A62     	 str r2,[r7,#32]
 520 0030 1B78     	 ldrb r3,[r3]
 521 0032 1846     	 mov r0,r3
 522 0034 FFF7FEFF 	 bl tolower
 523 0038 7861     	 str r0,[r7,#20]
  77:../cleanflight/src/main/common/string_light.c ****         if (((d = c1 - c2) != 0) || (c2 == '\0')) {
 524              	 .loc 1 77 0
 525 003a BA69     	 ldr r2,[r7,#24]
 526 003c 7B69     	 ldr r3,[r7,#20]
 527 003e D31A     	 subs r3,r2,r3
 528 0040 FB61     	 str r3,[r7,#28]
 529 0042 FB69     	 ldr r3,[r7,#28]
 530 0044 002B     	 cmp r3,#0
 531 0046 08D1     	 bne .L35
 532              	 .loc 1 77 0 is_stmt 0 discriminator 1
 533 0048 7B69     	 ldr r3,[r7,#20]
 534 004a 002B     	 cmp r3,#0
 535 004c 05D0     	 beq .L35
 536              	.LBE2:
  74:../cleanflight/src/main/common/string_light.c ****         const int c1 = tolower(*ucs1++);
 537              	 .loc 1 74 0 is_stmt 1
 538 004e 7B68     	 ldr r3,[r7,#4]
 539 0050 013B     	 subs r3,r3,#1
 540 0052 7B60     	 str r3,[r7,#4]
 541              	.L34:
  74:../cleanflight/src/main/common/string_light.c ****         const int c1 = tolower(*ucs1++);
 542              	 .loc 1 74 0 is_stmt 0 discriminator 1
 543 0054 7B68     	 ldr r3,[r7,#4]
 544 0056 002B     	 cmp r3,#0
 545 0058 DFD1     	 bne .L36
 546              	.L35:
  78:../cleanflight/src/main/common/string_light.c ****             break;
  79:../cleanflight/src/main/common/string_light.c ****         }
  80:../cleanflight/src/main/common/string_light.c ****     }
  81:../cleanflight/src/main/common/string_light.c **** 
  82:../cleanflight/src/main/common/string_light.c ****     return d;
 547              	 .loc 1 82 0 is_stmt 1
 548 005a FB69     	 ldr r3,[r7,#28]
  83:../cleanflight/src/main/common/string_light.c **** }
 549              	 .loc 1 83 0
 550 005c 1846     	 mov r0,r3
 551 005e 2837     	 adds r7,r7,#40
 552              	.LCFI47:
 553              	 .cfi_def_cfa_offset 8
 554 0060 BD46     	 mov sp,r7
 555              	.LCFI48:
 556              	 .cfi_def_cfa_register 13
 557              	 
 558 0062 80BD     	 pop {r7,pc}
 559              	 .cfi_endproc
 560              	.LFE8:
 562              	 .section .text.strcasestr,"ax",%progbits
 563              	 .align 2
 564              	 .global strcasestr
 565              	 .thumb
 566              	 .thumb_func
 568              	strcasestr:
 569              	.LFB9:
  84:../cleanflight/src/main/common/string_light.c **** 
  85:../cleanflight/src/main/common/string_light.c **** char *strcasestr(const char *haystack, const char *needle)
  86:../cleanflight/src/main/common/string_light.c **** {
 570              	 .loc 1 86 0
 571              	 .cfi_startproc
 572              	 
 573              	 
 574 0000 80B5     	 push {r7,lr}
 575              	.LCFI49:
 576              	 .cfi_def_cfa_offset 8
 577              	 .cfi_offset 7,-8
 578              	 .cfi_offset 14,-4
 579 0002 84B0     	 sub sp,sp,#16
 580              	.LCFI50:
 581              	 .cfi_def_cfa_offset 24
 582 0004 00AF     	 add r7,sp,#0
 583              	.LCFI51:
 584              	 .cfi_def_cfa_register 7
 585 0006 7860     	 str r0,[r7,#4]
 586 0008 3960     	 str r1,[r7]
  87:../cleanflight/src/main/common/string_light.c ****     int nLen = strlen(needle);
 587              	 .loc 1 87 0
 588 000a 3868     	 ldr r0,[r7]
 589 000c FFF7FEFF 	 bl strlen
 590 0010 0346     	 mov r3,r0
 591 0012 FB60     	 str r3,[r7,#12]
 592              	.L41:
  88:../cleanflight/src/main/common/string_light.c ****     do {
  89:../cleanflight/src/main/common/string_light.c ****         if (!strncasecmp(haystack, needle, nLen)) {
 593              	 .loc 1 89 0
 594 0014 FB68     	 ldr r3,[r7,#12]
 595 0016 7868     	 ldr r0,[r7,#4]
 596 0018 3968     	 ldr r1,[r7]
 597 001a 1A46     	 mov r2,r3
 598 001c FFF7FEFF 	 bl strncasecmp
 599 0020 0346     	 mov r3,r0
 600 0022 002B     	 cmp r3,#0
 601 0024 01D1     	 bne .L39
  90:../cleanflight/src/main/common/string_light.c ****             return (char *)haystack;
 602              	 .loc 1 90 0
 603 0026 7B68     	 ldr r3,[r7,#4]
 604 0028 07E0     	 b .L40
 605              	.L39:
  91:../cleanflight/src/main/common/string_light.c ****         }
  92:../cleanflight/src/main/common/string_light.c ****         haystack++;
 606              	 .loc 1 92 0
 607 002a 7B68     	 ldr r3,[r7,#4]
 608 002c 0133     	 adds r3,r3,#1
 609 002e 7B60     	 str r3,[r7,#4]
  93:../cleanflight/src/main/common/string_light.c ****     } while (*haystack);
 610              	 .loc 1 93 0
 611 0030 7B68     	 ldr r3,[r7,#4]
 612 0032 1B78     	 ldrb r3,[r3]
 613 0034 002B     	 cmp r3,#0
 614 0036 EDD1     	 bne .L41
  94:../cleanflight/src/main/common/string_light.c ****     return NULL;
 615              	 .loc 1 94 0
 616 0038 0023     	 movs r3,#0
 617              	.L40:
  95:../cleanflight/src/main/common/string_light.c **** }
 618              	 .loc 1 95 0
 619 003a 1846     	 mov r0,r3
 620 003c 1037     	 adds r7,r7,#16
 621              	.LCFI52:
 622              	 .cfi_def_cfa_offset 8
 623 003e BD46     	 mov sp,r7
 624              	.LCFI53:
 625              	 .cfi_def_cfa_register 13
 626              	 
 627 0040 80BD     	 pop {r7,pc}
 628              	 .cfi_endproc
 629              	.LFE9:
 631 0042 00BF     	 .text
 632              	.Letext0:
 633              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\string.h"
 634              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
DEFINED SYMBOLS
                            *ABS*:00000000 string_light.c
    {standard input}:20     .text.isalnum:00000000 $t
    {standard input}:25     .text.isalnum:00000000 isalnum
    {standard input}:144    .text.isupper:00000000 isupper
    {standard input}:200    .text.islower:00000000 islower
    {standard input}:83     .text.isdigit:00000000 $t
    {standard input}:88     .text.isdigit:00000000 isdigit
    {standard input}:139    .text.isupper:00000000 $t
    {standard input}:195    .text.islower:00000000 $t
    {standard input}:251    .text.isspace:00000000 $t
    {standard input}:256    .text.isspace:00000000 isspace
    {standard input}:324    .text.tolower:00000000 $t
    {standard input}:329    .text.tolower:00000000 tolower
    {standard input}:375    .text.toupper:00000000 $t
    {standard input}:380    .text.toupper:00000000 toupper
    {standard input}:426    .text.strcasecmp:00000000 $t
    {standard input}:431    .text.strcasecmp:00000000 strcasecmp
    {standard input}:475    .text.strncasecmp:00000000 strncasecmp
    {standard input}:470    .text.strncasecmp:00000000 $t
    {standard input}:563    .text.strcasestr:00000000 $t
    {standard input}:568    .text.strcasestr:00000000 strcasestr
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
strlen
