   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "strtol.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text._strto_l,"ax",%progbits
  20              	 .align 2
  21              	 .global _strto_l
  22              	 .thumb
  23              	 .thumb_func
  25              	_strto_l:
  26              	.LFB2:
  27              	 .file 1 "../cleanflight/src/main/common/strtol.c"
   1:../cleanflight/src/main/common/strtol.c **** /*  Copyright (C) 2002     Manuel Novoa III
   2:../cleanflight/src/main/common/strtol.c ****  *  From my (incomplete) stdlib library for linux and (soon) elks.
   3:../cleanflight/src/main/common/strtol.c ****  *
   4:../cleanflight/src/main/common/strtol.c ****  *  This library is free software; you can redistribute it and/or
   5:../cleanflight/src/main/common/strtol.c ****  *  modify it under the terms of the GNU Library General Public
   6:../cleanflight/src/main/common/strtol.c ****  *  License as published by the Free Software Foundation; either
   7:../cleanflight/src/main/common/strtol.c ****  *  version 2 of the License, or (at your option) any later version.
   8:../cleanflight/src/main/common/strtol.c ****  *
   9:../cleanflight/src/main/common/strtol.c ****  *  This library is distributed in the hope that it will be useful,
  10:../cleanflight/src/main/common/strtol.c ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:../cleanflight/src/main/common/strtol.c ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  12:../cleanflight/src/main/common/strtol.c ****  *  Library General Public License for more details.
  13:../cleanflight/src/main/common/strtol.c ****  *
  14:../cleanflight/src/main/common/strtol.c ****  *  You should have received a copy of the GNU Library General Public
  15:../cleanflight/src/main/common/strtol.c ****  *  License along with this library; if not, see
  16:../cleanflight/src/main/common/strtol.c ****  *  <http://www.gnu.org/licenses/>.
  17:../cleanflight/src/main/common/strtol.c **** 
  18:../cleanflight/src/main/common/strtol.c ****  * Adapted for Betaflight by Petr Ledvina, 2018
  19:../cleanflight/src/main/common/strtol.c **** 
  20:../cleanflight/src/main/common/strtol.c ****  */
  21:../cleanflight/src/main/common/strtol.c **** 
  22:../cleanflight/src/main/common/strtol.c **** 
  23:../cleanflight/src/main/common/strtol.c **** #include <ctype.h>
  24:../cleanflight/src/main/common/strtol.c **** #include <limits.h>
  25:../cleanflight/src/main/common/strtol.c **** 
  26:../cleanflight/src/main/common/strtol.c **** #include "common/utils.h"
  27:../cleanflight/src/main/common/strtol.c **** 
  28:../cleanflight/src/main/common/strtol.c **** #define _STRTO_ENDPTR 1
  29:../cleanflight/src/main/common/strtol.c **** 
  30:../cleanflight/src/main/common/strtol.c **** unsigned long _strto_l(const char * str, char ** endptr, int base, int sflag)
  31:../cleanflight/src/main/common/strtol.c **** {
  28              	 .loc 1 31 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 80B5     	 push {r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 7,-8
  36              	 .cfi_offset 14,-4
  37 0002 8AB0     	 sub sp,sp,#40
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 48
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
  32:../cleanflight/src/main/common/strtol.c ****     unsigned long number, cutoff;
  33:../cleanflight/src/main/common/strtol.c **** #if _STRTO_ENDPTR
  34:../cleanflight/src/main/common/strtol.c ****     const char *fail_char;
  35:../cleanflight/src/main/common/strtol.c **** #define SET_FAIL(X) fail_char = (X)
  36:../cleanflight/src/main/common/strtol.c **** #else
  37:../cleanflight/src/main/common/strtol.c **** #define SET_FAIL(X) ((void)(X)) /* Keep side effects. */
  38:../cleanflight/src/main/common/strtol.c **** #endif
  39:../cleanflight/src/main/common/strtol.c ****     unsigned char negative, digit, cutoff_digit;
  40:../cleanflight/src/main/common/strtol.c **** 
  41:../cleanflight/src/main/common/strtol.c ****     SET_FAIL(str);
  47              	 .loc 1 41 0
  48 000e FB68     	 ldr r3,[r7,#12]
  49 0010 3B62     	 str r3,[r7,#32]
  42:../cleanflight/src/main/common/strtol.c **** 
  43:../cleanflight/src/main/common/strtol.c ****     while (isspace(*str)) { /* Skip leading whitespace. */
  50              	 .loc 1 43 0
  51 0012 02E0     	 b .L2
  52              	.L3:
  44:../cleanflight/src/main/common/strtol.c ****         ++str;
  53              	 .loc 1 44 0
  54 0014 FB68     	 ldr r3,[r7,#12]
  55 0016 0133     	 adds r3,r3,#1
  56 0018 FB60     	 str r3,[r7,#12]
  57              	.L2:
  43:../cleanflight/src/main/common/strtol.c ****         ++str;
  58              	 .loc 1 43 0
  59 001a FB68     	 ldr r3,[r7,#12]
  60 001c 1B78     	 ldrb r3,[r3]
  61 001e 1846     	 mov r0,r3
  62 0020 FFF7FEFF 	 bl isspace
  63 0024 0346     	 mov r3,r0
  64 0026 002B     	 cmp r3,#0
  65 0028 F4D1     	 bne .L3
  45:../cleanflight/src/main/common/strtol.c ****     }
  46:../cleanflight/src/main/common/strtol.c **** 
  47:../cleanflight/src/main/common/strtol.c ****     /* Handle optional sign. */
  48:../cleanflight/src/main/common/strtol.c ****     negative = 0;
  66              	 .loc 1 48 0
  67 002a 0023     	 movs r3,#0
  68 002c FB77     	 strb r3,[r7,#31]
  49:../cleanflight/src/main/common/strtol.c ****     switch (*str) {
  69              	 .loc 1 49 0
  70 002e FB68     	 ldr r3,[r7,#12]
  71 0030 1B78     	 ldrb r3,[r3]
  72 0032 2B2B     	 cmp r3,#43
  73 0034 03D0     	 beq .L5
  74 0036 2D2B     	 cmp r3,#45
  75 0038 04D1     	 bne .L4
  50:../cleanflight/src/main/common/strtol.c ****         case '-':
  51:../cleanflight/src/main/common/strtol.c ****             negative = 1;	/* Fall through to increment str. */
  76              	 .loc 1 51 0
  77 003a 0123     	 movs r3,#1
  78 003c FB77     	 strb r3,[r7,#31]
  79              	.L5:
  52:../cleanflight/src/main/common/strtol.c ****             FALLTHROUGH;
  53:../cleanflight/src/main/common/strtol.c ****         case '+':
  54:../cleanflight/src/main/common/strtol.c ****             ++str;
  80              	 .loc 1 54 0
  81 003e FB68     	 ldr r3,[r7,#12]
  82 0040 0133     	 adds r3,r3,#1
  83 0042 FB60     	 str r3,[r7,#12]
  84              	.L4:
  55:../cleanflight/src/main/common/strtol.c ****     }
  56:../cleanflight/src/main/common/strtol.c **** 
  57:../cleanflight/src/main/common/strtol.c ****     if (!base || base == 16 || base == 2) {		/* Either dynamic (base = 0) or base with 0[xb] prefix
  85              	 .loc 1 57 0
  86 0044 7B68     	 ldr r3,[r7,#4]
  87 0046 002B     	 cmp r3,#0
  88 0048 05D0     	 beq .L7
  89              	 .loc 1 57 0 is_stmt 0 discriminator 1
  90 004a 7B68     	 ldr r3,[r7,#4]
  91 004c 102B     	 cmp r3,#16
  92 004e 02D0     	 beq .L7
  93              	 .loc 1 57 0 discriminator 2
  94 0050 7B68     	 ldr r3,[r7,#4]
  95 0052 022B     	 cmp r3,#2
  96 0054 35D1     	 bne .L8
  97              	.L7:
  58:../cleanflight/src/main/common/strtol.c ****         if (*str == '0') {
  98              	 .loc 1 58 0 is_stmt 1
  99 0056 FB68     	 ldr r3,[r7,#12]
 100 0058 1B78     	 ldrb r3,[r3]
 101 005a 302B     	 cmp r3,#48
 102 005c 31D1     	 bne .L8
  59:../cleanflight/src/main/common/strtol.c ****             SET_FAIL(++str);
 103              	 .loc 1 59 0
 104 005e FB68     	 ldr r3,[r7,#12]
 105 0060 0133     	 adds r3,r3,#1
 106 0062 FB60     	 str r3,[r7,#12]
 107 0064 FB68     	 ldr r3,[r7,#12]
 108 0066 3B62     	 str r3,[r7,#32]
  60:../cleanflight/src/main/common/strtol.c ****             if ((!base || base == 16) && tolower(*str) == 'x') {
 109              	 .loc 1 60 0
 110 0068 7B68     	 ldr r3,[r7,#4]
 111 006a 002B     	 cmp r3,#0
 112 006c 02D0     	 beq .L9
 113              	 .loc 1 60 0 is_stmt 0 discriminator 2
 114 006e 7B68     	 ldr r3,[r7,#4]
 115 0070 102B     	 cmp r3,#16
 116 0072 0DD1     	 bne .L10
 117              	.L9:
 118              	 .loc 1 60 0 discriminator 3
 119 0074 FB68     	 ldr r3,[r7,#12]
 120 0076 1B78     	 ldrb r3,[r3]
 121 0078 1846     	 mov r0,r3
 122 007a FFF7FEFF 	 bl tolower
 123 007e 0346     	 mov r3,r0
 124 0080 782B     	 cmp r3,#120
 125 0082 05D1     	 bne .L10
  61:../cleanflight/src/main/common/strtol.c ****                 ++str;
 126              	 .loc 1 61 0 is_stmt 1
 127 0084 FB68     	 ldr r3,[r7,#12]
 128 0086 0133     	 adds r3,r3,#1
 129 0088 FB60     	 str r3,[r7,#12]
  62:../cleanflight/src/main/common/strtol.c ****                 base = 16;
 130              	 .loc 1 62 0
 131 008a 1023     	 movs r3,#16
 132 008c 7B60     	 str r3,[r7,#4]
 133 008e 18E0     	 b .L8
 134              	.L10:
  63:../cleanflight/src/main/common/strtol.c ****             } else if ((!base || base == 2) && tolower(*str) == 'b') {
 135              	 .loc 1 63 0
 136 0090 7B68     	 ldr r3,[r7,#4]
 137 0092 002B     	 cmp r3,#0
 138 0094 02D0     	 beq .L11
 139              	 .loc 1 63 0 is_stmt 0 discriminator 2
 140 0096 7B68     	 ldr r3,[r7,#4]
 141 0098 022B     	 cmp r3,#2
 142 009a 0DD1     	 bne .L12
 143              	.L11:
 144              	 .loc 1 63 0 discriminator 3
 145 009c FB68     	 ldr r3,[r7,#12]
 146 009e 1B78     	 ldrb r3,[r3]
 147 00a0 1846     	 mov r0,r3
 148 00a2 FFF7FEFF 	 bl tolower
 149 00a6 0346     	 mov r3,r0
 150 00a8 622B     	 cmp r3,#98
 151 00aa 05D1     	 bne .L12
  64:../cleanflight/src/main/common/strtol.c ****                 ++str;
 152              	 .loc 1 64 0 is_stmt 1
 153 00ac FB68     	 ldr r3,[r7,#12]
 154 00ae 0133     	 adds r3,r3,#1
 155 00b0 FB60     	 str r3,[r7,#12]
  65:../cleanflight/src/main/common/strtol.c ****                 base = 2;
 156              	 .loc 1 65 0
 157 00b2 0223     	 movs r3,#2
 158 00b4 7B60     	 str r3,[r7,#4]
 159 00b6 04E0     	 b .L8
 160              	.L12:
  66:../cleanflight/src/main/common/strtol.c ****             } else if(!base) {
 161              	 .loc 1 66 0
 162 00b8 7B68     	 ldr r3,[r7,#4]
 163 00ba 002B     	 cmp r3,#0
 164 00bc 01D1     	 bne .L8
  67:../cleanflight/src/main/common/strtol.c ****                 base = 8;
 165              	 .loc 1 67 0
 166 00be 0823     	 movs r3,#8
 167 00c0 7B60     	 str r3,[r7,#4]
 168              	.L8:
  68:../cleanflight/src/main/common/strtol.c ****             }
  69:../cleanflight/src/main/common/strtol.c ****         }
  70:../cleanflight/src/main/common/strtol.c ****     }
  71:../cleanflight/src/main/common/strtol.c **** 
  72:../cleanflight/src/main/common/strtol.c ****     number = 0;
 169              	 .loc 1 72 0
 170 00c2 0023     	 movs r3,#0
 171 00c4 7B62     	 str r3,[r7,#36]
  73:../cleanflight/src/main/common/strtol.c **** 
  74:../cleanflight/src/main/common/strtol.c ****     if (((unsigned)(base - 2)) < 35) { /* Legal base. */
 172              	 .loc 1 74 0
 173 00c6 7B68     	 ldr r3,[r7,#4]
 174 00c8 023B     	 subs r3,r3,#2
 175 00ca 222B     	 cmp r3,#34
 176 00cc 51D8     	 bhi .L13
  75:../cleanflight/src/main/common/strtol.c ****         cutoff_digit = ULONG_MAX % base;
 177              	 .loc 1 75 0
 178 00ce 7B68     	 ldr r3,[r7,#4]
 179 00d0 4FF0FF32 	 mov r2,#-1
 180 00d4 B2FBF3F1 	 udiv r1,r2,r3
 181 00d8 03FB01F3 	 mul r3,r3,r1
 182 00dc D31A     	 subs r3,r2,r3
 183 00de BB77     	 strb r3,[r7,#30]
  76:../cleanflight/src/main/common/strtol.c ****         cutoff = ULONG_MAX / base;
 184              	 .loc 1 76 0
 185 00e0 7B68     	 ldr r3,[r7,#4]
 186 00e2 4FF0FF32 	 mov r2,#-1
 187 00e6 B2FBF3F3 	 udiv r3,r2,r3
 188 00ea BB61     	 str r3,[r7,#24]
 189              	.L22:
  77:../cleanflight/src/main/common/strtol.c ****         do {
  78:../cleanflight/src/main/common/strtol.c ****             digit = (        (*str - '0') <= 9)
 190              	 .loc 1 78 0
 191 00ec FB68     	 ldr r3,[r7,#12]
 192 00ee 1B78     	 ldrb r3,[r3]
 193 00f0 303B     	 subs r3,r3,#48
 194 00f2 092B     	 cmp r3,#9
 195 00f4 04DC     	 bgt .L14
 196              	 .loc 1 78 0 is_stmt 0 discriminator 1
 197 00f6 FB68     	 ldr r3,[r7,#12]
 198 00f8 1B78     	 ldrb r3,[r3]
 199 00fa 303B     	 subs r3,r3,#48
 200 00fc DBB2     	 uxtb r3,r3
 201 00fe 0FE0     	 b .L15
 202              	.L14:
  79:../cleanflight/src/main/common/strtol.c ****                 ? /* 0..9 */ (*str - '0')
  80:../cleanflight/src/main/common/strtol.c ****                 : /* else */ (((0x20 | *str) >= 'a') /* WARNING: assumes ascii. */
 203              	 .loc 1 80 0 is_stmt 1 discriminator 2
 204 0100 FB68     	 ldr r3,[r7,#12]
 205 0102 1B78     	 ldrb r3,[r3]
 206 0104 43F02003 	 orr r3,r3,#32
 207 0108 DBB2     	 uxtb r3,r3
  78:../cleanflight/src/main/common/strtol.c ****                 ? /* 0..9 */ (*str - '0')
 208              	 .loc 1 78 0 discriminator 2
 209 010a 602B     	 cmp r3,#96
 210 010c 07D9     	 bls .L16
  78:../cleanflight/src/main/common/strtol.c ****                 ? /* 0..9 */ (*str - '0')
 211              	 .loc 1 78 0 is_stmt 0 discriminator 4
 212 010e FB68     	 ldr r3,[r7,#12]
 213 0110 1B78     	 ldrb r3,[r3]
 214 0112 43F02003 	 orr r3,r3,#32
 215 0116 DBB2     	 uxtb r3,r3
 216 0118 573B     	 subs r3,r3,#87
 217 011a DBB2     	 uxtb r3,r3
 218 011c 00E0     	 b .L15
 219              	.L16:
  78:../cleanflight/src/main/common/strtol.c ****                 ? /* 0..9 */ (*str - '0')
 220              	 .loc 1 78 0 discriminator 5
 221 011e 2823     	 movs r3,#40
 222              	.L15:
  78:../cleanflight/src/main/common/strtol.c ****                 ? /* 0..9 */ (*str - '0')
 223              	 .loc 1 78 0 discriminator 8
 224 0120 FB75     	 strb r3,[r7,#23]
  81:../cleanflight/src/main/common/strtol.c ****                               ? /* >= A/a */ ((0x20 | *str) - ('a' - 10))
  82:../cleanflight/src/main/common/strtol.c ****                               : /* else   */ 40 /* bad value */);
  83:../cleanflight/src/main/common/strtol.c **** 
  84:../cleanflight/src/main/common/strtol.c ****             if (digit >= base) {
 225              	 .loc 1 84 0 is_stmt 1 discriminator 8
 226 0122 FA7D     	 ldrb r2,[r7,#23]
 227 0124 7B68     	 ldr r3,[r7,#4]
 228 0126 9A42     	 cmp r2,r3
 229 0128 00DB     	 blt .L18
  85:../cleanflight/src/main/common/strtol.c ****                 break;
 230              	 .loc 1 85 0
 231 012a 22E0     	 b .L13
 232              	.L18:
  86:../cleanflight/src/main/common/strtol.c ****             }
  87:../cleanflight/src/main/common/strtol.c **** 
  88:../cleanflight/src/main/common/strtol.c ****             SET_FAIL(++str);
 233              	 .loc 1 88 0
 234 012c FB68     	 ldr r3,[r7,#12]
 235 012e 0133     	 adds r3,r3,#1
 236 0130 FB60     	 str r3,[r7,#12]
 237 0132 FB68     	 ldr r3,[r7,#12]
 238 0134 3B62     	 str r3,[r7,#32]
  89:../cleanflight/src/main/common/strtol.c **** 
  90:../cleanflight/src/main/common/strtol.c ****             if ((number > cutoff)
 239              	 .loc 1 90 0
 240 0136 7A6A     	 ldr r2,[r7,#36]
 241 0138 BB69     	 ldr r3,[r7,#24]
 242 013a 9A42     	 cmp r2,r3
 243 013c 07D8     	 bhi .L19
  91:../cleanflight/src/main/common/strtol.c ****                 || ((number == cutoff) && (digit > cutoff_digit))) {
 244              	 .loc 1 91 0
 245 013e 7A6A     	 ldr r2,[r7,#36]
 246 0140 BB69     	 ldr r3,[r7,#24]
 247 0142 9A42     	 cmp r2,r3
 248 0144 0DD1     	 bne .L20
 249              	 .loc 1 91 0 is_stmt 0 discriminator 1
 250 0146 FA7D     	 ldrb r2,[r7,#23]
 251 0148 BB7F     	 ldrb r3,[r7,#30]
 252 014a 9A42     	 cmp r2,r3
 253 014c 09D9     	 bls .L20
 254              	.L19:
  92:../cleanflight/src/main/common/strtol.c ****                 number = ULONG_MAX;
 255              	 .loc 1 92 0 is_stmt 1
 256 014e 4FF0FF33 	 mov r3,#-1
 257 0152 7B62     	 str r3,[r7,#36]
  93:../cleanflight/src/main/common/strtol.c ****                 negative &= sflag;
 258              	 .loc 1 93 0
 259 0154 3B68     	 ldr r3,[r7]
 260 0156 DAB2     	 uxtb r2,r3
 261 0158 FB7F     	 ldrb r3,[r7,#31]
 262 015a 1340     	 ands r3,r3,r2
 263 015c DBB2     	 uxtb r3,r3
 264 015e FB77     	 strb r3,[r7,#31]
 265 0160 06E0     	 b .L21
 266              	.L20:
  94:../cleanflight/src/main/common/strtol.c ****             } else {
  95:../cleanflight/src/main/common/strtol.c ****                 number = number * base + digit;
 267              	 .loc 1 95 0
 268 0162 7B68     	 ldr r3,[r7,#4]
 269 0164 7A6A     	 ldr r2,[r7,#36]
 270 0166 02FB03F2 	 mul r2,r2,r3
 271 016a FB7D     	 ldrb r3,[r7,#23]
 272 016c 1344     	 add r3,r3,r2
 273 016e 7B62     	 str r3,[r7,#36]
 274              	.L21:
  96:../cleanflight/src/main/common/strtol.c ****             }
  97:../cleanflight/src/main/common/strtol.c ****         } while (1);
 275              	 .loc 1 97 0
 276 0170 BCE7     	 b .L22
 277              	.L13:
  98:../cleanflight/src/main/common/strtol.c ****     }
  99:../cleanflight/src/main/common/strtol.c **** 
 100:../cleanflight/src/main/common/strtol.c **** #if _STRTO_ENDPTR
 101:../cleanflight/src/main/common/strtol.c ****     if (endptr) {
 278              	 .loc 1 101 0
 279 0172 BB68     	 ldr r3,[r7,#8]
 280 0174 002B     	 cmp r3,#0
 281 0176 02D0     	 beq .L23
 102:../cleanflight/src/main/common/strtol.c ****         *endptr = (char *) fail_char;
 282              	 .loc 1 102 0
 283 0178 BB68     	 ldr r3,[r7,#8]
 284 017a 3A6A     	 ldr r2,[r7,#32]
 285 017c 1A60     	 str r2,[r3]
 286              	.L23:
 287              	.LBB2:
 103:../cleanflight/src/main/common/strtol.c ****     }
 104:../cleanflight/src/main/common/strtol.c **** #endif
 105:../cleanflight/src/main/common/strtol.c **** 
 106:../cleanflight/src/main/common/strtol.c ****     {
 107:../cleanflight/src/main/common/strtol.c ****         unsigned long tmp = (negative
 108:../cleanflight/src/main/common/strtol.c ****                              ? ((unsigned long)(-(1+LONG_MIN)))+1
 109:../cleanflight/src/main/common/strtol.c ****                              : LONG_MAX);
 288              	 .loc 1 109 0
 289 017e FB7F     	 ldrb r3,[r7,#31]
 290 0180 002B     	 cmp r3,#0
 291 0182 02D0     	 beq .L24
 292              	 .loc 1 109 0 is_stmt 0 discriminator 1
 293 0184 4FF00043 	 mov r3,#-2147483648
 294 0188 01E0     	 b .L25
 295              	.L24:
 296              	 .loc 1 109 0 discriminator 2
 297 018a 6FF00043 	 mvn r3,#-2147483648
 298              	.L25:
 107:../cleanflight/src/main/common/strtol.c ****                              ? ((unsigned long)(-(1+LONG_MIN)))+1
 299              	 .loc 1 107 0 is_stmt 1
 300 018e 3B61     	 str r3,[r7,#16]
 110:../cleanflight/src/main/common/strtol.c ****         if (sflag && (number > tmp)) {
 301              	 .loc 1 110 0
 302 0190 3B68     	 ldr r3,[r7]
 303 0192 002B     	 cmp r3,#0
 304 0194 05D0     	 beq .L26
 305              	 .loc 1 110 0 is_stmt 0 discriminator 1
 306 0196 7A6A     	 ldr r2,[r7,#36]
 307 0198 3B69     	 ldr r3,[r7,#16]
 308 019a 9A42     	 cmp r2,r3
 309 019c 01D9     	 bls .L26
 111:../cleanflight/src/main/common/strtol.c ****             number = tmp;
 310              	 .loc 1 111 0 is_stmt 1
 311 019e 3B69     	 ldr r3,[r7,#16]
 312 01a0 7B62     	 str r3,[r7,#36]
 313              	.L26:
 314              	.LBE2:
 112:../cleanflight/src/main/common/strtol.c ****         }
 113:../cleanflight/src/main/common/strtol.c ****     }
 114:../cleanflight/src/main/common/strtol.c **** 
 115:../cleanflight/src/main/common/strtol.c ****     return negative ? (unsigned long)(-((long)number)) : number;
 315              	 .loc 1 115 0
 316 01a2 FB7F     	 ldrb r3,[r7,#31]
 317 01a4 002B     	 cmp r3,#0
 318 01a6 02D0     	 beq .L27
 319              	 .loc 1 115 0 is_stmt 0 discriminator 1
 320 01a8 7B6A     	 ldr r3,[r7,#36]
 321 01aa 5B42     	 negs r3,r3
 322 01ac 00E0     	 b .L28
 323              	.L27:
 324              	 .loc 1 115 0 discriminator 2
 325 01ae 7B6A     	 ldr r3,[r7,#36]
 326              	.L28:
 116:../cleanflight/src/main/common/strtol.c **** }
 327              	 .loc 1 116 0 is_stmt 1 discriminator 4
 328 01b0 1846     	 mov r0,r3
 329 01b2 2837     	 adds r7,r7,#40
 330              	.LCFI3:
 331              	 .cfi_def_cfa_offset 8
 332 01b4 BD46     	 mov sp,r7
 333              	.LCFI4:
 334              	 .cfi_def_cfa_register 13
 335              	 
 336 01b6 80BD     	 pop {r7,pc}
 337              	 .cfi_endproc
 338              	.LFE2:
 340              	 .section .text.strtol,"ax",%progbits
 341              	 .align 2
 342              	 .global strtol
 343              	 .thumb
 344              	 .thumb_func
 346              	strtol:
 347              	.LFB3:
 117:../cleanflight/src/main/common/strtol.c **** 
 118:../cleanflight/src/main/common/strtol.c **** long strtol(const char * str, char ** endptr, int base)
 119:../cleanflight/src/main/common/strtol.c **** {
 348              	 .loc 1 119 0
 349              	 .cfi_startproc
 350              	 
 351              	 
 352 0000 80B5     	 push {r7,lr}
 353              	.LCFI5:
 354              	 .cfi_def_cfa_offset 8
 355              	 .cfi_offset 7,-8
 356              	 .cfi_offset 14,-4
 357 0002 84B0     	 sub sp,sp,#16
 358              	.LCFI6:
 359              	 .cfi_def_cfa_offset 24
 360 0004 00AF     	 add r7,sp,#0
 361              	.LCFI7:
 362              	 .cfi_def_cfa_register 7
 363 0006 F860     	 str r0,[r7,#12]
 364 0008 B960     	 str r1,[r7,#8]
 365 000a 7A60     	 str r2,[r7,#4]
 120:../cleanflight/src/main/common/strtol.c ****     return _strto_l(str, endptr, base, 1);
 366              	 .loc 1 120 0
 367 000c F868     	 ldr r0,[r7,#12]
 368 000e B968     	 ldr r1,[r7,#8]
 369 0010 7A68     	 ldr r2,[r7,#4]
 370 0012 0123     	 movs r3,#1
 371 0014 FFF7FEFF 	 bl _strto_l
 372 0018 0346     	 mov r3,r0
 121:../cleanflight/src/main/common/strtol.c **** }
 373              	 .loc 1 121 0
 374 001a 1846     	 mov r0,r3
 375 001c 1037     	 adds r7,r7,#16
 376              	.LCFI8:
 377              	 .cfi_def_cfa_offset 8
 378 001e BD46     	 mov sp,r7
 379              	.LCFI9:
 380              	 .cfi_def_cfa_register 13
 381              	 
 382 0020 80BD     	 pop {r7,pc}
 383              	 .cfi_endproc
 384              	.LFE3:
 386 0022 00BF     	 .section .text.strtoul,"ax",%progbits
 387              	 .align 2
 388              	 .global strtoul
 389              	 .thumb
 390              	 .thumb_func
 392              	strtoul:
 393              	.LFB4:
 122:../cleanflight/src/main/common/strtol.c **** 
 123:../cleanflight/src/main/common/strtol.c **** unsigned long strtoul(const char * str, char ** endptr, int base)
 124:../cleanflight/src/main/common/strtol.c **** {
 394              	 .loc 1 124 0
 395              	 .cfi_startproc
 396              	 
 397              	 
 398 0000 80B5     	 push {r7,lr}
 399              	.LCFI10:
 400              	 .cfi_def_cfa_offset 8
 401              	 .cfi_offset 7,-8
 402              	 .cfi_offset 14,-4
 403 0002 84B0     	 sub sp,sp,#16
 404              	.LCFI11:
 405              	 .cfi_def_cfa_offset 24
 406 0004 00AF     	 add r7,sp,#0
 407              	.LCFI12:
 408              	 .cfi_def_cfa_register 7
 409 0006 F860     	 str r0,[r7,#12]
 410 0008 B960     	 str r1,[r7,#8]
 411 000a 7A60     	 str r2,[r7,#4]
 125:../cleanflight/src/main/common/strtol.c ****     return _strto_l(str, endptr, base, 0);
 412              	 .loc 1 125 0
 413 000c F868     	 ldr r0,[r7,#12]
 414 000e B968     	 ldr r1,[r7,#8]
 415 0010 7A68     	 ldr r2,[r7,#4]
 416 0012 0023     	 movs r3,#0
 417 0014 FFF7FEFF 	 bl _strto_l
 418 0018 0346     	 mov r3,r0
 126:../cleanflight/src/main/common/strtol.c **** }
 419              	 .loc 1 126 0
 420 001a 1846     	 mov r0,r3
 421 001c 1037     	 adds r7,r7,#16
 422              	.LCFI13:
 423              	 .cfi_def_cfa_offset 8
 424 001e BD46     	 mov sp,r7
 425              	.LCFI14:
 426              	 .cfi_def_cfa_register 13
 427              	 
 428 0020 80BD     	 pop {r7,pc}
 429              	 .cfi_endproc
 430              	.LFE4:
 432 0022 00BF     	 .section .text.atoi,"ax",%progbits
 433              	 .align 2
 434              	 .global atoi
 435              	 .thumb
 436              	 .thumb_func
 438              	atoi:
 439              	.LFB5:
 127:../cleanflight/src/main/common/strtol.c **** 
 128:../cleanflight/src/main/common/strtol.c **** int atoi(const char *str)
 129:../cleanflight/src/main/common/strtol.c **** {
 440              	 .loc 1 129 0
 441              	 .cfi_startproc
 442              	 
 443              	 
 444 0000 80B5     	 push {r7,lr}
 445              	.LCFI15:
 446              	 .cfi_def_cfa_offset 8
 447              	 .cfi_offset 7,-8
 448              	 .cfi_offset 14,-4
 449 0002 82B0     	 sub sp,sp,#8
 450              	.LCFI16:
 451              	 .cfi_def_cfa_offset 16
 452 0004 00AF     	 add r7,sp,#0
 453              	.LCFI17:
 454              	 .cfi_def_cfa_register 7
 455 0006 7860     	 str r0,[r7,#4]
 130:../cleanflight/src/main/common/strtol.c ****     return strtol(str, NULL, 10);
 456              	 .loc 1 130 0
 457 0008 7868     	 ldr r0,[r7,#4]
 458 000a 0021     	 movs r1,#0
 459 000c 0A22     	 movs r2,#10
 460 000e FFF7FEFF 	 bl strtol
 461 0012 0346     	 mov r3,r0
 131:../cleanflight/src/main/common/strtol.c **** }
 462              	 .loc 1 131 0
 463 0014 1846     	 mov r0,r3
 464 0016 0837     	 adds r7,r7,#8
 465              	.LCFI18:
 466              	 .cfi_def_cfa_offset 8
 467 0018 BD46     	 mov sp,r7
 468              	.LCFI19:
 469              	 .cfi_def_cfa_register 13
 470              	 
 471 001a 80BD     	 pop {r7,pc}
 472              	 .cfi_endproc
 473              	.LFE5:
 475              	 .text
 476              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 strtol.c
    {standard input}:20     .text._strto_l:00000000 $t
    {standard input}:25     .text._strto_l:00000000 _strto_l
    {standard input}:341    .text.strtol:00000000 $t
    {standard input}:346    .text.strtol:00000000 strtol
    {standard input}:387    .text.strtoul:00000000 $t
    {standard input}:392    .text.strtoul:00000000 strtoul
    {standard input}:433    .text.atoi:00000000 $t
    {standard input}:438    .text.atoi:00000000 atoi
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
isspace
tolower
