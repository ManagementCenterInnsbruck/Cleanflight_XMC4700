   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "time.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.timeConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	timeConfig:
  25              	.LFB527:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include "platform.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include "pg/pg.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // time difference, 32 bits always sufficient
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef int32_t timeDelta_t;
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // millisecond time
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint32_t timeMs_t ;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // microsecond time
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #ifdef USE_64BIT_TIME
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint64_t timeUs_t;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #define TIMEUS_MAX UINT64_MAX
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #else
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint32_t timeUs_t;
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #define TIMEUS_MAX UINT32_MAX
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #endif
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** static inline timeDelta_t cmpTimeUs(timeUs_t a, timeUs_t b) { return (timeDelta_t)(a - b); }
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #define FORMATTED_DATE_TIME_BUFSIZE 30
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #ifdef USE_RTC_TIME
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef struct timeConfig_s {
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****     int16_t tz_offsetMinutes; // Offset from UTC in minutes, might be positive or negative
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** } timeConfig_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** PG_DECLARE(timeConfig_t, timeConfig);
  27              	 .loc 1 53 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 53 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word timeConfig_System
  55              	 .cfi_endproc
  56              	.LFE527:
  58              	 .section .bss.started,"aw",%nobits
  59              	 .align 3
  62              	started:
  63 0000 00000000 	 .space 8
  63      00000000 
  64              	 .section .rodata.days,"a",%progbits
  65              	 .align 2
  68              	days:
  69 0000 0000     	 .short 0
  70 0002 1F00     	 .short 31
  71 0004 3C00     	 .short 60
  72 0006 5B00     	 .short 91
  73 0008 7900     	 .short 121
  74 000a 9800     	 .short 152
  75 000c B600     	 .short 182
  76 000e D500     	 .short 213
  77 0010 F400     	 .short 244
  78 0012 1201     	 .short 274
  79 0014 3101     	 .short 305
  80 0016 4F01     	 .short 335
  81 0018 6E01     	 .short 366
  82 001a 8D01     	 .short 397
  83 001c A901     	 .short 425
  84 001e C801     	 .short 456
  85 0020 E601     	 .short 486
  86 0022 0502     	 .short 517
  87 0024 2302     	 .short 547
  88 0026 4202     	 .short 578
  89 0028 6102     	 .short 609
  90 002a 7F02     	 .short 639
  91 002c 9E02     	 .short 670
  92 002e BC02     	 .short 700
  93 0030 DB02     	 .short 731
  94 0032 FA02     	 .short 762
  95 0034 1603     	 .short 790
  96 0036 3503     	 .short 821
  97 0038 5303     	 .short 851
  98 003a 7203     	 .short 882
  99 003c 9003     	 .short 912
 100 003e AF03     	 .short 943
 101 0040 CE03     	 .short 974
 102 0042 EC03     	 .short 1004
 103 0044 0B04     	 .short 1035
 104 0046 2904     	 .short 1065
 105 0048 4804     	 .short 1096
 106 004a 6704     	 .short 1127
 107 004c 8304     	 .short 1155
 108 004e A204     	 .short 1186
 109 0050 C004     	 .short 1216
 110 0052 DF04     	 .short 1247
 111 0054 FD04     	 .short 1277
 112 0056 1C05     	 .short 1308
 113 0058 3B05     	 .short 1339
 114 005a 5905     	 .short 1369
 115 005c 7805     	 .short 1400
 116 005e 9605     	 .short 1430
 117              	 .comm timeConfig_System,2,4
 118              	 .comm timeConfig_Copy,2,4
 119              	 .global timeConfig_Registry
 120              	 .section .pg_registry,"a",%progbits
 121              	 .align 2
 124              	timeConfig_Registry:
 125 0000 0E02     	 .short 526
 126 0002 0200     	 .short 2
 127 0004 00000000 	 .word timeConfig_System
 128 0008 00000000 	 .word timeConfig_Copy
 129 000c 00000000 	 .word 0
 130 0010 00000000 	 .word pgResetTemplate_timeConfig
 131              	 .global pgResetTemplate_timeConfig
 132              	 .section .pg_resetdata,"a",%progbits
 133              	 .align 1
 136              	pgResetTemplate_timeConfig:
 137 0000 0000     	 .space 2
 138              	 .section .text.dateTimeToRtcTime,"ax",%progbits
 139              	 .align 2
 140              	 .thumb
 141              	 .thumb_func
 143              	dateTimeToRtcTime:
 144              	.LFB529:
 145              	 .file 2 "../cleanflight/src/main/common/time.c"
   1:../cleanflight/src/main/common/time.c **** /*
   2:../cleanflight/src/main/common/time.c ****  * This file is part of INAV.
   3:../cleanflight/src/main/common/time.c ****  *
   4:../cleanflight/src/main/common/time.c ****  * This Source Code Form is subject to the terms of the Mozilla Public
   5:../cleanflight/src/main/common/time.c ****  * License, v. 2.0. If a copy of the MPL was not distributed with this file,
   6:../cleanflight/src/main/common/time.c ****  * You can obtain one at http://mozilla.org/MPL/2.0/.
   7:../cleanflight/src/main/common/time.c ****  *
   8:../cleanflight/src/main/common/time.c ****  * Alternatively, the contents of this file may be used under the terms
   9:../cleanflight/src/main/common/time.c ****  * of the GNU General Public License Version 3, as described below:
  10:../cleanflight/src/main/common/time.c ****  *
  11:../cleanflight/src/main/common/time.c ****  * This file is free software: you may copy, redistribute and/or modify
  12:../cleanflight/src/main/common/time.c ****  * it under the terms of the GNU General Public License as published by the
  13:../cleanflight/src/main/common/time.c ****  * Free Software Foundation, either version 3 of the License, or (at your
  14:../cleanflight/src/main/common/time.c ****  * option) any later version.
  15:../cleanflight/src/main/common/time.c ****  *
  16:../cleanflight/src/main/common/time.c ****  * This file is distributed in the hope that it will be useful, but
  17:../cleanflight/src/main/common/time.c ****  * WITHOUT ANY WARRANTY; without even the implied warranty of
  18:../cleanflight/src/main/common/time.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
  19:../cleanflight/src/main/common/time.c ****  * Public License for more details.
  20:../cleanflight/src/main/common/time.c ****  *
  21:../cleanflight/src/main/common/time.c ****  * You should have received a copy of the GNU General Public License
  22:../cleanflight/src/main/common/time.c ****  * along with this program. If not, see http://www.gnu.org/licenses/.
  23:../cleanflight/src/main/common/time.c ****  *
  24:../cleanflight/src/main/common/time.c ****  * @author Alberto Garcia Hierro <alberto@garciahierro.com>
  25:../cleanflight/src/main/common/time.c ****  */
  26:../cleanflight/src/main/common/time.c **** 
  27:../cleanflight/src/main/common/time.c **** #include <stdint.h>
  28:../cleanflight/src/main/common/time.c **** 
  29:../cleanflight/src/main/common/time.c **** #include "common/maths.h"
  30:../cleanflight/src/main/common/time.c **** #include "common/printf.h"
  31:../cleanflight/src/main/common/time.c **** #include "common/time.h"
  32:../cleanflight/src/main/common/time.c **** 
  33:../cleanflight/src/main/common/time.c **** #include "pg/pg_ids.h"
  34:../cleanflight/src/main/common/time.c **** 
  35:../cleanflight/src/main/common/time.c **** #include "drivers/time.h"
  36:../cleanflight/src/main/common/time.c **** 
  37:../cleanflight/src/main/common/time.c **** #ifdef USE_RTC_TIME
  38:../cleanflight/src/main/common/time.c **** 
  39:../cleanflight/src/main/common/time.c **** // For the "modulo 4" arithmetic to work, we need a leap base year
  40:../cleanflight/src/main/common/time.c **** #define REFERENCE_YEAR 2000
  41:../cleanflight/src/main/common/time.c **** // Offset (seconds) from the UNIX epoch (1970-01-01) to 2000-01-01
  42:../cleanflight/src/main/common/time.c **** #define EPOCH_2000_OFFSET 946684800
  43:../cleanflight/src/main/common/time.c **** 
  44:../cleanflight/src/main/common/time.c **** #define MILLIS_PER_SECOND 1000
  45:../cleanflight/src/main/common/time.c **** 
  46:../cleanflight/src/main/common/time.c **** // rtcTime_t when the system was started.
  47:../cleanflight/src/main/common/time.c **** // Calculated in rtcSet().
  48:../cleanflight/src/main/common/time.c **** static rtcTime_t started = 0;
  49:../cleanflight/src/main/common/time.c **** 
  50:../cleanflight/src/main/common/time.c **** static const uint16_t days[4][12] =
  51:../cleanflight/src/main/common/time.c **** {
  52:../cleanflight/src/main/common/time.c ****     {   0,  31,     60,     91,     121,    152,    182,    213,    244,    274,    305,    335},
  53:../cleanflight/src/main/common/time.c ****     { 366,  397,    425,    456,    486,    517,    547,    578,    609,    639,    670,    700},
  54:../cleanflight/src/main/common/time.c ****     { 731,  762,    790,    821,    851,    882,    912,    943,    974,    1004,   1035,   1065},
  55:../cleanflight/src/main/common/time.c ****     {1096,  1127,   1155,   1186,   1216,   1247,   1277,   1308,   1339,   1369,   1400,   1430},
  56:../cleanflight/src/main/common/time.c **** };
  57:../cleanflight/src/main/common/time.c **** 
  58:../cleanflight/src/main/common/time.c **** PG_REGISTER_WITH_RESET_TEMPLATE(timeConfig_t, timeConfig, PG_TIME_CONFIG, 0);
  59:../cleanflight/src/main/common/time.c **** 
  60:../cleanflight/src/main/common/time.c **** PG_RESET_TEMPLATE(timeConfig_t, timeConfig,
  61:../cleanflight/src/main/common/time.c ****     .tz_offsetMinutes = 0,
  62:../cleanflight/src/main/common/time.c **** );
  63:../cleanflight/src/main/common/time.c **** 
  64:../cleanflight/src/main/common/time.c **** static rtcTime_t dateTimeToRtcTime(dateTime_t *dt)
  65:../cleanflight/src/main/common/time.c **** {
 146              	 .loc 2 65 0
 147              	 .cfi_startproc
 148              	 
 149              	 
 150 0000 80B5     	 push {r7,lr}
 151              	.LCFI4:
 152              	 .cfi_def_cfa_offset 8
 153              	 .cfi_offset 7,-8
 154              	 .cfi_offset 14,-4
 155 0002 8AB0     	 sub sp,sp,#40
 156              	.LCFI5:
 157              	 .cfi_def_cfa_offset 48
 158 0004 00AF     	 add r7,sp,#0
 159              	.LCFI6:
 160              	 .cfi_def_cfa_register 7
 161 0006 7860     	 str r0,[r7,#4]
  66:../cleanflight/src/main/common/time.c ****     unsigned int second = dt->seconds;  // 0-59
 162              	 .loc 2 66 0
 163 0008 7B68     	 ldr r3,[r7,#4]
 164 000a 9B79     	 ldrb r3,[r3,#6]
 165 000c 7B62     	 str r3,[r7,#36]
  67:../cleanflight/src/main/common/time.c ****     unsigned int minute = dt->minutes;  // 0-59
 166              	 .loc 2 67 0
 167 000e 7B68     	 ldr r3,[r7,#4]
 168 0010 5B79     	 ldrb r3,[r3,#5]
 169 0012 3B62     	 str r3,[r7,#32]
  68:../cleanflight/src/main/common/time.c ****     unsigned int hour = dt->hours;      // 0-23
 170              	 .loc 2 68 0
 171 0014 7B68     	 ldr r3,[r7,#4]
 172 0016 1B79     	 ldrb r3,[r3,#4]
 173 0018 FB61     	 str r3,[r7,#28]
  69:../cleanflight/src/main/common/time.c ****     unsigned int day = dt->day - 1;     // 0-30
 174              	 .loc 2 69 0
 175 001a 7B68     	 ldr r3,[r7,#4]
 176 001c DB78     	 ldrb r3,[r3,#3]
 177 001e 013B     	 subs r3,r3,#1
 178 0020 BB61     	 str r3,[r7,#24]
  70:../cleanflight/src/main/common/time.c ****     unsigned int month = dt->month - 1; // 0-11
 179              	 .loc 2 70 0
 180 0022 7B68     	 ldr r3,[r7,#4]
 181 0024 9B78     	 ldrb r3,[r3,#2]
 182 0026 013B     	 subs r3,r3,#1
 183 0028 7B61     	 str r3,[r7,#20]
  71:../cleanflight/src/main/common/time.c ****     unsigned int year = dt->year - REFERENCE_YEAR; // 0-99
 184              	 .loc 2 71 0
 185 002a 7B68     	 ldr r3,[r7,#4]
 186 002c 1B88     	 ldrh r3,[r3]
 187 002e 9BB2     	 uxth r3,r3
 188 0030 A3F5FA63 	 sub r3,r3,#2000
 189 0034 3B61     	 str r3,[r7,#16]
  72:../cleanflight/src/main/common/time.c ****     int32_t unixTime = (((year / 4 * (365 * 4 + 1) + days[year % 4][month] + day) * 24 + hour) * 60
 190              	 .loc 2 72 0
 191 0036 3B69     	 ldr r3,[r7,#16]
 192 0038 9B08     	 lsrs r3,r3,#2
 193 003a 40F2B552 	 movw r2,#1461
 194 003e 02FB03F1 	 mul r1,r2,r3
 195 0042 3B69     	 ldr r3,[r7,#16]
 196 0044 03F00302 	 and r2,r3,#3
 197 0048 1948     	 ldr r0,.L7
 198 004a 1346     	 mov r3,r2
 199 004c 5B00     	 lsls r3,r3,#1
 200 004e 1344     	 add r3,r3,r2
 201 0050 9B00     	 lsls r3,r3,#2
 202 0052 7A69     	 ldr r2,[r7,#20]
 203 0054 1344     	 add r3,r3,r2
 204 0056 30F81330 	 ldrh r3,[r0,r3,lsl#1]
 205 005a CA18     	 adds r2,r1,r3
 206 005c BB69     	 ldr r3,[r7,#24]
 207 005e 1A44     	 add r2,r2,r3
 208 0060 1346     	 mov r3,r2
 209 0062 5B00     	 lsls r3,r3,#1
 210 0064 1344     	 add r3,r3,r2
 211 0066 DB00     	 lsls r3,r3,#3
 212 0068 1A46     	 mov r2,r3
 213 006a FB69     	 ldr r3,[r7,#28]
 214 006c 1A44     	 add r2,r2,r3
 215 006e 1346     	 mov r3,r2
 216 0070 1B01     	 lsls r3,r3,#4
 217 0072 9B1A     	 subs r3,r3,r2
 218 0074 9B00     	 lsls r3,r3,#2
 219 0076 1A46     	 mov r2,r3
 220 0078 3B6A     	 ldr r3,[r7,#32]
 221 007a 1A44     	 add r2,r2,r3
 222 007c 1346     	 mov r3,r2
 223 007e 1B01     	 lsls r3,r3,#4
 224 0080 9B1A     	 subs r3,r3,r2
 225 0082 9B00     	 lsls r3,r3,#2
 226 0084 1A46     	 mov r2,r3
 227 0086 7B6A     	 ldr r3,[r7,#36]
 228 0088 1A44     	 add r2,r2,r3
 229 008a 0A4B     	 ldr r3,.L7+4
 230 008c 1344     	 add r3,r3,r2
 231 008e FB60     	 str r3,[r7,#12]
  73:../cleanflight/src/main/common/time.c ****     return rtcTimeMake(unixTime, dt->millis);
 232              	 .loc 2 73 0
 233 0090 7B68     	 ldr r3,[r7,#4]
 234 0092 B3F80730 	 ldrh r3,[r3,#7]
 235 0096 9BB2     	 uxth r3,r3
 236 0098 F868     	 ldr r0,[r7,#12]
 237 009a 1946     	 mov r1,r3
 238 009c FFF7FEFF 	 bl rtcTimeMake
 239 00a0 0246     	 mov r2,r0
 240 00a2 0B46     	 mov r3,r1
  74:../cleanflight/src/main/common/time.c **** }
 241              	 .loc 2 74 0
 242 00a4 1046     	 mov r0,r2
 243 00a6 1946     	 mov r1,r3
 244 00a8 2837     	 adds r7,r7,#40
 245              	.LCFI7:
 246              	 .cfi_def_cfa_offset 8
 247 00aa BD46     	 mov sp,r7
 248              	.LCFI8:
 249              	 .cfi_def_cfa_register 13
 250              	 
 251 00ac 80BD     	 pop {r7,pc}
 252              	.L8:
 253 00ae 00BF     	 .align 2
 254              	.L7:
 255 00b0 00000000 	 .word days
 256 00b4 80436D38 	 .word 946684800
 257              	 .cfi_endproc
 258              	.LFE529:
 260              	 .global __aeabi_ldivmod
 261              	 .section .text.rtcTimeToDateTime,"ax",%progbits
 262              	 .align 2
 263              	 .thumb
 264              	 .thumb_func
 266              	rtcTimeToDateTime:
 267              	.LFB530:
  75:../cleanflight/src/main/common/time.c **** 
  76:../cleanflight/src/main/common/time.c **** static void rtcTimeToDateTime(dateTime_t *dt, rtcTime_t t)
  77:../cleanflight/src/main/common/time.c **** {
 268              	 .loc 2 77 0
 269              	 .cfi_startproc
 270              	 
 271              	 
 272 0000 80B5     	 push {r7,lr}
 273              	.LCFI9:
 274              	 .cfi_def_cfa_offset 8
 275              	 .cfi_offset 7,-8
 276              	 .cfi_offset 14,-4
 277 0002 88B0     	 sub sp,sp,#32
 278              	.LCFI10:
 279              	 .cfi_def_cfa_offset 40
 280 0004 00AF     	 add r7,sp,#0
 281              	.LCFI11:
 282              	 .cfi_def_cfa_register 7
 283 0006 F860     	 str r0,[r7,#12]
 284 0008 C7E90023 	 strd r2,[r7]
  78:../cleanflight/src/main/common/time.c ****     int32_t unixTime = t / MILLIS_PER_SECOND - EPOCH_2000_OFFSET;
 285              	 .loc 2 78 0
 286 000c D7E90023 	 ldrd r2,[r7]
 287 0010 1046     	 mov r0,r2
 288 0012 1946     	 mov r1,r3
 289 0014 4FF47A72 	 mov r2,#1000
 290 0018 4FF00003 	 mov r3,#0
 291 001c FFF7FEFF 	 bl __aeabi_ldivmod
 292 0020 0246     	 mov r2,r0
 293 0022 0B46     	 mov r3,r1
 294 0024 624B     	 ldr r3,.L18
 295 0026 1344     	 add r3,r3,r2
 296 0028 7B61     	 str r3,[r7,#20]
  79:../cleanflight/src/main/common/time.c ****     dt->seconds = unixTime % 60;
 297              	 .loc 2 79 0
 298 002a 7A69     	 ldr r2,[r7,#20]
 299 002c 614B     	 ldr r3,.L18+4
 300 002e 82FB0301 	 smull r0,r1,r2,r3
 301 0032 5318     	 adds r3,r2,r1
 302 0034 5911     	 asrs r1,r3,#5
 303 0036 D317     	 asrs r3,r2,#31
 304 0038 C91A     	 subs r1,r1,r3
 305 003a 0B46     	 mov r3,r1
 306 003c 1B01     	 lsls r3,r3,#4
 307 003e 5B1A     	 subs r3,r3,r1
 308 0040 9B00     	 lsls r3,r3,#2
 309 0042 D11A     	 subs r1,r2,r3
 310 0044 CAB2     	 uxtb r2,r1
 311 0046 FB68     	 ldr r3,[r7,#12]
 312 0048 9A71     	 strb r2,[r3,#6]
  80:../cleanflight/src/main/common/time.c ****     unixTime /= 60;
 313              	 .loc 2 80 0
 314 004a 7B69     	 ldr r3,[r7,#20]
 315 004c 594A     	 ldr r2,.L18+4
 316 004e 82FB0312 	 smull r1,r2,r2,r3
 317 0052 1A44     	 add r2,r2,r3
 318 0054 5211     	 asrs r2,r2,#5
 319 0056 DB17     	 asrs r3,r3,#31
 320 0058 D31A     	 subs r3,r2,r3
 321 005a 7B61     	 str r3,[r7,#20]
  81:../cleanflight/src/main/common/time.c ****     dt->minutes = unixTime % 60;
 322              	 .loc 2 81 0
 323 005c 7A69     	 ldr r2,[r7,#20]
 324 005e 554B     	 ldr r3,.L18+4
 325 0060 83FB0213 	 smull r1,r3,r3,r2
 326 0064 1344     	 add r3,r3,r2
 327 0066 5911     	 asrs r1,r3,#5
 328 0068 D317     	 asrs r3,r2,#31
 329 006a C91A     	 subs r1,r1,r3
 330 006c 0B46     	 mov r3,r1
 331 006e 1B01     	 lsls r3,r3,#4
 332 0070 5B1A     	 subs r3,r3,r1
 333 0072 9B00     	 lsls r3,r3,#2
 334 0074 D11A     	 subs r1,r2,r3
 335 0076 CAB2     	 uxtb r2,r1
 336 0078 FB68     	 ldr r3,[r7,#12]
 337 007a 5A71     	 strb r2,[r3,#5]
  82:../cleanflight/src/main/common/time.c ****     unixTime /= 60;
 338              	 .loc 2 82 0
 339 007c 7B69     	 ldr r3,[r7,#20]
 340 007e 4D4A     	 ldr r2,.L18+4
 341 0080 82FB0312 	 smull r1,r2,r2,r3
 342 0084 1A44     	 add r2,r2,r3
 343 0086 5211     	 asrs r2,r2,#5
 344 0088 DB17     	 asrs r3,r3,#31
 345 008a D31A     	 subs r3,r2,r3
 346 008c 7B61     	 str r3,[r7,#20]
  83:../cleanflight/src/main/common/time.c ****     dt->hours = unixTime % 24;
 347              	 .loc 2 83 0
 348 008e 7A69     	 ldr r2,[r7,#20]
 349 0090 494B     	 ldr r3,.L18+8
 350 0092 83FB0213 	 smull r1,r3,r3,r2
 351 0096 9910     	 asrs r1,r3,#2
 352 0098 D317     	 asrs r3,r2,#31
 353 009a C91A     	 subs r1,r1,r3
 354 009c 0B46     	 mov r3,r1
 355 009e 5B00     	 lsls r3,r3,#1
 356 00a0 0B44     	 add r3,r3,r1
 357 00a2 DB00     	 lsls r3,r3,#3
 358 00a4 D11A     	 subs r1,r2,r3
 359 00a6 CAB2     	 uxtb r2,r1
 360 00a8 FB68     	 ldr r3,[r7,#12]
 361 00aa 1A71     	 strb r2,[r3,#4]
  84:../cleanflight/src/main/common/time.c ****     unixTime /= 24;
 362              	 .loc 2 84 0
 363 00ac 7B69     	 ldr r3,[r7,#20]
 364 00ae 424A     	 ldr r2,.L18+8
 365 00b0 82FB0312 	 smull r1,r2,r2,r3
 366 00b4 9210     	 asrs r2,r2,#2
 367 00b6 DB17     	 asrs r3,r3,#31
 368 00b8 D31A     	 subs r3,r2,r3
 369 00ba 7B61     	 str r3,[r7,#20]
  85:../cleanflight/src/main/common/time.c **** 
  86:../cleanflight/src/main/common/time.c ****     unsigned int years = unixTime / (365 * 4 + 1) * 4;
 370              	 .loc 2 86 0
 371 00bc 7B69     	 ldr r3,[r7,#20]
 372 00be 3F4A     	 ldr r2,.L18+12
 373 00c0 82FB0312 	 smull r1,r2,r2,r3
 374 00c4 D211     	 asrs r2,r2,#7
 375 00c6 DB17     	 asrs r3,r3,#31
 376 00c8 D31A     	 subs r3,r2,r3
 377 00ca 9B00     	 lsls r3,r3,#2
 378 00cc 3B61     	 str r3,[r7,#16]
  87:../cleanflight/src/main/common/time.c ****     unixTime %= 365 * 4 + 1;
 379              	 .loc 2 87 0
 380 00ce 7B69     	 ldr r3,[r7,#20]
 381 00d0 3A4A     	 ldr r2,.L18+12
 382 00d2 82FB0312 	 smull r1,r2,r2,r3
 383 00d6 D111     	 asrs r1,r2,#7
 384 00d8 DA17     	 asrs r2,r3,#31
 385 00da 8A1A     	 subs r2,r1,r2
 386 00dc 40F2B551 	 movw r1,#1461
 387 00e0 01FB02F2 	 mul r2,r1,r2
 388 00e4 9B1A     	 subs r3,r3,r2
 389 00e6 7B61     	 str r3,[r7,#20]
  88:../cleanflight/src/main/common/time.c **** 
  89:../cleanflight/src/main/common/time.c ****     unsigned int year;
  90:../cleanflight/src/main/common/time.c ****     for (year = 3; year > 0; year--) {
 390              	 .loc 2 90 0
 391 00e8 0323     	 movs r3,#3
 392 00ea FB61     	 str r3,[r7,#28]
 393 00ec 0FE0     	 b .L10
 394              	.L13:
  91:../cleanflight/src/main/common/time.c ****         if (unixTime >= days[year][0]) {
 395              	 .loc 2 91 0
 396 00ee 3449     	 ldr r1,.L18+16
 397 00f0 FA69     	 ldr r2,[r7,#28]
 398 00f2 1346     	 mov r3,r2
 399 00f4 5B00     	 lsls r3,r3,#1
 400 00f6 1344     	 add r3,r3,r2
 401 00f8 DB00     	 lsls r3,r3,#3
 402 00fa 0B44     	 add r3,r3,r1
 403 00fc 1B88     	 ldrh r3,[r3]
 404 00fe 1A46     	 mov r2,r3
 405 0100 7B69     	 ldr r3,[r7,#20]
 406 0102 9A42     	 cmp r2,r3
 407 0104 00DC     	 bgt .L11
  92:../cleanflight/src/main/common/time.c ****             break;
 408              	 .loc 2 92 0
 409 0106 05E0     	 b .L12
 410              	.L11:
  90:../cleanflight/src/main/common/time.c ****         if (unixTime >= days[year][0]) {
 411              	 .loc 2 90 0 discriminator 2
 412 0108 FB69     	 ldr r3,[r7,#28]
 413 010a 013B     	 subs r3,r3,#1
 414 010c FB61     	 str r3,[r7,#28]
 415              	.L10:
  90:../cleanflight/src/main/common/time.c ****         if (unixTime >= days[year][0]) {
 416              	 .loc 2 90 0 is_stmt 0 discriminator 1
 417 010e FB69     	 ldr r3,[r7,#28]
 418 0110 002B     	 cmp r3,#0
 419 0112 ECD1     	 bne .L13
 420              	.L12:
  93:../cleanflight/src/main/common/time.c ****         }
  94:../cleanflight/src/main/common/time.c ****     }
  95:../cleanflight/src/main/common/time.c **** 
  96:../cleanflight/src/main/common/time.c ****     unsigned int month;
  97:../cleanflight/src/main/common/time.c ****     for (month = 11; month > 0; month--) {
 421              	 .loc 2 97 0 is_stmt 1
 422 0114 0B23     	 movs r3,#11
 423 0116 BB61     	 str r3,[r7,#24]
 424 0118 11E0     	 b .L14
 425              	.L17:
  98:../cleanflight/src/main/common/time.c ****         if (unixTime >= days[year][month]) {
 426              	 .loc 2 98 0
 427 011a 2949     	 ldr r1,.L18+16
 428 011c FA69     	 ldr r2,[r7,#28]
 429 011e 1346     	 mov r3,r2
 430 0120 5B00     	 lsls r3,r3,#1
 431 0122 1344     	 add r3,r3,r2
 432 0124 9B00     	 lsls r3,r3,#2
 433 0126 BA69     	 ldr r2,[r7,#24]
 434 0128 1344     	 add r3,r3,r2
 435 012a 31F81330 	 ldrh r3,[r1,r3,lsl#1]
 436 012e 1A46     	 mov r2,r3
 437 0130 7B69     	 ldr r3,[r7,#20]
 438 0132 9A42     	 cmp r2,r3
 439 0134 00DC     	 bgt .L15
  99:../cleanflight/src/main/common/time.c ****             break;
 440              	 .loc 2 99 0
 441 0136 05E0     	 b .L16
 442              	.L15:
  97:../cleanflight/src/main/common/time.c ****         if (unixTime >= days[year][month]) {
 443              	 .loc 2 97 0 discriminator 2
 444 0138 BB69     	 ldr r3,[r7,#24]
 445 013a 013B     	 subs r3,r3,#1
 446 013c BB61     	 str r3,[r7,#24]
 447              	.L14:
  97:../cleanflight/src/main/common/time.c ****         if (unixTime >= days[year][month]) {
 448              	 .loc 2 97 0 is_stmt 0 discriminator 1
 449 013e BB69     	 ldr r3,[r7,#24]
 450 0140 002B     	 cmp r3,#0
 451 0142 EAD1     	 bne .L17
 452              	.L16:
 100:../cleanflight/src/main/common/time.c ****         }
 101:../cleanflight/src/main/common/time.c ****     }
 102:../cleanflight/src/main/common/time.c **** 
 103:../cleanflight/src/main/common/time.c ****     dt->year = years + year + REFERENCE_YEAR;
 453              	 .loc 2 103 0 is_stmt 1
 454 0144 3B69     	 ldr r3,[r7,#16]
 455 0146 9AB2     	 uxth r2,r3
 456 0148 FB69     	 ldr r3,[r7,#28]
 457 014a 9BB2     	 uxth r3,r3
 458 014c 1344     	 add r3,r3,r2
 459 014e 9BB2     	 uxth r3,r3
 460 0150 03F5FA63 	 add r3,r3,#2000
 461 0154 9AB2     	 uxth r2,r3
 462 0156 FB68     	 ldr r3,[r7,#12]
 463 0158 1A80     	 strh r2,[r3]
 104:../cleanflight/src/main/common/time.c ****     dt->month = month + 1;
 464              	 .loc 2 104 0
 465 015a BB69     	 ldr r3,[r7,#24]
 466 015c DBB2     	 uxtb r3,r3
 467 015e 0133     	 adds r3,r3,#1
 468 0160 DAB2     	 uxtb r2,r3
 469 0162 FB68     	 ldr r3,[r7,#12]
 470 0164 9A70     	 strb r2,[r3,#2]
 105:../cleanflight/src/main/common/time.c ****     dt->day = unixTime - days[year][month] + 1;
 471              	 .loc 2 105 0
 472 0166 7B69     	 ldr r3,[r7,#20]
 473 0168 D9B2     	 uxtb r1,r3
 474 016a 1548     	 ldr r0,.L18+16
 475 016c FA69     	 ldr r2,[r7,#28]
 476 016e 1346     	 mov r3,r2
 477 0170 5B00     	 lsls r3,r3,#1
 478 0172 1344     	 add r3,r3,r2
 479 0174 9B00     	 lsls r3,r3,#2
 480 0176 BA69     	 ldr r2,[r7,#24]
 481 0178 1344     	 add r3,r3,r2
 482 017a 30F81330 	 ldrh r3,[r0,r3,lsl#1]
 483 017e DBB2     	 uxtb r3,r3
 484 0180 CB1A     	 subs r3,r1,r3
 485 0182 DBB2     	 uxtb r3,r3
 486 0184 0133     	 adds r3,r3,#1
 487 0186 DAB2     	 uxtb r2,r3
 488 0188 FB68     	 ldr r3,[r7,#12]
 489 018a DA70     	 strb r2,[r3,#3]
 106:../cleanflight/src/main/common/time.c ****     dt->millis = t % MILLIS_PER_SECOND;
 490              	 .loc 2 106 0
 491 018c D7E90023 	 ldrd r2,[r7]
 492 0190 1046     	 mov r0,r2
 493 0192 1946     	 mov r1,r3
 494 0194 4FF47A72 	 mov r2,#1000
 495 0198 4FF00003 	 mov r3,#0
 496 019c FFF7FEFF 	 bl __aeabi_ldivmod
 497 01a0 92B2     	 uxth r2,r2
 498 01a2 FB68     	 ldr r3,[r7,#12]
 499 01a4 A3F80720 	 strh r2,[r3,#7]
 107:../cleanflight/src/main/common/time.c **** }
 500              	 .loc 2 107 0
 501 01a8 2037     	 adds r7,r7,#32
 502              	.LCFI12:
 503              	 .cfi_def_cfa_offset 8
 504 01aa BD46     	 mov sp,r7
 505              	.LCFI13:
 506              	 .cfi_def_cfa_register 13
 507              	 
 508 01ac 80BD     	 pop {r7,pc}
 509              	.L19:
 510 01ae 00BF     	 .align 2
 511              	.L18:
 512 01b0 80BC92C7 	 .word -946684800
 513 01b4 89888888 	 .word -2004318071
 514 01b8 ABAAAA2A 	 .word 715827883
 515 01bc 73B06D16 	 .word 376287347
 516 01c0 00000000 	 .word days
 517              	 .cfi_endproc
 518              	.LFE530:
 520              	 .section .text.rtcGetDefaultDateTime,"ax",%progbits
 521              	 .align 2
 522              	 .thumb
 523              	 .thumb_func
 525              	rtcGetDefaultDateTime:
 526              	.LFB531:
 108:../cleanflight/src/main/common/time.c **** 
 109:../cleanflight/src/main/common/time.c **** static void rtcGetDefaultDateTime(dateTime_t *dateTime)
 110:../cleanflight/src/main/common/time.c **** {
 527              	 .loc 2 110 0
 528              	 .cfi_startproc
 529              	 
 530              	 
 531              	 
 532 0000 80B4     	 push {r7}
 533              	.LCFI14:
 534              	 .cfi_def_cfa_offset 4
 535              	 .cfi_offset 7,-4
 536 0002 83B0     	 sub sp,sp,#12
 537              	.LCFI15:
 538              	 .cfi_def_cfa_offset 16
 539 0004 00AF     	 add r7,sp,#0
 540              	.LCFI16:
 541              	 .cfi_def_cfa_register 7
 542 0006 7860     	 str r0,[r7,#4]
 111:../cleanflight/src/main/common/time.c ****     dateTime->year = 0;
 543              	 .loc 2 111 0
 544 0008 7B68     	 ldr r3,[r7,#4]
 545 000a 0022     	 movs r2,#0
 546 000c 1A70     	 strb r2,[r3]
 547 000e 0022     	 movs r2,#0
 548 0010 5A70     	 strb r2,[r3,#1]
 112:../cleanflight/src/main/common/time.c ****     dateTime->month = 1;
 549              	 .loc 2 112 0
 550 0012 7B68     	 ldr r3,[r7,#4]
 551 0014 0122     	 movs r2,#1
 552 0016 9A70     	 strb r2,[r3,#2]
 113:../cleanflight/src/main/common/time.c ****     dateTime->day = 1;
 553              	 .loc 2 113 0
 554 0018 7B68     	 ldr r3,[r7,#4]
 555 001a 0122     	 movs r2,#1
 556 001c DA70     	 strb r2,[r3,#3]
 114:../cleanflight/src/main/common/time.c ****     dateTime->hours = 0;
 557              	 .loc 2 114 0
 558 001e 7B68     	 ldr r3,[r7,#4]
 559 0020 0022     	 movs r2,#0
 560 0022 1A71     	 strb r2,[r3,#4]
 115:../cleanflight/src/main/common/time.c ****     dateTime->minutes = 0;
 561              	 .loc 2 115 0
 562 0024 7B68     	 ldr r3,[r7,#4]
 563 0026 0022     	 movs r2,#0
 564 0028 5A71     	 strb r2,[r3,#5]
 116:../cleanflight/src/main/common/time.c ****     dateTime->seconds = 0;
 565              	 .loc 2 116 0
 566 002a 7B68     	 ldr r3,[r7,#4]
 567 002c 0022     	 movs r2,#0
 568 002e 9A71     	 strb r2,[r3,#6]
 117:../cleanflight/src/main/common/time.c ****     dateTime->millis = 0;
 569              	 .loc 2 117 0
 570 0030 7B68     	 ldr r3,[r7,#4]
 571 0032 0022     	 movs r2,#0
 572 0034 DA71     	 strb r2,[r3,#7]
 573 0036 0022     	 movs r2,#0
 574 0038 1A72     	 strb r2,[r3,#8]
 118:../cleanflight/src/main/common/time.c **** }
 575              	 .loc 2 118 0
 576 003a 0C37     	 adds r7,r7,#12
 577              	.LCFI17:
 578              	 .cfi_def_cfa_offset 4
 579 003c BD46     	 mov sp,r7
 580              	.LCFI18:
 581              	 .cfi_def_cfa_register 13
 582              	 
 583 003e 5DF8047B 	 ldr r7,[sp],#4
 584              	.LCFI19:
 585              	 .cfi_restore 7
 586              	 .cfi_def_cfa_offset 0
 587 0042 7047     	 bx lr
 588              	 .cfi_endproc
 589              	.LFE531:
 591              	 .section .text.rtcIsDateTimeValid,"ax",%progbits
 592              	 .align 2
 593              	 .thumb
 594              	 .thumb_func
 596              	rtcIsDateTimeValid:
 597              	.LFB532:
 119:../cleanflight/src/main/common/time.c **** 
 120:../cleanflight/src/main/common/time.c **** static bool rtcIsDateTimeValid(dateTime_t *dateTime)
 121:../cleanflight/src/main/common/time.c **** {
 598              	 .loc 2 121 0
 599              	 .cfi_startproc
 600              	 
 601              	 
 602              	 
 603 0000 80B4     	 push {r7}
 604              	.LCFI20:
 605              	 .cfi_def_cfa_offset 4
 606              	 .cfi_offset 7,-4
 607 0002 83B0     	 sub sp,sp,#12
 608              	.LCFI21:
 609              	 .cfi_def_cfa_offset 16
 610 0004 00AF     	 add r7,sp,#0
 611              	.LCFI22:
 612              	 .cfi_def_cfa_register 7
 613 0006 7860     	 str r0,[r7,#4]
 122:../cleanflight/src/main/common/time.c ****     return (dateTime->year >= REFERENCE_YEAR) &&
 614              	 .loc 2 122 0
 615 0008 7B68     	 ldr r3,[r7,#4]
 616 000a 1B88     	 ldrh r3,[r3]
 617 000c 9BB2     	 uxth r3,r3
 123:../cleanflight/src/main/common/time.c ****            (dateTime->month >= 1 && dateTime->month <= 12) &&
 124:../cleanflight/src/main/common/time.c ****            (dateTime->day >= 1 && dateTime->day <= 31) &&
 125:../cleanflight/src/main/common/time.c ****            (dateTime->hours <= 23) &&
 126:../cleanflight/src/main/common/time.c ****            (dateTime->minutes <= 59) &&
 127:../cleanflight/src/main/common/time.c ****            (dateTime->seconds <= 59) &&
 618              	 .loc 2 127 0
 619 000e B3F5FA6F 	 cmp r3,#2000
 620 0012 24D3     	 bcc .L22
 123:../cleanflight/src/main/common/time.c ****            (dateTime->month >= 1 && dateTime->month <= 12) &&
 621              	 .loc 2 123 0
 622 0014 7B68     	 ldr r3,[r7,#4]
 623 0016 9B78     	 ldrb r3,[r3,#2]
 122:../cleanflight/src/main/common/time.c ****     return (dateTime->year >= REFERENCE_YEAR) &&
 624              	 .loc 2 122 0
 625 0018 002B     	 cmp r3,#0
 626 001a 20D0     	 beq .L22
 123:../cleanflight/src/main/common/time.c ****            (dateTime->month >= 1 && dateTime->month <= 12) &&
 627              	 .loc 2 123 0
 628 001c 7B68     	 ldr r3,[r7,#4]
 629 001e 9B78     	 ldrb r3,[r3,#2]
 630 0020 0C2B     	 cmp r3,#12
 631 0022 1CD8     	 bhi .L22
 124:../cleanflight/src/main/common/time.c ****            (dateTime->hours <= 23) &&
 632              	 .loc 2 124 0 discriminator 1
 633 0024 7B68     	 ldr r3,[r7,#4]
 634 0026 DB78     	 ldrb r3,[r3,#3]
 123:../cleanflight/src/main/common/time.c ****            (dateTime->month >= 1 && dateTime->month <= 12) &&
 635              	 .loc 2 123 0 discriminator 1
 636 0028 002B     	 cmp r3,#0
 637 002a 18D0     	 beq .L22
 124:../cleanflight/src/main/common/time.c ****            (dateTime->hours <= 23) &&
 638              	 .loc 2 124 0
 639 002c 7B68     	 ldr r3,[r7,#4]
 640 002e DB78     	 ldrb r3,[r3,#3]
 641 0030 1F2B     	 cmp r3,#31
 642 0032 14D8     	 bhi .L22
 125:../cleanflight/src/main/common/time.c ****            (dateTime->minutes <= 59) &&
 643              	 .loc 2 125 0 discriminator 1
 644 0034 7B68     	 ldr r3,[r7,#4]
 645 0036 1B79     	 ldrb r3,[r3,#4]
 124:../cleanflight/src/main/common/time.c ****            (dateTime->hours <= 23) &&
 646              	 .loc 2 124 0 discriminator 1
 647 0038 172B     	 cmp r3,#23
 648 003a 10D8     	 bhi .L22
 126:../cleanflight/src/main/common/time.c ****            (dateTime->seconds <= 59) &&
 649              	 .loc 2 126 0
 650 003c 7B68     	 ldr r3,[r7,#4]
 651 003e 5B79     	 ldrb r3,[r3,#5]
 125:../cleanflight/src/main/common/time.c ****            (dateTime->minutes <= 59) &&
 652              	 .loc 2 125 0
 653 0040 3B2B     	 cmp r3,#59
 654 0042 0CD8     	 bhi .L22
 655              	 .loc 2 127 0
 656 0044 7B68     	 ldr r3,[r7,#4]
 657 0046 9B79     	 ldrb r3,[r3,#6]
 126:../cleanflight/src/main/common/time.c ****            (dateTime->seconds <= 59) &&
 658              	 .loc 2 126 0
 659 0048 3B2B     	 cmp r3,#59
 660 004a 08D8     	 bhi .L22
 128:../cleanflight/src/main/common/time.c ****            (dateTime->millis <= 999);
 661              	 .loc 2 128 0 discriminator 3
 662 004c 7B68     	 ldr r3,[r7,#4]
 663 004e B3F80730 	 ldrh r3,[r3,#7]
 664 0052 9BB2     	 uxth r3,r3
 127:../cleanflight/src/main/common/time.c ****            (dateTime->millis <= 999);
 665              	 .loc 2 127 0 discriminator 3
 666 0054 B3F57A7F 	 cmp r3,#1000
 667 0058 01D2     	 bcs .L22
 127:../cleanflight/src/main/common/time.c ****            (dateTime->millis <= 999);
 668              	 .loc 2 127 0 is_stmt 0 discriminator 2
 669 005a 0123     	 movs r3,#1
 670 005c 00E0     	 b .L23
 671              	.L22:
 127:../cleanflight/src/main/common/time.c ****            (dateTime->millis <= 999);
 672              	 .loc 2 127 0 discriminator 1
 673 005e 0023     	 movs r3,#0
 674              	.L23:
 122:../cleanflight/src/main/common/time.c ****            (dateTime->month >= 1 && dateTime->month <= 12) &&
 675              	 .loc 2 122 0 is_stmt 1
 676 0060 03F00103 	 and r3,r3,#1
 677 0064 DBB2     	 uxtb r3,r3
 129:../cleanflight/src/main/common/time.c **** }
 678              	 .loc 2 129 0
 679 0066 1846     	 mov r0,r3
 680 0068 0C37     	 adds r7,r7,#12
 681              	.LCFI23:
 682              	 .cfi_def_cfa_offset 4
 683 006a BD46     	 mov sp,r7
 684              	.LCFI24:
 685              	 .cfi_def_cfa_register 13
 686              	 
 687 006c 5DF8047B 	 ldr r7,[sp],#4
 688              	.LCFI25:
 689              	 .cfi_restore 7
 690              	 .cfi_def_cfa_offset 0
 691 0070 7047     	 bx lr
 692              	 .cfi_endproc
 693              	.LFE532:
 695 0072 00BF     	 .section .text.dateTimeWithOffset,"ax",%progbits
 696              	 .align 2
 697              	 .thumb
 698              	 .thumb_func
 700              	dateTimeWithOffset:
 701              	.LFB533:
 130:../cleanflight/src/main/common/time.c **** 
 131:../cleanflight/src/main/common/time.c **** static void dateTimeWithOffset(dateTime_t *dateTimeOffset, dateTime_t *dateTimeInitial, int16_t min
 132:../cleanflight/src/main/common/time.c **** {
 702              	 .loc 2 132 0
 703              	 .cfi_startproc
 704              	 
 705              	 
 706 0000 90B5     	 push {r4,r7,lr}
 707              	.LCFI26:
 708              	 .cfi_def_cfa_offset 12
 709              	 .cfi_offset 4,-12
 710              	 .cfi_offset 7,-8
 711              	 .cfi_offset 14,-4
 712 0002 89B0     	 sub sp,sp,#36
 713              	.LCFI27:
 714              	 .cfi_def_cfa_offset 48
 715 0004 00AF     	 add r7,sp,#0
 716              	.LCFI28:
 717              	 .cfi_def_cfa_register 7
 718 0006 F860     	 str r0,[r7,#12]
 719 0008 B960     	 str r1,[r7,#8]
 720 000a 1346     	 mov r3,r2
 721 000c FB80     	 strh r3,[r7,#6]
 133:../cleanflight/src/main/common/time.c ****     rtcTime_t initialTime = dateTimeToRtcTime(dateTimeInitial);
 722              	 .loc 2 133 0
 723 000e B868     	 ldr r0,[r7,#8]
 724 0010 FFF7FEFF 	 bl dateTimeToRtcTime
 725 0014 0246     	 mov r2,r0
 726 0016 0B46     	 mov r3,r1
 727 0018 C7E90423 	 strd r2,[r7,#16]
 134:../cleanflight/src/main/common/time.c ****     rtcTime_t offsetTime = rtcTimeMake(rtcTimeGetSeconds(&initialTime) + minutes * 60, rtcTimeGetMi
 728              	 .loc 2 134 0
 729 001c 07F11003 	 add r3,r7,#16
 730 0020 1846     	 mov r0,r3
 731 0022 FFF7FEFF 	 bl rtcTimeGetSeconds
 732 0026 0146     	 mov r1,r0
 733 0028 B7F90620 	 ldrsh r2,[r7,#6]
 734 002c 1346     	 mov r3,r2
 735 002e 1B01     	 lsls r3,r3,#4
 736 0030 9B1A     	 subs r3,r3,r2
 737 0032 9B00     	 lsls r3,r3,#2
 738 0034 CC18     	 adds r4,r1,r3
 739 0036 07F11003 	 add r3,r7,#16
 740 003a 1846     	 mov r0,r3
 741 003c FFF7FEFF 	 bl rtcTimeGetMillis
 742 0040 0346     	 mov r3,r0
 743 0042 2046     	 mov r0,r4
 744 0044 1946     	 mov r1,r3
 745 0046 FFF7FEFF 	 bl rtcTimeMake
 746 004a C7E90601 	 strd r0,[r7,#24]
 135:../cleanflight/src/main/common/time.c ****     rtcTimeToDateTime(dateTimeOffset, offsetTime);
 747              	 .loc 2 135 0
 748 004e F868     	 ldr r0,[r7,#12]
 749 0050 D7E90623 	 ldrd r2,[r7,#24]
 750 0054 FFF7FEFF 	 bl rtcTimeToDateTime
 136:../cleanflight/src/main/common/time.c **** }
 751              	 .loc 2 136 0
 752 0058 2437     	 adds r7,r7,#36
 753              	.LCFI29:
 754              	 .cfi_def_cfa_offset 12
 755 005a BD46     	 mov sp,r7
 756              	.LCFI30:
 757              	 .cfi_def_cfa_register 13
 758              	 
 759 005c 90BD     	 pop {r4,r7,pc}
 760              	 .cfi_endproc
 761              	.LFE533:
 763 005e 00BF     	 .section .rodata
 764              	 .align 2
 765              	.LC0:
 766 0000 25303475 	 .ascii "%04u-%02u-%02u %02u:%02u:%02u\000"
 766      2D253032 
 766      752D2530 
 766      32752025 
 766      3032753A 
 767 001e 0000     	 .align 2
 768              	.LC1:
 769 0020 25303475 	 .ascii "%04u-%02u-%02uT%02u:%02u:%02u.%03u%c%02d:%02d\000"
 769      2D253032 
 769      752D2530 
 769      32755425 
 769      3032753A 
 770 004e 0000     	 .section .text.dateTimeFormat,"ax",%progbits
 771              	 .align 2
 772              	 .thumb
 773              	 .thumb_func
 775              	dateTimeFormat:
 776              	.LFB534:
 137:../cleanflight/src/main/common/time.c **** 
 138:../cleanflight/src/main/common/time.c **** static bool dateTimeFormat(char *buf, dateTime_t *dateTime, int16_t offsetMinutes, bool shortVersio
 139:../cleanflight/src/main/common/time.c **** {
 777              	 .loc 2 139 0
 778              	 .cfi_startproc
 779              	 
 780              	 
 781 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 782              	.LCFI31:
 783              	 .cfi_def_cfa_offset 20
 784              	 .cfi_offset 4,-20
 785              	 .cfi_offset 5,-16
 786              	 .cfi_offset 6,-12
 787              	 .cfi_offset 7,-8
 788              	 .cfi_offset 14,-4
 789 0002 95B0     	 sub sp,sp,#84
 790              	.LCFI32:
 791              	 .cfi_def_cfa_offset 104
 792 0004 08AF     	 add r7,sp,#32
 793              	.LCFI33:
 794              	 .cfi_def_cfa 7,72
 795 0006 F860     	 str r0,[r7,#12]
 796 0008 B960     	 str r1,[r7,#8]
 797 000a 1146     	 mov r1,r2
 798 000c 1A46     	 mov r2,r3
 799 000e 0B46     	 mov r3,r1
 800 0010 FB80     	 strh r3,[r7,#6]
 801 0012 1346     	 mov r3,r2
 802 0014 7B71     	 strb r3,[r7,#5]
 140:../cleanflight/src/main/common/time.c ****     dateTime_t local;
 141:../cleanflight/src/main/common/time.c **** 
 142:../cleanflight/src/main/common/time.c ****     int tz_hours = 0;
 803              	 .loc 2 142 0
 804 0016 0023     	 movs r3,#0
 805 0018 FB62     	 str r3,[r7,#44]
 143:../cleanflight/src/main/common/time.c ****     int tz_minutes = 0;
 806              	 .loc 2 143 0
 807 001a 0023     	 movs r3,#0
 808 001c BB62     	 str r3,[r7,#40]
 144:../cleanflight/src/main/common/time.c ****     bool retVal = true;
 809              	 .loc 2 144 0
 810 001e 0123     	 movs r3,#1
 811 0020 87F82730 	 strb r3,[r7,#39]
 145:../cleanflight/src/main/common/time.c **** 
 146:../cleanflight/src/main/common/time.c ****     // Apply offset if necessary
 147:../cleanflight/src/main/common/time.c ****     if (offsetMinutes != 0) {
 812              	 .loc 2 147 0
 813 0024 B7F90630 	 ldrsh r3,[r7,#6]
 814 0028 002B     	 cmp r3,#0
 815 002a 2DD0     	 beq .L27
 148:../cleanflight/src/main/common/time.c ****         tz_hours = offsetMinutes / 60;
 816              	 .loc 2 148 0
 817 002c B7F90630 	 ldrsh r3,[r7,#6]
 818 0030 4C4A     	 ldr r2,.L34
 819 0032 82FB0312 	 smull r1,r2,r2,r3
 820 0036 1A44     	 add r2,r2,r3
 821 0038 5211     	 asrs r2,r2,#5
 822 003a DB17     	 asrs r3,r3,#31
 823 003c D31A     	 subs r3,r2,r3
 824 003e 9BB2     	 uxth r3,r3
 825 0040 1BB2     	 sxth r3,r3
 826 0042 FB62     	 str r3,[r7,#44]
 827              	.LBB2:
 149:../cleanflight/src/main/common/time.c ****         tz_minutes = ABS(offsetMinutes % 60);
 828              	 .loc 2 149 0
 829 0044 B7F90620 	 ldrsh r2,[r7,#6]
 830 0048 464B     	 ldr r3,.L34
 831 004a 83FB0213 	 smull r1,r3,r3,r2
 832 004e 1344     	 add r3,r3,r2
 833 0050 5911     	 asrs r1,r3,#5
 834 0052 D317     	 asrs r3,r2,#31
 835 0054 C91A     	 subs r1,r1,r3
 836 0056 0B46     	 mov r3,r1
 837 0058 1B01     	 lsls r3,r3,#4
 838 005a 5B1A     	 subs r3,r3,r1
 839 005c 9B00     	 lsls r3,r3,#2
 840 005e D31A     	 subs r3,r2,r3
 841 0060 9BB2     	 uxth r3,r3
 842 0062 1BB2     	 sxth r3,r3
 843 0064 3B62     	 str r3,[r7,#32]
 844 0066 3B6A     	 ldr r3,[r7,#32]
 845 0068 002B     	 cmp r3,#0
 846 006a B8BF     	 it lt
 847 006c 5B42     	 rsblt r3,r3,#0
 848              	.LBE2:
 849 006e BB62     	 str r3,[r7,#40]
 150:../cleanflight/src/main/common/time.c ****         dateTimeWithOffset(&local, dateTime, offsetMinutes);
 850              	 .loc 2 150 0
 851 0070 07F11002 	 add r2,r7,#16
 852 0074 B7F90630 	 ldrsh r3,[r7,#6]
 853 0078 1046     	 mov r0,r2
 854 007a B968     	 ldr r1,[r7,#8]
 855 007c 1A46     	 mov r2,r3
 856 007e FFF7FEFF 	 bl dateTimeWithOffset
 151:../cleanflight/src/main/common/time.c ****         dateTime = &local;
 857              	 .loc 2 151 0
 858 0082 07F11003 	 add r3,r7,#16
 859 0086 BB60     	 str r3,[r7,#8]
 860              	.L27:
 152:../cleanflight/src/main/common/time.c ****     }
 153:../cleanflight/src/main/common/time.c **** 
 154:../cleanflight/src/main/common/time.c ****     if (!rtcIsDateTimeValid(dateTime)) {
 861              	 .loc 2 154 0
 862 0088 B868     	 ldr r0,[r7,#8]
 863 008a FFF7FEFF 	 bl rtcIsDateTimeValid
 864 008e 0346     	 mov r3,r0
 865 0090 83F00103 	 eor r3,r3,#1
 866 0094 DBB2     	 uxtb r3,r3
 867 0096 002B     	 cmp r3,#0
 868 0098 0AD0     	 beq .L28
 155:../cleanflight/src/main/common/time.c ****         rtcGetDefaultDateTime(&local);
 869              	 .loc 2 155 0
 870 009a 07F11003 	 add r3,r7,#16
 871 009e 1846     	 mov r0,r3
 872 00a0 FFF7FEFF 	 bl rtcGetDefaultDateTime
 156:../cleanflight/src/main/common/time.c ****         dateTime = &local;
 873              	 .loc 2 156 0
 874 00a4 07F11003 	 add r3,r7,#16
 875 00a8 BB60     	 str r3,[r7,#8]
 157:../cleanflight/src/main/common/time.c ****         retVal = false;
 876              	 .loc 2 157 0
 877 00aa 0023     	 movs r3,#0
 878 00ac 87F82730 	 strb r3,[r7,#39]
 879              	.L28:
 158:../cleanflight/src/main/common/time.c ****     }
 159:../cleanflight/src/main/common/time.c **** 
 160:../cleanflight/src/main/common/time.c ****     if (shortVersion) {
 880              	 .loc 2 160 0
 881 00b0 7B79     	 ldrb r3,[r7,#5]
 882 00b2 002B     	 cmp r3,#0
 883 00b4 1CD0     	 beq .L29
 161:../cleanflight/src/main/common/time.c ****         tfp_sprintf(buf, "%04u-%02u-%02u %02u:%02u:%02u",
 162:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 884              	 .loc 2 162 0
 885 00b6 BB68     	 ldr r3,[r7,#8]
 886 00b8 1B88     	 ldrh r3,[r3]
 887 00ba 9BB2     	 uxth r3,r3
 161:../cleanflight/src/main/common/time.c ****         tfp_sprintf(buf, "%04u-%02u-%02u %02u:%02u:%02u",
 888              	 .loc 2 161 0
 889 00bc 1D46     	 mov r5,r3
 890              	 .loc 2 162 0
 891 00be BB68     	 ldr r3,[r7,#8]
 892 00c0 9B78     	 ldrb r3,[r3,#2]
 161:../cleanflight/src/main/common/time.c ****         tfp_sprintf(buf, "%04u-%02u-%02u %02u:%02u:%02u",
 893              	 .loc 2 161 0
 894 00c2 1C46     	 mov r4,r3
 895              	 .loc 2 162 0
 896 00c4 BB68     	 ldr r3,[r7,#8]
 897 00c6 DB78     	 ldrb r3,[r3,#3]
 161:../cleanflight/src/main/common/time.c ****         tfp_sprintf(buf, "%04u-%02u-%02u %02u:%02u:%02u",
 898              	 .loc 2 161 0
 899 00c8 1846     	 mov r0,r3
 163:../cleanflight/src/main/common/time.c ****             dateTime->hours, dateTime->minutes, dateTime->seconds);
 900              	 .loc 2 163 0
 901 00ca BB68     	 ldr r3,[r7,#8]
 902 00cc 1B79     	 ldrb r3,[r3,#4]
 161:../cleanflight/src/main/common/time.c ****         tfp_sprintf(buf, "%04u-%02u-%02u %02u:%02u:%02u",
 903              	 .loc 2 161 0
 904 00ce 1946     	 mov r1,r3
 905              	 .loc 2 163 0
 906 00d0 BB68     	 ldr r3,[r7,#8]
 907 00d2 5B79     	 ldrb r3,[r3,#5]
 161:../cleanflight/src/main/common/time.c ****         tfp_sprintf(buf, "%04u-%02u-%02u %02u:%02u:%02u",
 908              	 .loc 2 161 0
 909 00d4 1A46     	 mov r2,r3
 910              	 .loc 2 163 0
 911 00d6 BB68     	 ldr r3,[r7,#8]
 912 00d8 9B79     	 ldrb r3,[r3,#6]
 161:../cleanflight/src/main/common/time.c ****         tfp_sprintf(buf, "%04u-%02u-%02u %02u:%02u:%02u",
 913              	 .loc 2 161 0
 914 00da 0090     	 str r0,[sp]
 915 00dc 0191     	 str r1,[sp,#4]
 916 00de 0292     	 str r2,[sp,#8]
 917 00e0 0393     	 str r3,[sp,#12]
 918 00e2 F868     	 ldr r0,[r7,#12]
 919 00e4 2049     	 ldr r1,.L34+4
 920 00e6 2A46     	 mov r2,r5
 921 00e8 2346     	 mov r3,r4
 922 00ea FFF7FEFF 	 bl tfp_sprintf
 923 00ee 32E0     	 b .L30
 924              	.L29:
 164:../cleanflight/src/main/common/time.c ****     } else {
 165:../cleanflight/src/main/common/time.c ****         // Changes to this format might require updates in
 166:../cleanflight/src/main/common/time.c ****         // dateTimeSplitFormatted()
 167:../cleanflight/src/main/common/time.c ****         // Datetime is in ISO_8601 format, https://en.wikipedia.org/wiki/ISO_8601
 168:../cleanflight/src/main/common/time.c ****         tfp_sprintf(buf, "%04u-%02u-%02uT%02u:%02u:%02u.%03u%c%02d:%02d",
 169:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 925              	 .loc 2 169 0
 926 00f0 BB68     	 ldr r3,[r7,#8]
 927 00f2 1B88     	 ldrh r3,[r3]
 928 00f4 9BB2     	 uxth r3,r3
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 929              	 .loc 2 168 0
 930 00f6 9C46     	 mov ip,r3
 931              	 .loc 2 169 0
 932 00f8 BB68     	 ldr r3,[r7,#8]
 933 00fa 9B78     	 ldrb r3,[r3,#2]
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 934              	 .loc 2 168 0
 935 00fc 9E46     	 mov lr,r3
 936              	 .loc 2 169 0
 937 00fe BB68     	 ldr r3,[r7,#8]
 938 0100 DB78     	 ldrb r3,[r3,#3]
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 939              	 .loc 2 168 0
 940 0102 1E46     	 mov r6,r3
 170:../cleanflight/src/main/common/time.c ****             dateTime->hours, dateTime->minutes, dateTime->seconds, dateTime->millis,
 941              	 .loc 2 170 0
 942 0104 BB68     	 ldr r3,[r7,#8]
 943 0106 1B79     	 ldrb r3,[r3,#4]
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 944              	 .loc 2 168 0
 945 0108 1D46     	 mov r5,r3
 946              	 .loc 2 170 0
 947 010a BB68     	 ldr r3,[r7,#8]
 948 010c 5B79     	 ldrb r3,[r3,#5]
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 949              	 .loc 2 168 0
 950 010e 1C46     	 mov r4,r3
 951              	 .loc 2 170 0
 952 0110 BB68     	 ldr r3,[r7,#8]
 953 0112 9B79     	 ldrb r3,[r3,#6]
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 954              	 .loc 2 168 0
 955 0114 1846     	 mov r0,r3
 956              	 .loc 2 170 0
 957 0116 BB68     	 ldr r3,[r7,#8]
 958 0118 B3F80730 	 ldrh r3,[r3,#7]
 959 011c 9BB2     	 uxth r3,r3
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 960              	 .loc 2 168 0
 961 011e 1946     	 mov r1,r3
 962 0120 FB6A     	 ldr r3,[r7,#44]
 963 0122 002B     	 cmp r3,#0
 964 0124 01DB     	 blt .L31
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 965              	 .loc 2 168 0 is_stmt 0 discriminator 1
 966 0126 2B22     	 movs r2,#43
 967 0128 00E0     	 b .L32
 968              	.L31:
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 969              	 .loc 2 168 0 discriminator 2
 970 012a 2D22     	 movs r2,#45
 971              	.L32:
 972              	.LBB3:
 171:../cleanflight/src/main/common/time.c ****             tz_hours >= 0 ? '+' : '-', ABS(tz_hours), tz_minutes);
 973              	 .loc 2 171 0 is_stmt 1 discriminator 4
 974 012c FB6A     	 ldr r3,[r7,#44]
 975 012e FB61     	 str r3,[r7,#28]
 976 0130 FB69     	 ldr r3,[r7,#28]
 977 0132 002B     	 cmp r3,#0
 978 0134 B8BF     	 it lt
 979 0136 5B42     	 rsblt r3,r3,#0
 980              	.LBE3:
 168:../cleanflight/src/main/common/time.c ****             dateTime->year, dateTime->month, dateTime->day,
 981              	 .loc 2 168 0 discriminator 4
 982 0138 0096     	 str r6,[sp]
 983 013a 0195     	 str r5,[sp,#4]
 984 013c 0294     	 str r4,[sp,#8]
 985 013e 0390     	 str r0,[sp,#12]
 986 0140 0491     	 str r1,[sp,#16]
 987 0142 0592     	 str r2,[sp,#20]
 988 0144 0693     	 str r3,[sp,#24]
 989 0146 BB6A     	 ldr r3,[r7,#40]
 990 0148 0793     	 str r3,[sp,#28]
 991 014a F868     	 ldr r0,[r7,#12]
 992 014c 0749     	 ldr r1,.L34+8
 993 014e 6246     	 mov r2,ip
 994 0150 7346     	 mov r3,lr
 995 0152 FFF7FEFF 	 bl tfp_sprintf
 996              	.L30:
 172:../cleanflight/src/main/common/time.c ****     }
 173:../cleanflight/src/main/common/time.c **** 
 174:../cleanflight/src/main/common/time.c ****     return retVal;
 997              	 .loc 2 174 0
 998 0156 97F82730 	 ldrb r3,[r7,#39]
 175:../cleanflight/src/main/common/time.c **** }
 999              	 .loc 2 175 0
 1000 015a 1846     	 mov r0,r3
 1001 015c 3437     	 adds r7,r7,#52
 1002              	.LCFI34:
 1003              	 .cfi_def_cfa_offset 20
 1004 015e BD46     	 mov sp,r7
 1005              	.LCFI35:
 1006              	 .cfi_def_cfa_register 13
 1007              	 
 1008 0160 F0BD     	 pop {r4,r5,r6,r7,pc}
 1009              	.L35:
 1010 0162 00BF     	 .align 2
 1011              	.L34:
 1012 0164 89888888 	 .word -2004318071
 1013 0168 00000000 	 .word .LC0
 1014 016c 20000000 	 .word .LC1
 1015              	 .cfi_endproc
 1016              	.LFE534:
 1018              	 .section .text.rtcTimeMake,"ax",%progbits
 1019              	 .align 2
 1020              	 .global rtcTimeMake
 1021              	 .thumb
 1022              	 .thumb_func
 1024              	rtcTimeMake:
 1025              	.LFB535:
 176:../cleanflight/src/main/common/time.c **** 
 177:../cleanflight/src/main/common/time.c **** rtcTime_t rtcTimeMake(int32_t secs, uint16_t millis)
 178:../cleanflight/src/main/common/time.c **** {
 1026              	 .loc 2 178 0
 1027              	 .cfi_startproc
 1028              	 
 1029              	 
 1030              	 
 1031 0000 2DE9B00F 	 push {r4,r5,r7,r8,r9,r10,fp}
 1032              	.LCFI36:
 1033              	 .cfi_def_cfa_offset 28
 1034              	 .cfi_offset 4,-28
 1035              	 .cfi_offset 5,-24
 1036              	 .cfi_offset 7,-20
 1037              	 .cfi_offset 8,-16
 1038              	 .cfi_offset 9,-12
 1039              	 .cfi_offset 10,-8
 1040              	 .cfi_offset 11,-4
 1041 0004 83B0     	 sub sp,sp,#12
 1042              	.LCFI37:
 1043              	 .cfi_def_cfa_offset 40
 1044 0006 00AF     	 add r7,sp,#0
 1045              	.LCFI38:
 1046              	 .cfi_def_cfa_register 7
 1047 0008 7860     	 str r0,[r7,#4]
 1048 000a 7980     	 strh r1,[r7,#2]
 179:../cleanflight/src/main/common/time.c ****     return ((rtcTime_t)secs) * MILLIS_PER_SECOND + millis;
 1049              	 .loc 2 179 0
 1050 000c 7968     	 ldr r1,[r7,#4]
 1051 000e 8A46     	 mov r10,r1
 1052 0010 4FEAEA7B 	 asr fp,r10,#31
 1053 0014 5046     	 mov r0,r10
 1054 0016 5946     	 mov r1,fp
 1055 0018 4FEA8109 	 lsl r9,r1,#2
 1056 001c 49EA9079 	 orr r9,r9,r0,lsr#30
 1057 0020 4FEA8008 	 lsl r8,r0,#2
 1058 0024 4046     	 mov r0,r8
 1059 0026 4946     	 mov r1,r9
 1060 0028 4B01     	 lsls r3,r1,#5
 1061 002a 43EAD063 	 orr r3,r3,r0,lsr#27
 1062 002e 4201     	 lsls r2,r0,#5
 1063 0030 121A     	 subs r2,r2,r0
 1064 0032 63EB0103 	 sbc r3,r3,r1
 1065 0036 12EB0A02 	 adds r2,r2,r10
 1066 003a 43EB0B03 	 adc r3,r3,fp
 1067 003e DD00     	 lsls r5,r3,#3
 1068 0040 45EA5275 	 orr r5,r5,r2,lsr#29
 1069 0044 D400     	 lsls r4,r2,#3
 1070 0046 2246     	 mov r2,r4
 1071 0048 2B46     	 mov r3,r5
 1072 004a 1046     	 mov r0,r2
 1073 004c 1946     	 mov r1,r3
 1074 004e 7A88     	 ldrh r2,[r7,#2]
 1075 0050 4FF00003 	 mov r3,#0
 1076 0054 1218     	 adds r2,r2,r0
 1077 0056 43EB0103 	 adc r3,r3,r1
 180:../cleanflight/src/main/common/time.c **** }
 1078              	 .loc 2 180 0
 1079 005a 1046     	 mov r0,r2
 1080 005c 1946     	 mov r1,r3
 1081 005e 0C37     	 adds r7,r7,#12
 1082              	.LCFI39:
 1083              	 .cfi_def_cfa_offset 28
 1084 0060 BD46     	 mov sp,r7
 1085              	.LCFI40:
 1086              	 .cfi_def_cfa_register 13
 1087              	 
 1088 0062 BDE8B00F 	 pop {r4,r5,r7,r8,r9,r10,fp}
 1089              	.LCFI41:
 1090              	 .cfi_restore 11
 1091              	 .cfi_restore 10
 1092              	 .cfi_restore 9
 1093              	 .cfi_restore 8
 1094              	 .cfi_restore 7
 1095              	 .cfi_restore 5
 1096              	 .cfi_restore 4
 1097              	 .cfi_def_cfa_offset 0
 1098 0066 7047     	 bx lr
 1099              	 .cfi_endproc
 1100              	.LFE535:
 1102              	 .section .text.rtcTimeGetSeconds,"ax",%progbits
 1103              	 .align 2
 1104              	 .global rtcTimeGetSeconds
 1105              	 .thumb
 1106              	 .thumb_func
 1108              	rtcTimeGetSeconds:
 1109              	.LFB536:
 181:../cleanflight/src/main/common/time.c **** 
 182:../cleanflight/src/main/common/time.c **** int32_t rtcTimeGetSeconds(rtcTime_t *t)
 183:../cleanflight/src/main/common/time.c **** {
 1110              	 .loc 2 183 0
 1111              	 .cfi_startproc
 1112              	 
 1113              	 
 1114 0000 80B5     	 push {r7,lr}
 1115              	.LCFI42:
 1116              	 .cfi_def_cfa_offset 8
 1117              	 .cfi_offset 7,-8
 1118              	 .cfi_offset 14,-4
 1119 0002 82B0     	 sub sp,sp,#8
 1120              	.LCFI43:
 1121              	 .cfi_def_cfa_offset 16
 1122 0004 00AF     	 add r7,sp,#0
 1123              	.LCFI44:
 1124              	 .cfi_def_cfa_register 7
 1125 0006 7860     	 str r0,[r7,#4]
 184:../cleanflight/src/main/common/time.c ****     return *t / MILLIS_PER_SECOND;
 1126              	 .loc 2 184 0
 1127 0008 7B68     	 ldr r3,[r7,#4]
 1128 000a D3E90023 	 ldrd r2,[r3]
 1129 000e 1046     	 mov r0,r2
 1130 0010 1946     	 mov r1,r3
 1131 0012 4FF47A72 	 mov r2,#1000
 1132 0016 4FF00003 	 mov r3,#0
 1133 001a FFF7FEFF 	 bl __aeabi_ldivmod
 1134 001e 0246     	 mov r2,r0
 1135 0020 0B46     	 mov r3,r1
 1136 0022 1346     	 mov r3,r2
 185:../cleanflight/src/main/common/time.c **** }
 1137              	 .loc 2 185 0
 1138 0024 1846     	 mov r0,r3
 1139 0026 0837     	 adds r7,r7,#8
 1140              	.LCFI45:
 1141              	 .cfi_def_cfa_offset 8
 1142 0028 BD46     	 mov sp,r7
 1143              	.LCFI46:
 1144              	 .cfi_def_cfa_register 13
 1145              	 
 1146 002a 80BD     	 pop {r7,pc}
 1147              	 .cfi_endproc
 1148              	.LFE536:
 1150              	 .section .text.rtcTimeGetMillis,"ax",%progbits
 1151              	 .align 2
 1152              	 .global rtcTimeGetMillis
 1153              	 .thumb
 1154              	 .thumb_func
 1156              	rtcTimeGetMillis:
 1157              	.LFB537:
 186:../cleanflight/src/main/common/time.c **** 
 187:../cleanflight/src/main/common/time.c **** uint16_t rtcTimeGetMillis(rtcTime_t *t)
 188:../cleanflight/src/main/common/time.c **** {
 1158              	 .loc 2 188 0
 1159              	 .cfi_startproc
 1160              	 
 1161              	 
 1162 0000 80B5     	 push {r7,lr}
 1163              	.LCFI47:
 1164              	 .cfi_def_cfa_offset 8
 1165              	 .cfi_offset 7,-8
 1166              	 .cfi_offset 14,-4
 1167 0002 82B0     	 sub sp,sp,#8
 1168              	.LCFI48:
 1169              	 .cfi_def_cfa_offset 16
 1170 0004 00AF     	 add r7,sp,#0
 1171              	.LCFI49:
 1172              	 .cfi_def_cfa_register 7
 1173 0006 7860     	 str r0,[r7,#4]
 189:../cleanflight/src/main/common/time.c ****     return *t % MILLIS_PER_SECOND;
 1174              	 .loc 2 189 0
 1175 0008 7B68     	 ldr r3,[r7,#4]
 1176 000a D3E90023 	 ldrd r2,[r3]
 1177 000e 1046     	 mov r0,r2
 1178 0010 1946     	 mov r1,r3
 1179 0012 4FF47A72 	 mov r2,#1000
 1180 0016 4FF00003 	 mov r3,#0
 1181 001a FFF7FEFF 	 bl __aeabi_ldivmod
 1182 001e 93B2     	 uxth r3,r2
 190:../cleanflight/src/main/common/time.c **** }
 1183              	 .loc 2 190 0
 1184 0020 1846     	 mov r0,r3
 1185 0022 0837     	 adds r7,r7,#8
 1186              	.LCFI50:
 1187              	 .cfi_def_cfa_offset 8
 1188 0024 BD46     	 mov sp,r7
 1189              	.LCFI51:
 1190              	 .cfi_def_cfa_register 13
 1191              	 
 1192 0026 80BD     	 pop {r7,pc}
 1193              	 .cfi_endproc
 1194              	.LFE537:
 1196              	 .section .text.dateTimeFormatUTC,"ax",%progbits
 1197              	 .align 2
 1198              	 .global dateTimeFormatUTC
 1199              	 .thumb
 1200              	 .thumb_func
 1202              	dateTimeFormatUTC:
 1203              	.LFB538:
 191:../cleanflight/src/main/common/time.c **** 
 192:../cleanflight/src/main/common/time.c **** bool dateTimeFormatUTC(char *buf, dateTime_t *dt)
 193:../cleanflight/src/main/common/time.c **** {
 1204              	 .loc 2 193 0
 1205              	 .cfi_startproc
 1206              	 
 1207              	 
 1208 0000 80B5     	 push {r7,lr}
 1209              	.LCFI52:
 1210              	 .cfi_def_cfa_offset 8
 1211              	 .cfi_offset 7,-8
 1212              	 .cfi_offset 14,-4
 1213 0002 82B0     	 sub sp,sp,#8
 1214              	.LCFI53:
 1215              	 .cfi_def_cfa_offset 16
 1216 0004 00AF     	 add r7,sp,#0
 1217              	.LCFI54:
 1218              	 .cfi_def_cfa_register 7
 1219 0006 7860     	 str r0,[r7,#4]
 1220 0008 3960     	 str r1,[r7]
 194:../cleanflight/src/main/common/time.c ****     return dateTimeFormat(buf, dt, 0, false);
 1221              	 .loc 2 194 0
 1222 000a 7868     	 ldr r0,[r7,#4]
 1223 000c 3968     	 ldr r1,[r7]
 1224 000e 0022     	 movs r2,#0
 1225 0010 0023     	 movs r3,#0
 1226 0012 FFF7FEFF 	 bl dateTimeFormat
 1227 0016 0346     	 mov r3,r0
 195:../cleanflight/src/main/common/time.c **** }
 1228              	 .loc 2 195 0
 1229 0018 1846     	 mov r0,r3
 1230 001a 0837     	 adds r7,r7,#8
 1231              	.LCFI55:
 1232              	 .cfi_def_cfa_offset 8
 1233 001c BD46     	 mov sp,r7
 1234              	.LCFI56:
 1235              	 .cfi_def_cfa_register 13
 1236              	 
 1237 001e 80BD     	 pop {r7,pc}
 1238              	 .cfi_endproc
 1239              	.LFE538:
 1241              	 .section .text.dateTimeFormatLocal,"ax",%progbits
 1242              	 .align 2
 1243              	 .global dateTimeFormatLocal
 1244              	 .thumb
 1245              	 .thumb_func
 1247              	dateTimeFormatLocal:
 1248              	.LFB539:
 196:../cleanflight/src/main/common/time.c **** 
 197:../cleanflight/src/main/common/time.c **** bool dateTimeFormatLocal(char *buf, dateTime_t *dt)
 198:../cleanflight/src/main/common/time.c **** {
 1249              	 .loc 2 198 0
 1250              	 .cfi_startproc
 1251              	 
 1252              	 
 1253 0000 80B5     	 push {r7,lr}
 1254              	.LCFI57:
 1255              	 .cfi_def_cfa_offset 8
 1256              	 .cfi_offset 7,-8
 1257              	 .cfi_offset 14,-4
 1258 0002 82B0     	 sub sp,sp,#8
 1259              	.LCFI58:
 1260              	 .cfi_def_cfa_offset 16
 1261 0004 00AF     	 add r7,sp,#0
 1262              	.LCFI59:
 1263              	 .cfi_def_cfa_register 7
 1264 0006 7860     	 str r0,[r7,#4]
 1265 0008 3960     	 str r1,[r7]
 199:../cleanflight/src/main/common/time.c ****     return dateTimeFormat(buf, dt, timeConfig()->tz_offsetMinutes, false);
 1266              	 .loc 2 199 0
 1267 000a FFF7FEFF 	 bl timeConfig
 1268 000e 0346     	 mov r3,r0
 1269 0010 B3F90030 	 ldrsh r3,[r3]
 1270 0014 9BB2     	 uxth r3,r3
 1271 0016 1BB2     	 sxth r3,r3
 1272 0018 7868     	 ldr r0,[r7,#4]
 1273 001a 3968     	 ldr r1,[r7]
 1274 001c 1A46     	 mov r2,r3
 1275 001e 0023     	 movs r3,#0
 1276 0020 FFF7FEFF 	 bl dateTimeFormat
 1277 0024 0346     	 mov r3,r0
 200:../cleanflight/src/main/common/time.c **** }
 1278              	 .loc 2 200 0
 1279 0026 1846     	 mov r0,r3
 1280 0028 0837     	 adds r7,r7,#8
 1281              	.LCFI60:
 1282              	 .cfi_def_cfa_offset 8
 1283 002a BD46     	 mov sp,r7
 1284              	.LCFI61:
 1285              	 .cfi_def_cfa_register 13
 1286              	 
 1287 002c 80BD     	 pop {r7,pc}
 1288              	 .cfi_endproc
 1289              	.LFE539:
 1291              	 .section .text.dateTimeFormatLocalShort,"ax",%progbits
 1292              	 .align 2
 1293              	 .global dateTimeFormatLocalShort
 1294              	 .thumb
 1295              	 .thumb_func
 1297              	dateTimeFormatLocalShort:
 1298              	.LFB540:
 201:../cleanflight/src/main/common/time.c **** 
 202:../cleanflight/src/main/common/time.c **** bool dateTimeFormatLocalShort(char *buf, dateTime_t *dt)
 203:../cleanflight/src/main/common/time.c **** {
 1299              	 .loc 2 203 0
 1300              	 .cfi_startproc
 1301              	 
 1302              	 
 1303 0000 80B5     	 push {r7,lr}
 1304              	.LCFI62:
 1305              	 .cfi_def_cfa_offset 8
 1306              	 .cfi_offset 7,-8
 1307              	 .cfi_offset 14,-4
 1308 0002 82B0     	 sub sp,sp,#8
 1309              	.LCFI63:
 1310              	 .cfi_def_cfa_offset 16
 1311 0004 00AF     	 add r7,sp,#0
 1312              	.LCFI64:
 1313              	 .cfi_def_cfa_register 7
 1314 0006 7860     	 str r0,[r7,#4]
 1315 0008 3960     	 str r1,[r7]
 204:../cleanflight/src/main/common/time.c ****     return dateTimeFormat(buf, dt, timeConfig()->tz_offsetMinutes, true);
 1316              	 .loc 2 204 0
 1317 000a FFF7FEFF 	 bl timeConfig
 1318 000e 0346     	 mov r3,r0
 1319 0010 B3F90030 	 ldrsh r3,[r3]
 1320 0014 9BB2     	 uxth r3,r3
 1321 0016 1BB2     	 sxth r3,r3
 1322 0018 7868     	 ldr r0,[r7,#4]
 1323 001a 3968     	 ldr r1,[r7]
 1324 001c 1A46     	 mov r2,r3
 1325 001e 0123     	 movs r3,#1
 1326 0020 FFF7FEFF 	 bl dateTimeFormat
 1327 0024 0346     	 mov r3,r0
 205:../cleanflight/src/main/common/time.c **** }
 1328              	 .loc 2 205 0
 1329 0026 1846     	 mov r0,r3
 1330 0028 0837     	 adds r7,r7,#8
 1331              	.LCFI65:
 1332              	 .cfi_def_cfa_offset 8
 1333 002a BD46     	 mov sp,r7
 1334              	.LCFI66:
 1335              	 .cfi_def_cfa_register 13
 1336              	 
 1337 002c 80BD     	 pop {r7,pc}
 1338              	 .cfi_endproc
 1339              	.LFE540:
 1341              	 .section .text.dateTimeUTCToLocal,"ax",%progbits
 1342              	 .align 2
 1343              	 .global dateTimeUTCToLocal
 1344              	 .thumb
 1345              	 .thumb_func
 1347              	dateTimeUTCToLocal:
 1348              	.LFB541:
 206:../cleanflight/src/main/common/time.c **** 
 207:../cleanflight/src/main/common/time.c **** void dateTimeUTCToLocal(dateTime_t *utcDateTime, dateTime_t *localDateTime)
 208:../cleanflight/src/main/common/time.c **** {
 1349              	 .loc 2 208 0
 1350              	 .cfi_startproc
 1351              	 
 1352              	 
 1353 0000 80B5     	 push {r7,lr}
 1354              	.LCFI67:
 1355              	 .cfi_def_cfa_offset 8
 1356              	 .cfi_offset 7,-8
 1357              	 .cfi_offset 14,-4
 1358 0002 82B0     	 sub sp,sp,#8
 1359              	.LCFI68:
 1360              	 .cfi_def_cfa_offset 16
 1361 0004 00AF     	 add r7,sp,#0
 1362              	.LCFI69:
 1363              	 .cfi_def_cfa_register 7
 1364 0006 7860     	 str r0,[r7,#4]
 1365 0008 3960     	 str r1,[r7]
 209:../cleanflight/src/main/common/time.c ****     dateTimeWithOffset(localDateTime, utcDateTime, timeConfig()->tz_offsetMinutes);
 1366              	 .loc 2 209 0
 1367 000a FFF7FEFF 	 bl timeConfig
 1368 000e 0346     	 mov r3,r0
 1369 0010 B3F90030 	 ldrsh r3,[r3]
 1370 0014 9BB2     	 uxth r3,r3
 1371 0016 1BB2     	 sxth r3,r3
 1372 0018 3868     	 ldr r0,[r7]
 1373 001a 7968     	 ldr r1,[r7,#4]
 1374 001c 1A46     	 mov r2,r3
 1375 001e FFF7FEFF 	 bl dateTimeWithOffset
 210:../cleanflight/src/main/common/time.c **** }
 1376              	 .loc 2 210 0
 1377 0022 0837     	 adds r7,r7,#8
 1378              	.LCFI70:
 1379              	 .cfi_def_cfa_offset 8
 1380 0024 BD46     	 mov sp,r7
 1381              	.LCFI71:
 1382              	 .cfi_def_cfa_register 13
 1383              	 
 1384 0026 80BD     	 pop {r7,pc}
 1385              	 .cfi_endproc
 1386              	.LFE541:
 1388              	 .section .text.dateTimeSplitFormatted,"ax",%progbits
 1389              	 .align 2
 1390              	 .global dateTimeSplitFormatted
 1391              	 .thumb
 1392              	 .thumb_func
 1394              	dateTimeSplitFormatted:
 1395              	.LFB542:
 211:../cleanflight/src/main/common/time.c **** 
 212:../cleanflight/src/main/common/time.c **** bool dateTimeSplitFormatted(char *formatted, char **date, char **time)
 213:../cleanflight/src/main/common/time.c **** {
 1396              	 .loc 2 213 0
 1397              	 .cfi_startproc
 1398              	 
 1399              	 
 1400              	 
 1401 0000 80B4     	 push {r7}
 1402              	.LCFI72:
 1403              	 .cfi_def_cfa_offset 4
 1404              	 .cfi_offset 7,-4
 1405 0002 87B0     	 sub sp,sp,#28
 1406              	.LCFI73:
 1407              	 .cfi_def_cfa_offset 32
 1408 0004 00AF     	 add r7,sp,#0
 1409              	.LCFI74:
 1410              	 .cfi_def_cfa_register 7
 1411 0006 F860     	 str r0,[r7,#12]
 1412 0008 B960     	 str r1,[r7,#8]
 1413 000a 7A60     	 str r2,[r7,#4]
 1414              	.LBB4:
 214:../cleanflight/src/main/common/time.c ****     // Just look for the T and replace it with a zero
 215:../cleanflight/src/main/common/time.c ****     // XXX: Keep in sync with dateTimeFormat()
 216:../cleanflight/src/main/common/time.c ****     for (char *p = formatted; *p; p++) {
 1415              	 .loc 2 216 0
 1416 000c FB68     	 ldr r3,[r7,#12]
 1417 000e 7B61     	 str r3,[r7,#20]
 1418 0010 12E0     	 b .L50
 1419              	.L53:
 217:../cleanflight/src/main/common/time.c ****         if (*p == 'T') {
 1420              	 .loc 2 217 0
 1421 0012 7B69     	 ldr r3,[r7,#20]
 1422 0014 1B78     	 ldrb r3,[r3]
 1423 0016 542B     	 cmp r3,#84
 1424 0018 0BD1     	 bne .L51
 218:../cleanflight/src/main/common/time.c ****             *date = formatted;
 1425              	 .loc 2 218 0
 1426 001a BB68     	 ldr r3,[r7,#8]
 1427 001c FA68     	 ldr r2,[r7,#12]
 1428 001e 1A60     	 str r2,[r3]
 219:../cleanflight/src/main/common/time.c ****             *time = (p+1);
 1429              	 .loc 2 219 0
 1430 0020 7B69     	 ldr r3,[r7,#20]
 1431 0022 5A1C     	 adds r2,r3,#1
 1432 0024 7B68     	 ldr r3,[r7,#4]
 1433 0026 1A60     	 str r2,[r3]
 220:../cleanflight/src/main/common/time.c ****             *p = '\0';
 1434              	 .loc 2 220 0
 1435 0028 7B69     	 ldr r3,[r7,#20]
 1436 002a 0022     	 movs r2,#0
 1437 002c 1A70     	 strb r2,[r3]
 221:../cleanflight/src/main/common/time.c ****             return true;
 1438              	 .loc 2 221 0
 1439 002e 0123     	 movs r3,#1
 1440 0030 07E0     	 b .L52
 1441              	.L51:
 216:../cleanflight/src/main/common/time.c ****         if (*p == 'T') {
 1442              	 .loc 2 216 0 discriminator 2
 1443 0032 7B69     	 ldr r3,[r7,#20]
 1444 0034 0133     	 adds r3,r3,#1
 1445 0036 7B61     	 str r3,[r7,#20]
 1446              	.L50:
 216:../cleanflight/src/main/common/time.c ****         if (*p == 'T') {
 1447              	 .loc 2 216 0 is_stmt 0 discriminator 1
 1448 0038 7B69     	 ldr r3,[r7,#20]
 1449 003a 1B78     	 ldrb r3,[r3]
 1450 003c 002B     	 cmp r3,#0
 1451 003e E8D1     	 bne .L53
 1452              	.LBE4:
 222:../cleanflight/src/main/common/time.c ****         }
 223:../cleanflight/src/main/common/time.c ****     }
 224:../cleanflight/src/main/common/time.c ****     return false;
 1453              	 .loc 2 224 0 is_stmt 1
 1454 0040 0023     	 movs r3,#0
 1455              	.L52:
 225:../cleanflight/src/main/common/time.c **** }
 1456              	 .loc 2 225 0
 1457 0042 1846     	 mov r0,r3
 1458 0044 1C37     	 adds r7,r7,#28
 1459              	.LCFI75:
 1460              	 .cfi_def_cfa_offset 4
 1461 0046 BD46     	 mov sp,r7
 1462              	.LCFI76:
 1463              	 .cfi_def_cfa_register 13
 1464              	 
 1465 0048 5DF8047B 	 ldr r7,[sp],#4
 1466              	.LCFI77:
 1467              	 .cfi_restore 7
 1468              	 .cfi_def_cfa_offset 0
 1469 004c 7047     	 bx lr
 1470              	 .cfi_endproc
 1471              	.LFE542:
 1473 004e 00BF     	 .section .text.rtcHasTime,"ax",%progbits
 1474              	 .align 2
 1475              	 .global rtcHasTime
 1476              	 .thumb
 1477              	 .thumb_func
 1479              	rtcHasTime:
 1480              	.LFB543:
 226:../cleanflight/src/main/common/time.c **** 
 227:../cleanflight/src/main/common/time.c **** bool rtcHasTime(void)
 228:../cleanflight/src/main/common/time.c **** {
 1481              	 .loc 2 228 0
 1482              	 .cfi_startproc
 1483              	 
 1484              	 
 1485              	 
 1486 0000 80B4     	 push {r7}
 1487              	.LCFI78:
 1488              	 .cfi_def_cfa_offset 4
 1489              	 .cfi_offset 7,-4
 1490 0002 00AF     	 add r7,sp,#0
 1491              	.LCFI79:
 1492              	 .cfi_def_cfa_register 7
 229:../cleanflight/src/main/common/time.c ****     return started != 0;
 1493              	 .loc 2 229 0
 1494 0004 064B     	 ldr r3,.L56
 1495 0006 D3E90023 	 ldrd r2,[r3]
 1496 000a 1343     	 orrs r3,r3,r2
 1497 000c 002B     	 cmp r3,#0
 1498 000e 14BF     	 ite ne
 1499 0010 0123     	 movne r3,#1
 1500 0012 0023     	 moveq r3,#0
 1501 0014 DBB2     	 uxtb r3,r3
 230:../cleanflight/src/main/common/time.c **** }
 1502              	 .loc 2 230 0
 1503 0016 1846     	 mov r0,r3
 1504 0018 BD46     	 mov sp,r7
 1505              	.LCFI80:
 1506              	 .cfi_def_cfa_register 13
 1507              	 
 1508 001a 5DF8047B 	 ldr r7,[sp],#4
 1509              	.LCFI81:
 1510              	 .cfi_restore 7
 1511              	 .cfi_def_cfa_offset 0
 1512 001e 7047     	 bx lr
 1513              	.L57:
 1514              	 .align 2
 1515              	.L56:
 1516 0020 00000000 	 .word started
 1517              	 .cfi_endproc
 1518              	.LFE543:
 1520              	 .section .text.rtcGet,"ax",%progbits
 1521              	 .align 2
 1522              	 .global rtcGet
 1523              	 .thumb
 1524              	 .thumb_func
 1526              	rtcGet:
 1527              	.LFB544:
 231:../cleanflight/src/main/common/time.c **** 
 232:../cleanflight/src/main/common/time.c **** bool rtcGet(rtcTime_t *t)
 233:../cleanflight/src/main/common/time.c **** {
 1528              	 .loc 2 233 0
 1529              	 .cfi_startproc
 1530              	 
 1531              	 
 1532 0000 80B5     	 push {r7,lr}
 1533              	.LCFI82:
 1534              	 .cfi_def_cfa_offset 8
 1535              	 .cfi_offset 7,-8
 1536              	 .cfi_offset 14,-4
 1537 0002 82B0     	 sub sp,sp,#8
 1538              	.LCFI83:
 1539              	 .cfi_def_cfa_offset 16
 1540 0004 00AF     	 add r7,sp,#0
 1541              	.LCFI84:
 1542              	 .cfi_def_cfa_register 7
 1543 0006 7860     	 str r0,[r7,#4]
 234:../cleanflight/src/main/common/time.c ****     if (!rtcHasTime()) {
 1544              	 .loc 2 234 0
 1545 0008 FFF7FEFF 	 bl rtcHasTime
 1546 000c 0346     	 mov r3,r0
 1547 000e 83F00103 	 eor r3,r3,#1
 1548 0012 DBB2     	 uxtb r3,r3
 1549 0014 002B     	 cmp r3,#0
 1550 0016 01D0     	 beq .L59
 235:../cleanflight/src/main/common/time.c ****         return false;
 1551              	 .loc 2 235 0
 1552 0018 0023     	 movs r3,#0
 1553 001a 0FE0     	 b .L60
 1554              	.L59:
 236:../cleanflight/src/main/common/time.c ****     }
 237:../cleanflight/src/main/common/time.c ****     *t = started + millis();
 1555              	 .loc 2 237 0
 1556 001c FFF7FEFF 	 bl millis
 1557 0020 0346     	 mov r3,r0
 1558 0022 1846     	 mov r0,r3
 1559 0024 4FF00001 	 mov r1,#0
 1560 0028 064B     	 ldr r3,.L61
 1561 002a D3E90023 	 ldrd r2,[r3]
 1562 002e 1218     	 adds r2,r2,r0
 1563 0030 43EB0103 	 adc r3,r3,r1
 1564 0034 7968     	 ldr r1,[r7,#4]
 1565 0036 C1E90023 	 strd r2,[r1]
 238:../cleanflight/src/main/common/time.c ****     return true;
 1566              	 .loc 2 238 0
 1567 003a 0123     	 movs r3,#1
 1568              	.L60:
 239:../cleanflight/src/main/common/time.c **** }
 1569              	 .loc 2 239 0
 1570 003c 1846     	 mov r0,r3
 1571 003e 0837     	 adds r7,r7,#8
 1572              	.LCFI85:
 1573              	 .cfi_def_cfa_offset 8
 1574 0040 BD46     	 mov sp,r7
 1575              	.LCFI86:
 1576              	 .cfi_def_cfa_register 13
 1577              	 
 1578 0042 80BD     	 pop {r7,pc}
 1579              	.L62:
 1580              	 .align 2
 1581              	.L61:
 1582 0044 00000000 	 .word started
 1583              	 .cfi_endproc
 1584              	.LFE544:
 1586              	 .section .text.rtcSet,"ax",%progbits
 1587              	 .align 2
 1588              	 .global rtcSet
 1589              	 .thumb
 1590              	 .thumb_func
 1592              	rtcSet:
 1593              	.LFB545:
 240:../cleanflight/src/main/common/time.c **** 
 241:../cleanflight/src/main/common/time.c **** bool rtcSet(rtcTime_t *t)
 242:../cleanflight/src/main/common/time.c **** {
 1594              	 .loc 2 242 0
 1595              	 .cfi_startproc
 1596              	 
 1597              	 
 1598 0000 B0B5     	 push {r4,r5,r7,lr}
 1599              	.LCFI87:
 1600              	 .cfi_def_cfa_offset 16
 1601              	 .cfi_offset 4,-16
 1602              	 .cfi_offset 5,-12
 1603              	 .cfi_offset 7,-8
 1604              	 .cfi_offset 14,-4
 1605 0002 82B0     	 sub sp,sp,#8
 1606              	.LCFI88:
 1607              	 .cfi_def_cfa_offset 24
 1608 0004 00AF     	 add r7,sp,#0
 1609              	.LCFI89:
 1610              	 .cfi_def_cfa_register 7
 1611 0006 7860     	 str r0,[r7,#4]
 243:../cleanflight/src/main/common/time.c ****     started = *t - millis();
 1612              	 .loc 2 243 0
 1613 0008 7B68     	 ldr r3,[r7,#4]
 1614 000a D3E90045 	 ldrd r4,[r3]
 1615 000e FFF7FEFF 	 bl millis
 1616 0012 0346     	 mov r3,r0
 1617 0014 1A46     	 mov r2,r3
 1618 0016 4FF00003 	 mov r3,#0
 1619 001a A21A     	 subs r2,r4,r2
 1620 001c 65EB0303 	 sbc r3,r5,r3
 1621 0020 0349     	 ldr r1,.L65
 1622 0022 C1E90023 	 strd r2,[r1]
 244:../cleanflight/src/main/common/time.c ****     return true;
 1623              	 .loc 2 244 0
 1624 0026 0123     	 movs r3,#1
 245:../cleanflight/src/main/common/time.c **** }
 1625              	 .loc 2 245 0
 1626 0028 1846     	 mov r0,r3
 1627 002a 0837     	 adds r7,r7,#8
 1628              	.LCFI90:
 1629              	 .cfi_def_cfa_offset 16
 1630 002c BD46     	 mov sp,r7
 1631              	.LCFI91:
 1632              	 .cfi_def_cfa_register 13
 1633              	 
 1634 002e B0BD     	 pop {r4,r5,r7,pc}
 1635              	.L66:
 1636              	 .align 2
 1637              	.L65:
 1638 0030 00000000 	 .word started
 1639              	 .cfi_endproc
 1640              	.LFE545:
 1642              	 .section .text.rtcGetDateTime,"ax",%progbits
 1643              	 .align 2
 1644              	 .global rtcGetDateTime
 1645              	 .thumb
 1646              	 .thumb_func
 1648              	rtcGetDateTime:
 1649              	.LFB546:
 246:../cleanflight/src/main/common/time.c **** 
 247:../cleanflight/src/main/common/time.c **** bool rtcGetDateTime(dateTime_t *dt)
 248:../cleanflight/src/main/common/time.c **** {
 1650              	 .loc 2 248 0
 1651              	 .cfi_startproc
 1652              	 
 1653              	 
 1654 0000 80B5     	 push {r7,lr}
 1655              	.LCFI92:
 1656              	 .cfi_def_cfa_offset 8
 1657              	 .cfi_offset 7,-8
 1658              	 .cfi_offset 14,-4
 1659 0002 84B0     	 sub sp,sp,#16
 1660              	.LCFI93:
 1661              	 .cfi_def_cfa_offset 24
 1662 0004 00AF     	 add r7,sp,#0
 1663              	.LCFI94:
 1664              	 .cfi_def_cfa_register 7
 1665 0006 7860     	 str r0,[r7,#4]
 249:../cleanflight/src/main/common/time.c ****     rtcTime_t t;
 250:../cleanflight/src/main/common/time.c ****     if (rtcGet(&t)) {
 1666              	 .loc 2 250 0
 1667 0008 07F10803 	 add r3,r7,#8
 1668 000c 1846     	 mov r0,r3
 1669 000e FFF7FEFF 	 bl rtcGet
 1670 0012 0346     	 mov r3,r0
 1671 0014 002B     	 cmp r3,#0
 1672 0016 06D0     	 beq .L68
 251:../cleanflight/src/main/common/time.c ****         rtcTimeToDateTime(dt, t);
 1673              	 .loc 2 251 0
 1674 0018 D7E90223 	 ldrd r2,[r7,#8]
 1675 001c 7868     	 ldr r0,[r7,#4]
 1676 001e FFF7FEFF 	 bl rtcTimeToDateTime
 252:../cleanflight/src/main/common/time.c ****         return true;
 1677              	 .loc 2 252 0
 1678 0022 0123     	 movs r3,#1
 1679 0024 03E0     	 b .L70
 1680              	.L68:
 253:../cleanflight/src/main/common/time.c ****     }
 254:../cleanflight/src/main/common/time.c ****     // No time stored, fill dt with 0000-01-01T00:00:00.000
 255:../cleanflight/src/main/common/time.c ****     rtcGetDefaultDateTime(dt);
 1681              	 .loc 2 255 0
 1682 0026 7868     	 ldr r0,[r7,#4]
 1683 0028 FFF7FEFF 	 bl rtcGetDefaultDateTime
 256:../cleanflight/src/main/common/time.c ****     return false;
 1684              	 .loc 2 256 0
 1685 002c 0023     	 movs r3,#0
 1686              	.L70:
 257:../cleanflight/src/main/common/time.c **** }
 1687              	 .loc 2 257 0 discriminator 1
 1688 002e 1846     	 mov r0,r3
 1689 0030 1037     	 adds r7,r7,#16
 1690              	.LCFI95:
 1691              	 .cfi_def_cfa_offset 8
 1692 0032 BD46     	 mov sp,r7
 1693              	.LCFI96:
 1694              	 .cfi_def_cfa_register 13
 1695              	 
 1696 0034 80BD     	 pop {r7,pc}
 1697              	 .cfi_endproc
 1698              	.LFE546:
 1700 0036 00BF     	 .section .text.rtcSetDateTime,"ax",%progbits
 1701              	 .align 2
 1702              	 .global rtcSetDateTime
 1703              	 .thumb
 1704              	 .thumb_func
 1706              	rtcSetDateTime:
 1707              	.LFB547:
 258:../cleanflight/src/main/common/time.c **** 
 259:../cleanflight/src/main/common/time.c **** bool rtcSetDateTime(dateTime_t *dt)
 260:../cleanflight/src/main/common/time.c **** {
 1708              	 .loc 2 260 0
 1709              	 .cfi_startproc
 1710              	 
 1711              	 
 1712 0000 80B5     	 push {r7,lr}
 1713              	.LCFI97:
 1714              	 .cfi_def_cfa_offset 8
 1715              	 .cfi_offset 7,-8
 1716              	 .cfi_offset 14,-4
 1717 0002 84B0     	 sub sp,sp,#16
 1718              	.LCFI98:
 1719              	 .cfi_def_cfa_offset 24
 1720 0004 00AF     	 add r7,sp,#0
 1721              	.LCFI99:
 1722              	 .cfi_def_cfa_register 7
 1723 0006 7860     	 str r0,[r7,#4]
 261:../cleanflight/src/main/common/time.c ****     rtcTime_t t = dateTimeToRtcTime(dt);
 1724              	 .loc 2 261 0
 1725 0008 7868     	 ldr r0,[r7,#4]
 1726 000a FFF7FEFF 	 bl dateTimeToRtcTime
 1727 000e 0246     	 mov r2,r0
 1728 0010 0B46     	 mov r3,r1
 1729 0012 C7E90223 	 strd r2,[r7,#8]
 262:../cleanflight/src/main/common/time.c ****     return rtcSet(&t);
 1730              	 .loc 2 262 0
 1731 0016 07F10803 	 add r3,r7,#8
 1732 001a 1846     	 mov r0,r3
 1733 001c FFF7FEFF 	 bl rtcSet
 1734 0020 0346     	 mov r3,r0
 263:../cleanflight/src/main/common/time.c **** }
 1735              	 .loc 2 263 0
 1736 0022 1846     	 mov r0,r3
 1737 0024 1037     	 adds r7,r7,#16
 1738              	.LCFI100:
 1739              	 .cfi_def_cfa_offset 8
 1740 0026 BD46     	 mov sp,r7
 1741              	.LCFI101:
 1742              	 .cfi_def_cfa_register 13
 1743              	 
 1744 0028 80BD     	 pop {r7,pc}
 1745              	 .cfi_endproc
 1746              	.LFE547:
 1748 002a 00BF     	 .text
 1749              	.Letext0:
 1750              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1751              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1752              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 1753              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 1754              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 1755              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 time.c
    {standard input}:20     .text.timeConfig:00000000 $t
    {standard input}:24     .text.timeConfig:00000000 timeConfig
    {standard input}:54     .text.timeConfig:00000010 $d
                            *COM*:00000002 timeConfig_System
    {standard input}:59     .bss.started:00000000 $d
    {standard input}:62     .bss.started:00000000 started
    {standard input}:65     .rodata.days:00000000 $d
    {standard input}:68     .rodata.days:00000000 days
                            *COM*:00000002 timeConfig_Copy
    {standard input}:124    .pg_registry:00000000 timeConfig_Registry
    {standard input}:121    .pg_registry:00000000 $d
    {standard input}:136    .pg_resetdata:00000000 pgResetTemplate_timeConfig
    {standard input}:133    .pg_resetdata:00000000 $d
    {standard input}:139    .text.dateTimeToRtcTime:00000000 $t
    {standard input}:143    .text.dateTimeToRtcTime:00000000 dateTimeToRtcTime
    {standard input}:1024   .text.rtcTimeMake:00000000 rtcTimeMake
    {standard input}:255    .text.dateTimeToRtcTime:000000b0 $d
    {standard input}:262    .text.rtcTimeToDateTime:00000000 $t
    {standard input}:266    .text.rtcTimeToDateTime:00000000 rtcTimeToDateTime
    {standard input}:512    .text.rtcTimeToDateTime:000001b0 $d
    {standard input}:521    .text.rtcGetDefaultDateTime:00000000 $t
    {standard input}:525    .text.rtcGetDefaultDateTime:00000000 rtcGetDefaultDateTime
    {standard input}:592    .text.rtcIsDateTimeValid:00000000 $t
    {standard input}:596    .text.rtcIsDateTimeValid:00000000 rtcIsDateTimeValid
    {standard input}:696    .text.dateTimeWithOffset:00000000 $t
    {standard input}:700    .text.dateTimeWithOffset:00000000 dateTimeWithOffset
    {standard input}:1108   .text.rtcTimeGetSeconds:00000000 rtcTimeGetSeconds
    {standard input}:1156   .text.rtcTimeGetMillis:00000000 rtcTimeGetMillis
    {standard input}:764    .rodata:00000000 $d
    {standard input}:771    .text.dateTimeFormat:00000000 $t
    {standard input}:775    .text.dateTimeFormat:00000000 dateTimeFormat
    {standard input}:1012   .text.dateTimeFormat:00000164 $d
    {standard input}:1019   .text.rtcTimeMake:00000000 $t
    {standard input}:1103   .text.rtcTimeGetSeconds:00000000 $t
    {standard input}:1151   .text.rtcTimeGetMillis:00000000 $t
    {standard input}:1197   .text.dateTimeFormatUTC:00000000 $t
    {standard input}:1202   .text.dateTimeFormatUTC:00000000 dateTimeFormatUTC
    {standard input}:1242   .text.dateTimeFormatLocal:00000000 $t
    {standard input}:1247   .text.dateTimeFormatLocal:00000000 dateTimeFormatLocal
    {standard input}:1292   .text.dateTimeFormatLocalShort:00000000 $t
    {standard input}:1297   .text.dateTimeFormatLocalShort:00000000 dateTimeFormatLocalShort
    {standard input}:1342   .text.dateTimeUTCToLocal:00000000 $t
    {standard input}:1347   .text.dateTimeUTCToLocal:00000000 dateTimeUTCToLocal
    {standard input}:1389   .text.dateTimeSplitFormatted:00000000 $t
    {standard input}:1394   .text.dateTimeSplitFormatted:00000000 dateTimeSplitFormatted
    {standard input}:1474   .text.rtcHasTime:00000000 $t
    {standard input}:1479   .text.rtcHasTime:00000000 rtcHasTime
    {standard input}:1516   .text.rtcHasTime:00000020 $d
    {standard input}:1521   .text.rtcGet:00000000 $t
    {standard input}:1526   .text.rtcGet:00000000 rtcGet
    {standard input}:1582   .text.rtcGet:00000044 $d
    {standard input}:1587   .text.rtcSet:00000000 $t
    {standard input}:1592   .text.rtcSet:00000000 rtcSet
    {standard input}:1638   .text.rtcSet:00000030 $d
    {standard input}:1643   .text.rtcGetDateTime:00000000 $t
    {standard input}:1648   .text.rtcGetDateTime:00000000 rtcGetDateTime
    {standard input}:1701   .text.rtcSetDateTime:00000000 $t
    {standard input}:1706   .text.rtcSetDateTime:00000000 rtcSetDateTime
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_ldivmod
tfp_sprintf
millis
