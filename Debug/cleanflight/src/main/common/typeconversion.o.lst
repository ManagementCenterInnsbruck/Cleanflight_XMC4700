   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "typeconversion.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.uli2a,"ax",%progbits
  20              	 .align 2
  21              	 .global uli2a
  22              	 .thumb
  23              	 .thumb_func
  25              	uli2a:
  26              	.LFB2:
  27              	 .file 1 "../cleanflight/src/main/common/typeconversion.c"
   1:../cleanflight/src/main/common/typeconversion.c **** /*
   2:../cleanflight/src/main/common/typeconversion.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/common/typeconversion.c ****  *
   4:../cleanflight/src/main/common/typeconversion.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/common/typeconversion.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/common/typeconversion.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/common/typeconversion.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/common/typeconversion.c ****  * any later version.
   9:../cleanflight/src/main/common/typeconversion.c ****  *
  10:../cleanflight/src/main/common/typeconversion.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/common/typeconversion.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/common/typeconversion.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/common/typeconversion.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/common/typeconversion.c ****  *
  15:../cleanflight/src/main/common/typeconversion.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/common/typeconversion.c ****  * along with this software.
  17:../cleanflight/src/main/common/typeconversion.c ****  *
  18:../cleanflight/src/main/common/typeconversion.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/common/typeconversion.c ****  */
  20:../cleanflight/src/main/common/typeconversion.c **** 
  21:../cleanflight/src/main/common/typeconversion.c **** #include <stdint.h>
  22:../cleanflight/src/main/common/typeconversion.c **** #include <string.h>
  23:../cleanflight/src/main/common/typeconversion.c **** #include <math.h>
  24:../cleanflight/src/main/common/typeconversion.c **** #include "build/build_config.h"
  25:../cleanflight/src/main/common/typeconversion.c **** #include "maths.h"
  26:../cleanflight/src/main/common/typeconversion.c **** 
  27:../cleanflight/src/main/common/typeconversion.c **** #ifdef REQUIRE_PRINTF_LONG_SUPPORT
  28:../cleanflight/src/main/common/typeconversion.c **** 
  29:../cleanflight/src/main/common/typeconversion.c **** void uli2a(unsigned long int num, unsigned int base, int uc, char *bf)
  30:../cleanflight/src/main/common/typeconversion.c **** {
  28              	 .loc 1 30 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 87B0     	 sub sp,sp,#28
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 32
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  46 000c 3B60     	 str r3,[r7]
  31:../cleanflight/src/main/common/typeconversion.c ****     unsigned int d = 1;
  47              	 .loc 1 31 0
  48 000e 0123     	 movs r3,#1
  49 0010 7B61     	 str r3,[r7,#20]
  32:../cleanflight/src/main/common/typeconversion.c **** 
  33:../cleanflight/src/main/common/typeconversion.c ****     while (num / d >= base)
  50              	 .loc 1 33 0
  51 0012 04E0     	 b .L2
  52              	.L3:
  34:../cleanflight/src/main/common/typeconversion.c ****         d *= base;
  53              	 .loc 1 34 0
  54 0014 7B69     	 ldr r3,[r7,#20]
  55 0016 BA68     	 ldr r2,[r7,#8]
  56 0018 02FB03F3 	 mul r3,r2,r3
  57 001c 7B61     	 str r3,[r7,#20]
  58              	.L2:
  33:../cleanflight/src/main/common/typeconversion.c ****         d *= base;
  59              	 .loc 1 33 0
  60 001e FA68     	 ldr r2,[r7,#12]
  61 0020 7B69     	 ldr r3,[r7,#20]
  62 0022 B2FBF3F2 	 udiv r2,r2,r3
  63 0026 BB68     	 ldr r3,[r7,#8]
  64 0028 9A42     	 cmp r2,r3
  65 002a F3D2     	 bcs .L3
  35:../cleanflight/src/main/common/typeconversion.c **** 
  36:../cleanflight/src/main/common/typeconversion.c ****     while (d != 0) {
  66              	 .loc 1 36 0
  67 002c 25E0     	 b .L4
  68              	.L9:
  69              	.LBB2:
  37:../cleanflight/src/main/common/typeconversion.c ****         int dgt = num / d;
  70              	 .loc 1 37 0
  71 002e FA68     	 ldr r2,[r7,#12]
  72 0030 7B69     	 ldr r3,[r7,#20]
  73 0032 B2FBF3F3 	 udiv r3,r2,r3
  74 0036 3B61     	 str r3,[r7,#16]
  38:../cleanflight/src/main/common/typeconversion.c ****     *bf++ = dgt + (dgt < 10 ? '0' : (uc ? 'A' : 'a') - 10);
  75              	 .loc 1 38 0
  76 0038 3A68     	 ldr r2,[r7]
  77 003a 531C     	 adds r3,r2,#1
  78 003c 3B60     	 str r3,[r7]
  79 003e 3B69     	 ldr r3,[r7,#16]
  80 0040 092B     	 cmp r3,#9
  81 0042 06DD     	 ble .L5
  82              	 .loc 1 38 0 is_stmt 0 discriminator 1
  83 0044 7B68     	 ldr r3,[r7,#4]
  84 0046 002B     	 cmp r3,#0
  85 0048 01D0     	 beq .L6
  86              	 .loc 1 38 0 discriminator 3
  87 004a 3723     	 movs r3,#55
  88 004c 02E0     	 b .L8
  89              	.L6:
  90              	 .loc 1 38 0 discriminator 4
  91 004e 5723     	 movs r3,#87
  92 0050 00E0     	 b .L8
  93              	.L5:
  94              	 .loc 1 38 0 discriminator 2
  95 0052 3023     	 movs r3,#48
  96              	.L8:
  97              	 .loc 1 38 0 discriminator 8
  98 0054 3969     	 ldr r1,[r7,#16]
  99 0056 C9B2     	 uxtb r1,r1
 100 0058 0B44     	 add r3,r3,r1
 101 005a DBB2     	 uxtb r3,r3
 102 005c 1370     	 strb r3,[r2]
  39:../cleanflight/src/main/common/typeconversion.c **** 
  40:../cleanflight/src/main/common/typeconversion.c ****     // Next digit
  41:../cleanflight/src/main/common/typeconversion.c ****         num %= d;
 103              	 .loc 1 41 0 is_stmt 1 discriminator 8
 104 005e FB68     	 ldr r3,[r7,#12]
 105 0060 7A69     	 ldr r2,[r7,#20]
 106 0062 B3FBF2F2 	 udiv r2,r3,r2
 107 0066 7969     	 ldr r1,[r7,#20]
 108 0068 01FB02F2 	 mul r2,r1,r2
 109 006c 9B1A     	 subs r3,r3,r2
 110 006e FB60     	 str r3,[r7,#12]
  42:../cleanflight/src/main/common/typeconversion.c ****         d /= base;
 111              	 .loc 1 42 0 discriminator 8
 112 0070 7A69     	 ldr r2,[r7,#20]
 113 0072 BB68     	 ldr r3,[r7,#8]
 114 0074 B2FBF3F3 	 udiv r3,r2,r3
 115 0078 7B61     	 str r3,[r7,#20]
 116              	.L4:
 117              	.LBE2:
  36:../cleanflight/src/main/common/typeconversion.c ****         int dgt = num / d;
 118              	 .loc 1 36 0
 119 007a 7B69     	 ldr r3,[r7,#20]
 120 007c 002B     	 cmp r3,#0
 121 007e D6D1     	 bne .L9
  43:../cleanflight/src/main/common/typeconversion.c ****     }
  44:../cleanflight/src/main/common/typeconversion.c ****     *bf = 0;
 122              	 .loc 1 44 0
 123 0080 3B68     	 ldr r3,[r7]
 124 0082 0022     	 movs r2,#0
 125 0084 1A70     	 strb r2,[r3]
  45:../cleanflight/src/main/common/typeconversion.c **** }
 126              	 .loc 1 45 0
 127 0086 1C37     	 adds r7,r7,#28
 128              	.LCFI3:
 129              	 .cfi_def_cfa_offset 4
 130 0088 BD46     	 mov sp,r7
 131              	.LCFI4:
 132              	 .cfi_def_cfa_register 13
 133              	 
 134 008a 5DF8047B 	 ldr r7,[sp],#4
 135              	.LCFI5:
 136              	 .cfi_restore 7
 137              	 .cfi_def_cfa_offset 0
 138 008e 7047     	 bx lr
 139              	 .cfi_endproc
 140              	.LFE2:
 142              	 .section .text.li2a,"ax",%progbits
 143              	 .align 2
 144              	 .global li2a
 145              	 .thumb
 146              	 .thumb_func
 148              	li2a:
 149              	.LFB3:
  46:../cleanflight/src/main/common/typeconversion.c **** 
  47:../cleanflight/src/main/common/typeconversion.c **** void li2a(long num, char *bf)
  48:../cleanflight/src/main/common/typeconversion.c **** {
 150              	 .loc 1 48 0
 151              	 .cfi_startproc
 152              	 
 153              	 
 154 0000 80B5     	 push {r7,lr}
 155              	.LCFI6:
 156              	 .cfi_def_cfa_offset 8
 157              	 .cfi_offset 7,-8
 158              	 .cfi_offset 14,-4
 159 0002 82B0     	 sub sp,sp,#8
 160              	.LCFI7:
 161              	 .cfi_def_cfa_offset 16
 162 0004 00AF     	 add r7,sp,#0
 163              	.LCFI8:
 164              	 .cfi_def_cfa_register 7
 165 0006 7860     	 str r0,[r7,#4]
 166 0008 3960     	 str r1,[r7]
  49:../cleanflight/src/main/common/typeconversion.c ****     if (num < 0) {
 167              	 .loc 1 49 0
 168 000a 7B68     	 ldr r3,[r7,#4]
 169 000c 002B     	 cmp r3,#0
 170 000e 07DA     	 bge .L11
  50:../cleanflight/src/main/common/typeconversion.c ****         num = -num;
 171              	 .loc 1 50 0
 172 0010 7B68     	 ldr r3,[r7,#4]
 173 0012 5B42     	 negs r3,r3
 174 0014 7B60     	 str r3,[r7,#4]
  51:../cleanflight/src/main/common/typeconversion.c ****         *bf++ = '-';
 175              	 .loc 1 51 0
 176 0016 3B68     	 ldr r3,[r7]
 177 0018 5A1C     	 adds r2,r3,#1
 178 001a 3A60     	 str r2,[r7]
 179 001c 2D22     	 movs r2,#45
 180 001e 1A70     	 strb r2,[r3]
 181              	.L11:
  52:../cleanflight/src/main/common/typeconversion.c ****     }
  53:../cleanflight/src/main/common/typeconversion.c ****     uli2a(num, 10, 0, bf);
 182              	 .loc 1 53 0
 183 0020 7B68     	 ldr r3,[r7,#4]
 184 0022 1846     	 mov r0,r3
 185 0024 0A21     	 movs r1,#10
 186 0026 0022     	 movs r2,#0
 187 0028 3B68     	 ldr r3,[r7]
 188 002a FFF7FEFF 	 bl uli2a
  54:../cleanflight/src/main/common/typeconversion.c **** }
 189              	 .loc 1 54 0
 190 002e 0837     	 adds r7,r7,#8
 191              	.LCFI9:
 192              	 .cfi_def_cfa_offset 8
 193 0030 BD46     	 mov sp,r7
 194              	.LCFI10:
 195              	 .cfi_def_cfa_register 13
 196              	 
 197 0032 80BD     	 pop {r7,pc}
 198              	 .cfi_endproc
 199              	.LFE3:
 201              	 .section .text.ui2a,"ax",%progbits
 202              	 .align 2
 203              	 .global ui2a
 204              	 .thumb
 205              	 .thumb_func
 207              	ui2a:
 208              	.LFB4:
  55:../cleanflight/src/main/common/typeconversion.c **** 
  56:../cleanflight/src/main/common/typeconversion.c **** #endif
  57:../cleanflight/src/main/common/typeconversion.c **** 
  58:../cleanflight/src/main/common/typeconversion.c **** void ui2a(unsigned int num, unsigned int base, int uc, char *bf)
  59:../cleanflight/src/main/common/typeconversion.c **** {
 209              	 .loc 1 59 0
 210              	 .cfi_startproc
 211              	 
 212              	 
 213              	 
 214 0000 80B4     	 push {r7}
 215              	.LCFI11:
 216              	 .cfi_def_cfa_offset 4
 217              	 .cfi_offset 7,-4
 218 0002 87B0     	 sub sp,sp,#28
 219              	.LCFI12:
 220              	 .cfi_def_cfa_offset 32
 221 0004 00AF     	 add r7,sp,#0
 222              	.LCFI13:
 223              	 .cfi_def_cfa_register 7
 224 0006 F860     	 str r0,[r7,#12]
 225 0008 B960     	 str r1,[r7,#8]
 226 000a 7A60     	 str r2,[r7,#4]
 227 000c 3B60     	 str r3,[r7]
  60:../cleanflight/src/main/common/typeconversion.c ****     unsigned int d = 1;
 228              	 .loc 1 60 0
 229 000e 0123     	 movs r3,#1
 230 0010 7B61     	 str r3,[r7,#20]
  61:../cleanflight/src/main/common/typeconversion.c **** 
  62:../cleanflight/src/main/common/typeconversion.c ****     while (num / d >= base)
 231              	 .loc 1 62 0
 232 0012 04E0     	 b .L13
 233              	.L14:
  63:../cleanflight/src/main/common/typeconversion.c ****         d *= base;
 234              	 .loc 1 63 0
 235 0014 7B69     	 ldr r3,[r7,#20]
 236 0016 BA68     	 ldr r2,[r7,#8]
 237 0018 02FB03F3 	 mul r3,r2,r3
 238 001c 7B61     	 str r3,[r7,#20]
 239              	.L13:
  62:../cleanflight/src/main/common/typeconversion.c ****         d *= base;
 240              	 .loc 1 62 0
 241 001e FA68     	 ldr r2,[r7,#12]
 242 0020 7B69     	 ldr r3,[r7,#20]
 243 0022 B2FBF3F2 	 udiv r2,r2,r3
 244 0026 BB68     	 ldr r3,[r7,#8]
 245 0028 9A42     	 cmp r2,r3
 246 002a F3D2     	 bcs .L14
  64:../cleanflight/src/main/common/typeconversion.c **** 
  65:../cleanflight/src/main/common/typeconversion.c ****     while (d != 0) {
 247              	 .loc 1 65 0
 248 002c 25E0     	 b .L15
 249              	.L20:
 250              	.LBB3:
  66:../cleanflight/src/main/common/typeconversion.c ****         int dgt = num / d;
 251              	 .loc 1 66 0
 252 002e FA68     	 ldr r2,[r7,#12]
 253 0030 7B69     	 ldr r3,[r7,#20]
 254 0032 B2FBF3F3 	 udiv r3,r2,r3
 255 0036 3B61     	 str r3,[r7,#16]
  67:../cleanflight/src/main/common/typeconversion.c ****     *bf++ = dgt + (dgt < 10 ? '0' : (uc ? 'A' : 'a') - 10);
 256              	 .loc 1 67 0
 257 0038 3A68     	 ldr r2,[r7]
 258 003a 531C     	 adds r3,r2,#1
 259 003c 3B60     	 str r3,[r7]
 260 003e 3B69     	 ldr r3,[r7,#16]
 261 0040 092B     	 cmp r3,#9
 262 0042 06DD     	 ble .L16
 263              	 .loc 1 67 0 is_stmt 0 discriminator 1
 264 0044 7B68     	 ldr r3,[r7,#4]
 265 0046 002B     	 cmp r3,#0
 266 0048 01D0     	 beq .L17
 267              	 .loc 1 67 0 discriminator 3
 268 004a 3723     	 movs r3,#55
 269 004c 02E0     	 b .L19
 270              	.L17:
 271              	 .loc 1 67 0 discriminator 4
 272 004e 5723     	 movs r3,#87
 273 0050 00E0     	 b .L19
 274              	.L16:
 275              	 .loc 1 67 0 discriminator 2
 276 0052 3023     	 movs r3,#48
 277              	.L19:
 278              	 .loc 1 67 0 discriminator 8
 279 0054 3969     	 ldr r1,[r7,#16]
 280 0056 C9B2     	 uxtb r1,r1
 281 0058 0B44     	 add r3,r3,r1
 282 005a DBB2     	 uxtb r3,r3
 283 005c 1370     	 strb r3,[r2]
  68:../cleanflight/src/main/common/typeconversion.c **** 
  69:../cleanflight/src/main/common/typeconversion.c ****     // Next digit
  70:../cleanflight/src/main/common/typeconversion.c ****         num %= d;
 284              	 .loc 1 70 0 is_stmt 1 discriminator 8
 285 005e FB68     	 ldr r3,[r7,#12]
 286 0060 7A69     	 ldr r2,[r7,#20]
 287 0062 B3FBF2F2 	 udiv r2,r3,r2
 288 0066 7969     	 ldr r1,[r7,#20]
 289 0068 01FB02F2 	 mul r2,r1,r2
 290 006c 9B1A     	 subs r3,r3,r2
 291 006e FB60     	 str r3,[r7,#12]
  71:../cleanflight/src/main/common/typeconversion.c ****         d /= base;
 292              	 .loc 1 71 0 discriminator 8
 293 0070 7A69     	 ldr r2,[r7,#20]
 294 0072 BB68     	 ldr r3,[r7,#8]
 295 0074 B2FBF3F3 	 udiv r3,r2,r3
 296 0078 7B61     	 str r3,[r7,#20]
 297              	.L15:
 298              	.LBE3:
  65:../cleanflight/src/main/common/typeconversion.c ****         int dgt = num / d;
 299              	 .loc 1 65 0
 300 007a 7B69     	 ldr r3,[r7,#20]
 301 007c 002B     	 cmp r3,#0
 302 007e D6D1     	 bne .L20
  72:../cleanflight/src/main/common/typeconversion.c ****     }
  73:../cleanflight/src/main/common/typeconversion.c ****     *bf = 0;
 303              	 .loc 1 73 0
 304 0080 3B68     	 ldr r3,[r7]
 305 0082 0022     	 movs r2,#0
 306 0084 1A70     	 strb r2,[r3]
  74:../cleanflight/src/main/common/typeconversion.c **** }
 307              	 .loc 1 74 0
 308 0086 1C37     	 adds r7,r7,#28
 309              	.LCFI14:
 310              	 .cfi_def_cfa_offset 4
 311 0088 BD46     	 mov sp,r7
 312              	.LCFI15:
 313              	 .cfi_def_cfa_register 13
 314              	 
 315 008a 5DF8047B 	 ldr r7,[sp],#4
 316              	.LCFI16:
 317              	 .cfi_restore 7
 318              	 .cfi_def_cfa_offset 0
 319 008e 7047     	 bx lr
 320              	 .cfi_endproc
 321              	.LFE4:
 323              	 .section .text.i2a,"ax",%progbits
 324              	 .align 2
 325              	 .global i2a
 326              	 .thumb
 327              	 .thumb_func
 329              	i2a:
 330              	.LFB5:
  75:../cleanflight/src/main/common/typeconversion.c **** 
  76:../cleanflight/src/main/common/typeconversion.c **** void i2a(int num, char *bf)
  77:../cleanflight/src/main/common/typeconversion.c **** {
 331              	 .loc 1 77 0
 332              	 .cfi_startproc
 333              	 
 334              	 
 335 0000 80B5     	 push {r7,lr}
 336              	.LCFI17:
 337              	 .cfi_def_cfa_offset 8
 338              	 .cfi_offset 7,-8
 339              	 .cfi_offset 14,-4
 340 0002 82B0     	 sub sp,sp,#8
 341              	.LCFI18:
 342              	 .cfi_def_cfa_offset 16
 343 0004 00AF     	 add r7,sp,#0
 344              	.LCFI19:
 345              	 .cfi_def_cfa_register 7
 346 0006 7860     	 str r0,[r7,#4]
 347 0008 3960     	 str r1,[r7]
  78:../cleanflight/src/main/common/typeconversion.c ****     if (num < 0) {
 348              	 .loc 1 78 0
 349 000a 7B68     	 ldr r3,[r7,#4]
 350 000c 002B     	 cmp r3,#0
 351 000e 07DA     	 bge .L22
  79:../cleanflight/src/main/common/typeconversion.c ****         num = -num;
 352              	 .loc 1 79 0
 353 0010 7B68     	 ldr r3,[r7,#4]
 354 0012 5B42     	 negs r3,r3
 355 0014 7B60     	 str r3,[r7,#4]
  80:../cleanflight/src/main/common/typeconversion.c ****         *bf++ = '-';
 356              	 .loc 1 80 0
 357 0016 3B68     	 ldr r3,[r7]
 358 0018 5A1C     	 adds r2,r3,#1
 359 001a 3A60     	 str r2,[r7]
 360 001c 2D22     	 movs r2,#45
 361 001e 1A70     	 strb r2,[r3]
 362              	.L22:
  81:../cleanflight/src/main/common/typeconversion.c ****     }
  82:../cleanflight/src/main/common/typeconversion.c ****     ui2a(num, 10, 0, bf);
 363              	 .loc 1 82 0
 364 0020 7B68     	 ldr r3,[r7,#4]
 365 0022 1846     	 mov r0,r3
 366 0024 0A21     	 movs r1,#10
 367 0026 0022     	 movs r2,#0
 368 0028 3B68     	 ldr r3,[r7]
 369 002a FFF7FEFF 	 bl ui2a
  83:../cleanflight/src/main/common/typeconversion.c **** }
 370              	 .loc 1 83 0
 371 002e 0837     	 adds r7,r7,#8
 372              	.LCFI20:
 373              	 .cfi_def_cfa_offset 8
 374 0030 BD46     	 mov sp,r7
 375              	.LCFI21:
 376              	 .cfi_def_cfa_register 13
 377              	 
 378 0032 80BD     	 pop {r7,pc}
 379              	 .cfi_endproc
 380              	.LFE5:
 382              	 .section .text.a2d,"ax",%progbits
 383              	 .align 2
 384              	 .global a2d
 385              	 .thumb
 386              	 .thumb_func
 388              	a2d:
 389              	.LFB6:
  84:../cleanflight/src/main/common/typeconversion.c **** 
  85:../cleanflight/src/main/common/typeconversion.c **** int a2d(char ch)
  86:../cleanflight/src/main/common/typeconversion.c **** {
 390              	 .loc 1 86 0
 391              	 .cfi_startproc
 392              	 
 393              	 
 394              	 
 395 0000 80B4     	 push {r7}
 396              	.LCFI22:
 397              	 .cfi_def_cfa_offset 4
 398              	 .cfi_offset 7,-4
 399 0002 83B0     	 sub sp,sp,#12
 400              	.LCFI23:
 401              	 .cfi_def_cfa_offset 16
 402 0004 00AF     	 add r7,sp,#0
 403              	.LCFI24:
 404              	 .cfi_def_cfa_register 7
 405 0006 0346     	 mov r3,r0
 406 0008 FB71     	 strb r3,[r7,#7]
  87:../cleanflight/src/main/common/typeconversion.c ****     if (ch >= '0' && ch <= '9')
 407              	 .loc 1 87 0
 408 000a FB79     	 ldrb r3,[r7,#7]
 409 000c 2F2B     	 cmp r3,#47
 410 000e 05D9     	 bls .L24
 411              	 .loc 1 87 0 is_stmt 0 discriminator 1
 412 0010 FB79     	 ldrb r3,[r7,#7]
 413 0012 392B     	 cmp r3,#57
 414 0014 02D8     	 bhi .L24
  88:../cleanflight/src/main/common/typeconversion.c ****         return ch - '0';
 415              	 .loc 1 88 0 is_stmt 1
 416 0016 FB79     	 ldrb r3,[r7,#7]
 417 0018 303B     	 subs r3,r3,#48
 418 001a 13E0     	 b .L25
 419              	.L24:
  89:../cleanflight/src/main/common/typeconversion.c ****     else if (ch >= 'a' && ch <= 'f')
 420              	 .loc 1 89 0
 421 001c FB79     	 ldrb r3,[r7,#7]
 422 001e 602B     	 cmp r3,#96
 423 0020 05D9     	 bls .L26
 424              	 .loc 1 89 0 is_stmt 0 discriminator 1
 425 0022 FB79     	 ldrb r3,[r7,#7]
 426 0024 662B     	 cmp r3,#102
 427 0026 02D8     	 bhi .L26
  90:../cleanflight/src/main/common/typeconversion.c ****         return ch - 'a' + 10;
 428              	 .loc 1 90 0 is_stmt 1
 429 0028 FB79     	 ldrb r3,[r7,#7]
 430 002a 573B     	 subs r3,r3,#87
 431 002c 0AE0     	 b .L25
 432              	.L26:
  91:../cleanflight/src/main/common/typeconversion.c ****     else if (ch >= 'A' && ch <= 'F')
 433              	 .loc 1 91 0
 434 002e FB79     	 ldrb r3,[r7,#7]
 435 0030 402B     	 cmp r3,#64
 436 0032 05D9     	 bls .L27
 437              	 .loc 1 91 0 is_stmt 0 discriminator 1
 438 0034 FB79     	 ldrb r3,[r7,#7]
 439 0036 462B     	 cmp r3,#70
 440 0038 02D8     	 bhi .L27
  92:../cleanflight/src/main/common/typeconversion.c ****         return ch - 'A' + 10;
 441              	 .loc 1 92 0 is_stmt 1
 442 003a FB79     	 ldrb r3,[r7,#7]
 443 003c 373B     	 subs r3,r3,#55
 444 003e 01E0     	 b .L25
 445              	.L27:
  93:../cleanflight/src/main/common/typeconversion.c ****     else
  94:../cleanflight/src/main/common/typeconversion.c ****         return -1;
 446              	 .loc 1 94 0
 447 0040 4FF0FF33 	 mov r3,#-1
 448              	.L25:
  95:../cleanflight/src/main/common/typeconversion.c **** }
 449              	 .loc 1 95 0
 450 0044 1846     	 mov r0,r3
 451 0046 0C37     	 adds r7,r7,#12
 452              	.LCFI25:
 453              	 .cfi_def_cfa_offset 4
 454 0048 BD46     	 mov sp,r7
 455              	.LCFI26:
 456              	 .cfi_def_cfa_register 13
 457              	 
 458 004a 5DF8047B 	 ldr r7,[sp],#4
 459              	.LCFI27:
 460              	 .cfi_restore 7
 461              	 .cfi_def_cfa_offset 0
 462 004e 7047     	 bx lr
 463              	 .cfi_endproc
 464              	.LFE6:
 466              	 .section .text.a2i,"ax",%progbits
 467              	 .align 2
 468              	 .global a2i
 469              	 .thumb
 470              	 .thumb_func
 472              	a2i:
 473              	.LFB7:
  96:../cleanflight/src/main/common/typeconversion.c **** 
  97:../cleanflight/src/main/common/typeconversion.c **** char a2i(char ch, const char **src, int base, int *nump)
  98:../cleanflight/src/main/common/typeconversion.c **** {
 474              	 .loc 1 98 0
 475              	 .cfi_startproc
 476              	 
 477              	 
 478 0000 80B5     	 push {r7,lr}
 479              	.LCFI28:
 480              	 .cfi_def_cfa_offset 8
 481              	 .cfi_offset 7,-8
 482              	 .cfi_offset 14,-4
 483 0002 88B0     	 sub sp,sp,#32
 484              	.LCFI29:
 485              	 .cfi_def_cfa_offset 40
 486 0004 00AF     	 add r7,sp,#0
 487              	.LCFI30:
 488              	 .cfi_def_cfa_register 7
 489 0006 B960     	 str r1,[r7,#8]
 490 0008 7A60     	 str r2,[r7,#4]
 491 000a 3B60     	 str r3,[r7]
 492 000c 0346     	 mov r3,r0
 493 000e FB73     	 strb r3,[r7,#15]
  99:../cleanflight/src/main/common/typeconversion.c ****     const char *p = *src;
 494              	 .loc 1 99 0
 495 0010 BB68     	 ldr r3,[r7,#8]
 496 0012 1B68     	 ldr r3,[r3]
 497 0014 FB61     	 str r3,[r7,#28]
 100:../cleanflight/src/main/common/typeconversion.c ****     int num = 0;
 498              	 .loc 1 100 0
 499 0016 0023     	 movs r3,#0
 500 0018 BB61     	 str r3,[r7,#24]
 101:../cleanflight/src/main/common/typeconversion.c ****     int digit;
 102:../cleanflight/src/main/common/typeconversion.c ****     while ((digit = a2d(ch)) >= 0) {
 501              	 .loc 1 102 0
 502 001a 10E0     	 b .L29
 503              	.L32:
 103:../cleanflight/src/main/common/typeconversion.c ****         if (digit > base)
 504              	 .loc 1 103 0
 505 001c 7A69     	 ldr r2,[r7,#20]
 506 001e 7B68     	 ldr r3,[r7,#4]
 507 0020 9A42     	 cmp r2,r3
 508 0022 00DD     	 ble .L30
 104:../cleanflight/src/main/common/typeconversion.c ****             break;
 509              	 .loc 1 104 0
 510 0024 13E0     	 b .L31
 511              	.L30:
 105:../cleanflight/src/main/common/typeconversion.c ****         num = num * base + digit;
 512              	 .loc 1 105 0
 513 0026 BB69     	 ldr r3,[r7,#24]
 514 0028 7A68     	 ldr r2,[r7,#4]
 515 002a 02FB03F2 	 mul r2,r2,r3
 516 002e 7B69     	 ldr r3,[r7,#20]
 517 0030 1344     	 add r3,r3,r2
 518 0032 BB61     	 str r3,[r7,#24]
 106:../cleanflight/src/main/common/typeconversion.c ****         ch = *p++;
 519              	 .loc 1 106 0
 520 0034 FB69     	 ldr r3,[r7,#28]
 521 0036 5A1C     	 adds r2,r3,#1
 522 0038 FA61     	 str r2,[r7,#28]
 523 003a 1B78     	 ldrb r3,[r3]
 524 003c FB73     	 strb r3,[r7,#15]
 525              	.L29:
 102:../cleanflight/src/main/common/typeconversion.c ****         if (digit > base)
 526              	 .loc 1 102 0
 527 003e FB7B     	 ldrb r3,[r7,#15]
 528 0040 1846     	 mov r0,r3
 529 0042 FFF7FEFF 	 bl a2d
 530 0046 7861     	 str r0,[r7,#20]
 531 0048 7B69     	 ldr r3,[r7,#20]
 532 004a 002B     	 cmp r3,#0
 533 004c E6DA     	 bge .L32
 534              	.L31:
 107:../cleanflight/src/main/common/typeconversion.c ****     }
 108:../cleanflight/src/main/common/typeconversion.c ****     *src = p;
 535              	 .loc 1 108 0
 536 004e BB68     	 ldr r3,[r7,#8]
 537 0050 FA69     	 ldr r2,[r7,#28]
 538 0052 1A60     	 str r2,[r3]
 109:../cleanflight/src/main/common/typeconversion.c ****     *nump = num;
 539              	 .loc 1 109 0
 540 0054 3B68     	 ldr r3,[r7]
 541 0056 BA69     	 ldr r2,[r7,#24]
 542 0058 1A60     	 str r2,[r3]
 110:../cleanflight/src/main/common/typeconversion.c ****     return ch;
 543              	 .loc 1 110 0
 544 005a FB7B     	 ldrb r3,[r7,#15]
 111:../cleanflight/src/main/common/typeconversion.c **** }
 545              	 .loc 1 111 0
 546 005c 1846     	 mov r0,r3
 547 005e 2037     	 adds r7,r7,#32
 548              	.LCFI31:
 549              	 .cfi_def_cfa_offset 8
 550 0060 BD46     	 mov sp,r7
 551              	.LCFI32:
 552              	 .cfi_def_cfa_register 13
 553              	 
 554 0062 80BD     	 pop {r7,pc}
 555              	 .cfi_endproc
 556              	.LFE7:
 558              	 .section .rodata
 559              	 .align 2
 560              	.LC0:
 561 0000 30313233 	 .ascii "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\000"
 561      34353637 
 561      38394142 
 561      43444546 
 561      4748494A 
 562              	 .section .text._i2a,"ax",%progbits
 563              	 .align 2
 564              	 .thumb
 565              	 .thumb_func
 567              	_i2a:
 568              	.LFB8:
 112:../cleanflight/src/main/common/typeconversion.c **** 
 113:../cleanflight/src/main/common/typeconversion.c **** #ifndef HAVE_ITOA_FUNCTION
 114:../cleanflight/src/main/common/typeconversion.c **** 
 115:../cleanflight/src/main/common/typeconversion.c **** /*
 116:../cleanflight/src/main/common/typeconversion.c ****  ** The following two functions together make up an itoa()
 117:../cleanflight/src/main/common/typeconversion.c ****  ** implementation. Function i2a() is a 'private' function
 118:../cleanflight/src/main/common/typeconversion.c ****  ** called by the public itoa() function.
 119:../cleanflight/src/main/common/typeconversion.c ****  **
 120:../cleanflight/src/main/common/typeconversion.c ****  ** itoa() takes three arguments:
 121:../cleanflight/src/main/common/typeconversion.c ****  **        1) the integer to be converted,
 122:../cleanflight/src/main/common/typeconversion.c ****  **        2) a pointer to a character conversion buffer,
 123:../cleanflight/src/main/common/typeconversion.c ****  **        3) the radix for the conversion
 124:../cleanflight/src/main/common/typeconversion.c ****  **           which can range between 2 and 36 inclusive
 125:../cleanflight/src/main/common/typeconversion.c ****  **           range errors on the radix default it to base10
 126:../cleanflight/src/main/common/typeconversion.c ****  ** Code from http://groups.google.com/group/comp.lang.c/msg/66552ef8b04fe1ab?pli=1
 127:../cleanflight/src/main/common/typeconversion.c ****  */
 128:../cleanflight/src/main/common/typeconversion.c **** 
 129:../cleanflight/src/main/common/typeconversion.c **** static char *_i2a(unsigned i, char *a, unsigned base)
 130:../cleanflight/src/main/common/typeconversion.c **** {
 569              	 .loc 1 130 0
 570              	 .cfi_startproc
 571              	 
 572              	 
 573 0000 80B5     	 push {r7,lr}
 574              	.LCFI33:
 575              	 .cfi_def_cfa_offset 8
 576              	 .cfi_offset 7,-8
 577              	 .cfi_offset 14,-4
 578 0002 84B0     	 sub sp,sp,#16
 579              	.LCFI34:
 580              	 .cfi_def_cfa_offset 24
 581 0004 00AF     	 add r7,sp,#0
 582              	.LCFI35:
 583              	 .cfi_def_cfa_register 7
 584 0006 F860     	 str r0,[r7,#12]
 585 0008 B960     	 str r1,[r7,#8]
 586 000a 7A60     	 str r2,[r7,#4]
 131:../cleanflight/src/main/common/typeconversion.c ****     if (i / base > 0)
 587              	 .loc 1 131 0
 588 000c FA68     	 ldr r2,[r7,#12]
 589 000e 7B68     	 ldr r3,[r7,#4]
 590 0010 B2FBF3F3 	 udiv r3,r2,r3
 591 0014 002B     	 cmp r3,#0
 592 0016 09D0     	 beq .L35
 132:../cleanflight/src/main/common/typeconversion.c ****         a = _i2a(i / base, a, base);
 593              	 .loc 1 132 0
 594 0018 FA68     	 ldr r2,[r7,#12]
 595 001a 7B68     	 ldr r3,[r7,#4]
 596 001c B2FBF3F3 	 udiv r3,r2,r3
 597 0020 1846     	 mov r0,r3
 598 0022 B968     	 ldr r1,[r7,#8]
 599 0024 7A68     	 ldr r2,[r7,#4]
 600 0026 FFF7EBFF 	 bl _i2a
 601 002a B860     	 str r0,[r7,#8]
 602              	.L35:
 133:../cleanflight/src/main/common/typeconversion.c ****     *a = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[i % base];
 603              	 .loc 1 133 0
 604 002c FB68     	 ldr r3,[r7,#12]
 605 002e 7A68     	 ldr r2,[r7,#4]
 606 0030 B3FBF2F2 	 udiv r2,r3,r2
 607 0034 7968     	 ldr r1,[r7,#4]
 608 0036 01FB02F2 	 mul r2,r1,r2
 609 003a 9B1A     	 subs r3,r3,r2
 610 003c 044A     	 ldr r2,.L37
 611 003e D25C     	 ldrb r2,[r2,r3]
 612 0040 BB68     	 ldr r3,[r7,#8]
 613 0042 1A70     	 strb r2,[r3]
 134:../cleanflight/src/main/common/typeconversion.c ****     return a + 1;
 614              	 .loc 1 134 0
 615 0044 BB68     	 ldr r3,[r7,#8]
 616 0046 0133     	 adds r3,r3,#1
 135:../cleanflight/src/main/common/typeconversion.c **** }
 617              	 .loc 1 135 0
 618 0048 1846     	 mov r0,r3
 619 004a 1037     	 adds r7,r7,#16
 620              	.LCFI36:
 621              	 .cfi_def_cfa_offset 8
 622 004c BD46     	 mov sp,r7
 623              	.LCFI37:
 624              	 .cfi_def_cfa_register 13
 625              	 
 626 004e 80BD     	 pop {r7,pc}
 627              	.L38:
 628              	 .align 2
 629              	.L37:
 630 0050 00000000 	 .word .LC0
 631              	 .cfi_endproc
 632              	.LFE8:
 634              	 .section .text.itoa,"ax",%progbits
 635              	 .align 2
 636              	 .global itoa
 637              	 .thumb
 638              	 .thumb_func
 640              	itoa:
 641              	.LFB9:
 136:../cleanflight/src/main/common/typeconversion.c **** 
 137:../cleanflight/src/main/common/typeconversion.c **** char *itoa(int i, char *a, int base)
 138:../cleanflight/src/main/common/typeconversion.c **** {
 642              	 .loc 1 138 0
 643              	 .cfi_startproc
 644              	 
 645              	 
 646 0000 80B5     	 push {r7,lr}
 647              	.LCFI38:
 648              	 .cfi_def_cfa_offset 8
 649              	 .cfi_offset 7,-8
 650              	 .cfi_offset 14,-4
 651 0002 84B0     	 sub sp,sp,#16
 652              	.LCFI39:
 653              	 .cfi_def_cfa_offset 24
 654 0004 00AF     	 add r7,sp,#0
 655              	.LCFI40:
 656              	 .cfi_def_cfa_register 7
 657 0006 F860     	 str r0,[r7,#12]
 658 0008 B960     	 str r1,[r7,#8]
 659 000a 7A60     	 str r2,[r7,#4]
 139:../cleanflight/src/main/common/typeconversion.c ****     if ((base < 2) || (base > 36))
 660              	 .loc 1 139 0
 661 000c 7B68     	 ldr r3,[r7,#4]
 662 000e 012B     	 cmp r3,#1
 663 0010 02DD     	 ble .L40
 664              	 .loc 1 139 0 is_stmt 0 discriminator 1
 665 0012 7B68     	 ldr r3,[r7,#4]
 666 0014 242B     	 cmp r3,#36
 667 0016 01DD     	 ble .L41
 668              	.L40:
 140:../cleanflight/src/main/common/typeconversion.c ****         base = 10;
 669              	 .loc 1 140 0 is_stmt 1
 670 0018 0A23     	 movs r3,#10
 671 001a 7B60     	 str r3,[r7,#4]
 672              	.L41:
 141:../cleanflight/src/main/common/typeconversion.c ****     if (i < 0) {
 673              	 .loc 1 141 0
 674 001c FB68     	 ldr r3,[r7,#12]
 675 001e 002B     	 cmp r3,#0
 676 0020 10DA     	 bge .L42
 142:../cleanflight/src/main/common/typeconversion.c ****         *a = '-';
 677              	 .loc 1 142 0
 678 0022 BB68     	 ldr r3,[r7,#8]
 679 0024 2D22     	 movs r2,#45
 680 0026 1A70     	 strb r2,[r3]
 143:../cleanflight/src/main/common/typeconversion.c ****         *_i2a(-(unsigned) i, a + 1, base) = 0;
 681              	 .loc 1 143 0
 682 0028 FB68     	 ldr r3,[r7,#12]
 683 002a 5942     	 negs r1,r3
 684 002c BB68     	 ldr r3,[r7,#8]
 685 002e 5A1C     	 adds r2,r3,#1
 686 0030 7B68     	 ldr r3,[r7,#4]
 687 0032 0846     	 mov r0,r1
 688 0034 1146     	 mov r1,r2
 689 0036 1A46     	 mov r2,r3
 690 0038 FFF7FEFF 	 bl _i2a
 691 003c 0346     	 mov r3,r0
 692 003e 0022     	 movs r2,#0
 693 0040 1A70     	 strb r2,[r3]
 694 0042 09E0     	 b .L43
 695              	.L42:
 144:../cleanflight/src/main/common/typeconversion.c ****     } else
 145:../cleanflight/src/main/common/typeconversion.c ****         *_i2a(i, a, base) = 0;
 696              	 .loc 1 145 0
 697 0044 FA68     	 ldr r2,[r7,#12]
 698 0046 7B68     	 ldr r3,[r7,#4]
 699 0048 1046     	 mov r0,r2
 700 004a B968     	 ldr r1,[r7,#8]
 701 004c 1A46     	 mov r2,r3
 702 004e FFF7FEFF 	 bl _i2a
 703 0052 0346     	 mov r3,r0
 704 0054 0022     	 movs r2,#0
 705 0056 1A70     	 strb r2,[r3]
 706              	.L43:
 146:../cleanflight/src/main/common/typeconversion.c ****     return a;
 707              	 .loc 1 146 0
 708 0058 BB68     	 ldr r3,[r7,#8]
 147:../cleanflight/src/main/common/typeconversion.c **** }
 709              	 .loc 1 147 0
 710 005a 1846     	 mov r0,r3
 711 005c 1037     	 adds r7,r7,#16
 712              	.LCFI41:
 713              	 .cfi_def_cfa_offset 8
 714 005e BD46     	 mov sp,r7
 715              	.LCFI42:
 716              	 .cfi_def_cfa_register 13
 717              	 
 718 0060 80BD     	 pop {r7,pc}
 719              	 .cfi_endproc
 720              	.LFE9:
 722 0062 00BF     	 .section .rodata
 723 0025 000000   	 .align 2
 724              	.LC1:
 725 0028 2E00     	 .ascii ".\000"
 726 002a 0000     	 .section .text.ftoa,"ax",%progbits
 727              	 .align 2
 728              	 .global ftoa
 729              	 .thumb
 730              	 .thumb_func
 732              	ftoa:
 733              	.LFB10:
 148:../cleanflight/src/main/common/typeconversion.c **** 
 149:../cleanflight/src/main/common/typeconversion.c **** #endif
 150:../cleanflight/src/main/common/typeconversion.c **** 
 151:../cleanflight/src/main/common/typeconversion.c **** char *ftoa(float x, char *floatString)
 152:../cleanflight/src/main/common/typeconversion.c **** {
 734              	 .loc 1 152 0
 735              	 .cfi_startproc
 736              	 
 737              	 
 738 0000 80B5     	 push {r7,lr}
 739              	.LCFI43:
 740              	 .cfi_def_cfa_offset 8
 741              	 .cfi_offset 7,-8
 742              	 .cfi_offset 14,-4
 743 0002 8CB0     	 sub sp,sp,#48
 744              	.LCFI44:
 745              	 .cfi_def_cfa_offset 56
 746 0004 00AF     	 add r7,sp,#0
 747              	.LCFI45:
 748              	 .cfi_def_cfa_register 7
 749 0006 7860     	 str r0,[r7,#4]
 750 0008 3960     	 str r1,[r7]
 153:../cleanflight/src/main/common/typeconversion.c ****     int32_t value;
 154:../cleanflight/src/main/common/typeconversion.c ****     char intString1[12];
 155:../cleanflight/src/main/common/typeconversion.c ****     char intString2[12] = { 0, };
 751              	 .loc 1 155 0
 752 000a 07F10803 	 add r3,r7,#8
 753 000e 0022     	 movs r2,#0
 754 0010 1A60     	 str r2,[r3]
 755 0012 0433     	 adds r3,r3,#4
 756 0014 0022     	 movs r2,#0
 757 0016 1A60     	 str r2,[r3]
 758 0018 0433     	 adds r3,r3,#4
 759 001a 0022     	 movs r2,#0
 760 001c 1A60     	 str r2,[r3]
 761 001e 0433     	 adds r3,r3,#4
 156:../cleanflight/src/main/common/typeconversion.c ****     char *decimalPoint = ".";
 762              	 .loc 1 156 0
 763 0020 564B     	 ldr r3,.L58
 764 0022 FB62     	 str r3,[r7,#44]
 157:../cleanflight/src/main/common/typeconversion.c ****     uint8_t dpLocation;
 158:../cleanflight/src/main/common/typeconversion.c **** 
 159:../cleanflight/src/main/common/typeconversion.c ****     if (x > 0)                  // Rounding for x.xxx display format
 765              	 .loc 1 159 0
 766 0024 D7ED017A 	 flds s15,[r7,#4]
 767 0028 F5EEC07A 	 fcmpezs s15
 768 002c F1EE10FA 	 fmstat
 769 0030 08DD     	 ble .L57
 160:../cleanflight/src/main/common/typeconversion.c ****         x += 0.0005f;
 770              	 .loc 1 160 0
 771 0032 D7ED017A 	 flds s15,[r7,#4]
 772 0036 9FED527A 	 flds s14,.L58+4
 773 003a 77EE877A 	 fadds s15,s15,s14
 774 003e C7ED017A 	 fsts s15,[r7,#4]
 775 0042 07E0     	 b .L48
 776              	.L57:
 161:../cleanflight/src/main/common/typeconversion.c ****     else
 162:../cleanflight/src/main/common/typeconversion.c ****         x -= 0.0005f;
 777              	 .loc 1 162 0
 778 0044 D7ED017A 	 flds s15,[r7,#4]
 779 0048 9FED4D7A 	 flds s14,.L58+4
 780 004c 77EEC77A 	 fsubs s15,s15,s14
 781 0050 C7ED017A 	 fsts s15,[r7,#4]
 782              	.L48:
 163:../cleanflight/src/main/common/typeconversion.c **** 
 164:../cleanflight/src/main/common/typeconversion.c ****     value = (int32_t)(x * 1000.0f);    // Convert float * 1000 to an integer
 783              	 .loc 1 164 0
 784 0054 D7ED017A 	 flds s15,[r7,#4]
 785 0058 9FED4A7A 	 flds s14,.L58+8
 786 005c 67EE877A 	 fmuls s15,s15,s14
 787 0060 FDEEE77A 	 ftosizs s15,s15
 788 0064 17EE903A 	 fmrs r3,s15
 789 0068 BB62     	 str r3,[r7,#40]
 790              	.LBB4:
 165:../cleanflight/src/main/common/typeconversion.c **** 
 166:../cleanflight/src/main/common/typeconversion.c ****     itoa(ABS(value), intString1, 10);   // Create string from abs of integer value
 791              	 .loc 1 166 0
 792 006a BB6A     	 ldr r3,[r7,#40]
 793 006c 7B62     	 str r3,[r7,#36]
 794 006e 7B6A     	 ldr r3,[r7,#36]
 795 0070 83EAE372 	 eor r2,r3,r3,asr#31
 796 0074 A2EBE372 	 sub r2,r2,r3,asr#31
 797              	.LBE4:
 798 0078 07F11403 	 add r3,r7,#20
 799 007c 1046     	 mov r0,r2
 800 007e 1946     	 mov r1,r3
 801 0080 0A22     	 movs r2,#10
 802 0082 FFF7FEFF 	 bl itoa
 167:../cleanflight/src/main/common/typeconversion.c **** 
 168:../cleanflight/src/main/common/typeconversion.c ****     if (value >= 0)
 803              	 .loc 1 168 0
 804 0086 BB6A     	 ldr r3,[r7,#40]
 805 0088 002B     	 cmp r3,#0
 806 008a 02DB     	 blt .L49
 169:../cleanflight/src/main/common/typeconversion.c ****         intString2[0] = ' ';    // Positive number, add a pad space
 807              	 .loc 1 169 0
 808 008c 2023     	 movs r3,#32
 809 008e 3B72     	 strb r3,[r7,#8]
 810 0090 01E0     	 b .L50
 811              	.L49:
 170:../cleanflight/src/main/common/typeconversion.c ****     else
 171:../cleanflight/src/main/common/typeconversion.c ****         intString2[0] = '-';    // Negative number, add a negative sign
 812              	 .loc 1 171 0
 813 0092 2D23     	 movs r3,#45
 814 0094 3B72     	 strb r3,[r7,#8]
 815              	.L50:
 172:../cleanflight/src/main/common/typeconversion.c **** 
 173:../cleanflight/src/main/common/typeconversion.c ****     if (strlen(intString1) == 1) {
 816              	 .loc 1 173 0
 817 0096 07F11403 	 add r3,r7,#20
 818 009a 1846     	 mov r0,r3
 819 009c FFF7FEFF 	 bl strlen
 820 00a0 0346     	 mov r3,r0
 821 00a2 012B     	 cmp r3,#1
 822 00a4 0ED1     	 bne .L51
 174:../cleanflight/src/main/common/typeconversion.c ****         intString2[1] = '0';
 823              	 .loc 1 174 0
 824 00a6 3023     	 movs r3,#48
 825 00a8 7B72     	 strb r3,[r7,#9]
 175:../cleanflight/src/main/common/typeconversion.c ****         intString2[2] = '0';
 826              	 .loc 1 175 0
 827 00aa 3023     	 movs r3,#48
 828 00ac BB72     	 strb r3,[r7,#10]
 176:../cleanflight/src/main/common/typeconversion.c ****         intString2[3] = '0';
 829              	 .loc 1 176 0
 830 00ae 3023     	 movs r3,#48
 831 00b0 FB72     	 strb r3,[r7,#11]
 177:../cleanflight/src/main/common/typeconversion.c ****         strcat(intString2, intString1);
 832              	 .loc 1 177 0
 833 00b2 07F10802 	 add r2,r7,#8
 834 00b6 07F11403 	 add r3,r7,#20
 835 00ba 1046     	 mov r0,r2
 836 00bc 1946     	 mov r1,r3
 837 00be FFF7FEFF 	 bl strcat
 838 00c2 2FE0     	 b .L52
 839              	.L51:
 178:../cleanflight/src/main/common/typeconversion.c ****     } else if (strlen(intString1) == 2) {
 840              	 .loc 1 178 0
 841 00c4 07F11403 	 add r3,r7,#20
 842 00c8 1846     	 mov r0,r3
 843 00ca FFF7FEFF 	 bl strlen
 844 00ce 0346     	 mov r3,r0
 845 00d0 022B     	 cmp r3,#2
 846 00d2 0CD1     	 bne .L53
 179:../cleanflight/src/main/common/typeconversion.c ****         intString2[1] = '0';
 847              	 .loc 1 179 0
 848 00d4 3023     	 movs r3,#48
 849 00d6 7B72     	 strb r3,[r7,#9]
 180:../cleanflight/src/main/common/typeconversion.c ****         intString2[2] = '0';
 850              	 .loc 1 180 0
 851 00d8 3023     	 movs r3,#48
 852 00da BB72     	 strb r3,[r7,#10]
 181:../cleanflight/src/main/common/typeconversion.c ****         strcat(intString2, intString1);
 853              	 .loc 1 181 0
 854 00dc 07F10802 	 add r2,r7,#8
 855 00e0 07F11403 	 add r3,r7,#20
 856 00e4 1046     	 mov r0,r2
 857 00e6 1946     	 mov r1,r3
 858 00e8 FFF7FEFF 	 bl strcat
 859 00ec 1AE0     	 b .L52
 860              	.L53:
 182:../cleanflight/src/main/common/typeconversion.c ****     } else if (strlen(intString1) == 3) {
 861              	 .loc 1 182 0
 862 00ee 07F11403 	 add r3,r7,#20
 863 00f2 1846     	 mov r0,r3
 864 00f4 FFF7FEFF 	 bl strlen
 865 00f8 0346     	 mov r3,r0
 866 00fa 032B     	 cmp r3,#3
 867 00fc 0AD1     	 bne .L54
 183:../cleanflight/src/main/common/typeconversion.c ****         intString2[1] = '0';
 868              	 .loc 1 183 0
 869 00fe 3023     	 movs r3,#48
 870 0100 7B72     	 strb r3,[r7,#9]
 184:../cleanflight/src/main/common/typeconversion.c ****         strcat(intString2, intString1);
 871              	 .loc 1 184 0
 872 0102 07F10802 	 add r2,r7,#8
 873 0106 07F11403 	 add r3,r7,#20
 874 010a 1046     	 mov r0,r2
 875 010c 1946     	 mov r1,r3
 876 010e FFF7FEFF 	 bl strcat
 877 0112 07E0     	 b .L52
 878              	.L54:
 185:../cleanflight/src/main/common/typeconversion.c ****     } else {
 186:../cleanflight/src/main/common/typeconversion.c ****         strcat(intString2, intString1);
 879              	 .loc 1 186 0
 880 0114 07F10802 	 add r2,r7,#8
 881 0118 07F11403 	 add r3,r7,#20
 882 011c 1046     	 mov r0,r2
 883 011e 1946     	 mov r1,r3
 884 0120 FFF7FEFF 	 bl strcat
 885              	.L52:
 187:../cleanflight/src/main/common/typeconversion.c ****     }
 188:../cleanflight/src/main/common/typeconversion.c **** 
 189:../cleanflight/src/main/common/typeconversion.c ****     dpLocation = strlen(intString2) - 3;
 886              	 .loc 1 189 0
 887 0124 07F10803 	 add r3,r7,#8
 888 0128 1846     	 mov r0,r3
 889 012a FFF7FEFF 	 bl strlen
 890 012e 0346     	 mov r3,r0
 891 0130 DBB2     	 uxtb r3,r3
 892 0132 033B     	 subs r3,r3,#3
 893 0134 87F82330 	 strb r3,[r7,#35]
 190:../cleanflight/src/main/common/typeconversion.c **** 
 191:../cleanflight/src/main/common/typeconversion.c ****     strncpy(floatString, intString2, dpLocation);
 894              	 .loc 1 191 0
 895 0138 97F82330 	 ldrb r3,[r7,#35]
 896 013c 07F10802 	 add r2,r7,#8
 897 0140 3868     	 ldr r0,[r7]
 898 0142 1146     	 mov r1,r2
 899 0144 1A46     	 mov r2,r3
 900 0146 FFF7FEFF 	 bl strncpy
 192:../cleanflight/src/main/common/typeconversion.c ****     floatString[dpLocation] = '\0';
 901              	 .loc 1 192 0
 902 014a 97F82330 	 ldrb r3,[r7,#35]
 903 014e 3A68     	 ldr r2,[r7]
 904 0150 1344     	 add r3,r3,r2
 905 0152 0022     	 movs r2,#0
 906 0154 1A70     	 strb r2,[r3]
 193:../cleanflight/src/main/common/typeconversion.c ****     strcat(floatString, decimalPoint);
 907              	 .loc 1 193 0
 908 0156 3868     	 ldr r0,[r7]
 909 0158 F96A     	 ldr r1,[r7,#44]
 910 015a FFF7FEFF 	 bl strcat
 194:../cleanflight/src/main/common/typeconversion.c ****     strcat(floatString, intString2 + dpLocation);
 911              	 .loc 1 194 0
 912 015e 97F82330 	 ldrb r3,[r7,#35]
 913 0162 07F10802 	 add r2,r7,#8
 914 0166 1344     	 add r3,r3,r2
 915 0168 3868     	 ldr r0,[r7]
 916 016a 1946     	 mov r1,r3
 917 016c FFF7FEFF 	 bl strcat
 195:../cleanflight/src/main/common/typeconversion.c **** 
 196:../cleanflight/src/main/common/typeconversion.c ****     return floatString;
 918              	 .loc 1 196 0
 919 0170 3B68     	 ldr r3,[r7]
 197:../cleanflight/src/main/common/typeconversion.c **** }
 920              	 .loc 1 197 0
 921 0172 1846     	 mov r0,r3
 922 0174 3037     	 adds r7,r7,#48
 923              	.LCFI46:
 924              	 .cfi_def_cfa_offset 8
 925 0176 BD46     	 mov sp,r7
 926              	.LCFI47:
 927              	 .cfi_def_cfa_register 13
 928              	 
 929 0178 80BD     	 pop {r7,pc}
 930              	.L59:
 931 017a 00BF     	 .align 2
 932              	.L58:
 933 017c 28000000 	 .word .LC1
 934 0180 6F12033A 	 .word 973279855
 935 0184 00007A44 	 .word 1148846080
 936              	 .cfi_endproc
 937              	.LFE10:
 939              	 .section .text.fastA2F,"ax",%progbits
 940              	 .align 2
 941              	 .global fastA2F
 942              	 .thumb
 943              	 .thumb_func
 945              	fastA2F:
 946              	.LFB11:
 198:../cleanflight/src/main/common/typeconversion.c **** 
 199:../cleanflight/src/main/common/typeconversion.c **** // Simple and fast atof (ascii to float) function.
 200:../cleanflight/src/main/common/typeconversion.c **** //
 201:../cleanflight/src/main/common/typeconversion.c **** // - Executes about 5x faster than standard MSCRT library atof().
 202:../cleanflight/src/main/common/typeconversion.c **** // - An attractive alternative if the number of calls is in the millions.
 203:../cleanflight/src/main/common/typeconversion.c **** // - Assumes input is a proper integer, fraction, or scientific format.
 204:../cleanflight/src/main/common/typeconversion.c **** // - Matches library atof() to 15 digits (except at extreme exponents).
 205:../cleanflight/src/main/common/typeconversion.c **** // - Follows atof() precedent of essentially no error checking.
 206:../cleanflight/src/main/common/typeconversion.c **** //
 207:../cleanflight/src/main/common/typeconversion.c **** // 09-May-2009 Tom Van Baak (tvb) www.LeapSecond.com
 208:../cleanflight/src/main/common/typeconversion.c **** #define white_space(c) ((c) == ' ' || (c) == '\t')
 209:../cleanflight/src/main/common/typeconversion.c **** #define valid_digit(c) ((c) >= '0' && (c) <= '9')
 210:../cleanflight/src/main/common/typeconversion.c **** float fastA2F(const char *p)
 211:../cleanflight/src/main/common/typeconversion.c **** {
 947              	 .loc 1 211 0
 948              	 .cfi_startproc
 949              	 
 950              	 
 951              	 
 952 0000 80B4     	 push {r7}
 953              	.LCFI48:
 954              	 .cfi_def_cfa_offset 4
 955              	 .cfi_offset 7,-4
 956 0002 89B0     	 sub sp,sp,#36
 957              	.LCFI49:
 958              	 .cfi_def_cfa_offset 40
 959 0004 00AF     	 add r7,sp,#0
 960              	.LCFI50:
 961              	 .cfi_def_cfa_register 7
 962 0006 7860     	 str r0,[r7,#4]
 212:../cleanflight/src/main/common/typeconversion.c ****     int frac = 0;
 963              	 .loc 1 212 0
 964 0008 0023     	 movs r3,#0
 965 000a FB61     	 str r3,[r7,#28]
 213:../cleanflight/src/main/common/typeconversion.c ****     float sign, value, scale;
 214:../cleanflight/src/main/common/typeconversion.c **** 
 215:../cleanflight/src/main/common/typeconversion.c ****     // Skip leading white space, if any.
 216:../cleanflight/src/main/common/typeconversion.c ****     while (white_space(*p)) {
 966              	 .loc 1 216 0
 967 000c 02E0     	 b .L61
 968              	.L62:
 217:../cleanflight/src/main/common/typeconversion.c ****         p += 1;
 969              	 .loc 1 217 0
 970 000e 7B68     	 ldr r3,[r7,#4]
 971 0010 0133     	 adds r3,r3,#1
 972 0012 7B60     	 str r3,[r7,#4]
 973              	.L61:
 216:../cleanflight/src/main/common/typeconversion.c ****         p += 1;
 974              	 .loc 1 216 0
 975 0014 7B68     	 ldr r3,[r7,#4]
 976 0016 1B78     	 ldrb r3,[r3]
 977 0018 202B     	 cmp r3,#32
 978 001a F8D0     	 beq .L62
 216:../cleanflight/src/main/common/typeconversion.c ****         p += 1;
 979              	 .loc 1 216 0 is_stmt 0 discriminator 1
 980 001c 7B68     	 ldr r3,[r7,#4]
 981 001e 1B78     	 ldrb r3,[r3]
 982 0020 092B     	 cmp r3,#9
 983 0022 F4D0     	 beq .L62
 218:../cleanflight/src/main/common/typeconversion.c ****     }
 219:../cleanflight/src/main/common/typeconversion.c **** 
 220:../cleanflight/src/main/common/typeconversion.c ****     // Get sign, if any.
 221:../cleanflight/src/main/common/typeconversion.c ****     sign = 1.0f;
 984              	 .loc 1 221 0 is_stmt 1
 985 0024 4FF07E53 	 mov r3,#1065353216
 986 0028 BB61     	 str r3,[r7,#24]
 222:../cleanflight/src/main/common/typeconversion.c ****     if (*p == '-') {
 987              	 .loc 1 222 0
 988 002a 7B68     	 ldr r3,[r7,#4]
 989 002c 1B78     	 ldrb r3,[r3]
 990 002e 2D2B     	 cmp r3,#45
 991 0030 05D1     	 bne .L63
 223:../cleanflight/src/main/common/typeconversion.c ****         sign = -1.0f;
 992              	 .loc 1 223 0
 993 0032 6B4B     	 ldr r3,.L86
 994 0034 BB61     	 str r3,[r7,#24]
 224:../cleanflight/src/main/common/typeconversion.c ****         p += 1;
 995              	 .loc 1 224 0
 996 0036 7B68     	 ldr r3,[r7,#4]
 997 0038 0133     	 adds r3,r3,#1
 998 003a 7B60     	 str r3,[r7,#4]
 999 003c 06E0     	 b .L64
 1000              	.L63:
 225:../cleanflight/src/main/common/typeconversion.c **** 
 226:../cleanflight/src/main/common/typeconversion.c ****     } else if (*p == '+') {
 1001              	 .loc 1 226 0
 1002 003e 7B68     	 ldr r3,[r7,#4]
 1003 0040 1B78     	 ldrb r3,[r3]
 1004 0042 2B2B     	 cmp r3,#43
 1005 0044 02D1     	 bne .L64
 227:../cleanflight/src/main/common/typeconversion.c ****         p += 1;
 1006              	 .loc 1 227 0
 1007 0046 7B68     	 ldr r3,[r7,#4]
 1008 0048 0133     	 adds r3,r3,#1
 1009 004a 7B60     	 str r3,[r7,#4]
 1010              	.L64:
 228:../cleanflight/src/main/common/typeconversion.c ****     }
 229:../cleanflight/src/main/common/typeconversion.c **** 
 230:../cleanflight/src/main/common/typeconversion.c ****     // Get digits before decimal point or exponent, if any.
 231:../cleanflight/src/main/common/typeconversion.c ****     value = 0.0f;
 1011              	 .loc 1 231 0
 1012 004c 4FF00003 	 mov r3,#0
 1013 0050 7B61     	 str r3,[r7,#20]
 232:../cleanflight/src/main/common/typeconversion.c ****     while (valid_digit(*p)) {
 1014              	 .loc 1 232 0
 1015 0052 13E0     	 b .L65
 1016              	.L67:
 233:../cleanflight/src/main/common/typeconversion.c ****         value = value * 10.0f + (*p - '0');
 1017              	 .loc 1 233 0
 1018 0054 D7ED057A 	 flds s15,[r7,#20]
 1019 0058 B2EE047A 	 fconsts s14,#36
 1020 005c 27EE877A 	 fmuls s14,s15,s14
 1021 0060 7B68     	 ldr r3,[r7,#4]
 1022 0062 1B78     	 ldrb r3,[r3]
 1023 0064 303B     	 subs r3,r3,#48
 1024 0066 07EE903A 	 fmsr s15,r3
 1025 006a F8EEE77A 	 fsitos s15,s15
 1026 006e 77EE277A 	 fadds s15,s14,s15
 1027 0072 C7ED057A 	 fsts s15,[r7,#20]
 234:../cleanflight/src/main/common/typeconversion.c ****         p += 1;
 1028              	 .loc 1 234 0
 1029 0076 7B68     	 ldr r3,[r7,#4]
 1030 0078 0133     	 adds r3,r3,#1
 1031 007a 7B60     	 str r3,[r7,#4]
 1032              	.L65:
 232:../cleanflight/src/main/common/typeconversion.c ****     while (valid_digit(*p)) {
 1033              	 .loc 1 232 0
 1034 007c 7B68     	 ldr r3,[r7,#4]
 1035 007e 1B78     	 ldrb r3,[r3]
 1036 0080 2F2B     	 cmp r3,#47
 1037 0082 03D9     	 bls .L66
 232:../cleanflight/src/main/common/typeconversion.c ****     while (valid_digit(*p)) {
 1038              	 .loc 1 232 0 is_stmt 0 discriminator 1
 1039 0084 7B68     	 ldr r3,[r7,#4]
 1040 0086 1B78     	 ldrb r3,[r3]
 1041 0088 392B     	 cmp r3,#57
 1042 008a E3D9     	 bls .L67
 1043              	.L66:
 235:../cleanflight/src/main/common/typeconversion.c ****     }
 236:../cleanflight/src/main/common/typeconversion.c **** 
 237:../cleanflight/src/main/common/typeconversion.c ****     // Get digits after decimal point, if any.
 238:../cleanflight/src/main/common/typeconversion.c ****     if (*p == '.') {
 1044              	 .loc 1 238 0 is_stmt 1
 1045 008c 7B68     	 ldr r3,[r7,#4]
 1046 008e 1B78     	 ldrb r3,[r3]
 1047 0090 2E2B     	 cmp r3,#46
 1048 0092 29D1     	 bne .L68
 1049              	.LBB5:
 239:../cleanflight/src/main/common/typeconversion.c ****         float pow10 = 10.0f;
 1050              	 .loc 1 239 0
 1051 0094 534B     	 ldr r3,.L86+4
 1052 0096 FB60     	 str r3,[r7,#12]
 240:../cleanflight/src/main/common/typeconversion.c ****         p += 1;
 1053              	 .loc 1 240 0
 1054 0098 7B68     	 ldr r3,[r7,#4]
 1055 009a 0133     	 adds r3,r3,#1
 1056 009c 7B60     	 str r3,[r7,#4]
 241:../cleanflight/src/main/common/typeconversion.c **** 
 242:../cleanflight/src/main/common/typeconversion.c ****         while (valid_digit(*p)) {
 1057              	 .loc 1 242 0
 1058 009e 1BE0     	 b .L69
 1059              	.L70:
 243:../cleanflight/src/main/common/typeconversion.c ****             value += (*p - '0') / pow10;
 1060              	 .loc 1 243 0
 1061 00a0 7B68     	 ldr r3,[r7,#4]
 1062 00a2 1B78     	 ldrb r3,[r3]
 1063 00a4 303B     	 subs r3,r3,#48
 1064 00a6 07EE903A 	 fmsr s15,r3
 1065 00aa B8EEE77A 	 fsitos s14,s15
 1066 00ae D7ED037A 	 flds s15,[r7,#12]
 1067 00b2 C7EE277A 	 fdivs s15,s14,s15
 1068 00b6 97ED057A 	 flds s14,[r7,#20]
 1069 00ba 77EE277A 	 fadds s15,s14,s15
 1070 00be C7ED057A 	 fsts s15,[r7,#20]
 244:../cleanflight/src/main/common/typeconversion.c ****             pow10 *= 10.0f;
 1071              	 .loc 1 244 0
 1072 00c2 D7ED037A 	 flds s15,[r7,#12]
 1073 00c6 B2EE047A 	 fconsts s14,#36
 1074 00ca 67EE877A 	 fmuls s15,s15,s14
 1075 00ce C7ED037A 	 fsts s15,[r7,#12]
 245:../cleanflight/src/main/common/typeconversion.c ****             p += 1;
 1076              	 .loc 1 245 0
 1077 00d2 7B68     	 ldr r3,[r7,#4]
 1078 00d4 0133     	 adds r3,r3,#1
 1079 00d6 7B60     	 str r3,[r7,#4]
 1080              	.L69:
 242:../cleanflight/src/main/common/typeconversion.c ****             value += (*p - '0') / pow10;
 1081              	 .loc 1 242 0
 1082 00d8 7B68     	 ldr r3,[r7,#4]
 1083 00da 1B78     	 ldrb r3,[r3]
 1084 00dc 2F2B     	 cmp r3,#47
 1085 00de 03D9     	 bls .L68
 242:../cleanflight/src/main/common/typeconversion.c ****             value += (*p - '0') / pow10;
 1086              	 .loc 1 242 0 is_stmt 0 discriminator 1
 1087 00e0 7B68     	 ldr r3,[r7,#4]
 1088 00e2 1B78     	 ldrb r3,[r3]
 1089 00e4 392B     	 cmp r3,#57
 1090 00e6 DBD9     	 bls .L70
 1091              	.L68:
 1092              	.LBE5:
 246:../cleanflight/src/main/common/typeconversion.c ****         }
 247:../cleanflight/src/main/common/typeconversion.c ****     }
 248:../cleanflight/src/main/common/typeconversion.c **** 
 249:../cleanflight/src/main/common/typeconversion.c ****     // Handle exponent, if any.
 250:../cleanflight/src/main/common/typeconversion.c ****     scale = 1.0f;
 1093              	 .loc 1 250 0 is_stmt 1
 1094 00e8 4FF07E53 	 mov r3,#1065353216
 1095 00ec 3B61     	 str r3,[r7,#16]
 251:../cleanflight/src/main/common/typeconversion.c ****     if ((*p == 'e') || (*p == 'E')) {
 1096              	 .loc 1 251 0
 1097 00ee 7B68     	 ldr r3,[r7,#4]
 1098 00f0 1B78     	 ldrb r3,[r3]
 1099 00f2 652B     	 cmp r3,#101
 1100 00f4 03D0     	 beq .L71
 1101              	 .loc 1 251 0 is_stmt 0 discriminator 1
 1102 00f6 7B68     	 ldr r3,[r7,#4]
 1103 00f8 1B78     	 ldrb r3,[r3]
 1104 00fa 452B     	 cmp r3,#69
 1105 00fc 53D1     	 bne .L72
 1106              	.L71:
 1107              	.LBB6:
 252:../cleanflight/src/main/common/typeconversion.c ****         unsigned int expon;
 253:../cleanflight/src/main/common/typeconversion.c ****         p += 1;
 1108              	 .loc 1 253 0 is_stmt 1
 1109 00fe 7B68     	 ldr r3,[r7,#4]
 1110 0100 0133     	 adds r3,r3,#1
 1111 0102 7B60     	 str r3,[r7,#4]
 254:../cleanflight/src/main/common/typeconversion.c **** 
 255:../cleanflight/src/main/common/typeconversion.c ****         // Get sign of exponent, if any.
 256:../cleanflight/src/main/common/typeconversion.c ****         frac = 0;
 1112              	 .loc 1 256 0
 1113 0104 0023     	 movs r3,#0
 1114 0106 FB61     	 str r3,[r7,#28]
 257:../cleanflight/src/main/common/typeconversion.c ****         if (*p == '-') {
 1115              	 .loc 1 257 0
 1116 0108 7B68     	 ldr r3,[r7,#4]
 1117 010a 1B78     	 ldrb r3,[r3]
 1118 010c 2D2B     	 cmp r3,#45
 1119 010e 05D1     	 bne .L73
 258:../cleanflight/src/main/common/typeconversion.c ****             frac = 1;
 1120              	 .loc 1 258 0
 1121 0110 0123     	 movs r3,#1
 1122 0112 FB61     	 str r3,[r7,#28]
 259:../cleanflight/src/main/common/typeconversion.c ****             p += 1;
 1123              	 .loc 1 259 0
 1124 0114 7B68     	 ldr r3,[r7,#4]
 1125 0116 0133     	 adds r3,r3,#1
 1126 0118 7B60     	 str r3,[r7,#4]
 1127 011a 06E0     	 b .L74
 1128              	.L73:
 260:../cleanflight/src/main/common/typeconversion.c **** 
 261:../cleanflight/src/main/common/typeconversion.c ****         } else if (*p == '+') {
 1129              	 .loc 1 261 0
 1130 011c 7B68     	 ldr r3,[r7,#4]
 1131 011e 1B78     	 ldrb r3,[r3]
 1132 0120 2B2B     	 cmp r3,#43
 1133 0122 02D1     	 bne .L74
 262:../cleanflight/src/main/common/typeconversion.c ****             p += 1;
 1134              	 .loc 1 262 0
 1135 0124 7B68     	 ldr r3,[r7,#4]
 1136 0126 0133     	 adds r3,r3,#1
 1137 0128 7B60     	 str r3,[r7,#4]
 1138              	.L74:
 263:../cleanflight/src/main/common/typeconversion.c ****         }
 264:../cleanflight/src/main/common/typeconversion.c **** 
 265:../cleanflight/src/main/common/typeconversion.c ****         // Get digits of exponent, if any.
 266:../cleanflight/src/main/common/typeconversion.c ****         expon = 0;
 1139              	 .loc 1 266 0
 1140 012a 0023     	 movs r3,#0
 1141 012c BB60     	 str r3,[r7,#8]
 267:../cleanflight/src/main/common/typeconversion.c ****         while (valid_digit(*p)) {
 1142              	 .loc 1 267 0
 1143 012e 0DE0     	 b .L75
 1144              	.L77:
 268:../cleanflight/src/main/common/typeconversion.c ****             expon = expon * 10 + (*p - '0');
 1145              	 .loc 1 268 0
 1146 0130 BA68     	 ldr r2,[r7,#8]
 1147 0132 1346     	 mov r3,r2
 1148 0134 9B00     	 lsls r3,r3,#2
 1149 0136 1344     	 add r3,r3,r2
 1150 0138 5B00     	 lsls r3,r3,#1
 1151 013a 1A46     	 mov r2,r3
 1152 013c 7B68     	 ldr r3,[r7,#4]
 1153 013e 1B78     	 ldrb r3,[r3]
 1154 0140 1344     	 add r3,r3,r2
 1155 0142 303B     	 subs r3,r3,#48
 1156 0144 BB60     	 str r3,[r7,#8]
 269:../cleanflight/src/main/common/typeconversion.c ****             p += 1;
 1157              	 .loc 1 269 0
 1158 0146 7B68     	 ldr r3,[r7,#4]
 1159 0148 0133     	 adds r3,r3,#1
 1160 014a 7B60     	 str r3,[r7,#4]
 1161              	.L75:
 267:../cleanflight/src/main/common/typeconversion.c ****         while (valid_digit(*p)) {
 1162              	 .loc 1 267 0
 1163 014c 7B68     	 ldr r3,[r7,#4]
 1164 014e 1B78     	 ldrb r3,[r3]
 1165 0150 2F2B     	 cmp r3,#47
 1166 0152 03D9     	 bls .L76
 267:../cleanflight/src/main/common/typeconversion.c ****         while (valid_digit(*p)) {
 1167              	 .loc 1 267 0 is_stmt 0 discriminator 1
 1168 0154 7B68     	 ldr r3,[r7,#4]
 1169 0156 1B78     	 ldrb r3,[r3]
 1170 0158 392B     	 cmp r3,#57
 1171 015a E9D9     	 bls .L77
 1172              	.L76:
 270:../cleanflight/src/main/common/typeconversion.c ****         }
 271:../cleanflight/src/main/common/typeconversion.c ****         if (expon > 308)
 1173              	 .loc 1 271 0 is_stmt 1
 1174 015c BB68     	 ldr r3,[r7,#8]
 1175 015e B3F59A7F 	 cmp r3,#308
 1176 0162 02D9     	 bls .L78
 272:../cleanflight/src/main/common/typeconversion.c ****             expon = 308;
 1177              	 .loc 1 272 0
 1178 0164 4FF49A73 	 mov r3,#308
 1179 0168 BB60     	 str r3,[r7,#8]
 1180              	.L78:
 273:../cleanflight/src/main/common/typeconversion.c **** 
 274:../cleanflight/src/main/common/typeconversion.c ****         // Calculate scaling factor.
 275:../cleanflight/src/main/common/typeconversion.c ****         // while (expon >= 50) { scale *= 1E50f; expon -= 50; }
 276:../cleanflight/src/main/common/typeconversion.c ****         while (expon >= 8) {
 1181              	 .loc 1 276 0
 1182 016a 0AE0     	 b .L79
 1183              	.L80:
 277:../cleanflight/src/main/common/typeconversion.c ****             scale *= 1E8f;
 1184              	 .loc 1 277 0
 1185 016c D7ED047A 	 flds s15,[r7,#16]
 1186 0170 9FED1D7A 	 flds s14,.L86+8
 1187 0174 67EE877A 	 fmuls s15,s15,s14
 1188 0178 C7ED047A 	 fsts s15,[r7,#16]
 278:../cleanflight/src/main/common/typeconversion.c ****             expon -= 8;
 1189              	 .loc 1 278 0
 1190 017c BB68     	 ldr r3,[r7,#8]
 1191 017e 083B     	 subs r3,r3,#8
 1192 0180 BB60     	 str r3,[r7,#8]
 1193              	.L79:
 276:../cleanflight/src/main/common/typeconversion.c ****             scale *= 1E8f;
 1194              	 .loc 1 276 0
 1195 0182 BB68     	 ldr r3,[r7,#8]
 1196 0184 072B     	 cmp r3,#7
 1197 0186 F1D8     	 bhi .L80
 279:../cleanflight/src/main/common/typeconversion.c ****         }
 280:../cleanflight/src/main/common/typeconversion.c ****         while (expon > 0) {
 1198              	 .loc 1 280 0
 1199 0188 0AE0     	 b .L81
 1200              	.L82:
 281:../cleanflight/src/main/common/typeconversion.c ****             scale *= 10.0f;
 1201              	 .loc 1 281 0
 1202 018a D7ED047A 	 flds s15,[r7,#16]
 1203 018e B2EE047A 	 fconsts s14,#36
 1204 0192 67EE877A 	 fmuls s15,s15,s14
 1205 0196 C7ED047A 	 fsts s15,[r7,#16]
 282:../cleanflight/src/main/common/typeconversion.c ****             expon -= 1;
 1206              	 .loc 1 282 0
 1207 019a BB68     	 ldr r3,[r7,#8]
 1208 019c 013B     	 subs r3,r3,#1
 1209 019e BB60     	 str r3,[r7,#8]
 1210              	.L81:
 280:../cleanflight/src/main/common/typeconversion.c ****             scale *= 10.0f;
 1211              	 .loc 1 280 0
 1212 01a0 BB68     	 ldr r3,[r7,#8]
 1213 01a2 002B     	 cmp r3,#0
 1214 01a4 F1D1     	 bne .L82
 1215              	.L72:
 1216              	.LBE6:
 283:../cleanflight/src/main/common/typeconversion.c ****         }
 284:../cleanflight/src/main/common/typeconversion.c ****     }
 285:../cleanflight/src/main/common/typeconversion.c **** 
 286:../cleanflight/src/main/common/typeconversion.c ****     // Return signed and scaled floating point result.
 287:../cleanflight/src/main/common/typeconversion.c ****     return sign * (frac ? (value / scale) : (value * scale));
 1217              	 .loc 1 287 0
 1218 01a6 FB69     	 ldr r3,[r7,#28]
 1219 01a8 002B     	 cmp r3,#0
 1220 01aa 06D0     	 beq .L83
 1221              	 .loc 1 287 0 is_stmt 0 discriminator 1
 1222 01ac 97ED057A 	 flds s14,[r7,#20]
 1223 01b0 D7ED047A 	 flds s15,[r7,#16]
 1224 01b4 C7EE277A 	 fdivs s15,s14,s15
 1225 01b8 05E0     	 b .L84
 1226              	.L83:
 1227              	 .loc 1 287 0 discriminator 2
 1228 01ba 97ED057A 	 flds s14,[r7,#20]
 1229 01be D7ED047A 	 flds s15,[r7,#16]
 1230 01c2 67EE277A 	 fmuls s15,s14,s15
 1231              	.L84:
 1232              	 .loc 1 287 0 discriminator 4
 1233 01c6 97ED067A 	 flds s14,[r7,#24]
 1234 01ca 67EE877A 	 fmuls s15,s15,s14
 1235 01ce 17EE903A 	 fmrs r3,s15
 288:../cleanflight/src/main/common/typeconversion.c **** }
 1236              	 .loc 1 288 0 is_stmt 1 discriminator 4
 1237 01d2 1846     	 mov r0,r3
 1238 01d4 2437     	 adds r7,r7,#36
 1239              	.LCFI51:
 1240              	 .cfi_def_cfa_offset 4
 1241 01d6 BD46     	 mov sp,r7
 1242              	.LCFI52:
 1243              	 .cfi_def_cfa_register 13
 1244              	 
 1245 01d8 5DF8047B 	 ldr r7,[sp],#4
 1246              	.LCFI53:
 1247              	 .cfi_restore 7
 1248              	 .cfi_def_cfa_offset 0
 1249 01dc 7047     	 bx lr
 1250              	.L87:
 1251 01de 00BF     	 .align 2
 1252              	.L86:
 1253 01e0 000080BF 	 .word -1082130432
 1254 01e4 00002041 	 .word 1092616192
 1255 01e8 20BCBE4C 	 .word 1287568416
 1256              	 .cfi_endproc
 1257              	.LFE11:
 1259              	 .text
 1260              	.Letext0:
 1261              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1262              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 typeconversion.c
    {standard input}:20     .text.uli2a:00000000 $t
    {standard input}:25     .text.uli2a:00000000 uli2a
    {standard input}:143    .text.li2a:00000000 $t
    {standard input}:148    .text.li2a:00000000 li2a
    {standard input}:202    .text.ui2a:00000000 $t
    {standard input}:207    .text.ui2a:00000000 ui2a
    {standard input}:324    .text.i2a:00000000 $t
    {standard input}:329    .text.i2a:00000000 i2a
    {standard input}:383    .text.a2d:00000000 $t
    {standard input}:388    .text.a2d:00000000 a2d
    {standard input}:467    .text.a2i:00000000 $t
    {standard input}:472    .text.a2i:00000000 a2i
    {standard input}:559    .rodata:00000000 $d
    {standard input}:563    .text._i2a:00000000 $t
    {standard input}:567    .text._i2a:00000000 _i2a
    {standard input}:630    .text._i2a:00000050 $d
    {standard input}:635    .text.itoa:00000000 $t
    {standard input}:640    .text.itoa:00000000 itoa
    {standard input}:727    .text.ftoa:00000000 $t
    {standard input}:732    .text.ftoa:00000000 ftoa
    {standard input}:933    .text.ftoa:0000017c $d
    {standard input}:940    .text.fastA2F:00000000 $t
    {standard input}:945    .text.fastA2F:00000000 fastA2F
    {standard input}:1253   .text.fastA2F:000001e0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
strlen
strcat
strncpy
