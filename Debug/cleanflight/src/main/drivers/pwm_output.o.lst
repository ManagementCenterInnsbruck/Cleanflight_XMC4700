   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "pwm_output.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CCU4_EnableClock,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CCU4_EnableClock:
  25              	.LFB335:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_ccu4.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @file xmc_ccu4.h
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @date 2017-09-15
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @cond
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMClib v2.1.20 - XMC Peripheral Driver Library 
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Copyright (c) 2015-2018, Infineon Technologies AG
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * All rights reserved.                        
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                                             
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * following conditions are met:   
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * disclaimer.                        
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * products derived from this software without specific prior written permission.                  
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                                                                              
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Change History
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * --------------
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2015-02-20:
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - Initial <br>
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - Documentation updates <br>
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2015-06-20:
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2015-07-22:
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent() is updated to support XMC14 device. <br>
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2015-08-17:
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_PRESCALER_t enum is added to set the prescaler divider. <br>
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t enum item names are updated according to the guideli
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_EnableShadowTransfer() API is made as inline, to improve the speed. <br>
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2015-09-29:
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - In XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t, two more enum items are added to support exte
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *       settings.
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2015-10-07:
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_GetEvent() is made as inline.
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_MULTI_IRQ_ID_t is added to support the XMC_CCU4_SLICE_EnableMultipleEvents(
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *       XMC_CCU4_SLICE_DisableMultipleEvents() APIs.
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - DOC updates for the newly added APIs.
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2016-03-09:
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - Optimization of write only registers 
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2016-05-20:
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - Added XMC_CCU4_SLICE_StopClearTimer()
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - Changed implementation of XMC_CCU4_SLICE_StopTimer() and XMC_CCU4_SLICE_ClearTimer() to av
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2017-04-27:
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - XMC_CCU4_SLICE_SetPrescaler() changed div_val parameter to type XMC_CCU4_SLICE_PRESCALER_t
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2017-09-15:
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *     - Fix XMC_CCU4_SLICE_SetShadowTransferMode()
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @endcond
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #ifndef XMC_CCU4_H
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_H
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * HEADER FILES
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #include "xmc_common.h"
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40)
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC1
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  #include "xmc1_ccu4_map.h"
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if UC_FAMILY == XMC4
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  #include "xmc4_ccu4_map.h"
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup XMClib XMC Peripheral Library
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @{
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @addtogroup CCU4
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @brief Capture Compare Unit 4 (CCU4) low level driver for XMC family of microcontrollers<br>
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * The CCU4 peripheral is a major component for systems that need general purpose timers for signal
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * monitoring/conditioning and Pulse Width Modulation (PWM) signal generation. Power electronic con
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * switched mode power supplies or interruptible power supplies, can easily be implemented with the
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * CCU4 peripheral.\n
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Each CCU4 module is comprised of four identical 16 bit Capture/Compare Timer slices, CC4y (where
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * timer slice can work in compare mode or in capture mode.
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * APIs provided in this file cover the following functional blocks of CCU4:\n
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -- Timer configuration, Capture configuration, Function/Event configuration, Interrupt configura
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par Note:
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 1. SLICE (APIs prefixed with e.g. XMC_CCU4_SLICE_)
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 2. Module (APIs are not having any prefix e.g. XMC_CCU4_)
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par Timer(Compare mode) configuration:
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_COMPARE_CONFIG_t and
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CompareInit().
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Start and Stop the timer. (XMC_CCU4_SLICE_StartTimer(), XMC_CCU4_SLICE_StopTimer())
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Update the period, compare, Dither, Prescaler  and Passive values. (XMC_CCU4_SLICE_SetTimerPe
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetTimerCompareMatch(), XMC_CCU4_SLICE_SetPrescaler(), XMC_CCU4_SLICE_SetDithe
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_SetPassiveLevel())
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Enable the slices to support multichannel mode. (XMC_CCU4_SLICE_EnableMultiChannelMode())
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par Capture configuration:
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_CAPTURE_CONFIG_t and
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * function XMC_CCU4_SLICE_CaptureInit().
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Configure the capture functionality. (XMC_CCU4_SLICE_Capture0Config(), XMC_CCU4_SLICE_Capture
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Read the captured values along with the status, which indicate the value is latest or not.
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    (XMC_CCU4_SLICE_GetCaptureRegisterValue())
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par Function/Event configuration:
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the configuration structure XMC_CCU4_SLICE_EVENT_CONFIG_t.\n
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * It can be used to:
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Enable and Disable the events. (XMC_CCU4_SLICE_EnableEvent(), XMC_CCU4_SLICE_DisableEvent())
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Configure to start and stop the timer on external events.(XMC_CCU4_SLICE_StartConfig(), XMC_C
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Modulation, external load and Gating of the timer output.(XMC_CCU4_SLICE_ModulationConfig(), 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_LoadConfig(), XMC_CCU4_SLICE_GateConfig())
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Control the count direction of the timer based on the external event. (XMC_CCU4_SLICE_Directi
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# Count the external events.(XMC_CCU4_SLICE_CountConfig())
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * -# External Trap. Which can be used as protective feature.(XMC_CCU4_SLICE_EnableTrap(), XMC_CCU4
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    XMC_CCU4_SLICE_TrapConfig())
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par Interrupt configuration:
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This section of the LLD provides the function to configure the interrupt node to each event (XMC
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @{
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * MACROS
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /* Macro to check if the interrupt enum passed is valid */
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #define XMC_CCU4_SLICE_CHECK_INTERRUPT(interrupt) \
 162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****     ((interrupt == XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH)           || \
 163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH)              || \
 164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP)  || \
 165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN)|| \
 166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT0)                 || \
 167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT1)                 || \
 168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_EVENT2)                 || \
 169:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****      (interrupt == XMC_CCU4_SLICE_IRQ_ID_TRAP))
 170:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 171:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 172:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * ENUMS
 173:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 174:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 175:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 176:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Global data structure
 177:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 178:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_GLOBAL_TypeDef XMC_CCU4_MODULE_t;
 179:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 180:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 181:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Typedef for CCU4 Slice data structure
 182:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 183:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef CCU4_CC4_TypeDef XMC_CCU4_SLICE_t;
 184:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 185:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 186:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Return Value of an API
 187:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 188:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_STATUS
 189:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 190:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_OK      = 0U, /**< API fulfils request */
 191:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_ERROR       , /**< API cannot fulfil the request */
 192:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_RUNNING     , /**< The timer slice is currently running */
 193:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_STATUS_IDLE          /**< The timer slice is currently idle */
 194:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_STATUS_t;
 195:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 196:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 197:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  CCU4 module clock
 198:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 199:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_CLOCK
 200:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 201:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_SCU        = 0U, /**< Select the fCCU as the clock */
 202:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_A     , /**< External clock-A */
 203:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_B     , /**< External clock-B */
 204:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_CLOCK_EXTERNAL_C       /**< External clock-C */
 205:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_CLOCK_t;
 206:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 207:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 208:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * CCU4 set the shadow transfer type for multichannel mode
 209:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 210:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER
 211:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 212:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE0       = (uint32_t)0x4000000, /**< Shadow transfe
 213:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 214:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE0  = (uint32_t)0x4000400, /**< Shadow transfe
 215:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 216:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE1       = (uint32_t)0x8000000, /**< Shadow transfe
 217:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                      only for slice
 218:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE1  = (uint32_t)0x8000800, /**< Shadow transfe
 219:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                      and hardware f
 220:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE2       = (uint32_t)0x10000000, /**< Shadow transf
 221:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 222:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE2  = (uint32_t)0x10001000, /**< Shadow transf
 223:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 224:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_SLICE3       = (uint32_t)0x20000000, /**< Shadow transf
 225:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                       only for slic
 226:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_SW_MCSS_SLICE3  = (uint32_t)0x20002000  /**< Shadow transf
 227:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                       and hardware 
 228:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_MULTI_CHANNEL_SHADOW_TRANSFER_t;
 229:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 230:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 231:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Operational modes of CCU4 slice
 232:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 233:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODE
 234:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 235:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_COMPARE  = 0U, /**< slice(CC4y) operates in Compare Mode */
 236:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODE_CAPTURE        /**< slice(CC4y) operates in Capture Mode */
 237:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODE_t;
 238:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 239:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 240:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Timer counting modes for the slice
 241:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 242:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_MODE
 243:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 244:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA  = 0U, /**< Edge Aligned Mode */
 245:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA        /**< Center Aligned Mode */
 246:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_MODE_t;
 247:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 248:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 249:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Timer repetition mode for the slice
 250:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 251:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_REPEAT_MODE
 252:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 253:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT = 0U,  /**< Repetitive mode: continuous mode of operation
 254:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE        /**< Single shot mode: Once a Period match/One mat
 255:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                       occurs timer goes to idle state */
 256:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t;
 257:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 258:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 259:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Timer counting direction for the CCU4 slice
 260:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 261:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_COUNT_DIR
 262:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 263:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP   = 0U, /**< Counting up */
 264:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_COUNT_DIR_DOWN       /**< Counting down */
 265:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_COUNT_DIR_t;
 266:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 267:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 268:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Capture mode register sets
 269:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 270:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_CAP_REG_SET
 271:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 272:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_LOW  = 0U, /**< Capture register-0, Capture register-1 used */
 273:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_CAP_REG_SET_HIGH       /**< Capture register-2, Capture register-3 used */
 274:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAP_REG_SET_t;
 275:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 276:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 277:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Prescaler mode
 278:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 279:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER_MODE
 280:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 281:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_NORMAL = 0U, /**< Fixed division of module clock */
 282:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_MODE_FLOAT        /**< Floating divider. */
 283:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_MODE_t;
 284:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 285:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 286:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Timer output passive level
 287:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 288:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL
 289:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 290:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_LOW  = 0U, /**< Passive level = Low */
 291:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_HIGH       /**< Passive level = High */
 292:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t;
 293:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 294:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 295:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Timer clock Divider
 296:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 297:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_PRESCALER
 298:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 299:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1  = 0U, /**< Slice Clock = fccu4 */
 300:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2      , /**< Slice Clock = fccu4/2 */
 301:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4      , /**< Slice Clock = fccu4/4 */
 302:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8      , /**< Slice Clock = fccu4/8 */
 303:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16     , /**< Slice Clock = fccu4/16 */
 304:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32     , /**< Slice Clock = fccu4/32 */
 305:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_64     , /**< Slice Clock = fccu4/64 */
 306:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_128    , /**< Slice Clock = fccu4/128 */
 307:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_256    , /**< Slice Clock = fccu4/256 */
 308:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_512    , /**< Slice Clock = fccu4/512 */
 309:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_1024   , /**< Slice Clock = fccu4/1024 */
 310:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_2048   , /**< Slice Clock = fccu4/2048 */
 311:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_4096   , /**< Slice Clock = fccu4/4096 */
 312:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_8192   , /**< Slice Clock = fccu4/8192 */
 313:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_16384  , /**< Slice Clock = fccu4/16384 */
 314:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_PRESCALER_32768    /**< Slice Clock = fccu4/32768 */
 315:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_PRESCALER_t;
 316:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 317:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 318:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  External Function list
 319:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 320:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_FUNCTION
 321:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 322:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_START           = 0U, /**< Start function */
 323:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_STOP                , /**< Stop function */
 324:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT0      , /**< Capture Event-0 function, CCycapt0 signal is u
 325:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 326:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_CAPTURE_EVENT1      , /**< Capture Event-1 function, CCycapt1 signal is u
 327:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                      generation */
 328:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_GATING              , /**< Gating function */
 329:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_DIRECTION           , /**< Direction function */
 330:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_LOAD                , /**< Load function */
 331:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_COUNT               , /**< Counting function */
 332:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_OVERRIDE            , /**< Override function */
 333:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_MODULATION          , /**< Modulation function */
 334:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_FUNCTION_TRAP                  /**< Trap function */
 335:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_FUNCTION_t;
 336:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 337:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 338:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  External Event list
 339:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 340:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT
 341:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 342:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_NONE  = 0U, /**< None */
 343:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_0         , /**< Event-0 */
 344:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_1         , /**< Event-1 */
 345:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_2           /**< Event-2 */
 346:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_t;
 347:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 348:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 349:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Edge sensitivity
 350:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 351:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY
 352:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 353:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_NONE         = 0U, /**< None */
 354:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_RISING_EDGE      , /**< Rising Edge of the input signal gen
 355:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_FALLING_EDGE     , /**< Falling Edge of the input signal ge
 356:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                 trigger */
 357:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_DUAL_EDGE          /**< Both Rising and Falling edges cause
 358:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t;
 359:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 360:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 361:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  External Event trigger criteria  - Level sensitivity
 362:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 363:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY
 364:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 365:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH = 0U, /**< Level sensitive functions react to 
 366:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW  = 1U, /**< Level sensitive functions react to 
 367:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   /* Below enum items can be utilised specific to the functionality */
 368:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_LOW = 0U, /**< Timer counts up, during Low sta
 369:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_COUNT_UP_ON_HIGH = 1U /**< Timer counts up, during High st
 370:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t;
 371:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 372:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 373:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Low pass filter Configuration. The External Event input should be stable for a selected number 
 374:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 375:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_EVENT_FILTER
 376:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 377:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_DISABLED  = 0U, /**< No Low Pass Filter */
 378:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_3_CYCLES      , /**< 3 clock cycles */
 379:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_5_CYCLES      , /**< 5 clock cycles */
 380:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_7_CYCLES        /**< 7 clock cycles */
 381:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_FILTER_t;
 382:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 383:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 384:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  External Event Input list. This list depicts the possible input connections to the CCU4 slice.
 385:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Interconnects are specific to each device.
 386:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 387:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef uint8_t XMC_CCU4_SLICE_INPUT_t;
 388:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 389:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 390:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Actions that can be performed upon detection of an external Timer STOP event
 391:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 392:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_END_MODE
 393:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 394:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP       = 0U, /**< Stops the timer, without clearing TIMER regis
 395:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_CLEAR          , /**< Without stopping timer, clears the TIMER regi
 396:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_END_MODE_TIMER_STOP_CLEAR       /**< Stops the timer and clears the TIMER register
 397:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_END_MODE_t;
 398:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 399:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 400:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Actions that can be performed upon detection of an external Timer START event
 401:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 402:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_START_MODE
 403:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 404:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START       = 0U, /**< Start the timer from the current count of 
 405:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_START_MODE_TIMER_START_CLEAR       /**< Clears the TIMER register and start the ti
 406:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_START_MODE_t;
 407:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 408:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 409:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Modulation of timer output signals
 410:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 411:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MODULATION_MODE
 412:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 413:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_ST_OUT  = 0U, /**< Clear ST and OUT signals */
 414:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MODULATION_MODE_CLEAR_OUT           /**< Clear only the OUT signal */
 415:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MODULATION_MODE_t;
 416:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 417:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 418:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Trap exit mode
 419:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 420:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TRAP_EXIT_MODE
 421:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 422:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_AUTOMATIC = 0U, /**< Clear trap state as soon as the trap signal is
 423:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TRAP_EXIT_MODE_SW              /**< Clear only when acknowledged by software */
 424:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TRAP_EXIT_MODE_t;
 425:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 426:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 427:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Timer clear on capture
 428:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 429:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_TIMER_CLEAR_MODE
 430:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 431:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_NEVER    = 0U, /**< Never clear the timer on any capture event */
 432:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_HIGH     , /**< Clear only when timer value has been captured
 433:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_CAP_LOW      , /**< Clear only when timer value has been captured
 434:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_TIMER_CLEAR_MODE_ALWAYS         /**< Always clear the timer upon detection of any 
 435:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t;
 436:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 437:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 438:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Multi Channel Shadow transfer request configuration options
 439:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 440:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MCMS_ACTION
 441:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 442:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR          = 0U, /**< Transfer Compare and Period Shadow 
 443:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                 the actual registers upon MCS xfer 
 444:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP     = 1U, /**< Transfer Compare, Period and Presca
 445:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                 register values to the actual regis
 446:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                 request */
 447:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MCMS_ACTION_TRANSFER_PR_CR_PCMP_DIT = 3U  /**< Transfer Compare, Period ,Prescaler
 448:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                 Compare register values to the actu
 449:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                 MCS xfer request */
 450:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MCMS_ACTION_t;
 451:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 452:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 453:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids
 454:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 455:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_IRQ_ID
 456:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 457:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH       = 0U , /**< Period match counting up */
 458:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH          = 1U , /**< Period match -> One match counting down */
 459:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP   = 2U , /**< Compare match counting up */
 460:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN = 3U , /**< Compare match counting down */
 461:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT0             = 8U , /**< Event-0 occurrence */
 462:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT1             = 9U , /**< Event-1 occurrence */
 463:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_EVENT2             = 10U, /**< Event-2 occurrence */
 464:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_IRQ_ID_TRAP               = 11U  /**< Trap occurrence */
 465:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_IRQ_ID_t;
 466:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 467:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 468:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Available Interrupt Event Ids, which is added to support multi event APIs
 469:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 470:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MULTI_IRQ_ID
 471:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 472:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_PERIOD_MATCH       = 0x1U,   /**< Period match counting up */
 473:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_ONE_MATCH          = 0x2U,   /**< Period match -> One match counting 
 474:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_UP   = 0x4U,   /**< Compare match counting up */
 475:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_COMPARE_MATCH_DOWN = 0x8U,   /**< Compare match counting down */
 476:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT0             = 0x100U, /**< Event-0 occurrence */
 477:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT1             = 0x200U, /**< Event-1 occurrence */
 478:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MULTI_IRQ_ID_EVENT2             = 0x400U, /**< Event-2 occurrence */
 479:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MULTI_IRQ_ID_t;
 480:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 481:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 482:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Service Request Lines for CCU4. Event are mapped to these SR lines and these are used to generat
 483:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 484:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SR_ID
 485:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 486:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_0    = 0U, /**< Service Request Line-0 selected  */
 487:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_1        , /**< Service Request Line-1 selected  */
 488:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_2        , /**< Service Request Line-2 selected  */
 489:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SR_ID_3          /**< Service Request Line-3 selected  */
 490:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SR_ID_t;
 491:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 492:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 493:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer options.
 494:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 495:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SHADOW_TRANSFER
 496:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 497:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_0            = CCU4_GCSS_S0SE_Msk, /**< Transfer Period, Compare a
 498:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 499:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-0 */
 500:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_0     = CCU4_GCSS_S0DSE_Msk, /**< Transfer Dither compare s
 501:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 502:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_0  = CCU4_GCSS_S0PSE_Msk, /**< Transfer Prescaler shadow
 503:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 504:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_1            = CCU4_GCSS_S1SE_Msk, /**< Transfer Period, Compare a
 505:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 506:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-1 */
 507:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_1     = CCU4_GCSS_S1DSE_Msk, /**< Transfer Dither compare s
 508:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual registers for S
 509:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_1  = CCU4_GCSS_S1PSE_Msk, /**< Transfer Prescaler shadow
 510:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 511:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_2            = CCU4_GCSS_S2SE_Msk, /**< Transfer Period, Compare a
 512:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 513:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-2 */
 514:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_2     = CCU4_GCSS_S2DSE_Msk, /**< Transfer Dither compare s
 515:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 516:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_2  = CCU4_GCSS_S2PSE_Msk, /**< Transfer Prescaler shadow
 517:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 518:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_SLICE_3            = CCU4_GCSS_S3SE_Msk, /**< Transfer Period, Compare a
 519:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           shadow register values to
 520:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           SLICE-3 */
 521:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_DITHER_SLICE_3     = CCU4_GCSS_S3DSE_Msk, /**< Transfer Dither compare s
 522:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           to actual register for SL
 523:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SHADOW_TRANSFER_PRESCALER_SLICE_3  = CCU4_GCSS_S3PSE_Msk  /**< Transfer Prescaler shadow
 524:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                           actual register for SLICE
 525:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SHADOW_TRANSFER_t;
 526:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 527:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V3) || defined(DOXYGEN)/* Defined for XMC1400 devices only */
 528:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 529:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Slice shadow transfer mode options.
 530:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @note Only available for XMC1400 series
 531:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 532:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE
 533:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 534:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_IN_PERIOD_MATCH_AND_ONE_MATCH = 0U,  /**< Shadow transfer is 
 535:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                 One match. */
 536:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_PERIOD_MATCH = 1U,  /**< Shadow transfer is done only
 537:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_ONLY_IN_ONE_MATCH = 2U  /**< Shadow transfer is done only in 
 538:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_SHADOW_TRANSFER_MODE_t; 
 539:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   
 540:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   
 541:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 542:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Immediate write into configuration register
 543:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 544:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 545:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_WRITE_INTO
 546:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 547:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PERIOD_CONFIGURATION = CCU4_CC4_STC_IRPC_Msk,                  /**< Imm
 548:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 549:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 550:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_COMPARE_CONFIGURATION = CCU4_CC4_STC_IRCC_Msk,                 /**< Imm
 551:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 552:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Con
 553:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_PASSIVE_LEVEL_CONFIGURATION = CCU4_CC4_STC_IRLC_Msk,           /**< Imm
 554:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 555:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 556:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_DITHER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRDC_Msk,            /**< Imm
 557:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 558:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 	                                                                                            Config
 559:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_WRITE_INTO_FLOATING_PRESCALER_VALUE_CONFIGURATION = CCU4_CC4_STC_IRFC_Msk /**< Imm
 560:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Wri
 561:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                 Val
 562:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_WRITE_INTO_t;
 563:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 564:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 565:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 566:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Automatic Shadow Transfer request when writing into shadow register
 567:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC1400 series
 568:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 569:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO
 570:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 571:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PERIOD_SHADOW = CCU4_CC4_STC_ASPC_Msk,        
 572:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 573:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 574:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 575:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_COMPARE_SHADOW = CCU4_CC4_STC_ASCC_Msk,       
 576:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 577:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 578:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 579:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_PASSIVE_LEVEL = CCU4_CC4_STC_ASLC_Msk,        
 580:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 581:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 582:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_DITHER_SHADOW = CCU4_CC4_STC_ASDC_Msk,        
 583:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 584:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 585:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_FLOATING_PRESCALER_SHADOW = CCU4_CC4_STC_ASFC_
 586:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 	                                                                                                  
 587:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 588:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                                                                    
 589:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 590:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_AUTOMAIC_SHADOW_TRANSFER_WRITE_INTO_t;
 591:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 592:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 593:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Used to create Mask needed for Multi-channel Shadow transfer enable/disable
 594:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 595:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef enum XMC_CCU4_SLICE_MASK
 596:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 597:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_0  = 1U , /**< SLICE-0 */
 598:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_1  = 2U , /**< SLICE-1 */
 599:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_2  = 4U , /**< SLICE-2 */
 600:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_MASK_SLICE_3  = 8U   /**< SLICE-3 */
 601:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_MASK_t;
 602:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 603:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 604:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 605:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * DATA STRUCTURES
 606:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 607:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 608:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 609:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure of an External Event(Event-0/1/2).
 610:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Needed to configure the various aspects of an External Event.
 611:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  This structure will not connect the external event with an external function.
 612:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 613:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_EVENT_CONFIG
 614:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 615:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_INPUT_t                   mapped_input; /**< Required input signal for the Event *
 616:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_EDGE_SENSITIVITY_t  edge;         /**< Select the event edge of the input si
 617:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an edge sensitive 
 618:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_t level;        /**< Select the event level of the input s
 619:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                               This is needed for an level sensitive
 620:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_CCU4_SLICE_EVENT_FILTER_t            duration;     /**< Low Pass filter duration in terms of 
 621:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_EVENT_CONFIG_t;
 622:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 623:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard start*/
 624:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 625:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   #pragma push
 626:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   #pragma anon_unions
 627:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 628:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   #pragma warning 586
 629:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 630:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 631:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 632:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to compare 
 633:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 634:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 635:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_COMPARE_CONFIG
 636:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 637:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   union
 638:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   {
 639:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****     struct
 640:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****     {
 641:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_mode : 1;         /**< Edge aligned or Centre Aligned.
 642:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t */
 643:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t monoshot : 1;           /**< Single shot or Continuous mode .
 644:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t*/
 645:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t shadow_xfer_clear : 1;  /**< Should PR and CR shadow xfer happen when timer is clear
 646:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 10;
 647:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_timer_period: 1; /**< Can the period of the timer dither? */
 648:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t dither_duty_cycle : 1;  /**< Can the compare match of the timer dither? */
 649:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 1;
 650:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;      /**< Normal or floating prescaler mode.
 651:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_PRESCALER_MODE_t*/
 652:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 8;
 653:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t mcm_enable : 1;         /**< Multi-Channel mode enable? */
 654:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 6;
 655:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****     };
 656:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 657:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   };
 658:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;      /**< Initial prescaler divider value 
 659:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                             Accepts enum :: XMC_CCU4_SLICE_PRESCALER_t */
 660:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;            /**< The max value which the prescaler divider can increment
 661:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   uint32_t dither_limit : 4;           /**< The value that determines the spreading of dithering */
 662:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   uint32_t passive_level : 1;          /**< Configuration of ST and OUT passive levels.
 663:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                              Accepts enum :: XMC_CCU4_SLICE_OUTPUT_PASSIVE_LEVEL_t*
 664:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;    /**< Enables the concatenation of the timer if true.*/
 665:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_COMPARE_CONFIG_t;
 666:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 667:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 668:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Configuration data structure for CCU4 slice. Specifically configures the CCU4 slice to capture 
 669:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  This excludes event and function configuration.
 670:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */ 
 671:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** typedef struct XMC_CCU4_SLICE_CAPTURE_CONFIG
 672:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 673:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   union
 674:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   {
 675:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****     struct
 676:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****     {
 677:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 678:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t fifo_enable : 1;      /**< Should the capture registers be setup as a FIFO?(Extended
 679:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t timer_clear_mode : 2; /**< How should the timer register be cleared upon detection o
 680:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                           Accepts enum ::XMC_CCU4_SLICE_TIMER_CLEAR_MODE_t*/
 681:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 4;
 682:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t same_event : 1;       /**< Should the capture event for C1V/C0V and C3V/C2V be same 
 683:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t ignore_full_flag : 1; /**< Should updates to capture registers follow full flag rule
 684:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 3;
 685:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t prescaler_mode: 1;    /**< Normal or floating prescaler Accepts enum :: XMC_CCU4_SLI
 686:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****       uint32_t : 15;
 687:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****     };
 688:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****     uint32_t tc;
 689:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   };
 690:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   uint32_t prescaler_initval : 4;    /**< Prescaler divider value */
 691:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   uint32_t float_limit : 4;          /**< The max value which the prescaler divider can increment t
 692:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   uint32_t timer_concatenation : 1;  /**< Enables the concatenation of the timer */
 693:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } XMC_CCU4_SLICE_CAPTURE_CONFIG_t;
 694:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /*Anonymous structure/union guard end*/
 695:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(__CC_ARM)
 696:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   #pragma pop
 697:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #elif defined(__TASKING__)
 698:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   #pragma warning restore
 699:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 700:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**************************************************************************************************
 701:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * API Prototypes
 702:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  **************************************************************************************************
 703:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 704:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #ifdef __cplusplus
 705:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** extern "C" {
 706:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 707:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 708:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidModule(const XMC_CCU4_MODULE_t *const module)
 709:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 710:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 711:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   
 712:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = (module == CCU40);
 713:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   
 714:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41) 
 715:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU41);
 716:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 717:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 718:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)
 719:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU42);
 720:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 721:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 722:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)
 723:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (module == CCU43);
 724:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 725:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   
 726:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 727:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } 
 728:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 729:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsValidSlice(const XMC_CCU4_SLICE_t *const slice)
 730:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 731:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   bool tmp = false;
 732:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   
 733:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = (slice == CCU40_CC40);
 734:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC41)  
 735:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC41);
 736:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 737:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC42)  
 738:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC42);
 739:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 740:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU40_CC43)  
 741:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU40_CC43);
 742:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 743:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41)  
 744:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC40);
 745:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC41)  
 746:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC41);
 747:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 748:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC42)  
 749:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC42);
 750:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 751:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU41_CC43)  
 752:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU41_CC43);
 753:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 754:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif 
 755:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42)  
 756:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC40);
 757:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC41)  
 758:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC41);
 759:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 760:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC42)  
 761:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC42);
 762:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 763:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU42_CC43)  
 764:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU42_CC43);
 765:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 766:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 767:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43)  
 768:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC40);
 769:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC41)  
 770:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC41);
 771:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 772:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC42)  
 773:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC42);
 774:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 775:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU43_CC43)  
 776:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   tmp = tmp || (slice == CCU43_CC43);
 777:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
 778:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif 
 779:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   
 780:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return tmp;  
 781:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** } 
 782:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 783:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 784:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 785:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param mcs_action multi-channel shadow transfer request configuration
 786:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 787:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 788:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 789:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 790:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Initialization of global register GCTRL.<br>\n
 791:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  As part of module initialization, behaviour of the module upon detection
 792:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Multi-Channel Mode trigger is configured. Will also invoke the XMC_CCU4_EnableModule().
 793:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  The API call would bring up the required CCU4 module and also initialize the module for
 794:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  the required multi-channel shadow transfer.
 795:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 796:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 797:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
 798:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 799:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action);
 800:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 801:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 802:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 803:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param clock Choice of input clock to the module
 804:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 805:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 806:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 807:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 808:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Selects the Module Clock by configuring GCTRL.PCIS bits.<BR>\n
 809:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  There are 3 potential clock sources. This API helps to select the required clock source.
 810:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Call to this API is valid after the XMC_CCU4_Init().
 811:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 812:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 813:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * None.<BR>
 814:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 815:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SetModuleClock(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_CLOCK_t clock);
 816:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 817:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 818:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 819:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 820:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 821:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 822:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 823:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Enables the CCU4 module and brings it to active state.<BR>\n
 824:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Also disables the gating of the clock signal (if applicable depending on the device being select
 825:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API before any operations are done on the CCU4 module. Invoked from  XMC_CCU4_Init()
 826:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 827:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 828:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SetModuleClock()<BR> XMC_CCU4_DisableModule()<BR> XMC_CCU4_StartPrescaler().
 829:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 830:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module);
 831:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 832:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 833:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 834:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 835:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 836:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 837:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 838:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Brings the CCU4 module to reset state and enables gating of the clock signal(if applicable depen
 839:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * on the device being selected).<BR>\n
 840:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Invoke this API when a CCU4 module needs to be disabled completely.
 841:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Any operation on the CCU4 module will have no effect after this API is called.
 842:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 843:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 844:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableModule()<BR> XMC_CCU4_DisableModule().
 845:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 846:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_DisableModule(XMC_CCU4_MODULE_t *const module);
 847:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 848:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 849:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 850:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 851:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 852:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 853:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 854:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Starts the prescaler and restores clocks to the timer slices, by setting GIDLC.SPRB bit.<BR>\n
 855:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Once the input to the prescaler has been chosen and the prescaler divider of all slices program
 856:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  the prescaler itself may be started. Invoke this  API after XMC_CCU4_Init()
 857:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  (Mandatory to fully initialize the module).Directly accessed register is GIDLC.
 858:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 859:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 860:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescal
 861:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StopPrescaler().
 862:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 863:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
 864:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 865:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 866:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 867:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
 868:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 869:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 870:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 871:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 872:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 873:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 874:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 875:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Stops the prescaler and blocks clocks to the timer slices, by setting GIDLS.CPRB bit.<BR>\n
 876:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Opposite of the StartPrescaler routine.
 877:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Clears the run bit of the prescaler. Ensures that the module clock is not supplied to
 878:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * the slices of the module.Registers directly accessed is GIDLS.
 879:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 880:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 881:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_St
 882:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 883:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_StopPrescaler(XMC_CCU4_MODULE_t *const module)
 884:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 885:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_StopPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 886:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= (uint32_t) CCU4_GIDLS_CPRB_Msk;
 887:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
 888:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 889:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 890:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 891:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 892:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 893:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 894:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 895:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the prescaler, by reading GSTAT.PRB bit.<BR>\n
 896:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This will return true if the prescaler is running. If clock is being supplied to the slices of t
 897:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * module then returns as true.
 898:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 899:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 900:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_D
 901:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 902:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_IsPrescalerRunning(XMC_CCU4_MODULE_t *const module)
 903:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 904:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_IsPrescalerRunning:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 905:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return((bool)((module->GSTAT & (uint32_t) CCU4_GSTAT_PRB_Msk) == (uint32_t)CCU4_GSTAT_PRB_Msk));
 906:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
 907:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 908:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 909:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 910:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param clock_mask Slices whose clocks are to be enabled simultaneously.
 911:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                   Bit location 0/1/2/3 represents slice-0/1/2/3 respectively.
 912:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x1 to 0xF]
 913:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 914:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 915:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 916:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 917:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Enables clocks of multiple slices at a time, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 918:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * GIDLC.CS3I bits.\n\n
 919:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Takes an input clock_mask, which determines the slices that would receive the clock. Bring them 
 920:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * of the idle state simultaneously.
 921:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 922:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 923:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock().
 924:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 925:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableMultipleClocks(XMC_CCU4_MODULE_t *const module, const uint8_t c
 926:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 927:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Invalid Module Pointer", XMC_CCU4_IsValidModule(module)
 928:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableMultipleClocks:Wrong clock mask", (clock_mask < 16U));
 929:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   
 930:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= (uint32_t) clock_mask;
 931:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
 932:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 933:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 934:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 935:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be Enabled.
 936:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 937:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 938:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 939:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 940:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 941:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Enables the slice timer clock, by configuring GIDLC.CS0I, GIDLC.CS1I, GIDLC.CS2I, 
 942:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  GIDLC.CS3I bits according to the selected \a slice_number.\n\n
 943:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  It is possible to enable/disable clock at slice level. This uses the \b slice_number to indicat
 944:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  slice whose clock needs to be enabled.
 945:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 946:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 947:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XM
 948:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 949:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_numb
 950:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
  27              	 .loc 1 950 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
 951:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 952:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));
 953:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 954:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   module->GIDLC |= ((uint32_t) 1) << slice_number;
  45              	 .loc 1 954 0
  46 000c 7B68     	 ldr r3,[r7,#4]
  47 000e DA68     	 ldr r2,[r3,#12]
  48 0010 FB78     	 ldrb r3,[r7,#3]
  49 0012 0121     	 movs r1,#1
  50 0014 01FA03F3 	 lsl r3,r1,r3
  51 0018 1A43     	 orrs r2,r2,r3
  52 001a 7B68     	 ldr r3,[r7,#4]
  53 001c D968     	 ldr r1,[r3,#12]
  54 001e 0021     	 movs r1,#0
  55 0020 0A43     	 orrs r2,r2,r1
  56 0022 DA60     	 str r2,[r3,#12]
 955:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
  57              	 .loc 1 955 0
  58 0024 0C37     	 adds r7,r7,#12
  59              	.LCFI3:
  60              	 .cfi_def_cfa_offset 4
  61 0026 BD46     	 mov sp,r7
  62              	.LCFI4:
  63              	 .cfi_def_cfa_register 13
  64              	 
  65 0028 5DF8047B 	 ldr r7,[sp],#4
  66              	.LCFI5:
  67              	 .cfi_restore 7
  68              	 .cfi_def_cfa_offset 0
  69 002c 7047     	 bx lr
  70              	 .cfi_endproc
  71              	.LFE335:
  73 002e 00BF     	 .section .text.XMC_CCU4_SLICE_StartTimer,"ax",%progbits
  74              	 .align 2
  75              	 .thumb
  76              	 .thumb_func
  78              	XMC_CCU4_SLICE_StartTimer:
  79              	.LFB342:
 956:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 957:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 958:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
 959:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number Slice for which the clock should be disabled.
 960:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                   Range: [0x0 to 0x3]
 961:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 962:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 963:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
 964:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 965:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Disables the slice timer clock, by configuring GIDLS.SS0I, GIDLS.SSS1I, GIDLS.SSS2I, 
 966:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * GIDLS.SSS3I bits according to the selected \a slice_number .\n\n
 967:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * It is possible to disable clock at slice level using the module pointer.
 968:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \b slice_number is used to disable the clock to a given slice of the module.
 969:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GIDLS.
 970:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 971:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 972:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC
 973:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 974:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_DisableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_num
 975:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 976:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
 977:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_DisableClock:Invalid Slice Number", (slice_number < 4U));
 978:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 979:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   module->GIDLS |= ((uint32_t) 1) << slice_number;
 980:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
 981:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
 982:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
 983:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
 984:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param compare_init Pointer to slice configuration structure
 985:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
 986:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
 987:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 988:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
 989:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to compare mode, by configuring CC4yTC, CC4yCMC, CC4yPSC, CC4yDITH
 990:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * CC4yFPCS, CC4yCHC registers.\n\n 
 991:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Timer configurations in this routine.
 992:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * After initialization user has to explicitly enable the shadow transfer for the required values b
 993:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask.
 994:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
 995:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
 996:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * None.
 997:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
 998:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
 999:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init);
1000:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1001:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1002:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1003:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param capture_init Pointer to slice configuration structure
1004:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1005:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1006:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1007:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1008:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Initialization of a CC4 slice to capture mode, by configuring CC4yTC, CC4yCMC, CC4yPSC,CC4yFPCS 
1009:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * CC4 slice is configured with Capture configurations in  this routine.After initialization user h
1010:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * enable the shadow transfer for the required  values by calling XMC_CCU4_EnableShadowTransfer()
1011:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * with appropriate mask.
1012:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1013:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1014:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config().
1015:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1016:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CaptureInit(XMC_CCU4_SLICE_t *const slice,
1017:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_CAPTURE_CONFIG_t *const capture_init);
1018:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1019:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1020:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1021:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1022:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Start Function
1023:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param start_mode Behavior of slice when the start function is activated
1024:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1025:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1026:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1027:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1028:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Start Function of the slice, by configuring CC4yCMC.ENDS and CC4yTC.ENDM bits.\n
1029:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Start function is mapped with one of the 3 events. An external signal can control when a CC4 ti
1030:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Additionally, the behaviour of the slice upon activation of the start function is configured as
1031:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1032:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1033:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1034:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1035:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StartConfig(XMC_CCU4_SLICE_t *const slice,
1036:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_EVENT_t event,
1037:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                 const XMC_CCU4_SLICE_START_MODE_t start_mode);
1038:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1039:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1040:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1041:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Stop Function
1042:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param end_mode Behavior of slice when the stop function is activated
1043:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1044:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1045:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1046:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1047:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the Stop function for the slice, by configuring CC4yCMC.STRTS and CC4yTC.STRM bits.\n
1048:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Stop function is mapped with one of the 3 events. An external signal can control when a CCU4 tim
1049:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Additionally, the behaviour of the slice upon activation of the stop function is configured as w
1050:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1051:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1052:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1053:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1054:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StopConfig(XMC_CCU4_SLICE_t *const slice,
1055:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_EVENT_t event,
1056:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_END_MODE_t end_mode);
1057:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1058:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1059:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1060:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External load Function
1061:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1062:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1063:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1064:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1065:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Configures the Load Function for the slice, by configuring CC4yCMC.LDS bit.\n\n
1066:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  Load function is mapped with one of the 3 events. Up on occurrence of the event,\n
1067:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 0,CC4yTIMER register is reloaded with the value from compare register\n
1068:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  if CC4yTCST.CDIR set to 1,CC4yTIMER register is reloaded with the value from period register\n
1069:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1070:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1071:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1072:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1073:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_LoadConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1074:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1075:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1076:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1077:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1078:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Modulation Function
1079:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param mod_mode Desired Modulation mode
1080:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Option to synchronize modulation with PWM start
1081:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                       Pass \b true if the modulation needs to be synchronized with PWM signal.
1082:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1083:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1084:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
1085:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1086:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the Output Modulation Function of the slice, by configuring CCeyCMC.MOS, CC4yTC.EMT a
1087:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.EMS bits.\n\n
1088:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Modulation function is mapped with one of the 3 events. The output signal of the CCU can
1089:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * be modulated according to a external input.  Additionally, the behaviour of the slice upon activ
1090:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * of the modulation function is configured as well.
1091:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1092:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1093:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1094:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1095:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ModulationConfig(XMC_CCU4_SLICE_t *const slice,
1096:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_EVENT_t event,
1097:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                      const XMC_CCU4_SLICE_MODULATION_MODE_t mod_mode,
1098:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                      const bool synch_with_pwm);
1099:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Function
1103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
1106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Function of the slice, by configuring CC4yCMC.CNTS bit.\n\n
1108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Count function is mapped with one of the 3 events. CCU4 slice can take an external
1109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * signal to act as the counting event. The CCU4 slice would count the
1110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * edges present on the \b event selected.
1111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event  Map an External event to the External Gating Function
1120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
1123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the Gating Function of the slice, by configuring CC4yCMC.GATES bit.\n\n
1125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Gating function is mapped with one of the 3 events.  A CCU4 slice can use an input signal that w
1126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * operate as counter gating. If the configured Active level is detected the counter will gate all 
1127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event);
1132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-0 Function
1136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
1139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-0 Function of the slice, by configuring CC4yCMC.CAP0S bit.\n\n
1141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events.  A CCU4 slice can be configured into captur
1142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC0V and 
1143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture0Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the Capture-1 Function
1152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
1155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the Capture-1 Function of the slice, by configuring CC4yCMC.CAP1S bit.\n\n
1157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Capture function is mapped with one of the 3 events. A CCU4 slice can be configured into capture
1158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * mode with the selected \b event. In this mode the CCU4 will capture the timer value into CC4yC2V
1159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_Capture1Config(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t even
1164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    bool would return true if the extended capture read back mode is enabled<BR>
1169:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1170:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1171:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Checks if Extended capture mode read is enabled for particular slice or not, by reading CC4yTC.E
1172:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * In this mode the there is only one associated read address for all the capture registers.
1173:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Individual capture registers can still be accessed in this mode.
1174:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1175:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1176:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_GetCapturedValueFromFifo().
1177:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1178:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsExtendedCapReadEnabled(const XMC_CCU4_SLICE_t *const slice)
1179:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1180:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_IsExtendedCapReadEnabled:Invalid Module Pointer", XMC_CCU4_IsValidSlic
1181:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return((bool)((slice->TC & (uint32_t) CCU4_CC4_TC_ECM_Msk) == (uint32_t)CCU4_CC4_TC_ECM_Msk));
1182:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1183:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1184:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #if defined(CCU4V1) /* Defined for XMC4500, XMC4400, XMC4200, XMC4100 devices only */
1185:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1186:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1187:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice_number to check whether read value belongs to required slice or not
1188:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1189:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *   int32_t   Returns -1 if the FIFO value being retrieved is not from the \b slice_number.
1190:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *             Returns the value captured in the \b slice_number, if captured value is from the cor
1191:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                     Range: [0x0 to 0xFFFF]
1192:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1193:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1194:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(ECRD register).\n\n
1195:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1196:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1197:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1198:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1199:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1200:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1201:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1202:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  @note Only available for XMC4500, XMC4400, XMC4200 and XMC4100 series 
1203:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1204:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** int32_t XMC_CCU4_GetCapturedValueFromFifo(const XMC_CCU4_MODULE_t *const module, const uint8_t slic
1205:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #else
1206:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1207:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1208:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param set The capture register set from which the captured value is to be retrieved
1209:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1210:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    uint32_t Returns the value captured in the \b slice_number
1211:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *             Range: [0x0 to 0xFFFF]
1212:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1213:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1214:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Read captured value from FIFO(CC4yECRD0 and CC4yECRD1).\n\n
1215:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This is applicable only in the Capture mode of operation. The signal whose timing characteristic
1216:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * must be mapped to an event which in turn must be mapped to the capture function. Based on the ca
1217:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * instant timer values are captured into capture registers. Timing characteristics of the input si
1218:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * derived/inferred from the captured values.
1219:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1220:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1221:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_IsExtendedCapReadEnabled().
1222:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @note Defined for XMC4800, XMC4700, XMC4500, XMC4400, XMC4200, XMC4100 devices only. For other d
1223:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1224:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** uint32_t XMC_CCU4_SLICE_GetCapturedValueFromFifo(const XMC_CCU4_SLICE_t *const slice,
1225:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 		                                             const XMC_CCU4_SLICE_CAP_REG_SET_t set);
1226:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** #endif
1227:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1228:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1229:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1230:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event Map an External event to the External Count Direction Function
1231:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1232:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1233:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
1234:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1235:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the Count Direction of the slice, by configuring CC4yCMC.UDS bit.\n\n
1236:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Count direction function is mapped with one of the 3 events. A slice can be configured to change
1237:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * CC4yTIMER count direction depending on an external signal.
1238:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1239:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1240:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1241:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1242:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t eve
1243:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1244:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1245:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1246:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1247:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1248:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1249:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1250:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the status bit override Function of the slice, by configuring CC4yCMC.OFS bit.\n\n
1251:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Status bit override function is mapped with one of the 3 events. A slice can be configured to ch
1252:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * output of the timer's CC4yST signal depending on an external signal. 
1253:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1254:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1255:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent().
1256:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1257:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_StatusBitOverrideConfig(XMC_CCU4_SLICE_t *const slice);
1258:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1259:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1260:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1261:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param exit_mode How should a previously logged trap state be exited?
1262:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param synch_with_pwm Should exit of trap state be synchronized with PWM cycle start?
1263:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1264:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1265:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1266:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1267:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the Trap Function of the slice, by configuring CC4yCMC.TS, CC4yTC.TRPSE, and CC4yTC.T
1268:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Trap function is mapped with Event-2. Criteria for exiting the trap state is configured.
1269:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This trap function allows PWM outputs to react on the state of an input pin.
1270:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Thus PWM output can be forced to inactive state upon detection of a trap.
1271:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * It is also possible to synchronize the trap function with the PWM signal using the \b synch_with
1272:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1273:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1274:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ConfigureEvent()<BR> XMC_CCU4_SLICE_SetInput().
1275:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1276:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_TrapConfig(XMC_CCU4_SLICE_t *const slice,
1277:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                const XMC_CCU4_SLICE_TRAP_EXIT_MODE_t exit_mode,
1278:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                bool synch_with_pwm);
1279:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1280:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1281:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1282:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1283:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param ev1_config Pointer to event 1 configuration data
1284:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param ev2_config Pointer to event 2 configuration data
1285:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1286:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1287:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1288:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1289:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1290:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Map Status bit override function with an Event1 & Event 2 of the slice and configure CC4yINS reg
1291:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and Low Pass filter opti
1292:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * by this routine for the events 1 & 2.  Event-1 input would be the trigger to override the value.
1293:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Event-2 input would be the override value.
1294:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1295:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1296:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig().
1297:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1298:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureStatusBitOverrideEvent(XMC_CCU4_SLICE_t *const slice,
1299:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev1_
1300:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                                     const XMC_CCU4_SLICE_EVENT_CONFIG_t *const ev2_
1301:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1302:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1303:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1304:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1305:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param config Pointer to event configuration data.
1306:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1307:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1308:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1309:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1310:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures an External Event of the slice, by updating CC4yINS register .\n\n
1311:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Details such as the input mapped to the event, event detection criteria and low pass filter
1312:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * options are programmed by this routine. The Event \b config  will configure the input selection,
1313:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * the edge selection, the level selection and the Low pass filter for the  event.
1314:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1315:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1316:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1317:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1318:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1319:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1320:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1321:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
1322:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_t event,
1323:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                                    const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config);
1324:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1325:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1326:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1327:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param event The External Event which needs to be configured.
1328:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param input One of the 16 inputs meant to be mapped to the desired event
1329:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1330:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1331:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1332:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * 
1333:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1334:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Selects an input for an external event, by configuring CC4yINS register.\n\n
1335:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * It is possible to select one of the possible 16 input signals for a given Event.
1336:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This configures the CC4yINS.EVxIS for the selected event.
1337:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1338:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1339:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartConfig()<BR> XMC_CCU4_SLICE_StopConfig()<BR> XMC_CCU4_SLICE_LoadConfig()<BR
1340:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_ModulationConfig()<BR> XMC_CCU4_SLICE_CountConfig()<BR> XMC_CCU4_SLICE_GateConfi
1341:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_Capture0Config()<BR> XMC_CCU4_SLICE_Capture1Config()<BR> XMC_CCU4_SLICE_Directio
1342:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StatusBitOverrideConfig()<BR> XMC_CCU4_SLICE_TrapConfig().
1343:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1344:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetInput(XMC_CCU4_SLICE_t *const slice,
1345:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_EVENT_t event,
1346:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****                              const XMC_CCU4_SLICE_INPUT_t input);
1347:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1348:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1349:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1350:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1351:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1352:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1353:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1354:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Enables the trap feature, by setting CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TRAP
1355:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n
1356:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * A particularly useful feature where the PWM output can be forced inactive upon detection of a tr
1357:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * can be the output of a sensing element which has just detected an abnormal electrical condition.
1358:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1359:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1360:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_TrapConfig()<BR> XMC_CCU4_SLICE_DisableTrap()<BR> XMC_CCU4_SLICE_ConfigureEvent(
1361:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetInput().
1362:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1363:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_EnableTrap(XMC_CCU4_SLICE_t *const slice)
1364:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1365:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_EnableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1366:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   slice->TC |= (uint32_t) CCU4_CC4_TC_TRAPE_Msk;
1367:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1368:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1369:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1370:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1371:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1372:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1373:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1374:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1375:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Disables the trap feature, by clearing CC4yTC.TRAPE0, CC4yTC.TRAPE1, CC4yTC.TRAPE2 and CC4yTC.TR
1376:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \a out_mask.\n\n.\n\n
1377:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This API will revert the changes done by XMC_CCU4_SLICE_EnableTrap().
1378:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This Ensures that the TRAP function has no effect on the output of the CCU4 slice.
1379:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1380:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1381:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_EnableTrap().
1382:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1383:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_DisableTrap(XMC_CCU4_SLICE_t *const slice)
1384:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1385:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_DisableTrap:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1386:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   slice->TC &= ~((uint32_t) CCU4_CC4_TC_TRAPE_Msk);
1387:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1388:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1389:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1390:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1391:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1392:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    bool returns \b true if the Timer is running else it returns \b false.
1393:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1394:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1395:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Returns the state of the timer (Either Running or stopped(idle)), by reading CC4yTCST.TRB bit.
1396:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1397:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1398:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
1399:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1400:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
1401:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1402:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1403:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1404:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1405:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1406:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1407:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1408:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1409:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *   ::XMC_CCU4_SLICE_TIMER_COUNT_DIR_t returns the direction in which the timer is counting.
1410:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1411:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1412:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Returns the timer counting direction, by reading CC4yTCST.CDIR bit.\n\n
1413:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This API will return the direction in which the timer is currently
1414:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * incrementing(XMC_CCU4_SLICE_TIMER_COUNT_DIR_UP) or decrementing (XMC_CCU4_SLICE_TIMER_COUNT_DIR_
1415:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1416:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1417:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  None.
1418:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1419:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_DIR_t XMC_CCU4_SLICE_GetCountingDir(const XMC_CCU4_SLICE
1420:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1421:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetCountingDir:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1422:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_DIR_t)(((slice->TCST) & CCU4_CC4_TCST_CDIR_Msk) >> CCU4_CC4_TC
1423:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1424:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1425:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1426:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1427:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1428:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1429:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1430:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1431:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Starts the timer counting operation, by setting CC4yTCSET.TRBS bit.\n\n
1432:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * It is necessary to have configured the CC4 slice before starting its timer.
1433:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Before the Timer is started ensure that the clock is provided to the slice.
1434:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1435:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1436:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StopTimer().
1437:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1438:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
1439:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
  80              	 .loc 1 1439 0
  81              	 .cfi_startproc
  82              	 
  83              	 
  84              	 
  85 0000 80B4     	 push {r7}
  86              	.LCFI6:
  87              	 .cfi_def_cfa_offset 4
  88              	 .cfi_offset 7,-4
  89 0002 83B0     	 sub sp,sp,#12
  90              	.LCFI7:
  91              	 .cfi_def_cfa_offset 16
  92 0004 00AF     	 add r7,sp,#0
  93              	.LCFI8:
  94              	 .cfi_def_cfa_register 7
  95 0006 7860     	 str r0,[r7,#4]
1440:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1441:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
  96              	 .loc 1 1441 0
  97 0008 7B68     	 ldr r3,[r7,#4]
  98 000a DA68     	 ldr r2,[r3,#12]
  99 000c 0022     	 movs r2,#0
 100 000e 42F00102 	 orr r2,r2,#1
 101 0012 DA60     	 str r2,[r3,#12]
1442:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
 102              	 .loc 1 1442 0
 103 0014 0C37     	 adds r7,r7,#12
 104              	.LCFI9:
 105              	 .cfi_def_cfa_offset 4
 106 0016 BD46     	 mov sp,r7
 107              	.LCFI10:
 108              	 .cfi_def_cfa_register 13
 109              	 
 110 0018 5DF8047B 	 ldr r7,[sp],#4
 111              	.LCFI11:
 112              	 .cfi_restore 7
 113              	 .cfi_def_cfa_offset 0
 114 001c 7047     	 bx lr
 115              	 .cfi_endproc
 116              	.LFE342:
 118 001e 00BF     	 .section .text.XMC_CCU4_SLICE_SetTimerCompareMatch,"ax",%progbits
 119              	 .align 2
 120              	 .thumb
 121              	 .thumb_func
 123              	XMC_CCU4_SLICE_SetTimerCompareMatch:
 124              	.LFB351:
1443:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1444:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1445:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1446:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1447:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1448:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1449:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1450:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Stops the Timer.<BR>\n
1451:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Timer counting operation can be stopped by invoking this API, by setting CC4yTCCLR.TRBC bit.
1452:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1453:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1454:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1455:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1456:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
1457:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1458:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1459:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
1460:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1461:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1462:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1463:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1464:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1465:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1466:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1467:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1468:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Resets the timer count to zero, by setting CC4yTCCLR.TCC bit.\n\n
1469:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * A timer which has been stopped can still retain the last counted value.
1470:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * After invoking this API the timer value will be cleared.
1471:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1472:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1473:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1474:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1475:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
1476:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1477:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1478:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
1479:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1480:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1481:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1482:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1483:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1484:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1485:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1486:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1487:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Stops and resets the timer count to zero, by setting CC4yTCCLR.TCC and CC4yTCCLR.TRBC bit.\n\n
1488:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1489:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1490:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_StartTimer().
1491:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1492:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_StopClearTimer(XMC_CCU4_SLICE_t *const slice)
1493:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1494:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_StopClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1495:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   slice->TCCLR = CCU4_CC4_TCCLR_TRBC_Msk | CCU4_CC4_TCCLR_TCC_Msk;
1496:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1497:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1498:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1499:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1500:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1501:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    ::XMC_CCU4_SLICE_MODE_t returns XMC_CCU4_SLICE_MODE_COMPARE if the slice is operating in comp
1502:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                          returns XMC_CCU4_SLICE_MODE_CAPTURE if the slice is operating in captur
1503:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1504:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1505:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the current mode of operation in the slice (either Capture mode or Compare mode), by r
1506:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * CC4yTC.CMOD bit.\n\n
1507:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Ensure that before invoking this API the CCU4 slice should be configured otherwise the output of
1508:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * invalid.
1509:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1510:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1511:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  None.
1512:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1513:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_MODE_t XMC_CCU4_SLICE_GetSliceMode(const XMC_CCU4_SLICE_t *const sli
1514:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1515:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetSliceMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
1516:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_MODE_t)(((slice->TC) & CCU4_CC4_TC_CMOD_Msk) >> CCU4_CC4_TC_CMOD_Pos));
1517:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1518:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1519:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1520:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired repetition mode (Either single shot or Continuous)
1521:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1522:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1523:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1524:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1525:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the Timer to either Single shot mode or continuous mode, by configuring CC4yTC.TSSM b
1526:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1527:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot. In the continuous mode of operation, the timer starts counting
1528:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * reaching the terminal count.
1529:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1530:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1531:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerRepeatMode().
1532:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1533:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerRepeatMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_RE
1534:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1535:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1536:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1537:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1538:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_REPEAT if continu
1539:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_REPEAT_MODE_SINGLE if single sh
1540:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1541:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1542:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the Timer repeat mode, either Single shot mode or continuous mode, by reading CC4yTC.T
1543:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * The timer will count up to the terminal count as specified in the period register and stops imme
1544:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * mode has been set to single shot mode. In the continuous mode of operation, the timer starts cou
1545:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * all over again after reaching the terminal count.
1546:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1547:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1548:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerRepeatMode().
1549:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1550:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t XMC_CCU4_SLICE_GetTimerRepeatMode(
1551:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 		                                                                            const XMC_CCU4_SLICE_
1552:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1553:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerRepeatMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice
1554:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_REPEAT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TSSM_Msk) >> CCU4_CC4_TC_T
1555:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1556:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1557:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1558:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param mode Desired counting mode (Either Edge Aligned or Center Aligned)
1559:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1560:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1561:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1562:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1563:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Configures the timer counting mode either Edge Aligned or Center Aligned, by configuring CC4yTC.
1564:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * In the edge aligned mode, the timer counts from 0 to the terminal count. Once the timer count ha
1565:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * compare value, the timer status output asserts itself. It will now deassert only after the timer
1566:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * terminal count.\n In the center aligned mode, the timer first counts from 0 to the terminal coun
1567:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * During this upward and downward counting, the timer status output stays asserted as long as the 
1568:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * greater than the compare value.
1569:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1570:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1571:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerCountingMode().
1572:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1573:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_
1574:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1575:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1576:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1577:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <br>
1578:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  ::XMC_CCU4_SLICE_TIMER_COUNT_MODE_t returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA if edge aligned 
1579:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                                     returns XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA if center aligned
1580:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1581:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1582:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Retrieves timer counting mode either Edge aligned or Center Aligned, by reading CC4yTC.TCM bit.\
1583:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1584:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1585:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCountingMode().
1586:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1587:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE XMC_CCU4_SLICE_TIMER_COUNT_MODE_t XMC_CCU4_SLICE_GetTimerCountingMode(
1588:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 		                                                                           const XMC_CCU4_SLICE_t
1589:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1590:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1591:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return((XMC_CCU4_SLICE_TIMER_COUNT_MODE_t)(((slice->TC) & CCU4_CC4_TC_TCM_Msk) >> CCU4_CC4_TC_TCM
1592:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1593:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1594:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1595:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param period_val Timer period value
1596:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *        Range: [0x0 to 0xFFFF]
1597:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1598:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1599:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1600:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1601:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer period, by writing CC4yPRS register.\n\n
1602:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * The frequency of counting/ PWM frequency is determined by this value. The period value is writte
1603:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * register. Explicitly enable the shadow transfer for the the period value by calling
1604:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_EnableShadowTransfer() with appropriate mask. If shadow transfer is enabled and the tim
1605:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual period register.
1606:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1607:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1608:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1609:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1610:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16
1611:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1612:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1613:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   slice->PRS = (uint32_t) period_val;
1614:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1615:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1616:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1617:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1618:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1619:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer period value
1620:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1621:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1622:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1623:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer period value currently effective, by reading CC4yPR register.\n\n
1624:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being used for the PWM period.
1625:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1626:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1627:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerPeriodMatch() would set the new period value to a shadow register.
1628:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual period register if the shadow transfer r
1629:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerPeri
1630:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1631:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1632:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1633:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerPeriodMatch().
1634:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1635:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerPeriodMatch(const XMC_CCU4_SLICE_t *const slice)
1636:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1637:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slic
1638:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->PR);
1639:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1640:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1641:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1642:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1643:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param compare_val Timer compare value
1644:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1645:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1646:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1647:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1648:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Programs the timer compare value, by writing CC4yCRS register.<BR>\n
1649:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  The PWM duty cycle is determined by this value.
1650:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * The compare value is written to a shadow register. Explicitly enable the shadow transfer for
1651:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * the the period/compare value by calling XMC_CCU4_EnableShadowTransfer() with
1652:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * appropriate mask.If shadow transfer is enabled and the timer is running,
1653:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * a period match transfers the value from the shadow register to the actual compare register.
1654:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1655:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1656:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
1657:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1658:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint1
1659:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 125              	 .loc 1 1659 0
 126              	 .cfi_startproc
 127              	 
 128              	 
 129              	 
 130 0000 80B4     	 push {r7}
 131              	.LCFI12:
 132              	 .cfi_def_cfa_offset 4
 133              	 .cfi_offset 7,-4
 134 0002 83B0     	 sub sp,sp,#12
 135              	.LCFI13:
 136              	 .cfi_def_cfa_offset 16
 137 0004 00AF     	 add r7,sp,#0
 138              	.LCFI14:
 139              	 .cfi_def_cfa_register 7
 140 0006 7860     	 str r0,[r7,#4]
 141 0008 0B46     	 mov r3,r1
 142 000a 7B80     	 strh r3,[r7,#2]
1660:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1661:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   slice->CRS = (uint32_t) compare_val;
 143              	 .loc 1 1661 0
 144 000c 7A88     	 ldrh r2,[r7,#2]
 145 000e 7B68     	 ldr r3,[r7,#4]
 146 0010 D96B     	 ldr r1,[r3,#60]
 147 0012 0021     	 movs r1,#0
 148 0014 0A43     	 orrs r2,r2,r1
 149 0016 DA63     	 str r2,[r3,#60]
1662:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
 150              	 .loc 1 1662 0
 151 0018 0C37     	 adds r7,r7,#12
 152              	.LCFI15:
 153              	 .cfi_def_cfa_offset 4
 154 001a BD46     	 mov sp,r7
 155              	.LCFI16:
 156              	 .cfi_def_cfa_register 13
 157              	 
 158 001c 5DF8047B 	 ldr r7,[sp],#4
 159              	.LCFI17:
 160              	 .cfi_restore 7
 161              	 .cfi_def_cfa_offset 0
 162 0020 7047     	 bx lr
 163              	 .cfi_endproc
 164              	.LFE351:
 166 0022 00BF     	 .section .text.XMC_CCU4_EnableShadowTransfer,"ax",%progbits
 167              	 .align 2
 168              	 .thumb
 169              	 .thumb_func
 171              	XMC_CCU4_EnableShadowTransfer:
 172              	.LFB353:
1663:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1664:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1665:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param slice Constant pointer to CC4 Slice
1666:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1667:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *   uint16_t returns the current timer compare value
1668:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *            Range: [0x0 to 0xFFFF]
1669:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1670:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1671:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Retrieves the timer compare value currently effective, by reading CC4yCRS register.\n\n
1672:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * If the timer is active then the value being returned is currently being for the PWM duty cycle( 
1673:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1674:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Note:</b><br>
1675:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * The XMC_CCU4_SLICE_SetTimerCompareMatch() would set the new compare value to a shadow register.
1676:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * This would only transfer the new values into the actual compare register if the shadow transfer 
1677:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * is enabled and if a period match occurs. Hence a consecutive call to XMC_CCU4_SLICE_GetTimerComp
1678:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * would not reflect the new values until the shadow transfer completes.
1679:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is CC4yCR.
1680:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1681:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1682:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  XMC_CCU4_SLICE_SetTimerCompareMatch().
1683:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1684:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerCompareMatch(const XMC_CCU4_SLICE_t *const slice)
1685:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
1686:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_SLICE_GetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(sli
1687:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   return((uint16_t)slice->CR);
1688:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
1689:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** 
1690:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** /**
1691:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param module Constant pointer to CCU4 module
1692:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @param shadow_transfer_msk Shadow transfer request mask for various transfers.
1693:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                             Use ::XMC_CCU4_SHADOW_TRANSFER_t enum items to create a mask of choi
1694:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *                              using a bit wise OR operation.
1695:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * @return <BR>
1696:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *    None<BR>
1697:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1698:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Description:</b><br>
1699:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Requests of shadow transfer for Period, Compare, Passive level, dither and prescaler, by configu
1700:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * the GCSS register.\n\n
1701:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * The transfer from the shadow registers to the actual registers is done in the immediate next occ
1702:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * shadow transfer trigger after the API is called.
1703:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1704:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Any call to XMC_CCU4_SLICE_SetTimerPeriodMatch()<BR> XMC_CCU4_SLICE_SetTimerCompareMatch()<BR>
1705:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * XMC_CCU4_SLICE_SetPrescaler()<BR> XMC_CCU4_SLICE_CompareInit()<BR> XMC_CCU4_SLICE_CaptureInit().
1706:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * must be succeeded by this API.
1707:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * Directly accessed Register is GCSS.
1708:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *
1709:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  * \par<b>Related APIs:</b><br>
1710:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  *  None.
1711:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****  */
1712:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** __STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t 
1713:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** {
 173              	 .loc 1 1713 0
 174              	 .cfi_startproc
 175              	 
 176              	 
 177              	 
 178 0000 80B4     	 push {r7}
 179              	.LCFI18:
 180              	 .cfi_def_cfa_offset 4
 181              	 .cfi_offset 7,-4
 182 0002 83B0     	 sub sp,sp,#12
 183              	.LCFI19:
 184              	 .cfi_def_cfa_offset 16
 185 0004 00AF     	 add r7,sp,#0
 186              	.LCFI20:
 187              	 .cfi_def_cfa_register 7
 188 0006 7860     	 str r0,[r7,#4]
 189 0008 3960     	 str r1,[r7]
1714:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module))
1715:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h ****   module->GCSS = (uint32_t)shadow_transfer_msk;  
 190              	 .loc 1 1715 0
 191 000a 7B68     	 ldr r3,[r7,#4]
 192 000c 1A69     	 ldr r2,[r3,#16]
 193 000e 0021     	 movs r1,#0
 194 0010 3A68     	 ldr r2,[r7]
 195 0012 0A43     	 orrs r2,r2,r1
 196 0014 1A61     	 str r2,[r3,#16]
1716:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc\xmc_ccu4.h **** }
 197              	 .loc 1 1716 0
 198 0016 0C37     	 adds r7,r7,#12
 199              	.LCFI21:
 200              	 .cfi_def_cfa_offset 4
 201 0018 BD46     	 mov sp,r7
 202              	.LCFI22:
 203              	 .cfi_def_cfa_register 13
 204              	 
 205 001a 5DF8047B 	 ldr r7,[sp],#4
 206              	.LCFI23:
 207              	 .cfi_restore 7
 208              	 .cfi_def_cfa_offset 0
 209 001e 7047     	 bx lr
 210              	 .cfi_endproc
 211              	.LFE353:
 213              	 .section .bss.pwmWrite,"aw",%nobits
 214              	 .align 2
 217              	pwmWrite:
 218 0000 00000000 	 .space 4
 219              	 .section .bss.motors,"aw",%nobits
 220              	 .align 2
 223              	motors:
 224 0000 00000000 	 .space 176
 224      00000000 
 224      00000000 
 224      00000000 
 224      00000000 
 225              	 .section .bss.pwmCompleteWrite,"aw",%nobits
 226              	 .align 2
 229              	pwmCompleteWrite:
 230 0000 00000000 	 .space 4
 231              	 .section .bss.servos,"aw",%nobits
 232              	 .align 2
 235              	servos:
 236 0000 00000000 	 .space 176
 236      00000000 
 236      00000000 
 236      00000000 
 236      00000000 
 237              	 .section .bss.pwmMotorsEnabled,"aw",%nobits
 240              	pwmMotorsEnabled:
 241 0000 00       	 .space 1
 242              	 .section .bss.isDshot,"aw",%nobits
 245              	isDshot:
 246 0000 00       	 .space 1
 247              	 .global useBurstDshot
 248              	 .section .bss.useBurstDshot,"aw",%nobits
 251              	useBurstDshot:
 252 0000 00       	 .space 1
 253              	 .section .text.pwmOCConfig,"ax",%progbits
 254              	 .align 2
 255              	 .thumb
 256              	 .thumb_func
 258              	pwmOCConfig:
 259              	.LFB527:
 260              	 .file 2 "../cleanflight/src/main/drivers/pwm_output.c"
   1:../cleanflight/src/main/drivers/pwm_output.c **** /*
   2:../cleanflight/src/main/drivers/pwm_output.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/drivers/pwm_output.c ****  *
   4:../cleanflight/src/main/drivers/pwm_output.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/drivers/pwm_output.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/drivers/pwm_output.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/drivers/pwm_output.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/drivers/pwm_output.c ****  * any later version.
   9:../cleanflight/src/main/drivers/pwm_output.c ****  *
  10:../cleanflight/src/main/drivers/pwm_output.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/drivers/pwm_output.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/drivers/pwm_output.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/drivers/pwm_output.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/drivers/pwm_output.c ****  *
  15:../cleanflight/src/main/drivers/pwm_output.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/drivers/pwm_output.c ****  * along with this software.
  17:../cleanflight/src/main/drivers/pwm_output.c ****  *
  18:../cleanflight/src/main/drivers/pwm_output.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/drivers/pwm_output.c ****  */
  20:../cleanflight/src/main/drivers/pwm_output.c **** 
  21:../cleanflight/src/main/drivers/pwm_output.c **** #include <stdbool.h>
  22:../cleanflight/src/main/drivers/pwm_output.c **** #include <stdint.h>
  23:../cleanflight/src/main/drivers/pwm_output.c **** #include <string.h>
  24:../cleanflight/src/main/drivers/pwm_output.c **** #include <math.h>
  25:../cleanflight/src/main/drivers/pwm_output.c **** 
  26:../cleanflight/src/main/drivers/pwm_output.c **** #include "platform.h"
  27:../cleanflight/src/main/drivers/pwm_output.c **** #include "drivers/time.h"
  28:../cleanflight/src/main/drivers/pwm_output.c **** 
  29:../cleanflight/src/main/drivers/pwm_output.c **** #include "drivers/io.h"
  30:../cleanflight/src/main/drivers/pwm_output.c **** #include "pwm_output.h"
  31:../cleanflight/src/main/drivers/pwm_output.c **** #include "timer.h"
  32:../cleanflight/src/main/drivers/pwm_output.c **** #include "drivers/pwm_output.h"
  33:../cleanflight/src/main/drivers/pwm_output.c **** 
  34:../cleanflight/src/main/drivers/pwm_output.c **** static FAST_RAM_ZERO_INIT pwmWriteFn *pwmWrite;
  35:../cleanflight/src/main/drivers/pwm_output.c **** static FAST_RAM_ZERO_INIT pwmOutputPort_t motors[MAX_SUPPORTED_MOTORS];
  36:../cleanflight/src/main/drivers/pwm_output.c **** static FAST_RAM_ZERO_INIT pwmCompleteWriteFn *pwmCompleteWrite = NULL;
  37:../cleanflight/src/main/drivers/pwm_output.c **** 
  38:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_DSHOT
  39:../cleanflight/src/main/drivers/pwm_output.c **** FAST_RAM_ZERO_INIT loadDmaBufferFn *loadDmaBuffer;
  40:../cleanflight/src/main/drivers/pwm_output.c **** #define DSHOT_INITIAL_DELAY_US 10000
  41:../cleanflight/src/main/drivers/pwm_output.c **** #define DSHOT_COMMAND_DELAY_US 1000
  42:../cleanflight/src/main/drivers/pwm_output.c **** #define DSHOT_ESCINFO_DELAY_US 12000
  43:../cleanflight/src/main/drivers/pwm_output.c **** #define DSHOT_BEEP_DELAY_US 100000
  44:../cleanflight/src/main/drivers/pwm_output.c **** 
  45:../cleanflight/src/main/drivers/pwm_output.c **** typedef struct dshotCommandControl_s {
  46:../cleanflight/src/main/drivers/pwm_output.c ****     timeUs_t nextCommandAtUs;
  47:../cleanflight/src/main/drivers/pwm_output.c ****     timeUs_t delayAfterCommandUs;
  48:../cleanflight/src/main/drivers/pwm_output.c ****     bool waitingForIdle;
  49:../cleanflight/src/main/drivers/pwm_output.c ****     uint8_t repeats;
  50:../cleanflight/src/main/drivers/pwm_output.c ****     uint8_t command[MAX_SUPPORTED_MOTORS];
  51:../cleanflight/src/main/drivers/pwm_output.c **** } dshotCommandControl_t;
  52:../cleanflight/src/main/drivers/pwm_output.c **** 
  53:../cleanflight/src/main/drivers/pwm_output.c **** static dshotCommandControl_t dshotCommandControl;
  54:../cleanflight/src/main/drivers/pwm_output.c **** #endif
  55:../cleanflight/src/main/drivers/pwm_output.c **** 
  56:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_SERVOS
  57:../cleanflight/src/main/drivers/pwm_output.c **** static pwmOutputPort_t servos[MAX_SUPPORTED_SERVOS];
  58:../cleanflight/src/main/drivers/pwm_output.c **** #endif
  59:../cleanflight/src/main/drivers/pwm_output.c **** 
  60:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_BEEPER
  61:../cleanflight/src/main/drivers/pwm_output.c **** static pwmOutputPort_t beeperPwm;
  62:../cleanflight/src/main/drivers/pwm_output.c **** static uint16_t freqBeep = 0;
  63:../cleanflight/src/main/drivers/pwm_output.c **** #endif
  64:../cleanflight/src/main/drivers/pwm_output.c **** 
  65:../cleanflight/src/main/drivers/pwm_output.c **** static bool pwmMotorsEnabled = false;
  66:../cleanflight/src/main/drivers/pwm_output.c **** static bool isDshot = false;
  67:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_DSHOT_DMAR
  68:../cleanflight/src/main/drivers/pwm_output.c **** FAST_RAM_ZERO_INIT bool useBurstDshot = false;
  69:../cleanflight/src/main/drivers/pwm_output.c **** #endif
  70:../cleanflight/src/main/drivers/pwm_output.c **** 
  71:../cleanflight/src/main/drivers/pwm_output.c **** static void pwmOCConfig(TIM_TypeDef *tim, uint8_t channel, uint16_t value, uint8_t output)
  72:../cleanflight/src/main/drivers/pwm_output.c **** {
 261              	 .loc 2 72 0
 262              	 .cfi_startproc
 263              	 
 264              	 
 265 0000 80B5     	 push {r7,lr}
 266              	.LCFI24:
 267              	 .cfi_def_cfa_offset 8
 268              	 .cfi_offset 7,-8
 269              	 .cfi_offset 14,-4
 270 0002 82B0     	 sub sp,sp,#8
 271              	.LCFI25:
 272              	 .cfi_def_cfa_offset 16
 273 0004 00AF     	 add r7,sp,#0
 274              	.LCFI26:
 275              	 .cfi_def_cfa_register 7
 276 0006 7860     	 str r0,[r7,#4]
 277 0008 0846     	 mov r0,r1
 278 000a 1146     	 mov r1,r2
 279 000c 1A46     	 mov r2,r3
 280 000e 0346     	 mov r3,r0
 281 0010 FB70     	 strb r3,[r7,#3]
 282 0012 0B46     	 mov r3,r1
 283 0014 3B80     	 strh r3,[r7]
 284 0016 1346     	 mov r3,r2
 285 0018 BB70     	 strb r3,[r7,#2]
  73:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef XMC4700_F100x2048
  74:../cleanflight/src/main/drivers/pwm_output.c **** 	XMC_CCU4_SLICE_SetTimerCompareMatch(tim, value);
 286              	 .loc 2 74 0
 287 001a 3B88     	 ldrh r3,[r7]
 288 001c 7868     	 ldr r0,[r7,#4]
 289 001e 1946     	 mov r1,r3
 290 0020 FFF7FEFF 	 bl XMC_CCU4_SLICE_SetTimerCompareMatch
  75:../cleanflight/src/main/drivers/pwm_output.c **** 	XMC_CCU4_EnableShadowTransfer(TIM_MODULE(tim), 1 << 4  *TIM_SLICE_NO(tim));
 291              	 .loc 2 75 0
 292 0024 7B68     	 ldr r3,[r7,#4]
 293 0026 1B0C     	 lsrs r3,r3,#16
 294 0028 1B04     	 lsls r3,r3,#16
 295 002a 1946     	 mov r1,r3
 296 002c 7B68     	 ldr r3,[r7,#4]
 297 002e 03F47063 	 and r3,r3,#3840
 298 0032 1B0A     	 lsrs r3,r3,#8
 299 0034 03F18043 	 add r3,r3,#1073741824
 300 0038 013B     	 subs r3,r3,#1
 301 003a 9B00     	 lsls r3,r3,#2
 302 003c 1A46     	 mov r2,r3
 303 003e 0123     	 movs r3,#1
 304 0040 9340     	 lsls r3,r3,r2
 305 0042 0846     	 mov r0,r1
 306 0044 1946     	 mov r1,r3
 307 0046 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
  76:../cleanflight/src/main/drivers/pwm_output.c **** 	XMC_CCU4_SLICE_SetPassiveLevel(tim, (output & TIMER_OUTPUT_INVERTED) ? XMC_CCU4_SLICE_OUTPUT_PASSI
 308              	 .loc 2 76 0
 309 004a BB78     	 ldrb r3,[r7,#2]
 310 004c 03F00103 	 and r3,r3,#1
 311 0050 002B     	 cmp r3,#0
 312 0052 0CBF     	 ite eq
 313 0054 0123     	 moveq r3,#1
 314 0056 0023     	 movne r3,#0
 315 0058 DBB2     	 uxtb r3,r3
 316 005a 7868     	 ldr r0,[r7,#4]
 317 005c 1946     	 mov r1,r3
 318 005e FFF7FEFF 	 bl XMC_CCU4_SLICE_SetPassiveLevel
  77:../cleanflight/src/main/drivers/pwm_output.c **** #else
  78:../cleanflight/src/main/drivers/pwm_output.c **** #if defined(USE_HAL_DRIVER)
  79:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_HandleTypeDef* Handle = timerFindTimerHandle(tim);
  80:../cleanflight/src/main/drivers/pwm_output.c ****     if (Handle == NULL) return;
  81:../cleanflight/src/main/drivers/pwm_output.c **** 
  82:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OC_InitTypeDef TIM_OCInitStructure;
  83:../cleanflight/src/main/drivers/pwm_output.c **** 
  84:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitStructure.OCMode = TIM_OCMODE_PWM1;
  85:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitStructure.OCIdleState = TIM_OCIDLESTATE_SET;
  86:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitStructure.OCPolarity = (output & TIMER_OUTPUT_INVERTED) ? TIM_OCPOLARITY_LOW : TIM_OC
  87:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitStructure.OCNIdleState = TIM_OCNIDLESTATE_SET;
  88:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitStructure.OCNPolarity = (output & TIMER_OUTPUT_INVERTED) ? TIM_OCNPOLARITY_LOW : TIM_
  89:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitStructure.Pulse = value;
  90:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitStructure.OCFastMode = TIM_OCFAST_DISABLE;
  91:../cleanflight/src/main/drivers/pwm_output.c **** 
  92:../cleanflight/src/main/drivers/pwm_output.c ****     HAL_TIM_PWM_ConfigChannel(Handle, &TIM_OCInitStructure, channel);
  93:../cleanflight/src/main/drivers/pwm_output.c **** #else
  94:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitTypeDef TIM_OCInitStructure;
  95:../cleanflight/src/main/drivers/pwm_output.c **** 
  96:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCStructInit(&TIM_OCInitStructure);
  97:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  98:../cleanflight/src/main/drivers/pwm_output.c **** 
  99:../cleanflight/src/main/drivers/pwm_output.c ****     if (output & TIMER_OUTPUT_N_CHANNEL) {
 100:../cleanflight/src/main/drivers/pwm_output.c ****         TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
 101:../cleanflight/src/main/drivers/pwm_output.c ****         TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 102:../cleanflight/src/main/drivers/pwm_output.c ****         TIM_OCInitStructure.TIM_OCNPolarity = (output & TIMER_OUTPUT_INVERTED) ? TIM_OCNPolarity_Lo
 103:../cleanflight/src/main/drivers/pwm_output.c ****     } else {
 104:../cleanflight/src/main/drivers/pwm_output.c ****         TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 105:../cleanflight/src/main/drivers/pwm_output.c ****         TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
 106:../cleanflight/src/main/drivers/pwm_output.c ****         TIM_OCInitStructure.TIM_OCPolarity =  (output & TIMER_OUTPUT_INVERTED) ? TIM_OCPolarity_Low
 107:../cleanflight/src/main/drivers/pwm_output.c ****     }
 108:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_OCInitStructure.TIM_Pulse = value;
 109:../cleanflight/src/main/drivers/pwm_output.c **** 
 110:../cleanflight/src/main/drivers/pwm_output.c ****     timerOCInit(tim, channel, &TIM_OCInitStructure);
 111:../cleanflight/src/main/drivers/pwm_output.c ****     timerOCPreloadConfig(tim, channel, TIM_OCPreload_Enable);
 112:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 113:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 114:../cleanflight/src/main/drivers/pwm_output.c **** }
 319              	 .loc 2 114 0
 320 0062 0837     	 adds r7,r7,#8
 321              	.LCFI27:
 322              	 .cfi_def_cfa_offset 8
 323 0064 BD46     	 mov sp,r7
 324              	.LCFI28:
 325              	 .cfi_def_cfa_register 13
 326              	 
 327 0066 80BD     	 pop {r7,pc}
 328              	 .cfi_endproc
 329              	.LFE527:
 331              	 .section .text.pwmOutConfig,"ax",%progbits
 332              	 .align 2
 333              	 .global pwmOutConfig
 334              	 .thumb
 335              	 .thumb_func
 337              	pwmOutConfig:
 338              	.LFB528:
 115:../cleanflight/src/main/drivers/pwm_output.c **** 
 116:../cleanflight/src/main/drivers/pwm_output.c **** void pwmOutConfig(timerChannel_t *channel, const timerHardware_t *timerHardware, uint32_t hz, uint1
 117:../cleanflight/src/main/drivers/pwm_output.c **** {
 339              	 .loc 2 117 0
 340              	 .cfi_startproc
 341              	 
 342              	 
 343 0000 80B5     	 push {r7,lr}
 344              	.LCFI29:
 345              	 .cfi_def_cfa_offset 8
 346              	 .cfi_offset 7,-8
 347              	 .cfi_offset 14,-4
 348 0002 84B0     	 sub sp,sp,#16
 349              	.LCFI30:
 350              	 .cfi_def_cfa_offset 24
 351 0004 00AF     	 add r7,sp,#0
 352              	.LCFI31:
 353              	 .cfi_def_cfa_register 7
 354 0006 F860     	 str r0,[r7,#12]
 355 0008 B960     	 str r1,[r7,#8]
 356 000a 7A60     	 str r2,[r7,#4]
 357 000c 7B80     	 strh r3,[r7,#2]
 118:../cleanflight/src/main/drivers/pwm_output.c **** #if defined(USE_HAL_DRIVER)
 119:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_HandleTypeDef* Handle = timerFindTimerHandle(timerHardware->tim);
 120:../cleanflight/src/main/drivers/pwm_output.c ****     if (Handle == NULL) return;
 121:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 122:../cleanflight/src/main/drivers/pwm_output.c **** 
 123:../cleanflight/src/main/drivers/pwm_output.c ****     configTimeBase(timerHardware->tim, period, hz);
 358              	 .loc 2 123 0
 359 000e BB68     	 ldr r3,[r7,#8]
 360 0010 1A68     	 ldr r2,[r3]
 361 0012 7B88     	 ldrh r3,[r7,#2]
 362 0014 1046     	 mov r0,r2
 363 0016 1946     	 mov r1,r3
 364 0018 7A68     	 ldr r2,[r7,#4]
 365 001a FFF7FEFF 	 bl configTimeBase
 124:../cleanflight/src/main/drivers/pwm_output.c ****     pwmOCConfig(timerHardware->tim,
 366              	 .loc 2 124 0
 367 001e BB68     	 ldr r3,[r7,#8]
 368 0020 1868     	 ldr r0,[r3]
 369 0022 BB68     	 ldr r3,[r7,#8]
 370 0024 5979     	 ldrb r1,[r3,#5]
 371 0026 3B7F     	 ldrb r3,[r7,#28]
 372 0028 002B     	 cmp r3,#0
 373 002a 05D0     	 beq .L7
 125:../cleanflight/src/main/drivers/pwm_output.c ****         timerHardware->channel,
 126:../cleanflight/src/main/drivers/pwm_output.c ****         value,
 127:../cleanflight/src/main/drivers/pwm_output.c ****         inversion ? timerHardware->output ^ TIMER_OUTPUT_INVERTED : timerHardware->output
 374              	 .loc 2 127 0 discriminator 1
 375 002c BB68     	 ldr r3,[r7,#8]
 376 002e DB79     	 ldrb r3,[r3,#7]
 124:../cleanflight/src/main/drivers/pwm_output.c ****     pwmOCConfig(timerHardware->tim,
 377              	 .loc 2 124 0 discriminator 1
 378 0030 83F00103 	 eor r3,r3,#1
 379 0034 DBB2     	 uxtb r3,r3
 380 0036 01E0     	 b .L8
 381              	.L7:
 124:../cleanflight/src/main/drivers/pwm_output.c ****     pwmOCConfig(timerHardware->tim,
 382              	 .loc 2 124 0 is_stmt 0 discriminator 2
 383 0038 BB68     	 ldr r3,[r7,#8]
 384 003a DB79     	 ldrb r3,[r3,#7]
 385              	.L8:
 124:../cleanflight/src/main/drivers/pwm_output.c ****     pwmOCConfig(timerHardware->tim,
 386              	 .loc 2 124 0 discriminator 4
 387 003c 3A8B     	 ldrh r2,[r7,#24]
 388 003e FFF7FEFF 	 bl pwmOCConfig
 128:../cleanflight/src/main/drivers/pwm_output.c ****         );
 129:../cleanflight/src/main/drivers/pwm_output.c **** 
 130:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef XMC4700_F100x2048
 131:../cleanflight/src/main/drivers/pwm_output.c **** 
 132:../cleanflight/src/main/drivers/pwm_output.c ****     XMC_CCU4_EnableClock(TIM_MODULE(timerHardware->tim), TIM_SLICE_NO(timerHardware->tim));
 389              	 .loc 2 132 0 is_stmt 1 discriminator 4
 390 0042 BB68     	 ldr r3,[r7,#8]
 391 0044 1B68     	 ldr r3,[r3]
 392 0046 1B0C     	 lsrs r3,r3,#16
 393 0048 1B04     	 lsls r3,r3,#16
 394 004a 1A46     	 mov r2,r3
 395 004c BB68     	 ldr r3,[r7,#8]
 396 004e 1B68     	 ldr r3,[r3]
 397 0050 03F47063 	 and r3,r3,#3840
 398 0054 1B0A     	 lsrs r3,r3,#8
 399 0056 DBB2     	 uxtb r3,r3
 400 0058 013B     	 subs r3,r3,#1
 401 005a DBB2     	 uxtb r3,r3
 402 005c 1046     	 mov r0,r2
 403 005e 1946     	 mov r1,r3
 404 0060 FFF7FEFF 	 bl XMC_CCU4_EnableClock
 133:../cleanflight/src/main/drivers/pwm_output.c ****     XMC_CCU4_SLICE_StartTimer(timerHardware->tim);
 405              	 .loc 2 133 0 discriminator 4
 406 0064 BB68     	 ldr r3,[r7,#8]
 407 0066 1B68     	 ldr r3,[r3]
 408 0068 1846     	 mov r0,r3
 409 006a FFF7FEFF 	 bl XMC_CCU4_SLICE_StartTimer
 134:../cleanflight/src/main/drivers/pwm_output.c **** #else
 135:../cleanflight/src/main/drivers/pwm_output.c **** #if defined(USE_HAL_DRIVER)
 136:../cleanflight/src/main/drivers/pwm_output.c ****     if (timerHardware->output & TIMER_OUTPUT_N_CHANNEL)
 137:../cleanflight/src/main/drivers/pwm_output.c ****         HAL_TIMEx_PWMN_Start(Handle, timerHardware->channel);
 138:../cleanflight/src/main/drivers/pwm_output.c ****     else
 139:../cleanflight/src/main/drivers/pwm_output.c ****         HAL_TIM_PWM_Start(Handle, timerHardware->channel);
 140:../cleanflight/src/main/drivers/pwm_output.c ****     HAL_TIM_Base_Start(Handle);
 141:../cleanflight/src/main/drivers/pwm_output.c **** #else
 142:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_CtrlPWMOutputs(timerHardware->tim, ENABLE);
 143:../cleanflight/src/main/drivers/pwm_output.c ****     TIM_Cmd(timerHardware->tim, ENABLE);
 144:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 145:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 146:../cleanflight/src/main/drivers/pwm_output.c **** 
 147:../cleanflight/src/main/drivers/pwm_output.c ****     channel->ccr = timerChCCR(timerHardware);
 410              	 .loc 2 147 0 discriminator 4
 411 006e B868     	 ldr r0,[r7,#8]
 412 0070 FFF7FEFF 	 bl timerChCCR
 413 0074 0246     	 mov r2,r0
 414 0076 FB68     	 ldr r3,[r7,#12]
 415 0078 1A60     	 str r2,[r3]
 148:../cleanflight/src/main/drivers/pwm_output.c **** 
 149:../cleanflight/src/main/drivers/pwm_output.c ****     channel->tim = timerHardware->tim;
 416              	 .loc 2 149 0 discriminator 4
 417 007a BB68     	 ldr r3,[r7,#8]
 418 007c 1A68     	 ldr r2,[r3]
 419 007e FB68     	 ldr r3,[r7,#12]
 420 0080 5A60     	 str r2,[r3,#4]
 150:../cleanflight/src/main/drivers/pwm_output.c **** 
 151:../cleanflight/src/main/drivers/pwm_output.c ****     *channel->ccr = 0;
 421              	 .loc 2 151 0 discriminator 4
 422 0082 FB68     	 ldr r3,[r7,#12]
 423 0084 1B68     	 ldr r3,[r3]
 424 0086 0022     	 movs r2,#0
 425 0088 1A60     	 str r2,[r3]
 152:../cleanflight/src/main/drivers/pwm_output.c **** }
 426              	 .loc 2 152 0 discriminator 4
 427 008a 1037     	 adds r7,r7,#16
 428              	.LCFI32:
 429              	 .cfi_def_cfa_offset 8
 430 008c BD46     	 mov sp,r7
 431              	.LCFI33:
 432              	 .cfi_def_cfa_register 13
 433              	 
 434 008e 80BD     	 pop {r7,pc}
 435              	 .cfi_endproc
 436              	.LFE528:
 438              	 .section .text.pwmWriteUnused,"ax",%progbits
 439              	 .align 2
 440              	 .thumb
 441              	 .thumb_func
 443              	pwmWriteUnused:
 444              	.LFB529:
 153:../cleanflight/src/main/drivers/pwm_output.c **** 
 154:../cleanflight/src/main/drivers/pwm_output.c **** static void pwmWriteUnused(uint8_t index, float value)
 155:../cleanflight/src/main/drivers/pwm_output.c **** {
 445              	 .loc 2 155 0
 446              	 .cfi_startproc
 447              	 
 448              	 
 449              	 
 450 0000 80B4     	 push {r7}
 451              	.LCFI34:
 452              	 .cfi_def_cfa_offset 4
 453              	 .cfi_offset 7,-4
 454 0002 83B0     	 sub sp,sp,#12
 455              	.LCFI35:
 456              	 .cfi_def_cfa_offset 16
 457 0004 00AF     	 add r7,sp,#0
 458              	.LCFI36:
 459              	 .cfi_def_cfa_register 7
 460 0006 0346     	 mov r3,r0
 461 0008 3960     	 str r1,[r7]
 462 000a FB71     	 strb r3,[r7,#7]
 156:../cleanflight/src/main/drivers/pwm_output.c ****     UNUSED(index);
 157:../cleanflight/src/main/drivers/pwm_output.c ****     UNUSED(value);
 158:../cleanflight/src/main/drivers/pwm_output.c **** }
 463              	 .loc 2 158 0
 464 000c 0C37     	 adds r7,r7,#12
 465              	.LCFI37:
 466              	 .cfi_def_cfa_offset 4
 467 000e BD46     	 mov sp,r7
 468              	.LCFI38:
 469              	 .cfi_def_cfa_register 13
 470              	 
 471 0010 5DF8047B 	 ldr r7,[sp],#4
 472              	.LCFI39:
 473              	 .cfi_restore 7
 474              	 .cfi_def_cfa_offset 0
 475 0014 7047     	 bx lr
 476              	 .cfi_endproc
 477              	.LFE529:
 479 0016 00BF     	 .section .text.pwmWriteStandard,"ax",%progbits
 480              	 .align 2
 481              	 .thumb
 482              	 .thumb_func
 484              	pwmWriteStandard:
 485              	.LFB530:
 159:../cleanflight/src/main/drivers/pwm_output.c **** 
 160:../cleanflight/src/main/drivers/pwm_output.c **** static void pwmWriteStandard(uint8_t index, float value)
 161:../cleanflight/src/main/drivers/pwm_output.c **** {
 486              	 .loc 2 161 0
 487              	 .cfi_startproc
 488              	 
 489              	 
 490 0000 90B5     	 push {r4,r7,lr}
 491              	.LCFI40:
 492              	 .cfi_def_cfa_offset 12
 493              	 .cfi_offset 4,-12
 494              	 .cfi_offset 7,-8
 495              	 .cfi_offset 14,-4
 496 0002 83B0     	 sub sp,sp,#12
 497              	.LCFI41:
 498              	 .cfi_def_cfa_offset 24
 499 0004 00AF     	 add r7,sp,#0
 500              	.LCFI42:
 501              	 .cfi_def_cfa_register 7
 502 0006 0346     	 mov r3,r0
 503 0008 3960     	 str r1,[r7]
 504 000a FB71     	 strb r3,[r7,#7]
 162:../cleanflight/src/main/drivers/pwm_output.c ****     /* TODO: move value to be a number between 0-1 (i.e. percent throttle from mixer) */
 163:../cleanflight/src/main/drivers/pwm_output.c ****     *motors[index].channel.ccr = lrintf((value * motors[index].pulseScale) + motors[index].pulseOff
 505              	 .loc 2 163 0
 506 000c FB79     	 ldrb r3,[r7,#7]
 507 000e 144A     	 ldr r2,.L11
 508 0010 1621     	 movs r1,#22
 509 0012 01FB03F3 	 mul r3,r1,r3
 510 0016 1344     	 add r3,r3,r2
 511 0018 1C68     	 ldr r4,[r3]
 512 001a FB79     	 ldrb r3,[r7,#7]
 513 001c 104A     	 ldr r2,.L11
 514 001e 1621     	 movs r1,#22
 515 0020 01FB03F3 	 mul r3,r1,r3
 516 0024 1344     	 add r3,r3,r2
 517 0026 0833     	 adds r3,r3,#8
 518 0028 1B68     	 ldr r3,[r3]
 519 002a D7ED007A 	 flds s15,[r7]
 520 002e 07EE103A 	 fmsr s14,r3
 521 0032 67EE277A 	 fmuls s15,s14,s15
 522 0036 FB79     	 ldrb r3,[r7,#7]
 523 0038 094A     	 ldr r2,.L11
 524 003a 1621     	 movs r1,#22
 525 003c 01FB03F3 	 mul r3,r1,r3
 526 0040 1344     	 add r3,r3,r2
 527 0042 0833     	 adds r3,r3,#8
 528 0044 5B68     	 ldr r3,[r3,#4]
 529 0046 07EE103A 	 fmsr s14,r3
 530 004a 77EE877A 	 fadds s15,s15,s14
 531 004e 17EE900A 	 fmrs r0,s15
 532 0052 FFF7FEFF 	 bl lrintf
 533 0056 0346     	 mov r3,r0
 534 0058 2360     	 str r3,[r4]
 164:../cleanflight/src/main/drivers/pwm_output.c **** }
 535              	 .loc 2 164 0
 536 005a 0C37     	 adds r7,r7,#12
 537              	.LCFI43:
 538              	 .cfi_def_cfa_offset 12
 539 005c BD46     	 mov sp,r7
 540              	.LCFI44:
 541              	 .cfi_def_cfa_register 13
 542              	 
 543 005e 90BD     	 pop {r4,r7,pc}
 544              	.L12:
 545              	 .align 2
 546              	.L11:
 547 0060 00000000 	 .word motors
 548              	 .cfi_endproc
 549              	.LFE530:
 551              	 .section .text.pwmWriteMotor,"ax",%progbits
 552              	 .align 2
 553              	 .global pwmWriteMotor
 554              	 .thumb
 555              	 .thumb_func
 557              	pwmWriteMotor:
 558              	.LFB531:
 165:../cleanflight/src/main/drivers/pwm_output.c **** 
 166:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_DSHOT
 167:../cleanflight/src/main/drivers/pwm_output.c **** static FAST_CODE void pwmWriteDshot(uint8_t index, float value)
 168:../cleanflight/src/main/drivers/pwm_output.c **** {
 169:../cleanflight/src/main/drivers/pwm_output.c ****     pwmWriteDshotInt(index, lrintf(value));
 170:../cleanflight/src/main/drivers/pwm_output.c **** }
 171:../cleanflight/src/main/drivers/pwm_output.c **** 
 172:../cleanflight/src/main/drivers/pwm_output.c **** static FAST_CODE uint8_t loadDmaBufferDshot(uint32_t *dmaBuffer, int stride, uint16_t packet)
 173:../cleanflight/src/main/drivers/pwm_output.c **** {
 174:../cleanflight/src/main/drivers/pwm_output.c ****     for (int i = 0; i < 16; i++) {
 175:../cleanflight/src/main/drivers/pwm_output.c ****         dmaBuffer[i * stride] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;  // MSB first
 176:../cleanflight/src/main/drivers/pwm_output.c ****         packet <<= 1;
 177:../cleanflight/src/main/drivers/pwm_output.c ****     }
 178:../cleanflight/src/main/drivers/pwm_output.c **** 
 179:../cleanflight/src/main/drivers/pwm_output.c ****     return DSHOT_DMA_BUFFER_SIZE;
 180:../cleanflight/src/main/drivers/pwm_output.c **** }
 181:../cleanflight/src/main/drivers/pwm_output.c **** 
 182:../cleanflight/src/main/drivers/pwm_output.c **** static uint8_t loadDmaBufferProshot(uint32_t *dmaBuffer, int stride, uint16_t packet)
 183:../cleanflight/src/main/drivers/pwm_output.c **** {
 184:../cleanflight/src/main/drivers/pwm_output.c ****     for (int i = 0; i < 4; i++) {
 185:../cleanflight/src/main/drivers/pwm_output.c ****         dmaBuffer[i * stride] = PROSHOT_BASE_SYMBOL + ((packet & 0xF000) >> 12) * PROSHOT_BIT_WIDTH
 186:../cleanflight/src/main/drivers/pwm_output.c ****         packet <<= 4;   // Shift 4 bits
 187:../cleanflight/src/main/drivers/pwm_output.c ****     }
 188:../cleanflight/src/main/drivers/pwm_output.c **** 
 189:../cleanflight/src/main/drivers/pwm_output.c ****     return PROSHOT_DMA_BUFFER_SIZE;
 190:../cleanflight/src/main/drivers/pwm_output.c **** }
 191:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 192:../cleanflight/src/main/drivers/pwm_output.c **** 
 193:../cleanflight/src/main/drivers/pwm_output.c **** void pwmWriteMotor(uint8_t index, float value)
 194:../cleanflight/src/main/drivers/pwm_output.c **** {
 559              	 .loc 2 194 0
 560              	 .cfi_startproc
 561              	 
 562              	 
 563 0000 80B5     	 push {r7,lr}
 564              	.LCFI45:
 565              	 .cfi_def_cfa_offset 8
 566              	 .cfi_offset 7,-8
 567              	 .cfi_offset 14,-4
 568 0002 82B0     	 sub sp,sp,#8
 569              	.LCFI46:
 570              	 .cfi_def_cfa_offset 16
 571 0004 00AF     	 add r7,sp,#0
 572              	.LCFI47:
 573              	 .cfi_def_cfa_register 7
 574 0006 0346     	 mov r3,r0
 575 0008 3960     	 str r1,[r7]
 576 000a FB71     	 strb r3,[r7,#7]
 195:../cleanflight/src/main/drivers/pwm_output.c ****     pwmWrite(index, value);
 577              	 .loc 2 195 0
 578 000c 044B     	 ldr r3,.L14
 579 000e 1B68     	 ldr r3,[r3]
 580 0010 FA79     	 ldrb r2,[r7,#7]
 581 0012 1046     	 mov r0,r2
 582 0014 3968     	 ldr r1,[r7]
 583 0016 9847     	 blx r3
 196:../cleanflight/src/main/drivers/pwm_output.c **** }
 584              	 .loc 2 196 0
 585 0018 0837     	 adds r7,r7,#8
 586              	.LCFI48:
 587              	 .cfi_def_cfa_offset 8
 588 001a BD46     	 mov sp,r7
 589              	.LCFI49:
 590              	 .cfi_def_cfa_register 13
 591              	 
 592 001c 80BD     	 pop {r7,pc}
 593              	.L15:
 594 001e 00BF     	 .align 2
 595              	.L14:
 596 0020 00000000 	 .word pwmWrite
 597              	 .cfi_endproc
 598              	.LFE531:
 600              	 .section .text.pwmShutdownPulsesForAllMotors,"ax",%progbits
 601              	 .align 2
 602              	 .global pwmShutdownPulsesForAllMotors
 603              	 .thumb
 604              	 .thumb_func
 606              	pwmShutdownPulsesForAllMotors:
 607              	.LFB532:
 197:../cleanflight/src/main/drivers/pwm_output.c **** 
 198:../cleanflight/src/main/drivers/pwm_output.c **** void pwmShutdownPulsesForAllMotors(uint8_t motorCount)
 199:../cleanflight/src/main/drivers/pwm_output.c **** {
 608              	 .loc 2 199 0
 609              	 .cfi_startproc
 610              	 
 611              	 
 612              	 
 613 0000 80B4     	 push {r7}
 614              	.LCFI50:
 615              	 .cfi_def_cfa_offset 4
 616              	 .cfi_offset 7,-4
 617 0002 85B0     	 sub sp,sp,#20
 618              	.LCFI51:
 619              	 .cfi_def_cfa_offset 24
 620 0004 00AF     	 add r7,sp,#0
 621              	.LCFI52:
 622              	 .cfi_def_cfa_register 7
 623 0006 0346     	 mov r3,r0
 624 0008 FB71     	 strb r3,[r7,#7]
 625              	.LBB2:
 200:../cleanflight/src/main/drivers/pwm_output.c ****     for (int index = 0; index < motorCount; index++) {
 626              	 .loc 2 200 0
 627 000a 0023     	 movs r3,#0
 628 000c FB60     	 str r3,[r7,#12]
 629 000e 14E0     	 b .L17
 630              	.L19:
 201:../cleanflight/src/main/drivers/pwm_output.c ****         // Set the compare register to 0, which stops the output pulsing if the timer overflows
 202:../cleanflight/src/main/drivers/pwm_output.c ****         if (motors[index].channel.ccr) {
 631              	 .loc 2 202 0
 632 0010 0E4A     	 ldr r2,.L20
 633 0012 FB68     	 ldr r3,[r7,#12]
 634 0014 1621     	 movs r1,#22
 635 0016 01FB03F3 	 mul r3,r1,r3
 636 001a 1344     	 add r3,r3,r2
 637 001c 1B68     	 ldr r3,[r3]
 638 001e 002B     	 cmp r3,#0
 639 0020 08D0     	 beq .L18
 203:../cleanflight/src/main/drivers/pwm_output.c ****             *motors[index].channel.ccr = 0;
 640              	 .loc 2 203 0
 641 0022 0A4A     	 ldr r2,.L20
 642 0024 FB68     	 ldr r3,[r7,#12]
 643 0026 1621     	 movs r1,#22
 644 0028 01FB03F3 	 mul r3,r1,r3
 645 002c 1344     	 add r3,r3,r2
 646 002e 1B68     	 ldr r3,[r3]
 647 0030 0022     	 movs r2,#0
 648 0032 1A60     	 str r2,[r3]
 649              	.L18:
 200:../cleanflight/src/main/drivers/pwm_output.c ****     for (int index = 0; index < motorCount; index++) {
 650              	 .loc 2 200 0 discriminator 2
 651 0034 FB68     	 ldr r3,[r7,#12]
 652 0036 0133     	 adds r3,r3,#1
 653 0038 FB60     	 str r3,[r7,#12]
 654              	.L17:
 200:../cleanflight/src/main/drivers/pwm_output.c ****     for (int index = 0; index < motorCount; index++) {
 655              	 .loc 2 200 0 is_stmt 0 discriminator 1
 656 003a FA79     	 ldrb r2,[r7,#7]
 657 003c FB68     	 ldr r3,[r7,#12]
 658 003e 9A42     	 cmp r2,r3
 659 0040 E6DC     	 bgt .L19
 660              	.LBE2:
 204:../cleanflight/src/main/drivers/pwm_output.c ****         }
 205:../cleanflight/src/main/drivers/pwm_output.c ****     }
 206:../cleanflight/src/main/drivers/pwm_output.c **** }
 661              	 .loc 2 206 0 is_stmt 1
 662 0042 1437     	 adds r7,r7,#20
 663              	.LCFI53:
 664              	 .cfi_def_cfa_offset 4
 665 0044 BD46     	 mov sp,r7
 666              	.LCFI54:
 667              	 .cfi_def_cfa_register 13
 668              	 
 669 0046 5DF8047B 	 ldr r7,[sp],#4
 670              	.LCFI55:
 671              	 .cfi_restore 7
 672              	 .cfi_def_cfa_offset 0
 673 004a 7047     	 bx lr
 674              	.L21:
 675              	 .align 2
 676              	.L20:
 677 004c 00000000 	 .word motors
 678              	 .cfi_endproc
 679              	.LFE532:
 681              	 .section .text.pwmDisableMotors,"ax",%progbits
 682              	 .align 2
 683              	 .global pwmDisableMotors
 684              	 .thumb
 685              	 .thumb_func
 687              	pwmDisableMotors:
 688              	.LFB533:
 207:../cleanflight/src/main/drivers/pwm_output.c **** 
 208:../cleanflight/src/main/drivers/pwm_output.c **** void pwmDisableMotors(void)
 209:../cleanflight/src/main/drivers/pwm_output.c **** {
 689              	 .loc 2 209 0
 690              	 .cfi_startproc
 691              	 
 692              	 
 693 0000 80B5     	 push {r7,lr}
 694              	.LCFI56:
 695              	 .cfi_def_cfa_offset 8
 696              	 .cfi_offset 7,-8
 697              	 .cfi_offset 14,-4
 698 0002 00AF     	 add r7,sp,#0
 699              	.LCFI57:
 700              	 .cfi_def_cfa_register 7
 210:../cleanflight/src/main/drivers/pwm_output.c ****     pwmShutdownPulsesForAllMotors(MAX_SUPPORTED_MOTORS);
 701              	 .loc 2 210 0
 702 0004 0820     	 movs r0,#8
 703 0006 FFF7FEFF 	 bl pwmShutdownPulsesForAllMotors
 211:../cleanflight/src/main/drivers/pwm_output.c ****     pwmMotorsEnabled = false;
 704              	 .loc 2 211 0
 705 000a 024B     	 ldr r3,.L23
 706 000c 0022     	 movs r2,#0
 707 000e 1A70     	 strb r2,[r3]
 212:../cleanflight/src/main/drivers/pwm_output.c **** }
 708              	 .loc 2 212 0
 709 0010 80BD     	 pop {r7,pc}
 710              	.L24:
 711 0012 00BF     	 .align 2
 712              	.L23:
 713 0014 00000000 	 .word pwmMotorsEnabled
 714              	 .cfi_endproc
 715              	.LFE533:
 717              	 .section .text.pwmEnableMotors,"ax",%progbits
 718              	 .align 2
 719              	 .global pwmEnableMotors
 720              	 .thumb
 721              	 .thumb_func
 723              	pwmEnableMotors:
 724              	.LFB534:
 213:../cleanflight/src/main/drivers/pwm_output.c **** 
 214:../cleanflight/src/main/drivers/pwm_output.c **** void pwmEnableMotors(void)
 215:../cleanflight/src/main/drivers/pwm_output.c **** {
 725              	 .loc 2 215 0
 726              	 .cfi_startproc
 727              	 
 728              	 
 729              	 
 730 0000 80B4     	 push {r7}
 731              	.LCFI58:
 732              	 .cfi_def_cfa_offset 4
 733              	 .cfi_offset 7,-4
 734 0002 00AF     	 add r7,sp,#0
 735              	.LCFI59:
 736              	 .cfi_def_cfa_register 7
 216:../cleanflight/src/main/drivers/pwm_output.c ****     /* check motors can be enabled */
 217:../cleanflight/src/main/drivers/pwm_output.c ****     pwmMotorsEnabled = (pwmWrite != &pwmWriteUnused);
 737              	 .loc 2 217 0
 738 0004 064B     	 ldr r3,.L26
 739 0006 1B68     	 ldr r3,[r3]
 740 0008 064A     	 ldr r2,.L26+4
 741 000a 9342     	 cmp r3,r2
 742 000c 14BF     	 ite ne
 743 000e 0123     	 movne r3,#1
 744 0010 0023     	 moveq r3,#0
 745 0012 DAB2     	 uxtb r2,r3
 746 0014 044B     	 ldr r3,.L26+8
 747 0016 1A70     	 strb r2,[r3]
 218:../cleanflight/src/main/drivers/pwm_output.c **** }
 748              	 .loc 2 218 0
 749 0018 BD46     	 mov sp,r7
 750              	.LCFI60:
 751              	 .cfi_def_cfa_register 13
 752              	 
 753 001a 5DF8047B 	 ldr r7,[sp],#4
 754              	.LCFI61:
 755              	 .cfi_restore 7
 756              	 .cfi_def_cfa_offset 0
 757 001e 7047     	 bx lr
 758              	.L27:
 759              	 .align 2
 760              	.L26:
 761 0020 00000000 	 .word pwmWrite
 762 0024 00000000 	 .word pwmWriteUnused
 763 0028 00000000 	 .word pwmMotorsEnabled
 764              	 .cfi_endproc
 765              	.LFE534:
 767              	 .section .text.pwmAreMotorsEnabled,"ax",%progbits
 768              	 .align 2
 769              	 .global pwmAreMotorsEnabled
 770              	 .thumb
 771              	 .thumb_func
 773              	pwmAreMotorsEnabled:
 774              	.LFB535:
 219:../cleanflight/src/main/drivers/pwm_output.c **** 
 220:../cleanflight/src/main/drivers/pwm_output.c **** bool pwmAreMotorsEnabled(void)
 221:../cleanflight/src/main/drivers/pwm_output.c **** {
 775              	 .loc 2 221 0
 776              	 .cfi_startproc
 777              	 
 778              	 
 779              	 
 780 0000 80B4     	 push {r7}
 781              	.LCFI62:
 782              	 .cfi_def_cfa_offset 4
 783              	 .cfi_offset 7,-4
 784 0002 00AF     	 add r7,sp,#0
 785              	.LCFI63:
 786              	 .cfi_def_cfa_register 7
 222:../cleanflight/src/main/drivers/pwm_output.c ****     return pwmMotorsEnabled;
 787              	 .loc 2 222 0
 788 0004 034B     	 ldr r3,.L30
 789 0006 1B78     	 ldrb r3,[r3]
 223:../cleanflight/src/main/drivers/pwm_output.c **** }
 790              	 .loc 2 223 0
 791 0008 1846     	 mov r0,r3
 792 000a BD46     	 mov sp,r7
 793              	.LCFI64:
 794              	 .cfi_def_cfa_register 13
 795              	 
 796 000c 5DF8047B 	 ldr r7,[sp],#4
 797              	.LCFI65:
 798              	 .cfi_restore 7
 799              	 .cfi_def_cfa_offset 0
 800 0010 7047     	 bx lr
 801              	.L31:
 802 0012 00BF     	 .align 2
 803              	.L30:
 804 0014 00000000 	 .word pwmMotorsEnabled
 805              	 .cfi_endproc
 806              	.LFE535:
 808              	 .section .text.pwmCompleteWriteUnused,"ax",%progbits
 809              	 .align 2
 810              	 .thumb
 811              	 .thumb_func
 813              	pwmCompleteWriteUnused:
 814              	.LFB536:
 224:../cleanflight/src/main/drivers/pwm_output.c **** 
 225:../cleanflight/src/main/drivers/pwm_output.c **** static void pwmCompleteWriteUnused(uint8_t motorCount)
 226:../cleanflight/src/main/drivers/pwm_output.c **** {
 815              	 .loc 2 226 0
 816              	 .cfi_startproc
 817              	 
 818              	 
 819              	 
 820 0000 80B4     	 push {r7}
 821              	.LCFI66:
 822              	 .cfi_def_cfa_offset 4
 823              	 .cfi_offset 7,-4
 824 0002 83B0     	 sub sp,sp,#12
 825              	.LCFI67:
 826              	 .cfi_def_cfa_offset 16
 827 0004 00AF     	 add r7,sp,#0
 828              	.LCFI68:
 829              	 .cfi_def_cfa_register 7
 830 0006 0346     	 mov r3,r0
 831 0008 FB71     	 strb r3,[r7,#7]
 227:../cleanflight/src/main/drivers/pwm_output.c ****     UNUSED(motorCount);
 228:../cleanflight/src/main/drivers/pwm_output.c **** }
 832              	 .loc 2 228 0
 833 000a 0C37     	 adds r7,r7,#12
 834              	.LCFI69:
 835              	 .cfi_def_cfa_offset 4
 836 000c BD46     	 mov sp,r7
 837              	.LCFI70:
 838              	 .cfi_def_cfa_register 13
 839              	 
 840 000e 5DF8047B 	 ldr r7,[sp],#4
 841              	.LCFI71:
 842              	 .cfi_restore 7
 843              	 .cfi_def_cfa_offset 0
 844 0012 7047     	 bx lr
 845              	 .cfi_endproc
 846              	.LFE536:
 848              	 .section .text.pwmCompleteXMCMotorUpdate,"ax",%progbits
 849              	 .align 2
 850              	 .thumb
 851              	 .thumb_func
 853              	pwmCompleteXMCMotorUpdate:
 854              	.LFB537:
 229:../cleanflight/src/main/drivers/pwm_output.c **** 
 230:../cleanflight/src/main/drivers/pwm_output.c **** static void pwmCompleteXMCMotorUpdate(uint8_t motorCount)
 231:../cleanflight/src/main/drivers/pwm_output.c **** {
 855              	 .loc 2 231 0
 856              	 .cfi_startproc
 857              	 
 858              	 
 859 0000 80B5     	 push {r7,lr}
 860              	.LCFI72:
 861              	 .cfi_def_cfa_offset 8
 862              	 .cfi_offset 7,-8
 863              	 .cfi_offset 14,-4
 864 0002 84B0     	 sub sp,sp,#16
 865              	.LCFI73:
 866              	 .cfi_def_cfa_offset 24
 867 0004 00AF     	 add r7,sp,#0
 868              	.LCFI74:
 869              	 .cfi_def_cfa_register 7
 870 0006 0346     	 mov r3,r0
 871 0008 FB71     	 strb r3,[r7,#7]
 872              	.LBB3:
 232:../cleanflight/src/main/drivers/pwm_output.c **** 	for (int index = 0; index < motorCount; index++) {
 873              	 .loc 2 232 0
 874 000a 0023     	 movs r3,#0
 875 000c FB60     	 str r3,[r7,#12]
 876 000e 20E0     	 b .L34
 877              	.L35:
 233:../cleanflight/src/main/drivers/pwm_output.c **** 		XMC_CCU4_EnableShadowTransfer(TIM_MODULE(motors[index].channel.tim), 1 << 4  *TIM_SLICE_NO(motors
 878              	 .loc 2 233 0 discriminator 3
 879 0010 134A     	 ldr r2,.L36
 880 0012 FB68     	 ldr r3,[r7,#12]
 881 0014 1621     	 movs r1,#22
 882 0016 01FB03F3 	 mul r3,r1,r3
 883 001a 1344     	 add r3,r3,r2
 884 001c 5B68     	 ldr r3,[r3,#4]
 885 001e 1B0C     	 lsrs r3,r3,#16
 886 0020 1B04     	 lsls r3,r3,#16
 887 0022 1846     	 mov r0,r3
 888 0024 0E4A     	 ldr r2,.L36
 889 0026 FB68     	 ldr r3,[r7,#12]
 890 0028 1621     	 movs r1,#22
 891 002a 01FB03F3 	 mul r3,r1,r3
 892 002e 1344     	 add r3,r3,r2
 893 0030 5B68     	 ldr r3,[r3,#4]
 894 0032 03F47063 	 and r3,r3,#3840
 895 0036 1B0A     	 lsrs r3,r3,#8
 896 0038 03F18043 	 add r3,r3,#1073741824
 897 003c 013B     	 subs r3,r3,#1
 898 003e 9B00     	 lsls r3,r3,#2
 899 0040 1A46     	 mov r2,r3
 900 0042 0123     	 movs r3,#1
 901 0044 9340     	 lsls r3,r3,r2
 902 0046 1946     	 mov r1,r3
 903 0048 FFF7FEFF 	 bl XMC_CCU4_EnableShadowTransfer
 232:../cleanflight/src/main/drivers/pwm_output.c **** 	for (int index = 0; index < motorCount; index++) {
 904              	 .loc 2 232 0 discriminator 3
 905 004c FB68     	 ldr r3,[r7,#12]
 906 004e 0133     	 adds r3,r3,#1
 907 0050 FB60     	 str r3,[r7,#12]
 908              	.L34:
 232:../cleanflight/src/main/drivers/pwm_output.c **** 	for (int index = 0; index < motorCount; index++) {
 909              	 .loc 2 232 0 is_stmt 0 discriminator 1
 910 0052 FA79     	 ldrb r2,[r7,#7]
 911 0054 FB68     	 ldr r3,[r7,#12]
 912 0056 9A42     	 cmp r2,r3
 913 0058 DADC     	 bgt .L35
 914              	.LBE3:
 234:../cleanflight/src/main/drivers/pwm_output.c **** 	}
 235:../cleanflight/src/main/drivers/pwm_output.c **** }
 915              	 .loc 2 235 0 is_stmt 1
 916 005a 1037     	 adds r7,r7,#16
 917              	.LCFI75:
 918              	 .cfi_def_cfa_offset 8
 919 005c BD46     	 mov sp,r7
 920              	.LCFI76:
 921              	 .cfi_def_cfa_register 13
 922              	 
 923 005e 80BD     	 pop {r7,pc}
 924              	.L37:
 925              	 .align 2
 926              	.L36:
 927 0060 00000000 	 .word motors
 928              	 .cfi_endproc
 929              	.LFE537:
 931              	 .section .text.pwmCompleteOneshotMotorUpdate,"ax",%progbits
 932              	 .align 2
 933              	 .thumb
 934              	 .thumb_func
 936              	pwmCompleteOneshotMotorUpdate:
 937              	.LFB538:
 236:../cleanflight/src/main/drivers/pwm_output.c **** 
 237:../cleanflight/src/main/drivers/pwm_output.c **** static void pwmCompleteOneshotMotorUpdate(uint8_t motorCount)
 238:../cleanflight/src/main/drivers/pwm_output.c **** {
 938              	 .loc 2 238 0
 939              	 .cfi_startproc
 940              	 
 941              	 
 942 0000 80B5     	 push {r7,lr}
 943              	.LCFI77:
 944              	 .cfi_def_cfa_offset 8
 945              	 .cfi_offset 7,-8
 946              	 .cfi_offset 14,-4
 947 0002 84B0     	 sub sp,sp,#16
 948              	.LCFI78:
 949              	 .cfi_def_cfa_offset 24
 950 0004 00AF     	 add r7,sp,#0
 951              	.LCFI79:
 952              	 .cfi_def_cfa_register 7
 953 0006 0346     	 mov r3,r0
 954 0008 FB71     	 strb r3,[r7,#7]
 239:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef XMC4700_F100x2048
 240:../cleanflight/src/main/drivers/pwm_output.c **** 	pwmCompleteXMCMotorUpdate(motorCount);
 955              	 .loc 2 240 0
 956 000a FB79     	 ldrb r3,[r7,#7]
 957 000c 1846     	 mov r0,r3
 958 000e FFF7FEFF 	 bl pwmCompleteXMCMotorUpdate
 959              	.LBB4:
 241:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 242:../cleanflight/src/main/drivers/pwm_output.c ****     for (int index = 0; index < motorCount; index++) {
 960              	 .loc 2 242 0
 961 0012 0023     	 movs r3,#0
 962 0014 FB60     	 str r3,[r7,#12]
 963 0016 1FE0     	 b .L39
 964              	.L41:
 243:../cleanflight/src/main/drivers/pwm_output.c ****         if (motors[index].forceOverflow) {
 965              	 .loc 2 243 0
 966 0018 154A     	 ldr r2,.L42
 967 001a FB68     	 ldr r3,[r7,#12]
 968 001c 1621     	 movs r1,#22
 969 001e 01FB03F3 	 mul r3,r1,r3
 970 0022 1344     	 add r3,r3,r2
 971 0024 1033     	 adds r3,r3,#16
 972 0026 1B78     	 ldrb r3,[r3]
 973 0028 002B     	 cmp r3,#0
 974 002a 09D0     	 beq .L40
 244:../cleanflight/src/main/drivers/pwm_output.c ****             timerForceOverflow(motors[index].channel.tim);
 975              	 .loc 2 244 0
 976 002c 104A     	 ldr r2,.L42
 977 002e FB68     	 ldr r3,[r7,#12]
 978 0030 1621     	 movs r1,#22
 979 0032 01FB03F3 	 mul r3,r1,r3
 980 0036 1344     	 add r3,r3,r2
 981 0038 5B68     	 ldr r3,[r3,#4]
 982 003a 1846     	 mov r0,r3
 983 003c FFF7FEFF 	 bl timerForceOverflow
 984              	.L40:
 245:../cleanflight/src/main/drivers/pwm_output.c ****         }
 246:../cleanflight/src/main/drivers/pwm_output.c ****         // Set the compare register to 0, which stops the output pulsing if the timer overflows bef
 247:../cleanflight/src/main/drivers/pwm_output.c ****         // This compare register will be set to the output value on the next main loop.
 248:../cleanflight/src/main/drivers/pwm_output.c ****         *motors[index].channel.ccr = 0;
 985              	 .loc 2 248 0 discriminator 2
 986 0040 0B4A     	 ldr r2,.L42
 987 0042 FB68     	 ldr r3,[r7,#12]
 988 0044 1621     	 movs r1,#22
 989 0046 01FB03F3 	 mul r3,r1,r3
 990 004a 1344     	 add r3,r3,r2
 991 004c 1B68     	 ldr r3,[r3]
 992 004e 0022     	 movs r2,#0
 993 0050 1A60     	 str r2,[r3]
 242:../cleanflight/src/main/drivers/pwm_output.c ****         if (motors[index].forceOverflow) {
 994              	 .loc 2 242 0 discriminator 2
 995 0052 FB68     	 ldr r3,[r7,#12]
 996 0054 0133     	 adds r3,r3,#1
 997 0056 FB60     	 str r3,[r7,#12]
 998              	.L39:
 242:../cleanflight/src/main/drivers/pwm_output.c ****         if (motors[index].forceOverflow) {
 999              	 .loc 2 242 0 is_stmt 0 discriminator 1
 1000 0058 FA79     	 ldrb r2,[r7,#7]
 1001 005a FB68     	 ldr r3,[r7,#12]
 1002 005c 9A42     	 cmp r2,r3
 1003 005e DBDC     	 bgt .L41
 1004              	.LBE4:
 249:../cleanflight/src/main/drivers/pwm_output.c ****     }
 250:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef XMC4700_F100x2048
 251:../cleanflight/src/main/drivers/pwm_output.c **** 	pwmCompleteXMCMotorUpdate(motorCount);
 1005              	 .loc 2 251 0 is_stmt 1
 1006 0060 FB79     	 ldrb r3,[r7,#7]
 1007 0062 1846     	 mov r0,r3
 1008 0064 FFF7FEFF 	 bl pwmCompleteXMCMotorUpdate
 252:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 253:../cleanflight/src/main/drivers/pwm_output.c **** }
 1009              	 .loc 2 253 0
 1010 0068 1037     	 adds r7,r7,#16
 1011              	.LCFI80:
 1012              	 .cfi_def_cfa_offset 8
 1013 006a BD46     	 mov sp,r7
 1014              	.LCFI81:
 1015              	 .cfi_def_cfa_register 13
 1016              	 
 1017 006c 80BD     	 pop {r7,pc}
 1018              	.L43:
 1019 006e 00BF     	 .align 2
 1020              	.L42:
 1021 0070 00000000 	 .word motors
 1022              	 .cfi_endproc
 1023              	.LFE538:
 1025              	 .section .text.pwmCompleteMotorUpdate,"ax",%progbits
 1026              	 .align 2
 1027              	 .global pwmCompleteMotorUpdate
 1028              	 .thumb
 1029              	 .thumb_func
 1031              	pwmCompleteMotorUpdate:
 1032              	.LFB539:
 254:../cleanflight/src/main/drivers/pwm_output.c **** 
 255:../cleanflight/src/main/drivers/pwm_output.c **** void pwmCompleteMotorUpdate(uint8_t motorCount)
 256:../cleanflight/src/main/drivers/pwm_output.c **** {
 1033              	 .loc 2 256 0
 1034              	 .cfi_startproc
 1035              	 
 1036              	 
 1037 0000 80B5     	 push {r7,lr}
 1038              	.LCFI82:
 1039              	 .cfi_def_cfa_offset 8
 1040              	 .cfi_offset 7,-8
 1041              	 .cfi_offset 14,-4
 1042 0002 82B0     	 sub sp,sp,#8
 1043              	.LCFI83:
 1044              	 .cfi_def_cfa_offset 16
 1045 0004 00AF     	 add r7,sp,#0
 1046              	.LCFI84:
 1047              	 .cfi_def_cfa_register 7
 1048 0006 0346     	 mov r3,r0
 1049 0008 FB71     	 strb r3,[r7,#7]
 257:../cleanflight/src/main/drivers/pwm_output.c ****     pwmCompleteWrite(motorCount);
 1050              	 .loc 2 257 0
 1051 000a 044B     	 ldr r3,.L45
 1052 000c 1B68     	 ldr r3,[r3]
 1053 000e FA79     	 ldrb r2,[r7,#7]
 1054 0010 1046     	 mov r0,r2
 1055 0012 9847     	 blx r3
 258:../cleanflight/src/main/drivers/pwm_output.c **** }
 1056              	 .loc 2 258 0
 1057 0014 0837     	 adds r7,r7,#8
 1058              	.LCFI85:
 1059              	 .cfi_def_cfa_offset 8
 1060 0016 BD46     	 mov sp,r7
 1061              	.LCFI86:
 1062              	 .cfi_def_cfa_register 13
 1063              	 
 1064 0018 80BD     	 pop {r7,pc}
 1065              	.L46:
 1066 001a 00BF     	 .align 2
 1067              	.L45:
 1068 001c 00000000 	 .word pwmCompleteWrite
 1069              	 .cfi_endproc
 1070              	.LFE539:
 1072              	 .section .text.motorDevInit,"ax",%progbits
 1073              	 .align 2
 1074              	 .global motorDevInit
 1075              	 .thumb
 1076              	 .thumb_func
 1078              	motorDevInit:
 1079              	.LFB540:
 259:../cleanflight/src/main/drivers/pwm_output.c **** 
 260:../cleanflight/src/main/drivers/pwm_output.c **** void motorDevInit(const motorDevConfig_t *motorConfig, uint16_t idlePulse, uint8_t motorCount)
 261:../cleanflight/src/main/drivers/pwm_output.c **** {
 1080              	 .loc 2 261 0
 1081              	 .cfi_startproc
 1082              	 
 1083              	 
 1084 0000 90B5     	 push {r4,r7,lr}
 1085              	.LCFI87:
 1086              	 .cfi_def_cfa_offset 12
 1087              	 .cfi_offset 4,-12
 1088              	 .cfi_offset 7,-8
 1089              	 .cfi_offset 14,-4
 1090 0002 93B0     	 sub sp,sp,#76
 1091              	.LCFI88:
 1092              	 .cfi_def_cfa_offset 88
 1093 0004 02AF     	 add r7,sp,#8
 1094              	.LCFI89:
 1095              	 .cfi_def_cfa 7,80
 1096 0006 7860     	 str r0,[r7,#4]
 1097 0008 0B46     	 mov r3,r1
 1098 000a 7B80     	 strh r3,[r7,#2]
 1099 000c 1346     	 mov r3,r2
 1100 000e 7B70     	 strb r3,[r7,#1]
 262:../cleanflight/src/main/drivers/pwm_output.c ****     memset(motors, 0, sizeof(motors));
 1101              	 .loc 2 262 0
 1102 0010 B248     	 ldr r0,.L75
 1103 0012 0021     	 movs r1,#0
 1104 0014 B022     	 movs r2,#176
 1105 0016 FFF7FEFF 	 bl memset
 263:../cleanflight/src/main/drivers/pwm_output.c **** 
 264:../cleanflight/src/main/drivers/pwm_output.c ****     bool useUnsyncedPwm = motorConfig->useUnsyncedPwm;
 1106              	 .loc 2 264 0
 1107 001a 7B68     	 ldr r3,[r7,#4]
 1108 001c 1B79     	 ldrb r3,[r3,#4]
 1109 001e 002B     	 cmp r3,#0
 1110 0020 14BF     	 ite ne
 1111 0022 0123     	 movne r3,#1
 1112 0024 0023     	 moveq r3,#0
 1113 0026 87F83F30 	 strb r3,[r7,#63]
 265:../cleanflight/src/main/drivers/pwm_output.c **** 
 266:../cleanflight/src/main/drivers/pwm_output.c ****     float sMin = 0;
 1114              	 .loc 2 266 0
 1115 002a 4FF00003 	 mov r3,#0
 1116 002e BB63     	 str r3,[r7,#56]
 267:../cleanflight/src/main/drivers/pwm_output.c ****     float sLen = 0;
 1117              	 .loc 2 267 0
 1118 0030 4FF00003 	 mov r3,#0
 1119 0034 7B63     	 str r3,[r7,#52]
 268:../cleanflight/src/main/drivers/pwm_output.c ****     switch (motorConfig->motorPwmProtocol) {
 1120              	 .loc 2 268 0
 1121 0036 7B68     	 ldr r3,[r7,#4]
 1122 0038 9B78     	 ldrb r3,[r3,#2]
 1123 003a 042B     	 cmp r3,#4
 1124 003c 0CD8     	 bhi .L48
 1125 003e 01A2     	 adr r2,.L50
 1126 0040 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1127              	 .p2align 2
 1128              	.L50:
 1129 0044 89000000 	 .word .L49+1
 1130 0048 59000000 	 .word .L48+1
 1131 004c 63000000 	 .word .L51+1
 1132 0050 6D000000 	 .word .L52+1
 1133 0054 77000000 	 .word .L53+1
 1134              	 .p2align 1
 1135              	.L48:
 269:../cleanflight/src/main/drivers/pwm_output.c ****     default:
 270:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_ONESHOT125:
 271:../cleanflight/src/main/drivers/pwm_output.c ****         sMin = 125e-6f;
 1136              	 .loc 2 271 0
 1137 0058 A14B     	 ldr r3,.L75+4
 1138 005a BB63     	 str r3,[r7,#56]
 272:../cleanflight/src/main/drivers/pwm_output.c ****         sLen = 125e-6f;
 1139              	 .loc 2 272 0
 1140 005c A04B     	 ldr r3,.L75+4
 1141 005e 7B63     	 str r3,[r7,#52]
 273:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 1142              	 .loc 2 273 0
 1143 0060 1CE0     	 b .L54
 1144              	.L51:
 274:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_ONESHOT42:
 275:../cleanflight/src/main/drivers/pwm_output.c ****         sMin = 42e-6f;
 1145              	 .loc 2 275 0
 1146 0062 A04B     	 ldr r3,.L75+8
 1147 0064 BB63     	 str r3,[r7,#56]
 276:../cleanflight/src/main/drivers/pwm_output.c ****         sLen = 42e-6f;
 1148              	 .loc 2 276 0
 1149 0066 9F4B     	 ldr r3,.L75+8
 1150 0068 7B63     	 str r3,[r7,#52]
 277:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 1151              	 .loc 2 277 0
 1152 006a 17E0     	 b .L54
 1153              	.L52:
 278:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_MULTISHOT:
 279:../cleanflight/src/main/drivers/pwm_output.c ****         sMin = 5e-6f;
 1154              	 .loc 2 279 0
 1155 006c 9E4B     	 ldr r3,.L75+12
 1156 006e BB63     	 str r3,[r7,#56]
 280:../cleanflight/src/main/drivers/pwm_output.c ****         sLen = 20e-6f;
 1157              	 .loc 2 280 0
 1158 0070 9E4B     	 ldr r3,.L75+16
 1159 0072 7B63     	 str r3,[r7,#52]
 281:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 1160              	 .loc 2 281 0
 1161 0074 12E0     	 b .L54
 1162              	.L53:
 282:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_BRUSHED:
 283:../cleanflight/src/main/drivers/pwm_output.c ****         sMin = 0;
 1163              	 .loc 2 283 0
 1164 0076 4FF00003 	 mov r3,#0
 1165 007a BB63     	 str r3,[r7,#56]
 284:../cleanflight/src/main/drivers/pwm_output.c ****         useUnsyncedPwm = true;
 1166              	 .loc 2 284 0
 1167 007c 0123     	 movs r3,#1
 1168 007e 87F83F30 	 strb r3,[r7,#63]
 285:../cleanflight/src/main/drivers/pwm_output.c ****         idlePulse = 0;
 1169              	 .loc 2 285 0
 1170 0082 0023     	 movs r3,#0
 1171 0084 7B80     	 strh r3,[r7,#2]
 286:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 1172              	 .loc 2 286 0
 1173 0086 09E0     	 b .L54
 1174              	.L49:
 287:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_STANDARD:
 288:../cleanflight/src/main/drivers/pwm_output.c ****         sMin = 1e-3f;
 1175              	 .loc 2 288 0
 1176 0088 994B     	 ldr r3,.L75+20
 1177 008a BB63     	 str r3,[r7,#56]
 289:../cleanflight/src/main/drivers/pwm_output.c ****         sLen = 1e-3f;
 1178              	 .loc 2 289 0
 1179 008c 984B     	 ldr r3,.L75+20
 1180 008e 7B63     	 str r3,[r7,#52]
 290:../cleanflight/src/main/drivers/pwm_output.c ****         useUnsyncedPwm = true;
 1181              	 .loc 2 290 0
 1182 0090 0123     	 movs r3,#1
 1183 0092 87F83F30 	 strb r3,[r7,#63]
 291:../cleanflight/src/main/drivers/pwm_output.c ****         idlePulse = 0;
 1184              	 .loc 2 291 0
 1185 0096 0023     	 movs r3,#0
 1186 0098 7B80     	 strh r3,[r7,#2]
 292:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 1187              	 .loc 2 292 0
 1188 009a 00BF     	 nop
 1189              	.L54:
 293:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_DSHOT
 294:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_PROSHOT1000:
 295:../cleanflight/src/main/drivers/pwm_output.c ****         pwmWrite = &pwmWriteDshot;
 296:../cleanflight/src/main/drivers/pwm_output.c ****         loadDmaBuffer = &loadDmaBufferProshot;
 297:../cleanflight/src/main/drivers/pwm_output.c ****         pwmCompleteWrite = &pwmCompleteDshotMotorUpdate;
 298:../cleanflight/src/main/drivers/pwm_output.c ****         isDshot = true;
 299:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 300:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_DSHOT1200:
 301:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_DSHOT600:
 302:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_DSHOT300:
 303:../cleanflight/src/main/drivers/pwm_output.c ****     case PWM_TYPE_DSHOT150:
 304:../cleanflight/src/main/drivers/pwm_output.c ****         pwmWrite = &pwmWriteDshot;
 305:../cleanflight/src/main/drivers/pwm_output.c ****         loadDmaBuffer = &loadDmaBufferDshot;
 306:../cleanflight/src/main/drivers/pwm_output.c ****         pwmCompleteWrite = &pwmCompleteDshotMotorUpdate;
 307:../cleanflight/src/main/drivers/pwm_output.c ****         isDshot = true;
 308:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_DSHOT_DMAR
 309:../cleanflight/src/main/drivers/pwm_output.c ****         if (motorConfig->useBurstDshot) {
 310:../cleanflight/src/main/drivers/pwm_output.c ****             useBurstDshot = true;
 311:../cleanflight/src/main/drivers/pwm_output.c ****         }
 312:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 313:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 314:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 315:../cleanflight/src/main/drivers/pwm_output.c ****     }
 316:../cleanflight/src/main/drivers/pwm_output.c **** 
 317:../cleanflight/src/main/drivers/pwm_output.c ****     if (!isDshot) {
 1190              	 .loc 2 317 0
 1191 009c 954B     	 ldr r3,.L75+24
 1192 009e 1B78     	 ldrb r3,[r3]
 1193 00a0 83F00103 	 eor r3,r3,#1
 1194 00a4 DBB2     	 uxtb r3,r3
 1195 00a6 002B     	 cmp r3,#0
 1196 00a8 0BD0     	 beq .L55
 318:../cleanflight/src/main/drivers/pwm_output.c ****         pwmWrite = &pwmWriteStandard;
 1197              	 .loc 2 318 0
 1198 00aa 934B     	 ldr r3,.L75+28
 1199 00ac 934A     	 ldr r2,.L75+32
 1200 00ae 1A60     	 str r2,[r3]
 319:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef XMC4700_F100x2048
 320:../cleanflight/src/main/drivers/pwm_output.c ****         pwmCompleteWrite = useUnsyncedPwm ? &pwmCompleteXMCMotorUpdate : &pwmCompleteOneshotMotorUp
 1201              	 .loc 2 320 0
 1202 00b0 97F83F30 	 ldrb r3,[r7,#63]
 1203 00b4 002B     	 cmp r3,#0
 1204 00b6 01D0     	 beq .L56
 1205              	 .loc 2 320 0 is_stmt 0 discriminator 1
 1206 00b8 914B     	 ldr r3,.L75+36
 1207 00ba 00E0     	 b .L57
 1208              	.L56:
 1209              	 .loc 2 320 0 discriminator 2
 1210 00bc 914B     	 ldr r3,.L75+40
 1211              	.L57:
 1212              	 .loc 2 320 0 discriminator 4
 1213 00be 924A     	 ldr r2,.L75+44
 1214 00c0 1360     	 str r3,[r2]
 1215              	.L55:
 1216              	.LBB5:
 321:../cleanflight/src/main/drivers/pwm_output.c **** #else
 322:../cleanflight/src/main/drivers/pwm_output.c ****         pwmCompleteWrite = useUnsyncedPwm ? &pwmCompleteWriteUnused : &pwmCompleteOneshotMotorUpdat
 323:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 324:../cleanflight/src/main/drivers/pwm_output.c ****     }
 325:../cleanflight/src/main/drivers/pwm_output.c **** 
 326:../cleanflight/src/main/drivers/pwm_output.c ****     for (int motorIndex = 0; motorIndex < MAX_SUPPORTED_MOTORS && motorIndex < motorCount; motorInd
 1217              	 .loc 2 326 0 is_stmt 1
 1218 00c2 0023     	 movs r3,#0
 1219 00c4 3B63     	 str r3,[r7,#48]
 1220 00c6 50E1     	 b .L58
 1221              	.L74:
 1222              	.LBB6:
 327:../cleanflight/src/main/drivers/pwm_output.c ****         const ioTag_t tag = motorConfig->ioTags[motorIndex];
 1223              	 .loc 2 327 0
 1224 00c8 7A68     	 ldr r2,[r7,#4]
 1225 00ca 3B6B     	 ldr r3,[r7,#48]
 1226 00cc 1344     	 add r3,r3,r2
 1227 00ce 9B79     	 ldrb r3,[r3,#6]
 1228 00d0 87F82330 	 strb r3,[r7,#35]
 328:../cleanflight/src/main/drivers/pwm_output.c ****         const timerHardware_t *timerHardware = timerGetByTag(tag);
 1229              	 .loc 2 328 0
 1230 00d4 97F82330 	 ldrb r3,[r7,#35]
 1231 00d8 1846     	 mov r0,r3
 1232 00da FFF7FEFF 	 bl timerGetByTag
 1233 00de F861     	 str r0,[r7,#28]
 329:../cleanflight/src/main/drivers/pwm_output.c **** 
 330:../cleanflight/src/main/drivers/pwm_output.c ****         if (timerHardware == NULL) {
 1234              	 .loc 2 330 0
 1235 00e0 FB69     	 ldr r3,[r7,#28]
 1236 00e2 002B     	 cmp r3,#0
 1237 00e4 06D1     	 bne .L59
 331:../cleanflight/src/main/drivers/pwm_output.c ****             /* not enough motors initialised for the mixer or a break in the motors */
 332:../cleanflight/src/main/drivers/pwm_output.c ****             pwmWrite = &pwmWriteUnused;
 1238              	 .loc 2 332 0
 1239 00e6 844B     	 ldr r3,.L75+28
 1240 00e8 884A     	 ldr r2,.L75+48
 1241 00ea 1A60     	 str r2,[r3]
 333:../cleanflight/src/main/drivers/pwm_output.c ****             pwmCompleteWrite = &pwmCompleteWriteUnused;
 1242              	 .loc 2 333 0
 1243 00ec 864B     	 ldr r3,.L75+44
 1244 00ee 884A     	 ldr r2,.L75+52
 1245 00f0 1A60     	 str r2,[r3]
 334:../cleanflight/src/main/drivers/pwm_output.c ****             /* TODO: block arming and add reason system cannot arm */
 335:../cleanflight/src/main/drivers/pwm_output.c ****             return;
 1246              	 .loc 2 335 0
 1247 00f2 45E1     	 b .L47
 1248              	.L59:
 336:../cleanflight/src/main/drivers/pwm_output.c ****         }
 337:../cleanflight/src/main/drivers/pwm_output.c **** 
 338:../cleanflight/src/main/drivers/pwm_output.c ****         motors[motorIndex].io = IOGetByTag(tag);
 1249              	 .loc 2 338 0
 1250 00f4 97F82330 	 ldrb r3,[r7,#35]
 1251 00f8 1846     	 mov r0,r3
 1252 00fa FFF7FEFF 	 bl IOGetByTag
 1253 00fe 774A     	 ldr r2,.L75
 1254 0100 3B6B     	 ldr r3,[r7,#48]
 1255 0102 1621     	 movs r1,#22
 1256 0104 01FB03F3 	 mul r3,r1,r3
 1257 0108 1344     	 add r3,r3,r2
 1258 010a 1033     	 adds r3,r3,#16
 1259 010c C3F80200 	 str r0,[r3,#2]
 339:../cleanflight/src/main/drivers/pwm_output.c ****         IOInit(motors[motorIndex].io, OWNER_MOTOR, RESOURCE_INDEX(motorIndex));
 1260              	 .loc 2 339 0
 1261 0110 724A     	 ldr r2,.L75
 1262 0112 3B6B     	 ldr r3,[r7,#48]
 1263 0114 1621     	 movs r1,#22
 1264 0116 01FB03F3 	 mul r3,r1,r3
 1265 011a 1344     	 add r3,r3,r2
 1266 011c 1033     	 adds r3,r3,#16
 1267 011e D3F80220 	 ldr r2,[r3,#2]
 1268 0122 3B6B     	 ldr r3,[r7,#48]
 1269 0124 DBB2     	 uxtb r3,r3
 1270 0126 0133     	 adds r3,r3,#1
 1271 0128 DBB2     	 uxtb r3,r3
 1272 012a 1046     	 mov r0,r2
 1273 012c 0321     	 movs r1,#3
 1274 012e 1A46     	 mov r2,r3
 1275 0130 FFF7FEFF 	 bl IOInit
 340:../cleanflight/src/main/drivers/pwm_output.c **** 
 341:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_DSHOT
 342:../cleanflight/src/main/drivers/pwm_output.c ****         if (isDshot) {
 343:../cleanflight/src/main/drivers/pwm_output.c ****             pwmDshotMotorHardwareConfig(timerHardware,
 344:../cleanflight/src/main/drivers/pwm_output.c ****                 motorIndex,
 345:../cleanflight/src/main/drivers/pwm_output.c ****                 motorConfig->motorPwmProtocol,
 346:../cleanflight/src/main/drivers/pwm_output.c ****                 motorConfig->motorPwmInversion ? timerHardware->output ^ TIMER_OUTPUT_INVERTED : ti
 347:../cleanflight/src/main/drivers/pwm_output.c ****             motors[motorIndex].enabled = true;
 348:../cleanflight/src/main/drivers/pwm_output.c ****             continue;
 349:../cleanflight/src/main/drivers/pwm_output.c ****         }
 350:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 351:../cleanflight/src/main/drivers/pwm_output.c **** 
 352:../cleanflight/src/main/drivers/pwm_output.c **** #if defined(STM32F1)
 353:../cleanflight/src/main/drivers/pwm_output.c ****         IOConfigGPIO(motors[motorIndex].io, IOCFG_AF_PP);
 354:../cleanflight/src/main/drivers/pwm_output.c **** #else
 355:../cleanflight/src/main/drivers/pwm_output.c ****         IOConfigGPIOAF(motors[motorIndex].io, IOCFG_AF_PP, timerHardware->alternateFunction);
 1276              	 .loc 2 355 0
 1277 0134 694A     	 ldr r2,.L75
 1278 0136 3B6B     	 ldr r3,[r7,#48]
 1279 0138 1621     	 movs r1,#22
 1280 013a 01FB03F3 	 mul r3,r1,r3
 1281 013e 1344     	 add r3,r3,r2
 1282 0140 1033     	 adds r3,r3,#16
 1283 0142 D3F80220 	 ldr r2,[r3,#2]
 1284 0146 FB69     	 ldr r3,[r7,#28]
 1285 0148 1B7A     	 ldrb r3,[r3,#8]
 1286 014a 1046     	 mov r0,r2
 1287 014c 8021     	 movs r1,#128
 1288 014e 1A46     	 mov r2,r3
 1289 0150 FFF7FEFF 	 bl IOConfigGPIOAF
 356:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 357:../cleanflight/src/main/drivers/pwm_output.c **** 
 358:../cleanflight/src/main/drivers/pwm_output.c ****         /* standard PWM outputs */
 359:../cleanflight/src/main/drivers/pwm_output.c ****         // margin of safety is 4 periods when unsynced
 360:../cleanflight/src/main/drivers/pwm_output.c ****         const unsigned pwmRateHz = useUnsyncedPwm ? motorConfig->motorPwmRate : ceilf(1 / ((sMin + 
 1290              	 .loc 2 360 0
 1291 0154 97F83F30 	 ldrb r3,[r7,#63]
 1292 0158 002B     	 cmp r3,#0
 1293 015a 09D0     	 beq .L61
 1294              	 .loc 2 360 0 is_stmt 0 discriminator 1
 1295 015c 7B68     	 ldr r3,[r7,#4]
 1296 015e 1B88     	 ldrh r3,[r3]
 1297 0160 9BB2     	 uxth r3,r3
 1298 0162 07EE903A 	 fmsr s15,r3
 1299 0166 F8EEE77A 	 fsitos s15,s15
 1300 016a FCEEE77A 	 ftouizs s15,s15
 1301 016e 15E0     	 b .L62
 1302              	.L61:
 1303              	 .loc 2 360 0 discriminator 2
 1304 0170 97ED0E7A 	 flds s14,[r7,#56]
 1305 0174 D7ED0D7A 	 flds s15,[r7,#52]
 1306 0178 77EE277A 	 fadds s15,s14,s15
 1307 017c B1EE007A 	 fconsts s14,#16
 1308 0180 67EE877A 	 fmuls s15,s15,s14
 1309 0184 B7EE007A 	 fconsts s14,#112
 1310 0188 C7EE277A 	 fdivs s15,s14,s15
 1311 018c 17EE900A 	 fmrs r0,s15
 1312 0190 FFF7FEFF 	 bl ceilf
 1313 0194 07EE900A 	 fmsr s15,r0
 1314 0198 FCEEE77A 	 ftouizs s15,s15
 1315              	.L62:
 1316              	 .loc 2 360 0 discriminator 4
 1317 019c C7ED067A 	 fsts s15,[r7,#24]
 361:../cleanflight/src/main/drivers/pwm_output.c **** 
 362:../cleanflight/src/main/drivers/pwm_output.c ****         const uint32_t clock = timerClock(timerHardware->tim);
 1318              	 .loc 2 362 0 is_stmt 1 discriminator 4
 1319 01a0 FB69     	 ldr r3,[r7,#28]
 1320 01a2 1B68     	 ldr r3,[r3]
 1321 01a4 1846     	 mov r0,r3
 1322 01a6 FFF7FEFF 	 bl timerClock
 1323 01aa 7861     	 str r0,[r7,#20]
 363:../cleanflight/src/main/drivers/pwm_output.c ****         /* used to find the desired timer frequency for max resolution */
 364:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef XMC4700_F100x2048
 365:../cleanflight/src/main/drivers/pwm_output.c ****         unsigned prescaler = 1;
 1324              	 .loc 2 365 0 discriminator 4
 1325 01ac 0123     	 movs r3,#1
 1326 01ae FB62     	 str r3,[r7,#44]
 366:../cleanflight/src/main/drivers/pwm_output.c ****         while ((clock / (prescaler * pwmRateHz)) - 1 > 0xffff)
 1327              	 .loc 2 366 0 discriminator 4
 1328 01b0 02E0     	 b .L63
 1329              	.L64:
 367:../cleanflight/src/main/drivers/pwm_output.c ****         	prescaler*=2;
 1330              	 .loc 2 367 0
 1331 01b2 FB6A     	 ldr r3,[r7,#44]
 1332 01b4 5B00     	 lsls r3,r3,#1
 1333 01b6 FB62     	 str r3,[r7,#44]
 1334              	.L63:
 366:../cleanflight/src/main/drivers/pwm_output.c ****         while ((clock / (prescaler * pwmRateHz)) - 1 > 0xffff)
 1335              	 .loc 2 366 0
 1336 01b8 FB6A     	 ldr r3,[r7,#44]
 1337 01ba BA69     	 ldr r2,[r7,#24]
 1338 01bc 02FB03F3 	 mul r3,r2,r3
 1339 01c0 7A69     	 ldr r2,[r7,#20]
 1340 01c2 B2FBF3F3 	 udiv r3,r2,r3
 1341 01c6 013B     	 subs r3,r3,#1
 1342 01c8 B3F5803F 	 cmp r3,#65536
 1343 01cc F1D2     	 bcs .L64
 368:../cleanflight/src/main/drivers/pwm_output.c **** #else
 369:../cleanflight/src/main/drivers/pwm_output.c ****         const unsigned prescaler = ((clock / pwmRateHz) + 0xffff) / 0x10000; /* rounding up */
 370:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 371:../cleanflight/src/main/drivers/pwm_output.c ****         const uint32_t hz = clock / prescaler;
 1344              	 .loc 2 371 0
 1345 01ce 7A69     	 ldr r2,[r7,#20]
 1346 01d0 FB6A     	 ldr r3,[r7,#44]
 1347 01d2 B2FBF3F3 	 udiv r3,r2,r3
 1348 01d6 3B61     	 str r3,[r7,#16]
 372:../cleanflight/src/main/drivers/pwm_output.c ****         const unsigned period = useUnsyncedPwm ? hz / pwmRateHz : 0xffff;
 1349              	 .loc 2 372 0
 1350 01d8 97F83F30 	 ldrb r3,[r7,#63]
 1351 01dc 002B     	 cmp r3,#0
 1352 01de 04D0     	 beq .L65
 1353              	 .loc 2 372 0 is_stmt 0 discriminator 1
 1354 01e0 3A69     	 ldr r2,[r7,#16]
 1355 01e2 BB69     	 ldr r3,[r7,#24]
 1356 01e4 B2FBF3F3 	 udiv r3,r2,r3
 1357 01e8 01E0     	 b .L66
 1358              	.L65:
 1359              	 .loc 2 372 0 discriminator 2
 1360 01ea 4FF6FF73 	 movw r3,#65535
 1361              	.L66:
 1362              	 .loc 2 372 0 discriminator 4
 1363 01ee FB60     	 str r3,[r7,#12]
 373:../cleanflight/src/main/drivers/pwm_output.c **** 
 374:../cleanflight/src/main/drivers/pwm_output.c ****         /*
 375:../cleanflight/src/main/drivers/pwm_output.c ****             if brushed then it is the entire length of the period.
 376:../cleanflight/src/main/drivers/pwm_output.c ****             TODO: this can be moved back to periodMin and periodLen
 377:../cleanflight/src/main/drivers/pwm_output.c ****             once mixer outputs a 0..1 float value.
 378:../cleanflight/src/main/drivers/pwm_output.c ****         */
 379:../cleanflight/src/main/drivers/pwm_output.c ****         motors[motorIndex].pulseScale = ((motorConfig->motorPwmProtocol == PWM_TYPE_BRUSHED) ? peri
 1364              	 .loc 2 379 0 is_stmt 1 discriminator 4
 1365 01f0 7B68     	 ldr r3,[r7,#4]
 1366 01f2 9B78     	 ldrb r3,[r3,#2]
 1367 01f4 042B     	 cmp r3,#4
 1368 01f6 09D1     	 bne .L67
 1369              	 .loc 2 379 0 is_stmt 0 discriminator 1
 1370 01f8 FB68     	 ldr r3,[r7,#12]
 1371 01fa 07EE903A 	 fmsr s15,r3
 1372 01fe F8EE677A 	 fuitos s15,s15
 1373 0202 9FED447A 	 flds s14,.L75+56
 1374 0206 C7EE877A 	 fdivs s15,s15,s14
 1375 020a 0CE0     	 b .L68
 1376              	.L67:
 1377              	 .loc 2 379 0 discriminator 2
 1378 020c 3B69     	 ldr r3,[r7,#16]
 1379 020e 07EE903A 	 fmsr s15,r3
 1380 0212 B8EE677A 	 fuitos s14,s15
 1381 0216 D7ED0D7A 	 flds s15,[r7,#52]
 1382 021a 67EE277A 	 fmuls s15,s14,s15
 1383 021e 9FED3D7A 	 flds s14,.L75+56
 1384 0222 C7EE877A 	 fdivs s15,s15,s14
 1385              	.L68:
 1386              	 .loc 2 379 0 discriminator 4
 1387 0226 2D4A     	 ldr r2,.L75
 1388 0228 3B6B     	 ldr r3,[r7,#48]
 1389 022a 1621     	 movs r1,#22
 1390 022c 01FB03F3 	 mul r3,r1,r3
 1391 0230 1344     	 add r3,r3,r2
 1392 0232 0833     	 adds r3,r3,#8
 1393 0234 17EE902A 	 fmrs r2,s15
 1394 0238 1A60     	 str r2,[r3]
 380:../cleanflight/src/main/drivers/pwm_output.c ****         motors[motorIndex].pulseOffset = (sMin * hz) - (motors[motorIndex].pulseScale * 1000);
 1395              	 .loc 2 380 0 is_stmt 1 discriminator 4
 1396 023a 3B69     	 ldr r3,[r7,#16]
 1397 023c 07EE903A 	 fmsr s15,r3
 1398 0240 B8EE677A 	 fuitos s14,s15
 1399 0244 D7ED0E7A 	 flds s15,[r7,#56]
 1400 0248 27EE277A 	 fmuls s14,s14,s15
 1401 024c 234A     	 ldr r2,.L75
 1402 024e 3B6B     	 ldr r3,[r7,#48]
 1403 0250 1621     	 movs r1,#22
 1404 0252 01FB03F3 	 mul r3,r1,r3
 1405 0256 1344     	 add r3,r3,r2
 1406 0258 0833     	 adds r3,r3,#8
 1407 025a 1B68     	 ldr r3,[r3]
 1408 025c DFED2D7A 	 flds s15,.L75+56
 1409 0260 06EE903A 	 fmsr s13,r3
 1410 0264 66EEA77A 	 fmuls s15,s13,s15
 1411 0268 77EE677A 	 fsubs s15,s14,s15
 1412 026c 1B4A     	 ldr r2,.L75
 1413 026e 3B6B     	 ldr r3,[r7,#48]
 1414 0270 1621     	 movs r1,#22
 1415 0272 01FB03F3 	 mul r3,r1,r3
 1416 0276 1344     	 add r3,r3,r2
 1417 0278 0833     	 adds r3,r3,#8
 1418 027a 17EE902A 	 fmrs r2,s15
 1419 027e 5A60     	 str r2,[r3,#4]
 381:../cleanflight/src/main/drivers/pwm_output.c **** 
 382:../cleanflight/src/main/drivers/pwm_output.c ****         pwmOutConfig(&motors[motorIndex].channel, timerHardware, hz, period, idlePulse, motorConfig
 1420              	 .loc 2 382 0 discriminator 4
 1421 0280 3B6B     	 ldr r3,[r7,#48]
 1422 0282 1622     	 movs r2,#22
 1423 0284 02FB03F3 	 mul r3,r2,r3
 1424 0288 144A     	 ldr r2,.L75
 1425 028a 9918     	 adds r1,r3,r2
 1426 028c FB68     	 ldr r3,[r7,#12]
 1427 028e 9CB2     	 uxth r4,r3
 1428 0290 7B68     	 ldr r3,[r7,#4]
 1429 0292 DB78     	 ldrb r3,[r3,#3]
 1430 0294 7A88     	 ldrh r2,[r7,#2]
 1431 0296 0092     	 str r2,[sp]
 1432 0298 0193     	 str r3,[sp,#4]
 1433 029a 0846     	 mov r0,r1
 1434 029c F969     	 ldr r1,[r7,#28]
 1435 029e 3A69     	 ldr r2,[r7,#16]
 1436 02a0 2346     	 mov r3,r4
 1437 02a2 FFF7FEFF 	 bl pwmOutConfig
 383:../cleanflight/src/main/drivers/pwm_output.c **** 
 384:../cleanflight/src/main/drivers/pwm_output.c ****         bool timerAlreadyUsed = false;
 1438              	 .loc 2 384 0 discriminator 4
 1439 02a6 0023     	 movs r3,#0
 1440 02a8 87F82B30 	 strb r3,[r7,#43]
 1441              	.LBB7:
 385:../cleanflight/src/main/drivers/pwm_output.c ****         for (int i = 0; i < motorIndex; i++) {
 1442              	 .loc 2 385 0 discriminator 4
 1443 02ac 0023     	 movs r3,#0
 1444 02ae 7B62     	 str r3,[r7,#36]
 1445 02b0 35E0     	 b .L69
 1446              	.L72:
 386:../cleanflight/src/main/drivers/pwm_output.c ****             if (motors[i].channel.tim == motors[motorIndex].channel.tim) {
 1447              	 .loc 2 386 0
 1448 02b2 0A4A     	 ldr r2,.L75
 1449 02b4 7B6A     	 ldr r3,[r7,#36]
 1450 02b6 1621     	 movs r1,#22
 1451 02b8 01FB03F3 	 mul r3,r1,r3
 1452 02bc 1344     	 add r3,r3,r2
 1453 02be 5A68     	 ldr r2,[r3,#4]
 1454 02c0 0649     	 ldr r1,.L75
 1455 02c2 3B6B     	 ldr r3,[r7,#48]
 1456 02c4 1620     	 movs r0,#22
 1457 02c6 00FB03F3 	 mul r3,r0,r3
 1458 02ca 0B44     	 add r3,r3,r1
 1459 02cc 5B68     	 ldr r3,[r3,#4]
 1460 02ce 9A42     	 cmp r2,r3
 1461 02d0 22D1     	 bne .L70
 387:../cleanflight/src/main/drivers/pwm_output.c ****                 timerAlreadyUsed = true;
 1462              	 .loc 2 387 0
 1463 02d2 0123     	 movs r3,#1
 1464 02d4 87F82B30 	 strb r3,[r7,#43]
 388:../cleanflight/src/main/drivers/pwm_output.c ****                 break;
 1465              	 .loc 2 388 0
 1466 02d8 25E0     	 b .L71
 1467              	.L76:
 1468 02da 00BF     	 .align 2
 1469              	.L75:
 1470 02dc 00000000 	 .word motors
 1471 02e0 6F120339 	 .word 956502639
 1472 02e4 28293038 	 .word 942680360
 1473 02e8 ACC5A736 	 .word 916964780
 1474 02ec ACC5A737 	 .word 933741996
 1475 02f0 6F12833A 	 .word 981668463
 1476 02f4 00000000 	 .word isDshot
 1477 02f8 00000000 	 .word pwmWrite
 1478 02fc 00000000 	 .word pwmWriteStandard
 1479 0300 00000000 	 .word pwmCompleteXMCMotorUpdate
 1480 0304 00000000 	 .word pwmCompleteOneshotMotorUpdate
 1481 0308 00000000 	 .word pwmCompleteWrite
 1482 030c 00000000 	 .word pwmWriteUnused
 1483 0310 00000000 	 .word pwmCompleteWriteUnused
 1484 0314 00007A44 	 .word 1148846080
 1485              	.L70:
 385:../cleanflight/src/main/drivers/pwm_output.c ****             if (motors[i].channel.tim == motors[motorIndex].channel.tim) {
 1486              	 .loc 2 385 0 discriminator 2
 1487 0318 7B6A     	 ldr r3,[r7,#36]
 1488 031a 0133     	 adds r3,r3,#1
 1489 031c 7B62     	 str r3,[r7,#36]
 1490              	.L69:
 385:../cleanflight/src/main/drivers/pwm_output.c ****             if (motors[i].channel.tim == motors[motorIndex].channel.tim) {
 1491              	 .loc 2 385 0 is_stmt 0 discriminator 1
 1492 031e 7A6A     	 ldr r2,[r7,#36]
 1493 0320 3B6B     	 ldr r3,[r7,#48]
 1494 0322 9A42     	 cmp r2,r3
 1495 0324 C5DB     	 blt .L72
 1496              	.L71:
 1497              	.LBE7:
 389:../cleanflight/src/main/drivers/pwm_output.c ****             }
 390:../cleanflight/src/main/drivers/pwm_output.c ****         }
 391:../cleanflight/src/main/drivers/pwm_output.c ****         motors[motorIndex].forceOverflow = !timerAlreadyUsed;
 1498              	 .loc 2 391 0 is_stmt 1 discriminator 2
 1499 0326 97F82B30 	 ldrb r3,[r7,#43]
 1500 032a 002B     	 cmp r3,#0
 1501 032c 14BF     	 ite ne
 1502 032e 0123     	 movne r3,#1
 1503 0330 0023     	 moveq r3,#0
 1504 0332 DBB2     	 uxtb r3,r3
 1505 0334 83F00103 	 eor r3,r3,#1
 1506 0338 DBB2     	 uxtb r3,r3
 1507 033a 03F00103 	 and r3,r3,#1
 1508 033e D8B2     	 uxtb r0,r3
 1509 0340 114A     	 ldr r2,.L77
 1510 0342 3B6B     	 ldr r3,[r7,#48]
 1511 0344 1621     	 movs r1,#22
 1512 0346 01FB03F3 	 mul r3,r1,r3
 1513 034a 1344     	 add r3,r3,r2
 1514 034c 1033     	 adds r3,r3,#16
 1515 034e 0246     	 mov r2,r0
 1516 0350 1A70     	 strb r2,[r3]
 392:../cleanflight/src/main/drivers/pwm_output.c ****         motors[motorIndex].enabled = true;
 1517              	 .loc 2 392 0 discriminator 2
 1518 0352 0D4A     	 ldr r2,.L77
 1519 0354 3B6B     	 ldr r3,[r7,#48]
 1520 0356 1621     	 movs r1,#22
 1521 0358 01FB03F3 	 mul r3,r1,r3
 1522 035c 1344     	 add r3,r3,r2
 1523 035e 1033     	 adds r3,r3,#16
 1524 0360 0122     	 movs r2,#1
 1525 0362 5A70     	 strb r2,[r3,#1]
 1526              	.LBE6:
 326:../cleanflight/src/main/drivers/pwm_output.c ****         const ioTag_t tag = motorConfig->ioTags[motorIndex];
 1527              	 .loc 2 326 0 discriminator 2
 1528 0364 3B6B     	 ldr r3,[r7,#48]
 1529 0366 0133     	 adds r3,r3,#1
 1530 0368 3B63     	 str r3,[r7,#48]
 1531              	.L58:
 326:../cleanflight/src/main/drivers/pwm_output.c ****         const ioTag_t tag = motorConfig->ioTags[motorIndex];
 1532              	 .loc 2 326 0 is_stmt 0 discriminator 1
 1533 036a 3B6B     	 ldr r3,[r7,#48]
 1534 036c 072B     	 cmp r3,#7
 1535 036e 04DC     	 bgt .L73
 326:../cleanflight/src/main/drivers/pwm_output.c ****         const ioTag_t tag = motorConfig->ioTags[motorIndex];
 1536              	 .loc 2 326 0 discriminator 3
 1537 0370 7A78     	 ldrb r2,[r7,#1]
 1538 0372 3B6B     	 ldr r3,[r7,#48]
 1539 0374 9A42     	 cmp r2,r3
 1540 0376 3FF7A7AE 	 bgt .L74
 1541              	.L73:
 1542              	.LBE5:
 393:../cleanflight/src/main/drivers/pwm_output.c ****     }
 394:../cleanflight/src/main/drivers/pwm_output.c **** 
 395:../cleanflight/src/main/drivers/pwm_output.c ****     pwmMotorsEnabled = true;
 1543              	 .loc 2 395 0 is_stmt 1
 1544 037a 044B     	 ldr r3,.L77+4
 1545 037c 0122     	 movs r2,#1
 1546 037e 1A70     	 strb r2,[r3]
 1547              	.L47:
 396:../cleanflight/src/main/drivers/pwm_output.c **** }
 1548              	 .loc 2 396 0
 1549 0380 4437     	 adds r7,r7,#68
 1550              	.LCFI90:
 1551              	 .cfi_def_cfa_offset 12
 1552 0382 BD46     	 mov sp,r7
 1553              	.LCFI91:
 1554              	 .cfi_def_cfa_register 13
 1555              	 
 1556 0384 90BD     	 pop {r4,r7,pc}
 1557              	.L78:
 1558 0386 00BF     	 .align 2
 1559              	.L77:
 1560 0388 00000000 	 .word motors
 1561 038c 00000000 	 .word pwmMotorsEnabled
 1562              	 .cfi_endproc
 1563              	.LFE540:
 1565              	 .section .text.pwmGetMotors,"ax",%progbits
 1566              	 .align 2
 1567              	 .global pwmGetMotors
 1568              	 .thumb
 1569              	 .thumb_func
 1571              	pwmGetMotors:
 1572              	.LFB541:
 397:../cleanflight/src/main/drivers/pwm_output.c **** 
 398:../cleanflight/src/main/drivers/pwm_output.c **** pwmOutputPort_t *pwmGetMotors(void)
 399:../cleanflight/src/main/drivers/pwm_output.c **** {
 1573              	 .loc 2 399 0
 1574              	 .cfi_startproc
 1575              	 
 1576              	 
 1577              	 
 1578 0000 80B4     	 push {r7}
 1579              	.LCFI92:
 1580              	 .cfi_def_cfa_offset 4
 1581              	 .cfi_offset 7,-4
 1582 0002 00AF     	 add r7,sp,#0
 1583              	.LCFI93:
 1584              	 .cfi_def_cfa_register 7
 400:../cleanflight/src/main/drivers/pwm_output.c ****     return motors;
 1585              	 .loc 2 400 0
 1586 0004 024B     	 ldr r3,.L81
 401:../cleanflight/src/main/drivers/pwm_output.c **** }
 1587              	 .loc 2 401 0
 1588 0006 1846     	 mov r0,r3
 1589 0008 BD46     	 mov sp,r7
 1590              	.LCFI94:
 1591              	 .cfi_def_cfa_register 13
 1592              	 
 1593 000a 5DF8047B 	 ldr r7,[sp],#4
 1594              	.LCFI95:
 1595              	 .cfi_restore 7
 1596              	 .cfi_def_cfa_offset 0
 1597 000e 7047     	 bx lr
 1598              	.L82:
 1599              	 .align 2
 1600              	.L81:
 1601 0010 00000000 	 .word motors
 1602              	 .cfi_endproc
 1603              	.LFE541:
 1605              	 .section .text.isMotorProtocolDshot,"ax",%progbits
 1606              	 .align 2
 1607              	 .global isMotorProtocolDshot
 1608              	 .thumb
 1609              	 .thumb_func
 1611              	isMotorProtocolDshot:
 1612              	.LFB542:
 402:../cleanflight/src/main/drivers/pwm_output.c **** 
 403:../cleanflight/src/main/drivers/pwm_output.c **** bool isMotorProtocolDshot(void)
 404:../cleanflight/src/main/drivers/pwm_output.c **** {
 1613              	 .loc 2 404 0
 1614              	 .cfi_startproc
 1615              	 
 1616              	 
 1617              	 
 1618 0000 80B4     	 push {r7}
 1619              	.LCFI96:
 1620              	 .cfi_def_cfa_offset 4
 1621              	 .cfi_offset 7,-4
 1622 0002 00AF     	 add r7,sp,#0
 1623              	.LCFI97:
 1624              	 .cfi_def_cfa_register 7
 405:../cleanflight/src/main/drivers/pwm_output.c ****     return isDshot;
 1625              	 .loc 2 405 0
 1626 0004 034B     	 ldr r3,.L85
 1627 0006 1B78     	 ldrb r3,[r3]
 406:../cleanflight/src/main/drivers/pwm_output.c **** }
 1628              	 .loc 2 406 0
 1629 0008 1846     	 mov r0,r3
 1630 000a BD46     	 mov sp,r7
 1631              	.LCFI98:
 1632              	 .cfi_def_cfa_register 13
 1633              	 
 1634 000c 5DF8047B 	 ldr r7,[sp],#4
 1635              	.LCFI99:
 1636              	 .cfi_restore 7
 1637              	 .cfi_def_cfa_offset 0
 1638 0010 7047     	 bx lr
 1639              	.L86:
 1640 0012 00BF     	 .align 2
 1641              	.L85:
 1642 0014 00000000 	 .word isDshot
 1643              	 .cfi_endproc
 1644              	.LFE542:
 1646              	 .section .text.pwmWriteServo,"ax",%progbits
 1647              	 .align 2
 1648              	 .global pwmWriteServo
 1649              	 .thumb
 1650              	 .thumb_func
 1652              	pwmWriteServo:
 1653              	.LFB543:
 407:../cleanflight/src/main/drivers/pwm_output.c **** 
 408:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_DSHOT
 409:../cleanflight/src/main/drivers/pwm_output.c **** uint32_t getDshotHz(motorPwmProtocolTypes_e pwmProtocolType)
 410:../cleanflight/src/main/drivers/pwm_output.c **** {
 411:../cleanflight/src/main/drivers/pwm_output.c ****     switch (pwmProtocolType) {
 412:../cleanflight/src/main/drivers/pwm_output.c ****     case(PWM_TYPE_PROSHOT1000):
 413:../cleanflight/src/main/drivers/pwm_output.c ****         return MOTOR_PROSHOT1000_HZ;
 414:../cleanflight/src/main/drivers/pwm_output.c ****     case(PWM_TYPE_DSHOT1200):
 415:../cleanflight/src/main/drivers/pwm_output.c ****         return MOTOR_DSHOT1200_HZ;
 416:../cleanflight/src/main/drivers/pwm_output.c ****     case(PWM_TYPE_DSHOT600):
 417:../cleanflight/src/main/drivers/pwm_output.c ****         return MOTOR_DSHOT600_HZ;
 418:../cleanflight/src/main/drivers/pwm_output.c ****     case(PWM_TYPE_DSHOT300):
 419:../cleanflight/src/main/drivers/pwm_output.c ****         return MOTOR_DSHOT300_HZ;
 420:../cleanflight/src/main/drivers/pwm_output.c ****     default:
 421:../cleanflight/src/main/drivers/pwm_output.c ****     case(PWM_TYPE_DSHOT150):
 422:../cleanflight/src/main/drivers/pwm_output.c ****         return MOTOR_DSHOT150_HZ;
 423:../cleanflight/src/main/drivers/pwm_output.c ****     }
 424:../cleanflight/src/main/drivers/pwm_output.c **** }
 425:../cleanflight/src/main/drivers/pwm_output.c **** 
 426:../cleanflight/src/main/drivers/pwm_output.c **** bool allMotorsAreIdle(uint8_t motorCount)
 427:../cleanflight/src/main/drivers/pwm_output.c **** {
 428:../cleanflight/src/main/drivers/pwm_output.c ****     bool allMotorsIdle = true;
 429:../cleanflight/src/main/drivers/pwm_output.c ****     for (unsigned i = 0; i < motorCount; i++) {
 430:../cleanflight/src/main/drivers/pwm_output.c ****         const motorDmaOutput_t *motor = getMotorDmaOutput(i);
 431:../cleanflight/src/main/drivers/pwm_output.c ****         if (motor->value) {
 432:../cleanflight/src/main/drivers/pwm_output.c ****             allMotorsIdle = false;
 433:../cleanflight/src/main/drivers/pwm_output.c ****         }
 434:../cleanflight/src/main/drivers/pwm_output.c ****     }
 435:../cleanflight/src/main/drivers/pwm_output.c **** 
 436:../cleanflight/src/main/drivers/pwm_output.c ****     return allMotorsIdle;
 437:../cleanflight/src/main/drivers/pwm_output.c **** }
 438:../cleanflight/src/main/drivers/pwm_output.c **** 
 439:../cleanflight/src/main/drivers/pwm_output.c **** FAST_CODE bool pwmDshotCommandIsQueued(void)
 440:../cleanflight/src/main/drivers/pwm_output.c **** {
 441:../cleanflight/src/main/drivers/pwm_output.c ****     return dshotCommandControl.nextCommandAtUs;
 442:../cleanflight/src/main/drivers/pwm_output.c **** }
 443:../cleanflight/src/main/drivers/pwm_output.c **** 
 444:../cleanflight/src/main/drivers/pwm_output.c **** FAST_CODE bool pwmDshotCommandIsProcessing(void)
 445:../cleanflight/src/main/drivers/pwm_output.c **** {
 446:../cleanflight/src/main/drivers/pwm_output.c ****     return dshotCommandControl.nextCommandAtUs && !dshotCommandControl.waitingForIdle && dshotComma
 447:../cleanflight/src/main/drivers/pwm_output.c **** }
 448:../cleanflight/src/main/drivers/pwm_output.c **** 
 449:../cleanflight/src/main/drivers/pwm_output.c **** void pwmWriteDshotCommand(uint8_t index, uint8_t motorCount, uint8_t command, bool blocking)
 450:../cleanflight/src/main/drivers/pwm_output.c **** {
 451:../cleanflight/src/main/drivers/pwm_output.c ****     timeUs_t timeNowUs = micros();
 452:../cleanflight/src/main/drivers/pwm_output.c **** 
 453:../cleanflight/src/main/drivers/pwm_output.c ****     if (!isMotorProtocolDshot() || (command > DSHOT_MAX_COMMAND) || pwmDshotCommandIsQueued()) {
 454:../cleanflight/src/main/drivers/pwm_output.c ****         return;
 455:../cleanflight/src/main/drivers/pwm_output.c ****     }
 456:../cleanflight/src/main/drivers/pwm_output.c **** 
 457:../cleanflight/src/main/drivers/pwm_output.c ****     uint8_t repeats = 1;
 458:../cleanflight/src/main/drivers/pwm_output.c ****     timeUs_t delayAfterCommandUs = DSHOT_COMMAND_DELAY_US;
 459:../cleanflight/src/main/drivers/pwm_output.c **** 
 460:../cleanflight/src/main/drivers/pwm_output.c ****     switch (command) {
 461:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_SPIN_DIRECTION_1:
 462:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_SPIN_DIRECTION_2:
 463:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_3D_MODE_OFF:
 464:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_3D_MODE_ON:
 465:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_SAVE_SETTINGS:
 466:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_SPIN_DIRECTION_NORMAL:
 467:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_SPIN_DIRECTION_REVERSED:
 468:../cleanflight/src/main/drivers/pwm_output.c ****         repeats = 10;
 469:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 470:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_BEACON1:
 471:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_BEACON2:
 472:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_BEACON3:
 473:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_BEACON4:
 474:../cleanflight/src/main/drivers/pwm_output.c ****     case DSHOT_CMD_BEACON5:
 475:../cleanflight/src/main/drivers/pwm_output.c ****         delayAfterCommandUs = DSHOT_BEEP_DELAY_US;
 476:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 477:../cleanflight/src/main/drivers/pwm_output.c ****     default:
 478:../cleanflight/src/main/drivers/pwm_output.c ****         break;
 479:../cleanflight/src/main/drivers/pwm_output.c ****     }
 480:../cleanflight/src/main/drivers/pwm_output.c **** 
 481:../cleanflight/src/main/drivers/pwm_output.c ****     if (blocking) {
 482:../cleanflight/src/main/drivers/pwm_output.c ****         delayMicroseconds(DSHOT_INITIAL_DELAY_US - DSHOT_COMMAND_DELAY_US);
 483:../cleanflight/src/main/drivers/pwm_output.c ****         for (; repeats; repeats--) {
 484:../cleanflight/src/main/drivers/pwm_output.c ****             delayMicroseconds(DSHOT_COMMAND_DELAY_US);
 485:../cleanflight/src/main/drivers/pwm_output.c **** 
 486:../cleanflight/src/main/drivers/pwm_output.c ****             for (uint8_t i = 0; i < motorCount; i++) {
 487:../cleanflight/src/main/drivers/pwm_output.c ****                 if ((i == index) || (index == ALL_MOTORS)) {
 488:../cleanflight/src/main/drivers/pwm_output.c ****                     motorDmaOutput_t *const motor = getMotorDmaOutput(i);
 489:../cleanflight/src/main/drivers/pwm_output.c ****                     motor->requestTelemetry = true;
 490:../cleanflight/src/main/drivers/pwm_output.c ****                     pwmWriteDshotInt(i, command);
 491:../cleanflight/src/main/drivers/pwm_output.c ****                 }
 492:../cleanflight/src/main/drivers/pwm_output.c ****             }
 493:../cleanflight/src/main/drivers/pwm_output.c **** 
 494:../cleanflight/src/main/drivers/pwm_output.c ****             pwmCompleteDshotMotorUpdate(0);
 495:../cleanflight/src/main/drivers/pwm_output.c ****         }
 496:../cleanflight/src/main/drivers/pwm_output.c ****         delayMicroseconds(delayAfterCommandUs);
 497:../cleanflight/src/main/drivers/pwm_output.c ****     } else {
 498:../cleanflight/src/main/drivers/pwm_output.c ****         dshotCommandControl.repeats = repeats;
 499:../cleanflight/src/main/drivers/pwm_output.c ****         dshotCommandControl.nextCommandAtUs = timeNowUs + DSHOT_INITIAL_DELAY_US;
 500:../cleanflight/src/main/drivers/pwm_output.c ****         dshotCommandControl.delayAfterCommandUs = delayAfterCommandUs;
 501:../cleanflight/src/main/drivers/pwm_output.c ****         for (unsigned i = 0; i < motorCount; i++) {
 502:../cleanflight/src/main/drivers/pwm_output.c ****             if (index == i || index == ALL_MOTORS) {
 503:../cleanflight/src/main/drivers/pwm_output.c ****                 dshotCommandControl.command[i] = command;
 504:../cleanflight/src/main/drivers/pwm_output.c ****             } else {
 505:../cleanflight/src/main/drivers/pwm_output.c ****                 dshotCommandControl.command[i] = command;
 506:../cleanflight/src/main/drivers/pwm_output.c ****             }
 507:../cleanflight/src/main/drivers/pwm_output.c ****         }
 508:../cleanflight/src/main/drivers/pwm_output.c **** 
 509:../cleanflight/src/main/drivers/pwm_output.c ****         dshotCommandControl.waitingForIdle = !allMotorsAreIdle(motorCount);
 510:../cleanflight/src/main/drivers/pwm_output.c ****     }
 511:../cleanflight/src/main/drivers/pwm_output.c **** }
 512:../cleanflight/src/main/drivers/pwm_output.c **** 
 513:../cleanflight/src/main/drivers/pwm_output.c **** uint8_t pwmGetDshotCommand(uint8_t index)
 514:../cleanflight/src/main/drivers/pwm_output.c **** {
 515:../cleanflight/src/main/drivers/pwm_output.c ****     return dshotCommandControl.command[index];
 516:../cleanflight/src/main/drivers/pwm_output.c **** }
 517:../cleanflight/src/main/drivers/pwm_output.c **** 
 518:../cleanflight/src/main/drivers/pwm_output.c **** FAST_CODE_NOINLINE bool pwmDshotCommandOutputIsEnabled(uint8_t motorCount)
 519:../cleanflight/src/main/drivers/pwm_output.c **** {
 520:../cleanflight/src/main/drivers/pwm_output.c ****     timeUs_t timeNowUs = micros();
 521:../cleanflight/src/main/drivers/pwm_output.c **** 
 522:../cleanflight/src/main/drivers/pwm_output.c ****     if (dshotCommandControl.waitingForIdle) {
 523:../cleanflight/src/main/drivers/pwm_output.c ****         if (allMotorsAreIdle(motorCount)) {
 524:../cleanflight/src/main/drivers/pwm_output.c ****             dshotCommandControl.nextCommandAtUs = timeNowUs + DSHOT_INITIAL_DELAY_US;
 525:../cleanflight/src/main/drivers/pwm_output.c ****             dshotCommandControl.waitingForIdle = false;
 526:../cleanflight/src/main/drivers/pwm_output.c ****         }
 527:../cleanflight/src/main/drivers/pwm_output.c **** 
 528:../cleanflight/src/main/drivers/pwm_output.c ****         // Send normal motor output while waiting for motors to go idle
 529:../cleanflight/src/main/drivers/pwm_output.c ****         return true;
 530:../cleanflight/src/main/drivers/pwm_output.c ****     }
 531:../cleanflight/src/main/drivers/pwm_output.c **** 
 532:../cleanflight/src/main/drivers/pwm_output.c ****     if (cmpTimeUs(timeNowUs, dshotCommandControl.nextCommandAtUs) < 0) {
 533:../cleanflight/src/main/drivers/pwm_output.c ****         //Skip motor update because it isn't time yet for a new command
 534:../cleanflight/src/main/drivers/pwm_output.c ****         return false;
 535:../cleanflight/src/main/drivers/pwm_output.c ****     }   
 536:../cleanflight/src/main/drivers/pwm_output.c ****   
 537:../cleanflight/src/main/drivers/pwm_output.c ****     //Timed motor update happening with dshot command
 538:../cleanflight/src/main/drivers/pwm_output.c ****     if (dshotCommandControl.repeats > 0) {
 539:../cleanflight/src/main/drivers/pwm_output.c ****         dshotCommandControl.repeats--;
 540:../cleanflight/src/main/drivers/pwm_output.c **** 
 541:../cleanflight/src/main/drivers/pwm_output.c ****         if (dshotCommandControl.repeats > 0) {
 542:../cleanflight/src/main/drivers/pwm_output.c ****             dshotCommandControl.nextCommandAtUs = timeNowUs + DSHOT_COMMAND_DELAY_US;
 543:../cleanflight/src/main/drivers/pwm_output.c ****         } else {
 544:../cleanflight/src/main/drivers/pwm_output.c ****             dshotCommandControl.nextCommandAtUs = timeNowUs + dshotCommandControl.delayAfterCommand
 545:../cleanflight/src/main/drivers/pwm_output.c ****         }
 546:../cleanflight/src/main/drivers/pwm_output.c ****     } else {
 547:../cleanflight/src/main/drivers/pwm_output.c ****         dshotCommandControl.nextCommandAtUs = 0;
 548:../cleanflight/src/main/drivers/pwm_output.c ****     }
 549:../cleanflight/src/main/drivers/pwm_output.c **** 
 550:../cleanflight/src/main/drivers/pwm_output.c ****     return true;
 551:../cleanflight/src/main/drivers/pwm_output.c **** }
 552:../cleanflight/src/main/drivers/pwm_output.c **** 
 553:../cleanflight/src/main/drivers/pwm_output.c **** FAST_CODE uint16_t prepareDshotPacket(motorDmaOutput_t *const motor)
 554:../cleanflight/src/main/drivers/pwm_output.c **** {
 555:../cleanflight/src/main/drivers/pwm_output.c ****     uint16_t packet = (motor->value << 1) | (motor->requestTelemetry ? 1 : 0);
 556:../cleanflight/src/main/drivers/pwm_output.c ****     motor->requestTelemetry = false;    // reset telemetry request to make sure it's triggered only
 557:../cleanflight/src/main/drivers/pwm_output.c **** 
 558:../cleanflight/src/main/drivers/pwm_output.c ****     // compute checksum
 559:../cleanflight/src/main/drivers/pwm_output.c ****     int csum = 0;
 560:../cleanflight/src/main/drivers/pwm_output.c ****     int csum_data = packet;
 561:../cleanflight/src/main/drivers/pwm_output.c ****     for (int i = 0; i < 3; i++) {
 562:../cleanflight/src/main/drivers/pwm_output.c ****         csum ^=  csum_data;   // xor data by nibbles
 563:../cleanflight/src/main/drivers/pwm_output.c ****         csum_data >>= 4;
 564:../cleanflight/src/main/drivers/pwm_output.c ****     }
 565:../cleanflight/src/main/drivers/pwm_output.c ****     csum &= 0xf;
 566:../cleanflight/src/main/drivers/pwm_output.c ****     // append checksum
 567:../cleanflight/src/main/drivers/pwm_output.c ****     packet = (packet << 4) | csum;
 568:../cleanflight/src/main/drivers/pwm_output.c **** 
 569:../cleanflight/src/main/drivers/pwm_output.c ****     return packet;
 570:../cleanflight/src/main/drivers/pwm_output.c **** }
 571:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 572:../cleanflight/src/main/drivers/pwm_output.c **** 
 573:../cleanflight/src/main/drivers/pwm_output.c **** #ifdef USE_SERVOS
 574:../cleanflight/src/main/drivers/pwm_output.c **** void pwmWriteServo(uint8_t index, float value)
 575:../cleanflight/src/main/drivers/pwm_output.c **** {
 1654              	 .loc 2 575 0
 1655              	 .cfi_startproc
 1656              	 
 1657              	 
 1658 0000 90B5     	 push {r4,r7,lr}
 1659              	.LCFI100:
 1660              	 .cfi_def_cfa_offset 12
 1661              	 .cfi_offset 4,-12
 1662              	 .cfi_offset 7,-8
 1663              	 .cfi_offset 14,-4
 1664 0002 83B0     	 sub sp,sp,#12
 1665              	.LCFI101:
 1666              	 .cfi_def_cfa_offset 24
 1667 0004 00AF     	 add r7,sp,#0
 1668              	.LCFI102:
 1669              	 .cfi_def_cfa_register 7
 1670 0006 0346     	 mov r3,r0
 1671 0008 3960     	 str r1,[r7]
 1672 000a FB71     	 strb r3,[r7,#7]
 576:../cleanflight/src/main/drivers/pwm_output.c ****     if (index < MAX_SUPPORTED_SERVOS && servos[index].channel.ccr) {
 1673              	 .loc 2 576 0
 1674 000c FB79     	 ldrb r3,[r7,#7]
 1675 000e 072B     	 cmp r3,#7
 1676 0010 14D8     	 bhi .L87
 1677              	 .loc 2 576 0 is_stmt 0 discriminator 1
 1678 0012 FB79     	 ldrb r3,[r7,#7]
 1679 0014 0B4A     	 ldr r2,.L89
 1680 0016 1621     	 movs r1,#22
 1681 0018 01FB03F3 	 mul r3,r1,r3
 1682 001c 1344     	 add r3,r3,r2
 1683 001e 1B68     	 ldr r3,[r3]
 1684 0020 002B     	 cmp r3,#0
 1685 0022 0BD0     	 beq .L87
 577:../cleanflight/src/main/drivers/pwm_output.c ****         *servos[index].channel.ccr = lrintf(value);
 1686              	 .loc 2 577 0 is_stmt 1
 1687 0024 FB79     	 ldrb r3,[r7,#7]
 1688 0026 074A     	 ldr r2,.L89
 1689 0028 1621     	 movs r1,#22
 1690 002a 01FB03F3 	 mul r3,r1,r3
 1691 002e 1344     	 add r3,r3,r2
 1692 0030 1C68     	 ldr r4,[r3]
 1693 0032 3868     	 ldr r0,[r7]
 1694 0034 FFF7FEFF 	 bl lrintf
 1695 0038 0346     	 mov r3,r0
 1696 003a 2360     	 str r3,[r4]
 1697              	.L87:
 578:../cleanflight/src/main/drivers/pwm_output.c ****     }
 579:../cleanflight/src/main/drivers/pwm_output.c **** }
 1698              	 .loc 2 579 0
 1699 003c 0C37     	 adds r7,r7,#12
 1700              	.LCFI103:
 1701              	 .cfi_def_cfa_offset 12
 1702 003e BD46     	 mov sp,r7
 1703              	.LCFI104:
 1704              	 .cfi_def_cfa_register 13
 1705              	 
 1706 0040 90BD     	 pop {r4,r7,pc}
 1707              	.L90:
 1708 0042 00BF     	 .align 2
 1709              	.L89:
 1710 0044 00000000 	 .word servos
 1711              	 .cfi_endproc
 1712              	.LFE543:
 1714              	 .section .text.servoDevInit,"ax",%progbits
 1715              	 .align 2
 1716              	 .global servoDevInit
 1717              	 .thumb
 1718              	 .thumb_func
 1720              	servoDevInit:
 1721              	.LFB544:
 580:../cleanflight/src/main/drivers/pwm_output.c **** 
 581:../cleanflight/src/main/drivers/pwm_output.c **** void servoDevInit(const servoDevConfig_t *servoConfig)
 582:../cleanflight/src/main/drivers/pwm_output.c **** {
 1722              	 .loc 2 582 0
 1723              	 .cfi_startproc
 1724              	 
 1725              	 
 1726 0000 90B5     	 push {r4,r7,lr}
 1727              	.LCFI105:
 1728              	 .cfi_def_cfa_offset 12
 1729              	 .cfi_offset 4,-12
 1730              	 .cfi_offset 7,-8
 1731              	 .cfi_offset 14,-4
 1732 0002 87B0     	 sub sp,sp,#28
 1733              	.LCFI106:
 1734              	 .cfi_def_cfa_offset 40
 1735 0004 02AF     	 add r7,sp,#8
 1736              	.LCFI107:
 1737              	 .cfi_def_cfa 7,32
 1738 0006 7860     	 str r0,[r7,#4]
 1739              	.LBB8:
 583:../cleanflight/src/main/drivers/pwm_output.c ****     for (uint8_t servoIndex = 0; servoIndex < MAX_SUPPORTED_SERVOS; servoIndex++) {
 1740              	 .loc 2 583 0
 1741 0008 0023     	 movs r3,#0
 1742 000a FB73     	 strb r3,[r7,#15]
 1743 000c 63E0     	 b .L92
 1744              	.L96:
 1745              	.LBB9:
 584:../cleanflight/src/main/drivers/pwm_output.c ****         const ioTag_t tag = servoConfig->ioTags[servoIndex];
 1746              	 .loc 2 584 0
 1747 000e FB7B     	 ldrb r3,[r7,#15]
 1748 0010 7A68     	 ldr r2,[r7,#4]
 1749 0012 1344     	 add r3,r3,r2
 1750 0014 1B79     	 ldrb r3,[r3,#4]
 1751 0016 BB73     	 strb r3,[r7,#14]
 585:../cleanflight/src/main/drivers/pwm_output.c **** 
 586:../cleanflight/src/main/drivers/pwm_output.c ****         if (!tag) {
 1752              	 .loc 2 586 0
 1753 0018 BB7B     	 ldrb r3,[r7,#14]
 1754 001a 002B     	 cmp r3,#0
 1755 001c 00D1     	 bne .L93
 587:../cleanflight/src/main/drivers/pwm_output.c ****             break;
 1756              	 .loc 2 587 0
 1757 001e 5DE0     	 b .L91
 1758              	.L93:
 588:../cleanflight/src/main/drivers/pwm_output.c ****         }
 589:../cleanflight/src/main/drivers/pwm_output.c **** 
 590:../cleanflight/src/main/drivers/pwm_output.c ****         servos[servoIndex].io = IOGetByTag(tag);
 1759              	 .loc 2 590 0
 1760 0020 FC7B     	 ldrb r4,[r7,#15]
 1761 0022 BB7B     	 ldrb r3,[r7,#14]
 1762 0024 1846     	 mov r0,r3
 1763 0026 FFF7FEFF 	 bl IOGetByTag
 1764 002a 0146     	 mov r1,r0
 1765 002c 2D4A     	 ldr r2,.L97
 1766 002e 1623     	 movs r3,#22
 1767 0030 03FB04F3 	 mul r3,r3,r4
 1768 0034 1344     	 add r3,r3,r2
 1769 0036 1033     	 adds r3,r3,#16
 1770 0038 C3F80210 	 str r1,[r3,#2]
 591:../cleanflight/src/main/drivers/pwm_output.c **** 
 592:../cleanflight/src/main/drivers/pwm_output.c ****         IOInit(servos[servoIndex].io, OWNER_SERVO, RESOURCE_INDEX(servoIndex));
 1771              	 .loc 2 592 0
 1772 003c FB7B     	 ldrb r3,[r7,#15]
 1773 003e 294A     	 ldr r2,.L97
 1774 0040 1621     	 movs r1,#22
 1775 0042 01FB03F3 	 mul r3,r1,r3
 1776 0046 1344     	 add r3,r3,r2
 1777 0048 1033     	 adds r3,r3,#16
 1778 004a D3F80220 	 ldr r2,[r3,#2]
 1779 004e FB7B     	 ldrb r3,[r7,#15]
 1780 0050 0133     	 adds r3,r3,#1
 1781 0052 DBB2     	 uxtb r3,r3
 1782 0054 1046     	 mov r0,r2
 1783 0056 0421     	 movs r1,#4
 1784 0058 1A46     	 mov r2,r3
 1785 005a FFF7FEFF 	 bl IOInit
 593:../cleanflight/src/main/drivers/pwm_output.c **** 
 594:../cleanflight/src/main/drivers/pwm_output.c ****         const timerHardware_t *timer = timerGetByTag(tag);
 1786              	 .loc 2 594 0
 1787 005e BB7B     	 ldrb r3,[r7,#14]
 1788 0060 1846     	 mov r0,r3
 1789 0062 FFF7FEFF 	 bl timerGetByTag
 1790 0066 B860     	 str r0,[r7,#8]
 595:../cleanflight/src/main/drivers/pwm_output.c **** #if defined(USE_HAL_DRIVER)
 596:../cleanflight/src/main/drivers/pwm_output.c ****         IOConfigGPIOAF(servos[servoIndex].io, IOCFG_AF_PP, timer->alternateFunction);
 597:../cleanflight/src/main/drivers/pwm_output.c **** #else
 598:../cleanflight/src/main/drivers/pwm_output.c ****         IOConfigGPIO(servos[servoIndex].io, IOCFG_AF_PP);
 1791              	 .loc 2 598 0
 1792 0068 FB7B     	 ldrb r3,[r7,#15]
 1793 006a 1E4A     	 ldr r2,.L97
 1794 006c 1621     	 movs r1,#22
 1795 006e 01FB03F3 	 mul r3,r1,r3
 1796 0072 1344     	 add r3,r3,r2
 1797 0074 1033     	 adds r3,r3,#16
 1798 0076 D3F80230 	 ldr r3,[r3,#2]
 1799 007a 1846     	 mov r0,r3
 1800 007c 8021     	 movs r1,#128
 1801 007e FFF7FEFF 	 bl IOConfigGPIO
 599:../cleanflight/src/main/drivers/pwm_output.c **** #endif
 600:../cleanflight/src/main/drivers/pwm_output.c **** 
 601:../cleanflight/src/main/drivers/pwm_output.c ****         if (timer == NULL) {
 1802              	 .loc 2 601 0
 1803 0082 BB68     	 ldr r3,[r7,#8]
 1804 0084 002B     	 cmp r3,#0
 1805 0086 00D1     	 bne .L95
 602:../cleanflight/src/main/drivers/pwm_output.c ****             /* flag failure and disable ability to arm */
 603:../cleanflight/src/main/drivers/pwm_output.c ****             break;
 1806              	 .loc 2 603 0
 1807 0088 28E0     	 b .L91
 1808              	.L95:
 604:../cleanflight/src/main/drivers/pwm_output.c ****         }
 605:../cleanflight/src/main/drivers/pwm_output.c ****         pwmOutConfig(&servos[servoIndex].channel, timer, PWM_TIMER_1MHZ, PWM_TIMER_1MHZ / servoConf
 1809              	 .loc 2 605 0 discriminator 2
 1810 008a FB7B     	 ldrb r3,[r7,#15]
 1811 008c 1622     	 movs r2,#22
 1812 008e 02FB03F3 	 mul r3,r2,r3
 1813 0092 144A     	 ldr r2,.L97
 1814 0094 1A44     	 add r2,r2,r3
 1815 0096 7B68     	 ldr r3,[r7,#4]
 1816 0098 5B88     	 ldrh r3,[r3,#2]
 1817 009a 9BB2     	 uxth r3,r3
 1818 009c 1946     	 mov r1,r3
 1819 009e 124B     	 ldr r3,.L97+4
 1820 00a0 93FBF1F3 	 sdiv r3,r3,r1
 1821 00a4 9CB2     	 uxth r4,r3
 1822 00a6 7B68     	 ldr r3,[r7,#4]
 1823 00a8 1B88     	 ldrh r3,[r3]
 1824 00aa 9BB2     	 uxth r3,r3
 1825 00ac 0093     	 str r3,[sp]
 1826 00ae 0023     	 movs r3,#0
 1827 00b0 0193     	 str r3,[sp,#4]
 1828 00b2 1046     	 mov r0,r2
 1829 00b4 B968     	 ldr r1,[r7,#8]
 1830 00b6 0C4A     	 ldr r2,.L97+4
 1831 00b8 2346     	 mov r3,r4
 1832 00ba FFF7FEFF 	 bl pwmOutConfig
 606:../cleanflight/src/main/drivers/pwm_output.c ****         servos[servoIndex].enabled = true;
 1833              	 .loc 2 606 0 discriminator 2
 1834 00be FB7B     	 ldrb r3,[r7,#15]
 1835 00c0 084A     	 ldr r2,.L97
 1836 00c2 1621     	 movs r1,#22
 1837 00c4 01FB03F3 	 mul r3,r1,r3
 1838 00c8 1344     	 add r3,r3,r2
 1839 00ca 1033     	 adds r3,r3,#16
 1840 00cc 0122     	 movs r2,#1
 1841 00ce 5A70     	 strb r2,[r3,#1]
 1842              	.LBE9:
 583:../cleanflight/src/main/drivers/pwm_output.c ****         const ioTag_t tag = servoConfig->ioTags[servoIndex];
 1843              	 .loc 2 583 0 discriminator 2
 1844 00d0 FB7B     	 ldrb r3,[r7,#15]
 1845 00d2 0133     	 adds r3,r3,#1
 1846 00d4 FB73     	 strb r3,[r7,#15]
 1847              	.L92:
 583:../cleanflight/src/main/drivers/pwm_output.c ****         const ioTag_t tag = servoConfig->ioTags[servoIndex];
 1848              	 .loc 2 583 0 is_stmt 0 discriminator 1
 1849 00d6 FB7B     	 ldrb r3,[r7,#15]
 1850 00d8 072B     	 cmp r3,#7
 1851 00da 98D9     	 bls .L96
 1852              	.L91:
 1853              	.LBE8:
 607:../cleanflight/src/main/drivers/pwm_output.c ****     }
 608:../cleanflight/src/main/drivers/pwm_output.c **** }
 1854              	 .loc 2 608 0 is_stmt 1
 1855 00dc 1437     	 adds r7,r7,#20
 1856              	.LCFI108:
 1857              	 .cfi_def_cfa_offset 12
 1858 00de BD46     	 mov sp,r7
 1859              	.LCFI109:
 1860              	 .cfi_def_cfa_register 13
 1861              	 
 1862 00e0 90BD     	 pop {r4,r7,pc}
 1863              	.L98:
 1864 00e2 00BF     	 .align 2
 1865              	.L97:
 1866 00e4 00000000 	 .word servos
 1867 00e8 40420F00 	 .word 1000000
 1868              	 .cfi_endproc
 1869              	.LFE544:
 1871              	 .text
 1872              	.Letext0:
 1873              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1874              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1875              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/xmc4700.h"
 1876              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc4_gpio.h"
 1877              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 1878              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/platform.h"
 1879              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 1880              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 1881              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/timer.h"
 1882              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 1883              	 .file 13 "../cleanflight/src/main/drivers/pwm_output.h"
 1884              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 1885              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pwm_output.c
    {standard input}:20     .text.XMC_CCU4_EnableClock:00000000 $t
    {standard input}:24     .text.XMC_CCU4_EnableClock:00000000 XMC_CCU4_EnableClock
    {standard input}:74     .text.XMC_CCU4_SLICE_StartTimer:00000000 $t
    {standard input}:78     .text.XMC_CCU4_SLICE_StartTimer:00000000 XMC_CCU4_SLICE_StartTimer
    {standard input}:119    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 $t
    {standard input}:123    .text.XMC_CCU4_SLICE_SetTimerCompareMatch:00000000 XMC_CCU4_SLICE_SetTimerCompareMatch
    {standard input}:167    .text.XMC_CCU4_EnableShadowTransfer:00000000 $t
    {standard input}:171    .text.XMC_CCU4_EnableShadowTransfer:00000000 XMC_CCU4_EnableShadowTransfer
    {standard input}:214    .bss.pwmWrite:00000000 $d
    {standard input}:217    .bss.pwmWrite:00000000 pwmWrite
    {standard input}:220    .bss.motors:00000000 $d
    {standard input}:223    .bss.motors:00000000 motors
    {standard input}:226    .bss.pwmCompleteWrite:00000000 $d
    {standard input}:229    .bss.pwmCompleteWrite:00000000 pwmCompleteWrite
    {standard input}:232    .bss.servos:00000000 $d
    {standard input}:235    .bss.servos:00000000 servos
    {standard input}:240    .bss.pwmMotorsEnabled:00000000 pwmMotorsEnabled
    {standard input}:241    .bss.pwmMotorsEnabled:00000000 $d
    {standard input}:245    .bss.isDshot:00000000 isDshot
    {standard input}:246    .bss.isDshot:00000000 $d
    {standard input}:251    .bss.useBurstDshot:00000000 useBurstDshot
    {standard input}:252    .bss.useBurstDshot:00000000 $d
    {standard input}:254    .text.pwmOCConfig:00000000 $t
    {standard input}:258    .text.pwmOCConfig:00000000 pwmOCConfig
    {standard input}:332    .text.pwmOutConfig:00000000 $t
    {standard input}:337    .text.pwmOutConfig:00000000 pwmOutConfig
    {standard input}:439    .text.pwmWriteUnused:00000000 $t
    {standard input}:443    .text.pwmWriteUnused:00000000 pwmWriteUnused
    {standard input}:480    .text.pwmWriteStandard:00000000 $t
    {standard input}:484    .text.pwmWriteStandard:00000000 pwmWriteStandard
    {standard input}:547    .text.pwmWriteStandard:00000060 $d
    {standard input}:552    .text.pwmWriteMotor:00000000 $t
    {standard input}:557    .text.pwmWriteMotor:00000000 pwmWriteMotor
    {standard input}:596    .text.pwmWriteMotor:00000020 $d
    {standard input}:601    .text.pwmShutdownPulsesForAllMotors:00000000 $t
    {standard input}:606    .text.pwmShutdownPulsesForAllMotors:00000000 pwmShutdownPulsesForAllMotors
    {standard input}:677    .text.pwmShutdownPulsesForAllMotors:0000004c $d
    {standard input}:682    .text.pwmDisableMotors:00000000 $t
    {standard input}:687    .text.pwmDisableMotors:00000000 pwmDisableMotors
    {standard input}:713    .text.pwmDisableMotors:00000014 $d
    {standard input}:718    .text.pwmEnableMotors:00000000 $t
    {standard input}:723    .text.pwmEnableMotors:00000000 pwmEnableMotors
    {standard input}:761    .text.pwmEnableMotors:00000020 $d
    {standard input}:768    .text.pwmAreMotorsEnabled:00000000 $t
    {standard input}:773    .text.pwmAreMotorsEnabled:00000000 pwmAreMotorsEnabled
    {standard input}:804    .text.pwmAreMotorsEnabled:00000014 $d
    {standard input}:809    .text.pwmCompleteWriteUnused:00000000 $t
    {standard input}:813    .text.pwmCompleteWriteUnused:00000000 pwmCompleteWriteUnused
    {standard input}:849    .text.pwmCompleteXMCMotorUpdate:00000000 $t
    {standard input}:853    .text.pwmCompleteXMCMotorUpdate:00000000 pwmCompleteXMCMotorUpdate
    {standard input}:927    .text.pwmCompleteXMCMotorUpdate:00000060 $d
    {standard input}:932    .text.pwmCompleteOneshotMotorUpdate:00000000 $t
    {standard input}:936    .text.pwmCompleteOneshotMotorUpdate:00000000 pwmCompleteOneshotMotorUpdate
    {standard input}:1021   .text.pwmCompleteOneshotMotorUpdate:00000070 $d
    {standard input}:1026   .text.pwmCompleteMotorUpdate:00000000 $t
    {standard input}:1031   .text.pwmCompleteMotorUpdate:00000000 pwmCompleteMotorUpdate
    {standard input}:1068   .text.pwmCompleteMotorUpdate:0000001c $d
    {standard input}:1073   .text.motorDevInit:00000000 $t
    {standard input}:1078   .text.motorDevInit:00000000 motorDevInit
    {standard input}:1129   .text.motorDevInit:00000044 $d
    {standard input}:1134   .text.motorDevInit:00000058 $t
    {standard input}:1470   .text.motorDevInit:000002dc $d
    {standard input}:1487   .text.motorDevInit:00000318 $t
    {standard input}:1560   .text.motorDevInit:00000388 $d
    {standard input}:1566   .text.pwmGetMotors:00000000 $t
    {standard input}:1571   .text.pwmGetMotors:00000000 pwmGetMotors
    {standard input}:1601   .text.pwmGetMotors:00000010 $d
    {standard input}:1606   .text.isMotorProtocolDshot:00000000 $t
    {standard input}:1611   .text.isMotorProtocolDshot:00000000 isMotorProtocolDshot
    {standard input}:1642   .text.isMotorProtocolDshot:00000014 $d
    {standard input}:1647   .text.pwmWriteServo:00000000 $t
    {standard input}:1652   .text.pwmWriteServo:00000000 pwmWriteServo
    {standard input}:1710   .text.pwmWriteServo:00000044 $d
    {standard input}:1715   .text.servoDevInit:00000000 $t
    {standard input}:1720   .text.servoDevInit:00000000 servoDevInit
    {standard input}:1866   .text.servoDevInit:000000e4 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_CCU4_SLICE_SetPassiveLevel
configTimeBase
timerChCCR
lrintf
timerForceOverflow
memset
timerGetByTag
IOGetByTag
IOInit
IOConfigGPIOAF
ceilf
timerClock
IOConfigGPIO
