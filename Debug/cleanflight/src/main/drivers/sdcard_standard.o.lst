   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "sdcard_standard.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.readBitfield,"ax",%progbits
  20              	 .align 2
  21              	 .global readBitfield
  22              	 .thumb
  23              	 .thumb_func
  25              	readBitfield:
  26              	.LFB2:
  27              	 .file 1 "../cleanflight/src/main/drivers/sdcard_standard.c"
   1:../cleanflight/src/main/drivers/sdcard_standard.c **** /*
   2:../cleanflight/src/main/drivers/sdcard_standard.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/drivers/sdcard_standard.c ****  *
   4:../cleanflight/src/main/drivers/sdcard_standard.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/drivers/sdcard_standard.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/drivers/sdcard_standard.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/drivers/sdcard_standard.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/drivers/sdcard_standard.c ****  * any later version.
   9:../cleanflight/src/main/drivers/sdcard_standard.c ****  *
  10:../cleanflight/src/main/drivers/sdcard_standard.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/drivers/sdcard_standard.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/drivers/sdcard_standard.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/drivers/sdcard_standard.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/drivers/sdcard_standard.c ****  *
  15:../cleanflight/src/main/drivers/sdcard_standard.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/drivers/sdcard_standard.c ****  * along with this software.
  17:../cleanflight/src/main/drivers/sdcard_standard.c ****  *
  18:../cleanflight/src/main/drivers/sdcard_standard.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/drivers/sdcard_standard.c ****  */
  20:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  21:../cleanflight/src/main/drivers/sdcard_standard.c **** #include <stdint.h>
  22:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  23:../cleanflight/src/main/drivers/sdcard_standard.c **** #include "sdcard_standard.h"
  24:../cleanflight/src/main/drivers/sdcard_standard.c **** #include "common/maths.h"
  25:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  26:../cleanflight/src/main/drivers/sdcard_standard.c **** /**
  27:../cleanflight/src/main/drivers/sdcard_standard.c ****  * Read a bitfield from an array of bits (the bit at index 0 being the most-significant bit of the 
  28:../cleanflight/src/main/drivers/sdcard_standard.c ****  * the buffer).
  29:../cleanflight/src/main/drivers/sdcard_standard.c ****  */
  30:../cleanflight/src/main/drivers/sdcard_standard.c **** uint32_t readBitfield(uint8_t *buffer, unsigned bitIndex, unsigned bitLen)
  31:../cleanflight/src/main/drivers/sdcard_standard.c **** {
  28              	 .loc 1 31 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 8BB0     	 sub sp,sp,#44
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 48
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
  32:../cleanflight/src/main/drivers/sdcard_standard.c ****     uint32_t result = 0;
  46              	 .loc 1 32 0
  47 000c 0023     	 movs r3,#0
  48 000e 7B62     	 str r3,[r7,#36]
  33:../cleanflight/src/main/drivers/sdcard_standard.c ****     unsigned bitInByteOffset = bitIndex % 8;
  49              	 .loc 1 33 0
  50 0010 BB68     	 ldr r3,[r7,#8]
  51 0012 03F00703 	 and r3,r3,#7
  52 0016 3B62     	 str r3,[r7,#32]
  34:../cleanflight/src/main/drivers/sdcard_standard.c ****     uint8_t bufferByte;
  35:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  36:../cleanflight/src/main/drivers/sdcard_standard.c ****     buffer += bitIndex / 8;
  53              	 .loc 1 36 0
  54 0018 BB68     	 ldr r3,[r7,#8]
  55 001a DB08     	 lsrs r3,r3,#3
  56 001c FA68     	 ldr r2,[r7,#12]
  57 001e 1344     	 add r3,r3,r2
  58 0020 FB60     	 str r3,[r7,#12]
  37:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  38:../cleanflight/src/main/drivers/sdcard_standard.c ****     // Align the bitfield to be read to the top of the buffer
  39:../cleanflight/src/main/drivers/sdcard_standard.c ****     bufferByte = *buffer << bitInByteOffset;
  59              	 .loc 1 39 0
  60 0022 FB68     	 ldr r3,[r7,#12]
  61 0024 1B78     	 ldrb r3,[r3]
  62 0026 1A46     	 mov r2,r3
  63 0028 3B6A     	 ldr r3,[r7,#32]
  64 002a 02FA03F3 	 lsl r3,r2,r3
  65 002e FB77     	 strb r3,[r7,#31]
  40:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  41:../cleanflight/src/main/drivers/sdcard_standard.c ****     while (bitLen > 0) {
  66              	 .loc 1 41 0
  67 0030 22E0     	 b .L2
  68              	.L3:
  69              	.LBB2:
  70              	.LBB3:
  42:../cleanflight/src/main/drivers/sdcard_standard.c ****         unsigned bitsThisLoop = MIN(8 - bitInByteOffset, bitLen);
  71              	 .loc 1 42 0
  72 0032 3B6A     	 ldr r3,[r7,#32]
  73 0034 C3F10803 	 rsb r3,r3,#8
  74 0038 BB61     	 str r3,[r7,#24]
  75 003a 7B68     	 ldr r3,[r7,#4]
  76 003c 7B61     	 str r3,[r7,#20]
  77 003e 7A69     	 ldr r2,[r7,#20]
  78 0040 BB69     	 ldr r3,[r7,#24]
  79 0042 9342     	 cmp r3,r2
  80 0044 28BF     	 it cs
  81 0046 1346     	 movcs r3,r2
  82              	.LBE3:
  83 0048 3B61     	 str r3,[r7,#16]
  43:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  44:../cleanflight/src/main/drivers/sdcard_standard.c ****         result = (result << bitsThisLoop) | (bufferByte >> (8 - bitsThisLoop));
  84              	 .loc 1 44 0
  85 004a 3B69     	 ldr r3,[r7,#16]
  86 004c 7A6A     	 ldr r2,[r7,#36]
  87 004e 02FA03F3 	 lsl r3,r2,r3
  88 0052 FA7F     	 ldrb r2,[r7,#31]
  89 0054 3969     	 ldr r1,[r7,#16]
  90 0056 C1F10801 	 rsb r1,r1,#8
  91 005a 0A41     	 asrs r2,r2,r1
  92 005c 1343     	 orrs r3,r3,r2
  93 005e 7B62     	 str r3,[r7,#36]
  45:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  46:../cleanflight/src/main/drivers/sdcard_standard.c ****         buffer++;
  94              	 .loc 1 46 0
  95 0060 FB68     	 ldr r3,[r7,#12]
  96 0062 0133     	 adds r3,r3,#1
  97 0064 FB60     	 str r3,[r7,#12]
  47:../cleanflight/src/main/drivers/sdcard_standard.c ****         bufferByte = *buffer;
  98              	 .loc 1 47 0
  99 0066 FB68     	 ldr r3,[r7,#12]
 100 0068 1B78     	 ldrb r3,[r3]
 101 006a FB77     	 strb r3,[r7,#31]
  48:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  49:../cleanflight/src/main/drivers/sdcard_standard.c ****         bitLen -= bitsThisLoop;
 102              	 .loc 1 49 0
 103 006c 7A68     	 ldr r2,[r7,#4]
 104 006e 3B69     	 ldr r3,[r7,#16]
 105 0070 D31A     	 subs r3,r2,r3
 106 0072 7B60     	 str r3,[r7,#4]
  50:../cleanflight/src/main/drivers/sdcard_standard.c ****         bitInByteOffset = 0;
 107              	 .loc 1 50 0
 108 0074 0023     	 movs r3,#0
 109 0076 3B62     	 str r3,[r7,#32]
 110              	.L2:
 111              	.LBE2:
  41:../cleanflight/src/main/drivers/sdcard_standard.c ****         unsigned bitsThisLoop = MIN(8 - bitInByteOffset, bitLen);
 112              	 .loc 1 41 0
 113 0078 7B68     	 ldr r3,[r7,#4]
 114 007a 002B     	 cmp r3,#0
 115 007c D9D1     	 bne .L3
  51:../cleanflight/src/main/drivers/sdcard_standard.c ****     }
  52:../cleanflight/src/main/drivers/sdcard_standard.c **** 
  53:../cleanflight/src/main/drivers/sdcard_standard.c ****     return result;
 116              	 .loc 1 53 0
 117 007e 7B6A     	 ldr r3,[r7,#36]
  54:../cleanflight/src/main/drivers/sdcard_standard.c **** }
 118              	 .loc 1 54 0
 119 0080 1846     	 mov r0,r3
 120 0082 2C37     	 adds r7,r7,#44
 121              	.LCFI3:
 122              	 .cfi_def_cfa_offset 4
 123 0084 BD46     	 mov sp,r7
 124              	.LCFI4:
 125              	 .cfi_def_cfa_register 13
 126              	 
 127 0086 5DF8047B 	 ldr r7,[sp],#4
 128              	.LCFI5:
 129              	 .cfi_restore 7
 130              	 .cfi_def_cfa_offset 0
 131 008a 7047     	 bx lr
 132              	 .cfi_endproc
 133              	.LFE2:
 135              	 .text
 136              	.Letext0:
 137              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 138              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sdcard_standard.c
    {standard input}:20     .text.readBitfield:00000000 $t
    {standard input}:25     .text.readBitfield:00000000 readBitfield
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
