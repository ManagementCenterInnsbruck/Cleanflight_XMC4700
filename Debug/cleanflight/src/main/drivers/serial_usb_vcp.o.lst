   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "serial_usb_vcp.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.vcpPort,"aw",%nobits
  20              	 .align 2
  23              	vcpPort:
  24 0000 00000000 	 .space 73
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25 0049 000000   	 .section .text.usbVcpSetBaudRate,"ax",%progbits
  26              	 .align 2
  27              	 .thumb
  28              	 .thumb_func
  30              	usbVcpSetBaudRate:
  31              	.LFB547:
  32              	 .file 1 "../cleanflight/src/main/drivers/serial_usb_vcp.c"
   1:../cleanflight/src/main/drivers/serial_usb_vcp.c **** /*
   2:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  *
   4:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * any later version.
   9:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  *
  10:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  *
  15:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * along with this software.
  17:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  *
  18:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/drivers/serial_usb_vcp.c ****  */
  20:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  21:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include <stdint.h>
  22:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include <stdbool.h>
  23:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  24:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "platform.h"
  25:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  26:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef USE_VCP
  27:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  28:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "build/build_config.h"
  29:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  30:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "common/utils.h"
  31:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  32:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "drivers/io.h"
  33:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  34:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #if defined(STM32F4)
  35:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "usb_core.h"
  36:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "usbd_cdc_vcp.h"
  37:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef USE_USB_CDC_HID
  38:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "usbd_hid_cdc_wrapper.h"
  39:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "pg/pg.h"
  40:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "pg/usb.h"
  41:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
  42:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "usb_io.h"
  43:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #elif defined(STM32F7)
  44:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "vcp_hal/usbd_cdc_interface.h"
  45:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "usb_io.h"
  46:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef USE_USB_CDC_HID
  47:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "usbd_cdc_hid.h"
  48:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "pg/pg.h"
  49:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "pg/usb.h"
  50:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
  51:../cleanflight/src/main/drivers/serial_usb_vcp.c **** USBD_HandleTypeDef USBD_Device;
  52:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #elif defined(XMC4700_F100x2048)
  53:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "usbd_vcom.h"
  54:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #else
  55:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "usb_core.h"
  56:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "usb_init.h"
  57:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "hw_config.h"
  58:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
  59:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  60:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "drivers/time.h"
  61:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  62:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "serial.h"
  63:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #include "serial_usb_vcp.h"
  64:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  65:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  66:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #define USB_TIMEOUT  50
  67:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  68:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static vcpPort_t vcpPort;
  69:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  70:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static void usbVcpSetBaudRate(serialPort_t *instance, uint32_t baudRate)
  71:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
  33              	 .loc 1 71 0
  34              	 .cfi_startproc
  35              	 
  36              	 
  37              	 
  38 0000 80B4     	 push {r7}
  39              	.LCFI0:
  40              	 .cfi_def_cfa_offset 4
  41              	 .cfi_offset 7,-4
  42 0002 83B0     	 sub sp,sp,#12
  43              	.LCFI1:
  44              	 .cfi_def_cfa_offset 16
  45 0004 00AF     	 add r7,sp,#0
  46              	.LCFI2:
  47              	 .cfi_def_cfa_register 7
  48 0006 7860     	 str r0,[r7,#4]
  49 0008 3960     	 str r1,[r7]
  72:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
  73:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(baudRate);
  74:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  75:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     // TODO implement
  76:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
  50              	 .loc 1 76 0
  51 000a 0C37     	 adds r7,r7,#12
  52              	.LCFI3:
  53              	 .cfi_def_cfa_offset 4
  54 000c BD46     	 mov sp,r7
  55              	.LCFI4:
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 000e 5DF8047B 	 ldr r7,[sp],#4
  59              	.LCFI5:
  60              	 .cfi_restore 7
  61              	 .cfi_def_cfa_offset 0
  62 0012 7047     	 bx lr
  63              	 .cfi_endproc
  64              	.LFE547:
  66              	 .section .text.usbVcpSetMode,"ax",%progbits
  67              	 .align 2
  68              	 .thumb
  69              	 .thumb_func
  71              	usbVcpSetMode:
  72              	.LFB548:
  77:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  78:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static void usbVcpSetMode(serialPort_t *instance, portMode_e mode)
  79:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
  73              	 .loc 1 79 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77              	 
  78 0000 80B4     	 push {r7}
  79              	.LCFI6:
  80              	 .cfi_def_cfa_offset 4
  81              	 .cfi_offset 7,-4
  82 0002 83B0     	 sub sp,sp,#12
  83              	.LCFI7:
  84              	 .cfi_def_cfa_offset 16
  85 0004 00AF     	 add r7,sp,#0
  86              	.LCFI8:
  87              	 .cfi_def_cfa_register 7
  88 0006 7860     	 str r0,[r7,#4]
  89 0008 0B46     	 mov r3,r1
  90 000a FB70     	 strb r3,[r7,#3]
  80:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
  81:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(mode);
  82:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  83:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     // TODO implement
  84:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
  91              	 .loc 1 84 0
  92 000c 0C37     	 adds r7,r7,#12
  93              	.LCFI9:
  94              	 .cfi_def_cfa_offset 4
  95 000e BD46     	 mov sp,r7
  96              	.LCFI10:
  97              	 .cfi_def_cfa_register 13
  98              	 
  99 0010 5DF8047B 	 ldr r7,[sp],#4
 100              	.LCFI11:
 101              	 .cfi_restore 7
 102              	 .cfi_def_cfa_offset 0
 103 0014 7047     	 bx lr
 104              	 .cfi_endproc
 105              	.LFE548:
 107 0016 00BF     	 .section .text.usbVcpSetCtrlLineStateCb,"ax",%progbits
 108              	 .align 2
 109              	 .thumb
 110              	 .thumb_func
 112              	usbVcpSetCtrlLineStateCb:
 113              	.LFB549:
  85:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  86:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static void usbVcpSetCtrlLineStateCb(serialPort_t *instance, void (*cb)(void *context, uint16_t ctr
  87:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 114              	 .loc 1 87 0
 115              	 .cfi_startproc
 116              	 
 117              	 
 118              	 
 119 0000 80B4     	 push {r7}
 120              	.LCFI12:
 121              	 .cfi_def_cfa_offset 4
 122              	 .cfi_offset 7,-4
 123 0002 85B0     	 sub sp,sp,#20
 124              	.LCFI13:
 125              	 .cfi_def_cfa_offset 24
 126 0004 00AF     	 add r7,sp,#0
 127              	.LCFI14:
 128              	 .cfi_def_cfa_register 7
 129 0006 F860     	 str r0,[r7,#12]
 130 0008 B960     	 str r1,[r7,#8]
 131 000a 7A60     	 str r2,[r7,#4]
  88:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
  89:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  90:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifndef XMC4700_F100x2048
  91:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     // Register upper driver control line state callback routine with USB driver
  92:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     CDC_SetCtrlLineStateCb((void (*)(void *context, uint16_t ctrlLineState))cb, context);
  93:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
  94:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 132              	 .loc 1 94 0
 133 000c 1437     	 adds r7,r7,#20
 134              	.LCFI15:
 135              	 .cfi_def_cfa_offset 4
 136 000e BD46     	 mov sp,r7
 137              	.LCFI16:
 138              	 .cfi_def_cfa_register 13
 139              	 
 140 0010 5DF8047B 	 ldr r7,[sp],#4
 141              	.LCFI17:
 142              	 .cfi_restore 7
 143              	 .cfi_def_cfa_offset 0
 144 0014 7047     	 bx lr
 145              	 .cfi_endproc
 146              	.LFE549:
 148 0016 00BF     	 .section .text.usbVcpSetBaudRateCb,"ax",%progbits
 149              	 .align 2
 150              	 .thumb
 151              	 .thumb_func
 153              	usbVcpSetBaudRateCb:
 154              	.LFB550:
  95:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
  96:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static void usbVcpSetBaudRateCb(serialPort_t *instance, void (*cb)(serialPort_t *context, uint32_t 
  97:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 155              	 .loc 1 97 0
 156              	 .cfi_startproc
 157              	 
 158              	 
 159              	 
 160 0000 80B4     	 push {r7}
 161              	.LCFI18:
 162              	 .cfi_def_cfa_offset 4
 163              	 .cfi_offset 7,-4
 164 0002 85B0     	 sub sp,sp,#20
 165              	.LCFI19:
 166              	 .cfi_def_cfa_offset 24
 167 0004 00AF     	 add r7,sp,#0
 168              	.LCFI20:
 169              	 .cfi_def_cfa_register 7
 170 0006 F860     	 str r0,[r7,#12]
 171 0008 B960     	 str r1,[r7,#8]
 172 000a 7A60     	 str r2,[r7,#4]
  98:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
  99:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 100:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifndef XMC4700_F100x2048
 101:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     // Register upper driver baud rate callback routine with USB driver
 102:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     CDC_SetBaudRateCb((void (*)(void *context, uint32_t baud))cb, (void *)context);
 103:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 104:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 173              	 .loc 1 104 0
 174 000c 1437     	 adds r7,r7,#20
 175              	.LCFI21:
 176              	 .cfi_def_cfa_offset 4
 177 000e BD46     	 mov sp,r7
 178              	.LCFI22:
 179              	 .cfi_def_cfa_register 13
 180              	 
 181 0010 5DF8047B 	 ldr r7,[sp],#4
 182              	.LCFI23:
 183              	 .cfi_restore 7
 184              	 .cfi_def_cfa_offset 0
 185 0014 7047     	 bx lr
 186              	 .cfi_endproc
 187              	.LFE550:
 189 0016 00BF     	 .section .text.isUsbVcpTransmitBufferEmpty,"ax",%progbits
 190              	 .align 2
 191              	 .thumb
 192              	 .thumb_func
 194              	isUsbVcpTransmitBufferEmpty:
 195              	.LFB551:
 105:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 106:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static bool isUsbVcpTransmitBufferEmpty(const serialPort_t *instance)
 107:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 196              	 .loc 1 107 0
 197              	 .cfi_startproc
 198              	 
 199              	 
 200              	 
 201 0000 80B4     	 push {r7}
 202              	.LCFI24:
 203              	 .cfi_def_cfa_offset 4
 204              	 .cfi_offset 7,-4
 205 0002 83B0     	 sub sp,sp,#12
 206              	.LCFI25:
 207              	 .cfi_def_cfa_offset 16
 208 0004 00AF     	 add r7,sp,#0
 209              	.LCFI26:
 210              	 .cfi_def_cfa_register 7
 211 0006 7860     	 str r0,[r7,#4]
 108:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
 109:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return true;
 212              	 .loc 1 109 0
 213 0008 0123     	 movs r3,#1
 110:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 214              	 .loc 1 110 0
 215 000a 1846     	 mov r0,r3
 216 000c 0C37     	 adds r7,r7,#12
 217              	.LCFI27:
 218              	 .cfi_def_cfa_offset 4
 219 000e BD46     	 mov sp,r7
 220              	.LCFI28:
 221              	 .cfi_def_cfa_register 13
 222              	 
 223 0010 5DF8047B 	 ldr r7,[sp],#4
 224              	.LCFI29:
 225              	 .cfi_restore 7
 226              	 .cfi_def_cfa_offset 0
 227 0014 7047     	 bx lr
 228              	 .cfi_endproc
 229              	.LFE551:
 231 0016 00BF     	 .section .text.usbVcpAvailable,"ax",%progbits
 232              	 .align 2
 233              	 .thumb
 234              	 .thumb_func
 236              	usbVcpAvailable:
 237              	.LFB552:
 111:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 112:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static uint32_t usbVcpAvailable(const serialPort_t *instance)
 113:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 238              	 .loc 1 113 0
 239              	 .cfi_startproc
 240              	 
 241              	 
 242 0000 80B5     	 push {r7,lr}
 243              	.LCFI30:
 244              	 .cfi_def_cfa_offset 8
 245              	 .cfi_offset 7,-8
 246              	 .cfi_offset 14,-4
 247 0002 82B0     	 sub sp,sp,#8
 248              	.LCFI31:
 249              	 .cfi_def_cfa_offset 16
 250 0004 00AF     	 add r7,sp,#0
 251              	.LCFI32:
 252              	 .cfi_def_cfa_register 7
 253 0006 7860     	 str r0,[r7,#4]
 114:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
 115:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 116:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef XMC4700_F100x2048
 117:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 254              	 .loc 1 117 0
 255 0008 0448     	 ldr r0,.L9
 256 000a FFF7FEFF 	 bl CDC_Device_USBTask
 118:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 119:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return USBD_VCOM_BytesReceived();
 257              	 .loc 1 119 0
 258 000e FFF7FEFF 	 bl USBD_VCOM_BytesReceived
 259 0012 0346     	 mov r3,r0
 120:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #else
 121:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return CDC_Receive_BytesAvailable();
 122:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 123:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 260              	 .loc 1 123 0
 261 0014 1846     	 mov r0,r3
 262 0016 0837     	 adds r7,r7,#8
 263              	.LCFI33:
 264              	 .cfi_def_cfa_offset 8
 265 0018 BD46     	 mov sp,r7
 266              	.LCFI34:
 267              	 .cfi_def_cfa_register 13
 268              	 
 269 001a 80BD     	 pop {r7,pc}
 270              	.L10:
 271              	 .align 2
 272              	.L9:
 273 001c 00000000 	 .word USBD_VCOM_cdc_interface
 274              	 .cfi_endproc
 275              	.LFE552:
 277              	 .section .text.usbVcpRead,"ax",%progbits
 278              	 .align 2
 279              	 .thumb
 280              	 .thumb_func
 282              	usbVcpRead:
 283              	.LFB553:
 124:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 125:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static uint8_t usbVcpRead(serialPort_t *instance)
 126:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 284              	 .loc 1 126 0
 285              	 .cfi_startproc
 286              	 
 287              	 
 288 0000 80B5     	 push {r7,lr}
 289              	.LCFI35:
 290              	 .cfi_def_cfa_offset 8
 291              	 .cfi_offset 7,-8
 292              	 .cfi_offset 14,-4
 293 0002 84B0     	 sub sp,sp,#16
 294              	.LCFI36:
 295              	 .cfi_def_cfa_offset 24
 296 0004 00AF     	 add r7,sp,#0
 297              	.LCFI37:
 298              	 .cfi_def_cfa_register 7
 299 0006 7860     	 str r0,[r7,#4]
 127:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
 128:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 129:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     uint8_t buf[1];
 130:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 131:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef XMC4700_F100x2048
 132:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USBD_VCOM_ReceiveByte((int8_t*)buf);
 300              	 .loc 1 132 0
 301 0008 07F10C03 	 add r3,r7,#12
 302 000c 1846     	 mov r0,r3
 303 000e FFF7FEFF 	 bl USBD_VCOM_ReceiveByte
 133:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     CDC_Device_USBTask(&USBD_VCOM_cdc_interface);
 304              	 .loc 1 133 0
 305 0012 0448     	 ldr r0,.L13
 306 0014 FFF7FEFF 	 bl CDC_Device_USBTask
 134:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return buf[0];
 307              	 .loc 1 134 0
 308 0018 3B7B     	 ldrb r3,[r7,#12]
 135:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #else
 136:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     while (true) {
 137:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         if (CDC_Receive_DATA(buf, 1))
 138:../cleanflight/src/main/drivers/serial_usb_vcp.c ****             return buf[0];
 139:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 140:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 141:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 309              	 .loc 1 141 0
 310 001a 1846     	 mov r0,r3
 311 001c 1037     	 adds r7,r7,#16
 312              	.LCFI38:
 313              	 .cfi_def_cfa_offset 8
 314 001e BD46     	 mov sp,r7
 315              	.LCFI39:
 316              	 .cfi_def_cfa_register 13
 317              	 
 318 0020 80BD     	 pop {r7,pc}
 319              	.L14:
 320 0022 00BF     	 .align 2
 321              	.L13:
 322 0024 00000000 	 .word USBD_VCOM_cdc_interface
 323              	 .cfi_endproc
 324              	.LFE553:
 326              	 .section .text.usbVcpWriteBuf,"ax",%progbits
 327              	 .align 2
 328              	 .thumb
 329              	 .thumb_func
 331              	usbVcpWriteBuf:
 332              	.LFB554:
 142:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 143:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static void usbVcpWriteBuf(serialPort_t *instance, const void *data, int count)
 144:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 333              	 .loc 1 144 0
 334              	 .cfi_startproc
 335              	 
 336              	 
 337 0000 80B5     	 push {r7,lr}
 338              	.LCFI40:
 339              	 .cfi_def_cfa_offset 8
 340              	 .cfi_offset 7,-8
 341              	 .cfi_offset 14,-4
 342 0002 84B0     	 sub sp,sp,#16
 343              	.LCFI41:
 344              	 .cfi_def_cfa_offset 24
 345 0004 00AF     	 add r7,sp,#0
 346              	.LCFI42:
 347              	 .cfi_def_cfa_register 7
 348 0006 F860     	 str r0,[r7,#12]
 349 0008 B960     	 str r1,[r7,#8]
 350 000a 7A60     	 str r2,[r7,#4]
 145:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
 146:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 147:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef XMC4700_F100x2048
 148:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     if (!(xmc_device.IsConnected && xmc_device.IsPowered))
 351              	 .loc 1 148 0
 352 000c 0C4B     	 ldr r3,.L19
 353 000e 93F8CE31 	 ldrb r3,[r3,#462]
 354 0012 03F00103 	 and r3,r3,#1
 355 0016 DBB2     	 uxtb r3,r3
 356 0018 002B     	 cmp r3,#0
 357 001a 07D0     	 beq .L16
 358              	 .loc 1 148 0 is_stmt 0 discriminator 1
 359 001c 084B     	 ldr r3,.L19
 360 001e 93F8CE31 	 ldrb r3,[r3,#462]
 361 0022 03F00403 	 and r3,r3,#4
 362 0026 DBB2     	 uxtb r3,r3
 363 0028 002B     	 cmp r3,#0
 364 002a 00D1     	 bne .L17
 365              	.L16:
 149:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     	return;
 366              	 .loc 1 149 0 is_stmt 1
 367 002c 05E0     	 b .L15
 368              	.L17:
 150:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 151:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USBD_VCOM_SendData(data, count);
 369              	 .loc 1 151 0
 370 002e 7B68     	 ldr r3,[r7,#4]
 371 0030 9BB2     	 uxth r3,r3
 372 0032 B868     	 ldr r0,[r7,#8]
 373 0034 1946     	 mov r1,r3
 374 0036 FFF7FEFF 	 bl USBD_VCOM_SendData
 375              	.L15:
 152:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #else
 153:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     if (!(usbIsConnected() && usbIsConfigured())) {
 154:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         return;
 155:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 156:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 157:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     uint32_t start = millis();
 158:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     const uint8_t *p = data;
 159:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     while (count > 0) {
 160:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         uint32_t txed = CDC_Send_DATA(p, count);
 161:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         count -= txed;
 162:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         p += txed;
 163:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 164:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         if (millis() - start > USB_TIMEOUT) {
 165:../cleanflight/src/main/drivers/serial_usb_vcp.c ****             break;
 166:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         }
 167:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 168:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 169:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 376              	 .loc 1 169 0
 377 003a 1037     	 adds r7,r7,#16
 378              	.LCFI43:
 379              	 .cfi_def_cfa_offset 8
 380 003c BD46     	 mov sp,r7
 381              	.LCFI44:
 382              	 .cfi_def_cfa_register 13
 383              	 
 384 003e 80BD     	 pop {r7,pc}
 385              	.L20:
 386              	 .align 2
 387              	.L19:
 388 0040 00000000 	 .word xmc_device
 389              	 .cfi_endproc
 390              	.LFE554:
 392              	 .section .text.usbVcpFlush,"ax",%progbits
 393              	 .align 2
 394              	 .thumb
 395              	 .thumb_func
 397              	usbVcpFlush:
 398              	.LFB555:
 170:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 171:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static bool usbVcpFlush(vcpPort_t *port)
 172:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 399              	 .loc 1 172 0
 400              	 .cfi_startproc
 401              	 
 402              	 
 403 0000 80B5     	 push {r7,lr}
 404              	.LCFI45:
 405              	 .cfi_def_cfa_offset 8
 406              	 .cfi_offset 7,-8
 407              	 .cfi_offset 14,-4
 408 0002 84B0     	 sub sp,sp,#16
 409              	.LCFI46:
 410              	 .cfi_def_cfa_offset 24
 411 0004 00AF     	 add r7,sp,#0
 412              	.LCFI47:
 413              	 .cfi_def_cfa_register 7
 414 0006 7860     	 str r0,[r7,#4]
 173:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     uint32_t count = port->txAt;
 415              	 .loc 1 173 0
 416 0008 7B68     	 ldr r3,[r7,#4]
 417 000a 93F84730 	 ldrb r3,[r3,#71]
 418 000e FB60     	 str r3,[r7,#12]
 174:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     port->txAt = 0;
 419              	 .loc 1 174 0
 420 0010 7B68     	 ldr r3,[r7,#4]
 421 0012 0022     	 movs r2,#0
 422 0014 83F84720 	 strb r2,[r3,#71]
 175:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 176:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     if (count == 0) {
 423              	 .loc 1 176 0
 424 0018 FB68     	 ldr r3,[r7,#12]
 425 001a 002B     	 cmp r3,#0
 426 001c 01D1     	 bne .L22
 177:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         return true;
 427              	 .loc 1 177 0
 428 001e 0123     	 movs r3,#1
 429 0020 20E0     	 b .L23
 430              	.L22:
 178:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 179:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 180:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef XMC4700_F100x2048
 181:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     if (!(xmc_device.IsConnected && xmc_device.IsPowered))
 431              	 .loc 1 181 0
 432 0022 124B     	 ldr r3,.L26
 433 0024 93F8CE31 	 ldrb r3,[r3,#462]
 434 0028 03F00103 	 and r3,r3,#1
 435 002c DBB2     	 uxtb r3,r3
 436 002e 002B     	 cmp r3,#0
 437 0030 07D0     	 beq .L24
 438              	 .loc 1 181 0 is_stmt 0 discriminator 1
 439 0032 0E4B     	 ldr r3,.L26
 440 0034 93F8CE31 	 ldrb r3,[r3,#462]
 441 0038 03F00403 	 and r3,r3,#4
 442 003c DBB2     	 uxtb r3,r3
 443 003e 002B     	 cmp r3,#0
 444 0040 01D1     	 bne .L25
 445              	.L24:
 182:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     	return false;
 446              	 .loc 1 182 0 is_stmt 1
 447 0042 0023     	 movs r3,#0
 448 0044 0EE0     	 b .L23
 449              	.L25:
 183:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 184:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USBD_VCOM_SendData((int8_t*)port->txBuf, count);
 450              	 .loc 1 184 0
 451 0046 7B68     	 ldr r3,[r7,#4]
 452 0048 03F13302 	 add r2,r3,#51
 453 004c FB68     	 ldr r3,[r7,#12]
 454 004e 9BB2     	 uxth r3,r3
 455 0050 1046     	 mov r0,r2
 456 0052 1946     	 mov r1,r3
 457 0054 FFF7FEFF 	 bl USBD_VCOM_SendData
 185:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 186:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #else
 187:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     if (!usbIsConnected() || !usbIsConfigured()) {
 188:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         return false;
 189:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 190:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 191:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     uint32_t start = millis();
 192:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     uint8_t *p = port->txBuf;
 193:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     while (count > 0) {
 194:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         uint32_t txed = CDC_Send_DATA(p, count);
 195:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         count -= txed;
 196:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         p += txed;
 197:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 198:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         if (millis() - start > USB_TIMEOUT) {
 199:../cleanflight/src/main/drivers/serial_usb_vcp.c ****             break;
 200:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         }
 201:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 202:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 203:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return count == 0;
 458              	 .loc 1 203 0
 459 0058 FB68     	 ldr r3,[r7,#12]
 460 005a 002B     	 cmp r3,#0
 461 005c 0CBF     	 ite eq
 462 005e 0123     	 moveq r3,#1
 463 0060 0023     	 movne r3,#0
 464 0062 DBB2     	 uxtb r3,r3
 465              	.L23:
 204:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 466              	 .loc 1 204 0
 467 0064 1846     	 mov r0,r3
 468 0066 1037     	 adds r7,r7,#16
 469              	.LCFI48:
 470              	 .cfi_def_cfa_offset 8
 471 0068 BD46     	 mov sp,r7
 472              	.LCFI49:
 473              	 .cfi_def_cfa_register 13
 474              	 
 475 006a 80BD     	 pop {r7,pc}
 476              	.L27:
 477              	 .align 2
 478              	.L26:
 479 006c 00000000 	 .word xmc_device
 480              	 .cfi_endproc
 481              	.LFE555:
 483              	 .section .text.usbVcpWrite,"ax",%progbits
 484              	 .align 2
 485              	 .thumb
 486              	 .thumb_func
 488              	usbVcpWrite:
 489              	.LFB556:
 205:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 206:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static void usbVcpWrite(serialPort_t *instance, uint8_t c)
 207:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 490              	 .loc 1 207 0
 491              	 .cfi_startproc
 492              	 
 493              	 
 494 0000 80B5     	 push {r7,lr}
 495              	.LCFI50:
 496              	 .cfi_def_cfa_offset 8
 497              	 .cfi_offset 7,-8
 498              	 .cfi_offset 14,-4
 499 0002 84B0     	 sub sp,sp,#16
 500              	.LCFI51:
 501              	 .cfi_def_cfa_offset 24
 502 0004 00AF     	 add r7,sp,#0
 503              	.LCFI52:
 504              	 .cfi_def_cfa_register 7
 505 0006 7860     	 str r0,[r7,#4]
 506 0008 0B46     	 mov r3,r1
 507 000a FB70     	 strb r3,[r7,#3]
 508              	.LBB2:
 208:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     vcpPort_t *port = container_of(instance, vcpPort_t, port);
 509              	 .loc 1 208 0
 510 000c 7B68     	 ldr r3,[r7,#4]
 511 000e FB60     	 str r3,[r7,#12]
 512 0010 FB68     	 ldr r3,[r7,#12]
 513              	.LBE2:
 514 0012 BB60     	 str r3,[r7,#8]
 209:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 210:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     port->txBuf[port->txAt++] = c;
 515              	 .loc 1 210 0
 516 0014 BB68     	 ldr r3,[r7,#8]
 517 0016 93F84730 	 ldrb r3,[r3,#71]
 518 001a 5A1C     	 adds r2,r3,#1
 519 001c D1B2     	 uxtb r1,r2
 520 001e BA68     	 ldr r2,[r7,#8]
 521 0020 82F84710 	 strb r1,[r2,#71]
 522 0024 1A46     	 mov r2,r3
 523 0026 BB68     	 ldr r3,[r7,#8]
 524 0028 1344     	 add r3,r3,r2
 525 002a FA78     	 ldrb r2,[r7,#3]
 526 002c 83F83320 	 strb r2,[r3,#51]
 211:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     if (!port->buffering || port->txAt >= ARRAYLEN(port->txBuf)) {
 527              	 .loc 1 211 0
 528 0030 BB68     	 ldr r3,[r7,#8]
 529 0032 93F84830 	 ldrb r3,[r3,#72]
 530 0036 83F00103 	 eor r3,r3,#1
 531 003a DBB2     	 uxtb r3,r3
 532 003c 002B     	 cmp r3,#0
 533 003e 04D1     	 bne .L29
 534              	 .loc 1 211 0 is_stmt 0 discriminator 1
 535 0040 BB68     	 ldr r3,[r7,#8]
 536 0042 93F84730 	 ldrb r3,[r3,#71]
 537 0046 132B     	 cmp r3,#19
 538 0048 02D9     	 bls .L28
 539              	.L29:
 212:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         usbVcpFlush(port);
 540              	 .loc 1 212 0 is_stmt 1
 541 004a B868     	 ldr r0,[r7,#8]
 542 004c FFF7FEFF 	 bl usbVcpFlush
 543              	.L28:
 213:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 214:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 544              	 .loc 1 214 0
 545 0050 1037     	 adds r7,r7,#16
 546              	.LCFI53:
 547              	 .cfi_def_cfa_offset 8
 548 0052 BD46     	 mov sp,r7
 549              	.LCFI54:
 550              	 .cfi_def_cfa_register 13
 551              	 
 552 0054 80BD     	 pop {r7,pc}
 553              	 .cfi_endproc
 554              	.LFE556:
 556 0056 00BF     	 .section .text.usbVcpBeginWrite,"ax",%progbits
 557              	 .align 2
 558              	 .thumb
 559              	 .thumb_func
 561              	usbVcpBeginWrite:
 562              	.LFB557:
 215:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 216:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static void usbVcpBeginWrite(serialPort_t *instance)
 217:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 563              	 .loc 1 217 0
 564              	 .cfi_startproc
 565              	 
 566              	 
 567              	 
 568 0000 80B4     	 push {r7}
 569              	.LCFI55:
 570              	 .cfi_def_cfa_offset 4
 571              	 .cfi_offset 7,-4
 572 0002 85B0     	 sub sp,sp,#20
 573              	.LCFI56:
 574              	 .cfi_def_cfa_offset 24
 575 0004 00AF     	 add r7,sp,#0
 576              	.LCFI57:
 577              	 .cfi_def_cfa_register 7
 578 0006 7860     	 str r0,[r7,#4]
 579              	.LBB3:
 218:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     vcpPort_t *port = container_of(instance, vcpPort_t, port);
 580              	 .loc 1 218 0
 581 0008 7B68     	 ldr r3,[r7,#4]
 582 000a FB60     	 str r3,[r7,#12]
 583 000c FB68     	 ldr r3,[r7,#12]
 584              	.LBE3:
 585 000e BB60     	 str r3,[r7,#8]
 219:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     port->buffering = true;
 586              	 .loc 1 219 0
 587 0010 BB68     	 ldr r3,[r7,#8]
 588 0012 0122     	 movs r2,#1
 589 0014 83F84820 	 strb r2,[r3,#72]
 220:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 590              	 .loc 1 220 0
 591 0018 1437     	 adds r7,r7,#20
 592              	.LCFI58:
 593              	 .cfi_def_cfa_offset 4
 594 001a BD46     	 mov sp,r7
 595              	.LCFI59:
 596              	 .cfi_def_cfa_register 13
 597              	 
 598 001c 5DF8047B 	 ldr r7,[sp],#4
 599              	.LCFI60:
 600              	 .cfi_restore 7
 601              	 .cfi_def_cfa_offset 0
 602 0020 7047     	 bx lr
 603              	 .cfi_endproc
 604              	.LFE557:
 606 0022 00BF     	 .section .text.usbTxBytesFree,"ax",%progbits
 607              	 .align 2
 608              	 .thumb
 609              	 .thumb_func
 611              	usbTxBytesFree:
 612              	.LFB558:
 221:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 222:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static uint32_t usbTxBytesFree(const serialPort_t *instance)
 223:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 613              	 .loc 1 223 0
 614              	 .cfi_startproc
 615              	 
 616              	 
 617              	 
 618 0000 80B4     	 push {r7}
 619              	.LCFI61:
 620              	 .cfi_def_cfa_offset 4
 621              	 .cfi_offset 7,-4
 622 0002 83B0     	 sub sp,sp,#12
 623              	.LCFI62:
 624              	 .cfi_def_cfa_offset 16
 625 0004 00AF     	 add r7,sp,#0
 626              	.LCFI63:
 627              	 .cfi_def_cfa_register 7
 628 0006 7860     	 str r0,[r7,#4]
 224:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
 225:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef XMC4700_F100x2048
 226:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return 255;
 629              	 .loc 1 226 0
 630 0008 FF23     	 movs r3,#255
 227:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #else
 228:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return CDC_Send_FreeBytes();
 229:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 230:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 631              	 .loc 1 230 0
 632 000a 1846     	 mov r0,r3
 633 000c 0C37     	 adds r7,r7,#12
 634              	.LCFI64:
 635              	 .cfi_def_cfa_offset 4
 636 000e BD46     	 mov sp,r7
 637              	.LCFI65:
 638              	 .cfi_def_cfa_register 13
 639              	 
 640 0010 5DF8047B 	 ldr r7,[sp],#4
 641              	.LCFI66:
 642              	 .cfi_restore 7
 643              	 .cfi_def_cfa_offset 0
 644 0014 7047     	 bx lr
 645              	 .cfi_endproc
 646              	.LFE558:
 648 0016 00BF     	 .section .text.usbVcpEndWrite,"ax",%progbits
 649              	 .align 2
 650              	 .thumb
 651              	 .thumb_func
 653              	usbVcpEndWrite:
 654              	.LFB559:
 231:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 232:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static void usbVcpEndWrite(serialPort_t *instance)
 233:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 655              	 .loc 1 233 0
 656              	 .cfi_startproc
 657              	 
 658              	 
 659 0000 80B5     	 push {r7,lr}
 660              	.LCFI67:
 661              	 .cfi_def_cfa_offset 8
 662              	 .cfi_offset 7,-8
 663              	 .cfi_offset 14,-4
 664 0002 84B0     	 sub sp,sp,#16
 665              	.LCFI68:
 666              	 .cfi_def_cfa_offset 24
 667 0004 00AF     	 add r7,sp,#0
 668              	.LCFI69:
 669              	 .cfi_def_cfa_register 7
 670 0006 7860     	 str r0,[r7,#4]
 671              	.LBB4:
 234:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     vcpPort_t *port = container_of(instance, vcpPort_t, port);
 672              	 .loc 1 234 0
 673 0008 7B68     	 ldr r3,[r7,#4]
 674 000a FB60     	 str r3,[r7,#12]
 675 000c FB68     	 ldr r3,[r7,#12]
 676              	.LBE4:
 677 000e BB60     	 str r3,[r7,#8]
 235:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     port->buffering = false;
 678              	 .loc 1 235 0
 679 0010 BB68     	 ldr r3,[r7,#8]
 680 0012 0022     	 movs r2,#0
 681 0014 83F84820 	 strb r2,[r3,#72]
 236:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     usbVcpFlush(port);
 682              	 .loc 1 236 0
 683 0018 B868     	 ldr r0,[r7,#8]
 684 001a FFF7FEFF 	 bl usbVcpFlush
 237:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 685              	 .loc 1 237 0
 686 001e 1037     	 adds r7,r7,#16
 687              	.LCFI70:
 688              	 .cfi_def_cfa_offset 8
 689 0020 BD46     	 mov sp,r7
 690              	.LCFI71:
 691              	 .cfi_def_cfa_register 13
 692              	 
 693 0022 80BD     	 pop {r7,pc}
 694              	 .cfi_endproc
 695              	.LFE559:
 697              	 .section .rodata.usbVTable,"a",%progbits
 698              	 .align 2
 701              	usbVTable:
 702 0000 00000000 	 .word usbVcpWrite
 703 0004 00000000 	 .word usbVcpAvailable
 704 0008 00000000 	 .word usbTxBytesFree
 705 000c 00000000 	 .word usbVcpRead
 706 0010 00000000 	 .word usbVcpSetBaudRate
 707 0014 00000000 	 .word isUsbVcpTransmitBufferEmpty
 708 0018 00000000 	 .word usbVcpSetMode
 709 001c 00000000 	 .word usbVcpSetCtrlLineStateCb
 710 0020 00000000 	 .word usbVcpSetBaudRateCb
 711 0024 00000000 	 .word usbVcpWriteBuf
 712 0028 00000000 	 .word usbVcpBeginWrite
 713 002c 00000000 	 .word usbVcpEndWrite
 714              	 .section .text.usbVcpOpen,"ax",%progbits
 715              	 .align 2
 716              	 .global usbVcpOpen
 717              	 .thumb
 718              	 .thumb_func
 720              	usbVcpOpen:
 721              	.LFB560:
 238:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 239:../cleanflight/src/main/drivers/serial_usb_vcp.c **** static const struct serialPortVTable usbVTable[] = {
 240:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     {
 241:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .serialWrite = usbVcpWrite,
 242:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .serialTotalRxWaiting = usbVcpAvailable,
 243:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .serialTotalTxFree = usbTxBytesFree,
 244:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .serialRead = usbVcpRead,
 245:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .serialSetBaudRate = usbVcpSetBaudRate,
 246:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .isSerialTransmitBufferEmpty = isUsbVcpTransmitBufferEmpty,
 247:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .setMode = usbVcpSetMode,
 248:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .setCtrlLineStateCb = usbVcpSetCtrlLineStateCb,
 249:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .setBaudRateCb = usbVcpSetBaudRateCb,
 250:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .writeBuf = usbVcpWriteBuf,
 251:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .beginWrite = usbVcpBeginWrite,
 252:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         .endWrite = usbVcpEndWrite
 253:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 254:../cleanflight/src/main/drivers/serial_usb_vcp.c **** };
 255:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 256:../cleanflight/src/main/drivers/serial_usb_vcp.c **** serialPort_t *usbVcpOpen(void)
 257:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 722              	 .loc 1 257 0
 723              	 .cfi_startproc
 724              	 
 725              	 
 726 0000 80B5     	 push {r7,lr}
 727              	.LCFI72:
 728              	 .cfi_def_cfa_offset 8
 729              	 .cfi_offset 7,-8
 730              	 .cfi_offset 14,-4
 731 0002 82B0     	 sub sp,sp,#8
 732              	.LCFI73:
 733              	 .cfi_def_cfa_offset 16
 734 0004 00AF     	 add r7,sp,#0
 735              	.LCFI74:
 736              	 .cfi_def_cfa_register 7
 258:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     vcpPort_t *s;
 259:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 260:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #if defined(STM32F4)
 261:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     usbGenerateDisconnectPulse();
 262:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 263:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     IOInit(IOGetByTag(IO_TAG(PA11)), OWNER_USB, 0);
 264:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     IOInit(IOGetByTag(IO_TAG(PA12)), OWNER_USB, 0);
 265:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef USE_USB_CDC_HID
 266:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     if (usbDevConfig()->type == COMPOSITE) {
 267:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         USBD_Init(&USB_OTG_dev, USB_OTG_FS_CORE_ID, &USR_desc, &USBD_HID_CDC_cb, &USR_cb);
 268:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     } else {
 269:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 270:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         USBD_Init(&USB_OTG_dev, USB_OTG_FS_CORE_ID, &USR_desc, &USBD_CDC_cb, &USR_cb);
 271:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef USE_USB_CDC_HID
 272:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 273:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 274:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #elif defined(STM32F7)
 275:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     usbGenerateDisconnectPulse();
 276:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 277:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     IOInit(IOGetByTag(IO_TAG(PA11)), OWNER_USB, 0);
 278:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     IOInit(IOGetByTag(IO_TAG(PA12)), OWNER_USB, 0);
 279:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     /* Init Device Library */
 280:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USBD_Init(&USBD_Device, &VCP_Desc, 0);
 281:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 282:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     /* Add Supported Class */
 283:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef USE_USB_CDC_HID
 284:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     if (usbDevConfig()->type == COMPOSITE) {
 285:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     	USBD_RegisterClass(&USBD_Device, USBD_HID_CDC_CLASS);
 286:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     } else
 287:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 288:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     {
 289:../cleanflight/src/main/drivers/serial_usb_vcp.c ****         USBD_RegisterClass(&USBD_Device, USBD_CDC_CLASS);
 290:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     }
 291:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 292:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     /* HID Interface doesn't have any callbacks... */
 293:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     /* Add CDC Interface Class */
 294:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USBD_CDC_RegisterInterface(&USBD_Device, &USBD_CDC_fops);
 295:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 296:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     /* Start Device Process */
 297:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USBD_Start(&USBD_Device);
 298:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #elif defined(XMC4700_F100x2048)
 299:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USBD_VCOM_Init(&USBD_VCOM_0);
 737              	 .loc 1 299 0
 738 0006 0748     	 ldr r0,.L37
 739 0008 FFF7FEFF 	 bl USBD_VCOM_Init
 300:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USBD_VCOM_Connect();
 740              	 .loc 1 300 0
 741 000c FFF7FEFF 	 bl USBD_VCOM_Connect
 301:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #else
 302:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     Set_System();
 303:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     Set_USBClock();
 304:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USB_Init();
 305:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     USB_Interrupts_Config();
 306:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 307:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 308:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     s = &vcpPort;
 742              	 .loc 1 308 0
 743 0010 054B     	 ldr r3,.L37+4
 744 0012 7B60     	 str r3,[r7,#4]
 309:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     s->port.vTable = usbVTable;
 745              	 .loc 1 309 0
 746 0014 7B68     	 ldr r3,[r7,#4]
 747 0016 054A     	 ldr r2,.L37+8
 748 0018 1A60     	 str r2,[r3]
 310:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 311:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return (serialPort_t *)s;
 749              	 .loc 1 311 0
 750 001a 7B68     	 ldr r3,[r7,#4]
 312:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 751              	 .loc 1 312 0
 752 001c 1846     	 mov r0,r3
 753 001e 0837     	 adds r7,r7,#8
 754              	.LCFI75:
 755              	 .cfi_def_cfa_offset 8
 756 0020 BD46     	 mov sp,r7
 757              	.LCFI76:
 758              	 .cfi_def_cfa_register 13
 759              	 
 760 0022 80BD     	 pop {r7,pc}
 761              	.L38:
 762              	 .align 2
 763              	.L37:
 764 0024 00000000 	 .word USBD_VCOM_0
 765 0028 00000000 	 .word vcpPort
 766 002c 00000000 	 .word usbVTable
 767              	 .cfi_endproc
 768              	.LFE560:
 770              	 .section .text.usbVcpGetBaudRate,"ax",%progbits
 771              	 .align 2
 772              	 .global usbVcpGetBaudRate
 773              	 .thumb
 774              	 .thumb_func
 776              	usbVcpGetBaudRate:
 777              	.LFB561:
 313:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 314:../cleanflight/src/main/drivers/serial_usb_vcp.c **** uint32_t usbVcpGetBaudRate(serialPort_t *instance)
 315:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 778              	 .loc 1 315 0
 779              	 .cfi_startproc
 780              	 
 781              	 
 782              	 
 783 0000 80B4     	 push {r7}
 784              	.LCFI77:
 785              	 .cfi_def_cfa_offset 4
 786              	 .cfi_offset 7,-4
 787 0002 83B0     	 sub sp,sp,#12
 788              	.LCFI78:
 789              	 .cfi_def_cfa_offset 16
 790 0004 00AF     	 add r7,sp,#0
 791              	.LCFI79:
 792              	 .cfi_def_cfa_register 7
 793 0006 7860     	 str r0,[r7,#4]
 316:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     UNUSED(instance);
 317:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 318:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef XMC4700_F100x2048
 319:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return 0;
 794              	 .loc 1 319 0
 795 0008 0023     	 movs r3,#0
 320:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #else
 321:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return CDC_BaudRate();
 322:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 323:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 796              	 .loc 1 323 0
 797 000a 1846     	 mov r0,r3
 798 000c 0C37     	 adds r7,r7,#12
 799              	.LCFI80:
 800              	 .cfi_def_cfa_offset 4
 801 000e BD46     	 mov sp,r7
 802              	.LCFI81:
 803              	 .cfi_def_cfa_register 13
 804              	 
 805 0010 5DF8047B 	 ldr r7,[sp],#4
 806              	.LCFI82:
 807              	 .cfi_restore 7
 808              	 .cfi_def_cfa_offset 0
 809 0014 7047     	 bx lr
 810              	 .cfi_endproc
 811              	.LFE561:
 813 0016 00BF     	 .section .text.usbVcpIsConnected,"ax",%progbits
 814              	 .align 2
 815              	 .global usbVcpIsConnected
 816              	 .thumb
 817              	 .thumb_func
 819              	usbVcpIsConnected:
 820              	.LFB562:
 324:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 
 325:../cleanflight/src/main/drivers/serial_usb_vcp.c **** uint8_t usbVcpIsConnected(void)
 326:../cleanflight/src/main/drivers/serial_usb_vcp.c **** {
 821              	 .loc 1 326 0
 822              	 .cfi_startproc
 823              	 
 824              	 
 825              	 
 826 0000 80B4     	 push {r7}
 827              	.LCFI83:
 828              	 .cfi_def_cfa_offset 4
 829              	 .cfi_offset 7,-4
 830 0002 00AF     	 add r7,sp,#0
 831              	.LCFI84:
 832              	 .cfi_def_cfa_register 7
 327:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #ifdef XMC4700_F100x2048
 328:../cleanflight/src/main/drivers/serial_usb_vcp.c **** 	return xmc_device.IsConnected;
 833              	 .loc 1 328 0
 834 0004 054B     	 ldr r3,.L43
 835 0006 93F8CE31 	 ldrb r3,[r3,#462]
 836 000a C3F30003 	 ubfx r3,r3,#0,#1
 837 000e DBB2     	 uxtb r3,r3
 329:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #else
 330:../cleanflight/src/main/drivers/serial_usb_vcp.c ****     return usbIsConnected();
 331:../cleanflight/src/main/drivers/serial_usb_vcp.c **** #endif
 332:../cleanflight/src/main/drivers/serial_usb_vcp.c **** }
 838              	 .loc 1 332 0
 839 0010 1846     	 mov r0,r3
 840 0012 BD46     	 mov sp,r7
 841              	.LCFI85:
 842              	 .cfi_def_cfa_register 13
 843              	 
 844 0014 5DF8047B 	 ldr r7,[sp],#4
 845              	.LCFI86:
 846              	 .cfi_restore 7
 847              	 .cfi_def_cfa_offset 0
 848 0018 7047     	 bx lr
 849              	.L44:
 850 001a 00BF     	 .align 2
 851              	.L43:
 852 001c 00000000 	 .word xmc_device
 853              	 .cfi_endproc
 854              	.LFE562:
 856              	 .text
 857              	.Letext0:
 858              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 859              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 860              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/xmc4700.h"
 861              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 862              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 863              	 .file 7 "d:\\xmc\\projekte\\temp\\cf_xmc4700\\cleanflight\\lib\\main\\xmc4000\\usbd\\usb\\core\\endpoint.h"
 864              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usbd_regs.h"
 865              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usbd.h"
 866              	 .file 10 "d:\\xmc\\projekte\\temp\\cf_xmc4700\\cleanflight\\lib\\main\\xmc4000\\usbd\\usbd.h"
 867              	 .file 11 "d:\\xmc\\projekte\\temp\\cf_xmc4700\\cleanflight\\lib\\main\\xmc4000\\usbd_vcom\\class_driver\\common\\cdc_class_common.h"
 868              	 .file 12 "d:\\xmc\\projekte\\temp\\cf_xmc4700\\cleanflight\\lib\\main\\xmc4000\\usbd_vcom\\class_driver\\device/cdc_class_device.h"
 869              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/USBD_VCOM/usbd_vcom.h"
 870              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 871              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 872              	 .file 16 "../cleanflight/src/main/drivers/serial.h"
 873              	 .file 17 "../cleanflight/src/main/drivers/serial_usb_vcp.h"
 874              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 875              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
 876              	 .file 20 "d:\\xmc\\projekte\\temp\\cf_xmc4700\\cleanflight\\lib\\main\\xmc4000\\usbd\\usbd_extern.h"
 877              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/USBD_VCOM/usbd_vcom_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 serial_usb_vcp.c
    {standard input}:20     .bss.vcpPort:00000000 $d
    {standard input}:23     .bss.vcpPort:00000000 vcpPort
    {standard input}:26     .text.usbVcpSetBaudRate:00000000 $t
    {standard input}:30     .text.usbVcpSetBaudRate:00000000 usbVcpSetBaudRate
    {standard input}:67     .text.usbVcpSetMode:00000000 $t
    {standard input}:71     .text.usbVcpSetMode:00000000 usbVcpSetMode
    {standard input}:108    .text.usbVcpSetCtrlLineStateCb:00000000 $t
    {standard input}:112    .text.usbVcpSetCtrlLineStateCb:00000000 usbVcpSetCtrlLineStateCb
    {standard input}:149    .text.usbVcpSetBaudRateCb:00000000 $t
    {standard input}:153    .text.usbVcpSetBaudRateCb:00000000 usbVcpSetBaudRateCb
    {standard input}:190    .text.isUsbVcpTransmitBufferEmpty:00000000 $t
    {standard input}:194    .text.isUsbVcpTransmitBufferEmpty:00000000 isUsbVcpTransmitBufferEmpty
    {standard input}:232    .text.usbVcpAvailable:00000000 $t
    {standard input}:236    .text.usbVcpAvailable:00000000 usbVcpAvailable
    {standard input}:273    .text.usbVcpAvailable:0000001c $d
    {standard input}:278    .text.usbVcpRead:00000000 $t
    {standard input}:282    .text.usbVcpRead:00000000 usbVcpRead
    {standard input}:322    .text.usbVcpRead:00000024 $d
    {standard input}:327    .text.usbVcpWriteBuf:00000000 $t
    {standard input}:331    .text.usbVcpWriteBuf:00000000 usbVcpWriteBuf
    {standard input}:388    .text.usbVcpWriteBuf:00000040 $d
    {standard input}:393    .text.usbVcpFlush:00000000 $t
    {standard input}:397    .text.usbVcpFlush:00000000 usbVcpFlush
    {standard input}:479    .text.usbVcpFlush:0000006c $d
    {standard input}:484    .text.usbVcpWrite:00000000 $t
    {standard input}:488    .text.usbVcpWrite:00000000 usbVcpWrite
    {standard input}:557    .text.usbVcpBeginWrite:00000000 $t
    {standard input}:561    .text.usbVcpBeginWrite:00000000 usbVcpBeginWrite
    {standard input}:607    .text.usbTxBytesFree:00000000 $t
    {standard input}:611    .text.usbTxBytesFree:00000000 usbTxBytesFree
    {standard input}:649    .text.usbVcpEndWrite:00000000 $t
    {standard input}:653    .text.usbVcpEndWrite:00000000 usbVcpEndWrite
    {standard input}:698    .rodata.usbVTable:00000000 $d
    {standard input}:701    .rodata.usbVTable:00000000 usbVTable
    {standard input}:715    .text.usbVcpOpen:00000000 $t
    {standard input}:720    .text.usbVcpOpen:00000000 usbVcpOpen
    {standard input}:764    .text.usbVcpOpen:00000024 $d
    {standard input}:771    .text.usbVcpGetBaudRate:00000000 $t
    {standard input}:776    .text.usbVcpGetBaudRate:00000000 usbVcpGetBaudRate
    {standard input}:814    .text.usbVcpIsConnected:00000000 $t
    {standard input}:819    .text.usbVcpIsConnected:00000000 usbVcpIsConnected
    {standard input}:852    .text.usbVcpIsConnected:0000001c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CDC_Device_USBTask
USBD_VCOM_BytesReceived
USBD_VCOM_cdc_interface
USBD_VCOM_ReceiveByte
USBD_VCOM_SendData
xmc_device
USBD_VCOM_Init
USBD_VCOM_Connect
USBD_VCOM_0
