   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "fc_core.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.cmpTimeUs,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	cmpTimeUs:
  25              	.LFB524:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include "platform.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include "pg/pg.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // time difference, 32 bits always sufficient
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef int32_t timeDelta_t;
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // millisecond time
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint32_t timeMs_t ;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // microsecond time
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #ifdef USE_64BIT_TIME
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint64_t timeUs_t;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #define TIMEUS_MAX UINT64_MAX
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #else
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint32_t timeUs_t;
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #define TIMEUS_MAX UINT32_MAX
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #endif
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** static inline timeDelta_t cmpTimeUs(timeUs_t a, timeUs_t b) { return (timeDelta_t)(a - b); }
  27              	 .loc 1 43 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
  44              	 .loc 1 43 0
  45 000a 7A68     	 ldr r2,[r7,#4]
  46 000c 3B68     	 ldr r3,[r7]
  47 000e D31A     	 subs r3,r2,r3
  48 0010 1846     	 mov r0,r3
  49 0012 0C37     	 adds r7,r7,#12
  50              	.LCFI3:
  51              	 .cfi_def_cfa_offset 4
  52 0014 BD46     	 mov sp,r7
  53              	.LCFI4:
  54              	 .cfi_def_cfa_register 13
  55              	 
  56 0016 5DF8047B 	 ldr r7,[sp],#4
  57              	.LCFI5:
  58              	 .cfi_restore 7
  59              	 .cfi_def_cfa_offset 0
  60 001a 7047     	 bx lr
  61              	 .cfi_endproc
  62              	.LFE524:
  64              	 .section .text.blackboxConfig,"ax",%progbits
  65              	 .align 2
  66              	 .thumb
  67              	 .thumb_func
  69              	blackboxConfig:
  70              	.LFB527:
  71              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox/blackbox.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "platform.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "build/build_config.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "common/time.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef enum BlackboxDevice {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_NONE = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #ifdef USE_FLASHFS
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_FLASH = 1,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #endif
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #ifdef USE_SDCARD
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_SDCARD = 2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #endif
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_SERIAL = 3
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } BlackboxDevice_e;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef enum BlackboxMode {
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_MODE_NORMAL = 0,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_MODE_MOTOR_TEST,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_MODE_ALWAYS_ON
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } BlackboxMode;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef enum FlightLogEvent {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_SYNC_BEEP = 0,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_INFLIGHT_ADJUSTMENT = 13,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_LOGGING_RESUME = 14,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_FLIGHTMODE = 30, // Add new event type for flight mode status.
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_LOG_END = 255
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } FlightLogEvent;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef struct blackboxConfig_s {
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint16_t p_ratio; // I-frame interval / P-frame interval
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint8_t device;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint8_t record_acc;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint8_t mode;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } blackboxConfig_t;
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** PG_DECLARE(blackboxConfig_t, blackboxConfig);
  72              	 .loc 2 60 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 00AF     	 add r7,sp,#0
  82              	.LCFI7:
  83              	 .cfi_def_cfa_register 7
  84              	 .loc 2 60 0
  85 0004 024B     	 ldr r3,.L5
  86 0006 1846     	 mov r0,r3
  87 0008 BD46     	 mov sp,r7
  88              	.LCFI8:
  89              	 .cfi_def_cfa_register 13
  90              	 
  91 000a 5DF8047B 	 ldr r7,[sp],#4
  92              	.LCFI9:
  93              	 .cfi_restore 7
  94              	 .cfi_def_cfa_offset 0
  95 000e 7047     	 bx lr
  96              	.L6:
  97              	 .align 2
  98              	.L5:
  99 0010 00000000 	 .word blackboxConfig_System
 100              	 .cfi_endproc
 101              	.LFE527:
 103              	 .section .text.constrain,"ax",%progbits
 104              	 .align 2
 105              	 .thumb
 106              	 .thumb_func
 108              	constrain:
 109              	.LFB529:
 110              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
 111              	 .loc 3 151 0
 112              	 .cfi_startproc
 113              	 
 114              	 
 115              	 
 116 0000 80B4     	 push {r7}
 117              	.LCFI10:
 118              	 .cfi_def_cfa_offset 4
 119              	 .cfi_offset 7,-4
 120 0002 85B0     	 sub sp,sp,#20
 121              	.LCFI11:
 122              	 .cfi_def_cfa_offset 24
 123 0004 00AF     	 add r7,sp,#0
 124              	.LCFI12:
 125              	 .cfi_def_cfa_register 7
 126 0006 F860     	 str r0,[r7,#12]
 127 0008 B960     	 str r1,[r7,#8]
 128 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
 129              	 .loc 3 152 0
 130 000c FA68     	 ldr r2,[r7,#12]
 131 000e BB68     	 ldr r3,[r7,#8]
 132 0010 9A42     	 cmp r2,r3
 133 0012 01DA     	 bge .L8
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
 134              	 .loc 3 153 0
 135 0014 BB68     	 ldr r3,[r7,#8]
 136 0016 06E0     	 b .L9
 137              	.L8:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
 138              	 .loc 3 154 0
 139 0018 FA68     	 ldr r2,[r7,#12]
 140 001a 7B68     	 ldr r3,[r7,#4]
 141 001c 9A42     	 cmp r2,r3
 142 001e 01DD     	 ble .L10
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 143              	 .loc 3 155 0
 144 0020 7B68     	 ldr r3,[r7,#4]
 145 0022 00E0     	 b .L9
 146              	.L10:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 147              	 .loc 3 157 0
 148 0024 FB68     	 ldr r3,[r7,#12]
 149              	.L9:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 150              	 .loc 3 158 0
 151 0026 1846     	 mov r0,r3
 152 0028 1437     	 adds r7,r7,#20
 153              	.LCFI13:
 154              	 .cfi_def_cfa_offset 4
 155 002a BD46     	 mov sp,r7
 156              	.LCFI14:
 157              	 .cfi_def_cfa_register 13
 158              	 
 159 002c 5DF8047B 	 ldr r7,[sp],#4
 160              	.LCFI15:
 161              	 .cfi_restore 7
 162              	 .cfi_def_cfa_offset 0
 163 0030 7047     	 bx lr
 164              	 .cfi_endproc
 165              	.LFE529:
 167 0032 00BF     	 .section .text.rxConfig,"ax",%progbits
 168              	 .align 2
 169              	 .thumb
 170              	 .thumb_func
 172              	rxConfig:
 173              	.LFB533:
 174              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
 175              	 .loc 4 61 0
 176              	 .cfi_startproc
 177              	 
 178              	 
 179              	 
 180 0000 80B4     	 push {r7}
 181              	.LCFI16:
 182              	 .cfi_def_cfa_offset 4
 183              	 .cfi_offset 7,-4
 184 0002 00AF     	 add r7,sp,#0
 185              	.LCFI17:
 186              	 .cfi_def_cfa_register 7
 187              	 .loc 4 61 0
 188 0004 024B     	 ldr r3,.L13
 189 0006 1846     	 mov r0,r3
 190 0008 BD46     	 mov sp,r7
 191              	.LCFI18:
 192              	 .cfi_def_cfa_register 13
 193              	 
 194 000a 5DF8047B 	 ldr r7,[sp],#4
 195              	.LCFI19:
 196              	 .cfi_restore 7
 197              	 .cfi_def_cfa_offset 0
 198 000e 7047     	 bx lr
 199              	.L14:
 200              	 .align 2
 201              	.L13:
 202 0010 00000000 	 .word rxConfig_System
 203              	 .cfi_endproc
 204              	.LFE533:
 206              	 .section .text.accelerometerConfig,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	accelerometerConfig:
 212              	.LFB543:
 213              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/acceleration.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "pg/pg.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "drivers/accgyro/accgyro.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "sensors/sensors.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** // Type of accelerometer used/detected
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_DEFAULT,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_NONE,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ADXL345,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU6050,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MMA8452,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_BMA280,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_LSM303DLHC,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU6000,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU6500,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU9250,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20601,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20602,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20608G,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20649,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20689,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_BMI160,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_FAKE
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } accelerationSensor_e;
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef struct acc_s {
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     accDev_t dev;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     uint32_t accSamplingInterval;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     float accADC[XYZ_AXIS_COUNT];
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     bool isAccelUpdatedAtLeastOnce;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } acc_t;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** extern acc_t acc;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef struct rollAndPitchTrims_s {
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     int16_t roll;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     int16_t pitch;
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } rollAndPitchTrims_t_def;
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef union rollAndPitchTrims_u {
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     int16_t raw[2];
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     rollAndPitchTrims_t_def values;
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } rollAndPitchTrims_t;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef struct accelerometerConfig_s {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     uint16_t acc_lpf_hz;                    // cutoff frequency for the low pass filter used on the
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     sensor_align_e acc_align;               // acc alignment
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     uint8_t acc_hardware;                   // Which acc hardware to use on boards with more than o
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     bool acc_high_fsr;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     flightDynamicsTrims_t accZero;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     rollAndPitchTrims_t accelerometerTrims;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } accelerometerConfig_t;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** PG_DECLARE(accelerometerConfig_t, accelerometerConfig);
 214              	 .loc 5 78 0
 215              	 .cfi_startproc
 216              	 
 217              	 
 218              	 
 219 0000 80B4     	 push {r7}
 220              	.LCFI20:
 221              	 .cfi_def_cfa_offset 4
 222              	 .cfi_offset 7,-4
 223 0002 00AF     	 add r7,sp,#0
 224              	.LCFI21:
 225              	 .cfi_def_cfa_register 7
 226              	 .loc 5 78 0
 227 0004 024B     	 ldr r3,.L17
 228 0006 1846     	 mov r0,r3
 229 0008 BD46     	 mov sp,r7
 230              	.LCFI22:
 231              	 .cfi_def_cfa_register 13
 232              	 
 233 000a 5DF8047B 	 ldr r7,[sp],#4
 234              	.LCFI23:
 235              	 .cfi_restore 7
 236              	 .cfi_def_cfa_offset 0
 237 000e 7047     	 bx lr
 238              	.L18:
 239              	 .align 2
 240              	.L17:
 241 0010 00000000 	 .word accelerometerConfig_System
 242              	 .cfi_endproc
 243              	.LFE543:
 245              	 .section .text.accelerometerConfigMutable,"ax",%progbits
 246              	 .align 2
 247              	 .thumb
 248              	 .thumb_func
 250              	accelerometerConfigMutable:
 251              	.LFB544:
 252              	 .loc 5 78 0
 253              	 .cfi_startproc
 254              	 
 255              	 
 256              	 
 257 0000 80B4     	 push {r7}
 258              	.LCFI24:
 259              	 .cfi_def_cfa_offset 4
 260              	 .cfi_offset 7,-4
 261 0002 00AF     	 add r7,sp,#0
 262              	.LCFI25:
 263              	 .cfi_def_cfa_register 7
 264              	 .loc 5 78 0
 265 0004 024B     	 ldr r3,.L21
 266 0006 1846     	 mov r0,r3
 267 0008 BD46     	 mov sp,r7
 268              	.LCFI26:
 269              	 .cfi_def_cfa_register 13
 270              	 
 271 000a 5DF8047B 	 ldr r7,[sp],#4
 272              	.LCFI27:
 273              	 .cfi_restore 7
 274              	 .cfi_def_cfa_offset 0
 275 000e 7047     	 bx lr
 276              	.L22:
 277              	 .align 2
 278              	.L21:
 279 0010 00000000 	 .word accelerometerConfig_System
 280              	 .cfi_endproc
 281              	.LFE544:
 283              	 .section .text.systemConfig,"ax",%progbits
 284              	 .align 2
 285              	 .thumb
 286              	 .thumb_func
 288              	systemConfig:
 289              	.LFB560:
 290              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdbool.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #define MAX_NAME_LENGTH 16u
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** typedef struct pilotConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     char name[MAX_NAME_LENGTH + 1];
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** } pilotConfig_t;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** PG_DECLARE(pilotConfig_t, pilotConfig);
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** typedef struct systemConfig_s {
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t pidProfileIndex;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t activeRateProfile;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t debug_mode;
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t task_statistics;
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t rateProfile6PosSwitch;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t cpu_overclock;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t powerOnArmingGraceTime; // in seconds
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     char boardIdentifier[sizeof(TARGET_BOARD_IDENTIFIER) + 1];
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** } systemConfig_t;
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** PG_DECLARE(systemConfig_t, systemConfig);
 291              	 .loc 6 47 0
 292              	 .cfi_startproc
 293              	 
 294              	 
 295              	 
 296 0000 80B4     	 push {r7}
 297              	.LCFI28:
 298              	 .cfi_def_cfa_offset 4
 299              	 .cfi_offset 7,-4
 300 0002 00AF     	 add r7,sp,#0
 301              	.LCFI29:
 302              	 .cfi_def_cfa_register 7
 303              	 .loc 6 47 0
 304 0004 024B     	 ldr r3,.L25
 305 0006 1846     	 mov r0,r3
 306 0008 BD46     	 mov sp,r7
 307              	.LCFI30:
 308              	 .cfi_def_cfa_register 13
 309              	 
 310 000a 5DF8047B 	 ldr r7,[sp],#4
 311              	.LCFI31:
 312              	 .cfi_restore 7
 313              	 .cfi_def_cfa_offset 0
 314 000e 7047     	 bx lr
 315              	.L26:
 316              	 .align 2
 317              	.L25:
 318 0010 00000000 	 .word systemConfig_System
 319              	 .cfi_endproc
 320              	.LFE560:
 322              	 .section .text.rcControlsConfig,"ax",%progbits
 323              	 .align 2
 324              	 .thumb
 325              	 .thumb_func
 327              	rcControlsConfig:
 328              	.LFB573:
 329              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum rc_alias {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     ROLL = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     PITCH,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     YAW,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX1,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX3,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX4,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX5,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX6,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX7,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX8
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rc_alias_e;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PRIMARY_CHANNEL_COUNT (THROTTLE + 1)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_LOW = 0,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_HIGH
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } throttleStatus_e;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define AIRMODEDEADBAND 12
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     NOT_CENTERED = 0,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     CENTERED
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rollPitchStatus_e;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_OFF = 0,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DEFAULT,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_AUTO,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_MANUAL
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothing_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_INTERPOLATION,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_FILTER
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingType_e;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_PT1,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_BIQUAD
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInputFilter_e;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_OFF,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_PT1,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_BIQUAD
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingDerivativeFilter_e;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_INPUT_ACTIVE,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_DERIVATIVE_ACTIVE,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_AVERAGE_FRAME
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInfoType_e;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_LO (1 << (2 * ROLL))
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_CE (3 << (2 * ROLL))
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_HI (2 << (2 * ROLL))
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_LO (1 << (2 * PITCH))
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_CE (3 << (2 * PITCH))
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_HI (2 << (2 * PITCH))
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_LO (1 << (2 * YAW))
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_CE (3 << (2 * YAW))
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_HI (2 << (2 * YAW))
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_LO (1 << (2 * THROTTLE))
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_CE (3 << (2 * THROTTLE))
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_HI (2 << (2 * THROTTLE))
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_EXPO_MAX  100
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_RATES_MAX  255
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** // (Super) rates are constrained to [0, 100] for Betaflight rates, so values higher than 100 won't 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RATE_MAX  255
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_TPA_MAX              100
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** extern float rcCommand[4];
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilterTraining_s {
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     float sum;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int count;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t min;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t max;
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTraining_t;
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef union rcSmoothingFilterTypes_u {
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     pt1Filter_t pt1Filter;
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     biquadFilter_t biquadFilter;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTypes_t;
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilter_s {
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool filterInitialized;
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTypes_t filter[4];
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t inputCutoffFrequency;
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t derivativeCutoffFrequency;
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int averageFrameTimeUs;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTraining_t training;
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilter_t;
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcControlsConfig_s {
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t deadband;                       // introduce a deadband around the stick center for pit
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t yaw_deadband;                   // introduce a deadband around the stick center for yaw
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_deadband;              // defines the neutral zone of throttle stick during al
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_fast_change;           // when disabled, turn off the althold when throttle st
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool yaw_control_reversed;            // invert control direction of yaw
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcControlsConfig_t;
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(rcControlsConfig_t, rcControlsConfig);
 330              	 .loc 7 139 0
 331              	 .cfi_startproc
 332              	 
 333              	 
 334              	 
 335 0000 80B4     	 push {r7}
 336              	.LCFI32:
 337              	 .cfi_def_cfa_offset 4
 338              	 .cfi_offset 7,-4
 339 0002 00AF     	 add r7,sp,#0
 340              	.LCFI33:
 341              	 .cfi_def_cfa_register 7
 342              	 .loc 7 139 0
 343 0004 024B     	 ldr r3,.L29
 344 0006 1846     	 mov r0,r3
 345 0008 BD46     	 mov sp,r7
 346              	.LCFI34:
 347              	 .cfi_def_cfa_register 13
 348              	 
 349 000a 5DF8047B 	 ldr r7,[sp],#4
 350              	.LCFI35:
 351              	 .cfi_restore 7
 352              	 .cfi_def_cfa_offset 0
 353 000e 7047     	 bx lr
 354              	.L30:
 355              	 .align 2
 356              	.L29:
 357 0010 00000000 	 .word rcControlsConfig_System
 358              	 .cfi_endproc
 359              	.LFE573:
 361              	 .section .text.flight3DConfig,"ax",%progbits
 362              	 .align 2
 363              	 .thumb
 364              	 .thumb_func
 366              	flight3DConfig:
 367              	.LFB575:
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct flight3DConfig_s {
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_low;                // min 3d value
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_high;               // max 3d value
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t neutral3d;                     // center 3d value
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_throttle;           // default throttle deadband from MIDRC
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_low;                   // pwm output value for max negative thrust
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_high;                  // pwm output value for max positive thrust
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t switched_mode3d;                // enable '3D Switched Mode'
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } flight3DConfig_t;
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(flight3DConfig_t, flight3DConfig);
 368              	 .loc 7 151 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372              	 
 373 0000 80B4     	 push {r7}
 374              	.LCFI36:
 375              	 .cfi_def_cfa_offset 4
 376              	 .cfi_offset 7,-4
 377 0002 00AF     	 add r7,sp,#0
 378              	.LCFI37:
 379              	 .cfi_def_cfa_register 7
 380              	 .loc 7 151 0
 381 0004 024B     	 ldr r3,.L33
 382 0006 1846     	 mov r0,r3
 383 0008 BD46     	 mov sp,r7
 384              	.LCFI38:
 385              	 .cfi_def_cfa_register 13
 386              	 
 387 000a 5DF8047B 	 ldr r7,[sp],#4
 388              	.LCFI39:
 389              	 .cfi_restore 7
 390              	 .cfi_def_cfa_offset 0
 391 000e 7047     	 bx lr
 392              	.L34:
 393              	 .align 2
 394              	.L33:
 395 0010 00000000 	 .word flight3DConfig_System
 396              	 .cfi_endproc
 397              	.LFE575:
 399              	 .section .text.armingConfig,"ax",%progbits
 400              	 .align 2
 401              	 .thumb
 402              	 .thumb_func
 404              	armingConfig:
 405              	.LFB577:
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct armingConfig_s {
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t gyro_cal_on_first_arm;          // allow disarm/arm on throttle down + roll left/right
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t auto_disarm_delay;              // allow automatically disarming multicopters after aut
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } armingConfig_t;
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(armingConfig_t, armingConfig);
 406              	 .loc 7 158 0
 407              	 .cfi_startproc
 408              	 
 409              	 
 410              	 
 411 0000 80B4     	 push {r7}
 412              	.LCFI40:
 413              	 .cfi_def_cfa_offset 4
 414              	 .cfi_offset 7,-4
 415 0002 00AF     	 add r7,sp,#0
 416              	.LCFI41:
 417              	 .cfi_def_cfa_register 7
 418              	 .loc 7 158 0
 419 0004 024B     	 ldr r3,.L37
 420 0006 1846     	 mov r0,r3
 421 0008 BD46     	 mov sp,r7
 422              	.LCFI42:
 423              	 .cfi_def_cfa_register 13
 424              	 
 425 000a 5DF8047B 	 ldr r7,[sp],#4
 426              	.LCFI43:
 427              	 .cfi_restore 7
 428              	 .cfi_def_cfa_offset 0
 429 000e 7047     	 bx lr
 430              	.L38:
 431              	 .align 2
 432              	.L37:
 433 0010 00000000 	 .word armingConfig_System
 434              	 .cfi_endproc
 435              	.LFE577:
 437              	 .section .text.failsafeConfig,"ax",%progbits
 438              	 .align 2
 439              	 .thumb
 440              	 .thumb_func
 442              	failsafeConfig:
 443              	.LFB597:
 444              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define FAILSAFE_POWER_ON_DELAY_US (1000 * 1000 * 5)
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define MILLIS_PER_TENTH_SECOND      100
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define MILLIS_PER_SECOND           1000
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_OF_1_SECONDS            1 * MILLIS_PER_SECOND
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_OF_3_SECONDS            3 * MILLIS_PER_SECOND
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_OF_30_SECONDS          30 * MILLIS_PER_SECOND
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_RXDATA_FAILURE        200    // millis
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_RXDATA_RECOVERY       200    // millis
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** typedef struct failsafeConfig_s {
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint16_t failsafe_throttle;             // Throttle level used for landing - specify value betw
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint16_t failsafe_throttle_low_delay;   // Time throttle stick must have been below 'min_check'
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_delay;                 // Guard time for failsafe activation after signal lost
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_off_delay;             // Time for Landing before motors stop in 0.1sec. 1 ste
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_switch_mode;           // failsafe switch action is 0: stage1 (identical to rc
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_procedure;             // selected full failsafe procedure is 0: auto-landing,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** } failsafeConfig_t;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** PG_DECLARE(failsafeConfig_t, failsafeConfig);
 445              	 .loc 8 44 0
 446              	 .cfi_startproc
 447              	 
 448              	 
 449              	 
 450 0000 80B4     	 push {r7}
 451              	.LCFI44:
 452              	 .cfi_def_cfa_offset 4
 453              	 .cfi_offset 7,-4
 454 0002 00AF     	 add r7,sp,#0
 455              	.LCFI45:
 456              	 .cfi_def_cfa_register 7
 457              	 .loc 8 44 0
 458 0004 024B     	 ldr r3,.L41
 459 0006 1846     	 mov r0,r3
 460 0008 BD46     	 mov sp,r7
 461              	.LCFI46:
 462              	 .cfi_def_cfa_register 13
 463              	 
 464 000a 5DF8047B 	 ldr r7,[sp],#4
 465              	.LCFI47:
 466              	 .cfi_restore 7
 467              	 .cfi_def_cfa_offset 0
 468 000e 7047     	 bx lr
 469              	.L42:
 470              	 .align 2
 471              	.L41:
 472 0010 00000000 	 .word failsafeConfig_System
 473              	 .cfi_endproc
 474              	.LFE597:
 476              	 .section .text.mixerConfig,"ax",%progbits
 477              	 .align 2
 478              	 .thumb
 479              	 .thumb_func
 481              	mixerConfig:
 482              	.LFB604:
 483              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "platform.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "common/time.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output_counts.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/io_types.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output.h"
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define QUAD_MOTOR_COUNT 4
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHED_MOTORS_PWM_RATE 16000
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHLESS_MOTORS_PWM_RATE 480
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Digital protocol has fixed values
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_DISARM_COMMAND      0
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MIN_THROTTLE       48
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MAX_THROTTLE     2047
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_LOW  1047
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_HIGH 1048
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Note: this is called MultiType/MULTITYPE_* in baseflight.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef enum mixerMode
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** {
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_TRI = 1,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADP = 2,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX = 3,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_BICOPTER = 4,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_GIMBAL = 5,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y6 = 6,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6 = 7,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_FLYING_WING = 8,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y4 = 9,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6X = 10,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOX8 = 11,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATP = 12,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATX = 13,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_AIRPLANE = 14,        // airplane / singlecopter / dualcopter (not yet properly supported
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_120_CCPM = 15,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_90_DEG = 16,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_VTAIL4 = 17,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6H = 18,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_RX_TO_SERVO = 19,    // PPM -> servo relay
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_DUALCOPTER = 20,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_SINGLECOPTER = 21,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_ATAIL4 = 22,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM = 23,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_AIRPLANE = 24,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_TRI = 25,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX_1234 = 26
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerMode_e;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer data per motor
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct motorMixer_s {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float throttle;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float roll;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float pitch;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float yaw;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } motorMixer_t;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE_ARRAY(motorMixer_t, MAX_SUPPORTED_MOTORS, customMotorMixer);
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer configuration
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixer_s {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t motorCount;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t useServo;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     const motorMixer_t *motor;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixer_t;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixerConfig_s {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t mixerMode;
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     bool yaw_motors_reversed;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t crashflip_motor_percent;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerConfig_t;
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE(mixerConfig_t, mixerConfig);
 484              	 .loc 9 96 0
 485              	 .cfi_startproc
 486              	 
 487              	 
 488              	 
 489 0000 80B4     	 push {r7}
 490              	.LCFI48:
 491              	 .cfi_def_cfa_offset 4
 492              	 .cfi_offset 7,-4
 493 0002 00AF     	 add r7,sp,#0
 494              	.LCFI49:
 495              	 .cfi_def_cfa_register 7
 496              	 .loc 9 96 0
 497 0004 024B     	 ldr r3,.L45
 498 0006 1846     	 mov r0,r3
 499 0008 BD46     	 mov sp,r7
 500              	.LCFI50:
 501              	 .cfi_def_cfa_register 13
 502              	 
 503 000a 5DF8047B 	 ldr r7,[sp],#4
 504              	.LCFI51:
 505              	 .cfi_restore 7
 506              	 .cfi_def_cfa_offset 0
 507 000e 7047     	 bx lr
 508              	.L46:
 509              	 .align 2
 510              	.L45:
 511 0010 00000000 	 .word mixerConfig_System
 512              	 .cfi_endproc
 513              	.LFE604:
 515              	 .section .text.pidConfig,"ax",%progbits
 516              	 .align 2
 517              	 .thumb
 518              	 .thumb_func
 520              	pidConfig:
 521              	.LFB611:
 522              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define MAX_PID_PROCESS_DENOM       16
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_CONTROLLER_BETAFLIGHT   1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_MIXER_SCALING           1000.0f
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_SERVO_MIXER_SCALING     0.7f
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT                500
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_YAW            400
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MIN            100
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MAX            1000
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // Scaling factors for Pids for better tunable range in configurator for betaflight pid controller.
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PTERM_SCALE 0.032029f
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define ITERM_SCALE 0.244381f
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define DTERM_SCALE 0.000529f
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // The constant scale factor to replace the Kd component of the feedforward calculation.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // This value gives the same "feel" as the previous Kd default of 26 (26 * DTERM_SCALE)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define FEEDFORWARD_SCALE 0.013754f
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ROLL,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_PITCH,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_YAW,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_LEVEL,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_MAG,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ITEM_COUNT
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidIndex_e;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_OFF = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ON,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ALWAYS
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidSuperExpoYaw_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_OFF = 0,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_ON
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidStabilisationState_e;
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_OFF = 0,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_ON,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_BEEP
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidCrashRecovery_e;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidf_s {
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t P;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t I;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t D;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t F;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidf_t;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_SMOOTH,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_STEP
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } antiGravityMode_e;
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_OFF,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP_INC,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY_INC
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelax_e;
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_GYRO,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_SETPOINT
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelaxType_e;
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidProfile_s {
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yaw_lowpass_hz;                // Additional yaw filter when yaw axis too noisy
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass_hz;              // Delta Filter in hz
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_hz;                // Biquad dterm notch hz
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_cutoff;            // Biquad dterm notch low cutoff
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     pidf_t  pid[PID_ITEM_COUNT];
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t dterm_filter_type;              // Filter selection for dterm
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t itermWindupPointPercent;        // Experimental ITerm windup threshold, percent motor s
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimit;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimitYaw;
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pidAtMinThrottle;               // Disable/Enable pids on zero throttle. Normally even 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t levelAngleLimit;                // Max angle in degrees in level mode
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_effect;            // inclination factor for Horizon mode
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_expert_mode;       // OFF or ON
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     // Betaflight PID controller parameters
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t  antiGravityMode;             // type of anti gravity method
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermThrottleThreshold;        // max allowed throttle delta before iterm accelerated 
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermAcceleratorGain;          // Iterm Accelerator Gain when itermThrottlethreshold i
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yawRateAccelLimit;             // yaw accel limiter for deg/sec/ms
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t rateAccelLimit;                // accel limiter roll/pitch deg/sec/ms
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_dthreshold;              // dterm crash value
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_gthreshold;              // gyro crash value
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_setpoint_threshold;      // setpoint must be below this value to detect crash, s
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_time;                    // ms
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_delay;                   // ms
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_angle;           // degrees
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_rate;            // degree/second
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t vbatPidCompensation;            // Scale PIDsum to battery voltage
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t feedForwardTransition;          // Feed forward weight transition
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_limit_yaw;               // limits yaw errorRate, so crashes don't cause huge th
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermLimit;
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass2_hz;             // Extra PT1 Filter on D in hz
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery;                 // off, on, on and beeps when it is in crash recovery m
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost;                 // how much should throttle be boosted during transient
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost_cutoff;          // Which cutoff frequency to use for throttle boost. hi
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_rotation;                 // rotates iterm to translate world errors to local coo
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t smart_feedforward;              // takes only the larger of P and the D weight feed for
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_type;               // Specifies type of relax algorithm
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_cutoff;             // This cutoff frequency specifies a low pass filter wh
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax;                    // Enable iterm suppression during stick input
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_angle_limit;       // Acro trainer roll/pitch angle limit in degrees
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_debug_axis;        // The axis for which record debugging values are captu
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_gain;              // The strength of the limiting. Raising may reduce ove
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t acro_trainer_lookahead_ms;     // The lookahead window in milliseconds used to reduce 
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_gain;               // How strongly should the absolute accumulated error b
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_limit;              // Limit to the correction
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_error_limit;        // Limit to the accumulated error
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidProfile_t;
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #ifndef USE_OSD_SLAVE
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE_ARRAY(pidProfile_t, MAX_PROFILE_COUNT, pidProfiles);
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #endif
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidConfig_s {
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pid_process_denom;              // Processing denominator for PID controller vs gyro sa
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_prevention;          // off, on - enables pidsum runaway disarm logic
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t runaway_takeoff_deactivate_delay;   // delay in ms for "in-flight" conditions before d
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_deactivate_throttle; // minimum throttle percent required during deacti
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidConfig_t;
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE(pidConfig_t, pidConfig);
 523              	 .loc 10 161 0
 524              	 .cfi_startproc
 525              	 
 526              	 
 527              	 
 528 0000 80B4     	 push {r7}
 529              	.LCFI52:
 530              	 .cfi_def_cfa_offset 4
 531              	 .cfi_offset 7,-4
 532 0002 00AF     	 add r7,sp,#0
 533              	.LCFI53:
 534              	 .cfi_def_cfa_register 7
 535              	 .loc 10 161 0
 536 0004 024B     	 ldr r3,.L49
 537 0006 1846     	 mov r0,r3
 538 0008 BD46     	 mov sp,r7
 539              	.LCFI54:
 540              	 .cfi_def_cfa_register 13
 541              	 
 542 000a 5DF8047B 	 ldr r7,[sp],#4
 543              	.LCFI55:
 544              	 .cfi_restore 7
 545              	 .cfi_def_cfa_offset 0
 546 000e 7047     	 bx lr
 547              	.L50:
 548              	 .align 2
 549              	.L49:
 550 0010 00000000 	 .word pidConfig_System
 551              	 .cfi_endproc
 552              	.LFE611:
 554              	 .comm inputSource_e,1,1
 555              	 .section .text.servoConfig,"ax",%progbits
 556              	 .align 2
 557              	 .thumb
 558              	 .thumb_func
 560              	servoConfig:
 561              	.LFB619:
 562              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/servos.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "drivers/io_types.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "drivers/pwm_output.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // These must be consecutive, see 'reversedSources'
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** enum {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_ROLL = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_PITCH,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_YAW,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_THROTTLE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_ROLL,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_PITCH,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_YAW,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_THROTTLE,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX1,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX2,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX3,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX4,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_GIMBAL_PITCH,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_GIMBAL_ROLL,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_SOURCE_COUNT
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } inputSource_e;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // target servo channels
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef enum {
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_GIMBAL_PITCH = 0,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_GIMBAL_ROLL = 1,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPS = 2,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPPERON_1 = 3,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPPERON_2 = 4,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_RUDDER = 5,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_ELEVATOR = 6,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_THROTTLE = 7, // for internal combustion (IC) planes
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_BICOPTER_LEFT = 4,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_BICOPTER_RIGHT = 5,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_DUALCOPTER_LEFT = 4,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_DUALCOPTER_RIGHT = 5,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_1 = 3,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_2 = 4,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_3 = 5,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_4 = 6,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_LEFT = 0,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_RIGHT = 1,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_TOP = 2,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_RUD = 3
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoIndex_e; // FIXME rename to servoChannel_e
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_PLANE_INDEX_MIN SERVO_FLAPS
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_PLANE_INDEX_MAX SERVO_THROTTLE
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_DUALCOPTER_INDEX_MIN SERVO_DUALCOPTER_LEFT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_DUALCOPTER_INDEX_MAX SERVO_DUALCOPTER_RIGHT
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_SINGLECOPTER_INDEX_MIN SERVO_SINGLECOPTER_1
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_SINGLECOPTER_INDEX_MAX SERVO_SINGLECOPTER_4
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_FLAPPERONS_MIN SERVO_FLAPPERON_1
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_FLAPPERONS_MAX SERVO_FLAPPERON_2
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_RULES (2 * MAX_SUPPORTED_SERVOS)
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoMixer_s {
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t targetChannel;                  // servo that receives the output of the rule
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t inputSource;                    // input channel for this rule
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t rate;                            // range [-125;+125] ; can be used to adjust a rate 0-1
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t speed;                          // reduces the speed of the rule, 0=unlimited speed
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t min;                             // lower bound of rule range [0;100]% of servo max-min
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t max;                             // lower bound of rule range [0;100]% of servo max-min
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t box;                            // active rule if box is enabled, range [0;3], 0=no box
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoMixer_t;
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE_ARRAY(servoMixer_t, MAX_SERVO_RULES, customServoMixers);
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_SPEED UINT8_MAX
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_BOXES 3
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // Custom mixer configuration
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct mixerRules_s {
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t servoRuleCount;
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     const servoMixer_t *rule;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } mixerRules_t;
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** extern const mixerRules_t servoMixers[];
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoParam_s {
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint32_t reversedSources;               // the direction of servo movement for each input sourc
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t min;                            // servo min
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t max;                            // servo max
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t middle;                         // servo middle
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t rate;                            // range [-125;+125] ; can be used to adjust a rate 0-1
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t forwardFromChannel;              // RX channel index, 0 based.  See CHANNEL_FORWARDING_D
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoParam_t;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE_ARRAY(servoParam_t, MAX_SUPPORTED_SERVOS, servoParams);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoConfig_s {
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     servoDevConfig_t dev;
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint16_t servo_lowpass_freq;            // lowpass servo filter frequency selection; 1/1000ths 
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t tri_unarmed_servo;              // send tail servo correction pulses even when unarmed
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t channelForwardingStartChannel;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoConfig_t;
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE(servoConfig_t, servoConfig);
 563              	 .loc 11 130 0
 564              	 .cfi_startproc
 565              	 
 566              	 
 567              	 
 568 0000 80B4     	 push {r7}
 569              	.LCFI56:
 570              	 .cfi_def_cfa_offset 4
 571              	 .cfi_offset 7,-4
 572 0002 00AF     	 add r7,sp,#0
 573              	.LCFI57:
 574              	 .cfi_def_cfa_register 7
 575              	 .loc 11 130 0
 576 0004 024B     	 ldr r3,.L53
 577 0006 1846     	 mov r0,r3
 578 0008 BD46     	 mov sp,r7
 579              	.LCFI58:
 580              	 .cfi_def_cfa_register 13
 581              	 
 582 000a 5DF8047B 	 ldr r7,[sp],#4
 583              	.LCFI59:
 584              	 .cfi_restore 7
 585              	 .cfi_def_cfa_offset 0
 586 000e 7047     	 bx lr
 587              	.L54:
 588              	 .align 2
 589              	.L53:
 590 0010 00000000 	 .word servoConfig_System
 591              	 .cfi_endproc
 592              	.LFE619:
 594              	 .section .text.gpsRescueConfig,"ax",%progbits
 595              	 .align 2
 596              	 .thumb
 597              	 .thumb_func
 599              	gpsRescueConfig:
 600              	.LFB621:
 601              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/gps_rescue.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * This file is part of Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * Betaflight is free software: you can redistribute it and/or modify
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * it under the terms of the GNU General Public License as published by
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * the Free Software Foundation, either version 3 of the License, or
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * (at your option) any later version.
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  *
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * Betaflight is distributed in the hope that it will be useful,
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * GNU General Public License for more details.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  *
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * You should have received a copy of the GNU General Public License
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  * along with Betaflight. If not, see <http://www.gnu.org/licenses/>.
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  */
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****  
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** #include "common/axis.h"
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** 
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** #include "pg/pg.h"
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** 
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** typedef enum {
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     RESCUE_SANITY_OFF = 0,
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     RESCUE_SANITY_ON,
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     RESCUE_SANITY_FS_ONLY
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** } gpsRescueSanity_e;
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** typedef struct gpsRescue_s {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t angle; //degrees
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t initialAltitude; //meters
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t descentDistance; //meters
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t rescueGroundspeed; // centimeters per second
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t throttleP, throttleI, throttleD;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t yawP;
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t throttleMin;
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t throttleMax;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t throttleHover;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint16_t velP, velI, velD;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     uint8_t minSats;
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h ****     gpsRescueSanity_e sanityChecks;
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** } gpsRescueConfig_t;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\gps_rescue.h **** PG_DECLARE(gpsRescueConfig_t, gpsRescueConfig);
 602              	 .loc 12 43 0
 603              	 .cfi_startproc
 604              	 
 605              	 
 606              	 
 607 0000 80B4     	 push {r7}
 608              	.LCFI60:
 609              	 .cfi_def_cfa_offset 4
 610              	 .cfi_offset 7,-4
 611 0002 00AF     	 add r7,sp,#0
 612              	.LCFI61:
 613              	 .cfi_def_cfa_register 7
 614              	 .loc 12 43 0
 615 0004 024B     	 ldr r3,.L57
 616 0006 1846     	 mov r0,r3
 617 0008 BD46     	 mov sp,r7
 618              	.LCFI62:
 619              	 .cfi_def_cfa_register 13
 620              	 
 621 000a 5DF8047B 	 ldr r7,[sp],#4
 622              	.LCFI63:
 623              	 .cfi_restore 7
 624              	 .cfi_def_cfa_offset 0
 625 000e 7047     	 bx lr
 626              	.L58:
 627              	 .align 2
 628              	.L57:
 629 0010 00000000 	 .word gpsRescueConfig_System
 630              	 .cfi_endproc
 631              	.LFE621:
 633              	 .comm magHold,2,2
 634              	 .section .bss.flipOverAfterCrashMode,"aw",%nobits
 637              	flipOverAfterCrashMode:
 638 0000 00       	 .space 1
 639              	 .section .bss.disarmAt,"aw",%nobits
 640              	 .align 2
 643              	disarmAt:
 644 0000 00000000 	 .space 4
 645              	 .comm isRXDataNew,1,1
 646              	 .section .bss.lastArmingDisabledReason,"aw",%nobits
 647              	 .align 2
 650              	lastArmingDisabledReason:
 651 0000 00000000 	 .space 4
 652              	 .section .bss.lastDisarmTimeUs,"aw",%nobits
 653              	 .align 2
 656              	lastDisarmTimeUs:
 657 0000 00000000 	 .space 4
 658              	 .section .bss.tryingToArm,"aw",%nobits
 659              	 .align 2
 662              	tryingToArm:
 663 0000 00000000 	 .space 4
 664              	 .section .bss.runawayTakeoffDeactivateUs,"aw",%nobits
 665              	 .align 2
 668              	runawayTakeoffDeactivateUs:
 669 0000 00000000 	 .space 4
 670              	 .section .bss.runawayTakeoffAccumulatedUs,"aw",%nobits
 671              	 .align 2
 674              	runawayTakeoffAccumulatedUs:
 675 0000 00000000 	 .space 4
 676              	 .section .bss.runawayTakeoffCheckDisabled,"aw",%nobits
 679              	runawayTakeoffCheckDisabled:
 680 0000 00       	 .space 1
 681              	 .section .bss.runawayTakeoffTriggerUs,"aw",%nobits
 682              	 .align 2
 685              	runawayTakeoffTriggerUs:
 686 0000 00000000 	 .space 4
 687              	 .section .bss.runawayTakeoffTemporarilyDisabled,"aw",%nobits
 690              	runawayTakeoffTemporarilyDisabled:
 691 0000 00       	 .space 1
 692              	 .comm throttleCorrectionConfig_System,3,4
 693              	 .comm throttleCorrectionConfig_Copy,3,4
 694              	 .global throttleCorrectionConfig_Registry
 695              	 .section .pg_registry,"a",%progbits
 696              	 .align 2
 699              	throttleCorrectionConfig_Registry:
 700 0000 2700     	 .short 39
 701 0002 0300     	 .short 3
 702 0004 00000000 	 .word throttleCorrectionConfig_System
 703 0008 00000000 	 .word throttleCorrectionConfig_Copy
 704 000c 00000000 	 .word 0
 705 0010 00000000 	 .word pgResetTemplate_throttleCorrectionConfig
 706              	 .global pgResetTemplate_throttleCorrectionConfig
 707              	 .section .pg_resetdata,"a",%progbits
 708              	 .align 1
 711              	pgResetTemplate_throttleCorrectionConfig:
 712 0000 2003     	 .short 800
 713 0002 00       	 .byte 0
 714 0003 00       	 .section .text.applyAndSaveAccelerometerTrimsDelta,"ax",%progbits
 715              	 .align 2
 716              	 .global applyAndSaveAccelerometerTrimsDelta
 717              	 .thumb
 718              	 .thumb_func
 720              	applyAndSaveAccelerometerTrimsDelta:
 721              	.LFB623:
 722              	 .file 13 "../cleanflight/src/main/fc/fc_core.c"
   1:../cleanflight/src/main/fc/fc_core.c **** /*
   2:../cleanflight/src/main/fc/fc_core.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/fc/fc_core.c ****  *
   4:../cleanflight/src/main/fc/fc_core.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/fc/fc_core.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/fc/fc_core.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/fc/fc_core.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/fc/fc_core.c ****  * any later version.
   9:../cleanflight/src/main/fc/fc_core.c ****  *
  10:../cleanflight/src/main/fc/fc_core.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/fc/fc_core.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/fc/fc_core.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/fc/fc_core.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/fc/fc_core.c ****  *
  15:../cleanflight/src/main/fc/fc_core.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/fc/fc_core.c ****  * along with this software.
  17:../cleanflight/src/main/fc/fc_core.c ****  *
  18:../cleanflight/src/main/fc/fc_core.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/fc/fc_core.c ****  */
  20:../cleanflight/src/main/fc/fc_core.c **** 
  21:../cleanflight/src/main/fc/fc_core.c **** #include <stdbool.h>
  22:../cleanflight/src/main/fc/fc_core.c **** #include <stdint.h>
  23:../cleanflight/src/main/fc/fc_core.c **** #include <string.h>
  24:../cleanflight/src/main/fc/fc_core.c **** #include <math.h>
  25:../cleanflight/src/main/fc/fc_core.c **** 
  26:../cleanflight/src/main/fc/fc_core.c **** #include "platform.h"
  27:../cleanflight/src/main/fc/fc_core.c **** 
  28:../cleanflight/src/main/fc/fc_core.c **** #include "build/debug.h"
  29:../cleanflight/src/main/fc/fc_core.c **** 
  30:../cleanflight/src/main/fc/fc_core.c **** #include "blackbox/blackbox.h"
  31:../cleanflight/src/main/fc/fc_core.c **** 
  32:../cleanflight/src/main/fc/fc_core.c **** #include "common/axis.h"
  33:../cleanflight/src/main/fc/fc_core.c **** #include "common/filter.h"
  34:../cleanflight/src/main/fc/fc_core.c **** #include "common/maths.h"
  35:../cleanflight/src/main/fc/fc_core.c **** #include "common/utils.h"
  36:../cleanflight/src/main/fc/fc_core.c **** 
  37:../cleanflight/src/main/fc/fc_core.c **** #include "config/feature.h"
  38:../cleanflight/src/main/fc/fc_core.c **** #include "pg/pg.h"
  39:../cleanflight/src/main/fc/fc_core.c **** #include "pg/pg_ids.h"
  40:../cleanflight/src/main/fc/fc_core.c **** #include "pg/rx.h"
  41:../cleanflight/src/main/fc/fc_core.c **** 
  42:../cleanflight/src/main/fc/fc_core.c **** #include "drivers/light_led.h"
  43:../cleanflight/src/main/fc/fc_core.c **** #include "drivers/sound_beeper.h"
  44:../cleanflight/src/main/fc/fc_core.c **** #include "drivers/system.h"
  45:../cleanflight/src/main/fc/fc_core.c **** #include "drivers/time.h"
  46:../cleanflight/src/main/fc/fc_core.c **** #include "drivers/transponder_ir.h"
  47:../cleanflight/src/main/fc/fc_core.c **** 
  48:../cleanflight/src/main/fc/fc_core.c **** #include "sensors/acceleration.h"
  49:../cleanflight/src/main/fc/fc_core.c **** #include "sensors/barometer.h"
  50:../cleanflight/src/main/fc/fc_core.c **** #include "sensors/battery.h"
  51:../cleanflight/src/main/fc/fc_core.c **** #include "sensors/boardalignment.h"
  52:../cleanflight/src/main/fc/fc_core.c **** #include "sensors/gyro.h"
  53:../cleanflight/src/main/fc/fc_core.c **** #include "sensors/sensors.h"
  54:../cleanflight/src/main/fc/fc_core.c **** 
  55:../cleanflight/src/main/fc/fc_core.c **** #include "fc/config.h"
  56:../cleanflight/src/main/fc/fc_core.c **** #include "fc/controlrate_profile.h"
  57:../cleanflight/src/main/fc/fc_core.c **** #include "fc/fc_core.h"
  58:../cleanflight/src/main/fc/fc_core.c **** #include "fc/fc_rc.h"
  59:../cleanflight/src/main/fc/fc_core.c **** #include "fc/rc_adjustments.h"
  60:../cleanflight/src/main/fc/fc_core.c **** #include "fc/rc_controls.h"
  61:../cleanflight/src/main/fc/fc_core.c **** #include "fc/runtime_config.h"
  62:../cleanflight/src/main/fc/fc_core.c **** 
  63:../cleanflight/src/main/fc/fc_core.c **** #include "msp/msp_serial.h"
  64:../cleanflight/src/main/fc/fc_core.c **** 
  65:../cleanflight/src/main/fc/fc_core.c **** #include "interface/cli.h"
  66:../cleanflight/src/main/fc/fc_core.c **** 
  67:../cleanflight/src/main/fc/fc_core.c **** #include "io/beeper.h"
  68:../cleanflight/src/main/fc/fc_core.c **** #include "io/gps.h"
  69:../cleanflight/src/main/fc/fc_core.c **** #include "io/motors.h"
  70:../cleanflight/src/main/fc/fc_core.c **** #include "io/pidaudio.h"
  71:../cleanflight/src/main/fc/fc_core.c **** #include "io/servos.h"
  72:../cleanflight/src/main/fc/fc_core.c **** #include "io/serial.h"
  73:../cleanflight/src/main/fc/fc_core.c **** #include "io/statusindicator.h"
  74:../cleanflight/src/main/fc/fc_core.c **** #include "io/transponder_ir.h"
  75:../cleanflight/src/main/fc/fc_core.c **** #include "io/vtx_control.h"
  76:../cleanflight/src/main/fc/fc_core.c **** #include "io/vtx_rtc6705.h"
  77:../cleanflight/src/main/fc/fc_core.c **** 
  78:../cleanflight/src/main/fc/fc_core.c **** #include "rx/rx.h"
  79:../cleanflight/src/main/fc/fc_core.c **** 
  80:../cleanflight/src/main/fc/fc_core.c **** #include "scheduler/scheduler.h"
  81:../cleanflight/src/main/fc/fc_core.c **** 
  82:../cleanflight/src/main/fc/fc_core.c **** #include "telemetry/telemetry.h"
  83:../cleanflight/src/main/fc/fc_core.c **** 
  84:../cleanflight/src/main/fc/fc_core.c **** #include "flight/position.h"
  85:../cleanflight/src/main/fc/fc_core.c **** #include "flight/failsafe.h"
  86:../cleanflight/src/main/fc/fc_core.c **** #include "flight/imu.h"
  87:../cleanflight/src/main/fc/fc_core.c **** #include "flight/mixer.h"
  88:../cleanflight/src/main/fc/fc_core.c **** #include "flight/pid.h"
  89:../cleanflight/src/main/fc/fc_core.c **** #include "flight/servos.h"
  90:../cleanflight/src/main/fc/fc_core.c **** #include "flight/gps_rescue.h"
  91:../cleanflight/src/main/fc/fc_core.c **** 
  92:../cleanflight/src/main/fc/fc_core.c **** 
  93:../cleanflight/src/main/fc/fc_core.c **** // June 2013     V2.2-dev
  94:../cleanflight/src/main/fc/fc_core.c **** 
  95:../cleanflight/src/main/fc/fc_core.c **** enum {
  96:../cleanflight/src/main/fc/fc_core.c ****     ALIGN_GYRO = 0,
  97:../cleanflight/src/main/fc/fc_core.c ****     ALIGN_ACCEL = 1,
  98:../cleanflight/src/main/fc/fc_core.c ****     ALIGN_MAG = 2
  99:../cleanflight/src/main/fc/fc_core.c **** };
 100:../cleanflight/src/main/fc/fc_core.c **** 
 101:../cleanflight/src/main/fc/fc_core.c **** enum {
 102:../cleanflight/src/main/fc/fc_core.c ****     ARMING_DELAYED_DISARMED = 0,
 103:../cleanflight/src/main/fc/fc_core.c ****     ARMING_DELAYED_NORMAL = 1,
 104:../cleanflight/src/main/fc/fc_core.c ****     ARMING_DELAYED_CRASHFLIP = 2
 105:../cleanflight/src/main/fc/fc_core.c **** };
 106:../cleanflight/src/main/fc/fc_core.c **** 
 107:../cleanflight/src/main/fc/fc_core.c **** #define GYRO_WATCHDOG_DELAY 80 //  delay for gyro sync
 108:../cleanflight/src/main/fc/fc_core.c **** 
 109:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_RUNAWAY_TAKEOFF
 110:../cleanflight/src/main/fc/fc_core.c **** #define RUNAWAY_TAKEOFF_PIDSUM_THRESHOLD         600   // The pidSum threshold required to trigger 
 111:../cleanflight/src/main/fc/fc_core.c **** #define RUNAWAY_TAKEOFF_ACTIVATE_DELAY           75000 // (75ms) Time in microseconds where pidSum 
 112:../cleanflight/src/main/fc/fc_core.c **** #define RUNAWAY_TAKEOFF_DEACTIVATE_STICK_PERCENT 15    // 15% - minimum stick deflection during dea
 113:../cleanflight/src/main/fc/fc_core.c **** #define RUNAWAY_TAKEOFF_DEACTIVATE_PIDSUM_LIMIT  100   // 10.0% - pidSum limit during deactivation 
 114:../cleanflight/src/main/fc/fc_core.c **** #define RUNAWAY_TAKEOFF_GYRO_LIMIT_RP            15    // Roll/pitch 15 deg/sec threshold to preven
 115:../cleanflight/src/main/fc/fc_core.c **** #define RUNAWAY_TAKEOFF_GYRO_LIMIT_YAW           50    // Yaw 50 deg/sec threshold to prevent trigg
 116:../cleanflight/src/main/fc/fc_core.c **** #define RUNAWAY_TAKEOFF_HIGH_THROTTLE_PERCENT    75    // High throttle limit to accelerate deactiv
 117:../cleanflight/src/main/fc/fc_core.c **** 
 118:../cleanflight/src/main/fc/fc_core.c **** #define DEBUG_RUNAWAY_TAKEOFF_ENABLED_STATE      0
 119:../cleanflight/src/main/fc/fc_core.c **** #define DEBUG_RUNAWAY_TAKEOFF_ACTIVATING_DELAY   1
 120:../cleanflight/src/main/fc/fc_core.c **** #define DEBUG_RUNAWAY_TAKEOFF_DEACTIVATING_DELAY 2
 121:../cleanflight/src/main/fc/fc_core.c **** #define DEBUG_RUNAWAY_TAKEOFF_DEACTIVATING_TIME  3
 122:../cleanflight/src/main/fc/fc_core.c **** 
 123:../cleanflight/src/main/fc/fc_core.c **** #define DEBUG_RUNAWAY_TAKEOFF_TRUE  1
 124:../cleanflight/src/main/fc/fc_core.c **** #define DEBUG_RUNAWAY_TAKEOFF_FALSE 0
 125:../cleanflight/src/main/fc/fc_core.c **** #endif
 126:../cleanflight/src/main/fc/fc_core.c **** 
 127:../cleanflight/src/main/fc/fc_core.c **** #if defined(USE_GPS) || defined(USE_MAG)
 128:../cleanflight/src/main/fc/fc_core.c **** int16_t magHold;
 129:../cleanflight/src/main/fc/fc_core.c **** #endif
 130:../cleanflight/src/main/fc/fc_core.c **** 
 131:../cleanflight/src/main/fc/fc_core.c **** static bool flipOverAfterCrashMode = false;
 132:../cleanflight/src/main/fc/fc_core.c **** 
 133:../cleanflight/src/main/fc/fc_core.c **** static uint32_t disarmAt;     // Time of automatic disarm when "Don't spin the motors when armed" i
 134:../cleanflight/src/main/fc/fc_core.c **** 
 135:../cleanflight/src/main/fc/fc_core.c **** bool isRXDataNew;
 136:../cleanflight/src/main/fc/fc_core.c **** static int lastArmingDisabledReason = 0;
 137:../cleanflight/src/main/fc/fc_core.c **** static timeUs_t lastDisarmTimeUs;
 138:../cleanflight/src/main/fc/fc_core.c **** static int tryingToArm = ARMING_DELAYED_DISARMED;
 139:../cleanflight/src/main/fc/fc_core.c **** 
 140:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_RUNAWAY_TAKEOFF
 141:../cleanflight/src/main/fc/fc_core.c **** static timeUs_t runawayTakeoffDeactivateUs = 0;
 142:../cleanflight/src/main/fc/fc_core.c **** static timeUs_t runawayTakeoffAccumulatedUs = 0;
 143:../cleanflight/src/main/fc/fc_core.c **** static bool runawayTakeoffCheckDisabled = false;
 144:../cleanflight/src/main/fc/fc_core.c **** static timeUs_t runawayTakeoffTriggerUs = 0;
 145:../cleanflight/src/main/fc/fc_core.c **** static bool runawayTakeoffTemporarilyDisabled = false;
 146:../cleanflight/src/main/fc/fc_core.c **** #endif
 147:../cleanflight/src/main/fc/fc_core.c **** 
 148:../cleanflight/src/main/fc/fc_core.c **** PG_REGISTER_WITH_RESET_TEMPLATE(throttleCorrectionConfig_t, throttleCorrectionConfig, PG_THROTTLE_C
 149:../cleanflight/src/main/fc/fc_core.c **** 
 150:../cleanflight/src/main/fc/fc_core.c **** PG_RESET_TEMPLATE(throttleCorrectionConfig_t, throttleCorrectionConfig,
 151:../cleanflight/src/main/fc/fc_core.c ****     .throttle_correction_value = 0,      // could 10 with althold or 40 for fpv
 152:../cleanflight/src/main/fc/fc_core.c ****     .throttle_correction_angle = 800     // could be 80.0 deg with atlhold or 45.0 for fpv
 153:../cleanflight/src/main/fc/fc_core.c **** );
 154:../cleanflight/src/main/fc/fc_core.c **** 
 155:../cleanflight/src/main/fc/fc_core.c **** void applyAndSaveAccelerometerTrimsDelta(rollAndPitchTrims_t *rollAndPitchTrimsDelta)
 156:../cleanflight/src/main/fc/fc_core.c **** {
 723              	 .loc 13 156 0
 724              	 .cfi_startproc
 725              	 
 726              	 
 727 0000 80B5     	 push {r7,lr}
 728              	.LCFI64:
 729              	 .cfi_def_cfa_offset 8
 730              	 .cfi_offset 7,-8
 731              	 .cfi_offset 14,-4
 732 0002 82B0     	 sub sp,sp,#8
 733              	.LCFI65:
 734              	 .cfi_def_cfa_offset 16
 735 0004 00AF     	 add r7,sp,#0
 736              	.LCFI66:
 737              	 .cfi_def_cfa_register 7
 738 0006 7860     	 str r0,[r7,#4]
 157:../cleanflight/src/main/fc/fc_core.c ****     accelerometerConfigMutable()->accelerometerTrims.values.roll += rollAndPitchTrimsDelta->values.
 739              	 .loc 13 157 0
 740 0008 FFF7FEFF 	 bl accelerometerConfigMutable
 741 000c 0346     	 mov r3,r0
 742 000e B3F90B20 	 ldrsh r2,[r3,#11]
 743 0012 92B2     	 uxth r2,r2
 744 0014 91B2     	 uxth r1,r2
 745 0016 7A68     	 ldr r2,[r7,#4]
 746 0018 B2F90020 	 ldrsh r2,[r2]
 747 001c 92B2     	 uxth r2,r2
 748 001e 92B2     	 uxth r2,r2
 749 0020 0A44     	 add r2,r2,r1
 750 0022 92B2     	 uxth r2,r2
 751 0024 92B2     	 uxth r2,r2
 752 0026 A3F80B20 	 strh r2,[r3,#11]
 158:../cleanflight/src/main/fc/fc_core.c ****     accelerometerConfigMutable()->accelerometerTrims.values.pitch += rollAndPitchTrimsDelta->values
 753              	 .loc 13 158 0
 754 002a FFF7FEFF 	 bl accelerometerConfigMutable
 755 002e 0346     	 mov r3,r0
 756 0030 B3F90D20 	 ldrsh r2,[r3,#13]
 757 0034 92B2     	 uxth r2,r2
 758 0036 91B2     	 uxth r1,r2
 759 0038 7A68     	 ldr r2,[r7,#4]
 760 003a B2F90220 	 ldrsh r2,[r2,#2]
 761 003e 92B2     	 uxth r2,r2
 762 0040 92B2     	 uxth r2,r2
 763 0042 0A44     	 add r2,r2,r1
 764 0044 92B2     	 uxth r2,r2
 765 0046 92B2     	 uxth r2,r2
 766 0048 A3F80D20 	 strh r2,[r3,#13]
 159:../cleanflight/src/main/fc/fc_core.c **** 
 160:../cleanflight/src/main/fc/fc_core.c ****     saveConfigAndNotify();
 767              	 .loc 13 160 0
 768 004c FFF7FEFF 	 bl saveConfigAndNotify
 161:../cleanflight/src/main/fc/fc_core.c **** }
 769              	 .loc 13 161 0
 770 0050 0837     	 adds r7,r7,#8
 771              	.LCFI67:
 772              	 .cfi_def_cfa_offset 8
 773 0052 BD46     	 mov sp,r7
 774              	.LCFI68:
 775              	 .cfi_def_cfa_register 13
 776              	 
 777 0054 80BD     	 pop {r7,pc}
 778              	 .cfi_endproc
 779              	.LFE623:
 781 0056 00BF     	 .section .text.isCalibrating,"ax",%progbits
 782              	 .align 2
 783              	 .thumb
 784              	 .thumb_func
 786              	isCalibrating:
 787              	.LFB624:
 162:../cleanflight/src/main/fc/fc_core.c **** 
 163:../cleanflight/src/main/fc/fc_core.c **** static bool isCalibrating(void)
 164:../cleanflight/src/main/fc/fc_core.c **** {
 788              	 .loc 13 164 0
 789              	 .cfi_startproc
 790              	 
 791              	 
 792 0000 80B5     	 push {r7,lr}
 793              	.LCFI69:
 794              	 .cfi_def_cfa_offset 8
 795              	 .cfi_offset 7,-8
 796              	 .cfi_offset 14,-4
 797 0002 00AF     	 add r7,sp,#0
 798              	.LCFI70:
 799              	 .cfi_def_cfa_register 7
 165:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_BARO
 166:../cleanflight/src/main/fc/fc_core.c ****     if (sensors(SENSOR_BARO) && !isBaroCalibrationComplete()) {
 800              	 .loc 13 166 0
 801 0004 0420     	 movs r0,#4
 802 0006 FFF7FEFF 	 bl sensors
 803 000a 0346     	 mov r3,r0
 804 000c 002B     	 cmp r3,#0
 805 000e 09D0     	 beq .L61
 806              	 .loc 13 166 0 is_stmt 0 discriminator 1
 807 0010 FFF7FEFF 	 bl isBaroCalibrationComplete
 808 0014 0346     	 mov r3,r0
 809 0016 83F00103 	 eor r3,r3,#1
 810 001a DBB2     	 uxtb r3,r3
 811 001c 002B     	 cmp r3,#0
 812 001e 01D0     	 beq .L61
 167:../cleanflight/src/main/fc/fc_core.c ****         return true;
 813              	 .loc 13 167 0 is_stmt 1
 814 0020 0123     	 movs r3,#1
 815 0022 1BE0     	 b .L62
 816              	.L61:
 168:../cleanflight/src/main/fc/fc_core.c ****     }
 169:../cleanflight/src/main/fc/fc_core.c **** #endif
 170:../cleanflight/src/main/fc/fc_core.c **** 
 171:../cleanflight/src/main/fc/fc_core.c ****     // Note: compass calibration is handled completely differently, outside of the main loop, see f
 172:../cleanflight/src/main/fc/fc_core.c **** 
 173:../cleanflight/src/main/fc/fc_core.c ****     return (!accIsCalibrationComplete() && sensors(SENSOR_ACC)) || (!isGyroCalibrationComplete());
 817              	 .loc 13 173 0
 818 0024 FFF7FEFF 	 bl accIsCalibrationComplete
 819 0028 0346     	 mov r3,r0
 820 002a 83F00103 	 eor r3,r3,#1
 821 002e DBB2     	 uxtb r3,r3
 822 0030 002B     	 cmp r3,#0
 823 0032 05D0     	 beq .L63
 824              	 .loc 13 173 0 is_stmt 0 discriminator 1
 825 0034 0220     	 movs r0,#2
 826 0036 FFF7FEFF 	 bl sensors
 827 003a 0346     	 mov r3,r0
 828 003c 002B     	 cmp r3,#0
 829 003e 07D1     	 bne .L64
 830              	.L63:
 831              	 .loc 13 173 0 discriminator 4
 832 0040 FFF7FEFF 	 bl isGyroCalibrationComplete
 833 0044 0346     	 mov r3,r0
 834 0046 83F00103 	 eor r3,r3,#1
 835 004a DBB2     	 uxtb r3,r3
 836 004c 002B     	 cmp r3,#0
 837 004e 01D0     	 beq .L65
 838              	.L64:
 839              	 .loc 13 173 0 discriminator 5
 840 0050 0123     	 movs r3,#1
 841 0052 00E0     	 b .L66
 842              	.L65:
 843              	 .loc 13 173 0 discriminator 6
 844 0054 0023     	 movs r3,#0
 845              	.L66:
 846              	 .loc 13 173 0 discriminator 8
 847 0056 03F00103 	 and r3,r3,#1
 848 005a DBB2     	 uxtb r3,r3
 849              	.L62:
 174:../cleanflight/src/main/fc/fc_core.c **** }
 850              	 .loc 13 174 0 is_stmt 1
 851 005c 1846     	 mov r0,r3
 852 005e 80BD     	 pop {r7,pc}
 853              	 .cfi_endproc
 854              	.LFE624:
 856              	 .section .text.resetArmingDisabled,"ax",%progbits
 857              	 .align 2
 858              	 .global resetArmingDisabled
 859              	 .thumb
 860              	 .thumb_func
 862              	resetArmingDisabled:
 863              	.LFB625:
 175:../cleanflight/src/main/fc/fc_core.c **** 
 176:../cleanflight/src/main/fc/fc_core.c **** void resetArmingDisabled(void)
 177:../cleanflight/src/main/fc/fc_core.c **** {
 864              	 .loc 13 177 0
 865              	 .cfi_startproc
 866              	 
 867              	 
 868              	 
 869 0000 80B4     	 push {r7}
 870              	.LCFI71:
 871              	 .cfi_def_cfa_offset 4
 872              	 .cfi_offset 7,-4
 873 0002 00AF     	 add r7,sp,#0
 874              	.LCFI72:
 875              	 .cfi_def_cfa_register 7
 178:../cleanflight/src/main/fc/fc_core.c ****     lastArmingDisabledReason = 0;
 876              	 .loc 13 178 0
 877 0004 034B     	 ldr r3,.L68
 878 0006 0022     	 movs r2,#0
 879 0008 1A60     	 str r2,[r3]
 179:../cleanflight/src/main/fc/fc_core.c **** }
 880              	 .loc 13 179 0
 881 000a BD46     	 mov sp,r7
 882              	.LCFI73:
 883              	 .cfi_def_cfa_register 13
 884              	 
 885 000c 5DF8047B 	 ldr r7,[sp],#4
 886              	.LCFI74:
 887              	 .cfi_restore 7
 888              	 .cfi_def_cfa_offset 0
 889 0010 7047     	 bx lr
 890              	.L69:
 891 0012 00BF     	 .align 2
 892              	.L68:
 893 0014 00000000 	 .word lastArmingDisabledReason
 894              	 .cfi_endproc
 895              	.LFE625:
 897              	 .section .text.updateArmingStatus,"ax",%progbits
 898              	 .align 2
 899              	 .global updateArmingStatus
 900              	 .thumb
 901              	 .thumb_func
 903              	updateArmingStatus:
 904              	.LFB626:
 180:../cleanflight/src/main/fc/fc_core.c **** 
 181:../cleanflight/src/main/fc/fc_core.c **** void updateArmingStatus(void)
 182:../cleanflight/src/main/fc/fc_core.c **** {
 905              	 .loc 13 182 0
 906              	 .cfi_startproc
 907              	 
 908              	 
 909 0000 90B5     	 push {r4,r7,lr}
 910              	.LCFI75:
 911              	 .cfi_def_cfa_offset 12
 912              	 .cfi_offset 4,-12
 913              	 .cfi_offset 7,-8
 914              	 .cfi_offset 14,-4
 915 0002 83B0     	 sub sp,sp,#12
 916              	.LCFI76:
 917              	 .cfi_def_cfa_offset 24
 918 0004 00AF     	 add r7,sp,#0
 919              	.LCFI77:
 920              	 .cfi_def_cfa_register 7
 183:../cleanflight/src/main/fc/fc_core.c ****     if (ARMING_FLAG(ARMED)) {
 921              	 .loc 13 183 0
 922 0006 BF4B     	 ldr r3,.L104
 923 0008 1B78     	 ldrb r3,[r3]
 924 000a 03F00103 	 and r3,r3,#1
 925 000e 002B     	 cmp r3,#0
 926 0010 04D0     	 beq .L71
 184:../cleanflight/src/main/fc/fc_core.c ****         LED0_ON;
 927              	 .loc 13 184 0
 928 0012 0020     	 movs r0,#0
 929 0014 0121     	 movs r1,#1
 930 0016 FFF7FEFF 	 bl ledSet
 931 001a 6FE1     	 b .L70
 932              	.L71:
 185:../cleanflight/src/main/fc/fc_core.c ****     } else {
 186:../cleanflight/src/main/fc/fc_core.c ****         // Check if the power on arming grace time has elapsed
 187:../cleanflight/src/main/fc/fc_core.c ****         if ((getArmingDisableFlags() & ARMING_DISABLED_BOOT_GRACE_TIME) && (millis() >= systemConfi
 933              	 .loc 13 187 0
 934 001c FFF7FEFF 	 bl getArmingDisableFlags
 935 0020 0346     	 mov r3,r0
 936 0022 03F48073 	 and r3,r3,#256
 937 0026 002B     	 cmp r3,#0
 938 0028 11D0     	 beq .L73
 939              	 .loc 13 187 0 is_stmt 0 discriminator 1
 940 002a FFF7FEFF 	 bl millis
 941 002e 0446     	 mov r4,r0
 942 0030 FFF7FEFF 	 bl systemConfig
 943 0034 0346     	 mov r3,r0
 944 0036 9B79     	 ldrb r3,[r3,#6]
 945 0038 1A46     	 mov r2,r3
 946 003a 4FF47A73 	 mov r3,#1000
 947 003e 03FB02F3 	 mul r3,r3,r2
 948 0042 9C42     	 cmp r4,r3
 949 0044 03D3     	 bcc .L73
 188:../cleanflight/src/main/fc/fc_core.c ****             // If so, unset the grace time arming disable flag
 189:../cleanflight/src/main/fc/fc_core.c ****             unsetArmingDisabled(ARMING_DISABLED_BOOT_GRACE_TIME);
 950              	 .loc 13 189 0 is_stmt 1
 951 0046 4FF48070 	 mov r0,#256
 952 004a FFF7FEFF 	 bl unsetArmingDisabled
 953              	.L73:
 190:../cleanflight/src/main/fc/fc_core.c ****         }
 191:../cleanflight/src/main/fc/fc_core.c **** 
 192:../cleanflight/src/main/fc/fc_core.c ****         // Clear the crash flip active status
 193:../cleanflight/src/main/fc/fc_core.c ****         flipOverAfterCrashMode = false;
 954              	 .loc 13 193 0
 955 004e AE4B     	 ldr r3,.L104+4
 956 0050 0022     	 movs r2,#0
 957 0052 1A70     	 strb r2,[r3]
 194:../cleanflight/src/main/fc/fc_core.c **** 
 195:../cleanflight/src/main/fc/fc_core.c ****         // If switch is used for arming then check it is not defaulting to on when the RX link reco
 196:../cleanflight/src/main/fc/fc_core.c ****         if (!isUsingSticksForArming()) {
 958              	 .loc 13 196 0
 959 0054 FFF7FEFF 	 bl isUsingSticksForArming
 960 0058 0346     	 mov r3,r0
 961 005a 83F00103 	 eor r3,r3,#1
 962 005e DBB2     	 uxtb r3,r3
 963 0060 002B     	 cmp r3,#0
 964 0062 34D0     	 beq .L74
 965              	.LBB2:
 197:../cleanflight/src/main/fc/fc_core.c ****             static bool hadRx = false;
 198:../cleanflight/src/main/fc/fc_core.c ****             const bool haveRx = rxIsReceivingSignal();
 966              	 .loc 13 198 0
 967 0064 FFF7FEFF 	 bl rxIsReceivingSignal
 968 0068 0346     	 mov r3,r0
 969 006a FB71     	 strb r3,[r7,#7]
 199:../cleanflight/src/main/fc/fc_core.c **** 
 200:../cleanflight/src/main/fc/fc_core.c ****             const bool justGotRxBack = !hadRx && haveRx;
 970              	 .loc 13 200 0
 971 006c A74B     	 ldr r3,.L104+8
 972 006e 1B78     	 ldrb r3,[r3]
 973 0070 83F00103 	 eor r3,r3,#1
 974 0074 DBB2     	 uxtb r3,r3
 975 0076 002B     	 cmp r3,#0
 976 0078 04D0     	 beq .L75
 977              	 .loc 13 200 0 is_stmt 0 discriminator 1
 978 007a FB79     	 ldrb r3,[r7,#7]
 979 007c 002B     	 cmp r3,#0
 980 007e 01D0     	 beq .L75
 981              	 .loc 13 200 0 discriminator 3
 982 0080 0123     	 movs r3,#1
 983 0082 00E0     	 b .L76
 984              	.L75:
 985              	 .loc 13 200 0 discriminator 4
 986 0084 0023     	 movs r3,#0
 987              	.L76:
 988              	 .loc 13 200 0 discriminator 6
 989 0086 BB71     	 strb r3,[r7,#6]
 990 0088 BB79     	 ldrb r3,[r7,#6]
 991 008a 03F00103 	 and r3,r3,#1
 992 008e BB71     	 strb r3,[r7,#6]
 201:../cleanflight/src/main/fc/fc_core.c **** 
 202:../cleanflight/src/main/fc/fc_core.c ****             if (justGotRxBack && IS_RC_MODE_ACTIVE(BOXARM)) {
 993              	 .loc 13 202 0 is_stmt 1 discriminator 6
 994 0090 BB79     	 ldrb r3,[r7,#6]
 995 0092 002B     	 cmp r3,#0
 996 0094 09D0     	 beq .L77
 997              	 .loc 13 202 0 is_stmt 0 discriminator 1
 998 0096 0020     	 movs r0,#0
 999 0098 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1000 009c 0346     	 mov r3,r0
 1001 009e 002B     	 cmp r3,#0
 1002 00a0 03D0     	 beq .L77
 203:../cleanflight/src/main/fc/fc_core.c ****                 // If the RX has just started to receive a signal again and the arm switch is on, a
 204:../cleanflight/src/main/fc/fc_core.c ****                 setArmingDisabled(ARMING_DISABLED_BAD_RX_RECOVERY);
 1003              	 .loc 13 204 0 is_stmt 1
 1004 00a2 0820     	 movs r0,#8
 1005 00a4 FFF7FEFF 	 bl setArmingDisabled
 1006 00a8 0EE0     	 b .L78
 1007              	.L77:
 205:../cleanflight/src/main/fc/fc_core.c ****             } else if (haveRx && !IS_RC_MODE_ACTIVE(BOXARM)) {
 1008              	 .loc 13 205 0
 1009 00aa FB79     	 ldrb r3,[r7,#7]
 1010 00ac 002B     	 cmp r3,#0
 1011 00ae 0BD0     	 beq .L78
 1012              	 .loc 13 205 0 is_stmt 0 discriminator 1
 1013 00b0 0020     	 movs r0,#0
 1014 00b2 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1015 00b6 0346     	 mov r3,r0
 1016 00b8 83F00103 	 eor r3,r3,#1
 1017 00bc DBB2     	 uxtb r3,r3
 1018 00be 002B     	 cmp r3,#0
 1019 00c0 02D0     	 beq .L78
 206:../cleanflight/src/main/fc/fc_core.c ****                 // If RX signal is OK and the arm switch is off, remove arming restriction
 207:../cleanflight/src/main/fc/fc_core.c ****                 unsetArmingDisabled(ARMING_DISABLED_BAD_RX_RECOVERY);
 1020              	 .loc 13 207 0 is_stmt 1
 1021 00c2 0820     	 movs r0,#8
 1022 00c4 FFF7FEFF 	 bl unsetArmingDisabled
 1023              	.L78:
 208:../cleanflight/src/main/fc/fc_core.c ****             }
 209:../cleanflight/src/main/fc/fc_core.c **** 
 210:../cleanflight/src/main/fc/fc_core.c ****             hadRx = haveRx;
 1024              	 .loc 13 210 0
 1025 00c8 904A     	 ldr r2,.L104+8
 1026 00ca FB79     	 ldrb r3,[r7,#7]
 1027 00cc 1370     	 strb r3,[r2]
 1028              	.L74:
 1029              	.LBE2:
 211:../cleanflight/src/main/fc/fc_core.c ****         }
 212:../cleanflight/src/main/fc/fc_core.c **** 
 213:../cleanflight/src/main/fc/fc_core.c ****         if (IS_RC_MODE_ACTIVE(BOXFAILSAFE)) {
 1030              	 .loc 13 213 0
 1031 00ce 0920     	 movs r0,#9
 1032 00d0 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1033 00d4 0346     	 mov r3,r0
 1034 00d6 002B     	 cmp r3,#0
 1035 00d8 03D0     	 beq .L79
 214:../cleanflight/src/main/fc/fc_core.c ****             setArmingDisabled(ARMING_DISABLED_BOXFAILSAFE);
 1036              	 .loc 13 214 0
 1037 00da 1020     	 movs r0,#16
 1038 00dc FFF7FEFF 	 bl setArmingDisabled
 1039 00e0 02E0     	 b .L80
 1040              	.L79:
 215:../cleanflight/src/main/fc/fc_core.c ****         } else {
 216:../cleanflight/src/main/fc/fc_core.c ****             unsetArmingDisabled(ARMING_DISABLED_BOXFAILSAFE);
 1041              	 .loc 13 216 0
 1042 00e2 1020     	 movs r0,#16
 1043 00e4 FFF7FEFF 	 bl unsetArmingDisabled
 1044              	.L80:
 217:../cleanflight/src/main/fc/fc_core.c ****         }
 218:../cleanflight/src/main/fc/fc_core.c **** 
 219:../cleanflight/src/main/fc/fc_core.c ****         if (calculateThrottleStatus() != THROTTLE_LOW) {
 1045              	 .loc 13 219 0
 1046 00e8 FFF7FEFF 	 bl calculateThrottleStatus
 1047 00ec 0346     	 mov r3,r0
 1048 00ee 002B     	 cmp r3,#0
 1049 00f0 03D0     	 beq .L81
 220:../cleanflight/src/main/fc/fc_core.c ****             setArmingDisabled(ARMING_DISABLED_THROTTLE);
 1050              	 .loc 13 220 0
 1051 00f2 4020     	 movs r0,#64
 1052 00f4 FFF7FEFF 	 bl setArmingDisabled
 1053 00f8 02E0     	 b .L82
 1054              	.L81:
 221:../cleanflight/src/main/fc/fc_core.c ****         } else {
 222:../cleanflight/src/main/fc/fc_core.c ****             unsetArmingDisabled(ARMING_DISABLED_THROTTLE);
 1055              	 .loc 13 222 0
 1056 00fa 4020     	 movs r0,#64
 1057 00fc FFF7FEFF 	 bl unsetArmingDisabled
 1058              	.L82:
 223:../cleanflight/src/main/fc/fc_core.c ****         }
 224:../cleanflight/src/main/fc/fc_core.c **** 
 225:../cleanflight/src/main/fc/fc_core.c ****         if (!STATE(SMALL_ANGLE) && !IS_RC_MODE_ACTIVE(BOXFLIPOVERAFTERCRASH)) {
 1059              	 .loc 13 225 0
 1060 0100 834B     	 ldr r3,.L104+12
 1061 0102 1B78     	 ldrb r3,[r3]
 1062 0104 03F00803 	 and r3,r3,#8
 1063 0108 002B     	 cmp r3,#0
 1064 010a 0CD1     	 bne .L83
 1065              	 .loc 13 225 0 is_stmt 0 discriminator 1
 1066 010c 1E20     	 movs r0,#30
 1067 010e FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1068 0112 0346     	 mov r3,r0
 1069 0114 83F00103 	 eor r3,r3,#1
 1070 0118 DBB2     	 uxtb r3,r3
 1071 011a 002B     	 cmp r3,#0
 1072 011c 03D0     	 beq .L83
 226:../cleanflight/src/main/fc/fc_core.c ****             setArmingDisabled(ARMING_DISABLED_ANGLE);
 1073              	 .loc 13 226 0 is_stmt 1
 1074 011e 8020     	 movs r0,#128
 1075 0120 FFF7FEFF 	 bl setArmingDisabled
 1076 0124 02E0     	 b .L84
 1077              	.L83:
 227:../cleanflight/src/main/fc/fc_core.c ****         } else {
 228:../cleanflight/src/main/fc/fc_core.c ****             unsetArmingDisabled(ARMING_DISABLED_ANGLE);
 1078              	 .loc 13 228 0
 1079 0126 8020     	 movs r0,#128
 1080 0128 FFF7FEFF 	 bl unsetArmingDisabled
 1081              	.L84:
 229:../cleanflight/src/main/fc/fc_core.c ****         }
 230:../cleanflight/src/main/fc/fc_core.c **** 
 231:../cleanflight/src/main/fc/fc_core.c ****         if (averageSystemLoadPercent > 100) {
 1082              	 .loc 13 231 0
 1083 012c 794B     	 ldr r3,.L104+16
 1084 012e 1B88     	 ldrh r3,[r3]
 1085 0130 642B     	 cmp r3,#100
 1086 0132 04D9     	 bls .L85
 232:../cleanflight/src/main/fc/fc_core.c ****             setArmingDisabled(ARMING_DISABLED_LOAD);
 1087              	 .loc 13 232 0
 1088 0134 4FF48060 	 mov r0,#1024
 1089 0138 FFF7FEFF 	 bl setArmingDisabled
 1090 013c 03E0     	 b .L86
 1091              	.L85:
 233:../cleanflight/src/main/fc/fc_core.c ****         } else {
 234:../cleanflight/src/main/fc/fc_core.c ****             unsetArmingDisabled(ARMING_DISABLED_LOAD);
 1092              	 .loc 13 234 0
 1093 013e 4FF48060 	 mov r0,#1024
 1094 0142 FFF7FEFF 	 bl unsetArmingDisabled
 1095              	.L86:
 235:../cleanflight/src/main/fc/fc_core.c ****         }
 236:../cleanflight/src/main/fc/fc_core.c **** 
 237:../cleanflight/src/main/fc/fc_core.c ****         if (isCalibrating()) {
 1096              	 .loc 13 237 0
 1097 0146 FFF7FEFF 	 bl isCalibrating
 1098 014a 0346     	 mov r3,r0
 1099 014c 002B     	 cmp r3,#0
 1100 014e 04D0     	 beq .L87
 238:../cleanflight/src/main/fc/fc_core.c ****             setArmingDisabled(ARMING_DISABLED_CALIBRATING);
 1101              	 .loc 13 238 0
 1102 0150 4FF40060 	 mov r0,#2048
 1103 0154 FFF7FEFF 	 bl setArmingDisabled
 1104 0158 03E0     	 b .L88
 1105              	.L87:
 239:../cleanflight/src/main/fc/fc_core.c ****         } else {
 240:../cleanflight/src/main/fc/fc_core.c ****             unsetArmingDisabled(ARMING_DISABLED_CALIBRATING);
 1106              	 .loc 13 240 0
 1107 015a 4FF40060 	 mov r0,#2048
 1108 015e FFF7FEFF 	 bl unsetArmingDisabled
 1109              	.L88:
 241:../cleanflight/src/main/fc/fc_core.c ****         }
 242:../cleanflight/src/main/fc/fc_core.c **** 
 243:../cleanflight/src/main/fc/fc_core.c ****         if (isModeActivationConditionPresent(BOXPREARM)) {
 1110              	 .loc 13 243 0
 1111 0162 1F20     	 movs r0,#31
 1112 0164 FFF7FEFF 	 bl isModeActivationConditionPresent
 1113 0168 0346     	 mov r3,r0
 1114 016a 002B     	 cmp r3,#0
 1115 016c 14D0     	 beq .L89
 244:../cleanflight/src/main/fc/fc_core.c ****             if (IS_RC_MODE_ACTIVE(BOXPREARM) && !ARMING_FLAG(WAS_ARMED_WITH_PREARM)) {
 1116              	 .loc 13 244 0
 1117 016e 1F20     	 movs r0,#31
 1118 0170 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1119 0174 0346     	 mov r3,r0
 1120 0176 002B     	 cmp r3,#0
 1121 0178 0AD0     	 beq .L90
 1122              	 .loc 13 244 0 is_stmt 0 discriminator 1
 1123 017a 624B     	 ldr r3,.L104
 1124 017c 1B78     	 ldrb r3,[r3]
 1125 017e 03F00403 	 and r3,r3,#4
 1126 0182 002B     	 cmp r3,#0
 1127 0184 04D1     	 bne .L90
 245:../cleanflight/src/main/fc/fc_core.c ****                 unsetArmingDisabled(ARMING_DISABLED_NOPREARM);
 1128              	 .loc 13 245 0 is_stmt 1
 1129 0186 4FF40070 	 mov r0,#512
 1130 018a FFF7FEFF 	 bl unsetArmingDisabled
 1131 018e 03E0     	 b .L89
 1132              	.L90:
 246:../cleanflight/src/main/fc/fc_core.c ****             } else {
 247:../cleanflight/src/main/fc/fc_core.c ****                 setArmingDisabled(ARMING_DISABLED_NOPREARM);
 1133              	 .loc 13 247 0
 1134 0190 4FF40070 	 mov r0,#512
 1135 0194 FFF7FEFF 	 bl setArmingDisabled
 1136              	.L89:
 248:../cleanflight/src/main/fc/fc_core.c ****             }
 249:../cleanflight/src/main/fc/fc_core.c ****         }
 250:../cleanflight/src/main/fc/fc_core.c **** 
 251:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_GPS_RESCUE
 252:../cleanflight/src/main/fc/fc_core.c ****         if (isModeActivationConditionPresent(BOXGPSRESCUE)) {
 1137              	 .loc 13 252 0
 1138 0198 0A20     	 movs r0,#10
 1139 019a FFF7FEFF 	 bl isModeActivationConditionPresent
 1140 019e 0346     	 mov r3,r0
 1141 01a0 002B     	 cmp r3,#0
 1142 01a2 1AD0     	 beq .L91
 253:../cleanflight/src/main/fc/fc_core.c ****             if (!gpsRescueConfig()->minSats || STATE(GPS_FIX_HOME) || ARMING_FLAG(WAS_EVER_ARMED)) 
 1143              	 .loc 13 253 0
 1144 01a4 FFF7FEFF 	 bl gpsRescueConfig
 1145 01a8 0346     	 mov r3,r0
 1146 01aa 1B7F     	 ldrb r3,[r3,#28]
 1147 01ac 002B     	 cmp r3,#0
 1148 01ae 0BD0     	 beq .L92
 1149              	 .loc 13 253 0 is_stmt 0 discriminator 1
 1150 01b0 574B     	 ldr r3,.L104+12
 1151 01b2 1B78     	 ldrb r3,[r3]
 1152 01b4 03F00103 	 and r3,r3,#1
 1153 01b8 002B     	 cmp r3,#0
 1154 01ba 05D1     	 bne .L92
 1155              	 .loc 13 253 0 discriminator 2
 1156 01bc 514B     	 ldr r3,.L104
 1157 01be 1B78     	 ldrb r3,[r3]
 1158 01c0 03F00203 	 and r3,r3,#2
 1159 01c4 002B     	 cmp r3,#0
 1160 01c6 04D0     	 beq .L93
 1161              	.L92:
 254:../cleanflight/src/main/fc/fc_core.c ****                 unsetArmingDisabled(ARMING_DISABLED_GPS);
 1162              	 .loc 13 254 0 is_stmt 1
 1163 01c8 4FF48020 	 mov r0,#262144
 1164 01cc FFF7FEFF 	 bl unsetArmingDisabled
 1165 01d0 03E0     	 b .L91
 1166              	.L93:
 255:../cleanflight/src/main/fc/fc_core.c ****             } else {
 256:../cleanflight/src/main/fc/fc_core.c ****                 setArmingDisabled(ARMING_DISABLED_GPS);
 1167              	 .loc 13 256 0
 1168 01d2 4FF48020 	 mov r0,#262144
 1169 01d6 FFF7FEFF 	 bl setArmingDisabled
 1170              	.L91:
 257:../cleanflight/src/main/fc/fc_core.c ****             }
 258:../cleanflight/src/main/fc/fc_core.c ****         }
 259:../cleanflight/src/main/fc/fc_core.c **** #endif
 260:../cleanflight/src/main/fc/fc_core.c **** 
 261:../cleanflight/src/main/fc/fc_core.c ****         if (IS_RC_MODE_ACTIVE(BOXPARALYZE)) {
 1171              	 .loc 13 261 0
 1172 01da 2220     	 movs r0,#34
 1173 01dc FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1174 01e0 0346     	 mov r3,r0
 1175 01e2 002B     	 cmp r3,#0
 1176 01e4 03D0     	 beq .L94
 262:../cleanflight/src/main/fc/fc_core.c ****             setArmingDisabled(ARMING_DISABLED_PARALYZE);
 1177              	 .loc 13 262 0
 1178 01e6 4FF40030 	 mov r0,#131072
 1179 01ea FFF7FEFF 	 bl setArmingDisabled
 1180              	.L94:
 263:../cleanflight/src/main/fc/fc_core.c ****         }
 264:../cleanflight/src/main/fc/fc_core.c **** 
 265:../cleanflight/src/main/fc/fc_core.c ****         if (!isUsingSticksForArming()) {
 1181              	 .loc 13 265 0
 1182 01ee FFF7FEFF 	 bl isUsingSticksForArming
 1183 01f2 0346     	 mov r3,r0
 1184 01f4 83F00103 	 eor r3,r3,#1
 1185 01f8 DBB2     	 uxtb r3,r3
 1186 01fa 002B     	 cmp r3,#0
 1187 01fc 72D0     	 beq .L95
 1188              	.LBB3:
 266:../cleanflight/src/main/fc/fc_core.c ****           /* Ignore ARMING_DISABLED_CALIBRATING if we are going to calibrate gyro on first arm */
 267:../cleanflight/src/main/fc/fc_core.c ****           bool ignoreGyro = armingConfig()->gyro_cal_on_first_arm
 1189              	 .loc 13 267 0
 1190 01fe FFF7FEFF 	 bl armingConfig
 1191 0202 0346     	 mov r3,r0
 1192 0204 1B78     	 ldrb r3,[r3]
 268:../cleanflight/src/main/fc/fc_core.c ****                          && !(getArmingDisableFlags() & ~(ARMING_DISABLED_ARM_SWITCH | ARMING_DISAB
 1193              	 .loc 13 268 0
 1194 0206 002B     	 cmp r3,#0
 1195 0208 0AD0     	 beq .L96
 1196              	 .loc 13 268 0 is_stmt 0 discriminator 1
 1197 020a FFF7FEFF 	 bl getArmingDisableFlags
 1198 020e 0346     	 mov r3,r0
 1199 0210 23F40023 	 bic r3,r3,#524288
 1200 0214 23F40063 	 bic r3,r3,#2048
 1201 0218 002B     	 cmp r3,#0
 1202 021a 01D1     	 bne .L96
 1203              	 .loc 13 268 0 discriminator 3
 1204 021c 0123     	 movs r3,#1
 1205 021e 00E0     	 b .L97
 1206              	.L96:
 1207              	 .loc 13 268 0 discriminator 4
 1208 0220 0023     	 movs r3,#0
 1209              	.L97:
 267:../cleanflight/src/main/fc/fc_core.c ****                          && !(getArmingDisableFlags() & ~(ARMING_DISABLED_ARM_SWITCH | ARMING_DISAB
 1210              	 .loc 13 267 0 is_stmt 1
 1211 0222 7B71     	 strb r3,[r7,#5]
 1212 0224 7B79     	 ldrb r3,[r7,#5]
 1213 0226 03F00103 	 and r3,r3,#1
 1214 022a 7B71     	 strb r3,[r7,#5]
 269:../cleanflight/src/main/fc/fc_core.c **** 
 270:../cleanflight/src/main/fc/fc_core.c ****           /* Ignore ARMING_DISABLED_THROTTLE (once arm switch is on) if we are in 3D mode */
 271:../cleanflight/src/main/fc/fc_core.c ****           bool ignoreThrottle = feature(FEATURE_3D)
 1215              	 .loc 13 271 0
 1216 022c 4FF48050 	 mov r0,#4096
 1217 0230 FFF7FEFF 	 bl feature
 1218 0234 0346     	 mov r3,r0
 272:../cleanflight/src/main/fc/fc_core.c ****                              && !IS_RC_MODE_ACTIVE(BOX3D)
 273:../cleanflight/src/main/fc/fc_core.c ****                              && !flight3DConfig()->switched_mode3d
 274:../cleanflight/src/main/fc/fc_core.c ****                              && !(getArmingDisableFlags() & ~(ARMING_DISABLED_ARM_SWITCH | ARMING_D
 1219              	 .loc 13 274 0
 1220 0236 002B     	 cmp r3,#0
 1221 0238 19D0     	 beq .L98
 272:../cleanflight/src/main/fc/fc_core.c ****                              && !IS_RC_MODE_ACTIVE(BOX3D)
 1222              	 .loc 13 272 0
 1223 023a 1820     	 movs r0,#24
 1224 023c FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1225 0240 0346     	 mov r3,r0
 1226 0242 83F00103 	 eor r3,r3,#1
 1227 0246 DBB2     	 uxtb r3,r3
 1228 0248 002B     	 cmp r3,#0
 1229 024a 10D0     	 beq .L98
 273:../cleanflight/src/main/fc/fc_core.c ****                              && !(getArmingDisableFlags() & ~(ARMING_DISABLED_ARM_SWITCH | ARMING_D
 1230              	 .loc 13 273 0
 1231 024c FFF7FEFF 	 bl flight3DConfig
 1232 0250 0346     	 mov r3,r0
 1233 0252 1B7B     	 ldrb r3,[r3,#12]
 1234 0254 002B     	 cmp r3,#0
 1235 0256 0AD1     	 bne .L98
 1236              	 .loc 13 274 0 discriminator 3
 1237 0258 FFF7FEFF 	 bl getArmingDisableFlags
 1238 025c 0346     	 mov r3,r0
 1239 025e 23F40023 	 bic r3,r3,#524288
 1240 0262 23F04003 	 bic r3,r3,#64
 1241 0266 002B     	 cmp r3,#0
 1242 0268 01D1     	 bne .L98
 1243              	 .loc 13 274 0 is_stmt 0 discriminator 2
 1244 026a 0123     	 movs r3,#1
 1245 026c 00E0     	 b .L99
 1246              	.L98:
 1247              	 .loc 13 274 0 discriminator 1
 1248 026e 0023     	 movs r3,#0
 1249              	.L99:
 271:../cleanflight/src/main/fc/fc_core.c ****                              && !IS_RC_MODE_ACTIVE(BOX3D)
 1250              	 .loc 13 271 0 is_stmt 1
 1251 0270 3B71     	 strb r3,[r7,#4]
 1252 0272 3B79     	 ldrb r3,[r7,#4]
 1253 0274 03F00103 	 and r3,r3,#1
 1254 0278 3B71     	 strb r3,[r7,#4]
 275:../cleanflight/src/main/fc/fc_core.c **** 
 276:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_RUNAWAY_TAKEOFF
 277:../cleanflight/src/main/fc/fc_core.c ****            if (!IS_RC_MODE_ACTIVE(BOXARM)) {
 1255              	 .loc 13 277 0
 1256 027a 0020     	 movs r0,#0
 1257 027c FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1258 0280 0346     	 mov r3,r0
 1259 0282 83F00103 	 eor r3,r3,#1
 1260 0286 DBB2     	 uxtb r3,r3
 1261 0288 002B     	 cmp r3,#0
 1262 028a 02D0     	 beq .L100
 278:../cleanflight/src/main/fc/fc_core.c ****                unsetArmingDisabled(ARMING_DISABLED_RUNAWAY_TAKEOFF);
 1263              	 .loc 13 278 0
 1264 028c 2020     	 movs r0,#32
 1265 028e FFF7FEFF 	 bl unsetArmingDisabled
 1266              	.L100:
 279:../cleanflight/src/main/fc/fc_core.c ****            }
 280:../cleanflight/src/main/fc/fc_core.c **** #endif
 281:../cleanflight/src/main/fc/fc_core.c **** 
 282:../cleanflight/src/main/fc/fc_core.c ****           // If arming is disabled and the ARM switch is on
 283:../cleanflight/src/main/fc/fc_core.c ****           if (isArmingDisabled()
 1267              	 .loc 13 283 0
 1268 0292 FFF7FEFF 	 bl isArmingDisabled
 1269 0296 0346     	 mov r3,r0
 1270 0298 002B     	 cmp r3,#0
 1271 029a 16D0     	 beq .L101
 284:../cleanflight/src/main/fc/fc_core.c ****               && !ignoreGyro
 1272              	 .loc 13 284 0
 1273 029c 7B79     	 ldrb r3,[r7,#5]
 1274 029e 83F00103 	 eor r3,r3,#1
 1275 02a2 DBB2     	 uxtb r3,r3
 1276 02a4 002B     	 cmp r3,#0
 1277 02a6 10D0     	 beq .L101
 285:../cleanflight/src/main/fc/fc_core.c ****               && !ignoreThrottle
 1278              	 .loc 13 285 0
 1279 02a8 3B79     	 ldrb r3,[r7,#4]
 1280 02aa 83F00103 	 eor r3,r3,#1
 1281 02ae DBB2     	 uxtb r3,r3
 1282 02b0 002B     	 cmp r3,#0
 1283 02b2 0AD0     	 beq .L101
 286:../cleanflight/src/main/fc/fc_core.c ****               && IS_RC_MODE_ACTIVE(BOXARM)) {
 1284              	 .loc 13 286 0
 1285 02b4 0020     	 movs r0,#0
 1286 02b6 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1287 02ba 0346     	 mov r3,r0
 1288 02bc 002B     	 cmp r3,#0
 1289 02be 04D0     	 beq .L101
 287:../cleanflight/src/main/fc/fc_core.c ****               setArmingDisabled(ARMING_DISABLED_ARM_SWITCH);
 1290              	 .loc 13 287 0
 1291 02c0 4FF40020 	 mov r0,#524288
 1292 02c4 FFF7FEFF 	 bl setArmingDisabled
 1293 02c8 0CE0     	 b .L95
 1294              	.L101:
 288:../cleanflight/src/main/fc/fc_core.c ****           } else if (!IS_RC_MODE_ACTIVE(BOXARM)) {
 1295              	 .loc 13 288 0
 1296 02ca 0020     	 movs r0,#0
 1297 02cc FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1298 02d0 0346     	 mov r3,r0
 1299 02d2 83F00103 	 eor r3,r3,#1
 1300 02d6 DBB2     	 uxtb r3,r3
 1301 02d8 002B     	 cmp r3,#0
 1302 02da 03D0     	 beq .L95
 289:../cleanflight/src/main/fc/fc_core.c ****               unsetArmingDisabled(ARMING_DISABLED_ARM_SWITCH);
 1303              	 .loc 13 289 0
 1304 02dc 4FF40020 	 mov r0,#524288
 1305 02e0 FFF7FEFF 	 bl unsetArmingDisabled
 1306              	.L95:
 1307              	.LBE3:
 290:../cleanflight/src/main/fc/fc_core.c ****           }
 291:../cleanflight/src/main/fc/fc_core.c ****         }
 292:../cleanflight/src/main/fc/fc_core.c **** 
 293:../cleanflight/src/main/fc/fc_core.c ****         if (isArmingDisabled()) {
 1308              	 .loc 13 293 0
 1309 02e4 FFF7FEFF 	 bl isArmingDisabled
 1310 02e8 0346     	 mov r3,r0
 1311 02ea 002B     	 cmp r3,#0
 1312 02ec 02D0     	 beq .L102
 294:../cleanflight/src/main/fc/fc_core.c ****             warningLedFlash();
 1313              	 .loc 13 294 0
 1314 02ee FFF7FEFF 	 bl warningLedFlash
 1315 02f2 01E0     	 b .L103
 1316              	.L102:
 295:../cleanflight/src/main/fc/fc_core.c ****         } else {
 296:../cleanflight/src/main/fc/fc_core.c ****             warningLedDisable();
 1317              	 .loc 13 296 0
 1318 02f4 FFF7FEFF 	 bl warningLedDisable
 1319              	.L103:
 297:../cleanflight/src/main/fc/fc_core.c ****         }
 298:../cleanflight/src/main/fc/fc_core.c **** 
 299:../cleanflight/src/main/fc/fc_core.c ****         warningLedUpdate();
 1320              	 .loc 13 299 0
 1321 02f8 FFF7FEFF 	 bl warningLedUpdate
 1322              	.L70:
 300:../cleanflight/src/main/fc/fc_core.c ****     }
 301:../cleanflight/src/main/fc/fc_core.c **** }
 1323              	 .loc 13 301 0
 1324 02fc 0C37     	 adds r7,r7,#12
 1325              	.LCFI78:
 1326              	 .cfi_def_cfa_offset 12
 1327 02fe BD46     	 mov sp,r7
 1328              	.LCFI79:
 1329              	 .cfi_def_cfa_register 13
 1330              	 
 1331 0300 90BD     	 pop {r4,r7,pc}
 1332              	.L105:
 1333 0302 00BF     	 .align 2
 1334              	.L104:
 1335 0304 00000000 	 .word armingFlags
 1336 0308 00000000 	 .word flipOverAfterCrashMode
 1337 030c 00000000 	 .word hadRx.16163
 1338 0310 00000000 	 .word stateFlags
 1339 0314 00000000 	 .word averageSystemLoadPercent
 1340              	 .cfi_endproc
 1341              	.LFE626:
 1343              	 .section .text.disarm,"ax",%progbits
 1344              	 .align 2
 1345              	 .global disarm
 1346              	 .thumb
 1347              	 .thumb_func
 1349              	disarm:
 1350              	.LFB627:
 302:../cleanflight/src/main/fc/fc_core.c **** 
 303:../cleanflight/src/main/fc/fc_core.c **** void disarm(void)
 304:../cleanflight/src/main/fc/fc_core.c **** {
 1351              	 .loc 13 304 0
 1352              	 .cfi_startproc
 1353              	 
 1354              	 
 1355 0000 80B5     	 push {r7,lr}
 1356              	.LCFI80:
 1357              	 .cfi_def_cfa_offset 8
 1358              	 .cfi_offset 7,-8
 1359              	 .cfi_offset 14,-4
 1360 0002 00AF     	 add r7,sp,#0
 1361              	.LCFI81:
 1362              	 .cfi_def_cfa_register 7
 305:../cleanflight/src/main/fc/fc_core.c ****     if (ARMING_FLAG(ARMED)) {
 1363              	 .loc 13 305 0
 1364 0004 164B     	 ldr r3,.L109
 1365 0006 1B78     	 ldrb r3,[r3]
 1366 0008 03F00103 	 and r3,r3,#1
 1367 000c 002B     	 cmp r3,#0
 1368 000e 26D0     	 beq .L106
 306:../cleanflight/src/main/fc/fc_core.c ****         DISABLE_ARMING_FLAG(ARMED);
 1369              	 .loc 13 306 0
 1370 0010 134B     	 ldr r3,.L109
 1371 0012 1B78     	 ldrb r3,[r3]
 1372 0014 23F00103 	 bic r3,r3,#1
 1373 0018 DAB2     	 uxtb r2,r3
 1374 001a 114B     	 ldr r3,.L109
 1375 001c 1A70     	 strb r2,[r3]
 307:../cleanflight/src/main/fc/fc_core.c ****         lastDisarmTimeUs = micros();
 1376              	 .loc 13 307 0
 1377 001e FFF7FEFF 	 bl micros
 1378 0022 0246     	 mov r2,r0
 1379 0024 0F4B     	 ldr r3,.L109+4
 1380 0026 1A60     	 str r2,[r3]
 308:../cleanflight/src/main/fc/fc_core.c **** 
 309:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_BLACKBOX
 310:../cleanflight/src/main/fc/fc_core.c ****         if (blackboxConfig()->device && blackboxConfig()->mode != BLACKBOX_MODE_ALWAYS_ON) { // Clo
 1381              	 .loc 13 310 0
 1382 0028 FFF7FEFF 	 bl blackboxConfig
 1383 002c 0346     	 mov r3,r0
 1384 002e 9B78     	 ldrb r3,[r3,#2]
 1385 0030 002B     	 cmp r3,#0
 1386 0032 07D0     	 beq .L108
 1387              	 .loc 13 310 0 is_stmt 0 discriminator 1
 1388 0034 FFF7FEFF 	 bl blackboxConfig
 1389 0038 0346     	 mov r3,r0
 1390 003a 1B79     	 ldrb r3,[r3,#4]
 1391 003c 022B     	 cmp r3,#2
 1392 003e 01D0     	 beq .L108
 311:../cleanflight/src/main/fc/fc_core.c ****             blackboxFinish();
 1393              	 .loc 13 311 0 is_stmt 1
 1394 0040 FFF7FEFF 	 bl blackboxFinish
 1395              	.L108:
 312:../cleanflight/src/main/fc/fc_core.c ****         }
 313:../cleanflight/src/main/fc/fc_core.c **** #endif
 314:../cleanflight/src/main/fc/fc_core.c ****         BEEP_OFF;
 315:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_DSHOT
 316:../cleanflight/src/main/fc/fc_core.c ****         if (isMotorProtocolDshot() && flipOverAfterCrashMode && !feature(FEATURE_3D)) {
 317:../cleanflight/src/main/fc/fc_core.c ****             pwmWriteDshotCommand(ALL_MOTORS, getMotorCount(), DSHOT_CMD_SPIN_DIRECTION_NORMAL, fals
 318:../cleanflight/src/main/fc/fc_core.c ****         }
 319:../cleanflight/src/main/fc/fc_core.c **** #endif
 320:../cleanflight/src/main/fc/fc_core.c ****         flipOverAfterCrashMode = false;
 1396              	 .loc 13 320 0
 1397 0044 084B     	 ldr r3,.L109+8
 1398 0046 0022     	 movs r2,#0
 1399 0048 1A70     	 strb r2,[r3]
 321:../cleanflight/src/main/fc/fc_core.c **** 
 322:../cleanflight/src/main/fc/fc_core.c ****         // if ARMING_DISABLED_RUNAWAY_TAKEOFF is set then we want to play it's beep pattern instead
 323:../cleanflight/src/main/fc/fc_core.c ****         if (!(getArmingDisableFlags() & ARMING_DISABLED_RUNAWAY_TAKEOFF)) {
 1400              	 .loc 13 323 0
 1401 004a FFF7FEFF 	 bl getArmingDisableFlags
 1402 004e 0346     	 mov r3,r0
 1403 0050 03F02003 	 and r3,r3,#32
 1404 0054 002B     	 cmp r3,#0
 1405 0056 02D1     	 bne .L106
 324:../cleanflight/src/main/fc/fc_core.c ****             beeper(BEEPER_DISARMING);      // emit disarm tone
 1406              	 .loc 13 324 0
 1407 0058 0420     	 movs r0,#4
 1408 005a FFF7FEFF 	 bl beeper
 1409              	.L106:
 325:../cleanflight/src/main/fc/fc_core.c ****         }
 326:../cleanflight/src/main/fc/fc_core.c ****     }
 327:../cleanflight/src/main/fc/fc_core.c **** }
 1410              	 .loc 13 327 0
 1411 005e 80BD     	 pop {r7,pc}
 1412              	.L110:
 1413              	 .align 2
 1414              	.L109:
 1415 0060 00000000 	 .word armingFlags
 1416 0064 00000000 	 .word lastDisarmTimeUs
 1417 0068 00000000 	 .word flipOverAfterCrashMode
 1418              	 .cfi_endproc
 1419              	.LFE627:
 1421              	 .section .text.tryArm,"ax",%progbits
 1422              	 .align 2
 1423              	 .global tryArm
 1424              	 .thumb
 1425              	 .thumb_func
 1427              	tryArm:
 1428              	.LFB628:
 328:../cleanflight/src/main/fc/fc_core.c **** 
 329:../cleanflight/src/main/fc/fc_core.c **** void tryArm(void)
 330:../cleanflight/src/main/fc/fc_core.c **** {
 1429              	 .loc 13 330 0
 1430              	 .cfi_startproc
 1431              	 
 1432              	 
 1433 0000 90B5     	 push {r4,r7,lr}
 1434              	.LCFI82:
 1435              	 .cfi_def_cfa_offset 12
 1436              	 .cfi_offset 4,-12
 1437              	 .cfi_offset 7,-8
 1438              	 .cfi_offset 14,-4
 1439 0002 83B0     	 sub sp,sp,#12
 1440              	.LCFI83:
 1441              	 .cfi_def_cfa_offset 24
 1442 0004 00AF     	 add r7,sp,#0
 1443              	.LCFI84:
 1444              	 .cfi_def_cfa_register 7
 331:../cleanflight/src/main/fc/fc_core.c ****     if (armingConfig()->gyro_cal_on_first_arm) {
 1445              	 .loc 13 331 0
 1446 0006 FFF7FEFF 	 bl armingConfig
 1447 000a 0346     	 mov r3,r0
 1448 000c 1B78     	 ldrb r3,[r3]
 1449 000e 002B     	 cmp r3,#0
 1450 0010 02D0     	 beq .L112
 332:../cleanflight/src/main/fc/fc_core.c ****         gyroStartCalibration(true);
 1451              	 .loc 13 332 0
 1452 0012 0120     	 movs r0,#1
 1453 0014 FFF7FEFF 	 bl gyroStartCalibration
 1454              	.L112:
 333:../cleanflight/src/main/fc/fc_core.c ****     }
 334:../cleanflight/src/main/fc/fc_core.c **** 
 335:../cleanflight/src/main/fc/fc_core.c ****     updateArmingStatus();
 1455              	 .loc 13 335 0
 1456 0018 FFF7FEFF 	 bl updateArmingStatus
 336:../cleanflight/src/main/fc/fc_core.c **** 
 337:../cleanflight/src/main/fc/fc_core.c ****     if (!isArmingDisabled()) {
 1457              	 .loc 13 337 0
 1458 001c FFF7FEFF 	 bl isArmingDisabled
 1459 0020 0346     	 mov r3,r0
 1460 0022 83F00103 	 eor r3,r3,#1
 1461 0026 DBB2     	 uxtb r3,r3
 1462 0028 002B     	 cmp r3,#0
 1463 002a 5AD0     	 beq .L113
 338:../cleanflight/src/main/fc/fc_core.c ****         if (ARMING_FLAG(ARMED)) {
 1464              	 .loc 13 338 0
 1465 002c 3D4B     	 ldr r3,.L119
 1466 002e 1B78     	 ldrb r3,[r3]
 1467 0030 03F00103 	 and r3,r3,#1
 1468 0034 002B     	 cmp r3,#0
 1469 0036 00D0     	 beq .L114
 339:../cleanflight/src/main/fc/fc_core.c ****             return;
 1470              	 .loc 13 339 0
 1471 0038 71E0     	 b .L111
 1472              	.L114:
 340:../cleanflight/src/main/fc/fc_core.c ****         }
 341:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_DSHOT
 342:../cleanflight/src/main/fc/fc_core.c ****         if (micros() - getLastDshotBeaconCommandTimeUs() < DSHOT_BEACON_GUARD_DELAY_US) {
 343:../cleanflight/src/main/fc/fc_core.c ****             if (tryingToArm == ARMING_DELAYED_DISARMED) {
 344:../cleanflight/src/main/fc/fc_core.c ****                 if (isModeActivationConditionPresent(BOXFLIPOVERAFTERCRASH) && IS_RC_MODE_ACTIVE(BO
 345:../cleanflight/src/main/fc/fc_core.c ****                     tryingToArm = ARMING_DELAYED_CRASHFLIP;
 346:../cleanflight/src/main/fc/fc_core.c ****                 } else {
 347:../cleanflight/src/main/fc/fc_core.c ****                     tryingToArm = ARMING_DELAYED_NORMAL;
 348:../cleanflight/src/main/fc/fc_core.c ****                 }
 349:../cleanflight/src/main/fc/fc_core.c ****             }
 350:../cleanflight/src/main/fc/fc_core.c ****             return;
 351:../cleanflight/src/main/fc/fc_core.c ****         }
 352:../cleanflight/src/main/fc/fc_core.c ****         if (isMotorProtocolDshot() && isModeActivationConditionPresent(BOXFLIPOVERAFTERCRASH)) {
 353:../cleanflight/src/main/fc/fc_core.c ****             if (!(IS_RC_MODE_ACTIVE(BOXFLIPOVERAFTERCRASH) || (tryingToArm == ARMING_DELAYED_CRASHF
 354:../cleanflight/src/main/fc/fc_core.c ****                 flipOverAfterCrashMode = false;
 355:../cleanflight/src/main/fc/fc_core.c ****                 if (!feature(FEATURE_3D)) {
 356:../cleanflight/src/main/fc/fc_core.c ****                     pwmWriteDshotCommand(ALL_MOTORS, getMotorCount(), DSHOT_CMD_SPIN_DIRECTION_NORM
 357:../cleanflight/src/main/fc/fc_core.c ****                 }
 358:../cleanflight/src/main/fc/fc_core.c ****             } else {
 359:../cleanflight/src/main/fc/fc_core.c ****                 flipOverAfterCrashMode = true;
 360:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_RUNAWAY_TAKEOFF
 361:../cleanflight/src/main/fc/fc_core.c ****                 runawayTakeoffCheckDisabled = false;
 362:../cleanflight/src/main/fc/fc_core.c **** #endif
 363:../cleanflight/src/main/fc/fc_core.c ****                 if (!feature(FEATURE_3D)) {
 364:../cleanflight/src/main/fc/fc_core.c ****                     pwmWriteDshotCommand(ALL_MOTORS, getMotorCount(), DSHOT_CMD_SPIN_DIRECTION_REVE
 365:../cleanflight/src/main/fc/fc_core.c ****                 }
 366:../cleanflight/src/main/fc/fc_core.c ****             }
 367:../cleanflight/src/main/fc/fc_core.c ****         }
 368:../cleanflight/src/main/fc/fc_core.c **** #endif
 369:../cleanflight/src/main/fc/fc_core.c **** 
 370:../cleanflight/src/main/fc/fc_core.c ****         ENABLE_ARMING_FLAG(ARMED);
 1473              	 .loc 13 370 0
 1474 003a 3A4B     	 ldr r3,.L119
 1475 003c 1B78     	 ldrb r3,[r3]
 1476 003e 43F00103 	 orr r3,r3,#1
 1477 0042 DAB2     	 uxtb r2,r3
 1478 0044 374B     	 ldr r3,.L119
 1479 0046 1A70     	 strb r2,[r3]
 371:../cleanflight/src/main/fc/fc_core.c ****         ENABLE_ARMING_FLAG(WAS_EVER_ARMED);
 1480              	 .loc 13 371 0
 1481 0048 364B     	 ldr r3,.L119
 1482 004a 1B78     	 ldrb r3,[r3]
 1483 004c 43F00203 	 orr r3,r3,#2
 1484 0050 DAB2     	 uxtb r2,r3
 1485 0052 344B     	 ldr r3,.L119
 1486 0054 1A70     	 strb r2,[r3]
 372:../cleanflight/src/main/fc/fc_core.c **** 
 373:../cleanflight/src/main/fc/fc_core.c ****         resetTryingToArm();
 1487              	 .loc 13 373 0
 1488 0056 FFF7FEFF 	 bl resetTryingToArm
 374:../cleanflight/src/main/fc/fc_core.c **** 
 375:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_ACRO_TRAINER
 376:../cleanflight/src/main/fc/fc_core.c ****         pidAcroTrainerInit();
 1489              	 .loc 13 376 0
 1490 005a FFF7FEFF 	 bl pidAcroTrainerInit
 377:../cleanflight/src/main/fc/fc_core.c **** #endif // USE_ACRO_TRAINER
 378:../cleanflight/src/main/fc/fc_core.c **** 
 379:../cleanflight/src/main/fc/fc_core.c ****         if (isModeActivationConditionPresent(BOXPREARM)) {
 1491              	 .loc 13 379 0
 1492 005e 1F20     	 movs r0,#31
 1493 0060 FFF7FEFF 	 bl isModeActivationConditionPresent
 1494 0064 0346     	 mov r3,r0
 1495 0066 002B     	 cmp r3,#0
 1496 0068 06D0     	 beq .L116
 380:../cleanflight/src/main/fc/fc_core.c ****             ENABLE_ARMING_FLAG(WAS_ARMED_WITH_PREARM);
 1497              	 .loc 13 380 0
 1498 006a 2E4B     	 ldr r3,.L119
 1499 006c 1B78     	 ldrb r3,[r3]
 1500 006e 43F00403 	 orr r3,r3,#4
 1501 0072 DAB2     	 uxtb r2,r3
 1502 0074 2B4B     	 ldr r3,.L119
 1503 0076 1A70     	 strb r2,[r3]
 1504              	.L116:
 381:../cleanflight/src/main/fc/fc_core.c ****         }
 382:../cleanflight/src/main/fc/fc_core.c ****         imuQuaternionHeadfreeOffsetSet();
 1505              	 .loc 13 382 0
 1506 0078 FFF7FEFF 	 bl imuQuaternionHeadfreeOffsetSet
 383:../cleanflight/src/main/fc/fc_core.c **** 
 384:../cleanflight/src/main/fc/fc_core.c ****         disarmAt = millis() + armingConfig()->auto_disarm_delay * 1000;   // start disarm timeout, 
 1507              	 .loc 13 384 0
 1508 007c FFF7FEFF 	 bl millis
 1509 0080 0446     	 mov r4,r0
 1510 0082 FFF7FEFF 	 bl armingConfig
 1511 0086 0346     	 mov r3,r0
 1512 0088 5B78     	 ldrb r3,[r3,#1]
 1513 008a 1A46     	 mov r2,r3
 1514 008c 4FF47A73 	 mov r3,#1000
 1515 0090 03FB02F3 	 mul r3,r3,r2
 1516 0094 2344     	 add r3,r3,r4
 1517 0096 244A     	 ldr r2,.L119+4
 1518 0098 1360     	 str r3,[r2]
 385:../cleanflight/src/main/fc/fc_core.c **** 
 386:../cleanflight/src/main/fc/fc_core.c ****         lastArmingDisabledReason = 0;
 1519              	 .loc 13 386 0
 1520 009a 244B     	 ldr r3,.L119+8
 1521 009c 0022     	 movs r2,#0
 1522 009e 1A60     	 str r2,[r3]
 387:../cleanflight/src/main/fc/fc_core.c **** 
 388:../cleanflight/src/main/fc/fc_core.c ****         //beep to indicate arming
 389:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_GPS
 390:../cleanflight/src/main/fc/fc_core.c ****         if (feature(FEATURE_GPS) && STATE(GPS_FIX) && gpsSol.numSat >= 5) {
 1523              	 .loc 13 390 0
 1524 00a0 8020     	 movs r0,#128
 1525 00a2 FFF7FEFF 	 bl feature
 1526 00a6 0346     	 mov r3,r0
 1527 00a8 002B     	 cmp r3,#0
 1528 00aa 0DD0     	 beq .L117
 1529              	 .loc 13 390 0 is_stmt 0 discriminator 1
 1530 00ac 204B     	 ldr r3,.L119+12
 1531 00ae 1B78     	 ldrb r3,[r3]
 1532 00b0 03F00203 	 and r3,r3,#2
 1533 00b4 002B     	 cmp r3,#0
 1534 00b6 07D0     	 beq .L117
 1535              	 .loc 13 390 0 discriminator 2
 1536 00b8 1E4B     	 ldr r3,.L119+16
 1537 00ba 9B7C     	 ldrb r3,[r3,#18]
 1538 00bc 042B     	 cmp r3,#4
 1539 00be 03D9     	 bls .L117
 391:../cleanflight/src/main/fc/fc_core.c ****             beeper(BEEPER_ARMING_GPS_FIX);
 1540              	 .loc 13 391 0 is_stmt 1
 1541 00c0 0620     	 movs r0,#6
 1542 00c2 FFF7FEFF 	 bl beeper
 1543 00c6 02E0     	 b .L118
 1544              	.L117:
 392:../cleanflight/src/main/fc/fc_core.c ****         } else {
 393:../cleanflight/src/main/fc/fc_core.c ****             beeper(BEEPER_ARMING);
 1545              	 .loc 13 393 0
 1546 00c8 0520     	 movs r0,#5
 1547 00ca FFF7FEFF 	 bl beeper
 1548              	.L118:
 394:../cleanflight/src/main/fc/fc_core.c ****         }
 395:../cleanflight/src/main/fc/fc_core.c **** #else
 396:../cleanflight/src/main/fc/fc_core.c ****         beeper(BEEPER_ARMING);
 397:../cleanflight/src/main/fc/fc_core.c **** #endif
 398:../cleanflight/src/main/fc/fc_core.c **** 
 399:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_RUNAWAY_TAKEOFF
 400:../cleanflight/src/main/fc/fc_core.c ****         runawayTakeoffDeactivateUs = 0;
 1549              	 .loc 13 400 0
 1550 00ce 1A4B     	 ldr r3,.L119+20
 1551 00d0 0022     	 movs r2,#0
 1552 00d2 1A60     	 str r2,[r3]
 401:../cleanflight/src/main/fc/fc_core.c ****         runawayTakeoffAccumulatedUs = 0;
 1553              	 .loc 13 401 0
 1554 00d4 194B     	 ldr r3,.L119+24
 1555 00d6 0022     	 movs r2,#0
 1556 00d8 1A60     	 str r2,[r3]
 402:../cleanflight/src/main/fc/fc_core.c ****         runawayTakeoffTriggerUs = 0;
 1557              	 .loc 13 402 0
 1558 00da 194B     	 ldr r3,.L119+28
 1559 00dc 0022     	 movs r2,#0
 1560 00de 1A60     	 str r2,[r3]
 1561 00e0 1DE0     	 b .L111
 1562              	.L113:
 403:../cleanflight/src/main/fc/fc_core.c **** #endif
 404:../cleanflight/src/main/fc/fc_core.c ****     } else {
 405:../cleanflight/src/main/fc/fc_core.c ****        resetTryingToArm();
 1563              	 .loc 13 405 0
 1564 00e2 FFF7FEFF 	 bl resetTryingToArm
 406:../cleanflight/src/main/fc/fc_core.c ****         if (!isFirstArmingGyroCalibrationRunning()) {
 1565              	 .loc 13 406 0
 1566 00e6 FFF7FEFF 	 bl isFirstArmingGyroCalibrationRunning
 1567 00ea 0346     	 mov r3,r0
 1568 00ec 83F00103 	 eor r3,r3,#1
 1569 00f0 DBB2     	 uxtb r3,r3
 1570 00f2 002B     	 cmp r3,#0
 1571 00f4 13D0     	 beq .L111
 1572              	.LBB4:
 407:../cleanflight/src/main/fc/fc_core.c ****             int armingDisabledReason = ffs(getArmingDisableFlags());
 1573              	 .loc 13 407 0
 1574 00f6 FFF7FEFF 	 bl getArmingDisableFlags
 1575 00fa 0346     	 mov r3,r0
 1576 00fc 1846     	 mov r0,r3
 1577 00fe FFF7FEFF 	 bl ffs
 1578 0102 7860     	 str r0,[r7,#4]
 408:../cleanflight/src/main/fc/fc_core.c ****             if (lastArmingDisabledReason != armingDisabledReason) {
 1579              	 .loc 13 408 0
 1580 0104 094B     	 ldr r3,.L119+8
 1581 0106 1A68     	 ldr r2,[r3]
 1582 0108 7B68     	 ldr r3,[r7,#4]
 1583 010a 9A42     	 cmp r2,r3
 1584 010c 07D0     	 beq .L111
 409:../cleanflight/src/main/fc/fc_core.c ****                 lastArmingDisabledReason = armingDisabledReason;
 1585              	 .loc 13 409 0
 1586 010e 074A     	 ldr r2,.L119+8
 1587 0110 7B68     	 ldr r3,[r7,#4]
 1588 0112 1360     	 str r3,[r2]
 410:../cleanflight/src/main/fc/fc_core.c **** 
 411:../cleanflight/src/main/fc/fc_core.c ****                 beeperWarningBeeps(armingDisabledReason);
 1589              	 .loc 13 411 0
 1590 0114 7B68     	 ldr r3,[r7,#4]
 1591 0116 DBB2     	 uxtb r3,r3
 1592 0118 1846     	 mov r0,r3
 1593 011a FFF7FEFF 	 bl beeperWarningBeeps
 1594              	.L111:
 1595              	.LBE4:
 412:../cleanflight/src/main/fc/fc_core.c ****             }
 413:../cleanflight/src/main/fc/fc_core.c ****         }
 414:../cleanflight/src/main/fc/fc_core.c ****     }
 415:../cleanflight/src/main/fc/fc_core.c **** }
 1596              	 .loc 13 415 0
 1597 011e 0C37     	 adds r7,r7,#12
 1598              	.LCFI85:
 1599              	 .cfi_def_cfa_offset 12
 1600 0120 BD46     	 mov sp,r7
 1601              	.LCFI86:
 1602              	 .cfi_def_cfa_register 13
 1603              	 
 1604 0122 90BD     	 pop {r4,r7,pc}
 1605              	.L120:
 1606              	 .align 2
 1607              	.L119:
 1608 0124 00000000 	 .word armingFlags
 1609 0128 00000000 	 .word disarmAt
 1610 012c 00000000 	 .word lastArmingDisabledReason
 1611 0130 00000000 	 .word stateFlags
 1612 0134 00000000 	 .word gpsSol
 1613 0138 00000000 	 .word runawayTakeoffDeactivateUs
 1614 013c 00000000 	 .word runawayTakeoffAccumulatedUs
 1615 0140 00000000 	 .word runawayTakeoffTriggerUs
 1616              	 .cfi_endproc
 1617              	.LFE628:
 1619              	 .global AccInflightCalibrationArmed
 1620              	 .section .bss.AccInflightCalibrationArmed,"aw",%nobits
 1623              	AccInflightCalibrationArmed:
 1624 0000 00       	 .space 1
 1625              	 .global AccInflightCalibrationMeasurementDone
 1626              	 .section .bss.AccInflightCalibrationMeasurementDone,"aw",%nobits
 1629              	AccInflightCalibrationMeasurementDone:
 1630 0000 00       	 .space 1
 1631              	 .global AccInflightCalibrationSavetoEEProm
 1632              	 .section .bss.AccInflightCalibrationSavetoEEProm,"aw",%nobits
 1635              	AccInflightCalibrationSavetoEEProm:
 1636 0000 00       	 .space 1
 1637              	 .global AccInflightCalibrationActive
 1638              	 .section .bss.AccInflightCalibrationActive,"aw",%nobits
 1641              	AccInflightCalibrationActive:
 1642 0000 00       	 .space 1
 1643              	 .global InflightcalibratingA
 1644              	 .section .bss.InflightcalibratingA,"aw",%nobits
 1645              	 .align 1
 1648              	InflightcalibratingA:
 1649 0000 0000     	 .space 2
 1650              	 .section .text.handleInflightCalibrationStickPosition,"ax",%progbits
 1651              	 .align 2
 1652              	 .global handleInflightCalibrationStickPosition
 1653              	 .thumb
 1654              	 .thumb_func
 1656              	handleInflightCalibrationStickPosition:
 1657              	.LFB629:
 416:../cleanflight/src/main/fc/fc_core.c **** 
 417:../cleanflight/src/main/fc/fc_core.c **** // Automatic ACC Offset Calibration
 418:../cleanflight/src/main/fc/fc_core.c **** bool AccInflightCalibrationArmed = false;
 419:../cleanflight/src/main/fc/fc_core.c **** bool AccInflightCalibrationMeasurementDone = false;
 420:../cleanflight/src/main/fc/fc_core.c **** bool AccInflightCalibrationSavetoEEProm = false;
 421:../cleanflight/src/main/fc/fc_core.c **** bool AccInflightCalibrationActive = false;
 422:../cleanflight/src/main/fc/fc_core.c **** uint16_t InflightcalibratingA = 0;
 423:../cleanflight/src/main/fc/fc_core.c **** 
 424:../cleanflight/src/main/fc/fc_core.c **** void handleInflightCalibrationStickPosition(void)
 425:../cleanflight/src/main/fc/fc_core.c **** {
 1658              	 .loc 13 425 0
 1659              	 .cfi_startproc
 1660              	 
 1661              	 
 1662 0000 80B5     	 push {r7,lr}
 1663              	.LCFI87:
 1664              	 .cfi_def_cfa_offset 8
 1665              	 .cfi_offset 7,-8
 1666              	 .cfi_offset 14,-4
 1667 0002 00AF     	 add r7,sp,#0
 1668              	.LCFI88:
 1669              	 .cfi_def_cfa_register 7
 426:../cleanflight/src/main/fc/fc_core.c ****     if (AccInflightCalibrationMeasurementDone) {
 1670              	 .loc 13 426 0
 1671 0004 124B     	 ldr r3,.L125
 1672 0006 1B78     	 ldrb r3,[r3]
 1673 0008 002B     	 cmp r3,#0
 1674 000a 06D0     	 beq .L122
 427:../cleanflight/src/main/fc/fc_core.c ****         // trigger saving into eeprom after landing
 428:../cleanflight/src/main/fc/fc_core.c ****         AccInflightCalibrationMeasurementDone = false;
 1675              	 .loc 13 428 0
 1676 000c 104B     	 ldr r3,.L125
 1677 000e 0022     	 movs r2,#0
 1678 0010 1A70     	 strb r2,[r3]
 429:../cleanflight/src/main/fc/fc_core.c ****         AccInflightCalibrationSavetoEEProm = true;
 1679              	 .loc 13 429 0
 1680 0012 104B     	 ldr r3,.L125+4
 1681 0014 0122     	 movs r2,#1
 1682 0016 1A70     	 strb r2,[r3]
 1683 0018 19E0     	 b .L121
 1684              	.L122:
 430:../cleanflight/src/main/fc/fc_core.c ****     } else {
 431:../cleanflight/src/main/fc/fc_core.c ****         AccInflightCalibrationArmed = !AccInflightCalibrationArmed;
 1685              	 .loc 13 431 0
 1686 001a 0F4B     	 ldr r3,.L125+8
 1687 001c 1B78     	 ldrb r3,[r3]
 1688 001e 002B     	 cmp r3,#0
 1689 0020 14BF     	 ite ne
 1690 0022 0123     	 movne r3,#1
 1691 0024 0023     	 moveq r3,#0
 1692 0026 DBB2     	 uxtb r3,r3
 1693 0028 83F00103 	 eor r3,r3,#1
 1694 002c DBB2     	 uxtb r3,r3
 1695 002e 03F00103 	 and r3,r3,#1
 1696 0032 DAB2     	 uxtb r2,r3
 1697 0034 084B     	 ldr r3,.L125+8
 1698 0036 1A70     	 strb r2,[r3]
 432:../cleanflight/src/main/fc/fc_core.c ****         if (AccInflightCalibrationArmed) {
 1699              	 .loc 13 432 0
 1700 0038 074B     	 ldr r3,.L125+8
 1701 003a 1B78     	 ldrb r3,[r3]
 1702 003c 002B     	 cmp r3,#0
 1703 003e 03D0     	 beq .L124
 433:../cleanflight/src/main/fc/fc_core.c ****             beeper(BEEPER_ACC_CALIBRATION);
 1704              	 .loc 13 433 0
 1705 0040 0B20     	 movs r0,#11
 1706 0042 FFF7FEFF 	 bl beeper
 1707 0046 02E0     	 b .L121
 1708              	.L124:
 434:../cleanflight/src/main/fc/fc_core.c ****         } else {
 435:../cleanflight/src/main/fc/fc_core.c ****             beeper(BEEPER_ACC_CALIBRATION_FAIL);
 1709              	 .loc 13 435 0
 1710 0048 0C20     	 movs r0,#12
 1711 004a FFF7FEFF 	 bl beeper
 1712              	.L121:
 436:../cleanflight/src/main/fc/fc_core.c ****         }
 437:../cleanflight/src/main/fc/fc_core.c ****     }
 438:../cleanflight/src/main/fc/fc_core.c **** }
 1713              	 .loc 13 438 0
 1714 004e 80BD     	 pop {r7,pc}
 1715              	.L126:
 1716              	 .align 2
 1717              	.L125:
 1718 0050 00000000 	 .word AccInflightCalibrationMeasurementDone
 1719 0054 00000000 	 .word AccInflightCalibrationSavetoEEProm
 1720 0058 00000000 	 .word AccInflightCalibrationArmed
 1721              	 .cfi_endproc
 1722              	.LFE629:
 1724              	 .section .text.updateInflightCalibrationState,"ax",%progbits
 1725              	 .align 2
 1726              	 .thumb
 1727              	 .thumb_func
 1729              	updateInflightCalibrationState:
 1730              	.LFB630:
 439:../cleanflight/src/main/fc/fc_core.c **** 
 440:../cleanflight/src/main/fc/fc_core.c **** static void updateInflightCalibrationState(void)
 441:../cleanflight/src/main/fc/fc_core.c **** {
 1731              	 .loc 13 441 0
 1732              	 .cfi_startproc
 1733              	 
 1734              	 
 1735 0000 98B5     	 push {r3,r4,r7,lr}
 1736              	.LCFI89:
 1737              	 .cfi_def_cfa_offset 16
 1738              	 .cfi_offset 3,-16
 1739              	 .cfi_offset 4,-12
 1740              	 .cfi_offset 7,-8
 1741              	 .cfi_offset 14,-4
 1742 0002 00AF     	 add r7,sp,#0
 1743              	.LCFI90:
 1744              	 .cfi_def_cfa_register 7
 442:../cleanflight/src/main/fc/fc_core.c ****     if (AccInflightCalibrationArmed && ARMING_FLAG(ARMED) && rcData[THROTTLE] > rxConfig()->minchec
 1745              	 .loc 13 442 0
 1746 0004 274B     	 ldr r3,.L132
 1747 0006 1B78     	 ldrb r3,[r3]
 1748 0008 002B     	 cmp r3,#0
 1749 000a 1ED0     	 beq .L128
 1750              	 .loc 13 442 0 is_stmt 0 discriminator 1
 1751 000c 264B     	 ldr r3,.L132+4
 1752 000e 1B78     	 ldrb r3,[r3]
 1753 0010 03F00103 	 and r3,r3,#1
 1754 0014 002B     	 cmp r3,#0
 1755 0016 18D0     	 beq .L128
 1756              	 .loc 13 442 0 discriminator 2
 1757 0018 244B     	 ldr r3,.L132+8
 1758 001a DB88     	 ldrh r3,[r3,#6]
 1759 001c 1CB2     	 sxth r4,r3
 1760 001e FFF7FEFF 	 bl rxConfig
 1761 0022 0346     	 mov r3,r0
 1762 0024 9B8A     	 ldrh r3,[r3,#20]
 1763 0026 9BB2     	 uxth r3,r3
 1764 0028 9C42     	 cmp r4,r3
 1765 002a 0EDD     	 ble .L128
 1766              	 .loc 13 442 0 discriminator 3
 1767 002c 0020     	 movs r0,#0
 1768 002e FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1769 0032 0346     	 mov r3,r0
 1770 0034 83F00103 	 eor r3,r3,#1
 1771 0038 DBB2     	 uxtb r3,r3
 1772 003a 002B     	 cmp r3,#0
 1773 003c 05D0     	 beq .L128
 443:../cleanflight/src/main/fc/fc_core.c ****         InflightcalibratingA = 50;
 1774              	 .loc 13 443 0 is_stmt 1
 1775 003e 1C4B     	 ldr r3,.L132+12
 1776 0040 3222     	 movs r2,#50
 1777 0042 1A80     	 strh r2,[r3]
 444:../cleanflight/src/main/fc/fc_core.c ****         AccInflightCalibrationArmed = false;
 1778              	 .loc 13 444 0
 1779 0044 174B     	 ldr r3,.L132
 1780 0046 0022     	 movs r2,#0
 1781 0048 1A70     	 strb r2,[r3]
 1782              	.L128:
 445:../cleanflight/src/main/fc/fc_core.c ****     }
 446:../cleanflight/src/main/fc/fc_core.c ****     if (IS_RC_MODE_ACTIVE(BOXCALIB)) {      // Use the Calib Option to activate : Calib = TRUE meas
 1783              	 .loc 13 446 0
 1784 004a 1020     	 movs r0,#16
 1785 004c FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1786 0050 0346     	 mov r3,r0
 1787 0052 002B     	 cmp r3,#0
 1788 0054 14D0     	 beq .L129
 447:../cleanflight/src/main/fc/fc_core.c ****         if (!AccInflightCalibrationActive && !AccInflightCalibrationMeasurementDone)
 1789              	 .loc 13 447 0
 1790 0056 174B     	 ldr r3,.L132+16
 1791 0058 1B78     	 ldrb r3,[r3]
 1792 005a 83F00103 	 eor r3,r3,#1
 1793 005e DBB2     	 uxtb r3,r3
 1794 0060 002B     	 cmp r3,#0
 1795 0062 09D0     	 beq .L130
 1796              	 .loc 13 447 0 is_stmt 0 discriminator 1
 1797 0064 144B     	 ldr r3,.L132+20
 1798 0066 1B78     	 ldrb r3,[r3]
 1799 0068 83F00103 	 eor r3,r3,#1
 1800 006c DBB2     	 uxtb r3,r3
 1801 006e 002B     	 cmp r3,#0
 1802 0070 02D0     	 beq .L130
 448:../cleanflight/src/main/fc/fc_core.c ****             InflightcalibratingA = 50;
 1803              	 .loc 13 448 0 is_stmt 1
 1804 0072 0F4B     	 ldr r3,.L132+12
 1805 0074 3222     	 movs r2,#50
 1806 0076 1A80     	 strh r2,[r3]
 1807              	.L130:
 449:../cleanflight/src/main/fc/fc_core.c ****         AccInflightCalibrationActive = true;
 1808              	 .loc 13 449 0
 1809 0078 0E4B     	 ldr r3,.L132+16
 1810 007a 0122     	 movs r2,#1
 1811 007c 1A70     	 strb r2,[r3]
 1812 007e 0FE0     	 b .L127
 1813              	.L129:
 450:../cleanflight/src/main/fc/fc_core.c ****     } else if (AccInflightCalibrationMeasurementDone && !ARMING_FLAG(ARMED)) {
 1814              	 .loc 13 450 0
 1815 0080 0D4B     	 ldr r3,.L132+20
 1816 0082 1B78     	 ldrb r3,[r3]
 1817 0084 002B     	 cmp r3,#0
 1818 0086 0BD0     	 beq .L127
 1819              	 .loc 13 450 0 is_stmt 0 discriminator 1
 1820 0088 074B     	 ldr r3,.L132+4
 1821 008a 1B78     	 ldrb r3,[r3]
 1822 008c 03F00103 	 and r3,r3,#1
 1823 0090 002B     	 cmp r3,#0
 1824 0092 05D1     	 bne .L127
 451:../cleanflight/src/main/fc/fc_core.c ****         AccInflightCalibrationMeasurementDone = false;
 1825              	 .loc 13 451 0 is_stmt 1
 1826 0094 084B     	 ldr r3,.L132+20
 1827 0096 0022     	 movs r2,#0
 1828 0098 1A70     	 strb r2,[r3]
 452:../cleanflight/src/main/fc/fc_core.c ****         AccInflightCalibrationSavetoEEProm = true;
 1829              	 .loc 13 452 0
 1830 009a 084B     	 ldr r3,.L132+24
 1831 009c 0122     	 movs r2,#1
 1832 009e 1A70     	 strb r2,[r3]
 1833              	.L127:
 453:../cleanflight/src/main/fc/fc_core.c ****     }
 454:../cleanflight/src/main/fc/fc_core.c **** }
 1834              	 .loc 13 454 0
 1835 00a0 98BD     	 pop {r3,r4,r7,pc}
 1836              	.L133:
 1837 00a2 00BF     	 .align 2
 1838              	.L132:
 1839 00a4 00000000 	 .word AccInflightCalibrationArmed
 1840 00a8 00000000 	 .word armingFlags
 1841 00ac 00000000 	 .word rcData
 1842 00b0 00000000 	 .word InflightcalibratingA
 1843 00b4 00000000 	 .word AccInflightCalibrationActive
 1844 00b8 00000000 	 .word AccInflightCalibrationMeasurementDone
 1845 00bc 00000000 	 .word AccInflightCalibrationSavetoEEProm
 1846              	 .cfi_endproc
 1847              	.LFE630:
 1849              	 .section .text.updateMagHold,"ax",%progbits
 1850              	 .align 2
 1851              	 .global updateMagHold
 1852              	 .thumb
 1853              	 .thumb_func
 1855              	updateMagHold:
 1856              	.LFB631:
 455:../cleanflight/src/main/fc/fc_core.c **** 
 456:../cleanflight/src/main/fc/fc_core.c **** #if defined(USE_GPS) || defined(USE_MAG)
 457:../cleanflight/src/main/fc/fc_core.c **** void updateMagHold(void)
 458:../cleanflight/src/main/fc/fc_core.c **** {
 1857              	 .loc 13 458 0
 1858              	 .cfi_startproc
 1859              	 
 1860              	 
 1861 0000 80B5     	 push {r7,lr}
 1862              	.LCFI91:
 1863              	 .cfi_def_cfa_offset 8
 1864              	 .cfi_offset 7,-8
 1865              	 .cfi_offset 14,-4
 1866 0002 82B0     	 sub sp,sp,#8
 1867              	.LCFI92:
 1868              	 .cfi_def_cfa_offset 16
 1869 0004 00AF     	 add r7,sp,#0
 1870              	.LCFI93:
 1871              	 .cfi_def_cfa_register 7
 1872              	.LBB5:
 459:../cleanflight/src/main/fc/fc_core.c ****     if (ABS(rcCommand[YAW]) < 15 && FLIGHT_MODE(MAG_MODE)) {
 1873              	 .loc 13 459 0
 1874 0006 434B     	 ldr r3,.L149
 1875 0008 9B68     	 ldr r3,[r3,#8]
 1876 000a 3B60     	 str r3,[r7]
 1877 000c D7ED007A 	 flds s15,[r7]
 1878 0010 F5EEC07A 	 fcmpezs s15
 1879 0014 F1EE10FA 	 fmstat
 1880 0018 02DD     	 ble .L148
 1881              	 .loc 13 459 0 is_stmt 0 discriminator 1
 1882 001a D7ED007A 	 flds s15,[r7]
 1883 001e 03E0     	 b .L137
 1884              	.L148:
 1885              	 .loc 13 459 0 discriminator 2
 1886 0020 D7ED007A 	 flds s15,[r7]
 1887 0024 F1EE677A 	 fnegs s15,s15
 1888              	.L137:
 1889              	.LBE5:
 1890              	 .loc 13 459 0 discriminator 4
 1891 0028 B2EE0E7A 	 fconsts s14,#46
 1892 002c F4EEC77A 	 fcmpes s15,s14
 1893 0030 F1EE10FA 	 fmstat
 1894 0034 5DD5     	 bpl .L138
 1895              	 .loc 13 459 0 discriminator 5
 1896 0036 384B     	 ldr r3,.L149+4
 1897 0038 1B88     	 ldrh r3,[r3]
 1898 003a 03F00403 	 and r3,r3,#4
 1899 003e 002B     	 cmp r3,#0
 1900 0040 57D0     	 beq .L138
 1901              	.LBB6:
 460:../cleanflight/src/main/fc/fc_core.c ****         int16_t dif = DECIDEGREES_TO_DEGREES(attitude.values.yaw) - magHold;
 1902              	 .loc 13 460 0 is_stmt 1
 1903 0042 364B     	 ldr r3,.L149+8
 1904 0044 B3F90430 	 ldrsh r3,[r3,#4]
 1905 0048 9BB2     	 uxth r3,r3
 1906 004a 1BB2     	 sxth r3,r3
 1907 004c 344A     	 ldr r2,.L149+12
 1908 004e 82FB0312 	 smull r1,r2,r2,r3
 1909 0052 9210     	 asrs r2,r2,#2
 1910 0054 DB17     	 asrs r3,r3,#31
 1911 0056 D31A     	 subs r3,r2,r3
 1912 0058 9BB2     	 uxth r3,r3
 1913 005a 9AB2     	 uxth r2,r3
 1914 005c 314B     	 ldr r3,.L149+16
 1915 005e 1B88     	 ldrh r3,[r3]
 1916 0060 9BB2     	 uxth r3,r3
 1917 0062 D31A     	 subs r3,r2,r3
 1918 0064 9BB2     	 uxth r3,r3
 1919 0066 FB80     	 strh r3,[r7,#6]
 461:../cleanflight/src/main/fc/fc_core.c ****         if (dif <= -180)
 1920              	 .loc 13 461 0
 1921 0068 B7F90630 	 ldrsh r3,[r7,#6]
 1922 006c 13F1B30F 	 cmn r3,#179
 1923 0070 04DA     	 bge .L140
 462:../cleanflight/src/main/fc/fc_core.c ****             dif += 360;
 1924              	 .loc 13 462 0
 1925 0072 FB88     	 ldrh r3,[r7,#6]
 1926 0074 03F5B473 	 add r3,r3,#360
 1927 0078 9BB2     	 uxth r3,r3
 1928 007a FB80     	 strh r3,[r7,#6]
 1929              	.L140:
 463:../cleanflight/src/main/fc/fc_core.c ****         if (dif >= +180)
 1930              	 .loc 13 463 0
 1931 007c B7F90630 	 ldrsh r3,[r7,#6]
 1932 0080 B32B     	 cmp r3,#179
 1933 0082 04DD     	 ble .L141
 464:../cleanflight/src/main/fc/fc_core.c ****             dif -= 360;
 1934              	 .loc 13 464 0
 1935 0084 FB88     	 ldrh r3,[r7,#6]
 1936 0086 A3F5B473 	 sub r3,r3,#360
 1937 008a 9BB2     	 uxth r3,r3
 1938 008c FB80     	 strh r3,[r7,#6]
 1939              	.L141:
 465:../cleanflight/src/main/fc/fc_core.c ****         dif *= -GET_DIRECTION(rcControlsConfig()->yaw_control_reversed);
 1940              	 .loc 13 465 0
 1941 008e FFF7FEFF 	 bl rcControlsConfig
 1942 0092 0346     	 mov r3,r0
 1943 0094 1B79     	 ldrb r3,[r3,#4]
 1944 0096 002B     	 cmp r3,#0
 1945 0098 01D0     	 beq .L142
 1946              	 .loc 13 465 0 is_stmt 0 discriminator 1
 1947 009a 0123     	 movs r3,#1
 1948 009c 01E0     	 b .L143
 1949              	.L142:
 1950              	 .loc 13 465 0 discriminator 2
 1951 009e 4FF0FF33 	 mov r3,#-1
 1952              	.L143:
 1953              	 .loc 13 465 0 discriminator 4
 1954 00a2 9AB2     	 uxth r2,r3
 1955 00a4 FB88     	 ldrh r3,[r7,#6]
 1956 00a6 12FB03F3 	 smulbb r3,r2,r3
 1957 00aa 9BB2     	 uxth r3,r3
 1958 00ac FB80     	 strh r3,[r7,#6]
 466:../cleanflight/src/main/fc/fc_core.c ****         if (STATE(SMALL_ANGLE))
 1959              	 .loc 13 466 0 is_stmt 1 discriminator 4
 1960 00ae 1E4B     	 ldr r3,.L149+20
 1961 00b0 1B78     	 ldrb r3,[r3]
 1962 00b2 03F00803 	 and r3,r3,#8
 1963 00b6 002B     	 cmp r3,#0
 1964 00b8 1AD0     	 beq .L144
 467:../cleanflight/src/main/fc/fc_core.c ****             rcCommand[YAW] -= dif * currentPidProfile->pid[PID_MAG].P / 30;    // 18 deg
 1965              	 .loc 13 467 0
 1966 00ba 164B     	 ldr r3,.L149
 1967 00bc 93ED027A 	 flds s14,[r3,#8]
 1968 00c0 B7F90630 	 ldrsh r3,[r7,#6]
 1969 00c4 194A     	 ldr r2,.L149+24
 1970 00c6 1268     	 ldr r2,[r2]
 1971 00c8 127F     	 ldrb r2,[r2,#28]
 1972 00ca 02FB03F3 	 mul r3,r2,r3
 1973 00ce 184A     	 ldr r2,.L149+28
 1974 00d0 82FB0312 	 smull r1,r2,r2,r3
 1975 00d4 1A44     	 add r2,r2,r3
 1976 00d6 1211     	 asrs r2,r2,#4
 1977 00d8 DB17     	 asrs r3,r3,#31
 1978 00da D31A     	 subs r3,r2,r3
 1979 00dc 07EE903A 	 fmsr s15,r3
 1980 00e0 F8EEE77A 	 fsitos s15,s15
 1981 00e4 77EE677A 	 fsubs s15,s14,s15
 1982 00e8 0A4B     	 ldr r3,.L149
 1983 00ea C3ED027A 	 fsts s15,[r3,#8]
 1984              	.LBE6:
 459:../cleanflight/src/main/fc/fc_core.c ****         int16_t dif = DECIDEGREES_TO_DEGREES(attitude.values.yaw) - magHold;
 1985              	 .loc 13 459 0
 1986 00ee 0EE0     	 b .L134
 1987              	.L144:
 1988 00f0 0DE0     	 b .L134
 1989              	.L138:
 468:../cleanflight/src/main/fc/fc_core.c ****     } else
 469:../cleanflight/src/main/fc/fc_core.c ****         magHold = DECIDEGREES_TO_DEGREES(attitude.values.yaw);
 1990              	 .loc 13 469 0
 1991 00f2 0A4B     	 ldr r3,.L149+8
 1992 00f4 B3F90430 	 ldrsh r3,[r3,#4]
 1993 00f8 9BB2     	 uxth r3,r3
 1994 00fa 1BB2     	 sxth r3,r3
 1995 00fc 084A     	 ldr r2,.L149+12
 1996 00fe 82FB0312 	 smull r1,r2,r2,r3
 1997 0102 9210     	 asrs r2,r2,#2
 1998 0104 DB17     	 asrs r3,r3,#31
 1999 0106 D31A     	 subs r3,r2,r3
 2000 0108 9AB2     	 uxth r2,r3
 2001 010a 064B     	 ldr r3,.L149+16
 2002 010c 1A80     	 strh r2,[r3]
 2003              	.L134:
 470:../cleanflight/src/main/fc/fc_core.c **** }
 2004              	 .loc 13 470 0
 2005 010e 0837     	 adds r7,r7,#8
 2006              	.LCFI94:
 2007              	 .cfi_def_cfa_offset 8
 2008 0110 BD46     	 mov sp,r7
 2009              	.LCFI95:
 2010              	 .cfi_def_cfa_register 13
 2011              	 
 2012 0112 80BD     	 pop {r7,pc}
 2013              	.L150:
 2014              	 .align 2
 2015              	.L149:
 2016 0114 00000000 	 .word rcCommand
 2017 0118 00000000 	 .word flightModeFlags
 2018 011c 00000000 	 .word attitude
 2019 0120 67666666 	 .word 1717986919
 2020 0124 00000000 	 .word magHold
 2021 0128 00000000 	 .word stateFlags
 2022 012c 00000000 	 .word currentPidProfile
 2023 0130 89888888 	 .word -2004318071
 2024              	 .cfi_endproc
 2025              	.LFE631:
 2027              	 .section .text.canUpdateVTX,"ax",%progbits
 2028              	 .align 2
 2029              	 .thumb
 2030              	 .thumb_func
 2032              	canUpdateVTX:
 2033              	.LFB632:
 471:../cleanflight/src/main/fc/fc_core.c **** #endif
 472:../cleanflight/src/main/fc/fc_core.c **** 
 473:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_VTX_CONTROL
 474:../cleanflight/src/main/fc/fc_core.c **** static bool canUpdateVTX(void)
 475:../cleanflight/src/main/fc/fc_core.c **** {
 2034              	 .loc 13 475 0
 2035              	 .cfi_startproc
 2036              	 
 2037              	 
 2038              	 
 2039 0000 80B4     	 push {r7}
 2040              	.LCFI96:
 2041              	 .cfi_def_cfa_offset 4
 2042              	 .cfi_offset 7,-4
 2043 0002 00AF     	 add r7,sp,#0
 2044              	.LCFI97:
 2045              	 .cfi_def_cfa_register 7
 476:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_VTX_RTC6705
 477:../cleanflight/src/main/fc/fc_core.c ****     return vtxRTC6705CanUpdate();
 478:../cleanflight/src/main/fc/fc_core.c **** #endif
 479:../cleanflight/src/main/fc/fc_core.c ****     return true;
 2046              	 .loc 13 479 0
 2047 0004 0123     	 movs r3,#1
 480:../cleanflight/src/main/fc/fc_core.c **** }
 2048              	 .loc 13 480 0
 2049 0006 1846     	 mov r0,r3
 2050 0008 BD46     	 mov sp,r7
 2051              	.LCFI98:
 2052              	 .cfi_def_cfa_register 13
 2053              	 
 2054 000a 5DF8047B 	 ldr r7,[sp],#4
 2055              	.LCFI99:
 2056              	 .cfi_restore 7
 2057              	 .cfi_def_cfa_offset 0
 2058 000e 7047     	 bx lr
 2059              	 .cfi_endproc
 2060              	.LFE632:
 2062              	 .section .text.areSticksActive,"ax",%progbits
 2063              	 .align 2
 2064              	 .global areSticksActive
 2065              	 .thumb
 2066              	 .thumb_func
 2068              	areSticksActive:
 2069              	.LFB633:
 481:../cleanflight/src/main/fc/fc_core.c **** #endif
 482:../cleanflight/src/main/fc/fc_core.c **** 
 483:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_RUNAWAY_TAKEOFF
 484:../cleanflight/src/main/fc/fc_core.c **** // determine if the R/P/Y stick deflection exceeds the specified limit - integer math is good enoug
 485:../cleanflight/src/main/fc/fc_core.c **** bool areSticksActive(uint8_t stickPercentLimit)
 486:../cleanflight/src/main/fc/fc_core.c **** {
 2070              	 .loc 13 486 0
 2071              	 .cfi_startproc
 2072              	 
 2073              	 
 2074 0000 90B5     	 push {r4,r7,lr}
 2075              	.LCFI100:
 2076              	 .cfi_def_cfa_offset 12
 2077              	 .cfi_offset 4,-12
 2078              	 .cfi_offset 7,-8
 2079              	 .cfi_offset 14,-4
 2080 0002 85B0     	 sub sp,sp,#20
 2081              	.LCFI101:
 2082              	 .cfi_def_cfa_offset 32
 2083 0004 00AF     	 add r7,sp,#0
 2084              	.LCFI102:
 2085              	 .cfi_def_cfa_register 7
 2086 0006 0346     	 mov r3,r0
 2087 0008 FB71     	 strb r3,[r7,#7]
 2088              	.LBB7:
 487:../cleanflight/src/main/fc/fc_core.c ****     for (int axis = FD_ROLL; axis <= FD_YAW; axis ++) {
 2089              	 .loc 13 487 0
 2090 000a 0023     	 movs r3,#0
 2091 000c FB60     	 str r3,[r7,#12]
 2092 000e 83E0     	 b .L154
 2093              	.L163:
 2094              	.LBB8:
 488:../cleanflight/src/main/fc/fc_core.c ****         const uint8_t deadband = axis == FD_YAW ? rcControlsConfig()->yaw_deadband : rcControlsConf
 2095              	 .loc 13 488 0
 2096 0010 FB68     	 ldr r3,[r7,#12]
 2097 0012 022B     	 cmp r3,#2
 2098 0014 04D1     	 bne .L155
 2099              	 .loc 13 488 0 is_stmt 0 discriminator 1
 2100 0016 FFF7FEFF 	 bl rcControlsConfig
 2101 001a 0346     	 mov r3,r0
 2102 001c 5B78     	 ldrb r3,[r3,#1]
 2103 001e 03E0     	 b .L156
 2104              	.L155:
 2105              	 .loc 13 488 0 discriminator 2
 2106 0020 FFF7FEFF 	 bl rcControlsConfig
 2107 0024 0346     	 mov r3,r0
 2108 0026 1B78     	 ldrb r3,[r3]
 2109              	.L156:
 2110              	 .loc 13 488 0 discriminator 4
 2111 0028 BB72     	 strb r3,[r7,#10]
 489:../cleanflight/src/main/fc/fc_core.c ****         uint8_t stickPercent = 0;
 2112              	 .loc 13 489 0 is_stmt 1 discriminator 4
 2113 002a 0023     	 movs r3,#0
 2114 002c FB72     	 strb r3,[r7,#11]
 490:../cleanflight/src/main/fc/fc_core.c ****         if ((rcData[axis] >= PWM_RANGE_MAX) || (rcData[axis] <= PWM_RANGE_MIN)) {
 2115              	 .loc 13 490 0 discriminator 4
 2116 002e 3F4A     	 ldr r2,.L164
 2117 0030 FB68     	 ldr r3,[r7,#12]
 2118 0032 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2119 0036 1BB2     	 sxth r3,r3
 2120 0038 B3F5FA6F 	 cmp r3,#2000
 2121 003c 07DA     	 bge .L157
 2122              	 .loc 13 490 0 is_stmt 0 discriminator 1
 2123 003e 3B4A     	 ldr r2,.L164
 2124 0040 FB68     	 ldr r3,[r7,#12]
 2125 0042 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2126 0046 1BB2     	 sxth r3,r3
 2127 0048 B3F57A7F 	 cmp r3,#1000
 2128 004c 02DC     	 bgt .L158
 2129              	.L157:
 491:../cleanflight/src/main/fc/fc_core.c ****             stickPercent = 100;
 2130              	 .loc 13 491 0 is_stmt 1
 2131 004e 6423     	 movs r3,#100
 2132 0050 FB72     	 strb r3,[r7,#11]
 2133 0052 58E0     	 b .L159
 2134              	.L158:
 492:../cleanflight/src/main/fc/fc_core.c ****         } else {
 493:../cleanflight/src/main/fc/fc_core.c ****             if (rcData[axis] > (rxConfig()->midrc + deadband)) {
 2135              	 .loc 13 493 0
 2136 0054 354A     	 ldr r2,.L164
 2137 0056 FB68     	 ldr r3,[r7,#12]
 2138 0058 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2139 005c 1CB2     	 sxth r4,r3
 2140 005e FFF7FEFF 	 bl rxConfig
 2141 0062 0346     	 mov r3,r0
 2142 0064 5B8A     	 ldrh r3,[r3,#18]
 2143 0066 9BB2     	 uxth r3,r3
 2144 0068 1A46     	 mov r2,r3
 2145 006a BB7A     	 ldrb r3,[r7,#10]
 2146 006c 1344     	 add r3,r3,r2
 2147 006e 9C42     	 cmp r4,r3
 2148 0070 1CDD     	 ble .L160
 494:../cleanflight/src/main/fc/fc_core.c ****                 stickPercent = ((rcData[axis] - rxConfig()->midrc - deadband) * 100) / (PWM_RANGE_M
 2149              	 .loc 13 494 0
 2150 0072 2E4A     	 ldr r2,.L164
 2151 0074 FB68     	 ldr r3,[r7,#12]
 2152 0076 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2153 007a 1CB2     	 sxth r4,r3
 2154 007c FFF7FEFF 	 bl rxConfig
 2155 0080 0346     	 mov r3,r0
 2156 0082 5B8A     	 ldrh r3,[r3,#18]
 2157 0084 9BB2     	 uxth r3,r3
 2158 0086 E21A     	 subs r2,r4,r3
 2159 0088 BB7A     	 ldrb r3,[r7,#10]
 2160 008a D31A     	 subs r3,r2,r3
 2161 008c 6422     	 movs r2,#100
 2162 008e 02FB03F4 	 mul r4,r2,r3
 2163 0092 FFF7FEFF 	 bl rxConfig
 2164 0096 0346     	 mov r3,r0
 2165 0098 5B8A     	 ldrh r3,[r3,#18]
 2166 009a 9BB2     	 uxth r3,r3
 2167 009c C3F5FA62 	 rsb r2,r3,#2000
 2168 00a0 BB7A     	 ldrb r3,[r7,#10]
 2169 00a2 D31A     	 subs r3,r2,r3
 2170 00a4 94FBF3F3 	 sdiv r3,r4,r3
 2171 00a8 FB72     	 strb r3,[r7,#11]
 2172 00aa 2CE0     	 b .L159
 2173              	.L160:
 495:../cleanflight/src/main/fc/fc_core.c ****             } else if (rcData[axis] < (rxConfig()->midrc - deadband)) {
 2174              	 .loc 13 495 0
 2175 00ac 1F4A     	 ldr r2,.L164
 2176 00ae FB68     	 ldr r3,[r7,#12]
 2177 00b0 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2178 00b4 1CB2     	 sxth r4,r3
 2179 00b6 FFF7FEFF 	 bl rxConfig
 2180 00ba 0346     	 mov r3,r0
 2181 00bc 5B8A     	 ldrh r3,[r3,#18]
 2182 00be 9BB2     	 uxth r3,r3
 2183 00c0 1A46     	 mov r2,r3
 2184 00c2 BB7A     	 ldrb r3,[r7,#10]
 2185 00c4 D31A     	 subs r3,r2,r3
 2186 00c6 9C42     	 cmp r4,r3
 2187 00c8 1DDA     	 bge .L159
 496:../cleanflight/src/main/fc/fc_core.c ****                 stickPercent = ((rxConfig()->midrc - deadband - rcData[axis]) * 100) / (rxConfig()-
 2188              	 .loc 13 496 0
 2189 00ca FFF7FEFF 	 bl rxConfig
 2190 00ce 0346     	 mov r3,r0
 2191 00d0 5B8A     	 ldrh r3,[r3,#18]
 2192 00d2 9BB2     	 uxth r3,r3
 2193 00d4 1A46     	 mov r2,r3
 2194 00d6 BB7A     	 ldrb r3,[r7,#10]
 2195 00d8 D21A     	 subs r2,r2,r3
 2196 00da 1449     	 ldr r1,.L164
 2197 00dc FB68     	 ldr r3,[r7,#12]
 2198 00de 31F81330 	 ldrh r3,[r1,r3,lsl#1]
 2199 00e2 1BB2     	 sxth r3,r3
 2200 00e4 D31A     	 subs r3,r2,r3
 2201 00e6 6422     	 movs r2,#100
 2202 00e8 02FB03F4 	 mul r4,r2,r3
 2203 00ec FFF7FEFF 	 bl rxConfig
 2204 00f0 0346     	 mov r3,r0
 2205 00f2 5B8A     	 ldrh r3,[r3,#18]
 2206 00f4 9BB2     	 uxth r3,r3
 2207 00f6 1A46     	 mov r2,r3
 2208 00f8 BB7A     	 ldrb r3,[r7,#10]
 2209 00fa D31A     	 subs r3,r2,r3
 2210 00fc A3F57A73 	 sub r3,r3,#1000
 2211 0100 94FBF3F3 	 sdiv r3,r4,r3
 2212 0104 FB72     	 strb r3,[r7,#11]
 2213              	.L159:
 497:../cleanflight/src/main/fc/fc_core.c ****             }
 498:../cleanflight/src/main/fc/fc_core.c ****         }
 499:../cleanflight/src/main/fc/fc_core.c ****         if (stickPercent >= stickPercentLimit) {
 2214              	 .loc 13 499 0
 2215 0106 FA7A     	 ldrb r2,[r7,#11]
 2216 0108 FB79     	 ldrb r3,[r7,#7]
 2217 010a 9A42     	 cmp r2,r3
 2218 010c 01D3     	 bcc .L161
 500:../cleanflight/src/main/fc/fc_core.c ****             return true;
 2219              	 .loc 13 500 0
 2220 010e 0123     	 movs r3,#1
 2221 0110 07E0     	 b .L162
 2222              	.L161:
 2223              	.LBE8:
 487:../cleanflight/src/main/fc/fc_core.c ****         const uint8_t deadband = axis == FD_YAW ? rcControlsConfig()->yaw_deadband : rcControlsConf
 2224              	 .loc 13 487 0 discriminator 2
 2225 0112 FB68     	 ldr r3,[r7,#12]
 2226 0114 0133     	 adds r3,r3,#1
 2227 0116 FB60     	 str r3,[r7,#12]
 2228              	.L154:
 487:../cleanflight/src/main/fc/fc_core.c ****         const uint8_t deadband = axis == FD_YAW ? rcControlsConfig()->yaw_deadband : rcControlsConf
 2229              	 .loc 13 487 0 is_stmt 0 discriminator 1
 2230 0118 FB68     	 ldr r3,[r7,#12]
 2231 011a 022B     	 cmp r3,#2
 2232 011c 7FF778AF 	 ble .L163
 2233              	.LBE7:
 501:../cleanflight/src/main/fc/fc_core.c ****         }
 502:../cleanflight/src/main/fc/fc_core.c ****     }
 503:../cleanflight/src/main/fc/fc_core.c ****     return false;
 2234              	 .loc 13 503 0 is_stmt 1
 2235 0120 0023     	 movs r3,#0
 2236              	.L162:
 504:../cleanflight/src/main/fc/fc_core.c **** }
 2237              	 .loc 13 504 0
 2238 0122 1846     	 mov r0,r3
 2239 0124 1437     	 adds r7,r7,#20
 2240              	.LCFI103:
 2241              	 .cfi_def_cfa_offset 12
 2242 0126 BD46     	 mov sp,r7
 2243              	.LCFI104:
 2244              	 .cfi_def_cfa_register 13
 2245              	 
 2246 0128 90BD     	 pop {r4,r7,pc}
 2247              	.L165:
 2248 012a 00BF     	 .align 2
 2249              	.L164:
 2250 012c 00000000 	 .word rcData
 2251              	 .cfi_endproc
 2252              	.LFE633:
 2254              	 .section .text.runawayTakeoffTemporaryDisable,"ax",%progbits
 2255              	 .align 2
 2256              	 .global runawayTakeoffTemporaryDisable
 2257              	 .thumb
 2258              	 .thumb_func
 2260              	runawayTakeoffTemporaryDisable:
 2261              	.LFB634:
 505:../cleanflight/src/main/fc/fc_core.c **** 
 506:../cleanflight/src/main/fc/fc_core.c **** 
 507:../cleanflight/src/main/fc/fc_core.c **** // allow temporarily disabling runaway takeoff prevention if we are connected
 508:../cleanflight/src/main/fc/fc_core.c **** // to the configurator and the ARMING_DISABLED_MSP flag is cleared.
 509:../cleanflight/src/main/fc/fc_core.c **** void runawayTakeoffTemporaryDisable(uint8_t disableFlag)
 510:../cleanflight/src/main/fc/fc_core.c **** {
 2262              	 .loc 13 510 0
 2263              	 .cfi_startproc
 2264              	 
 2265              	 
 2266              	 
 2267 0000 80B4     	 push {r7}
 2268              	.LCFI105:
 2269              	 .cfi_def_cfa_offset 4
 2270              	 .cfi_offset 7,-4
 2271 0002 83B0     	 sub sp,sp,#12
 2272              	.LCFI106:
 2273              	 .cfi_def_cfa_offset 16
 2274 0004 00AF     	 add r7,sp,#0
 2275              	.LCFI107:
 2276              	 .cfi_def_cfa_register 7
 2277 0006 0346     	 mov r3,r0
 2278 0008 FB71     	 strb r3,[r7,#7]
 511:../cleanflight/src/main/fc/fc_core.c ****     runawayTakeoffTemporarilyDisabled = disableFlag;
 2279              	 .loc 13 511 0
 2280 000a FB79     	 ldrb r3,[r7,#7]
 2281 000c 002B     	 cmp r3,#0
 2282 000e 14BF     	 ite ne
 2283 0010 0123     	 movne r3,#1
 2284 0012 0023     	 moveq r3,#0
 2285 0014 DAB2     	 uxtb r2,r3
 2286 0016 034B     	 ldr r3,.L167
 2287 0018 1A70     	 strb r2,[r3]
 512:../cleanflight/src/main/fc/fc_core.c **** }
 2288              	 .loc 13 512 0
 2289 001a 0C37     	 adds r7,r7,#12
 2290              	.LCFI108:
 2291              	 .cfi_def_cfa_offset 4
 2292 001c BD46     	 mov sp,r7
 2293              	.LCFI109:
 2294              	 .cfi_def_cfa_register 13
 2295              	 
 2296 001e 5DF8047B 	 ldr r7,[sp],#4
 2297              	.LCFI110:
 2298              	 .cfi_restore 7
 2299              	 .cfi_def_cfa_offset 0
 2300 0022 7047     	 bx lr
 2301              	.L168:
 2302              	 .align 2
 2303              	.L167:
 2304 0024 00000000 	 .word runawayTakeoffTemporarilyDisabled
 2305              	 .cfi_endproc
 2306              	.LFE634:
 2308              	 .section .text.calculateThrottlePercent,"ax",%progbits
 2309              	 .align 2
 2310              	 .global calculateThrottlePercent
 2311              	 .thumb
 2312              	 .thumb_func
 2314              	calculateThrottlePercent:
 2315              	.LFB635:
 513:../cleanflight/src/main/fc/fc_core.c **** #endif
 514:../cleanflight/src/main/fc/fc_core.c **** 
 515:../cleanflight/src/main/fc/fc_core.c **** 
 516:../cleanflight/src/main/fc/fc_core.c **** // calculate the throttle stick percent - integer math is good enough here.
 517:../cleanflight/src/main/fc/fc_core.c **** uint8_t calculateThrottlePercent(void)
 518:../cleanflight/src/main/fc/fc_core.c **** {
 2316              	 .loc 13 518 0
 2317              	 .cfi_startproc
 2318              	 
 2319              	 
 2320 0000 B0B5     	 push {r4,r5,r7,lr}
 2321              	.LCFI111:
 2322              	 .cfi_def_cfa_offset 16
 2323              	 .cfi_offset 4,-16
 2324              	 .cfi_offset 5,-12
 2325              	 .cfi_offset 7,-8
 2326              	 .cfi_offset 14,-4
 2327 0002 82B0     	 sub sp,sp,#8
 2328              	.LCFI112:
 2329              	 .cfi_def_cfa_offset 24
 2330 0004 00AF     	 add r7,sp,#0
 2331              	.LCFI113:
 2332              	 .cfi_def_cfa_register 7
 519:../cleanflight/src/main/fc/fc_core.c ****     uint8_t ret = 0;
 2333              	 .loc 13 519 0
 2334 0006 0023     	 movs r3,#0
 2335 0008 FB71     	 strb r3,[r7,#7]
 520:../cleanflight/src/main/fc/fc_core.c ****     if (feature(FEATURE_3D)
 2336              	 .loc 13 520 0
 2337 000a 4FF48050 	 mov r0,#4096
 2338 000e FFF7FEFF 	 bl feature
 2339 0012 0346     	 mov r3,r0
 2340 0014 002B     	 cmp r3,#0
 2341 0016 00F08980 	 beq .L170
 521:../cleanflight/src/main/fc/fc_core.c ****         && !IS_RC_MODE_ACTIVE(BOX3D)
 2342              	 .loc 13 521 0
 2343 001a 1820     	 movs r0,#24
 2344 001c FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 2345 0020 0346     	 mov r3,r0
 2346 0022 83F00103 	 eor r3,r3,#1
 2347 0026 DBB2     	 uxtb r3,r3
 2348 0028 002B     	 cmp r3,#0
 2349 002a 7FD0     	 beq .L170
 522:../cleanflight/src/main/fc/fc_core.c ****         && !flight3DConfig()->switched_mode3d) {
 2350              	 .loc 13 522 0
 2351 002c FFF7FEFF 	 bl flight3DConfig
 2352 0030 0346     	 mov r3,r0
 2353 0032 1B7B     	 ldrb r3,[r3,#12]
 2354 0034 002B     	 cmp r3,#0
 2355 0036 79D1     	 bne .L170
 523:../cleanflight/src/main/fc/fc_core.c **** 
 524:../cleanflight/src/main/fc/fc_core.c ****         if ((rcData[THROTTLE] >= PWM_RANGE_MAX) || (rcData[THROTTLE] <= PWM_RANGE_MIN)) {
 2356              	 .loc 13 524 0
 2357 0038 4D4B     	 ldr r3,.L177
 2358 003a DB88     	 ldrh r3,[r3,#6]
 2359 003c 1BB2     	 sxth r3,r3
 2360 003e B3F5FA6F 	 cmp r3,#2000
 2361 0042 05DA     	 bge .L171
 2362              	 .loc 13 524 0 is_stmt 0 discriminator 1
 2363 0044 4A4B     	 ldr r3,.L177
 2364 0046 DB88     	 ldrh r3,[r3,#6]
 2365 0048 1BB2     	 sxth r3,r3
 2366 004a B3F57A7F 	 cmp r3,#1000
 2367 004e 02DC     	 bgt .L172
 2368              	.L171:
 525:../cleanflight/src/main/fc/fc_core.c ****             ret = 100;
 2369              	 .loc 13 525 0 is_stmt 1
 2370 0050 6423     	 movs r3,#100
 2371 0052 FB71     	 strb r3,[r7,#7]
 2372 0054 69E0     	 b .L173
 2373              	.L172:
 526:../cleanflight/src/main/fc/fc_core.c ****         } else {
 527:../cleanflight/src/main/fc/fc_core.c ****             if (rcData[THROTTLE] > (rxConfig()->midrc + flight3DConfig()->deadband3d_throttle)) {
 2374              	 .loc 13 527 0
 2375 0056 464B     	 ldr r3,.L177
 2376 0058 DB88     	 ldrh r3,[r3,#6]
 2377 005a 1CB2     	 sxth r4,r3
 2378 005c FFF7FEFF 	 bl rxConfig
 2379 0060 0346     	 mov r3,r0
 2380 0062 5B8A     	 ldrh r3,[r3,#18]
 2381 0064 9BB2     	 uxth r3,r3
 2382 0066 1D46     	 mov r5,r3
 2383 0068 FFF7FEFF 	 bl flight3DConfig
 2384 006c 0346     	 mov r3,r0
 2385 006e DB88     	 ldrh r3,[r3,#6]
 2386 0070 9BB2     	 uxth r3,r3
 2387 0072 2B44     	 add r3,r3,r5
 2388 0074 9C42     	 cmp r4,r3
 2389 0076 22DD     	 ble .L174
 528:../cleanflight/src/main/fc/fc_core.c ****                 ret = ((rcData[THROTTLE] - rxConfig()->midrc - flight3DConfig()->deadband3d_throttl
 2390              	 .loc 13 528 0
 2391 0078 3D4B     	 ldr r3,.L177
 2392 007a DB88     	 ldrh r3,[r3,#6]
 2393 007c 1CB2     	 sxth r4,r3
 2394 007e FFF7FEFF 	 bl rxConfig
 2395 0082 0346     	 mov r3,r0
 2396 0084 5B8A     	 ldrh r3,[r3,#18]
 2397 0086 9BB2     	 uxth r3,r3
 2398 0088 E41A     	 subs r4,r4,r3
 2399 008a FFF7FEFF 	 bl flight3DConfig
 2400 008e 0346     	 mov r3,r0
 2401 0090 DB88     	 ldrh r3,[r3,#6]
 2402 0092 9BB2     	 uxth r3,r3
 2403 0094 E31A     	 subs r3,r4,r3
 2404 0096 6422     	 movs r2,#100
 2405 0098 02FB03F4 	 mul r4,r2,r3
 2406 009c FFF7FEFF 	 bl rxConfig
 2407 00a0 0346     	 mov r3,r0
 2408 00a2 5B8A     	 ldrh r3,[r3,#18]
 2409 00a4 9BB2     	 uxth r3,r3
 2410 00a6 C3F5FA65 	 rsb r5,r3,#2000
 2411 00aa FFF7FEFF 	 bl flight3DConfig
 2412 00ae 0346     	 mov r3,r0
 2413 00b0 DB88     	 ldrh r3,[r3,#6]
 2414 00b2 9BB2     	 uxth r3,r3
 2415 00b4 EB1A     	 subs r3,r5,r3
 2416 00b6 94FBF3F3 	 sdiv r3,r4,r3
 2417 00ba FB71     	 strb r3,[r7,#7]
 2418 00bc 35E0     	 b .L173
 2419              	.L174:
 529:../cleanflight/src/main/fc/fc_core.c ****             } else if (rcData[THROTTLE] < (rxConfig()->midrc - flight3DConfig()->deadband3d_throttl
 2420              	 .loc 13 529 0
 2421 00be 2C4B     	 ldr r3,.L177
 2422 00c0 DB88     	 ldrh r3,[r3,#6]
 2423 00c2 1CB2     	 sxth r4,r3
 2424 00c4 FFF7FEFF 	 bl rxConfig
 2425 00c8 0346     	 mov r3,r0
 2426 00ca 5B8A     	 ldrh r3,[r3,#18]
 2427 00cc 9BB2     	 uxth r3,r3
 2428 00ce 1D46     	 mov r5,r3
 2429 00d0 FFF7FEFF 	 bl flight3DConfig
 2430 00d4 0346     	 mov r3,r0
 2431 00d6 DB88     	 ldrh r3,[r3,#6]
 2432 00d8 9BB2     	 uxth r3,r3
 2433 00da EB1A     	 subs r3,r5,r3
 2434 00dc 9C42     	 cmp r4,r3
 2435 00de 24DA     	 bge .L173
 530:../cleanflight/src/main/fc/fc_core.c ****                 ret = ((rxConfig()->midrc - flight3DConfig()->deadband3d_throttle - rcData[THROTTLE
 2436              	 .loc 13 530 0
 2437 00e0 FFF7FEFF 	 bl rxConfig
 2438 00e4 0346     	 mov r3,r0
 2439 00e6 5B8A     	 ldrh r3,[r3,#18]
 2440 00e8 9BB2     	 uxth r3,r3
 2441 00ea 1C46     	 mov r4,r3
 2442 00ec FFF7FEFF 	 bl flight3DConfig
 2443 00f0 0346     	 mov r3,r0
 2444 00f2 DB88     	 ldrh r3,[r3,#6]
 2445 00f4 9BB2     	 uxth r3,r3
 2446 00f6 E21A     	 subs r2,r4,r3
 2447 00f8 1D4B     	 ldr r3,.L177
 2448 00fa DB88     	 ldrh r3,[r3,#6]
 2449 00fc 1BB2     	 sxth r3,r3
 2450 00fe D31A     	 subs r3,r2,r3
 2451 0100 6422     	 movs r2,#100
 2452 0102 02FB03F4 	 mul r4,r2,r3
 2453 0106 FFF7FEFF 	 bl rxConfig
 2454 010a 0346     	 mov r3,r0
 2455 010c 5B8A     	 ldrh r3,[r3,#18]
 2456 010e 9BB2     	 uxth r3,r3
 2457 0110 1D46     	 mov r5,r3
 2458 0112 FFF7FEFF 	 bl flight3DConfig
 2459 0116 0346     	 mov r3,r0
 2460 0118 DB88     	 ldrh r3,[r3,#6]
 2461 011a 9BB2     	 uxth r3,r3
 2462 011c EB1A     	 subs r3,r5,r3
 2463 011e A3F57A73 	 sub r3,r3,#1000
 2464 0122 94FBF3F3 	 sdiv r3,r4,r3
 2465 0126 FB71     	 strb r3,[r7,#7]
 524:../cleanflight/src/main/fc/fc_core.c ****             ret = 100;
 2466              	 .loc 13 524 0
 2467 0128 1CE0     	 b .L175
 2468              	.L173:
 2469 012a 1BE0     	 b .L175
 2470              	.L170:
 531:../cleanflight/src/main/fc/fc_core.c ****             }
 532:../cleanflight/src/main/fc/fc_core.c ****         }
 533:../cleanflight/src/main/fc/fc_core.c ****     } else {
 534:../cleanflight/src/main/fc/fc_core.c ****         ret = constrain(((rcData[THROTTLE] - rxConfig()->mincheck) * 100) / (PWM_RANGE_MAX - rxConf
 2471              	 .loc 13 534 0
 2472 012c 104B     	 ldr r3,.L177
 2473 012e DB88     	 ldrh r3,[r3,#6]
 2474 0130 1CB2     	 sxth r4,r3
 2475 0132 FFF7FEFF 	 bl rxConfig
 2476 0136 0346     	 mov r3,r0
 2477 0138 9B8A     	 ldrh r3,[r3,#20]
 2478 013a 9BB2     	 uxth r3,r3
 2479 013c E31A     	 subs r3,r4,r3
 2480 013e 6422     	 movs r2,#100
 2481 0140 02FB03F4 	 mul r4,r2,r3
 2482 0144 FFF7FEFF 	 bl rxConfig
 2483 0148 0346     	 mov r3,r0
 2484 014a 9B8A     	 ldrh r3,[r3,#20]
 2485 014c 9BB2     	 uxth r3,r3
 2486 014e C3F5FA63 	 rsb r3,r3,#2000
 2487 0152 94FBF3F3 	 sdiv r3,r4,r3
 2488 0156 1846     	 mov r0,r3
 2489 0158 0021     	 movs r1,#0
 2490 015a 6422     	 movs r2,#100
 2491 015c FFF7FEFF 	 bl constrain
 2492 0160 0346     	 mov r3,r0
 2493 0162 FB71     	 strb r3,[r7,#7]
 2494              	.L175:
 535:../cleanflight/src/main/fc/fc_core.c ****     }
 536:../cleanflight/src/main/fc/fc_core.c ****     return ret;
 2495              	 .loc 13 536 0
 2496 0164 FB79     	 ldrb r3,[r7,#7]
 537:../cleanflight/src/main/fc/fc_core.c **** }
 2497              	 .loc 13 537 0
 2498 0166 1846     	 mov r0,r3
 2499 0168 0837     	 adds r7,r7,#8
 2500              	.LCFI114:
 2501              	 .cfi_def_cfa_offset 16
 2502 016a BD46     	 mov sp,r7
 2503              	.LCFI115:
 2504              	 .cfi_def_cfa_register 13
 2505              	 
 2506 016c B0BD     	 pop {r4,r5,r7,pc}
 2507              	.L178:
 2508 016e 00BF     	 .align 2
 2509              	.L177:
 2510 0170 00000000 	 .word rcData
 2511              	 .cfi_endproc
 2512              	.LFE635:
 2514              	 .section .bss.airmodeIsActivated,"aw",%nobits
 2517              	airmodeIsActivated:
 2518 0000 00       	 .space 1
 2519              	 .section .text.isAirmodeActivated,"ax",%progbits
 2520              	 .align 2
 2521              	 .global isAirmodeActivated
 2522              	 .thumb
 2523              	 .thumb_func
 2525              	isAirmodeActivated:
 2526              	.LFB636:
 538:../cleanflight/src/main/fc/fc_core.c **** 
 539:../cleanflight/src/main/fc/fc_core.c **** static bool airmodeIsActivated;
 540:../cleanflight/src/main/fc/fc_core.c **** 
 541:../cleanflight/src/main/fc/fc_core.c **** bool isAirmodeActivated()
 542:../cleanflight/src/main/fc/fc_core.c **** {
 2527              	 .loc 13 542 0
 2528              	 .cfi_startproc
 2529              	 
 2530              	 
 2531              	 
 2532 0000 80B4     	 push {r7}
 2533              	.LCFI116:
 2534              	 .cfi_def_cfa_offset 4
 2535              	 .cfi_offset 7,-4
 2536 0002 00AF     	 add r7,sp,#0
 2537              	.LCFI117:
 2538              	 .cfi_def_cfa_register 7
 543:../cleanflight/src/main/fc/fc_core.c ****     return airmodeIsActivated;
 2539              	 .loc 13 543 0
 2540 0004 034B     	 ldr r3,.L181
 2541 0006 1B78     	 ldrb r3,[r3]
 544:../cleanflight/src/main/fc/fc_core.c **** }
 2542              	 .loc 13 544 0
 2543 0008 1846     	 mov r0,r3
 2544 000a BD46     	 mov sp,r7
 2545              	.LCFI118:
 2546              	 .cfi_def_cfa_register 13
 2547              	 
 2548 000c 5DF8047B 	 ldr r7,[sp],#4
 2549              	.LCFI119:
 2550              	 .cfi_restore 7
 2551              	 .cfi_def_cfa_offset 0
 2552 0010 7047     	 bx lr
 2553              	.L182:
 2554 0012 00BF     	 .align 2
 2555              	.L181:
 2556 0014 00000000 	 .word airmodeIsActivated
 2557              	 .cfi_endproc
 2558              	.LFE636:
 2560              	 .section .text.processRx,"ax",%progbits
 2561              	 .align 2
 2562              	 .global processRx
 2563              	 .thumb
 2564              	 .thumb_func
 2566              	processRx:
 2567              	.LFB637:
 545:../cleanflight/src/main/fc/fc_core.c **** 
 546:../cleanflight/src/main/fc/fc_core.c **** 
 547:../cleanflight/src/main/fc/fc_core.c **** 
 548:../cleanflight/src/main/fc/fc_core.c **** /*
 549:../cleanflight/src/main/fc/fc_core.c ****  * processRx called from taskUpdateRxMain
 550:../cleanflight/src/main/fc/fc_core.c ****  */
 551:../cleanflight/src/main/fc/fc_core.c **** bool processRx(timeUs_t currentTimeUs)
 552:../cleanflight/src/main/fc/fc_core.c **** {
 2568              	 .loc 13 552 0
 2569              	 .cfi_startproc
 2570              	 
 2571              	 
 2572 0000 90B5     	 push {r4,r7,lr}
 2573              	.LCFI120:
 2574              	 .cfi_def_cfa_offset 12
 2575              	 .cfi_offset 4,-12
 2576              	 .cfi_offset 7,-8
 2577              	 .cfi_offset 14,-4
 2578 0002 87B0     	 sub sp,sp,#28
 2579              	.LCFI121:
 2580              	 .cfi_def_cfa_offset 40
 2581 0004 00AF     	 add r7,sp,#0
 2582              	.LCFI122:
 2583              	 .cfi_def_cfa_register 7
 2584 0006 7860     	 str r0,[r7,#4]
 553:../cleanflight/src/main/fc/fc_core.c ****     static bool armedBeeperOn = false;
 554:../cleanflight/src/main/fc/fc_core.c **** 
 555:../cleanflight/src/main/fc/fc_core.c ****     if (!calculateRxChannelsAndUpdateFailsafe(currentTimeUs)) {
 2585              	 .loc 13 555 0
 2586 0008 7868     	 ldr r0,[r7,#4]
 2587 000a FFF7FEFF 	 bl calculateRxChannelsAndUpdateFailsafe
 2588 000e 0346     	 mov r3,r0
 2589 0010 83F00103 	 eor r3,r3,#1
 2590 0014 DBB2     	 uxtb r3,r3
 2591 0016 002B     	 cmp r3,#0
 2592 0018 01D0     	 beq .L184
 556:../cleanflight/src/main/fc/fc_core.c ****         return false;
 2593              	 .loc 13 556 0
 2594 001a 0023     	 movs r3,#0
 2595 001c 85E3     	 b .L185
 2596              	.L184:
 557:../cleanflight/src/main/fc/fc_core.c ****     }
 558:../cleanflight/src/main/fc/fc_core.c **** 
 559:../cleanflight/src/main/fc/fc_core.c ****     // in 3D mode, we need to be able to disarm by switch at any time
 560:../cleanflight/src/main/fc/fc_core.c ****     if (feature(FEATURE_3D)) {
 2597              	 .loc 13 560 0
 2598 001e 4FF48050 	 mov r0,#4096
 2599 0022 FFF7FEFF 	 bl feature
 2600 0026 0346     	 mov r3,r0
 2601 0028 002B     	 cmp r3,#0
 2602 002a 0AD0     	 beq .L186
 561:../cleanflight/src/main/fc/fc_core.c ****         if (!IS_RC_MODE_ACTIVE(BOXARM))
 2603              	 .loc 13 561 0
 2604 002c 0020     	 movs r0,#0
 2605 002e FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 2606 0032 0346     	 mov r3,r0
 2607 0034 83F00103 	 eor r3,r3,#1
 2608 0038 DBB2     	 uxtb r3,r3
 2609 003a 002B     	 cmp r3,#0
 2610 003c 01D0     	 beq .L186
 562:../cleanflight/src/main/fc/fc_core.c ****             disarm();
 2611              	 .loc 13 562 0
 2612 003e FFF7FEFF 	 bl disarm
 2613              	.L186:
 563:../cleanflight/src/main/fc/fc_core.c ****     }
 564:../cleanflight/src/main/fc/fc_core.c **** 
 565:../cleanflight/src/main/fc/fc_core.c ****     updateRSSI(currentTimeUs);
 2614              	 .loc 13 565 0
 2615 0042 7868     	 ldr r0,[r7,#4]
 2616 0044 FFF7FEFF 	 bl updateRSSI
 566:../cleanflight/src/main/fc/fc_core.c **** 
 567:../cleanflight/src/main/fc/fc_core.c ****     if (currentTimeUs > FAILSAFE_POWER_ON_DELAY_US && !failsafeIsMonitoring()) {
 2617              	 .loc 13 567 0
 2618 0048 7B68     	 ldr r3,[r7,#4]
 2619 004a AB4A     	 ldr r2,.L263
 2620 004c 9342     	 cmp r3,r2
 2621 004e 09D9     	 bls .L187
 2622              	 .loc 13 567 0 is_stmt 0 discriminator 1
 2623 0050 FFF7FEFF 	 bl failsafeIsMonitoring
 2624 0054 0346     	 mov r3,r0
 2625 0056 83F00103 	 eor r3,r3,#1
 2626 005a DBB2     	 uxtb r3,r3
 2627 005c 002B     	 cmp r3,#0
 2628 005e 01D0     	 beq .L187
 568:../cleanflight/src/main/fc/fc_core.c ****         failsafeStartMonitoring();
 2629              	 .loc 13 568 0 is_stmt 1
 2630 0060 FFF7FEFF 	 bl failsafeStartMonitoring
 2631              	.L187:
 569:../cleanflight/src/main/fc/fc_core.c ****     }
 570:../cleanflight/src/main/fc/fc_core.c ****     failsafeUpdateState();
 2632              	 .loc 13 570 0
 2633 0064 FFF7FEFF 	 bl failsafeUpdateState
 571:../cleanflight/src/main/fc/fc_core.c **** 
 572:../cleanflight/src/main/fc/fc_core.c ****     const throttleStatus_e throttleStatus = calculateThrottleStatus();
 2634              	 .loc 13 572 0
 2635 0068 FFF7FEFF 	 bl calculateThrottleStatus
 2636 006c 0346     	 mov r3,r0
 2637 006e BB74     	 strb r3,[r7,#18]
 573:../cleanflight/src/main/fc/fc_core.c ****     const uint8_t throttlePercent = calculateThrottlePercent();
 2638              	 .loc 13 573 0
 2639 0070 FFF7FEFF 	 bl calculateThrottlePercent
 2640 0074 0346     	 mov r3,r0
 2641 0076 7B74     	 strb r3,[r7,#17]
 574:../cleanflight/src/main/fc/fc_core.c **** 
 575:../cleanflight/src/main/fc/fc_core.c ****     if (isAirmodeActive() && ARMING_FLAG(ARMED)) {
 2642              	 .loc 13 575 0
 2643 0078 FFF7FEFF 	 bl isAirmodeActive
 2644 007c 0346     	 mov r3,r0
 2645 007e 002B     	 cmp r3,#0
 2646 0080 11D0     	 beq .L188
 2647              	 .loc 13 575 0 is_stmt 0 discriminator 1
 2648 0082 9E4B     	 ldr r3,.L263+4
 2649 0084 1B78     	 ldrb r3,[r3]
 2650 0086 03F00103 	 and r3,r3,#1
 2651 008a 002B     	 cmp r3,#0
 2652 008c 0BD0     	 beq .L188
 576:../cleanflight/src/main/fc/fc_core.c ****         if (throttlePercent >= rxConfig()->airModeActivateThreshold) {
 2653              	 .loc 13 576 0 is_stmt 1
 2654 008e FFF7FEFF 	 bl rxConfig
 2655 0092 0346     	 mov r3,r0
 2656 0094 1B7F     	 ldrb r3,[r3,#28]
 2657 0096 7A7C     	 ldrb r2,[r7,#17]
 2658 0098 9A42     	 cmp r2,r3
 2659 009a 03D3     	 bcc .L189
 577:../cleanflight/src/main/fc/fc_core.c ****             airmodeIsActivated = true; // Prevent Iterm from being reset
 2660              	 .loc 13 577 0
 2661 009c 984B     	 ldr r3,.L263+8
 2662 009e 0122     	 movs r2,#1
 2663 00a0 1A70     	 strb r2,[r3]
 576:../cleanflight/src/main/fc/fc_core.c ****         if (throttlePercent >= rxConfig()->airModeActivateThreshold) {
 2664              	 .loc 13 576 0
 2665 00a2 03E0     	 b .L190
 2666              	.L189:
 2667 00a4 02E0     	 b .L190
 2668              	.L188:
 578:../cleanflight/src/main/fc/fc_core.c ****         }
 579:../cleanflight/src/main/fc/fc_core.c ****     } else {
 580:../cleanflight/src/main/fc/fc_core.c ****         airmodeIsActivated = false;
 2669              	 .loc 13 580 0
 2670 00a6 964B     	 ldr r3,.L263+8
 2671 00a8 0022     	 movs r2,#0
 2672 00aa 1A70     	 strb r2,[r3]
 2673              	.L190:
 581:../cleanflight/src/main/fc/fc_core.c ****     }
 582:../cleanflight/src/main/fc/fc_core.c **** 
 583:../cleanflight/src/main/fc/fc_core.c ****     /* In airmode Iterm should be prevented to grow when Low thottle and Roll + Pitch Centered.
 584:../cleanflight/src/main/fc/fc_core.c ****      This is needed to prevent Iterm winding on the ground, but keep full stabilisation on 0 thrott
 585:../cleanflight/src/main/fc/fc_core.c ****     if (throttleStatus == THROTTLE_LOW && !airmodeIsActivated) {
 2674              	 .loc 13 585 0
 2675 00ac BB7C     	 ldrb r3,[r7,#18]
 2676 00ae 002B     	 cmp r3,#0
 2677 00b0 16D1     	 bne .L191
 2678              	 .loc 13 585 0 is_stmt 0 discriminator 1
 2679 00b2 934B     	 ldr r3,.L263+8
 2680 00b4 1B78     	 ldrb r3,[r3]
 2681 00b6 83F00103 	 eor r3,r3,#1
 2682 00ba DBB2     	 uxtb r3,r3
 2683 00bc 002B     	 cmp r3,#0
 2684 00be 0FD0     	 beq .L191
 586:../cleanflight/src/main/fc/fc_core.c ****         pidResetITerm();
 2685              	 .loc 13 586 0 is_stmt 1
 2686 00c0 FFF7FEFF 	 bl pidResetITerm
 587:../cleanflight/src/main/fc/fc_core.c ****         if (currentPidProfile->pidAtMinThrottle)
 2687              	 .loc 13 587 0
 2688 00c4 8F4B     	 ldr r3,.L263+12
 2689 00c6 1B68     	 ldr r3,[r3]
 2690 00c8 93F82730 	 ldrb r3,[r3,#39]
 2691 00cc 002B     	 cmp r3,#0
 2692 00ce 03D0     	 beq .L192
 588:../cleanflight/src/main/fc/fc_core.c ****             pidStabilisationState(PID_STABILISATION_ON);
 2693              	 .loc 13 588 0
 2694 00d0 0120     	 movs r0,#1
 2695 00d2 FFF7FEFF 	 bl pidStabilisationState
 587:../cleanflight/src/main/fc/fc_core.c ****         if (currentPidProfile->pidAtMinThrottle)
 2696              	 .loc 13 587 0
 2697 00d6 06E0     	 b .L194
 2698              	.L192:
 589:../cleanflight/src/main/fc/fc_core.c ****         else
 590:../cleanflight/src/main/fc/fc_core.c ****             pidStabilisationState(PID_STABILISATION_OFF);
 2699              	 .loc 13 590 0
 2700 00d8 0020     	 movs r0,#0
 2701 00da FFF7FEFF 	 bl pidStabilisationState
 587:../cleanflight/src/main/fc/fc_core.c ****             pidStabilisationState(PID_STABILISATION_ON);
 2702              	 .loc 13 587 0
 2703 00de 02E0     	 b .L194
 2704              	.L191:
 591:../cleanflight/src/main/fc/fc_core.c ****     } else {
 592:../cleanflight/src/main/fc/fc_core.c ****         pidStabilisationState(PID_STABILISATION_ON);
 2705              	 .loc 13 592 0
 2706 00e0 0120     	 movs r0,#1
 2707 00e2 FFF7FEFF 	 bl pidStabilisationState
 2708              	.L194:
 593:../cleanflight/src/main/fc/fc_core.c ****     }
 594:../cleanflight/src/main/fc/fc_core.c **** 
 595:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_RUNAWAY_TAKEOFF
 596:../cleanflight/src/main/fc/fc_core.c ****     // If runaway_takeoff_prevention is enabled, accumulate the amount of time that throttle
 597:../cleanflight/src/main/fc/fc_core.c ****     // is above runaway_takeoff_deactivate_throttle with the any of the R/P/Y sticks deflected
 598:../cleanflight/src/main/fc/fc_core.c ****     // to at least runaway_takeoff_stick_percent percent while the pidSum on all axis is kept low.
 599:../cleanflight/src/main/fc/fc_core.c ****     // Once the amount of accumulated time exceeds runaway_takeoff_deactivate_delay then disable
 600:../cleanflight/src/main/fc/fc_core.c ****     // prevention for the remainder of the battery.
 601:../cleanflight/src/main/fc/fc_core.c **** 
 602:../cleanflight/src/main/fc/fc_core.c ****     if (ARMING_FLAG(ARMED)
 2709              	 .loc 13 602 0
 2710 00e6 854B     	 ldr r3,.L263+4
 2711 00e8 1B78     	 ldrb r3,[r3]
 2712 00ea 03F00103 	 and r3,r3,#1
 2713 00ee 002B     	 cmp r3,#0
 2714 00f0 00F02081 	 beq .L195
 603:../cleanflight/src/main/fc/fc_core.c ****         && pidConfig()->runaway_takeoff_prevention
 2715              	 .loc 13 603 0
 2716 00f4 FFF7FEFF 	 bl pidConfig
 2717 00f8 0346     	 mov r3,r0
 2718 00fa 5B78     	 ldrb r3,[r3,#1]
 2719 00fc 002B     	 cmp r3,#0
 2720 00fe 00F01981 	 beq .L195
 604:../cleanflight/src/main/fc/fc_core.c ****         && !runawayTakeoffCheckDisabled
 2721              	 .loc 13 604 0
 2722 0102 814B     	 ldr r3,.L263+16
 2723 0104 1B78     	 ldrb r3,[r3]
 2724 0106 83F00103 	 eor r3,r3,#1
 2725 010a DBB2     	 uxtb r3,r3
 2726 010c 002B     	 cmp r3,#0
 2727 010e 00F01181 	 beq .L195
 605:../cleanflight/src/main/fc/fc_core.c ****         && !flipOverAfterCrashMode
 2728              	 .loc 13 605 0
 2729 0112 7E4B     	 ldr r3,.L263+20
 2730 0114 1B78     	 ldrb r3,[r3]
 2731 0116 83F00103 	 eor r3,r3,#1
 2732 011a DBB2     	 uxtb r3,r3
 2733 011c 002B     	 cmp r3,#0
 2734 011e 00F00981 	 beq .L195
 606:../cleanflight/src/main/fc/fc_core.c ****         && !runawayTakeoffTemporarilyDisabled
 2735              	 .loc 13 606 0
 2736 0122 7B4B     	 ldr r3,.L263+24
 2737 0124 1B78     	 ldrb r3,[r3]
 2738 0126 83F00103 	 eor r3,r3,#1
 2739 012a DBB2     	 uxtb r3,r3
 2740 012c 002B     	 cmp r3,#0
 2741 012e 00F00181 	 beq .L195
 607:../cleanflight/src/main/fc/fc_core.c ****         && !STATE(FIXED_WING)) {
 2742              	 .loc 13 607 0
 2743 0132 784B     	 ldr r3,.L263+28
 2744 0134 1B78     	 ldrb r3,[r3]
 2745 0136 03F01003 	 and r3,r3,#16
 2746 013a 002B     	 cmp r3,#0
 2747 013c 40F0FA80 	 bne .L195
 2748              	.LBB9:
 608:../cleanflight/src/main/fc/fc_core.c **** 
 609:../cleanflight/src/main/fc/fc_core.c ****         // Determine if we're in "flight"
 610:../cleanflight/src/main/fc/fc_core.c ****         //   - motors running
 611:../cleanflight/src/main/fc/fc_core.c ****         //   - throttle over runaway_takeoff_deactivate_throttle_percent
 612:../cleanflight/src/main/fc/fc_core.c ****         //   - sticks are active and have deflection greater than runaway_takeoff_deactivate_stick_
 613:../cleanflight/src/main/fc/fc_core.c ****         //   - pidSum on all axis is less then runaway_takeoff_deactivate_pidlimit
 614:../cleanflight/src/main/fc/fc_core.c ****         bool inStableFlight = false;
 2749              	 .loc 13 614 0
 2750 0140 0023     	 movs r3,#0
 2751 0142 FB75     	 strb r3,[r7,#23]
 615:../cleanflight/src/main/fc/fc_core.c ****         if (!feature(FEATURE_MOTOR_STOP) || isAirmodeActive() || (throttleStatus != THROTTLE_LOW)) 
 2752              	 .loc 13 615 0
 2753 0144 1020     	 movs r0,#16
 2754 0146 FFF7FEFF 	 bl feature
 2755 014a 0346     	 mov r3,r0
 2756 014c 83F00103 	 eor r3,r3,#1
 2757 0150 DBB2     	 uxtb r3,r3
 2758 0152 002B     	 cmp r3,#0
 2759 0154 07D1     	 bne .L196
 2760              	 .loc 13 615 0 is_stmt 0 discriminator 1
 2761 0156 FFF7FEFF 	 bl isAirmodeActive
 2762 015a 0346     	 mov r3,r0
 2763 015c 002B     	 cmp r3,#0
 2764 015e 02D1     	 bne .L196
 2765              	 .loc 13 615 0 discriminator 2
 2766 0160 BB7C     	 ldrb r3,[r7,#18]
 2767 0162 002B     	 cmp r3,#0
 2768 0164 4DD0     	 beq .L197
 2769              	.L196:
 2770              	.LBB10:
 616:../cleanflight/src/main/fc/fc_core.c ****             const uint8_t lowThrottleLimit = pidConfig()->runaway_takeoff_deactivate_throttle;
 2771              	 .loc 13 616 0 is_stmt 1
 2772 0166 FFF7FEFF 	 bl pidConfig
 2773 016a 0346     	 mov r3,r0
 2774 016c 1B79     	 ldrb r3,[r3,#4]
 2775 016e 3B74     	 strb r3,[r7,#16]
 617:../cleanflight/src/main/fc/fc_core.c ****             const uint8_t midThrottleLimit = constrain(lowThrottleLimit * 2, lowThrottleLimit * 2, 
 2776              	 .loc 13 617 0
 2777 0170 3B7C     	 ldrb r3,[r7,#16]
 2778 0172 5A00     	 lsls r2,r3,#1
 2779 0174 3B7C     	 ldrb r3,[r7,#16]
 2780 0176 5B00     	 lsls r3,r3,#1
 2781 0178 1046     	 mov r0,r2
 2782 017a 1946     	 mov r1,r3
 2783 017c 4B22     	 movs r2,#75
 2784 017e FFF7FEFF 	 bl constrain
 2785 0182 0346     	 mov r3,r0
 2786 0184 FB73     	 strb r3,[r7,#15]
 618:../cleanflight/src/main/fc/fc_core.c ****             if ((((throttlePercent >= lowThrottleLimit) && areSticksActive(RUNAWAY_TAKEOFF_DEACTIVA
 2787              	 .loc 13 618 0
 2788 0186 7A7C     	 ldrb r2,[r7,#17]
 2789 0188 3B7C     	 ldrb r3,[r7,#16]
 2790 018a 9A42     	 cmp r2,r3
 2791 018c 05D3     	 bcc .L198
 2792              	 .loc 13 618 0 is_stmt 0 discriminator 1
 2793 018e 0F20     	 movs r0,#15
 2794 0190 FFF7FEFF 	 bl areSticksActive
 2795 0194 0346     	 mov r3,r0
 2796 0196 002B     	 cmp r3,#0
 2797 0198 03D1     	 bne .L199
 2798              	.L198:
 2799              	 .loc 13 618 0 discriminator 3
 2800 019a 7A7C     	 ldrb r2,[r7,#17]
 2801 019c FB7B     	 ldrb r3,[r7,#15]
 2802 019e 9A42     	 cmp r2,r3
 2803 01a0 2FD3     	 bcc .L197
 2804              	.L199:
 619:../cleanflight/src/main/fc/fc_core.c ****                 && (fabsf(pidData[FD_PITCH].Sum) < RUNAWAY_TAKEOFF_DEACTIVATE_PIDSUM_LIMIT)
 2805              	 .loc 13 619 0 is_stmt 1
 2806 01a2 5D4B     	 ldr r3,.L263+32
 2807 01a4 5B6A     	 ldr r3,[r3,#36]
 2808 01a6 07EE903A 	 fmsr s15,r3
 2809 01aa F0EEE77A 	 fabss s15,s15
 2810 01ae 9FED5B7A 	 flds s14,.L263+36
 2811 01b2 F4EEC77A 	 fcmpes s15,s14
 2812 01b6 F1EE10FA 	 fmstat
 2813 01ba 22D5     	 bpl .L197
 620:../cleanflight/src/main/fc/fc_core.c ****                 && (fabsf(pidData[FD_ROLL].Sum) < RUNAWAY_TAKEOFF_DEACTIVATE_PIDSUM_LIMIT)
 2814              	 .loc 13 620 0
 2815 01bc 564B     	 ldr r3,.L263+32
 2816 01be 1B69     	 ldr r3,[r3,#16]
 2817 01c0 07EE903A 	 fmsr s15,r3
 2818 01c4 F0EEE77A 	 fabss s15,s15
 2819 01c8 9FED547A 	 flds s14,.L263+36
 2820 01cc F4EEC77A 	 fcmpes s15,s14
 2821 01d0 F1EE10FA 	 fmstat
 2822 01d4 15D5     	 bpl .L197
 621:../cleanflight/src/main/fc/fc_core.c ****                 && (fabsf(pidData[FD_YAW].Sum) < RUNAWAY_TAKEOFF_DEACTIVATE_PIDSUM_LIMIT)) {
 2823              	 .loc 13 621 0
 2824 01d6 504B     	 ldr r3,.L263+32
 2825 01d8 9B6B     	 ldr r3,[r3,#56]
 2826 01da 07EE903A 	 fmsr s15,r3
 2827 01de F0EEE77A 	 fabss s15,s15
 2828 01e2 9FED4E7A 	 flds s14,.L263+36
 2829 01e6 F4EEC77A 	 fcmpes s15,s14
 2830 01ea F1EE10FA 	 fmstat
 2831 01ee 08D5     	 bpl .L197
 622:../cleanflight/src/main/fc/fc_core.c **** 
 623:../cleanflight/src/main/fc/fc_core.c ****                 inStableFlight = true;
 2832              	 .loc 13 623 0
 2833 01f0 0123     	 movs r3,#1
 2834 01f2 FB75     	 strb r3,[r7,#23]
 624:../cleanflight/src/main/fc/fc_core.c ****                 if (runawayTakeoffDeactivateUs == 0) {
 2835              	 .loc 13 624 0
 2836 01f4 4A4B     	 ldr r3,.L263+40
 2837 01f6 1B68     	 ldr r3,[r3]
 2838 01f8 002B     	 cmp r3,#0
 2839 01fa 02D1     	 bne .L197
 625:../cleanflight/src/main/fc/fc_core.c ****                     runawayTakeoffDeactivateUs = currentTimeUs;
 2840              	 .loc 13 625 0
 2841 01fc 484A     	 ldr r2,.L263+40
 2842 01fe 7B68     	 ldr r3,[r7,#4]
 2843 0200 1360     	 str r3,[r2]
 2844              	.L197:
 2845              	.LBE10:
 626:../cleanflight/src/main/fc/fc_core.c ****                 }
 627:../cleanflight/src/main/fc/fc_core.c ****             }
 628:../cleanflight/src/main/fc/fc_core.c ****         }
 629:../cleanflight/src/main/fc/fc_core.c **** 
 630:../cleanflight/src/main/fc/fc_core.c ****         // If we're in flight, then accumulate the time and deactivate once it exceeds runaway_take
 631:../cleanflight/src/main/fc/fc_core.c ****         if (inStableFlight) {
 2846              	 .loc 13 631 0
 2847 0202 FB7D     	 ldrb r3,[r7,#23]
 2848 0204 002B     	 cmp r3,#0
 2849 0206 2BD0     	 beq .L203
 2850              	.LBB11:
 632:../cleanflight/src/main/fc/fc_core.c ****             if (runawayTakeoffDeactivateUs == 0) {
 2851              	 .loc 13 632 0
 2852 0208 454B     	 ldr r3,.L263+40
 2853 020a 1B68     	 ldr r3,[r3]
 2854 020c 002B     	 cmp r3,#0
 2855 020e 02D1     	 bne .L204
 633:../cleanflight/src/main/fc/fc_core.c ****                 runawayTakeoffDeactivateUs = currentTimeUs;
 2856              	 .loc 13 633 0
 2857 0210 434A     	 ldr r2,.L263+40
 2858 0212 7B68     	 ldr r3,[r7,#4]
 2859 0214 1360     	 str r3,[r2]
 2860              	.L204:
 634:../cleanflight/src/main/fc/fc_core.c ****             }
 635:../cleanflight/src/main/fc/fc_core.c ****             uint16_t deactivateDelay = pidConfig()->runaway_takeoff_deactivate_delay;
 2861              	 .loc 13 635 0
 2862 0216 FFF7FEFF 	 bl pidConfig
 2863 021a 0346     	 mov r3,r0
 2864 021c 9A78     	 ldrb r2,[r3,#2]
 2865 021e DB78     	 ldrb r3,[r3,#3]
 2866 0220 1B02     	 lsls r3,r3,#8
 2867 0222 1343     	 orrs r3,r3,r2
 2868 0224 BB82     	 strh r3,[r7,#20]
 636:../cleanflight/src/main/fc/fc_core.c ****             // at high throttle levels reduce deactivation delay by 50%
 637:../cleanflight/src/main/fc/fc_core.c ****             if (throttlePercent >= RUNAWAY_TAKEOFF_HIGH_THROTTLE_PERCENT) {
 2869              	 .loc 13 637 0
 2870 0226 7B7C     	 ldrb r3,[r7,#17]
 2871 0228 4A2B     	 cmp r3,#74
 2872 022a 02D9     	 bls .L205
 638:../cleanflight/src/main/fc/fc_core.c ****                 deactivateDelay = deactivateDelay / 2;
 2873              	 .loc 13 638 0
 2874 022c BB8A     	 ldrh r3,[r7,#20]
 2875 022e 5B08     	 lsrs r3,r3,#1
 2876 0230 BB82     	 strh r3,[r7,#20]
 2877              	.L205:
 639:../cleanflight/src/main/fc/fc_core.c ****             }
 640:../cleanflight/src/main/fc/fc_core.c ****             if ((cmpTimeUs(currentTimeUs, runawayTakeoffDeactivateUs) + runawayTakeoffAccumulatedUs
 2878              	 .loc 13 640 0
 2879 0232 3B4B     	 ldr r3,.L263+40
 2880 0234 1B68     	 ldr r3,[r3]
 2881 0236 7868     	 ldr r0,[r7,#4]
 2882 0238 1946     	 mov r1,r3
 2883 023a FFF7FEFF 	 bl cmpTimeUs
 2884 023e 0346     	 mov r3,r0
 2885 0240 1A46     	 mov r2,r3
 2886 0242 384B     	 ldr r3,.L263+44
 2887 0244 1B68     	 ldr r3,[r3]
 2888 0246 1344     	 add r3,r3,r2
 2889 0248 BA8A     	 ldrh r2,[r7,#20]
 2890 024a 4FF47A71 	 mov r1,#1000
 2891 024e 01FB02F2 	 mul r2,r1,r2
 2892 0252 9342     	 cmp r3,r2
 2893 0254 03D9     	 bls .L206
 641:../cleanflight/src/main/fc/fc_core.c ****                 runawayTakeoffCheckDisabled = true;
 2894              	 .loc 13 641 0
 2895 0256 2C4B     	 ldr r3,.L263+16
 2896 0258 0122     	 movs r2,#1
 2897 025a 1A70     	 strb r2,[r3]
 2898              	.LBE11:
 2899 025c 14E0     	 b .L207
 2900              	.L206:
 2901 025e 13E0     	 b .L207
 2902              	.L203:
 642:../cleanflight/src/main/fc/fc_core.c ****             }
 643:../cleanflight/src/main/fc/fc_core.c **** 
 644:../cleanflight/src/main/fc/fc_core.c ****         } else {
 645:../cleanflight/src/main/fc/fc_core.c ****             if (runawayTakeoffDeactivateUs != 0) {
 2903              	 .loc 13 645 0
 2904 0260 2F4B     	 ldr r3,.L263+40
 2905 0262 1B68     	 ldr r3,[r3]
 2906 0264 002B     	 cmp r3,#0
 2907 0266 0CD0     	 beq .L208
 646:../cleanflight/src/main/fc/fc_core.c ****                 runawayTakeoffAccumulatedUs += cmpTimeUs(currentTimeUs, runawayTakeoffDeactivateUs)
 2908              	 .loc 13 646 0
 2909 0268 2D4B     	 ldr r3,.L263+40
 2910 026a 1B68     	 ldr r3,[r3]
 2911 026c 7868     	 ldr r0,[r7,#4]
 2912 026e 1946     	 mov r1,r3
 2913 0270 FFF7FEFF 	 bl cmpTimeUs
 2914 0274 0346     	 mov r3,r0
 2915 0276 1A46     	 mov r2,r3
 2916 0278 2A4B     	 ldr r3,.L263+44
 2917 027a 1B68     	 ldr r3,[r3]
 2918 027c 1344     	 add r3,r3,r2
 2919 027e 294A     	 ldr r2,.L263+44
 2920 0280 1360     	 str r3,[r2]
 2921              	.L208:
 647:../cleanflight/src/main/fc/fc_core.c ****             }
 648:../cleanflight/src/main/fc/fc_core.c ****             runawayTakeoffDeactivateUs = 0;
 2922              	 .loc 13 648 0
 2923 0282 274B     	 ldr r3,.L263+40
 2924 0284 0022     	 movs r2,#0
 2925 0286 1A60     	 str r2,[r3]
 2926              	.L207:
 649:../cleanflight/src/main/fc/fc_core.c ****         }
 650:../cleanflight/src/main/fc/fc_core.c ****         if (runawayTakeoffDeactivateUs == 0) {
 2927              	 .loc 13 650 0
 2928 0288 254B     	 ldr r3,.L263+40
 2929 028a 1B68     	 ldr r3,[r3]
 2930 028c 002B     	 cmp r3,#0
 2931 028e 14D1     	 bne .L209
 651:../cleanflight/src/main/fc/fc_core.c ****             DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_DEACTIVATING_DELAY, DEBUG_RUNAWA
 2932              	 .loc 13 651 0
 2933 0290 254B     	 ldr r3,.L263+48
 2934 0292 1B78     	 ldrb r3,[r3]
 2935 0294 202B     	 cmp r3,#32
 2936 0296 02D1     	 bne .L210
 2937              	 .loc 13 651 0 is_stmt 0 discriminator 1
 2938 0298 244B     	 ldr r3,.L263+52
 2939 029a 0022     	 movs r2,#0
 2940 029c 9A80     	 strh r2,[r3,#4]
 2941              	.L210:
 652:../cleanflight/src/main/fc/fc_core.c ****             DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_DEACTIVATING_TIME, runawayTakeof
 2942              	 .loc 13 652 0 is_stmt 1
 2943 029e 224B     	 ldr r3,.L263+48
 2944 02a0 1B78     	 ldrb r3,[r3]
 2945 02a2 202B     	 cmp r3,#32
 2946 02a4 27D1     	 bne .L212
 2947              	 .loc 13 652 0 is_stmt 0 discriminator 1
 2948 02a6 1F4B     	 ldr r3,.L263+44
 2949 02a8 1B68     	 ldr r3,[r3]
 2950 02aa 214A     	 ldr r2,.L263+56
 2951 02ac A2FB0323 	 umull r2,r3,r2,r3
 2952 02b0 9B09     	 lsrs r3,r3,#6
 2953 02b2 9AB2     	 uxth r2,r3
 2954 02b4 1D4B     	 ldr r3,.L263+52
 2955 02b6 DA80     	 strh r2,[r3,#6]
 2956              	.LBE9:
 607:../cleanflight/src/main/fc/fc_core.c **** 
 2957              	 .loc 13 607 0 is_stmt 1 discriminator 1
 2958 02b8 4AE0     	 b .L214
 2959              	.L209:
 2960              	.LBB12:
 653:../cleanflight/src/main/fc/fc_core.c ****         } else {
 654:../cleanflight/src/main/fc/fc_core.c ****             DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_DEACTIVATING_DELAY, DEBUG_RUNAWA
 2961              	 .loc 13 654 0
 2962 02ba 1B4B     	 ldr r3,.L263+48
 2963 02bc 1B78     	 ldrb r3,[r3]
 2964 02be 202B     	 cmp r3,#32
 2965 02c0 02D1     	 bne .L213
 2966              	 .loc 13 654 0 is_stmt 0 discriminator 1
 2967 02c2 1A4B     	 ldr r3,.L263+52
 2968 02c4 0122     	 movs r2,#1
 2969 02c6 9A80     	 strh r2,[r3,#4]
 2970              	.L213:
 655:../cleanflight/src/main/fc/fc_core.c ****             DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_DEACTIVATING_TIME, (cmpTimeUs(cu
 2971              	 .loc 13 655 0 is_stmt 1
 2972 02c8 174B     	 ldr r3,.L263+48
 2973 02ca 1B78     	 ldrb r3,[r3]
 2974 02cc 202B     	 cmp r3,#32
 2975 02ce 12D1     	 bne .L212
 2976              	 .loc 13 655 0 is_stmt 0 discriminator 1
 2977 02d0 134B     	 ldr r3,.L263+40
 2978 02d2 1B68     	 ldr r3,[r3]
 2979 02d4 7868     	 ldr r0,[r7,#4]
 2980 02d6 1946     	 mov r1,r3
 2981 02d8 FFF7FEFF 	 bl cmpTimeUs
 2982 02dc 0346     	 mov r3,r0
 2983 02de 1A46     	 mov r2,r3
 2984 02e0 104B     	 ldr r3,.L263+44
 2985 02e2 1B68     	 ldr r3,[r3]
 2986 02e4 1344     	 add r3,r3,r2
 2987 02e6 124A     	 ldr r2,.L263+56
 2988 02e8 A2FB0323 	 umull r2,r3,r2,r3
 2989 02ec 9B09     	 lsrs r3,r3,#6
 2990 02ee 9AB2     	 uxth r2,r3
 2991 02f0 0E4B     	 ldr r3,.L263+52
 2992 02f2 DA80     	 strh r2,[r3,#6]
 2993              	.LBE12:
 607:../cleanflight/src/main/fc/fc_core.c **** 
 2994              	 .loc 13 607 0 is_stmt 1 discriminator 1
 2995 02f4 2CE0     	 b .L214
 2996              	.L212:
 2997 02f6 2BE0     	 b .L214
 2998              	.L264:
 2999              	 .align 2
 3000              	.L263:
 3001 02f8 404B4C00 	 .word 5000000
 3002 02fc 00000000 	 .word armingFlags
 3003 0300 00000000 	 .word airmodeIsActivated
 3004 0304 00000000 	 .word currentPidProfile
 3005 0308 00000000 	 .word runawayTakeoffCheckDisabled
 3006 030c 00000000 	 .word flipOverAfterCrashMode
 3007 0310 00000000 	 .word runawayTakeoffTemporarilyDisabled
 3008 0314 00000000 	 .word stateFlags
 3009 0318 00000000 	 .word pidData
 3010 031c 0000C842 	 .word 1120403456
 3011 0320 00000000 	 .word runawayTakeoffDeactivateUs
 3012 0324 00000000 	 .word runawayTakeoffAccumulatedUs
 3013 0328 00000000 	 .word debugMode
 3014 032c 00000000 	 .word debug
 3015 0330 D34D6210 	 .word 274877907
 3016              	.L195:
 656:../cleanflight/src/main/fc/fc_core.c ****         }
 657:../cleanflight/src/main/fc/fc_core.c ****     } else {
 658:../cleanflight/src/main/fc/fc_core.c ****         DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_DEACTIVATING_DELAY, DEBUG_RUNAWAY_TA
 3017              	 .loc 13 658 0
 3018 0334 B64B     	 ldr r3,.L265
 3019 0336 1B78     	 ldrb r3,[r3]
 3020 0338 202B     	 cmp r3,#32
 3021 033a 02D1     	 bne .L215
 3022              	 .loc 13 658 0 is_stmt 0 discriminator 1
 3023 033c B54B     	 ldr r3,.L265+4
 3024 033e 0022     	 movs r2,#0
 3025 0340 9A80     	 strh r2,[r3,#4]
 3026              	.L215:
 659:../cleanflight/src/main/fc/fc_core.c ****         DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_DEACTIVATING_TIME, DEBUG_RUNAWAY_TAK
 3027              	 .loc 13 659 0 is_stmt 1
 3028 0342 B34B     	 ldr r3,.L265
 3029 0344 1B78     	 ldrb r3,[r3]
 3030 0346 202B     	 cmp r3,#32
 3031 0348 02D1     	 bne .L214
 3032              	 .loc 13 659 0 is_stmt 0 discriminator 1
 3033 034a B24B     	 ldr r3,.L265+4
 3034 034c 0022     	 movs r2,#0
 3035 034e DA80     	 strh r2,[r3,#6]
 3036              	.L214:
 660:../cleanflight/src/main/fc/fc_core.c ****     }
 661:../cleanflight/src/main/fc/fc_core.c **** #endif
 662:../cleanflight/src/main/fc/fc_core.c **** 
 663:../cleanflight/src/main/fc/fc_core.c ****     // When armed and motors aren't spinning, do beeps and then disarm
 664:../cleanflight/src/main/fc/fc_core.c ****     // board after delay so users without buzzer won't lose fingers.
 665:../cleanflight/src/main/fc/fc_core.c ****     // mixTable constrains motor commands, so checking  throttleStatus is enough
 666:../cleanflight/src/main/fc/fc_core.c ****     if (ARMING_FLAG(ARMED)
 3037              	 .loc 13 666 0 is_stmt 1
 3038 0350 B14B     	 ldr r3,.L265+8
 3039 0352 1B78     	 ldrb r3,[r3]
 3040 0354 03F00103 	 and r3,r3,#1
 3041 0358 002B     	 cmp r3,#0
 3042 035a 72D0     	 beq .L216
 667:../cleanflight/src/main/fc/fc_core.c ****         && feature(FEATURE_MOTOR_STOP)
 3043              	 .loc 13 667 0
 3044 035c 1020     	 movs r0,#16
 3045 035e FFF7FEFF 	 bl feature
 3046 0362 0346     	 mov r3,r0
 3047 0364 002B     	 cmp r3,#0
 3048 0366 6CD0     	 beq .L216
 668:../cleanflight/src/main/fc/fc_core.c ****         && !STATE(FIXED_WING)
 3049              	 .loc 13 668 0
 3050 0368 AC4B     	 ldr r3,.L265+12
 3051 036a 1B78     	 ldrb r3,[r3]
 3052 036c 03F01003 	 and r3,r3,#16
 3053 0370 002B     	 cmp r3,#0
 3054 0372 66D1     	 bne .L216
 669:../cleanflight/src/main/fc/fc_core.c ****         && !feature(FEATURE_3D)
 3055              	 .loc 13 669 0
 3056 0374 4FF48050 	 mov r0,#4096
 3057 0378 FFF7FEFF 	 bl feature
 3058 037c 0346     	 mov r3,r0
 3059 037e 83F00103 	 eor r3,r3,#1
 3060 0382 DBB2     	 uxtb r3,r3
 3061 0384 002B     	 cmp r3,#0
 3062 0386 5CD0     	 beq .L216
 670:../cleanflight/src/main/fc/fc_core.c ****         && !isAirmodeActive()
 3063              	 .loc 13 670 0
 3064 0388 FFF7FEFF 	 bl isAirmodeActive
 3065 038c 0346     	 mov r3,r0
 3066 038e 83F00103 	 eor r3,r3,#1
 3067 0392 DBB2     	 uxtb r3,r3
 3068 0394 002B     	 cmp r3,#0
 3069 0396 54D0     	 beq .L216
 671:../cleanflight/src/main/fc/fc_core.c ****     ) {
 672:../cleanflight/src/main/fc/fc_core.c ****         if (isUsingSticksForArming()) {
 3070              	 .loc 13 672 0
 3071 0398 FFF7FEFF 	 bl isUsingSticksForArming
 3072 039c 0346     	 mov r3,r0
 3073 039e 002B     	 cmp r3,#0
 3074 03a0 3CD0     	 beq .L217
 673:../cleanflight/src/main/fc/fc_core.c ****             if (throttleStatus == THROTTLE_LOW) {
 3075              	 .loc 13 673 0
 3076 03a2 BB7C     	 ldrb r3,[r7,#18]
 3077 03a4 002B     	 cmp r3,#0
 3078 03a6 1AD1     	 bne .L218
 674:../cleanflight/src/main/fc/fc_core.c ****                 if (armingConfig()->auto_disarm_delay != 0
 3079              	 .loc 13 674 0
 3080 03a8 FFF7FEFF 	 bl armingConfig
 3081 03ac 0346     	 mov r3,r0
 3082 03ae 5B78     	 ldrb r3,[r3,#1]
 3083 03b0 002B     	 cmp r3,#0
 3084 03b2 0DD0     	 beq .L219
 675:../cleanflight/src/main/fc/fc_core.c ****                     && (int32_t)(disarmAt - millis()) < 0
 3085              	 .loc 13 675 0
 3086 03b4 9A4B     	 ldr r3,.L265+16
 3087 03b6 1C68     	 ldr r4,[r3]
 3088 03b8 FFF7FEFF 	 bl millis
 3089 03bc 0346     	 mov r3,r0
 3090 03be E31A     	 subs r3,r4,r3
 3091 03c0 002B     	 cmp r3,#0
 3092 03c2 05DA     	 bge .L219
 676:../cleanflight/src/main/fc/fc_core.c ****                 ) {
 677:../cleanflight/src/main/fc/fc_core.c ****                     // auto-disarm configured and delay is over
 678:../cleanflight/src/main/fc/fc_core.c ****                     disarm();
 3093              	 .loc 13 678 0
 3094 03c4 FFF7FEFF 	 bl disarm
 679:../cleanflight/src/main/fc/fc_core.c ****                     armedBeeperOn = false;
 3095              	 .loc 13 679 0
 3096 03c8 964B     	 ldr r3,.L265+20
 3097 03ca 0022     	 movs r2,#0
 3098 03cc 1A70     	 strb r2,[r3]
 3099 03ce 38E0     	 b .L216
 3100              	.L219:
 680:../cleanflight/src/main/fc/fc_core.c ****                 } else {
 681:../cleanflight/src/main/fc/fc_core.c ****                     // still armed; do warning beeps while armed
 682:../cleanflight/src/main/fc/fc_core.c ****                     beeper(BEEPER_ARMED);
 3101              	 .loc 13 682 0
 3102 03d0 1020     	 movs r0,#16
 3103 03d2 FFF7FEFF 	 bl beeper
 683:../cleanflight/src/main/fc/fc_core.c ****                     armedBeeperOn = true;
 3104              	 .loc 13 683 0
 3105 03d6 934B     	 ldr r3,.L265+20
 3106 03d8 0122     	 movs r2,#1
 3107 03da 1A70     	 strb r2,[r3]
 3108 03dc 31E0     	 b .L216
 3109              	.L218:
 684:../cleanflight/src/main/fc/fc_core.c ****                 }
 685:../cleanflight/src/main/fc/fc_core.c ****             } else {
 686:../cleanflight/src/main/fc/fc_core.c ****                 // throttle is not low
 687:../cleanflight/src/main/fc/fc_core.c ****                 if (armingConfig()->auto_disarm_delay != 0) {
 3110              	 .loc 13 687 0
 3111 03de FFF7FEFF 	 bl armingConfig
 3112 03e2 0346     	 mov r3,r0
 3113 03e4 5B78     	 ldrb r3,[r3,#1]
 3114 03e6 002B     	 cmp r3,#0
 3115 03e8 0ED0     	 beq .L222
 688:../cleanflight/src/main/fc/fc_core.c ****                     // extend disarm time
 689:../cleanflight/src/main/fc/fc_core.c ****                     disarmAt = millis() + armingConfig()->auto_disarm_delay * 1000;
 3116              	 .loc 13 689 0
 3117 03ea FFF7FEFF 	 bl millis
 3118 03ee 0446     	 mov r4,r0
 3119 03f0 FFF7FEFF 	 bl armingConfig
 3120 03f4 0346     	 mov r3,r0
 3121 03f6 5B78     	 ldrb r3,[r3,#1]
 3122 03f8 1A46     	 mov r2,r3
 3123 03fa 4FF47A73 	 mov r3,#1000
 3124 03fe 03FB02F3 	 mul r3,r3,r2
 3125 0402 2344     	 add r3,r3,r4
 3126 0404 864A     	 ldr r2,.L265+16
 3127 0406 1360     	 str r3,[r2]
 3128              	.L222:
 690:../cleanflight/src/main/fc/fc_core.c ****                 }
 691:../cleanflight/src/main/fc/fc_core.c **** 
 692:../cleanflight/src/main/fc/fc_core.c ****                 if (armedBeeperOn) {
 3129              	 .loc 13 692 0
 3130 0408 864B     	 ldr r3,.L265+20
 3131 040a 1B78     	 ldrb r3,[r3]
 3132 040c 002B     	 cmp r3,#0
 3133 040e 18D0     	 beq .L216
 693:../cleanflight/src/main/fc/fc_core.c ****                     beeperSilence();
 3134              	 .loc 13 693 0
 3135 0410 FFF7FEFF 	 bl beeperSilence
 694:../cleanflight/src/main/fc/fc_core.c ****                     armedBeeperOn = false;
 3136              	 .loc 13 694 0
 3137 0414 834B     	 ldr r3,.L265+20
 3138 0416 0022     	 movs r2,#0
 3139 0418 1A70     	 strb r2,[r3]
 3140 041a 12E0     	 b .L216
 3141              	.L217:
 695:../cleanflight/src/main/fc/fc_core.c ****                 }
 696:../cleanflight/src/main/fc/fc_core.c ****             }
 697:../cleanflight/src/main/fc/fc_core.c ****         } else {
 698:../cleanflight/src/main/fc/fc_core.c ****             // arming is via AUX switch; beep while throttle low
 699:../cleanflight/src/main/fc/fc_core.c ****             if (throttleStatus == THROTTLE_LOW) {
 3142              	 .loc 13 699 0
 3143 041c BB7C     	 ldrb r3,[r7,#18]
 3144 041e 002B     	 cmp r3,#0
 3145 0420 06D1     	 bne .L223
 700:../cleanflight/src/main/fc/fc_core.c ****                 beeper(BEEPER_ARMED);
 3146              	 .loc 13 700 0
 3147 0422 1020     	 movs r0,#16
 3148 0424 FFF7FEFF 	 bl beeper
 701:../cleanflight/src/main/fc/fc_core.c ****                 armedBeeperOn = true;
 3149              	 .loc 13 701 0
 3150 0428 7E4B     	 ldr r3,.L265+20
 3151 042a 0122     	 movs r2,#1
 3152 042c 1A70     	 strb r2,[r3]
 3153 042e 08E0     	 b .L216
 3154              	.L223:
 702:../cleanflight/src/main/fc/fc_core.c ****             } else if (armedBeeperOn) {
 3155              	 .loc 13 702 0
 3156 0430 7C4B     	 ldr r3,.L265+20
 3157 0432 1B78     	 ldrb r3,[r3]
 3158 0434 002B     	 cmp r3,#0
 3159 0436 04D0     	 beq .L216
 703:../cleanflight/src/main/fc/fc_core.c ****                 beeperSilence();
 3160              	 .loc 13 703 0
 3161 0438 FFF7FEFF 	 bl beeperSilence
 704:../cleanflight/src/main/fc/fc_core.c ****                 armedBeeperOn = false;
 3162              	 .loc 13 704 0
 3163 043c 794B     	 ldr r3,.L265+20
 3164 043e 0022     	 movs r2,#0
 3165 0440 1A70     	 strb r2,[r3]
 3166              	.L216:
 705:../cleanflight/src/main/fc/fc_core.c ****             }
 706:../cleanflight/src/main/fc/fc_core.c ****         }
 707:../cleanflight/src/main/fc/fc_core.c ****     }
 708:../cleanflight/src/main/fc/fc_core.c **** 
 709:../cleanflight/src/main/fc/fc_core.c ****     processRcStickPositions();
 3167              	 .loc 13 709 0
 3168 0442 FFF7FEFF 	 bl processRcStickPositions
 710:../cleanflight/src/main/fc/fc_core.c **** 
 711:../cleanflight/src/main/fc/fc_core.c ****     if (feature(FEATURE_INFLIGHT_ACC_CAL)) {
 3169              	 .loc 13 711 0
 3170 0446 0420     	 movs r0,#4
 3171 0448 FFF7FEFF 	 bl feature
 3172 044c 0346     	 mov r3,r0
 3173 044e 002B     	 cmp r3,#0
 3174 0450 01D0     	 beq .L224
 712:../cleanflight/src/main/fc/fc_core.c ****         updateInflightCalibrationState();
 3175              	 .loc 13 712 0
 3176 0452 FFF7FEFF 	 bl updateInflightCalibrationState
 3177              	.L224:
 713:../cleanflight/src/main/fc/fc_core.c ****     }
 714:../cleanflight/src/main/fc/fc_core.c **** 
 715:../cleanflight/src/main/fc/fc_core.c ****     updateActivatedModes();
 3178              	 .loc 13 715 0
 3179 0456 FFF7FEFF 	 bl updateActivatedModes
 716:../cleanflight/src/main/fc/fc_core.c **** 
 717:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_DSHOT
 718:../cleanflight/src/main/fc/fc_core.c ****     /* Enable beep warning when the crash flip mode is active */
 719:../cleanflight/src/main/fc/fc_core.c ****     if (isMotorProtocolDshot() && isModeActivationConditionPresent(BOXFLIPOVERAFTERCRASH) && IS_RC_
 720:../cleanflight/src/main/fc/fc_core.c ****         beeper(BEEPER_CRASH_FLIP_MODE);
 721:../cleanflight/src/main/fc/fc_core.c ****     }
 722:../cleanflight/src/main/fc/fc_core.c **** #endif
 723:../cleanflight/src/main/fc/fc_core.c **** 
 724:../cleanflight/src/main/fc/fc_core.c ****     if (!cliMode) {
 3180              	 .loc 13 724 0
 3181 045a 734B     	 ldr r3,.L265+24
 3182 045c 1B78     	 ldrb r3,[r3]
 3183 045e 002B     	 cmp r3,#0
 3184 0460 06D1     	 bne .L225
 725:../cleanflight/src/main/fc/fc_core.c ****         updateAdjustmentStates();
 3185              	 .loc 13 725 0
 3186 0462 FFF7FEFF 	 bl updateAdjustmentStates
 726:../cleanflight/src/main/fc/fc_core.c ****         processRcAdjustments(currentControlRateProfile);
 3187              	 .loc 13 726 0
 3188 0466 714B     	 ldr r3,.L265+28
 3189 0468 1B68     	 ldr r3,[r3]
 3190 046a 1846     	 mov r0,r3
 3191 046c FFF7FEFF 	 bl processRcAdjustments
 3192              	.L225:
 727:../cleanflight/src/main/fc/fc_core.c ****     }
 728:../cleanflight/src/main/fc/fc_core.c **** 
 729:../cleanflight/src/main/fc/fc_core.c ****     bool canUseHorizonMode = true;
 3193              	 .loc 13 729 0
 3194 0470 0123     	 movs r3,#1
 3195 0472 FB74     	 strb r3,[r7,#19]
 730:../cleanflight/src/main/fc/fc_core.c **** 
 731:../cleanflight/src/main/fc/fc_core.c ****     if ((IS_RC_MODE_ACTIVE(BOXANGLE) || failsafeIsActive()) && (sensors(SENSOR_ACC))) {
 3196              	 .loc 13 731 0
 3197 0474 0120     	 movs r0,#1
 3198 0476 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3199 047a 0346     	 mov r3,r0
 3200 047c 002B     	 cmp r3,#0
 3201 047e 04D1     	 bne .L226
 3202              	 .loc 13 731 0 is_stmt 0 discriminator 2
 3203 0480 FFF7FEFF 	 bl failsafeIsActive
 3204 0484 0346     	 mov r3,r0
 3205 0486 002B     	 cmp r3,#0
 3206 0488 12D0     	 beq .L227
 3207              	.L226:
 3208              	 .loc 13 731 0 discriminator 3
 3209 048a 0220     	 movs r0,#2
 3210 048c FFF7FEFF 	 bl sensors
 3211 0490 0346     	 mov r3,r0
 3212 0492 002B     	 cmp r3,#0
 3213 0494 0CD0     	 beq .L227
 732:../cleanflight/src/main/fc/fc_core.c ****         // bumpless transfer to Level mode
 733:../cleanflight/src/main/fc/fc_core.c ****         canUseHorizonMode = false;
 3214              	 .loc 13 733 0 is_stmt 1
 3215 0496 0023     	 movs r3,#0
 3216 0498 FB74     	 strb r3,[r7,#19]
 734:../cleanflight/src/main/fc/fc_core.c **** 
 735:../cleanflight/src/main/fc/fc_core.c ****         if (!FLIGHT_MODE(ANGLE_MODE)) {
 3217              	 .loc 13 735 0
 3218 049a 654B     	 ldr r3,.L265+32
 3219 049c 1B88     	 ldrh r3,[r3]
 3220 049e 03F00103 	 and r3,r3,#1
 3221 04a2 002B     	 cmp r3,#0
 3222 04a4 03D1     	 bne .L228
 736:../cleanflight/src/main/fc/fc_core.c ****             ENABLE_FLIGHT_MODE(ANGLE_MODE);
 3223              	 .loc 13 736 0
 3224 04a6 0120     	 movs r0,#1
 3225 04a8 FFF7FEFF 	 bl enableFlightMode
 735:../cleanflight/src/main/fc/fc_core.c ****             ENABLE_FLIGHT_MODE(ANGLE_MODE);
 3226              	 .loc 13 735 0
 3227 04ac 03E0     	 b .L229
 3228              	.L228:
 3229 04ae 02E0     	 b .L229
 3230              	.L227:
 737:../cleanflight/src/main/fc/fc_core.c ****         }
 738:../cleanflight/src/main/fc/fc_core.c ****     } else {
 739:../cleanflight/src/main/fc/fc_core.c ****         DISABLE_FLIGHT_MODE(ANGLE_MODE); // failsafe support
 3231              	 .loc 13 739 0
 3232 04b0 0120     	 movs r0,#1
 3233 04b2 FFF7FEFF 	 bl disableFlightMode
 3234              	.L229:
 740:../cleanflight/src/main/fc/fc_core.c ****     }
 741:../cleanflight/src/main/fc/fc_core.c **** 
 742:../cleanflight/src/main/fc/fc_core.c ****     if (IS_RC_MODE_ACTIVE(BOXHORIZON) && canUseHorizonMode) {
 3235              	 .loc 13 742 0
 3236 04b6 0220     	 movs r0,#2
 3237 04b8 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3238 04bc 0346     	 mov r3,r0
 3239 04be 002B     	 cmp r3,#0
 3240 04c0 10D0     	 beq .L230
 3241              	 .loc 13 742 0 is_stmt 0 discriminator 1
 3242 04c2 FB7C     	 ldrb r3,[r7,#19]
 3243 04c4 002B     	 cmp r3,#0
 3244 04c6 0DD0     	 beq .L230
 743:../cleanflight/src/main/fc/fc_core.c **** 
 744:../cleanflight/src/main/fc/fc_core.c ****         DISABLE_FLIGHT_MODE(ANGLE_MODE);
 3245              	 .loc 13 744 0 is_stmt 1
 3246 04c8 0120     	 movs r0,#1
 3247 04ca FFF7FEFF 	 bl disableFlightMode
 745:../cleanflight/src/main/fc/fc_core.c **** 
 746:../cleanflight/src/main/fc/fc_core.c ****         if (!FLIGHT_MODE(HORIZON_MODE)) {
 3248              	 .loc 13 746 0
 3249 04ce 584B     	 ldr r3,.L265+32
 3250 04d0 1B88     	 ldrh r3,[r3]
 3251 04d2 03F00203 	 and r3,r3,#2
 3252 04d6 002B     	 cmp r3,#0
 3253 04d8 03D1     	 bne .L231
 747:../cleanflight/src/main/fc/fc_core.c ****             ENABLE_FLIGHT_MODE(HORIZON_MODE);
 3254              	 .loc 13 747 0
 3255 04da 0220     	 movs r0,#2
 3256 04dc FFF7FEFF 	 bl enableFlightMode
 746:../cleanflight/src/main/fc/fc_core.c ****             ENABLE_FLIGHT_MODE(HORIZON_MODE);
 3257              	 .loc 13 746 0
 3258 04e0 03E0     	 b .L232
 3259              	.L231:
 3260 04e2 02E0     	 b .L232
 3261              	.L230:
 748:../cleanflight/src/main/fc/fc_core.c ****         }
 749:../cleanflight/src/main/fc/fc_core.c ****     } else {
 750:../cleanflight/src/main/fc/fc_core.c ****         DISABLE_FLIGHT_MODE(HORIZON_MODE);
 3262              	 .loc 13 750 0
 3263 04e4 0220     	 movs r0,#2
 3264 04e6 FFF7FEFF 	 bl disableFlightMode
 3265              	.L232:
 751:../cleanflight/src/main/fc/fc_core.c ****     }
 752:../cleanflight/src/main/fc/fc_core.c **** 
 753:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_GPS_RESCUE
 754:../cleanflight/src/main/fc/fc_core.c ****     if (IS_RC_MODE_ACTIVE(BOXGPSRESCUE) || (failsafeIsActive() && failsafeConfig()->failsafe_proced
 3266              	 .loc 13 754 0
 3267 04ea 0A20     	 movs r0,#10
 3268 04ec FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3269 04f0 0346     	 mov r3,r0
 3270 04f2 002B     	 cmp r3,#0
 3271 04f4 0AD1     	 bne .L233
 3272              	 .loc 13 754 0 is_stmt 0 discriminator 1
 3273 04f6 FFF7FEFF 	 bl failsafeIsActive
 3274 04fa 0346     	 mov r3,r0
 3275 04fc 002B     	 cmp r3,#0
 3276 04fe 11D0     	 beq .L234
 3277              	 .loc 13 754 0 discriminator 2
 3278 0500 FFF7FEFF 	 bl failsafeConfig
 3279 0504 0346     	 mov r3,r0
 3280 0506 DB79     	 ldrb r3,[r3,#7]
 3281 0508 022B     	 cmp r3,#2
 3282 050a 0BD1     	 bne .L234
 3283              	.L233:
 755:../cleanflight/src/main/fc/fc_core.c ****         if (!FLIGHT_MODE(GPS_RESCUE_MODE)) {
 3284              	 .loc 13 755 0 is_stmt 1
 3285 050c 484B     	 ldr r3,.L265+32
 3286 050e 1B88     	 ldrh r3,[r3]
 3287 0510 03F40063 	 and r3,r3,#2048
 3288 0514 002B     	 cmp r3,#0
 3289 0516 04D1     	 bne .L235
 756:../cleanflight/src/main/fc/fc_core.c ****             ENABLE_FLIGHT_MODE(GPS_RESCUE_MODE);
 3290              	 .loc 13 756 0
 3291 0518 4FF40060 	 mov r0,#2048
 3292 051c FFF7FEFF 	 bl enableFlightMode
 755:../cleanflight/src/main/fc/fc_core.c ****         if (!FLIGHT_MODE(GPS_RESCUE_MODE)) {
 3293              	 .loc 13 755 0
 3294 0520 04E0     	 b .L236
 3295              	.L235:
 3296 0522 03E0     	 b .L236
 3297              	.L234:
 757:../cleanflight/src/main/fc/fc_core.c ****         }
 758:../cleanflight/src/main/fc/fc_core.c ****     } else {
 759:../cleanflight/src/main/fc/fc_core.c ****         DISABLE_FLIGHT_MODE(GPS_RESCUE_MODE);
 3298              	 .loc 13 759 0
 3299 0524 4FF40060 	 mov r0,#2048
 3300 0528 FFF7FEFF 	 bl disableFlightMode
 3301              	.L236:
 760:../cleanflight/src/main/fc/fc_core.c ****     }
 761:../cleanflight/src/main/fc/fc_core.c **** #endif
 762:../cleanflight/src/main/fc/fc_core.c **** 
 763:../cleanflight/src/main/fc/fc_core.c ****     if (FLIGHT_MODE(ANGLE_MODE) || FLIGHT_MODE(HORIZON_MODE)) {
 3302              	 .loc 13 763 0
 3303 052c 404B     	 ldr r3,.L265+32
 3304 052e 1B88     	 ldrh r3,[r3]
 3305 0530 03F00103 	 and r3,r3,#1
 3306 0534 002B     	 cmp r3,#0
 3307 0536 05D1     	 bne .L237
 3308              	 .loc 13 763 0 is_stmt 0 discriminator 1
 3309 0538 3D4B     	 ldr r3,.L265+32
 3310 053a 1B88     	 ldrh r3,[r3]
 3311 053c 03F00203 	 and r3,r3,#2
 3312 0540 002B     	 cmp r3,#0
 3313 0542 09D0     	 beq .L238
 3314              	.L237:
 764:../cleanflight/src/main/fc/fc_core.c ****         LED1_ON;
 3315              	 .loc 13 764 0 is_stmt 1
 3316 0544 0120     	 movs r0,#1
 3317 0546 0121     	 movs r1,#1
 3318 0548 FFF7FEFF 	 bl ledSet
 765:../cleanflight/src/main/fc/fc_core.c ****         // increase frequency of attitude task to reduce drift when in angle or horizon mode
 766:../cleanflight/src/main/fc/fc_core.c ****         rescheduleTask(TASK_ATTITUDE, TASK_PERIOD_HZ(500));
 3319              	 .loc 13 766 0
 3320 054c 0420     	 movs r0,#4
 3321 054e 4FF4FA61 	 mov r1,#2000
 3322 0552 FFF7FEFF 	 bl rescheduleTask
 3323 0556 08E0     	 b .L239
 3324              	.L238:
 767:../cleanflight/src/main/fc/fc_core.c ****     } else {
 768:../cleanflight/src/main/fc/fc_core.c ****         LED1_OFF;
 3325              	 .loc 13 768 0
 3326 0558 0120     	 movs r0,#1
 3327 055a 0021     	 movs r1,#0
 3328 055c FFF7FEFF 	 bl ledSet
 769:../cleanflight/src/main/fc/fc_core.c ****         rescheduleTask(TASK_ATTITUDE, TASK_PERIOD_HZ(100));
 3329              	 .loc 13 769 0
 3330 0560 0420     	 movs r0,#4
 3331 0562 42F21071 	 movw r1,#10000
 3332 0566 FFF7FEFF 	 bl rescheduleTask
 3333              	.L239:
 770:../cleanflight/src/main/fc/fc_core.c ****     }
 771:../cleanflight/src/main/fc/fc_core.c **** 
 772:../cleanflight/src/main/fc/fc_core.c ****     if (!IS_RC_MODE_ACTIVE(BOXPREARM) && ARMING_FLAG(WAS_ARMED_WITH_PREARM)) {
 3334              	 .loc 13 772 0
 3335 056a 1F20     	 movs r0,#31
 3336 056c FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3337 0570 0346     	 mov r3,r0
 3338 0572 83F00103 	 eor r3,r3,#1
 3339 0576 DBB2     	 uxtb r3,r3
 3340 0578 002B     	 cmp r3,#0
 3341 057a 0CD0     	 beq .L240
 3342              	 .loc 13 772 0 is_stmt 0 discriminator 1
 3343 057c 264B     	 ldr r3,.L265+8
 3344 057e 1B78     	 ldrb r3,[r3]
 3345 0580 03F00403 	 and r3,r3,#4
 3346 0584 002B     	 cmp r3,#0
 3347 0586 06D0     	 beq .L240
 773:../cleanflight/src/main/fc/fc_core.c ****         DISABLE_ARMING_FLAG(WAS_ARMED_WITH_PREARM);
 3348              	 .loc 13 773 0 is_stmt 1
 3349 0588 234B     	 ldr r3,.L265+8
 3350 058a 1B78     	 ldrb r3,[r3]
 3351 058c 23F00403 	 bic r3,r3,#4
 3352 0590 DAB2     	 uxtb r2,r3
 3353 0592 214B     	 ldr r3,.L265+8
 3354 0594 1A70     	 strb r2,[r3]
 3355              	.L240:
 774:../cleanflight/src/main/fc/fc_core.c ****     }
 775:../cleanflight/src/main/fc/fc_core.c **** 
 776:../cleanflight/src/main/fc/fc_core.c **** #if defined(USE_ACC) || defined(USE_MAG)
 777:../cleanflight/src/main/fc/fc_core.c ****     if (sensors(SENSOR_ACC) || sensors(SENSOR_MAG)) {
 3356              	 .loc 13 777 0
 3357 0596 0220     	 movs r0,#2
 3358 0598 FFF7FEFF 	 bl sensors
 3359 059c 0346     	 mov r3,r0
 3360 059e 002B     	 cmp r3,#0
 3361 05a0 05D1     	 bne .L241
 3362              	 .loc 13 777 0 is_stmt 0 discriminator 1
 3363 05a2 0820     	 movs r0,#8
 3364 05a4 FFF7FEFF 	 bl sensors
 3365 05a8 0346     	 mov r3,r0
 3366 05aa 002B     	 cmp r3,#0
 3367 05ac 59D0     	 beq .L242
 3368              	.L241:
 778:../cleanflight/src/main/fc/fc_core.c **** #if defined(USE_GPS) || defined(USE_MAG)
 779:../cleanflight/src/main/fc/fc_core.c ****         if (IS_RC_MODE_ACTIVE(BOXMAG)) {
 3369              	 .loc 13 779 0 is_stmt 1
 3370 05ae 0320     	 movs r0,#3
 3371 05b0 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3372 05b4 0346     	 mov r3,r0
 3373 05b6 002B     	 cmp r3,#0
 3374 05b8 17D0     	 beq .L243
 780:../cleanflight/src/main/fc/fc_core.c ****             if (!FLIGHT_MODE(MAG_MODE)) {
 3375              	 .loc 13 780 0
 3376 05ba 1D4B     	 ldr r3,.L265+32
 3377 05bc 1B88     	 ldrh r3,[r3]
 3378 05be 03F00403 	 and r3,r3,#4
 3379 05c2 002B     	 cmp r3,#0
 3380 05c4 14D1     	 bne .L245
 781:../cleanflight/src/main/fc/fc_core.c ****                 ENABLE_FLIGHT_MODE(MAG_MODE);
 3381              	 .loc 13 781 0
 3382 05c6 0420     	 movs r0,#4
 3383 05c8 FFF7FEFF 	 bl enableFlightMode
 782:../cleanflight/src/main/fc/fc_core.c ****                 magHold = DECIDEGREES_TO_DEGREES(attitude.values.yaw);
 3384              	 .loc 13 782 0
 3385 05cc 194B     	 ldr r3,.L265+36
 3386 05ce B3F90430 	 ldrsh r3,[r3,#4]
 3387 05d2 9BB2     	 uxth r3,r3
 3388 05d4 1BB2     	 sxth r3,r3
 3389 05d6 184A     	 ldr r2,.L265+40
 3390 05d8 82FB0312 	 smull r1,r2,r2,r3
 3391 05dc 9210     	 asrs r2,r2,#2
 3392 05de DB17     	 asrs r3,r3,#31
 3393 05e0 D31A     	 subs r3,r2,r3
 3394 05e2 9AB2     	 uxth r2,r3
 3395 05e4 154B     	 ldr r3,.L265+44
 3396 05e6 1A80     	 strh r2,[r3]
 3397 05e8 02E0     	 b .L245
 3398              	.L243:
 783:../cleanflight/src/main/fc/fc_core.c ****             }
 784:../cleanflight/src/main/fc/fc_core.c ****         } else {
 785:../cleanflight/src/main/fc/fc_core.c ****             DISABLE_FLIGHT_MODE(MAG_MODE);
 3399              	 .loc 13 785 0
 3400 05ea 0420     	 movs r0,#4
 3401 05ec FFF7FEFF 	 bl disableFlightMode
 3402              	.L245:
 786:../cleanflight/src/main/fc/fc_core.c ****         }
 787:../cleanflight/src/main/fc/fc_core.c **** #endif
 788:../cleanflight/src/main/fc/fc_core.c ****         if (IS_RC_MODE_ACTIVE(BOXHEADFREE)) {
 3403              	 .loc 13 788 0
 3404 05f0 0720     	 movs r0,#7
 3405 05f2 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3406 05f6 0346     	 mov r3,r0
 3407 05f8 002B     	 cmp r3,#0
 3408 05fa 21D0     	 beq .L246
 789:../cleanflight/src/main/fc/fc_core.c ****             if (!FLIGHT_MODE(HEADFREE_MODE)) {
 3409              	 .loc 13 789 0
 3410 05fc 0C4B     	 ldr r3,.L265+32
 3411 05fe 1B88     	 ldrh r3,[r3]
 3412 0600 03F04003 	 and r3,r3,#64
 3413 0604 002B     	 cmp r3,#0
 3414 0606 1ED1     	 bne .L248
 790:../cleanflight/src/main/fc/fc_core.c ****                 ENABLE_FLIGHT_MODE(HEADFREE_MODE);
 3415              	 .loc 13 790 0
 3416 0608 4020     	 movs r0,#64
 3417 060a FFF7FEFF 	 bl enableFlightMode
 3418 060e 1AE0     	 b .L248
 3419              	.L266:
 3420              	 .align 2
 3421              	.L265:
 3422 0610 00000000 	 .word debugMode
 3423 0614 00000000 	 .word debug
 3424 0618 00000000 	 .word armingFlags
 3425 061c 00000000 	 .word stateFlags
 3426 0620 00000000 	 .word disarmAt
 3427 0624 00000000 	 .word armedBeeperOn.16217
 3428 0628 00000000 	 .word cliMode
 3429 062c 00000000 	 .word currentControlRateProfile
 3430 0630 00000000 	 .word flightModeFlags
 3431 0634 00000000 	 .word attitude
 3432 0638 67666666 	 .word 1717986919
 3433 063c 00000000 	 .word magHold
 3434              	.L246:
 791:../cleanflight/src/main/fc/fc_core.c ****             }
 792:../cleanflight/src/main/fc/fc_core.c ****         } else {
 793:../cleanflight/src/main/fc/fc_core.c ****             DISABLE_FLIGHT_MODE(HEADFREE_MODE);
 3435              	 .loc 13 793 0
 3436 0640 4020     	 movs r0,#64
 3437 0642 FFF7FEFF 	 bl disableFlightMode
 3438              	.L248:
 794:../cleanflight/src/main/fc/fc_core.c ****         }
 795:../cleanflight/src/main/fc/fc_core.c ****         if (IS_RC_MODE_ACTIVE(BOXHEADADJ)) {
 3439              	 .loc 13 795 0
 3440 0646 0C20     	 movs r0,#12
 3441 0648 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3442 064c 0346     	 mov r3,r0
 3443 064e 002B     	 cmp r3,#0
 3444 0650 07D0     	 beq .L242
 796:../cleanflight/src/main/fc/fc_core.c ****             if (imuQuaternionHeadfreeOffsetSet()){
 3445              	 .loc 13 796 0
 3446 0652 FFF7FEFF 	 bl imuQuaternionHeadfreeOffsetSet
 3447 0656 0346     	 mov r3,r0
 3448 0658 002B     	 cmp r3,#0
 3449 065a 02D0     	 beq .L242
 797:../cleanflight/src/main/fc/fc_core.c ****                beeper(BEEPER_RX_SET);
 3450              	 .loc 13 797 0
 3451 065c 0A20     	 movs r0,#10
 3452 065e FFF7FEFF 	 bl beeper
 3453              	.L242:
 798:../cleanflight/src/main/fc/fc_core.c ****             }
 799:../cleanflight/src/main/fc/fc_core.c ****         }
 800:../cleanflight/src/main/fc/fc_core.c ****     }
 801:../cleanflight/src/main/fc/fc_core.c **** #endif
 802:../cleanflight/src/main/fc/fc_core.c **** 
 803:../cleanflight/src/main/fc/fc_core.c ****     if (IS_RC_MODE_ACTIVE(BOXPASSTHRU)) {
 3454              	 .loc 13 803 0
 3455 0662 0820     	 movs r0,#8
 3456 0664 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3457 0668 0346     	 mov r3,r0
 3458 066a 002B     	 cmp r3,#0
 3459 066c 04D0     	 beq .L249
 804:../cleanflight/src/main/fc/fc_core.c ****         ENABLE_FLIGHT_MODE(PASSTHRU_MODE);
 3460              	 .loc 13 804 0
 3461 066e 4FF48070 	 mov r0,#256
 3462 0672 FFF7FEFF 	 bl enableFlightMode
 3463 0676 03E0     	 b .L250
 3464              	.L249:
 805:../cleanflight/src/main/fc/fc_core.c ****     } else {
 806:../cleanflight/src/main/fc/fc_core.c ****         DISABLE_FLIGHT_MODE(PASSTHRU_MODE);
 3465              	 .loc 13 806 0
 3466 0678 4FF48070 	 mov r0,#256
 3467 067c FFF7FEFF 	 bl disableFlightMode
 3468              	.L250:
 807:../cleanflight/src/main/fc/fc_core.c ****     }
 808:../cleanflight/src/main/fc/fc_core.c **** 
 809:../cleanflight/src/main/fc/fc_core.c ****     if (mixerConfig()->mixerMode == MIXER_FLYING_WING || mixerConfig()->mixerMode == MIXER_AIRPLANE
 3469              	 .loc 13 809 0
 3470 0680 FFF7FEFF 	 bl mixerConfig
 3471 0684 0346     	 mov r3,r0
 3472 0686 1B78     	 ldrb r3,[r3]
 3473 0688 082B     	 cmp r3,#8
 3474 068a 05D0     	 beq .L251
 3475              	 .loc 13 809 0 is_stmt 0 discriminator 1
 3476 068c FFF7FEFF 	 bl mixerConfig
 3477 0690 0346     	 mov r3,r0
 3478 0692 1B78     	 ldrb r3,[r3]
 3479 0694 0E2B     	 cmp r3,#14
 3480 0696 02D1     	 bne .L252
 3481              	.L251:
 810:../cleanflight/src/main/fc/fc_core.c ****         DISABLE_FLIGHT_MODE(HEADFREE_MODE);
 3482              	 .loc 13 810 0 is_stmt 1
 3483 0698 4020     	 movs r0,#64
 3484 069a FFF7FEFF 	 bl disableFlightMode
 3485              	.L252:
 811:../cleanflight/src/main/fc/fc_core.c ****     }
 812:../cleanflight/src/main/fc/fc_core.c **** 
 813:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_TELEMETRY
 814:../cleanflight/src/main/fc/fc_core.c ****     static bool sharedPortTelemetryEnabled = false;
 815:../cleanflight/src/main/fc/fc_core.c **** 
 816:../cleanflight/src/main/fc/fc_core.c ****     if (feature(FEATURE_TELEMETRY)) {
 817:../cleanflight/src/main/fc/fc_core.c ****         bool enableSharedPortTelemetry = (!isModeActivationConditionPresent(BOXTELEMETRY) && ARMING
 818:../cleanflight/src/main/fc/fc_core.c ****         if (enableSharedPortTelemetry && !sharedPortTelemetryEnabled) {
 819:../cleanflight/src/main/fc/fc_core.c ****             mspSerialReleaseSharedTelemetryPorts();
 820:../cleanflight/src/main/fc/fc_core.c ****             telemetryCheckState();
 821:../cleanflight/src/main/fc/fc_core.c **** 
 822:../cleanflight/src/main/fc/fc_core.c ****             sharedPortTelemetryEnabled = true;
 823:../cleanflight/src/main/fc/fc_core.c ****         } else if (!enableSharedPortTelemetry && sharedPortTelemetryEnabled) {
 824:../cleanflight/src/main/fc/fc_core.c ****             // the telemetry state must be checked immediately so that shared serial ports are rele
 825:../cleanflight/src/main/fc/fc_core.c ****             telemetryCheckState();
 826:../cleanflight/src/main/fc/fc_core.c ****             mspSerialAllocatePorts();
 827:../cleanflight/src/main/fc/fc_core.c **** 
 828:../cleanflight/src/main/fc/fc_core.c ****             sharedPortTelemetryEnabled = false;
 829:../cleanflight/src/main/fc/fc_core.c ****         }
 830:../cleanflight/src/main/fc/fc_core.c ****     }
 831:../cleanflight/src/main/fc/fc_core.c **** #endif
 832:../cleanflight/src/main/fc/fc_core.c **** 
 833:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_VTX_CONTROL
 834:../cleanflight/src/main/fc/fc_core.c ****     vtxUpdateActivatedChannel();
 3486              	 .loc 13 834 0
 3487 069e FFF7FEFF 	 bl vtxUpdateActivatedChannel
 835:../cleanflight/src/main/fc/fc_core.c **** 
 836:../cleanflight/src/main/fc/fc_core.c ****     if (canUpdateVTX()) {
 3488              	 .loc 13 836 0
 3489 06a2 FFF7FEFF 	 bl canUpdateVTX
 3490 06a6 0346     	 mov r3,r0
 3491 06a8 002B     	 cmp r3,#0
 3492 06aa 01D0     	 beq .L253
 837:../cleanflight/src/main/fc/fc_core.c ****         handleVTXControlButton();
 3493              	 .loc 13 837 0
 3494 06ac FFF7FEFF 	 bl handleVTXControlButton
 3495              	.L253:
 838:../cleanflight/src/main/fc/fc_core.c ****     }
 839:../cleanflight/src/main/fc/fc_core.c **** #endif
 840:../cleanflight/src/main/fc/fc_core.c **** 
 841:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_ACRO_TRAINER
 842:../cleanflight/src/main/fc/fc_core.c ****     pidSetAcroTrainerState(IS_RC_MODE_ACTIVE(BOXACROTRAINER) && sensors(SENSOR_ACC));
 3496              	 .loc 13 842 0
 3497 06b0 2820     	 movs r0,#40
 3498 06b2 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3499 06b6 0346     	 mov r3,r0
 3500 06b8 002B     	 cmp r3,#0
 3501 06ba 07D0     	 beq .L254
 3502              	 .loc 13 842 0 is_stmt 0 discriminator 1
 3503 06bc 0220     	 movs r0,#2
 3504 06be FFF7FEFF 	 bl sensors
 3505 06c2 0346     	 mov r3,r0
 3506 06c4 002B     	 cmp r3,#0
 3507 06c6 01D0     	 beq .L254
 3508              	 .loc 13 842 0 discriminator 3
 3509 06c8 0123     	 movs r3,#1
 3510 06ca 00E0     	 b .L255
 3511              	.L254:
 3512              	 .loc 13 842 0 discriminator 4
 3513 06cc 0023     	 movs r3,#0
 3514              	.L255:
 3515              	 .loc 13 842 0 discriminator 6
 3516 06ce 03F00103 	 and r3,r3,#1
 3517 06d2 DBB2     	 uxtb r3,r3
 3518 06d4 1846     	 mov r0,r3
 3519 06d6 FFF7FEFF 	 bl pidSetAcroTrainerState
 843:../cleanflight/src/main/fc/fc_core.c **** #endif // USE_ACRO_TRAINER
 844:../cleanflight/src/main/fc/fc_core.c **** 
 845:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_RC_SMOOTHING_FILTER
 846:../cleanflight/src/main/fc/fc_core.c ****     if (ARMING_FLAG(ARMED) && !rcSmoothingInitializationComplete()) {
 3520              	 .loc 13 846 0 is_stmt 1 discriminator 6
 3521 06da 164B     	 ldr r3,.L267
 3522 06dc 1B78     	 ldrb r3,[r3]
 3523 06de 03F00103 	 and r3,r3,#1
 3524 06e2 002B     	 cmp r3,#0
 3525 06e4 0AD0     	 beq .L256
 3526              	 .loc 13 846 0 is_stmt 0 discriminator 1
 3527 06e6 FFF7FEFF 	 bl rcSmoothingInitializationComplete
 3528 06ea 0346     	 mov r3,r0
 3529 06ec 83F00103 	 eor r3,r3,#1
 3530 06f0 DBB2     	 uxtb r3,r3
 3531 06f2 002B     	 cmp r3,#0
 3532 06f4 02D0     	 beq .L256
 847:../cleanflight/src/main/fc/fc_core.c ****         beeper(BEEPER_RC_SMOOTHING_INIT_FAIL);
 3533              	 .loc 13 847 0 is_stmt 1
 3534 06f6 1720     	 movs r0,#23
 3535 06f8 FFF7FEFF 	 bl beeper
 3536              	.L256:
 848:../cleanflight/src/main/fc/fc_core.c ****     }
 849:../cleanflight/src/main/fc/fc_core.c **** #endif
 850:../cleanflight/src/main/fc/fc_core.c **** 
 851:../cleanflight/src/main/fc/fc_core.c ****     pidSetAntiGravityState(IS_RC_MODE_ACTIVE(BOXANTIGRAVITY) || feature(FEATURE_ANTI_GRAVITY));
 3537              	 .loc 13 851 0
 3538 06fc 0B20     	 movs r0,#11
 3539 06fe FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3540 0702 0346     	 mov r3,r0
 3541 0704 002B     	 cmp r3,#0
 3542 0706 06D1     	 bne .L257
 3543              	 .loc 13 851 0 is_stmt 0 discriminator 2
 3544 0708 4FF08050 	 mov r0,#268435456
 3545 070c FFF7FEFF 	 bl feature
 3546 0710 0346     	 mov r3,r0
 3547 0712 002B     	 cmp r3,#0
 3548 0714 01D0     	 beq .L258
 3549              	.L257:
 3550              	 .loc 13 851 0 discriminator 3
 3551 0716 0123     	 movs r3,#1
 3552 0718 00E0     	 b .L259
 3553              	.L258:
 3554              	 .loc 13 851 0 discriminator 4
 3555 071a 0023     	 movs r3,#0
 3556              	.L259:
 3557              	 .loc 13 851 0 discriminator 6
 3558 071c 03F00103 	 and r3,r3,#1
 3559 0720 DBB2     	 uxtb r3,r3
 3560 0722 1846     	 mov r0,r3
 3561 0724 FFF7FEFF 	 bl pidSetAntiGravityState
 852:../cleanflight/src/main/fc/fc_core.c ****     
 853:../cleanflight/src/main/fc/fc_core.c ****     return true;
 3562              	 .loc 13 853 0 is_stmt 1 discriminator 6
 3563 0728 0123     	 movs r3,#1
 3564              	.L185:
 854:../cleanflight/src/main/fc/fc_core.c **** }
 3565              	 .loc 13 854 0
 3566 072a 1846     	 mov r0,r3
 3567 072c 1C37     	 adds r7,r7,#28
 3568              	.LCFI123:
 3569              	 .cfi_def_cfa_offset 12
 3570 072e BD46     	 mov sp,r7
 3571              	.LCFI124:
 3572              	 .cfi_def_cfa_register 13
 3573              	 
 3574 0730 90BD     	 pop {r4,r7,pc}
 3575              	.L268:
 3576 0732 00BF     	 .align 2
 3577              	.L267:
 3578 0734 00000000 	 .word armingFlags
 3579              	 .cfi_endproc
 3580              	.LFE637:
 3582              	 .section .text.subTaskPidController,"ax",%progbits
 3583              	 .align 2
 3584              	 .thumb
 3585              	 .thumb_func
 3587              	subTaskPidController:
 3588              	.LFB638:
 855:../cleanflight/src/main/fc/fc_core.c **** 
 856:../cleanflight/src/main/fc/fc_core.c **** static FAST_CODE void subTaskPidController(timeUs_t currentTimeUs)
 857:../cleanflight/src/main/fc/fc_core.c **** {
 3589              	 .loc 13 857 0
 3590              	 .cfi_startproc
 3591              	 
 3592              	 
 3593 0000 90B5     	 push {r4,r7,lr}
 3594              	.LCFI125:
 3595              	 .cfi_def_cfa_offset 12
 3596              	 .cfi_offset 4,-12
 3597              	 .cfi_offset 7,-8
 3598              	 .cfi_offset 14,-4
 3599 0002 87B0     	 sub sp,sp,#28
 3600              	.LCFI126:
 3601              	 .cfi_def_cfa_offset 40
 3602 0004 00AF     	 add r7,sp,#0
 3603              	.LCFI127:
 3604              	 .cfi_def_cfa_register 7
 3605 0006 7860     	 str r0,[r7,#4]
 858:../cleanflight/src/main/fc/fc_core.c ****     uint32_t startTime = 0;
 3606              	 .loc 13 858 0
 3607 0008 0023     	 movs r3,#0
 3608 000a 7B61     	 str r3,[r7,#20]
 859:../cleanflight/src/main/fc/fc_core.c ****     if (debugMode == DEBUG_PIDLOOP) {startTime = micros();}
 3609              	 .loc 13 859 0
 3610 000c 7B4B     	 ldr r3,.L291
 3611 000e 1B78     	 ldrb r3,[r3]
 3612 0010 052B     	 cmp r3,#5
 3613 0012 02D1     	 bne .L270
 3614              	 .loc 13 859 0 is_stmt 0 discriminator 1
 3615 0014 FFF7FEFF 	 bl micros
 3616 0018 7861     	 str r0,[r7,#20]
 3617              	.L270:
 860:../cleanflight/src/main/fc/fc_core.c ****     // PID - note this is function pointer set by setPIDController()
 861:../cleanflight/src/main/fc/fc_core.c ****     pidController(currentPidProfile, &accelerometerConfig()->accelerometerTrims, currentTimeUs);
 3618              	 .loc 13 861 0 is_stmt 1
 3619 001a 794B     	 ldr r3,.L291+4
 3620 001c 1C68     	 ldr r4,[r3]
 3621 001e FFF7FEFF 	 bl accelerometerConfig
 3622 0022 0346     	 mov r3,r0
 3623 0024 0B33     	 adds r3,r3,#11
 3624 0026 2046     	 mov r0,r4
 3625 0028 1946     	 mov r1,r3
 3626 002a 7A68     	 ldr r2,[r7,#4]
 3627 002c FFF7FEFF 	 bl pidController
 862:../cleanflight/src/main/fc/fc_core.c ****     DEBUG_SET(DEBUG_PIDLOOP, 1, micros() - startTime);
 3628              	 .loc 13 862 0
 3629 0030 724B     	 ldr r3,.L291
 3630 0032 1B78     	 ldrb r3,[r3]
 3631 0034 052B     	 cmp r3,#5
 3632 0036 0AD1     	 bne .L271
 3633              	 .loc 13 862 0 is_stmt 0 discriminator 1
 3634 0038 FFF7FEFF 	 bl micros
 3635 003c 0346     	 mov r3,r0
 3636 003e 9AB2     	 uxth r2,r3
 3637 0040 7B69     	 ldr r3,[r7,#20]
 3638 0042 9BB2     	 uxth r3,r3
 3639 0044 D31A     	 subs r3,r2,r3
 3640 0046 9BB2     	 uxth r3,r3
 3641 0048 9AB2     	 uxth r2,r3
 3642 004a 6E4B     	 ldr r3,.L291+8
 3643 004c 5A80     	 strh r2,[r3,#2]
 3644              	.L271:
 863:../cleanflight/src/main/fc/fc_core.c **** 
 864:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_RUNAWAY_TAKEOFF
 865:../cleanflight/src/main/fc/fc_core.c ****     // Check to see if runaway takeoff detection is active (anti-taz), the pidSum is over the thres
 866:../cleanflight/src/main/fc/fc_core.c ****     // and gyro rate for any axis is above the limit for at least the activate delay period.
 867:../cleanflight/src/main/fc/fc_core.c ****     // If so, disarm for safety
 868:../cleanflight/src/main/fc/fc_core.c ****     if (ARMING_FLAG(ARMED)
 3645              	 .loc 13 868 0 is_stmt 1
 3646 004e 6E4B     	 ldr r3,.L291+12
 3647 0050 1B78     	 ldrb r3,[r3]
 3648 0052 03F00103 	 and r3,r3,#1
 3649 0056 002B     	 cmp r3,#0
 3650 0058 00F0BC80 	 beq .L272
 869:../cleanflight/src/main/fc/fc_core.c ****         && !STATE(FIXED_WING)
 3651              	 .loc 13 869 0
 3652 005c 6B4B     	 ldr r3,.L291+16
 3653 005e 1B78     	 ldrb r3,[r3]
 3654 0060 03F01003 	 and r3,r3,#16
 3655 0064 002B     	 cmp r3,#0
 3656 0066 40F0B580 	 bne .L272
 870:../cleanflight/src/main/fc/fc_core.c ****         && pidConfig()->runaway_takeoff_prevention
 3657              	 .loc 13 870 0
 3658 006a FFF7FEFF 	 bl pidConfig
 3659 006e 0346     	 mov r3,r0
 3660 0070 5B78     	 ldrb r3,[r3,#1]
 3661 0072 002B     	 cmp r3,#0
 3662 0074 00F0AE80 	 beq .L272
 871:../cleanflight/src/main/fc/fc_core.c ****         && !runawayTakeoffCheckDisabled
 3663              	 .loc 13 871 0
 3664 0078 654B     	 ldr r3,.L291+20
 3665 007a 1B78     	 ldrb r3,[r3]
 3666 007c 83F00103 	 eor r3,r3,#1
 3667 0080 DBB2     	 uxtb r3,r3
 3668 0082 002B     	 cmp r3,#0
 3669 0084 00F0A680 	 beq .L272
 872:../cleanflight/src/main/fc/fc_core.c ****         && !flipOverAfterCrashMode
 3670              	 .loc 13 872 0
 3671 0088 624B     	 ldr r3,.L291+24
 3672 008a 1B78     	 ldrb r3,[r3]
 3673 008c 83F00103 	 eor r3,r3,#1
 3674 0090 DBB2     	 uxtb r3,r3
 3675 0092 002B     	 cmp r3,#0
 3676 0094 00F09E80 	 beq .L272
 873:../cleanflight/src/main/fc/fc_core.c ****         && !runawayTakeoffTemporarilyDisabled
 3677              	 .loc 13 873 0
 3678 0098 5F4B     	 ldr r3,.L291+28
 3679 009a 1B78     	 ldrb r3,[r3]
 3680 009c 83F00103 	 eor r3,r3,#1
 3681 00a0 DBB2     	 uxtb r3,r3
 3682 00a2 002B     	 cmp r3,#0
 3683 00a4 00F09680 	 beq .L272
 874:../cleanflight/src/main/fc/fc_core.c ****         && (!feature(FEATURE_MOTOR_STOP) || isAirmodeActive() || (calculateThrottleStatus() != THRO
 3684              	 .loc 13 874 0
 3685 00a8 1020     	 movs r0,#16
 3686 00aa FFF7FEFF 	 bl feature
 3687 00ae 0346     	 mov r3,r0
 3688 00b0 83F00103 	 eor r3,r3,#1
 3689 00b4 DBB2     	 uxtb r3,r3
 3690 00b6 002B     	 cmp r3,#0
 3691 00b8 0AD1     	 bne .L273
 3692              	 .loc 13 874 0 is_stmt 0 discriminator 1
 3693 00ba FFF7FEFF 	 bl isAirmodeActive
 3694 00be 0346     	 mov r3,r0
 3695 00c0 002B     	 cmp r3,#0
 3696 00c2 05D1     	 bne .L273
 3697              	 .loc 13 874 0 discriminator 2
 3698 00c4 FFF7FEFF 	 bl calculateThrottleStatus
 3699 00c8 0346     	 mov r3,r0
 3700 00ca 002B     	 cmp r3,#0
 3701 00cc 00F08280 	 beq .L272
 3702              	.L273:
 875:../cleanflight/src/main/fc/fc_core.c **** 
 876:../cleanflight/src/main/fc/fc_core.c ****         if (((fabsf(pidData[FD_PITCH].Sum) >= RUNAWAY_TAKEOFF_PIDSUM_THRESHOLD)
 3703              	 .loc 13 876 0 is_stmt 1
 3704 00d0 524B     	 ldr r3,.L291+32
 3705 00d2 5B6A     	 ldr r3,[r3,#36]
 3706 00d4 07EE903A 	 fmsr s15,r3
 3707 00d8 F0EEE77A 	 fabss s15,s15
 3708 00dc 9FED507A 	 flds s14,.L291+36
 3709 00e0 F4EEC77A 	 fcmpes s15,s14
 3710 00e4 F1EE10FA 	 fmstat
 3711 00e8 19DA     	 bge .L274
 877:../cleanflight/src/main/fc/fc_core.c ****             || (fabsf(pidData[FD_ROLL].Sum) >= RUNAWAY_TAKEOFF_PIDSUM_THRESHOLD)
 3712              	 .loc 13 877 0
 3713 00ea 4C4B     	 ldr r3,.L291+32
 3714 00ec 1B69     	 ldr r3,[r3,#16]
 3715 00ee 07EE903A 	 fmsr s15,r3
 3716 00f2 F0EEE77A 	 fabss s15,s15
 3717 00f6 9FED4A7A 	 flds s14,.L291+36
 3718 00fa F4EEC77A 	 fcmpes s15,s14
 3719 00fe F1EE10FA 	 fmstat
 3720 0102 0CDA     	 bge .L274
 878:../cleanflight/src/main/fc/fc_core.c ****             || (fabsf(pidData[FD_YAW].Sum) >= RUNAWAY_TAKEOFF_PIDSUM_THRESHOLD))
 3721              	 .loc 13 878 0
 3722 0104 454B     	 ldr r3,.L291+32
 3723 0106 9B6B     	 ldr r3,[r3,#56]
 3724 0108 07EE903A 	 fmsr s15,r3
 3725 010c F0EEE77A 	 fabss s15,s15
 3726 0110 9FED437A 	 flds s14,.L291+36
 3727 0114 F4EEC77A 	 fcmpes s15,s14
 3728 0118 F1EE10FA 	 fmstat
 3729 011c 40DB     	 blt .L275
 3730              	.L274:
 3731              	.LBB13:
 879:../cleanflight/src/main/fc/fc_core.c ****             && ((ABS(gyroAbsRateDps(FD_PITCH)) > RUNAWAY_TAKEOFF_GYRO_LIMIT_RP)
 3732              	 .loc 13 879 0
 3733 011e 0120     	 movs r0,#1
 3734 0120 FFF7FEFF 	 bl gyroAbsRateDps
 3735 0124 0346     	 mov r3,r0
 3736 0126 7B82     	 strh r3,[r7,#18]
 3737 0128 7B8A     	 ldrh r3,[r7,#18]
 3738 012a 002B     	 cmp r3,#0
 3739 012c 01D0     	 beq .L277
 3740              	 .loc 13 879 0 is_stmt 0 discriminator 1
 3741 012e 7B8A     	 ldrh r3,[r7,#18]
 3742 0130 01E0     	 b .L278
 3743              	.L277:
 3744              	 .loc 13 879 0 discriminator 2
 3745 0132 7B8A     	 ldrh r3,[r7,#18]
 3746 0134 5B42     	 negs r3,r3
 3747              	.L278:
 3748              	.LBE13:
 3749              	 .loc 13 879 0 discriminator 4
 3750 0136 0F2B     	 cmp r3,#15
 3751 0138 1BDC     	 bgt .L279
 3752              	.LBB14:
 880:../cleanflight/src/main/fc/fc_core.c ****                 || (ABS(gyroAbsRateDps(FD_ROLL)) > RUNAWAY_TAKEOFF_GYRO_LIMIT_RP)
 3753              	 .loc 13 880 0 is_stmt 1
 3754 013a 0020     	 movs r0,#0
 3755 013c FFF7FEFF 	 bl gyroAbsRateDps
 3756 0140 0346     	 mov r3,r0
 3757 0142 3B82     	 strh r3,[r7,#16]
 3758 0144 3B8A     	 ldrh r3,[r7,#16]
 3759 0146 002B     	 cmp r3,#0
 3760 0148 01D0     	 beq .L280
 3761              	 .loc 13 880 0 is_stmt 0 discriminator 1
 3762 014a 3B8A     	 ldrh r3,[r7,#16]
 3763 014c 01E0     	 b .L281
 3764              	.L280:
 3765              	 .loc 13 880 0 discriminator 2
 3766 014e 3B8A     	 ldrh r3,[r7,#16]
 3767 0150 5B42     	 negs r3,r3
 3768              	.L281:
 3769              	.LBE14:
 3770              	 .loc 13 880 0 discriminator 4
 3771 0152 0F2B     	 cmp r3,#15
 3772 0154 0DDC     	 bgt .L279
 3773              	.LBB15:
 881:../cleanflight/src/main/fc/fc_core.c ****                 || (ABS(gyroAbsRateDps(FD_YAW)) > RUNAWAY_TAKEOFF_GYRO_LIMIT_YAW))) {
 3774              	 .loc 13 881 0 is_stmt 1
 3775 0156 0220     	 movs r0,#2
 3776 0158 FFF7FEFF 	 bl gyroAbsRateDps
 3777 015c 0346     	 mov r3,r0
 3778 015e FB81     	 strh r3,[r7,#14]
 3779 0160 FB89     	 ldrh r3,[r7,#14]
 3780 0162 002B     	 cmp r3,#0
 3781 0164 01D0     	 beq .L282
 3782              	 .loc 13 881 0 is_stmt 0 discriminator 1
 3783 0166 FB89     	 ldrh r3,[r7,#14]
 3784 0168 01E0     	 b .L283
 3785              	.L282:
 3786              	 .loc 13 881 0 discriminator 2
 3787 016a FB89     	 ldrh r3,[r7,#14]
 3788 016c 5B42     	 negs r3,r3
 3789              	.L283:
 3790              	.LBE15:
 3791              	 .loc 13 881 0 discriminator 4
 3792 016e 322B     	 cmp r3,#50
 3793 0170 16DD     	 ble .L275
 3794              	.L279:
 882:../cleanflight/src/main/fc/fc_core.c **** 
 883:../cleanflight/src/main/fc/fc_core.c ****             if (runawayTakeoffTriggerUs == 0) {
 3795              	 .loc 13 883 0 is_stmt 1
 3796 0172 2C4B     	 ldr r3,.L291+40
 3797 0174 1B68     	 ldr r3,[r3]
 3798 0176 002B     	 cmp r3,#0
 3799 0178 06D1     	 bne .L284
 884:../cleanflight/src/main/fc/fc_core.c ****                 runawayTakeoffTriggerUs = currentTimeUs + RUNAWAY_TAKEOFF_ACTIVATE_DELAY;
 3800              	 .loc 13 884 0
 3801 017a 7B68     	 ldr r3,[r7,#4]
 3802 017c 03F59233 	 add r3,r3,#74752
 3803 0180 F833     	 adds r3,r3,#248
 3804 0182 284A     	 ldr r2,.L291+40
 3805 0184 1360     	 str r3,[r2]
 3806 0186 0AE0     	 b .L285
 3807              	.L284:
 885:../cleanflight/src/main/fc/fc_core.c ****             } else if (currentTimeUs > runawayTakeoffTriggerUs) {
 3808              	 .loc 13 885 0
 3809 0188 264B     	 ldr r3,.L291+40
 3810 018a 1B68     	 ldr r3,[r3]
 3811 018c 7A68     	 ldr r2,[r7,#4]
 3812 018e 9A42     	 cmp r2,r3
 3813 0190 05D9     	 bls .L285
 886:../cleanflight/src/main/fc/fc_core.c ****                 setArmingDisabled(ARMING_DISABLED_RUNAWAY_TAKEOFF);
 3814              	 .loc 13 886 0
 3815 0192 2020     	 movs r0,#32
 3816 0194 FFF7FEFF 	 bl setArmingDisabled
 887:../cleanflight/src/main/fc/fc_core.c ****                 disarm();
 3817              	 .loc 13 887 0
 3818 0198 FFF7FEFF 	 bl disarm
 883:../cleanflight/src/main/fc/fc_core.c ****                 runawayTakeoffTriggerUs = currentTimeUs + RUNAWAY_TAKEOFF_ACTIVATE_DELAY;
 3819              	 .loc 13 883 0
 3820 019c 03E0     	 b .L286
 3821              	.L285:
 3822 019e 02E0     	 b .L286
 3823              	.L275:
 888:../cleanflight/src/main/fc/fc_core.c ****             }
 889:../cleanflight/src/main/fc/fc_core.c ****         } else {
 890:../cleanflight/src/main/fc/fc_core.c ****             runawayTakeoffTriggerUs = 0;
 3824              	 .loc 13 890 0
 3825 01a0 204B     	 ldr r3,.L291+40
 3826 01a2 0022     	 movs r2,#0
 3827 01a4 1A60     	 str r2,[r3]
 3828              	.L286:
 891:../cleanflight/src/main/fc/fc_core.c ****         }
 892:../cleanflight/src/main/fc/fc_core.c ****         DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_ENABLED_STATE, DEBUG_RUNAWAY_TAKEOFF
 3829              	 .loc 13 892 0
 3830 01a6 154B     	 ldr r3,.L291
 3831 01a8 1B78     	 ldrb r3,[r3]
 3832 01aa 202B     	 cmp r3,#32
 3833 01ac 02D1     	 bne .L287
 3834              	 .loc 13 892 0 is_stmt 0 discriminator 1
 3835 01ae 154B     	 ldr r3,.L291+8
 3836 01b0 0122     	 movs r2,#1
 3837 01b2 1A80     	 strh r2,[r3]
 3838              	.L287:
 893:../cleanflight/src/main/fc/fc_core.c ****         DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_ACTIVATING_DELAY, runawayTakeoffTrig
 3839              	 .loc 13 893 0 is_stmt 1
 3840 01b4 114B     	 ldr r3,.L291
 3841 01b6 1B78     	 ldrb r3,[r3]
 3842 01b8 202B     	 cmp r3,#32
 3843 01ba 0AD1     	 bne .L288
 3844              	 .loc 13 893 0 is_stmt 0 discriminator 1
 3845 01bc 194B     	 ldr r3,.L291+40
 3846 01be 1B68     	 ldr r3,[r3]
 3847 01c0 002B     	 cmp r3,#0
 3848 01c2 14BF     	 ite ne
 3849 01c4 0123     	 movne r3,#1
 3850 01c6 0023     	 moveq r3,#0
 3851 01c8 DBB2     	 uxtb r3,r3
 3852 01ca 9AB2     	 uxth r2,r3
 3853 01cc 0D4B     	 ldr r3,.L291+8
 3854 01ce 5A80     	 strh r2,[r3,#2]
 3855 01d0 11E0     	 b .L269
 3856              	.L288:
 3857              	 .loc 13 893 0
 3858 01d2 10E0     	 b .L269
 3859              	.L272:
 894:../cleanflight/src/main/fc/fc_core.c ****     } else {
 895:../cleanflight/src/main/fc/fc_core.c ****         runawayTakeoffTriggerUs = 0;
 3860              	 .loc 13 895 0 is_stmt 1
 3861 01d4 134B     	 ldr r3,.L291+40
 3862 01d6 0022     	 movs r2,#0
 3863 01d8 1A60     	 str r2,[r3]
 896:../cleanflight/src/main/fc/fc_core.c ****         DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_ENABLED_STATE, DEBUG_RUNAWAY_TAKEOFF
 3864              	 .loc 13 896 0
 3865 01da 084B     	 ldr r3,.L291
 3866 01dc 1B78     	 ldrb r3,[r3]
 3867 01de 202B     	 cmp r3,#32
 3868 01e0 02D1     	 bne .L290
 3869              	 .loc 13 896 0 is_stmt 0 discriminator 1
 3870 01e2 084B     	 ldr r3,.L291+8
 3871 01e4 0022     	 movs r2,#0
 3872 01e6 1A80     	 strh r2,[r3]
 3873              	.L290:
 897:../cleanflight/src/main/fc/fc_core.c ****         DEBUG_SET(DEBUG_RUNAWAY_TAKEOFF, DEBUG_RUNAWAY_TAKEOFF_ACTIVATING_DELAY, DEBUG_RUNAWAY_TAKE
 3874              	 .loc 13 897 0 is_stmt 1
 3875 01e8 044B     	 ldr r3,.L291
 3876 01ea 1B78     	 ldrb r3,[r3]
 3877 01ec 202B     	 cmp r3,#32
 3878 01ee 02D1     	 bne .L269
 3879              	 .loc 13 897 0 is_stmt 0 discriminator 1
 3880 01f0 044B     	 ldr r3,.L291+8
 3881 01f2 0022     	 movs r2,#0
 3882 01f4 5A80     	 strh r2,[r3,#2]
 3883              	.L269:
 898:../cleanflight/src/main/fc/fc_core.c ****     }
 899:../cleanflight/src/main/fc/fc_core.c **** #endif
 900:../cleanflight/src/main/fc/fc_core.c **** 
 901:../cleanflight/src/main/fc/fc_core.c **** 
 902:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_PID_AUDIO
 903:../cleanflight/src/main/fc/fc_core.c ****     if (isModeActivationConditionPresent(BOXPIDAUDIO)) {
 904:../cleanflight/src/main/fc/fc_core.c ****         pidAudioUpdate();
 905:../cleanflight/src/main/fc/fc_core.c ****     }
 906:../cleanflight/src/main/fc/fc_core.c **** #endif
 907:../cleanflight/src/main/fc/fc_core.c **** }
 3884              	 .loc 13 907 0 is_stmt 1
 3885 01f6 1C37     	 adds r7,r7,#28
 3886              	.LCFI128:
 3887              	 .cfi_def_cfa_offset 12
 3888 01f8 BD46     	 mov sp,r7
 3889              	.LCFI129:
 3890              	 .cfi_def_cfa_register 13
 3891              	 
 3892 01fa 90BD     	 pop {r4,r7,pc}
 3893              	.L292:
 3894              	 .align 2
 3895              	.L291:
 3896 01fc 00000000 	 .word debugMode
 3897 0200 00000000 	 .word currentPidProfile
 3898 0204 00000000 	 .word debug
 3899 0208 00000000 	 .word armingFlags
 3900 020c 00000000 	 .word stateFlags
 3901 0210 00000000 	 .word runawayTakeoffCheckDisabled
 3902 0214 00000000 	 .word flipOverAfterCrashMode
 3903 0218 00000000 	 .word runawayTakeoffTemporarilyDisabled
 3904 021c 00000000 	 .word pidData
 3905 0220 00001644 	 .word 1142292480
 3906 0224 00000000 	 .word runawayTakeoffTriggerUs
 3907              	 .cfi_endproc
 3908              	.LFE638:
 3910              	 .section .text.subTaskPidSubprocesses,"ax",%progbits
 3911              	 .align 2
 3912              	 .thumb
 3913              	 .thumb_func
 3915              	subTaskPidSubprocesses:
 3916              	.LFB639:
 908:../cleanflight/src/main/fc/fc_core.c **** 
 909:../cleanflight/src/main/fc/fc_core.c **** static FAST_CODE_NOINLINE void subTaskPidSubprocesses(timeUs_t currentTimeUs)
 910:../cleanflight/src/main/fc/fc_core.c **** {
 3917              	 .loc 13 910 0
 3918              	 .cfi_startproc
 3919              	 
 3920              	 
 3921 0000 80B5     	 push {r7,lr}
 3922              	.LCFI130:
 3923              	 .cfi_def_cfa_offset 8
 3924              	 .cfi_offset 7,-8
 3925              	 .cfi_offset 14,-4
 3926 0002 84B0     	 sub sp,sp,#16
 3927              	.LCFI131:
 3928              	 .cfi_def_cfa_offset 24
 3929 0004 00AF     	 add r7,sp,#0
 3930              	.LCFI132:
 3931              	 .cfi_def_cfa_register 7
 3932 0006 7860     	 str r0,[r7,#4]
 911:../cleanflight/src/main/fc/fc_core.c ****     uint32_t startTime = 0;
 3933              	 .loc 13 911 0
 3934 0008 0023     	 movs r3,#0
 3935 000a FB60     	 str r3,[r7,#12]
 912:../cleanflight/src/main/fc/fc_core.c ****     if (debugMode == DEBUG_PIDLOOP) {
 3936              	 .loc 13 912 0
 3937 000c 164B     	 ldr r3,.L298
 3938 000e 1B78     	 ldrb r3,[r3]
 3939 0010 052B     	 cmp r3,#5
 3940 0012 02D1     	 bne .L294
 913:../cleanflight/src/main/fc/fc_core.c ****         startTime = micros();
 3941              	 .loc 13 913 0
 3942 0014 FFF7FEFF 	 bl micros
 3943 0018 F860     	 str r0,[r7,#12]
 3944              	.L294:
 914:../cleanflight/src/main/fc/fc_core.c ****     }
 915:../cleanflight/src/main/fc/fc_core.c **** 
 916:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_MAG
 917:../cleanflight/src/main/fc/fc_core.c ****     if (sensors(SENSOR_MAG)) {
 3945              	 .loc 13 917 0
 3946 001a 0820     	 movs r0,#8
 3947 001c FFF7FEFF 	 bl sensors
 3948 0020 0346     	 mov r3,r0
 3949 0022 002B     	 cmp r3,#0
 3950 0024 01D0     	 beq .L295
 918:../cleanflight/src/main/fc/fc_core.c ****         updateMagHold();
 3951              	 .loc 13 918 0
 3952 0026 FFF7FEFF 	 bl updateMagHold
 3953              	.L295:
 919:../cleanflight/src/main/fc/fc_core.c ****     }
 920:../cleanflight/src/main/fc/fc_core.c **** #endif
 921:../cleanflight/src/main/fc/fc_core.c **** 
 922:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_BLACKBOX
 923:../cleanflight/src/main/fc/fc_core.c ****     if (!cliMode && blackboxConfig()->device) {
 3954              	 .loc 13 923 0
 3955 002a 104B     	 ldr r3,.L298+4
 3956 002c 1B78     	 ldrb r3,[r3]
 3957 002e 002B     	 cmp r3,#0
 3958 0030 08D1     	 bne .L296
 3959              	 .loc 13 923 0 is_stmt 0 discriminator 1
 3960 0032 FFF7FEFF 	 bl blackboxConfig
 3961 0036 0346     	 mov r3,r0
 3962 0038 9B78     	 ldrb r3,[r3,#2]
 3963 003a 002B     	 cmp r3,#0
 3964 003c 02D0     	 beq .L296
 924:../cleanflight/src/main/fc/fc_core.c ****         blackboxUpdate(currentTimeUs);
 3965              	 .loc 13 924 0 is_stmt 1
 3966 003e 7868     	 ldr r0,[r7,#4]
 3967 0040 FFF7FEFF 	 bl blackboxUpdate
 3968              	.L296:
 925:../cleanflight/src/main/fc/fc_core.c ****     }
 926:../cleanflight/src/main/fc/fc_core.c **** #else
 927:../cleanflight/src/main/fc/fc_core.c ****     UNUSED(currentTimeUs);
 928:../cleanflight/src/main/fc/fc_core.c **** #endif
 929:../cleanflight/src/main/fc/fc_core.c **** 
 930:../cleanflight/src/main/fc/fc_core.c ****     DEBUG_SET(DEBUG_PIDLOOP, 3, micros() - startTime);
 3969              	 .loc 13 930 0
 3970 0044 084B     	 ldr r3,.L298
 3971 0046 1B78     	 ldrb r3,[r3]
 3972 0048 052B     	 cmp r3,#5
 3973 004a 0AD1     	 bne .L293
 3974              	 .loc 13 930 0 is_stmt 0 discriminator 1
 3975 004c FFF7FEFF 	 bl micros
 3976 0050 0346     	 mov r3,r0
 3977 0052 9AB2     	 uxth r2,r3
 3978 0054 FB68     	 ldr r3,[r7,#12]
 3979 0056 9BB2     	 uxth r3,r3
 3980 0058 D31A     	 subs r3,r2,r3
 3981 005a 9BB2     	 uxth r3,r3
 3982 005c 9AB2     	 uxth r2,r3
 3983 005e 044B     	 ldr r3,.L298+8
 3984 0060 DA80     	 strh r2,[r3,#6]
 3985              	.L293:
 931:../cleanflight/src/main/fc/fc_core.c **** }
 3986              	 .loc 13 931 0 is_stmt 1
 3987 0062 1037     	 adds r7,r7,#16
 3988              	.LCFI133:
 3989              	 .cfi_def_cfa_offset 8
 3990 0064 BD46     	 mov sp,r7
 3991              	.LCFI134:
 3992              	 .cfi_def_cfa_register 13
 3993              	 
 3994 0066 80BD     	 pop {r7,pc}
 3995              	.L299:
 3996              	 .align 2
 3997              	.L298:
 3998 0068 00000000 	 .word debugMode
 3999 006c 00000000 	 .word cliMode
 4000 0070 00000000 	 .word debug
 4001              	 .cfi_endproc
 4002              	.LFE639:
 4004              	 .section .text.subTaskMotorUpdate,"ax",%progbits
 4005              	 .align 2
 4006              	 .thumb
 4007              	 .thumb_func
 4009              	subTaskMotorUpdate:
 4010              	.LFB640:
 932:../cleanflight/src/main/fc/fc_core.c **** 
 933:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_TELEMETRY
 934:../cleanflight/src/main/fc/fc_core.c **** void subTaskTelemetryPollSensors(timeUs_t currentTimeUs)
 935:../cleanflight/src/main/fc/fc_core.c **** {
 936:../cleanflight/src/main/fc/fc_core.c ****     UNUSED(currentTimeUs);
 937:../cleanflight/src/main/fc/fc_core.c **** 
 938:../cleanflight/src/main/fc/fc_core.c ****     // Read out gyro temperature if used for telemmetry
 939:../cleanflight/src/main/fc/fc_core.c ****     gyroReadTemperature();
 940:../cleanflight/src/main/fc/fc_core.c **** }
 941:../cleanflight/src/main/fc/fc_core.c **** #endif
 942:../cleanflight/src/main/fc/fc_core.c **** 
 943:../cleanflight/src/main/fc/fc_core.c **** static FAST_CODE void subTaskMotorUpdate(timeUs_t currentTimeUs)
 944:../cleanflight/src/main/fc/fc_core.c **** {
 4011              	 .loc 13 944 0
 4012              	 .cfi_startproc
 4013              	 
 4014              	 
 4015 0000 80B5     	 push {r7,lr}
 4016              	.LCFI135:
 4017              	 .cfi_def_cfa_offset 8
 4018              	 .cfi_offset 7,-8
 4019              	 .cfi_offset 14,-4
 4020 0002 84B0     	 sub sp,sp,#16
 4021              	.LCFI136:
 4022              	 .cfi_def_cfa_offset 24
 4023 0004 00AF     	 add r7,sp,#0
 4024              	.LCFI137:
 4025              	 .cfi_def_cfa_register 7
 4026 0006 7860     	 str r0,[r7,#4]
 945:../cleanflight/src/main/fc/fc_core.c ****     uint32_t startTime = 0;
 4027              	 .loc 13 945 0
 4028 0008 0023     	 movs r3,#0
 4029 000a FB60     	 str r3,[r7,#12]
 946:../cleanflight/src/main/fc/fc_core.c ****     if (debugMode == DEBUG_CYCLETIME) {
 4030              	 .loc 13 946 0
 4031 000c 234B     	 ldr r3,.L305
 4032 000e 1B78     	 ldrb r3,[r3]
 4033 0010 012B     	 cmp r3,#1
 4034 0012 19D1     	 bne .L301
 4035              	.LBB16:
 947:../cleanflight/src/main/fc/fc_core.c ****         startTime = micros();
 4036              	 .loc 13 947 0
 4037 0014 FFF7FEFF 	 bl micros
 4038 0018 F860     	 str r0,[r7,#12]
 948:../cleanflight/src/main/fc/fc_core.c ****         static uint32_t previousMotorUpdateTime;
 949:../cleanflight/src/main/fc/fc_core.c ****         const uint32_t currentDeltaTime = startTime - previousMotorUpdateTime;
 4039              	 .loc 13 949 0
 4040 001a 214B     	 ldr r3,.L305+4
 4041 001c 1B68     	 ldr r3,[r3]
 4042 001e FA68     	 ldr r2,[r7,#12]
 4043 0020 D31A     	 subs r3,r2,r3
 4044 0022 BB60     	 str r3,[r7,#8]
 950:../cleanflight/src/main/fc/fc_core.c ****         debug[2] = currentDeltaTime;
 4045              	 .loc 13 950 0
 4046 0024 BB68     	 ldr r3,[r7,#8]
 4047 0026 9AB2     	 uxth r2,r3
 4048 0028 1E4B     	 ldr r3,.L305+8
 4049 002a 9A80     	 strh r2,[r3,#4]
 951:../cleanflight/src/main/fc/fc_core.c ****         debug[3] = currentDeltaTime - targetPidLooptime;
 4050              	 .loc 13 951 0
 4051 002c BB68     	 ldr r3,[r7,#8]
 4052 002e 9AB2     	 uxth r2,r3
 4053 0030 1D4B     	 ldr r3,.L305+12
 4054 0032 1B68     	 ldr r3,[r3]
 4055 0034 9BB2     	 uxth r3,r3
 4056 0036 D31A     	 subs r3,r2,r3
 4057 0038 9BB2     	 uxth r3,r3
 4058 003a 9AB2     	 uxth r2,r3
 4059 003c 194B     	 ldr r3,.L305+8
 4060 003e DA80     	 strh r2,[r3,#6]
 952:../cleanflight/src/main/fc/fc_core.c ****         previousMotorUpdateTime = startTime;
 4061              	 .loc 13 952 0
 4062 0040 174A     	 ldr r2,.L305+4
 4063 0042 FB68     	 ldr r3,[r7,#12]
 4064 0044 1360     	 str r3,[r2]
 4065              	.LBE16:
 4066 0046 06E0     	 b .L302
 4067              	.L301:
 953:../cleanflight/src/main/fc/fc_core.c ****     } else if (debugMode == DEBUG_PIDLOOP) {
 4068              	 .loc 13 953 0
 4069 0048 144B     	 ldr r3,.L305
 4070 004a 1B78     	 ldrb r3,[r3]
 4071 004c 052B     	 cmp r3,#5
 4072 004e 02D1     	 bne .L302
 954:../cleanflight/src/main/fc/fc_core.c ****         startTime = micros();
 4073              	 .loc 13 954 0
 4074 0050 FFF7FEFF 	 bl micros
 4075 0054 F860     	 str r0,[r7,#12]
 4076              	.L302:
 955:../cleanflight/src/main/fc/fc_core.c ****     }
 956:../cleanflight/src/main/fc/fc_core.c **** 
 957:../cleanflight/src/main/fc/fc_core.c ****     mixTable(currentTimeUs, currentPidProfile->vbatPidCompensation);
 4077              	 .loc 13 957 0
 4078 0056 154B     	 ldr r3,.L305+16
 4079 0058 1B68     	 ldr r3,[r3]
 4080 005a 93F84030 	 ldrb r3,[r3,#64]
 4081 005e 7868     	 ldr r0,[r7,#4]
 4082 0060 1946     	 mov r1,r3
 4083 0062 FFF7FEFF 	 bl mixTable
 958:../cleanflight/src/main/fc/fc_core.c **** 
 959:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_SERVOS
 960:../cleanflight/src/main/fc/fc_core.c ****     // motor outputs are used as sources for servo mixing, so motors must be calculated using mixTa
 961:../cleanflight/src/main/fc/fc_core.c ****     if (isMixerUsingServos()) {
 4084              	 .loc 13 961 0
 4085 0066 FFF7FEFF 	 bl isMixerUsingServos
 4086 006a 0346     	 mov r3,r0
 4087 006c 002B     	 cmp r3,#0
 4088 006e 01D0     	 beq .L303
 962:../cleanflight/src/main/fc/fc_core.c ****         writeServos();
 4089              	 .loc 13 962 0
 4090 0070 FFF7FEFF 	 bl writeServos
 4091              	.L303:
 963:../cleanflight/src/main/fc/fc_core.c ****     }
 964:../cleanflight/src/main/fc/fc_core.c **** #endif
 965:../cleanflight/src/main/fc/fc_core.c **** 
 966:../cleanflight/src/main/fc/fc_core.c ****     writeMotors();
 4092              	 .loc 13 966 0
 4093 0074 FFF7FEFF 	 bl writeMotors
 967:../cleanflight/src/main/fc/fc_core.c **** 
 968:../cleanflight/src/main/fc/fc_core.c ****     DEBUG_SET(DEBUG_PIDLOOP, 2, micros() - startTime);
 4094              	 .loc 13 968 0
 4095 0078 084B     	 ldr r3,.L305
 4096 007a 1B78     	 ldrb r3,[r3]
 4097 007c 052B     	 cmp r3,#5
 4098 007e 0AD1     	 bne .L300
 4099              	 .loc 13 968 0 is_stmt 0 discriminator 1
 4100 0080 FFF7FEFF 	 bl micros
 4101 0084 0346     	 mov r3,r0
 4102 0086 9AB2     	 uxth r2,r3
 4103 0088 FB68     	 ldr r3,[r7,#12]
 4104 008a 9BB2     	 uxth r3,r3
 4105 008c D31A     	 subs r3,r2,r3
 4106 008e 9BB2     	 uxth r3,r3
 4107 0090 9AB2     	 uxth r2,r3
 4108 0092 044B     	 ldr r3,.L305+8
 4109 0094 9A80     	 strh r2,[r3,#4]
 4110              	.L300:
 969:../cleanflight/src/main/fc/fc_core.c **** }
 4111              	 .loc 13 969 0 is_stmt 1
 4112 0096 1037     	 adds r7,r7,#16
 4113              	.LCFI138:
 4114              	 .cfi_def_cfa_offset 8
 4115 0098 BD46     	 mov sp,r7
 4116              	.LCFI139:
 4117              	 .cfi_def_cfa_register 13
 4118              	 
 4119 009a 80BD     	 pop {r7,pc}
 4120              	.L306:
 4121              	 .align 2
 4122              	.L305:
 4123 009c 00000000 	 .word debugMode
 4124 00a0 00000000 	 .word previousMotorUpdateTime.16243
 4125 00a4 00000000 	 .word debug
 4126 00a8 00000000 	 .word targetPidLooptime
 4127 00ac 00000000 	 .word currentPidProfile
 4128              	 .cfi_endproc
 4129              	.LFE640:
 4131              	 .section .text.subTaskRcCommand,"ax",%progbits
 4132              	 .align 2
 4133              	 .thumb
 4134              	 .thumb_func
 4136              	subTaskRcCommand:
 4137              	.LFB641:
 970:../cleanflight/src/main/fc/fc_core.c **** 
 971:../cleanflight/src/main/fc/fc_core.c **** static FAST_CODE_NOINLINE void subTaskRcCommand(timeUs_t currentTimeUs)
 972:../cleanflight/src/main/fc/fc_core.c **** {
 4138              	 .loc 13 972 0
 4139              	 .cfi_startproc
 4140              	 
 4141              	 
 4142 0000 90B5     	 push {r4,r7,lr}
 4143              	.LCFI140:
 4144              	 .cfi_def_cfa_offset 12
 4145              	 .cfi_offset 4,-12
 4146              	 .cfi_offset 7,-8
 4147              	 .cfi_offset 14,-4
 4148 0002 83B0     	 sub sp,sp,#12
 4149              	.LCFI141:
 4150              	 .cfi_def_cfa_offset 24
 4151 0004 00AF     	 add r7,sp,#0
 4152              	.LCFI142:
 4153              	 .cfi_def_cfa_register 7
 4154 0006 7860     	 str r0,[r7,#4]
 973:../cleanflight/src/main/fc/fc_core.c ****     UNUSED(currentTimeUs);
 974:../cleanflight/src/main/fc/fc_core.c **** 
 975:../cleanflight/src/main/fc/fc_core.c ****     // If we're armed, at minimum throttle, and we do arming via the
 976:../cleanflight/src/main/fc/fc_core.c ****     // sticks, do not process yaw input from the rx.  We do this so the
 977:../cleanflight/src/main/fc/fc_core.c ****     // motors do not spin up while we are trying to arm or disarm.
 978:../cleanflight/src/main/fc/fc_core.c ****     // Allow yaw control for tricopters if the user wants the servo to move even when unarmed.
 979:../cleanflight/src/main/fc/fc_core.c ****     if (isUsingSticksForArming() && rcData[THROTTLE] <= rxConfig()->mincheck
 4155              	 .loc 13 979 0
 4156 0008 FFF7FEFF 	 bl isUsingSticksForArming
 4157 000c 0346     	 mov r3,r0
 4158 000e 002B     	 cmp r3,#0
 4159 0010 29D0     	 beq .L308
 4160              	 .loc 13 979 0 is_stmt 0 discriminator 1
 4161 0012 174B     	 ldr r3,.L311
 4162 0014 DB88     	 ldrh r3,[r3,#6]
 4163 0016 1CB2     	 sxth r4,r3
 4164 0018 FFF7FEFF 	 bl rxConfig
 4165 001c 0346     	 mov r3,r0
 4166 001e 9B8A     	 ldrh r3,[r3,#20]
 4167 0020 9BB2     	 uxth r3,r3
 4168 0022 9C42     	 cmp r4,r3
 4169 0024 1FDC     	 bgt .L308
 980:../cleanflight/src/main/fc/fc_core.c **** #ifndef USE_QUAD_MIXER_ONLY
 981:../cleanflight/src/main/fc/fc_core.c **** #ifdef USE_SERVOS
 982:../cleanflight/src/main/fc/fc_core.c ****                 && !((mixerConfig()->mixerMode == MIXER_TRI || mixerConfig()->mixerMode == MIXER_CU
 4170              	 .loc 13 982 0 is_stmt 1
 4171 0026 FFF7FEFF 	 bl mixerConfig
 4172 002a 0346     	 mov r3,r0
 4173 002c 1B78     	 ldrb r3,[r3]
 4174 002e 012B     	 cmp r3,#1
 4175 0030 05D0     	 beq .L309
 4176              	 .loc 13 982 0 is_stmt 0 discriminator 1
 4177 0032 FFF7FEFF 	 bl mixerConfig
 4178 0036 0346     	 mov r3,r0
 4179 0038 1B78     	 ldrb r3,[r3]
 4180 003a 192B     	 cmp r3,#25
 4181 003c 05D1     	 bne .L310
 4182              	.L309:
 4183              	 .loc 13 982 0 discriminator 3
 4184 003e FFF7FEFF 	 bl servoConfig
 4185 0042 0346     	 mov r3,r0
 4186 0044 9B7B     	 ldrb r3,[r3,#14]
 4187 0046 002B     	 cmp r3,#0
 4188 0048 0DD1     	 bne .L308
 4189              	.L310:
 983:../cleanflight/src/main/fc/fc_core.c **** #endif
 984:../cleanflight/src/main/fc/fc_core.c ****                 && mixerConfig()->mixerMode != MIXER_AIRPLANE
 4190              	 .loc 13 984 0 is_stmt 1
 4191 004a FFF7FEFF 	 bl mixerConfig
 4192 004e 0346     	 mov r3,r0
 4193 0050 1B78     	 ldrb r3,[r3]
 4194 0052 0E2B     	 cmp r3,#14
 4195 0054 07D0     	 beq .L308
 985:../cleanflight/src/main/fc/fc_core.c ****                 && mixerConfig()->mixerMode != MIXER_FLYING_WING
 4196              	 .loc 13 985 0
 4197 0056 FFF7FEFF 	 bl mixerConfig
 4198 005a 0346     	 mov r3,r0
 4199 005c 1B78     	 ldrb r3,[r3]
 4200 005e 082B     	 cmp r3,#8
 4201 0060 01D0     	 beq .L308
 986:../cleanflight/src/main/fc/fc_core.c **** #endif
 987:../cleanflight/src/main/fc/fc_core.c ****     ) {
 988:../cleanflight/src/main/fc/fc_core.c ****         resetYawAxis();
 4202              	 .loc 13 988 0
 4203 0062 FFF7FEFF 	 bl resetYawAxis
 4204              	.L308:
 989:../cleanflight/src/main/fc/fc_core.c ****     }
 990:../cleanflight/src/main/fc/fc_core.c **** 
 991:../cleanflight/src/main/fc/fc_core.c ****     processRcCommand();
 4205              	 .loc 13 991 0
 4206 0066 FFF7FEFF 	 bl processRcCommand
 992:../cleanflight/src/main/fc/fc_core.c **** 
 993:../cleanflight/src/main/fc/fc_core.c **** }
 4207              	 .loc 13 993 0
 4208 006a 0C37     	 adds r7,r7,#12
 4209              	.LCFI143:
 4210              	 .cfi_def_cfa_offset 12
 4211 006c BD46     	 mov sp,r7
 4212              	.LCFI144:
 4213              	 .cfi_def_cfa_register 13
 4214              	 
 4215 006e 90BD     	 pop {r4,r7,pc}
 4216              	.L312:
 4217              	 .align 2
 4218              	.L311:
 4219 0070 00000000 	 .word rcData
 4220              	 .cfi_endproc
 4221              	.LFE641:
 4223              	 .section .text.taskMainPidLoop,"ax",%progbits
 4224              	 .align 2
 4225              	 .global taskMainPidLoop
 4226              	 .thumb
 4227              	 .thumb_func
 4229              	taskMainPidLoop:
 4230              	.LFB642:
 994:../cleanflight/src/main/fc/fc_core.c **** 
 995:../cleanflight/src/main/fc/fc_core.c **** // Function for loop trigger
 996:../cleanflight/src/main/fc/fc_core.c **** FAST_CODE void taskMainPidLoop(timeUs_t currentTimeUs)
 997:../cleanflight/src/main/fc/fc_core.c **** {
 4231              	 .loc 13 997 0
 4232              	 .cfi_startproc
 4233              	 
 4234              	 
 4235 0000 90B5     	 push {r4,r7,lr}
 4236              	.LCFI145:
 4237              	 .cfi_def_cfa_offset 12
 4238              	 .cfi_offset 4,-12
 4239              	 .cfi_offset 7,-8
 4240              	 .cfi_offset 14,-4
 4241 0002 83B0     	 sub sp,sp,#12
 4242              	.LCFI146:
 4243              	 .cfi_def_cfa_offset 24
 4244 0004 00AF     	 add r7,sp,#0
 4245              	.LCFI147:
 4246              	 .cfi_def_cfa_register 7
 4247 0006 7860     	 str r0,[r7,#4]
 998:../cleanflight/src/main/fc/fc_core.c ****     static uint32_t pidUpdateCounter = 0;
 999:../cleanflight/src/main/fc/fc_core.c **** 
1000:../cleanflight/src/main/fc/fc_core.c **** #if defined(SIMULATOR_BUILD) && defined(SIMULATOR_GYROPID_SYNC)
1001:../cleanflight/src/main/fc/fc_core.c ****     if (lockMainPID() != 0) return;
1002:../cleanflight/src/main/fc/fc_core.c **** #endif
1003:../cleanflight/src/main/fc/fc_core.c **** 
1004:../cleanflight/src/main/fc/fc_core.c ****     // DEBUG_PIDLOOP, timings for:
1005:../cleanflight/src/main/fc/fc_core.c ****     // 0 - gyroUpdate()
1006:../cleanflight/src/main/fc/fc_core.c ****     // 1 - subTaskPidController()
1007:../cleanflight/src/main/fc/fc_core.c ****     // 2 - subTaskMotorUpdate()
1008:../cleanflight/src/main/fc/fc_core.c ****     // 3 - subTaskPidSubprocesses()
1009:../cleanflight/src/main/fc/fc_core.c ****     gyroUpdate(currentTimeUs);
 4248              	 .loc 13 1009 0
 4249 0008 7868     	 ldr r0,[r7,#4]
 4250 000a FFF7FEFF 	 bl gyroUpdate
1010:../cleanflight/src/main/fc/fc_core.c ****     DEBUG_SET(DEBUG_PIDLOOP, 0, micros() - currentTimeUs);
 4251              	 .loc 13 1010 0
 4252 000e 1F4B     	 ldr r3,.L317
 4253 0010 1B78     	 ldrb r3,[r3]
 4254 0012 052B     	 cmp r3,#5
 4255 0014 0AD1     	 bne .L314
 4256              	 .loc 13 1010 0 is_stmt 0 discriminator 1
 4257 0016 FFF7FEFF 	 bl micros
 4258 001a 0346     	 mov r3,r0
 4259 001c 9AB2     	 uxth r2,r3
 4260 001e 7B68     	 ldr r3,[r7,#4]
 4261 0020 9BB2     	 uxth r3,r3
 4262 0022 D31A     	 subs r3,r2,r3
 4263 0024 9BB2     	 uxth r3,r3
 4264 0026 9AB2     	 uxth r2,r3
 4265 0028 194B     	 ldr r3,.L317+4
 4266 002a 1A80     	 strh r2,[r3]
 4267              	.L314:
1011:../cleanflight/src/main/fc/fc_core.c **** 
1012:../cleanflight/src/main/fc/fc_core.c ****     if (pidUpdateCounter++ % pidConfig()->pid_process_denom == 0) {
 4268              	 .loc 13 1012 0 is_stmt 1
 4269 002c 194B     	 ldr r3,.L317+8
 4270 002e 1C68     	 ldr r4,[r3]
 4271 0030 631C     	 adds r3,r4,#1
 4272 0032 184A     	 ldr r2,.L317+8
 4273 0034 1360     	 str r3,[r2]
 4274 0036 FFF7FEFF 	 bl pidConfig
 4275 003a 0346     	 mov r3,r0
 4276 003c 1B78     	 ldrb r3,[r3]
 4277 003e B4FBF3F2 	 udiv r2,r4,r3
 4278 0042 03FB02F3 	 mul r3,r3,r2
 4279 0046 E31A     	 subs r3,r4,r3
 4280 0048 002B     	 cmp r3,#0
 4281 004a 0BD1     	 bne .L315
1013:../cleanflight/src/main/fc/fc_core.c ****         subTaskRcCommand(currentTimeUs);
 4282              	 .loc 13 1013 0
 4283 004c 7868     	 ldr r0,[r7,#4]
 4284 004e FFF7FEFF 	 bl subTaskRcCommand
1014:../cleanflight/src/main/fc/fc_core.c ****         subTaskPidController(currentTimeUs);
 4285              	 .loc 13 1014 0
 4286 0052 7868     	 ldr r0,[r7,#4]
 4287 0054 FFF7FEFF 	 bl subTaskPidController
1015:../cleanflight/src/main/fc/fc_core.c ****         subTaskMotorUpdate(currentTimeUs);
 4288              	 .loc 13 1015 0
 4289 0058 7868     	 ldr r0,[r7,#4]
 4290 005a FFF7FEFF 	 bl subTaskMotorUpdate
1016:../cleanflight/src/main/fc/fc_core.c ****         subTaskPidSubprocesses(currentTimeUs);
 4291              	 .loc 13 1016 0
 4292 005e 7868     	 ldr r0,[r7,#4]
 4293 0060 FFF7FEFF 	 bl subTaskPidSubprocesses
 4294              	.L315:
1017:../cleanflight/src/main/fc/fc_core.c ****     }
1018:../cleanflight/src/main/fc/fc_core.c **** 
1019:../cleanflight/src/main/fc/fc_core.c ****     if (debugMode == DEBUG_CYCLETIME) {
 4295              	 .loc 13 1019 0
 4296 0064 094B     	 ldr r3,.L317
 4297 0066 1B78     	 ldrb r3,[r3]
 4298 0068 012B     	 cmp r3,#1
 4299 006a 0BD1     	 bne .L313
1020:../cleanflight/src/main/fc/fc_core.c ****         debug[0] = getTaskDeltaTime(TASK_SELF);
 4300              	 .loc 13 1020 0
 4301 006c 1620     	 movs r0,#22
 4302 006e FFF7FEFF 	 bl getTaskDeltaTime
 4303 0072 0346     	 mov r3,r0
 4304 0074 9AB2     	 uxth r2,r3
 4305 0076 064B     	 ldr r3,.L317+4
 4306 0078 1A80     	 strh r2,[r3]
1021:../cleanflight/src/main/fc/fc_core.c ****         debug[1] = averageSystemLoadPercent;
 4307              	 .loc 13 1021 0
 4308 007a 074B     	 ldr r3,.L317+12
 4309 007c 1B88     	 ldrh r3,[r3]
 4310 007e 9AB2     	 uxth r2,r3
 4311 0080 034B     	 ldr r3,.L317+4
 4312 0082 5A80     	 strh r2,[r3,#2]
 4313              	.L313:
1022:../cleanflight/src/main/fc/fc_core.c ****     }
1023:../cleanflight/src/main/fc/fc_core.c **** }
 4314              	 .loc 13 1023 0
 4315 0084 0C37     	 adds r7,r7,#12
 4316              	.LCFI148:
 4317              	 .cfi_def_cfa_offset 12
 4318 0086 BD46     	 mov sp,r7
 4319              	.LCFI149:
 4320              	 .cfi_def_cfa_register 13
 4321              	 
 4322 0088 90BD     	 pop {r4,r7,pc}
 4323              	.L318:
 4324 008a 00BF     	 .align 2
 4325              	.L317:
 4326 008c 00000000 	 .word debugMode
 4327 0090 00000000 	 .word debug
 4328 0094 00000000 	 .word pidUpdateCounter.16251
 4329 0098 00000000 	 .word averageSystemLoadPercent
 4330              	 .cfi_endproc
 4331              	.LFE642:
 4333              	 .section .text.isFlipOverAfterCrashMode,"ax",%progbits
 4334              	 .align 2
 4335              	 .global isFlipOverAfterCrashMode
 4336              	 .thumb
 4337              	 .thumb_func
 4339              	isFlipOverAfterCrashMode:
 4340              	.LFB643:
1024:../cleanflight/src/main/fc/fc_core.c **** 
1025:../cleanflight/src/main/fc/fc_core.c **** 
1026:../cleanflight/src/main/fc/fc_core.c **** bool isFlipOverAfterCrashMode(void)
1027:../cleanflight/src/main/fc/fc_core.c **** {
 4341              	 .loc 13 1027 0
 4342              	 .cfi_startproc
 4343              	 
 4344              	 
 4345              	 
 4346 0000 80B4     	 push {r7}
 4347              	.LCFI150:
 4348              	 .cfi_def_cfa_offset 4
 4349              	 .cfi_offset 7,-4
 4350 0002 00AF     	 add r7,sp,#0
 4351              	.LCFI151:
 4352              	 .cfi_def_cfa_register 7
1028:../cleanflight/src/main/fc/fc_core.c ****     return flipOverAfterCrashMode;
 4353              	 .loc 13 1028 0
 4354 0004 034B     	 ldr r3,.L321
 4355 0006 1B78     	 ldrb r3,[r3]
1029:../cleanflight/src/main/fc/fc_core.c **** }
 4356              	 .loc 13 1029 0
 4357 0008 1846     	 mov r0,r3
 4358 000a BD46     	 mov sp,r7
 4359              	.LCFI152:
 4360              	 .cfi_def_cfa_register 13
 4361              	 
 4362 000c 5DF8047B 	 ldr r7,[sp],#4
 4363              	.LCFI153:
 4364              	 .cfi_restore 7
 4365              	 .cfi_def_cfa_offset 0
 4366 0010 7047     	 bx lr
 4367              	.L322:
 4368 0012 00BF     	 .align 2
 4369              	.L321:
 4370 0014 00000000 	 .word flipOverAfterCrashMode
 4371              	 .cfi_endproc
 4372              	.LFE643:
 4374              	 .section .text.getLastDisarmTimeUs,"ax",%progbits
 4375              	 .align 2
 4376              	 .global getLastDisarmTimeUs
 4377              	 .thumb
 4378              	 .thumb_func
 4380              	getLastDisarmTimeUs:
 4381              	.LFB644:
1030:../cleanflight/src/main/fc/fc_core.c **** 
1031:../cleanflight/src/main/fc/fc_core.c **** timeUs_t getLastDisarmTimeUs(void)
1032:../cleanflight/src/main/fc/fc_core.c **** {
 4382              	 .loc 13 1032 0
 4383              	 .cfi_startproc
 4384              	 
 4385              	 
 4386              	 
 4387 0000 80B4     	 push {r7}
 4388              	.LCFI154:
 4389              	 .cfi_def_cfa_offset 4
 4390              	 .cfi_offset 7,-4
 4391 0002 00AF     	 add r7,sp,#0
 4392              	.LCFI155:
 4393              	 .cfi_def_cfa_register 7
1033:../cleanflight/src/main/fc/fc_core.c ****     return lastDisarmTimeUs;
 4394              	 .loc 13 1033 0
 4395 0004 034B     	 ldr r3,.L325
 4396 0006 1B68     	 ldr r3,[r3]
1034:../cleanflight/src/main/fc/fc_core.c **** }
 4397              	 .loc 13 1034 0
 4398 0008 1846     	 mov r0,r3
 4399 000a BD46     	 mov sp,r7
 4400              	.LCFI156:
 4401              	 .cfi_def_cfa_register 13
 4402              	 
 4403 000c 5DF8047B 	 ldr r7,[sp],#4
 4404              	.LCFI157:
 4405              	 .cfi_restore 7
 4406              	 .cfi_def_cfa_offset 0
 4407 0010 7047     	 bx lr
 4408              	.L326:
 4409 0012 00BF     	 .align 2
 4410              	.L325:
 4411 0014 00000000 	 .word lastDisarmTimeUs
 4412              	 .cfi_endproc
 4413              	.LFE644:
 4415              	 .section .text.isTryingToArm,"ax",%progbits
 4416              	 .align 2
 4417              	 .global isTryingToArm
 4418              	 .thumb
 4419              	 .thumb_func
 4421              	isTryingToArm:
 4422              	.LFB645:
1035:../cleanflight/src/main/fc/fc_core.c **** 
1036:../cleanflight/src/main/fc/fc_core.c **** bool isTryingToArm()
1037:../cleanflight/src/main/fc/fc_core.c **** {
 4423              	 .loc 13 1037 0
 4424              	 .cfi_startproc
 4425              	 
 4426              	 
 4427              	 
 4428 0000 80B4     	 push {r7}
 4429              	.LCFI158:
 4430              	 .cfi_def_cfa_offset 4
 4431              	 .cfi_offset 7,-4
 4432 0002 00AF     	 add r7,sp,#0
 4433              	.LCFI159:
 4434              	 .cfi_def_cfa_register 7
1038:../cleanflight/src/main/fc/fc_core.c ****     return (tryingToArm != ARMING_DELAYED_DISARMED);
 4435              	 .loc 13 1038 0
 4436 0004 054B     	 ldr r3,.L329
 4437 0006 1B68     	 ldr r3,[r3]
 4438 0008 002B     	 cmp r3,#0
 4439 000a 14BF     	 ite ne
 4440 000c 0123     	 movne r3,#1
 4441 000e 0023     	 moveq r3,#0
 4442 0010 DBB2     	 uxtb r3,r3
1039:../cleanflight/src/main/fc/fc_core.c **** }
 4443              	 .loc 13 1039 0
 4444 0012 1846     	 mov r0,r3
 4445 0014 BD46     	 mov sp,r7
 4446              	.LCFI160:
 4447              	 .cfi_def_cfa_register 13
 4448              	 
 4449 0016 5DF8047B 	 ldr r7,[sp],#4
 4450              	.LCFI161:
 4451              	 .cfi_restore 7
 4452              	 .cfi_def_cfa_offset 0
 4453 001a 7047     	 bx lr
 4454              	.L330:
 4455              	 .align 2
 4456              	.L329:
 4457 001c 00000000 	 .word tryingToArm
 4458              	 .cfi_endproc
 4459              	.LFE645:
 4461              	 .section .text.resetTryingToArm,"ax",%progbits
 4462              	 .align 2
 4463              	 .global resetTryingToArm
 4464              	 .thumb
 4465              	 .thumb_func
 4467              	resetTryingToArm:
 4468              	.LFB646:
1040:../cleanflight/src/main/fc/fc_core.c **** 
1041:../cleanflight/src/main/fc/fc_core.c **** void resetTryingToArm()
1042:../cleanflight/src/main/fc/fc_core.c **** {
 4469              	 .loc 13 1042 0
 4470              	 .cfi_startproc
 4471              	 
 4472              	 
 4473              	 
 4474 0000 80B4     	 push {r7}
 4475              	.LCFI162:
 4476              	 .cfi_def_cfa_offset 4
 4477              	 .cfi_offset 7,-4
 4478 0002 00AF     	 add r7,sp,#0
 4479              	.LCFI163:
 4480              	 .cfi_def_cfa_register 7
1043:../cleanflight/src/main/fc/fc_core.c ****     tryingToArm = ARMING_DELAYED_DISARMED;
 4481              	 .loc 13 1043 0
 4482 0004 034B     	 ldr r3,.L332
 4483 0006 0022     	 movs r2,#0
 4484 0008 1A60     	 str r2,[r3]
1044:../cleanflight/src/main/fc/fc_core.c **** }
 4485              	 .loc 13 1044 0
 4486 000a BD46     	 mov sp,r7
 4487              	.LCFI164:
 4488              	 .cfi_def_cfa_register 13
 4489              	 
 4490 000c 5DF8047B 	 ldr r7,[sp],#4
 4491              	.LCFI165:
 4492              	 .cfi_restore 7
 4493              	 .cfi_def_cfa_offset 0
 4494 0010 7047     	 bx lr
 4495              	.L333:
 4496 0012 00BF     	 .align 2
 4497              	.L332:
 4498 0014 00000000 	 .word tryingToArm
 4499              	 .cfi_endproc
 4500              	.LFE646:
 4502              	 .section .bss.hadRx.16163,"aw",%nobits
 4505              	hadRx.16163:
 4506 0000 00       	 .space 1
 4507              	 .section .bss.armedBeeperOn.16217,"aw",%nobits
 4510              	armedBeeperOn.16217:
 4511 0000 00       	 .space 1
 4512              	 .section .bss.previousMotorUpdateTime.16243,"aw",%nobits
 4513              	 .align 2
 4516              	previousMotorUpdateTime.16243:
 4517 0000 00000000 	 .space 4
 4518              	 .section .bss.pidUpdateCounter.16251,"aw",%nobits
 4519              	 .align 2
 4522              	pidUpdateCounter.16251:
 4523 0000 00000000 	 .space 4
 4524              	 .text
 4525              	.Letext0:
 4526              	 .file 14 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4527              	 .file 15 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4528              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 4529              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 4530              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 4531              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/axis.h"
 4532              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 4533              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 4534              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/light_led.h"
 4535              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/transponder_ir.h"
 4536              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sensor.h"
 4537              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/gyro.h"
 4538              	 .file 26 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/sensors.h"
 4539              	 .file 27 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/barometer.h"
 4540              	 .file 28 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
 4541              	 .file 29 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
 4542              	 .file 30 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
 4543              	 .file 31 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/boardalignment.h"
 4544              	 .file 32 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/controlrate_profile.h"
 4545              	 .file 33 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_core.h"
 4546              	 .file 34 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 4547              	 .file 35 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_adjustments.h"
 4548              	 .file 36 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 4549              	 .file 37 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/beeper.h"
 4550              	 .file 38 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
 4551              	 .file 39 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 4552              	 .file 40 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 4553              	 .file 41 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
 4554              	 .file 42 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/transponder_ir.h"
 4555              	 .file 43 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx_control.h"
 4556              	 .file 44 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 4557              	 .file 45 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/scheduler/scheduler.h"
 4558              	 .file 46 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/telemetry/telemetry.h"
 4559              	 .file 47 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
 4560              	 .file 48 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
 4561              	 .file 49 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 4562              	 .file 50 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
 4563              	 .file 51 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/interface/cli.h"
DEFINED SYMBOLS
                            *ABS*:00000000 fc_core.c
    {standard input}:20     .text.cmpTimeUs:00000000 $t
    {standard input}:24     .text.cmpTimeUs:00000000 cmpTimeUs
    {standard input}:65     .text.blackboxConfig:00000000 $t
    {standard input}:69     .text.blackboxConfig:00000000 blackboxConfig
    {standard input}:99     .text.blackboxConfig:00000010 $d
    {standard input}:104    .text.constrain:00000000 $t
    {standard input}:108    .text.constrain:00000000 constrain
    {standard input}:168    .text.rxConfig:00000000 $t
    {standard input}:172    .text.rxConfig:00000000 rxConfig
    {standard input}:202    .text.rxConfig:00000010 $d
    {standard input}:207    .text.accelerometerConfig:00000000 $t
    {standard input}:211    .text.accelerometerConfig:00000000 accelerometerConfig
    {standard input}:241    .text.accelerometerConfig:00000010 $d
    {standard input}:246    .text.accelerometerConfigMutable:00000000 $t
    {standard input}:250    .text.accelerometerConfigMutable:00000000 accelerometerConfigMutable
    {standard input}:279    .text.accelerometerConfigMutable:00000010 $d
    {standard input}:284    .text.systemConfig:00000000 $t
    {standard input}:288    .text.systemConfig:00000000 systemConfig
    {standard input}:318    .text.systemConfig:00000010 $d
    {standard input}:323    .text.rcControlsConfig:00000000 $t
    {standard input}:327    .text.rcControlsConfig:00000000 rcControlsConfig
    {standard input}:357    .text.rcControlsConfig:00000010 $d
    {standard input}:362    .text.flight3DConfig:00000000 $t
    {standard input}:366    .text.flight3DConfig:00000000 flight3DConfig
    {standard input}:395    .text.flight3DConfig:00000010 $d
    {standard input}:400    .text.armingConfig:00000000 $t
    {standard input}:404    .text.armingConfig:00000000 armingConfig
    {standard input}:433    .text.armingConfig:00000010 $d
    {standard input}:438    .text.failsafeConfig:00000000 $t
    {standard input}:442    .text.failsafeConfig:00000000 failsafeConfig
    {standard input}:472    .text.failsafeConfig:00000010 $d
    {standard input}:477    .text.mixerConfig:00000000 $t
    {standard input}:481    .text.mixerConfig:00000000 mixerConfig
    {standard input}:511    .text.mixerConfig:00000010 $d
    {standard input}:516    .text.pidConfig:00000000 $t
    {standard input}:520    .text.pidConfig:00000000 pidConfig
    {standard input}:550    .text.pidConfig:00000010 $d
                            *COM*:00000001 inputSource_e
    {standard input}:556    .text.servoConfig:00000000 $t
    {standard input}:560    .text.servoConfig:00000000 servoConfig
    {standard input}:590    .text.servoConfig:00000010 $d
    {standard input}:595    .text.gpsRescueConfig:00000000 $t
    {standard input}:599    .text.gpsRescueConfig:00000000 gpsRescueConfig
    {standard input}:629    .text.gpsRescueConfig:00000010 $d
                            *COM*:00000002 magHold
    {standard input}:637    .bss.flipOverAfterCrashMode:00000000 flipOverAfterCrashMode
    {standard input}:638    .bss.flipOverAfterCrashMode:00000000 $d
    {standard input}:640    .bss.disarmAt:00000000 $d
    {standard input}:643    .bss.disarmAt:00000000 disarmAt
                            *COM*:00000001 isRXDataNew
    {standard input}:647    .bss.lastArmingDisabledReason:00000000 $d
    {standard input}:650    .bss.lastArmingDisabledReason:00000000 lastArmingDisabledReason
    {standard input}:653    .bss.lastDisarmTimeUs:00000000 $d
    {standard input}:656    .bss.lastDisarmTimeUs:00000000 lastDisarmTimeUs
    {standard input}:659    .bss.tryingToArm:00000000 $d
    {standard input}:662    .bss.tryingToArm:00000000 tryingToArm
    {standard input}:665    .bss.runawayTakeoffDeactivateUs:00000000 $d
    {standard input}:668    .bss.runawayTakeoffDeactivateUs:00000000 runawayTakeoffDeactivateUs
    {standard input}:671    .bss.runawayTakeoffAccumulatedUs:00000000 $d
    {standard input}:674    .bss.runawayTakeoffAccumulatedUs:00000000 runawayTakeoffAccumulatedUs
    {standard input}:679    .bss.runawayTakeoffCheckDisabled:00000000 runawayTakeoffCheckDisabled
    {standard input}:680    .bss.runawayTakeoffCheckDisabled:00000000 $d
    {standard input}:682    .bss.runawayTakeoffTriggerUs:00000000 $d
    {standard input}:685    .bss.runawayTakeoffTriggerUs:00000000 runawayTakeoffTriggerUs
    {standard input}:690    .bss.runawayTakeoffTemporarilyDisabled:00000000 runawayTakeoffTemporarilyDisabled
    {standard input}:691    .bss.runawayTakeoffTemporarilyDisabled:00000000 $d
                            *COM*:00000003 throttleCorrectionConfig_System
                            *COM*:00000003 throttleCorrectionConfig_Copy
    {standard input}:699    .pg_registry:00000000 throttleCorrectionConfig_Registry
    {standard input}:696    .pg_registry:00000000 $d
    {standard input}:711    .pg_resetdata:00000000 pgResetTemplate_throttleCorrectionConfig
    {standard input}:708    .pg_resetdata:00000000 $d
    {standard input}:715    .text.applyAndSaveAccelerometerTrimsDelta:00000000 $t
    {standard input}:720    .text.applyAndSaveAccelerometerTrimsDelta:00000000 applyAndSaveAccelerometerTrimsDelta
    {standard input}:782    .text.isCalibrating:00000000 $t
    {standard input}:786    .text.isCalibrating:00000000 isCalibrating
    {standard input}:857    .text.resetArmingDisabled:00000000 $t
    {standard input}:862    .text.resetArmingDisabled:00000000 resetArmingDisabled
    {standard input}:893    .text.resetArmingDisabled:00000014 $d
    {standard input}:898    .text.updateArmingStatus:00000000 $t
    {standard input}:903    .text.updateArmingStatus:00000000 updateArmingStatus
    {standard input}:1335   .text.updateArmingStatus:00000304 $d
    {standard input}:4505   .bss.hadRx.16163:00000000 hadRx.16163
    {standard input}:1344   .text.disarm:00000000 $t
    {standard input}:1349   .text.disarm:00000000 disarm
    {standard input}:1415   .text.disarm:00000060 $d
    {standard input}:1422   .text.tryArm:00000000 $t
    {standard input}:1427   .text.tryArm:00000000 tryArm
    {standard input}:4467   .text.resetTryingToArm:00000000 resetTryingToArm
    {standard input}:1608   .text.tryArm:00000124 $d
    {standard input}:1623   .bss.AccInflightCalibrationArmed:00000000 AccInflightCalibrationArmed
    {standard input}:1624   .bss.AccInflightCalibrationArmed:00000000 $d
    {standard input}:1629   .bss.AccInflightCalibrationMeasurementDone:00000000 AccInflightCalibrationMeasurementDone
    {standard input}:1630   .bss.AccInflightCalibrationMeasurementDone:00000000 $d
    {standard input}:1635   .bss.AccInflightCalibrationSavetoEEProm:00000000 AccInflightCalibrationSavetoEEProm
    {standard input}:1636   .bss.AccInflightCalibrationSavetoEEProm:00000000 $d
    {standard input}:1641   .bss.AccInflightCalibrationActive:00000000 AccInflightCalibrationActive
    {standard input}:1642   .bss.AccInflightCalibrationActive:00000000 $d
    {standard input}:1648   .bss.InflightcalibratingA:00000000 InflightcalibratingA
    {standard input}:1645   .bss.InflightcalibratingA:00000000 $d
    {standard input}:1651   .text.handleInflightCalibrationStickPosition:00000000 $t
    {standard input}:1656   .text.handleInflightCalibrationStickPosition:00000000 handleInflightCalibrationStickPosition
    {standard input}:1718   .text.handleInflightCalibrationStickPosition:00000050 $d
    {standard input}:1725   .text.updateInflightCalibrationState:00000000 $t
    {standard input}:1729   .text.updateInflightCalibrationState:00000000 updateInflightCalibrationState
    {standard input}:1839   .text.updateInflightCalibrationState:000000a4 $d
    {standard input}:1850   .text.updateMagHold:00000000 $t
    {standard input}:1855   .text.updateMagHold:00000000 updateMagHold
    {standard input}:2016   .text.updateMagHold:00000114 $d
    {standard input}:2028   .text.canUpdateVTX:00000000 $t
    {standard input}:2032   .text.canUpdateVTX:00000000 canUpdateVTX
    {standard input}:2063   .text.areSticksActive:00000000 $t
    {standard input}:2068   .text.areSticksActive:00000000 areSticksActive
    {standard input}:2250   .text.areSticksActive:0000012c $d
    {standard input}:2255   .text.runawayTakeoffTemporaryDisable:00000000 $t
    {standard input}:2260   .text.runawayTakeoffTemporaryDisable:00000000 runawayTakeoffTemporaryDisable
    {standard input}:2304   .text.runawayTakeoffTemporaryDisable:00000024 $d
    {standard input}:2309   .text.calculateThrottlePercent:00000000 $t
    {standard input}:2314   .text.calculateThrottlePercent:00000000 calculateThrottlePercent
    {standard input}:2510   .text.calculateThrottlePercent:00000170 $d
    {standard input}:2517   .bss.airmodeIsActivated:00000000 airmodeIsActivated
    {standard input}:2518   .bss.airmodeIsActivated:00000000 $d
    {standard input}:2520   .text.isAirmodeActivated:00000000 $t
    {standard input}:2525   .text.isAirmodeActivated:00000000 isAirmodeActivated
    {standard input}:2556   .text.isAirmodeActivated:00000014 $d
    {standard input}:2561   .text.processRx:00000000 $t
    {standard input}:2566   .text.processRx:00000000 processRx
    {standard input}:3001   .text.processRx:000002f8 $d
    {standard input}:3018   .text.processRx:00000334 $t
    {standard input}:3422   .text.processRx:00000610 $d
    {standard input}:4510   .bss.armedBeeperOn.16217:00000000 armedBeeperOn.16217
    {standard input}:3436   .text.processRx:00000640 $t
    {standard input}:3578   .text.processRx:00000734 $d
    {standard input}:3583   .text.subTaskPidController:00000000 $t
    {standard input}:3587   .text.subTaskPidController:00000000 subTaskPidController
    {standard input}:3896   .text.subTaskPidController:000001fc $d
    {standard input}:3911   .text.subTaskPidSubprocesses:00000000 $t
    {standard input}:3915   .text.subTaskPidSubprocesses:00000000 subTaskPidSubprocesses
    {standard input}:3998   .text.subTaskPidSubprocesses:00000068 $d
    {standard input}:4005   .text.subTaskMotorUpdate:00000000 $t
    {standard input}:4009   .text.subTaskMotorUpdate:00000000 subTaskMotorUpdate
    {standard input}:4123   .text.subTaskMotorUpdate:0000009c $d
    {standard input}:4516   .bss.previousMotorUpdateTime.16243:00000000 previousMotorUpdateTime.16243
    {standard input}:4132   .text.subTaskRcCommand:00000000 $t
    {standard input}:4136   .text.subTaskRcCommand:00000000 subTaskRcCommand
    {standard input}:4219   .text.subTaskRcCommand:00000070 $d
    {standard input}:4224   .text.taskMainPidLoop:00000000 $t
    {standard input}:4229   .text.taskMainPidLoop:00000000 taskMainPidLoop
    {standard input}:4326   .text.taskMainPidLoop:0000008c $d
    {standard input}:4522   .bss.pidUpdateCounter.16251:00000000 pidUpdateCounter.16251
    {standard input}:4334   .text.isFlipOverAfterCrashMode:00000000 $t
    {standard input}:4339   .text.isFlipOverAfterCrashMode:00000000 isFlipOverAfterCrashMode
    {standard input}:4370   .text.isFlipOverAfterCrashMode:00000014 $d
    {standard input}:4375   .text.getLastDisarmTimeUs:00000000 $t
    {standard input}:4380   .text.getLastDisarmTimeUs:00000000 getLastDisarmTimeUs
    {standard input}:4411   .text.getLastDisarmTimeUs:00000014 $d
    {standard input}:4416   .text.isTryingToArm:00000000 $t
    {standard input}:4421   .text.isTryingToArm:00000000 isTryingToArm
    {standard input}:4457   .text.isTryingToArm:0000001c $d
    {standard input}:4462   .text.resetTryingToArm:00000000 $t
    {standard input}:4498   .text.resetTryingToArm:00000014 $d
    {standard input}:4506   .bss.hadRx.16163:00000000 $d
    {standard input}:4511   .bss.armedBeeperOn.16217:00000000 $d
    {standard input}:4513   .bss.previousMotorUpdateTime.16243:00000000 $d
    {standard input}:4519   .bss.pidUpdateCounter.16251:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
blackboxConfig_System
rxConfig_System
accelerometerConfig_System
systemConfig_System
rcControlsConfig_System
flight3DConfig_System
armingConfig_System
failsafeConfig_System
mixerConfig_System
pidConfig_System
servoConfig_System
gpsRescueConfig_System
saveConfigAndNotify
sensors
isBaroCalibrationComplete
accIsCalibrationComplete
isGyroCalibrationComplete
ledSet
getArmingDisableFlags
millis
unsetArmingDisabled
isUsingSticksForArming
rxIsReceivingSignal
IS_RC_MODE_ACTIVE
setArmingDisabled
calculateThrottleStatus
isModeActivationConditionPresent
feature
isArmingDisabled
warningLedFlash
warningLedDisable
warningLedUpdate
armingFlags
stateFlags
averageSystemLoadPercent
micros
blackboxFinish
beeper
gyroStartCalibration
pidAcroTrainerInit
imuQuaternionHeadfreeOffsetSet
isFirstArmingGyroCalibrationRunning
ffs
beeperWarningBeeps
gpsSol
rcData
rcCommand
flightModeFlags
attitude
currentPidProfile
calculateRxChannelsAndUpdateFailsafe
updateRSSI
failsafeIsMonitoring
failsafeStartMonitoring
failsafeUpdateState
isAirmodeActive
pidResetITerm
pidStabilisationState
pidData
debugMode
debug
beeperSilence
processRcStickPositions
updateActivatedModes
updateAdjustmentStates
processRcAdjustments
failsafeIsActive
enableFlightMode
disableFlightMode
rescheduleTask
cliMode
currentControlRateProfile
vtxUpdateActivatedChannel
handleVTXControlButton
pidSetAcroTrainerState
rcSmoothingInitializationComplete
pidSetAntiGravityState
pidController
gyroAbsRateDps
blackboxUpdate
mixTable
isMixerUsingServos
writeServos
writeMotors
targetPidLooptime
resetYawAxis
processRcCommand
gyroUpdate
getTaskDeltaTime
