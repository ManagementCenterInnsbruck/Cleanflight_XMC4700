   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "fc_hardfaults.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.HardFault_Handler,"ax",%progbits
  20              	 .align 2
  21              	 .global HardFault_Handler
  22              	 .thumb
  23              	 .thumb_func
  25              	HardFault_Handler:
  26              	.LFB536:
  27              	 .file 1 "../cleanflight/src/main/fc/fc_hardfaults.c"
   1:../cleanflight/src/main/fc/fc_hardfaults.c **** /*
   2:../cleanflight/src/main/fc/fc_hardfaults.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/fc/fc_hardfaults.c ****  *
   4:../cleanflight/src/main/fc/fc_hardfaults.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/fc/fc_hardfaults.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/fc/fc_hardfaults.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/fc/fc_hardfaults.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/fc/fc_hardfaults.c ****  * any later version.
   9:../cleanflight/src/main/fc/fc_hardfaults.c ****  *
  10:../cleanflight/src/main/fc/fc_hardfaults.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/fc/fc_hardfaults.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/fc/fc_hardfaults.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/fc/fc_hardfaults.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/fc/fc_hardfaults.c ****  *
  15:../cleanflight/src/main/fc/fc_hardfaults.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/fc/fc_hardfaults.c ****  * along with this software.
  17:../cleanflight/src/main/fc/fc_hardfaults.c ****  *
  18:../cleanflight/src/main/fc/fc_hardfaults.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/fc/fc_hardfaults.c ****  */
  20:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  21:../cleanflight/src/main/fc/fc_hardfaults.c **** #include <stdbool.h>
  22:../cleanflight/src/main/fc/fc_hardfaults.c **** #include <stdint.h>
  23:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  24:../cleanflight/src/main/fc/fc_hardfaults.c **** #include "platform.h"
  25:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  26:../cleanflight/src/main/fc/fc_hardfaults.c **** #include "drivers/light_led.h"
  27:../cleanflight/src/main/fc/fc_hardfaults.c **** #include "drivers/time.h"
  28:../cleanflight/src/main/fc/fc_hardfaults.c **** #include "drivers/transponder_ir.h"
  29:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  30:../cleanflight/src/main/fc/fc_hardfaults.c **** #include "fc/fc_init.h"
  31:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  32:../cleanflight/src/main/fc/fc_hardfaults.c **** #include "flight/mixer.h"
  33:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  34:../cleanflight/src/main/fc/fc_hardfaults.c **** #ifdef STM32F7
  35:../cleanflight/src/main/fc/fc_hardfaults.c **** void MemManage_Handler(void)
  36:../cleanflight/src/main/fc/fc_hardfaults.c **** {
  37:../cleanflight/src/main/fc/fc_hardfaults.c ****     LED2_ON;
  38:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  39:../cleanflight/src/main/fc/fc_hardfaults.c ****     // fall out of the sky
  40:../cleanflight/src/main/fc/fc_hardfaults.c ****     uint8_t requiredStateForMotors = SYSTEM_STATE_CONFIG_LOADED | SYSTEM_STATE_MOTORS_READY;
  41:../cleanflight/src/main/fc/fc_hardfaults.c ****     if ((systemState & requiredStateForMotors) == requiredStateForMotors) {
  42:../cleanflight/src/main/fc/fc_hardfaults.c ****         stopMotors();
  43:../cleanflight/src/main/fc/fc_hardfaults.c ****     }
  44:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  45:../cleanflight/src/main/fc/fc_hardfaults.c **** #ifdef USE_TRANSPONDER
  46:../cleanflight/src/main/fc/fc_hardfaults.c ****     // prevent IR LEDs from burning out.
  47:../cleanflight/src/main/fc/fc_hardfaults.c ****     uint8_t requiredStateForTransponder = SYSTEM_STATE_CONFIG_LOADED | SYSTEM_STATE_TRANSPONDER_ENA
  48:../cleanflight/src/main/fc/fc_hardfaults.c ****     if ((systemState & requiredStateForTransponder) == requiredStateForTransponder) {
  49:../cleanflight/src/main/fc/fc_hardfaults.c ****         transponderIrDisable();
  50:../cleanflight/src/main/fc/fc_hardfaults.c ****     }
  51:../cleanflight/src/main/fc/fc_hardfaults.c **** #endif
  52:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  53:../cleanflight/src/main/fc/fc_hardfaults.c ****     LED1_OFF;
  54:../cleanflight/src/main/fc/fc_hardfaults.c ****     LED0_OFF;
  55:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  56:../cleanflight/src/main/fc/fc_hardfaults.c ****     while (1) {
  57:../cleanflight/src/main/fc/fc_hardfaults.c ****         delay(500);
  58:../cleanflight/src/main/fc/fc_hardfaults.c ****         LED2_TOGGLE;
  59:../cleanflight/src/main/fc/fc_hardfaults.c ****         delay(50);
  60:../cleanflight/src/main/fc/fc_hardfaults.c ****         LED2_TOGGLE;
  61:../cleanflight/src/main/fc/fc_hardfaults.c ****     }
  62:../cleanflight/src/main/fc/fc_hardfaults.c **** }
  63:../cleanflight/src/main/fc/fc_hardfaults.c **** #endif
  64:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  65:../cleanflight/src/main/fc/fc_hardfaults.c **** #ifdef DEBUG_HARDFAULTS
  66:../cleanflight/src/main/fc/fc_hardfaults.c **** //from: https://mcuoneclipse.com/2012/11/24/debugging-hard-faults-on-arm-cortex-m/
  67:../cleanflight/src/main/fc/fc_hardfaults.c **** /**
  68:../cleanflight/src/main/fc/fc_hardfaults.c ****  * hard_fault_handler_c:
  69:../cleanflight/src/main/fc/fc_hardfaults.c ****  * This is called from the HardFault_HandlerAsm with a pointer the Fault stack
  70:../cleanflight/src/main/fc/fc_hardfaults.c ****  * as the parameter. We can then read the values from the stack and place them
  71:../cleanflight/src/main/fc/fc_hardfaults.c ****  * into local variables for ease of reading.
  72:../cleanflight/src/main/fc/fc_hardfaults.c ****  * We then read the various Fault Status and Address Registers to help decode
  73:../cleanflight/src/main/fc/fc_hardfaults.c ****  * cause of the fault.
  74:../cleanflight/src/main/fc/fc_hardfaults.c ****  * The function ends with a BKPT instruction to force control back into the debugger
  75:../cleanflight/src/main/fc/fc_hardfaults.c ****  */
  76:../cleanflight/src/main/fc/fc_hardfaults.c **** void hard_fault_handler_c(unsigned long *hardfault_args)
  77:../cleanflight/src/main/fc/fc_hardfaults.c **** {
  78:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long stacked_r0 ;
  79:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long stacked_r1 ;
  80:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long stacked_r2 ;
  81:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long stacked_r3 ;
  82:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long stacked_r12 ;
  83:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long stacked_lr ;
  84:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long stacked_pc ;
  85:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long stacked_psr ;
  86:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long _CFSR ;
  87:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long _HFSR ;
  88:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long _DFSR ;
  89:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long _AFSR ;
  90:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long _BFAR ;
  91:../cleanflight/src/main/fc/fc_hardfaults.c ****   volatile unsigned long _MMAR ;
  92:../cleanflight/src/main/fc/fc_hardfaults.c **** 
  93:../cleanflight/src/main/fc/fc_hardfaults.c ****   stacked_r0 = ((unsigned long)hardfault_args[0]) ;
  94:../cleanflight/src/main/fc/fc_hardfaults.c ****   stacked_r1 = ((unsigned long)hardfault_args[1]) ;
  95:../cleanflight/src/main/fc/fc_hardfaults.c ****   stacked_r2 = ((unsigned long)hardfault_args[2]) ;
  96:../cleanflight/src/main/fc/fc_hardfaults.c ****   stacked_r3 = ((unsigned long)hardfault_args[3]) ;
  97:../cleanflight/src/main/fc/fc_hardfaults.c ****   stacked_r12 = ((unsigned long)hardfault_args[4]) ;
  98:../cleanflight/src/main/fc/fc_hardfaults.c ****   stacked_lr = ((unsigned long)hardfault_args[5]) ;
  99:../cleanflight/src/main/fc/fc_hardfaults.c ****   stacked_pc = ((unsigned long)hardfault_args[6]) ;
 100:../cleanflight/src/main/fc/fc_hardfaults.c ****   stacked_psr = ((unsigned long)hardfault_args[7]) ;
 101:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 102:../cleanflight/src/main/fc/fc_hardfaults.c ****   // Configurable Fault Status Register
 103:../cleanflight/src/main/fc/fc_hardfaults.c ****   // Consists of MMSR, BFSR and UFSR
 104:../cleanflight/src/main/fc/fc_hardfaults.c ****   _CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
 105:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 106:../cleanflight/src/main/fc/fc_hardfaults.c ****   // Hard Fault Status Register
 107:../cleanflight/src/main/fc/fc_hardfaults.c ****   _HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
 108:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 109:../cleanflight/src/main/fc/fc_hardfaults.c ****   // Debug Fault Status Register
 110:../cleanflight/src/main/fc/fc_hardfaults.c ****   _DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
 111:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 112:../cleanflight/src/main/fc/fc_hardfaults.c ****   // Auxiliary Fault Status Register
 113:../cleanflight/src/main/fc/fc_hardfaults.c ****   _AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
 114:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 115:../cleanflight/src/main/fc/fc_hardfaults.c ****   // Read the Fault Address Registers. These may not contain valid values.
 116:../cleanflight/src/main/fc/fc_hardfaults.c ****   // Check BFARVALID/MMARVALID to see if they are valid values
 117:../cleanflight/src/main/fc/fc_hardfaults.c ****   // MemManage Fault Address Register
 118:../cleanflight/src/main/fc/fc_hardfaults.c ****   _MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
 119:../cleanflight/src/main/fc/fc_hardfaults.c ****   // Bus Fault Address Register
 120:../cleanflight/src/main/fc/fc_hardfaults.c ****   _BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
 121:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 122:../cleanflight/src/main/fc/fc_hardfaults.c ****   __asm("BKPT #0\n") ; // Break into the debugger
 123:../cleanflight/src/main/fc/fc_hardfaults.c **** }
 124:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 125:../cleanflight/src/main/fc/fc_hardfaults.c **** #else
 126:../cleanflight/src/main/fc/fc_hardfaults.c **** void HardFault_Handler(void)
 127:../cleanflight/src/main/fc/fc_hardfaults.c **** {
  28              	 .loc 1 127 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 80B5     	 push {r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 7,-8
  36              	 .cfi_offset 14,-4
  37 0002 82B0     	 sub sp,sp,#8
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 16
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
 128:../cleanflight/src/main/fc/fc_hardfaults.c ****     LED2_ON;
  43              	 .loc 1 128 0
  44 0006 0220     	 movs r0,#2
  45 0008 0121     	 movs r1,#1
  46 000a FFF7FEFF 	 bl ledSet
 129:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 130:../cleanflight/src/main/fc/fc_hardfaults.c **** #ifndef USE_OSD_SLAVE
 131:../cleanflight/src/main/fc/fc_hardfaults.c ****     // fall out of the sky
 132:../cleanflight/src/main/fc/fc_hardfaults.c ****     uint8_t requiredStateForMotors = SYSTEM_STATE_CONFIG_LOADED | SYSTEM_STATE_MOTORS_READY;
  47              	 .loc 1 132 0
  48 000e 0523     	 movs r3,#5
  49 0010 FB71     	 strb r3,[r7,#7]
 133:../cleanflight/src/main/fc/fc_hardfaults.c ****     if ((systemState & requiredStateForMotors) == requiredStateForMotors) {
  50              	 .loc 1 133 0
  51 0012 0C4B     	 ldr r3,.L4
  52 0014 1A78     	 ldrb r2,[r3]
  53 0016 FB79     	 ldrb r3,[r7,#7]
  54 0018 1340     	 ands r3,r3,r2
  55 001a DBB2     	 uxtb r3,r3
  56 001c FA79     	 ldrb r2,[r7,#7]
  57 001e 9A42     	 cmp r2,r3
  58 0020 01D1     	 bne .L2
 134:../cleanflight/src/main/fc/fc_hardfaults.c ****         stopMotors();
  59              	 .loc 1 134 0
  60 0022 FFF7FEFF 	 bl stopMotors
  61              	.L2:
 135:../cleanflight/src/main/fc/fc_hardfaults.c ****     }
 136:../cleanflight/src/main/fc/fc_hardfaults.c **** #endif
 137:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 138:../cleanflight/src/main/fc/fc_hardfaults.c **** #ifdef USE_TRANSPONDER
 139:../cleanflight/src/main/fc/fc_hardfaults.c ****     // prevent IR LEDs from burning out.
 140:../cleanflight/src/main/fc/fc_hardfaults.c ****     uint8_t requiredStateForTransponder = SYSTEM_STATE_CONFIG_LOADED | SYSTEM_STATE_TRANSPONDER_ENA
 141:../cleanflight/src/main/fc/fc_hardfaults.c ****     if ((systemState & requiredStateForTransponder) == requiredStateForTransponder) {
 142:../cleanflight/src/main/fc/fc_hardfaults.c ****         transponderIrDisable();
 143:../cleanflight/src/main/fc/fc_hardfaults.c ****     }
 144:../cleanflight/src/main/fc/fc_hardfaults.c **** #endif
 145:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 146:../cleanflight/src/main/fc/fc_hardfaults.c ****     LED1_OFF;
  62              	 .loc 1 146 0
  63 0026 0120     	 movs r0,#1
  64 0028 0021     	 movs r1,#0
  65 002a FFF7FEFF 	 bl ledSet
 147:../cleanflight/src/main/fc/fc_hardfaults.c ****     LED0_OFF;
  66              	 .loc 1 147 0
  67 002e 0020     	 movs r0,#0
  68 0030 0021     	 movs r1,#0
  69 0032 FFF7FEFF 	 bl ledSet
  70              	.L3:
 148:../cleanflight/src/main/fc/fc_hardfaults.c **** 
 149:../cleanflight/src/main/fc/fc_hardfaults.c ****     while (1) {
 150:../cleanflight/src/main/fc/fc_hardfaults.c ****         delay(50);
  71              	 .loc 1 150 0 discriminator 1
  72 0036 3220     	 movs r0,#50
  73 0038 FFF7FEFF 	 bl delay
 151:../cleanflight/src/main/fc/fc_hardfaults.c ****         LED2_TOGGLE;
  74              	 .loc 1 151 0 discriminator 1
  75 003c 0220     	 movs r0,#2
  76 003e FFF7FEFF 	 bl ledToggle
 152:../cleanflight/src/main/fc/fc_hardfaults.c ****     }
  77              	 .loc 1 152 0 discriminator 1
  78 0042 F8E7     	 b .L3
  79              	.L5:
  80              	 .align 2
  81              	.L4:
  82 0044 00000000 	 .word systemState
  83              	 .cfi_endproc
  84              	.LFE536:
  86              	 .text
  87              	.Letext0:
  88              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
  89              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
  90              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
  91              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/light_led.h"
  92              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
  93              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
  94              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
  95              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
  96              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
  97              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_init.h"
DEFINED SYMBOLS
                            *ABS*:00000000 fc_hardfaults.c
    {standard input}:20     .text.HardFault_Handler:00000000 $t
    {standard input}:25     .text.HardFault_Handler:00000000 HardFault_Handler
    {standard input}:82     .text.HardFault_Handler:00000044 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
ledSet
stopMotors
delay
ledToggle
systemState
