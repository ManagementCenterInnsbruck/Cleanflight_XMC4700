   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "fc_rc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.constrain,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	constrain:
  25              	.LFB521:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  27              	 .loc 1 151 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 85B0     	 sub sp,sp,#20
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 F860     	 str r0,[r7,#12]
  43 0008 B960     	 str r1,[r7,#8]
  44 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
  45              	 .loc 1 152 0
  46 000c FA68     	 ldr r2,[r7,#12]
  47 000e BB68     	 ldr r3,[r7,#8]
  48 0010 9A42     	 cmp r2,r3
  49 0012 01DA     	 bge .L2
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
  50              	 .loc 1 153 0
  51 0014 BB68     	 ldr r3,[r7,#8]
  52 0016 06E0     	 b .L3
  53              	.L2:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
  54              	 .loc 1 154 0
  55 0018 FA68     	 ldr r2,[r7,#12]
  56 001a 7B68     	 ldr r3,[r7,#4]
  57 001c 9A42     	 cmp r2,r3
  58 001e 01DD     	 ble .L4
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
  59              	 .loc 1 155 0
  60 0020 7B68     	 ldr r3,[r7,#4]
  61 0022 00E0     	 b .L3
  62              	.L4:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
  63              	 .loc 1 157 0
  64 0024 FB68     	 ldr r3,[r7,#12]
  65              	.L3:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
  66              	 .loc 1 158 0
  67 0026 1846     	 mov r0,r3
  68 0028 1437     	 adds r7,r7,#20
  69              	.LCFI3:
  70              	 .cfi_def_cfa_offset 4
  71 002a BD46     	 mov sp,r7
  72              	.LCFI4:
  73              	 .cfi_def_cfa_register 13
  74              	 
  75 002c 5DF8047B 	 ldr r7,[sp],#4
  76              	.LCFI5:
  77              	 .cfi_restore 7
  78              	 .cfi_def_cfa_offset 0
  79 0030 7047     	 bx lr
  80              	 .cfi_endproc
  81              	.LFE521:
  83 0032 00BF     	 .section .text.constrainf,"ax",%progbits
  84              	 .align 2
  85              	 .thumb
  86              	 .thumb_func
  88              	constrainf:
  89              	.LFB522:
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline float constrainf(float amt, float low, float high)
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  90              	 .loc 1 161 0
  91              	 .cfi_startproc
  92              	 
  93              	 
  94              	 
  95 0000 80B4     	 push {r7}
  96              	.LCFI6:
  97              	 .cfi_def_cfa_offset 4
  98              	 .cfi_offset 7,-4
  99 0002 85B0     	 sub sp,sp,#20
 100              	.LCFI7:
 101              	 .cfi_def_cfa_offset 24
 102 0004 00AF     	 add r7,sp,#0
 103              	.LCFI8:
 104              	 .cfi_def_cfa_register 7
 105 0006 87ED030A 	 fsts s0,[r7,#12]
 106 000a C7ED020A 	 fsts s1,[r7,#8]
 107 000e 87ED011A 	 fsts s2,[r7,#4]
 162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
 108              	 .loc 1 162 0
 109 0012 97ED037A 	 flds s14,[r7,#12]
 110 0016 D7ED027A 	 flds s15,[r7,#8]
 111 001a B4EEE77A 	 fcmpes s14,s15
 112 001e F1EE10FA 	 fmstat
 113 0022 01D5     	 bpl .L13
 163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
 114              	 .loc 1 163 0
 115 0024 BB68     	 ldr r3,[r7,#8]
 116 0026 0BE0     	 b .L8
 117              	.L13:
 164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
 118              	 .loc 1 164 0
 119 0028 97ED037A 	 flds s14,[r7,#12]
 120 002c D7ED017A 	 flds s15,[r7,#4]
 121 0030 B4EEE77A 	 fcmpes s14,s15
 122 0034 F1EE10FA 	 fmstat
 123 0038 01DD     	 ble .L14
 165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 124              	 .loc 1 165 0
 125 003a 7B68     	 ldr r3,[r7,#4]
 126 003c 00E0     	 b .L8
 127              	.L14:
 166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 128              	 .loc 1 167 0
 129 003e FB68     	 ldr r3,[r7,#12]
 130              	.L8:
 131 0040 07EE903A 	 fmsr s15,r3
 168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 132              	 .loc 1 168 0
 133 0044 B0EE670A 	 fcpys s0,s15
 134 0048 1437     	 adds r7,r7,#20
 135              	.LCFI9:
 136              	 .cfi_def_cfa_offset 4
 137 004a BD46     	 mov sp,r7
 138              	.LCFI10:
 139              	 .cfi_def_cfa_register 13
 140              	 
 141 004c 5DF8047B 	 ldr r7,[sp],#4
 142              	.LCFI11:
 143              	 .cfi_restore 7
 144              	 .cfi_def_cfa_offset 0
 145 0050 7047     	 bx lr
 146              	 .cfi_endproc
 147              	.LFE522:
 149 0052 00BF     	 .section .text.rcControlsConfig,"ax",%progbits
 150              	 .align 2
 151              	 .thumb
 152              	 .thumb_func
 154              	rcControlsConfig:
 155              	.LFB540:
 156              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum rc_alias {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     ROLL = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     PITCH,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     YAW,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX1,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX3,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX4,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX5,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX6,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX7,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX8
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rc_alias_e;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PRIMARY_CHANNEL_COUNT (THROTTLE + 1)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_LOW = 0,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_HIGH
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } throttleStatus_e;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define AIRMODEDEADBAND 12
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     NOT_CENTERED = 0,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     CENTERED
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rollPitchStatus_e;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_OFF = 0,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DEFAULT,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_AUTO,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_MANUAL
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothing_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_INTERPOLATION,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_FILTER
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingType_e;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_PT1,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_BIQUAD
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInputFilter_e;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_OFF,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_PT1,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_BIQUAD
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingDerivativeFilter_e;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_INPUT_ACTIVE,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_DERIVATIVE_ACTIVE,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_AVERAGE_FRAME
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInfoType_e;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_LO (1 << (2 * ROLL))
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_CE (3 << (2 * ROLL))
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_HI (2 << (2 * ROLL))
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_LO (1 << (2 * PITCH))
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_CE (3 << (2 * PITCH))
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_HI (2 << (2 * PITCH))
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_LO (1 << (2 * YAW))
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_CE (3 << (2 * YAW))
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_HI (2 << (2 * YAW))
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_LO (1 << (2 * THROTTLE))
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_CE (3 << (2 * THROTTLE))
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_HI (2 << (2 * THROTTLE))
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_EXPO_MAX  100
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_RATES_MAX  255
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** // (Super) rates are constrained to [0, 100] for Betaflight rates, so values higher than 100 won't 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RATE_MAX  255
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_TPA_MAX              100
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** extern float rcCommand[4];
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilterTraining_s {
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     float sum;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int count;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t min;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t max;
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTraining_t;
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef union rcSmoothingFilterTypes_u {
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     pt1Filter_t pt1Filter;
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     biquadFilter_t biquadFilter;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTypes_t;
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilter_s {
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool filterInitialized;
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTypes_t filter[4];
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t inputCutoffFrequency;
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t derivativeCutoffFrequency;
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int averageFrameTimeUs;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTraining_t training;
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilter_t;
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcControlsConfig_s {
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t deadband;                       // introduce a deadband around the stick center for pit
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t yaw_deadband;                   // introduce a deadband around the stick center for yaw
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_deadband;              // defines the neutral zone of throttle stick during al
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_fast_change;           // when disabled, turn off the althold when throttle st
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool yaw_control_reversed;            // invert control direction of yaw
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcControlsConfig_t;
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(rcControlsConfig_t, rcControlsConfig);
 157              	 .loc 2 139 0
 158              	 .cfi_startproc
 159              	 
 160              	 
 161              	 
 162 0000 80B4     	 push {r7}
 163              	.LCFI12:
 164              	 .cfi_def_cfa_offset 4
 165              	 .cfi_offset 7,-4
 166 0002 00AF     	 add r7,sp,#0
 167              	.LCFI13:
 168              	 .cfi_def_cfa_register 7
 169              	 .loc 2 139 0
 170 0004 024B     	 ldr r3,.L17
 171 0006 1846     	 mov r0,r3
 172 0008 BD46     	 mov sp,r7
 173              	.LCFI14:
 174              	 .cfi_def_cfa_register 13
 175              	 
 176 000a 5DF8047B 	 ldr r7,[sp],#4
 177              	.LCFI15:
 178              	 .cfi_restore 7
 179              	 .cfi_def_cfa_offset 0
 180 000e 7047     	 bx lr
 181              	.L18:
 182              	 .align 2
 183              	.L17:
 184 0010 00000000 	 .word rcControlsConfig_System
 185              	 .cfi_endproc
 186              	.LFE540:
 188              	 .section .text.flight3DConfig,"ax",%progbits
 189              	 .align 2
 190              	 .thumb
 191              	 .thumb_func
 193              	flight3DConfig:
 194              	.LFB542:
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct flight3DConfig_s {
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_low;                // min 3d value
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_high;               // max 3d value
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t neutral3d;                     // center 3d value
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_throttle;           // default throttle deadband from MIDRC
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_low;                   // pwm output value for max negative thrust
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_high;                  // pwm output value for max positive thrust
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t switched_mode3d;                // enable '3D Switched Mode'
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } flight3DConfig_t;
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(flight3DConfig_t, flight3DConfig);
 195              	 .loc 2 151 0
 196              	 .cfi_startproc
 197              	 
 198              	 
 199              	 
 200 0000 80B4     	 push {r7}
 201              	.LCFI16:
 202              	 .cfi_def_cfa_offset 4
 203              	 .cfi_offset 7,-4
 204 0002 00AF     	 add r7,sp,#0
 205              	.LCFI17:
 206              	 .cfi_def_cfa_register 7
 207              	 .loc 2 151 0
 208 0004 024B     	 ldr r3,.L21
 209 0006 1846     	 mov r0,r3
 210 0008 BD46     	 mov sp,r7
 211              	.LCFI18:
 212              	 .cfi_def_cfa_register 13
 213              	 
 214 000a 5DF8047B 	 ldr r7,[sp],#4
 215              	.LCFI19:
 216              	 .cfi_restore 7
 217              	 .cfi_def_cfa_offset 0
 218 000e 7047     	 bx lr
 219              	.L22:
 220              	 .align 2
 221              	.L21:
 222 0010 00000000 	 .word flight3DConfig_System
 223              	 .cfi_endproc
 224              	.LFE542:
 226              	 .section .text.rxConfig,"ax",%progbits
 227              	 .align 2
 228              	 .thumb
 229              	 .thumb_func
 231              	rxConfig:
 232              	.LFB560:
 233              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
 234              	 .loc 3 61 0
 235              	 .cfi_startproc
 236              	 
 237              	 
 238              	 
 239 0000 80B4     	 push {r7}
 240              	.LCFI20:
 241              	 .cfi_def_cfa_offset 4
 242              	 .cfi_offset 7,-4
 243 0002 00AF     	 add r7,sp,#0
 244              	.LCFI21:
 245              	 .cfi_def_cfa_register 7
 246              	 .loc 3 61 0
 247 0004 024B     	 ldr r3,.L25
 248 0006 1846     	 mov r0,r3
 249 0008 BD46     	 mov sp,r7
 250              	.LCFI22:
 251              	 .cfi_def_cfa_register 13
 252              	 
 253 000a 5DF8047B 	 ldr r7,[sp],#4
 254              	.LCFI23:
 255              	 .cfi_restore 7
 256              	 .cfi_def_cfa_offset 0
 257 000e 7047     	 bx lr
 258              	.L26:
 259              	 .align 2
 260              	.L25:
 261 0010 00000000 	 .word rxConfig_System
 262              	 .cfi_endproc
 263              	.LFE560:
 265              	 .section .bss.setpointRate,"aw",%nobits
 266              	 .align 2
 269              	setpointRate:
 270 0000 00000000 	 .space 12
 270      00000000 
 270      00000000 
 271              	 .section .bss.rcDeflection,"aw",%nobits
 272              	 .align 2
 275              	rcDeflection:
 276 0000 00000000 	 .space 12
 276      00000000 
 276      00000000 
 277              	 .section .bss.rcDeflectionAbs,"aw",%nobits
 278              	 .align 2
 281              	rcDeflectionAbs:
 282 0000 00000000 	 .space 12
 282      00000000 
 282      00000000 
 283              	 .section .bss.throttlePIDAttenuation,"aw",%nobits
 284              	 .align 2
 287              	throttlePIDAttenuation:
 288 0000 00000000 	 .space 4
 289              	 .section .bss.reverseMotors,"aw",%nobits
 292              	reverseMotors:
 293 0000 00       	 .space 1
 294              	 .section .bss.applyRates,"aw",%nobits
 295              	 .align 2
 298              	applyRates:
 299 0000 00000000 	 .space 4
 300              	 .comm currentRxRefreshRate,2,2
 301              	 .comm interpolationChannels,1,1
 302              	 .section .bss.rcSmoothingData,"aw",%nobits
 303              	 .align 2
 306              	rcSmoothingData:
 307 0000 00000000 	 .space 165
 307      00000000 
 307      00000000 
 307      00000000 
 307      00000000 
 308 00a5 000000   	 .section .text.getSetpointRate,"ax",%progbits
 309              	 .align 2
 310              	 .global getSetpointRate
 311              	 .thumb
 312              	 .thumb_func
 314              	getSetpointRate:
 315              	.LFB577:
 316              	 .file 4 "../cleanflight/src/main/fc/fc_rc.c"
   1:../cleanflight/src/main/fc/fc_rc.c **** /*
   2:../cleanflight/src/main/fc/fc_rc.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/fc/fc_rc.c ****  *
   4:../cleanflight/src/main/fc/fc_rc.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/fc/fc_rc.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/fc/fc_rc.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/fc/fc_rc.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/fc/fc_rc.c ****  * any later version.
   9:../cleanflight/src/main/fc/fc_rc.c ****  *
  10:../cleanflight/src/main/fc/fc_rc.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/fc/fc_rc.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/fc/fc_rc.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/fc/fc_rc.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/fc/fc_rc.c ****  *
  15:../cleanflight/src/main/fc/fc_rc.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/fc/fc_rc.c ****  * along with this software.
  17:../cleanflight/src/main/fc/fc_rc.c ****  *
  18:../cleanflight/src/main/fc/fc_rc.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/fc/fc_rc.c ****  */
  20:../cleanflight/src/main/fc/fc_rc.c **** 
  21:../cleanflight/src/main/fc/fc_rc.c **** #include <stdbool.h>
  22:../cleanflight/src/main/fc/fc_rc.c **** #include <stdint.h>
  23:../cleanflight/src/main/fc/fc_rc.c **** #include <math.h>
  24:../cleanflight/src/main/fc/fc_rc.c **** 
  25:../cleanflight/src/main/fc/fc_rc.c **** #include "platform.h"
  26:../cleanflight/src/main/fc/fc_rc.c **** 
  27:../cleanflight/src/main/fc/fc_rc.c **** #include "build/debug.h"
  28:../cleanflight/src/main/fc/fc_rc.c **** 
  29:../cleanflight/src/main/fc/fc_rc.c **** #include "common/axis.h"
  30:../cleanflight/src/main/fc/fc_rc.c **** #include "common/maths.h"
  31:../cleanflight/src/main/fc/fc_rc.c **** #include "common/utils.h"
  32:../cleanflight/src/main/fc/fc_rc.c **** 
  33:../cleanflight/src/main/fc/fc_rc.c **** #include "config/feature.h"
  34:../cleanflight/src/main/fc/fc_rc.c **** 
  35:../cleanflight/src/main/fc/fc_rc.c **** #include "fc/config.h"
  36:../cleanflight/src/main/fc/fc_rc.c **** #include "fc/controlrate_profile.h"
  37:../cleanflight/src/main/fc/fc_rc.c **** #include "drivers/time.h"
  38:../cleanflight/src/main/fc/fc_rc.c **** #include "fc/fc_core.h"
  39:../cleanflight/src/main/fc/fc_rc.c **** #include "fc/fc_rc.h"
  40:../cleanflight/src/main/fc/fc_rc.c **** #include "fc/rc_controls.h"
  41:../cleanflight/src/main/fc/fc_rc.c **** #include "fc/rc_modes.h"
  42:../cleanflight/src/main/fc/fc_rc.c **** #include "fc/runtime_config.h"
  43:../cleanflight/src/main/fc/fc_rc.c **** 
  44:../cleanflight/src/main/fc/fc_rc.c **** #include "flight/failsafe.h"
  45:../cleanflight/src/main/fc/fc_rc.c **** #include "flight/imu.h"
  46:../cleanflight/src/main/fc/fc_rc.c **** #include "flight/gps_rescue.h"
  47:../cleanflight/src/main/fc/fc_rc.c **** #include "flight/pid.h"
  48:../cleanflight/src/main/fc/fc_rc.c **** #include "pg/rx.h"
  49:../cleanflight/src/main/fc/fc_rc.c **** #include "rx/rx.h"
  50:../cleanflight/src/main/fc/fc_rc.c **** 
  51:../cleanflight/src/main/fc/fc_rc.c **** 
  52:../cleanflight/src/main/fc/fc_rc.c **** #include "sensors/battery.h"
  53:../cleanflight/src/main/fc/fc_rc.c **** 
  54:../cleanflight/src/main/fc/fc_rc.c **** typedef float (applyRatesFn)(const int axis, float rcCommandf, const float rcCommandfAbs);
  55:../cleanflight/src/main/fc/fc_rc.c **** 
  56:../cleanflight/src/main/fc/fc_rc.c **** static float setpointRate[3], rcDeflection[3], rcDeflectionAbs[3];
  57:../cleanflight/src/main/fc/fc_rc.c **** static float throttlePIDAttenuation;
  58:../cleanflight/src/main/fc/fc_rc.c **** static bool reverseMotors = false;
  59:../cleanflight/src/main/fc/fc_rc.c **** static applyRatesFn *applyRates;
  60:../cleanflight/src/main/fc/fc_rc.c **** uint16_t currentRxRefreshRate;
  61:../cleanflight/src/main/fc/fc_rc.c **** 
  62:../cleanflight/src/main/fc/fc_rc.c **** FAST_RAM_ZERO_INIT uint8_t interpolationChannels;
  63:../cleanflight/src/main/fc/fc_rc.c **** 
  64:../cleanflight/src/main/fc/fc_rc.c **** enum {
  65:../cleanflight/src/main/fc/fc_rc.c ****     ROLL_FLAG = 1 << ROLL,
  66:../cleanflight/src/main/fc/fc_rc.c ****     PITCH_FLAG = 1 << PITCH,
  67:../cleanflight/src/main/fc/fc_rc.c ****     YAW_FLAG = 1 << YAW,
  68:../cleanflight/src/main/fc/fc_rc.c ****     THROTTLE_FLAG = 1 << THROTTLE,
  69:../cleanflight/src/main/fc/fc_rc.c **** };
  70:../cleanflight/src/main/fc/fc_rc.c **** 
  71:../cleanflight/src/main/fc/fc_rc.c **** #ifdef USE_RC_SMOOTHING_FILTER
  72:../cleanflight/src/main/fc/fc_rc.c **** #define RC_SMOOTHING_IDENTITY_FREQUENCY         80    // Used in the formula to convert a BIQUAD cu
  73:../cleanflight/src/main/fc/fc_rc.c **** #define RC_SMOOTHING_FILTER_STARTUP_DELAY_MS    5000  // Time to wait after power to let the PID lo
  74:../cleanflight/src/main/fc/fc_rc.c **** #define RC_SMOOTHING_FILTER_TRAINING_SAMPLES    50    // Number of rx frame rate samples to average
  75:../cleanflight/src/main/fc/fc_rc.c **** #define RC_SMOOTHING_FILTER_TRAINING_DELAY_MS   1000  // Additional time to wait after receiving fi
  76:../cleanflight/src/main/fc/fc_rc.c **** #define RC_SMOOTHING_FILTER_RETRAINING_DELAY_MS 2000  // Guard time to wait after retraining to pre
  77:../cleanflight/src/main/fc/fc_rc.c **** #define RC_SMOOTHING_RX_RATE_CHANGE_PERCENT     20    // Look for samples varying this much from th
  78:../cleanflight/src/main/fc/fc_rc.c **** #define RC_SMOOTHING_RX_RATE_MIN_US             1000  // 1ms
  79:../cleanflight/src/main/fc/fc_rc.c **** #define RC_SMOOTHING_RX_RATE_MAX_US             50000 // 50ms or 20hz
  80:../cleanflight/src/main/fc/fc_rc.c **** 
  81:../cleanflight/src/main/fc/fc_rc.c **** static FAST_RAM_ZERO_INIT rcSmoothingFilter_t rcSmoothingData;
  82:../cleanflight/src/main/fc/fc_rc.c **** #endif // USE_RC_SMOOTHING_FILTER
  83:../cleanflight/src/main/fc/fc_rc.c **** 
  84:../cleanflight/src/main/fc/fc_rc.c **** float getSetpointRate(int axis)
  85:../cleanflight/src/main/fc/fc_rc.c **** {
 317              	 .loc 4 85 0
 318              	 .cfi_startproc
 319              	 
 320              	 
 321              	 
 322 0000 80B4     	 push {r7}
 323              	.LCFI24:
 324              	 .cfi_def_cfa_offset 4
 325              	 .cfi_offset 7,-4
 326 0002 83B0     	 sub sp,sp,#12
 327              	.LCFI25:
 328              	 .cfi_def_cfa_offset 16
 329 0004 00AF     	 add r7,sp,#0
 330              	.LCFI26:
 331              	 .cfi_def_cfa_register 7
 332 0006 7860     	 str r0,[r7,#4]
  86:../cleanflight/src/main/fc/fc_rc.c ****     return setpointRate[axis];
 333              	 .loc 4 86 0
 334 0008 054A     	 ldr r2,.L29
 335 000a 7B68     	 ldr r3,[r7,#4]
 336 000c 9B00     	 lsls r3,r3,#2
 337 000e 1344     	 add r3,r3,r2
 338 0010 1B68     	 ldr r3,[r3]
  87:../cleanflight/src/main/fc/fc_rc.c **** }
 339              	 .loc 4 87 0
 340 0012 1846     	 mov r0,r3
 341 0014 0C37     	 adds r7,r7,#12
 342              	.LCFI27:
 343              	 .cfi_def_cfa_offset 4
 344 0016 BD46     	 mov sp,r7
 345              	.LCFI28:
 346              	 .cfi_def_cfa_register 13
 347              	 
 348 0018 5DF8047B 	 ldr r7,[sp],#4
 349              	.LCFI29:
 350              	 .cfi_restore 7
 351              	 .cfi_def_cfa_offset 0
 352 001c 7047     	 bx lr
 353              	.L30:
 354 001e 00BF     	 .align 2
 355              	.L29:
 356 0020 00000000 	 .word setpointRate
 357              	 .cfi_endproc
 358              	.LFE577:
 360              	 .section .text.getRcDeflection,"ax",%progbits
 361              	 .align 2
 362              	 .global getRcDeflection
 363              	 .thumb
 364              	 .thumb_func
 366              	getRcDeflection:
 367              	.LFB578:
  88:../cleanflight/src/main/fc/fc_rc.c **** 
  89:../cleanflight/src/main/fc/fc_rc.c **** float getRcDeflection(int axis)
  90:../cleanflight/src/main/fc/fc_rc.c **** {
 368              	 .loc 4 90 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372              	 
 373 0000 80B4     	 push {r7}
 374              	.LCFI30:
 375              	 .cfi_def_cfa_offset 4
 376              	 .cfi_offset 7,-4
 377 0002 83B0     	 sub sp,sp,#12
 378              	.LCFI31:
 379              	 .cfi_def_cfa_offset 16
 380 0004 00AF     	 add r7,sp,#0
 381              	.LCFI32:
 382              	 .cfi_def_cfa_register 7
 383 0006 7860     	 str r0,[r7,#4]
  91:../cleanflight/src/main/fc/fc_rc.c ****     return rcDeflection[axis];
 384              	 .loc 4 91 0
 385 0008 054A     	 ldr r2,.L33
 386 000a 7B68     	 ldr r3,[r7,#4]
 387 000c 9B00     	 lsls r3,r3,#2
 388 000e 1344     	 add r3,r3,r2
 389 0010 1B68     	 ldr r3,[r3]
  92:../cleanflight/src/main/fc/fc_rc.c **** }
 390              	 .loc 4 92 0
 391 0012 1846     	 mov r0,r3
 392 0014 0C37     	 adds r7,r7,#12
 393              	.LCFI33:
 394              	 .cfi_def_cfa_offset 4
 395 0016 BD46     	 mov sp,r7
 396              	.LCFI34:
 397              	 .cfi_def_cfa_register 13
 398              	 
 399 0018 5DF8047B 	 ldr r7,[sp],#4
 400              	.LCFI35:
 401              	 .cfi_restore 7
 402              	 .cfi_def_cfa_offset 0
 403 001c 7047     	 bx lr
 404              	.L34:
 405 001e 00BF     	 .align 2
 406              	.L33:
 407 0020 00000000 	 .word rcDeflection
 408              	 .cfi_endproc
 409              	.LFE578:
 411              	 .section .text.getRcDeflectionAbs,"ax",%progbits
 412              	 .align 2
 413              	 .global getRcDeflectionAbs
 414              	 .thumb
 415              	 .thumb_func
 417              	getRcDeflectionAbs:
 418              	.LFB579:
  93:../cleanflight/src/main/fc/fc_rc.c **** 
  94:../cleanflight/src/main/fc/fc_rc.c **** float getRcDeflectionAbs(int axis)
  95:../cleanflight/src/main/fc/fc_rc.c **** {
 419              	 .loc 4 95 0
 420              	 .cfi_startproc
 421              	 
 422              	 
 423              	 
 424 0000 80B4     	 push {r7}
 425              	.LCFI36:
 426              	 .cfi_def_cfa_offset 4
 427              	 .cfi_offset 7,-4
 428 0002 83B0     	 sub sp,sp,#12
 429              	.LCFI37:
 430              	 .cfi_def_cfa_offset 16
 431 0004 00AF     	 add r7,sp,#0
 432              	.LCFI38:
 433              	 .cfi_def_cfa_register 7
 434 0006 7860     	 str r0,[r7,#4]
  96:../cleanflight/src/main/fc/fc_rc.c ****     return rcDeflectionAbs[axis];
 435              	 .loc 4 96 0
 436 0008 054A     	 ldr r2,.L37
 437 000a 7B68     	 ldr r3,[r7,#4]
 438 000c 9B00     	 lsls r3,r3,#2
 439 000e 1344     	 add r3,r3,r2
 440 0010 1B68     	 ldr r3,[r3]
  97:../cleanflight/src/main/fc/fc_rc.c **** }
 441              	 .loc 4 97 0
 442 0012 1846     	 mov r0,r3
 443 0014 0C37     	 adds r7,r7,#12
 444              	.LCFI39:
 445              	 .cfi_def_cfa_offset 4
 446 0016 BD46     	 mov sp,r7
 447              	.LCFI40:
 448              	 .cfi_def_cfa_register 13
 449              	 
 450 0018 5DF8047B 	 ldr r7,[sp],#4
 451              	.LCFI41:
 452              	 .cfi_restore 7
 453              	 .cfi_def_cfa_offset 0
 454 001c 7047     	 bx lr
 455              	.L38:
 456 001e 00BF     	 .align 2
 457              	.L37:
 458 0020 00000000 	 .word rcDeflectionAbs
 459              	 .cfi_endproc
 460              	.LFE579:
 462              	 .section .text.getThrottlePIDAttenuation,"ax",%progbits
 463              	 .align 2
 464              	 .global getThrottlePIDAttenuation
 465              	 .thumb
 466              	 .thumb_func
 468              	getThrottlePIDAttenuation:
 469              	.LFB580:
  98:../cleanflight/src/main/fc/fc_rc.c **** 
  99:../cleanflight/src/main/fc/fc_rc.c **** float getThrottlePIDAttenuation(void)
 100:../cleanflight/src/main/fc/fc_rc.c **** {
 470              	 .loc 4 100 0
 471              	 .cfi_startproc
 472              	 
 473              	 
 474              	 
 475 0000 80B4     	 push {r7}
 476              	.LCFI42:
 477              	 .cfi_def_cfa_offset 4
 478              	 .cfi_offset 7,-4
 479 0002 00AF     	 add r7,sp,#0
 480              	.LCFI43:
 481              	 .cfi_def_cfa_register 7
 101:../cleanflight/src/main/fc/fc_rc.c ****     return throttlePIDAttenuation;
 482              	 .loc 4 101 0
 483 0004 034B     	 ldr r3,.L41
 484 0006 1B68     	 ldr r3,[r3]
 102:../cleanflight/src/main/fc/fc_rc.c **** }
 485              	 .loc 4 102 0
 486 0008 1846     	 mov r0,r3
 487 000a BD46     	 mov sp,r7
 488              	.LCFI44:
 489              	 .cfi_def_cfa_register 13
 490              	 
 491 000c 5DF8047B 	 ldr r7,[sp],#4
 492              	.LCFI45:
 493              	 .cfi_restore 7
 494              	 .cfi_def_cfa_offset 0
 495 0010 7047     	 bx lr
 496              	.L42:
 497 0012 00BF     	 .align 2
 498              	.L41:
 499 0014 00000000 	 .word throttlePIDAttenuation
 500              	 .cfi_endproc
 501              	.LFE580:
 503              	 .section .bss.lookupThrottleRC,"aw",%nobits
 504              	 .align 2
 507              	lookupThrottleRC:
 508 0000 00000000 	 .space 24
 508      00000000 
 508      00000000 
 508      00000000 
 508      00000000 
 509              	 .section .text.rcLookupThrottle,"ax",%progbits
 510              	 .align 2
 511              	 .thumb
 512              	 .thumb_func
 514              	rcLookupThrottle:
 515              	.LFB581:
 103:../cleanflight/src/main/fc/fc_rc.c **** 
 104:../cleanflight/src/main/fc/fc_rc.c **** #define THROTTLE_LOOKUP_LENGTH 12
 105:../cleanflight/src/main/fc/fc_rc.c **** static int16_t lookupThrottleRC[THROTTLE_LOOKUP_LENGTH];    // lookup table for expo & mid THROTTLE
 106:../cleanflight/src/main/fc/fc_rc.c **** 
 107:../cleanflight/src/main/fc/fc_rc.c **** static int16_t rcLookupThrottle(int32_t tmp)
 108:../cleanflight/src/main/fc/fc_rc.c **** {
 516              	 .loc 4 108 0
 517              	 .cfi_startproc
 518              	 
 519              	 
 520              	 
 521 0000 90B4     	 push {r4,r7}
 522              	.LCFI46:
 523              	 .cfi_def_cfa_offset 8
 524              	 .cfi_offset 4,-8
 525              	 .cfi_offset 7,-4
 526 0002 84B0     	 sub sp,sp,#16
 527              	.LCFI47:
 528              	 .cfi_def_cfa_offset 24
 529 0004 00AF     	 add r7,sp,#0
 530              	.LCFI48:
 531              	 .cfi_def_cfa_register 7
 532 0006 7860     	 str r0,[r7,#4]
 109:../cleanflight/src/main/fc/fc_rc.c ****     const int32_t tmp2 = tmp / 100;
 533              	 .loc 4 109 0
 534 0008 7B68     	 ldr r3,[r7,#4]
 535 000a 184A     	 ldr r2,.L45
 536 000c 82FB0312 	 smull r1,r2,r2,r3
 537 0010 5211     	 asrs r2,r2,#5
 538 0012 DB17     	 asrs r3,r3,#31
 539 0014 D31A     	 subs r3,r2,r3
 540 0016 FB60     	 str r3,[r7,#12]
 110:../cleanflight/src/main/fc/fc_rc.c ****     // [0;1000] -> expo -> [MINTHROTTLE;MAXTHROTTLE]
 111:../cleanflight/src/main/fc/fc_rc.c ****     return lookupThrottleRC[tmp2] + (tmp - tmp2 * 100) * (lookupThrottleRC[tmp2 + 1] - lookupThrott
 541              	 .loc 4 111 0
 542 0018 154A     	 ldr r2,.L45+4
 543 001a FB68     	 ldr r3,[r7,#12]
 544 001c 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 545 0020 9AB2     	 uxth r2,r3
 546 0022 FB68     	 ldr r3,[r7,#12]
 547 0024 6FF06301 	 mvn r1,#99
 548 0028 01FB03F1 	 mul r1,r1,r3
 549 002c 7B68     	 ldr r3,[r7,#4]
 550 002e 0B44     	 add r3,r3,r1
 551 0030 F968     	 ldr r1,[r7,#12]
 552 0032 0131     	 adds r1,r1,#1
 553 0034 0E48     	 ldr r0,.L45+4
 554 0036 30F81110 	 ldrh r1,[r0,r1,lsl#1]
 555 003a 08B2     	 sxth r0,r1
 556 003c 0C4C     	 ldr r4,.L45+4
 557 003e F968     	 ldr r1,[r7,#12]
 558 0040 34F81110 	 ldrh r1,[r4,r1,lsl#1]
 559 0044 09B2     	 sxth r1,r1
 560 0046 411A     	 subs r1,r0,r1
 561 0048 01FB03F3 	 mul r3,r1,r3
 562 004c 0749     	 ldr r1,.L45
 563 004e 81FB0301 	 smull r0,r1,r1,r3
 564 0052 4911     	 asrs r1,r1,#5
 565 0054 DB17     	 asrs r3,r3,#31
 566 0056 CB1A     	 subs r3,r1,r3
 567 0058 9BB2     	 uxth r3,r3
 568 005a 1344     	 add r3,r3,r2
 569 005c 9BB2     	 uxth r3,r3
 570 005e 9BB2     	 uxth r3,r3
 571 0060 1BB2     	 sxth r3,r3
 112:../cleanflight/src/main/fc/fc_rc.c **** }
 572              	 .loc 4 112 0
 573 0062 1846     	 mov r0,r3
 574 0064 1037     	 adds r7,r7,#16
 575              	.LCFI49:
 576              	 .cfi_def_cfa_offset 8
 577 0066 BD46     	 mov sp,r7
 578              	.LCFI50:
 579              	 .cfi_def_cfa_register 13
 580              	 
 581 0068 90BC     	 pop {r4,r7}
 582              	.LCFI51:
 583              	 .cfi_restore 7
 584              	 .cfi_restore 4
 585              	 .cfi_def_cfa_offset 0
 586 006a 7047     	 bx lr
 587              	.L46:
 588              	 .align 2
 589              	.L45:
 590 006c 1F85EB51 	 .word 1374389535
 591 0070 00000000 	 .word lookupThrottleRC
 592              	 .cfi_endproc
 593              	.LFE581:
 595              	 .section .text.applyBetaflightRates,"ax",%progbits
 596              	 .align 2
 597              	 .global applyBetaflightRates
 598              	 .thumb
 599              	 .thumb_func
 601              	applyBetaflightRates:
 602              	.LFB582:
 113:../cleanflight/src/main/fc/fc_rc.c **** 
 114:../cleanflight/src/main/fc/fc_rc.c **** #define SETPOINT_RATE_LIMIT 1998.0f
 115:../cleanflight/src/main/fc/fc_rc.c **** #define RC_RATE_INCREMENTAL 14.54f
 116:../cleanflight/src/main/fc/fc_rc.c **** 
 117:../cleanflight/src/main/fc/fc_rc.c **** float applyBetaflightRates(const int axis, float rcCommandf, const float rcCommandfAbs)
 118:../cleanflight/src/main/fc/fc_rc.c **** {
 603              	 .loc 4 118 0
 604              	 .cfi_startproc
 605              	 
 606              	 
 607 0000 80B5     	 push {r7,lr}
 608              	.LCFI52:
 609              	 .cfi_def_cfa_offset 8
 610              	 .cfi_offset 7,-8
 611              	 .cfi_offset 14,-4
 612 0002 88B0     	 sub sp,sp,#32
 613              	.LCFI53:
 614              	 .cfi_def_cfa_offset 40
 615 0004 00AF     	 add r7,sp,#0
 616              	.LCFI54:
 617              	 .cfi_def_cfa_register 7
 618 0006 F860     	 str r0,[r7,#12]
 619 0008 B960     	 str r1,[r7,#8]
 620 000a 7A60     	 str r2,[r7,#4]
 119:../cleanflight/src/main/fc/fc_rc.c ****     if (currentControlRateProfile->rcExpo[axis]) {
 621              	 .loc 4 119 0
 622 000c 524B     	 ldr r3,.L54
 623 000e 1A68     	 ldr r2,[r3]
 624 0010 FB68     	 ldr r3,[r7,#12]
 625 0012 1344     	 add r3,r3,r2
 626 0014 9B79     	 ldrb r3,[r3,#6]
 627 0016 002B     	 cmp r3,#0
 628 0018 2ED0     	 beq .L48
 629              	.LBB2:
 120:../cleanflight/src/main/fc/fc_rc.c ****         const float expof = currentControlRateProfile->rcExpo[axis] / 100.0f;
 630              	 .loc 4 120 0
 631 001a 4F4B     	 ldr r3,.L54
 632 001c 1A68     	 ldr r2,[r3]
 633 001e FB68     	 ldr r3,[r7,#12]
 634 0020 1344     	 add r3,r3,r2
 635 0022 9B79     	 ldrb r3,[r3,#6]
 636 0024 07EE903A 	 fmsr s15,r3
 637 0028 F8EEE77A 	 fsitos s15,s15
 638 002c 9FED4B7A 	 flds s14,.L54+4
 639 0030 C7EE877A 	 fdivs s15,s15,s14
 640 0034 C7ED057A 	 fsts s15,[r7,#20]
 121:../cleanflight/src/main/fc/fc_rc.c ****         rcCommandf = rcCommandf * power3(rcCommandfAbs) * expof + rcCommandf * (1 - expof);
 641              	 .loc 4 121 0
 642 0038 97ED017A 	 flds s14,[r7,#4]
 643 003c D7ED017A 	 flds s15,[r7,#4]
 644 0040 27EE277A 	 fmuls s14,s14,s15
 645 0044 D7ED017A 	 flds s15,[r7,#4]
 646 0048 27EE277A 	 fmuls s14,s14,s15
 647 004c D7ED027A 	 flds s15,[r7,#8]
 648 0050 27EE277A 	 fmuls s14,s14,s15
 649 0054 D7ED057A 	 flds s15,[r7,#20]
 650 0058 27EE277A 	 fmuls s14,s14,s15
 651 005c F7EE006A 	 fconsts s13,#112
 652 0060 D7ED057A 	 flds s15,[r7,#20]
 653 0064 76EEE76A 	 fsubs s13,s13,s15
 654 0068 D7ED027A 	 flds s15,[r7,#8]
 655 006c 66EEA77A 	 fmuls s15,s13,s15
 656 0070 77EE277A 	 fadds s15,s14,s15
 657 0074 C7ED027A 	 fsts s15,[r7,#8]
 658              	.L48:
 659              	.LBE2:
 122:../cleanflight/src/main/fc/fc_rc.c ****     }
 123:../cleanflight/src/main/fc/fc_rc.c **** 
 124:../cleanflight/src/main/fc/fc_rc.c ****     float rcRate = currentControlRateProfile->rcRates[axis] / 100.0f;
 660              	 .loc 4 124 0
 661 0078 374B     	 ldr r3,.L54
 662 007a 1A68     	 ldr r2,[r3]
 663 007c FB68     	 ldr r3,[r7,#12]
 664 007e 1344     	 add r3,r3,r2
 665 0080 DB78     	 ldrb r3,[r3,#3]
 666 0082 07EE903A 	 fmsr s15,r3
 667 0086 F8EEE77A 	 fsitos s15,s15
 668 008a 9FED347A 	 flds s14,.L54+4
 669 008e C7EE877A 	 fdivs s15,s15,s14
 670 0092 C7ED077A 	 fsts s15,[r7,#28]
 125:../cleanflight/src/main/fc/fc_rc.c ****     if (rcRate > 2.0f) {
 671              	 .loc 4 125 0
 672 0096 D7ED077A 	 flds s15,[r7,#28]
 673 009a B0EE007A 	 fconsts s14,#0
 674 009e F4EEC77A 	 fcmpes s15,s14
 675 00a2 F1EE10FA 	 fmstat
 676 00a6 0FDD     	 ble .L49
 126:../cleanflight/src/main/fc/fc_rc.c ****         rcRate += RC_RATE_INCREMENTAL * (rcRate - 2.0f);
 677              	 .loc 4 126 0
 678 00a8 D7ED077A 	 flds s15,[r7,#28]
 679 00ac B0EE007A 	 fconsts s14,#0
 680 00b0 77EEC77A 	 fsubs s15,s15,s14
 681 00b4 9FED2A7A 	 flds s14,.L54+8
 682 00b8 67EE877A 	 fmuls s15,s15,s14
 683 00bc 97ED077A 	 flds s14,[r7,#28]
 684 00c0 77EE277A 	 fadds s15,s14,s15
 685 00c4 C7ED077A 	 fsts s15,[r7,#28]
 686              	.L49:
 127:../cleanflight/src/main/fc/fc_rc.c ****     }
 128:../cleanflight/src/main/fc/fc_rc.c ****     float angleRate = 200.0f * rcRate * rcCommandf;
 687              	 .loc 4 128 0
 688 00c8 D7ED077A 	 flds s15,[r7,#28]
 689 00cc 9FED257A 	 flds s14,.L54+12
 690 00d0 27EE877A 	 fmuls s14,s15,s14
 691 00d4 D7ED027A 	 flds s15,[r7,#8]
 692 00d8 67EE277A 	 fmuls s15,s14,s15
 693 00dc C7ED067A 	 fsts s15,[r7,#24]
 129:../cleanflight/src/main/fc/fc_rc.c ****     if (currentControlRateProfile->rates[axis]) {
 694              	 .loc 4 129 0
 695 00e0 1D4B     	 ldr r3,.L54
 696 00e2 1A68     	 ldr r2,[r3]
 697 00e4 FB68     	 ldr r3,[r7,#12]
 698 00e6 1344     	 add r3,r3,r2
 699 00e8 0833     	 adds r3,r3,#8
 700 00ea 5B78     	 ldrb r3,[r3,#1]
 701 00ec 002B     	 cmp r3,#0
 702 00ee 2DD0     	 beq .L51
 703              	.LBB3:
 130:../cleanflight/src/main/fc/fc_rc.c ****         const float rcSuperfactor = 1.0f / (constrainf(1.0f - (rcCommandfAbs * (currentControlRateP
 704              	 .loc 4 130 0
 705 00f0 194B     	 ldr r3,.L54
 706 00f2 1A68     	 ldr r2,[r3]
 707 00f4 FB68     	 ldr r3,[r7,#12]
 708 00f6 1344     	 add r3,r3,r2
 709 00f8 0833     	 adds r3,r3,#8
 710 00fa 5B78     	 ldrb r3,[r3,#1]
 711 00fc 07EE903A 	 fmsr s15,r3
 712 0100 F8EEE77A 	 fsitos s15,s15
 713 0104 9FED157A 	 flds s14,.L54+4
 714 0108 87EE877A 	 fdivs s14,s15,s14
 715 010c D7ED017A 	 flds s15,[r7,#4]
 716 0110 67EE277A 	 fmuls s15,s14,s15
 717 0114 B7EE007A 	 fconsts s14,#112
 718 0118 77EE677A 	 fsubs s15,s14,s15
 719 011c B0EE670A 	 fcpys s0,s15
 720 0120 DFED110A 	 flds s1,.L54+16
 721 0124 B7EE001A 	 fconsts s2,#112
 722 0128 FFF7FEFF 	 bl constrainf
 723 012c B0EE407A 	 fcpys s14,s0
 724 0130 F7EE007A 	 fconsts s15,#112
 725 0134 C7EE877A 	 fdivs s15,s15,s14
 726 0138 C7ED047A 	 fsts s15,[r7,#16]
 131:../cleanflight/src/main/fc/fc_rc.c ****         angleRate *= rcSuperfactor;
 727              	 .loc 4 131 0
 728 013c 97ED067A 	 flds s14,[r7,#24]
 729 0140 D7ED047A 	 flds s15,[r7,#16]
 730 0144 67EE277A 	 fmuls s15,s14,s15
 731 0148 C7ED067A 	 fsts s15,[r7,#24]
 732              	.L51:
 733              	.LBE3:
 132:../cleanflight/src/main/fc/fc_rc.c ****     }
 133:../cleanflight/src/main/fc/fc_rc.c **** 
 134:../cleanflight/src/main/fc/fc_rc.c ****     return angleRate;
 734              	 .loc 4 134 0
 735 014c BB69     	 ldr r3,[r7,#24]
 135:../cleanflight/src/main/fc/fc_rc.c **** }
 736              	 .loc 4 135 0
 737 014e 1846     	 mov r0,r3
 738 0150 2037     	 adds r7,r7,#32
 739              	.LCFI55:
 740              	 .cfi_def_cfa_offset 8
 741 0152 BD46     	 mov sp,r7
 742              	.LCFI56:
 743              	 .cfi_def_cfa_register 13
 744              	 
 745 0154 80BD     	 pop {r7,pc}
 746              	.L55:
 747 0156 00BF     	 .align 2
 748              	.L54:
 749 0158 00000000 	 .word currentControlRateProfile
 750 015c 0000C842 	 .word 1120403456
 751 0160 D7A36841 	 .word 1097376727
 752 0164 00004843 	 .word 1128792064
 753 0168 0AD7233C 	 .word 1008981770
 754              	 .cfi_endproc
 755              	.LFE582:
 757              	 .section .text.applyRaceFlightRates,"ax",%progbits
 758              	 .align 2
 759              	 .global applyRaceFlightRates
 760              	 .thumb
 761              	 .thumb_func
 763              	applyRaceFlightRates:
 764              	.LFB583:
 136:../cleanflight/src/main/fc/fc_rc.c **** 
 137:../cleanflight/src/main/fc/fc_rc.c **** float applyRaceFlightRates(const int axis, float rcCommandf, const float rcCommandfAbs)
 138:../cleanflight/src/main/fc/fc_rc.c **** {
 765              	 .loc 4 138 0
 766              	 .cfi_startproc
 767              	 
 768              	 
 769              	 
 770 0000 80B4     	 push {r7}
 771              	.LCFI57:
 772              	 .cfi_def_cfa_offset 4
 773              	 .cfi_offset 7,-4
 774 0002 87B0     	 sub sp,sp,#28
 775              	.LCFI58:
 776              	 .cfi_def_cfa_offset 32
 777 0004 00AF     	 add r7,sp,#0
 778              	.LCFI59:
 779              	 .cfi_def_cfa_register 7
 780 0006 F860     	 str r0,[r7,#12]
 781 0008 B960     	 str r1,[r7,#8]
 782 000a 7A60     	 str r2,[r7,#4]
 139:../cleanflight/src/main/fc/fc_rc.c ****     // -1.0 to 1.0 ranged and curved
 140:../cleanflight/src/main/fc/fc_rc.c ****     rcCommandf = ((1.0f + 0.01f * currentControlRateProfile->rcExpo[axis] * (rcCommandf * rcCommand
 783              	 .loc 4 140 0
 784 000c 2C4B     	 ldr r3,.L58
 785 000e 1A68     	 ldr r2,[r3]
 786 0010 FB68     	 ldr r3,[r7,#12]
 787 0012 1344     	 add r3,r3,r2
 788 0014 9B79     	 ldrb r3,[r3,#6]
 789 0016 07EE903A 	 fmsr s15,r3
 790 001a F8EEE77A 	 fsitos s15,s15
 791 001e 9FED297A 	 flds s14,.L58+4
 792 0022 27EE877A 	 fmuls s14,s15,s14
 793 0026 D7ED026A 	 flds s13,[r7,#8]
 794 002a D7ED027A 	 flds s15,[r7,#8]
 795 002e 66EEA77A 	 fmuls s15,s13,s15
 796 0032 F7EE006A 	 fconsts s13,#112
 797 0036 77EEE67A 	 fsubs s15,s15,s13
 798 003a 67EE277A 	 fmuls s15,s14,s15
 799 003e B7EE007A 	 fconsts s14,#112
 800 0042 77EE877A 	 fadds s15,s15,s14
 801 0046 97ED027A 	 flds s14,[r7,#8]
 802 004a 67EE277A 	 fmuls s15,s14,s15
 803 004e C7ED027A 	 fsts s15,[r7,#8]
 141:../cleanflight/src/main/fc/fc_rc.c ****     // convert to -2000 to 2000 range using acro+ modifier
 142:../cleanflight/src/main/fc/fc_rc.c ****     float angleRate = 10.0f * currentControlRateProfile->rcRates[axis] * rcCommandf;
 804              	 .loc 4 142 0
 805 0052 1B4B     	 ldr r3,.L58
 806 0054 1A68     	 ldr r2,[r3]
 807 0056 FB68     	 ldr r3,[r7,#12]
 808 0058 1344     	 add r3,r3,r2
 809 005a DB78     	 ldrb r3,[r3,#3]
 810 005c 07EE903A 	 fmsr s15,r3
 811 0060 F8EEE77A 	 fsitos s15,s15
 812 0064 B2EE047A 	 fconsts s14,#36
 813 0068 27EE877A 	 fmuls s14,s15,s14
 814 006c D7ED027A 	 flds s15,[r7,#8]
 815 0070 67EE277A 	 fmuls s15,s14,s15
 816 0074 C7ED057A 	 fsts s15,[r7,#20]
 143:../cleanflight/src/main/fc/fc_rc.c ****     angleRate = angleRate * (1 + rcCommandfAbs * (float)currentControlRateProfile->rates[axis] * 0.
 817              	 .loc 4 143 0
 818 0078 114B     	 ldr r3,.L58
 819 007a 1A68     	 ldr r2,[r3]
 820 007c FB68     	 ldr r3,[r7,#12]
 821 007e 1344     	 add r3,r3,r2
 822 0080 0833     	 adds r3,r3,#8
 823 0082 5B78     	 ldrb r3,[r3,#1]
 824 0084 07EE903A 	 fmsr s15,r3
 825 0088 B8EE677A 	 fuitos s14,s15
 826 008c D7ED017A 	 flds s15,[r7,#4]
 827 0090 67EE277A 	 fmuls s15,s14,s15
 828 0094 9FED0B7A 	 flds s14,.L58+4
 829 0098 67EE877A 	 fmuls s15,s15,s14
 830 009c B7EE007A 	 fconsts s14,#112
 831 00a0 77EE877A 	 fadds s15,s15,s14
 832 00a4 97ED057A 	 flds s14,[r7,#20]
 833 00a8 67EE277A 	 fmuls s15,s14,s15
 834 00ac C7ED057A 	 fsts s15,[r7,#20]
 144:../cleanflight/src/main/fc/fc_rc.c **** 
 145:../cleanflight/src/main/fc/fc_rc.c ****     return angleRate;
 835              	 .loc 4 145 0
 836 00b0 7B69     	 ldr r3,[r7,#20]
 146:../cleanflight/src/main/fc/fc_rc.c **** }
 837              	 .loc 4 146 0
 838 00b2 1846     	 mov r0,r3
 839 00b4 1C37     	 adds r7,r7,#28
 840              	.LCFI60:
 841              	 .cfi_def_cfa_offset 4
 842 00b6 BD46     	 mov sp,r7
 843              	.LCFI61:
 844              	 .cfi_def_cfa_register 13
 845              	 
 846 00b8 5DF8047B 	 ldr r7,[sp],#4
 847              	.LCFI62:
 848              	 .cfi_restore 7
 849              	 .cfi_def_cfa_offset 0
 850 00bc 7047     	 bx lr
 851              	.L59:
 852 00be 00BF     	 .align 2
 853              	.L58:
 854 00c0 00000000 	 .word currentControlRateProfile
 855 00c4 0AD7233C 	 .word 1008981770
 856              	 .cfi_endproc
 857              	.LFE583:
 859              	 .section .text.calculateSetpointRate,"ax",%progbits
 860              	 .align 2
 861              	 .thumb
 862              	 .thumb_func
 864              	calculateSetpointRate:
 865              	.LFB584:
 147:../cleanflight/src/main/fc/fc_rc.c **** 
 148:../cleanflight/src/main/fc/fc_rc.c **** static void calculateSetpointRate(int axis)
 149:../cleanflight/src/main/fc/fc_rc.c **** {
 866              	 .loc 4 149 0
 867              	 .cfi_startproc
 868              	 
 869              	 
 870 0000 80B5     	 push {r7,lr}
 871              	.LCFI63:
 872              	 .cfi_def_cfa_offset 8
 873              	 .cfi_offset 7,-8
 874              	 .cfi_offset 14,-4
 875 0002 86B0     	 sub sp,sp,#24
 876              	.LCFI64:
 877              	 .cfi_def_cfa_offset 32
 878 0004 00AF     	 add r7,sp,#0
 879              	.LCFI65:
 880              	 .cfi_def_cfa_register 7
 881 0006 7860     	 str r0,[r7,#4]
 150:../cleanflight/src/main/fc/fc_rc.c ****     float angleRate;
 151:../cleanflight/src/main/fc/fc_rc.c ****     
 152:../cleanflight/src/main/fc/fc_rc.c **** #ifdef USE_GPS_RESCUE
 153:../cleanflight/src/main/fc/fc_rc.c ****     if ((axis == FD_YAW) && FLIGHT_MODE(GPS_RESCUE_MODE)) {
 882              	 .loc 4 153 0
 883 0008 7B68     	 ldr r3,[r7,#4]
 884 000a 022B     	 cmp r3,#2
 885 000c 17D1     	 bne .L61
 886              	 .loc 4 153 0 is_stmt 0 discriminator 1
 887 000e 364B     	 ldr r3,.L69
 888 0010 1B88     	 ldrh r3,[r3]
 889 0012 03F40063 	 and r3,r3,#2048
 890 0016 002B     	 cmp r3,#0
 891 0018 11D0     	 beq .L61
 154:../cleanflight/src/main/fc/fc_rc.c ****         // If GPS Rescue is active then override the setpointRate used in the
 155:../cleanflight/src/main/fc/fc_rc.c ****         // pid controller with the value calculated from the desired heading logic.
 156:../cleanflight/src/main/fc/fc_rc.c ****         angleRate = gpsRescueGetYawRate();
 892              	 .loc 4 156 0 is_stmt 1
 893 001a FFF7FEFF 	 bl gpsRescueGetYawRate
 894 001e 7861     	 str r0,[r7,#20]
 157:../cleanflight/src/main/fc/fc_rc.c **** 
 158:../cleanflight/src/main/fc/fc_rc.c ****         // Treat the stick input as centered to avoid any stick deflection base modifications (like
 159:../cleanflight/src/main/fc/fc_rc.c ****         rcDeflection[axis] = 0;
 895              	 .loc 4 159 0
 896 0020 324A     	 ldr r2,.L69+4
 897 0022 7B68     	 ldr r3,[r7,#4]
 898 0024 9B00     	 lsls r3,r3,#2
 899 0026 1344     	 add r3,r3,r2
 900 0028 4FF00002 	 mov r2,#0
 901 002c 1A60     	 str r2,[r3]
 160:../cleanflight/src/main/fc/fc_rc.c ****         rcDeflectionAbs[axis] = 0;
 902              	 .loc 4 160 0
 903 002e 304A     	 ldr r2,.L69+8
 904 0030 7B68     	 ldr r3,[r7,#4]
 905 0032 9B00     	 lsls r3,r3,#2
 906 0034 1344     	 add r3,r3,r2
 907 0036 4FF00002 	 mov r2,#0
 908 003a 1A60     	 str r2,[r3]
 909 003c 30E0     	 b .L62
 910              	.L61:
 911              	.LBB4:
 161:../cleanflight/src/main/fc/fc_rc.c ****     } else
 162:../cleanflight/src/main/fc/fc_rc.c **** #endif
 163:../cleanflight/src/main/fc/fc_rc.c ****     {
 164:../cleanflight/src/main/fc/fc_rc.c ****         // scale rcCommandf to range [-1.0, 1.0]
 165:../cleanflight/src/main/fc/fc_rc.c ****         float rcCommandf = rcCommand[axis] / 500.0f;
 912              	 .loc 4 165 0
 913 003e 2D4A     	 ldr r2,.L69+12
 914 0040 7B68     	 ldr r3,[r7,#4]
 915 0042 9B00     	 lsls r3,r3,#2
 916 0044 1344     	 add r3,r3,r2
 917 0046 D3ED007A 	 flds s15,[r3]
 918 004a 9FED2B7A 	 flds s14,.L69+16
 919 004e C7EE877A 	 fdivs s15,s15,s14
 920 0052 C7ED047A 	 fsts s15,[r7,#16]
 166:../cleanflight/src/main/fc/fc_rc.c ****         rcDeflection[axis] = rcCommandf;
 921              	 .loc 4 166 0
 922 0056 254A     	 ldr r2,.L69+4
 923 0058 7B68     	 ldr r3,[r7,#4]
 924 005a 9B00     	 lsls r3,r3,#2
 925 005c 1344     	 add r3,r3,r2
 926 005e 3A69     	 ldr r2,[r7,#16]
 927 0060 1A60     	 str r2,[r3]
 928              	.LBB5:
 167:../cleanflight/src/main/fc/fc_rc.c ****         const float rcCommandfAbs = ABS(rcCommandf);
 929              	 .loc 4 167 0
 930 0062 3B69     	 ldr r3,[r7,#16]
 931 0064 FB60     	 str r3,[r7,#12]
 932 0066 D7ED037A 	 flds s15,[r7,#12]
 933 006a F5EEC07A 	 fcmpezs s15
 934 006e F1EE10FA 	 fmstat
 935 0072 02DD     	 ble .L68
 936              	 .loc 4 167 0 is_stmt 0 discriminator 1
 937 0074 D7ED037A 	 flds s15,[r7,#12]
 938 0078 03E0     	 b .L65
 939              	.L68:
 940              	 .loc 4 167 0 discriminator 2
 941 007a D7ED037A 	 flds s15,[r7,#12]
 942 007e F1EE677A 	 fnegs s15,s15
 943              	.L65:
 944              	.LBE5:
 945              	 .loc 4 167 0 discriminator 4
 946 0082 C7ED027A 	 fsts s15,[r7,#8]
 168:../cleanflight/src/main/fc/fc_rc.c ****         rcDeflectionAbs[axis] = rcCommandfAbs;
 947              	 .loc 4 168 0 is_stmt 1 discriminator 4
 948 0086 1A4A     	 ldr r2,.L69+8
 949 0088 7B68     	 ldr r3,[r7,#4]
 950 008a 9B00     	 lsls r3,r3,#2
 951 008c 1344     	 add r3,r3,r2
 952 008e BA68     	 ldr r2,[r7,#8]
 953 0090 1A60     	 str r2,[r3]
 169:../cleanflight/src/main/fc/fc_rc.c **** 
 170:../cleanflight/src/main/fc/fc_rc.c ****         angleRate = applyRates(axis, rcCommandf, rcCommandfAbs);
 954              	 .loc 4 170 0 discriminator 4
 955 0092 1A4B     	 ldr r3,.L69+20
 956 0094 1B68     	 ldr r3,[r3]
 957 0096 7868     	 ldr r0,[r7,#4]
 958 0098 3969     	 ldr r1,[r7,#16]
 959 009a BA68     	 ldr r2,[r7,#8]
 960 009c 9847     	 blx r3
 961 009e 7861     	 str r0,[r7,#20]
 962              	.L62:
 963              	.LBE4:
 171:../cleanflight/src/main/fc/fc_rc.c ****     }
 172:../cleanflight/src/main/fc/fc_rc.c ****     setpointRate[axis] = constrainf(angleRate, -SETPOINT_RATE_LIMIT, SETPOINT_RATE_LIMIT); // Rate 
 964              	 .loc 4 172 0
 965 00a0 97ED050A 	 flds s0,[r7,#20]
 966 00a4 DFED160A 	 flds s1,.L69+24
 967 00a8 9FED161A 	 flds s2,.L69+28
 968 00ac FFF7FEFF 	 bl constrainf
 969 00b0 F0EE407A 	 fcpys s15,s0
 970 00b4 144A     	 ldr r2,.L69+32
 971 00b6 7B68     	 ldr r3,[r7,#4]
 972 00b8 9B00     	 lsls r3,r3,#2
 973 00ba 1344     	 add r3,r3,r2
 974 00bc C3ED007A 	 fsts s15,[r3]
 173:../cleanflight/src/main/fc/fc_rc.c **** 
 174:../cleanflight/src/main/fc/fc_rc.c ****     DEBUG_SET(DEBUG_ANGLERATE, axis, angleRate);
 975              	 .loc 4 174 0
 976 00c0 124B     	 ldr r3,.L69+36
 977 00c2 1B78     	 ldrb r3,[r3]
 978 00c4 082B     	 cmp r3,#8
 979 00c6 0BD1     	 bne .L60
 980              	 .loc 4 174 0 is_stmt 0 discriminator 1
 981 00c8 D7ED057A 	 flds s15,[r7,#20]
 982 00cc FDEEE77A 	 ftosizs s15,s15
 983 00d0 C7ED007A 	 fsts s15,[r7]
 984 00d4 3B88     	 ldrh r3,[r7]
 985 00d6 99B2     	 uxth r1,r3
 986 00d8 0D4A     	 ldr r2,.L69+40
 987 00da 7B68     	 ldr r3,[r7,#4]
 988 00dc 22F81310 	 strh r1,[r2,r3,lsl#1]
 989              	.L60:
 175:../cleanflight/src/main/fc/fc_rc.c **** }
 990              	 .loc 4 175 0 is_stmt 1
 991 00e0 1837     	 adds r7,r7,#24
 992              	.LCFI66:
 993              	 .cfi_def_cfa_offset 8
 994 00e2 BD46     	 mov sp,r7
 995              	.LCFI67:
 996              	 .cfi_def_cfa_register 13
 997              	 
 998 00e4 80BD     	 pop {r7,pc}
 999              	.L70:
 1000 00e6 00BF     	 .align 2
 1001              	.L69:
 1002 00e8 00000000 	 .word flightModeFlags
 1003 00ec 00000000 	 .word rcDeflection
 1004 00f0 00000000 	 .word rcDeflectionAbs
 1005 00f4 00000000 	 .word rcCommand
 1006 00f8 0000FA43 	 .word 1140457472
 1007 00fc 00000000 	 .word applyRates
 1008 0100 00C0F9C4 	 .word -990265344
 1009 0104 00C0F944 	 .word 1157218304
 1010 0108 00000000 	 .word setpointRate
 1011 010c 00000000 	 .word debugMode
 1012 0110 00000000 	 .word debug
 1013              	 .cfi_endproc
 1014              	.LFE584:
 1016              	 .section .text.scaleRcCommandToFpvCamAngle,"ax",%progbits
 1017              	 .align 2
 1018              	 .thumb
 1019              	 .thumb_func
 1021              	scaleRcCommandToFpvCamAngle:
 1022              	.LFB585:
 176:../cleanflight/src/main/fc/fc_rc.c **** 
 177:../cleanflight/src/main/fc/fc_rc.c **** static void scaleRcCommandToFpvCamAngle(void)
 178:../cleanflight/src/main/fc/fc_rc.c **** {
 1023              	 .loc 4 178 0
 1024              	 .cfi_startproc
 1025              	 
 1026              	 
 1027 0000 80B5     	 push {r7,lr}
 1028              	.LCFI68:
 1029              	 .cfi_def_cfa_offset 8
 1030              	 .cfi_offset 7,-8
 1031              	 .cfi_offset 14,-4
 1032 0002 82B0     	 sub sp,sp,#8
 1033              	.LCFI69:
 1034              	 .cfi_def_cfa_offset 16
 1035 0004 00AF     	 add r7,sp,#0
 1036              	.LCFI70:
 1037              	 .cfi_def_cfa_register 7
 179:../cleanflight/src/main/fc/fc_rc.c ****     //recalculate sin/cos only when rxConfig()->fpvCamAngleDegrees changed
 180:../cleanflight/src/main/fc/fc_rc.c ****     static uint8_t lastFpvCamAngleDegrees = 0;
 181:../cleanflight/src/main/fc/fc_rc.c ****     static float cosFactor = 1.0;
 182:../cleanflight/src/main/fc/fc_rc.c ****     static float sinFactor = 0.0;
 183:../cleanflight/src/main/fc/fc_rc.c **** 
 184:../cleanflight/src/main/fc/fc_rc.c ****     if (lastFpvCamAngleDegrees != rxConfig()->fpvCamAngleDegrees) {
 1038              	 .loc 4 184 0
 1039 0006 FFF7FEFF 	 bl rxConfig
 1040 000a 0346     	 mov r3,r0
 1041 000c DA7E     	 ldrb r2,[r3,#27]
 1042 000e 394B     	 ldr r3,.L73
 1043 0010 1B78     	 ldrb r3,[r3]
 1044 0012 9A42     	 cmp r2,r3
 1045 0014 2BD0     	 beq .L72
 185:../cleanflight/src/main/fc/fc_rc.c ****         lastFpvCamAngleDegrees = rxConfig()->fpvCamAngleDegrees;
 1046              	 .loc 4 185 0
 1047 0016 FFF7FEFF 	 bl rxConfig
 1048 001a 0346     	 mov r3,r0
 1049 001c DA7E     	 ldrb r2,[r3,#27]
 1050 001e 354B     	 ldr r3,.L73
 1051 0020 1A70     	 strb r2,[r3]
 186:../cleanflight/src/main/fc/fc_rc.c ****         cosFactor = cos_approx(rxConfig()->fpvCamAngleDegrees * RAD);
 1052              	 .loc 4 186 0
 1053 0022 FFF7FEFF 	 bl rxConfig
 1054 0026 0346     	 mov r3,r0
 1055 0028 DB7E     	 ldrb r3,[r3,#27]
 1056 002a 07EE903A 	 fmsr s15,r3
 1057 002e F8EEE77A 	 fsitos s15,s15
 1058 0032 9FED317A 	 flds s14,.L73+4
 1059 0036 67EE877A 	 fmuls s15,s15,s14
 1060 003a 17EE900A 	 fmrs r0,s15
 1061 003e FFF7FEFF 	 bl cos_approx
 1062 0042 0246     	 mov r2,r0
 1063 0044 2D4B     	 ldr r3,.L73+8
 1064 0046 1A60     	 str r2,[r3]
 187:../cleanflight/src/main/fc/fc_rc.c ****         sinFactor = sin_approx(rxConfig()->fpvCamAngleDegrees * RAD);
 1065              	 .loc 4 187 0
 1066 0048 FFF7FEFF 	 bl rxConfig
 1067 004c 0346     	 mov r3,r0
 1068 004e DB7E     	 ldrb r3,[r3,#27]
 1069 0050 07EE903A 	 fmsr s15,r3
 1070 0054 F8EEE77A 	 fsitos s15,s15
 1071 0058 9FED277A 	 flds s14,.L73+4
 1072 005c 67EE877A 	 fmuls s15,s15,s14
 1073 0060 17EE900A 	 fmrs r0,s15
 1074 0064 FFF7FEFF 	 bl sin_approx
 1075 0068 0246     	 mov r2,r0
 1076 006a 254B     	 ldr r3,.L73+12
 1077 006c 1A60     	 str r2,[r3]
 1078              	.L72:
 188:../cleanflight/src/main/fc/fc_rc.c ****     }
 189:../cleanflight/src/main/fc/fc_rc.c **** 
 190:../cleanflight/src/main/fc/fc_rc.c ****     float roll = setpointRate[ROLL];
 1079              	 .loc 4 190 0
 1080 006e 254B     	 ldr r3,.L73+16
 1081 0070 1B68     	 ldr r3,[r3]
 1082 0072 7B60     	 str r3,[r7,#4]
 191:../cleanflight/src/main/fc/fc_rc.c ****     float yaw = setpointRate[YAW];
 1083              	 .loc 4 191 0
 1084 0074 234B     	 ldr r3,.L73+16
 1085 0076 9B68     	 ldr r3,[r3,#8]
 1086 0078 3B60     	 str r3,[r7]
 192:../cleanflight/src/main/fc/fc_rc.c ****     setpointRate[ROLL] = constrainf(roll * cosFactor -  yaw * sinFactor, -SETPOINT_RATE_LIMIT, SETP
 1087              	 .loc 4 192 0
 1088 007a 204B     	 ldr r3,.L73+8
 1089 007c 93ED007A 	 flds s14,[r3]
 1090 0080 D7ED017A 	 flds s15,[r7,#4]
 1091 0084 27EE277A 	 fmuls s14,s14,s15
 1092 0088 1D4B     	 ldr r3,.L73+12
 1093 008a D3ED006A 	 flds s13,[r3]
 1094 008e D7ED007A 	 flds s15,[r7]
 1095 0092 66EEA77A 	 fmuls s15,s13,s15
 1096 0096 77EE677A 	 fsubs s15,s14,s15
 1097 009a B0EE670A 	 fcpys s0,s15
 1098 009e DFED1A0A 	 flds s1,.L73+20
 1099 00a2 9FED1A1A 	 flds s2,.L73+24
 1100 00a6 FFF7FEFF 	 bl constrainf
 1101 00aa F0EE407A 	 fcpys s15,s0
 1102 00ae 154B     	 ldr r3,.L73+16
 1103 00b0 C3ED007A 	 fsts s15,[r3]
 193:../cleanflight/src/main/fc/fc_rc.c ****     setpointRate[YAW]  = constrainf(yaw  * cosFactor + roll * sinFactor, -SETPOINT_RATE_LIMIT, SETP
 1104              	 .loc 4 193 0
 1105 00b4 114B     	 ldr r3,.L73+8
 1106 00b6 93ED007A 	 flds s14,[r3]
 1107 00ba D7ED007A 	 flds s15,[r7]
 1108 00be 27EE277A 	 fmuls s14,s14,s15
 1109 00c2 0F4B     	 ldr r3,.L73+12
 1110 00c4 D3ED006A 	 flds s13,[r3]
 1111 00c8 D7ED017A 	 flds s15,[r7,#4]
 1112 00cc 66EEA77A 	 fmuls s15,s13,s15
 1113 00d0 77EE277A 	 fadds s15,s14,s15
 1114 00d4 B0EE670A 	 fcpys s0,s15
 1115 00d8 DFED0B0A 	 flds s1,.L73+20
 1116 00dc 9FED0B1A 	 flds s2,.L73+24
 1117 00e0 FFF7FEFF 	 bl constrainf
 1118 00e4 F0EE407A 	 fcpys s15,s0
 1119 00e8 064B     	 ldr r3,.L73+16
 1120 00ea C3ED027A 	 fsts s15,[r3,#8]
 194:../cleanflight/src/main/fc/fc_rc.c **** }
 1121              	 .loc 4 194 0
 1122 00ee 0837     	 adds r7,r7,#8
 1123              	.LCFI71:
 1124              	 .cfi_def_cfa_offset 8
 1125 00f0 BD46     	 mov sp,r7
 1126              	.LCFI72:
 1127              	 .cfi_def_cfa_register 13
 1128              	 
 1129 00f2 80BD     	 pop {r7,pc}
 1130              	.L74:
 1131              	 .align 2
 1132              	.L73:
 1133 00f4 00000000 	 .word lastFpvCamAngleDegrees.13857
 1134 00f8 35FA8E3C 	 .word 1016003125
 1135 00fc 00000000 	 .word cosFactor.13858
 1136 0100 00000000 	 .word sinFactor.13859
 1137 0104 00000000 	 .word setpointRate
 1138 0108 00C0F9C4 	 .word -990265344
 1139 010c 00C0F944 	 .word 1157218304
 1140              	 .cfi_endproc
 1141              	.LFE585:
 1143              	 .section .text.checkForThrottleErrorResetState,"ax",%progbits
 1144              	 .align 2
 1145              	 .thumb
 1146              	 .thumb_func
 1148              	checkForThrottleErrorResetState:
 1149              	.LFB586:
 195:../cleanflight/src/main/fc/fc_rc.c **** 
 196:../cleanflight/src/main/fc/fc_rc.c **** #define THROTTLE_BUFFER_MAX 20
 197:../cleanflight/src/main/fc/fc_rc.c **** #define THROTTLE_DELTA_MS 100
 198:../cleanflight/src/main/fc/fc_rc.c **** 
 199:../cleanflight/src/main/fc/fc_rc.c **** static void checkForThrottleErrorResetState(uint16_t rxRefreshRate)
 200:../cleanflight/src/main/fc/fc_rc.c **** {
 1150              	 .loc 4 200 0
 1151              	 .cfi_startproc
 1152              	 
 1153              	 
 1154 0000 80B5     	 push {r7,lr}
 1155              	.LCFI73:
 1156              	 .cfi_def_cfa_offset 8
 1157              	 .cfi_offset 7,-8
 1158              	 .cfi_offset 14,-4
 1159 0002 86B0     	 sub sp,sp,#24
 1160              	.LCFI74:
 1161              	 .cfi_def_cfa_offset 32
 1162 0004 00AF     	 add r7,sp,#0
 1163              	.LCFI75:
 1164              	 .cfi_def_cfa_register 7
 1165 0006 0346     	 mov r3,r0
 1166 0008 FB80     	 strh r3,[r7,#6]
 201:../cleanflight/src/main/fc/fc_rc.c ****     static int index;
 202:../cleanflight/src/main/fc/fc_rc.c ****     static int16_t rcCommandThrottlePrevious[THROTTLE_BUFFER_MAX];
 203:../cleanflight/src/main/fc/fc_rc.c **** 
 204:../cleanflight/src/main/fc/fc_rc.c ****     const int rxRefreshRateMs = rxRefreshRate / 1000;
 1167              	 .loc 4 204 0
 1168 000a FB88     	 ldrh r3,[r7,#6]
 1169 000c 3E4A     	 ldr r2,.L81
 1170 000e A2FB0323 	 umull r2,r3,r2,r3
 1171 0012 9B09     	 lsrs r3,r3,#6
 1172 0014 9BB2     	 uxth r3,r3
 1173 0016 7B61     	 str r3,[r7,#20]
 205:../cleanflight/src/main/fc/fc_rc.c ****     const int indexMax = constrain(THROTTLE_DELTA_MS / rxRefreshRateMs, 1, THROTTLE_BUFFER_MAX);
 1174              	 .loc 4 205 0
 1175 0018 6422     	 movs r2,#100
 1176 001a 7B69     	 ldr r3,[r7,#20]
 1177 001c 92FBF3F3 	 sdiv r3,r2,r3
 1178 0020 1846     	 mov r0,r3
 1179 0022 0121     	 movs r1,#1
 1180 0024 1422     	 movs r2,#20
 1181 0026 FFF7FEFF 	 bl constrain
 1182 002a 3861     	 str r0,[r7,#16]
 206:../cleanflight/src/main/fc/fc_rc.c ****     const int16_t throttleVelocityThreshold = (feature(FEATURE_3D)) ? currentPidProfile->itermThrot
 1183              	 .loc 4 206 0
 1184 002c 4FF48050 	 mov r0,#4096
 1185 0030 FFF7FEFF 	 bl feature
 1186 0034 0346     	 mov r3,r0
 1187 0036 002B     	 cmp r3,#0
 1188 0038 07D0     	 beq .L76
 1189              	 .loc 4 206 0 is_stmt 0 discriminator 1
 1190 003a 344B     	 ldr r3,.L81+4
 1191 003c 1B68     	 ldr r3,[r3]
 1192 003e 9B8D     	 ldrh r3,[r3,#44]
 1193 0040 9BB2     	 uxth r3,r3
 1194 0042 5B08     	 lsrs r3,r3,#1
 1195 0044 9BB2     	 uxth r3,r3
 1196 0046 9BB2     	 uxth r3,r3
 1197 0048 04E0     	 b .L77
 1198              	.L76:
 1199              	 .loc 4 206 0 discriminator 2
 1200 004a 304B     	 ldr r3,.L81+4
 1201 004c 1B68     	 ldr r3,[r3]
 1202 004e 9B8D     	 ldrh r3,[r3,#44]
 1203 0050 9BB2     	 uxth r3,r3
 1204 0052 9BB2     	 uxth r3,r3
 1205              	.L77:
 1206              	 .loc 4 206 0 discriminator 4
 1207 0054 FB81     	 strh r3,[r7,#14]
 207:../cleanflight/src/main/fc/fc_rc.c **** 
 208:../cleanflight/src/main/fc/fc_rc.c ****     rcCommandThrottlePrevious[index++] = rcCommand[THROTTLE];
 1208              	 .loc 4 208 0 is_stmt 1 discriminator 4
 1209 0056 2E4B     	 ldr r3,.L81+8
 1210 0058 1B68     	 ldr r3,[r3]
 1211 005a 5A1C     	 adds r2,r3,#1
 1212 005c 2C49     	 ldr r1,.L81+8
 1213 005e 0A60     	 str r2,[r1]
 1214 0060 2C4A     	 ldr r2,.L81+12
 1215 0062 D2ED037A 	 flds s15,[r2,#12]
 1216 0066 FDEEE77A 	 ftosizs s15,s15
 1217 006a C7ED007A 	 fsts s15,[r7]
 1218 006e 3A88     	 ldrh r2,[r7]
 1219 0070 91B2     	 uxth r1,r2
 1220 0072 294A     	 ldr r2,.L81+16
 1221 0074 22F81310 	 strh r1,[r2,r3,lsl#1]
 209:../cleanflight/src/main/fc/fc_rc.c ****     if (index >= indexMax) {
 1222              	 .loc 4 209 0 discriminator 4
 1223 0078 254B     	 ldr r3,.L81+8
 1224 007a 1A68     	 ldr r2,[r3]
 1225 007c 3B69     	 ldr r3,[r7,#16]
 1226 007e 9A42     	 cmp r2,r3
 1227 0080 02DB     	 blt .L78
 210:../cleanflight/src/main/fc/fc_rc.c ****         index = 0;
 1228              	 .loc 4 210 0
 1229 0082 234B     	 ldr r3,.L81+8
 1230 0084 0022     	 movs r2,#0
 1231 0086 1A60     	 str r2,[r3]
 1232              	.L78:
 211:../cleanflight/src/main/fc/fc_rc.c ****     }
 212:../cleanflight/src/main/fc/fc_rc.c **** 
 213:../cleanflight/src/main/fc/fc_rc.c ****     const int16_t rcCommandSpeed = rcCommand[THROTTLE] - rcCommandThrottlePrevious[index];
 1233              	 .loc 4 213 0
 1234 0088 224B     	 ldr r3,.L81+12
 1235 008a 93ED037A 	 flds s14,[r3,#12]
 1236 008e 204B     	 ldr r3,.L81+8
 1237 0090 1B68     	 ldr r3,[r3]
 1238 0092 214A     	 ldr r2,.L81+16
 1239 0094 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 1240 0098 1BB2     	 sxth r3,r3
 1241 009a 07EE903A 	 fmsr s15,r3
 1242 009e F8EEE77A 	 fsitos s15,s15
 1243 00a2 77EE677A 	 fsubs s15,s14,s15
 1244 00a6 FDEEE77A 	 ftosizs s15,s15
 1245 00aa C7ED007A 	 fsts s15,[r7]
 1246 00ae 3B88     	 ldrh r3,[r7]
 1247 00b0 BB81     	 strh r3,[r7,#12]
 214:../cleanflight/src/main/fc/fc_rc.c **** 
 215:../cleanflight/src/main/fc/fc_rc.c ****     if (currentPidProfile->antiGravityMode == ANTI_GRAVITY_STEP) {
 1248              	 .loc 4 215 0
 1249 00b2 164B     	 ldr r3,.L81+4
 1250 00b4 1B68     	 ldr r3,[r3]
 1251 00b6 93F82B30 	 ldrb r3,[r3,#43]
 1252 00ba 012B     	 cmp r3,#1
 1253 00bc 20D1     	 bne .L75
 1254              	.LBB6:
 216:../cleanflight/src/main/fc/fc_rc.c ****         if (ABS(rcCommandSpeed) > throttleVelocityThreshold) {
 1255              	 .loc 4 216 0
 1256 00be BB89     	 ldrh r3,[r7,#12]
 1257 00c0 7B81     	 strh r3,[r7,#10]
 1258 00c2 B7F90A30 	 ldrsh r3,[r7,#10]
 1259 00c6 83EAE372 	 eor r2,r3,r3,asr#31
 1260 00ca A2EBE372 	 sub r2,r2,r3,asr#31
 1261              	.LBE6:
 1262 00ce B7F90E30 	 ldrsh r3,[r7,#14]
 1263 00d2 9A42     	 cmp r2,r3
 1264 00d4 10DD     	 ble .L80
 217:../cleanflight/src/main/fc/fc_rc.c ****             pidSetItermAccelerator(CONVERT_PARAMETER_TO_FLOAT(currentPidProfile->itermAcceleratorGa
 1265              	 .loc 4 217 0
 1266 00d6 0D4B     	 ldr r3,.L81+4
 1267 00d8 1B68     	 ldr r3,[r3]
 1268 00da DB8D     	 ldrh r3,[r3,#46]
 1269 00dc 9BB2     	 uxth r3,r3
 1270 00de 07EE903A 	 fmsr s15,r3
 1271 00e2 F8EEE77A 	 fsitos s15,s15
 1272 00e6 9FED0D7A 	 flds s14,.L81+20
 1273 00ea 67EE877A 	 fmuls s15,s15,s14
 1274 00ee 17EE900A 	 fmrs r0,s15
 1275 00f2 FFF7FEFF 	 bl pidSetItermAccelerator
 1276 00f6 03E0     	 b .L75
 1277              	.L80:
 218:../cleanflight/src/main/fc/fc_rc.c ****         } else {
 219:../cleanflight/src/main/fc/fc_rc.c ****             pidSetItermAccelerator(1.0f);
 1278              	 .loc 4 219 0
 1279 00f8 4FF07E50 	 mov r0,#1065353216
 1280 00fc FFF7FEFF 	 bl pidSetItermAccelerator
 1281              	.L75:
 220:../cleanflight/src/main/fc/fc_rc.c ****         }
 221:../cleanflight/src/main/fc/fc_rc.c ****     }
 222:../cleanflight/src/main/fc/fc_rc.c **** }
 1282              	 .loc 4 222 0
 1283 0100 1837     	 adds r7,r7,#24
 1284              	.LCFI76:
 1285              	 .cfi_def_cfa_offset 8
 1286 0102 BD46     	 mov sp,r7
 1287              	.LCFI77:
 1288              	 .cfi_def_cfa_register 13
 1289              	 
 1290 0104 80BD     	 pop {r7,pc}
 1291              	.L82:
 1292 0106 00BF     	 .align 2
 1293              	.L81:
 1294 0108 D34D6210 	 .word 274877907
 1295 010c 00000000 	 .word currentPidProfile
 1296 0110 00000000 	 .word index.13865
 1297 0114 00000000 	 .word rcCommand
 1298 0118 00000000 	 .word rcCommandThrottlePrevious.13866
 1299 011c 6F12833A 	 .word 981668463
 1300              	 .cfi_endproc
 1301              	.LFE586:
 1303              	 .section .text.processRcInterpolation,"ax",%progbits
 1304              	 .align 2
 1305              	 .global processRcInterpolation
 1306              	 .thumb
 1307              	 .thumb_func
 1309              	processRcInterpolation:
 1310              	.LFB587:
 223:../cleanflight/src/main/fc/fc_rc.c **** 
 224:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE uint8_t processRcInterpolation(void)
 225:../cleanflight/src/main/fc/fc_rc.c **** {
 1311              	 .loc 4 225 0
 1312              	 .cfi_startproc
 1313              	 
 1314              	 
 1315 0000 80B5     	 push {r7,lr}
 1316              	.LCFI78:
 1317              	 .cfi_def_cfa_offset 8
 1318              	 .cfi_offset 7,-8
 1319              	 .cfi_offset 14,-4
 1320 0002 82B0     	 sub sp,sp,#8
 1321              	.LCFI79:
 1322              	 .cfi_def_cfa_offset 16
 1323 0004 00AF     	 add r7,sp,#0
 1324              	.LCFI80:
 1325              	 .cfi_def_cfa_register 7
 226:../cleanflight/src/main/fc/fc_rc.c ****     static FAST_RAM_ZERO_INIT float rcCommandInterp[4];
 227:../cleanflight/src/main/fc/fc_rc.c ****     static FAST_RAM_ZERO_INIT float rcStepSize[4];
 228:../cleanflight/src/main/fc/fc_rc.c ****     static FAST_RAM_ZERO_INIT int16_t rcInterpolationStepCount;
 229:../cleanflight/src/main/fc/fc_rc.c **** 
 230:../cleanflight/src/main/fc/fc_rc.c ****     uint16_t rxRefreshRate;
 231:../cleanflight/src/main/fc/fc_rc.c ****     uint8_t updatedChannel = 0;
 1326              	 .loc 4 231 0
 1327 0006 0023     	 movs r3,#0
 1328 0008 7B71     	 strb r3,[r7,#5]
 232:../cleanflight/src/main/fc/fc_rc.c **** 
 233:../cleanflight/src/main/fc/fc_rc.c ****     if (rxConfig()->rcInterpolation) {
 1329              	 .loc 4 233 0
 1330 000a FFF7FEFF 	 bl rxConfig
 1331 000e 0346     	 mov r3,r0
 1332 0010 1B7E     	 ldrb r3,[r3,#24]
 1333 0012 002B     	 cmp r3,#0
 1334 0014 00F0C580 	 beq .L84
 234:../cleanflight/src/main/fc/fc_rc.c ****          // Set RC refresh rate for sampling and channels to filter
 235:../cleanflight/src/main/fc/fc_rc.c ****         switch (rxConfig()->rcInterpolation) {
 1335              	 .loc 4 235 0
 1336 0018 FFF7FEFF 	 bl rxConfig
 1337 001c 0346     	 mov r3,r0
 1338 001e 1B7E     	 ldrb r3,[r3,#24]
 1339 0020 022B     	 cmp r3,#2
 1340 0022 02D0     	 beq .L86
 1341 0024 032B     	 cmp r3,#3
 1342 0026 06D0     	 beq .L87
 1343 0028 12E0     	 b .L102
 1344              	.L86:
 236:../cleanflight/src/main/fc/fc_rc.c ****         case RC_SMOOTHING_AUTO:
 237:../cleanflight/src/main/fc/fc_rc.c ****             rxRefreshRate = currentRxRefreshRate + 1000; // Add slight overhead to prevent ramps
 1345              	 .loc 4 237 0
 1346 002a 664B     	 ldr r3,.L103
 1347 002c 1B88     	 ldrh r3,[r3]
 1348 002e 03F57A73 	 add r3,r3,#1000
 1349 0032 FB80     	 strh r3,[r7,#6]
 238:../cleanflight/src/main/fc/fc_rc.c ****             break;
 1350              	 .loc 4 238 0
 1351 0034 10E0     	 b .L88
 1352              	.L87:
 239:../cleanflight/src/main/fc/fc_rc.c ****         case RC_SMOOTHING_MANUAL:
 240:../cleanflight/src/main/fc/fc_rc.c ****             rxRefreshRate = 1000 * rxConfig()->rcInterpolationInterval;
 1353              	 .loc 4 240 0
 1354 0036 FFF7FEFF 	 bl rxConfig
 1355 003a 0346     	 mov r3,r0
 1356 003c 9B7E     	 ldrb r3,[r3,#26]
 1357 003e 9BB2     	 uxth r3,r3
 1358 0040 1A46     	 mov r2,r3
 1359 0042 5201     	 lsls r2,r2,#5
 1360 0044 D21A     	 subs r2,r2,r3
 1361 0046 9200     	 lsls r2,r2,#2
 1362 0048 1344     	 add r3,r3,r2
 1363 004a DB00     	 lsls r3,r3,#3
 1364 004c FB80     	 strh r3,[r7,#6]
 241:../cleanflight/src/main/fc/fc_rc.c ****             break;
 1365              	 .loc 4 241 0
 1366 004e 03E0     	 b .L88
 1367              	.L102:
 242:../cleanflight/src/main/fc/fc_rc.c ****         case RC_SMOOTHING_OFF:
 243:../cleanflight/src/main/fc/fc_rc.c ****         case RC_SMOOTHING_DEFAULT:
 244:../cleanflight/src/main/fc/fc_rc.c ****         default:
 245:../cleanflight/src/main/fc/fc_rc.c ****             rxRefreshRate = rxGetRefreshRate();
 1368              	 .loc 4 245 0
 1369 0050 FFF7FEFF 	 bl rxGetRefreshRate
 1370 0054 0346     	 mov r3,r0
 1371 0056 FB80     	 strh r3,[r7,#6]
 1372              	.L88:
 246:../cleanflight/src/main/fc/fc_rc.c ****         }
 247:../cleanflight/src/main/fc/fc_rc.c **** 
 248:../cleanflight/src/main/fc/fc_rc.c ****         if (isRXDataNew && rxRefreshRate > 0) {
 1373              	 .loc 4 248 0
 1374 0058 5B4B     	 ldr r3,.L103+4
 1375 005a 1B78     	 ldrb r3,[r3]
 1376 005c 002B     	 cmp r3,#0
 1377 005e 60D0     	 beq .L89
 1378              	 .loc 4 248 0 is_stmt 0 discriminator 1
 1379 0060 FB88     	 ldrh r3,[r7,#6]
 1380 0062 002B     	 cmp r3,#0
 1381 0064 5DD0     	 beq .L89
 249:../cleanflight/src/main/fc/fc_rc.c ****             rcInterpolationStepCount = rxRefreshRate / targetPidLooptime;
 1382              	 .loc 4 249 0 is_stmt 1
 1383 0066 FA88     	 ldrh r2,[r7,#6]
 1384 0068 584B     	 ldr r3,.L103+8
 1385 006a 1B68     	 ldr r3,[r3]
 1386 006c B2FBF3F3 	 udiv r3,r2,r3
 1387 0070 9AB2     	 uxth r2,r3
 1388 0072 574B     	 ldr r3,.L103+12
 1389 0074 1A80     	 strh r2,[r3]
 1390              	.LBB7:
 250:../cleanflight/src/main/fc/fc_rc.c **** 
 251:../cleanflight/src/main/fc/fc_rc.c ****             for (int channel = 0; channel < PRIMARY_CHANNEL_COUNT; channel++) {
 1391              	 .loc 4 251 0
 1392 0076 0023     	 movs r3,#0
 1393 0078 3B60     	 str r3,[r7]
 1394 007a 29E0     	 b .L90
 1395              	.L92:
 252:../cleanflight/src/main/fc/fc_rc.c ****                 if ((1 << channel) & interpolationChannels) {
 1396              	 .loc 4 252 0
 1397 007c 554B     	 ldr r3,.L103+16
 1398 007e 1B78     	 ldrb r3,[r3]
 1399 0080 1A46     	 mov r2,r3
 1400 0082 3B68     	 ldr r3,[r7]
 1401 0084 42FA03F3 	 asr r3,r2,r3
 1402 0088 03F00103 	 and r3,r3,#1
 1403 008c 002B     	 cmp r3,#0
 1404 008e 1CD0     	 beq .L91
 253:../cleanflight/src/main/fc/fc_rc.c ****                     rcStepSize[channel] = (rcCommand[channel] - rcCommandInterp[channel]) / (float)
 1405              	 .loc 4 253 0
 1406 0090 514A     	 ldr r2,.L103+20
 1407 0092 3B68     	 ldr r3,[r7]
 1408 0094 9B00     	 lsls r3,r3,#2
 1409 0096 1344     	 add r3,r3,r2
 1410 0098 93ED007A 	 flds s14,[r3]
 1411 009c 4F4A     	 ldr r2,.L103+24
 1412 009e 3B68     	 ldr r3,[r7]
 1413 00a0 9B00     	 lsls r3,r3,#2
 1414 00a2 1344     	 add r3,r3,r2
 1415 00a4 D3ED007A 	 flds s15,[r3]
 1416 00a8 37EE677A 	 fsubs s14,s14,s15
 1417 00ac 484B     	 ldr r3,.L103+12
 1418 00ae 1B88     	 ldrh r3,[r3]
 1419 00b0 1BB2     	 sxth r3,r3
 1420 00b2 07EE903A 	 fmsr s15,r3
 1421 00b6 F8EEE77A 	 fsitos s15,s15
 1422 00ba C7EE277A 	 fdivs s15,s14,s15
 1423 00be 484A     	 ldr r2,.L103+28
 1424 00c0 3B68     	 ldr r3,[r7]
 1425 00c2 9B00     	 lsls r3,r3,#2
 1426 00c4 1344     	 add r3,r3,r2
 1427 00c6 C3ED007A 	 fsts s15,[r3]
 1428              	.L91:
 251:../cleanflight/src/main/fc/fc_rc.c ****                 if ((1 << channel) & interpolationChannels) {
 1429              	 .loc 4 251 0 discriminator 2
 1430 00ca 3B68     	 ldr r3,[r7]
 1431 00cc 0133     	 adds r3,r3,#1
 1432 00ce 3B60     	 str r3,[r7]
 1433              	.L90:
 251:../cleanflight/src/main/fc/fc_rc.c ****                 if ((1 << channel) & interpolationChannels) {
 1434              	 .loc 4 251 0 is_stmt 0 discriminator 1
 1435 00d0 3B68     	 ldr r3,[r7]
 1436 00d2 032B     	 cmp r3,#3
 1437 00d4 D2DD     	 ble .L92
 1438              	.LBE7:
 254:../cleanflight/src/main/fc/fc_rc.c ****                 }
 255:../cleanflight/src/main/fc/fc_rc.c ****             }
 256:../cleanflight/src/main/fc/fc_rc.c **** 
 257:../cleanflight/src/main/fc/fc_rc.c ****            DEBUG_SET(DEBUG_RC_INTERPOLATION, 0, lrintf(rcCommand[0]));
 1439              	 .loc 4 257 0 is_stmt 1
 1440 00d6 434B     	 ldr r3,.L103+32
 1441 00d8 1B78     	 ldrb r3,[r3]
 1442 00da 072B     	 cmp r3,#7
 1443 00dc 08D1     	 bne .L93
 1444              	 .loc 4 257 0 is_stmt 0 discriminator 1
 1445 00de 3E4B     	 ldr r3,.L103+20
 1446 00e0 1B68     	 ldr r3,[r3]
 1447 00e2 1846     	 mov r0,r3
 1448 00e4 FFF7FEFF 	 bl lrintf
 1449 00e8 0346     	 mov r3,r0
 1450 00ea 9AB2     	 uxth r2,r3
 1451 00ec 3E4B     	 ldr r3,.L103+36
 1452 00ee 1A80     	 strh r2,[r3]
 1453              	.L93:
 258:../cleanflight/src/main/fc/fc_rc.c ****            DEBUG_SET(DEBUG_RC_INTERPOLATION, 1, lrintf(currentRxRefreshRate / 1000));
 1454              	 .loc 4 258 0 is_stmt 1
 1455 00f0 3C4B     	 ldr r3,.L103+32
 1456 00f2 1B78     	 ldrb r3,[r3]
 1457 00f4 072B     	 cmp r3,#7
 1458 00f6 13D1     	 bne .L94
 1459              	 .loc 4 258 0 is_stmt 0 discriminator 1
 1460 00f8 324B     	 ldr r3,.L103
 1461 00fa 1B88     	 ldrh r3,[r3]
 1462 00fc 3B4A     	 ldr r2,.L103+40
 1463 00fe A2FB0323 	 umull r2,r3,r2,r3
 1464 0102 9B09     	 lsrs r3,r3,#6
 1465 0104 9BB2     	 uxth r3,r3
 1466 0106 07EE903A 	 fmsr s15,r3
 1467 010a F8EEE77A 	 fsitos s15,s15
 1468 010e 17EE900A 	 fmrs r0,s15
 1469 0112 FFF7FEFF 	 bl lrintf
 1470 0116 0346     	 mov r3,r0
 1471 0118 9AB2     	 uxth r2,r3
 1472 011a 334B     	 ldr r3,.L103+36
 1473 011c 5A80     	 strh r2,[r3,#2]
 1474 011e 09E0     	 b .L95
 1475              	.L94:
 1476              	 .loc 4 258 0
 1477 0120 08E0     	 b .L95
 1478              	.L89:
 259:../cleanflight/src/main/fc/fc_rc.c ****         } else {
 260:../cleanflight/src/main/fc/fc_rc.c ****             rcInterpolationStepCount--;
 1479              	 .loc 4 260 0 is_stmt 1
 1480 0122 2B4B     	 ldr r3,.L103+12
 1481 0124 1B88     	 ldrh r3,[r3]
 1482 0126 9BB2     	 uxth r3,r3
 1483 0128 9BB2     	 uxth r3,r3
 1484 012a 013B     	 subs r3,r3,#1
 1485 012c 9BB2     	 uxth r3,r3
 1486 012e 9AB2     	 uxth r2,r3
 1487 0130 274B     	 ldr r3,.L103+12
 1488 0132 1A80     	 strh r2,[r3]
 1489              	.L95:
 261:../cleanflight/src/main/fc/fc_rc.c ****         }
 262:../cleanflight/src/main/fc/fc_rc.c **** 
 263:../cleanflight/src/main/fc/fc_rc.c ****         // Interpolate steps of rcCommand
 264:../cleanflight/src/main/fc/fc_rc.c ****         if (rcInterpolationStepCount > 0) {
 1490              	 .loc 4 264 0
 1491 0134 264B     	 ldr r3,.L103+12
 1492 0136 1B88     	 ldrh r3,[r3]
 1493 0138 1BB2     	 sxth r3,r3
 1494 013a 002B     	 cmp r3,#0
 1495 013c 34DD     	 ble .L96
 265:../cleanflight/src/main/fc/fc_rc.c ****             for (updatedChannel = 0; updatedChannel < PRIMARY_CHANNEL_COUNT; updatedChannel++) {
 1496              	 .loc 4 265 0
 1497 013e 0023     	 movs r3,#0
 1498 0140 7B71     	 strb r3,[r7,#5]
 1499 0142 2AE0     	 b .L97
 1500              	.L99:
 266:../cleanflight/src/main/fc/fc_rc.c ****                 if ((1 << updatedChannel) & interpolationChannels) {
 1501              	 .loc 4 266 0
 1502 0144 234B     	 ldr r3,.L103+16
 1503 0146 1B78     	 ldrb r3,[r3]
 1504 0148 1A46     	 mov r2,r3
 1505 014a 7B79     	 ldrb r3,[r7,#5]
 1506 014c 42FA03F3 	 asr r3,r2,r3
 1507 0150 03F00103 	 and r3,r3,#1
 1508 0154 002B     	 cmp r3,#0
 1509 0156 1DD0     	 beq .L98
 267:../cleanflight/src/main/fc/fc_rc.c ****                     rcCommandInterp[updatedChannel] += rcStepSize[updatedChannel];
 1510              	 .loc 4 267 0
 1511 0158 7B79     	 ldrb r3,[r7,#5]
 1512 015a 7A79     	 ldrb r2,[r7,#5]
 1513 015c 1F49     	 ldr r1,.L103+24
 1514 015e 9200     	 lsls r2,r2,#2
 1515 0160 0A44     	 add r2,r2,r1
 1516 0162 92ED007A 	 flds s14,[r2]
 1517 0166 7A79     	 ldrb r2,[r7,#5]
 1518 0168 1D49     	 ldr r1,.L103+28
 1519 016a 9200     	 lsls r2,r2,#2
 1520 016c 0A44     	 add r2,r2,r1
 1521 016e D2ED007A 	 flds s15,[r2]
 1522 0172 77EE277A 	 fadds s15,s14,s15
 1523 0176 194A     	 ldr r2,.L103+24
 1524 0178 9B00     	 lsls r3,r3,#2
 1525 017a 1344     	 add r3,r3,r2
 1526 017c C3ED007A 	 fsts s15,[r3]
 268:../cleanflight/src/main/fc/fc_rc.c ****                     rcCommand[updatedChannel] = rcCommandInterp[updatedChannel];
 1527              	 .loc 4 268 0
 1528 0180 7B79     	 ldrb r3,[r7,#5]
 1529 0182 7A79     	 ldrb r2,[r7,#5]
 1530 0184 1549     	 ldr r1,.L103+24
 1531 0186 9200     	 lsls r2,r2,#2
 1532 0188 0A44     	 add r2,r2,r1
 1533 018a 1268     	 ldr r2,[r2]
 1534 018c 1249     	 ldr r1,.L103+20
 1535 018e 9B00     	 lsls r3,r3,#2
 1536 0190 0B44     	 add r3,r3,r1
 1537 0192 1A60     	 str r2,[r3]
 1538              	.L98:
 265:../cleanflight/src/main/fc/fc_rc.c ****                 if ((1 << updatedChannel) & interpolationChannels) {
 1539              	 .loc 4 265 0 discriminator 2
 1540 0194 7B79     	 ldrb r3,[r7,#5]
 1541 0196 0133     	 adds r3,r3,#1
 1542 0198 7B71     	 strb r3,[r7,#5]
 1543              	.L97:
 265:../cleanflight/src/main/fc/fc_rc.c ****                 if ((1 << updatedChannel) & interpolationChannels) {
 1544              	 .loc 4 265 0 is_stmt 0 discriminator 1
 1545 019a 7B79     	 ldrb r3,[r7,#5]
 1546 019c 032B     	 cmp r3,#3
 1547 019e D1D9     	 bls .L99
 1548 01a0 02E0     	 b .L96
 1549              	.L84:
 269:../cleanflight/src/main/fc/fc_rc.c ****                 }
 270:../cleanflight/src/main/fc/fc_rc.c ****             }
 271:../cleanflight/src/main/fc/fc_rc.c ****         }
 272:../cleanflight/src/main/fc/fc_rc.c ****     } else {
 273:../cleanflight/src/main/fc/fc_rc.c ****         rcInterpolationStepCount = 0; // reset factor in case of level modes flip flopping
 1550              	 .loc 4 273 0 is_stmt 1
 1551 01a2 0B4B     	 ldr r3,.L103+12
 1552 01a4 0022     	 movs r2,#0
 1553 01a6 1A80     	 strh r2,[r3]
 1554              	.L96:
 274:../cleanflight/src/main/fc/fc_rc.c ****     }
 275:../cleanflight/src/main/fc/fc_rc.c **** 
 276:../cleanflight/src/main/fc/fc_rc.c ****     DEBUG_SET(DEBUG_RC_INTERPOLATION, 2, rcInterpolationStepCount);
 1555              	 .loc 4 276 0
 1556 01a8 0E4B     	 ldr r3,.L103+32
 1557 01aa 1B78     	 ldrb r3,[r3]
 1558 01ac 072B     	 cmp r3,#7
 1559 01ae 03D1     	 bne .L100
 1560              	 .loc 4 276 0 is_stmt 0 discriminator 1
 1561 01b0 074B     	 ldr r3,.L103+12
 1562 01b2 1A88     	 ldrh r2,[r3]
 1563 01b4 0C4B     	 ldr r3,.L103+36
 1564 01b6 9A80     	 strh r2,[r3,#4]
 1565              	.L100:
 277:../cleanflight/src/main/fc/fc_rc.c **** 
 278:../cleanflight/src/main/fc/fc_rc.c ****     return updatedChannel;
 1566              	 .loc 4 278 0 is_stmt 1
 1567 01b8 7B79     	 ldrb r3,[r7,#5]
 279:../cleanflight/src/main/fc/fc_rc.c **** 
 280:../cleanflight/src/main/fc/fc_rc.c **** }
 1568              	 .loc 4 280 0
 1569 01ba 1846     	 mov r0,r3
 1570 01bc 0837     	 adds r7,r7,#8
 1571              	.LCFI81:
 1572              	 .cfi_def_cfa_offset 8
 1573 01be BD46     	 mov sp,r7
 1574              	.LCFI82:
 1575              	 .cfi_def_cfa_register 13
 1576              	 
 1577 01c0 80BD     	 pop {r7,pc}
 1578              	.L104:
 1579 01c2 00BF     	 .align 2
 1580              	.L103:
 1581 01c4 00000000 	 .word currentRxRefreshRate
 1582 01c8 00000000 	 .word isRXDataNew
 1583 01cc 00000000 	 .word targetPidLooptime
 1584 01d0 00000000 	 .word rcInterpolationStepCount.13878
 1585 01d4 00000000 	 .word interpolationChannels
 1586 01d8 00000000 	 .word rcCommand
 1587 01dc 00000000 	 .word rcCommandInterp.13876
 1588 01e0 00000000 	 .word rcStepSize.13877
 1589 01e4 00000000 	 .word debugMode
 1590 01e8 00000000 	 .word debug
 1591 01ec D34D6210 	 .word 274877907
 1592              	 .cfi_endproc
 1593              	.LFE587:
 1595              	 .section .text.calcRcSmoothingCutoff,"ax",%progbits
 1596              	 .align 2
 1597              	 .global calcRcSmoothingCutoff
 1598              	 .thumb
 1599              	 .thumb_func
 1601              	calcRcSmoothingCutoff:
 1602              	.LFB588:
 281:../cleanflight/src/main/fc/fc_rc.c **** 
 282:../cleanflight/src/main/fc/fc_rc.c **** #ifdef USE_RC_SMOOTHING_FILTER
 283:../cleanflight/src/main/fc/fc_rc.c **** // Determine a cutoff frequency based on filter type and the calculated
 284:../cleanflight/src/main/fc/fc_rc.c **** // average rx frame time
 285:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE_NOINLINE int calcRcSmoothingCutoff(int avgRxFrameTimeUs, bool pt1)
 286:../cleanflight/src/main/fc/fc_rc.c **** {
 1603              	 .loc 4 286 0
 1604              	 .cfi_startproc
 1605              	 
 1606              	 
 1607 0000 80B5     	 push {r7,lr}
 1608              	.LCFI83:
 1609              	 .cfi_def_cfa_offset 8
 1610              	 .cfi_offset 7,-8
 1611              	 .cfi_offset 14,-4
 1612 0002 84B0     	 sub sp,sp,#16
 1613              	.LCFI84:
 1614              	 .cfi_def_cfa_offset 24
 1615 0004 00AF     	 add r7,sp,#0
 1616              	.LCFI85:
 1617              	 .cfi_def_cfa_register 7
 1618 0006 7860     	 str r0,[r7,#4]
 1619 0008 0B46     	 mov r3,r1
 1620 000a FB70     	 strb r3,[r7,#3]
 287:../cleanflight/src/main/fc/fc_rc.c ****     if (avgRxFrameTimeUs > 0) {
 1621              	 .loc 4 287 0
 1622 000c 7B68     	 ldr r3,[r7,#4]
 1623 000e 002B     	 cmp r3,#0
 1624 0010 2EDD     	 ble .L106
 1625              	.LBB8:
 288:../cleanflight/src/main/fc/fc_rc.c ****         float cutoff = (1 / (avgRxFrameTimeUs * 1e-6f)) / 2;  // calculate the nyquist frequency
 1626              	 .loc 4 288 0
 1627 0012 7B68     	 ldr r3,[r7,#4]
 1628 0014 07EE903A 	 fmsr s15,r3
 1629 0018 F8EEE77A 	 fsitos s15,s15
 1630 001c 9FED177A 	 flds s14,.L109
 1631 0020 67EE877A 	 fmuls s15,s15,s14
 1632 0024 B7EE007A 	 fconsts s14,#112
 1633 0028 C7EE277A 	 fdivs s15,s14,s15
 1634 002c B0EE007A 	 fconsts s14,#0
 1635 0030 C7EE877A 	 fdivs s15,s15,s14
 1636 0034 C7ED037A 	 fsts s15,[r7,#12]
 289:../cleanflight/src/main/fc/fc_rc.c ****         cutoff = cutoff * 0.90f;  // Use 90% of the calculated nyquist frequency
 1637              	 .loc 4 289 0
 1638 0038 D7ED037A 	 flds s15,[r7,#12]
 1639 003c 9FED107A 	 flds s14,.L109+4
 1640 0040 67EE877A 	 fmuls s15,s15,s14
 1641 0044 C7ED037A 	 fsts s15,[r7,#12]
 290:../cleanflight/src/main/fc/fc_rc.c **** 
 291:../cleanflight/src/main/fc/fc_rc.c ****         if (pt1) {
 1642              	 .loc 4 291 0
 1643 0048 FB78     	 ldrb r3,[r7,#3]
 1644 004a 002B     	 cmp r3,#0
 1645 004c 0BD0     	 beq .L107
 292:../cleanflight/src/main/fc/fc_rc.c ****             cutoff = sq(cutoff) / RC_SMOOTHING_IDENTITY_FREQUENCY; // convert to a cutoff for pt1 t
 1646              	 .loc 4 292 0
 1647 004e 97ED037A 	 flds s14,[r7,#12]
 1648 0052 D7ED037A 	 flds s15,[r7,#12]
 1649 0056 67EE277A 	 fmuls s15,s14,s15
 1650 005a 9FED0A7A 	 flds s14,.L109+8
 1651 005e C7EE877A 	 fdivs s15,s15,s14
 1652 0062 C7ED037A 	 fsts s15,[r7,#12]
 1653              	.L107:
 293:../cleanflight/src/main/fc/fc_rc.c ****         }
 294:../cleanflight/src/main/fc/fc_rc.c ****         return lrintf(cutoff);
 1654              	 .loc 4 294 0
 1655 0066 F868     	 ldr r0,[r7,#12]
 1656 0068 FFF7FEFF 	 bl lrintf
 1657 006c 0346     	 mov r3,r0
 1658 006e 00E0     	 b .L108
 1659              	.L106:
 1660              	.LBE8:
 295:../cleanflight/src/main/fc/fc_rc.c ****     } else {
 296:../cleanflight/src/main/fc/fc_rc.c ****         return 0;
 1661              	 .loc 4 296 0
 1662 0070 0023     	 movs r3,#0
 1663              	.L108:
 297:../cleanflight/src/main/fc/fc_rc.c ****     }
 298:../cleanflight/src/main/fc/fc_rc.c **** }
 1664              	 .loc 4 298 0
 1665 0072 1846     	 mov r0,r3
 1666 0074 1037     	 adds r7,r7,#16
 1667              	.LCFI86:
 1668              	 .cfi_def_cfa_offset 8
 1669 0076 BD46     	 mov sp,r7
 1670              	.LCFI87:
 1671              	 .cfi_def_cfa_register 13
 1672              	 
 1673 0078 80BD     	 pop {r7,pc}
 1674              	.L110:
 1675 007a 00BF     	 .align 2
 1676              	.L109:
 1677 007c BD378635 	 .word 897988541
 1678 0080 6666663F 	 .word 1063675494
 1679 0084 0000A042 	 .word 1117782016
 1680              	 .cfi_endproc
 1681              	.LFE588:
 1683              	 .section .text.rcSmoothingRxRateValid,"ax",%progbits
 1684              	 .align 2
 1685              	 .global rcSmoothingRxRateValid
 1686              	 .thumb
 1687              	 .thumb_func
 1689              	rcSmoothingRxRateValid:
 1690              	.LFB589:
 299:../cleanflight/src/main/fc/fc_rc.c **** 
 300:../cleanflight/src/main/fc/fc_rc.c **** // Preforms a reasonableness check on the rx frame time to avoid bad data
 301:../cleanflight/src/main/fc/fc_rc.c **** // skewing the average.
 302:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE bool rcSmoothingRxRateValid(int currentRxRefreshRate)
 303:../cleanflight/src/main/fc/fc_rc.c **** {
 1691              	 .loc 4 303 0
 1692              	 .cfi_startproc
 1693              	 
 1694              	 
 1695              	 
 1696 0000 80B4     	 push {r7}
 1697              	.LCFI88:
 1698              	 .cfi_def_cfa_offset 4
 1699              	 .cfi_offset 7,-4
 1700 0002 83B0     	 sub sp,sp,#12
 1701              	.LCFI89:
 1702              	 .cfi_def_cfa_offset 16
 1703 0004 00AF     	 add r7,sp,#0
 1704              	.LCFI90:
 1705              	 .cfi_def_cfa_register 7
 1706 0006 7860     	 str r0,[r7,#4]
 304:../cleanflight/src/main/fc/fc_rc.c ****     return (currentRxRefreshRate >= RC_SMOOTHING_RX_RATE_MIN_US && currentRxRefreshRate <= RC_SMOOT
 1707              	 .loc 4 304 0
 1708 0008 7B68     	 ldr r3,[r7,#4]
 1709 000a B3F57A7F 	 cmp r3,#1000
 1710 000e 06DB     	 blt .L112
 1711              	 .loc 4 304 0 is_stmt 0 discriminator 1
 1712 0010 7B68     	 ldr r3,[r7,#4]
 1713 0012 4CF25032 	 movw r2,#50000
 1714 0016 9342     	 cmp r3,r2
 1715 0018 01DC     	 bgt .L112
 1716              	 .loc 4 304 0 discriminator 3
 1717 001a 0123     	 movs r3,#1
 1718 001c 00E0     	 b .L113
 1719              	.L112:
 1720              	 .loc 4 304 0 discriminator 4
 1721 001e 0023     	 movs r3,#0
 1722              	.L113:
 1723              	 .loc 4 304 0 discriminator 6
 1724 0020 03F00103 	 and r3,r3,#1
 1725 0024 DBB2     	 uxtb r3,r3
 305:../cleanflight/src/main/fc/fc_rc.c **** }
 1726              	 .loc 4 305 0 is_stmt 1 discriminator 6
 1727 0026 1846     	 mov r0,r3
 1728 0028 0C37     	 adds r7,r7,#12
 1729              	.LCFI91:
 1730              	 .cfi_def_cfa_offset 4
 1731 002a BD46     	 mov sp,r7
 1732              	.LCFI92:
 1733              	 .cfi_def_cfa_register 13
 1734              	 
 1735 002c 5DF8047B 	 ldr r7,[sp],#4
 1736              	.LCFI93:
 1737              	 .cfi_restore 7
 1738              	 .cfi_def_cfa_offset 0
 1739 0030 7047     	 bx lr
 1740              	 .cfi_endproc
 1741              	.LFE589:
 1743 0032 00BF     	 .section .text.rcSmoothingSetFilterCutoffs,"ax",%progbits
 1744              	 .align 2
 1745              	 .global rcSmoothingSetFilterCutoffs
 1746              	 .thumb
 1747              	 .thumb_func
 1749              	rcSmoothingSetFilterCutoffs:
 1750              	.LFB590:
 306:../cleanflight/src/main/fc/fc_rc.c **** 
 307:../cleanflight/src/main/fc/fc_rc.c **** // Initialize or update the filters base on either the manually selected cutoff, or
 308:../cleanflight/src/main/fc/fc_rc.c **** // the auto-calculated cutoff frequency based on detected rx frame rate.
 309:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE_NOINLINE void rcSmoothingSetFilterCutoffs(rcSmoothingFilter_t *smoothingData)
 310:../cleanflight/src/main/fc/fc_rc.c **** {
 1751              	 .loc 4 310 0
 1752              	 .cfi_startproc
 1753              	 
 1754              	 
 1755 0000 B0B5     	 push {r4,r5,r7,lr}
 1756              	.LCFI94:
 1757              	 .cfi_def_cfa_offset 16
 1758              	 .cfi_offset 4,-16
 1759              	 .cfi_offset 5,-12
 1760              	 .cfi_offset 7,-8
 1761              	 .cfi_offset 14,-4
 1762 0002 86B0     	 sub sp,sp,#24
 1763              	.LCFI95:
 1764              	 .cfi_def_cfa_offset 40
 1765 0004 00AF     	 add r7,sp,#0
 1766              	.LCFI96:
 1767              	 .cfi_def_cfa_register 7
 1768 0006 7860     	 str r0,[r7,#4]
 311:../cleanflight/src/main/fc/fc_rc.c ****     const float dT = targetPidLooptime * 1e-6f;
 1769              	 .loc 4 311 0
 1770 0008 8F4B     	 ldr r3,.L133
 1771 000a 1B68     	 ldr r3,[r3]
 1772 000c 07EE903A 	 fmsr s15,r3
 1773 0010 F8EE677A 	 fuitos s15,s15
 1774 0014 9FED8D7A 	 flds s14,.L133+4
 1775 0018 67EE877A 	 fmuls s15,s15,s14
 1776 001c C7ED047A 	 fsts s15,[r7,#16]
 312:../cleanflight/src/main/fc/fc_rc.c ****     uint16_t oldCutoff = smoothingData->inputCutoffFrequency;
 1777              	 .loc 4 312 0
 1778 0020 7B68     	 ldr r3,[r7,#4]
 1779 0022 93F89120 	 ldrb r2,[r3,#145]
 1780 0026 93F89230 	 ldrb r3,[r3,#146]
 1781 002a 1B02     	 lsls r3,r3,#8
 1782 002c 1343     	 orrs r3,r3,r2
 1783 002e FB81     	 strh r3,[r7,#14]
 313:../cleanflight/src/main/fc/fc_rc.c ****     
 314:../cleanflight/src/main/fc/fc_rc.c ****     if (rxConfig()->rc_smoothing_input_cutoff == 0) {
 1784              	 .loc 4 314 0
 1785 0030 FFF7FEFF 	 bl rxConfig
 1786 0034 0346     	 mov r3,r0
 1787 0036 93F82530 	 ldrb r3,[r3,#37]
 1788 003a 002B     	 cmp r3,#0
 1789 003c 15D1     	 bne .L116
 315:../cleanflight/src/main/fc/fc_rc.c ****         smoothingData->inputCutoffFrequency = calcRcSmoothingCutoff(smoothingData->averageFrameTime
 1790              	 .loc 4 315 0
 1791 003e 7B68     	 ldr r3,[r7,#4]
 1792 0040 D3F89540 	 ldr r4,[r3,#149]
 1793 0044 FFF7FEFF 	 bl rxConfig
 1794 0048 0346     	 mov r3,r0
 1795 004a 93F82830 	 ldrb r3,[r3,#40]
 1796 004e 002B     	 cmp r3,#0
 1797 0050 0CBF     	 ite eq
 1798 0052 0123     	 moveq r3,#1
 1799 0054 0023     	 movne r3,#0
 1800 0056 DBB2     	 uxtb r3,r3
 1801 0058 2046     	 mov r0,r4
 1802 005a 1946     	 mov r1,r3
 1803 005c FFF7FEFF 	 bl calcRcSmoothingCutoff
 1804 0060 0346     	 mov r3,r0
 1805 0062 9AB2     	 uxth r2,r3
 1806 0064 7B68     	 ldr r3,[r7,#4]
 1807 0066 A3F89120 	 strh r2,[r3,#145]
 1808              	.L116:
 316:../cleanflight/src/main/fc/fc_rc.c ****     }
 317:../cleanflight/src/main/fc/fc_rc.c **** 
 318:../cleanflight/src/main/fc/fc_rc.c ****     // initialize or update the input filter
 319:../cleanflight/src/main/fc/fc_rc.c ****     if ((smoothingData->inputCutoffFrequency != oldCutoff) || !smoothingData->filterInitialized) {
 1809              	 .loc 4 319 0
 1810 006a 7B68     	 ldr r3,[r7,#4]
 1811 006c B3F89130 	 ldrh r3,[r3,#145]
 1812 0070 9BB2     	 uxth r3,r3
 1813 0072 FA89     	 ldrh r2,[r7,#14]
 1814 0074 9A42     	 cmp r2,r3
 1815 0076 07D1     	 bne .L117
 1816              	 .loc 4 319 0 is_stmt 0 discriminator 1
 1817 0078 7B68     	 ldr r3,[r7,#4]
 1818 007a 1B78     	 ldrb r3,[r3]
 1819 007c 83F00103 	 eor r3,r3,#1
 1820 0080 DBB2     	 uxtb r3,r3
 1821 0082 002B     	 cmp r3,#0
 1822 0084 00F08780 	 beq .L118
 1823              	.L117:
 1824              	.LBB9:
 320:../cleanflight/src/main/fc/fc_rc.c ****         for (int i = 0; i < PRIMARY_CHANNEL_COUNT; i++) {
 1825              	 .loc 4 320 0 is_stmt 1
 1826 0088 0023     	 movs r3,#0
 1827 008a 7B61     	 str r3,[r7,#20]
 1828 008c 7FE0     	 b .L119
 1829              	.L127:
 321:../cleanflight/src/main/fc/fc_rc.c ****             if ((1 << i) & interpolationChannels) {  // only update channels specified by rc_interp
 1830              	 .loc 4 321 0
 1831 008e 704B     	 ldr r3,.L133+8
 1832 0090 1B78     	 ldrb r3,[r3]
 1833 0092 1A46     	 mov r2,r3
 1834 0094 7B69     	 ldr r3,[r7,#20]
 1835 0096 42FA03F3 	 asr r3,r2,r3
 1836 009a 03F00103 	 and r3,r3,#1
 1837 009e 002B     	 cmp r3,#0
 1838 00a0 72D0     	 beq .L120
 322:../cleanflight/src/main/fc/fc_rc.c ****                 switch (rxConfig()->rc_smoothing_input_type) {
 1839              	 .loc 4 322 0
 1840 00a2 FFF7FEFF 	 bl rxConfig
 1841 00a6 0346     	 mov r3,r0
 1842 00a8 93F82830 	 ldrb r3,[r3,#40]
 1843 00ac 002B     	 cmp r3,#0
 1844 00ae 32D1     	 bne .L131
 323:../cleanflight/src/main/fc/fc_rc.c ****                 
 324:../cleanflight/src/main/fc/fc_rc.c ****                     case RC_SMOOTHING_INPUT_PT1:
 325:../cleanflight/src/main/fc/fc_rc.c ****                         if (!smoothingData->filterInitialized) {
 1845              	 .loc 4 325 0
 1846 00b0 7B68     	 ldr r3,[r7,#4]
 1847 00b2 1B78     	 ldrb r3,[r3]
 1848 00b4 83F00103 	 eor r3,r3,#1
 1849 00b8 DBB2     	 uxtb r3,r3
 1850 00ba 002B     	 cmp r3,#0
 1851 00bc 15D0     	 beq .L123
 326:../cleanflight/src/main/fc/fc_rc.c ****                             pt1FilterInit((pt1Filter_t*) &smoothingData->filter[i], pt1FilterGain(s
 1852              	 .loc 4 326 0
 1853 00be 7A69     	 ldr r2,[r7,#20]
 1854 00c0 1346     	 mov r3,r2
 1855 00c2 DB00     	 lsls r3,r3,#3
 1856 00c4 1344     	 add r3,r3,r2
 1857 00c6 9B00     	 lsls r3,r3,#2
 1858 00c8 7A68     	 ldr r2,[r7,#4]
 1859 00ca 1344     	 add r3,r3,r2
 1860 00cc 5C1C     	 adds r4,r3,#1
 1861 00ce 7B68     	 ldr r3,[r7,#4]
 1862 00d0 B3F89130 	 ldrh r3,[r3,#145]
 1863 00d4 9BB2     	 uxth r3,r3
 1864 00d6 1846     	 mov r0,r3
 1865 00d8 3969     	 ldr r1,[r7,#16]
 1866 00da FFF7FEFF 	 bl pt1FilterGain
 1867 00de 0346     	 mov r3,r0
 1868 00e0 2046     	 mov r0,r4
 1869 00e2 1946     	 mov r1,r3
 1870 00e4 FFF7FEFF 	 bl pt1FilterInit
 327:../cleanflight/src/main/fc/fc_rc.c ****                         } else {
 328:../cleanflight/src/main/fc/fc_rc.c ****                             pt1FilterUpdateCutoff((pt1Filter_t*) &smoothingData->filter[i], pt1Filt
 329:../cleanflight/src/main/fc/fc_rc.c ****                         }
 330:../cleanflight/src/main/fc/fc_rc.c ****                         break;
 1871              	 .loc 4 330 0
 1872 00e8 4EE0     	 b .L120
 1873              	.L123:
 328:../cleanflight/src/main/fc/fc_rc.c ****                         }
 1874              	 .loc 4 328 0
 1875 00ea 7A69     	 ldr r2,[r7,#20]
 1876 00ec 1346     	 mov r3,r2
 1877 00ee DB00     	 lsls r3,r3,#3
 1878 00f0 1344     	 add r3,r3,r2
 1879 00f2 9B00     	 lsls r3,r3,#2
 1880 00f4 7A68     	 ldr r2,[r7,#4]
 1881 00f6 1344     	 add r3,r3,r2
 1882 00f8 5C1C     	 adds r4,r3,#1
 1883 00fa 7B68     	 ldr r3,[r7,#4]
 1884 00fc B3F89130 	 ldrh r3,[r3,#145]
 1885 0100 9BB2     	 uxth r3,r3
 1886 0102 1846     	 mov r0,r3
 1887 0104 3969     	 ldr r1,[r7,#16]
 1888 0106 FFF7FEFF 	 bl pt1FilterGain
 1889 010a 0346     	 mov r3,r0
 1890 010c 2046     	 mov r0,r4
 1891 010e 1946     	 mov r1,r3
 1892 0110 FFF7FEFF 	 bl pt1FilterUpdateCutoff
 1893              	 .loc 4 330 0
 1894 0114 38E0     	 b .L120
 1895              	.L131:
 331:../cleanflight/src/main/fc/fc_rc.c ****                         
 332:../cleanflight/src/main/fc/fc_rc.c ****                     case RC_SMOOTHING_INPUT_BIQUAD:
 333:../cleanflight/src/main/fc/fc_rc.c ****                     default:
 334:../cleanflight/src/main/fc/fc_rc.c ****                         if (!smoothingData->filterInitialized) {
 1896              	 .loc 4 334 0
 1897 0116 7B68     	 ldr r3,[r7,#4]
 1898 0118 1B78     	 ldrb r3,[r3]
 1899 011a 83F00103 	 eor r3,r3,#1
 1900 011e DBB2     	 uxtb r3,r3
 1901 0120 002B     	 cmp r3,#0
 1902 0122 18D0     	 beq .L125
 335:../cleanflight/src/main/fc/fc_rc.c ****                             biquadFilterInitLPF((biquadFilter_t*) &smoothingData->filter[i], smooth
 1903              	 .loc 4 335 0
 1904 0124 7A69     	 ldr r2,[r7,#20]
 1905 0126 1346     	 mov r3,r2
 1906 0128 DB00     	 lsls r3,r3,#3
 1907 012a 1344     	 add r3,r3,r2
 1908 012c 9B00     	 lsls r3,r3,#2
 1909 012e 7A68     	 ldr r2,[r7,#4]
 1910 0130 1344     	 add r3,r3,r2
 1911 0132 5A1C     	 adds r2,r3,#1
 1912 0134 7B68     	 ldr r3,[r7,#4]
 1913 0136 B3F89130 	 ldrh r3,[r3,#145]
 1914 013a 9BB2     	 uxth r3,r3
 1915 013c 07EE903A 	 fmsr s15,r3
 1916 0140 F8EE677A 	 fuitos s15,s15
 1917 0144 404B     	 ldr r3,.L133
 1918 0146 1B68     	 ldr r3,[r3]
 1919 0148 1046     	 mov r0,r2
 1920 014a 17EE901A 	 fmrs r1,s15
 1921 014e 1A46     	 mov r2,r3
 1922 0150 FFF7FEFF 	 bl biquadFilterInitLPF
 336:../cleanflight/src/main/fc/fc_rc.c ****                         } else {
 337:../cleanflight/src/main/fc/fc_rc.c ****                             biquadFilterUpdateLPF((biquadFilter_t*) &smoothingData->filter[i], smoo
 338:../cleanflight/src/main/fc/fc_rc.c ****                         }
 339:../cleanflight/src/main/fc/fc_rc.c ****                         break;
 1923              	 .loc 4 339 0
 1924 0154 17E0     	 b .L132
 1925              	.L125:
 337:../cleanflight/src/main/fc/fc_rc.c ****                         }
 1926              	 .loc 4 337 0
 1927 0156 7A69     	 ldr r2,[r7,#20]
 1928 0158 1346     	 mov r3,r2
 1929 015a DB00     	 lsls r3,r3,#3
 1930 015c 1344     	 add r3,r3,r2
 1931 015e 9B00     	 lsls r3,r3,#2
 1932 0160 7A68     	 ldr r2,[r7,#4]
 1933 0162 1344     	 add r3,r3,r2
 1934 0164 5A1C     	 adds r2,r3,#1
 1935 0166 7B68     	 ldr r3,[r7,#4]
 1936 0168 B3F89130 	 ldrh r3,[r3,#145]
 1937 016c 9BB2     	 uxth r3,r3
 1938 016e 07EE903A 	 fmsr s15,r3
 1939 0172 F8EE677A 	 fuitos s15,s15
 1940 0176 344B     	 ldr r3,.L133
 1941 0178 1B68     	 ldr r3,[r3]
 1942 017a 1046     	 mov r0,r2
 1943 017c 17EE901A 	 fmrs r1,s15
 1944 0180 1A46     	 mov r2,r3
 1945 0182 FFF7FEFF 	 bl biquadFilterUpdateLPF
 1946              	.L132:
 1947              	 .loc 4 339 0
 1948 0186 00BF     	 nop
 1949              	.L120:
 320:../cleanflight/src/main/fc/fc_rc.c ****             if ((1 << i) & interpolationChannels) {  // only update channels specified by rc_interp
 1950              	 .loc 4 320 0 discriminator 2
 1951 0188 7B69     	 ldr r3,[r7,#20]
 1952 018a 0133     	 adds r3,r3,#1
 1953 018c 7B61     	 str r3,[r7,#20]
 1954              	.L119:
 320:../cleanflight/src/main/fc/fc_rc.c ****             if ((1 << i) & interpolationChannels) {  // only update channels specified by rc_interp
 1955              	 .loc 4 320 0 is_stmt 0 discriminator 1
 1956 018e 7B69     	 ldr r3,[r7,#20]
 1957 0190 032B     	 cmp r3,#3
 1958 0192 7FF77CAF 	 ble .L127
 1959              	.L118:
 1960              	.LBE9:
 340:../cleanflight/src/main/fc/fc_rc.c ****                 }
 341:../cleanflight/src/main/fc/fc_rc.c ****             }
 342:../cleanflight/src/main/fc/fc_rc.c ****         }
 343:../cleanflight/src/main/fc/fc_rc.c ****     }
 344:../cleanflight/src/main/fc/fc_rc.c **** 
 345:../cleanflight/src/main/fc/fc_rc.c ****     // update or initialize the derivative filter
 346:../cleanflight/src/main/fc/fc_rc.c ****     oldCutoff = smoothingData->derivativeCutoffFrequency;
 1961              	 .loc 4 346 0 is_stmt 1
 1962 0196 7B68     	 ldr r3,[r7,#4]
 1963 0198 93F89320 	 ldrb r2,[r3,#147]
 1964 019c 93F89430 	 ldrb r3,[r3,#148]
 1965 01a0 1B02     	 lsls r3,r3,#8
 1966 01a2 1343     	 orrs r3,r3,r2
 1967 01a4 FB81     	 strh r3,[r7,#14]
 347:../cleanflight/src/main/fc/fc_rc.c ****     if ((rxConfig()->rc_smoothing_derivative_cutoff == 0) && (rxConfig()->rc_smoothing_derivative_t
 1968              	 .loc 4 347 0
 1969 01a6 FFF7FEFF 	 bl rxConfig
 1970 01aa 0346     	 mov r3,r0
 1971 01ac 93F82630 	 ldrb r3,[r3,#38]
 1972 01b0 002B     	 cmp r3,#0
 1973 01b2 1CD1     	 bne .L128
 1974              	 .loc 4 347 0 is_stmt 0 discriminator 1
 1975 01b4 FFF7FEFF 	 bl rxConfig
 1976 01b8 0346     	 mov r3,r0
 1977 01ba 93F82930 	 ldrb r3,[r3,#41]
 1978 01be 002B     	 cmp r3,#0
 1979 01c0 15D0     	 beq .L128
 348:../cleanflight/src/main/fc/fc_rc.c ****         smoothingData->derivativeCutoffFrequency = calcRcSmoothingCutoff(smoothingData->averageFram
 1980              	 .loc 4 348 0 is_stmt 1
 1981 01c2 7B68     	 ldr r3,[r7,#4]
 1982 01c4 D3F89540 	 ldr r4,[r3,#149]
 1983 01c8 FFF7FEFF 	 bl rxConfig
 1984 01cc 0346     	 mov r3,r0
 1985 01ce 93F82930 	 ldrb r3,[r3,#41]
 1986 01d2 012B     	 cmp r3,#1
 1987 01d4 0CBF     	 ite eq
 1988 01d6 0123     	 moveq r3,#1
 1989 01d8 0023     	 movne r3,#0
 1990 01da DBB2     	 uxtb r3,r3
 1991 01dc 2046     	 mov r0,r4
 1992 01de 1946     	 mov r1,r3
 1993 01e0 FFF7FEFF 	 bl calcRcSmoothingCutoff
 1994 01e4 0346     	 mov r3,r0
 1995 01e6 9AB2     	 uxth r2,r3
 1996 01e8 7B68     	 ldr r3,[r7,#4]
 1997 01ea A3F89320 	 strh r2,[r3,#147]
 1998              	.L128:
 349:../cleanflight/src/main/fc/fc_rc.c ****     }
 350:../cleanflight/src/main/fc/fc_rc.c **** 
 351:../cleanflight/src/main/fc/fc_rc.c ****     if (!smoothingData->filterInitialized) {
 1999              	 .loc 4 351 0
 2000 01ee 7B68     	 ldr r3,[r7,#4]
 2001 01f0 1B78     	 ldrb r3,[r3]
 2002 01f2 83F00103 	 eor r3,r3,#1
 2003 01f6 DBB2     	 uxtb r3,r3
 2004 01f8 002B     	 cmp r3,#0
 2005 01fa 13D0     	 beq .L129
 352:../cleanflight/src/main/fc/fc_rc.c ****         pidInitSetpointDerivativeLpf(smoothingData->derivativeCutoffFrequency, rxConfig()->rc_smoot
 2006              	 .loc 4 352 0
 2007 01fc 7B68     	 ldr r3,[r7,#4]
 2008 01fe B3F89330 	 ldrh r3,[r3,#147]
 2009 0202 9DB2     	 uxth r5,r3
 2010 0204 FFF7FEFF 	 bl rxConfig
 2011 0208 0346     	 mov r3,r0
 2012 020a 93F82740 	 ldrb r4,[r3,#39]
 2013 020e FFF7FEFF 	 bl rxConfig
 2014 0212 0346     	 mov r3,r0
 2015 0214 93F82930 	 ldrb r3,[r3,#41]
 2016 0218 2846     	 mov r0,r5
 2017 021a 2146     	 mov r1,r4
 2018 021c 1A46     	 mov r2,r3
 2019 021e FFF7FEFF 	 bl pidInitSetpointDerivativeLpf
 2020 0222 0DE0     	 b .L115
 2021              	.L129:
 353:../cleanflight/src/main/fc/fc_rc.c ****     } else if (smoothingData->derivativeCutoffFrequency != oldCutoff) {
 2022              	 .loc 4 353 0
 2023 0224 7B68     	 ldr r3,[r7,#4]
 2024 0226 B3F89330 	 ldrh r3,[r3,#147]
 2025 022a 9BB2     	 uxth r3,r3
 2026 022c FA89     	 ldrh r2,[r7,#14]
 2027 022e 9A42     	 cmp r2,r3
 2028 0230 06D0     	 beq .L115
 354:../cleanflight/src/main/fc/fc_rc.c ****         pidUpdateSetpointDerivativeLpf(smoothingData->derivativeCutoffFrequency);
 2029              	 .loc 4 354 0
 2030 0232 7B68     	 ldr r3,[r7,#4]
 2031 0234 B3F89330 	 ldrh r3,[r3,#147]
 2032 0238 9BB2     	 uxth r3,r3
 2033 023a 1846     	 mov r0,r3
 2034 023c FFF7FEFF 	 bl pidUpdateSetpointDerivativeLpf
 2035              	.L115:
 355:../cleanflight/src/main/fc/fc_rc.c ****     }
 356:../cleanflight/src/main/fc/fc_rc.c **** }
 2036              	 .loc 4 356 0
 2037 0240 1837     	 adds r7,r7,#24
 2038              	.LCFI97:
 2039              	 .cfi_def_cfa_offset 16
 2040 0242 BD46     	 mov sp,r7
 2041              	.LCFI98:
 2042              	 .cfi_def_cfa_register 13
 2043              	 
 2044 0244 B0BD     	 pop {r4,r5,r7,pc}
 2045              	.L134:
 2046 0246 00BF     	 .align 2
 2047              	.L133:
 2048 0248 00000000 	 .word targetPidLooptime
 2049 024c BD378635 	 .word 897988541
 2050 0250 00000000 	 .word interpolationChannels
 2051              	 .cfi_endproc
 2052              	.LFE590:
 2054              	 .section .text.rcSmoothingResetAccumulation,"ax",%progbits
 2055              	 .align 2
 2056              	 .global rcSmoothingResetAccumulation
 2057              	 .thumb
 2058              	 .thumb_func
 2060              	rcSmoothingResetAccumulation:
 2061              	.LFB591:
 357:../cleanflight/src/main/fc/fc_rc.c **** 
 358:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE_NOINLINE void rcSmoothingResetAccumulation(rcSmoothingFilter_t *smoothingData)
 359:../cleanflight/src/main/fc/fc_rc.c **** {
 2062              	 .loc 4 359 0
 2063              	 .cfi_startproc
 2064              	 
 2065              	 
 2066              	 
 2067 0000 80B4     	 push {r7}
 2068              	.LCFI99:
 2069              	 .cfi_def_cfa_offset 4
 2070              	 .cfi_offset 7,-4
 2071 0002 83B0     	 sub sp,sp,#12
 2072              	.LCFI100:
 2073              	 .cfi_def_cfa_offset 16
 2074 0004 00AF     	 add r7,sp,#0
 2075              	.LCFI101:
 2076              	 .cfi_def_cfa_register 7
 2077 0006 7860     	 str r0,[r7,#4]
 360:../cleanflight/src/main/fc/fc_rc.c ****     smoothingData->training.sum = 0;
 2078              	 .loc 4 360 0
 2079 0008 7B68     	 ldr r3,[r7,#4]
 2080 000a 9933     	 adds r3,r3,#153
 2081 000c 4FF00002 	 mov r2,#0
 2082 0010 1A60     	 str r2,[r3]
 361:../cleanflight/src/main/fc/fc_rc.c ****     smoothingData->training.count = 0;
 2083              	 .loc 4 361 0
 2084 0012 7B68     	 ldr r3,[r7,#4]
 2085 0014 0022     	 movs r2,#0
 2086 0016 83F89D20 	 strb r2,[r3,#157]
 2087 001a 0022     	 movs r2,#0
 2088 001c 83F89E20 	 strb r2,[r3,#158]
 2089 0020 0022     	 movs r2,#0
 2090 0022 83F89F20 	 strb r2,[r3,#159]
 2091 0026 0022     	 movs r2,#0
 2092 0028 83F8A020 	 strb r2,[r3,#160]
 362:../cleanflight/src/main/fc/fc_rc.c ****     smoothingData->training.min = UINT16_MAX;
 2093              	 .loc 4 362 0
 2094 002c 7B68     	 ldr r3,[r7,#4]
 2095 002e 4FF0FF32 	 mov r2,#-1
 2096 0032 83F8A120 	 strb r2,[r3,#161]
 2097 0036 4FF0FF32 	 mov r2,#-1
 2098 003a 83F8A220 	 strb r2,[r3,#162]
 363:../cleanflight/src/main/fc/fc_rc.c ****     smoothingData->training.max = 0;
 2099              	 .loc 4 363 0
 2100 003e 7B68     	 ldr r3,[r7,#4]
 2101 0040 0022     	 movs r2,#0
 2102 0042 83F8A320 	 strb r2,[r3,#163]
 2103 0046 0022     	 movs r2,#0
 2104 0048 83F8A420 	 strb r2,[r3,#164]
 364:../cleanflight/src/main/fc/fc_rc.c **** }
 2105              	 .loc 4 364 0
 2106 004c 0C37     	 adds r7,r7,#12
 2107              	.LCFI102:
 2108              	 .cfi_def_cfa_offset 4
 2109 004e BD46     	 mov sp,r7
 2110              	.LCFI103:
 2111              	 .cfi_def_cfa_register 13
 2112              	 
 2113 0050 5DF8047B 	 ldr r7,[sp],#4
 2114              	.LCFI104:
 2115              	 .cfi_restore 7
 2116              	 .cfi_def_cfa_offset 0
 2117 0054 7047     	 bx lr
 2118              	 .cfi_endproc
 2119              	.LFE591:
 2121 0056 00BF     	 .section .text.rcSmoothingAccumulateSample,"ax",%progbits
 2122              	 .align 2
 2123              	 .global rcSmoothingAccumulateSample
 2124              	 .thumb
 2125              	 .thumb_func
 2127              	rcSmoothingAccumulateSample:
 2128              	.LFB592:
 365:../cleanflight/src/main/fc/fc_rc.c **** 
 366:../cleanflight/src/main/fc/fc_rc.c **** // Accumulate the rx frame time samples. Once we've collected enough samples calculate the
 367:../cleanflight/src/main/fc/fc_rc.c **** // average and return true.
 368:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE bool rcSmoothingAccumulateSample(rcSmoothingFilter_t *smoothingData, int rxFrameTimeUs)
 369:../cleanflight/src/main/fc/fc_rc.c **** {
 2129              	 .loc 4 369 0
 2130              	 .cfi_startproc
 2131              	 
 2132              	 
 2133 0000 80B5     	 push {r7,lr}
 2134              	.LCFI105:
 2135              	 .cfi_def_cfa_offset 8
 2136              	 .cfi_offset 7,-8
 2137              	 .cfi_offset 14,-4
 2138 0002 86B0     	 sub sp,sp,#24
 2139              	.LCFI106:
 2140              	 .cfi_def_cfa_offset 32
 2141 0004 00AF     	 add r7,sp,#0
 2142              	.LCFI107:
 2143              	 .cfi_def_cfa_register 7
 2144 0006 7860     	 str r0,[r7,#4]
 2145 0008 3960     	 str r1,[r7]
 370:../cleanflight/src/main/fc/fc_rc.c ****     smoothingData->training.sum += rxFrameTimeUs;
 2146              	 .loc 4 370 0
 2147 000a 7B68     	 ldr r3,[r7,#4]
 2148 000c D3F89930 	 ldr r3,[r3,#153]
 2149 0010 3A68     	 ldr r2,[r7]
 2150 0012 07EE902A 	 fmsr s15,r2
 2151 0016 F8EEE77A 	 fsitos s15,s15
 2152 001a 07EE103A 	 fmsr s14,r3
 2153 001e 77EE277A 	 fadds s15,s14,s15
 2154 0022 7B68     	 ldr r3,[r7,#4]
 2155 0024 9933     	 adds r3,r3,#153
 2156 0026 17EE902A 	 fmrs r2,s15
 2157 002a 1A60     	 str r2,[r3]
 371:../cleanflight/src/main/fc/fc_rc.c ****     smoothingData->training.count++;
 2158              	 .loc 4 371 0
 2159 002c 7B68     	 ldr r3,[r7,#4]
 2160 002e D3F89D30 	 ldr r3,[r3,#157]
 2161 0032 5A1C     	 adds r2,r3,#1
 2162 0034 7B68     	 ldr r3,[r7,#4]
 2163 0036 C3F89D20 	 str r2,[r3,#157]
 2164              	.LBB10:
 372:../cleanflight/src/main/fc/fc_rc.c ****     smoothingData->training.max = MAX(smoothingData->training.max, rxFrameTimeUs);
 2165              	 .loc 4 372 0
 2166 003a 7B68     	 ldr r3,[r7,#4]
 2167 003c 93F8A320 	 ldrb r2,[r3,#163]
 2168 0040 93F8A430 	 ldrb r3,[r3,#164]
 2169 0044 1B02     	 lsls r3,r3,#8
 2170 0046 1343     	 orrs r3,r3,r2
 2171 0048 FB82     	 strh r3,[r7,#22]
 2172 004a 3B68     	 ldr r3,[r7]
 2173 004c 3B61     	 str r3,[r7,#16]
 2174 004e FA8A     	 ldrh r2,[r7,#22]
 2175 0050 3B69     	 ldr r3,[r7,#16]
 2176 0052 9342     	 cmp r3,r2
 2177 0054 B8BF     	 it lt
 2178 0056 1346     	 movlt r3,r2
 2179              	.LBE10:
 2180 0058 9AB2     	 uxth r2,r3
 2181 005a 7B68     	 ldr r3,[r7,#4]
 2182 005c A3F8A320 	 strh r2,[r3,#163]
 2183              	.LBB11:
 373:../cleanflight/src/main/fc/fc_rc.c ****     smoothingData->training.min = MIN(smoothingData->training.min, rxFrameTimeUs);
 2184              	 .loc 4 373 0
 2185 0060 7B68     	 ldr r3,[r7,#4]
 2186 0062 93F8A120 	 ldrb r2,[r3,#161]
 2187 0066 93F8A230 	 ldrb r3,[r3,#162]
 2188 006a 1B02     	 lsls r3,r3,#8
 2189 006c 1343     	 orrs r3,r3,r2
 2190 006e FB81     	 strh r3,[r7,#14]
 2191 0070 3B68     	 ldr r3,[r7]
 2192 0072 BB60     	 str r3,[r7,#8]
 2193 0074 FA89     	 ldrh r2,[r7,#14]
 2194 0076 BB68     	 ldr r3,[r7,#8]
 2195 0078 9342     	 cmp r3,r2
 2196 007a A8BF     	 it ge
 2197 007c 1346     	 movge r3,r2
 2198              	.LBE11:
 2199 007e 9AB2     	 uxth r2,r3
 2200 0080 7B68     	 ldr r3,[r7,#4]
 2201 0082 A3F8A120 	 strh r2,[r3,#161]
 374:../cleanflight/src/main/fc/fc_rc.c **** 
 375:../cleanflight/src/main/fc/fc_rc.c ****     // if we've collected enough samples then calculate the average and reset the accumulation
 376:../cleanflight/src/main/fc/fc_rc.c ****     if (smoothingData->training.count >= RC_SMOOTHING_FILTER_TRAINING_SAMPLES) {
 2202              	 .loc 4 376 0
 2203 0086 7B68     	 ldr r3,[r7,#4]
 2204 0088 D3F89D30 	 ldr r3,[r3,#157]
 2205 008c 312B     	 cmp r3,#49
 2206 008e 3DDD     	 ble .L137
 377:../cleanflight/src/main/fc/fc_rc.c ****         smoothingData->training.sum = smoothingData->training.sum - smoothingData->training.min - s
 2207              	 .loc 4 377 0
 2208 0090 7B68     	 ldr r3,[r7,#4]
 2209 0092 D3F89920 	 ldr r2,[r3,#153]
 2210 0096 1346     	 mov r3,r2
 2211 0098 1A46     	 mov r2,r3
 2212 009a 7B68     	 ldr r3,[r7,#4]
 2213 009c B3F8A130 	 ldrh r3,[r3,#161]
 2214 00a0 9BB2     	 uxth r3,r3
 2215 00a2 07EE903A 	 fmsr s15,r3
 2216 00a6 F8EEE77A 	 fsitos s15,s15
 2217 00aa 07EE102A 	 fmsr s14,r2
 2218 00ae 37EE677A 	 fsubs s14,s14,s15
 2219 00b2 7B68     	 ldr r3,[r7,#4]
 2220 00b4 B3F8A330 	 ldrh r3,[r3,#163]
 2221 00b8 9BB2     	 uxth r3,r3
 2222 00ba 07EE903A 	 fmsr s15,r3
 2223 00be F8EEE77A 	 fsitos s15,s15
 2224 00c2 77EE677A 	 fsubs s15,s14,s15
 2225 00c6 7B68     	 ldr r3,[r7,#4]
 2226 00c8 9933     	 adds r3,r3,#153
 2227 00ca 17EE902A 	 fmrs r2,s15
 2228 00ce 1A60     	 str r2,[r3]
 378:../cleanflight/src/main/fc/fc_rc.c ****         smoothingData->averageFrameTimeUs = lrintf(smoothingData->training.sum / (smoothingData->tr
 2229              	 .loc 4 378 0
 2230 00d0 7B68     	 ldr r3,[r7,#4]
 2231 00d2 D3F89920 	 ldr r2,[r3,#153]
 2232 00d6 1346     	 mov r3,r2
 2233 00d8 1A46     	 mov r2,r3
 2234 00da 7B68     	 ldr r3,[r7,#4]
 2235 00dc D3F89D30 	 ldr r3,[r3,#157]
 2236 00e0 023B     	 subs r3,r3,#2
 2237 00e2 07EE903A 	 fmsr s15,r3
 2238 00e6 F8EEE77A 	 fsitos s15,s15
 2239 00ea 07EE102A 	 fmsr s14,r2
 2240 00ee C7EE277A 	 fdivs s15,s14,s15
 2241 00f2 17EE900A 	 fmrs r0,s15
 2242 00f6 FFF7FEFF 	 bl lrintf
 2243 00fa 0246     	 mov r2,r0
 2244 00fc 7B68     	 ldr r3,[r7,#4]
 2245 00fe C3F89520 	 str r2,[r3,#149]
 379:../cleanflight/src/main/fc/fc_rc.c ****         rcSmoothingResetAccumulation(smoothingData);
 2246              	 .loc 4 379 0
 2247 0102 7868     	 ldr r0,[r7,#4]
 2248 0104 FFF7FEFF 	 bl rcSmoothingResetAccumulation
 380:../cleanflight/src/main/fc/fc_rc.c ****         return true;
 2249              	 .loc 4 380 0
 2250 0108 0123     	 movs r3,#1
 2251 010a 00E0     	 b .L138
 2252              	.L137:
 381:../cleanflight/src/main/fc/fc_rc.c ****     }
 382:../cleanflight/src/main/fc/fc_rc.c ****     return false;
 2253              	 .loc 4 382 0
 2254 010c 0023     	 movs r3,#0
 2255              	.L138:
 383:../cleanflight/src/main/fc/fc_rc.c **** }
 2256              	 .loc 4 383 0
 2257 010e 1846     	 mov r0,r3
 2258 0110 1837     	 adds r7,r7,#24
 2259              	.LCFI108:
 2260              	 .cfi_def_cfa_offset 8
 2261 0112 BD46     	 mov sp,r7
 2262              	.LCFI109:
 2263              	 .cfi_def_cfa_register 13
 2264              	 
 2265 0114 80BD     	 pop {r7,pc}
 2266              	 .cfi_endproc
 2267              	.LFE592:
 2269 0116 00BF     	 .section .text.rcSmoothingAutoCalculate,"ax",%progbits
 2270              	 .align 2
 2271              	 .global rcSmoothingAutoCalculate
 2272              	 .thumb
 2273              	 .thumb_func
 2275              	rcSmoothingAutoCalculate:
 2276              	.LFB593:
 384:../cleanflight/src/main/fc/fc_rc.c **** 
 385:../cleanflight/src/main/fc/fc_rc.c **** // Determine if we need to caclulate filter cutoffs. If not then we can avoid
 386:../cleanflight/src/main/fc/fc_rc.c **** // examining the rx frame times completely 
 387:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE_NOINLINE bool rcSmoothingAutoCalculate(void)
 388:../cleanflight/src/main/fc/fc_rc.c **** {
 2277              	 .loc 4 388 0
 2278              	 .cfi_startproc
 2279              	 
 2280              	 
 2281 0000 80B5     	 push {r7,lr}
 2282              	.LCFI110:
 2283              	 .cfi_def_cfa_offset 8
 2284              	 .cfi_offset 7,-8
 2285              	 .cfi_offset 14,-4
 2286 0002 82B0     	 sub sp,sp,#8
 2287              	.LCFI111:
 2288              	 .cfi_def_cfa_offset 16
 2289 0004 00AF     	 add r7,sp,#0
 2290              	.LCFI112:
 2291              	 .cfi_def_cfa_register 7
 389:../cleanflight/src/main/fc/fc_rc.c ****     bool ret = false;
 2292              	 .loc 4 389 0
 2293 0006 0023     	 movs r3,#0
 2294 0008 FB71     	 strb r3,[r7,#7]
 390:../cleanflight/src/main/fc/fc_rc.c **** 
 391:../cleanflight/src/main/fc/fc_rc.c ****     // if the input cutoff is 0 (auto) then we need to calculate cutoffs
 392:../cleanflight/src/main/fc/fc_rc.c ****     if (rxConfig()->rc_smoothing_input_cutoff == 0) {
 2295              	 .loc 4 392 0
 2296 000a FFF7FEFF 	 bl rxConfig
 2297 000e 0346     	 mov r3,r0
 2298 0010 93F82530 	 ldrb r3,[r3,#37]
 2299 0014 002B     	 cmp r3,#0
 2300 0016 01D1     	 bne .L140
 393:../cleanflight/src/main/fc/fc_rc.c ****         ret = true;
 2301              	 .loc 4 393 0
 2302 0018 0123     	 movs r3,#1
 2303 001a FB71     	 strb r3,[r7,#7]
 2304              	.L140:
 394:../cleanflight/src/main/fc/fc_rc.c ****     }
 395:../cleanflight/src/main/fc/fc_rc.c **** 
 396:../cleanflight/src/main/fc/fc_rc.c ****     // if the derivative type isn't OFF and the cutoff is 0 then we need to calculate
 397:../cleanflight/src/main/fc/fc_rc.c ****     if (rxConfig()->rc_smoothing_derivative_type != RC_SMOOTHING_DERIVATIVE_OFF) {
 2305              	 .loc 4 397 0
 2306 001c FFF7FEFF 	 bl rxConfig
 2307 0020 0346     	 mov r3,r0
 2308 0022 93F82930 	 ldrb r3,[r3,#41]
 2309 0026 002B     	 cmp r3,#0
 2310 0028 08D0     	 beq .L141
 398:../cleanflight/src/main/fc/fc_rc.c ****         if (rxConfig()->rc_smoothing_derivative_cutoff == 0) {
 2311              	 .loc 4 398 0
 2312 002a FFF7FEFF 	 bl rxConfig
 2313 002e 0346     	 mov r3,r0
 2314 0030 93F82630 	 ldrb r3,[r3,#38]
 2315 0034 002B     	 cmp r3,#0
 2316 0036 01D1     	 bne .L141
 399:../cleanflight/src/main/fc/fc_rc.c ****             ret = true;
 2317              	 .loc 4 399 0
 2318 0038 0123     	 movs r3,#1
 2319 003a FB71     	 strb r3,[r7,#7]
 2320              	.L141:
 400:../cleanflight/src/main/fc/fc_rc.c ****         }
 401:../cleanflight/src/main/fc/fc_rc.c ****     }
 402:../cleanflight/src/main/fc/fc_rc.c ****     return ret;
 2321              	 .loc 4 402 0
 2322 003c FB79     	 ldrb r3,[r7,#7]
 403:../cleanflight/src/main/fc/fc_rc.c **** }
 2323              	 .loc 4 403 0
 2324 003e 1846     	 mov r0,r3
 2325 0040 0837     	 adds r7,r7,#8
 2326              	.LCFI113:
 2327              	 .cfi_def_cfa_offset 8
 2328 0042 BD46     	 mov sp,r7
 2329              	.LCFI114:
 2330              	 .cfi_def_cfa_register 13
 2331              	 
 2332 0044 80BD     	 pop {r7,pc}
 2333              	 .cfi_endproc
 2334              	.LFE593:
 2336 0046 00BF     	 .section .text.processRcSmoothingFilter,"ax",%progbits
 2337              	 .align 2
 2338              	 .global processRcSmoothingFilter
 2339              	 .thumb
 2340              	 .thumb_func
 2342              	processRcSmoothingFilter:
 2343              	.LFB594:
 404:../cleanflight/src/main/fc/fc_rc.c **** 
 405:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE uint8_t processRcSmoothingFilter(void)
 406:../cleanflight/src/main/fc/fc_rc.c **** {
 2344              	 .loc 4 406 0
 2345              	 .cfi_startproc
 2346              	 
 2347              	 
 2348 0000 90B5     	 push {r4,r7,lr}
 2349              	.LCFI115:
 2350              	 .cfi_def_cfa_offset 12
 2351              	 .cfi_offset 4,-12
 2352              	 .cfi_offset 7,-8
 2353              	 .cfi_offset 14,-4
 2354 0002 89B0     	 sub sp,sp,#36
 2355              	.LCFI116:
 2356              	 .cfi_def_cfa_offset 48
 2357 0004 00AF     	 add r7,sp,#0
 2358              	.LCFI117:
 2359              	 .cfi_def_cfa_register 7
 407:../cleanflight/src/main/fc/fc_rc.c ****     uint8_t updatedChannel = 0;
 2360              	 .loc 4 407 0
 2361 0006 0023     	 movs r3,#0
 2362 0008 FB77     	 strb r3,[r7,#31]
 408:../cleanflight/src/main/fc/fc_rc.c ****     static FAST_RAM_ZERO_INIT float lastRxData[4];
 409:../cleanflight/src/main/fc/fc_rc.c ****     static FAST_RAM_ZERO_INIT bool initialized;
 410:../cleanflight/src/main/fc/fc_rc.c ****     static FAST_RAM_ZERO_INIT timeMs_t validRxFrameTimeMs;
 411:../cleanflight/src/main/fc/fc_rc.c ****     static FAST_RAM_ZERO_INIT bool calculateCutoffs;
 412:../cleanflight/src/main/fc/fc_rc.c **** 
 413:../cleanflight/src/main/fc/fc_rc.c ****     // first call initialization
 414:../cleanflight/src/main/fc/fc_rc.c ****     if (!initialized) {
 2363              	 .loc 4 414 0
 2364 000a A24B     	 ldr r3,.L174
 2365 000c 1B78     	 ldrb r3,[r3]
 2366 000e 83F00103 	 eor r3,r3,#1
 2367 0012 DBB2     	 uxtb r3,r3
 2368 0014 002B     	 cmp r3,#0
 2369 0016 41D0     	 beq .L144
 415:../cleanflight/src/main/fc/fc_rc.c ****         initialized = true;
 2370              	 .loc 4 415 0
 2371 0018 9E4B     	 ldr r3,.L174
 2372 001a 0122     	 movs r2,#1
 2373 001c 1A70     	 strb r2,[r3]
 416:../cleanflight/src/main/fc/fc_rc.c ****         rcSmoothingData.filterInitialized = false;
 2374              	 .loc 4 416 0
 2375 001e 9E4B     	 ldr r3,.L174+4
 2376 0020 0022     	 movs r2,#0
 2377 0022 1A70     	 strb r2,[r3]
 417:../cleanflight/src/main/fc/fc_rc.c ****         rcSmoothingData.averageFrameTimeUs = 0;
 2378              	 .loc 4 417 0
 2379 0024 9C4B     	 ldr r3,.L174+4
 2380 0026 0022     	 movs r2,#0
 2381 0028 83F89520 	 strb r2,[r3,#149]
 2382 002c 0022     	 movs r2,#0
 2383 002e 83F89620 	 strb r2,[r3,#150]
 2384 0032 0022     	 movs r2,#0
 2385 0034 83F89720 	 strb r2,[r3,#151]
 2386 0038 0022     	 movs r2,#0
 2387 003a 83F89820 	 strb r2,[r3,#152]
 418:../cleanflight/src/main/fc/fc_rc.c ****         rcSmoothingResetAccumulation(&rcSmoothingData);
 2388              	 .loc 4 418 0
 2389 003e 9648     	 ldr r0,.L174+4
 2390 0040 FFF7FEFF 	 bl rcSmoothingResetAccumulation
 419:../cleanflight/src/main/fc/fc_rc.c ****         
 420:../cleanflight/src/main/fc/fc_rc.c ****         rcSmoothingData.inputCutoffFrequency = rxConfig()->rc_smoothing_input_cutoff;
 2391              	 .loc 4 420 0
 2392 0044 FFF7FEFF 	 bl rxConfig
 2393 0048 0346     	 mov r3,r0
 2394 004a 93F82530 	 ldrb r3,[r3,#37]
 2395 004e 9AB2     	 uxth r2,r3
 2396 0050 914B     	 ldr r3,.L174+4
 2397 0052 A3F89120 	 strh r2,[r3,#145]
 421:../cleanflight/src/main/fc/fc_rc.c ****         
 422:../cleanflight/src/main/fc/fc_rc.c ****         if (rxConfig()->rc_smoothing_derivative_type != RC_SMOOTHING_DERIVATIVE_OFF) {
 2398              	 .loc 4 422 0
 2399 0056 FFF7FEFF 	 bl rxConfig
 2400 005a 0346     	 mov r3,r0
 2401 005c 93F82930 	 ldrb r3,[r3,#41]
 2402 0060 002B     	 cmp r3,#0
 2403 0062 08D0     	 beq .L145
 423:../cleanflight/src/main/fc/fc_rc.c ****             rcSmoothingData.derivativeCutoffFrequency = rxConfig()->rc_smoothing_derivative_cutoff;
 2404              	 .loc 4 423 0
 2405 0064 FFF7FEFF 	 bl rxConfig
 2406 0068 0346     	 mov r3,r0
 2407 006a 93F82630 	 ldrb r3,[r3,#38]
 2408 006e 9AB2     	 uxth r2,r3
 2409 0070 894B     	 ldr r3,.L174+4
 2410 0072 A3F89320 	 strh r2,[r3,#147]
 2411              	.L145:
 424:../cleanflight/src/main/fc/fc_rc.c ****         }
 425:../cleanflight/src/main/fc/fc_rc.c ****         
 426:../cleanflight/src/main/fc/fc_rc.c ****         calculateCutoffs = rcSmoothingAutoCalculate();
 2412              	 .loc 4 426 0
 2413 0076 FFF7FEFF 	 bl rcSmoothingAutoCalculate
 2414 007a 0346     	 mov r3,r0
 2415 007c 1A46     	 mov r2,r3
 2416 007e 874B     	 ldr r3,.L174+8
 2417 0080 1A70     	 strb r2,[r3]
 427:../cleanflight/src/main/fc/fc_rc.c **** 
 428:../cleanflight/src/main/fc/fc_rc.c ****         // if we don't need to calculate cutoffs dynamically then the filters can be initialized no
 429:../cleanflight/src/main/fc/fc_rc.c ****         if (!calculateCutoffs) {
 2418              	 .loc 4 429 0
 2419 0082 864B     	 ldr r3,.L174+8
 2420 0084 1B78     	 ldrb r3,[r3]
 2421 0086 83F00103 	 eor r3,r3,#1
 2422 008a DBB2     	 uxtb r3,r3
 2423 008c 002B     	 cmp r3,#0
 2424 008e 05D0     	 beq .L144
 430:../cleanflight/src/main/fc/fc_rc.c ****             rcSmoothingSetFilterCutoffs(&rcSmoothingData);
 2425              	 .loc 4 430 0
 2426 0090 8148     	 ldr r0,.L174+4
 2427 0092 FFF7FEFF 	 bl rcSmoothingSetFilterCutoffs
 431:../cleanflight/src/main/fc/fc_rc.c ****             rcSmoothingData.filterInitialized = true;
 2428              	 .loc 4 431 0
 2429 0096 804B     	 ldr r3,.L174+4
 2430 0098 0122     	 movs r2,#1
 2431 009a 1A70     	 strb r2,[r3]
 2432              	.L144:
 432:../cleanflight/src/main/fc/fc_rc.c ****         }
 433:../cleanflight/src/main/fc/fc_rc.c ****     }
 434:../cleanflight/src/main/fc/fc_rc.c **** 
 435:../cleanflight/src/main/fc/fc_rc.c ****     if (isRXDataNew) {
 2433              	 .loc 4 435 0
 2434 009c 804B     	 ldr r3,.L174+12
 2435 009e 1B78     	 ldrb r3,[r3]
 2436 00a0 002B     	 cmp r3,#0
 2437 00a2 00F0CE80 	 beq .L146
 2438              	.LBB12:
 436:../cleanflight/src/main/fc/fc_rc.c **** 
 437:../cleanflight/src/main/fc/fc_rc.c ****         // store the new raw channel values
 438:../cleanflight/src/main/fc/fc_rc.c ****         for (int i = 0; i < PRIMARY_CHANNEL_COUNT; i++) {
 2439              	 .loc 4 438 0
 2440 00a6 0023     	 movs r3,#0
 2441 00a8 BB61     	 str r3,[r7,#24]
 2442 00aa 16E0     	 b .L147
 2443              	.L149:
 439:../cleanflight/src/main/fc/fc_rc.c ****             if ((1 << i) & interpolationChannels) {
 2444              	 .loc 4 439 0
 2445 00ac 7D4B     	 ldr r3,.L174+16
 2446 00ae 1B78     	 ldrb r3,[r3]
 2447 00b0 1A46     	 mov r2,r3
 2448 00b2 BB69     	 ldr r3,[r7,#24]
 2449 00b4 42FA03F3 	 asr r3,r2,r3
 2450 00b8 03F00103 	 and r3,r3,#1
 2451 00bc 002B     	 cmp r3,#0
 2452 00be 09D0     	 beq .L148
 440:../cleanflight/src/main/fc/fc_rc.c ****                 lastRxData[i] = rcCommand[i];
 2453              	 .loc 4 440 0
 2454 00c0 794A     	 ldr r2,.L174+20
 2455 00c2 BB69     	 ldr r3,[r7,#24]
 2456 00c4 9B00     	 lsls r3,r3,#2
 2457 00c6 1344     	 add r3,r3,r2
 2458 00c8 1A68     	 ldr r2,[r3]
 2459 00ca 7849     	 ldr r1,.L174+24
 2460 00cc BB69     	 ldr r3,[r7,#24]
 2461 00ce 9B00     	 lsls r3,r3,#2
 2462 00d0 0B44     	 add r3,r3,r1
 2463 00d2 1A60     	 str r2,[r3]
 2464              	.L148:
 438:../cleanflight/src/main/fc/fc_rc.c ****             if ((1 << i) & interpolationChannels) {
 2465              	 .loc 4 438 0 discriminator 2
 2466 00d4 BB69     	 ldr r3,[r7,#24]
 2467 00d6 0133     	 adds r3,r3,#1
 2468 00d8 BB61     	 str r3,[r7,#24]
 2469              	.L147:
 438:../cleanflight/src/main/fc/fc_rc.c ****             if ((1 << i) & interpolationChannels) {
 2470              	 .loc 4 438 0 is_stmt 0 discriminator 1
 2471 00da BB69     	 ldr r3,[r7,#24]
 2472 00dc 032B     	 cmp r3,#3
 2473 00de E5DD     	 ble .L149
 2474              	.LBE12:
 441:../cleanflight/src/main/fc/fc_rc.c ****             }
 442:../cleanflight/src/main/fc/fc_rc.c ****         }
 443:../cleanflight/src/main/fc/fc_rc.c **** 
 444:../cleanflight/src/main/fc/fc_rc.c ****         // for dynamically calculated filters we need to examine each rx frame interval
 445:../cleanflight/src/main/fc/fc_rc.c ****         if (calculateCutoffs) {
 2475              	 .loc 4 445 0 is_stmt 1
 2476 00e0 6E4B     	 ldr r3,.L174+8
 2477 00e2 1B78     	 ldrb r3,[r3]
 2478 00e4 002B     	 cmp r3,#0
 2479 00e6 00F0AC80 	 beq .L146
 2480              	.LBB13:
 446:../cleanflight/src/main/fc/fc_rc.c ****             const timeMs_t currentTimeMs = millis();
 2481              	 .loc 4 446 0
 2482 00ea FFF7FEFF 	 bl millis
 2483 00ee F860     	 str r0,[r7,#12]
 447:../cleanflight/src/main/fc/fc_rc.c ****             int sampleState = 0;
 2484              	 .loc 4 447 0
 2485 00f0 0023     	 movs r3,#0
 2486 00f2 7B61     	 str r3,[r7,#20]
 448:../cleanflight/src/main/fc/fc_rc.c **** 
 449:../cleanflight/src/main/fc/fc_rc.c ****             // If the filter cutoffs are set to auto and we have good rx data, then determine the a
 450:../cleanflight/src/main/fc/fc_rc.c ****             // and use that to calculate the filter cutoff frequencies
 451:../cleanflight/src/main/fc/fc_rc.c ****             if ((currentTimeMs > RC_SMOOTHING_FILTER_STARTUP_DELAY_MS) && (targetPidLooptime > 0)) 
 2487              	 .loc 4 451 0
 2488 00f4 FB68     	 ldr r3,[r7,#12]
 2489 00f6 41F28832 	 movw r2,#5000
 2490 00fa 9342     	 cmp r3,r2
 2491 00fc 78D9     	 bls .L150
 2492              	 .loc 4 451 0 is_stmt 0 discriminator 1
 2493 00fe 6C4B     	 ldr r3,.L174+28
 2494 0100 1B68     	 ldr r3,[r3]
 2495 0102 002B     	 cmp r3,#0
 2496 0104 74D0     	 beq .L150
 452:../cleanflight/src/main/fc/fc_rc.c ****                 if (rxIsReceivingSignal()  && rcSmoothingRxRateValid(currentRxRefreshRate)) {
 2497              	 .loc 4 452 0 is_stmt 1
 2498 0106 FFF7FEFF 	 bl rxIsReceivingSignal
 2499 010a 0346     	 mov r3,r0
 2500 010c 002B     	 cmp r3,#0
 2501 010e 6CD0     	 beq .L151
 2502              	 .loc 4 452 0 is_stmt 0 discriminator 1
 2503 0110 684B     	 ldr r3,.L174+32
 2504 0112 1B88     	 ldrh r3,[r3]
 2505 0114 1846     	 mov r0,r3
 2506 0116 FFF7FEFF 	 bl rcSmoothingRxRateValid
 2507 011a 0346     	 mov r3,r0
 2508 011c 002B     	 cmp r3,#0
 2509 011e 64D0     	 beq .L151
 453:../cleanflight/src/main/fc/fc_rc.c **** 
 454:../cleanflight/src/main/fc/fc_rc.c ****                     // set the guard time expiration if it's not set
 455:../cleanflight/src/main/fc/fc_rc.c ****                     if (validRxFrameTimeMs == 0) {
 2510              	 .loc 4 455 0 is_stmt 1
 2511 0120 654B     	 ldr r3,.L174+36
 2512 0122 1B68     	 ldr r3,[r3]
 2513 0124 002B     	 cmp r3,#0
 2514 0126 0DD1     	 bne .L152
 456:../cleanflight/src/main/fc/fc_rc.c ****                         validRxFrameTimeMs = currentTimeMs + (rcSmoothingData.filterInitialized ? R
 2515              	 .loc 4 456 0
 2516 0128 5B4B     	 ldr r3,.L174+4
 2517 012a 1B78     	 ldrb r3,[r3]
 2518 012c 002B     	 cmp r3,#0
 2519 012e 02D0     	 beq .L153
 2520              	 .loc 4 456 0 is_stmt 0 discriminator 1
 2521 0130 4FF4FA62 	 mov r2,#2000
 2522 0134 01E0     	 b .L154
 2523              	.L153:
 2524              	 .loc 4 456 0 discriminator 2
 2525 0136 4FF47A72 	 mov r2,#1000
 2526              	.L154:
 2527              	 .loc 4 456 0 discriminator 4
 2528 013a FB68     	 ldr r3,[r7,#12]
 2529 013c 1344     	 add r3,r3,r2
 2530 013e 5E4A     	 ldr r2,.L174+36
 2531 0140 1360     	 str r3,[r2]
 2532 0142 01E0     	 b .L155
 2533              	.L152:
 457:../cleanflight/src/main/fc/fc_rc.c ****                     } else {
 458:../cleanflight/src/main/fc/fc_rc.c ****                         sampleState = 1;
 2534              	 .loc 4 458 0 is_stmt 1
 2535 0144 0123     	 movs r3,#1
 2536 0146 7B61     	 str r3,[r7,#20]
 2537              	.L155:
 459:../cleanflight/src/main/fc/fc_rc.c ****                     }
 460:../cleanflight/src/main/fc/fc_rc.c **** 
 461:../cleanflight/src/main/fc/fc_rc.c ****                     // if the guard time has expired then process the rx frame time
 462:../cleanflight/src/main/fc/fc_rc.c ****                     if (currentTimeMs > validRxFrameTimeMs) {
 2538              	 .loc 4 462 0
 2539 0148 5B4B     	 ldr r3,.L174+36
 2540 014a 1B68     	 ldr r3,[r3]
 2541 014c FA68     	 ldr r2,[r7,#12]
 2542 014e 9A42     	 cmp r2,r3
 2543 0150 4AD9     	 bls .L156
 2544              	.LBB14:
 463:../cleanflight/src/main/fc/fc_rc.c ****                         sampleState = 2;
 2545              	 .loc 4 463 0
 2546 0152 0223     	 movs r3,#2
 2547 0154 7B61     	 str r3,[r7,#20]
 464:../cleanflight/src/main/fc/fc_rc.c ****                         bool accumulateSample = true;
 2548              	 .loc 4 464 0
 2549 0156 0123     	 movs r3,#1
 2550 0158 FB74     	 strb r3,[r7,#19]
 465:../cleanflight/src/main/fc/fc_rc.c **** 
 466:../cleanflight/src/main/fc/fc_rc.c ****                         // During initial training process all samples.
 467:../cleanflight/src/main/fc/fc_rc.c ****                         // During retraining check samples to determine if they vary by more than t
 468:../cleanflight/src/main/fc/fc_rc.c ****                         if (rcSmoothingData.filterInitialized) {
 2551              	 .loc 4 468 0
 2552 015a 4F4B     	 ldr r3,.L174+4
 2553 015c 1B78     	 ldrb r3,[r3]
 2554 015e 002B     	 cmp r3,#0
 2555 0160 2CD0     	 beq .L157
 2556              	.LBB15:
 2557              	.LBB16:
 469:../cleanflight/src/main/fc/fc_rc.c ****                             const float percentChange = (ABS(currentRxRefreshRate - rcSmoothingData
 2558              	 .loc 4 469 0
 2559 0162 544B     	 ldr r3,.L174+32
 2560 0164 1B88     	 ldrh r3,[r3]
 2561 0166 1A46     	 mov r2,r3
 2562 0168 4B4B     	 ldr r3,.L174+4
 2563 016a D3F89530 	 ldr r3,[r3,#149]
 2564 016e D31A     	 subs r3,r2,r3
 2565 0170 BB60     	 str r3,[r7,#8]
 2566 0172 BB68     	 ldr r3,[r7,#8]
 2567 0174 002B     	 cmp r3,#0
 2568 0176 B8BF     	 it lt
 2569 0178 5B42     	 rsblt r3,r3,#0
 2570              	.LBE16:
 2571 017a 07EE903A 	 fmsr s15,r3
 2572 017e B8EEE77A 	 fsitos s14,s15
 2573 0182 454B     	 ldr r3,.L174+4
 2574 0184 D3F89530 	 ldr r3,[r3,#149]
 2575 0188 07EE903A 	 fmsr s15,r3
 2576 018c F8EEE77A 	 fsitos s15,s15
 2577 0190 C7EE277A 	 fdivs s15,s14,s15
 2578 0194 9FED497A 	 flds s14,.L174+40
 2579 0198 67EE877A 	 fmuls s15,s15,s14
 2580 019c C7ED017A 	 fsts s15,[r7,#4]
 470:../cleanflight/src/main/fc/fc_rc.c ****                             if (percentChange < RC_SMOOTHING_RX_RATE_CHANGE_PERCENT) {
 2581              	 .loc 4 470 0
 2582 01a0 D7ED017A 	 flds s15,[r7,#4]
 2583 01a4 B3EE047A 	 fconsts s14,#52
 2584 01a8 F4EEC77A 	 fcmpes s15,s14
 2585 01ac F1EE10FA 	 fmstat
 2586 01b0 04D5     	 bpl .L157
 471:../cleanflight/src/main/fc/fc_rc.c ****                                 // We received a sample that wasn't more than the limit percent so 
 472:../cleanflight/src/main/fc/fc_rc.c ****                                 // During retraining we need a contiguous block of samples that are
 473:../cleanflight/src/main/fc/fc_rc.c ****                                 rcSmoothingResetAccumulation(&rcSmoothingData);
 2587              	 .loc 4 473 0
 2588 01b2 3948     	 ldr r0,.L174+4
 2589 01b4 FFF7FEFF 	 bl rcSmoothingResetAccumulation
 474:../cleanflight/src/main/fc/fc_rc.c ****                                 accumulateSample = false;
 2590              	 .loc 4 474 0
 2591 01b8 0023     	 movs r3,#0
 2592 01ba FB74     	 strb r3,[r7,#19]
 2593              	.L157:
 2594              	.LBE15:
 475:../cleanflight/src/main/fc/fc_rc.c ****                             }
 476:../cleanflight/src/main/fc/fc_rc.c ****                         }
 477:../cleanflight/src/main/fc/fc_rc.c **** 
 478:../cleanflight/src/main/fc/fc_rc.c ****                         // accumlate the sample into the average
 479:../cleanflight/src/main/fc/fc_rc.c ****                         if (accumulateSample) {
 2595              	 .loc 4 479 0
 2596 01bc FB7C     	 ldrb r3,[r7,#19]
 2597 01be 002B     	 cmp r3,#0
 2598 01c0 12D0     	 beq .L156
 480:../cleanflight/src/main/fc/fc_rc.c ****                             if (rcSmoothingAccumulateSample(&rcSmoothingData, currentRxRefreshRate)
 2599              	 .loc 4 480 0
 2600 01c2 3C4B     	 ldr r3,.L174+32
 2601 01c4 1B88     	 ldrh r3,[r3]
 2602 01c6 3448     	 ldr r0,.L174+4
 2603 01c8 1946     	 mov r1,r3
 2604 01ca FFF7FEFF 	 bl rcSmoothingAccumulateSample
 2605 01ce 0346     	 mov r3,r0
 2606 01d0 002B     	 cmp r3,#0
 2607 01d2 09D0     	 beq .L156
 481:../cleanflight/src/main/fc/fc_rc.c ****                                 // the required number of samples were collected so set the filter 
 482:../cleanflight/src/main/fc/fc_rc.c ****                                 rcSmoothingSetFilterCutoffs(&rcSmoothingData);
 2608              	 .loc 4 482 0
 2609 01d4 3048     	 ldr r0,.L174+4
 2610 01d6 FFF7FEFF 	 bl rcSmoothingSetFilterCutoffs
 483:../cleanflight/src/main/fc/fc_rc.c ****                                 rcSmoothingData.filterInitialized = true;
 2611              	 .loc 4 483 0
 2612 01da 2F4B     	 ldr r3,.L174+4
 2613 01dc 0122     	 movs r2,#1
 2614 01de 1A70     	 strb r2,[r3]
 484:../cleanflight/src/main/fc/fc_rc.c ****                                 validRxFrameTimeMs = 0;
 2615              	 .loc 4 484 0
 2616 01e0 354B     	 ldr r3,.L174+36
 2617 01e2 0022     	 movs r2,#0
 2618 01e4 1A60     	 str r2,[r3]
 2619              	.LBE14:
 462:../cleanflight/src/main/fc/fc_rc.c ****                         sampleState = 2;
 2620              	 .loc 4 462 0
 2621 01e6 03E0     	 b .L150
 2622              	.L156:
 2623 01e8 02E0     	 b .L150
 2624              	.L151:
 485:../cleanflight/src/main/fc/fc_rc.c ****                             }
 486:../cleanflight/src/main/fc/fc_rc.c ****                         }
 487:../cleanflight/src/main/fc/fc_rc.c **** 
 488:../cleanflight/src/main/fc/fc_rc.c ****                     }
 489:../cleanflight/src/main/fc/fc_rc.c ****                 } else {
 490:../cleanflight/src/main/fc/fc_rc.c ****                     // we have either stopped receiving rx samples (failsafe?) or the sample time i
 491:../cleanflight/src/main/fc/fc_rc.c ****                     rcSmoothingResetAccumulation(&rcSmoothingData);
 2625              	 .loc 4 491 0
 2626 01ea 2B48     	 ldr r0,.L174+4
 2627 01ec FFF7FEFF 	 bl rcSmoothingResetAccumulation
 2628              	.L150:
 492:../cleanflight/src/main/fc/fc_rc.c ****                 }
 493:../cleanflight/src/main/fc/fc_rc.c ****             }
 494:../cleanflight/src/main/fc/fc_rc.c **** 
 495:../cleanflight/src/main/fc/fc_rc.c ****             // rx frame rate training blackbox debugging
 496:../cleanflight/src/main/fc/fc_rc.c ****             if (debugMode == DEBUG_RC_SMOOTHING_RATE) {
 2629              	 .loc 4 496 0
 2630 01f0 334B     	 ldr r3,.L174+44
 2631 01f2 1B78     	 ldrb r3,[r3]
 2632 01f4 2A2B     	 cmp r3,#42
 2633 01f6 24D1     	 bne .L146
 497:../cleanflight/src/main/fc/fc_rc.c ****                 DEBUG_SET(DEBUG_RC_SMOOTHING_RATE, 0, currentRxRefreshRate);              // log ea
 2634              	 .loc 4 497 0
 2635 01f8 314B     	 ldr r3,.L174+44
 2636 01fa 1B78     	 ldrb r3,[r3]
 2637 01fc 2A2B     	 cmp r3,#42
 2638 01fe 04D1     	 bne .L159
 2639              	 .loc 4 497 0 is_stmt 0 discriminator 1
 2640 0200 2C4B     	 ldr r3,.L174+32
 2641 0202 1B88     	 ldrh r3,[r3]
 2642 0204 9AB2     	 uxth r2,r3
 2643 0206 2F4B     	 ldr r3,.L174+48
 2644 0208 1A80     	 strh r2,[r3]
 2645              	.L159:
 498:../cleanflight/src/main/fc/fc_rc.c ****                 DEBUG_SET(DEBUG_RC_SMOOTHING_RATE, 1, rcSmoothingData.training.count);    // log th
 2646              	 .loc 4 498 0 is_stmt 1
 2647 020a 2D4B     	 ldr r3,.L174+44
 2648 020c 1B78     	 ldrb r3,[r3]
 2649 020e 2A2B     	 cmp r3,#42
 2650 0210 05D1     	 bne .L160
 2651              	 .loc 4 498 0 is_stmt 0 discriminator 1
 2652 0212 214B     	 ldr r3,.L174+4
 2653 0214 D3F89D30 	 ldr r3,[r3,#157]
 2654 0218 9AB2     	 uxth r2,r3
 2655 021a 2A4B     	 ldr r3,.L174+48
 2656 021c 5A80     	 strh r2,[r3,#2]
 2657              	.L160:
 499:../cleanflight/src/main/fc/fc_rc.c ****                 DEBUG_SET(DEBUG_RC_SMOOTHING_RATE, 2, rcSmoothingData.averageFrameTimeUs);// the cu
 2658              	 .loc 4 499 0 is_stmt 1
 2659 021e 284B     	 ldr r3,.L174+44
 2660 0220 1B78     	 ldrb r3,[r3]
 2661 0222 2A2B     	 cmp r3,#42
 2662 0224 05D1     	 bne .L161
 2663              	 .loc 4 499 0 is_stmt 0 discriminator 1
 2664 0226 1C4B     	 ldr r3,.L174+4
 2665 0228 D3F89530 	 ldr r3,[r3,#149]
 2666 022c 9AB2     	 uxth r2,r3
 2667 022e 254B     	 ldr r3,.L174+48
 2668 0230 9A80     	 strh r2,[r3,#4]
 2669              	.L161:
 500:../cleanflight/src/main/fc/fc_rc.c ****                 DEBUG_SET(DEBUG_RC_SMOOTHING_RATE, 3, sampleState);                       // indica
 2670              	 .loc 4 500 0 is_stmt 1
 2671 0232 234B     	 ldr r3,.L174+44
 2672 0234 1B78     	 ldrb r3,[r3]
 2673 0236 2A2B     	 cmp r3,#42
 2674 0238 03D1     	 bne .L146
 2675              	 .loc 4 500 0 is_stmt 0 discriminator 1
 2676 023a 7B69     	 ldr r3,[r7,#20]
 2677 023c 9AB2     	 uxth r2,r3
 2678 023e 214B     	 ldr r3,.L174+48
 2679 0240 DA80     	 strh r2,[r3,#6]
 2680              	.L146:
 2681              	.LBE13:
 501:../cleanflight/src/main/fc/fc_rc.c ****             }
 502:../cleanflight/src/main/fc/fc_rc.c ****         }
 503:../cleanflight/src/main/fc/fc_rc.c ****     }
 504:../cleanflight/src/main/fc/fc_rc.c **** 
 505:../cleanflight/src/main/fc/fc_rc.c ****     if (rcSmoothingData.filterInitialized && (debugMode == DEBUG_RC_SMOOTHING)) {
 2682              	 .loc 4 505 0 is_stmt 1
 2683 0242 154B     	 ldr r3,.L174+4
 2684 0244 1B78     	 ldrb r3,[r3]
 2685 0246 002B     	 cmp r3,#0
 2686 0248 21D0     	 beq .L162
 2687              	 .loc 4 505 0 is_stmt 0 discriminator 1
 2688 024a 1D4B     	 ldr r3,.L174+44
 2689 024c 1B78     	 ldrb r3,[r3]
 2690 024e 282B     	 cmp r3,#40
 2691 0250 1DD1     	 bne .L162
 506:../cleanflight/src/main/fc/fc_rc.c ****         // after training has completed then log the raw rc channel and the calculated
 507:../cleanflight/src/main/fc/fc_rc.c ****         // average rx frame rate that was used to calculate the automatic filter cutoffs
 508:../cleanflight/src/main/fc/fc_rc.c ****         DEBUG_SET(DEBUG_RC_SMOOTHING, 0, lrintf(lastRxData[rxConfig()->rc_smoothing_debug_axis]));
 2692              	 .loc 4 508 0 is_stmt 1
 2693 0252 1B4B     	 ldr r3,.L174+44
 2694 0254 1B78     	 ldrb r3,[r3]
 2695 0256 282B     	 cmp r3,#40
 2696 0258 0FD1     	 bne .L163
 2697              	 .loc 4 508 0 is_stmt 0 discriminator 1
 2698 025a FFF7FEFF 	 bl rxConfig
 2699 025e 0346     	 mov r3,r0
 2700 0260 93F82730 	 ldrb r3,[r3,#39]
 2701 0264 114A     	 ldr r2,.L174+24
 2702 0266 9B00     	 lsls r3,r3,#2
 2703 0268 1344     	 add r3,r3,r2
 2704 026a 1B68     	 ldr r3,[r3]
 2705 026c 1846     	 mov r0,r3
 2706 026e FFF7FEFF 	 bl lrintf
 2707 0272 0346     	 mov r3,r0
 2708 0274 9AB2     	 uxth r2,r3
 2709 0276 134B     	 ldr r3,.L174+48
 2710 0278 1A80     	 strh r2,[r3]
 2711              	.L163:
 509:../cleanflight/src/main/fc/fc_rc.c ****         DEBUG_SET(DEBUG_RC_SMOOTHING, 3, rcSmoothingData.averageFrameTimeUs);
 2712              	 .loc 4 509 0 is_stmt 1
 2713 027a 114B     	 ldr r3,.L174+44
 2714 027c 1B78     	 ldrb r3,[r3]
 2715 027e 282B     	 cmp r3,#40
 2716 0280 05D1     	 bne .L162
 2717              	 .loc 4 509 0 is_stmt 0 discriminator 1
 2718 0282 054B     	 ldr r3,.L174+4
 2719 0284 D3F89530 	 ldr r3,[r3,#149]
 2720 0288 9AB2     	 uxth r2,r3
 2721 028a 0E4B     	 ldr r3,.L174+48
 2722 028c DA80     	 strh r2,[r3,#6]
 2723              	.L162:
 510:../cleanflight/src/main/fc/fc_rc.c ****     }
 511:../cleanflight/src/main/fc/fc_rc.c **** 
 512:../cleanflight/src/main/fc/fc_rc.c ****     // each pid loop continue to apply the last received channel value to the filter
 513:../cleanflight/src/main/fc/fc_rc.c ****     for (updatedChannel = 0; updatedChannel < PRIMARY_CHANNEL_COUNT; updatedChannel++) {
 2724              	 .loc 4 513 0 is_stmt 1
 2725 028e 0023     	 movs r3,#0
 2726 0290 FB77     	 strb r3,[r7,#31]
 2727 0292 6CE0     	 b .L164
 2728              	.L175:
 2729              	 .align 2
 2730              	.L174:
 2731 0294 00000000 	 .word initialized.13937
 2732 0298 00000000 	 .word rcSmoothingData
 2733 029c 00000000 	 .word calculateCutoffs.13939
 2734 02a0 00000000 	 .word isRXDataNew
 2735 02a4 00000000 	 .word interpolationChannels
 2736 02a8 00000000 	 .word rcCommand
 2737 02ac 00000000 	 .word lastRxData.13936
 2738 02b0 00000000 	 .word targetPidLooptime
 2739 02b4 00000000 	 .word currentRxRefreshRate
 2740 02b8 00000000 	 .word validRxFrameTimeMs.13938
 2741 02bc 0000C842 	 .word 1120403456
 2742 02c0 00000000 	 .word debugMode
 2743 02c4 00000000 	 .word debug
 2744              	.L170:
 514:../cleanflight/src/main/fc/fc_rc.c ****         if ((1 << updatedChannel) & interpolationChannels) {  // only smooth selected channels base
 2745              	 .loc 4 514 0
 2746 02c8 2D4B     	 ldr r3,.L176
 2747 02ca 1B78     	 ldrb r3,[r3]
 2748 02cc 1A46     	 mov r2,r3
 2749 02ce FB7F     	 ldrb r3,[r7,#31]
 2750 02d0 42FA03F3 	 asr r3,r2,r3
 2751 02d4 03F00103 	 and r3,r3,#1
 2752 02d8 002B     	 cmp r3,#0
 2753 02da 45D0     	 beq .L165
 515:../cleanflight/src/main/fc/fc_rc.c ****             if (rcSmoothingData.filterInitialized) {
 2754              	 .loc 4 515 0
 2755 02dc 294B     	 ldr r3,.L176+4
 2756 02de 1B78     	 ldrb r3,[r3]
 2757 02e0 002B     	 cmp r3,#0
 2758 02e2 37D0     	 beq .L166
 516:../cleanflight/src/main/fc/fc_rc.c ****                 switch (rxConfig()->rc_smoothing_input_type) {
 2759              	 .loc 4 516 0
 2760 02e4 FFF7FEFF 	 bl rxConfig
 2761 02e8 0346     	 mov r3,r0
 2762 02ea 93F82830 	 ldrb r3,[r3,#40]
 2763 02ee 002B     	 cmp r3,#0
 2764 02f0 17D1     	 bne .L173
 517:../cleanflight/src/main/fc/fc_rc.c ****                     case RC_SMOOTHING_INPUT_PT1:
 518:../cleanflight/src/main/fc/fc_rc.c ****                         rcCommand[updatedChannel] = pt1FilterApply((pt1Filter_t*) &rcSmoothingData.
 2765              	 .loc 4 518 0
 2766 02f2 FC7F     	 ldrb r4,[r7,#31]
 2767 02f4 FA7F     	 ldrb r2,[r7,#31]
 2768 02f6 1346     	 mov r3,r2
 2769 02f8 DB00     	 lsls r3,r3,#3
 2770 02fa 1344     	 add r3,r3,r2
 2771 02fc 9B00     	 lsls r3,r3,#2
 2772 02fe 214A     	 ldr r2,.L176+4
 2773 0300 1344     	 add r3,r3,r2
 2774 0302 591C     	 adds r1,r3,#1
 2775 0304 FB7F     	 ldrb r3,[r7,#31]
 2776 0306 204A     	 ldr r2,.L176+8
 2777 0308 9B00     	 lsls r3,r3,#2
 2778 030a 1344     	 add r3,r3,r2
 2779 030c 1B68     	 ldr r3,[r3]
 2780 030e 0846     	 mov r0,r1
 2781 0310 1946     	 mov r1,r3
 2782 0312 FFF7FEFF 	 bl pt1FilterApply
 2783 0316 0146     	 mov r1,r0
 2784 0318 1C4A     	 ldr r2,.L176+12
 2785 031a A300     	 lsls r3,r4,#2
 2786 031c 1344     	 add r3,r3,r2
 2787 031e 1960     	 str r1,[r3]
 519:../cleanflight/src/main/fc/fc_rc.c ****                         break;
 2788              	 .loc 4 519 0
 2789 0320 17E0     	 b .L169
 2790              	.L173:
 520:../cleanflight/src/main/fc/fc_rc.c **** 
 521:../cleanflight/src/main/fc/fc_rc.c ****                     case RC_SMOOTHING_INPUT_BIQUAD:
 522:../cleanflight/src/main/fc/fc_rc.c ****                     default:
 523:../cleanflight/src/main/fc/fc_rc.c ****                         rcCommand[updatedChannel] = biquadFilterApplyDF1((biquadFilter_t*) &rcSmoot
 2791              	 .loc 4 523 0
 2792 0322 FC7F     	 ldrb r4,[r7,#31]
 2793 0324 FA7F     	 ldrb r2,[r7,#31]
 2794 0326 1346     	 mov r3,r2
 2795 0328 DB00     	 lsls r3,r3,#3
 2796 032a 1344     	 add r3,r3,r2
 2797 032c 9B00     	 lsls r3,r3,#2
 2798 032e 154A     	 ldr r2,.L176+4
 2799 0330 1344     	 add r3,r3,r2
 2800 0332 591C     	 adds r1,r3,#1
 2801 0334 FB7F     	 ldrb r3,[r7,#31]
 2802 0336 144A     	 ldr r2,.L176+8
 2803 0338 9B00     	 lsls r3,r3,#2
 2804 033a 1344     	 add r3,r3,r2
 2805 033c 1B68     	 ldr r3,[r3]
 2806 033e 0846     	 mov r0,r1
 2807 0340 1946     	 mov r1,r3
 2808 0342 FFF7FEFF 	 bl biquadFilterApplyDF1
 2809 0346 0146     	 mov r1,r0
 2810 0348 104A     	 ldr r2,.L176+12
 2811 034a A300     	 lsls r3,r4,#2
 2812 034c 1344     	 add r3,r3,r2
 2813 034e 1960     	 str r1,[r3]
 524:../cleanflight/src/main/fc/fc_rc.c ****                         break;
 2814              	 .loc 4 524 0
 2815 0350 00BF     	 nop
 2816              	.L169:
 2817 0352 09E0     	 b .L165
 2818              	.L166:
 525:../cleanflight/src/main/fc/fc_rc.c ****                 }
 526:../cleanflight/src/main/fc/fc_rc.c ****             } else {
 527:../cleanflight/src/main/fc/fc_rc.c ****                 // If filter isn't initialized yet then use the actual unsmoothed rx channel data
 528:../cleanflight/src/main/fc/fc_rc.c ****                 rcCommand[updatedChannel] = lastRxData[updatedChannel];
 2819              	 .loc 4 528 0
 2820 0354 FB7F     	 ldrb r3,[r7,#31]
 2821 0356 FA7F     	 ldrb r2,[r7,#31]
 2822 0358 0B49     	 ldr r1,.L176+8
 2823 035a 9200     	 lsls r2,r2,#2
 2824 035c 0A44     	 add r2,r2,r1
 2825 035e 1268     	 ldr r2,[r2]
 2826 0360 0A49     	 ldr r1,.L176+12
 2827 0362 9B00     	 lsls r3,r3,#2
 2828 0364 0B44     	 add r3,r3,r1
 2829 0366 1A60     	 str r2,[r3]
 2830              	.L165:
 513:../cleanflight/src/main/fc/fc_rc.c ****         if ((1 << updatedChannel) & interpolationChannels) {  // only smooth selected channels base
 2831              	 .loc 4 513 0 discriminator 2
 2832 0368 FB7F     	 ldrb r3,[r7,#31]
 2833 036a 0133     	 adds r3,r3,#1
 2834 036c FB77     	 strb r3,[r7,#31]
 2835              	.L164:
 513:../cleanflight/src/main/fc/fc_rc.c ****         if ((1 << updatedChannel) & interpolationChannels) {  // only smooth selected channels base
 2836              	 .loc 4 513 0 is_stmt 0 discriminator 1
 2837 036e FB7F     	 ldrb r3,[r7,#31]
 2838 0370 032B     	 cmp r3,#3
 2839 0372 A9D9     	 bls .L170
 529:../cleanflight/src/main/fc/fc_rc.c ****             }
 530:../cleanflight/src/main/fc/fc_rc.c ****         }
 531:../cleanflight/src/main/fc/fc_rc.c ****     }
 532:../cleanflight/src/main/fc/fc_rc.c **** 
 533:../cleanflight/src/main/fc/fc_rc.c ****     return interpolationChannels;
 2840              	 .loc 4 533 0 is_stmt 1
 2841 0374 024B     	 ldr r3,.L176
 2842 0376 1B78     	 ldrb r3,[r3]
 534:../cleanflight/src/main/fc/fc_rc.c **** }
 2843              	 .loc 4 534 0
 2844 0378 1846     	 mov r0,r3
 2845 037a 2437     	 adds r7,r7,#36
 2846              	.LCFI118:
 2847              	 .cfi_def_cfa_offset 12
 2848 037c BD46     	 mov sp,r7
 2849              	.LCFI119:
 2850              	 .cfi_def_cfa_register 13
 2851              	 
 2852 037e 90BD     	 pop {r4,r7,pc}
 2853              	.L177:
 2854              	 .align 2
 2855              	.L176:
 2856 0380 00000000 	 .word interpolationChannels
 2857 0384 00000000 	 .word rcSmoothingData
 2858 0388 00000000 	 .word lastRxData.13936
 2859 038c 00000000 	 .word rcCommand
 2860              	 .cfi_endproc
 2861              	.LFE594:
 2863              	 .section .text.processRcCommand,"ax",%progbits
 2864              	 .align 2
 2865              	 .global processRcCommand
 2866              	 .thumb
 2867              	 .thumb_func
 2869              	processRcCommand:
 2870              	.LFB595:
 535:../cleanflight/src/main/fc/fc_rc.c **** #endif // USE_RC_SMOOTHING_FILTER
 536:../cleanflight/src/main/fc/fc_rc.c **** 
 537:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE void processRcCommand(void)
 538:../cleanflight/src/main/fc/fc_rc.c **** {
 2871              	 .loc 4 538 0
 2872              	 .cfi_startproc
 2873              	 
 2874              	 
 2875 0000 80B5     	 push {r7,lr}
 2876              	.LCFI120:
 2877              	 .cfi_def_cfa_offset 8
 2878              	 .cfi_offset 7,-8
 2879              	 .cfi_offset 14,-4
 2880 0002 88B0     	 sub sp,sp,#32
 2881              	.LCFI121:
 2882              	 .cfi_def_cfa_offset 40
 2883 0004 00AF     	 add r7,sp,#0
 2884              	.LCFI122:
 2885              	 .cfi_def_cfa_register 7
 539:../cleanflight/src/main/fc/fc_rc.c ****     uint8_t updatedChannel;
 540:../cleanflight/src/main/fc/fc_rc.c **** 
 541:../cleanflight/src/main/fc/fc_rc.c ****     if (isRXDataNew && pidAntiGravityEnabled()) {
 2886              	 .loc 4 541 0
 2887 0006 384B     	 ldr r3,.L192
 2888 0008 1B78     	 ldrb r3,[r3]
 2889 000a 002B     	 cmp r3,#0
 2890 000c 09D0     	 beq .L179
 2891              	 .loc 4 541 0 is_stmt 0 discriminator 1
 2892 000e FFF7FEFF 	 bl pidAntiGravityEnabled
 2893 0012 0346     	 mov r3,r0
 2894 0014 002B     	 cmp r3,#0
 2895 0016 04D0     	 beq .L179
 542:../cleanflight/src/main/fc/fc_rc.c ****         checkForThrottleErrorResetState(currentRxRefreshRate);
 2896              	 .loc 4 542 0 is_stmt 1
 2897 0018 344B     	 ldr r3,.L192+4
 2898 001a 1B88     	 ldrh r3,[r3]
 2899 001c 1846     	 mov r0,r3
 2900 001e FFF7FEFF 	 bl checkForThrottleErrorResetState
 2901              	.L179:
 543:../cleanflight/src/main/fc/fc_rc.c ****     }
 544:../cleanflight/src/main/fc/fc_rc.c **** 
 545:../cleanflight/src/main/fc/fc_rc.c ****     switch (rxConfig()->rc_smoothing_type) {
 2902              	 .loc 4 545 0
 2903 0022 FFF7FEFF 	 bl rxConfig
 2904 0026 0346     	 mov r3,r0
 2905 0028 93F82430 	 ldrb r3,[r3,#36]
 2906 002c 012B     	 cmp r3,#1
 2907 002e 04D1     	 bne .L191
 546:../cleanflight/src/main/fc/fc_rc.c **** #ifdef USE_RC_SMOOTHING_FILTER
 547:../cleanflight/src/main/fc/fc_rc.c ****     case RC_SMOOTHING_TYPE_FILTER:
 548:../cleanflight/src/main/fc/fc_rc.c ****         updatedChannel = processRcSmoothingFilter();
 2908              	 .loc 4 548 0
 2909 0030 FFF7FEFF 	 bl processRcSmoothingFilter
 2910 0034 0346     	 mov r3,r0
 2911 0036 FB77     	 strb r3,[r7,#31]
 549:../cleanflight/src/main/fc/fc_rc.c ****         break;
 2912              	 .loc 4 549 0
 2913 0038 04E0     	 b .L182
 2914              	.L191:
 550:../cleanflight/src/main/fc/fc_rc.c **** #endif // USE_RC_SMOOTHING_FILTER
 551:../cleanflight/src/main/fc/fc_rc.c ****     case RC_SMOOTHING_TYPE_INTERPOLATION:
 552:../cleanflight/src/main/fc/fc_rc.c ****     default:
 553:../cleanflight/src/main/fc/fc_rc.c ****         updatedChannel = processRcInterpolation();
 2915              	 .loc 4 553 0
 2916 003a FFF7FEFF 	 bl processRcInterpolation
 2917 003e 0346     	 mov r3,r0
 2918 0040 FB77     	 strb r3,[r7,#31]
 554:../cleanflight/src/main/fc/fc_rc.c ****         break;
 2919              	 .loc 4 554 0
 2920 0042 00BF     	 nop
 2921              	.L182:
 555:../cleanflight/src/main/fc/fc_rc.c ****     }
 556:../cleanflight/src/main/fc/fc_rc.c **** 
 557:../cleanflight/src/main/fc/fc_rc.c ****     if (isRXDataNew || updatedChannel) {
 2922              	 .loc 4 557 0
 2923 0044 284B     	 ldr r3,.L192
 2924 0046 1B78     	 ldrb r3,[r3]
 2925 0048 002B     	 cmp r3,#0
 2926 004a 02D1     	 bne .L183
 2927              	 .loc 4 557 0 is_stmt 0 discriminator 1
 2928 004c FB7F     	 ldrb r3,[r7,#31]
 2929 004e 002B     	 cmp r3,#0
 2930 0050 40D0     	 beq .L184
 2931              	.L183:
 2932              	.LBB17:
 558:../cleanflight/src/main/fc/fc_rc.c ****         const uint8_t maxUpdatedAxis = isRXDataNew ? FD_YAW : MIN(updatedChannel, FD_YAW); // throt
 2933              	 .loc 4 558 0 is_stmt 1
 2934 0052 254B     	 ldr r3,.L192
 2935 0054 1B78     	 ldrb r3,[r3]
 2936 0056 002B     	 cmp r3,#0
 2937 0058 01D0     	 beq .L185
 2938              	 .loc 4 558 0 is_stmt 0 discriminator 1
 2939 005a 0223     	 movs r3,#2
 2940 005c 09E0     	 b .L186
 2941              	.L185:
 2942              	.LBB18:
 2943              	 .loc 4 558 0 discriminator 2
 2944 005e FB7F     	 ldrb r3,[r7,#31]
 2945 0060 FB75     	 strb r3,[r7,#23]
 2946 0062 0223     	 movs r3,#2
 2947 0064 3B61     	 str r3,[r7,#16]
 2948 0066 FA7D     	 ldrb r2,[r7,#23]
 2949 0068 3B69     	 ldr r3,[r7,#16]
 2950 006a 9342     	 cmp r3,r2
 2951 006c A8BF     	 it ge
 2952 006e 1346     	 movge r3,r2
 2953              	.LBE18:
 2954 0070 DBB2     	 uxtb r3,r3
 2955              	.L186:
 2956              	 .loc 4 558 0 discriminator 4
 2957 0072 FB73     	 strb r3,[r7,#15]
 2958              	.LBB19:
 559:../cleanflight/src/main/fc/fc_rc.c **** #if defined(SIMULATOR_BUILD)
 560:../cleanflight/src/main/fc/fc_rc.c **** #pragma GCC diagnostic push
 561:../cleanflight/src/main/fc/fc_rc.c **** #pragma GCC diagnostic ignored "-Wunsafe-loop-optimizations"
 562:../cleanflight/src/main/fc/fc_rc.c **** #endif
 563:../cleanflight/src/main/fc/fc_rc.c ****         for (int axis = FD_ROLL; axis <= maxUpdatedAxis; axis++) {
 2959              	 .loc 4 563 0 is_stmt 1 discriminator 4
 2960 0074 0023     	 movs r3,#0
 2961 0076 BB61     	 str r3,[r7,#24]
 2962 0078 05E0     	 b .L187
 2963              	.L188:
 564:../cleanflight/src/main/fc/fc_rc.c **** #if defined(SIMULATOR_BUILD)
 565:../cleanflight/src/main/fc/fc_rc.c **** #pragma GCC diagnostic pop
 566:../cleanflight/src/main/fc/fc_rc.c **** #endif
 567:../cleanflight/src/main/fc/fc_rc.c ****             calculateSetpointRate(axis);
 2964              	 .loc 4 567 0 discriminator 3
 2965 007a B869     	 ldr r0,[r7,#24]
 2966 007c FFF7FEFF 	 bl calculateSetpointRate
 563:../cleanflight/src/main/fc/fc_rc.c **** #if defined(SIMULATOR_BUILD)
 2967              	 .loc 4 563 0 discriminator 3
 2968 0080 BB69     	 ldr r3,[r7,#24]
 2969 0082 0133     	 adds r3,r3,#1
 2970 0084 BB61     	 str r3,[r7,#24]
 2971              	.L187:
 563:../cleanflight/src/main/fc/fc_rc.c **** #if defined(SIMULATOR_BUILD)
 2972              	 .loc 4 563 0 is_stmt 0 discriminator 1
 2973 0086 FA7B     	 ldrb r2,[r7,#15]
 2974 0088 BB69     	 ldr r3,[r7,#24]
 2975 008a 9A42     	 cmp r2,r3
 2976 008c F5DA     	 bge .L188
 2977              	.LBE19:
 568:../cleanflight/src/main/fc/fc_rc.c ****         }
 569:../cleanflight/src/main/fc/fc_rc.c **** 
 570:../cleanflight/src/main/fc/fc_rc.c ****         DEBUG_SET(DEBUG_RC_INTERPOLATION, 3, setpointRate[0]);
 2978              	 .loc 4 570 0 is_stmt 1
 2979 008e 184B     	 ldr r3,.L192+8
 2980 0090 1B78     	 ldrb r3,[r3]
 2981 0092 072B     	 cmp r3,#7
 2982 0094 0AD1     	 bne .L189
 2983              	 .loc 4 570 0 is_stmt 0 discriminator 1
 2984 0096 174B     	 ldr r3,.L192+12
 2985 0098 D3ED007A 	 flds s15,[r3]
 2986 009c FDEEE77A 	 ftosizs s15,s15
 2987 00a0 C7ED017A 	 fsts s15,[r7,#4]
 2988 00a4 BB88     	 ldrh r3,[r7,#4]
 2989 00a6 9AB2     	 uxth r2,r3
 2990 00a8 134B     	 ldr r3,.L192+16
 2991 00aa DA80     	 strh r2,[r3,#6]
 2992              	.L189:
 571:../cleanflight/src/main/fc/fc_rc.c **** 
 572:../cleanflight/src/main/fc/fc_rc.c ****         // Scaling of AngleRate to camera angle (Mixing Roll and Yaw)
 573:../cleanflight/src/main/fc/fc_rc.c ****         if (rxConfig()->fpvCamAngleDegrees && IS_RC_MODE_ACTIVE(BOXFPVANGLEMIX) && !FLIGHT_MODE(HEA
 2993              	 .loc 4 573 0 is_stmt 1
 2994 00ac FFF7FEFF 	 bl rxConfig
 2995 00b0 0346     	 mov r3,r0
 2996 00b2 DB7E     	 ldrb r3,[r3,#27]
 2997 00b4 002B     	 cmp r3,#0
 2998 00b6 0DD0     	 beq .L184
 2999              	 .loc 4 573 0 is_stmt 0 discriminator 1
 3000 00b8 1920     	 movs r0,#25
 3001 00ba FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3002 00be 0346     	 mov r3,r0
 3003 00c0 002B     	 cmp r3,#0
 3004 00c2 07D0     	 beq .L184
 3005              	 .loc 4 573 0 discriminator 2
 3006 00c4 0D4B     	 ldr r3,.L192+20
 3007 00c6 1B88     	 ldrh r3,[r3]
 3008 00c8 03F04003 	 and r3,r3,#64
 3009 00cc 002B     	 cmp r3,#0
 3010 00ce 01D1     	 bne .L184
 574:../cleanflight/src/main/fc/fc_rc.c ****             scaleRcCommandToFpvCamAngle();
 3011              	 .loc 4 574 0 is_stmt 1
 3012 00d0 FFF7FEFF 	 bl scaleRcCommandToFpvCamAngle
 3013              	.L184:
 3014              	.LBE17:
 575:../cleanflight/src/main/fc/fc_rc.c ****         }
 576:../cleanflight/src/main/fc/fc_rc.c ****     }
 577:../cleanflight/src/main/fc/fc_rc.c **** 
 578:../cleanflight/src/main/fc/fc_rc.c ****     if (isRXDataNew) {
 3015              	 .loc 4 578 0
 3016 00d4 044B     	 ldr r3,.L192
 3017 00d6 1B78     	 ldrb r3,[r3]
 3018 00d8 002B     	 cmp r3,#0
 3019 00da 02D0     	 beq .L178
 579:../cleanflight/src/main/fc/fc_rc.c ****         isRXDataNew = false;
 3020              	 .loc 4 579 0
 3021 00dc 024B     	 ldr r3,.L192
 3022 00de 0022     	 movs r2,#0
 3023 00e0 1A70     	 strb r2,[r3]
 3024              	.L178:
 580:../cleanflight/src/main/fc/fc_rc.c ****     }
 581:../cleanflight/src/main/fc/fc_rc.c **** }
 3025              	 .loc 4 581 0
 3026 00e2 2037     	 adds r7,r7,#32
 3027              	.LCFI123:
 3028              	 .cfi_def_cfa_offset 8
 3029 00e4 BD46     	 mov sp,r7
 3030              	.LCFI124:
 3031              	 .cfi_def_cfa_register 13
 3032              	 
 3033 00e6 80BD     	 pop {r7,pc}
 3034              	.L193:
 3035              	 .align 2
 3036              	.L192:
 3037 00e8 00000000 	 .word isRXDataNew
 3038 00ec 00000000 	 .word currentRxRefreshRate
 3039 00f0 00000000 	 .word debugMode
 3040 00f4 00000000 	 .word setpointRate
 3041 00f8 00000000 	 .word debug
 3042 00fc 00000000 	 .word flightModeFlags
 3043              	 .cfi_endproc
 3044              	.LFE595:
 3046              	 .section .text.updateRcCommands,"ax",%progbits
 3047              	 .align 2
 3048              	 .global updateRcCommands
 3049              	 .thumb
 3050              	 .thumb_func
 3052              	updateRcCommands:
 3053              	.LFB596:
 582:../cleanflight/src/main/fc/fc_rc.c **** 
 583:../cleanflight/src/main/fc/fc_rc.c **** FAST_CODE FAST_CODE_NOINLINE void updateRcCommands(void)
 584:../cleanflight/src/main/fc/fc_rc.c **** {
 3054              	 .loc 4 584 0
 3055              	 .cfi_startproc
 3056              	 
 3057              	 
 3058 0000 90B5     	 push {r4,r7,lr}
 3059              	.LCFI125:
 3060              	 .cfi_def_cfa_offset 12
 3061              	 .cfi_offset 4,-12
 3062              	 .cfi_offset 7,-8
 3063              	 .cfi_offset 14,-4
 3064 0002 8DB0     	 sub sp,sp,#52
 3065              	.LCFI126:
 3066              	 .cfi_def_cfa_offset 64
 3067 0004 00AF     	 add r7,sp,#0
 3068              	.LCFI127:
 3069              	 .cfi_def_cfa_register 7
 585:../cleanflight/src/main/fc/fc_rc.c ****     // PITCH & ROLL only dynamic PID adjustment,  depending on throttle value
 586:../cleanflight/src/main/fc/fc_rc.c ****     int32_t prop;
 587:../cleanflight/src/main/fc/fc_rc.c ****     if (rcData[THROTTLE] < currentControlRateProfile->tpa_breakpoint) {
 3070              	 .loc 4 587 0
 3071 0006 744B     	 ldr r3,.L221
 3072 0008 DB88     	 ldrh r3,[r3,#6]
 3073 000a 1BB2     	 sxth r3,r3
 3074 000c 734A     	 ldr r2,.L221+4
 3075 000e 1268     	 ldr r2,[r2]
 3076 0010 B2F80D20 	 ldrh r2,[r2,#13]
 3077 0014 92B2     	 uxth r2,r2
 3078 0016 9342     	 cmp r3,r2
 3079 0018 06DA     	 bge .L195
 588:../cleanflight/src/main/fc/fc_rc.c ****         prop = 100;
 3080              	 .loc 4 588 0
 3081 001a 6423     	 movs r3,#100
 3082 001c FB62     	 str r3,[r7,#44]
 589:../cleanflight/src/main/fc/fc_rc.c ****         throttlePIDAttenuation = 1.0f;
 3083              	 .loc 4 589 0
 3084 001e 704B     	 ldr r3,.L221+8
 3085 0020 4FF07E52 	 mov r2,#1065353216
 3086 0024 1A60     	 str r2,[r3]
 3087 0026 33E0     	 b .L196
 3088              	.L195:
 590:../cleanflight/src/main/fc/fc_rc.c ****     } else {
 591:../cleanflight/src/main/fc/fc_rc.c ****         if (rcData[THROTTLE] < 2000) {
 3089              	 .loc 4 591 0
 3090 0028 6B4B     	 ldr r3,.L221
 3091 002a DB88     	 ldrh r3,[r3,#6]
 3092 002c 1BB2     	 sxth r3,r3
 3093 002e B3F5FA6F 	 cmp r3,#2000
 3094 0032 1BDA     	 bge .L197
 592:../cleanflight/src/main/fc/fc_rc.c ****             prop = 100 - (uint16_t)currentControlRateProfile->dynThrPID * (rcData[THROTTLE] - curre
 3095              	 .loc 4 592 0
 3096 0034 694B     	 ldr r3,.L221+4
 3097 0036 1B68     	 ldr r3,[r3]
 3098 0038 1B7B     	 ldrb r3,[r3,#12]
 3099 003a 1946     	 mov r1,r3
 3100 003c 664B     	 ldr r3,.L221
 3101 003e DB88     	 ldrh r3,[r3,#6]
 3102 0040 1BB2     	 sxth r3,r3
 3103 0042 664A     	 ldr r2,.L221+4
 3104 0044 1268     	 ldr r2,[r2]
 3105 0046 B2F80D20 	 ldrh r2,[r2,#13]
 3106 004a 92B2     	 uxth r2,r2
 3107 004c 9B1A     	 subs r3,r3,r2
 3108 004e 03FB01F2 	 mul r2,r3,r1
 3109 0052 624B     	 ldr r3,.L221+4
 3110 0054 1B68     	 ldr r3,[r3]
 3111 0056 B3F80D30 	 ldrh r3,[r3,#13]
 3112 005a 9BB2     	 uxth r3,r3
 3113 005c C3F5FA63 	 rsb r3,r3,#2000
 3114 0060 92FBF3F3 	 sdiv r3,r2,r3
 3115 0064 C3F16403 	 rsb r3,r3,#100
 3116 0068 FB62     	 str r3,[r7,#44]
 3117 006a 05E0     	 b .L198
 3118              	.L197:
 593:../cleanflight/src/main/fc/fc_rc.c ****         } else {
 594:../cleanflight/src/main/fc/fc_rc.c ****             prop = 100 - currentControlRateProfile->dynThrPID;
 3119              	 .loc 4 594 0
 3120 006c 5B4B     	 ldr r3,.L221+4
 3121 006e 1B68     	 ldr r3,[r3]
 3122 0070 1B7B     	 ldrb r3,[r3,#12]
 3123 0072 C3F16403 	 rsb r3,r3,#100
 3124 0076 FB62     	 str r3,[r7,#44]
 3125              	.L198:
 595:../cleanflight/src/main/fc/fc_rc.c ****         }
 596:../cleanflight/src/main/fc/fc_rc.c ****         throttlePIDAttenuation = prop / 100.0f;
 3126              	 .loc 4 596 0
 3127 0078 FB6A     	 ldr r3,[r7,#44]
 3128 007a 07EE903A 	 fmsr s15,r3
 3129 007e F8EEE77A 	 fsitos s15,s15
 3130 0082 9FED587A 	 flds s14,.L221+12
 3131 0086 C7EE877A 	 fdivs s15,s15,s14
 3132 008a 554B     	 ldr r3,.L221+8
 3133 008c C3ED007A 	 fsts s15,[r3]
 3134              	.L196:
 3135              	.LBB20:
 597:../cleanflight/src/main/fc/fc_rc.c ****     }
 598:../cleanflight/src/main/fc/fc_rc.c **** 
 599:../cleanflight/src/main/fc/fc_rc.c ****     for (int axis = 0; axis < 3; axis++) {
 3136              	 .loc 4 599 0
 3137 0090 0023     	 movs r3,#0
 3138 0092 BB62     	 str r3,[r7,#40]
 3139 0094 85E0     	 b .L199
 3140              	.L210:
 3141              	.LBB21:
 3142              	.LBB22:
 3143              	.LBB23:
 600:../cleanflight/src/main/fc/fc_rc.c ****         // non coupled PID reduction scaler used in PID controller 1 and PID controller 2.
 601:../cleanflight/src/main/fc/fc_rc.c **** 
 602:../cleanflight/src/main/fc/fc_rc.c ****         int32_t tmp = MIN(ABS(rcData[axis] - rxConfig()->midrc), 500);
 3144              	 .loc 4 602 0
 3145 0096 504A     	 ldr r2,.L221
 3146 0098 BB6A     	 ldr r3,[r7,#40]
 3147 009a 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 3148 009e 1CB2     	 sxth r4,r3
 3149 00a0 FFF7FEFF 	 bl rxConfig
 3150 00a4 0346     	 mov r3,r0
 3151 00a6 5B8A     	 ldrh r3,[r3,#18]
 3152 00a8 9BB2     	 uxth r3,r3
 3153 00aa E31A     	 subs r3,r4,r3
 3154 00ac FB61     	 str r3,[r7,#28]
 3155 00ae FB69     	 ldr r3,[r7,#28]
 3156 00b0 002B     	 cmp r3,#0
 3157 00b2 B8BF     	 it lt
 3158 00b4 5B42     	 rsblt r3,r3,#0
 3159              	.LBE23:
 3160 00b6 BB61     	 str r3,[r7,#24]
 3161 00b8 4FF4FA73 	 mov r3,#500
 3162 00bc 7B61     	 str r3,[r7,#20]
 3163 00be 7A69     	 ldr r2,[r7,#20]
 3164 00c0 BB69     	 ldr r3,[r7,#24]
 3165 00c2 9342     	 cmp r3,r2
 3166 00c4 A8BF     	 it ge
 3167 00c6 1346     	 movge r3,r2
 3168              	.LBE22:
 3169 00c8 7B62     	 str r3,[r7,#36]
 603:../cleanflight/src/main/fc/fc_rc.c ****         if (axis == ROLL || axis == PITCH) {
 3170              	 .loc 4 603 0
 3171 00ca BB6A     	 ldr r3,[r7,#40]
 3172 00cc 002B     	 cmp r3,#0
 3173 00ce 02D0     	 beq .L200
 3174              	 .loc 4 603 0 is_stmt 0 discriminator 1
 3175 00d0 BB6A     	 ldr r3,[r7,#40]
 3176 00d2 012B     	 cmp r3,#1
 3177 00d4 1ED1     	 bne .L201
 3178              	.L200:
 604:../cleanflight/src/main/fc/fc_rc.c ****             if (tmp > rcControlsConfig()->deadband) {
 3179              	 .loc 4 604 0 is_stmt 1
 3180 00d6 FFF7FEFF 	 bl rcControlsConfig
 3181 00da 0346     	 mov r3,r0
 3182 00dc 1B78     	 ldrb r3,[r3]
 3183 00de 1A46     	 mov r2,r3
 3184 00e0 7B6A     	 ldr r3,[r7,#36]
 3185 00e2 9A42     	 cmp r2,r3
 3186 00e4 08DA     	 bge .L202
 605:../cleanflight/src/main/fc/fc_rc.c ****                 tmp -= rcControlsConfig()->deadband;
 3187              	 .loc 4 605 0
 3188 00e6 FFF7FEFF 	 bl rcControlsConfig
 3189 00ea 0346     	 mov r3,r0
 3190 00ec 1B78     	 ldrb r3,[r3]
 3191 00ee 1A46     	 mov r2,r3
 3192 00f0 7B6A     	 ldr r3,[r7,#36]
 3193 00f2 9B1A     	 subs r3,r3,r2
 3194 00f4 7B62     	 str r3,[r7,#36]
 3195 00f6 01E0     	 b .L203
 3196              	.L202:
 606:../cleanflight/src/main/fc/fc_rc.c ****             } else {
 607:../cleanflight/src/main/fc/fc_rc.c ****                 tmp = 0;
 3197              	 .loc 4 607 0
 3198 00f8 0023     	 movs r3,#0
 3199 00fa 7B62     	 str r3,[r7,#36]
 3200              	.L203:
 608:../cleanflight/src/main/fc/fc_rc.c ****             }
 609:../cleanflight/src/main/fc/fc_rc.c ****             rcCommand[axis] = tmp;
 3201              	 .loc 4 609 0
 3202 00fc 7B6A     	 ldr r3,[r7,#36]
 3203 00fe 07EE903A 	 fmsr s15,r3
 3204 0102 F8EEE77A 	 fsitos s15,s15
 3205 0106 384A     	 ldr r2,.L221+16
 3206 0108 BB6A     	 ldr r3,[r7,#40]
 3207 010a 9B00     	 lsls r3,r3,#2
 3208 010c 1344     	 add r3,r3,r2
 3209 010e C3ED007A 	 fsts s15,[r3]
 3210 0112 29E0     	 b .L204
 3211              	.L201:
 610:../cleanflight/src/main/fc/fc_rc.c ****         } else {
 611:../cleanflight/src/main/fc/fc_rc.c ****             if (tmp > rcControlsConfig()->yaw_deadband) {
 3212              	 .loc 4 611 0
 3213 0114 FFF7FEFF 	 bl rcControlsConfig
 3214 0118 0346     	 mov r3,r0
 3215 011a 5B78     	 ldrb r3,[r3,#1]
 3216 011c 1A46     	 mov r2,r3
 3217 011e 7B6A     	 ldr r3,[r7,#36]
 3218 0120 9A42     	 cmp r2,r3
 3219 0122 08DA     	 bge .L205
 612:../cleanflight/src/main/fc/fc_rc.c ****                 tmp -= rcControlsConfig()->yaw_deadband;
 3220              	 .loc 4 612 0
 3221 0124 FFF7FEFF 	 bl rcControlsConfig
 3222 0128 0346     	 mov r3,r0
 3223 012a 5B78     	 ldrb r3,[r3,#1]
 3224 012c 1A46     	 mov r2,r3
 3225 012e 7B6A     	 ldr r3,[r7,#36]
 3226 0130 9B1A     	 subs r3,r3,r2
 3227 0132 7B62     	 str r3,[r7,#36]
 3228 0134 01E0     	 b .L206
 3229              	.L205:
 613:../cleanflight/src/main/fc/fc_rc.c ****             } else {
 614:../cleanflight/src/main/fc/fc_rc.c ****                 tmp = 0;
 3230              	 .loc 4 614 0
 3231 0136 0023     	 movs r3,#0
 3232 0138 7B62     	 str r3,[r7,#36]
 3233              	.L206:
 615:../cleanflight/src/main/fc/fc_rc.c ****             }
 616:../cleanflight/src/main/fc/fc_rc.c ****             rcCommand[axis] = tmp * -GET_DIRECTION(rcControlsConfig()->yaw_control_reversed);
 3234              	 .loc 4 616 0
 3235 013a FFF7FEFF 	 bl rcControlsConfig
 3236 013e 0346     	 mov r3,r0
 3237 0140 1B79     	 ldrb r3,[r3,#4]
 3238 0142 002B     	 cmp r3,#0
 3239 0144 01D0     	 beq .L207
 3240              	 .loc 4 616 0 is_stmt 0 discriminator 1
 3241 0146 0123     	 movs r3,#1
 3242 0148 01E0     	 b .L208
 3243              	.L207:
 3244              	 .loc 4 616 0 discriminator 2
 3245 014a 4FF0FF33 	 mov r3,#-1
 3246              	.L208:
 3247              	 .loc 4 616 0 discriminator 4
 3248 014e 7A6A     	 ldr r2,[r7,#36]
 3249 0150 02FB03F3 	 mul r3,r2,r3
 3250 0154 07EE903A 	 fmsr s15,r3
 3251 0158 F8EEE77A 	 fsitos s15,s15
 3252 015c 224A     	 ldr r2,.L221+16
 3253 015e BB6A     	 ldr r3,[r7,#40]
 3254 0160 9B00     	 lsls r3,r3,#2
 3255 0162 1344     	 add r3,r3,r2
 3256 0164 C3ED007A 	 fsts s15,[r3]
 3257              	.L204:
 617:../cleanflight/src/main/fc/fc_rc.c ****         }
 618:../cleanflight/src/main/fc/fc_rc.c ****         if (rcData[axis] < rxConfig()->midrc) {
 3258              	 .loc 4 618 0 is_stmt 1
 3259 0168 1B4A     	 ldr r2,.L221
 3260 016a BB6A     	 ldr r3,[r7,#40]
 3261 016c 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 3262 0170 1CB2     	 sxth r4,r3
 3263 0172 FFF7FEFF 	 bl rxConfig
 3264 0176 0346     	 mov r3,r0
 3265 0178 5B8A     	 ldrh r3,[r3,#18]
 3266 017a 9BB2     	 uxth r3,r3
 3267 017c 9C42     	 cmp r4,r3
 3268 017e 0DDA     	 bge .L209
 619:../cleanflight/src/main/fc/fc_rc.c ****             rcCommand[axis] = -rcCommand[axis];
 3269              	 .loc 4 619 0
 3270 0180 194A     	 ldr r2,.L221+16
 3271 0182 BB6A     	 ldr r3,[r7,#40]
 3272 0184 9B00     	 lsls r3,r3,#2
 3273 0186 1344     	 add r3,r3,r2
 3274 0188 D3ED007A 	 flds s15,[r3]
 3275 018c F1EE677A 	 fnegs s15,s15
 3276 0190 154A     	 ldr r2,.L221+16
 3277 0192 BB6A     	 ldr r3,[r7,#40]
 3278 0194 9B00     	 lsls r3,r3,#2
 3279 0196 1344     	 add r3,r3,r2
 3280 0198 C3ED007A 	 fsts s15,[r3]
 3281              	.L209:
 3282              	.LBE21:
 599:../cleanflight/src/main/fc/fc_rc.c ****         // non coupled PID reduction scaler used in PID controller 1 and PID controller 2.
 3283              	 .loc 4 599 0 discriminator 2
 3284 019c BB6A     	 ldr r3,[r7,#40]
 3285 019e 0133     	 adds r3,r3,#1
 3286 01a0 BB62     	 str r3,[r7,#40]
 3287              	.L199:
 599:../cleanflight/src/main/fc/fc_rc.c ****         // non coupled PID reduction scaler used in PID controller 1 and PID controller 2.
 3288              	 .loc 4 599 0 is_stmt 0 discriminator 1
 3289 01a2 BB6A     	 ldr r3,[r7,#40]
 3290 01a4 022B     	 cmp r3,#2
 3291 01a6 7FF776AF 	 ble .L210
 3292              	.LBE20:
 620:../cleanflight/src/main/fc/fc_rc.c ****         }
 621:../cleanflight/src/main/fc/fc_rc.c ****     }
 622:../cleanflight/src/main/fc/fc_rc.c **** 
 623:../cleanflight/src/main/fc/fc_rc.c ****     int32_t tmp;
 624:../cleanflight/src/main/fc/fc_rc.c ****     if (feature(FEATURE_3D)) {
 3293              	 .loc 4 624 0 is_stmt 1
 3294 01aa 4FF48050 	 mov r0,#4096
 3295 01ae FFF7FEFF 	 bl feature
 3296 01b2 0346     	 mov r3,r0
 3297 01b4 002B     	 cmp r3,#0
 3298 01b6 19D0     	 beq .L211
 625:../cleanflight/src/main/fc/fc_rc.c ****         tmp = constrain(rcData[THROTTLE], PWM_RANGE_MIN, PWM_RANGE_MAX);
 3299              	 .loc 4 625 0
 3300 01b8 074B     	 ldr r3,.L221
 3301 01ba DB88     	 ldrh r3,[r3,#6]
 3302 01bc 1BB2     	 sxth r3,r3
 3303 01be 1846     	 mov r0,r3
 3304 01c0 4FF47A71 	 mov r1,#1000
 3305 01c4 4FF4FA62 	 mov r2,#2000
 3306 01c8 FFF7FEFF 	 bl constrain
 3307 01cc 3862     	 str r0,[r7,#32]
 626:../cleanflight/src/main/fc/fc_rc.c ****         tmp = (uint32_t)(tmp - PWM_RANGE_MIN);
 3308              	 .loc 4 626 0
 3309 01ce 3B6A     	 ldr r3,[r7,#32]
 3310 01d0 A3F57A73 	 sub r3,r3,#1000
 3311 01d4 3B62     	 str r3,[r7,#32]
 3312 01d6 2FE0     	 b .L212
 3313              	.L222:
 3314              	 .align 2
 3315              	.L221:
 3316 01d8 00000000 	 .word rcData
 3317 01dc 00000000 	 .word currentControlRateProfile
 3318 01e0 00000000 	 .word throttlePIDAttenuation
 3319 01e4 0000C842 	 .word 1120403456
 3320 01e8 00000000 	 .word rcCommand
 3321              	.L211:
 627:../cleanflight/src/main/fc/fc_rc.c ****     } else {
 628:../cleanflight/src/main/fc/fc_rc.c ****         tmp = constrain(rcData[THROTTLE], rxConfig()->mincheck, PWM_RANGE_MAX);
 3322              	 .loc 4 628 0
 3323 01ec A84B     	 ldr r3,.L223
 3324 01ee DB88     	 ldrh r3,[r3,#6]
 3325 01f0 1CB2     	 sxth r4,r3
 3326 01f2 FFF7FEFF 	 bl rxConfig
 3327 01f6 0346     	 mov r3,r0
 3328 01f8 9B8A     	 ldrh r3,[r3,#20]
 3329 01fa 9BB2     	 uxth r3,r3
 3330 01fc 2046     	 mov r0,r4
 3331 01fe 1946     	 mov r1,r3
 3332 0200 4FF4FA62 	 mov r2,#2000
 3333 0204 FFF7FEFF 	 bl constrain
 3334 0208 3862     	 str r0,[r7,#32]
 629:../cleanflight/src/main/fc/fc_rc.c ****         tmp = (uint32_t)(tmp - rxConfig()->mincheck) * PWM_RANGE_MIN / (PWM_RANGE_MAX - rxConfig()-
 3335              	 .loc 4 629 0
 3336 020a FFF7FEFF 	 bl rxConfig
 3337 020e 0346     	 mov r3,r0
 3338 0210 9B8A     	 ldrh r3,[r3,#20]
 3339 0212 9BB2     	 uxth r3,r3
 3340 0214 1A46     	 mov r2,r3
 3341 0216 3B6A     	 ldr r3,[r7,#32]
 3342 0218 9B1A     	 subs r3,r3,r2
 3343 021a 1A46     	 mov r2,r3
 3344 021c 4FF47A73 	 mov r3,#1000
 3345 0220 03FB02F4 	 mul r4,r3,r2
 3346 0224 FFF7FEFF 	 bl rxConfig
 3347 0228 0346     	 mov r3,r0
 3348 022a 9B8A     	 ldrh r3,[r3,#20]
 3349 022c 9BB2     	 uxth r3,r3
 3350 022e C3F5FA63 	 rsb r3,r3,#2000
 3351 0232 B4FBF3F3 	 udiv r3,r4,r3
 3352 0236 3B62     	 str r3,[r7,#32]
 3353              	.L212:
 630:../cleanflight/src/main/fc/fc_rc.c ****     }
 631:../cleanflight/src/main/fc/fc_rc.c **** 
 632:../cleanflight/src/main/fc/fc_rc.c ****     if (getLowVoltageCutoff()->enabled) {
 3354              	 .loc 4 632 0
 3355 0238 FFF7FEFF 	 bl getLowVoltageCutoff
 3356 023c 0346     	 mov r3,r0
 3357 023e 1B78     	 ldrb r3,[r3]
 3358 0240 002B     	 cmp r3,#0
 3359 0242 0ED0     	 beq .L213
 633:../cleanflight/src/main/fc/fc_rc.c ****         tmp = tmp * getLowVoltageCutoff()->percentage / 100;
 3360              	 .loc 4 633 0
 3361 0244 FFF7FEFF 	 bl getLowVoltageCutoff
 3362 0248 0346     	 mov r3,r0
 3363 024a 5B78     	 ldrb r3,[r3,#1]
 3364 024c 1A46     	 mov r2,r3
 3365 024e 3B6A     	 ldr r3,[r7,#32]
 3366 0250 03FB02F3 	 mul r3,r3,r2
 3367 0254 8F4A     	 ldr r2,.L223+4
 3368 0256 82FB0312 	 smull r1,r2,r2,r3
 3369 025a 5211     	 asrs r2,r2,#5
 3370 025c DB17     	 asrs r3,r3,#31
 3371 025e D31A     	 subs r3,r2,r3
 3372 0260 3B62     	 str r3,[r7,#32]
 3373              	.L213:
 634:../cleanflight/src/main/fc/fc_rc.c ****     }
 635:../cleanflight/src/main/fc/fc_rc.c **** 
 636:../cleanflight/src/main/fc/fc_rc.c ****     rcCommand[THROTTLE] = rcLookupThrottle(tmp);
 3374              	 .loc 4 636 0
 3375 0262 386A     	 ldr r0,[r7,#32]
 3376 0264 FFF7FEFF 	 bl rcLookupThrottle
 3377 0268 0346     	 mov r3,r0
 3378 026a 07EE903A 	 fmsr s15,r3
 3379 026e F8EEE77A 	 fsitos s15,s15
 3380 0272 894B     	 ldr r3,.L223+8
 3381 0274 C3ED037A 	 fsts s15,[r3,#12]
 637:../cleanflight/src/main/fc/fc_rc.c **** 
 638:../cleanflight/src/main/fc/fc_rc.c ****     if (feature(FEATURE_3D) && !failsafeIsActive()) {
 3382              	 .loc 4 638 0
 3383 0278 4FF48050 	 mov r0,#4096
 3384 027c FFF7FEFF 	 bl feature
 3385 0280 0346     	 mov r3,r0
 3386 0282 002B     	 cmp r3,#0
 3387 0284 00F0B780 	 beq .L214
 3388              	 .loc 4 638 0 is_stmt 0 discriminator 1
 3389 0288 FFF7FEFF 	 bl failsafeIsActive
 3390 028c 0346     	 mov r3,r0
 3391 028e 83F00103 	 eor r3,r3,#1
 3392 0292 DBB2     	 uxtb r3,r3
 3393 0294 002B     	 cmp r3,#0
 3394 0296 00F0AE80 	 beq .L214
 639:../cleanflight/src/main/fc/fc_rc.c ****         if (!flight3DConfig()->switched_mode3d) {
 3395              	 .loc 4 639 0 is_stmt 1
 3396 029a FFF7FEFF 	 bl flight3DConfig
 3397 029e 0346     	 mov r3,r0
 3398 02a0 1B7B     	 ldrb r3,[r3,#12]
 3399 02a2 002B     	 cmp r3,#0
 3400 02a4 38D1     	 bne .L215
 640:../cleanflight/src/main/fc/fc_rc.c ****             if (IS_RC_MODE_ACTIVE(BOX3D)) {
 3401              	 .loc 4 640 0
 3402 02a6 1820     	 movs r0,#24
 3403 02a8 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3404 02ac 0346     	 mov r3,r0
 3405 02ae 002B     	 cmp r3,#0
 3406 02b0 00F0A180 	 beq .L214
 3407              	.LBB24:
 641:../cleanflight/src/main/fc/fc_rc.c ****                 fix12_t throttleScaler = qConstruct(rcCommand[THROTTLE] - 1000, 1000);
 3408              	 .loc 4 641 0
 3409 02b4 784B     	 ldr r3,.L223+8
 3410 02b6 D3ED037A 	 flds s15,[r3,#12]
 3411 02ba 9FED787A 	 flds s14,.L223+12
 3412 02be 77EEC77A 	 fsubs s15,s15,s14
 3413 02c2 FDEEE77A 	 ftosizs s15,s15
 3414 02c6 C7ED017A 	 fsts s15,[r7,#4]
 3415 02ca BB88     	 ldrh r3,[r7,#4]
 3416 02cc 9BB2     	 uxth r3,r3
 3417 02ce 1BB2     	 sxth r3,r3
 3418 02d0 1846     	 mov r0,r3
 3419 02d2 4FF47A71 	 mov r1,#1000
 3420 02d6 FFF7FEFF 	 bl qConstruct
 3421 02da 3861     	 str r0,[r7,#16]
 642:../cleanflight/src/main/fc/fc_rc.c ****                 rcCommand[THROTTLE] = rxConfig()->midrc + qMultiply(throttleScaler, PWM_RANGE_MAX -
 3422              	 .loc 4 642 0
 3423 02dc FFF7FEFF 	 bl rxConfig
 3424 02e0 0346     	 mov r3,r0
 3425 02e2 5B8A     	 ldrh r3,[r3,#18]
 3426 02e4 9BB2     	 uxth r3,r3
 3427 02e6 1C46     	 mov r4,r3
 3428 02e8 FFF7FEFF 	 bl rxConfig
 3429 02ec 0346     	 mov r3,r0
 3430 02ee 5B8A     	 ldrh r3,[r3,#18]
 3431 02f0 9BB2     	 uxth r3,r3
 3432 02f2 C3F5FA63 	 rsb r3,r3,#2000
 3433 02f6 9BB2     	 uxth r3,r3
 3434 02f8 9BB2     	 uxth r3,r3
 3435 02fa 1BB2     	 sxth r3,r3
 3436 02fc 3869     	 ldr r0,[r7,#16]
 3437 02fe 1946     	 mov r1,r3
 3438 0300 FFF7FEFF 	 bl qMultiply
 3439 0304 0346     	 mov r3,r0
 3440 0306 2344     	 add r3,r3,r4
 3441 0308 07EE903A 	 fmsr s15,r3
 3442 030c F8EEE77A 	 fsitos s15,s15
 3443 0310 614B     	 ldr r3,.L223+8
 3444 0312 C3ED037A 	 fsts s15,[r3,#12]
 3445 0316 6EE0     	 b .L214
 3446              	.L215:
 3447              	.LBE24:
 643:../cleanflight/src/main/fc/fc_rc.c ****             }
 644:../cleanflight/src/main/fc/fc_rc.c ****         } else {
 645:../cleanflight/src/main/fc/fc_rc.c ****             if (IS_RC_MODE_ACTIVE(BOX3D)) {
 3448              	 .loc 4 645 0
 3449 0318 1820     	 movs r0,#24
 3450 031a FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3451 031e 0346     	 mov r3,r0
 3452 0320 002B     	 cmp r3,#0
 3453 0322 34D0     	 beq .L217
 3454              	.LBB25:
 646:../cleanflight/src/main/fc/fc_rc.c ****                 reverseMotors = true;
 3455              	 .loc 4 646 0
 3456 0324 5E4B     	 ldr r3,.L223+16
 3457 0326 0122     	 movs r2,#1
 3458 0328 1A70     	 strb r2,[r3]
 647:../cleanflight/src/main/fc/fc_rc.c ****                 fix12_t throttleScaler = qConstruct(rcCommand[THROTTLE] - 1000, 1000);
 3459              	 .loc 4 647 0
 3460 032a 5B4B     	 ldr r3,.L223+8
 3461 032c D3ED037A 	 flds s15,[r3,#12]
 3462 0330 9FED5A7A 	 flds s14,.L223+12
 3463 0334 77EEC77A 	 fsubs s15,s15,s14
 3464 0338 FDEEE77A 	 ftosizs s15,s15
 3465 033c C7ED017A 	 fsts s15,[r7,#4]
 3466 0340 BB88     	 ldrh r3,[r7,#4]
 3467 0342 9BB2     	 uxth r3,r3
 3468 0344 1BB2     	 sxth r3,r3
 3469 0346 1846     	 mov r0,r3
 3470 0348 4FF47A71 	 mov r1,#1000
 3471 034c FFF7FEFF 	 bl qConstruct
 3472 0350 F860     	 str r0,[r7,#12]
 648:../cleanflight/src/main/fc/fc_rc.c ****                 rcCommand[THROTTLE] = rxConfig()->midrc + qMultiply(throttleScaler, PWM_RANGE_MIN -
 3473              	 .loc 4 648 0
 3474 0352 FFF7FEFF 	 bl rxConfig
 3475 0356 0346     	 mov r3,r0
 3476 0358 5B8A     	 ldrh r3,[r3,#18]
 3477 035a 9BB2     	 uxth r3,r3
 3478 035c 1C46     	 mov r4,r3
 3479 035e FFF7FEFF 	 bl rxConfig
 3480 0362 0346     	 mov r3,r0
 3481 0364 5B8A     	 ldrh r3,[r3,#18]
 3482 0366 9BB2     	 uxth r3,r3
 3483 0368 C3F57A73 	 rsb r3,r3,#1000
 3484 036c 9BB2     	 uxth r3,r3
 3485 036e 9BB2     	 uxth r3,r3
 3486 0370 1BB2     	 sxth r3,r3
 3487 0372 F868     	 ldr r0,[r7,#12]
 3488 0374 1946     	 mov r1,r3
 3489 0376 FFF7FEFF 	 bl qMultiply
 3490 037a 0346     	 mov r3,r0
 3491 037c 2344     	 add r3,r3,r4
 3492 037e 07EE903A 	 fmsr s15,r3
 3493 0382 F8EEE77A 	 fsitos s15,s15
 3494 0386 444B     	 ldr r3,.L223+8
 3495 0388 C3ED037A 	 fsts s15,[r3,#12]
 3496              	.LBE25:
 3497 038c 33E0     	 b .L214
 3498              	.L217:
 3499              	.LBB26:
 649:../cleanflight/src/main/fc/fc_rc.c ****             } else {
 650:../cleanflight/src/main/fc/fc_rc.c ****                 reverseMotors = false;
 3500              	 .loc 4 650 0
 3501 038e 444B     	 ldr r3,.L223+16
 3502 0390 0022     	 movs r2,#0
 3503 0392 1A70     	 strb r2,[r3]
 651:../cleanflight/src/main/fc/fc_rc.c ****                 fix12_t throttleScaler = qConstruct(rcCommand[THROTTLE] - 1000, 1000);
 3504              	 .loc 4 651 0
 3505 0394 404B     	 ldr r3,.L223+8
 3506 0396 D3ED037A 	 flds s15,[r3,#12]
 3507 039a 9FED407A 	 flds s14,.L223+12
 3508 039e 77EEC77A 	 fsubs s15,s15,s14
 3509 03a2 FDEEE77A 	 ftosizs s15,s15
 3510 03a6 C7ED017A 	 fsts s15,[r7,#4]
 3511 03aa BB88     	 ldrh r3,[r7,#4]
 3512 03ac 9BB2     	 uxth r3,r3
 3513 03ae 1BB2     	 sxth r3,r3
 3514 03b0 1846     	 mov r0,r3
 3515 03b2 4FF47A71 	 mov r1,#1000
 3516 03b6 FFF7FEFF 	 bl qConstruct
 3517 03ba B860     	 str r0,[r7,#8]
 652:../cleanflight/src/main/fc/fc_rc.c ****                 rcCommand[THROTTLE] = rxConfig()->midrc + qMultiply(throttleScaler, PWM_RANGE_MAX -
 3518              	 .loc 4 652 0
 3519 03bc FFF7FEFF 	 bl rxConfig
 3520 03c0 0346     	 mov r3,r0
 3521 03c2 5B8A     	 ldrh r3,[r3,#18]
 3522 03c4 9BB2     	 uxth r3,r3
 3523 03c6 1C46     	 mov r4,r3
 3524 03c8 FFF7FEFF 	 bl rxConfig
 3525 03cc 0346     	 mov r3,r0
 3526 03ce 5B8A     	 ldrh r3,[r3,#18]
 3527 03d0 9BB2     	 uxth r3,r3
 3528 03d2 C3F5FA63 	 rsb r3,r3,#2000
 3529 03d6 9BB2     	 uxth r3,r3
 3530 03d8 9BB2     	 uxth r3,r3
 3531 03da 1BB2     	 sxth r3,r3
 3532 03dc B868     	 ldr r0,[r7,#8]
 3533 03de 1946     	 mov r1,r3
 3534 03e0 FFF7FEFF 	 bl qMultiply
 3535 03e4 0346     	 mov r3,r0
 3536 03e6 2344     	 add r3,r3,r4
 3537 03e8 07EE903A 	 fmsr s15,r3
 3538 03ec F8EEE77A 	 fsitos s15,s15
 3539 03f0 294B     	 ldr r3,.L223+8
 3540 03f2 C3ED037A 	 fsts s15,[r3,#12]
 3541              	.L214:
 3542              	.LBE26:
 653:../cleanflight/src/main/fc/fc_rc.c ****             }
 654:../cleanflight/src/main/fc/fc_rc.c ****         }
 655:../cleanflight/src/main/fc/fc_rc.c ****     }
 656:../cleanflight/src/main/fc/fc_rc.c ****     if (FLIGHT_MODE(HEADFREE_MODE)) {
 3543              	 .loc 4 656 0
 3544 03f6 2B4B     	 ldr r3,.L223+20
 3545 03f8 1B88     	 ldrh r3,[r3]
 3546 03fa 03F04003 	 and r3,r3,#64
 3547 03fe 002B     	 cmp r3,#0
 3548 0400 43D0     	 beq .L194
 3549              	.LBB27:
 657:../cleanflight/src/main/fc/fc_rc.c ****         static t_fp_vector_def  rcCommandBuff;
 658:../cleanflight/src/main/fc/fc_rc.c **** 
 659:../cleanflight/src/main/fc/fc_rc.c ****         rcCommandBuff.X = rcCommand[ROLL];
 3550              	 .loc 4 659 0
 3551 0402 254B     	 ldr r3,.L223+8
 3552 0404 1B68     	 ldr r3,[r3]
 3553 0406 284A     	 ldr r2,.L223+24
 3554 0408 1360     	 str r3,[r2]
 660:../cleanflight/src/main/fc/fc_rc.c ****         rcCommandBuff.Y = rcCommand[PITCH];
 3555              	 .loc 4 660 0
 3556 040a 234B     	 ldr r3,.L223+8
 3557 040c 5B68     	 ldr r3,[r3,#4]
 3558 040e 264A     	 ldr r2,.L223+24
 3559 0410 5360     	 str r3,[r2,#4]
 661:../cleanflight/src/main/fc/fc_rc.c ****         if ((!FLIGHT_MODE(ANGLE_MODE) && (!FLIGHT_MODE(HORIZON_MODE)) && (!FLIGHT_MODE(GPS_RESCUE_M
 3560              	 .loc 4 661 0
 3561 0412 244B     	 ldr r3,.L223+20
 3562 0414 1B88     	 ldrh r3,[r3]
 3563 0416 03F00103 	 and r3,r3,#1
 3564 041a 002B     	 cmp r3,#0
 3565 041c 10D1     	 bne .L219
 3566              	 .loc 4 661 0 is_stmt 0 discriminator 1
 3567 041e 214B     	 ldr r3,.L223+20
 3568 0420 1B88     	 ldrh r3,[r3]
 3569 0422 03F00203 	 and r3,r3,#2
 3570 0426 002B     	 cmp r3,#0
 3571 0428 0AD1     	 bne .L219
 3572              	 .loc 4 661 0 discriminator 2
 3573 042a 1E4B     	 ldr r3,.L223+20
 3574 042c 1B88     	 ldrh r3,[r3]
 3575 042e 03F40063 	 and r3,r3,#2048
 3576 0432 002B     	 cmp r3,#0
 3577 0434 04D1     	 bne .L219
 662:../cleanflight/src/main/fc/fc_rc.c ****             rcCommandBuff.Z = rcCommand[YAW];
 3578              	 .loc 4 662 0 is_stmt 1
 3579 0436 184B     	 ldr r3,.L223+8
 3580 0438 9B68     	 ldr r3,[r3,#8]
 3581 043a 1B4A     	 ldr r2,.L223+24
 3582 043c 9360     	 str r3,[r2,#8]
 3583 043e 03E0     	 b .L220
 3584              	.L219:
 663:../cleanflight/src/main/fc/fc_rc.c ****         } else {
 664:../cleanflight/src/main/fc/fc_rc.c ****             rcCommandBuff.Z = 0;
 3585              	 .loc 4 664 0
 3586 0440 194B     	 ldr r3,.L223+24
 3587 0442 4FF00002 	 mov r2,#0
 3588 0446 9A60     	 str r2,[r3,#8]
 3589              	.L220:
 665:../cleanflight/src/main/fc/fc_rc.c ****         }
 666:../cleanflight/src/main/fc/fc_rc.c ****         imuQuaternionHeadfreeTransformVectorEarthToBody(&rcCommandBuff);
 3590              	 .loc 4 666 0
 3591 0448 1748     	 ldr r0,.L223+24
 3592 044a FFF7FEFF 	 bl imuQuaternionHeadfreeTransformVectorEarthToBody
 667:../cleanflight/src/main/fc/fc_rc.c ****         rcCommand[ROLL] = rcCommandBuff.X;
 3593              	 .loc 4 667 0
 3594 044e 164B     	 ldr r3,.L223+24
 3595 0450 1B68     	 ldr r3,[r3]
 3596 0452 114A     	 ldr r2,.L223+8
 3597 0454 1360     	 str r3,[r2]
 668:../cleanflight/src/main/fc/fc_rc.c ****         rcCommand[PITCH] = rcCommandBuff.Y;
 3598              	 .loc 4 668 0
 3599 0456 144B     	 ldr r3,.L223+24
 3600 0458 5B68     	 ldr r3,[r3,#4]
 3601 045a 0F4A     	 ldr r2,.L223+8
 3602 045c 5360     	 str r3,[r2,#4]
 669:../cleanflight/src/main/fc/fc_rc.c ****         if ((!FLIGHT_MODE(ANGLE_MODE)&&(!FLIGHT_MODE(HORIZON_MODE)) && (!FLIGHT_MODE(GPS_RESCUE_MOD
 3603              	 .loc 4 669 0
 3604 045e 114B     	 ldr r3,.L223+20
 3605 0460 1B88     	 ldrh r3,[r3]
 3606 0462 03F00103 	 and r3,r3,#1
 3607 0466 002B     	 cmp r3,#0
 3608 0468 0FD1     	 bne .L194
 3609              	 .loc 4 669 0 is_stmt 0 discriminator 1
 3610 046a 0E4B     	 ldr r3,.L223+20
 3611 046c 1B88     	 ldrh r3,[r3]
 3612 046e 03F00203 	 and r3,r3,#2
 3613 0472 002B     	 cmp r3,#0
 3614 0474 09D1     	 bne .L194
 3615              	 .loc 4 669 0 discriminator 2
 3616 0476 0B4B     	 ldr r3,.L223+20
 3617 0478 1B88     	 ldrh r3,[r3]
 3618 047a 03F40063 	 and r3,r3,#2048
 3619 047e 002B     	 cmp r3,#0
 3620 0480 03D1     	 bne .L194
 670:../cleanflight/src/main/fc/fc_rc.c ****             rcCommand[YAW] = rcCommandBuff.Z;
 3621              	 .loc 4 670 0 is_stmt 1
 3622 0482 094B     	 ldr r3,.L223+24
 3623 0484 9B68     	 ldr r3,[r3,#8]
 3624 0486 044A     	 ldr r2,.L223+8
 3625 0488 9360     	 str r3,[r2,#8]
 3626              	.L194:
 3627              	.LBE27:
 671:../cleanflight/src/main/fc/fc_rc.c ****         }
 672:../cleanflight/src/main/fc/fc_rc.c ****     }
 673:../cleanflight/src/main/fc/fc_rc.c **** }
 3628              	 .loc 4 673 0
 3629 048a 3437     	 adds r7,r7,#52
 3630              	.LCFI128:
 3631              	 .cfi_def_cfa_offset 12
 3632 048c BD46     	 mov sp,r7
 3633              	.LCFI129:
 3634              	 .cfi_def_cfa_register 13
 3635              	 
 3636 048e 90BD     	 pop {r4,r7,pc}
 3637              	.L224:
 3638              	 .align 2
 3639              	.L223:
 3640 0490 00000000 	 .word rcData
 3641 0494 1F85EB51 	 .word 1374389535
 3642 0498 00000000 	 .word rcCommand
 3643 049c 00007A44 	 .word 1148846080
 3644 04a0 00000000 	 .word reverseMotors
 3645 04a4 00000000 	 .word flightModeFlags
 3646 04a8 00000000 	 .word rcCommandBuff.13993
 3647              	 .cfi_endproc
 3648              	.LFE596:
 3650              	 .section .text.resetYawAxis,"ax",%progbits
 3651              	 .align 2
 3652              	 .global resetYawAxis
 3653              	 .thumb
 3654              	 .thumb_func
 3656              	resetYawAxis:
 3657              	.LFB597:
 674:../cleanflight/src/main/fc/fc_rc.c **** 
 675:../cleanflight/src/main/fc/fc_rc.c **** void resetYawAxis(void)
 676:../cleanflight/src/main/fc/fc_rc.c **** {
 3658              	 .loc 4 676 0
 3659              	 .cfi_startproc
 3660              	 
 3661              	 
 3662              	 
 3663 0000 80B4     	 push {r7}
 3664              	.LCFI130:
 3665              	 .cfi_def_cfa_offset 4
 3666              	 .cfi_offset 7,-4
 3667 0002 00AF     	 add r7,sp,#0
 3668              	.LCFI131:
 3669              	 .cfi_def_cfa_register 7
 677:../cleanflight/src/main/fc/fc_rc.c ****     rcCommand[YAW] = 0;
 3670              	 .loc 4 677 0
 3671 0004 054B     	 ldr r3,.L226
 3672 0006 4FF00002 	 mov r2,#0
 3673 000a 9A60     	 str r2,[r3,#8]
 678:../cleanflight/src/main/fc/fc_rc.c ****     setpointRate[YAW] = 0;
 3674              	 .loc 4 678 0
 3675 000c 044B     	 ldr r3,.L226+4
 3676 000e 4FF00002 	 mov r2,#0
 3677 0012 9A60     	 str r2,[r3,#8]
 679:../cleanflight/src/main/fc/fc_rc.c **** }
 3678              	 .loc 4 679 0
 3679 0014 BD46     	 mov sp,r7
 3680              	.LCFI132:
 3681              	 .cfi_def_cfa_register 13
 3682              	 
 3683 0016 5DF8047B 	 ldr r7,[sp],#4
 3684              	.LCFI133:
 3685              	 .cfi_restore 7
 3686              	 .cfi_def_cfa_offset 0
 3687 001a 7047     	 bx lr
 3688              	.L227:
 3689              	 .align 2
 3690              	.L226:
 3691 001c 00000000 	 .word rcCommand
 3692 0020 00000000 	 .word setpointRate
 3693              	 .cfi_endproc
 3694              	.LFE597:
 3696              	 .section .text.isMotorsReversed,"ax",%progbits
 3697              	 .align 2
 3698              	 .global isMotorsReversed
 3699              	 .thumb
 3700              	 .thumb_func
 3702              	isMotorsReversed:
 3703              	.LFB598:
 680:../cleanflight/src/main/fc/fc_rc.c **** 
 681:../cleanflight/src/main/fc/fc_rc.c **** bool isMotorsReversed(void)
 682:../cleanflight/src/main/fc/fc_rc.c **** {
 3704              	 .loc 4 682 0
 3705              	 .cfi_startproc
 3706              	 
 3707              	 
 3708              	 
 3709 0000 80B4     	 push {r7}
 3710              	.LCFI134:
 3711              	 .cfi_def_cfa_offset 4
 3712              	 .cfi_offset 7,-4
 3713 0002 00AF     	 add r7,sp,#0
 3714              	.LCFI135:
 3715              	 .cfi_def_cfa_register 7
 683:../cleanflight/src/main/fc/fc_rc.c ****     return reverseMotors;
 3716              	 .loc 4 683 0
 3717 0004 034B     	 ldr r3,.L230
 3718 0006 1B78     	 ldrb r3,[r3]
 684:../cleanflight/src/main/fc/fc_rc.c **** }
 3719              	 .loc 4 684 0
 3720 0008 1846     	 mov r0,r3
 3721 000a BD46     	 mov sp,r7
 3722              	.LCFI136:
 3723              	 .cfi_def_cfa_register 13
 3724              	 
 3725 000c 5DF8047B 	 ldr r7,[sp],#4
 3726              	.LCFI137:
 3727              	 .cfi_restore 7
 3728              	 .cfi_def_cfa_offset 0
 3729 0010 7047     	 bx lr
 3730              	.L231:
 3731 0012 00BF     	 .align 2
 3732              	.L230:
 3733 0014 00000000 	 .word reverseMotors
 3734              	 .cfi_endproc
 3735              	.LFE598:
 3737              	 .section .text.initRcProcessing,"ax",%progbits
 3738              	 .align 2
 3739              	 .global initRcProcessing
 3740              	 .thumb
 3741              	 .thumb_func
 3743              	initRcProcessing:
 3744              	.LFB599:
 685:../cleanflight/src/main/fc/fc_rc.c **** 
 686:../cleanflight/src/main/fc/fc_rc.c **** void initRcProcessing(void)
 687:../cleanflight/src/main/fc/fc_rc.c **** {
 3745              	 .loc 4 687 0
 3746              	 .cfi_startproc
 3747              	 
 3748              	 
 3749 0000 B0B5     	 push {r4,r5,r7,lr}
 3750              	.LCFI138:
 3751              	 .cfi_def_cfa_offset 16
 3752              	 .cfi_offset 4,-16
 3753              	 .cfi_offset 5,-12
 3754              	 .cfi_offset 7,-8
 3755              	 .cfi_offset 14,-4
 3756 0002 82B0     	 sub sp,sp,#8
 3757              	.LCFI139:
 3758              	 .cfi_def_cfa_offset 24
 3759 0004 00AF     	 add r7,sp,#0
 3760              	.LCFI140:
 3761              	 .cfi_def_cfa_register 7
 3762              	.LBB28:
 688:../cleanflight/src/main/fc/fc_rc.c ****     for (int i = 0; i < THROTTLE_LOOKUP_LENGTH; i++) {
 3763              	 .loc 4 688 0
 3764 0006 0023     	 movs r3,#0
 3765 0008 7B60     	 str r3,[r7,#4]
 3766 000a 6FE0     	 b .L233
 3767              	.L236:
 3768              	.LBB29:
 689:../cleanflight/src/main/fc/fc_rc.c ****         const int16_t tmp = 10 * i - currentControlRateProfile->thrMid8;
 3769              	 .loc 4 689 0
 3770 000c 7B68     	 ldr r3,[r7,#4]
 3771 000e 9BB2     	 uxth r3,r3
 3772 0010 1A46     	 mov r2,r3
 3773 0012 9200     	 lsls r2,r2,#2
 3774 0014 1344     	 add r3,r3,r2
 3775 0016 5B00     	 lsls r3,r3,#1
 3776 0018 9AB2     	 uxth r2,r3
 3777 001a 5B4B     	 ldr r3,.L247
 3778 001c 1B68     	 ldr r3,[r3]
 3779 001e 1B78     	 ldrb r3,[r3]
 3780 0020 9BB2     	 uxth r3,r3
 3781 0022 D31A     	 subs r3,r2,r3
 3782 0024 9BB2     	 uxth r3,r3
 3783 0026 3B80     	 strh r3,[r7]
 690:../cleanflight/src/main/fc/fc_rc.c ****         uint8_t y = 1;
 3784              	 .loc 4 690 0
 3785 0028 0123     	 movs r3,#1
 3786 002a FB70     	 strb r3,[r7,#3]
 691:../cleanflight/src/main/fc/fc_rc.c ****         if (tmp > 0)
 3787              	 .loc 4 691 0
 3788 002c B7F90030 	 ldrsh r3,[r7]
 3789 0030 002B     	 cmp r3,#0
 3790 0032 05DD     	 ble .L234
 692:../cleanflight/src/main/fc/fc_rc.c ****             y = 100 - currentControlRateProfile->thrMid8;
 3791              	 .loc 4 692 0
 3792 0034 544B     	 ldr r3,.L247
 3793 0036 1B68     	 ldr r3,[r3]
 3794 0038 1B78     	 ldrb r3,[r3]
 3795 003a C3F16403 	 rsb r3,r3,#100
 3796 003e FB70     	 strb r3,[r7,#3]
 3797              	.L234:
 693:../cleanflight/src/main/fc/fc_rc.c ****         if (tmp < 0)
 3798              	 .loc 4 693 0
 3799 0040 B7F90030 	 ldrsh r3,[r7]
 3800 0044 002B     	 cmp r3,#0
 3801 0046 03DA     	 bge .L235
 694:../cleanflight/src/main/fc/fc_rc.c ****             y = currentControlRateProfile->thrMid8;
 3802              	 .loc 4 694 0
 3803 0048 4F4B     	 ldr r3,.L247
 3804 004a 1B68     	 ldr r3,[r3]
 3805 004c 1B78     	 ldrb r3,[r3]
 3806 004e FB70     	 strb r3,[r7,#3]
 3807              	.L235:
 695:../cleanflight/src/main/fc/fc_rc.c ****         lookupThrottleRC[i] = 10 * currentControlRateProfile->thrMid8 + tmp * (100 - currentControl
 3808              	 .loc 4 695 0 discriminator 2
 3809 0050 4D4B     	 ldr r3,.L247
 3810 0052 1B68     	 ldr r3,[r3]
 3811 0054 1B78     	 ldrb r3,[r3]
 3812 0056 9BB2     	 uxth r3,r3
 3813 0058 1A46     	 mov r2,r3
 3814 005a 9200     	 lsls r2,r2,#2
 3815 005c 1344     	 add r3,r3,r2
 3816 005e 5B00     	 lsls r3,r3,#1
 3817 0060 9AB2     	 uxth r2,r3
 3818 0062 B7F90030 	 ldrsh r3,[r7]
 3819 0066 4849     	 ldr r1,.L247
 3820 0068 0968     	 ldr r1,[r1]
 3821 006a 4978     	 ldrb r1,[r1,#1]
 3822 006c C1F16400 	 rsb r0,r1,#100
 3823 0070 4549     	 ldr r1,.L247
 3824 0072 0968     	 ldr r1,[r1]
 3825 0074 4978     	 ldrb r1,[r1,#1]
 3826 0076 0D46     	 mov r5,r1
 3827 0078 B7F90010 	 ldrsh r1,[r7]
 3828 007c B7F90040 	 ldrsh r4,[r7]
 3829 0080 04FB01F1 	 mul r1,r4,r1
 3830 0084 01FB05F4 	 mul r4,r1,r5
 3831 0088 F978     	 ldrb r1,[r7,#3]
 3832 008a FD78     	 ldrb r5,[r7,#3]
 3833 008c 05FB01F1 	 mul r1,r5,r1
 3834 0090 94FBF1F1 	 sdiv r1,r4,r1
 3835 0094 0144     	 add r1,r1,r0
 3836 0096 01FB03F3 	 mul r3,r1,r3
 3837 009a 3C49     	 ldr r1,.L247+4
 3838 009c 81FB0301 	 smull r0,r1,r1,r3
 3839 00a0 8910     	 asrs r1,r1,#2
 3840 00a2 DB17     	 asrs r3,r3,#31
 3841 00a4 CB1A     	 subs r3,r1,r3
 3842 00a6 9BB2     	 uxth r3,r3
 3843 00a8 1344     	 add r3,r3,r2
 3844 00aa 9BB2     	 uxth r3,r3
 3845 00ac 99B2     	 uxth r1,r3
 3846 00ae 384A     	 ldr r2,.L247+8
 3847 00b0 7B68     	 ldr r3,[r7,#4]
 3848 00b2 22F81310 	 strh r1,[r2,r3,lsl#1]
 696:../cleanflight/src/main/fc/fc_rc.c ****         lookupThrottleRC[i] = PWM_RANGE_MIN + (PWM_RANGE_MAX - PWM_RANGE_MIN) * lookupThrottleRC[i]
 3849              	 .loc 4 696 0 discriminator 2
 3850 00b6 364A     	 ldr r2,.L247+8
 3851 00b8 7B68     	 ldr r3,[r7,#4]
 3852 00ba 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 3853 00be 1BB2     	 sxth r3,r3
 3854 00c0 4FF47A72 	 mov r2,#1000
 3855 00c4 02FB03F3 	 mul r3,r2,r3
 3856 00c8 324A     	 ldr r2,.L247+12
 3857 00ca 82FB0312 	 smull r1,r2,r2,r3
 3858 00ce 9211     	 asrs r2,r2,#6
 3859 00d0 DB17     	 asrs r3,r3,#31
 3860 00d2 D31A     	 subs r3,r2,r3
 3861 00d4 9BB2     	 uxth r3,r3
 3862 00d6 03F57A73 	 add r3,r3,#1000
 3863 00da 9BB2     	 uxth r3,r3
 3864 00dc 99B2     	 uxth r1,r3
 3865 00de 2C4A     	 ldr r2,.L247+8
 3866 00e0 7B68     	 ldr r3,[r7,#4]
 3867 00e2 22F81310 	 strh r1,[r2,r3,lsl#1]
 3868              	.LBE29:
 688:../cleanflight/src/main/fc/fc_rc.c ****         const int16_t tmp = 10 * i - currentControlRateProfile->thrMid8;
 3869              	 .loc 4 688 0 discriminator 2
 3870 00e6 7B68     	 ldr r3,[r7,#4]
 3871 00e8 0133     	 adds r3,r3,#1
 3872 00ea 7B60     	 str r3,[r7,#4]
 3873              	.L233:
 688:../cleanflight/src/main/fc/fc_rc.c ****         const int16_t tmp = 10 * i - currentControlRateProfile->thrMid8;
 3874              	 .loc 4 688 0 is_stmt 0 discriminator 1
 3875 00ec 7B68     	 ldr r3,[r7,#4]
 3876 00ee 0B2B     	 cmp r3,#11
 3877 00f0 8CDD     	 ble .L236
 3878              	.LBE28:
 697:../cleanflight/src/main/fc/fc_rc.c ****     }
 698:../cleanflight/src/main/fc/fc_rc.c **** 
 699:../cleanflight/src/main/fc/fc_rc.c ****     switch (currentControlRateProfile->rates_type) {
 3879              	 .loc 4 699 0 is_stmt 1
 3880 00f2 254B     	 ldr r3,.L247
 3881 00f4 1B68     	 ldr r3,[r3]
 3882 00f6 9B78     	 ldrb r3,[r3,#2]
 3883 00f8 012B     	 cmp r3,#1
 3884 00fa 03D0     	 beq .L238
 700:../cleanflight/src/main/fc/fc_rc.c ****     case RATES_TYPE_BETAFLIGHT:
 701:../cleanflight/src/main/fc/fc_rc.c ****     default:
 702:../cleanflight/src/main/fc/fc_rc.c ****         applyRates = applyBetaflightRates;
 3885              	 .loc 4 702 0
 3886 00fc 264B     	 ldr r3,.L247+16
 3887 00fe 274A     	 ldr r2,.L247+20
 3888 0100 1A60     	 str r2,[r3]
 703:../cleanflight/src/main/fc/fc_rc.c **** 
 704:../cleanflight/src/main/fc/fc_rc.c ****         break;
 3889              	 .loc 4 704 0
 3890 0102 03E0     	 b .L239
 3891              	.L238:
 705:../cleanflight/src/main/fc/fc_rc.c ****     case RATES_TYPE_RACEFLIGHT:
 706:../cleanflight/src/main/fc/fc_rc.c ****         applyRates = applyRaceFlightRates;
 3892              	 .loc 4 706 0
 3893 0104 244B     	 ldr r3,.L247+16
 3894 0106 264A     	 ldr r2,.L247+24
 3895 0108 1A60     	 str r2,[r3]
 707:../cleanflight/src/main/fc/fc_rc.c **** 
 708:../cleanflight/src/main/fc/fc_rc.c ****         break;
 3896              	 .loc 4 708 0
 3897 010a 00BF     	 nop
 3898              	.L239:
 709:../cleanflight/src/main/fc/fc_rc.c ****     }
 710:../cleanflight/src/main/fc/fc_rc.c **** 
 711:../cleanflight/src/main/fc/fc_rc.c ****     interpolationChannels = 0;
 3899              	 .loc 4 711 0
 3900 010c 254B     	 ldr r3,.L247+28
 3901 010e 0022     	 movs r2,#0
 3902 0110 1A70     	 strb r2,[r3]
 712:../cleanflight/src/main/fc/fc_rc.c ****     switch (rxConfig()->rcInterpolationChannels) {
 3903              	 .loc 4 712 0
 3904 0112 FFF7FEFF 	 bl rxConfig
 3905 0116 0346     	 mov r3,r0
 3906 0118 5B7E     	 ldrb r3,[r3,#25]
 3907 011a 042B     	 cmp r3,#4
 3908 011c 31D8     	 bhi .L232
 3909 011e 01A2     	 adr r2,.L242
 3910 0120 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 3911              	 .p2align 2
 3912              	.L242:
 3913 0124 55010000 	 .word .L241+1
 3914 0128 47010000 	 .word .L243+1
 3915 012c 39010000 	 .word .L244+1
 3916 0130 73010000 	 .word .L245+1
 3917 0134 65010000 	 .word .L246+1
 3918              	 .p2align 1
 3919              	.L244:
 713:../cleanflight/src/main/fc/fc_rc.c ****     case INTERPOLATION_CHANNELS_RPYT:
 714:../cleanflight/src/main/fc/fc_rc.c ****         interpolationChannels |= THROTTLE_FLAG;
 3920              	 .loc 4 714 0
 3921 0138 1A4B     	 ldr r3,.L247+28
 3922 013a 1B78     	 ldrb r3,[r3]
 3923 013c 43F00803 	 orr r3,r3,#8
 3924 0140 DAB2     	 uxtb r2,r3
 3925 0142 184B     	 ldr r3,.L247+28
 3926 0144 1A70     	 strb r2,[r3]
 3927              	.L243:
 715:../cleanflight/src/main/fc/fc_rc.c **** 
 716:../cleanflight/src/main/fc/fc_rc.c ****         FALLTHROUGH;
 717:../cleanflight/src/main/fc/fc_rc.c ****     case INTERPOLATION_CHANNELS_RPY:
 718:../cleanflight/src/main/fc/fc_rc.c ****         interpolationChannels |= YAW_FLAG;
 3928              	 .loc 4 718 0
 3929 0146 174B     	 ldr r3,.L247+28
 3930 0148 1B78     	 ldrb r3,[r3]
 3931 014a 43F00403 	 orr r3,r3,#4
 3932 014e DAB2     	 uxtb r2,r3
 3933 0150 144B     	 ldr r3,.L247+28
 3934 0152 1A70     	 strb r2,[r3]
 3935              	.L241:
 719:../cleanflight/src/main/fc/fc_rc.c **** 
 720:../cleanflight/src/main/fc/fc_rc.c ****         FALLTHROUGH;
 721:../cleanflight/src/main/fc/fc_rc.c ****     case INTERPOLATION_CHANNELS_RP:
 722:../cleanflight/src/main/fc/fc_rc.c ****         interpolationChannels |= ROLL_FLAG | PITCH_FLAG;
 3936              	 .loc 4 722 0
 3937 0154 134B     	 ldr r3,.L247+28
 3938 0156 1B78     	 ldrb r3,[r3]
 3939 0158 43F00303 	 orr r3,r3,#3
 3940 015c DAB2     	 uxtb r2,r3
 3941 015e 114B     	 ldr r3,.L247+28
 3942 0160 1A70     	 strb r2,[r3]
 723:../cleanflight/src/main/fc/fc_rc.c **** 
 724:../cleanflight/src/main/fc/fc_rc.c ****         break;
 3943              	 .loc 4 724 0
 3944 0162 0EE0     	 b .L232
 3945              	.L246:
 725:../cleanflight/src/main/fc/fc_rc.c ****     case INTERPOLATION_CHANNELS_RPT:
 726:../cleanflight/src/main/fc/fc_rc.c ****         interpolationChannels |= ROLL_FLAG | PITCH_FLAG;
 3946              	 .loc 4 726 0
 3947 0164 0F4B     	 ldr r3,.L247+28
 3948 0166 1B78     	 ldrb r3,[r3]
 3949 0168 43F00303 	 orr r3,r3,#3
 3950 016c DAB2     	 uxtb r2,r3
 3951 016e 0D4B     	 ldr r3,.L247+28
 3952 0170 1A70     	 strb r2,[r3]
 3953              	.L245:
 727:../cleanflight/src/main/fc/fc_rc.c **** 
 728:../cleanflight/src/main/fc/fc_rc.c ****         FALLTHROUGH;
 729:../cleanflight/src/main/fc/fc_rc.c ****     case INTERPOLATION_CHANNELS_T:
 730:../cleanflight/src/main/fc/fc_rc.c ****         interpolationChannels |= THROTTLE_FLAG;
 3954              	 .loc 4 730 0
 3955 0172 0C4B     	 ldr r3,.L247+28
 3956 0174 1B78     	 ldrb r3,[r3]
 3957 0176 43F00803 	 orr r3,r3,#8
 3958 017a DAB2     	 uxtb r2,r3
 3959 017c 094B     	 ldr r3,.L247+28
 3960 017e 1A70     	 strb r2,[r3]
 731:../cleanflight/src/main/fc/fc_rc.c **** 
 732:../cleanflight/src/main/fc/fc_rc.c ****         break;
 3961              	 .loc 4 732 0
 3962 0180 00BF     	 nop
 3963              	.L232:
 733:../cleanflight/src/main/fc/fc_rc.c ****     }
 734:../cleanflight/src/main/fc/fc_rc.c **** }
 3964              	 .loc 4 734 0
 3965 0182 0837     	 adds r7,r7,#8
 3966              	.LCFI141:
 3967              	 .cfi_def_cfa_offset 16
 3968 0184 BD46     	 mov sp,r7
 3969              	.LCFI142:
 3970              	 .cfi_def_cfa_register 13
 3971              	 
 3972 0186 B0BD     	 pop {r4,r5,r7,pc}
 3973              	.L248:
 3974              	 .align 2
 3975              	.L247:
 3976 0188 00000000 	 .word currentControlRateProfile
 3977 018c 67666666 	 .word 1717986919
 3978 0190 00000000 	 .word lookupThrottleRC
 3979 0194 D34D6210 	 .word 274877907
 3980 0198 00000000 	 .word applyRates
 3981 019c 00000000 	 .word applyBetaflightRates
 3982 01a0 00000000 	 .word applyRaceFlightRates
 3983 01a4 00000000 	 .word interpolationChannels
 3984              	 .cfi_endproc
 3985              	.LFE599:
 3987              	 .section .text.rcSmoothingIsEnabled,"ax",%progbits
 3988              	 .align 2
 3989              	 .global rcSmoothingIsEnabled
 3990              	 .thumb
 3991              	 .thumb_func
 3993              	rcSmoothingIsEnabled:
 3994              	.LFB600:
 735:../cleanflight/src/main/fc/fc_rc.c **** 
 736:../cleanflight/src/main/fc/fc_rc.c **** bool rcSmoothingIsEnabled(void)
 737:../cleanflight/src/main/fc/fc_rc.c **** {
 3995              	 .loc 4 737 0
 3996              	 .cfi_startproc
 3997              	 
 3998              	 
 3999 0000 80B5     	 push {r7,lr}
 4000              	.LCFI143:
 4001              	 .cfi_def_cfa_offset 8
 4002              	 .cfi_offset 7,-8
 4003              	 .cfi_offset 14,-4
 4004 0002 00AF     	 add r7,sp,#0
 4005              	.LCFI144:
 4006              	 .cfi_def_cfa_register 7
 738:../cleanflight/src/main/fc/fc_rc.c ****     return !(
 739:../cleanflight/src/main/fc/fc_rc.c **** #if defined(USE_RC_SMOOTHING_FILTER)
 740:../cleanflight/src/main/fc/fc_rc.c ****         rxConfig()->rc_smoothing_type == RC_SMOOTHING_TYPE_INTERPOLATION &&
 4007              	 .loc 4 740 0
 4008 0004 FFF7FEFF 	 bl rxConfig
 4009 0008 0346     	 mov r3,r0
 4010 000a 93F82430 	 ldrb r3,[r3,#36]
 738:../cleanflight/src/main/fc/fc_rc.c ****     return !(
 4011              	 .loc 4 738 0
 4012 000e 002B     	 cmp r3,#0
 4013 0010 05D1     	 bne .L250
 741:../cleanflight/src/main/fc/fc_rc.c **** #endif
 742:../cleanflight/src/main/fc/fc_rc.c ****         rxConfig()->rcInterpolation == RC_SMOOTHING_OFF);
 4014              	 .loc 4 742 0 discriminator 2
 4015 0012 FFF7FEFF 	 bl rxConfig
 4016 0016 0346     	 mov r3,r0
 4017 0018 1B7E     	 ldrb r3,[r3,#24]
 738:../cleanflight/src/main/fc/fc_rc.c ****     return !(
 4018              	 .loc 4 738 0 discriminator 2
 4019 001a 002B     	 cmp r3,#0
 4020 001c 01D0     	 beq .L251
 4021              	.L250:
 738:../cleanflight/src/main/fc/fc_rc.c ****     return !(
 4022              	 .loc 4 738 0 is_stmt 0 discriminator 3
 4023 001e 0123     	 movs r3,#1
 4024 0020 00E0     	 b .L252
 4025              	.L251:
 738:../cleanflight/src/main/fc/fc_rc.c ****     return !(
 4026              	 .loc 4 738 0 discriminator 4
 4027 0022 0023     	 movs r3,#0
 4028              	.L252:
 738:../cleanflight/src/main/fc/fc_rc.c ****     return !(
 4029              	 .loc 4 738 0 discriminator 6
 4030 0024 03F00103 	 and r3,r3,#1
 4031 0028 DBB2     	 uxtb r3,r3
 743:../cleanflight/src/main/fc/fc_rc.c **** }
 4032              	 .loc 4 743 0 is_stmt 1 discriminator 6
 4033 002a 1846     	 mov r0,r3
 4034 002c 80BD     	 pop {r7,pc}
 4035              	 .cfi_endproc
 4036              	.LFE600:
 4038 002e 00BF     	 .section .text.rcSmoothingGetValue,"ax",%progbits
 4039              	 .align 2
 4040              	 .global rcSmoothingGetValue
 4041              	 .thumb
 4042              	 .thumb_func
 4044              	rcSmoothingGetValue:
 4045              	.LFB601:
 744:../cleanflight/src/main/fc/fc_rc.c **** 
 745:../cleanflight/src/main/fc/fc_rc.c **** #ifdef USE_RC_SMOOTHING_FILTER
 746:../cleanflight/src/main/fc/fc_rc.c **** int rcSmoothingGetValue(int whichValue)
 747:../cleanflight/src/main/fc/fc_rc.c **** {
 4046              	 .loc 4 747 0
 4047              	 .cfi_startproc
 4048              	 
 4049              	 
 4050              	 
 4051 0000 80B4     	 push {r7}
 4052              	.LCFI145:
 4053              	 .cfi_def_cfa_offset 4
 4054              	 .cfi_offset 7,-4
 4055 0002 83B0     	 sub sp,sp,#12
 4056              	.LCFI146:
 4057              	 .cfi_def_cfa_offset 16
 4058 0004 00AF     	 add r7,sp,#0
 4059              	.LCFI147:
 4060              	 .cfi_def_cfa_register 7
 4061 0006 7860     	 str r0,[r7,#4]
 748:../cleanflight/src/main/fc/fc_rc.c ****     switch (whichValue) {
 4062              	 .loc 4 748 0
 4063 0008 7B68     	 ldr r3,[r7,#4]
 4064 000a 012B     	 cmp r3,#1
 4065 000c 08D0     	 beq .L256
 4066 000e 022B     	 cmp r3,#2
 4067 0010 0BD0     	 beq .L257
 4068 0012 002B     	 cmp r3,#0
 4069 0014 0DD1     	 bne .L260
 749:../cleanflight/src/main/fc/fc_rc.c ****         case RC_SMOOTHING_VALUE_INPUT_ACTIVE:
 750:../cleanflight/src/main/fc/fc_rc.c ****             return rcSmoothingData.inputCutoffFrequency;
 4070              	 .loc 4 750 0
 4071 0016 0A4B     	 ldr r3,.L261
 4072 0018 B3F89130 	 ldrh r3,[r3,#145]
 4073 001c 9BB2     	 uxth r3,r3
 4074 001e 09E0     	 b .L259
 4075              	.L256:
 751:../cleanflight/src/main/fc/fc_rc.c ****         case RC_SMOOTHING_VALUE_DERIVATIVE_ACTIVE:
 752:../cleanflight/src/main/fc/fc_rc.c ****             return rcSmoothingData.derivativeCutoffFrequency;
 4076              	 .loc 4 752 0
 4077 0020 074B     	 ldr r3,.L261
 4078 0022 B3F89330 	 ldrh r3,[r3,#147]
 4079 0026 9BB2     	 uxth r3,r3
 4080 0028 04E0     	 b .L259
 4081              	.L257:
 753:../cleanflight/src/main/fc/fc_rc.c ****         case RC_SMOOTHING_VALUE_AVERAGE_FRAME:
 754:../cleanflight/src/main/fc/fc_rc.c ****             return rcSmoothingData.averageFrameTimeUs;
 4082              	 .loc 4 754 0
 4083 002a 054B     	 ldr r3,.L261
 4084 002c D3F89530 	 ldr r3,[r3,#149]
 4085 0030 00E0     	 b .L259
 4086              	.L260:
 755:../cleanflight/src/main/fc/fc_rc.c ****         default:
 756:../cleanflight/src/main/fc/fc_rc.c ****             return 0;
 4087              	 .loc 4 756 0
 4088 0032 0023     	 movs r3,#0
 4089              	.L259:
 757:../cleanflight/src/main/fc/fc_rc.c ****     }
 758:../cleanflight/src/main/fc/fc_rc.c **** }
 4090              	 .loc 4 758 0
 4091 0034 1846     	 mov r0,r3
 4092 0036 0C37     	 adds r7,r7,#12
 4093              	.LCFI148:
 4094              	 .cfi_def_cfa_offset 4
 4095 0038 BD46     	 mov sp,r7
 4096              	.LCFI149:
 4097              	 .cfi_def_cfa_register 13
 4098              	 
 4099 003a 5DF8047B 	 ldr r7,[sp],#4
 4100              	.LCFI150:
 4101              	 .cfi_restore 7
 4102              	 .cfi_def_cfa_offset 0
 4103 003e 7047     	 bx lr
 4104              	.L262:
 4105              	 .align 2
 4106              	.L261:
 4107 0040 00000000 	 .word rcSmoothingData
 4108              	 .cfi_endproc
 4109              	.LFE601:
 4111              	 .section .text.rcSmoothingInitializationComplete,"ax",%progbits
 4112              	 .align 2
 4113              	 .global rcSmoothingInitializationComplete
 4114              	 .thumb
 4115              	 .thumb_func
 4117              	rcSmoothingInitializationComplete:
 4118              	.LFB602:
 759:../cleanflight/src/main/fc/fc_rc.c **** 
 760:../cleanflight/src/main/fc/fc_rc.c **** bool rcSmoothingInitializationComplete(void) {
 4119              	 .loc 4 760 0
 4120              	 .cfi_startproc
 4121              	 
 4122              	 
 4123 0000 80B5     	 push {r7,lr}
 4124              	.LCFI151:
 4125              	 .cfi_def_cfa_offset 8
 4126              	 .cfi_offset 7,-8
 4127              	 .cfi_offset 14,-4
 4128 0002 00AF     	 add r7,sp,#0
 4129              	.LCFI152:
 4130              	 .cfi_def_cfa_register 7
 761:../cleanflight/src/main/fc/fc_rc.c ****     return (rxConfig()->rc_smoothing_type != RC_SMOOTHING_TYPE_FILTER) || rcSmoothingData.filterIni
 4131              	 .loc 4 761 0
 4132 0004 FFF7FEFF 	 bl rxConfig
 4133 0008 0346     	 mov r3,r0
 4134 000a 93F82430 	 ldrb r3,[r3,#36]
 4135 000e 012B     	 cmp r3,#1
 4136 0010 03D1     	 bne .L264
 4137              	 .loc 4 761 0 is_stmt 0 discriminator 2
 4138 0012 064B     	 ldr r3,.L268
 4139 0014 1B78     	 ldrb r3,[r3]
 4140 0016 002B     	 cmp r3,#0
 4141 0018 01D0     	 beq .L265
 4142              	.L264:
 4143              	 .loc 4 761 0 discriminator 3
 4144 001a 0123     	 movs r3,#1
 4145 001c 00E0     	 b .L266
 4146              	.L265:
 4147              	 .loc 4 761 0 discriminator 4
 4148 001e 0023     	 movs r3,#0
 4149              	.L266:
 4150              	 .loc 4 761 0 discriminator 6
 4151 0020 03F00103 	 and r3,r3,#1
 4152 0024 DBB2     	 uxtb r3,r3
 762:../cleanflight/src/main/fc/fc_rc.c **** }
 4153              	 .loc 4 762 0 is_stmt 1 discriminator 6
 4154 0026 1846     	 mov r0,r3
 4155 0028 80BD     	 pop {r7,pc}
 4156              	.L269:
 4157 002a 00BF     	 .align 2
 4158              	.L268:
 4159 002c 00000000 	 .word rcSmoothingData
 4160              	 .cfi_endproc
 4161              	.LFE602:
 4163              	 .section .bss.lastFpvCamAngleDegrees.13857,"aw",%nobits
 4166              	lastFpvCamAngleDegrees.13857:
 4167 0000 00       	 .space 1
 4168              	 .section .data.cosFactor.13858,"aw",%progbits
 4169              	 .align 2
 4172              	cosFactor.13858:
 4173 0000 0000803F 	 .word 1065353216
 4174              	 .section .bss.sinFactor.13859,"aw",%nobits
 4175              	 .align 2
 4178              	sinFactor.13859:
 4179 0000 00000000 	 .space 4
 4180              	 .section .bss.index.13865,"aw",%nobits
 4181              	 .align 2
 4184              	index.13865:
 4185 0000 00000000 	 .space 4
 4186              	 .section .bss.rcCommandThrottlePrevious.13866,"aw",%nobits
 4187              	 .align 2
 4190              	rcCommandThrottlePrevious.13866:
 4191 0000 00000000 	 .space 40
 4191      00000000 
 4191      00000000 
 4191      00000000 
 4191      00000000 
 4192              	 .section .bss.rcInterpolationStepCount.13878,"aw",%nobits
 4193              	 .align 1
 4196              	rcInterpolationStepCount.13878:
 4197 0000 0000     	 .space 2
 4198              	 .section .bss.rcCommandInterp.13876,"aw",%nobits
 4199              	 .align 2
 4202              	rcCommandInterp.13876:
 4203 0000 00000000 	 .space 16
 4203      00000000 
 4203      00000000 
 4203      00000000 
 4204              	 .section .bss.rcStepSize.13877,"aw",%nobits
 4205              	 .align 2
 4208              	rcStepSize.13877:
 4209 0000 00000000 	 .space 16
 4209      00000000 
 4209      00000000 
 4209      00000000 
 4210              	 .section .bss.initialized.13937,"aw",%nobits
 4213              	initialized.13937:
 4214 0000 00       	 .space 1
 4215              	 .section .bss.calculateCutoffs.13939,"aw",%nobits
 4218              	calculateCutoffs.13939:
 4219 0000 00       	 .space 1
 4220              	 .section .bss.lastRxData.13936,"aw",%nobits
 4221              	 .align 2
 4224              	lastRxData.13936:
 4225 0000 00000000 	 .space 16
 4225      00000000 
 4225      00000000 
 4225      00000000 
 4226              	 .section .bss.validRxFrameTimeMs.13938,"aw",%nobits
 4227              	 .align 2
 4230              	validRxFrameTimeMs.13938:
 4231 0000 00000000 	 .space 4
 4232              	 .section .bss.rcCommandBuff.13993,"aw",%nobits
 4233              	 .align 2
 4236              	rcCommandBuff.13993:
 4237 0000 00000000 	 .space 12
 4237      00000000 
 4237      00000000 
 4238              	 .text
 4239              	.Letext0:
 4240              	 .file 5 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4241              	 .file 6 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4242              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 4243              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 4244              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/axis.h"
 4245              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 4246              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 4247              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/controlrate_profile.h"
 4248              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 4249              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_core.h"
 4250              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_rc.h"
 4251              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/filter.h"
 4252              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 4253              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 4254              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
 4255              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
 4256              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/gps_rescue.h"
 4257              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
 4258              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 4259              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 4260              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
 4261              	 .file 26 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
 4262              	 .file 27 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
 4263              	 .file 28 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 4264              	 .file 29 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 fc_rc.c
    {standard input}:20     .text.constrain:00000000 $t
    {standard input}:24     .text.constrain:00000000 constrain
    {standard input}:84     .text.constrainf:00000000 $t
    {standard input}:88     .text.constrainf:00000000 constrainf
    {standard input}:150    .text.rcControlsConfig:00000000 $t
    {standard input}:154    .text.rcControlsConfig:00000000 rcControlsConfig
    {standard input}:184    .text.rcControlsConfig:00000010 $d
    {standard input}:189    .text.flight3DConfig:00000000 $t
    {standard input}:193    .text.flight3DConfig:00000000 flight3DConfig
    {standard input}:222    .text.flight3DConfig:00000010 $d
    {standard input}:227    .text.rxConfig:00000000 $t
    {standard input}:231    .text.rxConfig:00000000 rxConfig
    {standard input}:261    .text.rxConfig:00000010 $d
    {standard input}:266    .bss.setpointRate:00000000 $d
    {standard input}:269    .bss.setpointRate:00000000 setpointRate
    {standard input}:272    .bss.rcDeflection:00000000 $d
    {standard input}:275    .bss.rcDeflection:00000000 rcDeflection
    {standard input}:278    .bss.rcDeflectionAbs:00000000 $d
    {standard input}:281    .bss.rcDeflectionAbs:00000000 rcDeflectionAbs
    {standard input}:284    .bss.throttlePIDAttenuation:00000000 $d
    {standard input}:287    .bss.throttlePIDAttenuation:00000000 throttlePIDAttenuation
    {standard input}:292    .bss.reverseMotors:00000000 reverseMotors
    {standard input}:293    .bss.reverseMotors:00000000 $d
    {standard input}:295    .bss.applyRates:00000000 $d
    {standard input}:298    .bss.applyRates:00000000 applyRates
                            *COM*:00000002 currentRxRefreshRate
                            *COM*:00000001 interpolationChannels
    {standard input}:303    .bss.rcSmoothingData:00000000 $d
    {standard input}:306    .bss.rcSmoothingData:00000000 rcSmoothingData
    {standard input}:309    .text.getSetpointRate:00000000 $t
    {standard input}:314    .text.getSetpointRate:00000000 getSetpointRate
    {standard input}:356    .text.getSetpointRate:00000020 $d
    {standard input}:361    .text.getRcDeflection:00000000 $t
    {standard input}:366    .text.getRcDeflection:00000000 getRcDeflection
    {standard input}:407    .text.getRcDeflection:00000020 $d
    {standard input}:412    .text.getRcDeflectionAbs:00000000 $t
    {standard input}:417    .text.getRcDeflectionAbs:00000000 getRcDeflectionAbs
    {standard input}:458    .text.getRcDeflectionAbs:00000020 $d
    {standard input}:463    .text.getThrottlePIDAttenuation:00000000 $t
    {standard input}:468    .text.getThrottlePIDAttenuation:00000000 getThrottlePIDAttenuation
    {standard input}:499    .text.getThrottlePIDAttenuation:00000014 $d
    {standard input}:504    .bss.lookupThrottleRC:00000000 $d
    {standard input}:507    .bss.lookupThrottleRC:00000000 lookupThrottleRC
    {standard input}:510    .text.rcLookupThrottle:00000000 $t
    {standard input}:514    .text.rcLookupThrottle:00000000 rcLookupThrottle
    {standard input}:590    .text.rcLookupThrottle:0000006c $d
    {standard input}:596    .text.applyBetaflightRates:00000000 $t
    {standard input}:601    .text.applyBetaflightRates:00000000 applyBetaflightRates
    {standard input}:749    .text.applyBetaflightRates:00000158 $d
    {standard input}:758    .text.applyRaceFlightRates:00000000 $t
    {standard input}:763    .text.applyRaceFlightRates:00000000 applyRaceFlightRates
    {standard input}:854    .text.applyRaceFlightRates:000000c0 $d
    {standard input}:860    .text.calculateSetpointRate:00000000 $t
    {standard input}:864    .text.calculateSetpointRate:00000000 calculateSetpointRate
    {standard input}:1002   .text.calculateSetpointRate:000000e8 $d
    {standard input}:1017   .text.scaleRcCommandToFpvCamAngle:00000000 $t
    {standard input}:1021   .text.scaleRcCommandToFpvCamAngle:00000000 scaleRcCommandToFpvCamAngle
    {standard input}:1133   .text.scaleRcCommandToFpvCamAngle:000000f4 $d
    {standard input}:4166   .bss.lastFpvCamAngleDegrees.13857:00000000 lastFpvCamAngleDegrees.13857
    {standard input}:4172   .data.cosFactor.13858:00000000 cosFactor.13858
    {standard input}:4178   .bss.sinFactor.13859:00000000 sinFactor.13859
    {standard input}:1144   .text.checkForThrottleErrorResetState:00000000 $t
    {standard input}:1148   .text.checkForThrottleErrorResetState:00000000 checkForThrottleErrorResetState
    {standard input}:1294   .text.checkForThrottleErrorResetState:00000108 $d
    {standard input}:4184   .bss.index.13865:00000000 index.13865
    {standard input}:4190   .bss.rcCommandThrottlePrevious.13866:00000000 rcCommandThrottlePrevious.13866
    {standard input}:1304   .text.processRcInterpolation:00000000 $t
    {standard input}:1309   .text.processRcInterpolation:00000000 processRcInterpolation
    {standard input}:1581   .text.processRcInterpolation:000001c4 $d
    {standard input}:4196   .bss.rcInterpolationStepCount.13878:00000000 rcInterpolationStepCount.13878
    {standard input}:4202   .bss.rcCommandInterp.13876:00000000 rcCommandInterp.13876
    {standard input}:4208   .bss.rcStepSize.13877:00000000 rcStepSize.13877
    {standard input}:1596   .text.calcRcSmoothingCutoff:00000000 $t
    {standard input}:1601   .text.calcRcSmoothingCutoff:00000000 calcRcSmoothingCutoff
    {standard input}:1677   .text.calcRcSmoothingCutoff:0000007c $d
    {standard input}:1684   .text.rcSmoothingRxRateValid:00000000 $t
    {standard input}:1689   .text.rcSmoothingRxRateValid:00000000 rcSmoothingRxRateValid
    {standard input}:1744   .text.rcSmoothingSetFilterCutoffs:00000000 $t
    {standard input}:1749   .text.rcSmoothingSetFilterCutoffs:00000000 rcSmoothingSetFilterCutoffs
    {standard input}:2048   .text.rcSmoothingSetFilterCutoffs:00000248 $d
    {standard input}:2055   .text.rcSmoothingResetAccumulation:00000000 $t
    {standard input}:2060   .text.rcSmoothingResetAccumulation:00000000 rcSmoothingResetAccumulation
    {standard input}:2122   .text.rcSmoothingAccumulateSample:00000000 $t
    {standard input}:2127   .text.rcSmoothingAccumulateSample:00000000 rcSmoothingAccumulateSample
    {standard input}:2270   .text.rcSmoothingAutoCalculate:00000000 $t
    {standard input}:2275   .text.rcSmoothingAutoCalculate:00000000 rcSmoothingAutoCalculate
    {standard input}:2337   .text.processRcSmoothingFilter:00000000 $t
    {standard input}:2342   .text.processRcSmoothingFilter:00000000 processRcSmoothingFilter
    {standard input}:2731   .text.processRcSmoothingFilter:00000294 $d
    {standard input}:4213   .bss.initialized.13937:00000000 initialized.13937
    {standard input}:4218   .bss.calculateCutoffs.13939:00000000 calculateCutoffs.13939
    {standard input}:4224   .bss.lastRxData.13936:00000000 lastRxData.13936
    {standard input}:4230   .bss.validRxFrameTimeMs.13938:00000000 validRxFrameTimeMs.13938
    {standard input}:2746   .text.processRcSmoothingFilter:000002c8 $t
    {standard input}:2856   .text.processRcSmoothingFilter:00000380 $d
    {standard input}:2864   .text.processRcCommand:00000000 $t
    {standard input}:2869   .text.processRcCommand:00000000 processRcCommand
    {standard input}:3037   .text.processRcCommand:000000e8 $d
    {standard input}:3047   .text.updateRcCommands:00000000 $t
    {standard input}:3052   .text.updateRcCommands:00000000 updateRcCommands
    {standard input}:3316   .text.updateRcCommands:000001d8 $d
    {standard input}:3323   .text.updateRcCommands:000001ec $t
    {standard input}:3640   .text.updateRcCommands:00000490 $d
    {standard input}:4236   .bss.rcCommandBuff.13993:00000000 rcCommandBuff.13993
    {standard input}:3651   .text.resetYawAxis:00000000 $t
    {standard input}:3656   .text.resetYawAxis:00000000 resetYawAxis
    {standard input}:3691   .text.resetYawAxis:0000001c $d
    {standard input}:3697   .text.isMotorsReversed:00000000 $t
    {standard input}:3702   .text.isMotorsReversed:00000000 isMotorsReversed
    {standard input}:3733   .text.isMotorsReversed:00000014 $d
    {standard input}:3738   .text.initRcProcessing:00000000 $t
    {standard input}:3743   .text.initRcProcessing:00000000 initRcProcessing
    {standard input}:3913   .text.initRcProcessing:00000124 $d
    {standard input}:3918   .text.initRcProcessing:00000138 $t
    {standard input}:3976   .text.initRcProcessing:00000188 $d
    {standard input}:3988   .text.rcSmoothingIsEnabled:00000000 $t
    {standard input}:3993   .text.rcSmoothingIsEnabled:00000000 rcSmoothingIsEnabled
    {standard input}:4039   .text.rcSmoothingGetValue:00000000 $t
    {standard input}:4044   .text.rcSmoothingGetValue:00000000 rcSmoothingGetValue
    {standard input}:4107   .text.rcSmoothingGetValue:00000040 $d
    {standard input}:4112   .text.rcSmoothingInitializationComplete:00000000 $t
    {standard input}:4117   .text.rcSmoothingInitializationComplete:00000000 rcSmoothingInitializationComplete
    {standard input}:4159   .text.rcSmoothingInitializationComplete:0000002c $d
    {standard input}:4167   .bss.lastFpvCamAngleDegrees.13857:00000000 $d
    {standard input}:4169   .data.cosFactor.13858:00000000 $d
    {standard input}:4175   .bss.sinFactor.13859:00000000 $d
    {standard input}:4181   .bss.index.13865:00000000 $d
    {standard input}:4187   .bss.rcCommandThrottlePrevious.13866:00000000 $d
    {standard input}:4193   .bss.rcInterpolationStepCount.13878:00000000 $d
    {standard input}:4199   .bss.rcCommandInterp.13876:00000000 $d
    {standard input}:4205   .bss.rcStepSize.13877:00000000 $d
    {standard input}:4214   .bss.initialized.13937:00000000 $d
    {standard input}:4219   .bss.calculateCutoffs.13939:00000000 $d
    {standard input}:4221   .bss.lastRxData.13936:00000000 $d
    {standard input}:4227   .bss.validRxFrameTimeMs.13938:00000000 $d
    {standard input}:4233   .bss.rcCommandBuff.13993:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
rcControlsConfig_System
flight3DConfig_System
rxConfig_System
currentControlRateProfile
gpsRescueGetYawRate
flightModeFlags
rcCommand
debugMode
debug
cos_approx
sin_approx
feature
pidSetItermAccelerator
currentPidProfile
rxGetRefreshRate
lrintf
isRXDataNew
targetPidLooptime
pt1FilterGain
pt1FilterInit
pt1FilterUpdateCutoff
biquadFilterInitLPF
biquadFilterUpdateLPF
pidInitSetpointDerivativeLpf
pidUpdateSetpointDerivativeLpf
millis
rxIsReceivingSignal
pt1FilterApply
biquadFilterApplyDF1
pidAntiGravityEnabled
IS_RC_MODE_ACTIVE
rcData
getLowVoltageCutoff
failsafeIsActive
qConstruct
qMultiply
imuQuaternionHeadfreeTransformVectorEarthToBody
