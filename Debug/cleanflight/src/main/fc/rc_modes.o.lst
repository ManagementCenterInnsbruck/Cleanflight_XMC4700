   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "rc_modes.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.modeActivationConditions,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	modeActivationConditions:
  25              	.LFB524:
  26              	 .file 1 "../cleanflight/src/main/fc/rc_modes.h"
   1:../cleanflight/src/main/fc/rc_modes.h **** /*
   2:../cleanflight/src/main/fc/rc_modes.h ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/fc/rc_modes.h ****  *
   4:../cleanflight/src/main/fc/rc_modes.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/fc/rc_modes.h ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/fc/rc_modes.h ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/fc/rc_modes.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/fc/rc_modes.h ****  * any later version.
   9:../cleanflight/src/main/fc/rc_modes.h ****  *
  10:../cleanflight/src/main/fc/rc_modes.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/fc/rc_modes.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/fc/rc_modes.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/fc/rc_modes.h ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/fc/rc_modes.h ****  *
  15:../cleanflight/src/main/fc/rc_modes.h ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/fc/rc_modes.h ****  * along with this software.
  17:../cleanflight/src/main/fc/rc_modes.h ****  *
  18:../cleanflight/src/main/fc/rc_modes.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/fc/rc_modes.h ****  */
  20:../cleanflight/src/main/fc/rc_modes.h **** 
  21:../cleanflight/src/main/fc/rc_modes.h **** #pragma once
  22:../cleanflight/src/main/fc/rc_modes.h **** 
  23:../cleanflight/src/main/fc/rc_modes.h **** #include <stdbool.h>
  24:../cleanflight/src/main/fc/rc_modes.h **** 
  25:../cleanflight/src/main/fc/rc_modes.h **** #include "pg/pg.h"
  26:../cleanflight/src/main/fc/rc_modes.h **** 
  27:../cleanflight/src/main/fc/rc_modes.h **** #define BOXID_NONE 255
  28:../cleanflight/src/main/fc/rc_modes.h **** 
  29:../cleanflight/src/main/fc/rc_modes.h **** typedef enum {
  30:../cleanflight/src/main/fc/rc_modes.h ****     // ARM flag
  31:../cleanflight/src/main/fc/rc_modes.h ****     BOXARM = 0,
  32:../cleanflight/src/main/fc/rc_modes.h ****     // FLIGHT_MODE
  33:../cleanflight/src/main/fc/rc_modes.h ****     BOXANGLE,
  34:../cleanflight/src/main/fc/rc_modes.h ****     BOXHORIZON,
  35:../cleanflight/src/main/fc/rc_modes.h ****     BOXMAG,
  36:../cleanflight/src/main/fc/rc_modes.h ****     BOXBARO,
  37:../cleanflight/src/main/fc/rc_modes.h ****     BOXGPSHOME,
  38:../cleanflight/src/main/fc/rc_modes.h ****     BOXGPSHOLD,
  39:../cleanflight/src/main/fc/rc_modes.h ****     BOXHEADFREE,
  40:../cleanflight/src/main/fc/rc_modes.h ****     BOXPASSTHRU,
  41:../cleanflight/src/main/fc/rc_modes.h ****     BOXFAILSAFE,
  42:../cleanflight/src/main/fc/rc_modes.h ****     BOXGPSRESCUE,
  43:../cleanflight/src/main/fc/rc_modes.h ****     BOXID_FLIGHTMODE_LAST = BOXGPSRESCUE,
  44:../cleanflight/src/main/fc/rc_modes.h **** 
  45:../cleanflight/src/main/fc/rc_modes.h **** // When new flight modes are added, the parameter group version for 'modeActivationConditions' in s
  46:../cleanflight/src/main/fc/rc_modes.h **** 
  47:../cleanflight/src/main/fc/rc_modes.h ****     // RCMODE flags
  48:../cleanflight/src/main/fc/rc_modes.h ****     BOXANTIGRAVITY,
  49:../cleanflight/src/main/fc/rc_modes.h ****     BOXHEADADJ,
  50:../cleanflight/src/main/fc/rc_modes.h ****     BOXCAMSTAB,
  51:../cleanflight/src/main/fc/rc_modes.h ****     BOXBEEPERON,
  52:../cleanflight/src/main/fc/rc_modes.h ****     BOXLEDLOW,
  53:../cleanflight/src/main/fc/rc_modes.h ****     BOXCALIB,
  54:../cleanflight/src/main/fc/rc_modes.h ****     BOXOSD,
  55:../cleanflight/src/main/fc/rc_modes.h ****     BOXTELEMETRY,
  56:../cleanflight/src/main/fc/rc_modes.h ****     BOXSERVO1,
  57:../cleanflight/src/main/fc/rc_modes.h ****     BOXSERVO2,
  58:../cleanflight/src/main/fc/rc_modes.h ****     BOXSERVO3,
  59:../cleanflight/src/main/fc/rc_modes.h ****     BOXBLACKBOX,
  60:../cleanflight/src/main/fc/rc_modes.h ****     BOXAIRMODE,
  61:../cleanflight/src/main/fc/rc_modes.h ****     BOX3D,
  62:../cleanflight/src/main/fc/rc_modes.h ****     BOXFPVANGLEMIX,
  63:../cleanflight/src/main/fc/rc_modes.h ****     BOXBLACKBOXERASE,
  64:../cleanflight/src/main/fc/rc_modes.h ****     BOXCAMERA1,
  65:../cleanflight/src/main/fc/rc_modes.h ****     BOXCAMERA2,
  66:../cleanflight/src/main/fc/rc_modes.h ****     BOXCAMERA3,
  67:../cleanflight/src/main/fc/rc_modes.h ****     BOXFLIPOVERAFTERCRASH,
  68:../cleanflight/src/main/fc/rc_modes.h ****     BOXPREARM,
  69:../cleanflight/src/main/fc/rc_modes.h ****     BOXBEEPGPSCOUNT,
  70:../cleanflight/src/main/fc/rc_modes.h ****     BOXVTXPITMODE,
  71:../cleanflight/src/main/fc/rc_modes.h ****     BOXPARALYZE,
  72:../cleanflight/src/main/fc/rc_modes.h ****     BOXUSER1,
  73:../cleanflight/src/main/fc/rc_modes.h ****     BOXUSER2,
  74:../cleanflight/src/main/fc/rc_modes.h ****     BOXUSER3,
  75:../cleanflight/src/main/fc/rc_modes.h ****     BOXUSER4,
  76:../cleanflight/src/main/fc/rc_modes.h ****     BOXPIDAUDIO,
  77:../cleanflight/src/main/fc/rc_modes.h ****     BOXACROTRAINER,
  78:../cleanflight/src/main/fc/rc_modes.h ****     CHECKBOX_ITEM_COUNT
  79:../cleanflight/src/main/fc/rc_modes.h **** } boxId_e;
  80:../cleanflight/src/main/fc/rc_modes.h **** 
  81:../cleanflight/src/main/fc/rc_modes.h **** typedef enum {
  82:../cleanflight/src/main/fc/rc_modes.h ****     MODELOGIC_OR = 0,
  83:../cleanflight/src/main/fc/rc_modes.h ****     MODELOGIC_AND
  84:../cleanflight/src/main/fc/rc_modes.h **** } modeLogic_e;
  85:../cleanflight/src/main/fc/rc_modes.h **** 
  86:../cleanflight/src/main/fc/rc_modes.h **** // type to hold enough bits for CHECKBOX_ITEM_COUNT. Struct used for value-like behavior
  87:../cleanflight/src/main/fc/rc_modes.h **** typedef struct boxBitmask_s { uint32_t bits[(CHECKBOX_ITEM_COUNT + 31) / 32]; } boxBitmask_t;
  88:../cleanflight/src/main/fc/rc_modes.h **** 
  89:../cleanflight/src/main/fc/rc_modes.h **** #define MAX_MODE_ACTIVATION_CONDITION_COUNT 20
  90:../cleanflight/src/main/fc/rc_modes.h **** 
  91:../cleanflight/src/main/fc/rc_modes.h **** #define CHANNEL_RANGE_MIN 900
  92:../cleanflight/src/main/fc/rc_modes.h **** #define CHANNEL_RANGE_MAX 2100
  93:../cleanflight/src/main/fc/rc_modes.h **** 
  94:../cleanflight/src/main/fc/rc_modes.h **** #define MODE_STEP_TO_CHANNEL_VALUE(step) (CHANNEL_RANGE_MIN + 25 * step)
  95:../cleanflight/src/main/fc/rc_modes.h **** #define CHANNEL_VALUE_TO_STEP(channelValue) ((constrain(channelValue, CHANNEL_RANGE_MIN, CHANNEL_RA
  96:../cleanflight/src/main/fc/rc_modes.h **** 
  97:../cleanflight/src/main/fc/rc_modes.h **** #define MIN_MODE_RANGE_STEP 0
  98:../cleanflight/src/main/fc/rc_modes.h **** #define MAX_MODE_RANGE_STEP ((CHANNEL_RANGE_MAX - CHANNEL_RANGE_MIN) / 25)
  99:../cleanflight/src/main/fc/rc_modes.h **** 
 100:../cleanflight/src/main/fc/rc_modes.h **** // steps are 25 apart
 101:../cleanflight/src/main/fc/rc_modes.h **** // a value of 0 corresponds to a channel value of 900 or less
 102:../cleanflight/src/main/fc/rc_modes.h **** // a value of 48 corresponds to a channel value of 2100 or more
 103:../cleanflight/src/main/fc/rc_modes.h **** // 48 steps between 900 and 2100
 104:../cleanflight/src/main/fc/rc_modes.h **** typedef struct channelRange_s {
 105:../cleanflight/src/main/fc/rc_modes.h ****     uint8_t startStep;
 106:../cleanflight/src/main/fc/rc_modes.h ****     uint8_t endStep;
 107:../cleanflight/src/main/fc/rc_modes.h **** } channelRange_t;
 108:../cleanflight/src/main/fc/rc_modes.h **** 
 109:../cleanflight/src/main/fc/rc_modes.h **** typedef struct modeActivationCondition_s {
 110:../cleanflight/src/main/fc/rc_modes.h ****     boxId_e modeId;
 111:../cleanflight/src/main/fc/rc_modes.h ****     uint8_t auxChannelIndex;
 112:../cleanflight/src/main/fc/rc_modes.h ****     channelRange_t range;
 113:../cleanflight/src/main/fc/rc_modes.h ****     modeLogic_e modeLogic;
 114:../cleanflight/src/main/fc/rc_modes.h ****     boxId_e linkedTo;
 115:../cleanflight/src/main/fc/rc_modes.h **** } modeActivationCondition_t;
 116:../cleanflight/src/main/fc/rc_modes.h **** 
 117:../cleanflight/src/main/fc/rc_modes.h **** PG_DECLARE_ARRAY(modeActivationCondition_t, MAX_MODE_ACTIVATION_CONDITION_COUNT, modeActivationCond
  27              	 .loc 1 117 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43              	 .loc 1 117 0
  44 0008 7A68     	 ldr r2,[r7,#4]
  45 000a 1346     	 mov r3,r2
  46 000c 5B00     	 lsls r3,r3,#1
  47 000e 1344     	 add r3,r3,r2
  48 0010 5B00     	 lsls r3,r3,#1
  49 0012 044A     	 ldr r2,.L3
  50 0014 1344     	 add r3,r3,r2
  51 0016 1846     	 mov r0,r3
  52 0018 0C37     	 adds r7,r7,#12
  53              	.LCFI3:
  54              	 .cfi_def_cfa_offset 4
  55 001a BD46     	 mov sp,r7
  56              	.LCFI4:
  57              	 .cfi_def_cfa_register 13
  58              	 
  59 001c 5DF8047B 	 ldr r7,[sp],#4
  60              	.LCFI5:
  61              	 .cfi_restore 7
  62              	 .cfi_def_cfa_offset 0
  63 0020 7047     	 bx lr
  64              	.L4:
  65 0022 00BF     	 .align 2
  66              	.L3:
  67 0024 00000000 	 .word modeActivationConditions_SystemArray
  68              	 .cfi_endproc
  69              	.LFE524:
  71              	 .section .text.modeActivationConditionsMutable,"ax",%progbits
  72              	 .align 2
  73              	 .thumb
  74              	 .thumb_func
  76              	modeActivationConditionsMutable:
  77              	.LFB525:
  78              	 .loc 1 117 0
  79              	 .cfi_startproc
  80              	 
  81              	 
  82              	 
  83 0000 80B4     	 push {r7}
  84              	.LCFI6:
  85              	 .cfi_def_cfa_offset 4
  86              	 .cfi_offset 7,-4
  87 0002 83B0     	 sub sp,sp,#12
  88              	.LCFI7:
  89              	 .cfi_def_cfa_offset 16
  90 0004 00AF     	 add r7,sp,#0
  91              	.LCFI8:
  92              	 .cfi_def_cfa_register 7
  93 0006 7860     	 str r0,[r7,#4]
  94              	 .loc 1 117 0
  95 0008 7A68     	 ldr r2,[r7,#4]
  96 000a 1346     	 mov r3,r2
  97 000c 5B00     	 lsls r3,r3,#1
  98 000e 1344     	 add r3,r3,r2
  99 0010 5B00     	 lsls r3,r3,#1
 100 0012 044A     	 ldr r2,.L7
 101 0014 1344     	 add r3,r3,r2
 102 0016 1846     	 mov r0,r3
 103 0018 0C37     	 adds r7,r7,#12
 104              	.LCFI9:
 105              	 .cfi_def_cfa_offset 4
 106 001a BD46     	 mov sp,r7
 107              	.LCFI10:
 108              	 .cfi_def_cfa_register 13
 109              	 
 110 001c 5DF8047B 	 ldr r7,[sp],#4
 111              	.LCFI11:
 112              	 .cfi_restore 7
 113              	 .cfi_def_cfa_offset 0
 114 0020 7047     	 bx lr
 115              	.L8:
 116 0022 00BF     	 .align 2
 117              	.L7:
 118 0024 00000000 	 .word modeActivationConditions_SystemArray
 119              	 .cfi_endproc
 120              	.LFE525:
 122              	 .section .text.constrain,"ax",%progbits
 123              	 .align 2
 124              	 .thumb
 125              	 .thumb_func
 127              	constrain:
 128              	.LFB527:
 129              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
 130              	 .loc 2 151 0
 131              	 .cfi_startproc
 132              	 
 133              	 
 134              	 
 135 0000 80B4     	 push {r7}
 136              	.LCFI12:
 137              	 .cfi_def_cfa_offset 4
 138              	 .cfi_offset 7,-4
 139 0002 85B0     	 sub sp,sp,#20
 140              	.LCFI13:
 141              	 .cfi_def_cfa_offset 24
 142 0004 00AF     	 add r7,sp,#0
 143              	.LCFI14:
 144              	 .cfi_def_cfa_register 7
 145 0006 F860     	 str r0,[r7,#12]
 146 0008 B960     	 str r1,[r7,#8]
 147 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
 148              	 .loc 2 152 0
 149 000c FA68     	 ldr r2,[r7,#12]
 150 000e BB68     	 ldr r3,[r7,#8]
 151 0010 9A42     	 cmp r2,r3
 152 0012 01DA     	 bge .L10
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
 153              	 .loc 2 153 0
 154 0014 BB68     	 ldr r3,[r7,#8]
 155 0016 06E0     	 b .L11
 156              	.L10:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
 157              	 .loc 2 154 0
 158 0018 FA68     	 ldr r2,[r7,#12]
 159 001a 7B68     	 ldr r3,[r7,#4]
 160 001c 9A42     	 cmp r2,r3
 161 001e 01DD     	 ble .L12
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 162              	 .loc 2 155 0
 163 0020 7B68     	 ldr r3,[r7,#4]
 164 0022 00E0     	 b .L11
 165              	.L12:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 166              	 .loc 2 157 0
 167 0024 FB68     	 ldr r3,[r7,#12]
 168              	.L11:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 169              	 .loc 2 158 0
 170 0026 1846     	 mov r0,r3
 171 0028 1437     	 adds r7,r7,#20
 172              	.LCFI15:
 173              	 .cfi_def_cfa_offset 4
 174 002a BD46     	 mov sp,r7
 175              	.LCFI16:
 176              	 .cfi_def_cfa_register 13
 177              	 
 178 002c 5DF8047B 	 ldr r7,[sp],#4
 179              	.LCFI17:
 180              	 .cfi_restore 7
 181              	 .cfi_def_cfa_offset 0
 182 0030 7047     	 bx lr
 183              	 .cfi_endproc
 184              	.LFE527:
 186              	 .comm rcModeActivationMask,8,4
 187 0032 00BF     	 .section .bss.stickyModesEverDisabled,"aw",%nobits
 188              	 .align 2
 191              	stickyModesEverDisabled:
 192 0000 00000000 	 .space 8
 192      00000000 
 193              	 .comm modeActivationConditions_SystemArray,120,4
 194              	 .comm modeActivationConditions_CopyArray,120,4
 195              	 .global modeActivationConditions_Registry
 196              	 .section .pg_registry,"a",%progbits
 197              	 .align 2
 200              	modeActivationConditions_Registry:
 201 0000 2910     	 .short 4137
 202 0002 7800     	 .short 120
 203 0004 00000000 	 .word modeActivationConditions_SystemArray
 204 0008 00000000 	 .word modeActivationConditions_CopyArray
 205 000c 00000000 	 .word 0
 206 0010 00000000 	 .word 0
 207              	 .section .text.IS_RC_MODE_ACTIVE,"ax",%progbits
 208              	 .align 2
 209              	 .global IS_RC_MODE_ACTIVE
 210              	 .thumb
 211              	 .thumb_func
 213              	IS_RC_MODE_ACTIVE:
 214              	.LFB552:
 215              	 .file 3 "../cleanflight/src/main/fc/rc_modes.c"
   1:../cleanflight/src/main/fc/rc_modes.c **** /*
   2:../cleanflight/src/main/fc/rc_modes.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/fc/rc_modes.c ****  *
   4:../cleanflight/src/main/fc/rc_modes.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/fc/rc_modes.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/fc/rc_modes.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/fc/rc_modes.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/fc/rc_modes.c ****  * any later version.
   9:../cleanflight/src/main/fc/rc_modes.c ****  *
  10:../cleanflight/src/main/fc/rc_modes.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/fc/rc_modes.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/fc/rc_modes.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/fc/rc_modes.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/fc/rc_modes.c ****  *
  15:../cleanflight/src/main/fc/rc_modes.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/fc/rc_modes.c ****  * along with this software.
  17:../cleanflight/src/main/fc/rc_modes.c ****  *
  18:../cleanflight/src/main/fc/rc_modes.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/fc/rc_modes.c ****  */
  20:../cleanflight/src/main/fc/rc_modes.c **** 
  21:../cleanflight/src/main/fc/rc_modes.c **** #include <stdbool.h>
  22:../cleanflight/src/main/fc/rc_modes.c **** #include <stdint.h>
  23:../cleanflight/src/main/fc/rc_modes.c **** #include <string.h>
  24:../cleanflight/src/main/fc/rc_modes.c **** 
  25:../cleanflight/src/main/fc/rc_modes.c **** #include "platform.h"
  26:../cleanflight/src/main/fc/rc_modes.c **** 
  27:../cleanflight/src/main/fc/rc_modes.c **** #include "rc_modes.h"
  28:../cleanflight/src/main/fc/rc_modes.c **** 
  29:../cleanflight/src/main/fc/rc_modes.c **** #include "common/bitarray.h"
  30:../cleanflight/src/main/fc/rc_modes.c **** #include "common/maths.h"
  31:../cleanflight/src/main/fc/rc_modes.c **** #include "drivers/time.h"
  32:../cleanflight/src/main/fc/rc_modes.c **** 
  33:../cleanflight/src/main/fc/rc_modes.c **** #include "config/feature.h"
  34:../cleanflight/src/main/fc/rc_modes.c **** #include "pg/pg.h"
  35:../cleanflight/src/main/fc/rc_modes.c **** #include "pg/pg_ids.h"
  36:../cleanflight/src/main/fc/rc_modes.c **** #include "pg/rx.h"
  37:../cleanflight/src/main/fc/rc_modes.c **** 
  38:../cleanflight/src/main/fc/rc_modes.c **** #include "fc/config.h"
  39:../cleanflight/src/main/fc/rc_modes.c **** #include "fc/rc_controls.h"
  40:../cleanflight/src/main/fc/rc_modes.c **** 
  41:../cleanflight/src/main/fc/rc_modes.c **** #include "rx/rx.h"
  42:../cleanflight/src/main/fc/rc_modes.c **** 
  43:../cleanflight/src/main/fc/rc_modes.c **** #define STICKY_MODE_BOOT_DELAY_US 5e6
  44:../cleanflight/src/main/fc/rc_modes.c **** 
  45:../cleanflight/src/main/fc/rc_modes.c **** boxBitmask_t rcModeActivationMask; // one bit per mode defined in boxId_e
  46:../cleanflight/src/main/fc/rc_modes.c **** static boxBitmask_t stickyModesEverDisabled;
  47:../cleanflight/src/main/fc/rc_modes.c **** 
  48:../cleanflight/src/main/fc/rc_modes.c **** PG_REGISTER_ARRAY(modeActivationCondition_t, MAX_MODE_ACTIVATION_CONDITION_COUNT, modeActivationCon
  49:../cleanflight/src/main/fc/rc_modes.c ****                   PG_MODE_ACTIVATION_PROFILE, 1);
  50:../cleanflight/src/main/fc/rc_modes.c **** 
  51:../cleanflight/src/main/fc/rc_modes.c **** bool IS_RC_MODE_ACTIVE(boxId_e boxId)
  52:../cleanflight/src/main/fc/rc_modes.c **** {
 216              	 .loc 3 52 0
 217              	 .cfi_startproc
 218              	 
 219              	 
 220 0000 80B5     	 push {r7,lr}
 221              	.LCFI18:
 222              	 .cfi_def_cfa_offset 8
 223              	 .cfi_offset 7,-8
 224              	 .cfi_offset 14,-4
 225 0002 82B0     	 sub sp,sp,#8
 226              	.LCFI19:
 227              	 .cfi_def_cfa_offset 16
 228 0004 00AF     	 add r7,sp,#0
 229              	.LCFI20:
 230              	 .cfi_def_cfa_register 7
 231 0006 0346     	 mov r3,r0
 232 0008 FB71     	 strb r3,[r7,#7]
  53:../cleanflight/src/main/fc/rc_modes.c ****     return bitArrayGet(&rcModeActivationMask, boxId);
 233              	 .loc 3 53 0
 234 000a FB79     	 ldrb r3,[r7,#7]
 235 000c 0448     	 ldr r0,.L15
 236 000e 1946     	 mov r1,r3
 237 0010 FFF7FEFF 	 bl bitArrayGet
 238 0014 0346     	 mov r3,r0
  54:../cleanflight/src/main/fc/rc_modes.c **** }
 239              	 .loc 3 54 0
 240 0016 1846     	 mov r0,r3
 241 0018 0837     	 adds r7,r7,#8
 242              	.LCFI21:
 243              	 .cfi_def_cfa_offset 8
 244 001a BD46     	 mov sp,r7
 245              	.LCFI22:
 246              	 .cfi_def_cfa_register 13
 247              	 
 248 001c 80BD     	 pop {r7,pc}
 249              	.L16:
 250 001e 00BF     	 .align 2
 251              	.L15:
 252 0020 00000000 	 .word rcModeActivationMask
 253              	 .cfi_endproc
 254              	.LFE552:
 256              	 .section .text.rcModeUpdate,"ax",%progbits
 257              	 .align 2
 258              	 .global rcModeUpdate
 259              	 .thumb
 260              	 .thumb_func
 262              	rcModeUpdate:
 263              	.LFB553:
  55:../cleanflight/src/main/fc/rc_modes.c **** 
  56:../cleanflight/src/main/fc/rc_modes.c **** void rcModeUpdate(boxBitmask_t *newState)
  57:../cleanflight/src/main/fc/rc_modes.c **** {
 264              	 .loc 3 57 0
 265              	 .cfi_startproc
 266              	 
 267              	 
 268              	 
 269 0000 80B4     	 push {r7}
 270              	.LCFI23:
 271              	 .cfi_def_cfa_offset 4
 272              	 .cfi_offset 7,-4
 273 0002 83B0     	 sub sp,sp,#12
 274              	.LCFI24:
 275              	 .cfi_def_cfa_offset 16
 276 0004 00AF     	 add r7,sp,#0
 277              	.LCFI25:
 278              	 .cfi_def_cfa_register 7
 279 0006 7860     	 str r0,[r7,#4]
  58:../cleanflight/src/main/fc/rc_modes.c ****     rcModeActivationMask = *newState;
 280              	 .loc 3 58 0
 281 0008 054B     	 ldr r3,.L18
 282 000a 7A68     	 ldr r2,[r7,#4]
 283 000c 1168     	 ldr r1,[r2]
 284 000e 5268     	 ldr r2,[r2,#4]
 285 0010 1960     	 str r1,[r3]
 286 0012 5A60     	 str r2,[r3,#4]
  59:../cleanflight/src/main/fc/rc_modes.c **** }
 287              	 .loc 3 59 0
 288 0014 0C37     	 adds r7,r7,#12
 289              	.LCFI26:
 290              	 .cfi_def_cfa_offset 4
 291 0016 BD46     	 mov sp,r7
 292              	.LCFI27:
 293              	 .cfi_def_cfa_register 13
 294              	 
 295 0018 5DF8047B 	 ldr r7,[sp],#4
 296              	.LCFI28:
 297              	 .cfi_restore 7
 298              	 .cfi_def_cfa_offset 0
 299 001c 7047     	 bx lr
 300              	.L19:
 301 001e 00BF     	 .align 2
 302              	.L18:
 303 0020 00000000 	 .word rcModeActivationMask
 304              	 .cfi_endproc
 305              	.LFE553:
 307              	 .section .text.isAirmodeActive,"ax",%progbits
 308              	 .align 2
 309              	 .global isAirmodeActive
 310              	 .thumb
 311              	 .thumb_func
 313              	isAirmodeActive:
 314              	.LFB554:
  60:../cleanflight/src/main/fc/rc_modes.c **** 
  61:../cleanflight/src/main/fc/rc_modes.c **** bool isAirmodeActive(void) {
 315              	 .loc 3 61 0
 316              	 .cfi_startproc
 317              	 
 318              	 
 319 0000 80B5     	 push {r7,lr}
 320              	.LCFI29:
 321              	 .cfi_def_cfa_offset 8
 322              	 .cfi_offset 7,-8
 323              	 .cfi_offset 14,-4
 324 0002 00AF     	 add r7,sp,#0
 325              	.LCFI30:
 326              	 .cfi_def_cfa_register 7
  62:../cleanflight/src/main/fc/rc_modes.c ****     return (IS_RC_MODE_ACTIVE(BOXAIRMODE) || feature(FEATURE_AIRMODE));
 327              	 .loc 3 62 0
 328 0004 1720     	 movs r0,#23
 329 0006 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 330 000a 0346     	 mov r3,r0
 331 000c 002B     	 cmp r3,#0
 332 000e 06D1     	 bne .L21
 333              	 .loc 3 62 0 is_stmt 0 discriminator 2
 334 0010 4FF48000 	 mov r0,#4194304
 335 0014 FFF7FEFF 	 bl feature
 336 0018 0346     	 mov r3,r0
 337 001a 002B     	 cmp r3,#0
 338 001c 01D0     	 beq .L22
 339              	.L21:
 340              	 .loc 3 62 0 discriminator 3
 341 001e 0123     	 movs r3,#1
 342 0020 00E0     	 b .L23
 343              	.L22:
 344              	 .loc 3 62 0 discriminator 4
 345 0022 0023     	 movs r3,#0
 346              	.L23:
 347              	 .loc 3 62 0 discriminator 6
 348 0024 03F00103 	 and r3,r3,#1
 349 0028 DBB2     	 uxtb r3,r3
  63:../cleanflight/src/main/fc/rc_modes.c **** }
 350              	 .loc 3 63 0 is_stmt 1 discriminator 6
 351 002a 1846     	 mov r0,r3
 352 002c 80BD     	 pop {r7,pc}
 353              	 .cfi_endproc
 354              	.LFE554:
 356 002e 00BF     	 .section .text.isRangeActive,"ax",%progbits
 357              	 .align 2
 358              	 .global isRangeActive
 359              	 .thumb
 360              	 .thumb_func
 362              	isRangeActive:
 363              	.LFB555:
  64:../cleanflight/src/main/fc/rc_modes.c **** 
  65:../cleanflight/src/main/fc/rc_modes.c **** bool isRangeActive(uint8_t auxChannelIndex, const channelRange_t *range) {
 364              	 .loc 3 65 0
 365              	 .cfi_startproc
 366              	 
 367              	 
 368 0000 80B5     	 push {r7,lr}
 369              	.LCFI31:
 370              	 .cfi_def_cfa_offset 8
 371              	 .cfi_offset 7,-8
 372              	 .cfi_offset 14,-4
 373 0002 84B0     	 sub sp,sp,#16
 374              	.LCFI32:
 375              	 .cfi_def_cfa_offset 24
 376 0004 00AF     	 add r7,sp,#0
 377              	.LCFI33:
 378              	 .cfi_def_cfa_register 7
 379 0006 0346     	 mov r3,r0
 380 0008 3960     	 str r1,[r7]
 381 000a FB71     	 strb r3,[r7,#7]
  66:../cleanflight/src/main/fc/rc_modes.c ****     if (!IS_RANGE_USABLE(range)) {
 382              	 .loc 3 66 0
 383 000c 3B68     	 ldr r3,[r7]
 384 000e 1A78     	 ldrb r2,[r3]
 385 0010 3B68     	 ldr r3,[r7]
 386 0012 5B78     	 ldrb r3,[r3,#1]
 387 0014 9A42     	 cmp r2,r3
 388 0016 01D3     	 bcc .L26
  67:../cleanflight/src/main/fc/rc_modes.c ****         return false;
 389              	 .loc 3 67 0
 390 0018 0023     	 movs r3,#0
 391 001a 2EE0     	 b .L27
 392              	.L26:
  68:../cleanflight/src/main/fc/rc_modes.c ****     }
  69:../cleanflight/src/main/fc/rc_modes.c **** 
  70:../cleanflight/src/main/fc/rc_modes.c ****     const uint16_t channelValue = constrain(rcData[auxChannelIndex + NON_AUX_CHANNEL_COUNT], CHANNE
 393              	 .loc 3 70 0
 394 001c FB79     	 ldrb r3,[r7,#7]
 395 001e 0433     	 adds r3,r3,#4
 396 0020 184A     	 ldr r2,.L30
 397 0022 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 398 0026 1BB2     	 sxth r3,r3
 399 0028 1846     	 mov r0,r3
 400 002a 4FF46171 	 mov r1,#900
 401 002e 40F63302 	 movw r2,#2099
 402 0032 FFF7FEFF 	 bl constrain
 403 0036 0346     	 mov r3,r0
 404 0038 FB81     	 strh r3,[r7,#14]
  71:../cleanflight/src/main/fc/rc_modes.c ****     return (channelValue >= 900 + (range->startStep * 25) &&
 405              	 .loc 3 71 0
 406 003a FA89     	 ldrh r2,[r7,#14]
 407 003c 3B68     	 ldr r3,[r7]
 408 003e 1B78     	 ldrb r3,[r3]
 409 0040 1946     	 mov r1,r3
 410 0042 0B46     	 mov r3,r1
 411 0044 9B00     	 lsls r3,r3,#2
 412 0046 0B44     	 add r3,r3,r1
 413 0048 9900     	 lsls r1,r3,#2
 414 004a 0B44     	 add r3,r3,r1
 415 004c 03F56173 	 add r3,r3,#900
 416 0050 9A42     	 cmp r2,r3
 417 0052 0EDB     	 blt .L28
  72:../cleanflight/src/main/fc/rc_modes.c ****             channelValue < 900 + (range->endStep * 25));
 418              	 .loc 3 72 0 discriminator 1
 419 0054 FA89     	 ldrh r2,[r7,#14]
 420 0056 3B68     	 ldr r3,[r7]
 421 0058 5B78     	 ldrb r3,[r3,#1]
 422 005a 1946     	 mov r1,r3
 423 005c 0B46     	 mov r3,r1
 424 005e 9B00     	 lsls r3,r3,#2
 425 0060 0B44     	 add r3,r3,r1
 426 0062 9900     	 lsls r1,r3,#2
 427 0064 0B44     	 add r3,r3,r1
 428 0066 03F56173 	 add r3,r3,#900
  71:../cleanflight/src/main/fc/rc_modes.c ****     return (channelValue >= 900 + (range->startStep * 25) &&
 429              	 .loc 3 71 0 discriminator 1
 430 006a 9A42     	 cmp r2,r3
 431 006c 01DA     	 bge .L28
  71:../cleanflight/src/main/fc/rc_modes.c ****     return (channelValue >= 900 + (range->startStep * 25) &&
 432              	 .loc 3 71 0 is_stmt 0 discriminator 3
 433 006e 0123     	 movs r3,#1
 434 0070 00E0     	 b .L29
 435              	.L28:
  71:../cleanflight/src/main/fc/rc_modes.c ****     return (channelValue >= 900 + (range->startStep * 25) &&
 436              	 .loc 3 71 0 discriminator 4
 437 0072 0023     	 movs r3,#0
 438              	.L29:
  71:../cleanflight/src/main/fc/rc_modes.c ****     return (channelValue >= 900 + (range->startStep * 25) &&
 439              	 .loc 3 71 0 discriminator 6
 440 0074 03F00103 	 and r3,r3,#1
 441 0078 DBB2     	 uxtb r3,r3
 442              	.L27:
  73:../cleanflight/src/main/fc/rc_modes.c **** }
 443              	 .loc 3 73 0 is_stmt 1
 444 007a 1846     	 mov r0,r3
 445 007c 1037     	 adds r7,r7,#16
 446              	.LCFI34:
 447              	 .cfi_def_cfa_offset 8
 448 007e BD46     	 mov sp,r7
 449              	.LCFI35:
 450              	 .cfi_def_cfa_register 13
 451              	 
 452 0080 80BD     	 pop {r7,pc}
 453              	.L31:
 454 0082 00BF     	 .align 2
 455              	.L30:
 456 0084 00000000 	 .word rcData
 457              	 .cfi_endproc
 458              	.LFE555:
 460              	 .section .text.updateMasksForMac,"ax",%progbits
 461              	 .align 2
 462              	 .global updateMasksForMac
 463              	 .thumb
 464              	 .thumb_func
 466              	updateMasksForMac:
 467              	.LFB556:
  74:../cleanflight/src/main/fc/rc_modes.c **** 
  75:../cleanflight/src/main/fc/rc_modes.c **** void updateMasksForMac(const modeActivationCondition_t *mac, boxBitmask_t *andMask, boxBitmask_t *n
  76:../cleanflight/src/main/fc/rc_modes.c **** {
 468              	 .loc 3 76 0
 469              	 .cfi_startproc
 470              	 
 471              	 
 472 0000 80B5     	 push {r7,lr}
 473              	.LCFI36:
 474              	 .cfi_def_cfa_offset 8
 475              	 .cfi_offset 7,-8
 476              	 .cfi_offset 14,-4
 477 0002 86B0     	 sub sp,sp,#24
 478              	.LCFI37:
 479              	 .cfi_def_cfa_offset 32
 480 0004 00AF     	 add r7,sp,#0
 481              	.LCFI38:
 482              	 .cfi_def_cfa_register 7
 483 0006 F860     	 str r0,[r7,#12]
 484 0008 B960     	 str r1,[r7,#8]
 485 000a 7A60     	 str r2,[r7,#4]
  77:../cleanflight/src/main/fc/rc_modes.c ****     bool bAnd = (mac->modeLogic == MODELOGIC_AND) || bitArrayGet(andMask, mac->modeId);
 486              	 .loc 3 77 0
 487 000c FB68     	 ldr r3,[r7,#12]
 488 000e 1B79     	 ldrb r3,[r3,#4]
 489 0010 012B     	 cmp r3,#1
 490 0012 08D0     	 beq .L33
 491              	 .loc 3 77 0 is_stmt 0 discriminator 2
 492 0014 FB68     	 ldr r3,[r7,#12]
 493 0016 1B78     	 ldrb r3,[r3]
 494 0018 B868     	 ldr r0,[r7,#8]
 495 001a 1946     	 mov r1,r3
 496 001c FFF7FEFF 	 bl bitArrayGet
 497 0020 0346     	 mov r3,r0
 498 0022 002B     	 cmp r3,#0
 499 0024 01D0     	 beq .L34
 500              	.L33:
 501              	 .loc 3 77 0 discriminator 3
 502 0026 0123     	 movs r3,#1
 503 0028 00E0     	 b .L35
 504              	.L34:
 505              	 .loc 3 77 0 discriminator 4
 506 002a 0023     	 movs r3,#0
 507              	.L35:
 508              	 .loc 3 77 0 discriminator 6
 509 002c FB75     	 strb r3,[r7,#23]
 510 002e FB7D     	 ldrb r3,[r7,#23]
 511 0030 03F00103 	 and r3,r3,#1
 512 0034 FB75     	 strb r3,[r7,#23]
  78:../cleanflight/src/main/fc/rc_modes.c ****     bool bAct = isRangeActive(mac->auxChannelIndex, &mac->range);
 513              	 .loc 3 78 0 is_stmt 1 discriminator 6
 514 0036 FB68     	 ldr r3,[r7,#12]
 515 0038 5A78     	 ldrb r2,[r3,#1]
 516 003a FB68     	 ldr r3,[r7,#12]
 517 003c 0233     	 adds r3,r3,#2
 518 003e 1046     	 mov r0,r2
 519 0040 1946     	 mov r1,r3
 520 0042 FFF7FEFF 	 bl isRangeActive
 521 0046 0346     	 mov r3,r0
 522 0048 BB75     	 strb r3,[r7,#22]
  79:../cleanflight/src/main/fc/rc_modes.c ****     if (bAnd)
 523              	 .loc 3 79 0 discriminator 6
 524 004a FB7D     	 ldrb r3,[r7,#23]
 525 004c 002B     	 cmp r3,#0
 526 004e 05D0     	 beq .L36
  80:../cleanflight/src/main/fc/rc_modes.c ****         bitArraySet(andMask, mac->modeId);
 527              	 .loc 3 80 0
 528 0050 FB68     	 ldr r3,[r7,#12]
 529 0052 1B78     	 ldrb r3,[r3]
 530 0054 B868     	 ldr r0,[r7,#8]
 531 0056 1946     	 mov r1,r3
 532 0058 FFF7FEFF 	 bl bitArraySet
 533              	.L36:
  81:../cleanflight/src/main/fc/rc_modes.c ****     if (bAnd != bAct)
 534              	 .loc 3 81 0
 535 005c FA7D     	 ldrb r2,[r7,#23]
 536 005e BB7D     	 ldrb r3,[r7,#22]
 537 0060 9A42     	 cmp r2,r3
 538 0062 05D0     	 beq .L32
  82:../cleanflight/src/main/fc/rc_modes.c ****         bitArraySet(newMask, mac->modeId);
 539              	 .loc 3 82 0
 540 0064 FB68     	 ldr r3,[r7,#12]
 541 0066 1B78     	 ldrb r3,[r3]
 542 0068 7868     	 ldr r0,[r7,#4]
 543 006a 1946     	 mov r1,r3
 544 006c FFF7FEFF 	 bl bitArraySet
 545              	.L32:
  83:../cleanflight/src/main/fc/rc_modes.c **** }
 546              	 .loc 3 83 0
 547 0070 1837     	 adds r7,r7,#24
 548              	.LCFI39:
 549              	 .cfi_def_cfa_offset 8
 550 0072 BD46     	 mov sp,r7
 551              	.LCFI40:
 552              	 .cfi_def_cfa_register 13
 553              	 
 554 0074 80BD     	 pop {r7,pc}
 555              	 .cfi_endproc
 556              	.LFE556:
 558              	 .global __aeabi_ui2d
 559              	 .global __aeabi_dcmpge
 560 0076 00BF     	 .section .text.updateMasksForStickyModes,"ax",%progbits
 561              	 .align 2
 562              	 .global updateMasksForStickyModes
 563              	 .thumb
 564              	 .thumb_func
 566              	updateMasksForStickyModes:
 567              	.LFB557:
  84:../cleanflight/src/main/fc/rc_modes.c **** 
  85:../cleanflight/src/main/fc/rc_modes.c **** void updateMasksForStickyModes(const modeActivationCondition_t *mac, boxBitmask_t *andMask, boxBitm
  86:../cleanflight/src/main/fc/rc_modes.c **** {
 568              	 .loc 3 86 0
 569              	 .cfi_startproc
 570              	 
 571              	 
 572 0000 80B5     	 push {r7,lr}
 573              	.LCFI41:
 574              	 .cfi_def_cfa_offset 8
 575              	 .cfi_offset 7,-8
 576              	 .cfi_offset 14,-4
 577 0002 84B0     	 sub sp,sp,#16
 578              	.LCFI42:
 579              	 .cfi_def_cfa_offset 24
 580 0004 00AF     	 add r7,sp,#0
 581              	.LCFI43:
 582              	 .cfi_def_cfa_register 7
 583 0006 F860     	 str r0,[r7,#12]
 584 0008 B960     	 str r1,[r7,#8]
 585 000a 7A60     	 str r2,[r7,#4]
  87:../cleanflight/src/main/fc/rc_modes.c ****     if (IS_RC_MODE_ACTIVE(mac->modeId)) {
 586              	 .loc 3 87 0
 587 000c FB68     	 ldr r3,[r7,#12]
 588 000e 1B78     	 ldrb r3,[r3]
 589 0010 1846     	 mov r0,r3
 590 0012 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 591 0016 0346     	 mov r3,r0
 592 0018 002B     	 cmp r3,#0
 593 001a 0CD0     	 beq .L39
  88:../cleanflight/src/main/fc/rc_modes.c ****         bitArrayClr(andMask, mac->modeId);
 594              	 .loc 3 88 0
 595 001c FB68     	 ldr r3,[r7,#12]
 596 001e 1B78     	 ldrb r3,[r3]
 597 0020 B868     	 ldr r0,[r7,#8]
 598 0022 1946     	 mov r1,r3
 599 0024 FFF7FEFF 	 bl bitArrayClr
  89:../cleanflight/src/main/fc/rc_modes.c ****         bitArraySet(newMask, mac->modeId);
 600              	 .loc 3 89 0
 601 0028 FB68     	 ldr r3,[r7,#12]
 602 002a 1B78     	 ldrb r3,[r3]
 603 002c 7868     	 ldr r0,[r7,#4]
 604 002e 1946     	 mov r1,r3
 605 0030 FFF7FEFF 	 bl bitArraySet
 606 0034 34E0     	 b .L38
 607              	.L39:
  90:../cleanflight/src/main/fc/rc_modes.c ****     } else {
  91:../cleanflight/src/main/fc/rc_modes.c ****         if (bitArrayGet(&stickyModesEverDisabled, mac->modeId)) {
 608              	 .loc 3 91 0
 609 0036 FB68     	 ldr r3,[r7,#12]
 610 0038 1B78     	 ldrb r3,[r3]
 611 003a 1D48     	 ldr r0,.L44+8
 612 003c 1946     	 mov r1,r3
 613 003e FFF7FEFF 	 bl bitArrayGet
 614 0042 0346     	 mov r3,r0
 615 0044 002B     	 cmp r3,#0
 616 0046 05D0     	 beq .L41
  92:../cleanflight/src/main/fc/rc_modes.c ****             updateMasksForMac(mac, andMask, newMask);
 617              	 .loc 3 92 0
 618 0048 F868     	 ldr r0,[r7,#12]
 619 004a B968     	 ldr r1,[r7,#8]
 620 004c 7A68     	 ldr r2,[r7,#4]
 621 004e FFF7FEFF 	 bl updateMasksForMac
 622 0052 25E0     	 b .L38
 623              	.L41:
  93:../cleanflight/src/main/fc/rc_modes.c ****         } else {
  94:../cleanflight/src/main/fc/rc_modes.c ****             if (micros() >= STICKY_MODE_BOOT_DELAY_US && !isRangeActive(mac->auxChannelIndex, &mac-
 624              	 .loc 3 94 0
 625 0054 FFF7FEFF 	 bl micros
 626 0058 0346     	 mov r3,r0
 627 005a 1846     	 mov r0,r3
 628 005c FFF7FEFF 	 bl __aeabi_ui2d
 629 0060 0246     	 mov r2,r0
 630 0062 0B46     	 mov r3,r1
 631 0064 1046     	 mov r0,r2
 632 0066 1946     	 mov r1,r3
 633 0068 0FA3     	 adr r3,.L44
 634 006a D3E90023 	 ldrd r2,[r3]
 635 006e FFF7FEFF 	 bl __aeabi_dcmpge
 636 0072 0346     	 mov r3,r0
 637 0074 002B     	 cmp r3,#0
 638 0076 13D0     	 beq .L38
 639              	 .loc 3 94 0 is_stmt 0 discriminator 1
 640 0078 FB68     	 ldr r3,[r7,#12]
 641 007a 5A78     	 ldrb r2,[r3,#1]
 642 007c FB68     	 ldr r3,[r7,#12]
 643 007e 0233     	 adds r3,r3,#2
 644 0080 1046     	 mov r0,r2
 645 0082 1946     	 mov r1,r3
 646 0084 FFF7FEFF 	 bl isRangeActive
 647 0088 0346     	 mov r3,r0
 648 008a 83F00103 	 eor r3,r3,#1
 649 008e DBB2     	 uxtb r3,r3
 650 0090 002B     	 cmp r3,#0
 651 0092 05D0     	 beq .L38
  95:../cleanflight/src/main/fc/rc_modes.c ****                 bitArraySet(&stickyModesEverDisabled, mac->modeId);
 652              	 .loc 3 95 0 is_stmt 1
 653 0094 FB68     	 ldr r3,[r7,#12]
 654 0096 1B78     	 ldrb r3,[r3]
 655 0098 0548     	 ldr r0,.L44+8
 656 009a 1946     	 mov r1,r3
 657 009c FFF7FEFF 	 bl bitArraySet
 658              	.L38:
  96:../cleanflight/src/main/fc/rc_modes.c ****             }
  97:../cleanflight/src/main/fc/rc_modes.c ****         }
  98:../cleanflight/src/main/fc/rc_modes.c ****     }
  99:../cleanflight/src/main/fc/rc_modes.c **** }
 659              	 .loc 3 99 0
 660 00a0 1037     	 adds r7,r7,#16
 661              	.LCFI44:
 662              	 .cfi_def_cfa_offset 8
 663 00a2 BD46     	 mov sp,r7
 664              	.LCFI45:
 665              	 .cfi_def_cfa_register 13
 666              	 
 667 00a4 80BD     	 pop {r7,pc}
 668              	.L45:
 669 00a6 00BF     	 .align 3
 670              	.L44:
 671 00a8 00000000 	 .word 0
 672 00ac D0125341 	 .word 1095963344
 673 00b0 00000000 	 .word stickyModesEverDisabled
 674              	 .cfi_endproc
 675              	.LFE557:
 677 00b4 AFF30080 	 .section .text.updateActivatedModes,"ax",%progbits
 678              	 .align 2
 679              	 .global updateActivatedModes
 680              	 .thumb
 681              	 .thumb_func
 683              	updateActivatedModes:
 684              	.LFB558:
 100:../cleanflight/src/main/fc/rc_modes.c **** 
 101:../cleanflight/src/main/fc/rc_modes.c **** void updateActivatedModes(void)
 102:../cleanflight/src/main/fc/rc_modes.c **** {
 685              	 .loc 3 102 0
 686              	 .cfi_startproc
 687              	 
 688              	 
 689 0000 80B5     	 push {r7,lr}
 690              	.LCFI46:
 691              	 .cfi_def_cfa_offset 8
 692              	 .cfi_offset 7,-8
 693              	 .cfi_offset 14,-4
 694 0002 8AB0     	 sub sp,sp,#40
 695              	.LCFI47:
 696              	 .cfi_def_cfa_offset 48
 697 0004 00AF     	 add r7,sp,#0
 698              	.LCFI48:
 699              	 .cfi_def_cfa_register 7
 103:../cleanflight/src/main/fc/rc_modes.c ****     boxBitmask_t newMask, andMask, stickyModes;
 104:../cleanflight/src/main/fc/rc_modes.c ****     memset(&andMask, 0, sizeof(andMask));
 700              	 .loc 3 104 0
 701 0006 07F10803 	 add r3,r7,#8
 702 000a 1846     	 mov r0,r3
 703 000c 0021     	 movs r1,#0
 704 000e 0822     	 movs r2,#8
 705 0010 FFF7FEFF 	 bl memset
 105:../cleanflight/src/main/fc/rc_modes.c ****     memset(&newMask, 0, sizeof(newMask));
 706              	 .loc 3 105 0
 707 0014 07F11003 	 add r3,r7,#16
 708 0018 1846     	 mov r0,r3
 709 001a 0021     	 movs r1,#0
 710 001c 0822     	 movs r2,#8
 711 001e FFF7FEFF 	 bl memset
 106:../cleanflight/src/main/fc/rc_modes.c ****     memset(&stickyModes, 0, sizeof(stickyModes));
 712              	 .loc 3 106 0
 713 0022 3B46     	 mov r3,r7
 714 0024 1846     	 mov r0,r3
 715 0026 0021     	 movs r1,#0
 716 0028 0822     	 movs r2,#8
 717 002a FFF7FEFF 	 bl memset
 107:../cleanflight/src/main/fc/rc_modes.c ****     bitArraySet(&stickyModes, BOXPARALYZE);
 718              	 .loc 3 107 0
 719 002e 3B46     	 mov r3,r7
 720 0030 1846     	 mov r0,r3
 721 0032 2221     	 movs r1,#34
 722 0034 FFF7FEFF 	 bl bitArraySet
 723              	.LBB2:
 108:../cleanflight/src/main/fc/rc_modes.c **** 
 109:../cleanflight/src/main/fc/rc_modes.c ****     // determine which conditions set/clear the mode
 110:../cleanflight/src/main/fc/rc_modes.c ****     for (int i = 0; i < MAX_MODE_ACTIVATION_CONDITION_COUNT; i++) {
 724              	 .loc 3 110 0
 725 0038 0023     	 movs r3,#0
 726 003a 7B62     	 str r3,[r7,#36]
 727 003c 2DE0     	 b .L47
 728              	.L51:
 729              	.LBB3:
 111:../cleanflight/src/main/fc/rc_modes.c ****         const modeActivationCondition_t *mac = modeActivationConditions(i);
 730              	 .loc 3 111 0
 731 003e 786A     	 ldr r0,[r7,#36]
 732 0040 FFF7FEFF 	 bl modeActivationConditions
 733 0044 F861     	 str r0,[r7,#28]
 112:../cleanflight/src/main/fc/rc_modes.c **** 
 113:../cleanflight/src/main/fc/rc_modes.c ****         // Skip linked macs for now to fully determine target states
 114:../cleanflight/src/main/fc/rc_modes.c ****         if (mac->linkedTo) {
 734              	 .loc 3 114 0
 735 0046 FB69     	 ldr r3,[r7,#28]
 736 0048 5B79     	 ldrb r3,[r3,#5]
 737 004a 002B     	 cmp r3,#0
 738 004c 00D0     	 beq .L48
 115:../cleanflight/src/main/fc/rc_modes.c ****             continue;
 739              	 .loc 3 115 0
 740 004e 21E0     	 b .L49
 741              	.L48:
 116:../cleanflight/src/main/fc/rc_modes.c ****         }
 117:../cleanflight/src/main/fc/rc_modes.c **** 
 118:../cleanflight/src/main/fc/rc_modes.c ****         if (bitArrayGet(&stickyModes, mac->modeId)) {
 742              	 .loc 3 118 0
 743 0050 FB69     	 ldr r3,[r7,#28]
 744 0052 1B78     	 ldrb r3,[r3]
 745 0054 1A46     	 mov r2,r3
 746 0056 3B46     	 mov r3,r7
 747 0058 1846     	 mov r0,r3
 748 005a 1146     	 mov r1,r2
 749 005c FFF7FEFF 	 bl bitArrayGet
 750 0060 0346     	 mov r3,r0
 751 0062 002B     	 cmp r3,#0
 752 0064 09D0     	 beq .L50
 119:../cleanflight/src/main/fc/rc_modes.c ****             updateMasksForStickyModes(mac, &andMask, &newMask);
 753              	 .loc 3 119 0
 754 0066 07F10802 	 add r2,r7,#8
 755 006a 07F11003 	 add r3,r7,#16
 756 006e F869     	 ldr r0,[r7,#28]
 757 0070 1146     	 mov r1,r2
 758 0072 1A46     	 mov r2,r3
 759 0074 FFF7FEFF 	 bl updateMasksForStickyModes
 760 0078 0CE0     	 b .L49
 761              	.L50:
 120:../cleanflight/src/main/fc/rc_modes.c ****         } else if (mac->modeId < CHECKBOX_ITEM_COUNT) {
 762              	 .loc 3 120 0
 763 007a FB69     	 ldr r3,[r7,#28]
 764 007c 1B78     	 ldrb r3,[r3]
 765 007e 282B     	 cmp r3,#40
 766 0080 08D8     	 bhi .L49
 121:../cleanflight/src/main/fc/rc_modes.c ****             updateMasksForMac(mac, &andMask, &newMask);
 767              	 .loc 3 121 0
 768 0082 07F10802 	 add r2,r7,#8
 769 0086 07F11003 	 add r3,r7,#16
 770 008a F869     	 ldr r0,[r7,#28]
 771 008c 1146     	 mov r1,r2
 772 008e 1A46     	 mov r2,r3
 773 0090 FFF7FEFF 	 bl updateMasksForMac
 774              	.L49:
 775              	.LBE3:
 110:../cleanflight/src/main/fc/rc_modes.c ****         const modeActivationCondition_t *mac = modeActivationConditions(i);
 776              	 .loc 3 110 0 discriminator 2
 777 0094 7B6A     	 ldr r3,[r7,#36]
 778 0096 0133     	 adds r3,r3,#1
 779 0098 7B62     	 str r3,[r7,#36]
 780              	.L47:
 110:../cleanflight/src/main/fc/rc_modes.c ****         const modeActivationCondition_t *mac = modeActivationConditions(i);
 781              	 .loc 3 110 0 is_stmt 0 discriminator 1
 782 009a 7B6A     	 ldr r3,[r7,#36]
 783 009c 132B     	 cmp r3,#19
 784 009e CEDD     	 ble .L51
 785              	.LBE2:
 122:../cleanflight/src/main/fc/rc_modes.c ****         }
 123:../cleanflight/src/main/fc/rc_modes.c ****     }
 124:../cleanflight/src/main/fc/rc_modes.c **** 
 125:../cleanflight/src/main/fc/rc_modes.c ****     bitArrayXor(&newMask, sizeof(&newMask), &newMask, &andMask);
 786              	 .loc 3 125 0 is_stmt 1
 787 00a0 07F11001 	 add r1,r7,#16
 788 00a4 07F11002 	 add r2,r7,#16
 789 00a8 07F10803 	 add r3,r7,#8
 790 00ac 0846     	 mov r0,r1
 791 00ae 0421     	 movs r1,#4
 792 00b0 FFF7FEFF 	 bl bitArrayXor
 793              	.LBB4:
 126:../cleanflight/src/main/fc/rc_modes.c **** 
 127:../cleanflight/src/main/fc/rc_modes.c ****     // Update linked modes
 128:../cleanflight/src/main/fc/rc_modes.c ****     for (int i = 0; i < MAX_MODE_ACTIVATION_CONDITION_COUNT; i++) {
 794              	 .loc 3 128 0
 795 00b4 0023     	 movs r3,#0
 796 00b6 3B62     	 str r3,[r7,#32]
 797 00b8 16E0     	 b .L52
 798              	.L55:
 799              	.LBB5:
 129:../cleanflight/src/main/fc/rc_modes.c ****         const modeActivationCondition_t *mac = modeActivationConditions(i);
 800              	 .loc 3 129 0
 801 00ba 386A     	 ldr r0,[r7,#32]
 802 00bc FFF7FEFF 	 bl modeActivationConditions
 803 00c0 B861     	 str r0,[r7,#24]
 130:../cleanflight/src/main/fc/rc_modes.c **** 
 131:../cleanflight/src/main/fc/rc_modes.c ****         if (!mac->linkedTo) {
 804              	 .loc 3 131 0
 805 00c2 BB69     	 ldr r3,[r7,#24]
 806 00c4 5B79     	 ldrb r3,[r3,#5]
 807 00c6 002B     	 cmp r3,#0
 808 00c8 00D1     	 bne .L53
 132:../cleanflight/src/main/fc/rc_modes.c ****             continue;
 809              	 .loc 3 132 0
 810 00ca 0AE0     	 b .L54
 811              	.L53:
 133:../cleanflight/src/main/fc/rc_modes.c ****         }
 134:../cleanflight/src/main/fc/rc_modes.c **** 
 135:../cleanflight/src/main/fc/rc_modes.c ****         bitArrayCopy(&newMask, mac->linkedTo, mac->modeId);
 812              	 .loc 3 135 0
 813 00cc BB69     	 ldr r3,[r7,#24]
 814 00ce 5B79     	 ldrb r3,[r3,#5]
 815 00d0 1946     	 mov r1,r3
 816 00d2 BB69     	 ldr r3,[r7,#24]
 817 00d4 1B78     	 ldrb r3,[r3]
 818 00d6 1A46     	 mov r2,r3
 819 00d8 07F11003 	 add r3,r7,#16
 820 00dc 1846     	 mov r0,r3
 821 00de FFF7FEFF 	 bl bitArrayCopy
 822              	.L54:
 823              	.LBE5:
 128:../cleanflight/src/main/fc/rc_modes.c ****         const modeActivationCondition_t *mac = modeActivationConditions(i);
 824              	 .loc 3 128 0 discriminator 2
 825 00e2 3B6A     	 ldr r3,[r7,#32]
 826 00e4 0133     	 adds r3,r3,#1
 827 00e6 3B62     	 str r3,[r7,#32]
 828              	.L52:
 128:../cleanflight/src/main/fc/rc_modes.c ****         const modeActivationCondition_t *mac = modeActivationConditions(i);
 829              	 .loc 3 128 0 is_stmt 0 discriminator 1
 830 00e8 3B6A     	 ldr r3,[r7,#32]
 831 00ea 132B     	 cmp r3,#19
 832 00ec E5DD     	 ble .L55
 833              	.LBE4:
 136:../cleanflight/src/main/fc/rc_modes.c ****     }
 137:../cleanflight/src/main/fc/rc_modes.c **** 
 138:../cleanflight/src/main/fc/rc_modes.c ****     rcModeUpdate(&newMask);
 834              	 .loc 3 138 0 is_stmt 1
 835 00ee 07F11003 	 add r3,r7,#16
 836 00f2 1846     	 mov r0,r3
 837 00f4 FFF7FEFF 	 bl rcModeUpdate
 139:../cleanflight/src/main/fc/rc_modes.c **** }
 838              	 .loc 3 139 0
 839 00f8 2837     	 adds r7,r7,#40
 840              	.LCFI49:
 841              	 .cfi_def_cfa_offset 8
 842 00fa BD46     	 mov sp,r7
 843              	.LCFI50:
 844              	 .cfi_def_cfa_register 13
 845              	 
 846 00fc 80BD     	 pop {r7,pc}
 847              	 .cfi_endproc
 848              	.LFE558:
 850 00fe 00BF     	 .section .text.isModeActivationConditionPresent,"ax",%progbits
 851              	 .align 2
 852              	 .global isModeActivationConditionPresent
 853              	 .thumb
 854              	 .thumb_func
 856              	isModeActivationConditionPresent:
 857              	.LFB559:
 140:../cleanflight/src/main/fc/rc_modes.c **** 
 141:../cleanflight/src/main/fc/rc_modes.c **** bool isModeActivationConditionPresent(boxId_e modeId)
 142:../cleanflight/src/main/fc/rc_modes.c **** {
 858              	 .loc 3 142 0
 859              	 .cfi_startproc
 860              	 
 861              	 
 862 0000 80B5     	 push {r7,lr}
 863              	.LCFI51:
 864              	 .cfi_def_cfa_offset 8
 865              	 .cfi_offset 7,-8
 866              	 .cfi_offset 14,-4
 867 0002 84B0     	 sub sp,sp,#16
 868              	.LCFI52:
 869              	 .cfi_def_cfa_offset 24
 870 0004 00AF     	 add r7,sp,#0
 871              	.LCFI53:
 872              	 .cfi_def_cfa_register 7
 873 0006 0346     	 mov r3,r0
 874 0008 FB71     	 strb r3,[r7,#7]
 875              	.LBB6:
 143:../cleanflight/src/main/fc/rc_modes.c ****     for (int i = 0; i < MAX_MODE_ACTIVATION_CONDITION_COUNT; i++) {
 876              	 .loc 3 143 0
 877 000a 0023     	 movs r3,#0
 878 000c FB60     	 str r3,[r7,#12]
 879 000e 17E0     	 b .L57
 880              	.L61:
 881              	.LBB7:
 144:../cleanflight/src/main/fc/rc_modes.c ****         const modeActivationCondition_t *mac = modeActivationConditions(i);
 882              	 .loc 3 144 0
 883 0010 F868     	 ldr r0,[r7,#12]
 884 0012 FFF7FEFF 	 bl modeActivationConditions
 885 0016 B860     	 str r0,[r7,#8]
 145:../cleanflight/src/main/fc/rc_modes.c **** 
 146:../cleanflight/src/main/fc/rc_modes.c ****         if (mac->modeId == modeId && (IS_RANGE_USABLE(&mac->range) || mac->linkedTo)) {
 886              	 .loc 3 146 0
 887 0018 BB68     	 ldr r3,[r7,#8]
 888 001a 1B78     	 ldrb r3,[r3]
 889 001c FA79     	 ldrb r2,[r7,#7]
 890 001e 9A42     	 cmp r2,r3
 891 0020 0BD1     	 bne .L58
 892              	 .loc 3 146 0 is_stmt 0 discriminator 1
 893 0022 BB68     	 ldr r3,[r7,#8]
 894 0024 9A78     	 ldrb r2,[r3,#2]
 895 0026 BB68     	 ldr r3,[r7,#8]
 896 0028 DB78     	 ldrb r3,[r3,#3]
 897 002a 9A42     	 cmp r2,r3
 898 002c 03D3     	 bcc .L59
 899              	 .loc 3 146 0 discriminator 2
 900 002e BB68     	 ldr r3,[r7,#8]
 901 0030 5B79     	 ldrb r3,[r3,#5]
 902 0032 002B     	 cmp r3,#0
 903 0034 01D0     	 beq .L58
 904              	.L59:
 147:../cleanflight/src/main/fc/rc_modes.c ****             return true;
 905              	 .loc 3 147 0 is_stmt 1
 906 0036 0123     	 movs r3,#1
 907 0038 06E0     	 b .L60
 908              	.L58:
 909              	.LBE7:
 143:../cleanflight/src/main/fc/rc_modes.c ****         const modeActivationCondition_t *mac = modeActivationConditions(i);
 910              	 .loc 3 143 0 discriminator 2
 911 003a FB68     	 ldr r3,[r7,#12]
 912 003c 0133     	 adds r3,r3,#1
 913 003e FB60     	 str r3,[r7,#12]
 914              	.L57:
 143:../cleanflight/src/main/fc/rc_modes.c ****         const modeActivationCondition_t *mac = modeActivationConditions(i);
 915              	 .loc 3 143 0 is_stmt 0 discriminator 1
 916 0040 FB68     	 ldr r3,[r7,#12]
 917 0042 132B     	 cmp r3,#19
 918 0044 E4DD     	 ble .L61
 919              	.LBE6:
 148:../cleanflight/src/main/fc/rc_modes.c ****         }
 149:../cleanflight/src/main/fc/rc_modes.c ****     }
 150:../cleanflight/src/main/fc/rc_modes.c **** 
 151:../cleanflight/src/main/fc/rc_modes.c ****     return false;
 920              	 .loc 3 151 0 is_stmt 1
 921 0046 0023     	 movs r3,#0
 922              	.L60:
 152:../cleanflight/src/main/fc/rc_modes.c **** }
 923              	 .loc 3 152 0
 924 0048 1846     	 mov r0,r3
 925 004a 1037     	 adds r7,r7,#16
 926              	.LCFI54:
 927              	 .cfi_def_cfa_offset 8
 928 004c BD46     	 mov sp,r7
 929              	.LCFI55:
 930              	 .cfi_def_cfa_register 13
 931              	 
 932 004e 80BD     	 pop {r7,pc}
 933              	 .cfi_endproc
 934              	.LFE559:
 936              	 .section .text.removeModeActivationCondition,"ax",%progbits
 937              	 .align 2
 938              	 .global removeModeActivationCondition
 939              	 .thumb
 940              	 .thumb_func
 942              	removeModeActivationCondition:
 943              	.LFB560:
 153:../cleanflight/src/main/fc/rc_modes.c **** 
 154:../cleanflight/src/main/fc/rc_modes.c **** void removeModeActivationCondition(const boxId_e modeId)
 155:../cleanflight/src/main/fc/rc_modes.c **** {
 944              	 .loc 3 155 0
 945              	 .cfi_startproc
 946              	 
 947              	 
 948 0000 80B5     	 push {r7,lr}
 949              	.LCFI56:
 950              	 .cfi_def_cfa_offset 8
 951              	 .cfi_offset 7,-8
 952              	 .cfi_offset 14,-4
 953 0002 86B0     	 sub sp,sp,#24
 954              	.LCFI57:
 955              	 .cfi_def_cfa_offset 32
 956 0004 00AF     	 add r7,sp,#0
 957              	.LCFI58:
 958              	 .cfi_def_cfa_register 7
 959 0006 0346     	 mov r3,r0
 960 0008 FB71     	 strb r3,[r7,#7]
 156:../cleanflight/src/main/fc/rc_modes.c ****     unsigned offset = 0;
 961              	 .loc 3 156 0
 962 000a 0023     	 movs r3,#0
 963 000c 7B61     	 str r3,[r7,#20]
 964              	.LBB8:
 157:../cleanflight/src/main/fc/rc_modes.c ****     for (unsigned i = 0; i < MAX_MODE_ACTIVATION_CONDITION_COUNT; i++) {
 965              	 .loc 3 157 0
 966 000e 0023     	 movs r3,#0
 967 0010 3B61     	 str r3,[r7,#16]
 968 0012 40E0     	 b .L63
 969              	.L70:
 970              	.LBB9:
 158:../cleanflight/src/main/fc/rc_modes.c ****         modeActivationCondition_t *mac = modeActivationConditionsMutable(i);
 971              	 .loc 3 158 0
 972 0014 3B69     	 ldr r3,[r7,#16]
 973 0016 1846     	 mov r0,r3
 974 0018 FFF7FEFF 	 bl modeActivationConditionsMutable
 975 001c F860     	 str r0,[r7,#12]
 159:../cleanflight/src/main/fc/rc_modes.c **** 
 160:../cleanflight/src/main/fc/rc_modes.c ****         if (mac->modeId == modeId && !offset) {
 976              	 .loc 3 160 0
 977 001e FB68     	 ldr r3,[r7,#12]
 978 0020 1B78     	 ldrb r3,[r3]
 979 0022 FA79     	 ldrb r2,[r7,#7]
 980 0024 9A42     	 cmp r2,r3
 981 0026 05D1     	 bne .L64
 982              	 .loc 3 160 0 is_stmt 0 discriminator 1
 983 0028 7B69     	 ldr r3,[r7,#20]
 984 002a 002B     	 cmp r3,#0
 985 002c 02D1     	 bne .L64
 161:../cleanflight/src/main/fc/rc_modes.c ****             offset++;
 986              	 .loc 3 161 0 is_stmt 1
 987 002e 7B69     	 ldr r3,[r7,#20]
 988 0030 0133     	 adds r3,r3,#1
 989 0032 7B61     	 str r3,[r7,#20]
 990              	.L64:
 162:../cleanflight/src/main/fc/rc_modes.c ****         }
 163:../cleanflight/src/main/fc/rc_modes.c **** 
 164:../cleanflight/src/main/fc/rc_modes.c ****         if (offset) {
 991              	 .loc 3 164 0
 992 0034 7B69     	 ldr r3,[r7,#20]
 993 0036 002B     	 cmp r3,#0
 994 0038 2AD0     	 beq .L65
 165:../cleanflight/src/main/fc/rc_modes.c ****             while (i + offset < MAX_MODE_ACTIVATION_CONDITION_COUNT && modeActivationConditions(i +
 995              	 .loc 3 165 0
 996 003a 02E0     	 b .L66
 997              	.L68:
 166:../cleanflight/src/main/fc/rc_modes.c ****                 offset++;
 998              	 .loc 3 166 0
 999 003c 7B69     	 ldr r3,[r7,#20]
 1000 003e 0133     	 adds r3,r3,#1
 1001 0040 7B61     	 str r3,[r7,#20]
 1002              	.L66:
 165:../cleanflight/src/main/fc/rc_modes.c ****             while (i + offset < MAX_MODE_ACTIVATION_CONDITION_COUNT && modeActivationConditions(i +
 1003              	 .loc 3 165 0
 1004 0042 3A69     	 ldr r2,[r7,#16]
 1005 0044 7B69     	 ldr r3,[r7,#20]
 1006 0046 1344     	 add r3,r3,r2
 1007 0048 132B     	 cmp r3,#19
 1008 004a 0AD8     	 bhi .L67
 165:../cleanflight/src/main/fc/rc_modes.c ****             while (i + offset < MAX_MODE_ACTIVATION_CONDITION_COUNT && modeActivationConditions(i +
 1009              	 .loc 3 165 0 is_stmt 0 discriminator 1
 1010 004c 3A69     	 ldr r2,[r7,#16]
 1011 004e 7B69     	 ldr r3,[r7,#20]
 1012 0050 1344     	 add r3,r3,r2
 1013 0052 1846     	 mov r0,r3
 1014 0054 FFF7FEFF 	 bl modeActivationConditions
 1015 0058 0346     	 mov r3,r0
 1016 005a 1B78     	 ldrb r3,[r3]
 1017 005c FA79     	 ldrb r2,[r7,#7]
 1018 005e 9A42     	 cmp r2,r3
 1019 0060 ECD0     	 beq .L68
 1020              	.L67:
 167:../cleanflight/src/main/fc/rc_modes.c ****             }
 168:../cleanflight/src/main/fc/rc_modes.c **** 
 169:../cleanflight/src/main/fc/rc_modes.c ****             if (i + offset < MAX_MODE_ACTIVATION_CONDITION_COUNT) {
 1021              	 .loc 3 169 0 is_stmt 1
 1022 0062 3A69     	 ldr r2,[r7,#16]
 1023 0064 7B69     	 ldr r3,[r7,#20]
 1024 0066 1344     	 add r3,r3,r2
 1025 0068 132B     	 cmp r3,#19
 1026 006a 0CD8     	 bhi .L69
 170:../cleanflight/src/main/fc/rc_modes.c ****                 memcpy(mac, modeActivationConditions(i + offset), sizeof(modeActivationCondition_t)
 1027              	 .loc 3 170 0
 1028 006c 3A69     	 ldr r2,[r7,#16]
 1029 006e 7B69     	 ldr r3,[r7,#20]
 1030 0070 1344     	 add r3,r3,r2
 1031 0072 1846     	 mov r0,r3
 1032 0074 FFF7FEFF 	 bl modeActivationConditions
 1033 0078 0346     	 mov r3,r0
 1034 007a F868     	 ldr r0,[r7,#12]
 1035 007c 1946     	 mov r1,r3
 1036 007e 0622     	 movs r2,#6
 1037 0080 FFF7FEFF 	 bl memcpy
 1038 0084 04E0     	 b .L65
 1039              	.L69:
 171:../cleanflight/src/main/fc/rc_modes.c ****             } else {
 172:../cleanflight/src/main/fc/rc_modes.c ****                 memset(mac, 0, sizeof(modeActivationCondition_t));
 1040              	 .loc 3 172 0
 1041 0086 F868     	 ldr r0,[r7,#12]
 1042 0088 0021     	 movs r1,#0
 1043 008a 0622     	 movs r2,#6
 1044 008c FFF7FEFF 	 bl memset
 1045              	.L65:
 1046              	.LBE9:
 157:../cleanflight/src/main/fc/rc_modes.c ****         modeActivationCondition_t *mac = modeActivationConditionsMutable(i);
 1047              	 .loc 3 157 0 discriminator 2
 1048 0090 3B69     	 ldr r3,[r7,#16]
 1049 0092 0133     	 adds r3,r3,#1
 1050 0094 3B61     	 str r3,[r7,#16]
 1051              	.L63:
 157:../cleanflight/src/main/fc/rc_modes.c ****         modeActivationCondition_t *mac = modeActivationConditionsMutable(i);
 1052              	 .loc 3 157 0 is_stmt 0 discriminator 1
 1053 0096 3B69     	 ldr r3,[r7,#16]
 1054 0098 132B     	 cmp r3,#19
 1055 009a BBD9     	 bls .L70
 1056              	.LBE8:
 173:../cleanflight/src/main/fc/rc_modes.c ****             }
 174:../cleanflight/src/main/fc/rc_modes.c ****         }
 175:../cleanflight/src/main/fc/rc_modes.c ****     }
 176:../cleanflight/src/main/fc/rc_modes.c **** }
 1057              	 .loc 3 176 0 is_stmt 1
 1058 009c 1837     	 adds r7,r7,#24
 1059              	.LCFI59:
 1060              	 .cfi_def_cfa_offset 8
 1061 009e BD46     	 mov sp,r7
 1062              	.LCFI60:
 1063              	 .cfi_def_cfa_register 13
 1064              	 
 1065 00a0 80BD     	 pop {r7,pc}
 1066              	 .cfi_endproc
 1067              	.LFE560:
 1069 00a2 00BF     	 .text
 1070              	.Letext0:
 1071              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1072              	 .file 5 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1073              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 1074              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 1075              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 1076              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 1077              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 1078              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
 1079              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 1080              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
 1081              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 1082              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 1083              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rc_modes.c
    {standard input}:20     .text.modeActivationConditions:00000000 $t
    {standard input}:24     .text.modeActivationConditions:00000000 modeActivationConditions
    {standard input}:67     .text.modeActivationConditions:00000024 $d
                            *COM*:00000078 modeActivationConditions_SystemArray
    {standard input}:72     .text.modeActivationConditionsMutable:00000000 $t
    {standard input}:76     .text.modeActivationConditionsMutable:00000000 modeActivationConditionsMutable
    {standard input}:118    .text.modeActivationConditionsMutable:00000024 $d
    {standard input}:123    .text.constrain:00000000 $t
    {standard input}:127    .text.constrain:00000000 constrain
                            *COM*:00000008 rcModeActivationMask
    {standard input}:188    .bss.stickyModesEverDisabled:00000000 $d
    {standard input}:191    .bss.stickyModesEverDisabled:00000000 stickyModesEverDisabled
                            *COM*:00000078 modeActivationConditions_CopyArray
    {standard input}:200    .pg_registry:00000000 modeActivationConditions_Registry
    {standard input}:197    .pg_registry:00000000 $d
    {standard input}:208    .text.IS_RC_MODE_ACTIVE:00000000 $t
    {standard input}:213    .text.IS_RC_MODE_ACTIVE:00000000 IS_RC_MODE_ACTIVE
    {standard input}:252    .text.IS_RC_MODE_ACTIVE:00000020 $d
    {standard input}:257    .text.rcModeUpdate:00000000 $t
    {standard input}:262    .text.rcModeUpdate:00000000 rcModeUpdate
    {standard input}:303    .text.rcModeUpdate:00000020 $d
    {standard input}:308    .text.isAirmodeActive:00000000 $t
    {standard input}:313    .text.isAirmodeActive:00000000 isAirmodeActive
    {standard input}:357    .text.isRangeActive:00000000 $t
    {standard input}:362    .text.isRangeActive:00000000 isRangeActive
    {standard input}:456    .text.isRangeActive:00000084 $d
    {standard input}:461    .text.updateMasksForMac:00000000 $t
    {standard input}:466    .text.updateMasksForMac:00000000 updateMasksForMac
    {standard input}:561    .text.updateMasksForStickyModes:00000000 $t
    {standard input}:566    .text.updateMasksForStickyModes:00000000 updateMasksForStickyModes
    {standard input}:671    .text.updateMasksForStickyModes:000000a8 $d
    {standard input}:678    .text.updateActivatedModes:00000000 $t
    {standard input}:683    .text.updateActivatedModes:00000000 updateActivatedModes
    {standard input}:851    .text.isModeActivationConditionPresent:00000000 $t
    {standard input}:856    .text.isModeActivationConditionPresent:00000000 isModeActivationConditionPresent
    {standard input}:937    .text.removeModeActivationCondition:00000000 $t
    {standard input}:942    .text.removeModeActivationCondition:00000000 removeModeActivationCondition
                     .debug_frame:00000010 $d
    {standard input}:677    .text.updateMasksForStickyModes:000000b4 $t

UNDEFINED SYMBOLS
bitArrayGet
feature
rcData
bitArraySet
__aeabi_ui2d
__aeabi_dcmpge
bitArrayClr
micros
memset
bitArrayXor
bitArrayCopy
memcpy
