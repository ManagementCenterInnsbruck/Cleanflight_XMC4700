   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "failsafe.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.rxConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	rxConfig:
  25              	.LFB524:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
  27              	 .loc 1 61 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 61 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word rxConfig_System
  55              	 .cfi_endproc
  56              	.LFE524:
  58              	 .section .text.failsafeConfig,"ax",%progbits
  59              	 .align 2
  60              	 .thumb
  61              	 .thumb_func
  63              	failsafeConfig:
  64              	.LFB544:
  65              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define FAILSAFE_POWER_ON_DELAY_US (1000 * 1000 * 5)
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define MILLIS_PER_TENTH_SECOND      100
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define MILLIS_PER_SECOND           1000
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_OF_1_SECONDS            1 * MILLIS_PER_SECOND
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_OF_3_SECONDS            3 * MILLIS_PER_SECOND
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_OF_30_SECONDS          30 * MILLIS_PER_SECOND
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_RXDATA_FAILURE        200    // millis
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_RXDATA_RECOVERY       200    // millis
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** typedef struct failsafeConfig_s {
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint16_t failsafe_throttle;             // Throttle level used for landing - specify value betw
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint16_t failsafe_throttle_low_delay;   // Time throttle stick must have been below 'min_check'
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_delay;                 // Guard time for failsafe activation after signal lost
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_off_delay;             // Time for Landing before motors stop in 0.1sec. 1 ste
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_switch_mode;           // failsafe switch action is 0: stage1 (identical to rc
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_procedure;             // selected full failsafe procedure is 0: auto-landing,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** } failsafeConfig_t;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** PG_DECLARE(failsafeConfig_t, failsafeConfig);
  66              	 .loc 2 44 0
  67              	 .cfi_startproc
  68              	 
  69              	 
  70              	 
  71 0000 80B4     	 push {r7}
  72              	.LCFI4:
  73              	 .cfi_def_cfa_offset 4
  74              	 .cfi_offset 7,-4
  75 0002 00AF     	 add r7,sp,#0
  76              	.LCFI5:
  77              	 .cfi_def_cfa_register 7
  78              	 .loc 2 44 0
  79 0004 024B     	 ldr r3,.L7
  80 0006 1846     	 mov r0,r3
  81 0008 BD46     	 mov sp,r7
  82              	.LCFI6:
  83              	 .cfi_def_cfa_register 13
  84              	 
  85 000a 5DF8047B 	 ldr r7,[sp],#4
  86              	.LCFI7:
  87              	 .cfi_restore 7
  88              	 .cfi_def_cfa_offset 0
  89 000e 7047     	 bx lr
  90              	.L8:
  91              	 .align 2
  92              	.L7:
  93 0010 00000000 	 .word failsafeConfig_System
  94              	 .cfi_endproc
  95              	.LFE544:
  97              	 .section .bss.failsafeState,"aw",%nobits
  98              	 .align 2
 101              	failsafeState:
 102 0000 00000000 	 .space 34
 102      00000000 
 102      00000000 
 102      00000000 
 102      00000000 
 103              	 .comm failsafeConfig_System,8,4
 104              	 .comm failsafeConfig_Copy,8,4
 105              	 .global failsafeConfig_Registry
 106 0022 0000     	 .section .pg_registry,"a",%progbits
 107              	 .align 2
 110              	failsafeConfig_Registry:
 111 0000 0120     	 .short 8193
 112 0002 0800     	 .short 8
 113 0004 00000000 	 .word failsafeConfig_System
 114 0008 00000000 	 .word failsafeConfig_Copy
 115 000c 00000000 	 .word 0
 116 0010 00000000 	 .word pgResetTemplate_failsafeConfig
 117              	 .global pgResetTemplate_failsafeConfig
 118              	 .section .pg_resetdata,"a",%progbits
 119              	 .align 1
 122              	pgResetTemplate_failsafeConfig:
 123 0000 E803     	 .short 1000
 124 0002 6400     	 .short 100
 125 0004 04       	 .byte 4
 126 0005 0A       	 .byte 10
 127 0006 00       	 .byte 0
 128 0007 01       	 .byte 1
 129              	 .section .text.failsafeReset,"ax",%progbits
 130              	 .align 2
 131              	 .global failsafeReset
 132              	 .thumb
 133              	 .thumb_func
 135              	failsafeReset:
 136              	.LFB557:
 137              	 .file 3 "../cleanflight/src/main/flight/failsafe.c"
   1:../cleanflight/src/main/flight/failsafe.c **** /*
   2:../cleanflight/src/main/flight/failsafe.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/flight/failsafe.c ****  *
   4:../cleanflight/src/main/flight/failsafe.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/flight/failsafe.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/flight/failsafe.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/flight/failsafe.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/flight/failsafe.c ****  * any later version.
   9:../cleanflight/src/main/flight/failsafe.c ****  *
  10:../cleanflight/src/main/flight/failsafe.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/flight/failsafe.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/flight/failsafe.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/flight/failsafe.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/flight/failsafe.c ****  *
  15:../cleanflight/src/main/flight/failsafe.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/flight/failsafe.c ****  * along with this software.
  17:../cleanflight/src/main/flight/failsafe.c ****  *
  18:../cleanflight/src/main/flight/failsafe.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/flight/failsafe.c ****  */
  20:../cleanflight/src/main/flight/failsafe.c **** 
  21:../cleanflight/src/main/flight/failsafe.c **** #include <stdbool.h>
  22:../cleanflight/src/main/flight/failsafe.c **** #include <stdint.h>
  23:../cleanflight/src/main/flight/failsafe.c **** 
  24:../cleanflight/src/main/flight/failsafe.c **** #include "platform.h"
  25:../cleanflight/src/main/flight/failsafe.c **** 
  26:../cleanflight/src/main/flight/failsafe.c **** #include "build/debug.h"
  27:../cleanflight/src/main/flight/failsafe.c **** 
  28:../cleanflight/src/main/flight/failsafe.c **** #include "common/axis.h"
  29:../cleanflight/src/main/flight/failsafe.c **** 
  30:../cleanflight/src/main/flight/failsafe.c **** #include "pg/pg.h"
  31:../cleanflight/src/main/flight/failsafe.c **** #include "pg/pg_ids.h"
  32:../cleanflight/src/main/flight/failsafe.c **** #include "pg/rx.h"
  33:../cleanflight/src/main/flight/failsafe.c **** 
  34:../cleanflight/src/main/flight/failsafe.c **** #include "drivers/time.h"
  35:../cleanflight/src/main/flight/failsafe.c **** 
  36:../cleanflight/src/main/flight/failsafe.c **** #include "fc/config.h"
  37:../cleanflight/src/main/flight/failsafe.c **** #include "fc/fc_core.h"
  38:../cleanflight/src/main/flight/failsafe.c **** #include "fc/rc_controls.h"
  39:../cleanflight/src/main/flight/failsafe.c **** #include "fc/rc_modes.h"
  40:../cleanflight/src/main/flight/failsafe.c **** #include "fc/runtime_config.h"
  41:../cleanflight/src/main/flight/failsafe.c **** 
  42:../cleanflight/src/main/flight/failsafe.c **** #include "flight/failsafe.h"
  43:../cleanflight/src/main/flight/failsafe.c **** 
  44:../cleanflight/src/main/flight/failsafe.c **** #include "io/beeper.h"
  45:../cleanflight/src/main/flight/failsafe.c **** #include "io/motors.h"
  46:../cleanflight/src/main/flight/failsafe.c **** 
  47:../cleanflight/src/main/flight/failsafe.c **** #include "rx/rx.h"
  48:../cleanflight/src/main/flight/failsafe.c **** 
  49:../cleanflight/src/main/flight/failsafe.c **** #include "flight/pid.h"
  50:../cleanflight/src/main/flight/failsafe.c **** 
  51:../cleanflight/src/main/flight/failsafe.c **** /*
  52:../cleanflight/src/main/flight/failsafe.c ****  * Usage:
  53:../cleanflight/src/main/flight/failsafe.c ****  *
  54:../cleanflight/src/main/flight/failsafe.c ****  * failsafeInit() and failsafeReset() must be called before the other methods are used.
  55:../cleanflight/src/main/flight/failsafe.c ****  *
  56:../cleanflight/src/main/flight/failsafe.c ****  * failsafeInit() and failsafeReset() can be called in any order.
  57:../cleanflight/src/main/flight/failsafe.c ****  * failsafeInit() should only be called once.
  58:../cleanflight/src/main/flight/failsafe.c ****  *
  59:../cleanflight/src/main/flight/failsafe.c ****  * enable() should be called after system initialisation.
  60:../cleanflight/src/main/flight/failsafe.c ****  */
  61:../cleanflight/src/main/flight/failsafe.c **** 
  62:../cleanflight/src/main/flight/failsafe.c **** static failsafeState_t failsafeState;
  63:../cleanflight/src/main/flight/failsafe.c **** 
  64:../cleanflight/src/main/flight/failsafe.c **** PG_REGISTER_WITH_RESET_TEMPLATE(failsafeConfig_t, failsafeConfig, PG_FAILSAFE_CONFIG, 2);
  65:../cleanflight/src/main/flight/failsafe.c **** 
  66:../cleanflight/src/main/flight/failsafe.c **** PG_RESET_TEMPLATE(failsafeConfig_t, failsafeConfig,
  67:../cleanflight/src/main/flight/failsafe.c ****     .failsafe_throttle = 1000,                       // default throttle off.
  68:../cleanflight/src/main/flight/failsafe.c ****     .failsafe_throttle_low_delay = 100,              // default throttle low delay for "just disarm
  69:../cleanflight/src/main/flight/failsafe.c ****     .failsafe_delay = 4,                             // 0,4sec
  70:../cleanflight/src/main/flight/failsafe.c ****     .failsafe_off_delay = 10,                        // 1sec
  71:../cleanflight/src/main/flight/failsafe.c ****     .failsafe_switch_mode = 0,                       // default failsafe switch action is identical
  72:../cleanflight/src/main/flight/failsafe.c ****     .failsafe_procedure = FAILSAFE_PROCEDURE_DROP_IT // default full failsafe procedure is 0: auto-
  73:../cleanflight/src/main/flight/failsafe.c **** );
  74:../cleanflight/src/main/flight/failsafe.c **** 
  75:../cleanflight/src/main/flight/failsafe.c **** /*
  76:../cleanflight/src/main/flight/failsafe.c ****  * Should called when the failsafe config needs to be changed - e.g. a different profile has been s
  77:../cleanflight/src/main/flight/failsafe.c ****  */
  78:../cleanflight/src/main/flight/failsafe.c **** void failsafeReset(void)
  79:../cleanflight/src/main/flight/failsafe.c **** {
 138              	 .loc 3 79 0
 139              	 .cfi_startproc
 140              	 
 141              	 
 142 0000 80B5     	 push {r7,lr}
 143              	.LCFI8:
 144              	 .cfi_def_cfa_offset 8
 145              	 .cfi_offset 7,-8
 146              	 .cfi_offset 14,-4
 147 0002 00AF     	 add r7,sp,#0
 148              	.LCFI9:
 149              	 .cfi_def_cfa_register 7
  80:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.rxDataFailurePeriod = PERIOD_RXDATA_FAILURE + failsafeConfig()->failsafe_delay * 
 150              	 .loc 3 80 0
 151 0004 FFF7FEFF 	 bl failsafeConfig
 152 0008 0346     	 mov r3,r0
 153 000a 1B79     	 ldrb r3,[r3,#4]
 154 000c 1A46     	 mov r2,r3
 155 000e 6423     	 movs r3,#100
 156 0010 03FB02F3 	 mul r3,r3,r2
 157 0014 C833     	 adds r3,r3,#200
 158 0016 1A46     	 mov r2,r3
 159 0018 0E4B     	 ldr r3,.L10
 160 001a 5A60     	 str r2,[r3,#4]
  81:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.validRxDataReceivedAt = 0;
 161              	 .loc 3 81 0
 162 001c 0D4B     	 ldr r3,.L10
 163 001e 0022     	 movs r2,#0
 164 0020 9A60     	 str r2,[r3,#8]
  82:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.validRxDataFailedAt = 0;
 165              	 .loc 3 82 0
 166 0022 0C4B     	 ldr r3,.L10
 167 0024 0022     	 movs r2,#0
 168 0026 DA60     	 str r2,[r3,#12]
  83:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.throttleLowPeriod = 0;
 169              	 .loc 3 83 0
 170 0028 0A4B     	 ldr r3,.L10
 171 002a 0022     	 movs r2,#0
 172 002c 1A61     	 str r2,[r3,#16]
  84:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.landingShouldBeFinishedAt = 0;
 173              	 .loc 3 84 0
 174 002e 094B     	 ldr r3,.L10
 175 0030 0022     	 movs r2,#0
 176 0032 5A61     	 str r2,[r3,#20]
  85:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.receivingRxDataPeriod = 0;
 177              	 .loc 3 85 0
 178 0034 074B     	 ldr r3,.L10
 179 0036 0022     	 movs r2,#0
 180 0038 9A61     	 str r2,[r3,#24]
  86:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.receivingRxDataPeriodPreset = 0;
 181              	 .loc 3 86 0
 182 003a 064B     	 ldr r3,.L10
 183 003c 0022     	 movs r2,#0
 184 003e DA61     	 str r2,[r3,#28]
  87:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.phase = FAILSAFE_IDLE;
 185              	 .loc 3 87 0
 186 0040 044B     	 ldr r3,.L10
 187 0042 0022     	 movs r2,#0
 188 0044 83F82020 	 strb r2,[r3,#32]
  88:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.rxLinkState = FAILSAFE_RXLINK_DOWN;
 189              	 .loc 3 88 0
 190 0048 024B     	 ldr r3,.L10
 191 004a 0022     	 movs r2,#0
 192 004c 83F82120 	 strb r2,[r3,#33]
  89:../cleanflight/src/main/flight/failsafe.c **** }
 193              	 .loc 3 89 0
 194 0050 80BD     	 pop {r7,pc}
 195              	.L11:
 196 0052 00BF     	 .align 2
 197              	.L10:
 198 0054 00000000 	 .word failsafeState
 199              	 .cfi_endproc
 200              	.LFE557:
 202              	 .section .text.failsafeInit,"ax",%progbits
 203              	 .align 2
 204              	 .global failsafeInit
 205              	 .thumb
 206              	 .thumb_func
 208              	failsafeInit:
 209              	.LFB558:
  90:../cleanflight/src/main/flight/failsafe.c **** 
  91:../cleanflight/src/main/flight/failsafe.c **** void failsafeInit(void)
  92:../cleanflight/src/main/flight/failsafe.c **** {
 210              	 .loc 3 92 0
 211              	 .cfi_startproc
 212              	 
 213              	 
 214              	 
 215 0000 80B4     	 push {r7}
 216              	.LCFI10:
 217              	 .cfi_def_cfa_offset 4
 218              	 .cfi_offset 7,-4
 219 0002 00AF     	 add r7,sp,#0
 220              	.LCFI11:
 221              	 .cfi_def_cfa_register 7
  93:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.events = 0;
 222              	 .loc 3 93 0
 223 0004 054B     	 ldr r3,.L14
 224 0006 0022     	 movs r2,#0
 225 0008 1A80     	 strh r2,[r3]
  94:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.monitoring = false;
 226              	 .loc 3 94 0
 227 000a 044B     	 ldr r3,.L14
 228 000c 0022     	 movs r2,#0
 229 000e 9A70     	 strb r2,[r3,#2]
  95:../cleanflight/src/main/flight/failsafe.c **** 
  96:../cleanflight/src/main/flight/failsafe.c ****     return;
 230              	 .loc 3 96 0
 231 0010 00BF     	 nop
  97:../cleanflight/src/main/flight/failsafe.c **** }
 232              	 .loc 3 97 0
 233 0012 BD46     	 mov sp,r7
 234              	.LCFI12:
 235              	 .cfi_def_cfa_register 13
 236              	 
 237 0014 5DF8047B 	 ldr r7,[sp],#4
 238              	.LCFI13:
 239              	 .cfi_restore 7
 240              	 .cfi_def_cfa_offset 0
 241 0018 7047     	 bx lr
 242              	.L15:
 243 001a 00BF     	 .align 2
 244              	.L14:
 245 001c 00000000 	 .word failsafeState
 246              	 .cfi_endproc
 247              	.LFE558:
 249              	 .section .text.failsafePhase,"ax",%progbits
 250              	 .align 2
 251              	 .global failsafePhase
 252              	 .thumb
 253              	 .thumb_func
 255              	failsafePhase:
 256              	.LFB559:
  98:../cleanflight/src/main/flight/failsafe.c **** 
  99:../cleanflight/src/main/flight/failsafe.c **** failsafePhase_e failsafePhase(void)
 100:../cleanflight/src/main/flight/failsafe.c **** {
 257              	 .loc 3 100 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261              	 
 262 0000 80B4     	 push {r7}
 263              	.LCFI14:
 264              	 .cfi_def_cfa_offset 4
 265              	 .cfi_offset 7,-4
 266 0002 00AF     	 add r7,sp,#0
 267              	.LCFI15:
 268              	 .cfi_def_cfa_register 7
 101:../cleanflight/src/main/flight/failsafe.c ****     return failsafeState.phase;
 269              	 .loc 3 101 0
 270 0004 034B     	 ldr r3,.L18
 271 0006 93F82030 	 ldrb r3,[r3,#32]
 102:../cleanflight/src/main/flight/failsafe.c **** }
 272              	 .loc 3 102 0
 273 000a 1846     	 mov r0,r3
 274 000c BD46     	 mov sp,r7
 275              	.LCFI16:
 276              	 .cfi_def_cfa_register 13
 277              	 
 278 000e 5DF8047B 	 ldr r7,[sp],#4
 279              	.LCFI17:
 280              	 .cfi_restore 7
 281              	 .cfi_def_cfa_offset 0
 282 0012 7047     	 bx lr
 283              	.L19:
 284              	 .align 2
 285              	.L18:
 286 0014 00000000 	 .word failsafeState
 287              	 .cfi_endproc
 288              	.LFE559:
 290              	 .section .text.failsafeIsMonitoring,"ax",%progbits
 291              	 .align 2
 292              	 .global failsafeIsMonitoring
 293              	 .thumb
 294              	 .thumb_func
 296              	failsafeIsMonitoring:
 297              	.LFB560:
 103:../cleanflight/src/main/flight/failsafe.c **** 
 104:../cleanflight/src/main/flight/failsafe.c **** bool failsafeIsMonitoring(void)
 105:../cleanflight/src/main/flight/failsafe.c **** {
 298              	 .loc 3 105 0
 299              	 .cfi_startproc
 300              	 
 301              	 
 302              	 
 303 0000 80B4     	 push {r7}
 304              	.LCFI18:
 305              	 .cfi_def_cfa_offset 4
 306              	 .cfi_offset 7,-4
 307 0002 00AF     	 add r7,sp,#0
 308              	.LCFI19:
 309              	 .cfi_def_cfa_register 7
 106:../cleanflight/src/main/flight/failsafe.c ****     return failsafeState.monitoring;
 310              	 .loc 3 106 0
 311 0004 034B     	 ldr r3,.L22
 312 0006 9B78     	 ldrb r3,[r3,#2]
 107:../cleanflight/src/main/flight/failsafe.c **** }
 313              	 .loc 3 107 0
 314 0008 1846     	 mov r0,r3
 315 000a BD46     	 mov sp,r7
 316              	.LCFI20:
 317              	 .cfi_def_cfa_register 13
 318              	 
 319 000c 5DF8047B 	 ldr r7,[sp],#4
 320              	.LCFI21:
 321              	 .cfi_restore 7
 322              	 .cfi_def_cfa_offset 0
 323 0010 7047     	 bx lr
 324              	.L23:
 325 0012 00BF     	 .align 2
 326              	.L22:
 327 0014 00000000 	 .word failsafeState
 328              	 .cfi_endproc
 329              	.LFE560:
 331              	 .section .text.failsafeIsActive,"ax",%progbits
 332              	 .align 2
 333              	 .global failsafeIsActive
 334              	 .thumb
 335              	 .thumb_func
 337              	failsafeIsActive:
 338              	.LFB561:
 108:../cleanflight/src/main/flight/failsafe.c **** 
 109:../cleanflight/src/main/flight/failsafe.c **** bool failsafeIsActive(void)
 110:../cleanflight/src/main/flight/failsafe.c **** {
 339              	 .loc 3 110 0
 340              	 .cfi_startproc
 341              	 
 342              	 
 343              	 
 344 0000 80B4     	 push {r7}
 345              	.LCFI22:
 346              	 .cfi_def_cfa_offset 4
 347              	 .cfi_offset 7,-4
 348 0002 00AF     	 add r7,sp,#0
 349              	.LCFI23:
 350              	 .cfi_def_cfa_register 7
 111:../cleanflight/src/main/flight/failsafe.c ****     return failsafeState.active;
 351              	 .loc 3 111 0
 352 0004 034B     	 ldr r3,.L26
 353 0006 DB78     	 ldrb r3,[r3,#3]
 112:../cleanflight/src/main/flight/failsafe.c **** }
 354              	 .loc 3 112 0
 355 0008 1846     	 mov r0,r3
 356 000a BD46     	 mov sp,r7
 357              	.LCFI24:
 358              	 .cfi_def_cfa_register 13
 359              	 
 360 000c 5DF8047B 	 ldr r7,[sp],#4
 361              	.LCFI25:
 362              	 .cfi_restore 7
 363              	 .cfi_def_cfa_offset 0
 364 0010 7047     	 bx lr
 365              	.L27:
 366 0012 00BF     	 .align 2
 367              	.L26:
 368 0014 00000000 	 .word failsafeState
 369              	 .cfi_endproc
 370              	.LFE561:
 372              	 .section .text.failsafeStartMonitoring,"ax",%progbits
 373              	 .align 2
 374              	 .global failsafeStartMonitoring
 375              	 .thumb
 376              	 .thumb_func
 378              	failsafeStartMonitoring:
 379              	.LFB562:
 113:../cleanflight/src/main/flight/failsafe.c **** 
 114:../cleanflight/src/main/flight/failsafe.c **** void failsafeStartMonitoring(void)
 115:../cleanflight/src/main/flight/failsafe.c **** {
 380              	 .loc 3 115 0
 381              	 .cfi_startproc
 382              	 
 383              	 
 384              	 
 385 0000 80B4     	 push {r7}
 386              	.LCFI26:
 387              	 .cfi_def_cfa_offset 4
 388              	 .cfi_offset 7,-4
 389 0002 00AF     	 add r7,sp,#0
 390              	.LCFI27:
 391              	 .cfi_def_cfa_register 7
 116:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.monitoring = true;
 392              	 .loc 3 116 0
 393 0004 034B     	 ldr r3,.L29
 394 0006 0122     	 movs r2,#1
 395 0008 9A70     	 strb r2,[r3,#2]
 117:../cleanflight/src/main/flight/failsafe.c **** }
 396              	 .loc 3 117 0
 397 000a BD46     	 mov sp,r7
 398              	.LCFI28:
 399              	 .cfi_def_cfa_register 13
 400              	 
 401 000c 5DF8047B 	 ldr r7,[sp],#4
 402              	.LCFI29:
 403              	 .cfi_restore 7
 404              	 .cfi_def_cfa_offset 0
 405 0010 7047     	 bx lr
 406              	.L30:
 407 0012 00BF     	 .align 2
 408              	.L29:
 409 0014 00000000 	 .word failsafeState
 410              	 .cfi_endproc
 411              	.LFE562:
 413              	 .section .text.failsafeShouldHaveCausedLandingByNow,"ax",%progbits
 414              	 .align 2
 415              	 .thumb
 416              	 .thumb_func
 418              	failsafeShouldHaveCausedLandingByNow:
 419              	.LFB563:
 118:../cleanflight/src/main/flight/failsafe.c **** 
 119:../cleanflight/src/main/flight/failsafe.c **** static bool failsafeShouldHaveCausedLandingByNow(void)
 120:../cleanflight/src/main/flight/failsafe.c **** {
 420              	 .loc 3 120 0
 421              	 .cfi_startproc
 422              	 
 423              	 
 424 0000 80B5     	 push {r7,lr}
 425              	.LCFI30:
 426              	 .cfi_def_cfa_offset 8
 427              	 .cfi_offset 7,-8
 428              	 .cfi_offset 14,-4
 429 0002 00AF     	 add r7,sp,#0
 430              	.LCFI31:
 431              	 .cfi_def_cfa_register 7
 121:../cleanflight/src/main/flight/failsafe.c ****     return (millis() > failsafeState.landingShouldBeFinishedAt);
 432              	 .loc 3 121 0
 433 0004 FFF7FEFF 	 bl millis
 434 0008 0246     	 mov r2,r0
 435 000a 044B     	 ldr r3,.L33
 436 000c 5B69     	 ldr r3,[r3,#20]
 437 000e 9A42     	 cmp r2,r3
 438 0010 8CBF     	 ite hi
 439 0012 0123     	 movhi r3,#1
 440 0014 0023     	 movls r3,#0
 441 0016 DBB2     	 uxtb r3,r3
 122:../cleanflight/src/main/flight/failsafe.c **** }
 442              	 .loc 3 122 0
 443 0018 1846     	 mov r0,r3
 444 001a 80BD     	 pop {r7,pc}
 445              	.L34:
 446              	 .align 2
 447              	.L33:
 448 001c 00000000 	 .word failsafeState
 449              	 .cfi_endproc
 450              	.LFE563:
 452              	 .section .text.failsafeActivate,"ax",%progbits
 453              	 .align 2
 454              	 .thumb
 455              	 .thumb_func
 457              	failsafeActivate:
 458              	.LFB564:
 123:../cleanflight/src/main/flight/failsafe.c **** 
 124:../cleanflight/src/main/flight/failsafe.c **** static void failsafeActivate(void)
 125:../cleanflight/src/main/flight/failsafe.c **** {
 459              	 .loc 3 125 0
 460              	 .cfi_startproc
 461              	 
 462              	 
 463 0000 98B5     	 push {r3,r4,r7,lr}
 464              	.LCFI32:
 465              	 .cfi_def_cfa_offset 16
 466              	 .cfi_offset 3,-16
 467              	 .cfi_offset 4,-12
 468              	 .cfi_offset 7,-8
 469              	 .cfi_offset 14,-4
 470 0002 00AF     	 add r7,sp,#0
 471              	.LCFI33:
 472              	 .cfi_def_cfa_register 7
 126:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.active = true;
 473              	 .loc 3 126 0
 474 0004 114B     	 ldr r3,.L36
 475 0006 0122     	 movs r2,#1
 476 0008 DA70     	 strb r2,[r3,#3]
 127:../cleanflight/src/main/flight/failsafe.c **** 
 128:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.phase = FAILSAFE_LANDING;
 477              	 .loc 3 128 0
 478 000a 104B     	 ldr r3,.L36
 479 000c 0222     	 movs r2,#2
 480 000e 83F82020 	 strb r2,[r3,#32]
 129:../cleanflight/src/main/flight/failsafe.c ****     
 130:../cleanflight/src/main/flight/failsafe.c ****     ENABLE_FLIGHT_MODE(FAILSAFE_MODE);
 481              	 .loc 3 130 0
 482 0012 4FF48060 	 mov r0,#1024
 483 0016 FFF7FEFF 	 bl enableFlightMode
 131:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.landingShouldBeFinishedAt = millis() + failsafeConfig()->failsafe_off_delay * MIL
 484              	 .loc 3 131 0
 485 001a FFF7FEFF 	 bl millis
 486 001e 0446     	 mov r4,r0
 487 0020 FFF7FEFF 	 bl failsafeConfig
 488 0024 0346     	 mov r3,r0
 489 0026 5B79     	 ldrb r3,[r3,#5]
 490 0028 1A46     	 mov r2,r3
 491 002a 6423     	 movs r3,#100
 492 002c 03FB02F3 	 mul r3,r3,r2
 493 0030 2344     	 add r3,r3,r4
 494 0032 064A     	 ldr r2,.L36
 495 0034 5361     	 str r3,[r2,#20]
 132:../cleanflight/src/main/flight/failsafe.c **** 
 133:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.events++;
 496              	 .loc 3 133 0
 497 0036 054B     	 ldr r3,.L36
 498 0038 1B88     	 ldrh r3,[r3]
 499 003a 9BB2     	 uxth r3,r3
 500 003c 9BB2     	 uxth r3,r3
 501 003e 0133     	 adds r3,r3,#1
 502 0040 9BB2     	 uxth r3,r3
 503 0042 9AB2     	 uxth r2,r3
 504 0044 014B     	 ldr r3,.L36
 505 0046 1A80     	 strh r2,[r3]
 134:../cleanflight/src/main/flight/failsafe.c **** }
 506              	 .loc 3 134 0
 507 0048 98BD     	 pop {r3,r4,r7,pc}
 508              	.L37:
 509 004a 00BF     	 .align 2
 510              	.L36:
 511 004c 00000000 	 .word failsafeState
 512              	 .cfi_endproc
 513              	.LFE564:
 515              	 .section .text.failsafeApplyControlInput,"ax",%progbits
 516              	 .align 2
 517              	 .thumb
 518              	 .thumb_func
 520              	failsafeApplyControlInput:
 521              	.LFB565:
 135:../cleanflight/src/main/flight/failsafe.c **** 
 136:../cleanflight/src/main/flight/failsafe.c **** static void failsafeApplyControlInput(void)
 137:../cleanflight/src/main/flight/failsafe.c **** {
 522              	 .loc 3 137 0
 523              	 .cfi_startproc
 524              	 
 525              	 
 526 0000 80B5     	 push {r7,lr}
 527              	.LCFI34:
 528              	 .cfi_def_cfa_offset 8
 529              	 .cfi_offset 7,-8
 530              	 .cfi_offset 14,-4
 531 0002 82B0     	 sub sp,sp,#8
 532              	.LCFI35:
 533              	 .cfi_def_cfa_offset 16
 534 0004 00AF     	 add r7,sp,#0
 535              	.LCFI36:
 536              	 .cfi_def_cfa_register 7
 138:../cleanflight/src/main/flight/failsafe.c ****     if (failsafeConfig()->failsafe_procedure == FAILSAFE_PROCEDURE_GPS_RESCUE) {
 537              	 .loc 3 138 0
 538 0006 FFF7FEFF 	 bl failsafeConfig
 539 000a 0346     	 mov r3,r0
 540 000c DB79     	 ldrb r3,[r3,#7]
 541 000e 022B     	 cmp r3,#2
 542 0010 04D1     	 bne .L39
 139:../cleanflight/src/main/flight/failsafe.c ****         ENABLE_FLIGHT_MODE(GPS_RESCUE_MODE);
 543              	 .loc 3 139 0
 544 0012 4FF40060 	 mov r0,#2048
 545 0016 FFF7FEFF 	 bl enableFlightMode
 140:../cleanflight/src/main/flight/failsafe.c **** 
 141:../cleanflight/src/main/flight/failsafe.c ****         return;
 546              	 .loc 3 141 0
 547 001a 1AE0     	 b .L38
 548              	.L39:
 549              	.LBB2:
 142:../cleanflight/src/main/flight/failsafe.c ****     }
 143:../cleanflight/src/main/flight/failsafe.c **** 
 144:../cleanflight/src/main/flight/failsafe.c ****     for (int i = 0; i < 3; i++) {
 550              	 .loc 3 144 0
 551 001c 0023     	 movs r3,#0
 552 001e 7B60     	 str r3,[r7,#4]
 553 0020 0CE0     	 b .L41
 554              	.L42:
 145:../cleanflight/src/main/flight/failsafe.c ****         rcData[i] = rxConfig()->midrc;
 555              	 .loc 3 145 0 discriminator 3
 556 0022 FFF7FEFF 	 bl rxConfig
 557 0026 0346     	 mov r3,r0
 558 0028 5B8A     	 ldrh r3,[r3,#18]
 559 002a 9BB2     	 uxth r3,r3
 560 002c 99B2     	 uxth r1,r3
 561 002e 0A4A     	 ldr r2,.L43
 562 0030 7B68     	 ldr r3,[r7,#4]
 563 0032 22F81310 	 strh r1,[r2,r3,lsl#1]
 144:../cleanflight/src/main/flight/failsafe.c ****         rcData[i] = rxConfig()->midrc;
 564              	 .loc 3 144 0 discriminator 3
 565 0036 7B68     	 ldr r3,[r7,#4]
 566 0038 0133     	 adds r3,r3,#1
 567 003a 7B60     	 str r3,[r7,#4]
 568              	.L41:
 144:../cleanflight/src/main/flight/failsafe.c ****         rcData[i] = rxConfig()->midrc;
 569              	 .loc 3 144 0 is_stmt 0 discriminator 1
 570 003c 7B68     	 ldr r3,[r7,#4]
 571 003e 022B     	 cmp r3,#2
 572 0040 EFDD     	 ble .L42
 573              	.LBE2:
 146:../cleanflight/src/main/flight/failsafe.c ****     }
 147:../cleanflight/src/main/flight/failsafe.c ****     rcData[THROTTLE] = failsafeConfig()->failsafe_throttle;
 574              	 .loc 3 147 0 is_stmt 1
 575 0042 FFF7FEFF 	 bl failsafeConfig
 576 0046 0346     	 mov r3,r0
 577 0048 1B88     	 ldrh r3,[r3]
 578 004a 9BB2     	 uxth r3,r3
 579 004c 9AB2     	 uxth r2,r3
 580 004e 024B     	 ldr r3,.L43
 581 0050 DA80     	 strh r2,[r3,#6]
 582              	.L38:
 148:../cleanflight/src/main/flight/failsafe.c **** }
 583              	 .loc 3 148 0
 584 0052 0837     	 adds r7,r7,#8
 585              	.LCFI37:
 586              	 .cfi_def_cfa_offset 8
 587 0054 BD46     	 mov sp,r7
 588              	.LCFI38:
 589              	 .cfi_def_cfa_register 13
 590              	 
 591 0056 80BD     	 pop {r7,pc}
 592              	.L44:
 593              	 .align 2
 594              	.L43:
 595 0058 00000000 	 .word rcData
 596              	 .cfi_endproc
 597              	.LFE565:
 599              	 .section .text.failsafeIsReceivingRxData,"ax",%progbits
 600              	 .align 2
 601              	 .global failsafeIsReceivingRxData
 602              	 .thumb
 603              	 .thumb_func
 605              	failsafeIsReceivingRxData:
 606              	.LFB566:
 149:../cleanflight/src/main/flight/failsafe.c **** 
 150:../cleanflight/src/main/flight/failsafe.c **** bool failsafeIsReceivingRxData(void)
 151:../cleanflight/src/main/flight/failsafe.c **** {
 607              	 .loc 3 151 0
 608              	 .cfi_startproc
 609              	 
 610              	 
 611              	 
 612 0000 80B4     	 push {r7}
 613              	.LCFI39:
 614              	 .cfi_def_cfa_offset 4
 615              	 .cfi_offset 7,-4
 616 0002 00AF     	 add r7,sp,#0
 617              	.LCFI40:
 618              	 .cfi_def_cfa_register 7
 152:../cleanflight/src/main/flight/failsafe.c ****     return (failsafeState.rxLinkState == FAILSAFE_RXLINK_UP);
 619              	 .loc 3 152 0
 620 0004 064B     	 ldr r3,.L47
 621 0006 93F82130 	 ldrb r3,[r3,#33]
 622 000a 012B     	 cmp r3,#1
 623 000c 0CBF     	 ite eq
 624 000e 0123     	 moveq r3,#1
 625 0010 0023     	 movne r3,#0
 626 0012 DBB2     	 uxtb r3,r3
 153:../cleanflight/src/main/flight/failsafe.c **** }
 627              	 .loc 3 153 0
 628 0014 1846     	 mov r0,r3
 629 0016 BD46     	 mov sp,r7
 630              	.LCFI41:
 631              	 .cfi_def_cfa_register 13
 632              	 
 633 0018 5DF8047B 	 ldr r7,[sp],#4
 634              	.LCFI42:
 635              	 .cfi_restore 7
 636              	 .cfi_def_cfa_offset 0
 637 001c 7047     	 bx lr
 638              	.L48:
 639 001e 00BF     	 .align 2
 640              	.L47:
 641 0020 00000000 	 .word failsafeState
 642              	 .cfi_endproc
 643              	.LFE566:
 645              	 .section .text.failsafeOnRxSuspend,"ax",%progbits
 646              	 .align 2
 647              	 .global failsafeOnRxSuspend
 648              	 .thumb
 649              	 .thumb_func
 651              	failsafeOnRxSuspend:
 652              	.LFB567:
 154:../cleanflight/src/main/flight/failsafe.c **** 
 155:../cleanflight/src/main/flight/failsafe.c **** void failsafeOnRxSuspend(uint32_t usSuspendPeriod)
 156:../cleanflight/src/main/flight/failsafe.c **** {
 653              	 .loc 3 156 0
 654              	 .cfi_startproc
 655              	 
 656              	 
 657              	 
 658 0000 80B4     	 push {r7}
 659              	.LCFI43:
 660              	 .cfi_def_cfa_offset 4
 661              	 .cfi_offset 7,-4
 662 0002 83B0     	 sub sp,sp,#12
 663              	.LCFI44:
 664              	 .cfi_def_cfa_offset 16
 665 0004 00AF     	 add r7,sp,#0
 666              	.LCFI45:
 667              	 .cfi_def_cfa_register 7
 668 0006 7860     	 str r0,[r7,#4]
 157:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.validRxDataReceivedAt += (usSuspendPeriod / 1000);    // / 1000 to convert micros
 669              	 .loc 3 157 0
 670 0008 074B     	 ldr r3,.L50
 671 000a 9A68     	 ldr r2,[r3,#8]
 672 000c 7B68     	 ldr r3,[r7,#4]
 673 000e 0749     	 ldr r1,.L50+4
 674 0010 A1FB0313 	 umull r1,r3,r1,r3
 675 0014 9B09     	 lsrs r3,r3,#6
 676 0016 1344     	 add r3,r3,r2
 677 0018 034A     	 ldr r2,.L50
 678 001a 9360     	 str r3,[r2,#8]
 158:../cleanflight/src/main/flight/failsafe.c **** }
 679              	 .loc 3 158 0
 680 001c 0C37     	 adds r7,r7,#12
 681              	.LCFI46:
 682              	 .cfi_def_cfa_offset 4
 683 001e BD46     	 mov sp,r7
 684              	.LCFI47:
 685              	 .cfi_def_cfa_register 13
 686              	 
 687 0020 5DF8047B 	 ldr r7,[sp],#4
 688              	.LCFI48:
 689              	 .cfi_restore 7
 690              	 .cfi_def_cfa_offset 0
 691 0024 7047     	 bx lr
 692              	.L51:
 693 0026 00BF     	 .align 2
 694              	.L50:
 695 0028 00000000 	 .word failsafeState
 696 002c D34D6210 	 .word 274877907
 697              	 .cfi_endproc
 698              	.LFE567:
 700              	 .section .text.failsafeOnRxResume,"ax",%progbits
 701              	 .align 2
 702              	 .global failsafeOnRxResume
 703              	 .thumb
 704              	 .thumb_func
 706              	failsafeOnRxResume:
 707              	.LFB568:
 159:../cleanflight/src/main/flight/failsafe.c **** 
 160:../cleanflight/src/main/flight/failsafe.c **** void failsafeOnRxResume(void)
 161:../cleanflight/src/main/flight/failsafe.c **** {
 708              	 .loc 3 161 0
 709              	 .cfi_startproc
 710              	 
 711              	 
 712 0000 80B5     	 push {r7,lr}
 713              	.LCFI49:
 714              	 .cfi_def_cfa_offset 8
 715              	 .cfi_offset 7,-8
 716              	 .cfi_offset 14,-4
 717 0002 00AF     	 add r7,sp,#0
 718              	.LCFI50:
 719              	 .cfi_def_cfa_register 7
 162:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.validRxDataReceivedAt = millis();                     // prevent RX link down tri
 720              	 .loc 3 162 0
 721 0004 FFF7FEFF 	 bl millis
 722 0008 0246     	 mov r2,r0
 723 000a 034B     	 ldr r3,.L53
 724 000c 9A60     	 str r2,[r3,#8]
 163:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.rxLinkState = FAILSAFE_RXLINK_UP;                     // do so while rx link is u
 725              	 .loc 3 163 0
 726 000e 024B     	 ldr r3,.L53
 727 0010 0122     	 movs r2,#1
 728 0012 83F82120 	 strb r2,[r3,#33]
 164:../cleanflight/src/main/flight/failsafe.c **** }
 729              	 .loc 3 164 0
 730 0016 80BD     	 pop {r7,pc}
 731              	.L54:
 732              	 .align 2
 733              	.L53:
 734 0018 00000000 	 .word failsafeState
 735              	 .cfi_endproc
 736              	.LFE568:
 738              	 .section .text.failsafeOnValidDataReceived,"ax",%progbits
 739              	 .align 2
 740              	 .global failsafeOnValidDataReceived
 741              	 .thumb
 742              	 .thumb_func
 744              	failsafeOnValidDataReceived:
 745              	.LFB569:
 165:../cleanflight/src/main/flight/failsafe.c **** 
 166:../cleanflight/src/main/flight/failsafe.c **** void failsafeOnValidDataReceived(void)
 167:../cleanflight/src/main/flight/failsafe.c **** {
 746              	 .loc 3 167 0
 747              	 .cfi_startproc
 748              	 
 749              	 
 750 0000 80B5     	 push {r7,lr}
 751              	.LCFI51:
 752              	 .cfi_def_cfa_offset 8
 753              	 .cfi_offset 7,-8
 754              	 .cfi_offset 14,-4
 755 0002 00AF     	 add r7,sp,#0
 756              	.LCFI52:
 757              	 .cfi_def_cfa_register 7
 168:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.validRxDataReceivedAt = millis();
 758              	 .loc 3 168 0
 759 0004 FFF7FEFF 	 bl millis
 760 0008 0246     	 mov r2,r0
 761 000a 084B     	 ldr r3,.L57
 762 000c 9A60     	 str r2,[r3,#8]
 169:../cleanflight/src/main/flight/failsafe.c ****     if ((failsafeState.validRxDataReceivedAt - failsafeState.validRxDataFailedAt) > PERIOD_RXDATA_R
 763              	 .loc 3 169 0
 764 000e 074B     	 ldr r3,.L57
 765 0010 9A68     	 ldr r2,[r3,#8]
 766 0012 064B     	 ldr r3,.L57
 767 0014 DB68     	 ldr r3,[r3,#12]
 768 0016 D31A     	 subs r3,r2,r3
 769 0018 C82B     	 cmp r3,#200
 770 001a 06D9     	 bls .L55
 170:../cleanflight/src/main/flight/failsafe.c ****         failsafeState.rxLinkState = FAILSAFE_RXLINK_UP;
 771              	 .loc 3 170 0
 772 001c 034B     	 ldr r3,.L57
 773 001e 0122     	 movs r2,#1
 774 0020 83F82120 	 strb r2,[r3,#33]
 171:../cleanflight/src/main/flight/failsafe.c ****         unsetArmingDisabled(ARMING_DISABLED_RX_FAILSAFE);
 775              	 .loc 3 171 0
 776 0024 0420     	 movs r0,#4
 777 0026 FFF7FEFF 	 bl unsetArmingDisabled
 778              	.L55:
 172:../cleanflight/src/main/flight/failsafe.c ****     }
 173:../cleanflight/src/main/flight/failsafe.c **** }
 779              	 .loc 3 173 0
 780 002a 80BD     	 pop {r7,pc}
 781              	.L58:
 782              	 .align 2
 783              	.L57:
 784 002c 00000000 	 .word failsafeState
 785              	 .cfi_endproc
 786              	.LFE569:
 788              	 .section .text.failsafeOnValidDataFailed,"ax",%progbits
 789              	 .align 2
 790              	 .global failsafeOnValidDataFailed
 791              	 .thumb
 792              	 .thumb_func
 794              	failsafeOnValidDataFailed:
 795              	.LFB570:
 174:../cleanflight/src/main/flight/failsafe.c **** 
 175:../cleanflight/src/main/flight/failsafe.c **** void failsafeOnValidDataFailed(void)
 176:../cleanflight/src/main/flight/failsafe.c **** {
 796              	 .loc 3 176 0
 797              	 .cfi_startproc
 798              	 
 799              	 
 800 0000 80B5     	 push {r7,lr}
 801              	.LCFI53:
 802              	 .cfi_def_cfa_offset 8
 803              	 .cfi_offset 7,-8
 804              	 .cfi_offset 14,-4
 805 0002 00AF     	 add r7,sp,#0
 806              	.LCFI54:
 807              	 .cfi_def_cfa_register 7
 177:../cleanflight/src/main/flight/failsafe.c ****     setArmingDisabled(ARMING_DISABLED_RX_FAILSAFE); // To prevent arming with no RX link
 808              	 .loc 3 177 0
 809 0004 0420     	 movs r0,#4
 810 0006 FFF7FEFF 	 bl setArmingDisabled
 178:../cleanflight/src/main/flight/failsafe.c ****     failsafeState.validRxDataFailedAt = millis();
 811              	 .loc 3 178 0
 812 000a FFF7FEFF 	 bl millis
 813 000e 0246     	 mov r2,r0
 814 0010 074B     	 ldr r3,.L61
 815 0012 DA60     	 str r2,[r3,#12]
 179:../cleanflight/src/main/flight/failsafe.c ****     if ((failsafeState.validRxDataFailedAt - failsafeState.validRxDataReceivedAt) > failsafeState.r
 816              	 .loc 3 179 0
 817 0014 064B     	 ldr r3,.L61
 818 0016 DA68     	 ldr r2,[r3,#12]
 819 0018 054B     	 ldr r3,.L61
 820 001a 9B68     	 ldr r3,[r3,#8]
 821 001c D21A     	 subs r2,r2,r3
 822 001e 044B     	 ldr r3,.L61
 823 0020 5B68     	 ldr r3,[r3,#4]
 824 0022 9A42     	 cmp r2,r3
 825 0024 03D9     	 bls .L59
 180:../cleanflight/src/main/flight/failsafe.c ****         failsafeState.rxLinkState = FAILSAFE_RXLINK_DOWN;
 826              	 .loc 3 180 0
 827 0026 024B     	 ldr r3,.L61
 828 0028 0022     	 movs r2,#0
 829 002a 83F82120 	 strb r2,[r3,#33]
 830              	.L59:
 181:../cleanflight/src/main/flight/failsafe.c ****     }
 182:../cleanflight/src/main/flight/failsafe.c **** }
 831              	 .loc 3 182 0
 832 002e 80BD     	 pop {r7,pc}
 833              	.L62:
 834              	 .align 2
 835              	.L61:
 836 0030 00000000 	 .word failsafeState
 837              	 .cfi_endproc
 838              	.LFE570:
 840              	 .section .text.failsafeUpdateState,"ax",%progbits
 841              	 .align 2
 842              	 .global failsafeUpdateState
 843              	 .thumb
 844              	 .thumb_func
 846              	failsafeUpdateState:
 847              	.LFB571:
 183:../cleanflight/src/main/flight/failsafe.c **** 
 184:../cleanflight/src/main/flight/failsafe.c **** void failsafeUpdateState(void)
 185:../cleanflight/src/main/flight/failsafe.c **** {
 848              	 .loc 3 185 0
 849              	 .cfi_startproc
 850              	 
 851              	 
 852 0000 90B5     	 push {r4,r7,lr}
 853              	.LCFI55:
 854              	 .cfi_def_cfa_offset 12
 855              	 .cfi_offset 4,-12
 856              	 .cfi_offset 7,-8
 857              	 .cfi_offset 14,-4
 858 0002 83B0     	 sub sp,sp,#12
 859              	.LCFI56:
 860              	 .cfi_def_cfa_offset 24
 861 0004 00AF     	 add r7,sp,#0
 862              	.LCFI57:
 863              	 .cfi_def_cfa_register 7
 186:../cleanflight/src/main/flight/failsafe.c ****     if (!failsafeIsMonitoring()) {
 864              	 .loc 3 186 0
 865 0006 FFF7FEFF 	 bl failsafeIsMonitoring
 866 000a 0346     	 mov r3,r0
 867 000c 83F00103 	 eor r3,r3,#1
 868 0010 DBB2     	 uxtb r3,r3
 869 0012 002B     	 cmp r3,#0
 870 0014 00D0     	 beq .L64
 187:../cleanflight/src/main/flight/failsafe.c ****         return;
 871              	 .loc 3 187 0
 872 0016 8BE1     	 b .L63
 873              	.L64:
 188:../cleanflight/src/main/flight/failsafe.c ****     }
 189:../cleanflight/src/main/flight/failsafe.c **** 
 190:../cleanflight/src/main/flight/failsafe.c ****     bool receivingRxData = failsafeIsReceivingRxData();
 874              	 .loc 3 190 0
 875 0018 FFF7FEFF 	 bl failsafeIsReceivingRxData
 876 001c 0346     	 mov r3,r0
 877 001e FB71     	 strb r3,[r7,#7]
 191:../cleanflight/src/main/flight/failsafe.c ****     bool armed = ARMING_FLAG(ARMED);
 878              	 .loc 3 191 0
 879 0020 BB4B     	 ldr r3,.L104
 880 0022 1B78     	 ldrb r3,[r3]
 881 0024 03F00103 	 and r3,r3,#1
 882 0028 002B     	 cmp r3,#0
 883 002a 14BF     	 ite ne
 884 002c 0123     	 movne r3,#1
 885 002e 0023     	 moveq r3,#0
 886 0030 3B71     	 strb r3,[r7,#4]
 192:../cleanflight/src/main/flight/failsafe.c ****     bool failsafeSwitchIsOn = IS_RC_MODE_ACTIVE(BOXFAILSAFE);
 887              	 .loc 3 192 0
 888 0032 0920     	 movs r0,#9
 889 0034 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 890 0038 0346     	 mov r3,r0
 891 003a FB70     	 strb r3,[r7,#3]
 193:../cleanflight/src/main/flight/failsafe.c ****     beeperMode_e beeperMode = BEEPER_SILENCE;
 892              	 .loc 3 193 0
 893 003c 0023     	 movs r3,#0
 894 003e BB71     	 strb r3,[r7,#6]
 194:../cleanflight/src/main/flight/failsafe.c **** 
 195:../cleanflight/src/main/flight/failsafe.c ****     if (failsafeSwitchIsOn && failsafeConfig()->failsafe_switch_mode == FAILSAFE_SWITCH_MODE_STAGE2
 895              	 .loc 3 195 0
 896 0040 FB78     	 ldrb r3,[r7,#3]
 897 0042 002B     	 cmp r3,#0
 898 0044 07D0     	 beq .L66
 899              	 .loc 3 195 0 is_stmt 0 discriminator 1
 900 0046 FFF7FEFF 	 bl failsafeConfig
 901 004a 0346     	 mov r3,r0
 902 004c 9B79     	 ldrb r3,[r3,#6]
 903 004e 022B     	 cmp r3,#2
 904 0050 01D1     	 bne .L66
 196:../cleanflight/src/main/flight/failsafe.c ****         receivingRxData = false; // force Stage2
 905              	 .loc 3 196 0 is_stmt 1
 906 0052 0023     	 movs r3,#0
 907 0054 FB71     	 strb r3,[r7,#7]
 908              	.L66:
 197:../cleanflight/src/main/flight/failsafe.c ****     }
 198:../cleanflight/src/main/flight/failsafe.c **** 
 199:../cleanflight/src/main/flight/failsafe.c ****     // Beep RX lost only if we are not seeing data and we have been armed earlier
 200:../cleanflight/src/main/flight/failsafe.c ****     if (!receivingRxData && ARMING_FLAG(WAS_EVER_ARMED)) {
 909              	 .loc 3 200 0
 910 0056 FB79     	 ldrb r3,[r7,#7]
 911 0058 83F00103 	 eor r3,r3,#1
 912 005c DBB2     	 uxtb r3,r3
 913 005e 002B     	 cmp r3,#0
 914 0060 07D0     	 beq .L67
 915              	 .loc 3 200 0 is_stmt 0 discriminator 1
 916 0062 AB4B     	 ldr r3,.L104
 917 0064 1B78     	 ldrb r3,[r3]
 918 0066 03F00203 	 and r3,r3,#2
 919 006a 002B     	 cmp r3,#0
 920 006c 01D0     	 beq .L67
 201:../cleanflight/src/main/flight/failsafe.c ****         beeperMode = BEEPER_RX_LOST;
 921              	 .loc 3 201 0 is_stmt 1
 922 006e 0223     	 movs r3,#2
 923 0070 BB71     	 strb r3,[r7,#6]
 924              	.L67:
 202:../cleanflight/src/main/flight/failsafe.c ****     }
 203:../cleanflight/src/main/flight/failsafe.c **** 
 204:../cleanflight/src/main/flight/failsafe.c ****     bool reprocessState;
 205:../cleanflight/src/main/flight/failsafe.c **** 
 206:../cleanflight/src/main/flight/failsafe.c ****     do {
 207:../cleanflight/src/main/flight/failsafe.c ****         reprocessState = false;
 925              	 .loc 3 207 0
 926 0072 0023     	 movs r3,#0
 927 0074 7B71     	 strb r3,[r7,#5]
 208:../cleanflight/src/main/flight/failsafe.c **** 
 209:../cleanflight/src/main/flight/failsafe.c ****         switch (failsafeState.phase) {
 928              	 .loc 3 209 0
 929 0076 A74B     	 ldr r3,.L104+4
 930 0078 93F82030 	 ldrb r3,[r3,#32]
 931 007c 062B     	 cmp r3,#6
 932 007e 00F24B81 	 bhi .L103
 933 0082 01A2     	 adr r2,.L70
 934 0084 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 935              	 .p2align 2
 936              	.L70:
 937 0088 A5000000 	 .word .L69+1
 938 008c 6B010000 	 .word .L71+1
 939 0090 C7010000 	 .word .L72+1
 940 0094 57020000 	 .word .L73+1
 941 0098 7F020000 	 .word .L74+1
 942 009c D7020000 	 .word .L75+1
 943 00a0 1F020000 	 .word .L76+1
 944              	 .p2align 1
 945              	.L69:
 210:../cleanflight/src/main/flight/failsafe.c ****             case FAILSAFE_IDLE:
 211:../cleanflight/src/main/flight/failsafe.c ****                 if (armed) {
 946              	 .loc 3 211 0
 947 00a4 3B79     	 ldrb r3,[r7,#4]
 948 00a6 002B     	 cmp r3,#0
 949 00a8 4ED0     	 beq .L77
 212:../cleanflight/src/main/flight/failsafe.c ****                     // Track throttle command below minimum time
 213:../cleanflight/src/main/flight/failsafe.c ****                     if (THROTTLE_HIGH == calculateThrottleStatus()) {
 950              	 .loc 3 213 0
 951 00aa FFF7FEFF 	 bl calculateThrottleStatus
 952 00ae 0346     	 mov r3,r0
 953 00b0 012B     	 cmp r3,#1
 954 00b2 0ED1     	 bne .L78
 214:../cleanflight/src/main/flight/failsafe.c ****                         failsafeState.throttleLowPeriod = millis() + failsafeConfig()->failsafe_thr
 955              	 .loc 3 214 0
 956 00b4 FFF7FEFF 	 bl millis
 957 00b8 0446     	 mov r4,r0
 958 00ba FFF7FEFF 	 bl failsafeConfig
 959 00be 0346     	 mov r3,r0
 960 00c0 5B88     	 ldrh r3,[r3,#2]
 961 00c2 9BB2     	 uxth r3,r3
 962 00c4 1A46     	 mov r2,r3
 963 00c6 6423     	 movs r3,#100
 964 00c8 03FB02F3 	 mul r3,r3,r2
 965 00cc 2344     	 add r3,r3,r4
 966 00ce 914A     	 ldr r2,.L104+4
 967 00d0 1361     	 str r3,[r2,#16]
 968              	.L78:
 215:../cleanflight/src/main/flight/failsafe.c ****                     }
 216:../cleanflight/src/main/flight/failsafe.c ****                     // Kill switch logic (must be independent of receivingRxData to skip PERIOD_RXD
 217:../cleanflight/src/main/flight/failsafe.c ****                     if (failsafeSwitchIsOn && failsafeConfig()->failsafe_switch_mode == FAILSAFE_SW
 969              	 .loc 3 217 0
 970 00d2 FB78     	 ldrb r3,[r7,#3]
 971 00d4 002B     	 cmp r3,#0
 972 00d6 12D0     	 beq .L79
 973              	 .loc 3 217 0 is_stmt 0 discriminator 1
 974 00d8 FFF7FEFF 	 bl failsafeConfig
 975 00dc 0346     	 mov r3,r0
 976 00de 9B79     	 ldrb r3,[r3,#6]
 977 00e0 012B     	 cmp r3,#1
 978 00e2 0CD1     	 bne .L79
 218:../cleanflight/src/main/flight/failsafe.c ****                         // KillswitchEvent: failsafe switch is configured as KILL switch and is swi
 219:../cleanflight/src/main/flight/failsafe.c ****                         failsafeActivate();
 979              	 .loc 3 219 0 is_stmt 1
 980 00e4 FFF7FEFF 	 bl failsafeActivate
 220:../cleanflight/src/main/flight/failsafe.c ****                         failsafeState.phase = FAILSAFE_LANDED;      // skip auto-landing procedure
 981              	 .loc 3 220 0
 982 00e8 8A4B     	 ldr r3,.L104+4
 983 00ea 0322     	 movs r2,#3
 984 00ec 83F82020 	 strb r2,[r3,#32]
 221:../cleanflight/src/main/flight/failsafe.c ****                         failsafeState.receivingRxDataPeriodPreset = PERIOD_OF_1_SECONDS;    // requ
 985              	 .loc 3 221 0
 986 00f0 884B     	 ldr r3,.L104+4
 987 00f2 4FF47A72 	 mov r2,#1000
 988 00f6 DA61     	 str r2,[r3,#28]
 222:../cleanflight/src/main/flight/failsafe.c ****                         reprocessState = true;
 989              	 .loc 3 222 0
 990 00f8 0123     	 movs r3,#1
 991 00fa 7B71     	 strb r3,[r7,#5]
 992 00fc 34E0     	 b .L83
 993              	.L79:
 223:../cleanflight/src/main/flight/failsafe.c ****                     } else if (!receivingRxData) {
 994              	 .loc 3 223 0
 995 00fe FB79     	 ldrb r3,[r7,#7]
 996 0100 83F00103 	 eor r3,r3,#1
 997 0104 DBB2     	 uxtb r3,r3
 998 0106 002B     	 cmp r3,#0
 999 0108 2ED0     	 beq .L83
 224:../cleanflight/src/main/flight/failsafe.c ****                         if (millis() > failsafeState.throttleLowPeriod && failsafeConfig()->failsaf
 1000              	 .loc 3 224 0
 1001 010a FFF7FEFF 	 bl millis
 1002 010e 0246     	 mov r2,r0
 1003 0110 804B     	 ldr r3,.L104+4
 1004 0112 1B69     	 ldr r3,[r3,#16]
 1005 0114 9A42     	 cmp r2,r3
 1006 0116 10D9     	 bls .L81
 1007              	 .loc 3 224 0 is_stmt 0 discriminator 1
 1008 0118 FFF7FEFF 	 bl failsafeConfig
 1009 011c 0346     	 mov r3,r0
 1010 011e DB79     	 ldrb r3,[r3,#7]
 1011 0120 022B     	 cmp r3,#2
 1012 0122 0AD0     	 beq .L81
 225:../cleanflight/src/main/flight/failsafe.c ****                             // JustDisarm: throttle was LOW for at least 'failsafe_throttle_low_del
 226:../cleanflight/src/main/flight/failsafe.c ****                             failsafeActivate();
 1013              	 .loc 3 226 0 is_stmt 1
 1014 0124 FFF7FEFF 	 bl failsafeActivate
 227:../cleanflight/src/main/flight/failsafe.c ****                             failsafeState.phase = FAILSAFE_LANDED;      // skip auto-landing proced
 1015              	 .loc 3 227 0
 1016 0128 7A4B     	 ldr r3,.L104+4
 1017 012a 0322     	 movs r2,#3
 1018 012c 83F82020 	 strb r2,[r3,#32]
 228:../cleanflight/src/main/flight/failsafe.c ****                             failsafeState.receivingRxDataPeriodPreset = PERIOD_OF_3_SECONDS; // req
 1019              	 .loc 3 228 0
 1020 0130 784B     	 ldr r3,.L104+4
 1021 0132 40F6B832 	 movw r2,#3000
 1022 0136 DA61     	 str r2,[r3,#28]
 1023 0138 03E0     	 b .L82
 1024              	.L81:
 229:../cleanflight/src/main/flight/failsafe.c ****                         } else {
 230:../cleanflight/src/main/flight/failsafe.c ****                             failsafeState.phase = FAILSAFE_RX_LOSS_DETECTED;
 1025              	 .loc 3 230 0
 1026 013a 764B     	 ldr r3,.L104+4
 1027 013c 0122     	 movs r2,#1
 1028 013e 83F82020 	 strb r2,[r3,#32]
 1029              	.L82:
 231:../cleanflight/src/main/flight/failsafe.c ****                         }
 232:../cleanflight/src/main/flight/failsafe.c ****                         reprocessState = true;
 1030              	 .loc 3 232 0
 1031 0142 0123     	 movs r3,#1
 1032 0144 7B71     	 strb r3,[r7,#5]
 1033 0146 0FE0     	 b .L83
 1034              	.L77:
 233:../cleanflight/src/main/flight/failsafe.c ****                     }
 234:../cleanflight/src/main/flight/failsafe.c ****                 } else {
 235:../cleanflight/src/main/flight/failsafe.c ****                     // When NOT armed, show rxLinkState of failsafe switch in GUI (failsafe mode)
 236:../cleanflight/src/main/flight/failsafe.c ****                     if (failsafeSwitchIsOn) {
 1035              	 .loc 3 236 0
 1036 0148 FB78     	 ldrb r3,[r7,#3]
 1037 014a 002B     	 cmp r3,#0
 1038 014c 04D0     	 beq .L84
 237:../cleanflight/src/main/flight/failsafe.c ****                         ENABLE_FLIGHT_MODE(FAILSAFE_MODE);
 1039              	 .loc 3 237 0
 1040 014e 4FF48060 	 mov r0,#1024
 1041 0152 FFF7FEFF 	 bl enableFlightMode
 1042 0156 03E0     	 b .L85
 1043              	.L84:
 238:../cleanflight/src/main/flight/failsafe.c ****                     } else {
 239:../cleanflight/src/main/flight/failsafe.c ****                         DISABLE_FLIGHT_MODE(FAILSAFE_MODE);
 1044              	 .loc 3 239 0
 1045 0158 4FF48060 	 mov r0,#1024
 1046 015c FFF7FEFF 	 bl disableFlightMode
 1047              	.L85:
 240:../cleanflight/src/main/flight/failsafe.c ****                     }
 241:../cleanflight/src/main/flight/failsafe.c ****                     // Throttle low period expired (= low long enough for JustDisarm)
 242:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.throttleLowPeriod = 0;
 1048              	 .loc 3 242 0
 1049 0160 6C4B     	 ldr r3,.L104+4
 1050 0162 0022     	 movs r2,#0
 1051 0164 1A61     	 str r2,[r3,#16]
 243:../cleanflight/src/main/flight/failsafe.c ****                 }
 244:../cleanflight/src/main/flight/failsafe.c ****                 break;
 1052              	 .loc 3 244 0
 1053 0166 D8E0     	 b .L86
 1054              	.L83:
 1055              	 .loc 3 244 0 is_stmt 0 discriminator 1
 1056 0168 D7E0     	 b .L86
 1057              	.L71:
 245:../cleanflight/src/main/flight/failsafe.c **** 
 246:../cleanflight/src/main/flight/failsafe.c ****             case FAILSAFE_RX_LOSS_DETECTED:
 247:../cleanflight/src/main/flight/failsafe.c ****                 if (receivingRxData) {
 1058              	 .loc 3 247 0 is_stmt 1
 1059 016a FB79     	 ldrb r3,[r7,#7]
 1060 016c 002B     	 cmp r3,#0
 1061 016e 04D0     	 beq .L87
 248:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.phase = FAILSAFE_RX_LOSS_RECOVERED;
 1062              	 .loc 3 248 0
 1063 0170 684B     	 ldr r3,.L104+4
 1064 0172 0522     	 movs r2,#5
 1065 0174 83F82020 	 strb r2,[r3,#32]
 1066 0178 22E0     	 b .L88
 1067              	.L87:
 249:../cleanflight/src/main/flight/failsafe.c ****                 } else {
 250:../cleanflight/src/main/flight/failsafe.c ****                     switch (failsafeConfig()->failsafe_procedure) {
 1068              	 .loc 3 250 0
 1069 017a FFF7FEFF 	 bl failsafeConfig
 1070 017e 0346     	 mov r3,r0
 1071 0180 DB79     	 ldrb r3,[r3,#7]
 1072 0182 012B     	 cmp r3,#1
 1073 0184 06D0     	 beq .L89
 1074 0186 022B     	 cmp r3,#2
 1075 0188 0FD0     	 beq .L90
 1076 018a 002B     	 cmp r3,#0
 1077 018c 18D1     	 bne .L88
 251:../cleanflight/src/main/flight/failsafe.c ****                         case FAILSAFE_PROCEDURE_AUTO_LANDING:
 252:../cleanflight/src/main/flight/failsafe.c ****                             // Stabilize, and set Throttle to specified level
 253:../cleanflight/src/main/flight/failsafe.c ****                             failsafeActivate();
 1078              	 .loc 3 253 0
 1079 018e FFF7FEFF 	 bl failsafeActivate
 254:../cleanflight/src/main/flight/failsafe.c ****                             break;
 1080              	 .loc 3 254 0
 1081 0192 15E0     	 b .L88
 1082              	.L89:
 255:../cleanflight/src/main/flight/failsafe.c **** 
 256:../cleanflight/src/main/flight/failsafe.c ****                         case FAILSAFE_PROCEDURE_DROP_IT:
 257:../cleanflight/src/main/flight/failsafe.c ****                             // Drop the craft
 258:../cleanflight/src/main/flight/failsafe.c ****                             failsafeActivate();
 1083              	 .loc 3 258 0
 1084 0194 FFF7FEFF 	 bl failsafeActivate
 259:../cleanflight/src/main/flight/failsafe.c ****                             failsafeState.phase = FAILSAFE_LANDED;      // skip auto-landing proced
 1085              	 .loc 3 259 0
 1086 0198 5E4B     	 ldr r3,.L104+4
 1087 019a 0322     	 movs r2,#3
 1088 019c 83F82020 	 strb r2,[r3,#32]
 260:../cleanflight/src/main/flight/failsafe.c ****                             failsafeState.receivingRxDataPeriodPreset = PERIOD_OF_3_SECONDS; // req
 1089              	 .loc 3 260 0
 1090 01a0 5C4B     	 ldr r3,.L104+4
 1091 01a2 40F6B832 	 movw r2,#3000
 1092 01a6 DA61     	 str r2,[r3,#28]
 261:../cleanflight/src/main/flight/failsafe.c ****                             break;
 1093              	 .loc 3 261 0
 1094 01a8 0AE0     	 b .L88
 1095              	.L90:
 262:../cleanflight/src/main/flight/failsafe.c ****                         case FAILSAFE_PROCEDURE_GPS_RESCUE:
 263:../cleanflight/src/main/flight/failsafe.c ****                             failsafeActivate();
 1096              	 .loc 3 263 0
 1097 01aa FFF7FEFF 	 bl failsafeActivate
 264:../cleanflight/src/main/flight/failsafe.c ****                             failsafeState.phase = FAILSAFE_GPS_RESCUE;
 1098              	 .loc 3 264 0
 1099 01ae 594B     	 ldr r3,.L104+4
 1100 01b0 0622     	 movs r2,#6
 1101 01b2 83F82020 	 strb r2,[r3,#32]
 265:../cleanflight/src/main/flight/failsafe.c ****                             failsafeState.receivingRxDataPeriodPreset = PERIOD_OF_3_SECONDS;
 1102              	 .loc 3 265 0
 1103 01b6 574B     	 ldr r3,.L104+4
 1104 01b8 40F6B832 	 movw r2,#3000
 1105 01bc DA61     	 str r2,[r3,#28]
 266:../cleanflight/src/main/flight/failsafe.c ****                             break;
 1106              	 .loc 3 266 0
 1107 01be 00BF     	 nop
 1108              	.L88:
 267:../cleanflight/src/main/flight/failsafe.c ****                     }
 268:../cleanflight/src/main/flight/failsafe.c ****                 }
 269:../cleanflight/src/main/flight/failsafe.c ****                 reprocessState = true;
 1109              	 .loc 3 269 0
 1110 01c0 0123     	 movs r3,#1
 1111 01c2 7B71     	 strb r3,[r7,#5]
 270:../cleanflight/src/main/flight/failsafe.c ****                 break;
 1112              	 .loc 3 270 0
 1113 01c4 A9E0     	 b .L86
 1114              	.L72:
 271:../cleanflight/src/main/flight/failsafe.c **** 
 272:../cleanflight/src/main/flight/failsafe.c ****             case FAILSAFE_LANDING:
 273:../cleanflight/src/main/flight/failsafe.c ****                 if (receivingRxData) {
 1115              	 .loc 3 273 0
 1116 01c6 FB79     	 ldrb r3,[r7,#7]
 1117 01c8 002B     	 cmp r3,#0
 1118 01ca 05D0     	 beq .L92
 274:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.phase = FAILSAFE_RX_LOSS_RECOVERED;
 1119              	 .loc 3 274 0
 1120 01cc 514B     	 ldr r3,.L104+4
 1121 01ce 0522     	 movs r2,#5
 1122 01d0 83F82020 	 strb r2,[r3,#32]
 275:../cleanflight/src/main/flight/failsafe.c ****                     reprocessState = true;
 1123              	 .loc 3 275 0
 1124 01d4 0123     	 movs r3,#1
 1125 01d6 7B71     	 strb r3,[r7,#5]
 1126              	.L92:
 276:../cleanflight/src/main/flight/failsafe.c ****                 }
 277:../cleanflight/src/main/flight/failsafe.c ****                 if (armed) {
 1127              	 .loc 3 277 0
 1128 01d8 3B79     	 ldrb r3,[r7,#4]
 1129 01da 002B     	 cmp r3,#0
 1130 01dc 03D0     	 beq .L93
 278:../cleanflight/src/main/flight/failsafe.c ****                     failsafeApplyControlInput();
 1131              	 .loc 3 278 0
 1132 01de FFF7FEFF 	 bl failsafeApplyControlInput
 279:../cleanflight/src/main/flight/failsafe.c ****                     beeperMode = BEEPER_RX_LOST_LANDING;
 1133              	 .loc 3 279 0
 1134 01e2 0323     	 movs r3,#3
 1135 01e4 BB71     	 strb r3,[r7,#6]
 1136              	.L93:
 280:../cleanflight/src/main/flight/failsafe.c ****                 }
 281:../cleanflight/src/main/flight/failsafe.c ****                 if (failsafeShouldHaveCausedLandingByNow() || crashRecoveryModeActive() || !armed) 
 1137              	 .loc 3 281 0
 1138 01e6 FFF7FEFF 	 bl failsafeShouldHaveCausedLandingByNow
 1139 01ea 0346     	 mov r3,r0
 1140 01ec 002B     	 cmp r3,#0
 1141 01ee 0AD1     	 bne .L94
 1142              	 .loc 3 281 0 is_stmt 0 discriminator 1
 1143 01f0 FFF7FEFF 	 bl crashRecoveryModeActive
 1144 01f4 0346     	 mov r3,r0
 1145 01f6 002B     	 cmp r3,#0
 1146 01f8 05D1     	 bne .L94
 1147              	 .loc 3 281 0 discriminator 2
 1148 01fa 3B79     	 ldrb r3,[r7,#4]
 1149 01fc 83F00103 	 eor r3,r3,#1
 1150 0200 DBB2     	 uxtb r3,r3
 1151 0202 002B     	 cmp r3,#0
 1152 0204 0AD0     	 beq .L95
 1153              	.L94:
 282:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.receivingRxDataPeriodPreset = PERIOD_OF_30_SECONDS; // require 30
 1154              	 .loc 3 282 0 is_stmt 1
 1155 0206 434B     	 ldr r3,.L104+4
 1156 0208 47F23052 	 movw r2,#30000
 1157 020c DA61     	 str r2,[r3,#28]
 283:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.phase = FAILSAFE_LANDED;
 1158              	 .loc 3 283 0
 1159 020e 414B     	 ldr r3,.L104+4
 1160 0210 0322     	 movs r2,#3
 1161 0212 83F82020 	 strb r2,[r3,#32]
 284:../cleanflight/src/main/flight/failsafe.c ****                     reprocessState = true;
 1162              	 .loc 3 284 0
 1163 0216 0123     	 movs r3,#1
 1164 0218 7B71     	 strb r3,[r7,#5]
 285:../cleanflight/src/main/flight/failsafe.c ****                 }
 286:../cleanflight/src/main/flight/failsafe.c ****                 break;
 1165              	 .loc 3 286 0
 1166 021a 7EE0     	 b .L86
 1167              	.L95:
 1168 021c 7DE0     	 b .L86
 1169              	.L76:
 287:../cleanflight/src/main/flight/failsafe.c ****             case FAILSAFE_GPS_RESCUE:
 288:../cleanflight/src/main/flight/failsafe.c ****                 if (receivingRxData) {
 1170              	 .loc 3 288 0
 1171 021e FB79     	 ldrb r3,[r7,#7]
 1172 0220 002B     	 cmp r3,#0
 1173 0222 05D0     	 beq .L96
 289:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.phase = FAILSAFE_RX_LOSS_RECOVERED;
 1174              	 .loc 3 289 0
 1175 0224 3B4B     	 ldr r3,.L104+4
 1176 0226 0522     	 movs r2,#5
 1177 0228 83F82020 	 strb r2,[r3,#32]
 290:../cleanflight/src/main/flight/failsafe.c ****                     reprocessState = true;
 1178              	 .loc 3 290 0
 1179 022c 0123     	 movs r3,#1
 1180 022e 7B71     	 strb r3,[r7,#5]
 1181              	.L96:
 291:../cleanflight/src/main/flight/failsafe.c ****                 }
 292:../cleanflight/src/main/flight/failsafe.c ****                 if (armed) {
 1182              	 .loc 3 292 0
 1183 0230 3B79     	 ldrb r3,[r7,#4]
 1184 0232 002B     	 cmp r3,#0
 1185 0234 04D0     	 beq .L97
 293:../cleanflight/src/main/flight/failsafe.c ****                     failsafeApplyControlInput();
 1186              	 .loc 3 293 0
 1187 0236 FFF7FEFF 	 bl failsafeApplyControlInput
 294:../cleanflight/src/main/flight/failsafe.c ****                     beeperMode = BEEPER_RX_LOST_LANDING;
 1188              	 .loc 3 294 0
 1189 023a 0323     	 movs r3,#3
 1190 023c BB71     	 strb r3,[r7,#6]
 295:../cleanflight/src/main/flight/failsafe.c ****                 } else {
 296:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.receivingRxDataPeriodPreset = PERIOD_OF_30_SECONDS; // require 30
 297:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.phase = FAILSAFE_LANDED;
 298:../cleanflight/src/main/flight/failsafe.c ****                     reprocessState = true;
 299:../cleanflight/src/main/flight/failsafe.c ****                 }
 300:../cleanflight/src/main/flight/failsafe.c ****                 break;
 1191              	 .loc 3 300 0
 1192 023e 6CE0     	 b .L86
 1193              	.L97:
 296:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.phase = FAILSAFE_LANDED;
 1194              	 .loc 3 296 0
 1195 0240 344B     	 ldr r3,.L104+4
 1196 0242 47F23052 	 movw r2,#30000
 1197 0246 DA61     	 str r2,[r3,#28]
 297:../cleanflight/src/main/flight/failsafe.c ****                     reprocessState = true;
 1198              	 .loc 3 297 0
 1199 0248 324B     	 ldr r3,.L104+4
 1200 024a 0322     	 movs r2,#3
 1201 024c 83F82020 	 strb r2,[r3,#32]
 298:../cleanflight/src/main/flight/failsafe.c ****                 }
 1202              	 .loc 3 298 0
 1203 0250 0123     	 movs r3,#1
 1204 0252 7B71     	 strb r3,[r7,#5]
 1205              	 .loc 3 300 0
 1206 0254 61E0     	 b .L86
 1207              	.L73:
 301:../cleanflight/src/main/flight/failsafe.c ****             case FAILSAFE_LANDED:
 302:../cleanflight/src/main/flight/failsafe.c ****                 setArmingDisabled(ARMING_DISABLED_FAILSAFE); // To prevent accidently rearming by a
 1208              	 .loc 3 302 0
 1209 0256 0220     	 movs r0,#2
 1210 0258 FFF7FEFF 	 bl setArmingDisabled
 303:../cleanflight/src/main/flight/failsafe.c ****                 disarm();
 1211              	 .loc 3 303 0
 1212 025c FFF7FEFF 	 bl disarm
 304:../cleanflight/src/main/flight/failsafe.c ****                 failsafeState.receivingRxDataPeriod = millis() + failsafeState.receivingRxDataPerio
 1213              	 .loc 3 304 0
 1214 0260 FFF7FEFF 	 bl millis
 1215 0264 0246     	 mov r2,r0
 1216 0266 2B4B     	 ldr r3,.L104+4
 1217 0268 DB69     	 ldr r3,[r3,#28]
 1218 026a 1344     	 add r3,r3,r2
 1219 026c 294A     	 ldr r2,.L104+4
 1220 026e 9361     	 str r3,[r2,#24]
 305:../cleanflight/src/main/flight/failsafe.c ****                 failsafeState.phase = FAILSAFE_RX_LOSS_MONITORING;
 1221              	 .loc 3 305 0
 1222 0270 284B     	 ldr r3,.L104+4
 1223 0272 0422     	 movs r2,#4
 1224 0274 83F82020 	 strb r2,[r3,#32]
 306:../cleanflight/src/main/flight/failsafe.c ****                 reprocessState = true;
 1225              	 .loc 3 306 0
 1226 0278 0123     	 movs r3,#1
 1227 027a 7B71     	 strb r3,[r7,#5]
 307:../cleanflight/src/main/flight/failsafe.c ****                 break;
 1228              	 .loc 3 307 0
 1229 027c 4DE0     	 b .L86
 1230              	.L74:
 308:../cleanflight/src/main/flight/failsafe.c **** 
 309:../cleanflight/src/main/flight/failsafe.c ****             case FAILSAFE_RX_LOSS_MONITORING:
 310:../cleanflight/src/main/flight/failsafe.c ****                 // Monitoring the rx link to allow rearming when it has become good for > `receivin
 311:../cleanflight/src/main/flight/failsafe.c ****                 if (receivingRxData) {
 1231              	 .loc 3 311 0
 1232 027e FB79     	 ldrb r3,[r7,#7]
 1233 0280 002B     	 cmp r3,#0
 1234 0282 1ED0     	 beq .L99
 312:../cleanflight/src/main/flight/failsafe.c ****                     if (millis() > failsafeState.receivingRxDataPeriod) {
 1235              	 .loc 3 312 0
 1236 0284 FFF7FEFF 	 bl millis
 1237 0288 0246     	 mov r2,r0
 1238 028a 224B     	 ldr r3,.L104+4
 1239 028c 9B69     	 ldr r3,[r3,#24]
 1240 028e 9A42     	 cmp r2,r3
 1241 0290 20D9     	 bls .L102
 313:../cleanflight/src/main/flight/failsafe.c ****                         // rx link is good now, when arming via ARM switch, it must be OFF first
 314:../cleanflight/src/main/flight/failsafe.c ****                         if (!(!isUsingSticksForArming() && IS_RC_MODE_ACTIVE(BOXARM))) {
 1242              	 .loc 3 314 0
 1243 0292 FFF7FEFF 	 bl isUsingSticksForArming
 1244 0296 0346     	 mov r3,r0
 1245 0298 002B     	 cmp r3,#0
 1246 029a 08D1     	 bne .L101
 1247              	 .loc 3 314 0 is_stmt 0 discriminator 1
 1248 029c 0020     	 movs r0,#0
 1249 029e FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 1250 02a2 0346     	 mov r3,r0
 1251 02a4 83F00103 	 eor r3,r3,#1
 1252 02a8 DBB2     	 uxtb r3,r3
 1253 02aa 002B     	 cmp r3,#0
 1254 02ac 12D0     	 beq .L102
 1255              	.L101:
 315:../cleanflight/src/main/flight/failsafe.c ****                             unsetArmingDisabled(ARMING_DISABLED_FAILSAFE);
 1256              	 .loc 3 315 0 is_stmt 1
 1257 02ae 0220     	 movs r0,#2
 1258 02b0 FFF7FEFF 	 bl unsetArmingDisabled
 316:../cleanflight/src/main/flight/failsafe.c ****                             failsafeState.phase = FAILSAFE_RX_LOSS_RECOVERED;
 1259              	 .loc 3 316 0
 1260 02b4 174B     	 ldr r3,.L104+4
 1261 02b6 0522     	 movs r2,#5
 1262 02b8 83F82020 	 strb r2,[r3,#32]
 317:../cleanflight/src/main/flight/failsafe.c ****                             reprocessState = true;
 1263              	 .loc 3 317 0
 1264 02bc 0123     	 movs r3,#1
 1265 02be 7B71     	 strb r3,[r7,#5]
 318:../cleanflight/src/main/flight/failsafe.c ****                         }
 319:../cleanflight/src/main/flight/failsafe.c ****                     }
 320:../cleanflight/src/main/flight/failsafe.c ****                 } else {
 321:../cleanflight/src/main/flight/failsafe.c ****                     failsafeState.receivingRxDataPeriod = millis() + failsafeState.receivingRxDataP
 322:../cleanflight/src/main/flight/failsafe.c ****                 }
 323:../cleanflight/src/main/flight/failsafe.c ****                 break;
 1266              	 .loc 3 323 0
 1267 02c0 2BE0     	 b .L86
 1268              	.L99:
 321:../cleanflight/src/main/flight/failsafe.c ****                 }
 1269              	 .loc 3 321 0
 1270 02c2 FFF7FEFF 	 bl millis
 1271 02c6 0246     	 mov r2,r0
 1272 02c8 124B     	 ldr r3,.L104+4
 1273 02ca DB69     	 ldr r3,[r3,#28]
 1274 02cc 1344     	 add r3,r3,r2
 1275 02ce 114A     	 ldr r2,.L104+4
 1276 02d0 9361     	 str r3,[r2,#24]
 1277              	 .loc 3 323 0
 1278 02d2 22E0     	 b .L86
 1279              	.L102:
 1280              	 .loc 3 323 0 is_stmt 0 discriminator 2
 1281 02d4 21E0     	 b .L86
 1282              	.L75:
 324:../cleanflight/src/main/flight/failsafe.c **** 
 325:../cleanflight/src/main/flight/failsafe.c ****             case FAILSAFE_RX_LOSS_RECOVERED:
 326:../cleanflight/src/main/flight/failsafe.c ****                 // Entering IDLE with the requirement that throttle first must be at min_check for 
 327:../cleanflight/src/main/flight/failsafe.c ****                 // This is to prevent that JustDisarm is activated on the next iteration.
 328:../cleanflight/src/main/flight/failsafe.c ****                 // Because that would have the effect of shutting down failsafe handling on intermi
 329:../cleanflight/src/main/flight/failsafe.c ****                 failsafeState.throttleLowPeriod = millis() + failsafeConfig()->failsafe_throttle_lo
 1283              	 .loc 3 329 0 is_stmt 1
 1284 02d6 FFF7FEFF 	 bl millis
 1285 02da 0446     	 mov r4,r0
 1286 02dc FFF7FEFF 	 bl failsafeConfig
 1287 02e0 0346     	 mov r3,r0
 1288 02e2 5B88     	 ldrh r3,[r3,#2]
 1289 02e4 9BB2     	 uxth r3,r3
 1290 02e6 1A46     	 mov r2,r3
 1291 02e8 6423     	 movs r3,#100
 1292 02ea 03FB02F3 	 mul r3,r3,r2
 1293 02ee 2344     	 add r3,r3,r4
 1294 02f0 084A     	 ldr r2,.L104+4
 1295 02f2 1361     	 str r3,[r2,#16]
 330:../cleanflight/src/main/flight/failsafe.c ****                 failsafeState.phase = FAILSAFE_IDLE;
 1296              	 .loc 3 330 0
 1297 02f4 074B     	 ldr r3,.L104+4
 1298 02f6 0022     	 movs r2,#0
 1299 02f8 83F82020 	 strb r2,[r3,#32]
 331:../cleanflight/src/main/flight/failsafe.c ****                 failsafeState.active = false;
 1300              	 .loc 3 331 0
 1301 02fc 054B     	 ldr r3,.L104+4
 1302 02fe 0022     	 movs r2,#0
 1303 0300 DA70     	 strb r2,[r3,#3]
 332:../cleanflight/src/main/flight/failsafe.c ****                 DISABLE_FLIGHT_MODE(FAILSAFE_MODE);
 1304              	 .loc 3 332 0
 1305 0302 4FF48060 	 mov r0,#1024
 1306 0306 FFF7FEFF 	 bl disableFlightMode
 333:../cleanflight/src/main/flight/failsafe.c ****                 reprocessState = true;
 1307              	 .loc 3 333 0
 1308 030a 0123     	 movs r3,#1
 1309 030c 7B71     	 strb r3,[r7,#5]
 334:../cleanflight/src/main/flight/failsafe.c ****                 break;
 1310              	 .loc 3 334 0
 1311 030e 04E0     	 b .L86
 1312              	.L105:
 1313              	 .align 2
 1314              	.L104:
 1315 0310 00000000 	 .word armingFlags
 1316 0314 00000000 	 .word failsafeState
 1317              	.L103:
 335:../cleanflight/src/main/flight/failsafe.c **** 
 336:../cleanflight/src/main/flight/failsafe.c ****             default:
 337:../cleanflight/src/main/flight/failsafe.c ****                 break;
 1318              	 .loc 3 337 0
 1319 0318 00BF     	 nop
 1320              	.L86:
 338:../cleanflight/src/main/flight/failsafe.c ****         }
 339:../cleanflight/src/main/flight/failsafe.c ****     } while (reprocessState);
 1321              	 .loc 3 339 0
 1322 031a 7B79     	 ldrb r3,[r7,#5]
 1323 031c 002B     	 cmp r3,#0
 1324 031e 7FF4A8AE 	 bne .L67
 340:../cleanflight/src/main/flight/failsafe.c **** 
 341:../cleanflight/src/main/flight/failsafe.c ****     if (beeperMode != BEEPER_SILENCE) {
 1325              	 .loc 3 341 0
 1326 0322 BB79     	 ldrb r3,[r7,#6]
 1327 0324 002B     	 cmp r3,#0
 1328 0326 03D0     	 beq .L63
 342:../cleanflight/src/main/flight/failsafe.c ****         beeper(beeperMode);
 1329              	 .loc 3 342 0
 1330 0328 BB79     	 ldrb r3,[r7,#6]
 1331 032a 1846     	 mov r0,r3
 1332 032c FFF7FEFF 	 bl beeper
 1333              	.L63:
 343:../cleanflight/src/main/flight/failsafe.c ****     }
 344:../cleanflight/src/main/flight/failsafe.c **** }
 1334              	 .loc 3 344 0
 1335 0330 0C37     	 adds r7,r7,#12
 1336              	.LCFI58:
 1337              	 .cfi_def_cfa_offset 12
 1338 0332 BD46     	 mov sp,r7
 1339              	.LCFI59:
 1340              	 .cfi_def_cfa_register 13
 1341              	 
 1342 0334 90BD     	 pop {r4,r7,pc}
 1343              	 .cfi_endproc
 1344              	.LFE571:
 1346 0336 00BF     	 .text
 1347              	.Letext0:
 1348              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1349              	 .file 5 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1350              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 1351              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 1352              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 1353              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 1354              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 1355              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 1356              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_core.h"
 1357              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
 1358              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 1359              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 1360              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/beeper.h"
 1361              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 1362              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
 1363              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 1364              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 failsafe.c
    {standard input}:20     .text.rxConfig:00000000 $t
    {standard input}:24     .text.rxConfig:00000000 rxConfig
    {standard input}:54     .text.rxConfig:00000010 $d
    {standard input}:59     .text.failsafeConfig:00000000 $t
    {standard input}:63     .text.failsafeConfig:00000000 failsafeConfig
    {standard input}:93     .text.failsafeConfig:00000010 $d
                            *COM*:00000008 failsafeConfig_System
    {standard input}:98     .bss.failsafeState:00000000 $d
    {standard input}:101    .bss.failsafeState:00000000 failsafeState
                            *COM*:00000008 failsafeConfig_Copy
    {standard input}:110    .pg_registry:00000000 failsafeConfig_Registry
    {standard input}:107    .pg_registry:00000000 $d
    {standard input}:122    .pg_resetdata:00000000 pgResetTemplate_failsafeConfig
    {standard input}:119    .pg_resetdata:00000000 $d
    {standard input}:130    .text.failsafeReset:00000000 $t
    {standard input}:135    .text.failsafeReset:00000000 failsafeReset
    {standard input}:198    .text.failsafeReset:00000054 $d
    {standard input}:203    .text.failsafeInit:00000000 $t
    {standard input}:208    .text.failsafeInit:00000000 failsafeInit
    {standard input}:245    .text.failsafeInit:0000001c $d
    {standard input}:250    .text.failsafePhase:00000000 $t
    {standard input}:255    .text.failsafePhase:00000000 failsafePhase
    {standard input}:286    .text.failsafePhase:00000014 $d
    {standard input}:291    .text.failsafeIsMonitoring:00000000 $t
    {standard input}:296    .text.failsafeIsMonitoring:00000000 failsafeIsMonitoring
    {standard input}:327    .text.failsafeIsMonitoring:00000014 $d
    {standard input}:332    .text.failsafeIsActive:00000000 $t
    {standard input}:337    .text.failsafeIsActive:00000000 failsafeIsActive
    {standard input}:368    .text.failsafeIsActive:00000014 $d
    {standard input}:373    .text.failsafeStartMonitoring:00000000 $t
    {standard input}:378    .text.failsafeStartMonitoring:00000000 failsafeStartMonitoring
    {standard input}:409    .text.failsafeStartMonitoring:00000014 $d
    {standard input}:414    .text.failsafeShouldHaveCausedLandingByNow:00000000 $t
    {standard input}:418    .text.failsafeShouldHaveCausedLandingByNow:00000000 failsafeShouldHaveCausedLandingByNow
    {standard input}:448    .text.failsafeShouldHaveCausedLandingByNow:0000001c $d
    {standard input}:453    .text.failsafeActivate:00000000 $t
    {standard input}:457    .text.failsafeActivate:00000000 failsafeActivate
    {standard input}:511    .text.failsafeActivate:0000004c $d
    {standard input}:516    .text.failsafeApplyControlInput:00000000 $t
    {standard input}:520    .text.failsafeApplyControlInput:00000000 failsafeApplyControlInput
    {standard input}:595    .text.failsafeApplyControlInput:00000058 $d
    {standard input}:600    .text.failsafeIsReceivingRxData:00000000 $t
    {standard input}:605    .text.failsafeIsReceivingRxData:00000000 failsafeIsReceivingRxData
    {standard input}:641    .text.failsafeIsReceivingRxData:00000020 $d
    {standard input}:646    .text.failsafeOnRxSuspend:00000000 $t
    {standard input}:651    .text.failsafeOnRxSuspend:00000000 failsafeOnRxSuspend
    {standard input}:695    .text.failsafeOnRxSuspend:00000028 $d
    {standard input}:701    .text.failsafeOnRxResume:00000000 $t
    {standard input}:706    .text.failsafeOnRxResume:00000000 failsafeOnRxResume
    {standard input}:734    .text.failsafeOnRxResume:00000018 $d
    {standard input}:739    .text.failsafeOnValidDataReceived:00000000 $t
    {standard input}:744    .text.failsafeOnValidDataReceived:00000000 failsafeOnValidDataReceived
    {standard input}:784    .text.failsafeOnValidDataReceived:0000002c $d
    {standard input}:789    .text.failsafeOnValidDataFailed:00000000 $t
    {standard input}:794    .text.failsafeOnValidDataFailed:00000000 failsafeOnValidDataFailed
    {standard input}:836    .text.failsafeOnValidDataFailed:00000030 $d
    {standard input}:841    .text.failsafeUpdateState:00000000 $t
    {standard input}:846    .text.failsafeUpdateState:00000000 failsafeUpdateState
    {standard input}:937    .text.failsafeUpdateState:00000088 $d
    {standard input}:944    .text.failsafeUpdateState:000000a4 $t
    {standard input}:1315   .text.failsafeUpdateState:00000310 $d
    {standard input}:1319   .text.failsafeUpdateState:00000318 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
rxConfig_System
millis
enableFlightMode
rcData
unsetArmingDisabled
setArmingDisabled
IS_RC_MODE_ACTIVE
calculateThrottleStatus
disableFlightMode
crashRecoveryModeActive
disarm
isUsingSticksForArming
armingFlags
beeper
