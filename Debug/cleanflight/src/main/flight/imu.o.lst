   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "imu.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.imuConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	imuConfig:
  25              	.LFB529:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #include "common/axis.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #include "common/maths.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** // Exported symbols
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern uint32_t accTimeSum;
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern int accSumCount;
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern float accVelScale;
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern int32_t accSum[XYZ_AXIS_COUNT];
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern bool canUseGPSHeading;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern float accAverage[XYZ_AXIS_COUNT];
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef struct {
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     float w,x,y,z;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } quaternion;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #define QUATERNION_INITIALIZE  {.w=1, .x=0, .y=0,.z=0}
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef struct {
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     float ww,wx,wy,wz,xx,xy,xz,yy,yz,zz;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } quaternionProducts;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #define QUATERNION_PRODUCTS_INITIALIZE  {.ww=1, .wx=0, .wy=0, .wz=0, .xx=0, .xy=0, .xz=0, .yy=0, .y
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef union {
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     int16_t raw[XYZ_AXIS_COUNT];
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     struct {
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****         // absolute angle inclination in multiple of 0.1 degree    180 deg = 1800
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****         int16_t roll;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****         int16_t pitch;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****         int16_t yaw;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     } values;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } attitudeEulerAngles_t;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #define EULER_INITIALIZE  { { 0, 0, 0 } }
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern attitudeEulerAngles_t attitude;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef struct accDeadband_s {
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint8_t xy;                 // set the acc deadband for xy-Axis
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint8_t z;                  // set the acc deadband for z-Axis, this ignores small acceleration
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } accDeadband_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef struct imuConfig_s {
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint16_t dcm_kp;                        // DCM filter proportional gain ( x 10000)
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint16_t dcm_ki;                        // DCM filter integral gain ( x 10000)
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint8_t small_angle;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint8_t acc_unarmedcal;                 // turn automatic acc compensation on/off
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     accDeadband_t accDeadband;
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } imuConfig_t;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** PG_DECLARE(imuConfig_t, imuConfig);
  27              	 .loc 1 72 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 72 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word imuConfig_System
  55              	 .cfi_endproc
  56              	.LFE529:
  58              	 .comm accSum,12,4
  59              	 .comm accAverage,12,4
  60              	 .global accTimeSum
  61              	 .section .bss.accTimeSum,"aw",%nobits
  62              	 .align 2
  65              	accTimeSum:
  66 0000 00000000 	 .space 4
  67              	 .global accSumCount
  68              	 .section .bss.accSumCount,"aw",%nobits
  69              	 .align 2
  72              	accSumCount:
  73 0000 00000000 	 .space 4
  74              	 .comm accVelScale,4,4
  75              	 .global canUseGPSHeading
  76              	 .section .data.canUseGPSHeading,"aw",%progbits
  79              	canUseGPSHeading:
  80 0000 01       	 .byte 1
  81              	 .section .bss.throttleAngleScale,"aw",%nobits
  82              	 .align 2
  85              	throttleAngleScale:
  86 0000 00000000 	 .space 4
  87              	 .section .bss.throttleAngleValue,"aw",%nobits
  88              	 .align 2
  91              	throttleAngleValue:
  92 0000 00000000 	 .space 4
  93              	 .section .bss.fc_acc,"aw",%nobits
  94              	 .align 2
  97              	fc_acc:
  98 0000 00000000 	 .space 4
  99              	 .section .bss.smallAngleCosZ,"aw",%nobits
 100              	 .align 2
 103              	smallAngleCosZ:
 104 0000 00000000 	 .space 4
 105              	 .section .bss.imuRuntimeConfig,"aw",%nobits
 106              	 .align 2
 109              	imuRuntimeConfig:
 110 0000 00000000 	 .space 12
 110      00000000 
 110      00000000 
 111              	 .section .bss.rMat,"aw",%nobits
 112              	 .align 2
 115              	rMat:
 116 0000 00000000 	 .space 36
 116      00000000 
 116      00000000 
 116      00000000 
 116      00000000 
 117              	 .section .data.q,"aw",%progbits
 118              	 .align 2
 121              	q:
 122 0000 0000803F 	 .word 1065353216
 123 0004 00000000 	 .word 0
 124 0008 00000000 	 .word 0
 125 000c 00000000 	 .word 0
 126              	 .section .data.qP,"aw",%progbits
 127              	 .align 2
 130              	qP:
 131 0000 0000803F 	 .word 1065353216
 132 0004 00000000 	 .word 0
 133 0008 00000000 	 .word 0
 134 000c 00000000 	 .word 0
 135 0010 00000000 	 .word 0
 136 0014 00000000 	 .word 0
 137 0018 00000000 	 .word 0
 138 001c 00000000 	 .word 0
 139 0020 00000000 	 .word 0
 140 0024 00000000 	 .word 0
 141              	 .global headfree
 142              	 .section .data.headfree,"aw",%progbits
 143              	 .align 2
 146              	headfree:
 147 0000 0000803F 	 .word 1065353216
 148 0004 00000000 	 .word 0
 149 0008 00000000 	 .word 0
 150 000c 00000000 	 .word 0
 151              	 .global offset
 152              	 .section .data.offset,"aw",%progbits
 153              	 .align 2
 156              	offset:
 157 0000 0000803F 	 .word 1065353216
 158 0004 00000000 	 .word 0
 159 0008 00000000 	 .word 0
 160 000c 00000000 	 .word 0
 161              	 .global attitude
 162              	 .section .bss.attitude,"aw",%nobits
 163              	 .align 2
 166              	attitude:
 167 0000 00000000 	 .space 6
 167      0000
 168              	 .comm imuConfig_System,8,4
 169              	 .comm imuConfig_Copy,8,4
 170              	 .global imuConfig_Registry
 171 0006 0000     	 .section .pg_registry,"a",%progbits
 172              	 .align 2
 175              	imuConfig_Registry:
 176 0000 1600     	 .short 22
 177 0002 0800     	 .short 8
 178 0004 00000000 	 .word imuConfig_System
 179 0008 00000000 	 .word imuConfig_Copy
 180 000c 00000000 	 .word 0
 181 0010 00000000 	 .word pgResetTemplate_imuConfig
 182              	 .global pgResetTemplate_imuConfig
 183              	 .section .pg_resetdata,"a",%progbits
 184              	 .align 1
 187              	pgResetTemplate_imuConfig:
 188 0000 C409     	 .short 2500
 189 0002 0000     	 .short 0
 190 0004 19       	 .byte 25
 191 0005 01       	 .byte 1
 192 0006 28       	 .byte 40
 193 0007 28       	 .byte 40
 194              	 .section .text.imuComputeRotationMatrix,"ax",%progbits
 195              	 .align 2
 196              	 .thumb
 197              	 .thumb_func
 199              	imuComputeRotationMatrix:
 200              	.LFB557:
 201              	 .file 2 "../cleanflight/src/main/flight/imu.c"
   1:../cleanflight/src/main/flight/imu.c **** /*
   2:../cleanflight/src/main/flight/imu.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/flight/imu.c ****  *
   4:../cleanflight/src/main/flight/imu.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/flight/imu.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/flight/imu.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/flight/imu.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/flight/imu.c ****  * any later version.
   9:../cleanflight/src/main/flight/imu.c ****  *
  10:../cleanflight/src/main/flight/imu.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/flight/imu.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/flight/imu.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/flight/imu.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/flight/imu.c ****  *
  15:../cleanflight/src/main/flight/imu.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/flight/imu.c ****  * along with this software.
  17:../cleanflight/src/main/flight/imu.c ****  *
  18:../cleanflight/src/main/flight/imu.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/flight/imu.c ****  */
  20:../cleanflight/src/main/flight/imu.c **** 
  21:../cleanflight/src/main/flight/imu.c **** // Inertial Measurement Unit (IMU)
  22:../cleanflight/src/main/flight/imu.c **** 
  23:../cleanflight/src/main/flight/imu.c **** #include <stdbool.h>
  24:../cleanflight/src/main/flight/imu.c **** #include <stdint.h>
  25:../cleanflight/src/main/flight/imu.c **** #include <math.h>
  26:../cleanflight/src/main/flight/imu.c **** 
  27:../cleanflight/src/main/flight/imu.c **** #include "platform.h"
  28:../cleanflight/src/main/flight/imu.c **** 
  29:../cleanflight/src/main/flight/imu.c **** #include "build/build_config.h"
  30:../cleanflight/src/main/flight/imu.c **** #include "build/debug.h"
  31:../cleanflight/src/main/flight/imu.c **** 
  32:../cleanflight/src/main/flight/imu.c **** #include "common/axis.h"
  33:../cleanflight/src/main/flight/imu.c **** 
  34:../cleanflight/src/main/flight/imu.c **** #include "pg/pg.h"
  35:../cleanflight/src/main/flight/imu.c **** #include "pg/pg_ids.h"
  36:../cleanflight/src/main/flight/imu.c **** 
  37:../cleanflight/src/main/flight/imu.c **** #include "drivers/time.h"
  38:../cleanflight/src/main/flight/imu.c **** 
  39:../cleanflight/src/main/flight/imu.c **** #include "fc/runtime_config.h"
  40:../cleanflight/src/main/flight/imu.c **** 
  41:../cleanflight/src/main/flight/imu.c **** #include "flight/imu.h"
  42:../cleanflight/src/main/flight/imu.c **** #include "flight/mixer.h"
  43:../cleanflight/src/main/flight/imu.c **** #include "flight/pid.h"
  44:../cleanflight/src/main/flight/imu.c **** 
  45:../cleanflight/src/main/flight/imu.c **** #include "io/gps.h"
  46:../cleanflight/src/main/flight/imu.c **** 
  47:../cleanflight/src/main/flight/imu.c **** #include "sensors/acceleration.h"
  48:../cleanflight/src/main/flight/imu.c **** #include "sensors/barometer.h"
  49:../cleanflight/src/main/flight/imu.c **** #include "sensors/compass.h"
  50:../cleanflight/src/main/flight/imu.c **** #include "sensors/gyro.h"
  51:../cleanflight/src/main/flight/imu.c **** #include "sensors/sensors.h"
  52:../cleanflight/src/main/flight/imu.c **** 
  53:../cleanflight/src/main/flight/imu.c **** #if defined(SIMULATOR_BUILD) && defined(SIMULATOR_MULTITHREAD)
  54:../cleanflight/src/main/flight/imu.c **** #include <stdio.h>
  55:../cleanflight/src/main/flight/imu.c **** #include <pthread.h>
  56:../cleanflight/src/main/flight/imu.c **** 
  57:../cleanflight/src/main/flight/imu.c **** static pthread_mutex_t imuUpdateLock;
  58:../cleanflight/src/main/flight/imu.c **** 
  59:../cleanflight/src/main/flight/imu.c **** #if defined(SIMULATOR_IMU_SYNC)
  60:../cleanflight/src/main/flight/imu.c **** static uint32_t imuDeltaT = 0;
  61:../cleanflight/src/main/flight/imu.c **** static bool imuUpdated = false;
  62:../cleanflight/src/main/flight/imu.c **** #endif
  63:../cleanflight/src/main/flight/imu.c **** 
  64:../cleanflight/src/main/flight/imu.c **** #define IMU_LOCK pthread_mutex_lock(&imuUpdateLock)
  65:../cleanflight/src/main/flight/imu.c **** #define IMU_UNLOCK pthread_mutex_unlock(&imuUpdateLock)
  66:../cleanflight/src/main/flight/imu.c **** 
  67:../cleanflight/src/main/flight/imu.c **** #else
  68:../cleanflight/src/main/flight/imu.c **** 
  69:../cleanflight/src/main/flight/imu.c **** #define IMU_LOCK
  70:../cleanflight/src/main/flight/imu.c **** #define IMU_UNLOCK
  71:../cleanflight/src/main/flight/imu.c **** 
  72:../cleanflight/src/main/flight/imu.c **** #endif
  73:../cleanflight/src/main/flight/imu.c **** 
  74:../cleanflight/src/main/flight/imu.c **** // the limit (in degrees/second) beyond which we stop integrating
  75:../cleanflight/src/main/flight/imu.c **** // omega_I. At larger spin rates the DCM PI controller can get 'dizzy'
  76:../cleanflight/src/main/flight/imu.c **** // which results in false gyro drift. See
  77:../cleanflight/src/main/flight/imu.c **** // http://gentlenav.googlecode.com/files/fastRotations.pdf
  78:../cleanflight/src/main/flight/imu.c **** 
  79:../cleanflight/src/main/flight/imu.c **** #define SPIN_RATE_LIMIT 20
  80:../cleanflight/src/main/flight/imu.c **** 
  81:../cleanflight/src/main/flight/imu.c **** #define ATTITUDE_RESET_QUIET_TIME 250000   // 250ms - gyro quiet period after disarm before attitud
  82:../cleanflight/src/main/flight/imu.c **** #define ATTITUDE_RESET_GYRO_LIMIT 15       // 15 deg/sec - gyro limit for quiet period
  83:../cleanflight/src/main/flight/imu.c **** #define ATTITUDE_RESET_KP_GAIN    25.0     // dcmKpGain value to use during attitude reset
  84:../cleanflight/src/main/flight/imu.c **** #define ATTITUDE_RESET_ACTIVE_TIME 500000  // 500ms - Time to wait for attitude to converge at high
  85:../cleanflight/src/main/flight/imu.c **** #define GPS_COG_MIN_GROUNDSPEED 500        // 500cm/s minimum groundspeed for a gps heading to be c
  86:../cleanflight/src/main/flight/imu.c **** 
  87:../cleanflight/src/main/flight/imu.c **** int32_t accSum[XYZ_AXIS_COUNT];
  88:../cleanflight/src/main/flight/imu.c **** float accAverage[XYZ_AXIS_COUNT];
  89:../cleanflight/src/main/flight/imu.c **** 
  90:../cleanflight/src/main/flight/imu.c **** uint32_t accTimeSum = 0;        // keep track for integration of acc
  91:../cleanflight/src/main/flight/imu.c **** int accSumCount = 0;
  92:../cleanflight/src/main/flight/imu.c **** float accVelScale;
  93:../cleanflight/src/main/flight/imu.c **** bool canUseGPSHeading = true;
  94:../cleanflight/src/main/flight/imu.c **** 
  95:../cleanflight/src/main/flight/imu.c **** static float throttleAngleScale;
  96:../cleanflight/src/main/flight/imu.c **** static int throttleAngleValue;
  97:../cleanflight/src/main/flight/imu.c **** static float fc_acc;
  98:../cleanflight/src/main/flight/imu.c **** static float smallAngleCosZ = 0;
  99:../cleanflight/src/main/flight/imu.c **** 
 100:../cleanflight/src/main/flight/imu.c **** static imuRuntimeConfig_t imuRuntimeConfig;
 101:../cleanflight/src/main/flight/imu.c **** 
 102:../cleanflight/src/main/flight/imu.c **** STATIC_UNIT_TESTED float rMat[3][3];
 103:../cleanflight/src/main/flight/imu.c **** 
 104:../cleanflight/src/main/flight/imu.c **** // quaternion of sensor frame relative to earth frame
 105:../cleanflight/src/main/flight/imu.c **** STATIC_UNIT_TESTED quaternion q = QUATERNION_INITIALIZE;
 106:../cleanflight/src/main/flight/imu.c **** STATIC_UNIT_TESTED quaternionProducts qP = QUATERNION_PRODUCTS_INITIALIZE;
 107:../cleanflight/src/main/flight/imu.c **** // headfree quaternions
 108:../cleanflight/src/main/flight/imu.c **** quaternion headfree = QUATERNION_INITIALIZE;
 109:../cleanflight/src/main/flight/imu.c **** quaternion offset = QUATERNION_INITIALIZE;
 110:../cleanflight/src/main/flight/imu.c **** 
 111:../cleanflight/src/main/flight/imu.c **** // absolute angle inclination in multiple of 0.1 degree    180 deg = 1800
 112:../cleanflight/src/main/flight/imu.c **** attitudeEulerAngles_t attitude = EULER_INITIALIZE;
 113:../cleanflight/src/main/flight/imu.c **** 
 114:../cleanflight/src/main/flight/imu.c **** PG_REGISTER_WITH_RESET_TEMPLATE(imuConfig_t, imuConfig, PG_IMU_CONFIG, 0);
 115:../cleanflight/src/main/flight/imu.c **** 
 116:../cleanflight/src/main/flight/imu.c **** PG_RESET_TEMPLATE(imuConfig_t, imuConfig,
 117:../cleanflight/src/main/flight/imu.c ****     .dcm_kp = 2500,                // 1.0 * 10000
 118:../cleanflight/src/main/flight/imu.c ****     .dcm_ki = 0,                   // 0.003 * 10000
 119:../cleanflight/src/main/flight/imu.c ****     .small_angle = 25,
 120:../cleanflight/src/main/flight/imu.c ****     .accDeadband = {.xy = 40, .z= 40},
 121:../cleanflight/src/main/flight/imu.c ****     .acc_unarmedcal = 1
 122:../cleanflight/src/main/flight/imu.c **** );
 123:../cleanflight/src/main/flight/imu.c **** 
 124:../cleanflight/src/main/flight/imu.c **** STATIC_UNIT_TESTED void imuComputeRotationMatrix(void){
 202              	 .loc 2 124 0
 203              	 .cfi_startproc
 204              	 
 205              	 
 206 0000 80B5     	 push {r7,lr}
 207              	.LCFI4:
 208              	 .cfi_def_cfa_offset 8
 209              	 .cfi_offset 7,-8
 210              	 .cfi_offset 14,-4
 211 0002 00AF     	 add r7,sp,#0
 212              	.LCFI5:
 213              	 .cfi_def_cfa_register 7
 125:../cleanflight/src/main/flight/imu.c ****     imuQuaternionComputeProducts(&q, &qP);
 214              	 .loc 2 125 0
 215 0004 4548     	 ldr r0,.L6
 216 0006 4649     	 ldr r1,.L6+4
 217 0008 FFF7FEFF 	 bl imuQuaternionComputeProducts
 126:../cleanflight/src/main/flight/imu.c **** 
 127:../cleanflight/src/main/flight/imu.c ****     rMat[0][0] = 1.0f - 2.0f * qP.yy - 2.0f * qP.zz;
 218              	 .loc 2 127 0
 219 000c 444B     	 ldr r3,.L6+4
 220 000e D3ED077A 	 flds s15,[r3,#28]
 221 0012 77EEA77A 	 fadds s15,s15,s15
 222 0016 B7EE007A 	 fconsts s14,#112
 223 001a 37EE677A 	 fsubs s14,s14,s15
 224 001e 404B     	 ldr r3,.L6+4
 225 0020 D3ED097A 	 flds s15,[r3,#36]
 226 0024 77EEA77A 	 fadds s15,s15,s15
 227 0028 77EE677A 	 fsubs s15,s14,s15
 228 002c 3D4B     	 ldr r3,.L6+8
 229 002e C3ED007A 	 fsts s15,[r3]
 128:../cleanflight/src/main/flight/imu.c ****     rMat[0][1] = 2.0f * (qP.xy + -qP.wz);
 230              	 .loc 2 128 0
 231 0032 3B4B     	 ldr r3,.L6+4
 232 0034 93ED057A 	 flds s14,[r3,#20]
 233 0038 394B     	 ldr r3,.L6+4
 234 003a D3ED037A 	 flds s15,[r3,#12]
 235 003e 77EE677A 	 fsubs s15,s14,s15
 236 0042 77EEA77A 	 fadds s15,s15,s15
 237 0046 374B     	 ldr r3,.L6+8
 238 0048 C3ED017A 	 fsts s15,[r3,#4]
 129:../cleanflight/src/main/flight/imu.c ****     rMat[0][2] = 2.0f * (qP.xz - -qP.wy);
 239              	 .loc 2 129 0
 240 004c 344B     	 ldr r3,.L6+4
 241 004e 93ED067A 	 flds s14,[r3,#24]
 242 0052 334B     	 ldr r3,.L6+4
 243 0054 D3ED027A 	 flds s15,[r3,#8]
 244 0058 77EE277A 	 fadds s15,s14,s15
 245 005c 77EEA77A 	 fadds s15,s15,s15
 246 0060 304B     	 ldr r3,.L6+8
 247 0062 C3ED027A 	 fsts s15,[r3,#8]
 130:../cleanflight/src/main/flight/imu.c **** 
 131:../cleanflight/src/main/flight/imu.c ****     rMat[1][0] = 2.0f * (qP.xy - -qP.wz);
 248              	 .loc 2 131 0
 249 0066 2E4B     	 ldr r3,.L6+4
 250 0068 93ED057A 	 flds s14,[r3,#20]
 251 006c 2C4B     	 ldr r3,.L6+4
 252 006e D3ED037A 	 flds s15,[r3,#12]
 253 0072 77EE277A 	 fadds s15,s14,s15
 254 0076 77EEA77A 	 fadds s15,s15,s15
 255 007a 2A4B     	 ldr r3,.L6+8
 256 007c C3ED037A 	 fsts s15,[r3,#12]
 132:../cleanflight/src/main/flight/imu.c ****     rMat[1][1] = 1.0f - 2.0f * qP.xx - 2.0f * qP.zz;
 257              	 .loc 2 132 0
 258 0080 274B     	 ldr r3,.L6+4
 259 0082 D3ED047A 	 flds s15,[r3,#16]
 260 0086 77EEA77A 	 fadds s15,s15,s15
 261 008a B7EE007A 	 fconsts s14,#112
 262 008e 37EE677A 	 fsubs s14,s14,s15
 263 0092 234B     	 ldr r3,.L6+4
 264 0094 D3ED097A 	 flds s15,[r3,#36]
 265 0098 77EEA77A 	 fadds s15,s15,s15
 266 009c 77EE677A 	 fsubs s15,s14,s15
 267 00a0 204B     	 ldr r3,.L6+8
 268 00a2 C3ED047A 	 fsts s15,[r3,#16]
 133:../cleanflight/src/main/flight/imu.c ****     rMat[1][2] = 2.0f * (qP.yz + -qP.wx);
 269              	 .loc 2 133 0
 270 00a6 1E4B     	 ldr r3,.L6+4
 271 00a8 93ED087A 	 flds s14,[r3,#32]
 272 00ac 1C4B     	 ldr r3,.L6+4
 273 00ae D3ED017A 	 flds s15,[r3,#4]
 274 00b2 77EE677A 	 fsubs s15,s14,s15
 275 00b6 77EEA77A 	 fadds s15,s15,s15
 276 00ba 1A4B     	 ldr r3,.L6+8
 277 00bc C3ED057A 	 fsts s15,[r3,#20]
 134:../cleanflight/src/main/flight/imu.c **** 
 135:../cleanflight/src/main/flight/imu.c ****     rMat[2][0] = 2.0f * (qP.xz + -qP.wy);
 278              	 .loc 2 135 0
 279 00c0 174B     	 ldr r3,.L6+4
 280 00c2 93ED067A 	 flds s14,[r3,#24]
 281 00c6 164B     	 ldr r3,.L6+4
 282 00c8 D3ED027A 	 flds s15,[r3,#8]
 283 00cc 77EE677A 	 fsubs s15,s14,s15
 284 00d0 77EEA77A 	 fadds s15,s15,s15
 285 00d4 134B     	 ldr r3,.L6+8
 286 00d6 C3ED067A 	 fsts s15,[r3,#24]
 136:../cleanflight/src/main/flight/imu.c ****     rMat[2][1] = 2.0f * (qP.yz - -qP.wx);
 287              	 .loc 2 136 0
 288 00da 114B     	 ldr r3,.L6+4
 289 00dc 93ED087A 	 flds s14,[r3,#32]
 290 00e0 0F4B     	 ldr r3,.L6+4
 291 00e2 D3ED017A 	 flds s15,[r3,#4]
 292 00e6 77EE277A 	 fadds s15,s14,s15
 293 00ea 77EEA77A 	 fadds s15,s15,s15
 294 00ee 0D4B     	 ldr r3,.L6+8
 295 00f0 C3ED077A 	 fsts s15,[r3,#28]
 137:../cleanflight/src/main/flight/imu.c ****     rMat[2][2] = 1.0f - 2.0f * qP.xx - 2.0f * qP.yy;
 296              	 .loc 2 137 0
 297 00f4 0A4B     	 ldr r3,.L6+4
 298 00f6 D3ED047A 	 flds s15,[r3,#16]
 299 00fa 77EEA77A 	 fadds s15,s15,s15
 300 00fe B7EE007A 	 fconsts s14,#112
 301 0102 37EE677A 	 fsubs s14,s14,s15
 302 0106 064B     	 ldr r3,.L6+4
 303 0108 D3ED077A 	 flds s15,[r3,#28]
 304 010c 77EEA77A 	 fadds s15,s15,s15
 305 0110 77EE677A 	 fsubs s15,s14,s15
 306 0114 034B     	 ldr r3,.L6+8
 307 0116 C3ED087A 	 fsts s15,[r3,#32]
 138:../cleanflight/src/main/flight/imu.c **** 
 139:../cleanflight/src/main/flight/imu.c **** #if defined(SIMULATOR_BUILD) && defined(SKIP_IMU_CALC) && !defined(SET_IMU_FROM_EULER)
 140:../cleanflight/src/main/flight/imu.c ****     rMat[1][0] = -2.0f * (qP.xy - -qP.wz);
 141:../cleanflight/src/main/flight/imu.c ****     rMat[2][0] = -2.0f * (qP.xz + -qP.wy);
 142:../cleanflight/src/main/flight/imu.c **** #endif
 143:../cleanflight/src/main/flight/imu.c **** }
 308              	 .loc 2 143 0
 309 011a 80BD     	 pop {r7,pc}
 310              	.L7:
 311              	 .align 2
 312              	.L6:
 313 011c 00000000 	 .word q
 314 0120 00000000 	 .word qP
 315 0124 00000000 	 .word rMat
 316              	 .cfi_endproc
 317              	.LFE557:
 319              	 .section .text.calculateAccZLowPassFilterRCTimeConstant,"ax",%progbits
 320              	 .align 2
 321              	 .thumb
 322              	 .thumb_func
 324              	calculateAccZLowPassFilterRCTimeConstant:
 325              	.LFB558:
 144:../cleanflight/src/main/flight/imu.c **** 
 145:../cleanflight/src/main/flight/imu.c **** /*
 146:../cleanflight/src/main/flight/imu.c **** * Calculate RC time constant used in the accZ lpf.
 147:../cleanflight/src/main/flight/imu.c **** */
 148:../cleanflight/src/main/flight/imu.c **** static float calculateAccZLowPassFilterRCTimeConstant(float accz_lpf_cutoff)
 149:../cleanflight/src/main/flight/imu.c **** {
 326              	 .loc 2 149 0
 327              	 .cfi_startproc
 328              	 
 329              	 
 330              	 
 331 0000 80B4     	 push {r7}
 332              	.LCFI6:
 333              	 .cfi_def_cfa_offset 4
 334              	 .cfi_offset 7,-4
 335 0002 83B0     	 sub sp,sp,#12
 336              	.LCFI7:
 337              	 .cfi_def_cfa_offset 16
 338 0004 00AF     	 add r7,sp,#0
 339              	.LCFI8:
 340              	 .cfi_def_cfa_register 7
 341 0006 7860     	 str r0,[r7,#4]
 150:../cleanflight/src/main/flight/imu.c ****     return 0.5f / (M_PIf * accz_lpf_cutoff);
 342              	 .loc 2 150 0
 343 0008 D7ED017A 	 flds s15,[r7,#4]
 344 000c 9FED077A 	 flds s14,.L10
 345 0010 67EE877A 	 fmuls s15,s15,s14
 346 0014 B6EE007A 	 fconsts s14,#96
 347 0018 C7EE277A 	 fdivs s15,s14,s15
 348 001c 17EE903A 	 fmrs r3,s15
 151:../cleanflight/src/main/flight/imu.c **** }
 349              	 .loc 2 151 0
 350 0020 1846     	 mov r0,r3
 351 0022 0C37     	 adds r7,r7,#12
 352              	.LCFI9:
 353              	 .cfi_def_cfa_offset 4
 354 0024 BD46     	 mov sp,r7
 355              	.LCFI10:
 356              	 .cfi_def_cfa_register 13
 357              	 
 358 0026 5DF8047B 	 ldr r7,[sp],#4
 359              	.LCFI11:
 360              	 .cfi_restore 7
 361              	 .cfi_def_cfa_offset 0
 362 002a 7047     	 bx lr
 363              	.L11:
 364              	 .align 2
 365              	.L10:
 366 002c DB0F4940 	 .word 1078530011
 367              	 .cfi_endproc
 368              	.LFE558:
 370              	 .section .text.calculateThrottleAngleScale,"ax",%progbits
 371              	 .align 2
 372              	 .thumb
 373              	 .thumb_func
 375              	calculateThrottleAngleScale:
 376              	.LFB559:
 152:../cleanflight/src/main/flight/imu.c **** 
 153:../cleanflight/src/main/flight/imu.c **** static float calculateThrottleAngleScale(uint16_t throttle_correction_angle)
 154:../cleanflight/src/main/flight/imu.c **** {
 377              	 .loc 2 154 0
 378              	 .cfi_startproc
 379              	 
 380              	 
 381              	 
 382 0000 80B4     	 push {r7}
 383              	.LCFI12:
 384              	 .cfi_def_cfa_offset 4
 385              	 .cfi_offset 7,-4
 386 0002 83B0     	 sub sp,sp,#12
 387              	.LCFI13:
 388              	 .cfi_def_cfa_offset 16
 389 0004 00AF     	 add r7,sp,#0
 390              	.LCFI14:
 391              	 .cfi_def_cfa_register 7
 392 0006 0346     	 mov r3,r0
 393 0008 FB80     	 strh r3,[r7,#6]
 155:../cleanflight/src/main/flight/imu.c ****     return (1800.0f / M_PIf) * (900.0f / throttle_correction_angle);
 394              	 .loc 2 155 0
 395 000a FB88     	 ldrh r3,[r7,#6]
 396 000c 07EE903A 	 fmsr s15,r3
 397 0010 F8EEE77A 	 fsitos s15,s15
 398 0014 9FED077A 	 flds s14,.L14
 399 0018 C7EE277A 	 fdivs s15,s14,s15
 400 001c 9FED067A 	 flds s14,.L14+4
 401 0020 67EE877A 	 fmuls s15,s15,s14
 402 0024 17EE903A 	 fmrs r3,s15
 156:../cleanflight/src/main/flight/imu.c **** }
 403              	 .loc 2 156 0
 404 0028 1846     	 mov r0,r3
 405 002a 0C37     	 adds r7,r7,#12
 406              	.LCFI15:
 407              	 .cfi_def_cfa_offset 4
 408 002c BD46     	 mov sp,r7
 409              	.LCFI16:
 410              	 .cfi_def_cfa_register 13
 411              	 
 412 002e 5DF8047B 	 ldr r7,[sp],#4
 413              	.LCFI17:
 414              	 .cfi_restore 7
 415              	 .cfi_def_cfa_offset 0
 416 0032 7047     	 bx lr
 417              	.L15:
 418              	 .align 2
 419              	.L14:
 420 0034 00006144 	 .word 1147207680
 421 0038 4C3D0F44 	 .word 1141849420
 422              	 .cfi_endproc
 423              	.LFE559:
 425              	 .section .text.imuConfigure,"ax",%progbits
 426              	 .align 2
 427              	 .global imuConfigure
 428              	 .thumb
 429              	 .thumb_func
 431              	imuConfigure:
 432              	.LFB560:
 157:../cleanflight/src/main/flight/imu.c **** 
 158:../cleanflight/src/main/flight/imu.c **** void imuConfigure(uint16_t throttle_correction_angle, uint8_t throttle_correction_value)
 159:../cleanflight/src/main/flight/imu.c **** {
 433              	 .loc 2 159 0
 434              	 .cfi_startproc
 435              	 
 436              	 
 437 0000 80B5     	 push {r7,lr}
 438              	.LCFI18:
 439              	 .cfi_def_cfa_offset 8
 440              	 .cfi_offset 7,-8
 441              	 .cfi_offset 14,-4
 442 0002 82B0     	 sub sp,sp,#8
 443              	.LCFI19:
 444              	 .cfi_def_cfa_offset 16
 445 0004 00AF     	 add r7,sp,#0
 446              	.LCFI20:
 447              	 .cfi_def_cfa_register 7
 448 0006 0346     	 mov r3,r0
 449 0008 0A46     	 mov r2,r1
 450 000a FB80     	 strh r3,[r7,#6]
 451 000c 1346     	 mov r3,r2
 452 000e 7B71     	 strb r3,[r7,#5]
 160:../cleanflight/src/main/flight/imu.c ****     imuRuntimeConfig.dcm_kp = imuConfig()->dcm_kp / 10000.0f;
 453              	 .loc 2 160 0
 454 0010 FFF7FEFF 	 bl imuConfig
 455 0014 0346     	 mov r3,r0
 456 0016 1B88     	 ldrh r3,[r3]
 457 0018 9BB2     	 uxth r3,r3
 458 001a 07EE903A 	 fmsr s15,r3
 459 001e F8EEE77A 	 fsitos s15,s15
 460 0022 9FED1B7A 	 flds s14,.L17
 461 0026 C7EE877A 	 fdivs s15,s15,s14
 462 002a 1A4B     	 ldr r3,.L17+4
 463 002c C3ED017A 	 fsts s15,[r3,#4]
 161:../cleanflight/src/main/flight/imu.c ****     imuRuntimeConfig.dcm_ki = imuConfig()->dcm_ki / 10000.0f;
 464              	 .loc 2 161 0
 465 0030 FFF7FEFF 	 bl imuConfig
 466 0034 0346     	 mov r3,r0
 467 0036 5B88     	 ldrh r3,[r3,#2]
 468 0038 9BB2     	 uxth r3,r3
 469 003a 07EE903A 	 fmsr s15,r3
 470 003e F8EEE77A 	 fsitos s15,s15
 471 0042 9FED137A 	 flds s14,.L17
 472 0046 C7EE877A 	 fdivs s15,s15,s14
 473 004a 124B     	 ldr r3,.L17+4
 474 004c C3ED007A 	 fsts s15,[r3]
 162:../cleanflight/src/main/flight/imu.c ****     imuRuntimeConfig.acc_unarmedcal = imuConfig()->acc_unarmedcal;
 475              	 .loc 2 162 0
 476 0050 FFF7FEFF 	 bl imuConfig
 477 0054 0346     	 mov r3,r0
 478 0056 5A79     	 ldrb r2,[r3,#5]
 479 0058 0E4B     	 ldr r3,.L17+4
 480 005a 1A72     	 strb r2,[r3,#8]
 163:../cleanflight/src/main/flight/imu.c ****     imuRuntimeConfig.small_angle = imuConfig()->small_angle;
 481              	 .loc 2 163 0
 482 005c FFF7FEFF 	 bl imuConfig
 483 0060 0346     	 mov r3,r0
 484 0062 1A79     	 ldrb r2,[r3,#4]
 485 0064 0B4B     	 ldr r3,.L17+4
 486 0066 5A72     	 strb r2,[r3,#9]
 164:../cleanflight/src/main/flight/imu.c **** 
 165:../cleanflight/src/main/flight/imu.c ****     fc_acc = calculateAccZLowPassFilterRCTimeConstant(5.0f); // Set to fix value
 487              	 .loc 2 165 0
 488 0068 0B48     	 ldr r0,.L17+8
 489 006a FFF7FEFF 	 bl calculateAccZLowPassFilterRCTimeConstant
 490 006e 0246     	 mov r2,r0
 491 0070 0A4B     	 ldr r3,.L17+12
 492 0072 1A60     	 str r2,[r3]
 166:../cleanflight/src/main/flight/imu.c ****     throttleAngleScale = calculateThrottleAngleScale(throttle_correction_angle);
 493              	 .loc 2 166 0
 494 0074 FB88     	 ldrh r3,[r7,#6]
 495 0076 1846     	 mov r0,r3
 496 0078 FFF7FEFF 	 bl calculateThrottleAngleScale
 497 007c 0246     	 mov r2,r0
 498 007e 084B     	 ldr r3,.L17+16
 499 0080 1A60     	 str r2,[r3]
 167:../cleanflight/src/main/flight/imu.c ****     
 168:../cleanflight/src/main/flight/imu.c ****     throttleAngleValue = throttle_correction_value;
 500              	 .loc 2 168 0
 501 0082 7B79     	 ldrb r3,[r7,#5]
 502 0084 074A     	 ldr r2,.L17+20
 503 0086 1360     	 str r3,[r2]
 169:../cleanflight/src/main/flight/imu.c **** }
 504              	 .loc 2 169 0
 505 0088 0837     	 adds r7,r7,#8
 506              	.LCFI21:
 507              	 .cfi_def_cfa_offset 8
 508 008a BD46     	 mov sp,r7
 509              	.LCFI22:
 510              	 .cfi_def_cfa_register 13
 511              	 
 512 008c 80BD     	 pop {r7,pc}
 513              	.L18:
 514 008e 00BF     	 .align 2
 515              	.L17:
 516 0090 00401C46 	 .word 1176256512
 517 0094 00000000 	 .word imuRuntimeConfig
 518 0098 0000A040 	 .word 1084227584
 519 009c 00000000 	 .word fc_acc
 520 00a0 00000000 	 .word throttleAngleScale
 521 00a4 00000000 	 .word throttleAngleValue
 522              	 .cfi_endproc
 523              	.LFE560:
 525              	 .section .text.imuInit,"ax",%progbits
 526              	 .align 2
 527              	 .global imuInit
 528              	 .thumb
 529              	 .thumb_func
 531              	imuInit:
 532              	.LFB561:
 170:../cleanflight/src/main/flight/imu.c **** 
 171:../cleanflight/src/main/flight/imu.c **** void imuInit(void)
 172:../cleanflight/src/main/flight/imu.c **** {
 533              	 .loc 2 172 0
 534              	 .cfi_startproc
 535              	 
 536              	 
 537 0000 80B5     	 push {r7,lr}
 538              	.LCFI23:
 539              	 .cfi_def_cfa_offset 8
 540              	 .cfi_offset 7,-8
 541              	 .cfi_offset 14,-4
 542 0002 00AF     	 add r7,sp,#0
 543              	.LCFI24:
 544              	 .cfi_def_cfa_register 7
 173:../cleanflight/src/main/flight/imu.c ****     smallAngleCosZ = cos_approx(degreesToRadians(imuRuntimeConfig.small_angle));
 545              	 .loc 2 173 0
 546 0004 134B     	 ldr r3,.L20
 547 0006 5B7A     	 ldrb r3,[r3,#9]
 548 0008 9BB2     	 uxth r3,r3
 549 000a 1BB2     	 sxth r3,r3
 550 000c 1846     	 mov r0,r3
 551 000e FFF7FEFF 	 bl degreesToRadians
 552 0012 0346     	 mov r3,r0
 553 0014 1846     	 mov r0,r3
 554 0016 FFF7FEFF 	 bl cos_approx
 555 001a 0246     	 mov r2,r0
 556 001c 0E4B     	 ldr r3,.L20+4
 557 001e 1A60     	 str r2,[r3]
 174:../cleanflight/src/main/flight/imu.c ****     accVelScale = 9.80665f / acc.dev.acc_1G / 10000.0f;
 558              	 .loc 2 174 0
 559 0020 0E4B     	 ldr r3,.L20+8
 560 0022 B3F81130 	 ldrh r3,[r3,#17]
 561 0026 9BB2     	 uxth r3,r3
 562 0028 07EE903A 	 fmsr s15,r3
 563 002c F8EEE77A 	 fsitos s15,s15
 564 0030 9FED0B7A 	 flds s14,.L20+12
 565 0034 C7EE277A 	 fdivs s15,s14,s15
 566 0038 9FED0A7A 	 flds s14,.L20+16
 567 003c C7EE877A 	 fdivs s15,s15,s14
 568 0040 094B     	 ldr r3,.L20+20
 569 0042 C3ED007A 	 fsts s15,[r3]
 175:../cleanflight/src/main/flight/imu.c **** 
 176:../cleanflight/src/main/flight/imu.c **** #ifdef USE_GPS
 177:../cleanflight/src/main/flight/imu.c ****     canUseGPSHeading = true;
 570              	 .loc 2 177 0
 571 0046 094B     	 ldr r3,.L20+24
 572 0048 0122     	 movs r2,#1
 573 004a 1A70     	 strb r2,[r3]
 178:../cleanflight/src/main/flight/imu.c **** #else
 179:../cleanflight/src/main/flight/imu.c ****     canUseGPSHeading = false;
 180:../cleanflight/src/main/flight/imu.c **** #endif
 181:../cleanflight/src/main/flight/imu.c **** 
 182:../cleanflight/src/main/flight/imu.c ****     imuComputeRotationMatrix();
 574              	 .loc 2 182 0
 575 004c FFF7FEFF 	 bl imuComputeRotationMatrix
 183:../cleanflight/src/main/flight/imu.c **** 
 184:../cleanflight/src/main/flight/imu.c **** #if defined(SIMULATOR_BUILD) && defined(SIMULATOR_MULTITHREAD)
 185:../cleanflight/src/main/flight/imu.c ****     if (pthread_mutex_init(&imuUpdateLock, NULL) != 0) {
 186:../cleanflight/src/main/flight/imu.c ****         printf("Create imuUpdateLock error!\n");
 187:../cleanflight/src/main/flight/imu.c ****     }
 188:../cleanflight/src/main/flight/imu.c **** #endif
 189:../cleanflight/src/main/flight/imu.c **** }
 576              	 .loc 2 189 0
 577 0050 80BD     	 pop {r7,pc}
 578              	.L21:
 579 0052 00BF     	 .align 2
 580              	.L20:
 581 0054 00000000 	 .word imuRuntimeConfig
 582 0058 00000000 	 .word smallAngleCosZ
 583 005c 00000000 	 .word acc
 584 0060 0AE81C41 	 .word 1092413450
 585 0064 00401C46 	 .word 1176256512
 586 0068 00000000 	 .word accVelScale
 587 006c 00000000 	 .word canUseGPSHeading
 588              	 .cfi_endproc
 589              	.LFE561:
 591              	 .section .text.imuResetAccelerationSum,"ax",%progbits
 592              	 .align 2
 593              	 .global imuResetAccelerationSum
 594              	 .thumb
 595              	 .thumb_func
 597              	imuResetAccelerationSum:
 598              	.LFB562:
 190:../cleanflight/src/main/flight/imu.c **** 
 191:../cleanflight/src/main/flight/imu.c **** void imuResetAccelerationSum(void)
 192:../cleanflight/src/main/flight/imu.c **** {
 599              	 .loc 2 192 0
 600              	 .cfi_startproc
 601              	 
 602              	 
 603              	 
 604 0000 80B4     	 push {r7}
 605              	.LCFI25:
 606              	 .cfi_def_cfa_offset 4
 607              	 .cfi_offset 7,-4
 608 0002 00AF     	 add r7,sp,#0
 609              	.LCFI26:
 610              	 .cfi_def_cfa_register 7
 193:../cleanflight/src/main/flight/imu.c ****     accSum[0] = 0;
 611              	 .loc 2 193 0
 612 0004 094B     	 ldr r3,.L23
 613 0006 0022     	 movs r2,#0
 614 0008 1A60     	 str r2,[r3]
 194:../cleanflight/src/main/flight/imu.c ****     accSum[1] = 0;
 615              	 .loc 2 194 0
 616 000a 084B     	 ldr r3,.L23
 617 000c 0022     	 movs r2,#0
 618 000e 5A60     	 str r2,[r3,#4]
 195:../cleanflight/src/main/flight/imu.c ****     accSum[2] = 0;
 619              	 .loc 2 195 0
 620 0010 064B     	 ldr r3,.L23
 621 0012 0022     	 movs r2,#0
 622 0014 9A60     	 str r2,[r3,#8]
 196:../cleanflight/src/main/flight/imu.c ****     accSumCount = 0;
 623              	 .loc 2 196 0
 624 0016 064B     	 ldr r3,.L23+4
 625 0018 0022     	 movs r2,#0
 626 001a 1A60     	 str r2,[r3]
 197:../cleanflight/src/main/flight/imu.c ****     accTimeSum = 0;
 627              	 .loc 2 197 0
 628 001c 054B     	 ldr r3,.L23+8
 629 001e 0022     	 movs r2,#0
 630 0020 1A60     	 str r2,[r3]
 198:../cleanflight/src/main/flight/imu.c **** }
 631              	 .loc 2 198 0
 632 0022 BD46     	 mov sp,r7
 633              	.LCFI27:
 634              	 .cfi_def_cfa_register 13
 635              	 
 636 0024 5DF8047B 	 ldr r7,[sp],#4
 637              	.LCFI28:
 638              	 .cfi_restore 7
 639              	 .cfi_def_cfa_offset 0
 640 0028 7047     	 bx lr
 641              	.L24:
 642 002a 00BF     	 .align 2
 643              	.L23:
 644 002c 00000000 	 .word accSum
 645 0030 00000000 	 .word accSumCount
 646 0034 00000000 	 .word accTimeSum
 647              	 .cfi_endproc
 648              	.LFE562:
 650              	 .section .text.invSqrt,"ax",%progbits
 651              	 .align 2
 652              	 .thumb
 653              	 .thumb_func
 655              	invSqrt:
 656              	.LFB563:
 199:../cleanflight/src/main/flight/imu.c **** 
 200:../cleanflight/src/main/flight/imu.c **** static float invSqrt(float x)
 201:../cleanflight/src/main/flight/imu.c **** {
 657              	 .loc 2 201 0
 658              	 .cfi_startproc
 659              	 
 660              	 
 661 0000 80B5     	 push {r7,lr}
 662              	.LCFI29:
 663              	 .cfi_def_cfa_offset 8
 664              	 .cfi_offset 7,-8
 665              	 .cfi_offset 14,-4
 666 0002 82B0     	 sub sp,sp,#8
 667              	.LCFI30:
 668              	 .cfi_def_cfa_offset 16
 669 0004 00AF     	 add r7,sp,#0
 670              	.LCFI31:
 671              	 .cfi_def_cfa_register 7
 672 0006 7860     	 str r0,[r7,#4]
 202:../cleanflight/src/main/flight/imu.c ****     return 1.0f / sqrtf(x);
 673              	 .loc 2 202 0
 674 0008 7868     	 ldr r0,[r7,#4]
 675 000a FFF7FEFF 	 bl sqrtf
 676 000e 07EE100A 	 fmsr s14,r0
 677 0012 F7EE007A 	 fconsts s15,#112
 678 0016 C7EE877A 	 fdivs s15,s15,s14
 679 001a 17EE903A 	 fmrs r3,s15
 203:../cleanflight/src/main/flight/imu.c **** }
 680              	 .loc 2 203 0
 681 001e 1846     	 mov r0,r3
 682 0020 0837     	 adds r7,r7,#8
 683              	.LCFI32:
 684              	 .cfi_def_cfa_offset 8
 685 0022 BD46     	 mov sp,r7
 686              	.LCFI33:
 687              	 .cfi_def_cfa_register 13
 688              	 
 689 0024 80BD     	 pop {r7,pc}
 690              	 .cfi_endproc
 691              	.LFE563:
 693 0026 00BF     	 .section .text.imuMahonyAHRSupdate,"ax",%progbits
 694              	 .align 2
 695              	 .thumb
 696              	 .thumb_func
 698              	imuMahonyAHRSupdate:
 699              	.LFB564:
 204:../cleanflight/src/main/flight/imu.c **** 
 205:../cleanflight/src/main/flight/imu.c **** static void imuMahonyAHRSupdate(float dt, float gx, float gy, float gz,
 206:../cleanflight/src/main/flight/imu.c ****                                 bool useAcc, float ax, float ay, float az,
 207:../cleanflight/src/main/flight/imu.c ****                                 bool useMag, float mx, float my, float mz,
 208:../cleanflight/src/main/flight/imu.c ****                                 bool useCOG, float courseOverGround, const float dcmKpGain)
 209:../cleanflight/src/main/flight/imu.c **** {
 700              	 .loc 2 209 0
 701              	 .cfi_startproc
 702              	 
 703              	 
 704 0000 80B5     	 push {r7,lr}
 705              	.LCFI34:
 706              	 .cfi_def_cfa_offset 8
 707              	 .cfi_offset 7,-8
 708              	 .cfi_offset 14,-4
 709 0002 2DED028B 	 fstmfdd sp!,{d8}
 710              	.LCFI35:
 711              	 .cfi_def_cfa_offset 16
 712              	 .cfi_offset 80,-16
 713              	 .cfi_offset 81,-12
 714 0006 96B0     	 sub sp,sp,#88
 715              	.LCFI36:
 716              	 .cfi_def_cfa_offset 104
 717 0008 00AF     	 add r7,sp,#0
 718              	.LCFI37:
 719              	 .cfi_def_cfa_register 7
 720 000a F860     	 str r0,[r7,#12]
 721 000c B960     	 str r1,[r7,#8]
 722 000e 7A60     	 str r2,[r7,#4]
 723 0010 3B60     	 str r3,[r7]
 210:../cleanflight/src/main/flight/imu.c ****     static float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f;    // integral error 
 211:../cleanflight/src/main/flight/imu.c **** 
 212:../cleanflight/src/main/flight/imu.c ****     // Calculate general spin rate (rad/s)
 213:../cleanflight/src/main/flight/imu.c ****     const float spin_rate = sqrtf(sq(gx) + sq(gy) + sq(gz));
 724              	 .loc 2 213 0
 725 0012 97ED027A 	 flds s14,[r7,#8]
 726 0016 D7ED027A 	 flds s15,[r7,#8]
 727 001a 27EE277A 	 fmuls s14,s14,s15
 728 001e D7ED016A 	 flds s13,[r7,#4]
 729 0022 D7ED017A 	 flds s15,[r7,#4]
 730 0026 66EEA77A 	 fmuls s15,s13,s15
 731 002a 37EE277A 	 fadds s14,s14,s15
 732 002e D7ED006A 	 flds s13,[r7]
 733 0032 D7ED007A 	 flds s15,[r7]
 734 0036 66EEA77A 	 fmuls s15,s13,s15
 735 003a 77EE277A 	 fadds s15,s14,s15
 736 003e 17EE900A 	 fmrs r0,s15
 737 0042 FFF7FEFF 	 bl sqrtf
 738 0046 B864     	 str r0,[r7,#72]
 214:../cleanflight/src/main/flight/imu.c **** 
 215:../cleanflight/src/main/flight/imu.c ****     // Use raw heading error (from GPS or whatever else)
 216:../cleanflight/src/main/flight/imu.c ****     float ex = 0, ey = 0, ez = 0;
 739              	 .loc 2 216 0
 740 0048 4FF00003 	 mov r3,#0
 741 004c 7B65     	 str r3,[r7,#84]
 742 004e 4FF00003 	 mov r3,#0
 743 0052 3B65     	 str r3,[r7,#80]
 744 0054 4FF00003 	 mov r3,#0
 745 0058 FB64     	 str r3,[r7,#76]
 217:../cleanflight/src/main/flight/imu.c ****     if (useCOG) {
 746              	 .loc 2 217 0
 747 005a 97F88830 	 ldrb r3,[r7,#136]
 748 005e 002B     	 cmp r3,#0
 749 0060 5BD0     	 beq .L28
 750              	.LBB2:
 218:../cleanflight/src/main/flight/imu.c ****         while (courseOverGround >  M_PIf) {
 751              	 .loc 2 218 0
 752 0062 07E0     	 b .L29
 753              	.L30:
 219:../cleanflight/src/main/flight/imu.c ****             courseOverGround -= (2.0f * M_PIf);
 754              	 .loc 2 219 0
 755 0064 D7ED237A 	 flds s15,[r7,#140]
 756 0068 9FEDD57A 	 flds s14,.L47
 757 006c 77EEC77A 	 fsubs s15,s15,s14
 758 0070 C7ED237A 	 fsts s15,[r7,#140]
 759              	.L29:
 218:../cleanflight/src/main/flight/imu.c ****         while (courseOverGround >  M_PIf) {
 760              	 .loc 2 218 0
 761 0074 D7ED237A 	 flds s15,[r7,#140]
 762 0078 9FEDD27A 	 flds s14,.L47+4
 763 007c F4EEC77A 	 fcmpes s15,s14
 764 0080 F1EE10FA 	 fmstat
 765 0084 EEDC     	 bgt .L30
 220:../cleanflight/src/main/flight/imu.c ****         }
 221:../cleanflight/src/main/flight/imu.c **** 
 222:../cleanflight/src/main/flight/imu.c ****         while (courseOverGround < -M_PIf) {
 766              	 .loc 2 222 0
 767 0086 07E0     	 b .L31
 768              	.L32:
 223:../cleanflight/src/main/flight/imu.c ****             courseOverGround += (2.0f * M_PIf);
 769              	 .loc 2 223 0
 770 0088 D7ED237A 	 flds s15,[r7,#140]
 771 008c 9FEDCC7A 	 flds s14,.L47
 772 0090 77EE877A 	 fadds s15,s15,s14
 773 0094 C7ED237A 	 fsts s15,[r7,#140]
 774              	.L31:
 222:../cleanflight/src/main/flight/imu.c ****             courseOverGround += (2.0f * M_PIf);
 775              	 .loc 2 222 0
 776 0098 D7ED237A 	 flds s15,[r7,#140]
 777 009c 9FEDCA7A 	 flds s14,.L47+8
 778 00a0 F4EEC77A 	 fcmpes s15,s14
 779 00a4 F1EE10FA 	 fmstat
 780 00a8 EED4     	 bmi .L32
 224:../cleanflight/src/main/flight/imu.c ****         }
 225:../cleanflight/src/main/flight/imu.c **** 
 226:../cleanflight/src/main/flight/imu.c ****         const float ez_ef = (- sin_approx(courseOverGround) * rMat[0][0] - cos_approx(courseOverGro
 781              	 .loc 2 226 0
 782 00aa D7F88C00 	 ldr r0,[r7,#140]
 783 00ae FFF7FEFF 	 bl sin_approx
 784 00b2 0346     	 mov r3,r0
 785 00b4 07EE903A 	 fmsr s15,r3
 786 00b8 B1EE677A 	 fnegs s14,s15
 787 00bc C34B     	 ldr r3,.L47+12
 788 00be D3ED007A 	 flds s15,[r3]
 789 00c2 27EE278A 	 fmuls s16,s14,s15
 790 00c6 D7F88C00 	 ldr r0,[r7,#140]
 791 00ca FFF7FEFF 	 bl cos_approx
 792 00ce 07EE100A 	 fmsr s14,r0
 793 00d2 BE4B     	 ldr r3,.L47+12
 794 00d4 D3ED037A 	 flds s15,[r3,#12]
 795 00d8 67EE277A 	 fmuls s15,s14,s15
 796 00dc 78EE677A 	 fsubs s15,s16,s15
 797 00e0 C7ED117A 	 fsts s15,[r7,#68]
 227:../cleanflight/src/main/flight/imu.c **** 
 228:../cleanflight/src/main/flight/imu.c ****         ex = rMat[2][0] * ez_ef;
 798              	 .loc 2 228 0
 799 00e4 B94B     	 ldr r3,.L47+12
 800 00e6 93ED067A 	 flds s14,[r3,#24]
 801 00ea D7ED117A 	 flds s15,[r7,#68]
 802 00ee 67EE277A 	 fmuls s15,s14,s15
 803 00f2 C7ED157A 	 fsts s15,[r7,#84]
 229:../cleanflight/src/main/flight/imu.c ****         ey = rMat[2][1] * ez_ef;
 804              	 .loc 2 229 0
 805 00f6 B54B     	 ldr r3,.L47+12
 806 00f8 93ED077A 	 flds s14,[r3,#28]
 807 00fc D7ED117A 	 flds s15,[r7,#68]
 808 0100 67EE277A 	 fmuls s15,s14,s15
 809 0104 C7ED147A 	 fsts s15,[r7,#80]
 230:../cleanflight/src/main/flight/imu.c ****         ez = rMat[2][2] * ez_ef;
 810              	 .loc 2 230 0
 811 0108 B04B     	 ldr r3,.L47+12
 812 010a 93ED087A 	 flds s14,[r3,#32]
 813 010e D7ED117A 	 flds s15,[r7,#68]
 814 0112 67EE277A 	 fmuls s15,s14,s15
 815 0116 C7ED137A 	 fsts s15,[r7,#76]
 816              	.L28:
 817              	.LBE2:
 231:../cleanflight/src/main/flight/imu.c ****     }
 232:../cleanflight/src/main/flight/imu.c **** 
 233:../cleanflight/src/main/flight/imu.c **** #ifdef USE_MAG
 234:../cleanflight/src/main/flight/imu.c ****     // Use measured magnetic field vector
 235:../cleanflight/src/main/flight/imu.c ****     float recipMagNorm = sq(mx) + sq(my) + sq(mz);
 818              	 .loc 2 235 0
 819 011a 97ED1F7A 	 flds s14,[r7,#124]
 820 011e D7ED1F7A 	 flds s15,[r7,#124]
 821 0122 27EE277A 	 fmuls s14,s14,s15
 822 0126 D7ED206A 	 flds s13,[r7,#128]
 823 012a D7ED207A 	 flds s15,[r7,#128]
 824 012e 66EEA77A 	 fmuls s15,s13,s15
 825 0132 37EE277A 	 fadds s14,s14,s15
 826 0136 D7ED216A 	 flds s13,[r7,#132]
 827 013a D7ED217A 	 flds s15,[r7,#132]
 828 013e 66EEA77A 	 fmuls s15,s13,s15
 829 0142 77EE277A 	 fadds s15,s14,s15
 830 0146 C7ED107A 	 fsts s15,[r7,#64]
 236:../cleanflight/src/main/flight/imu.c ****     if (useMag && recipMagNorm > 0.01f) {
 831              	 .loc 2 236 0
 832 014a 97F87830 	 ldrb r3,[r7,#120]
 833 014e 002B     	 cmp r3,#0
 834 0150 00F0A080 	 beq .L33
 835              	 .loc 2 236 0 is_stmt 0 discriminator 1
 836 0154 D7ED107A 	 flds s15,[r7,#64]
 837 0158 9FED9D7A 	 flds s14,.L47+16
 838 015c F4EEC77A 	 fcmpes s15,s14
 839 0160 F1EE10FA 	 fmstat
 840 0164 40F39680 	 ble .L33
 841              	.LBB3:
 237:../cleanflight/src/main/flight/imu.c ****         // Normalise magnetometer measurement
 238:../cleanflight/src/main/flight/imu.c ****         recipMagNorm = invSqrt(recipMagNorm);
 842              	 .loc 2 238 0 is_stmt 1
 843 0168 386C     	 ldr r0,[r7,#64]
 844 016a FFF7FEFF 	 bl invSqrt
 845 016e 3864     	 str r0,[r7,#64]
 239:../cleanflight/src/main/flight/imu.c ****         mx *= recipMagNorm;
 846              	 .loc 2 239 0
 847 0170 97ED1F7A 	 flds s14,[r7,#124]
 848 0174 D7ED107A 	 flds s15,[r7,#64]
 849 0178 67EE277A 	 fmuls s15,s14,s15
 850 017c C7ED1F7A 	 fsts s15,[r7,#124]
 240:../cleanflight/src/main/flight/imu.c ****         my *= recipMagNorm;
 851              	 .loc 2 240 0
 852 0180 97ED207A 	 flds s14,[r7,#128]
 853 0184 D7ED107A 	 flds s15,[r7,#64]
 854 0188 67EE277A 	 fmuls s15,s14,s15
 855 018c C7ED207A 	 fsts s15,[r7,#128]
 241:../cleanflight/src/main/flight/imu.c ****         mz *= recipMagNorm;
 856              	 .loc 2 241 0
 857 0190 97ED217A 	 flds s14,[r7,#132]
 858 0194 D7ED107A 	 flds s15,[r7,#64]
 859 0198 67EE277A 	 fmuls s15,s14,s15
 860 019c C7ED217A 	 fsts s15,[r7,#132]
 242:../cleanflight/src/main/flight/imu.c **** 
 243:../cleanflight/src/main/flight/imu.c ****         // For magnetometer correction we make an assumption that magnetic field is perpendicular t
 244:../cleanflight/src/main/flight/imu.c ****         // This way magnetic field will only affect heading and wont mess roll/pitch angles
 245:../cleanflight/src/main/flight/imu.c **** 
 246:../cleanflight/src/main/flight/imu.c ****         // (hx; hy; 0) - measured mag field vector in EF (assuming Z-component is zero)
 247:../cleanflight/src/main/flight/imu.c ****         // (bx; 0; 0) - reference mag field vector heading due North in EF (assuming Z-component is
 248:../cleanflight/src/main/flight/imu.c ****         const float hx = rMat[0][0] * mx + rMat[0][1] * my + rMat[0][2] * mz;
 861              	 .loc 2 248 0
 862 01a0 8A4B     	 ldr r3,.L47+12
 863 01a2 93ED007A 	 flds s14,[r3]
 864 01a6 D7ED1F7A 	 flds s15,[r7,#124]
 865 01aa 27EE277A 	 fmuls s14,s14,s15
 866 01ae 874B     	 ldr r3,.L47+12
 867 01b0 D3ED016A 	 flds s13,[r3,#4]
 868 01b4 D7ED207A 	 flds s15,[r7,#128]
 869 01b8 66EEA77A 	 fmuls s15,s13,s15
 870 01bc 37EE277A 	 fadds s14,s14,s15
 871 01c0 824B     	 ldr r3,.L47+12
 872 01c2 D3ED026A 	 flds s13,[r3,#8]
 873 01c6 D7ED217A 	 flds s15,[r7,#132]
 874 01ca 66EEA77A 	 fmuls s15,s13,s15
 875 01ce 77EE277A 	 fadds s15,s14,s15
 876 01d2 C7ED0F7A 	 fsts s15,[r7,#60]
 249:../cleanflight/src/main/flight/imu.c ****         const float hy = rMat[1][0] * mx + rMat[1][1] * my + rMat[1][2] * mz;
 877              	 .loc 2 249 0
 878 01d6 7D4B     	 ldr r3,.L47+12
 879 01d8 93ED037A 	 flds s14,[r3,#12]
 880 01dc D7ED1F7A 	 flds s15,[r7,#124]
 881 01e0 27EE277A 	 fmuls s14,s14,s15
 882 01e4 794B     	 ldr r3,.L47+12
 883 01e6 D3ED046A 	 flds s13,[r3,#16]
 884 01ea D7ED207A 	 flds s15,[r7,#128]
 885 01ee 66EEA77A 	 fmuls s15,s13,s15
 886 01f2 37EE277A 	 fadds s14,s14,s15
 887 01f6 754B     	 ldr r3,.L47+12
 888 01f8 D3ED056A 	 flds s13,[r3,#20]
 889 01fc D7ED217A 	 flds s15,[r7,#132]
 890 0200 66EEA77A 	 fmuls s15,s13,s15
 891 0204 77EE277A 	 fadds s15,s14,s15
 892 0208 C7ED0E7A 	 fsts s15,[r7,#56]
 250:../cleanflight/src/main/flight/imu.c ****         const float bx = sqrtf(hx * hx + hy * hy);
 893              	 .loc 2 250 0
 894 020c 97ED0F7A 	 flds s14,[r7,#60]
 895 0210 D7ED0F7A 	 flds s15,[r7,#60]
 896 0214 27EE277A 	 fmuls s14,s14,s15
 897 0218 D7ED0E6A 	 flds s13,[r7,#56]
 898 021c D7ED0E7A 	 flds s15,[r7,#56]
 899 0220 66EEA77A 	 fmuls s15,s13,s15
 900 0224 77EE277A 	 fadds s15,s14,s15
 901 0228 17EE900A 	 fmrs r0,s15
 902 022c FFF7FEFF 	 bl sqrtf
 903 0230 7863     	 str r0,[r7,#52]
 251:../cleanflight/src/main/flight/imu.c **** 
 252:../cleanflight/src/main/flight/imu.c ****         // magnetometer error is cross product between estimated magnetic north and measured magnet
 253:../cleanflight/src/main/flight/imu.c ****         const float ez_ef = -(hy * bx);
 904              	 .loc 2 253 0
 905 0232 97ED0E7A 	 flds s14,[r7,#56]
 906 0236 D7ED0D7A 	 flds s15,[r7,#52]
 907 023a 67EE277A 	 fmuls s15,s14,s15
 908 023e F1EE677A 	 fnegs s15,s15
 909 0242 C7ED0C7A 	 fsts s15,[r7,#48]
 254:../cleanflight/src/main/flight/imu.c **** 
 255:../cleanflight/src/main/flight/imu.c ****         // Rotate mag error vector back to BF and accumulate
 256:../cleanflight/src/main/flight/imu.c ****         ex += rMat[2][0] * ez_ef;
 910              	 .loc 2 256 0
 911 0246 614B     	 ldr r3,.L47+12
 912 0248 93ED067A 	 flds s14,[r3,#24]
 913 024c D7ED0C7A 	 flds s15,[r7,#48]
 914 0250 67EE277A 	 fmuls s15,s14,s15
 915 0254 97ED157A 	 flds s14,[r7,#84]
 916 0258 77EE277A 	 fadds s15,s14,s15
 917 025c C7ED157A 	 fsts s15,[r7,#84]
 257:../cleanflight/src/main/flight/imu.c ****         ey += rMat[2][1] * ez_ef;
 918              	 .loc 2 257 0
 919 0260 5A4B     	 ldr r3,.L47+12
 920 0262 93ED077A 	 flds s14,[r3,#28]
 921 0266 D7ED0C7A 	 flds s15,[r7,#48]
 922 026a 67EE277A 	 fmuls s15,s14,s15
 923 026e 97ED147A 	 flds s14,[r7,#80]
 924 0272 77EE277A 	 fadds s15,s14,s15
 925 0276 C7ED147A 	 fsts s15,[r7,#80]
 258:../cleanflight/src/main/flight/imu.c ****         ez += rMat[2][2] * ez_ef;
 926              	 .loc 2 258 0
 927 027a 544B     	 ldr r3,.L47+12
 928 027c 93ED087A 	 flds s14,[r3,#32]
 929 0280 D7ED0C7A 	 flds s15,[r7,#48]
 930 0284 67EE277A 	 fmuls s15,s14,s15
 931 0288 97ED137A 	 flds s14,[r7,#76]
 932 028c 77EE277A 	 fadds s15,s14,s15
 933 0290 C7ED137A 	 fsts s15,[r7,#76]
 934              	.L33:
 935              	.LBE3:
 259:../cleanflight/src/main/flight/imu.c ****     }
 260:../cleanflight/src/main/flight/imu.c **** #else
 261:../cleanflight/src/main/flight/imu.c ****     UNUSED(useMag);
 262:../cleanflight/src/main/flight/imu.c ****     UNUSED(mx);
 263:../cleanflight/src/main/flight/imu.c ****     UNUSED(my);
 264:../cleanflight/src/main/flight/imu.c ****     UNUSED(mz);
 265:../cleanflight/src/main/flight/imu.c **** #endif
 266:../cleanflight/src/main/flight/imu.c **** 
 267:../cleanflight/src/main/flight/imu.c ****     // Use measured acceleration vector
 268:../cleanflight/src/main/flight/imu.c ****     float recipAccNorm = sq(ax) + sq(ay) + sq(az);
 936              	 .loc 2 268 0
 937 0294 97ED1B7A 	 flds s14,[r7,#108]
 938 0298 D7ED1B7A 	 flds s15,[r7,#108]
 939 029c 27EE277A 	 fmuls s14,s14,s15
 940 02a0 D7ED1C6A 	 flds s13,[r7,#112]
 941 02a4 D7ED1C7A 	 flds s15,[r7,#112]
 942 02a8 66EEA77A 	 fmuls s15,s13,s15
 943 02ac 37EE277A 	 fadds s14,s14,s15
 944 02b0 D7ED1D6A 	 flds s13,[r7,#116]
 945 02b4 D7ED1D7A 	 flds s15,[r7,#116]
 946 02b8 66EEA77A 	 fmuls s15,s13,s15
 947 02bc 77EE277A 	 fadds s15,s14,s15
 948 02c0 C7ED0B7A 	 fsts s15,[r7,#44]
 269:../cleanflight/src/main/flight/imu.c ****     if (useAcc && recipAccNorm > 0.01f) {
 949              	 .loc 2 269 0
 950 02c4 97F86830 	 ldrb r3,[r7,#104]
 951 02c8 002B     	 cmp r3,#0
 952 02ca 66D0     	 beq .L35
 953              	 .loc 2 269 0 is_stmt 0 discriminator 1
 954 02cc D7ED0B7A 	 flds s15,[r7,#44]
 955 02d0 9FED3F7A 	 flds s14,.L47+16
 956 02d4 F4EEC77A 	 fcmpes s15,s14
 957 02d8 F1EE10FA 	 fmstat
 958 02dc 5DDD     	 ble .L35
 270:../cleanflight/src/main/flight/imu.c ****         // Normalise accelerometer measurement
 271:../cleanflight/src/main/flight/imu.c ****         recipAccNorm = invSqrt(recipAccNorm);
 959              	 .loc 2 271 0 is_stmt 1
 960 02de F86A     	 ldr r0,[r7,#44]
 961 02e0 FFF7FEFF 	 bl invSqrt
 962 02e4 F862     	 str r0,[r7,#44]
 272:../cleanflight/src/main/flight/imu.c ****         ax *= recipAccNorm;
 963              	 .loc 2 272 0
 964 02e6 97ED1B7A 	 flds s14,[r7,#108]
 965 02ea D7ED0B7A 	 flds s15,[r7,#44]
 966 02ee 67EE277A 	 fmuls s15,s14,s15
 967 02f2 C7ED1B7A 	 fsts s15,[r7,#108]
 273:../cleanflight/src/main/flight/imu.c ****         ay *= recipAccNorm;
 968              	 .loc 2 273 0
 969 02f6 97ED1C7A 	 flds s14,[r7,#112]
 970 02fa D7ED0B7A 	 flds s15,[r7,#44]
 971 02fe 67EE277A 	 fmuls s15,s14,s15
 972 0302 C7ED1C7A 	 fsts s15,[r7,#112]
 274:../cleanflight/src/main/flight/imu.c ****         az *= recipAccNorm;
 973              	 .loc 2 274 0
 974 0306 97ED1D7A 	 flds s14,[r7,#116]
 975 030a D7ED0B7A 	 flds s15,[r7,#44]
 976 030e 67EE277A 	 fmuls s15,s14,s15
 977 0312 C7ED1D7A 	 fsts s15,[r7,#116]
 275:../cleanflight/src/main/flight/imu.c **** 
 276:../cleanflight/src/main/flight/imu.c ****         // Error is sum of cross product between estimated direction and measured direction of grav
 277:../cleanflight/src/main/flight/imu.c ****         ex += (ay * rMat[2][2] - az * rMat[2][1]);
 978              	 .loc 2 277 0
 979 0316 2D4B     	 ldr r3,.L47+12
 980 0318 93ED087A 	 flds s14,[r3,#32]
 981 031c D7ED1C7A 	 flds s15,[r7,#112]
 982 0320 27EE277A 	 fmuls s14,s14,s15
 983 0324 294B     	 ldr r3,.L47+12
 984 0326 D3ED076A 	 flds s13,[r3,#28]
 985 032a D7ED1D7A 	 flds s15,[r7,#116]
 986 032e 66EEA77A 	 fmuls s15,s13,s15
 987 0332 77EE677A 	 fsubs s15,s14,s15
 988 0336 97ED157A 	 flds s14,[r7,#84]
 989 033a 77EE277A 	 fadds s15,s14,s15
 990 033e C7ED157A 	 fsts s15,[r7,#84]
 278:../cleanflight/src/main/flight/imu.c ****         ey += (az * rMat[2][0] - ax * rMat[2][2]);
 991              	 .loc 2 278 0
 992 0342 224B     	 ldr r3,.L47+12
 993 0344 93ED067A 	 flds s14,[r3,#24]
 994 0348 D7ED1D7A 	 flds s15,[r7,#116]
 995 034c 27EE277A 	 fmuls s14,s14,s15
 996 0350 1E4B     	 ldr r3,.L47+12
 997 0352 D3ED086A 	 flds s13,[r3,#32]
 998 0356 D7ED1B7A 	 flds s15,[r7,#108]
 999 035a 66EEA77A 	 fmuls s15,s13,s15
 1000 035e 77EE677A 	 fsubs s15,s14,s15
 1001 0362 97ED147A 	 flds s14,[r7,#80]
 1002 0366 77EE277A 	 fadds s15,s14,s15
 1003 036a C7ED147A 	 fsts s15,[r7,#80]
 279:../cleanflight/src/main/flight/imu.c ****         ez += (ax * rMat[2][1] - ay * rMat[2][0]);
 1004              	 .loc 2 279 0
 1005 036e 174B     	 ldr r3,.L47+12
 1006 0370 93ED077A 	 flds s14,[r3,#28]
 1007 0374 D7ED1B7A 	 flds s15,[r7,#108]
 1008 0378 27EE277A 	 fmuls s14,s14,s15
 1009 037c 134B     	 ldr r3,.L47+12
 1010 037e D3ED066A 	 flds s13,[r3,#24]
 1011 0382 D7ED1C7A 	 flds s15,[r7,#112]
 1012 0386 66EEA77A 	 fmuls s15,s13,s15
 1013 038a 77EE677A 	 fsubs s15,s14,s15
 1014 038e 97ED137A 	 flds s14,[r7,#76]
 1015 0392 77EE277A 	 fadds s15,s14,s15
 1016 0396 C7ED137A 	 fsts s15,[r7,#76]
 1017              	.L35:
 280:../cleanflight/src/main/flight/imu.c ****     }
 281:../cleanflight/src/main/flight/imu.c **** 
 282:../cleanflight/src/main/flight/imu.c ****     // Compute and apply integral feedback if enabled
 283:../cleanflight/src/main/flight/imu.c ****     if (imuRuntimeConfig.dcm_ki > 0.0f) {
 1018              	 .loc 2 283 0
 1019 039a 0E4B     	 ldr r3,.L47+20
 1020 039c D3ED007A 	 flds s15,[r3]
 1021 03a0 F5EEC07A 	 fcmpezs s15
 1022 03a4 F1EE10FA 	 fmstat
 1023 03a8 52DD     	 ble .L46
 284:../cleanflight/src/main/flight/imu.c ****         // Stop integrating if spinning beyond the certain limit
 285:../cleanflight/src/main/flight/imu.c ****         if (spin_rate < DEGREES_TO_RADIANS(SPIN_RATE_LIMIT)) {
 1024              	 .loc 2 285 0
 1025 03aa D7ED127A 	 flds s15,[r7,#72]
 1026 03ae 9FED0A7A 	 flds s14,.L47+24
 1027 03b2 F4EEC77A 	 fcmpes s15,s14
 1028 03b6 F1EE10FA 	 fmstat
 1029 03ba 0FD4     	 bmi .L45
 1030 03bc 54E0     	 b .L41
 1031              	.L48:
 1032 03be 00BF     	 .align 2
 1033              	.L47:
 1034 03c0 DB0FC940 	 .word 1086918619
 1035 03c4 DB0F4940 	 .word 1078530011
 1036 03c8 DB0F49C0 	 .word -1068953637
 1037 03cc 00000000 	 .word rMat
 1038 03d0 0AD7233C 	 .word 1008981770
 1039 03d4 00000000 	 .word imuRuntimeConfig
 1040 03d8 C2B8B23E 	 .word 1051900098
 1041              	.L45:
 1042              	.LBB4:
 286:../cleanflight/src/main/flight/imu.c ****             const float dcmKiGain = imuRuntimeConfig.dcm_ki;
 1043              	 .loc 2 286 0
 1044 03dc BE4B     	 ldr r3,.L49
 1045 03de 1B68     	 ldr r3,[r3]
 1046 03e0 BB62     	 str r3,[r7,#40]
 287:../cleanflight/src/main/flight/imu.c ****             integralFBx += dcmKiGain * ex * dt;    // integral error scaled by Ki
 1047              	 .loc 2 287 0
 1048 03e2 97ED0A7A 	 flds s14,[r7,#40]
 1049 03e6 D7ED157A 	 flds s15,[r7,#84]
 1050 03ea 27EE277A 	 fmuls s14,s14,s15
 1051 03ee D7ED037A 	 flds s15,[r7,#12]
 1052 03f2 27EE277A 	 fmuls s14,s14,s15
 1053 03f6 B94B     	 ldr r3,.L49+4
 1054 03f8 D3ED007A 	 flds s15,[r3]
 1055 03fc 77EE277A 	 fadds s15,s14,s15
 1056 0400 B64B     	 ldr r3,.L49+4
 1057 0402 C3ED007A 	 fsts s15,[r3]
 288:../cleanflight/src/main/flight/imu.c ****             integralFBy += dcmKiGain * ey * dt;
 1058              	 .loc 2 288 0
 1059 0406 97ED0A7A 	 flds s14,[r7,#40]
 1060 040a D7ED147A 	 flds s15,[r7,#80]
 1061 040e 27EE277A 	 fmuls s14,s14,s15
 1062 0412 D7ED037A 	 flds s15,[r7,#12]
 1063 0416 27EE277A 	 fmuls s14,s14,s15
 1064 041a B14B     	 ldr r3,.L49+8
 1065 041c D3ED007A 	 flds s15,[r3]
 1066 0420 77EE277A 	 fadds s15,s14,s15
 1067 0424 AE4B     	 ldr r3,.L49+8
 1068 0426 C3ED007A 	 fsts s15,[r3]
 289:../cleanflight/src/main/flight/imu.c ****             integralFBz += dcmKiGain * ez * dt;
 1069              	 .loc 2 289 0
 1070 042a 97ED0A7A 	 flds s14,[r7,#40]
 1071 042e D7ED137A 	 flds s15,[r7,#76]
 1072 0432 27EE277A 	 fmuls s14,s14,s15
 1073 0436 D7ED037A 	 flds s15,[r7,#12]
 1074 043a 27EE277A 	 fmuls s14,s14,s15
 1075 043e A94B     	 ldr r3,.L49+12
 1076 0440 D3ED007A 	 flds s15,[r3]
 1077 0444 77EE277A 	 fadds s15,s14,s15
 1078 0448 A64B     	 ldr r3,.L49+12
 1079 044a C3ED007A 	 fsts s15,[r3]
 1080 044e 0BE0     	 b .L41
 1081              	.L46:
 1082              	.LBE4:
 290:../cleanflight/src/main/flight/imu.c ****         }
 291:../cleanflight/src/main/flight/imu.c ****     } else {
 292:../cleanflight/src/main/flight/imu.c ****         integralFBx = 0.0f;    // prevent integral windup
 1083              	 .loc 2 292 0
 1084 0450 A24B     	 ldr r3,.L49+4
 1085 0452 4FF00002 	 mov r2,#0
 1086 0456 1A60     	 str r2,[r3]
 293:../cleanflight/src/main/flight/imu.c ****         integralFBy = 0.0f;
 1087              	 .loc 2 293 0
 1088 0458 A14B     	 ldr r3,.L49+8
 1089 045a 4FF00002 	 mov r2,#0
 1090 045e 1A60     	 str r2,[r3]
 294:../cleanflight/src/main/flight/imu.c ****         integralFBz = 0.0f;
 1091              	 .loc 2 294 0
 1092 0460 A04B     	 ldr r3,.L49+12
 1093 0462 4FF00002 	 mov r2,#0
 1094 0466 1A60     	 str r2,[r3]
 1095              	.L41:
 295:../cleanflight/src/main/flight/imu.c ****     }
 296:../cleanflight/src/main/flight/imu.c **** 
 297:../cleanflight/src/main/flight/imu.c ****     // Apply proportional and integral feedback
 298:../cleanflight/src/main/flight/imu.c ****     gx += dcmKpGain * ex + integralFBx;
 1096              	 .loc 2 298 0
 1097 0468 97ED247A 	 flds s14,[r7,#144]
 1098 046c D7ED157A 	 flds s15,[r7,#84]
 1099 0470 27EE277A 	 fmuls s14,s14,s15
 1100 0474 994B     	 ldr r3,.L49+4
 1101 0476 D3ED007A 	 flds s15,[r3]
 1102 047a 77EE277A 	 fadds s15,s14,s15
 1103 047e 97ED027A 	 flds s14,[r7,#8]
 1104 0482 77EE277A 	 fadds s15,s14,s15
 1105 0486 C7ED027A 	 fsts s15,[r7,#8]
 299:../cleanflight/src/main/flight/imu.c ****     gy += dcmKpGain * ey + integralFBy;
 1106              	 .loc 2 299 0
 1107 048a 97ED247A 	 flds s14,[r7,#144]
 1108 048e D7ED147A 	 flds s15,[r7,#80]
 1109 0492 27EE277A 	 fmuls s14,s14,s15
 1110 0496 924B     	 ldr r3,.L49+8
 1111 0498 D3ED007A 	 flds s15,[r3]
 1112 049c 77EE277A 	 fadds s15,s14,s15
 1113 04a0 97ED017A 	 flds s14,[r7,#4]
 1114 04a4 77EE277A 	 fadds s15,s14,s15
 1115 04a8 C7ED017A 	 fsts s15,[r7,#4]
 300:../cleanflight/src/main/flight/imu.c ****     gz += dcmKpGain * ez + integralFBz;
 1116              	 .loc 2 300 0
 1117 04ac 97ED247A 	 flds s14,[r7,#144]
 1118 04b0 D7ED137A 	 flds s15,[r7,#76]
 1119 04b4 27EE277A 	 fmuls s14,s14,s15
 1120 04b8 8A4B     	 ldr r3,.L49+12
 1121 04ba D3ED007A 	 flds s15,[r3]
 1122 04be 77EE277A 	 fadds s15,s14,s15
 1123 04c2 97ED007A 	 flds s14,[r7]
 1124 04c6 77EE277A 	 fadds s15,s14,s15
 1125 04ca C7ED007A 	 fsts s15,[r7]
 301:../cleanflight/src/main/flight/imu.c **** 
 302:../cleanflight/src/main/flight/imu.c ****     // Integrate rate of change of quaternion
 303:../cleanflight/src/main/flight/imu.c ****     gx *= (0.5f * dt);
 1126              	 .loc 2 303 0
 1127 04ce D7ED037A 	 flds s15,[r7,#12]
 1128 04d2 B6EE007A 	 fconsts s14,#96
 1129 04d6 67EE877A 	 fmuls s15,s15,s14
 1130 04da 97ED027A 	 flds s14,[r7,#8]
 1131 04de 67EE277A 	 fmuls s15,s14,s15
 1132 04e2 C7ED027A 	 fsts s15,[r7,#8]
 304:../cleanflight/src/main/flight/imu.c ****     gy *= (0.5f * dt);
 1133              	 .loc 2 304 0
 1134 04e6 D7ED037A 	 flds s15,[r7,#12]
 1135 04ea B6EE007A 	 fconsts s14,#96
 1136 04ee 67EE877A 	 fmuls s15,s15,s14
 1137 04f2 97ED017A 	 flds s14,[r7,#4]
 1138 04f6 67EE277A 	 fmuls s15,s14,s15
 1139 04fa C7ED017A 	 fsts s15,[r7,#4]
 305:../cleanflight/src/main/flight/imu.c ****     gz *= (0.5f * dt);
 1140              	 .loc 2 305 0
 1141 04fe D7ED037A 	 flds s15,[r7,#12]
 1142 0502 B6EE007A 	 fconsts s14,#96
 1143 0506 67EE877A 	 fmuls s15,s15,s14
 1144 050a 97ED007A 	 flds s14,[r7]
 1145 050e 67EE277A 	 fmuls s15,s14,s15
 1146 0512 C7ED007A 	 fsts s15,[r7]
 306:../cleanflight/src/main/flight/imu.c **** 
 307:../cleanflight/src/main/flight/imu.c ****     quaternion buffer;
 308:../cleanflight/src/main/flight/imu.c ****     buffer.w = q.w;
 1147              	 .loc 2 308 0
 1148 0516 744B     	 ldr r3,.L49+16
 1149 0518 1B68     	 ldr r3,[r3]
 1150 051a 7B61     	 str r3,[r7,#20]
 309:../cleanflight/src/main/flight/imu.c ****     buffer.x = q.x;
 1151              	 .loc 2 309 0
 1152 051c 724B     	 ldr r3,.L49+16
 1153 051e 5B68     	 ldr r3,[r3,#4]
 1154 0520 BB61     	 str r3,[r7,#24]
 310:../cleanflight/src/main/flight/imu.c ****     buffer.y = q.y;
 1155              	 .loc 2 310 0
 1156 0522 714B     	 ldr r3,.L49+16
 1157 0524 9B68     	 ldr r3,[r3,#8]
 1158 0526 FB61     	 str r3,[r7,#28]
 311:../cleanflight/src/main/flight/imu.c ****     buffer.z = q.z;
 1159              	 .loc 2 311 0
 1160 0528 6F4B     	 ldr r3,.L49+16
 1161 052a DB68     	 ldr r3,[r3,#12]
 1162 052c 3B62     	 str r3,[r7,#32]
 312:../cleanflight/src/main/flight/imu.c **** 
 313:../cleanflight/src/main/flight/imu.c ****     q.w += (-buffer.x * gx - buffer.y * gy - buffer.z * gz);
 1163              	 .loc 2 313 0
 1164 052e 6E4B     	 ldr r3,.L49+16
 1165 0530 93ED007A 	 flds s14,[r3]
 1166 0534 D7ED067A 	 flds s15,[r7,#24]
 1167 0538 F1EE676A 	 fnegs s13,s15
 1168 053c D7ED027A 	 flds s15,[r7,#8]
 1169 0540 66EEA76A 	 fmuls s13,s13,s15
 1170 0544 97ED076A 	 flds s12,[r7,#28]
 1171 0548 D7ED017A 	 flds s15,[r7,#4]
 1172 054c 66EE277A 	 fmuls s15,s12,s15
 1173 0550 76EEE76A 	 fsubs s13,s13,s15
 1174 0554 97ED086A 	 flds s12,[r7,#32]
 1175 0558 D7ED007A 	 flds s15,[r7]
 1176 055c 66EE277A 	 fmuls s15,s12,s15
 1177 0560 76EEE77A 	 fsubs s15,s13,s15
 1178 0564 77EE277A 	 fadds s15,s14,s15
 1179 0568 5F4B     	 ldr r3,.L49+16
 1180 056a C3ED007A 	 fsts s15,[r3]
 314:../cleanflight/src/main/flight/imu.c ****     q.x += (+buffer.w * gx + buffer.y * gz - buffer.z * gy);
 1181              	 .loc 2 314 0
 1182 056e 5E4B     	 ldr r3,.L49+16
 1183 0570 93ED017A 	 flds s14,[r3,#4]
 1184 0574 D7ED056A 	 flds s13,[r7,#20]
 1185 0578 D7ED027A 	 flds s15,[r7,#8]
 1186 057c 66EEA76A 	 fmuls s13,s13,s15
 1187 0580 97ED076A 	 flds s12,[r7,#28]
 1188 0584 D7ED007A 	 flds s15,[r7]
 1189 0588 66EE277A 	 fmuls s15,s12,s15
 1190 058c 76EEA76A 	 fadds s13,s13,s15
 1191 0590 97ED086A 	 flds s12,[r7,#32]
 1192 0594 D7ED017A 	 flds s15,[r7,#4]
 1193 0598 66EE277A 	 fmuls s15,s12,s15
 1194 059c 76EEE77A 	 fsubs s15,s13,s15
 1195 05a0 77EE277A 	 fadds s15,s14,s15
 1196 05a4 504B     	 ldr r3,.L49+16
 1197 05a6 C3ED017A 	 fsts s15,[r3,#4]
 315:../cleanflight/src/main/flight/imu.c ****     q.y += (+buffer.w * gy - buffer.x * gz + buffer.z * gx);
 1198              	 .loc 2 315 0
 1199 05aa 4F4B     	 ldr r3,.L49+16
 1200 05ac 93ED027A 	 flds s14,[r3,#8]
 1201 05b0 D7ED056A 	 flds s13,[r7,#20]
 1202 05b4 D7ED017A 	 flds s15,[r7,#4]
 1203 05b8 66EEA76A 	 fmuls s13,s13,s15
 1204 05bc 97ED066A 	 flds s12,[r7,#24]
 1205 05c0 D7ED007A 	 flds s15,[r7]
 1206 05c4 66EE277A 	 fmuls s15,s12,s15
 1207 05c8 76EEE76A 	 fsubs s13,s13,s15
 1208 05cc 97ED086A 	 flds s12,[r7,#32]
 1209 05d0 D7ED027A 	 flds s15,[r7,#8]
 1210 05d4 66EE277A 	 fmuls s15,s12,s15
 1211 05d8 76EEA77A 	 fadds s15,s13,s15
 1212 05dc 77EE277A 	 fadds s15,s14,s15
 1213 05e0 414B     	 ldr r3,.L49+16
 1214 05e2 C3ED027A 	 fsts s15,[r3,#8]
 316:../cleanflight/src/main/flight/imu.c ****     q.z += (+buffer.w * gz + buffer.x * gy - buffer.y * gx);
 1215              	 .loc 2 316 0
 1216 05e6 404B     	 ldr r3,.L49+16
 1217 05e8 93ED037A 	 flds s14,[r3,#12]
 1218 05ec D7ED056A 	 flds s13,[r7,#20]
 1219 05f0 D7ED007A 	 flds s15,[r7]
 1220 05f4 66EEA76A 	 fmuls s13,s13,s15
 1221 05f8 97ED066A 	 flds s12,[r7,#24]
 1222 05fc D7ED017A 	 flds s15,[r7,#4]
 1223 0600 66EE277A 	 fmuls s15,s12,s15
 1224 0604 76EEA76A 	 fadds s13,s13,s15
 1225 0608 97ED076A 	 flds s12,[r7,#28]
 1226 060c D7ED027A 	 flds s15,[r7,#8]
 1227 0610 66EE277A 	 fmuls s15,s12,s15
 1228 0614 76EEE77A 	 fsubs s15,s13,s15
 1229 0618 77EE277A 	 fadds s15,s14,s15
 1230 061c 324B     	 ldr r3,.L49+16
 1231 061e C3ED037A 	 fsts s15,[r3,#12]
 317:../cleanflight/src/main/flight/imu.c **** 
 318:../cleanflight/src/main/flight/imu.c ****     // Normalise quaternion
 319:../cleanflight/src/main/flight/imu.c ****     float recipNorm = invSqrt(sq(q.w) + sq(q.x) + sq(q.y) + sq(q.z));
 1232              	 .loc 2 319 0
 1233 0622 314B     	 ldr r3,.L49+16
 1234 0624 93ED007A 	 flds s14,[r3]
 1235 0628 2F4B     	 ldr r3,.L49+16
 1236 062a D3ED007A 	 flds s15,[r3]
 1237 062e 27EE277A 	 fmuls s14,s14,s15
 1238 0632 2D4B     	 ldr r3,.L49+16
 1239 0634 D3ED016A 	 flds s13,[r3,#4]
 1240 0638 2B4B     	 ldr r3,.L49+16
 1241 063a D3ED017A 	 flds s15,[r3,#4]
 1242 063e 66EEA77A 	 fmuls s15,s13,s15
 1243 0642 37EE277A 	 fadds s14,s14,s15
 1244 0646 284B     	 ldr r3,.L49+16
 1245 0648 D3ED026A 	 flds s13,[r3,#8]
 1246 064c 264B     	 ldr r3,.L49+16
 1247 064e D3ED027A 	 flds s15,[r3,#8]
 1248 0652 66EEA77A 	 fmuls s15,s13,s15
 1249 0656 37EE277A 	 fadds s14,s14,s15
 1250 065a 234B     	 ldr r3,.L49+16
 1251 065c D3ED036A 	 flds s13,[r3,#12]
 1252 0660 214B     	 ldr r3,.L49+16
 1253 0662 D3ED037A 	 flds s15,[r3,#12]
 1254 0666 66EEA77A 	 fmuls s15,s13,s15
 1255 066a 77EE277A 	 fadds s15,s14,s15
 1256 066e 17EE900A 	 fmrs r0,s15
 1257 0672 FFF7FEFF 	 bl invSqrt
 1258 0676 7862     	 str r0,[r7,#36]
 320:../cleanflight/src/main/flight/imu.c ****     q.w *= recipNorm;
 1259              	 .loc 2 320 0
 1260 0678 1B4B     	 ldr r3,.L49+16
 1261 067a 93ED007A 	 flds s14,[r3]
 1262 067e D7ED097A 	 flds s15,[r7,#36]
 1263 0682 67EE277A 	 fmuls s15,s14,s15
 1264 0686 184B     	 ldr r3,.L49+16
 1265 0688 C3ED007A 	 fsts s15,[r3]
 321:../cleanflight/src/main/flight/imu.c ****     q.x *= recipNorm;
 1266              	 .loc 2 321 0
 1267 068c 164B     	 ldr r3,.L49+16
 1268 068e 93ED017A 	 flds s14,[r3,#4]
 1269 0692 D7ED097A 	 flds s15,[r7,#36]
 1270 0696 67EE277A 	 fmuls s15,s14,s15
 1271 069a 134B     	 ldr r3,.L49+16
 1272 069c C3ED017A 	 fsts s15,[r3,#4]
 322:../cleanflight/src/main/flight/imu.c ****     q.y *= recipNorm;
 1273              	 .loc 2 322 0
 1274 06a0 114B     	 ldr r3,.L49+16
 1275 06a2 93ED027A 	 flds s14,[r3,#8]
 1276 06a6 D7ED097A 	 flds s15,[r7,#36]
 1277 06aa 67EE277A 	 fmuls s15,s14,s15
 1278 06ae 0E4B     	 ldr r3,.L49+16
 1279 06b0 C3ED027A 	 fsts s15,[r3,#8]
 323:../cleanflight/src/main/flight/imu.c ****     q.z *= recipNorm;
 1280              	 .loc 2 323 0
 1281 06b4 0C4B     	 ldr r3,.L49+16
 1282 06b6 93ED037A 	 flds s14,[r3,#12]
 1283 06ba D7ED097A 	 flds s15,[r7,#36]
 1284 06be 67EE277A 	 fmuls s15,s14,s15
 1285 06c2 094B     	 ldr r3,.L49+16
 1286 06c4 C3ED037A 	 fsts s15,[r3,#12]
 324:../cleanflight/src/main/flight/imu.c **** 
 325:../cleanflight/src/main/flight/imu.c ****     // Pre-compute rotation matrix from quaternion
 326:../cleanflight/src/main/flight/imu.c ****     imuComputeRotationMatrix();
 1287              	 .loc 2 326 0
 1288 06c8 FFF7FEFF 	 bl imuComputeRotationMatrix
 327:../cleanflight/src/main/flight/imu.c **** }
 1289              	 .loc 2 327 0
 1290 06cc 5837     	 adds r7,r7,#88
 1291              	.LCFI38:
 1292              	 .cfi_def_cfa_offset 16
 1293 06ce BD46     	 mov sp,r7
 1294              	.LCFI39:
 1295              	 .cfi_def_cfa_register 13
 1296              	 
 1297 06d0 BDEC028B 	 fldmfdd sp!,{d8}
 1298              	.LCFI40:
 1299              	 .cfi_restore 80
 1300              	 .cfi_restore 81
 1301              	 .cfi_def_cfa_offset 8
 1302 06d4 80BD     	 pop {r7,pc}
 1303              	.L50:
 1304 06d6 00BF     	 .align 2
 1305              	.L49:
 1306 06d8 00000000 	 .word imuRuntimeConfig
 1307 06dc 00000000 	 .word integralFBx.13839
 1308 06e0 00000000 	 .word integralFBy.13840
 1309 06e4 00000000 	 .word integralFBz.13841
 1310 06e8 00000000 	 .word q
 1311              	 .cfi_endproc
 1312              	.LFE564:
 1314              	 .section .text.imuUpdateEulerAngles,"ax",%progbits
 1315              	 .align 2
 1316              	 .thumb
 1317              	 .thumb_func
 1319              	imuUpdateEulerAngles:
 1320              	.LFB565:
 328:../cleanflight/src/main/flight/imu.c **** 
 329:../cleanflight/src/main/flight/imu.c **** STATIC_UNIT_TESTED void imuUpdateEulerAngles(void)
 330:../cleanflight/src/main/flight/imu.c **** {
 1321              	 .loc 2 330 0
 1322              	 .cfi_startproc
 1323              	 
 1324              	 
 1325 0000 80B5     	 push {r7,lr}
 1326              	.LCFI41:
 1327              	 .cfi_def_cfa_offset 8
 1328              	 .cfi_offset 7,-8
 1329              	 .cfi_offset 14,-4
 1330 0002 8AB0     	 sub sp,sp,#40
 1331              	.LCFI42:
 1332              	 .cfi_def_cfa_offset 48
 1333 0004 00AF     	 add r7,sp,#0
 1334              	.LCFI43:
 1335              	 .cfi_def_cfa_register 7
 331:../cleanflight/src/main/flight/imu.c ****     quaternionProducts buffer;
 332:../cleanflight/src/main/flight/imu.c **** 
 333:../cleanflight/src/main/flight/imu.c ****     if (FLIGHT_MODE(HEADFREE_MODE)) {
 1336              	 .loc 2 333 0
 1337 0006 794B     	 ldr r3,.L60
 1338 0008 1B88     	 ldrh r3,[r3]
 1339 000a 03F04003 	 and r3,r3,#64
 1340 000e 002B     	 cmp r3,#0
 1341 0010 76D0     	 beq .L52
 334:../cleanflight/src/main/flight/imu.c ****        imuQuaternionComputeProducts(&headfree, &buffer);
 1342              	 .loc 2 334 0
 1343 0012 3B46     	 mov r3,r7
 1344 0014 7648     	 ldr r0,.L60+4
 1345 0016 1946     	 mov r1,r3
 1346 0018 FFF7FEFF 	 bl imuQuaternionComputeProducts
 335:../cleanflight/src/main/flight/imu.c **** 
 336:../cleanflight/src/main/flight/imu.c ****        attitude.values.roll = lrintf(atan2_approx((+2.0f * (buffer.wx + buffer.yz)), (+1.0f - 2.0f 
 1347              	 .loc 2 336 0
 1348 001c 97ED017A 	 flds s14,[r7,#4]
 1349 0020 D7ED087A 	 flds s15,[r7,#32]
 1350 0024 77EE277A 	 fadds s15,s14,s15
 1351 0028 77EEA76A 	 fadds s13,s15,s15
 1352 002c 97ED047A 	 flds s14,[r7,#16]
 1353 0030 D7ED077A 	 flds s15,[r7,#28]
 1354 0034 77EE277A 	 fadds s15,s14,s15
 1355 0038 77EEA77A 	 fadds s15,s15,s15
 1356 003c B7EE007A 	 fconsts s14,#112
 1357 0040 77EE677A 	 fsubs s15,s14,s15
 1358 0044 16EE900A 	 fmrs r0,s13
 1359 0048 17EE901A 	 fmrs r1,s15
 1360 004c FFF7FEFF 	 bl atan2_approx
 1361 0050 07EE100A 	 fmsr s14,r0
 1362 0054 DFED677A 	 flds s15,.L60+8
 1363 0058 67EE277A 	 fmuls s15,s14,s15
 1364 005c 17EE900A 	 fmrs r0,s15
 1365 0060 FFF7FEFF 	 bl lrintf
 1366 0064 0346     	 mov r3,r0
 1367 0066 9AB2     	 uxth r2,r3
 1368 0068 634B     	 ldr r3,.L60+12
 1369 006a 1A80     	 strh r2,[r3]
 337:../cleanflight/src/main/flight/imu.c ****        attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(+2.0f * (buffer.wy - buffer.xz)
 1370              	 .loc 2 337 0
 1371 006c 97ED027A 	 flds s14,[r7,#8]
 1372 0070 D7ED067A 	 flds s15,[r7,#24]
 1373 0074 77EE677A 	 fsubs s15,s14,s15
 1374 0078 77EEA77A 	 fadds s15,s15,s15
 1375 007c 17EE900A 	 fmrs r0,s15
 1376 0080 FFF7FEFF 	 bl acos_approx
 1377 0084 07EE100A 	 fmsr s14,r0
 1378 0088 DFED5C7A 	 flds s15,.L60+16
 1379 008c 77EEC77A 	 fsubs s15,s15,s14
 1380 0090 9FED587A 	 flds s14,.L60+8
 1381 0094 67EE877A 	 fmuls s15,s15,s14
 1382 0098 17EE900A 	 fmrs r0,s15
 1383 009c FFF7FEFF 	 bl lrintf
 1384 00a0 0346     	 mov r3,r0
 1385 00a2 9AB2     	 uxth r2,r3
 1386 00a4 544B     	 ldr r3,.L60+12
 1387 00a6 5A80     	 strh r2,[r3,#2]
 338:../cleanflight/src/main/flight/imu.c ****        attitude.values.yaw = lrintf((-atan2_approx((+2.0f * (buffer.wz + buffer.xy)), (+1.0f - 2.0f
 1388              	 .loc 2 338 0
 1389 00a8 97ED037A 	 flds s14,[r7,#12]
 1390 00ac D7ED057A 	 flds s15,[r7,#20]
 1391 00b0 77EE277A 	 fadds s15,s14,s15
 1392 00b4 77EEA76A 	 fadds s13,s15,s15
 1393 00b8 97ED077A 	 flds s14,[r7,#28]
 1394 00bc D7ED097A 	 flds s15,[r7,#36]
 1395 00c0 77EE277A 	 fadds s15,s14,s15
 1396 00c4 77EEA77A 	 fadds s15,s15,s15
 1397 00c8 B7EE007A 	 fconsts s14,#112
 1398 00cc 77EE677A 	 fsubs s15,s14,s15
 1399 00d0 16EE900A 	 fmrs r0,s13
 1400 00d4 17EE901A 	 fmrs r1,s15
 1401 00d8 FFF7FEFF 	 bl atan2_approx
 1402 00dc 0346     	 mov r3,r0
 1403 00de 07EE903A 	 fmsr s15,r3
 1404 00e2 F1EE677A 	 fnegs s15,s15
 1405 00e6 9FED437A 	 flds s14,.L60+8
 1406 00ea 67EE877A 	 fmuls s15,s15,s14
 1407 00ee 17EE900A 	 fmrs r0,s15
 1408 00f2 FFF7FEFF 	 bl lrintf
 1409 00f6 0346     	 mov r3,r0
 1410 00f8 9AB2     	 uxth r2,r3
 1411 00fa 3F4B     	 ldr r3,.L60+12
 1412 00fc 9A80     	 strh r2,[r3,#4]
 1413 00fe 4AE0     	 b .L53
 1414              	.L52:
 339:../cleanflight/src/main/flight/imu.c ****     } else {
 340:../cleanflight/src/main/flight/imu.c ****        attitude.values.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (1800.0f / M_PIf));
 1415              	 .loc 2 340 0
 1416 0100 3F4B     	 ldr r3,.L60+20
 1417 0102 DA69     	 ldr r2,[r3,#28]
 1418 0104 3E4B     	 ldr r3,.L60+20
 1419 0106 1B6A     	 ldr r3,[r3,#32]
 1420 0108 1046     	 mov r0,r2
 1421 010a 1946     	 mov r1,r3
 1422 010c FFF7FEFF 	 bl atan2_approx
 1423 0110 07EE100A 	 fmsr s14,r0
 1424 0114 DFED377A 	 flds s15,.L60+8
 1425 0118 67EE277A 	 fmuls s15,s14,s15
 1426 011c 17EE900A 	 fmrs r0,s15
 1427 0120 FFF7FEFF 	 bl lrintf
 1428 0124 0346     	 mov r3,r0
 1429 0126 9AB2     	 uxth r2,r3
 1430 0128 334B     	 ldr r3,.L60+12
 1431 012a 1A80     	 strh r2,[r3]
 341:../cleanflight/src/main/flight/imu.c ****        attitude.values.pitch = lrintf(((0.5f * M_PIf) - acos_approx(-rMat[2][0])) * (1800.0f / M_PI
 1432              	 .loc 2 341 0
 1433 012c 344B     	 ldr r3,.L60+20
 1434 012e D3ED067A 	 flds s15,[r3,#24]
 1435 0132 F1EE677A 	 fnegs s15,s15
 1436 0136 17EE903A 	 fmrs r3,s15
 1437 013a 1846     	 mov r0,r3
 1438 013c FFF7FEFF 	 bl acos_approx
 1439 0140 07EE100A 	 fmsr s14,r0
 1440 0144 DFED2D7A 	 flds s15,.L60+16
 1441 0148 77EEC77A 	 fsubs s15,s15,s14
 1442 014c 9FED297A 	 flds s14,.L60+8
 1443 0150 67EE877A 	 fmuls s15,s15,s14
 1444 0154 17EE900A 	 fmrs r0,s15
 1445 0158 FFF7FEFF 	 bl lrintf
 1446 015c 0346     	 mov r3,r0
 1447 015e 9AB2     	 uxth r2,r3
 1448 0160 254B     	 ldr r3,.L60+12
 1449 0162 5A80     	 strh r2,[r3,#2]
 342:../cleanflight/src/main/flight/imu.c ****        attitude.values.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (1800.0f / M_PIf)));
 1450              	 .loc 2 342 0
 1451 0164 264B     	 ldr r3,.L60+20
 1452 0166 DA68     	 ldr r2,[r3,#12]
 1453 0168 254B     	 ldr r3,.L60+20
 1454 016a 1B68     	 ldr r3,[r3]
 1455 016c 1046     	 mov r0,r2
 1456 016e 1946     	 mov r1,r3
 1457 0170 FFF7FEFF 	 bl atan2_approx
 1458 0174 0346     	 mov r3,r0
 1459 0176 07EE903A 	 fmsr s15,r3
 1460 017a F1EE677A 	 fnegs s15,s15
 1461 017e 9FED1D7A 	 flds s14,.L60+8
 1462 0182 67EE877A 	 fmuls s15,s15,s14
 1463 0186 17EE900A 	 fmrs r0,s15
 1464 018a FFF7FEFF 	 bl lrintf
 1465 018e 0346     	 mov r3,r0
 1466 0190 9AB2     	 uxth r2,r3
 1467 0192 194B     	 ldr r3,.L60+12
 1468 0194 9A80     	 strh r2,[r3,#4]
 1469              	.L53:
 343:../cleanflight/src/main/flight/imu.c ****     }
 344:../cleanflight/src/main/flight/imu.c **** 
 345:../cleanflight/src/main/flight/imu.c ****     if (attitude.values.yaw < 0)
 1470              	 .loc 2 345 0
 1471 0196 184B     	 ldr r3,.L60+12
 1472 0198 9B88     	 ldrh r3,[r3,#4]
 1473 019a 1BB2     	 sxth r3,r3
 1474 019c 002B     	 cmp r3,#0
 1475 019e 08DA     	 bge .L54
 346:../cleanflight/src/main/flight/imu.c ****         attitude.values.yaw += 3600;
 1476              	 .loc 2 346 0
 1477 01a0 154B     	 ldr r3,.L60+12
 1478 01a2 9B88     	 ldrh r3,[r3,#4]
 1479 01a4 9BB2     	 uxth r3,r3
 1480 01a6 03F56163 	 add r3,r3,#3600
 1481 01aa 9BB2     	 uxth r3,r3
 1482 01ac 9AB2     	 uxth r2,r3
 1483 01ae 124B     	 ldr r3,.L60+12
 1484 01b0 9A80     	 strh r2,[r3,#4]
 1485              	.L54:
 347:../cleanflight/src/main/flight/imu.c **** 
 348:../cleanflight/src/main/flight/imu.c ****     // Update small angle state
 349:../cleanflight/src/main/flight/imu.c ****     if (rMat[2][2] > smallAngleCosZ) {
 1486              	 .loc 2 349 0
 1487 01b2 134B     	 ldr r3,.L60+20
 1488 01b4 93ED087A 	 flds s14,[r3,#32]
 1489 01b8 124B     	 ldr r3,.L60+24
 1490 01ba D3ED007A 	 flds s15,[r3]
 1491 01be B4EEE77A 	 fcmpes s14,s15
 1492 01c2 F1EE10FA 	 fmstat
 1493 01c6 07DD     	 ble .L59
 350:../cleanflight/src/main/flight/imu.c ****         ENABLE_STATE(SMALL_ANGLE);
 1494              	 .loc 2 350 0
 1495 01c8 0F4B     	 ldr r3,.L60+28
 1496 01ca 1B78     	 ldrb r3,[r3]
 1497 01cc 43F00803 	 orr r3,r3,#8
 1498 01d0 DAB2     	 uxtb r2,r3
 1499 01d2 0D4B     	 ldr r3,.L60+28
 1500 01d4 1A70     	 strb r2,[r3]
 1501 01d6 06E0     	 b .L51
 1502              	.L59:
 351:../cleanflight/src/main/flight/imu.c ****     } else {
 352:../cleanflight/src/main/flight/imu.c ****         DISABLE_STATE(SMALL_ANGLE);
 1503              	 .loc 2 352 0
 1504 01d8 0B4B     	 ldr r3,.L60+28
 1505 01da 1B78     	 ldrb r3,[r3]
 1506 01dc 23F00803 	 bic r3,r3,#8
 1507 01e0 DAB2     	 uxtb r2,r3
 1508 01e2 094B     	 ldr r3,.L60+28
 1509 01e4 1A70     	 strb r2,[r3]
 1510              	.L51:
 353:../cleanflight/src/main/flight/imu.c ****     }
 354:../cleanflight/src/main/flight/imu.c **** }
 1511              	 .loc 2 354 0
 1512 01e6 2837     	 adds r7,r7,#40
 1513              	.LCFI44:
 1514              	 .cfi_def_cfa_offset 8
 1515 01e8 BD46     	 mov sp,r7
 1516              	.LCFI45:
 1517              	 .cfi_def_cfa_register 13
 1518              	 
 1519 01ea 80BD     	 pop {r7,pc}
 1520              	.L61:
 1521              	 .align 2
 1522              	.L60:
 1523 01ec 00000000 	 .word flightModeFlags
 1524 01f0 00000000 	 .word headfree
 1525 01f4 4C3D0F44 	 .word 1141849420
 1526 01f8 00000000 	 .word attitude
 1527 01fc DB0FC93F 	 .word 1070141403
 1528 0200 00000000 	 .word rMat
 1529 0204 00000000 	 .word smallAngleCosZ
 1530 0208 00000000 	 .word stateFlags
 1531              	 .cfi_endproc
 1532              	.LFE565:
 1534              	 .section .text.imuIsAccelerometerHealthy,"ax",%progbits
 1535              	 .align 2
 1536              	 .thumb
 1537              	 .thumb_func
 1539              	imuIsAccelerometerHealthy:
 1540              	.LFB566:
 355:../cleanflight/src/main/flight/imu.c **** 
 356:../cleanflight/src/main/flight/imu.c **** static bool imuIsAccelerometerHealthy(float *accAverage)
 357:../cleanflight/src/main/flight/imu.c **** {
 1541              	 .loc 2 357 0
 1542              	 .cfi_startproc
 1543              	 
 1544              	 
 1545              	 
 1546 0000 80B4     	 push {r7}
 1547              	.LCFI46:
 1548              	 .cfi_def_cfa_offset 4
 1549              	 .cfi_offset 7,-4
 1550 0002 87B0     	 sub sp,sp,#28
 1551              	.LCFI47:
 1552              	 .cfi_def_cfa_offset 32
 1553 0004 00AF     	 add r7,sp,#0
 1554              	.LCFI48:
 1555              	 .cfi_def_cfa_register 7
 1556 0006 7860     	 str r0,[r7,#4]
 358:../cleanflight/src/main/flight/imu.c ****     float accMagnitude = 0;
 1557              	 .loc 2 358 0
 1558 0008 4FF00003 	 mov r3,#0
 1559 000c 7B61     	 str r3,[r7,#20]
 1560              	.LBB5:
 359:../cleanflight/src/main/flight/imu.c ****     for (int axis = 0; axis < 3; axis++) {
 1561              	 .loc 2 359 0
 1562 000e 0023     	 movs r3,#0
 1563 0010 3B61     	 str r3,[r7,#16]
 1564 0012 14E0     	 b .L63
 1565              	.L64:
 1566              	.LBB6:
 360:../cleanflight/src/main/flight/imu.c ****         const float a = accAverage[axis];
 1567              	 .loc 2 360 0 discriminator 3
 1568 0014 3B69     	 ldr r3,[r7,#16]
 1569 0016 9B00     	 lsls r3,r3,#2
 1570 0018 7A68     	 ldr r2,[r7,#4]
 1571 001a 1344     	 add r3,r3,r2
 1572 001c 1B68     	 ldr r3,[r3]
 1573 001e FB60     	 str r3,[r7,#12]
 361:../cleanflight/src/main/flight/imu.c ****         accMagnitude += a * a;
 1574              	 .loc 2 361 0 discriminator 3
 1575 0020 97ED037A 	 flds s14,[r7,#12]
 1576 0024 D7ED037A 	 flds s15,[r7,#12]
 1577 0028 67EE277A 	 fmuls s15,s14,s15
 1578 002c 97ED057A 	 flds s14,[r7,#20]
 1579 0030 77EE277A 	 fadds s15,s14,s15
 1580 0034 C7ED057A 	 fsts s15,[r7,#20]
 1581              	.LBE6:
 359:../cleanflight/src/main/flight/imu.c ****     for (int axis = 0; axis < 3; axis++) {
 1582              	 .loc 2 359 0 discriminator 3
 1583 0038 3B69     	 ldr r3,[r7,#16]
 1584 003a 0133     	 adds r3,r3,#1
 1585 003c 3B61     	 str r3,[r7,#16]
 1586              	.L63:
 359:../cleanflight/src/main/flight/imu.c ****     for (int axis = 0; axis < 3; axis++) {
 1587              	 .loc 2 359 0 is_stmt 0 discriminator 1
 1588 003e 3B69     	 ldr r3,[r7,#16]
 1589 0040 022B     	 cmp r3,#2
 1590 0042 E7DD     	 ble .L64
 1591              	.LBE5:
 362:../cleanflight/src/main/flight/imu.c ****     }
 363:../cleanflight/src/main/flight/imu.c **** 
 364:../cleanflight/src/main/flight/imu.c ****     accMagnitude = accMagnitude * 100 / (sq((int32_t)acc.dev.acc_1G));
 1592              	 .loc 2 364 0 is_stmt 1
 1593 0044 D7ED057A 	 flds s15,[r7,#20]
 1594 0048 9FED1A7A 	 flds s14,.L72
 1595 004c 27EE877A 	 fmuls s14,s15,s14
 1596 0050 194B     	 ldr r3,.L72+4
 1597 0052 B3F81130 	 ldrh r3,[r3,#17]
 1598 0056 9BB2     	 uxth r3,r3
 1599 0058 1A46     	 mov r2,r3
 1600 005a 174B     	 ldr r3,.L72+4
 1601 005c B3F81130 	 ldrh r3,[r3,#17]
 1602 0060 9BB2     	 uxth r3,r3
 1603 0062 03FB02F3 	 mul r3,r3,r2
 1604 0066 07EE903A 	 fmsr s15,r3
 1605 006a F8EEE77A 	 fsitos s15,s15
 1606 006e C7EE277A 	 fdivs s15,s14,s15
 1607 0072 C7ED057A 	 fsts s15,[r7,#20]
 365:../cleanflight/src/main/flight/imu.c **** 
 366:../cleanflight/src/main/flight/imu.c ****     // Accept accel readings only in range 0.90g - 1.10g
 367:../cleanflight/src/main/flight/imu.c ****     return (81 < accMagnitude) && (accMagnitude < 121);
 1608              	 .loc 2 367 0
 1609 0076 D7ED057A 	 flds s15,[r7,#20]
 1610 007a 9FED107A 	 flds s14,.L72+8
 1611 007e F4EEC77A 	 fcmpes s15,s14
 1612 0082 F1EE10FA 	 fmstat
 1613 0086 0ADD     	 ble .L65
 1614              	 .loc 2 367 0 is_stmt 0 discriminator 1
 1615 0088 D7ED057A 	 flds s15,[r7,#20]
 1616 008c 9FED0C7A 	 flds s14,.L72+12
 1617 0090 F4EEC77A 	 fcmpes s15,s14
 1618 0094 F1EE10FA 	 fmstat
 1619 0098 01D5     	 bpl .L65
 1620              	 .loc 2 367 0 discriminator 3
 1621 009a 0123     	 movs r3,#1
 1622 009c 00E0     	 b .L68
 1623              	.L65:
 1624              	 .loc 2 367 0 discriminator 4
 1625 009e 0023     	 movs r3,#0
 1626              	.L68:
 1627              	 .loc 2 367 0 discriminator 6
 1628 00a0 03F00103 	 and r3,r3,#1
 1629 00a4 DBB2     	 uxtb r3,r3
 368:../cleanflight/src/main/flight/imu.c **** }
 1630              	 .loc 2 368 0 is_stmt 1 discriminator 6
 1631 00a6 1846     	 mov r0,r3
 1632 00a8 1C37     	 adds r7,r7,#28
 1633              	.LCFI49:
 1634              	 .cfi_def_cfa_offset 4
 1635 00aa BD46     	 mov sp,r7
 1636              	.LCFI50:
 1637              	 .cfi_def_cfa_register 13
 1638              	 
 1639 00ac 5DF8047B 	 ldr r7,[sp],#4
 1640              	.LCFI51:
 1641              	 .cfi_restore 7
 1642              	 .cfi_def_cfa_offset 0
 1643 00b0 7047     	 bx lr
 1644              	.L73:
 1645 00b2 00BF     	 .align 2
 1646              	.L72:
 1647 00b4 0000C842 	 .word 1120403456
 1648 00b8 00000000 	 .word acc
 1649 00bc 0000A242 	 .word 1117913088
 1650 00c0 0000F242 	 .word 1123155968
 1651              	 .cfi_endproc
 1652              	.LFE566:
 1654              	 .section .text.imuCalcKpGain,"ax",%progbits
 1655              	 .align 2
 1656              	 .global imuCalcKpGain
 1657              	 .thumb
 1658              	 .thumb_func
 1660              	imuCalcKpGain:
 1661              	.LFB567:
 369:../cleanflight/src/main/flight/imu.c **** 
 370:../cleanflight/src/main/flight/imu.c **** // Calculate the dcmKpGain to use. When armed, the gain is imuRuntimeConfig.dcm_kp * 1.0 scaling.
 371:../cleanflight/src/main/flight/imu.c **** // When disarmed after initial boot, the scaling is set to 10.0 for the first 20 seconds to speed u
 372:../cleanflight/src/main/flight/imu.c **** // After disarming we want to quickly reestablish convergence to deal with the attitude estimation 
 373:../cleanflight/src/main/flight/imu.c **** //   - wait for a 250ms period of low gyro activity to ensure the craft is not moving
 374:../cleanflight/src/main/flight/imu.c **** //   - use a large dcmKpGain value for 500ms to allow the attitude estimate to quickly converge
 375:../cleanflight/src/main/flight/imu.c **** //   - reset the gain back to the standard setting
 376:../cleanflight/src/main/flight/imu.c **** float imuCalcKpGain(timeUs_t currentTimeUs, bool useAcc, float *gyroAverage)
 377:../cleanflight/src/main/flight/imu.c **** {
 1662              	 .loc 2 377 0
 1663              	 .cfi_startproc
 1664              	 
 1665              	 
 1666              	 
 1667 0000 80B4     	 push {r7}
 1668              	.LCFI52:
 1669              	 .cfi_def_cfa_offset 4
 1670              	 .cfi_offset 7,-4
 1671 0002 87B0     	 sub sp,sp,#28
 1672              	.LCFI53:
 1673              	 .cfi_def_cfa_offset 32
 1674 0004 00AF     	 add r7,sp,#0
 1675              	.LCFI54:
 1676              	 .cfi_def_cfa_register 7
 1677 0006 F860     	 str r0,[r7,#12]
 1678 0008 0B46     	 mov r3,r1
 1679 000a 7A60     	 str r2,[r7,#4]
 1680 000c FB72     	 strb r3,[r7,#11]
 378:../cleanflight/src/main/flight/imu.c ****     static bool lastArmState = false;
 379:../cleanflight/src/main/flight/imu.c ****     static timeUs_t gyroQuietPeriodTimeEnd = 0;
 380:../cleanflight/src/main/flight/imu.c ****     static timeUs_t attitudeResetTimeEnd = 0;
 381:../cleanflight/src/main/flight/imu.c ****     static bool attitudeResetCompleted = false;
 382:../cleanflight/src/main/flight/imu.c ****     float ret;
 383:../cleanflight/src/main/flight/imu.c ****     bool attitudeResetActive = false;
 1681              	 .loc 2 383 0
 1682 000e 0023     	 movs r3,#0
 1683 0010 FB74     	 strb r3,[r7,#19]
 384:../cleanflight/src/main/flight/imu.c **** 
 385:../cleanflight/src/main/flight/imu.c ****     const bool armState = ARMING_FLAG(ARMED);
 1684              	 .loc 2 385 0
 1685 0012 554B     	 ldr r3,.L86
 1686 0014 1B78     	 ldrb r3,[r3]
 1687 0016 03F00103 	 and r3,r3,#1
 1688 001a 002B     	 cmp r3,#0
 1689 001c 14BF     	 ite ne
 1690 001e 0123     	 movne r3,#1
 1691 0020 0023     	 moveq r3,#0
 1692 0022 BB74     	 strb r3,[r7,#18]
 386:../cleanflight/src/main/flight/imu.c **** 
 387:../cleanflight/src/main/flight/imu.c ****     if (!armState) {
 1693              	 .loc 2 387 0
 1694 0024 BB7C     	 ldrb r3,[r7,#18]
 1695 0026 83F00103 	 eor r3,r3,#1
 1696 002a DBB2     	 uxtb r3,r3
 1697 002c 002B     	 cmp r3,#0
 1698 002e 79D0     	 beq .L75
 388:../cleanflight/src/main/flight/imu.c ****         if (lastArmState) {   // Just disarmed; start the gyro quiet period
 1699              	 .loc 2 388 0
 1700 0030 4E4B     	 ldr r3,.L86+4
 1701 0032 1B78     	 ldrb r3,[r3]
 1702 0034 002B     	 cmp r3,#0
 1703 0036 0BD0     	 beq .L76
 389:../cleanflight/src/main/flight/imu.c ****             gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 1704              	 .loc 2 389 0
 1705 0038 FB68     	 ldr r3,[r7,#12]
 1706 003a 03F57433 	 add r3,r3,#249856
 1707 003e 9033     	 adds r3,r3,#144
 1708 0040 4B4A     	 ldr r2,.L86+8
 1709 0042 1360     	 str r3,[r2]
 390:../cleanflight/src/main/flight/imu.c ****             attitudeResetTimeEnd = 0;
 1710              	 .loc 2 390 0
 1711 0044 4B4B     	 ldr r3,.L86+12
 1712 0046 0022     	 movs r2,#0
 1713 0048 1A60     	 str r2,[r3]
 391:../cleanflight/src/main/flight/imu.c ****             attitudeResetCompleted = false;
 1714              	 .loc 2 391 0
 1715 004a 4B4B     	 ldr r3,.L86+16
 1716 004c 0022     	 movs r2,#0
 1717 004e 1A70     	 strb r2,[r3]
 1718              	.L76:
 392:../cleanflight/src/main/flight/imu.c ****         }
 393:../cleanflight/src/main/flight/imu.c **** 
 394:../cleanflight/src/main/flight/imu.c ****         // If gyro activity exceeds the threshold then restart the quiet period.
 395:../cleanflight/src/main/flight/imu.c ****         // Also, if the attitude reset has been complete and there is subsequent gyro activity then
 396:../cleanflight/src/main/flight/imu.c ****         // start the reset cycle again. This addresses the case where the pilot rights the craft af
 397:../cleanflight/src/main/flight/imu.c ****         if ((attitudeResetTimeEnd > 0) || (gyroQuietPeriodTimeEnd > 0) || attitudeResetCompleted) {
 1719              	 .loc 2 397 0
 1720 0050 484B     	 ldr r3,.L86+12
 1721 0052 1B68     	 ldr r3,[r3]
 1722 0054 002B     	 cmp r3,#0
 1723 0056 07D1     	 bne .L77
 1724              	 .loc 2 397 0 is_stmt 0 discriminator 1
 1725 0058 454B     	 ldr r3,.L86+8
 1726 005a 1B68     	 ldr r3,[r3]
 1727 005c 002B     	 cmp r3,#0
 1728 005e 03D1     	 bne .L77
 1729              	 .loc 2 397 0 discriminator 2
 1730 0060 454B     	 ldr r3,.L86+16
 1731 0062 1B78     	 ldrb r3,[r3]
 1732 0064 002B     	 cmp r3,#0
 1733 0066 34D0     	 beq .L78
 1734              	.L77:
 398:../cleanflight/src/main/flight/imu.c ****             if ((fabsf(gyroAverage[X]) > ATTITUDE_RESET_GYRO_LIMIT)
 1735              	 .loc 2 398 0 is_stmt 1
 1736 0068 7B68     	 ldr r3,[r7,#4]
 1737 006a D3ED007A 	 flds s15,[r3]
 1738 006e F0EEE77A 	 fabss s15,s15
 1739 0072 B2EE0E7A 	 fconsts s14,#46
 1740 0076 F4EEC77A 	 fcmpes s15,s14
 1741 007a F1EE10FA 	 fmstat
 1742 007e 1FDC     	 bgt .L79
 399:../cleanflight/src/main/flight/imu.c ****                 || (fabsf(gyroAverage[Y]) > ATTITUDE_RESET_GYRO_LIMIT)
 1743              	 .loc 2 399 0
 1744 0080 7B68     	 ldr r3,[r7,#4]
 1745 0082 0433     	 adds r3,r3,#4
 1746 0084 D3ED007A 	 flds s15,[r3]
 1747 0088 F0EEE77A 	 fabss s15,s15
 1748 008c B2EE0E7A 	 fconsts s14,#46
 1749 0090 F4EEC77A 	 fcmpes s15,s14
 1750 0094 F1EE10FA 	 fmstat
 1751 0098 12DC     	 bgt .L79
 400:../cleanflight/src/main/flight/imu.c ****                 || (fabsf(gyroAverage[Z]) > ATTITUDE_RESET_GYRO_LIMIT)
 1752              	 .loc 2 400 0
 1753 009a 7B68     	 ldr r3,[r7,#4]
 1754 009c 0833     	 adds r3,r3,#8
 1755 009e D3ED007A 	 flds s15,[r3]
 1756 00a2 F0EEE77A 	 fabss s15,s15
 1757 00a6 B2EE0E7A 	 fconsts s14,#46
 1758 00aa F4EEC77A 	 fcmpes s15,s14
 1759 00ae F1EE10FA 	 fmstat
 1760 00b2 05DC     	 bgt .L79
 401:../cleanflight/src/main/flight/imu.c ****                 || (!useAcc)) {
 1761              	 .loc 2 401 0
 1762 00b4 FB7A     	 ldrb r3,[r7,#11]
 1763 00b6 83F00103 	 eor r3,r3,#1
 1764 00ba DBB2     	 uxtb r3,r3
 1765 00bc 002B     	 cmp r3,#0
 1766 00be 08D0     	 beq .L78
 1767              	.L79:
 402:../cleanflight/src/main/flight/imu.c **** 
 403:../cleanflight/src/main/flight/imu.c ****                 gyroQuietPeriodTimeEnd = currentTimeUs + ATTITUDE_RESET_QUIET_TIME;
 1768              	 .loc 2 403 0
 1769 00c0 FB68     	 ldr r3,[r7,#12]
 1770 00c2 03F57433 	 add r3,r3,#249856
 1771 00c6 9033     	 adds r3,r3,#144
 1772 00c8 294A     	 ldr r2,.L86+8
 1773 00ca 1360     	 str r3,[r2]
 404:../cleanflight/src/main/flight/imu.c ****                 attitudeResetTimeEnd = 0;
 1774              	 .loc 2 404 0
 1775 00cc 294B     	 ldr r3,.L86+12
 1776 00ce 0022     	 movs r2,#0
 1777 00d0 1A60     	 str r2,[r3]
 1778              	.L78:
 405:../cleanflight/src/main/flight/imu.c ****             }
 406:../cleanflight/src/main/flight/imu.c ****         }
 407:../cleanflight/src/main/flight/imu.c ****         if (attitudeResetTimeEnd > 0) {        // Resetting the attitude estimation
 1779              	 .loc 2 407 0
 1780 00d2 284B     	 ldr r3,.L86+12
 1781 00d4 1B68     	 ldr r3,[r3]
 1782 00d6 002B     	 cmp r3,#0
 1783 00d8 11D0     	 beq .L80
 408:../cleanflight/src/main/flight/imu.c ****             if (currentTimeUs >= attitudeResetTimeEnd) {
 1784              	 .loc 2 408 0
 1785 00da 264B     	 ldr r3,.L86+12
 1786 00dc 1B68     	 ldr r3,[r3]
 1787 00de FA68     	 ldr r2,[r7,#12]
 1788 00e0 9A42     	 cmp r2,r3
 1789 00e2 09D3     	 bcc .L81
 409:../cleanflight/src/main/flight/imu.c ****                 gyroQuietPeriodTimeEnd = 0;
 1790              	 .loc 2 409 0
 1791 00e4 224B     	 ldr r3,.L86+8
 1792 00e6 0022     	 movs r2,#0
 1793 00e8 1A60     	 str r2,[r3]
 410:../cleanflight/src/main/flight/imu.c ****                 attitudeResetTimeEnd = 0;
 1794              	 .loc 2 410 0
 1795 00ea 224B     	 ldr r3,.L86+12
 1796 00ec 0022     	 movs r2,#0
 1797 00ee 1A60     	 str r2,[r3]
 411:../cleanflight/src/main/flight/imu.c ****                 attitudeResetCompleted = true;
 1798              	 .loc 2 411 0
 1799 00f0 214B     	 ldr r3,.L86+16
 1800 00f2 0122     	 movs r2,#1
 1801 00f4 1A70     	 strb r2,[r3]
 1802 00f6 15E0     	 b .L75
 1803              	.L81:
 412:../cleanflight/src/main/flight/imu.c ****             } else {
 413:../cleanflight/src/main/flight/imu.c ****                 attitudeResetActive = true;
 1804              	 .loc 2 413 0
 1805 00f8 0123     	 movs r3,#1
 1806 00fa FB74     	 strb r3,[r7,#19]
 1807 00fc 12E0     	 b .L75
 1808              	.L80:
 414:../cleanflight/src/main/flight/imu.c ****             }
 415:../cleanflight/src/main/flight/imu.c ****         } else if ((gyroQuietPeriodTimeEnd > 0) && (currentTimeUs >= gyroQuietPeriodTimeEnd)) {
 1809              	 .loc 2 415 0
 1810 00fe 1C4B     	 ldr r3,.L86+8
 1811 0100 1B68     	 ldr r3,[r3]
 1812 0102 002B     	 cmp r3,#0
 1813 0104 0ED0     	 beq .L75
 1814              	 .loc 2 415 0 is_stmt 0 discriminator 1
 1815 0106 1A4B     	 ldr r3,.L86+8
 1816 0108 1B68     	 ldr r3,[r3]
 1817 010a FA68     	 ldr r2,[r7,#12]
 1818 010c 9A42     	 cmp r2,r3
 1819 010e 09D3     	 bcc .L75
 416:../cleanflight/src/main/flight/imu.c ****             // Start the high gain period to bring the estimation into convergence
 417:../cleanflight/src/main/flight/imu.c ****             attitudeResetTimeEnd = currentTimeUs + ATTITUDE_RESET_ACTIVE_TIME;
 1820              	 .loc 2 417 0 is_stmt 1
 1821 0110 FB68     	 ldr r3,[r7,#12]
 1822 0112 03F5F423 	 add r3,r3,#499712
 1823 0116 03F59073 	 add r3,r3,#288
 1824 011a 164A     	 ldr r2,.L86+12
 1825 011c 1360     	 str r3,[r2]
 418:../cleanflight/src/main/flight/imu.c ****             gyroQuietPeriodTimeEnd = 0;
 1826              	 .loc 2 418 0
 1827 011e 144B     	 ldr r3,.L86+8
 1828 0120 0022     	 movs r2,#0
 1829 0122 1A60     	 str r2,[r3]
 1830              	.L75:
 419:../cleanflight/src/main/flight/imu.c ****         }
 420:../cleanflight/src/main/flight/imu.c ****     }
 421:../cleanflight/src/main/flight/imu.c ****     lastArmState = armState;
 1831              	 .loc 2 421 0
 1832 0124 114A     	 ldr r2,.L86+4
 1833 0126 BB7C     	 ldrb r3,[r7,#18]
 1834 0128 1370     	 strb r3,[r2]
 422:../cleanflight/src/main/flight/imu.c **** 
 423:../cleanflight/src/main/flight/imu.c ****     if (attitudeResetActive) {
 1835              	 .loc 2 423 0
 1836 012a FB7C     	 ldrb r3,[r7,#19]
 1837 012c 002B     	 cmp r3,#0
 1838 012e 02D0     	 beq .L83
 424:../cleanflight/src/main/flight/imu.c ****         ret = ATTITUDE_RESET_KP_GAIN;
 1839              	 .loc 2 424 0
 1840 0130 124B     	 ldr r3,.L86+20
 1841 0132 7B61     	 str r3,[r7,#20]
 1842 0134 10E0     	 b .L84
 1843              	.L83:
 425:../cleanflight/src/main/flight/imu.c ****     } else {
 426:../cleanflight/src/main/flight/imu.c ****        ret = imuRuntimeConfig.dcm_kp;
 1844              	 .loc 2 426 0
 1845 0136 124B     	 ldr r3,.L86+24
 1846 0138 5B68     	 ldr r3,[r3,#4]
 1847 013a 7B61     	 str r3,[r7,#20]
 427:../cleanflight/src/main/flight/imu.c ****        if (!armState) {
 1848              	 .loc 2 427 0
 1849 013c BB7C     	 ldrb r3,[r7,#18]
 1850 013e 83F00103 	 eor r3,r3,#1
 1851 0142 DBB2     	 uxtb r3,r3
 1852 0144 002B     	 cmp r3,#0
 1853 0146 07D0     	 beq .L84
 428:../cleanflight/src/main/flight/imu.c ****           ret = ret * 10.0f; // Scale the kP to generally converge faster when disarmed.
 1854              	 .loc 2 428 0
 1855 0148 D7ED057A 	 flds s15,[r7,#20]
 1856 014c B2EE047A 	 fconsts s14,#36
 1857 0150 67EE877A 	 fmuls s15,s15,s14
 1858 0154 C7ED057A 	 fsts s15,[r7,#20]
 1859              	.L84:
 429:../cleanflight/src/main/flight/imu.c ****        }
 430:../cleanflight/src/main/flight/imu.c ****     }
 431:../cleanflight/src/main/flight/imu.c **** 
 432:../cleanflight/src/main/flight/imu.c ****     return ret;
 1860              	 .loc 2 432 0
 1861 0158 7B69     	 ldr r3,[r7,#20]
 433:../cleanflight/src/main/flight/imu.c **** }
 1862              	 .loc 2 433 0
 1863 015a 1846     	 mov r0,r3
 1864 015c 1C37     	 adds r7,r7,#28
 1865              	.LCFI55:
 1866              	 .cfi_def_cfa_offset 4
 1867 015e BD46     	 mov sp,r7
 1868              	.LCFI56:
 1869              	 .cfi_def_cfa_register 13
 1870              	 
 1871 0160 5DF8047B 	 ldr r7,[sp],#4
 1872              	.LCFI57:
 1873              	 .cfi_restore 7
 1874              	 .cfi_def_cfa_offset 0
 1875 0164 7047     	 bx lr
 1876              	.L87:
 1877 0166 00BF     	 .align 2
 1878              	.L86:
 1879 0168 00000000 	 .word armingFlags
 1880 016c 00000000 	 .word lastArmState.13880
 1881 0170 00000000 	 .word gyroQuietPeriodTimeEnd.13881
 1882 0174 00000000 	 .word attitudeResetTimeEnd.13882
 1883 0178 00000000 	 .word attitudeResetCompleted.13883
 1884 017c 0000C841 	 .word 1103626240
 1885 0180 00000000 	 .word imuRuntimeConfig
 1886              	 .cfi_endproc
 1887              	.LFE567:
 1889              	 .section .text.imuCalculateEstimatedAttitude,"ax",%progbits
 1890              	 .align 2
 1891              	 .thumb
 1892              	 .thumb_func
 1894              	imuCalculateEstimatedAttitude:
 1895              	.LFB568:
 434:../cleanflight/src/main/flight/imu.c **** 
 435:../cleanflight/src/main/flight/imu.c **** static void imuCalculateEstimatedAttitude(timeUs_t currentTimeUs)
 436:../cleanflight/src/main/flight/imu.c **** {
 1896              	 .loc 2 436 0
 1897              	 .cfi_startproc
 1898              	 
 1899              	 
 1900 0000 2DE9F047 	 push {r4,r5,r6,r7,r8,r9,r10,lr}
 1901              	.LCFI58:
 1902              	 .cfi_def_cfa_offset 32
 1903              	 .cfi_offset 4,-32
 1904              	 .cfi_offset 5,-28
 1905              	 .cfi_offset 6,-24
 1906              	 .cfi_offset 7,-20
 1907              	 .cfi_offset 8,-16
 1908              	 .cfi_offset 9,-12
 1909              	 .cfi_offset 10,-8
 1910              	 .cfi_offset 14,-4
 1911 0004 2DED048B 	 fstmfdd sp!,{d8,d9}
 1912              	.LCFI59:
 1913              	 .cfi_def_cfa_offset 48
 1914              	 .cfi_offset 80,-48
 1915              	 .cfi_offset 81,-44
 1916              	 .cfi_offset 82,-40
 1917              	 .cfi_offset 83,-36
 1918 0008 94B0     	 sub sp,sp,#80
 1919              	.LCFI60:
 1920              	 .cfi_def_cfa_offset 128
 1921 000a 0CAF     	 add r7,sp,#48
 1922              	.LCFI61:
 1923              	 .cfi_def_cfa 7,80
 1924 000c 7860     	 str r0,[r7,#4]
 437:../cleanflight/src/main/flight/imu.c ****     static timeUs_t previousIMUUpdateTime;
 438:../cleanflight/src/main/flight/imu.c ****     bool useAcc = false;
 1925              	 .loc 2 438 0
 1926 000e 0023     	 movs r3,#0
 1927 0010 FB77     	 strb r3,[r7,#31]
 439:../cleanflight/src/main/flight/imu.c ****     bool useMag = false;
 1928              	 .loc 2 439 0
 1929 0012 0023     	 movs r3,#0
 1930 0014 BB77     	 strb r3,[r7,#30]
 440:../cleanflight/src/main/flight/imu.c ****     bool useCOG = false; // Whether or not correct yaw via imuMahonyAHRSupdate from our ground cour
 1931              	 .loc 2 440 0
 1932 0016 0023     	 movs r3,#0
 1933 0018 7B77     	 strb r3,[r7,#29]
 441:../cleanflight/src/main/flight/imu.c ****     float courseOverGround = 0; // To be used when useCOG is true.  Stored in Radians
 1934              	 .loc 2 441 0
 1935 001a 4FF00003 	 mov r3,#0
 1936 001e BB61     	 str r3,[r7,#24]
 442:../cleanflight/src/main/flight/imu.c **** 
 443:../cleanflight/src/main/flight/imu.c ****     const timeDelta_t deltaT = currentTimeUs - previousIMUUpdateTime;
 1937              	 .loc 2 443 0
 1938 0020 734B     	 ldr r3,.L94
 1939 0022 1B68     	 ldr r3,[r3]
 1940 0024 7A68     	 ldr r2,[r7,#4]
 1941 0026 D31A     	 subs r3,r2,r3
 1942 0028 7B61     	 str r3,[r7,#20]
 444:../cleanflight/src/main/flight/imu.c ****     previousIMUUpdateTime = currentTimeUs;
 1943              	 .loc 2 444 0
 1944 002a 714A     	 ldr r2,.L94
 1945 002c 7B68     	 ldr r3,[r7,#4]
 1946 002e 1360     	 str r3,[r2]
 445:../cleanflight/src/main/flight/imu.c **** 
 446:../cleanflight/src/main/flight/imu.c **** #ifdef USE_MAG
 447:../cleanflight/src/main/flight/imu.c ****     if (sensors(SENSOR_MAG) && compassIsHealthy()) {
 1947              	 .loc 2 447 0
 1948 0030 0820     	 movs r0,#8
 1949 0032 FFF7FEFF 	 bl sensors
 1950 0036 0346     	 mov r3,r0
 1951 0038 002B     	 cmp r3,#0
 1952 003a 06D0     	 beq .L89
 1953              	 .loc 2 447 0 is_stmt 0 discriminator 1
 1954 003c FFF7FEFF 	 bl compassIsHealthy
 1955 0040 0346     	 mov r3,r0
 1956 0042 002B     	 cmp r3,#0
 1957 0044 01D0     	 beq .L89
 448:../cleanflight/src/main/flight/imu.c ****         useMag = true;
 1958              	 .loc 2 448 0 is_stmt 1
 1959 0046 0123     	 movs r3,#1
 1960 0048 BB77     	 strb r3,[r7,#30]
 1961              	.L89:
 449:../cleanflight/src/main/flight/imu.c ****     }
 450:../cleanflight/src/main/flight/imu.c **** #endif
 451:../cleanflight/src/main/flight/imu.c **** #if defined(USE_GPS)
 452:../cleanflight/src/main/flight/imu.c ****     if (!useMag && sensors(SENSOR_GPS) && STATE(GPS_FIX) && gpsSol.numSat >= 5 && gpsSol.groundSpee
 1962              	 .loc 2 452 0
 1963 004a BB7F     	 ldrb r3,[r7,#30]
 1964 004c 83F00103 	 eor r3,r3,#1
 1965 0050 DBB2     	 uxtb r3,r3
 1966 0052 002B     	 cmp r3,#0
 1967 0054 5ED0     	 beq .L90
 1968              	 .loc 2 452 0 is_stmt 0 discriminator 1
 1969 0056 2020     	 movs r0,#32
 1970 0058 FFF7FEFF 	 bl sensors
 1971 005c 0346     	 mov r3,r0
 1972 005e 002B     	 cmp r3,#0
 1973 0060 58D0     	 beq .L90
 1974              	 .loc 2 452 0 discriminator 2
 1975 0062 644B     	 ldr r3,.L94+4
 1976 0064 1B78     	 ldrb r3,[r3]
 1977 0066 03F00203 	 and r3,r3,#2
 1978 006a 002B     	 cmp r3,#0
 1979 006c 52D0     	 beq .L90
 1980              	 .loc 2 452 0 discriminator 3
 1981 006e 624B     	 ldr r3,.L94+8
 1982 0070 9B7C     	 ldrb r3,[r3,#18]
 1983 0072 042B     	 cmp r3,#4
 1984 0074 4ED9     	 bls .L90
 1985              	 .loc 2 452 0 discriminator 4
 1986 0076 604B     	 ldr r3,.L94+8
 1987 0078 9B89     	 ldrh r3,[r3,#12]
 1988 007a 9BB2     	 uxth r3,r3
 1989 007c B3F5FA7F 	 cmp r3,#500
 1990 0080 48D3     	 bcc .L90
 453:../cleanflight/src/main/flight/imu.c ****         // Use GPS course over ground to correct attitude.values.yaw
 454:../cleanflight/src/main/flight/imu.c ****         if (STATE(FIXED_WING)) {
 1991              	 .loc 2 454 0 is_stmt 1
 1992 0082 5C4B     	 ldr r3,.L94+4
 1993 0084 1B78     	 ldrb r3,[r3]
 1994 0086 03F01003 	 and r3,r3,#16
 1995 008a 002B     	 cmp r3,#0
 1996 008c 13D0     	 beq .L91
 455:../cleanflight/src/main/flight/imu.c ****             courseOverGround = DECIDEGREES_TO_RADIANS(gpsSol.groundCourse);
 1997              	 .loc 2 455 0
 1998 008e 5A4B     	 ldr r3,.L94+8
 1999 0090 DB89     	 ldrh r3,[r3,#14]
 2000 0092 9BB2     	 uxth r3,r3
 2001 0094 07EE903A 	 fmsr s15,r3
 2002 0098 F8EEE77A 	 fsitos s15,s15
 2003 009c B2EE047A 	 fconsts s14,#36
 2004 00a0 C7EE877A 	 fdivs s15,s15,s14
 2005 00a4 9FED557A 	 flds s14,.L94+12
 2006 00a8 67EE877A 	 fmuls s15,s15,s14
 2007 00ac C7ED067A 	 fsts s15,[r7,#24]
 456:../cleanflight/src/main/flight/imu.c ****             useCOG = true;
 2008              	 .loc 2 456 0
 2009 00b0 0123     	 movs r3,#1
 2010 00b2 7B77     	 strb r3,[r7,#29]
 2011 00b4 16E0     	 b .L92
 2012              	.L91:
 457:../cleanflight/src/main/flight/imu.c ****         } else {
 458:../cleanflight/src/main/flight/imu.c ****             // If GPS rescue mode is active and we can use it, go for it.  When we're close to home
 459:../cleanflight/src/main/flight/imu.c ****             // probably stop re calculating GPS heading data.  Other future modes can also use this
 460:../cleanflight/src/main/flight/imu.c **** 
 461:../cleanflight/src/main/flight/imu.c ****             if (canUseGPSHeading) {
 2013              	 .loc 2 461 0
 2014 00b6 524B     	 ldr r3,.L94+16
 2015 00b8 1B78     	 ldrb r3,[r3]
 2016 00ba 002B     	 cmp r3,#0
 2017 00bc 12D0     	 beq .L92
 462:../cleanflight/src/main/flight/imu.c ****                 courseOverGround = DECIDEGREES_TO_RADIANS(gpsSol.groundCourse);
 2018              	 .loc 2 462 0
 2019 00be 4E4B     	 ldr r3,.L94+8
 2020 00c0 DB89     	 ldrh r3,[r3,#14]
 2021 00c2 9BB2     	 uxth r3,r3
 2022 00c4 07EE903A 	 fmsr s15,r3
 2023 00c8 F8EEE77A 	 fsitos s15,s15
 2024 00cc B2EE047A 	 fconsts s14,#36
 2025 00d0 C7EE877A 	 fdivs s15,s15,s14
 2026 00d4 9FED497A 	 flds s14,.L94+12
 2027 00d8 67EE877A 	 fmuls s15,s15,s14
 2028 00dc C7ED067A 	 fsts s15,[r7,#24]
 463:../cleanflight/src/main/flight/imu.c **** 
 464:../cleanflight/src/main/flight/imu.c ****                 useCOG = true;
 2029              	 .loc 2 464 0
 2030 00e0 0123     	 movs r3,#1
 2031 00e2 7B77     	 strb r3,[r7,#29]
 2032              	.L92:
 465:../cleanflight/src/main/flight/imu.c ****             }
 466:../cleanflight/src/main/flight/imu.c ****         }
 467:../cleanflight/src/main/flight/imu.c **** 
 468:../cleanflight/src/main/flight/imu.c ****         if (useCOG && shouldInitializeGPSHeading()) {
 2033              	 .loc 2 468 0
 2034 00e4 7B7F     	 ldrb r3,[r7,#29]
 2035 00e6 002B     	 cmp r3,#0
 2036 00e8 14D0     	 beq .L90
 2037              	 .loc 2 468 0 is_stmt 0 discriminator 1
 2038 00ea FFF7FEFF 	 bl shouldInitializeGPSHeading
 2039 00ee 0346     	 mov r3,r0
 2040 00f0 002B     	 cmp r3,#0
 2041 00f2 0FD0     	 beq .L90
 469:../cleanflight/src/main/flight/imu.c ****             // Reset our reference and reinitialize quaternion.  This will likely ideally happen mo
 470:../cleanflight/src/main/flight/imu.c ****             // shouldInitializeGPSHeading() returns true only once.
 471:../cleanflight/src/main/flight/imu.c ****             imuComputeQuaternionFromRPY(&qP, attitude.values.roll, attitude.values.pitch, gpsSol.gr
 2042              	 .loc 2 471 0 is_stmt 1
 2043 00f4 434B     	 ldr r3,.L94+20
 2044 00f6 1988     	 ldrh r1,[r3]
 2045 00f8 424B     	 ldr r3,.L94+20
 2046 00fa 5A88     	 ldrh r2,[r3,#2]
 2047 00fc 3E4B     	 ldr r3,.L94+8
 2048 00fe DB89     	 ldrh r3,[r3,#14]
 2049 0100 9BB2     	 uxth r3,r3
 2050 0102 9BB2     	 uxth r3,r3
 2051 0104 09B2     	 sxth r1,r1
 2052 0106 12B2     	 sxth r2,r2
 2053 0108 1BB2     	 sxth r3,r3
 2054 010a 3F48     	 ldr r0,.L94+24
 2055 010c FFF7FEFF 	 bl imuComputeQuaternionFromRPY
 472:../cleanflight/src/main/flight/imu.c **** 
 473:../cleanflight/src/main/flight/imu.c ****             useCOG = false; // Don't use the COG when we first reinitialize.  Next time around thou
 2056              	 .loc 2 473 0
 2057 0110 0023     	 movs r3,#0
 2058 0112 7B77     	 strb r3,[r7,#29]
 2059              	.L90:
 474:../cleanflight/src/main/flight/imu.c ****         }
 475:../cleanflight/src/main/flight/imu.c ****     }
 476:../cleanflight/src/main/flight/imu.c **** #endif
 477:../cleanflight/src/main/flight/imu.c **** 
 478:../cleanflight/src/main/flight/imu.c **** #if defined(SIMULATOR_BUILD) && defined(SKIP_IMU_CALC)
 479:../cleanflight/src/main/flight/imu.c ****     UNUSED(imuMahonyAHRSupdate);
 480:../cleanflight/src/main/flight/imu.c ****     UNUSED(imuIsAccelerometerHealthy);
 481:../cleanflight/src/main/flight/imu.c ****     UNUSED(useAcc);
 482:../cleanflight/src/main/flight/imu.c ****     UNUSED(useMag);
 483:../cleanflight/src/main/flight/imu.c ****     UNUSED(useCOG);
 484:../cleanflight/src/main/flight/imu.c ****     UNUSED(canUseGPSHeading);
 485:../cleanflight/src/main/flight/imu.c ****     UNUSED(courseOverGround);
 486:../cleanflight/src/main/flight/imu.c ****     UNUSED(deltaT);
 487:../cleanflight/src/main/flight/imu.c **** #else
 488:../cleanflight/src/main/flight/imu.c **** 
 489:../cleanflight/src/main/flight/imu.c **** #if defined(SIMULATOR_BUILD) && defined(SIMULATOR_IMU_SYNC)
 490:../cleanflight/src/main/flight/imu.c **** //  printf("[imu]deltaT = %u, imuDeltaT = %u, currentTimeUs = %u, micros64_real = %lu\n", deltaT, i
 491:../cleanflight/src/main/flight/imu.c ****     deltaT = imuDeltaT;
 492:../cleanflight/src/main/flight/imu.c **** #endif
 493:../cleanflight/src/main/flight/imu.c ****     float gyroAverage[XYZ_AXIS_COUNT];
 494:../cleanflight/src/main/flight/imu.c ****     gyroGetAccumulationAverage(gyroAverage);
 2060              	 .loc 2 494 0
 2061 0114 07F10803 	 add r3,r7,#8
 2062 0118 1846     	 mov r0,r3
 2063 011a FFF7FEFF 	 bl gyroGetAccumulationAverage
 495:../cleanflight/src/main/flight/imu.c ****     if (accGetAccumulationAverage(accAverage)) {
 2064              	 .loc 2 495 0
 2065 011e 3B48     	 ldr r0,.L94+28
 2066 0120 FFF7FEFF 	 bl accGetAccumulationAverage
 2067 0124 0346     	 mov r3,r0
 2068 0126 002B     	 cmp r3,#0
 2069 0128 04D0     	 beq .L93
 496:../cleanflight/src/main/flight/imu.c ****         useAcc = imuIsAccelerometerHealthy(accAverage);
 2070              	 .loc 2 496 0
 2071 012a 3848     	 ldr r0,.L94+28
 2072 012c FFF7FEFF 	 bl imuIsAccelerometerHealthy
 2073 0130 0346     	 mov r3,r0
 2074 0132 FB77     	 strb r3,[r7,#31]
 2075              	.L93:
 497:../cleanflight/src/main/flight/imu.c ****     }
 498:../cleanflight/src/main/flight/imu.c **** 
 499:../cleanflight/src/main/flight/imu.c ****     imuMahonyAHRSupdate(deltaT * 1e-6f,
 2076              	 .loc 2 499 0
 2077 0134 7B69     	 ldr r3,[r7,#20]
 2078 0136 07EE903A 	 fmsr s15,r3
 2079 013a F8EEE77A 	 fsitos s15,s15
 2080 013e 9FED347A 	 flds s14,.L94+32
 2081 0142 67EE879A 	 fmuls s19,s15,s14
 500:../cleanflight/src/main/flight/imu.c ****                         DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEG
 2082              	 .loc 2 500 0
 2083 0146 D7ED027A 	 flds s15,[r7,#8]
 499:../cleanflight/src/main/flight/imu.c ****                         DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEG
 2084              	 .loc 2 499 0
 2085 014a 9FED2C7A 	 flds s14,.L94+12
 2086 014e 27EE879A 	 fmuls s18,s15,s14
 2087              	 .loc 2 500 0
 2088 0152 D7ED037A 	 flds s15,[r7,#12]
 499:../cleanflight/src/main/flight/imu.c ****                         DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEG
 2089              	 .loc 2 499 0
 2090 0156 9FED297A 	 flds s14,.L94+12
 2091 015a 67EE878A 	 fmuls s17,s15,s14
 2092              	 .loc 2 500 0
 2093 015e D7ED047A 	 flds s15,[r7,#16]
 499:../cleanflight/src/main/flight/imu.c ****                         DEGREES_TO_RADIANS(gyroAverage[X]), DEGREES_TO_RADIANS(gyroAverage[Y]), DEG
 2094              	 .loc 2 499 0
 2095 0162 9FED267A 	 flds s14,.L94+12
 2096 0166 27EE878A 	 fmuls s16,s15,s14
 2097 016a 284B     	 ldr r3,.L94+28
 2098 016c D3F800A0 	 ldr r10,[r3]
 2099 0170 264B     	 ldr r3,.L94+28
 2100 0172 D3F80490 	 ldr r9,[r3,#4]
 2101 0176 254B     	 ldr r3,.L94+28
 2102 0178 D3F80880 	 ldr r8,[r3,#8]
 2103 017c 254B     	 ldr r3,.L94+36
 2104 017e 1E68     	 ldr r6,[r3]
 2105 0180 3346     	 mov r3,r6
 2106 0182 1E46     	 mov r6,r3
 2107 0184 234B     	 ldr r3,.L94+36
 2108 0186 5D68     	 ldr r5,[r3,#4]
 2109 0188 2B46     	 mov r3,r5
 2110 018a 1D46     	 mov r5,r3
 2111 018c 214B     	 ldr r3,.L94+36
 2112 018e 9C68     	 ldr r4,[r3,#8]
 2113 0190 2346     	 mov r3,r4
 2114 0192 1C46     	 mov r4,r3
 2115 0194 FA7F     	 ldrb r2,[r7,#31]
 2116 0196 07F10803 	 add r3,r7,#8
 2117 019a 7868     	 ldr r0,[r7,#4]
 2118 019c 1146     	 mov r1,r2
 2119 019e 1A46     	 mov r2,r3
 2120 01a0 FFF7FEFF 	 bl imuCalcKpGain
 2121 01a4 0246     	 mov r2,r0
 2122 01a6 FB7F     	 ldrb r3,[r7,#31]
 2123 01a8 0093     	 str r3,[sp]
 2124 01aa CDF804A0 	 str r10,[sp,#4]
 2125 01ae CDF80890 	 str r9,[sp,#8]
 2126 01b2 CDF80C80 	 str r8,[sp,#12]
 2127 01b6 BB7F     	 ldrb r3,[r7,#30]
 2128 01b8 0493     	 str r3,[sp,#16]
 2129 01ba 0596     	 str r6,[sp,#20]
 2130 01bc 0695     	 str r5,[sp,#24]
 2131 01be 0794     	 str r4,[sp,#28]
 2132 01c0 7B7F     	 ldrb r3,[r7,#29]
 2133 01c2 0893     	 str r3,[sp,#32]
 2134 01c4 BB69     	 ldr r3,[r7,#24]
 2135 01c6 0993     	 str r3,[sp,#36]
 2136 01c8 0A92     	 str r2,[sp,#40]
 2137 01ca 19EE900A 	 fmrs r0,s19
 2138 01ce 19EE101A 	 fmrs r1,s18
 2139 01d2 18EE902A 	 fmrs r2,s17
 2140 01d6 18EE103A 	 fmrs r3,s16
 2141 01da FFF7FEFF 	 bl imuMahonyAHRSupdate
 501:../cleanflight/src/main/flight/imu.c ****                         useAcc, accAverage[X], accAverage[Y], accAverage[Z],
 502:../cleanflight/src/main/flight/imu.c ****                         useMag, mag.magADC[X], mag.magADC[Y], mag.magADC[Z],
 503:../cleanflight/src/main/flight/imu.c ****                         useCOG, courseOverGround,  imuCalcKpGain(currentTimeUs, useAcc, gyroAverage
 504:../cleanflight/src/main/flight/imu.c **** 
 505:../cleanflight/src/main/flight/imu.c ****     imuUpdateEulerAngles();
 2142              	 .loc 2 505 0
 2143 01de FFF7FEFF 	 bl imuUpdateEulerAngles
 506:../cleanflight/src/main/flight/imu.c **** #endif
 507:../cleanflight/src/main/flight/imu.c **** }
 2144              	 .loc 2 507 0
 2145 01e2 2037     	 adds r7,r7,#32
 2146              	.LCFI62:
 2147              	 .cfi_def_cfa_offset 48
 2148 01e4 BD46     	 mov sp,r7
 2149              	.LCFI63:
 2150              	 .cfi_def_cfa_register 13
 2151              	 
 2152 01e6 BDEC048B 	 fldmfdd sp!,{d8-d9}
 2153              	.LCFI64:
 2154              	 .cfi_restore 82
 2155              	 .cfi_restore 83
 2156              	 .cfi_restore 80
 2157              	 .cfi_restore 81
 2158              	 .cfi_def_cfa_offset 32
 2159 01ea BDE8F087 	 pop {r4,r5,r6,r7,r8,r9,r10,pc}
 2160              	.L95:
 2161 01ee 00BF     	 .align 2
 2162              	.L94:
 2163 01f0 00000000 	 .word previousIMUUpdateTime.13890
 2164 01f4 00000000 	 .word stateFlags
 2165 01f8 00000000 	 .word gpsSol
 2166 01fc 35FA8E3C 	 .word 1016003125
 2167 0200 00000000 	 .word canUseGPSHeading
 2168 0204 00000000 	 .word attitude
 2169 0208 00000000 	 .word qP
 2170 020c 00000000 	 .word accAverage
 2171 0210 BD378635 	 .word 897988541
 2172 0214 00000000 	 .word mag
 2173              	 .cfi_endproc
 2174              	.LFE568:
 2176              	 .section .text.calculateThrottleAngleCorrection,"ax",%progbits
 2177              	 .align 2
 2178              	 .global calculateThrottleAngleCorrection
 2179              	 .thumb
 2180              	 .thumb_func
 2182              	calculateThrottleAngleCorrection:
 2183              	.LFB569:
 508:../cleanflight/src/main/flight/imu.c **** 
 509:../cleanflight/src/main/flight/imu.c **** int calculateThrottleAngleCorrection(void)
 510:../cleanflight/src/main/flight/imu.c **** {
 2184              	 .loc 2 510 0
 2185              	 .cfi_startproc
 2186              	 
 2187              	 
 2188 0000 80B5     	 push {r7,lr}
 2189              	.LCFI65:
 2190              	 .cfi_def_cfa_offset 8
 2191              	 .cfi_offset 7,-8
 2192              	 .cfi_offset 14,-4
 2193 0002 2DED028B 	 fstmfdd sp!,{d8}
 2194              	.LCFI66:
 2195              	 .cfi_def_cfa_offset 16
 2196              	 .cfi_offset 80,-16
 2197              	 .cfi_offset 81,-12
 2198 0006 82B0     	 sub sp,sp,#8
 2199              	.LCFI67:
 2200              	 .cfi_def_cfa_offset 24
 2201 0008 00AF     	 add r7,sp,#0
 2202              	.LCFI68:
 2203              	 .cfi_def_cfa_register 7
 511:../cleanflight/src/main/flight/imu.c ****     /*
 512:../cleanflight/src/main/flight/imu.c ****     * Use 0 as the throttle angle correction if we are inverted, vertical or with a
 513:../cleanflight/src/main/flight/imu.c ****     * small angle < 0.86 deg
 514:../cleanflight/src/main/flight/imu.c ****     * TODO: Define this small angle in config.
 515:../cleanflight/src/main/flight/imu.c ****     */
 516:../cleanflight/src/main/flight/imu.c ****     if (rMat[2][2] <= 0.015f) {
 2204              	 .loc 2 516 0
 2205 000a 234B     	 ldr r3,.L103
 2206 000c D3ED087A 	 flds s15,[r3,#32]
 2207 0010 9FED227A 	 flds s14,.L103+4
 2208 0014 F4EEC77A 	 fcmpes s15,s14
 2209 0018 F1EE10FA 	 fmstat
 2210 001c 01D8     	 bhi .L102
 517:../cleanflight/src/main/flight/imu.c ****         return 0;
 2211              	 .loc 2 517 0
 2212 001e 0023     	 movs r3,#0
 2213 0020 33E0     	 b .L99
 2214              	.L102:
 518:../cleanflight/src/main/flight/imu.c ****     }
 519:../cleanflight/src/main/flight/imu.c ****     int angle = lrintf(acos_approx(rMat[2][2]) * throttleAngleScale);
 2215              	 .loc 2 519 0
 2216 0022 1D4B     	 ldr r3,.L103
 2217 0024 1B6A     	 ldr r3,[r3,#32]
 2218 0026 1846     	 mov r0,r3
 2219 0028 FFF7FEFF 	 bl acos_approx
 2220 002c 07EE100A 	 fmsr s14,r0
 2221 0030 1B4B     	 ldr r3,.L103+8
 2222 0032 D3ED007A 	 flds s15,[r3]
 2223 0036 67EE277A 	 fmuls s15,s14,s15
 2224 003a 17EE900A 	 fmrs r0,s15
 2225 003e FFF7FEFF 	 bl lrintf
 2226 0042 7860     	 str r0,[r7,#4]
 520:../cleanflight/src/main/flight/imu.c ****     if (angle > 900)
 2227              	 .loc 2 520 0
 2228 0044 7B68     	 ldr r3,[r7,#4]
 2229 0046 B3F5617F 	 cmp r3,#900
 2230 004a 02DD     	 ble .L100
 521:../cleanflight/src/main/flight/imu.c ****         angle = 900;
 2231              	 .loc 2 521 0
 2232 004c 4FF46173 	 mov r3,#900
 2233 0050 7B60     	 str r3,[r7,#4]
 2234              	.L100:
 522:../cleanflight/src/main/flight/imu.c ****     return lrintf(throttleAngleValue * sin_approx(angle / (900.0f * M_PIf / 2.0f)));
 2235              	 .loc 2 522 0
 2236 0052 144B     	 ldr r3,.L103+12
 2237 0054 1B68     	 ldr r3,[r3]
 2238 0056 07EE903A 	 fmsr s15,r3
 2239 005a B8EEE78A 	 fsitos s16,s15
 2240 005e 7B68     	 ldr r3,[r7,#4]
 2241 0060 07EE903A 	 fmsr s15,r3
 2242 0064 F8EEE77A 	 fsitos s15,s15
 2243 0068 9FED0F7A 	 flds s14,.L103+16
 2244 006c C7EE877A 	 fdivs s15,s15,s14
 2245 0070 17EE900A 	 fmrs r0,s15
 2246 0074 FFF7FEFF 	 bl sin_approx
 2247 0078 07EE900A 	 fmsr s15,r0
 2248 007c 68EE277A 	 fmuls s15,s16,s15
 2249 0080 17EE900A 	 fmrs r0,s15
 2250 0084 FFF7FEFF 	 bl lrintf
 2251 0088 0346     	 mov r3,r0
 2252              	.L99:
 523:../cleanflight/src/main/flight/imu.c **** }
 2253              	 .loc 2 523 0
 2254 008a 1846     	 mov r0,r3
 2255 008c 0837     	 adds r7,r7,#8
 2256              	.LCFI69:
 2257              	 .cfi_def_cfa_offset 16
 2258 008e BD46     	 mov sp,r7
 2259              	.LCFI70:
 2260              	 .cfi_def_cfa_register 13
 2261              	 
 2262 0090 BDEC028B 	 fldmfdd sp!,{d8}
 2263              	.LCFI71:
 2264              	 .cfi_restore 80
 2265              	 .cfi_restore 81
 2266              	 .cfi_def_cfa_offset 8
 2267 0094 80BD     	 pop {r7,pc}
 2268              	.L104:
 2269 0096 00BF     	 .align 2
 2270              	.L103:
 2271 0098 00000000 	 .word rMat
 2272 009c 8FC2753C 	 .word 1014350479
 2273 00a0 00000000 	 .word throttleAngleScale
 2274 00a4 00000000 	 .word throttleAngleValue
 2275 00a8 EFB6B044 	 .word 1152431855
 2276              	 .cfi_endproc
 2277              	.LFE569:
 2279              	 .section .text.imuUpdateAttitude,"ax",%progbits
 2280              	 .align 2
 2281              	 .global imuUpdateAttitude
 2282              	 .thumb
 2283              	 .thumb_func
 2285              	imuUpdateAttitude:
 2286              	.LFB570:
 524:../cleanflight/src/main/flight/imu.c **** 
 525:../cleanflight/src/main/flight/imu.c **** void imuUpdateAttitude(timeUs_t currentTimeUs)
 526:../cleanflight/src/main/flight/imu.c **** {
 2287              	 .loc 2 526 0
 2288              	 .cfi_startproc
 2289              	 
 2290              	 
 2291 0000 80B5     	 push {r7,lr}
 2292              	.LCFI72:
 2293              	 .cfi_def_cfa_offset 8
 2294              	 .cfi_offset 7,-8
 2295              	 .cfi_offset 14,-4
 2296 0002 84B0     	 sub sp,sp,#16
 2297              	.LCFI73:
 2298              	 .cfi_def_cfa_offset 24
 2299 0004 00AF     	 add r7,sp,#0
 2300              	.LCFI74:
 2301              	 .cfi_def_cfa_register 7
 2302 0006 7860     	 str r0,[r7,#4]
 527:../cleanflight/src/main/flight/imu.c ****     if (sensors(SENSOR_ACC) && acc.isAccelUpdatedAtLeastOnce) {
 2303              	 .loc 2 527 0
 2304 0008 0220     	 movs r0,#2
 2305 000a FFF7FEFF 	 bl sensors
 2306 000e 0346     	 mov r3,r0
 2307 0010 002B     	 cmp r3,#0
 2308 0012 26D0     	 beq .L106
 2309              	 .loc 2 527 0 is_stmt 0 discriminator 1
 2310 0014 1C4B     	 ldr r3,.L110
 2311 0016 93F83130 	 ldrb r3,[r3,#49]
 2312 001a 002B     	 cmp r3,#0
 2313 001c 21D0     	 beq .L106
 2314              	.LBB7:
 528:../cleanflight/src/main/flight/imu.c ****         IMU_LOCK;
 529:../cleanflight/src/main/flight/imu.c **** #if defined(SIMULATOR_BUILD) && defined(SIMULATOR_IMU_SYNC)
 530:../cleanflight/src/main/flight/imu.c ****         if (imuUpdated == false) {
 531:../cleanflight/src/main/flight/imu.c ****             IMU_UNLOCK;
 532:../cleanflight/src/main/flight/imu.c ****             return;
 533:../cleanflight/src/main/flight/imu.c ****         }
 534:../cleanflight/src/main/flight/imu.c ****         imuUpdated = false;
 535:../cleanflight/src/main/flight/imu.c **** #endif
 536:../cleanflight/src/main/flight/imu.c ****         imuCalculateEstimatedAttitude(currentTimeUs);
 2315              	 .loc 2 536 0 is_stmt 1
 2316 001e 7868     	 ldr r0,[r7,#4]
 2317 0020 FFF7FEFF 	 bl imuCalculateEstimatedAttitude
 537:../cleanflight/src/main/flight/imu.c ****         IMU_UNLOCK;
 538:../cleanflight/src/main/flight/imu.c ****         
 539:../cleanflight/src/main/flight/imu.c ****         // Update the throttle correction for angle and supply it to the mixer
 540:../cleanflight/src/main/flight/imu.c ****         int throttleAngleCorrection = 0;
 2318              	 .loc 2 540 0
 2319 0024 0023     	 movs r3,#0
 2320 0026 FB60     	 str r3,[r7,#12]
 541:../cleanflight/src/main/flight/imu.c ****         if (throttleAngleValue && (FLIGHT_MODE(ANGLE_MODE) || FLIGHT_MODE(HORIZON_MODE)) && ARMING_
 2321              	 .loc 2 541 0
 2322 0028 184B     	 ldr r3,.L110+4
 2323 002a 1B68     	 ldr r3,[r3]
 2324 002c 002B     	 cmp r3,#0
 2325 002e 14D0     	 beq .L107
 2326              	 .loc 2 541 0 is_stmt 0 discriminator 1
 2327 0030 174B     	 ldr r3,.L110+8
 2328 0032 1B88     	 ldrh r3,[r3]
 2329 0034 03F00103 	 and r3,r3,#1
 2330 0038 002B     	 cmp r3,#0
 2331 003a 05D1     	 bne .L108
 2332              	 .loc 2 541 0 discriminator 3
 2333 003c 144B     	 ldr r3,.L110+8
 2334 003e 1B88     	 ldrh r3,[r3]
 2335 0040 03F00203 	 and r3,r3,#2
 2336 0044 002B     	 cmp r3,#0
 2337 0046 08D0     	 beq .L107
 2338              	.L108:
 2339              	 .loc 2 541 0 discriminator 4
 2340 0048 124B     	 ldr r3,.L110+12
 2341 004a 1B78     	 ldrb r3,[r3]
 2342 004c 03F00103 	 and r3,r3,#1
 2343 0050 002B     	 cmp r3,#0
 2344 0052 02D0     	 beq .L107
 542:../cleanflight/src/main/flight/imu.c ****             throttleAngleCorrection = calculateThrottleAngleCorrection();
 2345              	 .loc 2 542 0 is_stmt 1
 2346 0054 FFF7FEFF 	 bl calculateThrottleAngleCorrection
 2347 0058 F860     	 str r0,[r7,#12]
 2348              	.L107:
 543:../cleanflight/src/main/flight/imu.c ****         }
 544:../cleanflight/src/main/flight/imu.c ****         mixerSetThrottleAngleCorrection(throttleAngleCorrection);
 2349              	 .loc 2 544 0
 2350 005a F868     	 ldr r0,[r7,#12]
 2351 005c FFF7FEFF 	 bl mixerSetThrottleAngleCorrection
 2352              	.LBE7:
 527:../cleanflight/src/main/flight/imu.c ****         IMU_LOCK;
 2353              	 .loc 2 527 0
 2354 0060 0EE0     	 b .L105
 2355              	.L106:
 545:../cleanflight/src/main/flight/imu.c **** 
 546:../cleanflight/src/main/flight/imu.c ****     } else {
 547:../cleanflight/src/main/flight/imu.c ****         acc.accADC[X] = 0;
 2356              	 .loc 2 547 0
 2357 0062 094B     	 ldr r3,.L110
 2358 0064 2533     	 adds r3,r3,#37
 2359 0066 4FF00002 	 mov r2,#0
 2360 006a 1A60     	 str r2,[r3]
 548:../cleanflight/src/main/flight/imu.c ****         acc.accADC[Y] = 0;
 2361              	 .loc 2 548 0
 2362 006c 064B     	 ldr r3,.L110
 2363 006e 2933     	 adds r3,r3,#41
 2364 0070 4FF00002 	 mov r2,#0
 2365 0074 1A60     	 str r2,[r3]
 549:../cleanflight/src/main/flight/imu.c ****         acc.accADC[Z] = 0;
 2366              	 .loc 2 549 0
 2367 0076 044B     	 ldr r3,.L110
 2368 0078 2D33     	 adds r3,r3,#45
 2369 007a 4FF00002 	 mov r2,#0
 2370 007e 1A60     	 str r2,[r3]
 2371              	.L105:
 550:../cleanflight/src/main/flight/imu.c ****     }
 551:../cleanflight/src/main/flight/imu.c **** }
 2372              	 .loc 2 551 0
 2373 0080 1037     	 adds r7,r7,#16
 2374              	.LCFI75:
 2375              	 .cfi_def_cfa_offset 8
 2376 0082 BD46     	 mov sp,r7
 2377              	.LCFI76:
 2378              	 .cfi_def_cfa_register 13
 2379              	 
 2380 0084 80BD     	 pop {r7,pc}
 2381              	.L111:
 2382 0086 00BF     	 .align 2
 2383              	.L110:
 2384 0088 00000000 	 .word acc
 2385 008c 00000000 	 .word throttleAngleValue
 2386 0090 00000000 	 .word flightModeFlags
 2387 0094 00000000 	 .word armingFlags
 2388              	 .cfi_endproc
 2389              	.LFE570:
 2391              	 .section .text.shouldInitializeGPSHeading,"ax",%progbits
 2392              	 .align 2
 2393              	 .global shouldInitializeGPSHeading
 2394              	 .thumb
 2395              	 .thumb_func
 2397              	shouldInitializeGPSHeading:
 2398              	.LFB571:
 552:../cleanflight/src/main/flight/imu.c **** 
 553:../cleanflight/src/main/flight/imu.c **** bool shouldInitializeGPSHeading()
 554:../cleanflight/src/main/flight/imu.c **** {
 2399              	 .loc 2 554 0
 2400              	 .cfi_startproc
 2401              	 
 2402              	 
 2403              	 
 2404 0000 80B4     	 push {r7}
 2405              	.LCFI77:
 2406              	 .cfi_def_cfa_offset 4
 2407              	 .cfi_offset 7,-4
 2408 0002 00AF     	 add r7,sp,#0
 2409              	.LCFI78:
 2410              	 .cfi_def_cfa_register 7
 555:../cleanflight/src/main/flight/imu.c ****     static bool initialized = false;
 556:../cleanflight/src/main/flight/imu.c **** 
 557:../cleanflight/src/main/flight/imu.c ****     if (!initialized) {
 2411              	 .loc 2 557 0
 2412 0004 084B     	 ldr r3,.L115
 2413 0006 1B78     	 ldrb r3,[r3]
 2414 0008 83F00103 	 eor r3,r3,#1
 2415 000c DBB2     	 uxtb r3,r3
 2416 000e 002B     	 cmp r3,#0
 2417 0010 04D0     	 beq .L113
 558:../cleanflight/src/main/flight/imu.c ****         initialized = true;
 2418              	 .loc 2 558 0
 2419 0012 054B     	 ldr r3,.L115
 2420 0014 0122     	 movs r2,#1
 2421 0016 1A70     	 strb r2,[r3]
 559:../cleanflight/src/main/flight/imu.c **** 
 560:../cleanflight/src/main/flight/imu.c ****         return true;
 2422              	 .loc 2 560 0
 2423 0018 0123     	 movs r3,#1
 2424 001a 00E0     	 b .L114
 2425              	.L113:
 561:../cleanflight/src/main/flight/imu.c ****     }
 562:../cleanflight/src/main/flight/imu.c **** 
 563:../cleanflight/src/main/flight/imu.c ****     return false;
 2426              	 .loc 2 563 0
 2427 001c 0023     	 movs r3,#0
 2428              	.L114:
 564:../cleanflight/src/main/flight/imu.c **** }
 2429              	 .loc 2 564 0
 2430 001e 1846     	 mov r0,r3
 2431 0020 BD46     	 mov sp,r7
 2432              	.LCFI79:
 2433              	 .cfi_def_cfa_register 13
 2434              	 
 2435 0022 5DF8047B 	 ldr r7,[sp],#4
 2436              	.LCFI80:
 2437              	 .cfi_restore 7
 2438              	 .cfi_def_cfa_offset 0
 2439 0026 7047     	 bx lr
 2440              	.L116:
 2441              	 .align 2
 2442              	.L115:
 2443 0028 00000000 	 .word initialized.13907
 2444              	 .cfi_endproc
 2445              	.LFE571:
 2447              	 .section .text.getCosTiltAngle,"ax",%progbits
 2448              	 .align 2
 2449              	 .global getCosTiltAngle
 2450              	 .thumb
 2451              	 .thumb_func
 2453              	getCosTiltAngle:
 2454              	.LFB572:
 565:../cleanflight/src/main/flight/imu.c **** 
 566:../cleanflight/src/main/flight/imu.c **** float getCosTiltAngle(void)
 567:../cleanflight/src/main/flight/imu.c **** {
 2455              	 .loc 2 567 0
 2456              	 .cfi_startproc
 2457              	 
 2458              	 
 2459              	 
 2460 0000 80B4     	 push {r7}
 2461              	.LCFI81:
 2462              	 .cfi_def_cfa_offset 4
 2463              	 .cfi_offset 7,-4
 2464 0002 00AF     	 add r7,sp,#0
 2465              	.LCFI82:
 2466              	 .cfi_def_cfa_register 7
 568:../cleanflight/src/main/flight/imu.c ****     return rMat[2][2];
 2467              	 .loc 2 568 0
 2468 0004 034B     	 ldr r3,.L119
 2469 0006 1B6A     	 ldr r3,[r3,#32]
 569:../cleanflight/src/main/flight/imu.c **** }
 2470              	 .loc 2 569 0
 2471 0008 1846     	 mov r0,r3
 2472 000a BD46     	 mov sp,r7
 2473              	.LCFI83:
 2474              	 .cfi_def_cfa_register 13
 2475              	 
 2476 000c 5DF8047B 	 ldr r7,[sp],#4
 2477              	.LCFI84:
 2478              	 .cfi_restore 7
 2479              	 .cfi_def_cfa_offset 0
 2480 0010 7047     	 bx lr
 2481              	.L120:
 2482 0012 00BF     	 .align 2
 2483              	.L119:
 2484 0014 00000000 	 .word rMat
 2485              	 .cfi_endproc
 2486              	.LFE572:
 2488              	 .section .text.getQuaternion,"ax",%progbits
 2489              	 .align 2
 2490              	 .global getQuaternion
 2491              	 .thumb
 2492              	 .thumb_func
 2494              	getQuaternion:
 2495              	.LFB573:
 570:../cleanflight/src/main/flight/imu.c **** 
 571:../cleanflight/src/main/flight/imu.c **** void getQuaternion(quaternion *quat)
 572:../cleanflight/src/main/flight/imu.c **** {
 2496              	 .loc 2 572 0
 2497              	 .cfi_startproc
 2498              	 
 2499              	 
 2500              	 
 2501 0000 80B4     	 push {r7}
 2502              	.LCFI85:
 2503              	 .cfi_def_cfa_offset 4
 2504              	 .cfi_offset 7,-4
 2505 0002 83B0     	 sub sp,sp,#12
 2506              	.LCFI86:
 2507              	 .cfi_def_cfa_offset 16
 2508 0004 00AF     	 add r7,sp,#0
 2509              	.LCFI87:
 2510              	 .cfi_def_cfa_register 7
 2511 0006 7860     	 str r0,[r7,#4]
 573:../cleanflight/src/main/flight/imu.c ****    quat->w = q.w;
 2512              	 .loc 2 573 0
 2513 0008 0A4B     	 ldr r3,.L122
 2514 000a 1A68     	 ldr r2,[r3]
 2515 000c 7B68     	 ldr r3,[r7,#4]
 2516 000e 1A60     	 str r2,[r3]
 574:../cleanflight/src/main/flight/imu.c ****    quat->x = q.x;
 2517              	 .loc 2 574 0
 2518 0010 084B     	 ldr r3,.L122
 2519 0012 5A68     	 ldr r2,[r3,#4]
 2520 0014 7B68     	 ldr r3,[r7,#4]
 2521 0016 5A60     	 str r2,[r3,#4]
 575:../cleanflight/src/main/flight/imu.c ****    quat->y = q.y;
 2522              	 .loc 2 575 0
 2523 0018 064B     	 ldr r3,.L122
 2524 001a 9A68     	 ldr r2,[r3,#8]
 2525 001c 7B68     	 ldr r3,[r7,#4]
 2526 001e 9A60     	 str r2,[r3,#8]
 576:../cleanflight/src/main/flight/imu.c ****    quat->z = q.z;
 2527              	 .loc 2 576 0
 2528 0020 044B     	 ldr r3,.L122
 2529 0022 DA68     	 ldr r2,[r3,#12]
 2530 0024 7B68     	 ldr r3,[r7,#4]
 2531 0026 DA60     	 str r2,[r3,#12]
 577:../cleanflight/src/main/flight/imu.c **** }
 2532              	 .loc 2 577 0
 2533 0028 0C37     	 adds r7,r7,#12
 2534              	.LCFI88:
 2535              	 .cfi_def_cfa_offset 4
 2536 002a BD46     	 mov sp,r7
 2537              	.LCFI89:
 2538              	 .cfi_def_cfa_register 13
 2539              	 
 2540 002c 5DF8047B 	 ldr r7,[sp],#4
 2541              	.LCFI90:
 2542              	 .cfi_restore 7
 2543              	 .cfi_def_cfa_offset 0
 2544 0030 7047     	 bx lr
 2545              	.L123:
 2546 0032 00BF     	 .align 2
 2547              	.L122:
 2548 0034 00000000 	 .word q
 2549              	 .cfi_endproc
 2550              	.LFE573:
 2552              	 .section .text.imuComputeQuaternionFromRPY,"ax",%progbits
 2553              	 .align 2
 2554              	 .global imuComputeQuaternionFromRPY
 2555              	 .thumb
 2556              	 .thumb_func
 2558              	imuComputeQuaternionFromRPY:
 2559              	.LFB574:
 578:../cleanflight/src/main/flight/imu.c **** 
 579:../cleanflight/src/main/flight/imu.c **** void imuComputeQuaternionFromRPY(quaternionProducts *quatProd, int16_t initialRoll, int16_t initial
 580:../cleanflight/src/main/flight/imu.c **** {
 2560              	 .loc 2 580 0
 2561              	 .cfi_startproc
 2562              	 
 2563              	 
 2564 0000 80B5     	 push {r7,lr}
 2565              	.LCFI91:
 2566              	 .cfi_def_cfa_offset 8
 2567              	 .cfi_offset 7,-8
 2568              	 .cfi_offset 14,-4
 2569 0002 8EB0     	 sub sp,sp,#56
 2570              	.LCFI92:
 2571              	 .cfi_def_cfa_offset 64
 2572 0004 00AF     	 add r7,sp,#0
 2573              	.LCFI93:
 2574              	 .cfi_def_cfa_register 7
 2575 0006 F860     	 str r0,[r7,#12]
 2576 0008 0846     	 mov r0,r1
 2577 000a 1146     	 mov r1,r2
 2578 000c 1A46     	 mov r2,r3
 2579 000e 0346     	 mov r3,r0
 2580 0010 7B81     	 strh r3,[r7,#10]
 2581 0012 0B46     	 mov r3,r1
 2582 0014 3B81     	 strh r3,[r7,#8]
 2583 0016 1346     	 mov r3,r2
 2584 0018 FB80     	 strh r3,[r7,#6]
 581:../cleanflight/src/main/flight/imu.c ****     if (initialRoll > 1800) {
 2585              	 .loc 2 581 0
 2586 001a B7F90A30 	 ldrsh r3,[r7,#10]
 2587 001e B3F5E16F 	 cmp r3,#1800
 2588 0022 04DD     	 ble .L125
 582:../cleanflight/src/main/flight/imu.c ****         initialRoll -= 3600;
 2589              	 .loc 2 582 0
 2590 0024 7B89     	 ldrh r3,[r7,#10]
 2591 0026 A3F56163 	 sub r3,r3,#3600
 2592 002a 9BB2     	 uxth r3,r3
 2593 002c 7B81     	 strh r3,[r7,#10]
 2594              	.L125:
 583:../cleanflight/src/main/flight/imu.c ****     }
 584:../cleanflight/src/main/flight/imu.c **** 
 585:../cleanflight/src/main/flight/imu.c ****     if (initialPitch > 1800) {
 2595              	 .loc 2 585 0
 2596 002e B7F90830 	 ldrsh r3,[r7,#8]
 2597 0032 B3F5E16F 	 cmp r3,#1800
 2598 0036 04DD     	 ble .L126
 586:../cleanflight/src/main/flight/imu.c ****         initialPitch -= 3600;
 2599              	 .loc 2 586 0
 2600 0038 3B89     	 ldrh r3,[r7,#8]
 2601 003a A3F56163 	 sub r3,r3,#3600
 2602 003e 9BB2     	 uxth r3,r3
 2603 0040 3B81     	 strh r3,[r7,#8]
 2604              	.L126:
 587:../cleanflight/src/main/flight/imu.c ****     }
 588:../cleanflight/src/main/flight/imu.c **** 
 589:../cleanflight/src/main/flight/imu.c ****     if (initialYaw > 1800) {
 2605              	 .loc 2 589 0
 2606 0042 B7F90630 	 ldrsh r3,[r7,#6]
 2607 0046 B3F5E16F 	 cmp r3,#1800
 2608 004a 04DD     	 ble .L127
 590:../cleanflight/src/main/flight/imu.c ****         initialYaw -= 3600;
 2609              	 .loc 2 590 0
 2610 004c FB88     	 ldrh r3,[r7,#6]
 2611 004e A3F56163 	 sub r3,r3,#3600
 2612 0052 9BB2     	 uxth r3,r3
 2613 0054 FB80     	 strh r3,[r7,#6]
 2614              	.L127:
 591:../cleanflight/src/main/flight/imu.c ****     }
 592:../cleanflight/src/main/flight/imu.c **** 
 593:../cleanflight/src/main/flight/imu.c ****     const float cosRoll = cos_approx(DECIDEGREES_TO_RADIANS(initialRoll) * 0.5f);
 2615              	 .loc 2 593 0
 2616 0056 B7F90A30 	 ldrsh r3,[r7,#10]
 2617 005a 07EE903A 	 fmsr s15,r3
 2618 005e F8EEE77A 	 fsitos s15,s15
 2619 0062 B2EE047A 	 fconsts s14,#36
 2620 0066 C7EE877A 	 fdivs s15,s15,s14
 2621 006a 9FEDA07A 	 flds s14,.L128
 2622 006e 67EE877A 	 fmuls s15,s15,s14
 2623 0072 B6EE007A 	 fconsts s14,#96
 2624 0076 67EE877A 	 fmuls s15,s15,s14
 2625 007a 17EE900A 	 fmrs r0,s15
 2626 007e FFF7FEFF 	 bl cos_approx
 2627 0082 7863     	 str r0,[r7,#52]
 594:../cleanflight/src/main/flight/imu.c ****     const float sinRoll = sin_approx(DECIDEGREES_TO_RADIANS(initialRoll) * 0.5f);
 2628              	 .loc 2 594 0
 2629 0084 B7F90A30 	 ldrsh r3,[r7,#10]
 2630 0088 07EE903A 	 fmsr s15,r3
 2631 008c F8EEE77A 	 fsitos s15,s15
 2632 0090 B2EE047A 	 fconsts s14,#36
 2633 0094 C7EE877A 	 fdivs s15,s15,s14
 2634 0098 9FED947A 	 flds s14,.L128
 2635 009c 67EE877A 	 fmuls s15,s15,s14
 2636 00a0 B6EE007A 	 fconsts s14,#96
 2637 00a4 67EE877A 	 fmuls s15,s15,s14
 2638 00a8 17EE900A 	 fmrs r0,s15
 2639 00ac FFF7FEFF 	 bl sin_approx
 2640 00b0 3863     	 str r0,[r7,#48]
 595:../cleanflight/src/main/flight/imu.c **** 
 596:../cleanflight/src/main/flight/imu.c ****     const float cosPitch = cos_approx(DECIDEGREES_TO_RADIANS(initialPitch) * 0.5f);
 2641              	 .loc 2 596 0
 2642 00b2 B7F90830 	 ldrsh r3,[r7,#8]
 2643 00b6 07EE903A 	 fmsr s15,r3
 2644 00ba F8EEE77A 	 fsitos s15,s15
 2645 00be B2EE047A 	 fconsts s14,#36
 2646 00c2 C7EE877A 	 fdivs s15,s15,s14
 2647 00c6 9FED897A 	 flds s14,.L128
 2648 00ca 67EE877A 	 fmuls s15,s15,s14
 2649 00ce B6EE007A 	 fconsts s14,#96
 2650 00d2 67EE877A 	 fmuls s15,s15,s14
 2651 00d6 17EE900A 	 fmrs r0,s15
 2652 00da FFF7FEFF 	 bl cos_approx
 2653 00de F862     	 str r0,[r7,#44]
 597:../cleanflight/src/main/flight/imu.c ****     const float sinPitch = sin_approx(DECIDEGREES_TO_RADIANS(initialPitch) * 0.5f);
 2654              	 .loc 2 597 0
 2655 00e0 B7F90830 	 ldrsh r3,[r7,#8]
 2656 00e4 07EE903A 	 fmsr s15,r3
 2657 00e8 F8EEE77A 	 fsitos s15,s15
 2658 00ec B2EE047A 	 fconsts s14,#36
 2659 00f0 C7EE877A 	 fdivs s15,s15,s14
 2660 00f4 9FED7D7A 	 flds s14,.L128
 2661 00f8 67EE877A 	 fmuls s15,s15,s14
 2662 00fc B6EE007A 	 fconsts s14,#96
 2663 0100 67EE877A 	 fmuls s15,s15,s14
 2664 0104 17EE900A 	 fmrs r0,s15
 2665 0108 FFF7FEFF 	 bl sin_approx
 2666 010c B862     	 str r0,[r7,#40]
 598:../cleanflight/src/main/flight/imu.c **** 
 599:../cleanflight/src/main/flight/imu.c ****     const float cosYaw = cos_approx(DECIDEGREES_TO_RADIANS(-initialYaw) * 0.5f);
 2667              	 .loc 2 599 0
 2668 010e B7F90630 	 ldrsh r3,[r7,#6]
 2669 0112 5B42     	 negs r3,r3
 2670 0114 07EE903A 	 fmsr s15,r3
 2671 0118 F8EEE77A 	 fsitos s15,s15
 2672 011c B2EE047A 	 fconsts s14,#36
 2673 0120 C7EE877A 	 fdivs s15,s15,s14
 2674 0124 9FED717A 	 flds s14,.L128
 2675 0128 67EE877A 	 fmuls s15,s15,s14
 2676 012c B6EE007A 	 fconsts s14,#96
 2677 0130 67EE877A 	 fmuls s15,s15,s14
 2678 0134 17EE900A 	 fmrs r0,s15
 2679 0138 FFF7FEFF 	 bl cos_approx
 2680 013c 7862     	 str r0,[r7,#36]
 600:../cleanflight/src/main/flight/imu.c ****     const float sinYaw = sin_approx(DECIDEGREES_TO_RADIANS(-initialYaw) * 0.5f);
 2681              	 .loc 2 600 0
 2682 013e B7F90630 	 ldrsh r3,[r7,#6]
 2683 0142 5B42     	 negs r3,r3
 2684 0144 07EE903A 	 fmsr s15,r3
 2685 0148 F8EEE77A 	 fsitos s15,s15
 2686 014c B2EE047A 	 fconsts s14,#36
 2687 0150 C7EE877A 	 fdivs s15,s15,s14
 2688 0154 9FED657A 	 flds s14,.L128
 2689 0158 67EE877A 	 fmuls s15,s15,s14
 2690 015c B6EE007A 	 fconsts s14,#96
 2691 0160 67EE877A 	 fmuls s15,s15,s14
 2692 0164 17EE900A 	 fmrs r0,s15
 2693 0168 FFF7FEFF 	 bl sin_approx
 2694 016c 3862     	 str r0,[r7,#32]
 601:../cleanflight/src/main/flight/imu.c **** 
 602:../cleanflight/src/main/flight/imu.c ****     const float q0 = cosRoll * cosPitch * cosYaw + sinRoll * sinPitch * sinYaw;
 2695              	 .loc 2 602 0
 2696 016e 97ED0D7A 	 flds s14,[r7,#52]
 2697 0172 D7ED0B7A 	 flds s15,[r7,#44]
 2698 0176 27EE277A 	 fmuls s14,s14,s15
 2699 017a D7ED097A 	 flds s15,[r7,#36]
 2700 017e 27EE277A 	 fmuls s14,s14,s15
 2701 0182 D7ED0C6A 	 flds s13,[r7,#48]
 2702 0186 D7ED0A7A 	 flds s15,[r7,#40]
 2703 018a 66EEA76A 	 fmuls s13,s13,s15
 2704 018e D7ED087A 	 flds s15,[r7,#32]
 2705 0192 66EEA77A 	 fmuls s15,s13,s15
 2706 0196 77EE277A 	 fadds s15,s14,s15
 2707 019a C7ED077A 	 fsts s15,[r7,#28]
 603:../cleanflight/src/main/flight/imu.c ****     const float q1 = sinRoll * cosPitch * cosYaw - cosRoll * sinPitch * sinYaw;
 2708              	 .loc 2 603 0
 2709 019e 97ED0C7A 	 flds s14,[r7,#48]
 2710 01a2 D7ED0B7A 	 flds s15,[r7,#44]
 2711 01a6 27EE277A 	 fmuls s14,s14,s15
 2712 01aa D7ED097A 	 flds s15,[r7,#36]
 2713 01ae 27EE277A 	 fmuls s14,s14,s15
 2714 01b2 D7ED0D6A 	 flds s13,[r7,#52]
 2715 01b6 D7ED0A7A 	 flds s15,[r7,#40]
 2716 01ba 66EEA76A 	 fmuls s13,s13,s15
 2717 01be D7ED087A 	 flds s15,[r7,#32]
 2718 01c2 66EEA77A 	 fmuls s15,s13,s15
 2719 01c6 77EE677A 	 fsubs s15,s14,s15
 2720 01ca C7ED067A 	 fsts s15,[r7,#24]
 604:../cleanflight/src/main/flight/imu.c ****     const float q2 = cosRoll * sinPitch * cosYaw + sinRoll * cosPitch * sinYaw;
 2721              	 .loc 2 604 0
 2722 01ce 97ED0D7A 	 flds s14,[r7,#52]
 2723 01d2 D7ED0A7A 	 flds s15,[r7,#40]
 2724 01d6 27EE277A 	 fmuls s14,s14,s15
 2725 01da D7ED097A 	 flds s15,[r7,#36]
 2726 01de 27EE277A 	 fmuls s14,s14,s15
 2727 01e2 D7ED0C6A 	 flds s13,[r7,#48]
 2728 01e6 D7ED0B7A 	 flds s15,[r7,#44]
 2729 01ea 66EEA76A 	 fmuls s13,s13,s15
 2730 01ee D7ED087A 	 flds s15,[r7,#32]
 2731 01f2 66EEA77A 	 fmuls s15,s13,s15
 2732 01f6 77EE277A 	 fadds s15,s14,s15
 2733 01fa C7ED057A 	 fsts s15,[r7,#20]
 605:../cleanflight/src/main/flight/imu.c ****     const float q3 = cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw;
 2734              	 .loc 2 605 0
 2735 01fe 97ED0D7A 	 flds s14,[r7,#52]
 2736 0202 D7ED0B7A 	 flds s15,[r7,#44]
 2737 0206 27EE277A 	 fmuls s14,s14,s15
 2738 020a D7ED087A 	 flds s15,[r7,#32]
 2739 020e 27EE277A 	 fmuls s14,s14,s15
 2740 0212 D7ED0C6A 	 flds s13,[r7,#48]
 2741 0216 D7ED0A7A 	 flds s15,[r7,#40]
 2742 021a 66EEA76A 	 fmuls s13,s13,s15
 2743 021e D7ED097A 	 flds s15,[r7,#36]
 2744 0222 66EEA77A 	 fmuls s15,s13,s15
 2745 0226 77EE677A 	 fsubs s15,s14,s15
 2746 022a C7ED047A 	 fsts s15,[r7,#16]
 606:../cleanflight/src/main/flight/imu.c **** 
 607:../cleanflight/src/main/flight/imu.c ****     quatProd->xx = sq(q1);
 2747              	 .loc 2 607 0
 2748 022e 97ED067A 	 flds s14,[r7,#24]
 2749 0232 D7ED067A 	 flds s15,[r7,#24]
 2750 0236 67EE277A 	 fmuls s15,s14,s15
 2751 023a FB68     	 ldr r3,[r7,#12]
 2752 023c 17EE902A 	 fmrs r2,s15
 2753 0240 1A61     	 str r2,[r3,#16]
 608:../cleanflight/src/main/flight/imu.c ****     quatProd->yy = sq(q2);
 2754              	 .loc 2 608 0
 2755 0242 97ED057A 	 flds s14,[r7,#20]
 2756 0246 D7ED057A 	 flds s15,[r7,#20]
 2757 024a 67EE277A 	 fmuls s15,s14,s15
 2758 024e FB68     	 ldr r3,[r7,#12]
 2759 0250 17EE902A 	 fmrs r2,s15
 2760 0254 DA61     	 str r2,[r3,#28]
 609:../cleanflight/src/main/flight/imu.c ****     quatProd->zz = sq(q3);
 2761              	 .loc 2 609 0
 2762 0256 97ED047A 	 flds s14,[r7,#16]
 2763 025a D7ED047A 	 flds s15,[r7,#16]
 2764 025e 67EE277A 	 fmuls s15,s14,s15
 2765 0262 FB68     	 ldr r3,[r7,#12]
 2766 0264 17EE902A 	 fmrs r2,s15
 2767 0268 5A62     	 str r2,[r3,#36]
 610:../cleanflight/src/main/flight/imu.c **** 
 611:../cleanflight/src/main/flight/imu.c ****     quatProd->xy = q1 * q2;
 2768              	 .loc 2 611 0
 2769 026a 97ED067A 	 flds s14,[r7,#24]
 2770 026e D7ED057A 	 flds s15,[r7,#20]
 2771 0272 67EE277A 	 fmuls s15,s14,s15
 2772 0276 FB68     	 ldr r3,[r7,#12]
 2773 0278 17EE902A 	 fmrs r2,s15
 2774 027c 5A61     	 str r2,[r3,#20]
 612:../cleanflight/src/main/flight/imu.c ****     quatProd->xz = q1 * q3;
 2775              	 .loc 2 612 0
 2776 027e 97ED067A 	 flds s14,[r7,#24]
 2777 0282 D7ED047A 	 flds s15,[r7,#16]
 2778 0286 67EE277A 	 fmuls s15,s14,s15
 2779 028a FB68     	 ldr r3,[r7,#12]
 2780 028c 17EE902A 	 fmrs r2,s15
 2781 0290 9A61     	 str r2,[r3,#24]
 613:../cleanflight/src/main/flight/imu.c ****     quatProd->yz = q2 * q3;
 2782              	 .loc 2 613 0
 2783 0292 97ED057A 	 flds s14,[r7,#20]
 2784 0296 D7ED047A 	 flds s15,[r7,#16]
 2785 029a 67EE277A 	 fmuls s15,s14,s15
 2786 029e FB68     	 ldr r3,[r7,#12]
 2787 02a0 17EE902A 	 fmrs r2,s15
 2788 02a4 1A62     	 str r2,[r3,#32]
 614:../cleanflight/src/main/flight/imu.c **** 
 615:../cleanflight/src/main/flight/imu.c ****     quatProd->wx = q0 * q1;
 2789              	 .loc 2 615 0
 2790 02a6 97ED077A 	 flds s14,[r7,#28]
 2791 02aa D7ED067A 	 flds s15,[r7,#24]
 2792 02ae 67EE277A 	 fmuls s15,s14,s15
 2793 02b2 FB68     	 ldr r3,[r7,#12]
 2794 02b4 17EE902A 	 fmrs r2,s15
 2795 02b8 5A60     	 str r2,[r3,#4]
 616:../cleanflight/src/main/flight/imu.c ****     quatProd->wy = q0 * q2;
 2796              	 .loc 2 616 0
 2797 02ba 97ED077A 	 flds s14,[r7,#28]
 2798 02be D7ED057A 	 flds s15,[r7,#20]
 2799 02c2 67EE277A 	 fmuls s15,s14,s15
 2800 02c6 FB68     	 ldr r3,[r7,#12]
 2801 02c8 17EE902A 	 fmrs r2,s15
 2802 02cc 9A60     	 str r2,[r3,#8]
 617:../cleanflight/src/main/flight/imu.c ****     quatProd->wz = q0 * q3;
 2803              	 .loc 2 617 0
 2804 02ce 97ED077A 	 flds s14,[r7,#28]
 2805 02d2 D7ED047A 	 flds s15,[r7,#16]
 2806 02d6 67EE277A 	 fmuls s15,s14,s15
 2807 02da FB68     	 ldr r3,[r7,#12]
 2808 02dc 17EE902A 	 fmrs r2,s15
 2809 02e0 DA60     	 str r2,[r3,#12]
 618:../cleanflight/src/main/flight/imu.c **** 
 619:../cleanflight/src/main/flight/imu.c ****     imuComputeRotationMatrix();
 2810              	 .loc 2 619 0
 2811 02e2 FFF7FEFF 	 bl imuComputeRotationMatrix
 620:../cleanflight/src/main/flight/imu.c **** }
 2812              	 .loc 2 620 0
 2813 02e6 3837     	 adds r7,r7,#56
 2814              	.LCFI94:
 2815              	 .cfi_def_cfa_offset 8
 2816 02e8 BD46     	 mov sp,r7
 2817              	.LCFI95:
 2818              	 .cfi_def_cfa_register 13
 2819              	 
 2820 02ea 80BD     	 pop {r7,pc}
 2821              	.L129:
 2822              	 .align 2
 2823              	.L128:
 2824 02ec 35FA8E3C 	 .word 1016003125
 2825              	 .cfi_endproc
 2826              	.LFE574:
 2828              	 .section .text.imuQuaternionComputeProducts,"ax",%progbits
 2829              	 .align 2
 2830              	 .global imuQuaternionComputeProducts
 2831              	 .thumb
 2832              	 .thumb_func
 2834              	imuQuaternionComputeProducts:
 2835              	.LFB575:
 621:../cleanflight/src/main/flight/imu.c **** 
 622:../cleanflight/src/main/flight/imu.c **** #ifdef SIMULATOR_BUILD
 623:../cleanflight/src/main/flight/imu.c **** void imuSetAttitudeRPY(float roll, float pitch, float yaw)
 624:../cleanflight/src/main/flight/imu.c **** {
 625:../cleanflight/src/main/flight/imu.c ****     IMU_LOCK;
 626:../cleanflight/src/main/flight/imu.c **** 
 627:../cleanflight/src/main/flight/imu.c ****     attitude.values.roll = roll * 10;
 628:../cleanflight/src/main/flight/imu.c ****     attitude.values.pitch = pitch * 10;
 629:../cleanflight/src/main/flight/imu.c ****     attitude.values.yaw = yaw * 10;
 630:../cleanflight/src/main/flight/imu.c **** 
 631:../cleanflight/src/main/flight/imu.c ****     IMU_UNLOCK;
 632:../cleanflight/src/main/flight/imu.c **** }
 633:../cleanflight/src/main/flight/imu.c **** void imuSetAttitudeQuat(float w, float x, float y, float z)
 634:../cleanflight/src/main/flight/imu.c **** {
 635:../cleanflight/src/main/flight/imu.c ****     IMU_LOCK;
 636:../cleanflight/src/main/flight/imu.c **** 
 637:../cleanflight/src/main/flight/imu.c ****     q.w = w;
 638:../cleanflight/src/main/flight/imu.c ****     q.x = x;
 639:../cleanflight/src/main/flight/imu.c ****     q.y = y;
 640:../cleanflight/src/main/flight/imu.c ****     q.z = z;
 641:../cleanflight/src/main/flight/imu.c **** 
 642:../cleanflight/src/main/flight/imu.c ****     imuComputeRotationMatrix();
 643:../cleanflight/src/main/flight/imu.c ****     imuUpdateEulerAngles();
 644:../cleanflight/src/main/flight/imu.c **** 
 645:../cleanflight/src/main/flight/imu.c ****     IMU_UNLOCK;
 646:../cleanflight/src/main/flight/imu.c **** }
 647:../cleanflight/src/main/flight/imu.c **** #endif
 648:../cleanflight/src/main/flight/imu.c **** #if defined(SIMULATOR_BUILD) && defined(SIMULATOR_IMU_SYNC)
 649:../cleanflight/src/main/flight/imu.c **** void imuSetHasNewData(uint32_t dt)
 650:../cleanflight/src/main/flight/imu.c **** {
 651:../cleanflight/src/main/flight/imu.c ****     IMU_LOCK;
 652:../cleanflight/src/main/flight/imu.c **** 
 653:../cleanflight/src/main/flight/imu.c ****     imuUpdated = true;
 654:../cleanflight/src/main/flight/imu.c ****     imuDeltaT = dt;
 655:../cleanflight/src/main/flight/imu.c **** 
 656:../cleanflight/src/main/flight/imu.c ****     IMU_UNLOCK;
 657:../cleanflight/src/main/flight/imu.c **** }
 658:../cleanflight/src/main/flight/imu.c **** #endif
 659:../cleanflight/src/main/flight/imu.c **** 
 660:../cleanflight/src/main/flight/imu.c **** void imuQuaternionComputeProducts(quaternion *quat, quaternionProducts *quatProd)
 661:../cleanflight/src/main/flight/imu.c **** {
 2836              	 .loc 2 661 0
 2837              	 .cfi_startproc
 2838              	 
 2839              	 
 2840              	 
 2841 0000 80B4     	 push {r7}
 2842              	.LCFI96:
 2843              	 .cfi_def_cfa_offset 4
 2844              	 .cfi_offset 7,-4
 2845 0002 83B0     	 sub sp,sp,#12
 2846              	.LCFI97:
 2847              	 .cfi_def_cfa_offset 16
 2848 0004 00AF     	 add r7,sp,#0
 2849              	.LCFI98:
 2850              	 .cfi_def_cfa_register 7
 2851 0006 7860     	 str r0,[r7,#4]
 2852 0008 3960     	 str r1,[r7]
 662:../cleanflight/src/main/flight/imu.c ****     quatProd->ww = quat->w * quat->w;
 2853              	 .loc 2 662 0
 2854 000a 7B68     	 ldr r3,[r7,#4]
 2855 000c 1A68     	 ldr r2,[r3]
 2856 000e 1346     	 mov r3,r2
 2857 0010 1A46     	 mov r2,r3
 2858 0012 7B68     	 ldr r3,[r7,#4]
 2859 0014 1B68     	 ldr r3,[r3]
 2860 0016 07EE902A 	 fmsr s15,r2
 2861 001a 07EE103A 	 fmsr s14,r3
 2862 001e 67EE877A 	 fmuls s15,s15,s14
 2863 0022 3B68     	 ldr r3,[r7]
 2864 0024 17EE902A 	 fmrs r2,s15
 2865 0028 1A60     	 str r2,[r3]
 663:../cleanflight/src/main/flight/imu.c ****     quatProd->wx = quat->w * quat->x;
 2866              	 .loc 2 663 0
 2867 002a 7B68     	 ldr r3,[r7,#4]
 2868 002c 1A68     	 ldr r2,[r3]
 2869 002e 1346     	 mov r3,r2
 2870 0030 1A46     	 mov r2,r3
 2871 0032 7B68     	 ldr r3,[r7,#4]
 2872 0034 5B68     	 ldr r3,[r3,#4]
 2873 0036 07EE902A 	 fmsr s15,r2
 2874 003a 07EE103A 	 fmsr s14,r3
 2875 003e 67EE877A 	 fmuls s15,s15,s14
 2876 0042 3B68     	 ldr r3,[r7]
 2877 0044 17EE902A 	 fmrs r2,s15
 2878 0048 5A60     	 str r2,[r3,#4]
 664:../cleanflight/src/main/flight/imu.c ****     quatProd->wy = quat->w * quat->y;
 2879              	 .loc 2 664 0
 2880 004a 7B68     	 ldr r3,[r7,#4]
 2881 004c 1A68     	 ldr r2,[r3]
 2882 004e 1346     	 mov r3,r2
 2883 0050 1A46     	 mov r2,r3
 2884 0052 7B68     	 ldr r3,[r7,#4]
 2885 0054 9B68     	 ldr r3,[r3,#8]
 2886 0056 07EE902A 	 fmsr s15,r2
 2887 005a 07EE103A 	 fmsr s14,r3
 2888 005e 67EE877A 	 fmuls s15,s15,s14
 2889 0062 3B68     	 ldr r3,[r7]
 2890 0064 17EE902A 	 fmrs r2,s15
 2891 0068 9A60     	 str r2,[r3,#8]
 665:../cleanflight/src/main/flight/imu.c ****     quatProd->wz = quat->w * quat->z;
 2892              	 .loc 2 665 0
 2893 006a 7B68     	 ldr r3,[r7,#4]
 2894 006c 1A68     	 ldr r2,[r3]
 2895 006e 1346     	 mov r3,r2
 2896 0070 1A46     	 mov r2,r3
 2897 0072 7B68     	 ldr r3,[r7,#4]
 2898 0074 DB68     	 ldr r3,[r3,#12]
 2899 0076 07EE902A 	 fmsr s15,r2
 2900 007a 07EE103A 	 fmsr s14,r3
 2901 007e 67EE877A 	 fmuls s15,s15,s14
 2902 0082 3B68     	 ldr r3,[r7]
 2903 0084 17EE902A 	 fmrs r2,s15
 2904 0088 DA60     	 str r2,[r3,#12]
 666:../cleanflight/src/main/flight/imu.c ****     quatProd->xx = quat->x * quat->x;
 2905              	 .loc 2 666 0
 2906 008a 7B68     	 ldr r3,[r7,#4]
 2907 008c 5A68     	 ldr r2,[r3,#4]
 2908 008e 1346     	 mov r3,r2
 2909 0090 1A46     	 mov r2,r3
 2910 0092 7B68     	 ldr r3,[r7,#4]
 2911 0094 5B68     	 ldr r3,[r3,#4]
 2912 0096 07EE902A 	 fmsr s15,r2
 2913 009a 07EE103A 	 fmsr s14,r3
 2914 009e 67EE877A 	 fmuls s15,s15,s14
 2915 00a2 3B68     	 ldr r3,[r7]
 2916 00a4 17EE902A 	 fmrs r2,s15
 2917 00a8 1A61     	 str r2,[r3,#16]
 667:../cleanflight/src/main/flight/imu.c ****     quatProd->xy = quat->x * quat->y;
 2918              	 .loc 2 667 0
 2919 00aa 7B68     	 ldr r3,[r7,#4]
 2920 00ac 5A68     	 ldr r2,[r3,#4]
 2921 00ae 1346     	 mov r3,r2
 2922 00b0 1A46     	 mov r2,r3
 2923 00b2 7B68     	 ldr r3,[r7,#4]
 2924 00b4 9B68     	 ldr r3,[r3,#8]
 2925 00b6 07EE902A 	 fmsr s15,r2
 2926 00ba 07EE103A 	 fmsr s14,r3
 2927 00be 67EE877A 	 fmuls s15,s15,s14
 2928 00c2 3B68     	 ldr r3,[r7]
 2929 00c4 17EE902A 	 fmrs r2,s15
 2930 00c8 5A61     	 str r2,[r3,#20]
 668:../cleanflight/src/main/flight/imu.c ****     quatProd->xz = quat->x * quat->z;
 2931              	 .loc 2 668 0
 2932 00ca 7B68     	 ldr r3,[r7,#4]
 2933 00cc 5A68     	 ldr r2,[r3,#4]
 2934 00ce 1346     	 mov r3,r2
 2935 00d0 1A46     	 mov r2,r3
 2936 00d2 7B68     	 ldr r3,[r7,#4]
 2937 00d4 DB68     	 ldr r3,[r3,#12]
 2938 00d6 07EE902A 	 fmsr s15,r2
 2939 00da 07EE103A 	 fmsr s14,r3
 2940 00de 67EE877A 	 fmuls s15,s15,s14
 2941 00e2 3B68     	 ldr r3,[r7]
 2942 00e4 17EE902A 	 fmrs r2,s15
 2943 00e8 9A61     	 str r2,[r3,#24]
 669:../cleanflight/src/main/flight/imu.c ****     quatProd->yy = quat->y * quat->y;
 2944              	 .loc 2 669 0
 2945 00ea 7B68     	 ldr r3,[r7,#4]
 2946 00ec 9A68     	 ldr r2,[r3,#8]
 2947 00ee 1346     	 mov r3,r2
 2948 00f0 1A46     	 mov r2,r3
 2949 00f2 7B68     	 ldr r3,[r7,#4]
 2950 00f4 9B68     	 ldr r3,[r3,#8]
 2951 00f6 07EE902A 	 fmsr s15,r2
 2952 00fa 07EE103A 	 fmsr s14,r3
 2953 00fe 67EE877A 	 fmuls s15,s15,s14
 2954 0102 3B68     	 ldr r3,[r7]
 2955 0104 17EE902A 	 fmrs r2,s15
 2956 0108 DA61     	 str r2,[r3,#28]
 670:../cleanflight/src/main/flight/imu.c ****     quatProd->yz = quat->y * quat->z;
 2957              	 .loc 2 670 0
 2958 010a 7B68     	 ldr r3,[r7,#4]
 2959 010c 9A68     	 ldr r2,[r3,#8]
 2960 010e 1346     	 mov r3,r2
 2961 0110 1A46     	 mov r2,r3
 2962 0112 7B68     	 ldr r3,[r7,#4]
 2963 0114 DB68     	 ldr r3,[r3,#12]
 2964 0116 07EE902A 	 fmsr s15,r2
 2965 011a 07EE103A 	 fmsr s14,r3
 2966 011e 67EE877A 	 fmuls s15,s15,s14
 2967 0122 3B68     	 ldr r3,[r7]
 2968 0124 17EE902A 	 fmrs r2,s15
 2969 0128 1A62     	 str r2,[r3,#32]
 671:../cleanflight/src/main/flight/imu.c ****     quatProd->zz = quat->z * quat->z;
 2970              	 .loc 2 671 0
 2971 012a 7B68     	 ldr r3,[r7,#4]
 2972 012c DA68     	 ldr r2,[r3,#12]
 2973 012e 1346     	 mov r3,r2
 2974 0130 1A46     	 mov r2,r3
 2975 0132 7B68     	 ldr r3,[r7,#4]
 2976 0134 DB68     	 ldr r3,[r3,#12]
 2977 0136 07EE902A 	 fmsr s15,r2
 2978 013a 07EE103A 	 fmsr s14,r3
 2979 013e 67EE877A 	 fmuls s15,s15,s14
 2980 0142 3B68     	 ldr r3,[r7]
 2981 0144 17EE902A 	 fmrs r2,s15
 2982 0148 5A62     	 str r2,[r3,#36]
 672:../cleanflight/src/main/flight/imu.c **** }
 2983              	 .loc 2 672 0
 2984 014a 0C37     	 adds r7,r7,#12
 2985              	.LCFI99:
 2986              	 .cfi_def_cfa_offset 4
 2987 014c BD46     	 mov sp,r7
 2988              	.LCFI100:
 2989              	 .cfi_def_cfa_register 13
 2990              	 
 2991 014e 5DF8047B 	 ldr r7,[sp],#4
 2992              	.LCFI101:
 2993              	 .cfi_restore 7
 2994              	 .cfi_def_cfa_offset 0
 2995 0152 7047     	 bx lr
 2996              	 .cfi_endproc
 2997              	.LFE575:
 2999              	 .section .text.imuQuaternionHeadfreeOffsetSet,"ax",%progbits
 3000              	 .align 2
 3001              	 .global imuQuaternionHeadfreeOffsetSet
 3002              	 .thumb
 3003              	 .thumb_func
 3005              	imuQuaternionHeadfreeOffsetSet:
 3006              	.LFB576:
 673:../cleanflight/src/main/flight/imu.c **** 
 674:../cleanflight/src/main/flight/imu.c **** bool imuQuaternionHeadfreeOffsetSet(void)
 675:../cleanflight/src/main/flight/imu.c **** {
 3007              	 .loc 2 675 0
 3008              	 .cfi_startproc
 3009              	 
 3010              	 
 3011 0000 80B5     	 push {r7,lr}
 3012              	.LCFI102:
 3013              	 .cfi_def_cfa_offset 8
 3014              	 .cfi_offset 7,-8
 3015              	 .cfi_offset 14,-4
 3016 0002 82B0     	 sub sp,sp,#8
 3017              	.LCFI103:
 3018              	 .cfi_def_cfa_offset 16
 3019 0004 00AF     	 add r7,sp,#0
 3020              	.LCFI104:
 3021              	 .cfi_def_cfa_register 7
 3022              	.LBB8:
 676:../cleanflight/src/main/flight/imu.c ****     if ((ABS(attitude.values.roll) < 450)  && (ABS(attitude.values.pitch) < 450)) {
 3023              	 .loc 2 676 0
 3024 0006 324B     	 ldr r3,.L134
 3025 0008 1B88     	 ldrh r3,[r3]
 3026 000a FB80     	 strh r3,[r7,#6]
 3027 000c B7F90630 	 ldrsh r3,[r7,#6]
 3028 0010 002B     	 cmp r3,#0
 3029 0012 B8BF     	 it lt
 3030 0014 5B42     	 rsblt r3,r3,#0
 3031              	.LBE8:
 3032 0016 B3F5E17F 	 cmp r3,#450
 3033 001a 53DA     	 bge .L132
 3034              	.LBB9:
 3035              	 .loc 2 676 0 is_stmt 0 discriminator 1
 3036 001c 2C4B     	 ldr r3,.L134
 3037 001e 5B88     	 ldrh r3,[r3,#2]
 3038 0020 BB80     	 strh r3,[r7,#4]
 3039 0022 B7F90430 	 ldrsh r3,[r7,#4]
 3040 0026 002B     	 cmp r3,#0
 3041 0028 B8BF     	 it lt
 3042 002a 5B42     	 rsblt r3,r3,#0
 3043              	.LBE9:
 3044 002c B3F5E17F 	 cmp r3,#450
 3045 0030 48DA     	 bge .L132
 3046              	.LBB10:
 677:../cleanflight/src/main/flight/imu.c ****         const float yaw = -atan2_approx((+2.0f * (qP.wz + qP.xy)), (+1.0f - 2.0f * (qP.yy + qP.zz))
 3047              	 .loc 2 677 0 is_stmt 1
 3048 0032 284B     	 ldr r3,.L134+4
 3049 0034 93ED037A 	 flds s14,[r3,#12]
 3050 0038 264B     	 ldr r3,.L134+4
 3051 003a D3ED057A 	 flds s15,[r3,#20]
 3052 003e 77EE277A 	 fadds s15,s14,s15
 3053 0042 77EEA76A 	 fadds s13,s15,s15
 3054 0046 234B     	 ldr r3,.L134+4
 3055 0048 93ED077A 	 flds s14,[r3,#28]
 3056 004c 214B     	 ldr r3,.L134+4
 3057 004e D3ED097A 	 flds s15,[r3,#36]
 3058 0052 77EE277A 	 fadds s15,s14,s15
 3059 0056 77EEA77A 	 fadds s15,s15,s15
 3060 005a B7EE007A 	 fconsts s14,#112
 3061 005e 77EE677A 	 fsubs s15,s14,s15
 3062 0062 16EE900A 	 fmrs r0,s13
 3063 0066 17EE901A 	 fmrs r1,s15
 3064 006a FFF7FEFF 	 bl atan2_approx
 3065 006e 0346     	 mov r3,r0
 3066 0070 07EE903A 	 fmsr s15,r3
 3067 0074 F1EE677A 	 fnegs s15,s15
 3068 0078 C7ED007A 	 fsts s15,[r7]
 678:../cleanflight/src/main/flight/imu.c **** 
 679:../cleanflight/src/main/flight/imu.c ****         offset.w = cos_approx(yaw/2);
 3069              	 .loc 2 679 0
 3070 007c D7ED007A 	 flds s15,[r7]
 3071 0080 B0EE007A 	 fconsts s14,#0
 3072 0084 C7EE877A 	 fdivs s15,s15,s14
 3073 0088 17EE900A 	 fmrs r0,s15
 3074 008c FFF7FEFF 	 bl cos_approx
 3075 0090 0246     	 mov r2,r0
 3076 0092 114B     	 ldr r3,.L134+8
 3077 0094 1A60     	 str r2,[r3]
 680:../cleanflight/src/main/flight/imu.c ****         offset.x = 0;
 3078              	 .loc 2 680 0
 3079 0096 104B     	 ldr r3,.L134+8
 3080 0098 4FF00002 	 mov r2,#0
 3081 009c 5A60     	 str r2,[r3,#4]
 681:../cleanflight/src/main/flight/imu.c ****         offset.y = 0;
 3082              	 .loc 2 681 0
 3083 009e 0E4B     	 ldr r3,.L134+8
 3084 00a0 4FF00002 	 mov r2,#0
 3085 00a4 9A60     	 str r2,[r3,#8]
 682:../cleanflight/src/main/flight/imu.c ****         offset.z = sin_approx(yaw/2);
 3086              	 .loc 2 682 0
 3087 00a6 D7ED007A 	 flds s15,[r7]
 3088 00aa B0EE007A 	 fconsts s14,#0
 3089 00ae C7EE877A 	 fdivs s15,s15,s14
 3090 00b2 17EE900A 	 fmrs r0,s15
 3091 00b6 FFF7FEFF 	 bl sin_approx
 3092 00ba 0246     	 mov r2,r0
 3093 00bc 064B     	 ldr r3,.L134+8
 3094 00be DA60     	 str r2,[r3,#12]
 683:../cleanflight/src/main/flight/imu.c **** 
 684:../cleanflight/src/main/flight/imu.c ****         return true;
 3095              	 .loc 2 684 0
 3096 00c0 0123     	 movs r3,#1
 3097 00c2 00E0     	 b .L133
 3098              	.L132:
 3099              	.LBE10:
 685:../cleanflight/src/main/flight/imu.c ****     } else {
 686:../cleanflight/src/main/flight/imu.c ****         return false;
 3100              	 .loc 2 686 0
 3101 00c4 0023     	 movs r3,#0
 3102              	.L133:
 687:../cleanflight/src/main/flight/imu.c ****     }
 688:../cleanflight/src/main/flight/imu.c **** }
 3103              	 .loc 2 688 0
 3104 00c6 1846     	 mov r0,r3
 3105 00c8 0837     	 adds r7,r7,#8
 3106              	.LCFI105:
 3107              	 .cfi_def_cfa_offset 8
 3108 00ca BD46     	 mov sp,r7
 3109              	.LCFI106:
 3110              	 .cfi_def_cfa_register 13
 3111              	 
 3112 00cc 80BD     	 pop {r7,pc}
 3113              	.L135:
 3114 00ce 00BF     	 .align 2
 3115              	.L134:
 3116 00d0 00000000 	 .word attitude
 3117 00d4 00000000 	 .word qP
 3118 00d8 00000000 	 .word offset
 3119              	 .cfi_endproc
 3120              	.LFE576:
 3122              	 .section .text.imuQuaternionMultiplication,"ax",%progbits
 3123              	 .align 2
 3124              	 .global imuQuaternionMultiplication
 3125              	 .thumb
 3126              	 .thumb_func
 3128              	imuQuaternionMultiplication:
 3129              	.LFB577:
 689:../cleanflight/src/main/flight/imu.c **** 
 690:../cleanflight/src/main/flight/imu.c **** void imuQuaternionMultiplication(quaternion *q1, quaternion *q2, quaternion *result)
 691:../cleanflight/src/main/flight/imu.c **** {
 3130              	 .loc 2 691 0
 3131              	 .cfi_startproc
 3132              	 
 3133              	 
 3134              	 
 3135 0000 80B4     	 push {r7}
 3136              	.LCFI107:
 3137              	 .cfi_def_cfa_offset 4
 3138              	 .cfi_offset 7,-4
 3139 0002 8DB0     	 sub sp,sp,#52
 3140              	.LCFI108:
 3141              	 .cfi_def_cfa_offset 56
 3142 0004 00AF     	 add r7,sp,#0
 3143              	.LCFI109:
 3144              	 .cfi_def_cfa_register 7
 3145 0006 F860     	 str r0,[r7,#12]
 3146 0008 B960     	 str r1,[r7,#8]
 3147 000a 7A60     	 str r2,[r7,#4]
 692:../cleanflight/src/main/flight/imu.c ****     const float A = (q1->w + q1->x) * (q2->w + q2->x);
 3148              	 .loc 2 692 0
 3149 000c FB68     	 ldr r3,[r7,#12]
 3150 000e 1A68     	 ldr r2,[r3]
 3151 0010 1346     	 mov r3,r2
 3152 0012 1A46     	 mov r2,r3
 3153 0014 FB68     	 ldr r3,[r7,#12]
 3154 0016 5B68     	 ldr r3,[r3,#4]
 3155 0018 07EE902A 	 fmsr s15,r2
 3156 001c 07EE103A 	 fmsr s14,r3
 3157 0020 37EE877A 	 fadds s14,s15,s14
 3158 0024 BB68     	 ldr r3,[r7,#8]
 3159 0026 1A68     	 ldr r2,[r3]
 3160 0028 1346     	 mov r3,r2
 3161 002a 1A46     	 mov r2,r3
 3162 002c BB68     	 ldr r3,[r7,#8]
 3163 002e 5B68     	 ldr r3,[r3,#4]
 3164 0030 07EE902A 	 fmsr s15,r2
 3165 0034 06EE903A 	 fmsr s13,r3
 3166 0038 77EEA67A 	 fadds s15,s15,s13
 3167 003c 67EE277A 	 fmuls s15,s14,s15
 3168 0040 C7ED0B7A 	 fsts s15,[r7,#44]
 693:../cleanflight/src/main/flight/imu.c ****     const float B = (q1->z - q1->y) * (q2->y - q2->z);
 3169              	 .loc 2 693 0
 3170 0044 FB68     	 ldr r3,[r7,#12]
 3171 0046 DA68     	 ldr r2,[r3,#12]
 3172 0048 1346     	 mov r3,r2
 3173 004a 1A46     	 mov r2,r3
 3174 004c FB68     	 ldr r3,[r7,#12]
 3175 004e 9B68     	 ldr r3,[r3,#8]
 3176 0050 07EE902A 	 fmsr s15,r2
 3177 0054 07EE103A 	 fmsr s14,r3
 3178 0058 37EEC77A 	 fsubs s14,s15,s14
 3179 005c BB68     	 ldr r3,[r7,#8]
 3180 005e 9A68     	 ldr r2,[r3,#8]
 3181 0060 1346     	 mov r3,r2
 3182 0062 1A46     	 mov r2,r3
 3183 0064 BB68     	 ldr r3,[r7,#8]
 3184 0066 DB68     	 ldr r3,[r3,#12]
 3185 0068 07EE902A 	 fmsr s15,r2
 3186 006c 06EE903A 	 fmsr s13,r3
 3187 0070 77EEE67A 	 fsubs s15,s15,s13
 3188 0074 67EE277A 	 fmuls s15,s14,s15
 3189 0078 C7ED0A7A 	 fsts s15,[r7,#40]
 694:../cleanflight/src/main/flight/imu.c ****     const float C = (q1->w - q1->x) * (q2->y + q2->z);
 3190              	 .loc 2 694 0
 3191 007c FB68     	 ldr r3,[r7,#12]
 3192 007e 1A68     	 ldr r2,[r3]
 3193 0080 1346     	 mov r3,r2
 3194 0082 1A46     	 mov r2,r3
 3195 0084 FB68     	 ldr r3,[r7,#12]
 3196 0086 5B68     	 ldr r3,[r3,#4]
 3197 0088 07EE902A 	 fmsr s15,r2
 3198 008c 07EE103A 	 fmsr s14,r3
 3199 0090 37EEC77A 	 fsubs s14,s15,s14
 3200 0094 BB68     	 ldr r3,[r7,#8]
 3201 0096 9A68     	 ldr r2,[r3,#8]
 3202 0098 1346     	 mov r3,r2
 3203 009a 1A46     	 mov r2,r3
 3204 009c BB68     	 ldr r3,[r7,#8]
 3205 009e DB68     	 ldr r3,[r3,#12]
 3206 00a0 07EE902A 	 fmsr s15,r2
 3207 00a4 06EE903A 	 fmsr s13,r3
 3208 00a8 77EEA67A 	 fadds s15,s15,s13
 3209 00ac 67EE277A 	 fmuls s15,s14,s15
 3210 00b0 C7ED097A 	 fsts s15,[r7,#36]
 695:../cleanflight/src/main/flight/imu.c ****     const float D = (q1->y + q1->z) * (q2->w - q2->x);
 3211              	 .loc 2 695 0
 3212 00b4 FB68     	 ldr r3,[r7,#12]
 3213 00b6 9A68     	 ldr r2,[r3,#8]
 3214 00b8 1346     	 mov r3,r2
 3215 00ba 1A46     	 mov r2,r3
 3216 00bc FB68     	 ldr r3,[r7,#12]
 3217 00be DB68     	 ldr r3,[r3,#12]
 3218 00c0 07EE902A 	 fmsr s15,r2
 3219 00c4 07EE103A 	 fmsr s14,r3
 3220 00c8 37EE877A 	 fadds s14,s15,s14
 3221 00cc BB68     	 ldr r3,[r7,#8]
 3222 00ce 1A68     	 ldr r2,[r3]
 3223 00d0 1346     	 mov r3,r2
 3224 00d2 1A46     	 mov r2,r3
 3225 00d4 BB68     	 ldr r3,[r7,#8]
 3226 00d6 5B68     	 ldr r3,[r3,#4]
 3227 00d8 07EE902A 	 fmsr s15,r2
 3228 00dc 06EE903A 	 fmsr s13,r3
 3229 00e0 77EEE67A 	 fsubs s15,s15,s13
 3230 00e4 67EE277A 	 fmuls s15,s14,s15
 3231 00e8 C7ED087A 	 fsts s15,[r7,#32]
 696:../cleanflight/src/main/flight/imu.c ****     const float E = (q1->x + q1->z) * (q2->x + q2->y);
 3232              	 .loc 2 696 0
 3233 00ec FB68     	 ldr r3,[r7,#12]
 3234 00ee 5A68     	 ldr r2,[r3,#4]
 3235 00f0 1346     	 mov r3,r2
 3236 00f2 1A46     	 mov r2,r3
 3237 00f4 FB68     	 ldr r3,[r7,#12]
 3238 00f6 DB68     	 ldr r3,[r3,#12]
 3239 00f8 07EE902A 	 fmsr s15,r2
 3240 00fc 07EE103A 	 fmsr s14,r3
 3241 0100 37EE877A 	 fadds s14,s15,s14
 3242 0104 BB68     	 ldr r3,[r7,#8]
 3243 0106 5A68     	 ldr r2,[r3,#4]
 3244 0108 1346     	 mov r3,r2
 3245 010a 1A46     	 mov r2,r3
 3246 010c BB68     	 ldr r3,[r7,#8]
 3247 010e 9B68     	 ldr r3,[r3,#8]
 3248 0110 07EE902A 	 fmsr s15,r2
 3249 0114 06EE903A 	 fmsr s13,r3
 3250 0118 77EEA67A 	 fadds s15,s15,s13
 3251 011c 67EE277A 	 fmuls s15,s14,s15
 3252 0120 C7ED077A 	 fsts s15,[r7,#28]
 697:../cleanflight/src/main/flight/imu.c ****     const float F = (q1->x - q1->z) * (q2->x - q2->y);
 3253              	 .loc 2 697 0
 3254 0124 FB68     	 ldr r3,[r7,#12]
 3255 0126 5A68     	 ldr r2,[r3,#4]
 3256 0128 1346     	 mov r3,r2
 3257 012a 1A46     	 mov r2,r3
 3258 012c FB68     	 ldr r3,[r7,#12]
 3259 012e DB68     	 ldr r3,[r3,#12]
 3260 0130 07EE902A 	 fmsr s15,r2
 3261 0134 07EE103A 	 fmsr s14,r3
 3262 0138 37EEC77A 	 fsubs s14,s15,s14
 3263 013c BB68     	 ldr r3,[r7,#8]
 3264 013e 5A68     	 ldr r2,[r3,#4]
 3265 0140 1346     	 mov r3,r2
 3266 0142 1A46     	 mov r2,r3
 3267 0144 BB68     	 ldr r3,[r7,#8]
 3268 0146 9B68     	 ldr r3,[r3,#8]
 3269 0148 07EE902A 	 fmsr s15,r2
 3270 014c 06EE903A 	 fmsr s13,r3
 3271 0150 77EEE67A 	 fsubs s15,s15,s13
 3272 0154 67EE277A 	 fmuls s15,s14,s15
 3273 0158 C7ED067A 	 fsts s15,[r7,#24]
 698:../cleanflight/src/main/flight/imu.c ****     const float G = (q1->w + q1->y) * (q2->w - q2->z);
 3274              	 .loc 2 698 0
 3275 015c FB68     	 ldr r3,[r7,#12]
 3276 015e 1A68     	 ldr r2,[r3]
 3277 0160 1346     	 mov r3,r2
 3278 0162 1A46     	 mov r2,r3
 3279 0164 FB68     	 ldr r3,[r7,#12]
 3280 0166 9B68     	 ldr r3,[r3,#8]
 3281 0168 07EE902A 	 fmsr s15,r2
 3282 016c 07EE103A 	 fmsr s14,r3
 3283 0170 37EE877A 	 fadds s14,s15,s14
 3284 0174 BB68     	 ldr r3,[r7,#8]
 3285 0176 1A68     	 ldr r2,[r3]
 3286 0178 1346     	 mov r3,r2
 3287 017a 1A46     	 mov r2,r3
 3288 017c BB68     	 ldr r3,[r7,#8]
 3289 017e DB68     	 ldr r3,[r3,#12]
 3290 0180 07EE902A 	 fmsr s15,r2
 3291 0184 06EE903A 	 fmsr s13,r3
 3292 0188 77EEE67A 	 fsubs s15,s15,s13
 3293 018c 67EE277A 	 fmuls s15,s14,s15
 3294 0190 C7ED057A 	 fsts s15,[r7,#20]
 699:../cleanflight/src/main/flight/imu.c ****     const float H = (q1->w - q1->y) * (q2->w + q2->z);
 3295              	 .loc 2 699 0
 3296 0194 FB68     	 ldr r3,[r7,#12]
 3297 0196 1A68     	 ldr r2,[r3]
 3298 0198 1346     	 mov r3,r2
 3299 019a 1A46     	 mov r2,r3
 3300 019c FB68     	 ldr r3,[r7,#12]
 3301 019e 9B68     	 ldr r3,[r3,#8]
 3302 01a0 07EE902A 	 fmsr s15,r2
 3303 01a4 07EE103A 	 fmsr s14,r3
 3304 01a8 37EEC77A 	 fsubs s14,s15,s14
 3305 01ac BB68     	 ldr r3,[r7,#8]
 3306 01ae 1A68     	 ldr r2,[r3]
 3307 01b0 1346     	 mov r3,r2
 3308 01b2 1A46     	 mov r2,r3
 3309 01b4 BB68     	 ldr r3,[r7,#8]
 3310 01b6 DB68     	 ldr r3,[r3,#12]
 3311 01b8 07EE902A 	 fmsr s15,r2
 3312 01bc 06EE903A 	 fmsr s13,r3
 3313 01c0 77EEA67A 	 fadds s15,s15,s13
 3314 01c4 67EE277A 	 fmuls s15,s14,s15
 3315 01c8 C7ED047A 	 fsts s15,[r7,#16]
 700:../cleanflight/src/main/flight/imu.c **** 
 701:../cleanflight/src/main/flight/imu.c ****     result->w = B + (- E - F + G + H) / 2.0f;
 3316              	 .loc 2 701 0
 3317 01cc D7ED077A 	 flds s15,[r7,#28]
 3318 01d0 B1EE677A 	 fnegs s14,s15
 3319 01d4 D7ED067A 	 flds s15,[r7,#24]
 3320 01d8 37EE677A 	 fsubs s14,s14,s15
 3321 01dc D7ED057A 	 flds s15,[r7,#20]
 3322 01e0 37EE277A 	 fadds s14,s14,s15
 3323 01e4 D7ED047A 	 flds s15,[r7,#16]
 3324 01e8 77EE277A 	 fadds s15,s14,s15
 3325 01ec B0EE007A 	 fconsts s14,#0
 3326 01f0 87EE877A 	 fdivs s14,s15,s14
 3327 01f4 D7ED0A7A 	 flds s15,[r7,#40]
 3328 01f8 77EE277A 	 fadds s15,s14,s15
 3329 01fc 7B68     	 ldr r3,[r7,#4]
 3330 01fe 17EE902A 	 fmrs r2,s15
 3331 0202 1A60     	 str r2,[r3]
 702:../cleanflight/src/main/flight/imu.c ****     result->x = A - (+ E + F + G + H) / 2.0f;
 3332              	 .loc 2 702 0
 3333 0204 97ED077A 	 flds s14,[r7,#28]
 3334 0208 D7ED067A 	 flds s15,[r7,#24]
 3335 020c 37EE277A 	 fadds s14,s14,s15
 3336 0210 D7ED057A 	 flds s15,[r7,#20]
 3337 0214 37EE277A 	 fadds s14,s14,s15
 3338 0218 D7ED047A 	 flds s15,[r7,#16]
 3339 021c 77EE277A 	 fadds s15,s14,s15
 3340 0220 B0EE007A 	 fconsts s14,#0
 3341 0224 C7EE877A 	 fdivs s15,s15,s14
 3342 0228 97ED0B7A 	 flds s14,[r7,#44]
 3343 022c 77EE677A 	 fsubs s15,s14,s15
 3344 0230 7B68     	 ldr r3,[r7,#4]
 3345 0232 17EE902A 	 fmrs r2,s15
 3346 0236 5A60     	 str r2,[r3,#4]
 703:../cleanflight/src/main/flight/imu.c ****     result->y = C + (+ E - F + G - H) / 2.0f;
 3347              	 .loc 2 703 0
 3348 0238 97ED077A 	 flds s14,[r7,#28]
 3349 023c D7ED067A 	 flds s15,[r7,#24]
 3350 0240 37EE677A 	 fsubs s14,s14,s15
 3351 0244 D7ED057A 	 flds s15,[r7,#20]
 3352 0248 37EE277A 	 fadds s14,s14,s15
 3353 024c D7ED047A 	 flds s15,[r7,#16]
 3354 0250 77EE677A 	 fsubs s15,s14,s15
 3355 0254 B0EE007A 	 fconsts s14,#0
 3356 0258 87EE877A 	 fdivs s14,s15,s14
 3357 025c D7ED097A 	 flds s15,[r7,#36]
 3358 0260 77EE277A 	 fadds s15,s14,s15
 3359 0264 7B68     	 ldr r3,[r7,#4]
 3360 0266 17EE902A 	 fmrs r2,s15
 3361 026a 9A60     	 str r2,[r3,#8]
 704:../cleanflight/src/main/flight/imu.c ****     result->z = D + (+ E - F - G + H) / 2.0f;
 3362              	 .loc 2 704 0
 3363 026c 97ED077A 	 flds s14,[r7,#28]
 3364 0270 D7ED067A 	 flds s15,[r7,#24]
 3365 0274 37EE677A 	 fsubs s14,s14,s15
 3366 0278 D7ED057A 	 flds s15,[r7,#20]
 3367 027c 37EE677A 	 fsubs s14,s14,s15
 3368 0280 D7ED047A 	 flds s15,[r7,#16]
 3369 0284 77EE277A 	 fadds s15,s14,s15
 3370 0288 B0EE007A 	 fconsts s14,#0
 3371 028c 87EE877A 	 fdivs s14,s15,s14
 3372 0290 D7ED087A 	 flds s15,[r7,#32]
 3373 0294 77EE277A 	 fadds s15,s14,s15
 3374 0298 7B68     	 ldr r3,[r7,#4]
 3375 029a 17EE902A 	 fmrs r2,s15
 3376 029e DA60     	 str r2,[r3,#12]
 705:../cleanflight/src/main/flight/imu.c **** }
 3377              	 .loc 2 705 0
 3378 02a0 3437     	 adds r7,r7,#52
 3379              	.LCFI110:
 3380              	 .cfi_def_cfa_offset 4
 3381 02a2 BD46     	 mov sp,r7
 3382              	.LCFI111:
 3383              	 .cfi_def_cfa_register 13
 3384              	 
 3385 02a4 5DF8047B 	 ldr r7,[sp],#4
 3386              	.LCFI112:
 3387              	 .cfi_restore 7
 3388              	 .cfi_def_cfa_offset 0
 3389 02a8 7047     	 bx lr
 3390              	 .cfi_endproc
 3391              	.LFE577:
 3393 02aa 00BF     	 .section .text.imuQuaternionHeadfreeTransformVectorEarthToBody,"ax",%progbits
 3394              	 .align 2
 3395              	 .global imuQuaternionHeadfreeTransformVectorEarthToBody
 3396              	 .thumb
 3397              	 .thumb_func
 3399              	imuQuaternionHeadfreeTransformVectorEarthToBody:
 3400              	.LFB578:
 706:../cleanflight/src/main/flight/imu.c **** 
 707:../cleanflight/src/main/flight/imu.c **** void imuQuaternionHeadfreeTransformVectorEarthToBody(t_fp_vector_def *v)
 708:../cleanflight/src/main/flight/imu.c **** {
 3401              	 .loc 2 708 0
 3402              	 .cfi_startproc
 3403              	 
 3404              	 
 3405 0000 80B5     	 push {r7,lr}
 3406              	.LCFI113:
 3407              	 .cfi_def_cfa_offset 8
 3408              	 .cfi_offset 7,-8
 3409              	 .cfi_offset 14,-4
 3410 0002 90B0     	 sub sp,sp,#64
 3411              	.LCFI114:
 3412              	 .cfi_def_cfa_offset 72
 3413 0004 00AF     	 add r7,sp,#0
 3414              	.LCFI115:
 3415              	 .cfi_def_cfa_register 7
 3416 0006 7860     	 str r0,[r7,#4]
 709:../cleanflight/src/main/flight/imu.c ****     quaternionProducts buffer;
 710:../cleanflight/src/main/flight/imu.c **** 
 711:../cleanflight/src/main/flight/imu.c ****     imuQuaternionMultiplication(&offset, &q, &headfree);
 3417              	 .loc 2 711 0
 3418 0008 5C48     	 ldr r0,.L138
 3419 000a 5D49     	 ldr r1,.L138+4
 3420 000c 5D4A     	 ldr r2,.L138+8
 3421 000e FFF7FEFF 	 bl imuQuaternionMultiplication
 712:../cleanflight/src/main/flight/imu.c ****     imuQuaternionComputeProducts(&headfree, &buffer);
 3422              	 .loc 2 712 0
 3423 0012 07F10C03 	 add r3,r7,#12
 3424 0016 5B48     	 ldr r0,.L138+8
 3425 0018 1946     	 mov r1,r3
 3426 001a FFF7FEFF 	 bl imuQuaternionComputeProducts
 713:../cleanflight/src/main/flight/imu.c **** 
 714:../cleanflight/src/main/flight/imu.c ****     const float x = (buffer.ww + buffer.xx - buffer.yy - buffer.zz) * v->X + 2.0f * (buffer.xy + bu
 3427              	 .loc 2 714 0
 3428 001e 97ED037A 	 flds s14,[r7,#12]
 3429 0022 D7ED077A 	 flds s15,[r7,#28]
 3430 0026 37EE277A 	 fadds s14,s14,s15
 3431 002a D7ED0A7A 	 flds s15,[r7,#40]
 3432 002e 37EE677A 	 fsubs s14,s14,s15
 3433 0032 D7ED0C7A 	 flds s15,[r7,#48]
 3434 0036 77EE677A 	 fsubs s15,s14,s15
 3435 003a 7B68     	 ldr r3,[r7,#4]
 3436 003c 1B68     	 ldr r3,[r3]
 3437 003e 07EE103A 	 fmsr s14,r3
 3438 0042 27EE877A 	 fmuls s14,s15,s14
 3439 0046 D7ED086A 	 flds s13,[r7,#32]
 3440 004a D7ED067A 	 flds s15,[r7,#24]
 3441 004e 76EEA77A 	 fadds s15,s13,s15
 3442 0052 77EEA77A 	 fadds s15,s15,s15
 3443 0056 7B68     	 ldr r3,[r7,#4]
 3444 0058 5B68     	 ldr r3,[r3,#4]
 3445 005a 06EE903A 	 fmsr s13,r3
 3446 005e 67EEA67A 	 fmuls s15,s15,s13
 3447 0062 37EE277A 	 fadds s14,s14,s15
 3448 0066 D7ED096A 	 flds s13,[r7,#36]
 3449 006a D7ED057A 	 flds s15,[r7,#20]
 3450 006e 76EEE77A 	 fsubs s15,s13,s15
 3451 0072 77EEA77A 	 fadds s15,s15,s15
 3452 0076 7B68     	 ldr r3,[r7,#4]
 3453 0078 9B68     	 ldr r3,[r3,#8]
 3454 007a 06EE903A 	 fmsr s13,r3
 3455 007e 67EEA67A 	 fmuls s15,s15,s13
 3456 0082 77EE277A 	 fadds s15,s14,s15
 3457 0086 C7ED0F7A 	 fsts s15,[r7,#60]
 715:../cleanflight/src/main/flight/imu.c ****     const float y = 2.0f * (buffer.xy - buffer.wz) * v->X + (buffer.ww - buffer.xx + buffer.yy - bu
 3458              	 .loc 2 715 0
 3459 008a 97ED087A 	 flds s14,[r7,#32]
 3460 008e D7ED067A 	 flds s15,[r7,#24]
 3461 0092 77EE677A 	 fsubs s15,s14,s15
 3462 0096 77EEA77A 	 fadds s15,s15,s15
 3463 009a 7B68     	 ldr r3,[r7,#4]
 3464 009c 1B68     	 ldr r3,[r3]
 3465 009e 07EE103A 	 fmsr s14,r3
 3466 00a2 27EE877A 	 fmuls s14,s15,s14
 3467 00a6 D7ED036A 	 flds s13,[r7,#12]
 3468 00aa D7ED077A 	 flds s15,[r7,#28]
 3469 00ae 76EEE76A 	 fsubs s13,s13,s15
 3470 00b2 D7ED0A7A 	 flds s15,[r7,#40]
 3471 00b6 76EEA76A 	 fadds s13,s13,s15
 3472 00ba D7ED0C7A 	 flds s15,[r7,#48]
 3473 00be 76EEE77A 	 fsubs s15,s13,s15
 3474 00c2 7B68     	 ldr r3,[r7,#4]
 3475 00c4 5B68     	 ldr r3,[r3,#4]
 3476 00c6 06EE903A 	 fmsr s13,r3
 3477 00ca 67EEA67A 	 fmuls s15,s15,s13
 3478 00ce 37EE277A 	 fadds s14,s14,s15
 3479 00d2 D7ED0B6A 	 flds s13,[r7,#44]
 3480 00d6 D7ED047A 	 flds s15,[r7,#16]
 3481 00da 76EEA77A 	 fadds s15,s13,s15
 3482 00de 77EEA77A 	 fadds s15,s15,s15
 3483 00e2 7B68     	 ldr r3,[r7,#4]
 3484 00e4 9B68     	 ldr r3,[r3,#8]
 3485 00e6 06EE903A 	 fmsr s13,r3
 3486 00ea 67EEA67A 	 fmuls s15,s15,s13
 3487 00ee 77EE277A 	 fadds s15,s14,s15
 3488 00f2 C7ED0E7A 	 fsts s15,[r7,#56]
 716:../cleanflight/src/main/flight/imu.c ****     const float z = 2.0f * (buffer.xz + buffer.wy) * v->X + 2.0f * (buffer.yz - buffer.wx) * v->Y +
 3489              	 .loc 2 716 0
 3490 00f6 97ED097A 	 flds s14,[r7,#36]
 3491 00fa D7ED057A 	 flds s15,[r7,#20]
 3492 00fe 77EE277A 	 fadds s15,s14,s15
 3493 0102 77EEA77A 	 fadds s15,s15,s15
 3494 0106 7B68     	 ldr r3,[r7,#4]
 3495 0108 1B68     	 ldr r3,[r3]
 3496 010a 07EE103A 	 fmsr s14,r3
 3497 010e 27EE877A 	 fmuls s14,s15,s14
 3498 0112 D7ED0B6A 	 flds s13,[r7,#44]
 3499 0116 D7ED047A 	 flds s15,[r7,#16]
 3500 011a 76EEE77A 	 fsubs s15,s13,s15
 3501 011e 77EEA77A 	 fadds s15,s15,s15
 3502 0122 7B68     	 ldr r3,[r7,#4]
 3503 0124 5B68     	 ldr r3,[r3,#4]
 3504 0126 06EE903A 	 fmsr s13,r3
 3505 012a 67EEA67A 	 fmuls s15,s15,s13
 3506 012e 37EE277A 	 fadds s14,s14,s15
 3507 0132 D7ED036A 	 flds s13,[r7,#12]
 3508 0136 D7ED077A 	 flds s15,[r7,#28]
 3509 013a 76EEE76A 	 fsubs s13,s13,s15
 3510 013e D7ED0A7A 	 flds s15,[r7,#40]
 3511 0142 76EEE76A 	 fsubs s13,s13,s15
 3512 0146 D7ED0C7A 	 flds s15,[r7,#48]
 3513 014a 76EEA77A 	 fadds s15,s13,s15
 3514 014e 7B68     	 ldr r3,[r7,#4]
 3515 0150 9B68     	 ldr r3,[r3,#8]
 3516 0152 06EE903A 	 fmsr s13,r3
 3517 0156 67EEA67A 	 fmuls s15,s15,s13
 3518 015a 77EE277A 	 fadds s15,s14,s15
 3519 015e C7ED0D7A 	 fsts s15,[r7,#52]
 717:../cleanflight/src/main/flight/imu.c **** 
 718:../cleanflight/src/main/flight/imu.c ****     v->X = x;
 3520              	 .loc 2 718 0
 3521 0162 7B68     	 ldr r3,[r7,#4]
 3522 0164 FA6B     	 ldr r2,[r7,#60]
 3523 0166 1A60     	 str r2,[r3]
 719:../cleanflight/src/main/flight/imu.c ****     v->Y = y;
 3524              	 .loc 2 719 0
 3525 0168 7B68     	 ldr r3,[r7,#4]
 3526 016a BA6B     	 ldr r2,[r7,#56]
 3527 016c 5A60     	 str r2,[r3,#4]
 720:../cleanflight/src/main/flight/imu.c ****     v->Z = z;
 3528              	 .loc 2 720 0
 3529 016e 7B68     	 ldr r3,[r7,#4]
 3530 0170 7A6B     	 ldr r2,[r7,#52]
 3531 0172 9A60     	 str r2,[r3,#8]
 721:../cleanflight/src/main/flight/imu.c **** }
 3532              	 .loc 2 721 0
 3533 0174 4037     	 adds r7,r7,#64
 3534              	.LCFI116:
 3535              	 .cfi_def_cfa_offset 8
 3536 0176 BD46     	 mov sp,r7
 3537              	.LCFI117:
 3538              	 .cfi_def_cfa_register 13
 3539              	 
 3540 0178 80BD     	 pop {r7,pc}
 3541              	.L139:
 3542 017a 00BF     	 .align 2
 3543              	.L138:
 3544 017c 00000000 	 .word offset
 3545 0180 00000000 	 .word q
 3546 0184 00000000 	 .word headfree
 3547              	 .cfi_endproc
 3548              	.LFE578:
 3550              	 .section .bss.integralFBx.13839,"aw",%nobits
 3551              	 .align 2
 3554              	integralFBx.13839:
 3555 0000 00000000 	 .space 4
 3556              	 .section .bss.integralFBy.13840,"aw",%nobits
 3557              	 .align 2
 3560              	integralFBy.13840:
 3561 0000 00000000 	 .space 4
 3562              	 .section .bss.integralFBz.13841,"aw",%nobits
 3563              	 .align 2
 3566              	integralFBz.13841:
 3567 0000 00000000 	 .space 4
 3568              	 .section .bss.lastArmState.13880,"aw",%nobits
 3571              	lastArmState.13880:
 3572 0000 00       	 .space 1
 3573              	 .section .bss.gyroQuietPeriodTimeEnd.13881,"aw",%nobits
 3574              	 .align 2
 3577              	gyroQuietPeriodTimeEnd.13881:
 3578 0000 00000000 	 .space 4
 3579              	 .section .bss.attitudeResetTimeEnd.13882,"aw",%nobits
 3580              	 .align 2
 3583              	attitudeResetTimeEnd.13882:
 3584 0000 00000000 	 .space 4
 3585              	 .section .bss.attitudeResetCompleted.13883,"aw",%nobits
 3588              	attitudeResetCompleted.13883:
 3589 0000 00       	 .space 1
 3590              	 .section .bss.previousIMUUpdateTime.13890,"aw",%nobits
 3591              	 .align 2
 3594              	previousIMUUpdateTime.13890:
 3595 0000 00000000 	 .space 4
 3596              	 .section .bss.initialized.13907,"aw",%nobits
 3599              	initialized.13907:
 3600 0000 00       	 .space 1
 3601              	 .text
 3602              	.Letext0:
 3603              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3604              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3605              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/xmc4700.h"
 3606              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 3607              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/platform.h"
 3608              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 3609              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/axis.h"
 3610              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 3611              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 3612              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 3613              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
 3614              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 3615              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
 3616              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
 3617              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
 3618              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
 3619              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus_i2c.h"
 3620              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus.h"
 3621              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sensor.h"
 3622              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro.h"
 3623              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro_mpu.h"
 3624              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/gyro.h"
 3625              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/sensors.h"
 3626              	 .file 26 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/acceleration.h"
 3627              	 .file 27 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/barometer.h"
 3628              	 .file 28 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/compass.h"
 3629              	 .file 29 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 3630              	 .file 30 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 imu.c
    {standard input}:20     .text.imuConfig:00000000 $t
    {standard input}:24     .text.imuConfig:00000000 imuConfig
    {standard input}:54     .text.imuConfig:00000010 $d
                            *COM*:00000008 imuConfig_System
                            *COM*:0000000c accSum
                            *COM*:0000000c accAverage
    {standard input}:65     .bss.accTimeSum:00000000 accTimeSum
    {standard input}:62     .bss.accTimeSum:00000000 $d
    {standard input}:72     .bss.accSumCount:00000000 accSumCount
    {standard input}:69     .bss.accSumCount:00000000 $d
                            *COM*:00000004 accVelScale
    {standard input}:79     .data.canUseGPSHeading:00000000 canUseGPSHeading
    {standard input}:82     .bss.throttleAngleScale:00000000 $d
    {standard input}:85     .bss.throttleAngleScale:00000000 throttleAngleScale
    {standard input}:88     .bss.throttleAngleValue:00000000 $d
    {standard input}:91     .bss.throttleAngleValue:00000000 throttleAngleValue
    {standard input}:94     .bss.fc_acc:00000000 $d
    {standard input}:97     .bss.fc_acc:00000000 fc_acc
    {standard input}:100    .bss.smallAngleCosZ:00000000 $d
    {standard input}:103    .bss.smallAngleCosZ:00000000 smallAngleCosZ
    {standard input}:106    .bss.imuRuntimeConfig:00000000 $d
    {standard input}:109    .bss.imuRuntimeConfig:00000000 imuRuntimeConfig
    {standard input}:112    .bss.rMat:00000000 $d
    {standard input}:115    .bss.rMat:00000000 rMat
    {standard input}:118    .data.q:00000000 $d
    {standard input}:121    .data.q:00000000 q
    {standard input}:127    .data.qP:00000000 $d
    {standard input}:130    .data.qP:00000000 qP
    {standard input}:146    .data.headfree:00000000 headfree
    {standard input}:143    .data.headfree:00000000 $d
    {standard input}:156    .data.offset:00000000 offset
    {standard input}:153    .data.offset:00000000 $d
    {standard input}:166    .bss.attitude:00000000 attitude
    {standard input}:163    .bss.attitude:00000000 $d
                            *COM*:00000008 imuConfig_Copy
    {standard input}:175    .pg_registry:00000000 imuConfig_Registry
    {standard input}:172    .pg_registry:00000000 $d
    {standard input}:187    .pg_resetdata:00000000 pgResetTemplate_imuConfig
    {standard input}:184    .pg_resetdata:00000000 $d
    {standard input}:195    .text.imuComputeRotationMatrix:00000000 $t
    {standard input}:199    .text.imuComputeRotationMatrix:00000000 imuComputeRotationMatrix
    {standard input}:2834   .text.imuQuaternionComputeProducts:00000000 imuQuaternionComputeProducts
    {standard input}:313    .text.imuComputeRotationMatrix:0000011c $d
    {standard input}:320    .text.calculateAccZLowPassFilterRCTimeConstant:00000000 $t
    {standard input}:324    .text.calculateAccZLowPassFilterRCTimeConstant:00000000 calculateAccZLowPassFilterRCTimeConstant
    {standard input}:366    .text.calculateAccZLowPassFilterRCTimeConstant:0000002c $d
    {standard input}:371    .text.calculateThrottleAngleScale:00000000 $t
    {standard input}:375    .text.calculateThrottleAngleScale:00000000 calculateThrottleAngleScale
    {standard input}:420    .text.calculateThrottleAngleScale:00000034 $d
    {standard input}:426    .text.imuConfigure:00000000 $t
    {standard input}:431    .text.imuConfigure:00000000 imuConfigure
    {standard input}:516    .text.imuConfigure:00000090 $d
    {standard input}:526    .text.imuInit:00000000 $t
    {standard input}:531    .text.imuInit:00000000 imuInit
    {standard input}:581    .text.imuInit:00000054 $d
    {standard input}:592    .text.imuResetAccelerationSum:00000000 $t
    {standard input}:597    .text.imuResetAccelerationSum:00000000 imuResetAccelerationSum
    {standard input}:644    .text.imuResetAccelerationSum:0000002c $d
    {standard input}:651    .text.invSqrt:00000000 $t
    {standard input}:655    .text.invSqrt:00000000 invSqrt
    {standard input}:694    .text.imuMahonyAHRSupdate:00000000 $t
    {standard input}:698    .text.imuMahonyAHRSupdate:00000000 imuMahonyAHRSupdate
    {standard input}:1034   .text.imuMahonyAHRSupdate:000003c0 $d
    {standard input}:1044   .text.imuMahonyAHRSupdate:000003dc $t
    {standard input}:1306   .text.imuMahonyAHRSupdate:000006d8 $d
    {standard input}:3554   .bss.integralFBx.13839:00000000 integralFBx.13839
    {standard input}:3560   .bss.integralFBy.13840:00000000 integralFBy.13840
    {standard input}:3566   .bss.integralFBz.13841:00000000 integralFBz.13841
    {standard input}:1315   .text.imuUpdateEulerAngles:00000000 $t
    {standard input}:1319   .text.imuUpdateEulerAngles:00000000 imuUpdateEulerAngles
    {standard input}:1523   .text.imuUpdateEulerAngles:000001ec $d
    {standard input}:1535   .text.imuIsAccelerometerHealthy:00000000 $t
    {standard input}:1539   .text.imuIsAccelerometerHealthy:00000000 imuIsAccelerometerHealthy
    {standard input}:1647   .text.imuIsAccelerometerHealthy:000000b4 $d
    {standard input}:1655   .text.imuCalcKpGain:00000000 $t
    {standard input}:1660   .text.imuCalcKpGain:00000000 imuCalcKpGain
    {standard input}:1879   .text.imuCalcKpGain:00000168 $d
    {standard input}:3571   .bss.lastArmState.13880:00000000 lastArmState.13880
    {standard input}:3577   .bss.gyroQuietPeriodTimeEnd.13881:00000000 gyroQuietPeriodTimeEnd.13881
    {standard input}:3583   .bss.attitudeResetTimeEnd.13882:00000000 attitudeResetTimeEnd.13882
    {standard input}:3588   .bss.attitudeResetCompleted.13883:00000000 attitudeResetCompleted.13883
    {standard input}:1890   .text.imuCalculateEstimatedAttitude:00000000 $t
    {standard input}:1894   .text.imuCalculateEstimatedAttitude:00000000 imuCalculateEstimatedAttitude
    {standard input}:2397   .text.shouldInitializeGPSHeading:00000000 shouldInitializeGPSHeading
    {standard input}:2558   .text.imuComputeQuaternionFromRPY:00000000 imuComputeQuaternionFromRPY
    {standard input}:2163   .text.imuCalculateEstimatedAttitude:000001f0 $d
    {standard input}:3594   .bss.previousIMUUpdateTime.13890:00000000 previousIMUUpdateTime.13890
    {standard input}:2177   .text.calculateThrottleAngleCorrection:00000000 $t
    {standard input}:2182   .text.calculateThrottleAngleCorrection:00000000 calculateThrottleAngleCorrection
    {standard input}:2271   .text.calculateThrottleAngleCorrection:00000098 $d
    {standard input}:2280   .text.imuUpdateAttitude:00000000 $t
    {standard input}:2285   .text.imuUpdateAttitude:00000000 imuUpdateAttitude
    {standard input}:2384   .text.imuUpdateAttitude:00000088 $d
    {standard input}:2392   .text.shouldInitializeGPSHeading:00000000 $t
    {standard input}:2443   .text.shouldInitializeGPSHeading:00000028 $d
    {standard input}:3599   .bss.initialized.13907:00000000 initialized.13907
    {standard input}:2448   .text.getCosTiltAngle:00000000 $t
    {standard input}:2453   .text.getCosTiltAngle:00000000 getCosTiltAngle
    {standard input}:2484   .text.getCosTiltAngle:00000014 $d
    {standard input}:2489   .text.getQuaternion:00000000 $t
    {standard input}:2494   .text.getQuaternion:00000000 getQuaternion
    {standard input}:2548   .text.getQuaternion:00000034 $d
    {standard input}:2553   .text.imuComputeQuaternionFromRPY:00000000 $t
    {standard input}:2824   .text.imuComputeQuaternionFromRPY:000002ec $d
    {standard input}:2829   .text.imuQuaternionComputeProducts:00000000 $t
    {standard input}:3000   .text.imuQuaternionHeadfreeOffsetSet:00000000 $t
    {standard input}:3005   .text.imuQuaternionHeadfreeOffsetSet:00000000 imuQuaternionHeadfreeOffsetSet
    {standard input}:3116   .text.imuQuaternionHeadfreeOffsetSet:000000d0 $d
    {standard input}:3123   .text.imuQuaternionMultiplication:00000000 $t
    {standard input}:3128   .text.imuQuaternionMultiplication:00000000 imuQuaternionMultiplication
    {standard input}:3394   .text.imuQuaternionHeadfreeTransformVectorEarthToBody:00000000 $t
    {standard input}:3399   .text.imuQuaternionHeadfreeTransformVectorEarthToBody:00000000 imuQuaternionHeadfreeTransformVectorEarthToBody
    {standard input}:3544   .text.imuQuaternionHeadfreeTransformVectorEarthToBody:0000017c $d
    {standard input}:3551   .bss.integralFBx.13839:00000000 $d
    {standard input}:3557   .bss.integralFBy.13840:00000000 $d
    {standard input}:3563   .bss.integralFBz.13841:00000000 $d
    {standard input}:3572   .bss.lastArmState.13880:00000000 $d
    {standard input}:3574   .bss.gyroQuietPeriodTimeEnd.13881:00000000 $d
    {standard input}:3580   .bss.attitudeResetTimeEnd.13882:00000000 $d
    {standard input}:3589   .bss.attitudeResetCompleted.13883:00000000 $d
    {standard input}:3591   .bss.previousIMUUpdateTime.13890:00000000 $d
    {standard input}:3600   .bss.initialized.13907:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
degreesToRadians
cos_approx
acc
sqrtf
sin_approx
atan2_approx
lrintf
acos_approx
flightModeFlags
stateFlags
armingFlags
sensors
compassIsHealthy
gyroGetAccumulationAverage
accGetAccumulationAverage
gpsSol
mag
mixerSetThrottleAngleCorrection
