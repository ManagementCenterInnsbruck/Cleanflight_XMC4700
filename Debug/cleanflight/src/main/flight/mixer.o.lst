   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "mixer.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.constrain,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	constrain:
  25              	.LFB521:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  27              	 .loc 1 151 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 85B0     	 sub sp,sp,#20
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 F860     	 str r0,[r7,#12]
  43 0008 B960     	 str r1,[r7,#8]
  44 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
  45              	 .loc 1 152 0
  46 000c FA68     	 ldr r2,[r7,#12]
  47 000e BB68     	 ldr r3,[r7,#8]
  48 0010 9A42     	 cmp r2,r3
  49 0012 01DA     	 bge .L2
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
  50              	 .loc 1 153 0
  51 0014 BB68     	 ldr r3,[r7,#8]
  52 0016 06E0     	 b .L3
  53              	.L2:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
  54              	 .loc 1 154 0
  55 0018 FA68     	 ldr r2,[r7,#12]
  56 001a 7B68     	 ldr r3,[r7,#4]
  57 001c 9A42     	 cmp r2,r3
  58 001e 01DD     	 ble .L4
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
  59              	 .loc 1 155 0
  60 0020 7B68     	 ldr r3,[r7,#4]
  61 0022 00E0     	 b .L3
  62              	.L4:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
  63              	 .loc 1 157 0
  64 0024 FB68     	 ldr r3,[r7,#12]
  65              	.L3:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
  66              	 .loc 1 158 0
  67 0026 1846     	 mov r0,r3
  68 0028 1437     	 adds r7,r7,#20
  69              	.LCFI3:
  70              	 .cfi_def_cfa_offset 4
  71 002a BD46     	 mov sp,r7
  72              	.LCFI4:
  73              	 .cfi_def_cfa_register 13
  74              	 
  75 002c 5DF8047B 	 ldr r7,[sp],#4
  76              	.LCFI5:
  77              	 .cfi_restore 7
  78              	 .cfi_def_cfa_offset 0
  79 0030 7047     	 bx lr
  80              	 .cfi_endproc
  81              	.LFE521:
  83 0032 00BF     	 .section .text.constrainf,"ax",%progbits
  84              	 .align 2
  85              	 .thumb
  86              	 .thumb_func
  88              	constrainf:
  89              	.LFB522:
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline float constrainf(float amt, float low, float high)
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  90              	 .loc 1 161 0
  91              	 .cfi_startproc
  92              	 
  93              	 
  94              	 
  95 0000 80B4     	 push {r7}
  96              	.LCFI6:
  97              	 .cfi_def_cfa_offset 4
  98              	 .cfi_offset 7,-4
  99 0002 85B0     	 sub sp,sp,#20
 100              	.LCFI7:
 101              	 .cfi_def_cfa_offset 24
 102 0004 00AF     	 add r7,sp,#0
 103              	.LCFI8:
 104              	 .cfi_def_cfa_register 7
 105 0006 87ED030A 	 fsts s0,[r7,#12]
 106 000a C7ED020A 	 fsts s1,[r7,#8]
 107 000e 87ED011A 	 fsts s2,[r7,#4]
 162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
 108              	 .loc 1 162 0
 109 0012 97ED037A 	 flds s14,[r7,#12]
 110 0016 D7ED027A 	 flds s15,[r7,#8]
 111 001a B4EEE77A 	 fcmpes s14,s15
 112 001e F1EE10FA 	 fmstat
 113 0022 01D5     	 bpl .L13
 163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
 114              	 .loc 1 163 0
 115 0024 BB68     	 ldr r3,[r7,#8]
 116 0026 0BE0     	 b .L8
 117              	.L13:
 164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
 118              	 .loc 1 164 0
 119 0028 97ED037A 	 flds s14,[r7,#12]
 120 002c D7ED017A 	 flds s15,[r7,#4]
 121 0030 B4EEE77A 	 fcmpes s14,s15
 122 0034 F1EE10FA 	 fmstat
 123 0038 01DD     	 ble .L14
 165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 124              	 .loc 1 165 0
 125 003a 7B68     	 ldr r3,[r7,#4]
 126 003c 00E0     	 b .L8
 127              	.L14:
 166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 128              	 .loc 1 167 0
 129 003e FB68     	 ldr r3,[r7,#12]
 130              	.L8:
 131 0040 07EE903A 	 fmsr s15,r3
 168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 132              	 .loc 1 168 0
 133 0044 B0EE670A 	 fcpys s0,s15
 134 0048 1437     	 adds r7,r7,#20
 135              	.LCFI9:
 136              	 .cfi_def_cfa_offset 4
 137 004a BD46     	 mov sp,r7
 138              	.LCFI10:
 139              	 .cfi_def_cfa_register 13
 140              	 
 141 004c 5DF8047B 	 ldr r7,[sp],#4
 142              	.LCFI11:
 143              	 .cfi_restore 7
 144              	 .cfi_def_cfa_offset 0
 145 0050 7047     	 bx lr
 146              	 .cfi_endproc
 147              	.LFE522:
 149 0052 00BF     	 .section .text.rxConfig,"ax",%progbits
 150              	 .align 2
 151              	 .thumb
 152              	 .thumb_func
 154              	rxConfig:
 155              	.LFB528:
 156              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
 157              	 .loc 2 61 0
 158              	 .cfi_startproc
 159              	 
 160              	 
 161              	 
 162 0000 80B4     	 push {r7}
 163              	.LCFI12:
 164              	 .cfi_def_cfa_offset 4
 165              	 .cfi_offset 7,-4
 166 0002 00AF     	 add r7,sp,#0
 167              	.LCFI13:
 168              	 .cfi_def_cfa_register 7
 169              	 .loc 2 61 0
 170 0004 024B     	 ldr r3,.L17
 171 0006 1846     	 mov r0,r3
 172 0008 BD46     	 mov sp,r7
 173              	.LCFI14:
 174              	 .cfi_def_cfa_register 13
 175              	 
 176 000a 5DF8047B 	 ldr r7,[sp],#4
 177              	.LCFI15:
 178              	 .cfi_restore 7
 179              	 .cfi_def_cfa_offset 0
 180 000e 7047     	 bx lr
 181              	.L18:
 182              	 .align 2
 183              	.L17:
 184 0010 00000000 	 .word rxConfig_System
 185              	 .cfi_endproc
 186              	.LFE528:
 188              	 .section .text.flight3DConfig,"ax",%progbits
 189              	 .align 2
 190              	 .thumb
 191              	 .thumb_func
 193              	flight3DConfig:
 194              	.LFB542:
 195              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum rc_alias {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     ROLL = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     PITCH,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     YAW,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX1,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX3,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX4,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX5,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX6,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX7,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX8
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rc_alias_e;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PRIMARY_CHANNEL_COUNT (THROTTLE + 1)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_LOW = 0,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_HIGH
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } throttleStatus_e;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define AIRMODEDEADBAND 12
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     NOT_CENTERED = 0,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     CENTERED
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rollPitchStatus_e;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_OFF = 0,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DEFAULT,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_AUTO,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_MANUAL
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothing_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_INTERPOLATION,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_FILTER
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingType_e;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_PT1,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_BIQUAD
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInputFilter_e;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_OFF,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_PT1,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_BIQUAD
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingDerivativeFilter_e;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_INPUT_ACTIVE,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_DERIVATIVE_ACTIVE,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_AVERAGE_FRAME
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInfoType_e;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_LO (1 << (2 * ROLL))
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_CE (3 << (2 * ROLL))
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_HI (2 << (2 * ROLL))
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_LO (1 << (2 * PITCH))
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_CE (3 << (2 * PITCH))
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_HI (2 << (2 * PITCH))
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_LO (1 << (2 * YAW))
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_CE (3 << (2 * YAW))
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_HI (2 << (2 * YAW))
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_LO (1 << (2 * THROTTLE))
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_CE (3 << (2 * THROTTLE))
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_HI (2 << (2 * THROTTLE))
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_EXPO_MAX  100
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_RATES_MAX  255
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** // (Super) rates are constrained to [0, 100] for Betaflight rates, so values higher than 100 won't 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RATE_MAX  255
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_TPA_MAX              100
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** extern float rcCommand[4];
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilterTraining_s {
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     float sum;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int count;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t min;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t max;
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTraining_t;
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef union rcSmoothingFilterTypes_u {
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     pt1Filter_t pt1Filter;
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     biquadFilter_t biquadFilter;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTypes_t;
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilter_s {
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool filterInitialized;
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTypes_t filter[4];
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t inputCutoffFrequency;
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t derivativeCutoffFrequency;
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int averageFrameTimeUs;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTraining_t training;
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilter_t;
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcControlsConfig_s {
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t deadband;                       // introduce a deadband around the stick center for pit
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t yaw_deadband;                   // introduce a deadband around the stick center for yaw
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_deadband;              // defines the neutral zone of throttle stick during al
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_fast_change;           // when disabled, turn off the althold when throttle st
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool yaw_control_reversed;            // invert control direction of yaw
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcControlsConfig_t;
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(rcControlsConfig_t, rcControlsConfig);
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct flight3DConfig_s {
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_low;                // min 3d value
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_high;               // max 3d value
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t neutral3d;                     // center 3d value
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_throttle;           // default throttle deadband from MIDRC
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_low;                   // pwm output value for max negative thrust
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_high;                  // pwm output value for max positive thrust
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t switched_mode3d;                // enable '3D Switched Mode'
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } flight3DConfig_t;
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(flight3DConfig_t, flight3DConfig);
 196              	 .loc 3 151 0
 197              	 .cfi_startproc
 198              	 
 199              	 
 200              	 
 201 0000 80B4     	 push {r7}
 202              	.LCFI16:
 203              	 .cfi_def_cfa_offset 4
 204              	 .cfi_offset 7,-4
 205 0002 00AF     	 add r7,sp,#0
 206              	.LCFI17:
 207              	 .cfi_def_cfa_register 7
 208              	 .loc 3 151 0
 209 0004 024B     	 ldr r3,.L21
 210 0006 1846     	 mov r0,r3
 211 0008 BD46     	 mov sp,r7
 212              	.LCFI18:
 213              	 .cfi_def_cfa_register 13
 214              	 
 215 000a 5DF8047B 	 ldr r7,[sp],#4
 216              	.LCFI19:
 217              	 .cfi_restore 7
 218              	 .cfi_def_cfa_offset 0
 219 000e 7047     	 bx lr
 220              	.L22:
 221              	 .align 2
 222              	.L21:
 223 0010 00000000 	 .word flight3DConfig_System
 224              	 .cfi_endproc
 225              	.LFE542:
 227              	 .section .text.flight3DConfigMutable,"ax",%progbits
 228              	 .align 2
 229              	 .thumb
 230              	 .thumb_func
 232              	flight3DConfigMutable:
 233              	.LFB543:
 234              	 .loc 3 151 0
 235              	 .cfi_startproc
 236              	 
 237              	 
 238              	 
 239 0000 80B4     	 push {r7}
 240              	.LCFI20:
 241              	 .cfi_def_cfa_offset 4
 242              	 .cfi_offset 7,-4
 243 0002 00AF     	 add r7,sp,#0
 244              	.LCFI21:
 245              	 .cfi_def_cfa_register 7
 246              	 .loc 3 151 0
 247 0004 024B     	 ldr r3,.L25
 248 0006 1846     	 mov r0,r3
 249 0008 BD46     	 mov sp,r7
 250              	.LCFI22:
 251              	 .cfi_def_cfa_register 13
 252              	 
 253 000a 5DF8047B 	 ldr r7,[sp],#4
 254              	.LCFI23:
 255              	 .cfi_restore 7
 256              	 .cfi_def_cfa_offset 0
 257 000e 7047     	 bx lr
 258              	.L26:
 259              	 .align 2
 260              	.L25:
 261 0010 00000000 	 .word flight3DConfig_System
 262              	 .cfi_endproc
 263              	.LFE543:
 265              	 .section .text.customMotorMixer,"ax",%progbits
 266              	 .align 2
 267              	 .thumb
 268              	 .thumb_func
 270              	customMotorMixer:
 271              	.LFB557:
 272              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "platform.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "common/time.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output_counts.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/io_types.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output.h"
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define QUAD_MOTOR_COUNT 4
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHED_MOTORS_PWM_RATE 16000
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHLESS_MOTORS_PWM_RATE 480
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Digital protocol has fixed values
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_DISARM_COMMAND      0
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MIN_THROTTLE       48
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MAX_THROTTLE     2047
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_LOW  1047
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_HIGH 1048
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Note: this is called MultiType/MULTITYPE_* in baseflight.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef enum mixerMode
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** {
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_TRI = 1,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADP = 2,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX = 3,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_BICOPTER = 4,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_GIMBAL = 5,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y6 = 6,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6 = 7,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_FLYING_WING = 8,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y4 = 9,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6X = 10,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOX8 = 11,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATP = 12,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATX = 13,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_AIRPLANE = 14,        // airplane / singlecopter / dualcopter (not yet properly supported
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_120_CCPM = 15,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_90_DEG = 16,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_VTAIL4 = 17,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6H = 18,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_RX_TO_SERVO = 19,    // PPM -> servo relay
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_DUALCOPTER = 20,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_SINGLECOPTER = 21,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_ATAIL4 = 22,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM = 23,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_AIRPLANE = 24,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_TRI = 25,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX_1234 = 26
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerMode_e;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer data per motor
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct motorMixer_s {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float throttle;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float roll;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float pitch;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float yaw;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } motorMixer_t;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE_ARRAY(motorMixer_t, MAX_SUPPORTED_MOTORS, customMotorMixer);
 273              	 .loc 4 81 0
 274              	 .cfi_startproc
 275              	 
 276              	 
 277              	 
 278 0000 80B4     	 push {r7}
 279              	.LCFI24:
 280              	 .cfi_def_cfa_offset 4
 281              	 .cfi_offset 7,-4
 282 0002 83B0     	 sub sp,sp,#12
 283              	.LCFI25:
 284              	 .cfi_def_cfa_offset 16
 285 0004 00AF     	 add r7,sp,#0
 286              	.LCFI26:
 287              	 .cfi_def_cfa_register 7
 288 0006 7860     	 str r0,[r7,#4]
 289              	 .loc 4 81 0
 290 0008 7B68     	 ldr r3,[r7,#4]
 291 000a 1B01     	 lsls r3,r3,#4
 292 000c 034A     	 ldr r2,.L29
 293 000e 1344     	 add r3,r3,r2
 294 0010 1846     	 mov r0,r3
 295 0012 0C37     	 adds r7,r7,#12
 296              	.LCFI27:
 297              	 .cfi_def_cfa_offset 4
 298 0014 BD46     	 mov sp,r7
 299              	.LCFI28:
 300              	 .cfi_def_cfa_register 13
 301              	 
 302 0016 5DF8047B 	 ldr r7,[sp],#4
 303              	.LCFI29:
 304              	 .cfi_restore 7
 305              	 .cfi_def_cfa_offset 0
 306 001a 7047     	 bx lr
 307              	.L30:
 308              	 .align 2
 309              	.L29:
 310 001c 00000000 	 .word customMotorMixer_SystemArray
 311              	 .cfi_endproc
 312              	.LFE557:
 314              	 .section .text.mixerConfig,"ax",%progbits
 315              	 .align 2
 316              	 .thumb
 317              	 .thumb_func
 319              	mixerConfig:
 320              	.LFB560:
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer configuration
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixer_s {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t motorCount;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t useServo;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     const motorMixer_t *motor;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixer_t;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixerConfig_s {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t mixerMode;
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     bool yaw_motors_reversed;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t crashflip_motor_percent;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerConfig_t;
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE(mixerConfig_t, mixerConfig);
 321              	 .loc 4 96 0
 322              	 .cfi_startproc
 323              	 
 324              	 
 325              	 
 326 0000 80B4     	 push {r7}
 327              	.LCFI30:
 328              	 .cfi_def_cfa_offset 4
 329              	 .cfi_offset 7,-4
 330 0002 00AF     	 add r7,sp,#0
 331              	.LCFI31:
 332              	 .cfi_def_cfa_register 7
 333              	 .loc 4 96 0
 334 0004 024B     	 ldr r3,.L33
 335 0006 1846     	 mov r0,r3
 336 0008 BD46     	 mov sp,r7
 337              	.LCFI32:
 338              	 .cfi_def_cfa_register 13
 339              	 
 340 000a 5DF8047B 	 ldr r7,[sp],#4
 341              	.LCFI33:
 342              	 .cfi_restore 7
 343              	 .cfi_def_cfa_offset 0
 344 000e 7047     	 bx lr
 345              	.L34:
 346              	 .align 2
 347              	.L33:
 348 0010 00000000 	 .word mixerConfig_System
 349              	 .cfi_endproc
 350              	.LFE560:
 352              	 .section .text.motorConfig,"ax",%progbits
 353              	 .align 2
 354              	 .thumb
 355              	 .thumb_func
 357              	motorConfig:
 358              	.LFB562:
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct motorConfig_s {
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     motorDevConfig_t dev;
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t digitalIdleOffsetValue;        // Idle value for DShot protocol, full motor output = 1
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t minthrottle;                   // Set the minimum throttle command sent to the ESC (El
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t maxthrottle;                   // This is the maximum value for the ESCs at full power
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t mincommand;                    // This is the value for the ESCs when they are not arm
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t motorPoleCount;                // Magnetic poles in the motors for calculating actual R
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } motorConfig_t;
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE(motorConfig_t, motorConfig);
 359              	 .loc 4 107 0
 360              	 .cfi_startproc
 361              	 
 362              	 
 363              	 
 364 0000 80B4     	 push {r7}
 365              	.LCFI34:
 366              	 .cfi_def_cfa_offset 4
 367              	 .cfi_offset 7,-4
 368 0002 00AF     	 add r7,sp,#0
 369              	.LCFI35:
 370              	 .cfi_def_cfa_register 7
 371              	 .loc 4 107 0
 372 0004 024B     	 ldr r3,.L37
 373 0006 1846     	 mov r0,r3
 374 0008 BD46     	 mov sp,r7
 375              	.LCFI36:
 376              	 .cfi_def_cfa_register 13
 377              	 
 378 000a 5DF8047B 	 ldr r7,[sp],#4
 379              	.LCFI37:
 380              	 .cfi_restore 7
 381              	 .cfi_def_cfa_offset 0
 382 000e 7047     	 bx lr
 383              	.L38:
 384              	 .align 2
 385              	.L37:
 386 0010 00000000 	 .word motorConfig_System
 387              	 .cfi_endproc
 388              	.LFE562:
 390              	 .comm mixerConfig_System,3,4
 391              	 .comm mixerConfig_Copy,3,4
 392              	 .global mixerConfig_Registry
 393              	 .section .pg_registry,"a",%progbits
 394              	 .align 2
 397              	mixerConfig_Registry:
 398 0000 1400     	 .short 20
 399 0002 0300     	 .short 3
 400 0004 00000000 	 .word mixerConfig_System
 401 0008 00000000 	 .word mixerConfig_Copy
 402 000c 00000000 	 .word 0
 403 0010 00000000 	 .word pgResetTemplate_mixerConfig
 404              	 .global pgResetTemplate_mixerConfig
 405              	 .section .pg_resetdata,"a",%progbits
 406              	 .align 1
 409              	pgResetTemplate_mixerConfig:
 410 0000 03       	 .byte 3
 411 0001 00       	 .byte 0
 412 0002 00       	 .byte 0
 413              	 .comm motorConfig_System,23,4
 414              	 .comm motorConfig_Copy,23,4
 415              	 .global motorConfig_Registry
 416 0003 00       	 .section .pg_registry
 417              	 .align 2
 420              	motorConfig_Registry:
 421 0014 0610     	 .short 4102
 422 0016 1700     	 .short 23
 423 0018 00000000 	 .word motorConfig_System
 424 001c 00000000 	 .word motorConfig_Copy
 425 0020 00000000 	 .word 0
 426 0024 00000000 	 .word pgResetFn_motorConfig
 427              	 .section .text.pgResetFn_motorConfig,"ax",%progbits
 428              	 .align 2
 429              	 .global pgResetFn_motorConfig
 430              	 .thumb
 431              	 .thumb_func
 433              	pgResetFn_motorConfig:
 434              	.LFB588:
 435              	 .file 5 "../cleanflight/src/main/flight/mixer.c"
   1:../cleanflight/src/main/flight/mixer.c **** /*
   2:../cleanflight/src/main/flight/mixer.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/flight/mixer.c ****  *
   4:../cleanflight/src/main/flight/mixer.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/flight/mixer.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/flight/mixer.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/flight/mixer.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/flight/mixer.c ****  * any later version.
   9:../cleanflight/src/main/flight/mixer.c ****  *
  10:../cleanflight/src/main/flight/mixer.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/flight/mixer.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/flight/mixer.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/flight/mixer.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/flight/mixer.c ****  *
  15:../cleanflight/src/main/flight/mixer.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/flight/mixer.c ****  * along with this software.
  17:../cleanflight/src/main/flight/mixer.c ****  *
  18:../cleanflight/src/main/flight/mixer.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/flight/mixer.c ****  */
  20:../cleanflight/src/main/flight/mixer.c **** 
  21:../cleanflight/src/main/flight/mixer.c **** #include <stdbool.h>
  22:../cleanflight/src/main/flight/mixer.c **** #include <stdint.h>
  23:../cleanflight/src/main/flight/mixer.c **** #include <string.h>
  24:../cleanflight/src/main/flight/mixer.c **** #include <math.h>
  25:../cleanflight/src/main/flight/mixer.c **** 
  26:../cleanflight/src/main/flight/mixer.c **** #include "platform.h"
  27:../cleanflight/src/main/flight/mixer.c **** 
  28:../cleanflight/src/main/flight/mixer.c **** #include "build/build_config.h"
  29:../cleanflight/src/main/flight/mixer.c **** #include "build/debug.h"
  30:../cleanflight/src/main/flight/mixer.c **** 
  31:../cleanflight/src/main/flight/mixer.c **** #include "common/axis.h"
  32:../cleanflight/src/main/flight/mixer.c **** #include "common/filter.h"
  33:../cleanflight/src/main/flight/mixer.c **** #include "common/maths.h"
  34:../cleanflight/src/main/flight/mixer.c **** 
  35:../cleanflight/src/main/flight/mixer.c **** #include "config/feature.h"
  36:../cleanflight/src/main/flight/mixer.c **** #include "pg/pg.h"
  37:../cleanflight/src/main/flight/mixer.c **** #include "pg/pg_ids.h"
  38:../cleanflight/src/main/flight/mixer.c **** #include "pg/rx.h"
  39:../cleanflight/src/main/flight/mixer.c **** 
  40:../cleanflight/src/main/flight/mixer.c **** #include "drivers/pwm_output.h"
  41:../cleanflight/src/main/flight/mixer.c **** #include "drivers/pwm_esc_detect.h"
  42:../cleanflight/src/main/flight/mixer.c **** #include "drivers/time.h"
  43:../cleanflight/src/main/flight/mixer.c **** #include "drivers/io.h"
  44:../cleanflight/src/main/flight/mixer.c **** 
  45:../cleanflight/src/main/flight/mixer.c **** #include "io/motors.h"
  46:../cleanflight/src/main/flight/mixer.c **** 
  47:../cleanflight/src/main/flight/mixer.c **** #include "fc/config.h"
  48:../cleanflight/src/main/flight/mixer.c **** #include "fc/controlrate_profile.h"
  49:../cleanflight/src/main/flight/mixer.c **** #include "fc/rc_controls.h"
  50:../cleanflight/src/main/flight/mixer.c **** #include "fc/rc_modes.h"
  51:../cleanflight/src/main/flight/mixer.c **** #include "fc/runtime_config.h"
  52:../cleanflight/src/main/flight/mixer.c **** #include "fc/fc_core.h"
  53:../cleanflight/src/main/flight/mixer.c **** #include "fc/fc_rc.h"
  54:../cleanflight/src/main/flight/mixer.c **** 
  55:../cleanflight/src/main/flight/mixer.c **** #include "flight/failsafe.h"
  56:../cleanflight/src/main/flight/mixer.c **** #include "flight/imu.h"
  57:../cleanflight/src/main/flight/mixer.c **** #include "flight/gps_rescue.h"
  58:../cleanflight/src/main/flight/mixer.c **** #include "flight/mixer.h"
  59:../cleanflight/src/main/flight/mixer.c **** #include "flight/mixer_tricopter.h"
  60:../cleanflight/src/main/flight/mixer.c **** #include "flight/pid.h"
  61:../cleanflight/src/main/flight/mixer.c **** 
  62:../cleanflight/src/main/flight/mixer.c **** #include "rx/rx.h"
  63:../cleanflight/src/main/flight/mixer.c **** 
  64:../cleanflight/src/main/flight/mixer.c **** #include "sensors/battery.h"
  65:../cleanflight/src/main/flight/mixer.c **** #include "sensors/gyro.h"
  66:../cleanflight/src/main/flight/mixer.c **** 
  67:../cleanflight/src/main/flight/mixer.c **** PG_REGISTER_WITH_RESET_TEMPLATE(mixerConfig_t, mixerConfig, PG_MIXER_CONFIG, 0);
  68:../cleanflight/src/main/flight/mixer.c **** 
  69:../cleanflight/src/main/flight/mixer.c **** #ifndef TARGET_DEFAULT_MIXER
  70:../cleanflight/src/main/flight/mixer.c **** #define TARGET_DEFAULT_MIXER    MIXER_QUADX
  71:../cleanflight/src/main/flight/mixer.c **** #endif
  72:../cleanflight/src/main/flight/mixer.c **** PG_RESET_TEMPLATE(mixerConfig_t, mixerConfig,
  73:../cleanflight/src/main/flight/mixer.c ****     .mixerMode = TARGET_DEFAULT_MIXER,
  74:../cleanflight/src/main/flight/mixer.c ****     .yaw_motors_reversed = false,
  75:../cleanflight/src/main/flight/mixer.c ****     .crashflip_motor_percent = 0,
  76:../cleanflight/src/main/flight/mixer.c **** );
  77:../cleanflight/src/main/flight/mixer.c **** 
  78:../cleanflight/src/main/flight/mixer.c **** PG_REGISTER_WITH_RESET_FN(motorConfig_t, motorConfig, PG_MOTOR_CONFIG, 1);
  79:../cleanflight/src/main/flight/mixer.c **** 
  80:../cleanflight/src/main/flight/mixer.c **** void pgResetFn_motorConfig(motorConfig_t *motorConfig)
  81:../cleanflight/src/main/flight/mixer.c **** {
 436              	 .loc 5 81 0
 437              	 .cfi_startproc
 438              	 
 439              	 
 440 0000 80B5     	 push {r7,lr}
 441              	.LCFI38:
 442              	 .cfi_def_cfa_offset 8
 443              	 .cfi_offset 7,-8
 444              	 .cfi_offset 14,-4
 445 0002 84B0     	 sub sp,sp,#16
 446              	.LCFI39:
 447              	 .cfi_def_cfa_offset 24
 448 0004 00AF     	 add r7,sp,#0
 449              	.LCFI40:
 450              	 .cfi_def_cfa_register 7
 451 0006 7860     	 str r0,[r7,#4]
  82:../cleanflight/src/main/flight/mixer.c **** #ifdef BRUSHED_MOTORS
  83:../cleanflight/src/main/flight/mixer.c ****     motorConfig->minthrottle = 1000;
  84:../cleanflight/src/main/flight/mixer.c ****     motorConfig->dev.motorPwmRate = BRUSHED_MOTORS_PWM_RATE;
  85:../cleanflight/src/main/flight/mixer.c ****     motorConfig->dev.motorPwmProtocol = PWM_TYPE_BRUSHED;
  86:../cleanflight/src/main/flight/mixer.c ****     motorConfig->dev.useUnsyncedPwm = true;
  87:../cleanflight/src/main/flight/mixer.c **** #else
  88:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_BRUSHED_ESC_AUTODETECT
  89:../cleanflight/src/main/flight/mixer.c ****     if (hardwareMotorType == MOTOR_BRUSHED) {
  90:../cleanflight/src/main/flight/mixer.c ****         motorConfig->minthrottle = 1000;
  91:../cleanflight/src/main/flight/mixer.c ****         motorConfig->dev.motorPwmRate = BRUSHED_MOTORS_PWM_RATE;
  92:../cleanflight/src/main/flight/mixer.c ****         motorConfig->dev.motorPwmProtocol = PWM_TYPE_BRUSHED;
  93:../cleanflight/src/main/flight/mixer.c ****         motorConfig->dev.useUnsyncedPwm = true;
  94:../cleanflight/src/main/flight/mixer.c ****     } else
  95:../cleanflight/src/main/flight/mixer.c **** #endif
  96:../cleanflight/src/main/flight/mixer.c ****     {
  97:../cleanflight/src/main/flight/mixer.c ****         motorConfig->minthrottle = 1070;
 452              	 .loc 5 97 0
 453 0008 7B68     	 ldr r3,[r7,#4]
 454 000a 0022     	 movs r2,#0
 455 000c 42F02E02 	 orr r2,r2,#46
 456 0010 1A74     	 strb r2,[r3,#16]
 457 0012 0022     	 movs r2,#0
 458 0014 42F00402 	 orr r2,r2,#4
 459 0018 5A74     	 strb r2,[r3,#17]
  98:../cleanflight/src/main/flight/mixer.c ****         motorConfig->dev.motorPwmRate = BRUSHLESS_MOTORS_PWM_RATE;
 460              	 .loc 5 98 0
 461 001a 7B68     	 ldr r3,[r7,#4]
 462 001c 0022     	 movs r2,#0
 463 001e 62F01F02 	 orn r2,r2,#31
 464 0022 1A70     	 strb r2,[r3]
 465 0024 0022     	 movs r2,#0
 466 0026 42F00102 	 orr r2,r2,#1
 467 002a 5A70     	 strb r2,[r3,#1]
  99:../cleanflight/src/main/flight/mixer.c ****         motorConfig->dev.motorPwmProtocol = PWM_TYPE_ONESHOT125;
 468              	 .loc 5 99 0
 469 002c 7B68     	 ldr r3,[r7,#4]
 470 002e 0122     	 movs r2,#1
 471 0030 9A70     	 strb r2,[r3,#2]
 100:../cleanflight/src/main/flight/mixer.c ****     }
 101:../cleanflight/src/main/flight/mixer.c **** #endif
 102:../cleanflight/src/main/flight/mixer.c ****     motorConfig->maxthrottle = 2000;
 472              	 .loc 5 102 0
 473 0032 7B68     	 ldr r3,[r7,#4]
 474 0034 0022     	 movs r2,#0
 475 0036 62F02F02 	 orn r2,r2,#47
 476 003a 9A74     	 strb r2,[r3,#18]
 477 003c 0022     	 movs r2,#0
 478 003e 42F00702 	 orr r2,r2,#7
 479 0042 DA74     	 strb r2,[r3,#19]
 103:../cleanflight/src/main/flight/mixer.c ****     motorConfig->mincommand = 1000;
 480              	 .loc 5 103 0
 481 0044 7B68     	 ldr r3,[r7,#4]
 482 0046 0022     	 movs r2,#0
 483 0048 62F01702 	 orn r2,r2,#23
 484 004c 1A75     	 strb r2,[r3,#20]
 485 004e 0022     	 movs r2,#0
 486 0050 42F00302 	 orr r2,r2,#3
 487 0054 5A75     	 strb r2,[r3,#21]
 104:../cleanflight/src/main/flight/mixer.c ****     motorConfig->digitalIdleOffsetValue = 450;
 488              	 .loc 5 104 0
 489 0056 7B68     	 ldr r3,[r7,#4]
 490 0058 0022     	 movs r2,#0
 491 005a 62F03D02 	 orn r2,r2,#61
 492 005e 9A73     	 strb r2,[r3,#14]
 493 0060 0022     	 movs r2,#0
 494 0062 42F00102 	 orr r2,r2,#1
 495 0066 DA73     	 strb r2,[r3,#15]
 105:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_DSHOT_DMAR
 106:../cleanflight/src/main/flight/mixer.c ****     motorConfig->dev.useBurstDshot = ENABLE_DSHOT_DMAR;
 496              	 .loc 5 106 0
 497 0068 7B68     	 ldr r3,[r7,#4]
 498 006a 0022     	 movs r2,#0
 499 006c 5A71     	 strb r2,[r3,#5]
 500              	.LBB2:
 107:../cleanflight/src/main/flight/mixer.c **** #endif
 108:../cleanflight/src/main/flight/mixer.c **** 
 109:../cleanflight/src/main/flight/mixer.c ****     for (int motorIndex = 0; motorIndex < MAX_SUPPORTED_MOTORS; motorIndex++) {
 501              	 .loc 5 109 0
 502 006e 0023     	 movs r3,#0
 503 0070 FB60     	 str r3,[r7,#12]
 504 0072 0FE0     	 b .L40
 505              	.L41:
 110:../cleanflight/src/main/flight/mixer.c ****         motorConfig->dev.ioTags[motorIndex] = timerioTagGetByUsage(TIM_USE_MOTOR, motorIndex);
 506              	 .loc 5 110 0 discriminator 3
 507 0074 FB68     	 ldr r3,[r7,#12]
 508 0076 DBB2     	 uxtb r3,r3
 509 0078 0420     	 movs r0,#4
 510 007a 1946     	 mov r1,r3
 511 007c FFF7FEFF 	 bl timerioTagGetByUsage
 512 0080 0346     	 mov r3,r0
 513 0082 1946     	 mov r1,r3
 514 0084 7A68     	 ldr r2,[r7,#4]
 515 0086 FB68     	 ldr r3,[r7,#12]
 516 0088 1344     	 add r3,r3,r2
 517 008a 0A46     	 mov r2,r1
 518 008c 9A71     	 strb r2,[r3,#6]
 109:../cleanflight/src/main/flight/mixer.c ****         motorConfig->dev.ioTags[motorIndex] = timerioTagGetByUsage(TIM_USE_MOTOR, motorIndex);
 519              	 .loc 5 109 0 discriminator 3
 520 008e FB68     	 ldr r3,[r7,#12]
 521 0090 0133     	 adds r3,r3,#1
 522 0092 FB60     	 str r3,[r7,#12]
 523              	.L40:
 109:../cleanflight/src/main/flight/mixer.c ****         motorConfig->dev.ioTags[motorIndex] = timerioTagGetByUsage(TIM_USE_MOTOR, motorIndex);
 524              	 .loc 5 109 0 is_stmt 0 discriminator 1
 525 0094 FB68     	 ldr r3,[r7,#12]
 526 0096 072B     	 cmp r3,#7
 527 0098 ECDD     	 ble .L41
 528              	.LBE2:
 111:../cleanflight/src/main/flight/mixer.c ****     }
 112:../cleanflight/src/main/flight/mixer.c **** 
 113:../cleanflight/src/main/flight/mixer.c ****     motorConfig->motorPoleCount = 14;   // Most brushes motors that we use are 14 poles
 529              	 .loc 5 113 0 is_stmt 1
 530 009a 7B68     	 ldr r3,[r7,#4]
 531 009c 0E22     	 movs r2,#14
 532 009e 9A75     	 strb r2,[r3,#22]
 114:../cleanflight/src/main/flight/mixer.c **** }
 533              	 .loc 5 114 0
 534 00a0 1037     	 adds r7,r7,#16
 535              	.LCFI41:
 536              	 .cfi_def_cfa_offset 8
 537 00a2 BD46     	 mov sp,r7
 538              	.LCFI42:
 539              	 .cfi_def_cfa_register 13
 540              	 
 541 00a4 80BD     	 pop {r7,pc}
 542              	 .cfi_endproc
 543              	.LFE588:
 545              	 .comm customMotorMixer_SystemArray,128,4
 546              	 .comm customMotorMixer_CopyArray,128,4
 547              	 .global customMotorMixer_Registry
 548 00a6 00BF     	 .section .pg_registry
 549              	 .align 2
 552              	customMotorMixer_Registry:
 553 0028 0400     	 .short 4
 554 002a 8000     	 .short 128
 555 002c 00000000 	 .word customMotorMixer_SystemArray
 556 0030 00000000 	 .word customMotorMixer_CopyArray
 557 0034 00000000 	 .word 0
 558 0038 00000000 	 .word 0
 559              	 .section .bss.motorCount,"aw",%nobits
 562              	motorCount:
 563 0000 00       	 .space 1
 564              	 .section .bss.motorMixRange,"aw",%nobits
 565              	 .align 2
 568              	motorMixRange:
 569 0000 00000000 	 .space 4
 570              	 .comm motor,32,4
 571              	 .comm motor_disarmed,32,4
 572              	 .comm currentMixerMode,1,1
 573              	 .section .bss.currentMixer,"aw",%nobits
 574              	 .align 2
 577              	currentMixer:
 578 0000 00000000 	 .space 128
 578      00000000 
 578      00000000 
 578      00000000 
 578      00000000 
 579              	 .section .bss.throttleAngleCorrection,"aw",%nobits
 580              	 .align 2
 583              	throttleAngleCorrection:
 584 0000 00000000 	 .space 4
 585              	 .section .rodata.mixerQuadX,"a",%progbits
 586              	 .align 2
 589              	mixerQuadX:
 590 0000 0000803F 	 .word 1065353216
 591 0004 000080BF 	 .word -1082130432
 592 0008 0000803F 	 .word 1065353216
 593 000c 000080BF 	 .word -1082130432
 594 0010 0000803F 	 .word 1065353216
 595 0014 000080BF 	 .word -1082130432
 596 0018 000080BF 	 .word -1082130432
 597 001c 0000803F 	 .word 1065353216
 598 0020 0000803F 	 .word 1065353216
 599 0024 0000803F 	 .word 1065353216
 600 0028 0000803F 	 .word 1065353216
 601 002c 0000803F 	 .word 1065353216
 602 0030 0000803F 	 .word 1065353216
 603 0034 0000803F 	 .word 1065353216
 604 0038 000080BF 	 .word -1082130432
 605 003c 000080BF 	 .word -1082130432
 606              	 .section .rodata.mixerTricopter,"a",%progbits
 607              	 .align 2
 610              	mixerTricopter:
 611 0000 0000803F 	 .word 1065353216
 612 0004 00000000 	 .word 0
 613 0008 A8AAAA3F 	 .word 1068149416
 614 000c 00000000 	 .word 0
 615 0010 0000803F 	 .word 1065353216
 616 0014 000080BF 	 .word -1082130432
 617 0018 B0AA2ABF 	 .word -1087722832
 618 001c 00000000 	 .word 0
 619 0020 0000803F 	 .word 1065353216
 620 0024 0000803F 	 .word 1065353216
 621 0028 B0AA2ABF 	 .word -1087722832
 622 002c 00000000 	 .word 0
 623              	 .section .rodata.mixerQuadP,"a",%progbits
 624              	 .align 2
 627              	mixerQuadP:
 628 0000 0000803F 	 .word 1065353216
 629 0004 00000000 	 .word 0
 630 0008 0000803F 	 .word 1065353216
 631 000c 000080BF 	 .word -1082130432
 632 0010 0000803F 	 .word 1065353216
 633 0014 000080BF 	 .word -1082130432
 634 0018 00000000 	 .word 0
 635 001c 0000803F 	 .word 1065353216
 636 0020 0000803F 	 .word 1065353216
 637 0024 0000803F 	 .word 1065353216
 638 0028 00000000 	 .word 0
 639 002c 0000803F 	 .word 1065353216
 640 0030 0000803F 	 .word 1065353216
 641 0034 00000000 	 .word 0
 642 0038 000080BF 	 .word -1082130432
 643 003c 000080BF 	 .word -1082130432
 644              	 .section .rodata.mixerBicopter,"a",%progbits
 645              	 .align 2
 648              	mixerBicopter:
 649 0000 0000803F 	 .word 1065353216
 650 0004 0000803F 	 .word 1065353216
 651 0008 00000000 	 .word 0
 652 000c 00000000 	 .word 0
 653 0010 0000803F 	 .word 1065353216
 654 0014 000080BF 	 .word -1082130432
 655 0018 00000000 	 .word 0
 656 001c 00000000 	 .word 0
 657              	 .section .rodata.mixerY4,"a",%progbits
 658              	 .align 2
 661              	mixerY4:
 662 0000 0000803F 	 .word 1065353216
 663 0004 00000000 	 .word 0
 664 0008 0000803F 	 .word 1065353216
 665 000c 000080BF 	 .word -1082130432
 666 0010 0000803F 	 .word 1065353216
 667 0014 000080BF 	 .word -1082130432
 668 0018 000080BF 	 .word -1082130432
 669 001c 00000000 	 .word 0
 670 0020 0000803F 	 .word 1065353216
 671 0024 00000000 	 .word 0
 672 0028 0000803F 	 .word 1065353216
 673 002c 0000803F 	 .word 1065353216
 674 0030 0000803F 	 .word 1065353216
 675 0034 0000803F 	 .word 1065353216
 676 0038 000080BF 	 .word -1082130432
 677 003c 00000000 	 .word 0
 678              	 .section .rodata.mixerHex6X,"a",%progbits
 679              	 .align 2
 682              	mixerHex6X:
 683 0000 0000803F 	 .word 1065353216
 684 0004 000000BF 	 .word -1090519040
 685 0008 D0B35D3F 	 .word 1063105488
 686 000c 0000803F 	 .word 1065353216
 687 0010 0000803F 	 .word 1065353216
 688 0014 000000BF 	 .word -1090519040
 689 0018 D0B35DBF 	 .word -1084378160
 690 001c 0000803F 	 .word 1065353216
 691 0020 0000803F 	 .word 1065353216
 692 0024 0000003F 	 .word 1056964608
 693 0028 D0B35D3F 	 .word 1063105488
 694 002c 000080BF 	 .word -1082130432
 695 0030 0000803F 	 .word 1065353216
 696 0034 0000003F 	 .word 1056964608
 697 0038 D0B35DBF 	 .word -1084378160
 698 003c 000080BF 	 .word -1082130432
 699 0040 0000803F 	 .word 1065353216
 700 0044 000080BF 	 .word -1082130432
 701 0048 00000000 	 .word 0
 702 004c 000080BF 	 .word -1082130432
 703 0050 0000803F 	 .word 1065353216
 704 0054 0000803F 	 .word 1065353216
 705 0058 00000000 	 .word 0
 706 005c 0000803F 	 .word 1065353216
 707              	 .section .rodata.mixerHex6H,"a",%progbits
 708              	 .align 2
 711              	mixerHex6H:
 712 0000 0000803F 	 .word 1065353216
 713 0004 000080BF 	 .word -1082130432
 714 0008 0000803F 	 .word 1065353216
 715 000c 000080BF 	 .word -1082130432
 716 0010 0000803F 	 .word 1065353216
 717 0014 000080BF 	 .word -1082130432
 718 0018 000080BF 	 .word -1082130432
 719 001c 0000803F 	 .word 1065353216
 720 0020 0000803F 	 .word 1065353216
 721 0024 0000803F 	 .word 1065353216
 722 0028 0000803F 	 .word 1065353216
 723 002c 0000803F 	 .word 1065353216
 724 0030 0000803F 	 .word 1065353216
 725 0034 0000803F 	 .word 1065353216
 726 0038 000080BF 	 .word -1082130432
 727 003c 000080BF 	 .word -1082130432
 728 0040 0000803F 	 .word 1065353216
 729 0044 00000000 	 .word 0
 730 0048 00000000 	 .word 0
 731 004c 00000000 	 .word 0
 732 0050 0000803F 	 .word 1065353216
 733 0054 00000000 	 .word 0
 734 0058 00000000 	 .word 0
 735 005c 00000000 	 .word 0
 736              	 .section .rodata.mixerHex6P,"a",%progbits
 737              	 .align 2
 740              	mixerHex6P:
 741 0000 0000803F 	 .word 1065353216
 742 0004 D0B35DBF 	 .word -1084378160
 743 0008 0000003F 	 .word 1056964608
 744 000c 0000803F 	 .word 1065353216
 745 0010 0000803F 	 .word 1065353216
 746 0014 D0B35DBF 	 .word -1084378160
 747 0018 000000BF 	 .word -1090519040
 748 001c 000080BF 	 .word -1082130432
 749 0020 0000803F 	 .word 1065353216
 750 0024 D0B35D3F 	 .word 1063105488
 751 0028 0000003F 	 .word 1056964608
 752 002c 0000803F 	 .word 1065353216
 753 0030 0000803F 	 .word 1065353216
 754 0034 D0B35D3F 	 .word 1063105488
 755 0038 000000BF 	 .word -1090519040
 756 003c 000080BF 	 .word -1082130432
 757 0040 0000803F 	 .word 1065353216
 758 0044 00000000 	 .word 0
 759 0048 000080BF 	 .word -1082130432
 760 004c 0000803F 	 .word 1065353216
 761 0050 0000803F 	 .word 1065353216
 762 0054 00000000 	 .word 0
 763 0058 0000803F 	 .word 1065353216
 764 005c 000080BF 	 .word -1082130432
 765              	 .section .rodata.mixerY6,"a",%progbits
 766              	 .align 2
 769              	mixerY6:
 770 0000 0000803F 	 .word 1065353216
 771 0004 00000000 	 .word 0
 772 0008 A8AAAA3F 	 .word 1068149416
 773 000c 0000803F 	 .word 1065353216
 774 0010 0000803F 	 .word 1065353216
 775 0014 000080BF 	 .word -1082130432
 776 0018 B0AA2ABF 	 .word -1087722832
 777 001c 000080BF 	 .word -1082130432
 778 0020 0000803F 	 .word 1065353216
 779 0024 0000803F 	 .word 1065353216
 780 0028 B0AA2ABF 	 .word -1087722832
 781 002c 000080BF 	 .word -1082130432
 782 0030 0000803F 	 .word 1065353216
 783 0034 00000000 	 .word 0
 784 0038 A8AAAA3F 	 .word 1068149416
 785 003c 000080BF 	 .word -1082130432
 786 0040 0000803F 	 .word 1065353216
 787 0044 000080BF 	 .word -1082130432
 788 0048 B0AA2ABF 	 .word -1087722832
 789 004c 0000803F 	 .word 1065353216
 790 0050 0000803F 	 .word 1065353216
 791 0054 0000803F 	 .word 1065353216
 792 0058 B0AA2ABF 	 .word -1087722832
 793 005c 0000803F 	 .word 1065353216
 794              	 .section .rodata.mixerOctoX8,"a",%progbits
 795              	 .align 2
 798              	mixerOctoX8:
 799 0000 0000803F 	 .word 1065353216
 800 0004 000080BF 	 .word -1082130432
 801 0008 0000803F 	 .word 1065353216
 802 000c 000080BF 	 .word -1082130432
 803 0010 0000803F 	 .word 1065353216
 804 0014 000080BF 	 .word -1082130432
 805 0018 000080BF 	 .word -1082130432
 806 001c 0000803F 	 .word 1065353216
 807 0020 0000803F 	 .word 1065353216
 808 0024 0000803F 	 .word 1065353216
 809 0028 0000803F 	 .word 1065353216
 810 002c 0000803F 	 .word 1065353216
 811 0030 0000803F 	 .word 1065353216
 812 0034 0000803F 	 .word 1065353216
 813 0038 000080BF 	 .word -1082130432
 814 003c 000080BF 	 .word -1082130432
 815 0040 0000803F 	 .word 1065353216
 816 0044 000080BF 	 .word -1082130432
 817 0048 0000803F 	 .word 1065353216
 818 004c 0000803F 	 .word 1065353216
 819 0050 0000803F 	 .word 1065353216
 820 0054 000080BF 	 .word -1082130432
 821 0058 000080BF 	 .word -1082130432
 822 005c 000080BF 	 .word -1082130432
 823 0060 0000803F 	 .word 1065353216
 824 0064 0000803F 	 .word 1065353216
 825 0068 0000803F 	 .word 1065353216
 826 006c 000080BF 	 .word -1082130432
 827 0070 0000803F 	 .word 1065353216
 828 0074 0000803F 	 .word 1065353216
 829 0078 000080BF 	 .word -1082130432
 830 007c 0000803F 	 .word 1065353216
 831              	 .section .rodata.mixerOctoFlatP,"a",%progbits
 832              	 .align 2
 835              	mixerOctoFlatP:
 836 0000 0000803F 	 .word 1065353216
 837 0004 F704353F 	 .word 1060439287
 838 0008 F70435BF 	 .word -1087044361
 839 000c 0000803F 	 .word 1065353216
 840 0010 0000803F 	 .word 1065353216
 841 0014 F70435BF 	 .word -1087044361
 842 0018 F70435BF 	 .word -1087044361
 843 001c 0000803F 	 .word 1065353216
 844 0020 0000803F 	 .word 1065353216
 845 0024 F70435BF 	 .word -1087044361
 846 0028 F704353F 	 .word 1060439287
 847 002c 0000803F 	 .word 1065353216
 848 0030 0000803F 	 .word 1065353216
 849 0034 F704353F 	 .word 1060439287
 850 0038 F704353F 	 .word 1060439287
 851 003c 0000803F 	 .word 1065353216
 852 0040 0000803F 	 .word 1065353216
 853 0044 00000000 	 .word 0
 854 0048 000080BF 	 .word -1082130432
 855 004c 000080BF 	 .word -1082130432
 856 0050 0000803F 	 .word 1065353216
 857 0054 000080BF 	 .word -1082130432
 858 0058 00000000 	 .word 0
 859 005c 000080BF 	 .word -1082130432
 860 0060 0000803F 	 .word 1065353216
 861 0064 00000000 	 .word 0
 862 0068 0000803F 	 .word 1065353216
 863 006c 000080BF 	 .word -1082130432
 864 0070 0000803F 	 .word 1065353216
 865 0074 0000803F 	 .word 1065353216
 866 0078 00000000 	 .word 0
 867 007c 000080BF 	 .word -1082130432
 868              	 .section .rodata.mixerOctoFlatX,"a",%progbits
 869              	 .align 2
 872              	mixerOctoFlatX:
 873 0000 0000803F 	 .word 1065353216
 874 0004 0000803F 	 .word 1065353216
 875 0008 240FD4BE 	 .word -1093398748
 876 000c 0000803F 	 .word 1065353216
 877 0010 0000803F 	 .word 1065353216
 878 0014 240FD4BE 	 .word -1093398748
 879 0018 000080BF 	 .word -1082130432
 880 001c 0000803F 	 .word 1065353216
 881 0020 0000803F 	 .word 1065353216
 882 0024 000080BF 	 .word -1082130432
 883 0028 240FD43E 	 .word 1054084900
 884 002c 0000803F 	 .word 1065353216
 885 0030 0000803F 	 .word 1065353216
 886 0034 240FD43E 	 .word 1054084900
 887 0038 0000803F 	 .word 1065353216
 888 003c 0000803F 	 .word 1065353216
 889 0040 0000803F 	 .word 1065353216
 890 0044 240FD43E 	 .word 1054084900
 891 0048 000080BF 	 .word -1082130432
 892 004c 000080BF 	 .word -1082130432
 893 0050 0000803F 	 .word 1065353216
 894 0054 000080BF 	 .word -1082130432
 895 0058 240FD4BE 	 .word -1093398748
 896 005c 000080BF 	 .word -1082130432
 897 0060 0000803F 	 .word 1065353216
 898 0064 240FD4BE 	 .word -1093398748
 899 0068 0000803F 	 .word 1065353216
 900 006c 000080BF 	 .word -1082130432
 901 0070 0000803F 	 .word 1065353216
 902 0074 0000803F 	 .word 1065353216
 903 0078 240FD43E 	 .word 1054084900
 904 007c 000080BF 	 .word -1082130432
 905              	 .section .rodata.mixerVtail4,"a",%progbits
 906              	 .align 2
 909              	mixerVtail4:
 910 0000 0000803F 	 .word 1065353216
 911 0004 E17A14BF 	 .word -1089176863
 912 0008 E17A143F 	 .word 1058306785
 913 000c 0000803F 	 .word 1065353216
 914 0010 0000803F 	 .word 1065353216
 915 0014 1F85EBBE 	 .word -1091861217
 916 0018 14AEC7BE 	 .word -1094210028
 917 001c 000000BF 	 .word -1090519040
 918 0020 0000803F 	 .word 1065353216
 919 0024 E17A143F 	 .word 1058306785
 920 0028 E17A143F 	 .word 1058306785
 921 002c 000080BF 	 .word -1082130432
 922 0030 0000803F 	 .word 1065353216
 923 0034 1F85EB3E 	 .word 1055622431
 924 0038 14AEC7BE 	 .word -1094210028
 925 003c 0000003F 	 .word 1056964608
 926              	 .section .rodata.mixerAtail4,"a",%progbits
 927              	 .align 2
 930              	mixerAtail4:
 931 0000 0000803F 	 .word 1065353216
 932 0004 E17A14BF 	 .word -1089176863
 933 0008 E17A143F 	 .word 1058306785
 934 000c 000080BF 	 .word -1082130432
 935 0010 0000803F 	 .word 1065353216
 936 0014 1F85EBBE 	 .word -1091861217
 937 0018 14AEC7BE 	 .word -1094210028
 938 001c 0000003F 	 .word 1056964608
 939 0020 0000803F 	 .word 1065353216
 940 0024 E17A143F 	 .word 1058306785
 941 0028 E17A143F 	 .word 1058306785
 942 002c 0000803F 	 .word 1065353216
 943 0030 0000803F 	 .word 1065353216
 944 0034 1F85EB3E 	 .word 1055622431
 945 0038 14AEC7BE 	 .word -1094210028
 946 003c 000000BF 	 .word -1090519040
 947              	 .section .rodata.mixerDualcopter,"a",%progbits
 948              	 .align 2
 951              	mixerDualcopter:
 952 0000 0000803F 	 .word 1065353216
 953 0004 00000000 	 .word 0
 954 0008 00000000 	 .word 0
 955 000c 000080BF 	 .word -1082130432
 956 0010 0000803F 	 .word 1065353216
 957 0014 00000000 	 .word 0
 958 0018 00000000 	 .word 0
 959 001c 0000803F 	 .word 1065353216
 960              	 .section .rodata.mixerSingleProp,"a",%progbits
 961              	 .align 2
 964              	mixerSingleProp:
 965 0000 0000803F 	 .word 1065353216
 966 0004 00000000 	 .word 0
 967 0008 00000000 	 .word 0
 968 000c 00000000 	 .word 0
 969              	 .section .rodata.mixerQuadX1234,"a",%progbits
 970              	 .align 2
 973              	mixerQuadX1234:
 974 0000 0000803F 	 .word 1065353216
 975 0004 0000803F 	 .word 1065353216
 976 0008 000080BF 	 .word -1082130432
 977 000c 000080BF 	 .word -1082130432
 978 0010 0000803F 	 .word 1065353216
 979 0014 000080BF 	 .word -1082130432
 980 0018 000080BF 	 .word -1082130432
 981 001c 0000803F 	 .word 1065353216
 982 0020 0000803F 	 .word 1065353216
 983 0024 000080BF 	 .word -1082130432
 984 0028 0000803F 	 .word 1065353216
 985 002c 000080BF 	 .word -1082130432
 986 0030 0000803F 	 .word 1065353216
 987 0034 0000803F 	 .word 1065353216
 988 0038 0000803F 	 .word 1065353216
 989 003c 0000803F 	 .word 1065353216
 990              	 .global mixers
 991              	 .section .rodata.mixers,"a",%progbits
 992              	 .align 2
 995              	mixers:
 996 0000 00       	 .byte 0
 997 0001 00       	 .byte 0
 998 0002 00000000 	 .4byte 0
 999 0006 03       	 .byte 3
 1000 0007 01       	 .byte 1
 1001 0008 00000000 	 .4byte mixerTricopter
 1002 000c 04       	 .byte 4
 1003 000d 00       	 .byte 0
 1004 000e 00000000 	 .4byte mixerQuadP
 1005 0012 04       	 .byte 4
 1006 0013 00       	 .byte 0
 1007 0014 00000000 	 .4byte mixerQuadX
 1008 0018 02       	 .byte 2
 1009 0019 01       	 .byte 1
 1010 001a 00000000 	 .4byte mixerBicopter
 1011 001e 00       	 .byte 0
 1012 001f 01       	 .byte 1
 1013 0020 00000000 	 .4byte 0
 1014 0024 06       	 .byte 6
 1015 0025 00       	 .byte 0
 1016 0026 00000000 	 .4byte mixerY6
 1017 002a 06       	 .byte 6
 1018 002b 00       	 .byte 0
 1019 002c 00000000 	 .4byte mixerHex6P
 1020 0030 01       	 .byte 1
 1021 0031 01       	 .byte 1
 1022 0032 00000000 	 .4byte mixerSingleProp
 1023 0036 04       	 .byte 4
 1024 0037 00       	 .byte 0
 1025 0038 00000000 	 .4byte mixerY4
 1026 003c 06       	 .byte 6
 1027 003d 00       	 .byte 0
 1028 003e 00000000 	 .4byte mixerHex6X
 1029 0042 08       	 .byte 8
 1030 0043 00       	 .byte 0
 1031 0044 00000000 	 .4byte mixerOctoX8
 1032 0048 08       	 .byte 8
 1033 0049 00       	 .byte 0
 1034 004a 00000000 	 .4byte mixerOctoFlatP
 1035 004e 08       	 .byte 8
 1036 004f 00       	 .byte 0
 1037 0050 00000000 	 .4byte mixerOctoFlatX
 1038 0054 01       	 .byte 1
 1039 0055 01       	 .byte 1
 1040 0056 00000000 	 .4byte mixerSingleProp
 1041 005a 01       	 .byte 1
 1042 005b 01       	 .byte 1
 1043 005c 00000000 	 .4byte mixerSingleProp
 1044 0060 00       	 .byte 0
 1045 0061 01       	 .byte 1
 1046 0062 00000000 	 .4byte 0
 1047 0066 04       	 .byte 4
 1048 0067 00       	 .byte 0
 1049 0068 00000000 	 .4byte mixerVtail4
 1050 006c 06       	 .byte 6
 1051 006d 00       	 .byte 0
 1052 006e 00000000 	 .4byte mixerHex6H
 1053 0072 00       	 .byte 0
 1054 0073 01       	 .byte 1
 1055 0074 00000000 	 .4byte 0
 1056 0078 02       	 .byte 2
 1057 0079 01       	 .byte 1
 1058 007a 00000000 	 .4byte mixerDualcopter
 1059 007e 01       	 .byte 1
 1060 007f 01       	 .byte 1
 1061 0080 00000000 	 .4byte 0
 1062 0084 04       	 .byte 4
 1063 0085 00       	 .byte 0
 1064 0086 00000000 	 .4byte mixerAtail4
 1065 008a 00       	 .byte 0
 1066 008b 00       	 .byte 0
 1067 008c 00000000 	 .4byte 0
 1068 0090 02       	 .byte 2
 1069 0091 01       	 .byte 1
 1070 0092 00000000 	 .4byte 0
 1071 0096 03       	 .byte 3
 1072 0097 01       	 .byte 1
 1073 0098 00000000 	 .4byte 0
 1074 009c 04       	 .byte 4
 1075 009d 00       	 .byte 0
 1076 009e 00000000 	 .4byte mixerQuadX1234
 1077              	 .comm motorOutputHigh,4,4
 1078              	 .comm motorOutputLow,4,4
 1079 00a2 0000     	 .section .bss.disarmMotorOutput,"aw",%nobits
 1080              	 .align 2
 1083              	disarmMotorOutput:
 1084 0000 00000000 	 .space 4
 1085              	 .section .bss.deadbandMotor3dHigh,"aw",%nobits
 1086              	 .align 2
 1089              	deadbandMotor3dHigh:
 1090 0000 00000000 	 .space 4
 1091              	 .section .bss.deadbandMotor3dLow,"aw",%nobits
 1092              	 .align 2
 1095              	deadbandMotor3dLow:
 1096 0000 00000000 	 .space 4
 1097              	 .section .bss.rcCommand3dDeadBandLow,"aw",%nobits
 1098              	 .align 1
 1101              	rcCommand3dDeadBandLow:
 1102 0000 0000     	 .space 2
 1103              	 .section .bss.rcCommand3dDeadBandHigh,"aw",%nobits
 1104              	 .align 1
 1107              	rcCommand3dDeadBandHigh:
 1108 0000 0000     	 .space 2
 1109              	 .section .bss.rcCommandThrottleRange,"aw",%nobits
 1110              	 .align 2
 1113              	rcCommandThrottleRange:
 1114 0000 00000000 	 .space 4
 1115              	 .section .bss.rcCommandThrottleRange3dLow,"aw",%nobits
 1116              	 .align 2
 1119              	rcCommandThrottleRange3dLow:
 1120 0000 00000000 	 .space 4
 1121              	 .section .bss.rcCommandThrottleRange3dHigh,"aw",%nobits
 1122              	 .align 2
 1125              	rcCommandThrottleRange3dHigh:
 1126 0000 00000000 	 .space 4
 1127              	 .section .text.getMotorCount,"ax",%progbits
 1128              	 .align 2
 1129              	 .global getMotorCount
 1130              	 .thumb
 1131              	 .thumb_func
 1133              	getMotorCount:
 1134              	.LFB589:
 115:../cleanflight/src/main/flight/mixer.c **** 
 116:../cleanflight/src/main/flight/mixer.c **** PG_REGISTER_ARRAY(motorMixer_t, MAX_SUPPORTED_MOTORS, customMotorMixer, PG_MOTOR_MIXER, 0);
 117:../cleanflight/src/main/flight/mixer.c **** 
 118:../cleanflight/src/main/flight/mixer.c **** #define PWM_RANGE_MID 1500
 119:../cleanflight/src/main/flight/mixer.c **** 
 120:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT uint8_t motorCount;
 121:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT float motorMixRange;
 122:../cleanflight/src/main/flight/mixer.c **** 
 123:../cleanflight/src/main/flight/mixer.c **** float FAST_RAM_ZERO_INIT motor[MAX_SUPPORTED_MOTORS];
 124:../cleanflight/src/main/flight/mixer.c **** float motor_disarmed[MAX_SUPPORTED_MOTORS];
 125:../cleanflight/src/main/flight/mixer.c **** 
 126:../cleanflight/src/main/flight/mixer.c **** mixerMode_e currentMixerMode;
 127:../cleanflight/src/main/flight/mixer.c **** static motorMixer_t currentMixer[MAX_SUPPORTED_MOTORS];
 128:../cleanflight/src/main/flight/mixer.c **** 
 129:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT int throttleAngleCorrection;
 130:../cleanflight/src/main/flight/mixer.c **** 
 131:../cleanflight/src/main/flight/mixer.c **** 
 132:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerQuadX[] = {
 133:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  1.0f, -1.0f },          // REAR_R
 134:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -1.0f,  1.0f },          // FRONT_R
 135:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  1.0f,  1.0f },          // REAR_L
 136:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -1.0f, -1.0f },          // FRONT_L
 137:../cleanflight/src/main/flight/mixer.c **** };
 138:../cleanflight/src/main/flight/mixer.c **** #ifndef USE_QUAD_MIXER_ONLY
 139:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerTricopter[] = {
 140:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  1.333333f,  0.0f },     // REAR
 141:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -0.666667f,  0.0f },     // RIGHT
 142:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -0.666667f,  0.0f },     // LEFT
 143:../cleanflight/src/main/flight/mixer.c **** };
 144:../cleanflight/src/main/flight/mixer.c **** 
 145:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerQuadP[] = {
 146:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  1.0f, -1.0f },          // REAR
 147:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  0.0f,  1.0f },          // RIGHT
 148:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  0.0f,  1.0f },          // LEFT
 149:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f, -1.0f, -1.0f },          // FRONT
 150:../cleanflight/src/main/flight/mixer.c **** };
 151:../cleanflight/src/main/flight/mixer.c **** 
 152:../cleanflight/src/main/flight/mixer.c **** #if defined(USE_UNCOMMON_MIXERS)
 153:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerBicopter[] = {
 154:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  0.0f,  0.0f },          // LEFT
 155:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  0.0f,  0.0f },          // RIGHT
 156:../cleanflight/src/main/flight/mixer.c **** };
 157:../cleanflight/src/main/flight/mixer.c **** #else
 158:../cleanflight/src/main/flight/mixer.c **** #define mixerBicopter NULL
 159:../cleanflight/src/main/flight/mixer.c **** #endif
 160:../cleanflight/src/main/flight/mixer.c **** 
 161:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerY4[] = {
 162:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  1.0f, -1.0f },          // REAR_TOP CW
 163:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -1.0f,  0.0f },          // FRONT_R CCW
 164:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  1.0f,  1.0f },          // REAR_BOTTOM CCW
 165:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -1.0f,  0.0f },          // FRONT_L CW
 166:../cleanflight/src/main/flight/mixer.c **** };
 167:../cleanflight/src/main/flight/mixer.c **** 
 168:../cleanflight/src/main/flight/mixer.c **** 
 169:../cleanflight/src/main/flight/mixer.c **** #if (MAX_SUPPORTED_MOTORS >= 6)
 170:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerHex6X[] = {
 171:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.5f,  0.866025f,  1.0f },     // REAR_R
 172:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.5f, -0.866025f,  1.0f },     // FRONT_R
 173:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.5f,  0.866025f, -1.0f },     // REAR_L
 174:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.5f, -0.866025f, -1.0f },     // FRONT_L
 175:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  0.0f,      -1.0f },     // RIGHT
 176:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  0.0f,       1.0f },     // LEFT
 177:../cleanflight/src/main/flight/mixer.c **** };
 178:../cleanflight/src/main/flight/mixer.c **** 
 179:../cleanflight/src/main/flight/mixer.c **** #if defined(USE_UNCOMMON_MIXERS)
 180:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerHex6H[] = {
 181:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  1.0f, -1.0f },     // REAR_R
 182:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -1.0f,  1.0f },     // FRONT_R
 183:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  1.0f,  1.0f },     // REAR_L
 184:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -1.0f, -1.0f },     // FRONT_L
 185:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  0.0f,  0.0f },     // RIGHT
 186:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  0.0f,  0.0f },     // LEFT
 187:../cleanflight/src/main/flight/mixer.c **** };
 188:../cleanflight/src/main/flight/mixer.c **** 
 189:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerHex6P[] = {
 190:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.866025f,  0.5f,  1.0f },     // REAR_R
 191:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.866025f, -0.5f, -1.0f },     // FRONT_R
 192:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.866025f,  0.5f,  1.0f },     // REAR_L
 193:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.866025f, -0.5f, -1.0f },     // FRONT_L
 194:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,      -1.0f,  1.0f },     // FRONT
 195:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,       1.0f, -1.0f },     // REAR
 196:../cleanflight/src/main/flight/mixer.c **** };
 197:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerY6[] = {
 198:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  1.333333f,  1.0f },     // REAR
 199:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -0.666667f, -1.0f },     // RIGHT
 200:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -0.666667f, -1.0f },     // LEFT
 201:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  1.333333f, -1.0f },     // UNDER_REAR
 202:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -0.666667f,  1.0f },     // UNDER_RIGHT
 203:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -0.666667f,  1.0f },     // UNDER_LEFT
 204:../cleanflight/src/main/flight/mixer.c **** };
 205:../cleanflight/src/main/flight/mixer.c **** #else
 206:../cleanflight/src/main/flight/mixer.c **** #define mixerHex6H NULL
 207:../cleanflight/src/main/flight/mixer.c **** #define mixerHex6P NULL
 208:../cleanflight/src/main/flight/mixer.c **** #define mixerY6 NULL
 209:../cleanflight/src/main/flight/mixer.c **** #endif // USE_UNCOMMON_MIXERS
 210:../cleanflight/src/main/flight/mixer.c **** #else
 211:../cleanflight/src/main/flight/mixer.c **** #define mixerHex6X NULL
 212:../cleanflight/src/main/flight/mixer.c **** #endif // MAX_SUPPORTED_MOTORS >= 6
 213:../cleanflight/src/main/flight/mixer.c **** 
 214:../cleanflight/src/main/flight/mixer.c **** #if defined(USE_UNCOMMON_MIXERS) && (MAX_SUPPORTED_MOTORS >= 8)
 215:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerOctoX8[] = {
 216:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  1.0f, -1.0f },          // REAR_R
 217:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -1.0f,  1.0f },          // FRONT_R
 218:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  1.0f,  1.0f },          // REAR_L
 219:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -1.0f, -1.0f },          // FRONT_L
 220:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  1.0f,  1.0f },          // UNDER_REAR_R
 221:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -1.0f, -1.0f },          // UNDER_FRONT_R
 222:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  1.0f, -1.0f },          // UNDER_REAR_L
 223:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -1.0f,  1.0f },          // UNDER_FRONT_L
 224:../cleanflight/src/main/flight/mixer.c **** };
 225:../cleanflight/src/main/flight/mixer.c **** 
 226:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerOctoFlatP[] = {
 227:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.707107f, -0.707107f,  1.0f },    // FRONT_L
 228:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.707107f, -0.707107f,  1.0f },    // FRONT_R
 229:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.707107f,  0.707107f,  1.0f },    // REAR_R
 230:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.707107f,  0.707107f,  1.0f },    // REAR_L
 231:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f, -1.0f, -1.0f },              // FRONT
 232:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  0.0f, -1.0f },              // RIGHT
 233:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  1.0f, -1.0f },              // REAR
 234:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  0.0f, -1.0f },              // LEFT
 235:../cleanflight/src/main/flight/mixer.c **** };
 236:../cleanflight/src/main/flight/mixer.c **** 
 237:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerOctoFlatX[] = {
 238:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -0.414178f,  1.0f },      // MIDFRONT_L
 239:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.414178f, -1.0f,  1.0f },      // FRONT_R
 240:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  0.414178f,  1.0f },      // MIDREAR_R
 241:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.414178f,  1.0f,  1.0f },      // REAR_L
 242:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.414178f, -1.0f, -1.0f },      // FRONT_L
 243:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -0.414178f, -1.0f },      // MIDFRONT_R
 244:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.414178f,  1.0f, -1.0f },      // REAR_R
 245:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  0.414178f, -1.0f },      // MIDREAR_L
 246:../cleanflight/src/main/flight/mixer.c **** };
 247:../cleanflight/src/main/flight/mixer.c **** #else
 248:../cleanflight/src/main/flight/mixer.c **** #define mixerOctoX8 NULL
 249:../cleanflight/src/main/flight/mixer.c **** #define mixerOctoFlatP NULL
 250:../cleanflight/src/main/flight/mixer.c **** #define mixerOctoFlatX NULL
 251:../cleanflight/src/main/flight/mixer.c **** #endif
 252:../cleanflight/src/main/flight/mixer.c **** 
 253:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerVtail4[] = {
 254:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  -0.58f,  0.58f, 1.0f },        // REAR_R
 255:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  -0.46f, -0.39f, -0.5f },       // FRONT_R
 256:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.58f,  0.58f, -1.0f },        // REAR_L
 257:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.46f, -0.39f, 0.5f },         // FRONT_L
 258:../cleanflight/src/main/flight/mixer.c **** };
 259:../cleanflight/src/main/flight/mixer.c **** 
 260:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerAtail4[] = {
 261:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.58f,  0.58f, -1.0f },          // REAR_R
 262:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -0.46f, -0.39f,  0.5f },          // FRONT_R
 263:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.58f,  0.58f,  1.0f },          // REAR_L
 264:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.46f, -0.39f, -0.5f },          // FRONT_L
 265:../cleanflight/src/main/flight/mixer.c **** };
 266:../cleanflight/src/main/flight/mixer.c **** 
 267:../cleanflight/src/main/flight/mixer.c **** #if defined(USE_UNCOMMON_MIXERS)
 268:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerDualcopter[] = {
 269:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  0.0f, -1.0f },          // LEFT
 270:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  0.0f,  1.0f },          // RIGHT
 271:../cleanflight/src/main/flight/mixer.c **** };
 272:../cleanflight/src/main/flight/mixer.c **** #else
 273:../cleanflight/src/main/flight/mixer.c **** #define mixerDualcopter NULL
 274:../cleanflight/src/main/flight/mixer.c **** #endif
 275:../cleanflight/src/main/flight/mixer.c **** 
 276:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerSingleProp[] = {
 277:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  0.0f,  0.0f, 0.0f },
 278:../cleanflight/src/main/flight/mixer.c **** };
 279:../cleanflight/src/main/flight/mixer.c **** 
 280:../cleanflight/src/main/flight/mixer.c **** static const motorMixer_t mixerQuadX1234[] = {
 281:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f, -1.0f, -1.0f },          // FRONT_L
 282:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f, -1.0f,  1.0f },          // FRONT_R
 283:../cleanflight/src/main/flight/mixer.c ****     { 1.0f, -1.0f,  1.0f, -1.0f },          // REAR_R
 284:../cleanflight/src/main/flight/mixer.c ****     { 1.0f,  1.0f,  1.0f,  1.0f },          // REAR_L
 285:../cleanflight/src/main/flight/mixer.c **** };
 286:../cleanflight/src/main/flight/mixer.c **** 
 287:../cleanflight/src/main/flight/mixer.c **** // Keep synced with mixerMode_e
 288:../cleanflight/src/main/flight/mixer.c **** const mixer_t mixers[] = {
 289:../cleanflight/src/main/flight/mixer.c ****     // motors, use servo, motor mixer
 290:../cleanflight/src/main/flight/mixer.c ****     { 0, false, NULL },                // entry 0
 291:../cleanflight/src/main/flight/mixer.c ****     { 3, true,  mixerTricopter },      // MIXER_TRI
 292:../cleanflight/src/main/flight/mixer.c ****     { 4, false, mixerQuadP },          // MIXER_QUADP
 293:../cleanflight/src/main/flight/mixer.c ****     { 4, false, mixerQuadX },          // MIXER_QUADX
 294:../cleanflight/src/main/flight/mixer.c ****     { 2, true,  mixerBicopter },       // MIXER_BICOPTER
 295:../cleanflight/src/main/flight/mixer.c ****     { 0, true,  NULL },                // * MIXER_GIMBAL
 296:../cleanflight/src/main/flight/mixer.c ****     { 6, false, mixerY6 },             // MIXER_Y6
 297:../cleanflight/src/main/flight/mixer.c ****     { 6, false, mixerHex6P },          // MIXER_HEX6
 298:../cleanflight/src/main/flight/mixer.c ****     { 1, true,  mixerSingleProp },     // * MIXER_FLYING_WING
 299:../cleanflight/src/main/flight/mixer.c ****     { 4, false, mixerY4 },             // MIXER_Y4
 300:../cleanflight/src/main/flight/mixer.c ****     { 6, false, mixerHex6X },          // MIXER_HEX6X
 301:../cleanflight/src/main/flight/mixer.c ****     { 8, false, mixerOctoX8 },         // MIXER_OCTOX8
 302:../cleanflight/src/main/flight/mixer.c ****     { 8, false, mixerOctoFlatP },      // MIXER_OCTOFLATP
 303:../cleanflight/src/main/flight/mixer.c ****     { 8, false, mixerOctoFlatX },      // MIXER_OCTOFLATX
 304:../cleanflight/src/main/flight/mixer.c ****     { 1, true,  mixerSingleProp },     // * MIXER_AIRPLANE
 305:../cleanflight/src/main/flight/mixer.c ****     { 1, true,  mixerSingleProp },     // * MIXER_HELI_120_CCPM
 306:../cleanflight/src/main/flight/mixer.c ****     { 0, true,  NULL },                // * MIXER_HELI_90_DEG
 307:../cleanflight/src/main/flight/mixer.c ****     { 4, false, mixerVtail4 },         // MIXER_VTAIL4
 308:../cleanflight/src/main/flight/mixer.c ****     { 6, false, mixerHex6H },          // MIXER_HEX6H
 309:../cleanflight/src/main/flight/mixer.c ****     { 0, true,  NULL },                // MIXER_RX_TO_SERVO
 310:../cleanflight/src/main/flight/mixer.c ****     { 2, true,  mixerDualcopter },     // MIXER_DUALCOPTER
 311:../cleanflight/src/main/flight/mixer.c ****     { 1, true,  NULL },                // MIXER_SINGLECOPTER
 312:../cleanflight/src/main/flight/mixer.c ****     { 4, false, mixerAtail4 },         // MIXER_ATAIL4
 313:../cleanflight/src/main/flight/mixer.c ****     { 0, false, NULL },                // MIXER_CUSTOM
 314:../cleanflight/src/main/flight/mixer.c ****     { 2, true,  NULL },                // MIXER_CUSTOM_AIRPLANE
 315:../cleanflight/src/main/flight/mixer.c ****     { 3, true,  NULL },                // MIXER_CUSTOM_TRI
 316:../cleanflight/src/main/flight/mixer.c ****     { 4, false, mixerQuadX1234 }       // MIXER_QUADX_1234
 317:../cleanflight/src/main/flight/mixer.c **** };
 318:../cleanflight/src/main/flight/mixer.c **** #endif // !USE_QUAD_MIXER_ONLY
 319:../cleanflight/src/main/flight/mixer.c **** 
 320:../cleanflight/src/main/flight/mixer.c **** FAST_RAM_ZERO_INIT float motorOutputHigh, motorOutputLow;
 321:../cleanflight/src/main/flight/mixer.c **** 
 322:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT float disarmMotorOutput, deadbandMotor3dHigh, deadbandMotor3dLow;
 323:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT uint16_t rcCommand3dDeadBandLow;
 324:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT uint16_t rcCommand3dDeadBandHigh;
 325:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT float rcCommandThrottleRange, rcCommandThrottleRange3dLow, rcCommandThrot
 326:../cleanflight/src/main/flight/mixer.c **** 
 327:../cleanflight/src/main/flight/mixer.c **** uint8_t getMotorCount(void)
 328:../cleanflight/src/main/flight/mixer.c **** {
 1135              	 .loc 5 328 0
 1136              	 .cfi_startproc
 1137              	 
 1138              	 
 1139              	 
 1140 0000 80B4     	 push {r7}
 1141              	.LCFI43:
 1142              	 .cfi_def_cfa_offset 4
 1143              	 .cfi_offset 7,-4
 1144 0002 00AF     	 add r7,sp,#0
 1145              	.LCFI44:
 1146              	 .cfi_def_cfa_register 7
 329:../cleanflight/src/main/flight/mixer.c ****     return motorCount;
 1147              	 .loc 5 329 0
 1148 0004 034B     	 ldr r3,.L44
 1149 0006 1B78     	 ldrb r3,[r3]
 330:../cleanflight/src/main/flight/mixer.c **** }
 1150              	 .loc 5 330 0
 1151 0008 1846     	 mov r0,r3
 1152 000a BD46     	 mov sp,r7
 1153              	.LCFI45:
 1154              	 .cfi_def_cfa_register 13
 1155              	 
 1156 000c 5DF8047B 	 ldr r7,[sp],#4
 1157              	.LCFI46:
 1158              	 .cfi_restore 7
 1159              	 .cfi_def_cfa_offset 0
 1160 0010 7047     	 bx lr
 1161              	.L45:
 1162 0012 00BF     	 .align 2
 1163              	.L44:
 1164 0014 00000000 	 .word motorCount
 1165              	 .cfi_endproc
 1166              	.LFE589:
 1168              	 .section .text.getMotorMixRange,"ax",%progbits
 1169              	 .align 2
 1170              	 .global getMotorMixRange
 1171              	 .thumb
 1172              	 .thumb_func
 1174              	getMotorMixRange:
 1175              	.LFB590:
 331:../cleanflight/src/main/flight/mixer.c **** 
 332:../cleanflight/src/main/flight/mixer.c **** float getMotorMixRange(void)
 333:../cleanflight/src/main/flight/mixer.c **** {
 1176              	 .loc 5 333 0
 1177              	 .cfi_startproc
 1178              	 
 1179              	 
 1180              	 
 1181 0000 80B4     	 push {r7}
 1182              	.LCFI47:
 1183              	 .cfi_def_cfa_offset 4
 1184              	 .cfi_offset 7,-4
 1185 0002 00AF     	 add r7,sp,#0
 1186              	.LCFI48:
 1187              	 .cfi_def_cfa_register 7
 334:../cleanflight/src/main/flight/mixer.c ****     return motorMixRange;
 1188              	 .loc 5 334 0
 1189 0004 034B     	 ldr r3,.L48
 1190 0006 1B68     	 ldr r3,[r3]
 335:../cleanflight/src/main/flight/mixer.c **** }
 1191              	 .loc 5 335 0
 1192 0008 1846     	 mov r0,r3
 1193 000a BD46     	 mov sp,r7
 1194              	.LCFI49:
 1195              	 .cfi_def_cfa_register 13
 1196              	 
 1197 000c 5DF8047B 	 ldr r7,[sp],#4
 1198              	.LCFI50:
 1199              	 .cfi_restore 7
 1200              	 .cfi_def_cfa_offset 0
 1201 0010 7047     	 bx lr
 1202              	.L49:
 1203 0012 00BF     	 .align 2
 1204              	.L48:
 1205 0014 00000000 	 .word motorMixRange
 1206              	 .cfi_endproc
 1207              	.LFE590:
 1209              	 .section .text.areMotorsRunning,"ax",%progbits
 1210              	 .align 2
 1211              	 .global areMotorsRunning
 1212              	 .thumb
 1213              	 .thumb_func
 1215              	areMotorsRunning:
 1216              	.LFB591:
 336:../cleanflight/src/main/flight/mixer.c **** 
 337:../cleanflight/src/main/flight/mixer.c **** bool areMotorsRunning(void)
 338:../cleanflight/src/main/flight/mixer.c **** {
 1217              	 .loc 5 338 0
 1218              	 .cfi_startproc
 1219              	 
 1220              	 
 1221              	 
 1222 0000 80B4     	 push {r7}
 1223              	.LCFI51:
 1224              	 .cfi_def_cfa_offset 4
 1225              	 .cfi_offset 7,-4
 1226 0002 83B0     	 sub sp,sp,#12
 1227              	.LCFI52:
 1228              	 .cfi_def_cfa_offset 16
 1229 0004 00AF     	 add r7,sp,#0
 1230              	.LCFI53:
 1231              	 .cfi_def_cfa_register 7
 339:../cleanflight/src/main/flight/mixer.c ****     bool motorsRunning = false;
 1232              	 .loc 5 339 0
 1233 0006 0023     	 movs r3,#0
 1234 0008 FB71     	 strb r3,[r7,#7]
 340:../cleanflight/src/main/flight/mixer.c ****     if (ARMING_FLAG(ARMED)) {
 1235              	 .loc 5 340 0
 1236 000a 164B     	 ldr r3,.L57
 1237 000c 1B78     	 ldrb r3,[r3]
 1238 000e 03F00103 	 and r3,r3,#1
 1239 0012 002B     	 cmp r3,#0
 1240 0014 02D0     	 beq .L51
 341:../cleanflight/src/main/flight/mixer.c ****         motorsRunning = true;
 1241              	 .loc 5 341 0
 1242 0016 0123     	 movs r3,#1
 1243 0018 FB71     	 strb r3,[r7,#7]
 1244 001a 1CE0     	 b .L52
 1245              	.L51:
 1246              	.LBB3:
 342:../cleanflight/src/main/flight/mixer.c ****     } else {
 343:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 1247              	 .loc 5 343 0
 1248 001c 0023     	 movs r3,#0
 1249 001e 3B60     	 str r3,[r7]
 1250 0020 13E0     	 b .L53
 1251              	.L55:
 344:../cleanflight/src/main/flight/mixer.c ****             if (motor_disarmed[i] != disarmMotorOutput) {
 1252              	 .loc 5 344 0
 1253 0022 114A     	 ldr r2,.L57+4
 1254 0024 3B68     	 ldr r3,[r7]
 1255 0026 9B00     	 lsls r3,r3,#2
 1256 0028 1344     	 add r3,r3,r2
 1257 002a 93ED007A 	 flds s14,[r3]
 1258 002e 0F4B     	 ldr r3,.L57+8
 1259 0030 D3ED007A 	 flds s15,[r3]
 1260 0034 B4EE677A 	 fcmps s14,s15
 1261 0038 F1EE10FA 	 fmstat
 1262 003c 02D0     	 beq .L54
 345:../cleanflight/src/main/flight/mixer.c ****                 motorsRunning = true;
 1263              	 .loc 5 345 0
 1264 003e 0123     	 movs r3,#1
 1265 0040 FB71     	 strb r3,[r7,#7]
 346:../cleanflight/src/main/flight/mixer.c **** 
 347:../cleanflight/src/main/flight/mixer.c ****                 break;
 1266              	 .loc 5 347 0
 1267 0042 08E0     	 b .L52
 1268              	.L54:
 343:../cleanflight/src/main/flight/mixer.c ****             if (motor_disarmed[i] != disarmMotorOutput) {
 1269              	 .loc 5 343 0 discriminator 2
 1270 0044 3B68     	 ldr r3,[r7]
 1271 0046 0133     	 adds r3,r3,#1
 1272 0048 3B60     	 str r3,[r7]
 1273              	.L53:
 343:../cleanflight/src/main/flight/mixer.c ****             if (motor_disarmed[i] != disarmMotorOutput) {
 1274              	 .loc 5 343 0 is_stmt 0 discriminator 1
 1275 004a 094B     	 ldr r3,.L57+12
 1276 004c 1B78     	 ldrb r3,[r3]
 1277 004e 1A46     	 mov r2,r3
 1278 0050 3B68     	 ldr r3,[r7]
 1279 0052 9A42     	 cmp r2,r3
 1280 0054 E5DC     	 bgt .L55
 1281              	.L52:
 1282              	.LBE3:
 348:../cleanflight/src/main/flight/mixer.c ****             }
 349:../cleanflight/src/main/flight/mixer.c ****         }
 350:../cleanflight/src/main/flight/mixer.c ****     }
 351:../cleanflight/src/main/flight/mixer.c **** 
 352:../cleanflight/src/main/flight/mixer.c ****     return motorsRunning;
 1283              	 .loc 5 352 0 is_stmt 1
 1284 0056 FB79     	 ldrb r3,[r7,#7]
 353:../cleanflight/src/main/flight/mixer.c **** }
 1285              	 .loc 5 353 0
 1286 0058 1846     	 mov r0,r3
 1287 005a 0C37     	 adds r7,r7,#12
 1288              	.LCFI54:
 1289              	 .cfi_def_cfa_offset 4
 1290 005c BD46     	 mov sp,r7
 1291              	.LCFI55:
 1292              	 .cfi_def_cfa_register 13
 1293              	 
 1294 005e 5DF8047B 	 ldr r7,[sp],#4
 1295              	.LCFI56:
 1296              	 .cfi_restore 7
 1297              	 .cfi_def_cfa_offset 0
 1298 0062 7047     	 bx lr
 1299              	.L58:
 1300              	 .align 2
 1301              	.L57:
 1302 0064 00000000 	 .word armingFlags
 1303 0068 00000000 	 .word motor_disarmed
 1304 006c 00000000 	 .word disarmMotorOutput
 1305 0070 00000000 	 .word motorCount
 1306              	 .cfi_endproc
 1307              	.LFE591:
 1309              	 .section .text.mixerIsTricopter,"ax",%progbits
 1310              	 .align 2
 1311              	 .global mixerIsTricopter
 1312              	 .thumb
 1313              	 .thumb_func
 1315              	mixerIsTricopter:
 1316              	.LFB592:
 354:../cleanflight/src/main/flight/mixer.c **** 
 355:../cleanflight/src/main/flight/mixer.c **** bool mixerIsTricopter(void)
 356:../cleanflight/src/main/flight/mixer.c **** {
 1317              	 .loc 5 356 0
 1318              	 .cfi_startproc
 1319              	 
 1320              	 
 1321              	 
 1322 0000 80B4     	 push {r7}
 1323              	.LCFI57:
 1324              	 .cfi_def_cfa_offset 4
 1325              	 .cfi_offset 7,-4
 1326 0002 00AF     	 add r7,sp,#0
 1327              	.LCFI58:
 1328              	 .cfi_def_cfa_register 7
 357:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_SERVOS
 358:../cleanflight/src/main/flight/mixer.c ****     return (currentMixerMode == MIXER_TRI || currentMixerMode == MIXER_CUSTOM_TRI);
 1329              	 .loc 5 358 0
 1330 0004 094B     	 ldr r3,.L64
 1331 0006 1B78     	 ldrb r3,[r3]
 1332 0008 012B     	 cmp r3,#1
 1333 000a 03D0     	 beq .L60
 1334              	 .loc 5 358 0 is_stmt 0 discriminator 2
 1335 000c 074B     	 ldr r3,.L64
 1336 000e 1B78     	 ldrb r3,[r3]
 1337 0010 192B     	 cmp r3,#25
 1338 0012 01D1     	 bne .L61
 1339              	.L60:
 1340              	 .loc 5 358 0 discriminator 3
 1341 0014 0123     	 movs r3,#1
 1342 0016 00E0     	 b .L62
 1343              	.L61:
 1344              	 .loc 5 358 0 discriminator 4
 1345 0018 0023     	 movs r3,#0
 1346              	.L62:
 1347              	 .loc 5 358 0 discriminator 6
 1348 001a 03F00103 	 and r3,r3,#1
 1349 001e DBB2     	 uxtb r3,r3
 359:../cleanflight/src/main/flight/mixer.c **** #else
 360:../cleanflight/src/main/flight/mixer.c ****     return false;
 361:../cleanflight/src/main/flight/mixer.c **** #endif
 362:../cleanflight/src/main/flight/mixer.c **** }
 1350              	 .loc 5 362 0 is_stmt 1 discriminator 6
 1351 0020 1846     	 mov r0,r3
 1352 0022 BD46     	 mov sp,r7
 1353              	.LCFI59:
 1354              	 .cfi_def_cfa_register 13
 1355              	 
 1356 0024 5DF8047B 	 ldr r7,[sp],#4
 1357              	.LCFI60:
 1358              	 .cfi_restore 7
 1359              	 .cfi_def_cfa_offset 0
 1360 0028 7047     	 bx lr
 1361              	.L65:
 1362 002a 00BF     	 .align 2
 1363              	.L64:
 1364 002c 00000000 	 .word currentMixerMode
 1365              	 .cfi_endproc
 1366              	.LFE592:
 1368              	 .section .text.mixerIsOutputSaturated,"ax",%progbits
 1369              	 .align 2
 1370              	 .global mixerIsOutputSaturated
 1371              	 .thumb
 1372              	 .thumb_func
 1374              	mixerIsOutputSaturated:
 1375              	.LFB593:
 363:../cleanflight/src/main/flight/mixer.c **** 
 364:../cleanflight/src/main/flight/mixer.c **** bool mixerIsOutputSaturated(int axis, float errorRate)
 365:../cleanflight/src/main/flight/mixer.c **** {
 1376              	 .loc 5 365 0
 1377              	 .cfi_startproc
 1378              	 
 1379              	 
 1380 0000 80B5     	 push {r7,lr}
 1381              	.LCFI61:
 1382              	 .cfi_def_cfa_offset 8
 1383              	 .cfi_offset 7,-8
 1384              	 .cfi_offset 14,-4
 1385 0002 82B0     	 sub sp,sp,#8
 1386              	.LCFI62:
 1387              	 .cfi_def_cfa_offset 16
 1388 0004 00AF     	 add r7,sp,#0
 1389              	.LCFI63:
 1390              	 .cfi_def_cfa_register 7
 1391 0006 7860     	 str r0,[r7,#4]
 1392 0008 3960     	 str r1,[r7]
 366:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_SERVOS
 367:../cleanflight/src/main/flight/mixer.c ****     if (axis == FD_YAW && mixerIsTricopter()) {
 1393              	 .loc 5 367 0
 1394 000a 7B68     	 ldr r3,[r7,#4]
 1395 000c 022B     	 cmp r3,#2
 1396 000e 09D1     	 bne .L67
 1397              	 .loc 5 367 0 is_stmt 0 discriminator 1
 1398 0010 FFF7FEFF 	 bl mixerIsTricopter
 1399 0014 0346     	 mov r3,r0
 1400 0016 002B     	 cmp r3,#0
 1401 0018 04D0     	 beq .L67
 368:../cleanflight/src/main/flight/mixer.c ****         return mixerTricopterIsServoSaturated(errorRate);
 1402              	 .loc 5 368 0 is_stmt 1
 1403 001a 3868     	 ldr r0,[r7]
 1404 001c FFF7FEFF 	 bl mixerTricopterIsServoSaturated
 1405 0020 0346     	 mov r3,r0
 1406 0022 0CE0     	 b .L68
 1407              	.L67:
 369:../cleanflight/src/main/flight/mixer.c ****     }
 370:../cleanflight/src/main/flight/mixer.c **** #else
 371:../cleanflight/src/main/flight/mixer.c ****     UNUSED(axis);
 372:../cleanflight/src/main/flight/mixer.c ****     UNUSED(errorRate);
 373:../cleanflight/src/main/flight/mixer.c **** #endif
 374:../cleanflight/src/main/flight/mixer.c **** 
 375:../cleanflight/src/main/flight/mixer.c ****     return motorMixRange >= 1.0f;
 1408              	 .loc 5 375 0
 1409 0024 084B     	 ldr r3,.L69
 1410 0026 D3ED007A 	 flds s15,[r3]
 1411 002a B7EE007A 	 fconsts s14,#112
 1412 002e F4EEC77A 	 fcmpes s15,s14
 1413 0032 F1EE10FA 	 fmstat
 1414 0036 ACBF     	 ite ge
 1415 0038 0123     	 movge r3,#1
 1416 003a 0023     	 movlt r3,#0
 1417 003c DBB2     	 uxtb r3,r3
 1418              	.L68:
 376:../cleanflight/src/main/flight/mixer.c **** }
 1419              	 .loc 5 376 0
 1420 003e 1846     	 mov r0,r3
 1421 0040 0837     	 adds r7,r7,#8
 1422              	.LCFI64:
 1423              	 .cfi_def_cfa_offset 8
 1424 0042 BD46     	 mov sp,r7
 1425              	.LCFI65:
 1426              	 .cfi_def_cfa_register 13
 1427              	 
 1428 0044 80BD     	 pop {r7,pc}
 1429              	.L70:
 1430 0046 00BF     	 .align 2
 1431              	.L69:
 1432 0048 00000000 	 .word motorMixRange
 1433              	 .cfi_endproc
 1434              	.LFE593:
 1436              	 .section .text.initEscEndpoints,"ax",%progbits
 1437              	 .align 2
 1438              	 .global initEscEndpoints
 1439              	 .thumb
 1440              	 .thumb_func
 1442              	initEscEndpoints:
 1443              	.LFB594:
 377:../cleanflight/src/main/flight/mixer.c **** 
 378:../cleanflight/src/main/flight/mixer.c **** // All PWM motor scaling is done to standard PWM range of 1000-2000 for easier tick conversion with
 379:../cleanflight/src/main/flight/mixer.c **** // DSHOT scaling is done to the actual dshot range
 380:../cleanflight/src/main/flight/mixer.c **** void initEscEndpoints(void)
 381:../cleanflight/src/main/flight/mixer.c **** {
 1444              	 .loc 5 381 0
 1445              	 .cfi_startproc
 1446              	 
 1447              	 
 1448 0000 98B5     	 push {r3,r4,r7,lr}
 1449              	.LCFI66:
 1450              	 .cfi_def_cfa_offset 16
 1451              	 .cfi_offset 3,-16
 1452              	 .cfi_offset 4,-12
 1453              	 .cfi_offset 7,-8
 1454              	 .cfi_offset 14,-4
 1455 0002 00AF     	 add r7,sp,#0
 1456              	.LCFI67:
 1457              	 .cfi_def_cfa_register 7
 382:../cleanflight/src/main/flight/mixer.c ****     // Can't use 'isMotorProtocolDshot()' here since motors haven't been initialised yet
 383:../cleanflight/src/main/flight/mixer.c ****     switch (motorConfig()->dev.motorPwmProtocol) {
 1458              	 .loc 5 383 0
 1459 0004 FFF7FEFF 	 bl motorConfig
 384:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_DSHOT
 385:../cleanflight/src/main/flight/mixer.c ****     case PWM_TYPE_PROSHOT1000:
 386:../cleanflight/src/main/flight/mixer.c ****     case PWM_TYPE_DSHOT1200:
 387:../cleanflight/src/main/flight/mixer.c ****     case PWM_TYPE_DSHOT600:
 388:../cleanflight/src/main/flight/mixer.c ****     case PWM_TYPE_DSHOT300:
 389:../cleanflight/src/main/flight/mixer.c ****     case PWM_TYPE_DSHOT150:
 390:../cleanflight/src/main/flight/mixer.c ****         disarmMotorOutput = DSHOT_DISARM_COMMAND;
 391:../cleanflight/src/main/flight/mixer.c ****         if (feature(FEATURE_3D)) {
 392:../cleanflight/src/main/flight/mixer.c ****             motorOutputLow = DSHOT_MIN_THROTTLE + ((DSHOT_3D_DEADBAND_LOW - DSHOT_MIN_THROTTLE) / 1
 393:../cleanflight/src/main/flight/mixer.c ****         } else {
 394:../cleanflight/src/main/flight/mixer.c ****             motorOutputLow = DSHOT_MIN_THROTTLE + ((DSHOT_MAX_THROTTLE - DSHOT_MIN_THROTTLE) / 100.
 395:../cleanflight/src/main/flight/mixer.c ****         }
 396:../cleanflight/src/main/flight/mixer.c ****         motorOutputHigh = DSHOT_MAX_THROTTLE;
 397:../cleanflight/src/main/flight/mixer.c ****         deadbandMotor3dHigh = DSHOT_3D_DEADBAND_HIGH + ((DSHOT_MAX_THROTTLE - DSHOT_3D_DEADBAND_HIG
 398:../cleanflight/src/main/flight/mixer.c ****         deadbandMotor3dLow = DSHOT_3D_DEADBAND_LOW;
 399:../cleanflight/src/main/flight/mixer.c **** 
 400:../cleanflight/src/main/flight/mixer.c ****         break;
 401:../cleanflight/src/main/flight/mixer.c **** #endif
 402:../cleanflight/src/main/flight/mixer.c ****     default:
 403:../cleanflight/src/main/flight/mixer.c ****         if (feature(FEATURE_3D)) {
 1460              	 .loc 5 403 0
 1461 0008 4FF48050 	 mov r0,#4096
 1462 000c FFF7FEFF 	 bl feature
 1463 0010 0346     	 mov r3,r0
 1464 0012 002B     	 cmp r3,#0
 1465 0014 3CD0     	 beq .L72
 404:../cleanflight/src/main/flight/mixer.c ****             disarmMotorOutput = flight3DConfig()->neutral3d;
 1466              	 .loc 5 404 0
 1467 0016 FFF7FEFF 	 bl flight3DConfig
 1468 001a 0346     	 mov r3,r0
 1469 001c 9B88     	 ldrh r3,[r3,#4]
 1470 001e 9BB2     	 uxth r3,r3
 1471 0020 07EE903A 	 fmsr s15,r3
 1472 0024 F8EE677A 	 fuitos s15,s15
 1473 0028 4C4B     	 ldr r3,.L74
 1474 002a C3ED007A 	 fsts s15,[r3]
 405:../cleanflight/src/main/flight/mixer.c ****             motorOutputLow = flight3DConfig()->limit3d_low;
 1475              	 .loc 5 405 0
 1476 002e FFF7FEFF 	 bl flight3DConfig
 1477 0032 0346     	 mov r3,r0
 1478 0034 1B89     	 ldrh r3,[r3,#8]
 1479 0036 9BB2     	 uxth r3,r3
 1480 0038 07EE903A 	 fmsr s15,r3
 1481 003c F8EE677A 	 fuitos s15,s15
 1482 0040 474B     	 ldr r3,.L74+4
 1483 0042 C3ED007A 	 fsts s15,[r3]
 406:../cleanflight/src/main/flight/mixer.c ****             motorOutputHigh = flight3DConfig()->limit3d_high;
 1484              	 .loc 5 406 0
 1485 0046 FFF7FEFF 	 bl flight3DConfig
 1486 004a 0346     	 mov r3,r0
 1487 004c 5B89     	 ldrh r3,[r3,#10]
 1488 004e 9BB2     	 uxth r3,r3
 1489 0050 07EE903A 	 fmsr s15,r3
 1490 0054 F8EE677A 	 fuitos s15,s15
 1491 0058 424B     	 ldr r3,.L74+8
 1492 005a C3ED007A 	 fsts s15,[r3]
 407:../cleanflight/src/main/flight/mixer.c ****             deadbandMotor3dHigh = flight3DConfig()->deadband3d_high;
 1493              	 .loc 5 407 0
 1494 005e FFF7FEFF 	 bl flight3DConfig
 1495 0062 0346     	 mov r3,r0
 1496 0064 5B88     	 ldrh r3,[r3,#2]
 1497 0066 9BB2     	 uxth r3,r3
 1498 0068 07EE903A 	 fmsr s15,r3
 1499 006c F8EE677A 	 fuitos s15,s15
 1500 0070 3D4B     	 ldr r3,.L74+12
 1501 0072 C3ED007A 	 fsts s15,[r3]
 408:../cleanflight/src/main/flight/mixer.c ****             deadbandMotor3dLow = flight3DConfig()->deadband3d_low;
 1502              	 .loc 5 408 0
 1503 0076 FFF7FEFF 	 bl flight3DConfig
 1504 007a 0346     	 mov r3,r0
 1505 007c 1B88     	 ldrh r3,[r3]
 1506 007e 9BB2     	 uxth r3,r3
 1507 0080 07EE903A 	 fmsr s15,r3
 1508 0084 F8EE677A 	 fuitos s15,s15
 1509 0088 384B     	 ldr r3,.L74+16
 1510 008a C3ED007A 	 fsts s15,[r3]
 1511 008e 23E0     	 b .L73
 1512              	.L72:
 409:../cleanflight/src/main/flight/mixer.c ****         } else {
 410:../cleanflight/src/main/flight/mixer.c ****             disarmMotorOutput = motorConfig()->mincommand;
 1513              	 .loc 5 410 0
 1514 0090 FFF7FEFF 	 bl motorConfig
 1515 0094 0346     	 mov r3,r0
 1516 0096 9B8A     	 ldrh r3,[r3,#20]
 1517 0098 9BB2     	 uxth r3,r3
 1518 009a 07EE903A 	 fmsr s15,r3
 1519 009e F8EE677A 	 fuitos s15,s15
 1520 00a2 2E4B     	 ldr r3,.L74
 1521 00a4 C3ED007A 	 fsts s15,[r3]
 411:../cleanflight/src/main/flight/mixer.c ****             motorOutputLow = motorConfig()->minthrottle;
 1522              	 .loc 5 411 0
 1523 00a8 FFF7FEFF 	 bl motorConfig
 1524 00ac 0346     	 mov r3,r0
 1525 00ae 1B8A     	 ldrh r3,[r3,#16]
 1526 00b0 9BB2     	 uxth r3,r3
 1527 00b2 07EE903A 	 fmsr s15,r3
 1528 00b6 F8EE677A 	 fuitos s15,s15
 1529 00ba 294B     	 ldr r3,.L74+4
 1530 00bc C3ED007A 	 fsts s15,[r3]
 412:../cleanflight/src/main/flight/mixer.c ****             motorOutputHigh = motorConfig()->maxthrottle;
 1531              	 .loc 5 412 0
 1532 00c0 FFF7FEFF 	 bl motorConfig
 1533 00c4 0346     	 mov r3,r0
 1534 00c6 5B8A     	 ldrh r3,[r3,#18]
 1535 00c8 9BB2     	 uxth r3,r3
 1536 00ca 07EE903A 	 fmsr s15,r3
 1537 00ce F8EE677A 	 fuitos s15,s15
 1538 00d2 244B     	 ldr r3,.L74+8
 1539 00d4 C3ED007A 	 fsts s15,[r3]
 1540              	.L73:
 413:../cleanflight/src/main/flight/mixer.c ****         }
 414:../cleanflight/src/main/flight/mixer.c ****         break;
 1541              	 .loc 5 414 0
 1542 00d8 00BF     	 nop
 415:../cleanflight/src/main/flight/mixer.c ****     }
 416:../cleanflight/src/main/flight/mixer.c **** 
 417:../cleanflight/src/main/flight/mixer.c ****     rcCommandThrottleRange = PWM_RANGE_MAX - rxConfig()->mincheck;
 1543              	 .loc 5 417 0
 1544 00da FFF7FEFF 	 bl rxConfig
 1545 00de 0346     	 mov r3,r0
 1546 00e0 9B8A     	 ldrh r3,[r3,#20]
 1547 00e2 9BB2     	 uxth r3,r3
 1548 00e4 C3F5FA63 	 rsb r3,r3,#2000
 1549 00e8 07EE903A 	 fmsr s15,r3
 1550 00ec F8EEE77A 	 fsitos s15,s15
 1551 00f0 1F4B     	 ldr r3,.L74+20
 1552 00f2 C3ED007A 	 fsts s15,[r3]
 418:../cleanflight/src/main/flight/mixer.c **** 
 419:../cleanflight/src/main/flight/mixer.c ****     rcCommand3dDeadBandLow = rxConfig()->midrc - flight3DConfig()->deadband3d_throttle;
 1553              	 .loc 5 419 0
 1554 00f6 FFF7FEFF 	 bl rxConfig
 1555 00fa 0346     	 mov r3,r0
 1556 00fc 5B8A     	 ldrh r3,[r3,#18]
 1557 00fe 9CB2     	 uxth r4,r3
 1558 0100 FFF7FEFF 	 bl flight3DConfig
 1559 0104 0346     	 mov r3,r0
 1560 0106 DB88     	 ldrh r3,[r3,#6]
 1561 0108 9BB2     	 uxth r3,r3
 1562 010a E31A     	 subs r3,r4,r3
 1563 010c 9AB2     	 uxth r2,r3
 1564 010e 194B     	 ldr r3,.L74+24
 1565 0110 1A80     	 strh r2,[r3]
 420:../cleanflight/src/main/flight/mixer.c ****     rcCommand3dDeadBandHigh = rxConfig()->midrc + flight3DConfig()->deadband3d_throttle;
 1566              	 .loc 5 420 0
 1567 0112 FFF7FEFF 	 bl rxConfig
 1568 0116 0346     	 mov r3,r0
 1569 0118 5B8A     	 ldrh r3,[r3,#18]
 1570 011a 9CB2     	 uxth r4,r3
 1571 011c FFF7FEFF 	 bl flight3DConfig
 1572 0120 0346     	 mov r3,r0
 1573 0122 DB88     	 ldrh r3,[r3,#6]
 1574 0124 9BB2     	 uxth r3,r3
 1575 0126 2344     	 add r3,r3,r4
 1576 0128 9AB2     	 uxth r2,r3
 1577 012a 134B     	 ldr r3,.L74+28
 1578 012c 1A80     	 strh r2,[r3]
 421:../cleanflight/src/main/flight/mixer.c **** 
 422:../cleanflight/src/main/flight/mixer.c ****     rcCommandThrottleRange3dLow = rcCommand3dDeadBandLow - PWM_RANGE_MIN;
 1579              	 .loc 5 422 0
 1580 012e 114B     	 ldr r3,.L74+24
 1581 0130 1B88     	 ldrh r3,[r3]
 1582 0132 A3F57A73 	 sub r3,r3,#1000
 1583 0136 07EE903A 	 fmsr s15,r3
 1584 013a F8EEE77A 	 fsitos s15,s15
 1585 013e 0F4B     	 ldr r3,.L74+32
 1586 0140 C3ED007A 	 fsts s15,[r3]
 423:../cleanflight/src/main/flight/mixer.c ****     rcCommandThrottleRange3dHigh = PWM_RANGE_MAX - rcCommand3dDeadBandHigh;
 1587              	 .loc 5 423 0
 1588 0144 0C4B     	 ldr r3,.L74+28
 1589 0146 1B88     	 ldrh r3,[r3]
 1590 0148 C3F5FA63 	 rsb r3,r3,#2000
 1591 014c 07EE903A 	 fmsr s15,r3
 1592 0150 F8EEE77A 	 fsitos s15,s15
 1593 0154 0A4B     	 ldr r3,.L74+36
 1594 0156 C3ED007A 	 fsts s15,[r3]
 424:../cleanflight/src/main/flight/mixer.c **** }
 1595              	 .loc 5 424 0
 1596 015a 98BD     	 pop {r3,r4,r7,pc}
 1597              	.L75:
 1598              	 .align 2
 1599              	.L74:
 1600 015c 00000000 	 .word disarmMotorOutput
 1601 0160 00000000 	 .word motorOutputLow
 1602 0164 00000000 	 .word motorOutputHigh
 1603 0168 00000000 	 .word deadbandMotor3dHigh
 1604 016c 00000000 	 .word deadbandMotor3dLow
 1605 0170 00000000 	 .word rcCommandThrottleRange
 1606 0174 00000000 	 .word rcCommand3dDeadBandLow
 1607 0178 00000000 	 .word rcCommand3dDeadBandHigh
 1608 017c 00000000 	 .word rcCommandThrottleRange3dLow
 1609 0180 00000000 	 .word rcCommandThrottleRange3dHigh
 1610              	 .cfi_endproc
 1611              	.LFE594:
 1613              	 .section .text.mixerInit,"ax",%progbits
 1614              	 .align 2
 1615              	 .global mixerInit
 1616              	 .thumb
 1617              	 .thumb_func
 1619              	mixerInit:
 1620              	.LFB595:
 425:../cleanflight/src/main/flight/mixer.c **** 
 426:../cleanflight/src/main/flight/mixer.c **** void mixerInit(mixerMode_e mixerMode)
 427:../cleanflight/src/main/flight/mixer.c **** {
 1621              	 .loc 5 427 0
 1622              	 .cfi_startproc
 1623              	 
 1624              	 
 1625 0000 80B5     	 push {r7,lr}
 1626              	.LCFI68:
 1627              	 .cfi_def_cfa_offset 8
 1628              	 .cfi_offset 7,-8
 1629              	 .cfi_offset 14,-4
 1630 0002 82B0     	 sub sp,sp,#8
 1631              	.LCFI69:
 1632              	 .cfi_def_cfa_offset 16
 1633 0004 00AF     	 add r7,sp,#0
 1634              	.LCFI70:
 1635              	 .cfi_def_cfa_register 7
 1636 0006 0346     	 mov r3,r0
 1637 0008 FB71     	 strb r3,[r7,#7]
 428:../cleanflight/src/main/flight/mixer.c ****     currentMixerMode = mixerMode;
 1638              	 .loc 5 428 0
 1639 000a 074A     	 ldr r2,.L78
 1640 000c FB79     	 ldrb r3,[r7,#7]
 1641 000e 1370     	 strb r3,[r2]
 429:../cleanflight/src/main/flight/mixer.c **** 
 430:../cleanflight/src/main/flight/mixer.c ****     initEscEndpoints();
 1642              	 .loc 5 430 0
 1643 0010 FFF7FEFF 	 bl initEscEndpoints
 431:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_SERVOS
 432:../cleanflight/src/main/flight/mixer.c ****     if (mixerIsTricopter()) {
 1644              	 .loc 5 432 0
 1645 0014 FFF7FEFF 	 bl mixerIsTricopter
 1646 0018 0346     	 mov r3,r0
 1647 001a 002B     	 cmp r3,#0
 1648 001c 01D0     	 beq .L76
 433:../cleanflight/src/main/flight/mixer.c ****         mixerTricopterInit();
 1649              	 .loc 5 433 0
 1650 001e FFF7FEFF 	 bl mixerTricopterInit
 1651              	.L76:
 434:../cleanflight/src/main/flight/mixer.c ****     }
 435:../cleanflight/src/main/flight/mixer.c **** #endif
 436:../cleanflight/src/main/flight/mixer.c **** }
 1652              	 .loc 5 436 0
 1653 0022 0837     	 adds r7,r7,#8
 1654              	.LCFI71:
 1655              	 .cfi_def_cfa_offset 8
 1656 0024 BD46     	 mov sp,r7
 1657              	.LCFI72:
 1658              	 .cfi_def_cfa_register 13
 1659              	 
 1660 0026 80BD     	 pop {r7,pc}
 1661              	.L79:
 1662              	 .align 2
 1663              	.L78:
 1664 0028 00000000 	 .word currentMixerMode
 1665              	 .cfi_endproc
 1666              	.LFE595:
 1668              	 .section .text.mixerConfigureOutput,"ax",%progbits
 1669              	 .align 2
 1670              	 .global mixerConfigureOutput
 1671              	 .thumb
 1672              	 .thumb_func
 1674              	mixerConfigureOutput:
 1675              	.LFB596:
 437:../cleanflight/src/main/flight/mixer.c **** 
 438:../cleanflight/src/main/flight/mixer.c **** #ifndef USE_QUAD_MIXER_ONLY
 439:../cleanflight/src/main/flight/mixer.c **** 
 440:../cleanflight/src/main/flight/mixer.c **** void mixerConfigureOutput(void)
 441:../cleanflight/src/main/flight/mixer.c **** {
 1676              	 .loc 5 441 0
 1677              	 .cfi_startproc
 1678              	 
 1679              	 
 1680 0000 90B5     	 push {r4,r7,lr}
 1681              	.LCFI73:
 1682              	 .cfi_def_cfa_offset 12
 1683              	 .cfi_offset 4,-12
 1684              	 .cfi_offset 7,-8
 1685              	 .cfi_offset 14,-4
 1686 0002 83B0     	 sub sp,sp,#12
 1687              	.LCFI74:
 1688              	 .cfi_def_cfa_offset 24
 1689 0004 00AF     	 add r7,sp,#0
 1690              	.LCFI75:
 1691              	 .cfi_def_cfa_register 7
 442:../cleanflight/src/main/flight/mixer.c ****     motorCount = 0;
 1692              	 .loc 5 442 0
 1693 0006 424B     	 ldr r3,.L91
 1694 0008 0022     	 movs r2,#0
 1695 000a 1A70     	 strb r2,[r3]
 443:../cleanflight/src/main/flight/mixer.c **** 
 444:../cleanflight/src/main/flight/mixer.c ****     if (currentMixerMode == MIXER_CUSTOM || currentMixerMode == MIXER_CUSTOM_TRI || currentMixerMod
 1696              	 .loc 5 444 0
 1697 000c 414B     	 ldr r3,.L91+4
 1698 000e 1B78     	 ldrb r3,[r3]
 1699 0010 172B     	 cmp r3,#23
 1700 0012 07D0     	 beq .L81
 1701              	 .loc 5 444 0 is_stmt 0 discriminator 1
 1702 0014 3F4B     	 ldr r3,.L91+4
 1703 0016 1B78     	 ldrb r3,[r3]
 1704 0018 192B     	 cmp r3,#25
 1705 001a 03D0     	 beq .L81
 1706              	 .loc 5 444 0 discriminator 2
 1707 001c 3D4B     	 ldr r3,.L91+4
 1708 001e 1B78     	 ldrb r3,[r3]
 1709 0020 182B     	 cmp r3,#24
 1710 0022 2BD1     	 bne .L82
 1711              	.L81:
 1712              	.LBB4:
 445:../cleanflight/src/main/flight/mixer.c ****         // load custom mixer into currentMixer
 446:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < MAX_SUPPORTED_MOTORS; i++) {
 1713              	 .loc 5 446 0 is_stmt 1
 1714 0024 0023     	 movs r3,#0
 1715 0026 7B60     	 str r3,[r7,#4]
 1716 0028 24E0     	 b .L83
 1717              	.L86:
 447:../cleanflight/src/main/flight/mixer.c ****             // check if done
 448:../cleanflight/src/main/flight/mixer.c ****             if (customMotorMixer(i)->throttle == 0.0f) {
 1718              	 .loc 5 448 0
 1719 002a 7868     	 ldr r0,[r7,#4]
 1720 002c FFF7FEFF 	 bl customMotorMixer
 1721 0030 0346     	 mov r3,r0
 1722 0032 1B68     	 ldr r3,[r3]
 1723 0034 07EE903A 	 fmsr s15,r3
 1724 0038 F5EE407A 	 fcmpzs s15
 1725 003c F1EE10FA 	 fmstat
 1726 0040 00D1     	 bne .L84
 449:../cleanflight/src/main/flight/mixer.c ****                 break;
 1727              	 .loc 5 449 0
 1728 0042 1AE0     	 b .L85
 1729              	.L84:
 450:../cleanflight/src/main/flight/mixer.c ****             }
 451:../cleanflight/src/main/flight/mixer.c ****             currentMixer[i] = *customMotorMixer(i);
 1730              	 .loc 5 451 0 discriminator 2
 1731 0044 7868     	 ldr r0,[r7,#4]
 1732 0046 FFF7FEFF 	 bl customMotorMixer
 1733 004a 0146     	 mov r1,r0
 1734 004c 324A     	 ldr r2,.L91+8
 1735 004e 7B68     	 ldr r3,[r7,#4]
 1736 0050 1B01     	 lsls r3,r3,#4
 1737 0052 1344     	 add r3,r3,r2
 1738 0054 1C46     	 mov r4,r3
 1739 0056 0B46     	 mov r3,r1
 1740 0058 1868     	 ldr r0,[r3]
 1741 005a 5968     	 ldr r1,[r3,#4]
 1742 005c 9A68     	 ldr r2,[r3,#8]
 1743 005e DB68     	 ldr r3,[r3,#12]
 1744 0060 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 452:../cleanflight/src/main/flight/mixer.c ****             motorCount++;
 1745              	 .loc 5 452 0 discriminator 2
 1746 0062 2B4B     	 ldr r3,.L91
 1747 0064 1B78     	 ldrb r3,[r3]
 1748 0066 0133     	 adds r3,r3,#1
 1749 0068 DAB2     	 uxtb r2,r3
 1750 006a 294B     	 ldr r3,.L91
 1751 006c 1A70     	 strb r2,[r3]
 446:../cleanflight/src/main/flight/mixer.c ****             // check if done
 1752              	 .loc 5 446 0 discriminator 2
 1753 006e 7B68     	 ldr r3,[r7,#4]
 1754 0070 0133     	 adds r3,r3,#1
 1755 0072 7B60     	 str r3,[r7,#4]
 1756              	.L83:
 446:../cleanflight/src/main/flight/mixer.c ****             // check if done
 1757              	 .loc 5 446 0 is_stmt 0 discriminator 1
 1758 0074 7B68     	 ldr r3,[r7,#4]
 1759 0076 072B     	 cmp r3,#7
 1760 0078 D7DD     	 ble .L86
 1761              	.L85:
 1762              	.LBE4:
 1763 007a 44E0     	 b .L87
 1764              	.L82:
 453:../cleanflight/src/main/flight/mixer.c ****         }
 454:../cleanflight/src/main/flight/mixer.c ****     } else {
 455:../cleanflight/src/main/flight/mixer.c ****         motorCount = mixers[currentMixerMode].motorCount;
 1765              	 .loc 5 455 0 is_stmt 1
 1766 007c 254B     	 ldr r3,.L91+4
 1767 007e 1B78     	 ldrb r3,[r3]
 1768 0080 1946     	 mov r1,r3
 1769 0082 264A     	 ldr r2,.L91+12
 1770 0084 0B46     	 mov r3,r1
 1771 0086 5B00     	 lsls r3,r3,#1
 1772 0088 0B44     	 add r3,r3,r1
 1773 008a 5B00     	 lsls r3,r3,#1
 1774 008c 1344     	 add r3,r3,r2
 1775 008e 1A78     	 ldrb r2,[r3]
 1776 0090 1F4B     	 ldr r3,.L91
 1777 0092 1A70     	 strb r2,[r3]
 456:../cleanflight/src/main/flight/mixer.c ****         if (motorCount > MAX_SUPPORTED_MOTORS) {
 1778              	 .loc 5 456 0
 1779 0094 1E4B     	 ldr r3,.L91
 1780 0096 1B78     	 ldrb r3,[r3]
 1781 0098 082B     	 cmp r3,#8
 1782 009a 02D9     	 bls .L88
 457:../cleanflight/src/main/flight/mixer.c ****             motorCount = MAX_SUPPORTED_MOTORS;
 1783              	 .loc 5 457 0
 1784 009c 1C4B     	 ldr r3,.L91
 1785 009e 0822     	 movs r2,#8
 1786 00a0 1A70     	 strb r2,[r3]
 1787              	.L88:
 458:../cleanflight/src/main/flight/mixer.c ****         }
 459:../cleanflight/src/main/flight/mixer.c ****         // copy motor-based mixers
 460:../cleanflight/src/main/flight/mixer.c ****         if (mixers[currentMixerMode].motor) {
 1788              	 .loc 5 460 0
 1789 00a2 1C4B     	 ldr r3,.L91+4
 1790 00a4 1B78     	 ldrb r3,[r3]
 1791 00a6 1946     	 mov r1,r3
 1792 00a8 1C4A     	 ldr r2,.L91+12
 1793 00aa 0B46     	 mov r3,r1
 1794 00ac 5B00     	 lsls r3,r3,#1
 1795 00ae 0B44     	 add r3,r3,r1
 1796 00b0 5B00     	 lsls r3,r3,#1
 1797 00b2 1344     	 add r3,r3,r2
 1798 00b4 D3F80230 	 ldr r3,[r3,#2]
 1799 00b8 002B     	 cmp r3,#0
 1800 00ba 24D0     	 beq .L87
 1801              	.LBB5:
 461:../cleanflight/src/main/flight/mixer.c ****             for (int i = 0; i < motorCount; i++)
 1802              	 .loc 5 461 0
 1803 00bc 0023     	 movs r3,#0
 1804 00be 3B60     	 str r3,[r7]
 1805 00c0 1BE0     	 b .L89
 1806              	.L90:
 462:../cleanflight/src/main/flight/mixer.c ****                 currentMixer[i] = mixers[currentMixerMode].motor[i];
 1807              	 .loc 5 462 0 discriminator 3
 1808 00c2 144B     	 ldr r3,.L91+4
 1809 00c4 1B78     	 ldrb r3,[r3]
 1810 00c6 1946     	 mov r1,r3
 1811 00c8 144A     	 ldr r2,.L91+12
 1812 00ca 0B46     	 mov r3,r1
 1813 00cc 5B00     	 lsls r3,r3,#1
 1814 00ce 0B44     	 add r3,r3,r1
 1815 00d0 5B00     	 lsls r3,r3,#1
 1816 00d2 1344     	 add r3,r3,r2
 1817 00d4 D3F80220 	 ldr r2,[r3,#2]
 1818 00d8 3B68     	 ldr r3,[r7]
 1819 00da 1B01     	 lsls r3,r3,#4
 1820 00dc D118     	 adds r1,r2,r3
 1821 00de 0E4A     	 ldr r2,.L91+8
 1822 00e0 3B68     	 ldr r3,[r7]
 1823 00e2 1B01     	 lsls r3,r3,#4
 1824 00e4 1344     	 add r3,r3,r2
 1825 00e6 1C46     	 mov r4,r3
 1826 00e8 0B46     	 mov r3,r1
 1827 00ea 1868     	 ldr r0,[r3]
 1828 00ec 5968     	 ldr r1,[r3,#4]
 1829 00ee 9A68     	 ldr r2,[r3,#8]
 1830 00f0 DB68     	 ldr r3,[r3,#12]
 1831 00f2 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 461:../cleanflight/src/main/flight/mixer.c ****             for (int i = 0; i < motorCount; i++)
 1832              	 .loc 5 461 0 discriminator 3
 1833 00f4 3B68     	 ldr r3,[r7]
 1834 00f6 0133     	 adds r3,r3,#1
 1835 00f8 3B60     	 str r3,[r7]
 1836              	.L89:
 461:../cleanflight/src/main/flight/mixer.c ****             for (int i = 0; i < motorCount; i++)
 1837              	 .loc 5 461 0 is_stmt 0 discriminator 1
 1838 00fa 054B     	 ldr r3,.L91
 1839 00fc 1B78     	 ldrb r3,[r3]
 1840 00fe 1A46     	 mov r2,r3
 1841 0100 3B68     	 ldr r3,[r7]
 1842 0102 9A42     	 cmp r2,r3
 1843 0104 DDDC     	 bgt .L90
 1844              	.L87:
 1845              	.LBE5:
 463:../cleanflight/src/main/flight/mixer.c ****         }
 464:../cleanflight/src/main/flight/mixer.c ****     }
 465:../cleanflight/src/main/flight/mixer.c ****     mixerResetDisarmedMotors();
 1846              	 .loc 5 465 0 is_stmt 1
 1847 0106 FFF7FEFF 	 bl mixerResetDisarmedMotors
 466:../cleanflight/src/main/flight/mixer.c **** }
 1848              	 .loc 5 466 0
 1849 010a 0C37     	 adds r7,r7,#12
 1850              	.LCFI76:
 1851              	 .cfi_def_cfa_offset 12
 1852 010c BD46     	 mov sp,r7
 1853              	.LCFI77:
 1854              	 .cfi_def_cfa_register 13
 1855              	 
 1856 010e 90BD     	 pop {r4,r7,pc}
 1857              	.L92:
 1858              	 .align 2
 1859              	.L91:
 1860 0110 00000000 	 .word motorCount
 1861 0114 00000000 	 .word currentMixerMode
 1862 0118 00000000 	 .word currentMixer
 1863 011c 00000000 	 .word mixers
 1864              	 .cfi_endproc
 1865              	.LFE596:
 1867              	 .section .text.mixerLoadMix,"ax",%progbits
 1868              	 .align 2
 1869              	 .global mixerLoadMix
 1870              	 .thumb
 1871              	 .thumb_func
 1873              	mixerLoadMix:
 1874              	.LFB597:
 467:../cleanflight/src/main/flight/mixer.c **** 
 468:../cleanflight/src/main/flight/mixer.c **** void mixerLoadMix(int index, motorMixer_t *customMixers)
 469:../cleanflight/src/main/flight/mixer.c **** {
 1875              	 .loc 5 469 0
 1876              	 .cfi_startproc
 1877              	 
 1878              	 
 1879              	 
 1880 0000 90B4     	 push {r4,r7}
 1881              	.LCFI78:
 1882              	 .cfi_def_cfa_offset 8
 1883              	 .cfi_offset 4,-8
 1884              	 .cfi_offset 7,-4
 1885 0002 84B0     	 sub sp,sp,#16
 1886              	.LCFI79:
 1887              	 .cfi_def_cfa_offset 24
 1888 0004 00AF     	 add r7,sp,#0
 1889              	.LCFI80:
 1890              	 .cfi_def_cfa_register 7
 1891 0006 7860     	 str r0,[r7,#4]
 1892 0008 3960     	 str r1,[r7]
 470:../cleanflight/src/main/flight/mixer.c ****     // we're 1-based
 471:../cleanflight/src/main/flight/mixer.c ****     index++;
 1893              	 .loc 5 471 0
 1894 000a 7B68     	 ldr r3,[r7,#4]
 1895 000c 0133     	 adds r3,r3,#1
 1896 000e 7B60     	 str r3,[r7,#4]
 1897              	.LBB6:
 472:../cleanflight/src/main/flight/mixer.c ****     // clear existing
 473:../cleanflight/src/main/flight/mixer.c ****     for (int i = 0; i < MAX_SUPPORTED_MOTORS; i++) {
 1898              	 .loc 5 473 0
 1899 0010 0023     	 movs r3,#0
 1900 0012 FB60     	 str r3,[r7,#12]
 1901 0014 09E0     	 b .L94
 1902              	.L95:
 474:../cleanflight/src/main/flight/mixer.c ****         customMixers[i].throttle = 0.0f;
 1903              	 .loc 5 474 0 discriminator 3
 1904 0016 FB68     	 ldr r3,[r7,#12]
 1905 0018 1B01     	 lsls r3,r3,#4
 1906 001a 3A68     	 ldr r2,[r7]
 1907 001c 1344     	 add r3,r3,r2
 1908 001e 4FF00002 	 mov r2,#0
 1909 0022 1A60     	 str r2,[r3]
 473:../cleanflight/src/main/flight/mixer.c ****         customMixers[i].throttle = 0.0f;
 1910              	 .loc 5 473 0 discriminator 3
 1911 0024 FB68     	 ldr r3,[r7,#12]
 1912 0026 0133     	 adds r3,r3,#1
 1913 0028 FB60     	 str r3,[r7,#12]
 1914              	.L94:
 473:../cleanflight/src/main/flight/mixer.c ****         customMixers[i].throttle = 0.0f;
 1915              	 .loc 5 473 0 is_stmt 0 discriminator 1
 1916 002a FB68     	 ldr r3,[r7,#12]
 1917 002c 072B     	 cmp r3,#7
 1918 002e F2DD     	 ble .L95
 1919              	.LBE6:
 475:../cleanflight/src/main/flight/mixer.c ****     }
 476:../cleanflight/src/main/flight/mixer.c ****     // do we have anything here to begin with?
 477:../cleanflight/src/main/flight/mixer.c ****     if (mixers[index].motor != NULL) {
 1920              	 .loc 5 477 0 is_stmt 1
 1921 0030 1C49     	 ldr r1,.L99
 1922 0032 7A68     	 ldr r2,[r7,#4]
 1923 0034 1346     	 mov r3,r2
 1924 0036 5B00     	 lsls r3,r3,#1
 1925 0038 1344     	 add r3,r3,r2
 1926 003a 5B00     	 lsls r3,r3,#1
 1927 003c 0B44     	 add r3,r3,r1
 1928 003e D3F80230 	 ldr r3,[r3,#2]
 1929 0042 002B     	 cmp r3,#0
 1930 0044 2AD0     	 beq .L93
 1931              	.LBB7:
 478:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < mixers[index].motorCount; i++) {
 1932              	 .loc 5 478 0
 1933 0046 0023     	 movs r3,#0
 1934 0048 BB60     	 str r3,[r7,#8]
 1935 004a 1BE0     	 b .L97
 1936              	.L98:
 479:../cleanflight/src/main/flight/mixer.c ****             customMixers[i] = mixers[index].motor[i];
 1937              	 .loc 5 479 0 discriminator 3
 1938 004c BB68     	 ldr r3,[r7,#8]
 1939 004e 1B01     	 lsls r3,r3,#4
 1940 0050 3A68     	 ldr r2,[r7]
 1941 0052 D018     	 adds r0,r2,r3
 1942 0054 1349     	 ldr r1,.L99
 1943 0056 7A68     	 ldr r2,[r7,#4]
 1944 0058 1346     	 mov r3,r2
 1945 005a 5B00     	 lsls r3,r3,#1
 1946 005c 1344     	 add r3,r3,r2
 1947 005e 5B00     	 lsls r3,r3,#1
 1948 0060 0B44     	 add r3,r3,r1
 1949 0062 D3F80220 	 ldr r2,[r3,#2]
 1950 0066 BB68     	 ldr r3,[r7,#8]
 1951 0068 1B01     	 lsls r3,r3,#4
 1952 006a 1A44     	 add r2,r2,r3
 1953 006c 0346     	 mov r3,r0
 1954 006e 1468     	 ldr r4,[r2]
 1955 0070 5068     	 ldr r0,[r2,#4]
 1956 0072 9168     	 ldr r1,[r2,#8]
 1957 0074 D268     	 ldr r2,[r2,#12]
 1958 0076 1C60     	 str r4,[r3]
 1959 0078 5860     	 str r0,[r3,#4]
 1960 007a 9960     	 str r1,[r3,#8]
 1961 007c DA60     	 str r2,[r3,#12]
 478:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < mixers[index].motorCount; i++) {
 1962              	 .loc 5 478 0 discriminator 3
 1963 007e BB68     	 ldr r3,[r7,#8]
 1964 0080 0133     	 adds r3,r3,#1
 1965 0082 BB60     	 str r3,[r7,#8]
 1966              	.L97:
 478:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < mixers[index].motorCount; i++) {
 1967              	 .loc 5 478 0 is_stmt 0 discriminator 1
 1968 0084 0749     	 ldr r1,.L99
 1969 0086 7A68     	 ldr r2,[r7,#4]
 1970 0088 1346     	 mov r3,r2
 1971 008a 5B00     	 lsls r3,r3,#1
 1972 008c 1344     	 add r3,r3,r2
 1973 008e 5B00     	 lsls r3,r3,#1
 1974 0090 0B44     	 add r3,r3,r1
 1975 0092 1B78     	 ldrb r3,[r3]
 1976 0094 1A46     	 mov r2,r3
 1977 0096 BB68     	 ldr r3,[r7,#8]
 1978 0098 9A42     	 cmp r2,r3
 1979 009a D7DC     	 bgt .L98
 1980              	.L93:
 1981              	.LBE7:
 480:../cleanflight/src/main/flight/mixer.c ****         }
 481:../cleanflight/src/main/flight/mixer.c ****     }
 482:../cleanflight/src/main/flight/mixer.c **** }
 1982              	 .loc 5 482 0 is_stmt 1
 1983 009c 1037     	 adds r7,r7,#16
 1984              	.LCFI81:
 1985              	 .cfi_def_cfa_offset 8
 1986 009e BD46     	 mov sp,r7
 1987              	.LCFI82:
 1988              	 .cfi_def_cfa_register 13
 1989              	 
 1990 00a0 90BC     	 pop {r4,r7}
 1991              	.LCFI83:
 1992              	 .cfi_restore 7
 1993              	 .cfi_restore 4
 1994              	 .cfi_def_cfa_offset 0
 1995 00a2 7047     	 bx lr
 1996              	.L100:
 1997              	 .align 2
 1998              	.L99:
 1999 00a4 00000000 	 .word mixers
 2000              	 .cfi_endproc
 2001              	.LFE597:
 2003              	 .section .text.mixerResetDisarmedMotors,"ax",%progbits
 2004              	 .align 2
 2005              	 .global mixerResetDisarmedMotors
 2006              	 .thumb
 2007              	 .thumb_func
 2009              	mixerResetDisarmedMotors:
 2010              	.LFB598:
 483:../cleanflight/src/main/flight/mixer.c **** #else
 484:../cleanflight/src/main/flight/mixer.c **** void mixerConfigureOutput(void)
 485:../cleanflight/src/main/flight/mixer.c **** {
 486:../cleanflight/src/main/flight/mixer.c ****     motorCount = QUAD_MOTOR_COUNT;
 487:../cleanflight/src/main/flight/mixer.c ****     for (int i = 0; i < motorCount; i++) {
 488:../cleanflight/src/main/flight/mixer.c ****         currentMixer[i] = mixerQuadX[i];
 489:../cleanflight/src/main/flight/mixer.c ****     }
 490:../cleanflight/src/main/flight/mixer.c ****     mixerResetDisarmedMotors();
 491:../cleanflight/src/main/flight/mixer.c **** }
 492:../cleanflight/src/main/flight/mixer.c **** #endif // USE_QUAD_MIXER_ONLY
 493:../cleanflight/src/main/flight/mixer.c **** 
 494:../cleanflight/src/main/flight/mixer.c **** void mixerResetDisarmedMotors(void)
 495:../cleanflight/src/main/flight/mixer.c **** {
 2011              	 .loc 5 495 0
 2012              	 .cfi_startproc
 2013              	 
 2014              	 
 2015              	 
 2016 0000 80B4     	 push {r7}
 2017              	.LCFI84:
 2018              	 .cfi_def_cfa_offset 4
 2019              	 .cfi_offset 7,-4
 2020 0002 83B0     	 sub sp,sp,#12
 2021              	.LCFI85:
 2022              	 .cfi_def_cfa_offset 16
 2023 0004 00AF     	 add r7,sp,#0
 2024              	.LCFI86:
 2025              	 .cfi_def_cfa_register 7
 2026              	.LBB8:
 496:../cleanflight/src/main/flight/mixer.c ****     // set disarmed motor values
 497:../cleanflight/src/main/flight/mixer.c ****     for (int i = 0; i < MAX_SUPPORTED_MOTORS; i++) {
 2027              	 .loc 5 497 0
 2028 0006 0023     	 movs r3,#0
 2029 0008 7B60     	 str r3,[r7,#4]
 2030 000a 09E0     	 b .L102
 2031              	.L103:
 498:../cleanflight/src/main/flight/mixer.c ****         motor_disarmed[i] = disarmMotorOutput;
 2032              	 .loc 5 498 0 discriminator 3
 2033 000c 084B     	 ldr r3,.L104
 2034 000e 1A68     	 ldr r2,[r3]
 2035 0010 0849     	 ldr r1,.L104+4
 2036 0012 7B68     	 ldr r3,[r7,#4]
 2037 0014 9B00     	 lsls r3,r3,#2
 2038 0016 0B44     	 add r3,r3,r1
 2039 0018 1A60     	 str r2,[r3]
 497:../cleanflight/src/main/flight/mixer.c ****         motor_disarmed[i] = disarmMotorOutput;
 2040              	 .loc 5 497 0 discriminator 3
 2041 001a 7B68     	 ldr r3,[r7,#4]
 2042 001c 0133     	 adds r3,r3,#1
 2043 001e 7B60     	 str r3,[r7,#4]
 2044              	.L102:
 497:../cleanflight/src/main/flight/mixer.c ****         motor_disarmed[i] = disarmMotorOutput;
 2045              	 .loc 5 497 0 is_stmt 0 discriminator 1
 2046 0020 7B68     	 ldr r3,[r7,#4]
 2047 0022 072B     	 cmp r3,#7
 2048 0024 F2DD     	 ble .L103
 2049              	.LBE8:
 499:../cleanflight/src/main/flight/mixer.c ****     }
 500:../cleanflight/src/main/flight/mixer.c **** }
 2050              	 .loc 5 500 0 is_stmt 1
 2051 0026 0C37     	 adds r7,r7,#12
 2052              	.LCFI87:
 2053              	 .cfi_def_cfa_offset 4
 2054 0028 BD46     	 mov sp,r7
 2055              	.LCFI88:
 2056              	 .cfi_def_cfa_register 13
 2057              	 
 2058 002a 5DF8047B 	 ldr r7,[sp],#4
 2059              	.LCFI89:
 2060              	 .cfi_restore 7
 2061              	 .cfi_def_cfa_offset 0
 2062 002e 7047     	 bx lr
 2063              	.L105:
 2064              	 .align 2
 2065              	.L104:
 2066 0030 00000000 	 .word disarmMotorOutput
 2067 0034 00000000 	 .word motor_disarmed
 2068              	 .cfi_endproc
 2069              	.LFE598:
 2071              	 .section .text.writeMotors,"ax",%progbits
 2072              	 .align 2
 2073              	 .global writeMotors
 2074              	 .thumb
 2075              	 .thumb_func
 2077              	writeMotors:
 2078              	.LFB599:
 501:../cleanflight/src/main/flight/mixer.c **** 
 502:../cleanflight/src/main/flight/mixer.c **** void writeMotors(void)
 503:../cleanflight/src/main/flight/mixer.c **** {
 2079              	 .loc 5 503 0
 2080              	 .cfi_startproc
 2081              	 
 2082              	 
 2083 0000 80B5     	 push {r7,lr}
 2084              	.LCFI90:
 2085              	 .cfi_def_cfa_offset 8
 2086              	 .cfi_offset 7,-8
 2087              	 .cfi_offset 14,-4
 2088 0002 82B0     	 sub sp,sp,#8
 2089              	.LCFI91:
 2090              	 .cfi_def_cfa_offset 16
 2091 0004 00AF     	 add r7,sp,#0
 2092              	.LCFI92:
 2093              	 .cfi_def_cfa_register 7
 504:../cleanflight/src/main/flight/mixer.c ****     if (pwmAreMotorsEnabled()) {
 2094              	 .loc 5 504 0
 2095 0006 FFF7FEFF 	 bl pwmAreMotorsEnabled
 2096 000a 0346     	 mov r3,r0
 2097 000c 002B     	 cmp r3,#0
 2098 000e 1BD0     	 beq .L106
 2099              	.LBB9:
 505:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 2100              	 .loc 5 505 0
 2101 0010 0023     	 movs r3,#0
 2102 0012 7B60     	 str r3,[r7,#4]
 2103 0014 0DE0     	 b .L108
 2104              	.L109:
 506:../cleanflight/src/main/flight/mixer.c ****             pwmWriteMotor(i, motor[i]);
 2105              	 .loc 5 506 0 discriminator 3
 2106 0016 7B68     	 ldr r3,[r7,#4]
 2107 0018 D9B2     	 uxtb r1,r3
 2108 001a 0D4A     	 ldr r2,.L110
 2109 001c 7B68     	 ldr r3,[r7,#4]
 2110 001e 9B00     	 lsls r3,r3,#2
 2111 0020 1344     	 add r3,r3,r2
 2112 0022 1B68     	 ldr r3,[r3]
 2113 0024 0846     	 mov r0,r1
 2114 0026 1946     	 mov r1,r3
 2115 0028 FFF7FEFF 	 bl pwmWriteMotor
 505:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 2116              	 .loc 5 505 0 discriminator 3
 2117 002c 7B68     	 ldr r3,[r7,#4]
 2118 002e 0133     	 adds r3,r3,#1
 2119 0030 7B60     	 str r3,[r7,#4]
 2120              	.L108:
 505:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 2121              	 .loc 5 505 0 is_stmt 0 discriminator 1
 2122 0032 084B     	 ldr r3,.L110+4
 2123 0034 1B78     	 ldrb r3,[r3]
 2124 0036 1A46     	 mov r2,r3
 2125 0038 7B68     	 ldr r3,[r7,#4]
 2126 003a 9A42     	 cmp r2,r3
 2127 003c EBDC     	 bgt .L109
 2128              	.LBE9:
 507:../cleanflight/src/main/flight/mixer.c ****         }
 508:../cleanflight/src/main/flight/mixer.c ****         pwmCompleteMotorUpdate(motorCount);
 2129              	 .loc 5 508 0 is_stmt 1
 2130 003e 054B     	 ldr r3,.L110+4
 2131 0040 1B78     	 ldrb r3,[r3]
 2132 0042 1846     	 mov r0,r3
 2133 0044 FFF7FEFF 	 bl pwmCompleteMotorUpdate
 2134              	.L106:
 509:../cleanflight/src/main/flight/mixer.c ****     }
 510:../cleanflight/src/main/flight/mixer.c **** }
 2135              	 .loc 5 510 0
 2136 0048 0837     	 adds r7,r7,#8
 2137              	.LCFI93:
 2138              	 .cfi_def_cfa_offset 8
 2139 004a BD46     	 mov sp,r7
 2140              	.LCFI94:
 2141              	 .cfi_def_cfa_register 13
 2142              	 
 2143 004c 80BD     	 pop {r7,pc}
 2144              	.L111:
 2145 004e 00BF     	 .align 2
 2146              	.L110:
 2147 0050 00000000 	 .word motor
 2148 0054 00000000 	 .word motorCount
 2149              	 .cfi_endproc
 2150              	.LFE599:
 2152              	 .section .text.writeAllMotors,"ax",%progbits
 2153              	 .align 2
 2154              	 .thumb
 2155              	 .thumb_func
 2157              	writeAllMotors:
 2158              	.LFB600:
 511:../cleanflight/src/main/flight/mixer.c **** 
 512:../cleanflight/src/main/flight/mixer.c **** static void writeAllMotors(int16_t mc)
 513:../cleanflight/src/main/flight/mixer.c **** {
 2159              	 .loc 5 513 0
 2160              	 .cfi_startproc
 2161              	 
 2162              	 
 2163 0000 80B5     	 push {r7,lr}
 2164              	.LCFI95:
 2165              	 .cfi_def_cfa_offset 8
 2166              	 .cfi_offset 7,-8
 2167              	 .cfi_offset 14,-4
 2168 0002 84B0     	 sub sp,sp,#16
 2169              	.LCFI96:
 2170              	 .cfi_def_cfa_offset 24
 2171 0004 00AF     	 add r7,sp,#0
 2172              	.LCFI97:
 2173              	 .cfi_def_cfa_register 7
 2174 0006 0346     	 mov r3,r0
 2175 0008 FB80     	 strh r3,[r7,#6]
 2176              	.LBB10:
 514:../cleanflight/src/main/flight/mixer.c ****     // Sends commands to all motors
 515:../cleanflight/src/main/flight/mixer.c ****     for (int i = 0; i < motorCount; i++) {
 2177              	 .loc 5 515 0
 2178 000a 0023     	 movs r3,#0
 2179 000c FB60     	 str r3,[r7,#12]
 2180 000e 0EE0     	 b .L113
 2181              	.L114:
 516:../cleanflight/src/main/flight/mixer.c ****         motor[i] = mc;
 2182              	 .loc 5 516 0 discriminator 3
 2183 0010 B7F90630 	 ldrsh r3,[r7,#6]
 2184 0014 07EE903A 	 fmsr s15,r3
 2185 0018 F8EEE77A 	 fsitos s15,s15
 2186 001c 094A     	 ldr r2,.L115
 2187 001e FB68     	 ldr r3,[r7,#12]
 2188 0020 9B00     	 lsls r3,r3,#2
 2189 0022 1344     	 add r3,r3,r2
 2190 0024 C3ED007A 	 fsts s15,[r3]
 515:../cleanflight/src/main/flight/mixer.c ****         motor[i] = mc;
 2191              	 .loc 5 515 0 discriminator 3
 2192 0028 FB68     	 ldr r3,[r7,#12]
 2193 002a 0133     	 adds r3,r3,#1
 2194 002c FB60     	 str r3,[r7,#12]
 2195              	.L113:
 515:../cleanflight/src/main/flight/mixer.c ****         motor[i] = mc;
 2196              	 .loc 5 515 0 is_stmt 0 discriminator 1
 2197 002e 064B     	 ldr r3,.L115+4
 2198 0030 1B78     	 ldrb r3,[r3]
 2199 0032 1A46     	 mov r2,r3
 2200 0034 FB68     	 ldr r3,[r7,#12]
 2201 0036 9A42     	 cmp r2,r3
 2202 0038 EADC     	 bgt .L114
 2203              	.LBE10:
 517:../cleanflight/src/main/flight/mixer.c ****     }
 518:../cleanflight/src/main/flight/mixer.c ****     writeMotors();
 2204              	 .loc 5 518 0 is_stmt 1
 2205 003a FFF7FEFF 	 bl writeMotors
 519:../cleanflight/src/main/flight/mixer.c **** }
 2206              	 .loc 5 519 0
 2207 003e 1037     	 adds r7,r7,#16
 2208              	.LCFI98:
 2209              	 .cfi_def_cfa_offset 8
 2210 0040 BD46     	 mov sp,r7
 2211              	.LCFI99:
 2212              	 .cfi_def_cfa_register 13
 2213              	 
 2214 0042 80BD     	 pop {r7,pc}
 2215              	.L116:
 2216              	 .align 2
 2217              	.L115:
 2218 0044 00000000 	 .word motor
 2219 0048 00000000 	 .word motorCount
 2220              	 .cfi_endproc
 2221              	.LFE600:
 2223              	 .section .text.stopMotors,"ax",%progbits
 2224              	 .align 2
 2225              	 .global stopMotors
 2226              	 .thumb
 2227              	 .thumb_func
 2229              	stopMotors:
 2230              	.LFB601:
 520:../cleanflight/src/main/flight/mixer.c **** 
 521:../cleanflight/src/main/flight/mixer.c **** void stopMotors(void)
 522:../cleanflight/src/main/flight/mixer.c **** {
 2231              	 .loc 5 522 0
 2232              	 .cfi_startproc
 2233              	 
 2234              	 
 2235 0000 80B5     	 push {r7,lr}
 2236              	.LCFI100:
 2237              	 .cfi_def_cfa_offset 8
 2238              	 .cfi_offset 7,-8
 2239              	 .cfi_offset 14,-4
 2240 0002 82B0     	 sub sp,sp,#8
 2241              	.LCFI101:
 2242              	 .cfi_def_cfa_offset 16
 2243 0004 00AF     	 add r7,sp,#0
 2244              	.LCFI102:
 2245              	 .cfi_def_cfa_register 7
 523:../cleanflight/src/main/flight/mixer.c ****     writeAllMotors(disarmMotorOutput);
 2246              	 .loc 5 523 0
 2247 0006 094B     	 ldr r3,.L118
 2248 0008 D3ED007A 	 flds s15,[r3]
 2249 000c FDEEE77A 	 ftosizs s15,s15
 2250 0010 C7ED017A 	 fsts s15,[r7,#4]
 2251 0014 BB88     	 ldrh r3,[r7,#4]
 2252 0016 9BB2     	 uxth r3,r3
 2253 0018 1BB2     	 sxth r3,r3
 2254 001a 1846     	 mov r0,r3
 2255 001c FFF7FEFF 	 bl writeAllMotors
 524:../cleanflight/src/main/flight/mixer.c ****     delay(50); // give the timers and ESCs a chance to react.
 2256              	 .loc 5 524 0
 2257 0020 3220     	 movs r0,#50
 2258 0022 FFF7FEFF 	 bl delay
 525:../cleanflight/src/main/flight/mixer.c **** }
 2259              	 .loc 5 525 0
 2260 0026 0837     	 adds r7,r7,#8
 2261              	.LCFI103:
 2262              	 .cfi_def_cfa_offset 8
 2263 0028 BD46     	 mov sp,r7
 2264              	.LCFI104:
 2265              	 .cfi_def_cfa_register 13
 2266              	 
 2267 002a 80BD     	 pop {r7,pc}
 2268              	.L119:
 2269              	 .align 2
 2270              	.L118:
 2271 002c 00000000 	 .word disarmMotorOutput
 2272              	 .cfi_endproc
 2273              	.LFE601:
 2275              	 .section .text.stopPwmAllMotors,"ax",%progbits
 2276              	 .align 2
 2277              	 .global stopPwmAllMotors
 2278              	 .thumb
 2279              	 .thumb_func
 2281              	stopPwmAllMotors:
 2282              	.LFB602:
 526:../cleanflight/src/main/flight/mixer.c **** 
 527:../cleanflight/src/main/flight/mixer.c **** void stopPwmAllMotors(void)
 528:../cleanflight/src/main/flight/mixer.c **** {
 2283              	 .loc 5 528 0
 2284              	 .cfi_startproc
 2285              	 
 2286              	 
 2287 0000 80B5     	 push {r7,lr}
 2288              	.LCFI105:
 2289              	 .cfi_def_cfa_offset 8
 2290              	 .cfi_offset 7,-8
 2291              	 .cfi_offset 14,-4
 2292 0002 00AF     	 add r7,sp,#0
 2293              	.LCFI106:
 2294              	 .cfi_def_cfa_register 7
 529:../cleanflight/src/main/flight/mixer.c ****     pwmShutdownPulsesForAllMotors(motorCount);
 2295              	 .loc 5 529 0
 2296 0004 044B     	 ldr r3,.L121
 2297 0006 1B78     	 ldrb r3,[r3]
 2298 0008 1846     	 mov r0,r3
 2299 000a FFF7FEFF 	 bl pwmShutdownPulsesForAllMotors
 530:../cleanflight/src/main/flight/mixer.c ****     delayMicroseconds(1500);
 2300              	 .loc 5 530 0
 2301 000e 40F2DC50 	 movw r0,#1500
 2302 0012 FFF7FEFF 	 bl delayMicroseconds
 531:../cleanflight/src/main/flight/mixer.c **** }
 2303              	 .loc 5 531 0
 2304 0016 80BD     	 pop {r7,pc}
 2305              	.L122:
 2306              	 .align 2
 2307              	.L121:
 2308 0018 00000000 	 .word motorCount
 2309              	 .cfi_endproc
 2310              	.LFE602:
 2312              	 .section .bss.throttle,"aw",%nobits
 2313              	 .align 2
 2316              	throttle:
 2317 0000 00000000 	 .space 4
 2318              	 .section .bss.motorOutputMin,"aw",%nobits
 2319              	 .align 2
 2322              	motorOutputMin:
 2323 0000 00000000 	 .space 4
 2324              	 .section .bss.motorRangeMin,"aw",%nobits
 2325              	 .align 2
 2328              	motorRangeMin:
 2329 0000 00000000 	 .space 4
 2330              	 .section .bss.motorRangeMax,"aw",%nobits
 2331              	 .align 2
 2334              	motorRangeMax:
 2335 0000 00000000 	 .space 4
 2336              	 .section .bss.motorOutputRange,"aw",%nobits
 2337              	 .align 2
 2340              	motorOutputRange:
 2341 0000 00000000 	 .space 4
 2342              	 .section .bss.motorOutputMixSign,"aw",%nobits
 2345              	motorOutputMixSign:
 2346 0000 00       	 .space 1
 2347              	 .section .text.calculateThrottleAndCurrentMotorEndpoints,"ax",%progbits
 2348              	 .align 2
 2349              	 .thumb
 2350              	 .thumb_func
 2352              	calculateThrottleAndCurrentMotorEndpoints:
 2353              	.LFB603:
 532:../cleanflight/src/main/flight/mixer.c **** 
 533:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT float throttle = 0;
 534:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT float motorOutputMin;
 535:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT float motorRangeMin;
 536:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT float motorRangeMax;
 537:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT float motorOutputRange;
 538:../cleanflight/src/main/flight/mixer.c **** static FAST_RAM_ZERO_INIT int8_t motorOutputMixSign;
 539:../cleanflight/src/main/flight/mixer.c **** 
 540:../cleanflight/src/main/flight/mixer.c **** static void calculateThrottleAndCurrentMotorEndpoints(timeUs_t currentTimeUs)
 541:../cleanflight/src/main/flight/mixer.c **** {
 2354              	 .loc 5 541 0
 2355              	 .cfi_startproc
 2356              	 
 2357              	 
 2358 0000 80B5     	 push {r7,lr}
 2359              	.LCFI107:
 2360              	 .cfi_def_cfa_offset 8
 2361              	 .cfi_offset 7,-8
 2362              	 .cfi_offset 14,-4
 2363 0002 2DED028B 	 fstmfdd sp!,{d8}
 2364              	.LCFI108:
 2365              	 .cfi_def_cfa_offset 16
 2366              	 .cfi_offset 80,-16
 2367              	 .cfi_offset 81,-12
 2368 0006 84B0     	 sub sp,sp,#16
 2369              	.LCFI109:
 2370              	 .cfi_def_cfa_offset 32
 2371 0008 00AF     	 add r7,sp,#0
 2372              	.LCFI110:
 2373              	 .cfi_def_cfa_register 7
 2374 000a 7860     	 str r0,[r7,#4]
 542:../cleanflight/src/main/flight/mixer.c ****     static uint16_t rcThrottlePrevious = 0;   // Store the last throttle direction for deadband tra
 543:../cleanflight/src/main/flight/mixer.c ****     static timeUs_t reversalTimeUs = 0; // time when motors last reversed in 3D mode
 544:../cleanflight/src/main/flight/mixer.c ****     float currentThrottleInputRange = 0;
 2375              	 .loc 5 544 0
 2376 000c 4FF00003 	 mov r3,#0
 2377 0010 FB60     	 str r3,[r7,#12]
 545:../cleanflight/src/main/flight/mixer.c **** 
 546:../cleanflight/src/main/flight/mixer.c ****     if (feature(FEATURE_3D)) {
 2378              	 .loc 5 546 0
 2379 0012 4FF48050 	 mov r0,#4096
 2380 0016 FFF7FEFF 	 bl feature
 2381 001a 0346     	 mov r3,r0
 2382 001c 002B     	 cmp r3,#0
 2383 001e 00F06781 	 beq .L124
 547:../cleanflight/src/main/flight/mixer.c ****         if (!ARMING_FLAG(ARMED)) {
 2384              	 .loc 5 547 0
 2385 0022 A04B     	 ldr r3,.L148
 2386 0024 1B78     	 ldrb r3,[r3]
 2387 0026 03F00103 	 and r3,r3,#1
 2388 002a 002B     	 cmp r3,#0
 2389 002c 06D1     	 bne .L125
 548:../cleanflight/src/main/flight/mixer.c ****             rcThrottlePrevious = rxConfig()->midrc; // When disarmed set to mid_rc. It always resul
 2390              	 .loc 5 548 0
 2391 002e FFF7FEFF 	 bl rxConfig
 2392 0032 0346     	 mov r3,r0
 2393 0034 5B8A     	 ldrh r3,[r3,#18]
 2394 0036 9AB2     	 uxth r2,r3
 2395 0038 9B4B     	 ldr r3,.L148+4
 2396 003a 1A80     	 strh r2,[r3]
 2397              	.L125:
 549:../cleanflight/src/main/flight/mixer.c ****         }
 550:../cleanflight/src/main/flight/mixer.c **** 
 551:../cleanflight/src/main/flight/mixer.c ****         if (rcCommand[THROTTLE] <= rcCommand3dDeadBandLow) {
 2398              	 .loc 5 551 0
 2399 003c 9B4B     	 ldr r3,.L148+8
 2400 003e 93ED037A 	 flds s14,[r3,#12]
 2401 0042 9B4B     	 ldr r3,.L148+12
 2402 0044 1B88     	 ldrh r3,[r3]
 2403 0046 07EE903A 	 fmsr s15,r3
 2404 004a F8EEE77A 	 fsitos s15,s15
 2405 004e B4EEE77A 	 fcmpes s14,s15
 2406 0052 F1EE10FA 	 fmstat
 2407 0056 54D8     	 bhi .L146
 552:../cleanflight/src/main/flight/mixer.c ****             // INVERTED
 553:../cleanflight/src/main/flight/mixer.c ****             motorRangeMin = motorOutputLow;
 2408              	 .loc 5 553 0
 2409 0058 964B     	 ldr r3,.L148+16
 2410 005a 1B68     	 ldr r3,[r3]
 2411 005c 964A     	 ldr r2,.L148+20
 2412 005e 1360     	 str r3,[r2]
 554:../cleanflight/src/main/flight/mixer.c ****             motorRangeMax = deadbandMotor3dLow;
 2413              	 .loc 5 554 0
 2414 0060 964B     	 ldr r3,.L148+24
 2415 0062 1B68     	 ldr r3,[r3]
 2416 0064 964A     	 ldr r2,.L148+28
 2417 0066 1360     	 str r3,[r2]
 555:../cleanflight/src/main/flight/mixer.c ****             if (isMotorProtocolDshot()) {
 2418              	 .loc 5 555 0
 2419 0068 FFF7FEFF 	 bl isMotorProtocolDshot
 2420 006c 0346     	 mov r3,r0
 2421 006e 002B     	 cmp r3,#0
 2422 0070 0FD0     	 beq .L128
 556:../cleanflight/src/main/flight/mixer.c ****                 motorOutputMin = motorOutputLow;
 2423              	 .loc 5 556 0
 2424 0072 904B     	 ldr r3,.L148+16
 2425 0074 1B68     	 ldr r3,[r3]
 2426 0076 934A     	 ldr r2,.L148+32
 2427 0078 1360     	 str r3,[r2]
 557:../cleanflight/src/main/flight/mixer.c ****                 motorOutputRange = deadbandMotor3dLow - motorOutputLow;
 2428              	 .loc 5 557 0
 2429 007a 904B     	 ldr r3,.L148+24
 2430 007c 93ED007A 	 flds s14,[r3]
 2431 0080 8C4B     	 ldr r3,.L148+16
 2432 0082 D3ED007A 	 flds s15,[r3]
 2433 0086 77EE677A 	 fsubs s15,s14,s15
 2434 008a 8F4B     	 ldr r3,.L148+36
 2435 008c C3ED007A 	 fsts s15,[r3]
 2436 0090 0EE0     	 b .L129
 2437              	.L128:
 558:../cleanflight/src/main/flight/mixer.c ****             } else {
 559:../cleanflight/src/main/flight/mixer.c ****                 motorOutputMin = deadbandMotor3dLow;
 2438              	 .loc 5 559 0
 2439 0092 8A4B     	 ldr r3,.L148+24
 2440 0094 1B68     	 ldr r3,[r3]
 2441 0096 8B4A     	 ldr r2,.L148+32
 2442 0098 1360     	 str r3,[r2]
 560:../cleanflight/src/main/flight/mixer.c ****                 motorOutputRange = motorOutputLow - deadbandMotor3dLow;
 2443              	 .loc 5 560 0
 2444 009a 864B     	 ldr r3,.L148+16
 2445 009c 93ED007A 	 flds s14,[r3]
 2446 00a0 864B     	 ldr r3,.L148+24
 2447 00a2 D3ED007A 	 flds s15,[r3]
 2448 00a6 77EE677A 	 fsubs s15,s14,s15
 2449 00aa 874B     	 ldr r3,.L148+36
 2450 00ac C3ED007A 	 fsts s15,[r3]
 2451              	.L129:
 561:../cleanflight/src/main/flight/mixer.c ****             }
 562:../cleanflight/src/main/flight/mixer.c ****             if (motorOutputMixSign != -1) {
 2452              	 .loc 5 562 0
 2453 00b0 864B     	 ldr r3,.L148+40
 2454 00b2 1B78     	 ldrb r3,[r3]
 2455 00b4 5BB2     	 sxtb r3,r3
 2456 00b6 B3F1FF3F 	 cmp r3,#-1
 2457 00ba 02D0     	 beq .L130
 563:../cleanflight/src/main/flight/mixer.c ****                 reversalTimeUs = currentTimeUs;
 2458              	 .loc 5 563 0
 2459 00bc 844A     	 ldr r2,.L148+44
 2460 00be 7B68     	 ldr r3,[r7,#4]
 2461 00c0 1360     	 str r3,[r2]
 2462              	.L130:
 564:../cleanflight/src/main/flight/mixer.c ****             }
 565:../cleanflight/src/main/flight/mixer.c ****             motorOutputMixSign = -1;
 2463              	 .loc 5 565 0
 2464 00c2 824B     	 ldr r3,.L148+40
 2465 00c4 FF22     	 movs r2,#255
 2466 00c6 1A70     	 strb r2,[r3]
 566:../cleanflight/src/main/flight/mixer.c ****             rcThrottlePrevious = rcCommand[THROTTLE];
 2467              	 .loc 5 566 0
 2468 00c8 784B     	 ldr r3,.L148+8
 2469 00ca D3ED037A 	 flds s15,[r3,#12]
 2470 00ce FCEEE77A 	 ftouizs s15,s15
 2471 00d2 C7ED007A 	 fsts s15,[r7]
 2472 00d6 3B88     	 ldrh r3,[r7]
 2473 00d8 9AB2     	 uxth r2,r3
 2474 00da 734B     	 ldr r3,.L148+4
 2475 00dc 1A80     	 strh r2,[r3]
 567:../cleanflight/src/main/flight/mixer.c ****             throttle = rcCommand3dDeadBandLow - rcCommand[THROTTLE];
 2476              	 .loc 5 567 0
 2477 00de 744B     	 ldr r3,.L148+12
 2478 00e0 1B88     	 ldrh r3,[r3]
 2479 00e2 07EE903A 	 fmsr s15,r3
 2480 00e6 B8EEE77A 	 fsitos s14,s15
 2481 00ea 704B     	 ldr r3,.L148+8
 2482 00ec D3ED037A 	 flds s15,[r3,#12]
 2483 00f0 77EE677A 	 fsubs s15,s14,s15
 2484 00f4 774B     	 ldr r3,.L148+48
 2485 00f6 C3ED007A 	 fsts s15,[r3]
 568:../cleanflight/src/main/flight/mixer.c ****             currentThrottleInputRange = rcCommandThrottleRange3dLow;
 2486              	 .loc 5 568 0
 2487 00fa 774B     	 ldr r3,.L148+52
 2488 00fc 1B68     	 ldr r3,[r3]
 2489 00fe FB60     	 str r3,[r7,#12]
 2490 0100 C6E0     	 b .L131
 2491              	.L146:
 569:../cleanflight/src/main/flight/mixer.c ****         } else if (rcCommand[THROTTLE] >= rcCommand3dDeadBandHigh) {
 2492              	 .loc 5 569 0
 2493 0102 6A4B     	 ldr r3,.L148+8
 2494 0104 93ED037A 	 flds s14,[r3,#12]
 2495 0108 744B     	 ldr r3,.L148+56
 2496 010a 1B88     	 ldrh r3,[r3]
 2497 010c 07EE903A 	 fmsr s15,r3
 2498 0110 F8EEE77A 	 fsitos s15,s15
 2499 0114 B4EEE77A 	 fcmpes s14,s15
 2500 0118 F1EE10FA 	 fmstat
 2501 011c 3EDB     	 blt .L147
 570:../cleanflight/src/main/flight/mixer.c ****             // NORMAL
 571:../cleanflight/src/main/flight/mixer.c ****             motorRangeMin = deadbandMotor3dHigh;
 2502              	 .loc 5 571 0
 2503 011e 704B     	 ldr r3,.L148+60
 2504 0120 1B68     	 ldr r3,[r3]
 2505 0122 654A     	 ldr r2,.L148+20
 2506 0124 1360     	 str r3,[r2]
 572:../cleanflight/src/main/flight/mixer.c ****             motorRangeMax = motorOutputHigh;
 2507              	 .loc 5 572 0
 2508 0126 6F4B     	 ldr r3,.L148+64
 2509 0128 1B68     	 ldr r3,[r3]
 2510 012a 654A     	 ldr r2,.L148+28
 2511 012c 1360     	 str r3,[r2]
 573:../cleanflight/src/main/flight/mixer.c ****             motorOutputMin = deadbandMotor3dHigh;
 2512              	 .loc 5 573 0
 2513 012e 6C4B     	 ldr r3,.L148+60
 2514 0130 1B68     	 ldr r3,[r3]
 2515 0132 644A     	 ldr r2,.L148+32
 2516 0134 1360     	 str r3,[r2]
 574:../cleanflight/src/main/flight/mixer.c ****             motorOutputRange = motorOutputHigh - deadbandMotor3dHigh;
 2517              	 .loc 5 574 0
 2518 0136 6B4B     	 ldr r3,.L148+64
 2519 0138 93ED007A 	 flds s14,[r3]
 2520 013c 684B     	 ldr r3,.L148+60
 2521 013e D3ED007A 	 flds s15,[r3]
 2522 0142 77EE677A 	 fsubs s15,s14,s15
 2523 0146 604B     	 ldr r3,.L148+36
 2524 0148 C3ED007A 	 fsts s15,[r3]
 575:../cleanflight/src/main/flight/mixer.c ****             if (motorOutputMixSign != 1) {
 2525              	 .loc 5 575 0
 2526 014c 5F4B     	 ldr r3,.L148+40
 2527 014e 1B78     	 ldrb r3,[r3]
 2528 0150 5BB2     	 sxtb r3,r3
 2529 0152 012B     	 cmp r3,#1
 2530 0154 02D0     	 beq .L134
 576:../cleanflight/src/main/flight/mixer.c ****                 reversalTimeUs = currentTimeUs;
 2531              	 .loc 5 576 0
 2532 0156 5E4A     	 ldr r2,.L148+44
 2533 0158 7B68     	 ldr r3,[r7,#4]
 2534 015a 1360     	 str r3,[r2]
 2535              	.L134:
 577:../cleanflight/src/main/flight/mixer.c ****             }
 578:../cleanflight/src/main/flight/mixer.c ****             motorOutputMixSign = 1;
 2536              	 .loc 5 578 0
 2537 015c 5B4B     	 ldr r3,.L148+40
 2538 015e 0122     	 movs r2,#1
 2539 0160 1A70     	 strb r2,[r3]
 579:../cleanflight/src/main/flight/mixer.c ****             rcThrottlePrevious = rcCommand[THROTTLE];
 2540              	 .loc 5 579 0
 2541 0162 524B     	 ldr r3,.L148+8
 2542 0164 D3ED037A 	 flds s15,[r3,#12]
 2543 0168 FCEEE77A 	 ftouizs s15,s15
 2544 016c C7ED007A 	 fsts s15,[r7]
 2545 0170 3B88     	 ldrh r3,[r7]
 2546 0172 9AB2     	 uxth r2,r3
 2547 0174 4C4B     	 ldr r3,.L148+4
 2548 0176 1A80     	 strh r2,[r3]
 580:../cleanflight/src/main/flight/mixer.c ****             throttle = rcCommand[THROTTLE] - rcCommand3dDeadBandHigh;
 2549              	 .loc 5 580 0
 2550 0178 4C4B     	 ldr r3,.L148+8
 2551 017a 93ED037A 	 flds s14,[r3,#12]
 2552 017e 574B     	 ldr r3,.L148+56
 2553 0180 1B88     	 ldrh r3,[r3]
 2554 0182 07EE903A 	 fmsr s15,r3
 2555 0186 F8EEE77A 	 fsitos s15,s15
 2556 018a 77EE677A 	 fsubs s15,s14,s15
 2557 018e 514B     	 ldr r3,.L148+48
 2558 0190 C3ED007A 	 fsts s15,[r3]
 581:../cleanflight/src/main/flight/mixer.c ****             currentThrottleInputRange = rcCommandThrottleRange3dHigh;
 2559              	 .loc 5 581 0
 2560 0194 544B     	 ldr r3,.L148+68
 2561 0196 1B68     	 ldr r3,[r3]
 2562 0198 FB60     	 str r3,[r7,#12]
 2563 019a 79E0     	 b .L131
 2564              	.L147:
 582:../cleanflight/src/main/flight/mixer.c ****         } else if ((rcThrottlePrevious <= rcCommand3dDeadBandLow &&
 2565              	 .loc 5 582 0
 2566 019c 424B     	 ldr r3,.L148+4
 2567 019e 1A88     	 ldrh r2,[r3]
 2568 01a0 434B     	 ldr r3,.L148+12
 2569 01a2 1B88     	 ldrh r3,[r3]
 2570 01a4 9A42     	 cmp r2,r3
 2571 01a6 05D8     	 bhi .L135
 583:../cleanflight/src/main/flight/mixer.c ****                 !flight3DConfigMutable()->switched_mode3d) ||
 2572              	 .loc 5 583 0 discriminator 1
 2573 01a8 FFF7FEFF 	 bl flight3DConfigMutable
 2574 01ac 0346     	 mov r3,r0
 2575 01ae 1B7B     	 ldrb r3,[r3,#12]
 582:../cleanflight/src/main/flight/mixer.c ****         } else if ((rcThrottlePrevious <= rcCommand3dDeadBandLow &&
 2576              	 .loc 5 582 0 discriminator 1
 2577 01b0 002B     	 cmp r3,#0
 2578 01b2 04D0     	 beq .L136
 2579              	.L135:
 584:../cleanflight/src/main/flight/mixer.c ****                 isMotorsReversed()) {
 2580              	 .loc 5 584 0
 2581 01b4 FFF7FEFF 	 bl isMotorsReversed
 2582 01b8 0346     	 mov r3,r0
 583:../cleanflight/src/main/flight/mixer.c ****                 !flight3DConfigMutable()->switched_mode3d) ||
 2583              	 .loc 5 583 0
 2584 01ba 002B     	 cmp r3,#0
 2585 01bc 3FD0     	 beq .L137
 2586              	.L136:
 585:../cleanflight/src/main/flight/mixer.c ****             // INVERTED_TO_DEADBAND
 586:../cleanflight/src/main/flight/mixer.c ****             motorRangeMin = motorOutputLow;
 2587              	 .loc 5 586 0
 2588 01be 3D4B     	 ldr r3,.L148+16
 2589 01c0 1B68     	 ldr r3,[r3]
 2590 01c2 3D4A     	 ldr r2,.L148+20
 2591 01c4 1360     	 str r3,[r2]
 587:../cleanflight/src/main/flight/mixer.c ****             motorRangeMax = deadbandMotor3dLow;
 2592              	 .loc 5 587 0
 2593 01c6 3D4B     	 ldr r3,.L148+24
 2594 01c8 1B68     	 ldr r3,[r3]
 2595 01ca 3D4A     	 ldr r2,.L148+28
 2596 01cc 1360     	 str r3,[r2]
 588:../cleanflight/src/main/flight/mixer.c ****             if (isMotorProtocolDshot()) {
 2597              	 .loc 5 588 0
 2598 01ce FFF7FEFF 	 bl isMotorProtocolDshot
 2599 01d2 0346     	 mov r3,r0
 2600 01d4 002B     	 cmp r3,#0
 2601 01d6 0FD0     	 beq .L138
 589:../cleanflight/src/main/flight/mixer.c ****                 motorOutputMin = motorOutputLow;
 2602              	 .loc 5 589 0
 2603 01d8 364B     	 ldr r3,.L148+16
 2604 01da 1B68     	 ldr r3,[r3]
 2605 01dc 394A     	 ldr r2,.L148+32
 2606 01de 1360     	 str r3,[r2]
 590:../cleanflight/src/main/flight/mixer.c ****                 motorOutputRange = deadbandMotor3dLow - motorOutputLow;
 2607              	 .loc 5 590 0
 2608 01e0 364B     	 ldr r3,.L148+24
 2609 01e2 93ED007A 	 flds s14,[r3]
 2610 01e6 334B     	 ldr r3,.L148+16
 2611 01e8 D3ED007A 	 flds s15,[r3]
 2612 01ec 77EE677A 	 fsubs s15,s14,s15
 2613 01f0 354B     	 ldr r3,.L148+36
 2614 01f2 C3ED007A 	 fsts s15,[r3]
 2615 01f6 0EE0     	 b .L139
 2616              	.L138:
 591:../cleanflight/src/main/flight/mixer.c ****             } else {
 592:../cleanflight/src/main/flight/mixer.c ****                 motorOutputMin = deadbandMotor3dLow;
 2617              	 .loc 5 592 0
 2618 01f8 304B     	 ldr r3,.L148+24
 2619 01fa 1B68     	 ldr r3,[r3]
 2620 01fc 314A     	 ldr r2,.L148+32
 2621 01fe 1360     	 str r3,[r2]
 593:../cleanflight/src/main/flight/mixer.c ****                 motorOutputRange = motorOutputLow - deadbandMotor3dLow;
 2622              	 .loc 5 593 0
 2623 0200 2C4B     	 ldr r3,.L148+16
 2624 0202 93ED007A 	 flds s14,[r3]
 2625 0206 2D4B     	 ldr r3,.L148+24
 2626 0208 D3ED007A 	 flds s15,[r3]
 2627 020c 77EE677A 	 fsubs s15,s14,s15
 2628 0210 2D4B     	 ldr r3,.L148+36
 2629 0212 C3ED007A 	 fsts s15,[r3]
 2630              	.L139:
 594:../cleanflight/src/main/flight/mixer.c ****             }
 595:../cleanflight/src/main/flight/mixer.c ****             if (motorOutputMixSign != -1) {
 2631              	 .loc 5 595 0
 2632 0216 2D4B     	 ldr r3,.L148+40
 2633 0218 1B78     	 ldrb r3,[r3]
 2634 021a 5BB2     	 sxtb r3,r3
 2635 021c B3F1FF3F 	 cmp r3,#-1
 2636 0220 02D0     	 beq .L140
 596:../cleanflight/src/main/flight/mixer.c ****                 reversalTimeUs = currentTimeUs;
 2637              	 .loc 5 596 0
 2638 0222 2B4A     	 ldr r2,.L148+44
 2639 0224 7B68     	 ldr r3,[r7,#4]
 2640 0226 1360     	 str r3,[r2]
 2641              	.L140:
 597:../cleanflight/src/main/flight/mixer.c ****             }
 598:../cleanflight/src/main/flight/mixer.c ****             motorOutputMixSign = -1;
 2642              	 .loc 5 598 0
 2643 0228 284B     	 ldr r3,.L148+40
 2644 022a FF22     	 movs r2,#255
 2645 022c 1A70     	 strb r2,[r3]
 599:../cleanflight/src/main/flight/mixer.c ****             throttle = 0;
 2646              	 .loc 5 599 0
 2647 022e 294B     	 ldr r3,.L148+48
 2648 0230 4FF00002 	 mov r2,#0
 2649 0234 1A60     	 str r2,[r3]
 600:../cleanflight/src/main/flight/mixer.c ****             currentThrottleInputRange = rcCommandThrottleRange3dLow;
 2650              	 .loc 5 600 0
 2651 0236 284B     	 ldr r3,.L148+52
 2652 0238 1B68     	 ldr r3,[r3]
 2653 023a FB60     	 str r3,[r7,#12]
 2654 023c 28E0     	 b .L131
 2655              	.L137:
 601:../cleanflight/src/main/flight/mixer.c ****         } else {
 602:../cleanflight/src/main/flight/mixer.c ****             // NORMAL_TO_DEADBAND
 603:../cleanflight/src/main/flight/mixer.c ****             motorRangeMin = deadbandMotor3dHigh;
 2656              	 .loc 5 603 0
 2657 023e 284B     	 ldr r3,.L148+60
 2658 0240 1B68     	 ldr r3,[r3]
 2659 0242 1D4A     	 ldr r2,.L148+20
 2660 0244 1360     	 str r3,[r2]
 604:../cleanflight/src/main/flight/mixer.c ****             motorRangeMax = motorOutputHigh;
 2661              	 .loc 5 604 0
 2662 0246 274B     	 ldr r3,.L148+64
 2663 0248 1B68     	 ldr r3,[r3]
 2664 024a 1D4A     	 ldr r2,.L148+28
 2665 024c 1360     	 str r3,[r2]
 605:../cleanflight/src/main/flight/mixer.c ****             motorOutputMin = deadbandMotor3dHigh;
 2666              	 .loc 5 605 0
 2667 024e 244B     	 ldr r3,.L148+60
 2668 0250 1B68     	 ldr r3,[r3]
 2669 0252 1C4A     	 ldr r2,.L148+32
 2670 0254 1360     	 str r3,[r2]
 606:../cleanflight/src/main/flight/mixer.c ****             motorOutputRange = motorOutputHigh - deadbandMotor3dHigh;
 2671              	 .loc 5 606 0
 2672 0256 234B     	 ldr r3,.L148+64
 2673 0258 93ED007A 	 flds s14,[r3]
 2674 025c 204B     	 ldr r3,.L148+60
 2675 025e D3ED007A 	 flds s15,[r3]
 2676 0262 77EE677A 	 fsubs s15,s14,s15
 2677 0266 184B     	 ldr r3,.L148+36
 2678 0268 C3ED007A 	 fsts s15,[r3]
 607:../cleanflight/src/main/flight/mixer.c ****             if (motorOutputMixSign != 1) {
 2679              	 .loc 5 607 0
 2680 026c 174B     	 ldr r3,.L148+40
 2681 026e 1B78     	 ldrb r3,[r3]
 2682 0270 5BB2     	 sxtb r3,r3
 2683 0272 012B     	 cmp r3,#1
 2684 0274 02D0     	 beq .L141
 608:../cleanflight/src/main/flight/mixer.c ****                 reversalTimeUs = currentTimeUs;
 2685              	 .loc 5 608 0
 2686 0276 164A     	 ldr r2,.L148+44
 2687 0278 7B68     	 ldr r3,[r7,#4]
 2688 027a 1360     	 str r3,[r2]
 2689              	.L141:
 609:../cleanflight/src/main/flight/mixer.c ****             }
 610:../cleanflight/src/main/flight/mixer.c ****             motorOutputMixSign = 1;
 2690              	 .loc 5 610 0
 2691 027c 134B     	 ldr r3,.L148+40
 2692 027e 0122     	 movs r2,#1
 2693 0280 1A70     	 strb r2,[r3]
 611:../cleanflight/src/main/flight/mixer.c ****             throttle = 0;
 2694              	 .loc 5 611 0
 2695 0282 144B     	 ldr r3,.L148+48
 2696 0284 4FF00002 	 mov r2,#0
 2697 0288 1A60     	 str r2,[r3]
 612:../cleanflight/src/main/flight/mixer.c ****             currentThrottleInputRange = rcCommandThrottleRange3dHigh;
 2698              	 .loc 5 612 0
 2699 028a 174B     	 ldr r3,.L148+68
 2700 028c 1B68     	 ldr r3,[r3]
 2701 028e FB60     	 str r3,[r7,#12]
 2702              	.L131:
 613:../cleanflight/src/main/flight/mixer.c ****         }
 614:../cleanflight/src/main/flight/mixer.c ****         if (currentTimeUs - reversalTimeUs < 250000) {
 2703              	 .loc 5 614 0
 2704 0290 0F4B     	 ldr r3,.L148+44
 2705 0292 1B68     	 ldr r3,[r3]
 2706 0294 7A68     	 ldr r2,[r7,#4]
 2707 0296 D31A     	 subs r3,r2,r3
 2708 0298 144A     	 ldr r2,.L148+72
 2709 029a 9342     	 cmp r3,r2
 2710 029c 5ED8     	 bhi .L143
 615:../cleanflight/src/main/flight/mixer.c ****             // keep ITerm zero for 250ms after motor reversal
 616:../cleanflight/src/main/flight/mixer.c ****             pidResetITerm();
 2711              	 .loc 5 616 0
 2712 029e FFF7FEFF 	 bl pidResetITerm
 2713 02a2 5BE0     	 b .L143
 2714              	.L149:
 2715              	 .align 2
 2716              	.L148:
 2717 02a4 00000000 	 .word armingFlags
 2718 02a8 00000000 	 .word rcThrottlePrevious.14657
 2719 02ac 00000000 	 .word rcCommand
 2720 02b0 00000000 	 .word rcCommand3dDeadBandLow
 2721 02b4 00000000 	 .word motorOutputLow
 2722 02b8 00000000 	 .word motorRangeMin
 2723 02bc 00000000 	 .word deadbandMotor3dLow
 2724 02c0 00000000 	 .word motorRangeMax
 2725 02c4 00000000 	 .word motorOutputMin
 2726 02c8 00000000 	 .word motorOutputRange
 2727 02cc 00000000 	 .word motorOutputMixSign
 2728 02d0 00000000 	 .word reversalTimeUs.14658
 2729 02d4 00000000 	 .word throttle
 2730 02d8 00000000 	 .word rcCommandThrottleRange3dLow
 2731 02dc 00000000 	 .word rcCommand3dDeadBandHigh
 2732 02e0 00000000 	 .word deadbandMotor3dHigh
 2733 02e4 00000000 	 .word motorOutputHigh
 2734 02e8 00000000 	 .word rcCommandThrottleRange3dHigh
 2735 02ec 8FD00300 	 .word 249999
 2736              	.L124:
 617:../cleanflight/src/main/flight/mixer.c ****         }
 618:../cleanflight/src/main/flight/mixer.c ****     } else {
 619:../cleanflight/src/main/flight/mixer.c ****         throttle = rcCommand[THROTTLE] - rxConfig()->mincheck + throttleAngleCorrection;
 2737              	 .loc 5 619 0
 2738 02f0 274B     	 ldr r3,.L150
 2739 02f2 93ED038A 	 flds s16,[r3,#12]
 2740 02f6 FFF7FEFF 	 bl rxConfig
 2741 02fa 0346     	 mov r3,r0
 2742 02fc 9B8A     	 ldrh r3,[r3,#20]
 2743 02fe 9BB2     	 uxth r3,r3
 2744 0300 07EE903A 	 fmsr s15,r3
 2745 0304 F8EEE77A 	 fsitos s15,s15
 2746 0308 38EE677A 	 fsubs s14,s16,s15
 2747 030c 214B     	 ldr r3,.L150+4
 2748 030e 1B68     	 ldr r3,[r3]
 2749 0310 07EE903A 	 fmsr s15,r3
 2750 0314 F8EEE77A 	 fsitos s15,s15
 2751 0318 77EE277A 	 fadds s15,s14,s15
 2752 031c 1E4B     	 ldr r3,.L150+8
 2753 031e C3ED007A 	 fsts s15,[r3]
 620:../cleanflight/src/main/flight/mixer.c ****         currentThrottleInputRange = rcCommandThrottleRange;
 2754              	 .loc 5 620 0
 2755 0322 1E4B     	 ldr r3,.L150+12
 2756 0324 1B68     	 ldr r3,[r3]
 2757 0326 FB60     	 str r3,[r7,#12]
 621:../cleanflight/src/main/flight/mixer.c ****         motorRangeMin = motorOutputLow;
 2758              	 .loc 5 621 0
 2759 0328 1D4B     	 ldr r3,.L150+16
 2760 032a 1B68     	 ldr r3,[r3]
 2761 032c 1D4A     	 ldr r2,.L150+20
 2762 032e 1360     	 str r3,[r2]
 622:../cleanflight/src/main/flight/mixer.c ****         motorRangeMax = motorOutputHigh;
 2763              	 .loc 5 622 0
 2764 0330 1D4B     	 ldr r3,.L150+24
 2765 0332 1B68     	 ldr r3,[r3]
 2766 0334 1D4A     	 ldr r2,.L150+28
 2767 0336 1360     	 str r3,[r2]
 623:../cleanflight/src/main/flight/mixer.c ****         motorOutputMin = motorOutputLow;
 2768              	 .loc 5 623 0
 2769 0338 194B     	 ldr r3,.L150+16
 2770 033a 1B68     	 ldr r3,[r3]
 2771 033c 1C4A     	 ldr r2,.L150+32
 2772 033e 1360     	 str r3,[r2]
 624:../cleanflight/src/main/flight/mixer.c ****         motorOutputRange = motorOutputHigh - motorOutputLow;
 2773              	 .loc 5 624 0
 2774 0340 194B     	 ldr r3,.L150+24
 2775 0342 93ED007A 	 flds s14,[r3]
 2776 0346 164B     	 ldr r3,.L150+16
 2777 0348 D3ED007A 	 flds s15,[r3]
 2778 034c 77EE677A 	 fsubs s15,s14,s15
 2779 0350 184B     	 ldr r3,.L150+36
 2780 0352 C3ED007A 	 fsts s15,[r3]
 625:../cleanflight/src/main/flight/mixer.c ****         motorOutputMixSign = 1;
 2781              	 .loc 5 625 0
 2782 0356 184B     	 ldr r3,.L150+40
 2783 0358 0122     	 movs r2,#1
 2784 035a 1A70     	 strb r2,[r3]
 2785              	.L143:
 626:../cleanflight/src/main/flight/mixer.c ****     }
 627:../cleanflight/src/main/flight/mixer.c **** 
 628:../cleanflight/src/main/flight/mixer.c ****     throttle = constrainf(throttle / currentThrottleInputRange, 0.0f, 1.0f);
 2786              	 .loc 5 628 0
 2787 035c 0E4B     	 ldr r3,.L150+8
 2788 035e 93ED007A 	 flds s14,[r3]
 2789 0362 D7ED037A 	 flds s15,[r7,#12]
 2790 0366 C7EE277A 	 fdivs s15,s14,s15
 2791 036a B0EE670A 	 fcpys s0,s15
 2792 036e DFED130A 	 flds s1,.L150+44
 2793 0372 B7EE001A 	 fconsts s2,#112
 2794 0376 FFF7FEFF 	 bl constrainf
 2795 037a F0EE407A 	 fcpys s15,s0
 2796 037e 064B     	 ldr r3,.L150+8
 2797 0380 C3ED007A 	 fsts s15,[r3]
 629:../cleanflight/src/main/flight/mixer.c **** }
 2798              	 .loc 5 629 0
 2799 0384 1037     	 adds r7,r7,#16
 2800              	.LCFI111:
 2801              	 .cfi_def_cfa_offset 16
 2802 0386 BD46     	 mov sp,r7
 2803              	.LCFI112:
 2804              	 .cfi_def_cfa_register 13
 2805              	 
 2806 0388 BDEC028B 	 fldmfdd sp!,{d8}
 2807              	.LCFI113:
 2808              	 .cfi_restore 80
 2809              	 .cfi_restore 81
 2810              	 .cfi_def_cfa_offset 8
 2811 038c 80BD     	 pop {r7,pc}
 2812              	.L151:
 2813 038e 00BF     	 .align 2
 2814              	.L150:
 2815 0390 00000000 	 .word rcCommand
 2816 0394 00000000 	 .word throttleAngleCorrection
 2817 0398 00000000 	 .word throttle
 2818 039c 00000000 	 .word rcCommandThrottleRange
 2819 03a0 00000000 	 .word motorOutputLow
 2820 03a4 00000000 	 .word motorRangeMin
 2821 03a8 00000000 	 .word motorOutputHigh
 2822 03ac 00000000 	 .word motorRangeMax
 2823 03b0 00000000 	 .word motorOutputMin
 2824 03b4 00000000 	 .word motorOutputRange
 2825 03b8 00000000 	 .word motorOutputMixSign
 2826 03bc 00000000 	 .word 0
 2827              	 .cfi_endproc
 2828              	.LFE603:
 2830              	 .section .text.applyFlipOverAfterCrashModeToMotors,"ax",%progbits
 2831              	 .align 2
 2832              	 .thumb
 2833              	 .thumb_func
 2835              	applyFlipOverAfterCrashModeToMotors:
 2836              	.LFB604:
 630:../cleanflight/src/main/flight/mixer.c **** 
 631:../cleanflight/src/main/flight/mixer.c **** #define CRASH_FLIP_DEADBAND 20
 632:../cleanflight/src/main/flight/mixer.c **** #define CRASH_FLIP_STICK_MINF 0.15f
 633:../cleanflight/src/main/flight/mixer.c **** 
 634:../cleanflight/src/main/flight/mixer.c **** static void applyFlipOverAfterCrashModeToMotors(void)
 635:../cleanflight/src/main/flight/mixer.c **** {
 2837              	 .loc 5 635 0
 2838              	 .cfi_startproc
 2839              	 
 2840              	 
 2841 0000 90B5     	 push {r4,r7,lr}
 2842              	.LCFI114:
 2843              	 .cfi_def_cfa_offset 12
 2844              	 .cfi_offset 4,-12
 2845              	 .cfi_offset 7,-8
 2846              	 .cfi_offset 14,-4
 2847 0002 2DED028B 	 fstmfdd sp!,{d8}
 2848              	.LCFI115:
 2849              	 .cfi_def_cfa_offset 20
 2850              	 .cfi_offset 80,-20
 2851              	 .cfi_offset 81,-16
 2852 0006 95B0     	 sub sp,sp,#84
 2853              	.LCFI116:
 2854              	 .cfi_def_cfa_offset 104
 2855 0008 00AF     	 add r7,sp,#0
 2856              	.LCFI117:
 2857              	 .cfi_def_cfa_register 7
 636:../cleanflight/src/main/flight/mixer.c ****     if (ARMING_FLAG(ARMED)) {
 2858              	 .loc 5 636 0
 2859 000a C74B     	 ldr r3,.L212
 2860 000c 1B78     	 ldrb r3,[r3]
 2861 000e 03F00103 	 and r3,r3,#1
 2862 0012 002B     	 cmp r3,#0
 2863 0014 00F06D81 	 beq .L153
 2864              	.LBB11:
 637:../cleanflight/src/main/flight/mixer.c ****         float stickDeflectionPitchAbs = getRcDeflectionAbs(FD_PITCH);
 2865              	 .loc 5 637 0
 2866 0018 0120     	 movs r0,#1
 2867 001a FFF7FEFF 	 bl getRcDeflectionAbs
 2868 001e 3863     	 str r0,[r7,#48]
 638:../cleanflight/src/main/flight/mixer.c ****         float stickDeflectionRollAbs = getRcDeflectionAbs(FD_ROLL);
 2869              	 .loc 5 638 0
 2870 0020 0020     	 movs r0,#0
 2871 0022 FFF7FEFF 	 bl getRcDeflectionAbs
 2872 0026 F862     	 str r0,[r7,#44]
 639:../cleanflight/src/main/flight/mixer.c ****         float stickDeflectionYawAbs = getRcDeflectionAbs(FD_YAW);
 2873              	 .loc 5 639 0
 2874 0028 0220     	 movs r0,#2
 2875 002a FFF7FEFF 	 bl getRcDeflectionAbs
 2876 002e B862     	 str r0,[r7,#40]
 640:../cleanflight/src/main/flight/mixer.c ****         float signPitch = getRcDeflection(FD_PITCH) < 0 ? 1 : -1;
 2877              	 .loc 5 640 0
 2878 0030 0120     	 movs r0,#1
 2879 0032 FFF7FEFF 	 bl getRcDeflection
 2880 0036 07EE900A 	 fmsr s15,r0
 2881 003a F5EEC07A 	 fcmpezs s15
 2882 003e F1EE10FA 	 fmstat
 2883 0042 02D5     	 bpl .L203
 2884              	 .loc 5 640 0 is_stmt 0 discriminator 1
 2885 0044 4FF07E53 	 mov r3,#1065353216
 2886 0048 00E0     	 b .L156
 2887              	.L203:
 2888              	 .loc 5 640 0 discriminator 2
 2889 004a B84B     	 ldr r3,.L212+4
 2890              	.L156:
 2891              	 .loc 5 640 0 discriminator 4
 2892 004c FB64     	 str r3,[r7,#76]
 641:../cleanflight/src/main/flight/mixer.c ****         float signRoll = getRcDeflection(FD_ROLL) < 0 ? 1 : -1;
 2893              	 .loc 5 641 0 is_stmt 1 discriminator 4
 2894 004e 0020     	 movs r0,#0
 2895 0050 FFF7FEFF 	 bl getRcDeflection
 2896 0054 07EE900A 	 fmsr s15,r0
 2897 0058 F5EEC07A 	 fcmpezs s15
 2898 005c F1EE10FA 	 fmstat
 2899 0060 02D5     	 bpl .L204
 2900              	 .loc 5 641 0 is_stmt 0 discriminator 1
 2901 0062 4FF07E53 	 mov r3,#1065353216
 2902 0066 00E0     	 b .L159
 2903              	.L204:
 2904              	 .loc 5 641 0 discriminator 2
 2905 0068 B04B     	 ldr r3,.L212+4
 2906              	.L159:
 2907              	 .loc 5 641 0 discriminator 4
 2908 006a BB64     	 str r3,[r7,#72]
 642:../cleanflight/src/main/flight/mixer.c ****         float signYaw = (getRcDeflection(FD_YAW) < 0 ? 1 : -1) * (mixerConfig()->yaw_motors_reverse
 2909              	 .loc 5 642 0 is_stmt 1 discriminator 4
 2910 006c 0220     	 movs r0,#2
 2911 006e FFF7FEFF 	 bl getRcDeflection
 2912 0072 07EE900A 	 fmsr s15,r0
 2913 0076 F5EEC07A 	 fcmpezs s15
 2914 007a F1EE10FA 	 fmstat
 2915 007e 01D5     	 bpl .L205
 2916              	 .loc 5 642 0 is_stmt 0 discriminator 1
 2917 0080 0124     	 movs r4,#1
 2918 0082 01E0     	 b .L162
 2919              	.L205:
 2920              	 .loc 5 642 0 discriminator 2
 2921 0084 4FF0FF34 	 mov r4,#-1
 2922              	.L162:
 2923              	 .loc 5 642 0 discriminator 4
 2924 0088 FFF7FEFF 	 bl mixerConfig
 2925 008c 0346     	 mov r3,r0
 2926 008e 5B78     	 ldrb r3,[r3,#1]
 2927 0090 002B     	 cmp r3,#0
 2928 0092 01D0     	 beq .L163
 2929              	 .loc 5 642 0 discriminator 5
 2930 0094 0123     	 movs r3,#1
 2931 0096 01E0     	 b .L164
 2932              	.L163:
 2933              	 .loc 5 642 0 discriminator 6
 2934 0098 4FF0FF33 	 mov r3,#-1
 2935              	.L164:
 2936              	 .loc 5 642 0 discriminator 8
 2937 009c 03FB04F3 	 mul r3,r3,r4
 2938 00a0 07EE903A 	 fmsr s15,r3
 2939 00a4 F8EEE77A 	 fsitos s15,s15
 2940 00a8 C7ED117A 	 fsts s15,[r7,#68]
 643:../cleanflight/src/main/flight/mixer.c **** 
 644:../cleanflight/src/main/flight/mixer.c ****         float stickDeflectionLength = sqrtf(stickDeflectionPitchAbs*stickDeflectionPitchAbs + stick
 2941              	 .loc 5 644 0 is_stmt 1 discriminator 8
 2942 00ac 97ED0C7A 	 flds s14,[r7,#48]
 2943 00b0 D7ED0C7A 	 flds s15,[r7,#48]
 2944 00b4 27EE277A 	 fmuls s14,s14,s15
 2945 00b8 D7ED0B6A 	 flds s13,[r7,#44]
 2946 00bc D7ED0B7A 	 flds s15,[r7,#44]
 2947 00c0 66EEA77A 	 fmuls s15,s13,s15
 2948 00c4 77EE277A 	 fadds s15,s14,s15
 2949 00c8 17EE900A 	 fmrs r0,s15
 2950 00cc FFF7FEFF 	 bl sqrtf
 2951 00d0 3864     	 str r0,[r7,#64]
 2952              	.LBB12:
 645:../cleanflight/src/main/flight/mixer.c **** 
 646:../cleanflight/src/main/flight/mixer.c ****         if (stickDeflectionYawAbs > MAX(stickDeflectionPitchAbs, stickDeflectionRollAbs)) {
 2953              	 .loc 5 646 0 discriminator 8
 2954 00d2 3B6B     	 ldr r3,[r7,#48]
 2955 00d4 7B62     	 str r3,[r7,#36]
 2956 00d6 FB6A     	 ldr r3,[r7,#44]
 2957 00d8 3B62     	 str r3,[r7,#32]
 2958 00da 97ED097A 	 flds s14,[r7,#36]
 2959 00de D7ED087A 	 flds s15,[r7,#32]
 2960 00e2 B4EEE77A 	 fcmpes s14,s15
 2961 00e6 F1EE10FA 	 fmstat
 2962 00ea 02DD     	 ble .L206
 2963              	 .loc 5 646 0 is_stmt 0 discriminator 1
 2964 00ec D7ED097A 	 flds s15,[r7,#36]
 2965 00f0 01E0     	 b .L167
 2966              	.L206:
 2967              	 .loc 5 646 0 discriminator 2
 2968 00f2 D7ED087A 	 flds s15,[r7,#32]
 2969              	.L167:
 2970              	.LBE12:
 2971              	 .loc 5 646 0 discriminator 4
 2972 00f6 97ED0A7A 	 flds s14,[r7,#40]
 2973 00fa F4EEC77A 	 fcmpes s15,s14
 2974 00fe F1EE10FA 	 fmstat
 2975 0102 08D5     	 bpl .L207
 647:../cleanflight/src/main/flight/mixer.c ****             // If yaw is the dominant, disable pitch and roll
 648:../cleanflight/src/main/flight/mixer.c ****             stickDeflectionLength = stickDeflectionYawAbs;
 2976              	 .loc 5 648 0 is_stmt 1
 2977 0104 BB6A     	 ldr r3,[r7,#40]
 2978 0106 3B64     	 str r3,[r7,#64]
 649:../cleanflight/src/main/flight/mixer.c ****             signRoll = 0;
 2979              	 .loc 5 649 0
 2980 0108 4FF00003 	 mov r3,#0
 2981 010c BB64     	 str r3,[r7,#72]
 650:../cleanflight/src/main/flight/mixer.c ****             signPitch = 0;
 2982              	 .loc 5 650 0
 2983 010e 4FF00003 	 mov r3,#0
 2984 0112 FB64     	 str r3,[r7,#76]
 2985 0114 02E0     	 b .L170
 2986              	.L207:
 651:../cleanflight/src/main/flight/mixer.c ****         } else {
 652:../cleanflight/src/main/flight/mixer.c ****             // If pitch/roll dominant, disable yaw
 653:../cleanflight/src/main/flight/mixer.c ****             signYaw = 0;
 2987              	 .loc 5 653 0
 2988 0116 4FF00003 	 mov r3,#0
 2989 011a 7B64     	 str r3,[r7,#68]
 2990              	.L170:
 654:../cleanflight/src/main/flight/mixer.c ****         }
 655:../cleanflight/src/main/flight/mixer.c **** 
 656:../cleanflight/src/main/flight/mixer.c ****         float cosPhi = (stickDeflectionPitchAbs + stickDeflectionRollAbs) / (sqrtf(2.0f) * stickDef
 2991              	 .loc 5 656 0
 2992 011c 97ED0C7A 	 flds s14,[r7,#48]
 2993 0120 D7ED0B7A 	 flds s15,[r7,#44]
 2994 0124 37EE277A 	 fadds s14,s14,s15
 2995 0128 D7ED107A 	 flds s15,[r7,#64]
 2996 012c DFED806A 	 flds s13,.L212+8
 2997 0130 67EEA67A 	 fmuls s15,s15,s13
 2998 0134 C7EE277A 	 fdivs s15,s14,s15
 2999 0138 C7ED077A 	 fsts s15,[r7,#28]
 657:../cleanflight/src/main/flight/mixer.c ****         const float cosThreshold = sqrtf(3.0f)/2.0f; // cos(PI/6.0f)
 3000              	 .loc 5 657 0
 3001 013c 7D4B     	 ldr r3,.L212+12
 3002 013e BB61     	 str r3,[r7,#24]
 658:../cleanflight/src/main/flight/mixer.c **** 
 659:../cleanflight/src/main/flight/mixer.c ****         if (cosPhi < cosThreshold) {
 3003              	 .loc 5 659 0
 3004 0140 97ED077A 	 flds s14,[r7,#28]
 3005 0144 D7ED067A 	 flds s15,[r7,#24]
 3006 0148 B4EEE77A 	 fcmpes s14,s15
 3007 014c F1EE10FA 	 fmstat
 3008 0150 0FD5     	 bpl .L171
 660:../cleanflight/src/main/flight/mixer.c ****             // Enforce either roll or pitch exclusively, if not on diagonal
 661:../cleanflight/src/main/flight/mixer.c ****             if (stickDeflectionRollAbs > stickDeflectionPitchAbs) {
 3009              	 .loc 5 661 0
 3010 0152 97ED0B7A 	 flds s14,[r7,#44]
 3011 0156 D7ED0C7A 	 flds s15,[r7,#48]
 3012 015a B4EEE77A 	 fcmpes s14,s15
 3013 015e F1EE10FA 	 fmstat
 3014 0162 03DD     	 ble .L208
 662:../cleanflight/src/main/flight/mixer.c ****                 signPitch = 0;
 3015              	 .loc 5 662 0
 3016 0164 4FF00003 	 mov r3,#0
 3017 0168 FB64     	 str r3,[r7,#76]
 3018 016a 02E0     	 b .L171
 3019              	.L208:
 663:../cleanflight/src/main/flight/mixer.c ****             } else {
 664:../cleanflight/src/main/flight/mixer.c ****                 signRoll = 0;
 3020              	 .loc 5 664 0
 3021 016c 4FF00003 	 mov r3,#0
 3022 0170 BB64     	 str r3,[r7,#72]
 3023              	.L171:
 665:../cleanflight/src/main/flight/mixer.c ****             }
 666:../cleanflight/src/main/flight/mixer.c ****         }
 667:../cleanflight/src/main/flight/mixer.c **** 
 668:../cleanflight/src/main/flight/mixer.c ****         // Apply a reasonable amount of stick deadband
 669:../cleanflight/src/main/flight/mixer.c ****         const float flipStickRange = 1.0f - CRASH_FLIP_STICK_MINF;
 3024              	 .loc 5 669 0
 3025 0172 714B     	 ldr r3,.L212+16
 3026 0174 7B61     	 str r3,[r7,#20]
 3027              	.LBB13:
 670:../cleanflight/src/main/flight/mixer.c ****         float flipPower = MAX(0.0f, stickDeflectionLength - CRASH_FLIP_STICK_MINF) / flipStickRange
 3028              	 .loc 5 670 0
 3029 0176 4FF00003 	 mov r3,#0
 3030 017a 3B61     	 str r3,[r7,#16]
 3031 017c D7ED107A 	 flds s15,[r7,#64]
 3032 0180 9FED6E7A 	 flds s14,.L212+20
 3033 0184 77EEC77A 	 fsubs s15,s15,s14
 3034 0188 C7ED037A 	 fsts s15,[r7,#12]
 3035 018c 97ED047A 	 flds s14,[r7,#16]
 3036 0190 D7ED037A 	 flds s15,[r7,#12]
 3037 0194 B4EEE77A 	 fcmpes s14,s15
 3038 0198 F1EE10FA 	 fmstat
 3039 019c 02DD     	 ble .L209
 3040              	 .loc 5 670 0 is_stmt 0 discriminator 1
 3041 019e D7ED047A 	 flds s15,[r7,#16]
 3042 01a2 01E0     	 b .L177
 3043              	.L209:
 3044              	 .loc 5 670 0 discriminator 2
 3045 01a4 D7ED037A 	 flds s15,[r7,#12]
 3046              	.L177:
 3047              	.LBE13:
 3048              	 .loc 5 670 0 discriminator 4
 3049 01a8 97ED057A 	 flds s14,[r7,#20]
 3050 01ac C7EE877A 	 fdivs s15,s15,s14
 3051 01b0 C7ED027A 	 fsts s15,[r7,#8]
 3052              	.LBB14:
 671:../cleanflight/src/main/flight/mixer.c **** 
 672:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; ++i) {
 3053              	 .loc 5 672 0 is_stmt 1 discriminator 4
 3054 01b4 0023     	 movs r3,#0
 3055 01b6 FB63     	 str r3,[r7,#60]
 3056 01b8 93E0     	 b .L178
 3057              	.L188:
 3058              	.LBB15:
 673:../cleanflight/src/main/flight/mixer.c ****             float motorOutput =
 674:../cleanflight/src/main/flight/mixer.c ****                 signPitch*currentMixer[i].pitch +
 3059              	 .loc 5 674 0
 3060 01ba 614A     	 ldr r2,.L212+24
 3061 01bc FB6B     	 ldr r3,[r7,#60]
 3062 01be 1B01     	 lsls r3,r3,#4
 3063 01c0 1344     	 add r3,r3,r2
 3064 01c2 0833     	 adds r3,r3,#8
 3065 01c4 93ED007A 	 flds s14,[r3]
 3066 01c8 D7ED137A 	 flds s15,[r7,#76]
 3067 01cc 27EE277A 	 fmuls s14,s14,s15
 675:../cleanflight/src/main/flight/mixer.c ****                 signRoll*currentMixer[i].roll +
 3068              	 .loc 5 675 0
 3069 01d0 5B4A     	 ldr r2,.L212+24
 3070 01d2 FB6B     	 ldr r3,[r7,#60]
 3071 01d4 1B01     	 lsls r3,r3,#4
 3072 01d6 1344     	 add r3,r3,r2
 3073 01d8 D3ED016A 	 flds s13,[r3,#4]
 3074 01dc D7ED127A 	 flds s15,[r7,#72]
 3075 01e0 66EEA77A 	 fmuls s15,s13,s15
 674:../cleanflight/src/main/flight/mixer.c ****                 signRoll*currentMixer[i].roll +
 3076              	 .loc 5 674 0
 3077 01e4 37EE277A 	 fadds s14,s14,s15
 676:../cleanflight/src/main/flight/mixer.c ****                 signYaw*currentMixer[i].yaw;
 3078              	 .loc 5 676 0
 3079 01e8 554A     	 ldr r2,.L212+24
 3080 01ea FB6B     	 ldr r3,[r7,#60]
 3081 01ec 1B01     	 lsls r3,r3,#4
 3082 01ee 1344     	 add r3,r3,r2
 3083 01f0 0833     	 adds r3,r3,#8
 3084 01f2 D3ED016A 	 flds s13,[r3,#4]
 3085 01f6 D7ED117A 	 flds s15,[r7,#68]
 3086 01fa 66EEA77A 	 fmuls s15,s13,s15
 673:../cleanflight/src/main/flight/mixer.c ****                 signPitch*currentMixer[i].pitch +
 3087              	 .loc 5 673 0
 3088 01fe 77EE277A 	 fadds s15,s14,s15
 3089 0202 C7ED0E7A 	 fsts s15,[r7,#56]
 677:../cleanflight/src/main/flight/mixer.c ****                 
 678:../cleanflight/src/main/flight/mixer.c ****             if (motorOutput < 0) {
 3090              	 .loc 5 678 0
 3091 0206 D7ED0E7A 	 flds s15,[r7,#56]
 3092 020a F5EEC07A 	 fcmpezs s15
 3093 020e F1EE10FA 	 fmstat
 3094 0212 1DD5     	 bpl .L179
 679:../cleanflight/src/main/flight/mixer.c ****                 if (mixerConfig()->crashflip_motor_percent > 0) {
 3095              	 .loc 5 679 0
 3096 0214 FFF7FEFF 	 bl mixerConfig
 3097 0218 0346     	 mov r3,r0
 3098 021a 9B78     	 ldrb r3,[r3,#2]
 3099 021c 002B     	 cmp r3,#0
 3100 021e 14D0     	 beq .L181
 680:../cleanflight/src/main/flight/mixer.c ****                     motorOutput = -motorOutput * (float)mixerConfig()->crashflip_motor_percent / 10
 3101              	 .loc 5 680 0
 3102 0220 D7ED0E7A 	 flds s15,[r7,#56]
 3103 0224 B1EE678A 	 fnegs s16,s15
 3104 0228 FFF7FEFF 	 bl mixerConfig
 3105 022c 0346     	 mov r3,r0
 3106 022e 9B78     	 ldrb r3,[r3,#2]
 3107 0230 07EE903A 	 fmsr s15,r3
 3108 0234 F8EE677A 	 fuitos s15,s15
 3109 0238 68EE277A 	 fmuls s15,s16,s15
 3110 023c 9FED417A 	 flds s14,.L212+28
 3111 0240 C7EE877A 	 fdivs s15,s15,s14
 3112 0244 C7ED0E7A 	 fsts s15,[r7,#56]
 3113 0248 02E0     	 b .L179
 3114              	.L181:
 681:../cleanflight/src/main/flight/mixer.c ****                 } else {
 682:../cleanflight/src/main/flight/mixer.c ****                     motorOutput = disarmMotorOutput;
 3115              	 .loc 5 682 0
 3116 024a 3F4B     	 ldr r3,.L212+32
 3117 024c 1B68     	 ldr r3,[r3]
 3118 024e BB63     	 str r3,[r7,#56]
 3119              	.L179:
 3120              	.LBB16:
 683:../cleanflight/src/main/flight/mixer.c ****                 }
 684:../cleanflight/src/main/flight/mixer.c ****             } 
 685:../cleanflight/src/main/flight/mixer.c ****             motorOutput = MIN(1.0f, flipPower * motorOutput);
 3121              	 .loc 5 685 0
 3122 0250 4FF07E53 	 mov r3,#1065353216
 3123 0254 7B60     	 str r3,[r7,#4]
 3124 0256 97ED027A 	 flds s14,[r7,#8]
 3125 025a D7ED0E7A 	 flds s15,[r7,#56]
 3126 025e 67EE277A 	 fmuls s15,s14,s15
 3127 0262 C7ED007A 	 fsts s15,[r7]
 3128 0266 97ED017A 	 flds s14,[r7,#4]
 3129 026a D7ED007A 	 flds s15,[r7]
 3130 026e B4EEE77A 	 fcmpes s14,s15
 3131 0272 F1EE10FA 	 fmstat
 3132 0276 01D5     	 bpl .L210
 3133              	 .loc 5 685 0 is_stmt 0 discriminator 1
 3134 0278 7B68     	 ldr r3,[r7,#4]
 3135 027a 00E0     	 b .L184
 3136              	.L210:
 3137              	 .loc 5 685 0 discriminator 2
 3138 027c 3B68     	 ldr r3,[r7]
 3139              	.L184:
 3140              	.LBE16:
 3141              	 .loc 5 685 0 discriminator 4
 3142 027e BB63     	 str r3,[r7,#56]
 686:../cleanflight/src/main/flight/mixer.c ****             motorOutput = motorOutputMin + motorOutput * motorOutputRange;
 3143              	 .loc 5 686 0 is_stmt 1 discriminator 4
 3144 0280 324B     	 ldr r3,.L212+36
 3145 0282 93ED007A 	 flds s14,[r3]
 3146 0286 D7ED0E7A 	 flds s15,[r7,#56]
 3147 028a 27EE277A 	 fmuls s14,s14,s15
 3148 028e 304B     	 ldr r3,.L212+40
 3149 0290 D3ED007A 	 flds s15,[r3]
 3150 0294 77EE277A 	 fadds s15,s14,s15
 3151 0298 C7ED0E7A 	 fsts s15,[r7,#56]
 687:../cleanflight/src/main/flight/mixer.c **** 
 688:../cleanflight/src/main/flight/mixer.c ****             // Add a little bit to the motorOutputMin so props aren't spinning when sticks are cent
 689:../cleanflight/src/main/flight/mixer.c ****             motorOutput = (motorOutput < motorOutputMin + CRASH_FLIP_DEADBAND) ? disarmMotorOutput 
 3152              	 .loc 5 689 0 discriminator 4
 3153 029c 2C4B     	 ldr r3,.L212+40
 3154 029e D3ED007A 	 flds s15,[r3]
 3155 02a2 B3EE047A 	 fconsts s14,#52
 3156 02a6 37EE877A 	 fadds s14,s15,s14
 3157 02aa D7ED0E7A 	 flds s15,[r7,#56]
 3158 02ae B4EEE77A 	 fcmpes s14,s15
 3159 02b2 F1EE10FA 	 fmstat
 3160 02b6 03DD     	 ble .L211
 3161              	 .loc 5 689 0 is_stmt 0 discriminator 1
 3162 02b8 234B     	 ldr r3,.L212+32
 3163 02ba D3ED007A 	 flds s15,[r3]
 3164 02be 05E0     	 b .L187
 3165              	.L211:
 3166              	 .loc 5 689 0 discriminator 2
 3167 02c0 D7ED0E7A 	 flds s15,[r7,#56]
 3168 02c4 B3EE047A 	 fconsts s14,#52
 3169 02c8 77EEC77A 	 fsubs s15,s15,s14
 3170              	.L187:
 3171              	 .loc 5 689 0 discriminator 4
 3172 02cc C7ED0E7A 	 fsts s15,[r7,#56]
 690:../cleanflight/src/main/flight/mixer.c ****             motor[i] = motorOutput;
 3173              	 .loc 5 690 0 is_stmt 1 discriminator 4
 3174 02d0 204A     	 ldr r2,.L212+44
 3175 02d2 FB6B     	 ldr r3,[r7,#60]
 3176 02d4 9B00     	 lsls r3,r3,#2
 3177 02d6 1344     	 add r3,r3,r2
 3178 02d8 BA6B     	 ldr r2,[r7,#56]
 3179 02da 1A60     	 str r2,[r3]
 3180              	.LBE15:
 672:../cleanflight/src/main/flight/mixer.c ****             float motorOutput =
 3181              	 .loc 5 672 0 discriminator 4
 3182 02dc FB6B     	 ldr r3,[r7,#60]
 3183 02de 0133     	 adds r3,r3,#1
 3184 02e0 FB63     	 str r3,[r7,#60]
 3185              	.L178:
 672:../cleanflight/src/main/flight/mixer.c ****             float motorOutput =
 3186              	 .loc 5 672 0 is_stmt 0 discriminator 2
 3187 02e2 1D4B     	 ldr r3,.L212+48
 3188 02e4 1B78     	 ldrb r3,[r3]
 3189 02e6 1A46     	 mov r2,r3
 3190 02e8 FB6B     	 ldr r3,[r7,#60]
 3191 02ea 9A42     	 cmp r2,r3
 3192 02ec 3FF765AF 	 bgt .L188
 3193              	.LBE14:
 3194              	.LBE11:
 3195 02f0 15E0     	 b .L152
 3196              	.L153:
 3197              	.LBB17:
 691:../cleanflight/src/main/flight/mixer.c ****         }
 692:../cleanflight/src/main/flight/mixer.c ****     } else {
 693:../cleanflight/src/main/flight/mixer.c ****         // Disarmed mode
 694:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 3198              	 .loc 5 694 0 is_stmt 1
 3199 02f2 0023     	 movs r3,#0
 3200 02f4 7B63     	 str r3,[r7,#52]
 3201 02f6 0CE0     	 b .L190
 3202              	.L191:
 695:../cleanflight/src/main/flight/mixer.c ****             motor[i] = motor_disarmed[i];
 3203              	 .loc 5 695 0 discriminator 3
 3204 02f8 184A     	 ldr r2,.L212+52
 3205 02fa 7B6B     	 ldr r3,[r7,#52]
 3206 02fc 9B00     	 lsls r3,r3,#2
 3207 02fe 1344     	 add r3,r3,r2
 3208 0300 1A68     	 ldr r2,[r3]
 3209 0302 1449     	 ldr r1,.L212+44
 3210 0304 7B6B     	 ldr r3,[r7,#52]
 3211 0306 9B00     	 lsls r3,r3,#2
 3212 0308 0B44     	 add r3,r3,r1
 3213 030a 1A60     	 str r2,[r3]
 694:../cleanflight/src/main/flight/mixer.c ****             motor[i] = motor_disarmed[i];
 3214              	 .loc 5 694 0 discriminator 3
 3215 030c 7B6B     	 ldr r3,[r7,#52]
 3216 030e 0133     	 adds r3,r3,#1
 3217 0310 7B63     	 str r3,[r7,#52]
 3218              	.L190:
 694:../cleanflight/src/main/flight/mixer.c ****             motor[i] = motor_disarmed[i];
 3219              	 .loc 5 694 0 is_stmt 0 discriminator 1
 3220 0312 114B     	 ldr r3,.L212+48
 3221 0314 1B78     	 ldrb r3,[r3]
 3222 0316 1A46     	 mov r2,r3
 3223 0318 7B6B     	 ldr r3,[r7,#52]
 3224 031a 9A42     	 cmp r2,r3
 3225 031c ECDC     	 bgt .L191
 3226              	.L152:
 3227              	.LBE17:
 696:../cleanflight/src/main/flight/mixer.c ****         }
 697:../cleanflight/src/main/flight/mixer.c ****     }
 698:../cleanflight/src/main/flight/mixer.c **** }
 3228              	 .loc 5 698 0 is_stmt 1
 3229 031e 5437     	 adds r7,r7,#84
 3230              	.LCFI118:
 3231              	 .cfi_def_cfa_offset 20
 3232 0320 BD46     	 mov sp,r7
 3233              	.LCFI119:
 3234              	 .cfi_def_cfa_register 13
 3235              	 
 3236 0322 BDEC028B 	 fldmfdd sp!,{d8}
 3237              	.LCFI120:
 3238              	 .cfi_restore 80
 3239              	 .cfi_restore 81
 3240              	 .cfi_def_cfa_offset 12
 3241 0326 90BD     	 pop {r4,r7,pc}
 3242              	.L213:
 3243              	 .align 2
 3244              	.L212:
 3245 0328 00000000 	 .word armingFlags
 3246 032c 000080BF 	 .word -1082130432
 3247 0330 F304B53F 	 .word 1068827891
 3248 0334 D7B35D3F 	 .word 1063105495
 3249 0338 9A99593F 	 .word 1062836634
 3250 033c 9A99193E 	 .word 1041865114
 3251 0340 00000000 	 .word currentMixer
 3252 0344 0000C842 	 .word 1120403456
 3253 0348 00000000 	 .word disarmMotorOutput
 3254 034c 00000000 	 .word motorOutputRange
 3255 0350 00000000 	 .word motorOutputMin
 3256 0354 00000000 	 .word motor
 3257 0358 00000000 	 .word motorCount
 3258 035c 00000000 	 .word motor_disarmed
 3259              	 .cfi_endproc
 3260              	.LFE604:
 3262              	 .section .text.applyMixToMotors,"ax",%progbits
 3263              	 .align 2
 3264              	 .thumb
 3265              	 .thumb_func
 3267              	applyMixToMotors:
 3268              	.LFB605:
 699:../cleanflight/src/main/flight/mixer.c **** 
 700:../cleanflight/src/main/flight/mixer.c **** static void applyMixToMotors(float motorMix[MAX_SUPPORTED_MOTORS])
 701:../cleanflight/src/main/flight/mixer.c **** {
 3269              	 .loc 5 701 0
 3270              	 .cfi_startproc
 3271              	 
 3272              	 
 3273 0000 90B5     	 push {r4,r7,lr}
 3274              	.LCFI121:
 3275              	 .cfi_def_cfa_offset 12
 3276              	 .cfi_offset 4,-12
 3277              	 .cfi_offset 7,-8
 3278              	 .cfi_offset 14,-4
 3279 0002 87B0     	 sub sp,sp,#28
 3280              	.LCFI122:
 3281              	 .cfi_def_cfa_offset 40
 3282 0004 00AF     	 add r7,sp,#0
 3283              	.LCFI123:
 3284              	 .cfi_def_cfa_register 7
 3285 0006 7860     	 str r0,[r7,#4]
 3286              	.LBB18:
 702:../cleanflight/src/main/flight/mixer.c ****     // Now add in the desired throttle, but keep in a range that doesn't clip adjusted
 703:../cleanflight/src/main/flight/mixer.c ****     // roll/pitch/yaw. This could move throttle down, but also up for those low throttle flips.
 704:../cleanflight/src/main/flight/mixer.c ****     for (int i = 0; i < motorCount; i++) {
 3287              	 .loc 5 704 0
 3288 0008 0023     	 movs r3,#0
 3289 000a 7B61     	 str r3,[r7,#20]
 3290 000c BDE0     	 b .L215
 3291              	.L224:
 3292              	.LBB19:
 705:../cleanflight/src/main/flight/mixer.c ****         float motorOutput = motorOutputMin + (motorOutputRange * (motorOutputMixSign * motorMix[i] 
 3293              	 .loc 5 705 0
 3294 000e 724B     	 ldr r3,.L230
 3295 0010 1B78     	 ldrb r3,[r3]
 3296 0012 5BB2     	 sxtb r3,r3
 3297 0014 07EE903A 	 fmsr s15,r3
 3298 0018 B8EEE77A 	 fsitos s14,s15
 3299 001c 7B69     	 ldr r3,[r7,#20]
 3300 001e 9B00     	 lsls r3,r3,#2
 3301 0020 7A68     	 ldr r2,[r7,#4]
 3302 0022 1344     	 add r3,r3,r2
 3303 0024 D3ED007A 	 flds s15,[r3]
 3304 0028 27EE277A 	 fmuls s14,s14,s15
 3305 002c 6B4A     	 ldr r2,.L230+4
 3306 002e 7B69     	 ldr r3,[r7,#20]
 3307 0030 1B01     	 lsls r3,r3,#4
 3308 0032 1344     	 add r3,r3,r2
 3309 0034 D3ED006A 	 flds s13,[r3]
 3310 0038 694B     	 ldr r3,.L230+8
 3311 003a D3ED007A 	 flds s15,[r3]
 3312 003e 66EEA77A 	 fmuls s15,s13,s15
 3313 0042 37EE277A 	 fadds s14,s14,s15
 3314 0046 674B     	 ldr r3,.L230+12
 3315 0048 D3ED007A 	 flds s15,[r3]
 3316 004c 27EE277A 	 fmuls s14,s14,s15
 3317 0050 654B     	 ldr r3,.L230+16
 3318 0052 D3ED007A 	 flds s15,[r3]
 3319 0056 77EE277A 	 fadds s15,s14,s15
 3320 005a C7ED047A 	 fsts s15,[r7,#16]
 706:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_SERVOS
 707:../cleanflight/src/main/flight/mixer.c ****         if (mixerIsTricopter()) {
 3321              	 .loc 5 707 0
 3322 005e FFF7FEFF 	 bl mixerIsTricopter
 3323 0062 0346     	 mov r3,r0
 3324 0064 002B     	 cmp r3,#0
 3325 0066 0AD0     	 beq .L216
 708:../cleanflight/src/main/flight/mixer.c ****             motorOutput += mixerTricopterMotorCorrection(i);
 3326              	 .loc 5 708 0
 3327 0068 7869     	 ldr r0,[r7,#20]
 3328 006a FFF7FEFF 	 bl mixerTricopterMotorCorrection
 3329 006e 07EE100A 	 fmsr s14,r0
 3330 0072 D7ED047A 	 flds s15,[r7,#16]
 3331 0076 77EE877A 	 fadds s15,s15,s14
 3332 007a C7ED047A 	 fsts s15,[r7,#16]
 3333              	.L216:
 709:../cleanflight/src/main/flight/mixer.c ****         }
 710:../cleanflight/src/main/flight/mixer.c **** #endif
 711:../cleanflight/src/main/flight/mixer.c ****         if (failsafeIsActive()) {
 3334              	 .loc 5 711 0
 3335 007e FFF7FEFF 	 bl failsafeIsActive
 3336 0082 0346     	 mov r3,r0
 3337 0084 002B     	 cmp r3,#0
 3338 0086 30D0     	 beq .L217
 712:../cleanflight/src/main/flight/mixer.c ****             if (isMotorProtocolDshot()) {
 3339              	 .loc 5 712 0
 3340 0088 FFF7FEFF 	 bl isMotorProtocolDshot
 3341 008c 0346     	 mov r3,r0
 3342 008e 002B     	 cmp r3,#0
 3343 0090 0ED0     	 beq .L218
 713:../cleanflight/src/main/flight/mixer.c ****                 motorOutput = (motorOutput < motorRangeMin) ? disarmMotorOutput : motorOutput; // P
 3344              	 .loc 5 713 0
 3345 0092 564B     	 ldr r3,.L230+20
 3346 0094 D3ED007A 	 flds s15,[r3]
 3347 0098 97ED047A 	 flds s14,[r7,#16]
 3348 009c B4EEE77A 	 fcmpes s14,s15
 3349 00a0 F1EE10FA 	 fmstat
 3350 00a4 02D5     	 bpl .L229
 3351              	 .loc 5 713 0 is_stmt 0 discriminator 1
 3352 00a6 524B     	 ldr r3,.L230+24
 3353 00a8 1B68     	 ldr r3,[r3]
 3354 00aa 00E0     	 b .L221
 3355              	.L229:
 3356              	 .loc 5 713 0 discriminator 2
 3357 00ac 3B69     	 ldr r3,[r7,#16]
 3358              	.L221:
 3359              	 .loc 5 713 0 discriminator 4
 3360 00ae 3B61     	 str r3,[r7,#16]
 3361              	.L218:
 714:../cleanflight/src/main/flight/mixer.c ****             }
 715:../cleanflight/src/main/flight/mixer.c ****             motorOutput = constrain(motorOutput, disarmMotorOutput, motorRangeMax);
 3362              	 .loc 5 715 0 is_stmt 1
 3363 00b0 D7ED047A 	 flds s15,[r7,#16]
 3364 00b4 FDEEE76A 	 ftosizs s13,s15
 3365 00b8 4D4B     	 ldr r3,.L230+24
 3366 00ba D3ED007A 	 flds s15,[r3]
 3367 00be BDEEE77A 	 ftosizs s14,s15
 3368 00c2 4C4B     	 ldr r3,.L230+28
 3369 00c4 D3ED007A 	 flds s15,[r3]
 3370 00c8 FDEEE77A 	 ftosizs s15,s15
 3371 00cc 16EE900A 	 fmrs r0,s13
 3372 00d0 17EE101A 	 fmrs r1,s14
 3373 00d4 17EE902A 	 fmrs r2,s15
 3374 00d8 FFF7FEFF 	 bl constrain
 3375 00dc 07EE900A 	 fmsr s15,r0
 3376 00e0 F8EEE77A 	 fsitos s15,s15
 3377 00e4 C7ED047A 	 fsts s15,[r7,#16]
 3378 00e8 1BE0     	 b .L222
 3379              	.L217:
 716:../cleanflight/src/main/flight/mixer.c ****         } else {
 717:../cleanflight/src/main/flight/mixer.c ****             motorOutput = constrain(motorOutput, motorRangeMin, motorRangeMax);
 3380              	 .loc 5 717 0
 3381 00ea D7ED047A 	 flds s15,[r7,#16]
 3382 00ee FDEEE76A 	 ftosizs s13,s15
 3383 00f2 3E4B     	 ldr r3,.L230+20
 3384 00f4 D3ED007A 	 flds s15,[r3]
 3385 00f8 BDEEE77A 	 ftosizs s14,s15
 3386 00fc 3D4B     	 ldr r3,.L230+28
 3387 00fe D3ED007A 	 flds s15,[r3]
 3388 0102 FDEEE77A 	 ftosizs s15,s15
 3389 0106 16EE900A 	 fmrs r0,s13
 3390 010a 17EE101A 	 fmrs r1,s14
 3391 010e 17EE902A 	 fmrs r2,s15
 3392 0112 FFF7FEFF 	 bl constrain
 3393 0116 07EE900A 	 fmsr s15,r0
 3394 011a F8EEE77A 	 fsitos s15,s15
 3395 011e C7ED047A 	 fsts s15,[r7,#16]
 3396              	.L222:
 718:../cleanflight/src/main/flight/mixer.c ****         }
 719:../cleanflight/src/main/flight/mixer.c ****         // Motor stop handling
 720:../cleanflight/src/main/flight/mixer.c ****         if (feature(FEATURE_MOTOR_STOP) && ARMING_FLAG(ARMED) && !feature(FEATURE_3D) && !isAirmode
 3397              	 .loc 5 720 0
 3398 0122 1020     	 movs r0,#16
 3399 0124 FFF7FEFF 	 bl feature
 3400 0128 0346     	 mov r3,r0
 3401 012a 002B     	 cmp r3,#0
 3402 012c 24D0     	 beq .L223
 3403              	 .loc 5 720 0 is_stmt 0 discriminator 1
 3404 012e 324B     	 ldr r3,.L230+32
 3405 0130 1B78     	 ldrb r3,[r3]
 3406 0132 03F00103 	 and r3,r3,#1
 3407 0136 002B     	 cmp r3,#0
 3408 0138 1ED0     	 beq .L223
 3409              	 .loc 5 720 0 discriminator 2
 3410 013a 4FF48050 	 mov r0,#4096
 3411 013e FFF7FEFF 	 bl feature
 3412 0142 0346     	 mov r3,r0
 3413 0144 83F00103 	 eor r3,r3,#1
 3414 0148 DBB2     	 uxtb r3,r3
 3415 014a 002B     	 cmp r3,#0
 3416 014c 14D0     	 beq .L223
 3417              	 .loc 5 720 0 discriminator 3
 3418 014e FFF7FEFF 	 bl isAirmodeActive
 3419 0152 0346     	 mov r3,r0
 3420 0154 83F00103 	 eor r3,r3,#1
 3421 0158 DBB2     	 uxtb r3,r3
 3422 015a 002B     	 cmp r3,#0
 3423 015c 0CD0     	 beq .L223
 721:../cleanflight/src/main/flight/mixer.c ****             if (((rcData[THROTTLE]) < rxConfig()->mincheck)) {
 3424              	 .loc 5 721 0 is_stmt 1
 3425 015e 274B     	 ldr r3,.L230+36
 3426 0160 DB88     	 ldrh r3,[r3,#6]
 3427 0162 1CB2     	 sxth r4,r3
 3428 0164 FFF7FEFF 	 bl rxConfig
 3429 0168 0346     	 mov r3,r0
 3430 016a 9B8A     	 ldrh r3,[r3,#20]
 3431 016c 9BB2     	 uxth r3,r3
 3432 016e 9C42     	 cmp r4,r3
 3433 0170 02DA     	 bge .L223
 722:../cleanflight/src/main/flight/mixer.c ****                 motorOutput = disarmMotorOutput;
 3434              	 .loc 5 722 0
 3435 0172 1F4B     	 ldr r3,.L230+24
 3436 0174 1B68     	 ldr r3,[r3]
 3437 0176 3B61     	 str r3,[r7,#16]
 3438              	.L223:
 723:../cleanflight/src/main/flight/mixer.c ****             }
 724:../cleanflight/src/main/flight/mixer.c ****         }
 725:../cleanflight/src/main/flight/mixer.c ****         motor[i] = motorOutput;
 3439              	 .loc 5 725 0 discriminator 2
 3440 0178 214A     	 ldr r2,.L230+40
 3441 017a 7B69     	 ldr r3,[r7,#20]
 3442 017c 9B00     	 lsls r3,r3,#2
 3443 017e 1344     	 add r3,r3,r2
 3444 0180 3A69     	 ldr r2,[r7,#16]
 3445 0182 1A60     	 str r2,[r3]
 3446              	.LBE19:
 704:../cleanflight/src/main/flight/mixer.c ****         float motorOutput = motorOutputMin + (motorOutputRange * (motorOutputMixSign * motorMix[i] 
 3447              	 .loc 5 704 0 discriminator 2
 3448 0184 7B69     	 ldr r3,[r7,#20]
 3449 0186 0133     	 adds r3,r3,#1
 3450 0188 7B61     	 str r3,[r7,#20]
 3451              	.L215:
 704:../cleanflight/src/main/flight/mixer.c ****         float motorOutput = motorOutputMin + (motorOutputRange * (motorOutputMixSign * motorMix[i] 
 3452              	 .loc 5 704 0 is_stmt 0 discriminator 1
 3453 018a 1E4B     	 ldr r3,.L230+44
 3454 018c 1B78     	 ldrb r3,[r3]
 3455 018e 1A46     	 mov r2,r3
 3456 0190 7B69     	 ldr r3,[r7,#20]
 3457 0192 9A42     	 cmp r2,r3
 3458 0194 3FF73BAF 	 bgt .L224
 3459              	.LBE18:
 726:../cleanflight/src/main/flight/mixer.c ****     }
 727:../cleanflight/src/main/flight/mixer.c **** 
 728:../cleanflight/src/main/flight/mixer.c ****     // Disarmed mode
 729:../cleanflight/src/main/flight/mixer.c ****     if (!ARMING_FLAG(ARMED)) {
 3460              	 .loc 5 729 0 is_stmt 1
 3461 0198 174B     	 ldr r3,.L230+32
 3462 019a 1B78     	 ldrb r3,[r3]
 3463 019c 03F00103 	 and r3,r3,#1
 3464 01a0 002B     	 cmp r3,#0
 3465 01a2 15D1     	 bne .L214
 3466              	.LBB20:
 730:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 3467              	 .loc 5 730 0
 3468 01a4 0023     	 movs r3,#0
 3469 01a6 FB60     	 str r3,[r7,#12]
 3470 01a8 0CE0     	 b .L226
 3471              	.L227:
 731:../cleanflight/src/main/flight/mixer.c ****             motor[i] = motor_disarmed[i];
 3472              	 .loc 5 731 0 discriminator 3
 3473 01aa 174A     	 ldr r2,.L230+48
 3474 01ac FB68     	 ldr r3,[r7,#12]
 3475 01ae 9B00     	 lsls r3,r3,#2
 3476 01b0 1344     	 add r3,r3,r2
 3477 01b2 1A68     	 ldr r2,[r3]
 3478 01b4 1249     	 ldr r1,.L230+40
 3479 01b6 FB68     	 ldr r3,[r7,#12]
 3480 01b8 9B00     	 lsls r3,r3,#2
 3481 01ba 0B44     	 add r3,r3,r1
 3482 01bc 1A60     	 str r2,[r3]
 730:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 3483              	 .loc 5 730 0 discriminator 3
 3484 01be FB68     	 ldr r3,[r7,#12]
 3485 01c0 0133     	 adds r3,r3,#1
 3486 01c2 FB60     	 str r3,[r7,#12]
 3487              	.L226:
 730:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 3488              	 .loc 5 730 0 is_stmt 0 discriminator 1
 3489 01c4 0F4B     	 ldr r3,.L230+44
 3490 01c6 1B78     	 ldrb r3,[r3]
 3491 01c8 1A46     	 mov r2,r3
 3492 01ca FB68     	 ldr r3,[r7,#12]
 3493 01cc 9A42     	 cmp r2,r3
 3494 01ce ECDC     	 bgt .L227
 3495              	.L214:
 3496              	.LBE20:
 732:../cleanflight/src/main/flight/mixer.c ****         }
 733:../cleanflight/src/main/flight/mixer.c ****     }
 734:../cleanflight/src/main/flight/mixer.c **** }
 3497              	 .loc 5 734 0 is_stmt 1
 3498 01d0 1C37     	 adds r7,r7,#28
 3499              	.LCFI124:
 3500              	 .cfi_def_cfa_offset 12
 3501 01d2 BD46     	 mov sp,r7
 3502              	.LCFI125:
 3503              	 .cfi_def_cfa_register 13
 3504              	 
 3505 01d4 90BD     	 pop {r4,r7,pc}
 3506              	.L231:
 3507 01d6 00BF     	 .align 2
 3508              	.L230:
 3509 01d8 00000000 	 .word motorOutputMixSign
 3510 01dc 00000000 	 .word currentMixer
 3511 01e0 00000000 	 .word throttle
 3512 01e4 00000000 	 .word motorOutputRange
 3513 01e8 00000000 	 .word motorOutputMin
 3514 01ec 00000000 	 .word motorRangeMin
 3515 01f0 00000000 	 .word disarmMotorOutput
 3516 01f4 00000000 	 .word motorRangeMax
 3517 01f8 00000000 	 .word armingFlags
 3518 01fc 00000000 	 .word rcData
 3519 0200 00000000 	 .word motor
 3520 0204 00000000 	 .word motorCount
 3521 0208 00000000 	 .word motor_disarmed
 3522              	 .cfi_endproc
 3523              	.LFE605:
 3525              	 .section .text.applyThrottleLimit,"ax",%progbits
 3526              	 .align 2
 3527              	 .global applyThrottleLimit
 3528              	 .thumb
 3529              	 .thumb_func
 3531              	applyThrottleLimit:
 3532              	.LFB606:
 735:../cleanflight/src/main/flight/mixer.c **** 
 736:../cleanflight/src/main/flight/mixer.c **** float applyThrottleLimit(float throttle)
 737:../cleanflight/src/main/flight/mixer.c **** {
 3533              	 .loc 5 737 0
 3534              	 .cfi_startproc
 3535              	 
 3536              	 
 3537              	 
 3538 0000 80B4     	 push {r7}
 3539              	.LCFI126:
 3540              	 .cfi_def_cfa_offset 4
 3541              	 .cfi_offset 7,-4
 3542 0002 87B0     	 sub sp,sp,#28
 3543              	.LCFI127:
 3544              	 .cfi_def_cfa_offset 32
 3545 0004 00AF     	 add r7,sp,#0
 3546              	.LCFI128:
 3547              	 .cfi_def_cfa_register 7
 3548 0006 7860     	 str r0,[r7,#4]
 738:../cleanflight/src/main/flight/mixer.c ****     if (currentControlRateProfile->throttle_limit_percent < 100) {
 3549              	 .loc 5 738 0
 3550 0008 1E4B     	 ldr r3,.L242
 3551 000a 1B68     	 ldr r3,[r3]
 3552 000c 1B7C     	 ldrb r3,[r3,#16]
 3553 000e 632B     	 cmp r3,#99
 3554 0010 2ED8     	 bhi .L233
 3555              	.LBB21:
 739:../cleanflight/src/main/flight/mixer.c ****         const float throttleLimitFactor = currentControlRateProfile->throttle_limit_percent / 100.0
 3556              	 .loc 5 739 0
 3557 0012 1C4B     	 ldr r3,.L242
 3558 0014 1B68     	 ldr r3,[r3]
 3559 0016 1B7C     	 ldrb r3,[r3,#16]
 3560 0018 07EE903A 	 fmsr s15,r3
 3561 001c F8EEE77A 	 fsitos s15,s15
 3562 0020 9FED197A 	 flds s14,.L242+4
 3563 0024 C7EE877A 	 fdivs s15,s15,s14
 3564 0028 C7ED057A 	 fsts s15,[r7,#20]
 740:../cleanflight/src/main/flight/mixer.c ****         switch (currentControlRateProfile->throttle_limit_type) {
 3565              	 .loc 5 740 0
 3566 002c 154B     	 ldr r3,.L242
 3567 002e 1B68     	 ldr r3,[r3]
 3568 0030 DB7B     	 ldrb r3,[r3,#15]
 3569 0032 012B     	 cmp r3,#1
 3570 0034 02D0     	 beq .L234
 3571 0036 022B     	 cmp r3,#2
 3572 0038 07D0     	 beq .L235
 3573 003a 19E0     	 b .L233
 3574              	.L234:
 741:../cleanflight/src/main/flight/mixer.c ****             case THROTTLE_LIMIT_TYPE_SCALE:
 742:../cleanflight/src/main/flight/mixer.c ****                 return throttle * throttleLimitFactor;
 3575              	 .loc 5 742 0
 3576 003c 97ED017A 	 flds s14,[r7,#4]
 3577 0040 D7ED057A 	 flds s15,[r7,#20]
 3578 0044 67EE277A 	 fmuls s15,s14,s15
 3579 0048 14E0     	 b .L236
 3580              	.L235:
 3581              	.LBB22:
 743:../cleanflight/src/main/flight/mixer.c ****             case THROTTLE_LIMIT_TYPE_CLIP:
 744:../cleanflight/src/main/flight/mixer.c ****                 return MIN(throttle, throttleLimitFactor);
 3582              	 .loc 5 744 0
 3583 004a 7B68     	 ldr r3,[r7,#4]
 3584 004c 3B61     	 str r3,[r7,#16]
 3585 004e 7B69     	 ldr r3,[r7,#20]
 3586 0050 FB60     	 str r3,[r7,#12]
 3587 0052 97ED047A 	 flds s14,[r7,#16]
 3588 0056 D7ED037A 	 flds s15,[r7,#12]
 3589 005a B4EEE77A 	 fcmpes s14,s15
 3590 005e F1EE10FA 	 fmstat
 3591 0062 01D5     	 bpl .L241
 3592              	 .loc 5 744 0 is_stmt 0 discriminator 1
 3593 0064 3B69     	 ldr r3,[r7,#16]
 3594 0066 00E0     	 b .L239
 3595              	.L241:
 3596              	 .loc 5 744 0 discriminator 2
 3597 0068 FB68     	 ldr r3,[r7,#12]
 3598              	.L239:
 3599              	.LBE22:
 3600              	 .loc 5 744 0 discriminator 4
 3601 006a 07EE903A 	 fmsr s15,r3
 3602 006e 01E0     	 b .L236
 3603              	.L233:
 3604              	.LBE21:
 745:../cleanflight/src/main/flight/mixer.c ****         }
 746:../cleanflight/src/main/flight/mixer.c ****     }
 747:../cleanflight/src/main/flight/mixer.c **** 
 748:../cleanflight/src/main/flight/mixer.c ****     return throttle;
 3605              	 .loc 5 748 0 is_stmt 1
 3606 0070 D7ED017A 	 flds s15,[r7,#4]
 3607              	.L236:
 3608 0074 17EE903A 	 fmrs r3,s15
 749:../cleanflight/src/main/flight/mixer.c **** }
 3609              	 .loc 5 749 0
 3610 0078 1846     	 mov r0,r3
 3611 007a 1C37     	 adds r7,r7,#28
 3612              	.LCFI129:
 3613              	 .cfi_def_cfa_offset 4
 3614 007c BD46     	 mov sp,r7
 3615              	.LCFI130:
 3616              	 .cfi_def_cfa_register 13
 3617              	 
 3618 007e 5DF8047B 	 ldr r7,[sp],#4
 3619              	.LCFI131:
 3620              	 .cfi_restore 7
 3621              	 .cfi_def_cfa_offset 0
 3622 0082 7047     	 bx lr
 3623              	.L243:
 3624              	 .align 2
 3625              	.L242:
 3626 0084 00000000 	 .word currentControlRateProfile
 3627 0088 0000C842 	 .word 1120403456
 3628              	 .cfi_endproc
 3629              	.LFE606:
 3631              	 .section .text.mixTable,"ax",%progbits
 3632              	 .align 2
 3633              	 .global mixTable
 3634              	 .thumb
 3635              	 .thumb_func
 3637              	mixTable:
 3638              	.LFB607:
 750:../cleanflight/src/main/flight/mixer.c **** 
 751:../cleanflight/src/main/flight/mixer.c **** FAST_CODE_NOINLINE void mixTable(timeUs_t currentTimeUs, uint8_t vbatPidCompensation)
 752:../cleanflight/src/main/flight/mixer.c **** {
 3639              	 .loc 5 752 0
 3640              	 .cfi_startproc
 3641              	 
 3642              	 
 3643 0000 80B5     	 push {r7,lr}
 3644              	.LCFI132:
 3645              	 .cfi_def_cfa_offset 8
 3646              	 .cfi_offset 7,-8
 3647              	 .cfi_offset 14,-4
 3648 0002 2DED028B 	 fstmfdd sp!,{d8}
 3649              	.LCFI133:
 3650              	 .cfi_def_cfa_offset 16
 3651              	 .cfi_offset 80,-16
 3652              	 .cfi_offset 81,-12
 3653 0006 98B0     	 sub sp,sp,#96
 3654              	.LCFI134:
 3655              	 .cfi_def_cfa_offset 112
 3656 0008 00AF     	 add r7,sp,#0
 3657              	.LCFI135:
 3658              	 .cfi_def_cfa_register 7
 3659 000a 7860     	 str r0,[r7,#4]
 3660 000c 0B46     	 mov r3,r1
 3661 000e FB70     	 strb r3,[r7,#3]
 753:../cleanflight/src/main/flight/mixer.c ****     if (isFlipOverAfterCrashMode()) {
 3662              	 .loc 5 753 0
 3663 0010 FFF7FEFF 	 bl isFlipOverAfterCrashMode
 3664 0014 0346     	 mov r3,r0
 3665 0016 002B     	 cmp r3,#0
 3666 0018 02D0     	 beq .L245
 754:../cleanflight/src/main/flight/mixer.c ****         applyFlipOverAfterCrashModeToMotors();
 3667              	 .loc 5 754 0
 3668 001a FFF7FEFF 	 bl applyFlipOverAfterCrashModeToMotors
 3669 001e ECE1     	 b .L244
 3670              	.L245:
 755:../cleanflight/src/main/flight/mixer.c ****         return;
 756:../cleanflight/src/main/flight/mixer.c ****     }
 757:../cleanflight/src/main/flight/mixer.c **** 
 758:../cleanflight/src/main/flight/mixer.c ****     // Find min and max throttle based on conditions. Throttle has to be known before mixing
 759:../cleanflight/src/main/flight/mixer.c ****     calculateThrottleAndCurrentMotorEndpoints(currentTimeUs);
 3671              	 .loc 5 759 0
 3672 0020 7868     	 ldr r0,[r7,#4]
 3673 0022 FFF7FEFF 	 bl calculateThrottleAndCurrentMotorEndpoints
 760:../cleanflight/src/main/flight/mixer.c **** 
 761:../cleanflight/src/main/flight/mixer.c ****     // Calculate and Limit the PID sum
 762:../cleanflight/src/main/flight/mixer.c ****     const float scaledAxisPidRoll =
 763:../cleanflight/src/main/flight/mixer.c ****         constrainf(pidData[FD_ROLL].Sum, -currentPidProfile->pidSumLimit, currentPidProfile->pidSum
 3674              	 .loc 5 763 0
 3675 0026 B84B     	 ldr r3,.L276
 3676 0028 1A69     	 ldr r2,[r3,#16]
 3677 002a 1346     	 mov r3,r2
 3678 002c 1A46     	 mov r2,r3
 3679 002e B74B     	 ldr r3,.L276+4
 3680 0030 1B68     	 ldr r3,[r3]
 3681 0032 B3F82330 	 ldrh r3,[r3,#35]
 3682 0036 9BB2     	 uxth r3,r3
 3683 0038 5B42     	 negs r3,r3
 3684 003a 07EE903A 	 fmsr s15,r3
 3685 003e B8EEE77A 	 fsitos s14,s15
 3686 0042 B24B     	 ldr r3,.L276+4
 3687 0044 1B68     	 ldr r3,[r3]
 3688 0046 B3F82330 	 ldrh r3,[r3,#35]
 3689 004a 9BB2     	 uxth r3,r3
 3690 004c 07EE903A 	 fmsr s15,r3
 3691 0050 F8EE677A 	 fuitos s15,s15
 3692 0054 00EE102A 	 fmsr s0,r2
 3693 0058 F0EE470A 	 fcpys s1,s14
 3694 005c B0EE671A 	 fcpys s2,s15
 3695 0060 FFF7FEFF 	 bl constrainf
 3696 0064 B0EE407A 	 fcpys s14,s0
 762:../cleanflight/src/main/flight/mixer.c ****         constrainf(pidData[FD_ROLL].Sum, -currentPidProfile->pidSumLimit, currentPidProfile->pidSum
 3697              	 .loc 5 762 0
 3698 0068 DFEDA97A 	 flds s15,.L276+8
 3699 006c C7EE277A 	 fdivs s15,s14,s15
 3700 0070 C7ED117A 	 fsts s15,[r7,#68]
 764:../cleanflight/src/main/flight/mixer.c ****     const float scaledAxisPidPitch =
 765:../cleanflight/src/main/flight/mixer.c ****         constrainf(pidData[FD_PITCH].Sum, -currentPidProfile->pidSumLimit, currentPidProfile->pidSu
 3701              	 .loc 5 765 0
 3702 0074 A44B     	 ldr r3,.L276
 3703 0076 5A6A     	 ldr r2,[r3,#36]
 3704 0078 1346     	 mov r3,r2
 3705 007a 1A46     	 mov r2,r3
 3706 007c A34B     	 ldr r3,.L276+4
 3707 007e 1B68     	 ldr r3,[r3]
 3708 0080 B3F82330 	 ldrh r3,[r3,#35]
 3709 0084 9BB2     	 uxth r3,r3
 3710 0086 5B42     	 negs r3,r3
 3711 0088 07EE903A 	 fmsr s15,r3
 3712 008c B8EEE77A 	 fsitos s14,s15
 3713 0090 9E4B     	 ldr r3,.L276+4
 3714 0092 1B68     	 ldr r3,[r3]
 3715 0094 B3F82330 	 ldrh r3,[r3,#35]
 3716 0098 9BB2     	 uxth r3,r3
 3717 009a 07EE903A 	 fmsr s15,r3
 3718 009e F8EE677A 	 fuitos s15,s15
 3719 00a2 00EE102A 	 fmsr s0,r2
 3720 00a6 F0EE470A 	 fcpys s1,s14
 3721 00aa B0EE671A 	 fcpys s2,s15
 3722 00ae FFF7FEFF 	 bl constrainf
 3723 00b2 B0EE407A 	 fcpys s14,s0
 764:../cleanflight/src/main/flight/mixer.c ****     const float scaledAxisPidPitch =
 3724              	 .loc 5 764 0
 3725 00b6 DFED967A 	 flds s15,.L276+8
 3726 00ba C7EE277A 	 fdivs s15,s14,s15
 3727 00be C7ED107A 	 fsts s15,[r7,#64]
 766:../cleanflight/src/main/flight/mixer.c **** 
 767:../cleanflight/src/main/flight/mixer.c ****     uint16_t yawPidSumLimit = currentPidProfile->pidSumLimitYaw;
 3728              	 .loc 5 767 0
 3729 00c2 924B     	 ldr r3,.L276+4
 3730 00c4 1B68     	 ldr r3,[r3]
 3731 00c6 93F82520 	 ldrb r2,[r3,#37]
 3732 00ca 93F82630 	 ldrb r3,[r3,#38]
 3733 00ce 1B02     	 lsls r3,r3,#8
 3734 00d0 1343     	 orrs r3,r3,r2
 3735 00d2 A7F85E30 	 strh r3,[r7,#94]
 768:../cleanflight/src/main/flight/mixer.c **** 
 769:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_YAW_SPIN_RECOVERY
 770:../cleanflight/src/main/flight/mixer.c ****     const bool yawSpinDetected = gyroYawSpinDetected();
 3736              	 .loc 5 770 0
 3737 00d6 FFF7FEFF 	 bl gyroYawSpinDetected
 3738 00da 0346     	 mov r3,r0
 3739 00dc 87F83F30 	 strb r3,[r7,#63]
 771:../cleanflight/src/main/flight/mixer.c ****     if (yawSpinDetected) {
 3740              	 .loc 5 771 0
 3741 00e0 97F83F30 	 ldrb r3,[r7,#63]
 3742 00e4 002B     	 cmp r3,#0
 3743 00e6 03D0     	 beq .L247
 772:../cleanflight/src/main/flight/mixer.c ****         yawPidSumLimit = PIDSUM_LIMIT_MAX;   // Set to the maximum limit during yaw spin recovery t
 3744              	 .loc 5 772 0
 3745 00e8 4FF47A73 	 mov r3,#1000
 3746 00ec A7F85E30 	 strh r3,[r7,#94]
 3747              	.L247:
 773:../cleanflight/src/main/flight/mixer.c ****     }
 774:../cleanflight/src/main/flight/mixer.c **** #endif // USE_YAW_SPIN_RECOVERY
 775:../cleanflight/src/main/flight/mixer.c **** 
 776:../cleanflight/src/main/flight/mixer.c ****     float scaledAxisPidYaw =
 777:../cleanflight/src/main/flight/mixer.c ****         constrainf(pidData[FD_YAW].Sum, -yawPidSumLimit, yawPidSumLimit) / PID_MIXER_SCALING;
 3748              	 .loc 5 777 0
 3749 00f0 854B     	 ldr r3,.L276
 3750 00f2 9A6B     	 ldr r2,[r3,#56]
 3751 00f4 1346     	 mov r3,r2
 3752 00f6 1A46     	 mov r2,r3
 3753 00f8 B7F85E30 	 ldrh r3,[r7,#94]
 3754 00fc 5B42     	 negs r3,r3
 3755 00fe 07EE903A 	 fmsr s15,r3
 3756 0102 B8EEE77A 	 fsitos s14,s15
 3757 0106 B7F85E30 	 ldrh r3,[r7,#94]
 3758 010a 07EE903A 	 fmsr s15,r3
 3759 010e F8EE677A 	 fuitos s15,s15
 3760 0112 00EE102A 	 fmsr s0,r2
 3761 0116 F0EE470A 	 fcpys s1,s14
 3762 011a B0EE671A 	 fcpys s2,s15
 3763 011e FFF7FEFF 	 bl constrainf
 3764 0122 B0EE407A 	 fcpys s14,s0
 776:../cleanflight/src/main/flight/mixer.c ****         constrainf(pidData[FD_YAW].Sum, -yawPidSumLimit, yawPidSumLimit) / PID_MIXER_SCALING;
 3765              	 .loc 5 776 0
 3766 0126 DFED7A7A 	 flds s15,.L276+8
 3767 012a C7EE277A 	 fdivs s15,s14,s15
 3768 012e C7ED167A 	 fsts s15,[r7,#88]
 778:../cleanflight/src/main/flight/mixer.c **** 
 779:../cleanflight/src/main/flight/mixer.c ****     if (!mixerConfig()->yaw_motors_reversed) {
 3769              	 .loc 5 779 0
 3770 0132 FFF7FEFF 	 bl mixerConfig
 3771 0136 0346     	 mov r3,r0
 3772 0138 5B78     	 ldrb r3,[r3,#1]
 3773 013a 83F00103 	 eor r3,r3,#1
 3774 013e DBB2     	 uxtb r3,r3
 3775 0140 002B     	 cmp r3,#0
 3776 0142 05D0     	 beq .L248
 780:../cleanflight/src/main/flight/mixer.c ****         scaledAxisPidYaw = -scaledAxisPidYaw;
 3777              	 .loc 5 780 0
 3778 0144 D7ED167A 	 flds s15,[r7,#88]
 3779 0148 F1EE677A 	 fnegs s15,s15
 3780 014c C7ED167A 	 fsts s15,[r7,#88]
 3781              	.L248:
 781:../cleanflight/src/main/flight/mixer.c ****     }
 782:../cleanflight/src/main/flight/mixer.c **** 
 783:../cleanflight/src/main/flight/mixer.c ****     // Calculate voltage compensation
 784:../cleanflight/src/main/flight/mixer.c ****     const float vbatCompensationFactor = vbatPidCompensation ? calculateVbatPidCompensation() : 1.0
 3782              	 .loc 5 784 0
 3783 0150 FB78     	 ldrb r3,[r7,#3]
 3784 0152 002B     	 cmp r3,#0
 3785 0154 03D0     	 beq .L249
 3786              	 .loc 5 784 0 is_stmt 0 discriminator 1
 3787 0156 FFF7FEFF 	 bl calculateVbatPidCompensation
 3788 015a 0346     	 mov r3,r0
 3789 015c 01E0     	 b .L250
 3790              	.L249:
 3791              	 .loc 5 784 0 discriminator 2
 3792 015e 4FF07E53 	 mov r3,#1065353216
 3793              	.L250:
 3794              	 .loc 5 784 0 discriminator 4
 3795 0162 BB63     	 str r3,[r7,#56]
 785:../cleanflight/src/main/flight/mixer.c **** 
 786:../cleanflight/src/main/flight/mixer.c ****     // Apply the throttle_limit_percent to scale or limit the throttle based on throttle_limit_type
 787:../cleanflight/src/main/flight/mixer.c ****     if (currentControlRateProfile->throttle_limit_type != THROTTLE_LIMIT_TYPE_OFF) {
 3796              	 .loc 5 787 0 is_stmt 1 discriminator 4
 3797 0164 6B4B     	 ldr r3,.L276+12
 3798 0166 1B68     	 ldr r3,[r3]
 3799 0168 DB7B     	 ldrb r3,[r3,#15]
 3800 016a 002B     	 cmp r3,#0
 3801 016c 07D0     	 beq .L251
 788:../cleanflight/src/main/flight/mixer.c ****         throttle = applyThrottleLimit(throttle);
 3802              	 .loc 5 788 0
 3803 016e 6A4B     	 ldr r3,.L276+16
 3804 0170 1B68     	 ldr r3,[r3]
 3805 0172 1846     	 mov r0,r3
 3806 0174 FFF7FEFF 	 bl applyThrottleLimit
 3807 0178 0246     	 mov r2,r0
 3808 017a 674B     	 ldr r3,.L276+16
 3809 017c 1A60     	 str r2,[r3]
 3810              	.L251:
 789:../cleanflight/src/main/flight/mixer.c ****     }
 790:../cleanflight/src/main/flight/mixer.c **** 
 791:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_YAW_SPIN_RECOVERY
 792:../cleanflight/src/main/flight/mixer.c ****     // 50% throttle provides the maximum authority for yaw recovery when airmode is not active.
 793:../cleanflight/src/main/flight/mixer.c ****     // When airmode is active the throttle setting doesn't impact recovery authority.
 794:../cleanflight/src/main/flight/mixer.c ****     if (yawSpinDetected && !isAirmodeActive()) {
 3811              	 .loc 5 794 0
 3812 017e 97F83F30 	 ldrb r3,[r7,#63]
 3813 0182 002B     	 cmp r3,#0
 3814 0184 0BD0     	 beq .L252
 3815              	 .loc 5 794 0 is_stmt 0 discriminator 1
 3816 0186 FFF7FEFF 	 bl isAirmodeActive
 3817 018a 0346     	 mov r3,r0
 3818 018c 83F00103 	 eor r3,r3,#1
 3819 0190 DBB2     	 uxtb r3,r3
 3820 0192 002B     	 cmp r3,#0
 3821 0194 03D0     	 beq .L252
 795:../cleanflight/src/main/flight/mixer.c ****         throttle = 0.5f;   // 
 3822              	 .loc 5 795 0 is_stmt 1
 3823 0196 604B     	 ldr r3,.L276+16
 3824 0198 4FF07C52 	 mov r2,#1056964608
 3825 019c 1A60     	 str r2,[r3]
 3826              	.L252:
 796:../cleanflight/src/main/flight/mixer.c ****     }
 797:../cleanflight/src/main/flight/mixer.c **** #endif // USE_YAW_SPIN_RECOVERY
 798:../cleanflight/src/main/flight/mixer.c **** 
 799:../cleanflight/src/main/flight/mixer.c ****     // Find roll/pitch/yaw desired output
 800:../cleanflight/src/main/flight/mixer.c ****     float motorMix[MAX_SUPPORTED_MOTORS];
 801:../cleanflight/src/main/flight/mixer.c ****     float motorMixMax = 0, motorMixMin = 0;
 3827              	 .loc 5 801 0
 3828 019e 4FF00003 	 mov r3,#0
 3829 01a2 7B65     	 str r3,[r7,#84]
 3830 01a4 4FF00003 	 mov r3,#0
 3831 01a8 3B65     	 str r3,[r7,#80]
 3832              	.LBB23:
 802:../cleanflight/src/main/flight/mixer.c ****     for (int i = 0; i < motorCount; i++) {
 3833              	 .loc 5 802 0
 3834 01aa 0023     	 movs r3,#0
 3835 01ac FB64     	 str r3,[r7,#76]
 3836 01ae 4FE0     	 b .L253
 3837              	.L258:
 3838              	.LBB24:
 803:../cleanflight/src/main/flight/mixer.c ****         float mix =
 804:../cleanflight/src/main/flight/mixer.c ****             scaledAxisPidRoll  * currentMixer[i].roll +
 3839              	 .loc 5 804 0
 3840 01b0 5A4A     	 ldr r2,.L276+20
 3841 01b2 FB6C     	 ldr r3,[r7,#76]
 3842 01b4 1B01     	 lsls r3,r3,#4
 3843 01b6 1344     	 add r3,r3,r2
 3844 01b8 93ED017A 	 flds s14,[r3,#4]
 3845 01bc D7ED117A 	 flds s15,[r7,#68]
 3846 01c0 27EE277A 	 fmuls s14,s14,s15
 805:../cleanflight/src/main/flight/mixer.c ****             scaledAxisPidPitch * currentMixer[i].pitch +
 3847              	 .loc 5 805 0
 3848 01c4 554A     	 ldr r2,.L276+20
 3849 01c6 FB6C     	 ldr r3,[r7,#76]
 3850 01c8 1B01     	 lsls r3,r3,#4
 3851 01ca 1344     	 add r3,r3,r2
 3852 01cc 0833     	 adds r3,r3,#8
 3853 01ce D3ED006A 	 flds s13,[r3]
 3854 01d2 D7ED107A 	 flds s15,[r7,#64]
 3855 01d6 66EEA77A 	 fmuls s15,s13,s15
 804:../cleanflight/src/main/flight/mixer.c ****             scaledAxisPidPitch * currentMixer[i].pitch +
 3856              	 .loc 5 804 0
 3857 01da 37EE277A 	 fadds s14,s14,s15
 806:../cleanflight/src/main/flight/mixer.c ****             scaledAxisPidYaw   * currentMixer[i].yaw;
 3858              	 .loc 5 806 0
 3859 01de 4F4A     	 ldr r2,.L276+20
 3860 01e0 FB6C     	 ldr r3,[r7,#76]
 3861 01e2 1B01     	 lsls r3,r3,#4
 3862 01e4 1344     	 add r3,r3,r2
 3863 01e6 0833     	 adds r3,r3,#8
 3864 01e8 D3ED016A 	 flds s13,[r3,#4]
 3865 01ec D7ED167A 	 flds s15,[r7,#88]
 3866 01f0 66EEA77A 	 fmuls s15,s13,s15
 803:../cleanflight/src/main/flight/mixer.c ****             scaledAxisPidRoll  * currentMixer[i].roll +
 3867              	 .loc 5 803 0
 3868 01f4 77EE277A 	 fadds s15,s14,s15
 3869 01f8 C7ED0D7A 	 fsts s15,[r7,#52]
 807:../cleanflight/src/main/flight/mixer.c **** 
 808:../cleanflight/src/main/flight/mixer.c ****         mix *= vbatCompensationFactor;  // Add voltage compensation
 3870              	 .loc 5 808 0
 3871 01fc 97ED0D7A 	 flds s14,[r7,#52]
 3872 0200 D7ED0E7A 	 flds s15,[r7,#56]
 3873 0204 67EE277A 	 fmuls s15,s14,s15
 3874 0208 C7ED0D7A 	 fsts s15,[r7,#52]
 809:../cleanflight/src/main/flight/mixer.c **** 
 810:../cleanflight/src/main/flight/mixer.c ****         if (mix > motorMixMax) {
 3875              	 .loc 5 810 0
 3876 020c 97ED0D7A 	 flds s14,[r7,#52]
 3877 0210 D7ED157A 	 flds s15,[r7,#84]
 3878 0214 B4EEE77A 	 fcmpes s14,s15
 3879 0218 F1EE10FA 	 fmstat
 3880 021c 02DD     	 ble .L274
 811:../cleanflight/src/main/flight/mixer.c ****             motorMixMax = mix;
 3881              	 .loc 5 811 0
 3882 021e 7B6B     	 ldr r3,[r7,#52]
 3883 0220 7B65     	 str r3,[r7,#84]
 3884 0222 0AE0     	 b .L256
 3885              	.L274:
 812:../cleanflight/src/main/flight/mixer.c ****         } else if (mix < motorMixMin) {
 3886              	 .loc 5 812 0
 3887 0224 97ED0D7A 	 flds s14,[r7,#52]
 3888 0228 D7ED147A 	 flds s15,[r7,#80]
 3889 022c B4EEE77A 	 fcmpes s14,s15
 3890 0230 F1EE10FA 	 fmstat
 3891 0234 01D5     	 bpl .L256
 813:../cleanflight/src/main/flight/mixer.c ****             motorMixMin = mix;
 3892              	 .loc 5 813 0
 3893 0236 7B6B     	 ldr r3,[r7,#52]
 3894 0238 3B65     	 str r3,[r7,#80]
 3895              	.L256:
 814:../cleanflight/src/main/flight/mixer.c ****         }
 815:../cleanflight/src/main/flight/mixer.c ****         motorMix[i] = mix;
 3896              	 .loc 5 815 0 discriminator 2
 3897 023a FB6C     	 ldr r3,[r7,#76]
 3898 023c 9B00     	 lsls r3,r3,#2
 3899 023e 07F16002 	 add r2,r7,#96
 3900 0242 1344     	 add r3,r3,r2
 3901 0244 543B     	 subs r3,r3,#84
 3902 0246 7A6B     	 ldr r2,[r7,#52]
 3903 0248 1A60     	 str r2,[r3]
 3904              	.LBE24:
 802:../cleanflight/src/main/flight/mixer.c ****         float mix =
 3905              	 .loc 5 802 0 discriminator 2
 3906 024a FB6C     	 ldr r3,[r7,#76]
 3907 024c 0133     	 adds r3,r3,#1
 3908 024e FB64     	 str r3,[r7,#76]
 3909              	.L253:
 802:../cleanflight/src/main/flight/mixer.c ****         float mix =
 3910              	 .loc 5 802 0 is_stmt 0 discriminator 1
 3911 0250 334B     	 ldr r3,.L276+24
 3912 0252 1B78     	 ldrb r3,[r3]
 3913 0254 1A46     	 mov r2,r3
 3914 0256 FB6C     	 ldr r3,[r7,#76]
 3915 0258 9A42     	 cmp r2,r3
 3916 025a A9DC     	 bgt .L258
 3917              	.LBE23:
 816:../cleanflight/src/main/flight/mixer.c ****     }
 817:../cleanflight/src/main/flight/mixer.c **** 
 818:../cleanflight/src/main/flight/mixer.c ****     pidUpdateAntiGravityThrottleFilter(throttle);
 3918              	 .loc 5 818 0 is_stmt 1
 3919 025c 2E4B     	 ldr r3,.L276+16
 3920 025e 1B68     	 ldr r3,[r3]
 3921 0260 1846     	 mov r0,r3
 3922 0262 FFF7FEFF 	 bl pidUpdateAntiGravityThrottleFilter
 819:../cleanflight/src/main/flight/mixer.c ****     
 820:../cleanflight/src/main/flight/mixer.c **** #if defined(USE_THROTTLE_BOOST)
 821:../cleanflight/src/main/flight/mixer.c ****     if (throttleBoost > 0.0f) {
 3923              	 .loc 5 821 0
 3924 0266 2F4B     	 ldr r3,.L276+28
 3925 0268 D3ED007A 	 flds s15,[r3]
 3926 026c F5EEC07A 	 fcmpezs s15
 3927 0270 F1EE10FA 	 fmstat
 3928 0274 27DD     	 ble .L259
 3929              	.LBB25:
 822:../cleanflight/src/main/flight/mixer.c ****         const float throttleHpf = throttle - pt1FilterApply(&throttleLpf, throttle);
 3930              	 .loc 5 822 0
 3931 0276 284B     	 ldr r3,.L276+16
 3932 0278 93ED008A 	 flds s16,[r3]
 3933 027c 264B     	 ldr r3,.L276+16
 3934 027e 1B68     	 ldr r3,[r3]
 3935 0280 2948     	 ldr r0,.L276+32
 3936 0282 1946     	 mov r1,r3
 3937 0284 FFF7FEFF 	 bl pt1FilterApply
 3938 0288 07EE900A 	 fmsr s15,r0
 3939 028c 78EE677A 	 fsubs s15,s16,s15
 3940 0290 C7ED0C7A 	 fsts s15,[r7,#48]
 823:../cleanflight/src/main/flight/mixer.c ****         throttle = constrainf(throttle + throttleBoost * throttleHpf, 0.0f, 1.0f);
 3941              	 .loc 5 823 0
 3942 0294 234B     	 ldr r3,.L276+28
 3943 0296 93ED007A 	 flds s14,[r3]
 3944 029a D7ED0C7A 	 flds s15,[r7,#48]
 3945 029e 27EE277A 	 fmuls s14,s14,s15
 3946 02a2 1D4B     	 ldr r3,.L276+16
 3947 02a4 D3ED007A 	 flds s15,[r3]
 3948 02a8 77EE277A 	 fadds s15,s14,s15
 3949 02ac B0EE670A 	 fcpys s0,s15
 3950 02b0 DFED1E0A 	 flds s1,.L276+36
 3951 02b4 B7EE001A 	 fconsts s2,#112
 3952 02b8 FFF7FEFF 	 bl constrainf
 3953 02bc F0EE407A 	 fcpys s15,s0
 3954 02c0 154B     	 ldr r3,.L276+16
 3955 02c2 C3ED007A 	 fsts s15,[r3]
 3956              	.L259:
 3957              	.LBE25:
 824:../cleanflight/src/main/flight/mixer.c ****     }
 825:../cleanflight/src/main/flight/mixer.c **** #endif
 826:../cleanflight/src/main/flight/mixer.c **** 
 827:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_GPS_RESCUE
 828:../cleanflight/src/main/flight/mixer.c ****     // If gps rescue is active then override the throttle. This prevents things
 829:../cleanflight/src/main/flight/mixer.c ****     // like throttle boost or throttle limit from negatively affecting the throttle.
 830:../cleanflight/src/main/flight/mixer.c ****     if (FLIGHT_MODE(GPS_RESCUE_MODE)) {
 3958              	 .loc 5 830 0
 3959 02c6 1A4B     	 ldr r3,.L276+40
 3960 02c8 1B88     	 ldrh r3,[r3]
 3961 02ca 03F40063 	 and r3,r3,#2048
 3962 02ce 002B     	 cmp r3,#0
 3963 02d0 04D0     	 beq .L261
 831:../cleanflight/src/main/flight/mixer.c ****         throttle = gpsRescueGetThrottle();
 3964              	 .loc 5 831 0
 3965 02d2 FFF7FEFF 	 bl gpsRescueGetThrottle
 3966 02d6 0246     	 mov r2,r0
 3967 02d8 0F4B     	 ldr r3,.L276+16
 3968 02da 1A60     	 str r2,[r3]
 3969              	.L261:
 832:../cleanflight/src/main/flight/mixer.c ****     }
 833:../cleanflight/src/main/flight/mixer.c **** #endif
 834:../cleanflight/src/main/flight/mixer.c **** 
 835:../cleanflight/src/main/flight/mixer.c ****     motorMixRange = motorMixMax - motorMixMin;
 3970              	 .loc 5 835 0
 3971 02dc 97ED157A 	 flds s14,[r7,#84]
 3972 02e0 D7ED147A 	 flds s15,[r7,#80]
 3973 02e4 77EE677A 	 fsubs s15,s14,s15
 3974 02e8 124B     	 ldr r3,.L276+44
 3975 02ea C3ED007A 	 fsts s15,[r3]
 836:../cleanflight/src/main/flight/mixer.c ****     if (motorMixRange > 1.0f) {
 3976              	 .loc 5 836 0
 3977 02ee 114B     	 ldr r3,.L276+44
 3978 02f0 D3ED007A 	 flds s15,[r3]
 3979 02f4 B7EE007A 	 fconsts s14,#112
 3980 02f8 F4EEC77A 	 fcmpes s15,s14
 3981 02fc F1EE10FA 	 fmstat
 3982 0300 42DD     	 ble .L275
 3983              	.LBB26:
 837:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 3984              	 .loc 5 837 0
 3985 0302 0023     	 movs r3,#0
 3986 0304 BB64     	 str r3,[r7,#72]
 3987 0306 2FE0     	 b .L264
 3988              	.L277:
 3989              	 .align 2
 3990              	.L276:
 3991 0308 00000000 	 .word pidData
 3992 030c 00000000 	 .word currentPidProfile
 3993 0310 00007A44 	 .word 1148846080
 3994 0314 00000000 	 .word currentControlRateProfile
 3995 0318 00000000 	 .word throttle
 3996 031c 00000000 	 .word currentMixer
 3997 0320 00000000 	 .word motorCount
 3998 0324 00000000 	 .word throttleBoost
 3999 0328 00000000 	 .word throttleLpf
 4000 032c 00000000 	 .word 0
 4001 0330 00000000 	 .word flightModeFlags
 4002 0334 00000000 	 .word motorMixRange
 4003              	.L265:
 838:../cleanflight/src/main/flight/mixer.c ****             motorMix[i] /= motorMixRange;
 4004              	 .loc 5 838 0 discriminator 3
 4005 0338 BB6C     	 ldr r3,[r7,#72]
 4006 033a 9B00     	 lsls r3,r3,#2
 4007 033c 07F16002 	 add r2,r7,#96
 4008 0340 1344     	 add r3,r3,r2
 4009 0342 543B     	 subs r3,r3,#84
 4010 0344 93ED007A 	 flds s14,[r3]
 4011 0348 2E4B     	 ldr r3,.L278
 4012 034a D3ED007A 	 flds s15,[r3]
 4013 034e C7EE277A 	 fdivs s15,s14,s15
 4014 0352 BB6C     	 ldr r3,[r7,#72]
 4015 0354 9B00     	 lsls r3,r3,#2
 4016 0356 07F16002 	 add r2,r7,#96
 4017 035a 1344     	 add r3,r3,r2
 4018 035c 543B     	 subs r3,r3,#84
 4019 035e C3ED007A 	 fsts s15,[r3]
 837:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 4020              	 .loc 5 837 0 discriminator 3
 4021 0362 BB6C     	 ldr r3,[r7,#72]
 4022 0364 0133     	 adds r3,r3,#1
 4023 0366 BB64     	 str r3,[r7,#72]
 4024              	.L264:
 837:../cleanflight/src/main/flight/mixer.c ****         for (int i = 0; i < motorCount; i++) {
 4025              	 .loc 5 837 0 is_stmt 0 discriminator 1
 4026 0368 274B     	 ldr r3,.L278+4
 4027 036a 1B78     	 ldrb r3,[r3]
 4028 036c 1A46     	 mov r2,r3
 4029 036e BB6C     	 ldr r3,[r7,#72]
 4030 0370 9A42     	 cmp r2,r3
 4031 0372 E1DC     	 bgt .L265
 4032              	.LBE26:
 839:../cleanflight/src/main/flight/mixer.c ****         }
 840:../cleanflight/src/main/flight/mixer.c ****         // Get the maximum correction by setting offset to center when airmode enabled
 841:../cleanflight/src/main/flight/mixer.c ****         if (isAirmodeActive()) {
 4033              	 .loc 5 841 0 is_stmt 1
 4034 0374 FFF7FEFF 	 bl isAirmodeActive
 4035 0378 0346     	 mov r3,r0
 4036 037a 002B     	 cmp r3,#0
 4037 037c 38D0     	 beq .L267
 842:../cleanflight/src/main/flight/mixer.c ****             throttle = 0.5f;
 4038              	 .loc 5 842 0
 4039 037e 234B     	 ldr r3,.L278+8
 4040 0380 4FF07C52 	 mov r2,#1056964608
 4041 0384 1A60     	 str r2,[r3]
 4042 0386 33E0     	 b .L267
 4043              	.L275:
 843:../cleanflight/src/main/flight/mixer.c ****         }
 844:../cleanflight/src/main/flight/mixer.c ****     } else {
 845:../cleanflight/src/main/flight/mixer.c ****         if (isAirmodeActive() || throttle > 0.5f) {  // Only automatically adjust throttle when air
 4044              	 .loc 5 845 0
 4045 0388 FFF7FEFF 	 bl isAirmodeActive
 4046 038c 0346     	 mov r3,r0
 4047 038e 002B     	 cmp r3,#0
 4048 0390 09D1     	 bne .L268
 4049              	 .loc 5 845 0 is_stmt 0 discriminator 1
 4050 0392 1E4B     	 ldr r3,.L278+8
 4051 0394 D3ED007A 	 flds s15,[r3]
 4052 0398 B6EE007A 	 fconsts s14,#96
 4053 039c F4EEC77A 	 fcmpes s15,s14
 4054 03a0 F1EE10FA 	 fmstat
 4055 03a4 24DD     	 ble .L267
 4056              	.L268:
 4057              	.LBB27:
 846:../cleanflight/src/main/flight/mixer.c ****             const float throttleLimitOffset = motorMixRange / 2.0f;
 4058              	 .loc 5 846 0 is_stmt 1
 4059 03a6 174B     	 ldr r3,.L278
 4060 03a8 D3ED007A 	 flds s15,[r3]
 4061 03ac B0EE007A 	 fconsts s14,#0
 4062 03b0 C7EE877A 	 fdivs s15,s15,s14
 4063 03b4 C7ED0B7A 	 fsts s15,[r7,#44]
 847:../cleanflight/src/main/flight/mixer.c ****             throttle = constrainf(throttle, 0.0f + throttleLimitOffset, 1.0f - throttleLimitOffset)
 4064              	 .loc 5 847 0
 4065 03b8 144B     	 ldr r3,.L278+8
 4066 03ba 93ED006A 	 flds s12,[r3]
 4067 03be D7ED0B7A 	 flds s15,[r7,#44]
 4068 03c2 9FED137A 	 flds s14,.L278+12
 4069 03c6 77EE876A 	 fadds s13,s15,s14
 4070 03ca B7EE007A 	 fconsts s14,#112
 4071 03ce D7ED0B7A 	 flds s15,[r7,#44]
 4072 03d2 77EE677A 	 fsubs s15,s14,s15
 4073 03d6 B0EE460A 	 fcpys s0,s12
 4074 03da F0EE660A 	 fcpys s1,s13
 4075 03de B0EE671A 	 fcpys s2,s15
 4076 03e2 FFF7FEFF 	 bl constrainf
 4077 03e6 F0EE407A 	 fcpys s15,s0
 4078 03ea 084B     	 ldr r3,.L278+8
 4079 03ec C3ED007A 	 fsts s15,[r3]
 4080              	.L267:
 4081              	.LBE27:
 848:../cleanflight/src/main/flight/mixer.c ****         }
 849:../cleanflight/src/main/flight/mixer.c ****     }
 850:../cleanflight/src/main/flight/mixer.c **** 
 851:../cleanflight/src/main/flight/mixer.c ****     // Apply the mix to motor endpoints
 852:../cleanflight/src/main/flight/mixer.c ****     applyMixToMotors(motorMix);
 4082              	 .loc 5 852 0 discriminator 1
 4083 03f0 07F10C03 	 add r3,r7,#12
 4084 03f4 1846     	 mov r0,r3
 4085 03f6 FFF7FEFF 	 bl applyMixToMotors
 4086              	.L244:
 853:../cleanflight/src/main/flight/mixer.c **** }
 4087              	 .loc 5 853 0
 4088 03fa 6037     	 adds r7,r7,#96
 4089              	.LCFI136:
 4090              	 .cfi_def_cfa_offset 16
 4091 03fc BD46     	 mov sp,r7
 4092              	.LCFI137:
 4093              	 .cfi_def_cfa_register 13
 4094              	 
 4095 03fe BDEC028B 	 fldmfdd sp!,{d8}
 4096              	.LCFI138:
 4097              	 .cfi_restore 80
 4098              	 .cfi_restore 81
 4099              	 .cfi_def_cfa_offset 8
 4100 0402 80BD     	 pop {r7,pc}
 4101              	.L279:
 4102              	 .align 2
 4103              	.L278:
 4104 0404 00000000 	 .word motorMixRange
 4105 0408 00000000 	 .word motorCount
 4106 040c 00000000 	 .word throttle
 4107 0410 00000000 	 .word 0
 4108              	 .cfi_endproc
 4109              	.LFE607:
 4111              	 .section .text.convertExternalToMotor,"ax",%progbits
 4112              	 .align 2
 4113              	 .global convertExternalToMotor
 4114              	 .thumb
 4115              	 .thumb_func
 4117              	convertExternalToMotor:
 4118              	.LFB608:
 854:../cleanflight/src/main/flight/mixer.c **** 
 855:../cleanflight/src/main/flight/mixer.c **** float convertExternalToMotor(uint16_t externalValue)
 856:../cleanflight/src/main/flight/mixer.c **** {
 4119              	 .loc 5 856 0
 4120              	 .cfi_startproc
 4121              	 
 4122              	 
 4123 0000 80B5     	 push {r7,lr}
 4124              	.LCFI139:
 4125              	 .cfi_def_cfa_offset 8
 4126              	 .cfi_offset 7,-8
 4127              	 .cfi_offset 14,-4
 4128 0002 84B0     	 sub sp,sp,#16
 4129              	.LCFI140:
 4130              	 .cfi_def_cfa_offset 24
 4131 0004 00AF     	 add r7,sp,#0
 4132              	.LCFI141:
 4133              	 .cfi_def_cfa_register 7
 4134 0006 0346     	 mov r3,r0
 4135 0008 FB80     	 strh r3,[r7,#6]
 857:../cleanflight/src/main/flight/mixer.c ****     uint16_t motorValue;
 858:../cleanflight/src/main/flight/mixer.c ****     switch ((int)isMotorProtocolDshot()) {
 4136              	 .loc 5 858 0
 4137 000a FFF7FEFF 	 bl isMotorProtocolDshot
 859:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_DSHOT
 860:../cleanflight/src/main/flight/mixer.c ****     case true:
 861:../cleanflight/src/main/flight/mixer.c ****         externalValue = constrain(externalValue, PWM_RANGE_MIN, PWM_RANGE_MAX);
 862:../cleanflight/src/main/flight/mixer.c **** 
 863:../cleanflight/src/main/flight/mixer.c ****         if (feature(FEATURE_3D)) {
 864:../cleanflight/src/main/flight/mixer.c ****             if (externalValue == PWM_RANGE_MID) {
 865:../cleanflight/src/main/flight/mixer.c ****                 motorValue = DSHOT_DISARM_COMMAND;
 866:../cleanflight/src/main/flight/mixer.c ****             } else if (externalValue < PWM_RANGE_MID) {
 867:../cleanflight/src/main/flight/mixer.c ****                 motorValue = scaleRange(externalValue, PWM_RANGE_MIN, PWM_RANGE_MID - 1, DSHOT_3D_D
 868:../cleanflight/src/main/flight/mixer.c ****             } else {
 869:../cleanflight/src/main/flight/mixer.c ****                 motorValue = scaleRange(externalValue, PWM_RANGE_MID + 1, PWM_RANGE_MAX, DSHOT_3D_D
 870:../cleanflight/src/main/flight/mixer.c ****             }
 871:../cleanflight/src/main/flight/mixer.c ****         } else {
 872:../cleanflight/src/main/flight/mixer.c ****             motorValue = (externalValue == PWM_RANGE_MIN) ? DSHOT_DISARM_COMMAND : scaleRange(exter
 873:../cleanflight/src/main/flight/mixer.c ****         }
 874:../cleanflight/src/main/flight/mixer.c **** 
 875:../cleanflight/src/main/flight/mixer.c ****         break;
 876:../cleanflight/src/main/flight/mixer.c ****     case false:
 877:../cleanflight/src/main/flight/mixer.c **** #endif
 878:../cleanflight/src/main/flight/mixer.c ****     default:
 879:../cleanflight/src/main/flight/mixer.c ****         motorValue = externalValue;
 4138              	 .loc 5 879 0
 4139 000e FB88     	 ldrh r3,[r7,#6]
 4140 0010 FB81     	 strh r3,[r7,#14]
 880:../cleanflight/src/main/flight/mixer.c ****         break;
 4141              	 .loc 5 880 0
 4142 0012 00BF     	 nop
 881:../cleanflight/src/main/flight/mixer.c ****     }
 882:../cleanflight/src/main/flight/mixer.c **** 
 883:../cleanflight/src/main/flight/mixer.c ****     return (float)motorValue;
 4143              	 .loc 5 883 0
 4144 0014 FB89     	 ldrh r3,[r7,#14]
 4145 0016 07EE903A 	 fmsr s15,r3
 4146 001a F8EE677A 	 fuitos s15,s15
 4147 001e 17EE903A 	 fmrs r3,s15
 884:../cleanflight/src/main/flight/mixer.c **** }
 4148              	 .loc 5 884 0
 4149 0022 1846     	 mov r0,r3
 4150 0024 1037     	 adds r7,r7,#16
 4151              	.LCFI142:
 4152              	 .cfi_def_cfa_offset 8
 4153 0026 BD46     	 mov sp,r7
 4154              	.LCFI143:
 4155              	 .cfi_def_cfa_register 13
 4156              	 
 4157 0028 80BD     	 pop {r7,pc}
 4158              	 .cfi_endproc
 4159              	.LFE608:
 4161 002a 00BF     	 .section .text.convertMotorToExternal,"ax",%progbits
 4162              	 .align 2
 4163              	 .global convertMotorToExternal
 4164              	 .thumb
 4165              	 .thumb_func
 4167              	convertMotorToExternal:
 4168              	.LFB609:
 885:../cleanflight/src/main/flight/mixer.c **** 
 886:../cleanflight/src/main/flight/mixer.c **** uint16_t convertMotorToExternal(float motorValue)
 887:../cleanflight/src/main/flight/mixer.c **** {
 4169              	 .loc 5 887 0
 4170              	 .cfi_startproc
 4171              	 
 4172              	 
 4173 0000 80B5     	 push {r7,lr}
 4174              	.LCFI144:
 4175              	 .cfi_def_cfa_offset 8
 4176              	 .cfi_offset 7,-8
 4177              	 .cfi_offset 14,-4
 4178 0002 84B0     	 sub sp,sp,#16
 4179              	.LCFI145:
 4180              	 .cfi_def_cfa_offset 24
 4181 0004 00AF     	 add r7,sp,#0
 4182              	.LCFI146:
 4183              	 .cfi_def_cfa_register 7
 4184 0006 7860     	 str r0,[r7,#4]
 888:../cleanflight/src/main/flight/mixer.c ****     uint16_t externalValue;
 889:../cleanflight/src/main/flight/mixer.c ****     switch ((int)isMotorProtocolDshot()) {
 4185              	 .loc 5 889 0
 4186 0008 FFF7FEFF 	 bl isMotorProtocolDshot
 890:../cleanflight/src/main/flight/mixer.c **** #ifdef USE_DSHOT
 891:../cleanflight/src/main/flight/mixer.c ****     case true:
 892:../cleanflight/src/main/flight/mixer.c ****         if (feature(FEATURE_3D)) {
 893:../cleanflight/src/main/flight/mixer.c ****             if (motorValue == DSHOT_DISARM_COMMAND || motorValue < DSHOT_MIN_THROTTLE) {
 894:../cleanflight/src/main/flight/mixer.c ****                 externalValue = PWM_RANGE_MID;
 895:../cleanflight/src/main/flight/mixer.c ****             } else if (motorValue <= DSHOT_3D_DEADBAND_LOW) {
 896:../cleanflight/src/main/flight/mixer.c ****                 externalValue = scaleRange(motorValue, DSHOT_MIN_THROTTLE, DSHOT_3D_DEADBAND_LOW, P
 897:../cleanflight/src/main/flight/mixer.c ****             } else {
 898:../cleanflight/src/main/flight/mixer.c ****                 externalValue = scaleRange(motorValue, DSHOT_3D_DEADBAND_HIGH, DSHOT_MAX_THROTTLE, 
 899:../cleanflight/src/main/flight/mixer.c ****             }
 900:../cleanflight/src/main/flight/mixer.c ****         } else {
 901:../cleanflight/src/main/flight/mixer.c ****             externalValue = (motorValue < DSHOT_MIN_THROTTLE) ? PWM_RANGE_MIN : scaleRange(motorVal
 902:../cleanflight/src/main/flight/mixer.c ****         }
 903:../cleanflight/src/main/flight/mixer.c ****         break;
 904:../cleanflight/src/main/flight/mixer.c ****     case false:
 905:../cleanflight/src/main/flight/mixer.c **** #endif
 906:../cleanflight/src/main/flight/mixer.c ****     default:
 907:../cleanflight/src/main/flight/mixer.c ****         externalValue = motorValue;
 4187              	 .loc 5 907 0
 4188 000c D7ED017A 	 flds s15,[r7,#4]
 4189 0010 FCEEE77A 	 ftouizs s15,s15
 4190 0014 C7ED007A 	 fsts s15,[r7]
 4191 0018 3B88     	 ldrh r3,[r7]
 4192 001a FB81     	 strh r3,[r7,#14]
 908:../cleanflight/src/main/flight/mixer.c ****         break;
 4193              	 .loc 5 908 0
 4194 001c 00BF     	 nop
 909:../cleanflight/src/main/flight/mixer.c ****     }
 910:../cleanflight/src/main/flight/mixer.c **** 
 911:../cleanflight/src/main/flight/mixer.c ****     return externalValue;
 4195              	 .loc 5 911 0
 4196 001e FB89     	 ldrh r3,[r7,#14]
 912:../cleanflight/src/main/flight/mixer.c **** }
 4197              	 .loc 5 912 0
 4198 0020 1846     	 mov r0,r3
 4199 0022 1037     	 adds r7,r7,#16
 4200              	.LCFI147:
 4201              	 .cfi_def_cfa_offset 8
 4202 0024 BD46     	 mov sp,r7
 4203              	.LCFI148:
 4204              	 .cfi_def_cfa_register 13
 4205              	 
 4206 0026 80BD     	 pop {r7,pc}
 4207              	 .cfi_endproc
 4208              	.LFE609:
 4210              	 .section .text.mixerSetThrottleAngleCorrection,"ax",%progbits
 4211              	 .align 2
 4212              	 .global mixerSetThrottleAngleCorrection
 4213              	 .thumb
 4214              	 .thumb_func
 4216              	mixerSetThrottleAngleCorrection:
 4217              	.LFB610:
 913:../cleanflight/src/main/flight/mixer.c **** 
 914:../cleanflight/src/main/flight/mixer.c **** void mixerSetThrottleAngleCorrection(int correctionValue)
 915:../cleanflight/src/main/flight/mixer.c **** {
 4218              	 .loc 5 915 0
 4219              	 .cfi_startproc
 4220              	 
 4221              	 
 4222              	 
 4223 0000 80B4     	 push {r7}
 4224              	.LCFI149:
 4225              	 .cfi_def_cfa_offset 4
 4226              	 .cfi_offset 7,-4
 4227 0002 83B0     	 sub sp,sp,#12
 4228              	.LCFI150:
 4229              	 .cfi_def_cfa_offset 16
 4230 0004 00AF     	 add r7,sp,#0
 4231              	.LCFI151:
 4232              	 .cfi_def_cfa_register 7
 4233 0006 7860     	 str r0,[r7,#4]
 916:../cleanflight/src/main/flight/mixer.c ****     throttleAngleCorrection = correctionValue;
 4234              	 .loc 5 916 0
 4235 0008 034A     	 ldr r2,.L285
 4236 000a 7B68     	 ldr r3,[r7,#4]
 4237 000c 1360     	 str r3,[r2]
 917:../cleanflight/src/main/flight/mixer.c **** }
 4238              	 .loc 5 917 0
 4239 000e 0C37     	 adds r7,r7,#12
 4240              	.LCFI152:
 4241              	 .cfi_def_cfa_offset 4
 4242 0010 BD46     	 mov sp,r7
 4243              	.LCFI153:
 4244              	 .cfi_def_cfa_register 13
 4245              	 
 4246 0012 5DF8047B 	 ldr r7,[sp],#4
 4247              	.LCFI154:
 4248              	 .cfi_restore 7
 4249              	 .cfi_def_cfa_offset 0
 4250 0016 7047     	 bx lr
 4251              	.L286:
 4252              	 .align 2
 4253              	.L285:
 4254 0018 00000000 	 .word throttleAngleCorrection
 4255              	 .cfi_endproc
 4256              	.LFE610:
 4258              	 .section .bss.rcThrottlePrevious.14657,"aw",%nobits
 4259              	 .align 1
 4262              	rcThrottlePrevious.14657:
 4263 0000 0000     	 .space 2
 4264              	 .section .bss.reversalTimeUs.14658,"aw",%nobits
 4265              	 .align 2
 4268              	reversalTimeUs.14658:
 4269 0000 00000000 	 .space 4
 4270              	 .text
 4271              	.Letext0:
 4272              	 .file 6 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 4273              	 .file 7 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 4274              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 4275              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 4276              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/axis.h"
 4277              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/filter.h"
 4278              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 4279              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 4280              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 4281              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/timer.h"
 4282              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
 4283              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 4284              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 4285              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 4286              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/controlrate_profile.h"
 4287              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 4288              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 4289              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_core.h"
 4290              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
 4291              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
 4292              	 .file 26 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/gps_rescue.h"
 4293              	 .file 27 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer_tricopter.h"
 4294              	 .file 28 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
 4295              	 .file 29 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 4296              	 .file 30 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
 4297              	 .file 31 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
 4298              	 .file 32 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
 4299              	 .file 33 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/gyro.h"
 4300              	 .file 34 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 4301              	 .file 35 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mixer.c
    {standard input}:20     .text.constrain:00000000 $t
    {standard input}:24     .text.constrain:00000000 constrain
    {standard input}:84     .text.constrainf:00000000 $t
    {standard input}:88     .text.constrainf:00000000 constrainf
    {standard input}:150    .text.rxConfig:00000000 $t
    {standard input}:154    .text.rxConfig:00000000 rxConfig
    {standard input}:184    .text.rxConfig:00000010 $d
    {standard input}:189    .text.flight3DConfig:00000000 $t
    {standard input}:193    .text.flight3DConfig:00000000 flight3DConfig
    {standard input}:223    .text.flight3DConfig:00000010 $d
    {standard input}:228    .text.flight3DConfigMutable:00000000 $t
    {standard input}:232    .text.flight3DConfigMutable:00000000 flight3DConfigMutable
    {standard input}:261    .text.flight3DConfigMutable:00000010 $d
    {standard input}:266    .text.customMotorMixer:00000000 $t
    {standard input}:270    .text.customMotorMixer:00000000 customMotorMixer
    {standard input}:310    .text.customMotorMixer:0000001c $d
                            *COM*:00000080 customMotorMixer_SystemArray
    {standard input}:315    .text.mixerConfig:00000000 $t
    {standard input}:319    .text.mixerConfig:00000000 mixerConfig
    {standard input}:348    .text.mixerConfig:00000010 $d
                            *COM*:00000003 mixerConfig_System
    {standard input}:353    .text.motorConfig:00000000 $t
    {standard input}:357    .text.motorConfig:00000000 motorConfig
    {standard input}:386    .text.motorConfig:00000010 $d
                            *COM*:00000017 motorConfig_System
                            *COM*:00000003 mixerConfig_Copy
    {standard input}:397    .pg_registry:00000000 mixerConfig_Registry
    {standard input}:394    .pg_registry:00000000 $d
    {standard input}:409    .pg_resetdata:00000000 pgResetTemplate_mixerConfig
    {standard input}:406    .pg_resetdata:00000000 $d
                            *COM*:00000017 motorConfig_Copy
    {standard input}:420    .pg_registry:00000014 motorConfig_Registry
    {standard input}:433    .text.pgResetFn_motorConfig:00000000 pgResetFn_motorConfig
    {standard input}:428    .text.pgResetFn_motorConfig:00000000 $t
                            *COM*:00000080 customMotorMixer_CopyArray
    {standard input}:552    .pg_registry:00000028 customMotorMixer_Registry
    {standard input}:562    .bss.motorCount:00000000 motorCount
    {standard input}:563    .bss.motorCount:00000000 $d
    {standard input}:565    .bss.motorMixRange:00000000 $d
    {standard input}:568    .bss.motorMixRange:00000000 motorMixRange
                            *COM*:00000020 motor
                            *COM*:00000020 motor_disarmed
                            *COM*:00000001 currentMixerMode
    {standard input}:574    .bss.currentMixer:00000000 $d
    {standard input}:577    .bss.currentMixer:00000000 currentMixer
    {standard input}:580    .bss.throttleAngleCorrection:00000000 $d
    {standard input}:583    .bss.throttleAngleCorrection:00000000 throttleAngleCorrection
    {standard input}:586    .rodata.mixerQuadX:00000000 $d
    {standard input}:589    .rodata.mixerQuadX:00000000 mixerQuadX
    {standard input}:607    .rodata.mixerTricopter:00000000 $d
    {standard input}:610    .rodata.mixerTricopter:00000000 mixerTricopter
    {standard input}:624    .rodata.mixerQuadP:00000000 $d
    {standard input}:627    .rodata.mixerQuadP:00000000 mixerQuadP
    {standard input}:645    .rodata.mixerBicopter:00000000 $d
    {standard input}:648    .rodata.mixerBicopter:00000000 mixerBicopter
    {standard input}:658    .rodata.mixerY4:00000000 $d
    {standard input}:661    .rodata.mixerY4:00000000 mixerY4
    {standard input}:679    .rodata.mixerHex6X:00000000 $d
    {standard input}:682    .rodata.mixerHex6X:00000000 mixerHex6X
    {standard input}:708    .rodata.mixerHex6H:00000000 $d
    {standard input}:711    .rodata.mixerHex6H:00000000 mixerHex6H
    {standard input}:737    .rodata.mixerHex6P:00000000 $d
    {standard input}:740    .rodata.mixerHex6P:00000000 mixerHex6P
    {standard input}:766    .rodata.mixerY6:00000000 $d
    {standard input}:769    .rodata.mixerY6:00000000 mixerY6
    {standard input}:795    .rodata.mixerOctoX8:00000000 $d
    {standard input}:798    .rodata.mixerOctoX8:00000000 mixerOctoX8
    {standard input}:832    .rodata.mixerOctoFlatP:00000000 $d
    {standard input}:835    .rodata.mixerOctoFlatP:00000000 mixerOctoFlatP
    {standard input}:869    .rodata.mixerOctoFlatX:00000000 $d
    {standard input}:872    .rodata.mixerOctoFlatX:00000000 mixerOctoFlatX
    {standard input}:906    .rodata.mixerVtail4:00000000 $d
    {standard input}:909    .rodata.mixerVtail4:00000000 mixerVtail4
    {standard input}:927    .rodata.mixerAtail4:00000000 $d
    {standard input}:930    .rodata.mixerAtail4:00000000 mixerAtail4
    {standard input}:948    .rodata.mixerDualcopter:00000000 $d
    {standard input}:951    .rodata.mixerDualcopter:00000000 mixerDualcopter
    {standard input}:961    .rodata.mixerSingleProp:00000000 $d
    {standard input}:964    .rodata.mixerSingleProp:00000000 mixerSingleProp
    {standard input}:970    .rodata.mixerQuadX1234:00000000 $d
    {standard input}:973    .rodata.mixerQuadX1234:00000000 mixerQuadX1234
    {standard input}:995    .rodata.mixers:00000000 mixers
    {standard input}:992    .rodata.mixers:00000000 $d
                            *COM*:00000004 motorOutputHigh
                            *COM*:00000004 motorOutputLow
    {standard input}:1080   .bss.disarmMotorOutput:00000000 $d
    {standard input}:1083   .bss.disarmMotorOutput:00000000 disarmMotorOutput
    {standard input}:1086   .bss.deadbandMotor3dHigh:00000000 $d
    {standard input}:1089   .bss.deadbandMotor3dHigh:00000000 deadbandMotor3dHigh
    {standard input}:1092   .bss.deadbandMotor3dLow:00000000 $d
    {standard input}:1095   .bss.deadbandMotor3dLow:00000000 deadbandMotor3dLow
    {standard input}:1098   .bss.rcCommand3dDeadBandLow:00000000 $d
    {standard input}:1101   .bss.rcCommand3dDeadBandLow:00000000 rcCommand3dDeadBandLow
    {standard input}:1104   .bss.rcCommand3dDeadBandHigh:00000000 $d
    {standard input}:1107   .bss.rcCommand3dDeadBandHigh:00000000 rcCommand3dDeadBandHigh
    {standard input}:1110   .bss.rcCommandThrottleRange:00000000 $d
    {standard input}:1113   .bss.rcCommandThrottleRange:00000000 rcCommandThrottleRange
    {standard input}:1116   .bss.rcCommandThrottleRange3dLow:00000000 $d
    {standard input}:1119   .bss.rcCommandThrottleRange3dLow:00000000 rcCommandThrottleRange3dLow
    {standard input}:1122   .bss.rcCommandThrottleRange3dHigh:00000000 $d
    {standard input}:1125   .bss.rcCommandThrottleRange3dHigh:00000000 rcCommandThrottleRange3dHigh
    {standard input}:1128   .text.getMotorCount:00000000 $t
    {standard input}:1133   .text.getMotorCount:00000000 getMotorCount
    {standard input}:1164   .text.getMotorCount:00000014 $d
    {standard input}:1169   .text.getMotorMixRange:00000000 $t
    {standard input}:1174   .text.getMotorMixRange:00000000 getMotorMixRange
    {standard input}:1205   .text.getMotorMixRange:00000014 $d
    {standard input}:1210   .text.areMotorsRunning:00000000 $t
    {standard input}:1215   .text.areMotorsRunning:00000000 areMotorsRunning
    {standard input}:1302   .text.areMotorsRunning:00000064 $d
    {standard input}:1310   .text.mixerIsTricopter:00000000 $t
    {standard input}:1315   .text.mixerIsTricopter:00000000 mixerIsTricopter
    {standard input}:1364   .text.mixerIsTricopter:0000002c $d
    {standard input}:1369   .text.mixerIsOutputSaturated:00000000 $t
    {standard input}:1374   .text.mixerIsOutputSaturated:00000000 mixerIsOutputSaturated
    {standard input}:1432   .text.mixerIsOutputSaturated:00000048 $d
    {standard input}:1437   .text.initEscEndpoints:00000000 $t
    {standard input}:1442   .text.initEscEndpoints:00000000 initEscEndpoints
    {standard input}:1600   .text.initEscEndpoints:0000015c $d
    {standard input}:1614   .text.mixerInit:00000000 $t
    {standard input}:1619   .text.mixerInit:00000000 mixerInit
    {standard input}:1664   .text.mixerInit:00000028 $d
    {standard input}:1669   .text.mixerConfigureOutput:00000000 $t
    {standard input}:1674   .text.mixerConfigureOutput:00000000 mixerConfigureOutput
    {standard input}:2009   .text.mixerResetDisarmedMotors:00000000 mixerResetDisarmedMotors
    {standard input}:1860   .text.mixerConfigureOutput:00000110 $d
    {standard input}:1868   .text.mixerLoadMix:00000000 $t
    {standard input}:1873   .text.mixerLoadMix:00000000 mixerLoadMix
    {standard input}:1999   .text.mixerLoadMix:000000a4 $d
    {standard input}:2004   .text.mixerResetDisarmedMotors:00000000 $t
    {standard input}:2066   .text.mixerResetDisarmedMotors:00000030 $d
    {standard input}:2072   .text.writeMotors:00000000 $t
    {standard input}:2077   .text.writeMotors:00000000 writeMotors
    {standard input}:2147   .text.writeMotors:00000050 $d
    {standard input}:2153   .text.writeAllMotors:00000000 $t
    {standard input}:2157   .text.writeAllMotors:00000000 writeAllMotors
    {standard input}:2218   .text.writeAllMotors:00000044 $d
    {standard input}:2224   .text.stopMotors:00000000 $t
    {standard input}:2229   .text.stopMotors:00000000 stopMotors
    {standard input}:2271   .text.stopMotors:0000002c $d
    {standard input}:2276   .text.stopPwmAllMotors:00000000 $t
    {standard input}:2281   .text.stopPwmAllMotors:00000000 stopPwmAllMotors
    {standard input}:2308   .text.stopPwmAllMotors:00000018 $d
    {standard input}:2313   .bss.throttle:00000000 $d
    {standard input}:2316   .bss.throttle:00000000 throttle
    {standard input}:2319   .bss.motorOutputMin:00000000 $d
    {standard input}:2322   .bss.motorOutputMin:00000000 motorOutputMin
    {standard input}:2325   .bss.motorRangeMin:00000000 $d
    {standard input}:2328   .bss.motorRangeMin:00000000 motorRangeMin
    {standard input}:2331   .bss.motorRangeMax:00000000 $d
    {standard input}:2334   .bss.motorRangeMax:00000000 motorRangeMax
    {standard input}:2337   .bss.motorOutputRange:00000000 $d
    {standard input}:2340   .bss.motorOutputRange:00000000 motorOutputRange
    {standard input}:2345   .bss.motorOutputMixSign:00000000 motorOutputMixSign
    {standard input}:2346   .bss.motorOutputMixSign:00000000 $d
    {standard input}:2348   .text.calculateThrottleAndCurrentMotorEndpoints:00000000 $t
    {standard input}:2352   .text.calculateThrottleAndCurrentMotorEndpoints:00000000 calculateThrottleAndCurrentMotorEndpoints
    {standard input}:2717   .text.calculateThrottleAndCurrentMotorEndpoints:000002a4 $d
    {standard input}:4262   .bss.rcThrottlePrevious.14657:00000000 rcThrottlePrevious.14657
    {standard input}:4268   .bss.reversalTimeUs.14658:00000000 reversalTimeUs.14658
    {standard input}:2738   .text.calculateThrottleAndCurrentMotorEndpoints:000002f0 $t
    {standard input}:2815   .text.calculateThrottleAndCurrentMotorEndpoints:00000390 $d
    {standard input}:2831   .text.applyFlipOverAfterCrashModeToMotors:00000000 $t
    {standard input}:2835   .text.applyFlipOverAfterCrashModeToMotors:00000000 applyFlipOverAfterCrashModeToMotors
    {standard input}:3245   .text.applyFlipOverAfterCrashModeToMotors:00000328 $d
    {standard input}:3263   .text.applyMixToMotors:00000000 $t
    {standard input}:3267   .text.applyMixToMotors:00000000 applyMixToMotors
    {standard input}:3509   .text.applyMixToMotors:000001d8 $d
    {standard input}:3526   .text.applyThrottleLimit:00000000 $t
    {standard input}:3531   .text.applyThrottleLimit:00000000 applyThrottleLimit
    {standard input}:3626   .text.applyThrottleLimit:00000084 $d
    {standard input}:3632   .text.mixTable:00000000 $t
    {standard input}:3637   .text.mixTable:00000000 mixTable
    {standard input}:3991   .text.mixTable:00000308 $d
    {standard input}:4005   .text.mixTable:00000338 $t
    {standard input}:4104   .text.mixTable:00000404 $d
    {standard input}:4112   .text.convertExternalToMotor:00000000 $t
    {standard input}:4117   .text.convertExternalToMotor:00000000 convertExternalToMotor
    {standard input}:4162   .text.convertMotorToExternal:00000000 $t
    {standard input}:4167   .text.convertMotorToExternal:00000000 convertMotorToExternal
    {standard input}:4211   .text.mixerSetThrottleAngleCorrection:00000000 $t
    {standard input}:4216   .text.mixerSetThrottleAngleCorrection:00000000 mixerSetThrottleAngleCorrection
    {standard input}:4254   .text.mixerSetThrottleAngleCorrection:00000018 $d
    {standard input}:4259   .bss.rcThrottlePrevious.14657:00000000 $d
    {standard input}:4265   .bss.reversalTimeUs.14658:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
rxConfig_System
flight3DConfig_System
timerioTagGetByUsage
armingFlags
mixerTricopterIsServoSaturated
feature
mixerTricopterInit
pwmAreMotorsEnabled
pwmWriteMotor
pwmCompleteMotorUpdate
delay
pwmShutdownPulsesForAllMotors
delayMicroseconds
isMotorProtocolDshot
isMotorsReversed
pidResetITerm
rcCommand
getRcDeflectionAbs
getRcDeflection
sqrtf
mixerTricopterMotorCorrection
failsafeIsActive
isAirmodeActive
rcData
currentControlRateProfile
isFlipOverAfterCrashMode
gyroYawSpinDetected
calculateVbatPidCompensation
pidUpdateAntiGravityThrottleFilter
pt1FilterApply
gpsRescueGetThrottle
pidData
currentPidProfile
throttleBoost
throttleLpf
flightModeFlags
