   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "pid.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.constrainf,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	constrainf:
  25              	.LFB522:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline float constrainf(float amt, float low, float high)
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  27              	 .loc 1 161 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 85B0     	 sub sp,sp,#20
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 87ED030A 	 fsts s0,[r7,#12]
  43 000a C7ED020A 	 fsts s1,[r7,#8]
  44 000e 87ED011A 	 fsts s2,[r7,#4]
 162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
  45              	 .loc 1 162 0
  46 0012 97ED037A 	 flds s14,[r7,#12]
  47 0016 D7ED027A 	 flds s15,[r7,#8]
  48 001a B4EEE77A 	 fcmpes s14,s15
  49 001e F1EE10FA 	 fmstat
  50 0022 01D5     	 bpl .L9
 163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
  51              	 .loc 1 163 0
  52 0024 BB68     	 ldr r3,[r7,#8]
  53 0026 0BE0     	 b .L4
  54              	.L9:
 164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
  55              	 .loc 1 164 0
  56 0028 97ED037A 	 flds s14,[r7,#12]
  57 002c D7ED017A 	 flds s15,[r7,#4]
  58 0030 B4EEE77A 	 fcmpes s14,s15
  59 0034 F1EE10FA 	 fmstat
  60 0038 01DD     	 ble .L10
 165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
  61              	 .loc 1 165 0
  62 003a 7B68     	 ldr r3,[r7,#4]
  63 003c 00E0     	 b .L4
  64              	.L10:
 166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
  65              	 .loc 1 167 0
  66 003e FB68     	 ldr r3,[r7,#12]
  67              	.L4:
  68 0040 07EE903A 	 fmsr s15,r3
 168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
  69              	 .loc 1 168 0
  70 0044 B0EE670A 	 fcpys s0,s15
  71 0048 1437     	 adds r7,r7,#20
  72              	.LCFI3:
  73              	 .cfi_def_cfa_offset 4
  74 004a BD46     	 mov sp,r7
  75              	.LCFI4:
  76              	 .cfi_def_cfa_register 13
  77              	 
  78 004c 5DF8047B 	 ldr r7,[sp],#4
  79              	.LCFI5:
  80              	 .cfi_restore 7
  81              	 .cfi_def_cfa_offset 0
  82 0050 7047     	 bx lr
  83              	 .cfi_endproc
  84              	.LFE522:
  86 0052 00BF     	 .section .text.cmpTimeUs,"ax",%progbits
  87              	 .align 2
  88              	 .thumb
  89              	 .thumb_func
  91              	cmpTimeUs:
  92              	.LFB526:
  93              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include "platform.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include "pg/pg.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // time difference, 32 bits always sufficient
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef int32_t timeDelta_t;
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // millisecond time
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint32_t timeMs_t ;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // microsecond time
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #ifdef USE_64BIT_TIME
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint64_t timeUs_t;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #define TIMEUS_MAX UINT64_MAX
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #else
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint32_t timeUs_t;
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #define TIMEUS_MAX UINT32_MAX
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #endif
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** static inline timeDelta_t cmpTimeUs(timeUs_t a, timeUs_t b) { return (timeDelta_t)(a - b); }
  94              	 .loc 2 43 0
  95              	 .cfi_startproc
  96              	 
  97              	 
  98              	 
  99 0000 80B4     	 push {r7}
 100              	.LCFI6:
 101              	 .cfi_def_cfa_offset 4
 102              	 .cfi_offset 7,-4
 103 0002 83B0     	 sub sp,sp,#12
 104              	.LCFI7:
 105              	 .cfi_def_cfa_offset 16
 106 0004 00AF     	 add r7,sp,#0
 107              	.LCFI8:
 108              	 .cfi_def_cfa_register 7
 109 0006 7860     	 str r0,[r7,#4]
 110 0008 3960     	 str r1,[r7]
 111              	 .loc 2 43 0
 112 000a 7A68     	 ldr r2,[r7,#4]
 113 000c 3B68     	 ldr r3,[r7]
 114 000e D31A     	 subs r3,r2,r3
 115 0010 1846     	 mov r0,r3
 116 0012 0C37     	 adds r7,r7,#12
 117              	.LCFI9:
 118              	 .cfi_def_cfa_offset 4
 119 0014 BD46     	 mov sp,r7
 120              	.LCFI10:
 121              	 .cfi_def_cfa_register 13
 122              	 
 123 0016 5DF8047B 	 ldr r7,[sp],#4
 124              	.LCFI11:
 125              	 .cfi_restore 7
 126              	 .cfi_def_cfa_offset 0
 127 001a 7047     	 bx lr
 128              	 .cfi_endproc
 129              	.LFE526:
 131              	 .section .text.pidProfilesMutable,"ax",%progbits
 132              	 .align 2
 133              	 .thumb
 134              	 .thumb_func
 136              	pidProfilesMutable:
 137              	.LFB538:
 138              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define MAX_PID_PROCESS_DENOM       16
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_CONTROLLER_BETAFLIGHT   1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_MIXER_SCALING           1000.0f
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_SERVO_MIXER_SCALING     0.7f
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT                500
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_YAW            400
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MIN            100
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MAX            1000
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // Scaling factors for Pids for better tunable range in configurator for betaflight pid controller.
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PTERM_SCALE 0.032029f
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define ITERM_SCALE 0.244381f
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define DTERM_SCALE 0.000529f
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // The constant scale factor to replace the Kd component of the feedforward calculation.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // This value gives the same "feel" as the previous Kd default of 26 (26 * DTERM_SCALE)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define FEEDFORWARD_SCALE 0.013754f
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ROLL,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_PITCH,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_YAW,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_LEVEL,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_MAG,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ITEM_COUNT
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidIndex_e;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_OFF = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ON,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ALWAYS
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidSuperExpoYaw_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_OFF = 0,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_ON
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidStabilisationState_e;
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_OFF = 0,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_ON,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_BEEP
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidCrashRecovery_e;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidf_s {
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t P;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t I;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t D;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t F;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidf_t;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_SMOOTH,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_STEP
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } antiGravityMode_e;
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_OFF,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP_INC,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY_INC
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelax_e;
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_GYRO,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_SETPOINT
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelaxType_e;
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidProfile_s {
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yaw_lowpass_hz;                // Additional yaw filter when yaw axis too noisy
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass_hz;              // Delta Filter in hz
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_hz;                // Biquad dterm notch hz
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_cutoff;            // Biquad dterm notch low cutoff
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     pidf_t  pid[PID_ITEM_COUNT];
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t dterm_filter_type;              // Filter selection for dterm
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t itermWindupPointPercent;        // Experimental ITerm windup threshold, percent motor s
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimit;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimitYaw;
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pidAtMinThrottle;               // Disable/Enable pids on zero throttle. Normally even 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t levelAngleLimit;                // Max angle in degrees in level mode
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_effect;            // inclination factor for Horizon mode
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_expert_mode;       // OFF or ON
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     // Betaflight PID controller parameters
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t  antiGravityMode;             // type of anti gravity method
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermThrottleThreshold;        // max allowed throttle delta before iterm accelerated 
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermAcceleratorGain;          // Iterm Accelerator Gain when itermThrottlethreshold i
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yawRateAccelLimit;             // yaw accel limiter for deg/sec/ms
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t rateAccelLimit;                // accel limiter roll/pitch deg/sec/ms
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_dthreshold;              // dterm crash value
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_gthreshold;              // gyro crash value
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_setpoint_threshold;      // setpoint must be below this value to detect crash, s
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_time;                    // ms
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_delay;                   // ms
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_angle;           // degrees
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_rate;            // degree/second
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t vbatPidCompensation;            // Scale PIDsum to battery voltage
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t feedForwardTransition;          // Feed forward weight transition
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_limit_yaw;               // limits yaw errorRate, so crashes don't cause huge th
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermLimit;
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass2_hz;             // Extra PT1 Filter on D in hz
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery;                 // off, on, on and beeps when it is in crash recovery m
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost;                 // how much should throttle be boosted during transient
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost_cutoff;          // Which cutoff frequency to use for throttle boost. hi
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_rotation;                 // rotates iterm to translate world errors to local coo
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t smart_feedforward;              // takes only the larger of P and the D weight feed for
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_type;               // Specifies type of relax algorithm
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_cutoff;             // This cutoff frequency specifies a low pass filter wh
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax;                    // Enable iterm suppression during stick input
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_angle_limit;       // Acro trainer roll/pitch angle limit in degrees
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_debug_axis;        // The axis for which record debugging values are captu
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_gain;              // The strength of the limiting. Raising may reduce ove
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t acro_trainer_lookahead_ms;     // The lookahead window in milliseconds used to reduce 
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_gain;               // How strongly should the absolute accumulated error b
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_limit;              // Limit to the correction
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_error_limit;        // Limit to the accumulated error
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidProfile_t;
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #ifndef USE_OSD_SLAVE
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE_ARRAY(pidProfile_t, MAX_PROFILE_COUNT, pidProfiles);
 139              	 .loc 3 151 0
 140              	 .cfi_startproc
 141              	 
 142              	 
 143              	 
 144 0000 80B4     	 push {r7}
 145              	.LCFI12:
 146              	 .cfi_def_cfa_offset 4
 147              	 .cfi_offset 7,-4
 148 0002 83B0     	 sub sp,sp,#12
 149              	.LCFI13:
 150              	 .cfi_def_cfa_offset 16
 151 0004 00AF     	 add r7,sp,#0
 152              	.LCFI14:
 153              	 .cfi_def_cfa_register 7
 154 0006 7860     	 str r0,[r7,#4]
 155              	 .loc 3 151 0
 156 0008 7B68     	 ldr r3,[r7,#4]
 157 000a 5822     	 movs r2,#88
 158 000c 02FB03F3 	 mul r3,r2,r3
 159 0010 034A     	 ldr r2,.L15
 160 0012 1344     	 add r3,r3,r2
 161 0014 1846     	 mov r0,r3
 162 0016 0C37     	 adds r7,r7,#12
 163              	.LCFI15:
 164              	 .cfi_def_cfa_offset 4
 165 0018 BD46     	 mov sp,r7
 166              	.LCFI16:
 167              	 .cfi_def_cfa_register 13
 168              	 
 169 001a 5DF8047B 	 ldr r7,[sp],#4
 170              	.LCFI17:
 171              	 .cfi_restore 7
 172              	 .cfi_def_cfa_offset 0
 173 001e 7047     	 bx lr
 174              	.L16:
 175              	 .align 2
 176              	.L15:
 177 0020 00000000 	 .word pidProfiles_SystemArray
 178              	 .cfi_endproc
 179              	.LFE538:
 181              	 .section .text.pidConfig,"ax",%progbits
 182              	 .align 2
 183              	 .thumb
 184              	 .thumb_func
 186              	pidConfig:
 187              	.LFB540:
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #endif
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidConfig_s {
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pid_process_denom;              // Processing denominator for PID controller vs gyro sa
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_prevention;          // off, on - enables pidsum runaway disarm logic
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t runaway_takeoff_deactivate_delay;   // delay in ms for "in-flight" conditions before d
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_deactivate_throttle; // minimum throttle percent required during deacti
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidConfig_t;
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE(pidConfig_t, pidConfig);
 188              	 .loc 3 161 0
 189              	 .cfi_startproc
 190              	 
 191              	 
 192              	 
 193 0000 80B4     	 push {r7}
 194              	.LCFI18:
 195              	 .cfi_def_cfa_offset 4
 196              	 .cfi_offset 7,-4
 197 0002 00AF     	 add r7,sp,#0
 198              	.LCFI19:
 199              	 .cfi_def_cfa_register 7
 200              	 .loc 3 161 0
 201 0004 024B     	 ldr r3,.L19
 202 0006 1846     	 mov r0,r3
 203 0008 BD46     	 mov sp,r7
 204              	.LCFI20:
 205              	 .cfi_def_cfa_register 13
 206              	 
 207 000a 5DF8047B 	 ldr r7,[sp],#4
 208              	.LCFI21:
 209              	 .cfi_restore 7
 210              	 .cfi_def_cfa_offset 0
 211 000e 7047     	 bx lr
 212              	.L20:
 213              	 .align 2
 214              	.L19:
 215 0010 00000000 	 .word pidConfig_System
 216              	 .cfi_endproc
 217              	.LFE540:
 219              	 .global pidNames
 220              	 .section .rodata.pidNames,"a",%progbits
 221              	 .align 2
 224              	pidNames:
 225 0000 524F4C4C 	 .ascii "ROLL;PITCH;YAW;LEVEL;MAG;\000"
 225      3B504954 
 225      43483B59 
 225      41573B4C 
 225      4556454C 
 226              	 .comm targetPidLooptime,4,4
 227              	 .comm pidData,60,4
 228 001a 0000     	 .section .bss.pidStabilisationEnabled,"aw",%nobits
 231              	pidStabilisationEnabled:
 232 0000 00       	 .space 1
 233              	 .section .bss.inCrashRecoveryMode,"aw",%nobits
 236              	inCrashRecoveryMode:
 237 0000 00       	 .space 1
 238              	 .section .bss.dT,"aw",%nobits
 239              	 .align 2
 242              	dT:
 243 0000 00000000 	 .space 4
 244              	 .section .bss.pidFrequency,"aw",%nobits
 245              	 .align 2
 248              	pidFrequency:
 249 0000 00000000 	 .space 4
 250              	 .section .bss.antiGravityMode,"aw",%nobits
 253              	antiGravityMode:
 254 0000 00       	 .space 1
 255              	 .section .bss.antiGravityThrottleHpf,"aw",%nobits
 256              	 .align 2
 259              	antiGravityThrottleHpf:
 260 0000 00000000 	 .space 4
 261              	 .section .bss.itermAcceleratorGain,"aw",%nobits
 262              	 .align 1
 265              	itermAcceleratorGain:
 266 0000 0000     	 .space 2
 267              	 .section .data.antiGravityOsdCutoff,"aw",%progbits
 268              	 .align 2
 271              	antiGravityOsdCutoff:
 272 0000 0000803F 	 .word 1065353216
 273              	 .section .bss.antiGravityEnabled,"aw",%nobits
 276              	antiGravityEnabled:
 277 0000 00       	 .space 1
 278              	 .comm pidConfig_System,5,4
 279              	 .comm pidConfig_Copy,5,4
 280              	 .global pidConfig_Registry
 281              	 .section .pg_registry,"a",%progbits
 282              	 .align 2
 285              	pidConfig_Registry:
 286 0000 F821     	 .short 8696
 287 0002 0500     	 .short 5
 288 0004 00000000 	 .word pidConfig_System
 289 0008 00000000 	 .word pidConfig_Copy
 290 000c 00000000 	 .word 0
 291 0010 00000000 	 .word pgResetTemplate_pidConfig
 292              	 .global pgResetTemplate_pidConfig
 293              	 .section .pg_resetdata,"a",%progbits
 294              	 .align 1
 297              	pgResetTemplate_pidConfig:
 298 0000 02       	 .byte 2
 299 0001 01       	 .byte 1
 300 0002 F401     	 .short 500
 301 0004 19       	 .byte 25
 302              	 .comm pidProfiles_SystemArray,264,4
 303              	 .comm pidProfiles_CopyArray,264,4
 304              	 .global pidProfiles_Registry
 305 0005 00       	 .section .pg_registry
 306              	 .align 2
 309              	pidProfiles_Registry:
 310 0014 0E50     	 .short 20494
 311 0016 0801     	 .short 264
 312 0018 00000000 	 .word pidProfiles_SystemArray
 313 001c 00000000 	 .word pidProfiles_CopyArray
 314 0020 00000000 	 .word 0
 315 0024 00000000 	 .word pgResetFn_pidProfiles
 316              	 .section .text.resetPidProfile,"ax",%progbits
 317              	 .align 2
 318              	 .global resetPidProfile
 319              	 .thumb
 320              	 .thumb_func
 322              	resetPidProfile:
 323              	.LFB563:
 324              	 .file 4 "../cleanflight/src/main/flight/pid.c"
   1:../cleanflight/src/main/flight/pid.c **** /*
   2:../cleanflight/src/main/flight/pid.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/flight/pid.c ****  *
   4:../cleanflight/src/main/flight/pid.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/flight/pid.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/flight/pid.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/flight/pid.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/flight/pid.c ****  * any later version.
   9:../cleanflight/src/main/flight/pid.c ****  *
  10:../cleanflight/src/main/flight/pid.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/flight/pid.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/flight/pid.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/flight/pid.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/flight/pid.c ****  *
  15:../cleanflight/src/main/flight/pid.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/flight/pid.c ****  * along with this software.
  17:../cleanflight/src/main/flight/pid.c ****  *
  18:../cleanflight/src/main/flight/pid.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/flight/pid.c ****  */
  20:../cleanflight/src/main/flight/pid.c **** 
  21:../cleanflight/src/main/flight/pid.c **** #include <stdbool.h>
  22:../cleanflight/src/main/flight/pid.c **** #include <stdint.h>
  23:../cleanflight/src/main/flight/pid.c **** #include <string.h>
  24:../cleanflight/src/main/flight/pid.c **** #include <math.h>
  25:../cleanflight/src/main/flight/pid.c **** 
  26:../cleanflight/src/main/flight/pid.c **** #include "platform.h"
  27:../cleanflight/src/main/flight/pid.c **** 
  28:../cleanflight/src/main/flight/pid.c **** #include "build/build_config.h"
  29:../cleanflight/src/main/flight/pid.c **** #include "build/debug.h"
  30:../cleanflight/src/main/flight/pid.c **** 
  31:../cleanflight/src/main/flight/pid.c **** #include "common/axis.h"
  32:../cleanflight/src/main/flight/pid.c **** #include "common/maths.h"
  33:../cleanflight/src/main/flight/pid.c **** #include "common/filter.h"
  34:../cleanflight/src/main/flight/pid.c **** 
  35:../cleanflight/src/main/flight/pid.c **** #include "config/config_reset.h"
  36:../cleanflight/src/main/flight/pid.c **** #include "pg/pg.h"
  37:../cleanflight/src/main/flight/pid.c **** #include "pg/pg_ids.h"
  38:../cleanflight/src/main/flight/pid.c **** 
  39:../cleanflight/src/main/flight/pid.c **** #include "drivers/sound_beeper.h"
  40:../cleanflight/src/main/flight/pid.c **** #include "drivers/time.h"
  41:../cleanflight/src/main/flight/pid.c **** 
  42:../cleanflight/src/main/flight/pid.c **** #include "fc/fc_core.h"
  43:../cleanflight/src/main/flight/pid.c **** #include "fc/fc_rc.h"
  44:../cleanflight/src/main/flight/pid.c **** 
  45:../cleanflight/src/main/flight/pid.c **** #include "fc/rc_controls.h"
  46:../cleanflight/src/main/flight/pid.c **** #include "fc/runtime_config.h"
  47:../cleanflight/src/main/flight/pid.c **** 
  48:../cleanflight/src/main/flight/pid.c **** #include "flight/pid.h"
  49:../cleanflight/src/main/flight/pid.c **** #include "flight/imu.h"
  50:../cleanflight/src/main/flight/pid.c **** #include "flight/gps_rescue.h"
  51:../cleanflight/src/main/flight/pid.c **** #include "flight/mixer.h"
  52:../cleanflight/src/main/flight/pid.c **** 
  53:../cleanflight/src/main/flight/pid.c **** #include "io/gps.h"
  54:../cleanflight/src/main/flight/pid.c **** 
  55:../cleanflight/src/main/flight/pid.c **** #include "sensors/gyro.h"
  56:../cleanflight/src/main/flight/pid.c **** #include "sensors/acceleration.h"
  57:../cleanflight/src/main/flight/pid.c **** 
  58:../cleanflight/src/main/flight/pid.c **** 
  59:../cleanflight/src/main/flight/pid.c **** #define ITERM_RELAX_SETPOINT_THRESHOLD 30.0f
  60:../cleanflight/src/main/flight/pid.c **** 
  61:../cleanflight/src/main/flight/pid.c **** const char pidNames[] =
  62:../cleanflight/src/main/flight/pid.c ****     "ROLL;"
  63:../cleanflight/src/main/flight/pid.c ****     "PITCH;"
  64:../cleanflight/src/main/flight/pid.c ****     "YAW;"
  65:../cleanflight/src/main/flight/pid.c ****     "LEVEL;"
  66:../cleanflight/src/main/flight/pid.c ****     "MAG;";
  67:../cleanflight/src/main/flight/pid.c **** 
  68:../cleanflight/src/main/flight/pid.c **** FAST_RAM_ZERO_INIT uint32_t targetPidLooptime;
  69:../cleanflight/src/main/flight/pid.c **** FAST_RAM_ZERO_INIT pidAxisData_t pidData[XYZ_AXIS_COUNT];
  70:../cleanflight/src/main/flight/pid.c **** 
  71:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT bool pidStabilisationEnabled;
  72:../cleanflight/src/main/flight/pid.c **** 
  73:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT bool inCrashRecoveryMode = false;
  74:../cleanflight/src/main/flight/pid.c **** 
  75:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float dT;
  76:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float pidFrequency;
  77:../cleanflight/src/main/flight/pid.c **** 
  78:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT uint8_t antiGravityMode;
  79:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float antiGravityThrottleHpf;
  80:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT uint16_t itermAcceleratorGain;
  81:../cleanflight/src/main/flight/pid.c **** static FAST_RAM float antiGravityOsdCutoff = 1.0f;
  82:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT bool antiGravityEnabled;
  83:../cleanflight/src/main/flight/pid.c **** 
  84:../cleanflight/src/main/flight/pid.c **** PG_REGISTER_WITH_RESET_TEMPLATE(pidConfig_t, pidConfig, PG_PID_CONFIG, 2);
  85:../cleanflight/src/main/flight/pid.c **** 
  86:../cleanflight/src/main/flight/pid.c **** #ifdef STM32F10X
  87:../cleanflight/src/main/flight/pid.c **** #define PID_PROCESS_DENOM_DEFAULT       1
  88:../cleanflight/src/main/flight/pid.c **** #elif defined(USE_GYRO_SPI_MPU6000) || defined(USE_GYRO_SPI_MPU6500)  || defined(USE_GYRO_SPI_ICM20
  89:../cleanflight/src/main/flight/pid.c **** #define PID_PROCESS_DENOM_DEFAULT       4
  90:../cleanflight/src/main/flight/pid.c **** #else
  91:../cleanflight/src/main/flight/pid.c **** #define PID_PROCESS_DENOM_DEFAULT       2
  92:../cleanflight/src/main/flight/pid.c **** #endif
  93:../cleanflight/src/main/flight/pid.c **** 
  94:../cleanflight/src/main/flight/pid.c **** #ifdef USE_RUNAWAY_TAKEOFF
  95:../cleanflight/src/main/flight/pid.c **** PG_RESET_TEMPLATE(pidConfig_t, pidConfig,
  96:../cleanflight/src/main/flight/pid.c ****     .pid_process_denom = PID_PROCESS_DENOM_DEFAULT,
  97:../cleanflight/src/main/flight/pid.c ****     .runaway_takeoff_prevention = true,
  98:../cleanflight/src/main/flight/pid.c ****     .runaway_takeoff_deactivate_throttle = 25,  // throttle level % needed to accumulate deactivati
  99:../cleanflight/src/main/flight/pid.c ****     .runaway_takeoff_deactivate_delay = 500     // Accumulated time (in milliseconds) before deacti
 100:../cleanflight/src/main/flight/pid.c **** );
 101:../cleanflight/src/main/flight/pid.c **** #else
 102:../cleanflight/src/main/flight/pid.c **** PG_RESET_TEMPLATE(pidConfig_t, pidConfig,
 103:../cleanflight/src/main/flight/pid.c ****     .pid_process_denom = PID_PROCESS_DENOM_DEFAULT
 104:../cleanflight/src/main/flight/pid.c **** );
 105:../cleanflight/src/main/flight/pid.c **** #endif
 106:../cleanflight/src/main/flight/pid.c **** 
 107:../cleanflight/src/main/flight/pid.c **** #ifdef USE_ACRO_TRAINER
 108:../cleanflight/src/main/flight/pid.c **** #define ACRO_TRAINER_LOOKAHEAD_RATE_LIMIT 500.0f  // Max gyro rate for lookahead time scaling
 109:../cleanflight/src/main/flight/pid.c **** #define ACRO_TRAINER_SETPOINT_LIMIT       1000.0f // Limit the correcting setpoint
 110:../cleanflight/src/main/flight/pid.c **** #endif // USE_ACRO_TRAINER
 111:../cleanflight/src/main/flight/pid.c **** 
 112:../cleanflight/src/main/flight/pid.c **** #define ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF 15  // The anti gravity throttle highpass filter cutoff
 113:../cleanflight/src/main/flight/pid.c **** 
 114:../cleanflight/src/main/flight/pid.c **** PG_REGISTER_ARRAY_WITH_RESET_FN(pidProfile_t, MAX_PROFILE_COUNT, pidProfiles, PG_PID_PROFILE, 5);
 115:../cleanflight/src/main/flight/pid.c **** 
 116:../cleanflight/src/main/flight/pid.c **** void resetPidProfile(pidProfile_t *pidProfile)
 117:../cleanflight/src/main/flight/pid.c **** {
 325              	 .loc 4 117 0
 326              	 .cfi_startproc
 327              	 
 328              	 
 329 0000 80B5     	 push {r7,lr}
 330              	.LCFI22:
 331              	 .cfi_def_cfa_offset 8
 332              	 .cfi_offset 7,-8
 333              	 .cfi_offset 14,-4
 334 0002 82B0     	 sub sp,sp,#8
 335              	.LCFI23:
 336              	 .cfi_def_cfa_offset 16
 337 0004 00AF     	 add r7,sp,#0
 338              	.LCFI24:
 339              	 .cfi_def_cfa_register 7
 340 0006 7860     	 str r0,[r7,#4]
 118:../cleanflight/src/main/flight/pid.c ****     RESET_CONFIG(pidProfile_t, pidProfile,
 341              	 .loc 4 118 0
 342 0008 7B68     	 ldr r3,[r7,#4]
 343 000a 054A     	 ldr r2,.L22
 344 000c 1946     	 mov r1,r3
 345 000e 5823     	 movs r3,#88
 346 0010 0846     	 mov r0,r1
 347 0012 1146     	 mov r1,r2
 348 0014 1A46     	 mov r2,r3
 349 0016 FFF7FEFF 	 bl memcpy
 119:../cleanflight/src/main/flight/pid.c ****         .pid = {
 120:../cleanflight/src/main/flight/pid.c ****             [PID_ROLL] =  { 46, 45, 25, 60 },
 121:../cleanflight/src/main/flight/pid.c ****             [PID_PITCH] = { 50, 50, 27, 60 },
 122:../cleanflight/src/main/flight/pid.c ****             [PID_YAW] =   { 65, 45, 0 , 60 },
 123:../cleanflight/src/main/flight/pid.c ****             [PID_LEVEL] = { 50, 50, 75, 0 },
 124:../cleanflight/src/main/flight/pid.c ****             [PID_MAG] =   { 40, 0, 0, 0 },
 125:../cleanflight/src/main/flight/pid.c ****         },
 126:../cleanflight/src/main/flight/pid.c **** 
 127:../cleanflight/src/main/flight/pid.c ****         .pidSumLimit = PIDSUM_LIMIT,
 128:../cleanflight/src/main/flight/pid.c ****         .pidSumLimitYaw = PIDSUM_LIMIT_YAW,
 129:../cleanflight/src/main/flight/pid.c ****         .yaw_lowpass_hz = 0,
 130:../cleanflight/src/main/flight/pid.c ****         .dterm_lowpass_hz = 100,    // dual PT1 filtering ON by default
 131:../cleanflight/src/main/flight/pid.c ****         .dterm_lowpass2_hz = 200,   // second Dterm LPF ON by default
 132:../cleanflight/src/main/flight/pid.c ****         .dterm_notch_hz = 0,
 133:../cleanflight/src/main/flight/pid.c ****         .dterm_notch_cutoff = 160,
 134:../cleanflight/src/main/flight/pid.c ****         .dterm_filter_type = FILTER_PT1,
 135:../cleanflight/src/main/flight/pid.c ****         .itermWindupPointPercent = 40,
 136:../cleanflight/src/main/flight/pid.c ****         .vbatPidCompensation = 0,
 137:../cleanflight/src/main/flight/pid.c ****         .pidAtMinThrottle = PID_STABILISATION_ON,
 138:../cleanflight/src/main/flight/pid.c ****         .levelAngleLimit = 55,
 139:../cleanflight/src/main/flight/pid.c ****         .feedForwardTransition = 0,
 140:../cleanflight/src/main/flight/pid.c ****         .yawRateAccelLimit = 100,
 141:../cleanflight/src/main/flight/pid.c ****         .rateAccelLimit = 0,
 142:../cleanflight/src/main/flight/pid.c ****         .itermThrottleThreshold = 250,
 143:../cleanflight/src/main/flight/pid.c ****         .itermAcceleratorGain = 5000,
 144:../cleanflight/src/main/flight/pid.c ****         .crash_time = 500,          // ms
 145:../cleanflight/src/main/flight/pid.c ****         .crash_delay = 0,           // ms
 146:../cleanflight/src/main/flight/pid.c ****         .crash_recovery_angle = 10, // degrees
 147:../cleanflight/src/main/flight/pid.c ****         .crash_recovery_rate = 100, // degrees/second
 148:../cleanflight/src/main/flight/pid.c ****         .crash_dthreshold = 50,     // degrees/second/second
 149:../cleanflight/src/main/flight/pid.c ****         .crash_gthreshold = 400,    // degrees/second
 150:../cleanflight/src/main/flight/pid.c ****         .crash_setpoint_threshold = 350, // degrees/second
 151:../cleanflight/src/main/flight/pid.c ****         .crash_recovery = PID_CRASH_RECOVERY_OFF, // off by default
 152:../cleanflight/src/main/flight/pid.c ****         .horizon_tilt_effect = 75,
 153:../cleanflight/src/main/flight/pid.c ****         .horizon_tilt_expert_mode = false,
 154:../cleanflight/src/main/flight/pid.c ****         .crash_limit_yaw = 200,
 155:../cleanflight/src/main/flight/pid.c ****         .itermLimit = 150,
 156:../cleanflight/src/main/flight/pid.c ****         .throttle_boost = 5,
 157:../cleanflight/src/main/flight/pid.c ****         .throttle_boost_cutoff = 15,
 158:../cleanflight/src/main/flight/pid.c ****         .iterm_rotation = true,
 159:../cleanflight/src/main/flight/pid.c ****         .smart_feedforward = false,
 160:../cleanflight/src/main/flight/pid.c ****         .iterm_relax = ITERM_RELAX_OFF,
 161:../cleanflight/src/main/flight/pid.c ****         .iterm_relax_cutoff = 11,
 162:../cleanflight/src/main/flight/pid.c ****         .iterm_relax_type = ITERM_RELAX_GYRO,
 163:../cleanflight/src/main/flight/pid.c ****         .acro_trainer_angle_limit = 20,
 164:../cleanflight/src/main/flight/pid.c ****         .acro_trainer_lookahead_ms = 50,
 165:../cleanflight/src/main/flight/pid.c ****         .acro_trainer_debug_axis = FD_ROLL,
 166:../cleanflight/src/main/flight/pid.c ****         .acro_trainer_gain = 75,
 167:../cleanflight/src/main/flight/pid.c ****         .abs_control_gain = 0,
 168:../cleanflight/src/main/flight/pid.c ****         .abs_control_limit = 90,
 169:../cleanflight/src/main/flight/pid.c ****         .abs_control_error_limit = 20,
 170:../cleanflight/src/main/flight/pid.c ****         .antiGravityMode = ANTI_GRAVITY_SMOOTH,
 171:../cleanflight/src/main/flight/pid.c ****     );
 172:../cleanflight/src/main/flight/pid.c **** }
 350              	 .loc 4 172 0
 351 001a 0837     	 adds r7,r7,#8
 352              	.LCFI25:
 353              	 .cfi_def_cfa_offset 8
 354 001c BD46     	 mov sp,r7
 355              	.LCFI26:
 356              	 .cfi_def_cfa_register 13
 357              	 
 358 001e 80BD     	 pop {r7,pc}
 359              	.L23:
 360              	 .align 2
 361              	.L22:
 362 0020 00000000 	 .word _reset_template_171.14008
 363              	 .cfi_endproc
 364              	.LFE563:
 366              	 .section .text.pgResetFn_pidProfiles,"ax",%progbits
 367              	 .align 2
 368              	 .global pgResetFn_pidProfiles
 369              	 .thumb
 370              	 .thumb_func
 372              	pgResetFn_pidProfiles:
 373              	.LFB564:
 173:../cleanflight/src/main/flight/pid.c **** 
 174:../cleanflight/src/main/flight/pid.c **** void pgResetFn_pidProfiles(pidProfile_t *pidProfiles)
 175:../cleanflight/src/main/flight/pid.c **** {
 374              	 .loc 4 175 0
 375              	 .cfi_startproc
 376              	 
 377              	 
 378 0000 80B5     	 push {r7,lr}
 379              	.LCFI27:
 380              	 .cfi_def_cfa_offset 8
 381              	 .cfi_offset 7,-8
 382              	 .cfi_offset 14,-4
 383 0002 84B0     	 sub sp,sp,#16
 384              	.LCFI28:
 385              	 .cfi_def_cfa_offset 24
 386 0004 00AF     	 add r7,sp,#0
 387              	.LCFI29:
 388              	 .cfi_def_cfa_register 7
 389 0006 7860     	 str r0,[r7,#4]
 390              	.LBB2:
 176:../cleanflight/src/main/flight/pid.c ****     for (int i = 0; i < MAX_PROFILE_COUNT; i++) {
 391              	 .loc 4 176 0
 392 0008 0023     	 movs r3,#0
 393 000a FB60     	 str r3,[r7,#12]
 394 000c 0BE0     	 b .L25
 395              	.L26:
 177:../cleanflight/src/main/flight/pid.c ****         resetPidProfile(&pidProfiles[i]);
 396              	 .loc 4 177 0 discriminator 3
 397 000e FB68     	 ldr r3,[r7,#12]
 398 0010 5822     	 movs r2,#88
 399 0012 02FB03F3 	 mul r3,r2,r3
 400 0016 7A68     	 ldr r2,[r7,#4]
 401 0018 1344     	 add r3,r3,r2
 402 001a 1846     	 mov r0,r3
 403 001c FFF7FEFF 	 bl resetPidProfile
 176:../cleanflight/src/main/flight/pid.c ****     for (int i = 0; i < MAX_PROFILE_COUNT; i++) {
 404              	 .loc 4 176 0 discriminator 3
 405 0020 FB68     	 ldr r3,[r7,#12]
 406 0022 0133     	 adds r3,r3,#1
 407 0024 FB60     	 str r3,[r7,#12]
 408              	.L25:
 176:../cleanflight/src/main/flight/pid.c ****     for (int i = 0; i < MAX_PROFILE_COUNT; i++) {
 409              	 .loc 4 176 0 is_stmt 0 discriminator 1
 410 0026 FB68     	 ldr r3,[r7,#12]
 411 0028 022B     	 cmp r3,#2
 412 002a F0DD     	 ble .L26
 413              	.LBE2:
 178:../cleanflight/src/main/flight/pid.c ****     }
 179:../cleanflight/src/main/flight/pid.c **** }
 414              	 .loc 4 179 0 is_stmt 1
 415 002c 1037     	 adds r7,r7,#16
 416              	.LCFI30:
 417              	 .cfi_def_cfa_offset 8
 418 002e BD46     	 mov sp,r7
 419              	.LCFI31:
 420              	 .cfi_def_cfa_register 13
 421              	 
 422 0030 80BD     	 pop {r7,pc}
 423              	 .cfi_endproc
 424              	.LFE564:
 426 0032 00BF     	 .section .text.pidSetTargetLooptime,"ax",%progbits
 427              	 .align 2
 428              	 .thumb
 429              	 .thumb_func
 431              	pidSetTargetLooptime:
 432              	.LFB565:
 180:../cleanflight/src/main/flight/pid.c **** 
 181:../cleanflight/src/main/flight/pid.c **** static void pidSetTargetLooptime(uint32_t pidLooptime)
 182:../cleanflight/src/main/flight/pid.c **** {
 433              	 .loc 4 182 0
 434              	 .cfi_startproc
 435              	 
 436              	 
 437              	 
 438 0000 80B4     	 push {r7}
 439              	.LCFI32:
 440              	 .cfi_def_cfa_offset 4
 441              	 .cfi_offset 7,-4
 442 0002 83B0     	 sub sp,sp,#12
 443              	.LCFI33:
 444              	 .cfi_def_cfa_offset 16
 445 0004 00AF     	 add r7,sp,#0
 446              	.LCFI34:
 447              	 .cfi_def_cfa_register 7
 448 0006 7860     	 str r0,[r7,#4]
 183:../cleanflight/src/main/flight/pid.c ****     targetPidLooptime = pidLooptime;
 449              	 .loc 4 183 0
 450 0008 0F4A     	 ldr r2,.L28
 451 000a 7B68     	 ldr r3,[r7,#4]
 452 000c 1360     	 str r3,[r2]
 184:../cleanflight/src/main/flight/pid.c ****     dT = targetPidLooptime * 1e-6f;
 453              	 .loc 4 184 0
 454 000e 0E4B     	 ldr r3,.L28
 455 0010 1B68     	 ldr r3,[r3]
 456 0012 07EE903A 	 fmsr s15,r3
 457 0016 F8EE677A 	 fuitos s15,s15
 458 001a 9FED0C7A 	 flds s14,.L28+4
 459 001e 67EE877A 	 fmuls s15,s15,s14
 460 0022 0B4B     	 ldr r3,.L28+8
 461 0024 C3ED007A 	 fsts s15,[r3]
 185:../cleanflight/src/main/flight/pid.c ****     pidFrequency = 1.0f / dT;
 462              	 .loc 4 185 0
 463 0028 094B     	 ldr r3,.L28+8
 464 002a D3ED007A 	 flds s15,[r3]
 465 002e B7EE007A 	 fconsts s14,#112
 466 0032 C7EE277A 	 fdivs s15,s14,s15
 467 0036 074B     	 ldr r3,.L28+12
 468 0038 C3ED007A 	 fsts s15,[r3]
 186:../cleanflight/src/main/flight/pid.c **** }
 469              	 .loc 4 186 0
 470 003c 0C37     	 adds r7,r7,#12
 471              	.LCFI35:
 472              	 .cfi_def_cfa_offset 4
 473 003e BD46     	 mov sp,r7
 474              	.LCFI36:
 475              	 .cfi_def_cfa_register 13
 476              	 
 477 0040 5DF8047B 	 ldr r7,[sp],#4
 478              	.LCFI37:
 479              	 .cfi_restore 7
 480              	 .cfi_def_cfa_offset 0
 481 0044 7047     	 bx lr
 482              	.L29:
 483 0046 00BF     	 .align 2
 484              	.L28:
 485 0048 00000000 	 .word targetPidLooptime
 486 004c BD378635 	 .word 897988541
 487 0050 00000000 	 .word dT
 488 0054 00000000 	 .word pidFrequency
 489              	 .cfi_endproc
 490              	.LFE565:
 492              	 .section .data.itermAccelerator,"aw",%progbits
 493              	 .align 2
 496              	itermAccelerator:
 497 0000 0000803F 	 .word 1065353216
 498              	 .section .text.pidSetItermAccelerator,"ax",%progbits
 499              	 .align 2
 500              	 .global pidSetItermAccelerator
 501              	 .thumb
 502              	 .thumb_func
 504              	pidSetItermAccelerator:
 505              	.LFB566:
 187:../cleanflight/src/main/flight/pid.c **** 
 188:../cleanflight/src/main/flight/pid.c **** static FAST_RAM float itermAccelerator = 1.0f;
 189:../cleanflight/src/main/flight/pid.c **** 
 190:../cleanflight/src/main/flight/pid.c **** void pidSetItermAccelerator(float newItermAccelerator)
 191:../cleanflight/src/main/flight/pid.c **** {
 506              	 .loc 4 191 0
 507              	 .cfi_startproc
 508              	 
 509              	 
 510              	 
 511 0000 80B4     	 push {r7}
 512              	.LCFI38:
 513              	 .cfi_def_cfa_offset 4
 514              	 .cfi_offset 7,-4
 515 0002 83B0     	 sub sp,sp,#12
 516              	.LCFI39:
 517              	 .cfi_def_cfa_offset 16
 518 0004 00AF     	 add r7,sp,#0
 519              	.LCFI40:
 520              	 .cfi_def_cfa_register 7
 521 0006 7860     	 str r0,[r7,#4]
 192:../cleanflight/src/main/flight/pid.c ****     itermAccelerator = newItermAccelerator;
 522              	 .loc 4 192 0
 523 0008 034A     	 ldr r2,.L31
 524 000a 7B68     	 ldr r3,[r7,#4]
 525 000c 1360     	 str r3,[r2]
 193:../cleanflight/src/main/flight/pid.c **** }
 526              	 .loc 4 193 0
 527 000e 0C37     	 adds r7,r7,#12
 528              	.LCFI41:
 529              	 .cfi_def_cfa_offset 4
 530 0010 BD46     	 mov sp,r7
 531              	.LCFI42:
 532              	 .cfi_def_cfa_register 13
 533              	 
 534 0012 5DF8047B 	 ldr r7,[sp],#4
 535              	.LCFI43:
 536              	 .cfi_restore 7
 537              	 .cfi_def_cfa_offset 0
 538 0016 7047     	 bx lr
 539              	.L32:
 540              	 .align 2
 541              	.L31:
 542 0018 00000000 	 .word itermAccelerator
 543              	 .cfi_endproc
 544              	.LFE566:
 546              	 .section .text.pidOsdAntiGravityActive,"ax",%progbits
 547              	 .align 2
 548              	 .global pidOsdAntiGravityActive
 549              	 .thumb
 550              	 .thumb_func
 552              	pidOsdAntiGravityActive:
 553              	.LFB567:
 194:../cleanflight/src/main/flight/pid.c **** 
 195:../cleanflight/src/main/flight/pid.c **** bool pidOsdAntiGravityActive(void)
 196:../cleanflight/src/main/flight/pid.c **** {
 554              	 .loc 4 196 0
 555              	 .cfi_startproc
 556              	 
 557              	 
 558              	 
 559 0000 80B4     	 push {r7}
 560              	.LCFI44:
 561              	 .cfi_def_cfa_offset 4
 562              	 .cfi_offset 7,-4
 563 0002 00AF     	 add r7,sp,#0
 564              	.LCFI45:
 565              	 .cfi_def_cfa_register 7
 197:../cleanflight/src/main/flight/pid.c ****     return (itermAccelerator > antiGravityOsdCutoff);
 566              	 .loc 4 197 0
 567 0004 094B     	 ldr r3,.L35
 568 0006 93ED007A 	 flds s14,[r3]
 569 000a 094B     	 ldr r3,.L35+4
 570 000c D3ED007A 	 flds s15,[r3]
 571 0010 B4EEE77A 	 fcmpes s14,s15
 572 0014 F1EE10FA 	 fmstat
 573 0018 CCBF     	 ite gt
 574 001a 0123     	 movgt r3,#1
 575 001c 0023     	 movle r3,#0
 576 001e DBB2     	 uxtb r3,r3
 198:../cleanflight/src/main/flight/pid.c **** }
 577              	 .loc 4 198 0
 578 0020 1846     	 mov r0,r3
 579 0022 BD46     	 mov sp,r7
 580              	.LCFI46:
 581              	 .cfi_def_cfa_register 13
 582              	 
 583 0024 5DF8047B 	 ldr r7,[sp],#4
 584              	.LCFI47:
 585              	 .cfi_restore 7
 586              	 .cfi_def_cfa_offset 0
 587 0028 7047     	 bx lr
 588              	.L36:
 589 002a 00BF     	 .align 2
 590              	.L35:
 591 002c 00000000 	 .word itermAccelerator
 592 0030 00000000 	 .word antiGravityOsdCutoff
 593              	 .cfi_endproc
 594              	.LFE567:
 596              	 .section .text.pidStabilisationState,"ax",%progbits
 597              	 .align 2
 598              	 .global pidStabilisationState
 599              	 .thumb
 600              	 .thumb_func
 602              	pidStabilisationState:
 603              	.LFB568:
 199:../cleanflight/src/main/flight/pid.c **** 
 200:../cleanflight/src/main/flight/pid.c **** void pidStabilisationState(pidStabilisationState_e pidControllerState)
 201:../cleanflight/src/main/flight/pid.c **** {
 604              	 .loc 4 201 0
 605              	 .cfi_startproc
 606              	 
 607              	 
 608              	 
 609 0000 80B4     	 push {r7}
 610              	.LCFI48:
 611              	 .cfi_def_cfa_offset 4
 612              	 .cfi_offset 7,-4
 613 0002 83B0     	 sub sp,sp,#12
 614              	.LCFI49:
 615              	 .cfi_def_cfa_offset 16
 616 0004 00AF     	 add r7,sp,#0
 617              	.LCFI50:
 618              	 .cfi_def_cfa_register 7
 619 0006 0346     	 mov r3,r0
 620 0008 FB71     	 strb r3,[r7,#7]
 202:../cleanflight/src/main/flight/pid.c ****     pidStabilisationEnabled = (pidControllerState == PID_STABILISATION_ON) ? true : false;
 621              	 .loc 4 202 0
 622 000a FB79     	 ldrb r3,[r7,#7]
 623 000c 012B     	 cmp r3,#1
 624 000e 0CBF     	 ite eq
 625 0010 0123     	 moveq r3,#1
 626 0012 0023     	 movne r3,#0
 627 0014 DAB2     	 uxtb r2,r3
 628 0016 034B     	 ldr r3,.L38
 629 0018 1A70     	 strb r2,[r3]
 203:../cleanflight/src/main/flight/pid.c **** }
 630              	 .loc 4 203 0
 631 001a 0C37     	 adds r7,r7,#12
 632              	.LCFI51:
 633              	 .cfi_def_cfa_offset 4
 634 001c BD46     	 mov sp,r7
 635              	.LCFI52:
 636              	 .cfi_def_cfa_register 13
 637              	 
 638 001e 5DF8047B 	 ldr r7,[sp],#4
 639              	.LCFI53:
 640              	 .cfi_restore 7
 641              	 .cfi_def_cfa_offset 0
 642 0022 7047     	 bx lr
 643              	.L39:
 644              	 .align 2
 645              	.L38:
 646 0024 00000000 	 .word pidStabilisationEnabled
 647              	 .cfi_endproc
 648              	.LFE568:
 650              	 .global rcAliasToAngleIndexMap
 651              	 .section .rodata.rcAliasToAngleIndexMap,"a",%progbits
 652              	 .align 2
 655              	rcAliasToAngleIndexMap:
 656 0000 00       	 .byte 0
 657 0001 01       	 .byte 1
 658 0002 0000     	 .section .bss.dtermNotchApplyFn,"aw",%nobits
 659              	 .align 2
 662              	dtermNotchApplyFn:
 663 0000 00000000 	 .space 4
 664              	 .section .bss.dtermNotch,"aw",%nobits
 665              	 .align 2
 668              	dtermNotch:
 669 0000 00000000 	 .space 108
 669      00000000 
 669      00000000 
 669      00000000 
 669      00000000 
 670              	 .section .bss.dtermLowpassApplyFn,"aw",%nobits
 671              	 .align 2
 674              	dtermLowpassApplyFn:
 675 0000 00000000 	 .space 4
 676              	 .section .bss.dtermLowpass,"aw",%nobits
 677              	 .align 2
 680              	dtermLowpass:
 681 0000 00000000 	 .space 108
 681      00000000 
 681      00000000 
 681      00000000 
 681      00000000 
 682              	 .section .bss.dtermLowpass2ApplyFn,"aw",%nobits
 683              	 .align 2
 686              	dtermLowpass2ApplyFn:
 687 0000 00000000 	 .space 4
 688              	 .section .bss.dtermLowpass2,"aw",%nobits
 689              	 .align 2
 692              	dtermLowpass2:
 693 0000 00000000 	 .space 24
 693      00000000 
 693      00000000 
 693      00000000 
 693      00000000 
 694              	 .section .bss.ptermYawLowpassApplyFn,"aw",%nobits
 695              	 .align 2
 698              	ptermYawLowpassApplyFn:
 699 0000 00000000 	 .space 4
 700              	 .section .bss.ptermYawLowpass,"aw",%nobits
 701              	 .align 2
 704              	ptermYawLowpass:
 705 0000 00000000 	 .space 8
 705      00000000 
 706              	 .section .bss.windupLpf,"aw",%nobits
 707              	 .align 2
 710              	windupLpf:
 711 0000 00000000 	 .space 24
 711      00000000 
 711      00000000 
 711      00000000 
 711      00000000 
 712              	 .section .bss.itermRelax,"aw",%nobits
 715              	itermRelax:
 716 0000 00       	 .space 1
 717              	 .section .bss.itermRelaxType,"aw",%nobits
 720              	itermRelaxType:
 721 0000 00       	 .space 1
 722              	 .section .bss.itermRelaxCutoff,"aw",%nobits
 725              	itermRelaxCutoff:
 726 0000 00       	 .space 1
 727              	 .section .bss.setpointDerivativePt1,"aw",%nobits
 728              	 .align 2
 731              	setpointDerivativePt1:
 732 0000 00000000 	 .space 24
 732      00000000 
 732      00000000 
 732      00000000 
 732      00000000 
 733              	 .section .bss.setpointDerivativeBiquad,"aw",%nobits
 734              	 .align 2
 737              	setpointDerivativeBiquad:
 738 0000 00000000 	 .space 108
 738      00000000 
 738      00000000 
 738      00000000 
 738      00000000 
 739              	 .section .bss.setpointDerivativeLpfInitialized,"aw",%nobits
 742              	setpointDerivativeLpfInitialized:
 743 0000 00       	 .space 1
 744              	 .section .bss.rcSmoothingDebugAxis,"aw",%nobits
 747              	rcSmoothingDebugAxis:
 748 0000 00       	 .space 1
 749              	 .section .bss.rcSmoothingFilterType,"aw",%nobits
 752              	rcSmoothingFilterType:
 753 0000 00       	 .space 1
 754              	 .section .bss.antiGravityThrottleLpf,"aw",%nobits
 755              	 .align 2
 758              	antiGravityThrottleLpf:
 759 0000 00000000 	 .space 8
 759      00000000 
 760              	 .section .text.pidInitFilters,"ax",%progbits
 761              	 .align 2
 762              	 .global pidInitFilters
 763              	 .thumb
 764              	 .thumb_func
 766              	pidInitFilters:
 767              	.LFB569:
 204:../cleanflight/src/main/flight/pid.c **** 
 205:../cleanflight/src/main/flight/pid.c **** const angle_index_t rcAliasToAngleIndexMap[] = { AI_ROLL, AI_PITCH };
 206:../cleanflight/src/main/flight/pid.c **** 
 207:../cleanflight/src/main/flight/pid.c **** typedef union dtermLowpass_u {
 208:../cleanflight/src/main/flight/pid.c ****     pt1Filter_t pt1Filter;
 209:../cleanflight/src/main/flight/pid.c ****     biquadFilter_t biquadFilter;
 210:../cleanflight/src/main/flight/pid.c **** } dtermLowpass_t;
 211:../cleanflight/src/main/flight/pid.c **** 
 212:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT filterApplyFnPtr dtermNotchApplyFn;
 213:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT biquadFilter_t dtermNotch[XYZ_AXIS_COUNT];
 214:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT filterApplyFnPtr dtermLowpassApplyFn;
 215:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT dtermLowpass_t dtermLowpass[XYZ_AXIS_COUNT];
 216:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT filterApplyFnPtr dtermLowpass2ApplyFn;
 217:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT pt1Filter_t dtermLowpass2[XYZ_AXIS_COUNT];
 218:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT filterApplyFnPtr ptermYawLowpassApplyFn;
 219:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT pt1Filter_t ptermYawLowpass;
 220:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ITERM_RELAX)
 221:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT pt1Filter_t windupLpf[XYZ_AXIS_COUNT];
 222:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT uint8_t itermRelax;
 223:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT uint8_t itermRelaxType;
 224:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT uint8_t itermRelaxCutoff;
 225:../cleanflight/src/main/flight/pid.c **** #endif
 226:../cleanflight/src/main/flight/pid.c **** 
 227:../cleanflight/src/main/flight/pid.c **** #ifdef USE_RC_SMOOTHING_FILTER
 228:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT pt1Filter_t setpointDerivativePt1[XYZ_AXIS_COUNT];
 229:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT biquadFilter_t setpointDerivativeBiquad[XYZ_AXIS_COUNT];
 230:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT bool setpointDerivativeLpfInitialized;
 231:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT uint8_t rcSmoothingDebugAxis;
 232:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT uint8_t rcSmoothingFilterType;
 233:../cleanflight/src/main/flight/pid.c **** #endif // USE_RC_SMOOTHING_FILTER
 234:../cleanflight/src/main/flight/pid.c **** 
 235:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT pt1Filter_t antiGravityThrottleLpf;
 236:../cleanflight/src/main/flight/pid.c **** 
 237:../cleanflight/src/main/flight/pid.c **** void pidInitFilters(const pidProfile_t *pidProfile)
 238:../cleanflight/src/main/flight/pid.c **** {
 768              	 .loc 4 238 0
 769              	 .cfi_startproc
 770              	 
 771              	 
 772 0000 90B5     	 push {r4,r7,lr}
 773              	.LCFI54:
 774              	 .cfi_def_cfa_offset 12
 775              	 .cfi_offset 4,-12
 776              	 .cfi_offset 7,-8
 777              	 .cfi_offset 14,-4
 778 0002 8DB0     	 sub sp,sp,#52
 779              	.LCFI55:
 780              	 .cfi_def_cfa_offset 64
 781 0004 02AF     	 add r7,sp,#8
 782              	.LCFI56:
 783              	 .cfi_def_cfa 7,56
 784 0006 7860     	 str r0,[r7,#4]
 239:../cleanflight/src/main/flight/pid.c ****     BUILD_BUG_ON(FD_YAW != 2); // ensure yaw axis is 2
 240:../cleanflight/src/main/flight/pid.c **** 
 241:../cleanflight/src/main/flight/pid.c ****     if (targetPidLooptime == 0) {
 785              	 .loc 4 241 0
 786 0008 9E4B     	 ldr r3,.L71
 787 000a 1B68     	 ldr r3,[r3]
 788 000c 002B     	 cmp r3,#0
 789 000e 09D1     	 bne .L41
 242:../cleanflight/src/main/flight/pid.c ****         // no looptime set, so set all the filters to null
 243:../cleanflight/src/main/flight/pid.c ****         dtermNotchApplyFn = nullFilterApply;
 790              	 .loc 4 243 0
 791 0010 9D4B     	 ldr r3,.L71+4
 792 0012 9E4A     	 ldr r2,.L71+8
 793 0014 1A60     	 str r2,[r3]
 244:../cleanflight/src/main/flight/pid.c ****         dtermLowpassApplyFn = nullFilterApply;
 794              	 .loc 4 244 0
 795 0016 9E4B     	 ldr r3,.L71+12
 796 0018 9C4A     	 ldr r2,.L71+8
 797 001a 1A60     	 str r2,[r3]
 245:../cleanflight/src/main/flight/pid.c ****         ptermYawLowpassApplyFn = nullFilterApply;
 798              	 .loc 4 245 0
 799 001c 9D4B     	 ldr r3,.L71+16
 800 001e 9B4A     	 ldr r2,.L71+8
 801 0020 1A60     	 str r2,[r3]
 246:../cleanflight/src/main/flight/pid.c ****         return;
 802              	 .loc 4 246 0
 803 0022 72E1     	 b .L40
 804              	.L41:
 247:../cleanflight/src/main/flight/pid.c ****     }
 248:../cleanflight/src/main/flight/pid.c **** 
 249:../cleanflight/src/main/flight/pid.c ****     const uint32_t pidFrequencyNyquist = pidFrequency / 2; // No rounding needed
 805              	 .loc 4 249 0
 806 0024 9C4B     	 ldr r3,.L71+20
 807 0026 D3ED007A 	 flds s15,[r3]
 808 002a B0EE007A 	 fconsts s14,#0
 809 002e C7EE877A 	 fdivs s15,s15,s14
 810 0032 FCEEE77A 	 ftouizs s15,s15
 811 0036 17EE903A 	 fmrs r3,s15
 812 003a FB60     	 str r3,[r7,#12]
 250:../cleanflight/src/main/flight/pid.c **** 
 251:../cleanflight/src/main/flight/pid.c ****     uint16_t dTermNotchHz;
 252:../cleanflight/src/main/flight/pid.c ****     if (pidProfile->dterm_notch_hz <= pidFrequencyNyquist) {
 813              	 .loc 4 252 0
 814 003c 7B68     	 ldr r3,[r7,#4]
 815 003e 9B88     	 ldrh r3,[r3,#4]
 816 0040 9BB2     	 uxth r3,r3
 817 0042 1A46     	 mov r2,r3
 818 0044 FB68     	 ldr r3,[r7,#12]
 819 0046 9A42     	 cmp r2,r3
 820 0048 06D8     	 bhi .L43
 253:../cleanflight/src/main/flight/pid.c ****         dTermNotchHz = pidProfile->dterm_notch_hz;
 821              	 .loc 4 253 0
 822 004a 7B68     	 ldr r3,[r7,#4]
 823 004c 1A79     	 ldrb r2,[r3,#4]
 824 004e 5B79     	 ldrb r3,[r3,#5]
 825 0050 1B02     	 lsls r3,r3,#8
 826 0052 1343     	 orrs r3,r3,r2
 827 0054 FB84     	 strh r3,[r7,#38]
 828 0056 0BE0     	 b .L44
 829              	.L43:
 254:../cleanflight/src/main/flight/pid.c ****     } else {
 255:../cleanflight/src/main/flight/pid.c ****         if (pidProfile->dterm_notch_cutoff < pidFrequencyNyquist) {
 830              	 .loc 4 255 0
 831 0058 7B68     	 ldr r3,[r7,#4]
 832 005a DB88     	 ldrh r3,[r3,#6]
 833 005c 9BB2     	 uxth r3,r3
 834 005e 1A46     	 mov r2,r3
 835 0060 FB68     	 ldr r3,[r7,#12]
 836 0062 9A42     	 cmp r2,r3
 837 0064 02D2     	 bcs .L45
 256:../cleanflight/src/main/flight/pid.c ****             dTermNotchHz = pidFrequencyNyquist;
 838              	 .loc 4 256 0
 839 0066 FB68     	 ldr r3,[r7,#12]
 840 0068 FB84     	 strh r3,[r7,#38]
 841 006a 01E0     	 b .L44
 842              	.L45:
 257:../cleanflight/src/main/flight/pid.c ****         } else {
 258:../cleanflight/src/main/flight/pid.c ****             dTermNotchHz = 0;
 843              	 .loc 4 258 0
 844 006c 0023     	 movs r3,#0
 845 006e FB84     	 strh r3,[r7,#38]
 846              	.L44:
 259:../cleanflight/src/main/flight/pid.c ****         }
 260:../cleanflight/src/main/flight/pid.c ****     }
 261:../cleanflight/src/main/flight/pid.c **** 
 262:../cleanflight/src/main/flight/pid.c ****     if (dTermNotchHz != 0 && pidProfile->dterm_notch_cutoff != 0) {
 847              	 .loc 4 262 0
 848 0070 FB8C     	 ldrh r3,[r7,#38]
 849 0072 002B     	 cmp r3,#0
 850 0074 3AD0     	 beq .L46
 851              	 .loc 4 262 0 is_stmt 0 discriminator 1
 852 0076 7B68     	 ldr r3,[r7,#4]
 853 0078 DB88     	 ldrh r3,[r3,#6]
 854 007a 9BB2     	 uxth r3,r3
 855 007c 002B     	 cmp r3,#0
 856 007e 35D0     	 beq .L46
 857              	.LBB3:
 263:../cleanflight/src/main/flight/pid.c ****         dtermNotchApplyFn = (filterApplyFnPtr)biquadFilterApply;
 858              	 .loc 4 263 0 is_stmt 1
 859 0080 814B     	 ldr r3,.L71+4
 860 0082 864A     	 ldr r2,.L71+24
 861 0084 1A60     	 str r2,[r3]
 264:../cleanflight/src/main/flight/pid.c ****         const float notchQ = filterGetNotchQ(dTermNotchHz, pidProfile->dterm_notch_cutoff);
 862              	 .loc 4 264 0
 863 0086 FB8C     	 ldrh r3,[r7,#38]
 864 0088 07EE903A 	 fmsr s15,r3
 865 008c B8EE677A 	 fuitos s14,s15
 866 0090 7B68     	 ldr r3,[r7,#4]
 867 0092 DB88     	 ldrh r3,[r3,#6]
 868 0094 9BB2     	 uxth r3,r3
 869 0096 07EE903A 	 fmsr s15,r3
 870 009a F8EE677A 	 fuitos s15,s15
 871 009e 17EE100A 	 fmrs r0,s14
 872 00a2 17EE901A 	 fmrs r1,s15
 873 00a6 FFF7FEFF 	 bl filterGetNotchQ
 874 00aa B860     	 str r0,[r7,#8]
 875              	.LBB4:
 265:../cleanflight/src/main/flight/pid.c ****         for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 876              	 .loc 4 265 0
 877 00ac 0023     	 movs r3,#0
 878 00ae 3B62     	 str r3,[r7,#32]
 879 00b0 18E0     	 b .L47
 880              	.L48:
 266:../cleanflight/src/main/flight/pid.c ****             biquadFilterInit(&dtermNotch[axis], dTermNotchHz, targetPidLooptime, notchQ, FILTER_NOT
 881              	 .loc 4 266 0 discriminator 3
 882 00b2 3A6A     	 ldr r2,[r7,#32]
 883 00b4 1346     	 mov r3,r2
 884 00b6 DB00     	 lsls r3,r3,#3
 885 00b8 1344     	 add r3,r3,r2
 886 00ba 9B00     	 lsls r3,r3,#2
 887 00bc 784A     	 ldr r2,.L71+28
 888 00be 9918     	 adds r1,r3,r2
 889 00c0 FB8C     	 ldrh r3,[r7,#38]
 890 00c2 07EE903A 	 fmsr s15,r3
 891 00c6 F8EE677A 	 fuitos s15,s15
 892 00ca 6E4B     	 ldr r3,.L71
 893 00cc 1A68     	 ldr r2,[r3]
 894 00ce 0123     	 movs r3,#1
 895 00d0 0093     	 str r3,[sp]
 896 00d2 0846     	 mov r0,r1
 897 00d4 17EE901A 	 fmrs r1,s15
 898 00d8 BB68     	 ldr r3,[r7,#8]
 899 00da FFF7FEFF 	 bl biquadFilterInit
 265:../cleanflight/src/main/flight/pid.c ****         for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 900              	 .loc 4 265 0 discriminator 3
 901 00de 3B6A     	 ldr r3,[r7,#32]
 902 00e0 0133     	 adds r3,r3,#1
 903 00e2 3B62     	 str r3,[r7,#32]
 904              	.L47:
 265:../cleanflight/src/main/flight/pid.c ****         for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 905              	 .loc 4 265 0 is_stmt 0 discriminator 1
 906 00e4 3B6A     	 ldr r3,[r7,#32]
 907 00e6 022B     	 cmp r3,#2
 908 00e8 E3DD     	 ble .L48
 909              	.LBE4:
 910              	.LBE3:
 262:../cleanflight/src/main/flight/pid.c ****         dtermNotchApplyFn = (filterApplyFnPtr)biquadFilterApply;
 911              	 .loc 4 262 0 is_stmt 1
 912 00ea 02E0     	 b .L49
 913              	.L46:
 267:../cleanflight/src/main/flight/pid.c ****         }
 268:../cleanflight/src/main/flight/pid.c ****     } else {
 269:../cleanflight/src/main/flight/pid.c ****         dtermNotchApplyFn = nullFilterApply;
 914              	 .loc 4 269 0
 915 00ec 664B     	 ldr r3,.L71+4
 916 00ee 674A     	 ldr r2,.L71+8
 917 00f0 1A60     	 str r2,[r3]
 918              	.L49:
 270:../cleanflight/src/main/flight/pid.c ****     }
 271:../cleanflight/src/main/flight/pid.c **** 
 272:../cleanflight/src/main/flight/pid.c ****     //2nd Dterm Lowpass Filter
 273:../cleanflight/src/main/flight/pid.c ****     if (pidProfile->dterm_lowpass2_hz == 0 || pidProfile->dterm_lowpass2_hz > pidFrequencyNyquist) 
 919              	 .loc 4 273 0
 920 00f2 7B68     	 ldr r3,[r7,#4]
 921 00f4 B3F84630 	 ldrh r3,[r3,#70]
 922 00f8 9BB2     	 uxth r3,r3
 923 00fa 002B     	 cmp r3,#0
 924 00fc 07D0     	 beq .L50
 925              	 .loc 4 273 0 is_stmt 0 discriminator 1
 926 00fe 7B68     	 ldr r3,[r7,#4]
 927 0100 B3F84630 	 ldrh r3,[r3,#70]
 928 0104 9BB2     	 uxth r3,r3
 929 0106 1A46     	 mov r2,r3
 930 0108 FB68     	 ldr r3,[r7,#12]
 931 010a 9A42     	 cmp r2,r3
 932 010c 03D9     	 bls .L51
 933              	.L50:
 274:../cleanflight/src/main/flight/pid.c ****     	dtermLowpass2ApplyFn = nullFilterApply;
 934              	 .loc 4 274 0 is_stmt 1
 935 010e 654B     	 ldr r3,.L71+32
 936 0110 5E4A     	 ldr r2,.L71+8
 937 0112 1A60     	 str r2,[r3]
 938 0114 1EE0     	 b .L52
 939              	.L51:
 275:../cleanflight/src/main/flight/pid.c ****     } else {
 276:../cleanflight/src/main/flight/pid.c ****         dtermLowpass2ApplyFn = (filterApplyFnPtr)pt1FilterApply;
 940              	 .loc 4 276 0
 941 0116 634B     	 ldr r3,.L71+32
 942 0118 634A     	 ldr r2,.L71+36
 943 011a 1A60     	 str r2,[r3]
 944              	.LBB5:
 277:../cleanflight/src/main/flight/pid.c ****         for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 945              	 .loc 4 277 0
 946 011c 0023     	 movs r3,#0
 947 011e FB61     	 str r3,[r7,#28]
 948 0120 15E0     	 b .L53
 949              	.L54:
 278:../cleanflight/src/main/flight/pid.c ****             pt1FilterInit(&dtermLowpass2[axis], pt1FilterGain(pidProfile->dterm_lowpass2_hz, dT));
 950              	 .loc 4 278 0 discriminator 3
 951 0122 FB69     	 ldr r3,[r7,#28]
 952 0124 DB00     	 lsls r3,r3,#3
 953 0126 614A     	 ldr r2,.L71+40
 954 0128 9C18     	 adds r4,r3,r2
 955 012a 7B68     	 ldr r3,[r7,#4]
 956 012c B3F84630 	 ldrh r3,[r3,#70]
 957 0130 9AB2     	 uxth r2,r3
 958 0132 5F4B     	 ldr r3,.L71+44
 959 0134 1B68     	 ldr r3,[r3]
 960 0136 1046     	 mov r0,r2
 961 0138 1946     	 mov r1,r3
 962 013a FFF7FEFF 	 bl pt1FilterGain
 963 013e 0346     	 mov r3,r0
 964 0140 2046     	 mov r0,r4
 965 0142 1946     	 mov r1,r3
 966 0144 FFF7FEFF 	 bl pt1FilterInit
 277:../cleanflight/src/main/flight/pid.c ****         for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 967              	 .loc 4 277 0 discriminator 3
 968 0148 FB69     	 ldr r3,[r7,#28]
 969 014a 0133     	 adds r3,r3,#1
 970 014c FB61     	 str r3,[r7,#28]
 971              	.L53:
 277:../cleanflight/src/main/flight/pid.c ****         for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 972              	 .loc 4 277 0 is_stmt 0 discriminator 1
 973 014e FB69     	 ldr r3,[r7,#28]
 974 0150 022B     	 cmp r3,#2
 975 0152 E6DD     	 ble .L54
 976              	.L52:
 977              	.LBE5:
 279:../cleanflight/src/main/flight/pid.c ****         }
 280:../cleanflight/src/main/flight/pid.c ****     }
 281:../cleanflight/src/main/flight/pid.c **** 
 282:../cleanflight/src/main/flight/pid.c ****     if (pidProfile->dterm_lowpass_hz == 0 || pidProfile->dterm_lowpass_hz > pidFrequencyNyquist) {
 978              	 .loc 4 282 0 is_stmt 1
 979 0154 7B68     	 ldr r3,[r7,#4]
 980 0156 5B88     	 ldrh r3,[r3,#2]
 981 0158 9BB2     	 uxth r3,r3
 982 015a 002B     	 cmp r3,#0
 983 015c 06D0     	 beq .L55
 984              	 .loc 4 282 0 is_stmt 0 discriminator 1
 985 015e 7B68     	 ldr r3,[r7,#4]
 986 0160 5B88     	 ldrh r3,[r3,#2]
 987 0162 9BB2     	 uxth r3,r3
 988 0164 1A46     	 mov r2,r3
 989 0166 FB68     	 ldr r3,[r7,#12]
 990 0168 9A42     	 cmp r2,r3
 991 016a 03D9     	 bls .L56
 992              	.L55:
 283:../cleanflight/src/main/flight/pid.c ****         dtermLowpassApplyFn = nullFilterApply;
 993              	 .loc 4 283 0 is_stmt 1
 994 016c 484B     	 ldr r3,.L71+12
 995 016e 474A     	 ldr r2,.L71+8
 996 0170 1A60     	 str r2,[r3]
 997 0172 4FE0     	 b .L57
 998              	.L56:
 284:../cleanflight/src/main/flight/pid.c ****     } else {
 285:../cleanflight/src/main/flight/pid.c ****         switch (pidProfile->dterm_filter_type) {
 999              	 .loc 4 285 0
 1000 0174 7B68     	 ldr r3,[r7,#4]
 1001 0176 93F82130 	 ldrb r3,[r3,#33]
 1002 017a 002B     	 cmp r3,#0
 1003 017c 05D0     	 beq .L59
 1004 017e 012B     	 cmp r3,#1
 1005 0180 25D0     	 beq .L60
 286:../cleanflight/src/main/flight/pid.c ****         default:
 287:../cleanflight/src/main/flight/pid.c ****             dtermLowpassApplyFn = nullFilterApply;
 1006              	 .loc 4 287 0
 1007 0182 434B     	 ldr r3,.L71+12
 1008 0184 414A     	 ldr r2,.L71+8
 1009 0186 1A60     	 str r2,[r3]
 288:../cleanflight/src/main/flight/pid.c ****             break;
 1010              	 .loc 4 288 0
 1011 0188 44E0     	 b .L57
 1012              	.L59:
 289:../cleanflight/src/main/flight/pid.c ****         case FILTER_PT1:
 290:../cleanflight/src/main/flight/pid.c ****             dtermLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 1013              	 .loc 4 290 0
 1014 018a 414B     	 ldr r3,.L71+12
 1015 018c 464A     	 ldr r2,.L71+36
 1016 018e 1A60     	 str r2,[r3]
 1017              	.LBB6:
 291:../cleanflight/src/main/flight/pid.c ****             for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 1018              	 .loc 4 291 0
 1019 0190 0023     	 movs r3,#0
 1020 0192 BB61     	 str r3,[r7,#24]
 1021 0194 17E0     	 b .L61
 1022              	.L62:
 292:../cleanflight/src/main/flight/pid.c ****                 pt1FilterInit(&dtermLowpass[axis].pt1Filter, pt1FilterGain(pidProfile->dterm_lowpas
 1023              	 .loc 4 292 0 discriminator 3
 1024 0196 BA69     	 ldr r2,[r7,#24]
 1025 0198 1346     	 mov r3,r2
 1026 019a DB00     	 lsls r3,r3,#3
 1027 019c 1344     	 add r3,r3,r2
 1028 019e 9B00     	 lsls r3,r3,#2
 1029 01a0 444A     	 ldr r2,.L71+48
 1030 01a2 9C18     	 adds r4,r3,r2
 1031 01a4 7B68     	 ldr r3,[r7,#4]
 1032 01a6 5B88     	 ldrh r3,[r3,#2]
 1033 01a8 9AB2     	 uxth r2,r3
 1034 01aa 414B     	 ldr r3,.L71+44
 1035 01ac 1B68     	 ldr r3,[r3]
 1036 01ae 1046     	 mov r0,r2
 1037 01b0 1946     	 mov r1,r3
 1038 01b2 FFF7FEFF 	 bl pt1FilterGain
 1039 01b6 0346     	 mov r3,r0
 1040 01b8 2046     	 mov r0,r4
 1041 01ba 1946     	 mov r1,r3
 1042 01bc FFF7FEFF 	 bl pt1FilterInit
 291:../cleanflight/src/main/flight/pid.c ****             for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 1043              	 .loc 4 291 0 discriminator 3
 1044 01c0 BB69     	 ldr r3,[r7,#24]
 1045 01c2 0133     	 adds r3,r3,#1
 1046 01c4 BB61     	 str r3,[r7,#24]
 1047              	.L61:
 291:../cleanflight/src/main/flight/pid.c ****             for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 1048              	 .loc 4 291 0 is_stmt 0 discriminator 1
 1049 01c6 BB69     	 ldr r3,[r7,#24]
 1050 01c8 022B     	 cmp r3,#2
 1051 01ca E4DD     	 ble .L62
 1052              	.LBE6:
 293:../cleanflight/src/main/flight/pid.c ****             }
 294:../cleanflight/src/main/flight/pid.c ****             break;
 1053              	 .loc 4 294 0 is_stmt 1
 1054 01cc 22E0     	 b .L57
 1055              	.L60:
 295:../cleanflight/src/main/flight/pid.c ****         case FILTER_BIQUAD:
 296:../cleanflight/src/main/flight/pid.c ****             dtermLowpassApplyFn = (filterApplyFnPtr)biquadFilterApply;
 1056              	 .loc 4 296 0
 1057 01ce 304B     	 ldr r3,.L71+12
 1058 01d0 324A     	 ldr r2,.L71+24
 1059 01d2 1A60     	 str r2,[r3]
 1060              	.LBB7:
 297:../cleanflight/src/main/flight/pid.c ****             for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 1061              	 .loc 4 297 0
 1062 01d4 0023     	 movs r3,#0
 1063 01d6 7B61     	 str r3,[r7,#20]
 1064 01d8 18E0     	 b .L63
 1065              	.L64:
 298:../cleanflight/src/main/flight/pid.c ****                 biquadFilterInitLPF(&dtermLowpass[axis].biquadFilter, pidProfile->dterm_lowpass_hz,
 1066              	 .loc 4 298 0 discriminator 3
 1067 01da 7A69     	 ldr r2,[r7,#20]
 1068 01dc 1346     	 mov r3,r2
 1069 01de DB00     	 lsls r3,r3,#3
 1070 01e0 1344     	 add r3,r3,r2
 1071 01e2 9B00     	 lsls r3,r3,#2
 1072 01e4 334A     	 ldr r2,.L71+48
 1073 01e6 1A44     	 add r2,r2,r3
 1074 01e8 7B68     	 ldr r3,[r7,#4]
 1075 01ea 5B88     	 ldrh r3,[r3,#2]
 1076 01ec 9BB2     	 uxth r3,r3
 1077 01ee 07EE903A 	 fmsr s15,r3
 1078 01f2 F8EE677A 	 fuitos s15,s15
 1079 01f6 234B     	 ldr r3,.L71
 1080 01f8 1B68     	 ldr r3,[r3]
 1081 01fa 1046     	 mov r0,r2
 1082 01fc 17EE901A 	 fmrs r1,s15
 1083 0200 1A46     	 mov r2,r3
 1084 0202 FFF7FEFF 	 bl biquadFilterInitLPF
 297:../cleanflight/src/main/flight/pid.c ****             for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 1085              	 .loc 4 297 0 discriminator 3
 1086 0206 7B69     	 ldr r3,[r7,#20]
 1087 0208 0133     	 adds r3,r3,#1
 1088 020a 7B61     	 str r3,[r7,#20]
 1089              	.L63:
 297:../cleanflight/src/main/flight/pid.c ****             for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 1090              	 .loc 4 297 0 is_stmt 0 discriminator 1
 1091 020c 7B69     	 ldr r3,[r7,#20]
 1092 020e 022B     	 cmp r3,#2
 1093 0210 E3DD     	 ble .L64
 1094              	.LBE7:
 299:../cleanflight/src/main/flight/pid.c ****             }
 300:../cleanflight/src/main/flight/pid.c ****             break;
 1095              	 .loc 4 300 0 is_stmt 1
 1096 0212 00BF     	 nop
 1097              	.L57:
 301:../cleanflight/src/main/flight/pid.c ****         }
 302:../cleanflight/src/main/flight/pid.c ****     }
 303:../cleanflight/src/main/flight/pid.c **** 
 304:../cleanflight/src/main/flight/pid.c ****     if (pidProfile->yaw_lowpass_hz == 0 || pidProfile->yaw_lowpass_hz > pidFrequencyNyquist) {
 1098              	 .loc 4 304 0
 1099 0214 7B68     	 ldr r3,[r7,#4]
 1100 0216 1B88     	 ldrh r3,[r3]
 1101 0218 9BB2     	 uxth r3,r3
 1102 021a 002B     	 cmp r3,#0
 1103 021c 06D0     	 beq .L65
 1104              	 .loc 4 304 0 is_stmt 0 discriminator 1
 1105 021e 7B68     	 ldr r3,[r7,#4]
 1106 0220 1B88     	 ldrh r3,[r3]
 1107 0222 9BB2     	 uxth r3,r3
 1108 0224 1A46     	 mov r2,r3
 1109 0226 FB68     	 ldr r3,[r7,#12]
 1110 0228 9A42     	 cmp r2,r3
 1111 022a 03D9     	 bls .L66
 1112              	.L65:
 305:../cleanflight/src/main/flight/pid.c ****         ptermYawLowpassApplyFn = nullFilterApply;
 1113              	 .loc 4 305 0 is_stmt 1
 1114 022c 194B     	 ldr r3,.L71+16
 1115 022e 174A     	 ldr r2,.L71+8
 1116 0230 1A60     	 str r2,[r3]
 1117 0232 10E0     	 b .L67
 1118              	.L66:
 306:../cleanflight/src/main/flight/pid.c ****     } else {
 307:../cleanflight/src/main/flight/pid.c ****         ptermYawLowpassApplyFn = (filterApplyFnPtr)pt1FilterApply;
 1119              	 .loc 4 307 0
 1120 0234 174B     	 ldr r3,.L71+16
 1121 0236 1C4A     	 ldr r2,.L71+36
 1122 0238 1A60     	 str r2,[r3]
 308:../cleanflight/src/main/flight/pid.c ****         pt1FilterInit(&ptermYawLowpass, pt1FilterGain(pidProfile->yaw_lowpass_hz, dT));
 1123              	 .loc 4 308 0
 1124 023a 7B68     	 ldr r3,[r7,#4]
 1125 023c 1B88     	 ldrh r3,[r3]
 1126 023e 9AB2     	 uxth r2,r3
 1127 0240 1B4B     	 ldr r3,.L71+44
 1128 0242 1B68     	 ldr r3,[r3]
 1129 0244 1046     	 mov r0,r2
 1130 0246 1946     	 mov r1,r3
 1131 0248 FFF7FEFF 	 bl pt1FilterGain
 1132 024c 0346     	 mov r3,r0
 1133 024e 1A48     	 ldr r0,.L71+52
 1134 0250 1946     	 mov r1,r3
 1135 0252 FFF7FEFF 	 bl pt1FilterInit
 1136              	.L67:
 309:../cleanflight/src/main/flight/pid.c ****     }
 310:../cleanflight/src/main/flight/pid.c **** 
 311:../cleanflight/src/main/flight/pid.c **** #if defined(USE_THROTTLE_BOOST)
 312:../cleanflight/src/main/flight/pid.c ****     pt1FilterInit(&throttleLpf, pt1FilterGain(pidProfile->throttle_boost_cutoff, dT));
 1137              	 .loc 4 312 0
 1138 0256 7B68     	 ldr r3,[r7,#4]
 1139 0258 93F84A30 	 ldrb r3,[r3,#74]
 1140 025c 9AB2     	 uxth r2,r3
 1141 025e 144B     	 ldr r3,.L71+44
 1142 0260 1B68     	 ldr r3,[r3]
 1143 0262 1046     	 mov r0,r2
 1144 0264 1946     	 mov r1,r3
 1145 0266 FFF7FEFF 	 bl pt1FilterGain
 1146 026a 0346     	 mov r3,r0
 1147 026c 1348     	 ldr r0,.L71+56
 1148 026e 1946     	 mov r1,r3
 1149 0270 FFF7FEFF 	 bl pt1FilterInit
 313:../cleanflight/src/main/flight/pid.c **** #endif
 314:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ITERM_RELAX)
 315:../cleanflight/src/main/flight/pid.c ****     if (itermRelax) {
 1150              	 .loc 4 315 0
 1151 0274 124B     	 ldr r3,.L71+60
 1152 0276 1B78     	 ldrb r3,[r3]
 1153 0278 002B     	 cmp r3,#0
 1154 027a 3BD0     	 beq .L68
 1155              	.LBB8:
 316:../cleanflight/src/main/flight/pid.c ****         for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 1156              	 .loc 4 316 0
 1157 027c 0023     	 movs r3,#0
 1158 027e 3B61     	 str r3,[r7,#16]
 1159 0280 35E0     	 b .L69
 1160              	.L72:
 1161 0282 00BF     	 .align 2
 1162              	.L71:
 1163 0284 00000000 	 .word targetPidLooptime
 1164 0288 00000000 	 .word dtermNotchApplyFn
 1165 028c 00000000 	 .word nullFilterApply
 1166 0290 00000000 	 .word dtermLowpassApplyFn
 1167 0294 00000000 	 .word ptermYawLowpassApplyFn
 1168 0298 00000000 	 .word pidFrequency
 1169 029c 00000000 	 .word biquadFilterApply
 1170 02a0 00000000 	 .word dtermNotch
 1171 02a4 00000000 	 .word dtermLowpass2ApplyFn
 1172 02a8 00000000 	 .word pt1FilterApply
 1173 02ac 00000000 	 .word dtermLowpass2
 1174 02b0 00000000 	 .word dT
 1175 02b4 00000000 	 .word dtermLowpass
 1176 02b8 00000000 	 .word ptermYawLowpass
 1177 02bc 00000000 	 .word throttleLpf
 1178 02c0 00000000 	 .word itermRelax
 1179              	.L70:
 317:../cleanflight/src/main/flight/pid.c ****             pt1FilterInit(&windupLpf[i], pt1FilterGain(itermRelaxCutoff, dT));
 1180              	 .loc 4 317 0 discriminator 3
 1181 02c4 3B69     	 ldr r3,[r7,#16]
 1182 02c6 DB00     	 lsls r3,r3,#3
 1183 02c8 114A     	 ldr r2,.L73
 1184 02ca 9C18     	 adds r4,r3,r2
 1185 02cc 114B     	 ldr r3,.L73+4
 1186 02ce 1B78     	 ldrb r3,[r3]
 1187 02d0 9AB2     	 uxth r2,r3
 1188 02d2 114B     	 ldr r3,.L73+8
 1189 02d4 1B68     	 ldr r3,[r3]
 1190 02d6 1046     	 mov r0,r2
 1191 02d8 1946     	 mov r1,r3
 1192 02da FFF7FEFF 	 bl pt1FilterGain
 1193 02de 0346     	 mov r3,r0
 1194 02e0 2046     	 mov r0,r4
 1195 02e2 1946     	 mov r1,r3
 1196 02e4 FFF7FEFF 	 bl pt1FilterInit
 316:../cleanflight/src/main/flight/pid.c ****         for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 1197              	 .loc 4 316 0 discriminator 3
 1198 02e8 3B69     	 ldr r3,[r7,#16]
 1199 02ea 0133     	 adds r3,r3,#1
 1200 02ec 3B61     	 str r3,[r7,#16]
 1201              	.L69:
 316:../cleanflight/src/main/flight/pid.c ****         for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 1202              	 .loc 4 316 0 is_stmt 0 discriminator 1
 1203 02ee 3B69     	 ldr r3,[r7,#16]
 1204 02f0 022B     	 cmp r3,#2
 1205 02f2 E7DD     	 ble .L70
 1206              	.L68:
 1207              	.LBE8:
 318:../cleanflight/src/main/flight/pid.c ****         }
 319:../cleanflight/src/main/flight/pid.c ****     }
 320:../cleanflight/src/main/flight/pid.c **** #endif
 321:../cleanflight/src/main/flight/pid.c **** 
 322:../cleanflight/src/main/flight/pid.c ****     pt1FilterInit(&antiGravityThrottleLpf, pt1FilterGain(ANTI_GRAVITY_THROTTLE_FILTER_CUTOFF, dT));
 1208              	 .loc 4 322 0 is_stmt 1
 1209 02f4 084B     	 ldr r3,.L73+8
 1210 02f6 1B68     	 ldr r3,[r3]
 1211 02f8 0F20     	 movs r0,#15
 1212 02fa 1946     	 mov r1,r3
 1213 02fc FFF7FEFF 	 bl pt1FilterGain
 1214 0300 0346     	 mov r3,r0
 1215 0302 0648     	 ldr r0,.L73+12
 1216 0304 1946     	 mov r1,r3
 1217 0306 FFF7FEFF 	 bl pt1FilterInit
 1218              	.L40:
 323:../cleanflight/src/main/flight/pid.c **** }
 1219              	 .loc 4 323 0
 1220 030a 2C37     	 adds r7,r7,#44
 1221              	.LCFI57:
 1222              	 .cfi_def_cfa_offset 12
 1223 030c BD46     	 mov sp,r7
 1224              	.LCFI58:
 1225              	 .cfi_def_cfa_register 13
 1226              	 
 1227 030e 90BD     	 pop {r4,r7,pc}
 1228              	.L74:
 1229              	 .align 2
 1230              	.L73:
 1231 0310 00000000 	 .word windupLpf
 1232 0314 00000000 	 .word itermRelaxCutoff
 1233 0318 00000000 	 .word dT
 1234 031c 00000000 	 .word antiGravityThrottleLpf
 1235              	 .cfi_endproc
 1236              	.LFE569:
 1238              	 .section .text.pidInitSetpointDerivativeLpf,"ax",%progbits
 1239              	 .align 2
 1240              	 .global pidInitSetpointDerivativeLpf
 1241              	 .thumb
 1242              	 .thumb_func
 1244              	pidInitSetpointDerivativeLpf:
 1245              	.LFB570:
 324:../cleanflight/src/main/flight/pid.c **** 
 325:../cleanflight/src/main/flight/pid.c **** #ifdef USE_RC_SMOOTHING_FILTER
 326:../cleanflight/src/main/flight/pid.c **** void pidInitSetpointDerivativeLpf(uint16_t filterCutoff, uint8_t debugAxis, uint8_t filterType)
 327:../cleanflight/src/main/flight/pid.c **** {
 1246              	 .loc 4 327 0
 1247              	 .cfi_startproc
 1248              	 
 1249              	 
 1250 0000 90B5     	 push {r4,r7,lr}
 1251              	.LCFI59:
 1252              	 .cfi_def_cfa_offset 12
 1253              	 .cfi_offset 4,-12
 1254              	 .cfi_offset 7,-8
 1255              	 .cfi_offset 14,-4
 1256 0002 85B0     	 sub sp,sp,#20
 1257              	.LCFI60:
 1258              	 .cfi_def_cfa_offset 32
 1259 0004 00AF     	 add r7,sp,#0
 1260              	.LCFI61:
 1261              	 .cfi_def_cfa_register 7
 1262 0006 0346     	 mov r3,r0
 1263 0008 FB80     	 strh r3,[r7,#6]
 1264 000a 0B46     	 mov r3,r1
 1265 000c 7B71     	 strb r3,[r7,#5]
 1266 000e 1346     	 mov r3,r2
 1267 0010 3B71     	 strb r3,[r7,#4]
 328:../cleanflight/src/main/flight/pid.c ****     rcSmoothingDebugAxis = debugAxis;
 1268              	 .loc 4 328 0
 1269 0012 244A     	 ldr r2,.L82
 1270 0014 7B79     	 ldrb r3,[r7,#5]
 1271 0016 1370     	 strb r3,[r2]
 329:../cleanflight/src/main/flight/pid.c ****     rcSmoothingFilterType = filterType;
 1272              	 .loc 4 329 0
 1273 0018 234A     	 ldr r2,.L82+4
 1274 001a 3B79     	 ldrb r3,[r7,#4]
 1275 001c 1370     	 strb r3,[r2]
 330:../cleanflight/src/main/flight/pid.c ****     if ((filterCutoff > 0) && (rcSmoothingFilterType != RC_SMOOTHING_DERIVATIVE_OFF)) {
 1276              	 .loc 4 330 0
 1277 001e FB88     	 ldrh r3,[r7,#6]
 1278 0020 002B     	 cmp r3,#0
 1279 0022 3CD0     	 beq .L75
 1280              	 .loc 4 330 0 is_stmt 0 discriminator 1
 1281 0024 204B     	 ldr r3,.L82+4
 1282 0026 1B78     	 ldrb r3,[r3]
 1283 0028 002B     	 cmp r3,#0
 1284 002a 38D0     	 beq .L75
 331:../cleanflight/src/main/flight/pid.c ****         setpointDerivativeLpfInitialized = true;
 1285              	 .loc 4 331 0 is_stmt 1
 1286 002c 1F4B     	 ldr r3,.L82+8
 1287 002e 0122     	 movs r2,#1
 1288 0030 1A70     	 strb r2,[r3]
 1289              	.LBB9:
 332:../cleanflight/src/main/flight/pid.c ****         for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 1290              	 .loc 4 332 0
 1291 0032 0023     	 movs r3,#0
 1292 0034 FB60     	 str r3,[r7,#12]
 1293 0036 2FE0     	 b .L77
 1294              	.L81:
 333:../cleanflight/src/main/flight/pid.c ****             switch (rcSmoothingFilterType) {
 1295              	 .loc 4 333 0
 1296 0038 1B4B     	 ldr r3,.L82+4
 1297 003a 1B78     	 ldrb r3,[r3]
 1298 003c 012B     	 cmp r3,#1
 1299 003e 02D0     	 beq .L79
 1300 0040 022B     	 cmp r3,#2
 1301 0042 11D0     	 beq .L80
 1302 0044 25E0     	 b .L78
 1303              	.L79:
 334:../cleanflight/src/main/flight/pid.c ****                 case RC_SMOOTHING_DERIVATIVE_PT1:
 335:../cleanflight/src/main/flight/pid.c ****                     pt1FilterInit(&setpointDerivativePt1[axis], pt1FilterGain(filterCutoff, dT));
 1304              	 .loc 4 335 0
 1305 0046 FB68     	 ldr r3,[r7,#12]
 1306 0048 DB00     	 lsls r3,r3,#3
 1307 004a 194A     	 ldr r2,.L82+12
 1308 004c 9C18     	 adds r4,r3,r2
 1309 004e 194B     	 ldr r3,.L82+16
 1310 0050 1B68     	 ldr r3,[r3]
 1311 0052 FA88     	 ldrh r2,[r7,#6]
 1312 0054 1046     	 mov r0,r2
 1313 0056 1946     	 mov r1,r3
 1314 0058 FFF7FEFF 	 bl pt1FilterGain
 1315 005c 0346     	 mov r3,r0
 1316 005e 2046     	 mov r0,r4
 1317 0060 1946     	 mov r1,r3
 1318 0062 FFF7FEFF 	 bl pt1FilterInit
 336:../cleanflight/src/main/flight/pid.c ****                     break;
 1319              	 .loc 4 336 0
 1320 0066 14E0     	 b .L78
 1321              	.L80:
 337:../cleanflight/src/main/flight/pid.c ****                 case RC_SMOOTHING_DERIVATIVE_BIQUAD:
 338:../cleanflight/src/main/flight/pid.c ****                     biquadFilterInitLPF(&setpointDerivativeBiquad[axis], filterCutoff, targetPidLoo
 1322              	 .loc 4 338 0
 1323 0068 FA68     	 ldr r2,[r7,#12]
 1324 006a 1346     	 mov r3,r2
 1325 006c DB00     	 lsls r3,r3,#3
 1326 006e 1344     	 add r3,r3,r2
 1327 0070 9B00     	 lsls r3,r3,#2
 1328 0072 114A     	 ldr r2,.L82+20
 1329 0074 1A44     	 add r2,r2,r3
 1330 0076 FB88     	 ldrh r3,[r7,#6]
 1331 0078 07EE903A 	 fmsr s15,r3
 1332 007c F8EE677A 	 fuitos s15,s15
 1333 0080 0E4B     	 ldr r3,.L82+24
 1334 0082 1B68     	 ldr r3,[r3]
 1335 0084 1046     	 mov r0,r2
 1336 0086 17EE901A 	 fmrs r1,s15
 1337 008a 1A46     	 mov r2,r3
 1338 008c FFF7FEFF 	 bl biquadFilterInitLPF
 339:../cleanflight/src/main/flight/pid.c ****                     break;
 1339              	 .loc 4 339 0
 1340 0090 00BF     	 nop
 1341              	.L78:
 332:../cleanflight/src/main/flight/pid.c ****             switch (rcSmoothingFilterType) {
 1342              	 .loc 4 332 0 discriminator 2
 1343 0092 FB68     	 ldr r3,[r7,#12]
 1344 0094 0133     	 adds r3,r3,#1
 1345 0096 FB60     	 str r3,[r7,#12]
 1346              	.L77:
 332:../cleanflight/src/main/flight/pid.c ****             switch (rcSmoothingFilterType) {
 1347              	 .loc 4 332 0 is_stmt 0 discriminator 1
 1348 0098 FB68     	 ldr r3,[r7,#12]
 1349 009a 022B     	 cmp r3,#2
 1350 009c CCDD     	 ble .L81
 1351              	.L75:
 1352              	.LBE9:
 340:../cleanflight/src/main/flight/pid.c ****             }
 341:../cleanflight/src/main/flight/pid.c ****         }
 342:../cleanflight/src/main/flight/pid.c ****     }
 343:../cleanflight/src/main/flight/pid.c **** }
 1353              	 .loc 4 343 0 is_stmt 1
 1354 009e 1437     	 adds r7,r7,#20
 1355              	.LCFI62:
 1356              	 .cfi_def_cfa_offset 12
 1357 00a0 BD46     	 mov sp,r7
 1358              	.LCFI63:
 1359              	 .cfi_def_cfa_register 13
 1360              	 
 1361 00a2 90BD     	 pop {r4,r7,pc}
 1362              	.L83:
 1363              	 .align 2
 1364              	.L82:
 1365 00a4 00000000 	 .word rcSmoothingDebugAxis
 1366 00a8 00000000 	 .word rcSmoothingFilterType
 1367 00ac 00000000 	 .word setpointDerivativeLpfInitialized
 1368 00b0 00000000 	 .word setpointDerivativePt1
 1369 00b4 00000000 	 .word dT
 1370 00b8 00000000 	 .word setpointDerivativeBiquad
 1371 00bc 00000000 	 .word targetPidLooptime
 1372              	 .cfi_endproc
 1373              	.LFE570:
 1375              	 .section .text.pidUpdateSetpointDerivativeLpf,"ax",%progbits
 1376              	 .align 2
 1377              	 .global pidUpdateSetpointDerivativeLpf
 1378              	 .thumb
 1379              	 .thumb_func
 1381              	pidUpdateSetpointDerivativeLpf:
 1382              	.LFB571:
 344:../cleanflight/src/main/flight/pid.c **** 
 345:../cleanflight/src/main/flight/pid.c **** void pidUpdateSetpointDerivativeLpf(uint16_t filterCutoff)
 346:../cleanflight/src/main/flight/pid.c **** {
 1383              	 .loc 4 346 0
 1384              	 .cfi_startproc
 1385              	 
 1386              	 
 1387 0000 90B5     	 push {r4,r7,lr}
 1388              	.LCFI64:
 1389              	 .cfi_def_cfa_offset 12
 1390              	 .cfi_offset 4,-12
 1391              	 .cfi_offset 7,-8
 1392              	 .cfi_offset 14,-4
 1393 0002 85B0     	 sub sp,sp,#20
 1394              	.LCFI65:
 1395              	 .cfi_def_cfa_offset 32
 1396 0004 00AF     	 add r7,sp,#0
 1397              	.LCFI66:
 1398              	 .cfi_def_cfa_register 7
 1399 0006 0346     	 mov r3,r0
 1400 0008 FB80     	 strh r3,[r7,#6]
 347:../cleanflight/src/main/flight/pid.c ****     if ((filterCutoff > 0) && (rcSmoothingFilterType != RC_SMOOTHING_DERIVATIVE_OFF)) {
 1401              	 .loc 4 347 0
 1402 000a FB88     	 ldrh r3,[r7,#6]
 1403 000c 002B     	 cmp r3,#0
 1404 000e 39D0     	 beq .L84
 1405              	 .loc 4 347 0 is_stmt 0 discriminator 1
 1406 0010 1E4B     	 ldr r3,.L91
 1407 0012 1B78     	 ldrb r3,[r3]
 1408 0014 002B     	 cmp r3,#0
 1409 0016 35D0     	 beq .L84
 1410              	.LBB10:
 348:../cleanflight/src/main/flight/pid.c ****         for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 1411              	 .loc 4 348 0 is_stmt 1
 1412 0018 0023     	 movs r3,#0
 1413 001a FB60     	 str r3,[r7,#12]
 1414 001c 2FE0     	 b .L86
 1415              	.L90:
 349:../cleanflight/src/main/flight/pid.c ****             switch (rcSmoothingFilterType) {
 1416              	 .loc 4 349 0
 1417 001e 1B4B     	 ldr r3,.L91
 1418 0020 1B78     	 ldrb r3,[r3]
 1419 0022 012B     	 cmp r3,#1
 1420 0024 02D0     	 beq .L88
 1421 0026 022B     	 cmp r3,#2
 1422 0028 11D0     	 beq .L89
 1423 002a 25E0     	 b .L87
 1424              	.L88:
 350:../cleanflight/src/main/flight/pid.c ****                 case RC_SMOOTHING_DERIVATIVE_PT1:
 351:../cleanflight/src/main/flight/pid.c ****                     pt1FilterUpdateCutoff(&setpointDerivativePt1[axis], pt1FilterGain(filterCutoff,
 1425              	 .loc 4 351 0
 1426 002c FB68     	 ldr r3,[r7,#12]
 1427 002e DB00     	 lsls r3,r3,#3
 1428 0030 174A     	 ldr r2,.L91+4
 1429 0032 9C18     	 adds r4,r3,r2
 1430 0034 174B     	 ldr r3,.L91+8
 1431 0036 1B68     	 ldr r3,[r3]
 1432 0038 FA88     	 ldrh r2,[r7,#6]
 1433 003a 1046     	 mov r0,r2
 1434 003c 1946     	 mov r1,r3
 1435 003e FFF7FEFF 	 bl pt1FilterGain
 1436 0042 0346     	 mov r3,r0
 1437 0044 2046     	 mov r0,r4
 1438 0046 1946     	 mov r1,r3
 1439 0048 FFF7FEFF 	 bl pt1FilterUpdateCutoff
 352:../cleanflight/src/main/flight/pid.c ****                     break;
 1440              	 .loc 4 352 0
 1441 004c 14E0     	 b .L87
 1442              	.L89:
 353:../cleanflight/src/main/flight/pid.c ****                 case RC_SMOOTHING_DERIVATIVE_BIQUAD:
 354:../cleanflight/src/main/flight/pid.c ****                     biquadFilterUpdateLPF(&setpointDerivativeBiquad[axis], filterCutoff, targetPidL
 1443              	 .loc 4 354 0
 1444 004e FA68     	 ldr r2,[r7,#12]
 1445 0050 1346     	 mov r3,r2
 1446 0052 DB00     	 lsls r3,r3,#3
 1447 0054 1344     	 add r3,r3,r2
 1448 0056 9B00     	 lsls r3,r3,#2
 1449 0058 0F4A     	 ldr r2,.L91+12
 1450 005a 1A44     	 add r2,r2,r3
 1451 005c FB88     	 ldrh r3,[r7,#6]
 1452 005e 07EE903A 	 fmsr s15,r3
 1453 0062 F8EE677A 	 fuitos s15,s15
 1454 0066 0D4B     	 ldr r3,.L91+16
 1455 0068 1B68     	 ldr r3,[r3]
 1456 006a 1046     	 mov r0,r2
 1457 006c 17EE901A 	 fmrs r1,s15
 1458 0070 1A46     	 mov r2,r3
 1459 0072 FFF7FEFF 	 bl biquadFilterUpdateLPF
 355:../cleanflight/src/main/flight/pid.c ****                     break;
 1460              	 .loc 4 355 0
 1461 0076 00BF     	 nop
 1462              	.L87:
 348:../cleanflight/src/main/flight/pid.c ****             switch (rcSmoothingFilterType) {
 1463              	 .loc 4 348 0 discriminator 2
 1464 0078 FB68     	 ldr r3,[r7,#12]
 1465 007a 0133     	 adds r3,r3,#1
 1466 007c FB60     	 str r3,[r7,#12]
 1467              	.L86:
 348:../cleanflight/src/main/flight/pid.c ****             switch (rcSmoothingFilterType) {
 1468              	 .loc 4 348 0 is_stmt 0 discriminator 1
 1469 007e FB68     	 ldr r3,[r7,#12]
 1470 0080 022B     	 cmp r3,#2
 1471 0082 CCDD     	 ble .L90
 1472              	.L84:
 1473              	.LBE10:
 356:../cleanflight/src/main/flight/pid.c ****             }
 357:../cleanflight/src/main/flight/pid.c ****         }
 358:../cleanflight/src/main/flight/pid.c ****     }
 359:../cleanflight/src/main/flight/pid.c **** }
 1474              	 .loc 4 359 0 is_stmt 1
 1475 0084 1437     	 adds r7,r7,#20
 1476              	.LCFI67:
 1477              	 .cfi_def_cfa_offset 12
 1478 0086 BD46     	 mov sp,r7
 1479              	.LCFI68:
 1480              	 .cfi_def_cfa_register 13
 1481              	 
 1482 0088 90BD     	 pop {r4,r7,pc}
 1483              	.L92:
 1484 008a 00BF     	 .align 2
 1485              	.L91:
 1486 008c 00000000 	 .word rcSmoothingFilterType
 1487 0090 00000000 	 .word setpointDerivativePt1
 1488 0094 00000000 	 .word dT
 1489 0098 00000000 	 .word setpointDerivativeBiquad
 1490 009c 00000000 	 .word targetPidLooptime
 1491              	 .cfi_endproc
 1492              	.LFE571:
 1494              	 .section .bss.pidCoefficient,"aw",%nobits
 1495              	 .align 2
 1498              	pidCoefficient:
 1499 0000 00000000 	 .space 48
 1499      00000000 
 1499      00000000 
 1499      00000000 
 1499      00000000 
 1500              	 .section .bss.maxVelocity,"aw",%nobits
 1501              	 .align 2
 1504              	maxVelocity:
 1505 0000 00000000 	 .space 12
 1505      00000000 
 1505      00000000 
 1506              	 .section .bss.feedForwardTransition,"aw",%nobits
 1507              	 .align 2
 1510              	feedForwardTransition:
 1511 0000 00000000 	 .space 4
 1512              	 .section .bss.levelGain,"aw",%nobits
 1513              	 .align 2
 1516              	levelGain:
 1517 0000 00000000 	 .space 4
 1518              	 .section .bss.horizonGain,"aw",%nobits
 1519              	 .align 2
 1522              	horizonGain:
 1523 0000 00000000 	 .space 4
 1524              	 .section .bss.horizonTransition,"aw",%nobits
 1525              	 .align 2
 1528              	horizonTransition:
 1529 0000 00000000 	 .space 4
 1530              	 .section .bss.horizonCutoffDegrees,"aw",%nobits
 1531              	 .align 2
 1534              	horizonCutoffDegrees:
 1535 0000 00000000 	 .space 4
 1536              	 .section .bss.horizonFactorRatio,"aw",%nobits
 1537              	 .align 2
 1540              	horizonFactorRatio:
 1541 0000 00000000 	 .space 4
 1542              	 .section .bss.ITermWindupPointInv,"aw",%nobits
 1543              	 .align 2
 1546              	ITermWindupPointInv:
 1547 0000 00000000 	 .space 4
 1548              	 .section .bss.horizonTiltExpertMode,"aw",%nobits
 1551              	horizonTiltExpertMode:
 1552 0000 00       	 .space 1
 1553              	 .section .bss.crashTimeLimitUs,"aw",%nobits
 1554              	 .align 2
 1557              	crashTimeLimitUs:
 1558 0000 00000000 	 .space 4
 1559              	 .section .bss.crashTimeDelayUs,"aw",%nobits
 1560              	 .align 2
 1563              	crashTimeDelayUs:
 1564 0000 00000000 	 .space 4
 1565              	 .section .bss.crashRecoveryAngleDeciDegrees,"aw",%nobits
 1566              	 .align 2
 1569              	crashRecoveryAngleDeciDegrees:
 1570 0000 00000000 	 .space 4
 1571              	 .section .bss.crashRecoveryRate,"aw",%nobits
 1572              	 .align 2
 1575              	crashRecoveryRate:
 1576 0000 00000000 	 .space 4
 1577              	 .section .bss.crashDtermThreshold,"aw",%nobits
 1578              	 .align 2
 1581              	crashDtermThreshold:
 1582 0000 00000000 	 .space 4
 1583              	 .section .bss.crashGyroThreshold,"aw",%nobits
 1584              	 .align 2
 1587              	crashGyroThreshold:
 1588 0000 00000000 	 .space 4
 1589              	 .section .bss.crashSetpointThreshold,"aw",%nobits
 1590              	 .align 2
 1593              	crashSetpointThreshold:
 1594 0000 00000000 	 .space 4
 1595              	 .section .bss.crashLimitYaw,"aw",%nobits
 1596              	 .align 2
 1599              	crashLimitYaw:
 1600 0000 00000000 	 .space 4
 1601              	 .section .bss.itermLimit,"aw",%nobits
 1602              	 .align 2
 1605              	itermLimit:
 1606 0000 00000000 	 .space 4
 1607              	 .comm throttleBoost,4,4
 1608              	 .comm throttleLpf,8,4
 1609              	 .section .bss.itermRotation,"aw",%nobits
 1612              	itermRotation:
 1613 0000 00       	 .space 1
 1614              	 .section .bss.smartFeedforward,"aw",%nobits
 1617              	smartFeedforward:
 1618 0000 00       	 .space 1
 1619              	 .section .bss.axisError,"aw",%nobits
 1620              	 .align 2
 1623              	axisError:
 1624 0000 00000000 	 .space 12
 1624      00000000 
 1624      00000000 
 1625              	 .section .bss.acGain,"aw",%nobits
 1626              	 .align 2
 1629              	acGain:
 1630 0000 00000000 	 .space 4
 1631              	 .section .bss.acLimit,"aw",%nobits
 1632              	 .align 2
 1635              	acLimit:
 1636 0000 00000000 	 .space 4
 1637              	 .section .bss.acErrorLimit,"aw",%nobits
 1638              	 .align 2
 1641              	acErrorLimit:
 1642 0000 00000000 	 .space 4
 1643              	 .section .text.pidResetITerm,"ax",%progbits
 1644              	 .align 2
 1645              	 .global pidResetITerm
 1646              	 .thumb
 1647              	 .thumb_func
 1649              	pidResetITerm:
 1650              	.LFB572:
 360:../cleanflight/src/main/flight/pid.c **** #endif // USE_RC_SMOOTHING_FILTER
 361:../cleanflight/src/main/flight/pid.c **** 
 362:../cleanflight/src/main/flight/pid.c **** typedef struct pidCoefficient_s {
 363:../cleanflight/src/main/flight/pid.c ****     float Kp;
 364:../cleanflight/src/main/flight/pid.c ****     float Ki;
 365:../cleanflight/src/main/flight/pid.c ****     float Kd;
 366:../cleanflight/src/main/flight/pid.c ****     float Kf;
 367:../cleanflight/src/main/flight/pid.c **** } pidCoefficient_t;
 368:../cleanflight/src/main/flight/pid.c **** 
 369:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT pidCoefficient_t pidCoefficient[XYZ_AXIS_COUNT];
 370:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float maxVelocity[XYZ_AXIS_COUNT];
 371:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float feedForwardTransition;
 372:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float levelGain, horizonGain, horizonTransition, horizonCutoffDegrees, ho
 373:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float ITermWindupPointInv;
 374:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT uint8_t horizonTiltExpertMode;
 375:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT timeDelta_t crashTimeLimitUs;
 376:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT timeDelta_t crashTimeDelayUs;
 377:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT int32_t crashRecoveryAngleDeciDegrees;
 378:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float crashRecoveryRate;
 379:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float crashDtermThreshold;
 380:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float crashGyroThreshold;
 381:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float crashSetpointThreshold;
 382:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float crashLimitYaw;
 383:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float itermLimit;
 384:../cleanflight/src/main/flight/pid.c **** #if defined(USE_THROTTLE_BOOST)
 385:../cleanflight/src/main/flight/pid.c **** FAST_RAM_ZERO_INIT float throttleBoost;
 386:../cleanflight/src/main/flight/pid.c **** pt1Filter_t throttleLpf;
 387:../cleanflight/src/main/flight/pid.c **** #endif
 388:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT bool itermRotation;
 389:../cleanflight/src/main/flight/pid.c **** 
 390:../cleanflight/src/main/flight/pid.c **** #if defined(USE_SMART_FEEDFORWARD)
 391:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT bool smartFeedforward;
 392:../cleanflight/src/main/flight/pid.c **** #endif
 393:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ABSOLUTE_CONTROL)
 394:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float axisError[XYZ_AXIS_COUNT];
 395:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float acGain;
 396:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float acLimit;
 397:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float acErrorLimit;
 398:../cleanflight/src/main/flight/pid.c **** #endif
 399:../cleanflight/src/main/flight/pid.c **** 
 400:../cleanflight/src/main/flight/pid.c **** void pidResetITerm(void)
 401:../cleanflight/src/main/flight/pid.c **** {
 1651              	 .loc 4 401 0
 1652              	 .cfi_startproc
 1653              	 
 1654              	 
 1655              	 
 1656 0000 80B4     	 push {r7}
 1657              	.LCFI69:
 1658              	 .cfi_def_cfa_offset 4
 1659              	 .cfi_offset 7,-4
 1660 0002 83B0     	 sub sp,sp,#12
 1661              	.LCFI70:
 1662              	 .cfi_def_cfa_offset 16
 1663 0004 00AF     	 add r7,sp,#0
 1664              	.LCFI71:
 1665              	 .cfi_def_cfa_register 7
 1666              	.LBB11:
 402:../cleanflight/src/main/flight/pid.c ****     for (int axis = 0; axis < 3; axis++) {
 1667              	 .loc 4 402 0
 1668 0006 0023     	 movs r3,#0
 1669 0008 7B60     	 str r3,[r7,#4]
 1670 000a 13E0     	 b .L94
 1671              	.L95:
 403:../cleanflight/src/main/flight/pid.c ****         pidData[axis].I = 0.0f;
 1672              	 .loc 4 403 0 discriminator 3
 1673 000c 0D49     	 ldr r1,.L96
 1674 000e 7A68     	 ldr r2,[r7,#4]
 1675 0010 1346     	 mov r3,r2
 1676 0012 9B00     	 lsls r3,r3,#2
 1677 0014 1344     	 add r3,r3,r2
 1678 0016 9B00     	 lsls r3,r3,#2
 1679 0018 0B44     	 add r3,r3,r1
 1680 001a 4FF00002 	 mov r2,#0
 1681 001e 5A60     	 str r2,[r3,#4]
 404:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ABSOLUTE_CONTROL)
 405:../cleanflight/src/main/flight/pid.c ****         axisError[axis] = 0.0f;
 1682              	 .loc 4 405 0 discriminator 3
 1683 0020 094A     	 ldr r2,.L96+4
 1684 0022 7B68     	 ldr r3,[r7,#4]
 1685 0024 9B00     	 lsls r3,r3,#2
 1686 0026 1344     	 add r3,r3,r2
 1687 0028 4FF00002 	 mov r2,#0
 1688 002c 1A60     	 str r2,[r3]
 402:../cleanflight/src/main/flight/pid.c ****         pidData[axis].I = 0.0f;
 1689              	 .loc 4 402 0 discriminator 3
 1690 002e 7B68     	 ldr r3,[r7,#4]
 1691 0030 0133     	 adds r3,r3,#1
 1692 0032 7B60     	 str r3,[r7,#4]
 1693              	.L94:
 402:../cleanflight/src/main/flight/pid.c ****         pidData[axis].I = 0.0f;
 1694              	 .loc 4 402 0 is_stmt 0 discriminator 1
 1695 0034 7B68     	 ldr r3,[r7,#4]
 1696 0036 022B     	 cmp r3,#2
 1697 0038 E8DD     	 ble .L95
 1698              	.LBE11:
 406:../cleanflight/src/main/flight/pid.c **** #endif
 407:../cleanflight/src/main/flight/pid.c ****     }
 408:../cleanflight/src/main/flight/pid.c **** }
 1699              	 .loc 4 408 0 is_stmt 1
 1700 003a 0C37     	 adds r7,r7,#12
 1701              	.LCFI72:
 1702              	 .cfi_def_cfa_offset 4
 1703 003c BD46     	 mov sp,r7
 1704              	.LCFI73:
 1705              	 .cfi_def_cfa_register 13
 1706              	 
 1707 003e 5DF8047B 	 ldr r7,[sp],#4
 1708              	.LCFI74:
 1709              	 .cfi_restore 7
 1710              	 .cfi_def_cfa_offset 0
 1711 0042 7047     	 bx lr
 1712              	.L97:
 1713              	 .align 2
 1714              	.L96:
 1715 0044 00000000 	 .word pidData
 1716 0048 00000000 	 .word axisError
 1717              	 .cfi_endproc
 1718              	.LFE572:
 1720              	 .section .bss.acroTrainerAngleLimit,"aw",%nobits
 1721              	 .align 2
 1724              	acroTrainerAngleLimit:
 1725 0000 00000000 	 .space 4
 1726              	 .section .bss.acroTrainerLookaheadTime,"aw",%nobits
 1727              	 .align 2
 1730              	acroTrainerLookaheadTime:
 1731 0000 00000000 	 .space 4
 1732              	 .section .bss.acroTrainerDebugAxis,"aw",%nobits
 1735              	acroTrainerDebugAxis:
 1736 0000 00       	 .space 1
 1737              	 .section .bss.acroTrainerActive,"aw",%nobits
 1740              	acroTrainerActive:
 1741 0000 00       	 .space 1
 1742              	 .section .bss.acroTrainerAxisState,"aw",%nobits
 1743              	 .align 2
 1746              	acroTrainerAxisState:
 1747 0000 00000000 	 .space 8
 1747      00000000 
 1748              	 .section .bss.acroTrainerGain,"aw",%nobits
 1749              	 .align 2
 1752              	acroTrainerGain:
 1753 0000 00000000 	 .space 4
 1754              	 .section .text.pidUpdateAntiGravityThrottleFilter,"ax",%progbits
 1755              	 .align 2
 1756              	 .global pidUpdateAntiGravityThrottleFilter
 1757              	 .thumb
 1758              	 .thumb_func
 1760              	pidUpdateAntiGravityThrottleFilter:
 1761              	.LFB573:
 409:../cleanflight/src/main/flight/pid.c **** 
 410:../cleanflight/src/main/flight/pid.c **** #ifdef USE_ACRO_TRAINER
 411:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float acroTrainerAngleLimit;
 412:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float acroTrainerLookaheadTime;
 413:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT uint8_t acroTrainerDebugAxis;
 414:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT bool acroTrainerActive;
 415:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT int acroTrainerAxisState[2];  // only need roll and pitch
 416:../cleanflight/src/main/flight/pid.c **** static FAST_RAM_ZERO_INIT float acroTrainerGain;
 417:../cleanflight/src/main/flight/pid.c **** #endif // USE_ACRO_TRAINER
 418:../cleanflight/src/main/flight/pid.c **** 
 419:../cleanflight/src/main/flight/pid.c **** void pidUpdateAntiGravityThrottleFilter(float throttle)
 420:../cleanflight/src/main/flight/pid.c **** {
 1762              	 .loc 4 420 0
 1763              	 .cfi_startproc
 1764              	 
 1765              	 
 1766 0000 80B5     	 push {r7,lr}
 1767              	.LCFI75:
 1768              	 .cfi_def_cfa_offset 8
 1769              	 .cfi_offset 7,-8
 1770              	 .cfi_offset 14,-4
 1771 0002 82B0     	 sub sp,sp,#8
 1772              	.LCFI76:
 1773              	 .cfi_def_cfa_offset 16
 1774 0004 00AF     	 add r7,sp,#0
 1775              	.LCFI77:
 1776              	 .cfi_def_cfa_register 7
 1777 0006 7860     	 str r0,[r7,#4]
 421:../cleanflight/src/main/flight/pid.c ****     if (antiGravityMode == ANTI_GRAVITY_SMOOTH) {
 1778              	 .loc 4 421 0
 1779 0008 094B     	 ldr r3,.L100
 1780 000a 1B78     	 ldrb r3,[r3]
 1781 000c 002B     	 cmp r3,#0
 1782 000e 0CD1     	 bne .L98
 422:../cleanflight/src/main/flight/pid.c ****         antiGravityThrottleHpf = throttle - pt1FilterApply(&antiGravityThrottleLpf, throttle);
 1783              	 .loc 4 422 0
 1784 0010 0848     	 ldr r0,.L100+4
 1785 0012 7968     	 ldr r1,[r7,#4]
 1786 0014 FFF7FEFF 	 bl pt1FilterApply
 1787 0018 07EE100A 	 fmsr s14,r0
 1788 001c D7ED017A 	 flds s15,[r7,#4]
 1789 0020 77EEC77A 	 fsubs s15,s15,s14
 1790 0024 044B     	 ldr r3,.L100+8
 1791 0026 C3ED007A 	 fsts s15,[r3]
 1792              	.L98:
 423:../cleanflight/src/main/flight/pid.c ****     }
 424:../cleanflight/src/main/flight/pid.c **** }
 1793              	 .loc 4 424 0
 1794 002a 0837     	 adds r7,r7,#8
 1795              	.LCFI78:
 1796              	 .cfi_def_cfa_offset 8
 1797 002c BD46     	 mov sp,r7
 1798              	.LCFI79:
 1799              	 .cfi_def_cfa_register 13
 1800              	 
 1801 002e 80BD     	 pop {r7,pc}
 1802              	.L101:
 1803              	 .align 2
 1804              	.L100:
 1805 0030 00000000 	 .word antiGravityMode
 1806 0034 00000000 	 .word antiGravityThrottleLpf
 1807 0038 00000000 	 .word antiGravityThrottleHpf
 1808              	 .cfi_endproc
 1809              	.LFE573:
 1811              	 .section .text.pidInitConfig,"ax",%progbits
 1812              	 .align 2
 1813              	 .global pidInitConfig
 1814              	 .thumb
 1815              	 .thumb_func
 1817              	pidInitConfig:
 1818              	.LFB574:
 425:../cleanflight/src/main/flight/pid.c **** 
 426:../cleanflight/src/main/flight/pid.c **** void pidInitConfig(const pidProfile_t *pidProfile)
 427:../cleanflight/src/main/flight/pid.c **** {
 1819              	 .loc 4 427 0
 1820              	 .cfi_startproc
 1821              	 
 1822              	 
 1823              	 
 1824 0000 80B4     	 push {r7}
 1825              	.LCFI80:
 1826              	 .cfi_def_cfa_offset 4
 1827              	 .cfi_offset 7,-4
 1828 0002 85B0     	 sub sp,sp,#20
 1829              	.LCFI81:
 1830              	 .cfi_def_cfa_offset 24
 1831 0004 00AF     	 add r7,sp,#0
 1832              	.LCFI82:
 1833              	 .cfi_def_cfa_register 7
 1834 0006 7860     	 str r0,[r7,#4]
 428:../cleanflight/src/main/flight/pid.c ****     if (pidProfile->feedForwardTransition == 0) {
 1835              	 .loc 4 428 0
 1836 0008 7B68     	 ldr r3,[r7,#4]
 1837 000a 93F84130 	 ldrb r3,[r3,#65]
 1838 000e 002B     	 cmp r3,#0
 1839 0010 04D1     	 bne .L103
 429:../cleanflight/src/main/flight/pid.c ****         feedForwardTransition = 0;
 1840              	 .loc 4 429 0
 1841 0012 0B4B     	 ldr r3,.L108
 1842 0014 4FF00002 	 mov r2,#0
 1843 0018 1A60     	 str r2,[r3]
 1844 001a 0DE0     	 b .L104
 1845              	.L103:
 430:../cleanflight/src/main/flight/pid.c ****     } else {
 431:../cleanflight/src/main/flight/pid.c ****         feedForwardTransition = 100.0f / pidProfile->feedForwardTransition;
 1846              	 .loc 4 431 0
 1847 001c 7B68     	 ldr r3,[r7,#4]
 1848 001e 93F84130 	 ldrb r3,[r3,#65]
 1849 0022 07EE903A 	 fmsr s15,r3
 1850 0026 F8EEE77A 	 fsitos s15,s15
 1851 002a 9FED067A 	 flds s14,.L108+4
 1852 002e C7EE277A 	 fdivs s15,s14,s15
 1853 0032 034B     	 ldr r3,.L108
 1854 0034 C3ED007A 	 fsts s15,[r3]
 1855              	.L104:
 1856              	.LBB12:
 432:../cleanflight/src/main/flight/pid.c ****     }
 433:../cleanflight/src/main/flight/pid.c ****     for (int axis = FD_ROLL; axis <= FD_YAW; axis++) {
 1857              	 .loc 4 433 0
 1858 0038 0023     	 movs r3,#0
 1859 003a FB60     	 str r3,[r7,#12]
 1860 003c 69E0     	 b .L105
 1861              	.L109:
 1862 003e 00BF     	 .align 2
 1863              	.L108:
 1864 0040 00000000 	 .word feedForwardTransition
 1865 0044 0000C842 	 .word 1120403456
 1866 0048 D730033D 	 .word 1023619287
 1867              	.L106:
 434:../cleanflight/src/main/flight/pid.c ****         pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 1868              	 .loc 4 434 0 discriminator 3
 1869 004c 7968     	 ldr r1,[r7,#4]
 1870 004e FA68     	 ldr r2,[r7,#12]
 1871 0050 1346     	 mov r3,r2
 1872 0052 9B00     	 lsls r3,r3,#2
 1873 0054 1344     	 add r3,r3,r2
 1874 0056 0B44     	 add r3,r3,r1
 1875 0058 0833     	 adds r3,r3,#8
 1876 005a 1B78     	 ldrb r3,[r3]
 1877 005c 07EE903A 	 fmsr s15,r3
 1878 0060 F8EEE77A 	 fsitos s15,s15
 1879 0064 1FED087A 	 flds s14,.L108+8
 1880 0068 67EE877A 	 fmuls s15,s15,s14
 1881 006c C74A     	 ldr r2,.L110
 1882 006e FB68     	 ldr r3,[r7,#12]
 1883 0070 1B01     	 lsls r3,r3,#4
 1884 0072 1344     	 add r3,r3,r2
 1885 0074 C3ED007A 	 fsts s15,[r3]
 435:../cleanflight/src/main/flight/pid.c ****         pidCoefficient[axis].Ki = ITERM_SCALE * pidProfile->pid[axis].I;
 1886              	 .loc 4 435 0 discriminator 3
 1887 0078 7968     	 ldr r1,[r7,#4]
 1888 007a FA68     	 ldr r2,[r7,#12]
 1889 007c 1346     	 mov r3,r2
 1890 007e 9B00     	 lsls r3,r3,#2
 1891 0080 1344     	 add r3,r3,r2
 1892 0082 0B44     	 add r3,r3,r1
 1893 0084 0833     	 adds r3,r3,#8
 1894 0086 5B78     	 ldrb r3,[r3,#1]
 1895 0088 07EE903A 	 fmsr s15,r3
 1896 008c F8EEE77A 	 fsitos s15,s15
 1897 0090 9FEDBF7A 	 flds s14,.L110+4
 1898 0094 67EE877A 	 fmuls s15,s15,s14
 1899 0098 BC4A     	 ldr r2,.L110
 1900 009a FB68     	 ldr r3,[r7,#12]
 1901 009c 1B01     	 lsls r3,r3,#4
 1902 009e 1344     	 add r3,r3,r2
 1903 00a0 C3ED017A 	 fsts s15,[r3,#4]
 436:../cleanflight/src/main/flight/pid.c ****         pidCoefficient[axis].Kd = DTERM_SCALE * pidProfile->pid[axis].D;
 1904              	 .loc 4 436 0 discriminator 3
 1905 00a4 7968     	 ldr r1,[r7,#4]
 1906 00a6 FA68     	 ldr r2,[r7,#12]
 1907 00a8 1346     	 mov r3,r2
 1908 00aa 9B00     	 lsls r3,r3,#2
 1909 00ac 1344     	 add r3,r3,r2
 1910 00ae 0B44     	 add r3,r3,r1
 1911 00b0 0833     	 adds r3,r3,#8
 1912 00b2 9B78     	 ldrb r3,[r3,#2]
 1913 00b4 07EE903A 	 fmsr s15,r3
 1914 00b8 F8EEE77A 	 fsitos s15,s15
 1915 00bc 9FEDB57A 	 flds s14,.L110+8
 1916 00c0 67EE877A 	 fmuls s15,s15,s14
 1917 00c4 B14A     	 ldr r2,.L110
 1918 00c6 FB68     	 ldr r3,[r7,#12]
 1919 00c8 1B01     	 lsls r3,r3,#4
 1920 00ca 1344     	 add r3,r3,r2
 1921 00cc 0833     	 adds r3,r3,#8
 1922 00ce C3ED007A 	 fsts s15,[r3]
 437:../cleanflight/src/main/flight/pid.c ****         pidCoefficient[axis].Kf = FEEDFORWARD_SCALE * (pidProfile->pid[axis].F / 100.0f);
 1923              	 .loc 4 437 0 discriminator 3
 1924 00d2 7968     	 ldr r1,[r7,#4]
 1925 00d4 FA68     	 ldr r2,[r7,#12]
 1926 00d6 1346     	 mov r3,r2
 1927 00d8 9B00     	 lsls r3,r3,#2
 1928 00da 1344     	 add r3,r3,r2
 1929 00dc 0B44     	 add r3,r3,r1
 1930 00de 0833     	 adds r3,r3,#8
 1931 00e0 B3F80330 	 ldrh r3,[r3,#3]
 1932 00e4 9BB2     	 uxth r3,r3
 1933 00e6 07EE903A 	 fmsr s15,r3
 1934 00ea F8EEE77A 	 fsitos s15,s15
 1935 00ee 9FEDAA7A 	 flds s14,.L110+12
 1936 00f2 C7EE877A 	 fdivs s15,s15,s14
 1937 00f6 9FEDA97A 	 flds s14,.L110+16
 1938 00fa 67EE877A 	 fmuls s15,s15,s14
 1939 00fe A34A     	 ldr r2,.L110
 1940 0100 FB68     	 ldr r3,[r7,#12]
 1941 0102 1B01     	 lsls r3,r3,#4
 1942 0104 1344     	 add r3,r3,r2
 1943 0106 0833     	 adds r3,r3,#8
 1944 0108 C3ED017A 	 fsts s15,[r3,#4]
 433:../cleanflight/src/main/flight/pid.c ****         pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 1945              	 .loc 4 433 0 discriminator 3
 1946 010c FB68     	 ldr r3,[r7,#12]
 1947 010e 0133     	 adds r3,r3,#1
 1948 0110 FB60     	 str r3,[r7,#12]
 1949              	.L105:
 433:../cleanflight/src/main/flight/pid.c ****         pidCoefficient[axis].Kp = PTERM_SCALE * pidProfile->pid[axis].P;
 1950              	 .loc 4 433 0 is_stmt 0 discriminator 1
 1951 0112 FB68     	 ldr r3,[r7,#12]
 1952 0114 022B     	 cmp r3,#2
 1953 0116 99DD     	 ble .L106
 1954              	.LBE12:
 438:../cleanflight/src/main/flight/pid.c ****     }
 439:../cleanflight/src/main/flight/pid.c **** 
 440:../cleanflight/src/main/flight/pid.c ****     levelGain = pidProfile->pid[PID_LEVEL].P / 10.0f;
 1955              	 .loc 4 440 0 is_stmt 1
 1956 0118 7B68     	 ldr r3,[r7,#4]
 1957 011a DB7D     	 ldrb r3,[r3,#23]
 1958 011c 07EE903A 	 fmsr s15,r3
 1959 0120 F8EEE77A 	 fsitos s15,s15
 1960 0124 B2EE047A 	 fconsts s14,#36
 1961 0128 C7EE877A 	 fdivs s15,s15,s14
 1962 012c 9C4B     	 ldr r3,.L110+20
 1963 012e C3ED007A 	 fsts s15,[r3]
 441:../cleanflight/src/main/flight/pid.c ****     horizonGain = pidProfile->pid[PID_LEVEL].I / 10.0f;
 1964              	 .loc 4 441 0
 1965 0132 7B68     	 ldr r3,[r7,#4]
 1966 0134 1B7E     	 ldrb r3,[r3,#24]
 1967 0136 07EE903A 	 fmsr s15,r3
 1968 013a F8EEE77A 	 fsitos s15,s15
 1969 013e B2EE047A 	 fconsts s14,#36
 1970 0142 C7EE877A 	 fdivs s15,s15,s14
 1971 0146 974B     	 ldr r3,.L110+24
 1972 0148 C3ED007A 	 fsts s15,[r3]
 442:../cleanflight/src/main/flight/pid.c ****     horizonTransition = (float)pidProfile->pid[PID_LEVEL].D;
 1973              	 .loc 4 442 0
 1974 014c 7B68     	 ldr r3,[r7,#4]
 1975 014e 5B7E     	 ldrb r3,[r3,#25]
 1976 0150 07EE903A 	 fmsr s15,r3
 1977 0154 F8EE677A 	 fuitos s15,s15
 1978 0158 934B     	 ldr r3,.L110+28
 1979 015a C3ED007A 	 fsts s15,[r3]
 443:../cleanflight/src/main/flight/pid.c ****     horizonTiltExpertMode = pidProfile->horizon_tilt_expert_mode;
 1980              	 .loc 4 443 0
 1981 015e 7B68     	 ldr r3,[r7,#4]
 1982 0160 93F82A20 	 ldrb r2,[r3,#42]
 1983 0164 914B     	 ldr r3,.L110+32
 1984 0166 1A70     	 strb r2,[r3]
 444:../cleanflight/src/main/flight/pid.c ****     horizonCutoffDegrees = (175 - pidProfile->horizon_tilt_effect) * 1.8f;
 1985              	 .loc 4 444 0
 1986 0168 7B68     	 ldr r3,[r7,#4]
 1987 016a 93F82930 	 ldrb r3,[r3,#41]
 1988 016e C3F1AF03 	 rsb r3,r3,#175
 1989 0172 07EE903A 	 fmsr s15,r3
 1990 0176 F8EEE77A 	 fsitos s15,s15
 1991 017a 9FED8D7A 	 flds s14,.L110+36
 1992 017e 67EE877A 	 fmuls s15,s15,s14
 1993 0182 8C4B     	 ldr r3,.L110+40
 1994 0184 C3ED007A 	 fsts s15,[r3]
 445:../cleanflight/src/main/flight/pid.c ****     horizonFactorRatio = (100 - pidProfile->horizon_tilt_effect) * 0.01f;
 1995              	 .loc 4 445 0
 1996 0188 7B68     	 ldr r3,[r7,#4]
 1997 018a 93F82930 	 ldrb r3,[r3,#41]
 1998 018e C3F16403 	 rsb r3,r3,#100
 1999 0192 07EE903A 	 fmsr s15,r3
 2000 0196 F8EEE77A 	 fsitos s15,s15
 2001 019a 9FED877A 	 flds s14,.L110+44
 2002 019e 67EE877A 	 fmuls s15,s15,s14
 2003 01a2 864B     	 ldr r3,.L110+48
 2004 01a4 C3ED007A 	 fsts s15,[r3]
 446:../cleanflight/src/main/flight/pid.c ****     maxVelocity[FD_ROLL] = maxVelocity[FD_PITCH] = pidProfile->rateAccelLimit * 100 * dT;
 2005              	 .loc 4 446 0
 2006 01a8 7B68     	 ldr r3,[r7,#4]
 2007 01aa 5B8E     	 ldrh r3,[r3,#50]
 2008 01ac 9BB2     	 uxth r3,r3
 2009 01ae 1A46     	 mov r2,r3
 2010 01b0 6423     	 movs r3,#100
 2011 01b2 03FB02F3 	 mul r3,r3,r2
 2012 01b6 07EE903A 	 fmsr s15,r3
 2013 01ba B8EEE77A 	 fsitos s14,s15
 2014 01be 804B     	 ldr r3,.L110+52
 2015 01c0 D3ED007A 	 flds s15,[r3]
 2016 01c4 67EE277A 	 fmuls s15,s14,s15
 2017 01c8 7E4B     	 ldr r3,.L110+56
 2018 01ca C3ED017A 	 fsts s15,[r3,#4]
 2019 01ce 7D4B     	 ldr r3,.L110+56
 2020 01d0 5B68     	 ldr r3,[r3,#4]
 2021 01d2 7C4A     	 ldr r2,.L110+56
 2022 01d4 1360     	 str r3,[r2]
 447:../cleanflight/src/main/flight/pid.c ****     maxVelocity[FD_YAW] = pidProfile->yawRateAccelLimit * 100 * dT;
 2023              	 .loc 4 447 0
 2024 01d6 7B68     	 ldr r3,[r7,#4]
 2025 01d8 1B8E     	 ldrh r3,[r3,#48]
 2026 01da 9BB2     	 uxth r3,r3
 2027 01dc 1A46     	 mov r2,r3
 2028 01de 6423     	 movs r3,#100
 2029 01e0 03FB02F3 	 mul r3,r3,r2
 2030 01e4 07EE903A 	 fmsr s15,r3
 2031 01e8 B8EEE77A 	 fsitos s14,s15
 2032 01ec 744B     	 ldr r3,.L110+52
 2033 01ee D3ED007A 	 flds s15,[r3]
 2034 01f2 67EE277A 	 fmuls s15,s14,s15
 2035 01f6 734B     	 ldr r3,.L110+56
 2036 01f8 C3ED027A 	 fsts s15,[r3,#8]
 448:../cleanflight/src/main/flight/pid.c ****     const float ITermWindupPoint = (float)pidProfile->itermWindupPointPercent / 100.0f;
 2037              	 .loc 4 448 0
 2038 01fc 7B68     	 ldr r3,[r7,#4]
 2039 01fe 93F82230 	 ldrb r3,[r3,#34]
 2040 0202 07EE903A 	 fmsr s15,r3
 2041 0206 F8EE677A 	 fuitos s15,s15
 2042 020a 9FED637A 	 flds s14,.L110+12
 2043 020e C7EE877A 	 fdivs s15,s15,s14
 2044 0212 C7ED027A 	 fsts s15,[r7,#8]
 449:../cleanflight/src/main/flight/pid.c ****     ITermWindupPointInv = 1.0f / (1.0f - ITermWindupPoint);
 2045              	 .loc 4 449 0
 2046 0216 B7EE007A 	 fconsts s14,#112
 2047 021a D7ED027A 	 flds s15,[r7,#8]
 2048 021e 77EE677A 	 fsubs s15,s14,s15
 2049 0222 B7EE007A 	 fconsts s14,#112
 2050 0226 C7EE277A 	 fdivs s15,s14,s15
 2051 022a 674B     	 ldr r3,.L110+60
 2052 022c C3ED007A 	 fsts s15,[r3]
 450:../cleanflight/src/main/flight/pid.c ****     itermAcceleratorGain = pidProfile->itermAcceleratorGain;
 2053              	 .loc 4 450 0
 2054 0230 7B68     	 ldr r3,[r7,#4]
 2055 0232 DB8D     	 ldrh r3,[r3,#46]
 2056 0234 9AB2     	 uxth r2,r3
 2057 0236 654B     	 ldr r3,.L110+64
 2058 0238 1A80     	 strh r2,[r3]
 451:../cleanflight/src/main/flight/pid.c ****     crashTimeLimitUs = pidProfile->crash_time * 1000;
 2059              	 .loc 4 451 0
 2060 023a 7B68     	 ldr r3,[r7,#4]
 2061 023c 5B8F     	 ldrh r3,[r3,#58]
 2062 023e 9BB2     	 uxth r3,r3
 2063 0240 1A46     	 mov r2,r3
 2064 0242 4FF47A73 	 mov r3,#1000
 2065 0246 03FB02F3 	 mul r3,r3,r2
 2066 024a 614A     	 ldr r2,.L110+68
 2067 024c 1360     	 str r3,[r2]
 452:../cleanflight/src/main/flight/pid.c ****     crashTimeDelayUs = pidProfile->crash_delay * 1000;
 2068              	 .loc 4 452 0
 2069 024e 7B68     	 ldr r3,[r7,#4]
 2070 0250 9B8F     	 ldrh r3,[r3,#60]
 2071 0252 9BB2     	 uxth r3,r3
 2072 0254 1A46     	 mov r2,r3
 2073 0256 4FF47A73 	 mov r3,#1000
 2074 025a 03FB02F3 	 mul r3,r3,r2
 2075 025e 5D4A     	 ldr r2,.L110+72
 2076 0260 1360     	 str r3,[r2]
 453:../cleanflight/src/main/flight/pid.c ****     crashRecoveryAngleDeciDegrees = pidProfile->crash_recovery_angle * 10;
 2077              	 .loc 4 453 0
 2078 0262 7B68     	 ldr r3,[r7,#4]
 2079 0264 93F83E30 	 ldrb r3,[r3,#62]
 2080 0268 1A46     	 mov r2,r3
 2081 026a 1346     	 mov r3,r2
 2082 026c 9B00     	 lsls r3,r3,#2
 2083 026e 1344     	 add r3,r3,r2
 2084 0270 5B00     	 lsls r3,r3,#1
 2085 0272 1A46     	 mov r2,r3
 2086 0274 584B     	 ldr r3,.L110+76
 2087 0276 1A60     	 str r2,[r3]
 454:../cleanflight/src/main/flight/pid.c ****     crashRecoveryRate = pidProfile->crash_recovery_rate;
 2088              	 .loc 4 454 0
 2089 0278 7B68     	 ldr r3,[r7,#4]
 2090 027a 93F83F30 	 ldrb r3,[r3,#63]
 2091 027e 07EE903A 	 fmsr s15,r3
 2092 0282 F8EE677A 	 fuitos s15,s15
 2093 0286 554B     	 ldr r3,.L110+80
 2094 0288 C3ED007A 	 fsts s15,[r3]
 455:../cleanflight/src/main/flight/pid.c ****     crashGyroThreshold = pidProfile->crash_gthreshold;
 2095              	 .loc 4 455 0
 2096 028c 7B68     	 ldr r3,[r7,#4]
 2097 028e DB8E     	 ldrh r3,[r3,#54]
 2098 0290 9BB2     	 uxth r3,r3
 2099 0292 07EE903A 	 fmsr s15,r3
 2100 0296 F8EE677A 	 fuitos s15,s15
 2101 029a 514B     	 ldr r3,.L110+84
 2102 029c C3ED007A 	 fsts s15,[r3]
 456:../cleanflight/src/main/flight/pid.c ****     crashDtermThreshold = pidProfile->crash_dthreshold;
 2103              	 .loc 4 456 0
 2104 02a0 7B68     	 ldr r3,[r7,#4]
 2105 02a2 9B8E     	 ldrh r3,[r3,#52]
 2106 02a4 9BB2     	 uxth r3,r3
 2107 02a6 07EE903A 	 fmsr s15,r3
 2108 02aa F8EE677A 	 fuitos s15,s15
 2109 02ae 4D4B     	 ldr r3,.L110+88
 2110 02b0 C3ED007A 	 fsts s15,[r3]
 457:../cleanflight/src/main/flight/pid.c ****     crashSetpointThreshold = pidProfile->crash_setpoint_threshold;
 2111              	 .loc 4 457 0
 2112 02b4 7B68     	 ldr r3,[r7,#4]
 2113 02b6 1B8F     	 ldrh r3,[r3,#56]
 2114 02b8 9BB2     	 uxth r3,r3
 2115 02ba 07EE903A 	 fmsr s15,r3
 2116 02be F8EE677A 	 fuitos s15,s15
 2117 02c2 494B     	 ldr r3,.L110+92
 2118 02c4 C3ED007A 	 fsts s15,[r3]
 458:../cleanflight/src/main/flight/pid.c ****     crashLimitYaw = pidProfile->crash_limit_yaw;
 2119              	 .loc 4 458 0
 2120 02c8 7B68     	 ldr r3,[r7,#4]
 2121 02ca B3F84230 	 ldrh r3,[r3,#66]
 2122 02ce 9BB2     	 uxth r3,r3
 2123 02d0 07EE903A 	 fmsr s15,r3
 2124 02d4 F8EE677A 	 fuitos s15,s15
 2125 02d8 444B     	 ldr r3,.L110+96
 2126 02da C3ED007A 	 fsts s15,[r3]
 459:../cleanflight/src/main/flight/pid.c ****     itermLimit = pidProfile->itermLimit;
 2127              	 .loc 4 459 0
 2128 02de 7B68     	 ldr r3,[r7,#4]
 2129 02e0 B3F84430 	 ldrh r3,[r3,#68]
 2130 02e4 9BB2     	 uxth r3,r3
 2131 02e6 07EE903A 	 fmsr s15,r3
 2132 02ea F8EE677A 	 fuitos s15,s15
 2133 02ee 404B     	 ldr r3,.L110+100
 2134 02f0 C3ED007A 	 fsts s15,[r3]
 460:../cleanflight/src/main/flight/pid.c **** #if defined(USE_THROTTLE_BOOST)
 461:../cleanflight/src/main/flight/pid.c ****     throttleBoost = pidProfile->throttle_boost * 0.1f;
 2135              	 .loc 4 461 0
 2136 02f4 7B68     	 ldr r3,[r7,#4]
 2137 02f6 93F84930 	 ldrb r3,[r3,#73]
 2138 02fa 07EE903A 	 fmsr s15,r3
 2139 02fe F8EEE77A 	 fsitos s15,s15
 2140 0302 9FED3C7A 	 flds s14,.L110+104
 2141 0306 67EE877A 	 fmuls s15,s15,s14
 2142 030a 3B4B     	 ldr r3,.L110+108
 2143 030c C3ED007A 	 fsts s15,[r3]
 462:../cleanflight/src/main/flight/pid.c **** #endif
 463:../cleanflight/src/main/flight/pid.c ****     itermRotation = pidProfile->iterm_rotation;
 2144              	 .loc 4 463 0
 2145 0310 7B68     	 ldr r3,[r7,#4]
 2146 0312 93F84B30 	 ldrb r3,[r3,#75]
 2147 0316 002B     	 cmp r3,#0
 2148 0318 14BF     	 ite ne
 2149 031a 0123     	 movne r3,#1
 2150 031c 0023     	 moveq r3,#0
 2151 031e DAB2     	 uxtb r2,r3
 2152 0320 364B     	 ldr r3,.L110+112
 2153 0322 1A70     	 strb r2,[r3]
 464:../cleanflight/src/main/flight/pid.c ****     antiGravityMode = pidProfile->antiGravityMode;
 2154              	 .loc 4 464 0
 2155 0324 7B68     	 ldr r3,[r7,#4]
 2156 0326 93F82B20 	 ldrb r2,[r3,#43]
 2157 032a 354B     	 ldr r3,.L110+116
 2158 032c 1A70     	 strb r2,[r3]
 465:../cleanflight/src/main/flight/pid.c ****     
 466:../cleanflight/src/main/flight/pid.c ****     // Calculate the anti-gravity value that will trigger the OSD display.
 467:../cleanflight/src/main/flight/pid.c ****     // For classic AG it's either 1.0 for off and > 1.0 for on.
 468:../cleanflight/src/main/flight/pid.c ****     // For the new AG it's a continuous floating value so we want to trigger the OSD
 469:../cleanflight/src/main/flight/pid.c ****     // display when it exceeds 25% of its possible range. This gives a useful indication
 470:../cleanflight/src/main/flight/pid.c ****     // of AG activity without excessive display.
 471:../cleanflight/src/main/flight/pid.c ****     antiGravityOsdCutoff = 1.0f;
 2159              	 .loc 4 471 0
 2160 032e 354B     	 ldr r3,.L110+120
 2161 0330 4FF07E52 	 mov r2,#1065353216
 2162 0334 1A60     	 str r2,[r3]
 472:../cleanflight/src/main/flight/pid.c ****     if (antiGravityMode == ANTI_GRAVITY_SMOOTH) {
 2163              	 .loc 4 472 0
 2164 0336 324B     	 ldr r3,.L110+116
 2165 0338 1B78     	 ldrb r3,[r3]
 2166 033a 002B     	 cmp r3,#0
 2167 033c 17D1     	 bne .L107
 473:../cleanflight/src/main/flight/pid.c ****         antiGravityOsdCutoff += ((itermAcceleratorGain - 1000) / 1000.0f) * 0.25f;
 2168              	 .loc 4 473 0
 2169 033e 234B     	 ldr r3,.L110+64
 2170 0340 1B88     	 ldrh r3,[r3]
 2171 0342 A3F57A73 	 sub r3,r3,#1000
 2172 0346 07EE903A 	 fmsr s15,r3
 2173 034a F8EEE77A 	 fsitos s15,s15
 2174 034e 9FED2E7A 	 flds s14,.L110+124
 2175 0352 C7EE877A 	 fdivs s15,s15,s14
 2176 0356 B5EE007A 	 fconsts s14,#80
 2177 035a 27EE877A 	 fmuls s14,s15,s14
 2178 035e 294B     	 ldr r3,.L110+120
 2179 0360 D3ED007A 	 flds s15,[r3]
 2180 0364 77EE277A 	 fadds s15,s14,s15
 2181 0368 264B     	 ldr r3,.L110+120
 2182 036a C3ED007A 	 fsts s15,[r3]
 2183              	.L107:
 474:../cleanflight/src/main/flight/pid.c ****     }
 475:../cleanflight/src/main/flight/pid.c **** 
 476:../cleanflight/src/main/flight/pid.c **** #if defined(USE_SMART_FEEDFORWARD)
 477:../cleanflight/src/main/flight/pid.c ****     smartFeedforward = pidProfile->smart_feedforward;
 2184              	 .loc 4 477 0
 2185 036e 7B68     	 ldr r3,[r7,#4]
 2186 0370 93F84C30 	 ldrb r3,[r3,#76]
 2187 0374 002B     	 cmp r3,#0
 2188 0376 14BF     	 ite ne
 2189 0378 0123     	 movne r3,#1
 2190 037a 0023     	 moveq r3,#0
 2191 037c DAB2     	 uxtb r2,r3
 2192 037e 234B     	 ldr r3,.L110+128
 2193 0380 1A70     	 strb r2,[r3]
 478:../cleanflight/src/main/flight/pid.c **** #endif
 479:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ITERM_RELAX)
 480:../cleanflight/src/main/flight/pid.c ****     itermRelax = pidProfile->iterm_relax;
 2194              	 .loc 4 480 0
 2195 0382 7B68     	 ldr r3,[r7,#4]
 2196 0384 93F84F20 	 ldrb r2,[r3,#79]
 2197 0388 42E0     	 b .L111
 2198              	.L112:
 2199 038a 00BF     	 .align 2
 2200              	.L110:
 2201 038c 00000000 	 .word pidCoefficient
 2202 0390 033F7A3E 	 .word 1048198915
 2203 0394 97AC0A3A 	 .word 973778071
 2204 0398 0000C842 	 .word 1120403456
 2205 039c 7558613C 	 .word 1013012597
 2206 03a0 00000000 	 .word levelGain
 2207 03a4 00000000 	 .word horizonGain
 2208 03a8 00000000 	 .word horizonTransition
 2209 03ac 00000000 	 .word horizonTiltExpertMode
 2210 03b0 6666E63F 	 .word 1072064102
 2211 03b4 00000000 	 .word horizonCutoffDegrees
 2212 03b8 0AD7233C 	 .word 1008981770
 2213 03bc 00000000 	 .word horizonFactorRatio
 2214 03c0 00000000 	 .word dT
 2215 03c4 00000000 	 .word maxVelocity
 2216 03c8 00000000 	 .word ITermWindupPointInv
 2217 03cc 00000000 	 .word itermAcceleratorGain
 2218 03d0 00000000 	 .word crashTimeLimitUs
 2219 03d4 00000000 	 .word crashTimeDelayUs
 2220 03d8 00000000 	 .word crashRecoveryAngleDeciDegrees
 2221 03dc 00000000 	 .word crashRecoveryRate
 2222 03e0 00000000 	 .word crashGyroThreshold
 2223 03e4 00000000 	 .word crashDtermThreshold
 2224 03e8 00000000 	 .word crashSetpointThreshold
 2225 03ec 00000000 	 .word crashLimitYaw
 2226 03f0 00000000 	 .word itermLimit
 2227 03f4 CDCCCC3D 	 .word 1036831949
 2228 03f8 00000000 	 .word throttleBoost
 2229 03fc 00000000 	 .word itermRotation
 2230 0400 00000000 	 .word antiGravityMode
 2231 0404 00000000 	 .word antiGravityOsdCutoff
 2232 0408 00007A44 	 .word 1148846080
 2233 040c 00000000 	 .word smartFeedforward
 2234              	.L111:
 2235 0410 2D4B     	 ldr r3,.L113
 2236 0412 1A70     	 strb r2,[r3]
 481:../cleanflight/src/main/flight/pid.c ****     itermRelaxType = pidProfile->iterm_relax_type;
 2237              	 .loc 4 481 0
 2238 0414 7B68     	 ldr r3,[r7,#4]
 2239 0416 93F84D20 	 ldrb r2,[r3,#77]
 2240 041a 2C4B     	 ldr r3,.L113+4
 2241 041c 1A70     	 strb r2,[r3]
 482:../cleanflight/src/main/flight/pid.c ****     itermRelaxCutoff = pidProfile->iterm_relax_cutoff;
 2242              	 .loc 4 482 0
 2243 041e 7B68     	 ldr r3,[r7,#4]
 2244 0420 93F84E20 	 ldrb r2,[r3,#78]
 2245 0424 2A4B     	 ldr r3,.L113+8
 2246 0426 1A70     	 strb r2,[r3]
 483:../cleanflight/src/main/flight/pid.c **** #endif
 484:../cleanflight/src/main/flight/pid.c **** 
 485:../cleanflight/src/main/flight/pid.c **** #ifdef USE_ACRO_TRAINER
 486:../cleanflight/src/main/flight/pid.c ****     acroTrainerAngleLimit = pidProfile->acro_trainer_angle_limit;
 2247              	 .loc 4 486 0
 2248 0428 7B68     	 ldr r3,[r7,#4]
 2249 042a 93F85030 	 ldrb r3,[r3,#80]
 2250 042e 07EE903A 	 fmsr s15,r3
 2251 0432 F8EE677A 	 fuitos s15,s15
 2252 0436 274B     	 ldr r3,.L113+12
 2253 0438 C3ED007A 	 fsts s15,[r3]
 487:../cleanflight/src/main/flight/pid.c ****     acroTrainerLookaheadTime = (float)pidProfile->acro_trainer_lookahead_ms / 1000.0f;
 2254              	 .loc 4 487 0
 2255 043c 7B68     	 ldr r3,[r7,#4]
 2256 043e B3F85330 	 ldrh r3,[r3,#83]
 2257 0442 9BB2     	 uxth r3,r3
 2258 0444 07EE903A 	 fmsr s15,r3
 2259 0448 F8EE677A 	 fuitos s15,s15
 2260 044c 9FED227A 	 flds s14,.L113+16
 2261 0450 C7EE877A 	 fdivs s15,s15,s14
 2262 0454 214B     	 ldr r3,.L113+20
 2263 0456 C3ED007A 	 fsts s15,[r3]
 488:../cleanflight/src/main/flight/pid.c ****     acroTrainerDebugAxis = pidProfile->acro_trainer_debug_axis;
 2264              	 .loc 4 488 0
 2265 045a 7B68     	 ldr r3,[r7,#4]
 2266 045c 93F85120 	 ldrb r2,[r3,#81]
 2267 0460 1F4B     	 ldr r3,.L113+24
 2268 0462 1A70     	 strb r2,[r3]
 489:../cleanflight/src/main/flight/pid.c ****     acroTrainerGain = (float)pidProfile->acro_trainer_gain / 10.0f;
 2269              	 .loc 4 489 0
 2270 0464 7B68     	 ldr r3,[r7,#4]
 2271 0466 93F85230 	 ldrb r3,[r3,#82]
 2272 046a 07EE903A 	 fmsr s15,r3
 2273 046e F8EE677A 	 fuitos s15,s15
 2274 0472 B2EE047A 	 fconsts s14,#36
 2275 0476 C7EE877A 	 fdivs s15,s15,s14
 2276 047a 1A4B     	 ldr r3,.L113+28
 2277 047c C3ED007A 	 fsts s15,[r3]
 490:../cleanflight/src/main/flight/pid.c **** #endif // USE_ACRO_TRAINER
 491:../cleanflight/src/main/flight/pid.c **** 
 492:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ABSOLUTE_CONTROL)
 493:../cleanflight/src/main/flight/pid.c ****     acGain = (float)pidProfile->abs_control_gain;
 2278              	 .loc 4 493 0
 2279 0480 7B68     	 ldr r3,[r7,#4]
 2280 0482 93F85530 	 ldrb r3,[r3,#85]
 2281 0486 07EE903A 	 fmsr s15,r3
 2282 048a F8EE677A 	 fuitos s15,s15
 2283 048e 164B     	 ldr r3,.L113+32
 2284 0490 C3ED007A 	 fsts s15,[r3]
 494:../cleanflight/src/main/flight/pid.c ****     acLimit = (float)pidProfile->abs_control_limit;
 2285              	 .loc 4 494 0
 2286 0494 7B68     	 ldr r3,[r7,#4]
 2287 0496 93F85630 	 ldrb r3,[r3,#86]
 2288 049a 07EE903A 	 fmsr s15,r3
 2289 049e F8EE677A 	 fuitos s15,s15
 2290 04a2 124B     	 ldr r3,.L113+36
 2291 04a4 C3ED007A 	 fsts s15,[r3]
 495:../cleanflight/src/main/flight/pid.c ****     acErrorLimit = (float)pidProfile->abs_control_error_limit;
 2292              	 .loc 4 495 0
 2293 04a8 7B68     	 ldr r3,[r7,#4]
 2294 04aa 93F85730 	 ldrb r3,[r3,#87]
 2295 04ae 07EE903A 	 fmsr s15,r3
 2296 04b2 F8EE677A 	 fuitos s15,s15
 2297 04b6 0E4B     	 ldr r3,.L113+40
 2298 04b8 C3ED007A 	 fsts s15,[r3]
 496:../cleanflight/src/main/flight/pid.c **** #endif
 497:../cleanflight/src/main/flight/pid.c **** }
 2299              	 .loc 4 497 0
 2300 04bc 1437     	 adds r7,r7,#20
 2301              	.LCFI83:
 2302              	 .cfi_def_cfa_offset 4
 2303 04be BD46     	 mov sp,r7
 2304              	.LCFI84:
 2305              	 .cfi_def_cfa_register 13
 2306              	 
 2307 04c0 5DF8047B 	 ldr r7,[sp],#4
 2308              	.LCFI85:
 2309              	 .cfi_restore 7
 2310              	 .cfi_def_cfa_offset 0
 2311 04c4 7047     	 bx lr
 2312              	.L114:
 2313 04c6 00BF     	 .align 2
 2314              	.L113:
 2315 04c8 00000000 	 .word itermRelax
 2316 04cc 00000000 	 .word itermRelaxType
 2317 04d0 00000000 	 .word itermRelaxCutoff
 2318 04d4 00000000 	 .word acroTrainerAngleLimit
 2319 04d8 00007A44 	 .word 1148846080
 2320 04dc 00000000 	 .word acroTrainerLookaheadTime
 2321 04e0 00000000 	 .word acroTrainerDebugAxis
 2322 04e4 00000000 	 .word acroTrainerGain
 2323 04e8 00000000 	 .word acGain
 2324 04ec 00000000 	 .word acLimit
 2325 04f0 00000000 	 .word acErrorLimit
 2326              	 .cfi_endproc
 2327              	.LFE574:
 2329              	 .section .text.pidInit,"ax",%progbits
 2330              	 .align 2
 2331              	 .global pidInit
 2332              	 .thumb
 2333              	 .thumb_func
 2335              	pidInit:
 2336              	.LFB575:
 498:../cleanflight/src/main/flight/pid.c **** 
 499:../cleanflight/src/main/flight/pid.c **** void pidInit(const pidProfile_t *pidProfile)
 500:../cleanflight/src/main/flight/pid.c **** {
 2337              	 .loc 4 500 0
 2338              	 .cfi_startproc
 2339              	 
 2340              	 
 2341 0000 90B5     	 push {r4,r7,lr}
 2342              	.LCFI86:
 2343              	 .cfi_def_cfa_offset 12
 2344              	 .cfi_offset 4,-12
 2345              	 .cfi_offset 7,-8
 2346              	 .cfi_offset 14,-4
 2347 0002 83B0     	 sub sp,sp,#12
 2348              	.LCFI87:
 2349              	 .cfi_def_cfa_offset 24
 2350 0004 00AF     	 add r7,sp,#0
 2351              	.LCFI88:
 2352              	 .cfi_def_cfa_register 7
 2353 0006 7860     	 str r0,[r7,#4]
 501:../cleanflight/src/main/flight/pid.c ****     pidSetTargetLooptime(gyro.targetLooptime * pidConfig()->pid_process_denom); // Initialize pid l
 2354              	 .loc 4 501 0
 2355 0008 094B     	 ldr r3,.L116
 2356 000a 1C68     	 ldr r4,[r3]
 2357 000c FFF7FEFF 	 bl pidConfig
 2358 0010 0346     	 mov r3,r0
 2359 0012 1B78     	 ldrb r3,[r3]
 2360 0014 03FB04F3 	 mul r3,r3,r4
 2361 0018 1846     	 mov r0,r3
 2362 001a FFF7FEFF 	 bl pidSetTargetLooptime
 502:../cleanflight/src/main/flight/pid.c ****     pidInitFilters(pidProfile);
 2363              	 .loc 4 502 0
 2364 001e 7868     	 ldr r0,[r7,#4]
 2365 0020 FFF7FEFF 	 bl pidInitFilters
 503:../cleanflight/src/main/flight/pid.c ****     pidInitConfig(pidProfile);
 2366              	 .loc 4 503 0
 2367 0024 7868     	 ldr r0,[r7,#4]
 2368 0026 FFF7FEFF 	 bl pidInitConfig
 504:../cleanflight/src/main/flight/pid.c **** }
 2369              	 .loc 4 504 0
 2370 002a 0C37     	 adds r7,r7,#12
 2371              	.LCFI89:
 2372              	 .cfi_def_cfa_offset 12
 2373 002c BD46     	 mov sp,r7
 2374              	.LCFI90:
 2375              	 .cfi_def_cfa_register 13
 2376              	 
 2377 002e 90BD     	 pop {r4,r7,pc}
 2378              	.L117:
 2379              	 .align 2
 2380              	.L116:
 2381 0030 00000000 	 .word gyro
 2382              	 .cfi_endproc
 2383              	.LFE575:
 2385              	 .section .text.pidAcroTrainerInit,"ax",%progbits
 2386              	 .align 2
 2387              	 .global pidAcroTrainerInit
 2388              	 .thumb
 2389              	 .thumb_func
 2391              	pidAcroTrainerInit:
 2392              	.LFB576:
 505:../cleanflight/src/main/flight/pid.c **** 
 506:../cleanflight/src/main/flight/pid.c **** #ifdef USE_ACRO_TRAINER
 507:../cleanflight/src/main/flight/pid.c **** void pidAcroTrainerInit(void)
 508:../cleanflight/src/main/flight/pid.c **** {
 2393              	 .loc 4 508 0
 2394              	 .cfi_startproc
 2395              	 
 2396              	 
 2397              	 
 2398 0000 80B4     	 push {r7}
 2399              	.LCFI91:
 2400              	 .cfi_def_cfa_offset 4
 2401              	 .cfi_offset 7,-4
 2402 0002 00AF     	 add r7,sp,#0
 2403              	.LCFI92:
 2404              	 .cfi_def_cfa_register 7
 509:../cleanflight/src/main/flight/pid.c ****     acroTrainerAxisState[FD_ROLL] = 0;
 2405              	 .loc 4 509 0
 2406 0004 044B     	 ldr r3,.L119
 2407 0006 0022     	 movs r2,#0
 2408 0008 1A60     	 str r2,[r3]
 510:../cleanflight/src/main/flight/pid.c ****     acroTrainerAxisState[FD_PITCH] = 0;
 2409              	 .loc 4 510 0
 2410 000a 034B     	 ldr r3,.L119
 2411 000c 0022     	 movs r2,#0
 2412 000e 5A60     	 str r2,[r3,#4]
 511:../cleanflight/src/main/flight/pid.c **** }
 2413              	 .loc 4 511 0
 2414 0010 BD46     	 mov sp,r7
 2415              	.LCFI93:
 2416              	 .cfi_def_cfa_register 13
 2417              	 
 2418 0012 5DF8047B 	 ldr r7,[sp],#4
 2419              	.LCFI94:
 2420              	 .cfi_restore 7
 2421              	 .cfi_def_cfa_offset 0
 2422 0016 7047     	 bx lr
 2423              	.L120:
 2424              	 .align 2
 2425              	.L119:
 2426 0018 00000000 	 .word acroTrainerAxisState
 2427              	 .cfi_endproc
 2428              	.LFE576:
 2430              	 .section .text.pidCopyProfile,"ax",%progbits
 2431              	 .align 2
 2432              	 .global pidCopyProfile
 2433              	 .thumb
 2434              	 .thumb_func
 2436              	pidCopyProfile:
 2437              	.LFB577:
 512:../cleanflight/src/main/flight/pid.c **** #endif // USE_ACRO_TRAINER
 513:../cleanflight/src/main/flight/pid.c **** 
 514:../cleanflight/src/main/flight/pid.c **** void pidCopyProfile(uint8_t dstPidProfileIndex, uint8_t srcPidProfileIndex)
 515:../cleanflight/src/main/flight/pid.c **** {
 2438              	 .loc 4 515 0
 2439              	 .cfi_startproc
 2440              	 
 2441              	 
 2442 0000 90B5     	 push {r4,r7,lr}
 2443              	.LCFI95:
 2444              	 .cfi_def_cfa_offset 12
 2445              	 .cfi_offset 4,-12
 2446              	 .cfi_offset 7,-8
 2447              	 .cfi_offset 14,-4
 2448 0002 83B0     	 sub sp,sp,#12
 2449              	.LCFI96:
 2450              	 .cfi_def_cfa_offset 24
 2451 0004 00AF     	 add r7,sp,#0
 2452              	.LCFI97:
 2453              	 .cfi_def_cfa_register 7
 2454 0006 0346     	 mov r3,r0
 2455 0008 0A46     	 mov r2,r1
 2456 000a FB71     	 strb r3,[r7,#7]
 2457 000c 1346     	 mov r3,r2
 2458 000e BB71     	 strb r3,[r7,#6]
 516:../cleanflight/src/main/flight/pid.c ****     if ((dstPidProfileIndex < MAX_PROFILE_COUNT-1 && srcPidProfileIndex < MAX_PROFILE_COUNT-1)
 2459              	 .loc 4 516 0
 2460 0010 FB79     	 ldrb r3,[r7,#7]
 2461 0012 012B     	 cmp r3,#1
 2462 0014 15D8     	 bhi .L121
 2463              	 .loc 4 516 0 is_stmt 0 discriminator 1
 2464 0016 BB79     	 ldrb r3,[r7,#6]
 2465 0018 012B     	 cmp r3,#1
 2466 001a 12D8     	 bhi .L121
 517:../cleanflight/src/main/flight/pid.c ****         && dstPidProfileIndex != srcPidProfileIndex
 2467              	 .loc 4 517 0 is_stmt 1
 2468 001c FA79     	 ldrb r2,[r7,#7]
 2469 001e BB79     	 ldrb r3,[r7,#6]
 2470 0020 9A42     	 cmp r2,r3
 2471 0022 0ED0     	 beq .L121
 518:../cleanflight/src/main/flight/pid.c ****     ) {
 519:../cleanflight/src/main/flight/pid.c ****         memcpy(pidProfilesMutable(dstPidProfileIndex), pidProfilesMutable(srcPidProfileIndex), size
 2472              	 .loc 4 519 0
 2473 0024 FB79     	 ldrb r3,[r7,#7]
 2474 0026 1846     	 mov r0,r3
 2475 0028 FFF7FEFF 	 bl pidProfilesMutable
 2476 002c 0446     	 mov r4,r0
 2477 002e BB79     	 ldrb r3,[r7,#6]
 2478 0030 1846     	 mov r0,r3
 2479 0032 FFF7FEFF 	 bl pidProfilesMutable
 2480 0036 0346     	 mov r3,r0
 2481 0038 2046     	 mov r0,r4
 2482 003a 1946     	 mov r1,r3
 2483 003c 5822     	 movs r2,#88
 2484 003e FFF7FEFF 	 bl memcpy
 2485              	.L121:
 520:../cleanflight/src/main/flight/pid.c ****     }
 521:../cleanflight/src/main/flight/pid.c **** }
 2486              	 .loc 4 521 0
 2487 0042 0C37     	 adds r7,r7,#12
 2488              	.LCFI98:
 2489              	 .cfi_def_cfa_offset 12
 2490 0044 BD46     	 mov sp,r7
 2491              	.LCFI99:
 2492              	 .cfi_def_cfa_register 13
 2493              	 
 2494 0046 90BD     	 pop {r4,r7,pc}
 2495              	 .cfi_endproc
 2496              	.LFE577:
 2498              	 .section .text.calcHorizonLevelStrength,"ax",%progbits
 2499              	 .align 2
 2500              	 .thumb
 2501              	 .thumb_func
 2503              	calcHorizonLevelStrength:
 2504              	.LFB578:
 522:../cleanflight/src/main/flight/pid.c **** 
 523:../cleanflight/src/main/flight/pid.c **** // calculates strength of horizon leveling; 0 = none, 1.0 = most leveling
 524:../cleanflight/src/main/flight/pid.c **** static float calcHorizonLevelStrength(void)
 525:../cleanflight/src/main/flight/pid.c **** {
 2505              	 .loc 4 525 0
 2506              	 .cfi_startproc
 2507              	 
 2508              	 
 2509 0000 80B5     	 push {r7,lr}
 2510              	.LCFI100:
 2511              	 .cfi_def_cfa_offset 8
 2512              	 .cfi_offset 7,-8
 2513              	 .cfi_offset 14,-4
 2514 0002 8CB0     	 sub sp,sp,#48
 2515              	.LCFI101:
 2516              	 .cfi_def_cfa_offset 56
 2517 0004 00AF     	 add r7,sp,#0
 2518              	.LCFI102:
 2519              	 .cfi_def_cfa_register 7
 2520              	.LBB13:
 526:../cleanflight/src/main/flight/pid.c ****     // start with 1.0 at center stick, 0.0 at max stick deflection:
 527:../cleanflight/src/main/flight/pid.c ****     float horizonLevelStrength = 1.0f - MAX(getRcDeflectionAbs(FD_ROLL), getRcDeflectionAbs(FD_PITC
 2521              	 .loc 4 527 0
 2522 0006 0020     	 movs r0,#0
 2523 0008 FFF7FEFF 	 bl getRcDeflectionAbs
 2524 000c 7862     	 str r0,[r7,#36]
 2525 000e 0120     	 movs r0,#1
 2526 0010 FFF7FEFF 	 bl getRcDeflectionAbs
 2527 0014 3862     	 str r0,[r7,#32]
 2528 0016 97ED097A 	 flds s14,[r7,#36]
 2529 001a D7ED087A 	 flds s15,[r7,#32]
 2530 001e B4EEE77A 	 fcmpes s14,s15
 2531 0022 F1EE10FA 	 fmstat
 2532 0026 02DD     	 ble .L144
 2533              	 .loc 4 527 0 is_stmt 0 discriminator 1
 2534 0028 D7ED097A 	 flds s15,[r7,#36]
 2535 002c 01E0     	 b .L126
 2536              	.L144:
 2537              	 .loc 4 527 0 discriminator 2
 2538 002e D7ED087A 	 flds s15,[r7,#32]
 2539              	.L126:
 2540              	.LBE13:
 2541              	 .loc 4 527 0 discriminator 4
 2542 0032 B7EE007A 	 fconsts s14,#112
 2543 0036 77EE677A 	 fsubs s15,s14,s15
 2544 003a C7ED0B7A 	 fsts s15,[r7,#44]
 2545              	.LBB14:
 2546              	.LBB15:
 528:../cleanflight/src/main/flight/pid.c **** 
 529:../cleanflight/src/main/flight/pid.c ****     // 0 at level, 90 at vertical, 180 at inverted (degrees):
 530:../cleanflight/src/main/flight/pid.c ****     const float currentInclination = MAX(ABS(attitude.values.roll), ABS(attitude.values.pitch)) / 1
 2547              	 .loc 4 530 0 is_stmt 1 discriminator 4
 2548 003e 6C4B     	 ldr r3,.L147
 2549 0040 1A78     	 ldrb r2,[r3]
 2550 0042 5B78     	 ldrb r3,[r3,#1]
 2551 0044 1B02     	 lsls r3,r3,#8
 2552 0046 1343     	 orrs r3,r3,r2
 2553 0048 1B04     	 lsls r3,r3,#16
 2554 004a 1B14     	 asrs r3,r3,#16
 2555 004c FB83     	 strh r3,[r7,#30]
 2556 004e B7F91E30 	 ldrsh r3,[r7,#30]
 2557 0052 002B     	 cmp r3,#0
 2558 0054 B8BF     	 it lt
 2559 0056 5B42     	 rsblt r3,r3,#0
 2560              	.LBE15:
 2561 0058 BB61     	 str r3,[r7,#24]
 2562              	.LBB16:
 2563 005a 654B     	 ldr r3,.L147
 2564 005c 9A78     	 ldrb r2,[r3,#2]
 2565 005e DB78     	 ldrb r3,[r3,#3]
 2566 0060 1B02     	 lsls r3,r3,#8
 2567 0062 1343     	 orrs r3,r3,r2
 2568 0064 1B04     	 lsls r3,r3,#16
 2569 0066 1B14     	 asrs r3,r3,#16
 2570 0068 FB82     	 strh r3,[r7,#22]
 2571 006a B7F91630 	 ldrsh r3,[r7,#22]
 2572 006e 002B     	 cmp r3,#0
 2573 0070 B8BF     	 it lt
 2574 0072 5B42     	 rsblt r3,r3,#0
 2575              	.LBE16:
 2576 0074 3B61     	 str r3,[r7,#16]
 2577 0076 3A69     	 ldr r2,[r7,#16]
 2578 0078 BB69     	 ldr r3,[r7,#24]
 2579 007a 9342     	 cmp r3,r2
 2580 007c B8BF     	 it lt
 2581 007e 1346     	 movlt r3,r2
 2582              	.LBE14:
 2583 0080 07EE903A 	 fmsr s15,r3
 2584 0084 F8EEE77A 	 fsitos s15,s15
 2585 0088 B2EE047A 	 fconsts s14,#36
 2586 008c C7EE877A 	 fdivs s15,s15,s14
 2587 0090 C7ED037A 	 fsts s15,[r7,#12]
 531:../cleanflight/src/main/flight/pid.c **** 
 532:../cleanflight/src/main/flight/pid.c ****     // horizonTiltExpertMode:  0 = leveling always active when sticks centered,
 533:../cleanflight/src/main/flight/pid.c ****     //                         1 = leveling can be totally off when inverted
 534:../cleanflight/src/main/flight/pid.c ****     if (horizonTiltExpertMode) {
 2588              	 .loc 4 534 0 discriminator 4
 2589 0094 574B     	 ldr r3,.L147+4
 2590 0096 1B78     	 ldrb r3,[r3]
 2591 0098 002B     	 cmp r3,#0
 2592 009a 48D0     	 beq .L127
 535:../cleanflight/src/main/flight/pid.c ****         if (horizonTransition > 0 && horizonCutoffDegrees > 0) {
 2593              	 .loc 4 535 0
 2594 009c 564B     	 ldr r3,.L147+8
 2595 009e D3ED007A 	 flds s15,[r3]
 2596 00a2 F5EEC07A 	 fcmpezs s15
 2597 00a6 F1EE10FA 	 fmstat
 2598 00aa 3CDD     	 ble .L128
 2599              	 .loc 4 535 0 is_stmt 0 discriminator 1
 2600 00ac 534B     	 ldr r3,.L147+12
 2601 00ae D3ED007A 	 flds s15,[r3]
 2602 00b2 F5EEC07A 	 fcmpezs s15
 2603 00b6 F1EE10FA 	 fmstat
 2604 00ba 34DD     	 ble .L128
 2605              	.LBB17:
 536:../cleanflight/src/main/flight/pid.c ****                     // if d_level > 0 and horizonTiltEffect < 175
 537:../cleanflight/src/main/flight/pid.c ****             // horizonCutoffDegrees: 0 to 125 => 270 to 90 (represents where leveling goes to zero)
 538:../cleanflight/src/main/flight/pid.c ****             // inclinationLevelRatio (0.0 to 1.0) is smaller (less leveling)
 539:../cleanflight/src/main/flight/pid.c ****             //  for larger inclinations; 0.0 at horizonCutoffDegrees value:
 540:../cleanflight/src/main/flight/pid.c ****             const float inclinationLevelRatio = constrainf((horizonCutoffDegrees-currentInclination
 2606              	 .loc 4 540 0 is_stmt 1
 2607 00bc 4F4B     	 ldr r3,.L147+12
 2608 00be 93ED007A 	 flds s14,[r3]
 2609 00c2 D7ED037A 	 flds s15,[r7,#12]
 2610 00c6 37EE677A 	 fsubs s14,s14,s15
 2611 00ca 4C4B     	 ldr r3,.L147+12
 2612 00cc D3ED007A 	 flds s15,[r3]
 2613 00d0 C7EE277A 	 fdivs s15,s14,s15
 2614 00d4 B0EE670A 	 fcpys s0,s15
 2615 00d8 DFED490A 	 flds s1,.L147+16
 2616 00dc B7EE001A 	 fconsts s2,#112
 2617 00e0 FFF7FEFF 	 bl constrainf
 2618 00e4 87ED020A 	 fsts s0,[r7,#8]
 541:../cleanflight/src/main/flight/pid.c ****             // apply configured horizon sensitivity:
 542:../cleanflight/src/main/flight/pid.c ****                 // when stick is near center (horizonLevelStrength ~= 1.0)
 543:../cleanflight/src/main/flight/pid.c ****                 //  H_sensitivity value has little effect,
 544:../cleanflight/src/main/flight/pid.c ****                 // when stick is deflected (horizonLevelStrength near 0.0)
 545:../cleanflight/src/main/flight/pid.c ****                 //  H_sensitivity value has more effect:
 546:../cleanflight/src/main/flight/pid.c ****             horizonLevelStrength = (horizonLevelStrength - 1) * 100 / horizonTransition + 1;
 2619              	 .loc 4 546 0
 2620 00e8 D7ED0B7A 	 flds s15,[r7,#44]
 2621 00ec B7EE007A 	 fconsts s14,#112
 2622 00f0 77EEC77A 	 fsubs s15,s15,s14
 2623 00f4 9FED437A 	 flds s14,.L147+20
 2624 00f8 27EE877A 	 fmuls s14,s15,s14
 2625 00fc 3E4B     	 ldr r3,.L147+8
 2626 00fe D3ED007A 	 flds s15,[r3]
 2627 0102 C7EE277A 	 fdivs s15,s14,s15
 2628 0106 B7EE007A 	 fconsts s14,#112
 2629 010a 77EE877A 	 fadds s15,s15,s14
 2630 010e C7ED0B7A 	 fsts s15,[r7,#44]
 547:../cleanflight/src/main/flight/pid.c ****             // apply inclination ratio, which may lower leveling
 548:../cleanflight/src/main/flight/pid.c ****             //  to zero regardless of stick position:
 549:../cleanflight/src/main/flight/pid.c ****             horizonLevelStrength *= inclinationLevelRatio;
 2631              	 .loc 4 549 0
 2632 0112 97ED0B7A 	 flds s14,[r7,#44]
 2633 0116 D7ED027A 	 flds s15,[r7,#8]
 2634 011a 67EE277A 	 fmuls s15,s14,s15
 2635 011e C7ED0B7A 	 fsts s15,[r7,#44]
 2636              	.LBE17:
 535:../cleanflight/src/main/flight/pid.c ****                     // if d_level > 0 and horizonTiltEffect < 175
 2637              	 .loc 4 535 0
 2638 0122 00BF     	 nop
 2639 0124 53E0     	 b .L132
 2640              	.L128:
 550:../cleanflight/src/main/flight/pid.c ****         } else  { // d_level=0 or horizon_tilt_effect>=175 means no leveling
 551:../cleanflight/src/main/flight/pid.c ****           horizonLevelStrength = 0;
 2641              	 .loc 4 551 0
 2642 0126 4FF00003 	 mov r3,#0
 2643 012a FB62     	 str r3,[r7,#44]
 2644 012c 4FE0     	 b .L132
 2645              	.L127:
 2646              	.LBB18:
 552:../cleanflight/src/main/flight/pid.c ****         }
 553:../cleanflight/src/main/flight/pid.c ****     } else { // horizon_tilt_expert_mode = 0 (leveling always active when sticks centered)
 554:../cleanflight/src/main/flight/pid.c ****         float sensitFact;
 555:../cleanflight/src/main/flight/pid.c ****         if (horizonFactorRatio < 1.01f) { // if horizonTiltEffect > 0
 2647              	 .loc 4 555 0
 2648 012e 364B     	 ldr r3,.L147+24
 2649 0130 D3ED007A 	 flds s15,[r3]
 2650 0134 9FED357A 	 flds s14,.L147+28
 2651 0138 F4EEC77A 	 fcmpes s15,s14
 2652 013c F1EE10FA 	 fmstat
 2653 0140 23D5     	 bpl .L145
 2654              	.LBB19:
 556:../cleanflight/src/main/flight/pid.c ****             // horizonFactorRatio: 1.0 to 0.0 (larger means more leveling)
 557:../cleanflight/src/main/flight/pid.c ****             // inclinationLevelRatio (0.0 to 1.0) is smaller (less leveling)
 558:../cleanflight/src/main/flight/pid.c ****             //  for larger inclinations, goes to 1.0 at inclination==level:
 559:../cleanflight/src/main/flight/pid.c ****             const float inclinationLevelRatio = (180-currentInclination)/180 * (1.0f-horizonFactorR
 2655              	 .loc 4 559 0
 2656 0142 9FED337A 	 flds s14,.L147+32
 2657 0146 D7ED037A 	 flds s15,[r7,#12]
 2658 014a 77EE677A 	 fsubs s15,s14,s15
 2659 014e 9FED307A 	 flds s14,.L147+32
 2660 0152 87EE877A 	 fdivs s14,s15,s14
 2661 0156 2C4B     	 ldr r3,.L147+24
 2662 0158 D3ED007A 	 flds s15,[r3]
 2663 015c F7EE006A 	 fconsts s13,#112
 2664 0160 76EEE77A 	 fsubs s15,s13,s15
 2665 0164 27EE277A 	 fmuls s14,s14,s15
 2666 0168 274B     	 ldr r3,.L147+24
 2667 016a D3ED007A 	 flds s15,[r3]
 2668 016e 77EE277A 	 fadds s15,s14,s15
 2669 0172 C7ED017A 	 fsts s15,[r7,#4]
 560:../cleanflight/src/main/flight/pid.c ****             // apply ratio to configured horizon sensitivity:
 561:../cleanflight/src/main/flight/pid.c ****             sensitFact = horizonTransition * inclinationLevelRatio;
 2670              	 .loc 4 561 0
 2671 0176 204B     	 ldr r3,.L147+8
 2672 0178 93ED007A 	 flds s14,[r3]
 2673 017c D7ED017A 	 flds s15,[r7,#4]
 2674 0180 67EE277A 	 fmuls s15,s14,s15
 2675 0184 C7ED0A7A 	 fsts s15,[r7,#40]
 2676              	.LBE19:
 2677 0188 02E0     	 b .L135
 2678              	.L145:
 562:../cleanflight/src/main/flight/pid.c ****         } else { // horizonTiltEffect=0 for "old" functionality
 563:../cleanflight/src/main/flight/pid.c ****             sensitFact = horizonTransition;
 2679              	 .loc 4 563 0
 2680 018a 1B4B     	 ldr r3,.L147+8
 2681 018c 1B68     	 ldr r3,[r3]
 2682 018e BB62     	 str r3,[r7,#40]
 2683              	.L135:
 564:../cleanflight/src/main/flight/pid.c ****         }
 565:../cleanflight/src/main/flight/pid.c **** 
 566:../cleanflight/src/main/flight/pid.c ****         if (sensitFact <= 0) {           // zero means no leveling
 2684              	 .loc 4 566 0
 2685 0190 D7ED0A7A 	 flds s15,[r7,#40]
 2686 0194 F5EEC07A 	 fcmpezs s15
 2687 0198 F1EE10FA 	 fmstat
 2688 019c 03D8     	 bhi .L146
 567:../cleanflight/src/main/flight/pid.c ****             horizonLevelStrength = 0;
 2689              	 .loc 4 567 0
 2690 019e 4FF00003 	 mov r3,#0
 2691 01a2 FB62     	 str r3,[r7,#44]
 2692 01a4 13E0     	 b .L132
 2693              	.L146:
 568:../cleanflight/src/main/flight/pid.c ****         } else {
 569:../cleanflight/src/main/flight/pid.c ****             // when stick is near center (horizonLevelStrength ~= 1.0)
 570:../cleanflight/src/main/flight/pid.c ****             //  sensitFact value has little effect,
 571:../cleanflight/src/main/flight/pid.c ****             // when stick is deflected (horizonLevelStrength near 0.0)
 572:../cleanflight/src/main/flight/pid.c ****             //  sensitFact value has more effect:
 573:../cleanflight/src/main/flight/pid.c ****             horizonLevelStrength = ((horizonLevelStrength - 1) * (100 / sensitFact)) + 1;
 2694              	 .loc 4 573 0
 2695 01a6 D7ED0B7A 	 flds s15,[r7,#44]
 2696 01aa B7EE007A 	 fconsts s14,#112
 2697 01ae 37EEC77A 	 fsubs s14,s15,s14
 2698 01b2 DFED146A 	 flds s13,.L147+20
 2699 01b6 D7ED0A7A 	 flds s15,[r7,#40]
 2700 01ba C6EEA77A 	 fdivs s15,s13,s15
 2701 01be 67EE277A 	 fmuls s15,s14,s15
 2702 01c2 B7EE007A 	 fconsts s14,#112
 2703 01c6 77EE877A 	 fadds s15,s15,s14
 2704 01ca C7ED0B7A 	 fsts s15,[r7,#44]
 2705              	.L132:
 2706              	.LBE18:
 574:../cleanflight/src/main/flight/pid.c ****         }
 575:../cleanflight/src/main/flight/pid.c ****     }
 576:../cleanflight/src/main/flight/pid.c ****     return constrainf(horizonLevelStrength, 0, 1);
 2707              	 .loc 4 576 0
 2708 01ce 97ED0B0A 	 flds s0,[r7,#44]
 2709 01d2 DFED0B0A 	 flds s1,.L147+16
 2710 01d6 B7EE001A 	 fconsts s2,#112
 2711 01da FFF7FEFF 	 bl constrainf
 2712 01de F0EE407A 	 fcpys s15,s0
 2713 01e2 17EE903A 	 fmrs r3,s15
 577:../cleanflight/src/main/flight/pid.c **** }
 2714              	 .loc 4 577 0
 2715 01e6 1846     	 mov r0,r3
 2716 01e8 3037     	 adds r7,r7,#48
 2717              	.LCFI103:
 2718              	 .cfi_def_cfa_offset 8
 2719 01ea BD46     	 mov sp,r7
 2720              	.LCFI104:
 2721              	 .cfi_def_cfa_register 13
 2722              	 
 2723 01ec 80BD     	 pop {r7,pc}
 2724              	.L148:
 2725 01ee 00BF     	 .align 2
 2726              	.L147:
 2727 01f0 00000000 	 .word attitude
 2728 01f4 00000000 	 .word horizonTiltExpertMode
 2729 01f8 00000000 	 .word horizonTransition
 2730 01fc 00000000 	 .word horizonCutoffDegrees
 2731 0200 00000000 	 .word 0
 2732 0204 0000C842 	 .word 1120403456
 2733 0208 00000000 	 .word horizonFactorRatio
 2734 020c AE47813F 	 .word 1065437102
 2735 0210 00003443 	 .word 1127481344
 2736              	 .cfi_endproc
 2737              	.LFE578:
 2739              	 .section .text.pidLevel,"ax",%progbits
 2740              	 .align 2
 2741              	 .thumb
 2742              	 .thumb_func
 2744              	pidLevel:
 2745              	.LFB579:
 578:../cleanflight/src/main/flight/pid.c **** 
 579:../cleanflight/src/main/flight/pid.c **** static float pidLevel(int axis, const pidProfile_t *pidProfile, const rollAndPitchTrims_t *angleTri
 2746              	 .loc 4 579 0
 2747              	 .cfi_startproc
 2748              	 
 2749              	 
 2750 0000 80B5     	 push {r7,lr}
 2751              	.LCFI105:
 2752              	 .cfi_def_cfa_offset 8
 2753              	 .cfi_offset 7,-8
 2754              	 .cfi_offset 14,-4
 2755 0002 2DED028B 	 fstmfdd sp!,{d8}
 2756              	.LCFI106:
 2757              	 .cfi_def_cfa_offset 16
 2758              	 .cfi_offset 80,-16
 2759              	 .cfi_offset 81,-12
 2760 0006 88B0     	 sub sp,sp,#32
 2761              	.LCFI107:
 2762              	 .cfi_def_cfa_offset 48
 2763 0008 00AF     	 add r7,sp,#0
 2764              	.LCFI108:
 2765              	 .cfi_def_cfa_register 7
 2766 000a F860     	 str r0,[r7,#12]
 2767 000c B960     	 str r1,[r7,#8]
 2768 000e 7A60     	 str r2,[r7,#4]
 2769 0010 3B60     	 str r3,[r7]
 580:../cleanflight/src/main/flight/pid.c ****     // calculate error angle and limit the angle to the max inclination
 581:../cleanflight/src/main/flight/pid.c ****     // rcDeflection is in range [-1.0, 1.0]
 582:../cleanflight/src/main/flight/pid.c ****     float angle = pidProfile->levelAngleLimit * getRcDeflection(axis);
 2770              	 .loc 4 582 0
 2771 0012 BB68     	 ldr r3,[r7,#8]
 2772 0014 93F82830 	 ldrb r3,[r3,#40]
 2773 0018 07EE903A 	 fmsr s15,r3
 2774 001c B8EEE78A 	 fsitos s16,s15
 2775 0020 F868     	 ldr r0,[r7,#12]
 2776 0022 FFF7FEFF 	 bl getRcDeflection
 2777 0026 07EE900A 	 fmsr s15,r0
 2778 002a 68EE277A 	 fmuls s15,s16,s15
 2779 002e C7ED077A 	 fsts s15,[r7,#28]
 583:../cleanflight/src/main/flight/pid.c **** #ifdef USE_GPS_RESCUE
 584:../cleanflight/src/main/flight/pid.c ****     angle += gpsRescueAngle[axis] / 100; // ANGLE IS IN CENTIDEGREES
 2780              	 .loc 4 584 0
 2781 0032 3C4A     	 ldr r2,.L154
 2782 0034 FB68     	 ldr r3,[r7,#12]
 2783 0036 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2784 003a 3B4A     	 ldr r2,.L154+4
 2785 003c 82FB0312 	 smull r1,r2,r2,r3
 2786 0040 5211     	 asrs r2,r2,#5
 2787 0042 DB17     	 asrs r3,r3,#31
 2788 0044 D31A     	 subs r3,r2,r3
 2789 0046 07EE903A 	 fmsr s15,r3
 2790 004a F8EEE77A 	 fsitos s15,s15
 2791 004e 97ED077A 	 flds s14,[r7,#28]
 2792 0052 77EE277A 	 fadds s15,s14,s15
 2793 0056 C7ED077A 	 fsts s15,[r7,#28]
 585:../cleanflight/src/main/flight/pid.c **** #endif
 586:../cleanflight/src/main/flight/pid.c ****     angle = constrainf(angle, -pidProfile->levelAngleLimit, pidProfile->levelAngleLimit);
 2794              	 .loc 4 586 0
 2795 005a BB68     	 ldr r3,[r7,#8]
 2796 005c 93F82830 	 ldrb r3,[r3,#40]
 2797 0060 5B42     	 negs r3,r3
 2798 0062 07EE903A 	 fmsr s15,r3
 2799 0066 B8EEE77A 	 fsitos s14,s15
 2800 006a BB68     	 ldr r3,[r7,#8]
 2801 006c 93F82830 	 ldrb r3,[r3,#40]
 2802 0070 07EE903A 	 fmsr s15,r3
 2803 0074 F8EE677A 	 fuitos s15,s15
 2804 0078 97ED070A 	 flds s0,[r7,#28]
 2805 007c F0EE470A 	 fcpys s1,s14
 2806 0080 B0EE671A 	 fcpys s2,s15
 2807 0084 FFF7FEFF 	 bl constrainf
 2808 0088 87ED070A 	 fsts s0,[r7,#28]
 587:../cleanflight/src/main/flight/pid.c ****     const float errorAngle = angle - ((attitude.raw[axis] - angleTrim->raw[axis]) / 10.0f);
 2809              	 .loc 4 587 0
 2810 008c 274A     	 ldr r2,.L154+8
 2811 008e FB68     	 ldr r3,[r7,#12]
 2812 0090 32F91330 	 ldrsh r3,[r2,r3,lsl#1]
 2813 0094 9BB2     	 uxth r3,r3
 2814 0096 1AB2     	 sxth r2,r3
 2815 0098 7B68     	 ldr r3,[r7,#4]
 2816 009a F968     	 ldr r1,[r7,#12]
 2817 009c 33F91130 	 ldrsh r3,[r3,r1,lsl#1]
 2818 00a0 9BB2     	 uxth r3,r3
 2819 00a2 1BB2     	 sxth r3,r3
 2820 00a4 D31A     	 subs r3,r2,r3
 2821 00a6 07EE903A 	 fmsr s15,r3
 2822 00aa F8EEE77A 	 fsitos s15,s15
 2823 00ae B2EE047A 	 fconsts s14,#36
 2824 00b2 C7EE877A 	 fdivs s15,s15,s14
 2825 00b6 97ED077A 	 flds s14,[r7,#28]
 2826 00ba 77EE677A 	 fsubs s15,s14,s15
 2827 00be C7ED067A 	 fsts s15,[r7,#24]
 588:../cleanflight/src/main/flight/pid.c ****     if (FLIGHT_MODE(ANGLE_MODE) || FLIGHT_MODE(GPS_RESCUE_MODE)) {
 2828              	 .loc 4 588 0
 2829 00c2 1B4B     	 ldr r3,.L154+12
 2830 00c4 1B88     	 ldrh r3,[r3]
 2831 00c6 03F00103 	 and r3,r3,#1
 2832 00ca 002B     	 cmp r3,#0
 2833 00cc 05D1     	 bne .L150
 2834              	 .loc 4 588 0 is_stmt 0 discriminator 1
 2835 00ce 184B     	 ldr r3,.L154+12
 2836 00d0 1B88     	 ldrh r3,[r3]
 2837 00d2 03F40063 	 and r3,r3,#2048
 2838 00d6 002B     	 cmp r3,#0
 2839 00d8 09D0     	 beq .L151
 2840              	.L150:
 589:../cleanflight/src/main/flight/pid.c ****         // ANGLE mode - control is angle based
 590:../cleanflight/src/main/flight/pid.c ****         currentPidSetpoint = errorAngle * levelGain;
 2841              	 .loc 4 590 0 is_stmt 1
 2842 00da 164B     	 ldr r3,.L154+16
 2843 00dc D3ED007A 	 flds s15,[r3]
 2844 00e0 97ED067A 	 flds s14,[r7,#24]
 2845 00e4 67EE277A 	 fmuls s15,s14,s15
 2846 00e8 C7ED007A 	 fsts s15,[r7]
 2847 00ec 13E0     	 b .L152
 2848              	.L151:
 2849              	.LBB20:
 591:../cleanflight/src/main/flight/pid.c ****     } else {
 592:../cleanflight/src/main/flight/pid.c ****         // HORIZON mode - mix of ANGLE and ACRO modes
 593:../cleanflight/src/main/flight/pid.c ****         // mix in errorAngle to currentPidSetpoint to add a little auto-level feel
 594:../cleanflight/src/main/flight/pid.c ****         const float horizonLevelStrength = calcHorizonLevelStrength();
 2850              	 .loc 4 594 0
 2851 00ee FFF7FEFF 	 bl calcHorizonLevelStrength
 2852 00f2 7861     	 str r0,[r7,#20]
 595:../cleanflight/src/main/flight/pid.c ****         currentPidSetpoint = currentPidSetpoint + (errorAngle * horizonGain * horizonLevelStrength)
 2853              	 .loc 4 595 0
 2854 00f4 104B     	 ldr r3,.L154+20
 2855 00f6 93ED007A 	 flds s14,[r3]
 2856 00fa D7ED067A 	 flds s15,[r7,#24]
 2857 00fe 27EE277A 	 fmuls s14,s14,s15
 2858 0102 D7ED057A 	 flds s15,[r7,#20]
 2859 0106 67EE277A 	 fmuls s15,s14,s15
 2860 010a 97ED007A 	 flds s14,[r7]
 2861 010e 77EE277A 	 fadds s15,s14,s15
 2862 0112 C7ED007A 	 fsts s15,[r7]
 2863              	.L152:
 2864              	.LBE20:
 596:../cleanflight/src/main/flight/pid.c ****     }
 597:../cleanflight/src/main/flight/pid.c ****     return currentPidSetpoint;
 2865              	 .loc 4 597 0
 2866 0116 3B68     	 ldr r3,[r7]
 598:../cleanflight/src/main/flight/pid.c **** }
 2867              	 .loc 4 598 0
 2868 0118 1846     	 mov r0,r3
 2869 011a 2037     	 adds r7,r7,#32
 2870              	.LCFI109:
 2871              	 .cfi_def_cfa_offset 16
 2872 011c BD46     	 mov sp,r7
 2873              	.LCFI110:
 2874              	 .cfi_def_cfa_register 13
 2875              	 
 2876 011e BDEC028B 	 fldmfdd sp!,{d8}
 2877              	.LCFI111:
 2878              	 .cfi_restore 80
 2879              	 .cfi_restore 81
 2880              	 .cfi_def_cfa_offset 8
 2881 0122 80BD     	 pop {r7,pc}
 2882              	.L155:
 2883              	 .align 2
 2884              	.L154:
 2885 0124 00000000 	 .word gpsRescueAngle
 2886 0128 1F85EB51 	 .word 1374389535
 2887 012c 00000000 	 .word attitude
 2888 0130 00000000 	 .word flightModeFlags
 2889 0134 00000000 	 .word levelGain
 2890 0138 00000000 	 .word horizonGain
 2891              	 .cfi_endproc
 2892              	.LFE579:
 2894              	 .section .text.accelerationLimit,"ax",%progbits
 2895              	 .align 2
 2896              	 .thumb
 2897              	 .thumb_func
 2899              	accelerationLimit:
 2900              	.LFB580:
 599:../cleanflight/src/main/flight/pid.c **** 
 600:../cleanflight/src/main/flight/pid.c **** static float accelerationLimit(int axis, float currentPidSetpoint)
 601:../cleanflight/src/main/flight/pid.c **** {
 2901              	 .loc 4 601 0
 2902              	 .cfi_startproc
 2903              	 
 2904              	 
 2905              	 
 2906 0000 80B4     	 push {r7}
 2907              	.LCFI112:
 2908              	 .cfi_def_cfa_offset 4
 2909              	 .cfi_offset 7,-4
 2910 0002 85B0     	 sub sp,sp,#20
 2911              	.LCFI113:
 2912              	 .cfi_def_cfa_offset 24
 2913 0004 00AF     	 add r7,sp,#0
 2914              	.LCFI114:
 2915              	 .cfi_def_cfa_register 7
 2916 0006 7860     	 str r0,[r7,#4]
 2917 0008 3960     	 str r1,[r7]
 602:../cleanflight/src/main/flight/pid.c ****     static float previousSetpoint[XYZ_AXIS_COUNT];
 603:../cleanflight/src/main/flight/pid.c ****     const float currentVelocity = currentPidSetpoint - previousSetpoint[axis];
 2918              	 .loc 4 603 0
 2919 000a 2D4A     	 ldr r2,.L171
 2920 000c 7B68     	 ldr r3,[r7,#4]
 2921 000e 9B00     	 lsls r3,r3,#2
 2922 0010 1344     	 add r3,r3,r2
 2923 0012 D3ED007A 	 flds s15,[r3]
 2924 0016 97ED007A 	 flds s14,[r7]
 2925 001a 77EE677A 	 fsubs s15,s14,s15
 2926 001e C7ED037A 	 fsts s15,[r7,#12]
 2927              	.LBB21:
 604:../cleanflight/src/main/flight/pid.c **** 
 605:../cleanflight/src/main/flight/pid.c ****     if (ABS(currentVelocity) > maxVelocity[axis]) {
 2928              	 .loc 4 605 0
 2929 0022 FB68     	 ldr r3,[r7,#12]
 2930 0024 BB60     	 str r3,[r7,#8]
 2931 0026 D7ED027A 	 flds s15,[r7,#8]
 2932 002a F5EEC07A 	 fcmpezs s15
 2933 002e F1EE10FA 	 fmstat
 2934 0032 02DD     	 ble .L169
 2935              	 .loc 4 605 0 is_stmt 0 discriminator 1
 2936 0034 D7ED027A 	 flds s15,[r7,#8]
 2937 0038 03E0     	 b .L159
 2938              	.L169:
 2939              	 .loc 4 605 0 discriminator 2
 2940 003a D7ED027A 	 flds s15,[r7,#8]
 2941 003e F1EE677A 	 fnegs s15,s15
 2942              	.L159:
 2943              	.LBE21:
 2944              	 .loc 4 605 0 discriminator 4
 2945 0042 204A     	 ldr r2,.L171+4
 2946 0044 7B68     	 ldr r3,[r7,#4]
 2947 0046 9B00     	 lsls r3,r3,#2
 2948 0048 1344     	 add r3,r3,r2
 2949 004a 93ED007A 	 flds s14,[r3]
 2950 004e F4EEC77A 	 fcmpes s15,s14
 2951 0052 F1EE10FA 	 fmstat
 2952 0056 25DD     	 ble .L160
 606:../cleanflight/src/main/flight/pid.c ****         currentPidSetpoint = (currentVelocity > 0) ? previousSetpoint[axis] + maxVelocity[axis] : p
 2953              	 .loc 4 606 0 is_stmt 1
 2954 0058 D7ED037A 	 flds s15,[r7,#12]
 2955 005c F5EEC07A 	 fcmpezs s15
 2956 0060 F1EE10FA 	 fmstat
 2957 0064 0EDD     	 ble .L170
 2958              	 .loc 4 606 0 is_stmt 0 discriminator 1
 2959 0066 164A     	 ldr r2,.L171
 2960 0068 7B68     	 ldr r3,[r7,#4]
 2961 006a 9B00     	 lsls r3,r3,#2
 2962 006c 1344     	 add r3,r3,r2
 2963 006e 93ED007A 	 flds s14,[r3]
 2964 0072 144A     	 ldr r2,.L171+4
 2965 0074 7B68     	 ldr r3,[r7,#4]
 2966 0076 9B00     	 lsls r3,r3,#2
 2967 0078 1344     	 add r3,r3,r2
 2968 007a D3ED007A 	 flds s15,[r3]
 2969 007e 77EE277A 	 fadds s15,s14,s15
 2970 0082 0DE0     	 b .L164
 2971              	.L170:
 2972              	 .loc 4 606 0 discriminator 2
 2973 0084 0E4A     	 ldr r2,.L171
 2974 0086 7B68     	 ldr r3,[r7,#4]
 2975 0088 9B00     	 lsls r3,r3,#2
 2976 008a 1344     	 add r3,r3,r2
 2977 008c 93ED007A 	 flds s14,[r3]
 2978 0090 0C4A     	 ldr r2,.L171+4
 2979 0092 7B68     	 ldr r3,[r7,#4]
 2980 0094 9B00     	 lsls r3,r3,#2
 2981 0096 1344     	 add r3,r3,r2
 2982 0098 D3ED007A 	 flds s15,[r3]
 2983 009c 77EE677A 	 fsubs s15,s14,s15
 2984              	.L164:
 2985              	 .loc 4 606 0 discriminator 4
 2986 00a0 C7ED007A 	 fsts s15,[r7]
 2987              	.L160:
 607:../cleanflight/src/main/flight/pid.c ****     }
 608:../cleanflight/src/main/flight/pid.c **** 
 609:../cleanflight/src/main/flight/pid.c ****     previousSetpoint[axis] = currentPidSetpoint;
 2988              	 .loc 4 609 0 is_stmt 1
 2989 00a4 064A     	 ldr r2,.L171
 2990 00a6 7B68     	 ldr r3,[r7,#4]
 2991 00a8 9B00     	 lsls r3,r3,#2
 2992 00aa 1344     	 add r3,r3,r2
 2993 00ac 3A68     	 ldr r2,[r7]
 2994 00ae 1A60     	 str r2,[r3]
 610:../cleanflight/src/main/flight/pid.c ****     return currentPidSetpoint;
 2995              	 .loc 4 610 0
 2996 00b0 3B68     	 ldr r3,[r7]
 611:../cleanflight/src/main/flight/pid.c **** }
 2997              	 .loc 4 611 0
 2998 00b2 1846     	 mov r0,r3
 2999 00b4 1437     	 adds r7,r7,#20
 3000              	.LCFI115:
 3001              	 .cfi_def_cfa_offset 4
 3002 00b6 BD46     	 mov sp,r7
 3003              	.LCFI116:
 3004              	 .cfi_def_cfa_register 13
 3005              	 
 3006 00b8 5DF8047B 	 ldr r7,[sp],#4
 3007              	.LCFI117:
 3008              	 .cfi_restore 7
 3009              	 .cfi_def_cfa_offset 0
 3010 00bc 7047     	 bx lr
 3011              	.L172:
 3012 00be 00BF     	 .align 2
 3013              	.L171:
 3014 00c0 00000000 	 .word previousSetpoint.14206
 3015 00c4 00000000 	 .word maxVelocity
 3016              	 .cfi_endproc
 3017              	.LFE580:
 3019              	 .section .bss.crashDetectedAtUs,"aw",%nobits
 3020              	 .align 2
 3023              	crashDetectedAtUs:
 3024 0000 00000000 	 .space 4
 3025              	 .section .text.handleCrashRecovery,"ax",%progbits
 3026              	 .align 2
 3027              	 .thumb
 3028              	 .thumb_func
 3030              	handleCrashRecovery:
 3031              	.LFB581:
 612:../cleanflight/src/main/flight/pid.c **** 
 613:../cleanflight/src/main/flight/pid.c **** static timeUs_t crashDetectedAtUs;
 614:../cleanflight/src/main/flight/pid.c **** 
 615:../cleanflight/src/main/flight/pid.c **** static void handleCrashRecovery(
 616:../cleanflight/src/main/flight/pid.c ****     const pidCrashRecovery_e crash_recovery, const rollAndPitchTrims_t *angleTrim,
 617:../cleanflight/src/main/flight/pid.c ****     const int axis, const timeUs_t currentTimeUs, const float gyroRate, float *currentPidSetpoint, 
 618:../cleanflight/src/main/flight/pid.c **** {
 3032              	 .loc 4 618 0
 3033              	 .cfi_startproc
 3034              	 
 3035              	 
 3036 0000 80B5     	 push {r7,lr}
 3037              	.LCFI118:
 3038              	 .cfi_def_cfa_offset 8
 3039              	 .cfi_offset 7,-8
 3040              	 .cfi_offset 14,-4
 3041 0002 8AB0     	 sub sp,sp,#40
 3042              	.LCFI119:
 3043              	 .cfi_def_cfa_offset 48
 3044 0004 00AF     	 add r7,sp,#0
 3045              	.LCFI120:
 3046              	 .cfi_def_cfa_register 7
 3047 0006 B960     	 str r1,[r7,#8]
 3048 0008 7A60     	 str r2,[r7,#4]
 3049 000a 3B60     	 str r3,[r7]
 3050 000c 0346     	 mov r3,r0
 3051 000e FB73     	 strb r3,[r7,#15]
 619:../cleanflight/src/main/flight/pid.c ****     if (inCrashRecoveryMode && cmpTimeUs(currentTimeUs, crashDetectedAtUs) > crashTimeDelayUs) {
 3052              	 .loc 4 619 0
 3053 0010 814B     	 ldr r3,.L202
 3054 0012 1B78     	 ldrb r3,[r3]
 3055 0014 002B     	 cmp r3,#0
 3056 0016 00F0FC80 	 beq .L173
 3057              	 .loc 4 619 0 is_stmt 0 discriminator 1
 3058 001a 804B     	 ldr r3,.L202+4
 3059 001c 1B68     	 ldr r3,[r3]
 3060 001e 3868     	 ldr r0,[r7]
 3061 0020 1946     	 mov r1,r3
 3062 0022 FFF7FEFF 	 bl cmpTimeUs
 3063 0026 0246     	 mov r2,r0
 3064 0028 7D4B     	 ldr r3,.L202+8
 3065 002a 1B68     	 ldr r3,[r3]
 3066 002c 9A42     	 cmp r2,r3
 3067 002e 40F3F080 	 ble .L173
 620:../cleanflight/src/main/flight/pid.c ****         if (crash_recovery == PID_CRASH_RECOVERY_BEEP) {
 621:../cleanflight/src/main/flight/pid.c ****             BEEP_ON;
 622:../cleanflight/src/main/flight/pid.c ****         }
 623:../cleanflight/src/main/flight/pid.c ****         if (axis == FD_YAW) {
 3068              	 .loc 4 623 0 is_stmt 1
 3069 0032 7B68     	 ldr r3,[r7,#4]
 3070 0034 022B     	 cmp r3,#2
 3071 0036 18D1     	 bne .L175
 624:../cleanflight/src/main/flight/pid.c ****             *errorRate = constrainf(*errorRate, -crashLimitYaw, crashLimitYaw);
 3072              	 .loc 4 624 0
 3073 0038 BB6B     	 ldr r3,[r7,#56]
 3074 003a D3ED006A 	 flds s13,[r3]
 3075 003e 794B     	 ldr r3,.L202+12
 3076 0040 D3ED007A 	 flds s15,[r3]
 3077 0044 B1EE677A 	 fnegs s14,s15
 3078 0048 764B     	 ldr r3,.L202+12
 3079 004a D3ED007A 	 flds s15,[r3]
 3080 004e B0EE660A 	 fcpys s0,s13
 3081 0052 F0EE470A 	 fcpys s1,s14
 3082 0056 B0EE671A 	 fcpys s2,s15
 3083 005a FFF7FEFF 	 bl constrainf
 3084 005e F0EE407A 	 fcpys s15,s0
 3085 0062 BB6B     	 ldr r3,[r7,#56]
 3086 0064 C3ED007A 	 fsts s15,[r3]
 3087 0068 30E0     	 b .L176
 3088              	.L175:
 625:../cleanflight/src/main/flight/pid.c ****         } else {
 626:../cleanflight/src/main/flight/pid.c ****             // on roll and pitch axes calculate currentPidSetpoint and errorRate to level the aircr
 627:../cleanflight/src/main/flight/pid.c ****             if (sensors(SENSOR_ACC)) {
 3089              	 .loc 4 627 0
 3090 006a 0220     	 movs r0,#2
 3091 006c FFF7FEFF 	 bl sensors
 3092 0070 0346     	 mov r3,r0
 3093 0072 002B     	 cmp r3,#0
 3094 0074 2AD0     	 beq .L176
 3095              	.LBB22:
 628:../cleanflight/src/main/flight/pid.c ****                 // errorAngle is deviation from horizontal
 629:../cleanflight/src/main/flight/pid.c ****                 const float errorAngle =  -(attitude.raw[axis] - angleTrim->raw[axis]) / 10.0f;
 3096              	 .loc 4 629 0
 3097 0076 BB68     	 ldr r3,[r7,#8]
 3098 0078 7A68     	 ldr r2,[r7,#4]
 3099 007a 33F91230 	 ldrsh r3,[r3,r2,lsl#1]
 3100 007e 9BB2     	 uxth r3,r3
 3101 0080 1AB2     	 sxth r2,r3
 3102 0082 6949     	 ldr r1,.L202+16
 3103 0084 7B68     	 ldr r3,[r7,#4]
 3104 0086 31F91330 	 ldrsh r3,[r1,r3,lsl#1]
 3105 008a 9BB2     	 uxth r3,r3
 3106 008c 1BB2     	 sxth r3,r3
 3107 008e D31A     	 subs r3,r2,r3
 3108 0090 07EE903A 	 fmsr s15,r3
 3109 0094 F8EEE77A 	 fsitos s15,s15
 3110 0098 B2EE047A 	 fconsts s14,#36
 3111 009c C7EE877A 	 fdivs s15,s15,s14
 3112 00a0 C7ED097A 	 fsts s15,[r7,#36]
 630:../cleanflight/src/main/flight/pid.c ****                 *currentPidSetpoint = errorAngle * levelGain;
 3113              	 .loc 4 630 0
 3114 00a4 614B     	 ldr r3,.L202+20
 3115 00a6 93ED007A 	 flds s14,[r3]
 3116 00aa D7ED097A 	 flds s15,[r7,#36]
 3117 00ae 67EE277A 	 fmuls s15,s14,s15
 3118 00b2 7B6B     	 ldr r3,[r7,#52]
 3119 00b4 C3ED007A 	 fsts s15,[r3]
 631:../cleanflight/src/main/flight/pid.c ****                 *errorRate = *currentPidSetpoint - gyroRate;
 3120              	 .loc 4 631 0
 3121 00b8 7B6B     	 ldr r3,[r7,#52]
 3122 00ba 93ED007A 	 flds s14,[r3]
 3123 00be D7ED0C7A 	 flds s15,[r7,#48]
 3124 00c2 77EE677A 	 fsubs s15,s14,s15
 3125 00c6 BB6B     	 ldr r3,[r7,#56]
 3126 00c8 C3ED007A 	 fsts s15,[r3]
 3127              	.L176:
 3128              	.LBE22:
 632:../cleanflight/src/main/flight/pid.c ****             }
 633:../cleanflight/src/main/flight/pid.c ****         }
 634:../cleanflight/src/main/flight/pid.c ****         // reset ITerm, since accumulated error before crash is now meaningless
 635:../cleanflight/src/main/flight/pid.c ****         // and ITerm windup during crash recovery can be extreme, especially on yaw axis
 636:../cleanflight/src/main/flight/pid.c ****         pidData[axis].I = 0.0f;
 3129              	 .loc 4 636 0
 3130 00cc 5849     	 ldr r1,.L202+24
 3131 00ce 7A68     	 ldr r2,[r7,#4]
 3132 00d0 1346     	 mov r3,r2
 3133 00d2 9B00     	 lsls r3,r3,#2
 3134 00d4 1344     	 add r3,r3,r2
 3135 00d6 9B00     	 lsls r3,r3,#2
 3136 00d8 0B44     	 add r3,r3,r1
 3137 00da 4FF00002 	 mov r2,#0
 3138 00de 5A60     	 str r2,[r3,#4]
 637:../cleanflight/src/main/flight/pid.c ****         if (cmpTimeUs(currentTimeUs, crashDetectedAtUs) > crashTimeLimitUs
 3139              	 .loc 4 637 0
 3140 00e0 4E4B     	 ldr r3,.L202+4
 3141 00e2 1B68     	 ldr r3,[r3]
 3142 00e4 3868     	 ldr r0,[r7]
 3143 00e6 1946     	 mov r1,r3
 3144 00e8 FFF7FEFF 	 bl cmpTimeUs
 3145 00ec 0246     	 mov r2,r0
 3146 00ee 514B     	 ldr r3,.L202+28
 3147 00f0 1B68     	 ldr r3,[r3]
 3148 00f2 9A42     	 cmp r2,r3
 3149 00f4 56DC     	 bgt .L177
 638:../cleanflight/src/main/flight/pid.c ****             || (getMotorMixRange() < 1.0f
 3150              	 .loc 4 638 0
 3151 00f6 FFF7FEFF 	 bl getMotorMixRange
 3152 00fa 07EE100A 	 fmsr s14,r0
 3153 00fe F7EE007A 	 fconsts s15,#112
 3154 0102 B4EEE77A 	 fcmpes s14,s15
 3155 0106 F1EE10FA 	 fmstat
 3156 010a 40F18280 	 bpl .L173
 3157              	.LBB23:
 639:../cleanflight/src/main/flight/pid.c ****                    && ABS(gyro.gyroADCf[FD_ROLL]) < crashRecoveryRate
 3158              	 .loc 4 639 0
 3159 010e 4A4B     	 ldr r3,.L202+32
 3160 0110 5B68     	 ldr r3,[r3,#4]
 3161 0112 3B62     	 str r3,[r7,#32]
 3162 0114 D7ED087A 	 flds s15,[r7,#32]
 3163 0118 F5EEC07A 	 fcmpezs s15
 3164 011c F1EE10FA 	 fmstat
 3165 0120 02DD     	 ble .L199
 3166              	 .loc 4 639 0 is_stmt 0 discriminator 1
 3167 0122 D7ED087A 	 flds s15,[r7,#32]
 3168 0126 03E0     	 b .L181
 3169              	.L199:
 3170              	 .loc 4 639 0 discriminator 2
 3171 0128 D7ED087A 	 flds s15,[r7,#32]
 3172 012c F1EE677A 	 fnegs s15,s15
 3173              	.L181:
 3174              	.LBE23:
 3175              	 .loc 4 639 0 discriminator 4
 3176 0130 424B     	 ldr r3,.L202+36
 3177 0132 93ED007A 	 flds s14,[r3]
 3178 0136 F4EEC77A 	 fcmpes s15,s14
 3179 013a F1EE10FA 	 fmstat
 3180 013e 68D5     	 bpl .L173
 3181              	.LBB24:
 640:../cleanflight/src/main/flight/pid.c ****                    && ABS(gyro.gyroADCf[FD_PITCH]) < crashRecoveryRate
 3182              	 .loc 4 640 0 is_stmt 1
 3183 0140 3D4B     	 ldr r3,.L202+32
 3184 0142 9B68     	 ldr r3,[r3,#8]
 3185 0144 FB61     	 str r3,[r7,#28]
 3186 0146 D7ED077A 	 flds s15,[r7,#28]
 3187 014a F5EEC07A 	 fcmpezs s15
 3188 014e F1EE10FA 	 fmstat
 3189 0152 02DD     	 ble .L200
 3190              	 .loc 4 640 0 is_stmt 0 discriminator 1
 3191 0154 D7ED077A 	 flds s15,[r7,#28]
 3192 0158 03E0     	 b .L185
 3193              	.L200:
 3194              	 .loc 4 640 0 discriminator 2
 3195 015a D7ED077A 	 flds s15,[r7,#28]
 3196 015e F1EE677A 	 fnegs s15,s15
 3197              	.L185:
 3198              	.LBE24:
 3199              	 .loc 4 640 0 discriminator 4
 3200 0162 364B     	 ldr r3,.L202+36
 3201 0164 93ED007A 	 flds s14,[r3]
 3202 0168 F4EEC77A 	 fcmpes s15,s14
 3203 016c F1EE10FA 	 fmstat
 3204 0170 4FD5     	 bpl .L173
 3205              	.LBB25:
 641:../cleanflight/src/main/flight/pid.c ****                    && ABS(gyro.gyroADCf[FD_YAW]) < crashRecoveryRate)) {
 3206              	 .loc 4 641 0 is_stmt 1
 3207 0172 314B     	 ldr r3,.L202+32
 3208 0174 DB68     	 ldr r3,[r3,#12]
 3209 0176 BB61     	 str r3,[r7,#24]
 3210 0178 D7ED067A 	 flds s15,[r7,#24]
 3211 017c F5EEC07A 	 fcmpezs s15
 3212 0180 F1EE10FA 	 fmstat
 3213 0184 02DD     	 ble .L201
 3214              	 .loc 4 641 0 is_stmt 0 discriminator 1
 3215 0186 D7ED067A 	 flds s15,[r7,#24]
 3216 018a 03E0     	 b .L189
 3217              	.L201:
 3218              	 .loc 4 641 0 discriminator 2
 3219 018c D7ED067A 	 flds s15,[r7,#24]
 3220 0190 F1EE677A 	 fnegs s15,s15
 3221              	.L189:
 3222              	.LBE25:
 3223              	 .loc 4 641 0 discriminator 4
 3224 0194 294B     	 ldr r3,.L202+36
 3225 0196 93ED007A 	 flds s14,[r3]
 3226 019a F4EEC77A 	 fcmpes s15,s14
 3227 019e F1EE10FA 	 fmstat
 3228 01a2 36D5     	 bpl .L173
 3229              	.L177:
 642:../cleanflight/src/main/flight/pid.c ****             if (sensors(SENSOR_ACC)) {
 3230              	 .loc 4 642 0 is_stmt 1
 3231 01a4 0220     	 movs r0,#2
 3232 01a6 FFF7FEFF 	 bl sensors
 3233 01aa 0346     	 mov r3,r0
 3234 01ac 002B     	 cmp r3,#0
 3235 01ae 2DD0     	 beq .L191
 3236              	.LBB26:
 643:../cleanflight/src/main/flight/pid.c ****                 // check aircraft nearly level
 644:../cleanflight/src/main/flight/pid.c ****                 if (ABS(attitude.raw[FD_ROLL] - angleTrim->raw[FD_ROLL]) < crashRecoveryAngleDeciDe
 3237              	 .loc 4 644 0
 3238 01b0 1D4B     	 ldr r3,.L202+16
 3239 01b2 B3F90030 	 ldrsh r3,[r3]
 3240 01b6 9BB2     	 uxth r3,r3
 3241 01b8 1AB2     	 sxth r2,r3
 3242 01ba BB68     	 ldr r3,[r7,#8]
 3243 01bc B3F90030 	 ldrsh r3,[r3]
 3244 01c0 9BB2     	 uxth r3,r3
 3245 01c2 1BB2     	 sxth r3,r3
 3246 01c4 D31A     	 subs r3,r2,r3
 3247 01c6 7B61     	 str r3,[r7,#20]
 3248 01c8 7B69     	 ldr r3,[r7,#20]
 3249 01ca 83EAE372 	 eor r2,r3,r3,asr#31
 3250 01ce A2EBE372 	 sub r2,r2,r3,asr#31
 3251              	.LBE26:
 3252 01d2 1B4B     	 ldr r3,.L202+40
 3253 01d4 1B68     	 ldr r3,[r3]
 3254 01d6 9A42     	 cmp r2,r3
 3255 01d8 1BDA     	 bge .L173
 3256              	.LBB27:
 645:../cleanflight/src/main/flight/pid.c ****                    && ABS(attitude.raw[FD_PITCH] - angleTrim->raw[FD_PITCH]) < crashRecoveryAngleDe
 3257              	 .loc 4 645 0
 3258 01da 134B     	 ldr r3,.L202+16
 3259 01dc B3F90230 	 ldrsh r3,[r3,#2]
 3260 01e0 9BB2     	 uxth r3,r3
 3261 01e2 1AB2     	 sxth r2,r3
 3262 01e4 BB68     	 ldr r3,[r7,#8]
 3263 01e6 B3F90230 	 ldrsh r3,[r3,#2]
 3264 01ea 9BB2     	 uxth r3,r3
 3265 01ec 1BB2     	 sxth r3,r3
 3266 01ee D31A     	 subs r3,r2,r3
 3267 01f0 3B61     	 str r3,[r7,#16]
 3268 01f2 3B69     	 ldr r3,[r7,#16]
 3269 01f4 83EAE372 	 eor r2,r3,r3,asr#31
 3270 01f8 A2EBE372 	 sub r2,r2,r3,asr#31
 3271              	.LBE27:
 3272 01fc 104B     	 ldr r3,.L202+40
 3273 01fe 1B68     	 ldr r3,[r3]
 3274 0200 9A42     	 cmp r2,r3
 3275 0202 06DA     	 bge .L173
 646:../cleanflight/src/main/flight/pid.c ****                     inCrashRecoveryMode = false;
 3276              	 .loc 4 646 0
 3277 0204 044B     	 ldr r3,.L202
 3278 0206 0022     	 movs r2,#0
 3279 0208 1A70     	 strb r2,[r3]
 3280 020a 02E0     	 b .L173
 3281              	.L191:
 647:../cleanflight/src/main/flight/pid.c ****                     BEEP_OFF;
 648:../cleanflight/src/main/flight/pid.c ****                 }
 649:../cleanflight/src/main/flight/pid.c ****             } else {
 650:../cleanflight/src/main/flight/pid.c ****                 inCrashRecoveryMode = false;
 3282              	 .loc 4 650 0
 3283 020c 024B     	 ldr r3,.L202
 3284 020e 0022     	 movs r2,#0
 3285 0210 1A70     	 strb r2,[r3]
 3286              	.L173:
 651:../cleanflight/src/main/flight/pid.c ****                 BEEP_OFF;
 652:../cleanflight/src/main/flight/pid.c ****             }
 653:../cleanflight/src/main/flight/pid.c ****         }
 654:../cleanflight/src/main/flight/pid.c ****     }
 655:../cleanflight/src/main/flight/pid.c **** }
 3287              	 .loc 4 655 0
 3288 0212 2837     	 adds r7,r7,#40
 3289              	.LCFI121:
 3290              	 .cfi_def_cfa_offset 8
 3291 0214 BD46     	 mov sp,r7
 3292              	.LCFI122:
 3293              	 .cfi_def_cfa_register 13
 3294              	 
 3295 0216 80BD     	 pop {r7,pc}
 3296              	.L203:
 3297              	 .align 2
 3298              	.L202:
 3299 0218 00000000 	 .word inCrashRecoveryMode
 3300 021c 00000000 	 .word crashDetectedAtUs
 3301 0220 00000000 	 .word crashTimeDelayUs
 3302 0224 00000000 	 .word crashLimitYaw
 3303 0228 00000000 	 .word attitude
 3304 022c 00000000 	 .word levelGain
 3305 0230 00000000 	 .word pidData
 3306 0234 00000000 	 .word crashTimeLimitUs
 3307 0238 00000000 	 .word gyro
 3308 023c 00000000 	 .word crashRecoveryRate
 3309 0240 00000000 	 .word crashRecoveryAngleDeciDegrees
 3310              	 .cfi_endproc
 3311              	.LFE581:
 3313              	 .section .text.detectAndSetCrashRecovery,"ax",%progbits
 3314              	 .align 2
 3315              	 .thumb
 3316              	 .thumb_func
 3318              	detectAndSetCrashRecovery:
 3319              	.LFB582:
 656:../cleanflight/src/main/flight/pid.c **** 
 657:../cleanflight/src/main/flight/pid.c **** static void detectAndSetCrashRecovery(
 658:../cleanflight/src/main/flight/pid.c ****     const pidCrashRecovery_e crash_recovery, const int axis,
 659:../cleanflight/src/main/flight/pid.c ****     const timeUs_t currentTimeUs, const float delta, const float errorRate)
 660:../cleanflight/src/main/flight/pid.c **** {
 3320              	 .loc 4 660 0
 3321              	 .cfi_startproc
 3322              	 
 3323              	 
 3324 0000 80B5     	 push {r7,lr}
 3325              	.LCFI123:
 3326              	 .cfi_def_cfa_offset 8
 3327              	 .cfi_offset 7,-8
 3328              	 .cfi_offset 14,-4
 3329 0002 8AB0     	 sub sp,sp,#40
 3330              	.LCFI124:
 3331              	 .cfi_def_cfa_offset 48
 3332 0004 00AF     	 add r7,sp,#0
 3333              	.LCFI125:
 3334              	 .cfi_def_cfa_register 7
 3335 0006 B960     	 str r1,[r7,#8]
 3336 0008 7A60     	 str r2,[r7,#4]
 3337 000a 3B60     	 str r3,[r7]
 3338 000c 0346     	 mov r3,r0
 3339 000e FB73     	 strb r3,[r7,#15]
 661:../cleanflight/src/main/flight/pid.c ****     // if crash recovery is on and accelerometer enabled and there is no gyro overflow, then check 
 662:../cleanflight/src/main/flight/pid.c ****     // no point in trying to recover if the crash is so severe that the gyro overflows
 663:../cleanflight/src/main/flight/pid.c ****     if ((crash_recovery || FLIGHT_MODE(GPS_RESCUE_MODE)) && !gyroOverflowDetected()) {
 3340              	 .loc 4 663 0
 3341 0010 FB7B     	 ldrb r3,[r7,#15]
 3342 0012 002B     	 cmp r3,#0
 3343 0014 06D1     	 bne .L205
 3344              	 .loc 4 663 0 is_stmt 0 discriminator 2
 3345 0016 644B     	 ldr r3,.L245
 3346 0018 1B88     	 ldrh r3,[r3]
 3347 001a 03F40063 	 and r3,r3,#2048
 3348 001e 002B     	 cmp r3,#0
 3349 0020 00F0BF80 	 beq .L204
 3350              	.L205:
 3351              	 .loc 4 663 0 discriminator 3
 3352 0024 FFF7FEFF 	 bl gyroOverflowDetected
 3353 0028 0346     	 mov r3,r0
 3354 002a 83F00103 	 eor r3,r3,#1
 3355 002e DBB2     	 uxtb r3,r3
 3356 0030 002B     	 cmp r3,#0
 3357 0032 00F0B680 	 beq .L204
 664:../cleanflight/src/main/flight/pid.c ****         if (ARMING_FLAG(ARMED)) {
 3358              	 .loc 4 664 0 is_stmt 1
 3359 0036 5D4B     	 ldr r3,.L245+4
 3360 0038 1B78     	 ldrb r3,[r3]
 3361 003a 03F00103 	 and r3,r3,#1
 3362 003e 002B     	 cmp r3,#0
 3363 0040 00F0A880 	 beq .L207
 665:../cleanflight/src/main/flight/pid.c ****             if (getMotorMixRange() >= 1.0f && !inCrashRecoveryMode
 3364              	 .loc 4 665 0
 3365 0044 FFF7FEFF 	 bl getMotorMixRange
 3366 0048 07EE100A 	 fmsr s14,r0
 3367 004c F7EE007A 	 fconsts s15,#112
 3368 0050 B4EEE77A 	 fcmpes s14,s15
 3369 0054 F1EE10FA 	 fmstat
 3370 0058 56DB     	 blt .L208
 3371              	 .loc 4 665 0 is_stmt 0 discriminator 1
 3372 005a 554B     	 ldr r3,.L245+8
 3373 005c 1B78     	 ldrb r3,[r3]
 3374 005e 83F00103 	 eor r3,r3,#1
 3375 0062 DBB2     	 uxtb r3,r3
 3376 0064 002B     	 cmp r3,#0
 3377 0066 4FD0     	 beq .L208
 3378              	.LBB28:
 666:../cleanflight/src/main/flight/pid.c ****                 && ABS(delta) > crashDtermThreshold
 3379              	 .loc 4 666 0 is_stmt 1
 3380 0068 3B68     	 ldr r3,[r7]
 3381 006a 7B62     	 str r3,[r7,#36]
 3382 006c D7ED097A 	 flds s15,[r7,#36]
 3383 0070 F5EEC07A 	 fcmpezs s15
 3384 0074 F1EE10FA 	 fmstat
 3385 0078 02DD     	 ble .L240
 3386              	 .loc 4 666 0 is_stmt 0 discriminator 1
 3387 007a D7ED097A 	 flds s15,[r7,#36]
 3388 007e 03E0     	 b .L212
 3389              	.L240:
 3390              	 .loc 4 666 0 discriminator 2
 3391 0080 D7ED097A 	 flds s15,[r7,#36]
 3392 0084 F1EE677A 	 fnegs s15,s15
 3393              	.L212:
 3394              	.LBE28:
 3395              	 .loc 4 666 0 discriminator 4
 3396 0088 4A4B     	 ldr r3,.L245+12
 3397 008a 93ED007A 	 flds s14,[r3]
 3398 008e F4EEC77A 	 fcmpes s15,s14
 3399 0092 F1EE10FA 	 fmstat
 3400 0096 37DD     	 ble .L208
 3401              	.LBB29:
 667:../cleanflight/src/main/flight/pid.c ****                 && ABS(errorRate) > crashGyroThreshold
 3402              	 .loc 4 667 0 is_stmt 1
 3403 0098 3B6B     	 ldr r3,[r7,#48]
 3404 009a 3B62     	 str r3,[r7,#32]
 3405 009c D7ED087A 	 flds s15,[r7,#32]
 3406 00a0 F5EEC07A 	 fcmpezs s15
 3407 00a4 F1EE10FA 	 fmstat
 3408 00a8 02DD     	 ble .L241
 3409              	 .loc 4 667 0 is_stmt 0 discriminator 1
 3410 00aa D7ED087A 	 flds s15,[r7,#32]
 3411 00ae 03E0     	 b .L216
 3412              	.L241:
 3413              	 .loc 4 667 0 discriminator 2
 3414 00b0 D7ED087A 	 flds s15,[r7,#32]
 3415 00b4 F1EE677A 	 fnegs s15,s15
 3416              	.L216:
 3417              	.LBE29:
 3418              	 .loc 4 667 0 discriminator 4
 3419 00b8 3F4B     	 ldr r3,.L245+16
 3420 00ba 93ED007A 	 flds s14,[r3]
 3421 00be F4EEC77A 	 fcmpes s15,s14
 3422 00c2 F1EE10FA 	 fmstat
 3423 00c6 1FDD     	 ble .L208
 3424              	.LBB30:
 668:../cleanflight/src/main/flight/pid.c ****                 && ABS(getSetpointRate(axis)) < crashSetpointThreshold) {
 3425              	 .loc 4 668 0 is_stmt 1
 3426 00c8 B868     	 ldr r0,[r7,#8]
 3427 00ca FFF7FEFF 	 bl getSetpointRate
 3428 00ce F861     	 str r0,[r7,#28]
 3429 00d0 D7ED077A 	 flds s15,[r7,#28]
 3430 00d4 F5EEC07A 	 fcmpezs s15
 3431 00d8 F1EE10FA 	 fmstat
 3432 00dc 02DD     	 ble .L242
 3433              	 .loc 4 668 0 is_stmt 0 discriminator 1
 3434 00de D7ED077A 	 flds s15,[r7,#28]
 3435 00e2 03E0     	 b .L220
 3436              	.L242:
 3437              	 .loc 4 668 0 discriminator 2
 3438 00e4 D7ED077A 	 flds s15,[r7,#28]
 3439 00e8 F1EE677A 	 fnegs s15,s15
 3440              	.L220:
 3441              	.LBE30:
 3442              	 .loc 4 668 0 discriminator 4
 3443 00ec 334B     	 ldr r3,.L245+20
 3444 00ee 93ED007A 	 flds s14,[r3]
 3445 00f2 F4EEC77A 	 fcmpes s15,s14
 3446 00f6 F1EE10FA 	 fmstat
 3447 00fa 05D5     	 bpl .L208
 669:../cleanflight/src/main/flight/pid.c ****                 inCrashRecoveryMode = true;
 3448              	 .loc 4 669 0 is_stmt 1
 3449 00fc 2C4B     	 ldr r3,.L245+8
 3450 00fe 0122     	 movs r2,#1
 3451 0100 1A70     	 strb r2,[r3]
 670:../cleanflight/src/main/flight/pid.c ****                 crashDetectedAtUs = currentTimeUs;
 3452              	 .loc 4 670 0
 3453 0102 2F4A     	 ldr r2,.L245+24
 3454 0104 7B68     	 ldr r3,[r7,#4]
 3455 0106 1360     	 str r3,[r2]
 3456              	.L208:
 671:../cleanflight/src/main/flight/pid.c ****             }
 672:../cleanflight/src/main/flight/pid.c ****             if (inCrashRecoveryMode && cmpTimeUs(currentTimeUs, crashDetectedAtUs) < crashTimeDelay
 3457              	 .loc 4 672 0
 3458 0108 294B     	 ldr r3,.L245+8
 3459 010a 1B78     	 ldrb r3,[r3]
 3460 010c 002B     	 cmp r3,#0
 3461 010e 48D0     	 beq .L204
 3462              	 .loc 4 672 0 is_stmt 0 discriminator 1
 3463 0110 2B4B     	 ldr r3,.L245+24
 3464 0112 1B68     	 ldr r3,[r3]
 3465 0114 7868     	 ldr r0,[r7,#4]
 3466 0116 1946     	 mov r1,r3
 3467 0118 FFF7FEFF 	 bl cmpTimeUs
 3468 011c 0246     	 mov r2,r0
 3469 011e 294B     	 ldr r3,.L245+28
 3470 0120 1B68     	 ldr r3,[r3]
 3471 0122 9A42     	 cmp r2,r3
 3472 0124 3DDA     	 bge .L204
 3473              	.LBB31:
 3474              	 .loc 4 672 0 discriminator 2
 3475 0126 3B6B     	 ldr r3,[r7,#48]
 3476 0128 BB61     	 str r3,[r7,#24]
 3477 012a D7ED067A 	 flds s15,[r7,#24]
 3478 012e F5EEC07A 	 fcmpezs s15
 3479 0132 F1EE10FA 	 fmstat
 3480 0136 02DD     	 ble .L243
 3481              	 .loc 4 672 0 discriminator 3
 3482 0138 D7ED067A 	 flds s15,[r7,#24]
 3483 013c 03E0     	 b .L225
 3484              	.L243:
 3485              	 .loc 4 672 0 discriminator 4
 3486 013e D7ED067A 	 flds s15,[r7,#24]
 3487 0142 F1EE677A 	 fnegs s15,s15
 3488              	.L225:
 3489              	.LBE31:
 3490              	 .loc 4 672 0 discriminator 6
 3491 0146 1C4B     	 ldr r3,.L245+16
 3492 0148 93ED007A 	 flds s14,[r3]
 3493 014c F4EEC77A 	 fcmpes s15,s14
 3494 0150 F1EE10FA 	 fmstat
 3495 0154 1AD4     	 bmi .L226
 3496              	.LBB32:
 673:../cleanflight/src/main/flight/pid.c ****                 || ABS(getSetpointRate(axis)) > crashSetpointThreshold)) {
 3497              	 .loc 4 673 0 is_stmt 1
 3498 0156 B868     	 ldr r0,[r7,#8]
 3499 0158 FFF7FEFF 	 bl getSetpointRate
 3500 015c 7861     	 str r0,[r7,#20]
 3501 015e D7ED057A 	 flds s15,[r7,#20]
 3502 0162 F5EEC07A 	 fcmpezs s15
 3503 0166 F1EE10FA 	 fmstat
 3504 016a 02DD     	 ble .L244
 3505              	 .loc 4 673 0 is_stmt 0 discriminator 1
 3506 016c D7ED057A 	 flds s15,[r7,#20]
 3507 0170 03E0     	 b .L229
 3508              	.L244:
 3509              	 .loc 4 673 0 discriminator 2
 3510 0172 D7ED057A 	 flds s15,[r7,#20]
 3511 0176 F1EE677A 	 fnegs s15,s15
 3512              	.L229:
 3513              	.LBE32:
 3514              	 .loc 4 673 0 discriminator 4
 3515 017a 104B     	 ldr r3,.L245+20
 3516 017c 93ED007A 	 flds s14,[r3]
 3517 0180 F4EEC77A 	 fcmpes s15,s14
 3518 0184 F1EE10FA 	 fmstat
 3519 0188 00DC     	 bgt .L226
 3520 018a 0AE0     	 b .L204
 3521              	.L226:
 674:../cleanflight/src/main/flight/pid.c ****                 inCrashRecoveryMode = false;
 3522              	 .loc 4 674 0 is_stmt 1
 3523 018c 084B     	 ldr r3,.L245+8
 3524 018e 0022     	 movs r2,#0
 3525 0190 1A70     	 strb r2,[r3]
 3526 0192 06E0     	 b .L204
 3527              	.L207:
 675:../cleanflight/src/main/flight/pid.c ****                 BEEP_OFF;
 676:../cleanflight/src/main/flight/pid.c ****             }
 677:../cleanflight/src/main/flight/pid.c ****         } else if (inCrashRecoveryMode) {
 3528              	 .loc 4 677 0
 3529 0194 064B     	 ldr r3,.L245+8
 3530 0196 1B78     	 ldrb r3,[r3]
 3531 0198 002B     	 cmp r3,#0
 3532 019a 02D0     	 beq .L204
 678:../cleanflight/src/main/flight/pid.c ****             inCrashRecoveryMode = false;
 3533              	 .loc 4 678 0
 3534 019c 044B     	 ldr r3,.L245+8
 3535 019e 0022     	 movs r2,#0
 3536 01a0 1A70     	 strb r2,[r3]
 3537              	.L204:
 679:../cleanflight/src/main/flight/pid.c ****             BEEP_OFF;
 680:../cleanflight/src/main/flight/pid.c ****         }
 681:../cleanflight/src/main/flight/pid.c ****     }
 682:../cleanflight/src/main/flight/pid.c **** }
 3538              	 .loc 4 682 0
 3539 01a2 2837     	 adds r7,r7,#40
 3540              	.LCFI126:
 3541              	 .cfi_def_cfa_offset 8
 3542 01a4 BD46     	 mov sp,r7
 3543              	.LCFI127:
 3544              	 .cfi_def_cfa_register 13
 3545              	 
 3546 01a6 80BD     	 pop {r7,pc}
 3547              	.L246:
 3548              	 .align 2
 3549              	.L245:
 3550 01a8 00000000 	 .word flightModeFlags
 3551 01ac 00000000 	 .word armingFlags
 3552 01b0 00000000 	 .word inCrashRecoveryMode
 3553 01b4 00000000 	 .word crashDtermThreshold
 3554 01b8 00000000 	 .word crashGyroThreshold
 3555 01bc 00000000 	 .word crashSetpointThreshold
 3556 01c0 00000000 	 .word crashDetectedAtUs
 3557 01c4 00000000 	 .word crashTimeDelayUs
 3558              	 .cfi_endproc
 3559              	.LFE582:
 3561              	 .section .text.rotateVector,"ax",%progbits
 3562              	 .align 2
 3563              	 .thumb
 3564              	 .thumb_func
 3566              	rotateVector:
 3567              	.LFB583:
 683:../cleanflight/src/main/flight/pid.c **** 
 684:../cleanflight/src/main/flight/pid.c **** static void rotateVector(float v[XYZ_AXIS_COUNT], float rotation[XYZ_AXIS_COUNT]) 
 685:../cleanflight/src/main/flight/pid.c **** {
 3568              	 .loc 4 685 0
 3569              	 .cfi_startproc
 3570              	 
 3571              	 
 3572              	 
 3573 0000 80B4     	 push {r7}
 3574              	.LCFI128:
 3575              	 .cfi_def_cfa_offset 4
 3576              	 .cfi_offset 7,-4
 3577 0002 87B0     	 sub sp,sp,#28
 3578              	.LCFI129:
 3579              	 .cfi_def_cfa_offset 32
 3580 0004 00AF     	 add r7,sp,#0
 3581              	.LCFI130:
 3582              	 .cfi_def_cfa_register 7
 3583 0006 7860     	 str r0,[r7,#4]
 3584 0008 3960     	 str r1,[r7]
 3585              	.LBB33:
 686:../cleanflight/src/main/flight/pid.c ****     // rotate v around rotation vector rotation
 687:../cleanflight/src/main/flight/pid.c ****     // rotation in radians, all elements must be small
 688:../cleanflight/src/main/flight/pid.c ****     for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 3586              	 .loc 4 688 0
 3587 000a 0023     	 movs r3,#0
 3588 000c 7B61     	 str r3,[r7,#20]
 3589 000e 54E0     	 b .L248
 3590              	.L249:
 3591              	.LBB34:
 689:../cleanflight/src/main/flight/pid.c ****         int i_1 = (i + 1) % 3;
 3592              	 .loc 4 689 0 discriminator 3
 3593 0010 7B69     	 ldr r3,[r7,#20]
 3594 0012 5A1C     	 adds r2,r3,#1
 3595 0014 2D4B     	 ldr r3,.L250
 3596 0016 83FB0231 	 smull r3,r1,r3,r2
 3597 001a D317     	 asrs r3,r2,#31
 3598 001c C91A     	 subs r1,r1,r3
 3599 001e 0B46     	 mov r3,r1
 3600 0020 5B00     	 lsls r3,r3,#1
 3601 0022 0B44     	 add r3,r3,r1
 3602 0024 D31A     	 subs r3,r2,r3
 3603 0026 3B61     	 str r3,[r7,#16]
 690:../cleanflight/src/main/flight/pid.c ****         int i_2 = (i + 2) % 3;
 3604              	 .loc 4 690 0 discriminator 3
 3605 0028 7B69     	 ldr r3,[r7,#20]
 3606 002a 9A1C     	 adds r2,r3,#2
 3607 002c 274B     	 ldr r3,.L250
 3608 002e 83FB0231 	 smull r3,r1,r3,r2
 3609 0032 D317     	 asrs r3,r2,#31
 3610 0034 C91A     	 subs r1,r1,r3
 3611 0036 0B46     	 mov r3,r1
 3612 0038 5B00     	 lsls r3,r3,#1
 3613 003a 0B44     	 add r3,r3,r1
 3614 003c D31A     	 subs r3,r2,r3
 3615 003e FB60     	 str r3,[r7,#12]
 691:../cleanflight/src/main/flight/pid.c ****         float newV = v[i_1] + v[i_2] * rotation[i];
 3616              	 .loc 4 691 0 discriminator 3
 3617 0040 3B69     	 ldr r3,[r7,#16]
 3618 0042 9B00     	 lsls r3,r3,#2
 3619 0044 7A68     	 ldr r2,[r7,#4]
 3620 0046 1344     	 add r3,r3,r2
 3621 0048 93ED007A 	 flds s14,[r3]
 3622 004c FB68     	 ldr r3,[r7,#12]
 3623 004e 9B00     	 lsls r3,r3,#2
 3624 0050 7A68     	 ldr r2,[r7,#4]
 3625 0052 1344     	 add r3,r3,r2
 3626 0054 D3ED006A 	 flds s13,[r3]
 3627 0058 7B69     	 ldr r3,[r7,#20]
 3628 005a 9B00     	 lsls r3,r3,#2
 3629 005c 3A68     	 ldr r2,[r7]
 3630 005e 1344     	 add r3,r3,r2
 3631 0060 D3ED007A 	 flds s15,[r3]
 3632 0064 66EEA77A 	 fmuls s15,s13,s15
 3633 0068 77EE277A 	 fadds s15,s14,s15
 3634 006c C7ED027A 	 fsts s15,[r7,#8]
 692:../cleanflight/src/main/flight/pid.c ****         v[i_2] -= v[i_1] * rotation[i];
 3635              	 .loc 4 692 0 discriminator 3
 3636 0070 FB68     	 ldr r3,[r7,#12]
 3637 0072 9B00     	 lsls r3,r3,#2
 3638 0074 7A68     	 ldr r2,[r7,#4]
 3639 0076 1344     	 add r3,r3,r2
 3640 0078 FA68     	 ldr r2,[r7,#12]
 3641 007a 9200     	 lsls r2,r2,#2
 3642 007c 7968     	 ldr r1,[r7,#4]
 3643 007e 0A44     	 add r2,r2,r1
 3644 0080 92ED007A 	 flds s14,[r2]
 3645 0084 3A69     	 ldr r2,[r7,#16]
 3646 0086 9200     	 lsls r2,r2,#2
 3647 0088 7968     	 ldr r1,[r7,#4]
 3648 008a 0A44     	 add r2,r2,r1
 3649 008c D2ED006A 	 flds s13,[r2]
 3650 0090 7A69     	 ldr r2,[r7,#20]
 3651 0092 9200     	 lsls r2,r2,#2
 3652 0094 3968     	 ldr r1,[r7]
 3653 0096 0A44     	 add r2,r2,r1
 3654 0098 D2ED007A 	 flds s15,[r2]
 3655 009c 66EEA77A 	 fmuls s15,s13,s15
 3656 00a0 77EE677A 	 fsubs s15,s14,s15
 3657 00a4 C3ED007A 	 fsts s15,[r3]
 693:../cleanflight/src/main/flight/pid.c ****         v[i_1] = newV;
 3658              	 .loc 4 693 0 discriminator 3
 3659 00a8 3B69     	 ldr r3,[r7,#16]
 3660 00aa 9B00     	 lsls r3,r3,#2
 3661 00ac 7A68     	 ldr r2,[r7,#4]
 3662 00ae 1344     	 add r3,r3,r2
 3663 00b0 BA68     	 ldr r2,[r7,#8]
 3664 00b2 1A60     	 str r2,[r3]
 3665              	.LBE34:
 688:../cleanflight/src/main/flight/pid.c ****         int i_1 = (i + 1) % 3;
 3666              	 .loc 4 688 0 discriminator 3
 3667 00b4 7B69     	 ldr r3,[r7,#20]
 3668 00b6 0133     	 adds r3,r3,#1
 3669 00b8 7B61     	 str r3,[r7,#20]
 3670              	.L248:
 688:../cleanflight/src/main/flight/pid.c ****         int i_1 = (i + 1) % 3;
 3671              	 .loc 4 688 0 is_stmt 0 discriminator 1
 3672 00ba 7B69     	 ldr r3,[r7,#20]
 3673 00bc 022B     	 cmp r3,#2
 3674 00be A7DD     	 ble .L249
 3675              	.LBE33:
 694:../cleanflight/src/main/flight/pid.c ****     }
 695:../cleanflight/src/main/flight/pid.c **** }
 3676              	 .loc 4 695 0 is_stmt 1
 3677 00c0 1C37     	 adds r7,r7,#28
 3678              	.LCFI131:
 3679              	 .cfi_def_cfa_offset 4
 3680 00c2 BD46     	 mov sp,r7
 3681              	.LCFI132:
 3682              	 .cfi_def_cfa_register 13
 3683              	 
 3684 00c4 5DF8047B 	 ldr r7,[sp],#4
 3685              	.LCFI133:
 3686              	 .cfi_restore 7
 3687              	 .cfi_def_cfa_offset 0
 3688 00c8 7047     	 bx lr
 3689              	.L251:
 3690 00ca 00BF     	 .align 2
 3691              	.L250:
 3692 00cc 56555555 	 .word 1431655766
 3693              	 .cfi_endproc
 3694              	.LFE583:
 3696              	 .section .text.rotateITermAndAxisError,"ax",%progbits
 3697              	 .align 2
 3698              	 .thumb
 3699              	 .thumb_func
 3701              	rotateITermAndAxisError:
 3702              	.LFB584:
 696:../cleanflight/src/main/flight/pid.c **** 
 697:../cleanflight/src/main/flight/pid.c **** static void rotateITermAndAxisError() 
 698:../cleanflight/src/main/flight/pid.c **** {
 3703              	 .loc 4 698 0
 3704              	 .cfi_startproc
 3705              	 
 3706              	 
 3707 0000 80B5     	 push {r7,lr}
 3708              	.LCFI134:
 3709              	 .cfi_def_cfa_offset 8
 3710              	 .cfi_offset 7,-8
 3711              	 .cfi_offset 14,-4
 3712 0002 8AB0     	 sub sp,sp,#40
 3713              	.LCFI135:
 3714              	 .cfi_def_cfa_offset 48
 3715 0004 00AF     	 add r7,sp,#0
 3716              	.LCFI136:
 3717              	 .cfi_def_cfa_register 7
 699:../cleanflight/src/main/flight/pid.c ****     if (itermRotation
 3718              	 .loc 4 699 0
 3719 0006 3F4B     	 ldr r3,.L266
 3720 0008 1B78     	 ldrb r3,[r3]
 3721 000a 002B     	 cmp r3,#0
 3722 000c 07D1     	 bne .L253
 700:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ABSOLUTE_CONTROL)
 701:../cleanflight/src/main/flight/pid.c ****         || acGain > 0
 3723              	 .loc 4 701 0
 3724 000e 3E4B     	 ldr r3,.L266+4
 3725 0010 D3ED007A 	 flds s15,[r3]
 3726 0014 F5EEC07A 	 fcmpezs s15
 3727 0018 F1EE10FA 	 fmstat
 3728 001c 6EDD     	 ble .L252
 3729              	.L253:
 3730              	.LBB35:
 702:../cleanflight/src/main/flight/pid.c **** #endif
 703:../cleanflight/src/main/flight/pid.c ****         ) {
 704:../cleanflight/src/main/flight/pid.c ****         const float gyroToAngle = dT * RAD;
 3731              	 .loc 4 704 0
 3732 001e 3B4B     	 ldr r3,.L266+8
 3733 0020 D3ED007A 	 flds s15,[r3]
 3734 0024 9FED3A7A 	 flds s14,.L266+12
 3735 0028 67EE877A 	 fmuls s15,s15,s14
 3736 002c C7ED067A 	 fsts s15,[r7,#24]
 3737              	.LBB36:
 705:../cleanflight/src/main/flight/pid.c ****         float rotationRads[XYZ_AXIS_COUNT];
 706:../cleanflight/src/main/flight/pid.c ****         for (int i = FD_ROLL; i <= FD_YAW; i++) {
 3738              	 .loc 4 706 0
 3739 0030 0023     	 movs r3,#0
 3740 0032 7B62     	 str r3,[r7,#36]
 3741 0034 15E0     	 b .L256
 3742              	.L257:
 707:../cleanflight/src/main/flight/pid.c ****             rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 3743              	 .loc 4 707 0 discriminator 3
 3744 0036 374A     	 ldr r2,.L266+16
 3745 0038 7B6A     	 ldr r3,[r7,#36]
 3746 003a 9B00     	 lsls r3,r3,#2
 3747 003c 1344     	 add r3,r3,r2
 3748 003e 5B68     	 ldr r3,[r3,#4]
 3749 0040 D7ED067A 	 flds s15,[r7,#24]
 3750 0044 07EE103A 	 fmsr s14,r3
 3751 0048 67EE277A 	 fmuls s15,s14,s15
 3752 004c 7B6A     	 ldr r3,[r7,#36]
 3753 004e 9B00     	 lsls r3,r3,#2
 3754 0050 07F12802 	 add r2,r7,#40
 3755 0054 1344     	 add r3,r3,r2
 3756 0056 1C3B     	 subs r3,r3,#28
 3757 0058 C3ED007A 	 fsts s15,[r3]
 706:../cleanflight/src/main/flight/pid.c ****             rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 3758              	 .loc 4 706 0 discriminator 3
 3759 005c 7B6A     	 ldr r3,[r7,#36]
 3760 005e 0133     	 adds r3,r3,#1
 3761 0060 7B62     	 str r3,[r7,#36]
 3762              	.L256:
 706:../cleanflight/src/main/flight/pid.c ****             rotationRads[i] = gyro.gyroADCf[i] * gyroToAngle;
 3763              	 .loc 4 706 0 is_stmt 0 discriminator 1
 3764 0062 7B6A     	 ldr r3,[r7,#36]
 3765 0064 022B     	 cmp r3,#2
 3766 0066 E6DD     	 ble .L257
 3767              	.LBE36:
 708:../cleanflight/src/main/flight/pid.c ****         }
 709:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ABSOLUTE_CONTROL)
 710:../cleanflight/src/main/flight/pid.c ****         if (acGain > 0) {
 3768              	 .loc 4 710 0 is_stmt 1
 3769 0068 274B     	 ldr r3,.L266+4
 3770 006a D3ED007A 	 flds s15,[r3]
 3771 006e F5EEC07A 	 fcmpezs s15
 3772 0072 F1EE10FA 	 fmstat
 3773 0076 05DD     	 ble .L258
 711:../cleanflight/src/main/flight/pid.c ****             rotateVector(axisError, rotationRads);
 3774              	 .loc 4 711 0
 3775 0078 07F10C03 	 add r3,r7,#12
 3776 007c 2648     	 ldr r0,.L266+20
 3777 007e 1946     	 mov r1,r3
 3778 0080 FFF7FEFF 	 bl rotateVector
 3779              	.L258:
 712:../cleanflight/src/main/flight/pid.c ****         }
 713:../cleanflight/src/main/flight/pid.c **** #endif
 714:../cleanflight/src/main/flight/pid.c ****         if (itermRotation) {
 3780              	 .loc 4 714 0
 3781 0084 1F4B     	 ldr r3,.L266
 3782 0086 1B78     	 ldrb r3,[r3]
 3783 0088 002B     	 cmp r3,#0
 3784 008a 37D0     	 beq .L252
 3785              	.LBB37:
 3786              	.LBB38:
 715:../cleanflight/src/main/flight/pid.c ****             float v[XYZ_AXIS_COUNT];
 716:../cleanflight/src/main/flight/pid.c ****             for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 3787              	 .loc 4 716 0
 3788 008c 0023     	 movs r3,#0
 3789 008e 3B62     	 str r3,[r7,#32]
 3790 0090 11E0     	 b .L261
 3791              	.L262:
 717:../cleanflight/src/main/flight/pid.c ****                 v[i] = pidData[i].I;
 3792              	 .loc 4 717 0 discriminator 3
 3793 0092 2249     	 ldr r1,.L266+24
 3794 0094 3A6A     	 ldr r2,[r7,#32]
 3795 0096 1346     	 mov r3,r2
 3796 0098 9B00     	 lsls r3,r3,#2
 3797 009a 1344     	 add r3,r3,r2
 3798 009c 9B00     	 lsls r3,r3,#2
 3799 009e 0B44     	 add r3,r3,r1
 3800 00a0 5B68     	 ldr r3,[r3,#4]
 3801 00a2 3A6A     	 ldr r2,[r7,#32]
 3802 00a4 9200     	 lsls r2,r2,#2
 3803 00a6 07F12801 	 add r1,r7,#40
 3804 00aa 0A44     	 add r2,r2,r1
 3805 00ac 283A     	 subs r2,r2,#40
 3806 00ae 1360     	 str r3,[r2]
 716:../cleanflight/src/main/flight/pid.c ****                 v[i] = pidData[i].I;
 3807              	 .loc 4 716 0 discriminator 3
 3808 00b0 3B6A     	 ldr r3,[r7,#32]
 3809 00b2 0133     	 adds r3,r3,#1
 3810 00b4 3B62     	 str r3,[r7,#32]
 3811              	.L261:
 716:../cleanflight/src/main/flight/pid.c ****                 v[i] = pidData[i].I;
 3812              	 .loc 4 716 0 is_stmt 0 discriminator 1
 3813 00b6 3B6A     	 ldr r3,[r7,#32]
 3814 00b8 022B     	 cmp r3,#2
 3815 00ba EADD     	 ble .L262
 3816              	.LBE38:
 718:../cleanflight/src/main/flight/pid.c ****             }
 719:../cleanflight/src/main/flight/pid.c ****             rotateVector(v, rotationRads );
 3817              	 .loc 4 719 0 is_stmt 1
 3818 00bc 3A46     	 mov r2,r7
 3819 00be 07F10C03 	 add r3,r7,#12
 3820 00c2 1046     	 mov r0,r2
 3821 00c4 1946     	 mov r1,r3
 3822 00c6 FFF7FEFF 	 bl rotateVector
 3823              	.LBB39:
 720:../cleanflight/src/main/flight/pid.c ****             for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 3824              	 .loc 4 720 0
 3825 00ca 0023     	 movs r3,#0
 3826 00cc FB61     	 str r3,[r7,#28]
 3827 00ce 12E0     	 b .L263
 3828              	.L264:
 721:../cleanflight/src/main/flight/pid.c ****                 pidData[i].I = v[i];
 3829              	 .loc 4 721 0 discriminator 3
 3830 00d0 FB69     	 ldr r3,[r7,#28]
 3831 00d2 9B00     	 lsls r3,r3,#2
 3832 00d4 07F12802 	 add r2,r7,#40
 3833 00d8 1344     	 add r3,r3,r2
 3834 00da 283B     	 subs r3,r3,#40
 3835 00dc 1868     	 ldr r0,[r3]
 3836 00de 0F49     	 ldr r1,.L266+24
 3837 00e0 FA69     	 ldr r2,[r7,#28]
 3838 00e2 1346     	 mov r3,r2
 3839 00e4 9B00     	 lsls r3,r3,#2
 3840 00e6 1344     	 add r3,r3,r2
 3841 00e8 9B00     	 lsls r3,r3,#2
 3842 00ea 0B44     	 add r3,r3,r1
 3843 00ec 0246     	 mov r2,r0
 3844 00ee 5A60     	 str r2,[r3,#4]
 720:../cleanflight/src/main/flight/pid.c ****             for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 3845              	 .loc 4 720 0 discriminator 3
 3846 00f0 FB69     	 ldr r3,[r7,#28]
 3847 00f2 0133     	 adds r3,r3,#1
 3848 00f4 FB61     	 str r3,[r7,#28]
 3849              	.L263:
 720:../cleanflight/src/main/flight/pid.c ****             for (int i = 0; i < XYZ_AXIS_COUNT; i++) {
 3850              	 .loc 4 720 0 is_stmt 0 discriminator 1
 3851 00f6 FB69     	 ldr r3,[r7,#28]
 3852 00f8 022B     	 cmp r3,#2
 3853 00fa E9DD     	 ble .L264
 3854              	.L252:
 3855              	.LBE39:
 3856              	.LBE37:
 3857              	.LBE35:
 722:../cleanflight/src/main/flight/pid.c ****             }
 723:../cleanflight/src/main/flight/pid.c ****         }
 724:../cleanflight/src/main/flight/pid.c ****     }
 725:../cleanflight/src/main/flight/pid.c **** }
 3858              	 .loc 4 725 0 is_stmt 1
 3859 00fc 2837     	 adds r7,r7,#40
 3860              	.LCFI137:
 3861              	 .cfi_def_cfa_offset 8
 3862 00fe BD46     	 mov sp,r7
 3863              	.LCFI138:
 3864              	 .cfi_def_cfa_register 13
 3865              	 
 3866 0100 80BD     	 pop {r7,pc}
 3867              	.L267:
 3868 0102 00BF     	 .align 2
 3869              	.L266:
 3870 0104 00000000 	 .word itermRotation
 3871 0108 00000000 	 .word acGain
 3872 010c 00000000 	 .word dT
 3873 0110 35FA8E3C 	 .word 1016003125
 3874 0114 00000000 	 .word gyro
 3875 0118 00000000 	 .word axisError
 3876 011c 00000000 	 .word pidData
 3877              	 .cfi_endproc
 3878              	.LFE584:
 3880              	 .section .text.acroTrainerSign,"ax",%progbits
 3881              	 .align 2
 3882              	 .global acroTrainerSign
 3883              	 .thumb
 3884              	 .thumb_func
 3886              	acroTrainerSign:
 3887              	.LFB585:
 726:../cleanflight/src/main/flight/pid.c **** 
 727:../cleanflight/src/main/flight/pid.c **** #ifdef USE_ACRO_TRAINER
 728:../cleanflight/src/main/flight/pid.c **** 
 729:../cleanflight/src/main/flight/pid.c **** int acroTrainerSign(float x)
 730:../cleanflight/src/main/flight/pid.c **** {
 3888              	 .loc 4 730 0
 3889              	 .cfi_startproc
 3890              	 
 3891              	 
 3892              	 
 3893 0000 80B4     	 push {r7}
 3894              	.LCFI139:
 3895              	 .cfi_def_cfa_offset 4
 3896              	 .cfi_offset 7,-4
 3897 0002 83B0     	 sub sp,sp,#12
 3898              	.LCFI140:
 3899              	 .cfi_def_cfa_offset 16
 3900 0004 00AF     	 add r7,sp,#0
 3901              	.LCFI141:
 3902              	 .cfi_def_cfa_register 7
 3903 0006 7860     	 str r0,[r7,#4]
 731:../cleanflight/src/main/flight/pid.c ****     return x > 0 ? 1 : -1;
 3904              	 .loc 4 731 0
 3905 0008 D7ED017A 	 flds s15,[r7,#4]
 3906 000c F5EEC07A 	 fcmpezs s15
 3907 0010 F1EE10FA 	 fmstat
 3908 0014 01DD     	 ble .L274
 3909              	 .loc 4 731 0 is_stmt 0 discriminator 1
 3910 0016 0123     	 movs r3,#1
 3911 0018 01E0     	 b .L271
 3912              	.L274:
 3913              	 .loc 4 731 0 discriminator 2
 3914 001a 4FF0FF33 	 mov r3,#-1
 3915              	.L271:
 732:../cleanflight/src/main/flight/pid.c **** }
 3916              	 .loc 4 732 0 is_stmt 1 discriminator 4
 3917 001e 1846     	 mov r0,r3
 3918 0020 0C37     	 adds r7,r7,#12
 3919              	.LCFI142:
 3920              	 .cfi_def_cfa_offset 4
 3921 0022 BD46     	 mov sp,r7
 3922              	.LCFI143:
 3923              	 .cfi_def_cfa_register 13
 3924              	 
 3925 0024 5DF8047B 	 ldr r7,[sp],#4
 3926              	.LCFI144:
 3927              	 .cfi_restore 7
 3928              	 .cfi_def_cfa_offset 0
 3929 0028 7047     	 bx lr
 3930              	 .cfi_endproc
 3931              	.LFE585:
 3933 002a 00BF     	 .section .text.applyAcroTrainer,"ax",%progbits
 3934              	 .align 2
 3935              	 .thumb
 3936              	 .thumb_func
 3938              	applyAcroTrainer:
 3939              	.LFB586:
 733:../cleanflight/src/main/flight/pid.c **** 
 734:../cleanflight/src/main/flight/pid.c **** // Acro Trainer - Manipulate the setPoint to limit axis angle while in acro mode
 735:../cleanflight/src/main/flight/pid.c **** // There are three states:
 736:../cleanflight/src/main/flight/pid.c **** // 1. Current angle has exceeded limit
 737:../cleanflight/src/main/flight/pid.c **** //    Apply correction to return to limit (similar to pidLevel)
 738:../cleanflight/src/main/flight/pid.c **** // 2. Future overflow has been projected based on current angle and gyro rate
 739:../cleanflight/src/main/flight/pid.c **** //    Manage the setPoint to control the gyro rate as the actual angle  approaches the limit (try t
 740:../cleanflight/src/main/flight/pid.c **** // 3. If no potential overflow is detected, then return the original setPoint
 741:../cleanflight/src/main/flight/pid.c **** 
 742:../cleanflight/src/main/flight/pid.c **** // Use the FAST_CODE_NOINLINE directive to avoid this code from being inlined into ITCM RAM. We acc
 743:../cleanflight/src/main/flight/pid.c **** // performance decrease when Acro Trainer mode is active under the assumption that user is unlikely
 744:../cleanflight/src/main/flight/pid.c **** // expecting ultimate flight performance at very high loop rates when in this mode.
 745:../cleanflight/src/main/flight/pid.c **** static FAST_CODE_NOINLINE float applyAcroTrainer(int axis, const rollAndPitchTrims_t *angleTrim, fl
 746:../cleanflight/src/main/flight/pid.c **** {
 3940              	 .loc 4 746 0
 3941              	 .cfi_startproc
 3942              	 
 3943              	 
 3944 0000 80B5     	 push {r7,lr}
 3945              	.LCFI145:
 3946              	 .cfi_def_cfa_offset 8
 3947              	 .cfi_offset 7,-8
 3948              	 .cfi_offset 14,-4
 3949 0002 8CB0     	 sub sp,sp,#48
 3950              	.LCFI146:
 3951              	 .cfi_def_cfa_offset 56
 3952 0004 00AF     	 add r7,sp,#0
 3953              	.LCFI147:
 3954              	 .cfi_def_cfa_register 7
 3955 0006 F860     	 str r0,[r7,#12]
 3956 0008 B960     	 str r1,[r7,#8]
 3957 000a 7A60     	 str r2,[r7,#4]
 747:../cleanflight/src/main/flight/pid.c ****     float ret = setPoint;
 3958              	 .loc 4 747 0
 3959 000c 7B68     	 ldr r3,[r7,#4]
 3960 000e FB62     	 str r3,[r7,#44]
 748:../cleanflight/src/main/flight/pid.c **** 
 749:../cleanflight/src/main/flight/pid.c ****     if (!FLIGHT_MODE(ANGLE_MODE) && !FLIGHT_MODE(HORIZON_MODE) && !FLIGHT_MODE(GPS_RESCUE_MODE)) {
 3961              	 .loc 4 749 0
 3962 0010 9D4B     	 ldr r3,.L290
 3963 0012 1B88     	 ldrh r3,[r3]
 3964 0014 03F00103 	 and r3,r3,#1
 3965 0018 002B     	 cmp r3,#0
 3966 001a 40F03081 	 bne .L276
 3967              	 .loc 4 749 0 is_stmt 0 discriminator 1
 3968 001e 9A4B     	 ldr r3,.L290
 3969 0020 1B88     	 ldrh r3,[r3]
 3970 0022 03F00203 	 and r3,r3,#2
 3971 0026 002B     	 cmp r3,#0
 3972 0028 40F02981 	 bne .L276
 3973              	 .loc 4 749 0 discriminator 2
 3974 002c 964B     	 ldr r3,.L290
 3975 002e 1B88     	 ldrh r3,[r3]
 3976 0030 03F40063 	 and r3,r3,#2048
 3977 0034 002B     	 cmp r3,#0
 3978 0036 40F02281 	 bne .L276
 3979              	.LBB40:
 750:../cleanflight/src/main/flight/pid.c ****         bool resetIterm = false;
 3980              	 .loc 4 750 0 is_stmt 1
 3981 003a 0023     	 movs r3,#0
 3982 003c 87F82B30 	 strb r3,[r7,#43]
 751:../cleanflight/src/main/flight/pid.c ****         float projectedAngle = 0;
 3983              	 .loc 4 751 0
 3984 0040 4FF00003 	 mov r3,#0
 3985 0044 7B62     	 str r3,[r7,#36]
 752:../cleanflight/src/main/flight/pid.c ****         const int setpointSign = acroTrainerSign(setPoint);
 3986              	 .loc 4 752 0
 3987 0046 7868     	 ldr r0,[r7,#4]
 3988 0048 FFF7FEFF 	 bl acroTrainerSign
 3989 004c 3862     	 str r0,[r7,#32]
 753:../cleanflight/src/main/flight/pid.c ****         const float currentAngle = (attitude.raw[axis] - angleTrim->raw[axis]) / 10.0f;
 3990              	 .loc 4 753 0
 3991 004e 8F4A     	 ldr r2,.L290+4
 3992 0050 FB68     	 ldr r3,[r7,#12]
 3993 0052 32F91330 	 ldrsh r3,[r2,r3,lsl#1]
 3994 0056 9BB2     	 uxth r3,r3
 3995 0058 1AB2     	 sxth r2,r3
 3996 005a BB68     	 ldr r3,[r7,#8]
 3997 005c F968     	 ldr r1,[r7,#12]
 3998 005e 33F91130 	 ldrsh r3,[r3,r1,lsl#1]
 3999 0062 9BB2     	 uxth r3,r3
 4000 0064 1BB2     	 sxth r3,r3
 4001 0066 D31A     	 subs r3,r2,r3
 4002 0068 07EE903A 	 fmsr s15,r3
 4003 006c F8EEE77A 	 fsitos s15,s15
 4004 0070 B2EE047A 	 fconsts s14,#36
 4005 0074 C7EE877A 	 fdivs s15,s15,s14
 4006 0078 C7ED077A 	 fsts s15,[r7,#28]
 754:../cleanflight/src/main/flight/pid.c ****         const int angleSign = acroTrainerSign(currentAngle);
 4007              	 .loc 4 754 0
 4008 007c F869     	 ldr r0,[r7,#28]
 4009 007e FFF7FEFF 	 bl acroTrainerSign
 4010 0082 B861     	 str r0,[r7,#24]
 755:../cleanflight/src/main/flight/pid.c **** 
 756:../cleanflight/src/main/flight/pid.c ****         if ((acroTrainerAxisState[axis] != 0) && (acroTrainerAxisState[axis] != setpointSign)) {  /
 4011              	 .loc 4 756 0
 4012 0084 824A     	 ldr r2,.L290+8
 4013 0086 FB68     	 ldr r3,[r7,#12]
 4014 0088 52F82330 	 ldr r3,[r2,r3,lsl#2]
 4015 008c 002B     	 cmp r3,#0
 4016 008e 0BD0     	 beq .L277
 4017              	 .loc 4 756 0 is_stmt 0 discriminator 1
 4018 0090 7F4A     	 ldr r2,.L290+8
 4019 0092 FB68     	 ldr r3,[r7,#12]
 4020 0094 52F82320 	 ldr r2,[r2,r3,lsl#2]
 4021 0098 3B6A     	 ldr r3,[r7,#32]
 4022 009a 9A42     	 cmp r2,r3
 4023 009c 04D0     	 beq .L277
 757:../cleanflight/src/main/flight/pid.c ****             acroTrainerAxisState[axis] = 0;
 4024              	 .loc 4 757 0 is_stmt 1
 4025 009e 7C4A     	 ldr r2,.L290+8
 4026 00a0 FB68     	 ldr r3,[r7,#12]
 4027 00a2 0021     	 movs r1,#0
 4028 00a4 42F82310 	 str r1,[r2,r3,lsl#2]
 4029              	.L277:
 758:../cleanflight/src/main/flight/pid.c ****         }
 759:../cleanflight/src/main/flight/pid.c **** 
 760:../cleanflight/src/main/flight/pid.c ****         // Limit and correct the angle when it exceeds the limit
 761:../cleanflight/src/main/flight/pid.c ****         if ((fabsf(currentAngle) > acroTrainerAngleLimit) && (acroTrainerAxisState[axis] == 0)) {
 4030              	 .loc 4 761 0
 4031 00a8 D7ED077A 	 flds s15,[r7,#28]
 4032 00ac B0EEE77A 	 fabss s14,s15
 4033 00b0 784B     	 ldr r3,.L290+12
 4034 00b2 D3ED007A 	 flds s15,[r3]
 4035 00b6 B4EEE77A 	 fcmpes s14,s15
 4036 00ba F1EE10FA 	 fmstat
 4037 00be 11DD     	 ble .L278
 4038              	 .loc 4 761 0 is_stmt 0 discriminator 1
 4039 00c0 734A     	 ldr r2,.L290+8
 4040 00c2 FB68     	 ldr r3,[r7,#12]
 4041 00c4 52F82330 	 ldr r3,[r2,r3,lsl#2]
 4042 00c8 002B     	 cmp r3,#0
 4043 00ca 0BD1     	 bne .L278
 762:../cleanflight/src/main/flight/pid.c ****             if (angleSign == setpointSign) {
 4044              	 .loc 4 762 0 is_stmt 1
 4045 00cc BA69     	 ldr r2,[r7,#24]
 4046 00ce 3B6A     	 ldr r3,[r7,#32]
 4047 00d0 9A42     	 cmp r2,r3
 4048 00d2 07D1     	 bne .L278
 763:../cleanflight/src/main/flight/pid.c ****                 acroTrainerAxisState[axis] = angleSign;
 4049              	 .loc 4 763 0
 4050 00d4 6E49     	 ldr r1,.L290+8
 4051 00d6 FB68     	 ldr r3,[r7,#12]
 4052 00d8 BA69     	 ldr r2,[r7,#24]
 4053 00da 41F82320 	 str r2,[r1,r3,lsl#2]
 764:../cleanflight/src/main/flight/pid.c ****                 resetIterm = true;
 4054              	 .loc 4 764 0
 4055 00de 0123     	 movs r3,#1
 4056 00e0 87F82B30 	 strb r3,[r7,#43]
 4057              	.L278:
 765:../cleanflight/src/main/flight/pid.c ****             }
 766:../cleanflight/src/main/flight/pid.c ****         }
 767:../cleanflight/src/main/flight/pid.c **** 
 768:../cleanflight/src/main/flight/pid.c ****         if (acroTrainerAxisState[axis] != 0) {
 4058              	 .loc 4 768 0
 4059 00e4 6A4A     	 ldr r2,.L290+8
 4060 00e6 FB68     	 ldr r3,[r7,#12]
 4061 00e8 52F82330 	 ldr r3,[r2,r3,lsl#2]
 4062 00ec 002B     	 cmp r3,#0
 4063 00ee 1DD0     	 beq .L280
 769:../cleanflight/src/main/flight/pid.c ****             ret = constrainf(((acroTrainerAngleLimit * angleSign) - currentAngle) * acroTrainerGain
 4064              	 .loc 4 769 0
 4065 00f0 BB69     	 ldr r3,[r7,#24]
 4066 00f2 07EE903A 	 fmsr s15,r3
 4067 00f6 B8EEE77A 	 fsitos s14,s15
 4068 00fa 664B     	 ldr r3,.L290+12
 4069 00fc D3ED007A 	 flds s15,[r3]
 4070 0100 27EE277A 	 fmuls s14,s14,s15
 4071 0104 D7ED077A 	 flds s15,[r7,#28]
 4072 0108 37EE677A 	 fsubs s14,s14,s15
 4073 010c 624B     	 ldr r3,.L290+16
 4074 010e D3ED007A 	 flds s15,[r3]
 4075 0112 67EE277A 	 fmuls s15,s14,s15
 4076 0116 B0EE670A 	 fcpys s0,s15
 4077 011a DFED600A 	 flds s1,.L290+20
 4078 011e 9FED601A 	 flds s2,.L290+24
 4079 0122 FFF7FEFF 	 bl constrainf
 4080 0126 87ED0B0A 	 fsts s0,[r7,#44]
 4081 012a 5AE0     	 b .L281
 4082              	.L280:
 4083              	.LBB41:
 770:../cleanflight/src/main/flight/pid.c ****         } else {
 771:../cleanflight/src/main/flight/pid.c ****         
 772:../cleanflight/src/main/flight/pid.c ****         // Not currently over the limit so project the angle based on current angle and
 773:../cleanflight/src/main/flight/pid.c ****         // gyro angular rate using a sliding window based on gyro rate (faster rotation means large
 774:../cleanflight/src/main/flight/pid.c ****         // If the projected angle exceeds the limit then apply limiting to minimize overshoot.
 775:../cleanflight/src/main/flight/pid.c ****             // Calculate the lookahead window by scaling proportionally with gyro rate from 0-500dp
 776:../cleanflight/src/main/flight/pid.c ****             float checkInterval = constrainf(fabsf(gyro.gyroADCf[axis]) / ACRO_TRAINER_LOOKAHEAD_RA
 4084              	 .loc 4 776 0
 4085 012c 5D4A     	 ldr r2,.L290+28
 4086 012e FB68     	 ldr r3,[r7,#12]
 4087 0130 9B00     	 lsls r3,r3,#2
 4088 0132 1344     	 add r3,r3,r2
 4089 0134 5B68     	 ldr r3,[r3,#4]
 4090 0136 07EE903A 	 fmsr s15,r3
 4091 013a F0EEE77A 	 fabss s15,s15
 4092 013e 9FED5A7A 	 flds s14,.L290+32
 4093 0142 C7EE877A 	 fdivs s15,s15,s14
 4094 0146 B0EE670A 	 fcpys s0,s15
 4095 014a DFED580A 	 flds s1,.L290+36
 4096 014e B7EE001A 	 fconsts s2,#112
 4097 0152 FFF7FEFF 	 bl constrainf
 4098 0156 B0EE407A 	 fcpys s14,s0
 4099 015a 554B     	 ldr r3,.L290+40
 4100 015c D3ED007A 	 flds s15,[r3]
 4101 0160 67EE277A 	 fmuls s15,s14,s15
 4102 0164 C7ED057A 	 fsts s15,[r7,#20]
 777:../cleanflight/src/main/flight/pid.c ****             projectedAngle = (gyro.gyroADCf[axis] * checkInterval) + currentAngle;
 4103              	 .loc 4 777 0
 4104 0168 4E4A     	 ldr r2,.L290+28
 4105 016a FB68     	 ldr r3,[r7,#12]
 4106 016c 9B00     	 lsls r3,r3,#2
 4107 016e 1344     	 add r3,r3,r2
 4108 0170 5B68     	 ldr r3,[r3,#4]
 4109 0172 D7ED057A 	 flds s15,[r7,#20]
 4110 0176 07EE103A 	 fmsr s14,r3
 4111 017a 27EE277A 	 fmuls s14,s14,s15
 4112 017e D7ED077A 	 flds s15,[r7,#28]
 4113 0182 77EE277A 	 fadds s15,s14,s15
 4114 0186 C7ED097A 	 fsts s15,[r7,#36]
 778:../cleanflight/src/main/flight/pid.c ****             const int projectedAngleSign = acroTrainerSign(projectedAngle);
 4115              	 .loc 4 778 0
 4116 018a 786A     	 ldr r0,[r7,#36]
 4117 018c FFF7FEFF 	 bl acroTrainerSign
 4118 0190 3861     	 str r0,[r7,#16]
 779:../cleanflight/src/main/flight/pid.c ****             if ((fabsf(projectedAngle) > acroTrainerAngleLimit) && (projectedAngleSign == setpointS
 4119              	 .loc 4 779 0
 4120 0192 D7ED097A 	 flds s15,[r7,#36]
 4121 0196 B0EEE77A 	 fabss s14,s15
 4122 019a 3E4B     	 ldr r3,.L290+12
 4123 019c D3ED007A 	 flds s15,[r3]
 4124 01a0 B4EEE77A 	 fcmpes s14,s15
 4125 01a4 F1EE10FA 	 fmstat
 4126 01a8 1BDD     	 ble .L281
 4127              	 .loc 4 779 0 is_stmt 0 discriminator 1
 4128 01aa 3A69     	 ldr r2,[r7,#16]
 4129 01ac 3B6A     	 ldr r3,[r7,#32]
 4130 01ae 9A42     	 cmp r2,r3
 4131 01b0 17D1     	 bne .L281
 780:../cleanflight/src/main/flight/pid.c ****                 ret = ((acroTrainerAngleLimit * projectedAngleSign) - projectedAngle) * acroTrainer
 4132              	 .loc 4 780 0 is_stmt 1
 4133 01b2 3B69     	 ldr r3,[r7,#16]
 4134 01b4 07EE903A 	 fmsr s15,r3
 4135 01b8 B8EEE77A 	 fsitos s14,s15
 4136 01bc 354B     	 ldr r3,.L290+12
 4137 01be D3ED007A 	 flds s15,[r3]
 4138 01c2 27EE277A 	 fmuls s14,s14,s15
 4139 01c6 D7ED097A 	 flds s15,[r7,#36]
 4140 01ca 37EE677A 	 fsubs s14,s14,s15
 4141 01ce 324B     	 ldr r3,.L290+16
 4142 01d0 D3ED007A 	 flds s15,[r3]
 4143 01d4 67EE277A 	 fmuls s15,s14,s15
 4144 01d8 C7ED0B7A 	 fsts s15,[r7,#44]
 781:../cleanflight/src/main/flight/pid.c ****                 resetIterm = true;
 4145              	 .loc 4 781 0
 4146 01dc 0123     	 movs r3,#1
 4147 01de 87F82B30 	 strb r3,[r7,#43]
 4148              	.L281:
 4149              	.LBE41:
 782:../cleanflight/src/main/flight/pid.c ****             }
 783:../cleanflight/src/main/flight/pid.c ****         }
 784:../cleanflight/src/main/flight/pid.c **** 
 785:../cleanflight/src/main/flight/pid.c ****         if (resetIterm) {
 4150              	 .loc 4 785 0
 4151 01e2 97F82B30 	 ldrb r3,[r7,#43]
 4152 01e6 002B     	 cmp r3,#0
 4153 01e8 09D0     	 beq .L283
 786:../cleanflight/src/main/flight/pid.c ****             pidData[axis].I = 0;
 4154              	 .loc 4 786 0
 4155 01ea 3249     	 ldr r1,.L290+44
 4156 01ec FA68     	 ldr r2,[r7,#12]
 4157 01ee 1346     	 mov r3,r2
 4158 01f0 9B00     	 lsls r3,r3,#2
 4159 01f2 1344     	 add r3,r3,r2
 4160 01f4 9B00     	 lsls r3,r3,#2
 4161 01f6 0B44     	 add r3,r3,r1
 4162 01f8 4FF00002 	 mov r2,#0
 4163 01fc 5A60     	 str r2,[r3,#4]
 4164              	.L283:
 787:../cleanflight/src/main/flight/pid.c ****         }
 788:../cleanflight/src/main/flight/pid.c ****  
 789:../cleanflight/src/main/flight/pid.c ****         if (axis == acroTrainerDebugAxis) {
 4165              	 .loc 4 789 0
 4166 01fe 2E4B     	 ldr r3,.L290+48
 4167 0200 1B78     	 ldrb r3,[r3]
 4168 0202 1A46     	 mov r2,r3
 4169 0204 FB68     	 ldr r3,[r7,#12]
 4170 0206 9A42     	 cmp r2,r3
 4171 0208 39D1     	 bne .L276
 790:../cleanflight/src/main/flight/pid.c ****             DEBUG_SET(DEBUG_ACRO_TRAINER, 0, lrintf(currentAngle * 10.0f));
 4172              	 .loc 4 790 0
 4173 020a 2C4B     	 ldr r3,.L290+52
 4174 020c 1B78     	 ldrb r3,[r3]
 4175 020e 272B     	 cmp r3,#39
 4176 0210 0DD1     	 bne .L284
 4177              	 .loc 4 790 0 is_stmt 0 discriminator 1
 4178 0212 D7ED077A 	 flds s15,[r7,#28]
 4179 0216 B2EE047A 	 fconsts s14,#36
 4180 021a 67EE877A 	 fmuls s15,s15,s14
 4181 021e 17EE900A 	 fmrs r0,s15
 4182 0222 FFF7FEFF 	 bl lrintf
 4183 0226 0346     	 mov r3,r0
 4184 0228 9AB2     	 uxth r2,r3
 4185 022a 254B     	 ldr r3,.L290+56
 4186 022c 1A80     	 strh r2,[r3]
 4187              	.L284:
 791:../cleanflight/src/main/flight/pid.c ****             DEBUG_SET(DEBUG_ACRO_TRAINER, 1, acroTrainerAxisState[axis]);
 4188              	 .loc 4 791 0 is_stmt 1
 4189 022e 234B     	 ldr r3,.L290+52
 4190 0230 1B78     	 ldrb r3,[r3]
 4191 0232 272B     	 cmp r3,#39
 4192 0234 06D1     	 bne .L285
 4193              	 .loc 4 791 0 is_stmt 0 discriminator 1
 4194 0236 164A     	 ldr r2,.L290+8
 4195 0238 FB68     	 ldr r3,[r7,#12]
 4196 023a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 4197 023e 9AB2     	 uxth r2,r3
 4198 0240 1F4B     	 ldr r3,.L290+56
 4199 0242 5A80     	 strh r2,[r3,#2]
 4200              	.L285:
 792:../cleanflight/src/main/flight/pid.c ****             DEBUG_SET(DEBUG_ACRO_TRAINER, 2, lrintf(ret));
 4201              	 .loc 4 792 0 is_stmt 1
 4202 0244 1D4B     	 ldr r3,.L290+52
 4203 0246 1B78     	 ldrb r3,[r3]
 4204 0248 272B     	 cmp r3,#39
 4205 024a 06D1     	 bne .L286
 4206              	 .loc 4 792 0 is_stmt 0 discriminator 1
 4207 024c F86A     	 ldr r0,[r7,#44]
 4208 024e FFF7FEFF 	 bl lrintf
 4209 0252 0346     	 mov r3,r0
 4210 0254 9AB2     	 uxth r2,r3
 4211 0256 1A4B     	 ldr r3,.L290+56
 4212 0258 9A80     	 strh r2,[r3,#4]
 4213              	.L286:
 793:../cleanflight/src/main/flight/pid.c ****             DEBUG_SET(DEBUG_ACRO_TRAINER, 3, lrintf(projectedAngle * 10.0f));
 4214              	 .loc 4 793 0 is_stmt 1
 4215 025a 184B     	 ldr r3,.L290+52
 4216 025c 1B78     	 ldrb r3,[r3]
 4217 025e 272B     	 cmp r3,#39
 4218 0260 0DD1     	 bne .L276
 4219              	 .loc 4 793 0 is_stmt 0 discriminator 1
 4220 0262 D7ED097A 	 flds s15,[r7,#36]
 4221 0266 B2EE047A 	 fconsts s14,#36
 4222 026a 67EE877A 	 fmuls s15,s15,s14
 4223 026e 17EE900A 	 fmrs r0,s15
 4224 0272 FFF7FEFF 	 bl lrintf
 4225 0276 0346     	 mov r3,r0
 4226 0278 9AB2     	 uxth r2,r3
 4227 027a 114B     	 ldr r3,.L290+56
 4228 027c DA80     	 strh r2,[r3,#6]
 4229              	.L276:
 4230              	.LBE40:
 794:../cleanflight/src/main/flight/pid.c ****         }
 795:../cleanflight/src/main/flight/pid.c ****     }
 796:../cleanflight/src/main/flight/pid.c **** 
 797:../cleanflight/src/main/flight/pid.c ****     return ret;
 4231              	 .loc 4 797 0 is_stmt 1
 4232 027e FB6A     	 ldr r3,[r7,#44]
 798:../cleanflight/src/main/flight/pid.c **** }
 4233              	 .loc 4 798 0
 4234 0280 1846     	 mov r0,r3
 4235 0282 3037     	 adds r7,r7,#48
 4236              	.LCFI148:
 4237              	 .cfi_def_cfa_offset 8
 4238 0284 BD46     	 mov sp,r7
 4239              	.LCFI149:
 4240              	 .cfi_def_cfa_register 13
 4241              	 
 4242 0286 80BD     	 pop {r7,pc}
 4243              	.L291:
 4244              	 .align 2
 4245              	.L290:
 4246 0288 00000000 	 .word flightModeFlags
 4247 028c 00000000 	 .word attitude
 4248 0290 00000000 	 .word acroTrainerAxisState
 4249 0294 00000000 	 .word acroTrainerAngleLimit
 4250 0298 00000000 	 .word acroTrainerGain
 4251 029c 00007AC4 	 .word -998637568
 4252 02a0 00007A44 	 .word 1148846080
 4253 02a4 00000000 	 .word gyro
 4254 02a8 0000FA43 	 .word 1140457472
 4255 02ac 00000000 	 .word 0
 4256 02b0 00000000 	 .word acroTrainerLookaheadTime
 4257 02b4 00000000 	 .word pidData
 4258 02b8 00000000 	 .word acroTrainerDebugAxis
 4259 02bc 00000000 	 .word debugMode
 4260 02c0 00000000 	 .word debug
 4261              	 .cfi_endproc
 4262              	.LFE586:
 4264              	 .section .text.applyRcSmoothingDerivativeFilter,"ax",%progbits
 4265              	 .align 2
 4266              	 .global applyRcSmoothingDerivativeFilter
 4267              	 .thumb
 4268              	 .thumb_func
 4270              	applyRcSmoothingDerivativeFilter:
 4271              	.LFB587:
 799:../cleanflight/src/main/flight/pid.c **** #endif // USE_ACRO_TRAINER
 800:../cleanflight/src/main/flight/pid.c **** 
 801:../cleanflight/src/main/flight/pid.c **** #ifdef USE_RC_SMOOTHING_FILTER
 802:../cleanflight/src/main/flight/pid.c **** float FAST_CODE applyRcSmoothingDerivativeFilter(int axis, float pidSetpointDelta)
 803:../cleanflight/src/main/flight/pid.c **** {
 4272              	 .loc 4 803 0
 4273              	 .cfi_startproc
 4274              	 
 4275              	 
 4276 0000 80B5     	 push {r7,lr}
 4277              	.LCFI150:
 4278              	 .cfi_def_cfa_offset 8
 4279              	 .cfi_offset 7,-8
 4280              	 .cfi_offset 14,-4
 4281 0002 84B0     	 sub sp,sp,#16
 4282              	.LCFI151:
 4283              	 .cfi_def_cfa_offset 24
 4284 0004 00AF     	 add r7,sp,#0
 4285              	.LCFI152:
 4286              	 .cfi_def_cfa_register 7
 4287 0006 7860     	 str r0,[r7,#4]
 4288 0008 3960     	 str r1,[r7]
 804:../cleanflight/src/main/flight/pid.c ****     float ret = pidSetpointDelta;
 4289              	 .loc 4 804 0
 4290 000a 3B68     	 ldr r3,[r7]
 4291 000c FB60     	 str r3,[r7,#12]
 805:../cleanflight/src/main/flight/pid.c ****     if (axis == rcSmoothingDebugAxis) {
 4292              	 .loc 4 805 0
 4293 000e 2B4B     	 ldr r3,.L299
 4294 0010 1B78     	 ldrb r3,[r3]
 4295 0012 1A46     	 mov r2,r3
 4296 0014 7B68     	 ldr r3,[r7,#4]
 4297 0016 9A42     	 cmp r2,r3
 4298 0018 11D1     	 bne .L293
 806:../cleanflight/src/main/flight/pid.c ****         DEBUG_SET(DEBUG_RC_SMOOTHING, 1, lrintf(pidSetpointDelta * 100.0f));
 4299              	 .loc 4 806 0
 4300 001a 294B     	 ldr r3,.L299+4
 4301 001c 1B78     	 ldrb r3,[r3]
 4302 001e 282B     	 cmp r3,#40
 4303 0020 0DD1     	 bne .L293
 4304              	 .loc 4 806 0 is_stmt 0 discriminator 1
 4305 0022 D7ED007A 	 flds s15,[r7]
 4306 0026 9FED277A 	 flds s14,.L299+8
 4307 002a 67EE877A 	 fmuls s15,s15,s14
 4308 002e 17EE900A 	 fmrs r0,s15
 4309 0032 FFF7FEFF 	 bl lrintf
 4310 0036 0346     	 mov r3,r0
 4311 0038 9AB2     	 uxth r2,r3
 4312 003a 234B     	 ldr r3,.L299+12
 4313 003c 5A80     	 strh r2,[r3,#2]
 4314              	.L293:
 807:../cleanflight/src/main/flight/pid.c ****     }
 808:../cleanflight/src/main/flight/pid.c ****     if (setpointDerivativeLpfInitialized) {
 4315              	 .loc 4 808 0 is_stmt 1
 4316 003e 234B     	 ldr r3,.L299+16
 4317 0040 1B78     	 ldrb r3,[r3]
 4318 0042 002B     	 cmp r3,#0
 4319 0044 35D0     	 beq .L294
 809:../cleanflight/src/main/flight/pid.c ****         switch (rcSmoothingFilterType) {
 4320              	 .loc 4 809 0
 4321 0046 224B     	 ldr r3,.L299+20
 4322 0048 1B78     	 ldrb r3,[r3]
 4323 004a 012B     	 cmp r3,#1
 4324 004c 02D0     	 beq .L296
 4325 004e 022B     	 cmp r3,#2
 4326 0050 0AD0     	 beq .L297
 4327 0052 16E0     	 b .L295
 4328              	.L296:
 810:../cleanflight/src/main/flight/pid.c ****             case RC_SMOOTHING_DERIVATIVE_PT1:
 811:../cleanflight/src/main/flight/pid.c ****                 ret = pt1FilterApply(&setpointDerivativePt1[axis], pidSetpointDelta);
 4329              	 .loc 4 811 0
 4330 0054 7B68     	 ldr r3,[r7,#4]
 4331 0056 DB00     	 lsls r3,r3,#3
 4332 0058 1E4A     	 ldr r2,.L299+24
 4333 005a 1344     	 add r3,r3,r2
 4334 005c 1846     	 mov r0,r3
 4335 005e 3968     	 ldr r1,[r7]
 4336 0060 FFF7FEFF 	 bl pt1FilterApply
 4337 0064 F860     	 str r0,[r7,#12]
 812:../cleanflight/src/main/flight/pid.c ****                 break;
 4338              	 .loc 4 812 0
 4339 0066 0CE0     	 b .L295
 4340              	.L297:
 813:../cleanflight/src/main/flight/pid.c ****             case RC_SMOOTHING_DERIVATIVE_BIQUAD:
 814:../cleanflight/src/main/flight/pid.c ****                 ret = biquadFilterApplyDF1(&setpointDerivativeBiquad[axis], pidSetpointDelta);
 4341              	 .loc 4 814 0
 4342 0068 7A68     	 ldr r2,[r7,#4]
 4343 006a 1346     	 mov r3,r2
 4344 006c DB00     	 lsls r3,r3,#3
 4345 006e 1344     	 add r3,r3,r2
 4346 0070 9B00     	 lsls r3,r3,#2
 4347 0072 194A     	 ldr r2,.L299+28
 4348 0074 1344     	 add r3,r3,r2
 4349 0076 1846     	 mov r0,r3
 4350 0078 3968     	 ldr r1,[r7]
 4351 007a FFF7FEFF 	 bl biquadFilterApplyDF1
 4352 007e F860     	 str r0,[r7,#12]
 815:../cleanflight/src/main/flight/pid.c ****                 break;
 4353              	 .loc 4 815 0
 4354 0080 00BF     	 nop
 4355              	.L295:
 816:../cleanflight/src/main/flight/pid.c ****         }
 817:../cleanflight/src/main/flight/pid.c ****         if (axis == rcSmoothingDebugAxis) {
 4356              	 .loc 4 817 0
 4357 0082 0E4B     	 ldr r3,.L299
 4358 0084 1B78     	 ldrb r3,[r3]
 4359 0086 1A46     	 mov r2,r3
 4360 0088 7B68     	 ldr r3,[r7,#4]
 4361 008a 9A42     	 cmp r2,r3
 4362 008c 11D1     	 bne .L294
 818:../cleanflight/src/main/flight/pid.c ****             DEBUG_SET(DEBUG_RC_SMOOTHING, 2, lrintf(ret * 100.0f));
 4363              	 .loc 4 818 0
 4364 008e 0C4B     	 ldr r3,.L299+4
 4365 0090 1B78     	 ldrb r3,[r3]
 4366 0092 282B     	 cmp r3,#40
 4367 0094 0DD1     	 bne .L294
 4368              	 .loc 4 818 0 is_stmt 0 discriminator 1
 4369 0096 D7ED037A 	 flds s15,[r7,#12]
 4370 009a 9FED0A7A 	 flds s14,.L299+8
 4371 009e 67EE877A 	 fmuls s15,s15,s14
 4372 00a2 17EE900A 	 fmrs r0,s15
 4373 00a6 FFF7FEFF 	 bl lrintf
 4374 00aa 0346     	 mov r3,r0
 4375 00ac 9AB2     	 uxth r2,r3
 4376 00ae 064B     	 ldr r3,.L299+12
 4377 00b0 9A80     	 strh r2,[r3,#4]
 4378              	.L294:
 819:../cleanflight/src/main/flight/pid.c ****         }
 820:../cleanflight/src/main/flight/pid.c ****     }
 821:../cleanflight/src/main/flight/pid.c ****     return ret;
 4379              	 .loc 4 821 0 is_stmt 1
 4380 00b2 FB68     	 ldr r3,[r7,#12]
 822:../cleanflight/src/main/flight/pid.c **** }
 4381              	 .loc 4 822 0
 4382 00b4 1846     	 mov r0,r3
 4383 00b6 1037     	 adds r7,r7,#16
 4384              	.LCFI153:
 4385              	 .cfi_def_cfa_offset 8
 4386 00b8 BD46     	 mov sp,r7
 4387              	.LCFI154:
 4388              	 .cfi_def_cfa_register 13
 4389              	 
 4390 00ba 80BD     	 pop {r7,pc}
 4391              	.L300:
 4392              	 .align 2
 4393              	.L299:
 4394 00bc 00000000 	 .word rcSmoothingDebugAxis
 4395 00c0 00000000 	 .word debugMode
 4396 00c4 0000C842 	 .word 1120403456
 4397 00c8 00000000 	 .word debug
 4398 00cc 00000000 	 .word setpointDerivativeLpfInitialized
 4399 00d0 00000000 	 .word rcSmoothingFilterType
 4400 00d4 00000000 	 .word setpointDerivativePt1
 4401 00d8 00000000 	 .word setpointDerivativeBiquad
 4402              	 .cfi_endproc
 4403              	.LFE587:
 4405              	 .section .text.applySmartFeedforward,"ax",%progbits
 4406              	 .align 2
 4407              	 .global applySmartFeedforward
 4408              	 .thumb
 4409              	 .thumb_func
 4411              	applySmartFeedforward:
 4412              	.LFB588:
 823:../cleanflight/src/main/flight/pid.c **** #endif // USE_RC_SMOOTHING_FILTER
 824:../cleanflight/src/main/flight/pid.c **** 
 825:../cleanflight/src/main/flight/pid.c **** #ifdef USE_SMART_FEEDFORWARD
 826:../cleanflight/src/main/flight/pid.c **** void FAST_CODE applySmartFeedforward(int axis)
 827:../cleanflight/src/main/flight/pid.c **** {
 4413              	 .loc 4 827 0
 4414              	 .cfi_startproc
 4415              	 
 4416              	 
 4417              	 
 4418 0000 80B4     	 push {r7}
 4419              	.LCFI155:
 4420              	 .cfi_def_cfa_offset 4
 4421              	 .cfi_offset 7,-4
 4422 0002 85B0     	 sub sp,sp,#20
 4423              	.LCFI156:
 4424              	 .cfi_def_cfa_offset 24
 4425 0004 00AF     	 add r7,sp,#0
 4426              	.LCFI157:
 4427              	 .cfi_def_cfa_register 7
 4428 0006 7860     	 str r0,[r7,#4]
 828:../cleanflight/src/main/flight/pid.c ****     if (smartFeedforward) {
 4429              	 .loc 4 828 0
 4430 0008 384B     	 ldr r3,.L319
 4431 000a 1B78     	 ldrb r3,[r3]
 4432 000c 002B     	 cmp r3,#0
 4433 000e 67D0     	 beq .L301
 829:../cleanflight/src/main/flight/pid.c ****         if (pidData[axis].P * pidData[axis].F > 0) {
 4434              	 .loc 4 829 0
 4435 0010 3749     	 ldr r1,.L319+4
 4436 0012 7A68     	 ldr r2,[r7,#4]
 4437 0014 1346     	 mov r3,r2
 4438 0016 9B00     	 lsls r3,r3,#2
 4439 0018 1344     	 add r3,r3,r2
 4440 001a 9B00     	 lsls r3,r3,#2
 4441 001c 0B44     	 add r3,r3,r1
 4442 001e 1868     	 ldr r0,[r3]
 4443 0020 0346     	 mov r3,r0
 4444 0022 1846     	 mov r0,r3
 4445 0024 3249     	 ldr r1,.L319+4
 4446 0026 7A68     	 ldr r2,[r7,#4]
 4447 0028 1346     	 mov r3,r2
 4448 002a 9B00     	 lsls r3,r3,#2
 4449 002c 1344     	 add r3,r3,r2
 4450 002e 9B00     	 lsls r3,r3,#2
 4451 0030 0B44     	 add r3,r3,r1
 4452 0032 0833     	 adds r3,r3,#8
 4453 0034 5B68     	 ldr r3,[r3,#4]
 4454 0036 07EE900A 	 fmsr s15,r0
 4455 003a 07EE103A 	 fmsr s14,r3
 4456 003e 67EE877A 	 fmuls s15,s15,s14
 4457 0042 F5EEC07A 	 fcmpezs s15
 4458 0046 F1EE10FA 	 fmstat
 4459 004a 49DD     	 ble .L301
 4460              	.LBB42:
 830:../cleanflight/src/main/flight/pid.c ****             if (ABS(pidData[axis].F) > ABS(pidData[axis].P)) {
 4461              	 .loc 4 830 0
 4462 004c 2849     	 ldr r1,.L319+4
 4463 004e 7A68     	 ldr r2,[r7,#4]
 4464 0050 1346     	 mov r3,r2
 4465 0052 9B00     	 lsls r3,r3,#2
 4466 0054 1344     	 add r3,r3,r2
 4467 0056 9B00     	 lsls r3,r3,#2
 4468 0058 0B44     	 add r3,r3,r1
 4469 005a 0833     	 adds r3,r3,#8
 4470 005c 5B68     	 ldr r3,[r3,#4]
 4471 005e FB60     	 str r3,[r7,#12]
 4472 0060 D7ED037A 	 flds s15,[r7,#12]
 4473 0064 F5EEC07A 	 fcmpezs s15
 4474 0068 F1EE10FA 	 fmstat
 4475 006c 02DD     	 ble .L316
 4476              	 .loc 4 830 0 is_stmt 0 discriminator 1
 4477 006e 97ED037A 	 flds s14,[r7,#12]
 4478 0072 03E0     	 b .L306
 4479              	.L316:
 4480              	 .loc 4 830 0 discriminator 2
 4481 0074 D7ED037A 	 flds s15,[r7,#12]
 4482 0078 B1EE677A 	 fnegs s14,s15
 4483              	.L306:
 4484              	.LBE42:
 4485              	.LBB43:
 4486              	 .loc 4 830 0 discriminator 4
 4487 007c 1C49     	 ldr r1,.L319+4
 4488 007e 7A68     	 ldr r2,[r7,#4]
 4489 0080 1346     	 mov r3,r2
 4490 0082 9B00     	 lsls r3,r3,#2
 4491 0084 1344     	 add r3,r3,r2
 4492 0086 9B00     	 lsls r3,r3,#2
 4493 0088 0B44     	 add r3,r3,r1
 4494 008a 1B68     	 ldr r3,[r3]
 4495 008c BB60     	 str r3,[r7,#8]
 4496 008e D7ED027A 	 flds s15,[r7,#8]
 4497 0092 F5EEC07A 	 fcmpezs s15
 4498 0096 F1EE10FA 	 fmstat
 4499 009a 02DD     	 ble .L317
 4500              	 .loc 4 830 0 discriminator 5
 4501 009c D7ED027A 	 flds s15,[r7,#8]
 4502 00a0 03E0     	 b .L309
 4503              	.L317:
 4504              	 .loc 4 830 0 discriminator 6
 4505 00a2 D7ED027A 	 flds s15,[r7,#8]
 4506 00a6 F1EE677A 	 fnegs s15,s15
 4507              	.L309:
 4508              	.LBE43:
 4509              	 .loc 4 830 0 discriminator 8
 4510 00aa B4EEE77A 	 fcmpes s14,s15
 4511 00ae F1EE10FA 	 fmstat
 4512 00b2 0ADD     	 ble .L318
 831:../cleanflight/src/main/flight/pid.c ****                 pidData[axis].P = 0;
 4513              	 .loc 4 831 0 is_stmt 1
 4514 00b4 0E49     	 ldr r1,.L319+4
 4515 00b6 7A68     	 ldr r2,[r7,#4]
 4516 00b8 1346     	 mov r3,r2
 4517 00ba 9B00     	 lsls r3,r3,#2
 4518 00bc 1344     	 add r3,r3,r2
 4519 00be 9B00     	 lsls r3,r3,#2
 4520 00c0 0B44     	 add r3,r3,r1
 4521 00c2 4FF00002 	 mov r2,#0
 4522 00c6 1A60     	 str r2,[r3]
 4523 00c8 0AE0     	 b .L301
 4524              	.L318:
 832:../cleanflight/src/main/flight/pid.c ****             } else {
 833:../cleanflight/src/main/flight/pid.c ****                 pidData[axis].F = 0;
 4525              	 .loc 4 833 0
 4526 00ca 0949     	 ldr r1,.L319+4
 4527 00cc 7A68     	 ldr r2,[r7,#4]
 4528 00ce 1346     	 mov r3,r2
 4529 00d0 9B00     	 lsls r3,r3,#2
 4530 00d2 1344     	 add r3,r3,r2
 4531 00d4 9B00     	 lsls r3,r3,#2
 4532 00d6 0B44     	 add r3,r3,r1
 4533 00d8 0833     	 adds r3,r3,#8
 4534 00da 4FF00002 	 mov r2,#0
 4535 00de 5A60     	 str r2,[r3,#4]
 4536              	.L301:
 834:../cleanflight/src/main/flight/pid.c ****             }
 835:../cleanflight/src/main/flight/pid.c ****         }
 836:../cleanflight/src/main/flight/pid.c ****     }
 837:../cleanflight/src/main/flight/pid.c **** }
 4537              	 .loc 4 837 0
 4538 00e0 1437     	 adds r7,r7,#20
 4539              	.LCFI158:
 4540              	 .cfi_def_cfa_offset 4
 4541 00e2 BD46     	 mov sp,r7
 4542              	.LCFI159:
 4543              	 .cfi_def_cfa_register 13
 4544              	 
 4545 00e4 5DF8047B 	 ldr r7,[sp],#4
 4546              	.LCFI160:
 4547              	 .cfi_restore 7
 4548              	 .cfi_def_cfa_offset 0
 4549 00e8 7047     	 bx lr
 4550              	.L320:
 4551 00ea 00BF     	 .align 2
 4552              	.L319:
 4553 00ec 00000000 	 .word smartFeedforward
 4554 00f0 00000000 	 .word pidData
 4555              	 .cfi_endproc
 4556              	.LFE588:
 4558              	 .section .text.pidController,"ax",%progbits
 4559              	 .align 2
 4560              	 .global pidController
 4561              	 .thumb
 4562              	 .thumb_func
 4564              	pidController:
 4565              	.LFB589:
 838:../cleanflight/src/main/flight/pid.c **** #endif // USE_SMART_FEEDFORWARD
 839:../cleanflight/src/main/flight/pid.c **** 
 840:../cleanflight/src/main/flight/pid.c **** // Betaflight pid controller, which will be maintained in the future with additional features speci
 841:../cleanflight/src/main/flight/pid.c **** // Based on 2DOF reference design (matlab)
 842:../cleanflight/src/main/flight/pid.c **** void FAST_CODE pidController(const pidProfile_t *pidProfile, const rollAndPitchTrims_t *angleTrim, 
 843:../cleanflight/src/main/flight/pid.c **** {
 4566              	 .loc 4 843 0
 4567              	 .cfi_startproc
 4568              	 
 4569              	 
 4570 0000 90B5     	 push {r4,r7,lr}
 4571              	.LCFI161:
 4572              	 .cfi_def_cfa_offset 12
 4573              	 .cfi_offset 4,-12
 4574              	 .cfi_offset 7,-8
 4575              	 .cfi_offset 14,-4
 4576 0002 AFB0     	 sub sp,sp,#188
 4577              	.LCFI162:
 4578              	 .cfi_def_cfa_offset 200
 4579 0004 04AF     	 add r7,sp,#16
 4580              	.LCFI163:
 4581              	 .cfi_def_cfa 7,184
 4582 0006 F860     	 str r0,[r7,#12]
 4583 0008 B960     	 str r1,[r7,#8]
 4584 000a 7A60     	 str r2,[r7,#4]
 844:../cleanflight/src/main/flight/pid.c ****     static float previousGyroRateDterm[XYZ_AXIS_COUNT];
 845:../cleanflight/src/main/flight/pid.c ****     static float previousPidSetpoint[XYZ_AXIS_COUNT];
 846:../cleanflight/src/main/flight/pid.c **** 
 847:../cleanflight/src/main/flight/pid.c ****     const float tpaFactor = getThrottlePIDAttenuation();
 4585              	 .loc 4 847 0
 4586 000c FFF7FEFF 	 bl getThrottlePIDAttenuation
 4587 0010 C7F89000 	 str r0,[r7,#144]
 848:../cleanflight/src/main/flight/pid.c ****     const float motorMixRange = getMotorMixRange();
 4588              	 .loc 4 848 0
 4589 0014 FFF7FEFF 	 bl getMotorMixRange
 4590 0018 C7F88C00 	 str r0,[r7,#140]
 849:../cleanflight/src/main/flight/pid.c **** 
 850:../cleanflight/src/main/flight/pid.c **** #ifdef USE_YAW_SPIN_RECOVERY
 851:../cleanflight/src/main/flight/pid.c ****     const bool yawSpinActive = gyroYawSpinDetected();
 4591              	 .loc 4 851 0
 4592 001c FFF7FEFF 	 bl gyroYawSpinDetected
 4593 0020 0346     	 mov r3,r0
 4594 0022 87F88B30 	 strb r3,[r7,#139]
 852:../cleanflight/src/main/flight/pid.c **** #endif
 853:../cleanflight/src/main/flight/pid.c **** 
 854:../cleanflight/src/main/flight/pid.c ****     // Dynamic i component,
 855:../cleanflight/src/main/flight/pid.c ****     if ((antiGravityMode == ANTI_GRAVITY_SMOOTH) && antiGravityEnabled) {
 4595              	 .loc 4 855 0
 4596 0026 6E4B     	 ldr r3,.L422
 4597 0028 1B78     	 ldrb r3,[r3]
 4598 002a 002B     	 cmp r3,#0
 4599 002c 30D1     	 bne .L322
 4600              	 .loc 4 855 0 is_stmt 0 discriminator 1
 4601 002e 6D4B     	 ldr r3,.L422+4
 4602 0030 1B78     	 ldrb r3,[r3]
 4603 0032 002B     	 cmp r3,#0
 4604 0034 2CD0     	 beq .L322
 856:../cleanflight/src/main/flight/pid.c ****         itermAccelerator = 1 + fabsf(antiGravityThrottleHpf) * 0.01f * (itermAcceleratorGain - 1000
 4605              	 .loc 4 856 0 is_stmt 1
 4606 0036 6C4B     	 ldr r3,.L422+8
 4607 0038 D3ED007A 	 flds s15,[r3]
 4608 003c F0EEE77A 	 fabss s15,s15
 4609 0040 9FED6A7A 	 flds s14,.L422+12
 4610 0044 27EE877A 	 fmuls s14,s15,s14
 4611 0048 694B     	 ldr r3,.L422+16
 4612 004a 1B88     	 ldrh r3,[r3]
 4613 004c A3F57A73 	 sub r3,r3,#1000
 4614 0050 07EE903A 	 fmsr s15,r3
 4615 0054 F8EEE77A 	 fsitos s15,s15
 4616 0058 67EE277A 	 fmuls s15,s14,s15
 4617 005c B7EE007A 	 fconsts s14,#112
 4618 0060 77EE877A 	 fadds s15,s15,s14
 4619 0064 634B     	 ldr r3,.L422+20
 4620 0066 C3ED007A 	 fsts s15,[r3]
 857:../cleanflight/src/main/flight/pid.c ****         DEBUG_SET(DEBUG_ANTI_GRAVITY, 1, lrintf(antiGravityThrottleHpf * 1000));
 4621              	 .loc 4 857 0
 4622 006a 634B     	 ldr r3,.L422+24
 4623 006c 1B78     	 ldrb r3,[r3]
 4624 006e 2B2B     	 cmp r3,#43
 4625 0070 0ED1     	 bne .L322
 4626              	 .loc 4 857 0 is_stmt 0 discriminator 1
 4627 0072 5D4B     	 ldr r3,.L422+8
 4628 0074 D3ED007A 	 flds s15,[r3]
 4629 0078 9FED607A 	 flds s14,.L422+28
 4630 007c 67EE877A 	 fmuls s15,s15,s14
 4631 0080 17EE900A 	 fmrs r0,s15
 4632 0084 FFF7FEFF 	 bl lrintf
 4633 0088 0346     	 mov r3,r0
 4634 008a 9AB2     	 uxth r2,r3
 4635 008c 5C4B     	 ldr r3,.L422+32
 4636 008e 5A80     	 strh r2,[r3,#2]
 4637              	.L322:
 858:../cleanflight/src/main/flight/pid.c ****     }
 859:../cleanflight/src/main/flight/pid.c ****     DEBUG_SET(DEBUG_ANTI_GRAVITY, 0, lrintf(itermAccelerator * 1000));
 4638              	 .loc 4 859 0 is_stmt 1
 4639 0090 594B     	 ldr r3,.L422+24
 4640 0092 1B78     	 ldrb r3,[r3]
 4641 0094 2B2B     	 cmp r3,#43
 4642 0096 0ED1     	 bne .L323
 4643              	 .loc 4 859 0 is_stmt 0 discriminator 1
 4644 0098 564B     	 ldr r3,.L422+20
 4645 009a D3ED007A 	 flds s15,[r3]
 4646 009e 9FED577A 	 flds s14,.L422+28
 4647 00a2 67EE877A 	 fmuls s15,s15,s14
 4648 00a6 17EE900A 	 fmrs r0,s15
 4649 00aa FFF7FEFF 	 bl lrintf
 4650 00ae 0346     	 mov r3,r0
 4651 00b0 9AB2     	 uxth r2,r3
 4652 00b2 534B     	 ldr r3,.L422+32
 4653 00b4 1A80     	 strh r2,[r3]
 4654              	.L323:
 4655              	.LBB44:
 860:../cleanflight/src/main/flight/pid.c ****     // gradually scale back integration when above windup point
 861:../cleanflight/src/main/flight/pid.c ****     const float dynCi = MIN((1.0f - motorMixRange) * ITermWindupPointInv, 1.0f) * dT * itermAcceler
 4656              	 .loc 4 861 0 is_stmt 1
 4657 00b6 B7EE007A 	 fconsts s14,#112
 4658 00ba D7ED237A 	 flds s15,[r7,#140]
 4659 00be 37EE677A 	 fsubs s14,s14,s15
 4660 00c2 504B     	 ldr r3,.L422+36
 4661 00c4 D3ED007A 	 flds s15,[r3]
 4662 00c8 67EE277A 	 fmuls s15,s14,s15
 4663 00cc C7ED217A 	 fsts s15,[r7,#132]
 4664 00d0 4FF07E53 	 mov r3,#1065353216
 4665 00d4 C7F88030 	 str r3,[r7,#128]
 4666 00d8 97ED217A 	 flds s14,[r7,#132]
 4667 00dc D7ED207A 	 flds s15,[r7,#128]
 4668 00e0 B4EEE77A 	 fcmpes s14,s15
 4669 00e4 F1EE10FA 	 fmstat
 4670 00e8 02D5     	 bpl .L413
 4671              	 .loc 4 861 0 is_stmt 0 discriminator 1
 4672 00ea D7ED217A 	 flds s15,[r7,#132]
 4673 00ee 01E0     	 b .L326
 4674              	.L413:
 4675              	 .loc 4 861 0 discriminator 2
 4676 00f0 D7ED207A 	 flds s15,[r7,#128]
 4677              	.L326:
 4678              	.LBE44:
 4679              	 .loc 4 861 0 discriminator 4
 4680 00f4 444B     	 ldr r3,.L422+40
 4681 00f6 93ED007A 	 flds s14,[r3]
 4682 00fa 27EE877A 	 fmuls s14,s15,s14
 4683 00fe 3D4B     	 ldr r3,.L422+20
 4684 0100 D3ED007A 	 flds s15,[r3]
 4685 0104 67EE277A 	 fmuls s15,s14,s15
 4686 0108 C7ED1F7A 	 fsts s15,[r7,#124]
 4687              	.LBB45:
 862:../cleanflight/src/main/flight/pid.c **** 
 863:../cleanflight/src/main/flight/pid.c ****     // Precalculate gyro deta for D-term here, this allows loop unrolling
 864:../cleanflight/src/main/flight/pid.c ****     float gyroRateDterm[XYZ_AXIS_COUNT];
 865:../cleanflight/src/main/flight/pid.c ****     for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 4688              	 .loc 4 865 0 is_stmt 1 discriminator 4
 4689 010c 0023     	 movs r3,#0
 4690 010e C7F8A430 	 str r3,[r7,#164]
 4691 0112 59E0     	 b .L327
 4692              	.L328:
 866:../cleanflight/src/main/flight/pid.c ****         gyroRateDterm[axis] = dtermNotchApplyFn((filter_t *) &dtermNotch[axis], gyro.gyroADCf[axis]
 4693              	 .loc 4 866 0 discriminator 3
 4694 0114 3D4B     	 ldr r3,.L422+44
 4695 0116 1C68     	 ldr r4,[r3]
 4696 0118 D7F8A420 	 ldr r2,[r7,#164]
 4697 011c 1346     	 mov r3,r2
 4698 011e DB00     	 lsls r3,r3,#3
 4699 0120 1344     	 add r3,r3,r2
 4700 0122 9B00     	 lsls r3,r3,#2
 4701 0124 3A4A     	 ldr r2,.L422+48
 4702 0126 9918     	 adds r1,r3,r2
 4703 0128 3A4A     	 ldr r2,.L422+52
 4704 012a D7F8A430 	 ldr r3,[r7,#164]
 4705 012e 9B00     	 lsls r3,r3,#2
 4706 0130 1344     	 add r3,r3,r2
 4707 0132 5B68     	 ldr r3,[r3,#4]
 4708 0134 0846     	 mov r0,r1
 4709 0136 1946     	 mov r1,r3
 4710 0138 A047     	 blx r4
 4711 013a 0246     	 mov r2,r0
 4712 013c D7F8A430 	 ldr r3,[r7,#164]
 4713 0140 9B00     	 lsls r3,r3,#2
 4714 0142 07F1A801 	 add r1,r7,#168
 4715 0146 0B44     	 add r3,r3,r1
 4716 0148 8C3B     	 subs r3,r3,#140
 4717 014a 1A60     	 str r2,[r3]
 867:../cleanflight/src/main/flight/pid.c ****         gyroRateDterm[axis] = dtermLowpassApplyFn((filter_t *) &dtermLowpass[axis], gyroRateDterm[a
 4718              	 .loc 4 867 0 discriminator 3
 4719 014c 324B     	 ldr r3,.L422+56
 4720 014e 1C68     	 ldr r4,[r3]
 4721 0150 D7F8A420 	 ldr r2,[r7,#164]
 4722 0154 1346     	 mov r3,r2
 4723 0156 DB00     	 lsls r3,r3,#3
 4724 0158 1344     	 add r3,r3,r2
 4725 015a 9B00     	 lsls r3,r3,#2
 4726 015c 2F4A     	 ldr r2,.L422+60
 4727 015e 1A44     	 add r2,r2,r3
 4728 0160 D7F8A430 	 ldr r3,[r7,#164]
 4729 0164 9B00     	 lsls r3,r3,#2
 4730 0166 07F1A801 	 add r1,r7,#168
 4731 016a 0B44     	 add r3,r3,r1
 4732 016c 8C3B     	 subs r3,r3,#140
 4733 016e 1B68     	 ldr r3,[r3]
 4734 0170 1046     	 mov r0,r2
 4735 0172 1946     	 mov r1,r3
 4736 0174 A047     	 blx r4
 4737 0176 0246     	 mov r2,r0
 4738 0178 D7F8A430 	 ldr r3,[r7,#164]
 4739 017c 9B00     	 lsls r3,r3,#2
 4740 017e 07F1A801 	 add r1,r7,#168
 4741 0182 0B44     	 add r3,r3,r1
 4742 0184 8C3B     	 subs r3,r3,#140
 4743 0186 1A60     	 str r2,[r3]
 868:../cleanflight/src/main/flight/pid.c ****         gyroRateDterm[axis] = dtermLowpass2ApplyFn((filter_t *) &dtermLowpass2[axis], gyroRateDterm
 4744              	 .loc 4 868 0 discriminator 3
 4745 0188 254B     	 ldr r3,.L422+64
 4746 018a 1B68     	 ldr r3,[r3]
 4747 018c D7F8A420 	 ldr r2,[r7,#164]
 4748 0190 D200     	 lsls r2,r2,#3
 4749 0192 2449     	 ldr r1,.L422+68
 4750 0194 1144     	 add r1,r1,r2
 4751 0196 D7F8A420 	 ldr r2,[r7,#164]
 4752 019a 9200     	 lsls r2,r2,#2
 4753 019c 07F1A800 	 add r0,r7,#168
 4754 01a0 0244     	 add r2,r2,r0
 4755 01a2 8C3A     	 subs r2,r2,#140
 4756 01a4 1268     	 ldr r2,[r2]
 4757 01a6 0846     	 mov r0,r1
 4758 01a8 1146     	 mov r1,r2
 4759 01aa 9847     	 blx r3
 4760 01ac 0246     	 mov r2,r0
 4761 01ae D7F8A430 	 ldr r3,[r7,#164]
 4762 01b2 9B00     	 lsls r3,r3,#2
 4763 01b4 07F1A801 	 add r1,r7,#168
 4764 01b8 0B44     	 add r3,r3,r1
 4765 01ba 8C3B     	 subs r3,r3,#140
 4766 01bc 1A60     	 str r2,[r3]
 865:../cleanflight/src/main/flight/pid.c ****         gyroRateDterm[axis] = dtermNotchApplyFn((filter_t *) &dtermNotch[axis], gyro.gyroADCf[axis]
 4767              	 .loc 4 865 0 discriminator 3
 4768 01be D7F8A430 	 ldr r3,[r7,#164]
 4769 01c2 0133     	 adds r3,r3,#1
 4770 01c4 C7F8A430 	 str r3,[r7,#164]
 4771              	.L327:
 865:../cleanflight/src/main/flight/pid.c ****         gyroRateDterm[axis] = dtermNotchApplyFn((filter_t *) &dtermNotch[axis], gyro.gyroADCf[axis]
 4772              	 .loc 4 865 0 is_stmt 0 discriminator 1
 4773 01c8 D7F8A430 	 ldr r3,[r7,#164]
 4774 01cc 022B     	 cmp r3,#2
 4775 01ce A1DD     	 ble .L328
 4776              	.LBE45:
 869:../cleanflight/src/main/flight/pid.c ****     }
 870:../cleanflight/src/main/flight/pid.c **** 
 871:../cleanflight/src/main/flight/pid.c ****     rotateITermAndAxisError();
 4777              	 .loc 4 871 0 is_stmt 1
 4778 01d0 FFF7FEFF 	 bl rotateITermAndAxisError
 4779              	.LBB46:
 872:../cleanflight/src/main/flight/pid.c **** 
 873:../cleanflight/src/main/flight/pid.c ****     // ----------PID controller----------
 874:../cleanflight/src/main/flight/pid.c ****     for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 4780              	 .loc 4 874 0
 4781 01d4 0023     	 movs r3,#0
 4782 01d6 C7F8A030 	 str r3,[r7,#160]
 4783 01da 00F0C2BC 	 b .L329
 4784              	.L423:
 4785 01de 00BF     	 .align 2
 4786              	.L422:
 4787 01e0 00000000 	 .word antiGravityMode
 4788 01e4 00000000 	 .word antiGravityEnabled
 4789 01e8 00000000 	 .word antiGravityThrottleHpf
 4790 01ec 0AD7233C 	 .word 1008981770
 4791 01f0 00000000 	 .word itermAcceleratorGain
 4792 01f4 00000000 	 .word itermAccelerator
 4793 01f8 00000000 	 .word debugMode
 4794 01fc 00007A44 	 .word 1148846080
 4795 0200 00000000 	 .word debug
 4796 0204 00000000 	 .word ITermWindupPointInv
 4797 0208 00000000 	 .word dT
 4798 020c 00000000 	 .word dtermNotchApplyFn
 4799 0210 00000000 	 .word dtermNotch
 4800 0214 00000000 	 .word gyro
 4801 0218 00000000 	 .word dtermLowpassApplyFn
 4802 021c 00000000 	 .word dtermLowpass
 4803 0220 00000000 	 .word dtermLowpass2ApplyFn
 4804 0224 00000000 	 .word dtermLowpass2
 4805              	.L392:
 4806              	.LBB47:
 875:../cleanflight/src/main/flight/pid.c **** 
 876:../cleanflight/src/main/flight/pid.c ****         float currentPidSetpoint = getSetpointRate(axis);
 4807              	 .loc 4 876 0
 4808 0228 D7F8A000 	 ldr r0,[r7,#160]
 4809 022c FFF7FEFF 	 bl getSetpointRate
 4810 0230 0346     	 mov r3,r0
 4811 0232 BB61     	 str r3,[r7,#24]
 877:../cleanflight/src/main/flight/pid.c ****         if (maxVelocity[axis]) {
 4812              	 .loc 4 877 0
 4813 0234 C94A     	 ldr r2,.L424
 4814 0236 D7F8A030 	 ldr r3,[r7,#160]
 4815 023a 9B00     	 lsls r3,r3,#2
 4816 023c 1344     	 add r3,r3,r2
 4817 023e D3ED007A 	 flds s15,[r3]
 4818 0242 F5EE407A 	 fcmpzs s15
 4819 0246 F1EE10FA 	 fmstat
 4820 024a 07D0     	 beq .L330
 878:../cleanflight/src/main/flight/pid.c ****             currentPidSetpoint = accelerationLimit(axis, currentPidSetpoint);
 4821              	 .loc 4 878 0
 4822 024c BB69     	 ldr r3,[r7,#24]
 4823 024e D7F8A000 	 ldr r0,[r7,#160]
 4824 0252 1946     	 mov r1,r3
 4825 0254 FFF7FEFF 	 bl accelerationLimit
 4826 0258 0346     	 mov r3,r0
 4827 025a BB61     	 str r3,[r7,#24]
 4828              	.L330:
 879:../cleanflight/src/main/flight/pid.c ****         }
 880:../cleanflight/src/main/flight/pid.c ****         // Yaw control is GYRO based, direct sticks control is applied to rate PID
 881:../cleanflight/src/main/flight/pid.c ****         if ((FLIGHT_MODE(ANGLE_MODE) || FLIGHT_MODE(HORIZON_MODE) || FLIGHT_MODE(GPS_RESCUE_MODE)) 
 4829              	 .loc 4 881 0
 4830 025c C04B     	 ldr r3,.L424+4
 4831 025e 1B88     	 ldrh r3,[r3]
 4832 0260 03F00103 	 and r3,r3,#1
 4833 0264 002B     	 cmp r3,#0
 4834 0266 0BD1     	 bne .L331
 4835              	 .loc 4 881 0 is_stmt 0 discriminator 2
 4836 0268 BD4B     	 ldr r3,.L424+4
 4837 026a 1B88     	 ldrh r3,[r3]
 4838 026c 03F00203 	 and r3,r3,#2
 4839 0270 002B     	 cmp r3,#0
 4840 0272 05D1     	 bne .L331
 4841              	 .loc 4 881 0 discriminator 4
 4842 0274 BA4B     	 ldr r3,.L424+4
 4843 0276 1B88     	 ldrh r3,[r3]
 4844 0278 03F40063 	 and r3,r3,#2048
 4845 027c 002B     	 cmp r3,#0
 4846 027e 0CD0     	 beq .L332
 4847              	.L331:
 4848              	 .loc 4 881 0 discriminator 5
 4849 0280 D7F8A030 	 ldr r3,[r7,#160]
 4850 0284 022B     	 cmp r3,#2
 4851 0286 08D0     	 beq .L332
 882:../cleanflight/src/main/flight/pid.c ****             currentPidSetpoint = pidLevel(axis, pidProfile, angleTrim, currentPidSetpoint);
 4852              	 .loc 4 882 0 is_stmt 1
 4853 0288 BB69     	 ldr r3,[r7,#24]
 4854 028a D7F8A000 	 ldr r0,[r7,#160]
 4855 028e F968     	 ldr r1,[r7,#12]
 4856 0290 BA68     	 ldr r2,[r7,#8]
 4857 0292 FFF7FEFF 	 bl pidLevel
 4858 0296 0346     	 mov r3,r0
 4859 0298 BB61     	 str r3,[r7,#24]
 4860              	.L332:
 883:../cleanflight/src/main/flight/pid.c ****         }
 884:../cleanflight/src/main/flight/pid.c **** 
 885:../cleanflight/src/main/flight/pid.c **** #ifdef USE_ACRO_TRAINER
 886:../cleanflight/src/main/flight/pid.c ****         if ((axis != FD_YAW) && acroTrainerActive && !inCrashRecoveryMode) {
 4861              	 .loc 4 886 0
 4862 029a D7F8A030 	 ldr r3,[r7,#160]
 4863 029e 022B     	 cmp r3,#2
 4864 02a0 13D0     	 beq .L333
 4865              	 .loc 4 886 0 is_stmt 0 discriminator 1
 4866 02a2 B04B     	 ldr r3,.L424+8
 4867 02a4 1B78     	 ldrb r3,[r3]
 4868 02a6 002B     	 cmp r3,#0
 4869 02a8 0FD0     	 beq .L333
 4870              	 .loc 4 886 0 discriminator 2
 4871 02aa AF4B     	 ldr r3,.L424+12
 4872 02ac 1B78     	 ldrb r3,[r3]
 4873 02ae 83F00103 	 eor r3,r3,#1
 4874 02b2 DBB2     	 uxtb r3,r3
 4875 02b4 002B     	 cmp r3,#0
 4876 02b6 08D0     	 beq .L333
 887:../cleanflight/src/main/flight/pid.c ****             currentPidSetpoint = applyAcroTrainer(axis, angleTrim, currentPidSetpoint);
 4877              	 .loc 4 887 0 is_stmt 1
 4878 02b8 BB69     	 ldr r3,[r7,#24]
 4879 02ba D7F8A000 	 ldr r0,[r7,#160]
 4880 02be B968     	 ldr r1,[r7,#8]
 4881 02c0 1A46     	 mov r2,r3
 4882 02c2 FFF7FEFF 	 bl applyAcroTrainer
 4883 02c6 0346     	 mov r3,r0
 4884 02c8 BB61     	 str r3,[r7,#24]
 4885              	.L333:
 888:../cleanflight/src/main/flight/pid.c ****         }
 889:../cleanflight/src/main/flight/pid.c **** #endif // USE_ACRO_TRAINER
 890:../cleanflight/src/main/flight/pid.c **** 
 891:../cleanflight/src/main/flight/pid.c ****         // Handle yaw spin recovery - zero the setpoint on yaw to aid in recovery
 892:../cleanflight/src/main/flight/pid.c ****         // It's not necessary to zero the set points for R/P because the PIDs will be zeroed below
 893:../cleanflight/src/main/flight/pid.c **** #ifdef USE_YAW_SPIN_RECOVERY
 894:../cleanflight/src/main/flight/pid.c ****         if ((axis == FD_YAW) && yawSpinActive) {
 4886              	 .loc 4 894 0
 4887 02ca D7F8A030 	 ldr r3,[r7,#160]
 4888 02ce 022B     	 cmp r3,#2
 4889 02d0 06D1     	 bne .L334
 4890              	 .loc 4 894 0 is_stmt 0 discriminator 1
 4891 02d2 97F88B30 	 ldrb r3,[r7,#139]
 4892 02d6 002B     	 cmp r3,#0
 4893 02d8 02D0     	 beq .L334
 895:../cleanflight/src/main/flight/pid.c ****             currentPidSetpoint = 0.0f;
 4894              	 .loc 4 895 0 is_stmt 1
 4895 02da 4FF00003 	 mov r3,#0
 4896 02de BB61     	 str r3,[r7,#24]
 4897              	.L334:
 896:../cleanflight/src/main/flight/pid.c ****         }
 897:../cleanflight/src/main/flight/pid.c **** #endif // USE_YAW_SPIN_RECOVERY
 898:../cleanflight/src/main/flight/pid.c **** 
 899:../cleanflight/src/main/flight/pid.c ****         // -----calculate error rate
 900:../cleanflight/src/main/flight/pid.c ****         const float gyroRate = gyro.gyroADCf[axis]; // Process variable from gyro output in deg/sec
 4898              	 .loc 4 900 0
 4899 02e0 A24A     	 ldr r2,.L424+16
 4900 02e2 D7F8A030 	 ldr r3,[r7,#160]
 4901 02e6 9B00     	 lsls r3,r3,#2
 4902 02e8 1344     	 add r3,r3,r2
 4903 02ea 5B68     	 ldr r3,[r3,#4]
 4904 02ec BB67     	 str r3,[r7,#120]
 901:../cleanflight/src/main/flight/pid.c **** 
 902:../cleanflight/src/main/flight/pid.c **** #ifdef USE_ABSOLUTE_CONTROL
 903:../cleanflight/src/main/flight/pid.c ****         float acCorrection = 0;
 4905              	 .loc 4 903 0
 4906 02ee 4FF00003 	 mov r3,#0
 4907 02f2 7B67     	 str r3,[r7,#116]
 904:../cleanflight/src/main/flight/pid.c ****         float acErrorRate;
 905:../cleanflight/src/main/flight/pid.c **** #endif        
 906:../cleanflight/src/main/flight/pid.c **** 
 907:../cleanflight/src/main/flight/pid.c ****         const float ITerm = pidData[axis].I;
 4908              	 .loc 4 907 0
 4909 02f4 9E49     	 ldr r1,.L424+20
 4910 02f6 D7F8A020 	 ldr r2,[r7,#160]
 4911 02fa 1346     	 mov r3,r2
 4912 02fc 9B00     	 lsls r3,r3,#2
 4913 02fe 1344     	 add r3,r3,r2
 4914 0300 9B00     	 lsls r3,r3,#2
 4915 0302 0B44     	 add r3,r3,r1
 4916 0304 5B68     	 ldr r3,[r3,#4]
 4917 0306 3B67     	 str r3,[r7,#112]
 908:../cleanflight/src/main/flight/pid.c ****         float itermErrorRate = currentPidSetpoint - gyroRate;
 4918              	 .loc 4 908 0
 4919 0308 97ED067A 	 flds s14,[r7,#24]
 4920 030c D7ED1E7A 	 flds s15,[r7,#120]
 4921 0310 77EE677A 	 fsubs s15,s14,s15
 4922 0314 C7ED267A 	 fsts s15,[r7,#152]
 909:../cleanflight/src/main/flight/pid.c **** 
 910:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ITERM_RELAX)
 911:../cleanflight/src/main/flight/pid.c ****         if (itermRelax && (axis < FD_YAW || itermRelax == ITERM_RELAX_RPY || itermRelax == ITERM_RE
 4923              	 .loc 4 911 0
 4924 0318 964B     	 ldr r3,.L424+24
 4925 031a 1B78     	 ldrb r3,[r3]
 4926 031c 002B     	 cmp r3,#0
 4927 031e 00F06081 	 beq .L335
 4928              	 .loc 4 911 0 is_stmt 0 discriminator 1
 4929 0322 D7F8A030 	 ldr r3,[r7,#160]
 4930 0326 012B     	 cmp r3,#1
 4931 0328 08DD     	 ble .L336
 4932              	 .loc 4 911 0 discriminator 2
 4933 032a 924B     	 ldr r3,.L424+24
 4934 032c 1B78     	 ldrb r3,[r3]
 4935 032e 022B     	 cmp r3,#2
 4936 0330 04D0     	 beq .L336
 4937              	 .loc 4 911 0 discriminator 3
 4938 0332 904B     	 ldr r3,.L424+24
 4939 0334 1B78     	 ldrb r3,[r3]
 4940 0336 042B     	 cmp r3,#4
 4941 0338 40F05381 	 bne .L335
 4942              	.L336:
 4943              	.LBB48:
 912:../cleanflight/src/main/flight/pid.c ****             const float setpointLpf = pt1FilterApply(&windupLpf[axis], currentPidSetpoint);
 4944              	 .loc 4 912 0 is_stmt 1
 4945 033c D7F8A030 	 ldr r3,[r7,#160]
 4946 0340 DB00     	 lsls r3,r3,#3
 4947 0342 8D4A     	 ldr r2,.L424+28
 4948 0344 1A44     	 add r2,r2,r3
 4949 0346 BB69     	 ldr r3,[r7,#24]
 4950 0348 1046     	 mov r0,r2
 4951 034a 1946     	 mov r1,r3
 4952 034c FFF7FEFF 	 bl pt1FilterApply
 4953 0350 F866     	 str r0,[r7,#108]
 913:../cleanflight/src/main/flight/pid.c ****             const float setpointHpf = fabsf(currentPidSetpoint - setpointLpf);
 4954              	 .loc 4 913 0
 4955 0352 97ED067A 	 flds s14,[r7,#24]
 4956 0356 D7ED1B7A 	 flds s15,[r7,#108]
 4957 035a 77EE677A 	 fsubs s15,s14,s15
 4958 035e F0EEE77A 	 fabss s15,s15
 4959 0362 C7ED1A7A 	 fsts s15,[r7,#104]
 914:../cleanflight/src/main/flight/pid.c ****             const float itermRelaxFactor = 1 - setpointHpf / ITERM_RELAX_SETPOINT_THRESHOLD;
 4960              	 .loc 4 914 0
 4961 0366 D7ED1A7A 	 flds s15,[r7,#104]
 4962 036a B3EE0E7A 	 fconsts s14,#62
 4963 036e C7EE877A 	 fdivs s15,s15,s14
 4964 0372 B7EE007A 	 fconsts s14,#112
 4965 0376 77EE677A 	 fsubs s15,s14,s15
 4966 037a C7ED197A 	 fsts s15,[r7,#100]
 915:../cleanflight/src/main/flight/pid.c **** 
 916:../cleanflight/src/main/flight/pid.c ****             const bool isDecreasingI = ((ITerm > 0) && (itermErrorRate < 0)) || ((ITerm < 0) && (it
 4967              	 .loc 4 916 0
 4968 037e D7ED1C7A 	 flds s15,[r7,#112]
 4969 0382 F5EEC07A 	 fcmpezs s15
 4970 0386 F1EE10FA 	 fmstat
 4971 038a 06DD     	 ble .L337
 4972              	 .loc 4 916 0 is_stmt 0 discriminator 1
 4973 038c D7ED267A 	 flds s15,[r7,#152]
 4974 0390 F5EEC07A 	 fcmpezs s15
 4975 0394 F1EE10FA 	 fmstat
 4976 0398 0DD4     	 bmi .L339
 4977              	.L337:
 4978              	 .loc 4 916 0 discriminator 4
 4979 039a D7ED1C7A 	 flds s15,[r7,#112]
 4980 039e F5EEC07A 	 fcmpezs s15
 4981 03a2 F1EE10FA 	 fmstat
 4982 03a6 08D5     	 bpl .L340
 4983              	 .loc 4 916 0 discriminator 5
 4984 03a8 D7ED267A 	 flds s15,[r7,#152]
 4985 03ac F5EEC07A 	 fcmpezs s15
 4986 03b0 F1EE10FA 	 fmstat
 4987 03b4 01DD     	 ble .L340
 4988              	.L339:
 4989              	 .loc 4 916 0 discriminator 7
 4990 03b6 0123     	 movs r3,#1
 4991 03b8 00E0     	 b .L343
 4992              	.L340:
 4993              	 .loc 4 916 0 discriminator 8
 4994 03ba 0023     	 movs r3,#0
 4995              	.L343:
 4996              	 .loc 4 916 0 discriminator 10
 4997 03bc 87F86330 	 strb r3,[r7,#99]
 4998 03c0 97F86330 	 ldrb r3,[r7,#99]
 4999 03c4 03F00103 	 and r3,r3,#1
 5000 03c8 87F86330 	 strb r3,[r7,#99]
 917:../cleanflight/src/main/flight/pid.c ****             if ((itermRelax >= ITERM_RELAX_RP_INC) && isDecreasingI) {
 5001              	 .loc 4 917 0 is_stmt 1 discriminator 10
 5002 03cc 694B     	 ldr r3,.L424+24
 5003 03ce 1B78     	 ldrb r3,[r3]
 5004 03d0 022B     	 cmp r3,#2
 5005 03d2 04D9     	 bls .L344
 5006              	 .loc 4 917 0 is_stmt 0 discriminator 1
 5007 03d4 97F86330 	 ldrb r3,[r7,#99]
 5008 03d8 002B     	 cmp r3,#0
 5009 03da 00D0     	 beq .L344
 5010              	 .loc 4 917 0
 5011 03dc 2BE0     	 b .L345
 5012              	.L344:
 918:../cleanflight/src/main/flight/pid.c ****                 // Do Nothing, use the precalculed itermErrorRate
 919:../cleanflight/src/main/flight/pid.c ****             } else if (itermRelaxType == ITERM_RELAX_SETPOINT && setpointHpf < 30) {
 5013              	 .loc 4 919 0 is_stmt 1
 5014 03de 674B     	 ldr r3,.L424+32
 5015 03e0 1B78     	 ldrb r3,[r3]
 5016 03e2 012B     	 cmp r3,#1
 5017 03e4 11D1     	 bne .L346
 5018              	 .loc 4 919 0 is_stmt 0 discriminator 1
 5019 03e6 D7ED1A7A 	 flds s15,[r7,#104]
 5020 03ea B3EE0E7A 	 fconsts s14,#62
 5021 03ee F4EEC77A 	 fcmpes s15,s14
 5022 03f2 F1EE10FA 	 fmstat
 5023 03f6 08D5     	 bpl .L346
 920:../cleanflight/src/main/flight/pid.c ****                 itermErrorRate *= itermRelaxFactor;
 5024              	 .loc 4 920 0 is_stmt 1
 5025 03f8 97ED267A 	 flds s14,[r7,#152]
 5026 03fc D7ED197A 	 flds s15,[r7,#100]
 5027 0400 67EE277A 	 fmuls s15,s14,s15
 5028 0404 C7ED267A 	 fsts s15,[r7,#152]
 5029 0408 15E0     	 b .L345
 5030              	.L346:
 921:../cleanflight/src/main/flight/pid.c ****             } else if (itermRelaxType == ITERM_RELAX_GYRO ) {
 5031              	 .loc 4 921 0
 5032 040a 5C4B     	 ldr r3,.L424+32
 5033 040c 1B78     	 ldrb r3,[r3]
 5034 040e 002B     	 cmp r3,#0
 5035 0410 0DD1     	 bne .L348
 922:../cleanflight/src/main/flight/pid.c ****                 itermErrorRate = fapplyDeadband(setpointLpf - gyroRate, setpointHpf);
 5036              	 .loc 4 922 0
 5037 0412 97ED1B7A 	 flds s14,[r7,#108]
 5038 0416 D7ED1E7A 	 flds s15,[r7,#120]
 5039 041a 77EE677A 	 fsubs s15,s14,s15
 5040 041e 17EE900A 	 fmrs r0,s15
 5041 0422 B96E     	 ldr r1,[r7,#104]
 5042 0424 FFF7FEFF 	 bl fapplyDeadband
 5043 0428 C7F89800 	 str r0,[r7,#152]
 5044 042c 03E0     	 b .L345
 5045              	.L348:
 923:../cleanflight/src/main/flight/pid.c ****             } else {
 924:../cleanflight/src/main/flight/pid.c ****                 itermErrorRate = 0.0f;
 5046              	 .loc 4 924 0
 5047 042e 4FF00003 	 mov r3,#0
 5048 0432 C7F89830 	 str r3,[r7,#152]
 5049              	.L345:
 925:../cleanflight/src/main/flight/pid.c ****             }
 926:../cleanflight/src/main/flight/pid.c **** 
 927:../cleanflight/src/main/flight/pid.c ****             if (axis == FD_ROLL) {
 5050              	 .loc 4 927 0
 5051 0436 D7F8A030 	 ldr r3,[r7,#160]
 5052 043a 002B     	 cmp r3,#0
 5053 043c 28D1     	 bne .L349
 928:../cleanflight/src/main/flight/pid.c ****                 DEBUG_SET(DEBUG_ITERM_RELAX, 0, lrintf(setpointHpf));
 5054              	 .loc 4 928 0
 5055 043e 504B     	 ldr r3,.L424+36
 5056 0440 1B78     	 ldrb r3,[r3]
 5057 0442 262B     	 cmp r3,#38
 5058 0444 06D1     	 bne .L350
 5059              	 .loc 4 928 0 is_stmt 0 discriminator 1
 5060 0446 B86E     	 ldr r0,[r7,#104]
 5061 0448 FFF7FEFF 	 bl lrintf
 5062 044c 0346     	 mov r3,r0
 5063 044e 9AB2     	 uxth r2,r3
 5064 0450 4C4B     	 ldr r3,.L424+40
 5065 0452 1A80     	 strh r2,[r3]
 5066              	.L350:
 929:../cleanflight/src/main/flight/pid.c ****                 DEBUG_SET(DEBUG_ITERM_RELAX, 1, lrintf(itermRelaxFactor * 100.0f));
 5067              	 .loc 4 929 0 is_stmt 1
 5068 0454 4A4B     	 ldr r3,.L424+36
 5069 0456 1B78     	 ldrb r3,[r3]
 5070 0458 262B     	 cmp r3,#38
 5071 045a 0DD1     	 bne .L351
 5072              	 .loc 4 929 0 is_stmt 0 discriminator 1
 5073 045c D7ED197A 	 flds s15,[r7,#100]
 5074 0460 9FED497A 	 flds s14,.L424+44
 5075 0464 67EE877A 	 fmuls s15,s15,s14
 5076 0468 17EE900A 	 fmrs r0,s15
 5077 046c FFF7FEFF 	 bl lrintf
 5078 0470 0346     	 mov r3,r0
 5079 0472 9AB2     	 uxth r2,r3
 5080 0474 434B     	 ldr r3,.L424+40
 5081 0476 5A80     	 strh r2,[r3,#2]
 5082              	.L351:
 930:../cleanflight/src/main/flight/pid.c ****                 DEBUG_SET(DEBUG_ITERM_RELAX, 2, lrintf(itermErrorRate));
 5083              	 .loc 4 930 0 is_stmt 1
 5084 0478 414B     	 ldr r3,.L424+36
 5085 047a 1B78     	 ldrb r3,[r3]
 5086 047c 262B     	 cmp r3,#38
 5087 047e 07D1     	 bne .L349
 5088              	 .loc 4 930 0 is_stmt 0 discriminator 1
 5089 0480 D7F89800 	 ldr r0,[r7,#152]
 5090 0484 FFF7FEFF 	 bl lrintf
 5091 0488 0346     	 mov r3,r0
 5092 048a 9AB2     	 uxth r2,r3
 5093 048c 3D4B     	 ldr r3,.L424+40
 5094 048e 9A80     	 strh r2,[r3,#4]
 5095              	.L349:
 931:../cleanflight/src/main/flight/pid.c ****             }
 932:../cleanflight/src/main/flight/pid.c **** 
 933:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ABSOLUTE_CONTROL)
 934:../cleanflight/src/main/flight/pid.c ****             const float gmaxac = setpointLpf + 2 * setpointHpf;
 5096              	 .loc 4 934 0 is_stmt 1
 5097 0490 D7ED1A7A 	 flds s15,[r7,#104]
 5098 0494 37EEA77A 	 fadds s14,s15,s15
 5099 0498 D7ED1B7A 	 flds s15,[r7,#108]
 5100 049c 77EE277A 	 fadds s15,s14,s15
 5101 04a0 C7ED177A 	 fsts s15,[r7,#92]
 935:../cleanflight/src/main/flight/pid.c ****             const float gminac = setpointLpf - 2 * setpointHpf;
 5102              	 .loc 4 935 0
 5103 04a4 D7ED1A7A 	 flds s15,[r7,#104]
 5104 04a8 77EEA77A 	 fadds s15,s15,s15
 5105 04ac 97ED1B7A 	 flds s14,[r7,#108]
 5106 04b0 77EE677A 	 fsubs s15,s14,s15
 5107 04b4 C7ED167A 	 fsts s15,[r7,#88]
 936:../cleanflight/src/main/flight/pid.c ****             if (gyroRate >= gminac && gyroRate <= gmaxac) {
 5108              	 .loc 4 936 0
 5109 04b8 97ED1E7A 	 flds s14,[r7,#120]
 5110 04bc D7ED167A 	 flds s15,[r7,#88]
 5111 04c0 B4EEE77A 	 fcmpes s14,s15
 5112 04c4 F1EE10FA 	 fmstat
 5113 04c8 75DB     	 blt .L352
 5114              	 .loc 4 936 0 is_stmt 0 discriminator 1
 5115 04ca 97ED1E7A 	 flds s14,[r7,#120]
 5116 04ce D7ED177A 	 flds s15,[r7,#92]
 5117 04d2 B4EEE77A 	 fcmpes s14,s15
 5118 04d6 F1EE10FA 	 fmstat
 5119 04da 6CD8     	 bhi .L352
 5120              	.LBB49:
 937:../cleanflight/src/main/flight/pid.c ****                 float acErrorRate1 = gmaxac - gyroRate;
 5121              	 .loc 4 937 0 is_stmt 1
 5122 04dc 97ED177A 	 flds s14,[r7,#92]
 5123 04e0 D7ED1E7A 	 flds s15,[r7,#120]
 5124 04e4 77EE677A 	 fsubs s15,s14,s15
 5125 04e8 C7ED157A 	 fsts s15,[r7,#84]
 938:../cleanflight/src/main/flight/pid.c ****                 float acErrorRate2 = gminac - gyroRate;
 5126              	 .loc 4 938 0
 5127 04ec 97ED167A 	 flds s14,[r7,#88]
 5128 04f0 D7ED1E7A 	 flds s15,[r7,#120]
 5129 04f4 77EE677A 	 fsubs s15,s14,s15
 5130 04f8 C7ED147A 	 fsts s15,[r7,#80]
 939:../cleanflight/src/main/flight/pid.c ****                 if (acErrorRate1 * axisError[axis] < 0) {
 5131              	 .loc 4 939 0
 5132 04fc 234A     	 ldr r2,.L424+48
 5133 04fe D7F8A030 	 ldr r3,[r7,#160]
 5134 0502 9B00     	 lsls r3,r3,#2
 5135 0504 1344     	 add r3,r3,r2
 5136 0506 93ED007A 	 flds s14,[r3]
 5137 050a D7ED157A 	 flds s15,[r7,#84]
 5138 050e 67EE277A 	 fmuls s15,s14,s15
 5139 0512 F5EEC07A 	 fcmpezs s15
 5140 0516 F1EE10FA 	 fmstat
 5141 051a 03D5     	 bpl .L414
 940:../cleanflight/src/main/flight/pid.c ****                     acErrorRate = acErrorRate1;
 5142              	 .loc 4 940 0
 5143 051c 7B6D     	 ldr r3,[r7,#84]
 5144 051e C7F89C30 	 str r3,[r7,#156]
 5145 0522 02E0     	 b .L357
 5146              	.L414:
 941:../cleanflight/src/main/flight/pid.c ****                 } else {
 942:../cleanflight/src/main/flight/pid.c ****                     acErrorRate = acErrorRate2;
 5147              	 .loc 4 942 0
 5148 0524 3B6D     	 ldr r3,[r7,#80]
 5149 0526 C7F89C30 	 str r3,[r7,#156]
 5150              	.L357:
 943:../cleanflight/src/main/flight/pid.c ****                 }
 944:../cleanflight/src/main/flight/pid.c ****                 if (fabsf(acErrorRate * dT) > fabsf(axisError[axis]) ) {
 5151              	 .loc 4 944 0
 5152 052a 194B     	 ldr r3,.L424+52
 5153 052c 93ED007A 	 flds s14,[r3]
 5154 0530 D7ED277A 	 flds s15,[r7,#156]
 5155 0534 67EE277A 	 fmuls s15,s14,s15
 5156 0538 B0EEE77A 	 fabss s14,s15
 5157 053c 134A     	 ldr r2,.L424+48
 5158 053e D7F8A030 	 ldr r3,[r7,#160]
 5159 0542 9B00     	 lsls r3,r3,#2
 5160 0544 1344     	 add r3,r3,r2
 5161 0546 D3ED007A 	 flds s15,[r3]
 5162 054a F0EEE77A 	 fabss s15,s15
 5163 054e B4EEE77A 	 fcmpes s14,s15
 5164 0552 F1EE10FA 	 fmstat
 5165 0556 1DDC     	 bgt .L404
 5166              	.LBE49:
 936:../cleanflight/src/main/flight/pid.c ****                 float acErrorRate1 = gmaxac - gyroRate;
 5167              	 .loc 4 936 0
 5168 0558 42E0     	 b .L360
 5169              	.L425:
 5170 055a 00BF     	 .align 2
 5171              	.L424:
 5172 055c 00000000 	 .word maxVelocity
 5173 0560 00000000 	 .word flightModeFlags
 5174 0564 00000000 	 .word acroTrainerActive
 5175 0568 00000000 	 .word inCrashRecoveryMode
 5176 056c 00000000 	 .word gyro
 5177 0570 00000000 	 .word pidData
 5178 0574 00000000 	 .word itermRelax
 5179 0578 00000000 	 .word windupLpf
 5180 057c 00000000 	 .word itermRelaxType
 5181 0580 00000000 	 .word debugMode
 5182 0584 00000000 	 .word debug
 5183 0588 0000C842 	 .word 1120403456
 5184 058c 00000000 	 .word axisError
 5185 0590 00000000 	 .word dT
 5186              	.L404:
 5187              	.LBB50:
 945:../cleanflight/src/main/flight/pid.c ****                     acErrorRate = -axisError[axis] / dT;
 5188              	 .loc 4 945 0
 5189 0594 D74A     	 ldr r2,.L426
 5190 0596 D7F8A030 	 ldr r3,[r7,#160]
 5191 059a 9B00     	 lsls r3,r3,#2
 5192 059c 1344     	 add r3,r3,r2
 5193 059e D3ED007A 	 flds s15,[r3]
 5194 05a2 B1EE677A 	 fnegs s14,s15
 5195 05a6 D44B     	 ldr r3,.L426+4
 5196 05a8 D3ED007A 	 flds s15,[r3]
 5197 05ac C7EE277A 	 fdivs s15,s14,s15
 5198 05b0 C7ED277A 	 fsts s15,[r7,#156]
 5199              	.LBE50:
 936:../cleanflight/src/main/flight/pid.c ****                 float acErrorRate1 = gmaxac - gyroRate;
 5200              	 .loc 4 936 0
 5201 05b4 14E0     	 b .L360
 5202              	.L352:
 946:../cleanflight/src/main/flight/pid.c ****                 }
 947:../cleanflight/src/main/flight/pid.c ****             } else {
 948:../cleanflight/src/main/flight/pid.c ****                 acErrorRate = (gyroRate > gmaxac ? gmaxac : gminac ) - gyroRate;
 5203              	 .loc 4 948 0
 5204 05b6 97ED1E7A 	 flds s14,[r7,#120]
 5205 05ba D7ED177A 	 flds s15,[r7,#92]
 5206 05be B4EEE77A 	 fcmpes s14,s15
 5207 05c2 F1EE10FA 	 fmstat
 5208 05c6 02DD     	 ble .L415
 5209              	 .loc 4 948 0 is_stmt 0 discriminator 1
 5210 05c8 D7ED177A 	 flds s15,[r7,#92]
 5211 05cc 01E0     	 b .L363
 5212              	.L415:
 5213              	 .loc 4 948 0 discriminator 2
 5214 05ce D7ED167A 	 flds s15,[r7,#88]
 5215              	.L363:
 5216              	 .loc 4 948 0 discriminator 4
 5217 05d2 97ED1E7A 	 flds s14,[r7,#120]
 5218 05d6 77EEC77A 	 fsubs s15,s15,s14
 5219 05da C7ED277A 	 fsts s15,[r7,#156]
 5220              	.LBE48:
 911:../cleanflight/src/main/flight/pid.c ****             const float setpointLpf = pt1FilterApply(&windupLpf[axis], currentPidSetpoint);
 5221              	 .loc 4 911 0 is_stmt 1 discriminator 4
 5222 05de 04E0     	 b .L364
 5223              	.L360:
 911:../cleanflight/src/main/flight/pid.c ****             const float setpointLpf = pt1FilterApply(&windupLpf[axis], currentPidSetpoint);
 5224              	 .loc 4 911 0 is_stmt 0 discriminator 1
 5225 05e0 03E0     	 b .L364
 5226              	.L335:
 949:../cleanflight/src/main/flight/pid.c ****             }
 950:../cleanflight/src/main/flight/pid.c **** #endif // USE_ABSOLUTE_CONTROL             
 951:../cleanflight/src/main/flight/pid.c ****         } else
 952:../cleanflight/src/main/flight/pid.c **** #endif // USE_ITERM_RELAX
 953:../cleanflight/src/main/flight/pid.c ****         {
 954:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ABSOLUTE_CONTROL)
 955:../cleanflight/src/main/flight/pid.c ****             acErrorRate = itermErrorRate;
 5227              	 .loc 4 955 0 is_stmt 1
 5228 05e2 D7F89830 	 ldr r3,[r7,#152]
 5229 05e6 C7F89C30 	 str r3,[r7,#156]
 5230              	.L364:
 956:../cleanflight/src/main/flight/pid.c **** #endif // USE_ABSOLUTE_CONTROL
 957:../cleanflight/src/main/flight/pid.c ****         }
 958:../cleanflight/src/main/flight/pid.c ****         
 959:../cleanflight/src/main/flight/pid.c **** #if defined(USE_ABSOLUTE_CONTROL)
 960:../cleanflight/src/main/flight/pid.c ****         if (acGain > 0 && isAirmodeActivated()) {
 5231              	 .loc 4 960 0
 5232 05ea C44B     	 ldr r3,.L426+8
 5233 05ec D3ED007A 	 flds s15,[r3]
 5234 05f0 F5EEC07A 	 fcmpezs s15
 5235 05f4 F1EE10FA 	 fmstat
 5236 05f8 76DD     	 ble .L365
 5237              	 .loc 4 960 0 is_stmt 0 discriminator 1
 5238 05fa FFF7FEFF 	 bl isAirmodeActivated
 5239 05fe 0346     	 mov r3,r0
 5240 0600 002B     	 cmp r3,#0
 5241 0602 71D0     	 beq .L365
 961:../cleanflight/src/main/flight/pid.c ****             axisError[axis] = constrainf(axisError[axis] + acErrorRate * dT, -acErrorLimit, acError
 5242              	 .loc 4 961 0 is_stmt 1
 5243 0604 BB4A     	 ldr r2,.L426
 5244 0606 D7F8A030 	 ldr r3,[r7,#160]
 5245 060a 9B00     	 lsls r3,r3,#2
 5246 060c 1344     	 add r3,r3,r2
 5247 060e 93ED007A 	 flds s14,[r3]
 5248 0612 B94B     	 ldr r3,.L426+4
 5249 0614 D3ED006A 	 flds s13,[r3]
 5250 0618 D7ED277A 	 flds s15,[r7,#156]
 5251 061c 66EEA77A 	 fmuls s15,s13,s15
 5252 0620 77EE276A 	 fadds s13,s14,s15
 5253 0624 B64B     	 ldr r3,.L426+12
 5254 0626 D3ED007A 	 flds s15,[r3]
 5255 062a B1EE677A 	 fnegs s14,s15
 5256 062e B44B     	 ldr r3,.L426+12
 5257 0630 D3ED007A 	 flds s15,[r3]
 5258 0634 B0EE660A 	 fcpys s0,s13
 5259 0638 F0EE470A 	 fcpys s1,s14
 5260 063c B0EE671A 	 fcpys s2,s15
 5261 0640 FFF7FEFF 	 bl constrainf
 5262 0644 F0EE407A 	 fcpys s15,s0
 5263 0648 AA4A     	 ldr r2,.L426
 5264 064a D7F8A030 	 ldr r3,[r7,#160]
 5265 064e 9B00     	 lsls r3,r3,#2
 5266 0650 1344     	 add r3,r3,r2
 5267 0652 C3ED007A 	 fsts s15,[r3]
 962:../cleanflight/src/main/flight/pid.c ****             acCorrection = constrainf(axisError[axis] * acGain, -acLimit, acLimit);
 5268              	 .loc 4 962 0
 5269 0656 A74A     	 ldr r2,.L426
 5270 0658 D7F8A030 	 ldr r3,[r7,#160]
 5271 065c 9B00     	 lsls r3,r3,#2
 5272 065e 1344     	 add r3,r3,r2
 5273 0660 93ED007A 	 flds s14,[r3]
 5274 0664 A54B     	 ldr r3,.L426+8
 5275 0666 D3ED007A 	 flds s15,[r3]
 5276 066a 67EE276A 	 fmuls s13,s14,s15
 5277 066e A54B     	 ldr r3,.L426+16
 5278 0670 D3ED007A 	 flds s15,[r3]
 5279 0674 B1EE677A 	 fnegs s14,s15
 5280 0678 A24B     	 ldr r3,.L426+16
 5281 067a D3ED007A 	 flds s15,[r3]
 5282 067e B0EE660A 	 fcpys s0,s13
 5283 0682 F0EE470A 	 fcpys s1,s14
 5284 0686 B0EE671A 	 fcpys s2,s15
 5285 068a FFF7FEFF 	 bl constrainf
 5286 068e 87ED1D0A 	 fsts s0,[r7,#116]
 963:../cleanflight/src/main/flight/pid.c ****             currentPidSetpoint += acCorrection;
 5287              	 .loc 4 963 0
 5288 0692 97ED067A 	 flds s14,[r7,#24]
 5289 0696 D7ED1D7A 	 flds s15,[r7,#116]
 5290 069a 77EE277A 	 fadds s15,s14,s15
 5291 069e C7ED067A 	 fsts s15,[r7,#24]
 964:../cleanflight/src/main/flight/pid.c ****             itermErrorRate += acCorrection;
 5292              	 .loc 4 964 0
 5293 06a2 97ED267A 	 flds s14,[r7,#152]
 5294 06a6 D7ED1D7A 	 flds s15,[r7,#116]
 5295 06aa 77EE277A 	 fadds s15,s14,s15
 5296 06ae C7ED267A 	 fsts s15,[r7,#152]
 965:../cleanflight/src/main/flight/pid.c ****             if (axis == FD_ROLL) {
 5297              	 .loc 4 965 0
 5298 06b2 D7F8A030 	 ldr r3,[r7,#160]
 5299 06b6 002B     	 cmp r3,#0
 5300 06b8 16D1     	 bne .L365
 966:../cleanflight/src/main/flight/pid.c ****                 DEBUG_SET(DEBUG_ITERM_RELAX, 3, lrintf(axisError[axis] * 10));
 5301              	 .loc 4 966 0
 5302 06ba 934B     	 ldr r3,.L426+20
 5303 06bc 1B78     	 ldrb r3,[r3]
 5304 06be 262B     	 cmp r3,#38
 5305 06c0 12D1     	 bne .L365
 5306              	 .loc 4 966 0 is_stmt 0 discriminator 1
 5307 06c2 8C4A     	 ldr r2,.L426
 5308 06c4 D7F8A030 	 ldr r3,[r7,#160]
 5309 06c8 9B00     	 lsls r3,r3,#2
 5310 06ca 1344     	 add r3,r3,r2
 5311 06cc D3ED007A 	 flds s15,[r3]
 5312 06d0 B2EE047A 	 fconsts s14,#36
 5313 06d4 67EE877A 	 fmuls s15,s15,s14
 5314 06d8 17EE900A 	 fmrs r0,s15
 5315 06dc FFF7FEFF 	 bl lrintf
 5316 06e0 0346     	 mov r3,r0
 5317 06e2 9AB2     	 uxth r2,r3
 5318 06e4 894B     	 ldr r3,.L426+24
 5319 06e6 DA80     	 strh r2,[r3,#6]
 5320              	.L365:
 967:../cleanflight/src/main/flight/pid.c ****             }
 968:../cleanflight/src/main/flight/pid.c ****         }
 969:../cleanflight/src/main/flight/pid.c **** #endif
 970:../cleanflight/src/main/flight/pid.c **** 
 971:../cleanflight/src/main/flight/pid.c ****         float errorRate = currentPidSetpoint - gyroRate; // r - y
 5321              	 .loc 4 971 0 is_stmt 1
 5322 06e8 97ED067A 	 flds s14,[r7,#24]
 5323 06ec D7ED1E7A 	 flds s15,[r7,#120]
 5324 06f0 77EE677A 	 fsubs s15,s14,s15
 5325 06f4 C7ED057A 	 fsts s15,[r7,#20]
 972:../cleanflight/src/main/flight/pid.c ****         handleCrashRecovery(
 973:../cleanflight/src/main/flight/pid.c ****             pidProfile->crash_recovery, angleTrim, axis, currentTimeUs, gyroRate,
 5326              	 .loc 4 973 0
 5327 06f8 FB68     	 ldr r3,[r7,#12]
 5328 06fa 93F84820 	 ldrb r2,[r3,#72]
 972:../cleanflight/src/main/flight/pid.c ****         handleCrashRecovery(
 5329              	 .loc 4 972 0
 5330 06fe BB6F     	 ldr r3,[r7,#120]
 5331 0700 0093     	 str r3,[sp]
 5332 0702 07F11803 	 add r3,r7,#24
 5333 0706 0193     	 str r3,[sp,#4]
 5334 0708 07F11403 	 add r3,r7,#20
 5335 070c 0293     	 str r3,[sp,#8]
 5336 070e 1046     	 mov r0,r2
 5337 0710 B968     	 ldr r1,[r7,#8]
 5338 0712 D7F8A020 	 ldr r2,[r7,#160]
 5339 0716 7B68     	 ldr r3,[r7,#4]
 5340 0718 FFF7FEFF 	 bl handleCrashRecovery
 974:../cleanflight/src/main/flight/pid.c ****             &currentPidSetpoint, &errorRate);
 975:../cleanflight/src/main/flight/pid.c **** 
 976:../cleanflight/src/main/flight/pid.c ****         // --------low-level gyro-based PID based on 2DOF PID controller. ----------
 977:../cleanflight/src/main/flight/pid.c ****         // 2-DOF PID controller with optional filter on derivative term.
 978:../cleanflight/src/main/flight/pid.c ****         // b = 1 and only c (feedforward weight) can be tuned (amount derivative on measurement or 
 979:../cleanflight/src/main/flight/pid.c **** 
 980:../cleanflight/src/main/flight/pid.c ****         // -----calculate P component and add Dynamic Part based on stick input
 981:../cleanflight/src/main/flight/pid.c ****         pidData[axis].P = pidCoefficient[axis].Kp * errorRate * tpaFactor;
 5341              	 .loc 4 981 0
 5342 071c 7C4A     	 ldr r2,.L426+28
 5343 071e D7F8A030 	 ldr r3,[r7,#160]
 5344 0722 1B01     	 lsls r3,r3,#4
 5345 0724 1344     	 add r3,r3,r2
 5346 0726 93ED007A 	 flds s14,[r3]
 5347 072a D7ED057A 	 flds s15,[r7,#20]
 5348 072e 27EE277A 	 fmuls s14,s14,s15
 5349 0732 D7ED247A 	 flds s15,[r7,#144]
 5350 0736 67EE277A 	 fmuls s15,s14,s15
 5351 073a 7649     	 ldr r1,.L426+32
 5352 073c D7F8A020 	 ldr r2,[r7,#160]
 5353 0740 1346     	 mov r3,r2
 5354 0742 9B00     	 lsls r3,r3,#2
 5355 0744 1344     	 add r3,r3,r2
 5356 0746 9B00     	 lsls r3,r3,#2
 5357 0748 0B44     	 add r3,r3,r1
 5358 074a 17EE902A 	 fmrs r2,s15
 5359 074e 1A60     	 str r2,[r3]
 982:../cleanflight/src/main/flight/pid.c ****         if (axis == FD_YAW) {
 5360              	 .loc 4 982 0
 5361 0750 D7F8A030 	 ldr r3,[r7,#160]
 5362 0754 022B     	 cmp r3,#2
 5363 0756 17D1     	 bne .L367
 983:../cleanflight/src/main/flight/pid.c ****             pidData[axis].P = ptermYawLowpassApplyFn((filter_t *) &ptermYawLowpass, pidData[axis].P
 5364              	 .loc 4 983 0
 5365 0758 6F4B     	 ldr r3,.L426+36
 5366 075a 1C68     	 ldr r4,[r3]
 5367 075c 6D49     	 ldr r1,.L426+32
 5368 075e D7F8A020 	 ldr r2,[r7,#160]
 5369 0762 1346     	 mov r3,r2
 5370 0764 9B00     	 lsls r3,r3,#2
 5371 0766 1344     	 add r3,r3,r2
 5372 0768 9B00     	 lsls r3,r3,#2
 5373 076a 0B44     	 add r3,r3,r1
 5374 076c 1B68     	 ldr r3,[r3]
 5375 076e 6B48     	 ldr r0,.L426+40
 5376 0770 1946     	 mov r1,r3
 5377 0772 A047     	 blx r4
 5378 0774 6749     	 ldr r1,.L426+32
 5379 0776 D7F8A020 	 ldr r2,[r7,#160]
 5380 077a 1346     	 mov r3,r2
 5381 077c 9B00     	 lsls r3,r3,#2
 5382 077e 1344     	 add r3,r3,r2
 5383 0780 9B00     	 lsls r3,r3,#2
 5384 0782 0B44     	 add r3,r3,r1
 5385 0784 0246     	 mov r2,r0
 5386 0786 1A60     	 str r2,[r3]
 5387              	.L367:
 984:../cleanflight/src/main/flight/pid.c ****         }
 985:../cleanflight/src/main/flight/pid.c **** 
 986:../cleanflight/src/main/flight/pid.c ****         // -----calculate I component
 987:../cleanflight/src/main/flight/pid.c ****         const float ITermNew = constrainf(ITerm + pidCoefficient[axis].Ki * itermErrorRate * dynCi,
 5388              	 .loc 4 987 0
 5389 0788 614A     	 ldr r2,.L426+28
 5390 078a D7F8A030 	 ldr r3,[r7,#160]
 5391 078e 1B01     	 lsls r3,r3,#4
 5392 0790 1344     	 add r3,r3,r2
 5393 0792 93ED017A 	 flds s14,[r3,#4]
 5394 0796 D7ED267A 	 flds s15,[r7,#152]
 5395 079a 27EE277A 	 fmuls s14,s14,s15
 5396 079e D7ED1F7A 	 flds s15,[r7,#124]
 5397 07a2 27EE277A 	 fmuls s14,s14,s15
 5398 07a6 D7ED1C7A 	 flds s15,[r7,#112]
 5399 07aa 77EE276A 	 fadds s13,s14,s15
 5400 07ae 5C4B     	 ldr r3,.L426+44
 5401 07b0 D3ED007A 	 flds s15,[r3]
 5402 07b4 B1EE677A 	 fnegs s14,s15
 5403 07b8 594B     	 ldr r3,.L426+44
 5404 07ba D3ED007A 	 flds s15,[r3]
 5405 07be B0EE660A 	 fcpys s0,s13
 5406 07c2 F0EE470A 	 fcpys s1,s14
 5407 07c6 B0EE671A 	 fcpys s2,s15
 5408 07ca FFF7FEFF 	 bl constrainf
 5409 07ce 87ED130A 	 fsts s0,[r7,#76]
 988:../cleanflight/src/main/flight/pid.c ****         const bool outputSaturated = mixerIsOutputSaturated(axis, errorRate);
 5410              	 .loc 4 988 0
 5411 07d2 7B69     	 ldr r3,[r7,#20]
 5412 07d4 D7F8A000 	 ldr r0,[r7,#160]
 5413 07d8 1946     	 mov r1,r3
 5414 07da FFF7FEFF 	 bl mixerIsOutputSaturated
 5415 07de 0346     	 mov r3,r0
 5416 07e0 87F84B30 	 strb r3,[r7,#75]
 989:../cleanflight/src/main/flight/pid.c ****         if (outputSaturated == false || ABS(ITermNew) < ABS(ITerm)) {
 5417              	 .loc 4 989 0
 5418 07e4 97F84B30 	 ldrb r3,[r7,#75]
 5419 07e8 83F00103 	 eor r3,r3,#1
 5420 07ec DBB2     	 uxtb r3,r3
 5421 07ee 002B     	 cmp r3,#0
 5422 07f0 24D1     	 bne .L368
 5423              	.LBB51:
 5424              	 .loc 4 989 0 is_stmt 0 discriminator 1
 5425 07f2 FB6C     	 ldr r3,[r7,#76]
 5426 07f4 7B64     	 str r3,[r7,#68]
 5427 07f6 D7ED117A 	 flds s15,[r7,#68]
 5428 07fa F5EEC07A 	 fcmpezs s15
 5429 07fe F1EE10FA 	 fmstat
 5430 0802 02DD     	 ble .L416
 5431              	 .loc 4 989 0 discriminator 2
 5432 0804 97ED117A 	 flds s14,[r7,#68]
 5433 0808 03E0     	 b .L371
 5434              	.L416:
 5435              	 .loc 4 989 0 discriminator 3
 5436 080a D7ED117A 	 flds s15,[r7,#68]
 5437 080e B1EE677A 	 fnegs s14,s15
 5438              	.L371:
 5439              	.LBE51:
 5440              	.LBB52:
 5441              	 .loc 4 989 0 discriminator 5
 5442 0812 3B6F     	 ldr r3,[r7,#112]
 5443 0814 3B64     	 str r3,[r7,#64]
 5444 0816 D7ED107A 	 flds s15,[r7,#64]
 5445 081a F5EEC07A 	 fcmpezs s15
 5446 081e F1EE10FA 	 fmstat
 5447 0822 02DD     	 ble .L417
 5448              	 .loc 4 989 0 discriminator 6
 5449 0824 D7ED107A 	 flds s15,[r7,#64]
 5450 0828 03E0     	 b .L374
 5451              	.L417:
 5452              	 .loc 4 989 0 discriminator 7
 5453 082a D7ED107A 	 flds s15,[r7,#64]
 5454 082e F1EE677A 	 fnegs s15,s15
 5455              	.L374:
 5456              	.LBE52:
 5457              	 .loc 4 989 0 discriminator 9
 5458 0832 B4EEE77A 	 fcmpes s14,s15
 5459 0836 F1EE10FA 	 fmstat
 5460 083a 09D5     	 bpl .L375
 5461              	.L368:
 990:../cleanflight/src/main/flight/pid.c ****             // Only increase ITerm if output is not saturated
 991:../cleanflight/src/main/flight/pid.c ****             pidData[axis].I = ITermNew;
 5462              	 .loc 4 991 0 is_stmt 1
 5463 083c 3549     	 ldr r1,.L426+32
 5464 083e D7F8A020 	 ldr r2,[r7,#160]
 5465 0842 1346     	 mov r3,r2
 5466 0844 9B00     	 lsls r3,r3,#2
 5467 0846 1344     	 add r3,r3,r2
 5468 0848 9B00     	 lsls r3,r3,#2
 5469 084a 0B44     	 add r3,r3,r1
 5470 084c FA6C     	 ldr r2,[r7,#76]
 5471 084e 5A60     	 str r2,[r3,#4]
 5472              	.L375:
 992:../cleanflight/src/main/flight/pid.c ****         }
 993:../cleanflight/src/main/flight/pid.c **** 
 994:../cleanflight/src/main/flight/pid.c ****         // -----calculate D component
 995:../cleanflight/src/main/flight/pid.c ****         if (pidCoefficient[axis].Kd > 0) {
 5473              	 .loc 4 995 0
 5474 0850 2F4A     	 ldr r2,.L426+28
 5475 0852 D7F8A030 	 ldr r3,[r7,#160]
 5476 0856 1B01     	 lsls r3,r3,#4
 5477 0858 1344     	 add r3,r3,r2
 5478 085a 0833     	 adds r3,r3,#8
 5479 085c D3ED007A 	 flds s15,[r3]
 5480 0860 F5EEC07A 	 fcmpezs s15
 5481 0864 F1EE10FA 	 fmstat
 5482 0868 60DD     	 ble .L418
 5483              	.LBB53:
 996:../cleanflight/src/main/flight/pid.c **** 
 997:../cleanflight/src/main/flight/pid.c ****             // Divide rate change by dT to get differential (ie dr/dt).
 998:../cleanflight/src/main/flight/pid.c ****             // dT is fixed and calculated from the target PID loop time
 999:../cleanflight/src/main/flight/pid.c ****             // This is done to avoid DTerm spikes that occur with dynamically
1000:../cleanflight/src/main/flight/pid.c ****             // calculated deltaT whenever another task causes the PID
1001:../cleanflight/src/main/flight/pid.c ****             // loop execution to be delayed.
1002:../cleanflight/src/main/flight/pid.c ****             const float delta =
1003:../cleanflight/src/main/flight/pid.c ****                 - (gyroRateDterm[axis] - previousGyroRateDterm[axis]) * pidFrequency;
 5484              	 .loc 4 1003 0
 5485 086a D7F8A030 	 ldr r3,[r7,#160]
 5486 086e 9B00     	 lsls r3,r3,#2
 5487 0870 07F1A802 	 add r2,r7,#168
 5488 0874 1344     	 add r3,r3,r2
 5489 0876 8C3B     	 subs r3,r3,#140
 5490 0878 93ED007A 	 flds s14,[r3]
 5491 087c 294A     	 ldr r2,.L426+48
 5492 087e D7F8A030 	 ldr r3,[r7,#160]
 5493 0882 9B00     	 lsls r3,r3,#2
 5494 0884 1344     	 add r3,r3,r2
 5495 0886 D3ED007A 	 flds s15,[r3]
 5496 088a 77EE677A 	 fsubs s15,s14,s15
 5497 088e B1EE677A 	 fnegs s14,s15
 5498 0892 254B     	 ldr r3,.L426+52
 5499 0894 D3ED007A 	 flds s15,[r3]
1002:../cleanflight/src/main/flight/pid.c ****                 - (gyroRateDterm[axis] - previousGyroRateDterm[axis]) * pidFrequency;
 5500              	 .loc 4 1002 0
 5501 0898 67EE277A 	 fmuls s15,s14,s15
 5502 089c C7ED0F7A 	 fsts s15,[r7,#60]
1004:../cleanflight/src/main/flight/pid.c **** 
1005:../cleanflight/src/main/flight/pid.c ****             detectAndSetCrashRecovery(pidProfile->crash_recovery, axis, currentTimeUs, delta, error
 5503              	 .loc 4 1005 0
 5504 08a0 FB68     	 ldr r3,[r7,#12]
 5505 08a2 93F84820 	 ldrb r2,[r3,#72]
 5506 08a6 7B69     	 ldr r3,[r7,#20]
 5507 08a8 0093     	 str r3,[sp]
 5508 08aa 1046     	 mov r0,r2
 5509 08ac D7F8A010 	 ldr r1,[r7,#160]
 5510 08b0 7A68     	 ldr r2,[r7,#4]
 5511 08b2 FB6B     	 ldr r3,[r7,#60]
 5512 08b4 FFF7FEFF 	 bl detectAndSetCrashRecovery
1006:../cleanflight/src/main/flight/pid.c **** 
1007:../cleanflight/src/main/flight/pid.c ****             pidData[axis].D = pidCoefficient[axis].Kd * delta * tpaFactor;
 5513              	 .loc 4 1007 0
 5514 08b8 154A     	 ldr r2,.L426+28
 5515 08ba D7F8A030 	 ldr r3,[r7,#160]
 5516 08be 1B01     	 lsls r3,r3,#4
 5517 08c0 1344     	 add r3,r3,r2
 5518 08c2 0833     	 adds r3,r3,#8
 5519 08c4 93ED007A 	 flds s14,[r3]
 5520 08c8 D7ED0F7A 	 flds s15,[r7,#60]
 5521 08cc 27EE277A 	 fmuls s14,s14,s15
 5522 08d0 D7ED247A 	 flds s15,[r7,#144]
 5523 08d4 67EE277A 	 fmuls s15,s14,s15
 5524 08d8 0E49     	 ldr r1,.L426+32
 5525 08da D7F8A020 	 ldr r2,[r7,#160]
 5526 08de 1346     	 mov r3,r2
 5527 08e0 9B00     	 lsls r3,r3,#2
 5528 08e2 1344     	 add r3,r3,r2
 5529 08e4 9B00     	 lsls r3,r3,#2
 5530 08e6 0B44     	 add r3,r3,r1
 5531 08e8 0833     	 adds r3,r3,#8
 5532 08ea 17EE902A 	 fmrs r2,s15
 5533 08ee 1A60     	 str r2,[r3]
 5534              	.LBE53:
 5535 08f0 28E0     	 b .L379
 5536              	.L427:
 5537 08f2 00BF     	 .align 2
 5538              	.L426:
 5539 08f4 00000000 	 .word axisError
 5540 08f8 00000000 	 .word dT
 5541 08fc 00000000 	 .word acGain
 5542 0900 00000000 	 .word acErrorLimit
 5543 0904 00000000 	 .word acLimit
 5544 0908 00000000 	 .word debugMode
 5545 090c 00000000 	 .word debug
 5546 0910 00000000 	 .word pidCoefficient
 5547 0914 00000000 	 .word pidData
 5548 0918 00000000 	 .word ptermYawLowpassApplyFn
 5549 091c 00000000 	 .word ptermYawLowpass
 5550 0920 00000000 	 .word itermLimit
 5551 0924 00000000 	 .word previousGyroRateDterm.14312
 5552 0928 00000000 	 .word pidFrequency
 5553              	.L418:
1008:../cleanflight/src/main/flight/pid.c ****         } else {
1009:../cleanflight/src/main/flight/pid.c ****             pidData[axis].D = 0;
 5554              	 .loc 4 1009 0
 5555 092c BA49     	 ldr r1,.L428
 5556 092e D7F8A020 	 ldr r2,[r7,#160]
 5557 0932 1346     	 mov r3,r2
 5558 0934 9B00     	 lsls r3,r3,#2
 5559 0936 1344     	 add r3,r3,r2
 5560 0938 9B00     	 lsls r3,r3,#2
 5561 093a 0B44     	 add r3,r3,r1
 5562 093c 0833     	 adds r3,r3,#8
 5563 093e 4FF00002 	 mov r2,#0
 5564 0942 1A60     	 str r2,[r3]
 5565              	.L379:
1010:../cleanflight/src/main/flight/pid.c ****         }
1011:../cleanflight/src/main/flight/pid.c ****         previousGyroRateDterm[axis] = gyroRateDterm[axis];
 5566              	 .loc 4 1011 0
 5567 0944 D7F8A030 	 ldr r3,[r7,#160]
 5568 0948 9B00     	 lsls r3,r3,#2
 5569 094a 07F1A802 	 add r2,r7,#168
 5570 094e 1344     	 add r3,r3,r2
 5571 0950 8C3B     	 subs r3,r3,#140
 5572 0952 1A68     	 ldr r2,[r3]
 5573 0954 B149     	 ldr r1,.L428+4
 5574 0956 D7F8A030 	 ldr r3,[r7,#160]
 5575 095a 9B00     	 lsls r3,r3,#2
 5576 095c 0B44     	 add r3,r3,r1
 5577 095e 1A60     	 str r2,[r3]
1012:../cleanflight/src/main/flight/pid.c **** 
1013:../cleanflight/src/main/flight/pid.c ****         // -----calculate feedforward component
1014:../cleanflight/src/main/flight/pid.c ****         
1015:../cleanflight/src/main/flight/pid.c ****         // Only enable feedforward for rate mode
1016:../cleanflight/src/main/flight/pid.c ****         const float feedforwardGain = flightModeFlags ? 0.0f : pidCoefficient[axis].Kf;
 5578              	 .loc 4 1016 0
 5579 0960 AF4B     	 ldr r3,.L428+8
 5580 0962 1B88     	 ldrh r3,[r3]
 5581 0964 002B     	 cmp r3,#0
 5582 0966 07D1     	 bne .L380
 5583              	 .loc 4 1016 0 is_stmt 0 discriminator 1
 5584 0968 AE4A     	 ldr r2,.L428+12
 5585 096a D7F8A030 	 ldr r3,[r7,#160]
 5586 096e 1B01     	 lsls r3,r3,#4
 5587 0970 1344     	 add r3,r3,r2
 5588 0972 0833     	 adds r3,r3,#8
 5589 0974 5B68     	 ldr r3,[r3,#4]
 5590 0976 01E0     	 b .L381
 5591              	.L380:
 5592              	 .loc 4 1016 0 discriminator 2
 5593 0978 4FF00003 	 mov r3,#0
 5594              	.L381:
 5595              	 .loc 4 1016 0 discriminator 4
 5596 097c BB63     	 str r3,[r7,#56]
1017:../cleanflight/src/main/flight/pid.c ****         
1018:../cleanflight/src/main/flight/pid.c ****         if (feedforwardGain > 0) {
 5597              	 .loc 4 1018 0 is_stmt 1 discriminator 4
 5598 097e D7ED0E7A 	 flds s15,[r7,#56]
 5599 0982 F5EEC07A 	 fcmpezs s15
 5600 0986 F1EE10FA 	 fmstat
 5601 098a 5ADD     	 ble .L419
 5602              	.LBB54:
1019:../cleanflight/src/main/flight/pid.c **** 
1020:../cleanflight/src/main/flight/pid.c ****             // no transition if feedForwardTransition == 0
1021:../cleanflight/src/main/flight/pid.c ****             float transition = feedForwardTransition > 0 ? MIN(1.f, getRcDeflectionAbs(axis) * feed
 5603              	 .loc 4 1021 0
 5604 098c A64B     	 ldr r3,.L428+16
 5605 098e D3ED007A 	 flds s15,[r3]
 5606 0992 F5EEC07A 	 fcmpezs s15
 5607 0996 F1EE10FA 	 fmstat
 5608 099a 1CDD     	 ble .L420
 5609              	.LBB55:
 5610              	 .loc 4 1021 0 is_stmt 0 discriminator 1
 5611 099c 4FF07E53 	 mov r3,#1065353216
 5612 09a0 7B63     	 str r3,[r7,#52]
 5613 09a2 D7F8A000 	 ldr r0,[r7,#160]
 5614 09a6 FFF7FEFF 	 bl getRcDeflectionAbs
 5615 09aa 07EE100A 	 fmsr s14,r0
 5616 09ae 9E4B     	 ldr r3,.L428+16
 5617 09b0 D3ED007A 	 flds s15,[r3]
 5618 09b4 67EE277A 	 fmuls s15,s14,s15
 5619 09b8 C7ED0C7A 	 fsts s15,[r7,#48]
 5620 09bc 97ED0D7A 	 flds s14,[r7,#52]
 5621 09c0 D7ED0C7A 	 flds s15,[r7,#48]
 5622 09c4 B4EEE77A 	 fcmpes s14,s15
 5623 09c8 F1EE10FA 	 fmstat
 5624 09cc 01D5     	 bpl .L421
 5625              	 .loc 4 1021 0 discriminator 3
 5626 09ce 7B6B     	 ldr r3,[r7,#52]
 5627 09d0 03E0     	 b .L389
 5628              	.L421:
 5629              	 .loc 4 1021 0 discriminator 4
 5630 09d2 3B6B     	 ldr r3,[r7,#48]
 5631              	.LBE55:
 5632 09d4 01E0     	 b .L389
 5633              	.L420:
 5634              	 .loc 4 1021 0 discriminator 2
 5635 09d6 4FF07E53 	 mov r3,#1065353216
 5636              	.L389:
 5637              	 .loc 4 1021 0 discriminator 8
 5638 09da FB62     	 str r3,[r7,#44]
1022:../cleanflight/src/main/flight/pid.c **** 
1023:../cleanflight/src/main/flight/pid.c ****             float pidSetpointDelta = currentPidSetpoint - previousPidSetpoint[axis];
 5639              	 .loc 4 1023 0 is_stmt 1 discriminator 8
 5640 09dc 97ED067A 	 flds s14,[r7,#24]
 5641 09e0 924A     	 ldr r2,.L428+20
 5642 09e2 D7F8A030 	 ldr r3,[r7,#160]
 5643 09e6 9B00     	 lsls r3,r3,#2
 5644 09e8 1344     	 add r3,r3,r2
 5645 09ea D3ED007A 	 flds s15,[r3]
 5646 09ee 77EE677A 	 fsubs s15,s14,s15
 5647 09f2 C7ED0A7A 	 fsts s15,[r7,#40]
1024:../cleanflight/src/main/flight/pid.c **** 
1025:../cleanflight/src/main/flight/pid.c **** #ifdef USE_RC_SMOOTHING_FILTER
1026:../cleanflight/src/main/flight/pid.c ****             pidSetpointDelta = applyRcSmoothingDerivativeFilter(axis, pidSetpointDelta);
 5648              	 .loc 4 1026 0 discriminator 8
 5649 09f6 D7F8A000 	 ldr r0,[r7,#160]
 5650 09fa B96A     	 ldr r1,[r7,#40]
 5651 09fc FFF7FEFF 	 bl applyRcSmoothingDerivativeFilter
 5652 0a00 B862     	 str r0,[r7,#40]
1027:../cleanflight/src/main/flight/pid.c **** #endif // USE_RC_SMOOTHING_FILTER
1028:../cleanflight/src/main/flight/pid.c **** 
1029:../cleanflight/src/main/flight/pid.c ****             pidData[axis].F = feedforwardGain * transition * pidSetpointDelta * pidFrequency;
 5653              	 .loc 4 1029 0 discriminator 8
 5654 0a02 97ED0E7A 	 flds s14,[r7,#56]
 5655 0a06 D7ED0B7A 	 flds s15,[r7,#44]
 5656 0a0a 27EE277A 	 fmuls s14,s14,s15
 5657 0a0e D7ED0A7A 	 flds s15,[r7,#40]
 5658 0a12 27EE277A 	 fmuls s14,s14,s15
 5659 0a16 864B     	 ldr r3,.L428+24
 5660 0a18 D3ED007A 	 flds s15,[r3]
 5661 0a1c 67EE277A 	 fmuls s15,s14,s15
 5662 0a20 7D49     	 ldr r1,.L428
 5663 0a22 D7F8A020 	 ldr r2,[r7,#160]
 5664 0a26 1346     	 mov r3,r2
 5665 0a28 9B00     	 lsls r3,r3,#2
 5666 0a2a 1344     	 add r3,r3,r2
 5667 0a2c 9B00     	 lsls r3,r3,#2
 5668 0a2e 0B44     	 add r3,r3,r1
 5669 0a30 0833     	 adds r3,r3,#8
 5670 0a32 17EE902A 	 fmrs r2,s15
 5671 0a36 5A60     	 str r2,[r3,#4]
1030:../cleanflight/src/main/flight/pid.c **** 
1031:../cleanflight/src/main/flight/pid.c **** #if defined(USE_SMART_FEEDFORWARD)
1032:../cleanflight/src/main/flight/pid.c ****             applySmartFeedforward(axis);
 5672              	 .loc 4 1032 0 discriminator 8
 5673 0a38 D7F8A000 	 ldr r0,[r7,#160]
 5674 0a3c FFF7FEFF 	 bl applySmartFeedforward
 5675              	.LBE54:
 5676 0a40 0BE0     	 b .L390
 5677              	.L419:
1033:../cleanflight/src/main/flight/pid.c **** #endif
1034:../cleanflight/src/main/flight/pid.c ****         } else {
1035:../cleanflight/src/main/flight/pid.c ****             pidData[axis].F = 0;
 5678              	 .loc 4 1035 0
 5679 0a42 7549     	 ldr r1,.L428
 5680 0a44 D7F8A020 	 ldr r2,[r7,#160]
 5681 0a48 1346     	 mov r3,r2
 5682 0a4a 9B00     	 lsls r3,r3,#2
 5683 0a4c 1344     	 add r3,r3,r2
 5684 0a4e 9B00     	 lsls r3,r3,#2
 5685 0a50 0B44     	 add r3,r3,r1
 5686 0a52 0833     	 adds r3,r3,#8
 5687 0a54 4FF00002 	 mov r2,#0
 5688 0a58 5A60     	 str r2,[r3,#4]
 5689              	.L390:
1036:../cleanflight/src/main/flight/pid.c ****         }
1037:../cleanflight/src/main/flight/pid.c ****         previousPidSetpoint[axis] = currentPidSetpoint;
 5690              	 .loc 4 1037 0
 5691 0a5a BA69     	 ldr r2,[r7,#24]
 5692 0a5c 7349     	 ldr r1,.L428+20
 5693 0a5e D7F8A030 	 ldr r3,[r7,#160]
 5694 0a62 9B00     	 lsls r3,r3,#2
 5695 0a64 0B44     	 add r3,r3,r1
 5696 0a66 1A60     	 str r2,[r3]
1038:../cleanflight/src/main/flight/pid.c **** 
1039:../cleanflight/src/main/flight/pid.c **** #ifdef USE_YAW_SPIN_RECOVERY
1040:../cleanflight/src/main/flight/pid.c ****         if (yawSpinActive) {
 5697              	 .loc 4 1040 0
 5698 0a68 97F88B30 	 ldrb r3,[r7,#139]
 5699 0a6c 002B     	 cmp r3,#0
 5700 0a6e 31D0     	 beq .L391
1041:../cleanflight/src/main/flight/pid.c ****             pidData[axis].I = 0;  // in yaw spin always disable I
 5701              	 .loc 4 1041 0
 5702 0a70 6949     	 ldr r1,.L428
 5703 0a72 D7F8A020 	 ldr r2,[r7,#160]
 5704 0a76 1346     	 mov r3,r2
 5705 0a78 9B00     	 lsls r3,r3,#2
 5706 0a7a 1344     	 add r3,r3,r2
 5707 0a7c 9B00     	 lsls r3,r3,#2
 5708 0a7e 0B44     	 add r3,r3,r1
 5709 0a80 4FF00002 	 mov r2,#0
 5710 0a84 5A60     	 str r2,[r3,#4]
1042:../cleanflight/src/main/flight/pid.c ****             if (axis <= FD_PITCH)  {
 5711              	 .loc 4 1042 0
 5712 0a86 D7F8A030 	 ldr r3,[r7,#160]
 5713 0a8a 012B     	 cmp r3,#1
 5714 0a8c 22DC     	 bgt .L391
1043:../cleanflight/src/main/flight/pid.c ****                 // zero PIDs on pitch and roll leaving yaw P to correct spin 
1044:../cleanflight/src/main/flight/pid.c ****                 pidData[axis].P = 0;
 5715              	 .loc 4 1044 0
 5716 0a8e 6249     	 ldr r1,.L428
 5717 0a90 D7F8A020 	 ldr r2,[r7,#160]
 5718 0a94 1346     	 mov r3,r2
 5719 0a96 9B00     	 lsls r3,r3,#2
 5720 0a98 1344     	 add r3,r3,r2
 5721 0a9a 9B00     	 lsls r3,r3,#2
 5722 0a9c 0B44     	 add r3,r3,r1
 5723 0a9e 4FF00002 	 mov r2,#0
 5724 0aa2 1A60     	 str r2,[r3]
1045:../cleanflight/src/main/flight/pid.c ****                 pidData[axis].D = 0;
 5725              	 .loc 4 1045 0
 5726 0aa4 5C49     	 ldr r1,.L428
 5727 0aa6 D7F8A020 	 ldr r2,[r7,#160]
 5728 0aaa 1346     	 mov r3,r2
 5729 0aac 9B00     	 lsls r3,r3,#2
 5730 0aae 1344     	 add r3,r3,r2
 5731 0ab0 9B00     	 lsls r3,r3,#2
 5732 0ab2 0B44     	 add r3,r3,r1
 5733 0ab4 0833     	 adds r3,r3,#8
 5734 0ab6 4FF00002 	 mov r2,#0
 5735 0aba 1A60     	 str r2,[r3]
1046:../cleanflight/src/main/flight/pid.c ****                 pidData[axis].F = 0;
 5736              	 .loc 4 1046 0
 5737 0abc 5649     	 ldr r1,.L428
 5738 0abe D7F8A020 	 ldr r2,[r7,#160]
 5739 0ac2 1346     	 mov r3,r2
 5740 0ac4 9B00     	 lsls r3,r3,#2
 5741 0ac6 1344     	 add r3,r3,r2
 5742 0ac8 9B00     	 lsls r3,r3,#2
 5743 0aca 0B44     	 add r3,r3,r1
 5744 0acc 0833     	 adds r3,r3,#8
 5745 0ace 4FF00002 	 mov r2,#0
 5746 0ad2 5A60     	 str r2,[r3,#4]
 5747              	.L391:
1047:../cleanflight/src/main/flight/pid.c ****             }
1048:../cleanflight/src/main/flight/pid.c ****         }
1049:../cleanflight/src/main/flight/pid.c **** #endif // USE_YAW_SPIN_RECOVERY
1050:../cleanflight/src/main/flight/pid.c **** 
1051:../cleanflight/src/main/flight/pid.c ****         // calculating the PID sum
1052:../cleanflight/src/main/flight/pid.c ****         pidData[axis].Sum = pidData[axis].P + pidData[axis].I + pidData[axis].D + pidData[axis].F;
 5748              	 .loc 4 1052 0 discriminator 2
 5749 0ad4 5049     	 ldr r1,.L428
 5750 0ad6 D7F8A020 	 ldr r2,[r7,#160]
 5751 0ada 1346     	 mov r3,r2
 5752 0adc 9B00     	 lsls r3,r3,#2
 5753 0ade 1344     	 add r3,r3,r2
 5754 0ae0 9B00     	 lsls r3,r3,#2
 5755 0ae2 0B44     	 add r3,r3,r1
 5756 0ae4 1868     	 ldr r0,[r3]
 5757 0ae6 0346     	 mov r3,r0
 5758 0ae8 1846     	 mov r0,r3
 5759 0aea 4B49     	 ldr r1,.L428
 5760 0aec D7F8A020 	 ldr r2,[r7,#160]
 5761 0af0 1346     	 mov r3,r2
 5762 0af2 9B00     	 lsls r3,r3,#2
 5763 0af4 1344     	 add r3,r3,r2
 5764 0af6 9B00     	 lsls r3,r3,#2
 5765 0af8 0B44     	 add r3,r3,r1
 5766 0afa 5B68     	 ldr r3,[r3,#4]
 5767 0afc 07EE900A 	 fmsr s15,r0
 5768 0b00 07EE103A 	 fmsr s14,r3
 5769 0b04 77EE877A 	 fadds s15,s15,s14
 5770 0b08 4349     	 ldr r1,.L428
 5771 0b0a D7F8A020 	 ldr r2,[r7,#160]
 5772 0b0e 1346     	 mov r3,r2
 5773 0b10 9B00     	 lsls r3,r3,#2
 5774 0b12 1344     	 add r3,r3,r2
 5775 0b14 9B00     	 lsls r3,r3,#2
 5776 0b16 0B44     	 add r3,r3,r1
 5777 0b18 0833     	 adds r3,r3,#8
 5778 0b1a 1B68     	 ldr r3,[r3]
 5779 0b1c 07EE103A 	 fmsr s14,r3
 5780 0b20 77EE877A 	 fadds s15,s15,s14
 5781 0b24 3C49     	 ldr r1,.L428
 5782 0b26 D7F8A020 	 ldr r2,[r7,#160]
 5783 0b2a 1346     	 mov r3,r2
 5784 0b2c 9B00     	 lsls r3,r3,#2
 5785 0b2e 1344     	 add r3,r3,r2
 5786 0b30 9B00     	 lsls r3,r3,#2
 5787 0b32 0B44     	 add r3,r3,r1
 5788 0b34 0833     	 adds r3,r3,#8
 5789 0b36 5B68     	 ldr r3,[r3,#4]
 5790 0b38 07EE103A 	 fmsr s14,r3
 5791 0b3c 77EE877A 	 fadds s15,s15,s14
 5792 0b40 3549     	 ldr r1,.L428
 5793 0b42 D7F8A020 	 ldr r2,[r7,#160]
 5794 0b46 1346     	 mov r3,r2
 5795 0b48 9B00     	 lsls r3,r3,#2
 5796 0b4a 1344     	 add r3,r3,r2
 5797 0b4c 9B00     	 lsls r3,r3,#2
 5798 0b4e 0B44     	 add r3,r3,r1
 5799 0b50 1033     	 adds r3,r3,#16
 5800 0b52 17EE902A 	 fmrs r2,s15
 5801 0b56 1A60     	 str r2,[r3]
 5802              	.LBE47:
 874:../cleanflight/src/main/flight/pid.c **** 
 5803              	 .loc 4 874 0 discriminator 2
 5804 0b58 D7F8A030 	 ldr r3,[r7,#160]
 5805 0b5c 0133     	 adds r3,r3,#1
 5806 0b5e C7F8A030 	 str r3,[r7,#160]
 5807              	.L329:
 874:../cleanflight/src/main/flight/pid.c **** 
 5808              	 .loc 4 874 0 is_stmt 0 discriminator 1
 5809 0b62 D7F8A030 	 ldr r3,[r7,#160]
 5810 0b66 022B     	 cmp r3,#2
 5811 0b68 7FF75EAB 	 ble .L392
 5812              	.LBE46:
1053:../cleanflight/src/main/flight/pid.c ****     }
1054:../cleanflight/src/main/flight/pid.c **** 
1055:../cleanflight/src/main/flight/pid.c ****     // Disable PID control if at zero throttle or if gyro overflow detected
1056:../cleanflight/src/main/flight/pid.c ****     // This may look very innefficient, but it is done on purpose to always show real CPU usage as 
1057:../cleanflight/src/main/flight/pid.c ****     if (!pidStabilisationEnabled || gyroOverflowDetected()) {
 5813              	 .loc 4 1057 0 is_stmt 1
 5814 0b6c 314B     	 ldr r3,.L428+28
 5815 0b6e 1B78     	 ldrb r3,[r3]
 5816 0b70 83F00103 	 eor r3,r3,#1
 5817 0b74 DBB2     	 uxtb r3,r3
 5818 0b76 002B     	 cmp r3,#0
 5819 0b78 04D1     	 bne .L393
 5820              	 .loc 4 1057 0 is_stmt 0 discriminator 1
 5821 0b7a FFF7FEFF 	 bl gyroOverflowDetected
 5822 0b7e 0346     	 mov r3,r0
 5823 0b80 002B     	 cmp r3,#0
 5824 0b82 46D0     	 beq .L321
 5825              	.L393:
 5826              	.LBB56:
1058:../cleanflight/src/main/flight/pid.c ****         for (int axis = FD_ROLL; axis <= FD_YAW; ++axis) {
 5827              	 .loc 4 1058 0 is_stmt 1
 5828 0b84 0023     	 movs r3,#0
 5829 0b86 C7F89430 	 str r3,[r7,#148]
 5830 0b8a 3EE0     	 b .L395
 5831              	.L396:
1059:../cleanflight/src/main/flight/pid.c ****             pidData[axis].P = 0;
 5832              	 .loc 4 1059 0 discriminator 3
 5833 0b8c 2249     	 ldr r1,.L428
 5834 0b8e D7F89420 	 ldr r2,[r7,#148]
 5835 0b92 1346     	 mov r3,r2
 5836 0b94 9B00     	 lsls r3,r3,#2
 5837 0b96 1344     	 add r3,r3,r2
 5838 0b98 9B00     	 lsls r3,r3,#2
 5839 0b9a 0B44     	 add r3,r3,r1
 5840 0b9c 4FF00002 	 mov r2,#0
 5841 0ba0 1A60     	 str r2,[r3]
1060:../cleanflight/src/main/flight/pid.c ****             pidData[axis].I = 0;
 5842              	 .loc 4 1060 0 discriminator 3
 5843 0ba2 1D49     	 ldr r1,.L428
 5844 0ba4 D7F89420 	 ldr r2,[r7,#148]
 5845 0ba8 1346     	 mov r3,r2
 5846 0baa 9B00     	 lsls r3,r3,#2
 5847 0bac 1344     	 add r3,r3,r2
 5848 0bae 9B00     	 lsls r3,r3,#2
 5849 0bb0 0B44     	 add r3,r3,r1
 5850 0bb2 4FF00002 	 mov r2,#0
 5851 0bb6 5A60     	 str r2,[r3,#4]
1061:../cleanflight/src/main/flight/pid.c ****             pidData[axis].D = 0;
 5852              	 .loc 4 1061 0 discriminator 3
 5853 0bb8 1749     	 ldr r1,.L428
 5854 0bba D7F89420 	 ldr r2,[r7,#148]
 5855 0bbe 1346     	 mov r3,r2
 5856 0bc0 9B00     	 lsls r3,r3,#2
 5857 0bc2 1344     	 add r3,r3,r2
 5858 0bc4 9B00     	 lsls r3,r3,#2
 5859 0bc6 0B44     	 add r3,r3,r1
 5860 0bc8 0833     	 adds r3,r3,#8
 5861 0bca 4FF00002 	 mov r2,#0
 5862 0bce 1A60     	 str r2,[r3]
1062:../cleanflight/src/main/flight/pid.c ****             pidData[axis].F = 0;
 5863              	 .loc 4 1062 0 discriminator 3
 5864 0bd0 1149     	 ldr r1,.L428
 5865 0bd2 D7F89420 	 ldr r2,[r7,#148]
 5866 0bd6 1346     	 mov r3,r2
 5867 0bd8 9B00     	 lsls r3,r3,#2
 5868 0bda 1344     	 add r3,r3,r2
 5869 0bdc 9B00     	 lsls r3,r3,#2
 5870 0bde 0B44     	 add r3,r3,r1
 5871 0be0 0833     	 adds r3,r3,#8
 5872 0be2 4FF00002 	 mov r2,#0
 5873 0be6 5A60     	 str r2,[r3,#4]
1063:../cleanflight/src/main/flight/pid.c **** 
1064:../cleanflight/src/main/flight/pid.c ****             pidData[axis].Sum = 0;
 5874              	 .loc 4 1064 0 discriminator 3
 5875 0be8 0B49     	 ldr r1,.L428
 5876 0bea D7F89420 	 ldr r2,[r7,#148]
 5877 0bee 1346     	 mov r3,r2
 5878 0bf0 9B00     	 lsls r3,r3,#2
 5879 0bf2 1344     	 add r3,r3,r2
 5880 0bf4 9B00     	 lsls r3,r3,#2
 5881 0bf6 0B44     	 add r3,r3,r1
 5882 0bf8 1033     	 adds r3,r3,#16
 5883 0bfa 4FF00002 	 mov r2,#0
 5884 0bfe 1A60     	 str r2,[r3]
1058:../cleanflight/src/main/flight/pid.c ****             pidData[axis].P = 0;
 5885              	 .loc 4 1058 0 discriminator 3
 5886 0c00 D7F89430 	 ldr r3,[r7,#148]
 5887 0c04 0133     	 adds r3,r3,#1
 5888 0c06 C7F89430 	 str r3,[r7,#148]
 5889              	.L395:
1058:../cleanflight/src/main/flight/pid.c ****             pidData[axis].P = 0;
 5890              	 .loc 4 1058 0 is_stmt 0 discriminator 1
 5891 0c0a D7F89430 	 ldr r3,[r7,#148]
 5892 0c0e 022B     	 cmp r3,#2
 5893 0c10 BCDD     	 ble .L396
 5894              	.L321:
 5895              	.LBE56:
1065:../cleanflight/src/main/flight/pid.c ****         }
1066:../cleanflight/src/main/flight/pid.c ****     }
1067:../cleanflight/src/main/flight/pid.c **** }
 5896              	 .loc 4 1067 0 is_stmt 1
 5897 0c12 AC37     	 adds r7,r7,#172
 5898              	.LCFI164:
 5899              	 .cfi_def_cfa_offset 12
 5900 0c14 BD46     	 mov sp,r7
 5901              	.LCFI165:
 5902              	 .cfi_def_cfa_register 13
 5903              	 
 5904 0c16 90BD     	 pop {r4,r7,pc}
 5905              	.L429:
 5906              	 .align 2
 5907              	.L428:
 5908 0c18 00000000 	 .word pidData
 5909 0c1c 00000000 	 .word previousGyroRateDterm.14312
 5910 0c20 00000000 	 .word flightModeFlags
 5911 0c24 00000000 	 .word pidCoefficient
 5912 0c28 00000000 	 .word feedForwardTransition
 5913 0c2c 00000000 	 .word previousPidSetpoint.14313
 5914 0c30 00000000 	 .word pidFrequency
 5915 0c34 00000000 	 .word pidStabilisationEnabled
 5916              	 .cfi_endproc
 5917              	.LFE589:
 5919              	 .section .text.crashRecoveryModeActive,"ax",%progbits
 5920              	 .align 2
 5921              	 .global crashRecoveryModeActive
 5922              	 .thumb
 5923              	 .thumb_func
 5925              	crashRecoveryModeActive:
 5926              	.LFB590:
1068:../cleanflight/src/main/flight/pid.c **** 
1069:../cleanflight/src/main/flight/pid.c **** bool crashRecoveryModeActive(void)
1070:../cleanflight/src/main/flight/pid.c **** {
 5927              	 .loc 4 1070 0
 5928              	 .cfi_startproc
 5929              	 
 5930              	 
 5931              	 
 5932 0000 80B4     	 push {r7}
 5933              	.LCFI166:
 5934              	 .cfi_def_cfa_offset 4
 5935              	 .cfi_offset 7,-4
 5936 0002 00AF     	 add r7,sp,#0
 5937              	.LCFI167:
 5938              	 .cfi_def_cfa_register 7
1071:../cleanflight/src/main/flight/pid.c ****     return inCrashRecoveryMode;
 5939              	 .loc 4 1071 0
 5940 0004 034B     	 ldr r3,.L432
 5941 0006 1B78     	 ldrb r3,[r3]
1072:../cleanflight/src/main/flight/pid.c **** }
 5942              	 .loc 4 1072 0
 5943 0008 1846     	 mov r0,r3
 5944 000a BD46     	 mov sp,r7
 5945              	.LCFI168:
 5946              	 .cfi_def_cfa_register 13
 5947              	 
 5948 000c 5DF8047B 	 ldr r7,[sp],#4
 5949              	.LCFI169:
 5950              	 .cfi_restore 7
 5951              	 .cfi_def_cfa_offset 0
 5952 0010 7047     	 bx lr
 5953              	.L433:
 5954 0012 00BF     	 .align 2
 5955              	.L432:
 5956 0014 00000000 	 .word inCrashRecoveryMode
 5957              	 .cfi_endproc
 5958              	.LFE590:
 5960              	 .section .text.pidSetAcroTrainerState,"ax",%progbits
 5961              	 .align 2
 5962              	 .global pidSetAcroTrainerState
 5963              	 .thumb
 5964              	 .thumb_func
 5966              	pidSetAcroTrainerState:
 5967              	.LFB591:
1073:../cleanflight/src/main/flight/pid.c **** 
1074:../cleanflight/src/main/flight/pid.c **** #ifdef USE_ACRO_TRAINER
1075:../cleanflight/src/main/flight/pid.c **** void pidSetAcroTrainerState(bool newState)
1076:../cleanflight/src/main/flight/pid.c **** {
 5968              	 .loc 4 1076 0
 5969              	 .cfi_startproc
 5970              	 
 5971              	 
 5972 0000 80B5     	 push {r7,lr}
 5973              	.LCFI170:
 5974              	 .cfi_def_cfa_offset 8
 5975              	 .cfi_offset 7,-8
 5976              	 .cfi_offset 14,-4
 5977 0002 82B0     	 sub sp,sp,#8
 5978              	.LCFI171:
 5979              	 .cfi_def_cfa_offset 16
 5980 0004 00AF     	 add r7,sp,#0
 5981              	.LCFI172:
 5982              	 .cfi_def_cfa_register 7
 5983 0006 0346     	 mov r3,r0
 5984 0008 FB71     	 strb r3,[r7,#7]
1077:../cleanflight/src/main/flight/pid.c ****     if (acroTrainerActive != newState) {
 5985              	 .loc 4 1077 0
 5986 000a 084B     	 ldr r3,.L437
 5987 000c 1B78     	 ldrb r3,[r3]
 5988 000e FA79     	 ldrb r2,[r7,#7]
 5989 0010 9A42     	 cmp r2,r3
 5990 0012 07D0     	 beq .L434
1078:../cleanflight/src/main/flight/pid.c ****         if (newState) {
 5991              	 .loc 4 1078 0
 5992 0014 FB79     	 ldrb r3,[r7,#7]
 5993 0016 002B     	 cmp r3,#0
 5994 0018 01D0     	 beq .L436
1079:../cleanflight/src/main/flight/pid.c ****             pidAcroTrainerInit();
 5995              	 .loc 4 1079 0
 5996 001a FFF7FEFF 	 bl pidAcroTrainerInit
 5997              	.L436:
1080:../cleanflight/src/main/flight/pid.c ****         }
1081:../cleanflight/src/main/flight/pid.c ****         acroTrainerActive = newState;
 5998              	 .loc 4 1081 0
 5999 001e 034A     	 ldr r2,.L437
 6000 0020 FB79     	 ldrb r3,[r7,#7]
 6001 0022 1370     	 strb r3,[r2]
 6002              	.L434:
1082:../cleanflight/src/main/flight/pid.c ****     }
1083:../cleanflight/src/main/flight/pid.c **** }
 6003              	 .loc 4 1083 0
 6004 0024 0837     	 adds r7,r7,#8
 6005              	.LCFI173:
 6006              	 .cfi_def_cfa_offset 8
 6007 0026 BD46     	 mov sp,r7
 6008              	.LCFI174:
 6009              	 .cfi_def_cfa_register 13
 6010              	 
 6011 0028 80BD     	 pop {r7,pc}
 6012              	.L438:
 6013 002a 00BF     	 .align 2
 6014              	.L437:
 6015 002c 00000000 	 .word acroTrainerActive
 6016              	 .cfi_endproc
 6017              	.LFE591:
 6019              	 .section .text.pidSetAntiGravityState,"ax",%progbits
 6020              	 .align 2
 6021              	 .global pidSetAntiGravityState
 6022              	 .thumb
 6023              	 .thumb_func
 6025              	pidSetAntiGravityState:
 6026              	.LFB592:
1084:../cleanflight/src/main/flight/pid.c **** #endif // USE_ACRO_TRAINER
1085:../cleanflight/src/main/flight/pid.c **** 
1086:../cleanflight/src/main/flight/pid.c **** void pidSetAntiGravityState(bool newState)
1087:../cleanflight/src/main/flight/pid.c **** {
 6027              	 .loc 4 1087 0
 6028              	 .cfi_startproc
 6029              	 
 6030              	 
 6031              	 
 6032 0000 80B4     	 push {r7}
 6033              	.LCFI175:
 6034              	 .cfi_def_cfa_offset 4
 6035              	 .cfi_offset 7,-4
 6036 0002 83B0     	 sub sp,sp,#12
 6037              	.LCFI176:
 6038              	 .cfi_def_cfa_offset 16
 6039 0004 00AF     	 add r7,sp,#0
 6040              	.LCFI177:
 6041              	 .cfi_def_cfa_register 7
 6042 0006 0346     	 mov r3,r0
 6043 0008 FB71     	 strb r3,[r7,#7]
1088:../cleanflight/src/main/flight/pid.c ****     if (newState != antiGravityEnabled) {
 6044              	 .loc 4 1088 0
 6045 000a 084B     	 ldr r3,.L441
 6046 000c 1B78     	 ldrb r3,[r3]
 6047 000e FA79     	 ldrb r2,[r7,#7]
 6048 0010 9A42     	 cmp r2,r3
 6049 0012 03D0     	 beq .L440
1089:../cleanflight/src/main/flight/pid.c ****         // reset the accelerator on state changes
1090:../cleanflight/src/main/flight/pid.c ****         itermAccelerator = 1.0f;
 6050              	 .loc 4 1090 0
 6051 0014 064B     	 ldr r3,.L441+4
 6052 0016 4FF07E52 	 mov r2,#1065353216
 6053 001a 1A60     	 str r2,[r3]
 6054              	.L440:
1091:../cleanflight/src/main/flight/pid.c ****     }
1092:../cleanflight/src/main/flight/pid.c ****     antiGravityEnabled = newState;
 6055              	 .loc 4 1092 0
 6056 001c 034A     	 ldr r2,.L441
 6057 001e FB79     	 ldrb r3,[r7,#7]
 6058 0020 1370     	 strb r3,[r2]
1093:../cleanflight/src/main/flight/pid.c **** }
 6059              	 .loc 4 1093 0
 6060 0022 0C37     	 adds r7,r7,#12
 6061              	.LCFI178:
 6062              	 .cfi_def_cfa_offset 4
 6063 0024 BD46     	 mov sp,r7
 6064              	.LCFI179:
 6065              	 .cfi_def_cfa_register 13
 6066              	 
 6067 0026 5DF8047B 	 ldr r7,[sp],#4
 6068              	.LCFI180:
 6069              	 .cfi_restore 7
 6070              	 .cfi_def_cfa_offset 0
 6071 002a 7047     	 bx lr
 6072              	.L442:
 6073              	 .align 2
 6074              	.L441:
 6075 002c 00000000 	 .word antiGravityEnabled
 6076 0030 00000000 	 .word itermAccelerator
 6077              	 .cfi_endproc
 6078              	.LFE592:
 6080              	 .section .text.pidAntiGravityEnabled,"ax",%progbits
 6081              	 .align 2
 6082              	 .global pidAntiGravityEnabled
 6083              	 .thumb
 6084              	 .thumb_func
 6086              	pidAntiGravityEnabled:
 6087              	.LFB593:
1094:../cleanflight/src/main/flight/pid.c **** 
1095:../cleanflight/src/main/flight/pid.c **** bool pidAntiGravityEnabled(void)
1096:../cleanflight/src/main/flight/pid.c **** {
 6088              	 .loc 4 1096 0
 6089              	 .cfi_startproc
 6090              	 
 6091              	 
 6092              	 
 6093 0000 80B4     	 push {r7}
 6094              	.LCFI181:
 6095              	 .cfi_def_cfa_offset 4
 6096              	 .cfi_offset 7,-4
 6097 0002 00AF     	 add r7,sp,#0
 6098              	.LCFI182:
 6099              	 .cfi_def_cfa_register 7
1097:../cleanflight/src/main/flight/pid.c ****     return antiGravityEnabled;
 6100              	 .loc 4 1097 0
 6101 0004 034B     	 ldr r3,.L445
 6102 0006 1B78     	 ldrb r3,[r3]
1098:../cleanflight/src/main/flight/pid.c **** }
 6103              	 .loc 4 1098 0
 6104 0008 1846     	 mov r0,r3
 6105 000a BD46     	 mov sp,r7
 6106              	.LCFI183:
 6107              	 .cfi_def_cfa_register 13
 6108              	 
 6109 000c 5DF8047B 	 ldr r7,[sp],#4
 6110              	.LCFI184:
 6111              	 .cfi_restore 7
 6112              	 .cfi_def_cfa_offset 0
 6113 0010 7047     	 bx lr
 6114              	.L446:
 6115 0012 00BF     	 .align 2
 6116              	.L445:
 6117 0014 00000000 	 .word antiGravityEnabled
 6118              	 .cfi_endproc
 6119              	.LFE593:
 6121              	 .section .rodata._reset_template_171.14008,"a",%progbits
 6122              	 .align 2
 6125              	_reset_template_171.14008:
 6126 0000 0000     	 .short 0
 6127 0002 6400     	 .short 100
 6128 0004 0000     	 .short 0
 6129 0006 A000     	 .short 160
 6130 0008 2E       	 .byte 46
 6131 0009 2D       	 .byte 45
 6132 000a 19       	 .byte 25
 6133 000b 3C00     	 .2byte 60
 6134 000d 32       	 .byte 50
 6135 000e 32       	 .byte 50
 6136 000f 1B       	 .byte 27
 6137 0010 3C00     	 .2byte 60
 6138 0012 41       	 .byte 65
 6139 0013 2D       	 .byte 45
 6140 0014 00       	 .byte 0
 6141 0015 3C00     	 .2byte 60
 6142 0017 32       	 .byte 50
 6143 0018 32       	 .byte 50
 6144 0019 4B       	 .byte 75
 6145 001a 0000     	 .2byte 0
 6146 001c 28       	 .byte 40
 6147 001d 00       	 .byte 0
 6148 001e 00       	 .byte 0
 6149 001f 0000     	 .2byte 0
 6150 0021 00       	 .byte 0
 6151 0022 28       	 .byte 40
 6152 0023 F401     	 .2byte 500
 6153 0025 9001     	 .2byte 400
 6154 0027 01       	 .byte 1
 6155 0028 37       	 .byte 55
 6156 0029 4B       	 .byte 75
 6157 002a 00       	 .byte 0
 6158 002b 00       	 .byte 0
 6159 002c FA00     	 .short 250
 6160 002e 8813     	 .short 5000
 6161 0030 6400     	 .short 100
 6162 0032 0000     	 .short 0
 6163 0034 3200     	 .short 50
 6164 0036 9001     	 .short 400
 6165 0038 5E01     	 .short 350
 6166 003a F401     	 .short 500
 6167 003c 0000     	 .short 0
 6168 003e 0A       	 .byte 10
 6169 003f 64       	 .byte 100
 6170 0040 00       	 .byte 0
 6171 0041 00       	 .byte 0
 6172 0042 C800     	 .short 200
 6173 0044 9600     	 .short 150
 6174 0046 C800     	 .short 200
 6175 0048 00       	 .byte 0
 6176 0049 05       	 .byte 5
 6177 004a 0F       	 .byte 15
 6178 004b 01       	 .byte 1
 6179 004c 00       	 .byte 0
 6180 004d 00       	 .byte 0
 6181 004e 0B       	 .byte 11
 6182 004f 00       	 .byte 0
 6183 0050 14       	 .byte 20
 6184 0051 00       	 .byte 0
 6185 0052 4B       	 .byte 75
 6186 0053 3200     	 .2byte 50
 6187 0055 00       	 .byte 0
 6188 0056 5A       	 .byte 90
 6189 0057 14       	 .byte 20
 6190              	 .section .bss.previousSetpoint.14206,"aw",%nobits
 6191              	 .align 2
 6194              	previousSetpoint.14206:
 6195 0000 00000000 	 .space 12
 6195      00000000 
 6195      00000000 
 6196              	 .section .bss.previousGyroRateDterm.14312,"aw",%nobits
 6197              	 .align 2
 6200              	previousGyroRateDterm.14312:
 6201 0000 00000000 	 .space 12
 6201      00000000 
 6201      00000000 
 6202              	 .section .bss.previousPidSetpoint.14313,"aw",%nobits
 6203              	 .align 2
 6206              	previousPidSetpoint.14313:
 6207 0000 00000000 	 .space 12
 6207      00000000 
 6207      00000000 
 6208              	 .text
 6209              	.Letext0:
 6210              	 .file 5 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6211              	 .file 6 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6212              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 6213              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 6214              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/axis.h"
 6215              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/filter.h"
 6216              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 6217              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_core.h"
 6218              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
 6219              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 6220              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
 6221              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/gps_rescue.h"
 6222              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 6223              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
 6224              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
 6225              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
 6226              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sensor.h"
 6227              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/gyro.h"
 6228              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/sensors.h"
 6229              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/acceleration.h"
 6230              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 6231              	 .file 26 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pid.c
    {standard input}:20     .text.constrainf:00000000 $t
    {standard input}:24     .text.constrainf:00000000 constrainf
    {standard input}:87     .text.cmpTimeUs:00000000 $t
    {standard input}:91     .text.cmpTimeUs:00000000 cmpTimeUs
    {standard input}:132    .text.pidProfilesMutable:00000000 $t
    {standard input}:136    .text.pidProfilesMutable:00000000 pidProfilesMutable
    {standard input}:177    .text.pidProfilesMutable:00000020 $d
                            *COM*:00000108 pidProfiles_SystemArray
    {standard input}:182    .text.pidConfig:00000000 $t
    {standard input}:186    .text.pidConfig:00000000 pidConfig
    {standard input}:215    .text.pidConfig:00000010 $d
                            *COM*:00000005 pidConfig_System
    {standard input}:224    .rodata.pidNames:00000000 pidNames
    {standard input}:221    .rodata.pidNames:00000000 $d
                            *COM*:00000004 targetPidLooptime
                            *COM*:0000003c pidData
    {standard input}:231    .bss.pidStabilisationEnabled:00000000 pidStabilisationEnabled
    {standard input}:232    .bss.pidStabilisationEnabled:00000000 $d
    {standard input}:236    .bss.inCrashRecoveryMode:00000000 inCrashRecoveryMode
    {standard input}:237    .bss.inCrashRecoveryMode:00000000 $d
    {standard input}:239    .bss.dT:00000000 $d
    {standard input}:242    .bss.dT:00000000 dT
    {standard input}:245    .bss.pidFrequency:00000000 $d
    {standard input}:248    .bss.pidFrequency:00000000 pidFrequency
    {standard input}:253    .bss.antiGravityMode:00000000 antiGravityMode
    {standard input}:254    .bss.antiGravityMode:00000000 $d
    {standard input}:256    .bss.antiGravityThrottleHpf:00000000 $d
    {standard input}:259    .bss.antiGravityThrottleHpf:00000000 antiGravityThrottleHpf
    {standard input}:262    .bss.itermAcceleratorGain:00000000 $d
    {standard input}:265    .bss.itermAcceleratorGain:00000000 itermAcceleratorGain
    {standard input}:268    .data.antiGravityOsdCutoff:00000000 $d
    {standard input}:271    .data.antiGravityOsdCutoff:00000000 antiGravityOsdCutoff
    {standard input}:276    .bss.antiGravityEnabled:00000000 antiGravityEnabled
    {standard input}:277    .bss.antiGravityEnabled:00000000 $d
                            *COM*:00000005 pidConfig_Copy
    {standard input}:285    .pg_registry:00000000 pidConfig_Registry
    {standard input}:282    .pg_registry:00000000 $d
    {standard input}:297    .pg_resetdata:00000000 pgResetTemplate_pidConfig
    {standard input}:294    .pg_resetdata:00000000 $d
                            *COM*:00000108 pidProfiles_CopyArray
    {standard input}:309    .pg_registry:00000014 pidProfiles_Registry
    {standard input}:372    .text.pgResetFn_pidProfiles:00000000 pgResetFn_pidProfiles
    {standard input}:317    .text.resetPidProfile:00000000 $t
    {standard input}:322    .text.resetPidProfile:00000000 resetPidProfile
    {standard input}:362    .text.resetPidProfile:00000020 $d
    {standard input}:6125   .rodata._reset_template_171.14008:00000000 _reset_template_171.14008
    {standard input}:367    .text.pgResetFn_pidProfiles:00000000 $t
    {standard input}:427    .text.pidSetTargetLooptime:00000000 $t
    {standard input}:431    .text.pidSetTargetLooptime:00000000 pidSetTargetLooptime
    {standard input}:485    .text.pidSetTargetLooptime:00000048 $d
    {standard input}:493    .data.itermAccelerator:00000000 $d
    {standard input}:496    .data.itermAccelerator:00000000 itermAccelerator
    {standard input}:499    .text.pidSetItermAccelerator:00000000 $t
    {standard input}:504    .text.pidSetItermAccelerator:00000000 pidSetItermAccelerator
    {standard input}:542    .text.pidSetItermAccelerator:00000018 $d
    {standard input}:547    .text.pidOsdAntiGravityActive:00000000 $t
    {standard input}:552    .text.pidOsdAntiGravityActive:00000000 pidOsdAntiGravityActive
    {standard input}:591    .text.pidOsdAntiGravityActive:0000002c $d
    {standard input}:597    .text.pidStabilisationState:00000000 $t
    {standard input}:602    .text.pidStabilisationState:00000000 pidStabilisationState
    {standard input}:646    .text.pidStabilisationState:00000024 $d
    {standard input}:655    .rodata.rcAliasToAngleIndexMap:00000000 rcAliasToAngleIndexMap
    {standard input}:652    .rodata.rcAliasToAngleIndexMap:00000000 $d
    {standard input}:659    .bss.dtermNotchApplyFn:00000000 $d
    {standard input}:662    .bss.dtermNotchApplyFn:00000000 dtermNotchApplyFn
    {standard input}:665    .bss.dtermNotch:00000000 $d
    {standard input}:668    .bss.dtermNotch:00000000 dtermNotch
    {standard input}:671    .bss.dtermLowpassApplyFn:00000000 $d
    {standard input}:674    .bss.dtermLowpassApplyFn:00000000 dtermLowpassApplyFn
    {standard input}:677    .bss.dtermLowpass:00000000 $d
    {standard input}:680    .bss.dtermLowpass:00000000 dtermLowpass
    {standard input}:683    .bss.dtermLowpass2ApplyFn:00000000 $d
    {standard input}:686    .bss.dtermLowpass2ApplyFn:00000000 dtermLowpass2ApplyFn
    {standard input}:689    .bss.dtermLowpass2:00000000 $d
    {standard input}:692    .bss.dtermLowpass2:00000000 dtermLowpass2
    {standard input}:695    .bss.ptermYawLowpassApplyFn:00000000 $d
    {standard input}:698    .bss.ptermYawLowpassApplyFn:00000000 ptermYawLowpassApplyFn
    {standard input}:701    .bss.ptermYawLowpass:00000000 $d
    {standard input}:704    .bss.ptermYawLowpass:00000000 ptermYawLowpass
    {standard input}:707    .bss.windupLpf:00000000 $d
    {standard input}:710    .bss.windupLpf:00000000 windupLpf
    {standard input}:715    .bss.itermRelax:00000000 itermRelax
    {standard input}:716    .bss.itermRelax:00000000 $d
    {standard input}:720    .bss.itermRelaxType:00000000 itermRelaxType
    {standard input}:721    .bss.itermRelaxType:00000000 $d
    {standard input}:725    .bss.itermRelaxCutoff:00000000 itermRelaxCutoff
    {standard input}:726    .bss.itermRelaxCutoff:00000000 $d
    {standard input}:728    .bss.setpointDerivativePt1:00000000 $d
    {standard input}:731    .bss.setpointDerivativePt1:00000000 setpointDerivativePt1
    {standard input}:734    .bss.setpointDerivativeBiquad:00000000 $d
    {standard input}:737    .bss.setpointDerivativeBiquad:00000000 setpointDerivativeBiquad
    {standard input}:742    .bss.setpointDerivativeLpfInitialized:00000000 setpointDerivativeLpfInitialized
    {standard input}:743    .bss.setpointDerivativeLpfInitialized:00000000 $d
    {standard input}:747    .bss.rcSmoothingDebugAxis:00000000 rcSmoothingDebugAxis
    {standard input}:748    .bss.rcSmoothingDebugAxis:00000000 $d
    {standard input}:752    .bss.rcSmoothingFilterType:00000000 rcSmoothingFilterType
    {standard input}:753    .bss.rcSmoothingFilterType:00000000 $d
    {standard input}:755    .bss.antiGravityThrottleLpf:00000000 $d
    {standard input}:758    .bss.antiGravityThrottleLpf:00000000 antiGravityThrottleLpf
    {standard input}:761    .text.pidInitFilters:00000000 $t
    {standard input}:766    .text.pidInitFilters:00000000 pidInitFilters
    {standard input}:1163   .text.pidInitFilters:00000284 $d
                            *COM*:00000008 throttleLpf
    {standard input}:1181   .text.pidInitFilters:000002c4 $t
    {standard input}:1231   .text.pidInitFilters:00000310 $d
    {standard input}:1239   .text.pidInitSetpointDerivativeLpf:00000000 $t
    {standard input}:1244   .text.pidInitSetpointDerivativeLpf:00000000 pidInitSetpointDerivativeLpf
    {standard input}:1365   .text.pidInitSetpointDerivativeLpf:000000a4 $d
    {standard input}:1376   .text.pidUpdateSetpointDerivativeLpf:00000000 $t
    {standard input}:1381   .text.pidUpdateSetpointDerivativeLpf:00000000 pidUpdateSetpointDerivativeLpf
    {standard input}:1486   .text.pidUpdateSetpointDerivativeLpf:0000008c $d
    {standard input}:1495   .bss.pidCoefficient:00000000 $d
    {standard input}:1498   .bss.pidCoefficient:00000000 pidCoefficient
    {standard input}:1501   .bss.maxVelocity:00000000 $d
    {standard input}:1504   .bss.maxVelocity:00000000 maxVelocity
    {standard input}:1507   .bss.feedForwardTransition:00000000 $d
    {standard input}:1510   .bss.feedForwardTransition:00000000 feedForwardTransition
    {standard input}:1513   .bss.levelGain:00000000 $d
    {standard input}:1516   .bss.levelGain:00000000 levelGain
    {standard input}:1519   .bss.horizonGain:00000000 $d
    {standard input}:1522   .bss.horizonGain:00000000 horizonGain
    {standard input}:1525   .bss.horizonTransition:00000000 $d
    {standard input}:1528   .bss.horizonTransition:00000000 horizonTransition
    {standard input}:1531   .bss.horizonCutoffDegrees:00000000 $d
    {standard input}:1534   .bss.horizonCutoffDegrees:00000000 horizonCutoffDegrees
    {standard input}:1537   .bss.horizonFactorRatio:00000000 $d
    {standard input}:1540   .bss.horizonFactorRatio:00000000 horizonFactorRatio
    {standard input}:1543   .bss.ITermWindupPointInv:00000000 $d
    {standard input}:1546   .bss.ITermWindupPointInv:00000000 ITermWindupPointInv
    {standard input}:1551   .bss.horizonTiltExpertMode:00000000 horizonTiltExpertMode
    {standard input}:1552   .bss.horizonTiltExpertMode:00000000 $d
    {standard input}:1554   .bss.crashTimeLimitUs:00000000 $d
    {standard input}:1557   .bss.crashTimeLimitUs:00000000 crashTimeLimitUs
    {standard input}:1560   .bss.crashTimeDelayUs:00000000 $d
    {standard input}:1563   .bss.crashTimeDelayUs:00000000 crashTimeDelayUs
    {standard input}:1566   .bss.crashRecoveryAngleDeciDegrees:00000000 $d
    {standard input}:1569   .bss.crashRecoveryAngleDeciDegrees:00000000 crashRecoveryAngleDeciDegrees
    {standard input}:1572   .bss.crashRecoveryRate:00000000 $d
    {standard input}:1575   .bss.crashRecoveryRate:00000000 crashRecoveryRate
    {standard input}:1578   .bss.crashDtermThreshold:00000000 $d
    {standard input}:1581   .bss.crashDtermThreshold:00000000 crashDtermThreshold
    {standard input}:1584   .bss.crashGyroThreshold:00000000 $d
    {standard input}:1587   .bss.crashGyroThreshold:00000000 crashGyroThreshold
    {standard input}:1590   .bss.crashSetpointThreshold:00000000 $d
    {standard input}:1593   .bss.crashSetpointThreshold:00000000 crashSetpointThreshold
    {standard input}:1596   .bss.crashLimitYaw:00000000 $d
    {standard input}:1599   .bss.crashLimitYaw:00000000 crashLimitYaw
    {standard input}:1602   .bss.itermLimit:00000000 $d
    {standard input}:1605   .bss.itermLimit:00000000 itermLimit
                            *COM*:00000004 throttleBoost
    {standard input}:1612   .bss.itermRotation:00000000 itermRotation
    {standard input}:1613   .bss.itermRotation:00000000 $d
    {standard input}:1617   .bss.smartFeedforward:00000000 smartFeedforward
    {standard input}:1618   .bss.smartFeedforward:00000000 $d
    {standard input}:1620   .bss.axisError:00000000 $d
    {standard input}:1623   .bss.axisError:00000000 axisError
    {standard input}:1626   .bss.acGain:00000000 $d
    {standard input}:1629   .bss.acGain:00000000 acGain
    {standard input}:1632   .bss.acLimit:00000000 $d
    {standard input}:1635   .bss.acLimit:00000000 acLimit
    {standard input}:1638   .bss.acErrorLimit:00000000 $d
    {standard input}:1641   .bss.acErrorLimit:00000000 acErrorLimit
    {standard input}:1644   .text.pidResetITerm:00000000 $t
    {standard input}:1649   .text.pidResetITerm:00000000 pidResetITerm
    {standard input}:1715   .text.pidResetITerm:00000044 $d
    {standard input}:1721   .bss.acroTrainerAngleLimit:00000000 $d
    {standard input}:1724   .bss.acroTrainerAngleLimit:00000000 acroTrainerAngleLimit
    {standard input}:1727   .bss.acroTrainerLookaheadTime:00000000 $d
    {standard input}:1730   .bss.acroTrainerLookaheadTime:00000000 acroTrainerLookaheadTime
    {standard input}:1735   .bss.acroTrainerDebugAxis:00000000 acroTrainerDebugAxis
    {standard input}:1736   .bss.acroTrainerDebugAxis:00000000 $d
    {standard input}:1740   .bss.acroTrainerActive:00000000 acroTrainerActive
    {standard input}:1741   .bss.acroTrainerActive:00000000 $d
    {standard input}:1743   .bss.acroTrainerAxisState:00000000 $d
    {standard input}:1746   .bss.acroTrainerAxisState:00000000 acroTrainerAxisState
    {standard input}:1749   .bss.acroTrainerGain:00000000 $d
    {standard input}:1752   .bss.acroTrainerGain:00000000 acroTrainerGain
    {standard input}:1755   .text.pidUpdateAntiGravityThrottleFilter:00000000 $t
    {standard input}:1760   .text.pidUpdateAntiGravityThrottleFilter:00000000 pidUpdateAntiGravityThrottleFilter
    {standard input}:1805   .text.pidUpdateAntiGravityThrottleFilter:00000030 $d
    {standard input}:1812   .text.pidInitConfig:00000000 $t
    {standard input}:1817   .text.pidInitConfig:00000000 pidInitConfig
    {standard input}:1864   .text.pidInitConfig:00000040 $d
    {standard input}:1869   .text.pidInitConfig:0000004c $t
    {standard input}:2201   .text.pidInitConfig:0000038c $d
    {standard input}:2235   .text.pidInitConfig:00000410 $t
    {standard input}:2315   .text.pidInitConfig:000004c8 $d
    {standard input}:2330   .text.pidInit:00000000 $t
    {standard input}:2335   .text.pidInit:00000000 pidInit
    {standard input}:2381   .text.pidInit:00000030 $d
    {standard input}:2386   .text.pidAcroTrainerInit:00000000 $t
    {standard input}:2391   .text.pidAcroTrainerInit:00000000 pidAcroTrainerInit
    {standard input}:2426   .text.pidAcroTrainerInit:00000018 $d
    {standard input}:2431   .text.pidCopyProfile:00000000 $t
    {standard input}:2436   .text.pidCopyProfile:00000000 pidCopyProfile
    {standard input}:2499   .text.calcHorizonLevelStrength:00000000 $t
    {standard input}:2503   .text.calcHorizonLevelStrength:00000000 calcHorizonLevelStrength
    {standard input}:2727   .text.calcHorizonLevelStrength:000001f0 $d
    {standard input}:2740   .text.pidLevel:00000000 $t
    {standard input}:2744   .text.pidLevel:00000000 pidLevel
    {standard input}:2885   .text.pidLevel:00000124 $d
    {standard input}:2895   .text.accelerationLimit:00000000 $t
    {standard input}:2899   .text.accelerationLimit:00000000 accelerationLimit
    {standard input}:3014   .text.accelerationLimit:000000c0 $d
    {standard input}:6194   .bss.previousSetpoint.14206:00000000 previousSetpoint.14206
    {standard input}:3020   .bss.crashDetectedAtUs:00000000 $d
    {standard input}:3023   .bss.crashDetectedAtUs:00000000 crashDetectedAtUs
    {standard input}:3026   .text.handleCrashRecovery:00000000 $t
    {standard input}:3030   .text.handleCrashRecovery:00000000 handleCrashRecovery
    {standard input}:3299   .text.handleCrashRecovery:00000218 $d
    {standard input}:3314   .text.detectAndSetCrashRecovery:00000000 $t
    {standard input}:3318   .text.detectAndSetCrashRecovery:00000000 detectAndSetCrashRecovery
    {standard input}:3550   .text.detectAndSetCrashRecovery:000001a8 $d
    {standard input}:3562   .text.rotateVector:00000000 $t
    {standard input}:3566   .text.rotateVector:00000000 rotateVector
    {standard input}:3692   .text.rotateVector:000000cc $d
    {standard input}:3697   .text.rotateITermAndAxisError:00000000 $t
    {standard input}:3701   .text.rotateITermAndAxisError:00000000 rotateITermAndAxisError
    {standard input}:3870   .text.rotateITermAndAxisError:00000104 $d
    {standard input}:3881   .text.acroTrainerSign:00000000 $t
    {standard input}:3886   .text.acroTrainerSign:00000000 acroTrainerSign
    {standard input}:3934   .text.applyAcroTrainer:00000000 $t
    {standard input}:3938   .text.applyAcroTrainer:00000000 applyAcroTrainer
    {standard input}:4246   .text.applyAcroTrainer:00000288 $d
    {standard input}:4265   .text.applyRcSmoothingDerivativeFilter:00000000 $t
    {standard input}:4270   .text.applyRcSmoothingDerivativeFilter:00000000 applyRcSmoothingDerivativeFilter
    {standard input}:4394   .text.applyRcSmoothingDerivativeFilter:000000bc $d
    {standard input}:4406   .text.applySmartFeedforward:00000000 $t
    {standard input}:4411   .text.applySmartFeedforward:00000000 applySmartFeedforward
    {standard input}:4553   .text.applySmartFeedforward:000000ec $d
    {standard input}:4559   .text.pidController:00000000 $t
    {standard input}:4564   .text.pidController:00000000 pidController
    {standard input}:4787   .text.pidController:000001e0 $d
    {standard input}:4808   .text.pidController:00000228 $t
    {standard input}:5172   .text.pidController:0000055c $d
    {standard input}:5189   .text.pidController:00000594 $t
    {standard input}:5539   .text.pidController:000008f4 $d
    {standard input}:6200   .bss.previousGyroRateDterm.14312:00000000 previousGyroRateDterm.14312
    {standard input}:5555   .text.pidController:0000092c $t
    {standard input}:5908   .text.pidController:00000c18 $d
    {standard input}:6206   .bss.previousPidSetpoint.14313:00000000 previousPidSetpoint.14313
    {standard input}:5920   .text.crashRecoveryModeActive:00000000 $t
    {standard input}:5925   .text.crashRecoveryModeActive:00000000 crashRecoveryModeActive
    {standard input}:5956   .text.crashRecoveryModeActive:00000014 $d
    {standard input}:5961   .text.pidSetAcroTrainerState:00000000 $t
    {standard input}:5966   .text.pidSetAcroTrainerState:00000000 pidSetAcroTrainerState
    {standard input}:6015   .text.pidSetAcroTrainerState:0000002c $d
    {standard input}:6020   .text.pidSetAntiGravityState:00000000 $t
    {standard input}:6025   .text.pidSetAntiGravityState:00000000 pidSetAntiGravityState
    {standard input}:6075   .text.pidSetAntiGravityState:0000002c $d
    {standard input}:6081   .text.pidAntiGravityEnabled:00000000 $t
    {standard input}:6086   .text.pidAntiGravityEnabled:00000000 pidAntiGravityEnabled
    {standard input}:6117   .text.pidAntiGravityEnabled:00000014 $d
    {standard input}:6122   .rodata._reset_template_171.14008:00000000 $d
    {standard input}:6191   .bss.previousSetpoint.14206:00000000 $d
    {standard input}:6197   .bss.previousGyroRateDterm.14312:00000000 $d
    {standard input}:6203   .bss.previousPidSetpoint.14313:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcpy
filterGetNotchQ
biquadFilterInit
pt1FilterGain
pt1FilterInit
biquadFilterInitLPF
nullFilterApply
biquadFilterApply
pt1FilterApply
pt1FilterUpdateCutoff
biquadFilterUpdateLPF
gyro
getRcDeflectionAbs
attitude
getRcDeflection
gpsRescueAngle
flightModeFlags
sensors
getMotorMixRange
gyroOverflowDetected
getSetpointRate
armingFlags
lrintf
debugMode
debug
biquadFilterApplyDF1
getThrottlePIDAttenuation
gyroYawSpinDetected
fapplyDeadband
isAirmodeActivated
mixerIsOutputSaturated
