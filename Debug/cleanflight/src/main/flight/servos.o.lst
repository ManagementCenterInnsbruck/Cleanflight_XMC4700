   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "servos.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.constrain,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	constrain:
  25              	.LFB521:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  27              	 .loc 1 151 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 85B0     	 sub sp,sp,#20
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 F860     	 str r0,[r7,#12]
  43 0008 B960     	 str r1,[r7,#8]
  44 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
  45              	 .loc 1 152 0
  46 000c FA68     	 ldr r2,[r7,#12]
  47 000e BB68     	 ldr r3,[r7,#8]
  48 0010 9A42     	 cmp r2,r3
  49 0012 01DA     	 bge .L2
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
  50              	 .loc 1 153 0
  51 0014 BB68     	 ldr r3,[r7,#8]
  52 0016 06E0     	 b .L3
  53              	.L2:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
  54              	 .loc 1 154 0
  55 0018 FA68     	 ldr r2,[r7,#12]
  56 001a 7B68     	 ldr r3,[r7,#4]
  57 001c 9A42     	 cmp r2,r3
  58 001e 01DD     	 ble .L4
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
  59              	 .loc 1 155 0
  60 0020 7B68     	 ldr r3,[r7,#4]
  61 0022 00E0     	 b .L3
  62              	.L4:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
  63              	 .loc 1 157 0
  64 0024 FB68     	 ldr r3,[r7,#12]
  65              	.L3:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
  66              	 .loc 1 158 0
  67 0026 1846     	 mov r0,r3
  68 0028 1437     	 adds r7,r7,#20
  69              	.LCFI3:
  70              	 .cfi_def_cfa_offset 4
  71 002a BD46     	 mov sp,r7
  72              	.LCFI4:
  73              	 .cfi_def_cfa_register 13
  74              	 
  75 002c 5DF8047B 	 ldr r7,[sp],#4
  76              	.LCFI5:
  77              	 .cfi_restore 7
  78              	 .cfi_def_cfa_offset 0
  79 0030 7047     	 bx lr
  80              	 .cfi_endproc
  81              	.LFE521:
  83 0032 00BF     	 .section .text.rxConfig,"ax",%progbits
  84              	 .align 2
  85              	 .thumb
  86              	 .thumb_func
  88              	rxConfig:
  89              	.LFB528:
  90              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
  91              	 .loc 2 61 0
  92              	 .cfi_startproc
  93              	 
  94              	 
  95              	 
  96 0000 80B4     	 push {r7}
  97              	.LCFI6:
  98              	 .cfi_def_cfa_offset 4
  99              	 .cfi_offset 7,-4
 100 0002 00AF     	 add r7,sp,#0
 101              	.LCFI7:
 102              	 .cfi_def_cfa_register 7
 103              	 .loc 2 61 0
 104 0004 024B     	 ldr r3,.L7
 105 0006 1846     	 mov r0,r3
 106 0008 BD46     	 mov sp,r7
 107              	.LCFI8:
 108              	 .cfi_def_cfa_register 13
 109              	 
 110 000a 5DF8047B 	 ldr r7,[sp],#4
 111              	.LCFI9:
 112              	 .cfi_restore 7
 113              	 .cfi_def_cfa_offset 0
 114 000e 7047     	 bx lr
 115              	.L8:
 116              	 .align 2
 117              	.L7:
 118 0010 00000000 	 .word rxConfig_System
 119              	 .cfi_endproc
 120              	.LFE528:
 122              	 .comm inputSource_e,1,1
 123              	 .section .text.customServoMixers,"ax",%progbits
 124              	 .align 2
 125              	 .thumb
 126              	 .thumb_func
 128              	customServoMixers:
 129              	.LFB560:
 130              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/servos.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "drivers/io_types.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "drivers/pwm_output.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // These must be consecutive, see 'reversedSources'
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** enum {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_ROLL = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_PITCH,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_YAW,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_THROTTLE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_ROLL,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_PITCH,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_YAW,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_THROTTLE,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX1,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX2,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX3,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX4,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_GIMBAL_PITCH,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_GIMBAL_ROLL,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_SOURCE_COUNT
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } inputSource_e;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // target servo channels
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef enum {
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_GIMBAL_PITCH = 0,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_GIMBAL_ROLL = 1,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPS = 2,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPPERON_1 = 3,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPPERON_2 = 4,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_RUDDER = 5,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_ELEVATOR = 6,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_THROTTLE = 7, // for internal combustion (IC) planes
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_BICOPTER_LEFT = 4,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_BICOPTER_RIGHT = 5,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_DUALCOPTER_LEFT = 4,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_DUALCOPTER_RIGHT = 5,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_1 = 3,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_2 = 4,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_3 = 5,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_4 = 6,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_LEFT = 0,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_RIGHT = 1,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_TOP = 2,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_RUD = 3
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoIndex_e; // FIXME rename to servoChannel_e
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_PLANE_INDEX_MIN SERVO_FLAPS
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_PLANE_INDEX_MAX SERVO_THROTTLE
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_DUALCOPTER_INDEX_MIN SERVO_DUALCOPTER_LEFT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_DUALCOPTER_INDEX_MAX SERVO_DUALCOPTER_RIGHT
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_SINGLECOPTER_INDEX_MIN SERVO_SINGLECOPTER_1
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_SINGLECOPTER_INDEX_MAX SERVO_SINGLECOPTER_4
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_FLAPPERONS_MIN SERVO_FLAPPERON_1
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_FLAPPERONS_MAX SERVO_FLAPPERON_2
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_RULES (2 * MAX_SUPPORTED_SERVOS)
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoMixer_s {
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t targetChannel;                  // servo that receives the output of the rule
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t inputSource;                    // input channel for this rule
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t rate;                            // range [-125;+125] ; can be used to adjust a rate 0-1
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t speed;                          // reduces the speed of the rule, 0=unlimited speed
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t min;                             // lower bound of rule range [0;100]% of servo max-min
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t max;                             // lower bound of rule range [0;100]% of servo max-min
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t box;                            // active rule if box is enabled, range [0;3], 0=no box
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoMixer_t;
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE_ARRAY(servoMixer_t, MAX_SERVO_RULES, customServoMixers);
 131              	 .loc 3 99 0
 132              	 .cfi_startproc
 133              	 
 134              	 
 135              	 
 136 0000 80B4     	 push {r7}
 137              	.LCFI10:
 138              	 .cfi_def_cfa_offset 4
 139              	 .cfi_offset 7,-4
 140 0002 83B0     	 sub sp,sp,#12
 141              	.LCFI11:
 142              	 .cfi_def_cfa_offset 16
 143 0004 00AF     	 add r7,sp,#0
 144              	.LCFI12:
 145              	 .cfi_def_cfa_register 7
 146 0006 7860     	 str r0,[r7,#4]
 147              	 .loc 3 99 0
 148 0008 7A68     	 ldr r2,[r7,#4]
 149 000a 1346     	 mov r3,r2
 150 000c DB00     	 lsls r3,r3,#3
 151 000e 9B1A     	 subs r3,r3,r2
 152 0010 034A     	 ldr r2,.L11
 153 0012 1344     	 add r3,r3,r2
 154 0014 1846     	 mov r0,r3
 155 0016 0C37     	 adds r7,r7,#12
 156              	.LCFI13:
 157              	 .cfi_def_cfa_offset 4
 158 0018 BD46     	 mov sp,r7
 159              	.LCFI14:
 160              	 .cfi_def_cfa_register 13
 161              	 
 162 001a 5DF8047B 	 ldr r7,[sp],#4
 163              	.LCFI15:
 164              	 .cfi_restore 7
 165              	 .cfi_def_cfa_offset 0
 166 001e 7047     	 bx lr
 167              	.L12:
 168              	 .align 2
 169              	.L11:
 170 0020 00000000 	 .word customServoMixers_SystemArray
 171              	 .cfi_endproc
 172              	.LFE560:
 174              	 .section .text.customServoMixersMutable,"ax",%progbits
 175              	 .align 2
 176              	 .thumb
 177              	 .thumb_func
 179              	customServoMixersMutable:
 180              	.LFB561:
 181              	 .loc 3 99 0
 182              	 .cfi_startproc
 183              	 
 184              	 
 185              	 
 186 0000 80B4     	 push {r7}
 187              	.LCFI16:
 188              	 .cfi_def_cfa_offset 4
 189              	 .cfi_offset 7,-4
 190 0002 83B0     	 sub sp,sp,#12
 191              	.LCFI17:
 192              	 .cfi_def_cfa_offset 16
 193 0004 00AF     	 add r7,sp,#0
 194              	.LCFI18:
 195              	 .cfi_def_cfa_register 7
 196 0006 7860     	 str r0,[r7,#4]
 197              	 .loc 3 99 0
 198 0008 7A68     	 ldr r2,[r7,#4]
 199 000a 1346     	 mov r3,r2
 200 000c DB00     	 lsls r3,r3,#3
 201 000e 9B1A     	 subs r3,r3,r2
 202 0010 034A     	 ldr r2,.L15
 203 0012 1344     	 add r3,r3,r2
 204 0014 1846     	 mov r0,r3
 205 0016 0C37     	 adds r7,r7,#12
 206              	.LCFI19:
 207              	 .cfi_def_cfa_offset 4
 208 0018 BD46     	 mov sp,r7
 209              	.LCFI20:
 210              	 .cfi_def_cfa_register 13
 211              	 
 212 001a 5DF8047B 	 ldr r7,[sp],#4
 213              	.LCFI21:
 214              	 .cfi_restore 7
 215              	 .cfi_def_cfa_offset 0
 216 001e 7047     	 bx lr
 217              	.L16:
 218              	 .align 2
 219              	.L15:
 220 0020 00000000 	 .word customServoMixers_SystemArray
 221              	 .cfi_endproc
 222              	.LFE561:
 224              	 .section .text.servoParams,"ax",%progbits
 225              	 .align 2
 226              	 .thumb
 227              	 .thumb_func
 229              	servoParams:
 230              	.LFB563:
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_SPEED UINT8_MAX
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_BOXES 3
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // Custom mixer configuration
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct mixerRules_s {
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t servoRuleCount;
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     const servoMixer_t *rule;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } mixerRules_t;
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** extern const mixerRules_t servoMixers[];
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoParam_s {
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint32_t reversedSources;               // the direction of servo movement for each input sourc
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t min;                            // servo min
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t max;                            // servo max
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t middle;                         // servo middle
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t rate;                            // range [-125;+125] ; can be used to adjust a rate 0-1
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t forwardFromChannel;              // RX channel index, 0 based.  See CHANNEL_FORWARDING_D
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoParam_t;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE_ARRAY(servoParam_t, MAX_SUPPORTED_SERVOS, servoParams);
 231              	 .loc 3 121 0
 232              	 .cfi_startproc
 233              	 
 234              	 
 235              	 
 236 0000 80B4     	 push {r7}
 237              	.LCFI22:
 238              	 .cfi_def_cfa_offset 4
 239              	 .cfi_offset 7,-4
 240 0002 83B0     	 sub sp,sp,#12
 241              	.LCFI23:
 242              	 .cfi_def_cfa_offset 16
 243 0004 00AF     	 add r7,sp,#0
 244              	.LCFI24:
 245              	 .cfi_def_cfa_register 7
 246 0006 7860     	 str r0,[r7,#4]
 247              	 .loc 3 121 0
 248 0008 7A68     	 ldr r2,[r7,#4]
 249 000a 1346     	 mov r3,r2
 250 000c 5B00     	 lsls r3,r3,#1
 251 000e 1344     	 add r3,r3,r2
 252 0010 9B00     	 lsls r3,r3,#2
 253 0012 044A     	 ldr r2,.L19
 254 0014 1344     	 add r3,r3,r2
 255 0016 1846     	 mov r0,r3
 256 0018 0C37     	 adds r7,r7,#12
 257              	.LCFI25:
 258              	 .cfi_def_cfa_offset 4
 259 001a BD46     	 mov sp,r7
 260              	.LCFI26:
 261              	 .cfi_def_cfa_register 13
 262              	 
 263 001c 5DF8047B 	 ldr r7,[sp],#4
 264              	.LCFI27:
 265              	 .cfi_restore 7
 266              	 .cfi_def_cfa_offset 0
 267 0020 7047     	 bx lr
 268              	.L20:
 269 0022 00BF     	 .align 2
 270              	.L19:
 271 0024 00000000 	 .word servoParams_SystemArray
 272              	 .cfi_endproc
 273              	.LFE563:
 275              	 .section .text.servoConfig,"ax",%progbits
 276              	 .align 2
 277              	 .thumb
 278              	 .thumb_func
 280              	servoConfig:
 281              	.LFB566:
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoConfig_s {
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     servoDevConfig_t dev;
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint16_t servo_lowpass_freq;            // lowpass servo filter frequency selection; 1/1000ths 
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t tri_unarmed_servo;              // send tail servo correction pulses even when unarmed
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t channelForwardingStartChannel;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoConfig_t;
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE(servoConfig_t, servoConfig);
 282              	 .loc 3 130 0
 283              	 .cfi_startproc
 284              	 
 285              	 
 286              	 
 287 0000 80B4     	 push {r7}
 288              	.LCFI28:
 289              	 .cfi_def_cfa_offset 4
 290              	 .cfi_offset 7,-4
 291 0002 00AF     	 add r7,sp,#0
 292              	.LCFI29:
 293              	 .cfi_def_cfa_register 7
 294              	 .loc 3 130 0
 295 0004 024B     	 ldr r3,.L23
 296 0006 1846     	 mov r0,r3
 297 0008 BD46     	 mov sp,r7
 298              	.LCFI30:
 299              	 .cfi_def_cfa_register 13
 300              	 
 301 000a 5DF8047B 	 ldr r7,[sp],#4
 302              	.LCFI31:
 303              	 .cfi_restore 7
 304              	 .cfi_def_cfa_offset 0
 305 000e 7047     	 bx lr
 306              	.L24:
 307              	 .align 2
 308              	.L23:
 309 0010 00000000 	 .word servoConfig_System
 310              	 .cfi_endproc
 311              	.LFE566:
 313              	 .section .text.gimbalConfig,"ax",%progbits
 314              	 .align 2
 315              	 .thumb
 316              	 .thumb_func
 318              	gimbalConfig:
 319              	.LFB568:
 320              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gimbal.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** typedef enum {
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****     GIMBAL_MODE_NORMAL = 0,
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****     GIMBAL_MODE_MIXTILT = 1
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** } gimbalMode_e;
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** #define GIMBAL_MODE_MAX (GIMBAL_MODE_MIXTILT)
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** 
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** typedef struct gimbalConfig_s {
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h ****     uint8_t mode;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** } gimbalConfig_t;
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gimbal.h **** PG_DECLARE(gimbalConfig_t, gimbalConfig);
 321              	 .loc 4 36 0
 322              	 .cfi_startproc
 323              	 
 324              	 
 325              	 
 326 0000 80B4     	 push {r7}
 327              	.LCFI32:
 328              	 .cfi_def_cfa_offset 4
 329              	 .cfi_offset 7,-4
 330 0002 00AF     	 add r7,sp,#0
 331              	.LCFI33:
 332              	 .cfi_def_cfa_register 7
 333              	 .loc 4 36 0
 334 0004 024B     	 ldr r3,.L27
 335 0006 1846     	 mov r0,r3
 336 0008 BD46     	 mov sp,r7
 337              	.LCFI34:
 338              	 .cfi_def_cfa_register 13
 339              	 
 340 000a 5DF8047B 	 ldr r7,[sp],#4
 341              	.LCFI35:
 342              	 .cfi_restore 7
 343              	 .cfi_def_cfa_offset 0
 344 000e 7047     	 bx lr
 345              	.L28:
 346              	 .align 2
 347              	.L27:
 348 0010 00000000 	 .word gimbalConfig_System
 349              	 .cfi_endproc
 350              	.LFE568:
 352              	 .comm servoConfig_System,16,4
 353              	 .comm servoConfig_Copy,16,4
 354              	 .global servoConfig_Registry
 355              	 .section .pg_registry,"a",%progbits
 356              	 .align 2
 359              	servoConfig_Registry:
 360 0000 3400     	 .short 52
 361 0002 1000     	 .short 16
 362 0004 00000000 	 .word servoConfig_System
 363 0008 00000000 	 .word servoConfig_Copy
 364 000c 00000000 	 .word 0
 365 0010 00000000 	 .word pgResetFn_servoConfig
 366              	 .section .text.pgResetFn_servoConfig,"ax",%progbits
 367              	 .align 2
 368              	 .global pgResetFn_servoConfig
 369              	 .thumb
 370              	 .thumb_func
 372              	pgResetFn_servoConfig:
 373              	.LFB576:
 374              	 .file 5 "../cleanflight/src/main/flight/servos.c"
   1:../cleanflight/src/main/flight/servos.c **** /*
   2:../cleanflight/src/main/flight/servos.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/flight/servos.c ****  *
   4:../cleanflight/src/main/flight/servos.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/flight/servos.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/flight/servos.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/flight/servos.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/flight/servos.c ****  * any later version.
   9:../cleanflight/src/main/flight/servos.c ****  *
  10:../cleanflight/src/main/flight/servos.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/flight/servos.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/flight/servos.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/flight/servos.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/flight/servos.c ****  *
  15:../cleanflight/src/main/flight/servos.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/flight/servos.c ****  * along with this software.
  17:../cleanflight/src/main/flight/servos.c ****  *
  18:../cleanflight/src/main/flight/servos.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/flight/servos.c ****  */
  20:../cleanflight/src/main/flight/servos.c **** 
  21:../cleanflight/src/main/flight/servos.c **** #include <stdbool.h>
  22:../cleanflight/src/main/flight/servos.c **** #include <stdint.h>
  23:../cleanflight/src/main/flight/servos.c **** #include <string.h>
  24:../cleanflight/src/main/flight/servos.c **** #include <math.h>
  25:../cleanflight/src/main/flight/servos.c **** 
  26:../cleanflight/src/main/flight/servos.c **** #include "platform.h"
  27:../cleanflight/src/main/flight/servos.c **** 
  28:../cleanflight/src/main/flight/servos.c **** #ifdef USE_SERVOS
  29:../cleanflight/src/main/flight/servos.c **** 
  30:../cleanflight/src/main/flight/servos.c **** #include "build/build_config.h"
  31:../cleanflight/src/main/flight/servos.c **** 
  32:../cleanflight/src/main/flight/servos.c **** #include "common/filter.h"
  33:../cleanflight/src/main/flight/servos.c **** #include "common/maths.h"
  34:../cleanflight/src/main/flight/servos.c **** 
  35:../cleanflight/src/main/flight/servos.c **** #include "config/config_reset.h"
  36:../cleanflight/src/main/flight/servos.c **** #include "config/feature.h"
  37:../cleanflight/src/main/flight/servos.c **** #include "pg/pg.h"
  38:../cleanflight/src/main/flight/servos.c **** #include "pg/pg_ids.h"
  39:../cleanflight/src/main/flight/servos.c **** #include "pg/rx.h"
  40:../cleanflight/src/main/flight/servos.c **** 
  41:../cleanflight/src/main/flight/servos.c **** #include "drivers/pwm_output.h"
  42:../cleanflight/src/main/flight/servos.c **** 
  43:../cleanflight/src/main/flight/servos.c **** #include "fc/config.h"
  44:../cleanflight/src/main/flight/servos.c **** #include "fc/rc_controls.h"
  45:../cleanflight/src/main/flight/servos.c **** #include "fc/rc_modes.h"
  46:../cleanflight/src/main/flight/servos.c **** #include "fc/runtime_config.h"
  47:../cleanflight/src/main/flight/servos.c **** 
  48:../cleanflight/src/main/flight/servos.c **** #include "flight/imu.h"
  49:../cleanflight/src/main/flight/servos.c **** #include "flight/mixer.h"
  50:../cleanflight/src/main/flight/servos.c **** #include "flight/pid.h"
  51:../cleanflight/src/main/flight/servos.c **** #include "flight/servos.h"
  52:../cleanflight/src/main/flight/servos.c **** 
  53:../cleanflight/src/main/flight/servos.c **** #include "io/gimbal.h"
  54:../cleanflight/src/main/flight/servos.c **** 
  55:../cleanflight/src/main/flight/servos.c **** #include "rx/rx.h"
  56:../cleanflight/src/main/flight/servos.c **** 
  57:../cleanflight/src/main/flight/servos.c **** 
  58:../cleanflight/src/main/flight/servos.c **** extern mixerMode_e currentMixerMode;
  59:../cleanflight/src/main/flight/servos.c **** 
  60:../cleanflight/src/main/flight/servos.c **** PG_REGISTER_WITH_RESET_FN(servoConfig_t, servoConfig, PG_SERVO_CONFIG, 0);
  61:../cleanflight/src/main/flight/servos.c **** 
  62:../cleanflight/src/main/flight/servos.c **** void pgResetFn_servoConfig(servoConfig_t *servoConfig)
  63:../cleanflight/src/main/flight/servos.c **** {
 375              	 .loc 5 63 0
 376              	 .cfi_startproc
 377              	 
 378              	 
 379 0000 80B5     	 push {r7,lr}
 380              	.LCFI36:
 381              	 .cfi_def_cfa_offset 8
 382              	 .cfi_offset 7,-8
 383              	 .cfi_offset 14,-4
 384 0002 84B0     	 sub sp,sp,#16
 385              	.LCFI37:
 386              	 .cfi_def_cfa_offset 24
 387 0004 00AF     	 add r7,sp,#0
 388              	.LCFI38:
 389              	 .cfi_def_cfa_register 7
 390 0006 7860     	 str r0,[r7,#4]
  64:../cleanflight/src/main/flight/servos.c ****     servoConfig->dev.servoCenterPulse = 1500;
 391              	 .loc 5 64 0
 392 0008 7B68     	 ldr r3,[r7,#4]
 393 000a 0022     	 movs r2,#0
 394 000c 62F02302 	 orn r2,r2,#35
 395 0010 1A70     	 strb r2,[r3]
 396 0012 0022     	 movs r2,#0
 397 0014 42F00502 	 orr r2,r2,#5
 398 0018 5A70     	 strb r2,[r3,#1]
  65:../cleanflight/src/main/flight/servos.c ****     servoConfig->dev.servoPwmRate = 50;
 399              	 .loc 5 65 0
 400 001a 7B68     	 ldr r3,[r7,#4]
 401 001c 0022     	 movs r2,#0
 402 001e 42F03202 	 orr r2,r2,#50
 403 0022 9A70     	 strb r2,[r3,#2]
 404 0024 0022     	 movs r2,#0
 405 0026 DA70     	 strb r2,[r3,#3]
  66:../cleanflight/src/main/flight/servos.c ****     servoConfig->tri_unarmed_servo = 1;
 406              	 .loc 5 66 0
 407 0028 7B68     	 ldr r3,[r7,#4]
 408 002a 0122     	 movs r2,#1
 409 002c 9A73     	 strb r2,[r3,#14]
  67:../cleanflight/src/main/flight/servos.c ****     servoConfig->servo_lowpass_freq = 0;
 410              	 .loc 5 67 0
 411 002e 7B68     	 ldr r3,[r7,#4]
 412 0030 0022     	 movs r2,#0
 413 0032 1A73     	 strb r2,[r3,#12]
 414 0034 0022     	 movs r2,#0
 415 0036 5A73     	 strb r2,[r3,#13]
  68:../cleanflight/src/main/flight/servos.c ****     servoConfig->channelForwardingStartChannel = AUX1;
 416              	 .loc 5 68 0
 417 0038 7B68     	 ldr r3,[r7,#4]
 418 003a 0422     	 movs r2,#4
 419 003c DA73     	 strb r2,[r3,#15]
 420              	.LBB2:
  69:../cleanflight/src/main/flight/servos.c **** 
  70:../cleanflight/src/main/flight/servos.c ****     for (unsigned servoIndex = 0; servoIndex < MAX_SUPPORTED_SERVOS; servoIndex++) {
 421              	 .loc 5 70 0
 422 003e 0023     	 movs r3,#0
 423 0040 FB60     	 str r3,[r7,#12]
 424 0042 0FE0     	 b .L30
 425              	.L31:
  71:../cleanflight/src/main/flight/servos.c ****         servoConfig->dev.ioTags[servoIndex] = timerioTagGetByUsage(TIM_USE_SERVO, servoIndex);
 426              	 .loc 5 71 0 discriminator 3
 427 0044 FB68     	 ldr r3,[r7,#12]
 428 0046 DBB2     	 uxtb r3,r3
 429 0048 0820     	 movs r0,#8
 430 004a 1946     	 mov r1,r3
 431 004c FFF7FEFF 	 bl timerioTagGetByUsage
 432 0050 0346     	 mov r3,r0
 433 0052 1946     	 mov r1,r3
 434 0054 7A68     	 ldr r2,[r7,#4]
 435 0056 FB68     	 ldr r3,[r7,#12]
 436 0058 1344     	 add r3,r3,r2
 437 005a 0A46     	 mov r2,r1
 438 005c 1A71     	 strb r2,[r3,#4]
  70:../cleanflight/src/main/flight/servos.c ****         servoConfig->dev.ioTags[servoIndex] = timerioTagGetByUsage(TIM_USE_SERVO, servoIndex);
 439              	 .loc 5 70 0 discriminator 3
 440 005e FB68     	 ldr r3,[r7,#12]
 441 0060 0133     	 adds r3,r3,#1
 442 0062 FB60     	 str r3,[r7,#12]
 443              	.L30:
  70:../cleanflight/src/main/flight/servos.c ****         servoConfig->dev.ioTags[servoIndex] = timerioTagGetByUsage(TIM_USE_SERVO, servoIndex);
 444              	 .loc 5 70 0 is_stmt 0 discriminator 1
 445 0064 FB68     	 ldr r3,[r7,#12]
 446 0066 072B     	 cmp r3,#7
 447 0068 ECD9     	 bls .L31
 448              	.LBE2:
  72:../cleanflight/src/main/flight/servos.c ****     }
  73:../cleanflight/src/main/flight/servos.c **** }
 449              	 .loc 5 73 0 is_stmt 1
 450 006a 1037     	 adds r7,r7,#16
 451              	.LCFI39:
 452              	 .cfi_def_cfa_offset 8
 453 006c BD46     	 mov sp,r7
 454              	.LCFI40:
 455              	 .cfi_def_cfa_register 13
 456              	 
 457 006e 80BD     	 pop {r7,pc}
 458              	 .cfi_endproc
 459              	.LFE576:
 461              	 .comm customServoMixers_SystemArray,112,4
 462              	 .comm customServoMixers_CopyArray,112,4
 463              	 .global customServoMixers_Registry
 464              	 .section .pg_registry
 465              	 .align 2
 468              	customServoMixers_Registry:
 469 0014 1500     	 .short 21
 470 0016 7000     	 .short 112
 471 0018 00000000 	 .word customServoMixers_SystemArray
 472 001c 00000000 	 .word customServoMixers_CopyArray
 473 0020 00000000 	 .word 0
 474 0024 00000000 	 .word 0
 475              	 .comm servoParams_SystemArray,96,4
 476              	 .comm servoParams_CopyArray,96,4
 477              	 .global servoParams_Registry
 478              	 .align 2
 481              	servoParams_Registry:
 482 0028 2A00     	 .short 42
 483 002a 6000     	 .short 96
 484 002c 00000000 	 .word servoParams_SystemArray
 485 0030 00000000 	 .word servoParams_CopyArray
 486 0034 00000000 	 .word 0
 487 0038 00000000 	 .word pgResetFn_servoParams
 488              	 .section .text.pgResetFn_servoParams,"ax",%progbits
 489              	 .align 2
 490              	 .global pgResetFn_servoParams
 491              	 .thumb
 492              	 .thumb_func
 494              	pgResetFn_servoParams:
 495              	.LFB577:
  74:../cleanflight/src/main/flight/servos.c **** 
  75:../cleanflight/src/main/flight/servos.c **** PG_REGISTER_ARRAY(servoMixer_t, MAX_SERVO_RULES, customServoMixers, PG_SERVO_MIXER, 0);
  76:../cleanflight/src/main/flight/servos.c **** 
  77:../cleanflight/src/main/flight/servos.c **** PG_REGISTER_ARRAY_WITH_RESET_FN(servoParam_t, MAX_SUPPORTED_SERVOS, servoParams, PG_SERVO_PARAMS, 0
  78:../cleanflight/src/main/flight/servos.c **** 
  79:../cleanflight/src/main/flight/servos.c **** void pgResetFn_servoParams(servoParam_t *instance)
  80:../cleanflight/src/main/flight/servos.c **** {
 496              	 .loc 5 80 0
 497              	 .cfi_startproc
 498              	 
 499              	 
 500              	 
 501 0000 90B4     	 push {r4,r7}
 502              	.LCFI41:
 503              	 .cfi_def_cfa_offset 8
 504              	 .cfi_offset 4,-8
 505              	 .cfi_offset 7,-4
 506 0002 84B0     	 sub sp,sp,#16
 507              	.LCFI42:
 508              	 .cfi_def_cfa_offset 24
 509 0004 00AF     	 add r7,sp,#0
 510              	.LCFI43:
 511              	 .cfi_def_cfa_register 7
 512 0006 7860     	 str r0,[r7,#4]
 513              	.LBB3:
  81:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 514              	 .loc 5 81 0
 515 0008 0023     	 movs r3,#0
 516 000a FB60     	 str r3,[r7,#12]
 517 000c 11E0     	 b .L33
 518              	.L34:
 519              	.LBB4:
  82:../cleanflight/src/main/flight/servos.c ****         RESET_CONFIG(servoParam_t, &instance[i],
 520              	 .loc 5 82 0 discriminator 3
 521 000e FA68     	 ldr r2,[r7,#12]
 522 0010 1346     	 mov r3,r2
 523 0012 5B00     	 lsls r3,r3,#1
 524 0014 1344     	 add r3,r3,r2
 525 0016 9B00     	 lsls r3,r3,#2
 526 0018 1A46     	 mov r2,r3
 527 001a 7B68     	 ldr r3,[r7,#4]
 528 001c 1344     	 add r3,r3,r2
 529 001e 084A     	 ldr r2,.L35
 530 0020 1C46     	 mov r4,r3
 531 0022 1346     	 mov r3,r2
 532 0024 07CB     	 ldmia r3!,{r0,r1,r2}
 533 0026 2060     	 str r0,[r4]
 534 0028 6160     	 str r1,[r4,#4]
 535 002a A260     	 str r2,[r4,#8]
 536              	.LBE4:
  81:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 537              	 .loc 5 81 0 discriminator 3
 538 002c FB68     	 ldr r3,[r7,#12]
 539 002e 0133     	 adds r3,r3,#1
 540 0030 FB60     	 str r3,[r7,#12]
 541              	.L33:
  81:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 542              	 .loc 5 81 0 is_stmt 0 discriminator 1
 543 0032 FB68     	 ldr r3,[r7,#12]
 544 0034 072B     	 cmp r3,#7
 545 0036 EADD     	 ble .L34
 546              	.LBE3:
  83:../cleanflight/src/main/flight/servos.c ****             .min = DEFAULT_SERVO_MIN,
  84:../cleanflight/src/main/flight/servos.c ****             .max = DEFAULT_SERVO_MAX,
  85:../cleanflight/src/main/flight/servos.c ****             .middle = DEFAULT_SERVO_MIDDLE,
  86:../cleanflight/src/main/flight/servos.c ****             .rate = 100,
  87:../cleanflight/src/main/flight/servos.c ****             .forwardFromChannel = CHANNEL_FORWARDING_DISABLED
  88:../cleanflight/src/main/flight/servos.c ****         );
  89:../cleanflight/src/main/flight/servos.c ****     }
  90:../cleanflight/src/main/flight/servos.c **** }
 547              	 .loc 5 90 0 is_stmt 1
 548 0038 1037     	 adds r7,r7,#16
 549              	.LCFI44:
 550              	 .cfi_def_cfa_offset 8
 551 003a BD46     	 mov sp,r7
 552              	.LCFI45:
 553              	 .cfi_def_cfa_register 13
 554              	 
 555 003c 90BC     	 pop {r4,r7}
 556              	.LCFI46:
 557              	 .cfi_restore 7
 558              	 .cfi_restore 4
 559              	 .cfi_def_cfa_offset 0
 560 003e 7047     	 bx lr
 561              	.L36:
 562              	 .align 2
 563              	.L35:
 564 0040 00000000 	 .word _reset_template_88.13699
 565              	 .cfi_endproc
 566              	.LFE577:
 568              	 .comm gimbalConfig_System,1,4
 569              	 .comm gimbalConfig_Copy,1,4
 570              	 .global gimbalConfig_Registry
 571              	 .section .pg_registry
 572              	 .align 2
 575              	gimbalConfig_Registry:
 576 003c 0300     	 .short 3
 577 003e 0100     	 .short 1
 578 0040 00000000 	 .word gimbalConfig_System
 579 0044 00000000 	 .word gimbalConfig_Copy
 580 0048 00000000 	 .word 0
 581 004c 00000000 	 .word 0
 582              	 .comm servo,16,4
 583              	 .section .bss.servoRuleCount,"aw",%nobits
 586              	servoRuleCount:
 587 0000 00       	 .space 1
 588              	 .section .bss.currentServoMixer,"aw",%nobits
 589              	 .align 2
 592              	currentServoMixer:
 593 0000 00000000 	 .space 112
 593      00000000 
 593      00000000 
 593      00000000 
 593      00000000 
 594              	 .section .bss.useServo,"aw",%nobits
 595              	 .align 2
 598              	useServo:
 599 0000 00000000 	 .space 4
 600              	 .section .rodata.servoMixerAirplane,"a",%progbits
 601              	 .align 2
 604              	servoMixerAirplane:
 605 0000 03       	 .byte 3
 606 0001 00       	 .byte 0
 607 0002 64       	 .byte 100
 608 0003 00       	 .byte 0
 609 0004 00       	 .byte 0
 610 0005 64       	 .byte 100
 611 0006 00       	 .byte 0
 612 0007 04       	 .byte 4
 613 0008 00       	 .byte 0
 614 0009 64       	 .byte 100
 615 000a 00       	 .byte 0
 616 000b 00       	 .byte 0
 617 000c 64       	 .byte 100
 618 000d 00       	 .byte 0
 619 000e 05       	 .byte 5
 620 000f 02       	 .byte 2
 621 0010 64       	 .byte 100
 622 0011 00       	 .byte 0
 623 0012 00       	 .byte 0
 624 0013 64       	 .byte 100
 625 0014 00       	 .byte 0
 626 0015 06       	 .byte 6
 627 0016 01       	 .byte 1
 628 0017 64       	 .byte 100
 629 0018 00       	 .byte 0
 630 0019 00       	 .byte 0
 631 001a 64       	 .byte 100
 632 001b 00       	 .byte 0
 633 001c 07       	 .byte 7
 634 001d 03       	 .byte 3
 635 001e 64       	 .byte 100
 636 001f 00       	 .byte 0
 637 0020 00       	 .byte 0
 638 0021 64       	 .byte 100
 639 0022 00       	 .byte 0
 640 0023 00       	 .section .rodata.servoMixerFlyingWing,"a",%progbits
 641              	 .align 2
 644              	servoMixerFlyingWing:
 645 0000 03       	 .byte 3
 646 0001 00       	 .byte 0
 647 0002 64       	 .byte 100
 648 0003 00       	 .byte 0
 649 0004 00       	 .byte 0
 650 0005 64       	 .byte 100
 651 0006 00       	 .byte 0
 652 0007 03       	 .byte 3
 653 0008 01       	 .byte 1
 654 0009 64       	 .byte 100
 655 000a 00       	 .byte 0
 656 000b 00       	 .byte 0
 657 000c 64       	 .byte 100
 658 000d 00       	 .byte 0
 659 000e 04       	 .byte 4
 660 000f 00       	 .byte 0
 661 0010 9C       	 .byte -100
 662 0011 00       	 .byte 0
 663 0012 00       	 .byte 0
 664 0013 64       	 .byte 100
 665 0014 00       	 .byte 0
 666 0015 04       	 .byte 4
 667 0016 01       	 .byte 1
 668 0017 64       	 .byte 100
 669 0018 00       	 .byte 0
 670 0019 00       	 .byte 0
 671 001a 64       	 .byte 100
 672 001b 00       	 .byte 0
 673 001c 07       	 .byte 7
 674 001d 03       	 .byte 3
 675 001e 64       	 .byte 100
 676 001f 00       	 .byte 0
 677 0020 00       	 .byte 0
 678 0021 64       	 .byte 100
 679 0022 00       	 .byte 0
 680 0023 00       	 .section .rodata.servoMixerTri,"a",%progbits
 681              	 .align 2
 684              	servoMixerTri:
 685 0000 05       	 .byte 5
 686 0001 02       	 .byte 2
 687 0002 64       	 .byte 100
 688 0003 00       	 .byte 0
 689 0004 00       	 .byte 0
 690 0005 64       	 .byte 100
 691 0006 00       	 .byte 0
 692 0007 00       	 .section .rodata.servoMixerBI,"a",%progbits
 693              	 .align 2
 696              	servoMixerBI:
 697 0000 04       	 .byte 4
 698 0001 02       	 .byte 2
 699 0002 64       	 .byte 100
 700 0003 00       	 .byte 0
 701 0004 00       	 .byte 0
 702 0005 64       	 .byte 100
 703 0006 00       	 .byte 0
 704 0007 04       	 .byte 4
 705 0008 01       	 .byte 1
 706 0009 9C       	 .byte -100
 707 000a 00       	 .byte 0
 708 000b 00       	 .byte 0
 709 000c 64       	 .byte 100
 710 000d 00       	 .byte 0
 711 000e 05       	 .byte 5
 712 000f 02       	 .byte 2
 713 0010 64       	 .byte 100
 714 0011 00       	 .byte 0
 715 0012 00       	 .byte 0
 716 0013 64       	 .byte 100
 717 0014 00       	 .byte 0
 718 0015 05       	 .byte 5
 719 0016 01       	 .byte 1
 720 0017 64       	 .byte 100
 721 0018 00       	 .byte 0
 722 0019 00       	 .byte 0
 723 001a 64       	 .byte 100
 724 001b 00       	 .byte 0
 725              	 .section .rodata.servoMixerDual,"a",%progbits
 726              	 .align 2
 729              	servoMixerDual:
 730 0000 04       	 .byte 4
 731 0001 01       	 .byte 1
 732 0002 64       	 .byte 100
 733 0003 00       	 .byte 0
 734 0004 00       	 .byte 0
 735 0005 64       	 .byte 100
 736 0006 00       	 .byte 0
 737 0007 05       	 .byte 5
 738 0008 00       	 .byte 0
 739 0009 64       	 .byte 100
 740 000a 00       	 .byte 0
 741 000b 00       	 .byte 0
 742 000c 64       	 .byte 100
 743 000d 00       	 .byte 0
 744 000e 0000     	 .section .rodata.servoMixerSingle,"a",%progbits
 745              	 .align 2
 748              	servoMixerSingle:
 749 0000 03       	 .byte 3
 750 0001 02       	 .byte 2
 751 0002 64       	 .byte 100
 752 0003 00       	 .byte 0
 753 0004 00       	 .byte 0
 754 0005 64       	 .byte 100
 755 0006 00       	 .byte 0
 756 0007 03       	 .byte 3
 757 0008 01       	 .byte 1
 758 0009 64       	 .byte 100
 759 000a 00       	 .byte 0
 760 000b 00       	 .byte 0
 761 000c 64       	 .byte 100
 762 000d 00       	 .byte 0
 763 000e 04       	 .byte 4
 764 000f 02       	 .byte 2
 765 0010 64       	 .byte 100
 766 0011 00       	 .byte 0
 767 0012 00       	 .byte 0
 768 0013 64       	 .byte 100
 769 0014 00       	 .byte 0
 770 0015 04       	 .byte 4
 771 0016 01       	 .byte 1
 772 0017 64       	 .byte 100
 773 0018 00       	 .byte 0
 774 0019 00       	 .byte 0
 775 001a 64       	 .byte 100
 776 001b 00       	 .byte 0
 777 001c 05       	 .byte 5
 778 001d 02       	 .byte 2
 779 001e 64       	 .byte 100
 780 001f 00       	 .byte 0
 781 0020 00       	 .byte 0
 782 0021 64       	 .byte 100
 783 0022 00       	 .byte 0
 784 0023 05       	 .byte 5
 785 0024 00       	 .byte 0
 786 0025 64       	 .byte 100
 787 0026 00       	 .byte 0
 788 0027 00       	 .byte 0
 789 0028 64       	 .byte 100
 790 0029 00       	 .byte 0
 791 002a 06       	 .byte 6
 792 002b 02       	 .byte 2
 793 002c 64       	 .byte 100
 794 002d 00       	 .byte 0
 795 002e 00       	 .byte 0
 796 002f 64       	 .byte 100
 797 0030 00       	 .byte 0
 798 0031 06       	 .byte 6
 799 0032 00       	 .byte 0
 800 0033 64       	 .byte 100
 801 0034 00       	 .byte 0
 802 0035 00       	 .byte 0
 803 0036 64       	 .byte 100
 804 0037 00       	 .byte 0
 805              	 .section .rodata.servoMixerHeli,"a",%progbits
 806              	 .align 2
 809              	servoMixerHeli:
 810 0000 00       	 .byte 0
 811 0001 01       	 .byte 1
 812 0002 CE       	 .byte -50
 813 0003 00       	 .byte 0
 814 0004 00       	 .byte 0
 815 0005 64       	 .byte 100
 816 0006 00       	 .byte 0
 817 0007 00       	 .byte 0
 818 0008 00       	 .byte 0
 819 0009 A9       	 .byte -87
 820 000a 00       	 .byte 0
 821 000b 00       	 .byte 0
 822 000c 64       	 .byte 100
 823 000d 00       	 .byte 0
 824 000e 00       	 .byte 0
 825 000f 08       	 .byte 8
 826 0010 64       	 .byte 100
 827 0011 00       	 .byte 0
 828 0012 00       	 .byte 0
 829 0013 64       	 .byte 100
 830 0014 00       	 .byte 0
 831 0015 01       	 .byte 1
 832 0016 01       	 .byte 1
 833 0017 CE       	 .byte -50
 834 0018 00       	 .byte 0
 835 0019 00       	 .byte 0
 836 001a 64       	 .byte 100
 837 001b 00       	 .byte 0
 838 001c 01       	 .byte 1
 839 001d 00       	 .byte 0
 840 001e 57       	 .byte 87
 841 001f 00       	 .byte 0
 842 0020 00       	 .byte 0
 843 0021 64       	 .byte 100
 844 0022 00       	 .byte 0
 845 0023 01       	 .byte 1
 846 0024 08       	 .byte 8
 847 0025 64       	 .byte 100
 848 0026 00       	 .byte 0
 849 0027 00       	 .byte 0
 850 0028 64       	 .byte 100
 851 0029 00       	 .byte 0
 852 002a 02       	 .byte 2
 853 002b 01       	 .byte 1
 854 002c 64       	 .byte 100
 855 002d 00       	 .byte 0
 856 002e 00       	 .byte 0
 857 002f 64       	 .byte 100
 858 0030 00       	 .byte 0
 859 0031 02       	 .byte 2
 860 0032 08       	 .byte 8
 861 0033 64       	 .byte 100
 862 0034 00       	 .byte 0
 863 0035 00       	 .byte 0
 864 0036 64       	 .byte 100
 865 0037 00       	 .byte 0
 866 0038 03       	 .byte 3
 867 0039 02       	 .byte 2
 868 003a 64       	 .byte 100
 869 003b 00       	 .byte 0
 870 003c 00       	 .byte 0
 871 003d 64       	 .byte 100
 872 003e 00       	 .byte 0
 873 003f 00       	 .section .rodata.servoMixerGimbal,"a",%progbits
 874              	 .align 2
 877              	servoMixerGimbal:
 878 0000 00       	 .byte 0
 879 0001 0C       	 .byte 12
 880 0002 7D       	 .byte 125
 881 0003 00       	 .byte 0
 882 0004 00       	 .byte 0
 883 0005 64       	 .byte 100
 884 0006 00       	 .byte 0
 885 0007 01       	 .byte 1
 886 0008 0D       	 .byte 13
 887 0009 7D       	 .byte 125
 888 000a 00       	 .byte 0
 889 000b 00       	 .byte 0
 890 000c 64       	 .byte 100
 891 000d 00       	 .byte 0
 892              	 .global servoMixers
 893 000e 0000     	 .section .rodata.servoMixers,"a",%progbits
 894              	 .align 2
 897              	servoMixers:
 898 0000 00       	 .byte 0
 899 0001 00000000 	 .4byte 0
 900 0005 01       	 .byte 1
 901 0006 00000000 	 .4byte servoMixerTri
 902 000a 00       	 .byte 0
 903 000b 00000000 	 .4byte 0
 904 000f 00       	 .byte 0
 905 0010 00000000 	 .4byte 0
 906 0014 04       	 .byte 4
 907 0015 00000000 	 .4byte servoMixerBI
 908 0019 02       	 .byte 2
 909 001a 00000000 	 .4byte servoMixerGimbal
 910 001e 00       	 .byte 0
 911 001f 00000000 	 .4byte 0
 912 0023 00       	 .byte 0
 913 0024 00000000 	 .4byte 0
 914 0028 05       	 .byte 5
 915 0029 00000000 	 .4byte servoMixerFlyingWing
 916 002d 00       	 .byte 0
 917 002e 00000000 	 .4byte 0
 918 0032 00       	 .byte 0
 919 0033 00000000 	 .4byte 0
 920 0037 00       	 .byte 0
 921 0038 00000000 	 .4byte 0
 922 003c 00       	 .byte 0
 923 003d 00000000 	 .4byte 0
 924 0041 00       	 .byte 0
 925 0042 00000000 	 .4byte 0
 926 0046 05       	 .byte 5
 927 0047 00000000 	 .4byte servoMixerAirplane
 928 004b 09       	 .byte 9
 929 004c 00000000 	 .4byte servoMixerHeli
 930 0050 00       	 .byte 0
 931 0051 00000000 	 .4byte 0
 932 0055 00       	 .byte 0
 933 0056 00000000 	 .4byte 0
 934 005a 00       	 .byte 0
 935 005b 00000000 	 .4byte 0
 936 005f 00       	 .byte 0
 937 0060 00000000 	 .4byte 0
 938 0064 02       	 .byte 2
 939 0065 00000000 	 .4byte servoMixerDual
 940 0069 08       	 .byte 8
 941 006a 00000000 	 .4byte servoMixerSingle
 942 006e 00       	 .byte 0
 943 006f 00000000 	 .4byte 0
 944 0073 00       	 .byte 0
 945 0074 00000000 	 .4byte 0
 946 0078 00       	 .byte 0
 947 0079 00000000 	 .4byte 0
 948 007d 00       	 .byte 0
 949 007e 00000000 	 .4byte 0
 950 0082 00       	 .byte 0
 951 0083 00000000 	 .4byte 0
 952 0087 00       	 .section .text.determineServoMiddleOrForwardFromChannel,"ax",%progbits
 953              	 .align 2
 954              	 .global determineServoMiddleOrForwardFromChannel
 955              	 .thumb
 956              	 .thumb_func
 958              	determineServoMiddleOrForwardFromChannel:
 959              	.LFB578:
  91:../cleanflight/src/main/flight/servos.c **** 
  92:../cleanflight/src/main/flight/servos.c **** // no template required since default is zero
  93:../cleanflight/src/main/flight/servos.c **** PG_REGISTER(gimbalConfig_t, gimbalConfig, PG_GIMBAL_CONFIG, 0);
  94:../cleanflight/src/main/flight/servos.c **** 
  95:../cleanflight/src/main/flight/servos.c **** int16_t servo[MAX_SUPPORTED_SERVOS];
  96:../cleanflight/src/main/flight/servos.c **** 
  97:../cleanflight/src/main/flight/servos.c **** static uint8_t servoRuleCount = 0;
  98:../cleanflight/src/main/flight/servos.c **** static servoMixer_t currentServoMixer[MAX_SERVO_RULES];
  99:../cleanflight/src/main/flight/servos.c **** static int useServo;
 100:../cleanflight/src/main/flight/servos.c **** 
 101:../cleanflight/src/main/flight/servos.c **** 
 102:../cleanflight/src/main/flight/servos.c **** #define COUNT_SERVO_RULES(rules) (sizeof(rules) / sizeof(servoMixer_t))
 103:../cleanflight/src/main/flight/servos.c **** // mixer rule format servo, input, rate, speed, min, max, box
 104:../cleanflight/src/main/flight/servos.c **** static const servoMixer_t servoMixerAirplane[] = {
 105:../cleanflight/src/main/flight/servos.c ****     { SERVO_FLAPPERON_1, INPUT_STABILIZED_ROLL,  100, 0, 0, 100, 0 },
 106:../cleanflight/src/main/flight/servos.c ****     { SERVO_FLAPPERON_2, INPUT_STABILIZED_ROLL,  100, 0, 0, 100, 0 },
 107:../cleanflight/src/main/flight/servos.c ****     { SERVO_RUDDER,      INPUT_STABILIZED_YAW,   100, 0, 0, 100, 0 },
 108:../cleanflight/src/main/flight/servos.c ****     { SERVO_ELEVATOR,    INPUT_STABILIZED_PITCH, 100, 0, 0, 100, 0 },
 109:../cleanflight/src/main/flight/servos.c ****     { SERVO_THROTTLE,    INPUT_STABILIZED_THROTTLE, 100, 0, 0, 100, 0 },
 110:../cleanflight/src/main/flight/servos.c **** };
 111:../cleanflight/src/main/flight/servos.c **** 
 112:../cleanflight/src/main/flight/servos.c **** static const servoMixer_t servoMixerFlyingWing[] = {
 113:../cleanflight/src/main/flight/servos.c ****     { SERVO_FLAPPERON_1, INPUT_STABILIZED_ROLL,  100, 0, 0, 100, 0 },
 114:../cleanflight/src/main/flight/servos.c ****     { SERVO_FLAPPERON_1, INPUT_STABILIZED_PITCH, 100, 0, 0, 100, 0 },
 115:../cleanflight/src/main/flight/servos.c ****     { SERVO_FLAPPERON_2, INPUT_STABILIZED_ROLL, -100, 0, 0, 100, 0 },
 116:../cleanflight/src/main/flight/servos.c ****     { SERVO_FLAPPERON_2, INPUT_STABILIZED_PITCH, 100, 0, 0, 100, 0 },
 117:../cleanflight/src/main/flight/servos.c ****     { SERVO_THROTTLE,    INPUT_STABILIZED_THROTTLE, 100, 0, 0, 100, 0 },
 118:../cleanflight/src/main/flight/servos.c **** };
 119:../cleanflight/src/main/flight/servos.c **** 
 120:../cleanflight/src/main/flight/servos.c **** static const servoMixer_t servoMixerTri[] = {
 121:../cleanflight/src/main/flight/servos.c ****     { SERVO_RUDDER, INPUT_STABILIZED_YAW,   100, 0, 0, 100, 0 },
 122:../cleanflight/src/main/flight/servos.c **** };
 123:../cleanflight/src/main/flight/servos.c **** 
 124:../cleanflight/src/main/flight/servos.c **** #if defined(USE_UNCOMMON_MIXERS)
 125:../cleanflight/src/main/flight/servos.c **** static const servoMixer_t servoMixerBI[] = {
 126:../cleanflight/src/main/flight/servos.c ****     { SERVO_BICOPTER_LEFT, INPUT_STABILIZED_YAW,   100, 0, 0, 100, 0 },
 127:../cleanflight/src/main/flight/servos.c ****     { SERVO_BICOPTER_LEFT, INPUT_STABILIZED_PITCH, -100, 0, 0, 100, 0 },
 128:../cleanflight/src/main/flight/servos.c ****     { SERVO_BICOPTER_RIGHT, INPUT_STABILIZED_YAW,   100, 0, 0, 100, 0 },
 129:../cleanflight/src/main/flight/servos.c ****     { SERVO_BICOPTER_RIGHT, INPUT_STABILIZED_PITCH, 100, 0, 0, 100, 0 },
 130:../cleanflight/src/main/flight/servos.c **** };
 131:../cleanflight/src/main/flight/servos.c **** 
 132:../cleanflight/src/main/flight/servos.c **** static const servoMixer_t servoMixerDual[] = {
 133:../cleanflight/src/main/flight/servos.c ****     { SERVO_DUALCOPTER_LEFT, INPUT_STABILIZED_PITCH, 100, 0, 0, 100, 0 },
 134:../cleanflight/src/main/flight/servos.c ****     { SERVO_DUALCOPTER_RIGHT, INPUT_STABILIZED_ROLL,  100, 0, 0, 100, 0 },
 135:../cleanflight/src/main/flight/servos.c **** };
 136:../cleanflight/src/main/flight/servos.c **** 
 137:../cleanflight/src/main/flight/servos.c **** static const servoMixer_t servoMixerSingle[] = {
 138:../cleanflight/src/main/flight/servos.c ****     { SERVO_SINGLECOPTER_1, INPUT_STABILIZED_YAW,   100, 0, 0, 100, 0 },
 139:../cleanflight/src/main/flight/servos.c ****     { SERVO_SINGLECOPTER_1, INPUT_STABILIZED_PITCH, 100, 0, 0, 100, 0 },
 140:../cleanflight/src/main/flight/servos.c ****     { SERVO_SINGLECOPTER_2, INPUT_STABILIZED_YAW,   100, 0, 0, 100, 0 },
 141:../cleanflight/src/main/flight/servos.c ****     { SERVO_SINGLECOPTER_2, INPUT_STABILIZED_PITCH, 100, 0, 0, 100, 0 },
 142:../cleanflight/src/main/flight/servos.c ****     { SERVO_SINGLECOPTER_3, INPUT_STABILIZED_YAW,   100, 0, 0, 100, 0 },
 143:../cleanflight/src/main/flight/servos.c ****     { SERVO_SINGLECOPTER_3, INPUT_STABILIZED_ROLL,  100, 0, 0, 100, 0 },
 144:../cleanflight/src/main/flight/servos.c ****     { SERVO_SINGLECOPTER_4, INPUT_STABILIZED_YAW,   100, 0, 0, 100, 0 },
 145:../cleanflight/src/main/flight/servos.c ****     { SERVO_SINGLECOPTER_4, INPUT_STABILIZED_ROLL,  100, 0, 0, 100, 0 },
 146:../cleanflight/src/main/flight/servos.c **** };
 147:../cleanflight/src/main/flight/servos.c **** 
 148:../cleanflight/src/main/flight/servos.c **** static const servoMixer_t servoMixerHeli[] = {
 149:../cleanflight/src/main/flight/servos.c ****     { SERVO_HELI_LEFT, INPUT_STABILIZED_PITCH,   -50, 0, 0, 100, 0 },
 150:../cleanflight/src/main/flight/servos.c ****     { SERVO_HELI_LEFT, INPUT_STABILIZED_ROLL,    -87, 0, 0, 100, 0 },
 151:../cleanflight/src/main/flight/servos.c ****     { SERVO_HELI_LEFT, INPUT_RC_AUX1,    100, 0, 0, 100, 0 },
 152:../cleanflight/src/main/flight/servos.c ****     { SERVO_HELI_RIGHT, INPUT_STABILIZED_PITCH,  -50, 0, 0, 100, 0 },
 153:../cleanflight/src/main/flight/servos.c ****     { SERVO_HELI_RIGHT, INPUT_STABILIZED_ROLL,  87, 0, 0, 100, 0 },
 154:../cleanflight/src/main/flight/servos.c ****     { SERVO_HELI_RIGHT, INPUT_RC_AUX1,    100, 0, 0, 100, 0 },
 155:../cleanflight/src/main/flight/servos.c ****     { SERVO_HELI_TOP, INPUT_STABILIZED_PITCH,   100, 0, 0, 100, 0 },
 156:../cleanflight/src/main/flight/servos.c ****     { SERVO_HELI_TOP, INPUT_RC_AUX1,    100, 0, 0, 100, 0 },
 157:../cleanflight/src/main/flight/servos.c ****     { SERVO_HELI_RUD, INPUT_STABILIZED_YAW, 100, 0, 0, 100, 0 },
 158:../cleanflight/src/main/flight/servos.c **** };
 159:../cleanflight/src/main/flight/servos.c **** #else
 160:../cleanflight/src/main/flight/servos.c **** #define servoMixerBI NULL
 161:../cleanflight/src/main/flight/servos.c **** #define servoMixerDual NULL
 162:../cleanflight/src/main/flight/servos.c **** #define servoMixerSingle NULL
 163:../cleanflight/src/main/flight/servos.c **** #define servoMixerHeli NULL
 164:../cleanflight/src/main/flight/servos.c **** #endif // USE_UNCOMMON_MIXERS
 165:../cleanflight/src/main/flight/servos.c **** 
 166:../cleanflight/src/main/flight/servos.c **** static const servoMixer_t servoMixerGimbal[] = {
 167:../cleanflight/src/main/flight/servos.c ****     { SERVO_GIMBAL_PITCH, INPUT_GIMBAL_PITCH, 125, 0, 0, 100, 0 },
 168:../cleanflight/src/main/flight/servos.c ****     { SERVO_GIMBAL_ROLL, INPUT_GIMBAL_ROLL,  125, 0, 0, 100, 0 },
 169:../cleanflight/src/main/flight/servos.c **** };
 170:../cleanflight/src/main/flight/servos.c **** 
 171:../cleanflight/src/main/flight/servos.c **** const mixerRules_t servoMixers[] = {
 172:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // entry 0
 173:../cleanflight/src/main/flight/servos.c ****     { COUNT_SERVO_RULES(servoMixerTri), servoMixerTri },       // MULTITYPE_TRI
 174:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_QUADP
 175:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_QUADX
 176:../cleanflight/src/main/flight/servos.c ****     { COUNT_SERVO_RULES(servoMixerBI), servoMixerBI },        // MULTITYPE_BI
 177:../cleanflight/src/main/flight/servos.c ****     { COUNT_SERVO_RULES(servoMixerGimbal), servoMixerGimbal },    // * MULTITYPE_GIMBAL
 178:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_Y6
 179:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_HEX6
 180:../cleanflight/src/main/flight/servos.c ****     { COUNT_SERVO_RULES(servoMixerFlyingWing), servoMixerFlyingWing },// * MULTITYPE_FLYING_WING
 181:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_Y4
 182:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_HEX6X
 183:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_OCTOX8
 184:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_OCTOFLATP
 185:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_OCTOFLATX
 186:../cleanflight/src/main/flight/servos.c ****     { COUNT_SERVO_RULES(servoMixerAirplane), servoMixerAirplane },  // * MULTITYPE_AIRPLANE
 187:../cleanflight/src/main/flight/servos.c ****     { COUNT_SERVO_RULES(servoMixerHeli), servoMixerHeli },                // * MULTITYPE_HELI_120_C
 188:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // * MULTITYPE_HELI_90_DEG
 189:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_VTAIL4
 190:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_HEX6H
 191:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // * MULTITYPE_PPM_TO_SERVO
 192:../cleanflight/src/main/flight/servos.c ****     { COUNT_SERVO_RULES(servoMixerDual), servoMixerDual },      // MULTITYPE_DUALCOPTER
 193:../cleanflight/src/main/flight/servos.c ****     { COUNT_SERVO_RULES(servoMixerSingle), servoMixerSingle },    // MULTITYPE_SINGLECOPTER
 194:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_ATAIL4
 195:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_CUSTOM
 196:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_CUSTOM_PLANE
 197:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_CUSTOM_TRI
 198:../cleanflight/src/main/flight/servos.c ****     { 0, NULL },                // MULTITYPE_QUADX_1234
 199:../cleanflight/src/main/flight/servos.c **** };
 200:../cleanflight/src/main/flight/servos.c **** 
 201:../cleanflight/src/main/flight/servos.c **** int16_t determineServoMiddleOrForwardFromChannel(servoIndex_e servoIndex)
 202:../cleanflight/src/main/flight/servos.c **** {
 960              	 .loc 5 202 0
 961              	 .cfi_startproc
 962              	 
 963              	 
 964 0000 80B5     	 push {r7,lr}
 965              	.LCFI47:
 966              	 .cfi_def_cfa_offset 8
 967              	 .cfi_offset 7,-8
 968              	 .cfi_offset 14,-4
 969 0002 84B0     	 sub sp,sp,#16
 970              	.LCFI48:
 971              	 .cfi_def_cfa_offset 24
 972 0004 00AF     	 add r7,sp,#0
 973              	.LCFI49:
 974              	 .cfi_def_cfa_register 7
 975 0006 0346     	 mov r3,r0
 976 0008 FB71     	 strb r3,[r7,#7]
 203:../cleanflight/src/main/flight/servos.c ****     const uint8_t channelToForwardFrom = servoParams(servoIndex)->forwardFromChannel;
 977              	 .loc 5 203 0
 978 000a FB79     	 ldrb r3,[r7,#7]
 979 000c 1846     	 mov r0,r3
 980 000e FFF7FEFF 	 bl servoParams
 981 0012 0346     	 mov r3,r0
 982 0014 DB7A     	 ldrb r3,[r3,#11]
 983 0016 FB73     	 strb r3,[r7,#15]
 204:../cleanflight/src/main/flight/servos.c **** 
 205:../cleanflight/src/main/flight/servos.c ****     if (channelToForwardFrom != CHANNEL_FORWARDING_DISABLED && channelToForwardFrom < rxRuntimeConf
 984              	 .loc 5 205 0
 985 0018 FB7B     	 ldrb r3,[r7,#15]
 986 001a FF2B     	 cmp r3,#255
 987 001c 09D0     	 beq .L38
 988              	 .loc 5 205 0 is_stmt 0 discriminator 1
 989 001e 0B4B     	 ldr r3,.L40
 990 0020 1B78     	 ldrb r3,[r3]
 991 0022 FA7B     	 ldrb r2,[r7,#15]
 992 0024 9A42     	 cmp r2,r3
 993 0026 04D2     	 bcs .L38
 206:../cleanflight/src/main/flight/servos.c ****         return rcData[channelToForwardFrom];
 994              	 .loc 5 206 0 is_stmt 1
 995 0028 FB7B     	 ldrb r3,[r7,#15]
 996 002a 094A     	 ldr r2,.L40+4
 997 002c 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 998 0030 07E0     	 b .L39
 999              	.L38:
 207:../cleanflight/src/main/flight/servos.c ****     }
 208:../cleanflight/src/main/flight/servos.c **** 
 209:../cleanflight/src/main/flight/servos.c ****     return servoParams(servoIndex)->middle;
 1000              	 .loc 5 209 0
 1001 0032 FB79     	 ldrb r3,[r7,#7]
 1002 0034 1846     	 mov r0,r3
 1003 0036 FFF7FEFF 	 bl servoParams
 1004 003a 0346     	 mov r3,r0
 1005 003c B3F90830 	 ldrsh r3,[r3,#8]
 1006 0040 9BB2     	 uxth r3,r3
 1007              	.L39:
 1008 0042 1BB2     	 sxth r3,r3
 210:../cleanflight/src/main/flight/servos.c **** }
 1009              	 .loc 5 210 0
 1010 0044 1846     	 mov r0,r3
 1011 0046 1037     	 adds r7,r7,#16
 1012              	.LCFI50:
 1013              	 .cfi_def_cfa_offset 8
 1014 0048 BD46     	 mov sp,r7
 1015              	.LCFI51:
 1016              	 .cfi_def_cfa_register 13
 1017              	 
 1018 004a 80BD     	 pop {r7,pc}
 1019              	.L41:
 1020              	 .align 2
 1021              	.L40:
 1022 004c 00000000 	 .word rxRuntimeConfig
 1023 0050 00000000 	 .word rcData
 1024              	 .cfi_endproc
 1025              	.LFE578:
 1027              	 .section .text.servoDirection,"ax",%progbits
 1028              	 .align 2
 1029              	 .global servoDirection
 1030              	 .thumb
 1031              	 .thumb_func
 1033              	servoDirection:
 1034              	.LFB579:
 211:../cleanflight/src/main/flight/servos.c **** 
 212:../cleanflight/src/main/flight/servos.c **** int servoDirection(int servoIndex, int inputSource)
 213:../cleanflight/src/main/flight/servos.c **** {
 1035              	 .loc 5 213 0
 1036              	 .cfi_startproc
 1037              	 
 1038              	 
 1039 0000 80B5     	 push {r7,lr}
 1040              	.LCFI52:
 1041              	 .cfi_def_cfa_offset 8
 1042              	 .cfi_offset 7,-8
 1043              	 .cfi_offset 14,-4
 1044 0002 82B0     	 sub sp,sp,#8
 1045              	.LCFI53:
 1046              	 .cfi_def_cfa_offset 16
 1047 0004 00AF     	 add r7,sp,#0
 1048              	.LCFI54:
 1049              	 .cfi_def_cfa_register 7
 1050 0006 7860     	 str r0,[r7,#4]
 1051 0008 3960     	 str r1,[r7]
 214:../cleanflight/src/main/flight/servos.c ****     // determine the direction (reversed or not) from the direction bitfield of the servo
 215:../cleanflight/src/main/flight/servos.c ****     if (servoParams(servoIndex)->reversedSources & (1 << inputSource)) {
 1052              	 .loc 5 215 0
 1053 000a 7868     	 ldr r0,[r7,#4]
 1054 000c FFF7FEFF 	 bl servoParams
 1055 0010 0346     	 mov r3,r0
 1056 0012 1B68     	 ldr r3,[r3]
 1057 0014 0121     	 movs r1,#1
 1058 0016 3A68     	 ldr r2,[r7]
 1059 0018 01FA02F2 	 lsl r2,r1,r2
 1060 001c 1340     	 ands r3,r3,r2
 1061 001e 002B     	 cmp r3,#0
 1062 0020 02D0     	 beq .L43
 216:../cleanflight/src/main/flight/servos.c ****         return -1;
 1063              	 .loc 5 216 0
 1064 0022 4FF0FF33 	 mov r3,#-1
 1065 0026 00E0     	 b .L44
 1066              	.L43:
 217:../cleanflight/src/main/flight/servos.c ****     } else {
 218:../cleanflight/src/main/flight/servos.c ****         return 1;
 1067              	 .loc 5 218 0
 1068 0028 0123     	 movs r3,#1
 1069              	.L44:
 219:../cleanflight/src/main/flight/servos.c ****     }
 220:../cleanflight/src/main/flight/servos.c **** }
 1070              	 .loc 5 220 0
 1071 002a 1846     	 mov r0,r3
 1072 002c 0837     	 adds r7,r7,#8
 1073              	.LCFI55:
 1074              	 .cfi_def_cfa_offset 8
 1075 002e BD46     	 mov sp,r7
 1076              	.LCFI56:
 1077              	 .cfi_def_cfa_register 13
 1078              	 
 1079 0030 80BD     	 pop {r7,pc}
 1080              	 .cfi_endproc
 1081              	.LFE579:
 1083 0032 00BF     	 .section .text.servosInit,"ax",%progbits
 1084              	 .align 2
 1085              	 .global servosInit
 1086              	 .thumb
 1087              	 .thumb_func
 1089              	servosInit:
 1090              	.LFB580:
 221:../cleanflight/src/main/flight/servos.c **** 
 222:../cleanflight/src/main/flight/servos.c **** void servosInit(void)
 223:../cleanflight/src/main/flight/servos.c **** {
 1091              	 .loc 5 223 0
 1092              	 .cfi_startproc
 1093              	 
 1094              	 
 1095 0000 80B5     	 push {r7,lr}
 1096              	.LCFI57:
 1097              	 .cfi_def_cfa_offset 8
 1098              	 .cfi_offset 7,-8
 1099              	 .cfi_offset 14,-4
 1100 0002 82B0     	 sub sp,sp,#8
 1101              	.LCFI58:
 1102              	 .cfi_def_cfa_offset 16
 1103 0004 00AF     	 add r7,sp,#0
 1104              	.LCFI59:
 1105              	 .cfi_def_cfa_register 7
 224:../cleanflight/src/main/flight/servos.c ****     // enable servos for mixes that require them. note, this shifts motor counts.
 225:../cleanflight/src/main/flight/servos.c ****     useServo = mixers[currentMixerMode].useServo;
 1106              	 .loc 5 225 0
 1107 0006 1B4B     	 ldr r3,.L51
 1108 0008 1B78     	 ldrb r3,[r3]
 1109 000a 1946     	 mov r1,r3
 1110 000c 1A4A     	 ldr r2,.L51+4
 1111 000e 0B46     	 mov r3,r1
 1112 0010 5B00     	 lsls r3,r3,#1
 1113 0012 0B44     	 add r3,r3,r1
 1114 0014 5B00     	 lsls r3,r3,#1
 1115 0016 1344     	 add r3,r3,r2
 1116 0018 5B78     	 ldrb r3,[r3,#1]
 1117 001a 1A46     	 mov r2,r3
 1118 001c 174B     	 ldr r3,.L51+8
 1119 001e 1A60     	 str r2,[r3]
 226:../cleanflight/src/main/flight/servos.c ****     // if we want camstab/trig, that also enables servos, even if mixer doesn't
 227:../cleanflight/src/main/flight/servos.c ****     if (feature(FEATURE_SERVO_TILT) || feature(FEATURE_CHANNEL_FORWARDING)) {
 1120              	 .loc 5 227 0
 1121 0020 2020     	 movs r0,#32
 1122 0022 FFF7FEFF 	 bl feature
 1123 0026 0346     	 mov r3,r0
 1124 0028 002B     	 cmp r3,#0
 1125 002a 06D1     	 bne .L46
 1126              	 .loc 5 227 0 is_stmt 0 discriminator 1
 1127 002c 4FF48010 	 mov r0,#1048576
 1128 0030 FFF7FEFF 	 bl feature
 1129 0034 0346     	 mov r3,r0
 1130 0036 002B     	 cmp r3,#0
 1131 0038 02D0     	 beq .L47
 1132              	.L46:
 228:../cleanflight/src/main/flight/servos.c ****         useServo = 1;
 1133              	 .loc 5 228 0 is_stmt 1
 1134 003a 104B     	 ldr r3,.L51+8
 1135 003c 0122     	 movs r2,#1
 1136 003e 1A60     	 str r2,[r3]
 1137              	.L47:
 1138              	.LBB5:
 229:../cleanflight/src/main/flight/servos.c ****     }
 230:../cleanflight/src/main/flight/servos.c **** 
 231:../cleanflight/src/main/flight/servos.c ****     // give all servos a default command
 232:../cleanflight/src/main/flight/servos.c ****     for (uint8_t i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 1139              	 .loc 5 232 0
 1140 0040 0023     	 movs r3,#0
 1141 0042 FB71     	 strb r3,[r7,#7]
 1142 0044 08E0     	 b .L48
 1143              	.L49:
 233:../cleanflight/src/main/flight/servos.c ****         servo[i] = DEFAULT_SERVO_MIDDLE;
 1144              	 .loc 5 233 0 discriminator 3
 1145 0046 FB79     	 ldrb r3,[r7,#7]
 1146 0048 0D4A     	 ldr r2,.L51+12
 1147 004a 40F2DC51 	 movw r1,#1500
 1148 004e 22F81310 	 strh r1,[r2,r3,lsl#1]
 232:../cleanflight/src/main/flight/servos.c ****         servo[i] = DEFAULT_SERVO_MIDDLE;
 1149              	 .loc 5 232 0 discriminator 3
 1150 0052 FB79     	 ldrb r3,[r7,#7]
 1151 0054 0133     	 adds r3,r3,#1
 1152 0056 FB71     	 strb r3,[r7,#7]
 1153              	.L48:
 232:../cleanflight/src/main/flight/servos.c ****         servo[i] = DEFAULT_SERVO_MIDDLE;
 1154              	 .loc 5 232 0 is_stmt 0 discriminator 1
 1155 0058 FB79     	 ldrb r3,[r7,#7]
 1156 005a 072B     	 cmp r3,#7
 1157 005c F3D9     	 bls .L49
 1158              	.LBE5:
 234:../cleanflight/src/main/flight/servos.c ****     }
 235:../cleanflight/src/main/flight/servos.c **** 
 236:../cleanflight/src/main/flight/servos.c ****     if (mixerIsTricopter()) {
 1159              	 .loc 5 236 0 is_stmt 1
 1160 005e FFF7FEFF 	 bl mixerIsTricopter
 1161 0062 0346     	 mov r3,r0
 1162 0064 002B     	 cmp r3,#0
 1163 0066 01D0     	 beq .L45
 237:../cleanflight/src/main/flight/servos.c ****         servosTricopterInit();
 1164              	 .loc 5 237 0
 1165 0068 FFF7FEFF 	 bl servosTricopterInit
 1166              	.L45:
 238:../cleanflight/src/main/flight/servos.c ****     }
 239:../cleanflight/src/main/flight/servos.c **** }
 1167              	 .loc 5 239 0
 1168 006c 0837     	 adds r7,r7,#8
 1169              	.LCFI60:
 1170              	 .cfi_def_cfa_offset 8
 1171 006e BD46     	 mov sp,r7
 1172              	.LCFI61:
 1173              	 .cfi_def_cfa_register 13
 1174              	 
 1175 0070 80BD     	 pop {r7,pc}
 1176              	.L52:
 1177 0072 00BF     	 .align 2
 1178              	.L51:
 1179 0074 00000000 	 .word currentMixerMode
 1180 0078 00000000 	 .word mixers
 1181 007c 00000000 	 .word useServo
 1182 0080 00000000 	 .word servo
 1183              	 .cfi_endproc
 1184              	.LFE580:
 1186              	 .section .text.loadCustomServoMixer,"ax",%progbits
 1187              	 .align 2
 1188              	 .global loadCustomServoMixer
 1189              	 .thumb
 1190              	 .thumb_func
 1192              	loadCustomServoMixer:
 1193              	.LFB581:
 240:../cleanflight/src/main/flight/servos.c **** 
 241:../cleanflight/src/main/flight/servos.c **** void loadCustomServoMixer(void)
 242:../cleanflight/src/main/flight/servos.c **** {
 1194              	 .loc 5 242 0
 1195              	 .cfi_startproc
 1196              	 
 1197              	 
 1198 0000 80B5     	 push {r7,lr}
 1199              	.LCFI62:
 1200              	 .cfi_def_cfa_offset 8
 1201              	 .cfi_offset 7,-8
 1202              	 .cfi_offset 14,-4
 1203 0002 82B0     	 sub sp,sp,#8
 1204              	.LCFI63:
 1205              	 .cfi_def_cfa_offset 16
 1206 0004 00AF     	 add r7,sp,#0
 1207              	.LCFI64:
 1208              	 .cfi_def_cfa_register 7
 243:../cleanflight/src/main/flight/servos.c ****     // reset settings
 244:../cleanflight/src/main/flight/servos.c ****     servoRuleCount = 0;
 1209              	 .loc 5 244 0
 1210 0006 194B     	 ldr r3,.L58
 1211 0008 0022     	 movs r2,#0
 1212 000a 1A70     	 strb r2,[r3]
 245:../cleanflight/src/main/flight/servos.c ****     memset(currentServoMixer, 0, sizeof(currentServoMixer));
 1213              	 .loc 5 245 0
 1214 000c 1848     	 ldr r0,.L58+4
 1215 000e 0021     	 movs r1,#0
 1216 0010 7022     	 movs r2,#112
 1217 0012 FFF7FEFF 	 bl memset
 1218              	.LBB6:
 246:../cleanflight/src/main/flight/servos.c **** 
 247:../cleanflight/src/main/flight/servos.c ****     // load custom mixer into currentServoMixer
 248:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < MAX_SERVO_RULES; i++) {
 1219              	 .loc 5 248 0
 1220 0016 0023     	 movs r3,#0
 1221 0018 7B60     	 str r3,[r7,#4]
 1222 001a 20E0     	 b .L54
 1223              	.L57:
 249:../cleanflight/src/main/flight/servos.c ****         // check if done
 250:../cleanflight/src/main/flight/servos.c ****         if (customServoMixers(i)->rate == 0) {
 1224              	 .loc 5 250 0
 1225 001c 7868     	 ldr r0,[r7,#4]
 1226 001e FFF7FEFF 	 bl customServoMixers
 1227 0022 0346     	 mov r3,r0
 1228 0024 9B78     	 ldrb r3,[r3,#2]
 1229 0026 002B     	 cmp r3,#0
 1230 0028 00D1     	 bne .L55
 251:../cleanflight/src/main/flight/servos.c ****             break;
 1231              	 .loc 5 251 0
 1232 002a 1BE0     	 b .L53
 1233              	.L55:
 252:../cleanflight/src/main/flight/servos.c ****         }
 253:../cleanflight/src/main/flight/servos.c ****         currentServoMixer[i] = *customServoMixers(i);
 1234              	 .loc 5 253 0 discriminator 2
 1235 002c 7868     	 ldr r0,[r7,#4]
 1236 002e FFF7FEFF 	 bl customServoMixers
 1237 0032 0F49     	 ldr r1,.L58+4
 1238 0034 7A68     	 ldr r2,[r7,#4]
 1239 0036 1346     	 mov r3,r2
 1240 0038 DB00     	 lsls r3,r3,#3
 1241 003a 9B1A     	 subs r3,r3,r2
 1242 003c 0B44     	 add r3,r3,r1
 1243 003e 0246     	 mov r2,r0
 1244 0040 1168     	 ldr r1,[r2]
 1245 0042 1960     	 str r1,[r3]
 1246 0044 9188     	 ldrh r1,[r2,#4]
 1247 0046 9279     	 ldrb r2,[r2,#6]
 1248 0048 9980     	 strh r1,[r3,#4]
 1249 004a 9A71     	 strb r2,[r3,#6]
 254:../cleanflight/src/main/flight/servos.c ****         servoRuleCount++;
 1250              	 .loc 5 254 0 discriminator 2
 1251 004c 074B     	 ldr r3,.L58
 1252 004e 1B78     	 ldrb r3,[r3]
 1253 0050 0133     	 adds r3,r3,#1
 1254 0052 DAB2     	 uxtb r2,r3
 1255 0054 054B     	 ldr r3,.L58
 1256 0056 1A70     	 strb r2,[r3]
 248:../cleanflight/src/main/flight/servos.c ****         // check if done
 1257              	 .loc 5 248 0 discriminator 2
 1258 0058 7B68     	 ldr r3,[r7,#4]
 1259 005a 0133     	 adds r3,r3,#1
 1260 005c 7B60     	 str r3,[r7,#4]
 1261              	.L54:
 248:../cleanflight/src/main/flight/servos.c ****         // check if done
 1262              	 .loc 5 248 0 is_stmt 0 discriminator 1
 1263 005e 7B68     	 ldr r3,[r7,#4]
 1264 0060 0F2B     	 cmp r3,#15
 1265 0062 DBDD     	 ble .L57
 1266              	.L53:
 1267              	.LBE6:
 255:../cleanflight/src/main/flight/servos.c ****     }
 256:../cleanflight/src/main/flight/servos.c **** }
 1268              	 .loc 5 256 0 is_stmt 1
 1269 0064 0837     	 adds r7,r7,#8
 1270              	.LCFI65:
 1271              	 .cfi_def_cfa_offset 8
 1272 0066 BD46     	 mov sp,r7
 1273              	.LCFI66:
 1274              	 .cfi_def_cfa_register 13
 1275              	 
 1276 0068 80BD     	 pop {r7,pc}
 1277              	.L59:
 1278 006a 00BF     	 .align 2
 1279              	.L58:
 1280 006c 00000000 	 .word servoRuleCount
 1281 0070 00000000 	 .word currentServoMixer
 1282              	 .cfi_endproc
 1283              	.LFE581:
 1285              	 .section .text.servoConfigureOutput,"ax",%progbits
 1286              	 .align 2
 1287              	 .global servoConfigureOutput
 1288              	 .thumb
 1289              	 .thumb_func
 1291              	servoConfigureOutput:
 1292              	.LFB582:
 257:../cleanflight/src/main/flight/servos.c **** 
 258:../cleanflight/src/main/flight/servos.c **** void servoConfigureOutput(void)
 259:../cleanflight/src/main/flight/servos.c **** {
 1293              	 .loc 5 259 0
 1294              	 .cfi_startproc
 1295              	 
 1296              	 
 1297 0000 80B5     	 push {r7,lr}
 1298              	.LCFI67:
 1299              	 .cfi_def_cfa_offset 8
 1300              	 .cfi_offset 7,-8
 1301              	 .cfi_offset 14,-4
 1302 0002 82B0     	 sub sp,sp,#8
 1303              	.LCFI68:
 1304              	 .cfi_def_cfa_offset 16
 1305 0004 00AF     	 add r7,sp,#0
 1306              	.LCFI69:
 1307              	 .cfi_def_cfa_register 7
 260:../cleanflight/src/main/flight/servos.c ****     if (useServo) {
 1308              	 .loc 5 260 0
 1309 0006 374B     	 ldr r3,.L68
 1310 0008 1B68     	 ldr r3,[r3]
 1311 000a 002B     	 cmp r3,#0
 1312 000c 3ED0     	 beq .L61
 261:../cleanflight/src/main/flight/servos.c ****         servoRuleCount = servoMixers[currentMixerMode].servoRuleCount;
 1313              	 .loc 5 261 0
 1314 000e 364B     	 ldr r3,.L68+4
 1315 0010 1B78     	 ldrb r3,[r3]
 1316 0012 1946     	 mov r1,r3
 1317 0014 354A     	 ldr r2,.L68+8
 1318 0016 0B46     	 mov r3,r1
 1319 0018 9B00     	 lsls r3,r3,#2
 1320 001a 0B44     	 add r3,r3,r1
 1321 001c 1344     	 add r3,r3,r2
 1322 001e 1A78     	 ldrb r2,[r3]
 1323 0020 334B     	 ldr r3,.L68+12
 1324 0022 1A70     	 strb r2,[r3]
 262:../cleanflight/src/main/flight/servos.c ****         if (servoMixers[currentMixerMode].rule) {
 1325              	 .loc 5 262 0
 1326 0024 304B     	 ldr r3,.L68+4
 1327 0026 1B78     	 ldrb r3,[r3]
 1328 0028 1946     	 mov r1,r3
 1329 002a 304A     	 ldr r2,.L68+8
 1330 002c 0B46     	 mov r3,r1
 1331 002e 9B00     	 lsls r3,r3,#2
 1332 0030 0B44     	 add r3,r3,r1
 1333 0032 1344     	 add r3,r3,r2
 1334 0034 D3F80130 	 ldr r3,[r3,#1]
 1335 0038 002B     	 cmp r3,#0
 1336 003a 27D0     	 beq .L61
 1337              	.LBB7:
 263:../cleanflight/src/main/flight/servos.c ****             for (int i = 0; i < servoRuleCount; i++)
 1338              	 .loc 5 263 0
 1339 003c 0023     	 movs r3,#0
 1340 003e 7B60     	 str r3,[r7,#4]
 1341 0040 1EE0     	 b .L62
 1342              	.L63:
 264:../cleanflight/src/main/flight/servos.c ****                 currentServoMixer[i] = servoMixers[currentMixerMode].rule[i];
 1343              	 .loc 5 264 0 discriminator 3
 1344 0042 294B     	 ldr r3,.L68+4
 1345 0044 1B78     	 ldrb r3,[r3]
 1346 0046 1946     	 mov r1,r3
 1347 0048 284A     	 ldr r2,.L68+8
 1348 004a 0B46     	 mov r3,r1
 1349 004c 9B00     	 lsls r3,r3,#2
 1350 004e 0B44     	 add r3,r3,r1
 1351 0050 1344     	 add r3,r3,r2
 1352 0052 D3F80110 	 ldr r1,[r3,#1]
 1353 0056 7A68     	 ldr r2,[r7,#4]
 1354 0058 1346     	 mov r3,r2
 1355 005a DB00     	 lsls r3,r3,#3
 1356 005c 9B1A     	 subs r3,r3,r2
 1357 005e C818     	 adds r0,r1,r3
 1358 0060 2449     	 ldr r1,.L68+16
 1359 0062 7A68     	 ldr r2,[r7,#4]
 1360 0064 1346     	 mov r3,r2
 1361 0066 DB00     	 lsls r3,r3,#3
 1362 0068 9B1A     	 subs r3,r3,r2
 1363 006a 0B44     	 add r3,r3,r1
 1364 006c 0246     	 mov r2,r0
 1365 006e 1168     	 ldr r1,[r2]
 1366 0070 1960     	 str r1,[r3]
 1367 0072 9188     	 ldrh r1,[r2,#4]
 1368 0074 9279     	 ldrb r2,[r2,#6]
 1369 0076 9980     	 strh r1,[r3,#4]
 1370 0078 9A71     	 strb r2,[r3,#6]
 263:../cleanflight/src/main/flight/servos.c ****             for (int i = 0; i < servoRuleCount; i++)
 1371              	 .loc 5 263 0 discriminator 3
 1372 007a 7B68     	 ldr r3,[r7,#4]
 1373 007c 0133     	 adds r3,r3,#1
 1374 007e 7B60     	 str r3,[r7,#4]
 1375              	.L62:
 263:../cleanflight/src/main/flight/servos.c ****             for (int i = 0; i < servoRuleCount; i++)
 1376              	 .loc 5 263 0 is_stmt 0 discriminator 1
 1377 0080 1B4B     	 ldr r3,.L68+12
 1378 0082 1B78     	 ldrb r3,[r3]
 1379 0084 1A46     	 mov r2,r3
 1380 0086 7B68     	 ldr r3,[r7,#4]
 1381 0088 9A42     	 cmp r2,r3
 1382 008a DADC     	 bgt .L63
 1383              	.L61:
 1384              	.LBE7:
 265:../cleanflight/src/main/flight/servos.c ****         }
 266:../cleanflight/src/main/flight/servos.c ****     }
 267:../cleanflight/src/main/flight/servos.c **** 
 268:../cleanflight/src/main/flight/servos.c ****     // set flag that we're on something with wings
 269:../cleanflight/src/main/flight/servos.c ****     if (currentMixerMode == MIXER_FLYING_WING ||
 1385              	 .loc 5 269 0 is_stmt 1
 1386 008c 164B     	 ldr r3,.L68+4
 1387 008e 1B78     	 ldrb r3,[r3]
 1388 0090 082B     	 cmp r3,#8
 1389 0092 07D0     	 beq .L64
 270:../cleanflight/src/main/flight/servos.c ****         currentMixerMode == MIXER_AIRPLANE ||
 1390              	 .loc 5 270 0 discriminator 1
 1391 0094 144B     	 ldr r3,.L68+4
 1392 0096 1B78     	 ldrb r3,[r3]
 269:../cleanflight/src/main/flight/servos.c ****         currentMixerMode == MIXER_AIRPLANE ||
 1393              	 .loc 5 269 0 discriminator 1
 1394 0098 0E2B     	 cmp r3,#14
 1395 009a 03D0     	 beq .L64
 271:../cleanflight/src/main/flight/servos.c ****         currentMixerMode == MIXER_CUSTOM_AIRPLANE
 1396              	 .loc 5 271 0
 1397 009c 124B     	 ldr r3,.L68+4
 1398 009e 1B78     	 ldrb r3,[r3]
 270:../cleanflight/src/main/flight/servos.c ****         currentMixerMode == MIXER_AIRPLANE ||
 1399              	 .loc 5 270 0
 1400 00a0 182B     	 cmp r3,#24
 1401 00a2 0ED1     	 bne .L65
 1402              	.L64:
 272:../cleanflight/src/main/flight/servos.c ****     ) {
 273:../cleanflight/src/main/flight/servos.c ****         ENABLE_STATE(FIXED_WING);
 1403              	 .loc 5 273 0
 1404 00a4 144B     	 ldr r3,.L68+20
 1405 00a6 1B78     	 ldrb r3,[r3]
 1406 00a8 43F01003 	 orr r3,r3,#16
 1407 00ac DAB2     	 uxtb r2,r3
 1408 00ae 124B     	 ldr r3,.L68+20
 1409 00b0 1A70     	 strb r2,[r3]
 274:../cleanflight/src/main/flight/servos.c ****         if (currentMixerMode == MIXER_CUSTOM_AIRPLANE) {
 1410              	 .loc 5 274 0
 1411 00b2 0D4B     	 ldr r3,.L68+4
 1412 00b4 1B78     	 ldrb r3,[r3]
 1413 00b6 182B     	 cmp r3,#24
 1414 00b8 02D1     	 bne .L66
 275:../cleanflight/src/main/flight/servos.c ****             loadCustomServoMixer();
 1415              	 .loc 5 275 0
 1416 00ba FFF7FEFF 	 bl loadCustomServoMixer
 274:../cleanflight/src/main/flight/servos.c ****         if (currentMixerMode == MIXER_CUSTOM_AIRPLANE) {
 1417              	 .loc 5 274 0
 1418 00be 0DE0     	 b .L60
 1419              	.L66:
 1420 00c0 0CE0     	 b .L60
 1421              	.L65:
 276:../cleanflight/src/main/flight/servos.c ****         }
 277:../cleanflight/src/main/flight/servos.c ****     } else {
 278:../cleanflight/src/main/flight/servos.c ****         DISABLE_STATE(FIXED_WING);
 1422              	 .loc 5 278 0
 1423 00c2 0D4B     	 ldr r3,.L68+20
 1424 00c4 1B78     	 ldrb r3,[r3]
 1425 00c6 23F01003 	 bic r3,r3,#16
 1426 00ca DAB2     	 uxtb r2,r3
 1427 00cc 0A4B     	 ldr r3,.L68+20
 1428 00ce 1A70     	 strb r2,[r3]
 279:../cleanflight/src/main/flight/servos.c ****         if (currentMixerMode == MIXER_CUSTOM_TRI) {
 1429              	 .loc 5 279 0
 1430 00d0 054B     	 ldr r3,.L68+4
 1431 00d2 1B78     	 ldrb r3,[r3]
 1432 00d4 192B     	 cmp r3,#25
 1433 00d6 01D1     	 bne .L60
 280:../cleanflight/src/main/flight/servos.c ****             loadCustomServoMixer();
 1434              	 .loc 5 280 0
 1435 00d8 FFF7FEFF 	 bl loadCustomServoMixer
 1436              	.L60:
 281:../cleanflight/src/main/flight/servos.c ****         }
 282:../cleanflight/src/main/flight/servos.c ****     }
 283:../cleanflight/src/main/flight/servos.c **** }
 1437              	 .loc 5 283 0
 1438 00dc 0837     	 adds r7,r7,#8
 1439              	.LCFI70:
 1440              	 .cfi_def_cfa_offset 8
 1441 00de BD46     	 mov sp,r7
 1442              	.LCFI71:
 1443              	 .cfi_def_cfa_register 13
 1444              	 
 1445 00e0 80BD     	 pop {r7,pc}
 1446              	.L69:
 1447 00e2 00BF     	 .align 2
 1448              	.L68:
 1449 00e4 00000000 	 .word useServo
 1450 00e8 00000000 	 .word currentMixerMode
 1451 00ec 00000000 	 .word servoMixers
 1452 00f0 00000000 	 .word servoRuleCount
 1453 00f4 00000000 	 .word currentServoMixer
 1454 00f8 00000000 	 .word stateFlags
 1455              	 .cfi_endproc
 1456              	.LFE582:
 1458              	 .section .text.servoMixerLoadMix,"ax",%progbits
 1459              	 .align 2
 1460              	 .global servoMixerLoadMix
 1461              	 .thumb
 1462              	 .thumb_func
 1464              	servoMixerLoadMix:
 1465              	.LFB583:
 284:../cleanflight/src/main/flight/servos.c **** 
 285:../cleanflight/src/main/flight/servos.c **** 
 286:../cleanflight/src/main/flight/servos.c **** void servoMixerLoadMix(int index)
 287:../cleanflight/src/main/flight/servos.c **** {
 1466              	 .loc 5 287 0
 1467              	 .cfi_startproc
 1468              	 
 1469              	 
 1470 0000 B0B5     	 push {r4,r5,r7,lr}
 1471              	.LCFI72:
 1472              	 .cfi_def_cfa_offset 16
 1473              	 .cfi_offset 4,-16
 1474              	 .cfi_offset 5,-12
 1475              	 .cfi_offset 7,-8
 1476              	 .cfi_offset 14,-4
 1477 0002 84B0     	 sub sp,sp,#16
 1478              	.LCFI73:
 1479              	 .cfi_def_cfa_offset 32
 1480 0004 00AF     	 add r7,sp,#0
 1481              	.LCFI74:
 1482              	 .cfi_def_cfa_register 7
 1483 0006 7860     	 str r0,[r7,#4]
 288:../cleanflight/src/main/flight/servos.c ****     // we're 1-based
 289:../cleanflight/src/main/flight/servos.c ****     index++;
 1484              	 .loc 5 289 0
 1485 0008 7B68     	 ldr r3,[r7,#4]
 1486 000a 0133     	 adds r3,r3,#1
 1487 000c 7B60     	 str r3,[r7,#4]
 1488              	.LBB8:
 290:../cleanflight/src/main/flight/servos.c ****     // clear existing
 291:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < MAX_SERVO_RULES; i++) {
 1489              	 .loc 5 291 0
 1490 000e 0023     	 movs r3,#0
 1491 0010 FB60     	 str r3,[r7,#12]
 1492 0012 1BE0     	 b .L71
 1493              	.L72:
 292:../cleanflight/src/main/flight/servos.c ****         customServoMixersMutable(i)->targetChannel = customServoMixersMutable(i)->inputSource = cus
 1494              	 .loc 5 292 0 discriminator 3
 1495 0014 F868     	 ldr r0,[r7,#12]
 1496 0016 FFF7FEFF 	 bl customServoMixersMutable
 1497 001a 0546     	 mov r5,r0
 1498 001c F868     	 ldr r0,[r7,#12]
 1499 001e FFF7FEFF 	 bl customServoMixersMutable
 1500 0022 0446     	 mov r4,r0
 1501 0024 F868     	 ldr r0,[r7,#12]
 1502 0026 FFF7FEFF 	 bl customServoMixersMutable
 1503 002a 0346     	 mov r3,r0
 1504 002c 0022     	 movs r2,#0
 1505 002e 9A71     	 strb r2,[r3,#6]
 1506 0030 F868     	 ldr r0,[r7,#12]
 1507 0032 FFF7FEFF 	 bl customServoMixersMutable
 1508 0036 0346     	 mov r3,r0
 1509 0038 0022     	 movs r2,#0
 1510 003a 9A70     	 strb r2,[r3,#2]
 1511 003c 9B78     	 ldrb r3,[r3,#2]
 1512 003e DBB2     	 uxtb r3,r3
 1513 0040 6370     	 strb r3,[r4,#1]
 1514 0042 6378     	 ldrb r3,[r4,#1]
 1515 0044 2B70     	 strb r3,[r5]
 291:../cleanflight/src/main/flight/servos.c ****         customServoMixersMutable(i)->targetChannel = customServoMixersMutable(i)->inputSource = cus
 1516              	 .loc 5 291 0 discriminator 3
 1517 0046 FB68     	 ldr r3,[r7,#12]
 1518 0048 0133     	 adds r3,r3,#1
 1519 004a FB60     	 str r3,[r7,#12]
 1520              	.L71:
 291:../cleanflight/src/main/flight/servos.c ****         customServoMixersMutable(i)->targetChannel = customServoMixersMutable(i)->inputSource = cus
 1521              	 .loc 5 291 0 is_stmt 0 discriminator 1
 1522 004c FB68     	 ldr r3,[r7,#12]
 1523 004e 0F2B     	 cmp r3,#15
 1524 0050 E0DD     	 ble .L72
 1525              	.LBE8:
 1526              	.LBB9:
 293:../cleanflight/src/main/flight/servos.c ****     }
 294:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < servoMixers[index].servoRuleCount; i++) {
 1527              	 .loc 5 294 0 is_stmt 1
 1528 0052 0023     	 movs r3,#0
 1529 0054 BB60     	 str r3,[r7,#8]
 1530 0056 19E0     	 b .L73
 1531              	.L74:
 295:../cleanflight/src/main/flight/servos.c ****         *customServoMixersMutable(i) = servoMixers[index].rule[i];
 1532              	 .loc 5 295 0 discriminator 3
 1533 0058 B868     	 ldr r0,[r7,#8]
 1534 005a FFF7FEFF 	 bl customServoMixersMutable
 1535 005e 1249     	 ldr r1,.L75
 1536 0060 7A68     	 ldr r2,[r7,#4]
 1537 0062 1346     	 mov r3,r2
 1538 0064 9B00     	 lsls r3,r3,#2
 1539 0066 1344     	 add r3,r3,r2
 1540 0068 0B44     	 add r3,r3,r1
 1541 006a D3F80110 	 ldr r1,[r3,#1]
 1542 006e BA68     	 ldr r2,[r7,#8]
 1543 0070 1346     	 mov r3,r2
 1544 0072 DB00     	 lsls r3,r3,#3
 1545 0074 9B1A     	 subs r3,r3,r2
 1546 0076 CA18     	 adds r2,r1,r3
 1547 0078 0346     	 mov r3,r0
 1548 007a 1168     	 ldr r1,[r2]
 1549 007c 1960     	 str r1,[r3]
 1550 007e 9188     	 ldrh r1,[r2,#4]
 1551 0080 9279     	 ldrb r2,[r2,#6]
 1552 0082 9980     	 strh r1,[r3,#4]
 1553 0084 9A71     	 strb r2,[r3,#6]
 294:../cleanflight/src/main/flight/servos.c ****         *customServoMixersMutable(i) = servoMixers[index].rule[i];
 1554              	 .loc 5 294 0 discriminator 3
 1555 0086 BB68     	 ldr r3,[r7,#8]
 1556 0088 0133     	 adds r3,r3,#1
 1557 008a BB60     	 str r3,[r7,#8]
 1558              	.L73:
 294:../cleanflight/src/main/flight/servos.c ****         *customServoMixersMutable(i) = servoMixers[index].rule[i];
 1559              	 .loc 5 294 0 is_stmt 0 discriminator 1
 1560 008c 0649     	 ldr r1,.L75
 1561 008e 7A68     	 ldr r2,[r7,#4]
 1562 0090 1346     	 mov r3,r2
 1563 0092 9B00     	 lsls r3,r3,#2
 1564 0094 1344     	 add r3,r3,r2
 1565 0096 0B44     	 add r3,r3,r1
 1566 0098 1B78     	 ldrb r3,[r3]
 1567 009a 1A46     	 mov r2,r3
 1568 009c BB68     	 ldr r3,[r7,#8]
 1569 009e 9A42     	 cmp r2,r3
 1570 00a0 DADC     	 bgt .L74
 1571              	.LBE9:
 296:../cleanflight/src/main/flight/servos.c ****     }
 297:../cleanflight/src/main/flight/servos.c **** }
 1572              	 .loc 5 297 0 is_stmt 1
 1573 00a2 1037     	 adds r7,r7,#16
 1574              	.LCFI75:
 1575              	 .cfi_def_cfa_offset 16
 1576 00a4 BD46     	 mov sp,r7
 1577              	.LCFI76:
 1578              	 .cfi_def_cfa_register 13
 1579              	 
 1580 00a6 B0BD     	 pop {r4,r5,r7,pc}
 1581              	.L76:
 1582              	 .align 2
 1583              	.L75:
 1584 00a8 00000000 	 .word servoMixers
 1585              	 .cfi_endproc
 1586              	.LFE583:
 1588              	 .section .text.forwardAuxChannelsToServos,"ax",%progbits
 1589              	 .align 2
 1590              	 .thumb
 1591              	 .thumb_func
 1593              	forwardAuxChannelsToServos:
 1594              	.LFB584:
 298:../cleanflight/src/main/flight/servos.c **** 
 299:../cleanflight/src/main/flight/servos.c **** STATIC_UNIT_TESTED void forwardAuxChannelsToServos(uint8_t firstServoIndex)
 300:../cleanflight/src/main/flight/servos.c **** {
 1595              	 .loc 5 300 0
 1596              	 .cfi_startproc
 1597              	 
 1598              	 
 1599 0000 80B5     	 push {r7,lr}
 1600              	.LCFI77:
 1601              	 .cfi_def_cfa_offset 8
 1602              	 .cfi_offset 7,-8
 1603              	 .cfi_offset 14,-4
 1604 0002 84B0     	 sub sp,sp,#16
 1605              	.LCFI78:
 1606              	 .cfi_def_cfa_offset 24
 1607 0004 00AF     	 add r7,sp,#0
 1608              	.LCFI79:
 1609              	 .cfi_def_cfa_register 7
 1610 0006 0346     	 mov r3,r0
 1611 0008 FB71     	 strb r3,[r7,#7]
 301:../cleanflight/src/main/flight/servos.c ****     // start forwarding from this channel
 302:../cleanflight/src/main/flight/servos.c ****     int channelOffset = servoConfig()->channelForwardingStartChannel;
 1612              	 .loc 5 302 0
 1613 000a FFF7FEFF 	 bl servoConfig
 1614 000e 0346     	 mov r3,r0
 1615 0010 DB7B     	 ldrb r3,[r3,#15]
 1616 0012 FB60     	 str r3,[r7,#12]
 1617              	.LBB10:
 303:../cleanflight/src/main/flight/servos.c ****     for (int servoOffset = 0; servoOffset < MAX_AUX_CHANNEL_COUNT && channelOffset < MAX_SUPPORTED_
 1618              	 .loc 5 303 0
 1619 0014 0023     	 movs r3,#0
 1620 0016 BB60     	 str r3,[r7,#8]
 1621 0018 17E0     	 b .L78
 1622              	.L80:
 304:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(firstServoIndex + servoOffset, rcData[channelOffset++]);
 1623              	 .loc 5 304 0 discriminator 4
 1624 001a BB68     	 ldr r3,[r7,#8]
 1625 001c DAB2     	 uxtb r2,r3
 1626 001e FB79     	 ldrb r3,[r7,#7]
 1627 0020 1344     	 add r3,r3,r2
 1628 0022 D9B2     	 uxtb r1,r3
 1629 0024 FB68     	 ldr r3,[r7,#12]
 1630 0026 5A1C     	 adds r2,r3,#1
 1631 0028 FA60     	 str r2,[r7,#12]
 1632 002a 0C4A     	 ldr r2,.L81
 1633 002c 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 1634 0030 1BB2     	 sxth r3,r3
 1635 0032 07EE903A 	 fmsr s15,r3
 1636 0036 F8EEE77A 	 fsitos s15,s15
 1637 003a 0846     	 mov r0,r1
 1638 003c 17EE901A 	 fmrs r1,s15
 1639 0040 FFF7FEFF 	 bl pwmWriteServo
 303:../cleanflight/src/main/flight/servos.c ****     for (int servoOffset = 0; servoOffset < MAX_AUX_CHANNEL_COUNT && channelOffset < MAX_SUPPORTED_
 1640              	 .loc 5 303 0 discriminator 4
 1641 0044 BB68     	 ldr r3,[r7,#8]
 1642 0046 0133     	 adds r3,r3,#1
 1643 0048 BB60     	 str r3,[r7,#8]
 1644              	.L78:
 303:../cleanflight/src/main/flight/servos.c ****     for (int servoOffset = 0; servoOffset < MAX_AUX_CHANNEL_COUNT && channelOffset < MAX_SUPPORTED_
 1645              	 .loc 5 303 0 is_stmt 0 discriminator 1
 1646 004a BB68     	 ldr r3,[r7,#8]
 1647 004c 0D2B     	 cmp r3,#13
 1648 004e 02DC     	 bgt .L77
 303:../cleanflight/src/main/flight/servos.c ****     for (int servoOffset = 0; servoOffset < MAX_AUX_CHANNEL_COUNT && channelOffset < MAX_SUPPORTED_
 1649              	 .loc 5 303 0 discriminator 3
 1650 0050 FB68     	 ldr r3,[r7,#12]
 1651 0052 112B     	 cmp r3,#17
 1652 0054 E1DD     	 ble .L80
 1653              	.L77:
 1654              	.LBE10:
 305:../cleanflight/src/main/flight/servos.c ****     }
 306:../cleanflight/src/main/flight/servos.c **** }
 1655              	 .loc 5 306 0 is_stmt 1
 1656 0056 1037     	 adds r7,r7,#16
 1657              	.LCFI80:
 1658              	 .cfi_def_cfa_offset 8
 1659 0058 BD46     	 mov sp,r7
 1660              	.LCFI81:
 1661              	 .cfi_def_cfa_register 13
 1662              	 
 1663 005a 80BD     	 pop {r7,pc}
 1664              	.L82:
 1665              	 .align 2
 1666              	.L81:
 1667 005c 00000000 	 .word rcData
 1668              	 .cfi_endproc
 1669              	.LFE584:
 1671              	 .section .text.updateGimbalServos,"ax",%progbits
 1672              	 .align 2
 1673              	 .thumb
 1674              	 .thumb_func
 1676              	updateGimbalServos:
 1677              	.LFB585:
 307:../cleanflight/src/main/flight/servos.c **** 
 308:../cleanflight/src/main/flight/servos.c **** static void updateGimbalServos(uint8_t firstServoIndex)
 309:../cleanflight/src/main/flight/servos.c **** {
 1678              	 .loc 5 309 0
 1679              	 .cfi_startproc
 1680              	 
 1681              	 
 1682 0000 80B5     	 push {r7,lr}
 1683              	.LCFI82:
 1684              	 .cfi_def_cfa_offset 8
 1685              	 .cfi_offset 7,-8
 1686              	 .cfi_offset 14,-4
 1687 0002 82B0     	 sub sp,sp,#8
 1688              	.LCFI83:
 1689              	 .cfi_def_cfa_offset 16
 1690 0004 00AF     	 add r7,sp,#0
 1691              	.LCFI84:
 1692              	 .cfi_def_cfa_register 7
 1693 0006 0346     	 mov r3,r0
 1694 0008 FB71     	 strb r3,[r7,#7]
 310:../cleanflight/src/main/flight/servos.c ****     pwmWriteServo(firstServoIndex + 0, servo[SERVO_GIMBAL_PITCH]);
 1695              	 .loc 5 310 0
 1696 000a 0F4B     	 ldr r3,.L84
 1697 000c 1B88     	 ldrh r3,[r3]
 1698 000e 1BB2     	 sxth r3,r3
 1699 0010 07EE903A 	 fmsr s15,r3
 1700 0014 F8EEE77A 	 fsitos s15,s15
 1701 0018 FB79     	 ldrb r3,[r7,#7]
 1702 001a 1846     	 mov r0,r3
 1703 001c 17EE901A 	 fmrs r1,s15
 1704 0020 FFF7FEFF 	 bl pwmWriteServo
 311:../cleanflight/src/main/flight/servos.c ****     pwmWriteServo(firstServoIndex + 1, servo[SERVO_GIMBAL_ROLL]);
 1705              	 .loc 5 311 0
 1706 0024 FB79     	 ldrb r3,[r7,#7]
 1707 0026 0133     	 adds r3,r3,#1
 1708 0028 DAB2     	 uxtb r2,r3
 1709 002a 074B     	 ldr r3,.L84
 1710 002c 5B88     	 ldrh r3,[r3,#2]
 1711 002e 1BB2     	 sxth r3,r3
 1712 0030 07EE903A 	 fmsr s15,r3
 1713 0034 F8EEE77A 	 fsitos s15,s15
 1714 0038 1046     	 mov r0,r2
 1715 003a 17EE901A 	 fmrs r1,s15
 1716 003e FFF7FEFF 	 bl pwmWriteServo
 312:../cleanflight/src/main/flight/servos.c **** }
 1717              	 .loc 5 312 0
 1718 0042 0837     	 adds r7,r7,#8
 1719              	.LCFI85:
 1720              	 .cfi_def_cfa_offset 8
 1721 0044 BD46     	 mov sp,r7
 1722              	.LCFI86:
 1723              	 .cfi_def_cfa_register 13
 1724              	 
 1725 0046 80BD     	 pop {r7,pc}
 1726              	.L85:
 1727              	 .align 2
 1728              	.L84:
 1729 0048 00000000 	 .word servo
 1730              	 .cfi_endproc
 1731              	.LFE585:
 1733              	 .section .text.writeServos,"ax",%progbits
 1734              	 .align 2
 1735              	 .global writeServos
 1736              	 .thumb
 1737              	 .thumb_func
 1739              	writeServos:
 1740              	.LFB586:
 313:../cleanflight/src/main/flight/servos.c **** 
 314:../cleanflight/src/main/flight/servos.c **** static void servoTable(void);
 315:../cleanflight/src/main/flight/servos.c **** static void filterServos(void);
 316:../cleanflight/src/main/flight/servos.c **** 
 317:../cleanflight/src/main/flight/servos.c **** void writeServos(void)
 318:../cleanflight/src/main/flight/servos.c **** {
 1741              	 .loc 5 318 0
 1742              	 .cfi_startproc
 1743              	 
 1744              	 
 1745 0000 80B5     	 push {r7,lr}
 1746              	.LCFI87:
 1747              	 .cfi_def_cfa_offset 8
 1748              	 .cfi_offset 7,-8
 1749              	 .cfi_offset 14,-4
 1750 0002 84B0     	 sub sp,sp,#16
 1751              	.LCFI88:
 1752              	 .cfi_def_cfa_offset 24
 1753 0004 00AF     	 add r7,sp,#0
 1754              	.LCFI89:
 1755              	 .cfi_def_cfa_register 7
 319:../cleanflight/src/main/flight/servos.c ****     servoTable();
 1756              	 .loc 5 319 0
 1757 0006 FFF7FEFF 	 bl servoTable
 320:../cleanflight/src/main/flight/servos.c ****     filterServos();
 1758              	 .loc 5 320 0
 1759 000a FFF7FEFF 	 bl filterServos
 321:../cleanflight/src/main/flight/servos.c **** 
 322:../cleanflight/src/main/flight/servos.c ****     uint8_t servoIndex = 0;
 1760              	 .loc 5 322 0
 1761 000e 0023     	 movs r3,#0
 1762 0010 FB73     	 strb r3,[r7,#15]
 323:../cleanflight/src/main/flight/servos.c ****     switch (currentMixerMode) {
 1763              	 .loc 5 323 0
 1764 0012 BF4B     	 ldr r3,.L111
 1765 0014 1B78     	 ldrb r3,[r3]
 1766 0016 013B     	 subs r3,r3,#1
 1767 0018 182B     	 cmp r3,#24
 1768 001a 00F25581 	 bhi .L110
 1769 001e 01A2     	 adr r2,.L89
 1770 0020 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1771              	 .p2align 2
 1772              	.L89:
 1773 0024 89000000 	 .word .L88+1
 1774 0028 C9020000 	 .word .L110+1
 1775 002c C9020000 	 .word .L110+1
 1776 0030 67010000 	 .word .L90+1
 1777 0034 C9020000 	 .word .L110+1
 1778 0038 C9020000 	 .word .L110+1
 1779 003c C9020000 	 .word .L110+1
 1780 0040 F3000000 	 .word .L91+1
 1781 0044 C9020000 	 .word .L110+1
 1782 0048 C9020000 	 .word .L110+1
 1783 004c C9020000 	 .word .L110+1
 1784 0050 C9020000 	 .word .L110+1
 1785 0054 C9020000 	 .word .L110+1
 1786 0058 31010000 	 .word .L92+1
 1787 005c A5010000 	 .word .L93+1
 1788 0060 C9020000 	 .word .L110+1
 1789 0064 C9020000 	 .word .L110+1
 1790 0068 C9020000 	 .word .L110+1
 1791 006c 93020000 	 .word .L94+1
 1792 0070 1F020000 	 .word .L95+1
 1793 0074 5D020000 	 .word .L96+1
 1794 0078 C9020000 	 .word .L110+1
 1795 007c C9020000 	 .word .L110+1
 1796 0080 31010000 	 .word .L92+1
 1797 0084 89000000 	 .word .L88+1
 1798              	 .p2align 1
 1799              	.L88:
 324:../cleanflight/src/main/flight/servos.c ****     case MIXER_TRI:
 325:../cleanflight/src/main/flight/servos.c ****     case MIXER_CUSTOM_TRI:
 326:../cleanflight/src/main/flight/servos.c ****         if (servosTricopterIsEnabledServoUnarmed()) {
 1800              	 .loc 5 326 0
 1801 0088 FFF7FEFF 	 bl servosTricopterIsEnabledServoUnarmed
 1802 008c 0346     	 mov r3,r0
 1803 008e 002B     	 cmp r3,#0
 1804 0090 0FD0     	 beq .L97
 327:../cleanflight/src/main/flight/servos.c ****             // if unarmed flag set, we always move servo
 328:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[SERVO_RUDDER]);
 1805              	 .loc 5 328 0
 1806 0092 FB7B     	 ldrb r3,[r7,#15]
 1807 0094 5A1C     	 adds r2,r3,#1
 1808 0096 FA73     	 strb r2,[r7,#15]
 1809 0098 9E4A     	 ldr r2,.L111+4
 1810 009a 5289     	 ldrh r2,[r2,#10]
 1811 009c 12B2     	 sxth r2,r2
 1812 009e 07EE902A 	 fmsr s15,r2
 1813 00a2 F8EEE77A 	 fsitos s15,s15
 1814 00a6 1846     	 mov r0,r3
 1815 00a8 17EE901A 	 fmrs r1,s15
 1816 00ac FFF7FEFF 	 bl pwmWriteServo
 1817 00b0 1EE0     	 b .L98
 1818              	.L97:
 329:../cleanflight/src/main/flight/servos.c ****         } else {
 330:../cleanflight/src/main/flight/servos.c ****             // otherwise, only move servo when copter is armed
 331:../cleanflight/src/main/flight/servos.c ****             if (ARMING_FLAG(ARMED))
 1819              	 .loc 5 331 0
 1820 00b2 994B     	 ldr r3,.L111+8
 1821 00b4 1B78     	 ldrb r3,[r3]
 1822 00b6 03F00103 	 and r3,r3,#1
 1823 00ba 002B     	 cmp r3,#0
 1824 00bc 0FD0     	 beq .L99
 332:../cleanflight/src/main/flight/servos.c ****                 pwmWriteServo(servoIndex++, servo[SERVO_RUDDER]);
 1825              	 .loc 5 332 0
 1826 00be FB7B     	 ldrb r3,[r7,#15]
 1827 00c0 5A1C     	 adds r2,r3,#1
 1828 00c2 FA73     	 strb r2,[r7,#15]
 1829 00c4 934A     	 ldr r2,.L111+4
 1830 00c6 5289     	 ldrh r2,[r2,#10]
 1831 00c8 12B2     	 sxth r2,r2
 1832 00ca 07EE902A 	 fmsr s15,r2
 1833 00ce F8EEE77A 	 fsitos s15,s15
 1834 00d2 1846     	 mov r0,r3
 1835 00d4 17EE901A 	 fmrs r1,s15
 1836 00d8 FFF7FEFF 	 bl pwmWriteServo
 1837 00dc 08E0     	 b .L98
 1838              	.L99:
 333:../cleanflight/src/main/flight/servos.c ****             else
 334:../cleanflight/src/main/flight/servos.c ****                 pwmWriteServo(servoIndex++, 0); // kill servo signal completely.
 1839              	 .loc 5 334 0
 1840 00de FB7B     	 ldrb r3,[r7,#15]
 1841 00e0 5A1C     	 adds r2,r3,#1
 1842 00e2 FA73     	 strb r2,[r7,#15]
 1843 00e4 1846     	 mov r0,r3
 1844 00e6 4FF00001 	 mov r1,#0
 1845 00ea FFF7FEFF 	 bl pwmWriteServo
 335:../cleanflight/src/main/flight/servos.c ****         }
 336:../cleanflight/src/main/flight/servos.c ****         break;
 1846              	 .loc 5 336 0
 1847 00ee ECE0     	 b .L100
 1848              	.L98:
 1849 00f0 EBE0     	 b .L100
 1850              	.L91:
 337:../cleanflight/src/main/flight/servos.c **** 
 338:../cleanflight/src/main/flight/servos.c ****     case MIXER_FLYING_WING:
 339:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_FLAPPERON_1]);
 1851              	 .loc 5 339 0
 1852 00f2 FB7B     	 ldrb r3,[r7,#15]
 1853 00f4 5A1C     	 adds r2,r3,#1
 1854 00f6 FA73     	 strb r2,[r7,#15]
 1855 00f8 864A     	 ldr r2,.L111+4
 1856 00fa D288     	 ldrh r2,[r2,#6]
 1857 00fc 12B2     	 sxth r2,r2
 1858 00fe 07EE902A 	 fmsr s15,r2
 1859 0102 F8EEE77A 	 fsitos s15,s15
 1860 0106 1846     	 mov r0,r3
 1861 0108 17EE901A 	 fmrs r1,s15
 1862 010c FFF7FEFF 	 bl pwmWriteServo
 340:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_FLAPPERON_2]);
 1863              	 .loc 5 340 0
 1864 0110 FB7B     	 ldrb r3,[r7,#15]
 1865 0112 5A1C     	 adds r2,r3,#1
 1866 0114 FA73     	 strb r2,[r7,#15]
 1867 0116 7F4A     	 ldr r2,.L111+4
 1868 0118 1289     	 ldrh r2,[r2,#8]
 1869 011a 12B2     	 sxth r2,r2
 1870 011c 07EE902A 	 fmsr s15,r2
 1871 0120 F8EEE77A 	 fsitos s15,s15
 1872 0124 1846     	 mov r0,r3
 1873 0126 17EE901A 	 fmrs r1,s15
 1874 012a FFF7FEFF 	 bl pwmWriteServo
 341:../cleanflight/src/main/flight/servos.c ****         break;
 1875              	 .loc 5 341 0
 1876 012e CCE0     	 b .L100
 1877              	.L92:
 1878              	.LBB11:
 342:../cleanflight/src/main/flight/servos.c **** 
 343:../cleanflight/src/main/flight/servos.c ****     case MIXER_CUSTOM_AIRPLANE:
 344:../cleanflight/src/main/flight/servos.c ****     case MIXER_AIRPLANE:
 345:../cleanflight/src/main/flight/servos.c ****         for (int i = SERVO_PLANE_INDEX_MIN; i <= SERVO_PLANE_INDEX_MAX; i++) {
 1879              	 .loc 5 345 0
 1880 0130 0223     	 movs r3,#2
 1881 0132 BB60     	 str r3,[r7,#8]
 1882 0134 13E0     	 b .L101
 1883              	.L102:
 346:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[i]);
 1884              	 .loc 5 346 0 discriminator 3
 1885 0136 FB7B     	 ldrb r3,[r7,#15]
 1886 0138 5A1C     	 adds r2,r3,#1
 1887 013a FA73     	 strb r2,[r7,#15]
 1888 013c 7549     	 ldr r1,.L111+4
 1889 013e BA68     	 ldr r2,[r7,#8]
 1890 0140 31F81220 	 ldrh r2,[r1,r2,lsl#1]
 1891 0144 12B2     	 sxth r2,r2
 1892 0146 07EE902A 	 fmsr s15,r2
 1893 014a F8EEE77A 	 fsitos s15,s15
 1894 014e 1846     	 mov r0,r3
 1895 0150 17EE901A 	 fmrs r1,s15
 1896 0154 FFF7FEFF 	 bl pwmWriteServo
 345:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[i]);
 1897              	 .loc 5 345 0 discriminator 3
 1898 0158 BB68     	 ldr r3,[r7,#8]
 1899 015a 0133     	 adds r3,r3,#1
 1900 015c BB60     	 str r3,[r7,#8]
 1901              	.L101:
 345:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[i]);
 1902              	 .loc 5 345 0 is_stmt 0 discriminator 1
 1903 015e BB68     	 ldr r3,[r7,#8]
 1904 0160 072B     	 cmp r3,#7
 1905 0162 E8DD     	 ble .L102
 1906              	.LBE11:
 347:../cleanflight/src/main/flight/servos.c ****         }
 348:../cleanflight/src/main/flight/servos.c ****         break;
 1907              	 .loc 5 348 0 is_stmt 1
 1908 0164 B1E0     	 b .L100
 1909              	.L90:
 349:../cleanflight/src/main/flight/servos.c **** 
 350:../cleanflight/src/main/flight/servos.c **** #ifdef USE_UNCOMMON_MIXERS
 351:../cleanflight/src/main/flight/servos.c ****     case MIXER_BICOPTER:
 352:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_BICOPTER_LEFT]);
 1910              	 .loc 5 352 0
 1911 0166 FB7B     	 ldrb r3,[r7,#15]
 1912 0168 5A1C     	 adds r2,r3,#1
 1913 016a FA73     	 strb r2,[r7,#15]
 1914 016c 694A     	 ldr r2,.L111+4
 1915 016e 1289     	 ldrh r2,[r2,#8]
 1916 0170 12B2     	 sxth r2,r2
 1917 0172 07EE902A 	 fmsr s15,r2
 1918 0176 F8EEE77A 	 fsitos s15,s15
 1919 017a 1846     	 mov r0,r3
 1920 017c 17EE901A 	 fmrs r1,s15
 1921 0180 FFF7FEFF 	 bl pwmWriteServo
 353:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_BICOPTER_RIGHT]);
 1922              	 .loc 5 353 0
 1923 0184 FB7B     	 ldrb r3,[r7,#15]
 1924 0186 5A1C     	 adds r2,r3,#1
 1925 0188 FA73     	 strb r2,[r7,#15]
 1926 018a 624A     	 ldr r2,.L111+4
 1927 018c 5289     	 ldrh r2,[r2,#10]
 1928 018e 12B2     	 sxth r2,r2
 1929 0190 07EE902A 	 fmsr s15,r2
 1930 0194 F8EEE77A 	 fsitos s15,s15
 1931 0198 1846     	 mov r0,r3
 1932 019a 17EE901A 	 fmrs r1,s15
 1933 019e FFF7FEFF 	 bl pwmWriteServo
 354:../cleanflight/src/main/flight/servos.c ****         break;
 1934              	 .loc 5 354 0
 1935 01a2 92E0     	 b .L100
 1936              	.L93:
 355:../cleanflight/src/main/flight/servos.c **** 
 356:../cleanflight/src/main/flight/servos.c ****     case MIXER_HELI_120_CCPM:
 357:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_HELI_LEFT]);
 1937              	 .loc 5 357 0
 1938 01a4 FB7B     	 ldrb r3,[r7,#15]
 1939 01a6 5A1C     	 adds r2,r3,#1
 1940 01a8 FA73     	 strb r2,[r7,#15]
 1941 01aa 5A4A     	 ldr r2,.L111+4
 1942 01ac 1288     	 ldrh r2,[r2]
 1943 01ae 12B2     	 sxth r2,r2
 1944 01b0 07EE902A 	 fmsr s15,r2
 1945 01b4 F8EEE77A 	 fsitos s15,s15
 1946 01b8 1846     	 mov r0,r3
 1947 01ba 17EE901A 	 fmrs r1,s15
 1948 01be FFF7FEFF 	 bl pwmWriteServo
 358:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_HELI_RIGHT]);
 1949              	 .loc 5 358 0
 1950 01c2 FB7B     	 ldrb r3,[r7,#15]
 1951 01c4 5A1C     	 adds r2,r3,#1
 1952 01c6 FA73     	 strb r2,[r7,#15]
 1953 01c8 524A     	 ldr r2,.L111+4
 1954 01ca 5288     	 ldrh r2,[r2,#2]
 1955 01cc 12B2     	 sxth r2,r2
 1956 01ce 07EE902A 	 fmsr s15,r2
 1957 01d2 F8EEE77A 	 fsitos s15,s15
 1958 01d6 1846     	 mov r0,r3
 1959 01d8 17EE901A 	 fmrs r1,s15
 1960 01dc FFF7FEFF 	 bl pwmWriteServo
 359:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_HELI_TOP]);
 1961              	 .loc 5 359 0
 1962 01e0 FB7B     	 ldrb r3,[r7,#15]
 1963 01e2 5A1C     	 adds r2,r3,#1
 1964 01e4 FA73     	 strb r2,[r7,#15]
 1965 01e6 4B4A     	 ldr r2,.L111+4
 1966 01e8 9288     	 ldrh r2,[r2,#4]
 1967 01ea 12B2     	 sxth r2,r2
 1968 01ec 07EE902A 	 fmsr s15,r2
 1969 01f0 F8EEE77A 	 fsitos s15,s15
 1970 01f4 1846     	 mov r0,r3
 1971 01f6 17EE901A 	 fmrs r1,s15
 1972 01fa FFF7FEFF 	 bl pwmWriteServo
 360:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_HELI_RUD]);
 1973              	 .loc 5 360 0
 1974 01fe FB7B     	 ldrb r3,[r7,#15]
 1975 0200 5A1C     	 adds r2,r3,#1
 1976 0202 FA73     	 strb r2,[r7,#15]
 1977 0204 434A     	 ldr r2,.L111+4
 1978 0206 D288     	 ldrh r2,[r2,#6]
 1979 0208 12B2     	 sxth r2,r2
 1980 020a 07EE902A 	 fmsr s15,r2
 1981 020e F8EEE77A 	 fsitos s15,s15
 1982 0212 1846     	 mov r0,r3
 1983 0214 17EE901A 	 fmrs r1,s15
 1984 0218 FFF7FEFF 	 bl pwmWriteServo
 361:../cleanflight/src/main/flight/servos.c ****         break;
 1985              	 .loc 5 361 0
 1986 021c 55E0     	 b .L100
 1987              	.L95:
 362:../cleanflight/src/main/flight/servos.c **** 
 363:../cleanflight/src/main/flight/servos.c ****     case MIXER_DUALCOPTER:
 364:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_DUALCOPTER_LEFT]);
 1988              	 .loc 5 364 0
 1989 021e FB7B     	 ldrb r3,[r7,#15]
 1990 0220 5A1C     	 adds r2,r3,#1
 1991 0222 FA73     	 strb r2,[r7,#15]
 1992 0224 3B4A     	 ldr r2,.L111+4
 1993 0226 1289     	 ldrh r2,[r2,#8]
 1994 0228 12B2     	 sxth r2,r2
 1995 022a 07EE902A 	 fmsr s15,r2
 1996 022e F8EEE77A 	 fsitos s15,s15
 1997 0232 1846     	 mov r0,r3
 1998 0234 17EE901A 	 fmrs r1,s15
 1999 0238 FFF7FEFF 	 bl pwmWriteServo
 365:../cleanflight/src/main/flight/servos.c ****         pwmWriteServo(servoIndex++, servo[SERVO_DUALCOPTER_RIGHT]);
 2000              	 .loc 5 365 0
 2001 023c FB7B     	 ldrb r3,[r7,#15]
 2002 023e 5A1C     	 adds r2,r3,#1
 2003 0240 FA73     	 strb r2,[r7,#15]
 2004 0242 344A     	 ldr r2,.L111+4
 2005 0244 5289     	 ldrh r2,[r2,#10]
 2006 0246 12B2     	 sxth r2,r2
 2007 0248 07EE902A 	 fmsr s15,r2
 2008 024c F8EEE77A 	 fsitos s15,s15
 2009 0250 1846     	 mov r0,r3
 2010 0252 17EE901A 	 fmrs r1,s15
 2011 0256 FFF7FEFF 	 bl pwmWriteServo
 366:../cleanflight/src/main/flight/servos.c ****         break;
 2012              	 .loc 5 366 0
 2013 025a 36E0     	 b .L100
 2014              	.L96:
 2015              	.LBB12:
 367:../cleanflight/src/main/flight/servos.c **** 
 368:../cleanflight/src/main/flight/servos.c ****     case MIXER_SINGLECOPTER:
 369:../cleanflight/src/main/flight/servos.c ****         for (int i = SERVO_SINGLECOPTER_INDEX_MIN; i <= SERVO_SINGLECOPTER_INDEX_MAX; i++) {
 2016              	 .loc 5 369 0
 2017 025c 0323     	 movs r3,#3
 2018 025e 7B60     	 str r3,[r7,#4]
 2019 0260 13E0     	 b .L103
 2020              	.L104:
 370:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[i]);
 2021              	 .loc 5 370 0 discriminator 3
 2022 0262 FB7B     	 ldrb r3,[r7,#15]
 2023 0264 5A1C     	 adds r2,r3,#1
 2024 0266 FA73     	 strb r2,[r7,#15]
 2025 0268 2A49     	 ldr r1,.L111+4
 2026 026a 7A68     	 ldr r2,[r7,#4]
 2027 026c 31F81220 	 ldrh r2,[r1,r2,lsl#1]
 2028 0270 12B2     	 sxth r2,r2
 2029 0272 07EE902A 	 fmsr s15,r2
 2030 0276 F8EEE77A 	 fsitos s15,s15
 2031 027a 1846     	 mov r0,r3
 2032 027c 17EE901A 	 fmrs r1,s15
 2033 0280 FFF7FEFF 	 bl pwmWriteServo
 369:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[i]);
 2034              	 .loc 5 369 0 discriminator 3
 2035 0284 7B68     	 ldr r3,[r7,#4]
 2036 0286 0133     	 adds r3,r3,#1
 2037 0288 7B60     	 str r3,[r7,#4]
 2038              	.L103:
 369:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[i]);
 2039              	 .loc 5 369 0 is_stmt 0 discriminator 1
 2040 028a 7B68     	 ldr r3,[r7,#4]
 2041 028c 062B     	 cmp r3,#6
 2042 028e E8DD     	 ble .L104
 2043              	.LBE12:
 371:../cleanflight/src/main/flight/servos.c ****         }
 372:../cleanflight/src/main/flight/servos.c ****         break;
 2044              	 .loc 5 372 0 is_stmt 1
 2045 0290 1BE0     	 b .L100
 2046              	.L94:
 2047              	.LBB13:
 373:../cleanflight/src/main/flight/servos.c **** #endif // USE_UNCOMMON_MIXERS
 374:../cleanflight/src/main/flight/servos.c **** 
 375:../cleanflight/src/main/flight/servos.c ****     case MIXER_RX_TO_SERVO:
 376:../cleanflight/src/main/flight/servos.c ****         for (int i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 2048              	 .loc 5 376 0
 2049 0292 0023     	 movs r3,#0
 2050 0294 3B60     	 str r3,[r7]
 2051 0296 13E0     	 b .L105
 2052              	.L106:
 377:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[i]);
 2053              	 .loc 5 377 0 discriminator 3
 2054 0298 FB7B     	 ldrb r3,[r7,#15]
 2055 029a 5A1C     	 adds r2,r3,#1
 2056 029c FA73     	 strb r2,[r7,#15]
 2057 029e 1D49     	 ldr r1,.L111+4
 2058 02a0 3A68     	 ldr r2,[r7]
 2059 02a2 31F81220 	 ldrh r2,[r1,r2,lsl#1]
 2060 02a6 12B2     	 sxth r2,r2
 2061 02a8 07EE902A 	 fmsr s15,r2
 2062 02ac F8EEE77A 	 fsitos s15,s15
 2063 02b0 1846     	 mov r0,r3
 2064 02b2 17EE901A 	 fmrs r1,s15
 2065 02b6 FFF7FEFF 	 bl pwmWriteServo
 376:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[i]);
 2066              	 .loc 5 376 0 discriminator 3
 2067 02ba 3B68     	 ldr r3,[r7]
 2068 02bc 0133     	 adds r3,r3,#1
 2069 02be 3B60     	 str r3,[r7]
 2070              	.L105:
 376:../cleanflight/src/main/flight/servos.c ****             pwmWriteServo(servoIndex++, servo[i]);
 2071              	 .loc 5 376 0 is_stmt 0 discriminator 1
 2072 02c0 3B68     	 ldr r3,[r7]
 2073 02c2 072B     	 cmp r3,#7
 2074 02c4 E8DD     	 ble .L106
 2075              	.LBE13:
 378:../cleanflight/src/main/flight/servos.c ****         }
 379:../cleanflight/src/main/flight/servos.c ****         break;
 2076              	 .loc 5 379 0 is_stmt 1
 2077 02c6 00E0     	 b .L100
 2078              	.L110:
 380:../cleanflight/src/main/flight/servos.c **** 
 381:../cleanflight/src/main/flight/servos.c ****     default:
 382:../cleanflight/src/main/flight/servos.c ****         break;
 2079              	 .loc 5 382 0
 2080 02c8 00BF     	 nop
 2081              	.L100:
 383:../cleanflight/src/main/flight/servos.c ****     }
 384:../cleanflight/src/main/flight/servos.c **** 
 385:../cleanflight/src/main/flight/servos.c ****     // Two servos for SERVO_TILT, if enabled
 386:../cleanflight/src/main/flight/servos.c ****     if (feature(FEATURE_SERVO_TILT) || currentMixerMode == MIXER_GIMBAL) {
 2082              	 .loc 5 386 0
 2083 02ca 2020     	 movs r0,#32
 2084 02cc FFF7FEFF 	 bl feature
 2085 02d0 0346     	 mov r3,r0
 2086 02d2 002B     	 cmp r3,#0
 2087 02d4 03D1     	 bne .L107
 2088              	 .loc 5 386 0 is_stmt 0 discriminator 1
 2089 02d6 0E4B     	 ldr r3,.L111
 2090 02d8 1B78     	 ldrb r3,[r3]
 2091 02da 052B     	 cmp r3,#5
 2092 02dc 06D1     	 bne .L108
 2093              	.L107:
 387:../cleanflight/src/main/flight/servos.c ****         updateGimbalServos(servoIndex);
 2094              	 .loc 5 387 0 is_stmt 1
 2095 02de FB7B     	 ldrb r3,[r7,#15]
 2096 02e0 1846     	 mov r0,r3
 2097 02e2 FFF7FEFF 	 bl updateGimbalServos
 388:../cleanflight/src/main/flight/servos.c ****         servoIndex += 2;
 2098              	 .loc 5 388 0
 2099 02e6 FB7B     	 ldrb r3,[r7,#15]
 2100 02e8 0233     	 adds r3,r3,#2
 2101 02ea FB73     	 strb r3,[r7,#15]
 2102              	.L108:
 389:../cleanflight/src/main/flight/servos.c ****     }
 390:../cleanflight/src/main/flight/servos.c **** 
 391:../cleanflight/src/main/flight/servos.c ****     // forward AUX to remaining servo outputs (not constrained)
 392:../cleanflight/src/main/flight/servos.c ****     if (feature(FEATURE_CHANNEL_FORWARDING)) {
 2103              	 .loc 5 392 0
 2104 02ec 4FF48010 	 mov r0,#1048576
 2105 02f0 FFF7FEFF 	 bl feature
 2106 02f4 0346     	 mov r3,r0
 2107 02f6 002B     	 cmp r3,#0
 2108 02f8 06D0     	 beq .L86
 393:../cleanflight/src/main/flight/servos.c ****         forwardAuxChannelsToServos(servoIndex);
 2109              	 .loc 5 393 0
 2110 02fa FB7B     	 ldrb r3,[r7,#15]
 2111 02fc 1846     	 mov r0,r3
 2112 02fe FFF7FEFF 	 bl forwardAuxChannelsToServos
 394:../cleanflight/src/main/flight/servos.c ****         servoIndex += MAX_AUX_CHANNEL_COUNT;
 2113              	 .loc 5 394 0
 2114 0302 FB7B     	 ldrb r3,[r7,#15]
 2115 0304 0E33     	 adds r3,r3,#14
 2116 0306 FB73     	 strb r3,[r7,#15]
 2117              	.L86:
 395:../cleanflight/src/main/flight/servos.c ****     }
 396:../cleanflight/src/main/flight/servos.c **** }
 2118              	 .loc 5 396 0
 2119 0308 1037     	 adds r7,r7,#16
 2120              	.LCFI90:
 2121              	 .cfi_def_cfa_offset 8
 2122 030a BD46     	 mov sp,r7
 2123              	.LCFI91:
 2124              	 .cfi_def_cfa_register 13
 2125              	 
 2126 030c 80BD     	 pop {r7,pc}
 2127              	.L112:
 2128 030e 00BF     	 .align 2
 2129              	.L111:
 2130 0310 00000000 	 .word currentMixerMode
 2131 0314 00000000 	 .word servo
 2132 0318 00000000 	 .word armingFlags
 2133              	 .cfi_endproc
 2134              	.LFE586:
 2136              	 .section .text.servoMixer,"ax",%progbits
 2137              	 .align 2
 2138              	 .global servoMixer
 2139              	 .thumb
 2140              	 .thumb_func
 2142              	servoMixer:
 2143              	.LFB587:
 397:../cleanflight/src/main/flight/servos.c **** 
 398:../cleanflight/src/main/flight/servos.c **** void servoMixer(void)
 399:../cleanflight/src/main/flight/servos.c **** {
 2144              	 .loc 5 399 0
 2145              	 .cfi_startproc
 2146              	 
 2147              	 
 2148 0000 90B5     	 push {r4,r7,lr}
 2149              	.LCFI92:
 2150              	 .cfi_def_cfa_offset 12
 2151              	 .cfi_offset 4,-12
 2152              	 .cfi_offset 7,-8
 2153              	 .cfi_offset 14,-4
 2154 0002 91B0     	 sub sp,sp,#68
 2155              	.LCFI93:
 2156              	 .cfi_def_cfa_offset 80
 2157 0004 02AF     	 add r7,sp,#8
 2158              	.LCFI94:
 2159              	 .cfi_def_cfa 7,72
 400:../cleanflight/src/main/flight/servos.c ****     int16_t input[INPUT_SOURCE_COUNT]; // Range [-500:+500]
 401:../cleanflight/src/main/flight/servos.c ****     static int16_t currentOutput[MAX_SERVO_RULES];
 402:../cleanflight/src/main/flight/servos.c **** 
 403:../cleanflight/src/main/flight/servos.c ****     if (FLIGHT_MODE(PASSTHRU_MODE)) {
 2160              	 .loc 5 403 0
 2161 0006 884B     	 ldr r3,.L128
 2162 0008 1B88     	 ldrh r3,[r3]
 2163 000a 03F48073 	 and r3,r3,#256
 2164 000e 002B     	 cmp r3,#0
 2165 0010 1ED0     	 beq .L114
 404:../cleanflight/src/main/flight/servos.c ****         // Direct passthru from RX
 405:../cleanflight/src/main/flight/servos.c ****         input[INPUT_STABILIZED_ROLL] = rcCommand[ROLL];
 2166              	 .loc 5 405 0
 2167 0012 864B     	 ldr r3,.L128+4
 2168 0014 D3ED007A 	 flds s15,[r3]
 2169 0018 FDEEE77A 	 ftosizs s15,s15
 2170 001c C7ED017A 	 fsts s15,[r7,#4]
 2171 0020 BB88     	 ldrh r3,[r7,#4]
 2172 0022 9BB2     	 uxth r3,r3
 2173 0024 3B81     	 strh r3,[r7,#8]
 406:../cleanflight/src/main/flight/servos.c ****         input[INPUT_STABILIZED_PITCH] = rcCommand[PITCH];
 2174              	 .loc 5 406 0
 2175 0026 814B     	 ldr r3,.L128+4
 2176 0028 D3ED017A 	 flds s15,[r3,#4]
 2177 002c FDEEE77A 	 ftosizs s15,s15
 2178 0030 C7ED017A 	 fsts s15,[r7,#4]
 2179 0034 BB88     	 ldrh r3,[r7,#4]
 2180 0036 9BB2     	 uxth r3,r3
 2181 0038 7B81     	 strh r3,[r7,#10]
 407:../cleanflight/src/main/flight/servos.c ****         input[INPUT_STABILIZED_YAW] = rcCommand[YAW];
 2182              	 .loc 5 407 0
 2183 003a 7C4B     	 ldr r3,.L128+4
 2184 003c D3ED027A 	 flds s15,[r3,#8]
 2185 0040 FDEEE77A 	 ftosizs s15,s15
 2186 0044 C7ED017A 	 fsts s15,[r7,#4]
 2187 0048 BB88     	 ldrh r3,[r7,#4]
 2188 004a 9BB2     	 uxth r3,r3
 2189 004c BB81     	 strh r3,[r7,#12]
 2190 004e 43E0     	 b .L115
 2191              	.L114:
 408:../cleanflight/src/main/flight/servos.c ****     } else {
 409:../cleanflight/src/main/flight/servos.c ****         // Assisted modes (gyro only or gyro+acc according to AUX configuration in Gui
 410:../cleanflight/src/main/flight/servos.c ****         input[INPUT_STABILIZED_ROLL] = pidData[FD_ROLL].Sum * PID_SERVO_MIXER_SCALING;
 2192              	 .loc 5 410 0
 2193 0050 774B     	 ldr r3,.L128+8
 2194 0052 1B69     	 ldr r3,[r3,#16]
 2195 0054 DFED777A 	 flds s15,.L128+12
 2196 0058 07EE103A 	 fmsr s14,r3
 2197 005c 67EE277A 	 fmuls s15,s14,s15
 2198 0060 FDEEE77A 	 ftosizs s15,s15
 2199 0064 C7ED017A 	 fsts s15,[r7,#4]
 2200 0068 BB88     	 ldrh r3,[r7,#4]
 2201 006a 9BB2     	 uxth r3,r3
 2202 006c 3B81     	 strh r3,[r7,#8]
 411:../cleanflight/src/main/flight/servos.c ****         input[INPUT_STABILIZED_PITCH] = pidData[FD_PITCH].Sum * PID_SERVO_MIXER_SCALING;
 2203              	 .loc 5 411 0
 2204 006e 704B     	 ldr r3,.L128+8
 2205 0070 5B6A     	 ldr r3,[r3,#36]
 2206 0072 DFED707A 	 flds s15,.L128+12
 2207 0076 07EE103A 	 fmsr s14,r3
 2208 007a 67EE277A 	 fmuls s15,s14,s15
 2209 007e FDEEE77A 	 ftosizs s15,s15
 2210 0082 C7ED017A 	 fsts s15,[r7,#4]
 2211 0086 BB88     	 ldrh r3,[r7,#4]
 2212 0088 9BB2     	 uxth r3,r3
 2213 008a 7B81     	 strh r3,[r7,#10]
 412:../cleanflight/src/main/flight/servos.c ****         input[INPUT_STABILIZED_YAW] = pidData[FD_YAW].Sum * PID_SERVO_MIXER_SCALING;
 2214              	 .loc 5 412 0
 2215 008c 684B     	 ldr r3,.L128+8
 2216 008e 9B6B     	 ldr r3,[r3,#56]
 2217 0090 DFED687A 	 flds s15,.L128+12
 2218 0094 07EE103A 	 fmsr s14,r3
 2219 0098 67EE277A 	 fmuls s15,s14,s15
 2220 009c FDEEE77A 	 ftosizs s15,s15
 2221 00a0 C7ED017A 	 fsts s15,[r7,#4]
 2222 00a4 BB88     	 ldrh r3,[r7,#4]
 2223 00a6 9BB2     	 uxth r3,r3
 2224 00a8 BB81     	 strh r3,[r7,#12]
 413:../cleanflight/src/main/flight/servos.c **** 
 414:../cleanflight/src/main/flight/servos.c ****         // Reverse yaw servo when inverted in 3D mode
 415:../cleanflight/src/main/flight/servos.c ****         if (feature(FEATURE_3D) && (rcData[THROTTLE] < rxConfig()->midrc)) {
 2225              	 .loc 5 415 0
 2226 00aa 4FF48050 	 mov r0,#4096
 2227 00ae FFF7FEFF 	 bl feature
 2228 00b2 0346     	 mov r3,r0
 2229 00b4 002B     	 cmp r3,#0
 2230 00b6 0FD0     	 beq .L115
 2231              	 .loc 5 415 0 is_stmt 0 discriminator 1
 2232 00b8 5F4B     	 ldr r3,.L128+16
 2233 00ba DB88     	 ldrh r3,[r3,#6]
 2234 00bc 1CB2     	 sxth r4,r3
 2235 00be FFF7FEFF 	 bl rxConfig
 2236 00c2 0346     	 mov r3,r0
 2237 00c4 5B8A     	 ldrh r3,[r3,#18]
 2238 00c6 9BB2     	 uxth r3,r3
 2239 00c8 9C42     	 cmp r4,r3
 2240 00ca 05DA     	 bge .L115
 416:../cleanflight/src/main/flight/servos.c ****             input[INPUT_STABILIZED_YAW] *= -1;
 2241              	 .loc 5 416 0 is_stmt 1
 2242 00cc BB89     	 ldrh r3,[r7,#12]
 2243 00ce 9BB2     	 uxth r3,r3
 2244 00d0 5B42     	 negs r3,r3
 2245 00d2 9BB2     	 uxth r3,r3
 2246 00d4 9BB2     	 uxth r3,r3
 2247 00d6 BB81     	 strh r3,[r7,#12]
 2248              	.L115:
 417:../cleanflight/src/main/flight/servos.c ****         }
 418:../cleanflight/src/main/flight/servos.c ****     }
 419:../cleanflight/src/main/flight/servos.c **** 
 420:../cleanflight/src/main/flight/servos.c ****     input[INPUT_GIMBAL_PITCH] = scaleRange(attitude.values.pitch, -1800, 1800, -500, +500);
 2249              	 .loc 5 420 0
 2250 00d8 584B     	 ldr r3,.L128+20
 2251 00da B3F90230 	 ldrsh r3,[r3,#2]
 2252 00de 9BB2     	 uxth r3,r3
 2253 00e0 1AB2     	 sxth r2,r3
 2254 00e2 4FF4FA73 	 mov r3,#500
 2255 00e6 0093     	 str r3,[sp]
 2256 00e8 1046     	 mov r0,r2
 2257 00ea 5549     	 ldr r1,.L128+24
 2258 00ec 4FF4E162 	 mov r2,#1800
 2259 00f0 544B     	 ldr r3,.L128+28
 2260 00f2 FFF7FEFF 	 bl scaleRange
 2261 00f6 0346     	 mov r3,r0
 2262 00f8 9BB2     	 uxth r3,r3
 2263 00fa 3B84     	 strh r3,[r7,#32]
 421:../cleanflight/src/main/flight/servos.c ****     input[INPUT_GIMBAL_ROLL] = scaleRange(attitude.values.roll, -1800, 1800, -500, +500);
 2264              	 .loc 5 421 0
 2265 00fc 4F4B     	 ldr r3,.L128+20
 2266 00fe B3F90030 	 ldrsh r3,[r3]
 2267 0102 9BB2     	 uxth r3,r3
 2268 0104 1AB2     	 sxth r2,r3
 2269 0106 4FF4FA73 	 mov r3,#500
 2270 010a 0093     	 str r3,[sp]
 2271 010c 1046     	 mov r0,r2
 2272 010e 4C49     	 ldr r1,.L128+24
 2273 0110 4FF4E162 	 mov r2,#1800
 2274 0114 4B4B     	 ldr r3,.L128+28
 2275 0116 FFF7FEFF 	 bl scaleRange
 2276 011a 0346     	 mov r3,r0
 2277 011c 9BB2     	 uxth r3,r3
 2278 011e 7B84     	 strh r3,[r7,#34]
 422:../cleanflight/src/main/flight/servos.c **** 
 423:../cleanflight/src/main/flight/servos.c ****     input[INPUT_STABILIZED_THROTTLE] = motor[0] - 1000 - 500;  // Since it derives from rcCommand o
 2279              	 .loc 5 423 0
 2280 0120 494B     	 ldr r3,.L128+32
 2281 0122 D3ED007A 	 flds s15,[r3]
 2282 0126 9FED497A 	 flds s14,.L128+36
 2283 012a 77EEC77A 	 fsubs s15,s15,s14
 2284 012e 9FED487A 	 flds s14,.L128+40
 2285 0132 77EEC77A 	 fsubs s15,s15,s14
 2286 0136 FDEEE77A 	 ftosizs s15,s15
 2287 013a C7ED017A 	 fsts s15,[r7,#4]
 2288 013e BB88     	 ldrh r3,[r7,#4]
 2289 0140 9BB2     	 uxth r3,r3
 2290 0142 FB81     	 strh r3,[r7,#14]
 424:../cleanflight/src/main/flight/servos.c **** 
 425:../cleanflight/src/main/flight/servos.c ****     // center the RC input value around the RC middle value
 426:../cleanflight/src/main/flight/servos.c ****     // by subtracting the RC middle value from the RC input value, we get:
 427:../cleanflight/src/main/flight/servos.c ****     // data - middle = input
 428:../cleanflight/src/main/flight/servos.c ****     // 2000 - 1500 = +500
 429:../cleanflight/src/main/flight/servos.c ****     // 1500 - 1500 = 0
 430:../cleanflight/src/main/flight/servos.c ****     // 1000 - 1500 = -500
 431:../cleanflight/src/main/flight/servos.c ****     input[INPUT_RC_ROLL]     = rcData[ROLL]     - rxConfig()->midrc;
 2291              	 .loc 5 431 0
 2292 0144 3C4B     	 ldr r3,.L128+16
 2293 0146 1B88     	 ldrh r3,[r3]
 2294 0148 9CB2     	 uxth r4,r3
 2295 014a FFF7FEFF 	 bl rxConfig
 2296 014e 0346     	 mov r3,r0
 2297 0150 5B8A     	 ldrh r3,[r3,#18]
 2298 0152 9BB2     	 uxth r3,r3
 2299 0154 E31A     	 subs r3,r4,r3
 2300 0156 9BB2     	 uxth r3,r3
 2301 0158 9BB2     	 uxth r3,r3
 2302 015a 3B82     	 strh r3,[r7,#16]
 432:../cleanflight/src/main/flight/servos.c ****     input[INPUT_RC_PITCH]    = rcData[PITCH]    - rxConfig()->midrc;
 2303              	 .loc 5 432 0
 2304 015c 364B     	 ldr r3,.L128+16
 2305 015e 5B88     	 ldrh r3,[r3,#2]
 2306 0160 9CB2     	 uxth r4,r3
 2307 0162 FFF7FEFF 	 bl rxConfig
 2308 0166 0346     	 mov r3,r0
 2309 0168 5B8A     	 ldrh r3,[r3,#18]
 2310 016a 9BB2     	 uxth r3,r3
 2311 016c E31A     	 subs r3,r4,r3
 2312 016e 9BB2     	 uxth r3,r3
 2313 0170 9BB2     	 uxth r3,r3
 2314 0172 7B82     	 strh r3,[r7,#18]
 433:../cleanflight/src/main/flight/servos.c ****     input[INPUT_RC_YAW]      = rcData[YAW]      - rxConfig()->midrc;
 2315              	 .loc 5 433 0
 2316 0174 304B     	 ldr r3,.L128+16
 2317 0176 9B88     	 ldrh r3,[r3,#4]
 2318 0178 9CB2     	 uxth r4,r3
 2319 017a FFF7FEFF 	 bl rxConfig
 2320 017e 0346     	 mov r3,r0
 2321 0180 5B8A     	 ldrh r3,[r3,#18]
 2322 0182 9BB2     	 uxth r3,r3
 2323 0184 E31A     	 subs r3,r4,r3
 2324 0186 9BB2     	 uxth r3,r3
 2325 0188 9BB2     	 uxth r3,r3
 2326 018a BB82     	 strh r3,[r7,#20]
 434:../cleanflight/src/main/flight/servos.c ****     input[INPUT_RC_THROTTLE] = rcData[THROTTLE] - rxConfig()->midrc;
 2327              	 .loc 5 434 0
 2328 018c 2A4B     	 ldr r3,.L128+16
 2329 018e DB88     	 ldrh r3,[r3,#6]
 2330 0190 9CB2     	 uxth r4,r3
 2331 0192 FFF7FEFF 	 bl rxConfig
 2332 0196 0346     	 mov r3,r0
 2333 0198 5B8A     	 ldrh r3,[r3,#18]
 2334 019a 9BB2     	 uxth r3,r3
 2335 019c E31A     	 subs r3,r4,r3
 2336 019e 9BB2     	 uxth r3,r3
 2337 01a0 9BB2     	 uxth r3,r3
 2338 01a2 FB82     	 strh r3,[r7,#22]
 435:../cleanflight/src/main/flight/servos.c ****     input[INPUT_RC_AUX1]     = rcData[AUX1]     - rxConfig()->midrc;
 2339              	 .loc 5 435 0
 2340 01a4 244B     	 ldr r3,.L128+16
 2341 01a6 1B89     	 ldrh r3,[r3,#8]
 2342 01a8 9CB2     	 uxth r4,r3
 2343 01aa FFF7FEFF 	 bl rxConfig
 2344 01ae 0346     	 mov r3,r0
 2345 01b0 5B8A     	 ldrh r3,[r3,#18]
 2346 01b2 9BB2     	 uxth r3,r3
 2347 01b4 E31A     	 subs r3,r4,r3
 2348 01b6 9BB2     	 uxth r3,r3
 2349 01b8 9BB2     	 uxth r3,r3
 2350 01ba 3B83     	 strh r3,[r7,#24]
 436:../cleanflight/src/main/flight/servos.c ****     input[INPUT_RC_AUX2]     = rcData[AUX2]     - rxConfig()->midrc;
 2351              	 .loc 5 436 0
 2352 01bc 1E4B     	 ldr r3,.L128+16
 2353 01be 5B89     	 ldrh r3,[r3,#10]
 2354 01c0 9CB2     	 uxth r4,r3
 2355 01c2 FFF7FEFF 	 bl rxConfig
 2356 01c6 0346     	 mov r3,r0
 2357 01c8 5B8A     	 ldrh r3,[r3,#18]
 2358 01ca 9BB2     	 uxth r3,r3
 2359 01cc E31A     	 subs r3,r4,r3
 2360 01ce 9BB2     	 uxth r3,r3
 2361 01d0 9BB2     	 uxth r3,r3
 2362 01d2 7B83     	 strh r3,[r7,#26]
 437:../cleanflight/src/main/flight/servos.c ****     input[INPUT_RC_AUX3]     = rcData[AUX3]     - rxConfig()->midrc;
 2363              	 .loc 5 437 0
 2364 01d4 184B     	 ldr r3,.L128+16
 2365 01d6 9B89     	 ldrh r3,[r3,#12]
 2366 01d8 9CB2     	 uxth r4,r3
 2367 01da FFF7FEFF 	 bl rxConfig
 2368 01de 0346     	 mov r3,r0
 2369 01e0 5B8A     	 ldrh r3,[r3,#18]
 2370 01e2 9BB2     	 uxth r3,r3
 2371 01e4 E31A     	 subs r3,r4,r3
 2372 01e6 9BB2     	 uxth r3,r3
 2373 01e8 9BB2     	 uxth r3,r3
 2374 01ea BB83     	 strh r3,[r7,#28]
 438:../cleanflight/src/main/flight/servos.c ****     input[INPUT_RC_AUX4]     = rcData[AUX4]     - rxConfig()->midrc;
 2375              	 .loc 5 438 0
 2376 01ec 124B     	 ldr r3,.L128+16
 2377 01ee DB89     	 ldrh r3,[r3,#14]
 2378 01f0 9CB2     	 uxth r4,r3
 2379 01f2 FFF7FEFF 	 bl rxConfig
 2380 01f6 0346     	 mov r3,r0
 2381 01f8 5B8A     	 ldrh r3,[r3,#18]
 2382 01fa 9BB2     	 uxth r3,r3
 2383 01fc E31A     	 subs r3,r4,r3
 2384 01fe 9BB2     	 uxth r3,r3
 2385 0200 9BB2     	 uxth r3,r3
 2386 0202 FB83     	 strh r3,[r7,#30]
 2387              	.LBB14:
 439:../cleanflight/src/main/flight/servos.c **** 
 440:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 2388              	 .loc 5 440 0
 2389 0204 0023     	 movs r3,#0
 2390 0206 7B63     	 str r3,[r7,#52]
 2391 0208 07E0     	 b .L116
 2392              	.L117:
 441:../cleanflight/src/main/flight/servos.c ****         servo[i] = 0;
 2393              	 .loc 5 441 0 discriminator 3
 2394 020a 124A     	 ldr r2,.L128+44
 2395 020c 7B6B     	 ldr r3,[r7,#52]
 2396 020e 0021     	 movs r1,#0
 2397 0210 22F81310 	 strh r1,[r2,r3,lsl#1]
 440:../cleanflight/src/main/flight/servos.c ****         servo[i] = 0;
 2398              	 .loc 5 440 0 discriminator 3
 2399 0214 7B6B     	 ldr r3,[r7,#52]
 2400 0216 0133     	 adds r3,r3,#1
 2401 0218 7B63     	 str r3,[r7,#52]
 2402              	.L116:
 440:../cleanflight/src/main/flight/servos.c ****         servo[i] = 0;
 2403              	 .loc 5 440 0 is_stmt 0 discriminator 1
 2404 021a 7B6B     	 ldr r3,[r7,#52]
 2405 021c 072B     	 cmp r3,#7
 2406 021e F4DD     	 ble .L117
 2407              	.LBE14:
 2408              	.LBB15:
 442:../cleanflight/src/main/flight/servos.c ****     }
 443:../cleanflight/src/main/flight/servos.c **** 
 444:../cleanflight/src/main/flight/servos.c ****     // mix servos according to rules
 445:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < servoRuleCount; i++) {
 2409              	 .loc 5 445 0 is_stmt 1
 2410 0220 0023     	 movs r3,#0
 2411 0222 3B63     	 str r3,[r7,#48]
 2412 0224 4CE1     	 b .L118
 2413              	.L129:
 2414 0226 00BF     	 .align 2
 2415              	.L128:
 2416 0228 00000000 	 .word flightModeFlags
 2417 022c 00000000 	 .word rcCommand
 2418 0230 00000000 	 .word pidData
 2419 0234 3333333F 	 .word 1060320051
 2420 0238 00000000 	 .word rcData
 2421 023c 00000000 	 .word attitude
 2422 0240 F8F8FFFF 	 .word -1800
 2423 0244 0CFEFFFF 	 .word -500
 2424 0248 00000000 	 .word motor
 2425 024c 00007A44 	 .word 1148846080
 2426 0250 0000FA43 	 .word 1140457472
 2427 0254 00000000 	 .word servo
 2428              	.L125:
 446:../cleanflight/src/main/flight/servos.c ****         // consider rule if no box assigned or box is active
 447:../cleanflight/src/main/flight/servos.c ****         if (currentServoMixer[i].box == 0 || IS_RC_MODE_ACTIVE(BOXSERVO1 + currentServoMixer[i].box
 2429              	 .loc 5 447 0
 2430 0258 B949     	 ldr r1,.L130
 2431 025a 3A6B     	 ldr r2,[r7,#48]
 2432 025c 1346     	 mov r3,r2
 2433 025e DB00     	 lsls r3,r3,#3
 2434 0260 9B1A     	 subs r3,r3,r2
 2435 0262 0B44     	 add r3,r3,r1
 2436 0264 9B79     	 ldrb r3,[r3,#6]
 2437 0266 002B     	 cmp r3,#0
 2438 0268 0FD0     	 beq .L119
 2439              	 .loc 5 447 0 is_stmt 0 discriminator 1
 2440 026a B549     	 ldr r1,.L130
 2441 026c 3A6B     	 ldr r2,[r7,#48]
 2442 026e 1346     	 mov r3,r2
 2443 0270 DB00     	 lsls r3,r3,#3
 2444 0272 9B1A     	 subs r3,r3,r2
 2445 0274 0B44     	 add r3,r3,r1
 2446 0276 9B79     	 ldrb r3,[r3,#6]
 2447 0278 1233     	 adds r3,r3,#18
 2448 027a DBB2     	 uxtb r3,r3
 2449 027c 1846     	 mov r0,r3
 2450 027e FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 2451 0282 0346     	 mov r3,r0
 2452 0284 002B     	 cmp r3,#0
 2453 0286 00F01381 	 beq .L120
 2454              	.L119:
 2455              	.LBB16:
 448:../cleanflight/src/main/flight/servos.c ****             uint8_t target = currentServoMixer[i].targetChannel;
 2456              	 .loc 5 448 0 is_stmt 1
 2457 028a AD49     	 ldr r1,.L130
 2458 028c 3A6B     	 ldr r2,[r7,#48]
 2459 028e 1346     	 mov r3,r2
 2460 0290 DB00     	 lsls r3,r3,#3
 2461 0292 9B1A     	 subs r3,r3,r2
 2462 0294 0B44     	 add r3,r3,r1
 2463 0296 1B78     	 ldrb r3,[r3]
 2464 0298 87F82B30 	 strb r3,[r7,#43]
 449:../cleanflight/src/main/flight/servos.c ****             uint8_t from = currentServoMixer[i].inputSource;
 2465              	 .loc 5 449 0
 2466 029c A849     	 ldr r1,.L130
 2467 029e 3A6B     	 ldr r2,[r7,#48]
 2468 02a0 1346     	 mov r3,r2
 2469 02a2 DB00     	 lsls r3,r3,#3
 2470 02a4 9B1A     	 subs r3,r3,r2
 2471 02a6 0B44     	 add r3,r3,r1
 2472 02a8 5B78     	 ldrb r3,[r3,#1]
 2473 02aa 87F82A30 	 strb r3,[r7,#42]
 450:../cleanflight/src/main/flight/servos.c ****             uint16_t servo_width = servoParams(target)->max - servoParams(target)->min;
 2474              	 .loc 5 450 0
 2475 02ae 97F82B30 	 ldrb r3,[r7,#43]
 2476 02b2 1846     	 mov r0,r3
 2477 02b4 FFF7FEFF 	 bl servoParams
 2478 02b8 0346     	 mov r3,r0
 2479 02ba B3F90630 	 ldrsh r3,[r3,#6]
 2480 02be 9BB2     	 uxth r3,r3
 2481 02c0 9CB2     	 uxth r4,r3
 2482 02c2 97F82B30 	 ldrb r3,[r7,#43]
 2483 02c6 1846     	 mov r0,r3
 2484 02c8 FFF7FEFF 	 bl servoParams
 2485 02cc 0346     	 mov r3,r0
 2486 02ce B3F90430 	 ldrsh r3,[r3,#4]
 2487 02d2 9BB2     	 uxth r3,r3
 2488 02d4 9BB2     	 uxth r3,r3
 2489 02d6 E31A     	 subs r3,r4,r3
 2490 02d8 3B85     	 strh r3,[r7,#40]
 451:../cleanflight/src/main/flight/servos.c ****             int16_t min = currentServoMixer[i].min * servo_width / 100 - servo_width / 2;
 2491              	 .loc 5 451 0
 2492 02da 9949     	 ldr r1,.L130
 2493 02dc 3A6B     	 ldr r2,[r7,#48]
 2494 02de 1346     	 mov r3,r2
 2495 02e0 DB00     	 lsls r3,r3,#3
 2496 02e2 9B1A     	 subs r3,r3,r2
 2497 02e4 0B44     	 add r3,r3,r1
 2498 02e6 1B79     	 ldrb r3,[r3,#4]
 2499 02e8 5BB2     	 sxtb r3,r3
 2500 02ea 3A8D     	 ldrh r2,[r7,#40]
 2501 02ec 02FB03F3 	 mul r3,r2,r3
 2502 02f0 944A     	 ldr r2,.L130+4
 2503 02f2 82FB0312 	 smull r1,r2,r2,r3
 2504 02f6 5211     	 asrs r2,r2,#5
 2505 02f8 DB17     	 asrs r3,r3,#31
 2506 02fa D31A     	 subs r3,r2,r3
 2507 02fc 9AB2     	 uxth r2,r3
 2508 02fe 3B8D     	 ldrh r3,[r7,#40]
 2509 0300 5B08     	 lsrs r3,r3,#1
 2510 0302 9BB2     	 uxth r3,r3
 2511 0304 D31A     	 subs r3,r2,r3
 2512 0306 9BB2     	 uxth r3,r3
 2513 0308 FB84     	 strh r3,[r7,#38]
 452:../cleanflight/src/main/flight/servos.c ****             int16_t max = currentServoMixer[i].max * servo_width / 100 - servo_width / 2;
 2514              	 .loc 5 452 0
 2515 030a 8D49     	 ldr r1,.L130
 2516 030c 3A6B     	 ldr r2,[r7,#48]
 2517 030e 1346     	 mov r3,r2
 2518 0310 DB00     	 lsls r3,r3,#3
 2519 0312 9B1A     	 subs r3,r3,r2
 2520 0314 0B44     	 add r3,r3,r1
 2521 0316 5B79     	 ldrb r3,[r3,#5]
 2522 0318 5BB2     	 sxtb r3,r3
 2523 031a 3A8D     	 ldrh r2,[r7,#40]
 2524 031c 02FB03F3 	 mul r3,r2,r3
 2525 0320 884A     	 ldr r2,.L130+4
 2526 0322 82FB0312 	 smull r1,r2,r2,r3
 2527 0326 5211     	 asrs r2,r2,#5
 2528 0328 DB17     	 asrs r3,r3,#31
 2529 032a D31A     	 subs r3,r2,r3
 2530 032c 9AB2     	 uxth r2,r3
 2531 032e 3B8D     	 ldrh r3,[r7,#40]
 2532 0330 5B08     	 lsrs r3,r3,#1
 2533 0332 9BB2     	 uxth r3,r3
 2534 0334 D31A     	 subs r3,r2,r3
 2535 0336 9BB2     	 uxth r3,r3
 2536 0338 BB84     	 strh r3,[r7,#36]
 453:../cleanflight/src/main/flight/servos.c **** 
 454:../cleanflight/src/main/flight/servos.c ****             if (currentServoMixer[i].speed == 0)
 2537              	 .loc 5 454 0
 2538 033a 8149     	 ldr r1,.L130
 2539 033c 3A6B     	 ldr r2,[r7,#48]
 2540 033e 1346     	 mov r3,r2
 2541 0340 DB00     	 lsls r3,r3,#3
 2542 0342 9B1A     	 subs r3,r3,r2
 2543 0344 0B44     	 add r3,r3,r1
 2544 0346 DB78     	 ldrb r3,[r3,#3]
 2545 0348 002B     	 cmp r3,#0
 2546 034a 0CD1     	 bne .L121
 455:../cleanflight/src/main/flight/servos.c ****                 currentOutput[i] = input[from];
 2547              	 .loc 5 455 0
 2548 034c 97F82A30 	 ldrb r3,[r7,#42]
 2549 0350 5B00     	 lsls r3,r3,#1
 2550 0352 07F13802 	 add r2,r7,#56
 2551 0356 1344     	 add r3,r3,r2
 2552 0358 33F8301C 	 ldrh r1,[r3,#-48]
 2553 035c 7A4A     	 ldr r2,.L130+8
 2554 035e 3B6B     	 ldr r3,[r7,#48]
 2555 0360 22F81310 	 strh r1,[r2,r3,lsl#1]
 2556 0364 6AE0     	 b .L122
 2557              	.L121:
 456:../cleanflight/src/main/flight/servos.c ****             else {
 457:../cleanflight/src/main/flight/servos.c ****                 if (currentOutput[i] < input[from])
 2558              	 .loc 5 457 0
 2559 0366 784A     	 ldr r2,.L130+8
 2560 0368 3B6B     	 ldr r3,[r7,#48]
 2561 036a 32F81320 	 ldrh r2,[r2,r3,lsl#1]
 2562 036e 97F82A30 	 ldrb r3,[r7,#42]
 2563 0372 5B00     	 lsls r3,r3,#1
 2564 0374 07F13801 	 add r1,r7,#56
 2565 0378 0B44     	 add r3,r3,r1
 2566 037a 33F8303C 	 ldrh r3,[r3,#-48]
 2567 037e 12B2     	 sxth r2,r2
 2568 0380 1BB2     	 sxth r3,r3
 2569 0382 9A42     	 cmp r2,r3
 2570 0384 26DA     	 bge .L123
 458:../cleanflight/src/main/flight/servos.c ****                     currentOutput[i] = constrain(currentOutput[i] + currentServoMixer[i].speed, cur
 2571              	 .loc 5 458 0
 2572 0386 704A     	 ldr r2,.L130+8
 2573 0388 3B6B     	 ldr r3,[r7,#48]
 2574 038a 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2575 038e 19B2     	 sxth r1,r3
 2576 0390 6B48     	 ldr r0,.L130
 2577 0392 3A6B     	 ldr r2,[r7,#48]
 2578 0394 1346     	 mov r3,r2
 2579 0396 DB00     	 lsls r3,r3,#3
 2580 0398 9B1A     	 subs r3,r3,r2
 2581 039a 0344     	 add r3,r3,r0
 2582 039c DB78     	 ldrb r3,[r3,#3]
 2583 039e 1944     	 add r1,r1,r3
 2584 03a0 694A     	 ldr r2,.L130+8
 2585 03a2 3B6B     	 ldr r3,[r7,#48]
 2586 03a4 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2587 03a8 1AB2     	 sxth r2,r3
 2588 03aa 97F82A30 	 ldrb r3,[r7,#42]
 2589 03ae 5B00     	 lsls r3,r3,#1
 2590 03b0 07F13800 	 add r0,r7,#56
 2591 03b4 0344     	 add r3,r3,r0
 2592 03b6 33F8303C 	 ldrh r3,[r3,#-48]
 2593 03ba 1BB2     	 sxth r3,r3
 2594 03bc 0846     	 mov r0,r1
 2595 03be 1146     	 mov r1,r2
 2596 03c0 1A46     	 mov r2,r3
 2597 03c2 FFF7FEFF 	 bl constrain
 2598 03c6 0346     	 mov r3,r0
 2599 03c8 99B2     	 uxth r1,r3
 2600 03ca 5F4A     	 ldr r2,.L130+8
 2601 03cc 3B6B     	 ldr r3,[r7,#48]
 2602 03ce 22F81310 	 strh r1,[r2,r3,lsl#1]
 2603 03d2 33E0     	 b .L122
 2604              	.L123:
 459:../cleanflight/src/main/flight/servos.c ****                 else if (currentOutput[i] > input[from])
 2605              	 .loc 5 459 0
 2606 03d4 5C4A     	 ldr r2,.L130+8
 2607 03d6 3B6B     	 ldr r3,[r7,#48]
 2608 03d8 32F81320 	 ldrh r2,[r2,r3,lsl#1]
 2609 03dc 97F82A30 	 ldrb r3,[r7,#42]
 2610 03e0 5B00     	 lsls r3,r3,#1
 2611 03e2 07F13801 	 add r1,r7,#56
 2612 03e6 0B44     	 add r3,r3,r1
 2613 03e8 33F8303C 	 ldrh r3,[r3,#-48]
 2614 03ec 12B2     	 sxth r2,r2
 2615 03ee 1BB2     	 sxth r3,r3
 2616 03f0 9A42     	 cmp r2,r3
 2617 03f2 23DD     	 ble .L122
 460:../cleanflight/src/main/flight/servos.c ****                     currentOutput[i] = constrain(currentOutput[i] - currentServoMixer[i].speed, inp
 2618              	 .loc 5 460 0
 2619 03f4 544A     	 ldr r2,.L130+8
 2620 03f6 3B6B     	 ldr r3,[r7,#48]
 2621 03f8 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2622 03fc 19B2     	 sxth r1,r3
 2623 03fe 5048     	 ldr r0,.L130
 2624 0400 3A6B     	 ldr r2,[r7,#48]
 2625 0402 1346     	 mov r3,r2
 2626 0404 DB00     	 lsls r3,r3,#3
 2627 0406 9B1A     	 subs r3,r3,r2
 2628 0408 0344     	 add r3,r3,r0
 2629 040a DB78     	 ldrb r3,[r3,#3]
 2630 040c C81A     	 subs r0,r1,r3
 2631 040e 97F82A30 	 ldrb r3,[r7,#42]
 2632 0412 5B00     	 lsls r3,r3,#1
 2633 0414 07F13802 	 add r2,r7,#56
 2634 0418 1344     	 add r3,r3,r2
 2635 041a 33F8303C 	 ldrh r3,[r3,#-48]
 2636 041e 19B2     	 sxth r1,r3
 2637 0420 494A     	 ldr r2,.L130+8
 2638 0422 3B6B     	 ldr r3,[r7,#48]
 2639 0424 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2640 0428 1BB2     	 sxth r3,r3
 2641 042a 1A46     	 mov r2,r3
 2642 042c FFF7FEFF 	 bl constrain
 2643 0430 0346     	 mov r3,r0
 2644 0432 99B2     	 uxth r1,r3
 2645 0434 444A     	 ldr r2,.L130+8
 2646 0436 3B6B     	 ldr r3,[r7,#48]
 2647 0438 22F81310 	 strh r1,[r2,r3,lsl#1]
 2648              	.L122:
 461:../cleanflight/src/main/flight/servos.c ****             }
 462:../cleanflight/src/main/flight/servos.c **** 
 463:../cleanflight/src/main/flight/servos.c ****             servo[target] += servoDirection(target, from) * constrain(((int32_t)currentOutput[i] * 
 2649              	 .loc 5 463 0
 2650 043c 97F82B20 	 ldrb r2,[r7,#43]
 2651 0440 97F82A30 	 ldrb r3,[r7,#42]
 2652 0444 1046     	 mov r0,r2
 2653 0446 1946     	 mov r1,r3
 2654 0448 FFF7FEFF 	 bl servoDirection
 2655 044c 0446     	 mov r4,r0
 2656 044e 3E4A     	 ldr r2,.L130+8
 2657 0450 3B6B     	 ldr r3,[r7,#48]
 2658 0452 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2659 0456 19B2     	 sxth r1,r3
 2660 0458 3948     	 ldr r0,.L130
 2661 045a 3A6B     	 ldr r2,[r7,#48]
 2662 045c 1346     	 mov r3,r2
 2663 045e DB00     	 lsls r3,r3,#3
 2664 0460 9B1A     	 subs r3,r3,r2
 2665 0462 0344     	 add r3,r3,r0
 2666 0464 9B78     	 ldrb r3,[r3,#2]
 2667 0466 5BB2     	 sxtb r3,r3
 2668 0468 03FB01F3 	 mul r3,r3,r1
 2669 046c 354A     	 ldr r2,.L130+4
 2670 046e 82FB0312 	 smull r1,r2,r2,r3
 2671 0472 5211     	 asrs r2,r2,#5
 2672 0474 DB17     	 asrs r3,r3,#31
 2673 0476 D11A     	 subs r1,r2,r3
 2674 0478 B7F92620 	 ldrsh r2,[r7,#38]
 2675 047c B7F92430 	 ldrsh r3,[r7,#36]
 2676 0480 0846     	 mov r0,r1
 2677 0482 1146     	 mov r1,r2
 2678 0484 1A46     	 mov r2,r3
 2679 0486 FFF7FEFF 	 bl constrain
 2680 048a 0346     	 mov r3,r0
 2681 048c 03FB04F0 	 mul r0,r3,r4
 2682 0490 97F82B30 	 ldrb r3,[r7,#43]
 2683 0494 97F82B20 	 ldrb r2,[r7,#43]
 2684 0498 2C49     	 ldr r1,.L130+12
 2685 049a 31F81220 	 ldrh r2,[r1,r2,lsl#1]
 2686 049e 91B2     	 uxth r1,r2
 2687 04a0 82B2     	 uxth r2,r0
 2688 04a2 0A44     	 add r2,r2,r1
 2689 04a4 92B2     	 uxth r2,r2
 2690 04a6 91B2     	 uxth r1,r2
 2691 04a8 284A     	 ldr r2,.L130+12
 2692 04aa 22F81310 	 strh r1,[r2,r3,lsl#1]
 2693              	.LBE16:
 447:../cleanflight/src/main/flight/servos.c ****             uint8_t target = currentServoMixer[i].targetChannel;
 2694              	 .loc 5 447 0
 2695 04ae 04E0     	 b .L124
 2696              	.L120:
 464:../cleanflight/src/main/flight/servos.c ****         } else {
 465:../cleanflight/src/main/flight/servos.c ****             currentOutput[i] = 0;
 2697              	 .loc 5 465 0
 2698 04b0 254A     	 ldr r2,.L130+8
 2699 04b2 3B6B     	 ldr r3,[r7,#48]
 2700 04b4 0021     	 movs r1,#0
 2701 04b6 22F81310 	 strh r1,[r2,r3,lsl#1]
 2702              	.L124:
 445:../cleanflight/src/main/flight/servos.c ****         // consider rule if no box assigned or box is active
 2703              	 .loc 5 445 0 discriminator 2
 2704 04ba 3B6B     	 ldr r3,[r7,#48]
 2705 04bc 0133     	 adds r3,r3,#1
 2706 04be 3B63     	 str r3,[r7,#48]
 2707              	.L118:
 445:../cleanflight/src/main/flight/servos.c ****         // consider rule if no box assigned or box is active
 2708              	 .loc 5 445 0 is_stmt 0 discriminator 1
 2709 04c0 234B     	 ldr r3,.L130+16
 2710 04c2 1B78     	 ldrb r3,[r3]
 2711 04c4 1A46     	 mov r2,r3
 2712 04c6 3B6B     	 ldr r3,[r7,#48]
 2713 04c8 9A42     	 cmp r2,r3
 2714 04ca 3FF7C5AE 	 bgt .L125
 2715              	.LBE15:
 2716              	.LBB17:
 466:../cleanflight/src/main/flight/servos.c ****         }
 467:../cleanflight/src/main/flight/servos.c ****     }
 468:../cleanflight/src/main/flight/servos.c **** 
 469:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 2717              	 .loc 5 469 0 is_stmt 1
 2718 04ce 0023     	 movs r3,#0
 2719 04d0 FB62     	 str r3,[r7,#44]
 2720 04d2 2EE0     	 b .L126
 2721              	.L127:
 470:../cleanflight/src/main/flight/servos.c ****         servo[i] = ((int32_t)servoParams(i)->rate * servo[i]) / 100L;
 2722              	 .loc 5 470 0 discriminator 3
 2723 04d4 F86A     	 ldr r0,[r7,#44]
 2724 04d6 FFF7FEFF 	 bl servoParams
 2725 04da 0346     	 mov r3,r0
 2726 04dc 9B7A     	 ldrb r3,[r3,#10]
 2727 04de 5BB2     	 sxtb r3,r3
 2728 04e0 1A49     	 ldr r1,.L130+12
 2729 04e2 FA6A     	 ldr r2,[r7,#44]
 2730 04e4 31F81220 	 ldrh r2,[r1,r2,lsl#1]
 2731 04e8 12B2     	 sxth r2,r2
 2732 04ea 02FB03F3 	 mul r3,r2,r3
 2733 04ee 154A     	 ldr r2,.L130+4
 2734 04f0 82FB0312 	 smull r1,r2,r2,r3
 2735 04f4 5211     	 asrs r2,r2,#5
 2736 04f6 DB17     	 asrs r3,r3,#31
 2737 04f8 D31A     	 subs r3,r2,r3
 2738 04fa 99B2     	 uxth r1,r3
 2739 04fc 134A     	 ldr r2,.L130+12
 2740 04fe FB6A     	 ldr r3,[r7,#44]
 2741 0500 22F81310 	 strh r1,[r2,r3,lsl#1]
 471:../cleanflight/src/main/flight/servos.c ****         servo[i] += determineServoMiddleOrForwardFromChannel(i);
 2742              	 .loc 5 471 0 discriminator 3
 2743 0504 FB6A     	 ldr r3,[r7,#44]
 2744 0506 DBB2     	 uxtb r3,r3
 2745 0508 1846     	 mov r0,r3
 2746 050a FFF7FEFF 	 bl determineServoMiddleOrForwardFromChannel
 2747 050e 0346     	 mov r3,r0
 2748 0510 1946     	 mov r1,r3
 2749 0512 0E4A     	 ldr r2,.L130+12
 2750 0514 FB6A     	 ldr r3,[r7,#44]
 2751 0516 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2752 051a 9AB2     	 uxth r2,r3
 2753 051c 8BB2     	 uxth r3,r1
 2754 051e 1344     	 add r3,r3,r2
 2755 0520 9BB2     	 uxth r3,r3
 2756 0522 99B2     	 uxth r1,r3
 2757 0524 094A     	 ldr r2,.L130+12
 2758 0526 FB6A     	 ldr r3,[r7,#44]
 2759 0528 22F81310 	 strh r1,[r2,r3,lsl#1]
 469:../cleanflight/src/main/flight/servos.c ****         servo[i] = ((int32_t)servoParams(i)->rate * servo[i]) / 100L;
 2760              	 .loc 5 469 0 discriminator 3
 2761 052c FB6A     	 ldr r3,[r7,#44]
 2762 052e 0133     	 adds r3,r3,#1
 2763 0530 FB62     	 str r3,[r7,#44]
 2764              	.L126:
 469:../cleanflight/src/main/flight/servos.c ****         servo[i] = ((int32_t)servoParams(i)->rate * servo[i]) / 100L;
 2765              	 .loc 5 469 0 is_stmt 0 discriminator 1
 2766 0532 FB6A     	 ldr r3,[r7,#44]
 2767 0534 072B     	 cmp r3,#7
 2768 0536 CDDD     	 ble .L127
 2769              	.LBE17:
 472:../cleanflight/src/main/flight/servos.c ****     }
 473:../cleanflight/src/main/flight/servos.c **** }
 2770              	 .loc 5 473 0 is_stmt 1
 2771 0538 3C37     	 adds r7,r7,#60
 2772              	.LCFI95:
 2773              	 .cfi_def_cfa_offset 12
 2774 053a BD46     	 mov sp,r7
 2775              	.LCFI96:
 2776              	 .cfi_def_cfa_register 13
 2777              	 
 2778 053c 90BD     	 pop {r4,r7,pc}
 2779              	.L131:
 2780 053e 00BF     	 .align 2
 2781              	.L130:
 2782 0540 00000000 	 .word currentServoMixer
 2783 0544 1F85EB51 	 .word 1374389535
 2784 0548 00000000 	 .word currentOutput.13807
 2785 054c 00000000 	 .word servo
 2786 0550 00000000 	 .word servoRuleCount
 2787              	 .cfi_endproc
 2788              	.LFE587:
 2790              	 .section .text.servoTable,"ax",%progbits
 2791              	 .align 2
 2792              	 .thumb
 2793              	 .thumb_func
 2795              	servoTable:
 2796              	.LFB588:
 474:../cleanflight/src/main/flight/servos.c **** 
 475:../cleanflight/src/main/flight/servos.c **** 
 476:../cleanflight/src/main/flight/servos.c **** static void servoTable(void)
 477:../cleanflight/src/main/flight/servos.c **** {
 2797              	 .loc 5 477 0
 2798              	 .cfi_startproc
 2799              	 
 2800              	 
 2801 0000 B0B5     	 push {r4,r5,r7,lr}
 2802              	.LCFI97:
 2803              	 .cfi_def_cfa_offset 16
 2804              	 .cfi_offset 4,-16
 2805              	 .cfi_offset 5,-12
 2806              	 .cfi_offset 7,-8
 2807              	 .cfi_offset 14,-4
 2808 0002 84B0     	 sub sp,sp,#16
 2809              	.LCFI98:
 2810              	 .cfi_def_cfa_offset 32
 2811 0004 00AF     	 add r7,sp,#0
 2812              	.LCFI99:
 2813              	 .cfi_def_cfa_register 7
 478:../cleanflight/src/main/flight/servos.c ****     // airplane / servo mixes
 479:../cleanflight/src/main/flight/servos.c ****     switch (currentMixerMode) {
 2814              	 .loc 5 479 0
 2815 0006 A34B     	 ldr r3,.L146
 2816 0008 1B78     	 ldrb r3,[r3]
 2817 000a 013B     	 subs r3,r3,#1
 2818 000c 182B     	 cmp r3,#24
 2819 000e 56D8     	 bhi .L145
 2820 0010 01A2     	 adr r2,.L135
 2821 0012 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2822 0016 00BF     	 .p2align 2
 2823              	.L135:
 2824 0018 7D000000 	 .word .L134+1
 2825 001c BF000000 	 .word .L145+1
 2826 0020 BF000000 	 .word .L145+1
 2827 0024 83000000 	 .word .L136+1
 2828 0028 83000000 	 .word .L136+1
 2829 002c BF000000 	 .word .L145+1
 2830 0030 BF000000 	 .word .L145+1
 2831 0034 83000000 	 .word .L136+1
 2832 0038 BF000000 	 .word .L145+1
 2833 003c BF000000 	 .word .L145+1
 2834 0040 BF000000 	 .word .L145+1
 2835 0044 BF000000 	 .word .L145+1
 2836 0048 BF000000 	 .word .L145+1
 2837 004c 83000000 	 .word .L136+1
 2838 0050 83000000 	 .word .L136+1
 2839 0054 BF000000 	 .word .L145+1
 2840 0058 BF000000 	 .word .L145+1
 2841 005c BF000000 	 .word .L145+1
 2842 0060 89000000 	 .word .L137+1
 2843 0064 83000000 	 .word .L136+1
 2844 0068 83000000 	 .word .L136+1
 2845 006c BF000000 	 .word .L145+1
 2846 0070 BF000000 	 .word .L145+1
 2847 0074 83000000 	 .word .L136+1
 2848 0078 7D000000 	 .word .L134+1
 2849              	 .p2align 1
 2850              	.L134:
 480:../cleanflight/src/main/flight/servos.c ****     case MIXER_CUSTOM_TRI:
 481:../cleanflight/src/main/flight/servos.c ****     case MIXER_TRI:
 482:../cleanflight/src/main/flight/servos.c ****         servosTricopterMixer();
 2851              	 .loc 5 482 0
 2852 007c FFF7FEFF 	 bl servosTricopterMixer
 483:../cleanflight/src/main/flight/servos.c ****         break;
 2853              	 .loc 5 483 0
 2854 0080 1EE0     	 b .L138
 2855              	.L136:
 484:../cleanflight/src/main/flight/servos.c ****     case MIXER_CUSTOM_AIRPLANE:
 485:../cleanflight/src/main/flight/servos.c ****     case MIXER_FLYING_WING:
 486:../cleanflight/src/main/flight/servos.c ****     case MIXER_AIRPLANE:
 487:../cleanflight/src/main/flight/servos.c ****     case MIXER_BICOPTER:
 488:../cleanflight/src/main/flight/servos.c ****     case MIXER_DUALCOPTER:
 489:../cleanflight/src/main/flight/servos.c ****     case MIXER_SINGLECOPTER:
 490:../cleanflight/src/main/flight/servos.c ****     case MIXER_HELI_120_CCPM:
 491:../cleanflight/src/main/flight/servos.c ****     case MIXER_GIMBAL:
 492:../cleanflight/src/main/flight/servos.c ****         servoMixer();
 2856              	 .loc 5 492 0
 2857 0082 FFF7FEFF 	 bl servoMixer
 493:../cleanflight/src/main/flight/servos.c ****         break;
 2858              	 .loc 5 493 0
 2859 0086 1BE0     	 b .L138
 2860              	.L137:
 2861              	.LBB18:
 494:../cleanflight/src/main/flight/servos.c **** 
 495:../cleanflight/src/main/flight/servos.c ****     case MIXER_RX_TO_SERVO:
 496:../cleanflight/src/main/flight/servos.c ****         for (int i = 0; i < MIN(MAX_SUPPORTED_SERVOS, MAX_SUPPORTED_RC_CHANNEL_COUNT); i++) {
 2862              	 .loc 5 496 0
 2863 0088 0023     	 movs r3,#0
 2864 008a FB60     	 str r3,[r7,#12]
 2865 008c 0AE0     	 b .L139
 2866              	.L140:
 497:../cleanflight/src/main/flight/servos.c ****             servo[i] = rcData[i];
 2867              	 .loc 5 497 0 discriminator 3
 2868 008e 824A     	 ldr r2,.L146+4
 2869 0090 FB68     	 ldr r3,[r7,#12]
 2870 0092 32F81310 	 ldrh r1,[r2,r3,lsl#1]
 2871 0096 814A     	 ldr r2,.L146+8
 2872 0098 FB68     	 ldr r3,[r7,#12]
 2873 009a 22F81310 	 strh r1,[r2,r3,lsl#1]
 496:../cleanflight/src/main/flight/servos.c ****             servo[i] = rcData[i];
 2874              	 .loc 5 496 0 discriminator 3
 2875 009e FB68     	 ldr r3,[r7,#12]
 2876 00a0 0133     	 adds r3,r3,#1
 2877 00a2 FB60     	 str r3,[r7,#12]
 2878              	.L139:
 2879              	.LBB19:
 496:../cleanflight/src/main/flight/servos.c ****             servo[i] = rcData[i];
 2880              	 .loc 5 496 0 is_stmt 0 discriminator 1
 2881 00a4 0823     	 movs r3,#8
 2882 00a6 7B60     	 str r3,[r7,#4]
 2883 00a8 1223     	 movs r3,#18
 2884 00aa 3B60     	 str r3,[r7]
 2885 00ac 3A68     	 ldr r2,[r7]
 2886 00ae 7B68     	 ldr r3,[r7,#4]
 2887 00b0 9A42     	 cmp r2,r3
 2888 00b2 A8BF     	 it ge
 2889 00b4 1A46     	 movge r2,r3
 2890              	.LBE19:
 2891 00b6 FB68     	 ldr r3,[r7,#12]
 2892 00b8 9A42     	 cmp r2,r3
 2893 00ba E8DC     	 bgt .L140
 2894              	.LBE18:
 498:../cleanflight/src/main/flight/servos.c ****         }
 499:../cleanflight/src/main/flight/servos.c ****         break;
 2895              	 .loc 5 499 0 is_stmt 1
 2896 00bc 00E0     	 b .L138
 2897              	.L145:
 500:../cleanflight/src/main/flight/servos.c **** 
 501:../cleanflight/src/main/flight/servos.c ****     /*
 502:../cleanflight/src/main/flight/servos.c ****     case MIXER_GIMBAL:
 503:../cleanflight/src/main/flight/servos.c ****         servo[SERVO_GIMBAL_PITCH] = (((int32_t)servoParams(SERVO_GIMBAL_PITCH)->rate * attitude.val
 504:../cleanflight/src/main/flight/servos.c ****         servo[SERVO_GIMBAL_ROLL] = (((int32_t)servoParams(SERVO_GIMBAL_ROLL)->rate * attitude.value
 505:../cleanflight/src/main/flight/servos.c ****         break;
 506:../cleanflight/src/main/flight/servos.c ****     */
 507:../cleanflight/src/main/flight/servos.c **** 
 508:../cleanflight/src/main/flight/servos.c ****     default:
 509:../cleanflight/src/main/flight/servos.c ****         break;
 2898              	 .loc 5 509 0
 2899 00be 00BF     	 nop
 2900              	.L138:
 510:../cleanflight/src/main/flight/servos.c ****     }
 511:../cleanflight/src/main/flight/servos.c **** 
 512:../cleanflight/src/main/flight/servos.c ****     // camera stabilization
 513:../cleanflight/src/main/flight/servos.c ****     if (feature(FEATURE_SERVO_TILT)) {
 2901              	 .loc 5 513 0
 2902 00c0 2020     	 movs r0,#32
 2903 00c2 FFF7FEFF 	 bl feature
 2904 00c6 0346     	 mov r3,r0
 2905 00c8 002B     	 cmp r3,#0
 2906 00ca 00F0B680 	 beq .L141
 514:../cleanflight/src/main/flight/servos.c ****         // center at fixed position, or vary either pitch or roll by RC channel
 515:../cleanflight/src/main/flight/servos.c ****         servo[SERVO_GIMBAL_PITCH] = determineServoMiddleOrForwardFromChannel(SERVO_GIMBAL_PITCH);
 2907              	 .loc 5 515 0
 2908 00ce 0020     	 movs r0,#0
 2909 00d0 FFF7FEFF 	 bl determineServoMiddleOrForwardFromChannel
 2910 00d4 0346     	 mov r3,r0
 2911 00d6 1A46     	 mov r2,r3
 2912 00d8 704B     	 ldr r3,.L146+8
 2913 00da 1A80     	 strh r2,[r3]
 516:../cleanflight/src/main/flight/servos.c ****         servo[SERVO_GIMBAL_ROLL] = determineServoMiddleOrForwardFromChannel(SERVO_GIMBAL_ROLL);
 2914              	 .loc 5 516 0
 2915 00dc 0120     	 movs r0,#1
 2916 00de FFF7FEFF 	 bl determineServoMiddleOrForwardFromChannel
 2917 00e2 0346     	 mov r3,r0
 2918 00e4 1A46     	 mov r2,r3
 2919 00e6 6D4B     	 ldr r3,.L146+8
 2920 00e8 5A80     	 strh r2,[r3,#2]
 517:../cleanflight/src/main/flight/servos.c **** 
 518:../cleanflight/src/main/flight/servos.c ****         if (IS_RC_MODE_ACTIVE(BOXCAMSTAB)) {
 2921              	 .loc 5 518 0
 2922 00ea 0D20     	 movs r0,#13
 2923 00ec FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 2924 00f0 0346     	 mov r3,r0
 2925 00f2 002B     	 cmp r3,#0
 2926 00f4 00F0A180 	 beq .L141
 519:../cleanflight/src/main/flight/servos.c ****             if (gimbalConfig()->mode == GIMBAL_MODE_MIXTILT) {
 2927              	 .loc 5 519 0
 2928 00f8 FFF7FEFF 	 bl gimbalConfig
 2929 00fc 0346     	 mov r3,r0
 2930 00fe 1B78     	 ldrb r3,[r3]
 2931 0100 012B     	 cmp r3,#1
 2932 0102 62D1     	 bne .L142
 520:../cleanflight/src/main/flight/servos.c ****                 servo[SERVO_GIMBAL_PITCH] -= (-(int32_t)servoParams(SERVO_GIMBAL_PITCH)->rate) * at
 2933              	 .loc 5 520 0
 2934 0104 0020     	 movs r0,#0
 2935 0106 FFF7FEFF 	 bl servoParams
 2936 010a 0346     	 mov r3,r0
 2937 010c 9B7A     	 ldrb r3,[r3,#10]
 2938 010e 5BB2     	 sxtb r3,r3
 2939 0110 5B42     	 negs r3,r3
 2940 0112 634A     	 ldr r2,.L146+12
 2941 0114 B2F90220 	 ldrsh r2,[r2,#2]
 2942 0118 92B2     	 uxth r2,r2
 2943 011a 12B2     	 sxth r2,r2
 2944 011c 02FB03F3 	 mul r3,r2,r3
 2945 0120 604A     	 ldr r2,.L146+16
 2946 0122 82FB0312 	 smull r1,r2,r2,r3
 2947 0126 1211     	 asrs r2,r2,#4
 2948 0128 DB17     	 asrs r3,r3,#31
 2949 012a D41A     	 subs r4,r2,r3
 2950 012c 0120     	 movs r0,#1
 2951 012e FFF7FEFF 	 bl servoParams
 2952 0132 0346     	 mov r3,r0
 2953 0134 9B7A     	 ldrb r3,[r3,#10]
 2954 0136 5BB2     	 sxtb r3,r3
 2955 0138 594A     	 ldr r2,.L146+12
 2956 013a B2F90020 	 ldrsh r2,[r2]
 2957 013e 92B2     	 uxth r2,r2
 2958 0140 12B2     	 sxth r2,r2
 2959 0142 02FB03F3 	 mul r3,r2,r3
 2960 0146 574A     	 ldr r2,.L146+16
 2961 0148 82FB0312 	 smull r1,r2,r2,r3
 2962 014c 1211     	 asrs r2,r2,#4
 2963 014e DB17     	 asrs r3,r3,#31
 2964 0150 D31A     	 subs r3,r2,r3
 2965 0152 E11A     	 subs r1,r4,r3
 2966 0154 514B     	 ldr r3,.L146+8
 2967 0156 1B88     	 ldrh r3,[r3]
 2968 0158 9AB2     	 uxth r2,r3
 2969 015a 8BB2     	 uxth r3,r1
 2970 015c D31A     	 subs r3,r2,r3
 2971 015e 9BB2     	 uxth r3,r3
 2972 0160 9AB2     	 uxth r2,r3
 2973 0162 4E4B     	 ldr r3,.L146+8
 2974 0164 1A80     	 strh r2,[r3]
 521:../cleanflight/src/main/flight/servos.c ****                 servo[SERVO_GIMBAL_ROLL] += (-(int32_t)servoParams(SERVO_GIMBAL_PITCH)->rate) * att
 2975              	 .loc 5 521 0
 2976 0166 0020     	 movs r0,#0
 2977 0168 FFF7FEFF 	 bl servoParams
 2978 016c 0346     	 mov r3,r0
 2979 016e 9B7A     	 ldrb r3,[r3,#10]
 2980 0170 5BB2     	 sxtb r3,r3
 2981 0172 5B42     	 negs r3,r3
 2982 0174 4A4A     	 ldr r2,.L146+12
 2983 0176 B2F90220 	 ldrsh r2,[r2,#2]
 2984 017a 92B2     	 uxth r2,r2
 2985 017c 12B2     	 sxth r2,r2
 2986 017e 02FB03F3 	 mul r3,r2,r3
 2987 0182 484A     	 ldr r2,.L146+16
 2988 0184 82FB0312 	 smull r1,r2,r2,r3
 2989 0188 1211     	 asrs r2,r2,#4
 2990 018a DB17     	 asrs r3,r3,#31
 2991 018c D41A     	 subs r4,r2,r3
 2992 018e 0120     	 movs r0,#1
 2993 0190 FFF7FEFF 	 bl servoParams
 2994 0194 0346     	 mov r3,r0
 2995 0196 9B7A     	 ldrb r3,[r3,#10]
 2996 0198 5BB2     	 sxtb r3,r3
 2997 019a 414A     	 ldr r2,.L146+12
 2998 019c B2F90020 	 ldrsh r2,[r2]
 2999 01a0 92B2     	 uxth r2,r2
 3000 01a2 12B2     	 sxth r2,r2
 3001 01a4 02FB03F3 	 mul r3,r2,r3
 3002 01a8 3E4A     	 ldr r2,.L146+16
 3003 01aa 82FB0312 	 smull r1,r2,r2,r3
 3004 01ae 1211     	 asrs r2,r2,#4
 3005 01b0 DB17     	 asrs r3,r3,#31
 3006 01b2 D31A     	 subs r3,r2,r3
 3007 01b4 E118     	 adds r1,r4,r3
 3008 01b6 394B     	 ldr r3,.L146+8
 3009 01b8 5B88     	 ldrh r3,[r3,#2]
 3010 01ba 9AB2     	 uxth r2,r3
 3011 01bc 8BB2     	 uxth r3,r1
 3012 01be 1344     	 add r3,r3,r2
 3013 01c0 9BB2     	 uxth r3,r3
 3014 01c2 9AB2     	 uxth r2,r3
 3015 01c4 354B     	 ldr r3,.L146+8
 3016 01c6 5A80     	 strh r2,[r3,#2]
 3017 01c8 37E0     	 b .L141
 3018              	.L142:
 522:../cleanflight/src/main/flight/servos.c ****             } else {
 523:../cleanflight/src/main/flight/servos.c ****                 servo[SERVO_GIMBAL_PITCH] += (int32_t)servoParams(SERVO_GIMBAL_PITCH)->rate * attit
 3019              	 .loc 5 523 0
 3020 01ca 0020     	 movs r0,#0
 3021 01cc FFF7FEFF 	 bl servoParams
 3022 01d0 0346     	 mov r3,r0
 3023 01d2 9B7A     	 ldrb r3,[r3,#10]
 3024 01d4 5BB2     	 sxtb r3,r3
 3025 01d6 324A     	 ldr r2,.L146+12
 3026 01d8 B2F90220 	 ldrsh r2,[r2,#2]
 3027 01dc 92B2     	 uxth r2,r2
 3028 01de 12B2     	 sxth r2,r2
 3029 01e0 02FB03F3 	 mul r3,r2,r3
 3030 01e4 2F4A     	 ldr r2,.L146+16
 3031 01e6 82FB0312 	 smull r1,r2,r2,r3
 3032 01ea 1211     	 asrs r2,r2,#4
 3033 01ec DB17     	 asrs r3,r3,#31
 3034 01ee D11A     	 subs r1,r2,r3
 3035 01f0 2A4B     	 ldr r3,.L146+8
 3036 01f2 1B88     	 ldrh r3,[r3]
 3037 01f4 9AB2     	 uxth r2,r3
 3038 01f6 8BB2     	 uxth r3,r1
 3039 01f8 1344     	 add r3,r3,r2
 3040 01fa 9BB2     	 uxth r3,r3
 3041 01fc 9AB2     	 uxth r2,r3
 3042 01fe 274B     	 ldr r3,.L146+8
 3043 0200 1A80     	 strh r2,[r3]
 524:../cleanflight/src/main/flight/servos.c ****                 servo[SERVO_GIMBAL_ROLL] += (int32_t)servoParams(SERVO_GIMBAL_ROLL)->rate * attitud
 3044              	 .loc 5 524 0
 3045 0202 0120     	 movs r0,#1
 3046 0204 FFF7FEFF 	 bl servoParams
 3047 0208 0346     	 mov r3,r0
 3048 020a 9B7A     	 ldrb r3,[r3,#10]
 3049 020c 5BB2     	 sxtb r3,r3
 3050 020e 244A     	 ldr r2,.L146+12
 3051 0210 B2F90020 	 ldrsh r2,[r2]
 3052 0214 92B2     	 uxth r2,r2
 3053 0216 12B2     	 sxth r2,r2
 3054 0218 02FB03F3 	 mul r3,r2,r3
 3055 021c 214A     	 ldr r2,.L146+16
 3056 021e 82FB0312 	 smull r1,r2,r2,r3
 3057 0222 1211     	 asrs r2,r2,#4
 3058 0224 DB17     	 asrs r3,r3,#31
 3059 0226 D11A     	 subs r1,r2,r3
 3060 0228 1C4B     	 ldr r3,.L146+8
 3061 022a 5B88     	 ldrh r3,[r3,#2]
 3062 022c 9AB2     	 uxth r2,r3
 3063 022e 8BB2     	 uxth r3,r1
 3064 0230 1344     	 add r3,r3,r2
 3065 0232 9BB2     	 uxth r3,r3
 3066 0234 9AB2     	 uxth r2,r3
 3067 0236 194B     	 ldr r3,.L146+8
 3068 0238 5A80     	 strh r2,[r3,#2]
 3069              	.L141:
 3070              	.LBB20:
 525:../cleanflight/src/main/flight/servos.c ****             }
 526:../cleanflight/src/main/flight/servos.c ****         }
 527:../cleanflight/src/main/flight/servos.c ****     }
 528:../cleanflight/src/main/flight/servos.c **** 
 529:../cleanflight/src/main/flight/servos.c ****     // constrain servos
 530:../cleanflight/src/main/flight/servos.c ****     for (int i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 3071              	 .loc 5 530 0
 3072 023a 0023     	 movs r3,#0
 3073 023c BB60     	 str r3,[r7,#8]
 3074 023e 22E0     	 b .L143
 3075              	.L144:
 531:../cleanflight/src/main/flight/servos.c ****         servo[i] = constrain(servo[i], servoParams(i)->min, servoParams(i)->max); // limit the valu
 3076              	 .loc 5 531 0 discriminator 3
 3077 0240 164A     	 ldr r2,.L146+8
 3078 0242 BB68     	 ldr r3,[r7,#8]
 3079 0244 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 3080 0248 1DB2     	 sxth r5,r3
 3081 024a B868     	 ldr r0,[r7,#8]
 3082 024c FFF7FEFF 	 bl servoParams
 3083 0250 0346     	 mov r3,r0
 3084 0252 B3F90430 	 ldrsh r3,[r3,#4]
 3085 0256 9BB2     	 uxth r3,r3
 3086 0258 1CB2     	 sxth r4,r3
 3087 025a B868     	 ldr r0,[r7,#8]
 3088 025c FFF7FEFF 	 bl servoParams
 3089 0260 0346     	 mov r3,r0
 3090 0262 B3F90630 	 ldrsh r3,[r3,#6]
 3091 0266 9BB2     	 uxth r3,r3
 3092 0268 1BB2     	 sxth r3,r3
 3093 026a 2846     	 mov r0,r5
 3094 026c 2146     	 mov r1,r4
 3095 026e 1A46     	 mov r2,r3
 3096 0270 FFF7FEFF 	 bl constrain
 3097 0274 0346     	 mov r3,r0
 3098 0276 99B2     	 uxth r1,r3
 3099 0278 084A     	 ldr r2,.L146+8
 3100 027a BB68     	 ldr r3,[r7,#8]
 3101 027c 22F81310 	 strh r1,[r2,r3,lsl#1]
 530:../cleanflight/src/main/flight/servos.c ****         servo[i] = constrain(servo[i], servoParams(i)->min, servoParams(i)->max); // limit the valu
 3102              	 .loc 5 530 0 discriminator 3
 3103 0280 BB68     	 ldr r3,[r7,#8]
 3104 0282 0133     	 adds r3,r3,#1
 3105 0284 BB60     	 str r3,[r7,#8]
 3106              	.L143:
 530:../cleanflight/src/main/flight/servos.c ****         servo[i] = constrain(servo[i], servoParams(i)->min, servoParams(i)->max); // limit the valu
 3107              	 .loc 5 530 0 is_stmt 0 discriminator 1
 3108 0286 BB68     	 ldr r3,[r7,#8]
 3109 0288 072B     	 cmp r3,#7
 3110 028a D9DD     	 ble .L144
 3111              	.LBE20:
 532:../cleanflight/src/main/flight/servos.c ****     }
 533:../cleanflight/src/main/flight/servos.c **** }
 3112              	 .loc 5 533 0 is_stmt 1
 3113 028c 1037     	 adds r7,r7,#16
 3114              	.LCFI100:
 3115              	 .cfi_def_cfa_offset 16
 3116 028e BD46     	 mov sp,r7
 3117              	.LCFI101:
 3118              	 .cfi_def_cfa_register 13
 3119              	 
 3120 0290 B0BD     	 pop {r4,r5,r7,pc}
 3121              	.L147:
 3122 0292 00BF     	 .align 2
 3123              	.L146:
 3124 0294 00000000 	 .word currentMixerMode
 3125 0298 00000000 	 .word rcData
 3126 029c 00000000 	 .word servo
 3127 02a0 00000000 	 .word attitude
 3128 02a4 1F85EB51 	 .word 1374389535
 3129              	 .cfi_endproc
 3130              	.LFE588:
 3132              	 .section .text.isMixerUsingServos,"ax",%progbits
 3133              	 .align 2
 3134              	 .global isMixerUsingServos
 3135              	 .thumb
 3136              	 .thumb_func
 3138              	isMixerUsingServos:
 3139              	.LFB589:
 534:../cleanflight/src/main/flight/servos.c **** 
 535:../cleanflight/src/main/flight/servos.c **** bool isMixerUsingServos(void)
 536:../cleanflight/src/main/flight/servos.c **** {
 3140              	 .loc 5 536 0
 3141              	 .cfi_startproc
 3142              	 
 3143              	 
 3144              	 
 3145 0000 80B4     	 push {r7}
 3146              	.LCFI102:
 3147              	 .cfi_def_cfa_offset 4
 3148              	 .cfi_offset 7,-4
 3149 0002 00AF     	 add r7,sp,#0
 3150              	.LCFI103:
 3151              	 .cfi_def_cfa_register 7
 537:../cleanflight/src/main/flight/servos.c ****     return useServo;
 3152              	 .loc 5 537 0
 3153 0004 054B     	 ldr r3,.L150
 3154 0006 1B68     	 ldr r3,[r3]
 3155 0008 002B     	 cmp r3,#0
 3156 000a 14BF     	 ite ne
 3157 000c 0123     	 movne r3,#1
 3158 000e 0023     	 moveq r3,#0
 3159 0010 DBB2     	 uxtb r3,r3
 538:../cleanflight/src/main/flight/servos.c **** }
 3160              	 .loc 5 538 0
 3161 0012 1846     	 mov r0,r3
 3162 0014 BD46     	 mov sp,r7
 3163              	.LCFI104:
 3164              	 .cfi_def_cfa_register 13
 3165              	 
 3166 0016 5DF8047B 	 ldr r7,[sp],#4
 3167              	.LCFI105:
 3168              	 .cfi_restore 7
 3169              	 .cfi_def_cfa_offset 0
 3170 001a 7047     	 bx lr
 3171              	.L151:
 3172              	 .align 2
 3173              	.L150:
 3174 001c 00000000 	 .word useServo
 3175              	 .cfi_endproc
 3176              	.LFE589:
 3178              	 .section .bss.servoFilter,"aw",%nobits
 3179              	 .align 2
 3182              	servoFilter:
 3183 0000 00000000 	 .space 288
 3183      00000000 
 3183      00000000 
 3183      00000000 
 3183      00000000 
 3184              	 .section .text.servosFilterInit,"ax",%progbits
 3185              	 .align 2
 3186              	 .global servosFilterInit
 3187              	 .thumb
 3188              	 .thumb_func
 3190              	servosFilterInit:
 3191              	.LFB590:
 539:../cleanflight/src/main/flight/servos.c **** 
 540:../cleanflight/src/main/flight/servos.c **** static biquadFilter_t servoFilter[MAX_SUPPORTED_SERVOS];
 541:../cleanflight/src/main/flight/servos.c **** 
 542:../cleanflight/src/main/flight/servos.c **** void servosFilterInit(void)
 543:../cleanflight/src/main/flight/servos.c **** {
 3192              	 .loc 5 543 0
 3193              	 .cfi_startproc
 3194              	 
 3195              	 
 3196 0000 90B5     	 push {r4,r7,lr}
 3197              	.LCFI106:
 3198              	 .cfi_def_cfa_offset 12
 3199              	 .cfi_offset 4,-12
 3200              	 .cfi_offset 7,-8
 3201              	 .cfi_offset 14,-4
 3202 0002 83B0     	 sub sp,sp,#12
 3203              	.LCFI107:
 3204              	 .cfi_def_cfa_offset 24
 3205 0004 00AF     	 add r7,sp,#0
 3206              	.LCFI108:
 3207              	 .cfi_def_cfa_register 7
 544:../cleanflight/src/main/flight/servos.c ****     if (servoConfig()->servo_lowpass_freq) {
 3208              	 .loc 5 544 0
 3209 0006 FFF7FEFF 	 bl servoConfig
 3210 000a 0346     	 mov r3,r0
 3211 000c 9B89     	 ldrh r3,[r3,#12]
 3212 000e 9BB2     	 uxth r3,r3
 3213 0010 002B     	 cmp r3,#0
 3214 0012 20D0     	 beq .L152
 3215              	.LBB21:
 545:../cleanflight/src/main/flight/servos.c ****         for (int servoIdx = 0; servoIdx < MAX_SUPPORTED_SERVOS; servoIdx++) {
 3216              	 .loc 5 545 0
 3217 0014 0023     	 movs r3,#0
 3218 0016 7B60     	 str r3,[r7,#4]
 3219 0018 1AE0     	 b .L154
 3220              	.L155:
 546:../cleanflight/src/main/flight/servos.c ****             biquadFilterInitLPF(&servoFilter[servoIdx], servoConfig()->servo_lowpass_freq, targetPi
 3221              	 .loc 5 546 0 discriminator 3
 3222 001a 7A68     	 ldr r2,[r7,#4]
 3223 001c 1346     	 mov r3,r2
 3224 001e DB00     	 lsls r3,r3,#3
 3225 0020 1344     	 add r3,r3,r2
 3226 0022 9B00     	 lsls r3,r3,#2
 3227 0024 0D4A     	 ldr r2,.L156
 3228 0026 9C18     	 adds r4,r3,r2
 3229 0028 FFF7FEFF 	 bl servoConfig
 3230 002c 0346     	 mov r3,r0
 3231 002e 9B89     	 ldrh r3,[r3,#12]
 3232 0030 9BB2     	 uxth r3,r3
 3233 0032 07EE903A 	 fmsr s15,r3
 3234 0036 F8EE677A 	 fuitos s15,s15
 3235 003a 094B     	 ldr r3,.L156+4
 3236 003c 1B68     	 ldr r3,[r3]
 3237 003e 2046     	 mov r0,r4
 3238 0040 17EE901A 	 fmrs r1,s15
 3239 0044 1A46     	 mov r2,r3
 3240 0046 FFF7FEFF 	 bl biquadFilterInitLPF
 545:../cleanflight/src/main/flight/servos.c ****         for (int servoIdx = 0; servoIdx < MAX_SUPPORTED_SERVOS; servoIdx++) {
 3241              	 .loc 5 545 0 discriminator 3
 3242 004a 7B68     	 ldr r3,[r7,#4]
 3243 004c 0133     	 adds r3,r3,#1
 3244 004e 7B60     	 str r3,[r7,#4]
 3245              	.L154:
 545:../cleanflight/src/main/flight/servos.c ****         for (int servoIdx = 0; servoIdx < MAX_SUPPORTED_SERVOS; servoIdx++) {
 3246              	 .loc 5 545 0 is_stmt 0 discriminator 1
 3247 0050 7B68     	 ldr r3,[r7,#4]
 3248 0052 072B     	 cmp r3,#7
 3249 0054 E1DD     	 ble .L155
 3250              	.L152:
 3251              	.LBE21:
 547:../cleanflight/src/main/flight/servos.c ****         }
 548:../cleanflight/src/main/flight/servos.c ****     }
 549:../cleanflight/src/main/flight/servos.c **** 
 550:../cleanflight/src/main/flight/servos.c **** }
 3252              	 .loc 5 550 0 is_stmt 1
 3253 0056 0C37     	 adds r7,r7,#12
 3254              	.LCFI109:
 3255              	 .cfi_def_cfa_offset 12
 3256 0058 BD46     	 mov sp,r7
 3257              	.LCFI110:
 3258              	 .cfi_def_cfa_register 13
 3259              	 
 3260 005a 90BD     	 pop {r4,r7,pc}
 3261              	.L157:
 3262              	 .align 2
 3263              	.L156:
 3264 005c 00000000 	 .word servoFilter
 3265 0060 00000000 	 .word targetPidLooptime
 3266              	 .cfi_endproc
 3267              	.LFE590:
 3269              	 .section .text.filterServos,"ax",%progbits
 3270              	 .align 2
 3271              	 .thumb
 3272              	 .thumb_func
 3274              	filterServos:
 3275              	.LFB591:
 551:../cleanflight/src/main/flight/servos.c **** static void filterServos(void)
 552:../cleanflight/src/main/flight/servos.c **** {
 3276              	 .loc 5 552 0
 3277              	 .cfi_startproc
 3278              	 
 3279              	 
 3280 0000 B0B5     	 push {r4,r5,r7,lr}
 3281              	.LCFI111:
 3282              	 .cfi_def_cfa_offset 16
 3283              	 .cfi_offset 4,-16
 3284              	 .cfi_offset 5,-12
 3285              	 .cfi_offset 7,-8
 3286              	 .cfi_offset 14,-4
 3287 0002 82B0     	 sub sp,sp,#8
 3288              	.LCFI112:
 3289              	 .cfi_def_cfa_offset 24
 3290 0004 00AF     	 add r7,sp,#0
 3291              	.LCFI113:
 3292              	 .cfi_def_cfa_register 7
 553:../cleanflight/src/main/flight/servos.c **** #if defined(MIXER_DEBUG)
 554:../cleanflight/src/main/flight/servos.c ****     uint32_t startTime = micros();
 555:../cleanflight/src/main/flight/servos.c **** #endif
 556:../cleanflight/src/main/flight/servos.c ****     if (servoConfig()->servo_lowpass_freq) {
 3293              	 .loc 5 556 0
 3294 0006 FFF7FEFF 	 bl servoConfig
 3295 000a 0346     	 mov r3,r0
 3296 000c 9B89     	 ldrh r3,[r3,#12]
 3297 000e 9BB2     	 uxth r3,r3
 3298 0010 002B     	 cmp r3,#0
 3299 0012 47D0     	 beq .L158
 3300              	.LBB22:
 557:../cleanflight/src/main/flight/servos.c ****         for (int servoIdx = 0; servoIdx < MAX_SUPPORTED_SERVOS; servoIdx++) {
 3301              	 .loc 5 557 0
 3302 0014 0023     	 movs r3,#0
 3303 0016 7B60     	 str r3,[r7,#4]
 3304 0018 41E0     	 b .L160
 3305              	.L161:
 558:../cleanflight/src/main/flight/servos.c ****             servo[servoIdx] = lrintf(biquadFilterApply(&servoFilter[servoIdx], (float)servo[servoId
 3306              	 .loc 5 558 0 discriminator 3
 3307 001a 7A68     	 ldr r2,[r7,#4]
 3308 001c 1346     	 mov r3,r2
 3309 001e DB00     	 lsls r3,r3,#3
 3310 0020 1344     	 add r3,r3,r2
 3311 0022 9B00     	 lsls r3,r3,#2
 3312 0024 214A     	 ldr r2,.L162
 3313 0026 9918     	 adds r1,r3,r2
 3314 0028 214A     	 ldr r2,.L162+4
 3315 002a 7B68     	 ldr r3,[r7,#4]
 3316 002c 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 3317 0030 1BB2     	 sxth r3,r3
 3318 0032 07EE903A 	 fmsr s15,r3
 3319 0036 F8EEE77A 	 fsitos s15,s15
 3320 003a 0846     	 mov r0,r1
 3321 003c 17EE901A 	 fmrs r1,s15
 3322 0040 FFF7FEFF 	 bl biquadFilterApply
 3323 0044 0346     	 mov r3,r0
 3324 0046 1846     	 mov r0,r3
 3325 0048 FFF7FEFF 	 bl lrintf
 3326 004c 0346     	 mov r3,r0
 3327 004e 99B2     	 uxth r1,r3
 3328 0050 174A     	 ldr r2,.L162+4
 3329 0052 7B68     	 ldr r3,[r7,#4]
 3330 0054 22F81310 	 strh r1,[r2,r3,lsl#1]
 559:../cleanflight/src/main/flight/servos.c ****             // Sanity check
 560:../cleanflight/src/main/flight/servos.c ****             servo[servoIdx] = constrain(servo[servoIdx], servoParams(servoIdx)->min, servoParams(se
 3331              	 .loc 5 560 0 discriminator 3
 3332 0058 154A     	 ldr r2,.L162+4
 3333 005a 7B68     	 ldr r3,[r7,#4]
 3334 005c 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 3335 0060 1DB2     	 sxth r5,r3
 3336 0062 7868     	 ldr r0,[r7,#4]
 3337 0064 FFF7FEFF 	 bl servoParams
 3338 0068 0346     	 mov r3,r0
 3339 006a B3F90430 	 ldrsh r3,[r3,#4]
 3340 006e 9BB2     	 uxth r3,r3
 3341 0070 1CB2     	 sxth r4,r3
 3342 0072 7868     	 ldr r0,[r7,#4]
 3343 0074 FFF7FEFF 	 bl servoParams
 3344 0078 0346     	 mov r3,r0
 3345 007a B3F90630 	 ldrsh r3,[r3,#6]
 3346 007e 9BB2     	 uxth r3,r3
 3347 0080 1BB2     	 sxth r3,r3
 3348 0082 2846     	 mov r0,r5
 3349 0084 2146     	 mov r1,r4
 3350 0086 1A46     	 mov r2,r3
 3351 0088 FFF7FEFF 	 bl constrain
 3352 008c 0346     	 mov r3,r0
 3353 008e 99B2     	 uxth r1,r3
 3354 0090 074A     	 ldr r2,.L162+4
 3355 0092 7B68     	 ldr r3,[r7,#4]
 3356 0094 22F81310 	 strh r1,[r2,r3,lsl#1]
 557:../cleanflight/src/main/flight/servos.c ****             servo[servoIdx] = lrintf(biquadFilterApply(&servoFilter[servoIdx], (float)servo[servoId
 3357              	 .loc 5 557 0 discriminator 3
 3358 0098 7B68     	 ldr r3,[r7,#4]
 3359 009a 0133     	 adds r3,r3,#1
 3360 009c 7B60     	 str r3,[r7,#4]
 3361              	.L160:
 557:../cleanflight/src/main/flight/servos.c ****             servo[servoIdx] = lrintf(biquadFilterApply(&servoFilter[servoIdx], (float)servo[servoId
 3362              	 .loc 5 557 0 is_stmt 0 discriminator 1
 3363 009e 7B68     	 ldr r3,[r7,#4]
 3364 00a0 072B     	 cmp r3,#7
 3365 00a2 BADD     	 ble .L161
 3366              	.L158:
 3367              	.LBE22:
 561:../cleanflight/src/main/flight/servos.c ****         }
 562:../cleanflight/src/main/flight/servos.c ****     }
 563:../cleanflight/src/main/flight/servos.c **** #if defined(MIXER_DEBUG)
 564:../cleanflight/src/main/flight/servos.c ****     debug[0] = (int16_t)(micros() - startTime);
 565:../cleanflight/src/main/flight/servos.c **** #endif
 566:../cleanflight/src/main/flight/servos.c **** }
 3368              	 .loc 5 566 0 is_stmt 1
 3369 00a4 0837     	 adds r7,r7,#8
 3370              	.LCFI114:
 3371              	 .cfi_def_cfa_offset 16
 3372 00a6 BD46     	 mov sp,r7
 3373              	.LCFI115:
 3374              	 .cfi_def_cfa_register 13
 3375              	 
 3376 00a8 B0BD     	 pop {r4,r5,r7,pc}
 3377              	.L163:
 3378 00aa 00BF     	 .align 2
 3379              	.L162:
 3380 00ac 00000000 	 .word servoFilter
 3381 00b0 00000000 	 .word servo
 3382              	 .cfi_endproc
 3383              	.LFE591:
 3385              	 .section .rodata._reset_template_88.13699,"a",%progbits
 3386              	 .align 2
 3389              	_reset_template_88.13699:
 3390 0000 00000000 	 .space 4
 3391 0004 E803     	 .short 1000
 3392 0006 D007     	 .short 2000
 3393 0008 DC05     	 .short 1500
 3394 000a 64       	 .byte 100
 3395 000b FF       	 .byte -1
 3396              	 .section .bss.currentOutput.13807,"aw",%nobits
 3397              	 .align 2
 3400              	currentOutput.13807:
 3401 0000 00000000 	 .space 32
 3401      00000000 
 3401      00000000 
 3401      00000000 
 3401      00000000 
 3402              	 .text
 3403              	.Letext0:
 3404              	 .file 6 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3405              	 .file 7 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3406              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 3407              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/filter.h"
 3408              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 3409              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 3410              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 3411              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/timer.h"
 3412              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
 3413              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 3414              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
 3415              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 3416              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 3417              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/axis.h"
 3418              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 3419              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
 3420              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
 3421              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
 3422              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 3423              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 3424              	 .file 26 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 servos.c
    {standard input}:20     .text.constrain:00000000 $t
    {standard input}:24     .text.constrain:00000000 constrain
    {standard input}:84     .text.rxConfig:00000000 $t
    {standard input}:88     .text.rxConfig:00000000 rxConfig
    {standard input}:118    .text.rxConfig:00000010 $d
                            *COM*:00000001 inputSource_e
    {standard input}:124    .text.customServoMixers:00000000 $t
    {standard input}:128    .text.customServoMixers:00000000 customServoMixers
    {standard input}:170    .text.customServoMixers:00000020 $d
                            *COM*:00000070 customServoMixers_SystemArray
    {standard input}:175    .text.customServoMixersMutable:00000000 $t
    {standard input}:179    .text.customServoMixersMutable:00000000 customServoMixersMutable
    {standard input}:220    .text.customServoMixersMutable:00000020 $d
    {standard input}:225    .text.servoParams:00000000 $t
    {standard input}:229    .text.servoParams:00000000 servoParams
    {standard input}:271    .text.servoParams:00000024 $d
                            *COM*:00000060 servoParams_SystemArray
    {standard input}:276    .text.servoConfig:00000000 $t
    {standard input}:280    .text.servoConfig:00000000 servoConfig
    {standard input}:309    .text.servoConfig:00000010 $d
                            *COM*:00000010 servoConfig_System
    {standard input}:314    .text.gimbalConfig:00000000 $t
    {standard input}:318    .text.gimbalConfig:00000000 gimbalConfig
    {standard input}:348    .text.gimbalConfig:00000010 $d
                            *COM*:00000001 gimbalConfig_System
                            *COM*:00000010 servoConfig_Copy
    {standard input}:359    .pg_registry:00000000 servoConfig_Registry
    {standard input}:356    .pg_registry:00000000 $d
    {standard input}:372    .text.pgResetFn_servoConfig:00000000 pgResetFn_servoConfig
    {standard input}:367    .text.pgResetFn_servoConfig:00000000 $t
                            *COM*:00000070 customServoMixers_CopyArray
    {standard input}:468    .pg_registry:00000014 customServoMixers_Registry
                            *COM*:00000060 servoParams_CopyArray
    {standard input}:481    .pg_registry:00000028 servoParams_Registry
    {standard input}:494    .text.pgResetFn_servoParams:00000000 pgResetFn_servoParams
    {standard input}:489    .text.pgResetFn_servoParams:00000000 $t
    {standard input}:564    .text.pgResetFn_servoParams:00000040 $d
    {standard input}:3389   .rodata._reset_template_88.13699:00000000 _reset_template_88.13699
                            *COM*:00000001 gimbalConfig_Copy
    {standard input}:575    .pg_registry:0000003c gimbalConfig_Registry
                            *COM*:00000010 servo
    {standard input}:586    .bss.servoRuleCount:00000000 servoRuleCount
    {standard input}:587    .bss.servoRuleCount:00000000 $d
    {standard input}:589    .bss.currentServoMixer:00000000 $d
    {standard input}:592    .bss.currentServoMixer:00000000 currentServoMixer
    {standard input}:595    .bss.useServo:00000000 $d
    {standard input}:598    .bss.useServo:00000000 useServo
    {standard input}:601    .rodata.servoMixerAirplane:00000000 $d
    {standard input}:604    .rodata.servoMixerAirplane:00000000 servoMixerAirplane
    {standard input}:641    .rodata.servoMixerFlyingWing:00000000 $d
    {standard input}:644    .rodata.servoMixerFlyingWing:00000000 servoMixerFlyingWing
    {standard input}:681    .rodata.servoMixerTri:00000000 $d
    {standard input}:684    .rodata.servoMixerTri:00000000 servoMixerTri
    {standard input}:693    .rodata.servoMixerBI:00000000 $d
    {standard input}:696    .rodata.servoMixerBI:00000000 servoMixerBI
    {standard input}:726    .rodata.servoMixerDual:00000000 $d
    {standard input}:729    .rodata.servoMixerDual:00000000 servoMixerDual
    {standard input}:745    .rodata.servoMixerSingle:00000000 $d
    {standard input}:748    .rodata.servoMixerSingle:00000000 servoMixerSingle
    {standard input}:806    .rodata.servoMixerHeli:00000000 $d
    {standard input}:809    .rodata.servoMixerHeli:00000000 servoMixerHeli
    {standard input}:874    .rodata.servoMixerGimbal:00000000 $d
    {standard input}:877    .rodata.servoMixerGimbal:00000000 servoMixerGimbal
    {standard input}:897    .rodata.servoMixers:00000000 servoMixers
    {standard input}:894    .rodata.servoMixers:00000000 $d
    {standard input}:953    .text.determineServoMiddleOrForwardFromChannel:00000000 $t
    {standard input}:958    .text.determineServoMiddleOrForwardFromChannel:00000000 determineServoMiddleOrForwardFromChannel
    {standard input}:1022   .text.determineServoMiddleOrForwardFromChannel:0000004c $d
    {standard input}:1028   .text.servoDirection:00000000 $t
    {standard input}:1033   .text.servoDirection:00000000 servoDirection
    {standard input}:1084   .text.servosInit:00000000 $t
    {standard input}:1089   .text.servosInit:00000000 servosInit
    {standard input}:1179   .text.servosInit:00000074 $d
    {standard input}:1187   .text.loadCustomServoMixer:00000000 $t
    {standard input}:1192   .text.loadCustomServoMixer:00000000 loadCustomServoMixer
    {standard input}:1280   .text.loadCustomServoMixer:0000006c $d
    {standard input}:1286   .text.servoConfigureOutput:00000000 $t
    {standard input}:1291   .text.servoConfigureOutput:00000000 servoConfigureOutput
    {standard input}:1449   .text.servoConfigureOutput:000000e4 $d
    {standard input}:1459   .text.servoMixerLoadMix:00000000 $t
    {standard input}:1464   .text.servoMixerLoadMix:00000000 servoMixerLoadMix
    {standard input}:1584   .text.servoMixerLoadMix:000000a8 $d
    {standard input}:1589   .text.forwardAuxChannelsToServos:00000000 $t
    {standard input}:1593   .text.forwardAuxChannelsToServos:00000000 forwardAuxChannelsToServos
    {standard input}:1667   .text.forwardAuxChannelsToServos:0000005c $d
    {standard input}:1672   .text.updateGimbalServos:00000000 $t
    {standard input}:1676   .text.updateGimbalServos:00000000 updateGimbalServos
    {standard input}:1729   .text.updateGimbalServos:00000048 $d
    {standard input}:1734   .text.writeServos:00000000 $t
    {standard input}:1739   .text.writeServos:00000000 writeServos
    {standard input}:2795   .text.servoTable:00000000 servoTable
    {standard input}:3274   .text.filterServos:00000000 filterServos
    {standard input}:1773   .text.writeServos:00000024 $d
    {standard input}:1798   .text.writeServos:00000088 $t
    {standard input}:2130   .text.writeServos:00000310 $d
    {standard input}:2137   .text.servoMixer:00000000 $t
    {standard input}:2142   .text.servoMixer:00000000 servoMixer
    {standard input}:2416   .text.servoMixer:00000228 $d
    {standard input}:2430   .text.servoMixer:00000258 $t
    {standard input}:2782   .text.servoMixer:00000540 $d
    {standard input}:3400   .bss.currentOutput.13807:00000000 currentOutput.13807
    {standard input}:2791   .text.servoTable:00000000 $t
    {standard input}:2824   .text.servoTable:00000018 $d
    {standard input}:2849   .text.servoTable:0000007c $t
    {standard input}:3124   .text.servoTable:00000294 $d
    {standard input}:3133   .text.isMixerUsingServos:00000000 $t
    {standard input}:3138   .text.isMixerUsingServos:00000000 isMixerUsingServos
    {standard input}:3174   .text.isMixerUsingServos:0000001c $d
    {standard input}:3179   .bss.servoFilter:00000000 $d
    {standard input}:3182   .bss.servoFilter:00000000 servoFilter
    {standard input}:3185   .text.servosFilterInit:00000000 $t
    {standard input}:3190   .text.servosFilterInit:00000000 servosFilterInit
    {standard input}:3264   .text.servosFilterInit:0000005c $d
    {standard input}:3270   .text.filterServos:00000000 $t
    {standard input}:3380   .text.filterServos:000000ac $d
    {standard input}:3386   .rodata._reset_template_88.13699:00000000 $d
    {standard input}:3397   .bss.currentOutput.13807:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
rxConfig_System
timerioTagGetByUsage
rxRuntimeConfig
rcData
feature
mixerIsTricopter
servosTricopterInit
currentMixerMode
mixers
memset
stateFlags
pwmWriteServo
servosTricopterIsEnabledServoUnarmed
armingFlags
scaleRange
flightModeFlags
rcCommand
pidData
attitude
motor
IS_RC_MODE_ACTIVE
servosTricopterMixer
biquadFilterInitLPF
targetPidLooptime
biquadFilterApply
lrintf
