   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "cli.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global cliMode
  20              	 .section .bss.cliMode,"aw",%nobits
  23              	cliMode:
  24 0000 00       	 .space 1
  25              	 .comm pCurrentDisplay,4,4
  26              	 .section .text.constrain,"ax",%progbits
  27              	 .align 2
  28              	 .thumb
  29              	 .thumb_func
  31              	constrain:
  32              	.LFB529:
  33              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  34              	 .loc 1 151 0
  35              	 .cfi_startproc
  36              	 
  37              	 
  38              	 
  39 0000 80B4     	 push {r7}
  40              	.LCFI0:
  41              	 .cfi_def_cfa_offset 4
  42              	 .cfi_offset 7,-4
  43 0002 85B0     	 sub sp,sp,#20
  44              	.LCFI1:
  45              	 .cfi_def_cfa_offset 24
  46 0004 00AF     	 add r7,sp,#0
  47              	.LCFI2:
  48              	 .cfi_def_cfa_register 7
  49 0006 F860     	 str r0,[r7,#12]
  50 0008 B960     	 str r1,[r7,#8]
  51 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
  52              	 .loc 1 152 0
  53 000c FA68     	 ldr r2,[r7,#12]
  54 000e BB68     	 ldr r3,[r7,#8]
  55 0010 9A42     	 cmp r2,r3
  56 0012 01DA     	 bge .L2
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
  57              	 .loc 1 153 0
  58 0014 BB68     	 ldr r3,[r7,#8]
  59 0016 06E0     	 b .L3
  60              	.L2:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
  61              	 .loc 1 154 0
  62 0018 FA68     	 ldr r2,[r7,#12]
  63 001a 7B68     	 ldr r3,[r7,#4]
  64 001c 9A42     	 cmp r2,r3
  65 001e 01DD     	 ble .L4
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
  66              	 .loc 1 155 0
  67 0020 7B68     	 ldr r3,[r7,#4]
  68 0022 00E0     	 b .L3
  69              	.L4:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
  70              	 .loc 1 157 0
  71 0024 FB68     	 ldr r3,[r7,#12]
  72              	.L3:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
  73              	 .loc 1 158 0
  74 0026 1846     	 mov r0,r3
  75 0028 1437     	 adds r7,r7,#20
  76              	.LCFI3:
  77              	 .cfi_def_cfa_offset 4
  78 002a BD46     	 mov sp,r7
  79              	.LCFI4:
  80              	 .cfi_def_cfa_register 13
  81              	 
  82 002c 5DF8047B 	 ldr r7,[sp],#4
  83              	.LCFI5:
  84              	 .cfi_restore 7
  85              	 .cfi_def_cfa_offset 0
  86 0030 7047     	 bx lr
  87              	 .cfi_endproc
  88              	.LFE529:
  90 0032 00BF     	 .section .text.featureConfig,"ax",%progbits
  91              	 .align 2
  92              	 .thumb
  93              	 .thumb_func
  95              	featureConfig:
  96              	.LFB531:
  97              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #ifndef DEFAULT_FEATURES
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #define DEFAULT_FEATURES 0
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #ifndef DEFAULT_RX_FEATURE
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #define DEFAULT_RX_FEATURE FEATURE_RX_PARALLEL_PWM
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** #endif
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** typedef enum {
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_PPM = 1 << 0,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_INFLIGHT_ACC_CAL = 1 << 2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_SERIAL = 1 << 3,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_MOTOR_STOP = 1 << 4,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_SERVO_TILT = 1 << 5,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_SOFTSERIAL = 1 << 6,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_GPS = 1 << 7,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RANGEFINDER = 1 << 9,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_TELEMETRY = 1 << 10,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_3D = 1 << 12,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_PARALLEL_PWM = 1 << 13,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_MSP = 1 << 14,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RSSI_ADC = 1 << 15,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_LED_STRIP = 1 << 16,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_DASHBOARD = 1 << 17,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_OSD = 1 << 18,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_CHANNEL_FORWARDING = 1 << 20,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_TRANSPONDER = 1 << 21,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_AIRMODE = 1 << 22,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_RX_SPI = 1 << 25,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_SOFTSPI = 1 << 26,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_ESC_SENSOR = 1 << 27,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_ANTI_GRAVITY = 1 << 28,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     FEATURE_DYNAMIC_FILTER = 1 << 29,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** } features_e;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** typedef struct featureConfig_s {
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h ****     uint32_t enabledFeatures;
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** } featureConfig_t;
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config\feature.h **** PG_DECLARE(featureConfig_t, featureConfig);
  98              	 .loc 2 63 0
  99              	 .cfi_startproc
 100              	 
 101              	 
 102              	 
 103 0000 80B4     	 push {r7}
 104              	.LCFI6:
 105              	 .cfi_def_cfa_offset 4
 106              	 .cfi_offset 7,-4
 107 0002 00AF     	 add r7,sp,#0
 108              	.LCFI7:
 109              	 .cfi_def_cfa_register 7
 110              	 .loc 2 63 0
 111 0004 024B     	 ldr r3,.L7
 112 0006 1846     	 mov r0,r3
 113 0008 BD46     	 mov sp,r7
 114              	.LCFI8:
 115              	 .cfi_def_cfa_register 13
 116              	 
 117 000a 5DF8047B 	 ldr r7,[sp],#4
 118              	.LCFI9:
 119              	 .cfi_restore 7
 120              	 .cfi_def_cfa_offset 0
 121 000e 7047     	 bx lr
 122              	.L8:
 123              	 .align 2
 124              	.L7:
 125 0010 00000000 	 .word featureConfig_System
 126              	 .cfi_endproc
 127              	.LFE531:
 129              	 .section .text.pilotConfig,"ax",%progbits
 130              	 .align 2
 131              	 .thumb
 132              	 .thumb_func
 134              	pilotConfig:
 135              	.LFB562:
 136              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdbool.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #define MAX_NAME_LENGTH 16u
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** typedef struct pilotConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     char name[MAX_NAME_LENGTH + 1];
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** } pilotConfig_t;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** PG_DECLARE(pilotConfig_t, pilotConfig);
 137              	 .loc 3 34 0
 138              	 .cfi_startproc
 139              	 
 140              	 
 141              	 
 142 0000 80B4     	 push {r7}
 143              	.LCFI10:
 144              	 .cfi_def_cfa_offset 4
 145              	 .cfi_offset 7,-4
 146 0002 00AF     	 add r7,sp,#0
 147              	.LCFI11:
 148              	 .cfi_def_cfa_register 7
 149              	 .loc 3 34 0
 150 0004 024B     	 ldr r3,.L11
 151 0006 1846     	 mov r0,r3
 152 0008 BD46     	 mov sp,r7
 153              	.LCFI12:
 154              	 .cfi_def_cfa_register 13
 155              	 
 156 000a 5DF8047B 	 ldr r7,[sp],#4
 157              	.LCFI13:
 158              	 .cfi_restore 7
 159              	 .cfi_def_cfa_offset 0
 160 000e 7047     	 bx lr
 161              	.L12:
 162              	 .align 2
 163              	.L11:
 164 0010 00000000 	 .word pilotConfig_System
 165              	 .cfi_endproc
 166              	.LFE562:
 168              	 .section .text.pilotConfigMutable,"ax",%progbits
 169              	 .align 2
 170              	 .thumb
 171              	 .thumb_func
 173              	pilotConfigMutable:
 174              	.LFB563:
 175              	 .loc 3 34 0
 176              	 .cfi_startproc
 177              	 
 178              	 
 179              	 
 180 0000 80B4     	 push {r7}
 181              	.LCFI14:
 182              	 .cfi_def_cfa_offset 4
 183              	 .cfi_offset 7,-4
 184 0002 00AF     	 add r7,sp,#0
 185              	.LCFI15:
 186              	 .cfi_def_cfa_register 7
 187              	 .loc 3 34 0
 188 0004 024B     	 ldr r3,.L15
 189 0006 1846     	 mov r0,r3
 190 0008 BD46     	 mov sp,r7
 191              	.LCFI16:
 192              	 .cfi_def_cfa_register 13
 193              	 
 194 000a 5DF8047B 	 ldr r7,[sp],#4
 195              	.LCFI17:
 196              	 .cfi_restore 7
 197              	 .cfi_def_cfa_offset 0
 198 000e 7047     	 bx lr
 199              	.L16:
 200              	 .align 2
 201              	.L15:
 202 0010 00000000 	 .word pilotConfig_System
 203              	 .cfi_endproc
 204              	.LFE563:
 206              	 .section .text.systemConfig,"ax",%progbits
 207              	 .align 2
 208              	 .thumb
 209              	 .thumb_func
 211              	systemConfig:
 212              	.LFB564:
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** typedef struct systemConfig_s {
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t pidProfileIndex;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t activeRateProfile;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t debug_mode;
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t task_statistics;
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t rateProfile6PosSwitch;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t cpu_overclock;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t powerOnArmingGraceTime; // in seconds
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     char boardIdentifier[sizeof(TARGET_BOARD_IDENTIFIER) + 1];
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** } systemConfig_t;
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** PG_DECLARE(systemConfig_t, systemConfig);
 213              	 .loc 3 47 0
 214              	 .cfi_startproc
 215              	 
 216              	 
 217              	 
 218 0000 80B4     	 push {r7}
 219              	.LCFI18:
 220              	 .cfi_def_cfa_offset 4
 221              	 .cfi_offset 7,-4
 222 0002 00AF     	 add r7,sp,#0
 223              	.LCFI19:
 224              	 .cfi_def_cfa_register 7
 225              	 .loc 3 47 0
 226 0004 024B     	 ldr r3,.L19
 227 0006 1846     	 mov r0,r3
 228 0008 BD46     	 mov sp,r7
 229              	.LCFI20:
 230              	 .cfi_def_cfa_register 13
 231              	 
 232 000a 5DF8047B 	 ldr r7,[sp],#4
 233              	.LCFI21:
 234              	 .cfi_restore 7
 235              	 .cfi_def_cfa_offset 0
 236 000e 7047     	 bx lr
 237              	.L20:
 238              	 .align 2
 239              	.L19:
 240 0010 00000000 	 .word systemConfig_System
 241              	 .cfi_endproc
 242              	.LFE564:
 244              	 .section .text.modeActivationConditions,"ax",%progbits
 245              	 .align 2
 246              	 .thumb
 247              	 .thumb_func
 249              	modeActivationConditions:
 250              	.LFB571:
 251              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define BOXID_NONE 255
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     // ARM flag
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXARM = 0,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     // FLIGHT_MODE
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXANGLE,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXHORIZON,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXMAG,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBARO,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXGPSHOME,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXGPSHOLD,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXHEADFREE,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPASSTHRU,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXFAILSAFE,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXGPSRESCUE,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXID_FLIGHTMODE_LAST = BOXGPSRESCUE,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // When new flight modes are added, the parameter group version for 'modeActivationConditions' in s
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     // RCMODE flags
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXANTIGRAVITY,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXHEADADJ,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMSTAB,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBEEPERON,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXLEDLOW,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCALIB,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXOSD,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXTELEMETRY,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXSERVO1,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXSERVO2,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXSERVO3,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBLACKBOX,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXAIRMODE,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOX3D,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXFPVANGLEMIX,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBLACKBOXERASE,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMERA1,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMERA2,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMERA3,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXFLIPOVERAFTERCRASH,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPREARM,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBEEPGPSCOUNT,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXVTXPITMODE,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPARALYZE,
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER1,
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER2,
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER3,
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER4,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPIDAUDIO,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXACROTRAINER,
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     CHECKBOX_ITEM_COUNT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } boxId_e;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef enum {
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     MODELOGIC_OR = 0,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     MODELOGIC_AND
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } modeLogic_e;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // type to hold enough bits for CHECKBOX_ITEM_COUNT. Struct used for value-like behavior
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef struct boxBitmask_s { uint32_t bits[(CHECKBOX_ITEM_COUNT + 31) / 32]; } boxBitmask_t;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MAX_MODE_ACTIVATION_CONDITION_COUNT 20
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define CHANNEL_RANGE_MIN 900
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define CHANNEL_RANGE_MAX 2100
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MODE_STEP_TO_CHANNEL_VALUE(step) (CHANNEL_RANGE_MIN + 25 * step)
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define CHANNEL_VALUE_TO_STEP(channelValue) ((constrain(channelValue, CHANNEL_RANGE_MIN, CHANNEL_RA
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MIN_MODE_RANGE_STEP 0
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MAX_MODE_RANGE_STEP ((CHANNEL_RANGE_MAX - CHANNEL_RANGE_MIN) / 25)
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // steps are 25 apart
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // a value of 0 corresponds to a channel value of 900 or less
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // a value of 48 corresponds to a channel value of 2100 or more
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // 48 steps between 900 and 2100
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef struct channelRange_s {
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     uint8_t startStep;
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     uint8_t endStep;
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } channelRange_t;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef struct modeActivationCondition_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     boxId_e modeId;
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     uint8_t auxChannelIndex;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     channelRange_t range;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     modeLogic_e modeLogic;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     boxId_e linkedTo;
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } modeActivationCondition_t;
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** PG_DECLARE_ARRAY(modeActivationCondition_t, MAX_MODE_ACTIVATION_CONDITION_COUNT, modeActivationCond
 252              	 .loc 4 117 0
 253              	 .cfi_startproc
 254              	 
 255              	 
 256              	 
 257 0000 80B4     	 push {r7}
 258              	.LCFI22:
 259              	 .cfi_def_cfa_offset 4
 260              	 .cfi_offset 7,-4
 261 0002 83B0     	 sub sp,sp,#12
 262              	.LCFI23:
 263              	 .cfi_def_cfa_offset 16
 264 0004 00AF     	 add r7,sp,#0
 265              	.LCFI24:
 266              	 .cfi_def_cfa_register 7
 267 0006 7860     	 str r0,[r7,#4]
 268              	 .loc 4 117 0
 269 0008 7A68     	 ldr r2,[r7,#4]
 270 000a 1346     	 mov r3,r2
 271 000c 5B00     	 lsls r3,r3,#1
 272 000e 1344     	 add r3,r3,r2
 273 0010 5B00     	 lsls r3,r3,#1
 274 0012 044A     	 ldr r2,.L23
 275 0014 1344     	 add r3,r3,r2
 276 0016 1846     	 mov r0,r3
 277 0018 0C37     	 adds r7,r7,#12
 278              	.LCFI25:
 279              	 .cfi_def_cfa_offset 4
 280 001a BD46     	 mov sp,r7
 281              	.LCFI26:
 282              	 .cfi_def_cfa_register 13
 283              	 
 284 001c 5DF8047B 	 ldr r7,[sp],#4
 285              	.LCFI27:
 286              	 .cfi_restore 7
 287              	 .cfi_def_cfa_offset 0
 288 0020 7047     	 bx lr
 289              	.L24:
 290 0022 00BF     	 .align 2
 291              	.L23:
 292 0024 00000000 	 .word modeActivationConditions_SystemArray
 293              	 .cfi_endproc
 294              	.LFE571:
 296              	 .section .text.modeActivationConditionsMutable,"ax",%progbits
 297              	 .align 2
 298              	 .thumb
 299              	 .thumb_func
 301              	modeActivationConditionsMutable:
 302              	.LFB572:
 303              	 .loc 4 117 0
 304              	 .cfi_startproc
 305              	 
 306              	 
 307              	 
 308 0000 80B4     	 push {r7}
 309              	.LCFI28:
 310              	 .cfi_def_cfa_offset 4
 311              	 .cfi_offset 7,-4
 312 0002 83B0     	 sub sp,sp,#12
 313              	.LCFI29:
 314              	 .cfi_def_cfa_offset 16
 315 0004 00AF     	 add r7,sp,#0
 316              	.LCFI30:
 317              	 .cfi_def_cfa_register 7
 318 0006 7860     	 str r0,[r7,#4]
 319              	 .loc 4 117 0
 320 0008 7A68     	 ldr r2,[r7,#4]
 321 000a 1346     	 mov r3,r2
 322 000c 5B00     	 lsls r3,r3,#1
 323 000e 1344     	 add r3,r3,r2
 324 0010 5B00     	 lsls r3,r3,#1
 325 0012 044A     	 ldr r2,.L27
 326 0014 1344     	 add r3,r3,r2
 327 0016 1846     	 mov r0,r3
 328 0018 0C37     	 adds r7,r7,#12
 329              	.LCFI31:
 330              	 .cfi_def_cfa_offset 4
 331 001a BD46     	 mov sp,r7
 332              	.LCFI32:
 333              	 .cfi_def_cfa_register 13
 334              	 
 335 001c 5DF8047B 	 ldr r7,[sp],#4
 336              	.LCFI33:
 337              	 .cfi_restore 7
 338              	 .cfi_def_cfa_offset 0
 339 0020 7047     	 bx lr
 340              	.L28:
 341 0022 00BF     	 .align 2
 342              	.L27:
 343 0024 00000000 	 .word modeActivationConditions_SystemArray
 344              	 .cfi_endproc
 345              	.LFE572:
 347              	 .section .text.adjustmentRanges,"ax",%progbits
 348              	 .align 2
 349              	 .thumb
 350              	 .thumb_func
 352              	adjustmentRanges:
 353              	.LFB574:
 354              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_adjustments.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #include "pg/pg.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #include "fc/rc_modes.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef enum {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_NONE = 0,
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_RC_RATE,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_RC_EXPO,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_THROTTLE_EXPO,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_RATE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_RATE,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_P,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_I,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_D,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_P,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_I,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_D,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_RATE_PROFILE,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_RATE,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_RATE,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_P,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_I,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_D,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_P,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_I,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_D,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_RC_RATE_YAW,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_F,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_FEEDFORWARD_TRANSITION,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_HORIZON_STRENGTH,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_RC_RATE,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_RC_RATE,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_RC_EXPO,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_RC_EXPO,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PID_AUDIO,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_F,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_F,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_F,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_FUNCTION_COUNT
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentFunction_e;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef enum {
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_MODE_STEP,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_MODE_SELECT
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentMode_e;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef union adjustmentConfig_u {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t step;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t switchPositions;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentData_t;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef struct adjustmentConfig_s {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     adjustmentFunction_e adjustmentFunction;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     adjustmentMode_e mode;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     adjustmentData_t data;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentConfig_t;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #define MAX_ADJUSTMENT_RANGE_COUNT 15
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef struct adjustmentRange_s {
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     // when aux channel is in range...
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t auxChannelIndex;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     channelRange_t range;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     // ..then apply the adjustment function to the auxSwitchChannel ...
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t adjustmentFunction;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t auxSwitchChannelIndex;
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     // ... via slot
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t adjustmentIndex;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint16_t adjustmentCenter;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint16_t adjustmentScale;
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentRange_t;
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** PG_DECLARE_ARRAY(adjustmentRange_t, MAX_ADJUSTMENT_RANGE_COUNT, adjustmentRanges);
 355              	 .loc 5 97 0
 356              	 .cfi_startproc
 357              	 
 358              	 
 359              	 
 360 0000 80B4     	 push {r7}
 361              	.LCFI34:
 362              	 .cfi_def_cfa_offset 4
 363              	 .cfi_offset 7,-4
 364 0002 83B0     	 sub sp,sp,#12
 365              	.LCFI35:
 366              	 .cfi_def_cfa_offset 16
 367 0004 00AF     	 add r7,sp,#0
 368              	.LCFI36:
 369              	 .cfi_def_cfa_register 7
 370 0006 7860     	 str r0,[r7,#4]
 371              	 .loc 5 97 0
 372 0008 7A68     	 ldr r2,[r7,#4]
 373 000a 1346     	 mov r3,r2
 374 000c 9B00     	 lsls r3,r3,#2
 375 000e 1344     	 add r3,r3,r2
 376 0010 5B00     	 lsls r3,r3,#1
 377 0012 044A     	 ldr r2,.L31
 378 0014 1344     	 add r3,r3,r2
 379 0016 1846     	 mov r0,r3
 380 0018 0C37     	 adds r7,r7,#12
 381              	.LCFI37:
 382              	 .cfi_def_cfa_offset 4
 383 001a BD46     	 mov sp,r7
 384              	.LCFI38:
 385              	 .cfi_def_cfa_register 13
 386              	 
 387 001c 5DF8047B 	 ldr r7,[sp],#4
 388              	.LCFI39:
 389              	 .cfi_restore 7
 390              	 .cfi_def_cfa_offset 0
 391 0020 7047     	 bx lr
 392              	.L32:
 393 0022 00BF     	 .align 2
 394              	.L31:
 395 0024 00000000 	 .word adjustmentRanges_SystemArray
 396              	 .cfi_endproc
 397              	.LFE574:
 399              	 .section .text.adjustmentRangesMutable,"ax",%progbits
 400              	 .align 2
 401              	 .thumb
 402              	 .thumb_func
 404              	adjustmentRangesMutable:
 405              	.LFB575:
 406              	 .loc 5 97 0
 407              	 .cfi_startproc
 408              	 
 409              	 
 410              	 
 411 0000 80B4     	 push {r7}
 412              	.LCFI40:
 413              	 .cfi_def_cfa_offset 4
 414              	 .cfi_offset 7,-4
 415 0002 83B0     	 sub sp,sp,#12
 416              	.LCFI41:
 417              	 .cfi_def_cfa_offset 16
 418 0004 00AF     	 add r7,sp,#0
 419              	.LCFI42:
 420              	 .cfi_def_cfa_register 7
 421 0006 7860     	 str r0,[r7,#4]
 422              	 .loc 5 97 0
 423 0008 7A68     	 ldr r2,[r7,#4]
 424 000a 1346     	 mov r3,r2
 425 000c 9B00     	 lsls r3,r3,#2
 426 000e 1344     	 add r3,r3,r2
 427 0010 5B00     	 lsls r3,r3,#1
 428 0012 044A     	 ldr r2,.L35
 429 0014 1344     	 add r3,r3,r2
 430 0016 1846     	 mov r0,r3
 431 0018 0C37     	 adds r7,r7,#12
 432              	.LCFI43:
 433              	 .cfi_def_cfa_offset 4
 434 001a BD46     	 mov sp,r7
 435              	.LCFI44:
 436              	 .cfi_def_cfa_register 13
 437              	 
 438 001c 5DF8047B 	 ldr r7,[sp],#4
 439              	.LCFI45:
 440              	 .cfi_restore 7
 441              	 .cfi_def_cfa_offset 0
 442 0020 7047     	 bx lr
 443              	.L36:
 444 0022 00BF     	 .align 2
 445              	.L35:
 446 0024 00000000 	 .word adjustmentRanges_SystemArray
 447              	 .cfi_endproc
 448              	.LFE575:
 450              	 .section .text.customMotorMixer,"ax",%progbits
 451              	 .align 2
 452              	 .thumb
 453              	 .thumb_func
 455              	customMotorMixer:
 456              	.LFB587:
 457              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "platform.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "common/time.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output_counts.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/io_types.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output.h"
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define QUAD_MOTOR_COUNT 4
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHED_MOTORS_PWM_RATE 16000
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHLESS_MOTORS_PWM_RATE 480
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Digital protocol has fixed values
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_DISARM_COMMAND      0
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MIN_THROTTLE       48
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MAX_THROTTLE     2047
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_LOW  1047
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_HIGH 1048
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Note: this is called MultiType/MULTITYPE_* in baseflight.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef enum mixerMode
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** {
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_TRI = 1,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADP = 2,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX = 3,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_BICOPTER = 4,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_GIMBAL = 5,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y6 = 6,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6 = 7,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_FLYING_WING = 8,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y4 = 9,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6X = 10,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOX8 = 11,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATP = 12,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATX = 13,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_AIRPLANE = 14,        // airplane / singlecopter / dualcopter (not yet properly supported
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_120_CCPM = 15,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_90_DEG = 16,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_VTAIL4 = 17,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6H = 18,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_RX_TO_SERVO = 19,    // PPM -> servo relay
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_DUALCOPTER = 20,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_SINGLECOPTER = 21,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_ATAIL4 = 22,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM = 23,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_AIRPLANE = 24,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_TRI = 25,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX_1234 = 26
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerMode_e;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer data per motor
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct motorMixer_s {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float throttle;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float roll;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float pitch;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float yaw;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } motorMixer_t;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE_ARRAY(motorMixer_t, MAX_SUPPORTED_MOTORS, customMotorMixer);
 458              	 .loc 6 81 0
 459              	 .cfi_startproc
 460              	 
 461              	 
 462              	 
 463 0000 80B4     	 push {r7}
 464              	.LCFI46:
 465              	 .cfi_def_cfa_offset 4
 466              	 .cfi_offset 7,-4
 467 0002 83B0     	 sub sp,sp,#12
 468              	.LCFI47:
 469              	 .cfi_def_cfa_offset 16
 470 0004 00AF     	 add r7,sp,#0
 471              	.LCFI48:
 472              	 .cfi_def_cfa_register 7
 473 0006 7860     	 str r0,[r7,#4]
 474              	 .loc 6 81 0
 475 0008 7B68     	 ldr r3,[r7,#4]
 476 000a 1B01     	 lsls r3,r3,#4
 477 000c 034A     	 ldr r2,.L39
 478 000e 1344     	 add r3,r3,r2
 479 0010 1846     	 mov r0,r3
 480 0012 0C37     	 adds r7,r7,#12
 481              	.LCFI49:
 482              	 .cfi_def_cfa_offset 4
 483 0014 BD46     	 mov sp,r7
 484              	.LCFI50:
 485              	 .cfi_def_cfa_register 13
 486              	 
 487 0016 5DF8047B 	 ldr r7,[sp],#4
 488              	.LCFI51:
 489              	 .cfi_restore 7
 490              	 .cfi_def_cfa_offset 0
 491 001a 7047     	 bx lr
 492              	.L40:
 493              	 .align 2
 494              	.L39:
 495 001c 00000000 	 .word customMotorMixer_SystemArray
 496              	 .cfi_endproc
 497              	.LFE587:
 499              	 .section .text.customMotorMixerMutable,"ax",%progbits
 500              	 .align 2
 501              	 .thumb
 502              	 .thumb_func
 504              	customMotorMixerMutable:
 505              	.LFB588:
 506              	 .loc 6 81 0
 507              	 .cfi_startproc
 508              	 
 509              	 
 510              	 
 511 0000 80B4     	 push {r7}
 512              	.LCFI52:
 513              	 .cfi_def_cfa_offset 4
 514              	 .cfi_offset 7,-4
 515 0002 83B0     	 sub sp,sp,#12
 516              	.LCFI53:
 517              	 .cfi_def_cfa_offset 16
 518 0004 00AF     	 add r7,sp,#0
 519              	.LCFI54:
 520              	 .cfi_def_cfa_register 7
 521 0006 7860     	 str r0,[r7,#4]
 522              	 .loc 6 81 0
 523 0008 7B68     	 ldr r3,[r7,#4]
 524 000a 1B01     	 lsls r3,r3,#4
 525 000c 034A     	 ldr r2,.L43
 526 000e 1344     	 add r3,r3,r2
 527 0010 1846     	 mov r0,r3
 528 0012 0C37     	 adds r7,r7,#12
 529              	.LCFI55:
 530              	 .cfi_def_cfa_offset 4
 531 0014 BD46     	 mov sp,r7
 532              	.LCFI56:
 533              	 .cfi_def_cfa_register 13
 534              	 
 535 0016 5DF8047B 	 ldr r7,[sp],#4
 536              	.LCFI57:
 537              	 .cfi_restore 7
 538              	 .cfi_def_cfa_offset 0
 539 001a 7047     	 bx lr
 540              	.L44:
 541              	 .align 2
 542              	.L43:
 543 001c 00000000 	 .word customMotorMixer_SystemArray
 544              	 .cfi_endproc
 545              	.LFE588:
 547              	 .section .text.mixerConfig,"ax",%progbits
 548              	 .align 2
 549              	 .thumb
 550              	 .thumb_func
 552              	mixerConfig:
 553              	.LFB590:
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer configuration
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixer_s {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t motorCount;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t useServo;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     const motorMixer_t *motor;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixer_t;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixerConfig_s {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t mixerMode;
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     bool yaw_motors_reversed;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t crashflip_motor_percent;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerConfig_t;
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE(mixerConfig_t, mixerConfig);
 554              	 .loc 6 96 0
 555              	 .cfi_startproc
 556              	 
 557              	 
 558              	 
 559 0000 80B4     	 push {r7}
 560              	.LCFI58:
 561              	 .cfi_def_cfa_offset 4
 562              	 .cfi_offset 7,-4
 563 0002 00AF     	 add r7,sp,#0
 564              	.LCFI59:
 565              	 .cfi_def_cfa_register 7
 566              	 .loc 6 96 0
 567 0004 024B     	 ldr r3,.L47
 568 0006 1846     	 mov r0,r3
 569 0008 BD46     	 mov sp,r7
 570              	.LCFI60:
 571              	 .cfi_def_cfa_register 13
 572              	 
 573 000a 5DF8047B 	 ldr r7,[sp],#4
 574              	.LCFI61:
 575              	 .cfi_restore 7
 576              	 .cfi_def_cfa_offset 0
 577 000e 7047     	 bx lr
 578              	.L48:
 579              	 .align 2
 580              	.L47:
 581 0010 00000000 	 .word mixerConfig_System
 582              	 .cfi_endproc
 583              	.LFE590:
 585              	 .section .text.mixerConfigMutable,"ax",%progbits
 586              	 .align 2
 587              	 .thumb
 588              	 .thumb_func
 590              	mixerConfigMutable:
 591              	.LFB591:
 592              	 .loc 6 96 0
 593              	 .cfi_startproc
 594              	 
 595              	 
 596              	 
 597 0000 80B4     	 push {r7}
 598              	.LCFI62:
 599              	 .cfi_def_cfa_offset 4
 600              	 .cfi_offset 7,-4
 601 0002 00AF     	 add r7,sp,#0
 602              	.LCFI63:
 603              	 .cfi_def_cfa_register 7
 604              	 .loc 6 96 0
 605 0004 024B     	 ldr r3,.L51
 606 0006 1846     	 mov r0,r3
 607 0008 BD46     	 mov sp,r7
 608              	.LCFI64:
 609              	 .cfi_def_cfa_register 13
 610              	 
 611 000a 5DF8047B 	 ldr r7,[sp],#4
 612              	.LCFI65:
 613              	 .cfi_restore 7
 614              	 .cfi_def_cfa_offset 0
 615 000e 7047     	 bx lr
 616              	.L52:
 617              	 .align 2
 618              	.L51:
 619 0010 00000000 	 .word mixerConfig_System
 620              	 .cfi_endproc
 621              	.LFE591:
 623              	 .section .text.pidConfig,"ax",%progbits
 624              	 .align 2
 625              	 .thumb
 626              	 .thumb_func
 628              	pidConfig:
 629              	.LFB597:
 630              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define MAX_PID_PROCESS_DENOM       16
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_CONTROLLER_BETAFLIGHT   1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_MIXER_SCALING           1000.0f
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_SERVO_MIXER_SCALING     0.7f
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT                500
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_YAW            400
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MIN            100
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MAX            1000
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // Scaling factors for Pids for better tunable range in configurator for betaflight pid controller.
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PTERM_SCALE 0.032029f
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define ITERM_SCALE 0.244381f
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define DTERM_SCALE 0.000529f
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // The constant scale factor to replace the Kd component of the feedforward calculation.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // This value gives the same "feel" as the previous Kd default of 26 (26 * DTERM_SCALE)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define FEEDFORWARD_SCALE 0.013754f
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ROLL,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_PITCH,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_YAW,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_LEVEL,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_MAG,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ITEM_COUNT
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidIndex_e;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_OFF = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ON,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ALWAYS
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidSuperExpoYaw_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_OFF = 0,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_ON
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidStabilisationState_e;
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_OFF = 0,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_ON,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_BEEP
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidCrashRecovery_e;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidf_s {
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t P;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t I;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t D;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t F;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidf_t;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_SMOOTH,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_STEP
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } antiGravityMode_e;
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_OFF,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP_INC,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY_INC
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelax_e;
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_GYRO,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_SETPOINT
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelaxType_e;
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidProfile_s {
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yaw_lowpass_hz;                // Additional yaw filter when yaw axis too noisy
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass_hz;              // Delta Filter in hz
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_hz;                // Biquad dterm notch hz
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_cutoff;            // Biquad dterm notch low cutoff
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     pidf_t  pid[PID_ITEM_COUNT];
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t dterm_filter_type;              // Filter selection for dterm
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t itermWindupPointPercent;        // Experimental ITerm windup threshold, percent motor s
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimit;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimitYaw;
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pidAtMinThrottle;               // Disable/Enable pids on zero throttle. Normally even 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t levelAngleLimit;                // Max angle in degrees in level mode
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_effect;            // inclination factor for Horizon mode
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_expert_mode;       // OFF or ON
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     // Betaflight PID controller parameters
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t  antiGravityMode;             // type of anti gravity method
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermThrottleThreshold;        // max allowed throttle delta before iterm accelerated 
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermAcceleratorGain;          // Iterm Accelerator Gain when itermThrottlethreshold i
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yawRateAccelLimit;             // yaw accel limiter for deg/sec/ms
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t rateAccelLimit;                // accel limiter roll/pitch deg/sec/ms
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_dthreshold;              // dterm crash value
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_gthreshold;              // gyro crash value
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_setpoint_threshold;      // setpoint must be below this value to detect crash, s
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_time;                    // ms
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_delay;                   // ms
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_angle;           // degrees
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_rate;            // degree/second
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t vbatPidCompensation;            // Scale PIDsum to battery voltage
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t feedForwardTransition;          // Feed forward weight transition
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_limit_yaw;               // limits yaw errorRate, so crashes don't cause huge th
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermLimit;
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass2_hz;             // Extra PT1 Filter on D in hz
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery;                 // off, on, on and beeps when it is in crash recovery m
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost;                 // how much should throttle be boosted during transient
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost_cutoff;          // Which cutoff frequency to use for throttle boost. hi
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_rotation;                 // rotates iterm to translate world errors to local coo
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t smart_feedforward;              // takes only the larger of P and the D weight feed for
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_type;               // Specifies type of relax algorithm
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_cutoff;             // This cutoff frequency specifies a low pass filter wh
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax;                    // Enable iterm suppression during stick input
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_angle_limit;       // Acro trainer roll/pitch angle limit in degrees
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_debug_axis;        // The axis for which record debugging values are captu
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_gain;              // The strength of the limiting. Raising may reduce ove
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t acro_trainer_lookahead_ms;     // The lookahead window in milliseconds used to reduce 
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_gain;               // How strongly should the absolute accumulated error b
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_limit;              // Limit to the correction
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_error_limit;        // Limit to the accumulated error
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidProfile_t;
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #ifndef USE_OSD_SLAVE
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE_ARRAY(pidProfile_t, MAX_PROFILE_COUNT, pidProfiles);
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #endif
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidConfig_s {
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pid_process_denom;              // Processing denominator for PID controller vs gyro sa
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_prevention;          // off, on - enables pidsum runaway disarm logic
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t runaway_takeoff_deactivate_delay;   // delay in ms for "in-flight" conditions before d
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_deactivate_throttle; // minimum throttle percent required during deacti
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidConfig_t;
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE(pidConfig_t, pidConfig);
 631              	 .loc 7 161 0
 632              	 .cfi_startproc
 633              	 
 634              	 
 635              	 
 636 0000 80B4     	 push {r7}
 637              	.LCFI66:
 638              	 .cfi_def_cfa_offset 4
 639              	 .cfi_offset 7,-4
 640 0002 00AF     	 add r7,sp,#0
 641              	.LCFI67:
 642              	 .cfi_def_cfa_register 7
 643              	 .loc 7 161 0
 644 0004 024B     	 ldr r3,.L55
 645 0006 1846     	 mov r0,r3
 646 0008 BD46     	 mov sp,r7
 647              	.LCFI68:
 648              	 .cfi_def_cfa_register 13
 649              	 
 650 000a 5DF8047B 	 ldr r7,[sp],#4
 651              	.LCFI69:
 652              	 .cfi_restore 7
 653              	 .cfi_def_cfa_offset 0
 654 000e 7047     	 bx lr
 655              	.L56:
 656              	 .align 2
 657              	.L55:
 658 0010 00000000 	 .word pidConfig_System
 659              	 .cfi_endproc
 660              	.LFE597:
 662              	 .comm inputSource_e,1,1
 663              	 .section .text.customServoMixers,"ax",%progbits
 664              	 .align 2
 665              	 .thumb
 666              	 .thumb_func
 668              	customServoMixers:
 669              	.LFB599:
 670              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/servos.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "drivers/io_types.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "drivers/pwm_output.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // These must be consecutive, see 'reversedSources'
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** enum {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_ROLL = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_PITCH,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_YAW,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_THROTTLE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_ROLL,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_PITCH,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_YAW,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_THROTTLE,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX1,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX2,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX3,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX4,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_GIMBAL_PITCH,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_GIMBAL_ROLL,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_SOURCE_COUNT
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } inputSource_e;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // target servo channels
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef enum {
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_GIMBAL_PITCH = 0,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_GIMBAL_ROLL = 1,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPS = 2,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPPERON_1 = 3,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPPERON_2 = 4,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_RUDDER = 5,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_ELEVATOR = 6,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_THROTTLE = 7, // for internal combustion (IC) planes
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_BICOPTER_LEFT = 4,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_BICOPTER_RIGHT = 5,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_DUALCOPTER_LEFT = 4,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_DUALCOPTER_RIGHT = 5,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_1 = 3,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_2 = 4,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_3 = 5,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_4 = 6,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_LEFT = 0,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_RIGHT = 1,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_TOP = 2,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_RUD = 3
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoIndex_e; // FIXME rename to servoChannel_e
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_PLANE_INDEX_MIN SERVO_FLAPS
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_PLANE_INDEX_MAX SERVO_THROTTLE
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_DUALCOPTER_INDEX_MIN SERVO_DUALCOPTER_LEFT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_DUALCOPTER_INDEX_MAX SERVO_DUALCOPTER_RIGHT
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_SINGLECOPTER_INDEX_MIN SERVO_SINGLECOPTER_1
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_SINGLECOPTER_INDEX_MAX SERVO_SINGLECOPTER_4
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_FLAPPERONS_MIN SERVO_FLAPPERON_1
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_FLAPPERONS_MAX SERVO_FLAPPERON_2
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_RULES (2 * MAX_SUPPORTED_SERVOS)
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoMixer_s {
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t targetChannel;                  // servo that receives the output of the rule
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t inputSource;                    // input channel for this rule
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t rate;                            // range [-125;+125] ; can be used to adjust a rate 0-1
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t speed;                          // reduces the speed of the rule, 0=unlimited speed
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t min;                             // lower bound of rule range [0;100]% of servo max-min
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t max;                             // lower bound of rule range [0;100]% of servo max-min
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t box;                            // active rule if box is enabled, range [0;3], 0=no box
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoMixer_t;
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE_ARRAY(servoMixer_t, MAX_SERVO_RULES, customServoMixers);
 671              	 .loc 8 99 0
 672              	 .cfi_startproc
 673              	 
 674              	 
 675              	 
 676 0000 80B4     	 push {r7}
 677              	.LCFI70:
 678              	 .cfi_def_cfa_offset 4
 679              	 .cfi_offset 7,-4
 680 0002 83B0     	 sub sp,sp,#12
 681              	.LCFI71:
 682              	 .cfi_def_cfa_offset 16
 683 0004 00AF     	 add r7,sp,#0
 684              	.LCFI72:
 685              	 .cfi_def_cfa_register 7
 686 0006 7860     	 str r0,[r7,#4]
 687              	 .loc 8 99 0
 688 0008 7A68     	 ldr r2,[r7,#4]
 689 000a 1346     	 mov r3,r2
 690 000c DB00     	 lsls r3,r3,#3
 691 000e 9B1A     	 subs r3,r3,r2
 692 0010 034A     	 ldr r2,.L59
 693 0012 1344     	 add r3,r3,r2
 694 0014 1846     	 mov r0,r3
 695 0016 0C37     	 adds r7,r7,#12
 696              	.LCFI73:
 697              	 .cfi_def_cfa_offset 4
 698 0018 BD46     	 mov sp,r7
 699              	.LCFI74:
 700              	 .cfi_def_cfa_register 13
 701              	 
 702 001a 5DF8047B 	 ldr r7,[sp],#4
 703              	.LCFI75:
 704              	 .cfi_restore 7
 705              	 .cfi_def_cfa_offset 0
 706 001e 7047     	 bx lr
 707              	.L60:
 708              	 .align 2
 709              	.L59:
 710 0020 00000000 	 .word customServoMixers_SystemArray
 711              	 .cfi_endproc
 712              	.LFE599:
 714              	 .section .text.customServoMixersMutable,"ax",%progbits
 715              	 .align 2
 716              	 .thumb
 717              	 .thumb_func
 719              	customServoMixersMutable:
 720              	.LFB600:
 721              	 .loc 8 99 0
 722              	 .cfi_startproc
 723              	 
 724              	 
 725              	 
 726 0000 80B4     	 push {r7}
 727              	.LCFI76:
 728              	 .cfi_def_cfa_offset 4
 729              	 .cfi_offset 7,-4
 730 0002 83B0     	 sub sp,sp,#12
 731              	.LCFI77:
 732              	 .cfi_def_cfa_offset 16
 733 0004 00AF     	 add r7,sp,#0
 734              	.LCFI78:
 735              	 .cfi_def_cfa_register 7
 736 0006 7860     	 str r0,[r7,#4]
 737              	 .loc 8 99 0
 738 0008 7A68     	 ldr r2,[r7,#4]
 739 000a 1346     	 mov r3,r2
 740 000c DB00     	 lsls r3,r3,#3
 741 000e 9B1A     	 subs r3,r3,r2
 742 0010 034A     	 ldr r2,.L63
 743 0012 1344     	 add r3,r3,r2
 744 0014 1846     	 mov r0,r3
 745 0016 0C37     	 adds r7,r7,#12
 746              	.LCFI79:
 747              	 .cfi_def_cfa_offset 4
 748 0018 BD46     	 mov sp,r7
 749              	.LCFI80:
 750              	 .cfi_def_cfa_register 13
 751              	 
 752 001a 5DF8047B 	 ldr r7,[sp],#4
 753              	.LCFI81:
 754              	 .cfi_restore 7
 755              	 .cfi_def_cfa_offset 0
 756 001e 7047     	 bx lr
 757              	.L64:
 758              	 .align 2
 759              	.L63:
 760 0020 00000000 	 .word customServoMixers_SystemArray
 761              	 .cfi_endproc
 762              	.LFE600:
 764              	 .section .text.customServoMixers_array,"ax",%progbits
 765              	 .align 2
 766              	 .thumb
 767              	 .thumb_func
 769              	customServoMixers_array:
 770              	.LFB601:
 771              	 .loc 8 99 0
 772              	 .cfi_startproc
 773              	 
 774              	 
 775              	 
 776 0000 80B4     	 push {r7}
 777              	.LCFI82:
 778              	 .cfi_def_cfa_offset 4
 779              	 .cfi_offset 7,-4
 780 0002 00AF     	 add r7,sp,#0
 781              	.LCFI83:
 782              	 .cfi_def_cfa_register 7
 783              	 .loc 8 99 0
 784 0004 024B     	 ldr r3,.L67
 785 0006 1846     	 mov r0,r3
 786 0008 BD46     	 mov sp,r7
 787              	.LCFI84:
 788              	 .cfi_def_cfa_register 13
 789              	 
 790 000a 5DF8047B 	 ldr r7,[sp],#4
 791              	.LCFI85:
 792              	 .cfi_restore 7
 793              	 .cfi_def_cfa_offset 0
 794 000e 7047     	 bx lr
 795              	.L68:
 796              	 .align 2
 797              	.L67:
 798 0010 00000000 	 .word customServoMixers_SystemArray
 799              	 .cfi_endproc
 800              	.LFE601:
 802              	 .section .text.servoParams,"ax",%progbits
 803              	 .align 2
 804              	 .thumb
 805              	 .thumb_func
 807              	servoParams:
 808              	.LFB602:
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_SPEED UINT8_MAX
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_BOXES 3
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // Custom mixer configuration
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct mixerRules_s {
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t servoRuleCount;
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     const servoMixer_t *rule;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } mixerRules_t;
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** extern const mixerRules_t servoMixers[];
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoParam_s {
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint32_t reversedSources;               // the direction of servo movement for each input sourc
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t min;                            // servo min
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t max;                            // servo max
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t middle;                         // servo middle
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t rate;                            // range [-125;+125] ; can be used to adjust a rate 0-1
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t forwardFromChannel;              // RX channel index, 0 based.  See CHANNEL_FORWARDING_D
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoParam_t;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE_ARRAY(servoParam_t, MAX_SUPPORTED_SERVOS, servoParams);
 809              	 .loc 8 121 0
 810              	 .cfi_startproc
 811              	 
 812              	 
 813              	 
 814 0000 80B4     	 push {r7}
 815              	.LCFI86:
 816              	 .cfi_def_cfa_offset 4
 817              	 .cfi_offset 7,-4
 818 0002 83B0     	 sub sp,sp,#12
 819              	.LCFI87:
 820              	 .cfi_def_cfa_offset 16
 821 0004 00AF     	 add r7,sp,#0
 822              	.LCFI88:
 823              	 .cfi_def_cfa_register 7
 824 0006 7860     	 str r0,[r7,#4]
 825              	 .loc 8 121 0
 826 0008 7A68     	 ldr r2,[r7,#4]
 827 000a 1346     	 mov r3,r2
 828 000c 5B00     	 lsls r3,r3,#1
 829 000e 1344     	 add r3,r3,r2
 830 0010 9B00     	 lsls r3,r3,#2
 831 0012 044A     	 ldr r2,.L71
 832 0014 1344     	 add r3,r3,r2
 833 0016 1846     	 mov r0,r3
 834 0018 0C37     	 adds r7,r7,#12
 835              	.LCFI89:
 836              	 .cfi_def_cfa_offset 4
 837 001a BD46     	 mov sp,r7
 838              	.LCFI90:
 839              	 .cfi_def_cfa_register 13
 840              	 
 841 001c 5DF8047B 	 ldr r7,[sp],#4
 842              	.LCFI91:
 843              	 .cfi_restore 7
 844              	 .cfi_def_cfa_offset 0
 845 0020 7047     	 bx lr
 846              	.L72:
 847 0022 00BF     	 .align 2
 848              	.L71:
 849 0024 00000000 	 .word servoParams_SystemArray
 850              	 .cfi_endproc
 851              	.LFE602:
 853              	 .section .text.servoParamsMutable,"ax",%progbits
 854              	 .align 2
 855              	 .thumb
 856              	 .thumb_func
 858              	servoParamsMutable:
 859              	.LFB603:
 860              	 .loc 8 121 0
 861              	 .cfi_startproc
 862              	 
 863              	 
 864              	 
 865 0000 80B4     	 push {r7}
 866              	.LCFI92:
 867              	 .cfi_def_cfa_offset 4
 868              	 .cfi_offset 7,-4
 869 0002 83B0     	 sub sp,sp,#12
 870              	.LCFI93:
 871              	 .cfi_def_cfa_offset 16
 872 0004 00AF     	 add r7,sp,#0
 873              	.LCFI94:
 874              	 .cfi_def_cfa_register 7
 875 0006 7860     	 str r0,[r7,#4]
 876              	 .loc 8 121 0
 877 0008 7A68     	 ldr r2,[r7,#4]
 878 000a 1346     	 mov r3,r2
 879 000c 5B00     	 lsls r3,r3,#1
 880 000e 1344     	 add r3,r3,r2
 881 0010 9B00     	 lsls r3,r3,#2
 882 0012 044A     	 ldr r2,.L75
 883 0014 1344     	 add r3,r3,r2
 884 0016 1846     	 mov r0,r3
 885 0018 0C37     	 adds r7,r7,#12
 886              	.LCFI95:
 887              	 .cfi_def_cfa_offset 4
 888 001a BD46     	 mov sp,r7
 889              	.LCFI96:
 890              	 .cfi_def_cfa_register 13
 891              	 
 892 001c 5DF8047B 	 ldr r7,[sp],#4
 893              	.LCFI97:
 894              	 .cfi_restore 7
 895              	 .cfi_def_cfa_offset 0
 896 0020 7047     	 bx lr
 897              	.L76:
 898 0022 00BF     	 .align 2
 899              	.L75:
 900 0024 00000000 	 .word servoParams_SystemArray
 901              	 .cfi_endproc
 902              	.LFE603:
 904              	 .comm colors,4,4
 905              	 .comm modeColors,4,4
 906              	 .comm specialColors,11,4
 907              	 .section .text.serialConfig,"ax",%progbits
 908              	 .align 2
 909              	 .thumb
 910              	 .thumb_func
 912              	serialConfig:
 913              	.LFB625:
 914              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include <stdbool.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include "drivers/serial.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_UNUSED = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_NOT_SHARED,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_SHARED
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } portSharing_e;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_NONE                = 0,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_MSP                 = (1 << 0),  // 1
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_GPS                 = (1 << 1),  // 2
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_FRSKY_HUB = (1 << 2),  // 4
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_HOTT      = (1 << 3),  // 8
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_LTM       = (1 << 4),  // 16
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_SMARTPORT = (1 << 5),  // 32
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_RX_SERIAL           = (1 << 6),  // 64
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_BLACKBOX            = (1 << 7),  // 128
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_MAVLINK   = (1 << 9),  // 512
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_ESC_SENSOR          = (1 << 10), // 1024
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_VTX_SMARTAUDIO      = (1 << 11), // 2048
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_IBUS      = (1 << 12), // 4096
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_VTX_TRAMP           = (1 << 13), // 8192
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_RCDEVICE            = (1 << 14), // 16384
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_LIDAR_TF            = (1 << 15), // 32768
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortFunction_e;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK (FUNCTION_TELEMETRY_FRSKY_HUB | FUNCTION_TELEMETRY_
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define TELEMETRY_PORT_FUNCTIONS_MASK (TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK | FUNCTION_TELEMETRY
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_AUTO = 0,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_9600,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_19200,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_38400,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_57600,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_115200,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_230400,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_250000,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_400000,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_460800,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_500000,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_921600,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_1000000,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_1500000,
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_2000000,
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_2470000
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } baudRate_e;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** extern const uint32_t baudRates[];
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // serial port identifiers are now fixed, these values are used by MSP commands.
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_NONE = -1,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART1 = 0,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART2,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART3,
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_UART4,
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_UART5,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART6,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART7,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART8,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USB_VCP = 20,
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_SOFTSERIAL1 = 30,
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_SOFTSERIAL2,
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS1 = 40,
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS2,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS3,
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS4,
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS5,
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS6,
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortIdentifier_e;
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** extern const serialPortIdentifier_e serialPortIdentifiers[SERIAL_PORT_COUNT];
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define SERIAL_PORT_IDENTIFIER_TO_INDEX(x) (((x) <= SERIAL_PORT_USART8) ? (x) : (RESOURCE_SOFT_OFFS
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define SERIAL_PORT_IDENTIFIER_TO_UARTDEV(x) ((x) - SERIAL_PORT_USART1 + UARTDEV_1)
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // runtime
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialPortUsage_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPort_t *serialPort;
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortFunction_e function;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortIdentifier_e identifier;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortUsage_t;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** serialPort_t *findSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // configuration
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialPortConfig_s {
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint16_t functionMask;
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortIdentifier_e identifier;
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t msp_baudrateIndex;
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t gps_baudrateIndex;
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t blackbox_baudrateIndex;
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t telemetry_baudrateIndex; // not used for all telemetry systems, e.g. HoTT only works at
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortConfig_t;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialConfig_s {
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortConfig_t portConfigs[SERIAL_PORT_COUNT];
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint16_t serial_update_rate_hz;
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t reboot_character;               // which byte is used to reboot. Default 'R', could be 
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialConfig_t;
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** PG_DECLARE(serialConfig_t, serialConfig);
 915              	 .loc 9 135 0
 916              	 .cfi_startproc
 917              	 
 918              	 
 919              	 
 920 0000 80B4     	 push {r7}
 921              	.LCFI98:
 922              	 .cfi_def_cfa_offset 4
 923              	 .cfi_offset 7,-4
 924 0002 00AF     	 add r7,sp,#0
 925              	.LCFI99:
 926              	 .cfi_def_cfa_register 7
 927              	 .loc 9 135 0
 928 0004 024B     	 ldr r3,.L79
 929 0006 1846     	 mov r0,r3
 930 0008 BD46     	 mov sp,r7
 931              	.LCFI100:
 932              	 .cfi_def_cfa_register 13
 933              	 
 934 000a 5DF8047B 	 ldr r7,[sp],#4
 935              	.LCFI101:
 936              	 .cfi_restore 7
 937              	 .cfi_def_cfa_offset 0
 938 000e 7047     	 bx lr
 939              	.L80:
 940              	 .align 2
 941              	.L79:
 942 0010 00000000 	 .word serialConfig_System
 943              	 .cfi_endproc
 944              	.LFE625:
 946              	 .section .text.vtxConfig,"ax",%progbits
 947              	 .align 2
 948              	 .thumb
 949              	 .thumb_func
 951              	vtxConfig:
 952              	.LFB629:
 953              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx_control.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include "platform.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include "pg/pg.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include "fc/rc_modes.h"
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #define MAX_CHANNEL_ACTIVATION_CONDITION_COUNT  10
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** typedef struct vtxChannelActivationCondition_s {
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     uint8_t auxChannelIndex;
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     uint8_t band;
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     uint8_t channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     channelRange_t range;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** } vtxChannelActivationCondition_t;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** typedef struct vtxConfig_s {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     vtxChannelActivationCondition_t vtxChannelActivationConditions[MAX_CHANNEL_ACTIVATION_CONDITION
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     uint8_t halfDuplex;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** } vtxConfig_t;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** PG_DECLARE(vtxConfig_t, vtxConfig);
 954              	 .loc 10 45 0
 955              	 .cfi_startproc
 956              	 
 957              	 
 958              	 
 959 0000 80B4     	 push {r7}
 960              	.LCFI102:
 961              	 .cfi_def_cfa_offset 4
 962              	 .cfi_offset 7,-4
 963 0002 00AF     	 add r7,sp,#0
 964              	.LCFI103:
 965              	 .cfi_def_cfa_register 7
 966              	 .loc 10 45 0
 967 0004 024B     	 ldr r3,.L83
 968 0006 1846     	 mov r0,r3
 969 0008 BD46     	 mov sp,r7
 970              	.LCFI104:
 971              	 .cfi_def_cfa_register 13
 972              	 
 973 000a 5DF8047B 	 ldr r7,[sp],#4
 974              	.LCFI105:
 975              	 .cfi_restore 7
 976              	 .cfi_def_cfa_offset 0
 977 000e 7047     	 bx lr
 978              	.L84:
 979              	 .align 2
 980              	.L83:
 981 0010 00000000 	 .word vtxConfig_System
 982              	 .cfi_endproc
 983              	.LFE629:
 985              	 .section .text.vtxConfigMutable,"ax",%progbits
 986              	 .align 2
 987              	 .thumb
 988              	 .thumb_func
 990              	vtxConfigMutable:
 991              	.LFB630:
 992              	 .loc 10 45 0
 993              	 .cfi_startproc
 994              	 
 995              	 
 996              	 
 997 0000 80B4     	 push {r7}
 998              	.LCFI106:
 999              	 .cfi_def_cfa_offset 4
 1000              	 .cfi_offset 7,-4
 1001 0002 00AF     	 add r7,sp,#0
 1002              	.LCFI107:
 1003              	 .cfi_def_cfa_register 7
 1004              	 .loc 10 45 0
 1005 0004 024B     	 ldr r3,.L87
 1006 0006 1846     	 mov r0,r3
 1007 0008 BD46     	 mov sp,r7
 1008              	.LCFI108:
 1009              	 .cfi_def_cfa_register 13
 1010              	 
 1011 000a 5DF8047B 	 ldr r7,[sp],#4
 1012              	.LCFI109:
 1013              	 .cfi_restore 7
 1014              	 .cfi_def_cfa_offset 0
 1015 000e 7047     	 bx lr
 1016              	.L88:
 1017              	 .align 2
 1018              	.L87:
 1019 0010 00000000 	 .word vtxConfig_System
 1020              	 .cfi_endproc
 1021              	.LFE630:
 1023              	 .section .text.rxConfig,"ax",%progbits
 1024              	 .align 2
 1025              	 .thumb
 1026              	 .thumb_func
 1028              	rxConfig:
 1029              	.LFB657:
 1030              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
 1031              	 .loc 11 61 0
 1032              	 .cfi_startproc
 1033              	 
 1034              	 
 1035              	 
 1036 0000 80B4     	 push {r7}
 1037              	.LCFI110:
 1038              	 .cfi_def_cfa_offset 4
 1039              	 .cfi_offset 7,-4
 1040 0002 00AF     	 add r7,sp,#0
 1041              	.LCFI111:
 1042              	 .cfi_def_cfa_register 7
 1043              	 .loc 11 61 0
 1044 0004 024B     	 ldr r3,.L91
 1045 0006 1846     	 mov r0,r3
 1046 0008 BD46     	 mov sp,r7
 1047              	.LCFI112:
 1048              	 .cfi_def_cfa_register 13
 1049              	 
 1050 000a 5DF8047B 	 ldr r7,[sp],#4
 1051              	.LCFI113:
 1052              	 .cfi_restore 7
 1053              	 .cfi_def_cfa_offset 0
 1054 000e 7047     	 bx lr
 1055              	.L92:
 1056              	 .align 2
 1057              	.L91:
 1058 0010 00000000 	 .word rxConfig_System
 1059              	 .cfi_endproc
 1060              	.LFE657:
 1062              	 .section .text.rxConfigMutable,"ax",%progbits
 1063              	 .align 2
 1064              	 .thumb
 1065              	 .thumb_func
 1067              	rxConfigMutable:
 1068              	.LFB658:
 1069              	 .loc 11 61 0
 1070              	 .cfi_startproc
 1071              	 
 1072              	 
 1073              	 
 1074 0000 80B4     	 push {r7}
 1075              	.LCFI114:
 1076              	 .cfi_def_cfa_offset 4
 1077              	 .cfi_offset 7,-4
 1078 0002 00AF     	 add r7,sp,#0
 1079              	.LCFI115:
 1080              	 .cfi_def_cfa_register 7
 1081              	 .loc 11 61 0
 1082 0004 024B     	 ldr r3,.L95
 1083 0006 1846     	 mov r0,r3
 1084 0008 BD46     	 mov sp,r7
 1085              	.LCFI116:
 1086              	 .cfi_def_cfa_register 13
 1087              	 
 1088 000a 5DF8047B 	 ldr r7,[sp],#4
 1089              	.LCFI117:
 1090              	 .cfi_restore 7
 1091              	 .cfi_def_cfa_offset 0
 1092 000e 7047     	 bx lr
 1093              	.L96:
 1094              	 .align 2
 1095              	.L95:
 1096 0010 00000000 	 .word rxConfig_System
 1097              	 .cfi_endproc
 1098              	.LFE658:
 1100              	 .section .text.rxFailsafeChannelConfigs,"ax",%progbits
 1101              	 .align 2
 1102              	 .thumb
 1103              	 .thumb_func
 1105              	rxFailsafeChannelConfigs:
 1106              	.LFB667:
 1107              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "pg/rx.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "drivers/io_types.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define STICK_CHANNEL_COUNT 4
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_RANGE_MIN 1000
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_RANGE_MAX 2000
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_RANGE_MIDDLE (PWM_RANGE_MIN + ((PWM_RANGE_MAX - PWM_RANGE_MIN) / 2))
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_PULSE_MIN   750       // minimum PWM pulse width which is considered valid
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_PULSE_MAX   2250      // maximum PWM pulse width which is considered valid
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RXFAIL_STEP_TO_CHANNEL_VALUE(step) (PWM_PULSE_MIN + 25 * step)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define CHANNEL_VALUE_TO_RXFAIL_STEP(channelValue) ((constrain(channelValue, PWM_PULSE_MIN, PWM_PUL
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_RXFAIL_RANGE_STEP ((PWM_PULSE_MAX - PWM_PULSE_MIN) / 25)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define DEFAULT_SERVO_MIN 1000
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define DEFAULT_SERVO_MIDDLE 1500
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define DEFAULT_SERVO_MAX 2000
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_PENDING = 0,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_COMPLETE = (1 << 0),
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_FAILSAFE = (1 << 1),
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_PROCESSING_REQUIRED = (1 << 2),
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_DROPPED = (1 << 3)
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFrameState_e;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SPEKTRUM1024 = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SPEKTRUM2048 = 1,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SBUS = 2,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SUMD = 3,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SUMH = 4,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_XBUS_MODE_B = 5,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_XBUS_MODE_B_RJ01 = 6,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_IBUS = 7,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_JETIEXBUS = 8,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_CRSF = 9,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SRXL = 10,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_TARGET_CUSTOM = 11,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_FPORT = 12,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } SerialRXType;
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT          12
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_COUNT  8
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RC_CHANNEL_COUNT              18
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define NON_AUX_CHANNEL_COUNT 4
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_AUX_CHANNEL_COUNT (MAX_SUPPORTED_RC_CHANNEL_COUNT - NON_AUX_CHANNEL_COUNT)
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #if MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_COUNT > MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_CO
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #else
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #endif
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** extern const char rcChannelLetters[];
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** extern int16_t rcData[MAX_SUPPORTED_RC_CHANNEL_COUNT];       // interval [1000;2000]
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RSSI_SCALE_MIN 1
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RSSI_SCALE_MAX 255
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RSSI_SCALE_DEFAULT 100
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_AUTO = 0,
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_HOLD,
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_SET,
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_INVALID
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFailsafeChannelMode_e;
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RX_FAILSAFE_MODE_COUNT 3
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_TYPE_FLIGHT = 0,
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_TYPE_AUX
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFailsafeChannelType_e;
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RX_FAILSAFE_TYPE_COUNT 2
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef struct rxFailsafeChannelConfig_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint8_t mode; // See rxFailsafeChannelMode_e
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint8_t step;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFailsafeChannelConfig_t;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** PG_DECLARE_ARRAY(rxFailsafeChannelConfig_t, MAX_SUPPORTED_RC_CHANNEL_COUNT, rxFailsafeChannelConfig
 1108              	 .loc 12 114 0
 1109              	 .cfi_startproc
 1110              	 
 1111              	 
 1112              	 
 1113 0000 80B4     	 push {r7}
 1114              	.LCFI118:
 1115              	 .cfi_def_cfa_offset 4
 1116              	 .cfi_offset 7,-4
 1117 0002 83B0     	 sub sp,sp,#12
 1118              	.LCFI119:
 1119              	 .cfi_def_cfa_offset 16
 1120 0004 00AF     	 add r7,sp,#0
 1121              	.LCFI120:
 1122              	 .cfi_def_cfa_register 7
 1123 0006 7860     	 str r0,[r7,#4]
 1124              	 .loc 12 114 0
 1125 0008 7B68     	 ldr r3,[r7,#4]
 1126 000a 5B00     	 lsls r3,r3,#1
 1127 000c 034A     	 ldr r2,.L99
 1128 000e 1344     	 add r3,r3,r2
 1129 0010 1846     	 mov r0,r3
 1130 0012 0C37     	 adds r7,r7,#12
 1131              	.LCFI121:
 1132              	 .cfi_def_cfa_offset 4
 1133 0014 BD46     	 mov sp,r7
 1134              	.LCFI122:
 1135              	 .cfi_def_cfa_register 13
 1136              	 
 1137 0016 5DF8047B 	 ldr r7,[sp],#4
 1138              	.LCFI123:
 1139              	 .cfi_restore 7
 1140              	 .cfi_def_cfa_offset 0
 1141 001a 7047     	 bx lr
 1142              	.L100:
 1143              	 .align 2
 1144              	.L99:
 1145 001c 00000000 	 .word rxFailsafeChannelConfigs_SystemArray
 1146              	 .cfi_endproc
 1147              	.LFE667:
 1149              	 .section .text.rxFailsafeChannelConfigsMutable,"ax",%progbits
 1150              	 .align 2
 1151              	 .thumb
 1152              	 .thumb_func
 1154              	rxFailsafeChannelConfigsMutable:
 1155              	.LFB668:
 1156              	 .loc 12 114 0
 1157              	 .cfi_startproc
 1158              	 
 1159              	 
 1160              	 
 1161 0000 80B4     	 push {r7}
 1162              	.LCFI124:
 1163              	 .cfi_def_cfa_offset 4
 1164              	 .cfi_offset 7,-4
 1165 0002 83B0     	 sub sp,sp,#12
 1166              	.LCFI125:
 1167              	 .cfi_def_cfa_offset 16
 1168 0004 00AF     	 add r7,sp,#0
 1169              	.LCFI126:
 1170              	 .cfi_def_cfa_register 7
 1171 0006 7860     	 str r0,[r7,#4]
 1172              	 .loc 12 114 0
 1173 0008 7B68     	 ldr r3,[r7,#4]
 1174 000a 5B00     	 lsls r3,r3,#1
 1175 000c 034A     	 ldr r2,.L103
 1176 000e 1344     	 add r3,r3,r2
 1177 0010 1846     	 mov r0,r3
 1178 0012 0C37     	 adds r7,r7,#12
 1179              	.LCFI127:
 1180              	 .cfi_def_cfa_offset 4
 1181 0014 BD46     	 mov sp,r7
 1182              	.LCFI128:
 1183              	 .cfi_def_cfa_register 13
 1184              	 
 1185 0016 5DF8047B 	 ldr r7,[sp],#4
 1186              	.LCFI129:
 1187              	 .cfi_restore 7
 1188              	 .cfi_def_cfa_offset 0
 1189 001a 7047     	 bx lr
 1190              	.L104:
 1191              	 .align 2
 1192              	.L103:
 1193 001c 00000000 	 .word rxFailsafeChannelConfigs_SystemArray
 1194              	 .cfi_endproc
 1195              	.LFE668:
 1197              	 .section .text.rxChannelRangeConfigs,"ax",%progbits
 1198              	 .align 2
 1199              	 .thumb
 1200              	 .thumb_func
 1202              	rxChannelRangeConfigs:
 1203              	.LFB670:
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef struct rxChannelRangeConfig_s {
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint16_t min;
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint16_t max;
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxChannelRangeConfig_t;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** PG_DECLARE_ARRAY(rxChannelRangeConfig_t, NON_AUX_CHANNEL_COUNT, rxChannelRangeConfigs);
 1204              	 .loc 12 121 0
 1205              	 .cfi_startproc
 1206              	 
 1207              	 
 1208              	 
 1209 0000 80B4     	 push {r7}
 1210              	.LCFI130:
 1211              	 .cfi_def_cfa_offset 4
 1212              	 .cfi_offset 7,-4
 1213 0002 83B0     	 sub sp,sp,#12
 1214              	.LCFI131:
 1215              	 .cfi_def_cfa_offset 16
 1216 0004 00AF     	 add r7,sp,#0
 1217              	.LCFI132:
 1218              	 .cfi_def_cfa_register 7
 1219 0006 7860     	 str r0,[r7,#4]
 1220              	 .loc 12 121 0
 1221 0008 7B68     	 ldr r3,[r7,#4]
 1222 000a 9B00     	 lsls r3,r3,#2
 1223 000c 034A     	 ldr r2,.L107
 1224 000e 1344     	 add r3,r3,r2
 1225 0010 1846     	 mov r0,r3
 1226 0012 0C37     	 adds r7,r7,#12
 1227              	.LCFI133:
 1228              	 .cfi_def_cfa_offset 4
 1229 0014 BD46     	 mov sp,r7
 1230              	.LCFI134:
 1231              	 .cfi_def_cfa_register 13
 1232              	 
 1233 0016 5DF8047B 	 ldr r7,[sp],#4
 1234              	.LCFI135:
 1235              	 .cfi_restore 7
 1236              	 .cfi_def_cfa_offset 0
 1237 001a 7047     	 bx lr
 1238              	.L108:
 1239              	 .align 2
 1240              	.L107:
 1241 001c 00000000 	 .word rxChannelRangeConfigs_SystemArray
 1242              	 .cfi_endproc
 1243              	.LFE670:
 1245              	 .section .text.rxChannelRangeConfigsMutable,"ax",%progbits
 1246              	 .align 2
 1247              	 .thumb
 1248              	 .thumb_func
 1250              	rxChannelRangeConfigsMutable:
 1251              	.LFB671:
 1252              	 .loc 12 121 0
 1253              	 .cfi_startproc
 1254              	 
 1255              	 
 1256              	 
 1257 0000 80B4     	 push {r7}
 1258              	.LCFI136:
 1259              	 .cfi_def_cfa_offset 4
 1260              	 .cfi_offset 7,-4
 1261 0002 83B0     	 sub sp,sp,#12
 1262              	.LCFI137:
 1263              	 .cfi_def_cfa_offset 16
 1264 0004 00AF     	 add r7,sp,#0
 1265              	.LCFI138:
 1266              	 .cfi_def_cfa_register 7
 1267 0006 7860     	 str r0,[r7,#4]
 1268              	 .loc 12 121 0
 1269 0008 7B68     	 ldr r3,[r7,#4]
 1270 000a 9B00     	 lsls r3,r3,#2
 1271 000c 034A     	 ldr r2,.L111
 1272 000e 1344     	 add r3,r3,r2
 1273 0010 1846     	 mov r0,r3
 1274 0012 0C37     	 adds r7,r7,#12
 1275              	.LCFI139:
 1276              	 .cfi_def_cfa_offset 4
 1277 0014 BD46     	 mov sp,r7
 1278              	.LCFI140:
 1279              	 .cfi_def_cfa_register 13
 1280              	 
 1281 0016 5DF8047B 	 ldr r7,[sp],#4
 1282              	.LCFI141:
 1283              	 .cfi_restore 7
 1284              	 .cfi_def_cfa_offset 0
 1285 001a 7047     	 bx lr
 1286              	.L112:
 1287              	 .align 2
 1288              	.L111:
 1289 001c 00000000 	 .word rxChannelRangeConfigs_SystemArray
 1290              	 .cfi_endproc
 1291              	.LFE671:
 1293              	 .section .bss.cliPort,"aw",%nobits
 1294              	 .align 2
 1297              	cliPort:
 1298 0000 00000000 	 .space 4
 1299              	 .section .bss.cliWriter,"aw",%nobits
 1300              	 .align 2
 1303              	cliWriter:
 1304 0000 00000000 	 .space 4
 1305              	 .section .bss.cliWriteBuffer,"aw",%nobits
 1306              	 .align 2
 1309              	cliWriteBuffer:
 1310 0000 00000000 	 .space 74
 1310      00000000 
 1310      00000000 
 1310      00000000 
 1310      00000000 
 1311 004a 0000     	 .section .bss.cliBuffer,"aw",%nobits
 1312              	 .align 2
 1315              	cliBuffer:
 1316 0000 00000000 	 .space 256
 1316      00000000 
 1316      00000000 
 1316      00000000 
 1316      00000000 
 1317              	 .section .bss.bufferIndex,"aw",%nobits
 1318              	 .align 2
 1321              	bufferIndex:
 1322 0000 00000000 	 .space 4
 1323              	 .section .bss.configIsInCopy,"aw",%nobits
 1326              	configIsInCopy:
 1327 0000 00       	 .space 1
 1328              	 .section .data.pidProfileIndexToUse,"aw",%progbits
 1331              	pidProfileIndexToUse:
 1332 0000 FF       	 .byte -1
 1333              	 .section .data.rateProfileIndexToUse,"aw",%progbits
 1336              	rateProfileIndexToUse:
 1337 0000 FF       	 .byte -1
 1338              	 .section .bss.boardInformationUpdated,"aw",%nobits
 1341              	boardInformationUpdated:
 1342 0000 00       	 .space 1
 1343              	 .section .bss.signatureUpdated,"aw",%nobits
 1346              	signatureUpdated:
 1347 0000 00       	 .space 1
 1348              	 .section .rodata
 1349              	 .align 2
 1350              	.LC0:
 1351 0000 2D00     	 .ascii "-\000"
 1352              	 .section .rodata.emptyName,"a",%progbits
 1353              	 .align 2
 1356              	emptyName:
 1357 0000 00000000 	 .word .LC0
 1358              	 .section .rodata
 1359 0002 0000     	 .align 2
 1360              	.LC1:
 1361 0004 00       	 .ascii "\000"
 1362              	 .section .rodata.emptyString,"a",%progbits
 1363              	 .align 2
 1366              	emptyString:
 1367 0000 04000000 	 .word .LC1
 1368              	 .section .rodata
 1369 0005 000000   	 .align 2
 1370              	.LC2:
 1371 0008 54524900 	 .ascii "TRI\000"
 1372              	 .align 2
 1373              	.LC3:
 1374 000c 51554144 	 .ascii "QUADP\000"
 1374      5000
 1375 0012 0000     	 .align 2
 1376              	.LC4:
 1377 0014 51554144 	 .ascii "QUADX\000"
 1377      5800
 1378 001a 0000     	 .align 2
 1379              	.LC5:
 1380 001c 424900   	 .ascii "BI\000"
 1381 001f 00       	 .align 2
 1382              	.LC6:
 1383 0020 47494D42 	 .ascii "GIMBAL\000"
 1383      414C00
 1384 0027 00       	 .align 2
 1385              	.LC7:
 1386 0028 593600   	 .ascii "Y6\000"
 1387 002b 00       	 .align 2
 1388              	.LC8:
 1389 002c 48455836 	 .ascii "HEX6\000"
 1389      00
 1390 0031 000000   	 .align 2
 1391              	.LC9:
 1392 0034 464C5949 	 .ascii "FLYING_WING\000"
 1392      4E475F57 
 1392      494E4700 
 1393              	 .align 2
 1394              	.LC10:
 1395 0040 593400   	 .ascii "Y4\000"
 1396 0043 00       	 .align 2
 1397              	.LC11:
 1398 0044 48455836 	 .ascii "HEX6X\000"
 1398      5800
 1399 004a 0000     	 .align 2
 1400              	.LC12:
 1401 004c 4F43544F 	 .ascii "OCTOX8\000"
 1401      583800
 1402 0053 00       	 .align 2
 1403              	.LC13:
 1404 0054 4F43544F 	 .ascii "OCTOFLATP\000"
 1404      464C4154 
 1404      5000
 1405 005e 0000     	 .align 2
 1406              	.LC14:
 1407 0060 4F43544F 	 .ascii "OCTOFLATX\000"
 1407      464C4154 
 1407      5800
 1408 006a 0000     	 .align 2
 1409              	.LC15:
 1410 006c 41495250 	 .ascii "AIRPLANE\000"
 1410      4C414E45 
 1410      00
 1411 0075 000000   	 .align 2
 1412              	.LC16:
 1413 0078 48454C49 	 .ascii "HELI_120_CCPM\000"
 1413      5F313230 
 1413      5F434350 
 1413      4D00
 1414 0086 0000     	 .align 2
 1415              	.LC17:
 1416 0088 48454C49 	 .ascii "HELI_90_DEG\000"
 1416      5F39305F 
 1416      44454700 
 1417              	 .align 2
 1418              	.LC18:
 1419 0094 56544149 	 .ascii "VTAIL4\000"
 1419      4C3400
 1420 009b 00       	 .align 2
 1421              	.LC19:
 1422 009c 48455836 	 .ascii "HEX6H\000"
 1422      4800
 1423 00a2 0000     	 .align 2
 1424              	.LC20:
 1425 00a4 52585F54 	 .ascii "RX_TO_SERVO\000"
 1425      4F5F5345 
 1425      52564F00 
 1426              	 .align 2
 1427              	.LC21:
 1428 00b0 4455414C 	 .ascii "DUALCOPTER\000"
 1428      434F5054 
 1428      455200
 1429 00bb 00       	 .align 2
 1430              	.LC22:
 1431 00bc 53494E47 	 .ascii "SINGLECOPTER\000"
 1431      4C45434F 
 1431      50544552 
 1431      00
 1432 00c9 000000   	 .align 2
 1433              	.LC23:
 1434 00cc 41544149 	 .ascii "ATAIL4\000"
 1434      4C3400
 1435 00d3 00       	 .align 2
 1436              	.LC24:
 1437 00d4 43555354 	 .ascii "CUSTOM\000"
 1437      4F4D00
 1438 00db 00       	 .align 2
 1439              	.LC25:
 1440 00dc 43555354 	 .ascii "CUSTOMAIRPLANE\000"
 1440      4F4D4149 
 1440      52504C41 
 1440      4E4500
 1441 00eb 00       	 .align 2
 1442              	.LC26:
 1443 00ec 43555354 	 .ascii "CUSTOMTRI\000"
 1443      4F4D5452 
 1443      4900
 1444 00f6 0000     	 .align 2
 1445              	.LC27:
 1446 00f8 51554144 	 .ascii "QUADX1234\000"
 1446      58313233 
 1446      3400
 1447              	 .section .rodata.mixerNames,"a",%progbits
 1448              	 .align 2
 1451              	mixerNames:
 1452 0000 08000000 	 .word .LC2
 1453 0004 0C000000 	 .word .LC3
 1454 0008 14000000 	 .word .LC4
 1455 000c 1C000000 	 .word .LC5
 1456 0010 20000000 	 .word .LC6
 1457 0014 28000000 	 .word .LC7
 1458 0018 2C000000 	 .word .LC8
 1459 001c 34000000 	 .word .LC9
 1460 0020 40000000 	 .word .LC10
 1461 0024 44000000 	 .word .LC11
 1462 0028 4C000000 	 .word .LC12
 1463 002c 54000000 	 .word .LC13
 1464 0030 60000000 	 .word .LC14
 1465 0034 6C000000 	 .word .LC15
 1466 0038 78000000 	 .word .LC16
 1467 003c 88000000 	 .word .LC17
 1468 0040 94000000 	 .word .LC18
 1469 0044 9C000000 	 .word .LC19
 1470 0048 A4000000 	 .word .LC20
 1471 004c B0000000 	 .word .LC21
 1472 0050 BC000000 	 .word .LC22
 1473 0054 CC000000 	 .word .LC23
 1474 0058 D4000000 	 .word .LC24
 1475 005c DC000000 	 .word .LC25
 1476 0060 EC000000 	 .word .LC26
 1477 0064 F8000000 	 .word .LC27
 1478 0068 00000000 	 .word 0
 1479              	 .section .rodata
 1480 0102 0000     	 .align 2
 1481              	.LC28:
 1482 0104 52585F50 	 .ascii "RX_PPM\000"
 1482      504D00
 1483 010b 00       	 .align 2
 1484              	.LC29:
 1485 010c 494E464C 	 .ascii "INFLIGHT_ACC_CAL\000"
 1485      49474854 
 1485      5F414343 
 1485      5F43414C 
 1485      00
 1486 011d 000000   	 .align 2
 1487              	.LC30:
 1488 0120 52585F53 	 .ascii "RX_SERIAL\000"
 1488      45524941 
 1488      4C00
 1489 012a 0000     	 .align 2
 1490              	.LC31:
 1491 012c 4D4F544F 	 .ascii "MOTOR_STOP\000"
 1491      525F5354 
 1491      4F5000
 1492 0137 00       	 .align 2
 1493              	.LC32:
 1494 0138 53455256 	 .ascii "SERVO_TILT\000"
 1494      4F5F5449 
 1494      4C5400
 1495 0143 00       	 .align 2
 1496              	.LC33:
 1497 0144 534F4654 	 .ascii "SOFTSERIAL\000"
 1497      53455249 
 1497      414C00
 1498 014f 00       	 .align 2
 1499              	.LC34:
 1500 0150 47505300 	 .ascii "GPS\000"
 1501              	 .align 2
 1502              	.LC35:
 1503 0154 52414E47 	 .ascii "RANGEFINDER\000"
 1503      4546494E 
 1503      44455200 
 1504              	 .align 2
 1505              	.LC36:
 1506 0160 54454C45 	 .ascii "TELEMETRY\000"
 1506      4D455452 
 1506      5900
 1507 016a 0000     	 .align 2
 1508              	.LC37:
 1509 016c 334400   	 .ascii "3D\000"
 1510 016f 00       	 .align 2
 1511              	.LC38:
 1512 0170 52585F50 	 .ascii "RX_PARALLEL_PWM\000"
 1512      4152414C 
 1512      4C454C5F 
 1512      50574D00 
 1513              	 .align 2
 1514              	.LC39:
 1515 0180 52585F4D 	 .ascii "RX_MSP\000"
 1515      535000
 1516 0187 00       	 .align 2
 1517              	.LC40:
 1518 0188 52535349 	 .ascii "RSSI_ADC\000"
 1518      5F414443 
 1518      00
 1519 0191 000000   	 .align 2
 1520              	.LC41:
 1521 0194 4C45445F 	 .ascii "LED_STRIP\000"
 1521      53545249 
 1521      5000
 1522 019e 0000     	 .align 2
 1523              	.LC42:
 1524 01a0 44495350 	 .ascii "DISPLAY\000"
 1524      4C415900 
 1525              	 .align 2
 1526              	.LC43:
 1527 01a8 4F534400 	 .ascii "OSD\000"
 1528              	 .align 2
 1529              	.LC44:
 1530 01ac 4348414E 	 .ascii "CHANNEL_FORWARDING\000"
 1530      4E454C5F 
 1530      464F5257 
 1530      41524449 
 1530      4E4700
 1531 01bf 00       	 .align 2
 1532              	.LC45:
 1533 01c0 5452414E 	 .ascii "TRANSPONDER\000"
 1533      53504F4E 
 1533      44455200 
 1534              	 .align 2
 1535              	.LC46:
 1536 01cc 4149524D 	 .ascii "AIRMODE\000"
 1536      4F444500 
 1537              	 .align 2
 1538              	.LC47:
 1539 01d4 52585F53 	 .ascii "RX_SPI\000"
 1539      504900
 1540 01db 00       	 .align 2
 1541              	.LC48:
 1542 01dc 534F4654 	 .ascii "SOFTSPI\000"
 1542      53504900 
 1543              	 .align 2
 1544              	.LC49:
 1545 01e4 4553435F 	 .ascii "ESC_SENSOR\000"
 1545      53454E53 
 1545      4F5200
 1546 01ef 00       	 .align 2
 1547              	.LC50:
 1548 01f0 414E5449 	 .ascii "ANTI_GRAVITY\000"
 1548      5F475241 
 1548      56495459 
 1548      00
 1549 01fd 000000   	 .align 2
 1550              	.LC51:
 1551 0200 44594E41 	 .ascii "DYNAMIC_FILTER\000"
 1551      4D49435F 
 1551      46494C54 
 1551      455200
 1552              	 .section .rodata.featureNames,"a",%progbits
 1553              	 .align 2
 1556              	featureNames:
 1557 0000 04010000 	 .word .LC28
 1558 0004 04000000 	 .word .LC1
 1559 0008 0C010000 	 .word .LC29
 1560 000c 20010000 	 .word .LC30
 1561 0010 2C010000 	 .word .LC31
 1562 0014 38010000 	 .word .LC32
 1563 0018 44010000 	 .word .LC33
 1564 001c 50010000 	 .word .LC34
 1565 0020 04000000 	 .word .LC1
 1566 0024 54010000 	 .word .LC35
 1567 0028 60010000 	 .word .LC36
 1568 002c 04000000 	 .word .LC1
 1569 0030 6C010000 	 .word .LC37
 1570 0034 70010000 	 .word .LC38
 1571 0038 80010000 	 .word .LC39
 1572 003c 88010000 	 .word .LC40
 1573 0040 94010000 	 .word .LC41
 1574 0044 A0010000 	 .word .LC42
 1575 0048 A8010000 	 .word .LC43
 1576 004c 04000000 	 .word .LC1
 1577 0050 AC010000 	 .word .LC44
 1578 0054 C0010000 	 .word .LC45
 1579 0058 CC010000 	 .word .LC46
 1580 005c 04000000 	 .word .LC1
 1581 0060 04000000 	 .word .LC1
 1582 0064 D4010000 	 .word .LC47
 1583 0068 DC010000 	 .word .LC48
 1584 006c E4010000 	 .word .LC49
 1585 0070 F0010000 	 .word .LC50
 1586 0074 00020000 	 .word .LC51
 1587 0078 00000000 	 .word 0
 1588              	 .section .rodata.rxFailsafeModeCharacters,"a",%progbits
 1589              	 .align 2
 1592              	rxFailsafeModeCharacters:
 1593 0000 61687300 	 .ascii "ahs\000"
 1594              	 .section .rodata.rxFailsafeModesTable,"a",%progbits
 1595              	 .align 2
 1598              	rxFailsafeModesTable:
 1599 0000 00       	 .byte 0
 1600 0001 01       	 .byte 1
 1601 0002 03       	 .byte 3
 1602 0003 03       	 .byte 3
 1603 0004 01       	 .byte 1
 1604 0005 02       	 .byte 2
 1605 0006 0000     	 .section .rodata
 1606 020f 00       	 .align 2
 1607              	.LC52:
 1608 0210 4759524F 	 .ascii "GYRO\000"
 1608      00
 1609 0215 000000   	 .align 2
 1610              	.LC53:
 1611 0218 41434300 	 .ascii "ACC\000"
 1612              	 .align 2
 1613              	.LC54:
 1614 021c 4241524F 	 .ascii "BARO\000"
 1614      00
 1615 0221 000000   	 .align 2
 1616              	.LC55:
 1617 0224 4D414700 	 .ascii "MAG\000"
 1618              	 .align 2
 1619              	.LC56:
 1620 0228 4750532B 	 .ascii "GPS+MAG\000"
 1620      4D414700 
 1621              	 .section .rodata.sensorTypeNames,"a",%progbits
 1622              	 .align 2
 1625              	sensorTypeNames:
 1626 0000 10020000 	 .word .LC52
 1627 0004 18020000 	 .word .LC53
 1628 0008 1C020000 	 .word .LC54
 1629 000c 24020000 	 .word .LC55
 1630 0010 54010000 	 .word .LC35
 1631 0014 50010000 	 .word .LC34
 1632 0018 28020000 	 .word .LC56
 1633 001c 00000000 	 .word 0
 1634              	 .section .data.sensorHardwareNames,"aw",%progbits
 1635              	 .align 2
 1638              	sensorHardwareNames:
 1639 0000 00000000 	 .word lookupTableGyroHardware
 1640 0004 00000000 	 .word lookupTableAccHardware
 1641 0008 00000000 	 .word lookupTableBaroHardware
 1642 000c 00000000 	 .word lookupTableMagHardware
 1643 0010 00000000 	 .word lookupTableRangefinderHardware
 1644              	 .section .text.backupPgConfig,"ax",%progbits
 1645              	 .align 2
 1646              	 .thumb
 1647              	 .thumb_func
 1649              	backupPgConfig:
 1650              	.LFB687:
 1651              	 .file 13 "../cleanflight/src/main/interface/cli.c"
   1:../cleanflight/src/main/interface/cli.c **** /*
   2:../cleanflight/src/main/interface/cli.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/interface/cli.c ****  *
   4:../cleanflight/src/main/interface/cli.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/interface/cli.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/interface/cli.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/interface/cli.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/interface/cli.c ****  * any later version.
   9:../cleanflight/src/main/interface/cli.c ****  *
  10:../cleanflight/src/main/interface/cli.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/interface/cli.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/interface/cli.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/interface/cli.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/interface/cli.c **** *
  15:../cleanflight/src/main/interface/cli.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/interface/cli.c ****  * along with this software.
  17:../cleanflight/src/main/interface/cli.c ****  *
  18:../cleanflight/src/main/interface/cli.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/interface/cli.c ****  */
  20:../cleanflight/src/main/interface/cli.c **** 
  21:../cleanflight/src/main/interface/cli.c **** #include <stdbool.h>
  22:../cleanflight/src/main/interface/cli.c **** #include <stdint.h>
  23:../cleanflight/src/main/interface/cli.c **** #include <stdlib.h>
  24:../cleanflight/src/main/interface/cli.c **** #include <stdarg.h>
  25:../cleanflight/src/main/interface/cli.c **** #include <string.h>
  26:../cleanflight/src/main/interface/cli.c **** #include <math.h>
  27:../cleanflight/src/main/interface/cli.c **** #include <ctype.h>
  28:../cleanflight/src/main/interface/cli.c **** 
  29:../cleanflight/src/main/interface/cli.c **** #include "platform.h"
  30:../cleanflight/src/main/interface/cli.c **** 
  31:../cleanflight/src/main/interface/cli.c **** // FIXME remove this for targets that don't need a CLI.  Perhaps use a no-op macro when USE_CLI is 
  32:../cleanflight/src/main/interface/cli.c **** // signal that we're in cli mode
  33:../cleanflight/src/main/interface/cli.c **** uint8_t cliMode = 0;
  34:../cleanflight/src/main/interface/cli.c **** #ifndef EEPROM_IN_RAM
  35:../cleanflight/src/main/interface/cli.c **** extern uint8_t __config_start;   // configured via linker script when building binaries.
  36:../cleanflight/src/main/interface/cli.c **** extern uint8_t __config_end;
  37:../cleanflight/src/main/interface/cli.c **** #endif
  38:../cleanflight/src/main/interface/cli.c **** 
  39:../cleanflight/src/main/interface/cli.c **** #ifdef USE_CLI
  40:../cleanflight/src/main/interface/cli.c **** 
  41:../cleanflight/src/main/interface/cli.c **** #include "blackbox/blackbox.h"
  42:../cleanflight/src/main/interface/cli.c **** 
  43:../cleanflight/src/main/interface/cli.c **** #include "build/build_config.h"
  44:../cleanflight/src/main/interface/cli.c **** #include "build/debug.h"
  45:../cleanflight/src/main/interface/cli.c **** #include "build/version.h"
  46:../cleanflight/src/main/interface/cli.c **** 
  47:../cleanflight/src/main/interface/cli.c **** #include "cms/cms.h"
  48:../cleanflight/src/main/interface/cli.c **** 
  49:../cleanflight/src/main/interface/cli.c **** #include "common/axis.h"
  50:../cleanflight/src/main/interface/cli.c **** #include "common/color.h"
  51:../cleanflight/src/main/interface/cli.c **** #include "common/maths.h"
  52:../cleanflight/src/main/interface/cli.c **** #include "common/printf.h"
  53:../cleanflight/src/main/interface/cli.c **** #include "common/strtol.h"
  54:../cleanflight/src/main/interface/cli.c **** #include "common/time.h"
  55:../cleanflight/src/main/interface/cli.c **** #include "common/typeconversion.h"
  56:../cleanflight/src/main/interface/cli.c **** #include "common/utils.h"
  57:../cleanflight/src/main/interface/cli.c **** 
  58:../cleanflight/src/main/interface/cli.c **** #include "config/config_eeprom.h"
  59:../cleanflight/src/main/interface/cli.c **** #include "config/feature.h"
  60:../cleanflight/src/main/interface/cli.c **** 
  61:../cleanflight/src/main/interface/cli.c **** #include "drivers/accgyro/accgyro.h"
  62:../cleanflight/src/main/interface/cli.c **** #include "drivers/adc.h"
  63:../cleanflight/src/main/interface/cli.c **** #include "drivers/buf_writer.h"
  64:../cleanflight/src/main/interface/cli.c **** #include "drivers/bus_spi.h"
  65:../cleanflight/src/main/interface/cli.c **** #include "drivers/camera_control.h"
  66:../cleanflight/src/main/interface/cli.c **** #include "drivers/compass/compass.h"
  67:../cleanflight/src/main/interface/cli.c **** #include "drivers/display.h"
  68:../cleanflight/src/main/interface/cli.c **** #include "drivers/dma.h"
  69:../cleanflight/src/main/interface/cli.c **** #include "drivers/flash.h"
  70:../cleanflight/src/main/interface/cli.c **** #include "drivers/inverter.h"
  71:../cleanflight/src/main/interface/cli.c **** #include "drivers/io.h"
  72:../cleanflight/src/main/interface/cli.c **** #include "drivers/io_impl.h"
  73:../cleanflight/src/main/interface/cli.c **** #include "drivers/light_led.h"
  74:../cleanflight/src/main/interface/cli.c **** #include "drivers/rangefinder/rangefinder_hcsr04.h"
  75:../cleanflight/src/main/interface/cli.c **** #include "drivers/sdcard.h"
  76:../cleanflight/src/main/interface/cli.c **** #include "drivers/sensor.h"
  77:../cleanflight/src/main/interface/cli.c **** #include "drivers/serial.h"
  78:../cleanflight/src/main/interface/cli.c **** #include "drivers/serial_escserial.h"
  79:../cleanflight/src/main/interface/cli.c **** #include "drivers/sound_beeper.h"
  80:../cleanflight/src/main/interface/cli.c **** #include "drivers/stack_check.h"
  81:../cleanflight/src/main/interface/cli.c **** #include "drivers/system.h"
  82:../cleanflight/src/main/interface/cli.c **** #include "drivers/time.h"
  83:../cleanflight/src/main/interface/cli.c **** #include "drivers/timer.h"
  84:../cleanflight/src/main/interface/cli.c **** #include "drivers/transponder_ir.h"
  85:../cleanflight/src/main/interface/cli.c **** #include "drivers/usb_msc.h"
  86:../cleanflight/src/main/interface/cli.c **** #include "drivers/vtx_common.h"
  87:../cleanflight/src/main/interface/cli.c **** 
  88:../cleanflight/src/main/interface/cli.c **** #include "fc/board_info.h"
  89:../cleanflight/src/main/interface/cli.c **** #include "fc/config.h"
  90:../cleanflight/src/main/interface/cli.c **** #include "fc/controlrate_profile.h"
  91:../cleanflight/src/main/interface/cli.c **** #include "fc/fc_core.h"
  92:../cleanflight/src/main/interface/cli.c **** #include "fc/fc_rc.h"
  93:../cleanflight/src/main/interface/cli.c **** #include "fc/rc_adjustments.h"
  94:../cleanflight/src/main/interface/cli.c **** #include "fc/rc_controls.h"
  95:../cleanflight/src/main/interface/cli.c **** #include "fc/runtime_config.h"
  96:../cleanflight/src/main/interface/cli.c **** 
  97:../cleanflight/src/main/interface/cli.c **** #include "flight/failsafe.h"
  98:../cleanflight/src/main/interface/cli.c **** #include "flight/imu.h"
  99:../cleanflight/src/main/interface/cli.c **** #include "flight/mixer.h"
 100:../cleanflight/src/main/interface/cli.c **** #include "flight/pid.h"
 101:../cleanflight/src/main/interface/cli.c **** #include "flight/position.h"
 102:../cleanflight/src/main/interface/cli.c **** #include "flight/servos.h"
 103:../cleanflight/src/main/interface/cli.c **** 
 104:../cleanflight/src/main/interface/cli.c **** #include "interface/cli.h"
 105:../cleanflight/src/main/interface/cli.c **** #include "interface/msp.h"
 106:../cleanflight/src/main/interface/cli.c **** #include "interface/msp_box.h"
 107:../cleanflight/src/main/interface/cli.c **** #include "interface/msp_protocol.h"
 108:../cleanflight/src/main/interface/cli.c **** #include "interface/settings.h"
 109:../cleanflight/src/main/interface/cli.c **** 
 110:../cleanflight/src/main/interface/cli.c **** #include "io/asyncfatfs/asyncfatfs.h"
 111:../cleanflight/src/main/interface/cli.c **** #include "io/beeper.h"
 112:../cleanflight/src/main/interface/cli.c **** #include "io/flashfs.h"
 113:../cleanflight/src/main/interface/cli.c **** #include "io/gimbal.h"
 114:../cleanflight/src/main/interface/cli.c **** #include "io/gps.h"
 115:../cleanflight/src/main/interface/cli.c **** #include "io/ledstrip.h"
 116:../cleanflight/src/main/interface/cli.c **** #include "io/osd.h"
 117:../cleanflight/src/main/interface/cli.c **** #include "io/serial.h"
 118:../cleanflight/src/main/interface/cli.c **** #include "io/transponder_ir.h"
 119:../cleanflight/src/main/interface/cli.c **** #include "io/usb_msc.h"
 120:../cleanflight/src/main/interface/cli.c **** #include "io/vtx_control.h"
 121:../cleanflight/src/main/interface/cli.c **** #include "io/vtx.h"
 122:../cleanflight/src/main/interface/cli.c **** 
 123:../cleanflight/src/main/interface/cli.c **** #include "pg/adc.h"
 124:../cleanflight/src/main/interface/cli.c **** #include "pg/beeper.h"
 125:../cleanflight/src/main/interface/cli.c **** #include "pg/beeper_dev.h"
 126:../cleanflight/src/main/interface/cli.c **** #include "pg/board.h"
 127:../cleanflight/src/main/interface/cli.c **** #include "pg/bus_i2c.h"
 128:../cleanflight/src/main/interface/cli.c **** #include "pg/bus_spi.h"
 129:../cleanflight/src/main/interface/cli.c **** #include "pg/max7456.h"
 130:../cleanflight/src/main/interface/cli.c **** #include "pg/pinio.h"
 131:../cleanflight/src/main/interface/cli.c **** #include "pg/pg.h"
 132:../cleanflight/src/main/interface/cli.c **** #include "pg/pg_ids.h"
 133:../cleanflight/src/main/interface/cli.c **** #include "pg/rx.h"
 134:../cleanflight/src/main/interface/cli.c **** #include "pg/rx_spi.h"
 135:../cleanflight/src/main/interface/cli.c **** #include "pg/rx_pwm.h"
 136:../cleanflight/src/main/interface/cli.c **** #include "pg/timerio.h"
 137:../cleanflight/src/main/interface/cli.c **** #include "pg/usb.h"
 138:../cleanflight/src/main/interface/cli.c **** 
 139:../cleanflight/src/main/interface/cli.c **** #include "rx/rx.h"
 140:../cleanflight/src/main/interface/cli.c **** #include "rx/spektrum.h"
 141:../cleanflight/src/main/interface/cli.c **** #include "rx/cc2500_frsky_common.h"
 142:../cleanflight/src/main/interface/cli.c **** #include "rx/cc2500_frsky_x.h"
 143:../cleanflight/src/main/interface/cli.c **** 
 144:../cleanflight/src/main/interface/cli.c **** #include "scheduler/scheduler.h"
 145:../cleanflight/src/main/interface/cli.c **** 
 146:../cleanflight/src/main/interface/cli.c **** #include "sensors/acceleration.h"
 147:../cleanflight/src/main/interface/cli.c **** #include "sensors/adcinternal.h"
 148:../cleanflight/src/main/interface/cli.c **** #include "sensors/barometer.h"
 149:../cleanflight/src/main/interface/cli.c **** #include "sensors/battery.h"
 150:../cleanflight/src/main/interface/cli.c **** #include "sensors/boardalignment.h"
 151:../cleanflight/src/main/interface/cli.c **** #include "sensors/compass.h"
 152:../cleanflight/src/main/interface/cli.c **** #include "sensors/esc_sensor.h"
 153:../cleanflight/src/main/interface/cli.c **** #include "sensors/gyro.h"
 154:../cleanflight/src/main/interface/cli.c **** #include "sensors/sensors.h"
 155:../cleanflight/src/main/interface/cli.c **** 
 156:../cleanflight/src/main/interface/cli.c **** #include "telemetry/frsky_hub.h"
 157:../cleanflight/src/main/interface/cli.c **** #include "telemetry/telemetry.h"
 158:../cleanflight/src/main/interface/cli.c **** 
 159:../cleanflight/src/main/interface/cli.c **** 
 160:../cleanflight/src/main/interface/cli.c **** static serialPort_t *cliPort;
 161:../cleanflight/src/main/interface/cli.c **** 
 162:../cleanflight/src/main/interface/cli.c **** #ifdef STM32F1
 163:../cleanflight/src/main/interface/cli.c **** #define CLI_IN_BUFFER_SIZE 128
 164:../cleanflight/src/main/interface/cli.c **** #else
 165:../cleanflight/src/main/interface/cli.c **** // Space required to set array parameters
 166:../cleanflight/src/main/interface/cli.c **** #define CLI_IN_BUFFER_SIZE 256
 167:../cleanflight/src/main/interface/cli.c **** #endif
 168:../cleanflight/src/main/interface/cli.c **** #define CLI_OUT_BUFFER_SIZE 64
 169:../cleanflight/src/main/interface/cli.c **** 
 170:../cleanflight/src/main/interface/cli.c **** static bufWriter_t *cliWriter;
 171:../cleanflight/src/main/interface/cli.c **** static uint8_t cliWriteBuffer[sizeof(*cliWriter) + CLI_OUT_BUFFER_SIZE];
 172:../cleanflight/src/main/interface/cli.c **** 
 173:../cleanflight/src/main/interface/cli.c **** static char cliBuffer[CLI_IN_BUFFER_SIZE];
 174:../cleanflight/src/main/interface/cli.c **** static uint32_t bufferIndex = 0;
 175:../cleanflight/src/main/interface/cli.c **** 
 176:../cleanflight/src/main/interface/cli.c **** static bool configIsInCopy = false;
 177:../cleanflight/src/main/interface/cli.c **** 
 178:../cleanflight/src/main/interface/cli.c **** #define CURRENT_PROFILE_INDEX -1
 179:../cleanflight/src/main/interface/cli.c **** static int8_t pidProfileIndexToUse = CURRENT_PROFILE_INDEX;
 180:../cleanflight/src/main/interface/cli.c **** static int8_t rateProfileIndexToUse = CURRENT_PROFILE_INDEX;
 181:../cleanflight/src/main/interface/cli.c **** 
 182:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BOARD_INFO)
 183:../cleanflight/src/main/interface/cli.c **** static bool boardInformationUpdated = false;
 184:../cleanflight/src/main/interface/cli.c **** #if defined(USE_SIGNATURE)
 185:../cleanflight/src/main/interface/cli.c **** static bool signatureUpdated = false;
 186:../cleanflight/src/main/interface/cli.c **** #endif
 187:../cleanflight/src/main/interface/cli.c **** #endif // USE_BOARD_INFO
 188:../cleanflight/src/main/interface/cli.c **** 
 189:../cleanflight/src/main/interface/cli.c **** static const char* const emptyName = "-";
 190:../cleanflight/src/main/interface/cli.c **** static const char* const emptyString = "";
 191:../cleanflight/src/main/interface/cli.c **** 
 192:../cleanflight/src/main/interface/cli.c **** #ifndef USE_QUAD_MIXER_ONLY
 193:../cleanflight/src/main/interface/cli.c **** // sync this with mixerMode_e
 194:../cleanflight/src/main/interface/cli.c **** static const char * const mixerNames[] = {
 195:../cleanflight/src/main/interface/cli.c ****     "TRI", "QUADP", "QUADX", "BI",
 196:../cleanflight/src/main/interface/cli.c ****     "GIMBAL", "Y6", "HEX6",
 197:../cleanflight/src/main/interface/cli.c ****     "FLYING_WING", "Y4", "HEX6X", "OCTOX8", "OCTOFLATP", "OCTOFLATX",
 198:../cleanflight/src/main/interface/cli.c ****     "AIRPLANE", "HELI_120_CCPM", "HELI_90_DEG", "VTAIL4",
 199:../cleanflight/src/main/interface/cli.c ****     "HEX6H", "RX_TO_SERVO", "DUALCOPTER", "SINGLECOPTER",
 200:../cleanflight/src/main/interface/cli.c ****     "ATAIL4", "CUSTOM", "CUSTOMAIRPLANE", "CUSTOMTRI", "QUADX1234", NULL
 201:../cleanflight/src/main/interface/cli.c **** };
 202:../cleanflight/src/main/interface/cli.c **** #endif
 203:../cleanflight/src/main/interface/cli.c **** 
 204:../cleanflight/src/main/interface/cli.c **** // sync this with features_e
 205:../cleanflight/src/main/interface/cli.c **** static const char * const featureNames[] = {
 206:../cleanflight/src/main/interface/cli.c ****     "RX_PPM", "", "INFLIGHT_ACC_CAL", "RX_SERIAL", "MOTOR_STOP",
 207:../cleanflight/src/main/interface/cli.c ****     "SERVO_TILT", "SOFTSERIAL", "GPS", "",
 208:../cleanflight/src/main/interface/cli.c ****     "RANGEFINDER", "TELEMETRY", "", "3D", "RX_PARALLEL_PWM",
 209:../cleanflight/src/main/interface/cli.c ****     "RX_MSP", "RSSI_ADC", "LED_STRIP", "DISPLAY", "OSD",
 210:../cleanflight/src/main/interface/cli.c ****     "", "CHANNEL_FORWARDING", "TRANSPONDER", "AIRMODE",
 211:../cleanflight/src/main/interface/cli.c ****     "", "", "RX_SPI", "SOFTSPI", "ESC_SENSOR", "ANTI_GRAVITY", "DYNAMIC_FILTER", NULL
 212:../cleanflight/src/main/interface/cli.c **** };
 213:../cleanflight/src/main/interface/cli.c **** 
 214:../cleanflight/src/main/interface/cli.c **** // sync this with rxFailsafeChannelMode_e
 215:../cleanflight/src/main/interface/cli.c **** static const char rxFailsafeModeCharacters[] = "ahs";
 216:../cleanflight/src/main/interface/cli.c **** 
 217:../cleanflight/src/main/interface/cli.c **** static const rxFailsafeChannelMode_e rxFailsafeModesTable[RX_FAILSAFE_TYPE_COUNT][RX_FAILSAFE_MODE_
 218:../cleanflight/src/main/interface/cli.c ****     { RX_FAILSAFE_MODE_AUTO, RX_FAILSAFE_MODE_HOLD, RX_FAILSAFE_MODE_INVALID },
 219:../cleanflight/src/main/interface/cli.c ****     { RX_FAILSAFE_MODE_INVALID, RX_FAILSAFE_MODE_HOLD, RX_FAILSAFE_MODE_SET }
 220:../cleanflight/src/main/interface/cli.c **** };
 221:../cleanflight/src/main/interface/cli.c **** 
 222:../cleanflight/src/main/interface/cli.c **** #if defined(USE_SENSOR_NAMES)
 223:../cleanflight/src/main/interface/cli.c **** // sync this with sensors_e
 224:../cleanflight/src/main/interface/cli.c **** static const char * const sensorTypeNames[] = {
 225:../cleanflight/src/main/interface/cli.c ****     "GYRO", "ACC", "BARO", "MAG", "RANGEFINDER", "GPS", "GPS+MAG", NULL
 226:../cleanflight/src/main/interface/cli.c **** };
 227:../cleanflight/src/main/interface/cli.c **** 
 228:../cleanflight/src/main/interface/cli.c **** #define SENSOR_NAMES_MASK (SENSOR_GYRO | SENSOR_ACC | SENSOR_BARO | SENSOR_MAG | SENSOR_RANGEFINDER
 229:../cleanflight/src/main/interface/cli.c **** 
 230:../cleanflight/src/main/interface/cli.c **** static const char * const *sensorHardwareNames[] = {
 231:../cleanflight/src/main/interface/cli.c ****     lookupTableGyroHardware, lookupTableAccHardware, lookupTableBaroHardware, lookupTableMagHardwar
 232:../cleanflight/src/main/interface/cli.c **** };
 233:../cleanflight/src/main/interface/cli.c **** #endif // USE_SENSOR_NAMES
 234:../cleanflight/src/main/interface/cli.c **** 
 235:../cleanflight/src/main/interface/cli.c **** char *strcasestr(const char *haystack, const char *needle);
 236:../cleanflight/src/main/interface/cli.c **** 
 237:../cleanflight/src/main/interface/cli.c **** static void backupPgConfig(const pgRegistry_t *pg)
 238:../cleanflight/src/main/interface/cli.c **** {
 1652              	 .loc 13 238 0
 1653              	 .cfi_startproc
 1654              	 
 1655              	 
 1656 0000 80B5     	 push {r7,lr}
 1657              	.LCFI142:
 1658              	 .cfi_def_cfa_offset 8
 1659              	 .cfi_offset 7,-8
 1660              	 .cfi_offset 14,-4
 1661 0002 82B0     	 sub sp,sp,#8
 1662              	.LCFI143:
 1663              	 .cfi_def_cfa_offset 16
 1664 0004 00AF     	 add r7,sp,#0
 1665              	.LCFI144:
 1666              	 .cfi_def_cfa_register 7
 1667 0006 7860     	 str r0,[r7,#4]
 239:../cleanflight/src/main/interface/cli.c ****     memcpy(pg->copy, pg->address, pg->size);
 1668              	 .loc 13 239 0
 1669 0008 7B68     	 ldr r3,[r7,#4]
 1670 000a 9968     	 ldr r1,[r3,#8]
 1671 000c 7B68     	 ldr r3,[r7,#4]
 1672 000e 5A68     	 ldr r2,[r3,#4]
 1673 0010 7B68     	 ldr r3,[r7,#4]
 1674 0012 5B88     	 ldrh r3,[r3,#2]
 1675 0014 9BB2     	 uxth r3,r3
 1676 0016 0846     	 mov r0,r1
 1677 0018 1146     	 mov r1,r2
 1678 001a 1A46     	 mov r2,r3
 1679 001c FFF7FEFF 	 bl memcpy
 240:../cleanflight/src/main/interface/cli.c **** }
 1680              	 .loc 13 240 0
 1681 0020 0837     	 adds r7,r7,#8
 1682              	.LCFI145:
 1683              	 .cfi_def_cfa_offset 8
 1684 0022 BD46     	 mov sp,r7
 1685              	.LCFI146:
 1686              	 .cfi_def_cfa_register 13
 1687              	 
 1688 0024 80BD     	 pop {r7,pc}
 1689              	 .cfi_endproc
 1690              	.LFE687:
 1692 0026 00BF     	 .section .text.restorePgConfig,"ax",%progbits
 1693              	 .align 2
 1694              	 .thumb
 1695              	 .thumb_func
 1697              	restorePgConfig:
 1698              	.LFB688:
 241:../cleanflight/src/main/interface/cli.c **** 
 242:../cleanflight/src/main/interface/cli.c **** static void restorePgConfig(const pgRegistry_t *pg)
 243:../cleanflight/src/main/interface/cli.c **** {
 1699              	 .loc 13 243 0
 1700              	 .cfi_startproc
 1701              	 
 1702              	 
 1703 0000 80B5     	 push {r7,lr}
 1704              	.LCFI147:
 1705              	 .cfi_def_cfa_offset 8
 1706              	 .cfi_offset 7,-8
 1707              	 .cfi_offset 14,-4
 1708 0002 82B0     	 sub sp,sp,#8
 1709              	.LCFI148:
 1710              	 .cfi_def_cfa_offset 16
 1711 0004 00AF     	 add r7,sp,#0
 1712              	.LCFI149:
 1713              	 .cfi_def_cfa_register 7
 1714 0006 7860     	 str r0,[r7,#4]
 244:../cleanflight/src/main/interface/cli.c ****     memcpy(pg->address, pg->copy, pg->size);
 1715              	 .loc 13 244 0
 1716 0008 7B68     	 ldr r3,[r7,#4]
 1717 000a 5968     	 ldr r1,[r3,#4]
 1718 000c 7B68     	 ldr r3,[r7,#4]
 1719 000e 9A68     	 ldr r2,[r3,#8]
 1720 0010 7B68     	 ldr r3,[r7,#4]
 1721 0012 5B88     	 ldrh r3,[r3,#2]
 1722 0014 9BB2     	 uxth r3,r3
 1723 0016 0846     	 mov r0,r1
 1724 0018 1146     	 mov r1,r2
 1725 001a 1A46     	 mov r2,r3
 1726 001c FFF7FEFF 	 bl memcpy
 245:../cleanflight/src/main/interface/cli.c **** }
 1727              	 .loc 13 245 0
 1728 0020 0837     	 adds r7,r7,#8
 1729              	.LCFI150:
 1730              	 .cfi_def_cfa_offset 8
 1731 0022 BD46     	 mov sp,r7
 1732              	.LCFI151:
 1733              	 .cfi_def_cfa_register 13
 1734              	 
 1735 0024 80BD     	 pop {r7,pc}
 1736              	 .cfi_endproc
 1737              	.LFE688:
 1739 0026 00BF     	 .section .text.backupConfigs,"ax",%progbits
 1740              	 .align 2
 1741              	 .thumb
 1742              	 .thumb_func
 1744              	backupConfigs:
 1745              	.LFB689:
 246:../cleanflight/src/main/interface/cli.c **** 
 247:../cleanflight/src/main/interface/cli.c **** static void backupConfigs(void)
 248:../cleanflight/src/main/interface/cli.c **** {
 1746              	 .loc 13 248 0
 1747              	 .cfi_startproc
 1748              	 
 1749              	 
 1750 0000 80B5     	 push {r7,lr}
 1751              	.LCFI152:
 1752              	 .cfi_def_cfa_offset 8
 1753              	 .cfi_offset 7,-8
 1754              	 .cfi_offset 14,-4
 1755 0002 82B0     	 sub sp,sp,#8
 1756              	.LCFI153:
 1757              	 .cfi_def_cfa_offset 16
 1758 0004 00AF     	 add r7,sp,#0
 1759              	.LCFI154:
 1760              	 .cfi_def_cfa_register 7
 1761              	.LBB2:
 249:../cleanflight/src/main/interface/cli.c ****     // make copies of configs to do differencing
 250:../cleanflight/src/main/interface/cli.c ****     PG_FOREACH(pg) {
 1762              	 .loc 13 250 0
 1763 0006 094B     	 ldr r3,.L118
 1764 0008 7B60     	 str r3,[r7,#4]
 1765 000a 05E0     	 b .L116
 1766              	.L117:
 251:../cleanflight/src/main/interface/cli.c ****         backupPgConfig(pg);
 1767              	 .loc 13 251 0 discriminator 3
 1768 000c 7868     	 ldr r0,[r7,#4]
 1769 000e FFF7FEFF 	 bl backupPgConfig
 250:../cleanflight/src/main/interface/cli.c ****         backupPgConfig(pg);
 1770              	 .loc 13 250 0 discriminator 3
 1771 0012 7B68     	 ldr r3,[r7,#4]
 1772 0014 1433     	 adds r3,r3,#20
 1773 0016 7B60     	 str r3,[r7,#4]
 1774              	.L116:
 250:../cleanflight/src/main/interface/cli.c ****         backupPgConfig(pg);
 1775              	 .loc 13 250 0 is_stmt 0 discriminator 1
 1776 0018 7B68     	 ldr r3,[r7,#4]
 1777 001a 054A     	 ldr r2,.L118+4
 1778 001c 9342     	 cmp r3,r2
 1779 001e F5D3     	 bcc .L117
 1780              	.LBE2:
 252:../cleanflight/src/main/interface/cli.c ****     }
 253:../cleanflight/src/main/interface/cli.c **** 
 254:../cleanflight/src/main/interface/cli.c ****     configIsInCopy = true;
 1781              	 .loc 13 254 0 is_stmt 1
 1782 0020 044B     	 ldr r3,.L118+8
 1783 0022 0122     	 movs r2,#1
 1784 0024 1A70     	 strb r2,[r3]
 255:../cleanflight/src/main/interface/cli.c **** }
 1785              	 .loc 13 255 0
 1786 0026 0837     	 adds r7,r7,#8
 1787              	.LCFI155:
 1788              	 .cfi_def_cfa_offset 8
 1789 0028 BD46     	 mov sp,r7
 1790              	.LCFI156:
 1791              	 .cfi_def_cfa_register 13
 1792              	 
 1793 002a 80BD     	 pop {r7,pc}
 1794              	.L119:
 1795              	 .align 2
 1796              	.L118:
 1797 002c 00000000 	 .word __pg_registry_start
 1798 0030 00000000 	 .word __pg_registry_end
 1799 0034 00000000 	 .word configIsInCopy
 1800              	 .cfi_endproc
 1801              	.LFE689:
 1803              	 .section .text.restoreConfigs,"ax",%progbits
 1804              	 .align 2
 1805              	 .thumb
 1806              	 .thumb_func
 1808              	restoreConfigs:
 1809              	.LFB690:
 256:../cleanflight/src/main/interface/cli.c **** 
 257:../cleanflight/src/main/interface/cli.c **** static void restoreConfigs(void)
 258:../cleanflight/src/main/interface/cli.c **** {
 1810              	 .loc 13 258 0
 1811              	 .cfi_startproc
 1812              	 
 1813              	 
 1814 0000 80B5     	 push {r7,lr}
 1815              	.LCFI157:
 1816              	 .cfi_def_cfa_offset 8
 1817              	 .cfi_offset 7,-8
 1818              	 .cfi_offset 14,-4
 1819 0002 82B0     	 sub sp,sp,#8
 1820              	.LCFI158:
 1821              	 .cfi_def_cfa_offset 16
 1822 0004 00AF     	 add r7,sp,#0
 1823              	.LCFI159:
 1824              	 .cfi_def_cfa_register 7
 1825              	.LBB3:
 259:../cleanflight/src/main/interface/cli.c ****     PG_FOREACH(pg) {
 1826              	 .loc 13 259 0
 1827 0006 094B     	 ldr r3,.L123
 1828 0008 7B60     	 str r3,[r7,#4]
 1829 000a 05E0     	 b .L121
 1830              	.L122:
 260:../cleanflight/src/main/interface/cli.c ****         restorePgConfig(pg);
 1831              	 .loc 13 260 0 discriminator 3
 1832 000c 7868     	 ldr r0,[r7,#4]
 1833 000e FFF7FEFF 	 bl restorePgConfig
 259:../cleanflight/src/main/interface/cli.c ****     PG_FOREACH(pg) {
 1834              	 .loc 13 259 0 discriminator 3
 1835 0012 7B68     	 ldr r3,[r7,#4]
 1836 0014 1433     	 adds r3,r3,#20
 1837 0016 7B60     	 str r3,[r7,#4]
 1838              	.L121:
 259:../cleanflight/src/main/interface/cli.c ****     PG_FOREACH(pg) {
 1839              	 .loc 13 259 0 is_stmt 0 discriminator 1
 1840 0018 7B68     	 ldr r3,[r7,#4]
 1841 001a 054A     	 ldr r2,.L123+4
 1842 001c 9342     	 cmp r3,r2
 1843 001e F5D3     	 bcc .L122
 1844              	.LBE3:
 261:../cleanflight/src/main/interface/cli.c ****     }
 262:../cleanflight/src/main/interface/cli.c **** 
 263:../cleanflight/src/main/interface/cli.c ****     configIsInCopy = false;
 1845              	 .loc 13 263 0 is_stmt 1
 1846 0020 044B     	 ldr r3,.L123+8
 1847 0022 0022     	 movs r2,#0
 1848 0024 1A70     	 strb r2,[r3]
 264:../cleanflight/src/main/interface/cli.c **** }
 1849              	 .loc 13 264 0
 1850 0026 0837     	 adds r7,r7,#8
 1851              	.LCFI160:
 1852              	 .cfi_def_cfa_offset 8
 1853 0028 BD46     	 mov sp,r7
 1854              	.LCFI161:
 1855              	 .cfi_def_cfa_register 13
 1856              	 
 1857 002a 80BD     	 pop {r7,pc}
 1858              	.L124:
 1859              	 .align 2
 1860              	.L123:
 1861 002c 00000000 	 .word __pg_registry_start
 1862 0030 00000000 	 .word __pg_registry_end
 1863 0034 00000000 	 .word configIsInCopy
 1864              	 .cfi_endproc
 1865              	.LFE690:
 1867              	 .section .text.backupAndResetConfigs,"ax",%progbits
 1868              	 .align 2
 1869              	 .thumb
 1870              	 .thumb_func
 1872              	backupAndResetConfigs:
 1873              	.LFB691:
 265:../cleanflight/src/main/interface/cli.c **** 
 266:../cleanflight/src/main/interface/cli.c **** static void backupAndResetConfigs(void)
 267:../cleanflight/src/main/interface/cli.c **** {
 1874              	 .loc 13 267 0
 1875              	 .cfi_startproc
 1876              	 
 1877              	 
 1878 0000 80B5     	 push {r7,lr}
 1879              	.LCFI162:
 1880              	 .cfi_def_cfa_offset 8
 1881              	 .cfi_offset 7,-8
 1882              	 .cfi_offset 14,-4
 1883 0002 00AF     	 add r7,sp,#0
 1884              	.LCFI163:
 1885              	 .cfi_def_cfa_register 7
 268:../cleanflight/src/main/interface/cli.c ****     backupConfigs();
 1886              	 .loc 13 268 0
 1887 0004 FFF7FEFF 	 bl backupConfigs
 269:../cleanflight/src/main/interface/cli.c ****     // reset all configs to defaults to do differencing
 270:../cleanflight/src/main/interface/cli.c ****     resetConfigs();
 1888              	 .loc 13 270 0
 1889 0008 FFF7FEFF 	 bl resetConfigs
 271:../cleanflight/src/main/interface/cli.c **** }
 1890              	 .loc 13 271 0
 1891 000c 80BD     	 pop {r7,pc}
 1892              	 .cfi_endproc
 1893              	.LFE691:
 1895 000e 00BF     	 .section .text.cliPrint,"ax",%progbits
 1896              	 .align 2
 1897              	 .thumb
 1898              	 .thumb_func
 1900              	cliPrint:
 1901              	.LFB692:
 272:../cleanflight/src/main/interface/cli.c **** 
 273:../cleanflight/src/main/interface/cli.c **** static void cliPrint(const char *str)
 274:../cleanflight/src/main/interface/cli.c **** {
 1902              	 .loc 13 274 0
 1903              	 .cfi_startproc
 1904              	 
 1905              	 
 1906 0000 80B5     	 push {r7,lr}
 1907              	.LCFI164:
 1908              	 .cfi_def_cfa_offset 8
 1909              	 .cfi_offset 7,-8
 1910              	 .cfi_offset 14,-4
 1911 0002 82B0     	 sub sp,sp,#8
 1912              	.LCFI165:
 1913              	 .cfi_def_cfa_offset 16
 1914 0004 00AF     	 add r7,sp,#0
 1915              	.LCFI166:
 1916              	 .cfi_def_cfa_register 7
 1917 0006 7860     	 str r0,[r7,#4]
 275:../cleanflight/src/main/interface/cli.c ****     while (*str) {
 1918              	 .loc 13 275 0
 1919 0008 09E0     	 b .L127
 1920              	.L128:
 276:../cleanflight/src/main/interface/cli.c ****         bufWriterAppend(cliWriter, *str++);
 1921              	 .loc 13 276 0
 1922 000a 0B4B     	 ldr r3,.L129
 1923 000c 1968     	 ldr r1,[r3]
 1924 000e 7B68     	 ldr r3,[r7,#4]
 1925 0010 5A1C     	 adds r2,r3,#1
 1926 0012 7A60     	 str r2,[r7,#4]
 1927 0014 1B78     	 ldrb r3,[r3]
 1928 0016 0846     	 mov r0,r1
 1929 0018 1946     	 mov r1,r3
 1930 001a FFF7FEFF 	 bl bufWriterAppend
 1931              	.L127:
 275:../cleanflight/src/main/interface/cli.c ****     while (*str) {
 1932              	 .loc 13 275 0
 1933 001e 7B68     	 ldr r3,[r7,#4]
 1934 0020 1B78     	 ldrb r3,[r3]
 1935 0022 002B     	 cmp r3,#0
 1936 0024 F1D1     	 bne .L128
 277:../cleanflight/src/main/interface/cli.c ****     }
 278:../cleanflight/src/main/interface/cli.c ****     bufWriterFlush(cliWriter);
 1937              	 .loc 13 278 0
 1938 0026 044B     	 ldr r3,.L129
 1939 0028 1B68     	 ldr r3,[r3]
 1940 002a 1846     	 mov r0,r3
 1941 002c FFF7FEFF 	 bl bufWriterFlush
 279:../cleanflight/src/main/interface/cli.c **** }
 1942              	 .loc 13 279 0
 1943 0030 0837     	 adds r7,r7,#8
 1944              	.LCFI167:
 1945              	 .cfi_def_cfa_offset 8
 1946 0032 BD46     	 mov sp,r7
 1947              	.LCFI168:
 1948              	 .cfi_def_cfa_register 13
 1949              	 
 1950 0034 80BD     	 pop {r7,pc}
 1951              	.L130:
 1952 0036 00BF     	 .align 2
 1953              	.L129:
 1954 0038 00000000 	 .word cliWriter
 1955              	 .cfi_endproc
 1956              	.LFE692:
 1958              	 .section .rodata
 1959              	 .align 2
 1960              	.LC57:
 1961 0230 0D0A00   	 .ascii "\015\012\000"
 1962              	 .section .text.cliPrintLinefeed,"ax",%progbits
 1963              	 .align 2
 1964              	 .thumb
 1965              	 .thumb_func
 1967              	cliPrintLinefeed:
 1968              	.LFB693:
 280:../cleanflight/src/main/interface/cli.c **** 
 281:../cleanflight/src/main/interface/cli.c **** static void cliPrintLinefeed(void)
 282:../cleanflight/src/main/interface/cli.c **** {
 1969              	 .loc 13 282 0
 1970              	 .cfi_startproc
 1971              	 
 1972              	 
 1973 0000 80B5     	 push {r7,lr}
 1974              	.LCFI169:
 1975              	 .cfi_def_cfa_offset 8
 1976              	 .cfi_offset 7,-8
 1977              	 .cfi_offset 14,-4
 1978 0002 00AF     	 add r7,sp,#0
 1979              	.LCFI170:
 1980              	 .cfi_def_cfa_register 7
 283:../cleanflight/src/main/interface/cli.c ****     cliPrint("\r\n");
 1981              	 .loc 13 283 0
 1982 0004 0148     	 ldr r0,.L132
 1983 0006 FFF7FEFF 	 bl cliPrint
 284:../cleanflight/src/main/interface/cli.c **** }
 1984              	 .loc 13 284 0
 1985 000a 80BD     	 pop {r7,pc}
 1986              	.L133:
 1987              	 .align 2
 1988              	.L132:
 1989 000c 30020000 	 .word .LC57
 1990              	 .cfi_endproc
 1991              	.LFE693:
 1993              	 .section .text.cliPrintLine,"ax",%progbits
 1994              	 .align 2
 1995              	 .thumb
 1996              	 .thumb_func
 1998              	cliPrintLine:
 1999              	.LFB694:
 285:../cleanflight/src/main/interface/cli.c **** 
 286:../cleanflight/src/main/interface/cli.c **** static void cliPrintLine(const char *str)
 287:../cleanflight/src/main/interface/cli.c **** {
 2000              	 .loc 13 287 0
 2001              	 .cfi_startproc
 2002              	 
 2003              	 
 2004 0000 80B5     	 push {r7,lr}
 2005              	.LCFI171:
 2006              	 .cfi_def_cfa_offset 8
 2007              	 .cfi_offset 7,-8
 2008              	 .cfi_offset 14,-4
 2009 0002 82B0     	 sub sp,sp,#8
 2010              	.LCFI172:
 2011              	 .cfi_def_cfa_offset 16
 2012 0004 00AF     	 add r7,sp,#0
 2013              	.LCFI173:
 2014              	 .cfi_def_cfa_register 7
 2015 0006 7860     	 str r0,[r7,#4]
 288:../cleanflight/src/main/interface/cli.c ****     cliPrint(str);
 2016              	 .loc 13 288 0
 2017 0008 7868     	 ldr r0,[r7,#4]
 2018 000a FFF7FEFF 	 bl cliPrint
 289:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 2019              	 .loc 13 289 0
 2020 000e FFF7FEFF 	 bl cliPrintLinefeed
 290:../cleanflight/src/main/interface/cli.c **** }
 2021              	 .loc 13 290 0
 2022 0012 0837     	 adds r7,r7,#8
 2023              	.LCFI174:
 2024              	 .cfi_def_cfa_offset 8
 2025 0014 BD46     	 mov sp,r7
 2026              	.LCFI175:
 2027              	 .cfi_def_cfa_register 13
 2028              	 
 2029 0016 80BD     	 pop {r7,pc}
 2030              	 .cfi_endproc
 2031              	.LFE694:
 2033              	 .section .rodata
 2034 0233 00       	 .align 2
 2035              	.LC58:
 2036 0234 0D0A2320 	 .ascii "\015\012# \000"
 2036      00
 2037              	 .section .text.cliPrintHashLine,"ax",%progbits
 2038              	 .align 2
 2039              	 .thumb
 2040              	 .thumb_func
 2042              	cliPrintHashLine:
 2043              	.LFB695:
 291:../cleanflight/src/main/interface/cli.c **** 
 292:../cleanflight/src/main/interface/cli.c **** #ifdef MINIMAL_CLI
 293:../cleanflight/src/main/interface/cli.c **** #define cliPrintHashLine(str)
 294:../cleanflight/src/main/interface/cli.c **** #else
 295:../cleanflight/src/main/interface/cli.c **** static void cliPrintHashLine(const char *str)
 296:../cleanflight/src/main/interface/cli.c **** {
 2044              	 .loc 13 296 0
 2045              	 .cfi_startproc
 2046              	 
 2047              	 
 2048 0000 80B5     	 push {r7,lr}
 2049              	.LCFI176:
 2050              	 .cfi_def_cfa_offset 8
 2051              	 .cfi_offset 7,-8
 2052              	 .cfi_offset 14,-4
 2053 0002 82B0     	 sub sp,sp,#8
 2054              	.LCFI177:
 2055              	 .cfi_def_cfa_offset 16
 2056 0004 00AF     	 add r7,sp,#0
 2057              	.LCFI178:
 2058              	 .cfi_def_cfa_register 7
 2059 0006 7860     	 str r0,[r7,#4]
 297:../cleanflight/src/main/interface/cli.c ****     cliPrint("\r\n# ");
 2060              	 .loc 13 297 0
 2061 0008 0448     	 ldr r0,.L136
 2062 000a FFF7FEFF 	 bl cliPrint
 298:../cleanflight/src/main/interface/cli.c ****     cliPrintLine(str);
 2063              	 .loc 13 298 0
 2064 000e 7868     	 ldr r0,[r7,#4]
 2065 0010 FFF7FEFF 	 bl cliPrintLine
 299:../cleanflight/src/main/interface/cli.c **** }
 2066              	 .loc 13 299 0
 2067 0014 0837     	 adds r7,r7,#8
 2068              	.LCFI179:
 2069              	 .cfi_def_cfa_offset 8
 2070 0016 BD46     	 mov sp,r7
 2071              	.LCFI180:
 2072              	 .cfi_def_cfa_register 13
 2073              	 
 2074 0018 80BD     	 pop {r7,pc}
 2075              	.L137:
 2076 001a 00BF     	 .align 2
 2077              	.L136:
 2078 001c 34020000 	 .word .LC58
 2079              	 .cfi_endproc
 2080              	.LFE695:
 2082              	 .section .text.cliPutp,"ax",%progbits
 2083              	 .align 2
 2084              	 .thumb
 2085              	 .thumb_func
 2087              	cliPutp:
 2088              	.LFB696:
 300:../cleanflight/src/main/interface/cli.c **** #endif
 301:../cleanflight/src/main/interface/cli.c **** 
 302:../cleanflight/src/main/interface/cli.c **** static void cliPutp(void *p, char ch)
 303:../cleanflight/src/main/interface/cli.c **** {
 2089              	 .loc 13 303 0
 2090              	 .cfi_startproc
 2091              	 
 2092              	 
 2093 0000 80B5     	 push {r7,lr}
 2094              	.LCFI181:
 2095              	 .cfi_def_cfa_offset 8
 2096              	 .cfi_offset 7,-8
 2097              	 .cfi_offset 14,-4
 2098 0002 82B0     	 sub sp,sp,#8
 2099              	.LCFI182:
 2100              	 .cfi_def_cfa_offset 16
 2101 0004 00AF     	 add r7,sp,#0
 2102              	.LCFI183:
 2103              	 .cfi_def_cfa_register 7
 2104 0006 7860     	 str r0,[r7,#4]
 2105 0008 0B46     	 mov r3,r1
 2106 000a FB70     	 strb r3,[r7,#3]
 304:../cleanflight/src/main/interface/cli.c ****     bufWriterAppend(p, ch);
 2107              	 .loc 13 304 0
 2108 000c FB78     	 ldrb r3,[r7,#3]
 2109 000e 7868     	 ldr r0,[r7,#4]
 2110 0010 1946     	 mov r1,r3
 2111 0012 FFF7FEFF 	 bl bufWriterAppend
 305:../cleanflight/src/main/interface/cli.c **** }
 2112              	 .loc 13 305 0
 2113 0016 0837     	 adds r7,r7,#8
 2114              	.LCFI184:
 2115              	 .cfi_def_cfa_offset 8
 2116 0018 BD46     	 mov sp,r7
 2117              	.LCFI185:
 2118              	 .cfi_def_cfa_register 13
 2119              	 
 2120 001a 80BD     	 pop {r7,pc}
 2121              	 .cfi_endproc
 2122              	.LFE696:
 2124              	 .section .text.cliPrintfva,"ax",%progbits
 2125              	 .align 2
 2126              	 .thumb
 2127              	 .thumb_func
 2129              	cliPrintfva:
 2130              	.LFB697:
 306:../cleanflight/src/main/interface/cli.c **** 
 307:../cleanflight/src/main/interface/cli.c **** typedef enum {
 308:../cleanflight/src/main/interface/cli.c ****     DUMP_MASTER = (1 << 0),
 309:../cleanflight/src/main/interface/cli.c ****     DUMP_PROFILE = (1 << 1),
 310:../cleanflight/src/main/interface/cli.c ****     DUMP_RATES = (1 << 2),
 311:../cleanflight/src/main/interface/cli.c ****     DUMP_ALL = (1 << 3),
 312:../cleanflight/src/main/interface/cli.c ****     DO_DIFF = (1 << 4),
 313:../cleanflight/src/main/interface/cli.c ****     SHOW_DEFAULTS = (1 << 5),
 314:../cleanflight/src/main/interface/cli.c ****     HIDE_UNUSED = (1 << 6)
 315:../cleanflight/src/main/interface/cli.c **** } dumpFlags_e;
 316:../cleanflight/src/main/interface/cli.c **** 
 317:../cleanflight/src/main/interface/cli.c **** static void cliPrintfva(const char *format, va_list va)
 318:../cleanflight/src/main/interface/cli.c **** {
 2131              	 .loc 13 318 0
 2132              	 .cfi_startproc
 2133              	 
 2134              	 
 2135 0000 80B5     	 push {r7,lr}
 2136              	.LCFI186:
 2137              	 .cfi_def_cfa_offset 8
 2138              	 .cfi_offset 7,-8
 2139              	 .cfi_offset 14,-4
 2140 0002 82B0     	 sub sp,sp,#8
 2141              	.LCFI187:
 2142              	 .cfi_def_cfa_offset 16
 2143 0004 00AF     	 add r7,sp,#0
 2144              	.LCFI188:
 2145              	 .cfi_def_cfa_register 7
 2146 0006 7860     	 str r0,[r7,#4]
 2147 0008 3960     	 str r1,[r7]
 319:../cleanflight/src/main/interface/cli.c ****     tfp_format(cliWriter, cliPutp, format, va);
 2148              	 .loc 13 319 0
 2149 000a 084B     	 ldr r3,.L140
 2150 000c 1B68     	 ldr r3,[r3]
 2151 000e 1846     	 mov r0,r3
 2152 0010 0749     	 ldr r1,.L140+4
 2153 0012 7A68     	 ldr r2,[r7,#4]
 2154 0014 3B68     	 ldr r3,[r7]
 2155 0016 FFF7FEFF 	 bl tfp_format
 320:../cleanflight/src/main/interface/cli.c ****     bufWriterFlush(cliWriter);
 2156              	 .loc 13 320 0
 2157 001a 044B     	 ldr r3,.L140
 2158 001c 1B68     	 ldr r3,[r3]
 2159 001e 1846     	 mov r0,r3
 2160 0020 FFF7FEFF 	 bl bufWriterFlush
 321:../cleanflight/src/main/interface/cli.c **** }
 2161              	 .loc 13 321 0
 2162 0024 0837     	 adds r7,r7,#8
 2163              	.LCFI189:
 2164              	 .cfi_def_cfa_offset 8
 2165 0026 BD46     	 mov sp,r7
 2166              	.LCFI190:
 2167              	 .cfi_def_cfa_register 13
 2168              	 
 2169 0028 80BD     	 pop {r7,pc}
 2170              	.L141:
 2171 002a 00BF     	 .align 2
 2172              	.L140:
 2173 002c 00000000 	 .word cliWriter
 2174 0030 00000000 	 .word cliPutp
 2175              	 .cfi_endproc
 2176              	.LFE697:
 2178              	 .section .text.cliDumpPrintLinef,"ax",%progbits
 2179              	 .align 2
 2180              	 .thumb
 2181              	 .thumb_func
 2183              	cliDumpPrintLinef:
 2184              	.LFB698:
 322:../cleanflight/src/main/interface/cli.c **** 
 323:../cleanflight/src/main/interface/cli.c **** static bool cliDumpPrintLinef(uint8_t dumpMask, bool equalsDefault, const char *format, ...)
 324:../cleanflight/src/main/interface/cli.c **** {
 2185              	 .loc 13 324 0
 2186              	 .cfi_startproc
 2187              	 
 2188              	 
 2189 0000 0CB4     	 push {r2,r3}
 2190              	.LCFI191:
 2191              	 .cfi_def_cfa_offset 8
 2192              	 .cfi_offset 2,-8
 2193              	 .cfi_offset 3,-4
 2194 0002 80B5     	 push {r7,lr}
 2195              	.LCFI192:
 2196              	 .cfi_def_cfa_offset 16
 2197              	 .cfi_offset 7,-16
 2198              	 .cfi_offset 14,-12
 2199 0004 84B0     	 sub sp,sp,#16
 2200              	.LCFI193:
 2201              	 .cfi_def_cfa_offset 32
 2202 0006 00AF     	 add r7,sp,#0
 2203              	.LCFI194:
 2204              	 .cfi_def_cfa_register 7
 2205 0008 0346     	 mov r3,r0
 2206 000a 0A46     	 mov r2,r1
 2207 000c FB71     	 strb r3,[r7,#7]
 2208 000e 1346     	 mov r3,r2
 2209 0010 BB71     	 strb r3,[r7,#6]
 325:../cleanflight/src/main/interface/cli.c ****     if (!((dumpMask & DO_DIFF) && equalsDefault)) {
 2210              	 .loc 13 325 0
 2211 0012 FB79     	 ldrb r3,[r7,#7]
 2212 0014 03F01003 	 and r3,r3,#16
 2213 0018 002B     	 cmp r3,#0
 2214 001a 05D0     	 beq .L143
 2215              	 .loc 13 325 0 is_stmt 0 discriminator 1
 2216 001c BB79     	 ldrb r3,[r7,#6]
 2217 001e 83F00103 	 eor r3,r3,#1
 2218 0022 DBB2     	 uxtb r3,r3
 2219 0024 002B     	 cmp r3,#0
 2220 0026 0AD0     	 beq .L144
 2221              	.L143:
 2222              	.LBB4:
 326:../cleanflight/src/main/interface/cli.c ****         va_list va;
 327:../cleanflight/src/main/interface/cli.c ****         va_start(va, format);
 2223              	 .loc 13 327 0 is_stmt 1
 2224 0028 07F11C03 	 add r3,r7,#28
 2225 002c FB60     	 str r3,[r7,#12]
 328:../cleanflight/src/main/interface/cli.c ****         cliPrintfva(format, va);
 2226              	 .loc 13 328 0
 2227 002e B869     	 ldr r0,[r7,#24]
 2228 0030 F968     	 ldr r1,[r7,#12]
 2229 0032 FFF7FEFF 	 bl cliPrintfva
 329:../cleanflight/src/main/interface/cli.c ****         va_end(va);
 330:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 2230              	 .loc 13 330 0
 2231 0036 FFF7FEFF 	 bl cliPrintLinefeed
 331:../cleanflight/src/main/interface/cli.c ****         return true;
 2232              	 .loc 13 331 0
 2233 003a 0123     	 movs r3,#1
 2234 003c 00E0     	 b .L145
 2235              	.L144:
 2236              	.LBE4:
 332:../cleanflight/src/main/interface/cli.c ****     } else {
 333:../cleanflight/src/main/interface/cli.c ****         return false;
 2237              	 .loc 13 333 0
 2238 003e 0023     	 movs r3,#0
 2239              	.L145:
 334:../cleanflight/src/main/interface/cli.c ****     }
 335:../cleanflight/src/main/interface/cli.c **** }
 2240              	 .loc 13 335 0 discriminator 1
 2241 0040 1846     	 mov r0,r3
 2242 0042 1037     	 adds r7,r7,#16
 2243              	.LCFI195:
 2244              	 .cfi_def_cfa_offset 16
 2245 0044 BD46     	 mov sp,r7
 2246              	.LCFI196:
 2247              	 .cfi_def_cfa_register 13
 2248              	 
 2249 0046 BDE88040 	 pop {r7,lr}
 2250              	.LCFI197:
 2251              	 .cfi_restore 14
 2252              	 .cfi_restore 7
 2253              	 .cfi_def_cfa_offset 8
 2254 004a 02B0     	 add sp,sp,#8
 2255              	.LCFI198:
 2256              	 .cfi_restore 3
 2257              	 .cfi_restore 2
 2258              	 .cfi_def_cfa_offset 0
 2259 004c 7047     	 bx lr
 2260              	 .cfi_endproc
 2261              	.LFE698:
 2263 004e 00BF     	 .section .text.cliWrite,"ax",%progbits
 2264              	 .align 2
 2265              	 .thumb
 2266              	 .thumb_func
 2268              	cliWrite:
 2269              	.LFB699:
 336:../cleanflight/src/main/interface/cli.c **** 
 337:../cleanflight/src/main/interface/cli.c **** static void cliWrite(uint8_t ch)
 338:../cleanflight/src/main/interface/cli.c **** {
 2270              	 .loc 13 338 0
 2271              	 .cfi_startproc
 2272              	 
 2273              	 
 2274 0000 80B5     	 push {r7,lr}
 2275              	.LCFI199:
 2276              	 .cfi_def_cfa_offset 8
 2277              	 .cfi_offset 7,-8
 2278              	 .cfi_offset 14,-4
 2279 0002 82B0     	 sub sp,sp,#8
 2280              	.LCFI200:
 2281              	 .cfi_def_cfa_offset 16
 2282 0004 00AF     	 add r7,sp,#0
 2283              	.LCFI201:
 2284              	 .cfi_def_cfa_register 7
 2285 0006 0346     	 mov r3,r0
 2286 0008 FB71     	 strb r3,[r7,#7]
 339:../cleanflight/src/main/interface/cli.c ****     bufWriterAppend(cliWriter, ch);
 2287              	 .loc 13 339 0
 2288 000a 054B     	 ldr r3,.L147
 2289 000c 1A68     	 ldr r2,[r3]
 2290 000e FB79     	 ldrb r3,[r7,#7]
 2291 0010 1046     	 mov r0,r2
 2292 0012 1946     	 mov r1,r3
 2293 0014 FFF7FEFF 	 bl bufWriterAppend
 340:../cleanflight/src/main/interface/cli.c **** }
 2294              	 .loc 13 340 0
 2295 0018 0837     	 adds r7,r7,#8
 2296              	.LCFI202:
 2297              	 .cfi_def_cfa_offset 8
 2298 001a BD46     	 mov sp,r7
 2299              	.LCFI203:
 2300              	 .cfi_def_cfa_register 13
 2301              	 
 2302 001c 80BD     	 pop {r7,pc}
 2303              	.L148:
 2304 001e 00BF     	 .align 2
 2305              	.L147:
 2306 0020 00000000 	 .word cliWriter
 2307              	 .cfi_endproc
 2308              	.LFE699:
 2310              	 .section .text.cliDefaultPrintLinef,"ax",%progbits
 2311              	 .align 2
 2312              	 .thumb
 2313              	 .thumb_func
 2315              	cliDefaultPrintLinef:
 2316              	.LFB700:
 341:../cleanflight/src/main/interface/cli.c **** 
 342:../cleanflight/src/main/interface/cli.c **** static bool cliDefaultPrintLinef(uint8_t dumpMask, bool equalsDefault, const char *format, ...)
 343:../cleanflight/src/main/interface/cli.c **** {
 2317              	 .loc 13 343 0
 2318              	 .cfi_startproc
 2319              	 
 2320              	 
 2321 0000 0CB4     	 push {r2,r3}
 2322              	.LCFI204:
 2323              	 .cfi_def_cfa_offset 8
 2324              	 .cfi_offset 2,-8
 2325              	 .cfi_offset 3,-4
 2326 0002 80B5     	 push {r7,lr}
 2327              	.LCFI205:
 2328              	 .cfi_def_cfa_offset 16
 2329              	 .cfi_offset 7,-16
 2330              	 .cfi_offset 14,-12
 2331 0004 84B0     	 sub sp,sp,#16
 2332              	.LCFI206:
 2333              	 .cfi_def_cfa_offset 32
 2334 0006 00AF     	 add r7,sp,#0
 2335              	.LCFI207:
 2336              	 .cfi_def_cfa_register 7
 2337 0008 0346     	 mov r3,r0
 2338 000a 0A46     	 mov r2,r1
 2339 000c FB71     	 strb r3,[r7,#7]
 2340 000e 1346     	 mov r3,r2
 2341 0010 BB71     	 strb r3,[r7,#6]
 344:../cleanflight/src/main/interface/cli.c ****     if ((dumpMask & SHOW_DEFAULTS) && !equalsDefault) {
 2342              	 .loc 13 344 0
 2343 0012 FB79     	 ldrb r3,[r7,#7]
 2344 0014 03F02003 	 and r3,r3,#32
 2345 0018 002B     	 cmp r3,#0
 2346 001a 13D0     	 beq .L150
 2347              	 .loc 13 344 0 is_stmt 0 discriminator 1
 2348 001c BB79     	 ldrb r3,[r7,#6]
 2349 001e 83F00103 	 eor r3,r3,#1
 2350 0022 DBB2     	 uxtb r3,r3
 2351 0024 002B     	 cmp r3,#0
 2352 0026 0DD0     	 beq .L150
 2353              	.LBB5:
 345:../cleanflight/src/main/interface/cli.c ****         cliWrite('#');
 2354              	 .loc 13 345 0 is_stmt 1
 2355 0028 2320     	 movs r0,#35
 2356 002a FFF7FEFF 	 bl cliWrite
 346:../cleanflight/src/main/interface/cli.c **** 
 347:../cleanflight/src/main/interface/cli.c ****         va_list va;
 348:../cleanflight/src/main/interface/cli.c ****         va_start(va, format);
 2357              	 .loc 13 348 0
 2358 002e 07F11C03 	 add r3,r7,#28
 2359 0032 FB60     	 str r3,[r7,#12]
 349:../cleanflight/src/main/interface/cli.c ****         cliPrintfva(format, va);
 2360              	 .loc 13 349 0
 2361 0034 B869     	 ldr r0,[r7,#24]
 2362 0036 F968     	 ldr r1,[r7,#12]
 2363 0038 FFF7FEFF 	 bl cliPrintfva
 350:../cleanflight/src/main/interface/cli.c ****         va_end(va);
 351:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 2364              	 .loc 13 351 0
 2365 003c FFF7FEFF 	 bl cliPrintLinefeed
 352:../cleanflight/src/main/interface/cli.c ****         return true;
 2366              	 .loc 13 352 0
 2367 0040 0123     	 movs r3,#1
 2368 0042 00E0     	 b .L151
 2369              	.L150:
 2370              	.LBE5:
 353:../cleanflight/src/main/interface/cli.c ****     } else {
 354:../cleanflight/src/main/interface/cli.c ****         return false;
 2371              	 .loc 13 354 0
 2372 0044 0023     	 movs r3,#0
 2373              	.L151:
 355:../cleanflight/src/main/interface/cli.c ****     }
 356:../cleanflight/src/main/interface/cli.c **** }
 2374              	 .loc 13 356 0 discriminator 1
 2375 0046 1846     	 mov r0,r3
 2376 0048 1037     	 adds r7,r7,#16
 2377              	.LCFI208:
 2378              	 .cfi_def_cfa_offset 16
 2379 004a BD46     	 mov sp,r7
 2380              	.LCFI209:
 2381              	 .cfi_def_cfa_register 13
 2382              	 
 2383 004c BDE88040 	 pop {r7,lr}
 2384              	.LCFI210:
 2385              	 .cfi_restore 14
 2386              	 .cfi_restore 7
 2387              	 .cfi_def_cfa_offset 8
 2388 0050 02B0     	 add sp,sp,#8
 2389              	.LCFI211:
 2390              	 .cfi_restore 3
 2391              	 .cfi_restore 2
 2392              	 .cfi_def_cfa_offset 0
 2393 0052 7047     	 bx lr
 2394              	 .cfi_endproc
 2395              	.LFE700:
 2397              	 .section .text.cliPrintf,"ax",%progbits
 2398              	 .align 2
 2399              	 .thumb
 2400              	 .thumb_func
 2402              	cliPrintf:
 2403              	.LFB701:
 357:../cleanflight/src/main/interface/cli.c **** 
 358:../cleanflight/src/main/interface/cli.c **** static void cliPrintf(const char *format, ...)
 359:../cleanflight/src/main/interface/cli.c **** {
 2404              	 .loc 13 359 0
 2405              	 .cfi_startproc
 2406              	 
 2407              	 
 2408 0000 0FB4     	 push {r0,r1,r2,r3}
 2409              	.LCFI212:
 2410              	 .cfi_def_cfa_offset 16
 2411              	 .cfi_offset 0,-16
 2412              	 .cfi_offset 1,-12
 2413              	 .cfi_offset 2,-8
 2414              	 .cfi_offset 3,-4
 2415 0002 80B5     	 push {r7,lr}
 2416              	.LCFI213:
 2417              	 .cfi_def_cfa_offset 24
 2418              	 .cfi_offset 7,-24
 2419              	 .cfi_offset 14,-20
 2420 0004 82B0     	 sub sp,sp,#8
 2421              	.LCFI214:
 2422              	 .cfi_def_cfa_offset 32
 2423 0006 00AF     	 add r7,sp,#0
 2424              	.LCFI215:
 2425              	 .cfi_def_cfa_register 7
 360:../cleanflight/src/main/interface/cli.c ****     va_list va;
 361:../cleanflight/src/main/interface/cli.c ****     va_start(va, format);
 2426              	 .loc 13 361 0
 2427 0008 07F11403 	 add r3,r7,#20
 2428 000c 7B60     	 str r3,[r7,#4]
 362:../cleanflight/src/main/interface/cli.c ****     cliPrintfva(format, va);
 2429              	 .loc 13 362 0
 2430 000e 3869     	 ldr r0,[r7,#16]
 2431 0010 7968     	 ldr r1,[r7,#4]
 2432 0012 FFF7FEFF 	 bl cliPrintfva
 363:../cleanflight/src/main/interface/cli.c ****     va_end(va);
 364:../cleanflight/src/main/interface/cli.c **** }
 2433              	 .loc 13 364 0
 2434 0016 0837     	 adds r7,r7,#8
 2435              	.LCFI216:
 2436              	 .cfi_def_cfa_offset 24
 2437 0018 BD46     	 mov sp,r7
 2438              	.LCFI217:
 2439              	 .cfi_def_cfa_register 13
 2440              	 
 2441 001a BDE88040 	 pop {r7,lr}
 2442              	.LCFI218:
 2443              	 .cfi_restore 14
 2444              	 .cfi_restore 7
 2445              	 .cfi_def_cfa_offset 16
 2446 001e 04B0     	 add sp,sp,#16
 2447              	.LCFI219:
 2448              	 .cfi_restore 3
 2449              	 .cfi_restore 2
 2450              	 .cfi_restore 1
 2451              	 .cfi_restore 0
 2452              	 .cfi_def_cfa_offset 0
 2453 0020 7047     	 bx lr
 2454              	 .cfi_endproc
 2455              	.LFE701:
 2457 0022 00BF     	 .section .text.cliPrintLinef,"ax",%progbits
 2458              	 .align 2
 2459              	 .thumb
 2460              	 .thumb_func
 2462              	cliPrintLinef:
 2463              	.LFB702:
 365:../cleanflight/src/main/interface/cli.c **** 
 366:../cleanflight/src/main/interface/cli.c **** 
 367:../cleanflight/src/main/interface/cli.c **** static void cliPrintLinef(const char *format, ...)
 368:../cleanflight/src/main/interface/cli.c **** {
 2464              	 .loc 13 368 0
 2465              	 .cfi_startproc
 2466              	 
 2467              	 
 2468 0000 0FB4     	 push {r0,r1,r2,r3}
 2469              	.LCFI220:
 2470              	 .cfi_def_cfa_offset 16
 2471              	 .cfi_offset 0,-16
 2472              	 .cfi_offset 1,-12
 2473              	 .cfi_offset 2,-8
 2474              	 .cfi_offset 3,-4
 2475 0002 80B5     	 push {r7,lr}
 2476              	.LCFI221:
 2477              	 .cfi_def_cfa_offset 24
 2478              	 .cfi_offset 7,-24
 2479              	 .cfi_offset 14,-20
 2480 0004 82B0     	 sub sp,sp,#8
 2481              	.LCFI222:
 2482              	 .cfi_def_cfa_offset 32
 2483 0006 00AF     	 add r7,sp,#0
 2484              	.LCFI223:
 2485              	 .cfi_def_cfa_register 7
 369:../cleanflight/src/main/interface/cli.c ****     va_list va;
 370:../cleanflight/src/main/interface/cli.c ****     va_start(va, format);
 2486              	 .loc 13 370 0
 2487 0008 07F11403 	 add r3,r7,#20
 2488 000c 7B60     	 str r3,[r7,#4]
 371:../cleanflight/src/main/interface/cli.c ****     cliPrintfva(format, va);
 2489              	 .loc 13 371 0
 2490 000e 3869     	 ldr r0,[r7,#16]
 2491 0010 7968     	 ldr r1,[r7,#4]
 2492 0012 FFF7FEFF 	 bl cliPrintfva
 372:../cleanflight/src/main/interface/cli.c ****     va_end(va);
 373:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 2493              	 .loc 13 373 0
 2494 0016 FFF7FEFF 	 bl cliPrintLinefeed
 374:../cleanflight/src/main/interface/cli.c **** }
 2495              	 .loc 13 374 0
 2496 001a 0837     	 adds r7,r7,#8
 2497              	.LCFI224:
 2498              	 .cfi_def_cfa_offset 24
 2499 001c BD46     	 mov sp,r7
 2500              	.LCFI225:
 2501              	 .cfi_def_cfa_register 13
 2502              	 
 2503 001e BDE88040 	 pop {r7,lr}
 2504              	.LCFI226:
 2505              	 .cfi_restore 14
 2506              	 .cfi_restore 7
 2507              	 .cfi_def_cfa_offset 16
 2508 0022 04B0     	 add sp,sp,#16
 2509              	.LCFI227:
 2510              	 .cfi_restore 3
 2511              	 .cfi_restore 2
 2512              	 .cfi_restore 1
 2513              	 .cfi_restore 0
 2514              	 .cfi_def_cfa_offset 0
 2515 0024 7047     	 bx lr
 2516              	 .cfi_endproc
 2517              	.LFE702:
 2519 0026 00BF     	 .section .rodata
 2520 0239 000000   	 .align 2
 2521              	.LC59:
 2522 023c 23232345 	 .ascii "###ERROR### \000"
 2522      52524F52 
 2522      23232320 
 2522      00
 2523              	 .section .text.cliPrintErrorLinef,"ax",%progbits
 2524              	 .align 2
 2525              	 .thumb
 2526              	 .thumb_func
 2528              	cliPrintErrorLinef:
 2529              	.LFB703:
 375:../cleanflight/src/main/interface/cli.c **** 
 376:../cleanflight/src/main/interface/cli.c **** static void cliPrintErrorLinef(const char *format, ...)
 377:../cleanflight/src/main/interface/cli.c **** {
 2530              	 .loc 13 377 0
 2531              	 .cfi_startproc
 2532              	 
 2533              	 
 2534 0000 0FB4     	 push {r0,r1,r2,r3}
 2535              	.LCFI228:
 2536              	 .cfi_def_cfa_offset 16
 2537              	 .cfi_offset 0,-16
 2538              	 .cfi_offset 1,-12
 2539              	 .cfi_offset 2,-8
 2540              	 .cfi_offset 3,-4
 2541 0002 80B5     	 push {r7,lr}
 2542              	.LCFI229:
 2543              	 .cfi_def_cfa_offset 24
 2544              	 .cfi_offset 7,-24
 2545              	 .cfi_offset 14,-20
 2546 0004 82B0     	 sub sp,sp,#8
 2547              	.LCFI230:
 2548              	 .cfi_def_cfa_offset 32
 2549 0006 00AF     	 add r7,sp,#0
 2550              	.LCFI231:
 2551              	 .cfi_def_cfa_register 7
 378:../cleanflight/src/main/interface/cli.c ****     cliPrint("###ERROR### ");
 2552              	 .loc 13 378 0
 2553 0008 0848     	 ldr r0,.L155
 2554 000a FFF7FEFF 	 bl cliPrint
 379:../cleanflight/src/main/interface/cli.c ****     va_list va;
 380:../cleanflight/src/main/interface/cli.c ****     va_start(va, format);
 2555              	 .loc 13 380 0
 2556 000e 07F11403 	 add r3,r7,#20
 2557 0012 7B60     	 str r3,[r7,#4]
 381:../cleanflight/src/main/interface/cli.c ****     cliPrintfva(format, va);
 2558              	 .loc 13 381 0
 2559 0014 3869     	 ldr r0,[r7,#16]
 2560 0016 7968     	 ldr r1,[r7,#4]
 2561 0018 FFF7FEFF 	 bl cliPrintfva
 382:../cleanflight/src/main/interface/cli.c ****     va_end(va);
 383:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 2562              	 .loc 13 383 0
 2563 001c FFF7FEFF 	 bl cliPrintLinefeed
 384:../cleanflight/src/main/interface/cli.c **** }
 2564              	 .loc 13 384 0
 2565 0020 0837     	 adds r7,r7,#8
 2566              	.LCFI232:
 2567              	 .cfi_def_cfa_offset 24
 2568 0022 BD46     	 mov sp,r7
 2569              	.LCFI233:
 2570              	 .cfi_def_cfa_register 13
 2571              	 
 2572 0024 BDE88040 	 pop {r7,lr}
 2573              	.LCFI234:
 2574              	 .cfi_restore 14
 2575              	 .cfi_restore 7
 2576              	 .cfi_def_cfa_offset 16
 2577 0028 04B0     	 add sp,sp,#16
 2578              	.LCFI235:
 2579              	 .cfi_restore 3
 2580              	 .cfi_restore 2
 2581              	 .cfi_restore 1
 2582              	 .cfi_restore 0
 2583              	 .cfi_def_cfa_offset 0
 2584 002a 7047     	 bx lr
 2585              	.L156:
 2586              	 .align 2
 2587              	.L155:
 2588 002c 3C020000 	 .word .LC59
 2589              	 .cfi_endproc
 2590              	.LFE703:
 2592              	 .section .rodata
 2593 0249 000000   	 .align 2
 2594              	.LC60:
 2595 024c 256400   	 .ascii "%d\000"
 2596 024f 00       	 .align 2
 2597              	.LC61:
 2598 0250 2C00     	 .ascii ",\000"
 2599 0252 0000     	 .align 2
 2600              	.LC62:
 2601 0254 20256420 	 .ascii " %d %d\000"
 2601      256400
 2602 025b 00       	 .align 2
 2603              	.LC63:
 2604 025c 4F4E00   	 .ascii "ON\000"
 2605 025f 00       	 .align 2
 2606              	.LC64:
 2607 0260 4F464600 	 .ascii "OFF\000"
 2608              	 .section .text.printValuePointer,"ax",%progbits
 2609              	 .align 2
 2610              	 .thumb
 2611              	 .thumb_func
 2613              	printValuePointer:
 2614              	.LFB704:
 385:../cleanflight/src/main/interface/cli.c **** 
 386:../cleanflight/src/main/interface/cli.c **** 
 387:../cleanflight/src/main/interface/cli.c **** static void printValuePointer(const clivalue_t *var, const void *valuePointer, bool full)
 388:../cleanflight/src/main/interface/cli.c **** {
 2615              	 .loc 13 388 0
 2616              	 .cfi_startproc
 2617              	 
 2618              	 
 2619 0000 80B5     	 push {r7,lr}
 2620              	.LCFI236:
 2621              	 .cfi_def_cfa_offset 8
 2622              	 .cfi_offset 7,-8
 2623              	 .cfi_offset 14,-4
 2624 0002 86B0     	 sub sp,sp,#24
 2625              	.LCFI237:
 2626              	 .cfi_def_cfa_offset 32
 2627 0004 00AF     	 add r7,sp,#0
 2628              	.LCFI238:
 2629              	 .cfi_def_cfa_register 7
 2630 0006 F860     	 str r0,[r7,#12]
 2631 0008 B960     	 str r1,[r7,#8]
 2632 000a 1346     	 mov r3,r2
 2633 000c FB71     	 strb r3,[r7,#7]
 389:../cleanflight/src/main/interface/cli.c ****     if ((var->type & VALUE_MODE_MASK) == MODE_ARRAY) {
 2634              	 .loc 13 389 0
 2635 000e FB68     	 ldr r3,[r7,#12]
 2636 0010 1B79     	 ldrb r3,[r3,#4]
 2637 0012 03F06003 	 and r3,r3,#96
 2638 0016 402B     	 cmp r3,#64
 2639 0018 47D1     	 bne .L158
 2640              	.LBB6:
 390:../cleanflight/src/main/interface/cli.c ****         for (int i = 0; i < var->config.array.length; i++) {
 2641              	 .loc 13 390 0
 2642 001a 0023     	 movs r3,#0
 2643 001c 7B61     	 str r3,[r7,#20]
 2644 001e 3DE0     	 b .L159
 2645              	.L166:
 391:../cleanflight/src/main/interface/cli.c ****             switch (var->type & VALUE_TYPE_MASK) {
 2646              	 .loc 13 391 0
 2647 0020 FB68     	 ldr r3,[r7,#12]
 2648 0022 1B79     	 ldrb r3,[r3,#4]
 2649 0024 03F00703 	 and r3,r3,#7
 2650 0028 022B     	 cmp r3,#2
 2651 002a 16D0     	 beq .L161
 2652 002c 032B     	 cmp r3,#3
 2653 002e 1ED0     	 beq .L162
 2654 0030 012B     	 cmp r3,#1
 2655 0032 08D0     	 beq .L163
 392:../cleanflight/src/main/interface/cli.c ****             default:
 393:../cleanflight/src/main/interface/cli.c ****             case VAR_UINT8:
 394:../cleanflight/src/main/interface/cli.c ****                 // uint8_t array
 395:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%d", ((uint8_t *)valuePointer)[i]);
 2656              	 .loc 13 395 0
 2657 0034 7B69     	 ldr r3,[r7,#20]
 2658 0036 BA68     	 ldr r2,[r7,#8]
 2659 0038 1344     	 add r3,r3,r2
 2660 003a 1B78     	 ldrb r3,[r3]
 2661 003c 5148     	 ldr r0,.L179
 2662 003e 1946     	 mov r1,r3
 2663 0040 FFF7FEFF 	 bl cliPrintf
 396:../cleanflight/src/main/interface/cli.c ****                 break;
 2664              	 .loc 13 396 0
 2665 0044 1EE0     	 b .L164
 2666              	.L163:
 397:../cleanflight/src/main/interface/cli.c **** 
 398:../cleanflight/src/main/interface/cli.c ****             case VAR_INT8:
 399:../cleanflight/src/main/interface/cli.c ****                 // int8_t array
 400:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%d", ((int8_t *)valuePointer)[i]);
 2667              	 .loc 13 400 0
 2668 0046 7B69     	 ldr r3,[r7,#20]
 2669 0048 BA68     	 ldr r2,[r7,#8]
 2670 004a 1344     	 add r3,r3,r2
 2671 004c 1B78     	 ldrb r3,[r3]
 2672 004e 5BB2     	 sxtb r3,r3
 2673 0050 4C48     	 ldr r0,.L179
 2674 0052 1946     	 mov r1,r3
 2675 0054 FFF7FEFF 	 bl cliPrintf
 401:../cleanflight/src/main/interface/cli.c ****                 break;
 2676              	 .loc 13 401 0
 2677 0058 14E0     	 b .L164
 2678              	.L161:
 402:../cleanflight/src/main/interface/cli.c **** 
 403:../cleanflight/src/main/interface/cli.c ****             case VAR_UINT16:
 404:../cleanflight/src/main/interface/cli.c ****                 // uin16_t array
 405:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%d", ((uint16_t *)valuePointer)[i]);
 2679              	 .loc 13 405 0
 2680 005a 7B69     	 ldr r3,[r7,#20]
 2681 005c 5B00     	 lsls r3,r3,#1
 2682 005e BA68     	 ldr r2,[r7,#8]
 2683 0060 1344     	 add r3,r3,r2
 2684 0062 1B88     	 ldrh r3,[r3]
 2685 0064 4748     	 ldr r0,.L179
 2686 0066 1946     	 mov r1,r3
 2687 0068 FFF7FEFF 	 bl cliPrintf
 406:../cleanflight/src/main/interface/cli.c ****                 break;
 2688              	 .loc 13 406 0
 2689 006c 0AE0     	 b .L164
 2690              	.L162:
 407:../cleanflight/src/main/interface/cli.c **** 
 408:../cleanflight/src/main/interface/cli.c ****             case VAR_INT16:
 409:../cleanflight/src/main/interface/cli.c ****                 // int16_t array
 410:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%d", ((int16_t *)valuePointer)[i]);
 2691              	 .loc 13 410 0
 2692 006e 7B69     	 ldr r3,[r7,#20]
 2693 0070 5B00     	 lsls r3,r3,#1
 2694 0072 BA68     	 ldr r2,[r7,#8]
 2695 0074 1344     	 add r3,r3,r2
 2696 0076 1B88     	 ldrh r3,[r3]
 2697 0078 1BB2     	 sxth r3,r3
 2698 007a 4248     	 ldr r0,.L179
 2699 007c 1946     	 mov r1,r3
 2700 007e FFF7FEFF 	 bl cliPrintf
 411:../cleanflight/src/main/interface/cli.c ****                 break;
 2701              	 .loc 13 411 0
 2702 0082 00BF     	 nop
 2703              	.L164:
 412:../cleanflight/src/main/interface/cli.c ****             }
 413:../cleanflight/src/main/interface/cli.c **** 
 414:../cleanflight/src/main/interface/cli.c ****             if (i < var->config.array.length - 1) {
 2704              	 .loc 13 414 0
 2705 0084 FB68     	 ldr r3,[r7,#12]
 2706 0086 5B79     	 ldrb r3,[r3,#5]
 2707 0088 5A1E     	 subs r2,r3,#1
 2708 008a 7B69     	 ldr r3,[r7,#20]
 2709 008c 9A42     	 cmp r2,r3
 2710 008e 02DD     	 ble .L165
 415:../cleanflight/src/main/interface/cli.c ****                 cliPrint(",");
 2711              	 .loc 13 415 0
 2712 0090 3D48     	 ldr r0,.L179+4
 2713 0092 FFF7FEFF 	 bl cliPrint
 2714              	.L165:
 390:../cleanflight/src/main/interface/cli.c ****             switch (var->type & VALUE_TYPE_MASK) {
 2715              	 .loc 13 390 0 discriminator 2
 2716 0096 7B69     	 ldr r3,[r7,#20]
 2717 0098 0133     	 adds r3,r3,#1
 2718 009a 7B61     	 str r3,[r7,#20]
 2719              	.L159:
 390:../cleanflight/src/main/interface/cli.c ****             switch (var->type & VALUE_TYPE_MASK) {
 2720              	 .loc 13 390 0 is_stmt 0 discriminator 1
 2721 009c FB68     	 ldr r3,[r7,#12]
 2722 009e 5B79     	 ldrb r3,[r3,#5]
 2723 00a0 1A46     	 mov r2,r3
 2724 00a2 7B69     	 ldr r3,[r7,#20]
 2725 00a4 9A42     	 cmp r2,r3
 2726 00a6 BBDC     	 bgt .L166
 2727              	.LBE6:
 2728 00a8 69E0     	 b .L157
 2729              	.L158:
 2730              	.LBB7:
 416:../cleanflight/src/main/interface/cli.c ****             }
 417:../cleanflight/src/main/interface/cli.c ****         }
 418:../cleanflight/src/main/interface/cli.c ****     } else {
 419:../cleanflight/src/main/interface/cli.c ****         int value = 0;
 2731              	 .loc 13 419 0 is_stmt 1
 2732 00aa 0023     	 movs r3,#0
 2733 00ac 3B61     	 str r3,[r7,#16]
 420:../cleanflight/src/main/interface/cli.c **** 
 421:../cleanflight/src/main/interface/cli.c ****         switch (var->type & VALUE_TYPE_MASK) {
 2734              	 .loc 13 421 0
 2735 00ae FB68     	 ldr r3,[r7,#12]
 2736 00b0 1B79     	 ldrb r3,[r3,#4]
 2737 00b2 03F00703 	 and r3,r3,#7
 2738 00b6 042B     	 cmp r3,#4
 2739 00b8 1ED8     	 bhi .L168
 2740 00ba 01A2     	 adr r2,.L170
 2741 00bc 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2742              	 .p2align 2
 2743              	.L170:
 2744 00c0 D5000000 	 .word .L169+1
 2745 00c4 DD000000 	 .word .L171+1
 2746 00c8 E7000000 	 .word .L172+1
 2747 00cc E7000000 	 .word .L172+1
 2748 00d0 F1000000 	 .word .L173+1
 2749              	 .p2align 1
 2750              	.L169:
 422:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT8:
 423:../cleanflight/src/main/interface/cli.c ****             value = *(uint8_t *)valuePointer;
 2751              	 .loc 13 423 0
 2752 00d4 BB68     	 ldr r3,[r7,#8]
 2753 00d6 1B78     	 ldrb r3,[r3]
 2754 00d8 3B61     	 str r3,[r7,#16]
 424:../cleanflight/src/main/interface/cli.c ****             break;
 2755              	 .loc 13 424 0
 2756 00da 0DE0     	 b .L168
 2757              	.L171:
 425:../cleanflight/src/main/interface/cli.c **** 
 426:../cleanflight/src/main/interface/cli.c ****         case VAR_INT8:
 427:../cleanflight/src/main/interface/cli.c ****             value = *(int8_t *)valuePointer;
 2758              	 .loc 13 427 0
 2759 00dc BB68     	 ldr r3,[r7,#8]
 2760 00de 1B78     	 ldrb r3,[r3]
 2761 00e0 5BB2     	 sxtb r3,r3
 2762 00e2 3B61     	 str r3,[r7,#16]
 428:../cleanflight/src/main/interface/cli.c ****             break;
 2763              	 .loc 13 428 0
 2764 00e4 08E0     	 b .L168
 2765              	.L172:
 429:../cleanflight/src/main/interface/cli.c **** 
 430:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT16:
 431:../cleanflight/src/main/interface/cli.c ****         case VAR_INT16:
 432:../cleanflight/src/main/interface/cli.c ****             value = *(int16_t *)valuePointer;
 2766              	 .loc 13 432 0
 2767 00e6 BB68     	 ldr r3,[r7,#8]
 2768 00e8 1B88     	 ldrh r3,[r3]
 2769 00ea 1BB2     	 sxth r3,r3
 2770 00ec 3B61     	 str r3,[r7,#16]
 433:../cleanflight/src/main/interface/cli.c ****             break;
 2771              	 .loc 13 433 0
 2772 00ee 03E0     	 b .L168
 2773              	.L173:
 434:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT32:
 435:../cleanflight/src/main/interface/cli.c ****             value = *(uint32_t *)valuePointer;
 2774              	 .loc 13 435 0
 2775 00f0 BB68     	 ldr r3,[r7,#8]
 2776 00f2 1B68     	 ldr r3,[r3]
 2777 00f4 3B61     	 str r3,[r7,#16]
 436:../cleanflight/src/main/interface/cli.c ****             break;
 2778              	 .loc 13 436 0
 2779 00f6 00BF     	 nop
 2780              	.L168:
 437:../cleanflight/src/main/interface/cli.c ****         }
 438:../cleanflight/src/main/interface/cli.c **** 
 439:../cleanflight/src/main/interface/cli.c ****         switch (var->type & VALUE_MODE_MASK) {
 2781              	 .loc 13 439 0
 2782 00f8 FB68     	 ldr r3,[r7,#12]
 2783 00fa 1B79     	 ldrb r3,[r3,#4]
 2784 00fc 03F06003 	 and r3,r3,#96
 2785 0100 202B     	 cmp r3,#32
 2786 0102 1BD0     	 beq .L174
 2787 0104 602B     	 cmp r3,#96
 2788 0106 2AD0     	 beq .L175
 2789 0108 002B     	 cmp r3,#0
 2790 010a 38D1     	 bne .L157
 440:../cleanflight/src/main/interface/cli.c ****         case MODE_DIRECT:
 441:../cleanflight/src/main/interface/cli.c ****             cliPrintf("%d", value);
 2791              	 .loc 13 441 0
 2792 010c 1D48     	 ldr r0,.L179
 2793 010e 3969     	 ldr r1,[r7,#16]
 2794 0110 FFF7FEFF 	 bl cliPrintf
 442:../cleanflight/src/main/interface/cli.c ****             if (full) {
 2795              	 .loc 13 442 0
 2796 0114 FB79     	 ldrb r3,[r7,#7]
 2797 0116 002B     	 cmp r3,#0
 2798 0118 0FD0     	 beq .L177
 443:../cleanflight/src/main/interface/cli.c ****                 cliPrintf(" %d %d", var->config.minmax.min, var->config.minmax.max);
 2799              	 .loc 13 443 0
 2800 011a FB68     	 ldr r3,[r7,#12]
 2801 011c B3F90530 	 ldrsh r3,[r3,#5]
 2802 0120 9BB2     	 uxth r3,r3
 2803 0122 1AB2     	 sxth r2,r3
 2804 0124 FB68     	 ldr r3,[r7,#12]
 2805 0126 B3F90730 	 ldrsh r3,[r3,#7]
 2806 012a 9BB2     	 uxth r3,r3
 2807 012c 1BB2     	 sxth r3,r3
 2808 012e 1748     	 ldr r0,.L179+8
 2809 0130 1146     	 mov r1,r2
 2810 0132 1A46     	 mov r2,r3
 2811 0134 FFF7FEFF 	 bl cliPrintf
 444:../cleanflight/src/main/interface/cli.c ****             }
 445:../cleanflight/src/main/interface/cli.c ****             break;
 2812              	 .loc 13 445 0
 2813 0138 21E0     	 b .L157
 2814              	.L177:
 2815 013a 20E0     	 b .L157
 2816              	.L174:
 446:../cleanflight/src/main/interface/cli.c ****         case MODE_LOOKUP:
 447:../cleanflight/src/main/interface/cli.c ****             cliPrint(lookupTables[var->config.lookup.tableIndex].values[value]);
 2817              	 .loc 13 447 0
 2818 013c FB68     	 ldr r3,[r7,#12]
 2819 013e 5B79     	 ldrb r3,[r3,#5]
 2820 0140 1946     	 mov r1,r3
 2821 0142 134A     	 ldr r2,.L179+12
 2822 0144 0B46     	 mov r3,r1
 2823 0146 9B00     	 lsls r3,r3,#2
 2824 0148 0B44     	 add r3,r3,r1
 2825 014a 1344     	 add r3,r3,r2
 2826 014c 1A68     	 ldr r2,[r3]
 2827 014e 3B69     	 ldr r3,[r7,#16]
 2828 0150 9B00     	 lsls r3,r3,#2
 2829 0152 1344     	 add r3,r3,r2
 2830 0154 1B68     	 ldr r3,[r3]
 2831 0156 1846     	 mov r0,r3
 2832 0158 FFF7FEFF 	 bl cliPrint
 448:../cleanflight/src/main/interface/cli.c ****             break;
 2833              	 .loc 13 448 0
 2834 015c 0FE0     	 b .L157
 2835              	.L175:
 449:../cleanflight/src/main/interface/cli.c ****         case MODE_BITSET:
 450:../cleanflight/src/main/interface/cli.c ****             if (value & 1 << var->config.bitpos) {
 2836              	 .loc 13 450 0
 2837 015e FB68     	 ldr r3,[r7,#12]
 2838 0160 5B79     	 ldrb r3,[r3,#5]
 2839 0162 1A46     	 mov r2,r3
 2840 0164 3B69     	 ldr r3,[r7,#16]
 2841 0166 1341     	 asrs r3,r3,r2
 2842 0168 03F00103 	 and r3,r3,#1
 2843 016c 002B     	 cmp r3,#0
 2844 016e 03D0     	 beq .L178
 451:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("ON");
 2845              	 .loc 13 451 0
 2846 0170 0848     	 ldr r0,.L179+16
 2847 0172 FFF7FEFF 	 bl cliPrintf
 2848 0176 02E0     	 b .L157
 2849              	.L178:
 452:../cleanflight/src/main/interface/cli.c ****             } else {
 453:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("OFF");
 2850              	 .loc 13 453 0
 2851 0178 0748     	 ldr r0,.L179+20
 2852 017a FFF7FEFF 	 bl cliPrintf
 2853              	.L157:
 2854              	.LBE7:
 454:../cleanflight/src/main/interface/cli.c ****             }
 455:../cleanflight/src/main/interface/cli.c ****         }
 456:../cleanflight/src/main/interface/cli.c ****     }
 457:../cleanflight/src/main/interface/cli.c **** }
 2855              	 .loc 13 457 0
 2856 017e 1837     	 adds r7,r7,#24
 2857              	.LCFI239:
 2858              	 .cfi_def_cfa_offset 8
 2859 0180 BD46     	 mov sp,r7
 2860              	.LCFI240:
 2861              	 .cfi_def_cfa_register 13
 2862              	 
 2863 0182 80BD     	 pop {r7,pc}
 2864              	.L180:
 2865              	 .align 2
 2866              	.L179:
 2867 0184 4C020000 	 .word .LC60
 2868 0188 50020000 	 .word .LC61
 2869 018c 54020000 	 .word .LC62
 2870 0190 00000000 	 .word lookupTables
 2871 0194 5C020000 	 .word .LC63
 2872 0198 60020000 	 .word .LC64
 2873              	 .cfi_endproc
 2874              	.LFE704:
 2876              	 .section .text.valuePtrEqualsDefault,"ax",%progbits
 2877              	 .align 2
 2878              	 .thumb
 2879              	 .thumb_func
 2881              	valuePtrEqualsDefault:
 2882              	.LFB705:
 458:../cleanflight/src/main/interface/cli.c **** 
 459:../cleanflight/src/main/interface/cli.c **** 
 460:../cleanflight/src/main/interface/cli.c **** static bool valuePtrEqualsDefault(const clivalue_t *var, const void *ptr, const void *ptrDefault)
 461:../cleanflight/src/main/interface/cli.c **** {
 2883              	 .loc 13 461 0
 2884              	 .cfi_startproc
 2885              	 
 2886              	 
 2887              	 
 2888 0000 80B4     	 push {r7}
 2889              	.LCFI241:
 2890              	 .cfi_def_cfa_offset 4
 2891              	 .cfi_offset 7,-4
 2892 0002 89B0     	 sub sp,sp,#36
 2893              	.LCFI242:
 2894              	 .cfi_def_cfa_offset 40
 2895 0004 00AF     	 add r7,sp,#0
 2896              	.LCFI243:
 2897              	 .cfi_def_cfa_register 7
 2898 0006 F860     	 str r0,[r7,#12]
 2899 0008 B960     	 str r1,[r7,#8]
 2900 000a 7A60     	 str r2,[r7,#4]
 462:../cleanflight/src/main/interface/cli.c ****     bool result = true;
 2901              	 .loc 13 462 0
 2902 000c 0123     	 movs r3,#1
 2903 000e FB77     	 strb r3,[r7,#31]
 463:../cleanflight/src/main/interface/cli.c ****     int elementCount = 1;
 2904              	 .loc 13 463 0
 2905 0010 0123     	 movs r3,#1
 2906 0012 BB61     	 str r3,[r7,#24]
 464:../cleanflight/src/main/interface/cli.c ****     uint32_t mask = 0xffffffff;
 2907              	 .loc 13 464 0
 2908 0014 4FF0FF33 	 mov r3,#-1
 2909 0018 7B61     	 str r3,[r7,#20]
 465:../cleanflight/src/main/interface/cli.c **** 
 466:../cleanflight/src/main/interface/cli.c ****     if ((var->type & VALUE_MODE_MASK) == MODE_ARRAY) {
 2910              	 .loc 13 466 0
 2911 001a FB68     	 ldr r3,[r7,#12]
 2912 001c 1B79     	 ldrb r3,[r3,#4]
 2913 001e 03F06003 	 and r3,r3,#96
 2914 0022 402B     	 cmp r3,#64
 2915 0024 02D1     	 bne .L182
 467:../cleanflight/src/main/interface/cli.c ****         elementCount = var->config.array.length;
 2916              	 .loc 13 467 0
 2917 0026 FB68     	 ldr r3,[r7,#12]
 2918 0028 5B79     	 ldrb r3,[r3,#5]
 2919 002a BB61     	 str r3,[r7,#24]
 2920              	.L182:
 468:../cleanflight/src/main/interface/cli.c ****     }
 469:../cleanflight/src/main/interface/cli.c ****     if ((var->type & VALUE_MODE_MASK) == MODE_BITSET) {
 2921              	 .loc 13 469 0
 2922 002c FB68     	 ldr r3,[r7,#12]
 2923 002e 1B79     	 ldrb r3,[r3,#4]
 2924 0030 03F06003 	 and r3,r3,#96
 2925 0034 602B     	 cmp r3,#96
 2926 0036 05D1     	 bne .L183
 470:../cleanflight/src/main/interface/cli.c ****         mask = 1 << var->config.bitpos;
 2927              	 .loc 13 470 0
 2928 0038 FB68     	 ldr r3,[r7,#12]
 2929 003a 5B79     	 ldrb r3,[r3,#5]
 2930 003c 1A46     	 mov r2,r3
 2931 003e 0123     	 movs r3,#1
 2932 0040 9340     	 lsls r3,r3,r2
 2933 0042 7B61     	 str r3,[r7,#20]
 2934              	.L183:
 2935              	.LBB8:
 471:../cleanflight/src/main/interface/cli.c ****     }
 472:../cleanflight/src/main/interface/cli.c ****     for (int i = 0; i < elementCount; i++) {
 2936              	 .loc 13 472 0
 2937 0044 0023     	 movs r3,#0
 2938 0046 3B61     	 str r3,[r7,#16]
 2939 0048 9CE0     	 b .L184
 2940              	.L202:
 473:../cleanflight/src/main/interface/cli.c ****         switch (var->type & VALUE_TYPE_MASK) {
 2941              	 .loc 13 473 0
 2942 004a FB68     	 ldr r3,[r7,#12]
 2943 004c 1B79     	 ldrb r3,[r3,#4]
 2944 004e 03F00703 	 and r3,r3,#7
 2945 0052 042B     	 cmp r3,#4
 2946 0054 00F29380 	 bhi .L185
 2947 0058 01A2     	 adr r2,.L187
 2948 005a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2949 005e 00BF     	 .p2align 2
 2950              	.L187:
 2951 0060 75000000 	 .word .L186+1
 2952 0064 AB000000 	 .word .L188+1
 2953 0068 DB000000 	 .word .L189+1
 2954 006c 15010000 	 .word .L190+1
 2955 0070 49010000 	 .word .L191+1
 2956              	 .p2align 1
 2957              	.L186:
 474:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT8:
 475:../cleanflight/src/main/interface/cli.c ****             result = result && (((uint8_t *)ptr)[i] & mask) == (((uint8_t *)ptrDefault)[i] & mask);
 2958              	 .loc 13 475 0
 2959 0074 FB7F     	 ldrb r3,[r7,#31]
 2960 0076 002B     	 cmp r3,#0
 2961 0078 10D0     	 beq .L192
 2962              	 .loc 13 475 0 is_stmt 0 discriminator 1
 2963 007a 3B69     	 ldr r3,[r7,#16]
 2964 007c BA68     	 ldr r2,[r7,#8]
 2965 007e 1344     	 add r3,r3,r2
 2966 0080 1B78     	 ldrb r3,[r3]
 2967 0082 1946     	 mov r1,r3
 2968 0084 3B69     	 ldr r3,[r7,#16]
 2969 0086 7A68     	 ldr r2,[r7,#4]
 2970 0088 1344     	 add r3,r3,r2
 2971 008a 1B78     	 ldrb r3,[r3]
 2972 008c 81EA0302 	 eor r2,r1,r3
 2973 0090 7B69     	 ldr r3,[r7,#20]
 2974 0092 1340     	 ands r3,r3,r2
 2975 0094 002B     	 cmp r3,#0
 2976 0096 01D1     	 bne .L192
 2977              	 .loc 13 475 0 discriminator 3
 2978 0098 0123     	 movs r3,#1
 2979 009a 00E0     	 b .L193
 2980              	.L192:
 2981              	 .loc 13 475 0 discriminator 4
 2982 009c 0023     	 movs r3,#0
 2983              	.L193:
 2984              	 .loc 13 475 0 discriminator 6
 2985 009e FB77     	 strb r3,[r7,#31]
 2986 00a0 FB7F     	 ldrb r3,[r7,#31]
 2987 00a2 03F00103 	 and r3,r3,#1
 2988 00a6 FB77     	 strb r3,[r7,#31]
 476:../cleanflight/src/main/interface/cli.c ****             break;
 2989              	 .loc 13 476 0 is_stmt 1 discriminator 6
 2990 00a8 69E0     	 b .L185
 2991              	.L188:
 477:../cleanflight/src/main/interface/cli.c **** 
 478:../cleanflight/src/main/interface/cli.c ****         case VAR_INT8:
 479:../cleanflight/src/main/interface/cli.c ****             result = result && ((int8_t *)ptr)[i] == ((int8_t *)ptrDefault)[i];
 2992              	 .loc 13 479 0
 2993 00aa FB7F     	 ldrb r3,[r7,#31]
 2994 00ac 002B     	 cmp r3,#0
 2995 00ae 0DD0     	 beq .L194
 2996              	 .loc 13 479 0 is_stmt 0 discriminator 1
 2997 00b0 3B69     	 ldr r3,[r7,#16]
 2998 00b2 BA68     	 ldr r2,[r7,#8]
 2999 00b4 1344     	 add r3,r3,r2
 3000 00b6 1978     	 ldrb r1,[r3]
 3001 00b8 3B69     	 ldr r3,[r7,#16]
 3002 00ba 7A68     	 ldr r2,[r7,#4]
 3003 00bc 1344     	 add r3,r3,r2
 3004 00be 1B78     	 ldrb r3,[r3]
 3005 00c0 4AB2     	 sxtb r2,r1
 3006 00c2 5BB2     	 sxtb r3,r3
 3007 00c4 9A42     	 cmp r2,r3
 3008 00c6 01D1     	 bne .L194
 3009              	 .loc 13 479 0 discriminator 3
 3010 00c8 0123     	 movs r3,#1
 3011 00ca 00E0     	 b .L195
 3012              	.L194:
 3013              	 .loc 13 479 0 discriminator 4
 3014 00cc 0023     	 movs r3,#0
 3015              	.L195:
 3016              	 .loc 13 479 0 discriminator 6
 3017 00ce FB77     	 strb r3,[r7,#31]
 3018 00d0 FB7F     	 ldrb r3,[r7,#31]
 3019 00d2 03F00103 	 and r3,r3,#1
 3020 00d6 FB77     	 strb r3,[r7,#31]
 480:../cleanflight/src/main/interface/cli.c ****             break;
 3021              	 .loc 13 480 0 is_stmt 1 discriminator 6
 3022 00d8 51E0     	 b .L185
 3023              	.L189:
 481:../cleanflight/src/main/interface/cli.c **** 
 482:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT16:
 483:../cleanflight/src/main/interface/cli.c ****             result = result && (((int16_t *)ptr)[i] & mask) == (((int16_t *)ptrDefault)[i] & mask);
 3024              	 .loc 13 483 0
 3025 00da FB7F     	 ldrb r3,[r7,#31]
 3026 00dc 002B     	 cmp r3,#0
 3027 00de 12D0     	 beq .L196
 3028              	 .loc 13 483 0 is_stmt 0 discriminator 1
 3029 00e0 3B69     	 ldr r3,[r7,#16]
 3030 00e2 5B00     	 lsls r3,r3,#1
 3031 00e4 BA68     	 ldr r2,[r7,#8]
 3032 00e6 1344     	 add r3,r3,r2
 3033 00e8 1B88     	 ldrh r3,[r3]
 3034 00ea 1AB2     	 sxth r2,r3
 3035 00ec 3B69     	 ldr r3,[r7,#16]
 3036 00ee 5B00     	 lsls r3,r3,#1
 3037 00f0 7968     	 ldr r1,[r7,#4]
 3038 00f2 0B44     	 add r3,r3,r1
 3039 00f4 1B88     	 ldrh r3,[r3]
 3040 00f6 1BB2     	 sxth r3,r3
 3041 00f8 5A40     	 eors r2,r2,r3
 3042 00fa 7B69     	 ldr r3,[r7,#20]
 3043 00fc 1340     	 ands r3,r3,r2
 3044 00fe 002B     	 cmp r3,#0
 3045 0100 01D1     	 bne .L196
 3046              	 .loc 13 483 0 discriminator 3
 3047 0102 0123     	 movs r3,#1
 3048 0104 00E0     	 b .L197
 3049              	.L196:
 3050              	 .loc 13 483 0 discriminator 4
 3051 0106 0023     	 movs r3,#0
 3052              	.L197:
 3053              	 .loc 13 483 0 discriminator 6
 3054 0108 FB77     	 strb r3,[r7,#31]
 3055 010a FB7F     	 ldrb r3,[r7,#31]
 3056 010c 03F00103 	 and r3,r3,#1
 3057 0110 FB77     	 strb r3,[r7,#31]
 484:../cleanflight/src/main/interface/cli.c ****             break;
 3058              	 .loc 13 484 0 is_stmt 1 discriminator 6
 3059 0112 34E0     	 b .L185
 3060              	.L190:
 485:../cleanflight/src/main/interface/cli.c ****         case VAR_INT16:
 486:../cleanflight/src/main/interface/cli.c ****             result = result && ((int16_t *)ptr)[i] == ((int16_t *)ptrDefault)[i];
 3061              	 .loc 13 486 0
 3062 0114 FB7F     	 ldrb r3,[r7,#31]
 3063 0116 002B     	 cmp r3,#0
 3064 0118 0FD0     	 beq .L198
 3065              	 .loc 13 486 0 is_stmt 0 discriminator 1
 3066 011a 3B69     	 ldr r3,[r7,#16]
 3067 011c 5B00     	 lsls r3,r3,#1
 3068 011e BA68     	 ldr r2,[r7,#8]
 3069 0120 1344     	 add r3,r3,r2
 3070 0122 1988     	 ldrh r1,[r3]
 3071 0124 3B69     	 ldr r3,[r7,#16]
 3072 0126 5B00     	 lsls r3,r3,#1
 3073 0128 7A68     	 ldr r2,[r7,#4]
 3074 012a 1344     	 add r3,r3,r2
 3075 012c 1B88     	 ldrh r3,[r3]
 3076 012e 0AB2     	 sxth r2,r1
 3077 0130 1BB2     	 sxth r3,r3
 3078 0132 9A42     	 cmp r2,r3
 3079 0134 01D1     	 bne .L198
 3080              	 .loc 13 486 0 discriminator 3
 3081 0136 0123     	 movs r3,#1
 3082 0138 00E0     	 b .L199
 3083              	.L198:
 3084              	 .loc 13 486 0 discriminator 4
 3085 013a 0023     	 movs r3,#0
 3086              	.L199:
 3087              	 .loc 13 486 0 discriminator 6
 3088 013c FB77     	 strb r3,[r7,#31]
 3089 013e FB7F     	 ldrb r3,[r7,#31]
 3090 0140 03F00103 	 and r3,r3,#1
 3091 0144 FB77     	 strb r3,[r7,#31]
 487:../cleanflight/src/main/interface/cli.c ****             break;
 3092              	 .loc 13 487 0 is_stmt 1 discriminator 6
 3093 0146 1AE0     	 b .L185
 3094              	.L191:
 488:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT32:
 489:../cleanflight/src/main/interface/cli.c ****             result = result && (((uint32_t *)ptr)[i] & mask) == (((uint32_t *)ptrDefault)[i] & mask
 3095              	 .loc 13 489 0
 3096 0148 FB7F     	 ldrb r3,[r7,#31]
 3097 014a 002B     	 cmp r3,#0
 3098 014c 10D0     	 beq .L200
 3099              	 .loc 13 489 0 is_stmt 0 discriminator 1
 3100 014e 3B69     	 ldr r3,[r7,#16]
 3101 0150 9B00     	 lsls r3,r3,#2
 3102 0152 BA68     	 ldr r2,[r7,#8]
 3103 0154 1344     	 add r3,r3,r2
 3104 0156 1A68     	 ldr r2,[r3]
 3105 0158 3B69     	 ldr r3,[r7,#16]
 3106 015a 9B00     	 lsls r3,r3,#2
 3107 015c 7968     	 ldr r1,[r7,#4]
 3108 015e 0B44     	 add r3,r3,r1
 3109 0160 1B68     	 ldr r3,[r3]
 3110 0162 5A40     	 eors r2,r2,r3
 3111 0164 7B69     	 ldr r3,[r7,#20]
 3112 0166 1340     	 ands r3,r3,r2
 3113 0168 002B     	 cmp r3,#0
 3114 016a 01D1     	 bne .L200
 3115              	 .loc 13 489 0 discriminator 3
 3116 016c 0123     	 movs r3,#1
 3117 016e 00E0     	 b .L201
 3118              	.L200:
 3119              	 .loc 13 489 0 discriminator 4
 3120 0170 0023     	 movs r3,#0
 3121              	.L201:
 3122              	 .loc 13 489 0 discriminator 6
 3123 0172 FB77     	 strb r3,[r7,#31]
 3124 0174 FB7F     	 ldrb r3,[r7,#31]
 3125 0176 03F00103 	 and r3,r3,#1
 3126 017a FB77     	 strb r3,[r7,#31]
 490:../cleanflight/src/main/interface/cli.c ****             break;
 3127              	 .loc 13 490 0 is_stmt 1 discriminator 6
 3128 017c 00BF     	 nop
 3129              	.L185:
 472:../cleanflight/src/main/interface/cli.c ****         switch (var->type & VALUE_TYPE_MASK) {
 3130              	 .loc 13 472 0 discriminator 2
 3131 017e 3B69     	 ldr r3,[r7,#16]
 3132 0180 0133     	 adds r3,r3,#1
 3133 0182 3B61     	 str r3,[r7,#16]
 3134              	.L184:
 472:../cleanflight/src/main/interface/cli.c ****         switch (var->type & VALUE_TYPE_MASK) {
 3135              	 .loc 13 472 0 is_stmt 0 discriminator 1
 3136 0184 3A69     	 ldr r2,[r7,#16]
 3137 0186 BB69     	 ldr r3,[r7,#24]
 3138 0188 9A42     	 cmp r2,r3
 3139 018a FFF65EAF 	 blt .L202
 3140              	.LBE8:
 491:../cleanflight/src/main/interface/cli.c ****         }
 492:../cleanflight/src/main/interface/cli.c ****     }
 493:../cleanflight/src/main/interface/cli.c **** 
 494:../cleanflight/src/main/interface/cli.c ****     return result;
 3141              	 .loc 13 494 0 is_stmt 1
 3142 018e FB7F     	 ldrb r3,[r7,#31]
 495:../cleanflight/src/main/interface/cli.c **** }
 3143              	 .loc 13 495 0
 3144 0190 1846     	 mov r0,r3
 3145 0192 2437     	 adds r7,r7,#36
 3146              	.LCFI244:
 3147              	 .cfi_def_cfa_offset 4
 3148 0194 BD46     	 mov sp,r7
 3149              	.LCFI245:
 3150              	 .cfi_def_cfa_register 13
 3151              	 
 3152 0196 5DF8047B 	 ldr r7,[sp],#4
 3153              	.LCFI246:
 3154              	 .cfi_restore 7
 3155              	 .cfi_def_cfa_offset 0
 3156 019a 7047     	 bx lr
 3157              	 .cfi_endproc
 3158              	.LFE705:
 3160              	 .section .text.getPidProfileIndexToUse,"ax",%progbits
 3161              	 .align 2
 3162              	 .thumb
 3163              	 .thumb_func
 3165              	getPidProfileIndexToUse:
 3166              	.LFB706:
 496:../cleanflight/src/main/interface/cli.c **** 
 497:../cleanflight/src/main/interface/cli.c **** static uint8_t getPidProfileIndexToUse()
 498:../cleanflight/src/main/interface/cli.c **** {
 3167              	 .loc 13 498 0
 3168              	 .cfi_startproc
 3169              	 
 3170              	 
 3171 0000 80B5     	 push {r7,lr}
 3172              	.LCFI247:
 3173              	 .cfi_def_cfa_offset 8
 3174              	 .cfi_offset 7,-8
 3175              	 .cfi_offset 14,-4
 3176 0002 00AF     	 add r7,sp,#0
 3177              	.LCFI248:
 3178              	 .cfi_def_cfa_register 7
 499:../cleanflight/src/main/interface/cli.c ****     return pidProfileIndexToUse == CURRENT_PROFILE_INDEX ? getCurrentPidProfileIndex() : pidProfile
 3179              	 .loc 13 499 0
 3180 0004 074B     	 ldr r3,.L208
 3181 0006 1B78     	 ldrb r3,[r3]
 3182 0008 5BB2     	 sxtb r3,r3
 3183 000a B3F1FF3F 	 cmp r3,#-1
 3184 000e 03D1     	 bne .L205
 3185              	 .loc 13 499 0 is_stmt 0 discriminator 1
 3186 0010 FFF7FEFF 	 bl getCurrentPidProfileIndex
 3187 0014 0346     	 mov r3,r0
 3188 0016 02E0     	 b .L206
 3189              	.L205:
 3190              	 .loc 13 499 0 discriminator 2
 3191 0018 024B     	 ldr r3,.L208
 3192 001a 1B78     	 ldrb r3,[r3]
 3193 001c DBB2     	 uxtb r3,r3
 3194              	.L206:
 500:../cleanflight/src/main/interface/cli.c **** }
 3195              	 .loc 13 500 0 is_stmt 1 discriminator 4
 3196 001e 1846     	 mov r0,r3
 3197 0020 80BD     	 pop {r7,pc}
 3198              	.L209:
 3199 0022 00BF     	 .align 2
 3200              	.L208:
 3201 0024 00000000 	 .word pidProfileIndexToUse
 3202              	 .cfi_endproc
 3203              	.LFE706:
 3205              	 .section .text.getRateProfileIndexToUse,"ax",%progbits
 3206              	 .align 2
 3207              	 .thumb
 3208              	 .thumb_func
 3210              	getRateProfileIndexToUse:
 3211              	.LFB707:
 501:../cleanflight/src/main/interface/cli.c **** 
 502:../cleanflight/src/main/interface/cli.c **** static uint8_t getRateProfileIndexToUse()
 503:../cleanflight/src/main/interface/cli.c **** {
 3212              	 .loc 13 503 0
 3213              	 .cfi_startproc
 3214              	 
 3215              	 
 3216 0000 80B5     	 push {r7,lr}
 3217              	.LCFI249:
 3218              	 .cfi_def_cfa_offset 8
 3219              	 .cfi_offset 7,-8
 3220              	 .cfi_offset 14,-4
 3221 0002 00AF     	 add r7,sp,#0
 3222              	.LCFI250:
 3223              	 .cfi_def_cfa_register 7
 504:../cleanflight/src/main/interface/cli.c ****     return rateProfileIndexToUse == CURRENT_PROFILE_INDEX ? getCurrentControlRateProfileIndex() : r
 3224              	 .loc 13 504 0
 3225 0004 074B     	 ldr r3,.L214
 3226 0006 1B78     	 ldrb r3,[r3]
 3227 0008 5BB2     	 sxtb r3,r3
 3228 000a B3F1FF3F 	 cmp r3,#-1
 3229 000e 03D1     	 bne .L211
 3230              	 .loc 13 504 0 is_stmt 0 discriminator 1
 3231 0010 FFF7FEFF 	 bl getCurrentControlRateProfileIndex
 3232 0014 0346     	 mov r3,r0
 3233 0016 02E0     	 b .L212
 3234              	.L211:
 3235              	 .loc 13 504 0 discriminator 2
 3236 0018 024B     	 ldr r3,.L214
 3237 001a 1B78     	 ldrb r3,[r3]
 3238 001c DBB2     	 uxtb r3,r3
 3239              	.L212:
 505:../cleanflight/src/main/interface/cli.c **** }
 3240              	 .loc 13 505 0 is_stmt 1 discriminator 4
 3241 001e 1846     	 mov r0,r3
 3242 0020 80BD     	 pop {r7,pc}
 3243              	.L215:
 3244 0022 00BF     	 .align 2
 3245              	.L214:
 3246 0024 00000000 	 .word rateProfileIndexToUse
 3247              	 .cfi_endproc
 3248              	.LFE707:
 3250              	 .section .text.getValueOffset,"ax",%progbits
 3251              	 .align 2
 3252              	 .thumb
 3253              	 .thumb_func
 3255              	getValueOffset:
 3256              	.LFB708:
 506:../cleanflight/src/main/interface/cli.c **** 
 507:../cleanflight/src/main/interface/cli.c **** 
 508:../cleanflight/src/main/interface/cli.c **** static uint16_t getValueOffset(const clivalue_t *value)
 509:../cleanflight/src/main/interface/cli.c **** {
 3257              	 .loc 13 509 0
 3258              	 .cfi_startproc
 3259              	 
 3260              	 
 3261 0000 90B5     	 push {r4,r7,lr}
 3262              	.LCFI251:
 3263              	 .cfi_def_cfa_offset 12
 3264              	 .cfi_offset 4,-12
 3265              	 .cfi_offset 7,-8
 3266              	 .cfi_offset 14,-4
 3267 0002 83B0     	 sub sp,sp,#12
 3268              	.LCFI252:
 3269              	 .cfi_def_cfa_offset 24
 3270 0004 00AF     	 add r7,sp,#0
 3271              	.LCFI253:
 3272              	 .cfi_def_cfa_register 7
 3273 0006 7860     	 str r0,[r7,#4]
 510:../cleanflight/src/main/interface/cli.c ****     switch (value->type & VALUE_SECTION_MASK) {
 3274              	 .loc 13 510 0
 3275 0008 7B68     	 ldr r3,[r7,#4]
 3276 000a 1B79     	 ldrb r3,[r3,#4]
 3277 000c 03F01803 	 and r3,r3,#24
 3278 0010 082B     	 cmp r3,#8
 3279 0012 08D0     	 beq .L218
 3280 0014 102B     	 cmp r3,#16
 3281 0016 18D0     	 beq .L219
 3282 0018 002B     	 cmp r3,#0
 3283 001a 25D1     	 bne .L222
 511:../cleanflight/src/main/interface/cli.c ****     case MASTER_VALUE:
 512:../cleanflight/src/main/interface/cli.c ****         return value->offset;
 3284              	 .loc 13 512 0
 3285 001c 7B68     	 ldr r3,[r7,#4]
 3286 001e B3F80B30 	 ldrh r3,[r3,#11]
 3287 0022 9BB2     	 uxth r3,r3
 3288 0024 21E0     	 b .L221
 3289              	.L218:
 513:../cleanflight/src/main/interface/cli.c ****     case PROFILE_VALUE:
 514:../cleanflight/src/main/interface/cli.c ****         return value->offset + sizeof(pidProfile_t) * getPidProfileIndexToUse();
 3290              	 .loc 13 514 0
 3291 0026 7B68     	 ldr r3,[r7,#4]
 3292 0028 B3F80B30 	 ldrh r3,[r3,#11]
 3293 002c 9CB2     	 uxth r4,r3
 3294 002e FFF7FEFF 	 bl getPidProfileIndexToUse
 3295 0032 0346     	 mov r3,r0
 3296 0034 9BB2     	 uxth r3,r3
 3297 0036 1A46     	 mov r2,r3
 3298 0038 9200     	 lsls r2,r2,#2
 3299 003a 1A44     	 add r2,r2,r3
 3300 003c 5200     	 lsls r2,r2,#1
 3301 003e 1344     	 add r3,r3,r2
 3302 0040 DB00     	 lsls r3,r3,#3
 3303 0042 9BB2     	 uxth r3,r3
 3304 0044 2344     	 add r3,r3,r4
 3305 0046 9BB2     	 uxth r3,r3
 3306 0048 0FE0     	 b .L221
 3307              	.L219:
 515:../cleanflight/src/main/interface/cli.c ****     case PROFILE_RATE_VALUE:
 516:../cleanflight/src/main/interface/cli.c ****         return value->offset + sizeof(controlRateConfig_t) * getRateProfileIndexToUse();
 3308              	 .loc 13 516 0
 3309 004a 7B68     	 ldr r3,[r7,#4]
 3310 004c B3F80B30 	 ldrh r3,[r3,#11]
 3311 0050 9CB2     	 uxth r4,r3
 3312 0052 FFF7FEFF 	 bl getRateProfileIndexToUse
 3313 0056 0346     	 mov r3,r0
 3314 0058 9BB2     	 uxth r3,r3
 3315 005a 1A46     	 mov r2,r3
 3316 005c 1201     	 lsls r2,r2,#4
 3317 005e 1344     	 add r3,r3,r2
 3318 0060 9BB2     	 uxth r3,r3
 3319 0062 2344     	 add r3,r3,r4
 3320 0064 9BB2     	 uxth r3,r3
 3321 0066 00E0     	 b .L221
 3322              	.L222:
 517:../cleanflight/src/main/interface/cli.c ****     }
 518:../cleanflight/src/main/interface/cli.c ****     return 0;
 3323              	 .loc 13 518 0
 3324 0068 0023     	 movs r3,#0
 3325              	.L221:
 519:../cleanflight/src/main/interface/cli.c **** }
 3326              	 .loc 13 519 0
 3327 006a 1846     	 mov r0,r3
 3328 006c 0C37     	 adds r7,r7,#12
 3329              	.LCFI254:
 3330              	 .cfi_def_cfa_offset 12
 3331 006e BD46     	 mov sp,r7
 3332              	.LCFI255:
 3333              	 .cfi_def_cfa_register 13
 3334              	 
 3335 0070 90BD     	 pop {r4,r7,pc}
 3336              	 .cfi_endproc
 3337              	.LFE708:
 3339 0072 00BF     	 .section .text.cliGetValuePointer,"ax",%progbits
 3340              	 .align 2
 3341              	 .global cliGetValuePointer
 3342              	 .thumb
 3343              	 .thumb_func
 3345              	cliGetValuePointer:
 3346              	.LFB709:
 520:../cleanflight/src/main/interface/cli.c **** 
 521:../cleanflight/src/main/interface/cli.c **** void *cliGetValuePointer(const clivalue_t *value)
 522:../cleanflight/src/main/interface/cli.c **** {
 3347              	 .loc 13 522 0
 3348              	 .cfi_startproc
 3349              	 
 3350              	 
 3351 0000 90B5     	 push {r4,r7,lr}
 3352              	.LCFI256:
 3353              	 .cfi_def_cfa_offset 12
 3354              	 .cfi_offset 4,-12
 3355              	 .cfi_offset 7,-8
 3356              	 .cfi_offset 14,-4
 3357 0002 85B0     	 sub sp,sp,#20
 3358              	.LCFI257:
 3359              	 .cfi_def_cfa_offset 32
 3360 0004 00AF     	 add r7,sp,#0
 3361              	.LCFI258:
 3362              	 .cfi_def_cfa_register 7
 3363 0006 7860     	 str r0,[r7,#4]
 523:../cleanflight/src/main/interface/cli.c ****     const pgRegistry_t* rec = pgFind(value->pgn);
 3364              	 .loc 13 523 0
 3365 0008 7B68     	 ldr r3,[r7,#4]
 3366 000a B3F80930 	 ldrh r3,[r3,#9]
 3367 000e 9BB2     	 uxth r3,r3
 3368 0010 1846     	 mov r0,r3
 3369 0012 FFF7FEFF 	 bl pgFind
 3370 0016 F860     	 str r0,[r7,#12]
 524:../cleanflight/src/main/interface/cli.c ****     if (configIsInCopy) {
 3371              	 .loc 13 524 0
 3372 0018 0B4B     	 ldr r3,.L226
 3373 001a 1B78     	 ldrb r3,[r3]
 3374 001c 002B     	 cmp r3,#0
 3375 001e 07D0     	 beq .L224
 525:../cleanflight/src/main/interface/cli.c ****         return CONST_CAST(void *, rec->copy + getValueOffset(value));
 3376              	 .loc 13 525 0
 3377 0020 FB68     	 ldr r3,[r7,#12]
 3378 0022 9C68     	 ldr r4,[r3,#8]
 3379 0024 7868     	 ldr r0,[r7,#4]
 3380 0026 FFF7FEFF 	 bl getValueOffset
 3381 002a 0346     	 mov r3,r0
 3382 002c 2344     	 add r3,r3,r4
 3383 002e 06E0     	 b .L225
 3384              	.L224:
 526:../cleanflight/src/main/interface/cli.c ****     } else {
 527:../cleanflight/src/main/interface/cli.c ****         return CONST_CAST(void *, rec->address + getValueOffset(value));
 3385              	 .loc 13 527 0
 3386 0030 FB68     	 ldr r3,[r7,#12]
 3387 0032 5C68     	 ldr r4,[r3,#4]
 3388 0034 7868     	 ldr r0,[r7,#4]
 3389 0036 FFF7FEFF 	 bl getValueOffset
 3390 003a 0346     	 mov r3,r0
 3391 003c 2344     	 add r3,r3,r4
 3392              	.L225:
 528:../cleanflight/src/main/interface/cli.c ****     }
 529:../cleanflight/src/main/interface/cli.c **** }
 3393              	 .loc 13 529 0
 3394 003e 1846     	 mov r0,r3
 3395 0040 1437     	 adds r7,r7,#20
 3396              	.LCFI259:
 3397              	 .cfi_def_cfa_offset 12
 3398 0042 BD46     	 mov sp,r7
 3399              	.LCFI260:
 3400              	 .cfi_def_cfa_register 13
 3401              	 
 3402 0044 90BD     	 pop {r4,r7,pc}
 3403              	.L227:
 3404 0046 00BF     	 .align 2
 3405              	.L226:
 3406 0048 00000000 	 .word configIsInCopy
 3407              	 .cfi_endproc
 3408              	.LFE709:
 3410              	 .section .text.cliGetDefaultPointer,"ax",%progbits
 3411              	 .align 2
 3412              	 .global cliGetDefaultPointer
 3413              	 .thumb
 3414              	 .thumb_func
 3416              	cliGetDefaultPointer:
 3417              	.LFB710:
 530:../cleanflight/src/main/interface/cli.c **** 
 531:../cleanflight/src/main/interface/cli.c **** const void *cliGetDefaultPointer(const clivalue_t *value)
 532:../cleanflight/src/main/interface/cli.c **** {
 3418              	 .loc 13 532 0
 3419              	 .cfi_startproc
 3420              	 
 3421              	 
 3422 0000 90B5     	 push {r4,r7,lr}
 3423              	.LCFI261:
 3424              	 .cfi_def_cfa_offset 12
 3425              	 .cfi_offset 4,-12
 3426              	 .cfi_offset 7,-8
 3427              	 .cfi_offset 14,-4
 3428 0002 85B0     	 sub sp,sp,#20
 3429              	.LCFI262:
 3430              	 .cfi_def_cfa_offset 32
 3431 0004 00AF     	 add r7,sp,#0
 3432              	.LCFI263:
 3433              	 .cfi_def_cfa_register 7
 3434 0006 7860     	 str r0,[r7,#4]
 533:../cleanflight/src/main/interface/cli.c ****     const pgRegistry_t* rec = pgFind(value->pgn);
 3435              	 .loc 13 533 0
 3436 0008 7B68     	 ldr r3,[r7,#4]
 3437 000a B3F80930 	 ldrh r3,[r3,#9]
 3438 000e 9BB2     	 uxth r3,r3
 3439 0010 1846     	 mov r0,r3
 3440 0012 FFF7FEFF 	 bl pgFind
 3441 0016 F860     	 str r0,[r7,#12]
 534:../cleanflight/src/main/interface/cli.c ****     return rec->address + getValueOffset(value);
 3442              	 .loc 13 534 0
 3443 0018 FB68     	 ldr r3,[r7,#12]
 3444 001a 5C68     	 ldr r4,[r3,#4]
 3445 001c 7868     	 ldr r0,[r7,#4]
 3446 001e FFF7FEFF 	 bl getValueOffset
 3447 0022 0346     	 mov r3,r0
 3448 0024 2344     	 add r3,r3,r4
 535:../cleanflight/src/main/interface/cli.c **** }
 3449              	 .loc 13 535 0
 3450 0026 1846     	 mov r0,r3
 3451 0028 1437     	 adds r7,r7,#20
 3452              	.LCFI264:
 3453              	 .cfi_def_cfa_offset 12
 3454 002a BD46     	 mov sp,r7
 3455              	.LCFI265:
 3456              	 .cfi_def_cfa_register 13
 3457              	 
 3458 002c 90BD     	 pop {r4,r7,pc}
 3459              	 .cfi_endproc
 3460              	.LFE710:
 3462 002e 00BF     	 .section .rodata
 3463              	 .align 2
 3464              	.LC65:
 3465 0264 73657420 	 .ascii "set %s = \000"
 3465      2573203D 
 3465      2000
 3466 026e 0000     	 .align 2
 3467              	.LC66:
 3468 0270 23736574 	 .ascii "#set %s = \000"
 3468      20257320 
 3468      3D2000
 3469              	 .section .text.dumpPgValue,"ax",%progbits
 3470              	 .align 2
 3471              	 .thumb
 3472              	 .thumb_func
 3474              	dumpPgValue:
 3475              	.LFB711:
 536:../cleanflight/src/main/interface/cli.c **** 
 537:../cleanflight/src/main/interface/cli.c **** static void dumpPgValue(const clivalue_t *value, uint8_t dumpMask)
 538:../cleanflight/src/main/interface/cli.c **** {
 3476              	 .loc 13 538 0
 3477              	 .cfi_startproc
 3478              	 
 3479              	 
 3480 0000 80B5     	 push {r7,lr}
 3481              	.LCFI266:
 3482              	 .cfi_def_cfa_offset 8
 3483              	 .cfi_offset 7,-8
 3484              	 .cfi_offset 14,-4
 3485 0002 88B0     	 sub sp,sp,#32
 3486              	.LCFI267:
 3487              	 .cfi_def_cfa_offset 40
 3488 0004 00AF     	 add r7,sp,#0
 3489              	.LCFI268:
 3490              	 .cfi_def_cfa_register 7
 3491 0006 7860     	 str r0,[r7,#4]
 3492 0008 0B46     	 mov r3,r1
 3493 000a FB70     	 strb r3,[r7,#3]
 539:../cleanflight/src/main/interface/cli.c ****     const pgRegistry_t *pg = pgFind(value->pgn);
 3494              	 .loc 13 539 0
 3495 000c 7B68     	 ldr r3,[r7,#4]
 3496 000e B3F80930 	 ldrh r3,[r3,#9]
 3497 0012 9BB2     	 uxth r3,r3
 3498 0014 1846     	 mov r0,r3
 3499 0016 FFF7FEFF 	 bl pgFind
 3500 001a F861     	 str r0,[r7,#28]
 540:../cleanflight/src/main/interface/cli.c **** #ifdef DEBUG
 541:../cleanflight/src/main/interface/cli.c ****     if (!pg) {
 542:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("VALUE %s ERROR", value->name);
 543:../cleanflight/src/main/interface/cli.c ****         return; // if it's not found, the pgn shouldn't be in the value table!
 544:../cleanflight/src/main/interface/cli.c ****     }
 545:../cleanflight/src/main/interface/cli.c **** #endif
 546:../cleanflight/src/main/interface/cli.c **** 
 547:../cleanflight/src/main/interface/cli.c ****     const char *format = "set %s = ";
 3501              	 .loc 13 547 0
 3502 001c 284B     	 ldr r3,.L234
 3503 001e BB61     	 str r3,[r7,#24]
 548:../cleanflight/src/main/interface/cli.c ****     const char *defaultFormat = "#set %s = ";
 3504              	 .loc 13 548 0
 3505 0020 284B     	 ldr r3,.L234+4
 3506 0022 7B61     	 str r3,[r7,#20]
 549:../cleanflight/src/main/interface/cli.c ****     const int valueOffset = getValueOffset(value);
 3507              	 .loc 13 549 0
 3508 0024 7868     	 ldr r0,[r7,#4]
 3509 0026 FFF7FEFF 	 bl getValueOffset
 3510 002a 0346     	 mov r3,r0
 3511 002c 3B61     	 str r3,[r7,#16]
 550:../cleanflight/src/main/interface/cli.c ****     const bool equalsDefault = valuePtrEqualsDefault(value, pg->copy + valueOffset, pg->address + v
 3512              	 .loc 13 550 0
 3513 002e FB69     	 ldr r3,[r7,#28]
 3514 0030 9A68     	 ldr r2,[r3,#8]
 3515 0032 3B69     	 ldr r3,[r7,#16]
 3516 0034 D118     	 adds r1,r2,r3
 3517 0036 FB69     	 ldr r3,[r7,#28]
 3518 0038 5A68     	 ldr r2,[r3,#4]
 3519 003a 3B69     	 ldr r3,[r7,#16]
 3520 003c 1344     	 add r3,r3,r2
 3521 003e 7868     	 ldr r0,[r7,#4]
 3522 0040 1A46     	 mov r2,r3
 3523 0042 FFF7FEFF 	 bl valuePtrEqualsDefault
 3524 0046 0346     	 mov r3,r0
 3525 0048 FB73     	 strb r3,[r7,#15]
 551:../cleanflight/src/main/interface/cli.c **** 
 552:../cleanflight/src/main/interface/cli.c ****     if (((dumpMask & DO_DIFF) == 0) || !equalsDefault) {
 3526              	 .loc 13 552 0
 3527 004a FB78     	 ldrb r3,[r7,#3]
 3528 004c 03F01003 	 and r3,r3,#16
 3529 0050 002B     	 cmp r3,#0
 3530 0052 05D0     	 beq .L231
 3531              	 .loc 13 552 0 is_stmt 0 discriminator 1
 3532 0054 FB7B     	 ldrb r3,[r7,#15]
 3533 0056 83F00103 	 eor r3,r3,#1
 3534 005a DBB2     	 uxtb r3,r3
 3535 005c 002B     	 cmp r3,#0
 3536 005e 2CD0     	 beq .L230
 3537              	.L231:
 553:../cleanflight/src/main/interface/cli.c ****         if (dumpMask & SHOW_DEFAULTS && !equalsDefault) {
 3538              	 .loc 13 553 0 is_stmt 1
 3539 0060 FB78     	 ldrb r3,[r7,#3]
 3540 0062 03F02003 	 and r3,r3,#32
 3541 0066 002B     	 cmp r3,#0
 3542 0068 16D0     	 beq .L233
 3543              	 .loc 13 553 0 is_stmt 0 discriminator 1
 3544 006a FB7B     	 ldrb r3,[r7,#15]
 3545 006c 83F00103 	 eor r3,r3,#1
 3546 0070 DBB2     	 uxtb r3,r3
 3547 0072 002B     	 cmp r3,#0
 3548 0074 10D0     	 beq .L233
 554:../cleanflight/src/main/interface/cli.c ****             cliPrintf(defaultFormat, value->name);
 3549              	 .loc 13 554 0 is_stmt 1
 3550 0076 7B68     	 ldr r3,[r7,#4]
 3551 0078 1B68     	 ldr r3,[r3]
 3552 007a 7869     	 ldr r0,[r7,#20]
 3553 007c 1946     	 mov r1,r3
 3554 007e FFF7FEFF 	 bl cliPrintf
 555:../cleanflight/src/main/interface/cli.c ****             printValuePointer(value, (uint8_t*)pg->address + valueOffset, false);
 3555              	 .loc 13 555 0
 3556 0082 FB69     	 ldr r3,[r7,#28]
 3557 0084 5A68     	 ldr r2,[r3,#4]
 3558 0086 3B69     	 ldr r3,[r7,#16]
 3559 0088 1344     	 add r3,r3,r2
 3560 008a 7868     	 ldr r0,[r7,#4]
 3561 008c 1946     	 mov r1,r3
 3562 008e 0022     	 movs r2,#0
 3563 0090 FFF7FEFF 	 bl printValuePointer
 556:../cleanflight/src/main/interface/cli.c ****             cliPrintLinefeed();
 3564              	 .loc 13 556 0
 3565 0094 FFF7FEFF 	 bl cliPrintLinefeed
 3566              	.L233:
 557:../cleanflight/src/main/interface/cli.c ****         }
 558:../cleanflight/src/main/interface/cli.c ****         cliPrintf(format, value->name);
 3567              	 .loc 13 558 0
 3568 0098 7B68     	 ldr r3,[r7,#4]
 3569 009a 1B68     	 ldr r3,[r3]
 3570 009c B869     	 ldr r0,[r7,#24]
 3571 009e 1946     	 mov r1,r3
 3572 00a0 FFF7FEFF 	 bl cliPrintf
 559:../cleanflight/src/main/interface/cli.c ****         printValuePointer(value, pg->copy + valueOffset, false);
 3573              	 .loc 13 559 0
 3574 00a4 FB69     	 ldr r3,[r7,#28]
 3575 00a6 9A68     	 ldr r2,[r3,#8]
 3576 00a8 3B69     	 ldr r3,[r7,#16]
 3577 00aa 1344     	 add r3,r3,r2
 3578 00ac 7868     	 ldr r0,[r7,#4]
 3579 00ae 1946     	 mov r1,r3
 3580 00b0 0022     	 movs r2,#0
 3581 00b2 FFF7FEFF 	 bl printValuePointer
 560:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 3582              	 .loc 13 560 0
 3583 00b6 FFF7FEFF 	 bl cliPrintLinefeed
 3584              	.L230:
 561:../cleanflight/src/main/interface/cli.c ****     }
 562:../cleanflight/src/main/interface/cli.c **** }
 3585              	 .loc 13 562 0
 3586 00ba 2037     	 adds r7,r7,#32
 3587              	.LCFI269:
 3588              	 .cfi_def_cfa_offset 8
 3589 00bc BD46     	 mov sp,r7
 3590              	.LCFI270:
 3591              	 .cfi_def_cfa_register 13
 3592              	 
 3593 00be 80BD     	 pop {r7,pc}
 3594              	.L235:
 3595              	 .align 2
 3596              	.L234:
 3597 00c0 64020000 	 .word .LC65
 3598 00c4 70020000 	 .word .LC66
 3599              	 .cfi_endproc
 3600              	.LFE711:
 3602              	 .section .text.dumpAllValues,"ax",%progbits
 3603              	 .align 2
 3604              	 .thumb
 3605              	 .thumb_func
 3607              	dumpAllValues:
 3608              	.LFB712:
 563:../cleanflight/src/main/interface/cli.c **** 
 564:../cleanflight/src/main/interface/cli.c **** static void dumpAllValues(uint16_t valueSection, uint8_t dumpMask)
 565:../cleanflight/src/main/interface/cli.c **** {
 3609              	 .loc 13 565 0
 3610              	 .cfi_startproc
 3611              	 
 3612              	 
 3613 0000 80B5     	 push {r7,lr}
 3614              	.LCFI271:
 3615              	 .cfi_def_cfa_offset 8
 3616              	 .cfi_offset 7,-8
 3617              	 .cfi_offset 14,-4
 3618 0002 84B0     	 sub sp,sp,#16
 3619              	.LCFI272:
 3620              	 .cfi_def_cfa_offset 24
 3621 0004 00AF     	 add r7,sp,#0
 3622              	.LCFI273:
 3623              	 .cfi_def_cfa_register 7
 3624 0006 0346     	 mov r3,r0
 3625 0008 0A46     	 mov r2,r1
 3626 000a FB80     	 strh r3,[r7,#6]
 3627 000c 1346     	 mov r3,r2
 3628 000e 7B71     	 strb r3,[r7,#5]
 3629              	.LBB9:
 566:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < valueTableEntryCount; i++) {
 3630              	 .loc 13 566 0
 3631 0010 0023     	 movs r3,#0
 3632 0012 FB60     	 str r3,[r7,#12]
 3633 0014 1CE0     	 b .L237
 3634              	.L239:
 3635              	.LBB10:
 567:../cleanflight/src/main/interface/cli.c ****         const clivalue_t *value = &valueTable[i];
 3636              	 .loc 13 567 0
 3637 0016 FA68     	 ldr r2,[r7,#12]
 3638 0018 1346     	 mov r3,r2
 3639 001a 5B00     	 lsls r3,r3,#1
 3640 001c 1344     	 add r3,r3,r2
 3641 001e 9B00     	 lsls r3,r3,#2
 3642 0020 1344     	 add r3,r3,r2
 3643 0022 104A     	 ldr r2,.L240
 3644 0024 1344     	 add r3,r3,r2
 3645 0026 BB60     	 str r3,[r7,#8]
 568:../cleanflight/src/main/interface/cli.c ****         bufWriterFlush(cliWriter);
 3646              	 .loc 13 568 0
 3647 0028 0F4B     	 ldr r3,.L240+4
 3648 002a 1B68     	 ldr r3,[r3]
 3649 002c 1846     	 mov r0,r3
 3650 002e FFF7FEFF 	 bl bufWriterFlush
 569:../cleanflight/src/main/interface/cli.c ****         if ((value->type & VALUE_SECTION_MASK) == valueSection) {
 3651              	 .loc 13 569 0
 3652 0032 BB68     	 ldr r3,[r7,#8]
 3653 0034 1B79     	 ldrb r3,[r3,#4]
 3654 0036 03F01802 	 and r2,r3,#24
 3655 003a FB88     	 ldrh r3,[r7,#6]
 3656 003c 9A42     	 cmp r2,r3
 3657 003e 04D1     	 bne .L238
 570:../cleanflight/src/main/interface/cli.c ****             dumpPgValue(value, dumpMask);
 3658              	 .loc 13 570 0
 3659 0040 7B79     	 ldrb r3,[r7,#5]
 3660 0042 B868     	 ldr r0,[r7,#8]
 3661 0044 1946     	 mov r1,r3
 3662 0046 FFF7FEFF 	 bl dumpPgValue
 3663              	.L238:
 3664              	.LBE10:
 566:../cleanflight/src/main/interface/cli.c ****         const clivalue_t *value = &valueTable[i];
 3665              	 .loc 13 566 0 discriminator 2
 3666 004a FB68     	 ldr r3,[r7,#12]
 3667 004c 0133     	 adds r3,r3,#1
 3668 004e FB60     	 str r3,[r7,#12]
 3669              	.L237:
 566:../cleanflight/src/main/interface/cli.c ****         const clivalue_t *value = &valueTable[i];
 3670              	 .loc 13 566 0 is_stmt 0 discriminator 1
 3671 0050 064B     	 ldr r3,.L240+8
 3672 0052 1B88     	 ldrh r3,[r3]
 3673 0054 1A46     	 mov r2,r3
 3674 0056 FB68     	 ldr r3,[r7,#12]
 3675 0058 9A42     	 cmp r2,r3
 3676 005a DCD8     	 bhi .L239
 3677              	.LBE9:
 571:../cleanflight/src/main/interface/cli.c ****         }
 572:../cleanflight/src/main/interface/cli.c ****     }
 573:../cleanflight/src/main/interface/cli.c **** }
 3678              	 .loc 13 573 0 is_stmt 1
 3679 005c 1037     	 adds r7,r7,#16
 3680              	.LCFI274:
 3681              	 .cfi_def_cfa_offset 8
 3682 005e BD46     	 mov sp,r7
 3683              	.LCFI275:
 3684              	 .cfi_def_cfa_register 13
 3685              	 
 3686 0060 80BD     	 pop {r7,pc}
 3687              	.L241:
 3688 0062 00BF     	 .align 2
 3689              	.L240:
 3690 0064 00000000 	 .word valueTable
 3691 0068 00000000 	 .word cliWriter
 3692 006c 00000000 	 .word valueTableEntryCount
 3693              	 .cfi_endproc
 3694              	.LFE712:
 3696              	 .section .text.cliPrintVar,"ax",%progbits
 3697              	 .align 2
 3698              	 .thumb
 3699              	 .thumb_func
 3701              	cliPrintVar:
 3702              	.LFB713:
 574:../cleanflight/src/main/interface/cli.c **** 
 575:../cleanflight/src/main/interface/cli.c **** static void cliPrintVar(const clivalue_t *var, bool full)
 576:../cleanflight/src/main/interface/cli.c **** {
 3703              	 .loc 13 576 0
 3704              	 .cfi_startproc
 3705              	 
 3706              	 
 3707 0000 80B5     	 push {r7,lr}
 3708              	.LCFI276:
 3709              	 .cfi_def_cfa_offset 8
 3710              	 .cfi_offset 7,-8
 3711              	 .cfi_offset 14,-4
 3712 0002 84B0     	 sub sp,sp,#16
 3713              	.LCFI277:
 3714              	 .cfi_def_cfa_offset 24
 3715 0004 00AF     	 add r7,sp,#0
 3716              	.LCFI278:
 3717              	 .cfi_def_cfa_register 7
 3718 0006 7860     	 str r0,[r7,#4]
 3719 0008 0B46     	 mov r3,r1
 3720 000a FB70     	 strb r3,[r7,#3]
 577:../cleanflight/src/main/interface/cli.c ****     const void *ptr = cliGetValuePointer(var);
 3721              	 .loc 13 577 0
 3722 000c 7868     	 ldr r0,[r7,#4]
 3723 000e FFF7FEFF 	 bl cliGetValuePointer
 3724 0012 F860     	 str r0,[r7,#12]
 578:../cleanflight/src/main/interface/cli.c **** 
 579:../cleanflight/src/main/interface/cli.c ****     printValuePointer(var, ptr, full);
 3725              	 .loc 13 579 0
 3726 0014 FB78     	 ldrb r3,[r7,#3]
 3727 0016 7868     	 ldr r0,[r7,#4]
 3728 0018 F968     	 ldr r1,[r7,#12]
 3729 001a 1A46     	 mov r2,r3
 3730 001c FFF7FEFF 	 bl printValuePointer
 580:../cleanflight/src/main/interface/cli.c **** }
 3731              	 .loc 13 580 0
 3732 0020 1037     	 adds r7,r7,#16
 3733              	.LCFI279:
 3734              	 .cfi_def_cfa_offset 8
 3735 0022 BD46     	 mov sp,r7
 3736              	.LCFI280:
 3737              	 .cfi_def_cfa_register 13
 3738              	 
 3739 0024 80BD     	 pop {r7,pc}
 3740              	 .cfi_endproc
 3741              	.LFE713:
 3743 0026 00BF     	 .section .rodata
 3744 027b 00       	 .align 2
 3745              	.LC67:
 3746 027c 416C6C6F 	 .ascii "Allowed range: %d - %d\000"
 3746      77656420 
 3746      72616E67 
 3746      653A2025 
 3746      64202D20 
 3747 0293 00       	 .align 2
 3748              	.LC68:
 3749 0294 416C6C6F 	 .ascii "Allowed values: \000"
 3749      77656420 
 3749      76616C75 
 3749      65733A20 
 3749      00
 3750 02a5 000000   	 .align 2
 3751              	.LC69:
 3752 02a8 2C2000   	 .ascii ", \000"
 3753 02ab 00       	 .align 2
 3754              	.LC70:
 3755 02ac 257300   	 .ascii "%s\000"
 3756 02af 00       	 .align 2
 3757              	.LC71:
 3758 02b0 41727261 	 .ascii "Array length: %d\000"
 3758      79206C65 
 3758      6E677468 
 3758      3A202564 
 3758      00
 3759 02c1 000000   	 .align 2
 3760              	.LC72:
 3761 02c4 416C6C6F 	 .ascii "Allowed values: OFF, ON\000"
 3761      77656420 
 3761      76616C75 
 3761      65733A20 
 3761      4F46462C 
 3762              	 .section .text.cliPrintVarRange,"ax",%progbits
 3763              	 .align 2
 3764              	 .thumb
 3765              	 .thumb_func
 3767              	cliPrintVarRange:
 3768              	.LFB714:
 581:../cleanflight/src/main/interface/cli.c **** 
 582:../cleanflight/src/main/interface/cli.c **** static void cliPrintVarRange(const clivalue_t *var)
 583:../cleanflight/src/main/interface/cli.c **** {
 3769              	 .loc 13 583 0
 3770              	 .cfi_startproc
 3771              	 
 3772              	 
 3773 0000 80B5     	 push {r7,lr}
 3774              	.LCFI281:
 3775              	 .cfi_def_cfa_offset 8
 3776              	 .cfi_offset 7,-8
 3777              	 .cfi_offset 14,-4
 3778 0002 86B0     	 sub sp,sp,#24
 3779              	.LCFI282:
 3780              	 .cfi_def_cfa_offset 32
 3781 0004 00AF     	 add r7,sp,#0
 3782              	.LCFI283:
 3783              	 .cfi_def_cfa_register 7
 3784 0006 7860     	 str r0,[r7,#4]
 584:../cleanflight/src/main/interface/cli.c ****     switch (var->type & VALUE_MODE_MASK) {
 3785              	 .loc 13 584 0
 3786 0008 7B68     	 ldr r3,[r7,#4]
 3787 000a 1B79     	 ldrb r3,[r3,#4]
 3788 000c 03F06003 	 and r3,r3,#96
 3789 0010 202B     	 cmp r3,#32
 3790 0012 19D0     	 beq .L245
 3791 0014 202B     	 cmp r3,#32
 3792 0016 02DC     	 bgt .L246
 3793 0018 002B     	 cmp r3,#0
 3794 001a 05D0     	 beq .L247
 3795 001c 59E0     	 b .L243
 3796              	.L246:
 3797 001e 402B     	 cmp r3,#64
 3798 0020 4CD0     	 beq .L248
 3799 0022 602B     	 cmp r3,#96
 3800 0024 51D0     	 beq .L249
 3801 0026 54E0     	 b .L243
 3802              	.L247:
 585:../cleanflight/src/main/interface/cli.c ****     case (MODE_DIRECT): {
 586:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Allowed range: %d - %d", var->config.minmax.min, var->config.minmax.max);
 3803              	 .loc 13 586 0
 3804 0028 7B68     	 ldr r3,[r7,#4]
 3805 002a B3F90530 	 ldrsh r3,[r3,#5]
 3806 002e 9BB2     	 uxth r3,r3
 3807 0030 1AB2     	 sxth r2,r3
 3808 0032 7B68     	 ldr r3,[r7,#4]
 3809 0034 B3F90730 	 ldrsh r3,[r3,#7]
 3810 0038 9BB2     	 uxth r3,r3
 3811 003a 1BB2     	 sxth r3,r3
 3812 003c 2648     	 ldr r0,.L254
 3813 003e 1146     	 mov r1,r2
 3814 0040 1A46     	 mov r2,r3
 3815 0042 FFF7FEFF 	 bl cliPrintLinef
 587:../cleanflight/src/main/interface/cli.c ****     }
 588:../cleanflight/src/main/interface/cli.c ****     break;
 3816              	 .loc 13 588 0
 3817 0046 44E0     	 b .L243
 3818              	.L245:
 3819              	.LBB11:
 589:../cleanflight/src/main/interface/cli.c ****     case (MODE_LOOKUP): {
 590:../cleanflight/src/main/interface/cli.c ****         const lookupTableEntry_t *tableEntry = &lookupTables[var->config.lookup.tableIndex];
 3820              	 .loc 13 590 0
 3821 0048 7B68     	 ldr r3,[r7,#4]
 3822 004a 5B79     	 ldrb r3,[r3,#5]
 3823 004c 1A46     	 mov r2,r3
 3824 004e 1346     	 mov r3,r2
 3825 0050 9B00     	 lsls r3,r3,#2
 3826 0052 1344     	 add r3,r3,r2
 3827 0054 214A     	 ldr r2,.L254+4
 3828 0056 1344     	 add r3,r3,r2
 3829 0058 FB60     	 str r3,[r7,#12]
 591:../cleanflight/src/main/interface/cli.c ****         cliPrint("Allowed values: ");
 3830              	 .loc 13 591 0
 3831 005a 2148     	 ldr r0,.L254+8
 3832 005c FFF7FEFF 	 bl cliPrint
 592:../cleanflight/src/main/interface/cli.c ****         bool firstEntry = true;
 3833              	 .loc 13 592 0
 3834 0060 0123     	 movs r3,#1
 3835 0062 FB75     	 strb r3,[r7,#23]
 3836              	.LBB12:
 593:../cleanflight/src/main/interface/cli.c ****         for (unsigned i = 0; i < tableEntry->valueCount; i++) {
 3837              	 .loc 13 593 0
 3838 0064 0023     	 movs r3,#0
 3839 0066 3B61     	 str r3,[r7,#16]
 3840 0068 1FE0     	 b .L250
 3841              	.L253:
 594:../cleanflight/src/main/interface/cli.c ****             if (tableEntry->values[i]) {
 3842              	 .loc 13 594 0
 3843 006a FB68     	 ldr r3,[r7,#12]
 3844 006c 1A68     	 ldr r2,[r3]
 3845 006e 3B69     	 ldr r3,[r7,#16]
 3846 0070 9B00     	 lsls r3,r3,#2
 3847 0072 1344     	 add r3,r3,r2
 3848 0074 1B68     	 ldr r3,[r3]
 3849 0076 002B     	 cmp r3,#0
 3850 0078 14D0     	 beq .L251
 595:../cleanflight/src/main/interface/cli.c ****                 if (!firstEntry) {
 3851              	 .loc 13 595 0
 3852 007a FB7D     	 ldrb r3,[r7,#23]
 3853 007c 83F00103 	 eor r3,r3,#1
 3854 0080 DBB2     	 uxtb r3,r3
 3855 0082 002B     	 cmp r3,#0
 3856 0084 02D0     	 beq .L252
 596:../cleanflight/src/main/interface/cli.c ****                     cliPrint(", ");
 3857              	 .loc 13 596 0
 3858 0086 1748     	 ldr r0,.L254+12
 3859 0088 FFF7FEFF 	 bl cliPrint
 3860              	.L252:
 597:../cleanflight/src/main/interface/cli.c ****                 }
 598:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%s", tableEntry->values[i]);
 3861              	 .loc 13 598 0
 3862 008c FB68     	 ldr r3,[r7,#12]
 3863 008e 1A68     	 ldr r2,[r3]
 3864 0090 3B69     	 ldr r3,[r7,#16]
 3865 0092 9B00     	 lsls r3,r3,#2
 3866 0094 1344     	 add r3,r3,r2
 3867 0096 1B68     	 ldr r3,[r3]
 3868 0098 1348     	 ldr r0,.L254+16
 3869 009a 1946     	 mov r1,r3
 3870 009c FFF7FEFF 	 bl cliPrintf
 599:../cleanflight/src/main/interface/cli.c ****                 firstEntry = false;
 3871              	 .loc 13 599 0
 3872 00a0 0023     	 movs r3,#0
 3873 00a2 FB75     	 strb r3,[r7,#23]
 3874              	.L251:
 593:../cleanflight/src/main/interface/cli.c ****             if (tableEntry->values[i]) {
 3875              	 .loc 13 593 0 discriminator 2
 3876 00a4 3B69     	 ldr r3,[r7,#16]
 3877 00a6 0133     	 adds r3,r3,#1
 3878 00a8 3B61     	 str r3,[r7,#16]
 3879              	.L250:
 593:../cleanflight/src/main/interface/cli.c ****             if (tableEntry->values[i]) {
 3880              	 .loc 13 593 0 is_stmt 0 discriminator 1
 3881 00aa FB68     	 ldr r3,[r7,#12]
 3882 00ac 1B79     	 ldrb r3,[r3,#4]
 3883 00ae 1A46     	 mov r2,r3
 3884 00b0 3B69     	 ldr r3,[r7,#16]
 3885 00b2 9A42     	 cmp r2,r3
 3886 00b4 D9D8     	 bhi .L253
 3887              	.LBE12:
 600:../cleanflight/src/main/interface/cli.c ****             }
 601:../cleanflight/src/main/interface/cli.c ****         }
 602:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 3888              	 .loc 13 602 0 is_stmt 1
 3889 00b6 FFF7FEFF 	 bl cliPrintLinefeed
 3890              	.LBE11:
 603:../cleanflight/src/main/interface/cli.c ****     }
 604:../cleanflight/src/main/interface/cli.c ****     break;
 3891              	 .loc 13 604 0
 3892 00ba 0AE0     	 b .L243
 3893              	.L248:
 605:../cleanflight/src/main/interface/cli.c ****     case (MODE_ARRAY): {
 606:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Array length: %d", var->config.array.length);
 3894              	 .loc 13 606 0
 3895 00bc 7B68     	 ldr r3,[r7,#4]
 3896 00be 5B79     	 ldrb r3,[r3,#5]
 3897 00c0 0A48     	 ldr r0,.L254+20
 3898 00c2 1946     	 mov r1,r3
 3899 00c4 FFF7FEFF 	 bl cliPrintLinef
 607:../cleanflight/src/main/interface/cli.c ****     }
 608:../cleanflight/src/main/interface/cli.c ****     break;
 3900              	 .loc 13 608 0
 3901 00c8 03E0     	 b .L243
 3902              	.L249:
 609:../cleanflight/src/main/interface/cli.c ****     case (MODE_BITSET): {
 610:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Allowed values: OFF, ON");
 3903              	 .loc 13 610 0
 3904 00ca 0948     	 ldr r0,.L254+24
 3905 00cc FFF7FEFF 	 bl cliPrintLinef
 611:../cleanflight/src/main/interface/cli.c ****     }
 612:../cleanflight/src/main/interface/cli.c ****     break;
 3906              	 .loc 13 612 0
 3907 00d0 00BF     	 nop
 3908              	.L243:
 613:../cleanflight/src/main/interface/cli.c ****     }
 614:../cleanflight/src/main/interface/cli.c **** }
 3909              	 .loc 13 614 0
 3910 00d2 1837     	 adds r7,r7,#24
 3911              	.LCFI284:
 3912              	 .cfi_def_cfa_offset 8
 3913 00d4 BD46     	 mov sp,r7
 3914              	.LCFI285:
 3915              	 .cfi_def_cfa_register 13
 3916              	 
 3917 00d6 80BD     	 pop {r7,pc}
 3918              	.L255:
 3919              	 .align 2
 3920              	.L254:
 3921 00d8 7C020000 	 .word .LC67
 3922 00dc 00000000 	 .word lookupTables
 3923 00e0 94020000 	 .word .LC68
 3924 00e4 A8020000 	 .word .LC69
 3925 00e8 AC020000 	 .word .LC70
 3926 00ec B0020000 	 .word .LC71
 3927 00f0 C4020000 	 .word .LC72
 3928              	 .cfi_endproc
 3929              	.LFE714:
 3931              	 .section .text.cliSetVar,"ax",%progbits
 3932              	 .align 2
 3933              	 .thumb
 3934              	 .thumb_func
 3936              	cliSetVar:
 3937              	.LFB715:
 615:../cleanflight/src/main/interface/cli.c **** 
 616:../cleanflight/src/main/interface/cli.c **** static void cliSetVar(const clivalue_t *var, const int16_t value)
 617:../cleanflight/src/main/interface/cli.c **** {
 3938              	 .loc 13 617 0
 3939              	 .cfi_startproc
 3940              	 
 3941              	 
 3942 0000 80B5     	 push {r7,lr}
 3943              	.LCFI286:
 3944              	 .cfi_def_cfa_offset 8
 3945              	 .cfi_offset 7,-8
 3946              	 .cfi_offset 14,-4
 3947 0002 86B0     	 sub sp,sp,#24
 3948              	.LCFI287:
 3949              	 .cfi_def_cfa_offset 32
 3950 0004 00AF     	 add r7,sp,#0
 3951              	.LCFI288:
 3952              	 .cfi_def_cfa_register 7
 3953 0006 7860     	 str r0,[r7,#4]
 3954 0008 0B46     	 mov r3,r1
 3955 000a 7B80     	 strh r3,[r7,#2]
 618:../cleanflight/src/main/interface/cli.c ****     void *ptr = cliGetValuePointer(var);
 3956              	 .loc 13 618 0
 3957 000c 7868     	 ldr r0,[r7,#4]
 3958 000e FFF7FEFF 	 bl cliGetValuePointer
 3959 0012 3861     	 str r0,[r7,#16]
 619:../cleanflight/src/main/interface/cli.c ****     uint32_t workValue;
 620:../cleanflight/src/main/interface/cli.c ****     uint32_t mask;
 621:../cleanflight/src/main/interface/cli.c **** 
 622:../cleanflight/src/main/interface/cli.c ****     if ((var->type & VALUE_MODE_MASK) == MODE_BITSET) {
 3960              	 .loc 13 622 0
 3961 0014 7B68     	 ldr r3,[r7,#4]
 3962 0016 1B79     	 ldrb r3,[r3,#4]
 3963 0018 03F06003 	 and r3,r3,#96
 3964 001c 602B     	 cmp r3,#96
 3965 001e 61D1     	 bne .L257
 623:../cleanflight/src/main/interface/cli.c ****         switch (var->type & VALUE_TYPE_MASK) {
 3966              	 .loc 13 623 0
 3967 0020 7B68     	 ldr r3,[r7,#4]
 3968 0022 1B79     	 ldrb r3,[r3,#4]
 3969 0024 03F00703 	 and r3,r3,#7
 3970 0028 022B     	 cmp r3,#2
 3971 002a 22D0     	 beq .L259
 3972 002c 042B     	 cmp r3,#4
 3973 002e 3ED0     	 beq .L260
 3974 0030 002B     	 cmp r3,#0
 3975 0032 00D0     	 beq .L261
 3976 0034 76E0     	 b .L256
 3977              	.L261:
 624:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT8:
 625:../cleanflight/src/main/interface/cli.c ****             mask = (1 << var->config.bitpos) & 0xff;
 3978              	 .loc 13 625 0
 3979 0036 7B68     	 ldr r3,[r7,#4]
 3980 0038 5B79     	 ldrb r3,[r3,#5]
 3981 003a 1A46     	 mov r2,r3
 3982 003c 0123     	 movs r3,#1
 3983 003e 9340     	 lsls r3,r3,r2
 3984 0040 DBB2     	 uxtb r3,r3
 3985 0042 FB60     	 str r3,[r7,#12]
 626:../cleanflight/src/main/interface/cli.c ****             if (value) {
 3986              	 .loc 13 626 0
 3987 0044 B7F90230 	 ldrsh r3,[r7,#2]
 3988 0048 002B     	 cmp r3,#0
 3989 004a 06D0     	 beq .L262
 627:../cleanflight/src/main/interface/cli.c ****                 workValue = *(uint8_t *)ptr | mask;
 3990              	 .loc 13 627 0
 3991 004c 3B69     	 ldr r3,[r7,#16]
 3992 004e 1B78     	 ldrb r3,[r3]
 3993 0050 1A46     	 mov r2,r3
 3994 0052 FB68     	 ldr r3,[r7,#12]
 3995 0054 1343     	 orrs r3,r3,r2
 3996 0056 7B61     	 str r3,[r7,#20]
 3997 0058 06E0     	 b .L263
 3998              	.L262:
 628:../cleanflight/src/main/interface/cli.c ****             } else {
 629:../cleanflight/src/main/interface/cli.c ****                 workValue = *(uint8_t *)ptr & ~mask;
 3999              	 .loc 13 629 0
 4000 005a 3B69     	 ldr r3,[r7,#16]
 4001 005c 1B78     	 ldrb r3,[r3]
 4002 005e 1A46     	 mov r2,r3
 4003 0060 FB68     	 ldr r3,[r7,#12]
 4004 0062 DB43     	 mvns r3,r3
 4005 0064 1340     	 ands r3,r3,r2
 4006 0066 7B61     	 str r3,[r7,#20]
 4007              	.L263:
 630:../cleanflight/src/main/interface/cli.c ****             }
 631:../cleanflight/src/main/interface/cli.c ****             *(uint8_t *)ptr = workValue;
 4008              	 .loc 13 631 0
 4009 0068 7B69     	 ldr r3,[r7,#20]
 4010 006a DAB2     	 uxtb r2,r3
 4011 006c 3B69     	 ldr r3,[r7,#16]
 4012 006e 1A70     	 strb r2,[r3]
 632:../cleanflight/src/main/interface/cli.c ****             break;
 4013              	 .loc 13 632 0
 4014 0070 37E0     	 b .L258
 4015              	.L259:
 633:../cleanflight/src/main/interface/cli.c **** 
 634:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT16:
 635:../cleanflight/src/main/interface/cli.c ****             mask = (1 << var->config.bitpos) & 0xffff;
 4016              	 .loc 13 635 0
 4017 0072 7B68     	 ldr r3,[r7,#4]
 4018 0074 5B79     	 ldrb r3,[r3,#5]
 4019 0076 1A46     	 mov r2,r3
 4020 0078 0123     	 movs r3,#1
 4021 007a 9340     	 lsls r3,r3,r2
 4022 007c 9BB2     	 uxth r3,r3
 4023 007e FB60     	 str r3,[r7,#12]
 636:../cleanflight/src/main/interface/cli.c ****             if (value) {
 4024              	 .loc 13 636 0
 4025 0080 B7F90230 	 ldrsh r3,[r7,#2]
 4026 0084 002B     	 cmp r3,#0
 4027 0086 06D0     	 beq .L264
 637:../cleanflight/src/main/interface/cli.c ****                 workValue = *(uint16_t *)ptr | mask;
 4028              	 .loc 13 637 0
 4029 0088 3B69     	 ldr r3,[r7,#16]
 4030 008a 1B88     	 ldrh r3,[r3]
 4031 008c 1A46     	 mov r2,r3
 4032 008e FB68     	 ldr r3,[r7,#12]
 4033 0090 1343     	 orrs r3,r3,r2
 4034 0092 7B61     	 str r3,[r7,#20]
 4035 0094 06E0     	 b .L265
 4036              	.L264:
 638:../cleanflight/src/main/interface/cli.c ****             } else {
 639:../cleanflight/src/main/interface/cli.c ****                 workValue = *(uint16_t *)ptr & ~mask;
 4037              	 .loc 13 639 0
 4038 0096 3B69     	 ldr r3,[r7,#16]
 4039 0098 1B88     	 ldrh r3,[r3]
 4040 009a 1A46     	 mov r2,r3
 4041 009c FB68     	 ldr r3,[r7,#12]
 4042 009e DB43     	 mvns r3,r3
 4043 00a0 1340     	 ands r3,r3,r2
 4044 00a2 7B61     	 str r3,[r7,#20]
 4045              	.L265:
 640:../cleanflight/src/main/interface/cli.c ****             }
 641:../cleanflight/src/main/interface/cli.c ****             *(uint16_t *)ptr = workValue;
 4046              	 .loc 13 641 0
 4047 00a4 7B69     	 ldr r3,[r7,#20]
 4048 00a6 9AB2     	 uxth r2,r3
 4049 00a8 3B69     	 ldr r3,[r7,#16]
 4050 00aa 1A80     	 strh r2,[r3]
 642:../cleanflight/src/main/interface/cli.c ****             break;
 4051              	 .loc 13 642 0
 4052 00ac 19E0     	 b .L258
 4053              	.L260:
 643:../cleanflight/src/main/interface/cli.c **** 
 644:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT32:
 645:../cleanflight/src/main/interface/cli.c ****             mask = 1 << var->config.bitpos;
 4054              	 .loc 13 645 0
 4055 00ae 7B68     	 ldr r3,[r7,#4]
 4056 00b0 5B79     	 ldrb r3,[r3,#5]
 4057 00b2 1A46     	 mov r2,r3
 4058 00b4 0123     	 movs r3,#1
 4059 00b6 9340     	 lsls r3,r3,r2
 4060 00b8 FB60     	 str r3,[r7,#12]
 646:../cleanflight/src/main/interface/cli.c ****             if (value) {
 4061              	 .loc 13 646 0
 4062 00ba B7F90230 	 ldrsh r3,[r7,#2]
 4063 00be 002B     	 cmp r3,#0
 4064 00c0 05D0     	 beq .L266
 647:../cleanflight/src/main/interface/cli.c ****                 workValue = *(uint32_t *)ptr | mask;
 4065              	 .loc 13 647 0
 4066 00c2 3B69     	 ldr r3,[r7,#16]
 4067 00c4 1A68     	 ldr r2,[r3]
 4068 00c6 FB68     	 ldr r3,[r7,#12]
 4069 00c8 1343     	 orrs r3,r3,r2
 4070 00ca 7B61     	 str r3,[r7,#20]
 4071 00cc 05E0     	 b .L267
 4072              	.L266:
 648:../cleanflight/src/main/interface/cli.c ****             } else {
 649:../cleanflight/src/main/interface/cli.c ****                 workValue = *(uint32_t *)ptr & ~mask;
 4073              	 .loc 13 649 0
 4074 00ce 3B69     	 ldr r3,[r7,#16]
 4075 00d0 1A68     	 ldr r2,[r3]
 4076 00d2 FB68     	 ldr r3,[r7,#12]
 4077 00d4 DB43     	 mvns r3,r3
 4078 00d6 1340     	 ands r3,r3,r2
 4079 00d8 7B61     	 str r3,[r7,#20]
 4080              	.L267:
 650:../cleanflight/src/main/interface/cli.c ****             }
 651:../cleanflight/src/main/interface/cli.c ****             *(uint32_t *)ptr = workValue;
 4081              	 .loc 13 651 0
 4082 00da 3B69     	 ldr r3,[r7,#16]
 4083 00dc 7A69     	 ldr r2,[r7,#20]
 4084 00de 1A60     	 str r2,[r3]
 652:../cleanflight/src/main/interface/cli.c ****             break;
 4085              	 .loc 13 652 0
 4086 00e0 00BF     	 nop
 4087              	.L258:
 4088 00e2 1FE0     	 b .L256
 4089              	.L257:
 653:../cleanflight/src/main/interface/cli.c **** 
 654:../cleanflight/src/main/interface/cli.c ****         }
 655:../cleanflight/src/main/interface/cli.c ****     } else {
 656:../cleanflight/src/main/interface/cli.c ****         switch (var->type & VALUE_TYPE_MASK) {
 4090              	 .loc 13 656 0
 4091 00e4 7B68     	 ldr r3,[r7,#4]
 4092 00e6 1B79     	 ldrb r3,[r3,#4]
 4093 00e8 03F00703 	 and r3,r3,#7
 4094 00ec 032B     	 cmp r3,#3
 4095 00ee 19D8     	 bhi .L256
 4096 00f0 01A2     	 adr r2,.L270
 4097 00f2 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 4098 00f6 00BF     	 .p2align 2
 4099              	.L270:
 4100 00f8 09010000 	 .word .L269+1
 4101 00fc 13010000 	 .word .L271+1
 4102 0100 1D010000 	 .word .L272+1
 4103 0104 1D010000 	 .word .L272+1
 4104              	 .p2align 1
 4105              	.L269:
 657:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT8:
 658:../cleanflight/src/main/interface/cli.c ****             *(uint8_t *)ptr = value;
 4106              	 .loc 13 658 0
 4107 0108 7B88     	 ldrh r3,[r7,#2]
 4108 010a DAB2     	 uxtb r2,r3
 4109 010c 3B69     	 ldr r3,[r7,#16]
 4110 010e 1A70     	 strb r2,[r3]
 659:../cleanflight/src/main/interface/cli.c ****             break;
 4111              	 .loc 13 659 0
 4112 0110 08E0     	 b .L256
 4113              	.L271:
 660:../cleanflight/src/main/interface/cli.c **** 
 661:../cleanflight/src/main/interface/cli.c ****         case VAR_INT8:
 662:../cleanflight/src/main/interface/cli.c ****             *(int8_t *)ptr = value;
 4114              	 .loc 13 662 0
 4115 0112 7B88     	 ldrh r3,[r7,#2]
 4116 0114 DAB2     	 uxtb r2,r3
 4117 0116 3B69     	 ldr r3,[r7,#16]
 4118 0118 1A70     	 strb r2,[r3]
 663:../cleanflight/src/main/interface/cli.c ****             break;
 4119              	 .loc 13 663 0
 4120 011a 03E0     	 b .L256
 4121              	.L272:
 664:../cleanflight/src/main/interface/cli.c **** 
 665:../cleanflight/src/main/interface/cli.c ****         case VAR_UINT16:
 666:../cleanflight/src/main/interface/cli.c ****         case VAR_INT16:
 667:../cleanflight/src/main/interface/cli.c ****             *(int16_t *)ptr = value;
 4122              	 .loc 13 667 0
 4123 011c 3B69     	 ldr r3,[r7,#16]
 4124 011e 7A88     	 ldrh r2,[r7,#2]
 4125 0120 1A80     	 strh r2,[r3]
 668:../cleanflight/src/main/interface/cli.c ****             break;
 4126              	 .loc 13 668 0
 4127 0122 00BF     	 nop
 4128              	.L256:
 669:../cleanflight/src/main/interface/cli.c ****         }
 670:../cleanflight/src/main/interface/cli.c ****     }
 671:../cleanflight/src/main/interface/cli.c **** }
 4129              	 .loc 13 671 0
 4130 0124 1837     	 adds r7,r7,#24
 4131              	.LCFI289:
 4132              	 .cfi_def_cfa_offset 8
 4133 0126 BD46     	 mov sp,r7
 4134              	.LCFI290:
 4135              	 .cfi_def_cfa_register 13
 4136              	 
 4137 0128 80BD     	 pop {r7,pc}
 4138              	 .cfi_endproc
 4139              	.LFE715:
 4141 012a 00BF     	 .section .text.cliRepeat,"ax",%progbits
 4142              	 .align 2
 4143              	 .thumb
 4144              	 .thumb_func
 4146              	cliRepeat:
 4147              	.LFB716:
 672:../cleanflight/src/main/interface/cli.c **** 
 673:../cleanflight/src/main/interface/cli.c **** #if defined(USE_RESOURCE_MGMT) && !defined(MINIMAL_CLI)
 674:../cleanflight/src/main/interface/cli.c **** static void cliRepeat(char ch, uint8_t len)
 675:../cleanflight/src/main/interface/cli.c **** {
 4148              	 .loc 13 675 0
 4149              	 .cfi_startproc
 4150              	 
 4151              	 
 4152 0000 80B5     	 push {r7,lr}
 4153              	.LCFI291:
 4154              	 .cfi_def_cfa_offset 8
 4155              	 .cfi_offset 7,-8
 4156              	 .cfi_offset 14,-4
 4157 0002 84B0     	 sub sp,sp,#16
 4158              	.LCFI292:
 4159              	 .cfi_def_cfa_offset 24
 4160 0004 00AF     	 add r7,sp,#0
 4161              	.LCFI293:
 4162              	 .cfi_def_cfa_register 7
 4163 0006 0346     	 mov r3,r0
 4164 0008 0A46     	 mov r2,r1
 4165 000a FB71     	 strb r3,[r7,#7]
 4166 000c 1346     	 mov r3,r2
 4167 000e BB71     	 strb r3,[r7,#6]
 4168              	.LBB13:
 676:../cleanflight/src/main/interface/cli.c ****     for (int i = 0; i < len; i++) {
 4169              	 .loc 13 676 0
 4170 0010 0023     	 movs r3,#0
 4171 0012 FB60     	 str r3,[r7,#12]
 4172 0014 09E0     	 b .L274
 4173              	.L275:
 677:../cleanflight/src/main/interface/cli.c ****         bufWriterAppend(cliWriter, ch);
 4174              	 .loc 13 677 0 discriminator 3
 4175 0016 094B     	 ldr r3,.L276
 4176 0018 1A68     	 ldr r2,[r3]
 4177 001a FB79     	 ldrb r3,[r7,#7]
 4178 001c 1046     	 mov r0,r2
 4179 001e 1946     	 mov r1,r3
 4180 0020 FFF7FEFF 	 bl bufWriterAppend
 676:../cleanflight/src/main/interface/cli.c ****     for (int i = 0; i < len; i++) {
 4181              	 .loc 13 676 0 discriminator 3
 4182 0024 FB68     	 ldr r3,[r7,#12]
 4183 0026 0133     	 adds r3,r3,#1
 4184 0028 FB60     	 str r3,[r7,#12]
 4185              	.L274:
 676:../cleanflight/src/main/interface/cli.c ****     for (int i = 0; i < len; i++) {
 4186              	 .loc 13 676 0 is_stmt 0 discriminator 1
 4187 002a BA79     	 ldrb r2,[r7,#6]
 4188 002c FB68     	 ldr r3,[r7,#12]
 4189 002e 9A42     	 cmp r2,r3
 4190 0030 F1DC     	 bgt .L275
 4191              	.LBE13:
 678:../cleanflight/src/main/interface/cli.c ****     }
 679:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 4192              	 .loc 13 679 0 is_stmt 1
 4193 0032 FFF7FEFF 	 bl cliPrintLinefeed
 680:../cleanflight/src/main/interface/cli.c **** }
 4194              	 .loc 13 680 0
 4195 0036 1037     	 adds r7,r7,#16
 4196              	.LCFI294:
 4197              	 .cfi_def_cfa_offset 8
 4198 0038 BD46     	 mov sp,r7
 4199              	.LCFI295:
 4200              	 .cfi_def_cfa_register 13
 4201              	 
 4202 003a 80BD     	 pop {r7,pc}
 4203              	.L277:
 4204              	 .align 2
 4205              	.L276:
 4206 003c 00000000 	 .word cliWriter
 4207              	 .cfi_endproc
 4208              	.LFE716:
 4210              	 .section .text.cliPrompt,"ax",%progbits
 4211              	 .align 2
 4212              	 .thumb
 4213              	 .thumb_func
 4215              	cliPrompt:
 4216              	.LFB717:
 681:../cleanflight/src/main/interface/cli.c **** #endif
 682:../cleanflight/src/main/interface/cli.c **** 
 683:../cleanflight/src/main/interface/cli.c **** static void cliPrompt(void)
 684:../cleanflight/src/main/interface/cli.c **** {
 4217              	 .loc 13 684 0
 4218              	 .cfi_startproc
 4219              	 
 4220              	 
 4221 0000 80B5     	 push {r7,lr}
 4222              	.LCFI296:
 4223              	 .cfi_def_cfa_offset 8
 4224              	 .cfi_offset 7,-8
 4225              	 .cfi_offset 14,-4
 4226 0002 00AF     	 add r7,sp,#0
 4227              	.LCFI297:
 4228              	 .cfi_def_cfa_register 7
 685:../cleanflight/src/main/interface/cli.c ****     cliPrint("\r\n# ");
 4229              	 .loc 13 685 0
 4230 0004 0148     	 ldr r0,.L279
 4231 0006 FFF7FEFF 	 bl cliPrint
 686:../cleanflight/src/main/interface/cli.c **** }
 4232              	 .loc 13 686 0
 4233 000a 80BD     	 pop {r7,pc}
 4234              	.L280:
 4235              	 .align 2
 4236              	.L279:
 4237 000c 34020000 	 .word .LC58
 4238              	 .cfi_endproc
 4239              	.LFE717:
 4241              	 .section .rodata
 4242              	 .align 2
 4243              	.LC73:
 4244 02dc 50617273 	 .ascii "Parse error\000"
 4244      65206572 
 4244      726F7200 
 4245              	 .section .text.cliShowParseError,"ax",%progbits
 4246              	 .align 2
 4247              	 .thumb
 4248              	 .thumb_func
 4250              	cliShowParseError:
 4251              	.LFB718:
 687:../cleanflight/src/main/interface/cli.c **** 
 688:../cleanflight/src/main/interface/cli.c **** static void cliShowParseError(void)
 689:../cleanflight/src/main/interface/cli.c **** {
 4252              	 .loc 13 689 0
 4253              	 .cfi_startproc
 4254              	 
 4255              	 
 4256 0000 80B5     	 push {r7,lr}
 4257              	.LCFI298:
 4258              	 .cfi_def_cfa_offset 8
 4259              	 .cfi_offset 7,-8
 4260              	 .cfi_offset 14,-4
 4261 0002 00AF     	 add r7,sp,#0
 4262              	.LCFI299:
 4263              	 .cfi_def_cfa_register 7
 690:../cleanflight/src/main/interface/cli.c ****     cliPrintErrorLinef("Parse error");
 4264              	 .loc 13 690 0
 4265 0004 0148     	 ldr r0,.L282
 4266 0006 FFF7FEFF 	 bl cliPrintErrorLinef
 691:../cleanflight/src/main/interface/cli.c **** }
 4267              	 .loc 13 691 0
 4268 000a 80BD     	 pop {r7,pc}
 4269              	.L283:
 4270              	 .align 2
 4271              	.L282:
 4272 000c DC020000 	 .word .LC73
 4273              	 .cfi_endproc
 4274              	.LFE718:
 4276              	 .section .rodata
 4277              	 .align 2
 4278              	.LC74:
 4279 02e8 2573206E 	 .ascii "%s not between %d and %d\000"
 4279      6F742062 
 4279      65747765 
 4279      656E2025 
 4279      6420616E 
 4280              	 .section .text.cliShowArgumentRangeError,"ax",%progbits
 4281              	 .align 2
 4282              	 .thumb
 4283              	 .thumb_func
 4285              	cliShowArgumentRangeError:
 4286              	.LFB719:
 692:../cleanflight/src/main/interface/cli.c **** 
 693:../cleanflight/src/main/interface/cli.c **** static void cliShowArgumentRangeError(char *name, int min, int max)
 694:../cleanflight/src/main/interface/cli.c **** {
 4287              	 .loc 13 694 0
 4288              	 .cfi_startproc
 4289              	 
 4290              	 
 4291 0000 80B5     	 push {r7,lr}
 4292              	.LCFI300:
 4293              	 .cfi_def_cfa_offset 8
 4294              	 .cfi_offset 7,-8
 4295              	 .cfi_offset 14,-4
 4296 0002 84B0     	 sub sp,sp,#16
 4297              	.LCFI301:
 4298              	 .cfi_def_cfa_offset 24
 4299 0004 00AF     	 add r7,sp,#0
 4300              	.LCFI302:
 4301              	 .cfi_def_cfa_register 7
 4302 0006 F860     	 str r0,[r7,#12]
 4303 0008 B960     	 str r1,[r7,#8]
 4304 000a 7A60     	 str r2,[r7,#4]
 695:../cleanflight/src/main/interface/cli.c ****     cliPrintErrorLinef("%s not between %d and %d", name, min, max);
 4305              	 .loc 13 695 0
 4306 000c 0448     	 ldr r0,.L285
 4307 000e F968     	 ldr r1,[r7,#12]
 4308 0010 BA68     	 ldr r2,[r7,#8]
 4309 0012 7B68     	 ldr r3,[r7,#4]
 4310 0014 FFF7FEFF 	 bl cliPrintErrorLinef
 696:../cleanflight/src/main/interface/cli.c **** }
 4311              	 .loc 13 696 0
 4312 0018 1037     	 adds r7,r7,#16
 4313              	.LCFI303:
 4314              	 .cfi_def_cfa_offset 8
 4315 001a BD46     	 mov sp,r7
 4316              	.LCFI304:
 4317              	 .cfi_def_cfa_register 13
 4318              	 
 4319 001c 80BD     	 pop {r7,pc}
 4320              	.L286:
 4321 001e 00BF     	 .align 2
 4322              	.L285:
 4323 0020 E8020000 	 .word .LC74
 4324              	 .cfi_endproc
 4325              	.LFE719:
 4327              	 .section .text.nextArg,"ax",%progbits
 4328              	 .align 2
 4329              	 .thumb
 4330              	 .thumb_func
 4332              	nextArg:
 4333              	.LFB720:
 697:../cleanflight/src/main/interface/cli.c **** 
 698:../cleanflight/src/main/interface/cli.c **** static const char *nextArg(const char *currentArg)
 699:../cleanflight/src/main/interface/cli.c **** {
 4334              	 .loc 13 699 0
 4335              	 .cfi_startproc
 4336              	 
 4337              	 
 4338 0000 80B5     	 push {r7,lr}
 4339              	.LCFI305:
 4340              	 .cfi_def_cfa_offset 8
 4341              	 .cfi_offset 7,-8
 4342              	 .cfi_offset 14,-4
 4343 0002 84B0     	 sub sp,sp,#16
 4344              	.LCFI306:
 4345              	 .cfi_def_cfa_offset 24
 4346 0004 00AF     	 add r7,sp,#0
 4347              	.LCFI307:
 4348              	 .cfi_def_cfa_register 7
 4349 0006 7860     	 str r0,[r7,#4]
 700:../cleanflight/src/main/interface/cli.c ****     const char *ptr = strchr(currentArg, ' ');
 4350              	 .loc 13 700 0
 4351 0008 7868     	 ldr r0,[r7,#4]
 4352 000a 2021     	 movs r1,#32
 4353 000c FFF7FEFF 	 bl strchr
 4354 0010 F860     	 str r0,[r7,#12]
 701:../cleanflight/src/main/interface/cli.c ****     while (ptr && *ptr == ' ') {
 4355              	 .loc 13 701 0
 4356 0012 02E0     	 b .L288
 4357              	.L290:
 702:../cleanflight/src/main/interface/cli.c ****         ptr++;
 4358              	 .loc 13 702 0
 4359 0014 FB68     	 ldr r3,[r7,#12]
 4360 0016 0133     	 adds r3,r3,#1
 4361 0018 FB60     	 str r3,[r7,#12]
 4362              	.L288:
 701:../cleanflight/src/main/interface/cli.c ****     while (ptr && *ptr == ' ') {
 4363              	 .loc 13 701 0
 4364 001a FB68     	 ldr r3,[r7,#12]
 4365 001c 002B     	 cmp r3,#0
 4366 001e 03D0     	 beq .L289
 701:../cleanflight/src/main/interface/cli.c ****     while (ptr && *ptr == ' ') {
 4367              	 .loc 13 701 0 is_stmt 0 discriminator 1
 4368 0020 FB68     	 ldr r3,[r7,#12]
 4369 0022 1B78     	 ldrb r3,[r3]
 4370 0024 202B     	 cmp r3,#32
 4371 0026 F5D0     	 beq .L290
 4372              	.L289:
 703:../cleanflight/src/main/interface/cli.c ****     }
 704:../cleanflight/src/main/interface/cli.c **** 
 705:../cleanflight/src/main/interface/cli.c ****     return ptr;
 4373              	 .loc 13 705 0 is_stmt 1
 4374 0028 FB68     	 ldr r3,[r7,#12]
 706:../cleanflight/src/main/interface/cli.c **** }
 4375              	 .loc 13 706 0
 4376 002a 1846     	 mov r0,r3
 4377 002c 1037     	 adds r7,r7,#16
 4378              	.LCFI308:
 4379              	 .cfi_def_cfa_offset 8
 4380 002e BD46     	 mov sp,r7
 4381              	.LCFI309:
 4382              	 .cfi_def_cfa_register 13
 4383              	 
 4384 0030 80BD     	 pop {r7,pc}
 4385              	 .cfi_endproc
 4386              	.LFE720:
 4388 0032 00BF     	 .section .text.processChannelRangeArgs,"ax",%progbits
 4389              	 .align 2
 4390              	 .thumb
 4391              	 .thumb_func
 4393              	processChannelRangeArgs:
 4394              	.LFB721:
 707:../cleanflight/src/main/interface/cli.c **** 
 708:../cleanflight/src/main/interface/cli.c **** static const char *processChannelRangeArgs(const char *ptr, channelRange_t *range, uint8_t *validAr
 709:../cleanflight/src/main/interface/cli.c **** {
 4395              	 .loc 13 709 0
 4396              	 .cfi_startproc
 4397              	 
 4398              	 
 4399 0000 80B5     	 push {r7,lr}
 4400              	.LCFI310:
 4401              	 .cfi_def_cfa_offset 8
 4402              	 .cfi_offset 7,-8
 4403              	 .cfi_offset 14,-4
 4404 0002 86B0     	 sub sp,sp,#24
 4405              	.LCFI311:
 4406              	 .cfi_def_cfa_offset 32
 4407 0004 00AF     	 add r7,sp,#0
 4408              	.LCFI312:
 4409              	 .cfi_def_cfa_register 7
 4410 0006 F860     	 str r0,[r7,#12]
 4411 0008 B960     	 str r1,[r7,#8]
 4412 000a 7A60     	 str r2,[r7,#4]
 4413              	.LBB14:
 710:../cleanflight/src/main/interface/cli.c ****     for (uint32_t argIndex = 0; argIndex < 2; argIndex++) {
 4414              	 .loc 13 710 0
 4415 000c 0023     	 movs r3,#0
 4416 000e 7B61     	 str r3,[r7,#20]
 4417 0010 36E0     	 b .L293
 4418              	.L297:
 711:../cleanflight/src/main/interface/cli.c ****         ptr = nextArg(ptr);
 4419              	 .loc 13 711 0
 4420 0012 F868     	 ldr r0,[r7,#12]
 4421 0014 FFF7FEFF 	 bl nextArg
 4422 0018 F860     	 str r0,[r7,#12]
 712:../cleanflight/src/main/interface/cli.c ****         if (ptr) {
 4423              	 .loc 13 712 0
 4424 001a FB68     	 ldr r3,[r7,#12]
 4425 001c 002B     	 cmp r3,#0
 4426 001e 2CD0     	 beq .L294
 4427              	.LBB15:
 713:../cleanflight/src/main/interface/cli.c ****             int val = atoi(ptr);
 4428              	 .loc 13 713 0
 4429 0020 F868     	 ldr r0,[r7,#12]
 4430 0022 FFF7FEFF 	 bl atoi
 4431 0026 3861     	 str r0,[r7,#16]
 714:../cleanflight/src/main/interface/cli.c ****             val = CHANNEL_VALUE_TO_STEP(val);
 4432              	 .loc 13 714 0
 4433 0028 3869     	 ldr r0,[r7,#16]
 4434 002a 4FF46171 	 mov r1,#900
 4435 002e 40F63402 	 movw r2,#2100
 4436 0032 FFF7FEFF 	 bl constrain
 4437 0036 0346     	 mov r3,r0
 4438 0038 A3F56173 	 sub r3,r3,#900
 4439 003c 144A     	 ldr r2,.L299
 4440 003e 82FB0312 	 smull r1,r2,r2,r3
 4441 0042 D210     	 asrs r2,r2,#3
 4442 0044 DB17     	 asrs r3,r3,#31
 4443 0046 D31A     	 subs r3,r2,r3
 4444 0048 3B61     	 str r3,[r7,#16]
 715:../cleanflight/src/main/interface/cli.c ****             if (val >= MIN_MODE_RANGE_STEP && val <= MAX_MODE_RANGE_STEP) {
 4445              	 .loc 13 715 0
 4446 004a 3B69     	 ldr r3,[r7,#16]
 4447 004c 002B     	 cmp r3,#0
 4448 004e 14DB     	 blt .L294
 4449              	 .loc 13 715 0 is_stmt 0 discriminator 1
 4450 0050 3B69     	 ldr r3,[r7,#16]
 4451 0052 302B     	 cmp r3,#48
 4452 0054 11DC     	 bgt .L294
 716:../cleanflight/src/main/interface/cli.c ****                 if (argIndex == 0) {
 4453              	 .loc 13 716 0 is_stmt 1
 4454 0056 7B69     	 ldr r3,[r7,#20]
 4455 0058 002B     	 cmp r3,#0
 4456 005a 04D1     	 bne .L295
 717:../cleanflight/src/main/interface/cli.c ****                     range->startStep = val;
 4457              	 .loc 13 717 0
 4458 005c 3B69     	 ldr r3,[r7,#16]
 4459 005e DAB2     	 uxtb r2,r3
 4460 0060 BB68     	 ldr r3,[r7,#8]
 4461 0062 1A70     	 strb r2,[r3]
 4462 0064 03E0     	 b .L296
 4463              	.L295:
 718:../cleanflight/src/main/interface/cli.c ****                 } else {
 719:../cleanflight/src/main/interface/cli.c ****                     range->endStep = val;
 4464              	 .loc 13 719 0
 4465 0066 3B69     	 ldr r3,[r7,#16]
 4466 0068 DAB2     	 uxtb r2,r3
 4467 006a BB68     	 ldr r3,[r7,#8]
 4468 006c 5A70     	 strb r2,[r3,#1]
 4469              	.L296:
 720:../cleanflight/src/main/interface/cli.c ****                 }
 721:../cleanflight/src/main/interface/cli.c ****                 (*validArgumentCount)++;
 4470              	 .loc 13 721 0
 4471 006e 7B68     	 ldr r3,[r7,#4]
 4472 0070 1B78     	 ldrb r3,[r3]
 4473 0072 0133     	 adds r3,r3,#1
 4474 0074 DAB2     	 uxtb r2,r3
 4475 0076 7B68     	 ldr r3,[r7,#4]
 4476 0078 1A70     	 strb r2,[r3]
 4477              	.L294:
 4478              	.LBE15:
 710:../cleanflight/src/main/interface/cli.c ****         ptr = nextArg(ptr);
 4479              	 .loc 13 710 0 discriminator 2
 4480 007a 7B69     	 ldr r3,[r7,#20]
 4481 007c 0133     	 adds r3,r3,#1
 4482 007e 7B61     	 str r3,[r7,#20]
 4483              	.L293:
 710:../cleanflight/src/main/interface/cli.c ****         ptr = nextArg(ptr);
 4484              	 .loc 13 710 0 is_stmt 0 discriminator 1
 4485 0080 7B69     	 ldr r3,[r7,#20]
 4486 0082 012B     	 cmp r3,#1
 4487 0084 C5D9     	 bls .L297
 4488              	.LBE14:
 722:../cleanflight/src/main/interface/cli.c ****             }
 723:../cleanflight/src/main/interface/cli.c ****         }
 724:../cleanflight/src/main/interface/cli.c ****     }
 725:../cleanflight/src/main/interface/cli.c **** 
 726:../cleanflight/src/main/interface/cli.c ****     return ptr;
 4489              	 .loc 13 726 0 is_stmt 1
 4490 0086 FB68     	 ldr r3,[r7,#12]
 727:../cleanflight/src/main/interface/cli.c **** }
 4491              	 .loc 13 727 0
 4492 0088 1846     	 mov r0,r3
 4493 008a 1837     	 adds r7,r7,#24
 4494              	.LCFI313:
 4495              	 .cfi_def_cfa_offset 8
 4496 008c BD46     	 mov sp,r7
 4497              	.LCFI314:
 4498              	 .cfi_def_cfa_register 13
 4499              	 
 4500 008e 80BD     	 pop {r7,pc}
 4501              	.L300:
 4502              	 .align 2
 4503              	.L299:
 4504 0090 1F85EB51 	 .word 1374389535
 4505              	 .cfi_endproc
 4506              	.LFE721:
 4508              	 .section .text.isEmpty,"ax",%progbits
 4509              	 .align 2
 4510              	 .thumb
 4511              	 .thumb_func
 4513              	isEmpty:
 4514              	.LFB722:
 728:../cleanflight/src/main/interface/cli.c **** 
 729:../cleanflight/src/main/interface/cli.c **** // Check if a string's length is zero
 730:../cleanflight/src/main/interface/cli.c **** static bool isEmpty(const char *string)
 731:../cleanflight/src/main/interface/cli.c **** {
 4515              	 .loc 13 731 0
 4516              	 .cfi_startproc
 4517              	 
 4518              	 
 4519              	 
 4520 0000 80B4     	 push {r7}
 4521              	.LCFI315:
 4522              	 .cfi_def_cfa_offset 4
 4523              	 .cfi_offset 7,-4
 4524 0002 83B0     	 sub sp,sp,#12
 4525              	.LCFI316:
 4526              	 .cfi_def_cfa_offset 16
 4527 0004 00AF     	 add r7,sp,#0
 4528              	.LCFI317:
 4529              	 .cfi_def_cfa_register 7
 4530 0006 7860     	 str r0,[r7,#4]
 732:../cleanflight/src/main/interface/cli.c ****     return (string == NULL || *string == '\0') ? true : false;
 4531              	 .loc 13 732 0
 4532 0008 7B68     	 ldr r3,[r7,#4]
 4533 000a 002B     	 cmp r3,#0
 4534 000c 03D0     	 beq .L302
 4535              	 .loc 13 732 0 is_stmt 0 discriminator 2
 4536 000e 7B68     	 ldr r3,[r7,#4]
 4537 0010 1B78     	 ldrb r3,[r3]
 4538 0012 002B     	 cmp r3,#0
 4539 0014 01D1     	 bne .L303
 4540              	.L302:
 4541              	 .loc 13 732 0 discriminator 3
 4542 0016 0123     	 movs r3,#1
 4543 0018 00E0     	 b .L304
 4544              	.L303:
 4545              	 .loc 13 732 0 discriminator 4
 4546 001a 0023     	 movs r3,#0
 4547              	.L304:
 4548              	 .loc 13 732 0 discriminator 6
 4549 001c 03F00103 	 and r3,r3,#1
 4550 0020 DBB2     	 uxtb r3,r3
 733:../cleanflight/src/main/interface/cli.c **** }
 4551              	 .loc 13 733 0 is_stmt 1 discriminator 6
 4552 0022 1846     	 mov r0,r3
 4553 0024 0C37     	 adds r7,r7,#12
 4554              	.LCFI318:
 4555              	 .cfi_def_cfa_offset 4
 4556 0026 BD46     	 mov sp,r7
 4557              	.LCFI319:
 4558              	 .cfi_def_cfa_register 13
 4559              	 
 4560 0028 5DF8047B 	 ldr r7,[sp],#4
 4561              	.LCFI320:
 4562              	 .cfi_restore 7
 4563              	 .cfi_def_cfa_offset 0
 4564 002c 7047     	 bx lr
 4565              	 .cfi_endproc
 4566              	.LFE722:
 4568 002e 00BF     	 .section .rodata
 4569 0301 000000   	 .align 2
 4570              	.LC75:
 4571 0304 72786661 	 .ascii "rxfail %u %c %d\000"
 4571      696C2025 
 4571      75202563 
 4571      20256400 
 4572              	 .align 2
 4573              	.LC76:
 4574 0314 72786661 	 .ascii "rxfail %u %c\000"
 4574      696C2025 
 4574      75202563 
 4574      00
 4575              	 .section .text.printRxFailsafe,"ax",%progbits
 4576              	 .align 2
 4577              	 .thumb
 4578              	 .thumb_func
 4580              	printRxFailsafe:
 4581              	.LFB723:
 734:../cleanflight/src/main/interface/cli.c **** 
 735:../cleanflight/src/main/interface/cli.c **** static void printRxFailsafe(uint8_t dumpMask, const rxFailsafeChannelConfig_t *rxFailsafeChannelCon
 736:../cleanflight/src/main/interface/cli.c **** {
 4582              	 .loc 13 736 0
 4583              	 .cfi_startproc
 4584              	 
 4585              	 
 4586 0000 80B5     	 push {r7,lr}
 4587              	.LCFI321:
 4588              	 .cfi_def_cfa_offset 8
 4589              	 .cfi_offset 7,-8
 4590              	 .cfi_offset 14,-4
 4591 0002 8CB0     	 sub sp,sp,#48
 4592              	.LCFI322:
 4593              	 .cfi_def_cfa_offset 56
 4594 0004 02AF     	 add r7,sp,#8
 4595              	.LCFI323:
 4596              	 .cfi_def_cfa 7,48
 4597 0006 0346     	 mov r3,r0
 4598 0008 B960     	 str r1,[r7,#8]
 4599 000a 7A60     	 str r2,[r7,#4]
 4600 000c FB73     	 strb r3,[r7,#15]
 4601              	.LBB16:
 737:../cleanflight/src/main/interface/cli.c ****     // print out rxConfig failsafe settings
 738:../cleanflight/src/main/interface/cli.c ****     for (uint32_t channel = 0; channel < MAX_SUPPORTED_RC_CHANNEL_COUNT; channel++) {
 4602              	 .loc 13 738 0
 4603 000e 0023     	 movs r3,#0
 4604 0010 7B62     	 str r3,[r7,#36]
 4605 0012 78E0     	 b .L307
 4606              	.L310:
 4607              	.LBB17:
 739:../cleanflight/src/main/interface/cli.c ****         const rxFailsafeChannelConfig_t *channelFailsafeConfig = &rxFailsafeChannelConfigs[channel]
 4608              	 .loc 13 739 0
 4609 0014 7B6A     	 ldr r3,[r7,#36]
 4610 0016 5B00     	 lsls r3,r3,#1
 4611 0018 BA68     	 ldr r2,[r7,#8]
 4612 001a 1344     	 add r3,r3,r2
 4613 001c 3B62     	 str r3,[r7,#32]
 740:../cleanflight/src/main/interface/cli.c ****         const rxFailsafeChannelConfig_t *defaultChannelFailsafeConfig = &defaultRxFailsafeChannelCo
 4614              	 .loc 13 740 0
 4615 001e 7B6A     	 ldr r3,[r7,#36]
 4616 0020 5B00     	 lsls r3,r3,#1
 4617 0022 7A68     	 ldr r2,[r7,#4]
 4618 0024 1344     	 add r3,r3,r2
 4619 0026 FB61     	 str r3,[r7,#28]
 741:../cleanflight/src/main/interface/cli.c ****         const bool equalsDefault = !memcmp(channelFailsafeConfig, defaultChannelFailsafeConfig, siz
 4620              	 .loc 13 741 0
 4621 0028 386A     	 ldr r0,[r7,#32]
 4622 002a F969     	 ldr r1,[r7,#28]
 4623 002c 0222     	 movs r2,#2
 4624 002e FFF7FEFF 	 bl memcmp
 4625 0032 0346     	 mov r3,r0
 4626 0034 002B     	 cmp r3,#0
 4627 0036 0CBF     	 ite eq
 4628 0038 0123     	 moveq r3,#1
 4629 003a 0023     	 movne r3,#0
 4630 003c FB76     	 strb r3,[r7,#27]
 742:../cleanflight/src/main/interface/cli.c ****         const bool requireValue = channelFailsafeConfig->mode == RX_FAILSAFE_MODE_SET;
 4631              	 .loc 13 742 0
 4632 003e 3B6A     	 ldr r3,[r7,#32]
 4633 0040 1B78     	 ldrb r3,[r3]
 4634 0042 022B     	 cmp r3,#2
 4635 0044 0CBF     	 ite eq
 4636 0046 0123     	 moveq r3,#1
 4637 0048 0023     	 movne r3,#0
 4638 004a BB76     	 strb r3,[r7,#26]
 743:../cleanflight/src/main/interface/cli.c ****         if (requireValue) {
 4639              	 .loc 13 743 0
 4640 004c BB7E     	 ldrb r3,[r7,#26]
 4641 004e 002B     	 cmp r3,#0
 4642 0050 36D0     	 beq .L308
 4643              	.LBB18:
 744:../cleanflight/src/main/interface/cli.c ****             const char *format = "rxfail %u %c %d";
 4644              	 .loc 13 744 0
 4645 0052 304B     	 ldr r3,.L311
 4646 0054 7B61     	 str r3,[r7,#20]
 745:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 746:../cleanflight/src/main/interface/cli.c ****                 channel,
 747:../cleanflight/src/main/interface/cli.c ****                 rxFailsafeModeCharacters[defaultChannelFailsafeConfig->mode],
 4647              	 .loc 13 747 0
 4648 0056 FB69     	 ldr r3,[r7,#28]
 4649 0058 1B78     	 ldrb r3,[r3]
 4650 005a 1A46     	 mov r2,r3
 4651 005c 2E4B     	 ldr r3,.L311+4
 4652 005e 9B5C     	 ldrb r3,[r3,r2]
 745:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 4653              	 .loc 13 745 0
 4654 0060 1846     	 mov r0,r3
 748:../cleanflight/src/main/interface/cli.c ****                 RXFAIL_STEP_TO_CHANNEL_VALUE(defaultChannelFailsafeConfig->step)
 4655              	 .loc 13 748 0
 4656 0062 FB69     	 ldr r3,[r7,#28]
 4657 0064 5B78     	 ldrb r3,[r3,#1]
 4658 0066 1A46     	 mov r2,r3
 4659 0068 1346     	 mov r3,r2
 4660 006a 9B00     	 lsls r3,r3,#2
 4661 006c 1344     	 add r3,r3,r2
 4662 006e 9A00     	 lsls r2,r3,#2
 4663 0070 1344     	 add r3,r3,r2
 745:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 4664              	 .loc 13 745 0
 4665 0072 03F2EE23 	 addw r3,r3,#750
 4666 0076 F97B     	 ldrb r1,[r7,#15]
 4667 0078 FA7E     	 ldrb r2,[r7,#27]
 4668 007a 0090     	 str r0,[sp]
 4669 007c 0193     	 str r3,[sp,#4]
 4670 007e 0846     	 mov r0,r1
 4671 0080 1146     	 mov r1,r2
 4672 0082 7A69     	 ldr r2,[r7,#20]
 4673 0084 7B6A     	 ldr r3,[r7,#36]
 4674 0086 FFF7FEFF 	 bl cliDefaultPrintLinef
 749:../cleanflight/src/main/interface/cli.c ****             );
 750:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(dumpMask, equalsDefault, format,
 751:../cleanflight/src/main/interface/cli.c ****                 channel,
 752:../cleanflight/src/main/interface/cli.c ****                 rxFailsafeModeCharacters[channelFailsafeConfig->mode],
 4675              	 .loc 13 752 0
 4676 008a 3B6A     	 ldr r3,[r7,#32]
 4677 008c 1B78     	 ldrb r3,[r3]
 4678 008e 1A46     	 mov r2,r3
 4679 0090 214B     	 ldr r3,.L311+4
 4680 0092 9B5C     	 ldrb r3,[r3,r2]
 750:../cleanflight/src/main/interface/cli.c ****                 channel,
 4681              	 .loc 13 750 0
 4682 0094 1846     	 mov r0,r3
 753:../cleanflight/src/main/interface/cli.c ****                 RXFAIL_STEP_TO_CHANNEL_VALUE(channelFailsafeConfig->step)
 4683              	 .loc 13 753 0
 4684 0096 3B6A     	 ldr r3,[r7,#32]
 4685 0098 5B78     	 ldrb r3,[r3,#1]
 4686 009a 1A46     	 mov r2,r3
 4687 009c 1346     	 mov r3,r2
 4688 009e 9B00     	 lsls r3,r3,#2
 4689 00a0 1344     	 add r3,r3,r2
 4690 00a2 9A00     	 lsls r2,r3,#2
 4691 00a4 1344     	 add r3,r3,r2
 750:../cleanflight/src/main/interface/cli.c ****                 channel,
 4692              	 .loc 13 750 0
 4693 00a6 03F2EE23 	 addw r3,r3,#750
 4694 00aa F97B     	 ldrb r1,[r7,#15]
 4695 00ac FA7E     	 ldrb r2,[r7,#27]
 4696 00ae 0090     	 str r0,[sp]
 4697 00b0 0193     	 str r3,[sp,#4]
 4698 00b2 0846     	 mov r0,r1
 4699 00b4 1146     	 mov r1,r2
 4700 00b6 7A69     	 ldr r2,[r7,#20]
 4701 00b8 7B6A     	 ldr r3,[r7,#36]
 4702 00ba FFF7FEFF 	 bl cliDumpPrintLinef
 4703              	.LBE18:
 4704 00be 1FE0     	 b .L309
 4705              	.L308:
 4706              	.LBB19:
 754:../cleanflight/src/main/interface/cli.c ****             );
 755:../cleanflight/src/main/interface/cli.c ****         } else {
 756:../cleanflight/src/main/interface/cli.c ****             const char *format = "rxfail %u %c";
 4707              	 .loc 13 756 0
 4708 00c0 164B     	 ldr r3,.L311+8
 4709 00c2 3B61     	 str r3,[r7,#16]
 757:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 758:../cleanflight/src/main/interface/cli.c ****                 channel,
 759:../cleanflight/src/main/interface/cli.c ****                 rxFailsafeModeCharacters[defaultChannelFailsafeConfig->mode]
 4710              	 .loc 13 759 0
 4711 00c4 FB69     	 ldr r3,[r7,#28]
 4712 00c6 1B78     	 ldrb r3,[r3]
 4713 00c8 1A46     	 mov r2,r3
 4714 00ca 134B     	 ldr r3,.L311+4
 4715 00cc 9B5C     	 ldrb r3,[r3,r2]
 757:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 4716              	 .loc 13 757 0
 4717 00ce 1946     	 mov r1,r3
 4718 00d0 FA7B     	 ldrb r2,[r7,#15]
 4719 00d2 FB7E     	 ldrb r3,[r7,#27]
 4720 00d4 0091     	 str r1,[sp]
 4721 00d6 1046     	 mov r0,r2
 4722 00d8 1946     	 mov r1,r3
 4723 00da 3A69     	 ldr r2,[r7,#16]
 4724 00dc 7B6A     	 ldr r3,[r7,#36]
 4725 00de FFF7FEFF 	 bl cliDefaultPrintLinef
 760:../cleanflight/src/main/interface/cli.c ****             );
 761:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(dumpMask, equalsDefault, format,
 762:../cleanflight/src/main/interface/cli.c ****                 channel,
 763:../cleanflight/src/main/interface/cli.c ****                 rxFailsafeModeCharacters[channelFailsafeConfig->mode]
 4726              	 .loc 13 763 0
 4727 00e2 3B6A     	 ldr r3,[r7,#32]
 4728 00e4 1B78     	 ldrb r3,[r3]
 4729 00e6 1A46     	 mov r2,r3
 4730 00e8 0B4B     	 ldr r3,.L311+4
 4731 00ea 9B5C     	 ldrb r3,[r3,r2]
 761:../cleanflight/src/main/interface/cli.c ****                 channel,
 4732              	 .loc 13 761 0
 4733 00ec 1946     	 mov r1,r3
 4734 00ee FA7B     	 ldrb r2,[r7,#15]
 4735 00f0 FB7E     	 ldrb r3,[r7,#27]
 4736 00f2 0091     	 str r1,[sp]
 4737 00f4 1046     	 mov r0,r2
 4738 00f6 1946     	 mov r1,r3
 4739 00f8 3A69     	 ldr r2,[r7,#16]
 4740 00fa 7B6A     	 ldr r3,[r7,#36]
 4741 00fc FFF7FEFF 	 bl cliDumpPrintLinef
 4742              	.L309:
 4743              	.LBE19:
 4744              	.LBE17:
 738:../cleanflight/src/main/interface/cli.c ****         const rxFailsafeChannelConfig_t *channelFailsafeConfig = &rxFailsafeChannelConfigs[channel]
 4745              	 .loc 13 738 0 discriminator 2
 4746 0100 7B6A     	 ldr r3,[r7,#36]
 4747 0102 0133     	 adds r3,r3,#1
 4748 0104 7B62     	 str r3,[r7,#36]
 4749              	.L307:
 738:../cleanflight/src/main/interface/cli.c ****         const rxFailsafeChannelConfig_t *channelFailsafeConfig = &rxFailsafeChannelConfigs[channel]
 4750              	 .loc 13 738 0 is_stmt 0 discriminator 1
 4751 0106 7B6A     	 ldr r3,[r7,#36]
 4752 0108 112B     	 cmp r3,#17
 4753 010a 83D9     	 bls .L310
 4754              	.LBE16:
 764:../cleanflight/src/main/interface/cli.c ****             );
 765:../cleanflight/src/main/interface/cli.c ****         }
 766:../cleanflight/src/main/interface/cli.c ****     }
 767:../cleanflight/src/main/interface/cli.c **** }
 4755              	 .loc 13 767 0 is_stmt 1
 4756 010c 2837     	 adds r7,r7,#40
 4757              	.LCFI324:
 4758              	 .cfi_def_cfa_offset 8
 4759 010e BD46     	 mov sp,r7
 4760              	.LCFI325:
 4761              	 .cfi_def_cfa_register 13
 4762              	 
 4763 0110 80BD     	 pop {r7,pc}
 4764              	.L312:
 4765 0112 00BF     	 .align 2
 4766              	.L311:
 4767 0114 04030000 	 .word .LC75
 4768 0118 00000000 	 .word rxFailsafeModeCharacters
 4769 011c 14030000 	 .word .LC76
 4770              	 .cfi_endproc
 4771              	.LFE723:
 4773              	 .section .rodata
 4774 0321 000000   	 .align 2
 4775              	.LC77:
 4776 0324 56616C75 	 .ascii "Value out of range\000"
 4776      65206F75 
 4776      74206F66 
 4776      2072616E 
 4776      676500
 4777 0337 00       	 .align 2
 4778              	.LC78:
 4779 0338 6368616E 	 .ascii "channel\000"
 4779      6E656C00 
 4780              	 .section .text.cliRxFailsafe,"ax",%progbits
 4781              	 .align 2
 4782              	 .thumb
 4783              	 .thumb_func
 4785              	cliRxFailsafe:
 4786              	.LFB724:
 768:../cleanflight/src/main/interface/cli.c **** 
 769:../cleanflight/src/main/interface/cli.c **** static void cliRxFailsafe(char *cmdline)
 770:../cleanflight/src/main/interface/cli.c **** {
 4787              	 .loc 13 770 0
 4788              	 .cfi_startproc
 4789              	 
 4790              	 
 4791 0000 90B5     	 push {r4,r7,lr}
 4792              	.LCFI326:
 4793              	 .cfi_def_cfa_offset 12
 4794              	 .cfi_offset 4,-12
 4795              	 .cfi_offset 7,-8
 4796              	 .cfi_offset 14,-4
 4797 0002 8BB0     	 sub sp,sp,#44
 4798              	.LCFI327:
 4799              	 .cfi_def_cfa_offset 56
 4800 0004 00AF     	 add r7,sp,#0
 4801              	.LCFI328:
 4802              	 .cfi_def_cfa_register 7
 4803 0006 7860     	 str r0,[r7,#4]
 771:../cleanflight/src/main/interface/cli.c ****     uint8_t channel;
 772:../cleanflight/src/main/interface/cli.c ****     char buf[3];
 773:../cleanflight/src/main/interface/cli.c **** 
 774:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 4804              	 .loc 13 774 0
 4805 0008 7868     	 ldr r0,[r7,#4]
 4806 000a FFF7FEFF 	 bl isEmpty
 4807 000e 0346     	 mov r3,r0
 4808 0010 002B     	 cmp r3,#0
 4809 0012 1AD0     	 beq .L314
 775:../cleanflight/src/main/interface/cli.c ****         // print out rxConfig failsafe settings
 776:../cleanflight/src/main/interface/cli.c ****         for (channel = 0; channel < MAX_SUPPORTED_RC_CHANNEL_COUNT; channel++) {
 4810              	 .loc 13 776 0
 4811 0014 0023     	 movs r3,#0
 4812 0016 87F82730 	 strb r3,[r7,#39]
 4813 001a 11E0     	 b .L315
 4814              	.L316:
 777:../cleanflight/src/main/interface/cli.c ****             cliRxFailsafe(itoa(channel, buf, 10));
 4815              	 .loc 13 777 0 discriminator 3
 4816 001c 97F82720 	 ldrb r2,[r7,#39]
 4817 0020 07F10C03 	 add r3,r7,#12
 4818 0024 1046     	 mov r0,r2
 4819 0026 1946     	 mov r1,r3
 4820 0028 0A22     	 movs r2,#10
 4821 002a FFF7FEFF 	 bl itoa
 4822 002e 0346     	 mov r3,r0
 4823 0030 1846     	 mov r0,r3
 4824 0032 FFF7E5FF 	 bl cliRxFailsafe
 776:../cleanflight/src/main/interface/cli.c ****             cliRxFailsafe(itoa(channel, buf, 10));
 4825              	 .loc 13 776 0 discriminator 3
 4826 0036 97F82730 	 ldrb r3,[r7,#39]
 4827 003a 0133     	 adds r3,r3,#1
 4828 003c 87F82730 	 strb r3,[r7,#39]
 4829              	.L315:
 776:../cleanflight/src/main/interface/cli.c ****             cliRxFailsafe(itoa(channel, buf, 10));
 4830              	 .loc 13 776 0 is_stmt 0 discriminator 1
 4831 0040 97F82730 	 ldrb r3,[r7,#39]
 4832 0044 112B     	 cmp r3,#17
 4833 0046 E9D9     	 bls .L316
 4834 0048 C6E0     	 b .L313
 4835              	.L314:
 4836              	.LBB20:
 778:../cleanflight/src/main/interface/cli.c ****         }
 779:../cleanflight/src/main/interface/cli.c ****     } else {
 780:../cleanflight/src/main/interface/cli.c ****         const char *ptr = cmdline;
 4837              	 .loc 13 780 0 is_stmt 1
 4838 004a 7B68     	 ldr r3,[r7,#4]
 4839 004c 3B62     	 str r3,[r7,#32]
 781:../cleanflight/src/main/interface/cli.c ****         channel = atoi(ptr++);
 4840              	 .loc 13 781 0
 4841 004e 3B6A     	 ldr r3,[r7,#32]
 4842 0050 5A1C     	 adds r2,r3,#1
 4843 0052 3A62     	 str r2,[r7,#32]
 4844 0054 1846     	 mov r0,r3
 4845 0056 FFF7FEFF 	 bl atoi
 4846 005a 0346     	 mov r3,r0
 4847 005c 87F82730 	 strb r3,[r7,#39]
 782:../cleanflight/src/main/interface/cli.c ****         if ((channel < MAX_SUPPORTED_RC_CHANNEL_COUNT)) {
 4848              	 .loc 13 782 0
 4849 0060 97F82730 	 ldrb r3,[r7,#39]
 4850 0064 112B     	 cmp r3,#17
 4851 0066 00F2B180 	 bhi .L318
 4852              	.LBB21:
 783:../cleanflight/src/main/interface/cli.c **** 
 784:../cleanflight/src/main/interface/cli.c ****             rxFailsafeChannelConfig_t *channelFailsafeConfig = rxFailsafeChannelConfigsMutable(chan
 4853              	 .loc 13 784 0
 4854 006a 97F82730 	 ldrb r3,[r7,#39]
 4855 006e 1846     	 mov r0,r3
 4856 0070 FFF7FEFF 	 bl rxFailsafeChannelConfigsMutable
 4857 0074 F861     	 str r0,[r7,#28]
 785:../cleanflight/src/main/interface/cli.c **** 
 786:../cleanflight/src/main/interface/cli.c ****             const rxFailsafeChannelType_e type = (channel < NON_AUX_CHANNEL_COUNT) ? RX_FAILSAFE_TY
 4858              	 .loc 13 786 0
 4859 0076 97F82730 	 ldrb r3,[r7,#39]
 4860 007a 032B     	 cmp r3,#3
 4861 007c 8CBF     	 ite hi
 4862 007e 0123     	 movhi r3,#1
 4863 0080 0023     	 movls r3,#0
 4864 0082 DBB2     	 uxtb r3,r3
 4865 0084 FB76     	 strb r3,[r7,#27]
 787:../cleanflight/src/main/interface/cli.c ****             rxFailsafeChannelMode_e mode = channelFailsafeConfig->mode;
 4866              	 .loc 13 787 0
 4867 0086 FB69     	 ldr r3,[r7,#28]
 4868 0088 1B78     	 ldrb r3,[r3]
 4869 008a 87F82630 	 strb r3,[r7,#38]
 788:../cleanflight/src/main/interface/cli.c ****             bool requireValue = channelFailsafeConfig->mode == RX_FAILSAFE_MODE_SET;
 4870              	 .loc 13 788 0
 4871 008e FB69     	 ldr r3,[r7,#28]
 4872 0090 1B78     	 ldrb r3,[r3]
 4873 0092 022B     	 cmp r3,#2
 4874 0094 0CBF     	 ite eq
 4875 0096 0123     	 moveq r3,#1
 4876 0098 0023     	 movne r3,#0
 4877 009a 87F82530 	 strb r3,[r7,#37]
 789:../cleanflight/src/main/interface/cli.c **** 
 790:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 4878              	 .loc 13 790 0
 4879 009e 386A     	 ldr r0,[r7,#32]
 4880 00a0 FFF7FEFF 	 bl nextArg
 4881 00a4 3862     	 str r0,[r7,#32]
 791:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 4882              	 .loc 13 791 0
 4883 00a6 3B6A     	 ldr r3,[r7,#32]
 4884 00a8 002B     	 cmp r3,#0
 4885 00aa 6AD0     	 beq .L319
 4886              	.LBB22:
 792:../cleanflight/src/main/interface/cli.c ****                 const char *p = strchr(rxFailsafeModeCharacters, *(ptr));
 4887              	 .loc 13 792 0
 4888 00ac 3B6A     	 ldr r3,[r7,#32]
 4889 00ae 1B78     	 ldrb r3,[r3]
 4890 00b0 4B48     	 ldr r0,.L331
 4891 00b2 1946     	 mov r1,r3
 4892 00b4 FFF7FEFF 	 bl strchr
 4893 00b8 7861     	 str r0,[r7,#20]
 793:../cleanflight/src/main/interface/cli.c ****                 if (p) {
 4894              	 .loc 13 793 0
 4895 00ba 7B69     	 ldr r3,[r7,#20]
 4896 00bc 002B     	 cmp r3,#0
 4897 00be 0FD0     	 beq .L320
 4898              	.LBB23:
 794:../cleanflight/src/main/interface/cli.c ****                     const uint8_t requestedMode = p - rxFailsafeModeCharacters;
 4899              	 .loc 13 794 0
 4900 00c0 7B69     	 ldr r3,[r7,#20]
 4901 00c2 474A     	 ldr r2,.L331
 4902 00c4 9B1A     	 subs r3,r3,r2
 4903 00c6 FB74     	 strb r3,[r7,#19]
 795:../cleanflight/src/main/interface/cli.c ****                     mode = rxFailsafeModesTable[type][requestedMode];
 4904              	 .loc 13 795 0
 4905 00c8 FA7E     	 ldrb r2,[r7,#27]
 4906 00ca F97C     	 ldrb r1,[r7,#19]
 4907 00cc 4548     	 ldr r0,.L331+4
 4908 00ce 1346     	 mov r3,r2
 4909 00d0 5B00     	 lsls r3,r3,#1
 4910 00d2 1344     	 add r3,r3,r2
 4911 00d4 0B44     	 add r3,r3,r1
 4912 00d6 0344     	 add r3,r3,r0
 4913 00d8 1B78     	 ldrb r3,[r3]
 4914 00da 87F82630 	 strb r3,[r7,#38]
 4915              	.LBE23:
 4916 00de 02E0     	 b .L321
 4917              	.L320:
 796:../cleanflight/src/main/interface/cli.c ****                 } else {
 797:../cleanflight/src/main/interface/cli.c ****                     mode = RX_FAILSAFE_MODE_INVALID;
 4918              	 .loc 13 797 0
 4919 00e0 0323     	 movs r3,#3
 4920 00e2 87F82630 	 strb r3,[r7,#38]
 4921              	.L321:
 798:../cleanflight/src/main/interface/cli.c ****                 }
 799:../cleanflight/src/main/interface/cli.c ****                 if (mode == RX_FAILSAFE_MODE_INVALID) {
 4922              	 .loc 13 799 0
 4923 00e6 97F82630 	 ldrb r3,[r7,#38]
 4924 00ea 032B     	 cmp r3,#3
 4925 00ec 02D1     	 bne .L322
 800:../cleanflight/src/main/interface/cli.c ****                     cliShowParseError();
 4926              	 .loc 13 800 0
 4927 00ee FFF7FEFF 	 bl cliShowParseError
 801:../cleanflight/src/main/interface/cli.c ****                     return;
 4928              	 .loc 13 801 0
 4929 00f2 71E0     	 b .L313
 4930              	.L322:
 802:../cleanflight/src/main/interface/cli.c ****                 }
 803:../cleanflight/src/main/interface/cli.c **** 
 804:../cleanflight/src/main/interface/cli.c ****                 requireValue = mode == RX_FAILSAFE_MODE_SET;
 4931              	 .loc 13 804 0
 4932 00f4 97F82630 	 ldrb r3,[r7,#38]
 4933 00f8 022B     	 cmp r3,#2
 4934 00fa 0CBF     	 ite eq
 4935 00fc 0123     	 moveq r3,#1
 4936 00fe 0023     	 movne r3,#0
 4937 0100 87F82530 	 strb r3,[r7,#37]
 805:../cleanflight/src/main/interface/cli.c **** 
 806:../cleanflight/src/main/interface/cli.c ****                 ptr = nextArg(ptr);
 4938              	 .loc 13 806 0
 4939 0104 386A     	 ldr r0,[r7,#32]
 4940 0106 FFF7FEFF 	 bl nextArg
 4941 010a 3862     	 str r0,[r7,#32]
 807:../cleanflight/src/main/interface/cli.c ****                 if (ptr) {
 4942              	 .loc 13 807 0
 4943 010c 3B6A     	 ldr r3,[r7,#32]
 4944 010e 002B     	 cmp r3,#0
 4945 0110 2CD0     	 beq .L324
 4946              	.LBB24:
 808:../cleanflight/src/main/interface/cli.c ****                     if (!requireValue) {
 4947              	 .loc 13 808 0
 4948 0112 97F82530 	 ldrb r3,[r7,#37]
 4949 0116 83F00103 	 eor r3,r3,#1
 4950 011a DBB2     	 uxtb r3,r3
 4951 011c 002B     	 cmp r3,#0
 4952 011e 02D0     	 beq .L325
 809:../cleanflight/src/main/interface/cli.c ****                         cliShowParseError();
 4953              	 .loc 13 809 0
 4954 0120 FFF7FEFF 	 bl cliShowParseError
 810:../cleanflight/src/main/interface/cli.c ****                         return;
 4955              	 .loc 13 810 0
 4956 0124 58E0     	 b .L313
 4957              	.L325:
 811:../cleanflight/src/main/interface/cli.c ****                     }
 812:../cleanflight/src/main/interface/cli.c ****                     uint16_t value = atoi(ptr);
 4958              	 .loc 13 812 0
 4959 0126 386A     	 ldr r0,[r7,#32]
 4960 0128 FFF7FEFF 	 bl atoi
 4961 012c 0346     	 mov r3,r0
 4962 012e 3B82     	 strh r3,[r7,#16]
 813:../cleanflight/src/main/interface/cli.c ****                     value = CHANNEL_VALUE_TO_RXFAIL_STEP(value);
 4963              	 .loc 13 813 0
 4964 0130 3B8A     	 ldrh r3,[r7,#16]
 4965 0132 1846     	 mov r0,r3
 4966 0134 40F2EE21 	 movw r1,#750
 4967 0138 40F6CA02 	 movw r2,#2250
 4968 013c FFF7FEFF 	 bl constrain
 4969 0140 0346     	 mov r3,r0
 4970 0142 A3F2EE23 	 subw r3,r3,#750
 4971 0146 284A     	 ldr r2,.L331+8
 4972 0148 82FB0312 	 smull r1,r2,r2,r3
 4973 014c D210     	 asrs r2,r2,#3
 4974 014e DB17     	 asrs r3,r3,#31
 4975 0150 D31A     	 subs r3,r2,r3
 4976 0152 3B82     	 strh r3,[r7,#16]
 814:../cleanflight/src/main/interface/cli.c ****                     if (value > MAX_RXFAIL_RANGE_STEP) {
 4977              	 .loc 13 814 0
 4978 0154 3B8A     	 ldrh r3,[r7,#16]
 4979 0156 3C2B     	 cmp r3,#60
 4980 0158 03D9     	 bls .L326
 815:../cleanflight/src/main/interface/cli.c ****                         cliPrintLine("Value out of range");
 4981              	 .loc 13 815 0
 4982 015a 2448     	 ldr r0,.L331+12
 4983 015c FFF7FEFF 	 bl cliPrintLine
 816:../cleanflight/src/main/interface/cli.c ****                         return;
 4984              	 .loc 13 816 0
 4985 0160 3AE0     	 b .L313
 4986              	.L326:
 817:../cleanflight/src/main/interface/cli.c ****                     }
 818:../cleanflight/src/main/interface/cli.c **** 
 819:../cleanflight/src/main/interface/cli.c ****                     channelFailsafeConfig->step = value;
 4987              	 .loc 13 819 0
 4988 0162 3B8A     	 ldrh r3,[r7,#16]
 4989 0164 DAB2     	 uxtb r2,r3
 4990 0166 FB69     	 ldr r3,[r7,#28]
 4991 0168 5A70     	 strb r2,[r3,#1]
 4992              	.LBE24:
 4993 016a 06E0     	 b .L327
 4994              	.L324:
 820:../cleanflight/src/main/interface/cli.c ****                 } else if (requireValue) {
 4995              	 .loc 13 820 0
 4996 016c 97F82530 	 ldrb r3,[r7,#37]
 4997 0170 002B     	 cmp r3,#0
 4998 0172 02D0     	 beq .L327
 821:../cleanflight/src/main/interface/cli.c ****                     cliShowParseError();
 4999              	 .loc 13 821 0
 5000 0174 FFF7FEFF 	 bl cliShowParseError
 822:../cleanflight/src/main/interface/cli.c ****                     return;
 5001              	 .loc 13 822 0
 5002 0178 2EE0     	 b .L313
 5003              	.L327:
 823:../cleanflight/src/main/interface/cli.c ****                 }
 824:../cleanflight/src/main/interface/cli.c ****                 channelFailsafeConfig->mode = mode;
 5004              	 .loc 13 824 0
 5005 017a FB69     	 ldr r3,[r7,#28]
 5006 017c 97F82620 	 ldrb r2,[r7,#38]
 5007 0180 1A70     	 strb r2,[r3]
 5008              	.L319:
 5009              	.LBE22:
 825:../cleanflight/src/main/interface/cli.c ****             }
 826:../cleanflight/src/main/interface/cli.c **** 
 827:../cleanflight/src/main/interface/cli.c ****             char modeCharacter = rxFailsafeModeCharacters[channelFailsafeConfig->mode];
 5010              	 .loc 13 827 0
 5011 0182 FB69     	 ldr r3,[r7,#28]
 5012 0184 1B78     	 ldrb r3,[r3]
 5013 0186 1A46     	 mov r2,r3
 5014 0188 154B     	 ldr r3,.L331
 5015 018a 9B5C     	 ldrb r3,[r3,r2]
 5016 018c FB73     	 strb r3,[r7,#15]
 828:../cleanflight/src/main/interface/cli.c **** 
 829:../cleanflight/src/main/interface/cli.c ****             // double use of cliPrintf below
 830:../cleanflight/src/main/interface/cli.c ****             // 1. acknowledge interpretation on command,
 831:../cleanflight/src/main/interface/cli.c ****             // 2. query current setting on single item,
 832:../cleanflight/src/main/interface/cli.c **** 
 833:../cleanflight/src/main/interface/cli.c ****             if (requireValue) {
 5017              	 .loc 13 833 0
 5018 018e 97F82530 	 ldrb r3,[r7,#37]
 5019 0192 002B     	 cmp r3,#0
 5020 0194 11D0     	 beq .L328
 834:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("rxfail %u %c %d",
 5021              	 .loc 13 834 0
 5022 0196 97F82710 	 ldrb r1,[r7,#39]
 5023 019a FC7B     	 ldrb r4,[r7,#15]
 835:../cleanflight/src/main/interface/cli.c ****                     channel,
 836:../cleanflight/src/main/interface/cli.c ****                     modeCharacter,
 837:../cleanflight/src/main/interface/cli.c ****                     RXFAIL_STEP_TO_CHANNEL_VALUE(channelFailsafeConfig->step)
 5024              	 .loc 13 837 0
 5025 019c FB69     	 ldr r3,[r7,#28]
 5026 019e 5B78     	 ldrb r3,[r3,#1]
 5027 01a0 1A46     	 mov r2,r3
 5028 01a2 1346     	 mov r3,r2
 5029 01a4 9B00     	 lsls r3,r3,#2
 5030 01a6 1344     	 add r3,r3,r2
 5031 01a8 9A00     	 lsls r2,r3,#2
 5032 01aa 1344     	 add r3,r3,r2
 834:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("rxfail %u %c %d",
 5033              	 .loc 13 834 0
 5034 01ac 03F2EE23 	 addw r3,r3,#750
 5035 01b0 0F48     	 ldr r0,.L331+16
 5036 01b2 2246     	 mov r2,r4
 5037 01b4 FFF7FEFF 	 bl cliPrintLinef
 5038 01b8 0EE0     	 b .L317
 5039              	.L328:
 838:../cleanflight/src/main/interface/cli.c ****                 );
 839:../cleanflight/src/main/interface/cli.c ****             } else {
 840:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("rxfail %u %c",
 5040              	 .loc 13 840 0
 5041 01ba 97F82720 	 ldrb r2,[r7,#39]
 5042 01be FB7B     	 ldrb r3,[r7,#15]
 5043 01c0 0C48     	 ldr r0,.L331+20
 5044 01c2 1146     	 mov r1,r2
 5045 01c4 1A46     	 mov r2,r3
 5046 01c6 FFF7FEFF 	 bl cliPrintLinef
 5047              	.LBE21:
 5048 01ca 05E0     	 b .L317
 5049              	.L318:
 841:../cleanflight/src/main/interface/cli.c ****                     channel,
 842:../cleanflight/src/main/interface/cli.c ****                     modeCharacter
 843:../cleanflight/src/main/interface/cli.c ****                 );
 844:../cleanflight/src/main/interface/cli.c ****             }
 845:../cleanflight/src/main/interface/cli.c ****         } else {
 846:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("channel", 0, MAX_SUPPORTED_RC_CHANNEL_COUNT - 1);
 5050              	 .loc 13 846 0
 5051 01cc 0A48     	 ldr r0,.L331+24
 5052 01ce 0021     	 movs r1,#0
 5053 01d0 1122     	 movs r2,#17
 5054 01d2 FFF7FEFF 	 bl cliShowArgumentRangeError
 5055              	.LBE20:
 5056 01d6 FFE7     	 b .L313
 5057              	.L317:
 5058              	.L313:
 847:../cleanflight/src/main/interface/cli.c ****         }
 848:../cleanflight/src/main/interface/cli.c ****     }
 849:../cleanflight/src/main/interface/cli.c **** }
 5059              	 .loc 13 849 0
 5060 01d8 2C37     	 adds r7,r7,#44
 5061              	.LCFI329:
 5062              	 .cfi_def_cfa_offset 12
 5063 01da BD46     	 mov sp,r7
 5064              	.LCFI330:
 5065              	 .cfi_def_cfa_register 13
 5066              	 
 5067 01dc 90BD     	 pop {r4,r7,pc}
 5068              	.L332:
 5069 01de 00BF     	 .align 2
 5070              	.L331:
 5071 01e0 00000000 	 .word rxFailsafeModeCharacters
 5072 01e4 00000000 	 .word rxFailsafeModesTable
 5073 01e8 1F85EB51 	 .word 1374389535
 5074 01ec 24030000 	 .word .LC77
 5075 01f0 04030000 	 .word .LC75
 5076 01f4 14030000 	 .word .LC76
 5077 01f8 38030000 	 .word .LC78
 5078              	 .cfi_endproc
 5079              	.LFE724:
 5081              	 .section .rodata
 5082              	 .align 2
 5083              	.LC79:
 5084 0340 61757820 	 .ascii "aux %u %u %u %u %u %u %u\000"
 5084      25752025 
 5084      75202575 
 5084      20257520 
 5084      25752025 
 5085              	 .section .text.printAux,"ax",%progbits
 5086              	 .align 2
 5087              	 .thumb
 5088              	 .thumb_func
 5090              	printAux:
 5091              	.LFB725:
 850:../cleanflight/src/main/interface/cli.c **** 
 851:../cleanflight/src/main/interface/cli.c **** static void printAux(uint8_t dumpMask, const modeActivationCondition_t *modeActivationConditions, c
 852:../cleanflight/src/main/interface/cli.c **** {
 5092              	 .loc 13 852 0
 5093              	 .cfi_startproc
 5094              	 
 5095              	 
 5096 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 5097              	.LCFI331:
 5098              	 .cfi_def_cfa_offset 20
 5099              	 .cfi_offset 4,-20
 5100              	 .cfi_offset 5,-16
 5101              	 .cfi_offset 6,-12
 5102              	 .cfi_offset 7,-8
 5103              	 .cfi_offset 14,-4
 5104 0002 95B0     	 sub sp,sp,#84
 5105              	.LCFI332:
 5106              	 .cfi_def_cfa_offset 104
 5107 0004 06AF     	 add r7,sp,#24
 5108              	.LCFI333:
 5109              	 .cfi_def_cfa 7,80
 5110 0006 0346     	 mov r3,r0
 5111 0008 B960     	 str r1,[r7,#8]
 5112 000a 7A60     	 str r2,[r7,#4]
 5113 000c FB73     	 strb r3,[r7,#15]
 853:../cleanflight/src/main/interface/cli.c ****     const char *format = "aux %u %u %u %u %u %u %u";
 5114              	 .loc 13 853 0
 5115 000e 5B4B     	 ldr r3,.L342
 5116 0010 FB62     	 str r3,[r7,#44]
 5117              	.LBB25:
 854:../cleanflight/src/main/interface/cli.c ****     // print out aux channel settings
 855:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < MAX_MODE_ACTIVATION_CONDITION_COUNT; i++) {
 5118              	 .loc 13 855 0
 5119 0012 0023     	 movs r3,#0
 5120 0014 7B63     	 str r3,[r7,#52]
 5121 0016 AAE0     	 b .L334
 5122              	.L341:
 5123              	.LBB26:
 856:../cleanflight/src/main/interface/cli.c ****         const modeActivationCondition_t *mac = &modeActivationConditions[i];
 5124              	 .loc 13 856 0
 5125 0018 7A6B     	 ldr r2,[r7,#52]
 5126 001a 1346     	 mov r3,r2
 5127 001c 5B00     	 lsls r3,r3,#1
 5128 001e 1344     	 add r3,r3,r2
 5129 0020 5B00     	 lsls r3,r3,#1
 5130 0022 1A46     	 mov r2,r3
 5131 0024 BB68     	 ldr r3,[r7,#8]
 5132 0026 1344     	 add r3,r3,r2
 5133 0028 BB62     	 str r3,[r7,#40]
 857:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
 5134              	 .loc 13 857 0
 5135 002a 0023     	 movs r3,#0
 5136 002c 87F83330 	 strb r3,[r7,#51]
 858:../cleanflight/src/main/interface/cli.c ****         if (defaultModeActivationConditions) {
 5137              	 .loc 13 858 0
 5138 0030 7B68     	 ldr r3,[r7,#4]
 5139 0032 002B     	 cmp r3,#0
 5140 0034 56D0     	 beq .L335
 5141              	.LBB27:
 859:../cleanflight/src/main/interface/cli.c ****             const modeActivationCondition_t *macDefault = &defaultModeActivationConditions[i];
 5142              	 .loc 13 859 0
 5143 0036 7A6B     	 ldr r2,[r7,#52]
 5144 0038 1346     	 mov r3,r2
 5145 003a 5B00     	 lsls r3,r3,#1
 5146 003c 1344     	 add r3,r3,r2
 5147 003e 5B00     	 lsls r3,r3,#1
 5148 0040 1A46     	 mov r2,r3
 5149 0042 7B68     	 ldr r3,[r7,#4]
 5150 0044 1344     	 add r3,r3,r2
 5151 0046 7B62     	 str r3,[r7,#36]
 860:../cleanflight/src/main/interface/cli.c ****             equalsDefault = !memcmp(mac, macDefault, sizeof(*mac));
 5152              	 .loc 13 860 0
 5153 0048 B86A     	 ldr r0,[r7,#40]
 5154 004a 796A     	 ldr r1,[r7,#36]
 5155 004c 0622     	 movs r2,#6
 5156 004e FFF7FEFF 	 bl memcmp
 5157 0052 0346     	 mov r3,r0
 5158 0054 002B     	 cmp r3,#0
 5159 0056 0CBF     	 ite eq
 5160 0058 0123     	 moveq r3,#1
 5161 005a 0023     	 movne r3,#0
 5162 005c 87F83330 	 strb r3,[r7,#51]
 861:../cleanflight/src/main/interface/cli.c ****             const box_t *box = findBoxByBoxId(macDefault->modeId);
 5163              	 .loc 13 861 0
 5164 0060 7B6A     	 ldr r3,[r7,#36]
 5165 0062 1B78     	 ldrb r3,[r3]
 5166 0064 1846     	 mov r0,r3
 5167 0066 FFF7FEFF 	 bl findBoxByBoxId
 5168 006a 3862     	 str r0,[r7,#32]
 862:../cleanflight/src/main/interface/cli.c ****             const box_t *linkedTo = findBoxByBoxId(macDefault->linkedTo);
 5169              	 .loc 13 862 0
 5170 006c 7B6A     	 ldr r3,[r7,#36]
 5171 006e 5B79     	 ldrb r3,[r3,#5]
 5172 0070 1846     	 mov r0,r3
 5173 0072 FFF7FEFF 	 bl findBoxByBoxId
 5174 0076 F861     	 str r0,[r7,#28]
 863:../cleanflight/src/main/interface/cli.c ****             if (box) {
 5175              	 .loc 13 863 0
 5176 0078 3B6A     	 ldr r3,[r7,#32]
 5177 007a 002B     	 cmp r3,#0
 5178 007c 32D0     	 beq .L335
 864:../cleanflight/src/main/interface/cli.c ****                 cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 865:../cleanflight/src/main/interface/cli.c ****                     i,
 866:../cleanflight/src/main/interface/cli.c ****                     box->permanentId,
 5179              	 .loc 13 866 0
 5180 007e 3B6A     	 ldr r3,[r7,#32]
 5181 0080 5B79     	 ldrb r3,[r3,#5]
 864:../cleanflight/src/main/interface/cli.c ****                 cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 5182              	 .loc 13 864 0
 5183 0082 9E46     	 mov lr,r3
 867:../cleanflight/src/main/interface/cli.c ****                     macDefault->auxChannelIndex,
 5184              	 .loc 13 867 0
 5185 0084 7B6A     	 ldr r3,[r7,#36]
 5186 0086 5B78     	 ldrb r3,[r3,#1]
 864:../cleanflight/src/main/interface/cli.c ****                 cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 5187              	 .loc 13 864 0
 5188 0088 1E46     	 mov r6,r3
 868:../cleanflight/src/main/interface/cli.c ****                     MODE_STEP_TO_CHANNEL_VALUE(macDefault->range.startStep),
 5189              	 .loc 13 868 0
 5190 008a 7B6A     	 ldr r3,[r7,#36]
 5191 008c 9B78     	 ldrb r3,[r3,#2]
 5192 008e 1A46     	 mov r2,r3
 5193 0090 1346     	 mov r3,r2
 5194 0092 9B00     	 lsls r3,r3,#2
 5195 0094 1344     	 add r3,r3,r2
 5196 0096 9A00     	 lsls r2,r3,#2
 5197 0098 1344     	 add r3,r3,r2
 864:../cleanflight/src/main/interface/cli.c ****                 cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 5198              	 .loc 13 864 0
 5199 009a 03F56172 	 add r2,r3,#900
 869:../cleanflight/src/main/interface/cli.c ****                     MODE_STEP_TO_CHANNEL_VALUE(macDefault->range.endStep),
 5200              	 .loc 13 869 0
 5201 009e 7B6A     	 ldr r3,[r7,#36]
 5202 00a0 DB78     	 ldrb r3,[r3,#3]
 5203 00a2 1946     	 mov r1,r3
 5204 00a4 0B46     	 mov r3,r1
 5205 00a6 9B00     	 lsls r3,r3,#2
 5206 00a8 0B44     	 add r3,r3,r1
 5207 00aa 9900     	 lsls r1,r3,#2
 5208 00ac 0B44     	 add r3,r3,r1
 864:../cleanflight/src/main/interface/cli.c ****                     i,
 5209              	 .loc 13 864 0
 5210 00ae 03F56173 	 add r3,r3,#900
 870:../cleanflight/src/main/interface/cli.c ****                     macDefault->modeLogic,
 5211              	 .loc 13 870 0
 5212 00b2 796A     	 ldr r1,[r7,#36]
 5213 00b4 0979     	 ldrb r1,[r1,#4]
 864:../cleanflight/src/main/interface/cli.c ****                     i,
 5214              	 .loc 13 864 0
 5215 00b6 0D46     	 mov r5,r1
 5216 00b8 F969     	 ldr r1,[r7,#28]
 5217 00ba 0029     	 cmp r1,#0
 5218 00bc 02D0     	 beq .L336
 871:../cleanflight/src/main/interface/cli.c ****                     linkedTo ? linkedTo->permanentId : 0
 5219              	 .loc 13 871 0 discriminator 1
 5220 00be F969     	 ldr r1,[r7,#28]
 5221 00c0 4979     	 ldrb r1,[r1,#5]
 5222 00c2 00E0     	 b .L337
 5223              	.L336:
 864:../cleanflight/src/main/interface/cli.c ****                     i,
 5224              	 .loc 13 864 0 discriminator 2
 5225 00c4 0021     	 movs r1,#0
 5226              	.L337:
 864:../cleanflight/src/main/interface/cli.c ****                     i,
 5227              	 .loc 13 864 0 is_stmt 0 discriminator 4
 5228 00c6 F87B     	 ldrb r0,[r7,#15]
 5229 00c8 97F83340 	 ldrb r4,[r7,#51]
 5230 00cc CDF800E0 	 str lr,[sp]
 5231 00d0 0196     	 str r6,[sp,#4]
 5232 00d2 0292     	 str r2,[sp,#8]
 5233 00d4 0393     	 str r3,[sp,#12]
 5234 00d6 0495     	 str r5,[sp,#16]
 5235 00d8 0591     	 str r1,[sp,#20]
 5236 00da 2146     	 mov r1,r4
 5237 00dc FA6A     	 ldr r2,[r7,#44]
 5238 00de 7B6B     	 ldr r3,[r7,#52]
 5239 00e0 FFF7FEFF 	 bl cliDefaultPrintLinef
 5240              	.L335:
 5241              	.LBE27:
 872:../cleanflight/src/main/interface/cli.c ****                 );
 873:../cleanflight/src/main/interface/cli.c ****             }
 874:../cleanflight/src/main/interface/cli.c ****         }
 875:../cleanflight/src/main/interface/cli.c ****         const box_t *box = findBoxByBoxId(mac->modeId);
 5242              	 .loc 13 875 0 is_stmt 1
 5243 00e4 BB6A     	 ldr r3,[r7,#40]
 5244 00e6 1B78     	 ldrb r3,[r3]
 5245 00e8 1846     	 mov r0,r3
 5246 00ea FFF7FEFF 	 bl findBoxByBoxId
 5247 00ee B861     	 str r0,[r7,#24]
 876:../cleanflight/src/main/interface/cli.c ****         const box_t *linkedTo = findBoxByBoxId(mac->linkedTo);
 5248              	 .loc 13 876 0
 5249 00f0 BB6A     	 ldr r3,[r7,#40]
 5250 00f2 5B79     	 ldrb r3,[r3,#5]
 5251 00f4 1846     	 mov r0,r3
 5252 00f6 FFF7FEFF 	 bl findBoxByBoxId
 5253 00fa 7861     	 str r0,[r7,#20]
 877:../cleanflight/src/main/interface/cli.c ****         if (box) {
 5254              	 .loc 13 877 0
 5255 00fc BB69     	 ldr r3,[r7,#24]
 5256 00fe 002B     	 cmp r3,#0
 5257 0100 32D0     	 beq .L338
 878:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(dumpMask, equalsDefault, format,
 879:../cleanflight/src/main/interface/cli.c ****                 i,
 880:../cleanflight/src/main/interface/cli.c ****                 box->permanentId,
 5258              	 .loc 13 880 0
 5259 0102 BB69     	 ldr r3,[r7,#24]
 5260 0104 5B79     	 ldrb r3,[r3,#5]
 878:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(dumpMask, equalsDefault, format,
 5261              	 .loc 13 878 0
 5262 0106 9E46     	 mov lr,r3
 881:../cleanflight/src/main/interface/cli.c ****                 mac->auxChannelIndex,
 5263              	 .loc 13 881 0
 5264 0108 BB6A     	 ldr r3,[r7,#40]
 5265 010a 5B78     	 ldrb r3,[r3,#1]
 878:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(dumpMask, equalsDefault, format,
 5266              	 .loc 13 878 0
 5267 010c 1E46     	 mov r6,r3
 882:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(mac->range.startStep),
 5268              	 .loc 13 882 0
 5269 010e BB6A     	 ldr r3,[r7,#40]
 5270 0110 9B78     	 ldrb r3,[r3,#2]
 5271 0112 1A46     	 mov r2,r3
 5272 0114 1346     	 mov r3,r2
 5273 0116 9B00     	 lsls r3,r3,#2
 5274 0118 1344     	 add r3,r3,r2
 5275 011a 9A00     	 lsls r2,r3,#2
 5276 011c 1344     	 add r3,r3,r2
 878:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(dumpMask, equalsDefault, format,
 5277              	 .loc 13 878 0
 5278 011e 03F56172 	 add r2,r3,#900
 883:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(mac->range.endStep),
 5279              	 .loc 13 883 0
 5280 0122 BB6A     	 ldr r3,[r7,#40]
 5281 0124 DB78     	 ldrb r3,[r3,#3]
 5282 0126 1946     	 mov r1,r3
 5283 0128 0B46     	 mov r3,r1
 5284 012a 9B00     	 lsls r3,r3,#2
 5285 012c 0B44     	 add r3,r3,r1
 5286 012e 9900     	 lsls r1,r3,#2
 5287 0130 0B44     	 add r3,r3,r1
 878:../cleanflight/src/main/interface/cli.c ****                 i,
 5288              	 .loc 13 878 0
 5289 0132 03F56173 	 add r3,r3,#900
 884:../cleanflight/src/main/interface/cli.c ****                 mac->modeLogic,
 5290              	 .loc 13 884 0
 5291 0136 B96A     	 ldr r1,[r7,#40]
 5292 0138 0979     	 ldrb r1,[r1,#4]
 878:../cleanflight/src/main/interface/cli.c ****                 i,
 5293              	 .loc 13 878 0
 5294 013a 0D46     	 mov r5,r1
 5295 013c 7969     	 ldr r1,[r7,#20]
 5296 013e 0029     	 cmp r1,#0
 5297 0140 02D0     	 beq .L339
 885:../cleanflight/src/main/interface/cli.c ****                 linkedTo ? linkedTo->permanentId : 0
 5298              	 .loc 13 885 0 discriminator 1
 5299 0142 7969     	 ldr r1,[r7,#20]
 5300 0144 4979     	 ldrb r1,[r1,#5]
 5301 0146 00E0     	 b .L340
 5302              	.L339:
 878:../cleanflight/src/main/interface/cli.c ****                 i,
 5303              	 .loc 13 878 0 discriminator 2
 5304 0148 0021     	 movs r1,#0
 5305              	.L340:
 878:../cleanflight/src/main/interface/cli.c ****                 i,
 5306              	 .loc 13 878 0 is_stmt 0 discriminator 4
 5307 014a F87B     	 ldrb r0,[r7,#15]
 5308 014c 97F83340 	 ldrb r4,[r7,#51]
 5309 0150 CDF800E0 	 str lr,[sp]
 5310 0154 0196     	 str r6,[sp,#4]
 5311 0156 0292     	 str r2,[sp,#8]
 5312 0158 0393     	 str r3,[sp,#12]
 5313 015a 0495     	 str r5,[sp,#16]
 5314 015c 0591     	 str r1,[sp,#20]
 5315 015e 2146     	 mov r1,r4
 5316 0160 FA6A     	 ldr r2,[r7,#44]
 5317 0162 7B6B     	 ldr r3,[r7,#52]
 5318 0164 FFF7FEFF 	 bl cliDumpPrintLinef
 5319              	.L338:
 5320              	.LBE26:
 855:../cleanflight/src/main/interface/cli.c ****         const modeActivationCondition_t *mac = &modeActivationConditions[i];
 5321              	 .loc 13 855 0 is_stmt 1 discriminator 2
 5322 0168 7B6B     	 ldr r3,[r7,#52]
 5323 016a 0133     	 adds r3,r3,#1
 5324 016c 7B63     	 str r3,[r7,#52]
 5325              	.L334:
 855:../cleanflight/src/main/interface/cli.c ****         const modeActivationCondition_t *mac = &modeActivationConditions[i];
 5326              	 .loc 13 855 0 is_stmt 0 discriminator 1
 5327 016e 7B6B     	 ldr r3,[r7,#52]
 5328 0170 132B     	 cmp r3,#19
 5329 0172 7FF651AF 	 bls .L341
 5330              	.LBE25:
 886:../cleanflight/src/main/interface/cli.c ****             );
 887:../cleanflight/src/main/interface/cli.c ****         }
 888:../cleanflight/src/main/interface/cli.c ****     }
 889:../cleanflight/src/main/interface/cli.c **** }
 5331              	 .loc 13 889 0 is_stmt 1
 5332 0176 3C37     	 adds r7,r7,#60
 5333              	.LCFI334:
 5334              	 .cfi_def_cfa_offset 20
 5335 0178 BD46     	 mov sp,r7
 5336              	.LCFI335:
 5337              	 .cfi_def_cfa_register 13
 5338              	 
 5339 017a F0BD     	 pop {r4,r5,r6,r7,pc}
 5340              	.L343:
 5341              	 .align 2
 5342              	.L342:
 5343 017c 40030000 	 .word .LC79
 5344              	 .cfi_endproc
 5345              	.LFE725:
 5347              	 .section .rodata
 5348 0359 000000   	 .align 2
 5349              	.LC80:
 5350 035c 696E6465 	 .ascii "index\000"
 5350      7800
 5351              	 .section .text.cliAux,"ax",%progbits
 5352              	 .align 2
 5353              	 .thumb
 5354              	 .thumb_func
 5356              	cliAux:
 5357              	.LFB726:
 890:../cleanflight/src/main/interface/cli.c **** 
 891:../cleanflight/src/main/interface/cli.c **** static void cliAux(char *cmdline)
 892:../cleanflight/src/main/interface/cli.c **** {
 5358              	 .loc 13 892 0
 5359              	 .cfi_startproc
 5360              	 
 5361              	 
 5362 0000 B0B5     	 push {r4,r5,r7,lr}
 5363              	.LCFI336:
 5364              	 .cfi_def_cfa_offset 16
 5365              	 .cfi_offset 4,-16
 5366              	 .cfi_offset 5,-12
 5367              	 .cfi_offset 7,-8
 5368              	 .cfi_offset 14,-4
 5369 0002 8EB0     	 sub sp,sp,#56
 5370              	.LCFI337:
 5371              	 .cfi_def_cfa_offset 72
 5372 0004 04AF     	 add r7,sp,#16
 5373              	.LCFI338:
 5374              	 .cfi_def_cfa 7,56
 5375 0006 7860     	 str r0,[r7,#4]
 893:../cleanflight/src/main/interface/cli.c ****     int i, val = 0;
 5376              	 .loc 13 893 0
 5377 0008 0023     	 movs r3,#0
 5378 000a 7B62     	 str r3,[r7,#36]
 894:../cleanflight/src/main/interface/cli.c ****     const char *ptr;
 895:../cleanflight/src/main/interface/cli.c **** 
 896:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 5379              	 .loc 13 896 0
 5380 000c 7868     	 ldr r0,[r7,#4]
 5381 000e FFF7FEFF 	 bl isEmpty
 5382 0012 0346     	 mov r3,r0
 5383 0014 002B     	 cmp r3,#0
 5384 0016 09D0     	 beq .L345
 897:../cleanflight/src/main/interface/cli.c ****         printAux(DUMP_MASTER, modeActivationConditions(0), NULL);
 5385              	 .loc 13 897 0
 5386 0018 0020     	 movs r0,#0
 5387 001a FFF7FEFF 	 bl modeActivationConditions
 5388 001e 0346     	 mov r3,r0
 5389 0020 0120     	 movs r0,#1
 5390 0022 1946     	 mov r1,r3
 5391 0024 0022     	 movs r2,#0
 5392 0026 FFF7FEFF 	 bl printAux
 5393 002a CBE0     	 b .L344
 5394              	.L345:
 898:../cleanflight/src/main/interface/cli.c ****     } else {
 899:../cleanflight/src/main/interface/cli.c ****         ptr = cmdline;
 5395              	 .loc 13 899 0
 5396 002c 7B68     	 ldr r3,[r7,#4]
 5397 002e 3B62     	 str r3,[r7,#32]
 900:../cleanflight/src/main/interface/cli.c ****         i = atoi(ptr++);
 5398              	 .loc 13 900 0
 5399 0030 3B6A     	 ldr r3,[r7,#32]
 5400 0032 5A1C     	 adds r2,r3,#1
 5401 0034 3A62     	 str r2,[r7,#32]
 5402 0036 1846     	 mov r0,r3
 5403 0038 FFF7FEFF 	 bl atoi
 5404 003c F861     	 str r0,[r7,#28]
 901:../cleanflight/src/main/interface/cli.c ****         if (i < MAX_MODE_ACTIVATION_CONDITION_COUNT) {
 5405              	 .loc 13 901 0
 5406 003e FB69     	 ldr r3,[r7,#28]
 5407 0040 132B     	 cmp r3,#19
 5408 0042 00F3BA80 	 bgt .L347
 5409              	.LBB28:
 902:../cleanflight/src/main/interface/cli.c ****             modeActivationCondition_t *mac = modeActivationConditionsMutable(i);
 5410              	 .loc 13 902 0
 5411 0046 F869     	 ldr r0,[r7,#28]
 5412 0048 FFF7FEFF 	 bl modeActivationConditionsMutable
 5413 004c B861     	 str r0,[r7,#24]
 903:../cleanflight/src/main/interface/cli.c ****             uint8_t validArgumentCount = 0;
 5414              	 .loc 13 903 0
 5415 004e 0023     	 movs r3,#0
 5416 0050 FB73     	 strb r3,[r7,#15]
 904:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 5417              	 .loc 13 904 0
 5418 0052 386A     	 ldr r0,[r7,#32]
 5419 0054 FFF7FEFF 	 bl nextArg
 5420 0058 3862     	 str r0,[r7,#32]
 905:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 5421              	 .loc 13 905 0
 5422 005a 3B6A     	 ldr r3,[r7,#32]
 5423 005c 002B     	 cmp r3,#0
 5424 005e 14D0     	 beq .L348
 5425              	.LBB29:
 906:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 5426              	 .loc 13 906 0
 5427 0060 386A     	 ldr r0,[r7,#32]
 5428 0062 FFF7FEFF 	 bl atoi
 5429 0066 7862     	 str r0,[r7,#36]
 907:../cleanflight/src/main/interface/cli.c ****                 const box_t *box = findBoxByPermanentId(val);
 5430              	 .loc 13 907 0
 5431 0068 7B6A     	 ldr r3,[r7,#36]
 5432 006a DBB2     	 uxtb r3,r3
 5433 006c 1846     	 mov r0,r3
 5434 006e FFF7FEFF 	 bl findBoxByPermanentId
 5435 0072 7861     	 str r0,[r7,#20]
 908:../cleanflight/src/main/interface/cli.c ****                 if (box) {
 5436              	 .loc 13 908 0
 5437 0074 7B69     	 ldr r3,[r7,#20]
 5438 0076 002B     	 cmp r3,#0
 5439 0078 07D0     	 beq .L348
 909:../cleanflight/src/main/interface/cli.c ****                     mac->modeId = box->boxId;
 5440              	 .loc 13 909 0
 5441 007a 7B69     	 ldr r3,[r7,#20]
 5442 007c 1A78     	 ldrb r2,[r3]
 5443 007e BB69     	 ldr r3,[r7,#24]
 5444 0080 1A70     	 strb r2,[r3]
 910:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 5445              	 .loc 13 910 0
 5446 0082 FB7B     	 ldrb r3,[r7,#15]
 5447 0084 0133     	 adds r3,r3,#1
 5448 0086 DBB2     	 uxtb r3,r3
 5449 0088 FB73     	 strb r3,[r7,#15]
 5450              	.L348:
 5451              	.LBE29:
 911:../cleanflight/src/main/interface/cli.c ****                 }
 912:../cleanflight/src/main/interface/cli.c ****             }
 913:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 5452              	 .loc 13 913 0
 5453 008a 386A     	 ldr r0,[r7,#32]
 5454 008c FFF7FEFF 	 bl nextArg
 5455 0090 3862     	 str r0,[r7,#32]
 914:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 5456              	 .loc 13 914 0
 5457 0092 3B6A     	 ldr r3,[r7,#32]
 5458 0094 002B     	 cmp r3,#0
 5459 0096 11D0     	 beq .L349
 915:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 5460              	 .loc 13 915 0
 5461 0098 386A     	 ldr r0,[r7,#32]
 5462 009a FFF7FEFF 	 bl atoi
 5463 009e 7862     	 str r0,[r7,#36]
 916:../cleanflight/src/main/interface/cli.c ****                 if (val >= 0 && val < MAX_AUX_CHANNEL_COUNT) {
 5464              	 .loc 13 916 0
 5465 00a0 7B6A     	 ldr r3,[r7,#36]
 5466 00a2 002B     	 cmp r3,#0
 5467 00a4 0ADB     	 blt .L349
 5468              	 .loc 13 916 0 is_stmt 0 discriminator 1
 5469 00a6 7B6A     	 ldr r3,[r7,#36]
 5470 00a8 0D2B     	 cmp r3,#13
 5471 00aa 07DC     	 bgt .L349
 917:../cleanflight/src/main/interface/cli.c ****                     mac->auxChannelIndex = val;
 5472              	 .loc 13 917 0 is_stmt 1
 5473 00ac 7B6A     	 ldr r3,[r7,#36]
 5474 00ae DAB2     	 uxtb r2,r3
 5475 00b0 BB69     	 ldr r3,[r7,#24]
 5476 00b2 5A70     	 strb r2,[r3,#1]
 918:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 5477              	 .loc 13 918 0
 5478 00b4 FB7B     	 ldrb r3,[r7,#15]
 5479 00b6 0133     	 adds r3,r3,#1
 5480 00b8 DBB2     	 uxtb r3,r3
 5481 00ba FB73     	 strb r3,[r7,#15]
 5482              	.L349:
 919:../cleanflight/src/main/interface/cli.c ****                 }
 920:../cleanflight/src/main/interface/cli.c ****             }
 921:../cleanflight/src/main/interface/cli.c ****             ptr = processChannelRangeArgs(ptr, &mac->range, &validArgumentCount);
 5483              	 .loc 13 921 0
 5484 00bc BB69     	 ldr r3,[r7,#24]
 5485 00be 9A1C     	 adds r2,r3,#2
 5486 00c0 07F10F03 	 add r3,r7,#15
 5487 00c4 386A     	 ldr r0,[r7,#32]
 5488 00c6 1146     	 mov r1,r2
 5489 00c8 1A46     	 mov r2,r3
 5490 00ca FFF7FEFF 	 bl processChannelRangeArgs
 5491 00ce 3862     	 str r0,[r7,#32]
 922:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 5492              	 .loc 13 922 0
 5493 00d0 386A     	 ldr r0,[r7,#32]
 5494 00d2 FFF7FEFF 	 bl nextArg
 5495 00d6 3862     	 str r0,[r7,#32]
 923:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 5496              	 .loc 13 923 0
 5497 00d8 3B6A     	 ldr r3,[r7,#32]
 5498 00da 002B     	 cmp r3,#0
 5499 00dc 11D0     	 beq .L350
 924:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 5500              	 .loc 13 924 0
 5501 00de 386A     	 ldr r0,[r7,#32]
 5502 00e0 FFF7FEFF 	 bl atoi
 5503 00e4 7862     	 str r0,[r7,#36]
 925:../cleanflight/src/main/interface/cli.c ****                 if (val == MODELOGIC_OR || val == MODELOGIC_AND) {
 5504              	 .loc 13 925 0
 5505 00e6 7B6A     	 ldr r3,[r7,#36]
 5506 00e8 002B     	 cmp r3,#0
 5507 00ea 02D0     	 beq .L351
 5508              	 .loc 13 925 0 is_stmt 0 discriminator 1
 5509 00ec 7B6A     	 ldr r3,[r7,#36]
 5510 00ee 012B     	 cmp r3,#1
 5511 00f0 07D1     	 bne .L350
 5512              	.L351:
 926:../cleanflight/src/main/interface/cli.c ****                     mac->modeLogic = val;
 5513              	 .loc 13 926 0 is_stmt 1
 5514 00f2 7B6A     	 ldr r3,[r7,#36]
 5515 00f4 DAB2     	 uxtb r2,r3
 5516 00f6 BB69     	 ldr r3,[r7,#24]
 5517 00f8 1A71     	 strb r2,[r3,#4]
 927:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 5518              	 .loc 13 927 0
 5519 00fa FB7B     	 ldrb r3,[r7,#15]
 5520 00fc 0133     	 adds r3,r3,#1
 5521 00fe DBB2     	 uxtb r3,r3
 5522 0100 FB73     	 strb r3,[r7,#15]
 5523              	.L350:
 928:../cleanflight/src/main/interface/cli.c ****                 }
 929:../cleanflight/src/main/interface/cli.c ****             }
 930:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 5524              	 .loc 13 930 0
 5525 0102 386A     	 ldr r0,[r7,#32]
 5526 0104 FFF7FEFF 	 bl nextArg
 5527 0108 3862     	 str r0,[r7,#32]
 931:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 5528              	 .loc 13 931 0
 5529 010a 3B6A     	 ldr r3,[r7,#32]
 5530 010c 002B     	 cmp r3,#0
 5531 010e 14D0     	 beq .L352
 5532              	.LBB30:
 932:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 5533              	 .loc 13 932 0
 5534 0110 386A     	 ldr r0,[r7,#32]
 5535 0112 FFF7FEFF 	 bl atoi
 5536 0116 7862     	 str r0,[r7,#36]
 933:../cleanflight/src/main/interface/cli.c ****                 const box_t *box = findBoxByPermanentId(val);
 5537              	 .loc 13 933 0
 5538 0118 7B6A     	 ldr r3,[r7,#36]
 5539 011a DBB2     	 uxtb r3,r3
 5540 011c 1846     	 mov r0,r3
 5541 011e FFF7FEFF 	 bl findBoxByPermanentId
 5542 0122 3861     	 str r0,[r7,#16]
 934:../cleanflight/src/main/interface/cli.c ****                 if (box) {
 5543              	 .loc 13 934 0
 5544 0124 3B69     	 ldr r3,[r7,#16]
 5545 0126 002B     	 cmp r3,#0
 5546 0128 07D0     	 beq .L352
 935:../cleanflight/src/main/interface/cli.c ****                     mac->linkedTo = box->boxId;
 5547              	 .loc 13 935 0
 5548 012a 3B69     	 ldr r3,[r7,#16]
 5549 012c 1A78     	 ldrb r2,[r3]
 5550 012e BB69     	 ldr r3,[r7,#24]
 5551 0130 5A71     	 strb r2,[r3,#5]
 936:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 5552              	 .loc 13 936 0
 5553 0132 FB7B     	 ldrb r3,[r7,#15]
 5554 0134 0133     	 adds r3,r3,#1
 5555 0136 DBB2     	 uxtb r3,r3
 5556 0138 FB73     	 strb r3,[r7,#15]
 5557              	.L352:
 5558              	.LBE30:
 937:../cleanflight/src/main/interface/cli.c ****                 }
 938:../cleanflight/src/main/interface/cli.c ****             }
 939:../cleanflight/src/main/interface/cli.c ****             if (validArgumentCount == 4) { // for backwards compatibility
 5559              	 .loc 13 939 0
 5560 013a FB7B     	 ldrb r3,[r7,#15]
 5561 013c 042B     	 cmp r3,#4
 5562 013e 03D1     	 bne .L353
 940:../cleanflight/src/main/interface/cli.c ****                 mac->modeLogic = MODELOGIC_OR;
 5563              	 .loc 13 940 0
 5564 0140 BB69     	 ldr r3,[r7,#24]
 5565 0142 0022     	 movs r2,#0
 5566 0144 1A71     	 strb r2,[r3,#4]
 5567 0146 0EE0     	 b .L354
 5568              	.L353:
 941:../cleanflight/src/main/interface/cli.c ****             } else if (validArgumentCount == 5) { // for backwards compatibility
 5569              	 .loc 13 941 0
 5570 0148 FB7B     	 ldrb r3,[r7,#15]
 5571 014a 052B     	 cmp r3,#5
 5572 014c 03D1     	 bne .L355
 942:../cleanflight/src/main/interface/cli.c ****                 mac->linkedTo = 0;
 5573              	 .loc 13 942 0
 5574 014e BB69     	 ldr r3,[r7,#24]
 5575 0150 0022     	 movs r2,#0
 5576 0152 5A71     	 strb r2,[r3,#5]
 5577 0154 07E0     	 b .L354
 5578              	.L355:
 943:../cleanflight/src/main/interface/cli.c ****             } else if (validArgumentCount != 6) {
 5579              	 .loc 13 943 0
 5580 0156 FB7B     	 ldrb r3,[r7,#15]
 5581 0158 062B     	 cmp r3,#6
 5582 015a 04D0     	 beq .L354
 944:../cleanflight/src/main/interface/cli.c ****                 memset(mac, 0, sizeof(modeActivationCondition_t));
 5583              	 .loc 13 944 0
 5584 015c B869     	 ldr r0,[r7,#24]
 5585 015e 0021     	 movs r1,#0
 5586 0160 0622     	 movs r2,#6
 5587 0162 FFF7FEFF 	 bl memset
 5588              	.L354:
 945:../cleanflight/src/main/interface/cli.c ****             }
 946:../cleanflight/src/main/interface/cli.c ****             cliPrintLinef( "aux %u %u %u %u %u %u %u",
 947:../cleanflight/src/main/interface/cli.c ****                 i,
 948:../cleanflight/src/main/interface/cli.c ****                 mac->modeId,
 5589              	 .loc 13 948 0
 5590 0166 BB69     	 ldr r3,[r7,#24]
 5591 0168 1B78     	 ldrb r3,[r3]
 946:../cleanflight/src/main/interface/cli.c ****                 i,
 5592              	 .loc 13 946 0
 5593 016a 1D46     	 mov r5,r3
 949:../cleanflight/src/main/interface/cli.c ****                 mac->auxChannelIndex,
 5594              	 .loc 13 949 0
 5595 016c BB69     	 ldr r3,[r7,#24]
 5596 016e 5B78     	 ldrb r3,[r3,#1]
 946:../cleanflight/src/main/interface/cli.c ****                 i,
 5597              	 .loc 13 946 0
 5598 0170 1C46     	 mov r4,r3
 950:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(mac->range.startStep),
 5599              	 .loc 13 950 0
 5600 0172 BB69     	 ldr r3,[r7,#24]
 5601 0174 9B78     	 ldrb r3,[r3,#2]
 5602 0176 1A46     	 mov r2,r3
 5603 0178 1346     	 mov r3,r2
 5604 017a 9B00     	 lsls r3,r3,#2
 5605 017c 1344     	 add r3,r3,r2
 5606 017e 9A00     	 lsls r2,r3,#2
 5607 0180 1344     	 add r3,r3,r2
 946:../cleanflight/src/main/interface/cli.c ****                 i,
 5608              	 .loc 13 946 0
 5609 0182 03F56172 	 add r2,r3,#900
 951:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(mac->range.endStep),
 5610              	 .loc 13 951 0
 5611 0186 BB69     	 ldr r3,[r7,#24]
 5612 0188 DB78     	 ldrb r3,[r3,#3]
 5613 018a 1946     	 mov r1,r3
 5614 018c 0B46     	 mov r3,r1
 5615 018e 9B00     	 lsls r3,r3,#2
 5616 0190 0B44     	 add r3,r3,r1
 5617 0192 9900     	 lsls r1,r3,#2
 5618 0194 0B44     	 add r3,r3,r1
 946:../cleanflight/src/main/interface/cli.c ****                 i,
 5619              	 .loc 13 946 0
 5620 0196 03F56173 	 add r3,r3,#900
 952:../cleanflight/src/main/interface/cli.c ****                 mac->modeLogic,
 5621              	 .loc 13 952 0
 5622 019a B969     	 ldr r1,[r7,#24]
 5623 019c 0979     	 ldrb r1,[r1,#4]
 946:../cleanflight/src/main/interface/cli.c ****                 i,
 5624              	 .loc 13 946 0
 5625 019e 0846     	 mov r0,r1
 953:../cleanflight/src/main/interface/cli.c ****                 mac->linkedTo
 5626              	 .loc 13 953 0
 5627 01a0 B969     	 ldr r1,[r7,#24]
 5628 01a2 4979     	 ldrb r1,[r1,#5]
 946:../cleanflight/src/main/interface/cli.c ****                 i,
 5629              	 .loc 13 946 0
 5630 01a4 0092     	 str r2,[sp]
 5631 01a6 0193     	 str r3,[sp,#4]
 5632 01a8 0290     	 str r0,[sp,#8]
 5633 01aa 0391     	 str r1,[sp,#12]
 5634 01ac 0748     	 ldr r0,.L356
 5635 01ae F969     	 ldr r1,[r7,#28]
 5636 01b0 2A46     	 mov r2,r5
 5637 01b2 2346     	 mov r3,r4
 5638 01b4 FFF7FEFF 	 bl cliPrintLinef
 5639              	.LBE28:
 5640 01b8 04E0     	 b .L344
 5641              	.L347:
 954:../cleanflight/src/main/interface/cli.c ****             );
 955:../cleanflight/src/main/interface/cli.c ****         } else {
 956:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("index", 0, MAX_MODE_ACTIVATION_CONDITION_COUNT - 1);
 5642              	 .loc 13 956 0
 5643 01ba 0548     	 ldr r0,.L356+4
 5644 01bc 0021     	 movs r1,#0
 5645 01be 1322     	 movs r2,#19
 5646 01c0 FFF7FEFF 	 bl cliShowArgumentRangeError
 5647              	.L344:
 957:../cleanflight/src/main/interface/cli.c ****         }
 958:../cleanflight/src/main/interface/cli.c ****     }
 959:../cleanflight/src/main/interface/cli.c **** }
 5648              	 .loc 13 959 0
 5649 01c4 2837     	 adds r7,r7,#40
 5650              	.LCFI339:
 5651              	 .cfi_def_cfa_offset 16
 5652 01c6 BD46     	 mov sp,r7
 5653              	.LCFI340:
 5654              	 .cfi_def_cfa_register 13
 5655              	 
 5656 01c8 B0BD     	 pop {r4,r5,r7,pc}
 5657              	.L357:
 5658 01ca 00BF     	 .align 2
 5659              	.L356:
 5660 01cc 40030000 	 .word .LC79
 5661 01d0 5C030000 	 .word .LC80
 5662              	 .cfi_endproc
 5663              	.LFE726:
 5665              	 .section .rodata
 5666 0362 0000     	 .align 2
 5667              	.LC81:
 5668 0364 73657269 	 .ascii "serial %d %d %ld %ld %ld %ld\000"
 5668      616C2025 
 5668      64202564 
 5668      20256C64 
 5668      20256C64 
 5669              	 .section .text.printSerial,"ax",%progbits
 5670              	 .align 2
 5671              	 .thumb
 5672              	 .thumb_func
 5674              	printSerial:
 5675              	.LFB727:
 960:../cleanflight/src/main/interface/cli.c **** 
 961:../cleanflight/src/main/interface/cli.c **** static void printSerial(uint8_t dumpMask, const serialConfig_t *serialConfig, const serialConfig_t 
 962:../cleanflight/src/main/interface/cli.c **** {
 5676              	 .loc 13 962 0
 5677              	 .cfi_startproc
 5678              	 
 5679              	 
 5680 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 5681              	.LCFI341:
 5682              	 .cfi_def_cfa_offset 20
 5683              	 .cfi_offset 4,-20
 5684              	 .cfi_offset 5,-16
 5685              	 .cfi_offset 6,-12
 5686              	 .cfi_offset 7,-8
 5687              	 .cfi_offset 14,-4
 5688 0002 8FB0     	 sub sp,sp,#60
 5689              	.LCFI342:
 5690              	 .cfi_def_cfa_offset 80
 5691 0004 06AF     	 add r7,sp,#24
 5692              	.LCFI343:
 5693              	 .cfi_def_cfa 7,56
 5694 0006 0346     	 mov r3,r0
 5695 0008 B960     	 str r1,[r7,#8]
 5696 000a 7A60     	 str r2,[r7,#4]
 5697 000c FB73     	 strb r3,[r7,#15]
 963:../cleanflight/src/main/interface/cli.c ****     const char *format = "serial %d %d %ld %ld %ld %ld";
 5698              	 .loc 13 963 0
 5699 000e 694B     	 ldr r3,.L364
 5700 0010 7B61     	 str r3,[r7,#20]
 5701              	.LBB31:
 964:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < SERIAL_PORT_COUNT; i++) {
 5702              	 .loc 13 964 0
 5703 0012 0023     	 movs r3,#0
 5704 0014 FB61     	 str r3,[r7,#28]
 5705 0016 C6E0     	 b .L359
 5706              	.L363:
 5707              	.LBB32:
 965:../cleanflight/src/main/interface/cli.c ****         if (!serialIsPortAvailable(serialConfig->portConfigs[i].identifier)) {
 5708              	 .loc 13 965 0
 5709 0018 B968     	 ldr r1,[r7,#8]
 5710 001a FA69     	 ldr r2,[r7,#28]
 5711 001c 1346     	 mov r3,r2
 5712 001e DB00     	 lsls r3,r3,#3
 5713 0020 9B1A     	 subs r3,r3,r2
 5714 0022 0B44     	 add r3,r3,r1
 5715 0024 9B78     	 ldrb r3,[r3,#2]
 5716 0026 5BB2     	 sxtb r3,r3
 5717 0028 1846     	 mov r0,r3
 5718 002a FFF7FEFF 	 bl serialIsPortAvailable
 5719 002e 0346     	 mov r3,r0
 5720 0030 83F00103 	 eor r3,r3,#1
 5721 0034 DBB2     	 uxtb r3,r3
 5722 0036 002B     	 cmp r3,#0
 5723 0038 00D0     	 beq .L360
 966:../cleanflight/src/main/interface/cli.c ****             continue;
 5724              	 .loc 13 966 0
 5725 003a B1E0     	 b .L361
 5726              	.L360:
 967:../cleanflight/src/main/interface/cli.c ****         };
 968:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
 5727              	 .loc 13 968 0
 5728 003c 0023     	 movs r3,#0
 5729 003e FB76     	 strb r3,[r7,#27]
 969:../cleanflight/src/main/interface/cli.c ****         if (serialConfigDefault) {
 5730              	 .loc 13 969 0
 5731 0040 7B68     	 ldr r3,[r7,#4]
 5732 0042 002B     	 cmp r3,#0
 5733 0044 61D0     	 beq .L362
 970:../cleanflight/src/main/interface/cli.c ****             equalsDefault = !memcmp(&serialConfig->portConfigs[i], &serialConfigDefault->portConfig
 5734              	 .loc 13 970 0
 5735 0046 FA69     	 ldr r2,[r7,#28]
 5736 0048 1346     	 mov r3,r2
 5737 004a DB00     	 lsls r3,r3,#3
 5738 004c 9B1A     	 subs r3,r3,r2
 5739 004e BA68     	 ldr r2,[r7,#8]
 5740 0050 D118     	 adds r1,r2,r3
 5741 0052 FA69     	 ldr r2,[r7,#28]
 5742 0054 1346     	 mov r3,r2
 5743 0056 DB00     	 lsls r3,r3,#3
 5744 0058 9B1A     	 subs r3,r3,r2
 5745 005a 7A68     	 ldr r2,[r7,#4]
 5746 005c 1344     	 add r3,r3,r2
 5747 005e 0846     	 mov r0,r1
 5748 0060 1946     	 mov r1,r3
 5749 0062 0722     	 movs r2,#7
 5750 0064 FFF7FEFF 	 bl memcmp
 5751 0068 0346     	 mov r3,r0
 5752 006a 002B     	 cmp r3,#0
 5753 006c 0CBF     	 ite eq
 5754 006e 0123     	 moveq r3,#1
 5755 0070 0023     	 movne r3,#0
 5756 0072 FB76     	 strb r3,[r7,#27]
 971:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 972:../cleanflight/src/main/interface/cli.c ****                 serialConfigDefault->portConfigs[i].identifier,
 5757              	 .loc 13 972 0
 5758 0074 7968     	 ldr r1,[r7,#4]
 5759 0076 FA69     	 ldr r2,[r7,#28]
 5760 0078 1346     	 mov r3,r2
 5761 007a DB00     	 lsls r3,r3,#3
 5762 007c 9B1A     	 subs r3,r3,r2
 5763 007e 0B44     	 add r3,r3,r1
 5764 0080 9B78     	 ldrb r3,[r3,#2]
 971:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 5765              	 .loc 13 971 0
 5766 0082 5EB2     	 sxtb r6,r3
 973:../cleanflight/src/main/interface/cli.c ****                 serialConfigDefault->portConfigs[i].functionMask,
 5767              	 .loc 13 973 0
 5768 0084 7968     	 ldr r1,[r7,#4]
 5769 0086 FA69     	 ldr r2,[r7,#28]
 5770 0088 1346     	 mov r3,r2
 5771 008a DB00     	 lsls r3,r3,#3
 5772 008c 9B1A     	 subs r3,r3,r2
 5773 008e 0B44     	 add r3,r3,r1
 5774 0090 1B88     	 ldrh r3,[r3]
 5775 0092 9BB2     	 uxth r3,r3
 971:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 5776              	 .loc 13 971 0
 5777 0094 9E46     	 mov lr,r3
 974:../cleanflight/src/main/interface/cli.c ****                 baudRates[serialConfigDefault->portConfigs[i].msp_baudrateIndex],
 5778              	 .loc 13 974 0
 5779 0096 7968     	 ldr r1,[r7,#4]
 5780 0098 FA69     	 ldr r2,[r7,#28]
 5781 009a 1346     	 mov r3,r2
 5782 009c DB00     	 lsls r3,r3,#3
 5783 009e 9B1A     	 subs r3,r3,r2
 5784 00a0 0B44     	 add r3,r3,r1
 5785 00a2 DB78     	 ldrb r3,[r3,#3]
 971:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 5786              	 .loc 13 971 0
 5787 00a4 1A46     	 mov r2,r3
 5788 00a6 444B     	 ldr r3,.L364+4
 5789 00a8 53F82240 	 ldr r4,[r3,r2,lsl#2]
 975:../cleanflight/src/main/interface/cli.c ****                 baudRates[serialConfigDefault->portConfigs[i].gps_baudrateIndex],
 5790              	 .loc 13 975 0
 5791 00ac 7968     	 ldr r1,[r7,#4]
 5792 00ae FA69     	 ldr r2,[r7,#28]
 5793 00b0 1346     	 mov r3,r2
 5794 00b2 DB00     	 lsls r3,r3,#3
 5795 00b4 9B1A     	 subs r3,r3,r2
 5796 00b6 0B44     	 add r3,r3,r1
 5797 00b8 1B79     	 ldrb r3,[r3,#4]
 971:../cleanflight/src/main/interface/cli.c ****                 serialConfigDefault->portConfigs[i].identifier,
 5798              	 .loc 13 971 0
 5799 00ba 1A46     	 mov r2,r3
 5800 00bc 3E4B     	 ldr r3,.L364+4
 5801 00be 53F82200 	 ldr r0,[r3,r2,lsl#2]
 976:../cleanflight/src/main/interface/cli.c ****                 baudRates[serialConfigDefault->portConfigs[i].telemetry_baudrateIndex],
 5802              	 .loc 13 976 0
 5803 00c2 7968     	 ldr r1,[r7,#4]
 5804 00c4 FA69     	 ldr r2,[r7,#28]
 5805 00c6 1346     	 mov r3,r2
 5806 00c8 DB00     	 lsls r3,r3,#3
 5807 00ca 9B1A     	 subs r3,r3,r2
 5808 00cc 0B44     	 add r3,r3,r1
 5809 00ce 9B79     	 ldrb r3,[r3,#6]
 971:../cleanflight/src/main/interface/cli.c ****                 serialConfigDefault->portConfigs[i].identifier,
 5810              	 .loc 13 971 0
 5811 00d0 1A46     	 mov r2,r3
 5812 00d2 394B     	 ldr r3,.L364+4
 5813 00d4 53F82210 	 ldr r1,[r3,r2,lsl#2]
 977:../cleanflight/src/main/interface/cli.c ****                 baudRates[serialConfigDefault->portConfigs[i].blackbox_baudrateIndex]
 5814              	 .loc 13 977 0
 5815 00d8 7D68     	 ldr r5,[r7,#4]
 5816 00da FA69     	 ldr r2,[r7,#28]
 5817 00dc 1346     	 mov r3,r2
 5818 00de DB00     	 lsls r3,r3,#3
 5819 00e0 9B1A     	 subs r3,r3,r2
 5820 00e2 2B44     	 add r3,r3,r5
 5821 00e4 5B79     	 ldrb r3,[r3,#5]
 971:../cleanflight/src/main/interface/cli.c ****                 serialConfigDefault->portConfigs[i].identifier,
 5822              	 .loc 13 971 0
 5823 00e6 1A46     	 mov r2,r3
 5824 00e8 334B     	 ldr r3,.L364+4
 5825 00ea 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5826 00ee FD7B     	 ldrb r5,[r7,#15]
 5827 00f0 FA7E     	 ldrb r2,[r7,#27]
 5828 00f2 CDF800E0 	 str lr,[sp]
 5829 00f6 0194     	 str r4,[sp,#4]
 5830 00f8 0290     	 str r0,[sp,#8]
 5831 00fa 0391     	 str r1,[sp,#12]
 5832 00fc 0493     	 str r3,[sp,#16]
 5833 00fe 2846     	 mov r0,r5
 5834 0100 1146     	 mov r1,r2
 5835 0102 7A69     	 ldr r2,[r7,#20]
 5836 0104 3346     	 mov r3,r6
 5837 0106 FFF7FEFF 	 bl cliDefaultPrintLinef
 5838              	.L362:
 978:../cleanflight/src/main/interface/cli.c ****             );
 979:../cleanflight/src/main/interface/cli.c ****         }
 980:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format,
 981:../cleanflight/src/main/interface/cli.c ****             serialConfig->portConfigs[i].identifier,
 5839              	 .loc 13 981 0
 5840 010a B968     	 ldr r1,[r7,#8]
 5841 010c FA69     	 ldr r2,[r7,#28]
 5842 010e 1346     	 mov r3,r2
 5843 0110 DB00     	 lsls r3,r3,#3
 5844 0112 9B1A     	 subs r3,r3,r2
 5845 0114 0B44     	 add r3,r3,r1
 5846 0116 9B78     	 ldrb r3,[r3,#2]
 980:../cleanflight/src/main/interface/cli.c ****             serialConfig->portConfigs[i].identifier,
 5847              	 .loc 13 980 0
 5848 0118 5EB2     	 sxtb r6,r3
 982:../cleanflight/src/main/interface/cli.c ****             serialConfig->portConfigs[i].functionMask,
 5849              	 .loc 13 982 0
 5850 011a B968     	 ldr r1,[r7,#8]
 5851 011c FA69     	 ldr r2,[r7,#28]
 5852 011e 1346     	 mov r3,r2
 5853 0120 DB00     	 lsls r3,r3,#3
 5854 0122 9B1A     	 subs r3,r3,r2
 5855 0124 0B44     	 add r3,r3,r1
 5856 0126 1B88     	 ldrh r3,[r3]
 5857 0128 9BB2     	 uxth r3,r3
 980:../cleanflight/src/main/interface/cli.c ****             serialConfig->portConfigs[i].identifier,
 5858              	 .loc 13 980 0
 5859 012a 9E46     	 mov lr,r3
 983:../cleanflight/src/main/interface/cli.c ****             baudRates[serialConfig->portConfigs[i].msp_baudrateIndex],
 5860              	 .loc 13 983 0
 5861 012c B968     	 ldr r1,[r7,#8]
 5862 012e FA69     	 ldr r2,[r7,#28]
 5863 0130 1346     	 mov r3,r2
 5864 0132 DB00     	 lsls r3,r3,#3
 5865 0134 9B1A     	 subs r3,r3,r2
 5866 0136 0B44     	 add r3,r3,r1
 5867 0138 DB78     	 ldrb r3,[r3,#3]
 980:../cleanflight/src/main/interface/cli.c ****             serialConfig->portConfigs[i].identifier,
 5868              	 .loc 13 980 0
 5869 013a 1A46     	 mov r2,r3
 5870 013c 1E4B     	 ldr r3,.L364+4
 5871 013e 53F82240 	 ldr r4,[r3,r2,lsl#2]
 984:../cleanflight/src/main/interface/cli.c ****             baudRates[serialConfig->portConfigs[i].gps_baudrateIndex],
 5872              	 .loc 13 984 0
 5873 0142 B968     	 ldr r1,[r7,#8]
 5874 0144 FA69     	 ldr r2,[r7,#28]
 5875 0146 1346     	 mov r3,r2
 5876 0148 DB00     	 lsls r3,r3,#3
 5877 014a 9B1A     	 subs r3,r3,r2
 5878 014c 0B44     	 add r3,r3,r1
 5879 014e 1B79     	 ldrb r3,[r3,#4]
 980:../cleanflight/src/main/interface/cli.c ****             serialConfig->portConfigs[i].identifier,
 5880              	 .loc 13 980 0
 5881 0150 1A46     	 mov r2,r3
 5882 0152 194B     	 ldr r3,.L364+4
 5883 0154 53F82200 	 ldr r0,[r3,r2,lsl#2]
 985:../cleanflight/src/main/interface/cli.c ****             baudRates[serialConfig->portConfigs[i].telemetry_baudrateIndex],
 5884              	 .loc 13 985 0
 5885 0158 B968     	 ldr r1,[r7,#8]
 5886 015a FA69     	 ldr r2,[r7,#28]
 5887 015c 1346     	 mov r3,r2
 5888 015e DB00     	 lsls r3,r3,#3
 5889 0160 9B1A     	 subs r3,r3,r2
 5890 0162 0B44     	 add r3,r3,r1
 5891 0164 9B79     	 ldrb r3,[r3,#6]
 980:../cleanflight/src/main/interface/cli.c ****             serialConfig->portConfigs[i].identifier,
 5892              	 .loc 13 980 0
 5893 0166 1A46     	 mov r2,r3
 5894 0168 134B     	 ldr r3,.L364+4
 5895 016a 53F82210 	 ldr r1,[r3,r2,lsl#2]
 986:../cleanflight/src/main/interface/cli.c ****             baudRates[serialConfig->portConfigs[i].blackbox_baudrateIndex]
 5896              	 .loc 13 986 0
 5897 016e BD68     	 ldr r5,[r7,#8]
 5898 0170 FA69     	 ldr r2,[r7,#28]
 5899 0172 1346     	 mov r3,r2
 5900 0174 DB00     	 lsls r3,r3,#3
 5901 0176 9B1A     	 subs r3,r3,r2
 5902 0178 2B44     	 add r3,r3,r5
 5903 017a 5B79     	 ldrb r3,[r3,#5]
 980:../cleanflight/src/main/interface/cli.c ****             serialConfig->portConfigs[i].identifier,
 5904              	 .loc 13 980 0
 5905 017c 1A46     	 mov r2,r3
 5906 017e 0E4B     	 ldr r3,.L364+4
 5907 0180 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5908 0184 FD7B     	 ldrb r5,[r7,#15]
 5909 0186 FA7E     	 ldrb r2,[r7,#27]
 5910 0188 CDF800E0 	 str lr,[sp]
 5911 018c 0194     	 str r4,[sp,#4]
 5912 018e 0290     	 str r0,[sp,#8]
 5913 0190 0391     	 str r1,[sp,#12]
 5914 0192 0493     	 str r3,[sp,#16]
 5915 0194 2846     	 mov r0,r5
 5916 0196 1146     	 mov r1,r2
 5917 0198 7A69     	 ldr r2,[r7,#20]
 5918 019a 3346     	 mov r3,r6
 5919 019c FFF7FEFF 	 bl cliDumpPrintLinef
 5920              	.L361:
 5921              	.LBE32:
 964:../cleanflight/src/main/interface/cli.c ****         if (!serialIsPortAvailable(serialConfig->portConfigs[i].identifier)) {
 5922              	 .loc 13 964 0 discriminator 2
 5923 01a0 FB69     	 ldr r3,[r7,#28]
 5924 01a2 0133     	 adds r3,r3,#1
 5925 01a4 FB61     	 str r3,[r7,#28]
 5926              	.L359:
 964:../cleanflight/src/main/interface/cli.c ****         if (!serialIsPortAvailable(serialConfig->portConfigs[i].identifier)) {
 5927              	 .loc 13 964 0 is_stmt 0 discriminator 1
 5928 01a6 FB69     	 ldr r3,[r7,#28]
 5929 01a8 042B     	 cmp r3,#4
 5930 01aa 7FF635AF 	 bls .L363
 5931              	.LBE31:
 987:../cleanflight/src/main/interface/cli.c ****             );
 988:../cleanflight/src/main/interface/cli.c ****     }
 989:../cleanflight/src/main/interface/cli.c **** }
 5932              	 .loc 13 989 0 is_stmt 1
 5933 01ae 2437     	 adds r7,r7,#36
 5934              	.LCFI344:
 5935              	 .cfi_def_cfa_offset 20
 5936 01b0 BD46     	 mov sp,r7
 5937              	.LCFI345:
 5938              	 .cfi_def_cfa_register 13
 5939              	 
 5940 01b2 F0BD     	 pop {r4,r5,r6,r7,pc}
 5941              	.L365:
 5942              	 .align 2
 5943              	.L364:
 5944 01b4 64030000 	 .word .LC81
 5945 01b8 00000000 	 .word baudRates
 5946              	 .cfi_endproc
 5947              	.LFE727:
 5949              	 .section .text.cliSerial,"ax",%progbits
 5950              	 .align 2
 5951              	 .thumb
 5952              	 .thumb_func
 5954              	cliSerial:
 5955              	.LFB728:
 990:../cleanflight/src/main/interface/cli.c **** 
 991:../cleanflight/src/main/interface/cli.c **** static void cliSerial(char *cmdline)
 992:../cleanflight/src/main/interface/cli.c **** {
 5956              	 .loc 13 992 0
 5957              	 .cfi_startproc
 5958              	 
 5959              	 
 5960 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 5961              	.LCFI346:
 5962              	 .cfi_def_cfa_offset 20
 5963              	 .cfi_offset 4,-20
 5964              	 .cfi_offset 5,-16
 5965              	 .cfi_offset 6,-12
 5966              	 .cfi_offset 7,-8
 5967              	 .cfi_offset 14,-4
 5968 0002 91B0     	 sub sp,sp,#68
 5969              	.LCFI347:
 5970              	 .cfi_def_cfa_offset 88
 5971 0004 06AF     	 add r7,sp,#24
 5972              	.LCFI348:
 5973              	 .cfi_def_cfa 7,64
 5974 0006 7860     	 str r0,[r7,#4]
 993:../cleanflight/src/main/interface/cli.c ****     const char *format = "serial %d %d %ld %ld %ld %ld";
 5975              	 .loc 13 993 0
 5976 0008 6E4B     	 ldr r3,.L392
 5977 000a BB61     	 str r3,[r7,#24]
 994:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 5978              	 .loc 13 994 0
 5979 000c 7868     	 ldr r0,[r7,#4]
 5980 000e FFF7FEFF 	 bl isEmpty
 5981 0012 0346     	 mov r3,r0
 5982 0014 002B     	 cmp r3,#0
 5983 0016 08D0     	 beq .L367
 995:../cleanflight/src/main/interface/cli.c ****         printSerial(DUMP_MASTER, serialConfig(), NULL);
 5984              	 .loc 13 995 0
 5985 0018 FFF7FEFF 	 bl serialConfig
 5986 001c 0346     	 mov r3,r0
 5987 001e 0120     	 movs r0,#1
 5988 0020 1946     	 mov r1,r3
 5989 0022 0022     	 movs r2,#0
 5990 0024 FFF7FEFF 	 bl printSerial
 996:../cleanflight/src/main/interface/cli.c ****         return;
 5991              	 .loc 13 996 0
 5992 0028 C9E0     	 b .L366
 5993              	.L367:
 997:../cleanflight/src/main/interface/cli.c ****     }
 998:../cleanflight/src/main/interface/cli.c ****     serialPortConfig_t portConfig;
 999:../cleanflight/src/main/interface/cli.c ****     memset(&portConfig, 0 , sizeof(portConfig));
 5994              	 .loc 13 999 0
 5995 002a 07F10803 	 add r3,r7,#8
 5996 002e 1846     	 mov r0,r3
 5997 0030 0021     	 movs r1,#0
 5998 0032 0722     	 movs r2,#7
 5999 0034 FFF7FEFF 	 bl memset
1000:../cleanflight/src/main/interface/cli.c **** 
1001:../cleanflight/src/main/interface/cli.c ****     serialPortConfig_t *currentConfig;
1002:../cleanflight/src/main/interface/cli.c **** 
1003:../cleanflight/src/main/interface/cli.c ****     uint8_t validArgumentCount = 0;
 6000              	 .loc 13 1003 0
 6001 0038 0023     	 movs r3,#0
 6002 003a 87F82730 	 strb r3,[r7,#39]
1004:../cleanflight/src/main/interface/cli.c **** 
1005:../cleanflight/src/main/interface/cli.c ****     const char *ptr = cmdline;
 6003              	 .loc 13 1005 0
 6004 003e 7B68     	 ldr r3,[r7,#4]
 6005 0040 3B62     	 str r3,[r7,#32]
1006:../cleanflight/src/main/interface/cli.c **** 
1007:../cleanflight/src/main/interface/cli.c ****     int val = atoi(ptr++);
 6006              	 .loc 13 1007 0
 6007 0042 3B6A     	 ldr r3,[r7,#32]
 6008 0044 5A1C     	 adds r2,r3,#1
 6009 0046 3A62     	 str r2,[r7,#32]
 6010 0048 1846     	 mov r0,r3
 6011 004a FFF7FEFF 	 bl atoi
 6012 004e 7861     	 str r0,[r7,#20]
1008:../cleanflight/src/main/interface/cli.c ****     currentConfig = serialFindPortConfiguration(val);
 6013              	 .loc 13 1008 0
 6014 0050 7B69     	 ldr r3,[r7,#20]
 6015 0052 DBB2     	 uxtb r3,r3
 6016 0054 5BB2     	 sxtb r3,r3
 6017 0056 1846     	 mov r0,r3
 6018 0058 FFF7FEFF 	 bl serialFindPortConfiguration
 6019 005c 3861     	 str r0,[r7,#16]
1009:../cleanflight/src/main/interface/cli.c ****     if (currentConfig) {
 6020              	 .loc 13 1009 0
 6021 005e 3B69     	 ldr r3,[r7,#16]
 6022 0060 002B     	 cmp r3,#0
 6023 0062 07D0     	 beq .L369
1010:../cleanflight/src/main/interface/cli.c ****         portConfig.identifier = val;
 6024              	 .loc 13 1010 0
 6025 0064 7B69     	 ldr r3,[r7,#20]
 6026 0066 DBB2     	 uxtb r3,r3
 6027 0068 BB72     	 strb r3,[r7,#10]
1011:../cleanflight/src/main/interface/cli.c ****         validArgumentCount++;
 6028              	 .loc 13 1011 0
 6029 006a 97F82730 	 ldrb r3,[r7,#39]
 6030 006e 0133     	 adds r3,r3,#1
 6031 0070 87F82730 	 strb r3,[r7,#39]
 6032              	.L369:
1012:../cleanflight/src/main/interface/cli.c ****     }
1013:../cleanflight/src/main/interface/cli.c **** 
1014:../cleanflight/src/main/interface/cli.c ****     ptr = nextArg(ptr);
 6033              	 .loc 13 1014 0
 6034 0074 386A     	 ldr r0,[r7,#32]
 6035 0076 FFF7FEFF 	 bl nextArg
 6036 007a 3862     	 str r0,[r7,#32]
1015:../cleanflight/src/main/interface/cli.c ****     if (ptr) {
 6037              	 .loc 13 1015 0
 6038 007c 3B6A     	 ldr r3,[r7,#32]
 6039 007e 002B     	 cmp r3,#0
 6040 0080 0BD0     	 beq .L370
1016:../cleanflight/src/main/interface/cli.c ****         val = atoi(ptr);
 6041              	 .loc 13 1016 0
 6042 0082 386A     	 ldr r0,[r7,#32]
 6043 0084 FFF7FEFF 	 bl atoi
 6044 0088 7861     	 str r0,[r7,#20]
1017:../cleanflight/src/main/interface/cli.c ****         portConfig.functionMask = val & 0xFFFF;
 6045              	 .loc 13 1017 0
 6046 008a 7B69     	 ldr r3,[r7,#20]
 6047 008c 9BB2     	 uxth r3,r3
 6048 008e 3B81     	 strh r3,[r7,#8]
1018:../cleanflight/src/main/interface/cli.c ****         validArgumentCount++;
 6049              	 .loc 13 1018 0
 6050 0090 97F82730 	 ldrb r3,[r7,#39]
 6051 0094 0133     	 adds r3,r3,#1
 6052 0096 87F82730 	 strb r3,[r7,#39]
 6053              	.L370:
 6054              	.LBB33:
1019:../cleanflight/src/main/interface/cli.c ****     }
1020:../cleanflight/src/main/interface/cli.c **** 
1021:../cleanflight/src/main/interface/cli.c ****     for (int i = 0; i < 4; i ++) {
 6055              	 .loc 13 1021 0
 6056 009a 0023     	 movs r3,#0
 6057 009c FB61     	 str r3,[r7,#28]
 6058 009e 57E0     	 b .L371
 6059              	.L389:
 6060              	.LBB34:
1022:../cleanflight/src/main/interface/cli.c ****         ptr = nextArg(ptr);
 6061              	 .loc 13 1022 0
 6062 00a0 386A     	 ldr r0,[r7,#32]
 6063 00a2 FFF7FEFF 	 bl nextArg
 6064 00a6 3862     	 str r0,[r7,#32]
1023:../cleanflight/src/main/interface/cli.c ****         if (!ptr) {
 6065              	 .loc 13 1023 0
 6066 00a8 3B6A     	 ldr r3,[r7,#32]
 6067 00aa 002B     	 cmp r3,#0
 6068 00ac 00D1     	 bne .L372
1024:../cleanflight/src/main/interface/cli.c ****             break;
 6069              	 .loc 13 1024 0
 6070 00ae 52E0     	 b .L373
 6071              	.L372:
1025:../cleanflight/src/main/interface/cli.c ****         }
1026:../cleanflight/src/main/interface/cli.c **** 
1027:../cleanflight/src/main/interface/cli.c ****         val = atoi(ptr);
 6072              	 .loc 13 1027 0
 6073 00b0 386A     	 ldr r0,[r7,#32]
 6074 00b2 FFF7FEFF 	 bl atoi
 6075 00b6 7861     	 str r0,[r7,#20]
1028:../cleanflight/src/main/interface/cli.c **** 
1029:../cleanflight/src/main/interface/cli.c ****         uint8_t baudRateIndex = lookupBaudRateIndex(val);
 6076              	 .loc 13 1029 0
 6077 00b8 7B69     	 ldr r3,[r7,#20]
 6078 00ba 1846     	 mov r0,r3
 6079 00bc FFF7FEFF 	 bl lookupBaudRateIndex
 6080 00c0 0346     	 mov r3,r0
 6081 00c2 FB73     	 strb r3,[r7,#15]
1030:../cleanflight/src/main/interface/cli.c ****         if (baudRates[baudRateIndex] != (uint32_t) val) {
 6082              	 .loc 13 1030 0
 6083 00c4 FB7B     	 ldrb r3,[r7,#15]
 6084 00c6 404A     	 ldr r2,.L392+4
 6085 00c8 52F82320 	 ldr r2,[r2,r3,lsl#2]
 6086 00cc 7B69     	 ldr r3,[r7,#20]
 6087 00ce 9A42     	 cmp r2,r3
 6088 00d0 00D0     	 beq .L374
1031:../cleanflight/src/main/interface/cli.c ****             break;
 6089              	 .loc 13 1031 0
 6090 00d2 40E0     	 b .L373
 6091              	.L374:
1032:../cleanflight/src/main/interface/cli.c ****         }
1033:../cleanflight/src/main/interface/cli.c **** 
1034:../cleanflight/src/main/interface/cli.c ****         switch (i) {
 6092              	 .loc 13 1034 0
 6093 00d4 FB69     	 ldr r3,[r7,#28]
 6094 00d6 032B     	 cmp r3,#3
 6095 00d8 32D8     	 bhi .L375
 6096 00da 01A2     	 adr r2,.L377
 6097 00dc 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6098              	 .p2align 2
 6099              	.L377:
 6100 00e0 F1000000 	 .word .L376+1
 6101 00e4 05010000 	 .word .L378+1
 6102 00e8 19010000 	 .word .L379+1
 6103 00ec 2D010000 	 .word .L380+1
 6104              	 .p2align 1
 6105              	.L376:
1035:../cleanflight/src/main/interface/cli.c ****         case 0:
1036:../cleanflight/src/main/interface/cli.c ****             if (baudRateIndex < BAUD_9600 || baudRateIndex > BAUD_1000000) {
 6106              	 .loc 13 1036 0
 6107 00f0 FB7B     	 ldrb r3,[r7,#15]
 6108 00f2 002B     	 cmp r3,#0
 6109 00f4 02D0     	 beq .L381
 6110              	 .loc 13 1036 0 is_stmt 0 discriminator 1
 6111 00f6 FB7B     	 ldrb r3,[r7,#15]
 6112 00f8 0C2B     	 cmp r3,#12
 6113 00fa 00D9     	 bls .L382
 6114              	.L381:
1037:../cleanflight/src/main/interface/cli.c ****                 continue;
 6115              	 .loc 13 1037 0 is_stmt 1
 6116 00fc 25E0     	 b .L383
 6117              	.L382:
1038:../cleanflight/src/main/interface/cli.c ****             }
1039:../cleanflight/src/main/interface/cli.c ****             portConfig.msp_baudrateIndex = baudRateIndex;
 6118              	 .loc 13 1039 0
 6119 00fe FB7B     	 ldrb r3,[r7,#15]
 6120 0100 FB72     	 strb r3,[r7,#11]
1040:../cleanflight/src/main/interface/cli.c ****             break;
 6121              	 .loc 13 1040 0
 6122 0102 1DE0     	 b .L375
 6123              	.L378:
1041:../cleanflight/src/main/interface/cli.c ****         case 1:
1042:../cleanflight/src/main/interface/cli.c ****             if (baudRateIndex < BAUD_9600 || baudRateIndex > BAUD_115200) {
 6124              	 .loc 13 1042 0
 6125 0104 FB7B     	 ldrb r3,[r7,#15]
 6126 0106 002B     	 cmp r3,#0
 6127 0108 02D0     	 beq .L384
 6128              	 .loc 13 1042 0 is_stmt 0 discriminator 1
 6129 010a FB7B     	 ldrb r3,[r7,#15]
 6130 010c 052B     	 cmp r3,#5
 6131 010e 00D9     	 bls .L385
 6132              	.L384:
1043:../cleanflight/src/main/interface/cli.c ****                 continue;
 6133              	 .loc 13 1043 0 is_stmt 1
 6134 0110 1BE0     	 b .L383
 6135              	.L385:
1044:../cleanflight/src/main/interface/cli.c ****             }
1045:../cleanflight/src/main/interface/cli.c ****             portConfig.gps_baudrateIndex = baudRateIndex;
 6136              	 .loc 13 1045 0
 6137 0112 FB7B     	 ldrb r3,[r7,#15]
 6138 0114 3B73     	 strb r3,[r7,#12]
1046:../cleanflight/src/main/interface/cli.c ****             break;
 6139              	 .loc 13 1046 0
 6140 0116 13E0     	 b .L375
 6141              	.L379:
1047:../cleanflight/src/main/interface/cli.c ****         case 2:
1048:../cleanflight/src/main/interface/cli.c ****             if (baudRateIndex != BAUD_AUTO && baudRateIndex > BAUD_115200) {
 6142              	 .loc 13 1048 0
 6143 0118 FB7B     	 ldrb r3,[r7,#15]
 6144 011a 002B     	 cmp r3,#0
 6145 011c 03D0     	 beq .L386
 6146              	 .loc 13 1048 0 is_stmt 0 discriminator 1
 6147 011e FB7B     	 ldrb r3,[r7,#15]
 6148 0120 052B     	 cmp r3,#5
 6149 0122 00D9     	 bls .L386
1049:../cleanflight/src/main/interface/cli.c ****                 continue;
 6150              	 .loc 13 1049 0 is_stmt 1
 6151 0124 11E0     	 b .L383
 6152              	.L386:
1050:../cleanflight/src/main/interface/cli.c ****             }
1051:../cleanflight/src/main/interface/cli.c ****             portConfig.telemetry_baudrateIndex = baudRateIndex;
 6153              	 .loc 13 1051 0
 6154 0126 FB7B     	 ldrb r3,[r7,#15]
 6155 0128 BB73     	 strb r3,[r7,#14]
1052:../cleanflight/src/main/interface/cli.c ****             break;
 6156              	 .loc 13 1052 0
 6157 012a 09E0     	 b .L375
 6158              	.L380:
1053:../cleanflight/src/main/interface/cli.c ****         case 3:
1054:../cleanflight/src/main/interface/cli.c ****             if (baudRateIndex < BAUD_19200 || baudRateIndex > BAUD_2470000) {
 6159              	 .loc 13 1054 0
 6160 012c FB7B     	 ldrb r3,[r7,#15]
 6161 012e 012B     	 cmp r3,#1
 6162 0130 02D9     	 bls .L387
 6163              	 .loc 13 1054 0 is_stmt 0 discriminator 1
 6164 0132 FB7B     	 ldrb r3,[r7,#15]
 6165 0134 0F2B     	 cmp r3,#15
 6166 0136 00D9     	 bls .L388
 6167              	.L387:
1055:../cleanflight/src/main/interface/cli.c ****                 continue;
 6168              	 .loc 13 1055 0 is_stmt 1
 6169 0138 07E0     	 b .L383
 6170              	.L388:
1056:../cleanflight/src/main/interface/cli.c ****             }
1057:../cleanflight/src/main/interface/cli.c ****             portConfig.blackbox_baudrateIndex = baudRateIndex;
 6171              	 .loc 13 1057 0
 6172 013a FB7B     	 ldrb r3,[r7,#15]
 6173 013c 7B73     	 strb r3,[r7,#13]
1058:../cleanflight/src/main/interface/cli.c ****             break;
 6174              	 .loc 13 1058 0
 6175 013e 00BF     	 nop
 6176              	.L375:
1059:../cleanflight/src/main/interface/cli.c ****         }
1060:../cleanflight/src/main/interface/cli.c **** 
1061:../cleanflight/src/main/interface/cli.c ****         validArgumentCount++;
 6177              	 .loc 13 1061 0
 6178 0140 97F82730 	 ldrb r3,[r7,#39]
 6179 0144 0133     	 adds r3,r3,#1
 6180 0146 87F82730 	 strb r3,[r7,#39]
 6181              	.L383:
 6182              	.LBE34:
1021:../cleanflight/src/main/interface/cli.c ****         ptr = nextArg(ptr);
 6183              	 .loc 13 1021 0 discriminator 2
 6184 014a FB69     	 ldr r3,[r7,#28]
 6185 014c 0133     	 adds r3,r3,#1
 6186 014e FB61     	 str r3,[r7,#28]
 6187              	.L371:
1021:../cleanflight/src/main/interface/cli.c ****         ptr = nextArg(ptr);
 6188              	 .loc 13 1021 0 is_stmt 0 discriminator 1
 6189 0150 FB69     	 ldr r3,[r7,#28]
 6190 0152 032B     	 cmp r3,#3
 6191 0154 A4DD     	 ble .L389
 6192              	.L373:
 6193              	.LBE33:
1062:../cleanflight/src/main/interface/cli.c ****     }
1063:../cleanflight/src/main/interface/cli.c **** 
1064:../cleanflight/src/main/interface/cli.c ****     if (validArgumentCount < 6) {
 6194              	 .loc 13 1064 0 is_stmt 1
 6195 0156 97F82730 	 ldrb r3,[r7,#39]
 6196 015a 052B     	 cmp r3,#5
 6197 015c 02D8     	 bhi .L390
1065:../cleanflight/src/main/interface/cli.c ****         cliShowParseError();
 6198              	 .loc 13 1065 0
 6199 015e FFF7FEFF 	 bl cliShowParseError
1066:../cleanflight/src/main/interface/cli.c ****         return;
 6200              	 .loc 13 1066 0
 6201 0162 2CE0     	 b .L366
 6202              	.L390:
1067:../cleanflight/src/main/interface/cli.c ****     }
1068:../cleanflight/src/main/interface/cli.c **** 
1069:../cleanflight/src/main/interface/cli.c ****     memcpy(currentConfig, &portConfig, sizeof(portConfig));
 6203              	 .loc 13 1069 0
 6204 0164 3B69     	 ldr r3,[r7,#16]
 6205 0166 1A46     	 mov r2,r3
 6206 0168 07F10803 	 add r3,r7,#8
 6207 016c 1868     	 ldr r0,[r3]
 6208 016e 1060     	 str r0,[r2]
 6209 0170 9988     	 ldrh r1,[r3,#4]
 6210 0172 9B79     	 ldrb r3,[r3,#6]
 6211 0174 9180     	 strh r1,[r2,#4]
 6212 0176 9371     	 strb r3,[r2,#6]
1070:../cleanflight/src/main/interface/cli.c **** 
1071:../cleanflight/src/main/interface/cli.c ****     cliDumpPrintLinef(0, false, format,
1072:../cleanflight/src/main/interface/cli.c ****         portConfig.identifier,
 6213              	 .loc 13 1072 0
 6214 0178 BB7A     	 ldrb r3,[r7,#10]
1071:../cleanflight/src/main/interface/cli.c ****         portConfig.identifier,
 6215              	 .loc 13 1071 0
 6216 017a 5CB2     	 sxtb r4,r3
1073:../cleanflight/src/main/interface/cli.c ****         portConfig.functionMask,
 6217              	 .loc 13 1073 0
 6218 017c 3B89     	 ldrh r3,[r7,#8]
1071:../cleanflight/src/main/interface/cli.c ****         portConfig.identifier,
 6219              	 .loc 13 1071 0
 6220 017e 1D46     	 mov r5,r3
1074:../cleanflight/src/main/interface/cli.c ****         baudRates[portConfig.msp_baudrateIndex],
 6221              	 .loc 13 1074 0
 6222 0180 FB7A     	 ldrb r3,[r7,#11]
1071:../cleanflight/src/main/interface/cli.c ****         portConfig.identifier,
 6223              	 .loc 13 1071 0
 6224 0182 1A46     	 mov r2,r3
 6225 0184 104B     	 ldr r3,.L392+4
 6226 0186 53F82200 	 ldr r0,[r3,r2,lsl#2]
1075:../cleanflight/src/main/interface/cli.c ****         baudRates[portConfig.gps_baudrateIndex],
 6227              	 .loc 13 1075 0
 6228 018a 3B7B     	 ldrb r3,[r7,#12]
1071:../cleanflight/src/main/interface/cli.c ****         portConfig.identifier,
 6229              	 .loc 13 1071 0
 6230 018c 1A46     	 mov r2,r3
 6231 018e 0E4B     	 ldr r3,.L392+4
 6232 0190 53F82210 	 ldr r1,[r3,r2,lsl#2]
1076:../cleanflight/src/main/interface/cli.c ****         baudRates[portConfig.telemetry_baudrateIndex],
 6233              	 .loc 13 1076 0
 6234 0194 BB7B     	 ldrb r3,[r7,#14]
1071:../cleanflight/src/main/interface/cli.c ****         portConfig.identifier,
 6235              	 .loc 13 1071 0
 6236 0196 1A46     	 mov r2,r3
 6237 0198 0B4B     	 ldr r3,.L392+4
 6238 019a 53F82220 	 ldr r2,[r3,r2,lsl#2]
1077:../cleanflight/src/main/interface/cli.c ****         baudRates[portConfig.blackbox_baudrateIndex]
 6239              	 .loc 13 1077 0
 6240 019e 7B7B     	 ldrb r3,[r7,#13]
1071:../cleanflight/src/main/interface/cli.c ****         portConfig.identifier,
 6241              	 .loc 13 1071 0
 6242 01a0 1E46     	 mov r6,r3
 6243 01a2 094B     	 ldr r3,.L392+4
 6244 01a4 53F82630 	 ldr r3,[r3,r6,lsl#2]
 6245 01a8 0095     	 str r5,[sp]
 6246 01aa 0190     	 str r0,[sp,#4]
 6247 01ac 0291     	 str r1,[sp,#8]
 6248 01ae 0392     	 str r2,[sp,#12]
 6249 01b0 0493     	 str r3,[sp,#16]
 6250 01b2 0020     	 movs r0,#0
 6251 01b4 0021     	 movs r1,#0
 6252 01b6 BA69     	 ldr r2,[r7,#24]
 6253 01b8 2346     	 mov r3,r4
 6254 01ba FFF7FEFF 	 bl cliDumpPrintLinef
 6255              	.L366:
1078:../cleanflight/src/main/interface/cli.c ****         );
1079:../cleanflight/src/main/interface/cli.c **** 
1080:../cleanflight/src/main/interface/cli.c **** }
 6256              	 .loc 13 1080 0
 6257 01be 2C37     	 adds r7,r7,#44
 6258              	.LCFI349:
 6259              	 .cfi_def_cfa_offset 20
 6260 01c0 BD46     	 mov sp,r7
 6261              	.LCFI350:
 6262              	 .cfi_def_cfa_register 13
 6263              	 
 6264 01c2 F0BD     	 pop {r4,r5,r6,r7,pc}
 6265              	.L393:
 6266              	 .align 2
 6267              	.L392:
 6268 01c4 64030000 	 .word .LC81
 6269 01c8 00000000 	 .word baudRates
 6270              	 .cfi_endproc
 6271              	.LFE728:
 6273              	 .section .text.cbCtrlLine,"ax",%progbits
 6274              	 .align 2
 6275              	 .thumb
 6276              	 .thumb_func
 6278              	cbCtrlLine:
 6279              	.LFB729:
1081:../cleanflight/src/main/interface/cli.c **** 
1082:../cleanflight/src/main/interface/cli.c **** #ifndef SKIP_SERIAL_PASSTHROUGH
1083:../cleanflight/src/main/interface/cli.c **** #ifdef USE_PINIO
1084:../cleanflight/src/main/interface/cli.c **** static void cbCtrlLine(void *context, uint16_t ctrl)
1085:../cleanflight/src/main/interface/cli.c **** {
 6280              	 .loc 13 1085 0
 6281              	 .cfi_startproc
 6282              	 
 6283              	 
 6284 0000 80B5     	 push {r7,lr}
 6285              	.LCFI351:
 6286              	 .cfi_def_cfa_offset 8
 6287              	 .cfi_offset 7,-8
 6288              	 .cfi_offset 14,-4
 6289 0002 84B0     	 sub sp,sp,#16
 6290              	.LCFI352:
 6291              	 .cfi_def_cfa_offset 24
 6292 0004 00AF     	 add r7,sp,#0
 6293              	.LCFI353:
 6294              	 .cfi_def_cfa_register 7
 6295 0006 7860     	 str r0,[r7,#4]
 6296 0008 0B46     	 mov r3,r1
 6297 000a 7B80     	 strh r3,[r7,#2]
1086:../cleanflight/src/main/interface/cli.c ****     int pinioDtr = (int)(long)context;
 6298              	 .loc 13 1086 0
 6299 000c 7B68     	 ldr r3,[r7,#4]
 6300 000e FB60     	 str r3,[r7,#12]
1087:../cleanflight/src/main/interface/cli.c **** 
1088:../cleanflight/src/main/interface/cli.c ****     pinioSet(pinioDtr, !(ctrl & CTRL_LINE_STATE_DTR));
 6301              	 .loc 13 1088 0
 6302 0010 7B88     	 ldrh r3,[r7,#2]
 6303 0012 03F00103 	 and r3,r3,#1
 6304 0016 002B     	 cmp r3,#0
 6305 0018 0CBF     	 ite eq
 6306 001a 0123     	 moveq r3,#1
 6307 001c 0023     	 movne r3,#0
 6308 001e DBB2     	 uxtb r3,r3
 6309 0020 F868     	 ldr r0,[r7,#12]
 6310 0022 1946     	 mov r1,r3
 6311 0024 FFF7FEFF 	 bl pinioSet
1089:../cleanflight/src/main/interface/cli.c **** }
 6312              	 .loc 13 1089 0
 6313 0028 1037     	 adds r7,r7,#16
 6314              	.LCFI354:
 6315              	 .cfi_def_cfa_offset 8
 6316 002a BD46     	 mov sp,r7
 6317              	.LCFI355:
 6318              	 .cfi_def_cfa_register 13
 6319              	 
 6320 002c 80BD     	 pop {r7,pc}
 6321              	 .cfi_endproc
 6322              	.LFE729:
 6324 002e 00BF     	 .section .rodata
 6325 0381 000000   	 .align 2
 6326              	.LC82:
 6327 0384 2000     	 .ascii " \000"
 6328 0386 0000     	 .align 2
 6329              	.LC83:
 6330 0388 727800   	 .ascii "rx\000"
 6331 038b 00       	 .align 2
 6332              	.LC84:
 6333 038c 525800   	 .ascii "RX\000"
 6334 038f 00       	 .align 2
 6335              	.LC85:
 6336 0390 747800   	 .ascii "tx\000"
 6337 0393 00       	 .align 2
 6338              	.LC86:
 6339 0394 545800   	 .ascii "TX\000"
 6340 0397 00       	 .align 2
 6341              	.LC87:
 6342 0398 506F7274 	 .ascii "Port %d \000"
 6342      20256420 
 6342      00
 6343 03a1 000000   	 .align 2
 6344              	.LC88:
 6345 03a4 636F756C 	 .ascii "could not be opened.\000"
 6345      64206E6F 
 6345      74206265 
 6345      206F7065 
 6345      6E65642E 
 6346 03b9 000000   	 .align 2
 6347              	.LC89:
 6348 03bc 6F70656E 	 .ascii "opened, default baud = %d.\015\012\000"
 6348      65642C20 
 6348      64656661 
 6348      756C7420 
 6348      62617564 
 6349 03d9 000000   	 .align 2
 6350              	.LC90:
 6351 03dc 6F70656E 	 .ascii "opened, baud = %d.\015\012\000"
 6351      65642C20 
 6351      62617564 
 6351      203D2025 
 6351      642E0D0A 
 6352 03f1 000000   	 .align 2
 6353              	.LC91:
 6354 03f4 616C7265 	 .ascii "already open, setting baud = %d.\012\015\000"
 6354      61647920 
 6354      6F70656E 
 6354      2C207365 
 6354      7474696E 
 6355 0417 00       	 .align 2
 6356              	.LC92:
 6357 0418 616C7265 	 .ascii "already open, baud = %d.\012\015\000"
 6357      61647920 
 6357      6F70656E 
 6357      2C206261 
 6357      7564203D 
 6358 0433 00       	 .align 2
 6359              	.LC93:
 6360 0434 4D6F6465 	 .ascii "Mode changed from %d to %d.\015\012\000"
 6360      20636861 
 6360      6E676564 
 6360      2066726F 
 6360      6D202564 
 6361 0452 0000     	 .align 2
 6362              	.LC94:
 6363 0454 42617564 	 .ascii "Baud rate change over USB enabled.\000"
 6363      20726174 
 6363      65206368 
 6363      616E6765 
 6363      206F7665 
 6364 0477 00       	 .align 2
 6365              	.LC95:
 6366 0478 466F7277 	 .ascii "Forwarding, power cycle to exit.\000"
 6366      61726469 
 6366      6E672C20 
 6366      706F7765 
 6366      72206379 
 6367              	 .section .text.cliSerialPassthrough,"ax",%progbits
 6368              	 .align 2
 6369              	 .thumb
 6370              	 .thumb_func
 6372              	cliSerialPassthrough:
 6373              	.LFB730:
1090:../cleanflight/src/main/interface/cli.c **** #endif /* USE_PINIO */
1091:../cleanflight/src/main/interface/cli.c **** 
1092:../cleanflight/src/main/interface/cli.c **** static void cliSerialPassthrough(char *cmdline)
1093:../cleanflight/src/main/interface/cli.c **** {
 6374              	 .loc 13 1093 0
 6375              	 .cfi_startproc
 6376              	 
 6377              	 
 6378 0000 80B5     	 push {r7,lr}
 6379              	.LCFI356:
 6380              	 .cfi_def_cfa_offset 8
 6381              	 .cfi_offset 7,-8
 6382              	 .cfi_offset 14,-4
 6383 0002 90B0     	 sub sp,sp,#64
 6384              	.LCFI357:
 6385              	 .cfi_def_cfa_offset 72
 6386 0004 04AF     	 add r7,sp,#16
 6387              	.LCFI358:
 6388              	 .cfi_def_cfa 7,56
 6389 0006 7860     	 str r0,[r7,#4]
1094:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 6390              	 .loc 13 1094 0
 6391 0008 7868     	 ldr r0,[r7,#4]
 6392 000a FFF7FEFF 	 bl isEmpty
 6393 000e 0346     	 mov r3,r0
 6394 0010 002B     	 cmp r3,#0
 6395 0012 02D0     	 beq .L396
1095:../cleanflight/src/main/interface/cli.c ****         cliShowParseError();
 6396              	 .loc 13 1095 0
 6397 0014 FFF7FEFF 	 bl cliShowParseError
1096:../cleanflight/src/main/interface/cli.c ****         return;
 6398              	 .loc 13 1096 0
 6399 0018 15E1     	 b .L395
 6400              	.L396:
1097:../cleanflight/src/main/interface/cli.c ****     }
1098:../cleanflight/src/main/interface/cli.c **** 
1099:../cleanflight/src/main/interface/cli.c ****     int id = -1;
 6401              	 .loc 13 1099 0
 6402 001a 4FF0FF33 	 mov r3,#-1
 6403 001e FB62     	 str r3,[r7,#44]
1100:../cleanflight/src/main/interface/cli.c ****     uint32_t baud = 0;
 6404              	 .loc 13 1100 0
 6405 0020 0023     	 movs r3,#0
 6406 0022 BB62     	 str r3,[r7,#40]
1101:../cleanflight/src/main/interface/cli.c ****     bool enableBaudCb = false;
 6407              	 .loc 13 1101 0
 6408 0024 0023     	 movs r3,#0
 6409 0026 87F82730 	 strb r3,[r7,#39]
1102:../cleanflight/src/main/interface/cli.c **** #ifdef USE_PINIO
1103:../cleanflight/src/main/interface/cli.c ****     int pinioDtr = 0;
 6410              	 .loc 13 1103 0
 6411 002a 0023     	 movs r3,#0
 6412 002c 3B62     	 str r3,[r7,#32]
1104:../cleanflight/src/main/interface/cli.c **** #endif /* USE_PINIO */
1105:../cleanflight/src/main/interface/cli.c ****     unsigned mode = 0;
 6413              	 .loc 13 1105 0
 6414 002e 0023     	 movs r3,#0
 6415 0030 FB61     	 str r3,[r7,#28]
1106:../cleanflight/src/main/interface/cli.c ****     char *saveptr;
1107:../cleanflight/src/main/interface/cli.c ****     char* tok = strtok_r(cmdline, " ", &saveptr);
 6416              	 .loc 13 1107 0
 6417 0032 07F10803 	 add r3,r7,#8
 6418 0036 7868     	 ldr r0,[r7,#4]
 6419 0038 8449     	 ldr r1,.L425
 6420 003a 1A46     	 mov r2,r3
 6421 003c FFF7FEFF 	 bl strtok_r
 6422 0040 B861     	 str r0,[r7,#24]
1108:../cleanflight/src/main/interface/cli.c ****     int index = 0;
 6423              	 .loc 13 1108 0
 6424 0042 0023     	 movs r3,#0
 6425 0044 7B61     	 str r3,[r7,#20]
1109:../cleanflight/src/main/interface/cli.c **** 
1110:../cleanflight/src/main/interface/cli.c ****     while (tok != NULL) {
 6426              	 .loc 13 1110 0
 6427 0046 4EE0     	 b .L398
 6428              	.L409:
1111:../cleanflight/src/main/interface/cli.c ****         switch (index) {
 6429              	 .loc 13 1111 0
 6430 0048 7B69     	 ldr r3,[r7,#20]
 6431 004a 032B     	 cmp r3,#3
 6432 004c 40D8     	 bhi .L399
 6433 004e 01A2     	 adr r2,.L401
 6434 0050 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6435              	 .p2align 2
 6436              	.L401:
 6437 0054 65000000 	 .word .L400+1
 6438 0058 6F000000 	 .word .L402+1
 6439 005c 7B000000 	 .word .L403+1
 6440 0060 C7000000 	 .word .L404+1
 6441              	 .p2align 1
 6442              	.L400:
1112:../cleanflight/src/main/interface/cli.c ****         case 0:
1113:../cleanflight/src/main/interface/cli.c ****             id = atoi(tok);
 6443              	 .loc 13 1113 0
 6444 0064 B869     	 ldr r0,[r7,#24]
 6445 0066 FFF7FEFF 	 bl atoi
 6446 006a F862     	 str r0,[r7,#44]
1114:../cleanflight/src/main/interface/cli.c ****             break;
 6447              	 .loc 13 1114 0
 6448 006c 30E0     	 b .L399
 6449              	.L402:
1115:../cleanflight/src/main/interface/cli.c ****         case 1:
1116:../cleanflight/src/main/interface/cli.c ****             baud = atoi(tok);
 6450              	 .loc 13 1116 0
 6451 006e B869     	 ldr r0,[r7,#24]
 6452 0070 FFF7FEFF 	 bl atoi
 6453 0074 0346     	 mov r3,r0
 6454 0076 BB62     	 str r3,[r7,#40]
1117:../cleanflight/src/main/interface/cli.c ****             break;
 6455              	 .loc 13 1117 0
 6456 0078 2AE0     	 b .L399
 6457              	.L403:
1118:../cleanflight/src/main/interface/cli.c ****         case 2:
1119:../cleanflight/src/main/interface/cli.c ****             if (strstr(tok, "rx") || strstr(tok, "RX"))
 6458              	 .loc 13 1119 0
 6459 007a B869     	 ldr r0,[r7,#24]
 6460 007c 7449     	 ldr r1,.L425+4
 6461 007e FFF7FEFF 	 bl strstr
 6462 0082 0346     	 mov r3,r0
 6463 0084 002B     	 cmp r3,#0
 6464 0086 06D1     	 bne .L405
 6465              	 .loc 13 1119 0 is_stmt 0 discriminator 1
 6466 0088 B869     	 ldr r0,[r7,#24]
 6467 008a 7249     	 ldr r1,.L425+8
 6468 008c FFF7FEFF 	 bl strstr
 6469 0090 0346     	 mov r3,r0
 6470 0092 002B     	 cmp r3,#0
 6471 0094 03D0     	 beq .L406
 6472              	.L405:
1120:../cleanflight/src/main/interface/cli.c ****                 mode |= MODE_RX;
 6473              	 .loc 13 1120 0 is_stmt 1
 6474 0096 FB69     	 ldr r3,[r7,#28]
 6475 0098 43F00103 	 orr r3,r3,#1
 6476 009c FB61     	 str r3,[r7,#28]
 6477              	.L406:
1121:../cleanflight/src/main/interface/cli.c ****             if (strstr(tok, "tx") || strstr(tok, "TX"))
 6478              	 .loc 13 1121 0
 6479 009e B869     	 ldr r0,[r7,#24]
 6480 00a0 6D49     	 ldr r1,.L425+12
 6481 00a2 FFF7FEFF 	 bl strstr
 6482 00a6 0346     	 mov r3,r0
 6483 00a8 002B     	 cmp r3,#0
 6484 00aa 06D1     	 bne .L407
 6485              	 .loc 13 1121 0 is_stmt 0 discriminator 1
 6486 00ac B869     	 ldr r0,[r7,#24]
 6487 00ae 6B49     	 ldr r1,.L425+16
 6488 00b0 FFF7FEFF 	 bl strstr
 6489 00b4 0346     	 mov r3,r0
 6490 00b6 002B     	 cmp r3,#0
 6491 00b8 04D0     	 beq .L408
 6492              	.L407:
1122:../cleanflight/src/main/interface/cli.c ****                 mode |= MODE_TX;
 6493              	 .loc 13 1122 0 is_stmt 1
 6494 00ba FB69     	 ldr r3,[r7,#28]
 6495 00bc 43F00203 	 orr r3,r3,#2
 6496 00c0 FB61     	 str r3,[r7,#28]
1123:../cleanflight/src/main/interface/cli.c ****             break;
 6497              	 .loc 13 1123 0
 6498 00c2 05E0     	 b .L399
 6499              	.L408:
 6500 00c4 04E0     	 b .L399
 6501              	.L404:
1124:../cleanflight/src/main/interface/cli.c **** #ifdef USE_PINIO
1125:../cleanflight/src/main/interface/cli.c ****         case 3:
1126:../cleanflight/src/main/interface/cli.c ****             pinioDtr = atoi(tok);
 6502              	 .loc 13 1126 0
 6503 00c6 B869     	 ldr r0,[r7,#24]
 6504 00c8 FFF7FEFF 	 bl atoi
 6505 00cc 3862     	 str r0,[r7,#32]
1127:../cleanflight/src/main/interface/cli.c ****             break;
 6506              	 .loc 13 1127 0
 6507 00ce 00BF     	 nop
 6508              	.L399:
1128:../cleanflight/src/main/interface/cli.c **** #endif /* USE_PINIO */
1129:../cleanflight/src/main/interface/cli.c ****         }
1130:../cleanflight/src/main/interface/cli.c ****         index++;
 6509              	 .loc 13 1130 0
 6510 00d0 7B69     	 ldr r3,[r7,#20]
 6511 00d2 0133     	 adds r3,r3,#1
 6512 00d4 7B61     	 str r3,[r7,#20]
1131:../cleanflight/src/main/interface/cli.c ****         tok = strtok_r(NULL, " ", &saveptr);
 6513              	 .loc 13 1131 0
 6514 00d6 07F10803 	 add r3,r7,#8
 6515 00da 0020     	 movs r0,#0
 6516 00dc 5B49     	 ldr r1,.L425
 6517 00de 1A46     	 mov r2,r3
 6518 00e0 FFF7FEFF 	 bl strtok_r
 6519 00e4 B861     	 str r0,[r7,#24]
 6520              	.L398:
1110:../cleanflight/src/main/interface/cli.c ****         switch (index) {
 6521              	 .loc 13 1110 0
 6522 00e6 BB69     	 ldr r3,[r7,#24]
 6523 00e8 002B     	 cmp r3,#0
 6524 00ea ADD1     	 bne .L409
1132:../cleanflight/src/main/interface/cli.c ****     }
1133:../cleanflight/src/main/interface/cli.c **** 
1134:../cleanflight/src/main/interface/cli.c ****     if (baud == 0) {
 6525              	 .loc 13 1134 0
 6526 00ec BB6A     	 ldr r3,[r7,#40]
 6527 00ee 002B     	 cmp r3,#0
 6528 00f0 02D1     	 bne .L410
1135:../cleanflight/src/main/interface/cli.c ****         enableBaudCb = true;
 6529              	 .loc 13 1135 0
 6530 00f2 0123     	 movs r3,#1
 6531 00f4 87F82730 	 strb r3,[r7,#39]
 6532              	.L410:
1136:../cleanflight/src/main/interface/cli.c ****     }
1137:../cleanflight/src/main/interface/cli.c **** 
1138:../cleanflight/src/main/interface/cli.c ****     cliPrintf("Port %d ", id);
 6533              	 .loc 13 1138 0
 6534 00f8 5948     	 ldr r0,.L425+20
 6535 00fa F96A     	 ldr r1,[r7,#44]
 6536 00fc FFF7FEFF 	 bl cliPrintf
1139:../cleanflight/src/main/interface/cli.c ****     serialPort_t *passThroughPort;
1140:../cleanflight/src/main/interface/cli.c ****     serialPortUsage_t *passThroughPortUsage = findSerialPortUsageByIdentifier(id);
 6537              	 .loc 13 1140 0
 6538 0100 FB6A     	 ldr r3,[r7,#44]
 6539 0102 DBB2     	 uxtb r3,r3
 6540 0104 5BB2     	 sxtb r3,r3
 6541 0106 1846     	 mov r0,r3
 6542 0108 FFF7FEFF 	 bl findSerialPortUsageByIdentifier
 6543 010c F860     	 str r0,[r7,#12]
1141:../cleanflight/src/main/interface/cli.c ****     if (!passThroughPortUsage || passThroughPortUsage->serialPort == NULL) {
 6544              	 .loc 13 1141 0
 6545 010e FB68     	 ldr r3,[r7,#12]
 6546 0110 002B     	 cmp r3,#0
 6547 0112 03D0     	 beq .L411
 6548              	 .loc 13 1141 0 is_stmt 0 discriminator 1
 6549 0114 FB68     	 ldr r3,[r7,#12]
 6550 0116 1B68     	 ldr r3,[r3]
 6551 0118 002B     	 cmp r3,#0
 6552 011a 31D1     	 bne .L412
 6553              	.L411:
1142:../cleanflight/src/main/interface/cli.c ****         if (enableBaudCb) {
 6554              	 .loc 13 1142 0 is_stmt 1
 6555 011c 97F82730 	 ldrb r3,[r7,#39]
 6556 0120 002B     	 cmp r3,#0
 6557 0122 02D0     	 beq .L413
1143:../cleanflight/src/main/interface/cli.c ****             // Set default baud
1144:../cleanflight/src/main/interface/cli.c ****             baud = 57600;
 6558              	 .loc 13 1144 0
 6559 0124 4FF46143 	 mov r3,#57600
 6560 0128 BB62     	 str r3,[r7,#40]
 6561              	.L413:
1145:../cleanflight/src/main/interface/cli.c ****         }
1146:../cleanflight/src/main/interface/cli.c **** 
1147:../cleanflight/src/main/interface/cli.c ****         if (!mode) {
 6562              	 .loc 13 1147 0
 6563 012a FB69     	 ldr r3,[r7,#28]
 6564 012c 002B     	 cmp r3,#0
 6565 012e 01D1     	 bne .L414
1148:../cleanflight/src/main/interface/cli.c ****             mode = MODE_RXTX;
 6566              	 .loc 13 1148 0
 6567 0130 0323     	 movs r3,#3
 6568 0132 FB61     	 str r3,[r7,#28]
 6569              	.L414:
1149:../cleanflight/src/main/interface/cli.c ****         }
1150:../cleanflight/src/main/interface/cli.c **** 
1151:../cleanflight/src/main/interface/cli.c ****         passThroughPort = openSerialPort(id, FUNCTION_NONE, NULL, NULL,
 6570              	 .loc 13 1151 0
 6571 0134 FB6A     	 ldr r3,[r7,#44]
 6572 0136 DAB2     	 uxtb r2,r3
 6573 0138 FB69     	 ldr r3,[r7,#28]
 6574 013a DBB2     	 uxtb r3,r3
 6575 013c 51B2     	 sxtb r1,r2
 6576 013e BA6A     	 ldr r2,[r7,#40]
 6577 0140 0092     	 str r2,[sp]
 6578 0142 0193     	 str r3,[sp,#4]
 6579 0144 0023     	 movs r3,#0
 6580 0146 0293     	 str r3,[sp,#8]
 6581 0148 0846     	 mov r0,r1
 6582 014a 0021     	 movs r1,#0
 6583 014c 0022     	 movs r2,#0
 6584 014e 0023     	 movs r3,#0
 6585 0150 FFF7FEFF 	 bl openSerialPort
 6586 0154 3861     	 str r0,[r7,#16]
1152:../cleanflight/src/main/interface/cli.c ****                                          baud, mode,
1153:../cleanflight/src/main/interface/cli.c ****                                          SERIAL_NOT_INVERTED);
1154:../cleanflight/src/main/interface/cli.c ****         if (!passThroughPort) {
 6587              	 .loc 13 1154 0
 6588 0156 3B69     	 ldr r3,[r7,#16]
 6589 0158 002B     	 cmp r3,#0
 6590 015a 03D1     	 bne .L415
1155:../cleanflight/src/main/interface/cli.c ****             cliPrintLine("could not be opened.");
 6591              	 .loc 13 1155 0
 6592 015c 4148     	 ldr r0,.L425+24
 6593 015e FFF7FEFF 	 bl cliPrintLine
1156:../cleanflight/src/main/interface/cli.c ****             return;
 6594              	 .loc 13 1156 0
 6595 0162 70E0     	 b .L395
 6596              	.L415:
1157:../cleanflight/src/main/interface/cli.c ****         }
1158:../cleanflight/src/main/interface/cli.c **** 
1159:../cleanflight/src/main/interface/cli.c ****         if (enableBaudCb) {
 6597              	 .loc 13 1159 0
 6598 0164 97F82730 	 ldrb r3,[r7,#39]
 6599 0168 002B     	 cmp r3,#0
 6600 016a 04D0     	 beq .L416
1160:../cleanflight/src/main/interface/cli.c ****             cliPrintf("opened, default baud = %d.\r\n", baud);
 6601              	 .loc 13 1160 0
 6602 016c 3E48     	 ldr r0,.L425+28
 6603 016e B96A     	 ldr r1,[r7,#40]
 6604 0170 FFF7FEFF 	 bl cliPrintf
1159:../cleanflight/src/main/interface/cli.c ****             cliPrintf("opened, default baud = %d.\r\n", baud);
 6605              	 .loc 13 1159 0
 6606 0174 42E0     	 b .L418
 6607              	.L416:
1161:../cleanflight/src/main/interface/cli.c ****         } else {
1162:../cleanflight/src/main/interface/cli.c ****             cliPrintf("opened, baud = %d.\r\n", baud);
 6608              	 .loc 13 1162 0
 6609 0176 3D48     	 ldr r0,.L425+32
 6610 0178 B96A     	 ldr r1,[r7,#40]
 6611 017a FFF7FEFF 	 bl cliPrintf
1159:../cleanflight/src/main/interface/cli.c ****             cliPrintf("opened, default baud = %d.\r\n", baud);
 6612              	 .loc 13 1159 0
 6613 017e 3DE0     	 b .L418
 6614              	.L412:
1163:../cleanflight/src/main/interface/cli.c ****         }
1164:../cleanflight/src/main/interface/cli.c ****     } else {
1165:../cleanflight/src/main/interface/cli.c ****         passThroughPort = passThroughPortUsage->serialPort;
 6615              	 .loc 13 1165 0
 6616 0180 FB68     	 ldr r3,[r7,#12]
 6617 0182 1B68     	 ldr r3,[r3]
 6618 0184 3B61     	 str r3,[r7,#16]
1166:../cleanflight/src/main/interface/cli.c ****         // If the user supplied a mode, override the port's mode, otherwise
1167:../cleanflight/src/main/interface/cli.c ****         // leave the mode unchanged. serialPassthrough() handles one-way ports.
1168:../cleanflight/src/main/interface/cli.c ****         // Set the baud rate if specified
1169:../cleanflight/src/main/interface/cli.c ****         if (baud) {
 6619              	 .loc 13 1169 0
 6620 0186 BB6A     	 ldr r3,[r7,#40]
 6621 0188 002B     	 cmp r3,#0
 6622 018a 08D0     	 beq .L419
1170:../cleanflight/src/main/interface/cli.c ****             cliPrintf("already open, setting baud = %d.\n\r", baud);
 6623              	 .loc 13 1170 0
 6624 018c 3848     	 ldr r0,.L425+36
 6625 018e B96A     	 ldr r1,[r7,#40]
 6626 0190 FFF7FEFF 	 bl cliPrintf
1171:../cleanflight/src/main/interface/cli.c ****             serialSetBaudRate(passThroughPort, baud);
 6627              	 .loc 13 1171 0
 6628 0194 3869     	 ldr r0,[r7,#16]
 6629 0196 B96A     	 ldr r1,[r7,#40]
 6630 0198 FFF7FEFF 	 bl serialSetBaudRate
 6631 019c 06E0     	 b .L420
 6632              	.L419:
1172:../cleanflight/src/main/interface/cli.c ****         } else {
1173:../cleanflight/src/main/interface/cli.c ****             cliPrintf("already open, baud = %d.\n\r", passThroughPort->baudRate);
 6633              	 .loc 13 1173 0
 6634 019e 3B69     	 ldr r3,[r7,#16]
 6635 01a0 D3F80630 	 ldr r3,[r3,#6]
 6636 01a4 3348     	 ldr r0,.L425+40
 6637 01a6 1946     	 mov r1,r3
 6638 01a8 FFF7FEFF 	 bl cliPrintf
 6639              	.L420:
1174:../cleanflight/src/main/interface/cli.c ****         }
1175:../cleanflight/src/main/interface/cli.c **** 
1176:../cleanflight/src/main/interface/cli.c ****         if (mode && passThroughPort->mode != mode) {
 6640              	 .loc 13 1176 0
 6641 01ac FB69     	 ldr r3,[r7,#28]
 6642 01ae 002B     	 cmp r3,#0
 6643 01b0 12D0     	 beq .L421
 6644              	 .loc 13 1176 0 is_stmt 0 discriminator 1
 6645 01b2 3B69     	 ldr r3,[r7,#16]
 6646 01b4 1B79     	 ldrb r3,[r3,#4]
 6647 01b6 1A46     	 mov r2,r3
 6648 01b8 FB69     	 ldr r3,[r7,#28]
 6649 01ba 9A42     	 cmp r2,r3
 6650 01bc 0CD0     	 beq .L421
1177:../cleanflight/src/main/interface/cli.c ****             cliPrintf("Mode changed from %d to %d.\r\n",
1178:../cleanflight/src/main/interface/cli.c ****                    passThroughPort->mode, mode);
 6651              	 .loc 13 1178 0 is_stmt 1
 6652 01be 3B69     	 ldr r3,[r7,#16]
 6653 01c0 1B79     	 ldrb r3,[r3,#4]
1177:../cleanflight/src/main/interface/cli.c ****             cliPrintf("Mode changed from %d to %d.\r\n",
 6654              	 .loc 13 1177 0
 6655 01c2 2D48     	 ldr r0,.L425+44
 6656 01c4 1946     	 mov r1,r3
 6657 01c6 FA69     	 ldr r2,[r7,#28]
 6658 01c8 FFF7FEFF 	 bl cliPrintf
1179:../cleanflight/src/main/interface/cli.c ****             serialSetMode(passThroughPort, mode);
 6659              	 .loc 13 1179 0
 6660 01cc FB69     	 ldr r3,[r7,#28]
 6661 01ce DBB2     	 uxtb r3,r3
 6662 01d0 3869     	 ldr r0,[r7,#16]
 6663 01d2 1946     	 mov r1,r3
 6664 01d4 FFF7FEFF 	 bl serialSetMode
 6665              	.L421:
1180:../cleanflight/src/main/interface/cli.c ****         }
1181:../cleanflight/src/main/interface/cli.c **** 
1182:../cleanflight/src/main/interface/cli.c ****         // If this port has a rx callback associated we need to remove it now.
1183:../cleanflight/src/main/interface/cli.c ****         // Otherwise no data will be pushed in the serial port buffer!
1184:../cleanflight/src/main/interface/cli.c ****         if (passThroughPort->rxCallback) {
 6666              	 .loc 13 1184 0
 6667 01d8 3B69     	 ldr r3,[r7,#16]
 6668 01da D3F82A30 	 ldr r3,[r3,#42]
 6669 01de 002B     	 cmp r3,#0
 6670 01e0 0CD0     	 beq .L418
1185:../cleanflight/src/main/interface/cli.c ****             passThroughPort->rxCallback = 0;
 6671              	 .loc 13 1185 0
 6672 01e2 3B69     	 ldr r3,[r7,#16]
 6673 01e4 0022     	 movs r2,#0
 6674 01e6 83F82A20 	 strb r2,[r3,#42]
 6675 01ea 0022     	 movs r2,#0
 6676 01ec 83F82B20 	 strb r2,[r3,#43]
 6677 01f0 0022     	 movs r2,#0
 6678 01f2 83F82C20 	 strb r2,[r3,#44]
 6679 01f6 0022     	 movs r2,#0
 6680 01f8 83F82D20 	 strb r2,[r3,#45]
 6681              	.L418:
1186:../cleanflight/src/main/interface/cli.c ****         }
1187:../cleanflight/src/main/interface/cli.c ****     }
1188:../cleanflight/src/main/interface/cli.c **** 
1189:../cleanflight/src/main/interface/cli.c ****     // If no baud rate is specified allow to be set via USB
1190:../cleanflight/src/main/interface/cli.c ****     if (enableBaudCb) {
 6682              	 .loc 13 1190 0
 6683 01fc 97F82730 	 ldrb r3,[r7,#39]
 6684 0200 002B     	 cmp r3,#0
 6685 0202 09D0     	 beq .L422
1191:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("Baud rate change over USB enabled.");
 6686              	 .loc 13 1191 0
 6687 0204 1D48     	 ldr r0,.L425+48
 6688 0206 FFF7FEFF 	 bl cliPrintLine
1192:../cleanflight/src/main/interface/cli.c ****         // Register the right side baud rate setting routine with the left side which allows settin
1193:../cleanflight/src/main/interface/cli.c ****         // baud rate over USB without setting it using the serialpassthrough command
1194:../cleanflight/src/main/interface/cli.c ****         serialSetBaudRateCb(cliPort, serialSetBaudRate, passThroughPort);
 6689              	 .loc 13 1194 0
 6690 020a 1D4B     	 ldr r3,.L425+52
 6691 020c 1B68     	 ldr r3,[r3]
 6692 020e 1846     	 mov r0,r3
 6693 0210 1C49     	 ldr r1,.L425+56
 6694 0212 3A69     	 ldr r2,[r7,#16]
 6695 0214 FFF7FEFF 	 bl serialSetBaudRateCb
 6696              	.L422:
1195:../cleanflight/src/main/interface/cli.c ****     }
1196:../cleanflight/src/main/interface/cli.c **** 
1197:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("Forwarding, power cycle to exit.");
 6697              	 .loc 13 1197 0
 6698 0218 1B48     	 ldr r0,.L425+60
 6699 021a FFF7FEFF 	 bl cliPrintLine
1198:../cleanflight/src/main/interface/cli.c **** 
1199:../cleanflight/src/main/interface/cli.c **** #ifdef USE_PINIO
1200:../cleanflight/src/main/interface/cli.c ****     // Register control line state callback
1201:../cleanflight/src/main/interface/cli.c ****     if (pinioDtr) {
 6700              	 .loc 13 1201 0
 6701 021e 3B6A     	 ldr r3,[r7,#32]
 6702 0220 002B     	 cmp r3,#0
 6703 0222 08D0     	 beq .L423
1202:../cleanflight/src/main/interface/cli.c ****         serialSetCtrlLineStateCb(cliPort, cbCtrlLine, (void *)(intptr_t)(pinioDtr - 1));
 6704              	 .loc 13 1202 0
 6705 0224 164B     	 ldr r3,.L425+52
 6706 0226 1A68     	 ldr r2,[r3]
 6707 0228 3B6A     	 ldr r3,[r7,#32]
 6708 022a 013B     	 subs r3,r3,#1
 6709 022c 1046     	 mov r0,r2
 6710 022e 1749     	 ldr r1,.L425+64
 6711 0230 1A46     	 mov r2,r3
 6712 0232 FFF7FEFF 	 bl serialSetCtrlLineStateCb
 6713              	.L423:
1203:../cleanflight/src/main/interface/cli.c ****     }
1204:../cleanflight/src/main/interface/cli.c **** #endif /* USE_PINIO */
1205:../cleanflight/src/main/interface/cli.c **** 
1206:../cleanflight/src/main/interface/cli.c ****     serialPassthrough(cliPort, passThroughPort, NULL, NULL);
 6714              	 .loc 13 1206 0
 6715 0236 124B     	 ldr r3,.L425+52
 6716 0238 1B68     	 ldr r3,[r3]
 6717 023a 1846     	 mov r0,r3
 6718 023c 3969     	 ldr r1,[r7,#16]
 6719 023e 0022     	 movs r2,#0
 6720 0240 0023     	 movs r3,#0
 6721 0242 FFF7FEFF 	 bl serialPassthrough
 6722              	.L395:
1207:../cleanflight/src/main/interface/cli.c **** }
 6723              	 .loc 13 1207 0
 6724 0246 3037     	 adds r7,r7,#48
 6725              	.LCFI359:
 6726              	 .cfi_def_cfa_offset 8
 6727 0248 BD46     	 mov sp,r7
 6728              	.LCFI360:
 6729              	 .cfi_def_cfa_register 13
 6730              	 
 6731 024a 80BD     	 pop {r7,pc}
 6732              	.L426:
 6733              	 .align 2
 6734              	.L425:
 6735 024c 84030000 	 .word .LC82
 6736 0250 88030000 	 .word .LC83
 6737 0254 8C030000 	 .word .LC84
 6738 0258 90030000 	 .word .LC85
 6739 025c 94030000 	 .word .LC86
 6740 0260 98030000 	 .word .LC87
 6741 0264 A4030000 	 .word .LC88
 6742 0268 BC030000 	 .word .LC89
 6743 026c DC030000 	 .word .LC90
 6744 0270 F4030000 	 .word .LC91
 6745 0274 18040000 	 .word .LC92
 6746 0278 34040000 	 .word .LC93
 6747 027c 54040000 	 .word .LC94
 6748 0280 00000000 	 .word cliPort
 6749 0284 00000000 	 .word serialSetBaudRate
 6750 0288 78040000 	 .word .LC95
 6751 028c 00000000 	 .word cbCtrlLine
 6752              	 .cfi_endproc
 6753              	.LFE730:
 6755              	 .section .rodata
 6756 0499 000000   	 .align 2
 6757              	.LC96:
 6758 049c 61646A72 	 .ascii "adjrange %u %u %u %u %u %u %u %u %u\000"
 6758      616E6765 
 6758      20257520 
 6758      25752025 
 6758      75202575 
 6759              	 .section .text.printAdjustmentRange,"ax",%progbits
 6760              	 .align 2
 6761              	 .thumb
 6762              	 .thumb_func
 6764              	printAdjustmentRange:
 6765              	.LFB731:
1208:../cleanflight/src/main/interface/cli.c **** #endif
1209:../cleanflight/src/main/interface/cli.c **** 
1210:../cleanflight/src/main/interface/cli.c **** static void printAdjustmentRange(uint8_t dumpMask, const adjustmentRange_t *adjustmentRanges, const
1211:../cleanflight/src/main/interface/cli.c **** {
 6766              	 .loc 13 1211 0
 6767              	 .cfi_startproc
 6768              	 
 6769              	 
 6770 0000 2DE9F041 	 push {r4,r5,r6,r7,r8,lr}
 6771              	.LCFI361:
 6772              	 .cfi_def_cfa_offset 24
 6773              	 .cfi_offset 4,-24
 6774              	 .cfi_offset 5,-20
 6775              	 .cfi_offset 6,-16
 6776              	 .cfi_offset 7,-12
 6777              	 .cfi_offset 8,-8
 6778              	 .cfi_offset 14,-4
 6779 0004 92B0     	 sub sp,sp,#72
 6780              	.LCFI362:
 6781              	 .cfi_def_cfa_offset 96
 6782 0006 08AF     	 add r7,sp,#32
 6783              	.LCFI363:
 6784              	 .cfi_def_cfa 7,64
 6785 0008 0346     	 mov r3,r0
 6786 000a B960     	 str r1,[r7,#8]
 6787 000c 7A60     	 str r2,[r7,#4]
 6788 000e FB73     	 strb r3,[r7,#15]
1212:../cleanflight/src/main/interface/cli.c ****     const char *format = "adjrange %u %u %u %u %u %u %u %u %u";
 6789              	 .loc 13 1212 0
 6790 0010 534B     	 ldr r3,.L431
 6791 0012 FB61     	 str r3,[r7,#28]
 6792              	.LBB35:
1213:../cleanflight/src/main/interface/cli.c ****     // print out adjustment ranges channel settings
1214:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < MAX_ADJUSTMENT_RANGE_COUNT; i++) {
 6793              	 .loc 13 1214 0
 6794 0014 0023     	 movs r3,#0
 6795 0016 7B62     	 str r3,[r7,#36]
 6796 0018 9AE0     	 b .L428
 6797              	.L430:
 6798              	.LBB36:
1215:../cleanflight/src/main/interface/cli.c ****         const adjustmentRange_t *ar = &adjustmentRanges[i];
 6799              	 .loc 13 1215 0
 6800 001a 7A6A     	 ldr r2,[r7,#36]
 6801 001c 1346     	 mov r3,r2
 6802 001e 9B00     	 lsls r3,r3,#2
 6803 0020 1344     	 add r3,r3,r2
 6804 0022 5B00     	 lsls r3,r3,#1
 6805 0024 1A46     	 mov r2,r3
 6806 0026 BB68     	 ldr r3,[r7,#8]
 6807 0028 1344     	 add r3,r3,r2
 6808 002a BB61     	 str r3,[r7,#24]
1216:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
 6809              	 .loc 13 1216 0
 6810 002c 0023     	 movs r3,#0
 6811 002e 87F82330 	 strb r3,[r7,#35]
1217:../cleanflight/src/main/interface/cli.c ****         if (defaultAdjustmentRanges) {
 6812              	 .loc 13 1217 0
 6813 0032 7B68     	 ldr r3,[r7,#4]
 6814 0034 002B     	 cmp r3,#0
 6815 0036 4ED0     	 beq .L429
 6816              	.LBB37:
1218:../cleanflight/src/main/interface/cli.c ****             const adjustmentRange_t *arDefault = &defaultAdjustmentRanges[i];
 6817              	 .loc 13 1218 0
 6818 0038 7A6A     	 ldr r2,[r7,#36]
 6819 003a 1346     	 mov r3,r2
 6820 003c 9B00     	 lsls r3,r3,#2
 6821 003e 1344     	 add r3,r3,r2
 6822 0040 5B00     	 lsls r3,r3,#1
 6823 0042 1A46     	 mov r2,r3
 6824 0044 7B68     	 ldr r3,[r7,#4]
 6825 0046 1344     	 add r3,r3,r2
 6826 0048 7B61     	 str r3,[r7,#20]
1219:../cleanflight/src/main/interface/cli.c ****             equalsDefault = !memcmp(ar, arDefault, sizeof(*ar));
 6827              	 .loc 13 1219 0
 6828 004a B869     	 ldr r0,[r7,#24]
 6829 004c 7969     	 ldr r1,[r7,#20]
 6830 004e 0A22     	 movs r2,#10
 6831 0050 FFF7FEFF 	 bl memcmp
 6832 0054 0346     	 mov r3,r0
 6833 0056 002B     	 cmp r3,#0
 6834 0058 0CBF     	 ite eq
 6835 005a 0123     	 moveq r3,#1
 6836 005c 0023     	 movne r3,#0
 6837 005e 87F82330 	 strb r3,[r7,#35]
1220:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
1221:../cleanflight/src/main/interface/cli.c ****                 i,
1222:../cleanflight/src/main/interface/cli.c ****                 arDefault->adjustmentIndex,
 6838              	 .loc 13 1222 0
 6839 0062 7B69     	 ldr r3,[r7,#20]
 6840 0064 5B79     	 ldrb r3,[r3,#5]
1220:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 6841              	 .loc 13 1220 0
 6842 0066 9846     	 mov r8,r3
1223:../cleanflight/src/main/interface/cli.c ****                 arDefault->auxChannelIndex,
 6843              	 .loc 13 1223 0
 6844 0068 7B69     	 ldr r3,[r7,#20]
 6845 006a 1B78     	 ldrb r3,[r3]
1220:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 6846              	 .loc 13 1220 0
 6847 006c 9C46     	 mov ip,r3
1224:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(arDefault->range.startStep),
 6848              	 .loc 13 1224 0
 6849 006e 7B69     	 ldr r3,[r7,#20]
 6850 0070 5B78     	 ldrb r3,[r3,#1]
 6851 0072 1A46     	 mov r2,r3
 6852 0074 1346     	 mov r3,r2
 6853 0076 9B00     	 lsls r3,r3,#2
 6854 0078 1344     	 add r3,r3,r2
 6855 007a 9A00     	 lsls r2,r3,#2
 6856 007c 1344     	 add r3,r3,r2
1220:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 6857              	 .loc 13 1220 0
 6858 007e 03F56172 	 add r2,r3,#900
1225:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(arDefault->range.endStep),
 6859              	 .loc 13 1225 0
 6860 0082 7B69     	 ldr r3,[r7,#20]
 6861 0084 9B78     	 ldrb r3,[r3,#2]
 6862 0086 1946     	 mov r1,r3
 6863 0088 0B46     	 mov r3,r1
 6864 008a 9B00     	 lsls r3,r3,#2
 6865 008c 0B44     	 add r3,r3,r1
 6866 008e 9900     	 lsls r1,r3,#2
 6867 0090 0B44     	 add r3,r3,r1
1220:../cleanflight/src/main/interface/cli.c ****                 i,
 6868              	 .loc 13 1220 0
 6869 0092 03F56173 	 add r3,r3,#900
1226:../cleanflight/src/main/interface/cli.c ****                 arDefault->adjustmentFunction,
 6870              	 .loc 13 1226 0
 6871 0096 7969     	 ldr r1,[r7,#20]
 6872 0098 C978     	 ldrb r1,[r1,#3]
1220:../cleanflight/src/main/interface/cli.c ****                 i,
 6873              	 .loc 13 1220 0
 6874 009a 8E46     	 mov lr,r1
1227:../cleanflight/src/main/interface/cli.c ****                 arDefault->auxSwitchChannelIndex,
 6875              	 .loc 13 1227 0
 6876 009c 7969     	 ldr r1,[r7,#20]
 6877 009e 0979     	 ldrb r1,[r1,#4]
1220:../cleanflight/src/main/interface/cli.c ****                 i,
 6878              	 .loc 13 1220 0
 6879 00a0 0E46     	 mov r6,r1
1228:../cleanflight/src/main/interface/cli.c ****                 arDefault->adjustmentCenter,
 6880              	 .loc 13 1228 0
 6881 00a2 7969     	 ldr r1,[r7,#20]
 6882 00a4 C988     	 ldrh r1,[r1,#6]
 6883 00a6 89B2     	 uxth r1,r1
1220:../cleanflight/src/main/interface/cli.c ****                 i,
 6884              	 .loc 13 1220 0
 6885 00a8 0D46     	 mov r5,r1
1229:../cleanflight/src/main/interface/cli.c ****                 arDefault->adjustmentScale
 6886              	 .loc 13 1229 0
 6887 00aa 7969     	 ldr r1,[r7,#20]
 6888 00ac 0989     	 ldrh r1,[r1,#8]
 6889 00ae 89B2     	 uxth r1,r1
1220:../cleanflight/src/main/interface/cli.c ****                 i,
 6890              	 .loc 13 1220 0
 6891 00b0 0C46     	 mov r4,r1
 6892 00b2 F87B     	 ldrb r0,[r7,#15]
 6893 00b4 97F82310 	 ldrb r1,[r7,#35]
 6894 00b8 CDF80080 	 str r8,[sp]
 6895 00bc CDF804C0 	 str ip,[sp,#4]
 6896 00c0 0292     	 str r2,[sp,#8]
 6897 00c2 0393     	 str r3,[sp,#12]
 6898 00c4 CDF810E0 	 str lr,[sp,#16]
 6899 00c8 0596     	 str r6,[sp,#20]
 6900 00ca 0695     	 str r5,[sp,#24]
 6901 00cc 0794     	 str r4,[sp,#28]
 6902 00ce FA69     	 ldr r2,[r7,#28]
 6903 00d0 7B6A     	 ldr r3,[r7,#36]
 6904 00d2 FFF7FEFF 	 bl cliDefaultPrintLinef
 6905              	.L429:
 6906              	.LBE37:
1230:../cleanflight/src/main/interface/cli.c ****             );
1231:../cleanflight/src/main/interface/cli.c ****         }
1232:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format,
1233:../cleanflight/src/main/interface/cli.c ****             i,
1234:../cleanflight/src/main/interface/cli.c ****             ar->adjustmentIndex,
 6907              	 .loc 13 1234 0 discriminator 2
 6908 00d6 BB69     	 ldr r3,[r7,#24]
 6909 00d8 5B79     	 ldrb r3,[r3,#5]
1232:../cleanflight/src/main/interface/cli.c ****             i,
 6910              	 .loc 13 1232 0 discriminator 2
 6911 00da 9846     	 mov r8,r3
1235:../cleanflight/src/main/interface/cli.c ****             ar->auxChannelIndex,
 6912              	 .loc 13 1235 0 discriminator 2
 6913 00dc BB69     	 ldr r3,[r7,#24]
 6914 00de 1B78     	 ldrb r3,[r3]
1232:../cleanflight/src/main/interface/cli.c ****             i,
 6915              	 .loc 13 1232 0 discriminator 2
 6916 00e0 9C46     	 mov ip,r3
1236:../cleanflight/src/main/interface/cli.c ****             MODE_STEP_TO_CHANNEL_VALUE(ar->range.startStep),
 6917              	 .loc 13 1236 0 discriminator 2
 6918 00e2 BB69     	 ldr r3,[r7,#24]
 6919 00e4 5B78     	 ldrb r3,[r3,#1]
 6920 00e6 1A46     	 mov r2,r3
 6921 00e8 1346     	 mov r3,r2
 6922 00ea 9B00     	 lsls r3,r3,#2
 6923 00ec 1344     	 add r3,r3,r2
 6924 00ee 9A00     	 lsls r2,r3,#2
 6925 00f0 1344     	 add r3,r3,r2
1232:../cleanflight/src/main/interface/cli.c ****             i,
 6926              	 .loc 13 1232 0 discriminator 2
 6927 00f2 03F56172 	 add r2,r3,#900
1237:../cleanflight/src/main/interface/cli.c ****             MODE_STEP_TO_CHANNEL_VALUE(ar->range.endStep),
 6928              	 .loc 13 1237 0 discriminator 2
 6929 00f6 BB69     	 ldr r3,[r7,#24]
 6930 00f8 9B78     	 ldrb r3,[r3,#2]
 6931 00fa 1946     	 mov r1,r3
 6932 00fc 0B46     	 mov r3,r1
 6933 00fe 9B00     	 lsls r3,r3,#2
 6934 0100 0B44     	 add r3,r3,r1
 6935 0102 9900     	 lsls r1,r3,#2
 6936 0104 0B44     	 add r3,r3,r1
1232:../cleanflight/src/main/interface/cli.c ****             i,
 6937              	 .loc 13 1232 0 discriminator 2
 6938 0106 03F56173 	 add r3,r3,#900
1238:../cleanflight/src/main/interface/cli.c ****             ar->adjustmentFunction,
 6939              	 .loc 13 1238 0 discriminator 2
 6940 010a B969     	 ldr r1,[r7,#24]
 6941 010c C978     	 ldrb r1,[r1,#3]
1232:../cleanflight/src/main/interface/cli.c ****             i,
 6942              	 .loc 13 1232 0 discriminator 2
 6943 010e 8E46     	 mov lr,r1
1239:../cleanflight/src/main/interface/cli.c ****             ar->auxSwitchChannelIndex,
 6944              	 .loc 13 1239 0 discriminator 2
 6945 0110 B969     	 ldr r1,[r7,#24]
 6946 0112 0979     	 ldrb r1,[r1,#4]
1232:../cleanflight/src/main/interface/cli.c ****             i,
 6947              	 .loc 13 1232 0 discriminator 2
 6948 0114 0E46     	 mov r6,r1
1240:../cleanflight/src/main/interface/cli.c ****             ar->adjustmentCenter,
 6949              	 .loc 13 1240 0 discriminator 2
 6950 0116 B969     	 ldr r1,[r7,#24]
 6951 0118 C988     	 ldrh r1,[r1,#6]
 6952 011a 89B2     	 uxth r1,r1
1232:../cleanflight/src/main/interface/cli.c ****             i,
 6953              	 .loc 13 1232 0 discriminator 2
 6954 011c 0D46     	 mov r5,r1
1241:../cleanflight/src/main/interface/cli.c ****             ar->adjustmentScale
 6955              	 .loc 13 1241 0 discriminator 2
 6956 011e B969     	 ldr r1,[r7,#24]
 6957 0120 0989     	 ldrh r1,[r1,#8]
 6958 0122 89B2     	 uxth r1,r1
1232:../cleanflight/src/main/interface/cli.c ****             i,
 6959              	 .loc 13 1232 0 discriminator 2
 6960 0124 0C46     	 mov r4,r1
 6961 0126 F87B     	 ldrb r0,[r7,#15]
 6962 0128 97F82310 	 ldrb r1,[r7,#35]
 6963 012c CDF80080 	 str r8,[sp]
 6964 0130 CDF804C0 	 str ip,[sp,#4]
 6965 0134 0292     	 str r2,[sp,#8]
 6966 0136 0393     	 str r3,[sp,#12]
 6967 0138 CDF810E0 	 str lr,[sp,#16]
 6968 013c 0596     	 str r6,[sp,#20]
 6969 013e 0695     	 str r5,[sp,#24]
 6970 0140 0794     	 str r4,[sp,#28]
 6971 0142 FA69     	 ldr r2,[r7,#28]
 6972 0144 7B6A     	 ldr r3,[r7,#36]
 6973 0146 FFF7FEFF 	 bl cliDumpPrintLinef
 6974              	.LBE36:
1214:../cleanflight/src/main/interface/cli.c ****         const adjustmentRange_t *ar = &adjustmentRanges[i];
 6975              	 .loc 13 1214 0 discriminator 2
 6976 014a 7B6A     	 ldr r3,[r7,#36]
 6977 014c 0133     	 adds r3,r3,#1
 6978 014e 7B62     	 str r3,[r7,#36]
 6979              	.L428:
1214:../cleanflight/src/main/interface/cli.c ****         const adjustmentRange_t *ar = &adjustmentRanges[i];
 6980              	 .loc 13 1214 0 is_stmt 0 discriminator 1
 6981 0150 7B6A     	 ldr r3,[r7,#36]
 6982 0152 0E2B     	 cmp r3,#14
 6983 0154 7FF661AF 	 bls .L430
 6984              	.LBE35:
1242:../cleanflight/src/main/interface/cli.c ****         );
1243:../cleanflight/src/main/interface/cli.c ****     }
1244:../cleanflight/src/main/interface/cli.c **** }
 6985              	 .loc 13 1244 0 is_stmt 1
 6986 0158 2837     	 adds r7,r7,#40
 6987              	.LCFI364:
 6988              	 .cfi_def_cfa_offset 24
 6989 015a BD46     	 mov sp,r7
 6990              	.LCFI365:
 6991              	 .cfi_def_cfa_register 13
 6992              	 
 6993 015c BDE8F081 	 pop {r4,r5,r6,r7,r8,pc}
 6994              	.L432:
 6995              	 .align 2
 6996              	.L431:
 6997 0160 9C040000 	 .word .LC96
 6998              	 .cfi_endproc
 6999              	.LFE731:
 7001              	 .section .text.cliAdjustmentRange,"ax",%progbits
 7002              	 .align 2
 7003              	 .thumb
 7004              	 .thumb_func
 7006              	cliAdjustmentRange:
 7007              	.LFB732:
1245:../cleanflight/src/main/interface/cli.c **** 
1246:../cleanflight/src/main/interface/cli.c **** static void cliAdjustmentRange(char *cmdline)
1247:../cleanflight/src/main/interface/cli.c **** {
 7008              	 .loc 13 1247 0
 7009              	 .cfi_startproc
 7010              	 
 7011              	 
 7012 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 7013              	.LCFI366:
 7014              	 .cfi_def_cfa_offset 20
 7015              	 .cfi_offset 4,-20
 7016              	 .cfi_offset 5,-16
 7017              	 .cfi_offset 6,-12
 7018              	 .cfi_offset 7,-8
 7019              	 .cfi_offset 14,-4
 7020 0002 91B0     	 sub sp,sp,#68
 7021              	.LCFI367:
 7022              	 .cfi_def_cfa_offset 88
 7023 0004 08AF     	 add r7,sp,#32
 7024              	.LCFI368:
 7025              	 .cfi_def_cfa 7,56
 7026 0006 7860     	 str r0,[r7,#4]
1248:../cleanflight/src/main/interface/cli.c ****     const char *format = "adjrange %u %u %u %u %u %u %u %u %u";
 7027              	 .loc 13 1248 0
 7028 0008 874B     	 ldr r3,.L444
 7029 000a FB61     	 str r3,[r7,#28]
1249:../cleanflight/src/main/interface/cli.c ****     int i, val = 0;
 7030              	 .loc 13 1249 0
 7031 000c 0023     	 movs r3,#0
 7032 000e BB61     	 str r3,[r7,#24]
1250:../cleanflight/src/main/interface/cli.c ****     const char *ptr;
1251:../cleanflight/src/main/interface/cli.c **** 
1252:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 7033              	 .loc 13 1252 0
 7034 0010 7868     	 ldr r0,[r7,#4]
 7035 0012 FFF7FEFF 	 bl isEmpty
 7036 0016 0346     	 mov r3,r0
 7037 0018 002B     	 cmp r3,#0
 7038 001a 09D0     	 beq .L434
1253:../cleanflight/src/main/interface/cli.c ****         printAdjustmentRange(DUMP_MASTER, adjustmentRanges(0), NULL);
 7039              	 .loc 13 1253 0
 7040 001c 0020     	 movs r0,#0
 7041 001e FFF7FEFF 	 bl adjustmentRanges
 7042 0022 0346     	 mov r3,r0
 7043 0024 0120     	 movs r0,#1
 7044 0026 1946     	 mov r1,r3
 7045 0028 0022     	 movs r2,#0
 7046 002a FFF7FEFF 	 bl printAdjustmentRange
 7047 002e F7E0     	 b .L433
 7048              	.L434:
1254:../cleanflight/src/main/interface/cli.c ****     } else {
1255:../cleanflight/src/main/interface/cli.c ****         ptr = cmdline;
 7049              	 .loc 13 1255 0
 7050 0030 7B68     	 ldr r3,[r7,#4]
 7051 0032 7B61     	 str r3,[r7,#20]
1256:../cleanflight/src/main/interface/cli.c ****         i = atoi(ptr++);
 7052              	 .loc 13 1256 0
 7053 0034 7B69     	 ldr r3,[r7,#20]
 7054 0036 5A1C     	 adds r2,r3,#1
 7055 0038 7A61     	 str r2,[r7,#20]
 7056 003a 1846     	 mov r0,r3
 7057 003c FFF7FEFF 	 bl atoi
 7058 0040 3861     	 str r0,[r7,#16]
1257:../cleanflight/src/main/interface/cli.c ****         if (i < MAX_ADJUSTMENT_RANGE_COUNT) {
 7059              	 .loc 13 1257 0
 7060 0042 3B69     	 ldr r3,[r7,#16]
 7061 0044 0E2B     	 cmp r3,#14
 7062 0046 00F3E680 	 bgt .L436
 7063              	.LBB38:
1258:../cleanflight/src/main/interface/cli.c ****             adjustmentRange_t *ar = adjustmentRangesMutable(i);
 7064              	 .loc 13 1258 0
 7065 004a 3869     	 ldr r0,[r7,#16]
 7066 004c FFF7FEFF 	 bl adjustmentRangesMutable
 7067 0050 F860     	 str r0,[r7,#12]
1259:../cleanflight/src/main/interface/cli.c ****             uint8_t validArgumentCount = 0;
 7068              	 .loc 13 1259 0
 7069 0052 0023     	 movs r3,#0
 7070 0054 FB72     	 strb r3,[r7,#11]
1260:../cleanflight/src/main/interface/cli.c **** 
1261:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7071              	 .loc 13 1261 0
 7072 0056 7869     	 ldr r0,[r7,#20]
 7073 0058 FFF7FEFF 	 bl nextArg
 7074 005c 7861     	 str r0,[r7,#20]
1262:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7075              	 .loc 13 1262 0
 7076 005e 7B69     	 ldr r3,[r7,#20]
 7077 0060 002B     	 cmp r3,#0
 7078 0062 11D0     	 beq .L437
1263:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 7079              	 .loc 13 1263 0
 7080 0064 7869     	 ldr r0,[r7,#20]
 7081 0066 FFF7FEFF 	 bl atoi
 7082 006a B861     	 str r0,[r7,#24]
1264:../cleanflight/src/main/interface/cli.c ****                 if (val >= 0 && val < MAX_SIMULTANEOUS_ADJUSTMENT_COUNT) {
 7083              	 .loc 13 1264 0
 7084 006c BB69     	 ldr r3,[r7,#24]
 7085 006e 002B     	 cmp r3,#0
 7086 0070 0ADB     	 blt .L437
 7087              	 .loc 13 1264 0 is_stmt 0 discriminator 1
 7088 0072 BB69     	 ldr r3,[r7,#24]
 7089 0074 032B     	 cmp r3,#3
 7090 0076 07DC     	 bgt .L437
1265:../cleanflight/src/main/interface/cli.c ****                     ar->adjustmentIndex = val;
 7091              	 .loc 13 1265 0 is_stmt 1
 7092 0078 BB69     	 ldr r3,[r7,#24]
 7093 007a DAB2     	 uxtb r2,r3
 7094 007c FB68     	 ldr r3,[r7,#12]
 7095 007e 5A71     	 strb r2,[r3,#5]
1266:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 7096              	 .loc 13 1266 0
 7097 0080 FB7A     	 ldrb r3,[r7,#11]
 7098 0082 0133     	 adds r3,r3,#1
 7099 0084 DBB2     	 uxtb r3,r3
 7100 0086 FB72     	 strb r3,[r7,#11]
 7101              	.L437:
1267:../cleanflight/src/main/interface/cli.c ****                 }
1268:../cleanflight/src/main/interface/cli.c ****             }
1269:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7102              	 .loc 13 1269 0
 7103 0088 7869     	 ldr r0,[r7,#20]
 7104 008a FFF7FEFF 	 bl nextArg
 7105 008e 7861     	 str r0,[r7,#20]
1270:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7106              	 .loc 13 1270 0
 7107 0090 7B69     	 ldr r3,[r7,#20]
 7108 0092 002B     	 cmp r3,#0
 7109 0094 11D0     	 beq .L438
1271:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 7110              	 .loc 13 1271 0
 7111 0096 7869     	 ldr r0,[r7,#20]
 7112 0098 FFF7FEFF 	 bl atoi
 7113 009c B861     	 str r0,[r7,#24]
1272:../cleanflight/src/main/interface/cli.c ****                 if (val >= 0 && val < MAX_AUX_CHANNEL_COUNT) {
 7114              	 .loc 13 1272 0
 7115 009e BB69     	 ldr r3,[r7,#24]
 7116 00a0 002B     	 cmp r3,#0
 7117 00a2 0ADB     	 blt .L438
 7118              	 .loc 13 1272 0 is_stmt 0 discriminator 1
 7119 00a4 BB69     	 ldr r3,[r7,#24]
 7120 00a6 0D2B     	 cmp r3,#13
 7121 00a8 07DC     	 bgt .L438
1273:../cleanflight/src/main/interface/cli.c ****                     ar->auxChannelIndex = val;
 7122              	 .loc 13 1273 0 is_stmt 1
 7123 00aa BB69     	 ldr r3,[r7,#24]
 7124 00ac DAB2     	 uxtb r2,r3
 7125 00ae FB68     	 ldr r3,[r7,#12]
 7126 00b0 1A70     	 strb r2,[r3]
1274:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 7127              	 .loc 13 1274 0
 7128 00b2 FB7A     	 ldrb r3,[r7,#11]
 7129 00b4 0133     	 adds r3,r3,#1
 7130 00b6 DBB2     	 uxtb r3,r3
 7131 00b8 FB72     	 strb r3,[r7,#11]
 7132              	.L438:
1275:../cleanflight/src/main/interface/cli.c ****                 }
1276:../cleanflight/src/main/interface/cli.c ****             }
1277:../cleanflight/src/main/interface/cli.c **** 
1278:../cleanflight/src/main/interface/cli.c ****             ptr = processChannelRangeArgs(ptr, &ar->range, &validArgumentCount);
 7133              	 .loc 13 1278 0
 7134 00ba FB68     	 ldr r3,[r7,#12]
 7135 00bc 5A1C     	 adds r2,r3,#1
 7136 00be 07F10B03 	 add r3,r7,#11
 7137 00c2 7869     	 ldr r0,[r7,#20]
 7138 00c4 1146     	 mov r1,r2
 7139 00c6 1A46     	 mov r2,r3
 7140 00c8 FFF7FEFF 	 bl processChannelRangeArgs
 7141 00cc 7861     	 str r0,[r7,#20]
1279:../cleanflight/src/main/interface/cli.c **** 
1280:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7142              	 .loc 13 1280 0
 7143 00ce 7869     	 ldr r0,[r7,#20]
 7144 00d0 FFF7FEFF 	 bl nextArg
 7145 00d4 7861     	 str r0,[r7,#20]
1281:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7146              	 .loc 13 1281 0
 7147 00d6 7B69     	 ldr r3,[r7,#20]
 7148 00d8 002B     	 cmp r3,#0
 7149 00da 11D0     	 beq .L439
1282:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 7150              	 .loc 13 1282 0
 7151 00dc 7869     	 ldr r0,[r7,#20]
 7152 00de FFF7FEFF 	 bl atoi
 7153 00e2 B861     	 str r0,[r7,#24]
1283:../cleanflight/src/main/interface/cli.c ****                 if (val >= 0 && val < ADJUSTMENT_FUNCTION_COUNT) {
 7154              	 .loc 13 1283 0
 7155 00e4 BB69     	 ldr r3,[r7,#24]
 7156 00e6 002B     	 cmp r3,#0
 7157 00e8 0ADB     	 blt .L439
 7158              	 .loc 13 1283 0 is_stmt 0 discriminator 1
 7159 00ea BB69     	 ldr r3,[r7,#24]
 7160 00ec 202B     	 cmp r3,#32
 7161 00ee 07DC     	 bgt .L439
1284:../cleanflight/src/main/interface/cli.c ****                     ar->adjustmentFunction = val;
 7162              	 .loc 13 1284 0 is_stmt 1
 7163 00f0 BB69     	 ldr r3,[r7,#24]
 7164 00f2 DAB2     	 uxtb r2,r3
 7165 00f4 FB68     	 ldr r3,[r7,#12]
 7166 00f6 DA70     	 strb r2,[r3,#3]
1285:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 7167              	 .loc 13 1285 0
 7168 00f8 FB7A     	 ldrb r3,[r7,#11]
 7169 00fa 0133     	 adds r3,r3,#1
 7170 00fc DBB2     	 uxtb r3,r3
 7171 00fe FB72     	 strb r3,[r7,#11]
 7172              	.L439:
1286:../cleanflight/src/main/interface/cli.c ****                 }
1287:../cleanflight/src/main/interface/cli.c ****             }
1288:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7173              	 .loc 13 1288 0
 7174 0100 7869     	 ldr r0,[r7,#20]
 7175 0102 FFF7FEFF 	 bl nextArg
 7176 0106 7861     	 str r0,[r7,#20]
1289:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7177              	 .loc 13 1289 0
 7178 0108 7B69     	 ldr r3,[r7,#20]
 7179 010a 002B     	 cmp r3,#0
 7180 010c 11D0     	 beq .L440
1290:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 7181              	 .loc 13 1290 0
 7182 010e 7869     	 ldr r0,[r7,#20]
 7183 0110 FFF7FEFF 	 bl atoi
 7184 0114 B861     	 str r0,[r7,#24]
1291:../cleanflight/src/main/interface/cli.c ****                 if (val >= 0 && val < MAX_AUX_CHANNEL_COUNT) {
 7185              	 .loc 13 1291 0
 7186 0116 BB69     	 ldr r3,[r7,#24]
 7187 0118 002B     	 cmp r3,#0
 7188 011a 0ADB     	 blt .L440
 7189              	 .loc 13 1291 0 is_stmt 0 discriminator 1
 7190 011c BB69     	 ldr r3,[r7,#24]
 7191 011e 0D2B     	 cmp r3,#13
 7192 0120 07DC     	 bgt .L440
1292:../cleanflight/src/main/interface/cli.c ****                     ar->auxSwitchChannelIndex = val;
 7193              	 .loc 13 1292 0 is_stmt 1
 7194 0122 BB69     	 ldr r3,[r7,#24]
 7195 0124 DAB2     	 uxtb r2,r3
 7196 0126 FB68     	 ldr r3,[r7,#12]
 7197 0128 1A71     	 strb r2,[r3,#4]
1293:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 7198              	 .loc 13 1293 0
 7199 012a FB7A     	 ldrb r3,[r7,#11]
 7200 012c 0133     	 adds r3,r3,#1
 7201 012e DBB2     	 uxtb r3,r3
 7202 0130 FB72     	 strb r3,[r7,#11]
 7203              	.L440:
1294:../cleanflight/src/main/interface/cli.c ****                 }
1295:../cleanflight/src/main/interface/cli.c ****             }
1296:../cleanflight/src/main/interface/cli.c **** 
1297:../cleanflight/src/main/interface/cli.c ****             if (validArgumentCount != 6) {
 7204              	 .loc 13 1297 0
 7205 0132 FB7A     	 ldrb r3,[r7,#11]
 7206 0134 062B     	 cmp r3,#6
 7207 0136 07D0     	 beq .L441
1298:../cleanflight/src/main/interface/cli.c ****                 memset(ar, 0, sizeof(adjustmentRange_t));
 7208              	 .loc 13 1298 0
 7209 0138 F868     	 ldr r0,[r7,#12]
 7210 013a 0021     	 movs r1,#0
 7211 013c 0A22     	 movs r2,#10
 7212 013e FFF7FEFF 	 bl memset
1299:../cleanflight/src/main/interface/cli.c ****                 cliShowParseError();
 7213              	 .loc 13 1299 0
 7214 0142 FFF7FEFF 	 bl cliShowParseError
 7215 0146 6BE0     	 b .L433
 7216              	.L441:
1300:../cleanflight/src/main/interface/cli.c ****                 return;
1301:../cleanflight/src/main/interface/cli.c ****             }
1302:../cleanflight/src/main/interface/cli.c **** 
1303:../cleanflight/src/main/interface/cli.c ****             // Optional arguments
1304:../cleanflight/src/main/interface/cli.c ****             ar->adjustmentCenter = 0;
 7217              	 .loc 13 1304 0
 7218 0148 FB68     	 ldr r3,[r7,#12]
 7219 014a 0022     	 movs r2,#0
 7220 014c 9A71     	 strb r2,[r3,#6]
 7221 014e 0022     	 movs r2,#0
 7222 0150 DA71     	 strb r2,[r3,#7]
1305:../cleanflight/src/main/interface/cli.c ****             ar->adjustmentScale = 0;
 7223              	 .loc 13 1305 0
 7224 0152 FB68     	 ldr r3,[r7,#12]
 7225 0154 0022     	 movs r2,#0
 7226 0156 1A72     	 strb r2,[r3,#8]
 7227 0158 0022     	 movs r2,#0
 7228 015a 5A72     	 strb r2,[r3,#9]
1306:../cleanflight/src/main/interface/cli.c **** 
1307:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7229              	 .loc 13 1307 0
 7230 015c 7869     	 ldr r0,[r7,#20]
 7231 015e FFF7FEFF 	 bl nextArg
 7232 0162 7861     	 str r0,[r7,#20]
1308:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7233              	 .loc 13 1308 0
 7234 0164 7B69     	 ldr r3,[r7,#20]
 7235 0166 002B     	 cmp r3,#0
 7236 0168 0BD0     	 beq .L442
1309:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 7237              	 .loc 13 1309 0
 7238 016a 7869     	 ldr r0,[r7,#20]
 7239 016c FFF7FEFF 	 bl atoi
 7240 0170 B861     	 str r0,[r7,#24]
1310:../cleanflight/src/main/interface/cli.c ****                 ar->adjustmentCenter = val;
 7241              	 .loc 13 1310 0
 7242 0172 BB69     	 ldr r3,[r7,#24]
 7243 0174 9AB2     	 uxth r2,r3
 7244 0176 FB68     	 ldr r3,[r7,#12]
 7245 0178 DA80     	 strh r2,[r3,#6]
1311:../cleanflight/src/main/interface/cli.c ****                 validArgumentCount++;
 7246              	 .loc 13 1311 0
 7247 017a FB7A     	 ldrb r3,[r7,#11]
 7248 017c 0133     	 adds r3,r3,#1
 7249 017e DBB2     	 uxtb r3,r3
 7250 0180 FB72     	 strb r3,[r7,#11]
 7251              	.L442:
1312:../cleanflight/src/main/interface/cli.c ****             }
1313:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7252              	 .loc 13 1313 0
 7253 0182 7869     	 ldr r0,[r7,#20]
 7254 0184 FFF7FEFF 	 bl nextArg
 7255 0188 7861     	 str r0,[r7,#20]
1314:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7256              	 .loc 13 1314 0
 7257 018a 7B69     	 ldr r3,[r7,#20]
 7258 018c 002B     	 cmp r3,#0
 7259 018e 0BD0     	 beq .L443
1315:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 7260              	 .loc 13 1315 0
 7261 0190 7869     	 ldr r0,[r7,#20]
 7262 0192 FFF7FEFF 	 bl atoi
 7263 0196 B861     	 str r0,[r7,#24]
1316:../cleanflight/src/main/interface/cli.c ****                 ar->adjustmentScale = val;
 7264              	 .loc 13 1316 0
 7265 0198 BB69     	 ldr r3,[r7,#24]
 7266 019a 9AB2     	 uxth r2,r3
 7267 019c FB68     	 ldr r3,[r7,#12]
 7268 019e 1A81     	 strh r2,[r3,#8]
1317:../cleanflight/src/main/interface/cli.c ****                 validArgumentCount++;
 7269              	 .loc 13 1317 0
 7270 01a0 FB7A     	 ldrb r3,[r7,#11]
 7271 01a2 0133     	 adds r3,r3,#1
 7272 01a4 DBB2     	 uxtb r3,r3
 7273 01a6 FB72     	 strb r3,[r7,#11]
 7274              	.L443:
1318:../cleanflight/src/main/interface/cli.c ****             }
1319:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(0, false, format,
1320:../cleanflight/src/main/interface/cli.c ****                 i,
1321:../cleanflight/src/main/interface/cli.c ****                 ar->adjustmentIndex,
 7275              	 .loc 13 1321 0
 7276 01a8 FB68     	 ldr r3,[r7,#12]
 7277 01aa 5B79     	 ldrb r3,[r3,#5]
1319:../cleanflight/src/main/interface/cli.c ****                 i,
 7278              	 .loc 13 1319 0
 7279 01ac 9E46     	 mov lr,r3
1322:../cleanflight/src/main/interface/cli.c ****                 ar->auxChannelIndex,
 7280              	 .loc 13 1322 0
 7281 01ae FB68     	 ldr r3,[r7,#12]
 7282 01b0 1B78     	 ldrb r3,[r3]
1319:../cleanflight/src/main/interface/cli.c ****                 i,
 7283              	 .loc 13 1319 0
 7284 01b2 1E46     	 mov r6,r3
1323:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(ar->range.startStep),
 7285              	 .loc 13 1323 0
 7286 01b4 FB68     	 ldr r3,[r7,#12]
 7287 01b6 5B78     	 ldrb r3,[r3,#1]
 7288 01b8 1A46     	 mov r2,r3
 7289 01ba 1346     	 mov r3,r2
 7290 01bc 9B00     	 lsls r3,r3,#2
 7291 01be 1344     	 add r3,r3,r2
 7292 01c0 9A00     	 lsls r2,r3,#2
 7293 01c2 1344     	 add r3,r3,r2
1319:../cleanflight/src/main/interface/cli.c ****                 i,
 7294              	 .loc 13 1319 0
 7295 01c4 03F56172 	 add r2,r3,#900
1324:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(ar->range.endStep),
 7296              	 .loc 13 1324 0
 7297 01c8 FB68     	 ldr r3,[r7,#12]
 7298 01ca 9B78     	 ldrb r3,[r3,#2]
 7299 01cc 1946     	 mov r1,r3
 7300 01ce 0B46     	 mov r3,r1
 7301 01d0 9B00     	 lsls r3,r3,#2
 7302 01d2 0B44     	 add r3,r3,r1
 7303 01d4 9900     	 lsls r1,r3,#2
 7304 01d6 0B44     	 add r3,r3,r1
1319:../cleanflight/src/main/interface/cli.c ****                 i,
 7305              	 .loc 13 1319 0
 7306 01d8 03F56173 	 add r3,r3,#900
1325:../cleanflight/src/main/interface/cli.c ****                 ar->adjustmentFunction,
 7307              	 .loc 13 1325 0
 7308 01dc F968     	 ldr r1,[r7,#12]
 7309 01de C978     	 ldrb r1,[r1,#3]
1319:../cleanflight/src/main/interface/cli.c ****                 i,
 7310              	 .loc 13 1319 0
 7311 01e0 0D46     	 mov r5,r1
1326:../cleanflight/src/main/interface/cli.c ****                 ar->auxSwitchChannelIndex,
 7312              	 .loc 13 1326 0
 7313 01e2 F968     	 ldr r1,[r7,#12]
 7314 01e4 0979     	 ldrb r1,[r1,#4]
1319:../cleanflight/src/main/interface/cli.c ****                 i,
 7315              	 .loc 13 1319 0
 7316 01e6 0C46     	 mov r4,r1
1327:../cleanflight/src/main/interface/cli.c ****                 ar->adjustmentCenter,
 7317              	 .loc 13 1327 0
 7318 01e8 F968     	 ldr r1,[r7,#12]
 7319 01ea C988     	 ldrh r1,[r1,#6]
 7320 01ec 89B2     	 uxth r1,r1
1319:../cleanflight/src/main/interface/cli.c ****                 i,
 7321              	 .loc 13 1319 0
 7322 01ee 0846     	 mov r0,r1
1328:../cleanflight/src/main/interface/cli.c ****                 ar->adjustmentScale
 7323              	 .loc 13 1328 0
 7324 01f0 F968     	 ldr r1,[r7,#12]
 7325 01f2 0989     	 ldrh r1,[r1,#8]
 7326 01f4 89B2     	 uxth r1,r1
1319:../cleanflight/src/main/interface/cli.c ****                 i,
 7327              	 .loc 13 1319 0
 7328 01f6 CDF800E0 	 str lr,[sp]
 7329 01fa 0196     	 str r6,[sp,#4]
 7330 01fc 0292     	 str r2,[sp,#8]
 7331 01fe 0393     	 str r3,[sp,#12]
 7332 0200 0495     	 str r5,[sp,#16]
 7333 0202 0594     	 str r4,[sp,#20]
 7334 0204 0690     	 str r0,[sp,#24]
 7335 0206 0791     	 str r1,[sp,#28]
 7336 0208 0020     	 movs r0,#0
 7337 020a 0021     	 movs r1,#0
 7338 020c FA69     	 ldr r2,[r7,#28]
 7339 020e 3B69     	 ldr r3,[r7,#16]
 7340 0210 FFF7FEFF 	 bl cliDumpPrintLinef
 7341              	.LBE38:
 7342 0214 04E0     	 b .L433
 7343              	.L436:
1329:../cleanflight/src/main/interface/cli.c ****             );
1330:../cleanflight/src/main/interface/cli.c **** 
1331:../cleanflight/src/main/interface/cli.c ****         } else {
1332:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("index", 0, MAX_ADJUSTMENT_RANGE_COUNT - 1);
 7344              	 .loc 13 1332 0
 7345 0216 0548     	 ldr r0,.L444+4
 7346 0218 0021     	 movs r1,#0
 7347 021a 0E22     	 movs r2,#14
 7348 021c FFF7FEFF 	 bl cliShowArgumentRangeError
 7349              	.L433:
1333:../cleanflight/src/main/interface/cli.c ****         }
1334:../cleanflight/src/main/interface/cli.c ****     }
1335:../cleanflight/src/main/interface/cli.c **** }
 7350              	 .loc 13 1335 0
 7351 0220 2437     	 adds r7,r7,#36
 7352              	.LCFI369:
 7353              	 .cfi_def_cfa_offset 20
 7354 0222 BD46     	 mov sp,r7
 7355              	.LCFI370:
 7356              	 .cfi_def_cfa_register 13
 7357              	 
 7358 0224 F0BD     	 pop {r4,r5,r6,r7,pc}
 7359              	.L445:
 7360 0226 00BF     	 .align 2
 7361              	.L444:
 7362 0228 9C040000 	 .word .LC96
 7363 022c 5C030000 	 .word .LC80
 7364              	 .cfi_endproc
 7365              	.LFE732:
 7367              	 .section .rodata
 7368              	 .align 2
 7369              	.LC97:
 7370 04c0 6D6D6978 	 .ascii "mmix %d %s %s %s %s\000"
 7370      20256420 
 7370      25732025 
 7370      73202573 
 7370      20257300 
 7371              	 .section .text.printMotorMix,"ax",%progbits
 7372              	 .align 2
 7373              	 .thumb
 7374              	 .thumb_func
 7376              	printMotorMix:
 7377              	.LFB733:
1336:../cleanflight/src/main/interface/cli.c **** 
1337:../cleanflight/src/main/interface/cli.c **** #ifndef USE_QUAD_MIXER_ONLY
1338:../cleanflight/src/main/interface/cli.c **** static void printMotorMix(uint8_t dumpMask, const motorMixer_t *customMotorMixer, const motorMixer_
1339:../cleanflight/src/main/interface/cli.c **** {
 7378              	 .loc 13 1339 0
 7379              	 .cfi_startproc
 7380              	 
 7381              	 
 7382 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 7383              	.LCFI371:
 7384              	 .cfi_def_cfa_offset 20
 7385              	 .cfi_offset 4,-20
 7386              	 .cfi_offset 5,-16
 7387              	 .cfi_offset 6,-12
 7388              	 .cfi_offset 7,-8
 7389              	 .cfi_offset 14,-4
 7390 0002 A1B0     	 sub sp,sp,#132
 7391              	.LCFI372:
 7392              	 .cfi_def_cfa_offset 152
 7393 0004 04AF     	 add r7,sp,#16
 7394              	.LCFI373:
 7395              	 .cfi_def_cfa 7,136
 7396 0006 0346     	 mov r3,r0
 7397 0008 B960     	 str r1,[r7,#8]
 7398 000a 7A60     	 str r2,[r7,#4]
 7399 000c FB73     	 strb r3,[r7,#15]
1340:../cleanflight/src/main/interface/cli.c ****     const char *format = "mmix %d %s %s %s %s";
 7400              	 .loc 13 1340 0
 7401 000e 694B     	 ldr r3,.L454
 7402 0010 BB66     	 str r3,[r7,#104]
 7403              	.LBB39:
1341:../cleanflight/src/main/interface/cli.c ****     char buf0[FTOA_BUFFER_LENGTH];
1342:../cleanflight/src/main/interface/cli.c ****     char buf1[FTOA_BUFFER_LENGTH];
1343:../cleanflight/src/main/interface/cli.c ****     char buf2[FTOA_BUFFER_LENGTH];
1344:../cleanflight/src/main/interface/cli.c ****     char buf3[FTOA_BUFFER_LENGTH];
1345:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < MAX_SUPPORTED_MOTORS; i++) {
 7404              	 .loc 13 1345 0
 7405 0012 0023     	 movs r3,#0
 7406 0014 FB66     	 str r3,[r7,#108]
 7407 0016 C6E0     	 b .L447
 7408              	.L453:
 7409              	.LBB40:
1346:../cleanflight/src/main/interface/cli.c ****         if (customMotorMixer[i].throttle == 0.0f)
 7410              	 .loc 13 1346 0
 7411 0018 FB6E     	 ldr r3,[r7,#108]
 7412 001a 1B01     	 lsls r3,r3,#4
 7413 001c BA68     	 ldr r2,[r7,#8]
 7414 001e 1344     	 add r3,r3,r2
 7415 0020 1B68     	 ldr r3,[r3]
 7416 0022 07EE903A 	 fmsr s15,r3
 7417 0026 F5EE407A 	 fcmpzs s15
 7418 002a F1EE10FA 	 fmstat
 7419 002e 00D1     	 bne .L448
1347:../cleanflight/src/main/interface/cli.c ****             break;
 7420              	 .loc 13 1347 0
 7421 0030 BDE0     	 b .L446
 7422              	.L448:
1348:../cleanflight/src/main/interface/cli.c ****         const float thr = customMotorMixer[i].throttle;
 7423              	 .loc 13 1348 0
 7424 0032 FB6E     	 ldr r3,[r7,#108]
 7425 0034 1B01     	 lsls r3,r3,#4
 7426 0036 BA68     	 ldr r2,[r7,#8]
 7427 0038 1344     	 add r3,r3,r2
 7428 003a 1B68     	 ldr r3,[r3]
 7429 003c 7B66     	 str r3,[r7,#100]
1349:../cleanflight/src/main/interface/cli.c ****         const float roll = customMotorMixer[i].roll;
 7430              	 .loc 13 1349 0
 7431 003e FB6E     	 ldr r3,[r7,#108]
 7432 0040 1B01     	 lsls r3,r3,#4
 7433 0042 BA68     	 ldr r2,[r7,#8]
 7434 0044 1344     	 add r3,r3,r2
 7435 0046 5B68     	 ldr r3,[r3,#4]
 7436 0048 3B66     	 str r3,[r7,#96]
1350:../cleanflight/src/main/interface/cli.c ****         const float pitch = customMotorMixer[i].pitch;
 7437              	 .loc 13 1350 0
 7438 004a FB6E     	 ldr r3,[r7,#108]
 7439 004c 1B01     	 lsls r3,r3,#4
 7440 004e BA68     	 ldr r2,[r7,#8]
 7441 0050 1344     	 add r3,r3,r2
 7442 0052 9B68     	 ldr r3,[r3,#8]
 7443 0054 FB65     	 str r3,[r7,#92]
1351:../cleanflight/src/main/interface/cli.c ****         const float yaw = customMotorMixer[i].yaw;
 7444              	 .loc 13 1351 0
 7445 0056 FB6E     	 ldr r3,[r7,#108]
 7446 0058 1B01     	 lsls r3,r3,#4
 7447 005a BA68     	 ldr r2,[r7,#8]
 7448 005c 1344     	 add r3,r3,r2
 7449 005e DB68     	 ldr r3,[r3,#12]
 7450 0060 BB65     	 str r3,[r7,#88]
1352:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
 7451              	 .loc 13 1352 0
 7452 0062 0023     	 movs r3,#0
 7453 0064 87F85730 	 strb r3,[r7,#87]
1353:../cleanflight/src/main/interface/cli.c ****         if (defaultCustomMotorMixer) {
 7454              	 .loc 13 1353 0
 7455 0068 7B68     	 ldr r3,[r7,#4]
 7456 006a 002B     	 cmp r3,#0
 7457 006c 6FD0     	 beq .L450
 7458              	.LBB41:
1354:../cleanflight/src/main/interface/cli.c ****             const float thrDefault = defaultCustomMotorMixer[i].throttle;
 7459              	 .loc 13 1354 0
 7460 006e FB6E     	 ldr r3,[r7,#108]
 7461 0070 1B01     	 lsls r3,r3,#4
 7462 0072 7A68     	 ldr r2,[r7,#4]
 7463 0074 1344     	 add r3,r3,r2
 7464 0076 1B68     	 ldr r3,[r3]
 7465 0078 3B65     	 str r3,[r7,#80]
1355:../cleanflight/src/main/interface/cli.c ****             const float rollDefault = defaultCustomMotorMixer[i].roll;
 7466              	 .loc 13 1355 0
 7467 007a FB6E     	 ldr r3,[r7,#108]
 7468 007c 1B01     	 lsls r3,r3,#4
 7469 007e 7A68     	 ldr r2,[r7,#4]
 7470 0080 1344     	 add r3,r3,r2
 7471 0082 5B68     	 ldr r3,[r3,#4]
 7472 0084 FB64     	 str r3,[r7,#76]
1356:../cleanflight/src/main/interface/cli.c ****             const float pitchDefault = defaultCustomMotorMixer[i].pitch;
 7473              	 .loc 13 1356 0
 7474 0086 FB6E     	 ldr r3,[r7,#108]
 7475 0088 1B01     	 lsls r3,r3,#4
 7476 008a 7A68     	 ldr r2,[r7,#4]
 7477 008c 1344     	 add r3,r3,r2
 7478 008e 9B68     	 ldr r3,[r3,#8]
 7479 0090 BB64     	 str r3,[r7,#72]
1357:../cleanflight/src/main/interface/cli.c ****             const float yawDefault = defaultCustomMotorMixer[i].yaw;
 7480              	 .loc 13 1357 0
 7481 0092 FB6E     	 ldr r3,[r7,#108]
 7482 0094 1B01     	 lsls r3,r3,#4
 7483 0096 7A68     	 ldr r2,[r7,#4]
 7484 0098 1344     	 add r3,r3,r2
 7485 009a DB68     	 ldr r3,[r3,#12]
 7486 009c 7B64     	 str r3,[r7,#68]
1358:../cleanflight/src/main/interface/cli.c ****             const bool equalsDefault = thr == thrDefault && roll == rollDefault && pitch == pitchDe
 7487              	 .loc 13 1358 0
 7488 009e 97ED197A 	 flds s14,[r7,#100]
 7489 00a2 D7ED147A 	 flds s15,[r7,#80]
 7490 00a6 B4EE677A 	 fcmps s14,s15
 7491 00aa F1EE10FA 	 fmstat
 7492 00ae 1CD1     	 bne .L451
 7493              	 .loc 13 1358 0 is_stmt 0 discriminator 1
 7494 00b0 97ED187A 	 flds s14,[r7,#96]
 7495 00b4 D7ED137A 	 flds s15,[r7,#76]
 7496 00b8 B4EE677A 	 fcmps s14,s15
 7497 00bc F1EE10FA 	 fmstat
 7498 00c0 13D1     	 bne .L451
 7499              	 .loc 13 1358 0 discriminator 3
 7500 00c2 97ED177A 	 flds s14,[r7,#92]
 7501 00c6 D7ED127A 	 flds s15,[r7,#72]
 7502 00ca B4EE677A 	 fcmps s14,s15
 7503 00ce F1EE10FA 	 fmstat
 7504 00d2 0AD1     	 bne .L451
 7505              	 .loc 13 1358 0 discriminator 5
 7506 00d4 97ED167A 	 flds s14,[r7,#88]
 7507 00d8 D7ED117A 	 flds s15,[r7,#68]
 7508 00dc B4EE677A 	 fcmps s14,s15
 7509 00e0 F1EE10FA 	 fmstat
 7510 00e4 01D1     	 bne .L451
 7511              	 .loc 13 1358 0 discriminator 7
 7512 00e6 0123     	 movs r3,#1
 7513 00e8 00E0     	 b .L452
 7514              	.L451:
 7515              	 .loc 13 1358 0 discriminator 8
 7516 00ea 0023     	 movs r3,#0
 7517              	.L452:
 7518              	 .loc 13 1358 0 discriminator 10
 7519 00ec 87F84330 	 strb r3,[r7,#67]
 7520 00f0 97F84330 	 ldrb r3,[r7,#67]
 7521 00f4 03F00103 	 and r3,r3,#1
 7522 00f8 87F84330 	 strb r3,[r7,#67]
1359:../cleanflight/src/main/interface/cli.c **** 
1360:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 7523              	 .loc 13 1360 0 is_stmt 1 discriminator 10
 7524 00fc 07F13803 	 add r3,r7,#56
 7525 0100 386D     	 ldr r0,[r7,#80]
 7526 0102 1946     	 mov r1,r3
 7527 0104 FFF7FEFF 	 bl ftoa
 7528 0108 0646     	 mov r6,r0
 7529 010a 07F12C03 	 add r3,r7,#44
 7530 010e F86C     	 ldr r0,[r7,#76]
 7531 0110 1946     	 mov r1,r3
 7532 0112 FFF7FEFF 	 bl ftoa
 7533 0116 0546     	 mov r5,r0
 7534 0118 07F12003 	 add r3,r7,#32
 7535 011c B86C     	 ldr r0,[r7,#72]
 7536 011e 1946     	 mov r1,r3
 7537 0120 FFF7FEFF 	 bl ftoa
 7538 0124 0446     	 mov r4,r0
 7539 0126 07F11403 	 add r3,r7,#20
 7540 012a 786C     	 ldr r0,[r7,#68]
 7541 012c 1946     	 mov r1,r3
 7542 012e FFF7FEFF 	 bl ftoa
 7543 0132 0146     	 mov r1,r0
 7544 0134 FA7B     	 ldrb r2,[r7,#15]
 7545 0136 97F84330 	 ldrb r3,[r7,#67]
 7546 013a 0096     	 str r6,[sp]
 7547 013c 0195     	 str r5,[sp,#4]
 7548 013e 0294     	 str r4,[sp,#8]
 7549 0140 0391     	 str r1,[sp,#12]
 7550 0142 1046     	 mov r0,r2
 7551 0144 1946     	 mov r1,r3
 7552 0146 BA6E     	 ldr r2,[r7,#104]
 7553 0148 FB6E     	 ldr r3,[r7,#108]
 7554 014a FFF7FEFF 	 bl cliDefaultPrintLinef
 7555              	.L450:
 7556              	.LBE41:
1361:../cleanflight/src/main/interface/cli.c ****                 i,
1362:../cleanflight/src/main/interface/cli.c ****                 ftoa(thrDefault, buf0),
1363:../cleanflight/src/main/interface/cli.c ****                 ftoa(rollDefault, buf1),
1364:../cleanflight/src/main/interface/cli.c ****                 ftoa(pitchDefault, buf2),
1365:../cleanflight/src/main/interface/cli.c ****                 ftoa(yawDefault, buf3));
1366:../cleanflight/src/main/interface/cli.c ****         }
1367:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format,
 7557              	 .loc 13 1367 0 discriminator 2
 7558 014e 07F13803 	 add r3,r7,#56
 7559 0152 786E     	 ldr r0,[r7,#100]
 7560 0154 1946     	 mov r1,r3
 7561 0156 FFF7FEFF 	 bl ftoa
 7562 015a 0646     	 mov r6,r0
 7563 015c 07F12C03 	 add r3,r7,#44
 7564 0160 386E     	 ldr r0,[r7,#96]
 7565 0162 1946     	 mov r1,r3
 7566 0164 FFF7FEFF 	 bl ftoa
 7567 0168 0546     	 mov r5,r0
 7568 016a 07F12003 	 add r3,r7,#32
 7569 016e F86D     	 ldr r0,[r7,#92]
 7570 0170 1946     	 mov r1,r3
 7571 0172 FFF7FEFF 	 bl ftoa
 7572 0176 0446     	 mov r4,r0
 7573 0178 07F11403 	 add r3,r7,#20
 7574 017c B86D     	 ldr r0,[r7,#88]
 7575 017e 1946     	 mov r1,r3
 7576 0180 FFF7FEFF 	 bl ftoa
 7577 0184 0146     	 mov r1,r0
 7578 0186 FA7B     	 ldrb r2,[r7,#15]
 7579 0188 97F85730 	 ldrb r3,[r7,#87]
 7580 018c 0096     	 str r6,[sp]
 7581 018e 0195     	 str r5,[sp,#4]
 7582 0190 0294     	 str r4,[sp,#8]
 7583 0192 0391     	 str r1,[sp,#12]
 7584 0194 1046     	 mov r0,r2
 7585 0196 1946     	 mov r1,r3
 7586 0198 BA6E     	 ldr r2,[r7,#104]
 7587 019a FB6E     	 ldr r3,[r7,#108]
 7588 019c FFF7FEFF 	 bl cliDumpPrintLinef
 7589              	.LBE40:
1345:../cleanflight/src/main/interface/cli.c ****         if (customMotorMixer[i].throttle == 0.0f)
 7590              	 .loc 13 1345 0 discriminator 2
 7591 01a0 FB6E     	 ldr r3,[r7,#108]
 7592 01a2 0133     	 adds r3,r3,#1
 7593 01a4 FB66     	 str r3,[r7,#108]
 7594              	.L447:
1345:../cleanflight/src/main/interface/cli.c ****         if (customMotorMixer[i].throttle == 0.0f)
 7595              	 .loc 13 1345 0 is_stmt 0 discriminator 1
 7596 01a6 FB6E     	 ldr r3,[r7,#108]
 7597 01a8 072B     	 cmp r3,#7
 7598 01aa 7FF635AF 	 bls .L453
 7599              	.L446:
 7600              	.LBE39:
1368:../cleanflight/src/main/interface/cli.c ****             i,
1369:../cleanflight/src/main/interface/cli.c ****             ftoa(thr, buf0),
1370:../cleanflight/src/main/interface/cli.c ****             ftoa(roll, buf1),
1371:../cleanflight/src/main/interface/cli.c ****             ftoa(pitch, buf2),
1372:../cleanflight/src/main/interface/cli.c ****             ftoa(yaw, buf3));
1373:../cleanflight/src/main/interface/cli.c ****     }
1374:../cleanflight/src/main/interface/cli.c **** }
 7601              	 .loc 13 1374 0 is_stmt 1
 7602 01ae 7437     	 adds r7,r7,#116
 7603              	.LCFI374:
 7604              	 .cfi_def_cfa_offset 20
 7605 01b0 BD46     	 mov sp,r7
 7606              	.LCFI375:
 7607              	 .cfi_def_cfa_register 13
 7608              	 
 7609 01b2 F0BD     	 pop {r4,r5,r6,r7,pc}
 7610              	.L455:
 7611              	 .align 2
 7612              	.L454:
 7613 01b4 C0040000 	 .word .LC97
 7614              	 .cfi_endproc
 7615              	.LFE733:
 7617              	 .section .rodata
 7618              	 .align 2
 7619              	.LC98:
 7620 04d4 72657365 	 .ascii "reset\000"
 7620      7400
 7621 04da 0000     	 .align 2
 7622              	.LC99:
 7623 04dc 6C6F6164 	 .ascii "load\000"
 7623      00
 7624 04e1 000000   	 .align 2
 7625              	.LC100:
 7626 04e4 496E7661 	 .ascii "Invalid name\000"
 7626      6C696420 
 7626      6E616D65 
 7626      00
 7627 04f1 000000   	 .align 2
 7628              	.LC101:
 7629 04f4 4C6F6164 	 .ascii "Loaded %s\000"
 7629      65642025 
 7629      7300
 7630              	 .section .text.cliMotorMix,"ax",%progbits
 7631              	 .align 2
 7632              	 .thumb
 7633              	 .thumb_func
 7635              	cliMotorMix:
 7636              	.LFB734:
1375:../cleanflight/src/main/interface/cli.c **** #endif // USE_QUAD_MIXER_ONLY
1376:../cleanflight/src/main/interface/cli.c **** 
1377:../cleanflight/src/main/interface/cli.c **** static void cliMotorMix(char *cmdline)
1378:../cleanflight/src/main/interface/cli.c **** {
 7637              	 .loc 13 1378 0
 7638              	 .cfi_startproc
 7639              	 
 7640              	 
 7641 0000 90B5     	 push {r4,r7,lr}
 7642              	.LCFI376:
 7643              	 .cfi_def_cfa_offset 12
 7644              	 .cfi_offset 4,-12
 7645              	 .cfi_offset 7,-8
 7646              	 .cfi_offset 14,-4
 7647 0002 89B0     	 sub sp,sp,#36
 7648              	.LCFI377:
 7649              	 .cfi_def_cfa_offset 48
 7650 0004 00AF     	 add r7,sp,#0
 7651              	.LCFI378:
 7652              	 .cfi_def_cfa_register 7
 7653 0006 7860     	 str r0,[r7,#4]
1379:../cleanflight/src/main/interface/cli.c **** #ifdef USE_QUAD_MIXER_ONLY
1380:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
1381:../cleanflight/src/main/interface/cli.c **** #else
1382:../cleanflight/src/main/interface/cli.c ****     int check = 0;
 7654              	 .loc 13 1382 0
 7655 0008 0023     	 movs r3,#0
 7656 000a FB61     	 str r3,[r7,#28]
1383:../cleanflight/src/main/interface/cli.c ****     uint8_t len;
1384:../cleanflight/src/main/interface/cli.c ****     const char *ptr;
1385:../cleanflight/src/main/interface/cli.c **** 
1386:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 7657              	 .loc 13 1386 0
 7658 000c 7868     	 ldr r0,[r7,#4]
 7659 000e FFF7FEFF 	 bl isEmpty
 7660 0012 0346     	 mov r3,r0
 7661 0014 002B     	 cmp r3,#0
 7662 0016 09D0     	 beq .L457
1387:../cleanflight/src/main/interface/cli.c ****         printMotorMix(DUMP_MASTER, customMotorMixer(0), NULL);
 7663              	 .loc 13 1387 0
 7664 0018 0020     	 movs r0,#0
 7665 001a FFF7FEFF 	 bl customMotorMixer
 7666 001e 0346     	 mov r3,r0
 7667 0020 0120     	 movs r0,#1
 7668 0022 1946     	 mov r1,r3
 7669 0024 0022     	 movs r2,#0
 7670 0026 FFF7FEFF 	 bl printMotorMix
 7671 002a CFE0     	 b .L456
 7672              	.L457:
1388:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "reset", 5) == 0) {
 7673              	 .loc 13 1388 0
 7674 002c 7868     	 ldr r0,[r7,#4]
 7675 002e 6949     	 ldr r1,.L474
 7676 0030 0522     	 movs r2,#5
 7677 0032 FFF7FEFF 	 bl strncasecmp
 7678 0036 0346     	 mov r3,r0
 7679 0038 002B     	 cmp r3,#0
 7680 003a 11D1     	 bne .L459
 7681              	.LBB42:
1389:../cleanflight/src/main/interface/cli.c ****         // erase custom mixer
1390:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; i < MAX_SUPPORTED_MOTORS; i++) {
 7682              	 .loc 13 1390 0
 7683 003c 0023     	 movs r3,#0
 7684 003e BB61     	 str r3,[r7,#24]
 7685 0040 0AE0     	 b .L460
 7686              	.L461:
1391:../cleanflight/src/main/interface/cli.c ****             customMotorMixerMutable(i)->throttle = 0.0f;
 7687              	 .loc 13 1391 0 discriminator 3
 7688 0042 BB69     	 ldr r3,[r7,#24]
 7689 0044 1846     	 mov r0,r3
 7690 0046 FFF7FEFF 	 bl customMotorMixerMutable
 7691 004a 0246     	 mov r2,r0
 7692 004c 4FF00003 	 mov r3,#0
 7693 0050 1360     	 str r3,[r2]
1390:../cleanflight/src/main/interface/cli.c ****             customMotorMixerMutable(i)->throttle = 0.0f;
 7694              	 .loc 13 1390 0 discriminator 3
 7695 0052 BB69     	 ldr r3,[r7,#24]
 7696 0054 0133     	 adds r3,r3,#1
 7697 0056 BB61     	 str r3,[r7,#24]
 7698              	.L460:
1390:../cleanflight/src/main/interface/cli.c ****             customMotorMixerMutable(i)->throttle = 0.0f;
 7699              	 .loc 13 1390 0 is_stmt 0 discriminator 1
 7700 0058 BB69     	 ldr r3,[r7,#24]
 7701 005a 072B     	 cmp r3,#7
 7702 005c F1D9     	 bls .L461
 7703              	.LBE42:
 7704 005e B5E0     	 b .L456
 7705              	.L459:
1392:../cleanflight/src/main/interface/cli.c ****         }
1393:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "load", 4) == 0) {
 7706              	 .loc 13 1393 0 is_stmt 1
 7707 0060 7868     	 ldr r0,[r7,#4]
 7708 0062 5D49     	 ldr r1,.L474+4
 7709 0064 0422     	 movs r2,#4
 7710 0066 FFF7FEFF 	 bl strncasecmp
 7711 006a 0346     	 mov r3,r0
 7712 006c 002B     	 cmp r3,#0
 7713 006e 3ED1     	 bne .L462
1394:../cleanflight/src/main/interface/cli.c ****         ptr = nextArg(cmdline);
 7714              	 .loc 13 1394 0
 7715 0070 7868     	 ldr r0,[r7,#4]
 7716 0072 FFF7FEFF 	 bl nextArg
 7717 0076 3861     	 str r0,[r7,#16]
1395:../cleanflight/src/main/interface/cli.c ****         if (ptr) {
 7718              	 .loc 13 1395 0
 7719 0078 3B69     	 ldr r3,[r7,#16]
 7720 007a 002B     	 cmp r3,#0
 7721 007c 36D0     	 beq .L463
1396:../cleanflight/src/main/interface/cli.c ****             len = strlen(ptr);
 7722              	 .loc 13 1396 0
 7723 007e 3869     	 ldr r0,[r7,#16]
 7724 0080 FFF7FEFF 	 bl strlen
 7725 0084 0346     	 mov r3,r0
 7726 0086 FB73     	 strb r3,[r7,#15]
 7727              	.LBB43:
1397:../cleanflight/src/main/interface/cli.c ****             for (uint32_t i = 0; ; i++) {
 7728              	 .loc 13 1397 0
 7729 0088 0023     	 movs r3,#0
 7730 008a 7B61     	 str r3,[r7,#20]
 7731              	.L466:
1398:../cleanflight/src/main/interface/cli.c ****                 if (mixerNames[i] == NULL) {
 7732              	 .loc 13 1398 0
 7733 008c 534A     	 ldr r2,.L474+8
 7734 008e 7B69     	 ldr r3,[r7,#20]
 7735 0090 52F82330 	 ldr r3,[r2,r3,lsl#2]
 7736 0094 002B     	 cmp r3,#0
 7737 0096 03D1     	 bne .L464
1399:../cleanflight/src/main/interface/cli.c ****                     cliPrintErrorLinef("Invalid name");
 7738              	 .loc 13 1399 0
 7739 0098 5148     	 ldr r0,.L474+12
 7740 009a FFF7FEFF 	 bl cliPrintErrorLinef
1400:../cleanflight/src/main/interface/cli.c ****                     break;
 7741              	 .loc 13 1400 0
 7742 009e 25E0     	 b .L463
 7743              	.L464:
1401:../cleanflight/src/main/interface/cli.c ****                 }
1402:../cleanflight/src/main/interface/cli.c ****                 if (strncasecmp(ptr, mixerNames[i], len) == 0) {
 7744              	 .loc 13 1402 0
 7745 00a0 4E4A     	 ldr r2,.L474+8
 7746 00a2 7B69     	 ldr r3,[r7,#20]
 7747 00a4 52F82320 	 ldr r2,[r2,r3,lsl#2]
 7748 00a8 FB7B     	 ldrb r3,[r7,#15]
 7749 00aa 3869     	 ldr r0,[r7,#16]
 7750 00ac 1146     	 mov r1,r2
 7751 00ae 1A46     	 mov r2,r3
 7752 00b0 FFF7FEFF 	 bl strncasecmp
 7753 00b4 0346     	 mov r3,r0
 7754 00b6 002B     	 cmp r3,#0
 7755 00b8 14D1     	 bne .L465
1403:../cleanflight/src/main/interface/cli.c ****                     mixerLoadMix(i, customMotorMixerMutable(0));
 7756              	 .loc 13 1403 0
 7757 00ba 7C69     	 ldr r4,[r7,#20]
 7758 00bc 0020     	 movs r0,#0
 7759 00be FFF7FEFF 	 bl customMotorMixerMutable
 7760 00c2 0346     	 mov r3,r0
 7761 00c4 2046     	 mov r0,r4
 7762 00c6 1946     	 mov r1,r3
 7763 00c8 FFF7FEFF 	 bl mixerLoadMix
1404:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef("Loaded %s", mixerNames[i]);
 7764              	 .loc 13 1404 0
 7765 00cc 434A     	 ldr r2,.L474+8
 7766 00ce 7B69     	 ldr r3,[r7,#20]
 7767 00d0 52F82330 	 ldr r3,[r2,r3,lsl#2]
 7768 00d4 4348     	 ldr r0,.L474+16
 7769 00d6 1946     	 mov r1,r3
 7770 00d8 FFF7FEFF 	 bl cliPrintLinef
1405:../cleanflight/src/main/interface/cli.c ****                     cliMotorMix("");
 7771              	 .loc 13 1405 0
 7772 00dc 4248     	 ldr r0,.L474+20
 7773 00de FFF78FFF 	 bl cliMotorMix
1406:../cleanflight/src/main/interface/cli.c ****                     break;
 7774              	 .loc 13 1406 0
 7775 00e2 03E0     	 b .L463
 7776              	.L465:
1397:../cleanflight/src/main/interface/cli.c ****                 if (mixerNames[i] == NULL) {
 7777              	 .loc 13 1397 0
 7778 00e4 7B69     	 ldr r3,[r7,#20]
 7779 00e6 0133     	 adds r3,r3,#1
 7780 00e8 7B61     	 str r3,[r7,#20]
1407:../cleanflight/src/main/interface/cli.c ****                 }
1408:../cleanflight/src/main/interface/cli.c ****             }
 7781              	 .loc 13 1408 0
 7782 00ea CFE7     	 b .L466
 7783              	.L463:
 7784              	.LBE43:
 7785 00ec 6EE0     	 b .L456
 7786              	.L462:
 7787              	.LBB44:
1409:../cleanflight/src/main/interface/cli.c ****         }
1410:../cleanflight/src/main/interface/cli.c ****     } else {
1411:../cleanflight/src/main/interface/cli.c ****         ptr = cmdline;
 7788              	 .loc 13 1411 0
 7789 00ee 7B68     	 ldr r3,[r7,#4]
 7790 00f0 3B61     	 str r3,[r7,#16]
1412:../cleanflight/src/main/interface/cli.c ****         uint32_t i = atoi(ptr); // get motor number
 7791              	 .loc 13 1412 0
 7792 00f2 3869     	 ldr r0,[r7,#16]
 7793 00f4 FFF7FEFF 	 bl atoi
 7794 00f8 0346     	 mov r3,r0
 7795 00fa BB60     	 str r3,[r7,#8]
1413:../cleanflight/src/main/interface/cli.c ****         if (i < MAX_SUPPORTED_MOTORS) {
 7796              	 .loc 13 1413 0
 7797 00fc BB68     	 ldr r3,[r7,#8]
 7798 00fe 072B     	 cmp r3,#7
 7799 0100 5FD8     	 bhi .L467
1414:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7800              	 .loc 13 1414 0
 7801 0102 3869     	 ldr r0,[r7,#16]
 7802 0104 FFF7FEFF 	 bl nextArg
 7803 0108 3861     	 str r0,[r7,#16]
1415:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7804              	 .loc 13 1415 0
 7805 010a 3B69     	 ldr r3,[r7,#16]
 7806 010c 002B     	 cmp r3,#0
 7807 010e 0CD0     	 beq .L468
1416:../cleanflight/src/main/interface/cli.c ****                 customMotorMixerMutable(i)->throttle = fastA2F(ptr);
 7808              	 .loc 13 1416 0
 7809 0110 BB68     	 ldr r3,[r7,#8]
 7810 0112 1846     	 mov r0,r3
 7811 0114 FFF7FEFF 	 bl customMotorMixerMutable
 7812 0118 0446     	 mov r4,r0
 7813 011a 3869     	 ldr r0,[r7,#16]
 7814 011c FFF7FEFF 	 bl fastA2F
 7815 0120 0346     	 mov r3,r0
 7816 0122 2360     	 str r3,[r4]
1417:../cleanflight/src/main/interface/cli.c ****                 check++;
 7817              	 .loc 13 1417 0
 7818 0124 FB69     	 ldr r3,[r7,#28]
 7819 0126 0133     	 adds r3,r3,#1
 7820 0128 FB61     	 str r3,[r7,#28]
 7821              	.L468:
1418:../cleanflight/src/main/interface/cli.c ****             }
1419:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7822              	 .loc 13 1419 0
 7823 012a 3869     	 ldr r0,[r7,#16]
 7824 012c FFF7FEFF 	 bl nextArg
 7825 0130 3861     	 str r0,[r7,#16]
1420:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7826              	 .loc 13 1420 0
 7827 0132 3B69     	 ldr r3,[r7,#16]
 7828 0134 002B     	 cmp r3,#0
 7829 0136 0CD0     	 beq .L469
1421:../cleanflight/src/main/interface/cli.c ****                 customMotorMixerMutable(i)->roll = fastA2F(ptr);
 7830              	 .loc 13 1421 0
 7831 0138 BB68     	 ldr r3,[r7,#8]
 7832 013a 1846     	 mov r0,r3
 7833 013c FFF7FEFF 	 bl customMotorMixerMutable
 7834 0140 0446     	 mov r4,r0
 7835 0142 3869     	 ldr r0,[r7,#16]
 7836 0144 FFF7FEFF 	 bl fastA2F
 7837 0148 0346     	 mov r3,r0
 7838 014a 6360     	 str r3,[r4,#4]
1422:../cleanflight/src/main/interface/cli.c ****                 check++;
 7839              	 .loc 13 1422 0
 7840 014c FB69     	 ldr r3,[r7,#28]
 7841 014e 0133     	 adds r3,r3,#1
 7842 0150 FB61     	 str r3,[r7,#28]
 7843              	.L469:
1423:../cleanflight/src/main/interface/cli.c ****             }
1424:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7844              	 .loc 13 1424 0
 7845 0152 3869     	 ldr r0,[r7,#16]
 7846 0154 FFF7FEFF 	 bl nextArg
 7847 0158 3861     	 str r0,[r7,#16]
1425:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7848              	 .loc 13 1425 0
 7849 015a 3B69     	 ldr r3,[r7,#16]
 7850 015c 002B     	 cmp r3,#0
 7851 015e 0CD0     	 beq .L470
1426:../cleanflight/src/main/interface/cli.c ****                 customMotorMixerMutable(i)->pitch = fastA2F(ptr);
 7852              	 .loc 13 1426 0
 7853 0160 BB68     	 ldr r3,[r7,#8]
 7854 0162 1846     	 mov r0,r3
 7855 0164 FFF7FEFF 	 bl customMotorMixerMutable
 7856 0168 0446     	 mov r4,r0
 7857 016a 3869     	 ldr r0,[r7,#16]
 7858 016c FFF7FEFF 	 bl fastA2F
 7859 0170 0346     	 mov r3,r0
 7860 0172 A360     	 str r3,[r4,#8]
1427:../cleanflight/src/main/interface/cli.c ****                 check++;
 7861              	 .loc 13 1427 0
 7862 0174 FB69     	 ldr r3,[r7,#28]
 7863 0176 0133     	 adds r3,r3,#1
 7864 0178 FB61     	 str r3,[r7,#28]
 7865              	.L470:
1428:../cleanflight/src/main/interface/cli.c ****             }
1429:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 7866              	 .loc 13 1429 0
 7867 017a 3869     	 ldr r0,[r7,#16]
 7868 017c FFF7FEFF 	 bl nextArg
 7869 0180 3861     	 str r0,[r7,#16]
1430:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 7870              	 .loc 13 1430 0
 7871 0182 3B69     	 ldr r3,[r7,#16]
 7872 0184 002B     	 cmp r3,#0
 7873 0186 0CD0     	 beq .L471
1431:../cleanflight/src/main/interface/cli.c ****                 customMotorMixerMutable(i)->yaw = fastA2F(ptr);
 7874              	 .loc 13 1431 0
 7875 0188 BB68     	 ldr r3,[r7,#8]
 7876 018a 1846     	 mov r0,r3
 7877 018c FFF7FEFF 	 bl customMotorMixerMutable
 7878 0190 0446     	 mov r4,r0
 7879 0192 3869     	 ldr r0,[r7,#16]
 7880 0194 FFF7FEFF 	 bl fastA2F
 7881 0198 0346     	 mov r3,r0
 7882 019a E360     	 str r3,[r4,#12]
1432:../cleanflight/src/main/interface/cli.c ****                 check++;
 7883              	 .loc 13 1432 0
 7884 019c FB69     	 ldr r3,[r7,#28]
 7885 019e 0133     	 adds r3,r3,#1
 7886 01a0 FB61     	 str r3,[r7,#28]
 7887              	.L471:
1433:../cleanflight/src/main/interface/cli.c ****             }
1434:../cleanflight/src/main/interface/cli.c ****             if (check != 4) {
 7888              	 .loc 13 1434 0
 7889 01a2 FB69     	 ldr r3,[r7,#28]
 7890 01a4 042B     	 cmp r3,#4
 7891 01a6 02D0     	 beq .L472
1435:../cleanflight/src/main/interface/cli.c ****                 cliShowParseError();
 7892              	 .loc 13 1435 0
 7893 01a8 FFF7FEFF 	 bl cliShowParseError
 7894 01ac 0EE0     	 b .L456
 7895              	.L472:
1436:../cleanflight/src/main/interface/cli.c ****             } else {
1437:../cleanflight/src/main/interface/cli.c ****                 printMotorMix(DUMP_MASTER, customMotorMixer(0), NULL);
 7896              	 .loc 13 1437 0
 7897 01ae 0020     	 movs r0,#0
 7898 01b0 FFF7FEFF 	 bl customMotorMixer
 7899 01b4 0346     	 mov r3,r0
 7900 01b6 0120     	 movs r0,#1
 7901 01b8 1946     	 mov r1,r3
 7902 01ba 0022     	 movs r2,#0
 7903 01bc FFF7FEFF 	 bl printMotorMix
 7904 01c0 04E0     	 b .L456
 7905              	.L467:
1438:../cleanflight/src/main/interface/cli.c ****             }
1439:../cleanflight/src/main/interface/cli.c ****         } else {
1440:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("index", 0, MAX_SUPPORTED_MOTORS - 1);
 7906              	 .loc 13 1440 0
 7907 01c2 0A48     	 ldr r0,.L474+24
 7908 01c4 0021     	 movs r1,#0
 7909 01c6 0722     	 movs r2,#7
 7910 01c8 FFF7FEFF 	 bl cliShowArgumentRangeError
 7911              	.L456:
 7912              	.LBE44:
1441:../cleanflight/src/main/interface/cli.c ****         }
1442:../cleanflight/src/main/interface/cli.c ****     }
1443:../cleanflight/src/main/interface/cli.c **** #endif
1444:../cleanflight/src/main/interface/cli.c **** }
 7913              	 .loc 13 1444 0
 7914 01cc 2437     	 adds r7,r7,#36
 7915              	.LCFI379:
 7916              	 .cfi_def_cfa_offset 12
 7917 01ce BD46     	 mov sp,r7
 7918              	.LCFI380:
 7919              	 .cfi_def_cfa_register 13
 7920              	 
 7921 01d0 90BD     	 pop {r4,r7,pc}
 7922              	.L475:
 7923 01d2 00BF     	 .align 2
 7924              	.L474:
 7925 01d4 D4040000 	 .word .LC98
 7926 01d8 DC040000 	 .word .LC99
 7927 01dc 00000000 	 .word mixerNames
 7928 01e0 E4040000 	 .word .LC100
 7929 01e4 F4040000 	 .word .LC101
 7930 01e8 04000000 	 .word .LC1
 7931 01ec 5C030000 	 .word .LC80
 7932              	 .cfi_endproc
 7933              	.LFE734:
 7935              	 .section .rodata
 7936 04fe 0000     	 .align 2
 7937              	.LC102:
 7938 0500 72787261 	 .ascii "rxrange %u %u %u\000"
 7938      6E676520 
 7938      25752025 
 7938      75202575 
 7938      00
 7939              	 .section .text.printRxRange,"ax",%progbits
 7940              	 .align 2
 7941              	 .thumb
 7942              	 .thumb_func
 7944              	printRxRange:
 7945              	.LFB735:
1445:../cleanflight/src/main/interface/cli.c **** 
1446:../cleanflight/src/main/interface/cli.c **** static void printRxRange(uint8_t dumpMask, const rxChannelRangeConfig_t *channelRangeConfigs, const
1447:../cleanflight/src/main/interface/cli.c **** {
 7946              	 .loc 13 1447 0
 7947              	 .cfi_startproc
 7948              	 
 7949              	 
 7950 0000 80B5     	 push {r7,lr}
 7951              	.LCFI381:
 7952              	 .cfi_def_cfa_offset 8
 7953              	 .cfi_offset 7,-8
 7954              	 .cfi_offset 14,-4
 7955 0002 8AB0     	 sub sp,sp,#40
 7956              	.LCFI382:
 7957              	 .cfi_def_cfa_offset 48
 7958 0004 02AF     	 add r7,sp,#8
 7959              	.LCFI383:
 7960              	 .cfi_def_cfa 7,40
 7961 0006 0346     	 mov r3,r0
 7962 0008 B960     	 str r1,[r7,#8]
 7963 000a 7A60     	 str r2,[r7,#4]
 7964 000c FB73     	 strb r3,[r7,#15]
1448:../cleanflight/src/main/interface/cli.c ****     const char *format = "rxrange %u %u %u";
 7965              	 .loc 13 1448 0
 7966 000e 2B4B     	 ldr r3,.L480
 7967 0010 7B61     	 str r3,[r7,#20]
 7968              	.LBB45:
1449:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < NON_AUX_CHANNEL_COUNT; i++) {
 7969              	 .loc 13 1449 0
 7970 0012 0023     	 movs r3,#0
 7971 0014 FB61     	 str r3,[r7,#28]
 7972 0016 4AE0     	 b .L477
 7973              	.L479:
 7974              	.LBB46:
1450:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
 7975              	 .loc 13 1450 0
 7976 0018 0023     	 movs r3,#0
 7977 001a FB76     	 strb r3,[r7,#27]
1451:../cleanflight/src/main/interface/cli.c ****         if (defaultChannelRangeConfigs) {
 7978              	 .loc 13 1451 0
 7979 001c 7B68     	 ldr r3,[r7,#4]
 7980 001e 002B     	 cmp r3,#0
 7981 0020 2AD0     	 beq .L478
1452:../cleanflight/src/main/interface/cli.c ****             equalsDefault = !memcmp(&channelRangeConfigs[i], &defaultChannelRangeConfigs[i], sizeof
 7982              	 .loc 13 1452 0
 7983 0022 FB69     	 ldr r3,[r7,#28]
 7984 0024 9B00     	 lsls r3,r3,#2
 7985 0026 BA68     	 ldr r2,[r7,#8]
 7986 0028 D118     	 adds r1,r2,r3
 7987 002a FB69     	 ldr r3,[r7,#28]
 7988 002c 9B00     	 lsls r3,r3,#2
 7989 002e 7A68     	 ldr r2,[r7,#4]
 7990 0030 1344     	 add r3,r3,r2
 7991 0032 0846     	 mov r0,r1
 7992 0034 1946     	 mov r1,r3
 7993 0036 0422     	 movs r2,#4
 7994 0038 FFF7FEFF 	 bl memcmp
 7995 003c 0346     	 mov r3,r0
 7996 003e 002B     	 cmp r3,#0
 7997 0040 0CBF     	 ite eq
 7998 0042 0123     	 moveq r3,#1
 7999 0044 0023     	 movne r3,#0
 8000 0046 FB76     	 strb r3,[r7,#27]
1453:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
1454:../cleanflight/src/main/interface/cli.c ****                 i,
1455:../cleanflight/src/main/interface/cli.c ****                 defaultChannelRangeConfigs[i].min,
 8001              	 .loc 13 1455 0
 8002 0048 FB69     	 ldr r3,[r7,#28]
 8003 004a 9B00     	 lsls r3,r3,#2
 8004 004c 7A68     	 ldr r2,[r7,#4]
 8005 004e 1344     	 add r3,r3,r2
 8006 0050 1B88     	 ldrh r3,[r3]
 8007 0052 9BB2     	 uxth r3,r3
1453:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 8008              	 .loc 13 1453 0
 8009 0054 1846     	 mov r0,r3
1456:../cleanflight/src/main/interface/cli.c ****                 defaultChannelRangeConfigs[i].max
 8010              	 .loc 13 1456 0
 8011 0056 FB69     	 ldr r3,[r7,#28]
 8012 0058 9B00     	 lsls r3,r3,#2
 8013 005a 7A68     	 ldr r2,[r7,#4]
 8014 005c 1344     	 add r3,r3,r2
 8015 005e 5B88     	 ldrh r3,[r3,#2]
 8016 0060 9BB2     	 uxth r3,r3
1453:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 8017              	 .loc 13 1453 0
 8018 0062 1946     	 mov r1,r3
 8019 0064 FA7B     	 ldrb r2,[r7,#15]
 8020 0066 FB7E     	 ldrb r3,[r7,#27]
 8021 0068 0090     	 str r0,[sp]
 8022 006a 0191     	 str r1,[sp,#4]
 8023 006c 1046     	 mov r0,r2
 8024 006e 1946     	 mov r1,r3
 8025 0070 7A69     	 ldr r2,[r7,#20]
 8026 0072 FB69     	 ldr r3,[r7,#28]
 8027 0074 FFF7FEFF 	 bl cliDefaultPrintLinef
 8028              	.L478:
1457:../cleanflight/src/main/interface/cli.c ****             );
1458:../cleanflight/src/main/interface/cli.c ****         }
1459:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format,
1460:../cleanflight/src/main/interface/cli.c ****             i,
1461:../cleanflight/src/main/interface/cli.c ****             channelRangeConfigs[i].min,
 8029              	 .loc 13 1461 0 discriminator 2
 8030 0078 FB69     	 ldr r3,[r7,#28]
 8031 007a 9B00     	 lsls r3,r3,#2
 8032 007c BA68     	 ldr r2,[r7,#8]
 8033 007e 1344     	 add r3,r3,r2
 8034 0080 1B88     	 ldrh r3,[r3]
 8035 0082 9BB2     	 uxth r3,r3
1459:../cleanflight/src/main/interface/cli.c ****             i,
 8036              	 .loc 13 1459 0 discriminator 2
 8037 0084 1846     	 mov r0,r3
1462:../cleanflight/src/main/interface/cli.c ****             channelRangeConfigs[i].max
 8038              	 .loc 13 1462 0 discriminator 2
 8039 0086 FB69     	 ldr r3,[r7,#28]
 8040 0088 9B00     	 lsls r3,r3,#2
 8041 008a BA68     	 ldr r2,[r7,#8]
 8042 008c 1344     	 add r3,r3,r2
 8043 008e 5B88     	 ldrh r3,[r3,#2]
 8044 0090 9BB2     	 uxth r3,r3
1459:../cleanflight/src/main/interface/cli.c ****             i,
 8045              	 .loc 13 1459 0 discriminator 2
 8046 0092 1946     	 mov r1,r3
 8047 0094 FA7B     	 ldrb r2,[r7,#15]
 8048 0096 FB7E     	 ldrb r3,[r7,#27]
 8049 0098 0090     	 str r0,[sp]
 8050 009a 0191     	 str r1,[sp,#4]
 8051 009c 1046     	 mov r0,r2
 8052 009e 1946     	 mov r1,r3
 8053 00a0 7A69     	 ldr r2,[r7,#20]
 8054 00a2 FB69     	 ldr r3,[r7,#28]
 8055 00a4 FFF7FEFF 	 bl cliDumpPrintLinef
 8056              	.LBE46:
1449:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
 8057              	 .loc 13 1449 0 discriminator 2
 8058 00a8 FB69     	 ldr r3,[r7,#28]
 8059 00aa 0133     	 adds r3,r3,#1
 8060 00ac FB61     	 str r3,[r7,#28]
 8061              	.L477:
1449:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
 8062              	 .loc 13 1449 0 is_stmt 0 discriminator 1
 8063 00ae FB69     	 ldr r3,[r7,#28]
 8064 00b0 032B     	 cmp r3,#3
 8065 00b2 B1D9     	 bls .L479
 8066              	.LBE45:
1463:../cleanflight/src/main/interface/cli.c ****         );
1464:../cleanflight/src/main/interface/cli.c ****     }
1465:../cleanflight/src/main/interface/cli.c **** }
 8067              	 .loc 13 1465 0 is_stmt 1
 8068 00b4 2037     	 adds r7,r7,#32
 8069              	.LCFI384:
 8070              	 .cfi_def_cfa_offset 8
 8071 00b6 BD46     	 mov sp,r7
 8072              	.LCFI385:
 8073              	 .cfi_def_cfa_register 13
 8074              	 
 8075 00b8 80BD     	 pop {r7,pc}
 8076              	.L481:
 8077 00ba 00BF     	 .align 2
 8078              	.L480:
 8079 00bc 00050000 	 .word .LC102
 8080              	 .cfi_endproc
 8081              	.LFE735:
 8083              	 .section .text.cliRxRange,"ax",%progbits
 8084              	 .align 2
 8085              	 .thumb
 8086              	 .thumb_func
 8088              	cliRxRange:
 8089              	.LFB736:
1466:../cleanflight/src/main/interface/cli.c **** 
1467:../cleanflight/src/main/interface/cli.c **** static void cliRxRange(char *cmdline)
1468:../cleanflight/src/main/interface/cli.c **** {
 8090              	 .loc 13 1468 0
 8091              	 .cfi_startproc
 8092              	 
 8093              	 
 8094 0000 80B5     	 push {r7,lr}
 8095              	.LCFI386:
 8096              	 .cfi_def_cfa_offset 8
 8097              	 .cfi_offset 7,-8
 8098              	 .cfi_offset 14,-4
 8099 0002 8CB0     	 sub sp,sp,#48
 8100              	.LCFI387:
 8101              	 .cfi_def_cfa_offset 56
 8102 0004 02AF     	 add r7,sp,#8
 8103              	.LCFI388:
 8104              	 .cfi_def_cfa 7,48
 8105 0006 7860     	 str r0,[r7,#4]
1469:../cleanflight/src/main/interface/cli.c ****     const char *format = "rxrange %u %u %u";
 8106              	 .loc 13 1469 0
 8107 0008 494B     	 ldr r3,.L493
 8108 000a BB61     	 str r3,[r7,#24]
1470:../cleanflight/src/main/interface/cli.c ****     int i, validArgumentCount = 0;
 8109              	 .loc 13 1470 0
 8110 000c 0023     	 movs r3,#0
 8111 000e 7B62     	 str r3,[r7,#36]
1471:../cleanflight/src/main/interface/cli.c ****     const char *ptr;
1472:../cleanflight/src/main/interface/cli.c **** 
1473:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 8112              	 .loc 13 1473 0
 8113 0010 7868     	 ldr r0,[r7,#4]
 8114 0012 FFF7FEFF 	 bl isEmpty
 8115 0016 0346     	 mov r3,r0
 8116 0018 002B     	 cmp r3,#0
 8117 001a 09D0     	 beq .L483
1474:../cleanflight/src/main/interface/cli.c ****         printRxRange(DUMP_MASTER, rxChannelRangeConfigs(0), NULL);
 8118              	 .loc 13 1474 0
 8119 001c 0020     	 movs r0,#0
 8120 001e FFF7FEFF 	 bl rxChannelRangeConfigs
 8121 0022 0346     	 mov r3,r0
 8122 0024 0120     	 movs r0,#1
 8123 0026 1946     	 mov r1,r3
 8124 0028 0022     	 movs r2,#0
 8125 002a FFF7FEFF 	 bl printRxRange
 8126 002e 7BE0     	 b .L482
 8127              	.L483:
1475:../cleanflight/src/main/interface/cli.c ****     } else if (strcasecmp(cmdline, "reset") == 0) {
 8128              	 .loc 13 1475 0
 8129 0030 7868     	 ldr r0,[r7,#4]
 8130 0032 4049     	 ldr r1,.L493+4
 8131 0034 FFF7FEFF 	 bl strcasecmp
 8132 0038 0346     	 mov r3,r0
 8133 003a 002B     	 cmp r3,#0
 8134 003c 07D1     	 bne .L485
1476:../cleanflight/src/main/interface/cli.c ****         resetAllRxChannelRangeConfigurations(rxChannelRangeConfigsMutable(0));
 8135              	 .loc 13 1476 0
 8136 003e 0020     	 movs r0,#0
 8137 0040 FFF7FEFF 	 bl rxChannelRangeConfigsMutable
 8138 0044 0346     	 mov r3,r0
 8139 0046 1846     	 mov r0,r3
 8140 0048 FFF7FEFF 	 bl resetAllRxChannelRangeConfigurations
 8141 004c 6CE0     	 b .L482
 8142              	.L485:
1477:../cleanflight/src/main/interface/cli.c ****     } else {
1478:../cleanflight/src/main/interface/cli.c ****         ptr = cmdline;
 8143              	 .loc 13 1478 0
 8144 004e 7B68     	 ldr r3,[r7,#4]
 8145 0050 7B61     	 str r3,[r7,#20]
1479:../cleanflight/src/main/interface/cli.c ****         i = atoi(ptr);
 8146              	 .loc 13 1479 0
 8147 0052 7869     	 ldr r0,[r7,#20]
 8148 0054 FFF7FEFF 	 bl atoi
 8149 0058 3861     	 str r0,[r7,#16]
1480:../cleanflight/src/main/interface/cli.c ****         if (i >= 0 && i < NON_AUX_CHANNEL_COUNT) {
 8150              	 .loc 13 1480 0
 8151 005a 3B69     	 ldr r3,[r7,#16]
 8152 005c 002B     	 cmp r3,#0
 8153 005e 5EDB     	 blt .L486
 8154              	 .loc 13 1480 0 is_stmt 0 discriminator 1
 8155 0060 3B69     	 ldr r3,[r7,#16]
 8156 0062 032B     	 cmp r3,#3
 8157 0064 5BDC     	 bgt .L486
 8158              	.LBB47:
1481:../cleanflight/src/main/interface/cli.c ****             int rangeMin = PWM_PULSE_MIN, rangeMax = PWM_PULSE_MAX;
 8159              	 .loc 13 1481 0 is_stmt 1
 8160 0066 40F2EE23 	 movw r3,#750
 8161 006a 3B62     	 str r3,[r7,#32]
 8162 006c 40F6CA03 	 movw r3,#2250
 8163 0070 FB61     	 str r3,[r7,#28]
1482:../cleanflight/src/main/interface/cli.c **** 
1483:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 8164              	 .loc 13 1483 0
 8165 0072 7869     	 ldr r0,[r7,#20]
 8166 0074 FFF7FEFF 	 bl nextArg
 8167 0078 7861     	 str r0,[r7,#20]
1484:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 8168              	 .loc 13 1484 0
 8169 007a 7B69     	 ldr r3,[r7,#20]
 8170 007c 002B     	 cmp r3,#0
 8171 007e 06D0     	 beq .L487
1485:../cleanflight/src/main/interface/cli.c ****                 rangeMin = atoi(ptr);
 8172              	 .loc 13 1485 0
 8173 0080 7869     	 ldr r0,[r7,#20]
 8174 0082 FFF7FEFF 	 bl atoi
 8175 0086 3862     	 str r0,[r7,#32]
1486:../cleanflight/src/main/interface/cli.c ****                 validArgumentCount++;
 8176              	 .loc 13 1486 0
 8177 0088 7B6A     	 ldr r3,[r7,#36]
 8178 008a 0133     	 adds r3,r3,#1
 8179 008c 7B62     	 str r3,[r7,#36]
 8180              	.L487:
1487:../cleanflight/src/main/interface/cli.c ****             }
1488:../cleanflight/src/main/interface/cli.c **** 
1489:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 8181              	 .loc 13 1489 0
 8182 008e 7869     	 ldr r0,[r7,#20]
 8183 0090 FFF7FEFF 	 bl nextArg
 8184 0094 7861     	 str r0,[r7,#20]
1490:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 8185              	 .loc 13 1490 0
 8186 0096 7B69     	 ldr r3,[r7,#20]
 8187 0098 002B     	 cmp r3,#0
 8188 009a 06D0     	 beq .L488
1491:../cleanflight/src/main/interface/cli.c ****                 rangeMax = atoi(ptr);
 8189              	 .loc 13 1491 0
 8190 009c 7869     	 ldr r0,[r7,#20]
 8191 009e FFF7FEFF 	 bl atoi
 8192 00a2 F861     	 str r0,[r7,#28]
1492:../cleanflight/src/main/interface/cli.c ****                 validArgumentCount++;
 8193              	 .loc 13 1492 0
 8194 00a4 7B6A     	 ldr r3,[r7,#36]
 8195 00a6 0133     	 adds r3,r3,#1
 8196 00a8 7B62     	 str r3,[r7,#36]
 8197              	.L488:
1493:../cleanflight/src/main/interface/cli.c ****             }
1494:../cleanflight/src/main/interface/cli.c **** 
1495:../cleanflight/src/main/interface/cli.c ****             if (validArgumentCount != 2) {
 8198              	 .loc 13 1495 0
 8199 00aa 7B6A     	 ldr r3,[r7,#36]
 8200 00ac 022B     	 cmp r3,#2
 8201 00ae 02D0     	 beq .L489
1496:../cleanflight/src/main/interface/cli.c ****                 cliShowParseError();
 8202              	 .loc 13 1496 0
 8203 00b0 FFF7FEFF 	 bl cliShowParseError
 8204 00b4 32E0     	 b .L490
 8205              	.L489:
1497:../cleanflight/src/main/interface/cli.c ****             } else if (rangeMin < PWM_PULSE_MIN || rangeMin > PWM_PULSE_MAX || rangeMax < PWM_PULSE
 8206              	 .loc 13 1497 0
 8207 00b6 3B6A     	 ldr r3,[r7,#32]
 8208 00b8 40F2ED22 	 movw r2,#749
 8209 00bc 9342     	 cmp r3,r2
 8210 00be 0EDD     	 ble .L491
 8211              	 .loc 13 1497 0 is_stmt 0 discriminator 1
 8212 00c0 3B6A     	 ldr r3,[r7,#32]
 8213 00c2 40F6CA02 	 movw r2,#2250
 8214 00c6 9342     	 cmp r3,r2
 8215 00c8 09DC     	 bgt .L491
 8216              	 .loc 13 1497 0 discriminator 2
 8217 00ca FB69     	 ldr r3,[r7,#28]
 8218 00cc 40F2ED22 	 movw r2,#749
 8219 00d0 9342     	 cmp r3,r2
 8220 00d2 04DD     	 ble .L491
 8221              	 .loc 13 1497 0 discriminator 3
 8222 00d4 FB69     	 ldr r3,[r7,#28]
 8223 00d6 40F6CA02 	 movw r2,#2250
 8224 00da 9342     	 cmp r3,r2
 8225 00dc 02DD     	 ble .L492
 8226              	.L491:
1498:../cleanflight/src/main/interface/cli.c ****                 cliShowParseError();
 8227              	 .loc 13 1498 0 is_stmt 1
 8228 00de FFF7FEFF 	 bl cliShowParseError
 8229 00e2 1BE0     	 b .L490
 8230              	.L492:
 8231              	.LBB48:
1499:../cleanflight/src/main/interface/cli.c ****             } else {
1500:../cleanflight/src/main/interface/cli.c ****                 rxChannelRangeConfig_t *channelRangeConfig = rxChannelRangeConfigsMutable(i);
 8232              	 .loc 13 1500 0
 8233 00e4 3869     	 ldr r0,[r7,#16]
 8234 00e6 FFF7FEFF 	 bl rxChannelRangeConfigsMutable
 8235 00ea F860     	 str r0,[r7,#12]
1501:../cleanflight/src/main/interface/cli.c ****                 channelRangeConfig->min = rangeMin;
 8236              	 .loc 13 1501 0
 8237 00ec 3B6A     	 ldr r3,[r7,#32]
 8238 00ee 9AB2     	 uxth r2,r3
 8239 00f0 FB68     	 ldr r3,[r7,#12]
 8240 00f2 1A80     	 strh r2,[r3]
1502:../cleanflight/src/main/interface/cli.c ****                 channelRangeConfig->max = rangeMax;
 8241              	 .loc 13 1502 0
 8242 00f4 FB69     	 ldr r3,[r7,#28]
 8243 00f6 9AB2     	 uxth r2,r3
 8244 00f8 FB68     	 ldr r3,[r7,#12]
 8245 00fa 5A80     	 strh r2,[r3,#2]
1503:../cleanflight/src/main/interface/cli.c ****                 cliDumpPrintLinef(0, false, format,
1504:../cleanflight/src/main/interface/cli.c ****                     i,
1505:../cleanflight/src/main/interface/cli.c ****                     channelRangeConfig->min,
 8246              	 .loc 13 1505 0
 8247 00fc FB68     	 ldr r3,[r7,#12]
 8248 00fe 1B88     	 ldrh r3,[r3]
 8249 0100 9BB2     	 uxth r3,r3
1503:../cleanflight/src/main/interface/cli.c ****                 cliDumpPrintLinef(0, false, format,
 8250              	 .loc 13 1503 0
 8251 0102 1A46     	 mov r2,r3
1506:../cleanflight/src/main/interface/cli.c ****                     channelRangeConfig->max
 8252              	 .loc 13 1506 0
 8253 0104 FB68     	 ldr r3,[r7,#12]
 8254 0106 5B88     	 ldrh r3,[r3,#2]
 8255 0108 9BB2     	 uxth r3,r3
1503:../cleanflight/src/main/interface/cli.c ****                 cliDumpPrintLinef(0, false, format,
 8256              	 .loc 13 1503 0
 8257 010a 0092     	 str r2,[sp]
 8258 010c 0193     	 str r3,[sp,#4]
 8259 010e 0020     	 movs r0,#0
 8260 0110 0021     	 movs r1,#0
 8261 0112 BA69     	 ldr r2,[r7,#24]
 8262 0114 3B69     	 ldr r3,[r7,#16]
 8263 0116 FFF7FEFF 	 bl cliDumpPrintLinef
 8264              	.LBE48:
 8265              	.LBE47:
1480:../cleanflight/src/main/interface/cli.c ****             int rangeMin = PWM_PULSE_MIN, rangeMax = PWM_PULSE_MAX;
 8266              	 .loc 13 1480 0
 8267 011a 05E0     	 b .L482
 8268              	.L490:
 8269 011c 04E0     	 b .L482
 8270              	.L486:
1507:../cleanflight/src/main/interface/cli.c ****                 );
1508:../cleanflight/src/main/interface/cli.c **** 
1509:../cleanflight/src/main/interface/cli.c ****             }
1510:../cleanflight/src/main/interface/cli.c ****         } else {
1511:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("channel", 0, NON_AUX_CHANNEL_COUNT - 1);
 8271              	 .loc 13 1511 0
 8272 011e 0648     	 ldr r0,.L493+8
 8273 0120 0021     	 movs r1,#0
 8274 0122 0322     	 movs r2,#3
 8275 0124 FFF7FEFF 	 bl cliShowArgumentRangeError
 8276              	.L482:
1512:../cleanflight/src/main/interface/cli.c ****         }
1513:../cleanflight/src/main/interface/cli.c ****     }
1514:../cleanflight/src/main/interface/cli.c **** }
 8277              	 .loc 13 1514 0
 8278 0128 2837     	 adds r7,r7,#40
 8279              	.LCFI389:
 8280              	 .cfi_def_cfa_offset 8
 8281 012a BD46     	 mov sp,r7
 8282              	.LCFI390:
 8283              	 .cfi_def_cfa_register 13
 8284              	 
 8285 012c 80BD     	 pop {r7,pc}
 8286              	.L494:
 8287 012e 00BF     	 .align 2
 8288              	.L493:
 8289 0130 00050000 	 .word .LC102
 8290 0134 D4040000 	 .word .LC98
 8291 0138 38030000 	 .word .LC78
 8292              	 .cfi_endproc
 8293              	.LFE736:
 8295              	 .section .rodata
 8296 0511 000000   	 .align 2
 8297              	.LC103:
 8298 0514 73657276 	 .ascii "servo %u %d %d %d %d %d\000"
 8298      6F202575 
 8298      20256420 
 8298      25642025 
 8298      64202564 
 8299              	 .align 2
 8300              	.LC104:
 8301 052c 736D6978 	 .ascii "smix reverse %d %d r\000"
 8301      20726576 
 8301      65727365 
 8301      20256420 
 8301      25642072 
 8302              	 .section .text.printServo,"ax",%progbits
 8303              	 .align 2
 8304              	 .thumb
 8305              	 .thumb_func
 8307              	printServo:
 8308              	.LFB737:
1515:../cleanflight/src/main/interface/cli.c **** 
1516:../cleanflight/src/main/interface/cli.c **** #ifdef USE_LED_STRIP
1517:../cleanflight/src/main/interface/cli.c **** static void printLed(uint8_t dumpMask, const ledConfig_t *ledConfigs, const ledConfig_t *defaultLed
1518:../cleanflight/src/main/interface/cli.c **** {
1519:../cleanflight/src/main/interface/cli.c ****     const char *format = "led %u %s";
1520:../cleanflight/src/main/interface/cli.c ****     char ledConfigBuffer[20];
1521:../cleanflight/src/main/interface/cli.c ****     char ledConfigDefaultBuffer[20];
1522:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < LED_MAX_STRIP_LENGTH; i++) {
1523:../cleanflight/src/main/interface/cli.c ****         ledConfig_t ledConfig = ledConfigs[i];
1524:../cleanflight/src/main/interface/cli.c ****         generateLedConfig(&ledConfig, ledConfigBuffer, sizeof(ledConfigBuffer));
1525:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
1526:../cleanflight/src/main/interface/cli.c ****         if (defaultLedConfigs) {
1527:../cleanflight/src/main/interface/cli.c ****             ledConfig_t ledConfigDefault = defaultLedConfigs[i];
1528:../cleanflight/src/main/interface/cli.c ****             equalsDefault = ledConfig == ledConfigDefault;
1529:../cleanflight/src/main/interface/cli.c ****             generateLedConfig(&ledConfigDefault, ledConfigDefaultBuffer, sizeof(ledConfigDefaultBuf
1530:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format, i, ledConfigDefaultBuffer);
1531:../cleanflight/src/main/interface/cli.c ****         }
1532:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format, i, ledConfigBuffer);
1533:../cleanflight/src/main/interface/cli.c ****     }
1534:../cleanflight/src/main/interface/cli.c **** }
1535:../cleanflight/src/main/interface/cli.c **** 
1536:../cleanflight/src/main/interface/cli.c **** static void cliLed(char *cmdline)
1537:../cleanflight/src/main/interface/cli.c **** {
1538:../cleanflight/src/main/interface/cli.c ****     const char *format = "led %u %s";
1539:../cleanflight/src/main/interface/cli.c ****     char ledConfigBuffer[20];
1540:../cleanflight/src/main/interface/cli.c ****     int i;
1541:../cleanflight/src/main/interface/cli.c ****     const char *ptr;
1542:../cleanflight/src/main/interface/cli.c **** 
1543:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
1544:../cleanflight/src/main/interface/cli.c ****         printLed(DUMP_MASTER, ledStripConfig()->ledConfigs, NULL);
1545:../cleanflight/src/main/interface/cli.c ****     } else {
1546:../cleanflight/src/main/interface/cli.c ****         ptr = cmdline;
1547:../cleanflight/src/main/interface/cli.c ****         i = atoi(ptr);
1548:../cleanflight/src/main/interface/cli.c ****         if (i < LED_MAX_STRIP_LENGTH) {
1549:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(cmdline);
1550:../cleanflight/src/main/interface/cli.c ****             if (parseLedStripConfig(i, ptr)) {
1551:../cleanflight/src/main/interface/cli.c ****                 generateLedConfig((ledConfig_t *)&ledStripConfig()->ledConfigs[i], ledConfigBuffer,
1552:../cleanflight/src/main/interface/cli.c ****                 cliDumpPrintLinef(0, false, format, i, ledConfigBuffer);
1553:../cleanflight/src/main/interface/cli.c ****             } else {
1554:../cleanflight/src/main/interface/cli.c ****                 cliShowParseError();
1555:../cleanflight/src/main/interface/cli.c ****             }
1556:../cleanflight/src/main/interface/cli.c ****         } else {
1557:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("index", 0, LED_MAX_STRIP_LENGTH - 1);
1558:../cleanflight/src/main/interface/cli.c ****         }
1559:../cleanflight/src/main/interface/cli.c ****     }
1560:../cleanflight/src/main/interface/cli.c **** }
1561:../cleanflight/src/main/interface/cli.c **** 
1562:../cleanflight/src/main/interface/cli.c **** static void printColor(uint8_t dumpMask, const hsvColor_t *colors, const hsvColor_t *defaultColors)
1563:../cleanflight/src/main/interface/cli.c **** {
1564:../cleanflight/src/main/interface/cli.c ****     const char *format = "color %u %d,%u,%u";
1565:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < LED_CONFIGURABLE_COLOR_COUNT; i++) {
1566:../cleanflight/src/main/interface/cli.c ****         const hsvColor_t *color = &colors[i];
1567:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
1568:../cleanflight/src/main/interface/cli.c ****         if (defaultColors) {
1569:../cleanflight/src/main/interface/cli.c ****             const hsvColor_t *colorDefault = &defaultColors[i];
1570:../cleanflight/src/main/interface/cli.c ****             equalsDefault = !memcmp(color, colorDefault, sizeof(*color));
1571:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format, i,colorDefault->h, colorDefault->
1572:../cleanflight/src/main/interface/cli.c ****         }
1573:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format, i, color->h, color->s, color->v);
1574:../cleanflight/src/main/interface/cli.c ****     }
1575:../cleanflight/src/main/interface/cli.c **** }
1576:../cleanflight/src/main/interface/cli.c **** 
1577:../cleanflight/src/main/interface/cli.c **** static void cliColor(char *cmdline)
1578:../cleanflight/src/main/interface/cli.c **** {
1579:../cleanflight/src/main/interface/cli.c ****     const char *format = "color %u %d,%u,%u";
1580:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
1581:../cleanflight/src/main/interface/cli.c ****         printColor(DUMP_MASTER, ledStripConfig()->colors, NULL);
1582:../cleanflight/src/main/interface/cli.c ****     } else {
1583:../cleanflight/src/main/interface/cli.c ****         const char *ptr = cmdline;
1584:../cleanflight/src/main/interface/cli.c ****         const int i = atoi(ptr);
1585:../cleanflight/src/main/interface/cli.c ****         if (i < LED_CONFIGURABLE_COLOR_COUNT) {
1586:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(cmdline);
1587:../cleanflight/src/main/interface/cli.c ****             if (parseColor(i, ptr)) {
1588:../cleanflight/src/main/interface/cli.c ****                 const hsvColor_t *color = &ledStripConfig()->colors[i];
1589:../cleanflight/src/main/interface/cli.c ****                 cliDumpPrintLinef(0, false, format, i, color->h, color->s, color->v);
1590:../cleanflight/src/main/interface/cli.c ****             } else {
1591:../cleanflight/src/main/interface/cli.c ****                 cliShowParseError();
1592:../cleanflight/src/main/interface/cli.c ****             }
1593:../cleanflight/src/main/interface/cli.c ****         } else {
1594:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("index", 0, LED_CONFIGURABLE_COLOR_COUNT - 1);
1595:../cleanflight/src/main/interface/cli.c ****         }
1596:../cleanflight/src/main/interface/cli.c ****     }
1597:../cleanflight/src/main/interface/cli.c **** }
1598:../cleanflight/src/main/interface/cli.c **** 
1599:../cleanflight/src/main/interface/cli.c **** static void printModeColor(uint8_t dumpMask, const ledStripConfig_t *ledStripConfig, const ledStrip
1600:../cleanflight/src/main/interface/cli.c **** {
1601:../cleanflight/src/main/interface/cli.c ****     const char *format = "mode_color %u %u %u";
1602:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < LED_MODE_COUNT; i++) {
1603:../cleanflight/src/main/interface/cli.c ****         for (uint32_t j = 0; j < LED_DIRECTION_COUNT; j++) {
1604:../cleanflight/src/main/interface/cli.c ****             int colorIndex = ledStripConfig->modeColors[i].color[j];
1605:../cleanflight/src/main/interface/cli.c ****             bool equalsDefault = false;
1606:../cleanflight/src/main/interface/cli.c ****             if (defaultLedStripConfig) {
1607:../cleanflight/src/main/interface/cli.c ****                 int colorIndexDefault = defaultLedStripConfig->modeColors[i].color[j];
1608:../cleanflight/src/main/interface/cli.c ****                 equalsDefault = colorIndex == colorIndexDefault;
1609:../cleanflight/src/main/interface/cli.c ****                 cliDefaultPrintLinef(dumpMask, equalsDefault, format, i, j, colorIndexDefault);
1610:../cleanflight/src/main/interface/cli.c ****             }
1611:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(dumpMask, equalsDefault, format, i, j, colorIndex);
1612:../cleanflight/src/main/interface/cli.c ****         }
1613:../cleanflight/src/main/interface/cli.c ****     }
1614:../cleanflight/src/main/interface/cli.c **** 
1615:../cleanflight/src/main/interface/cli.c ****     for (uint32_t j = 0; j < LED_SPECIAL_COLOR_COUNT; j++) {
1616:../cleanflight/src/main/interface/cli.c ****         const int colorIndex = ledStripConfig->specialColors.color[j];
1617:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
1618:../cleanflight/src/main/interface/cli.c ****         if (defaultLedStripConfig) {
1619:../cleanflight/src/main/interface/cli.c ****             const int colorIndexDefault = defaultLedStripConfig->specialColors.color[j];
1620:../cleanflight/src/main/interface/cli.c ****             equalsDefault = colorIndex == colorIndexDefault;
1621:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format, LED_SPECIAL, j, colorIndexDefault
1622:../cleanflight/src/main/interface/cli.c ****         }
1623:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format, LED_SPECIAL, j, colorIndex);
1624:../cleanflight/src/main/interface/cli.c ****     }
1625:../cleanflight/src/main/interface/cli.c **** 
1626:../cleanflight/src/main/interface/cli.c ****     const int ledStripAuxChannel = ledStripConfig->ledstrip_aux_channel;
1627:../cleanflight/src/main/interface/cli.c ****     bool equalsDefault = false;
1628:../cleanflight/src/main/interface/cli.c ****     if (defaultLedStripConfig) {
1629:../cleanflight/src/main/interface/cli.c ****         const int ledStripAuxChannelDefault = defaultLedStripConfig->ledstrip_aux_channel;
1630:../cleanflight/src/main/interface/cli.c ****         equalsDefault = ledStripAuxChannel == ledStripAuxChannelDefault;
1631:../cleanflight/src/main/interface/cli.c ****         cliDefaultPrintLinef(dumpMask, equalsDefault, format, LED_AUX_CHANNEL, 0, ledStripAuxChanne
1632:../cleanflight/src/main/interface/cli.c ****     }
1633:../cleanflight/src/main/interface/cli.c ****     cliDumpPrintLinef(dumpMask, equalsDefault, format, LED_AUX_CHANNEL, 0, ledStripAuxChannel);
1634:../cleanflight/src/main/interface/cli.c **** }
1635:../cleanflight/src/main/interface/cli.c **** 
1636:../cleanflight/src/main/interface/cli.c **** static void cliModeColor(char *cmdline)
1637:../cleanflight/src/main/interface/cli.c **** {
1638:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
1639:../cleanflight/src/main/interface/cli.c ****         printModeColor(DUMP_MASTER, ledStripConfig(), NULL);
1640:../cleanflight/src/main/interface/cli.c ****     } else {
1641:../cleanflight/src/main/interface/cli.c ****         enum {MODE = 0, FUNCTION, COLOR, ARGS_COUNT};
1642:../cleanflight/src/main/interface/cli.c ****         int args[ARGS_COUNT];
1643:../cleanflight/src/main/interface/cli.c ****         int argNo = 0;
1644:../cleanflight/src/main/interface/cli.c ****         char *saveptr;
1645:../cleanflight/src/main/interface/cli.c ****         const char* ptr = strtok_r(cmdline, " ", &saveptr);
1646:../cleanflight/src/main/interface/cli.c ****         while (ptr && argNo < ARGS_COUNT) {
1647:../cleanflight/src/main/interface/cli.c ****             args[argNo++] = atoi(ptr);
1648:../cleanflight/src/main/interface/cli.c ****             ptr = strtok_r(NULL, " ", &saveptr);
1649:../cleanflight/src/main/interface/cli.c ****         }
1650:../cleanflight/src/main/interface/cli.c **** 
1651:../cleanflight/src/main/interface/cli.c ****         if (ptr != NULL || argNo != ARGS_COUNT) {
1652:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
1653:../cleanflight/src/main/interface/cli.c ****             return;
1654:../cleanflight/src/main/interface/cli.c ****         }
1655:../cleanflight/src/main/interface/cli.c **** 
1656:../cleanflight/src/main/interface/cli.c ****         int modeIdx  = args[MODE];
1657:../cleanflight/src/main/interface/cli.c ****         int funIdx = args[FUNCTION];
1658:../cleanflight/src/main/interface/cli.c ****         int color = args[COLOR];
1659:../cleanflight/src/main/interface/cli.c ****         if (!setModeColor(modeIdx, funIdx, color)) {
1660:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
1661:../cleanflight/src/main/interface/cli.c ****             return;
1662:../cleanflight/src/main/interface/cli.c ****         }
1663:../cleanflight/src/main/interface/cli.c ****         // values are validated
1664:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("mode_color %u %u %u", modeIdx, funIdx, color);
1665:../cleanflight/src/main/interface/cli.c ****     }
1666:../cleanflight/src/main/interface/cli.c **** }
1667:../cleanflight/src/main/interface/cli.c **** #endif
1668:../cleanflight/src/main/interface/cli.c **** 
1669:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SERVOS
1670:../cleanflight/src/main/interface/cli.c **** static void printServo(uint8_t dumpMask, const servoParam_t *servoParams, const servoParam_t *defau
1671:../cleanflight/src/main/interface/cli.c **** {
 8309              	 .loc 13 1671 0
 8310              	 .cfi_startproc
 8311              	 
 8312              	 
 8313 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 8314              	.LCFI391:
 8315              	 .cfi_def_cfa_offset 20
 8316              	 .cfi_offset 4,-20
 8317              	 .cfi_offset 5,-16
 8318              	 .cfi_offset 6,-12
 8319              	 .cfi_offset 7,-8
 8320              	 .cfi_offset 14,-4
 8321 0002 97B0     	 sub sp,sp,#92
 8322              	.LCFI392:
 8323              	 .cfi_def_cfa_offset 112
 8324 0004 06AF     	 add r7,sp,#24
 8325              	.LCFI393:
 8326              	 .cfi_def_cfa 7,88
 8327 0006 0346     	 mov r3,r0
 8328 0008 B960     	 str r1,[r7,#8]
 8329 000a 7A60     	 str r2,[r7,#4]
 8330 000c FB73     	 strb r3,[r7,#15]
1672:../cleanflight/src/main/interface/cli.c ****     // print out servo settings
1673:../cleanflight/src/main/interface/cli.c ****     const char *format = "servo %u %d %d %d %d %d";
 8331              	 .loc 13 1673 0
 8332 000e 7E4B     	 ldr r3,.L510
 8333 0010 BB62     	 str r3,[r7,#40]
 8334              	.LBB49:
1674:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 8335              	 .loc 13 1674 0
 8336 0012 0023     	 movs r3,#0
 8337 0014 FB63     	 str r3,[r7,#60]
 8338 0016 6CE0     	 b .L496
 8339              	.L498:
 8340              	.LBB50:
1675:../cleanflight/src/main/interface/cli.c ****         const servoParam_t *servoConf = &servoParams[i];
 8341              	 .loc 13 1675 0
 8342 0018 FA6B     	 ldr r2,[r7,#60]
 8343 001a 1346     	 mov r3,r2
 8344 001c 5B00     	 lsls r3,r3,#1
 8345 001e 1344     	 add r3,r3,r2
 8346 0020 9B00     	 lsls r3,r3,#2
 8347 0022 1A46     	 mov r2,r3
 8348 0024 BB68     	 ldr r3,[r7,#8]
 8349 0026 1344     	 add r3,r3,r2
 8350 0028 7B62     	 str r3,[r7,#36]
1676:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
 8351              	 .loc 13 1676 0
 8352 002a 0023     	 movs r3,#0
 8353 002c 87F83B30 	 strb r3,[r7,#59]
1677:../cleanflight/src/main/interface/cli.c ****         if (defaultServoParams) {
 8354              	 .loc 13 1677 0
 8355 0030 7B68     	 ldr r3,[r7,#4]
 8356 0032 002B     	 cmp r3,#0
 8357 0034 37D0     	 beq .L497
 8358              	.LBB51:
1678:../cleanflight/src/main/interface/cli.c ****             const servoParam_t *defaultServoConf = &defaultServoParams[i];
 8359              	 .loc 13 1678 0
 8360 0036 FA6B     	 ldr r2,[r7,#60]
 8361 0038 1346     	 mov r3,r2
 8362 003a 5B00     	 lsls r3,r3,#1
 8363 003c 1344     	 add r3,r3,r2
 8364 003e 9B00     	 lsls r3,r3,#2
 8365 0040 1A46     	 mov r2,r3
 8366 0042 7B68     	 ldr r3,[r7,#4]
 8367 0044 1344     	 add r3,r3,r2
 8368 0046 3B62     	 str r3,[r7,#32]
1679:../cleanflight/src/main/interface/cli.c ****             equalsDefault = !memcmp(servoConf, defaultServoConf, sizeof(*servoConf));
 8369              	 .loc 13 1679 0
 8370 0048 786A     	 ldr r0,[r7,#36]
 8371 004a 396A     	 ldr r1,[r7,#32]
 8372 004c 0C22     	 movs r2,#12
 8373 004e FFF7FEFF 	 bl memcmp
 8374 0052 0346     	 mov r3,r0
 8375 0054 002B     	 cmp r3,#0
 8376 0056 0CBF     	 ite eq
 8377 0058 0123     	 moveq r3,#1
 8378 005a 0023     	 movne r3,#0
 8379 005c 87F83B30 	 strb r3,[r7,#59]
1680:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
1681:../cleanflight/src/main/interface/cli.c ****                 i,
1682:../cleanflight/src/main/interface/cli.c ****                 defaultServoConf->min,
 8380              	 .loc 13 1682 0
 8381 0060 3B6A     	 ldr r3,[r7,#32]
 8382 0062 B3F90430 	 ldrsh r3,[r3,#4]
 8383 0066 9BB2     	 uxth r3,r3
1680:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 8384              	 .loc 13 1680 0
 8385 0068 1CB2     	 sxth r4,r3
1683:../cleanflight/src/main/interface/cli.c ****                 defaultServoConf->max,
 8386              	 .loc 13 1683 0
 8387 006a 3B6A     	 ldr r3,[r7,#32]
 8388 006c B3F90630 	 ldrsh r3,[r3,#6]
 8389 0070 9BB2     	 uxth r3,r3
1680:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 8390              	 .loc 13 1680 0
 8391 0072 18B2     	 sxth r0,r3
1684:../cleanflight/src/main/interface/cli.c ****                 defaultServoConf->middle,
 8392              	 .loc 13 1684 0
 8393 0074 3B6A     	 ldr r3,[r7,#32]
 8394 0076 B3F90830 	 ldrsh r3,[r3,#8]
 8395 007a 9BB2     	 uxth r3,r3
1680:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 8396              	 .loc 13 1680 0
 8397 007c 19B2     	 sxth r1,r3
1685:../cleanflight/src/main/interface/cli.c ****                 defaultServoConf->rate,
 8398              	 .loc 13 1685 0
 8399 007e 3B6A     	 ldr r3,[r7,#32]
 8400 0080 9B7A     	 ldrb r3,[r3,#10]
1680:../cleanflight/src/main/interface/cli.c ****                 i,
 8401              	 .loc 13 1680 0
 8402 0082 5AB2     	 sxtb r2,r3
1686:../cleanflight/src/main/interface/cli.c ****                 defaultServoConf->forwardFromChannel
 8403              	 .loc 13 1686 0
 8404 0084 3B6A     	 ldr r3,[r7,#32]
 8405 0086 DB7A     	 ldrb r3,[r3,#11]
1680:../cleanflight/src/main/interface/cli.c ****                 i,
 8406              	 .loc 13 1680 0
 8407 0088 5BB2     	 sxtb r3,r3
 8408 008a FE7B     	 ldrb r6,[r7,#15]
 8409 008c 97F83B50 	 ldrb r5,[r7,#59]
 8410 0090 0094     	 str r4,[sp]
 8411 0092 0190     	 str r0,[sp,#4]
 8412 0094 0291     	 str r1,[sp,#8]
 8413 0096 0392     	 str r2,[sp,#12]
 8414 0098 0493     	 str r3,[sp,#16]
 8415 009a 3046     	 mov r0,r6
 8416 009c 2946     	 mov r1,r5
 8417 009e BA6A     	 ldr r2,[r7,#40]
 8418 00a0 FB6B     	 ldr r3,[r7,#60]
 8419 00a2 FFF7FEFF 	 bl cliDefaultPrintLinef
 8420              	.L497:
 8421              	.LBE51:
1687:../cleanflight/src/main/interface/cli.c ****             );
1688:../cleanflight/src/main/interface/cli.c ****         }
1689:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format,
1690:../cleanflight/src/main/interface/cli.c ****             i,
1691:../cleanflight/src/main/interface/cli.c ****             servoConf->min,
 8422              	 .loc 13 1691 0 discriminator 2
 8423 00a6 7B6A     	 ldr r3,[r7,#36]
 8424 00a8 B3F90430 	 ldrsh r3,[r3,#4]
 8425 00ac 9BB2     	 uxth r3,r3
1689:../cleanflight/src/main/interface/cli.c ****             i,
 8426              	 .loc 13 1689 0 discriminator 2
 8427 00ae 1CB2     	 sxth r4,r3
1692:../cleanflight/src/main/interface/cli.c ****             servoConf->max,
 8428              	 .loc 13 1692 0 discriminator 2
 8429 00b0 7B6A     	 ldr r3,[r7,#36]
 8430 00b2 B3F90630 	 ldrsh r3,[r3,#6]
 8431 00b6 9BB2     	 uxth r3,r3
1689:../cleanflight/src/main/interface/cli.c ****             i,
 8432              	 .loc 13 1689 0 discriminator 2
 8433 00b8 18B2     	 sxth r0,r3
1693:../cleanflight/src/main/interface/cli.c ****             servoConf->middle,
 8434              	 .loc 13 1693 0 discriminator 2
 8435 00ba 7B6A     	 ldr r3,[r7,#36]
 8436 00bc B3F90830 	 ldrsh r3,[r3,#8]
 8437 00c0 9BB2     	 uxth r3,r3
1689:../cleanflight/src/main/interface/cli.c ****             i,
 8438              	 .loc 13 1689 0 discriminator 2
 8439 00c2 19B2     	 sxth r1,r3
1694:../cleanflight/src/main/interface/cli.c ****             servoConf->rate,
 8440              	 .loc 13 1694 0 discriminator 2
 8441 00c4 7B6A     	 ldr r3,[r7,#36]
 8442 00c6 9B7A     	 ldrb r3,[r3,#10]
1689:../cleanflight/src/main/interface/cli.c ****             i,
 8443              	 .loc 13 1689 0 discriminator 2
 8444 00c8 5AB2     	 sxtb r2,r3
1695:../cleanflight/src/main/interface/cli.c ****             servoConf->forwardFromChannel
 8445              	 .loc 13 1695 0 discriminator 2
 8446 00ca 7B6A     	 ldr r3,[r7,#36]
 8447 00cc DB7A     	 ldrb r3,[r3,#11]
1689:../cleanflight/src/main/interface/cli.c ****             i,
 8448              	 .loc 13 1689 0 discriminator 2
 8449 00ce 5BB2     	 sxtb r3,r3
 8450 00d0 FE7B     	 ldrb r6,[r7,#15]
 8451 00d2 97F83B50 	 ldrb r5,[r7,#59]
 8452 00d6 0094     	 str r4,[sp]
 8453 00d8 0190     	 str r0,[sp,#4]
 8454 00da 0291     	 str r1,[sp,#8]
 8455 00dc 0392     	 str r2,[sp,#12]
 8456 00de 0493     	 str r3,[sp,#16]
 8457 00e0 3046     	 mov r0,r6
 8458 00e2 2946     	 mov r1,r5
 8459 00e4 BA6A     	 ldr r2,[r7,#40]
 8460 00e6 FB6B     	 ldr r3,[r7,#60]
 8461 00e8 FFF7FEFF 	 bl cliDumpPrintLinef
 8462              	.LBE50:
1674:../cleanflight/src/main/interface/cli.c ****         const servoParam_t *servoConf = &servoParams[i];
 8463              	 .loc 13 1674 0 discriminator 2
 8464 00ec FB6B     	 ldr r3,[r7,#60]
 8465 00ee 0133     	 adds r3,r3,#1
 8466 00f0 FB63     	 str r3,[r7,#60]
 8467              	.L496:
1674:../cleanflight/src/main/interface/cli.c ****         const servoParam_t *servoConf = &servoParams[i];
 8468              	 .loc 13 1674 0 is_stmt 0 discriminator 1
 8469 00f2 FB6B     	 ldr r3,[r7,#60]
 8470 00f4 072B     	 cmp r3,#7
 8471 00f6 8FD9     	 bls .L498
 8472              	.LBE49:
 8473              	.LBB52:
1696:../cleanflight/src/main/interface/cli.c ****         );
1697:../cleanflight/src/main/interface/cli.c ****     }
1698:../cleanflight/src/main/interface/cli.c ****     // print servo directions
1699:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 8474              	 .loc 13 1699 0 is_stmt 1
 8475 00f8 0023     	 movs r3,#0
 8476 00fa 7B63     	 str r3,[r7,#52]
 8477 00fc 7DE0     	 b .L499
 8478              	.L509:
 8479              	.LBB53:
1700:../cleanflight/src/main/interface/cli.c ****         const char *format = "smix reverse %d %d r";
 8480              	 .loc 13 1700 0
 8481 00fe 434B     	 ldr r3,.L510+4
 8482 0100 FB61     	 str r3,[r7,#28]
1701:../cleanflight/src/main/interface/cli.c ****         const servoParam_t *servoConf = &servoParams[i];
 8483              	 .loc 13 1701 0
 8484 0102 7A6B     	 ldr r2,[r7,#52]
 8485 0104 1346     	 mov r3,r2
 8486 0106 5B00     	 lsls r3,r3,#1
 8487 0108 1344     	 add r3,r3,r2
 8488 010a 9B00     	 lsls r3,r3,#2
 8489 010c 1A46     	 mov r2,r3
 8490 010e BB68     	 ldr r3,[r7,#8]
 8491 0110 1344     	 add r3,r3,r2
 8492 0112 BB61     	 str r3,[r7,#24]
1702:../cleanflight/src/main/interface/cli.c ****         const servoParam_t *servoConfDefault = &defaultServoParams[i];
 8493              	 .loc 13 1702 0
 8494 0114 7A6B     	 ldr r2,[r7,#52]
 8495 0116 1346     	 mov r3,r2
 8496 0118 5B00     	 lsls r3,r3,#1
 8497 011a 1344     	 add r3,r3,r2
 8498 011c 9B00     	 lsls r3,r3,#2
 8499 011e 1A46     	 mov r2,r3
 8500 0120 7B68     	 ldr r3,[r7,#4]
 8501 0122 1344     	 add r3,r3,r2
 8502 0124 7B61     	 str r3,[r7,#20]
1703:../cleanflight/src/main/interface/cli.c ****         if (defaultServoParams) {
 8503              	 .loc 13 1703 0
 8504 0126 7B68     	 ldr r3,[r7,#4]
 8505 0128 002B     	 cmp r3,#0
 8506 012a 48D0     	 beq .L500
 8507              	.LBB54:
1704:../cleanflight/src/main/interface/cli.c ****             bool equalsDefault = servoConf->reversedSources == servoConfDefault->reversedSources;
 8508              	 .loc 13 1704 0
 8509 012c BB69     	 ldr r3,[r7,#24]
 8510 012e 1A68     	 ldr r2,[r3]
 8511 0130 7B69     	 ldr r3,[r7,#20]
 8512 0132 1B68     	 ldr r3,[r3]
 8513 0134 9A42     	 cmp r2,r3
 8514 0136 0CBF     	 ite eq
 8515 0138 0123     	 moveq r3,#1
 8516 013a 0023     	 movne r3,#0
 8517 013c FB74     	 strb r3,[r7,#19]
 8518              	.LBB55:
1705:../cleanflight/src/main/interface/cli.c ****             for (uint32_t channel = 0; channel < INPUT_SOURCE_COUNT; channel++) {
 8519              	 .loc 13 1705 0
 8520 013e 0023     	 movs r3,#0
 8521 0140 3B63     	 str r3,[r7,#48]
 8522 0142 38E0     	 b .L501
 8523              	.L504:
1706:../cleanflight/src/main/interface/cli.c ****                 equalsDefault = ~(servoConf->reversedSources ^ servoConfDefault->reversedSources) &
 8524              	 .loc 13 1706 0
 8525 0144 BB69     	 ldr r3,[r7,#24]
 8526 0146 1A68     	 ldr r2,[r3]
 8527 0148 7B69     	 ldr r3,[r7,#20]
 8528 014a 1B68     	 ldr r3,[r3]
 8529 014c 5340     	 eors r3,r3,r2
 8530 014e DB43     	 mvns r3,r3
 8531 0150 3A6B     	 ldr r2,[r7,#48]
 8532 0152 0121     	 movs r1,#1
 8533 0154 01FA02F2 	 lsl r2,r1,r2
 8534 0158 1340     	 ands r3,r3,r2
 8535 015a 002B     	 cmp r3,#0
 8536 015c 14BF     	 ite ne
 8537 015e 0123     	 movne r3,#1
 8538 0160 0023     	 moveq r3,#0
 8539 0162 FB74     	 strb r3,[r7,#19]
1707:../cleanflight/src/main/interface/cli.c ****                 if (servoConfDefault->reversedSources & (1 << channel)) {
 8540              	 .loc 13 1707 0
 8541 0164 7B69     	 ldr r3,[r7,#20]
 8542 0166 1B68     	 ldr r3,[r3]
 8543 0168 3A6B     	 ldr r2,[r7,#48]
 8544 016a 0121     	 movs r1,#1
 8545 016c 01FA02F2 	 lsl r2,r1,r2
 8546 0170 1340     	 ands r3,r3,r2
 8547 0172 002B     	 cmp r3,#0
 8548 0174 09D0     	 beq .L502
1708:../cleanflight/src/main/interface/cli.c ****                     cliDefaultPrintLinef(dumpMask, equalsDefault, format, i , channel);
 8549              	 .loc 13 1708 0
 8550 0176 F97B     	 ldrb r1,[r7,#15]
 8551 0178 FA7C     	 ldrb r2,[r7,#19]
 8552 017a 3B6B     	 ldr r3,[r7,#48]
 8553 017c 0093     	 str r3,[sp]
 8554 017e 0846     	 mov r0,r1
 8555 0180 1146     	 mov r1,r2
 8556 0182 FA69     	 ldr r2,[r7,#28]
 8557 0184 7B6B     	 ldr r3,[r7,#52]
 8558 0186 FFF7FEFF 	 bl cliDefaultPrintLinef
 8559              	.L502:
1709:../cleanflight/src/main/interface/cli.c ****                 }
1710:../cleanflight/src/main/interface/cli.c ****                 if (servoConf->reversedSources & (1 << channel)) {
 8560              	 .loc 13 1710 0
 8561 018a BB69     	 ldr r3,[r7,#24]
 8562 018c 1B68     	 ldr r3,[r3]
 8563 018e 3A6B     	 ldr r2,[r7,#48]
 8564 0190 0121     	 movs r1,#1
 8565 0192 01FA02F2 	 lsl r2,r1,r2
 8566 0196 1340     	 ands r3,r3,r2
 8567 0198 002B     	 cmp r3,#0
 8568 019a 09D0     	 beq .L503
1711:../cleanflight/src/main/interface/cli.c ****                     cliDumpPrintLinef(dumpMask, equalsDefault, format, i , channel);
 8569              	 .loc 13 1711 0
 8570 019c F97B     	 ldrb r1,[r7,#15]
 8571 019e FA7C     	 ldrb r2,[r7,#19]
 8572 01a0 3B6B     	 ldr r3,[r7,#48]
 8573 01a2 0093     	 str r3,[sp]
 8574 01a4 0846     	 mov r0,r1
 8575 01a6 1146     	 mov r1,r2
 8576 01a8 FA69     	 ldr r2,[r7,#28]
 8577 01aa 7B6B     	 ldr r3,[r7,#52]
 8578 01ac FFF7FEFF 	 bl cliDumpPrintLinef
 8579              	.L503:
1705:../cleanflight/src/main/interface/cli.c ****                 equalsDefault = ~(servoConf->reversedSources ^ servoConfDefault->reversedSources) &
 8580              	 .loc 13 1705 0 discriminator 2
 8581 01b0 3B6B     	 ldr r3,[r7,#48]
 8582 01b2 0133     	 adds r3,r3,#1
 8583 01b4 3B63     	 str r3,[r7,#48]
 8584              	.L501:
1705:../cleanflight/src/main/interface/cli.c ****                 equalsDefault = ~(servoConf->reversedSources ^ servoConfDefault->reversedSources) &
 8585              	 .loc 13 1705 0 is_stmt 0 discriminator 1
 8586 01b6 3B6B     	 ldr r3,[r7,#48]
 8587 01b8 0D2B     	 cmp r3,#13
 8588 01ba C3D9     	 bls .L504
 8589              	.LBE55:
 8590              	.LBE54:
 8591 01bc 1AE0     	 b .L505
 8592              	.L500:
 8593              	.LBB56:
1712:../cleanflight/src/main/interface/cli.c ****                 }
1713:../cleanflight/src/main/interface/cli.c ****             }
1714:../cleanflight/src/main/interface/cli.c ****         } else {
1715:../cleanflight/src/main/interface/cli.c ****             for (uint32_t channel = 0; channel < INPUT_SOURCE_COUNT; channel++) {
 8594              	 .loc 13 1715 0 is_stmt 1
 8595 01be 0023     	 movs r3,#0
 8596 01c0 FB62     	 str r3,[r7,#44]
 8597 01c2 14E0     	 b .L506
 8598              	.L508:
1716:../cleanflight/src/main/interface/cli.c ****                 if (servoConf->reversedSources & (1 << channel)) {
 8599              	 .loc 13 1716 0
 8600 01c4 BB69     	 ldr r3,[r7,#24]
 8601 01c6 1B68     	 ldr r3,[r3]
 8602 01c8 FA6A     	 ldr r2,[r7,#44]
 8603 01ca 0121     	 movs r1,#1
 8604 01cc 01FA02F2 	 lsl r2,r1,r2
 8605 01d0 1340     	 ands r3,r3,r2
 8606 01d2 002B     	 cmp r3,#0
 8607 01d4 08D0     	 beq .L507
1717:../cleanflight/src/main/interface/cli.c ****                     cliDumpPrintLinef(dumpMask, true, format, i , channel);
 8608              	 .loc 13 1717 0
 8609 01d6 FA7B     	 ldrb r2,[r7,#15]
 8610 01d8 FB6A     	 ldr r3,[r7,#44]
 8611 01da 0093     	 str r3,[sp]
 8612 01dc 1046     	 mov r0,r2
 8613 01de 0121     	 movs r1,#1
 8614 01e0 FA69     	 ldr r2,[r7,#28]
 8615 01e2 7B6B     	 ldr r3,[r7,#52]
 8616 01e4 FFF7FEFF 	 bl cliDumpPrintLinef
 8617              	.L507:
1715:../cleanflight/src/main/interface/cli.c ****                 if (servoConf->reversedSources & (1 << channel)) {
 8618              	 .loc 13 1715 0 discriminator 2
 8619 01e8 FB6A     	 ldr r3,[r7,#44]
 8620 01ea 0133     	 adds r3,r3,#1
 8621 01ec FB62     	 str r3,[r7,#44]
 8622              	.L506:
1715:../cleanflight/src/main/interface/cli.c ****                 if (servoConf->reversedSources & (1 << channel)) {
 8623              	 .loc 13 1715 0 is_stmt 0 discriminator 1
 8624 01ee FB6A     	 ldr r3,[r7,#44]
 8625 01f0 0D2B     	 cmp r3,#13
 8626 01f2 E7D9     	 bls .L508
 8627              	.L505:
 8628              	.LBE56:
 8629              	.LBE53:
1699:../cleanflight/src/main/interface/cli.c ****         const char *format = "smix reverse %d %d r";
 8630              	 .loc 13 1699 0 is_stmt 1 discriminator 2
 8631 01f4 7B6B     	 ldr r3,[r7,#52]
 8632 01f6 0133     	 adds r3,r3,#1
 8633 01f8 7B63     	 str r3,[r7,#52]
 8634              	.L499:
1699:../cleanflight/src/main/interface/cli.c ****         const char *format = "smix reverse %d %d r";
 8635              	 .loc 13 1699 0 is_stmt 0 discriminator 1
 8636 01fa 7B6B     	 ldr r3,[r7,#52]
 8637 01fc 072B     	 cmp r3,#7
 8638 01fe 7FF67EAF 	 bls .L509
 8639              	.LBE52:
1718:../cleanflight/src/main/interface/cli.c ****                 }
1719:../cleanflight/src/main/interface/cli.c ****             }
1720:../cleanflight/src/main/interface/cli.c ****         }
1721:../cleanflight/src/main/interface/cli.c ****     }
1722:../cleanflight/src/main/interface/cli.c **** }
 8640              	 .loc 13 1722 0 is_stmt 1
 8641 0202 4437     	 adds r7,r7,#68
 8642              	.LCFI394:
 8643              	 .cfi_def_cfa_offset 20
 8644 0204 BD46     	 mov sp,r7
 8645              	.LCFI395:
 8646              	 .cfi_def_cfa_register 13
 8647              	 
 8648 0206 F0BD     	 pop {r4,r5,r6,r7,pc}
 8649              	.L511:
 8650              	 .align 2
 8651              	.L510:
 8652 0208 14050000 	 .word .LC103
 8653 020c 2C050000 	 .word .LC104
 8654              	 .cfi_endproc
 8655              	.LFE737:
 8657              	 .section .text.cliServo,"ax",%progbits
 8658              	 .align 2
 8659              	 .thumb
 8660              	 .thumb_func
 8662              	cliServo:
 8663              	.LFB738:
1723:../cleanflight/src/main/interface/cli.c **** 
1724:../cleanflight/src/main/interface/cli.c **** static void cliServo(char *cmdline)
1725:../cleanflight/src/main/interface/cli.c **** {
 8664              	 .loc 13 1725 0
 8665              	 .cfi_startproc
 8666              	 
 8667              	 
 8668 0000 90B5     	 push {r4,r7,lr}
 8669              	.LCFI396:
 8670              	 .cfi_def_cfa_offset 12
 8671              	 .cfi_offset 4,-12
 8672              	 .cfi_offset 7,-8
 8673              	 .cfi_offset 14,-4
 8674 0002 91B0     	 sub sp,sp,#68
 8675              	.LCFI397:
 8676              	 .cfi_def_cfa_offset 80
 8677 0004 06AF     	 add r7,sp,#24
 8678              	.LCFI398:
 8679              	 .cfi_def_cfa 7,56
 8680 0006 7860     	 str r0,[r7,#4]
1726:../cleanflight/src/main/interface/cli.c ****     const char *format = "servo %u %d %d %d %d %d";
 8681              	 .loc 13 1726 0
 8682 0008 6C4B     	 ldr r3,.L529
 8683 000a FB61     	 str r3,[r7,#28]
1727:../cleanflight/src/main/interface/cli.c ****     enum { SERVO_ARGUMENT_COUNT = 6 };
1728:../cleanflight/src/main/interface/cli.c ****     int16_t arguments[SERVO_ARGUMENT_COUNT];
1729:../cleanflight/src/main/interface/cli.c **** 
1730:../cleanflight/src/main/interface/cli.c ****     servoParam_t *servo;
1731:../cleanflight/src/main/interface/cli.c **** 
1732:../cleanflight/src/main/interface/cli.c ****     int i;
1733:../cleanflight/src/main/interface/cli.c ****     char *ptr;
1734:../cleanflight/src/main/interface/cli.c **** 
1735:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 8684              	 .loc 13 1735 0
 8685 000c 7868     	 ldr r0,[r7,#4]
 8686 000e FFF7FEFF 	 bl isEmpty
 8687 0012 0346     	 mov r3,r0
 8688 0014 002B     	 cmp r3,#0
 8689 0016 09D0     	 beq .L513
1736:../cleanflight/src/main/interface/cli.c ****         printServo(DUMP_MASTER, servoParams(0), NULL);
 8690              	 .loc 13 1736 0
 8691 0018 0020     	 movs r0,#0
 8692 001a FFF7FEFF 	 bl servoParams
 8693 001e 0346     	 mov r3,r0
 8694 0020 0120     	 movs r0,#1
 8695 0022 1946     	 mov r1,r3
 8696 0024 0022     	 movs r2,#0
 8697 0026 FFF7FEFF 	 bl printServo
 8698 002a C3E0     	 b .L512
 8699              	.L513:
 8700              	.LBB57:
1737:../cleanflight/src/main/interface/cli.c ****     } else {
1738:../cleanflight/src/main/interface/cli.c ****         int validArgumentCount = 0;
 8701              	 .loc 13 1738 0
 8702 002c 0023     	 movs r3,#0
 8703 002e 3B62     	 str r3,[r7,#32]
1739:../cleanflight/src/main/interface/cli.c **** 
1740:../cleanflight/src/main/interface/cli.c ****         ptr = cmdline;
 8704              	 .loc 13 1740 0
 8705 0030 7B68     	 ldr r3,[r7,#4]
 8706 0032 7B62     	 str r3,[r7,#36]
1741:../cleanflight/src/main/interface/cli.c **** 
1742:../cleanflight/src/main/interface/cli.c ****         // Command line is integers (possibly negative) separated by spaces, no other characters al
1743:../cleanflight/src/main/interface/cli.c **** 
1744:../cleanflight/src/main/interface/cli.c ****         // If command line doesn't fit the format, don't modify the config
1745:../cleanflight/src/main/interface/cli.c ****         while (*ptr) {
 8707              	 .loc 13 1745 0
 8708 0034 36E0     	 b .L515
 8709              	.L523:
1746:../cleanflight/src/main/interface/cli.c ****             if (*ptr == '-' || (*ptr >= '0' && *ptr <= '9')) {
 8710              	 .loc 13 1746 0
 8711 0036 7B6A     	 ldr r3,[r7,#36]
 8712 0038 1B78     	 ldrb r3,[r3]
 8713 003a 2D2B     	 cmp r3,#45
 8714 003c 07D0     	 beq .L516
 8715              	 .loc 13 1746 0 is_stmt 0 discriminator 1
 8716 003e 7B6A     	 ldr r3,[r7,#36]
 8717 0040 1B78     	 ldrb r3,[r3]
 8718 0042 2F2B     	 cmp r3,#47
 8719 0044 23D9     	 bls .L517
 8720              	 .loc 13 1746 0 discriminator 2
 8721 0046 7B6A     	 ldr r3,[r7,#36]
 8722 0048 1B78     	 ldrb r3,[r3]
 8723 004a 392B     	 cmp r3,#57
 8724 004c 1FD8     	 bhi .L517
 8725              	.L516:
1747:../cleanflight/src/main/interface/cli.c ****                 if (validArgumentCount >= SERVO_ARGUMENT_COUNT) {
 8726              	 .loc 13 1747 0 is_stmt 1
 8727 004e 3B6A     	 ldr r3,[r7,#32]
 8728 0050 052B     	 cmp r3,#5
 8729 0052 02DD     	 ble .L518
1748:../cleanflight/src/main/interface/cli.c ****                     cliShowParseError();
 8730              	 .loc 13 1748 0
 8731 0054 FFF7FEFF 	 bl cliShowParseError
1749:../cleanflight/src/main/interface/cli.c ****                     return;
 8732              	 .loc 13 1749 0
 8733 0058 ACE0     	 b .L512
 8734              	.L518:
1750:../cleanflight/src/main/interface/cli.c ****                 }
1751:../cleanflight/src/main/interface/cli.c **** 
1752:../cleanflight/src/main/interface/cli.c ****                 arguments[validArgumentCount++] = atoi(ptr);
 8735              	 .loc 13 1752 0
 8736 005a 3C6A     	 ldr r4,[r7,#32]
 8737 005c 631C     	 adds r3,r4,#1
 8738 005e 3B62     	 str r3,[r7,#32]
 8739 0060 786A     	 ldr r0,[r7,#36]
 8740 0062 FFF7FEFF 	 bl atoi
 8741 0066 0346     	 mov r3,r0
 8742 0068 9AB2     	 uxth r2,r3
 8743 006a 6300     	 lsls r3,r4,#1
 8744 006c 07F12801 	 add r1,r7,#40
 8745 0070 0B44     	 add r3,r3,r1
 8746 0072 23F8202C 	 strh r2,[r3,#-32]
 8747              	.L521:
1753:../cleanflight/src/main/interface/cli.c **** 
1754:../cleanflight/src/main/interface/cli.c ****                 do {
1755:../cleanflight/src/main/interface/cli.c ****                     ptr++;
 8748              	 .loc 13 1755 0 discriminator 2
 8749 0076 7B6A     	 ldr r3,[r7,#36]
 8750 0078 0133     	 adds r3,r3,#1
 8751 007a 7B62     	 str r3,[r7,#36]
1756:../cleanflight/src/main/interface/cli.c ****                 } while (*ptr >= '0' && *ptr <= '9');
 8752              	 .loc 13 1756 0 discriminator 2
 8753 007c 7B6A     	 ldr r3,[r7,#36]
 8754 007e 1B78     	 ldrb r3,[r3]
 8755 0080 2F2B     	 cmp r3,#47
 8756 0082 03D9     	 bls .L520
 8757              	 .loc 13 1756 0 is_stmt 0 discriminator 1
 8758 0084 7B6A     	 ldr r3,[r7,#36]
 8759 0086 1B78     	 ldrb r3,[r3]
 8760 0088 392B     	 cmp r3,#57
 8761 008a F4D9     	 bls .L521
 8762              	.L520:
1746:../cleanflight/src/main/interface/cli.c ****                 if (validArgumentCount >= SERVO_ARGUMENT_COUNT) {
 8763              	 .loc 13 1746 0 is_stmt 1
 8764 008c 0AE0     	 b .L515
 8765              	.L517:
1757:../cleanflight/src/main/interface/cli.c ****             } else if (*ptr == ' ') {
 8766              	 .loc 13 1757 0
 8767 008e 7B6A     	 ldr r3,[r7,#36]
 8768 0090 1B78     	 ldrb r3,[r3]
 8769 0092 202B     	 cmp r3,#32
 8770 0094 03D1     	 bne .L522
1758:../cleanflight/src/main/interface/cli.c ****                 ptr++;
 8771              	 .loc 13 1758 0
 8772 0096 7B6A     	 ldr r3,[r7,#36]
 8773 0098 0133     	 adds r3,r3,#1
 8774 009a 7B62     	 str r3,[r7,#36]
 8775 009c 02E0     	 b .L515
 8776              	.L522:
1759:../cleanflight/src/main/interface/cli.c ****             } else {
1760:../cleanflight/src/main/interface/cli.c ****                 cliShowParseError();
 8777              	 .loc 13 1760 0
 8778 009e FFF7FEFF 	 bl cliShowParseError
1761:../cleanflight/src/main/interface/cli.c ****                 return;
 8779              	 .loc 13 1761 0
 8780 00a2 87E0     	 b .L512
 8781              	.L515:
1745:../cleanflight/src/main/interface/cli.c ****             if (*ptr == '-' || (*ptr >= '0' && *ptr <= '9')) {
 8782              	 .loc 13 1745 0
 8783 00a4 7B6A     	 ldr r3,[r7,#36]
 8784 00a6 1B78     	 ldrb r3,[r3]
 8785 00a8 002B     	 cmp r3,#0
 8786 00aa C4D1     	 bne .L523
1762:../cleanflight/src/main/interface/cli.c ****             }
1763:../cleanflight/src/main/interface/cli.c ****         }
1764:../cleanflight/src/main/interface/cli.c **** 
1765:../cleanflight/src/main/interface/cli.c ****         enum {INDEX = 0, MIN, MAX, MIDDLE, RATE, FORWARD};
1766:../cleanflight/src/main/interface/cli.c **** 
1767:../cleanflight/src/main/interface/cli.c ****         i = arguments[INDEX];
 8787              	 .loc 13 1767 0
 8788 00ac 3B89     	 ldrh r3,[r7,#8]
 8789 00ae 1BB2     	 sxth r3,r3
 8790 00b0 BB61     	 str r3,[r7,#24]
1768:../cleanflight/src/main/interface/cli.c **** 
1769:../cleanflight/src/main/interface/cli.c ****         // Check we got the right number of args and the servo index is correct (don't validate the
1770:../cleanflight/src/main/interface/cli.c ****         if (validArgumentCount != SERVO_ARGUMENT_COUNT || i < 0 || i >= MAX_SUPPORTED_SERVOS) {
 8791              	 .loc 13 1770 0
 8792 00b2 3B6A     	 ldr r3,[r7,#32]
 8793 00b4 062B     	 cmp r3,#6
 8794 00b6 05D1     	 bne .L524
 8795              	 .loc 13 1770 0 is_stmt 0 discriminator 1
 8796 00b8 BB69     	 ldr r3,[r7,#24]
 8797 00ba 002B     	 cmp r3,#0
 8798 00bc 02DB     	 blt .L524
 8799              	 .loc 13 1770 0 discriminator 2
 8800 00be BB69     	 ldr r3,[r7,#24]
 8801 00c0 072B     	 cmp r3,#7
 8802 00c2 02DD     	 ble .L525
 8803              	.L524:
1771:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
 8804              	 .loc 13 1771 0 is_stmt 1
 8805 00c4 FFF7FEFF 	 bl cliShowParseError
1772:../cleanflight/src/main/interface/cli.c ****             return;
 8806              	 .loc 13 1772 0
 8807 00c8 74E0     	 b .L512
 8808              	.L525:
1773:../cleanflight/src/main/interface/cli.c ****         }
1774:../cleanflight/src/main/interface/cli.c **** 
1775:../cleanflight/src/main/interface/cli.c ****         servo = servoParamsMutable(i);
 8809              	 .loc 13 1775 0
 8810 00ca B869     	 ldr r0,[r7,#24]
 8811 00cc FFF7FEFF 	 bl servoParamsMutable
 8812 00d0 7861     	 str r0,[r7,#20]
1776:../cleanflight/src/main/interface/cli.c **** 
1777:../cleanflight/src/main/interface/cli.c ****         if (
1778:../cleanflight/src/main/interface/cli.c ****             arguments[MIN] < PWM_PULSE_MIN || arguments[MIN] > PWM_PULSE_MAX ||
 8813              	 .loc 13 1778 0
 8814 00d2 7B89     	 ldrh r3,[r7,#10]
1777:../cleanflight/src/main/interface/cli.c ****             arguments[MIN] < PWM_PULSE_MIN || arguments[MIN] > PWM_PULSE_MAX ||
 8815              	 .loc 13 1777 0
 8816 00d4 1BB2     	 sxth r3,r3
 8817 00d6 40F2ED22 	 movw r2,#749
 8818 00da 9342     	 cmp r3,r2
 8819 00dc 36DD     	 ble .L526
 8820              	 .loc 13 1778 0
 8821 00de 7B89     	 ldrh r3,[r7,#10]
 8822 00e0 1BB2     	 sxth r3,r3
 8823 00e2 40F6CA02 	 movw r2,#2250
 8824 00e6 9342     	 cmp r3,r2
 8825 00e8 30DC     	 bgt .L526
1779:../cleanflight/src/main/interface/cli.c ****             arguments[MAX] < PWM_PULSE_MIN || arguments[MAX] > PWM_PULSE_MAX ||
 8826              	 .loc 13 1779 0 discriminator 1
 8827 00ea BB89     	 ldrh r3,[r7,#12]
1778:../cleanflight/src/main/interface/cli.c ****             arguments[MAX] < PWM_PULSE_MIN || arguments[MAX] > PWM_PULSE_MAX ||
 8828              	 .loc 13 1778 0 discriminator 1
 8829 00ec 1BB2     	 sxth r3,r3
 8830 00ee 40F2ED22 	 movw r2,#749
 8831 00f2 9342     	 cmp r3,r2
 8832 00f4 2ADD     	 ble .L526
 8833              	 .loc 13 1779 0
 8834 00f6 BB89     	 ldrh r3,[r7,#12]
 8835 00f8 1BB2     	 sxth r3,r3
 8836 00fa 40F6CA02 	 movw r2,#2250
 8837 00fe 9342     	 cmp r3,r2
 8838 0100 24DC     	 bgt .L526
1780:../cleanflight/src/main/interface/cli.c ****             arguments[MIDDLE] < arguments[MIN] || arguments[MIDDLE] > arguments[MAX] ||
 8839              	 .loc 13 1780 0 discriminator 1
 8840 0102 FA89     	 ldrh r2,[r7,#14]
 8841 0104 7B89     	 ldrh r3,[r7,#10]
1779:../cleanflight/src/main/interface/cli.c ****             arguments[MAX] < PWM_PULSE_MIN || arguments[MAX] > PWM_PULSE_MAX ||
 8842              	 .loc 13 1779 0 discriminator 1
 8843 0106 12B2     	 sxth r2,r2
 8844 0108 1BB2     	 sxth r3,r3
 8845 010a 9A42     	 cmp r2,r3
 8846 010c 1EDB     	 blt .L526
 8847              	 .loc 13 1780 0
 8848 010e FA89     	 ldrh r2,[r7,#14]
 8849 0110 BB89     	 ldrh r3,[r7,#12]
 8850 0112 12B2     	 sxth r2,r2
 8851 0114 1BB2     	 sxth r3,r3
 8852 0116 9A42     	 cmp r2,r3
 8853 0118 18DC     	 bgt .L526
1781:../cleanflight/src/main/interface/cli.c ****             arguments[MIN] > arguments[MAX] || arguments[MAX] < arguments[MIN] ||
 8854              	 .loc 13 1781 0 discriminator 1
 8855 011a 7A89     	 ldrh r2,[r7,#10]
 8856 011c BB89     	 ldrh r3,[r7,#12]
1780:../cleanflight/src/main/interface/cli.c ****             arguments[MIDDLE] < arguments[MIN] || arguments[MIDDLE] > arguments[MAX] ||
 8857              	 .loc 13 1780 0 discriminator 1
 8858 011e 12B2     	 sxth r2,r2
 8859 0120 1BB2     	 sxth r3,r3
 8860 0122 9A42     	 cmp r2,r3
 8861 0124 12DC     	 bgt .L526
 8862              	 .loc 13 1781 0
 8863 0126 BA89     	 ldrh r2,[r7,#12]
 8864 0128 7B89     	 ldrh r3,[r7,#10]
 8865 012a 12B2     	 sxth r2,r2
 8866 012c 1BB2     	 sxth r3,r3
 8867 012e 9A42     	 cmp r2,r3
 8868 0130 0CDB     	 blt .L526
1782:../cleanflight/src/main/interface/cli.c ****             arguments[RATE] < -100 || arguments[RATE] > 100 ||
 8869              	 .loc 13 1782 0 discriminator 1
 8870 0132 3B8A     	 ldrh r3,[r7,#16]
1781:../cleanflight/src/main/interface/cli.c ****             arguments[MIN] > arguments[MAX] || arguments[MAX] < arguments[MIN] ||
 8871              	 .loc 13 1781 0 discriminator 1
 8872 0134 1BB2     	 sxth r3,r3
 8873 0136 13F1640F 	 cmn r3,#100
 8874 013a 07DB     	 blt .L526
 8875              	 .loc 13 1782 0
 8876 013c 3B8A     	 ldrh r3,[r7,#16]
 8877 013e 1BB2     	 sxth r3,r3
 8878 0140 642B     	 cmp r3,#100
 8879 0142 03DC     	 bgt .L526
1783:../cleanflight/src/main/interface/cli.c ****             arguments[FORWARD] >= MAX_SUPPORTED_RC_CHANNEL_COUNT
 8880              	 .loc 13 1783 0 discriminator 1
 8881 0144 7B8A     	 ldrh r3,[r7,#18]
1782:../cleanflight/src/main/interface/cli.c ****             arguments[RATE] < -100 || arguments[RATE] > 100 ||
 8882              	 .loc 13 1782 0 discriminator 1
 8883 0146 1BB2     	 sxth r3,r3
 8884 0148 112B     	 cmp r3,#17
 8885 014a 02DD     	 ble .L527
 8886              	.L526:
1784:../cleanflight/src/main/interface/cli.c ****         ) {
1785:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
 8887              	 .loc 13 1785 0
 8888 014c FFF7FEFF 	 bl cliShowParseError
1786:../cleanflight/src/main/interface/cli.c ****             return;
 8889              	 .loc 13 1786 0
 8890 0150 30E0     	 b .L512
 8891              	.L527:
1787:../cleanflight/src/main/interface/cli.c ****         }
1788:../cleanflight/src/main/interface/cli.c **** 
1789:../cleanflight/src/main/interface/cli.c ****         servo->min = arguments[MIN];
 8892              	 .loc 13 1789 0
 8893 0152 7A89     	 ldrh r2,[r7,#10]
 8894 0154 7B69     	 ldr r3,[r7,#20]
 8895 0156 9A80     	 strh r2,[r3,#4]
1790:../cleanflight/src/main/interface/cli.c ****         servo->max = arguments[MAX];
 8896              	 .loc 13 1790 0
 8897 0158 BA89     	 ldrh r2,[r7,#12]
 8898 015a 7B69     	 ldr r3,[r7,#20]
 8899 015c DA80     	 strh r2,[r3,#6]
1791:../cleanflight/src/main/interface/cli.c ****         servo->middle = arguments[MIDDLE];
 8900              	 .loc 13 1791 0
 8901 015e FA89     	 ldrh r2,[r7,#14]
 8902 0160 7B69     	 ldr r3,[r7,#20]
 8903 0162 1A81     	 strh r2,[r3,#8]
1792:../cleanflight/src/main/interface/cli.c ****         servo->rate = arguments[RATE];
 8904              	 .loc 13 1792 0
 8905 0164 3B8A     	 ldrh r3,[r7,#16]
 8906 0166 DAB2     	 uxtb r2,r3
 8907 0168 7B69     	 ldr r3,[r7,#20]
 8908 016a 9A72     	 strb r2,[r3,#10]
1793:../cleanflight/src/main/interface/cli.c ****         servo->forwardFromChannel = arguments[FORWARD];
 8909              	 .loc 13 1793 0
 8910 016c 7B8A     	 ldrh r3,[r7,#18]
 8911 016e DAB2     	 uxtb r2,r3
 8912 0170 7B69     	 ldr r3,[r7,#20]
 8913 0172 DA72     	 strb r2,[r3,#11]
1794:../cleanflight/src/main/interface/cli.c **** 
1795:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(0, false, format,
1796:../cleanflight/src/main/interface/cli.c ****             i,
1797:../cleanflight/src/main/interface/cli.c ****             servo->min,
 8914              	 .loc 13 1797 0
 8915 0174 7B69     	 ldr r3,[r7,#20]
 8916 0176 B3F90430 	 ldrsh r3,[r3,#4]
 8917 017a 9BB2     	 uxth r3,r3
1795:../cleanflight/src/main/interface/cli.c ****             i,
 8918              	 .loc 13 1795 0
 8919 017c 1CB2     	 sxth r4,r3
1798:../cleanflight/src/main/interface/cli.c ****             servo->max,
 8920              	 .loc 13 1798 0
 8921 017e 7B69     	 ldr r3,[r7,#20]
 8922 0180 B3F90630 	 ldrsh r3,[r3,#6]
 8923 0184 9BB2     	 uxth r3,r3
1795:../cleanflight/src/main/interface/cli.c ****             i,
 8924              	 .loc 13 1795 0
 8925 0186 18B2     	 sxth r0,r3
1799:../cleanflight/src/main/interface/cli.c ****             servo->middle,
 8926              	 .loc 13 1799 0
 8927 0188 7B69     	 ldr r3,[r7,#20]
 8928 018a B3F90830 	 ldrsh r3,[r3,#8]
 8929 018e 9BB2     	 uxth r3,r3
1795:../cleanflight/src/main/interface/cli.c ****             i,
 8930              	 .loc 13 1795 0
 8931 0190 19B2     	 sxth r1,r3
1800:../cleanflight/src/main/interface/cli.c ****             servo->rate,
 8932              	 .loc 13 1800 0
 8933 0192 7B69     	 ldr r3,[r7,#20]
 8934 0194 9B7A     	 ldrb r3,[r3,#10]
1795:../cleanflight/src/main/interface/cli.c ****             i,
 8935              	 .loc 13 1795 0
 8936 0196 5AB2     	 sxtb r2,r3
1801:../cleanflight/src/main/interface/cli.c ****             servo->forwardFromChannel
 8937              	 .loc 13 1801 0
 8938 0198 7B69     	 ldr r3,[r7,#20]
 8939 019a DB7A     	 ldrb r3,[r3,#11]
1795:../cleanflight/src/main/interface/cli.c ****             i,
 8940              	 .loc 13 1795 0
 8941 019c 5BB2     	 sxtb r3,r3
 8942 019e 0094     	 str r4,[sp]
 8943 01a0 0190     	 str r0,[sp,#4]
 8944 01a2 0291     	 str r1,[sp,#8]
 8945 01a4 0392     	 str r2,[sp,#12]
 8946 01a6 0493     	 str r3,[sp,#16]
 8947 01a8 0020     	 movs r0,#0
 8948 01aa 0021     	 movs r1,#0
 8949 01ac FA69     	 ldr r2,[r7,#28]
 8950 01ae BB69     	 ldr r3,[r7,#24]
 8951 01b0 FFF7FEFF 	 bl cliDumpPrintLinef
 8952              	.L512:
 8953              	.LBE57:
1802:../cleanflight/src/main/interface/cli.c ****         );
1803:../cleanflight/src/main/interface/cli.c **** 
1804:../cleanflight/src/main/interface/cli.c ****     }
1805:../cleanflight/src/main/interface/cli.c **** }
 8954              	 .loc 13 1805 0
 8955 01b4 2C37     	 adds r7,r7,#44
 8956              	.LCFI399:
 8957              	 .cfi_def_cfa_offset 12
 8958 01b6 BD46     	 mov sp,r7
 8959              	.LCFI400:
 8960              	 .cfi_def_cfa_register 13
 8961              	 
 8962 01b8 90BD     	 pop {r4,r7,pc}
 8963              	.L530:
 8964 01ba 00BF     	 .align 2
 8965              	.L529:
 8966 01bc 14050000 	 .word .LC103
 8967              	 .cfi_endproc
 8968              	.LFE738:
 8970              	 .section .rodata
 8971 0541 000000   	 .align 2
 8972              	.LC105:
 8973 0544 736D6978 	 .ascii "smix %d %d %d %d %d %d %d %d\000"
 8973      20256420 
 8973      25642025 
 8973      64202564 
 8973      20256420 
 8974              	 .section .text.printServoMix,"ax",%progbits
 8975              	 .align 2
 8976              	 .thumb
 8977              	 .thumb_func
 8979              	printServoMix:
 8980              	.LFB739:
1806:../cleanflight/src/main/interface/cli.c **** #endif
1807:../cleanflight/src/main/interface/cli.c **** 
1808:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SERVOS
1809:../cleanflight/src/main/interface/cli.c **** static void printServoMix(uint8_t dumpMask, const servoMixer_t *customServoMixers, const servoMixer
1810:../cleanflight/src/main/interface/cli.c **** {
 8981              	 .loc 13 1810 0
 8982              	 .cfi_startproc
 8983              	 
 8984              	 
 8985 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 8986              	.LCFI401:
 8987              	 .cfi_def_cfa_offset 20
 8988              	 .cfi_offset 4,-20
 8989              	 .cfi_offset 5,-16
 8990              	 .cfi_offset 6,-12
 8991              	 .cfi_offset 7,-8
 8992              	 .cfi_offset 14,-4
 8993 0002 95B0     	 sub sp,sp,#84
 8994              	.LCFI402:
 8995              	 .cfi_def_cfa_offset 104
 8996 0004 08AF     	 add r7,sp,#32
 8997              	.LCFI403:
 8998              	 .cfi_def_cfa 7,72
 8999 0006 0346     	 mov r3,r0
 9000 0008 B960     	 str r1,[r7,#8]
 9001 000a 7A60     	 str r2,[r7,#4]
 9002 000c FB73     	 strb r3,[r7,#15]
1811:../cleanflight/src/main/interface/cli.c ****     const char *format = "smix %d %d %d %d %d %d %d %d";
 9003              	 .loc 13 1811 0
 9004 000e 434B     	 ldr r3,.L537
 9005 0010 7B62     	 str r3,[r7,#36]
 9006              	.LBB58:
1812:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < MAX_SERVO_RULES; i++) {
 9007              	 .loc 13 1812 0
 9008 0012 0023     	 movs r3,#0
 9009 0014 FB62     	 str r3,[r7,#44]
 9010 0016 78E0     	 b .L532
 9011              	.L536:
 9012              	.LBB59:
1813:../cleanflight/src/main/interface/cli.c ****         const servoMixer_t customServoMixer = customServoMixers[i];
 9013              	 .loc 13 1813 0
 9014 0018 FA6A     	 ldr r2,[r7,#44]
 9015 001a 1346     	 mov r3,r2
 9016 001c DB00     	 lsls r3,r3,#3
 9017 001e 9B1A     	 subs r3,r3,r2
 9018 0020 BA68     	 ldr r2,[r7,#8]
 9019 0022 1A44     	 add r2,r2,r3
 9020 0024 07F11C03 	 add r3,r7,#28
 9021 0028 1068     	 ldr r0,[r2]
 9022 002a 1860     	 str r0,[r3]
 9023 002c 9188     	 ldrh r1,[r2,#4]
 9024 002e 9279     	 ldrb r2,[r2,#6]
 9025 0030 9980     	 strh r1,[r3,#4]
 9026 0032 9A71     	 strb r2,[r3,#6]
1814:../cleanflight/src/main/interface/cli.c ****         if (customServoMixer.rate == 0) {
 9027              	 .loc 13 1814 0
 9028 0034 BB7F     	 ldrb r3,[r7,#30]
 9029 0036 002B     	 cmp r3,#0
 9030 0038 6AD0     	 beq .L534
1815:../cleanflight/src/main/interface/cli.c ****             break;
1816:../cleanflight/src/main/interface/cli.c ****         }
1817:../cleanflight/src/main/interface/cli.c **** 
1818:../cleanflight/src/main/interface/cli.c ****         bool equalsDefault = false;
 9031              	 .loc 13 1818 0
 9032 003a 0023     	 movs r3,#0
 9033 003c 87F82B30 	 strb r3,[r7,#43]
1819:../cleanflight/src/main/interface/cli.c ****         if (defaultCustomServoMixers) {
 9034              	 .loc 13 1819 0
 9035 0040 7B68     	 ldr r3,[r7,#4]
 9036 0042 002B     	 cmp r3,#0
 9037 0044 3CD0     	 beq .L535
 9038              	.LBB60:
1820:../cleanflight/src/main/interface/cli.c ****             servoMixer_t customServoMixerDefault = defaultCustomServoMixers[i];
 9039              	 .loc 13 1820 0
 9040 0046 FA6A     	 ldr r2,[r7,#44]
 9041 0048 1346     	 mov r3,r2
 9042 004a DB00     	 lsls r3,r3,#3
 9043 004c 9B1A     	 subs r3,r3,r2
 9044 004e 7A68     	 ldr r2,[r7,#4]
 9045 0050 1A44     	 add r2,r2,r3
 9046 0052 07F11403 	 add r3,r7,#20
 9047 0056 1068     	 ldr r0,[r2]
 9048 0058 1860     	 str r0,[r3]
 9049 005a 9188     	 ldrh r1,[r2,#4]
 9050 005c 9279     	 ldrb r2,[r2,#6]
 9051 005e 9980     	 strh r1,[r3,#4]
 9052 0060 9A71     	 strb r2,[r3,#6]
1821:../cleanflight/src/main/interface/cli.c ****             equalsDefault = !memcmp(&customServoMixer, &customServoMixerDefault, sizeof(customServo
 9053              	 .loc 13 1821 0
 9054 0062 07F11C02 	 add r2,r7,#28
 9055 0066 07F11403 	 add r3,r7,#20
 9056 006a 1046     	 mov r0,r2
 9057 006c 1946     	 mov r1,r3
 9058 006e 0722     	 movs r2,#7
 9059 0070 FFF7FEFF 	 bl memcmp
 9060 0074 0346     	 mov r3,r0
 9061 0076 002B     	 cmp r3,#0
 9062 0078 0CBF     	 ite eq
 9063 007a 0123     	 moveq r3,#1
 9064 007c 0023     	 movne r3,#0
 9065 007e 87F82B30 	 strb r3,[r7,#43]
1822:../cleanflight/src/main/interface/cli.c **** 
1823:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
1824:../cleanflight/src/main/interface/cli.c ****                 i,
1825:../cleanflight/src/main/interface/cli.c ****                 customServoMixerDefault.targetChannel,
 9066              	 .loc 13 1825 0
 9067 0082 3B7D     	 ldrb r3,[r7,#20]
1823:../cleanflight/src/main/interface/cli.c ****                 i,
 9068              	 .loc 13 1823 0
 9069 0084 9C46     	 mov ip,r3
1826:../cleanflight/src/main/interface/cli.c ****                 customServoMixerDefault.inputSource,
 9070              	 .loc 13 1826 0
 9071 0086 7B7D     	 ldrb r3,[r7,#21]
1823:../cleanflight/src/main/interface/cli.c ****                 i,
 9072              	 .loc 13 1823 0
 9073 0088 9E46     	 mov lr,r3
1827:../cleanflight/src/main/interface/cli.c ****                 customServoMixerDefault.rate,
 9074              	 .loc 13 1827 0
 9075 008a BB7D     	 ldrb r3,[r7,#22]
1823:../cleanflight/src/main/interface/cli.c ****                 i,
 9076              	 .loc 13 1823 0
 9077 008c 59B2     	 sxtb r1,r3
1828:../cleanflight/src/main/interface/cli.c ****                 customServoMixerDefault.speed,
 9078              	 .loc 13 1828 0
 9079 008e FB7D     	 ldrb r3,[r7,#23]
1823:../cleanflight/src/main/interface/cli.c ****                 i,
 9080              	 .loc 13 1823 0
 9081 0090 1E46     	 mov r6,r3
1829:../cleanflight/src/main/interface/cli.c ****                 customServoMixerDefault.min,
 9082              	 .loc 13 1829 0
 9083 0092 3B7E     	 ldrb r3,[r7,#24]
1823:../cleanflight/src/main/interface/cli.c ****                 i,
 9084              	 .loc 13 1823 0
 9085 0094 5AB2     	 sxtb r2,r3
1830:../cleanflight/src/main/interface/cli.c ****                 customServoMixerDefault.max,
 9086              	 .loc 13 1830 0
 9087 0096 7B7E     	 ldrb r3,[r7,#25]
1823:../cleanflight/src/main/interface/cli.c ****                 i,
 9088              	 .loc 13 1823 0
 9089 0098 5BB2     	 sxtb r3,r3
1831:../cleanflight/src/main/interface/cli.c ****                 customServoMixerDefault.box
 9090              	 .loc 13 1831 0
 9091 009a B87E     	 ldrb r0,[r7,#26]
1823:../cleanflight/src/main/interface/cli.c ****                 i,
 9092              	 .loc 13 1823 0
 9093 009c 0546     	 mov r5,r0
 9094 009e F87B     	 ldrb r0,[r7,#15]
 9095 00a0 97F82B40 	 ldrb r4,[r7,#43]
 9096 00a4 CDF800C0 	 str ip,[sp]
 9097 00a8 CDF804E0 	 str lr,[sp,#4]
 9098 00ac 0291     	 str r1,[sp,#8]
 9099 00ae 0396     	 str r6,[sp,#12]
 9100 00b0 0492     	 str r2,[sp,#16]
 9101 00b2 0593     	 str r3,[sp,#20]
 9102 00b4 0695     	 str r5,[sp,#24]
 9103 00b6 2146     	 mov r1,r4
 9104 00b8 7A6A     	 ldr r2,[r7,#36]
 9105 00ba FB6A     	 ldr r3,[r7,#44]
 9106 00bc FFF7FEFF 	 bl cliDefaultPrintLinef
 9107              	.L535:
 9108              	.LBE60:
1832:../cleanflight/src/main/interface/cli.c ****             );
1833:../cleanflight/src/main/interface/cli.c ****         }
1834:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format,
1835:../cleanflight/src/main/interface/cli.c ****             i,
1836:../cleanflight/src/main/interface/cli.c ****             customServoMixer.targetChannel,
 9109              	 .loc 13 1836 0 discriminator 1
 9110 00c0 3B7F     	 ldrb r3,[r7,#28]
1834:../cleanflight/src/main/interface/cli.c ****             i,
 9111              	 .loc 13 1834 0 discriminator 1
 9112 00c2 9C46     	 mov ip,r3
1837:../cleanflight/src/main/interface/cli.c ****             customServoMixer.inputSource,
 9113              	 .loc 13 1837 0 discriminator 1
 9114 00c4 7B7F     	 ldrb r3,[r7,#29]
1834:../cleanflight/src/main/interface/cli.c ****             i,
 9115              	 .loc 13 1834 0 discriminator 1
 9116 00c6 9E46     	 mov lr,r3
1838:../cleanflight/src/main/interface/cli.c ****             customServoMixer.rate,
 9117              	 .loc 13 1838 0 discriminator 1
 9118 00c8 BB7F     	 ldrb r3,[r7,#30]
1834:../cleanflight/src/main/interface/cli.c ****             i,
 9119              	 .loc 13 1834 0 discriminator 1
 9120 00ca 59B2     	 sxtb r1,r3
1839:../cleanflight/src/main/interface/cli.c ****             customServoMixer.speed,
 9121              	 .loc 13 1839 0 discriminator 1
 9122 00cc FB7F     	 ldrb r3,[r7,#31]
1834:../cleanflight/src/main/interface/cli.c ****             i,
 9123              	 .loc 13 1834 0 discriminator 1
 9124 00ce 1E46     	 mov r6,r3
1840:../cleanflight/src/main/interface/cli.c ****             customServoMixer.min,
 9125              	 .loc 13 1840 0 discriminator 1
 9126 00d0 97F82030 	 ldrb r3,[r7,#32]
1834:../cleanflight/src/main/interface/cli.c ****             i,
 9127              	 .loc 13 1834 0 discriminator 1
 9128 00d4 5AB2     	 sxtb r2,r3
1841:../cleanflight/src/main/interface/cli.c ****             customServoMixer.max,
 9129              	 .loc 13 1841 0 discriminator 1
 9130 00d6 97F82130 	 ldrb r3,[r7,#33]
1834:../cleanflight/src/main/interface/cli.c ****             i,
 9131              	 .loc 13 1834 0 discriminator 1
 9132 00da 5BB2     	 sxtb r3,r3
1842:../cleanflight/src/main/interface/cli.c ****             customServoMixer.box
 9133              	 .loc 13 1842 0 discriminator 1
 9134 00dc 97F82200 	 ldrb r0,[r7,#34]
1834:../cleanflight/src/main/interface/cli.c ****             i,
 9135              	 .loc 13 1834 0 discriminator 1
 9136 00e0 0546     	 mov r5,r0
 9137 00e2 F87B     	 ldrb r0,[r7,#15]
 9138 00e4 97F82B40 	 ldrb r4,[r7,#43]
 9139 00e8 CDF800C0 	 str ip,[sp]
 9140 00ec CDF804E0 	 str lr,[sp,#4]
 9141 00f0 0291     	 str r1,[sp,#8]
 9142 00f2 0396     	 str r6,[sp,#12]
 9143 00f4 0492     	 str r2,[sp,#16]
 9144 00f6 0593     	 str r3,[sp,#20]
 9145 00f8 0695     	 str r5,[sp,#24]
 9146 00fa 2146     	 mov r1,r4
 9147 00fc 7A6A     	 ldr r2,[r7,#36]
 9148 00fe FB6A     	 ldr r3,[r7,#44]
 9149 0100 FFF7FEFF 	 bl cliDumpPrintLinef
 9150              	.LBE59:
1812:../cleanflight/src/main/interface/cli.c ****         const servoMixer_t customServoMixer = customServoMixers[i];
 9151              	 .loc 13 1812 0 discriminator 1
 9152 0104 FB6A     	 ldr r3,[r7,#44]
 9153 0106 0133     	 adds r3,r3,#1
 9154 0108 FB62     	 str r3,[r7,#44]
 9155              	.L532:
 9156 010a FB6A     	 ldr r3,[r7,#44]
 9157 010c 0F2B     	 cmp r3,#15
 9158 010e 83D9     	 bls .L536
 9159              	.L534:
 9160              	.LBE58:
1843:../cleanflight/src/main/interface/cli.c ****         );
1844:../cleanflight/src/main/interface/cli.c ****     }
1845:../cleanflight/src/main/interface/cli.c **** 
1846:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 9161              	 .loc 13 1846 0
 9162 0110 FFF7FEFF 	 bl cliPrintLinefeed
1847:../cleanflight/src/main/interface/cli.c **** }
 9163              	 .loc 13 1847 0
 9164 0114 3437     	 adds r7,r7,#52
 9165              	.LCFI404:
 9166              	 .cfi_def_cfa_offset 20
 9167 0116 BD46     	 mov sp,r7
 9168              	.LCFI405:
 9169              	 .cfi_def_cfa_register 13
 9170              	 
 9171 0118 F0BD     	 pop {r4,r5,r6,r7,pc}
 9172              	.L538:
 9173 011a 00BF     	 .align 2
 9174              	.L537:
 9175 011c 44050000 	 .word .LC105
 9176              	 .cfi_endproc
 9177              	.LFE739:
 9179              	 .section .rodata
 9180 0561 000000   	 .align 2
 9181              	.LC106:
 9182 0564 72657665 	 .ascii "reverse\000"
 9182      72736500 
 9183              	 .align 2
 9184              	.LC107:
 9185 056c 7300     	 .ascii "s\000"
 9186 056e 0000     	 .align 2
 9187              	.LC108:
 9188 0570 09692564 	 .ascii "\011i%d\000"
 9188      00
 9189 0575 000000   	 .align 2
 9190              	.LC109:
 9191 0578 7200     	 .ascii "r\000"
 9192 057a 0000     	 .align 2
 9193              	.LC110:
 9194 057c 6E00     	 .ascii "n\000"
 9195 057e 0000     	 .align 2
 9196              	.LC111:
 9197 0580 09257320 	 .ascii "\011%s  \000"
 9197      2000
 9198              	 .section .text.cliServoMix,"ax",%progbits
 9199              	 .align 2
 9200              	 .thumb
 9201              	 .thumb_func
 9203              	cliServoMix:
 9204              	.LFB740:
1848:../cleanflight/src/main/interface/cli.c **** 
1849:../cleanflight/src/main/interface/cli.c **** static void cliServoMix(char *cmdline)
1850:../cleanflight/src/main/interface/cli.c **** {
 9205              	 .loc 13 1850 0
 9206              	 .cfi_startproc
 9207              	 
 9208              	 
 9209 0000 90B5     	 push {r4,r7,lr}
 9210              	.LCFI406:
 9211              	 .cfi_def_cfa_offset 12
 9212              	 .cfi_offset 4,-12
 9213              	 .cfi_offset 7,-8
 9214              	 .cfi_offset 14,-4
 9215 0002 99B0     	 sub sp,sp,#100
 9216              	.LCFI407:
 9217              	 .cfi_def_cfa_offset 112
 9218 0004 00AF     	 add r7,sp,#0
 9219              	.LCFI408:
 9220              	 .cfi_def_cfa_register 7
 9221 0006 7860     	 str r0,[r7,#4]
1851:../cleanflight/src/main/interface/cli.c ****     int args[8], check = 0;
 9222              	 .loc 13 1851 0
 9223 0008 0023     	 movs r3,#0
 9224 000a FB65     	 str r3,[r7,#92]
1852:../cleanflight/src/main/interface/cli.c ****     int len = strlen(cmdline);
 9225              	 .loc 13 1852 0
 9226 000c 7868     	 ldr r0,[r7,#4]
 9227 000e FFF7FEFF 	 bl strlen
 9228 0012 0346     	 mov r3,r0
 9229 0014 FB63     	 str r3,[r7,#60]
1853:../cleanflight/src/main/interface/cli.c **** 
1854:../cleanflight/src/main/interface/cli.c ****     if (len == 0) {
 9230              	 .loc 13 1854 0
 9231 0016 FB6B     	 ldr r3,[r7,#60]
 9232 0018 002B     	 cmp r3,#0
 9233 001a 09D1     	 bne .L540
1855:../cleanflight/src/main/interface/cli.c ****         printServoMix(DUMP_MASTER, customServoMixers(0), NULL);
 9234              	 .loc 13 1855 0
 9235 001c 0020     	 movs r0,#0
 9236 001e FFF7FEFF 	 bl customServoMixers
 9237 0022 0346     	 mov r3,r0
 9238 0024 0120     	 movs r0,#1
 9239 0026 1946     	 mov r1,r3
 9240 0028 0022     	 movs r2,#0
 9241 002a FFF7FEFF 	 bl printServoMix
 9242 002e D7E1     	 b .L539
 9243              	.L540:
1856:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "reset", 5) == 0) {
 9244              	 .loc 13 1856 0
 9245 0030 7868     	 ldr r0,[r7,#4]
 9246 0032 A649     	 ldr r1,.L580
 9247 0034 0522     	 movs r2,#5
 9248 0036 FFF7FEFF 	 bl strncasecmp
 9249 003a 0346     	 mov r3,r0
 9250 003c 002B     	 cmp r3,#0
 9251 003e 1ED1     	 bne .L542
1857:../cleanflight/src/main/interface/cli.c ****         // erase custom mixer
1858:../cleanflight/src/main/interface/cli.c ****         memset(customServoMixers_array(), 0, sizeof(*customServoMixers_array()));
 9252              	 .loc 13 1858 0
 9253 0040 FFF7FEFF 	 bl customServoMixers_array
 9254 0044 0346     	 mov r3,r0
 9255 0046 1846     	 mov r0,r3
 9256 0048 0021     	 movs r1,#0
 9257 004a 7022     	 movs r2,#112
 9258 004c FFF7FEFF 	 bl memset
 9259              	.LBB61:
1859:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 9260              	 .loc 13 1859 0
 9261 0050 0023     	 movs r3,#0
 9262 0052 BB65     	 str r3,[r7,#88]
 9263 0054 0FE0     	 b .L543
 9264              	.L544:
1860:../cleanflight/src/main/interface/cli.c ****             servoParamsMutable(i)->reversedSources = 0;
 9265              	 .loc 13 1860 0 discriminator 3
 9266 0056 BB6D     	 ldr r3,[r7,#88]
 9267 0058 1846     	 mov r0,r3
 9268 005a FFF7FEFF 	 bl servoParamsMutable
 9269 005e 0346     	 mov r3,r0
 9270 0060 0022     	 movs r2,#0
 9271 0062 1A70     	 strb r2,[r3]
 9272 0064 0022     	 movs r2,#0
 9273 0066 5A70     	 strb r2,[r3,#1]
 9274 0068 0022     	 movs r2,#0
 9275 006a 9A70     	 strb r2,[r3,#2]
 9276 006c 0022     	 movs r2,#0
 9277 006e DA70     	 strb r2,[r3,#3]
1859:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 9278              	 .loc 13 1859 0 discriminator 3
 9279 0070 BB6D     	 ldr r3,[r7,#88]
 9280 0072 0133     	 adds r3,r3,#1
 9281 0074 BB65     	 str r3,[r7,#88]
 9282              	.L543:
1859:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 9283              	 .loc 13 1859 0 is_stmt 0 discriminator 1
 9284 0076 BB6D     	 ldr r3,[r7,#88]
 9285 0078 072B     	 cmp r3,#7
 9286 007a ECD9     	 bls .L544
 9287              	.LBE61:
 9288 007c B0E1     	 b .L539
 9289              	.L542:
1861:../cleanflight/src/main/interface/cli.c ****         }
1862:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "load", 4) == 0) {
 9290              	 .loc 13 1862 0 is_stmt 1
 9291 007e 7868     	 ldr r0,[r7,#4]
 9292 0080 9349     	 ldr r1,.L580+4
 9293 0082 0422     	 movs r2,#4
 9294 0084 FFF7FEFF 	 bl strncasecmp
 9295 0088 0346     	 mov r3,r0
 9296 008a 002B     	 cmp r3,#0
 9297 008c 39D1     	 bne .L545
 9298              	.LBB62:
1863:../cleanflight/src/main/interface/cli.c ****         const char *ptr = nextArg(cmdline);
 9299              	 .loc 13 1863 0
 9300 008e 7868     	 ldr r0,[r7,#4]
 9301 0090 FFF7FEFF 	 bl nextArg
 9302 0094 B863     	 str r0,[r7,#56]
1864:../cleanflight/src/main/interface/cli.c ****         if (ptr) {
 9303              	 .loc 13 1864 0
 9304 0096 BB6B     	 ldr r3,[r7,#56]
 9305 0098 002B     	 cmp r3,#0
 9306 009a 31D0     	 beq .L546
1865:../cleanflight/src/main/interface/cli.c ****             len = strlen(ptr);
 9307              	 .loc 13 1865 0
 9308 009c B86B     	 ldr r0,[r7,#56]
 9309 009e FFF7FEFF 	 bl strlen
 9310 00a2 0346     	 mov r3,r0
 9311 00a4 FB63     	 str r3,[r7,#60]
 9312              	.LBB63:
1866:../cleanflight/src/main/interface/cli.c ****             for (uint32_t i = 0; ; i++) {
 9313              	 .loc 13 1866 0
 9314 00a6 0023     	 movs r3,#0
 9315 00a8 7B65     	 str r3,[r7,#84]
 9316              	.L549:
1867:../cleanflight/src/main/interface/cli.c ****                 if (mixerNames[i] == NULL) {
 9317              	 .loc 13 1867 0
 9318 00aa 8A4A     	 ldr r2,.L580+8
 9319 00ac 7B6D     	 ldr r3,[r7,#84]
 9320 00ae 52F82330 	 ldr r3,[r2,r3,lsl#2]
 9321 00b2 002B     	 cmp r3,#0
 9322 00b4 03D1     	 bne .L547
1868:../cleanflight/src/main/interface/cli.c ****                     cliPrintErrorLinef("Invalid name");
 9323              	 .loc 13 1868 0
 9324 00b6 8848     	 ldr r0,.L580+12
 9325 00b8 FFF7FEFF 	 bl cliPrintErrorLinef
1869:../cleanflight/src/main/interface/cli.c ****                     break;
 9326              	 .loc 13 1869 0
 9327 00bc 20E0     	 b .L546
 9328              	.L547:
1870:../cleanflight/src/main/interface/cli.c ****                 }
1871:../cleanflight/src/main/interface/cli.c ****                 if (strncasecmp(ptr, mixerNames[i], len) == 0) {
 9329              	 .loc 13 1871 0
 9330 00be 854A     	 ldr r2,.L580+8
 9331 00c0 7B6D     	 ldr r3,[r7,#84]
 9332 00c2 52F82320 	 ldr r2,[r2,r3,lsl#2]
 9333 00c6 FB6B     	 ldr r3,[r7,#60]
 9334 00c8 B86B     	 ldr r0,[r7,#56]
 9335 00ca 1146     	 mov r1,r2
 9336 00cc 1A46     	 mov r2,r3
 9337 00ce FFF7FEFF 	 bl strncasecmp
 9338 00d2 0346     	 mov r3,r0
 9339 00d4 002B     	 cmp r3,#0
 9340 00d6 0FD1     	 bne .L548
1872:../cleanflight/src/main/interface/cli.c ****                     servoMixerLoadMix(i);
 9341              	 .loc 13 1872 0
 9342 00d8 7B6D     	 ldr r3,[r7,#84]
 9343 00da 1846     	 mov r0,r3
 9344 00dc FFF7FEFF 	 bl servoMixerLoadMix
1873:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef("Loaded %s", mixerNames[i]);
 9345              	 .loc 13 1873 0
 9346 00e0 7C4A     	 ldr r2,.L580+8
 9347 00e2 7B6D     	 ldr r3,[r7,#84]
 9348 00e4 52F82330 	 ldr r3,[r2,r3,lsl#2]
 9349 00e8 7C48     	 ldr r0,.L580+16
 9350 00ea 1946     	 mov r1,r3
 9351 00ec FFF7FEFF 	 bl cliPrintLinef
1874:../cleanflight/src/main/interface/cli.c ****                     cliServoMix("");
 9352              	 .loc 13 1874 0
 9353 00f0 7B48     	 ldr r0,.L580+20
 9354 00f2 FFF785FF 	 bl cliServoMix
1875:../cleanflight/src/main/interface/cli.c ****                     break;
 9355              	 .loc 13 1875 0
 9356 00f6 03E0     	 b .L546
 9357              	.L548:
1866:../cleanflight/src/main/interface/cli.c ****                 if (mixerNames[i] == NULL) {
 9358              	 .loc 13 1866 0
 9359 00f8 7B6D     	 ldr r3,[r7,#84]
 9360 00fa 0133     	 adds r3,r3,#1
 9361 00fc 7B65     	 str r3,[r7,#84]
1876:../cleanflight/src/main/interface/cli.c ****                 }
1877:../cleanflight/src/main/interface/cli.c ****             }
 9362              	 .loc 13 1877 0
 9363 00fe D4E7     	 b .L549
 9364              	.L546:
 9365              	.LBE63:
 9366              	.LBE62:
 9367 0100 6EE1     	 b .L539
 9368              	.L545:
1878:../cleanflight/src/main/interface/cli.c ****         }
1879:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "reverse", 7) == 0) {
 9369              	 .loc 13 1879 0
 9370 0102 7868     	 ldr r0,[r7,#4]
 9371 0104 7749     	 ldr r1,.L580+24
 9372 0106 0722     	 movs r2,#7
 9373 0108 FFF7FEFF 	 bl strncasecmp
 9374 010c 0346     	 mov r3,r0
 9375 010e 002B     	 cmp r3,#0
 9376 0110 40F0AF80 	 bne .L550
 9377              	.LBB64:
1880:../cleanflight/src/main/interface/cli.c ****         enum {SERVO = 0, INPUT, REVERSE, ARGS_COUNT};
1881:../cleanflight/src/main/interface/cli.c ****         char *ptr = strchr(cmdline, ' ');
 9378              	 .loc 13 1881 0
 9379 0114 7868     	 ldr r0,[r7,#4]
 9380 0116 2021     	 movs r1,#32
 9381 0118 FFF7FEFF 	 bl strchr
 9382 011c 3865     	 str r0,[r7,#80]
1882:../cleanflight/src/main/interface/cli.c **** 
1883:../cleanflight/src/main/interface/cli.c ****         if (ptr == NULL) {
 9383              	 .loc 13 1883 0
 9384 011e 3B6D     	 ldr r3,[r7,#80]
 9385 0120 002B     	 cmp r3,#0
 9386 0122 3ED1     	 bne .L551
1884:../cleanflight/src/main/interface/cli.c ****             cliPrintf("s");
 9387              	 .loc 13 1884 0
 9388 0124 7048     	 ldr r0,.L580+28
 9389 0126 FFF7FEFF 	 bl cliPrintf
 9390              	.LBB65:
1885:../cleanflight/src/main/interface/cli.c ****             for (uint32_t inputSource = 0; inputSource < INPUT_SOURCE_COUNT; inputSource++)
 9391              	 .loc 13 1885 0
 9392 012a 0023     	 movs r3,#0
 9393 012c FB64     	 str r3,[r7,#76]
 9394 012e 06E0     	 b .L552
 9395              	.L553:
1886:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("\ti%d", inputSource);
 9396              	 .loc 13 1886 0 discriminator 3
 9397 0130 6E48     	 ldr r0,.L580+32
 9398 0132 F96C     	 ldr r1,[r7,#76]
 9399 0134 FFF7FEFF 	 bl cliPrintf
1885:../cleanflight/src/main/interface/cli.c ****             for (uint32_t inputSource = 0; inputSource < INPUT_SOURCE_COUNT; inputSource++)
 9400              	 .loc 13 1885 0 discriminator 3
 9401 0138 FB6C     	 ldr r3,[r7,#76]
 9402 013a 0133     	 adds r3,r3,#1
 9403 013c FB64     	 str r3,[r7,#76]
 9404              	.L552:
1885:../cleanflight/src/main/interface/cli.c ****             for (uint32_t inputSource = 0; inputSource < INPUT_SOURCE_COUNT; inputSource++)
 9405              	 .loc 13 1885 0 is_stmt 0 discriminator 1
 9406 013e FB6C     	 ldr r3,[r7,#76]
 9407 0140 0D2B     	 cmp r3,#13
 9408 0142 F5D9     	 bls .L553
 9409              	.LBE65:
1887:../cleanflight/src/main/interface/cli.c ****             cliPrintLinefeed();
 9410              	 .loc 13 1887 0 is_stmt 1
 9411 0144 FFF7FEFF 	 bl cliPrintLinefeed
 9412              	.LBB66:
1888:../cleanflight/src/main/interface/cli.c **** 
1889:../cleanflight/src/main/interface/cli.c ****             for (uint32_t servoIndex = 0; servoIndex < MAX_SUPPORTED_SERVOS; servoIndex++) {
 9413              	 .loc 13 1889 0
 9414 0148 0023     	 movs r3,#0
 9415 014a BB64     	 str r3,[r7,#72]
 9416 014c 25E0     	 b .L554
 9417              	.L559:
1890:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%d", servoIndex);
 9418              	 .loc 13 1890 0
 9419 014e 6848     	 ldr r0,.L580+36
 9420 0150 B96C     	 ldr r1,[r7,#72]
 9421 0152 FFF7FEFF 	 bl cliPrintf
 9422              	.LBB67:
1891:../cleanflight/src/main/interface/cli.c ****                 for (uint32_t inputSource = 0; inputSource < INPUT_SOURCE_COUNT; inputSource++) {
 9423              	 .loc 13 1891 0
 9424 0156 0023     	 movs r3,#0
 9425 0158 7B64     	 str r3,[r7,#68]
 9426 015a 16E0     	 b .L555
 9427              	.L558:
1892:../cleanflight/src/main/interface/cli.c ****                     cliPrintf("\t%s  ", (servoParams(servoIndex)->reversedSources & (1 << inputSour
 9428              	 .loc 13 1892 0
 9429 015c BB6C     	 ldr r3,[r7,#72]
 9430 015e 1846     	 mov r0,r3
 9431 0160 FFF7FEFF 	 bl servoParams
 9432 0164 0346     	 mov r3,r0
 9433 0166 1B68     	 ldr r3,[r3]
 9434 0168 7A6C     	 ldr r2,[r7,#68]
 9435 016a 0121     	 movs r1,#1
 9436 016c 01FA02F2 	 lsl r2,r1,r2
 9437 0170 1340     	 ands r3,r3,r2
 9438 0172 002B     	 cmp r3,#0
 9439 0174 01D0     	 beq .L556
 9440              	 .loc 13 1892 0 is_stmt 0 discriminator 1
 9441 0176 5F4B     	 ldr r3,.L580+40
 9442 0178 00E0     	 b .L557
 9443              	.L556:
 9444              	 .loc 13 1892 0 discriminator 2
 9445 017a 5F4B     	 ldr r3,.L580+44
 9446              	.L557:
 9447              	 .loc 13 1892 0 discriminator 4
 9448 017c 5F48     	 ldr r0,.L580+48
 9449 017e 1946     	 mov r1,r3
 9450 0180 FFF7FEFF 	 bl cliPrintf
1891:../cleanflight/src/main/interface/cli.c ****                 for (uint32_t inputSource = 0; inputSource < INPUT_SOURCE_COUNT; inputSource++) {
 9451              	 .loc 13 1891 0 is_stmt 1 discriminator 4
 9452 0184 7B6C     	 ldr r3,[r7,#68]
 9453 0186 0133     	 adds r3,r3,#1
 9454 0188 7B64     	 str r3,[r7,#68]
 9455              	.L555:
1891:../cleanflight/src/main/interface/cli.c ****                 for (uint32_t inputSource = 0; inputSource < INPUT_SOURCE_COUNT; inputSource++) {
 9456              	 .loc 13 1891 0 is_stmt 0 discriminator 2
 9457 018a 7B6C     	 ldr r3,[r7,#68]
 9458 018c 0D2B     	 cmp r3,#13
 9459 018e E5D9     	 bls .L558
 9460              	.LBE67:
1893:../cleanflight/src/main/interface/cli.c ****                 }
1894:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinefeed();
 9461              	 .loc 13 1894 0 is_stmt 1 discriminator 2
 9462 0190 FFF7FEFF 	 bl cliPrintLinefeed
1889:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%d", servoIndex);
 9463              	 .loc 13 1889 0 discriminator 2
 9464 0194 BB6C     	 ldr r3,[r7,#72]
 9465 0196 0133     	 adds r3,r3,#1
 9466 0198 BB64     	 str r3,[r7,#72]
 9467              	.L554:
1889:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%d", servoIndex);
 9468              	 .loc 13 1889 0 is_stmt 0 discriminator 1
 9469 019a BB6C     	 ldr r3,[r7,#72]
 9470 019c 072B     	 cmp r3,#7
 9471 019e D6D9     	 bls .L559
 9472              	.LBE66:
1895:../cleanflight/src/main/interface/cli.c ****             }
1896:../cleanflight/src/main/interface/cli.c ****             return;
 9473              	 .loc 13 1896 0 is_stmt 1
 9474 01a0 1EE1     	 b .L539
 9475              	.L551:
1897:../cleanflight/src/main/interface/cli.c ****         }
1898:../cleanflight/src/main/interface/cli.c **** 
1899:../cleanflight/src/main/interface/cli.c ****         char *saveptr;
1900:../cleanflight/src/main/interface/cli.c ****         ptr = strtok_r(ptr, " ", &saveptr);
 9476              	 .loc 13 1900 0
 9477 01a2 07F11003 	 add r3,r7,#16
 9478 01a6 386D     	 ldr r0,[r7,#80]
 9479 01a8 5549     	 ldr r1,.L580+52
 9480 01aa 1A46     	 mov r2,r3
 9481 01ac FFF7FEFF 	 bl strtok_r
 9482 01b0 3865     	 str r0,[r7,#80]
1901:../cleanflight/src/main/interface/cli.c ****         while (ptr != NULL && check < ARGS_COUNT - 1) {
 9483              	 .loc 13 1901 0
 9484 01b2 14E0     	 b .L561
 9485              	.L563:
1902:../cleanflight/src/main/interface/cli.c ****             args[check++] = atoi(ptr);
 9486              	 .loc 13 1902 0
 9487 01b4 FC6D     	 ldr r4,[r7,#92]
 9488 01b6 631C     	 adds r3,r4,#1
 9489 01b8 FB65     	 str r3,[r7,#92]
 9490 01ba 386D     	 ldr r0,[r7,#80]
 9491 01bc FFF7FEFF 	 bl atoi
 9492 01c0 0246     	 mov r2,r0
 9493 01c2 A300     	 lsls r3,r4,#2
 9494 01c4 07F16001 	 add r1,r7,#96
 9495 01c8 0B44     	 add r3,r3,r1
 9496 01ca 43F84C2C 	 str r2,[r3,#-76]
1903:../cleanflight/src/main/interface/cli.c ****             ptr = strtok_r(NULL, " ", &saveptr);
 9497              	 .loc 13 1903 0
 9498 01ce 07F11003 	 add r3,r7,#16
 9499 01d2 0020     	 movs r0,#0
 9500 01d4 4A49     	 ldr r1,.L580+52
 9501 01d6 1A46     	 mov r2,r3
 9502 01d8 FFF7FEFF 	 bl strtok_r
 9503 01dc 3865     	 str r0,[r7,#80]
 9504              	.L561:
1901:../cleanflight/src/main/interface/cli.c ****         while (ptr != NULL && check < ARGS_COUNT - 1) {
 9505              	 .loc 13 1901 0
 9506 01de 3B6D     	 ldr r3,[r7,#80]
 9507 01e0 002B     	 cmp r3,#0
 9508 01e2 02D0     	 beq .L562
1901:../cleanflight/src/main/interface/cli.c ****         while (ptr != NULL && check < ARGS_COUNT - 1) {
 9509              	 .loc 13 1901 0 is_stmt 0 discriminator 1
 9510 01e4 FB6D     	 ldr r3,[r7,#92]
 9511 01e6 012B     	 cmp r3,#1
 9512 01e8 E4DD     	 ble .L563
 9513              	.L562:
1904:../cleanflight/src/main/interface/cli.c ****         }
1905:../cleanflight/src/main/interface/cli.c **** 
1906:../cleanflight/src/main/interface/cli.c ****         if (ptr == NULL || check != ARGS_COUNT - 1) {
 9514              	 .loc 13 1906 0 is_stmt 1
 9515 01ea 3B6D     	 ldr r3,[r7,#80]
 9516 01ec 002B     	 cmp r3,#0
 9517 01ee 02D0     	 beq .L564
 9518              	 .loc 13 1906 0 is_stmt 0 discriminator 1
 9519 01f0 FB6D     	 ldr r3,[r7,#92]
 9520 01f2 022B     	 cmp r3,#2
 9521 01f4 02D0     	 beq .L565
 9522              	.L564:
1907:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
 9523              	 .loc 13 1907 0 is_stmt 1
 9524 01f6 FFF7FEFF 	 bl cliShowParseError
1908:../cleanflight/src/main/interface/cli.c ****             return;
 9525              	 .loc 13 1908 0
 9526 01fa F1E0     	 b .L539
 9527              	.L565:
1909:../cleanflight/src/main/interface/cli.c ****         }
1910:../cleanflight/src/main/interface/cli.c **** 
1911:../cleanflight/src/main/interface/cli.c ****         if (args[SERVO] >= 0 && args[SERVO] < MAX_SUPPORTED_SERVOS
 9528              	 .loc 13 1911 0
 9529 01fc 7B69     	 ldr r3,[r7,#20]
 9530 01fe 002B     	 cmp r3,#0
 9531 0200 2FDB     	 blt .L566
 9532              	 .loc 13 1911 0 is_stmt 0 discriminator 1
 9533 0202 7B69     	 ldr r3,[r7,#20]
 9534 0204 072B     	 cmp r3,#7
 9535 0206 2CDC     	 bgt .L566
1912:../cleanflight/src/main/interface/cli.c ****                 && args[INPUT] >= 0 && args[INPUT] < INPUT_SOURCE_COUNT
 9536              	 .loc 13 1912 0 is_stmt 1
 9537 0208 BB69     	 ldr r3,[r7,#24]
 9538 020a 002B     	 cmp r3,#0
 9539 020c 29DB     	 blt .L566
 9540              	 .loc 13 1912 0 is_stmt 0 discriminator 1
 9541 020e BB69     	 ldr r3,[r7,#24]
 9542 0210 0D2B     	 cmp r3,#13
 9543 0212 26DC     	 bgt .L566
1913:../cleanflight/src/main/interface/cli.c ****                 && (*ptr == 'r' || *ptr == 'n')) {
 9544              	 .loc 13 1913 0 is_stmt 1
 9545 0214 3B6D     	 ldr r3,[r7,#80]
 9546 0216 1B78     	 ldrb r3,[r3]
 9547 0218 722B     	 cmp r3,#114
 9548 021a 03D0     	 beq .L567
 9549              	 .loc 13 1913 0 is_stmt 0 discriminator 1
 9550 021c 3B6D     	 ldr r3,[r7,#80]
 9551 021e 1B78     	 ldrb r3,[r3]
 9552 0220 6E2B     	 cmp r3,#110
 9553 0222 1ED1     	 bne .L566
 9554              	.L567:
1914:../cleanflight/src/main/interface/cli.c ****             if (*ptr == 'r') {
 9555              	 .loc 13 1914 0 is_stmt 1
 9556 0224 3B6D     	 ldr r3,[r7,#80]
 9557 0226 1B78     	 ldrb r3,[r3]
 9558 0228 722B     	 cmp r3,#114
 9559 022a 0CD1     	 bne .L568
1915:../cleanflight/src/main/interface/cli.c ****                 servoParamsMutable(args[SERVO])->reversedSources |= 1 << args[INPUT];
 9560              	 .loc 13 1915 0
 9561 022c 7B69     	 ldr r3,[r7,#20]
 9562 022e 1846     	 mov r0,r3
 9563 0230 FFF7FEFF 	 bl servoParamsMutable
 9564 0234 0346     	 mov r3,r0
 9565 0236 1A68     	 ldr r2,[r3]
 9566 0238 B969     	 ldr r1,[r7,#24]
 9567 023a 0120     	 movs r0,#1
 9568 023c 00FA01F1 	 lsl r1,r0,r1
 9569 0240 0A43     	 orrs r2,r2,r1
 9570 0242 1A60     	 str r2,[r3]
1914:../cleanflight/src/main/interface/cli.c ****             if (*ptr == 'r') {
 9571              	 .loc 13 1914 0
 9572 0244 11E0     	 b .L570
 9573              	.L568:
1916:../cleanflight/src/main/interface/cli.c ****             } else {
1917:../cleanflight/src/main/interface/cli.c ****                 servoParamsMutable(args[SERVO])->reversedSources &= ~(1 << args[INPUT]);
 9574              	 .loc 13 1917 0
 9575 0246 7B69     	 ldr r3,[r7,#20]
 9576 0248 1846     	 mov r0,r3
 9577 024a FFF7FEFF 	 bl servoParamsMutable
 9578 024e 0346     	 mov r3,r0
 9579 0250 1A68     	 ldr r2,[r3]
 9580 0252 B969     	 ldr r1,[r7,#24]
 9581 0254 0120     	 movs r0,#1
 9582 0256 00FA01F1 	 lsl r1,r0,r1
 9583 025a C943     	 mvns r1,r1
 9584 025c 0A40     	 ands r2,r2,r1
 9585 025e 1A60     	 str r2,[r3]
1914:../cleanflight/src/main/interface/cli.c ****                 servoParamsMutable(args[SERVO])->reversedSources |= 1 << args[INPUT];
 9586              	 .loc 13 1914 0
 9587 0260 03E0     	 b .L570
 9588              	.L566:
1918:../cleanflight/src/main/interface/cli.c ****             }
1919:../cleanflight/src/main/interface/cli.c ****         } else {
1920:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
 9589              	 .loc 13 1920 0
 9590 0262 FFF7FEFF 	 bl cliShowParseError
1921:../cleanflight/src/main/interface/cli.c ****             return;
 9591              	 .loc 13 1921 0
 9592 0266 00BF     	 nop
 9593 0268 BAE0     	 b .L539
 9594              	.L570:
1922:../cleanflight/src/main/interface/cli.c ****         }
1923:../cleanflight/src/main/interface/cli.c **** 
1924:../cleanflight/src/main/interface/cli.c ****         cliServoMix("reverse");
 9595              	 .loc 13 1924 0 discriminator 3
 9596 026a 1E48     	 ldr r0,.L580+24
 9597 026c FFF7C8FE 	 bl cliServoMix
 9598              	.LBE64:
 9599 0270 B6E0     	 b .L539
 9600              	.L550:
 9601              	.LBB68:
1925:../cleanflight/src/main/interface/cli.c ****     } else {
1926:../cleanflight/src/main/interface/cli.c ****         enum {RULE = 0, TARGET, INPUT, RATE, SPEED, MIN, MAX, BOX, ARGS_COUNT};
1927:../cleanflight/src/main/interface/cli.c ****         char *saveptr;
1928:../cleanflight/src/main/interface/cli.c ****         char *ptr = strtok_r(cmdline, " ", &saveptr);
 9602              	 .loc 13 1928 0
 9603 0272 07F10C03 	 add r3,r7,#12
 9604 0276 7868     	 ldr r0,[r7,#4]
 9605 0278 2149     	 ldr r1,.L580+52
 9606 027a 1A46     	 mov r2,r3
 9607 027c FFF7FEFF 	 bl strtok_r
 9608 0280 3864     	 str r0,[r7,#64]
1929:../cleanflight/src/main/interface/cli.c ****         while (ptr != NULL && check < ARGS_COUNT) {
 9609              	 .loc 13 1929 0
 9610 0282 14E0     	 b .L572
 9611              	.L574:
1930:../cleanflight/src/main/interface/cli.c ****             args[check++] = atoi(ptr);
 9612              	 .loc 13 1930 0
 9613 0284 FC6D     	 ldr r4,[r7,#92]
 9614 0286 631C     	 adds r3,r4,#1
 9615 0288 FB65     	 str r3,[r7,#92]
 9616 028a 386C     	 ldr r0,[r7,#64]
 9617 028c FFF7FEFF 	 bl atoi
 9618 0290 0246     	 mov r2,r0
 9619 0292 A300     	 lsls r3,r4,#2
 9620 0294 07F16001 	 add r1,r7,#96
 9621 0298 0B44     	 add r3,r3,r1
 9622 029a 43F84C2C 	 str r2,[r3,#-76]
1931:../cleanflight/src/main/interface/cli.c ****             ptr = strtok_r(NULL, " ", &saveptr);
 9623              	 .loc 13 1931 0
 9624 029e 07F10C03 	 add r3,r7,#12
 9625 02a2 0020     	 movs r0,#0
 9626 02a4 1649     	 ldr r1,.L580+52
 9627 02a6 1A46     	 mov r2,r3
 9628 02a8 FFF7FEFF 	 bl strtok_r
 9629 02ac 3864     	 str r0,[r7,#64]
 9630              	.L572:
1929:../cleanflight/src/main/interface/cli.c ****         while (ptr != NULL && check < ARGS_COUNT) {
 9631              	 .loc 13 1929 0
 9632 02ae 3B6C     	 ldr r3,[r7,#64]
 9633 02b0 002B     	 cmp r3,#0
 9634 02b2 02D0     	 beq .L573
1929:../cleanflight/src/main/interface/cli.c ****         while (ptr != NULL && check < ARGS_COUNT) {
 9635              	 .loc 13 1929 0 is_stmt 0 discriminator 1
 9636 02b4 FB6D     	 ldr r3,[r7,#92]
 9637 02b6 072B     	 cmp r3,#7
 9638 02b8 E4DD     	 ble .L574
 9639              	.L573:
1932:../cleanflight/src/main/interface/cli.c ****         }
1933:../cleanflight/src/main/interface/cli.c **** 
1934:../cleanflight/src/main/interface/cli.c ****         if (ptr != NULL || check != ARGS_COUNT) {
 9640              	 .loc 13 1934 0 is_stmt 1
 9641 02ba 3B6C     	 ldr r3,[r7,#64]
 9642 02bc 002B     	 cmp r3,#0
 9643 02be 02D1     	 bne .L575
 9644              	 .loc 13 1934 0 is_stmt 0 discriminator 1
 9645 02c0 FB6D     	 ldr r3,[r7,#92]
 9646 02c2 082B     	 cmp r3,#8
 9647 02c4 1ED0     	 beq .L576
 9648              	.L575:
1935:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
 9649              	 .loc 13 1935 0 is_stmt 1
 9650 02c6 FFF7FEFF 	 bl cliShowParseError
 9651 02ca 89E0     	 b .L539
 9652              	.L581:
 9653              	 .align 2
 9654              	.L580:
 9655 02cc D4040000 	 .word .LC98
 9656 02d0 DC040000 	 .word .LC99
 9657 02d4 00000000 	 .word mixerNames
 9658 02d8 E4040000 	 .word .LC100
 9659 02dc F4040000 	 .word .LC101
 9660 02e0 04000000 	 .word .LC1
 9661 02e4 64050000 	 .word .LC106
 9662 02e8 6C050000 	 .word .LC107
 9663 02ec 70050000 	 .word .LC108
 9664 02f0 4C020000 	 .word .LC60
 9665 02f4 78050000 	 .word .LC109
 9666 02f8 7C050000 	 .word .LC110
 9667 02fc 80050000 	 .word .LC111
 9668 0300 84030000 	 .word .LC82
 9669              	.L576:
1936:../cleanflight/src/main/interface/cli.c ****             return;
1937:../cleanflight/src/main/interface/cli.c ****         }
1938:../cleanflight/src/main/interface/cli.c **** 
1939:../cleanflight/src/main/interface/cli.c ****         int32_t i = args[RULE];
 9670              	 .loc 13 1939 0
 9671 0304 7B69     	 ldr r3,[r7,#20]
 9672 0306 7B63     	 str r3,[r7,#52]
1940:../cleanflight/src/main/interface/cli.c ****         if (i >= 0 && i < MAX_SERVO_RULES &&
 9673              	 .loc 13 1940 0
 9674 0308 7B6B     	 ldr r3,[r7,#52]
 9675 030a 002B     	 cmp r3,#0
 9676 030c 66DB     	 blt .L577
 9677              	 .loc 13 1940 0 is_stmt 0 discriminator 1
 9678 030e 7B6B     	 ldr r3,[r7,#52]
 9679 0310 0F2B     	 cmp r3,#15
 9680 0312 63DC     	 bgt .L577
1941:../cleanflight/src/main/interface/cli.c ****             args[TARGET] >= 0 && args[TARGET] < MAX_SUPPORTED_SERVOS &&
 9681              	 .loc 13 1941 0 is_stmt 1 discriminator 2
 9682 0314 BB69     	 ldr r3,[r7,#24]
1940:../cleanflight/src/main/interface/cli.c ****         if (i >= 0 && i < MAX_SERVO_RULES &&
 9683              	 .loc 13 1940 0 discriminator 2
 9684 0316 002B     	 cmp r3,#0
 9685 0318 60DB     	 blt .L577
 9686              	 .loc 13 1941 0
 9687 031a BB69     	 ldr r3,[r7,#24]
 9688 031c 072B     	 cmp r3,#7
 9689 031e 5DDC     	 bgt .L577
1942:../cleanflight/src/main/interface/cli.c ****             args[INPUT] >= 0 && args[INPUT] < INPUT_SOURCE_COUNT &&
 9690              	 .loc 13 1942 0 discriminator 1
 9691 0320 FB69     	 ldr r3,[r7,#28]
1941:../cleanflight/src/main/interface/cli.c ****             args[TARGET] >= 0 && args[TARGET] < MAX_SUPPORTED_SERVOS &&
 9692              	 .loc 13 1941 0 discriminator 1
 9693 0322 002B     	 cmp r3,#0
 9694 0324 5ADB     	 blt .L577
 9695              	 .loc 13 1942 0
 9696 0326 FB69     	 ldr r3,[r7,#28]
 9697 0328 0D2B     	 cmp r3,#13
 9698 032a 57DC     	 bgt .L577
1943:../cleanflight/src/main/interface/cli.c ****             args[RATE] >= -100 && args[RATE] <= 100 &&
 9699              	 .loc 13 1943 0 discriminator 1
 9700 032c 3B6A     	 ldr r3,[r7,#32]
1942:../cleanflight/src/main/interface/cli.c ****             args[INPUT] >= 0 && args[INPUT] < INPUT_SOURCE_COUNT &&
 9701              	 .loc 13 1942 0 discriminator 1
 9702 032e 13F1640F 	 cmn r3,#100
 9703 0332 53DB     	 blt .L577
 9704              	 .loc 13 1943 0
 9705 0334 3B6A     	 ldr r3,[r7,#32]
 9706 0336 642B     	 cmp r3,#100
 9707 0338 50DC     	 bgt .L577
1944:../cleanflight/src/main/interface/cli.c ****             args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 9708              	 .loc 13 1944 0 discriminator 1
 9709 033a 7B6A     	 ldr r3,[r7,#36]
1943:../cleanflight/src/main/interface/cli.c ****             args[RATE] >= -100 && args[RATE] <= 100 &&
 9710              	 .loc 13 1943 0 discriminator 1
 9711 033c 002B     	 cmp r3,#0
 9712 033e 4DDB     	 blt .L577
 9713              	 .loc 13 1944 0
 9714 0340 7B6A     	 ldr r3,[r7,#36]
 9715 0342 FF2B     	 cmp r3,#255
 9716 0344 4ADC     	 bgt .L577
1945:../cleanflight/src/main/interface/cli.c ****             args[MIN] >= 0 && args[MIN] <= 100 &&
 9717              	 .loc 13 1945 0 discriminator 1
 9718 0346 BB6A     	 ldr r3,[r7,#40]
1944:../cleanflight/src/main/interface/cli.c ****             args[SPEED] >= 0 && args[SPEED] <= MAX_SERVO_SPEED &&
 9719              	 .loc 13 1944 0 discriminator 1
 9720 0348 002B     	 cmp r3,#0
 9721 034a 47DB     	 blt .L577
 9722              	 .loc 13 1945 0
 9723 034c BB6A     	 ldr r3,[r7,#40]
 9724 034e 642B     	 cmp r3,#100
 9725 0350 44DC     	 bgt .L577
1946:../cleanflight/src/main/interface/cli.c ****             args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 9726              	 .loc 13 1946 0 discriminator 1
 9727 0352 FB6A     	 ldr r3,[r7,#44]
1945:../cleanflight/src/main/interface/cli.c ****             args[MIN] >= 0 && args[MIN] <= 100 &&
 9728              	 .loc 13 1945 0 discriminator 1
 9729 0354 002B     	 cmp r3,#0
 9730 0356 41DB     	 blt .L577
 9731              	 .loc 13 1946 0
 9732 0358 FB6A     	 ldr r3,[r7,#44]
 9733 035a 642B     	 cmp r3,#100
 9734 035c 3EDC     	 bgt .L577
 9735              	 .loc 13 1946 0 is_stmt 0 discriminator 1
 9736 035e BA6A     	 ldr r2,[r7,#40]
 9737 0360 FB6A     	 ldr r3,[r7,#44]
 9738 0362 9A42     	 cmp r2,r3
 9739 0364 3ADA     	 bge .L577
1947:../cleanflight/src/main/interface/cli.c ****             args[BOX] >= 0 && args[BOX] <= MAX_SERVO_BOXES) {
 9740              	 .loc 13 1947 0 is_stmt 1 discriminator 2
 9741 0366 3B6B     	 ldr r3,[r7,#48]
1946:../cleanflight/src/main/interface/cli.c ****             args[MAX] >= 0 && args[MAX] <= 100 && args[MIN] < args[MAX] &&
 9742              	 .loc 13 1946 0 discriminator 2
 9743 0368 002B     	 cmp r3,#0
 9744 036a 37DB     	 blt .L577
 9745              	 .loc 13 1947 0
 9746 036c 3B6B     	 ldr r3,[r7,#48]
 9747 036e 032B     	 cmp r3,#3
 9748 0370 34DC     	 bgt .L577
1948:../cleanflight/src/main/interface/cli.c ****             customServoMixersMutable(i)->targetChannel = args[TARGET];
 9749              	 .loc 13 1948 0
 9750 0372 786B     	 ldr r0,[r7,#52]
 9751 0374 FFF7FEFF 	 bl customServoMixersMutable
 9752 0378 0346     	 mov r3,r0
 9753 037a BA69     	 ldr r2,[r7,#24]
 9754 037c D2B2     	 uxtb r2,r2
 9755 037e 1A70     	 strb r2,[r3]
1949:../cleanflight/src/main/interface/cli.c ****             customServoMixersMutable(i)->inputSource = args[INPUT];
 9756              	 .loc 13 1949 0
 9757 0380 786B     	 ldr r0,[r7,#52]
 9758 0382 FFF7FEFF 	 bl customServoMixersMutable
 9759 0386 0346     	 mov r3,r0
 9760 0388 FA69     	 ldr r2,[r7,#28]
 9761 038a D2B2     	 uxtb r2,r2
 9762 038c 5A70     	 strb r2,[r3,#1]
1950:../cleanflight/src/main/interface/cli.c ****             customServoMixersMutable(i)->rate = args[RATE];
 9763              	 .loc 13 1950 0
 9764 038e 786B     	 ldr r0,[r7,#52]
 9765 0390 FFF7FEFF 	 bl customServoMixersMutable
 9766 0394 0346     	 mov r3,r0
 9767 0396 3A6A     	 ldr r2,[r7,#32]
 9768 0398 D2B2     	 uxtb r2,r2
 9769 039a 9A70     	 strb r2,[r3,#2]
1951:../cleanflight/src/main/interface/cli.c ****             customServoMixersMutable(i)->speed = args[SPEED];
 9770              	 .loc 13 1951 0
 9771 039c 786B     	 ldr r0,[r7,#52]
 9772 039e FFF7FEFF 	 bl customServoMixersMutable
 9773 03a2 0346     	 mov r3,r0
 9774 03a4 7A6A     	 ldr r2,[r7,#36]
 9775 03a6 D2B2     	 uxtb r2,r2
 9776 03a8 DA70     	 strb r2,[r3,#3]
1952:../cleanflight/src/main/interface/cli.c ****             customServoMixersMutable(i)->min = args[MIN];
 9777              	 .loc 13 1952 0
 9778 03aa 786B     	 ldr r0,[r7,#52]
 9779 03ac FFF7FEFF 	 bl customServoMixersMutable
 9780 03b0 0346     	 mov r3,r0
 9781 03b2 BA6A     	 ldr r2,[r7,#40]
 9782 03b4 D2B2     	 uxtb r2,r2
 9783 03b6 1A71     	 strb r2,[r3,#4]
1953:../cleanflight/src/main/interface/cli.c ****             customServoMixersMutable(i)->max = args[MAX];
 9784              	 .loc 13 1953 0
 9785 03b8 786B     	 ldr r0,[r7,#52]
 9786 03ba FFF7FEFF 	 bl customServoMixersMutable
 9787 03be 0346     	 mov r3,r0
 9788 03c0 FA6A     	 ldr r2,[r7,#44]
 9789 03c2 D2B2     	 uxtb r2,r2
 9790 03c4 5A71     	 strb r2,[r3,#5]
1954:../cleanflight/src/main/interface/cli.c ****             customServoMixersMutable(i)->box = args[BOX];
 9791              	 .loc 13 1954 0
 9792 03c6 786B     	 ldr r0,[r7,#52]
 9793 03c8 FFF7FEFF 	 bl customServoMixersMutable
 9794 03cc 0346     	 mov r3,r0
 9795 03ce 3A6B     	 ldr r2,[r7,#48]
 9796 03d0 D2B2     	 uxtb r2,r2
 9797 03d2 9A71     	 strb r2,[r3,#6]
1955:../cleanflight/src/main/interface/cli.c ****             cliServoMix("");
 9798              	 .loc 13 1955 0
 9799 03d4 0448     	 ldr r0,.L582
 9800 03d6 FFF713FE 	 bl cliServoMix
 9801 03da 01E0     	 b .L539
 9802              	.L577:
1956:../cleanflight/src/main/interface/cli.c ****         } else {
1957:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
 9803              	 .loc 13 1957 0
 9804 03dc FFF7FEFF 	 bl cliShowParseError
 9805              	.L539:
 9806              	.LBE68:
1958:../cleanflight/src/main/interface/cli.c ****         }
1959:../cleanflight/src/main/interface/cli.c ****     }
1960:../cleanflight/src/main/interface/cli.c **** }
 9807              	 .loc 13 1960 0
 9808 03e0 6437     	 adds r7,r7,#100
 9809              	.LCFI409:
 9810              	 .cfi_def_cfa_offset 12
 9811 03e2 BD46     	 mov sp,r7
 9812              	.LCFI410:
 9813              	 .cfi_def_cfa_register 13
 9814              	 
 9815 03e4 90BD     	 pop {r4,r7,pc}
 9816              	.L583:
 9817 03e6 00BF     	 .align 2
 9818              	.L582:
 9819 03e8 04000000 	 .word .LC1
 9820              	 .cfi_endproc
 9821              	.LFE740:
 9823              	 .section .text.cliWriteBytes,"ax",%progbits
 9824              	 .align 2
 9825              	 .thumb
 9826              	 .thumb_func
 9828              	cliWriteBytes:
 9829              	.LFB741:
1961:../cleanflight/src/main/interface/cli.c **** #endif
1962:../cleanflight/src/main/interface/cli.c **** 
1963:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SDCARD
1964:../cleanflight/src/main/interface/cli.c **** 
1965:../cleanflight/src/main/interface/cli.c **** static void cliWriteBytes(const uint8_t *buffer, int count)
1966:../cleanflight/src/main/interface/cli.c **** {
 9830              	 .loc 13 1966 0
 9831              	 .cfi_startproc
 9832              	 
 9833              	 
 9834 0000 80B5     	 push {r7,lr}
 9835              	.LCFI411:
 9836              	 .cfi_def_cfa_offset 8
 9837              	 .cfi_offset 7,-8
 9838              	 .cfi_offset 14,-4
 9839 0002 82B0     	 sub sp,sp,#8
 9840              	.LCFI412:
 9841              	 .cfi_def_cfa_offset 16
 9842 0004 00AF     	 add r7,sp,#0
 9843              	.LCFI413:
 9844              	 .cfi_def_cfa_register 7
 9845 0006 7860     	 str r0,[r7,#4]
 9846 0008 3960     	 str r1,[r7]
1967:../cleanflight/src/main/interface/cli.c ****     while (count > 0) {
 9847              	 .loc 13 1967 0
 9848 000a 0AE0     	 b .L585
 9849              	.L586:
1968:../cleanflight/src/main/interface/cli.c ****         cliWrite(*buffer);
 9850              	 .loc 13 1968 0
 9851 000c 7B68     	 ldr r3,[r7,#4]
 9852 000e 1B78     	 ldrb r3,[r3]
 9853 0010 1846     	 mov r0,r3
 9854 0012 FFF7FEFF 	 bl cliWrite
1969:../cleanflight/src/main/interface/cli.c ****         buffer++;
 9855              	 .loc 13 1969 0
 9856 0016 7B68     	 ldr r3,[r7,#4]
 9857 0018 0133     	 adds r3,r3,#1
 9858 001a 7B60     	 str r3,[r7,#4]
1970:../cleanflight/src/main/interface/cli.c ****         count--;
 9859              	 .loc 13 1970 0
 9860 001c 3B68     	 ldr r3,[r7]
 9861 001e 013B     	 subs r3,r3,#1
 9862 0020 3B60     	 str r3,[r7]
 9863              	.L585:
1967:../cleanflight/src/main/interface/cli.c ****         cliWrite(*buffer);
 9864              	 .loc 13 1967 0
 9865 0022 3B68     	 ldr r3,[r7]
 9866 0024 002B     	 cmp r3,#0
 9867 0026 F1DC     	 bgt .L586
1971:../cleanflight/src/main/interface/cli.c ****     }
1972:../cleanflight/src/main/interface/cli.c **** }
 9868              	 .loc 13 1972 0
 9869 0028 0837     	 adds r7,r7,#8
 9870              	.LCFI414:
 9871              	 .cfi_def_cfa_offset 8
 9872 002a BD46     	 mov sp,r7
 9873              	.LCFI415:
 9874              	 .cfi_def_cfa_register 13
 9875              	 
 9876 002c 80BD     	 pop {r7,pc}
 9877              	 .cfi_endproc
 9878              	.LFE741:
 9880 002e 00BF     	 .section .rodata
 9881 0586 0000     	 .align 2
 9882              	.LC112:
 9883 0588 53442063 	 .ascii "SD card: \000"
 9883      6172643A 
 9883      2000
 9884 0592 0000     	 .align 2
 9885              	.LC113:
 9886 0594 4E6F6E65 	 .ascii "None inserted\000"
 9886      20696E73 
 9886      65727465 
 9886      6400
 9887 05a2 0000     	 .align 2
 9888              	.LC114:
 9889 05a4 53746172 	 .ascii "Startup failed\000"
 9889      74757020 
 9889      6661696C 
 9889      656400
 9890 05b3 00       	 .align 2
 9891              	.LC115:
 9892 05b4 4D616E75 	 .ascii "Manufacturer 0x%x, %ukB, %02d/%04d, v%d.%d, '\000"
 9892      66616374 
 9892      75726572 
 9892      20307825 
 9892      782C2025 
 9893 05e2 0000     	 .align 2
 9894              	.LC116:
 9895 05e4 270D0A46 	 .ascii "'\015\012Filesystem: \000"
 9895      696C6573 
 9895      79737465 
 9895      6D3A2000 
 9896              	 .align 2
 9897              	.LC117:
 9898 05f4 52656164 	 .ascii "Ready\000"
 9898      7900
 9899 05fa 0000     	 .align 2
 9900              	.LC118:
 9901 05fc 496E6974 	 .ascii "Initializing\000"
 9901      69616C69 
 9901      7A696E67 
 9901      00
 9902 0609 000000   	 .align 2
 9903              	.LC119:
 9904 060c 46617461 	 .ascii "Fatal\000"
 9904      6C00
 9905 0612 0000     	 .align 2
 9906              	.LC120:
 9907 0614 202D206E 	 .ascii " - no FAT MBR partitions\000"
 9907      6F204641 
 9907      54204D42 
 9907      52207061 
 9907      72746974 
 9908 062d 000000   	 .align 2
 9909              	.LC121:
 9910 0630 202D2062 	 .ascii " - bad FAT header\000"
 9910      61642046 
 9910      41542068 
 9910      65616465 
 9910      7200
 9911              	 .section .text.cliSdInfo,"ax",%progbits
 9912              	 .align 2
 9913              	 .thumb
 9914              	 .thumb_func
 9916              	cliSdInfo:
 9917              	.LFB742:
1973:../cleanflight/src/main/interface/cli.c **** 
1974:../cleanflight/src/main/interface/cli.c **** static void cliSdInfo(char *cmdline)
1975:../cleanflight/src/main/interface/cli.c **** {
 9918              	 .loc 13 1975 0
 9919              	 .cfi_startproc
 9920              	 
 9921              	 
 9922 0000 B0B5     	 push {r4,r5,r7,lr}
 9923              	.LCFI416:
 9924              	 .cfi_def_cfa_offset 16
 9925              	 .cfi_offset 4,-16
 9926              	 .cfi_offset 5,-12
 9927              	 .cfi_offset 7,-8
 9928              	 .cfi_offset 14,-4
 9929 0002 88B0     	 sub sp,sp,#32
 9930              	.LCFI417:
 9931              	 .cfi_def_cfa_offset 48
 9932 0004 04AF     	 add r7,sp,#16
 9933              	.LCFI418:
 9934              	 .cfi_def_cfa 7,32
 9935 0006 7860     	 str r0,[r7,#4]
1976:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
1977:../cleanflight/src/main/interface/cli.c **** 
1978:../cleanflight/src/main/interface/cli.c ****     cliPrint("SD card: ");
 9936              	 .loc 13 1978 0
 9937 0008 3E48     	 ldr r0,.L603
 9938 000a FFF7FEFF 	 bl cliPrint
1979:../cleanflight/src/main/interface/cli.c **** 
1980:../cleanflight/src/main/interface/cli.c ****     if (!sdcard_isInserted()) {
 9939              	 .loc 13 1980 0
 9940 000e FFF7FEFF 	 bl sdcard_isInserted
 9941 0012 0346     	 mov r3,r0
 9942 0014 83F00103 	 eor r3,r3,#1
 9943 0018 DBB2     	 uxtb r3,r3
 9944 001a 002B     	 cmp r3,#0
 9945 001c 03D0     	 beq .L588
1981:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("None inserted");
 9946              	 .loc 13 1981 0
 9947 001e 3A48     	 ldr r0,.L603+4
 9948 0020 FFF7FEFF 	 bl cliPrintLine
1982:../cleanflight/src/main/interface/cli.c ****         return;
 9949              	 .loc 13 1982 0
 9950 0024 6AE0     	 b .L587
 9951              	.L588:
1983:../cleanflight/src/main/interface/cli.c ****     }
1984:../cleanflight/src/main/interface/cli.c **** 
1985:../cleanflight/src/main/interface/cli.c ****     if (!sdcard_isInitialized()) {
 9952              	 .loc 13 1985 0
 9953 0026 FFF7FEFF 	 bl sdcard_isInitialized
 9954 002a 0346     	 mov r3,r0
 9955 002c 83F00103 	 eor r3,r3,#1
 9956 0030 DBB2     	 uxtb r3,r3
 9957 0032 002B     	 cmp r3,#0
 9958 0034 03D0     	 beq .L590
1986:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("Startup failed");
 9959              	 .loc 13 1986 0
 9960 0036 3548     	 ldr r0,.L603+8
 9961 0038 FFF7FEFF 	 bl cliPrintLine
1987:../cleanflight/src/main/interface/cli.c ****         return;
 9962              	 .loc 13 1987 0
 9963 003c 5EE0     	 b .L587
 9964              	.L590:
1988:../cleanflight/src/main/interface/cli.c ****     }
1989:../cleanflight/src/main/interface/cli.c **** 
1990:../cleanflight/src/main/interface/cli.c ****     const sdcardMetadata_t *metadata = sdcard_getMetadata();
 9965              	 .loc 13 1990 0
 9966 003e FFF7FEFF 	 bl sdcard_getMetadata
 9967 0042 F860     	 str r0,[r7,#12]
1991:../cleanflight/src/main/interface/cli.c **** 
1992:../cleanflight/src/main/interface/cli.c ****     cliPrintf("Manufacturer 0x%x, %ukB, %02d/%04d, v%d.%d, '",
1993:../cleanflight/src/main/interface/cli.c ****         metadata->manufacturerID,
 9968              	 .loc 13 1993 0
 9969 0044 FB68     	 ldr r3,[r7,#12]
 9970 0046 9B79     	 ldrb r3,[r3,#6]
1992:../cleanflight/src/main/interface/cli.c ****         metadata->manufacturerID,
 9971              	 .loc 13 1992 0
 9972 0048 1D46     	 mov r5,r3
1994:../cleanflight/src/main/interface/cli.c ****         metadata->numBlocks / 2, /* One block is half a kB */
 9973              	 .loc 13 1994 0
 9974 004a FB68     	 ldr r3,[r7,#12]
 9975 004c 1B68     	 ldr r3,[r3]
1992:../cleanflight/src/main/interface/cli.c ****         metadata->manufacturerID,
 9976              	 .loc 13 1992 0
 9977 004e 5A08     	 lsrs r2,r3,#1
1995:../cleanflight/src/main/interface/cli.c ****         metadata->productionMonth,
 9978              	 .loc 13 1995 0
 9979 0050 FB68     	 ldr r3,[r7,#12]
 9980 0052 1B7D     	 ldrb r3,[r3,#20]
1992:../cleanflight/src/main/interface/cli.c ****         metadata->manufacturerID,
 9981              	 .loc 13 1992 0
 9982 0054 1C46     	 mov r4,r3
1996:../cleanflight/src/main/interface/cli.c ****         metadata->productionYear,
 9983              	 .loc 13 1996 0
 9984 0056 FB68     	 ldr r3,[r7,#12]
 9985 0058 5B8A     	 ldrh r3,[r3,#18]
 9986 005a 9BB2     	 uxth r3,r3
1992:../cleanflight/src/main/interface/cli.c ****         metadata->manufacturerID,
 9987              	 .loc 13 1992 0
 9988 005c 1846     	 mov r0,r3
1997:../cleanflight/src/main/interface/cli.c ****         metadata->productRevisionMajor,
 9989              	 .loc 13 1997 0
 9990 005e FB68     	 ldr r3,[r7,#12]
 9991 0060 1B7C     	 ldrb r3,[r3,#16]
1992:../cleanflight/src/main/interface/cli.c ****         metadata->manufacturerID,
 9992              	 .loc 13 1992 0
 9993 0062 1946     	 mov r1,r3
1998:../cleanflight/src/main/interface/cli.c ****         metadata->productRevisionMinor
 9994              	 .loc 13 1998 0
 9995 0064 FB68     	 ldr r3,[r7,#12]
 9996 0066 5B7C     	 ldrb r3,[r3,#17]
1992:../cleanflight/src/main/interface/cli.c ****         metadata->manufacturerID,
 9997              	 .loc 13 1992 0
 9998 0068 0090     	 str r0,[sp]
 9999 006a 0191     	 str r1,[sp,#4]
 10000 006c 0293     	 str r3,[sp,#8]
 10001 006e 2848     	 ldr r0,.L603+12
 10002 0070 2946     	 mov r1,r5
 10003 0072 2346     	 mov r3,r4
 10004 0074 FFF7FEFF 	 bl cliPrintf
1999:../cleanflight/src/main/interface/cli.c ****     );
2000:../cleanflight/src/main/interface/cli.c **** 
2001:../cleanflight/src/main/interface/cli.c ****     cliWriteBytes((uint8_t*)metadata->productName, sizeof(metadata->productName));
 10005              	 .loc 13 2001 0
 10006 0078 FB68     	 ldr r3,[r7,#12]
 10007 007a 0733     	 adds r3,r3,#7
 10008 007c 1846     	 mov r0,r3
 10009 007e 0521     	 movs r1,#5
 10010 0080 FFF7FEFF 	 bl cliWriteBytes
2002:../cleanflight/src/main/interface/cli.c **** 
2003:../cleanflight/src/main/interface/cli.c ****     cliPrint("'\r\n" "Filesystem: ");
 10011              	 .loc 13 2003 0
 10012 0084 2348     	 ldr r0,.L603+16
 10013 0086 FFF7FEFF 	 bl cliPrint
2004:../cleanflight/src/main/interface/cli.c **** 
2005:../cleanflight/src/main/interface/cli.c ****     switch (afatfs_getFilesystemState()) {
 10014              	 .loc 13 2005 0
 10015 008a FFF7FEFF 	 bl afatfs_getFilesystemState
 10016 008e 0346     	 mov r3,r0
 10017 0090 032B     	 cmp r3,#3
 10018 0092 31D8     	 bhi .L591
 10019 0094 01A2     	 adr r2,.L593
 10020 0096 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 10021 009a 00BF     	 .p2align 2
 10022              	.L593:
 10023 009c BD000000 	 .word .L592+1
 10024 00a0 BD000000 	 .word .L592+1
 10025 00a4 B5000000 	 .word .L594+1
 10026 00a8 AD000000 	 .word .L595+1
 10027              	 .p2align 1
 10028              	.L595:
2006:../cleanflight/src/main/interface/cli.c ****     case AFATFS_FILESYSTEM_STATE_READY:
2007:../cleanflight/src/main/interface/cli.c ****         cliPrint("Ready");
 10029              	 .loc 13 2007 0
 10030 00ac 1A48     	 ldr r0,.L603+20
 10031 00ae FFF7FEFF 	 bl cliPrint
2008:../cleanflight/src/main/interface/cli.c ****         break;
 10032              	 .loc 13 2008 0
 10033 00b2 21E0     	 b .L591
 10034              	.L594:
2009:../cleanflight/src/main/interface/cli.c ****     case AFATFS_FILESYSTEM_STATE_INITIALIZATION:
2010:../cleanflight/src/main/interface/cli.c ****         cliPrint("Initializing");
 10035              	 .loc 13 2010 0
 10036 00b4 1948     	 ldr r0,.L603+24
 10037 00b6 FFF7FEFF 	 bl cliPrint
2011:../cleanflight/src/main/interface/cli.c ****         break;
 10038              	 .loc 13 2011 0
 10039 00ba 1DE0     	 b .L591
 10040              	.L592:
2012:../cleanflight/src/main/interface/cli.c ****     case AFATFS_FILESYSTEM_STATE_UNKNOWN:
2013:../cleanflight/src/main/interface/cli.c ****     case AFATFS_FILESYSTEM_STATE_FATAL:
2014:../cleanflight/src/main/interface/cli.c ****         cliPrint("Fatal");
 10041              	 .loc 13 2014 0
 10042 00bc 1848     	 ldr r0,.L603+28
 10043 00be FFF7FEFF 	 bl cliPrint
2015:../cleanflight/src/main/interface/cli.c **** 
2016:../cleanflight/src/main/interface/cli.c ****         switch (afatfs_getLastError()) {
 10044              	 .loc 13 2016 0
 10045 00c2 FFF7FEFF 	 bl afatfs_getLastError
 10046 00c6 0346     	 mov r3,r0
 10047 00c8 032B     	 cmp r3,#3
 10048 00ca 14D8     	 bhi .L601
 10049 00cc 01A2     	 adr r2,.L598
 10050 00ce 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 10051 00d2 00BF     	 .p2align 2
 10052              	.L598:
 10053 00d4 F5000000 	 .word .L602+1
 10054 00d8 F5000000 	 .word .L602+1
 10055 00dc E5000000 	 .word .L599+1
 10056 00e0 ED000000 	 .word .L600+1
 10057              	 .p2align 1
 10058              	.L599:
2017:../cleanflight/src/main/interface/cli.c ****         case AFATFS_ERROR_BAD_MBR:
2018:../cleanflight/src/main/interface/cli.c ****             cliPrint(" - no FAT MBR partitions");
 10059              	 .loc 13 2018 0
 10060 00e4 0F48     	 ldr r0,.L603+32
 10061 00e6 FFF7FEFF 	 bl cliPrint
2019:../cleanflight/src/main/interface/cli.c ****             break;
 10062              	 .loc 13 2019 0
 10063 00ea 04E0     	 b .L596
 10064              	.L600:
2020:../cleanflight/src/main/interface/cli.c ****         case AFATFS_ERROR_BAD_FILESYSTEM_HEADER:
2021:../cleanflight/src/main/interface/cli.c ****             cliPrint(" - bad FAT header");
 10065              	 .loc 13 2021 0
 10066 00ec 0E48     	 ldr r0,.L603+36
 10067 00ee FFF7FEFF 	 bl cliPrint
2022:../cleanflight/src/main/interface/cli.c ****             break;
 10068              	 .loc 13 2022 0
 10069 00f2 00E0     	 b .L596
 10070              	.L602:
2023:../cleanflight/src/main/interface/cli.c ****         case AFATFS_ERROR_GENERIC:
2024:../cleanflight/src/main/interface/cli.c ****         case AFATFS_ERROR_NONE:
2025:../cleanflight/src/main/interface/cli.c ****             ; // Nothing more detailed to print
2026:../cleanflight/src/main/interface/cli.c ****             break;
 10071              	 .loc 13 2026 0
 10072 00f4 00BF     	 nop
 10073              	.L596:
 10074              	.L601:
2027:../cleanflight/src/main/interface/cli.c ****         }
2028:../cleanflight/src/main/interface/cli.c ****         break;
 10075              	 .loc 13 2028 0
 10076 00f6 00BF     	 nop
 10077              	.L591:
2029:../cleanflight/src/main/interface/cli.c ****     }
2030:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 10078              	 .loc 13 2030 0
 10079 00f8 FFF7FEFF 	 bl cliPrintLinefeed
 10080              	.L587:
2031:../cleanflight/src/main/interface/cli.c **** }
 10081              	 .loc 13 2031 0
 10082 00fc 1037     	 adds r7,r7,#16
 10083              	.LCFI419:
 10084              	 .cfi_def_cfa_offset 16
 10085 00fe BD46     	 mov sp,r7
 10086              	.LCFI420:
 10087              	 .cfi_def_cfa_register 13
 10088              	 
 10089 0100 B0BD     	 pop {r4,r5,r7,pc}
 10090              	.L604:
 10091 0102 00BF     	 .align 2
 10092              	.L603:
 10093 0104 88050000 	 .word .LC112
 10094 0108 94050000 	 .word .LC113
 10095 010c A4050000 	 .word .LC114
 10096 0110 B4050000 	 .word .LC115
 10097 0114 E4050000 	 .word .LC116
 10098 0118 F4050000 	 .word .LC117
 10099 011c FC050000 	 .word .LC118
 10100 0120 0C060000 	 .word .LC119
 10101 0124 14060000 	 .word .LC120
 10102 0128 30060000 	 .word .LC121
 10103              	 .cfi_endproc
 10104              	.LFE742:
 10106              	 .section .rodata
 10107 0642 0000     	 .align 2
 10108              	.LC122:
 10109 0644 76747820 	 .ascii "vtx %u %u %u %u %u %u\000"
 10109      25752025 
 10109      75202575 
 10109      20257520 
 10109      25752025 
 10110              	 .section .text.printVtx,"ax",%progbits
 10111              	 .align 2
 10112              	 .thumb
 10113              	 .thumb_func
 10115              	printVtx:
 10116              	.LFB743:
2032:../cleanflight/src/main/interface/cli.c **** 
2033:../cleanflight/src/main/interface/cli.c **** #endif
2034:../cleanflight/src/main/interface/cli.c **** 
2035:../cleanflight/src/main/interface/cli.c **** #ifdef USE_FLASHFS
2036:../cleanflight/src/main/interface/cli.c **** 
2037:../cleanflight/src/main/interface/cli.c **** static void cliFlashInfo(char *cmdline)
2038:../cleanflight/src/main/interface/cli.c **** {
2039:../cleanflight/src/main/interface/cli.c ****     const flashGeometry_t *layout = flashfsGetGeometry();
2040:../cleanflight/src/main/interface/cli.c **** 
2041:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
2042:../cleanflight/src/main/interface/cli.c **** 
2043:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("Flash sectors=%u, sectorSize=%u, pagesPerSector=%u, pageSize=%u, totalSize=%u, u
2044:../cleanflight/src/main/interface/cli.c ****             layout->sectors, layout->sectorSize, layout->pagesPerSector, layout->pageSize, layout->
2045:../cleanflight/src/main/interface/cli.c **** }
2046:../cleanflight/src/main/interface/cli.c **** 
2047:../cleanflight/src/main/interface/cli.c **** 
2048:../cleanflight/src/main/interface/cli.c **** static void cliFlashErase(char *cmdline)
2049:../cleanflight/src/main/interface/cli.c **** {
2050:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
2051:../cleanflight/src/main/interface/cli.c **** 
2052:../cleanflight/src/main/interface/cli.c ****     if (!flashfsIsSupported()) {
2053:../cleanflight/src/main/interface/cli.c ****         return;
2054:../cleanflight/src/main/interface/cli.c ****     }
2055:../cleanflight/src/main/interface/cli.c **** 
2056:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
2057:../cleanflight/src/main/interface/cli.c ****     uint32_t i = 0;
2058:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("Erasing, please wait ... ");
2059:../cleanflight/src/main/interface/cli.c **** #else
2060:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("Erasing,");
2061:../cleanflight/src/main/interface/cli.c **** #endif
2062:../cleanflight/src/main/interface/cli.c **** 
2063:../cleanflight/src/main/interface/cli.c ****     bufWriterFlush(cliWriter);
2064:../cleanflight/src/main/interface/cli.c ****     flashfsEraseCompletely();
2065:../cleanflight/src/main/interface/cli.c **** 
2066:../cleanflight/src/main/interface/cli.c ****     while (!flashfsIsReady()) {
2067:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
2068:../cleanflight/src/main/interface/cli.c ****         cliPrintf(".");
2069:../cleanflight/src/main/interface/cli.c ****         if (i++ > 120) {
2070:../cleanflight/src/main/interface/cli.c ****             i=0;
2071:../cleanflight/src/main/interface/cli.c ****             cliPrintLinefeed();
2072:../cleanflight/src/main/interface/cli.c ****         }
2073:../cleanflight/src/main/interface/cli.c **** 
2074:../cleanflight/src/main/interface/cli.c ****         bufWriterFlush(cliWriter);
2075:../cleanflight/src/main/interface/cli.c **** #endif
2076:../cleanflight/src/main/interface/cli.c ****         delay(100);
2077:../cleanflight/src/main/interface/cli.c ****     }
2078:../cleanflight/src/main/interface/cli.c ****     beeper(BEEPER_BLACKBOX_ERASE);
2079:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
2080:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("Done.");
2081:../cleanflight/src/main/interface/cli.c **** }
2082:../cleanflight/src/main/interface/cli.c **** 
2083:../cleanflight/src/main/interface/cli.c **** #ifdef USE_FLASH_TOOLS
2084:../cleanflight/src/main/interface/cli.c **** 
2085:../cleanflight/src/main/interface/cli.c **** static void cliFlashWrite(char *cmdline)
2086:../cleanflight/src/main/interface/cli.c **** {
2087:../cleanflight/src/main/interface/cli.c ****     const uint32_t address = atoi(cmdline);
2088:../cleanflight/src/main/interface/cli.c ****     const char *text = strchr(cmdline, ' ');
2089:../cleanflight/src/main/interface/cli.c **** 
2090:../cleanflight/src/main/interface/cli.c ****     if (!text) {
2091:../cleanflight/src/main/interface/cli.c ****         cliShowParseError();
2092:../cleanflight/src/main/interface/cli.c ****     } else {
2093:../cleanflight/src/main/interface/cli.c ****         flashfsSeekAbs(address);
2094:../cleanflight/src/main/interface/cli.c ****         flashfsWrite((uint8_t*)text, strlen(text), true);
2095:../cleanflight/src/main/interface/cli.c ****         flashfsFlushSync();
2096:../cleanflight/src/main/interface/cli.c **** 
2097:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Wrote %u bytes at %u.", strlen(text), address);
2098:../cleanflight/src/main/interface/cli.c ****     }
2099:../cleanflight/src/main/interface/cli.c **** }
2100:../cleanflight/src/main/interface/cli.c **** 
2101:../cleanflight/src/main/interface/cli.c **** static void cliFlashRead(char *cmdline)
2102:../cleanflight/src/main/interface/cli.c **** {
2103:../cleanflight/src/main/interface/cli.c ****     uint32_t address = atoi(cmdline);
2104:../cleanflight/src/main/interface/cli.c **** 
2105:../cleanflight/src/main/interface/cli.c ****     const char *nextArg = strchr(cmdline, ' ');
2106:../cleanflight/src/main/interface/cli.c **** 
2107:../cleanflight/src/main/interface/cli.c ****     if (!nextArg) {
2108:../cleanflight/src/main/interface/cli.c ****         cliShowParseError();
2109:../cleanflight/src/main/interface/cli.c ****     } else {
2110:../cleanflight/src/main/interface/cli.c ****         uint32_t length = atoi(nextArg);
2111:../cleanflight/src/main/interface/cli.c **** 
2112:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Reading %u bytes at %u:", length, address);
2113:../cleanflight/src/main/interface/cli.c **** 
2114:../cleanflight/src/main/interface/cli.c ****         uint8_t buffer[32];
2115:../cleanflight/src/main/interface/cli.c ****         while (length > 0) {
2116:../cleanflight/src/main/interface/cli.c ****             int bytesRead = flashfsReadAbs(address, buffer, length < sizeof(buffer) ? length : size
2117:../cleanflight/src/main/interface/cli.c **** 
2118:../cleanflight/src/main/interface/cli.c ****             for (int i = 0; i < bytesRead; i++) {
2119:../cleanflight/src/main/interface/cli.c ****                 cliWrite(buffer[i]);
2120:../cleanflight/src/main/interface/cli.c ****             }
2121:../cleanflight/src/main/interface/cli.c **** 
2122:../cleanflight/src/main/interface/cli.c ****             length -= bytesRead;
2123:../cleanflight/src/main/interface/cli.c ****             address += bytesRead;
2124:../cleanflight/src/main/interface/cli.c **** 
2125:../cleanflight/src/main/interface/cli.c ****             if (bytesRead == 0) {
2126:../cleanflight/src/main/interface/cli.c ****                 //Assume we reached the end of the volume or something fatal happened
2127:../cleanflight/src/main/interface/cli.c ****                 break;
2128:../cleanflight/src/main/interface/cli.c ****             }
2129:../cleanflight/src/main/interface/cli.c ****         }
2130:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
2131:../cleanflight/src/main/interface/cli.c ****     }
2132:../cleanflight/src/main/interface/cli.c **** }
2133:../cleanflight/src/main/interface/cli.c **** 
2134:../cleanflight/src/main/interface/cli.c **** #endif
2135:../cleanflight/src/main/interface/cli.c **** #endif
2136:../cleanflight/src/main/interface/cli.c **** 
2137:../cleanflight/src/main/interface/cli.c **** #ifdef USE_VTX_CONTROL
2138:../cleanflight/src/main/interface/cli.c **** static void printVtx(uint8_t dumpMask, const vtxConfig_t *vtxConfig, const vtxConfig_t *vtxConfigDe
2139:../cleanflight/src/main/interface/cli.c **** {
 10117              	 .loc 13 2139 0
 10118              	 .cfi_startproc
 10119              	 
 10120              	 
 10121 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 10122              	.LCFI421:
 10123              	 .cfi_def_cfa_offset 20
 10124              	 .cfi_offset 4,-20
 10125              	 .cfi_offset 5,-16
 10126              	 .cfi_offset 6,-12
 10127              	 .cfi_offset 7,-8
 10128              	 .cfi_offset 14,-4
 10129 0002 91B0     	 sub sp,sp,#68
 10130              	.LCFI422:
 10131              	 .cfi_def_cfa_offset 88
 10132 0004 06AF     	 add r7,sp,#24
 10133              	.LCFI423:
 10134              	 .cfi_def_cfa 7,64
 10135 0006 0346     	 mov r3,r0
 10136 0008 B960     	 str r1,[r7,#8]
 10137 000a 7A60     	 str r2,[r7,#4]
 10138 000c FB73     	 strb r3,[r7,#15]
2140:../cleanflight/src/main/interface/cli.c ****     // print out vtx channel settings
2141:../cleanflight/src/main/interface/cli.c ****     const char *format = "vtx %u %u %u %u %u %u";
 10139              	 .loc 13 2141 0
 10140 000e 404B     	 ldr r3,.L609
 10141 0010 FB61     	 str r3,[r7,#28]
2142:../cleanflight/src/main/interface/cli.c ****     bool equalsDefault = false;
 10142              	 .loc 13 2142 0
 10143 0012 0023     	 movs r3,#0
 10144 0014 87F82730 	 strb r3,[r7,#39]
 10145              	.LBB69:
2143:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < MAX_CHANNEL_ACTIVATION_CONDITION_COUNT; i++) {
 10146              	 .loc 13 2143 0
 10147 0018 0023     	 movs r3,#0
 10148 001a 3B62     	 str r3,[r7,#32]
 10149 001c 71E0     	 b .L606
 10150              	.L608:
 10151              	.LBB70:
2144:../cleanflight/src/main/interface/cli.c ****         const vtxChannelActivationCondition_t *cac = &vtxConfig->vtxChannelActivationConditions[i];
 10152              	 .loc 13 2144 0
 10153 001e 3A6A     	 ldr r2,[r7,#32]
 10154 0020 1346     	 mov r3,r2
 10155 0022 9B00     	 lsls r3,r3,#2
 10156 0024 1344     	 add r3,r3,r2
 10157 0026 BA68     	 ldr r2,[r7,#8]
 10158 0028 1344     	 add r3,r3,r2
 10159 002a BB61     	 str r3,[r7,#24]
2145:../cleanflight/src/main/interface/cli.c ****         if (vtxConfigDefault) {
 10160              	 .loc 13 2145 0
 10161 002c 7B68     	 ldr r3,[r7,#4]
 10162 002e 002B     	 cmp r3,#0
 10163 0030 3BD0     	 beq .L607
 10164              	.LBB71:
2146:../cleanflight/src/main/interface/cli.c ****             const vtxChannelActivationCondition_t *cacDefault = &vtxConfigDefault->vtxChannelActiva
 10165              	 .loc 13 2146 0
 10166 0032 3A6A     	 ldr r2,[r7,#32]
 10167 0034 1346     	 mov r3,r2
 10168 0036 9B00     	 lsls r3,r3,#2
 10169 0038 1344     	 add r3,r3,r2
 10170 003a 7A68     	 ldr r2,[r7,#4]
 10171 003c 1344     	 add r3,r3,r2
 10172 003e 7B61     	 str r3,[r7,#20]
2147:../cleanflight/src/main/interface/cli.c ****             equalsDefault = !memcmp(cac, cacDefault, sizeof(*cac));
 10173              	 .loc 13 2147 0
 10174 0040 B869     	 ldr r0,[r7,#24]
 10175 0042 7969     	 ldr r1,[r7,#20]
 10176 0044 0522     	 movs r2,#5
 10177 0046 FFF7FEFF 	 bl memcmp
 10178 004a 0346     	 mov r3,r0
 10179 004c 002B     	 cmp r3,#0
 10180 004e 0CBF     	 ite eq
 10181 0050 0123     	 moveq r3,#1
 10182 0052 0023     	 movne r3,#0
 10183 0054 87F82730 	 strb r3,[r7,#39]
2148:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
2149:../cleanflight/src/main/interface/cli.c ****                 i,
2150:../cleanflight/src/main/interface/cli.c ****                 cacDefault->auxChannelIndex,
 10184              	 .loc 13 2150 0
 10185 0058 7B69     	 ldr r3,[r7,#20]
 10186 005a 1B78     	 ldrb r3,[r3]
2148:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 10187              	 .loc 13 2148 0
 10188 005c 1E46     	 mov r6,r3
2151:../cleanflight/src/main/interface/cli.c ****                 cacDefault->band,
 10189              	 .loc 13 2151 0
 10190 005e 7B69     	 ldr r3,[r7,#20]
 10191 0060 5B78     	 ldrb r3,[r3,#1]
2148:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 10192              	 .loc 13 2148 0
 10193 0062 1D46     	 mov r5,r3
2152:../cleanflight/src/main/interface/cli.c ****                 cacDefault->channel,
 10194              	 .loc 13 2152 0
 10195 0064 7B69     	 ldr r3,[r7,#20]
 10196 0066 9B78     	 ldrb r3,[r3,#2]
2148:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, equalsDefault, format,
 10197              	 .loc 13 2148 0
 10198 0068 1C46     	 mov r4,r3
2153:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(cacDefault->range.startStep),
 10199              	 .loc 13 2153 0
 10200 006a 7B69     	 ldr r3,[r7,#20]
 10201 006c DB78     	 ldrb r3,[r3,#3]
 10202 006e 1A46     	 mov r2,r3
 10203 0070 1346     	 mov r3,r2
 10204 0072 9B00     	 lsls r3,r3,#2
 10205 0074 1344     	 add r3,r3,r2
 10206 0076 9A00     	 lsls r2,r3,#2
 10207 0078 1344     	 add r3,r3,r2
2148:../cleanflight/src/main/interface/cli.c ****                 i,
 10208              	 .loc 13 2148 0
 10209 007a 03F56172 	 add r2,r3,#900
2154:../cleanflight/src/main/interface/cli.c ****                 MODE_STEP_TO_CHANNEL_VALUE(cacDefault->range.endStep)
 10210              	 .loc 13 2154 0
 10211 007e 7B69     	 ldr r3,[r7,#20]
 10212 0080 1B79     	 ldrb r3,[r3,#4]
 10213 0082 1946     	 mov r1,r3
 10214 0084 0B46     	 mov r3,r1
 10215 0086 9B00     	 lsls r3,r3,#2
 10216 0088 0B44     	 add r3,r3,r1
 10217 008a 9900     	 lsls r1,r3,#2
 10218 008c 0B44     	 add r3,r3,r1
2148:../cleanflight/src/main/interface/cli.c ****                 i,
 10219              	 .loc 13 2148 0
 10220 008e 03F56173 	 add r3,r3,#900
 10221 0092 F87B     	 ldrb r0,[r7,#15]
 10222 0094 97F82710 	 ldrb r1,[r7,#39]
 10223 0098 0096     	 str r6,[sp]
 10224 009a 0195     	 str r5,[sp,#4]
 10225 009c 0294     	 str r4,[sp,#8]
 10226 009e 0392     	 str r2,[sp,#12]
 10227 00a0 0493     	 str r3,[sp,#16]
 10228 00a2 FA69     	 ldr r2,[r7,#28]
 10229 00a4 3B6A     	 ldr r3,[r7,#32]
 10230 00a6 FFF7FEFF 	 bl cliDefaultPrintLinef
 10231              	.L607:
 10232              	.LBE71:
2155:../cleanflight/src/main/interface/cli.c ****             );
2156:../cleanflight/src/main/interface/cli.c ****         }
2157:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, format,
2158:../cleanflight/src/main/interface/cli.c ****             i,
2159:../cleanflight/src/main/interface/cli.c ****             cac->auxChannelIndex,
 10233              	 .loc 13 2159 0 discriminator 2
 10234 00aa BB69     	 ldr r3,[r7,#24]
 10235 00ac 1B78     	 ldrb r3,[r3]
2157:../cleanflight/src/main/interface/cli.c ****             i,
 10236              	 .loc 13 2157 0 discriminator 2
 10237 00ae 1E46     	 mov r6,r3
2160:../cleanflight/src/main/interface/cli.c ****             cac->band,
 10238              	 .loc 13 2160 0 discriminator 2
 10239 00b0 BB69     	 ldr r3,[r7,#24]
 10240 00b2 5B78     	 ldrb r3,[r3,#1]
2157:../cleanflight/src/main/interface/cli.c ****             i,
 10241              	 .loc 13 2157 0 discriminator 2
 10242 00b4 1D46     	 mov r5,r3
2161:../cleanflight/src/main/interface/cli.c ****             cac->channel,
 10243              	 .loc 13 2161 0 discriminator 2
 10244 00b6 BB69     	 ldr r3,[r7,#24]
 10245 00b8 9B78     	 ldrb r3,[r3,#2]
2157:../cleanflight/src/main/interface/cli.c ****             i,
 10246              	 .loc 13 2157 0 discriminator 2
 10247 00ba 1C46     	 mov r4,r3
2162:../cleanflight/src/main/interface/cli.c ****             MODE_STEP_TO_CHANNEL_VALUE(cac->range.startStep),
 10248              	 .loc 13 2162 0 discriminator 2
 10249 00bc BB69     	 ldr r3,[r7,#24]
 10250 00be DB78     	 ldrb r3,[r3,#3]
 10251 00c0 1A46     	 mov r2,r3
 10252 00c2 1346     	 mov r3,r2
 10253 00c4 9B00     	 lsls r3,r3,#2
 10254 00c6 1344     	 add r3,r3,r2
 10255 00c8 9A00     	 lsls r2,r3,#2
 10256 00ca 1344     	 add r3,r3,r2
2157:../cleanflight/src/main/interface/cli.c ****             i,
 10257              	 .loc 13 2157 0 discriminator 2
 10258 00cc 03F56172 	 add r2,r3,#900
2163:../cleanflight/src/main/interface/cli.c ****             MODE_STEP_TO_CHANNEL_VALUE(cac->range.endStep)
 10259              	 .loc 13 2163 0 discriminator 2
 10260 00d0 BB69     	 ldr r3,[r7,#24]
 10261 00d2 1B79     	 ldrb r3,[r3,#4]
 10262 00d4 1946     	 mov r1,r3
 10263 00d6 0B46     	 mov r3,r1
 10264 00d8 9B00     	 lsls r3,r3,#2
 10265 00da 0B44     	 add r3,r3,r1
 10266 00dc 9900     	 lsls r1,r3,#2
 10267 00de 0B44     	 add r3,r3,r1
2157:../cleanflight/src/main/interface/cli.c ****             i,
 10268              	 .loc 13 2157 0 discriminator 2
 10269 00e0 03F56173 	 add r3,r3,#900
 10270 00e4 F87B     	 ldrb r0,[r7,#15]
 10271 00e6 97F82710 	 ldrb r1,[r7,#39]
 10272 00ea 0096     	 str r6,[sp]
 10273 00ec 0195     	 str r5,[sp,#4]
 10274 00ee 0294     	 str r4,[sp,#8]
 10275 00f0 0392     	 str r2,[sp,#12]
 10276 00f2 0493     	 str r3,[sp,#16]
 10277 00f4 FA69     	 ldr r2,[r7,#28]
 10278 00f6 3B6A     	 ldr r3,[r7,#32]
 10279 00f8 FFF7FEFF 	 bl cliDumpPrintLinef
 10280              	.LBE70:
2143:../cleanflight/src/main/interface/cli.c ****         const vtxChannelActivationCondition_t *cac = &vtxConfig->vtxChannelActivationConditions[i];
 10281              	 .loc 13 2143 0 discriminator 2
 10282 00fc 3B6A     	 ldr r3,[r7,#32]
 10283 00fe 0133     	 adds r3,r3,#1
 10284 0100 3B62     	 str r3,[r7,#32]
 10285              	.L606:
2143:../cleanflight/src/main/interface/cli.c ****         const vtxChannelActivationCondition_t *cac = &vtxConfig->vtxChannelActivationConditions[i];
 10286              	 .loc 13 2143 0 is_stmt 0 discriminator 1
 10287 0102 3B6A     	 ldr r3,[r7,#32]
 10288 0104 092B     	 cmp r3,#9
 10289 0106 8AD9     	 bls .L608
 10290              	.LBE69:
2164:../cleanflight/src/main/interface/cli.c ****         );
2165:../cleanflight/src/main/interface/cli.c ****     }
2166:../cleanflight/src/main/interface/cli.c **** }
 10291              	 .loc 13 2166 0 is_stmt 1
 10292 0108 2C37     	 adds r7,r7,#44
 10293              	.LCFI424:
 10294              	 .cfi_def_cfa_offset 20
 10295 010a BD46     	 mov sp,r7
 10296              	.LCFI425:
 10297              	 .cfi_def_cfa_register 13
 10298              	 
 10299 010c F0BD     	 pop {r4,r5,r6,r7,pc}
 10300              	.L610:
 10301 010e 00BF     	 .align 2
 10302              	.L609:
 10303 0110 44060000 	 .word .LC122
 10304              	 .cfi_endproc
 10305              	.LFE743:
 10307              	 .section .text.cliVtx,"ax",%progbits
 10308              	 .align 2
 10309              	 .thumb
 10310              	 .thumb_func
 10312              	cliVtx:
 10313              	.LFB744:
2167:../cleanflight/src/main/interface/cli.c **** 
2168:../cleanflight/src/main/interface/cli.c **** static void cliVtx(char *cmdline)
2169:../cleanflight/src/main/interface/cli.c **** {
 10314              	 .loc 13 2169 0
 10315              	 .cfi_startproc
 10316              	 
 10317              	 
 10318 0000 B0B5     	 push {r4,r5,r7,lr}
 10319              	.LCFI426:
 10320              	 .cfi_def_cfa_offset 16
 10321              	 .cfi_offset 4,-16
 10322              	 .cfi_offset 5,-12
 10323              	 .cfi_offset 7,-8
 10324              	 .cfi_offset 14,-4
 10325 0002 8EB0     	 sub sp,sp,#56
 10326              	.LCFI427:
 10327              	 .cfi_def_cfa_offset 72
 10328 0004 06AF     	 add r7,sp,#24
 10329              	.LCFI428:
 10330              	 .cfi_def_cfa 7,48
 10331 0006 7860     	 str r0,[r7,#4]
2170:../cleanflight/src/main/interface/cli.c ****     const char *format = "vtx %u %u %u %u %u %u";
 10332              	 .loc 13 2170 0
 10333 0008 5D4B     	 ldr r3,.L620
 10334 000a FB61     	 str r3,[r7,#28]
2171:../cleanflight/src/main/interface/cli.c ****     int i, val = 0;
 10335              	 .loc 13 2171 0
 10336 000c 0023     	 movs r3,#0
 10337 000e BB61     	 str r3,[r7,#24]
2172:../cleanflight/src/main/interface/cli.c ****     const char *ptr;
2173:../cleanflight/src/main/interface/cli.c **** 
2174:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 10338              	 .loc 13 2174 0
 10339 0010 7868     	 ldr r0,[r7,#4]
 10340 0012 FFF7FEFF 	 bl isEmpty
 10341 0016 0346     	 mov r3,r0
 10342 0018 002B     	 cmp r3,#0
 10343 001a 08D0     	 beq .L612
2175:../cleanflight/src/main/interface/cli.c ****         printVtx(DUMP_MASTER, vtxConfig(), NULL);
 10344              	 .loc 13 2175 0
 10345 001c FFF7FEFF 	 bl vtxConfig
 10346 0020 0346     	 mov r3,r0
 10347 0022 0120     	 movs r0,#1
 10348 0024 1946     	 mov r1,r3
 10349 0026 0022     	 movs r2,#0
 10350 0028 FFF7FEFF 	 bl printVtx
 10351 002c A5E0     	 b .L611
 10352              	.L612:
2176:../cleanflight/src/main/interface/cli.c ****     } else {
2177:../cleanflight/src/main/interface/cli.c ****         ptr = cmdline;
 10353              	 .loc 13 2177 0
 10354 002e 7B68     	 ldr r3,[r7,#4]
 10355 0030 7B61     	 str r3,[r7,#20]
2178:../cleanflight/src/main/interface/cli.c ****         i = atoi(ptr++);
 10356              	 .loc 13 2178 0
 10357 0032 7B69     	 ldr r3,[r7,#20]
 10358 0034 5A1C     	 adds r2,r3,#1
 10359 0036 7A61     	 str r2,[r7,#20]
 10360 0038 1846     	 mov r0,r3
 10361 003a FFF7FEFF 	 bl atoi
 10362 003e 3861     	 str r0,[r7,#16]
2179:../cleanflight/src/main/interface/cli.c ****         if (i < MAX_CHANNEL_ACTIVATION_CONDITION_COUNT) {
 10363              	 .loc 13 2179 0
 10364 0040 3B69     	 ldr r3,[r7,#16]
 10365 0042 092B     	 cmp r3,#9
 10366 0044 00F39480 	 bgt .L614
 10367              	.LBB72:
2180:../cleanflight/src/main/interface/cli.c ****             vtxChannelActivationCondition_t *cac = &vtxConfigMutable()->vtxChannelActivationConditi
 10368              	 .loc 13 2180 0
 10369 0048 FFF7FEFF 	 bl vtxConfigMutable
 10370 004c 0146     	 mov r1,r0
 10371 004e 3A69     	 ldr r2,[r7,#16]
 10372 0050 1346     	 mov r3,r2
 10373 0052 9B00     	 lsls r3,r3,#2
 10374 0054 1344     	 add r3,r3,r2
 10375 0056 0B44     	 add r3,r3,r1
 10376 0058 FB60     	 str r3,[r7,#12]
2181:../cleanflight/src/main/interface/cli.c ****             uint8_t validArgumentCount = 0;
 10377              	 .loc 13 2181 0
 10378 005a 0023     	 movs r3,#0
 10379 005c FB72     	 strb r3,[r7,#11]
2182:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 10380              	 .loc 13 2182 0
 10381 005e 7869     	 ldr r0,[r7,#20]
 10382 0060 FFF7FEFF 	 bl nextArg
 10383 0064 7861     	 str r0,[r7,#20]
2183:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 10384              	 .loc 13 2183 0
 10385 0066 7B69     	 ldr r3,[r7,#20]
 10386 0068 002B     	 cmp r3,#0
 10387 006a 11D0     	 beq .L615
2184:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 10388              	 .loc 13 2184 0
 10389 006c 7869     	 ldr r0,[r7,#20]
 10390 006e FFF7FEFF 	 bl atoi
 10391 0072 B861     	 str r0,[r7,#24]
2185:../cleanflight/src/main/interface/cli.c ****                 if (val >= 0 && val < MAX_AUX_CHANNEL_COUNT) {
 10392              	 .loc 13 2185 0
 10393 0074 BB69     	 ldr r3,[r7,#24]
 10394 0076 002B     	 cmp r3,#0
 10395 0078 0ADB     	 blt .L615
 10396              	 .loc 13 2185 0 is_stmt 0 discriminator 1
 10397 007a BB69     	 ldr r3,[r7,#24]
 10398 007c 0D2B     	 cmp r3,#13
 10399 007e 07DC     	 bgt .L615
2186:../cleanflight/src/main/interface/cli.c ****                     cac->auxChannelIndex = val;
 10400              	 .loc 13 2186 0 is_stmt 1
 10401 0080 BB69     	 ldr r3,[r7,#24]
 10402 0082 DAB2     	 uxtb r2,r3
 10403 0084 FB68     	 ldr r3,[r7,#12]
 10404 0086 1A70     	 strb r2,[r3]
2187:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 10405              	 .loc 13 2187 0
 10406 0088 FB7A     	 ldrb r3,[r7,#11]
 10407 008a 0133     	 adds r3,r3,#1
 10408 008c DBB2     	 uxtb r3,r3
 10409 008e FB72     	 strb r3,[r7,#11]
 10410              	.L615:
2188:../cleanflight/src/main/interface/cli.c ****                 }
2189:../cleanflight/src/main/interface/cli.c ****             }
2190:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 10411              	 .loc 13 2190 0
 10412 0090 7869     	 ldr r0,[r7,#20]
 10413 0092 FFF7FEFF 	 bl nextArg
 10414 0096 7861     	 str r0,[r7,#20]
2191:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 10415              	 .loc 13 2191 0
 10416 0098 7B69     	 ldr r3,[r7,#20]
 10417 009a 002B     	 cmp r3,#0
 10418 009c 11D0     	 beq .L616
2192:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 10419              	 .loc 13 2192 0
 10420 009e 7869     	 ldr r0,[r7,#20]
 10421 00a0 FFF7FEFF 	 bl atoi
 10422 00a4 B861     	 str r0,[r7,#24]
2193:../cleanflight/src/main/interface/cli.c ****                 // FIXME Use VTX API to get min/max
2194:../cleanflight/src/main/interface/cli.c ****                 if (val >= VTX_SETTINGS_MIN_BAND && val <= VTX_SETTINGS_MAX_BAND) {
 10423              	 .loc 13 2194 0
 10424 00a6 BB69     	 ldr r3,[r7,#24]
 10425 00a8 002B     	 cmp r3,#0
 10426 00aa 0ADD     	 ble .L616
 10427              	 .loc 13 2194 0 is_stmt 0 discriminator 1
 10428 00ac BB69     	 ldr r3,[r7,#24]
 10429 00ae 052B     	 cmp r3,#5
 10430 00b0 07DC     	 bgt .L616
2195:../cleanflight/src/main/interface/cli.c ****                     cac->band = val;
 10431              	 .loc 13 2195 0 is_stmt 1
 10432 00b2 BB69     	 ldr r3,[r7,#24]
 10433 00b4 DAB2     	 uxtb r2,r3
 10434 00b6 FB68     	 ldr r3,[r7,#12]
 10435 00b8 5A70     	 strb r2,[r3,#1]
2196:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 10436              	 .loc 13 2196 0
 10437 00ba FB7A     	 ldrb r3,[r7,#11]
 10438 00bc 0133     	 adds r3,r3,#1
 10439 00be DBB2     	 uxtb r3,r3
 10440 00c0 FB72     	 strb r3,[r7,#11]
 10441              	.L616:
2197:../cleanflight/src/main/interface/cli.c ****                 }
2198:../cleanflight/src/main/interface/cli.c ****             }
2199:../cleanflight/src/main/interface/cli.c ****             ptr = nextArg(ptr);
 10442              	 .loc 13 2199 0
 10443 00c2 7869     	 ldr r0,[r7,#20]
 10444 00c4 FFF7FEFF 	 bl nextArg
 10445 00c8 7861     	 str r0,[r7,#20]
2200:../cleanflight/src/main/interface/cli.c ****             if (ptr) {
 10446              	 .loc 13 2200 0
 10447 00ca 7B69     	 ldr r3,[r7,#20]
 10448 00cc 002B     	 cmp r3,#0
 10449 00ce 11D0     	 beq .L617
2201:../cleanflight/src/main/interface/cli.c ****                 val = atoi(ptr);
 10450              	 .loc 13 2201 0
 10451 00d0 7869     	 ldr r0,[r7,#20]
 10452 00d2 FFF7FEFF 	 bl atoi
 10453 00d6 B861     	 str r0,[r7,#24]
2202:../cleanflight/src/main/interface/cli.c ****                 // FIXME Use VTX API to get min/max
2203:../cleanflight/src/main/interface/cli.c ****                 if (val >= VTX_SETTINGS_MIN_CHANNEL && val <= VTX_SETTINGS_MAX_CHANNEL) {
 10454              	 .loc 13 2203 0
 10455 00d8 BB69     	 ldr r3,[r7,#24]
 10456 00da 002B     	 cmp r3,#0
 10457 00dc 0ADD     	 ble .L617
 10458              	 .loc 13 2203 0 is_stmt 0 discriminator 1
 10459 00de BB69     	 ldr r3,[r7,#24]
 10460 00e0 082B     	 cmp r3,#8
 10461 00e2 07DC     	 bgt .L617
2204:../cleanflight/src/main/interface/cli.c ****                     cac->channel = val;
 10462              	 .loc 13 2204 0 is_stmt 1
 10463 00e4 BB69     	 ldr r3,[r7,#24]
 10464 00e6 DAB2     	 uxtb r2,r3
 10465 00e8 FB68     	 ldr r3,[r7,#12]
 10466 00ea 9A70     	 strb r2,[r3,#2]
2205:../cleanflight/src/main/interface/cli.c ****                     validArgumentCount++;
 10467              	 .loc 13 2205 0
 10468 00ec FB7A     	 ldrb r3,[r7,#11]
 10469 00ee 0133     	 adds r3,r3,#1
 10470 00f0 DBB2     	 uxtb r3,r3
 10471 00f2 FB72     	 strb r3,[r7,#11]
 10472              	.L617:
2206:../cleanflight/src/main/interface/cli.c ****                 }
2207:../cleanflight/src/main/interface/cli.c ****             }
2208:../cleanflight/src/main/interface/cli.c ****             ptr = processChannelRangeArgs(ptr, &cac->range, &validArgumentCount);
 10473              	 .loc 13 2208 0
 10474 00f4 FB68     	 ldr r3,[r7,#12]
 10475 00f6 DA1C     	 adds r2,r3,#3
 10476 00f8 07F10B03 	 add r3,r7,#11
 10477 00fc 7869     	 ldr r0,[r7,#20]
 10478 00fe 1146     	 mov r1,r2
 10479 0100 1A46     	 mov r2,r3
 10480 0102 FFF7FEFF 	 bl processChannelRangeArgs
 10481 0106 7861     	 str r0,[r7,#20]
2209:../cleanflight/src/main/interface/cli.c **** 
2210:../cleanflight/src/main/interface/cli.c ****             if (validArgumentCount != 5) {
 10482              	 .loc 13 2210 0
 10483 0108 FB7A     	 ldrb r3,[r7,#11]
 10484 010a 052B     	 cmp r3,#5
 10485 010c 07D0     	 beq .L618
2211:../cleanflight/src/main/interface/cli.c ****                 memset(cac, 0, sizeof(vtxChannelActivationCondition_t));
 10486              	 .loc 13 2211 0
 10487 010e F868     	 ldr r0,[r7,#12]
 10488 0110 0021     	 movs r1,#0
 10489 0112 0522     	 movs r2,#5
 10490 0114 FFF7FEFF 	 bl memset
2212:../cleanflight/src/main/interface/cli.c ****                 cliShowParseError();
 10491              	 .loc 13 2212 0
 10492 0118 FFF7FEFF 	 bl cliShowParseError
 10493 011c 2DE0     	 b .L611
 10494              	.L618:
2213:../cleanflight/src/main/interface/cli.c ****             } else {
2214:../cleanflight/src/main/interface/cli.c ****                 cliDumpPrintLinef(0, false, format,
2215:../cleanflight/src/main/interface/cli.c ****                     i,
2216:../cleanflight/src/main/interface/cli.c ****                     cac->auxChannelIndex,
 10495              	 .loc 13 2216 0
 10496 011e FB68     	 ldr r3,[r7,#12]
 10497 0120 1B78     	 ldrb r3,[r3]
2214:../cleanflight/src/main/interface/cli.c ****                     i,
 10498              	 .loc 13 2214 0
 10499 0122 1D46     	 mov r5,r3
2217:../cleanflight/src/main/interface/cli.c ****                     cac->band,
 10500              	 .loc 13 2217 0
 10501 0124 FB68     	 ldr r3,[r7,#12]
 10502 0126 5B78     	 ldrb r3,[r3,#1]
2214:../cleanflight/src/main/interface/cli.c ****                     i,
 10503              	 .loc 13 2214 0
 10504 0128 1C46     	 mov r4,r3
2218:../cleanflight/src/main/interface/cli.c ****                     cac->channel,
 10505              	 .loc 13 2218 0
 10506 012a FB68     	 ldr r3,[r7,#12]
 10507 012c 9B78     	 ldrb r3,[r3,#2]
2214:../cleanflight/src/main/interface/cli.c ****                     i,
 10508              	 .loc 13 2214 0
 10509 012e 1846     	 mov r0,r3
2219:../cleanflight/src/main/interface/cli.c ****                     MODE_STEP_TO_CHANNEL_VALUE(cac->range.startStep),
 10510              	 .loc 13 2219 0
 10511 0130 FB68     	 ldr r3,[r7,#12]
 10512 0132 DB78     	 ldrb r3,[r3,#3]
 10513 0134 1A46     	 mov r2,r3
 10514 0136 1346     	 mov r3,r2
 10515 0138 9B00     	 lsls r3,r3,#2
 10516 013a 1344     	 add r3,r3,r2
 10517 013c 9A00     	 lsls r2,r3,#2
 10518 013e 1344     	 add r3,r3,r2
2214:../cleanflight/src/main/interface/cli.c ****                     i,
 10519              	 .loc 13 2214 0
 10520 0140 03F56172 	 add r2,r3,#900
2220:../cleanflight/src/main/interface/cli.c ****                     MODE_STEP_TO_CHANNEL_VALUE(cac->range.endStep)
 10521              	 .loc 13 2220 0
 10522 0144 FB68     	 ldr r3,[r7,#12]
 10523 0146 1B79     	 ldrb r3,[r3,#4]
 10524 0148 1946     	 mov r1,r3
 10525 014a 0B46     	 mov r3,r1
 10526 014c 9B00     	 lsls r3,r3,#2
 10527 014e 0B44     	 add r3,r3,r1
 10528 0150 9900     	 lsls r1,r3,#2
 10529 0152 0B44     	 add r3,r3,r1
2214:../cleanflight/src/main/interface/cli.c ****                     i,
 10530              	 .loc 13 2214 0
 10531 0154 03F56173 	 add r3,r3,#900
 10532 0158 0095     	 str r5,[sp]
 10533 015a 0194     	 str r4,[sp,#4]
 10534 015c 0290     	 str r0,[sp,#8]
 10535 015e 0392     	 str r2,[sp,#12]
 10536 0160 0493     	 str r3,[sp,#16]
 10537 0162 0020     	 movs r0,#0
 10538 0164 0021     	 movs r1,#0
 10539 0166 FA69     	 ldr r2,[r7,#28]
 10540 0168 3B69     	 ldr r3,[r7,#16]
 10541 016a FFF7FEFF 	 bl cliDumpPrintLinef
 10542              	.LBE72:
 10543 016e 04E0     	 b .L611
 10544              	.L614:
2221:../cleanflight/src/main/interface/cli.c ****                 );
2222:../cleanflight/src/main/interface/cli.c ****             }
2223:../cleanflight/src/main/interface/cli.c ****         } else {
2224:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("index", 0, MAX_CHANNEL_ACTIVATION_CONDITION_COUNT - 1);
 10545              	 .loc 13 2224 0
 10546 0170 0448     	 ldr r0,.L620+4
 10547 0172 0021     	 movs r1,#0
 10548 0174 0922     	 movs r2,#9
 10549 0176 FFF7FEFF 	 bl cliShowArgumentRangeError
 10550              	.L611:
2225:../cleanflight/src/main/interface/cli.c ****         }
2226:../cleanflight/src/main/interface/cli.c ****     }
2227:../cleanflight/src/main/interface/cli.c **** }
 10551              	 .loc 13 2227 0
 10552 017a 2037     	 adds r7,r7,#32
 10553              	.LCFI429:
 10554              	 .cfi_def_cfa_offset 16
 10555 017c BD46     	 mov sp,r7
 10556              	.LCFI430:
 10557              	 .cfi_def_cfa_register 13
 10558              	 
 10559 017e B0BD     	 pop {r4,r5,r7,pc}
 10560              	.L621:
 10561              	 .align 2
 10562              	.L620:
 10563 0180 44060000 	 .word .LC122
 10564 0184 5C030000 	 .word .LC80
 10565              	 .cfi_endproc
 10566              	.LFE744:
 10568              	 .section .rodata
 10569 065a 0000     	 .align 2
 10570              	.LC123:
 10571 065c 6E616D65 	 .ascii "name %s\000"
 10571      20257300 
 10572              	 .section .text.printName,"ax",%progbits
 10573              	 .align 2
 10574              	 .thumb
 10575              	 .thumb_func
 10577              	printName:
 10578              	.LFB745:
2228:../cleanflight/src/main/interface/cli.c **** 
2229:../cleanflight/src/main/interface/cli.c **** #endif // VTX_CONTROL
2230:../cleanflight/src/main/interface/cli.c **** 
2231:../cleanflight/src/main/interface/cli.c **** static void printName(uint8_t dumpMask, const pilotConfig_t *pilotConfig)
2232:../cleanflight/src/main/interface/cli.c **** {
 10579              	 .loc 13 2232 0
 10580              	 .cfi_startproc
 10581              	 
 10582              	 
 10583 0000 80B5     	 push {r7,lr}
 10584              	.LCFI431:
 10585              	 .cfi_def_cfa_offset 8
 10586              	 .cfi_offset 7,-8
 10587              	 .cfi_offset 14,-4
 10588 0002 84B0     	 sub sp,sp,#16
 10589              	.LCFI432:
 10590              	 .cfi_def_cfa_offset 24
 10591 0004 00AF     	 add r7,sp,#0
 10592              	.LCFI433:
 10593              	 .cfi_def_cfa_register 7
 10594 0006 0346     	 mov r3,r0
 10595 0008 3960     	 str r1,[r7]
 10596 000a FB71     	 strb r3,[r7,#7]
2233:../cleanflight/src/main/interface/cli.c ****     const bool equalsDefault = strlen(pilotConfig->name) == 0;
 10597              	 .loc 13 2233 0
 10598 000c 3B68     	 ldr r3,[r7]
 10599 000e 1B78     	 ldrb r3,[r3]
 10600 0010 002B     	 cmp r3,#0
 10601 0012 0CBF     	 ite eq
 10602 0014 0123     	 moveq r3,#1
 10603 0016 0023     	 movne r3,#0
 10604 0018 FB73     	 strb r3,[r7,#15]
2234:../cleanflight/src/main/interface/cli.c ****     cliDumpPrintLinef(dumpMask, equalsDefault, "name %s", equalsDefault ? emptyName : pilotConfig->
 10605              	 .loc 13 2234 0
 10606 001a FB7B     	 ldrb r3,[r7,#15]
 10607 001c 002B     	 cmp r3,#0
 10608 001e 01D0     	 beq .L623
 10609              	 .loc 13 2234 0 is_stmt 0 discriminator 1
 10610 0020 064B     	 ldr r3,.L625
 10611 0022 00E0     	 b .L624
 10612              	.L623:
 10613              	 .loc 13 2234 0 discriminator 2
 10614 0024 3B68     	 ldr r3,[r7]
 10615              	.L624:
 10616              	 .loc 13 2234 0 discriminator 4
 10617 0026 F979     	 ldrb r1,[r7,#7]
 10618 0028 FA7B     	 ldrb r2,[r7,#15]
 10619 002a 0846     	 mov r0,r1
 10620 002c 1146     	 mov r1,r2
 10621 002e 044A     	 ldr r2,.L625+4
 10622 0030 FFF7FEFF 	 bl cliDumpPrintLinef
2235:../cleanflight/src/main/interface/cli.c **** }
 10623              	 .loc 13 2235 0 is_stmt 1 discriminator 4
 10624 0034 1037     	 adds r7,r7,#16
 10625              	.LCFI434:
 10626              	 .cfi_def_cfa_offset 8
 10627 0036 BD46     	 mov sp,r7
 10628              	.LCFI435:
 10629              	 .cfi_def_cfa_register 13
 10630              	 
 10631 0038 80BD     	 pop {r7,pc}
 10632              	.L626:
 10633 003a 00BF     	 .align 2
 10634              	.L625:
 10635 003c 00000000 	 .word .LC0
 10636 0040 5C060000 	 .word .LC123
 10637              	 .cfi_endproc
 10638              	.LFE745:
 10640              	 .section .text.cliName,"ax",%progbits
 10641              	 .align 2
 10642              	 .thumb
 10643              	 .thumb_func
 10645              	cliName:
 10646              	.LFB746:
2236:../cleanflight/src/main/interface/cli.c **** 
2237:../cleanflight/src/main/interface/cli.c **** static void cliName(char *cmdline)
2238:../cleanflight/src/main/interface/cli.c **** {
 10647              	 .loc 13 2238 0
 10648              	 .cfi_startproc
 10649              	 
 10650              	 
 10651 0000 80B5     	 push {r7,lr}
 10652              	.LCFI436:
 10653              	 .cfi_def_cfa_offset 8
 10654              	 .cfi_offset 7,-8
 10655              	 .cfi_offset 14,-4
 10656 0002 86B0     	 sub sp,sp,#24
 10657              	.LCFI437:
 10658              	 .cfi_def_cfa_offset 32
 10659 0004 00AF     	 add r7,sp,#0
 10660              	.LCFI438:
 10661              	 .cfi_def_cfa_register 7
 10662 0006 7860     	 str r0,[r7,#4]
2239:../cleanflight/src/main/interface/cli.c ****     const unsigned int len = strlen(cmdline);
 10663              	 .loc 13 2239 0
 10664 0008 7868     	 ldr r0,[r7,#4]
 10665 000a FFF7FEFF 	 bl strlen
 10666 000e 7861     	 str r0,[r7,#20]
2240:../cleanflight/src/main/interface/cli.c ****     if (len > 0) {
 10667              	 .loc 13 2240 0
 10668 0010 7B69     	 ldr r3,[r7,#20]
 10669 0012 002B     	 cmp r3,#0
 10670 0014 22D0     	 beq .L628
2241:../cleanflight/src/main/interface/cli.c ****         memset(pilotConfigMutable()->name, 0, ARRAYLEN(pilotConfig()->name));
 10671              	 .loc 13 2241 0
 10672 0016 FFF7FEFF 	 bl pilotConfigMutable
 10673 001a 0346     	 mov r3,r0
 10674 001c 1846     	 mov r0,r3
 10675 001e 0021     	 movs r1,#0
 10676 0020 1122     	 movs r2,#17
 10677 0022 FFF7FEFF 	 bl memset
2242:../cleanflight/src/main/interface/cli.c ****         if (strncmp(cmdline, emptyName, len)) {
 10678              	 .loc 13 2242 0
 10679 0026 124B     	 ldr r3,.L629
 10680 0028 7868     	 ldr r0,[r7,#4]
 10681 002a 1946     	 mov r1,r3
 10682 002c 7A69     	 ldr r2,[r7,#20]
 10683 002e FFF7FEFF 	 bl strncmp
 10684 0032 0346     	 mov r3,r0
 10685 0034 002B     	 cmp r3,#0
 10686 0036 11D0     	 beq .L628
2243:../cleanflight/src/main/interface/cli.c ****             strncpy(pilotConfigMutable()->name, cmdline, MIN(len, MAX_NAME_LENGTH));
 10687              	 .loc 13 2243 0
 10688 0038 FFF7FEFF 	 bl pilotConfigMutable
 10689 003c 0346     	 mov r3,r0
 10690 003e 1946     	 mov r1,r3
 10691              	.LBB73:
 10692 0040 7B69     	 ldr r3,[r7,#20]
 10693 0042 3B61     	 str r3,[r7,#16]
 10694 0044 1023     	 movs r3,#16
 10695 0046 FB60     	 str r3,[r7,#12]
 10696 0048 FA68     	 ldr r2,[r7,#12]
 10697 004a 3B69     	 ldr r3,[r7,#16]
 10698 004c 9342     	 cmp r3,r2
 10699 004e 28BF     	 it cs
 10700 0050 1346     	 movcs r3,r2
 10701              	.LBE73:
 10702 0052 0846     	 mov r0,r1
 10703 0054 7968     	 ldr r1,[r7,#4]
 10704 0056 1A46     	 mov r2,r3
 10705 0058 FFF7FEFF 	 bl strncpy
 10706              	.L628:
2244:../cleanflight/src/main/interface/cli.c ****         }
2245:../cleanflight/src/main/interface/cli.c ****     }
2246:../cleanflight/src/main/interface/cli.c ****     printName(DUMP_MASTER, pilotConfig());
 10707              	 .loc 13 2246 0
 10708 005c FFF7FEFF 	 bl pilotConfig
 10709 0060 0346     	 mov r3,r0
 10710 0062 0120     	 movs r0,#1
 10711 0064 1946     	 mov r1,r3
 10712 0066 FFF7FEFF 	 bl printName
2247:../cleanflight/src/main/interface/cli.c **** }
 10713              	 .loc 13 2247 0
 10714 006a 1837     	 adds r7,r7,#24
 10715              	.LCFI439:
 10716              	 .cfi_def_cfa_offset 8
 10717 006c BD46     	 mov sp,r7
 10718              	.LCFI440:
 10719              	 .cfi_def_cfa_register 13
 10720              	 
 10721 006e 80BD     	 pop {r7,pc}
 10722              	.L630:
 10723              	 .align 2
 10724              	.L629:
 10725 0070 00000000 	 .word .LC0
 10726              	 .cfi_endproc
 10727              	.LFE746:
 10729              	 .section .rodata
 10730              	 .align 2
 10731              	.LC124:
 10732 0664 25732063 	 .ascii "%s cannot be changed. Current value: '%s'\000"
 10732      616E6E6F 
 10732      74206265 
 10732      20636861 
 10732      6E676564 
 10733 068e 0000     	 .align 2
 10734              	.LC125:
 10735 0690 626F6172 	 .ascii "board_name\000"
 10735      645F6E61 
 10735      6D6500
 10736 069b 00       	 .align 2
 10737              	.LC126:
 10738 069c 626F6172 	 .ascii "board_name %s\000"
 10738      645F6E61 
 10738      6D652025 
 10738      7300
 10739              	 .section .text.cliBoardName,"ax",%progbits
 10740              	 .align 2
 10741              	 .thumb
 10742              	 .thumb_func
 10744              	cliBoardName:
 10745              	.LFB747:
2248:../cleanflight/src/main/interface/cli.c **** 
2249:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BOARD_INFO)
2250:../cleanflight/src/main/interface/cli.c **** 
2251:../cleanflight/src/main/interface/cli.c **** #define ERROR_MESSAGE "%s cannot be changed. Current value: '%s'"
2252:../cleanflight/src/main/interface/cli.c **** 
2253:../cleanflight/src/main/interface/cli.c **** static void cliBoardName(char *cmdline)
2254:../cleanflight/src/main/interface/cli.c **** {
 10746              	 .loc 13 2254 0
 10747              	 .cfi_startproc
 10748              	 
 10749              	 
 10750 0000 80B5     	 push {r7,lr}
 10751              	.LCFI441:
 10752              	 .cfi_def_cfa_offset 8
 10753              	 .cfi_offset 7,-8
 10754              	 .cfi_offset 14,-4
 10755 0002 84B0     	 sub sp,sp,#16
 10756              	.LCFI442:
 10757              	 .cfi_def_cfa_offset 24
 10758 0004 00AF     	 add r7,sp,#0
 10759              	.LCFI443:
 10760              	 .cfi_def_cfa_register 7
 10761 0006 7860     	 str r0,[r7,#4]
2255:../cleanflight/src/main/interface/cli.c ****     const unsigned int len = strlen(cmdline);
 10762              	 .loc 13 2255 0
 10763 0008 7868     	 ldr r0,[r7,#4]
 10764 000a FFF7FEFF 	 bl strlen
 10765 000e F860     	 str r0,[r7,#12]
2256:../cleanflight/src/main/interface/cli.c ****     if (len > 0 && boardInformationIsSet() && (len != strlen(getBoardName()) || strncmp(getBoardNam
 10766              	 .loc 13 2256 0
 10767 0010 FB68     	 ldr r3,[r7,#12]
 10768 0012 002B     	 cmp r3,#0
 10769 0014 22D0     	 beq .L632
 10770              	 .loc 13 2256 0 is_stmt 0 discriminator 1
 10771 0016 FFF7FEFF 	 bl boardInformationIsSet
 10772 001a 0346     	 mov r3,r0
 10773 001c 002B     	 cmp r3,#0
 10774 001e 1DD0     	 beq .L632
 10775              	 .loc 13 2256 0 discriminator 2
 10776 0020 FFF7FEFF 	 bl getBoardName
 10777 0024 0346     	 mov r3,r0
 10778 0026 1846     	 mov r0,r3
 10779 0028 FFF7FEFF 	 bl strlen
 10780 002c 0246     	 mov r2,r0
 10781 002e FB68     	 ldr r3,[r7,#12]
 10782 0030 9A42     	 cmp r2,r3
 10783 0032 0AD1     	 bne .L633
 10784              	 .loc 13 2256 0 discriminator 3
 10785 0034 FFF7FEFF 	 bl getBoardName
 10786 0038 0346     	 mov r3,r0
 10787 003a 1846     	 mov r0,r3
 10788 003c 7968     	 ldr r1,[r7,#4]
 10789 003e FA68     	 ldr r2,[r7,#12]
 10790 0040 FFF7FEFF 	 bl strncmp
 10791 0044 0346     	 mov r3,r0
 10792 0046 002B     	 cmp r3,#0
 10793 0048 08D0     	 beq .L632
 10794              	.L633:
2257:../cleanflight/src/main/interface/cli.c ****         cliPrintErrorLinef(ERROR_MESSAGE, "board_name", getBoardName());
 10795              	 .loc 13 2257 0 is_stmt 1
 10796 004a FFF7FEFF 	 bl getBoardName
 10797 004e 0346     	 mov r3,r0
 10798 0050 0C48     	 ldr r0,.L636
 10799 0052 0D49     	 ldr r1,.L636+4
 10800 0054 1A46     	 mov r2,r3
 10801 0056 FFF7FEFF 	 bl cliPrintErrorLinef
 10802 005a 0FE0     	 b .L631
 10803              	.L632:
2258:../cleanflight/src/main/interface/cli.c ****     } else {
2259:../cleanflight/src/main/interface/cli.c ****         if (len > 0) {
 10804              	 .loc 13 2259 0
 10805 005c FB68     	 ldr r3,[r7,#12]
 10806 005e 002B     	 cmp r3,#0
 10807 0060 05D0     	 beq .L635
2260:../cleanflight/src/main/interface/cli.c ****             setBoardName(cmdline);
 10808              	 .loc 13 2260 0
 10809 0062 7868     	 ldr r0,[r7,#4]
 10810 0064 FFF7FEFF 	 bl setBoardName
2261:../cleanflight/src/main/interface/cli.c ****             boardInformationUpdated = true;
 10811              	 .loc 13 2261 0
 10812 0068 084B     	 ldr r3,.L636+8
 10813 006a 0122     	 movs r2,#1
 10814 006c 1A70     	 strb r2,[r3]
 10815              	.L635:
2262:../cleanflight/src/main/interface/cli.c ****         }
2263:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("board_name %s", getBoardName());
 10816              	 .loc 13 2263 0
 10817 006e FFF7FEFF 	 bl getBoardName
 10818 0072 0346     	 mov r3,r0
 10819 0074 0648     	 ldr r0,.L636+12
 10820 0076 1946     	 mov r1,r3
 10821 0078 FFF7FEFF 	 bl cliPrintLinef
 10822              	.L631:
2264:../cleanflight/src/main/interface/cli.c ****     }
2265:../cleanflight/src/main/interface/cli.c **** }
 10823              	 .loc 13 2265 0
 10824 007c 1037     	 adds r7,r7,#16
 10825              	.LCFI444:
 10826              	 .cfi_def_cfa_offset 8
 10827 007e BD46     	 mov sp,r7
 10828              	.LCFI445:
 10829              	 .cfi_def_cfa_register 13
 10830              	 
 10831 0080 80BD     	 pop {r7,pc}
 10832              	.L637:
 10833 0082 00BF     	 .align 2
 10834              	.L636:
 10835 0084 64060000 	 .word .LC124
 10836 0088 90060000 	 .word .LC125
 10837 008c 00000000 	 .word boardInformationUpdated
 10838 0090 9C060000 	 .word .LC126
 10839              	 .cfi_endproc
 10840              	.LFE747:
 10842              	 .section .rodata
 10843 06aa 0000     	 .align 2
 10844              	.LC127:
 10845 06ac 6D616E75 	 .ascii "manufacturer_id\000"
 10845      66616374 
 10845      75726572 
 10845      5F696400 
 10846              	 .align 2
 10847              	.LC128:
 10848 06bc 6D616E75 	 .ascii "manufacturer_id %s\000"
 10848      66616374 
 10848      75726572 
 10848      5F696420 
 10848      257300
 10849              	 .section .text.cliManufacturerId,"ax",%progbits
 10850              	 .align 2
 10851              	 .thumb
 10852              	 .thumb_func
 10854              	cliManufacturerId:
 10855              	.LFB748:
2266:../cleanflight/src/main/interface/cli.c **** 
2267:../cleanflight/src/main/interface/cli.c **** static void cliManufacturerId(char *cmdline)
2268:../cleanflight/src/main/interface/cli.c **** {
 10856              	 .loc 13 2268 0
 10857              	 .cfi_startproc
 10858              	 
 10859              	 
 10860 0000 80B5     	 push {r7,lr}
 10861              	.LCFI446:
 10862              	 .cfi_def_cfa_offset 8
 10863              	 .cfi_offset 7,-8
 10864              	 .cfi_offset 14,-4
 10865 0002 84B0     	 sub sp,sp,#16
 10866              	.LCFI447:
 10867              	 .cfi_def_cfa_offset 24
 10868 0004 00AF     	 add r7,sp,#0
 10869              	.LCFI448:
 10870              	 .cfi_def_cfa_register 7
 10871 0006 7860     	 str r0,[r7,#4]
2269:../cleanflight/src/main/interface/cli.c ****     const unsigned int len = strlen(cmdline);
 10872              	 .loc 13 2269 0
 10873 0008 7868     	 ldr r0,[r7,#4]
 10874 000a FFF7FEFF 	 bl strlen
 10875 000e F860     	 str r0,[r7,#12]
2270:../cleanflight/src/main/interface/cli.c ****     if (len > 0 && boardInformationIsSet() && (len != strlen(getManufacturerId()) || strncmp(getMan
 10876              	 .loc 13 2270 0
 10877 0010 FB68     	 ldr r3,[r7,#12]
 10878 0012 002B     	 cmp r3,#0
 10879 0014 22D0     	 beq .L639
 10880              	 .loc 13 2270 0 is_stmt 0 discriminator 1
 10881 0016 FFF7FEFF 	 bl boardInformationIsSet
 10882 001a 0346     	 mov r3,r0
 10883 001c 002B     	 cmp r3,#0
 10884 001e 1DD0     	 beq .L639
 10885              	 .loc 13 2270 0 discriminator 2
 10886 0020 FFF7FEFF 	 bl getManufacturerId
 10887 0024 0346     	 mov r3,r0
 10888 0026 1846     	 mov r0,r3
 10889 0028 FFF7FEFF 	 bl strlen
 10890 002c 0246     	 mov r2,r0
 10891 002e FB68     	 ldr r3,[r7,#12]
 10892 0030 9A42     	 cmp r2,r3
 10893 0032 0AD1     	 bne .L640
 10894              	 .loc 13 2270 0 discriminator 3
 10895 0034 FFF7FEFF 	 bl getManufacturerId
 10896 0038 0346     	 mov r3,r0
 10897 003a 1846     	 mov r0,r3
 10898 003c 7968     	 ldr r1,[r7,#4]
 10899 003e FA68     	 ldr r2,[r7,#12]
 10900 0040 FFF7FEFF 	 bl strncmp
 10901 0044 0346     	 mov r3,r0
 10902 0046 002B     	 cmp r3,#0
 10903 0048 08D0     	 beq .L639
 10904              	.L640:
2271:../cleanflight/src/main/interface/cli.c ****         cliPrintErrorLinef(ERROR_MESSAGE, "manufacturer_id", getManufacturerId());
 10905              	 .loc 13 2271 0 is_stmt 1
 10906 004a FFF7FEFF 	 bl getManufacturerId
 10907 004e 0346     	 mov r3,r0
 10908 0050 0C48     	 ldr r0,.L643
 10909 0052 0D49     	 ldr r1,.L643+4
 10910 0054 1A46     	 mov r2,r3
 10911 0056 FFF7FEFF 	 bl cliPrintErrorLinef
 10912 005a 0FE0     	 b .L638
 10913              	.L639:
2272:../cleanflight/src/main/interface/cli.c ****     } else {
2273:../cleanflight/src/main/interface/cli.c ****         if (len > 0) {
 10914              	 .loc 13 2273 0
 10915 005c FB68     	 ldr r3,[r7,#12]
 10916 005e 002B     	 cmp r3,#0
 10917 0060 05D0     	 beq .L642
2274:../cleanflight/src/main/interface/cli.c ****             setManufacturerId(cmdline);
 10918              	 .loc 13 2274 0
 10919 0062 7868     	 ldr r0,[r7,#4]
 10920 0064 FFF7FEFF 	 bl setManufacturerId
2275:../cleanflight/src/main/interface/cli.c ****             boardInformationUpdated = true;
 10921              	 .loc 13 2275 0
 10922 0068 084B     	 ldr r3,.L643+8
 10923 006a 0122     	 movs r2,#1
 10924 006c 1A70     	 strb r2,[r3]
 10925              	.L642:
2276:../cleanflight/src/main/interface/cli.c ****         }
2277:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("manufacturer_id %s", getManufacturerId());
 10926              	 .loc 13 2277 0
 10927 006e FFF7FEFF 	 bl getManufacturerId
 10928 0072 0346     	 mov r3,r0
 10929 0074 0648     	 ldr r0,.L643+12
 10930 0076 1946     	 mov r1,r3
 10931 0078 FFF7FEFF 	 bl cliPrintLinef
 10932              	.L638:
2278:../cleanflight/src/main/interface/cli.c ****     }
2279:../cleanflight/src/main/interface/cli.c **** }
 10933              	 .loc 13 2279 0
 10934 007c 1037     	 adds r7,r7,#16
 10935              	.LCFI449:
 10936              	 .cfi_def_cfa_offset 8
 10937 007e BD46     	 mov sp,r7
 10938              	.LCFI450:
 10939              	 .cfi_def_cfa_register 13
 10940              	 
 10941 0080 80BD     	 pop {r7,pc}
 10942              	.L644:
 10943 0082 00BF     	 .align 2
 10944              	.L643:
 10945 0084 64060000 	 .word .LC124
 10946 0088 AC060000 	 .word .LC127
 10947 008c 00000000 	 .word boardInformationUpdated
 10948 0090 BC060000 	 .word .LC128
 10949              	 .cfi_endproc
 10950              	.LFE748:
 10952              	 .section .rodata
 10953 06cf 00       	 .align 2
 10954              	.LC129:
 10955 06d0 25303278 	 .ascii "%02x\000"
 10955      00
 10956              	 .section .text.writeSignature,"ax",%progbits
 10957              	 .align 2
 10958              	 .thumb
 10959              	 .thumb_func
 10961              	writeSignature:
 10962              	.LFB749:
2280:../cleanflight/src/main/interface/cli.c **** 
2281:../cleanflight/src/main/interface/cli.c **** #if defined(USE_SIGNATURE)
2282:../cleanflight/src/main/interface/cli.c **** static void writeSignature(char *signatureStr, uint8_t *signature)
2283:../cleanflight/src/main/interface/cli.c **** {
 10963              	 .loc 13 2283 0
 10964              	 .cfi_startproc
 10965              	 
 10966              	 
 10967 0000 80B5     	 push {r7,lr}
 10968              	.LCFI451:
 10969              	 .cfi_def_cfa_offset 8
 10970              	 .cfi_offset 7,-8
 10971              	 .cfi_offset 14,-4
 10972 0002 84B0     	 sub sp,sp,#16
 10973              	.LCFI452:
 10974              	 .cfi_def_cfa_offset 24
 10975 0004 00AF     	 add r7,sp,#0
 10976              	.LCFI453:
 10977              	 .cfi_def_cfa_register 7
 10978 0006 7860     	 str r0,[r7,#4]
 10979 0008 3960     	 str r1,[r7]
 10980              	.LBB74:
2284:../cleanflight/src/main/interface/cli.c ****     for (unsigned i = 0; i < SIGNATURE_LENGTH; i++) {
 10981              	 .loc 13 2284 0
 10982 000a 0023     	 movs r3,#0
 10983 000c FB60     	 str r3,[r7,#12]
 10984 000e 0FE0     	 b .L646
 10985              	.L647:
2285:../cleanflight/src/main/interface/cli.c ****         tfp_sprintf(&signatureStr[2 * i], "%02x", signature[i]);
 10986              	 .loc 13 2285 0 discriminator 3
 10987 0010 FB68     	 ldr r3,[r7,#12]
 10988 0012 5B00     	 lsls r3,r3,#1
 10989 0014 7A68     	 ldr r2,[r7,#4]
 10990 0016 D118     	 adds r1,r2,r3
 10991 0018 3A68     	 ldr r2,[r7]
 10992 001a FB68     	 ldr r3,[r7,#12]
 10993 001c 1344     	 add r3,r3,r2
 10994 001e 1B78     	 ldrb r3,[r3]
 10995 0020 0846     	 mov r0,r1
 10996 0022 0649     	 ldr r1,.L648
 10997 0024 1A46     	 mov r2,r3
 10998 0026 FFF7FEFF 	 bl tfp_sprintf
2284:../cleanflight/src/main/interface/cli.c ****     for (unsigned i = 0; i < SIGNATURE_LENGTH; i++) {
 10999              	 .loc 13 2284 0 discriminator 3
 11000 002a FB68     	 ldr r3,[r7,#12]
 11001 002c 0133     	 adds r3,r3,#1
 11002 002e FB60     	 str r3,[r7,#12]
 11003              	.L646:
2284:../cleanflight/src/main/interface/cli.c ****     for (unsigned i = 0; i < SIGNATURE_LENGTH; i++) {
 11004              	 .loc 13 2284 0 is_stmt 0 discriminator 1
 11005 0030 FB68     	 ldr r3,[r7,#12]
 11006 0032 1F2B     	 cmp r3,#31
 11007 0034 ECD9     	 bls .L647
 11008              	.LBE74:
2286:../cleanflight/src/main/interface/cli.c ****     }
2287:../cleanflight/src/main/interface/cli.c **** }
 11009              	 .loc 13 2287 0 is_stmt 1
 11010 0036 1037     	 adds r7,r7,#16
 11011              	.LCFI454:
 11012              	 .cfi_def_cfa_offset 8
 11013 0038 BD46     	 mov sp,r7
 11014              	.LCFI455:
 11015              	 .cfi_def_cfa_register 13
 11016              	 
 11017 003a 80BD     	 pop {r7,pc}
 11018              	.L649:
 11019              	 .align 2
 11020              	.L648:
 11021 003c D0060000 	 .word .LC129
 11022              	 .cfi_endproc
 11023              	.LFE749:
 11025              	 .section .rodata
 11026 06d5 000000   	 .align 2
 11027              	.LC130:
 11028 06d8 496E7661 	 .ascii "Invalid length: %d (expected: %d)\000"
 11028      6C696420 
 11028      6C656E67 
 11028      74683A20 
 11028      25642028 
 11029 06fa 0000     	 .align 2
 11030              	.LC131:
 11031 06fc 496E7661 	 .ascii "Invalid character found: %c\000"
 11031      6C696420 
 11031      63686172 
 11031      61637465 
 11031      7220666F 
 11032              	 .align 2
 11033              	.LC132:
 11034 0718 7369676E 	 .ascii "signature\000"
 11034      61747572 
 11034      6500
 11035 0722 0000     	 .align 2
 11036              	.LC133:
 11037 0724 7369676E 	 .ascii "signature %s\000"
 11037      61747572 
 11037      65202573 
 11037      00
 11038              	 .section .text.cliSignature,"ax",%progbits
 11039              	 .align 2
 11040              	 .thumb
 11041              	 .thumb_func
 11043              	cliSignature:
 11044              	.LFB750:
2288:../cleanflight/src/main/interface/cli.c **** 
2289:../cleanflight/src/main/interface/cli.c **** static void cliSignature(char *cmdline)
2290:../cleanflight/src/main/interface/cli.c **** {
 11045              	 .loc 13 2290 0
 11046              	 .cfi_startproc
 11047              	 
 11048              	 
 11049 0000 80B5     	 push {r7,lr}
 11050              	.LCFI456:
 11051              	 .cfi_def_cfa_offset 8
 11052              	 .cfi_offset 7,-8
 11053              	 .cfi_offset 14,-4
 11054 0002 A0B0     	 sub sp,sp,#128
 11055              	.LCFI457:
 11056              	 .cfi_def_cfa_offset 136
 11057 0004 00AF     	 add r7,sp,#0
 11058              	.LCFI458:
 11059              	 .cfi_def_cfa_register 7
 11060 0006 7860     	 str r0,[r7,#4]
2291:../cleanflight/src/main/interface/cli.c ****     const int len = strlen(cmdline);
 11061              	 .loc 13 2291 0
 11062 0008 7868     	 ldr r0,[r7,#4]
 11063 000a FFF7FEFF 	 bl strlen
 11064 000e 0346     	 mov r3,r0
 11065 0010 BB67     	 str r3,[r7,#120]
2292:../cleanflight/src/main/interface/cli.c **** 
2293:../cleanflight/src/main/interface/cli.c ****     uint8_t signature[SIGNATURE_LENGTH] = {0};
 11066              	 .loc 13 2293 0
 11067 0012 07F15403 	 add r3,r7,#84
 11068 0016 0022     	 movs r2,#0
 11069 0018 1A60     	 str r2,[r3]
 11070 001a 0433     	 adds r3,r3,#4
 11071 001c 0022     	 movs r2,#0
 11072 001e 1A60     	 str r2,[r3]
 11073 0020 0433     	 adds r3,r3,#4
 11074 0022 0022     	 movs r2,#0
 11075 0024 1A60     	 str r2,[r3]
 11076 0026 0433     	 adds r3,r3,#4
 11077 0028 0022     	 movs r2,#0
 11078 002a 1A60     	 str r2,[r3]
 11079 002c 0433     	 adds r3,r3,#4
 11080 002e 0022     	 movs r2,#0
 11081 0030 1A60     	 str r2,[r3]
 11082 0032 0433     	 adds r3,r3,#4
 11083 0034 0022     	 movs r2,#0
 11084 0036 1A60     	 str r2,[r3]
 11085 0038 0433     	 adds r3,r3,#4
 11086 003a 0022     	 movs r2,#0
 11087 003c 1A60     	 str r2,[r3]
 11088 003e 0433     	 adds r3,r3,#4
 11089 0040 0022     	 movs r2,#0
 11090 0042 1A60     	 str r2,[r3]
 11091 0044 0433     	 adds r3,r3,#4
2294:../cleanflight/src/main/interface/cli.c ****     if (len > 0) {
 11092              	 .loc 13 2294 0
 11093 0046 BB6F     	 ldr r3,[r7,#120]
 11094 0048 002B     	 cmp r3,#0
 11095 004a 3EDD     	 ble .L651
2295:../cleanflight/src/main/interface/cli.c ****         if (len != 2 * SIGNATURE_LENGTH) {
 11096              	 .loc 13 2295 0
 11097 004c BB6F     	 ldr r3,[r7,#120]
 11098 004e 402B     	 cmp r3,#64
 11099 0050 05D0     	 beq .L652
2296:../cleanflight/src/main/interface/cli.c ****             cliPrintErrorLinef("Invalid length: %d (expected: %d)", len, 2 * SIGNATURE_LENGTH);
 11100              	 .loc 13 2296 0
 11101 0052 4C48     	 ldr r0,.L663
 11102 0054 B96F     	 ldr r1,[r7,#120]
 11103 0056 4022     	 movs r2,#64
 11104 0058 FFF7FEFF 	 bl cliPrintErrorLinef
2297:../cleanflight/src/main/interface/cli.c **** 
2298:../cleanflight/src/main/interface/cli.c ****             return;
 11105              	 .loc 13 2298 0
 11106 005c 8FE0     	 b .L650
 11107              	.L652:
 11108              	.LBB75:
2299:../cleanflight/src/main/interface/cli.c ****         }
2300:../cleanflight/src/main/interface/cli.c **** 
2301:../cleanflight/src/main/interface/cli.c **** #define BLOCK_SIZE 2
2302:../cleanflight/src/main/interface/cli.c ****         for (unsigned i = 0; i < SIGNATURE_LENGTH; i++) {
 11109              	 .loc 13 2302 0
 11110 005e 0023     	 movs r3,#0
 11111 0060 FB67     	 str r3,[r7,#124]
 11112 0062 2FE0     	 b .L654
 11113              	.L656:
 11114              	.LBB76:
2303:../cleanflight/src/main/interface/cli.c ****             char temp[BLOCK_SIZE + 1];
2304:../cleanflight/src/main/interface/cli.c ****             strncpy(temp, &cmdline[i * BLOCK_SIZE], BLOCK_SIZE);
 11115              	 .loc 13 2304 0
 11116 0064 FB6F     	 ldr r3,[r7,#124]
 11117 0066 5B00     	 lsls r3,r3,#1
 11118 0068 7A68     	 ldr r2,[r7,#4]
 11119 006a 1344     	 add r3,r3,r2
 11120 006c 07F10C02 	 add r2,r7,#12
 11121 0070 1046     	 mov r0,r2
 11122 0072 1946     	 mov r1,r3
 11123 0074 0222     	 movs r2,#2
 11124 0076 FFF7FEFF 	 bl strncpy
2305:../cleanflight/src/main/interface/cli.c ****             temp[BLOCK_SIZE] = '\0';
 11125              	 .loc 13 2305 0
 11126 007a 0023     	 movs r3,#0
 11127 007c BB73     	 strb r3,[r7,#14]
2306:../cleanflight/src/main/interface/cli.c ****             char *end;
2307:../cleanflight/src/main/interface/cli.c ****             unsigned result = strtoul(temp, &end, 16);
 11128              	 .loc 13 2307 0
 11129 007e 07F10C02 	 add r2,r7,#12
 11130 0082 07F10803 	 add r3,r7,#8
 11131 0086 1046     	 mov r0,r2
 11132 0088 1946     	 mov r1,r3
 11133 008a 1022     	 movs r2,#16
 11134 008c FFF7FEFF 	 bl strtoul
 11135 0090 7867     	 str r0,[r7,#116]
2308:../cleanflight/src/main/interface/cli.c ****             if (end == &temp[BLOCK_SIZE]) {
 11136              	 .loc 13 2308 0
 11137 0092 BA68     	 ldr r2,[r7,#8]
 11138 0094 07F10C03 	 add r3,r7,#12
 11139 0098 0233     	 adds r3,r3,#2
 11140 009a 9A42     	 cmp r2,r3
 11141 009c 0BD1     	 bne .L655
2309:../cleanflight/src/main/interface/cli.c ****                 signature[i] = result;
 11142              	 .loc 13 2309 0
 11143 009e 7B6F     	 ldr r3,[r7,#116]
 11144 00a0 D9B2     	 uxtb r1,r3
 11145 00a2 07F15402 	 add r2,r7,#84
 11146 00a6 FB6F     	 ldr r3,[r7,#124]
 11147 00a8 1344     	 add r3,r3,r2
 11148 00aa 0A46     	 mov r2,r1
 11149 00ac 1A70     	 strb r2,[r3]
 11150              	.LBE76:
2302:../cleanflight/src/main/interface/cli.c ****             char temp[BLOCK_SIZE + 1];
 11151              	 .loc 13 2302 0
 11152 00ae FB6F     	 ldr r3,[r7,#124]
 11153 00b0 0133     	 adds r3,r3,#1
 11154 00b2 FB67     	 str r3,[r7,#124]
 11155 00b4 06E0     	 b .L654
 11156              	.L655:
 11157              	.LBB77:
2310:../cleanflight/src/main/interface/cli.c ****             } else {
2311:../cleanflight/src/main/interface/cli.c ****                 cliPrintErrorLinef("Invalid character found: %c", end[0]);
 11158              	 .loc 13 2311 0
 11159 00b6 BB68     	 ldr r3,[r7,#8]
 11160 00b8 1B78     	 ldrb r3,[r3]
 11161 00ba 3348     	 ldr r0,.L663+4
 11162 00bc 1946     	 mov r1,r3
 11163 00be FFF7FEFF 	 bl cliPrintErrorLinef
 11164 00c2 5CE0     	 b .L650
 11165              	.L654:
 11166              	.LBE77:
2302:../cleanflight/src/main/interface/cli.c ****             char temp[BLOCK_SIZE + 1];
 11167              	 .loc 13 2302 0 discriminator 1
 11168 00c4 FB6F     	 ldr r3,[r7,#124]
 11169 00c6 1F2B     	 cmp r3,#31
 11170 00c8 CCD9     	 bls .L656
 11171              	.L651:
 11172              	.LBE75:
2312:../cleanflight/src/main/interface/cli.c **** 
2313:../cleanflight/src/main/interface/cli.c ****                 return;
2314:../cleanflight/src/main/interface/cli.c ****             }
2315:../cleanflight/src/main/interface/cli.c ****         }
2316:../cleanflight/src/main/interface/cli.c **** #undef BLOCK_SIZE
2317:../cleanflight/src/main/interface/cli.c ****     }
2318:../cleanflight/src/main/interface/cli.c **** 
2319:../cleanflight/src/main/interface/cli.c ****     char signatureStr[SIGNATURE_LENGTH * 2 + 1] = {0};
 11173              	 .loc 13 2319 0
 11174 00ca 07F11003 	 add r3,r7,#16
 11175 00ce 4122     	 movs r2,#65
 11176 00d0 1846     	 mov r0,r3
 11177 00d2 0021     	 movs r1,#0
 11178 00d4 FFF7FEFF 	 bl memset
2320:../cleanflight/src/main/interface/cli.c ****     if (len > 0 && signatureIsSet() && memcmp(signature, getSignature(), SIGNATURE_LENGTH)) {
 11179              	 .loc 13 2320 0
 11180 00d8 BB6F     	 ldr r3,[r7,#120]
 11181 00da 002B     	 cmp r3,#0
 11182 00dc 22DD     	 ble .L657
 11183              	 .loc 13 2320 0 is_stmt 0 discriminator 1
 11184 00de FFF7FEFF 	 bl signatureIsSet
 11185 00e2 0346     	 mov r3,r0
 11186 00e4 002B     	 cmp r3,#0
 11187 00e6 1DD0     	 beq .L657
 11188              	 .loc 13 2320 0 discriminator 2
 11189 00e8 FFF7FEFF 	 bl getSignature
 11190 00ec 0246     	 mov r2,r0
 11191 00ee 07F15403 	 add r3,r7,#84
 11192 00f2 1846     	 mov r0,r3
 11193 00f4 1146     	 mov r1,r2
 11194 00f6 2022     	 movs r2,#32
 11195 00f8 FFF7FEFF 	 bl memcmp
 11196 00fc 0346     	 mov r3,r0
 11197 00fe 002B     	 cmp r3,#0
 11198 0100 10D0     	 beq .L657
2321:../cleanflight/src/main/interface/cli.c ****         writeSignature(signatureStr, getSignature());
 11199              	 .loc 13 2321 0 is_stmt 1
 11200 0102 FFF7FEFF 	 bl getSignature
 11201 0106 0246     	 mov r2,r0
 11202 0108 07F11003 	 add r3,r7,#16
 11203 010c 1846     	 mov r0,r3
 11204 010e 1146     	 mov r1,r2
 11205 0110 FFF7FEFF 	 bl writeSignature
2322:../cleanflight/src/main/interface/cli.c ****         cliPrintErrorLinef(ERROR_MESSAGE, "signature", signatureStr);
 11206              	 .loc 13 2322 0
 11207 0114 07F11003 	 add r3,r7,#16
 11208 0118 1C48     	 ldr r0,.L663+8
 11209 011a 1D49     	 ldr r1,.L663+12
 11210 011c 1A46     	 mov r2,r3
 11211 011e FFF7FEFF 	 bl cliPrintErrorLinef
 11212 0122 2CE0     	 b .L650
 11213              	.L657:
2323:../cleanflight/src/main/interface/cli.c ****     } else {
2324:../cleanflight/src/main/interface/cli.c ****         if (len > 0) {
 11214              	 .loc 13 2324 0
 11215 0124 BB6F     	 ldr r3,[r7,#120]
 11216 0126 002B     	 cmp r3,#0
 11217 0128 11DD     	 ble .L659
2325:../cleanflight/src/main/interface/cli.c ****             setSignature(signature);
 11218              	 .loc 13 2325 0
 11219 012a 07F15403 	 add r3,r7,#84
 11220 012e 1846     	 mov r0,r3
 11221 0130 FFF7FEFF 	 bl setSignature
2326:../cleanflight/src/main/interface/cli.c **** 
2327:../cleanflight/src/main/interface/cli.c ****             signatureUpdated = true;
 11222              	 .loc 13 2327 0
 11223 0134 174B     	 ldr r3,.L663+16
 11224 0136 0122     	 movs r2,#1
 11225 0138 1A70     	 strb r2,[r3]
2328:../cleanflight/src/main/interface/cli.c **** 
2329:../cleanflight/src/main/interface/cli.c ****             writeSignature(signatureStr, getSignature());
 11226              	 .loc 13 2329 0
 11227 013a FFF7FEFF 	 bl getSignature
 11228 013e 0246     	 mov r2,r0
 11229 0140 07F11003 	 add r3,r7,#16
 11230 0144 1846     	 mov r0,r3
 11231 0146 1146     	 mov r1,r2
 11232 0148 FFF7FEFF 	 bl writeSignature
 11233 014c 11E0     	 b .L660
 11234              	.L659:
2330:../cleanflight/src/main/interface/cli.c ****         } else if (signatureUpdated || signatureIsSet()) {
 11235              	 .loc 13 2330 0
 11236 014e 114B     	 ldr r3,.L663+16
 11237 0150 1B78     	 ldrb r3,[r3]
 11238 0152 002B     	 cmp r3,#0
 11239 0154 04D1     	 bne .L661
 11240              	 .loc 13 2330 0 is_stmt 0 discriminator 1
 11241 0156 FFF7FEFF 	 bl signatureIsSet
 11242 015a 0346     	 mov r3,r0
 11243 015c 002B     	 cmp r3,#0
 11244 015e 08D0     	 beq .L660
 11245              	.L661:
2331:../cleanflight/src/main/interface/cli.c ****             writeSignature(signatureStr, getSignature());
 11246              	 .loc 13 2331 0 is_stmt 1
 11247 0160 FFF7FEFF 	 bl getSignature
 11248 0164 0246     	 mov r2,r0
 11249 0166 07F11003 	 add r3,r7,#16
 11250 016a 1846     	 mov r0,r3
 11251 016c 1146     	 mov r1,r2
 11252 016e FFF7FEFF 	 bl writeSignature
 11253              	.L660:
2332:../cleanflight/src/main/interface/cli.c ****         }
2333:../cleanflight/src/main/interface/cli.c **** 
2334:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("signature %s", signatureStr);
 11254              	 .loc 13 2334 0
 11255 0172 07F11003 	 add r3,r7,#16
 11256 0176 0848     	 ldr r0,.L663+20
 11257 0178 1946     	 mov r1,r3
 11258 017a FFF7FEFF 	 bl cliPrintLinef
 11259              	.L650:
2335:../cleanflight/src/main/interface/cli.c ****     }
2336:../cleanflight/src/main/interface/cli.c **** }
 11260              	 .loc 13 2336 0
 11261 017e 8037     	 adds r7,r7,#128
 11262              	.LCFI459:
 11263              	 .cfi_def_cfa_offset 8
 11264 0180 BD46     	 mov sp,r7
 11265              	.LCFI460:
 11266              	 .cfi_def_cfa_register 13
 11267              	 
 11268 0182 80BD     	 pop {r7,pc}
 11269              	.L664:
 11270              	 .align 2
 11271              	.L663:
 11272 0184 D8060000 	 .word .LC130
 11273 0188 FC060000 	 .word .LC131
 11274 018c 64060000 	 .word .LC124
 11275 0190 18070000 	 .word .LC132
 11276 0194 00000000 	 .word signatureUpdated
 11277 0198 24070000 	 .word .LC133
 11278              	 .cfi_endproc
 11279              	.LFE750:
 11281              	 .section .rodata
 11282 0731 000000   	 .align 2
 11283              	.LC134:
 11284 0734 6D63755F 	 .ascii "mcu_id %08x%08x%08x\000"
 11284      69642025 
 11284      30387825 
 11284      30387825 
 11284      30387800 
 11285              	 .section .text.cliMcuId,"ax",%progbits
 11286              	 .align 2
 11287              	 .thumb
 11288              	 .thumb_func
 11290              	cliMcuId:
 11291              	.LFB751:
2337:../cleanflight/src/main/interface/cli.c **** #endif
2338:../cleanflight/src/main/interface/cli.c **** 
2339:../cleanflight/src/main/interface/cli.c **** #undef ERROR_MESSAGE
2340:../cleanflight/src/main/interface/cli.c **** 
2341:../cleanflight/src/main/interface/cli.c **** #endif // USE_BOARD_INFO
2342:../cleanflight/src/main/interface/cli.c **** 
2343:../cleanflight/src/main/interface/cli.c **** static void cliMcuId(char *cmdline)
2344:../cleanflight/src/main/interface/cli.c **** {
 11292              	 .loc 13 2344 0
 11293              	 .cfi_startproc
 11294              	 
 11295              	 
 11296 0000 80B5     	 push {r7,lr}
 11297              	.LCFI461:
 11298              	 .cfi_def_cfa_offset 8
 11299              	 .cfi_offset 7,-8
 11300              	 .cfi_offset 14,-4
 11301 0002 82B0     	 sub sp,sp,#8
 11302              	.LCFI462:
 11303              	 .cfi_def_cfa_offset 16
 11304 0004 00AF     	 add r7,sp,#0
 11305              	.LCFI463:
 11306              	 .cfi_def_cfa_register 7
 11307 0006 7860     	 str r0,[r7,#4]
2345:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
2346:../cleanflight/src/main/interface/cli.c **** 
2347:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("mcu_id %08x%08x%08x", U_ID_0, U_ID_1, U_ID_2);
 11308              	 .loc 13 2347 0
 11309 0008 054B     	 ldr r3,.L666
 11310 000a 1968     	 ldr r1,[r3]
 11311 000c 054B     	 ldr r3,.L666+4
 11312 000e 1A68     	 ldr r2,[r3]
 11313 0010 054B     	 ldr r3,.L666+8
 11314 0012 1B68     	 ldr r3,[r3]
 11315 0014 0548     	 ldr r0,.L666+12
 11316 0016 FFF7FEFF 	 bl cliPrintLinef
2348:../cleanflight/src/main/interface/cli.c **** }
 11317              	 .loc 13 2348 0
 11318 001a 0837     	 adds r7,r7,#8
 11319              	.LCFI464:
 11320              	 .cfi_def_cfa_offset 8
 11321 001c BD46     	 mov sp,r7
 11322              	.LCFI465:
 11323              	 .cfi_def_cfa_register 13
 11324              	 
 11325 001e 80BD     	 pop {r7,pc}
 11326              	.L667:
 11327              	 .align 2
 11328              	.L666:
 11329 0020 00400050 	 .word 1342193664
 11330 0024 04400050 	 .word 1342193668
 11331 0028 08400050 	 .word 1342193672
 11332 002c 34070000 	 .word .LC134
 11333              	 .cfi_endproc
 11334              	.LFE751:
 11336              	 .section .rodata
 11337              	 .align 2
 11338              	.LC135:
 11339 0748 66656174 	 .ascii "feature -%s\000"
 11339      75726520 
 11339      2D257300 
 11340              	 .align 2
 11341              	.LC136:
 11342 0754 66656174 	 .ascii "feature %s\000"
 11342      75726520 
 11342      257300
 11343              	 .section .text.printFeature,"ax",%progbits
 11344              	 .align 2
 11345              	 .thumb
 11346              	 .thumb_func
 11348              	printFeature:
 11349              	.LFB752:
2349:../cleanflight/src/main/interface/cli.c **** 
2350:../cleanflight/src/main/interface/cli.c **** static void printFeature(uint8_t dumpMask, const featureConfig_t *featureConfig, const featureConfi
2351:../cleanflight/src/main/interface/cli.c **** {
 11350              	 .loc 13 2351 0
 11351              	 .cfi_startproc
 11352              	 
 11353              	 
 11354 0000 80B5     	 push {r7,lr}
 11355              	.LCFI466:
 11356              	 .cfi_def_cfa_offset 8
 11357              	 .cfi_offset 7,-8
 11358              	 .cfi_offset 14,-4
 11359 0002 8AB0     	 sub sp,sp,#40
 11360              	.LCFI467:
 11361              	 .cfi_def_cfa_offset 48
 11362 0004 00AF     	 add r7,sp,#0
 11363              	.LCFI468:
 11364              	 .cfi_def_cfa_register 7
 11365 0006 0346     	 mov r3,r0
 11366 0008 B960     	 str r1,[r7,#8]
 11367 000a 7A60     	 str r2,[r7,#4]
 11368 000c FB73     	 strb r3,[r7,#15]
2352:../cleanflight/src/main/interface/cli.c ****     const uint32_t mask = featureConfig->enabledFeatures;
 11369              	 .loc 13 2352 0
 11370 000e BB68     	 ldr r3,[r7,#8]
 11371 0010 1B68     	 ldr r3,[r3]
 11372 0012 FB61     	 str r3,[r7,#28]
2353:../cleanflight/src/main/interface/cli.c ****     const uint32_t defaultMask = featureConfigDefault->enabledFeatures;
 11373              	 .loc 13 2353 0
 11374 0014 7B68     	 ldr r3,[r7,#4]
 11375 0016 1B68     	 ldr r3,[r3]
 11376 0018 BB61     	 str r3,[r7,#24]
 11377              	.LBB78:
2354:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; featureNames[i]; i++) { // disabled features first
 11378              	 .loc 13 2354 0
 11379 001a 0023     	 movs r3,#0
 11380 001c 7B62     	 str r3,[r7,#36]
 11381 001e 3EE0     	 b .L669
 11382              	.L671:
2355:../cleanflight/src/main/interface/cli.c ****         if (strcmp(featureNames[i], emptyString) != 0) { //Skip unused
 11383              	 .loc 13 2355 0
 11384 0020 504A     	 ldr r2,.L676
 11385 0022 7B6A     	 ldr r3,[r7,#36]
 11386 0024 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11387 0028 4F4A     	 ldr r2,.L676+4
 11388 002a 1846     	 mov r0,r3
 11389 002c 1146     	 mov r1,r2
 11390 002e FFF7FEFF 	 bl strcmp
 11391 0032 0346     	 mov r3,r0
 11392 0034 002B     	 cmp r3,#0
 11393 0036 2FD0     	 beq .L670
 11394              	.LBB79:
2356:../cleanflight/src/main/interface/cli.c ****             const char *format = "feature -%s";
 11395              	 .loc 13 2356 0
 11396 0038 4C4B     	 ldr r3,.L676+8
 11397 003a 7B61     	 str r3,[r7,#20]
2357:../cleanflight/src/main/interface/cli.c ****             cliDefaultPrintLinef(dumpMask, (defaultMask | ~mask) & (1 << i), format, featureNames[i
 11398              	 .loc 13 2357 0
 11399 003c FB69     	 ldr r3,[r7,#28]
 11400 003e DA43     	 mvns r2,r3
 11401 0040 BB69     	 ldr r3,[r7,#24]
 11402 0042 1343     	 orrs r3,r3,r2
 11403 0044 7A6A     	 ldr r2,[r7,#36]
 11404 0046 0121     	 movs r1,#1
 11405 0048 01FA02F2 	 lsl r2,r1,r2
 11406 004c 1340     	 ands r3,r3,r2
 11407 004e 002B     	 cmp r3,#0
 11408 0050 14BF     	 ite ne
 11409 0052 0123     	 movne r3,#1
 11410 0054 0023     	 moveq r3,#0
 11411 0056 D9B2     	 uxtb r1,r3
 11412 0058 424A     	 ldr r2,.L676
 11413 005a 7B6A     	 ldr r3,[r7,#36]
 11414 005c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11415 0060 FA7B     	 ldrb r2,[r7,#15]
 11416 0062 1046     	 mov r0,r2
 11417 0064 7A69     	 ldr r2,[r7,#20]
 11418 0066 FFF7FEFF 	 bl cliDefaultPrintLinef
2358:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(dumpMask, (~defaultMask | mask) & (1 << i), format, featureNames[i]);
 11419              	 .loc 13 2358 0
 11420 006a BB69     	 ldr r3,[r7,#24]
 11421 006c DA43     	 mvns r2,r3
 11422 006e FB69     	 ldr r3,[r7,#28]
 11423 0070 1343     	 orrs r3,r3,r2
 11424 0072 7A6A     	 ldr r2,[r7,#36]
 11425 0074 0121     	 movs r1,#1
 11426 0076 01FA02F2 	 lsl r2,r1,r2
 11427 007a 1340     	 ands r3,r3,r2
 11428 007c 002B     	 cmp r3,#0
 11429 007e 14BF     	 ite ne
 11430 0080 0123     	 movne r3,#1
 11431 0082 0023     	 moveq r3,#0
 11432 0084 D9B2     	 uxtb r1,r3
 11433 0086 374A     	 ldr r2,.L676
 11434 0088 7B6A     	 ldr r3,[r7,#36]
 11435 008a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11436 008e FA7B     	 ldrb r2,[r7,#15]
 11437 0090 1046     	 mov r0,r2
 11438 0092 7A69     	 ldr r2,[r7,#20]
 11439 0094 FFF7FEFF 	 bl cliDumpPrintLinef
 11440              	.L670:
 11441              	.LBE79:
2354:../cleanflight/src/main/interface/cli.c ****         if (strcmp(featureNames[i], emptyString) != 0) { //Skip unused
 11442              	 .loc 13 2354 0 discriminator 2
 11443 0098 7B6A     	 ldr r3,[r7,#36]
 11444 009a 0133     	 adds r3,r3,#1
 11445 009c 7B62     	 str r3,[r7,#36]
 11446              	.L669:
2354:../cleanflight/src/main/interface/cli.c ****         if (strcmp(featureNames[i], emptyString) != 0) { //Skip unused
 11447              	 .loc 13 2354 0 is_stmt 0 discriminator 1
 11448 009e 314A     	 ldr r2,.L676
 11449 00a0 7B6A     	 ldr r3,[r7,#36]
 11450 00a2 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11451 00a6 002B     	 cmp r3,#0
 11452 00a8 BAD1     	 bne .L671
 11453              	.LBE78:
 11454              	.LBB80:
2359:../cleanflight/src/main/interface/cli.c ****         }
2360:../cleanflight/src/main/interface/cli.c ****     }
2361:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; featureNames[i]; i++) {  // enabled features
 11455              	 .loc 13 2361 0 is_stmt 1
 11456 00aa 0023     	 movs r3,#0
 11457 00ac 3B62     	 str r3,[r7,#32]
 11458 00ae 50E0     	 b .L672
 11459              	.L675:
2362:../cleanflight/src/main/interface/cli.c ****         if (strcmp(featureNames[i], emptyString) != 0) { //Skip unused
 11460              	 .loc 13 2362 0
 11461 00b0 2C4A     	 ldr r2,.L676
 11462 00b2 3B6A     	 ldr r3,[r7,#32]
 11463 00b4 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11464 00b8 2B4A     	 ldr r2,.L676+4
 11465 00ba 1846     	 mov r0,r3
 11466 00bc 1146     	 mov r1,r2
 11467 00be FFF7FEFF 	 bl strcmp
 11468 00c2 0346     	 mov r3,r0
 11469 00c4 002B     	 cmp r3,#0
 11470 00c6 41D0     	 beq .L673
 11471              	.LBB81:
2363:../cleanflight/src/main/interface/cli.c ****             const char *format = "feature %s";
 11472              	 .loc 13 2363 0
 11473 00c8 294B     	 ldr r3,.L676+12
 11474 00ca 3B61     	 str r3,[r7,#16]
2364:../cleanflight/src/main/interface/cli.c ****             if (defaultMask & (1 << i)) {
 11475              	 .loc 13 2364 0
 11476 00cc 3B6A     	 ldr r3,[r7,#32]
 11477 00ce 0122     	 movs r2,#1
 11478 00d0 02FA03F3 	 lsl r3,r2,r3
 11479 00d4 1A46     	 mov r2,r3
 11480 00d6 BB69     	 ldr r3,[r7,#24]
 11481 00d8 1340     	 ands r3,r3,r2
 11482 00da 002B     	 cmp r3,#0
 11483 00dc 16D0     	 beq .L674
2365:../cleanflight/src/main/interface/cli.c ****                 cliDefaultPrintLinef(dumpMask, (~defaultMask | mask) & (1 << i), format, featureNam
 11484              	 .loc 13 2365 0
 11485 00de BB69     	 ldr r3,[r7,#24]
 11486 00e0 DA43     	 mvns r2,r3
 11487 00e2 FB69     	 ldr r3,[r7,#28]
 11488 00e4 1343     	 orrs r3,r3,r2
 11489 00e6 3A6A     	 ldr r2,[r7,#32]
 11490 00e8 0121     	 movs r1,#1
 11491 00ea 01FA02F2 	 lsl r2,r1,r2
 11492 00ee 1340     	 ands r3,r3,r2
 11493 00f0 002B     	 cmp r3,#0
 11494 00f2 14BF     	 ite ne
 11495 00f4 0123     	 movne r3,#1
 11496 00f6 0023     	 moveq r3,#0
 11497 00f8 D9B2     	 uxtb r1,r3
 11498 00fa 1A4A     	 ldr r2,.L676
 11499 00fc 3B6A     	 ldr r3,[r7,#32]
 11500 00fe 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11501 0102 FA7B     	 ldrb r2,[r7,#15]
 11502 0104 1046     	 mov r0,r2
 11503 0106 3A69     	 ldr r2,[r7,#16]
 11504 0108 FFF7FEFF 	 bl cliDefaultPrintLinef
 11505              	.L674:
2366:../cleanflight/src/main/interface/cli.c ****             }
2367:../cleanflight/src/main/interface/cli.c ****             if (mask & (1 << i)) {
 11506              	 .loc 13 2367 0
 11507 010c 3B6A     	 ldr r3,[r7,#32]
 11508 010e 0122     	 movs r2,#1
 11509 0110 02FA03F3 	 lsl r3,r2,r3
 11510 0114 1A46     	 mov r2,r3
 11511 0116 FB69     	 ldr r3,[r7,#28]
 11512 0118 1340     	 ands r3,r3,r2
 11513 011a 002B     	 cmp r3,#0
 11514 011c 16D0     	 beq .L673
2368:../cleanflight/src/main/interface/cli.c ****                 cliDumpPrintLinef(dumpMask, (defaultMask | ~mask) & (1 << i), format, featureNames[
 11515              	 .loc 13 2368 0
 11516 011e FB69     	 ldr r3,[r7,#28]
 11517 0120 DA43     	 mvns r2,r3
 11518 0122 BB69     	 ldr r3,[r7,#24]
 11519 0124 1343     	 orrs r3,r3,r2
 11520 0126 3A6A     	 ldr r2,[r7,#32]
 11521 0128 0121     	 movs r1,#1
 11522 012a 01FA02F2 	 lsl r2,r1,r2
 11523 012e 1340     	 ands r3,r3,r2
 11524 0130 002B     	 cmp r3,#0
 11525 0132 14BF     	 ite ne
 11526 0134 0123     	 movne r3,#1
 11527 0136 0023     	 moveq r3,#0
 11528 0138 D9B2     	 uxtb r1,r3
 11529 013a 0A4A     	 ldr r2,.L676
 11530 013c 3B6A     	 ldr r3,[r7,#32]
 11531 013e 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11532 0142 FA7B     	 ldrb r2,[r7,#15]
 11533 0144 1046     	 mov r0,r2
 11534 0146 3A69     	 ldr r2,[r7,#16]
 11535 0148 FFF7FEFF 	 bl cliDumpPrintLinef
 11536              	.L673:
 11537              	.LBE81:
2361:../cleanflight/src/main/interface/cli.c ****         if (strcmp(featureNames[i], emptyString) != 0) { //Skip unused
 11538              	 .loc 13 2361 0 discriminator 2
 11539 014c 3B6A     	 ldr r3,[r7,#32]
 11540 014e 0133     	 adds r3,r3,#1
 11541 0150 3B62     	 str r3,[r7,#32]
 11542              	.L672:
2361:../cleanflight/src/main/interface/cli.c ****         if (strcmp(featureNames[i], emptyString) != 0) { //Skip unused
 11543              	 .loc 13 2361 0 is_stmt 0 discriminator 1
 11544 0152 044A     	 ldr r2,.L676
 11545 0154 3B6A     	 ldr r3,[r7,#32]
 11546 0156 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11547 015a 002B     	 cmp r3,#0
 11548 015c A8D1     	 bne .L675
 11549              	.LBE80:
2369:../cleanflight/src/main/interface/cli.c ****             }
2370:../cleanflight/src/main/interface/cli.c ****         }
2371:../cleanflight/src/main/interface/cli.c ****     }
2372:../cleanflight/src/main/interface/cli.c **** }
 11550              	 .loc 13 2372 0 is_stmt 1
 11551 015e 2837     	 adds r7,r7,#40
 11552              	.LCFI469:
 11553              	 .cfi_def_cfa_offset 8
 11554 0160 BD46     	 mov sp,r7
 11555              	.LCFI470:
 11556              	 .cfi_def_cfa_register 13
 11557              	 
 11558 0162 80BD     	 pop {r7,pc}
 11559              	.L677:
 11560              	 .align 2
 11561              	.L676:
 11562 0164 00000000 	 .word featureNames
 11563 0168 04000000 	 .word .LC1
 11564 016c 48070000 	 .word .LC135
 11565 0170 54070000 	 .word .LC136
 11566              	 .cfi_endproc
 11567              	.LFE752:
 11569              	 .section .rodata
 11570 075f 00       	 .align 2
 11571              	.LC137:
 11572 0760 456E6162 	 .ascii "Enabled: \000"
 11572      6C65643A 
 11572      2000
 11573 076a 0000     	 .align 2
 11574              	.LC138:
 11575 076c 25732000 	 .ascii "%s \000"
 11576              	 .align 2
 11577              	.LC139:
 11578 0770 6C697374 	 .ascii "list\000"
 11578      00
 11579 0775 000000   	 .align 2
 11580              	.LC140:
 11581 0778 41766169 	 .ascii "Available:\000"
 11581      6C61626C 
 11581      653A00
 11582 0783 00       	 .align 2
 11583              	.LC141:
 11584 0784 20257300 	 .ascii " %s\000"
 11585              	 .align 2
 11586              	.LC142:
 11587 0788 756E6176 	 .ascii "unavailable\000"
 11587      61696C61 
 11587      626C6500 
 11588              	 .align 2
 11589              	.LC143:
 11590 0794 44697361 	 .ascii "Disabled\000"
 11590      626C6564 
 11590      00
 11591 079d 000000   	 .align 2
 11592              	.LC144:
 11593 07a0 456E6162 	 .ascii "Enabled\000"
 11593      6C656400 
 11594              	 .section .text.cliFeature,"ax",%progbits
 11595              	 .align 2
 11596              	 .thumb
 11597              	 .thumb_func
 11599              	cliFeature:
 11600              	.LFB753:
2373:../cleanflight/src/main/interface/cli.c **** 
2374:../cleanflight/src/main/interface/cli.c **** static void cliFeature(char *cmdline)
2375:../cleanflight/src/main/interface/cli.c **** {
 11601              	 .loc 13 2375 0
 11602              	 .cfi_startproc
 11603              	 
 11604              	 
 11605 0000 80B5     	 push {r7,lr}
 11606              	.LCFI471:
 11607              	 .cfi_def_cfa_offset 8
 11608              	 .cfi_offset 7,-8
 11609              	 .cfi_offset 14,-4
 11610 0002 88B0     	 sub sp,sp,#32
 11611              	.LCFI472:
 11612              	 .cfi_def_cfa_offset 40
 11613 0004 00AF     	 add r7,sp,#0
 11614              	.LCFI473:
 11615              	 .cfi_def_cfa_register 7
 11616 0006 7860     	 str r0,[r7,#4]
2376:../cleanflight/src/main/interface/cli.c ****     uint32_t len = strlen(cmdline);
 11617              	 .loc 13 2376 0
 11618 0008 7868     	 ldr r0,[r7,#4]
 11619 000a FFF7FEFF 	 bl strlen
 11620 000e F861     	 str r0,[r7,#28]
2377:../cleanflight/src/main/interface/cli.c ****     uint32_t mask = featureMask();
 11621              	 .loc 13 2377 0
 11622 0010 FFF7FEFF 	 bl featureMask
 11623 0014 B860     	 str r0,[r7,#8]
2378:../cleanflight/src/main/interface/cli.c **** 
2379:../cleanflight/src/main/interface/cli.c ****     if (len == 0) {
 11624              	 .loc 13 2379 0
 11625 0016 FB69     	 ldr r3,[r7,#28]
 11626 0018 002B     	 cmp r3,#0
 11627 001a 23D1     	 bne .L679
2380:../cleanflight/src/main/interface/cli.c ****         cliPrint("Enabled: ");
 11628              	 .loc 13 2380 0
 11629 001c 5348     	 ldr r0,.L697
 11630 001e FFF7FEFF 	 bl cliPrint
 11631              	.LBB82:
2381:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; ; i++) {
 11632              	 .loc 13 2381 0
 11633 0022 0023     	 movs r3,#0
 11634 0024 BB61     	 str r3,[r7,#24]
 11635              	.L683:
2382:../cleanflight/src/main/interface/cli.c ****             if (featureNames[i] == NULL)
 11636              	 .loc 13 2382 0
 11637 0026 524A     	 ldr r2,.L697+4
 11638 0028 BB69     	 ldr r3,[r7,#24]
 11639 002a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11640 002e 002B     	 cmp r3,#0
 11641 0030 03D1     	 bne .L680
2383:../cleanflight/src/main/interface/cli.c ****                 break;
 11642              	 .loc 13 2383 0
 11643 0032 00BF     	 nop
 11644              	.LBE82:
2384:../cleanflight/src/main/interface/cli.c ****             if (mask & (1 << i))
2385:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%s ", featureNames[i]);
2386:../cleanflight/src/main/interface/cli.c ****         }
2387:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 11645              	 .loc 13 2387 0
 11646 0034 FFF7FEFF 	 bl cliPrintLinefeed
 11647 0038 94E0     	 b .L678
 11648              	.L680:
 11649              	.LBB83:
2384:../cleanflight/src/main/interface/cli.c ****             if (mask & (1 << i))
 11650              	 .loc 13 2384 0
 11651 003a BB69     	 ldr r3,[r7,#24]
 11652 003c 0122     	 movs r2,#1
 11653 003e 02FA03F3 	 lsl r3,r2,r3
 11654 0042 1A46     	 mov r2,r3
 11655 0044 BB68     	 ldr r3,[r7,#8]
 11656 0046 1340     	 ands r3,r3,r2
 11657 0048 002B     	 cmp r3,#0
 11658 004a 07D0     	 beq .L682
2385:../cleanflight/src/main/interface/cli.c ****         }
 11659              	 .loc 13 2385 0
 11660 004c 484A     	 ldr r2,.L697+4
 11661 004e BB69     	 ldr r3,[r7,#24]
 11662 0050 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11663 0054 4748     	 ldr r0,.L697+8
 11664 0056 1946     	 mov r1,r3
 11665 0058 FFF7FEFF 	 bl cliPrintf
 11666              	.L682:
2381:../cleanflight/src/main/interface/cli.c ****             if (featureNames[i] == NULL)
 11667              	 .loc 13 2381 0
 11668 005c BB69     	 ldr r3,[r7,#24]
 11669 005e 0133     	 adds r3,r3,#1
 11670 0060 BB61     	 str r3,[r7,#24]
2386:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 11671              	 .loc 13 2386 0
 11672 0062 E0E7     	 b .L683
 11673              	.L679:
 11674              	.LBE83:
2388:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "list", len) == 0) {
 11675              	 .loc 13 2388 0
 11676 0064 7868     	 ldr r0,[r7,#4]
 11677 0066 4449     	 ldr r1,.L697+12
 11678 0068 FA69     	 ldr r2,[r7,#28]
 11679 006a FFF7FEFF 	 bl strncasecmp
 11680 006e 0346     	 mov r3,r0
 11681 0070 002B     	 cmp r3,#0
 11682 0072 26D1     	 bne .L685
2389:../cleanflight/src/main/interface/cli.c ****         cliPrint("Available:");
 11683              	 .loc 13 2389 0
 11684 0074 4148     	 ldr r0,.L697+16
 11685 0076 FFF7FEFF 	 bl cliPrint
 11686              	.LBB84:
2390:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; ; i++) {
 11687              	 .loc 13 2390 0
 11688 007a 0023     	 movs r3,#0
 11689 007c 7B61     	 str r3,[r7,#20]
 11690              	.L689:
2391:../cleanflight/src/main/interface/cli.c ****             if (featureNames[i] == NULL)
 11691              	 .loc 13 2391 0
 11692 007e 3C4A     	 ldr r2,.L697+4
 11693 0080 7B69     	 ldr r3,[r7,#20]
 11694 0082 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11695 0086 002B     	 cmp r3,#0
 11696 0088 03D1     	 bne .L686
2392:../cleanflight/src/main/interface/cli.c ****                 break;
 11697              	 .loc 13 2392 0
 11698 008a 00BF     	 nop
 11699              	.LBE84:
2393:../cleanflight/src/main/interface/cli.c ****             if (strcmp(featureNames[i], emptyString) != 0) //Skip unused
2394:../cleanflight/src/main/interface/cli.c ****                 cliPrintf(" %s", featureNames[i]);
2395:../cleanflight/src/main/interface/cli.c ****         }
2396:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 11700              	 .loc 13 2396 0
 11701 008c FFF7FEFF 	 bl cliPrintLinefeed
2397:../cleanflight/src/main/interface/cli.c ****         return;
 11702              	 .loc 13 2397 0
 11703 0090 68E0     	 b .L678
 11704              	.L686:
 11705              	.LBB85:
2393:../cleanflight/src/main/interface/cli.c ****             if (strcmp(featureNames[i], emptyString) != 0) //Skip unused
 11706              	 .loc 13 2393 0
 11707 0092 374A     	 ldr r2,.L697+4
 11708 0094 7B69     	 ldr r3,[r7,#20]
 11709 0096 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11710 009a 394A     	 ldr r2,.L697+20
 11711 009c 1846     	 mov r0,r3
 11712 009e 1146     	 mov r1,r2
 11713 00a0 FFF7FEFF 	 bl strcmp
 11714 00a4 0346     	 mov r3,r0
 11715 00a6 002B     	 cmp r3,#0
 11716 00a8 07D0     	 beq .L688
2394:../cleanflight/src/main/interface/cli.c ****         }
 11717              	 .loc 13 2394 0
 11718 00aa 314A     	 ldr r2,.L697+4
 11719 00ac 7B69     	 ldr r3,[r7,#20]
 11720 00ae 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11721 00b2 3448     	 ldr r0,.L697+24
 11722 00b4 1946     	 mov r1,r3
 11723 00b6 FFF7FEFF 	 bl cliPrintf
 11724              	.L688:
2390:../cleanflight/src/main/interface/cli.c ****             if (featureNames[i] == NULL)
 11725              	 .loc 13 2390 0
 11726 00ba 7B69     	 ldr r3,[r7,#20]
 11727 00bc 0133     	 adds r3,r3,#1
 11728 00be 7B61     	 str r3,[r7,#20]
2395:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 11729              	 .loc 13 2395 0
 11730 00c0 DDE7     	 b .L689
 11731              	.L685:
 11732              	.LBE85:
 11733              	.LBB86:
2398:../cleanflight/src/main/interface/cli.c ****     } else {
2399:../cleanflight/src/main/interface/cli.c ****         bool remove = false;
 11734              	 .loc 13 2399 0
 11735 00c2 0023     	 movs r3,#0
 11736 00c4 FB74     	 strb r3,[r7,#19]
2400:../cleanflight/src/main/interface/cli.c ****         if (cmdline[0] == '-') {
 11737              	 .loc 13 2400 0
 11738 00c6 7B68     	 ldr r3,[r7,#4]
 11739 00c8 1B78     	 ldrb r3,[r3]
 11740 00ca 2D2B     	 cmp r3,#45
 11741 00cc 07D1     	 bne .L690
2401:../cleanflight/src/main/interface/cli.c ****             // remove feature
2402:../cleanflight/src/main/interface/cli.c ****             remove = true;
 11742              	 .loc 13 2402 0
 11743 00ce 0123     	 movs r3,#1
 11744 00d0 FB74     	 strb r3,[r7,#19]
2403:../cleanflight/src/main/interface/cli.c ****             cmdline++; // skip over -
 11745              	 .loc 13 2403 0
 11746 00d2 7B68     	 ldr r3,[r7,#4]
 11747 00d4 0133     	 adds r3,r3,#1
 11748 00d6 7B60     	 str r3,[r7,#4]
2404:../cleanflight/src/main/interface/cli.c ****             len--;
 11749              	 .loc 13 2404 0
 11750 00d8 FB69     	 ldr r3,[r7,#28]
 11751 00da 013B     	 subs r3,r3,#1
 11752 00dc FB61     	 str r3,[r7,#28]
 11753              	.L690:
 11754              	.LBB87:
2405:../cleanflight/src/main/interface/cli.c ****         }
2406:../cleanflight/src/main/interface/cli.c **** 
2407:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; ; i++) {
 11755              	 .loc 13 2407 0
 11756 00de 0023     	 movs r3,#0
 11757 00e0 FB60     	 str r3,[r7,#12]
 11758              	.L696:
2408:../cleanflight/src/main/interface/cli.c ****             if (featureNames[i] == NULL) {
 11759              	 .loc 13 2408 0
 11760 00e2 234A     	 ldr r2,.L697+4
 11761 00e4 FB68     	 ldr r3,[r7,#12]
 11762 00e6 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11763 00ea 002B     	 cmp r3,#0
 11764 00ec 03D1     	 bne .L691
2409:../cleanflight/src/main/interface/cli.c ****                 cliPrintErrorLinef("Invalid name");
 11765              	 .loc 13 2409 0
 11766 00ee 2648     	 ldr r0,.L697+28
 11767 00f0 FFF7FEFF 	 bl cliPrintErrorLinef
2410:../cleanflight/src/main/interface/cli.c ****                 break;
 11768              	 .loc 13 2410 0
 11769 00f4 36E0     	 b .L678
 11770              	.L691:
2411:../cleanflight/src/main/interface/cli.c ****             }
2412:../cleanflight/src/main/interface/cli.c **** 
2413:../cleanflight/src/main/interface/cli.c ****             if (strncasecmp(cmdline, featureNames[i], len) == 0) {
 11771              	 .loc 13 2413 0
 11772 00f6 1E4A     	 ldr r2,.L697+4
 11773 00f8 FB68     	 ldr r3,[r7,#12]
 11774 00fa 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11775 00fe 7868     	 ldr r0,[r7,#4]
 11776 0100 1946     	 mov r1,r3
 11777 0102 FA69     	 ldr r2,[r7,#28]
 11778 0104 FFF7FEFF 	 bl strncasecmp
 11779 0108 0346     	 mov r3,r0
 11780 010a 002B     	 cmp r3,#0
 11781 010c 26D1     	 bne .L692
2414:../cleanflight/src/main/interface/cli.c **** 
2415:../cleanflight/src/main/interface/cli.c ****                 mask = 1 << i;
 11782              	 .loc 13 2415 0
 11783 010e FB68     	 ldr r3,[r7,#12]
 11784 0110 0122     	 movs r2,#1
 11785 0112 02FA03F3 	 lsl r3,r2,r3
 11786 0116 BB60     	 str r3,[r7,#8]
2416:../cleanflight/src/main/interface/cli.c **** #ifndef USE_GPS
2417:../cleanflight/src/main/interface/cli.c ****                 if (mask & FEATURE_GPS) {
2418:../cleanflight/src/main/interface/cli.c ****                     cliPrintLine("unavailable");
2419:../cleanflight/src/main/interface/cli.c ****                     break;
2420:../cleanflight/src/main/interface/cli.c ****                 }
2421:../cleanflight/src/main/interface/cli.c **** #endif
2422:../cleanflight/src/main/interface/cli.c **** #ifndef USE_RANGEFINDER
2423:../cleanflight/src/main/interface/cli.c ****                 if (mask & FEATURE_RANGEFINDER) {
 11787              	 .loc 13 2423 0
 11788 0118 BB68     	 ldr r3,[r7,#8]
 11789 011a 03F40073 	 and r3,r3,#512
 11790 011e 002B     	 cmp r3,#0
 11791 0120 03D0     	 beq .L693
2424:../cleanflight/src/main/interface/cli.c ****                     cliPrintLine("unavailable");
 11792              	 .loc 13 2424 0
 11793 0122 1A48     	 ldr r0,.L697+32
 11794 0124 FFF7FEFF 	 bl cliPrintLine
2425:../cleanflight/src/main/interface/cli.c ****                     break;
 11795              	 .loc 13 2425 0
 11796 0128 1CE0     	 b .L678
 11797              	.L693:
2426:../cleanflight/src/main/interface/cli.c ****                 }
2427:../cleanflight/src/main/interface/cli.c **** #endif
2428:../cleanflight/src/main/interface/cli.c ****                 if (remove) {
 11798              	 .loc 13 2428 0
 11799 012a FB7C     	 ldrb r3,[r7,#19]
 11800 012c 002B     	 cmp r3,#0
 11801 012e 06D0     	 beq .L694
2429:../cleanflight/src/main/interface/cli.c ****                     featureClear(mask);
 11802              	 .loc 13 2429 0
 11803 0130 B868     	 ldr r0,[r7,#8]
 11804 0132 FFF7FEFF 	 bl featureClear
2430:../cleanflight/src/main/interface/cli.c ****                     cliPrint("Disabled");
 11805              	 .loc 13 2430 0
 11806 0136 1648     	 ldr r0,.L697+36
 11807 0138 FFF7FEFF 	 bl cliPrint
 11808 013c 05E0     	 b .L695
 11809              	.L694:
2431:../cleanflight/src/main/interface/cli.c ****                 } else {
2432:../cleanflight/src/main/interface/cli.c ****                     featureSet(mask);
 11810              	 .loc 13 2432 0
 11811 013e B868     	 ldr r0,[r7,#8]
 11812 0140 FFF7FEFF 	 bl featureSet
2433:../cleanflight/src/main/interface/cli.c ****                     cliPrint("Enabled");
 11813              	 .loc 13 2433 0
 11814 0144 1348     	 ldr r0,.L697+40
 11815 0146 FFF7FEFF 	 bl cliPrint
 11816              	.L695:
2434:../cleanflight/src/main/interface/cli.c ****                 }
2435:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef(" %s", featureNames[i]);
 11817              	 .loc 13 2435 0
 11818 014a 094A     	 ldr r2,.L697+4
 11819 014c FB68     	 ldr r3,[r7,#12]
 11820 014e 52F82330 	 ldr r3,[r2,r3,lsl#2]
 11821 0152 0C48     	 ldr r0,.L697+24
 11822 0154 1946     	 mov r1,r3
 11823 0156 FFF7FEFF 	 bl cliPrintLinef
2436:../cleanflight/src/main/interface/cli.c ****                 break;
 11824              	 .loc 13 2436 0
 11825 015a 03E0     	 b .L678
 11826              	.L692:
2407:../cleanflight/src/main/interface/cli.c ****             if (featureNames[i] == NULL) {
 11827              	 .loc 13 2407 0
 11828 015c FB68     	 ldr r3,[r7,#12]
 11829 015e 0133     	 adds r3,r3,#1
 11830 0160 FB60     	 str r3,[r7,#12]
2437:../cleanflight/src/main/interface/cli.c ****             }
2438:../cleanflight/src/main/interface/cli.c ****         }
 11831              	 .loc 13 2438 0
 11832 0162 BEE7     	 b .L696
 11833              	.L678:
 11834              	.LBE87:
 11835              	.LBE86:
2439:../cleanflight/src/main/interface/cli.c ****     }
2440:../cleanflight/src/main/interface/cli.c **** }
 11836              	 .loc 13 2440 0
 11837 0164 2037     	 adds r7,r7,#32
 11838              	.LCFI474:
 11839              	 .cfi_def_cfa_offset 8
 11840 0166 BD46     	 mov sp,r7
 11841              	.LCFI475:
 11842              	 .cfi_def_cfa_register 13
 11843              	 
 11844 0168 80BD     	 pop {r7,pc}
 11845              	.L698:
 11846 016a 00BF     	 .align 2
 11847              	.L697:
 11848 016c 60070000 	 .word .LC137
 11849 0170 00000000 	 .word featureNames
 11850 0174 6C070000 	 .word .LC138
 11851 0178 70070000 	 .word .LC139
 11852 017c 78070000 	 .word .LC140
 11853 0180 04000000 	 .word .LC1
 11854 0184 84070000 	 .word .LC141
 11855 0188 E4040000 	 .word .LC100
 11856 018c 88070000 	 .word .LC142
 11857 0190 94070000 	 .word .LC143
 11858 0194 A0070000 	 .word .LC144
 11859              	 .cfi_endproc
 11860              	.LFE753:
 11862              	 .section .rodata
 11863              	 .align 2
 11864              	.LC145:
 11865 07a8 6D617020 	 .ascii "map %s\000"
 11865      257300
 11866              	 .section .text.printMap,"ax",%progbits
 11867              	 .align 2
 11868              	 .thumb
 11869              	 .thumb_func
 11871              	printMap:
 11872              	.LFB754:
2441:../cleanflight/src/main/interface/cli.c **** 
2442:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BEEPER)
2443:../cleanflight/src/main/interface/cli.c **** static void printBeeper(uint8_t dumpMask, const uint32_t offFlags, const uint32_t offFlagsDefault, 
2444:../cleanflight/src/main/interface/cli.c **** {
2445:../cleanflight/src/main/interface/cli.c ****     const uint8_t beeperCount = beeperTableEntryCount();
2446:../cleanflight/src/main/interface/cli.c ****     for (int32_t i = 0; i < beeperCount - 1; i++) {
2447:../cleanflight/src/main/interface/cli.c ****         const char *formatOff = "%s -%s";
2448:../cleanflight/src/main/interface/cli.c ****         const char *formatOn = "%s %s";
2449:../cleanflight/src/main/interface/cli.c ****         const uint32_t beeperModeMask = beeperModeMaskForTableIndex(i);
2450:../cleanflight/src/main/interface/cli.c ****         cliDefaultPrintLinef(dumpMask, ~(offFlags ^ offFlagsDefault) & beeperModeMask, offFlags & b
2451:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, ~(offFlags ^ offFlagsDefault) & beeperModeMask, offFlags & beep
2452:../cleanflight/src/main/interface/cli.c ****     }
2453:../cleanflight/src/main/interface/cli.c **** }
2454:../cleanflight/src/main/interface/cli.c **** 
2455:../cleanflight/src/main/interface/cli.c **** static void processBeeperCommand(char *cmdline, uint32_t *offFlags, const uint32_t allowedFlags)
2456:../cleanflight/src/main/interface/cli.c **** {
2457:../cleanflight/src/main/interface/cli.c ****     uint32_t len = strlen(cmdline);
2458:../cleanflight/src/main/interface/cli.c ****     uint8_t beeperCount = beeperTableEntryCount();
2459:../cleanflight/src/main/interface/cli.c **** 
2460:../cleanflight/src/main/interface/cli.c ****     if (len == 0) {
2461:../cleanflight/src/main/interface/cli.c ****         cliPrintf("Disabled:");
2462:../cleanflight/src/main/interface/cli.c ****         for (int32_t i = 0; ; i++) {
2463:../cleanflight/src/main/interface/cli.c ****             if (i == beeperCount - 1) {
2464:../cleanflight/src/main/interface/cli.c ****                 if (*offFlags == 0)
2465:../cleanflight/src/main/interface/cli.c ****                     cliPrint("  none");
2466:../cleanflight/src/main/interface/cli.c ****                 break;
2467:../cleanflight/src/main/interface/cli.c ****             }
2468:../cleanflight/src/main/interface/cli.c **** 
2469:../cleanflight/src/main/interface/cli.c ****             if (beeperModeMaskForTableIndex(i) & *offFlags)
2470:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("  %s", beeperNameForTableIndex(i));
2471:../cleanflight/src/main/interface/cli.c ****         }
2472:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
2473:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "list", len) == 0) {
2474:../cleanflight/src/main/interface/cli.c ****         cliPrint("Available:");
2475:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; i < beeperCount; i++) {
2476:../cleanflight/src/main/interface/cli.c ****             if (beeperModeMaskForTableIndex(i) & allowedFlags) {
2477:../cleanflight/src/main/interface/cli.c ****                 cliPrintf(" %s", beeperNameForTableIndex(i));
2478:../cleanflight/src/main/interface/cli.c ****             }
2479:../cleanflight/src/main/interface/cli.c ****         }
2480:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
2481:../cleanflight/src/main/interface/cli.c ****     } else {
2482:../cleanflight/src/main/interface/cli.c ****         bool remove = false;
2483:../cleanflight/src/main/interface/cli.c ****         if (cmdline[0] == '-') {
2484:../cleanflight/src/main/interface/cli.c ****             remove = true;     // this is for beeper OFF condition
2485:../cleanflight/src/main/interface/cli.c ****             cmdline++;
2486:../cleanflight/src/main/interface/cli.c ****             len--;
2487:../cleanflight/src/main/interface/cli.c ****         }
2488:../cleanflight/src/main/interface/cli.c **** 
2489:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; ; i++) {
2490:../cleanflight/src/main/interface/cli.c ****             if (i == beeperCount) {
2491:../cleanflight/src/main/interface/cli.c ****                 cliPrintErrorLinef("Invalid name");
2492:../cleanflight/src/main/interface/cli.c ****                 break;
2493:../cleanflight/src/main/interface/cli.c ****             }
2494:../cleanflight/src/main/interface/cli.c ****             if (strncasecmp(cmdline, beeperNameForTableIndex(i), len) == 0 && beeperModeMaskForTabl
2495:../cleanflight/src/main/interface/cli.c ****                 if (remove) { // beeper off
2496:../cleanflight/src/main/interface/cli.c ****                     if (i == BEEPER_ALL - 1) {
2497:../cleanflight/src/main/interface/cli.c ****                         *offFlags = allowedFlags;
2498:../cleanflight/src/main/interface/cli.c ****                     } else {
2499:../cleanflight/src/main/interface/cli.c ****                         *offFlags |= beeperModeMaskForTableIndex(i);
2500:../cleanflight/src/main/interface/cli.c ****                     }
2501:../cleanflight/src/main/interface/cli.c ****                     cliPrint("Disabled");
2502:../cleanflight/src/main/interface/cli.c ****                 }
2503:../cleanflight/src/main/interface/cli.c ****                 else { // beeper on
2504:../cleanflight/src/main/interface/cli.c ****                     if (i == BEEPER_ALL - 1) {
2505:../cleanflight/src/main/interface/cli.c ****                         *offFlags = 0;
2506:../cleanflight/src/main/interface/cli.c ****                     } else {
2507:../cleanflight/src/main/interface/cli.c ****                         *offFlags &= ~beeperModeMaskForTableIndex(i);
2508:../cleanflight/src/main/interface/cli.c ****                     }
2509:../cleanflight/src/main/interface/cli.c ****                     cliPrint("Enabled");
2510:../cleanflight/src/main/interface/cli.c ****                 }
2511:../cleanflight/src/main/interface/cli.c ****             cliPrintLinef(" %s", beeperNameForTableIndex(i));
2512:../cleanflight/src/main/interface/cli.c ****             break;
2513:../cleanflight/src/main/interface/cli.c ****             }
2514:../cleanflight/src/main/interface/cli.c ****         }
2515:../cleanflight/src/main/interface/cli.c ****     }
2516:../cleanflight/src/main/interface/cli.c **** }
2517:../cleanflight/src/main/interface/cli.c **** 
2518:../cleanflight/src/main/interface/cli.c **** #if defined(USE_DSHOT)
2519:../cleanflight/src/main/interface/cli.c **** static void cliBeacon(char *cmdline)
2520:../cleanflight/src/main/interface/cli.c **** {
2521:../cleanflight/src/main/interface/cli.c ****     processBeeperCommand(cmdline, &(beeperConfigMutable()->dshotBeaconOffFlags), DSHOT_BEACON_ALLOW
2522:../cleanflight/src/main/interface/cli.c **** }
2523:../cleanflight/src/main/interface/cli.c **** #endif
2524:../cleanflight/src/main/interface/cli.c **** 
2525:../cleanflight/src/main/interface/cli.c **** static void cliBeeper(char *cmdline)
2526:../cleanflight/src/main/interface/cli.c **** {
2527:../cleanflight/src/main/interface/cli.c ****     processBeeperCommand(cmdline, &(beeperConfigMutable()->beeper_off_flags), BEEPER_ALLOWED_MODES)
2528:../cleanflight/src/main/interface/cli.c **** }
2529:../cleanflight/src/main/interface/cli.c **** #endif
2530:../cleanflight/src/main/interface/cli.c **** 
2531:../cleanflight/src/main/interface/cli.c **** #ifdef USE_RX_FRSKY_SPI
2532:../cleanflight/src/main/interface/cli.c **** void cliFrSkyBind(char *cmdline){
2533:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
2534:../cleanflight/src/main/interface/cli.c ****     switch (rxSpiConfig()->rx_spi_protocol) {
2535:../cleanflight/src/main/interface/cli.c ****     case RX_SPI_FRSKY_D:
2536:../cleanflight/src/main/interface/cli.c ****     case RX_SPI_FRSKY_X:
2537:../cleanflight/src/main/interface/cli.c ****         frSkySpiBind();
2538:../cleanflight/src/main/interface/cli.c **** 
2539:../cleanflight/src/main/interface/cli.c ****         cliPrint("Binding...");
2540:../cleanflight/src/main/interface/cli.c **** 
2541:../cleanflight/src/main/interface/cli.c ****         break;
2542:../cleanflight/src/main/interface/cli.c ****     default:
2543:../cleanflight/src/main/interface/cli.c ****         cliPrint("Not supported.");
2544:../cleanflight/src/main/interface/cli.c **** 
2545:../cleanflight/src/main/interface/cli.c ****         break;
2546:../cleanflight/src/main/interface/cli.c ****     }
2547:../cleanflight/src/main/interface/cli.c **** }
2548:../cleanflight/src/main/interface/cli.c **** #endif
2549:../cleanflight/src/main/interface/cli.c **** 
2550:../cleanflight/src/main/interface/cli.c **** static void printMap(uint8_t dumpMask, const rxConfig_t *rxConfig, const rxConfig_t *defaultRxConfi
2551:../cleanflight/src/main/interface/cli.c **** {
 11873              	 .loc 13 2551 0
 11874              	 .cfi_startproc
 11875              	 
 11876              	 
 11877 0000 80B5     	 push {r7,lr}
 11878              	.LCFI476:
 11879              	 .cfi_def_cfa_offset 8
 11880              	 .cfi_offset 7,-8
 11881              	 .cfi_offset 14,-4
 11882 0002 8EB0     	 sub sp,sp,#56
 11883              	.LCFI477:
 11884              	 .cfi_def_cfa_offset 64
 11885 0004 00AF     	 add r7,sp,#0
 11886              	.LCFI478:
 11887              	 .cfi_def_cfa_register 7
 11888 0006 0346     	 mov r3,r0
 11889 0008 B960     	 str r1,[r7,#8]
 11890 000a 7A60     	 str r2,[r7,#4]
 11891 000c FB73     	 strb r3,[r7,#15]
2552:../cleanflight/src/main/interface/cli.c ****     bool equalsDefault = true;
 11892              	 .loc 13 2552 0
 11893 000e 0123     	 movs r3,#1
 11894 0010 87F83730 	 strb r3,[r7,#55]
2553:../cleanflight/src/main/interface/cli.c ****     char buf[RX_MAPPABLE_CHANNEL_COUNT + 1];
2554:../cleanflight/src/main/interface/cli.c ****     char bufDefault[RX_MAPPABLE_CHANNEL_COUNT + 1];
2555:../cleanflight/src/main/interface/cli.c ****     uint32_t i;
2556:../cleanflight/src/main/interface/cli.c ****     for (i = 0; i < RX_MAPPABLE_CHANNEL_COUNT; i++) {
 11895              	 .loc 13 2556 0
 11896 0014 0023     	 movs r3,#0
 11897 0016 3B63     	 str r3,[r7,#48]
 11898 0018 3AE0     	 b .L700
 11899              	.L704:
2557:../cleanflight/src/main/interface/cli.c ****         buf[rxConfig->rcmap[i]] = rcChannelLetters[i];
 11900              	 .loc 13 2557 0
 11901 001a BA68     	 ldr r2,[r7,#8]
 11902 001c 3B6B     	 ldr r3,[r7,#48]
 11903 001e 1344     	 add r3,r3,r2
 11904 0020 1B78     	 ldrb r3,[r3]
 11905 0022 1946     	 mov r1,r3
 11906 0024 2B4A     	 ldr r2,.L705
 11907 0026 3B6B     	 ldr r3,[r7,#48]
 11908 0028 1344     	 add r3,r3,r2
 11909 002a 1A78     	 ldrb r2,[r3]
 11910 002c 07F13803 	 add r3,r7,#56
 11911 0030 0B44     	 add r3,r3,r1
 11912 0032 03F8182C 	 strb r2,[r3,#-24]
2558:../cleanflight/src/main/interface/cli.c ****         if (defaultRxConfig) {
 11913              	 .loc 13 2558 0
 11914 0036 7B68     	 ldr r3,[r7,#4]
 11915 0038 002B     	 cmp r3,#0
 11916 003a 26D0     	 beq .L701
2559:../cleanflight/src/main/interface/cli.c ****             bufDefault[defaultRxConfig->rcmap[i]] = rcChannelLetters[i];
 11917              	 .loc 13 2559 0
 11918 003c 7A68     	 ldr r2,[r7,#4]
 11919 003e 3B6B     	 ldr r3,[r7,#48]
 11920 0040 1344     	 add r3,r3,r2
 11921 0042 1B78     	 ldrb r3,[r3]
 11922 0044 1946     	 mov r1,r3
 11923 0046 234A     	 ldr r2,.L705
 11924 0048 3B6B     	 ldr r3,[r7,#48]
 11925 004a 1344     	 add r3,r3,r2
 11926 004c 1A78     	 ldrb r2,[r3]
 11927 004e 07F13803 	 add r3,r7,#56
 11928 0052 0B44     	 add r3,r3,r1
 11929 0054 03F8242C 	 strb r2,[r3,#-36]
2560:../cleanflight/src/main/interface/cli.c ****             equalsDefault = equalsDefault && (rxConfig->rcmap[i] == defaultRxConfig->rcmap[i]);
 11930              	 .loc 13 2560 0
 11931 0058 97F83730 	 ldrb r3,[r7,#55]
 11932 005c 002B     	 cmp r3,#0
 11933 005e 0BD0     	 beq .L702
 11934              	 .loc 13 2560 0 is_stmt 0 discriminator 1
 11935 0060 BA68     	 ldr r2,[r7,#8]
 11936 0062 3B6B     	 ldr r3,[r7,#48]
 11937 0064 1344     	 add r3,r3,r2
 11938 0066 1A78     	 ldrb r2,[r3]
 11939 0068 7968     	 ldr r1,[r7,#4]
 11940 006a 3B6B     	 ldr r3,[r7,#48]
 11941 006c 0B44     	 add r3,r3,r1
 11942 006e 1B78     	 ldrb r3,[r3]
 11943 0070 9A42     	 cmp r2,r3
 11944 0072 01D1     	 bne .L702
 11945              	 .loc 13 2560 0 discriminator 3
 11946 0074 0123     	 movs r3,#1
 11947 0076 00E0     	 b .L703
 11948              	.L702:
 11949              	 .loc 13 2560 0 discriminator 4
 11950 0078 0023     	 movs r3,#0
 11951              	.L703:
 11952              	 .loc 13 2560 0 discriminator 6
 11953 007a 87F83730 	 strb r3,[r7,#55]
 11954 007e 97F83730 	 ldrb r3,[r7,#55]
 11955 0082 03F00103 	 and r3,r3,#1
 11956 0086 87F83730 	 strb r3,[r7,#55]
 11957              	.L701:
2556:../cleanflight/src/main/interface/cli.c ****         buf[rxConfig->rcmap[i]] = rcChannelLetters[i];
 11958              	 .loc 13 2556 0 is_stmt 1 discriminator 2
 11959 008a 3B6B     	 ldr r3,[r7,#48]
 11960 008c 0133     	 adds r3,r3,#1
 11961 008e 3B63     	 str r3,[r7,#48]
 11962              	.L700:
2556:../cleanflight/src/main/interface/cli.c ****         buf[rxConfig->rcmap[i]] = rcChannelLetters[i];
 11963              	 .loc 13 2556 0 is_stmt 0 discriminator 1
 11964 0090 3B6B     	 ldr r3,[r7,#48]
 11965 0092 072B     	 cmp r3,#7
 11966 0094 C1D9     	 bls .L704
2561:../cleanflight/src/main/interface/cli.c ****         }
2562:../cleanflight/src/main/interface/cli.c ****     }
2563:../cleanflight/src/main/interface/cli.c ****     buf[i] = '\0';
 11967              	 .loc 13 2563 0 is_stmt 1
 11968 0096 07F12002 	 add r2,r7,#32
 11969 009a 3B6B     	 ldr r3,[r7,#48]
 11970 009c 1344     	 add r3,r3,r2
 11971 009e 0022     	 movs r2,#0
 11972 00a0 1A70     	 strb r2,[r3]
2564:../cleanflight/src/main/interface/cli.c **** 
2565:../cleanflight/src/main/interface/cli.c ****     const char *formatMap = "map %s";
 11973              	 .loc 13 2565 0
 11974 00a2 0D4B     	 ldr r3,.L705+4
 11975 00a4 FB62     	 str r3,[r7,#44]
2566:../cleanflight/src/main/interface/cli.c ****     cliDefaultPrintLinef(dumpMask, equalsDefault, formatMap, bufDefault);
 11976              	 .loc 13 2566 0
 11977 00a6 F97B     	 ldrb r1,[r7,#15]
 11978 00a8 97F83720 	 ldrb r2,[r7,#55]
 11979 00ac 07F11403 	 add r3,r7,#20
 11980 00b0 0846     	 mov r0,r1
 11981 00b2 1146     	 mov r1,r2
 11982 00b4 FA6A     	 ldr r2,[r7,#44]
 11983 00b6 FFF7FEFF 	 bl cliDefaultPrintLinef
2567:../cleanflight/src/main/interface/cli.c ****     cliDumpPrintLinef(dumpMask, equalsDefault, formatMap, buf);
 11984              	 .loc 13 2567 0
 11985 00ba F97B     	 ldrb r1,[r7,#15]
 11986 00bc 97F83720 	 ldrb r2,[r7,#55]
 11987 00c0 07F12003 	 add r3,r7,#32
 11988 00c4 0846     	 mov r0,r1
 11989 00c6 1146     	 mov r1,r2
 11990 00c8 FA6A     	 ldr r2,[r7,#44]
 11991 00ca FFF7FEFF 	 bl cliDumpPrintLinef
2568:../cleanflight/src/main/interface/cli.c **** }
 11992              	 .loc 13 2568 0
 11993 00ce 3837     	 adds r7,r7,#56
 11994              	.LCFI479:
 11995              	 .cfi_def_cfa_offset 8
 11996 00d0 BD46     	 mov sp,r7
 11997              	.LCFI480:
 11998              	 .cfi_def_cfa_register 13
 11999              	 
 12000 00d2 80BD     	 pop {r7,pc}
 12001              	.L706:
 12002              	 .align 2
 12003              	.L705:
 12004 00d4 00000000 	 .word rcChannelLetters
 12005 00d8 A8070000 	 .word .LC145
 12006              	 .cfi_endproc
 12007              	.LFE754:
 12009              	 .section .text.cliMap,"ax",%progbits
 12010              	 .align 2
 12011              	 .thumb
 12012              	 .thumb_func
 12014              	cliMap:
 12015              	.LFB755:
2569:../cleanflight/src/main/interface/cli.c **** 
2570:../cleanflight/src/main/interface/cli.c **** 
2571:../cleanflight/src/main/interface/cli.c **** static void cliMap(char *cmdline)
2572:../cleanflight/src/main/interface/cli.c **** {
 12016              	 .loc 13 2572 0
 12017              	 .cfi_startproc
 12018              	 
 12019              	 
 12020 0000 80B5     	 push {r7,lr}
 12021              	.LCFI481:
 12022              	 .cfi_def_cfa_offset 8
 12023              	 .cfi_offset 7,-8
 12024              	 .cfi_offset 14,-4
 12025 0002 88B0     	 sub sp,sp,#32
 12026              	.LCFI482:
 12027              	 .cfi_def_cfa_offset 40
 12028 0004 00AF     	 add r7,sp,#0
 12029              	.LCFI483:
 12030              	 .cfi_def_cfa_register 7
 12031 0006 7860     	 str r0,[r7,#4]
2573:../cleanflight/src/main/interface/cli.c ****     uint32_t i;
2574:../cleanflight/src/main/interface/cli.c ****     char buf[RX_MAPPABLE_CHANNEL_COUNT + 1];
2575:../cleanflight/src/main/interface/cli.c **** 
2576:../cleanflight/src/main/interface/cli.c ****     uint32_t len = strlen(cmdline);
 12032              	 .loc 13 2576 0
 12033 0008 7868     	 ldr r0,[r7,#4]
 12034 000a FFF7FEFF 	 bl strlen
 12035 000e B861     	 str r0,[r7,#24]
2577:../cleanflight/src/main/interface/cli.c ****     if (len == RX_MAPPABLE_CHANNEL_COUNT) {
 12036              	 .loc 13 2577 0
 12037 0010 BB69     	 ldr r3,[r7,#24]
 12038 0012 082B     	 cmp r3,#8
 12039 0014 60D1     	 bne .L708
2578:../cleanflight/src/main/interface/cli.c **** 
2579:../cleanflight/src/main/interface/cli.c ****         for (i = 0; i < RX_MAPPABLE_CHANNEL_COUNT; i++) {
 12040              	 .loc 13 2579 0
 12041 0016 0023     	 movs r3,#0
 12042 0018 FB61     	 str r3,[r7,#28]
 12043 001a 11E0     	 b .L709
 12044              	.L710:
2580:../cleanflight/src/main/interface/cli.c ****             buf[i] = toupper((unsigned char)cmdline[i]);
 12045              	 .loc 13 2580 0 discriminator 3
 12046 001c 7A68     	 ldr r2,[r7,#4]
 12047 001e FB69     	 ldr r3,[r7,#28]
 12048 0020 1344     	 add r3,r3,r2
 12049 0022 1B78     	 ldrb r3,[r3]
 12050 0024 1846     	 mov r0,r3
 12051 0026 FFF7FEFF 	 bl toupper
 12052 002a 0346     	 mov r3,r0
 12053 002c D9B2     	 uxtb r1,r3
 12054 002e 07F10C02 	 add r2,r7,#12
 12055 0032 FB69     	 ldr r3,[r7,#28]
 12056 0034 1344     	 add r3,r3,r2
 12057 0036 0A46     	 mov r2,r1
 12058 0038 1A70     	 strb r2,[r3]
2579:../cleanflight/src/main/interface/cli.c ****             buf[i] = toupper((unsigned char)cmdline[i]);
 12059              	 .loc 13 2579 0 discriminator 3
 12060 003a FB69     	 ldr r3,[r7,#28]
 12061 003c 0133     	 adds r3,r3,#1
 12062 003e FB61     	 str r3,[r7,#28]
 12063              	.L709:
2579:../cleanflight/src/main/interface/cli.c ****             buf[i] = toupper((unsigned char)cmdline[i]);
 12064              	 .loc 13 2579 0 is_stmt 0 discriminator 1
 12065 0040 FB69     	 ldr r3,[r7,#28]
 12066 0042 072B     	 cmp r3,#7
 12067 0044 EAD9     	 bls .L710
2581:../cleanflight/src/main/interface/cli.c ****         }
2582:../cleanflight/src/main/interface/cli.c ****         buf[i] = '\0';
 12068              	 .loc 13 2582 0 is_stmt 1
 12069 0046 07F10C02 	 add r2,r7,#12
 12070 004a FB69     	 ldr r3,[r7,#28]
 12071 004c 1344     	 add r3,r3,r2
 12072 004e 0022     	 movs r2,#0
 12073 0050 1A70     	 strb r2,[r3]
2583:../cleanflight/src/main/interface/cli.c **** 
2584:../cleanflight/src/main/interface/cli.c ****         for (i = 0; i < RX_MAPPABLE_CHANNEL_COUNT; i++) {
 12074              	 .loc 13 2584 0
 12075 0052 0023     	 movs r3,#0
 12076 0054 FB61     	 str r3,[r7,#28]
 12077 0056 32E0     	 b .L711
 12078              	.L714:
2585:../cleanflight/src/main/interface/cli.c ****             buf[i] = toupper((unsigned char)cmdline[i]);
 12079              	 .loc 13 2585 0
 12080 0058 7A68     	 ldr r2,[r7,#4]
 12081 005a FB69     	 ldr r3,[r7,#28]
 12082 005c 1344     	 add r3,r3,r2
 12083 005e 1B78     	 ldrb r3,[r3]
 12084 0060 1846     	 mov r0,r3
 12085 0062 FFF7FEFF 	 bl toupper
 12086 0066 0346     	 mov r3,r0
 12087 0068 D9B2     	 uxtb r1,r3
 12088 006a 07F10C02 	 add r2,r7,#12
 12089 006e FB69     	 ldr r3,[r7,#28]
 12090 0070 1344     	 add r3,r3,r2
 12091 0072 0A46     	 mov r2,r1
 12092 0074 1A70     	 strb r2,[r3]
2586:../cleanflight/src/main/interface/cli.c **** 
2587:../cleanflight/src/main/interface/cli.c ****             if (strchr(rcChannelLetters, buf[i]) && !strchr(buf + i + 1, buf[i]))
 12093              	 .loc 13 2587 0
 12094 0076 07F10C02 	 add r2,r7,#12
 12095 007a FB69     	 ldr r3,[r7,#28]
 12096 007c 1344     	 add r3,r3,r2
 12097 007e 1B78     	 ldrb r3,[r3]
 12098 0080 2C48     	 ldr r0,.L719
 12099 0082 1946     	 mov r1,r3
 12100 0084 FFF7FEFF 	 bl strchr
 12101 0088 0346     	 mov r3,r0
 12102 008a 002B     	 cmp r3,#0
 12103 008c 14D0     	 beq .L712
 12104              	 .loc 13 2587 0 is_stmt 0 discriminator 1
 12105 008e FB69     	 ldr r3,[r7,#28]
 12106 0090 0133     	 adds r3,r3,#1
 12107 0092 07F10C02 	 add r2,r7,#12
 12108 0096 D118     	 adds r1,r2,r3
 12109 0098 07F10C02 	 add r2,r7,#12
 12110 009c FB69     	 ldr r3,[r7,#28]
 12111 009e 1344     	 add r3,r3,r2
 12112 00a0 1B78     	 ldrb r3,[r3]
 12113 00a2 0846     	 mov r0,r1
 12114 00a4 1946     	 mov r1,r3
 12115 00a6 FFF7FEFF 	 bl strchr
 12116 00aa 0346     	 mov r3,r0
 12117 00ac 002B     	 cmp r3,#0
 12118 00ae 03D1     	 bne .L712
2584:../cleanflight/src/main/interface/cli.c ****             buf[i] = toupper((unsigned char)cmdline[i]);
 12119              	 .loc 13 2584 0 is_stmt 1
 12120 00b0 FB69     	 ldr r3,[r7,#28]
 12121 00b2 0133     	 adds r3,r3,#1
 12122 00b4 FB61     	 str r3,[r7,#28]
 12123 00b6 02E0     	 b .L711
 12124              	.L712:
2588:../cleanflight/src/main/interface/cli.c ****                 continue;
2589:../cleanflight/src/main/interface/cli.c **** 
2590:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
 12125              	 .loc 13 2590 0
 12126 00b8 FFF7FEFF 	 bl cliShowParseError
2591:../cleanflight/src/main/interface/cli.c ****             return;
 12127              	 .loc 13 2591 0
 12128 00bc 37E0     	 b .L707
 12129              	.L711:
2584:../cleanflight/src/main/interface/cli.c ****             buf[i] = toupper((unsigned char)cmdline[i]);
 12130              	 .loc 13 2584 0 discriminator 1
 12131 00be FB69     	 ldr r3,[r7,#28]
 12132 00c0 072B     	 cmp r3,#7
 12133 00c2 C9D9     	 bls .L714
2592:../cleanflight/src/main/interface/cli.c ****         }
2593:../cleanflight/src/main/interface/cli.c ****         parseRcChannels(buf, rxConfigMutable());
 12134              	 .loc 13 2593 0
 12135 00c4 FFF7FEFF 	 bl rxConfigMutable
 12136 00c8 0246     	 mov r2,r0
 12137 00ca 07F10C03 	 add r3,r7,#12
 12138 00ce 1846     	 mov r0,r3
 12139 00d0 1146     	 mov r1,r2
 12140 00d2 FFF7FEFF 	 bl parseRcChannels
 12141 00d6 05E0     	 b .L715
 12142              	.L708:
2594:../cleanflight/src/main/interface/cli.c ****     } else if (len > 0) {
 12143              	 .loc 13 2594 0
 12144 00d8 BB69     	 ldr r3,[r7,#24]
 12145 00da 002B     	 cmp r3,#0
 12146 00dc 02D0     	 beq .L715
2595:../cleanflight/src/main/interface/cli.c ****         cliShowParseError();
 12147              	 .loc 13 2595 0
 12148 00de FFF7FEFF 	 bl cliShowParseError
2596:../cleanflight/src/main/interface/cli.c ****         return;
 12149              	 .loc 13 2596 0
 12150 00e2 24E0     	 b .L707
 12151              	.L715:
2597:../cleanflight/src/main/interface/cli.c ****     }
2598:../cleanflight/src/main/interface/cli.c **** 
2599:../cleanflight/src/main/interface/cli.c ****     for (i = 0; i < RX_MAPPABLE_CHANNEL_COUNT; i++) {
 12152              	 .loc 13 2599 0
 12153 00e4 0023     	 movs r3,#0
 12154 00e6 FB61     	 str r3,[r7,#28]
 12155 00e8 12E0     	 b .L716
 12156              	.L717:
2600:../cleanflight/src/main/interface/cli.c ****         buf[rxConfig()->rcmap[i]] = rcChannelLetters[i];
 12157              	 .loc 13 2600 0 discriminator 3
 12158 00ea FFF7FEFF 	 bl rxConfig
 12159 00ee 0246     	 mov r2,r0
 12160 00f0 FB69     	 ldr r3,[r7,#28]
 12161 00f2 1344     	 add r3,r3,r2
 12162 00f4 1B78     	 ldrb r3,[r3]
 12163 00f6 1946     	 mov r1,r3
 12164 00f8 0E4A     	 ldr r2,.L719
 12165 00fa FB69     	 ldr r3,[r7,#28]
 12166 00fc 1344     	 add r3,r3,r2
 12167 00fe 1A78     	 ldrb r2,[r3]
 12168 0100 07F12003 	 add r3,r7,#32
 12169 0104 0B44     	 add r3,r3,r1
 12170 0106 03F8142C 	 strb r2,[r3,#-20]
2599:../cleanflight/src/main/interface/cli.c ****         buf[rxConfig()->rcmap[i]] = rcChannelLetters[i];
 12171              	 .loc 13 2599 0 discriminator 3
 12172 010a FB69     	 ldr r3,[r7,#28]
 12173 010c 0133     	 adds r3,r3,#1
 12174 010e FB61     	 str r3,[r7,#28]
 12175              	.L716:
2599:../cleanflight/src/main/interface/cli.c ****         buf[rxConfig()->rcmap[i]] = rcChannelLetters[i];
 12176              	 .loc 13 2599 0 is_stmt 0 discriminator 1
 12177 0110 FB69     	 ldr r3,[r7,#28]
 12178 0112 072B     	 cmp r3,#7
 12179 0114 E9D9     	 bls .L717
2601:../cleanflight/src/main/interface/cli.c ****     }
2602:../cleanflight/src/main/interface/cli.c **** 
2603:../cleanflight/src/main/interface/cli.c ****     buf[i] = '\0';
 12180              	 .loc 13 2603 0 is_stmt 1
 12181 0116 07F10C02 	 add r2,r7,#12
 12182 011a FB69     	 ldr r3,[r7,#28]
 12183 011c 1344     	 add r3,r3,r2
 12184 011e 0022     	 movs r2,#0
 12185 0120 1A70     	 strb r2,[r3]
2604:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("map %s", buf);
 12186              	 .loc 13 2604 0
 12187 0122 07F10C03 	 add r3,r7,#12
 12188 0126 0448     	 ldr r0,.L719+4
 12189 0128 1946     	 mov r1,r3
 12190 012a FFF7FEFF 	 bl cliPrintLinef
 12191              	.L707:
2605:../cleanflight/src/main/interface/cli.c **** }
 12192              	 .loc 13 2605 0
 12193 012e 2037     	 adds r7,r7,#32
 12194              	.LCFI484:
 12195              	 .cfi_def_cfa_offset 8
 12196 0130 BD46     	 mov sp,r7
 12197              	.LCFI485:
 12198              	 .cfi_def_cfa_register 13
 12199              	 
 12200 0132 80BD     	 pop {r7,pc}
 12201              	.L720:
 12202              	 .align 2
 12203              	.L719:
 12204 0134 00000000 	 .word rcChannelLetters
 12205 0138 A8070000 	 .word .LC145
 12206              	 .cfi_endproc
 12207              	.LFE755:
 12209              	 .section .text.skipSpace,"ax",%progbits
 12210              	 .align 2
 12211              	 .thumb
 12212              	 .thumb_func
 12214              	skipSpace:
 12215              	.LFB756:
2606:../cleanflight/src/main/interface/cli.c **** 
2607:../cleanflight/src/main/interface/cli.c **** static char *skipSpace(char *buffer)
2608:../cleanflight/src/main/interface/cli.c **** {
 12216              	 .loc 13 2608 0
 12217              	 .cfi_startproc
 12218              	 
 12219              	 
 12220              	 
 12221 0000 80B4     	 push {r7}
 12222              	.LCFI486:
 12223              	 .cfi_def_cfa_offset 4
 12224              	 .cfi_offset 7,-4
 12225 0002 83B0     	 sub sp,sp,#12
 12226              	.LCFI487:
 12227              	 .cfi_def_cfa_offset 16
 12228 0004 00AF     	 add r7,sp,#0
 12229              	.LCFI488:
 12230              	 .cfi_def_cfa_register 7
 12231 0006 7860     	 str r0,[r7,#4]
2609:../cleanflight/src/main/interface/cli.c ****     while (*(buffer) == ' ') {
 12232              	 .loc 13 2609 0
 12233 0008 02E0     	 b .L722
 12234              	.L723:
2610:../cleanflight/src/main/interface/cli.c ****         buffer++;
 12235              	 .loc 13 2610 0
 12236 000a 7B68     	 ldr r3,[r7,#4]
 12237 000c 0133     	 adds r3,r3,#1
 12238 000e 7B60     	 str r3,[r7,#4]
 12239              	.L722:
2609:../cleanflight/src/main/interface/cli.c ****     while (*(buffer) == ' ') {
 12240              	 .loc 13 2609 0
 12241 0010 7B68     	 ldr r3,[r7,#4]
 12242 0012 1B78     	 ldrb r3,[r3]
 12243 0014 202B     	 cmp r3,#32
 12244 0016 F8D0     	 beq .L723
2611:../cleanflight/src/main/interface/cli.c ****     }
2612:../cleanflight/src/main/interface/cli.c **** 
2613:../cleanflight/src/main/interface/cli.c ****     return buffer;
 12245              	 .loc 13 2613 0
 12246 0018 7B68     	 ldr r3,[r7,#4]
2614:../cleanflight/src/main/interface/cli.c **** }
 12247              	 .loc 13 2614 0
 12248 001a 1846     	 mov r0,r3
 12249 001c 0C37     	 adds r7,r7,#12
 12250              	.LCFI489:
 12251              	 .cfi_def_cfa_offset 4
 12252 001e BD46     	 mov sp,r7
 12253              	.LCFI490:
 12254              	 .cfi_def_cfa_register 13
 12255              	 
 12256 0020 5DF8047B 	 ldr r7,[sp],#4
 12257              	.LCFI491:
 12258              	 .cfi_restore 7
 12259              	 .cfi_def_cfa_offset 0
 12260 0024 7047     	 bx lr
 12261              	 .cfi_endproc
 12262              	.LFE756:
 12264 0026 00BF     	 .section .text.checkCommand,"ax",%progbits
 12265              	 .align 2
 12266              	 .thumb
 12267              	 .thumb_func
 12269              	checkCommand:
 12270              	.LFB757:
2615:../cleanflight/src/main/interface/cli.c **** 
2616:../cleanflight/src/main/interface/cli.c **** static char *checkCommand(char *cmdLine, const char *command)
2617:../cleanflight/src/main/interface/cli.c **** {
 12271              	 .loc 13 2617 0
 12272              	 .cfi_startproc
 12273              	 
 12274              	 
 12275 0000 80B5     	 push {r7,lr}
 12276              	.LCFI492:
 12277              	 .cfi_def_cfa_offset 8
 12278              	 .cfi_offset 7,-8
 12279              	 .cfi_offset 14,-4
 12280 0002 82B0     	 sub sp,sp,#8
 12281              	.LCFI493:
 12282              	 .cfi_def_cfa_offset 16
 12283 0004 00AF     	 add r7,sp,#0
 12284              	.LCFI494:
 12285              	 .cfi_def_cfa_register 7
 12286 0006 7860     	 str r0,[r7,#4]
 12287 0008 3960     	 str r1,[r7]
2618:../cleanflight/src/main/interface/cli.c ****     if (!strncasecmp(cmdLine, command, strlen(command))   // command names match
 12288              	 .loc 13 2618 0
 12289 000a 3868     	 ldr r0,[r7]
 12290 000c FFF7FEFF 	 bl strlen
 12291 0010 0346     	 mov r3,r0
 12292 0012 7868     	 ldr r0,[r7,#4]
 12293 0014 3968     	 ldr r1,[r7]
 12294 0016 1A46     	 mov r2,r3
 12295 0018 FFF7FEFF 	 bl strncasecmp
 12296 001c 0346     	 mov r3,r0
 12297 001e 002B     	 cmp r3,#0
 12298 0020 21D1     	 bne .L726
2619:../cleanflight/src/main/interface/cli.c ****         && (isspace((unsigned)cmdLine[strlen(command)]) || cmdLine[strlen(command)] == 0)) {
 12299              	 .loc 13 2619 0
 12300 0022 3868     	 ldr r0,[r7]
 12301 0024 FFF7FEFF 	 bl strlen
 12302 0028 0246     	 mov r2,r0
 12303 002a 7B68     	 ldr r3,[r7,#4]
 12304 002c 1344     	 add r3,r3,r2
 12305 002e 1B78     	 ldrb r3,[r3]
 12306 0030 1846     	 mov r0,r3
 12307 0032 FFF7FEFF 	 bl isspace
 12308 0036 0346     	 mov r3,r0
 12309 0038 002B     	 cmp r3,#0
 12310 003a 08D1     	 bne .L727
 12311              	 .loc 13 2619 0 is_stmt 0 discriminator 1
 12312 003c 3868     	 ldr r0,[r7]
 12313 003e FFF7FEFF 	 bl strlen
 12314 0042 0246     	 mov r2,r0
 12315 0044 7B68     	 ldr r3,[r7,#4]
 12316 0046 1344     	 add r3,r3,r2
 12317 0048 1B78     	 ldrb r3,[r3]
 12318 004a 002B     	 cmp r3,#0
 12319 004c 0BD1     	 bne .L726
 12320              	.L727:
2620:../cleanflight/src/main/interface/cli.c ****         return skipSpace(cmdLine + strlen(command) + 1);
 12321              	 .loc 13 2620 0 is_stmt 1
 12322 004e 3868     	 ldr r0,[r7]
 12323 0050 FFF7FEFF 	 bl strlen
 12324 0054 0346     	 mov r3,r0
 12325 0056 0133     	 adds r3,r3,#1
 12326 0058 7A68     	 ldr r2,[r7,#4]
 12327 005a 1344     	 add r3,r3,r2
 12328 005c 1846     	 mov r0,r3
 12329 005e FFF7FEFF 	 bl skipSpace
 12330 0062 0346     	 mov r3,r0
 12331 0064 00E0     	 b .L728
 12332              	.L726:
2621:../cleanflight/src/main/interface/cli.c ****     } else {
2622:../cleanflight/src/main/interface/cli.c ****         return 0;
 12333              	 .loc 13 2622 0
 12334 0066 0023     	 movs r3,#0
 12335              	.L728:
2623:../cleanflight/src/main/interface/cli.c ****     }
2624:../cleanflight/src/main/interface/cli.c **** }
 12336              	 .loc 13 2624 0
 12337 0068 1846     	 mov r0,r3
 12338 006a 0837     	 adds r7,r7,#8
 12339              	.LCFI495:
 12340              	 .cfi_def_cfa_offset 8
 12341 006c BD46     	 mov sp,r7
 12342              	.LCFI496:
 12343              	 .cfi_def_cfa_register 13
 12344              	 
 12345 006e 80BD     	 pop {r7,pc}
 12346              	 .cfi_endproc
 12347              	.LFE757:
 12349              	 .section .rodata
 12350 07af 00       	 .align 2
 12351              	.LC146:
 12352 07b0 0D0A5265 	 .ascii "\015\012Rebooting\000"
 12352      626F6F74 
 12352      696E6700 
 12353              	 .section .text.cliRebootEx,"ax",%progbits
 12354              	 .align 2
 12355              	 .thumb
 12356              	 .thumb_func
 12358              	cliRebootEx:
 12359              	.LFB758:
2625:../cleanflight/src/main/interface/cli.c **** 
2626:../cleanflight/src/main/interface/cli.c **** static void cliRebootEx(bool bootLoader)
2627:../cleanflight/src/main/interface/cli.c **** {
 12360              	 .loc 13 2627 0
 12361              	 .cfi_startproc
 12362              	 
 12363              	 
 12364 0000 80B5     	 push {r7,lr}
 12365              	.LCFI497:
 12366              	 .cfi_def_cfa_offset 8
 12367              	 .cfi_offset 7,-8
 12368              	 .cfi_offset 14,-4
 12369 0002 82B0     	 sub sp,sp,#8
 12370              	.LCFI498:
 12371              	 .cfi_def_cfa_offset 16
 12372 0004 00AF     	 add r7,sp,#0
 12373              	.LCFI499:
 12374              	 .cfi_def_cfa_register 7
 12375 0006 0346     	 mov r3,r0
 12376 0008 FB71     	 strb r3,[r7,#7]
2628:../cleanflight/src/main/interface/cli.c ****     cliPrint("\r\nRebooting");
 12377              	 .loc 13 2628 0
 12378 000a 0D48     	 ldr r0,.L732
 12379 000c FFF7FEFF 	 bl cliPrint
2629:../cleanflight/src/main/interface/cli.c ****     bufWriterFlush(cliWriter);
 12380              	 .loc 13 2629 0
 12381 0010 0C4B     	 ldr r3,.L732+4
 12382 0012 1B68     	 ldr r3,[r3]
 12383 0014 1846     	 mov r0,r3
 12384 0016 FFF7FEFF 	 bl bufWriterFlush
2630:../cleanflight/src/main/interface/cli.c ****     waitForSerialPortToFinishTransmitting(cliPort);
 12385              	 .loc 13 2630 0
 12386 001a 0B4B     	 ldr r3,.L732+8
 12387 001c 1B68     	 ldr r3,[r3]
 12388 001e 1846     	 mov r0,r3
 12389 0020 FFF7FEFF 	 bl waitForSerialPortToFinishTransmitting
2631:../cleanflight/src/main/interface/cli.c ****     stopPwmAllMotors();
 12390              	 .loc 13 2631 0
 12391 0024 FFF7FEFF 	 bl stopPwmAllMotors
2632:../cleanflight/src/main/interface/cli.c ****     if (bootLoader) {
 12392              	 .loc 13 2632 0
 12393 0028 FB79     	 ldrb r3,[r7,#7]
 12394 002a 002B     	 cmp r3,#0
 12395 002c 02D0     	 beq .L730
2633:../cleanflight/src/main/interface/cli.c ****         systemResetToBootloader();
 12396              	 .loc 13 2633 0
 12397 002e FFF7FEFF 	 bl systemResetToBootloader
2634:../cleanflight/src/main/interface/cli.c ****         return;
 12398              	 .loc 13 2634 0
 12399 0032 01E0     	 b .L729
 12400              	.L730:
2635:../cleanflight/src/main/interface/cli.c ****     }
2636:../cleanflight/src/main/interface/cli.c ****     systemReset();
 12401              	 .loc 13 2636 0
 12402 0034 FFF7FEFF 	 bl systemReset
 12403              	.L729:
2637:../cleanflight/src/main/interface/cli.c **** }
 12404              	 .loc 13 2637 0
 12405 0038 0837     	 adds r7,r7,#8
 12406              	.LCFI500:
 12407              	 .cfi_def_cfa_offset 8
 12408 003a BD46     	 mov sp,r7
 12409              	.LCFI501:
 12410              	 .cfi_def_cfa_register 13
 12411              	 
 12412 003c 80BD     	 pop {r7,pc}
 12413              	.L733:
 12414 003e 00BF     	 .align 2
 12415              	.L732:
 12416 0040 B0070000 	 .word .LC146
 12417 0044 00000000 	 .word cliWriter
 12418 0048 00000000 	 .word cliPort
 12419              	 .cfi_endproc
 12420              	.LFE758:
 12422              	 .section .text.cliReboot,"ax",%progbits
 12423              	 .align 2
 12424              	 .thumb
 12425              	 .thumb_func
 12427              	cliReboot:
 12428              	.LFB759:
2638:../cleanflight/src/main/interface/cli.c **** 
2639:../cleanflight/src/main/interface/cli.c **** static void cliReboot(void)
2640:../cleanflight/src/main/interface/cli.c **** {
 12429              	 .loc 13 2640 0
 12430              	 .cfi_startproc
 12431              	 
 12432              	 
 12433 0000 80B5     	 push {r7,lr}
 12434              	.LCFI502:
 12435              	 .cfi_def_cfa_offset 8
 12436              	 .cfi_offset 7,-8
 12437              	 .cfi_offset 14,-4
 12438 0002 00AF     	 add r7,sp,#0
 12439              	.LCFI503:
 12440              	 .cfi_def_cfa_register 7
2641:../cleanflight/src/main/interface/cli.c ****     cliRebootEx(false);
 12441              	 .loc 13 2641 0
 12442 0004 0020     	 movs r0,#0
 12443 0006 FFF7FEFF 	 bl cliRebootEx
2642:../cleanflight/src/main/interface/cli.c **** }
 12444              	 .loc 13 2642 0
 12445 000a 80BD     	 pop {r7,pc}
 12446              	 .cfi_endproc
 12447              	.LFE759:
 12449              	 .section .rodata
 12450              	 .align 2
 12451              	.LC147:
 12452 07bc 72657374 	 .ascii "restarting in bootloader mode\000"
 12452      61727469 
 12452      6E672069 
 12452      6E20626F 
 12452      6F746C6F 
 12453              	 .section .text.cliBootloader,"ax",%progbits
 12454              	 .align 2
 12455              	 .thumb
 12456              	 .thumb_func
 12458              	cliBootloader:
 12459              	.LFB760:
2643:../cleanflight/src/main/interface/cli.c **** 
2644:../cleanflight/src/main/interface/cli.c **** static void cliBootloader(char *cmdLine)
2645:../cleanflight/src/main/interface/cli.c **** {
 12460              	 .loc 13 2645 0
 12461              	 .cfi_startproc
 12462              	 
 12463              	 
 12464 0000 80B5     	 push {r7,lr}
 12465              	.LCFI504:
 12466              	 .cfi_def_cfa_offset 8
 12467              	 .cfi_offset 7,-8
 12468              	 .cfi_offset 14,-4
 12469 0002 82B0     	 sub sp,sp,#8
 12470              	.LCFI505:
 12471              	 .cfi_def_cfa_offset 16
 12472 0004 00AF     	 add r7,sp,#0
 12473              	.LCFI506:
 12474              	 .cfi_def_cfa_register 7
 12475 0006 7860     	 str r0,[r7,#4]
2646:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdLine);
2647:../cleanflight/src/main/interface/cli.c **** 
2648:../cleanflight/src/main/interface/cli.c ****     cliPrintHashLine("restarting in bootloader mode");
 12476              	 .loc 13 2648 0
 12477 0008 0448     	 ldr r0,.L736
 12478 000a FFF7FEFF 	 bl cliPrintHashLine
2649:../cleanflight/src/main/interface/cli.c ****     cliRebootEx(true);
 12479              	 .loc 13 2649 0
 12480 000e 0120     	 movs r0,#1
 12481 0010 FFF7FEFF 	 bl cliRebootEx
2650:../cleanflight/src/main/interface/cli.c **** }
 12482              	 .loc 13 2650 0
 12483 0014 0837     	 adds r7,r7,#8
 12484              	.LCFI507:
 12485              	 .cfi_def_cfa_offset 8
 12486 0016 BD46     	 mov sp,r7
 12487              	.LCFI508:
 12488              	 .cfi_def_cfa_register 13
 12489              	 
 12490 0018 80BD     	 pop {r7,pc}
 12491              	.L737:
 12492 001a 00BF     	 .align 2
 12493              	.L736:
 12494 001c BC070000 	 .word .LC147
 12495              	 .cfi_endproc
 12496              	.LFE760:
 12498              	 .section .rodata
 12499 07da 0000     	 .align 2
 12500              	.LC148:
 12501 07dc 6C656176 	 .ascii "leaving CLI mode, unsaved changes lost\000"
 12501      696E6720 
 12501      434C4920 
 12501      6D6F6465 
 12501      2C20756E 
 12502              	 .section .text.cliExit,"ax",%progbits
 12503              	 .align 2
 12504              	 .thumb
 12505              	 .thumb_func
 12507              	cliExit:
 12508              	.LFB761:
2651:../cleanflight/src/main/interface/cli.c **** 
2652:../cleanflight/src/main/interface/cli.c **** static void cliExit(char *cmdline)
2653:../cleanflight/src/main/interface/cli.c **** {
 12509              	 .loc 13 2653 0
 12510              	 .cfi_startproc
 12511              	 
 12512              	 
 12513 0000 80B5     	 push {r7,lr}
 12514              	.LCFI509:
 12515              	 .cfi_def_cfa_offset 8
 12516              	 .cfi_offset 7,-8
 12517              	 .cfi_offset 14,-4
 12518 0002 82B0     	 sub sp,sp,#8
 12519              	.LCFI510:
 12520              	 .cfi_def_cfa_offset 16
 12521 0004 00AF     	 add r7,sp,#0
 12522              	.LCFI511:
 12523              	 .cfi_def_cfa_register 7
 12524 0006 7860     	 str r0,[r7,#4]
2654:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
2655:../cleanflight/src/main/interface/cli.c **** 
2656:../cleanflight/src/main/interface/cli.c ****     cliPrintHashLine("leaving CLI mode, unsaved changes lost");
 12525              	 .loc 13 2656 0
 12526 0008 0D48     	 ldr r0,.L739
 12527 000a FFF7FEFF 	 bl cliPrintHashLine
2657:../cleanflight/src/main/interface/cli.c ****     bufWriterFlush(cliWriter);
 12528              	 .loc 13 2657 0
 12529 000e 0D4B     	 ldr r3,.L739+4
 12530 0010 1B68     	 ldr r3,[r3]
 12531 0012 1846     	 mov r0,r3
 12532 0014 FFF7FEFF 	 bl bufWriterFlush
2658:../cleanflight/src/main/interface/cli.c **** 
2659:../cleanflight/src/main/interface/cli.c ****     *cliBuffer = '\0';
 12533              	 .loc 13 2659 0
 12534 0018 0B4B     	 ldr r3,.L739+8
 12535 001a 0022     	 movs r2,#0
 12536 001c 1A70     	 strb r2,[r3]
2660:../cleanflight/src/main/interface/cli.c ****     bufferIndex = 0;
 12537              	 .loc 13 2660 0
 12538 001e 0B4B     	 ldr r3,.L739+12
 12539 0020 0022     	 movs r2,#0
 12540 0022 1A60     	 str r2,[r3]
2661:../cleanflight/src/main/interface/cli.c ****     cliMode = 0;
 12541              	 .loc 13 2661 0
 12542 0024 0A4B     	 ldr r3,.L739+16
 12543 0026 0022     	 movs r2,#0
 12544 0028 1A70     	 strb r2,[r3]
2662:../cleanflight/src/main/interface/cli.c ****     // incase a motor was left running during motortest, clear it here
2663:../cleanflight/src/main/interface/cli.c ****     mixerResetDisarmedMotors();
 12545              	 .loc 13 2663 0
 12546 002a FFF7FEFF 	 bl mixerResetDisarmedMotors
2664:../cleanflight/src/main/interface/cli.c ****     cliReboot();
 12547              	 .loc 13 2664 0
 12548 002e FFF7FEFF 	 bl cliReboot
2665:../cleanflight/src/main/interface/cli.c **** 
2666:../cleanflight/src/main/interface/cli.c ****     cliWriter = NULL;
 12549              	 .loc 13 2666 0
 12550 0032 044B     	 ldr r3,.L739+4
 12551 0034 0022     	 movs r2,#0
 12552 0036 1A60     	 str r2,[r3]
2667:../cleanflight/src/main/interface/cli.c **** }
 12553              	 .loc 13 2667 0
 12554 0038 0837     	 adds r7,r7,#8
 12555              	.LCFI512:
 12556              	 .cfi_def_cfa_offset 8
 12557 003a BD46     	 mov sp,r7
 12558              	.LCFI513:
 12559              	 .cfi_def_cfa_register 13
 12560              	 
 12561 003c 80BD     	 pop {r7,pc}
 12562              	.L740:
 12563 003e 00BF     	 .align 2
 12564              	.L739:
 12565 0040 DC070000 	 .word .LC148
 12566 0044 00000000 	 .word cliWriter
 12567 0048 00000000 	 .word cliBuffer
 12568 004c 00000000 	 .word bufferIndex
 12569 0050 00000000 	 .word cliMode
 12570              	 .cfi_endproc
 12571              	.LFE761:
 12573              	 .section .text.cliGpsPassthrough,"ax",%progbits
 12574              	 .align 2
 12575              	 .thumb
 12576              	 .thumb_func
 12578              	cliGpsPassthrough:
 12579              	.LFB762:
2668:../cleanflight/src/main/interface/cli.c **** 
2669:../cleanflight/src/main/interface/cli.c **** #ifdef USE_GPS
2670:../cleanflight/src/main/interface/cli.c **** static void cliGpsPassthrough(char *cmdline)
2671:../cleanflight/src/main/interface/cli.c **** {
 12580              	 .loc 13 2671 0
 12581              	 .cfi_startproc
 12582              	 
 12583              	 
 12584 0000 80B5     	 push {r7,lr}
 12585              	.LCFI514:
 12586              	 .cfi_def_cfa_offset 8
 12587              	 .cfi_offset 7,-8
 12588              	 .cfi_offset 14,-4
 12589 0002 82B0     	 sub sp,sp,#8
 12590              	.LCFI515:
 12591              	 .cfi_def_cfa_offset 16
 12592 0004 00AF     	 add r7,sp,#0
 12593              	.LCFI516:
 12594              	 .cfi_def_cfa_register 7
 12595 0006 7860     	 str r0,[r7,#4]
2672:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
2673:../cleanflight/src/main/interface/cli.c **** 
2674:../cleanflight/src/main/interface/cli.c ****     gpsEnablePassthrough(cliPort);
 12596              	 .loc 13 2674 0
 12597 0008 034B     	 ldr r3,.L742
 12598 000a 1B68     	 ldr r3,[r3]
 12599 000c 1846     	 mov r0,r3
 12600 000e FFF7FEFF 	 bl gpsEnablePassthrough
2675:../cleanflight/src/main/interface/cli.c **** }
 12601              	 .loc 13 2675 0
 12602 0012 0837     	 adds r7,r7,#8
 12603              	.LCFI517:
 12604              	 .cfi_def_cfa_offset 8
 12605 0014 BD46     	 mov sp,r7
 12606              	.LCFI518:
 12607              	 .cfi_def_cfa_register 13
 12608              	 
 12609 0016 80BD     	 pop {r7,pc}
 12610              	.L743:
 12611              	 .align 2
 12612              	.L742:
 12613 0018 00000000 	 .word cliPort
 12614              	 .cfi_endproc
 12615              	.LFE762:
 12617              	 .section .rodata
 12618 0803 00       	 .align 2
 12619              	.LC149:
 12620 0804 23205748 	 .ascii "# WHO_AM_I    0x%X\000"
 12620      4F5F414D 
 12620      5F492020 
 12620      20203078 
 12620      255800
 12621 0817 00       	 .align 2
 12622              	.LC150:
 12623 0818 2320434F 	 .ascii "# CONFIG      0x%X\000"
 12623      4E464947 
 12623      20202020 
 12623      20203078 
 12623      255800
 12624 082b 00       	 .align 2
 12625              	.LC151:
 12626 082c 23204759 	 .ascii "# GYRO_CONFIG 0x%X\000"
 12626      524F5F43 
 12626      4F4E4649 
 12626      47203078 
 12626      255800
 12627              	 .section .text.cliPrintGyroRegisters,"ax",%progbits
 12628              	 .align 2
 12629              	 .thumb
 12630              	 .thumb_func
 12632              	cliPrintGyroRegisters:
 12633              	.LFB763:
2676:../cleanflight/src/main/interface/cli.c **** #endif
2677:../cleanflight/src/main/interface/cli.c **** 
2678:../cleanflight/src/main/interface/cli.c **** #if defined(USE_GYRO_REGISTER_DUMP) && !defined(SIMULATOR_BUILD)
2679:../cleanflight/src/main/interface/cli.c **** static void cliPrintGyroRegisters(uint8_t whichSensor)
2680:../cleanflight/src/main/interface/cli.c **** {
 12634              	 .loc 13 2680 0
 12635              	 .cfi_startproc
 12636              	 
 12637              	 
 12638 0000 80B5     	 push {r7,lr}
 12639              	.LCFI519:
 12640              	 .cfi_def_cfa_offset 8
 12641              	 .cfi_offset 7,-8
 12642              	 .cfi_offset 14,-4
 12643 0002 82B0     	 sub sp,sp,#8
 12644              	.LCFI520:
 12645              	 .cfi_def_cfa_offset 16
 12646 0004 00AF     	 add r7,sp,#0
 12647              	.LCFI521:
 12648              	 .cfi_def_cfa_register 7
 12649 0006 0346     	 mov r3,r0
 12650 0008 FB71     	 strb r3,[r7,#7]
2681:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("# WHO_AM_I    0x%X", gyroReadRegister(whichSensor, MPU_RA_WHO_AM_I));
 12651              	 .loc 13 2681 0
 12652 000a FB79     	 ldrb r3,[r7,#7]
 12653 000c 1846     	 mov r0,r3
 12654 000e 7521     	 movs r1,#117
 12655 0010 FFF7FEFF 	 bl gyroReadRegister
 12656 0014 0346     	 mov r3,r0
 12657 0016 0D48     	 ldr r0,.L745
 12658 0018 1946     	 mov r1,r3
 12659 001a FFF7FEFF 	 bl cliPrintLinef
2682:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("# CONFIG      0x%X", gyroReadRegister(whichSensor, MPU_RA_CONFIG));
 12660              	 .loc 13 2682 0
 12661 001e FB79     	 ldrb r3,[r7,#7]
 12662 0020 1846     	 mov r0,r3
 12663 0022 1A21     	 movs r1,#26
 12664 0024 FFF7FEFF 	 bl gyroReadRegister
 12665 0028 0346     	 mov r3,r0
 12666 002a 0948     	 ldr r0,.L745+4
 12667 002c 1946     	 mov r1,r3
 12668 002e FFF7FEFF 	 bl cliPrintLinef
2683:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("# GYRO_CONFIG 0x%X", gyroReadRegister(whichSensor, MPU_RA_GYRO_CONFIG));
 12669              	 .loc 13 2683 0
 12670 0032 FB79     	 ldrb r3,[r7,#7]
 12671 0034 1846     	 mov r0,r3
 12672 0036 1B21     	 movs r1,#27
 12673 0038 FFF7FEFF 	 bl gyroReadRegister
 12674 003c 0346     	 mov r3,r0
 12675 003e 0548     	 ldr r0,.L745+8
 12676 0040 1946     	 mov r1,r3
 12677 0042 FFF7FEFF 	 bl cliPrintLinef
2684:../cleanflight/src/main/interface/cli.c **** }
 12678              	 .loc 13 2684 0
 12679 0046 0837     	 adds r7,r7,#8
 12680              	.LCFI522:
 12681              	 .cfi_def_cfa_offset 8
 12682 0048 BD46     	 mov sp,r7
 12683              	.LCFI523:
 12684              	 .cfi_def_cfa_register 13
 12685              	 
 12686 004a 80BD     	 pop {r7,pc}
 12687              	.L746:
 12688              	 .align 2
 12689              	.L745:
 12690 004c 04080000 	 .word .LC149
 12691 0050 18080000 	 .word .LC150
 12692 0054 2C080000 	 .word .LC151
 12693              	 .cfi_endproc
 12694              	.LFE763:
 12696              	 .section .text.cliDumpGyroRegisters,"ax",%progbits
 12697              	 .align 2
 12698              	 .thumb
 12699              	 .thumb_func
 12701              	cliDumpGyroRegisters:
 12702              	.LFB764:
2685:../cleanflight/src/main/interface/cli.c **** 
2686:../cleanflight/src/main/interface/cli.c **** static void cliDumpGyroRegisters(char *cmdline)
2687:../cleanflight/src/main/interface/cli.c **** {
 12703              	 .loc 13 2687 0
 12704              	 .cfi_startproc
 12705              	 
 12706              	 
 12707 0000 80B5     	 push {r7,lr}
 12708              	.LCFI524:
 12709              	 .cfi_def_cfa_offset 8
 12710              	 .cfi_offset 7,-8
 12711              	 .cfi_offset 14,-4
 12712 0002 82B0     	 sub sp,sp,#8
 12713              	.LCFI525:
 12714              	 .cfi_def_cfa_offset 16
 12715 0004 00AF     	 add r7,sp,#0
 12716              	.LCFI526:
 12717              	 .cfi_def_cfa_register 7
 12718 0006 7860     	 str r0,[r7,#4]
2688:../cleanflight/src/main/interface/cli.c **** #ifdef USE_DUAL_GYRO
2689:../cleanflight/src/main/interface/cli.c ****     if ((gyroConfig()->gyro_to_use == GYRO_CONFIG_USE_GYRO_1) || (gyroConfig()->gyro_to_use == GYRO
2690:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("\r\n# Gyro 1");
2691:../cleanflight/src/main/interface/cli.c ****         cliPrintGyroRegisters(GYRO_CONFIG_USE_GYRO_1);
2692:../cleanflight/src/main/interface/cli.c ****     }
2693:../cleanflight/src/main/interface/cli.c ****     if ((gyroConfig()->gyro_to_use == GYRO_CONFIG_USE_GYRO_2) || (gyroConfig()->gyro_to_use == GYRO
2694:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("\r\n# Gyro 2");
2695:../cleanflight/src/main/interface/cli.c ****         cliPrintGyroRegisters(GYRO_CONFIG_USE_GYRO_2);
2696:../cleanflight/src/main/interface/cli.c ****     }
2697:../cleanflight/src/main/interface/cli.c **** #else
2698:../cleanflight/src/main/interface/cli.c ****     cliPrintGyroRegisters(GYRO_CONFIG_USE_GYRO_1);
 12719              	 .loc 13 2698 0
 12720 0008 0020     	 movs r0,#0
 12721 000a FFF7FEFF 	 bl cliPrintGyroRegisters
2699:../cleanflight/src/main/interface/cli.c **** #endif // USE_DUAL_GYRO
2700:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
2701:../cleanflight/src/main/interface/cli.c **** }
 12722              	 .loc 13 2701 0
 12723 000e 0837     	 adds r7,r7,#8
 12724              	.LCFI527:
 12725              	 .cfi_def_cfa_offset 8
 12726 0010 BD46     	 mov sp,r7
 12727              	.LCFI528:
 12728              	 .cfi_def_cfa_register 13
 12729              	 
 12730 0012 80BD     	 pop {r7,pc}
 12731              	 .cfi_endproc
 12732              	.LFE764:
 12734              	 .section .rodata
 12735 083f 00       	 .align 2
 12736              	.LC152:
 12737 0840 5573696E 	 .ascii "Using output %d.\000"
 12737      67206F75 
 12737      74707574 
 12737      2025642E 
 12737      00
 12738 0851 000000   	 .align 2
 12739              	.LC153:
 12740 0854 5573696E 	 .ascii "Using all outputs.\000"
 12740      6720616C 
 12740      6C206F75 
 12740      74707574 
 12740      732E00
 12741 0867 00       	 .align 2
 12742              	.LC154:
 12743 0868 496E7661 	 .ascii "Invalid output number. Range: 0  %d.\000"
 12743      6C696420 
 12743      6F757470 
 12743      7574206E 
 12743      756D6265 
 12744              	 .section .text.parseOutputIndex,"ax",%progbits
 12745              	 .align 2
 12746              	 .thumb
 12747              	 .thumb_func
 12749              	parseOutputIndex:
 12750              	.LFB765:
2702:../cleanflight/src/main/interface/cli.c **** #endif
2703:../cleanflight/src/main/interface/cli.c **** 
2704:../cleanflight/src/main/interface/cli.c **** 
2705:../cleanflight/src/main/interface/cli.c **** static int parseOutputIndex(char *pch, bool allowAllEscs) {
 12751              	 .loc 13 2705 0
 12752              	 .cfi_startproc
 12753              	 
 12754              	 
 12755 0000 80B5     	 push {r7,lr}
 12756              	.LCFI529:
 12757              	 .cfi_def_cfa_offset 8
 12758              	 .cfi_offset 7,-8
 12759              	 .cfi_offset 14,-4
 12760 0002 84B0     	 sub sp,sp,#16
 12761              	.LCFI530:
 12762              	 .cfi_def_cfa_offset 24
 12763 0004 00AF     	 add r7,sp,#0
 12764              	.LCFI531:
 12765              	 .cfi_def_cfa_register 7
 12766 0006 7860     	 str r0,[r7,#4]
 12767 0008 0B46     	 mov r3,r1
 12768 000a FB70     	 strb r3,[r7,#3]
2706:../cleanflight/src/main/interface/cli.c ****     int outputIndex = atoi(pch);
 12769              	 .loc 13 2706 0
 12770 000c 7868     	 ldr r0,[r7,#4]
 12771 000e FFF7FEFF 	 bl atoi
 12772 0012 F860     	 str r0,[r7,#12]
2707:../cleanflight/src/main/interface/cli.c ****     if ((outputIndex >= 0) && (outputIndex < getMotorCount())) {
 12773              	 .loc 13 2707 0
 12774 0014 FB68     	 ldr r3,[r7,#12]
 12775 0016 002B     	 cmp r3,#0
 12776 0018 0BDB     	 blt .L749
 12777              	 .loc 13 2707 0 is_stmt 0 discriminator 1
 12778 001a FFF7FEFF 	 bl getMotorCount
 12779 001e 0346     	 mov r3,r0
 12780 0020 1A46     	 mov r2,r3
 12781 0022 FB68     	 ldr r3,[r7,#12]
 12782 0024 9A42     	 cmp r2,r3
 12783 0026 04DD     	 ble .L749
2708:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Using output %d.", outputIndex);
 12784              	 .loc 13 2708 0 is_stmt 1
 12785 0028 0F48     	 ldr r0,.L753
 12786 002a F968     	 ldr r1,[r7,#12]
 12787 002c FFF7FEFF 	 bl cliPrintLinef
 12788 0030 14E0     	 b .L750
 12789              	.L749:
2709:../cleanflight/src/main/interface/cli.c ****     } else if (allowAllEscs && outputIndex == ALL_MOTORS) {
 12790              	 .loc 13 2709 0
 12791 0032 FB78     	 ldrb r3,[r7,#3]
 12792 0034 002B     	 cmp r3,#0
 12793 0036 06D0     	 beq .L751
 12794              	 .loc 13 2709 0 is_stmt 0 discriminator 1
 12795 0038 FB68     	 ldr r3,[r7,#12]
 12796 003a FF2B     	 cmp r3,#255
 12797 003c 03D1     	 bne .L751
2710:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Using all outputs.");
 12798              	 .loc 13 2710 0 is_stmt 1
 12799 003e 0B48     	 ldr r0,.L753+4
 12800 0040 FFF7FEFF 	 bl cliPrintLinef
 12801 0044 0AE0     	 b .L750
 12802              	.L751:
2711:../cleanflight/src/main/interface/cli.c ****     } else {
2712:../cleanflight/src/main/interface/cli.c ****         cliPrintErrorLinef("Invalid output number. Range: 0  %d.", getMotorCount() - 1);
 12803              	 .loc 13 2712 0
 12804 0046 FFF7FEFF 	 bl getMotorCount
 12805 004a 0346     	 mov r3,r0
 12806 004c 013B     	 subs r3,r3,#1
 12807 004e 0848     	 ldr r0,.L753+8
 12808 0050 1946     	 mov r1,r3
 12809 0052 FFF7FEFF 	 bl cliPrintErrorLinef
2713:../cleanflight/src/main/interface/cli.c **** 
2714:../cleanflight/src/main/interface/cli.c ****         return -1;
 12810              	 .loc 13 2714 0
 12811 0056 4FF0FF33 	 mov r3,#-1
 12812 005a 00E0     	 b .L752
 12813              	.L750:
2715:../cleanflight/src/main/interface/cli.c ****     }
2716:../cleanflight/src/main/interface/cli.c **** 
2717:../cleanflight/src/main/interface/cli.c ****     return outputIndex;
 12814              	 .loc 13 2717 0
 12815 005c FB68     	 ldr r3,[r7,#12]
 12816              	.L752:
2718:../cleanflight/src/main/interface/cli.c **** }
 12817              	 .loc 13 2718 0
 12818 005e 1846     	 mov r0,r3
 12819 0060 1037     	 adds r7,r7,#16
 12820              	.LCFI532:
 12821              	 .cfi_def_cfa_offset 8
 12822 0062 BD46     	 mov sp,r7
 12823              	.LCFI533:
 12824              	 .cfi_def_cfa_register 13
 12825              	 
 12826 0064 80BD     	 pop {r7,pc}
 12827              	.L754:
 12828 0066 00BF     	 .align 2
 12829              	.L753:
 12830 0068 40080000 	 .word .LC152
 12831 006c 54080000 	 .word .LC153
 12832 0070 68080000 	 .word .LC154
 12833              	 .cfi_endproc
 12834              	.LFE765:
 12836              	 .section .rodata
 12837 088d 000000   	 .align 2
 12838              	.LC155:
 12839 0890 4D697865 	 .ascii "Mixer: %s\000"
 12839      723A2025 
 12839      7300
 12840              	 .section .text.cliMixer,"ax",%progbits
 12841              	 .align 2
 12842              	 .thumb
 12843              	 .thumb_func
 12845              	cliMixer:
 12846              	.LFB766:
2719:../cleanflight/src/main/interface/cli.c **** 
2720:../cleanflight/src/main/interface/cli.c **** #if defined(USE_DSHOT)
2721:../cleanflight/src/main/interface/cli.c **** #if defined(USE_ESC_SENSOR) && defined(USE_ESC_SENSOR_INFO)
2722:../cleanflight/src/main/interface/cli.c **** 
2723:../cleanflight/src/main/interface/cli.c **** #define ESC_INFO_KISS_V1_EXPECTED_FRAME_SIZE 15
2724:../cleanflight/src/main/interface/cli.c **** #define ESC_INFO_KISS_V2_EXPECTED_FRAME_SIZE 21
2725:../cleanflight/src/main/interface/cli.c **** #define ESC_INFO_BLHELI32_EXPECTED_FRAME_SIZE 64
2726:../cleanflight/src/main/interface/cli.c **** 
2727:../cleanflight/src/main/interface/cli.c **** enum {
2728:../cleanflight/src/main/interface/cli.c ****     ESC_INFO_KISS_V1,
2729:../cleanflight/src/main/interface/cli.c ****     ESC_INFO_KISS_V2,
2730:../cleanflight/src/main/interface/cli.c ****     ESC_INFO_BLHELI32
2731:../cleanflight/src/main/interface/cli.c **** };
2732:../cleanflight/src/main/interface/cli.c **** 
2733:../cleanflight/src/main/interface/cli.c **** #define ESC_INFO_VERSION_POSITION 12
2734:../cleanflight/src/main/interface/cli.c **** 
2735:../cleanflight/src/main/interface/cli.c **** void printEscInfo(const uint8_t *escInfoBuffer, uint8_t bytesRead)
2736:../cleanflight/src/main/interface/cli.c **** {
2737:../cleanflight/src/main/interface/cli.c ****     bool escInfoReceived = false;
2738:../cleanflight/src/main/interface/cli.c ****     if (bytesRead > ESC_INFO_VERSION_POSITION) {
2739:../cleanflight/src/main/interface/cli.c ****         uint8_t escInfoVersion;
2740:../cleanflight/src/main/interface/cli.c ****         uint8_t frameLength;
2741:../cleanflight/src/main/interface/cli.c ****         if (escInfoBuffer[ESC_INFO_VERSION_POSITION] == 254) {
2742:../cleanflight/src/main/interface/cli.c ****             escInfoVersion = ESC_INFO_BLHELI32;
2743:../cleanflight/src/main/interface/cli.c ****             frameLength = ESC_INFO_BLHELI32_EXPECTED_FRAME_SIZE;
2744:../cleanflight/src/main/interface/cli.c ****         } else if (escInfoBuffer[ESC_INFO_VERSION_POSITION] == 255) {
2745:../cleanflight/src/main/interface/cli.c ****             escInfoVersion = ESC_INFO_KISS_V2;
2746:../cleanflight/src/main/interface/cli.c ****             frameLength = ESC_INFO_KISS_V2_EXPECTED_FRAME_SIZE;
2747:../cleanflight/src/main/interface/cli.c ****         } else {
2748:../cleanflight/src/main/interface/cli.c ****             escInfoVersion = ESC_INFO_KISS_V1;
2749:../cleanflight/src/main/interface/cli.c ****             frameLength = ESC_INFO_KISS_V1_EXPECTED_FRAME_SIZE;
2750:../cleanflight/src/main/interface/cli.c ****         }
2751:../cleanflight/src/main/interface/cli.c **** 
2752:../cleanflight/src/main/interface/cli.c ****         if (bytesRead == frameLength) {
2753:../cleanflight/src/main/interface/cli.c ****             escInfoReceived = true;
2754:../cleanflight/src/main/interface/cli.c **** 
2755:../cleanflight/src/main/interface/cli.c ****             if (calculateCrc8(escInfoBuffer, frameLength - 1) == escInfoBuffer[frameLength - 1]) {
2756:../cleanflight/src/main/interface/cli.c ****                 uint8_t firmwareVersion = 0;
2757:../cleanflight/src/main/interface/cli.c ****                 uint8_t firmwareSubVersion = 0;
2758:../cleanflight/src/main/interface/cli.c ****                 uint8_t escType = 0;
2759:../cleanflight/src/main/interface/cli.c ****                 switch (escInfoVersion) {
2760:../cleanflight/src/main/interface/cli.c ****                 case ESC_INFO_KISS_V1:
2761:../cleanflight/src/main/interface/cli.c ****                     firmwareVersion = escInfoBuffer[12];
2762:../cleanflight/src/main/interface/cli.c ****                     firmwareSubVersion = (escInfoBuffer[13] & 0x1f) + 97;
2763:../cleanflight/src/main/interface/cli.c ****                     escType = (escInfoBuffer[13] & 0xe0) >> 5;
2764:../cleanflight/src/main/interface/cli.c **** 
2765:../cleanflight/src/main/interface/cli.c ****                     break;
2766:../cleanflight/src/main/interface/cli.c ****                 case ESC_INFO_KISS_V2:
2767:../cleanflight/src/main/interface/cli.c ****                     firmwareVersion = escInfoBuffer[13];
2768:../cleanflight/src/main/interface/cli.c ****                     firmwareSubVersion = escInfoBuffer[14];
2769:../cleanflight/src/main/interface/cli.c ****                     escType = escInfoBuffer[15];
2770:../cleanflight/src/main/interface/cli.c **** 
2771:../cleanflight/src/main/interface/cli.c ****                     break;
2772:../cleanflight/src/main/interface/cli.c ****                 case ESC_INFO_BLHELI32:
2773:../cleanflight/src/main/interface/cli.c ****                     firmwareVersion = escInfoBuffer[13];
2774:../cleanflight/src/main/interface/cli.c ****                     firmwareSubVersion = escInfoBuffer[14];
2775:../cleanflight/src/main/interface/cli.c ****                     escType = escInfoBuffer[15];
2776:../cleanflight/src/main/interface/cli.c **** 
2777:../cleanflight/src/main/interface/cli.c ****                     break;
2778:../cleanflight/src/main/interface/cli.c ****                 }
2779:../cleanflight/src/main/interface/cli.c **** 
2780:../cleanflight/src/main/interface/cli.c ****                 cliPrint("ESC Type: ");
2781:../cleanflight/src/main/interface/cli.c ****                 switch (escInfoVersion) {
2782:../cleanflight/src/main/interface/cli.c ****                 case ESC_INFO_KISS_V1:
2783:../cleanflight/src/main/interface/cli.c ****                 case ESC_INFO_KISS_V2:
2784:../cleanflight/src/main/interface/cli.c ****                     switch (escType) {
2785:../cleanflight/src/main/interface/cli.c ****                     case 1:
2786:../cleanflight/src/main/interface/cli.c ****                         cliPrintLine("KISS8A");
2787:../cleanflight/src/main/interface/cli.c **** 
2788:../cleanflight/src/main/interface/cli.c ****                         break;
2789:../cleanflight/src/main/interface/cli.c ****                     case 2:
2790:../cleanflight/src/main/interface/cli.c ****                         cliPrintLine("KISS16A");
2791:../cleanflight/src/main/interface/cli.c **** 
2792:../cleanflight/src/main/interface/cli.c ****                         break;
2793:../cleanflight/src/main/interface/cli.c ****                     case 3:
2794:../cleanflight/src/main/interface/cli.c ****                         cliPrintLine("KISS24A");
2795:../cleanflight/src/main/interface/cli.c **** 
2796:../cleanflight/src/main/interface/cli.c ****                         break;
2797:../cleanflight/src/main/interface/cli.c ****                     case 5:
2798:../cleanflight/src/main/interface/cli.c ****                         cliPrintLine("KISS Ultralite");
2799:../cleanflight/src/main/interface/cli.c **** 
2800:../cleanflight/src/main/interface/cli.c ****                         break;
2801:../cleanflight/src/main/interface/cli.c ****                     default:
2802:../cleanflight/src/main/interface/cli.c ****                         cliPrintLine("unknown");
2803:../cleanflight/src/main/interface/cli.c **** 
2804:../cleanflight/src/main/interface/cli.c ****                         break;
2805:../cleanflight/src/main/interface/cli.c ****                     }
2806:../cleanflight/src/main/interface/cli.c **** 
2807:../cleanflight/src/main/interface/cli.c ****                     break;
2808:../cleanflight/src/main/interface/cli.c ****                 case ESC_INFO_BLHELI32:
2809:../cleanflight/src/main/interface/cli.c ****                     {
2810:../cleanflight/src/main/interface/cli.c ****                         char *escType = (char *)(escInfoBuffer + 31);
2811:../cleanflight/src/main/interface/cli.c ****                         escType[32] = 0;
2812:../cleanflight/src/main/interface/cli.c ****                         cliPrintLine(escType);
2813:../cleanflight/src/main/interface/cli.c ****                     }
2814:../cleanflight/src/main/interface/cli.c **** 
2815:../cleanflight/src/main/interface/cli.c ****                     break;
2816:../cleanflight/src/main/interface/cli.c ****                 }
2817:../cleanflight/src/main/interface/cli.c **** 
2818:../cleanflight/src/main/interface/cli.c ****                 cliPrint("MCU Serial No: 0x");
2819:../cleanflight/src/main/interface/cli.c ****                 for (int i = 0; i < 12; i++) {
2820:../cleanflight/src/main/interface/cli.c ****                     if (i && (i % 3 == 0)) {
2821:../cleanflight/src/main/interface/cli.c ****                         cliPrint("-");
2822:../cleanflight/src/main/interface/cli.c ****                     }
2823:../cleanflight/src/main/interface/cli.c ****                     cliPrintf("%02x", escInfoBuffer[i]);
2824:../cleanflight/src/main/interface/cli.c ****                 }
2825:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinefeed();
2826:../cleanflight/src/main/interface/cli.c **** 
2827:../cleanflight/src/main/interface/cli.c ****                 switch (escInfoVersion) {
2828:../cleanflight/src/main/interface/cli.c ****                 case ESC_INFO_KISS_V1:
2829:../cleanflight/src/main/interface/cli.c ****                 case ESC_INFO_KISS_V2:
2830:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef("Firmware Version: %d.%02d%c", firmwareVersion / 100, firmwareVer
2831:../cleanflight/src/main/interface/cli.c **** 
2832:../cleanflight/src/main/interface/cli.c ****                     break;
2833:../cleanflight/src/main/interface/cli.c ****                 case ESC_INFO_BLHELI32:
2834:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef("Firmware Version: %d.%02d%", firmwareVersion, firmwareSubVersion
2835:../cleanflight/src/main/interface/cli.c **** 
2836:../cleanflight/src/main/interface/cli.c ****                     break;
2837:../cleanflight/src/main/interface/cli.c ****                 }
2838:../cleanflight/src/main/interface/cli.c ****                 if (escInfoVersion == ESC_INFO_KISS_V2 || escInfoVersion == ESC_INFO_BLHELI32) {
2839:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef("Rotation Direction: %s", escInfoBuffer[16] ? "reversed" : "norma
2840:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef("3D: %s", escInfoBuffer[17] ? "on" : "off");
2841:../cleanflight/src/main/interface/cli.c ****                     if (escInfoVersion == ESC_INFO_BLHELI32) {
2842:../cleanflight/src/main/interface/cli.c ****                         uint8_t setting = escInfoBuffer[18];
2843:../cleanflight/src/main/interface/cli.c ****                         cliPrint("Low voltage Limit: ");
2844:../cleanflight/src/main/interface/cli.c ****                         switch (setting) {
2845:../cleanflight/src/main/interface/cli.c ****                         case 0:
2846:../cleanflight/src/main/interface/cli.c ****                             cliPrintLine("off");
2847:../cleanflight/src/main/interface/cli.c **** 
2848:../cleanflight/src/main/interface/cli.c ****                             break;
2849:../cleanflight/src/main/interface/cli.c ****                         case 255:
2850:../cleanflight/src/main/interface/cli.c ****                             cliPrintLine("unsupported");
2851:../cleanflight/src/main/interface/cli.c **** 
2852:../cleanflight/src/main/interface/cli.c ****                             break;
2853:../cleanflight/src/main/interface/cli.c ****                         default:
2854:../cleanflight/src/main/interface/cli.c ****                             cliPrintLinef("%d.%01d", setting / 10, setting % 10);
2855:../cleanflight/src/main/interface/cli.c **** 
2856:../cleanflight/src/main/interface/cli.c ****                             break;
2857:../cleanflight/src/main/interface/cli.c ****                         }
2858:../cleanflight/src/main/interface/cli.c **** 
2859:../cleanflight/src/main/interface/cli.c ****                         setting = escInfoBuffer[19];
2860:../cleanflight/src/main/interface/cli.c ****                         cliPrint("Current Limit: ");
2861:../cleanflight/src/main/interface/cli.c ****                         switch (setting) {
2862:../cleanflight/src/main/interface/cli.c ****                         case 0:
2863:../cleanflight/src/main/interface/cli.c ****                             cliPrintLine("off");
2864:../cleanflight/src/main/interface/cli.c **** 
2865:../cleanflight/src/main/interface/cli.c ****                             break;
2866:../cleanflight/src/main/interface/cli.c ****                         case 255:
2867:../cleanflight/src/main/interface/cli.c ****                             cliPrintLine("unsupported");
2868:../cleanflight/src/main/interface/cli.c **** 
2869:../cleanflight/src/main/interface/cli.c ****                             break;
2870:../cleanflight/src/main/interface/cli.c ****                         default:
2871:../cleanflight/src/main/interface/cli.c ****                             cliPrintLinef("%d", setting);
2872:../cleanflight/src/main/interface/cli.c **** 
2873:../cleanflight/src/main/interface/cli.c ****                             break;
2874:../cleanflight/src/main/interface/cli.c ****                         }
2875:../cleanflight/src/main/interface/cli.c **** 
2876:../cleanflight/src/main/interface/cli.c ****                         for (int i = 0; i < 4; i++) {
2877:../cleanflight/src/main/interface/cli.c ****                             setting = escInfoBuffer[i + 20];
2878:../cleanflight/src/main/interface/cli.c ****                             cliPrintLinef("LED %d: %s", i, setting ? (setting == 255) ? "unsupporte
2879:../cleanflight/src/main/interface/cli.c ****                         }
2880:../cleanflight/src/main/interface/cli.c ****                     }
2881:../cleanflight/src/main/interface/cli.c ****                 }
2882:../cleanflight/src/main/interface/cli.c ****             } else {
2883:../cleanflight/src/main/interface/cli.c ****                 cliPrintErrorLinef("Checksum Error.");
2884:../cleanflight/src/main/interface/cli.c ****             }
2885:../cleanflight/src/main/interface/cli.c ****         }
2886:../cleanflight/src/main/interface/cli.c ****     }
2887:../cleanflight/src/main/interface/cli.c **** 
2888:../cleanflight/src/main/interface/cli.c ****     if (!escInfoReceived) {
2889:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("No Info.");
2890:../cleanflight/src/main/interface/cli.c ****     }
2891:../cleanflight/src/main/interface/cli.c **** }
2892:../cleanflight/src/main/interface/cli.c **** 
2893:../cleanflight/src/main/interface/cli.c **** static void executeEscInfoCommand(uint8_t escIndex)
2894:../cleanflight/src/main/interface/cli.c **** {
2895:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("Info for ESC %d:", escIndex);
2896:../cleanflight/src/main/interface/cli.c **** 
2897:../cleanflight/src/main/interface/cli.c ****     uint8_t escInfoBuffer[ESC_INFO_BLHELI32_EXPECTED_FRAME_SIZE];
2898:../cleanflight/src/main/interface/cli.c **** 
2899:../cleanflight/src/main/interface/cli.c ****     startEscDataRead(escInfoBuffer, ESC_INFO_BLHELI32_EXPECTED_FRAME_SIZE);
2900:../cleanflight/src/main/interface/cli.c **** 
2901:../cleanflight/src/main/interface/cli.c ****     pwmWriteDshotCommand(escIndex, getMotorCount(), DSHOT_CMD_ESC_INFO, true);
2902:../cleanflight/src/main/interface/cli.c **** 
2903:../cleanflight/src/main/interface/cli.c ****     delay(10);
2904:../cleanflight/src/main/interface/cli.c **** 
2905:../cleanflight/src/main/interface/cli.c ****     printEscInfo(escInfoBuffer, getNumberEscBytesRead());
2906:../cleanflight/src/main/interface/cli.c **** }
2907:../cleanflight/src/main/interface/cli.c **** #endif // USE_ESC_SENSOR && USE_ESC_SENSOR_INFO
2908:../cleanflight/src/main/interface/cli.c **** 
2909:../cleanflight/src/main/interface/cli.c **** static void cliDshotProg(char *cmdline)
2910:../cleanflight/src/main/interface/cli.c **** {
2911:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline) || motorConfig()->dev.motorPwmProtocol < PWM_TYPE_DSHOT150) {
2912:../cleanflight/src/main/interface/cli.c ****         cliShowParseError();
2913:../cleanflight/src/main/interface/cli.c **** 
2914:../cleanflight/src/main/interface/cli.c ****         return;
2915:../cleanflight/src/main/interface/cli.c ****     }
2916:../cleanflight/src/main/interface/cli.c **** 
2917:../cleanflight/src/main/interface/cli.c ****     char *saveptr;
2918:../cleanflight/src/main/interface/cli.c ****     char *pch = strtok_r(cmdline, " ", &saveptr);
2919:../cleanflight/src/main/interface/cli.c ****     int pos = 0;
2920:../cleanflight/src/main/interface/cli.c ****     int escIndex = 0;
2921:../cleanflight/src/main/interface/cli.c ****     bool firstCommand = true;
2922:../cleanflight/src/main/interface/cli.c ****     while (pch != NULL) {
2923:../cleanflight/src/main/interface/cli.c ****         switch (pos) {
2924:../cleanflight/src/main/interface/cli.c ****         case 0:
2925:../cleanflight/src/main/interface/cli.c ****             escIndex = parseOutputIndex(pch, true);
2926:../cleanflight/src/main/interface/cli.c ****             if (escIndex == -1) {
2927:../cleanflight/src/main/interface/cli.c ****                 return;
2928:../cleanflight/src/main/interface/cli.c ****             }
2929:../cleanflight/src/main/interface/cli.c **** 
2930:../cleanflight/src/main/interface/cli.c ****             break;
2931:../cleanflight/src/main/interface/cli.c ****         default:
2932:../cleanflight/src/main/interface/cli.c ****             {
2933:../cleanflight/src/main/interface/cli.c ****                 int command = atoi(pch);
2934:../cleanflight/src/main/interface/cli.c ****                 if (command >= 0 && command < DSHOT_MIN_THROTTLE) {
2935:../cleanflight/src/main/interface/cli.c ****                     if (firstCommand) {
2936:../cleanflight/src/main/interface/cli.c ****                         pwmDisableMotors();
2937:../cleanflight/src/main/interface/cli.c **** 
2938:../cleanflight/src/main/interface/cli.c ****                         if (command == DSHOT_CMD_ESC_INFO) {
2939:../cleanflight/src/main/interface/cli.c ****                             delay(5); // Wait for potential ESC telemetry transmission to finish
2940:../cleanflight/src/main/interface/cli.c ****                         } else {
2941:../cleanflight/src/main/interface/cli.c ****                             delay(1);
2942:../cleanflight/src/main/interface/cli.c ****                         }
2943:../cleanflight/src/main/interface/cli.c **** 
2944:../cleanflight/src/main/interface/cli.c ****                         firstCommand = false;
2945:../cleanflight/src/main/interface/cli.c ****                     }
2946:../cleanflight/src/main/interface/cli.c **** 
2947:../cleanflight/src/main/interface/cli.c ****                     if (command != DSHOT_CMD_ESC_INFO) {
2948:../cleanflight/src/main/interface/cli.c ****                         pwmWriteDshotCommand(escIndex, getMotorCount(), command, true);
2949:../cleanflight/src/main/interface/cli.c ****                     } else {
2950:../cleanflight/src/main/interface/cli.c **** #if defined(USE_ESC_SENSOR) && defined(USE_ESC_SENSOR_INFO)
2951:../cleanflight/src/main/interface/cli.c ****                         if (feature(FEATURE_ESC_SENSOR)) {
2952:../cleanflight/src/main/interface/cli.c ****                             if (escIndex != ALL_MOTORS) {
2953:../cleanflight/src/main/interface/cli.c ****                                 executeEscInfoCommand(escIndex);
2954:../cleanflight/src/main/interface/cli.c ****                             } else {
2955:../cleanflight/src/main/interface/cli.c ****                                 for (uint8_t i = 0; i < getMotorCount(); i++) {
2956:../cleanflight/src/main/interface/cli.c ****                                     executeEscInfoCommand(i);
2957:../cleanflight/src/main/interface/cli.c ****                                 }
2958:../cleanflight/src/main/interface/cli.c ****                             }
2959:../cleanflight/src/main/interface/cli.c ****                         } else
2960:../cleanflight/src/main/interface/cli.c **** #endif
2961:../cleanflight/src/main/interface/cli.c ****                         {
2962:../cleanflight/src/main/interface/cli.c ****                             cliPrintLine("Not supported.");
2963:../cleanflight/src/main/interface/cli.c ****                         }
2964:../cleanflight/src/main/interface/cli.c ****                     }
2965:../cleanflight/src/main/interface/cli.c **** 
2966:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef("Command Sent: %d", command);
2967:../cleanflight/src/main/interface/cli.c **** 
2968:../cleanflight/src/main/interface/cli.c ****                 } else {
2969:../cleanflight/src/main/interface/cli.c ****                     cliPrintErrorLinef("Invalid command. Range: 1 - %d.", DSHOT_MIN_THROTTLE - 1);
2970:../cleanflight/src/main/interface/cli.c ****                 }
2971:../cleanflight/src/main/interface/cli.c ****             }
2972:../cleanflight/src/main/interface/cli.c **** 
2973:../cleanflight/src/main/interface/cli.c ****             break;
2974:../cleanflight/src/main/interface/cli.c ****         }
2975:../cleanflight/src/main/interface/cli.c **** 
2976:../cleanflight/src/main/interface/cli.c ****         pos++;
2977:../cleanflight/src/main/interface/cli.c ****         pch = strtok_r(NULL, " ", &saveptr);
2978:../cleanflight/src/main/interface/cli.c ****     }
2979:../cleanflight/src/main/interface/cli.c **** 
2980:../cleanflight/src/main/interface/cli.c ****     pwmEnableMotors();
2981:../cleanflight/src/main/interface/cli.c **** }
2982:../cleanflight/src/main/interface/cli.c **** #endif // USE_DSHOT
2983:../cleanflight/src/main/interface/cli.c **** 
2984:../cleanflight/src/main/interface/cli.c **** #ifdef USE_ESCSERIAL
2985:../cleanflight/src/main/interface/cli.c **** static void cliEscPassthrough(char *cmdline)
2986:../cleanflight/src/main/interface/cli.c **** {
2987:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
2988:../cleanflight/src/main/interface/cli.c ****         cliShowParseError();
2989:../cleanflight/src/main/interface/cli.c **** 
2990:../cleanflight/src/main/interface/cli.c ****         return;
2991:../cleanflight/src/main/interface/cli.c ****     }
2992:../cleanflight/src/main/interface/cli.c **** 
2993:../cleanflight/src/main/interface/cli.c ****     char *saveptr;
2994:../cleanflight/src/main/interface/cli.c ****     char *pch = strtok_r(cmdline, " ", &saveptr);
2995:../cleanflight/src/main/interface/cli.c ****     int pos = 0;
2996:../cleanflight/src/main/interface/cli.c ****     uint8_t mode = 0;
2997:../cleanflight/src/main/interface/cli.c ****     int escIndex = 0;
2998:../cleanflight/src/main/interface/cli.c ****     while (pch != NULL) {
2999:../cleanflight/src/main/interface/cli.c ****         switch (pos) {
3000:../cleanflight/src/main/interface/cli.c ****         case 0:
3001:../cleanflight/src/main/interface/cli.c ****             if (strncasecmp(pch, "sk", strlen(pch)) == 0) {
3002:../cleanflight/src/main/interface/cli.c ****                 mode = PROTOCOL_SIMONK;
3003:../cleanflight/src/main/interface/cli.c ****             } else if (strncasecmp(pch, "bl", strlen(pch)) == 0) {
3004:../cleanflight/src/main/interface/cli.c ****                 mode = PROTOCOL_BLHELI;
3005:../cleanflight/src/main/interface/cli.c ****             } else if (strncasecmp(pch, "ki", strlen(pch)) == 0) {
3006:../cleanflight/src/main/interface/cli.c ****                 mode = PROTOCOL_KISS;
3007:../cleanflight/src/main/interface/cli.c ****             } else if (strncasecmp(pch, "cc", strlen(pch)) == 0) {
3008:../cleanflight/src/main/interface/cli.c ****                 mode = PROTOCOL_KISSALL;
3009:../cleanflight/src/main/interface/cli.c ****             } else {
3010:../cleanflight/src/main/interface/cli.c ****                 cliShowParseError();
3011:../cleanflight/src/main/interface/cli.c **** 
3012:../cleanflight/src/main/interface/cli.c ****                 return;
3013:../cleanflight/src/main/interface/cli.c ****             }
3014:../cleanflight/src/main/interface/cli.c ****             break;
3015:../cleanflight/src/main/interface/cli.c ****         case 1:
3016:../cleanflight/src/main/interface/cli.c ****             escIndex = parseOutputIndex(pch, mode == PROTOCOL_KISS);
3017:../cleanflight/src/main/interface/cli.c ****             if (escIndex == -1) {
3018:../cleanflight/src/main/interface/cli.c ****                 return;
3019:../cleanflight/src/main/interface/cli.c ****             }
3020:../cleanflight/src/main/interface/cli.c **** 
3021:../cleanflight/src/main/interface/cli.c ****             break;
3022:../cleanflight/src/main/interface/cli.c ****         default:
3023:../cleanflight/src/main/interface/cli.c ****             cliShowParseError();
3024:../cleanflight/src/main/interface/cli.c **** 
3025:../cleanflight/src/main/interface/cli.c ****             return;
3026:../cleanflight/src/main/interface/cli.c **** 
3027:../cleanflight/src/main/interface/cli.c ****             break;
3028:../cleanflight/src/main/interface/cli.c **** 
3029:../cleanflight/src/main/interface/cli.c ****         }
3030:../cleanflight/src/main/interface/cli.c ****         pos++;
3031:../cleanflight/src/main/interface/cli.c ****         pch = strtok_r(NULL, " ", &saveptr);
3032:../cleanflight/src/main/interface/cli.c ****     }
3033:../cleanflight/src/main/interface/cli.c **** 
3034:../cleanflight/src/main/interface/cli.c ****     escEnablePassthrough(cliPort, escIndex, mode);
3035:../cleanflight/src/main/interface/cli.c **** }
3036:../cleanflight/src/main/interface/cli.c **** #endif
3037:../cleanflight/src/main/interface/cli.c **** 
3038:../cleanflight/src/main/interface/cli.c **** #ifndef USE_QUAD_MIXER_ONLY
3039:../cleanflight/src/main/interface/cli.c **** static void cliMixer(char *cmdline)
3040:../cleanflight/src/main/interface/cli.c **** {
 12847              	 .loc 13 3040 0
 12848              	 .cfi_startproc
 12849              	 
 12850              	 
 12851 0000 80B5     	 push {r7,lr}
 12852              	.LCFI534:
 12853              	 .cfi_def_cfa_offset 8
 12854              	 .cfi_offset 7,-8
 12855              	 .cfi_offset 14,-4
 12856 0002 86B0     	 sub sp,sp,#24
 12857              	.LCFI535:
 12858              	 .cfi_def_cfa_offset 32
 12859 0004 00AF     	 add r7,sp,#0
 12860              	.LCFI536:
 12861              	 .cfi_def_cfa_register 7
 12862 0006 7860     	 str r0,[r7,#4]
3041:../cleanflight/src/main/interface/cli.c ****     int len;
3042:../cleanflight/src/main/interface/cli.c **** 
3043:../cleanflight/src/main/interface/cli.c ****     len = strlen(cmdline);
 12863              	 .loc 13 3043 0
 12864 0008 7868     	 ldr r0,[r7,#4]
 12865 000a FFF7FEFF 	 bl strlen
 12866 000e 0346     	 mov r3,r0
 12867 0010 FB60     	 str r3,[r7,#12]
3044:../cleanflight/src/main/interface/cli.c **** 
3045:../cleanflight/src/main/interface/cli.c ****     if (len == 0) {
 12868              	 .loc 13 3045 0
 12869 0012 FB68     	 ldr r3,[r7,#12]
 12870 0014 002B     	 cmp r3,#0
 12871 0016 0CD1     	 bne .L756
3046:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Mixer: %s", mixerNames[mixerConfig()->mixerMode - 1]);
 12872              	 .loc 13 3046 0
 12873 0018 FFF7FEFF 	 bl mixerConfig
 12874 001c 0346     	 mov r3,r0
 12875 001e 1B78     	 ldrb r3,[r3]
 12876 0020 013B     	 subs r3,r3,#1
 12877 0022 2C4A     	 ldr r2,.L766
 12878 0024 52F82330 	 ldr r3,[r2,r3,lsl#2]
 12879 0028 2B48     	 ldr r0,.L766+4
 12880 002a 1946     	 mov r1,r3
 12881 002c FFF7FEFF 	 bl cliPrintLinef
3047:../cleanflight/src/main/interface/cli.c ****         return;
 12882              	 .loc 13 3047 0
 12883 0030 4DE0     	 b .L755
 12884              	.L756:
3048:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "list", len) == 0) {
 12885              	 .loc 13 3048 0
 12886 0032 FB68     	 ldr r3,[r7,#12]
 12887 0034 7868     	 ldr r0,[r7,#4]
 12888 0036 2949     	 ldr r1,.L766+8
 12889 0038 1A46     	 mov r2,r3
 12890 003a FFF7FEFF 	 bl strncasecmp
 12891 003e 0346     	 mov r3,r0
 12892 0040 002B     	 cmp r3,#0
 12893 0042 1AD1     	 bne .L758
3049:../cleanflight/src/main/interface/cli.c ****         cliPrint("Available:");
 12894              	 .loc 13 3049 0
 12895 0044 2648     	 ldr r0,.L766+12
 12896 0046 FFF7FEFF 	 bl cliPrint
 12897              	.LBB88:
3050:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; ; i++) {
 12898              	 .loc 13 3050 0
 12899 004a 0023     	 movs r3,#0
 12900 004c 7B61     	 str r3,[r7,#20]
 12901              	.L761:
3051:../cleanflight/src/main/interface/cli.c ****             if (mixerNames[i] == NULL)
 12902              	 .loc 13 3051 0
 12903 004e 214A     	 ldr r2,.L766
 12904 0050 7B69     	 ldr r3,[r7,#20]
 12905 0052 52F82330 	 ldr r3,[r2,r3,lsl#2]
 12906 0056 002B     	 cmp r3,#0
 12907 0058 03D1     	 bne .L759
3052:../cleanflight/src/main/interface/cli.c ****                 break;
 12908              	 .loc 13 3052 0
 12909 005a 00BF     	 nop
 12910              	.LBE88:
3053:../cleanflight/src/main/interface/cli.c ****             cliPrintf(" %s", mixerNames[i]);
3054:../cleanflight/src/main/interface/cli.c ****         }
3055:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 12911              	 .loc 13 3055 0
 12912 005c FFF7FEFF 	 bl cliPrintLinefeed
3056:../cleanflight/src/main/interface/cli.c ****         return;
 12913              	 .loc 13 3056 0
 12914 0060 35E0     	 b .L755
 12915              	.L759:
 12916              	.LBB89:
3053:../cleanflight/src/main/interface/cli.c ****             cliPrintf(" %s", mixerNames[i]);
 12917              	 .loc 13 3053 0
 12918 0062 1C4A     	 ldr r2,.L766
 12919 0064 7B69     	 ldr r3,[r7,#20]
 12920 0066 52F82330 	 ldr r3,[r2,r3,lsl#2]
 12921 006a 1E48     	 ldr r0,.L766+16
 12922 006c 1946     	 mov r1,r3
 12923 006e FFF7FEFF 	 bl cliPrintf
3050:../cleanflight/src/main/interface/cli.c ****             if (mixerNames[i] == NULL)
 12924              	 .loc 13 3050 0
 12925 0072 7B69     	 ldr r3,[r7,#20]
 12926 0074 0133     	 adds r3,r3,#1
 12927 0076 7B61     	 str r3,[r7,#20]
3054:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 12928              	 .loc 13 3054 0
 12929 0078 E9E7     	 b .L761
 12930              	.L758:
 12931              	.LBE89:
 12932              	.LBB90:
3057:../cleanflight/src/main/interface/cli.c ****     }
3058:../cleanflight/src/main/interface/cli.c **** 
3059:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; ; i++) {
 12933              	 .loc 13 3059 0
 12934 007a 0023     	 movs r3,#0
 12935 007c 3B61     	 str r3,[r7,#16]
 12936              	.L765:
3060:../cleanflight/src/main/interface/cli.c ****         if (mixerNames[i] == NULL) {
 12937              	 .loc 13 3060 0
 12938 007e 154A     	 ldr r2,.L766
 12939 0080 3B69     	 ldr r3,[r7,#16]
 12940 0082 52F82330 	 ldr r3,[r2,r3,lsl#2]
 12941 0086 002B     	 cmp r3,#0
 12942 0088 03D1     	 bne .L762
3061:../cleanflight/src/main/interface/cli.c ****             cliPrintErrorLinef("Invalid name");
 12943              	 .loc 13 3061 0
 12944 008a 1748     	 ldr r0,.L766+20
 12945 008c FFF7FEFF 	 bl cliPrintErrorLinef
3062:../cleanflight/src/main/interface/cli.c ****             return;
 12946              	 .loc 13 3062 0
 12947 0090 1DE0     	 b .L755
 12948              	.L762:
3063:../cleanflight/src/main/interface/cli.c ****         }
3064:../cleanflight/src/main/interface/cli.c ****         if (strncasecmp(cmdline, mixerNames[i], len) == 0) {
 12949              	 .loc 13 3064 0
 12950 0092 104A     	 ldr r2,.L766
 12951 0094 3B69     	 ldr r3,[r7,#16]
 12952 0096 52F82320 	 ldr r2,[r2,r3,lsl#2]
 12953 009a FB68     	 ldr r3,[r7,#12]
 12954 009c 7868     	 ldr r0,[r7,#4]
 12955 009e 1146     	 mov r1,r2
 12956 00a0 1A46     	 mov r2,r3
 12957 00a2 FFF7FEFF 	 bl strncasecmp
 12958 00a6 0346     	 mov r3,r0
 12959 00a8 002B     	 cmp r3,#0
 12960 00aa 0CD1     	 bne .L763
3065:../cleanflight/src/main/interface/cli.c ****             mixerConfigMutable()->mixerMode = i + 1;
 12961              	 .loc 13 3065 0
 12962 00ac FFF7FEFF 	 bl mixerConfigMutable
 12963 00b0 0246     	 mov r2,r0
 12964 00b2 3B69     	 ldr r3,[r7,#16]
 12965 00b4 DBB2     	 uxtb r3,r3
 12966 00b6 0133     	 adds r3,r3,#1
 12967 00b8 DBB2     	 uxtb r3,r3
 12968 00ba 1370     	 strb r3,[r2]
3066:../cleanflight/src/main/interface/cli.c ****             break;
 12969              	 .loc 13 3066 0
 12970 00bc 00BF     	 nop
 12971              	.LBE90:
3067:../cleanflight/src/main/interface/cli.c ****         }
3068:../cleanflight/src/main/interface/cli.c ****     }
3069:../cleanflight/src/main/interface/cli.c **** 
3070:../cleanflight/src/main/interface/cli.c ****     cliMixer("");
 12972              	 .loc 13 3070 0
 12973 00be 0B48     	 ldr r0,.L766+24
 12974 00c0 FFF79EFF 	 bl cliMixer
 12975 00c4 03E0     	 b .L755
 12976              	.L763:
 12977              	.LBB91:
3059:../cleanflight/src/main/interface/cli.c ****         if (mixerNames[i] == NULL) {
 12978              	 .loc 13 3059 0
 12979 00c6 3B69     	 ldr r3,[r7,#16]
 12980 00c8 0133     	 adds r3,r3,#1
 12981 00ca 3B61     	 str r3,[r7,#16]
3068:../cleanflight/src/main/interface/cli.c **** 
 12982              	 .loc 13 3068 0
 12983 00cc D7E7     	 b .L765
 12984              	.L755:
 12985              	.LBE91:
3071:../cleanflight/src/main/interface/cli.c **** }
 12986              	 .loc 13 3071 0
 12987 00ce 1837     	 adds r7,r7,#24
 12988              	.LCFI537:
 12989              	 .cfi_def_cfa_offset 8
 12990 00d0 BD46     	 mov sp,r7
 12991              	.LCFI538:
 12992              	 .cfi_def_cfa_register 13
 12993              	 
 12994 00d2 80BD     	 pop {r7,pc}
 12995              	.L767:
 12996              	 .align 2
 12997              	.L766:
 12998 00d4 00000000 	 .word mixerNames
 12999 00d8 90080000 	 .word .LC155
 13000 00dc 70070000 	 .word .LC139
 13001 00e0 78070000 	 .word .LC140
 13002 00e4 84070000 	 .word .LC141
 13003 00e8 E4040000 	 .word .LC100
 13004 00ec 04000000 	 .word .LC1
 13005              	 .cfi_endproc
 13006              	.LFE766:
 13008              	 .section .rodata
 13009 089a 0000     	 .align 2
 13010              	.LC156:
 13011 089c 76616C75 	 .ascii "value\000"
 13011      6500
 13012 08a2 0000     	 .align 2
 13013              	.LC157:
 13014 08a4 6D6F746F 	 .ascii "motor %d: %d\000"
 13014      72202564 
 13014      3A202564 
 13014      00
 13015 08b1 000000   	 .align 2
 13016              	.LC158:
 13017 08b4 616C6C20 	 .ascii "all motors: %d\000"
 13017      6D6F746F 
 13017      72733A20 
 13017      256400
 13018              	 .section .text.cliMotor,"ax",%progbits
 13019              	 .align 2
 13020              	 .thumb
 13021              	 .thumb_func
 13023              	cliMotor:
 13024              	.LFB767:
3072:../cleanflight/src/main/interface/cli.c **** #endif
3073:../cleanflight/src/main/interface/cli.c **** 
3074:../cleanflight/src/main/interface/cli.c **** static void cliMotor(char *cmdline)
3075:../cleanflight/src/main/interface/cli.c **** {
 13025              	 .loc 13 3075 0
 13026              	 .cfi_startproc
 13027              	 
 13028              	 
 13029 0000 80B5     	 push {r7,lr}
 13030              	.LCFI539:
 13031              	 .cfi_def_cfa_offset 8
 13032              	 .cfi_offset 7,-8
 13033              	 .cfi_offset 14,-4
 13034 0002 8AB0     	 sub sp,sp,#40
 13035              	.LCFI540:
 13036              	 .cfi_def_cfa_offset 48
 13037 0004 00AF     	 add r7,sp,#0
 13038              	.LCFI541:
 13039              	 .cfi_def_cfa_register 7
 13040 0006 7860     	 str r0,[r7,#4]
3076:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 13041              	 .loc 13 3076 0
 13042 0008 7868     	 ldr r0,[r7,#4]
 13043 000a FFF7FEFF 	 bl isEmpty
 13044 000e 0346     	 mov r3,r0
 13045 0010 002B     	 cmp r3,#0
 13046 0012 02D0     	 beq .L769
3077:../cleanflight/src/main/interface/cli.c ****         cliShowParseError();
 13047              	 .loc 13 3077 0
 13048 0014 FFF7FEFF 	 bl cliShowParseError
3078:../cleanflight/src/main/interface/cli.c **** 
3079:../cleanflight/src/main/interface/cli.c ****         return;
 13049              	 .loc 13 3079 0
 13050 0018 85E0     	 b .L768
 13051              	.L769:
3080:../cleanflight/src/main/interface/cli.c ****     }
3081:../cleanflight/src/main/interface/cli.c **** 
3082:../cleanflight/src/main/interface/cli.c ****     int motorIndex = 0;
 13052              	 .loc 13 3082 0
 13053 001a 0023     	 movs r3,#0
 13054 001c 7B62     	 str r3,[r7,#36]
3083:../cleanflight/src/main/interface/cli.c ****     int motorValue = 0;
 13055              	 .loc 13 3083 0
 13056 001e 0023     	 movs r3,#0
 13057 0020 3B62     	 str r3,[r7,#32]
3084:../cleanflight/src/main/interface/cli.c **** 
3085:../cleanflight/src/main/interface/cli.c ****     char *saveptr;
3086:../cleanflight/src/main/interface/cli.c ****     char *pch = strtok_r(cmdline, " ", &saveptr);
 13058              	 .loc 13 3086 0
 13059 0022 07F10C03 	 add r3,r7,#12
 13060 0026 7868     	 ldr r0,[r7,#4]
 13061 0028 4049     	 ldr r1,.L786
 13062 002a 1A46     	 mov r2,r3
 13063 002c FFF7FEFF 	 bl strtok_r
 13064 0030 F861     	 str r0,[r7,#28]
3087:../cleanflight/src/main/interface/cli.c ****     int index = 0;
 13065              	 .loc 13 3087 0
 13066 0032 0023     	 movs r3,#0
 13067 0034 BB61     	 str r3,[r7,#24]
3088:../cleanflight/src/main/interface/cli.c ****     while (pch != NULL) {
 13068              	 .loc 13 3088 0
 13069 0036 20E0     	 b .L771
 13070              	.L776:
3089:../cleanflight/src/main/interface/cli.c ****         switch (index) {
 13071              	 .loc 13 3089 0
 13072 0038 BB69     	 ldr r3,[r7,#24]
 13073 003a 002B     	 cmp r3,#0
 13074 003c 02D0     	 beq .L773
 13075 003e 012B     	 cmp r3,#1
 13076 0040 0BD0     	 beq .L774
 13077 0042 0FE0     	 b .L772
 13078              	.L773:
3090:../cleanflight/src/main/interface/cli.c ****         case 0:
3091:../cleanflight/src/main/interface/cli.c ****             motorIndex = parseOutputIndex(pch, true);
 13079              	 .loc 13 3091 0
 13080 0044 F869     	 ldr r0,[r7,#28]
 13081 0046 0121     	 movs r1,#1
 13082 0048 FFF7FEFF 	 bl parseOutputIndex
 13083 004c 7862     	 str r0,[r7,#36]
3092:../cleanflight/src/main/interface/cli.c ****             if (motorIndex == -1) {
 13084              	 .loc 13 3092 0
 13085 004e 7B6A     	 ldr r3,[r7,#36]
 13086 0050 B3F1FF3F 	 cmp r3,#-1
 13087 0054 00D1     	 bne .L775
3093:../cleanflight/src/main/interface/cli.c ****                 return;
 13088              	 .loc 13 3093 0
 13089 0056 66E0     	 b .L768
 13090              	.L775:
3094:../cleanflight/src/main/interface/cli.c ****             }
3095:../cleanflight/src/main/interface/cli.c **** 
3096:../cleanflight/src/main/interface/cli.c ****             break;
 13091              	 .loc 13 3096 0
 13092 0058 04E0     	 b .L772
 13093              	.L774:
3097:../cleanflight/src/main/interface/cli.c ****         case 1:
3098:../cleanflight/src/main/interface/cli.c ****             motorValue = atoi(pch);
 13094              	 .loc 13 3098 0
 13095 005a F869     	 ldr r0,[r7,#28]
 13096 005c FFF7FEFF 	 bl atoi
 13097 0060 3862     	 str r0,[r7,#32]
3099:../cleanflight/src/main/interface/cli.c **** 
3100:../cleanflight/src/main/interface/cli.c ****             break;
 13098              	 .loc 13 3100 0
 13099 0062 00BF     	 nop
 13100              	.L772:
3101:../cleanflight/src/main/interface/cli.c ****         }
3102:../cleanflight/src/main/interface/cli.c ****         index++;
 13101              	 .loc 13 3102 0
 13102 0064 BB69     	 ldr r3,[r7,#24]
 13103 0066 0133     	 adds r3,r3,#1
 13104 0068 BB61     	 str r3,[r7,#24]
3103:../cleanflight/src/main/interface/cli.c ****         pch = strtok_r(NULL, " ", &saveptr);
 13105              	 .loc 13 3103 0
 13106 006a 07F10C03 	 add r3,r7,#12
 13107 006e 0020     	 movs r0,#0
 13108 0070 2E49     	 ldr r1,.L786
 13109 0072 1A46     	 mov r2,r3
 13110 0074 FFF7FEFF 	 bl strtok_r
 13111 0078 F861     	 str r0,[r7,#28]
 13112              	.L771:
3088:../cleanflight/src/main/interface/cli.c ****         switch (index) {
 13113              	 .loc 13 3088 0
 13114 007a FB69     	 ldr r3,[r7,#28]
 13115 007c 002B     	 cmp r3,#0
 13116 007e DBD1     	 bne .L776
3104:../cleanflight/src/main/interface/cli.c ****     }
3105:../cleanflight/src/main/interface/cli.c **** 
3106:../cleanflight/src/main/interface/cli.c ****     if (index == 2) {
 13117              	 .loc 13 3106 0
 13118 0080 BB69     	 ldr r3,[r7,#24]
 13119 0082 022B     	 cmp r3,#2
 13120 0084 4DD1     	 bne .L777
3107:../cleanflight/src/main/interface/cli.c ****         if (motorValue < PWM_RANGE_MIN || motorValue > PWM_RANGE_MAX) {
 13121              	 .loc 13 3107 0
 13122 0086 3B6A     	 ldr r3,[r7,#32]
 13123 0088 B3F57A7F 	 cmp r3,#1000
 13124 008c 03DB     	 blt .L778
 13125              	 .loc 13 3107 0 is_stmt 0 discriminator 1
 13126 008e 3B6A     	 ldr r3,[r7,#32]
 13127 0090 B3F5FA6F 	 cmp r3,#2000
 13128 0094 07DD     	 ble .L779
 13129              	.L778:
3108:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("value", 1000, 2000);
 13130              	 .loc 13 3108 0 is_stmt 1
 13131 0096 2648     	 ldr r0,.L786+4
 13132 0098 4FF47A71 	 mov r1,#1000
 13133 009c 4FF4FA62 	 mov r2,#2000
 13134 00a0 FFF7FEFF 	 bl cliShowArgumentRangeError
 13135 00a4 3CE0     	 b .L780
 13136              	.L779:
 13137              	.LBB92:
3109:../cleanflight/src/main/interface/cli.c ****         } else {
3110:../cleanflight/src/main/interface/cli.c ****             uint32_t motorOutputValue = convertExternalToMotor(motorValue);
 13138              	 .loc 13 3110 0
 13139 00a6 3B6A     	 ldr r3,[r7,#32]
 13140 00a8 9BB2     	 uxth r3,r3
 13141 00aa 1846     	 mov r0,r3
 13142 00ac FFF7FEFF 	 bl convertExternalToMotor
 13143 00b0 07EE900A 	 fmsr s15,r0
 13144 00b4 FCEEE77A 	 ftouizs s15,s15
 13145 00b8 17EE903A 	 fmrs r3,s15
 13146 00bc 3B61     	 str r3,[r7,#16]
3111:../cleanflight/src/main/interface/cli.c **** 
3112:../cleanflight/src/main/interface/cli.c ****             if (motorIndex != ALL_MOTORS) {
 13147              	 .loc 13 3112 0
 13148 00be 7B6A     	 ldr r3,[r7,#36]
 13149 00c0 FF2B     	 cmp r3,#255
 13150 00c2 10D0     	 beq .L781
3113:../cleanflight/src/main/interface/cli.c ****                 motor_disarmed[motorIndex] = motorOutputValue;
 13151              	 .loc 13 3113 0
 13152 00c4 3B69     	 ldr r3,[r7,#16]
 13153 00c6 07EE903A 	 fmsr s15,r3
 13154 00ca F8EE677A 	 fuitos s15,s15
 13155 00ce 194A     	 ldr r2,.L786+8
 13156 00d0 7B6A     	 ldr r3,[r7,#36]
 13157 00d2 9B00     	 lsls r3,r3,#2
 13158 00d4 1344     	 add r3,r3,r2
 13159 00d6 C3ED007A 	 fsts s15,[r3]
3114:../cleanflight/src/main/interface/cli.c **** 
3115:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("motor %d: %d", motorIndex, motorOutputValue);
 13160              	 .loc 13 3115 0
 13161 00da 1748     	 ldr r0,.L786+12
 13162 00dc 796A     	 ldr r1,[r7,#36]
 13163 00de 3A69     	 ldr r2,[r7,#16]
 13164 00e0 FFF7FEFF 	 bl cliPrintLinef
 13165 00e4 1CE0     	 b .L780
 13166              	.L781:
 13167              	.LBB93:
3116:../cleanflight/src/main/interface/cli.c ****             } else  {
3117:../cleanflight/src/main/interface/cli.c ****                 for (int i = 0; i < getMotorCount(); i++) {
 13168              	 .loc 13 3117 0
 13169 00e6 0023     	 movs r3,#0
 13170 00e8 7B61     	 str r3,[r7,#20]
 13171 00ea 0DE0     	 b .L782
 13172              	.L783:
3118:../cleanflight/src/main/interface/cli.c ****                     motor_disarmed[i] = motorOutputValue;
 13173              	 .loc 13 3118 0 discriminator 3
 13174 00ec 3B69     	 ldr r3,[r7,#16]
 13175 00ee 07EE903A 	 fmsr s15,r3
 13176 00f2 F8EE677A 	 fuitos s15,s15
 13177 00f6 0F4A     	 ldr r2,.L786+8
 13178 00f8 7B69     	 ldr r3,[r7,#20]
 13179 00fa 9B00     	 lsls r3,r3,#2
 13180 00fc 1344     	 add r3,r3,r2
 13181 00fe C3ED007A 	 fsts s15,[r3]
3117:../cleanflight/src/main/interface/cli.c ****                     motor_disarmed[i] = motorOutputValue;
 13182              	 .loc 13 3117 0 discriminator 3
 13183 0102 7B69     	 ldr r3,[r7,#20]
 13184 0104 0133     	 adds r3,r3,#1
 13185 0106 7B61     	 str r3,[r7,#20]
 13186              	.L782:
3117:../cleanflight/src/main/interface/cli.c ****                     motor_disarmed[i] = motorOutputValue;
 13187              	 .loc 13 3117 0 is_stmt 0 discriminator 1
 13188 0108 FFF7FEFF 	 bl getMotorCount
 13189 010c 0346     	 mov r3,r0
 13190 010e 1A46     	 mov r2,r3
 13191 0110 7B69     	 ldr r3,[r7,#20]
 13192 0112 9A42     	 cmp r2,r3
 13193 0114 EADC     	 bgt .L783
 13194              	.LBE93:
3119:../cleanflight/src/main/interface/cli.c ****                 }
3120:../cleanflight/src/main/interface/cli.c **** 
3121:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("all motors: %d", motorOutputValue);
 13195              	 .loc 13 3121 0 is_stmt 1
 13196 0116 0948     	 ldr r0,.L786+16
 13197 0118 3969     	 ldr r1,[r7,#16]
 13198 011a FFF7FEFF 	 bl cliPrintLinef
 13199              	.LBE92:
 13200 011e 02E0     	 b .L768
 13201              	.L780:
 13202 0120 01E0     	 b .L768
 13203              	.L777:
3122:../cleanflight/src/main/interface/cli.c ****             }
3123:../cleanflight/src/main/interface/cli.c ****         }
3124:../cleanflight/src/main/interface/cli.c ****     } else {
3125:../cleanflight/src/main/interface/cli.c ****         cliShowParseError();
 13204              	 .loc 13 3125 0
 13205 0122 FFF7FEFF 	 bl cliShowParseError
 13206              	.L768:
3126:../cleanflight/src/main/interface/cli.c ****     }
3127:../cleanflight/src/main/interface/cli.c **** }
 13207              	 .loc 13 3127 0
 13208 0126 2837     	 adds r7,r7,#40
 13209              	.LCFI542:
 13210              	 .cfi_def_cfa_offset 8
 13211 0128 BD46     	 mov sp,r7
 13212              	.LCFI543:
 13213              	 .cfi_def_cfa_register 13
 13214              	 
 13215 012a 80BD     	 pop {r7,pc}
 13216              	.L787:
 13217              	 .align 2
 13218              	.L786:
 13219 012c 84030000 	 .word .LC82
 13220 0130 9C080000 	 .word .LC156
 13221 0134 00000000 	 .word motor_disarmed
 13222 0138 A4080000 	 .word .LC157
 13223 013c B4080000 	 .word .LC158
 13224              	 .cfi_endproc
 13225              	.LFE767:
 13227              	 .section .rodata
 13228 08c3 00       	 .align 2
 13229              	.LC159:
 13230 08c4 4572726F 	 .ascii "Error playing sound\000"
 13230      7220706C 
 13230      6179696E 
 13230      6720736F 
 13230      756E6400 
 13231              	 .align 2
 13232              	.LC160:
 13233 08d8 4E6F2073 	 .ascii "No sound for index %d\000"
 13233      6F756E64 
 13233      20666F72 
 13233      20696E64 
 13233      65782025 
 13234 08ee 0000     	 .align 2
 13235              	.LC161:
 13236 08f0 506C6179 	 .ascii "Playing sound %d: %s\000"
 13236      696E6720 
 13236      736F756E 
 13236      64202564 
 13236      3A202573 
 13237              	 .section .text.cliPlaySound,"ax",%progbits
 13238              	 .align 2
 13239              	 .thumb
 13240              	 .thumb_func
 13242              	cliPlaySound:
 13243              	.LFB768:
3128:../cleanflight/src/main/interface/cli.c **** 
3129:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
3130:../cleanflight/src/main/interface/cli.c **** static void cliPlaySound(char *cmdline)
3131:../cleanflight/src/main/interface/cli.c **** {
 13244              	 .loc 13 3131 0
 13245              	 .cfi_startproc
 13246              	 
 13247              	 
 13248 0000 80B5     	 push {r7,lr}
 13249              	.LCFI544:
 13250              	 .cfi_def_cfa_offset 8
 13251              	 .cfi_offset 7,-8
 13252              	 .cfi_offset 14,-4
 13253 0002 84B0     	 sub sp,sp,#16
 13254              	.LCFI545:
 13255              	 .cfi_def_cfa_offset 24
 13256 0004 00AF     	 add r7,sp,#0
 13257              	.LCFI546:
 13258              	 .cfi_def_cfa_register 7
 13259 0006 7860     	 str r0,[r7,#4]
3132:../cleanflight/src/main/interface/cli.c ****     int i;
3133:../cleanflight/src/main/interface/cli.c ****     const char *name;
3134:../cleanflight/src/main/interface/cli.c ****     static int lastSoundIdx = -1;
3135:../cleanflight/src/main/interface/cli.c **** 
3136:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 13260              	 .loc 13 3136 0
 13261 0008 7868     	 ldr r0,[r7,#4]
 13262 000a FFF7FEFF 	 bl isEmpty
 13263 000e 0346     	 mov r3,r0
 13264 0010 002B     	 cmp r3,#0
 13265 0012 29D0     	 beq .L789
3137:../cleanflight/src/main/interface/cli.c ****         i = lastSoundIdx + 1;     //next sound index
 13266              	 .loc 13 3137 0
 13267 0014 264B     	 ldr r3,.L797
 13268 0016 1B68     	 ldr r3,[r3]
 13269 0018 0133     	 adds r3,r3,#1
 13270 001a FB60     	 str r3,[r7,#12]
3138:../cleanflight/src/main/interface/cli.c ****         if ((name=beeperNameForTableIndex(i)) == NULL) {
 13271              	 .loc 13 3138 0
 13272 001c F868     	 ldr r0,[r7,#12]
 13273 001e FFF7FEFF 	 bl beeperNameForTableIndex
 13274 0022 B860     	 str r0,[r7,#8]
 13275 0024 BB68     	 ldr r3,[r7,#8]
 13276 0026 002B     	 cmp r3,#0
 13277 0028 2ED1     	 bne .L796
 13278              	.L795:
3139:../cleanflight/src/main/interface/cli.c ****             while (true) {   //no name for index; try next one
3140:../cleanflight/src/main/interface/cli.c ****                 if (++i >= beeperTableEntryCount())
 13279              	 .loc 13 3140 0
 13280 002a FB68     	 ldr r3,[r7,#12]
 13281 002c 0133     	 adds r3,r3,#1
 13282 002e FB60     	 str r3,[r7,#12]
 13283 0030 FFF7FEFF 	 bl beeperTableEntryCount
 13284 0034 0246     	 mov r2,r0
 13285 0036 FB68     	 ldr r3,[r7,#12]
 13286 0038 9342     	 cmp r3,r2
 13287 003a 01DB     	 blt .L791
3141:../cleanflight/src/main/interface/cli.c ****                     i = 0;   //if end then wrap around to first entry
 13288              	 .loc 13 3141 0
 13289 003c 0023     	 movs r3,#0
 13290 003e FB60     	 str r3,[r7,#12]
 13291              	.L791:
3142:../cleanflight/src/main/interface/cli.c ****                 if ((name=beeperNameForTableIndex(i)) != NULL)
 13292              	 .loc 13 3142 0
 13293 0040 F868     	 ldr r0,[r7,#12]
 13294 0042 FFF7FEFF 	 bl beeperNameForTableIndex
 13295 0046 B860     	 str r0,[r7,#8]
 13296 0048 BB68     	 ldr r3,[r7,#8]
 13297 004a 002B     	 cmp r3,#0
 13298 004c 01D0     	 beq .L792
3143:../cleanflight/src/main/interface/cli.c ****                     break;   //if name OK then play sound below
 13299              	 .loc 13 3143 0
 13300 004e 00BF     	 nop
 13301 0050 1AE0     	 b .L796
 13302              	.L792:
3144:../cleanflight/src/main/interface/cli.c ****                 if (i == lastSoundIdx + 1) {     //prevent infinite loop
 13303              	 .loc 13 3144 0
 13304 0052 174B     	 ldr r3,.L797
 13305 0054 1B68     	 ldr r3,[r3]
 13306 0056 5A1C     	 adds r2,r3,#1
 13307 0058 FB68     	 ldr r3,[r7,#12]
 13308 005a 9A42     	 cmp r2,r3
 13309 005c 03D1     	 bne .L793
3145:../cleanflight/src/main/interface/cli.c ****                     cliPrintErrorLinef("Error playing sound");
 13310              	 .loc 13 3145 0
 13311 005e 1548     	 ldr r0,.L797+4
 13312 0060 FFF7FEFF 	 bl cliPrintErrorLinef
3146:../cleanflight/src/main/interface/cli.c ****                     return;
 13313              	 .loc 13 3146 0
 13314 0064 21E0     	 b .L788
 13315              	.L793:
3147:../cleanflight/src/main/interface/cli.c ****                 }
3148:../cleanflight/src/main/interface/cli.c ****             }
 13316              	 .loc 13 3148 0
 13317 0066 E0E7     	 b .L795
 13318              	.L789:
3149:../cleanflight/src/main/interface/cli.c ****         }
3150:../cleanflight/src/main/interface/cli.c ****     } else {       //index value was given
3151:../cleanflight/src/main/interface/cli.c ****         i = atoi(cmdline);
 13319              	 .loc 13 3151 0
 13320 0068 7868     	 ldr r0,[r7,#4]
 13321 006a FFF7FEFF 	 bl atoi
 13322 006e F860     	 str r0,[r7,#12]
3152:../cleanflight/src/main/interface/cli.c ****         if ((name=beeperNameForTableIndex(i)) == NULL) {
 13323              	 .loc 13 3152 0
 13324 0070 F868     	 ldr r0,[r7,#12]
 13325 0072 FFF7FEFF 	 bl beeperNameForTableIndex
 13326 0076 B860     	 str r0,[r7,#8]
 13327 0078 BB68     	 ldr r3,[r7,#8]
 13328 007a 002B     	 cmp r3,#0
 13329 007c 04D1     	 bne .L796
3153:../cleanflight/src/main/interface/cli.c ****             cliPrintLinef("No sound for index %d", i);
 13330              	 .loc 13 3153 0
 13331 007e 0E48     	 ldr r0,.L797+8
 13332 0080 F968     	 ldr r1,[r7,#12]
 13333 0082 FFF7FEFF 	 bl cliPrintLinef
3154:../cleanflight/src/main/interface/cli.c ****             return;
 13334              	 .loc 13 3154 0
 13335 0086 10E0     	 b .L788
 13336              	.L796:
3155:../cleanflight/src/main/interface/cli.c ****         }
3156:../cleanflight/src/main/interface/cli.c ****     }
3157:../cleanflight/src/main/interface/cli.c ****     lastSoundIdx = i;
 13337              	 .loc 13 3157 0
 13338 0088 094A     	 ldr r2,.L797
 13339 008a FB68     	 ldr r3,[r7,#12]
 13340 008c 1360     	 str r3,[r2]
3158:../cleanflight/src/main/interface/cli.c ****     beeperSilence();
 13341              	 .loc 13 3158 0
 13342 008e FFF7FEFF 	 bl beeperSilence
3159:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("Playing sound %d: %s", i, name);
 13343              	 .loc 13 3159 0
 13344 0092 0A48     	 ldr r0,.L797+12
 13345 0094 F968     	 ldr r1,[r7,#12]
 13346 0096 BA68     	 ldr r2,[r7,#8]
 13347 0098 FFF7FEFF 	 bl cliPrintLinef
3160:../cleanflight/src/main/interface/cli.c ****     beeper(beeperModeForTableIndex(i));
 13348              	 .loc 13 3160 0
 13349 009c F868     	 ldr r0,[r7,#12]
 13350 009e FFF7FEFF 	 bl beeperModeForTableIndex
 13351 00a2 0346     	 mov r3,r0
 13352 00a4 1846     	 mov r0,r3
 13353 00a6 FFF7FEFF 	 bl beeper
 13354              	.L788:
3161:../cleanflight/src/main/interface/cli.c **** }
 13355              	 .loc 13 3161 0
 13356 00aa 1037     	 adds r7,r7,#16
 13357              	.LCFI547:
 13358              	 .cfi_def_cfa_offset 8
 13359 00ac BD46     	 mov sp,r7
 13360              	.LCFI548:
 13361              	 .cfi_def_cfa_register 13
 13362              	 
 13363 00ae 80BD     	 pop {r7,pc}
 13364              	.L798:
 13365              	 .align 2
 13366              	.L797:
 13367 00b0 00000000 	 .word lastSoundIdx.19000
 13368 00b4 C4080000 	 .word .LC159
 13369 00b8 D8080000 	 .word .LC160
 13370 00bc F0080000 	 .word .LC161
 13371              	 .cfi_endproc
 13372              	.LFE768:
 13374              	 .section .rodata
 13375 0905 000000   	 .align 2
 13376              	.LC162:
 13377 0908 70726F66 	 .ascii "profile %d\000"
 13377      696C6520 
 13377      256400
 13378              	 .section .text.cliProfile,"ax",%progbits
 13379              	 .align 2
 13380              	 .thumb
 13381              	 .thumb_func
 13383              	cliProfile:
 13384              	.LFB769:
3162:../cleanflight/src/main/interface/cli.c **** #endif
3163:../cleanflight/src/main/interface/cli.c **** 
3164:../cleanflight/src/main/interface/cli.c **** static void cliProfile(char *cmdline)
3165:../cleanflight/src/main/interface/cli.c **** {
 13385              	 .loc 13 3165 0
 13386              	 .cfi_startproc
 13387              	 
 13388              	 
 13389 0000 80B5     	 push {r7,lr}
 13390              	.LCFI549:
 13391              	 .cfi_def_cfa_offset 8
 13392              	 .cfi_offset 7,-8
 13393              	 .cfi_offset 14,-4
 13394 0002 84B0     	 sub sp,sp,#16
 13395              	.LCFI550:
 13396              	 .cfi_def_cfa_offset 24
 13397 0004 00AF     	 add r7,sp,#0
 13398              	.LCFI551:
 13399              	 .cfi_def_cfa_register 7
 13400 0006 7860     	 str r0,[r7,#4]
3166:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 13401              	 .loc 13 3166 0
 13402 0008 7868     	 ldr r0,[r7,#4]
 13403 000a FFF7FEFF 	 bl isEmpty
 13404 000e 0346     	 mov r3,r0
 13405 0010 002B     	 cmp r3,#0
 13406 0012 07D0     	 beq .L800
3167:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("profile %d", getPidProfileIndexToUse());
 13407              	 .loc 13 3167 0
 13408 0014 FFF7FEFF 	 bl getPidProfileIndexToUse
 13409 0018 0346     	 mov r3,r0
 13410 001a 0D48     	 ldr r0,.L802
 13411 001c 1946     	 mov r1,r3
 13412 001e FFF7FEFF 	 bl cliPrintLinef
3168:../cleanflight/src/main/interface/cli.c ****         return;
 13413              	 .loc 13 3168 0
 13414 0022 11E0     	 b .L799
 13415              	.L800:
 13416              	.LBB94:
3169:../cleanflight/src/main/interface/cli.c ****     } else {
3170:../cleanflight/src/main/interface/cli.c ****         const int i = atoi(cmdline);
 13417              	 .loc 13 3170 0
 13418 0024 7868     	 ldr r0,[r7,#4]
 13419 0026 FFF7FEFF 	 bl atoi
 13420 002a F860     	 str r0,[r7,#12]
3171:../cleanflight/src/main/interface/cli.c ****         if (i >= 0 && i < MAX_PROFILE_COUNT) {
 13421              	 .loc 13 3171 0
 13422 002c FB68     	 ldr r3,[r7,#12]
 13423 002e 002B     	 cmp r3,#0
 13424 0030 0ADB     	 blt .L799
 13425              	 .loc 13 3171 0 is_stmt 0 discriminator 1
 13426 0032 FB68     	 ldr r3,[r7,#12]
 13427 0034 022B     	 cmp r3,#2
 13428 0036 07DC     	 bgt .L799
3172:../cleanflight/src/main/interface/cli.c ****             changePidProfile(i);
 13429              	 .loc 13 3172 0 is_stmt 1
 13430 0038 FB68     	 ldr r3,[r7,#12]
 13431 003a DBB2     	 uxtb r3,r3
 13432 003c 1846     	 mov r0,r3
 13433 003e FFF7FEFF 	 bl changePidProfile
3173:../cleanflight/src/main/interface/cli.c ****             cliProfile("");
 13434              	 .loc 13 3173 0
 13435 0042 0448     	 ldr r0,.L802+4
 13436 0044 FFF7DCFF 	 bl cliProfile
 13437              	.L799:
 13438              	.LBE94:
3174:../cleanflight/src/main/interface/cli.c ****         }
3175:../cleanflight/src/main/interface/cli.c ****     }
3176:../cleanflight/src/main/interface/cli.c **** }
 13439              	 .loc 13 3176 0
 13440 0048 1037     	 adds r7,r7,#16
 13441              	.LCFI552:
 13442              	 .cfi_def_cfa_offset 8
 13443 004a BD46     	 mov sp,r7
 13444              	.LCFI553:
 13445              	 .cfi_def_cfa_register 13
 13446              	 
 13447 004c 80BD     	 pop {r7,pc}
 13448              	.L803:
 13449 004e 00BF     	 .align 2
 13450              	.L802:
 13451 0050 08090000 	 .word .LC162
 13452 0054 04000000 	 .word .LC1
 13453              	 .cfi_endproc
 13454              	.LFE769:
 13456              	 .section .rodata
 13457 0913 00       	 .align 2
 13458              	.LC163:
 13459 0914 72617465 	 .ascii "rateprofile %d\000"
 13459      70726F66 
 13459      696C6520 
 13459      256400
 13460              	 .section .text.cliRateProfile,"ax",%progbits
 13461              	 .align 2
 13462              	 .thumb
 13463              	 .thumb_func
 13465              	cliRateProfile:
 13466              	.LFB770:
3177:../cleanflight/src/main/interface/cli.c **** 
3178:../cleanflight/src/main/interface/cli.c **** static void cliRateProfile(char *cmdline)
3179:../cleanflight/src/main/interface/cli.c **** {
 13467              	 .loc 13 3179 0
 13468              	 .cfi_startproc
 13469              	 
 13470              	 
 13471 0000 80B5     	 push {r7,lr}
 13472              	.LCFI554:
 13473              	 .cfi_def_cfa_offset 8
 13474              	 .cfi_offset 7,-8
 13475              	 .cfi_offset 14,-4
 13476 0002 84B0     	 sub sp,sp,#16
 13477              	.LCFI555:
 13478              	 .cfi_def_cfa_offset 24
 13479 0004 00AF     	 add r7,sp,#0
 13480              	.LCFI556:
 13481              	 .cfi_def_cfa_register 7
 13482 0006 7860     	 str r0,[r7,#4]
3180:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 13483              	 .loc 13 3180 0
 13484 0008 7868     	 ldr r0,[r7,#4]
 13485 000a FFF7FEFF 	 bl isEmpty
 13486 000e 0346     	 mov r3,r0
 13487 0010 002B     	 cmp r3,#0
 13488 0012 07D0     	 beq .L805
3181:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("rateprofile %d", getRateProfileIndexToUse());
 13489              	 .loc 13 3181 0
 13490 0014 FFF7FEFF 	 bl getRateProfileIndexToUse
 13491 0018 0346     	 mov r3,r0
 13492 001a 0D48     	 ldr r0,.L807
 13493 001c 1946     	 mov r1,r3
 13494 001e FFF7FEFF 	 bl cliPrintLinef
3182:../cleanflight/src/main/interface/cli.c ****         return;
 13495              	 .loc 13 3182 0
 13496 0022 11E0     	 b .L804
 13497              	.L805:
 13498              	.LBB95:
3183:../cleanflight/src/main/interface/cli.c ****     } else {
3184:../cleanflight/src/main/interface/cli.c ****         const int i = atoi(cmdline);
 13499              	 .loc 13 3184 0
 13500 0024 7868     	 ldr r0,[r7,#4]
 13501 0026 FFF7FEFF 	 bl atoi
 13502 002a F860     	 str r0,[r7,#12]
3185:../cleanflight/src/main/interface/cli.c ****         if (i >= 0 && i < CONTROL_RATE_PROFILE_COUNT) {
 13503              	 .loc 13 3185 0
 13504 002c FB68     	 ldr r3,[r7,#12]
 13505 002e 002B     	 cmp r3,#0
 13506 0030 0ADB     	 blt .L804
 13507              	 .loc 13 3185 0 is_stmt 0 discriminator 1
 13508 0032 FB68     	 ldr r3,[r7,#12]
 13509 0034 052B     	 cmp r3,#5
 13510 0036 07DC     	 bgt .L804
3186:../cleanflight/src/main/interface/cli.c ****             changeControlRateProfile(i);
 13511              	 .loc 13 3186 0 is_stmt 1
 13512 0038 FB68     	 ldr r3,[r7,#12]
 13513 003a DBB2     	 uxtb r3,r3
 13514 003c 1846     	 mov r0,r3
 13515 003e FFF7FEFF 	 bl changeControlRateProfile
3187:../cleanflight/src/main/interface/cli.c ****             cliRateProfile("");
 13516              	 .loc 13 3187 0
 13517 0042 0448     	 ldr r0,.L807+4
 13518 0044 FFF7DCFF 	 bl cliRateProfile
 13519              	.L804:
 13520              	.LBE95:
3188:../cleanflight/src/main/interface/cli.c ****         }
3189:../cleanflight/src/main/interface/cli.c ****     }
3190:../cleanflight/src/main/interface/cli.c **** }
 13521              	 .loc 13 3190 0
 13522 0048 1037     	 adds r7,r7,#16
 13523              	.LCFI557:
 13524              	 .cfi_def_cfa_offset 8
 13525 004a BD46     	 mov sp,r7
 13526              	.LCFI558:
 13527              	 .cfi_def_cfa_register 13
 13528              	 
 13529 004c 80BD     	 pop {r7,pc}
 13530              	.L808:
 13531 004e 00BF     	 .align 2
 13532              	.L807:
 13533 0050 14090000 	 .word .LC163
 13534 0054 04000000 	 .word .LC1
 13535              	 .cfi_endproc
 13536              	.LFE770:
 13538              	 .section .rodata
 13539 0923 00       	 .align 2
 13540              	.LC164:
 13541 0924 70726F66 	 .ascii "profile\000"
 13541      696C6500 
 13542              	 .section .text.cliDumpPidProfile,"ax",%progbits
 13543              	 .align 2
 13544              	 .thumb
 13545              	 .thumb_func
 13547              	cliDumpPidProfile:
 13548              	.LFB771:
3191:../cleanflight/src/main/interface/cli.c **** 
3192:../cleanflight/src/main/interface/cli.c **** static void cliDumpPidProfile(uint8_t pidProfileIndex, uint8_t dumpMask)
3193:../cleanflight/src/main/interface/cli.c **** {
 13549              	 .loc 13 3193 0
 13550              	 .cfi_startproc
 13551              	 
 13552              	 
 13553 0000 80B5     	 push {r7,lr}
 13554              	.LCFI559:
 13555              	 .cfi_def_cfa_offset 8
 13556              	 .cfi_offset 7,-8
 13557              	 .cfi_offset 14,-4
 13558 0002 82B0     	 sub sp,sp,#8
 13559              	.LCFI560:
 13560              	 .cfi_def_cfa_offset 16
 13561 0004 00AF     	 add r7,sp,#0
 13562              	.LCFI561:
 13563              	 .cfi_def_cfa_register 7
 13564 0006 0346     	 mov r3,r0
 13565 0008 0A46     	 mov r2,r1
 13566 000a FB71     	 strb r3,[r7,#7]
 13567 000c 1346     	 mov r3,r2
 13568 000e BB71     	 strb r3,[r7,#6]
3194:../cleanflight/src/main/interface/cli.c ****     if (pidProfileIndex >= MAX_PROFILE_COUNT) {
 13569              	 .loc 13 3194 0
 13570 0010 FB79     	 ldrb r3,[r7,#7]
 13571 0012 022B     	 cmp r3,#2
 13572 0014 00D9     	 bls .L810
3195:../cleanflight/src/main/interface/cli.c ****         // Faulty values
3196:../cleanflight/src/main/interface/cli.c ****         return;
 13573              	 .loc 13 3196 0
 13574 0016 12E0     	 b .L809
 13575              	.L810:
3197:../cleanflight/src/main/interface/cli.c ****     }
3198:../cleanflight/src/main/interface/cli.c **** 
3199:../cleanflight/src/main/interface/cli.c ****     pidProfileIndexToUse = pidProfileIndex;
 13576              	 .loc 13 3199 0
 13577 0018 FA79     	 ldrb r2,[r7,#7]
 13578 001a 0A4B     	 ldr r3,.L812
 13579 001c 1A70     	 strb r2,[r3]
3200:../cleanflight/src/main/interface/cli.c **** 
3201:../cleanflight/src/main/interface/cli.c ****     cliPrintHashLine("profile");
 13580              	 .loc 13 3201 0
 13581 001e 0A48     	 ldr r0,.L812+4
 13582 0020 FFF7FEFF 	 bl cliPrintHashLine
3202:../cleanflight/src/main/interface/cli.c ****     cliProfile("");
 13583              	 .loc 13 3202 0
 13584 0024 0948     	 ldr r0,.L812+8
 13585 0026 FFF7FEFF 	 bl cliProfile
3203:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 13586              	 .loc 13 3203 0
 13587 002a FFF7FEFF 	 bl cliPrintLinefeed
3204:../cleanflight/src/main/interface/cli.c ****     dumpAllValues(PROFILE_VALUE, dumpMask);
 13588              	 .loc 13 3204 0
 13589 002e BB79     	 ldrb r3,[r7,#6]
 13590 0030 0820     	 movs r0,#8
 13591 0032 1946     	 mov r1,r3
 13592 0034 FFF7FEFF 	 bl dumpAllValues
3205:../cleanflight/src/main/interface/cli.c **** 
3206:../cleanflight/src/main/interface/cli.c ****     pidProfileIndexToUse = CURRENT_PROFILE_INDEX;
 13593              	 .loc 13 3206 0
 13594 0038 024B     	 ldr r3,.L812
 13595 003a FF22     	 movs r2,#255
 13596 003c 1A70     	 strb r2,[r3]
 13597              	.L809:
3207:../cleanflight/src/main/interface/cli.c **** }
 13598              	 .loc 13 3207 0
 13599 003e 0837     	 adds r7,r7,#8
 13600              	.LCFI562:
 13601              	 .cfi_def_cfa_offset 8
 13602 0040 BD46     	 mov sp,r7
 13603              	.LCFI563:
 13604              	 .cfi_def_cfa_register 13
 13605              	 
 13606 0042 80BD     	 pop {r7,pc}
 13607              	.L813:
 13608              	 .align 2
 13609              	.L812:
 13610 0044 00000000 	 .word pidProfileIndexToUse
 13611 0048 24090000 	 .word .LC164
 13612 004c 04000000 	 .word .LC1
 13613              	 .cfi_endproc
 13614              	.LFE771:
 13616              	 .section .rodata
 13617              	 .align 2
 13618              	.LC165:
 13619 092c 72617465 	 .ascii "rateprofile\000"
 13619      70726F66 
 13619      696C6500 
 13620              	 .section .text.cliDumpRateProfile,"ax",%progbits
 13621              	 .align 2
 13622              	 .thumb
 13623              	 .thumb_func
 13625              	cliDumpRateProfile:
 13626              	.LFB772:
3208:../cleanflight/src/main/interface/cli.c **** 
3209:../cleanflight/src/main/interface/cli.c **** static void cliDumpRateProfile(uint8_t rateProfileIndex, uint8_t dumpMask)
3210:../cleanflight/src/main/interface/cli.c **** {
 13627              	 .loc 13 3210 0
 13628              	 .cfi_startproc
 13629              	 
 13630              	 
 13631 0000 80B5     	 push {r7,lr}
 13632              	.LCFI564:
 13633              	 .cfi_def_cfa_offset 8
 13634              	 .cfi_offset 7,-8
 13635              	 .cfi_offset 14,-4
 13636 0002 82B0     	 sub sp,sp,#8
 13637              	.LCFI565:
 13638              	 .cfi_def_cfa_offset 16
 13639 0004 00AF     	 add r7,sp,#0
 13640              	.LCFI566:
 13641              	 .cfi_def_cfa_register 7
 13642 0006 0346     	 mov r3,r0
 13643 0008 0A46     	 mov r2,r1
 13644 000a FB71     	 strb r3,[r7,#7]
 13645 000c 1346     	 mov r3,r2
 13646 000e BB71     	 strb r3,[r7,#6]
3211:../cleanflight/src/main/interface/cli.c ****     if (rateProfileIndex >= CONTROL_RATE_PROFILE_COUNT) {
 13647              	 .loc 13 3211 0
 13648 0010 FB79     	 ldrb r3,[r7,#7]
 13649 0012 052B     	 cmp r3,#5
 13650 0014 00D9     	 bls .L815
3212:../cleanflight/src/main/interface/cli.c ****         // Faulty values
3213:../cleanflight/src/main/interface/cli.c ****         return;
 13651              	 .loc 13 3213 0
 13652 0016 12E0     	 b .L814
 13653              	.L815:
3214:../cleanflight/src/main/interface/cli.c ****     }
3215:../cleanflight/src/main/interface/cli.c **** 
3216:../cleanflight/src/main/interface/cli.c ****     rateProfileIndexToUse = rateProfileIndex;
 13654              	 .loc 13 3216 0
 13655 0018 FA79     	 ldrb r2,[r7,#7]
 13656 001a 0A4B     	 ldr r3,.L817
 13657 001c 1A70     	 strb r2,[r3]
3217:../cleanflight/src/main/interface/cli.c **** 
3218:../cleanflight/src/main/interface/cli.c ****     cliPrintHashLine("rateprofile");
 13658              	 .loc 13 3218 0
 13659 001e 0A48     	 ldr r0,.L817+4
 13660 0020 FFF7FEFF 	 bl cliPrintHashLine
3219:../cleanflight/src/main/interface/cli.c ****     cliRateProfile("");
 13661              	 .loc 13 3219 0
 13662 0024 0948     	 ldr r0,.L817+8
 13663 0026 FFF7FEFF 	 bl cliRateProfile
3220:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 13664              	 .loc 13 3220 0
 13665 002a FFF7FEFF 	 bl cliPrintLinefeed
3221:../cleanflight/src/main/interface/cli.c ****     dumpAllValues(PROFILE_RATE_VALUE, dumpMask);
 13666              	 .loc 13 3221 0
 13667 002e BB79     	 ldrb r3,[r7,#6]
 13668 0030 1020     	 movs r0,#16
 13669 0032 1946     	 mov r1,r3
 13670 0034 FFF7FEFF 	 bl dumpAllValues
3222:../cleanflight/src/main/interface/cli.c **** 
3223:../cleanflight/src/main/interface/cli.c ****     rateProfileIndexToUse = CURRENT_PROFILE_INDEX;
 13671              	 .loc 13 3223 0
 13672 0038 024B     	 ldr r3,.L817
 13673 003a FF22     	 movs r2,#255
 13674 003c 1A70     	 strb r2,[r3]
 13675              	.L814:
3224:../cleanflight/src/main/interface/cli.c **** }
 13676              	 .loc 13 3224 0
 13677 003e 0837     	 adds r7,r7,#8
 13678              	.LCFI567:
 13679              	 .cfi_def_cfa_offset 8
 13680 0040 BD46     	 mov sp,r7
 13681              	.LCFI568:
 13682              	 .cfi_def_cfa_register 13
 13683              	 
 13684 0042 80BD     	 pop {r7,pc}
 13685              	.L818:
 13686              	 .align 2
 13687              	.L817:
 13688 0044 00000000 	 .word rateProfileIndexToUse
 13689 0048 2C090000 	 .word .LC165
 13690 004c 04000000 	 .word .LC1
 13691              	 .cfi_endproc
 13692              	.LFE772:
 13694              	 .section .rodata
 13695              	 .align 2
 13696              	.LC166:
 13697 0938 73617669 	 .ascii "saving\000"
 13697      6E6700
 13698              	 .section .text.cliSave,"ax",%progbits
 13699              	 .align 2
 13700              	 .thumb
 13701              	 .thumb_func
 13703              	cliSave:
 13704              	.LFB773:
3225:../cleanflight/src/main/interface/cli.c **** 
3226:../cleanflight/src/main/interface/cli.c **** static void cliSave(char *cmdline)
3227:../cleanflight/src/main/interface/cli.c **** {
 13705              	 .loc 13 3227 0
 13706              	 .cfi_startproc
 13707              	 
 13708              	 
 13709 0000 80B5     	 push {r7,lr}
 13710              	.LCFI569:
 13711              	 .cfi_def_cfa_offset 8
 13712              	 .cfi_offset 7,-8
 13713              	 .cfi_offset 14,-4
 13714 0002 82B0     	 sub sp,sp,#8
 13715              	.LCFI570:
 13716              	 .cfi_def_cfa_offset 16
 13717 0004 00AF     	 add r7,sp,#0
 13718              	.LCFI571:
 13719              	 .cfi_def_cfa_register 7
 13720 0006 7860     	 str r0,[r7,#4]
3228:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
3229:../cleanflight/src/main/interface/cli.c **** 
3230:../cleanflight/src/main/interface/cli.c ****     cliPrintHashLine("saving");
 13721              	 .loc 13 3230 0
 13722 0008 0A48     	 ldr r0,.L822
 13723 000a FFF7FEFF 	 bl cliPrintHashLine
3231:../cleanflight/src/main/interface/cli.c **** 
3232:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BOARD_INFO)
3233:../cleanflight/src/main/interface/cli.c ****     if (boardInformationUpdated) {
 13724              	 .loc 13 3233 0
 13725 000e 0A4B     	 ldr r3,.L822+4
 13726 0010 1B78     	 ldrb r3,[r3]
 13727 0012 002B     	 cmp r3,#0
 13728 0014 01D0     	 beq .L820
3234:../cleanflight/src/main/interface/cli.c ****         persistBoardInformation();
 13729              	 .loc 13 3234 0
 13730 0016 FFF7FEFF 	 bl persistBoardInformation
 13731              	.L820:
3235:../cleanflight/src/main/interface/cli.c ****     }
3236:../cleanflight/src/main/interface/cli.c **** #if defined(USE_SIGNATURE)
3237:../cleanflight/src/main/interface/cli.c ****     if (signatureUpdated) {
 13732              	 .loc 13 3237 0
 13733 001a 084B     	 ldr r3,.L822+8
 13734 001c 1B78     	 ldrb r3,[r3]
 13735 001e 002B     	 cmp r3,#0
 13736 0020 01D0     	 beq .L821
3238:../cleanflight/src/main/interface/cli.c ****         persistSignature();
 13737              	 .loc 13 3238 0
 13738 0022 FFF7FEFF 	 bl persistSignature
 13739              	.L821:
3239:../cleanflight/src/main/interface/cli.c ****     }
3240:../cleanflight/src/main/interface/cli.c **** #endif
3241:../cleanflight/src/main/interface/cli.c **** #endif // USE_BOARD_INFO
3242:../cleanflight/src/main/interface/cli.c **** 
3243:../cleanflight/src/main/interface/cli.c ****     writeEEPROM();
 13740              	 .loc 13 3243 0
 13741 0026 FFF7FEFF 	 bl writeEEPROM
3244:../cleanflight/src/main/interface/cli.c **** 
3245:../cleanflight/src/main/interface/cli.c ****     cliReboot();
 13742              	 .loc 13 3245 0
 13743 002a FFF7FEFF 	 bl cliReboot
3246:../cleanflight/src/main/interface/cli.c **** }
 13744              	 .loc 13 3246 0
 13745 002e 0837     	 adds r7,r7,#8
 13746              	.LCFI572:
 13747              	 .cfi_def_cfa_offset 8
 13748 0030 BD46     	 mov sp,r7
 13749              	.LCFI573:
 13750              	 .cfi_def_cfa_register 13
 13751              	 
 13752 0032 80BD     	 pop {r7,pc}
 13753              	.L823:
 13754              	 .align 2
 13755              	.L822:
 13756 0034 38090000 	 .word .LC166
 13757 0038 00000000 	 .word boardInformationUpdated
 13758 003c 00000000 	 .word signatureUpdated
 13759              	 .cfi_endproc
 13760              	.LFE773:
 13762              	 .section .rodata
 13763 093f 00       	 .align 2
 13764              	.LC167:
 13765 0940 6E6F7361 	 .ascii "nosave\000"
 13765      766500
 13766 0947 00       	 .align 2
 13767              	.LC168:
 13768 0948 72657365 	 .ascii "resetting to defaults\000"
 13768      7474696E 
 13768      6720746F 
 13768      20646566 
 13768      61756C74 
 13769              	 .section .text.cliDefaults,"ax",%progbits
 13770              	 .align 2
 13771              	 .thumb
 13772              	 .thumb_func
 13774              	cliDefaults:
 13775              	.LFB774:
3247:../cleanflight/src/main/interface/cli.c **** 
3248:../cleanflight/src/main/interface/cli.c **** static void cliDefaults(char *cmdline)
3249:../cleanflight/src/main/interface/cli.c **** {
 13776              	 .loc 13 3249 0
 13777              	 .cfi_startproc
 13778              	 
 13779              	 
 13780 0000 80B5     	 push {r7,lr}
 13781              	.LCFI574:
 13782              	 .cfi_def_cfa_offset 8
 13783              	 .cfi_offset 7,-8
 13784              	 .cfi_offset 14,-4
 13785 0002 84B0     	 sub sp,sp,#16
 13786              	.LCFI575:
 13787              	 .cfi_def_cfa_offset 24
 13788 0004 00AF     	 add r7,sp,#0
 13789              	.LCFI576:
 13790              	 .cfi_def_cfa_register 7
 13791 0006 7860     	 str r0,[r7,#4]
3250:../cleanflight/src/main/interface/cli.c ****     bool saveConfigs;
3251:../cleanflight/src/main/interface/cli.c **** 
3252:../cleanflight/src/main/interface/cli.c ****     if (isEmpty(cmdline)) {
 13792              	 .loc 13 3252 0
 13793 0008 7868     	 ldr r0,[r7,#4]
 13794 000a FFF7FEFF 	 bl isEmpty
 13795 000e 0346     	 mov r3,r0
 13796 0010 002B     	 cmp r3,#0
 13797 0012 02D0     	 beq .L825
3253:../cleanflight/src/main/interface/cli.c ****         saveConfigs = true;
 13798              	 .loc 13 3253 0
 13799 0014 0123     	 movs r3,#1
 13800 0016 FB73     	 strb r3,[r7,#15]
 13801 0018 0BE0     	 b .L826
 13802              	.L825:
3254:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "nosave", 6) == 0) {
 13803              	 .loc 13 3254 0
 13804 001a 7868     	 ldr r0,[r7,#4]
 13805 001c 0C49     	 ldr r1,.L829
 13806 001e 0622     	 movs r2,#6
 13807 0020 FFF7FEFF 	 bl strncasecmp
 13808 0024 0346     	 mov r3,r0
 13809 0026 002B     	 cmp r3,#0
 13810 0028 02D1     	 bne .L827
3255:../cleanflight/src/main/interface/cli.c ****         saveConfigs = false;
 13811              	 .loc 13 3255 0
 13812 002a 0023     	 movs r3,#0
 13813 002c FB73     	 strb r3,[r7,#15]
 13814 002e 00E0     	 b .L826
 13815              	.L827:
3256:../cleanflight/src/main/interface/cli.c ****     } else {
3257:../cleanflight/src/main/interface/cli.c ****         return;
 13816              	 .loc 13 3257 0
 13817 0030 0AE0     	 b .L824
 13818              	.L826:
3258:../cleanflight/src/main/interface/cli.c ****     }
3259:../cleanflight/src/main/interface/cli.c **** 
3260:../cleanflight/src/main/interface/cli.c ****     cliPrintHashLine("resetting to defaults");
 13819              	 .loc 13 3260 0
 13820 0032 0848     	 ldr r0,.L829+4
 13821 0034 FFF7FEFF 	 bl cliPrintHashLine
3261:../cleanflight/src/main/interface/cli.c **** 
3262:../cleanflight/src/main/interface/cli.c ****     resetConfigs();
 13822              	 .loc 13 3262 0
 13823 0038 FFF7FEFF 	 bl resetConfigs
3263:../cleanflight/src/main/interface/cli.c **** 
3264:../cleanflight/src/main/interface/cli.c ****     if (saveConfigs) {
 13824              	 .loc 13 3264 0
 13825 003c FB7B     	 ldrb r3,[r7,#15]
 13826 003e 002B     	 cmp r3,#0
 13827 0040 02D0     	 beq .L824
3265:../cleanflight/src/main/interface/cli.c ****         cliSave(NULL);
 13828              	 .loc 13 3265 0
 13829 0042 0020     	 movs r0,#0
 13830 0044 FFF7FEFF 	 bl cliSave
 13831              	.L824:
3266:../cleanflight/src/main/interface/cli.c ****     }
3267:../cleanflight/src/main/interface/cli.c **** }
 13832              	 .loc 13 3267 0
 13833 0048 1037     	 adds r7,r7,#16
 13834              	.LCFI577:
 13835              	 .cfi_def_cfa_offset 8
 13836 004a BD46     	 mov sp,r7
 13837              	.LCFI578:
 13838              	 .cfi_def_cfa_register 13
 13839              	 
 13840 004c 80BD     	 pop {r7,pc}
 13841              	.L830:
 13842 004e 00BF     	 .align 2
 13843              	.L829:
 13844 0050 40090000 	 .word .LC167
 13845 0054 48090000 	 .word .LC168
 13846              	 .cfi_endproc
 13847              	.LFE774:
 13849              	 .section .rodata
 13850 095e 0000     	 .align 2
 13851              	.LC169:
 13852 0960 44656661 	 .ascii "Default value: \000"
 13852      756C7420 
 13852      76616C75 
 13852      653A2000 
 13853              	 .section .text.cliPrintVarDefault,"ax",%progbits
 13854              	 .align 2
 13855              	 .global cliPrintVarDefault
 13856              	 .thumb
 13857              	 .thumb_func
 13859              	cliPrintVarDefault:
 13860              	.LFB775:
3268:../cleanflight/src/main/interface/cli.c **** 
3269:../cleanflight/src/main/interface/cli.c **** void cliPrintVarDefault(const clivalue_t *value)
3270:../cleanflight/src/main/interface/cli.c **** {
 13861              	 .loc 13 3270 0
 13862              	 .cfi_startproc
 13863              	 
 13864              	 
 13865 0000 80B5     	 push {r7,lr}
 13866              	.LCFI579:
 13867              	 .cfi_def_cfa_offset 8
 13868              	 .cfi_offset 7,-8
 13869              	 .cfi_offset 14,-4
 13870 0002 86B0     	 sub sp,sp,#24
 13871              	.LCFI580:
 13872              	 .cfi_def_cfa_offset 32
 13873 0004 00AF     	 add r7,sp,#0
 13874              	.LCFI581:
 13875              	 .cfi_def_cfa_register 7
 13876 0006 7860     	 str r0,[r7,#4]
3271:../cleanflight/src/main/interface/cli.c ****     const pgRegistry_t *pg = pgFind(value->pgn);
 13877              	 .loc 13 3271 0
 13878 0008 7B68     	 ldr r3,[r7,#4]
 13879 000a B3F80930 	 ldrh r3,[r3,#9]
 13880 000e 9BB2     	 uxth r3,r3
 13881 0010 1846     	 mov r0,r3
 13882 0012 FFF7FEFF 	 bl pgFind
 13883 0016 7861     	 str r0,[r7,#20]
3272:../cleanflight/src/main/interface/cli.c ****     if (pg) {
 13884              	 .loc 13 3272 0
 13885 0018 7B69     	 ldr r3,[r7,#20]
 13886 001a 002B     	 cmp r3,#0
 13887 001c 2BD0     	 beq .L831
 13888              	.LBB96:
3273:../cleanflight/src/main/interface/cli.c ****         const char *defaultFormat = "Default value: ";
 13889              	 .loc 13 3273 0
 13890 001e 174B     	 ldr r3,.L833
 13891 0020 3B61     	 str r3,[r7,#16]
3274:../cleanflight/src/main/interface/cli.c ****         const int valueOffset = getValueOffset(value);
 13892              	 .loc 13 3274 0
 13893 0022 7868     	 ldr r0,[r7,#4]
 13894 0024 FFF7FEFF 	 bl getValueOffset
 13895 0028 0346     	 mov r3,r0
 13896 002a FB60     	 str r3,[r7,#12]
3275:../cleanflight/src/main/interface/cli.c ****         const bool equalsDefault = valuePtrEqualsDefault(value, pg->copy + valueOffset, pg->address
 13897              	 .loc 13 3275 0
 13898 002c 7B69     	 ldr r3,[r7,#20]
 13899 002e 9A68     	 ldr r2,[r3,#8]
 13900 0030 FB68     	 ldr r3,[r7,#12]
 13901 0032 D118     	 adds r1,r2,r3
 13902 0034 7B69     	 ldr r3,[r7,#20]
 13903 0036 5A68     	 ldr r2,[r3,#4]
 13904 0038 FB68     	 ldr r3,[r7,#12]
 13905 003a 1344     	 add r3,r3,r2
 13906 003c 7868     	 ldr r0,[r7,#4]
 13907 003e 1A46     	 mov r2,r3
 13908 0040 FFF7FEFF 	 bl valuePtrEqualsDefault
 13909 0044 0346     	 mov r3,r0
 13910 0046 FB72     	 strb r3,[r7,#11]
3276:../cleanflight/src/main/interface/cli.c ****         if (!equalsDefault) {
 13911              	 .loc 13 3276 0
 13912 0048 FB7A     	 ldrb r3,[r7,#11]
 13913 004a 83F00103 	 eor r3,r3,#1
 13914 004e DBB2     	 uxtb r3,r3
 13915 0050 002B     	 cmp r3,#0
 13916 0052 10D0     	 beq .L831
3277:../cleanflight/src/main/interface/cli.c ****             cliPrintf(defaultFormat, value->name);
 13917              	 .loc 13 3277 0
 13918 0054 7B68     	 ldr r3,[r7,#4]
 13919 0056 1B68     	 ldr r3,[r3]
 13920 0058 3869     	 ldr r0,[r7,#16]
 13921 005a 1946     	 mov r1,r3
 13922 005c FFF7FEFF 	 bl cliPrintf
3278:../cleanflight/src/main/interface/cli.c ****             printValuePointer(value, (uint8_t*)pg->address + valueOffset, false);
 13923              	 .loc 13 3278 0
 13924 0060 7B69     	 ldr r3,[r7,#20]
 13925 0062 5A68     	 ldr r2,[r3,#4]
 13926 0064 FB68     	 ldr r3,[r7,#12]
 13927 0066 1344     	 add r3,r3,r2
 13928 0068 7868     	 ldr r0,[r7,#4]
 13929 006a 1946     	 mov r1,r3
 13930 006c 0022     	 movs r2,#0
 13931 006e FFF7FEFF 	 bl printValuePointer
3279:../cleanflight/src/main/interface/cli.c ****             cliPrintLinefeed();
 13932              	 .loc 13 3279 0
 13933 0072 FFF7FEFF 	 bl cliPrintLinefeed
 13934              	.L831:
 13935              	.LBE96:
3280:../cleanflight/src/main/interface/cli.c ****         }
3281:../cleanflight/src/main/interface/cli.c ****     }
3282:../cleanflight/src/main/interface/cli.c **** }
 13936              	 .loc 13 3282 0
 13937 0076 1837     	 adds r7,r7,#24
 13938              	.LCFI582:
 13939              	 .cfi_def_cfa_offset 8
 13940 0078 BD46     	 mov sp,r7
 13941              	.LCFI583:
 13942              	 .cfi_def_cfa_register 13
 13943              	 
 13944 007a 80BD     	 pop {r7,pc}
 13945              	.L834:
 13946              	 .align 2
 13947              	.L833:
 13948 007c 60090000 	 .word .LC169
 13949              	 .cfi_endproc
 13950              	.LFE775:
 13952              	 .section .rodata
 13953              	 .align 2
 13954              	.LC170:
 13955 0970 2573203D 	 .ascii "%s = \000"
 13955      2000
 13956              	 .section .text.cliGet,"ax",%progbits
 13957              	 .align 2
 13958              	 .thumb
 13959              	 .thumb_func
 13961              	cliGet:
 13962              	.LFB776:
3283:../cleanflight/src/main/interface/cli.c **** 
3284:../cleanflight/src/main/interface/cli.c **** STATIC_UNIT_TESTED void cliGet(char *cmdline)
3285:../cleanflight/src/main/interface/cli.c **** {
 13963              	 .loc 13 3285 0
 13964              	 .cfi_startproc
 13965              	 
 13966              	 
 13967 0000 80B5     	 push {r7,lr}
 13968              	.LCFI584:
 13969              	 .cfi_def_cfa_offset 8
 13970              	 .cfi_offset 7,-8
 13971              	 .cfi_offset 14,-4
 13972 0002 86B0     	 sub sp,sp,#24
 13973              	.LCFI585:
 13974              	 .cfi_def_cfa_offset 32
 13975 0004 00AF     	 add r7,sp,#0
 13976              	.LCFI586:
 13977              	 .cfi_def_cfa_register 7
 13978 0006 7860     	 str r0,[r7,#4]
3286:../cleanflight/src/main/interface/cli.c ****     const clivalue_t *val;
3287:../cleanflight/src/main/interface/cli.c ****     int matchedCommands = 0;
 13979              	 .loc 13 3287 0
 13980 0008 0023     	 movs r3,#0
 13981 000a 7B61     	 str r3,[r7,#20]
3288:../cleanflight/src/main/interface/cli.c **** 
3289:../cleanflight/src/main/interface/cli.c ****     pidProfileIndexToUse = getCurrentPidProfileIndex();
 13982              	 .loc 13 3289 0
 13983 000c FFF7FEFF 	 bl getCurrentPidProfileIndex
 13984 0010 0346     	 mov r3,r0
 13985 0012 DAB2     	 uxtb r2,r3
 13986 0014 394B     	 ldr r3,.L846
 13987 0016 1A70     	 strb r2,[r3]
3290:../cleanflight/src/main/interface/cli.c ****     rateProfileIndexToUse = getCurrentControlRateProfileIndex();
 13988              	 .loc 13 3290 0
 13989 0018 FFF7FEFF 	 bl getCurrentControlRateProfileIndex
 13990 001c 0346     	 mov r3,r0
 13991 001e DAB2     	 uxtb r2,r3
 13992 0020 374B     	 ldr r3,.L846+4
 13993 0022 1A70     	 strb r2,[r3]
3291:../cleanflight/src/main/interface/cli.c **** 
3292:../cleanflight/src/main/interface/cli.c ****     backupAndResetConfigs();
 13994              	 .loc 13 3292 0
 13995 0024 FFF7FEFF 	 bl backupAndResetConfigs
 13996              	.LBB97:
3293:../cleanflight/src/main/interface/cli.c **** 
3294:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < valueTableEntryCount; i++) {
 13997              	 .loc 13 3294 0
 13998 0028 0023     	 movs r3,#0
 13999 002a 3B61     	 str r3,[r7,#16]
 14000 002c 4DE0     	 b .L836
 14001              	.L843:
3295:../cleanflight/src/main/interface/cli.c ****         if (strcasestr(valueTable[i].name, cmdline)) {
 14002              	 .loc 13 3295 0
 14003 002e 3549     	 ldr r1,.L846+8
 14004 0030 3A69     	 ldr r2,[r7,#16]
 14005 0032 1346     	 mov r3,r2
 14006 0034 5B00     	 lsls r3,r3,#1
 14007 0036 1344     	 add r3,r3,r2
 14008 0038 9B00     	 lsls r3,r3,#2
 14009 003a 1344     	 add r3,r3,r2
 14010 003c 0B44     	 add r3,r3,r1
 14011 003e 1B68     	 ldr r3,[r3]
 14012 0040 1846     	 mov r0,r3
 14013 0042 7968     	 ldr r1,[r7,#4]
 14014 0044 FFF7FEFF 	 bl strcasestr
 14015 0048 0346     	 mov r3,r0
 14016 004a 002B     	 cmp r3,#0
 14017 004c 3AD0     	 beq .L837
3296:../cleanflight/src/main/interface/cli.c ****             val = &valueTable[i];
 14018              	 .loc 13 3296 0
 14019 004e 3A69     	 ldr r2,[r7,#16]
 14020 0050 1346     	 mov r3,r2
 14021 0052 5B00     	 lsls r3,r3,#1
 14022 0054 1344     	 add r3,r3,r2
 14023 0056 9B00     	 lsls r3,r3,#2
 14024 0058 1344     	 add r3,r3,r2
 14025 005a 2A4A     	 ldr r2,.L846+8
 14026 005c 1344     	 add r3,r3,r2
 14027 005e FB60     	 str r3,[r7,#12]
3297:../cleanflight/src/main/interface/cli.c ****             if (matchedCommands > 0) {
 14028              	 .loc 13 3297 0
 14029 0060 7B69     	 ldr r3,[r7,#20]
 14030 0062 002B     	 cmp r3,#0
 14031 0064 01DD     	 ble .L838
3298:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinefeed();
 14032              	 .loc 13 3298 0
 14033 0066 FFF7FEFF 	 bl cliPrintLinefeed
 14034              	.L838:
3299:../cleanflight/src/main/interface/cli.c ****             }
3300:../cleanflight/src/main/interface/cli.c ****             cliPrintf("%s = ", valueTable[i].name);
 14035              	 .loc 13 3300 0
 14036 006a 2649     	 ldr r1,.L846+8
 14037 006c 3A69     	 ldr r2,[r7,#16]
 14038 006e 1346     	 mov r3,r2
 14039 0070 5B00     	 lsls r3,r3,#1
 14040 0072 1344     	 add r3,r3,r2
 14041 0074 9B00     	 lsls r3,r3,#2
 14042 0076 1344     	 add r3,r3,r2
 14043 0078 0B44     	 add r3,r3,r1
 14044 007a 1B68     	 ldr r3,[r3]
 14045 007c 2248     	 ldr r0,.L846+12
 14046 007e 1946     	 mov r1,r3
 14047 0080 FFF7FEFF 	 bl cliPrintf
3301:../cleanflight/src/main/interface/cli.c ****             cliPrintVar(val, 0);
 14048              	 .loc 13 3301 0
 14049 0084 F868     	 ldr r0,[r7,#12]
 14050 0086 0021     	 movs r1,#0
 14051 0088 FFF7FEFF 	 bl cliPrintVar
3302:../cleanflight/src/main/interface/cli.c ****             cliPrintLinefeed();
 14052              	 .loc 13 3302 0
 14053 008c FFF7FEFF 	 bl cliPrintLinefeed
3303:../cleanflight/src/main/interface/cli.c ****             switch (val->type & VALUE_SECTION_MASK) {
 14054              	 .loc 13 3303 0
 14055 0090 FB68     	 ldr r3,[r7,#12]
 14056 0092 1B79     	 ldrb r3,[r3,#4]
 14057 0094 03F01803 	 and r3,r3,#24
 14058 0098 082B     	 cmp r3,#8
 14059 009a 02D0     	 beq .L840
 14060 009c 102B     	 cmp r3,#16
 14061 009e 04D0     	 beq .L841
3304:../cleanflight/src/main/interface/cli.c ****             case PROFILE_VALUE:
3305:../cleanflight/src/main/interface/cli.c ****                 cliProfile("");
3306:../cleanflight/src/main/interface/cli.c **** 
3307:../cleanflight/src/main/interface/cli.c ****                 break;
3308:../cleanflight/src/main/interface/cli.c ****             case PROFILE_RATE_VALUE:
3309:../cleanflight/src/main/interface/cli.c ****                 cliRateProfile("");
3310:../cleanflight/src/main/interface/cli.c **** 
3311:../cleanflight/src/main/interface/cli.c ****                 break;
3312:../cleanflight/src/main/interface/cli.c ****             default:
3313:../cleanflight/src/main/interface/cli.c **** 
3314:../cleanflight/src/main/interface/cli.c ****                 break;
 14062              	 .loc 13 3314 0
 14063 00a0 07E0     	 b .L842
 14064              	.L840:
3305:../cleanflight/src/main/interface/cli.c **** 
 14065              	 .loc 13 3305 0
 14066 00a2 1A48     	 ldr r0,.L846+16
 14067 00a4 FFF7FEFF 	 bl cliProfile
3307:../cleanflight/src/main/interface/cli.c ****             case PROFILE_RATE_VALUE:
 14068              	 .loc 13 3307 0
 14069 00a8 03E0     	 b .L842
 14070              	.L841:
3309:../cleanflight/src/main/interface/cli.c **** 
 14071              	 .loc 13 3309 0
 14072 00aa 1848     	 ldr r0,.L846+16
 14073 00ac FFF7FEFF 	 bl cliRateProfile
3311:../cleanflight/src/main/interface/cli.c ****             default:
 14074              	 .loc 13 3311 0
 14075 00b0 00BF     	 nop
 14076              	.L842:
3315:../cleanflight/src/main/interface/cli.c ****             }
3316:../cleanflight/src/main/interface/cli.c ****             cliPrintVarRange(val);
 14077              	 .loc 13 3316 0
 14078 00b2 F868     	 ldr r0,[r7,#12]
 14079 00b4 FFF7FEFF 	 bl cliPrintVarRange
3317:../cleanflight/src/main/interface/cli.c ****             cliPrintVarDefault(val);
 14080              	 .loc 13 3317 0
 14081 00b8 F868     	 ldr r0,[r7,#12]
 14082 00ba FFF7FEFF 	 bl cliPrintVarDefault
3318:../cleanflight/src/main/interface/cli.c ****             matchedCommands++;
 14083              	 .loc 13 3318 0
 14084 00be 7B69     	 ldr r3,[r7,#20]
 14085 00c0 0133     	 adds r3,r3,#1
 14086 00c2 7B61     	 str r3,[r7,#20]
 14087              	.L837:
3294:../cleanflight/src/main/interface/cli.c ****         if (strcasestr(valueTable[i].name, cmdline)) {
 14088              	 .loc 13 3294 0 discriminator 2
 14089 00c4 3B69     	 ldr r3,[r7,#16]
 14090 00c6 0133     	 adds r3,r3,#1
 14091 00c8 3B61     	 str r3,[r7,#16]
 14092              	.L836:
3294:../cleanflight/src/main/interface/cli.c ****         if (strcasestr(valueTable[i].name, cmdline)) {
 14093              	 .loc 13 3294 0 is_stmt 0 discriminator 1
 14094 00ca 114B     	 ldr r3,.L846+20
 14095 00cc 1B88     	 ldrh r3,[r3]
 14096 00ce 1A46     	 mov r2,r3
 14097 00d0 3B69     	 ldr r3,[r7,#16]
 14098 00d2 9A42     	 cmp r2,r3
 14099 00d4 ABD8     	 bhi .L843
 14100              	.LBE97:
3319:../cleanflight/src/main/interface/cli.c ****         }
3320:../cleanflight/src/main/interface/cli.c ****     }
3321:../cleanflight/src/main/interface/cli.c **** 
3322:../cleanflight/src/main/interface/cli.c ****     restoreConfigs();
 14101              	 .loc 13 3322 0 is_stmt 1
 14102 00d6 FFF7FEFF 	 bl restoreConfigs
3323:../cleanflight/src/main/interface/cli.c **** 
3324:../cleanflight/src/main/interface/cli.c ****     pidProfileIndexToUse = CURRENT_PROFILE_INDEX;
 14103              	 .loc 13 3324 0
 14104 00da 084B     	 ldr r3,.L846
 14105 00dc FF22     	 movs r2,#255
 14106 00de 1A70     	 strb r2,[r3]
3325:../cleanflight/src/main/interface/cli.c ****     rateProfileIndexToUse = CURRENT_PROFILE_INDEX;
 14107              	 .loc 13 3325 0
 14108 00e0 074B     	 ldr r3,.L846+4
 14109 00e2 FF22     	 movs r2,#255
 14110 00e4 1A70     	 strb r2,[r3]
3326:../cleanflight/src/main/interface/cli.c **** 
3327:../cleanflight/src/main/interface/cli.c ****     if (matchedCommands) {
 14111              	 .loc 13 3327 0
 14112 00e6 7B69     	 ldr r3,[r7,#20]
 14113 00e8 002B     	 cmp r3,#0
 14114 00ea 00D0     	 beq .L844
3328:../cleanflight/src/main/interface/cli.c ****         return;
 14115              	 .loc 13 3328 0
 14116 00ec 02E0     	 b .L835
 14117              	.L844:
3329:../cleanflight/src/main/interface/cli.c ****     }
3330:../cleanflight/src/main/interface/cli.c **** 
3331:../cleanflight/src/main/interface/cli.c ****     cliPrintErrorLinef("Invalid name");
 14118              	 .loc 13 3331 0
 14119 00ee 0948     	 ldr r0,.L846+24
 14120 00f0 FFF7FEFF 	 bl cliPrintErrorLinef
 14121              	.L835:
3332:../cleanflight/src/main/interface/cli.c **** }
 14122              	 .loc 13 3332 0
 14123 00f4 1837     	 adds r7,r7,#24
 14124              	.LCFI587:
 14125              	 .cfi_def_cfa_offset 8
 14126 00f6 BD46     	 mov sp,r7
 14127              	.LCFI588:
 14128              	 .cfi_def_cfa_register 13
 14129              	 
 14130 00f8 80BD     	 pop {r7,pc}
 14131              	.L847:
 14132 00fa 00BF     	 .align 2
 14133              	.L846:
 14134 00fc 00000000 	 .word pidProfileIndexToUse
 14135 0100 00000000 	 .word rateProfileIndexToUse
 14136 0104 00000000 	 .word valueTable
 14137 0108 70090000 	 .word .LC170
 14138 010c 04000000 	 .word .LC1
 14139 0110 00000000 	 .word valueTableEntryCount
 14140 0114 E4040000 	 .word .LC100
 14141              	 .cfi_endproc
 14142              	.LFE776:
 14144              	 .section .text.getWordLength,"ax",%progbits
 14145              	 .align 2
 14146              	 .thumb
 14147              	 .thumb_func
 14149              	getWordLength:
 14150              	.LFB777:
3333:../cleanflight/src/main/interface/cli.c **** 
3334:../cleanflight/src/main/interface/cli.c **** static uint8_t getWordLength(char *bufBegin, char *bufEnd)
3335:../cleanflight/src/main/interface/cli.c **** {
 14151              	 .loc 13 3335 0
 14152              	 .cfi_startproc
 14153              	 
 14154              	 
 14155              	 
 14156 0000 80B4     	 push {r7}
 14157              	.LCFI589:
 14158              	 .cfi_def_cfa_offset 4
 14159              	 .cfi_offset 7,-4
 14160 0002 83B0     	 sub sp,sp,#12
 14161              	.LCFI590:
 14162              	 .cfi_def_cfa_offset 16
 14163 0004 00AF     	 add r7,sp,#0
 14164              	.LCFI591:
 14165              	 .cfi_def_cfa_register 7
 14166 0006 7860     	 str r0,[r7,#4]
 14167 0008 3960     	 str r1,[r7]
3336:../cleanflight/src/main/interface/cli.c ****     while (*(bufEnd - 1) == ' ') {
 14168              	 .loc 13 3336 0
 14169 000a 02E0     	 b .L849
 14170              	.L850:
3337:../cleanflight/src/main/interface/cli.c ****         bufEnd--;
 14171              	 .loc 13 3337 0
 14172 000c 3B68     	 ldr r3,[r7]
 14173 000e 013B     	 subs r3,r3,#1
 14174 0010 3B60     	 str r3,[r7]
 14175              	.L849:
3336:../cleanflight/src/main/interface/cli.c ****     while (*(bufEnd - 1) == ' ') {
 14176              	 .loc 13 3336 0
 14177 0012 3B68     	 ldr r3,[r7]
 14178 0014 013B     	 subs r3,r3,#1
 14179 0016 1B78     	 ldrb r3,[r3]
 14180 0018 202B     	 cmp r3,#32
 14181 001a F7D0     	 beq .L850
3338:../cleanflight/src/main/interface/cli.c ****     }
3339:../cleanflight/src/main/interface/cli.c **** 
3340:../cleanflight/src/main/interface/cli.c ****     return bufEnd - bufBegin;
 14182              	 .loc 13 3340 0
 14183 001c 3A68     	 ldr r2,[r7]
 14184 001e 7B68     	 ldr r3,[r7,#4]
 14185 0020 D31A     	 subs r3,r2,r3
 14186 0022 DBB2     	 uxtb r3,r3
3341:../cleanflight/src/main/interface/cli.c **** }
 14187              	 .loc 13 3341 0
 14188 0024 1846     	 mov r0,r3
 14189 0026 0C37     	 adds r7,r7,#12
 14190              	.LCFI592:
 14191              	 .cfi_def_cfa_offset 4
 14192 0028 BD46     	 mov sp,r7
 14193              	.LCFI593:
 14194              	 .cfi_def_cfa_register 13
 14195              	 
 14196 002a 5DF8047B 	 ldr r7,[sp],#4
 14197              	.LCFI594:
 14198              	 .cfi_restore 7
 14199              	 .cfi_def_cfa_offset 0
 14200 002e 7047     	 bx lr
 14201              	 .cfi_endproc
 14202              	.LFE777:
 14204              	 .section .rodata
 14205 0976 0000     	 .align 2
 14206              	.LC171:
 14207 0978 43757272 	 .ascii "Current settings: \000"
 14207      656E7420 
 14207      73657474 
 14207      696E6773 
 14207      3A2000
 14208 098b 00       	 .align 2
 14209              	.LC172:
 14210 098c 25732073 	 .ascii "%s set to \000"
 14210      65742074 
 14210      6F2000
 14211 0997 00       	 .align 2
 14212              	.LC173:
 14213 0998 496E7661 	 .ascii "Invalid value\000"
 14213      6C696420 
 14213      76616C75 
 14213      6500
 14214              	 .section .text.cliSet,"ax",%progbits
 14215              	 .align 2
 14216              	 .thumb
 14217              	 .thumb_func
 14219              	cliSet:
 14220              	.LFB778:
3342:../cleanflight/src/main/interface/cli.c **** 
3343:../cleanflight/src/main/interface/cli.c **** STATIC_UNIT_TESTED void cliSet(char *cmdline)
3344:../cleanflight/src/main/interface/cli.c **** {
 14221              	 .loc 13 3344 0
 14222              	 .cfi_startproc
 14223              	 
 14224              	 
 14225 0000 90B5     	 push {r4,r7,lr}
 14226              	.LCFI595:
 14227              	 .cfi_def_cfa_offset 12
 14228              	 .cfi_offset 4,-12
 14229              	 .cfi_offset 7,-8
 14230              	 .cfi_offset 14,-4
 14231 0002 97B0     	 sub sp,sp,#92
 14232              	.LCFI596:
 14233              	 .cfi_def_cfa_offset 104
 14234 0004 00AF     	 add r7,sp,#0
 14235              	.LCFI597:
 14236              	 .cfi_def_cfa_register 7
 14237 0006 7860     	 str r0,[r7,#4]
3345:../cleanflight/src/main/interface/cli.c ****     const uint32_t len = strlen(cmdline);
 14238              	 .loc 13 3345 0
 14239 0008 7868     	 ldr r0,[r7,#4]
 14240 000a FFF7FEFF 	 bl strlen
 14241 000e 7863     	 str r0,[r7,#52]
3346:../cleanflight/src/main/interface/cli.c ****     char *eqptr;
3347:../cleanflight/src/main/interface/cli.c **** 
3348:../cleanflight/src/main/interface/cli.c ****     if (len == 0 || (len == 1 && cmdline[0] == '*')) {
 14242              	 .loc 13 3348 0
 14243 0010 7B6B     	 ldr r3,[r7,#52]
 14244 0012 002B     	 cmp r3,#0
 14245 0014 06D0     	 beq .L853
 14246              	 .loc 13 3348 0 is_stmt 0 discriminator 1
 14247 0016 7B6B     	 ldr r3,[r7,#52]
 14248 0018 012B     	 cmp r3,#1
 14249 001a 35D1     	 bne .L854
 14250              	 .loc 13 3348 0 discriminator 2
 14251 001c 7B68     	 ldr r3,[r7,#4]
 14252 001e 1B78     	 ldrb r3,[r3]
 14253 0020 2A2B     	 cmp r3,#42
 14254 0022 31D1     	 bne .L854
 14255              	.L853:
3349:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("Current settings: ");
 14256              	 .loc 13 3349 0 is_stmt 1
 14257 0024 A248     	 ldr r0,.L886
 14258 0026 FFF7FEFF 	 bl cliPrintLine
 14259              	.LBB98:
3350:../cleanflight/src/main/interface/cli.c **** 
3351:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; i < valueTableEntryCount; i++) {
 14260              	 .loc 13 3351 0
 14261 002a 0023     	 movs r3,#0
 14262 002c 7B65     	 str r3,[r7,#84]
 14263 002e 24E0     	 b .L855
 14264              	.L856:
 14265              	.LBB99:
3352:../cleanflight/src/main/interface/cli.c ****             const clivalue_t *val = &valueTable[i];
 14266              	 .loc 13 3352 0 discriminator 3
 14267 0030 7A6D     	 ldr r2,[r7,#84]
 14268 0032 1346     	 mov r3,r2
 14269 0034 5B00     	 lsls r3,r3,#1
 14270 0036 1344     	 add r3,r3,r2
 14271 0038 9B00     	 lsls r3,r3,#2
 14272 003a 1344     	 add r3,r3,r2
 14273 003c 9D4A     	 ldr r2,.L886+4
 14274 003e 1344     	 add r3,r3,r2
 14275 0040 BB60     	 str r3,[r7,#8]
3353:../cleanflight/src/main/interface/cli.c ****             cliPrintf("%s = ", valueTable[i].name);
 14276              	 .loc 13 3353 0 discriminator 3
 14277 0042 9C49     	 ldr r1,.L886+4
 14278 0044 7A6D     	 ldr r2,[r7,#84]
 14279 0046 1346     	 mov r3,r2
 14280 0048 5B00     	 lsls r3,r3,#1
 14281 004a 1344     	 add r3,r3,r2
 14282 004c 9B00     	 lsls r3,r3,#2
 14283 004e 1344     	 add r3,r3,r2
 14284 0050 0B44     	 add r3,r3,r1
 14285 0052 1B68     	 ldr r3,[r3]
 14286 0054 9848     	 ldr r0,.L886+8
 14287 0056 1946     	 mov r1,r3
 14288 0058 FFF7FEFF 	 bl cliPrintf
3354:../cleanflight/src/main/interface/cli.c ****             cliPrintVar(val, len); // when len is 1 (when * is passed as argument), it will print m
 14289              	 .loc 13 3354 0 discriminator 3
 14290 005c 7B6B     	 ldr r3,[r7,#52]
 14291 005e 002B     	 cmp r3,#0
 14292 0060 14BF     	 ite ne
 14293 0062 0123     	 movne r3,#1
 14294 0064 0023     	 moveq r3,#0
 14295 0066 DBB2     	 uxtb r3,r3
 14296 0068 B868     	 ldr r0,[r7,#8]
 14297 006a 1946     	 mov r1,r3
 14298 006c FFF7FEFF 	 bl cliPrintVar
3355:../cleanflight/src/main/interface/cli.c ****             cliPrintLinefeed();
 14299              	 .loc 13 3355 0 discriminator 3
 14300 0070 FFF7FEFF 	 bl cliPrintLinefeed
 14301              	.LBE99:
3351:../cleanflight/src/main/interface/cli.c ****             const clivalue_t *val = &valueTable[i];
 14302              	 .loc 13 3351 0 discriminator 3
 14303 0074 7B6D     	 ldr r3,[r7,#84]
 14304 0076 0133     	 adds r3,r3,#1
 14305 0078 7B65     	 str r3,[r7,#84]
 14306              	.L855:
3351:../cleanflight/src/main/interface/cli.c ****             const clivalue_t *val = &valueTable[i];
 14307              	 .loc 13 3351 0 is_stmt 0 discriminator 1
 14308 007a 904B     	 ldr r3,.L886+12
 14309 007c 1B88     	 ldrh r3,[r3]
 14310 007e 1A46     	 mov r2,r3
 14311 0080 7B6D     	 ldr r3,[r7,#84]
 14312 0082 9A42     	 cmp r2,r3
 14313 0084 D4D8     	 bhi .L856
 14314              	.LBE98:
3351:../cleanflight/src/main/interface/cli.c ****             const clivalue_t *val = &valueTable[i];
 14315              	 .loc 13 3351 0
 14316 0086 69E1     	 b .L852
 14317              	.L854:
3356:../cleanflight/src/main/interface/cli.c ****         }
3357:../cleanflight/src/main/interface/cli.c ****     } else if ((eqptr = strstr(cmdline, "=")) != NULL) {
 14318              	 .loc 13 3357 0 is_stmt 1
 14319 0088 7868     	 ldr r0,[r7,#4]
 14320 008a 3D21     	 movs r1,#61
 14321 008c FFF7FEFF 	 bl strchr
 14322 0090 3863     	 str r0,[r7,#48]
 14323 0092 3B6B     	 ldr r3,[r7,#48]
 14324 0094 002B     	 cmp r3,#0
 14325 0096 00F05E81 	 beq .L858
 14326              	.LBB100:
3358:../cleanflight/src/main/interface/cli.c ****         // has equals
3359:../cleanflight/src/main/interface/cli.c **** 
3360:../cleanflight/src/main/interface/cli.c ****         uint8_t variableNameLength = getWordLength(cmdline, eqptr);
 14327              	 .loc 13 3360 0
 14328 009a 7868     	 ldr r0,[r7,#4]
 14329 009c 396B     	 ldr r1,[r7,#48]
 14330 009e FFF7FEFF 	 bl getWordLength
 14331 00a2 0346     	 mov r3,r0
 14332 00a4 87F82F30 	 strb r3,[r7,#47]
3361:../cleanflight/src/main/interface/cli.c **** 
3362:../cleanflight/src/main/interface/cli.c ****         // skip the '=' and any ' ' characters
3363:../cleanflight/src/main/interface/cli.c ****         eqptr++;
 14333              	 .loc 13 3363 0
 14334 00a8 3B6B     	 ldr r3,[r7,#48]
 14335 00aa 0133     	 adds r3,r3,#1
 14336 00ac 3B63     	 str r3,[r7,#48]
3364:../cleanflight/src/main/interface/cli.c ****         eqptr = skipSpace(eqptr);
 14337              	 .loc 13 3364 0
 14338 00ae 386B     	 ldr r0,[r7,#48]
 14339 00b0 FFF7FEFF 	 bl skipSpace
 14340 00b4 3863     	 str r0,[r7,#48]
 14341              	.LBB101:
3365:../cleanflight/src/main/interface/cli.c **** 
3366:../cleanflight/src/main/interface/cli.c ****         for (uint32_t i = 0; i < valueTableEntryCount; i++) {
 14342              	 .loc 13 3366 0
 14343 00b6 0023     	 movs r3,#0
 14344 00b8 3B65     	 str r3,[r7,#80]
 14345 00ba 41E1     	 b .L859
 14346              	.L885:
 14347              	.LBB102:
3367:../cleanflight/src/main/interface/cli.c ****             const clivalue_t *val = &valueTable[i];
 14348              	 .loc 13 3367 0
 14349 00bc 3A6D     	 ldr r2,[r7,#80]
 14350 00be 1346     	 mov r3,r2
 14351 00c0 5B00     	 lsls r3,r3,#1
 14352 00c2 1344     	 add r3,r3,r2
 14353 00c4 9B00     	 lsls r3,r3,#2
 14354 00c6 1344     	 add r3,r3,r2
 14355 00c8 7A4A     	 ldr r2,.L886+4
 14356 00ca 1344     	 add r3,r3,r2
 14357 00cc BB62     	 str r3,[r7,#40]
3368:../cleanflight/src/main/interface/cli.c **** 
3369:../cleanflight/src/main/interface/cli.c ****             // ensure exact match when setting to prevent setting variables with shorter names
3370:../cleanflight/src/main/interface/cli.c ****             if (strncasecmp(cmdline, val->name, strlen(val->name)) == 0 && variableNameLength == st
 14358              	 .loc 13 3370 0
 14359 00ce BB6A     	 ldr r3,[r7,#40]
 14360 00d0 1C68     	 ldr r4,[r3]
 14361 00d2 BB6A     	 ldr r3,[r7,#40]
 14362 00d4 1B68     	 ldr r3,[r3]
 14363 00d6 1846     	 mov r0,r3
 14364 00d8 FFF7FEFF 	 bl strlen
 14365 00dc 0346     	 mov r3,r0
 14366 00de 7868     	 ldr r0,[r7,#4]
 14367 00e0 2146     	 mov r1,r4
 14368 00e2 1A46     	 mov r2,r3
 14369 00e4 FFF7FEFF 	 bl strncasecmp
 14370 00e8 0346     	 mov r3,r0
 14371 00ea 002B     	 cmp r3,#0
 14372 00ec 40F02581 	 bne .L860
 14373              	 .loc 13 3370 0 is_stmt 0 discriminator 1
 14374 00f0 97F82F40 	 ldrb r4,[r7,#47]
 14375 00f4 BB6A     	 ldr r3,[r7,#40]
 14376 00f6 1B68     	 ldr r3,[r3]
 14377 00f8 1846     	 mov r0,r3
 14378 00fa FFF7FEFF 	 bl strlen
 14379 00fe 0346     	 mov r3,r0
 14380 0100 9C42     	 cmp r4,r3
 14381 0102 40F01A81 	 bne .L860
 14382              	.LBB103:
3371:../cleanflight/src/main/interface/cli.c **** 
3372:../cleanflight/src/main/interface/cli.c ****                 bool valueChanged = false;
 14383              	 .loc 13 3372 0 is_stmt 1
 14384 0106 0023     	 movs r3,#0
 14385 0108 87F84F30 	 strb r3,[r7,#79]
3373:../cleanflight/src/main/interface/cli.c ****                 int16_t value  = 0;
 14386              	 .loc 13 3373 0
 14387 010c 0023     	 movs r3,#0
 14388 010e FB84     	 strh r3,[r7,#38]
3374:../cleanflight/src/main/interface/cli.c ****                 switch (val->type & VALUE_MODE_MASK) {
 14389              	 .loc 13 3374 0
 14390 0110 BB6A     	 ldr r3,[r7,#40]
 14391 0112 1B79     	 ldrb r3,[r3,#4]
 14392 0114 03F06003 	 and r3,r3,#96
 14393 0118 202B     	 cmp r3,#32
 14394 011a 2BD0     	 beq .L862
 14395 011c 202B     	 cmp r3,#32
 14396 011e 02DC     	 bgt .L863
 14397 0120 002B     	 cmp r3,#0
 14398 0122 05D0     	 beq .L864
 14399 0124 F3E0     	 b .L861
 14400              	.L863:
 14401 0126 402B     	 cmp r3,#64
 14402 0128 7DD0     	 beq .L865
 14403 012a 602B     	 cmp r3,#96
 14404 012c 22D0     	 beq .L862
 14405 012e EEE0     	 b .L861
 14406              	.L864:
 14407              	.LBB104:
3375:../cleanflight/src/main/interface/cli.c ****                 case MODE_DIRECT: {
3376:../cleanflight/src/main/interface/cli.c ****                         int16_t value = atoi(eqptr);
 14408              	 .loc 13 3376 0
 14409 0130 386B     	 ldr r0,[r7,#48]
 14410 0132 FFF7FEFF 	 bl atoi
 14411 0136 0346     	 mov r3,r0
 14412 0138 BB84     	 strh r3,[r7,#36]
3377:../cleanflight/src/main/interface/cli.c **** 
3378:../cleanflight/src/main/interface/cli.c ****                         if (value >= val->config.minmax.min && value <= val->config.minmax.max) {
 14413              	 .loc 13 3378 0
 14414 013a BB6A     	 ldr r3,[r7,#40]
 14415 013c B3F90530 	 ldrsh r3,[r3,#5]
 14416 0140 9BB2     	 uxth r3,r3
 14417 0142 B7F92420 	 ldrsh r2,[r7,#36]
 14418 0146 1BB2     	 sxth r3,r3
 14419 0148 9A42     	 cmp r2,r3
 14420 014a 12DB     	 blt .L866
 14421              	 .loc 13 3378 0 is_stmt 0 discriminator 1
 14422 014c BB6A     	 ldr r3,[r7,#40]
 14423 014e B3F90730 	 ldrsh r3,[r3,#7]
 14424 0152 9BB2     	 uxth r3,r3
 14425 0154 B7F92420 	 ldrsh r2,[r7,#36]
 14426 0158 1BB2     	 sxth r3,r3
 14427 015a 9A42     	 cmp r2,r3
 14428 015c 09DC     	 bgt .L866
3379:../cleanflight/src/main/interface/cli.c ****                             cliSetVar(val, value);
 14429              	 .loc 13 3379 0 is_stmt 1
 14430 015e B7F92430 	 ldrsh r3,[r7,#36]
 14431 0162 B86A     	 ldr r0,[r7,#40]
 14432 0164 1946     	 mov r1,r3
 14433 0166 FFF7FEFF 	 bl cliSetVar
3380:../cleanflight/src/main/interface/cli.c ****                             valueChanged = true;
 14434              	 .loc 13 3380 0
 14435 016a 0123     	 movs r3,#1
 14436 016c 87F84F30 	 strb r3,[r7,#79]
 14437              	.LBE104:
3381:../cleanflight/src/main/interface/cli.c ****                         }
3382:../cleanflight/src/main/interface/cli.c ****                     }
3383:../cleanflight/src/main/interface/cli.c **** 
3384:../cleanflight/src/main/interface/cli.c ****                     break;
 14438              	 .loc 13 3384 0
 14439 0170 CDE0     	 b .L861
 14440              	.L866:
 14441 0172 CCE0     	 b .L861
 14442              	.L862:
 14443              	.LBB105:
3385:../cleanflight/src/main/interface/cli.c ****                 case MODE_LOOKUP: 
3386:../cleanflight/src/main/interface/cli.c ****                 case MODE_BITSET: {
3387:../cleanflight/src/main/interface/cli.c ****                         int tableIndex;
3388:../cleanflight/src/main/interface/cli.c ****                         if ((val->type & VALUE_MODE_MASK) == MODE_BITSET) {
 14444              	 .loc 13 3388 0
 14445 0174 BB6A     	 ldr r3,[r7,#40]
 14446 0176 1B79     	 ldrb r3,[r3,#4]
 14447 0178 03F06003 	 and r3,r3,#96
 14448 017c 602B     	 cmp r3,#96
 14449 017e 02D1     	 bne .L867
3389:../cleanflight/src/main/interface/cli.c ****                             tableIndex = TABLE_OFF_ON;
 14450              	 .loc 13 3389 0
 14451 0180 0023     	 movs r3,#0
 14452 0182 BB64     	 str r3,[r7,#72]
 14453 0184 02E0     	 b .L868
 14454              	.L867:
3390:../cleanflight/src/main/interface/cli.c ****                         } else {
3391:../cleanflight/src/main/interface/cli.c ****                             tableIndex = val->config.lookup.tableIndex;
 14455              	 .loc 13 3391 0
 14456 0186 BB6A     	 ldr r3,[r7,#40]
 14457 0188 5B79     	 ldrb r3,[r3,#5]
 14458 018a BB64     	 str r3,[r7,#72]
 14459              	.L868:
3392:../cleanflight/src/main/interface/cli.c ****                         }
3393:../cleanflight/src/main/interface/cli.c ****                         const lookupTableEntry_t *tableEntry = &lookupTables[tableIndex];
 14460              	 .loc 13 3393 0
 14461 018c BA6C     	 ldr r2,[r7,#72]
 14462 018e 1346     	 mov r3,r2
 14463 0190 9B00     	 lsls r3,r3,#2
 14464 0192 1344     	 add r3,r3,r2
 14465 0194 4A4A     	 ldr r2,.L886+16
 14466 0196 1344     	 add r3,r3,r2
 14467 0198 3B62     	 str r3,[r7,#32]
3394:../cleanflight/src/main/interface/cli.c ****                         bool matched = false;
 14468              	 .loc 13 3394 0
 14469 019a 0023     	 movs r3,#0
 14470 019c 87F84730 	 strb r3,[r7,#71]
 14471              	.LBB106:
3395:../cleanflight/src/main/interface/cli.c ****                         for (uint32_t tableValueIndex = 0; tableValueIndex < tableEntry->valueCount
 14472              	 .loc 13 3395 0
 14473 01a0 0023     	 movs r3,#0
 14474 01a2 3B64     	 str r3,[r7,#64]
 14475 01a4 31E0     	 b .L869
 14476              	.L874:
3396:../cleanflight/src/main/interface/cli.c ****                             matched = tableEntry->values[tableValueIndex] && strcasecmp(tableEntry-
 14477              	 .loc 13 3396 0
 14478 01a6 3B6A     	 ldr r3,[r7,#32]
 14479 01a8 1A68     	 ldr r2,[r3]
 14480 01aa 3B6C     	 ldr r3,[r7,#64]
 14481 01ac 9B00     	 lsls r3,r3,#2
 14482 01ae 1344     	 add r3,r3,r2
 14483 01b0 1B68     	 ldr r3,[r3]
 14484 01b2 002B     	 cmp r3,#0
 14485 01b4 0ED0     	 beq .L870
 14486              	 .loc 13 3396 0 is_stmt 0 discriminator 1
 14487 01b6 3B6A     	 ldr r3,[r7,#32]
 14488 01b8 1A68     	 ldr r2,[r3]
 14489 01ba 3B6C     	 ldr r3,[r7,#64]
 14490 01bc 9B00     	 lsls r3,r3,#2
 14491 01be 1344     	 add r3,r3,r2
 14492 01c0 1B68     	 ldr r3,[r3]
 14493 01c2 1846     	 mov r0,r3
 14494 01c4 396B     	 ldr r1,[r7,#48]
 14495 01c6 FFF7FEFF 	 bl strcasecmp
 14496 01ca 0346     	 mov r3,r0
 14497 01cc 002B     	 cmp r3,#0
 14498 01ce 01D1     	 bne .L870
 14499              	 .loc 13 3396 0 discriminator 3
 14500 01d0 0123     	 movs r3,#1
 14501 01d2 00E0     	 b .L871
 14502              	.L870:
 14503              	 .loc 13 3396 0 discriminator 4
 14504 01d4 0023     	 movs r3,#0
 14505              	.L871:
 14506              	 .loc 13 3396 0 discriminator 6
 14507 01d6 87F84730 	 strb r3,[r7,#71]
 14508 01da 97F84730 	 ldrb r3,[r7,#71]
 14509 01de 03F00103 	 and r3,r3,#1
 14510 01e2 87F84730 	 strb r3,[r7,#71]
3397:../cleanflight/src/main/interface/cli.c **** 
3398:../cleanflight/src/main/interface/cli.c ****                             if (matched) {
 14511              	 .loc 13 3398 0 is_stmt 1 discriminator 6
 14512 01e6 97F84730 	 ldrb r3,[r7,#71]
 14513 01ea 002B     	 cmp r3,#0
 14514 01ec 0AD0     	 beq .L872
3399:../cleanflight/src/main/interface/cli.c ****                                 value = tableValueIndex;
 14515              	 .loc 13 3399 0
 14516 01ee 3B6C     	 ldr r3,[r7,#64]
 14517 01f0 FB84     	 strh r3,[r7,#38]
3400:../cleanflight/src/main/interface/cli.c **** 
3401:../cleanflight/src/main/interface/cli.c ****                                 cliSetVar(val, value);
 14518              	 .loc 13 3401 0
 14519 01f2 B7F92630 	 ldrsh r3,[r7,#38]
 14520 01f6 B86A     	 ldr r0,[r7,#40]
 14521 01f8 1946     	 mov r1,r3
 14522 01fa FFF7FEFF 	 bl cliSetVar
3402:../cleanflight/src/main/interface/cli.c ****                                 valueChanged = true;
 14523              	 .loc 13 3402 0
 14524 01fe 0123     	 movs r3,#1
 14525 0200 87F84F30 	 strb r3,[r7,#79]
 14526              	.L872:
3395:../cleanflight/src/main/interface/cli.c ****                             matched = tableEntry->values[tableValueIndex] && strcasecmp(tableEntry-
 14527              	 .loc 13 3395 0 discriminator 2
 14528 0204 3B6C     	 ldr r3,[r7,#64]
 14529 0206 0133     	 adds r3,r3,#1
 14530 0208 3B64     	 str r3,[r7,#64]
 14531              	.L869:
3395:../cleanflight/src/main/interface/cli.c ****                             matched = tableEntry->values[tableValueIndex] && strcasecmp(tableEntry-
 14532              	 .loc 13 3395 0 is_stmt 0 discriminator 1
 14533 020a 3B6A     	 ldr r3,[r7,#32]
 14534 020c 1B79     	 ldrb r3,[r3,#4]
 14535 020e 1A46     	 mov r2,r3
 14536 0210 3B6C     	 ldr r3,[r7,#64]
 14537 0212 9A42     	 cmp r2,r3
 14538 0214 06D9     	 bls .L873
3395:../cleanflight/src/main/interface/cli.c ****                             matched = tableEntry->values[tableValueIndex] && strcasecmp(tableEntry-
 14539              	 .loc 13 3395 0 discriminator 3
 14540 0216 97F84730 	 ldrb r3,[r7,#71]
 14541 021a 83F00103 	 eor r3,r3,#1
 14542 021e DBB2     	 uxtb r3,r3
 14543 0220 002B     	 cmp r3,#0
 14544 0222 C0D1     	 bne .L874
 14545              	.L873:
 14546              	.LBE106:
 14547              	.LBE105:
3403:../cleanflight/src/main/interface/cli.c ****                             }
3404:../cleanflight/src/main/interface/cli.c ****                         }
3405:../cleanflight/src/main/interface/cli.c ****                     }
3406:../cleanflight/src/main/interface/cli.c **** 
3407:../cleanflight/src/main/interface/cli.c ****                     break;
 14548              	 .loc 13 3407 0 is_stmt 1
 14549 0224 73E0     	 b .L861
 14550              	.L865:
 14551              	.LBB107:
3408:../cleanflight/src/main/interface/cli.c **** 
3409:../cleanflight/src/main/interface/cli.c ****                 case MODE_ARRAY: {
3410:../cleanflight/src/main/interface/cli.c ****                         const uint8_t arrayLength = val->config.array.length;
 14552              	 .loc 13 3410 0
 14553 0226 BB6A     	 ldr r3,[r7,#40]
 14554 0228 5B79     	 ldrb r3,[r3,#5]
 14555 022a FB77     	 strb r3,[r7,#31]
3411:../cleanflight/src/main/interface/cli.c ****                         char *valPtr = eqptr;
 14556              	 .loc 13 3411 0
 14557 022c 3B6B     	 ldr r3,[r7,#48]
 14558 022e FB63     	 str r3,[r7,#60]
3412:../cleanflight/src/main/interface/cli.c **** 
3413:../cleanflight/src/main/interface/cli.c ****                         int i = 0;
 14559              	 .loc 13 3413 0
 14560 0230 0023     	 movs r3,#0
 14561 0232 BB63     	 str r3,[r7,#56]
3414:../cleanflight/src/main/interface/cli.c ****                         while (i < arrayLength && valPtr != NULL) {
 14562              	 .loc 13 3414 0
 14563 0234 60E0     	 b .L875
 14564              	.L882:
3415:../cleanflight/src/main/interface/cli.c ****                             // skip spaces
3416:../cleanflight/src/main/interface/cli.c ****                             valPtr = skipSpace(valPtr);
 14565              	 .loc 13 3416 0
 14566 0236 F86B     	 ldr r0,[r7,#60]
 14567 0238 FFF7FEFF 	 bl skipSpace
 14568 023c F863     	 str r0,[r7,#60]
3417:../cleanflight/src/main/interface/cli.c **** 
3418:../cleanflight/src/main/interface/cli.c ****                             // process substring starting at valPtr
3419:../cleanflight/src/main/interface/cli.c ****                             // note: no need to copy substrings for atoi()
3420:../cleanflight/src/main/interface/cli.c ****                             //       it stops at the first character that cannot be converted...
3421:../cleanflight/src/main/interface/cli.c ****                             switch (val->type & VALUE_TYPE_MASK) {
 14569              	 .loc 13 3421 0
 14570 023e BB6A     	 ldr r3,[r7,#40]
 14571 0240 1B79     	 ldrb r3,[r3,#4]
 14572 0242 03F00703 	 and r3,r3,#7
 14573 0246 022B     	 cmp r3,#2
 14574 0248 21D0     	 beq .L877
 14575 024a 032B     	 cmp r3,#3
 14576 024c 3AD0     	 beq .L878
 14577 024e 012B     	 cmp r3,#1
 14578 0250 0ED0     	 beq .L879
 14579              	.LBB108:
3422:../cleanflight/src/main/interface/cli.c ****                             default:
3423:../cleanflight/src/main/interface/cli.c ****                             case VAR_UINT8:
3424:../cleanflight/src/main/interface/cli.c ****                                 {
3425:../cleanflight/src/main/interface/cli.c ****                                     // fetch data pointer
3426:../cleanflight/src/main/interface/cli.c ****                                     uint8_t *data = (uint8_t *)cliGetValuePointer(val) + i;
 14580              	 .loc 13 3426 0
 14581 0252 B86A     	 ldr r0,[r7,#40]
 14582 0254 FFF7FEFF 	 bl cliGetValuePointer
 14583 0258 0246     	 mov r2,r0
 14584 025a BB6B     	 ldr r3,[r7,#56]
 14585 025c 1344     	 add r3,r3,r2
 14586 025e BB61     	 str r3,[r7,#24]
3427:../cleanflight/src/main/interface/cli.c ****                                     // store value
3428:../cleanflight/src/main/interface/cli.c ****                                     *data = (uint8_t)atoi((const char*) valPtr);
 14587              	 .loc 13 3428 0
 14588 0260 F86B     	 ldr r0,[r7,#60]
 14589 0262 FFF7FEFF 	 bl atoi
 14590 0266 0346     	 mov r3,r0
 14591 0268 DAB2     	 uxtb r2,r3
 14592 026a BB69     	 ldr r3,[r7,#24]
 14593 026c 1A70     	 strb r2,[r3]
 14594              	.LBE108:
3429:../cleanflight/src/main/interface/cli.c ****                                 }
3430:../cleanflight/src/main/interface/cli.c **** 
3431:../cleanflight/src/main/interface/cli.c ****                                 break;
 14595              	 .loc 13 3431 0
 14596 026e 39E0     	 b .L880
 14597              	.L879:
 14598              	.LBB109:
3432:../cleanflight/src/main/interface/cli.c ****                             case VAR_INT8:
3433:../cleanflight/src/main/interface/cli.c ****                                 {
3434:../cleanflight/src/main/interface/cli.c ****                                     // fetch data pointer
3435:../cleanflight/src/main/interface/cli.c ****                                     int8_t *data = (int8_t *)cliGetValuePointer(val) + i;
 14599              	 .loc 13 3435 0
 14600 0270 B86A     	 ldr r0,[r7,#40]
 14601 0272 FFF7FEFF 	 bl cliGetValuePointer
 14602 0276 0246     	 mov r2,r0
 14603 0278 BB6B     	 ldr r3,[r7,#56]
 14604 027a 1344     	 add r3,r3,r2
 14605 027c 7B61     	 str r3,[r7,#20]
3436:../cleanflight/src/main/interface/cli.c ****                                     // store value
3437:../cleanflight/src/main/interface/cli.c ****                                     *data = (int8_t)atoi((const char*) valPtr);
 14606              	 .loc 13 3437 0
 14607 027e F86B     	 ldr r0,[r7,#60]
 14608 0280 FFF7FEFF 	 bl atoi
 14609 0284 0346     	 mov r3,r0
 14610 0286 DAB2     	 uxtb r2,r3
 14611 0288 7B69     	 ldr r3,[r7,#20]
 14612 028a 1A70     	 strb r2,[r3]
 14613              	.LBE109:
3438:../cleanflight/src/main/interface/cli.c ****                                 }
3439:../cleanflight/src/main/interface/cli.c **** 
3440:../cleanflight/src/main/interface/cli.c ****                                 break;
 14614              	 .loc 13 3440 0
 14615 028c 2AE0     	 b .L880
 14616              	.L877:
 14617              	.LBB110:
3441:../cleanflight/src/main/interface/cli.c ****                             case VAR_UINT16:
3442:../cleanflight/src/main/interface/cli.c ****                                 {
3443:../cleanflight/src/main/interface/cli.c ****                                     // fetch data pointer
3444:../cleanflight/src/main/interface/cli.c ****                                     uint16_t *data = (uint16_t *)cliGetValuePointer(val) + i;
 14618              	 .loc 13 3444 0
 14619 028e B86A     	 ldr r0,[r7,#40]
 14620 0290 FFF7FEFF 	 bl cliGetValuePointer
 14621 0294 0246     	 mov r2,r0
 14622 0296 BB6B     	 ldr r3,[r7,#56]
 14623 0298 5B00     	 lsls r3,r3,#1
 14624 029a 1344     	 add r3,r3,r2
 14625 029c 3B61     	 str r3,[r7,#16]
3445:../cleanflight/src/main/interface/cli.c ****                                     // store value
3446:../cleanflight/src/main/interface/cli.c ****                                     *data = (uint16_t)atoi((const char*) valPtr);
 14626              	 .loc 13 3446 0
 14627 029e F86B     	 ldr r0,[r7,#60]
 14628 02a0 FFF7FEFF 	 bl atoi
 14629 02a4 0346     	 mov r3,r0
 14630 02a6 9AB2     	 uxth r2,r3
 14631 02a8 3B69     	 ldr r3,[r7,#16]
 14632 02aa 1A80     	 strh r2,[r3]
 14633              	.LBE110:
3447:../cleanflight/src/main/interface/cli.c ****                                 }
3448:../cleanflight/src/main/interface/cli.c **** 
3449:../cleanflight/src/main/interface/cli.c ****                                 break;
 14634              	 .loc 13 3449 0
 14635 02ac 1AE0     	 b .L880
 14636              	.L887:
 14637 02ae 00BF     	 .align 2
 14638              	.L886:
 14639 02b0 78090000 	 .word .LC171
 14640 02b4 00000000 	 .word valueTable
 14641 02b8 70090000 	 .word .LC170
 14642 02bc 00000000 	 .word valueTableEntryCount
 14643 02c0 00000000 	 .word lookupTables
 14644              	.L878:
 14645              	.LBB111:
3450:../cleanflight/src/main/interface/cli.c ****                             case VAR_INT16:
3451:../cleanflight/src/main/interface/cli.c ****                                 {
3452:../cleanflight/src/main/interface/cli.c ****                                     // fetch data pointer
3453:../cleanflight/src/main/interface/cli.c ****                                     int16_t *data = (int16_t *)cliGetValuePointer(val) + i;
 14646              	 .loc 13 3453 0
 14647 02c4 B86A     	 ldr r0,[r7,#40]
 14648 02c6 FFF7FEFF 	 bl cliGetValuePointer
 14649 02ca 0246     	 mov r2,r0
 14650 02cc BB6B     	 ldr r3,[r7,#56]
 14651 02ce 5B00     	 lsls r3,r3,#1
 14652 02d0 1344     	 add r3,r3,r2
 14653 02d2 FB60     	 str r3,[r7,#12]
3454:../cleanflight/src/main/interface/cli.c ****                                     // store value
3455:../cleanflight/src/main/interface/cli.c ****                                     *data = (int16_t)atoi((const char*) valPtr);
 14654              	 .loc 13 3455 0
 14655 02d4 F86B     	 ldr r0,[r7,#60]
 14656 02d6 FFF7FEFF 	 bl atoi
 14657 02da 0346     	 mov r3,r0
 14658 02dc 9AB2     	 uxth r2,r3
 14659 02de FB68     	 ldr r3,[r7,#12]
 14660 02e0 1A80     	 strh r2,[r3]
 14661              	.LBE111:
3456:../cleanflight/src/main/interface/cli.c ****                                 }
3457:../cleanflight/src/main/interface/cli.c **** 
3458:../cleanflight/src/main/interface/cli.c ****                                 break;
 14662              	 .loc 13 3458 0
 14663 02e2 00BF     	 nop
 14664              	.L880:
3459:../cleanflight/src/main/interface/cli.c ****                             }
3460:../cleanflight/src/main/interface/cli.c **** 
3461:../cleanflight/src/main/interface/cli.c ****                             // find next comma (or end of string)
3462:../cleanflight/src/main/interface/cli.c ****                             valPtr = strchr(valPtr, ',') + 1;
 14665              	 .loc 13 3462 0
 14666 02e4 F86B     	 ldr r0,[r7,#60]
 14667 02e6 2C21     	 movs r1,#44
 14668 02e8 FFF7FEFF 	 bl strchr
 14669 02ec 0346     	 mov r3,r0
 14670 02ee 0133     	 adds r3,r3,#1
 14671 02f0 FB63     	 str r3,[r7,#60]
3463:../cleanflight/src/main/interface/cli.c **** 
3464:../cleanflight/src/main/interface/cli.c ****                             i++;
 14672              	 .loc 13 3464 0
 14673 02f2 BB6B     	 ldr r3,[r7,#56]
 14674 02f4 0133     	 adds r3,r3,#1
 14675 02f6 BB63     	 str r3,[r7,#56]
 14676              	.L875:
3414:../cleanflight/src/main/interface/cli.c ****                             // skip spaces
 14677              	 .loc 13 3414 0
 14678 02f8 FA7F     	 ldrb r2,[r7,#31]
 14679 02fa BB6B     	 ldr r3,[r7,#56]
 14680 02fc 9A42     	 cmp r2,r3
 14681 02fe 02DD     	 ble .L881
3414:../cleanflight/src/main/interface/cli.c ****                             // skip spaces
 14682              	 .loc 13 3414 0 is_stmt 0 discriminator 1
 14683 0300 FB6B     	 ldr r3,[r7,#60]
 14684 0302 002B     	 cmp r3,#0
 14685 0304 97D1     	 bne .L882
 14686              	.L881:
 14687              	.LBE107:
3465:../cleanflight/src/main/interface/cli.c ****                         }
3466:../cleanflight/src/main/interface/cli.c ****                     }
3467:../cleanflight/src/main/interface/cli.c **** 
3468:../cleanflight/src/main/interface/cli.c ****                     // mark as changed
3469:../cleanflight/src/main/interface/cli.c ****                     valueChanged = true;
 14688              	 .loc 13 3469 0 is_stmt 1
 14689 0306 0123     	 movs r3,#1
 14690 0308 87F84F30 	 strb r3,[r7,#79]
3470:../cleanflight/src/main/interface/cli.c **** 
3471:../cleanflight/src/main/interface/cli.c ****                     break;
 14691              	 .loc 13 3471 0
 14692 030c 00BF     	 nop
 14693              	.L861:
3472:../cleanflight/src/main/interface/cli.c **** 
3473:../cleanflight/src/main/interface/cli.c ****                 }
3474:../cleanflight/src/main/interface/cli.c **** 
3475:../cleanflight/src/main/interface/cli.c ****                 if (valueChanged) {
 14694              	 .loc 13 3475 0
 14695 030e 97F84F30 	 ldrb r3,[r7,#79]
 14696 0312 002B     	 cmp r3,#0
 14697 0314 0AD0     	 beq .L883
3476:../cleanflight/src/main/interface/cli.c ****                     cliPrintf("%s set to ", val->name);
 14698              	 .loc 13 3476 0
 14699 0316 BB6A     	 ldr r3,[r7,#40]
 14700 0318 1B68     	 ldr r3,[r3]
 14701 031a 1248     	 ldr r0,.L888
 14702 031c 1946     	 mov r1,r3
 14703 031e FFF7FEFF 	 bl cliPrintf
3477:../cleanflight/src/main/interface/cli.c ****                     cliPrintVar(val, 0);
 14704              	 .loc 13 3477 0
 14705 0322 B86A     	 ldr r0,[r7,#40]
 14706 0324 0021     	 movs r1,#0
 14707 0326 FFF7FEFF 	 bl cliPrintVar
3478:../cleanflight/src/main/interface/cli.c ****                 } else {
3479:../cleanflight/src/main/interface/cli.c ****                     cliPrintErrorLinef("Invalid value");
3480:../cleanflight/src/main/interface/cli.c ****                     cliPrintVarRange(val);
3481:../cleanflight/src/main/interface/cli.c ****                 }
3482:../cleanflight/src/main/interface/cli.c **** 
3483:../cleanflight/src/main/interface/cli.c ****                 return;
 14708              	 .loc 13 3483 0
 14709 032a 17E0     	 b .L852
 14710              	.L883:
3479:../cleanflight/src/main/interface/cli.c ****                     cliPrintVarRange(val);
 14711              	 .loc 13 3479 0
 14712 032c 0E48     	 ldr r0,.L888+4
 14713 032e FFF7FEFF 	 bl cliPrintErrorLinef
3480:../cleanflight/src/main/interface/cli.c ****                 }
 14714              	 .loc 13 3480 0
 14715 0332 B86A     	 ldr r0,[r7,#40]
 14716 0334 FFF7FEFF 	 bl cliPrintVarRange
 14717              	 .loc 13 3483 0
 14718 0338 10E0     	 b .L852
 14719              	.L860:
 14720              	.LBE103:
 14721              	.LBE102:
3366:../cleanflight/src/main/interface/cli.c ****             const clivalue_t *val = &valueTable[i];
 14722              	 .loc 13 3366 0 discriminator 2
 14723 033a 3B6D     	 ldr r3,[r7,#80]
 14724 033c 0133     	 adds r3,r3,#1
 14725 033e 3B65     	 str r3,[r7,#80]
 14726              	.L859:
3366:../cleanflight/src/main/interface/cli.c ****             const clivalue_t *val = &valueTable[i];
 14727              	 .loc 13 3366 0 is_stmt 0 discriminator 1
 14728 0340 0A4B     	 ldr r3,.L888+8
 14729 0342 1B88     	 ldrh r3,[r3]
 14730 0344 1A46     	 mov r2,r3
 14731 0346 3B6D     	 ldr r3,[r7,#80]
 14732 0348 9A42     	 cmp r2,r3
 14733 034a 3FF6B7AE 	 bhi .L885
 14734              	.LBE101:
3484:../cleanflight/src/main/interface/cli.c ****             }
3485:../cleanflight/src/main/interface/cli.c ****         }
3486:../cleanflight/src/main/interface/cli.c ****         cliPrintErrorLinef("Invalid name");
 14735              	 .loc 13 3486 0 is_stmt 1
 14736 034e 0848     	 ldr r0,.L888+12
 14737 0350 FFF7FEFF 	 bl cliPrintErrorLinef
 14738              	.LBE100:
 14739 0354 02E0     	 b .L852
 14740              	.L858:
3487:../cleanflight/src/main/interface/cli.c ****     } else {
3488:../cleanflight/src/main/interface/cli.c ****         // no equals, check for matching variables.
3489:../cleanflight/src/main/interface/cli.c ****         cliGet(cmdline);
 14741              	 .loc 13 3489 0
 14742 0356 7868     	 ldr r0,[r7,#4]
 14743 0358 FFF7FEFF 	 bl cliGet
 14744              	.L852:
3490:../cleanflight/src/main/interface/cli.c ****     }
3491:../cleanflight/src/main/interface/cli.c **** }
 14745              	 .loc 13 3491 0
 14746 035c 5C37     	 adds r7,r7,#92
 14747              	.LCFI598:
 14748              	 .cfi_def_cfa_offset 12
 14749 035e BD46     	 mov sp,r7
 14750              	.LCFI599:
 14751              	 .cfi_def_cfa_register 13
 14752              	 
 14753 0360 90BD     	 pop {r4,r7,pc}
 14754              	.L889:
 14755 0362 00BF     	 .align 2
 14756              	.L888:
 14757 0364 8C090000 	 .word .LC172
 14758 0368 98090000 	 .word .LC173
 14759 036c 00000000 	 .word valueTableEntryCount
 14760 0370 E4040000 	 .word .LC100
 14761              	 .cfi_endproc
 14762              	.LFE778:
 14764              	 .section .rodata
 14765 09a6 0000     	 .align 2
 14766              	.LC174:
 14767 09a8 53797374 	 .ascii "System Uptime: %d seconds\000"
 14767      656D2055 
 14767      7074696D 
 14767      653A2025 
 14767      64207365 
 14768 09c2 0000     	 .align 2
 14769              	.LC175:
 14770 09c4 43757272 	 .ascii "Current Time: %s\000"
 14770      656E7420 
 14770      54696D65 
 14770      3A202573 
 14770      00
 14771 09d5 000000   	 .align 2
 14772              	.LC176:
 14773 09d8 566F6C74 	 .ascii "Voltage: %d * 0.1V (%dS battery - %s)\000"
 14773      6167653A 
 14773      20256420 
 14773      2A20302E 
 14773      31562028 
 14774 09fe 0000     	 .align 2
 14775              	.LC177:
 14776 0a00 43505520 	 .ascii "CPU Clock=%dMHz\000"
 14776      436C6F63 
 14776      6B3D2564 
 14776      4D487A00 
 14777              	 .align 2
 14778              	.LC178:
 14779 0a10 2C202573 	 .ascii ", %s=%s\000"
 14779      3D257300 
 14780              	 .align 2
 14781              	.LC179:
 14782 0a18 2E256300 	 .ascii ".%c\000"
 14783              	 .align 2
 14784              	.LC180:
 14785 0a1c 53746163 	 .ascii "Stack size: %d, Stack address: 0x%x\000"
 14785      6B207369 
 14785      7A653A20 
 14785      25642C20 
 14785      53746163 
 14786              	 .align 2
 14787              	.LC181:
 14788 0a40 49324320 	 .ascii "I2C Errors: %d, config size: %d, max available conf"
 14788      4572726F 
 14788      72733A20 
 14788      25642C20 
 14788      636F6E66 
 14789 0a73 69673A20 	 .ascii "ig: %d\000"
 14789      256400
 14790 0a7a 0000     	 .align 2
 14791              	.LC182:
 14792 0a7c 4350553A 	 .ascii "CPU:%d%%, cycle time: %d, GYRO rate: %d, RX rate: %"
 14792      25642525 
 14792      2C206379 
 14792      636C6520 
 14792      74696D65 
 14793 0aaf 642C2053 	 .ascii "d, System rate: %d\000"
 14793      79737465 
 14793      6D207261 
 14793      74653A20 
 14793      256400
 14794 0ac2 0000     	 .align 2
 14795              	.LC183:
 14796 0ac4 41726D69 	 .ascii "Arming disable flags:\000"
 14796      6E672064 
 14796      69736162 
 14796      6C652066 
 14796      6C616773 
 14797              	 .section .text.cliStatus,"ax",%progbits
 14798              	 .align 2
 14799              	 .thumb
 14800              	 .thumb_func
 14802              	cliStatus:
 14803              	.LFB779:
3492:../cleanflight/src/main/interface/cli.c **** 
3493:../cleanflight/src/main/interface/cli.c **** static void cliStatus(char *cmdline)
3494:../cleanflight/src/main/interface/cli.c **** {
 14804              	 .loc 13 3494 0
 14805              	 .cfi_startproc
 14806              	 
 14807              	 
 14808 0000 B0B5     	 push {r4,r5,r7,lr}
 14809              	.LCFI600:
 14810              	 .cfi_def_cfa_offset 16
 14811              	 .cfi_offset 4,-16
 14812              	 .cfi_offset 5,-12
 14813              	 .cfi_offset 7,-8
 14814              	 .cfi_offset 14,-4
 14815 0002 9AB0     	 sub sp,sp,#104
 14816              	.LCFI601:
 14817              	 .cfi_def_cfa_offset 120
 14818 0004 02AF     	 add r7,sp,#8
 14819              	.LCFI602:
 14820              	 .cfi_def_cfa 7,112
 14821 0006 7860     	 str r0,[r7,#4]
3495:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
3496:../cleanflight/src/main/interface/cli.c **** 
3497:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("System Uptime: %d seconds", millis() / 1000);
 14822              	 .loc 13 3497 0
 14823 0008 FFF7FEFF 	 bl millis
 14824 000c 0246     	 mov r2,r0
 14825 000e 914B     	 ldr r3,.L905
 14826 0010 A3FB0223 	 umull r2,r3,r3,r2
 14827 0014 9B09     	 lsrs r3,r3,#6
 14828 0016 9048     	 ldr r0,.L905+4
 14829 0018 1946     	 mov r1,r3
 14830 001a FFF7FEFF 	 bl cliPrintLinef
3498:../cleanflight/src/main/interface/cli.c **** 
3499:../cleanflight/src/main/interface/cli.c ****     #ifdef USE_RTC_TIME
3500:../cleanflight/src/main/interface/cli.c ****     char buf[FORMATTED_DATE_TIME_BUFSIZE];
3501:../cleanflight/src/main/interface/cli.c ****     dateTime_t dt;
3502:../cleanflight/src/main/interface/cli.c ****     if (rtcGetDateTime(&dt)) {
 14831              	 .loc 13 3502 0
 14832 001e 07F10803 	 add r3,r7,#8
 14833 0022 1846     	 mov r0,r3
 14834 0024 FFF7FEFF 	 bl rtcGetDateTime
 14835 0028 0346     	 mov r3,r0
 14836 002a 002B     	 cmp r3,#0
 14837 002c 0DD0     	 beq .L891
3503:../cleanflight/src/main/interface/cli.c ****         dateTimeFormatLocal(buf, &dt);
 14838              	 .loc 13 3503 0
 14839 002e 07F11402 	 add r2,r7,#20
 14840 0032 07F10803 	 add r3,r7,#8
 14841 0036 1046     	 mov r0,r2
 14842 0038 1946     	 mov r1,r3
 14843 003a FFF7FEFF 	 bl dateTimeFormatLocal
3504:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Current Time: %s", buf);
 14844              	 .loc 13 3504 0
 14845 003e 07F11403 	 add r3,r7,#20
 14846 0042 8648     	 ldr r0,.L905+8
 14847 0044 1946     	 mov r1,r3
 14848 0046 FFF7FEFF 	 bl cliPrintLinef
 14849              	.L891:
3505:../cleanflight/src/main/interface/cli.c ****     }
3506:../cleanflight/src/main/interface/cli.c ****     #endif
3507:../cleanflight/src/main/interface/cli.c **** 
3508:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("Voltage: %d * 0.1V (%dS battery - %s)", getBatteryVoltage(), getBatteryCellCount
 14850              	 .loc 13 3508 0
 14851 004a FFF7FEFF 	 bl getBatteryVoltage
 14852 004e 0346     	 mov r3,r0
 14853 0050 1D46     	 mov r5,r3
 14854 0052 FFF7FEFF 	 bl getBatteryCellCount
 14855 0056 0346     	 mov r3,r0
 14856 0058 1C46     	 mov r4,r3
 14857 005a FFF7FEFF 	 bl getBatteryStateString
 14858 005e 0346     	 mov r3,r0
 14859 0060 7F48     	 ldr r0,.L905+12
 14860 0062 2946     	 mov r1,r5
 14861 0064 2246     	 mov r2,r4
 14862 0066 FFF7FEFF 	 bl cliPrintLinef
3509:../cleanflight/src/main/interface/cli.c **** 
3510:../cleanflight/src/main/interface/cli.c ****     cliPrintf("CPU Clock=%dMHz", (SystemCoreClock / 1000000));
 14863              	 .loc 13 3510 0
 14864 006a 7E4B     	 ldr r3,.L905+16
 14865 006c 1B68     	 ldr r3,[r3]
 14866 006e 7E4A     	 ldr r2,.L905+20
 14867 0070 A2FB0323 	 umull r2,r3,r2,r3
 14868 0074 9B0C     	 lsrs r3,r3,#18
 14869 0076 7D48     	 ldr r0,.L905+24
 14870 0078 1946     	 mov r1,r3
 14871 007a FFF7FEFF 	 bl cliPrintf
3511:../cleanflight/src/main/interface/cli.c **** 
3512:../cleanflight/src/main/interface/cli.c **** #ifdef USE_ADC_INTERNAL
3513:../cleanflight/src/main/interface/cli.c ****     uint16_t vrefintMv = getVrefMv();
3514:../cleanflight/src/main/interface/cli.c ****     int16_t coretemp = getCoreTemperatureCelsius();
3515:../cleanflight/src/main/interface/cli.c ****     cliPrintf(", Vref=%d.%2dV, Core temp=%ddegC", vrefintMv / 1000, (vrefintMv % 1000) / 10, corete
3516:../cleanflight/src/main/interface/cli.c **** #endif
3517:../cleanflight/src/main/interface/cli.c **** 
3518:../cleanflight/src/main/interface/cli.c **** #if defined(USE_SENSOR_NAMES)
3519:../cleanflight/src/main/interface/cli.c ****     const uint32_t detectedSensorsMask = sensorsMask();
 14872              	 .loc 13 3519 0
 14873 007e FFF7FEFF 	 bl sensorsMask
 14874 0082 7865     	 str r0,[r7,#84]
 14875              	.LBB112:
3520:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; ; i++) {
 14876              	 .loc 13 3520 0
 14877 0084 0023     	 movs r3,#0
 14878 0086 FB65     	 str r3,[r7,#92]
 14879              	.L895:
 14880              	.LBB113:
3521:../cleanflight/src/main/interface/cli.c ****         if (sensorTypeNames[i] == NULL) {
 14881              	 .loc 13 3521 0
 14882 0088 794A     	 ldr r2,.L905+28
 14883 008a FB6D     	 ldr r3,[r7,#92]
 14884 008c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 14885 0090 002B     	 cmp r3,#0
 14886 0092 2AD1     	 bne .L892
3522:../cleanflight/src/main/interface/cli.c ****             break;
 14887              	 .loc 13 3522 0
 14888 0094 00BF     	 nop
 14889              	.LBE113:
 14890              	.LBE112:
3523:../cleanflight/src/main/interface/cli.c ****         }
3524:../cleanflight/src/main/interface/cli.c ****         const uint32_t mask = (1 << i);
3525:../cleanflight/src/main/interface/cli.c ****         if ((detectedSensorsMask & mask) && (mask & SENSOR_NAMES_MASK)) {
3526:../cleanflight/src/main/interface/cli.c ****             const uint8_t sensorHardwareIndex = detectedSensors[i];
3527:../cleanflight/src/main/interface/cli.c ****             const char *sensorHardware = sensorHardwareNames[i][sensorHardwareIndex];
3528:../cleanflight/src/main/interface/cli.c ****             cliPrintf(", %s=%s", sensorTypeNames[i], sensorHardware);
3529:../cleanflight/src/main/interface/cli.c ****             if (mask == SENSOR_ACC && acc.dev.revisionCode) {
3530:../cleanflight/src/main/interface/cli.c ****                 cliPrintf(".%c", acc.dev.revisionCode);
3531:../cleanflight/src/main/interface/cli.c ****             }
3532:../cleanflight/src/main/interface/cli.c ****         }
3533:../cleanflight/src/main/interface/cli.c ****     }
3534:../cleanflight/src/main/interface/cli.c **** #endif /* USE_SENSOR_NAMES */
3535:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 14891              	 .loc 13 3535 0
 14892 0096 FFF7FEFF 	 bl cliPrintLinefeed
3536:../cleanflight/src/main/interface/cli.c **** 
3537:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SDCARD
3538:../cleanflight/src/main/interface/cli.c ****     cliSdInfo(NULL);
 14893              	 .loc 13 3538 0
 14894 009a 0020     	 movs r0,#0
 14895 009c FFF7FEFF 	 bl cliSdInfo
3539:../cleanflight/src/main/interface/cli.c **** #endif
3540:../cleanflight/src/main/interface/cli.c **** 
3541:../cleanflight/src/main/interface/cli.c **** #ifdef USE_I2C
3542:../cleanflight/src/main/interface/cli.c ****     const uint16_t i2cErrorCounter = i2cGetErrorCounter();
 14896              	 .loc 13 3542 0
 14897 00a0 FFF7FEFF 	 bl i2cGetErrorCounter
 14898 00a4 0346     	 mov r3,r0
 14899 00a6 A7F84630 	 strh r3,[r7,#70]
3543:../cleanflight/src/main/interface/cli.c **** #else
3544:../cleanflight/src/main/interface/cli.c ****     const uint16_t i2cErrorCounter = 0;
3545:../cleanflight/src/main/interface/cli.c **** #endif
3546:../cleanflight/src/main/interface/cli.c **** 
3547:../cleanflight/src/main/interface/cli.c **** #ifdef STACK_CHECK
3548:../cleanflight/src/main/interface/cli.c ****     cliPrintf("Stack used: %d, ", stackUsedSize());
3549:../cleanflight/src/main/interface/cli.c **** #endif
3550:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("Stack size: %d, Stack address: 0x%x", stackTotalSize(), stackHighMem());
 14900              	 .loc 13 3550 0
 14901 00aa FFF7FEFF 	 bl stackTotalSize
 14902 00ae 0446     	 mov r4,r0
 14903 00b0 FFF7FEFF 	 bl stackHighMem
 14904 00b4 0346     	 mov r3,r0
 14905 00b6 6F48     	 ldr r0,.L905+32
 14906 00b8 2146     	 mov r1,r4
 14907 00ba 1A46     	 mov r2,r3
 14908 00bc FFF7FEFF 	 bl cliPrintLinef
3551:../cleanflight/src/main/interface/cli.c **** #ifdef EEPROM_IN_RAM
3552:../cleanflight/src/main/interface/cli.c **** #define CONFIG_SIZE EEPROM_SIZE
3553:../cleanflight/src/main/interface/cli.c **** #else
3554:../cleanflight/src/main/interface/cli.c **** #define CONFIG_SIZE (&__config_end - &__config_start)
3555:../cleanflight/src/main/interface/cli.c **** #endif
3556:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("I2C Errors: %d, config size: %d, max available config: %d", i2cErrorCounter, get
 14909              	 .loc 13 3556 0
 14910 00c0 B7F84640 	 ldrh r4,[r7,#70]
 14911 00c4 FFF7FEFF 	 bl getEEPROMConfigSize
 14912 00c8 0346     	 mov r3,r0
 14913 00ca 1D46     	 mov r5,r3
 14914 00cc 6A4A     	 ldr r2,.L905+36
 14915 00ce 6B4B     	 ldr r3,.L905+40
 14916 00d0 D31A     	 subs r3,r2,r3
 14917 00d2 6B48     	 ldr r0,.L905+44
 14918 00d4 2146     	 mov r1,r4
 14919 00d6 2A46     	 mov r2,r5
 14920 00d8 FFF7FEFF 	 bl cliPrintLinef
3557:../cleanflight/src/main/interface/cli.c **** 
3558:../cleanflight/src/main/interface/cli.c ****     const int gyroRate = getTaskDeltaTime(TASK_GYROPID) == 0 ? 0 : (int)(1000000.0f / ((float)getTa
 14921              	 .loc 13 3558 0
 14922 00dc 0220     	 movs r0,#2
 14923 00de FFF7FEFF 	 bl getTaskDeltaTime
 14924 00e2 0346     	 mov r3,r0
 14925 00e4 002B     	 cmp r3,#0
 14926 00e6 49D0     	 beq .L896
 14927 00e8 38E0     	 b .L904
 14928              	.L892:
 14929              	.LBB116:
 14930              	.LBB115:
3524:../cleanflight/src/main/interface/cli.c ****         if ((detectedSensorsMask & mask) && (mask & SENSOR_NAMES_MASK)) {
 14931              	 .loc 13 3524 0
 14932 00ea FB6D     	 ldr r3,[r7,#92]
 14933 00ec 0122     	 movs r2,#1
 14934 00ee 02FA03F3 	 lsl r3,r2,r3
 14935 00f2 3B65     	 str r3,[r7,#80]
3525:../cleanflight/src/main/interface/cli.c ****             const uint8_t sensorHardwareIndex = detectedSensors[i];
 14936              	 .loc 13 3525 0
 14937 00f4 7A6D     	 ldr r2,[r7,#84]
 14938 00f6 3B6D     	 ldr r3,[r7,#80]
 14939 00f8 1340     	 ands r3,r3,r2
 14940 00fa 002B     	 cmp r3,#0
 14941 00fc 2AD0     	 beq .L894
3525:../cleanflight/src/main/interface/cli.c ****             const uint8_t sensorHardwareIndex = detectedSensors[i];
 14942              	 .loc 13 3525 0 is_stmt 0 discriminator 1
 14943 00fe 3B6D     	 ldr r3,[r7,#80]
 14944 0100 03F01F03 	 and r3,r3,#31
 14945 0104 002B     	 cmp r3,#0
 14946 0106 25D0     	 beq .L894
 14947              	.LBB114:
3526:../cleanflight/src/main/interface/cli.c ****             const char *sensorHardware = sensorHardwareNames[i][sensorHardwareIndex];
 14948              	 .loc 13 3526 0 is_stmt 1
 14949 0108 5E4A     	 ldr r2,.L905+48
 14950 010a FB6D     	 ldr r3,[r7,#92]
 14951 010c 1344     	 add r3,r3,r2
 14952 010e 1B78     	 ldrb r3,[r3]
 14953 0110 87F84F30 	 strb r3,[r7,#79]
3527:../cleanflight/src/main/interface/cli.c ****             cliPrintf(", %s=%s", sensorTypeNames[i], sensorHardware);
 14954              	 .loc 13 3527 0
 14955 0114 5C4A     	 ldr r2,.L905+52
 14956 0116 FB6D     	 ldr r3,[r7,#92]
 14957 0118 52F82320 	 ldr r2,[r2,r3,lsl#2]
 14958 011c 97F84F30 	 ldrb r3,[r7,#79]
 14959 0120 9B00     	 lsls r3,r3,#2
 14960 0122 1344     	 add r3,r3,r2
 14961 0124 1B68     	 ldr r3,[r3]
 14962 0126 BB64     	 str r3,[r7,#72]
3528:../cleanflight/src/main/interface/cli.c ****             if (mask == SENSOR_ACC && acc.dev.revisionCode) {
 14963              	 .loc 13 3528 0
 14964 0128 514A     	 ldr r2,.L905+28
 14965 012a FB6D     	 ldr r3,[r7,#92]
 14966 012c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 14967 0130 5648     	 ldr r0,.L905+56
 14968 0132 1946     	 mov r1,r3
 14969 0134 BA6C     	 ldr r2,[r7,#72]
 14970 0136 FFF7FEFF 	 bl cliPrintf
3529:../cleanflight/src/main/interface/cli.c ****                 cliPrintf(".%c", acc.dev.revisionCode);
 14971              	 .loc 13 3529 0
 14972 013a 3B6D     	 ldr r3,[r7,#80]
 14973 013c 022B     	 cmp r3,#2
 14974 013e 09D1     	 bne .L894
3529:../cleanflight/src/main/interface/cli.c ****                 cliPrintf(".%c", acc.dev.revisionCode);
 14975              	 .loc 13 3529 0 is_stmt 0 discriminator 1
 14976 0140 534B     	 ldr r3,.L905+60
 14977 0142 9B7F     	 ldrb r3,[r3,#30]
 14978 0144 002B     	 cmp r3,#0
 14979 0146 05D0     	 beq .L894
3530:../cleanflight/src/main/interface/cli.c ****             }
 14980              	 .loc 13 3530 0 is_stmt 1
 14981 0148 514B     	 ldr r3,.L905+60
 14982 014a 9B7F     	 ldrb r3,[r3,#30]
 14983 014c 5148     	 ldr r0,.L905+64
 14984 014e 1946     	 mov r1,r3
 14985 0150 FFF7FEFF 	 bl cliPrintf
 14986              	.L894:
 14987              	.LBE114:
 14988              	.LBE115:
3520:../cleanflight/src/main/interface/cli.c ****         if (sensorTypeNames[i] == NULL) {
 14989              	 .loc 13 3520 0
 14990 0154 FB6D     	 ldr r3,[r7,#92]
 14991 0156 0133     	 adds r3,r3,#1
 14992 0158 FB65     	 str r3,[r7,#92]
3533:../cleanflight/src/main/interface/cli.c **** #endif /* USE_SENSOR_NAMES */
 14993              	 .loc 13 3533 0
 14994 015a 95E7     	 b .L895
 14995              	.L904:
 14996              	.LBE116:
 14997              	 .loc 13 3558 0 discriminator 1
 14998 015c 0220     	 movs r0,#2
 14999 015e FFF7FEFF 	 bl getTaskDeltaTime
 15000 0162 07EE900A 	 fmsr s15,r0
 15001 0166 F8EEE77A 	 fsitos s15,s15
 15002 016a 9FED4B7A 	 flds s14,.L905+68
 15003 016e C7EE277A 	 fdivs s15,s14,s15
 15004 0172 FDEEE77A 	 ftosizs s15,s15
 15005 0176 17EE903A 	 fmrs r3,s15
 15006 017a 00E0     	 b .L897
 15007              	.L896:
 15008              	 .loc 13 3558 0 is_stmt 0 discriminator 2
 15009 017c 0023     	 movs r3,#0
 15010              	.L897:
 15011              	 .loc 13 3558 0 discriminator 4
 15012 017e 3B64     	 str r3,[r7,#64]
3559:../cleanflight/src/main/interface/cli.c ****     const int rxRate = currentRxRefreshRate == 0 ? 0 : (int)(1000000.0f / ((float)currentRxRefreshR
 15013              	 .loc 13 3559 0 is_stmt 1 discriminator 4
 15014 0180 464B     	 ldr r3,.L905+72
 15015 0182 1B88     	 ldrh r3,[r3]
 15016 0184 002B     	 cmp r3,#0
 15017 0186 0ED0     	 beq .L898
 15018              	 .loc 13 3559 0 is_stmt 0 discriminator 1
 15019 0188 444B     	 ldr r3,.L905+72
 15020 018a 1B88     	 ldrh r3,[r3]
 15021 018c 07EE903A 	 fmsr s15,r3
 15022 0190 F8EE677A 	 fuitos s15,s15
 15023 0194 9FED407A 	 flds s14,.L905+68
 15024 0198 C7EE277A 	 fdivs s15,s14,s15
 15025 019c FDEEE77A 	 ftosizs s15,s15
 15026 01a0 17EE903A 	 fmrs r3,s15
 15027 01a4 00E0     	 b .L899
 15028              	.L898:
 15029              	 .loc 13 3559 0 discriminator 2
 15030 01a6 0023     	 movs r3,#0
 15031              	.L899:
 15032              	 .loc 13 3559 0 discriminator 4
 15033 01a8 FB63     	 str r3,[r7,#60]
3560:../cleanflight/src/main/interface/cli.c ****     const int systemRate = getTaskDeltaTime(TASK_SYSTEM) == 0 ? 0 : (int)(1000000.0f / ((float)getT
 15034              	 .loc 13 3560 0 is_stmt 1 discriminator 4
 15035 01aa 0020     	 movs r0,#0
 15036 01ac FFF7FEFF 	 bl getTaskDeltaTime
 15037 01b0 0346     	 mov r3,r0
 15038 01b2 002B     	 cmp r3,#0
 15039 01b4 0FD0     	 beq .L900
 15040              	 .loc 13 3560 0 is_stmt 0 discriminator 1
 15041 01b6 0020     	 movs r0,#0
 15042 01b8 FFF7FEFF 	 bl getTaskDeltaTime
 15043 01bc 07EE900A 	 fmsr s15,r0
 15044 01c0 F8EEE77A 	 fsitos s15,s15
 15045 01c4 9FED347A 	 flds s14,.L905+68
 15046 01c8 C7EE277A 	 fdivs s15,s14,s15
 15047 01cc FDEEE77A 	 ftosizs s15,s15
 15048 01d0 17EE903A 	 fmrs r3,s15
 15049 01d4 00E0     	 b .L901
 15050              	.L900:
 15051              	 .loc 13 3560 0 discriminator 2
 15052 01d6 0023     	 movs r3,#0
 15053              	.L901:
 15054              	 .loc 13 3560 0 discriminator 4
 15055 01d8 BB63     	 str r3,[r7,#56]
3561:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("CPU:%d%%, cycle time: %d, GYRO rate: %d, RX rate: %d, System rate: %d",
 15056              	 .loc 13 3561 0 is_stmt 1 discriminator 4
 15057 01da 314B     	 ldr r3,.L905+76
 15058 01dc 1B88     	 ldrh r3,[r3]
 15059 01de 1846     	 mov r0,r3
 15060 01e0 0021     	 movs r1,#0
 15061 01e2 6422     	 movs r2,#100
 15062 01e4 FFF7FEFF 	 bl constrain
 15063 01e8 0446     	 mov r4,r0
 15064 01ea 0220     	 movs r0,#2
 15065 01ec FFF7FEFF 	 bl getTaskDeltaTime
 15066 01f0 0246     	 mov r2,r0
 15067 01f2 FB6B     	 ldr r3,[r7,#60]
 15068 01f4 0093     	 str r3,[sp]
 15069 01f6 BB6B     	 ldr r3,[r7,#56]
 15070 01f8 0193     	 str r3,[sp,#4]
 15071 01fa 2A48     	 ldr r0,.L905+80
 15072 01fc 2146     	 mov r1,r4
 15073 01fe 3B6C     	 ldr r3,[r7,#64]
 15074 0200 FFF7FEFF 	 bl cliPrintLinef
3562:../cleanflight/src/main/interface/cli.c ****             constrain(averageSystemLoadPercent, 0, 100), getTaskDeltaTime(TASK_GYROPID), gyroRate, 
3563:../cleanflight/src/main/interface/cli.c ****     cliPrint("Arming disable flags:");
 15075              	 .loc 13 3563 0 discriminator 4
 15076 0204 2848     	 ldr r0,.L905+84
 15077 0206 FFF7FEFF 	 bl cliPrint
3564:../cleanflight/src/main/interface/cli.c ****     armingDisableFlags_e flags = getArmingDisableFlags();
 15078              	 .loc 13 3564 0 discriminator 4
 15079 020a FFF7FEFF 	 bl getArmingDisableFlags
 15080 020e B865     	 str r0,[r7,#88]
3565:../cleanflight/src/main/interface/cli.c ****     while (flags) {
 15081              	 .loc 13 3565 0 discriminator 4
 15082 0210 17E0     	 b .L902
 15083              	.L903:
 15084              	.LBB117:
3566:../cleanflight/src/main/interface/cli.c ****         const int bitpos = ffs(flags) - 1;
 15085              	 .loc 13 3566 0
 15086 0212 BB6D     	 ldr r3,[r7,#88]
 15087 0214 1846     	 mov r0,r3
 15088 0216 FFF7FEFF 	 bl ffs
 15089 021a 0346     	 mov r3,r0
 15090 021c 013B     	 subs r3,r3,#1
 15091 021e 7B63     	 str r3,[r7,#52]
3567:../cleanflight/src/main/interface/cli.c ****         flags &= ~(1 << bitpos);
 15092              	 .loc 13 3567 0
 15093 0220 0122     	 movs r2,#1
 15094 0222 7B6B     	 ldr r3,[r7,#52]
 15095 0224 02FA03F3 	 lsl r3,r2,r3
 15096 0228 DB43     	 mvns r3,r3
 15097 022a 1A46     	 mov r2,r3
 15098 022c BB6D     	 ldr r3,[r7,#88]
 15099 022e 1340     	 ands r3,r3,r2
 15100 0230 BB65     	 str r3,[r7,#88]
3568:../cleanflight/src/main/interface/cli.c ****         cliPrintf(" %s", armingDisableFlagNames[bitpos]);
 15101              	 .loc 13 3568 0
 15102 0232 1E4A     	 ldr r2,.L905+88
 15103 0234 7B6B     	 ldr r3,[r7,#52]
 15104 0236 52F82330 	 ldr r3,[r2,r3,lsl#2]
 15105 023a 1D48     	 ldr r0,.L905+92
 15106 023c 1946     	 mov r1,r3
 15107 023e FFF7FEFF 	 bl cliPrintf
 15108              	.L902:
 15109              	.LBE117:
3565:../cleanflight/src/main/interface/cli.c ****         const int bitpos = ffs(flags) - 1;
 15110              	 .loc 13 3565 0
 15111 0242 BB6D     	 ldr r3,[r7,#88]
 15112 0244 002B     	 cmp r3,#0
 15113 0246 E4D1     	 bne .L903
3569:../cleanflight/src/main/interface/cli.c ****     }
3570:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 15114              	 .loc 13 3570 0
 15115 0248 FFF7FEFF 	 bl cliPrintLinefeed
3571:../cleanflight/src/main/interface/cli.c **** }
 15116              	 .loc 13 3571 0
 15117 024c 6037     	 adds r7,r7,#96
 15118              	.LCFI603:
 15119              	 .cfi_def_cfa_offset 16
 15120 024e BD46     	 mov sp,r7
 15121              	.LCFI604:
 15122              	 .cfi_def_cfa_register 13
 15123              	 
 15124 0250 B0BD     	 pop {r4,r5,r7,pc}
 15125              	.L906:
 15126 0252 00BF     	 .align 2
 15127              	.L905:
 15128 0254 D34D6210 	 .word 274877907
 15129 0258 A8090000 	 .word .LC174
 15130 025c C4090000 	 .word .LC175
 15131 0260 D8090000 	 .word .LC176
 15132 0264 00000000 	 .word SystemCoreClock
 15133 0268 83DE1B43 	 .word 1125899907
 15134 026c 000A0000 	 .word .LC177
 15135 0270 00000000 	 .word sensorTypeNames
 15136 0274 1C0A0000 	 .word .LC180
 15137 0278 00000000 	 .word __config_end
 15138 027c 00000000 	 .word __config_start
 15139 0280 400A0000 	 .word .LC181
 15140 0284 00000000 	 .word detectedSensors
 15141 0288 00000000 	 .word sensorHardwareNames
 15142 028c 100A0000 	 .word .LC178
 15143 0290 00000000 	 .word acc
 15144 0294 180A0000 	 .word .LC179
 15145 0298 00247449 	 .word 1232348160
 15146 029c 00000000 	 .word currentRxRefreshRate
 15147 02a0 00000000 	 .word averageSystemLoadPercent
 15148 02a4 7C0A0000 	 .word .LC182
 15149 02a8 C40A0000 	 .word .LC183
 15150 02ac 00000000 	 .word armingDisableFlagNames
 15151 02b0 84070000 	 .word .LC141
 15152              	 .cfi_endproc
 15153              	.LFE779:
 15155              	 .section .rodata
 15156 0ada 0000     	 .align 2
 15157              	.LC184:
 15158 0adc 5461736B 	 .ascii "Task list             rate/hz  max/us  avg/us maxlo"
 15158      206C6973 
 15158      74202020 
 15158      20202020 
 15158      20202020 
 15159 0b0f 61642061 	 .ascii "ad avgload     total/ms\000"
 15159      76676C6F 
 15159      61642020 
 15159      20202074 
 15159      6F74616C 
 15160 0b27 00       	 .align 2
 15161              	.LC185:
 15162 0b28 5461736B 	 .ascii "Task list\000"
 15162      206C6973 
 15162      7400
 15163 0b32 0000     	 .align 2
 15164              	.LC186:
 15165 0b34 25303264 	 .ascii "%02d - (%15s) \000"
 15165      202D2028 
 15165      25313573 
 15165      292000
 15166 0b43 00       	 .align 2
 15167              	.LC187:
 15168 0b44 25303264 	 .ascii "%02d - (%11s/%3s) \000"
 15168      202D2028 
 15168      25313173 
 15168      2F253373 
 15168      292000
 15169 0b57 00       	 .align 2
 15170              	.LC188:
 15171 0b58 25366420 	 .ascii "%6d %7d %7d %4d.%1d%% %4d.%1d%% %9d\000"
 15171      25376420 
 15171      25376420 
 15171      2534642E 
 15171      25316425 
 15172              	 .align 2
 15173              	.LC189:
 15174 0b7c 25366400 	 .ascii "%6d\000"
 15175              	 .align 2
 15176              	.LC190:
 15177 0b80 2020202D 	 .ascii "   - (%15s) %6d\000"
 15177      20282531 
 15177      35732920 
 15177      25366400 
 15178              	 .align 2
 15179              	.LC191:
 15180 0b90 52582043 	 .ascii "RX Check Function %19d %7d %25d\000"
 15180      6865636B 
 15180      2046756E 
 15180      6374696F 
 15180      6E202531 
 15181              	 .align 2
 15182              	.LC192:
 15183 0bb0 546F7461 	 .ascii "Total (excluding SERIAL) %25d.%1d%% %4d.%1d%%\000"
 15183      6C202865 
 15183      78636C75 
 15183      64696E67 
 15183      20534552 
 15184              	 .section .text.cliTasks,"ax",%progbits
 15185              	 .align 2
 15186              	 .thumb
 15187              	 .thumb_func
 15189              	cliTasks:
 15190              	.LFB780:
3572:../cleanflight/src/main/interface/cli.c **** 
3573:../cleanflight/src/main/interface/cli.c **** #ifndef SKIP_TASK_STATISTICS
3574:../cleanflight/src/main/interface/cli.c **** static void cliTasks(char *cmdline)
3575:../cleanflight/src/main/interface/cli.c **** {
 15191              	 .loc 13 3575 0
 15192              	 .cfi_startproc
 15193              	 
 15194              	 
 15195 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 15196              	.LCFI605:
 15197              	 .cfi_def_cfa_offset 20
 15198              	 .cfi_offset 4,-20
 15199              	 .cfi_offset 5,-16
 15200              	 .cfi_offset 6,-12
 15201              	 .cfi_offset 7,-8
 15202              	 .cfi_offset 14,-4
 15203 0002 9BB0     	 sub sp,sp,#108
 15204              	.LCFI606:
 15205              	 .cfi_def_cfa_offset 128
 15206 0004 06AF     	 add r7,sp,#24
 15207              	.LCFI607:
 15208              	 .cfi_def_cfa 7,104
 15209 0006 7860     	 str r0,[r7,#4]
3576:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
3577:../cleanflight/src/main/interface/cli.c ****     int maxLoadSum = 0;
 15210              	 .loc 13 3577 0
 15211 0008 0023     	 movs r3,#0
 15212 000a FB64     	 str r3,[r7,#76]
3578:../cleanflight/src/main/interface/cli.c ****     int averageLoadSum = 0;
 15213              	 .loc 13 3578 0
 15214 000c 0023     	 movs r3,#0
 15215 000e BB64     	 str r3,[r7,#72]
3579:../cleanflight/src/main/interface/cli.c **** 
3580:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
3581:../cleanflight/src/main/interface/cli.c ****     if (systemConfig()->task_statistics) {
 15216              	 .loc 13 3581 0
 15217 0010 FFF7FEFF 	 bl systemConfig
 15218 0014 0346     	 mov r3,r0
 15219 0016 DB78     	 ldrb r3,[r3,#3]
 15220 0018 002B     	 cmp r3,#0
 15221 001a 03D0     	 beq .L908
3582:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("Task list             rate/hz  max/us  avg/us maxload avgload     total/ms");
 15222              	 .loc 13 3582 0
 15223 001c A648     	 ldr r0,.L930
 15224 001e FFF7FEFF 	 bl cliPrintLine
 15225 0022 02E0     	 b .L909
 15226              	.L908:
3583:../cleanflight/src/main/interface/cli.c ****     } else {
3584:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("Task list");
 15227              	 .loc 13 3584 0
 15228 0024 A548     	 ldr r0,.L930+4
 15229 0026 FFF7FEFF 	 bl cliPrintLine
 15230              	.L909:
 15231              	.LBB118:
3585:../cleanflight/src/main/interface/cli.c ****     }
3586:../cleanflight/src/main/interface/cli.c **** #endif
3587:../cleanflight/src/main/interface/cli.c ****     for (cfTaskId_e taskId = 0; taskId < TASK_COUNT; taskId++) {
 15232              	 .loc 13 3587 0
 15233 002a 0023     	 movs r3,#0
 15234 002c 87F84730 	 strb r3,[r7,#71]
 15235 0030 F7E0     	 b .L910
 15236              	.L928:
 15237              	.LBB119:
3588:../cleanflight/src/main/interface/cli.c ****         cfTaskInfo_t taskInfo;
3589:../cleanflight/src/main/interface/cli.c ****         getTaskInfo(taskId, &taskInfo);
 15238              	 .loc 13 3589 0
 15239 0032 97F84720 	 ldrb r2,[r7,#71]
 15240 0036 07F11403 	 add r3,r7,#20
 15241 003a 1046     	 mov r0,r2
 15242 003c 1946     	 mov r1,r3
 15243 003e FFF7FEFF 	 bl getTaskInfo
3590:../cleanflight/src/main/interface/cli.c ****         if (taskInfo.isEnabled) {
 15244              	 .loc 13 3590 0
 15245 0042 3B7F     	 ldrb r3,[r7,#28]
 15246 0044 002B     	 cmp r3,#0
 15247 0046 00F0E780 	 beq .L911
 15248              	.LBB120:
3591:../cleanflight/src/main/interface/cli.c ****             int taskFrequency;
3592:../cleanflight/src/main/interface/cli.c ****             int subTaskFrequency = 0;
 15249              	 .loc 13 3592 0
 15250 004a 0023     	 movs r3,#0
 15251 004c FB63     	 str r3,[r7,#60]
3593:../cleanflight/src/main/interface/cli.c ****             if (taskId == TASK_GYROPID) {
 15252              	 .loc 13 3593 0
 15253 004e 97F84730 	 ldrb r3,[r7,#71]
 15254 0052 022B     	 cmp r3,#2
 15255 0054 36D1     	 bne .L912
3594:../cleanflight/src/main/interface/cli.c ****                 subTaskFrequency = taskInfo.latestDeltaTime == 0 ? 0 : (int)(1000000.0f / ((float)t
 15256              	 .loc 13 3594 0
 15257 0056 D7F82230 	 ldr r3,[r7,#34]
 15258 005a 002B     	 cmp r3,#0
 15259 005c 0ED0     	 beq .L913
 15260              	 .loc 13 3594 0 is_stmt 0 discriminator 1
 15261 005e D7F82230 	 ldr r3,[r7,#34]
 15262 0062 07EE903A 	 fmsr s15,r3
 15263 0066 F8EEE77A 	 fsitos s15,s15
 15264 006a 9FED957A 	 flds s14,.L930+8
 15265 006e C7EE277A 	 fdivs s15,s14,s15
 15266 0072 FDEEE77A 	 ftosizs s15,s15
 15267 0076 17EE903A 	 fmrs r3,s15
 15268 007a 00E0     	 b .L914
 15269              	.L913:
 15270              	 .loc 13 3594 0 discriminator 2
 15271 007c 0023     	 movs r3,#0
 15272              	.L914:
 15273              	 .loc 13 3594 0 discriminator 4
 15274 007e FB63     	 str r3,[r7,#60]
3595:../cleanflight/src/main/interface/cli.c ****                 taskFrequency = subTaskFrequency / pidConfig()->pid_process_denom;
 15275              	 .loc 13 3595 0 is_stmt 1 discriminator 4
 15276 0080 FFF7FEFF 	 bl pidConfig
 15277 0084 0346     	 mov r3,r0
 15278 0086 1B78     	 ldrb r3,[r3]
 15279 0088 1A46     	 mov r2,r3
 15280 008a FB6B     	 ldr r3,[r7,#60]
 15281 008c 93FBF2F3 	 sdiv r3,r3,r2
 15282 0090 3B64     	 str r3,[r7,#64]
3596:../cleanflight/src/main/interface/cli.c ****                 if (pidConfig()->pid_process_denom > 1) {
 15283              	 .loc 13 3596 0 discriminator 4
 15284 0092 FFF7FEFF 	 bl pidConfig
 15285 0096 0346     	 mov r3,r0
 15286 0098 1B78     	 ldrb r3,[r3]
 15287 009a 012B     	 cmp r3,#1
 15288 009c 08D9     	 bls .L915
3597:../cleanflight/src/main/interface/cli.c ****                     cliPrintf("%02d - (%15s) ", taskId, taskInfo.taskName);
 15289              	 .loc 13 3597 0
 15290 009e 97F84720 	 ldrb r2,[r7,#71]
 15291 00a2 7B69     	 ldr r3,[r7,#20]
 15292 00a4 8748     	 ldr r0,.L930+12
 15293 00a6 1146     	 mov r1,r2
 15294 00a8 1A46     	 mov r2,r3
 15295 00aa FFF7FEFF 	 bl cliPrintf
 15296 00ae 26E0     	 b .L917
 15297              	.L915:
3598:../cleanflight/src/main/interface/cli.c ****                 } else {
3599:../cleanflight/src/main/interface/cli.c ****                     taskFrequency = subTaskFrequency;
 15298              	 .loc 13 3599 0
 15299 00b0 FB6B     	 ldr r3,[r7,#60]
 15300 00b2 3B64     	 str r3,[r7,#64]
3600:../cleanflight/src/main/interface/cli.c ****                     cliPrintf("%02d - (%11s/%3s) ", taskId, taskInfo.subTaskName, taskInfo.taskName
 15301              	 .loc 13 3600 0
 15302 00b4 97F84710 	 ldrb r1,[r7,#71]
 15303 00b8 BA69     	 ldr r2,[r7,#24]
 15304 00ba 7B69     	 ldr r3,[r7,#20]
 15305 00bc 8248     	 ldr r0,.L930+16
 15306 00be FFF7FEFF 	 bl cliPrintf
 15307 00c2 1CE0     	 b .L917
 15308              	.L912:
3601:../cleanflight/src/main/interface/cli.c ****                 }
3602:../cleanflight/src/main/interface/cli.c ****             } else {
3603:../cleanflight/src/main/interface/cli.c ****                 taskFrequency = taskInfo.latestDeltaTime == 0 ? 0 : (int)(1000000.0f / ((float)task
 15309              	 .loc 13 3603 0
 15310 00c4 D7F82230 	 ldr r3,[r7,#34]
 15311 00c8 002B     	 cmp r3,#0
 15312 00ca 0ED0     	 beq .L918
 15313              	 .loc 13 3603 0 is_stmt 0 discriminator 1
 15314 00cc D7F82230 	 ldr r3,[r7,#34]
 15315 00d0 07EE903A 	 fmsr s15,r3
 15316 00d4 F8EEE77A 	 fsitos s15,s15
 15317 00d8 9FED797A 	 flds s14,.L930+8
 15318 00dc C7EE277A 	 fdivs s15,s14,s15
 15319 00e0 FDEEE77A 	 ftosizs s15,s15
 15320 00e4 17EE903A 	 fmrs r3,s15
 15321 00e8 00E0     	 b .L919
 15322              	.L918:
 15323              	 .loc 13 3603 0 discriminator 2
 15324 00ea 0023     	 movs r3,#0
 15325              	.L919:
 15326              	 .loc 13 3603 0 discriminator 4
 15327 00ec 3B64     	 str r3,[r7,#64]
3604:../cleanflight/src/main/interface/cli.c ****                 cliPrintf("%02d - (%15s) ", taskId, taskInfo.taskName);
 15328              	 .loc 13 3604 0 is_stmt 1 discriminator 4
 15329 00ee 97F84720 	 ldrb r2,[r7,#71]
 15330 00f2 7B69     	 ldr r3,[r7,#20]
 15331 00f4 7348     	 ldr r0,.L930+12
 15332 00f6 1146     	 mov r1,r2
 15333 00f8 1A46     	 mov r2,r3
 15334 00fa FFF7FEFF 	 bl cliPrintf
 15335              	.L917:
3605:../cleanflight/src/main/interface/cli.c ****             }
3606:../cleanflight/src/main/interface/cli.c ****             const int maxLoad = taskInfo.maxExecutionTime == 0 ? 0 :(taskInfo.maxExecutionTime * ta
 15336              	 .loc 13 3606 0
 15337 00fe D7F82630 	 ldr r3,[r7,#38]
 15338 0102 002B     	 cmp r3,#0
 15339 0104 0CD0     	 beq .L920
 15340              	 .loc 13 3606 0 is_stmt 0 discriminator 1
 15341 0106 D7F82630 	 ldr r3,[r7,#38]
 15342 010a 3A6C     	 ldr r2,[r7,#64]
 15343 010c 02FB03F3 	 mul r3,r2,r3
 15344 0110 03F59C53 	 add r3,r3,#4992
 15345 0114 0833     	 adds r3,r3,#8
 15346 0116 6D4A     	 ldr r2,.L930+20
 15347 0118 A2FB0323 	 umull r2,r3,r2,r3
 15348 011c 9B09     	 lsrs r3,r3,#6
 15349 011e 00E0     	 b .L921
 15350              	.L920:
 15351              	 .loc 13 3606 0 discriminator 2
 15352 0120 0023     	 movs r3,#0
 15353              	.L921:
 15354              	 .loc 13 3606 0 discriminator 4
 15355 0122 BB63     	 str r3,[r7,#56]
3607:../cleanflight/src/main/interface/cli.c ****             const int averageLoad = taskInfo.averageExecutionTime == 0 ? 0 : (taskInfo.averageExecu
 15356              	 .loc 13 3607 0 is_stmt 1 discriminator 4
 15357 0124 D7F82E30 	 ldr r3,[r7,#46]
 15358 0128 002B     	 cmp r3,#0
 15359 012a 0CD0     	 beq .L922
 15360              	 .loc 13 3607 0 is_stmt 0 discriminator 1
 15361 012c D7F82E30 	 ldr r3,[r7,#46]
 15362 0130 3A6C     	 ldr r2,[r7,#64]
 15363 0132 02FB03F3 	 mul r3,r2,r3
 15364 0136 03F59C53 	 add r3,r3,#4992
 15365 013a 0833     	 adds r3,r3,#8
 15366 013c 634A     	 ldr r2,.L930+20
 15367 013e A2FB0323 	 umull r2,r3,r2,r3
 15368 0142 9B09     	 lsrs r3,r3,#6
 15369 0144 00E0     	 b .L923
 15370              	.L922:
 15371              	 .loc 13 3607 0 discriminator 2
 15372 0146 0023     	 movs r3,#0
 15373              	.L923:
 15374              	 .loc 13 3607 0 discriminator 4
 15375 0148 7B63     	 str r3,[r7,#52]
3608:../cleanflight/src/main/interface/cli.c ****             if (taskId != TASK_SERIAL) {
 15376              	 .loc 13 3608 0 is_stmt 1 discriminator 4
 15377 014a 97F84730 	 ldrb r3,[r7,#71]
 15378 014e 062B     	 cmp r3,#6
 15379 0150 07D0     	 beq .L924
3609:../cleanflight/src/main/interface/cli.c ****                 maxLoadSum += maxLoad;
 15380              	 .loc 13 3609 0
 15381 0152 FA6C     	 ldr r2,[r7,#76]
 15382 0154 BB6B     	 ldr r3,[r7,#56]
 15383 0156 1344     	 add r3,r3,r2
 15384 0158 FB64     	 str r3,[r7,#76]
3610:../cleanflight/src/main/interface/cli.c ****                 averageLoadSum += averageLoad;
 15385              	 .loc 13 3610 0
 15386 015a BA6C     	 ldr r2,[r7,#72]
 15387 015c 7B6B     	 ldr r3,[r7,#52]
 15388 015e 1344     	 add r3,r3,r2
 15389 0160 BB64     	 str r3,[r7,#72]
 15390              	.L924:
3611:../cleanflight/src/main/interface/cli.c ****             }
3612:../cleanflight/src/main/interface/cli.c ****             if (systemConfig()->task_statistics) {
 15391              	 .loc 13 3612 0
 15392 0162 FFF7FEFF 	 bl systemConfig
 15393 0166 0346     	 mov r3,r0
 15394 0168 DB78     	 ldrb r3,[r3,#3]
 15395 016a 002B     	 cmp r3,#0
 15396 016c 3BD0     	 beq .L925
3613:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("%6d %7d %7d %4d.%1d%% %4d.%1d%% %9d",
 15397              	 .loc 13 3613 0
 15398 016e D7F826E0 	 ldr lr,[r7,#38]
 15399 0172 D7F82E60 	 ldr r6,[r7,#46]
 15400 0176 BB6B     	 ldr r3,[r7,#56]
 15401 0178 554A     	 ldr r2,.L930+24
 15402 017a 82FB0312 	 smull r1,r2,r2,r3
 15403 017e 9210     	 asrs r2,r2,#2
 15404 0180 DB17     	 asrs r3,r3,#31
 15405 0182 D51A     	 subs r5,r2,r3
 15406 0184 BA6B     	 ldr r2,[r7,#56]
 15407 0186 524B     	 ldr r3,.L930+24
 15408 0188 83FB0213 	 smull r1,r3,r3,r2
 15409 018c 9910     	 asrs r1,r3,#2
 15410 018e D317     	 asrs r3,r2,#31
 15411 0190 C91A     	 subs r1,r1,r3
 15412 0192 0B46     	 mov r3,r1
 15413 0194 9B00     	 lsls r3,r3,#2
 15414 0196 0B44     	 add r3,r3,r1
 15415 0198 5B00     	 lsls r3,r3,#1
 15416 019a D11A     	 subs r1,r2,r3
 15417 019c 7B6B     	 ldr r3,[r7,#52]
 15418 019e 4C4A     	 ldr r2,.L930+24
 15419 01a0 82FB0302 	 smull r0,r2,r2,r3
 15420 01a4 9210     	 asrs r2,r2,#2
 15421 01a6 DB17     	 asrs r3,r3,#31
 15422 01a8 D41A     	 subs r4,r2,r3
 15423 01aa 786B     	 ldr r0,[r7,#52]
 15424 01ac 484B     	 ldr r3,.L930+24
 15425 01ae 83FB0023 	 smull r2,r3,r3,r0
 15426 01b2 9A10     	 asrs r2,r3,#2
 15427 01b4 C317     	 asrs r3,r0,#31
 15428 01b6 D21A     	 subs r2,r2,r3
 15429 01b8 1346     	 mov r3,r2
 15430 01ba 9B00     	 lsls r3,r3,#2
 15431 01bc 1344     	 add r3,r3,r2
 15432 01be 5B00     	 lsls r3,r3,#1
 15433 01c0 C21A     	 subs r2,r0,r3
3614:../cleanflight/src/main/interface/cli.c ****                         taskFrequency, taskInfo.maxExecutionTime, taskInfo.averageExecutionTime,
3615:../cleanflight/src/main/interface/cli.c ****                         maxLoad/10, maxLoad%10, averageLoad/10, averageLoad%10, taskInfo.totalExecu
 15434              	 .loc 13 3615 0
 15435 01c2 D7F82A30 	 ldr r3,[r7,#42]
3613:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("%6d %7d %7d %4d.%1d%% %4d.%1d%% %9d",
 15436              	 .loc 13 3613 0
 15437 01c6 4148     	 ldr r0,.L930+20
 15438 01c8 A0FB0303 	 umull r0,r3,r0,r3
 15439 01cc 9B09     	 lsrs r3,r3,#6
 15440 01ce 0095     	 str r5,[sp]
 15441 01d0 0191     	 str r1,[sp,#4]
 15442 01d2 0294     	 str r4,[sp,#8]
 15443 01d4 0392     	 str r2,[sp,#12]
 15444 01d6 0493     	 str r3,[sp,#16]
 15445 01d8 3E48     	 ldr r0,.L930+28
 15446 01da 396C     	 ldr r1,[r7,#64]
 15447 01dc 7246     	 mov r2,lr
 15448 01de 3346     	 mov r3,r6
 15449 01e0 FFF7FEFF 	 bl cliPrintLinef
 15450 01e4 03E0     	 b .L926
 15451              	.L925:
3616:../cleanflight/src/main/interface/cli.c ****             } else {
3617:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("%6d", taskFrequency);
 15452              	 .loc 13 3617 0
 15453 01e6 3C48     	 ldr r0,.L930+32
 15454 01e8 396C     	 ldr r1,[r7,#64]
 15455 01ea FFF7FEFF 	 bl cliPrintLinef
 15456              	.L926:
3618:../cleanflight/src/main/interface/cli.c ****             }
3619:../cleanflight/src/main/interface/cli.c ****             if (taskId == TASK_GYROPID && pidConfig()->pid_process_denom > 1) {
 15457              	 .loc 13 3619 0
 15458 01ee 97F84730 	 ldrb r3,[r7,#71]
 15459 01f2 022B     	 cmp r3,#2
 15460 01f4 0BD1     	 bne .L927
 15461              	 .loc 13 3619 0 is_stmt 0 discriminator 1
 15462 01f6 FFF7FEFF 	 bl pidConfig
 15463 01fa 0346     	 mov r3,r0
 15464 01fc 1B78     	 ldrb r3,[r3]
 15465 01fe 012B     	 cmp r3,#1
 15466 0200 05D9     	 bls .L927
3620:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("   - (%15s) %6d", taskInfo.subTaskName, subTaskFrequency);
 15467              	 .loc 13 3620 0 is_stmt 1
 15468 0202 BB69     	 ldr r3,[r7,#24]
 15469 0204 3548     	 ldr r0,.L930+36
 15470 0206 1946     	 mov r1,r3
 15471 0208 FA6B     	 ldr r2,[r7,#60]
 15472 020a FFF7FEFF 	 bl cliPrintLinef
 15473              	.L927:
3621:../cleanflight/src/main/interface/cli.c ****             }
3622:../cleanflight/src/main/interface/cli.c **** 
3623:../cleanflight/src/main/interface/cli.c ****             schedulerResetTaskMaxExecutionTime(taskId);
 15474              	 .loc 13 3623 0
 15475 020e 97F84730 	 ldrb r3,[r7,#71]
 15476 0212 1846     	 mov r0,r3
 15477 0214 FFF7FEFF 	 bl schedulerResetTaskMaxExecutionTime
 15478              	.L911:
 15479              	.LBE120:
 15480              	.LBE119:
3587:../cleanflight/src/main/interface/cli.c ****         cfTaskInfo_t taskInfo;
 15481              	 .loc 13 3587 0 discriminator 2
 15482 0218 97F84730 	 ldrb r3,[r7,#71]
 15483 021c 0133     	 adds r3,r3,#1
 15484 021e 87F84730 	 strb r3,[r7,#71]
 15485              	.L910:
3587:../cleanflight/src/main/interface/cli.c ****         cfTaskInfo_t taskInfo;
 15486              	 .loc 13 3587 0 is_stmt 0 discriminator 1
 15487 0222 97F84730 	 ldrb r3,[r7,#71]
 15488 0226 142B     	 cmp r3,#20
 15489 0228 7FF603AF 	 bls .L928
 15490              	.LBE118:
3624:../cleanflight/src/main/interface/cli.c ****         }
3625:../cleanflight/src/main/interface/cli.c ****     }
3626:../cleanflight/src/main/interface/cli.c ****     if (systemConfig()->task_statistics) {
 15491              	 .loc 13 3626 0 is_stmt 1
 15492 022c FFF7FEFF 	 bl systemConfig
 15493 0230 0346     	 mov r3,r0
 15494 0232 DB78     	 ldrb r3,[r3,#3]
 15495 0234 002B     	 cmp r3,#0
 15496 0236 3CD0     	 beq .L907
 15497              	.LBB121:
3627:../cleanflight/src/main/interface/cli.c ****         cfCheckFuncInfo_t checkFuncInfo;
3628:../cleanflight/src/main/interface/cli.c ****         getCheckFuncInfo(&checkFuncInfo);
 15498              	 .loc 13 3628 0
 15499 0238 07F10803 	 add r3,r7,#8
 15500 023c 1846     	 mov r0,r3
 15501 023e FFF7FEFF 	 bl getCheckFuncInfo
3629:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("RX Check Function %19d %7d %25d", checkFuncInfo.maxExecutionTime, checkFuncI
 15502              	 .loc 13 3629 0
 15503 0242 B968     	 ldr r1,[r7,#8]
 15504 0244 3C69     	 ldr r4,[r7,#16]
 15505 0246 FB68     	 ldr r3,[r7,#12]
 15506 0248 204A     	 ldr r2,.L930+20
 15507 024a A2FB0323 	 umull r2,r3,r2,r3
 15508 024e 9B09     	 lsrs r3,r3,#6
 15509 0250 2348     	 ldr r0,.L930+40
 15510 0252 2246     	 mov r2,r4
 15511 0254 FFF7FEFF 	 bl cliPrintLinef
3630:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef("Total (excluding SERIAL) %25d.%1d%% %4d.%1d%%", maxLoadSum/10, maxLoadSum%10
 15512              	 .loc 13 3630 0
 15513 0258 FB6C     	 ldr r3,[r7,#76]
 15514 025a 1D4A     	 ldr r2,.L930+24
 15515 025c 82FB0312 	 smull r1,r2,r2,r3
 15516 0260 9210     	 asrs r2,r2,#2
 15517 0262 DB17     	 asrs r3,r3,#31
 15518 0264 D61A     	 subs r6,r2,r3
 15519 0266 FA6C     	 ldr r2,[r7,#76]
 15520 0268 194B     	 ldr r3,.L930+24
 15521 026a 83FB0213 	 smull r1,r3,r3,r2
 15522 026e 9910     	 asrs r1,r3,#2
 15523 0270 D317     	 asrs r3,r2,#31
 15524 0272 CC1A     	 subs r4,r1,r3
 15525 0274 2346     	 mov r3,r4
 15526 0276 9B00     	 lsls r3,r3,#2
 15527 0278 2344     	 add r3,r3,r4
 15528 027a 5B00     	 lsls r3,r3,#1
 15529 027c D41A     	 subs r4,r2,r3
 15530 027e BB6C     	 ldr r3,[r7,#72]
 15531 0280 134A     	 ldr r2,.L930+24
 15532 0282 82FB0312 	 smull r1,r2,r2,r3
 15533 0286 9210     	 asrs r2,r2,#2
 15534 0288 DB17     	 asrs r3,r3,#31
 15535 028a D51A     	 subs r5,r2,r3
 15536 028c B96C     	 ldr r1,[r7,#72]
 15537 028e 104B     	 ldr r3,.L930+24
 15538 0290 83FB0123 	 smull r2,r3,r3,r1
 15539 0294 9A10     	 asrs r2,r3,#2
 15540 0296 CB17     	 asrs r3,r1,#31
 15541 0298 D21A     	 subs r2,r2,r3
 15542 029a 1346     	 mov r3,r2
 15543 029c 9B00     	 lsls r3,r3,#2
 15544 029e 1344     	 add r3,r3,r2
 15545 02a0 5B00     	 lsls r3,r3,#1
 15546 02a2 CA1A     	 subs r2,r1,r3
 15547 02a4 0092     	 str r2,[sp]
 15548 02a6 0F48     	 ldr r0,.L930+44
 15549 02a8 3146     	 mov r1,r6
 15550 02aa 2246     	 mov r2,r4
 15551 02ac 2B46     	 mov r3,r5
 15552 02ae FFF7FEFF 	 bl cliPrintLinef
 15553              	.L907:
 15554              	.LBE121:
3631:../cleanflight/src/main/interface/cli.c ****     }
3632:../cleanflight/src/main/interface/cli.c **** }
 15555              	 .loc 13 3632 0
 15556 02b2 5437     	 adds r7,r7,#84
 15557              	.LCFI608:
 15558              	 .cfi_def_cfa_offset 20
 15559 02b4 BD46     	 mov sp,r7
 15560              	.LCFI609:
 15561              	 .cfi_def_cfa_register 13
 15562              	 
 15563 02b6 F0BD     	 pop {r4,r5,r6,r7,pc}
 15564              	.L931:
 15565              	 .align 2
 15566              	.L930:
 15567 02b8 DC0A0000 	 .word .LC184
 15568 02bc 280B0000 	 .word .LC185
 15569 02c0 00247449 	 .word 1232348160
 15570 02c4 340B0000 	 .word .LC186
 15571 02c8 440B0000 	 .word .LC187
 15572 02cc D34D6210 	 .word 274877907
 15573 02d0 67666666 	 .word 1717986919
 15574 02d4 580B0000 	 .word .LC188
 15575 02d8 7C0B0000 	 .word .LC189
 15576 02dc 800B0000 	 .word .LC190
 15577 02e0 900B0000 	 .word .LC191
 15578 02e4 B00B0000 	 .word .LC192
 15579              	 .cfi_endproc
 15580              	.LFE780:
 15582              	 .section .rodata
 15583 0bde 0000     	 .align 2
 15584              	.LC193:
 15585 0be0 23202573 	 .ascii "# %s / %s (%s) %s %s / %s (%s) MSP API: %s\000"
 15585      202F2025 
 15585      73202825 
 15585      73292025 
 15585      73202573 
 15586 0c0b 00       	 .align 2
 15587              	.LC194:
 15588 0c0c 436C6561 	 .ascii "Cleanflight\000"
 15588      6E666C69 
 15588      67687400 
 15589              	 .align 2
 15590              	.LC195:
 15591 0c18 322E352E 	 .ascii "2.5.0\000"
 15591      3000
 15592 0c1e 0000     	 .align 2
 15593              	.LC196:
 15594 0c20 312E3430 	 .ascii "1.40\000"
 15594      00
 15595              	 .section .text.cliVersion,"ax",%progbits
 15596              	 .align 2
 15597              	 .thumb
 15598              	 .thumb_func
 15600              	cliVersion:
 15601              	.LFB781:
3633:../cleanflight/src/main/interface/cli.c **** #endif
3634:../cleanflight/src/main/interface/cli.c **** 
3635:../cleanflight/src/main/interface/cli.c **** static void cliVersion(char *cmdline)
3636:../cleanflight/src/main/interface/cli.c **** {
 15602              	 .loc 13 3636 0
 15603              	 .cfi_startproc
 15604              	 
 15605              	 
 15606 0000 B0B5     	 push {r4,r5,r7,lr}
 15607              	.LCFI610:
 15608              	 .cfi_def_cfa_offset 16
 15609              	 .cfi_offset 4,-16
 15610              	 .cfi_offset 5,-12
 15611              	 .cfi_offset 7,-8
 15612              	 .cfi_offset 14,-4
 15613 0002 88B0     	 sub sp,sp,#32
 15614              	.LCFI611:
 15615              	 .cfi_def_cfa_offset 48
 15616 0004 06AF     	 add r7,sp,#24
 15617              	.LCFI612:
 15618              	 .cfi_def_cfa 7,24
 15619 0006 7860     	 str r0,[r7,#4]
3637:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
3638:../cleanflight/src/main/interface/cli.c **** 
3639:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef("# %s / %s (%s) %s %s / %s (%s) MSP API: %s",
 15620              	 .loc 13 3639 0
 15621 0008 0D4B     	 ldr r3,.L933
 15622 000a 1D68     	 ldr r5,[r3]
3640:../cleanflight/src/main/interface/cli.c ****         FC_FIRMWARE_NAME,
3641:../cleanflight/src/main/interface/cli.c ****         targetName,
3642:../cleanflight/src/main/interface/cli.c ****         systemConfig()->boardIdentifier,
 15623              	 .loc 13 3642 0
 15624 000c FFF7FEFF 	 bl systemConfig
 15625 0010 0346     	 mov r3,r0
 15626 0012 DC1D     	 adds r4,r3,#7
3639:../cleanflight/src/main/interface/cli.c ****         FC_FIRMWARE_NAME,
 15627              	 .loc 13 3639 0
 15628 0014 0B4B     	 ldr r3,.L933+4
 15629 0016 1968     	 ldr r1,[r3]
 15630 0018 0B4B     	 ldr r3,.L933+8
 15631 001a 1A68     	 ldr r2,[r3]
 15632 001c 0B4B     	 ldr r3,.L933+12
 15633 001e 1B68     	 ldr r3,[r3]
 15634 0020 0B48     	 ldr r0,.L933+16
 15635 0022 0090     	 str r0,[sp]
 15636 0024 0191     	 str r1,[sp,#4]
 15637 0026 0292     	 str r2,[sp,#8]
 15638 0028 0393     	 str r3,[sp,#12]
 15639 002a 0A4B     	 ldr r3,.L933+20
 15640 002c 0493     	 str r3,[sp,#16]
 15641 002e 0A48     	 ldr r0,.L933+24
 15642 0030 0A49     	 ldr r1,.L933+28
 15643 0032 2A46     	 mov r2,r5
 15644 0034 2346     	 mov r3,r4
 15645 0036 FFF7FEFF 	 bl cliPrintLinef
3643:../cleanflight/src/main/interface/cli.c ****         FC_VERSION_STRING,
3644:../cleanflight/src/main/interface/cli.c ****         buildDate,
3645:../cleanflight/src/main/interface/cli.c ****         buildTime,
3646:../cleanflight/src/main/interface/cli.c ****         shortGitRevision,
3647:../cleanflight/src/main/interface/cli.c ****         MSP_API_VERSION_STRING
3648:../cleanflight/src/main/interface/cli.c ****     );
3649:../cleanflight/src/main/interface/cli.c **** }
 15646              	 .loc 13 3649 0
 15647 003a 0837     	 adds r7,r7,#8
 15648              	.LCFI613:
 15649              	 .cfi_def_cfa_offset 16
 15650 003c BD46     	 mov sp,r7
 15651              	.LCFI614:
 15652              	 .cfi_def_cfa_register 13
 15653              	 
 15654 003e B0BD     	 pop {r4,r5,r7,pc}
 15655              	.L934:
 15656              	 .align 2
 15657              	.L933:
 15658 0040 00000000 	 .word targetName
 15659 0044 00000000 	 .word buildDate
 15660 0048 00000000 	 .word buildTime
 15661 004c 00000000 	 .word shortGitRevision
 15662 0050 180C0000 	 .word .LC195
 15663 0054 200C0000 	 .word .LC196
 15664 0058 E00B0000 	 .word .LC193
 15665 005c 0C0C0000 	 .word .LC194
 15666              	 .cfi_endproc
 15667              	.LFE781:
 15669              	 .section .rodata
 15670 0c25 000000   	 .align 2
 15671              	.LC197:
 15672 0c28 23205243 	 .ascii "# RC Smoothing Type: \000"
 15672      20536D6F 
 15672      6F746869 
 15672      6E672054 
 15672      7970653A 
 15673 0c3e 0000     	 .align 2
 15674              	.LC198:
 15675 0c40 46494C54 	 .ascii "FILTER\000"
 15675      455200
 15676 0c47 00       	 .align 2
 15677              	.LC199:
 15678 0c48 23204465 	 .ascii "# Detected RX frame rate: \000"
 15678      74656374 
 15678      65642052 
 15678      58206672 
 15678      616D6520 
 15679 0c63 00       	 .align 2
 15680              	.LC200:
 15681 0c64 4E4F2053 	 .ascii "NO SIGNAL\000"
 15681      49474E41 
 15681      4C00
 15682 0c6e 0000     	 .align 2
 15683              	.LC201:
 15684 0c70 25642E25 	 .ascii "%d.%dms\000"
 15684      646D7300 
 15685              	 .align 2
 15686              	.LC202:
 15687 0c78 2320496E 	 .ascii "# Input filter type: \000"
 15687      70757420 
 15687      66696C74 
 15687      65722074 
 15687      7970653A 
 15688 0c8e 0000     	 .align 2
 15689              	.LC203:
 15690 0c90 23204163 	 .ascii "# Active input cutoff: %dhz \000"
 15690      74697665 
 15690      20696E70 
 15690      75742063 
 15690      75746F66 
 15691 0cad 000000   	 .align 2
 15692              	.LC204:
 15693 0cb0 28617574 	 .ascii "(auto)\000"
 15693      6F2900
 15694 0cb7 00       	 .align 2
 15695              	.LC205:
 15696 0cb8 286D616E 	 .ascii "(manual)\000"
 15696      75616C29 
 15696      00
 15697 0cc1 000000   	 .align 2
 15698              	.LC206:
 15699 0cc4 23204465 	 .ascii "# Derivative filter type: \000"
 15699      72697661 
 15699      74697665 
 15699      2066696C 
 15699      74657220 
 15700 0cdf 00       	 .align 2
 15701              	.LC207:
 15702 0ce0 23204163 	 .ascii "# Active derivative cutoff: %dhz (\000"
 15702      74697665 
 15702      20646572 
 15702      69766174 
 15702      69766520 
 15703 0d03 00       	 .align 2
 15704              	.LC208:
 15705 0d04 6F666629 	 .ascii "off)\000"
 15705      00
 15706 0d09 000000   	 .align 2
 15707              	.LC209:
 15708 0d0c 6175746F 	 .ascii "auto)\000"
 15708      2900
 15709 0d12 0000     	 .align 2
 15710              	.LC210:
 15711 0d14 6D616E75 	 .ascii "manual)\000"
 15711      616C2900 
 15712              	 .align 2
 15713              	.LC211:
 15714 0d1c 494E5445 	 .ascii "INTERPOLATION\000"
 15714      52504F4C 
 15714      4154494F 
 15714      4E00
 15715              	 .section .text.cliRcSmoothing,"ax",%progbits
 15716              	 .align 2
 15717              	 .thumb
 15718              	 .thumb_func
 15720              	cliRcSmoothing:
 15721              	.LFB782:
3650:../cleanflight/src/main/interface/cli.c **** 
3651:../cleanflight/src/main/interface/cli.c **** #ifdef USE_RC_SMOOTHING_FILTER
3652:../cleanflight/src/main/interface/cli.c **** static void cliRcSmoothing(char *cmdline)
3653:../cleanflight/src/main/interface/cli.c **** {
 15722              	 .loc 13 3653 0
 15723              	 .cfi_startproc
 15724              	 
 15725              	 
 15726 0000 90B5     	 push {r4,r7,lr}
 15727              	.LCFI615:
 15728              	 .cfi_def_cfa_offset 12
 15729              	 .cfi_offset 4,-12
 15730              	 .cfi_offset 7,-8
 15731              	 .cfi_offset 14,-4
 15732 0002 85B0     	 sub sp,sp,#20
 15733              	.LCFI616:
 15734              	 .cfi_def_cfa_offset 32
 15735 0004 00AF     	 add r7,sp,#0
 15736              	.LCFI617:
 15737              	 .cfi_def_cfa_register 7
 15738 0006 7860     	 str r0,[r7,#4]
3654:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
3655:../cleanflight/src/main/interface/cli.c ****     cliPrint("# RC Smoothing Type: ");
 15739              	 .loc 13 3655 0
 15740 0008 4C48     	 ldr r0,.L945
 15741 000a FFF7FEFF 	 bl cliPrint
3656:../cleanflight/src/main/interface/cli.c ****     if (rxConfig()->rc_smoothing_type == RC_SMOOTHING_TYPE_FILTER) {
 15742              	 .loc 13 3656 0
 15743 000e FFF7FEFF 	 bl rxConfig
 15744 0012 0346     	 mov r3,r0
 15745 0014 93F82430 	 ldrb r3,[r3,#36]
 15746 0018 012B     	 cmp r3,#1
 15747 001a 40F08980 	 bne .L936
 15748              	.LBB122:
3657:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("FILTER");
 15749              	 .loc 13 3657 0
 15750 001e 4848     	 ldr r0,.L945+4
 15751 0020 FFF7FEFF 	 bl cliPrintLine
3658:../cleanflight/src/main/interface/cli.c ****         uint16_t avgRxFrameMs = rcSmoothingGetValue(RC_SMOOTHING_VALUE_AVERAGE_FRAME);
 15752              	 .loc 13 3658 0
 15753 0024 0220     	 movs r0,#2
 15754 0026 FFF7FEFF 	 bl rcSmoothingGetValue
 15755 002a 0346     	 mov r3,r0
 15756 002c FB81     	 strh r3,[r7,#14]
3659:../cleanflight/src/main/interface/cli.c ****         if (rcSmoothingAutoCalculate()) {
 15757              	 .loc 13 3659 0
 15758 002e FFF7FEFF 	 bl rcSmoothingAutoCalculate
 15759 0032 0346     	 mov r3,r0
 15760 0034 002B     	 cmp r3,#0
 15761 0036 20D0     	 beq .L937
3660:../cleanflight/src/main/interface/cli.c ****             cliPrint("# Detected RX frame rate: ");
 15762              	 .loc 13 3660 0
 15763 0038 4248     	 ldr r0,.L945+8
 15764 003a FFF7FEFF 	 bl cliPrint
3661:../cleanflight/src/main/interface/cli.c ****             if (avgRxFrameMs == 0) {
 15765              	 .loc 13 3661 0
 15766 003e FB89     	 ldrh r3,[r7,#14]
 15767 0040 002B     	 cmp r3,#0
 15768 0042 03D1     	 bne .L938
3662:../cleanflight/src/main/interface/cli.c ****                 cliPrintLine("NO SIGNAL");
 15769              	 .loc 13 3662 0
 15770 0044 4048     	 ldr r0,.L945+12
 15771 0046 FFF7FEFF 	 bl cliPrintLine
 15772 004a 16E0     	 b .L937
 15773              	.L938:
3663:../cleanflight/src/main/interface/cli.c ****             } else {
3664:../cleanflight/src/main/interface/cli.c ****                 cliPrintLinef("%d.%dms", avgRxFrameMs / 1000, avgRxFrameMs % 1000);
 15774              	 .loc 13 3664 0
 15775 004c FB89     	 ldrh r3,[r7,#14]
 15776 004e 3F4A     	 ldr r2,.L945+16
 15777 0050 A2FB0323 	 umull r2,r3,r2,r3
 15778 0054 9B09     	 lsrs r3,r3,#6
 15779 0056 9BB2     	 uxth r3,r3
 15780 0058 1C46     	 mov r4,r3
 15781 005a FB89     	 ldrh r3,[r7,#14]
 15782 005c 3B4A     	 ldr r2,.L945+16
 15783 005e A2FB0312 	 umull r1,r2,r2,r3
 15784 0062 9209     	 lsrs r2,r2,#6
 15785 0064 4FF47A71 	 mov r1,#1000
 15786 0068 01FB02F2 	 mul r2,r1,r2
 15787 006c 9B1A     	 subs r3,r3,r2
 15788 006e 9BB2     	 uxth r3,r3
 15789 0070 3748     	 ldr r0,.L945+20
 15790 0072 2146     	 mov r1,r4
 15791 0074 1A46     	 mov r2,r3
 15792 0076 FFF7FEFF 	 bl cliPrintLinef
 15793              	.L937:
3665:../cleanflight/src/main/interface/cli.c ****             }
3666:../cleanflight/src/main/interface/cli.c ****         }
3667:../cleanflight/src/main/interface/cli.c ****         cliPrint("# Input filter type: ");
 15794              	 .loc 13 3667 0
 15795 007a 3648     	 ldr r0,.L945+24
 15796 007c FFF7FEFF 	 bl cliPrint
3668:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef(lookupTables[TABLE_RC_SMOOTHING_INPUT_TYPE].values[rxConfig()->rc_smoothing_i
 15797              	 .loc 13 3668 0
 15798 0080 354B     	 ldr r3,.L945+28
 15799 0082 D3F8AF40 	 ldr r4,[r3,#175]
 15800 0086 FFF7FEFF 	 bl rxConfig
 15801 008a 0346     	 mov r3,r0
 15802 008c 93F82830 	 ldrb r3,[r3,#40]
 15803 0090 9B00     	 lsls r3,r3,#2
 15804 0092 2344     	 add r3,r3,r4
 15805 0094 1B68     	 ldr r3,[r3]
 15806 0096 1846     	 mov r0,r3
 15807 0098 FFF7FEFF 	 bl cliPrintLinef
3669:../cleanflight/src/main/interface/cli.c ****         cliPrintf("# Active input cutoff: %dhz ", rcSmoothingGetValue(RC_SMOOTHING_VALUE_INPUT_ACTI
 15808              	 .loc 13 3669 0
 15809 009c 0020     	 movs r0,#0
 15810 009e FFF7FEFF 	 bl rcSmoothingGetValue
 15811 00a2 0346     	 mov r3,r0
 15812 00a4 2D48     	 ldr r0,.L945+32
 15813 00a6 1946     	 mov r1,r3
 15814 00a8 FFF7FEFF 	 bl cliPrintf
3670:../cleanflight/src/main/interface/cli.c ****         if (rxConfig()->rc_smoothing_input_cutoff == 0) {
 15815              	 .loc 13 3670 0
 15816 00ac FFF7FEFF 	 bl rxConfig
 15817 00b0 0346     	 mov r3,r0
 15818 00b2 93F82530 	 ldrb r3,[r3,#37]
 15819 00b6 002B     	 cmp r3,#0
 15820 00b8 03D1     	 bne .L939
3671:../cleanflight/src/main/interface/cli.c ****             cliPrintLine("(auto)");
 15821              	 .loc 13 3671 0
 15822 00ba 2948     	 ldr r0,.L945+36
 15823 00bc FFF7FEFF 	 bl cliPrintLine
 15824 00c0 02E0     	 b .L940
 15825              	.L939:
3672:../cleanflight/src/main/interface/cli.c ****         } else {
3673:../cleanflight/src/main/interface/cli.c ****             cliPrintLine("(manual)");
 15826              	 .loc 13 3673 0
 15827 00c2 2848     	 ldr r0,.L945+40
 15828 00c4 FFF7FEFF 	 bl cliPrintLine
 15829              	.L940:
3674:../cleanflight/src/main/interface/cli.c ****         }
3675:../cleanflight/src/main/interface/cli.c ****         cliPrint("# Derivative filter type: ");
 15830              	 .loc 13 3675 0
 15831 00c8 2748     	 ldr r0,.L945+44
 15832 00ca FFF7FEFF 	 bl cliPrint
3676:../cleanflight/src/main/interface/cli.c ****         cliPrintLinef(lookupTables[TABLE_RC_SMOOTHING_DERIVATIVE_TYPE].values[rxConfig()->rc_smooth
 15833              	 .loc 13 3676 0
 15834 00ce 224B     	 ldr r3,.L945+28
 15835 00d0 D3F8B440 	 ldr r4,[r3,#180]
 15836 00d4 FFF7FEFF 	 bl rxConfig
 15837 00d8 0346     	 mov r3,r0
 15838 00da 93F82930 	 ldrb r3,[r3,#41]
 15839 00de 9B00     	 lsls r3,r3,#2
 15840 00e0 2344     	 add r3,r3,r4
 15841 00e2 1B68     	 ldr r3,[r3]
 15842 00e4 1846     	 mov r0,r3
 15843 00e6 FFF7FEFF 	 bl cliPrintLinef
3677:../cleanflight/src/main/interface/cli.c ****         cliPrintf("# Active derivative cutoff: %dhz (", rcSmoothingGetValue(RC_SMOOTHING_VALUE_DERI
 15844              	 .loc 13 3677 0
 15845 00ea 0120     	 movs r0,#1
 15846 00ec FFF7FEFF 	 bl rcSmoothingGetValue
 15847 00f0 0346     	 mov r3,r0
 15848 00f2 1E48     	 ldr r0,.L945+48
 15849 00f4 1946     	 mov r1,r3
 15850 00f6 FFF7FEFF 	 bl cliPrintf
3678:../cleanflight/src/main/interface/cli.c ****         if (rxConfig()->rc_smoothing_derivative_type == RC_SMOOTHING_DERIVATIVE_OFF) {
 15851              	 .loc 13 3678 0
 15852 00fa FFF7FEFF 	 bl rxConfig
 15853 00fe 0346     	 mov r3,r0
 15854 0100 93F82930 	 ldrb r3,[r3,#41]
 15855 0104 002B     	 cmp r3,#0
 15856 0106 03D1     	 bne .L941
3679:../cleanflight/src/main/interface/cli.c ****             cliPrintLine("off)");
 15857              	 .loc 13 3679 0
 15858 0108 1948     	 ldr r0,.L945+52
 15859 010a FFF7FEFF 	 bl cliPrintLine
 15860 010e 0EE0     	 b .L942
 15861              	.L941:
3680:../cleanflight/src/main/interface/cli.c ****         } else {
3681:../cleanflight/src/main/interface/cli.c ****             if (rxConfig()->rc_smoothing_derivative_cutoff == 0) {
 15862              	 .loc 13 3681 0
 15863 0110 FFF7FEFF 	 bl rxConfig
 15864 0114 0346     	 mov r3,r0
 15865 0116 93F82630 	 ldrb r3,[r3,#38]
 15866 011a 002B     	 cmp r3,#0
 15867 011c 03D1     	 bne .L943
3682:../cleanflight/src/main/interface/cli.c ****                 cliPrintLine("auto)");
 15868              	 .loc 13 3682 0
 15869 011e 1548     	 ldr r0,.L945+56
 15870 0120 FFF7FEFF 	 bl cliPrintLine
 15871 0124 03E0     	 b .L942
 15872              	.L943:
3683:../cleanflight/src/main/interface/cli.c ****             } else {
3684:../cleanflight/src/main/interface/cli.c ****                 cliPrintLine("manual)");
 15873              	 .loc 13 3684 0
 15874 0126 1448     	 ldr r0,.L945+60
 15875 0128 FFF7FEFF 	 bl cliPrintLine
 15876              	.LBE122:
 15877 012c 03E0     	 b .L935
 15878              	.L942:
 15879 012e 02E0     	 b .L935
 15880              	.L936:
3685:../cleanflight/src/main/interface/cli.c ****             }
3686:../cleanflight/src/main/interface/cli.c ****         }
3687:../cleanflight/src/main/interface/cli.c ****     } else {
3688:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("INTERPOLATION");
 15881              	 .loc 13 3688 0
 15882 0130 1248     	 ldr r0,.L945+64
 15883 0132 FFF7FEFF 	 bl cliPrintLine
 15884              	.L935:
3689:../cleanflight/src/main/interface/cli.c ****     }
3690:../cleanflight/src/main/interface/cli.c **** }
 15885              	 .loc 13 3690 0
 15886 0136 1437     	 adds r7,r7,#20
 15887              	.LCFI618:
 15888              	 .cfi_def_cfa_offset 12
 15889 0138 BD46     	 mov sp,r7
 15890              	.LCFI619:
 15891              	 .cfi_def_cfa_register 13
 15892              	 
 15893 013a 90BD     	 pop {r4,r7,pc}
 15894              	.L946:
 15895              	 .align 2
 15896              	.L945:
 15897 013c 280C0000 	 .word .LC197
 15898 0140 400C0000 	 .word .LC198
 15899 0144 480C0000 	 .word .LC199
 15900 0148 640C0000 	 .word .LC200
 15901 014c D34D6210 	 .word 274877907
 15902 0150 700C0000 	 .word .LC201
 15903 0154 780C0000 	 .word .LC202
 15904 0158 00000000 	 .word lookupTables
 15905 015c 900C0000 	 .word .LC203
 15906 0160 B00C0000 	 .word .LC204
 15907 0164 B80C0000 	 .word .LC205
 15908 0168 C40C0000 	 .word .LC206
 15909 016c E00C0000 	 .word .LC207
 15910 0170 040D0000 	 .word .LC208
 15911 0174 0C0D0000 	 .word .LC209
 15912 0178 140D0000 	 .word .LC210
 15913 017c 1C0D0000 	 .word .LC211
 15914              	 .cfi_endproc
 15915              	.LFE782:
 15917              	 .global resourceTable
 15918              	 .section .rodata.resourceTable,"a",%progbits
 15919              	 .align 2
 15922              	resourceTable:
 15923 0000 03       	 .byte 3
 15924 0001 0600     	 .2byte 6
 15925 0003 01       	 .byte 1
 15926 0004 06       	 .byte 6
 15927 0005 08       	 .byte 8
 15928 0006 04       	 .byte 4
 15929 0007 3400     	 .2byte 52
 15930 0009 01       	 .byte 1
 15931 000a 04       	 .byte 4
 15932 000b 08       	 .byte 8
 15933 000c 02       	 .byte 2
 15934 000d FB01     	 .2byte 507
 15935 000f 00       	 .byte 0
 15936 0010 00       	 .byte 0
 15937 0011 00       	 .byte 0
 15938 0012 01       	 .byte 1
 15939 0013 FC01     	 .2byte 508
 15940 0015 01       	 .byte 1
 15941 0016 00       	 .byte 0
 15942 0017 08       	 .byte 8
 15943 0018 0B       	 .byte 11
 15944 0019 FD01     	 .2byte 509
 15945 001b 01       	 .byte 1
 15946 001c 00       	 .byte 0
 15947 001d 0A       	 .byte 10
 15948 001e 0C       	 .byte 12
 15949 001f FD01     	 .2byte 509
 15950 0021 01       	 .byte 1
 15951 0022 0A       	 .byte 10
 15952 0023 0A       	 .byte 10
 15953 0024 15       	 .byte 21
 15954 0025 0602     	 .2byte 518
 15955 0027 04       	 .byte 4
 15956 0028 00       	 .byte 0
 15957 0029 06       	 .byte 6
 15958 002a 16       	 .byte 22
 15959 002b 0602     	 .2byte 518
 15960 002d 04       	 .byte 4
 15961 002e 01       	 .byte 1
 15962 002f 06       	 .byte 6
 15963 0030 05       	 .byte 5
 15964 0031 F901     	 .2byte 505
 15965 0033 01       	 .byte 1
 15966 0034 00       	 .byte 0
 15967 0035 03       	 .byte 3
 15968 0036 27       	 .byte 39
 15969 0037 1800     	 .2byte 24
 15970 0039 00       	 .byte 0
 15971 003a 0B       	 .byte 11
 15972 003b 00       	 .byte 0
 15973 003c 2D       	 .byte 45
 15974 003d 1800     	 .2byte 24
 15975 003f 00       	 .byte 0
 15976 0040 0C       	 .byte 12
 15977 0041 00       	 .byte 0
 15978 0042 12       	 .byte 18
 15979 0043 0802     	 .2byte 520
 15980 0045 04       	 .byte 4
 15981 0046 00       	 .byte 0
 15982 0047 06       	 .byte 6
 15983 0048 13       	 .byte 19
 15984 0049 0802     	 .2byte 520
 15985 004b 04       	 .byte 4
 15986 004c 01       	 .byte 1
 15987 004d 06       	 .byte 6
 15988 004e 14       	 .byte 20
 15989 004f 0802     	 .2byte 520
 15990 0051 04       	 .byte 4
 15991 0052 02       	 .byte 2
 15992 0053 06       	 .byte 6
 15993 0054 07       	 .byte 7
 15994 0055 FE01     	 .2byte 510
 15995 0057 00       	 .byte 0
 15996 0058 01       	 .byte 1
 15997 0059 00       	 .byte 0
 15998 005a 0A       	 .byte 10
 15999 005b FE01     	 .2byte 510
 16000 005d 00       	 .byte 0
 16001 005e 03       	 .byte 3
 16002 005f 00       	 .byte 0
 16003 0060 08       	 .byte 8
 16004 0061 FE01     	 .2byte 510
 16005 0063 00       	 .byte 0
 16006 0064 05       	 .byte 5
 16007 0065 00       	 .byte 0
 16008 0066 09       	 .byte 9
 16009 0067 FE01     	 .2byte 510
 16010 0069 00       	 .byte 0
 16011 006a 07       	 .byte 7
 16012 006b 00       	 .byte 0
 16013 006c 1B       	 .byte 27
 16014 006d 2600     	 .2byte 38
 16015 006f 00       	 .byte 0
 16016 0070 02       	 .byte 2
 16017 0071 00       	 .byte 0
 16018 0072 2C       	 .byte 44
 16019 0073 2800     	 .2byte 40
 16020 0075 00       	 .byte 0
 16021 0076 08       	 .byte 8
 16022 0077 00       	 .byte 0
 16023 0078 18       	 .byte 24
 16024 0079 FF01     	 .2byte 511
 16025 007b 00       	 .byte 0
 16026 007c 04       	 .byte 4
 16027 007d 00       	 .byte 0
 16028 007e 19       	 .byte 25
 16029 007f FF01     	 .2byte 511
 16030 0081 00       	 .byte 0
 16031 0082 03       	 .byte 3
 16032 0083 00       	 .byte 0
 16033 0084 33       	 .byte 51
 16034 0085 1102     	 .2byte 529
 16035 0087 01       	 .byte 1
 16036 0088 00       	 .byte 0
 16037 0089 04       	 .byte 4
 16038 008a 35       	 .byte 53
 16039 008b 1702     	 .2byte 535
 16040 008d 01       	 .byte 1
 16041 008e 00       	 .byte 0
 16042 008f 0B       	 .byte 11
 16043 0090 36       	 .byte 54
 16044 0091 1802     	 .2byte 536
 16045 0093 01       	 .byte 1
 16046 0094 00       	 .byte 0
 16047 0095 02       	 .byte 2
 16048 0096 0000     	 .section .text.getIoTag,"ax",%progbits
 16049              	 .align 2
 16050              	 .thumb
 16051              	 .thumb_func
 16053              	getIoTag:
 16054              	.LFB783:
3691:../cleanflight/src/main/interface/cli.c **** #endif // USE_RC_SMOOTHING_FILTER
3692:../cleanflight/src/main/interface/cli.c **** 
3693:../cleanflight/src/main/interface/cli.c **** #if defined(USE_RESOURCE_MGMT)
3694:../cleanflight/src/main/interface/cli.c **** 
3695:../cleanflight/src/main/interface/cli.c **** #define MAX_RESOURCE_INDEX(x) ((x) == 0 ? 1 : (x))
3696:../cleanflight/src/main/interface/cli.c **** 
3697:../cleanflight/src/main/interface/cli.c **** typedef struct {
3698:../cleanflight/src/main/interface/cli.c ****     const uint8_t owner;
3699:../cleanflight/src/main/interface/cli.c ****     pgn_t pgn;
3700:../cleanflight/src/main/interface/cli.c ****     uint8_t stride;
3701:../cleanflight/src/main/interface/cli.c ****     uint8_t offset;
3702:../cleanflight/src/main/interface/cli.c ****     const uint8_t maxIndex;
3703:../cleanflight/src/main/interface/cli.c **** } cliResourceValue_t;
3704:../cleanflight/src/main/interface/cli.c **** 
3705:../cleanflight/src/main/interface/cli.c **** // Handy macros for keeping the table tidy.
3706:../cleanflight/src/main/interface/cli.c **** // DEFS : Single entry
3707:../cleanflight/src/main/interface/cli.c **** // DEFA : Array of uint8_t (stride = 1)
3708:../cleanflight/src/main/interface/cli.c **** // DEFW : Wider stride case; array of structs.
3709:../cleanflight/src/main/interface/cli.c **** 
3710:../cleanflight/src/main/interface/cli.c **** #define DEFS(owner, pgn, type, member) \
3711:../cleanflight/src/main/interface/cli.c ****     { owner, pgn, 0, offsetof(type, member), 0 }
3712:../cleanflight/src/main/interface/cli.c **** 
3713:../cleanflight/src/main/interface/cli.c **** #define DEFA(owner, pgn, type, member, max) \
3714:../cleanflight/src/main/interface/cli.c ****     { owner, pgn, sizeof(ioTag_t), offsetof(type, member), max }
3715:../cleanflight/src/main/interface/cli.c **** 
3716:../cleanflight/src/main/interface/cli.c **** #define DEFW(owner, pgn, type, member, max) \
3717:../cleanflight/src/main/interface/cli.c ****     { owner, pgn, sizeof(type), offsetof(type, member), max }
3718:../cleanflight/src/main/interface/cli.c **** 
3719:../cleanflight/src/main/interface/cli.c **** const cliResourceValue_t resourceTable[] = {
3720:../cleanflight/src/main/interface/cli.c **** #ifdef USE_BEEPER
3721:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_BEEPER,        PG_BEEPER_DEV_CONFIG, beeperDevConfig_t, ioTag) ,
3722:../cleanflight/src/main/interface/cli.c **** #endif
3723:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_MOTOR,         PG_MOTOR_CONFIG, motorConfig_t, dev.ioTags[0], MAX_SUPPORTED_MOTORS 
3724:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SERVOS
3725:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_SERVO,         PG_SERVO_CONFIG, servoConfig_t, dev.ioTags[0], MAX_SUPPORTED_SERVOS 
3726:../cleanflight/src/main/interface/cli.c **** #endif
3727:../cleanflight/src/main/interface/cli.c **** #if defined(USE_PPM)
3728:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_PPMINPUT,      PG_PPM_CONFIG, ppmConfig_t, ioTag ),
3729:../cleanflight/src/main/interface/cli.c **** #endif
3730:../cleanflight/src/main/interface/cli.c **** #if defined(USE_PWM)
3731:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_PWMINPUT,      PG_PWM_CONFIG, pwmConfig_t, ioTags[0], PWM_INPUT_PORT_COUNT ),
3732:../cleanflight/src/main/interface/cli.c **** #endif
3733:../cleanflight/src/main/interface/cli.c **** #ifdef USE_RANGEFINDER_HCSR04
3734:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_SONAR_TRIGGER, PG_SONAR_CONFIG, sonarConfig_t, triggerTag ),
3735:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_SONAR_ECHO,    PG_SONAR_CONFIG, sonarConfig_t, echoTag ),
3736:../cleanflight/src/main/interface/cli.c **** #endif
3737:../cleanflight/src/main/interface/cli.c **** #ifdef USE_LED_STRIP
3738:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_LED_STRIP,     PG_LED_STRIP_CONFIG, ledStripConfig_t, ioTag ),
3739:../cleanflight/src/main/interface/cli.c **** #endif
3740:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_SERIAL_TX,     PG_SERIAL_PIN_CONFIG, serialPinConfig_t, ioTagTx[0], SERIAL_PORT_MAX
3741:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_SERIAL_RX,     PG_SERIAL_PIN_CONFIG, serialPinConfig_t, ioTagRx[0], SERIAL_PORT_MAX
3742:../cleanflight/src/main/interface/cli.c **** #ifdef USE_INVERTER
3743:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_INVERTER,      PG_SERIAL_PIN_CONFIG, serialPinConfig_t, ioTagInverter[0], SERIAL_PO
3744:../cleanflight/src/main/interface/cli.c **** #endif
3745:../cleanflight/src/main/interface/cli.c **** #ifdef USE_I2C
3746:../cleanflight/src/main/interface/cli.c ****     DEFW( OWNER_I2C_SCL,       PG_I2C_CONFIG, i2cConfig_t, ioTagScl, I2CDEV_COUNT ),
3747:../cleanflight/src/main/interface/cli.c ****     DEFW( OWNER_I2C_SDA,       PG_I2C_CONFIG, i2cConfig_t, ioTagSda, I2CDEV_COUNT ),
3748:../cleanflight/src/main/interface/cli.c **** #endif
3749:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_LED,           PG_STATUS_LED_CONFIG, statusLedConfig_t, ioTags[0], STATUS_LED_NUMBE
3750:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SPEKTRUM_BIND
3751:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_RX_BIND,       PG_RX_CONFIG, rxConfig_t, spektrum_bind_pin_override_ioTag ),
3752:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_RX_BIND_PLUG,  PG_RX_CONFIG, rxConfig_t, spektrum_bind_plug_ioTag ),
3753:../cleanflight/src/main/interface/cli.c **** #endif
3754:../cleanflight/src/main/interface/cli.c **** #ifdef USE_TRANSPONDER
3755:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_TRANSPONDER,   PG_TRANSPONDER_CONFIG, transponderConfig_t, ioTag ),
3756:../cleanflight/src/main/interface/cli.c **** #endif
3757:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SPI
3758:../cleanflight/src/main/interface/cli.c ****     DEFW( OWNER_SPI_SCK,       PG_SPI_PIN_CONFIG, spiPinConfig_t, ioTagSck, SPIDEV_COUNT ),
3759:../cleanflight/src/main/interface/cli.c ****     DEFW( OWNER_SPI_MISO,      PG_SPI_PIN_CONFIG, spiPinConfig_t, ioTagMiso, SPIDEV_COUNT ),
3760:../cleanflight/src/main/interface/cli.c ****     DEFW( OWNER_SPI_MOSI,      PG_SPI_PIN_CONFIG, spiPinConfig_t, ioTagMosi, SPIDEV_COUNT ),
3761:../cleanflight/src/main/interface/cli.c **** #endif
3762:../cleanflight/src/main/interface/cli.c **** #ifdef USE_ESCSERIAL
3763:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_ESCSERIAL,     PG_ESCSERIAL_CONFIG, escSerialConfig_t, ioTag ),
3764:../cleanflight/src/main/interface/cli.c **** #endif
3765:../cleanflight/src/main/interface/cli.c **** #ifdef USE_CAMERA_CONTROL
3766:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_CAMERA_CONTROL, PG_CAMERA_CONTROL_CONFIG, cameraControlConfig_t, ioTag ),
3767:../cleanflight/src/main/interface/cli.c **** #endif
3768:../cleanflight/src/main/interface/cli.c **** #ifdef USE_ADC
3769:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_ADC_BATT,      PG_ADC_CONFIG, adcConfig_t, vbat.ioTag ),
3770:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_ADC_RSSI,      PG_ADC_CONFIG, adcConfig_t, rssi.ioTag ),
3771:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_ADC_CURR,      PG_ADC_CONFIG, adcConfig_t, current.ioTag ),
3772:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_ADC_EXT,       PG_ADC_CONFIG, adcConfig_t, external1.ioTag ),
3773:../cleanflight/src/main/interface/cli.c **** #endif
3774:../cleanflight/src/main/interface/cli.c **** #ifdef USE_BARO
3775:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_BARO_CS,       PG_BAROMETER_CONFIG, barometerConfig_t, baro_spi_csn ),
3776:../cleanflight/src/main/interface/cli.c **** #endif
3777:../cleanflight/src/main/interface/cli.c **** #ifdef USE_MAG
3778:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_COMPASS_CS,    PG_COMPASS_CONFIG, compassConfig_t, mag_spi_csn ),
3779:../cleanflight/src/main/interface/cli.c **** #ifdef USE_MAG_DATA_READY_SIGNAL
3780:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_COMPASS_EXTI,  PG_COMPASS_CONFIG, compassConfig_t, interruptTag ),
3781:../cleanflight/src/main/interface/cli.c **** #endif
3782:../cleanflight/src/main/interface/cli.c **** #endif
3783:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SDCARD
3784:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_SDCARD_CS,     PG_SDCARD_CONFIG, sdcardConfig_t, chipSelectTag ),
3785:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_SDCARD_DETECT, PG_SDCARD_CONFIG, sdcardConfig_t, cardDetectTag ),
3786:../cleanflight/src/main/interface/cli.c **** #endif
3787:../cleanflight/src/main/interface/cli.c **** #ifdef USE_PINIO
3788:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_PINIO,         PG_PINIO_CONFIG, pinioConfig_t, ioTag, PINIO_COUNT ),
3789:../cleanflight/src/main/interface/cli.c **** #endif
3790:../cleanflight/src/main/interface/cli.c **** #if defined(USE_USB_MSC)
3791:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_USB_MSC_PIN,   PG_USB_CONFIG, usbDev_t, mscButtonPin ),
3792:../cleanflight/src/main/interface/cli.c **** #endif
3793:../cleanflight/src/main/interface/cli.c **** #ifdef USE_FLASH
3794:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_FLASH_CS,      PG_FLASH_CONFIG, flashConfig_t, csTag ),
3795:../cleanflight/src/main/interface/cli.c **** #endif
3796:../cleanflight/src/main/interface/cli.c **** #ifdef USE_MAX7456
3797:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_OSD_CS,        PG_MAX7456_CONFIG, max7456Config_t, csTag ),
3798:../cleanflight/src/main/interface/cli.c **** #endif
3799:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SPI
3800:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_SPI_PREINIT_IPU, PG_SPI_PREINIT_IPU_CONFIG, spiCs_t, csnTag, SPI_PREINIT_IPU_COUNT 
3801:../cleanflight/src/main/interface/cli.c ****     DEFA( OWNER_SPI_PREINIT_OPU, PG_SPI_PREINIT_OPU_CONFIG, spiCs_t, csnTag, SPI_PREINIT_OPU_COUNT 
3802:../cleanflight/src/main/interface/cli.c **** #endif
3803:../cleanflight/src/main/interface/cli.c **** #ifdef USE_RX_SPI
3804:../cleanflight/src/main/interface/cli.c ****     DEFS( OWNER_RX_SPI_CS,     PG_RX_SPI_CONFIG, rxSpiConfig_t, csnTag ),
3805:../cleanflight/src/main/interface/cli.c **** #endif
3806:../cleanflight/src/main/interface/cli.c **** };
3807:../cleanflight/src/main/interface/cli.c **** 
3808:../cleanflight/src/main/interface/cli.c **** #undef DEFS
3809:../cleanflight/src/main/interface/cli.c **** #undef DEFA
3810:../cleanflight/src/main/interface/cli.c **** #undef DEFW
3811:../cleanflight/src/main/interface/cli.c **** 
3812:../cleanflight/src/main/interface/cli.c **** static ioTag_t *getIoTag(const cliResourceValue_t value, uint8_t index)
3813:../cleanflight/src/main/interface/cli.c **** {
 16055              	 .loc 13 3813 0
 16056              	 .cfi_startproc
 16057              	 
 16058              	 
 16059 0000 80B5     	 push {r7,lr}
 16060              	.LCFI620:
 16061              	 .cfi_def_cfa_offset 8
 16062              	 .cfi_offset 7,-8
 16063              	 .cfi_offset 14,-4
 16064 0002 86B0     	 sub sp,sp,#24
 16065              	.LCFI621:
 16066              	 .cfi_def_cfa_offset 32
 16067 0004 00AF     	 add r7,sp,#0
 16068              	.LCFI622:
 16069              	 .cfi_def_cfa_register 7
 16070 0006 07F10803 	 add r3,r7,#8
 16071 000a 83E80300 	 stmia r3,{r0,r1}
 16072 000e 1346     	 mov r3,r2
 16073 0010 FB71     	 strb r3,[r7,#7]
3814:../cleanflight/src/main/interface/cli.c ****     const pgRegistry_t* rec = pgFind(value.pgn);
 16074              	 .loc 13 3814 0
 16075 0012 B7F80930 	 ldrh r3,[r7,#9]
 16076 0016 9BB2     	 uxth r3,r3
 16077 0018 1846     	 mov r0,r3
 16078 001a FFF7FEFF 	 bl pgFind
 16079 001e 7861     	 str r0,[r7,#20]
3815:../cleanflight/src/main/interface/cli.c ****     return CONST_CAST(ioTag_t *, rec->address + value.stride * index + value.offset);
 16080              	 .loc 13 3815 0
 16081 0020 7B69     	 ldr r3,[r7,#20]
 16082 0022 5A68     	 ldr r2,[r3,#4]
 16083 0024 FB7A     	 ldrb r3,[r7,#11]
 16084 0026 1946     	 mov r1,r3
 16085 0028 FB79     	 ldrb r3,[r7,#7]
 16086 002a 03FB01F3 	 mul r3,r3,r1
 16087 002e 1946     	 mov r1,r3
 16088 0030 3B7B     	 ldrb r3,[r7,#12]
 16089 0032 0B44     	 add r3,r3,r1
 16090 0034 1344     	 add r3,r3,r2
3816:../cleanflight/src/main/interface/cli.c **** }
 16091              	 .loc 13 3816 0
 16092 0036 1846     	 mov r0,r3
 16093 0038 1837     	 adds r7,r7,#24
 16094              	.LCFI623:
 16095              	 .cfi_def_cfa_offset 8
 16096 003a BD46     	 mov sp,r7
 16097              	.LCFI624:
 16098              	 .cfi_def_cfa_register 13
 16099              	 
 16100 003c 80BD     	 pop {r7,pc}
 16101              	 .cfi_endproc
 16102              	.LFE783:
 16104 003e 00BF     	 .section .rodata
 16105 0d2a 0000     	 .align 2
 16106              	.LC212:
 16107 0d2c 7265736F 	 .ascii "resource %s %d %c%02d\000"
 16107      75726365 
 16107      20257320 
 16107      25642025 
 16107      63253032 
 16108 0d42 0000     	 .align 2
 16109              	.LC213:
 16110 0d44 7265736F 	 .ascii "resource %s %d NONE\000"
 16110      75726365 
 16110      20257320 
 16110      2564204E 
 16110      4F4E4500 
 16111              	 .section .text.printResource,"ax",%progbits
 16112              	 .align 2
 16113              	 .thumb
 16114              	 .thumb_func
 16116              	printResource:
 16117              	.LFB784:
3817:../cleanflight/src/main/interface/cli.c **** 
3818:../cleanflight/src/main/interface/cli.c **** static void printResource(uint8_t dumpMask)
3819:../cleanflight/src/main/interface/cli.c **** {
 16118              	 .loc 13 3819 0
 16119              	 .cfi_startproc
 16120              	 
 16121              	 
 16122 0000 90B5     	 push {r4,r7,lr}
 16123              	.LCFI625:
 16124              	 .cfi_def_cfa_offset 12
 16125              	 .cfi_offset 4,-12
 16126              	 .cfi_offset 7,-8
 16127              	 .cfi_offset 14,-4
 16128 0002 91B0     	 sub sp,sp,#68
 16129              	.LCFI626:
 16130              	 .cfi_def_cfa_offset 80
 16131 0004 04AF     	 add r7,sp,#16
 16132              	.LCFI627:
 16133              	 .cfi_def_cfa 7,64
 16134 0006 0346     	 mov r3,r0
 16135 0008 FB71     	 strb r3,[r7,#7]
 16136              	.LBB123:
3820:../cleanflight/src/main/interface/cli.c ****     for (unsigned int i = 0; i < ARRAYLEN(resourceTable); i++) {
 16137              	 .loc 13 3820 0
 16138 000a 0023     	 movs r3,#0
 16139 000c FB62     	 str r3,[r7,#44]
 16140 000e D6E0     	 b .L950
 16141              	.L962:
 16142              	.LBB124:
3821:../cleanflight/src/main/interface/cli.c ****         const char* owner = ownerNames[resourceTable[i].owner];
 16143              	 .loc 13 3821 0
 16144 0010 6E49     	 ldr r1,.L963
 16145 0012 FA6A     	 ldr r2,[r7,#44]
 16146 0014 1346     	 mov r3,r2
 16147 0016 5B00     	 lsls r3,r3,#1
 16148 0018 1344     	 add r3,r3,r2
 16149 001a 5B00     	 lsls r3,r3,#1
 16150 001c 0B44     	 add r3,r3,r1
 16151 001e 1B78     	 ldrb r3,[r3]
 16152 0020 1A46     	 mov r2,r3
 16153 0022 6B4B     	 ldr r3,.L963+4
 16154 0024 53F82230 	 ldr r3,[r3,r2,lsl#2]
 16155 0028 FB61     	 str r3,[r7,#28]
3822:../cleanflight/src/main/interface/cli.c ****         const pgRegistry_t* pg = pgFind(resourceTable[i].pgn);
 16156              	 .loc 13 3822 0
 16157 002a 6849     	 ldr r1,.L963
 16158 002c FA6A     	 ldr r2,[r7,#44]
 16159 002e 1346     	 mov r3,r2
 16160 0030 5B00     	 lsls r3,r3,#1
 16161 0032 1344     	 add r3,r3,r2
 16162 0034 5B00     	 lsls r3,r3,#1
 16163 0036 0B44     	 add r3,r3,r1
 16164 0038 B3F80130 	 ldrh r3,[r3,#1]
 16165 003c 9BB2     	 uxth r3,r3
 16166 003e 1846     	 mov r0,r3
 16167 0040 FFF7FEFF 	 bl pgFind
 16168 0044 B861     	 str r0,[r7,#24]
3823:../cleanflight/src/main/interface/cli.c ****         const void *currentConfig;
3824:../cleanflight/src/main/interface/cli.c ****         const void *defaultConfig;
3825:../cleanflight/src/main/interface/cli.c ****         if (configIsInCopy) {
 16169              	 .loc 13 3825 0
 16170 0046 634B     	 ldr r3,.L963+8
 16171 0048 1B78     	 ldrb r3,[r3]
 16172 004a 002B     	 cmp r3,#0
 16173 004c 06D0     	 beq .L951
3826:../cleanflight/src/main/interface/cli.c ****             currentConfig = pg->copy;
 16174              	 .loc 13 3826 0
 16175 004e BB69     	 ldr r3,[r7,#24]
 16176 0050 9B68     	 ldr r3,[r3,#8]
 16177 0052 BB62     	 str r3,[r7,#40]
3827:../cleanflight/src/main/interface/cli.c ****             defaultConfig = pg->address;
 16178              	 .loc 13 3827 0
 16179 0054 BB69     	 ldr r3,[r7,#24]
 16180 0056 5B68     	 ldr r3,[r3,#4]
 16181 0058 7B62     	 str r3,[r7,#36]
 16182 005a 04E0     	 b .L952
 16183              	.L951:
3828:../cleanflight/src/main/interface/cli.c ****         } else {
3829:../cleanflight/src/main/interface/cli.c ****             currentConfig = pg->address;
 16184              	 .loc 13 3829 0
 16185 005c BB69     	 ldr r3,[r7,#24]
 16186 005e 5B68     	 ldr r3,[r3,#4]
 16187 0060 BB62     	 str r3,[r7,#40]
3830:../cleanflight/src/main/interface/cli.c ****             defaultConfig = NULL;
 16188              	 .loc 13 3830 0
 16189 0062 0023     	 movs r3,#0
 16190 0064 7B62     	 str r3,[r7,#36]
 16191              	.L952:
 16192              	.LBB125:
3831:../cleanflight/src/main/interface/cli.c ****         }
3832:../cleanflight/src/main/interface/cli.c **** 
3833:../cleanflight/src/main/interface/cli.c ****         for (int index = 0; index < MAX_RESOURCE_INDEX(resourceTable[i].maxIndex); index++) {
 16193              	 .loc 13 3833 0
 16194 0066 0023     	 movs r3,#0
 16195 0068 3B62     	 str r3,[r7,#32]
 16196 006a 8CE0     	 b .L953
 16197              	.L961:
 16198              	.LBB126:
3834:../cleanflight/src/main/interface/cli.c ****             const ioTag_t ioTag = *((const uint8_t *)currentConfig + resourceTable[i].stride * inde
 16199              	 .loc 13 3834 0
 16200 006c 5749     	 ldr r1,.L963
 16201 006e FA6A     	 ldr r2,[r7,#44]
 16202 0070 1346     	 mov r3,r2
 16203 0072 5B00     	 lsls r3,r3,#1
 16204 0074 1344     	 add r3,r3,r2
 16205 0076 5B00     	 lsls r3,r3,#1
 16206 0078 0B44     	 add r3,r3,r1
 16207 007a DB78     	 ldrb r3,[r3,#3]
 16208 007c 1A46     	 mov r2,r3
 16209 007e 3B6A     	 ldr r3,[r7,#32]
 16210 0080 03FB02F3 	 mul r3,r3,r2
 16211 0084 1846     	 mov r0,r3
 16212 0086 5149     	 ldr r1,.L963
 16213 0088 FA6A     	 ldr r2,[r7,#44]
 16214 008a 1346     	 mov r3,r2
 16215 008c 5B00     	 lsls r3,r3,#1
 16216 008e 1344     	 add r3,r3,r2
 16217 0090 5B00     	 lsls r3,r3,#1
 16218 0092 0B44     	 add r3,r3,r1
 16219 0094 1B79     	 ldrb r3,[r3,#4]
 16220 0096 0344     	 add r3,r3,r0
 16221 0098 BA6A     	 ldr r2,[r7,#40]
 16222 009a 1344     	 add r3,r3,r2
 16223 009c 1B78     	 ldrb r3,[r3]
 16224 009e FB75     	 strb r3,[r7,#23]
3835:../cleanflight/src/main/interface/cli.c ****             const ioTag_t ioTagDefault = *((const uint8_t *)defaultConfig + resourceTable[i].stride
 16225              	 .loc 13 3835 0
 16226 00a0 4A49     	 ldr r1,.L963
 16227 00a2 FA6A     	 ldr r2,[r7,#44]
 16228 00a4 1346     	 mov r3,r2
 16229 00a6 5B00     	 lsls r3,r3,#1
 16230 00a8 1344     	 add r3,r3,r2
 16231 00aa 5B00     	 lsls r3,r3,#1
 16232 00ac 0B44     	 add r3,r3,r1
 16233 00ae DB78     	 ldrb r3,[r3,#3]
 16234 00b0 1A46     	 mov r2,r3
 16235 00b2 3B6A     	 ldr r3,[r7,#32]
 16236 00b4 03FB02F3 	 mul r3,r3,r2
 16237 00b8 1846     	 mov r0,r3
 16238 00ba 4449     	 ldr r1,.L963
 16239 00bc FA6A     	 ldr r2,[r7,#44]
 16240 00be 1346     	 mov r3,r2
 16241 00c0 5B00     	 lsls r3,r3,#1
 16242 00c2 1344     	 add r3,r3,r2
 16243 00c4 5B00     	 lsls r3,r3,#1
 16244 00c6 0B44     	 add r3,r3,r1
 16245 00c8 1B79     	 ldrb r3,[r3,#4]
 16246 00ca 0344     	 add r3,r3,r0
 16247 00cc 7A6A     	 ldr r2,[r7,#36]
 16248 00ce 1344     	 add r3,r3,r2
 16249 00d0 1B78     	 ldrb r3,[r3]
 16250 00d2 BB75     	 strb r3,[r7,#22]
3836:../cleanflight/src/main/interface/cli.c **** 
3837:../cleanflight/src/main/interface/cli.c ****             bool equalsDefault = ioTag == ioTagDefault;
 16251              	 .loc 13 3837 0
 16252 00d4 FA7D     	 ldrb r2,[r7,#23]
 16253 00d6 BB7D     	 ldrb r3,[r7,#22]
 16254 00d8 9A42     	 cmp r2,r3
 16255 00da 0CBF     	 ite eq
 16256 00dc 0123     	 moveq r3,#1
 16257 00de 0023     	 movne r3,#0
 16258 00e0 7B75     	 strb r3,[r7,#21]
3838:../cleanflight/src/main/interface/cli.c ****             const char *format = "resource %s %d %c%02d";
 16259              	 .loc 13 3838 0
 16260 00e2 3D4B     	 ldr r3,.L963+12
 16261 00e4 3B61     	 str r3,[r7,#16]
3839:../cleanflight/src/main/interface/cli.c ****             const char *formatUnassigned = "resource %s %d NONE";
 16262              	 .loc 13 3839 0
 16263 00e6 3D4B     	 ldr r3,.L963+16
 16264 00e8 FB60     	 str r3,[r7,#12]
3840:../cleanflight/src/main/interface/cli.c ****             if (!ioTagDefault) {
 16265              	 .loc 13 3840 0
 16266 00ea BB7D     	 ldrb r3,[r7,#22]
 16267 00ec 002B     	 cmp r3,#0
 16268 00ee 0BD1     	 bne .L954
3841:../cleanflight/src/main/interface/cli.c ****                 cliDefaultPrintLinef(dumpMask, equalsDefault, formatUnassigned, owner, RESOURCE_IND
 16269              	 .loc 13 3841 0
 16270 00f0 3B6A     	 ldr r3,[r7,#32]
 16271 00f2 0133     	 adds r3,r3,#1
 16272 00f4 F979     	 ldrb r1,[r7,#7]
 16273 00f6 7A7D     	 ldrb r2,[r7,#21]
 16274 00f8 0093     	 str r3,[sp]
 16275 00fa 0846     	 mov r0,r1
 16276 00fc 1146     	 mov r1,r2
 16277 00fe FA68     	 ldr r2,[r7,#12]
 16278 0100 FB69     	 ldr r3,[r7,#28]
 16279 0102 FFF7FEFF 	 bl cliDefaultPrintLinef
 16280 0106 13E0     	 b .L955
 16281              	.L954:
3842:../cleanflight/src/main/interface/cli.c ****             } else {
3843:../cleanflight/src/main/interface/cli.c ****                 cliDefaultPrintLinef(dumpMask, equalsDefault, format, owner, RESOURCE_INDEX(index),
 16282              	 .loc 13 3843 0
 16283 0108 3B6A     	 ldr r3,[r7,#32]
 16284 010a 591C     	 adds r1,r3,#1
 16285 010c BB7D     	 ldrb r3,[r7,#22]
 16286 010e 1B09     	 lsrs r3,r3,#4
 16287 0110 DBB2     	 uxtb r3,r3
 16288 0112 03F14002 	 add r2,r3,#64
 16289 0116 BB7D     	 ldrb r3,[r7,#22]
 16290 0118 03F00F03 	 and r3,r3,#15
 16291 011c F879     	 ldrb r0,[r7,#7]
 16292 011e 7C7D     	 ldrb r4,[r7,#21]
 16293 0120 0091     	 str r1,[sp]
 16294 0122 0192     	 str r2,[sp,#4]
 16295 0124 0293     	 str r3,[sp,#8]
 16296 0126 2146     	 mov r1,r4
 16297 0128 3A69     	 ldr r2,[r7,#16]
 16298 012a FB69     	 ldr r3,[r7,#28]
 16299 012c FFF7FEFF 	 bl cliDefaultPrintLinef
 16300              	.L955:
3844:../cleanflight/src/main/interface/cli.c ****             }
3845:../cleanflight/src/main/interface/cli.c ****             if (!ioTag) {
 16301              	 .loc 13 3845 0
 16302 0130 FB7D     	 ldrb r3,[r7,#23]
 16303 0132 002B     	 cmp r3,#0
 16304 0134 10D1     	 bne .L956
3846:../cleanflight/src/main/interface/cli.c ****                 if (!(dumpMask & HIDE_UNUSED)) {
 16305              	 .loc 13 3846 0
 16306 0136 FB79     	 ldrb r3,[r7,#7]
 16307 0138 03F04003 	 and r3,r3,#64
 16308 013c 002B     	 cmp r3,#0
 16309 013e 1FD1     	 bne .L958
3847:../cleanflight/src/main/interface/cli.c ****                     cliDumpPrintLinef(dumpMask, equalsDefault, formatUnassigned, owner, RESOURCE_IN
 16310              	 .loc 13 3847 0
 16311 0140 3B6A     	 ldr r3,[r7,#32]
 16312 0142 0133     	 adds r3,r3,#1
 16313 0144 F979     	 ldrb r1,[r7,#7]
 16314 0146 7A7D     	 ldrb r2,[r7,#21]
 16315 0148 0093     	 str r3,[sp]
 16316 014a 0846     	 mov r0,r1
 16317 014c 1146     	 mov r1,r2
 16318 014e FA68     	 ldr r2,[r7,#12]
 16319 0150 FB69     	 ldr r3,[r7,#28]
 16320 0152 FFF7FEFF 	 bl cliDumpPrintLinef
 16321 0156 13E0     	 b .L958
 16322              	.L956:
3848:../cleanflight/src/main/interface/cli.c ****                 }
3849:../cleanflight/src/main/interface/cli.c ****             } else {
3850:../cleanflight/src/main/interface/cli.c ****                 cliDumpPrintLinef(dumpMask, equalsDefault, format, owner, RESOURCE_INDEX(index), IO
 16323              	 .loc 13 3850 0
 16324 0158 3B6A     	 ldr r3,[r7,#32]
 16325 015a 591C     	 adds r1,r3,#1
 16326 015c FB7D     	 ldrb r3,[r7,#23]
 16327 015e 1B09     	 lsrs r3,r3,#4
 16328 0160 DBB2     	 uxtb r3,r3
 16329 0162 03F14002 	 add r2,r3,#64
 16330 0166 FB7D     	 ldrb r3,[r7,#23]
 16331 0168 03F00F03 	 and r3,r3,#15
 16332 016c F879     	 ldrb r0,[r7,#7]
 16333 016e 7C7D     	 ldrb r4,[r7,#21]
 16334 0170 0091     	 str r1,[sp]
 16335 0172 0192     	 str r2,[sp,#4]
 16336 0174 0293     	 str r3,[sp,#8]
 16337 0176 2146     	 mov r1,r4
 16338 0178 3A69     	 ldr r2,[r7,#16]
 16339 017a FB69     	 ldr r3,[r7,#28]
 16340 017c FFF7FEFF 	 bl cliDumpPrintLinef
 16341              	.L958:
 16342              	.LBE126:
3833:../cleanflight/src/main/interface/cli.c ****             const ioTag_t ioTag = *((const uint8_t *)currentConfig + resourceTable[i].stride * inde
 16343              	 .loc 13 3833 0 discriminator 2
 16344 0180 3B6A     	 ldr r3,[r7,#32]
 16345 0182 0133     	 adds r3,r3,#1
 16346 0184 3B62     	 str r3,[r7,#32]
 16347              	.L953:
3833:../cleanflight/src/main/interface/cli.c ****             const ioTag_t ioTag = *((const uint8_t *)currentConfig + resourceTable[i].stride * inde
 16348              	 .loc 13 3833 0 is_stmt 0 discriminator 1
 16349 0186 1149     	 ldr r1,.L963
 16350 0188 FA6A     	 ldr r2,[r7,#44]
 16351 018a 1346     	 mov r3,r2
 16352 018c 5B00     	 lsls r3,r3,#1
 16353 018e 1344     	 add r3,r3,r2
 16354 0190 5B00     	 lsls r3,r3,#1
 16355 0192 0B44     	 add r3,r3,r1
 16356 0194 5B79     	 ldrb r3,[r3,#5]
 16357 0196 002B     	 cmp r3,#0
 16358 0198 09D0     	 beq .L959
3833:../cleanflight/src/main/interface/cli.c ****             const ioTag_t ioTag = *((const uint8_t *)currentConfig + resourceTable[i].stride * inde
 16359              	 .loc 13 3833 0 discriminator 3
 16360 019a 0C49     	 ldr r1,.L963
 16361 019c FA6A     	 ldr r2,[r7,#44]
 16362 019e 1346     	 mov r3,r2
 16363 01a0 5B00     	 lsls r3,r3,#1
 16364 01a2 1344     	 add r3,r3,r2
 16365 01a4 5B00     	 lsls r3,r3,#1
 16366 01a6 0B44     	 add r3,r3,r1
 16367 01a8 5B79     	 ldrb r3,[r3,#5]
 16368 01aa 1A46     	 mov r2,r3
 16369 01ac 00E0     	 b .L960
 16370              	.L959:
3833:../cleanflight/src/main/interface/cli.c ****             const ioTag_t ioTag = *((const uint8_t *)currentConfig + resourceTable[i].stride * inde
 16371              	 .loc 13 3833 0 discriminator 4
 16372 01ae 0122     	 movs r2,#1
 16373              	.L960:
3833:../cleanflight/src/main/interface/cli.c ****             const ioTag_t ioTag = *((const uint8_t *)currentConfig + resourceTable[i].stride * inde
 16374              	 .loc 13 3833 0 discriminator 6
 16375 01b0 3B6A     	 ldr r3,[r7,#32]
 16376 01b2 9A42     	 cmp r2,r3
 16377 01b4 3FF75AAF 	 bgt .L961
 16378              	.LBE125:
 16379              	.LBE124:
3820:../cleanflight/src/main/interface/cli.c ****         const char* owner = ownerNames[resourceTable[i].owner];
 16380              	 .loc 13 3820 0 is_stmt 1 discriminator 2
 16381 01b8 FB6A     	 ldr r3,[r7,#44]
 16382 01ba 0133     	 adds r3,r3,#1
 16383 01bc FB62     	 str r3,[r7,#44]
 16384              	.L950:
3820:../cleanflight/src/main/interface/cli.c ****         const char* owner = ownerNames[resourceTable[i].owner];
 16385              	 .loc 13 3820 0 is_stmt 0 discriminator 1
 16386 01be FB6A     	 ldr r3,[r7,#44]
 16387 01c0 182B     	 cmp r3,#24
 16388 01c2 7FF625AF 	 bls .L962
 16389              	.LBE123:
3851:../cleanflight/src/main/interface/cli.c ****             }
3852:../cleanflight/src/main/interface/cli.c ****         }
3853:../cleanflight/src/main/interface/cli.c ****     }
3854:../cleanflight/src/main/interface/cli.c **** }
 16390              	 .loc 13 3854 0 is_stmt 1
 16391 01c6 3437     	 adds r7,r7,#52
 16392              	.LCFI628:
 16393              	 .cfi_def_cfa_offset 12
 16394 01c8 BD46     	 mov sp,r7
 16395              	.LCFI629:
 16396              	 .cfi_def_cfa_register 13
 16397              	 
 16398 01ca 90BD     	 pop {r4,r7,pc}
 16399              	.L964:
 16400              	 .align 2
 16401              	.L963:
 16402 01cc 00000000 	 .word resourceTable
 16403 01d0 00000000 	 .word ownerNames
 16404 01d4 00000000 	 .word configIsInCopy
 16405 01d8 2C0D0000 	 .word .LC212
 16406 01dc 440D0000 	 .word .LC213
 16407              	 .cfi_endproc
 16408              	.LFE784:
 16410              	 .section .rodata
 16411              	 .align 2
 16412              	.LC214:
 16413 0d58 20256400 	 .ascii " %d\000"
 16414              	 .section .text.printResourceOwner,"ax",%progbits
 16415              	 .align 2
 16416              	 .thumb
 16417              	 .thumb_func
 16419              	printResourceOwner:
 16420              	.LFB785:
3855:../cleanflight/src/main/interface/cli.c **** 
3856:../cleanflight/src/main/interface/cli.c **** static void printResourceOwner(uint8_t owner, uint8_t index)
3857:../cleanflight/src/main/interface/cli.c **** {
 16421              	 .loc 13 3857 0
 16422              	 .cfi_startproc
 16423              	 
 16424              	 
 16425 0000 80B5     	 push {r7,lr}
 16426              	.LCFI630:
 16427              	 .cfi_def_cfa_offset 8
 16428              	 .cfi_offset 7,-8
 16429              	 .cfi_offset 14,-4
 16430 0002 82B0     	 sub sp,sp,#8
 16431              	.LCFI631:
 16432              	 .cfi_def_cfa_offset 16
 16433 0004 00AF     	 add r7,sp,#0
 16434              	.LCFI632:
 16435              	 .cfi_def_cfa_register 7
 16436 0006 0346     	 mov r3,r0
 16437 0008 0A46     	 mov r2,r1
 16438 000a FB71     	 strb r3,[r7,#7]
 16439 000c 1346     	 mov r3,r2
 16440 000e BB71     	 strb r3,[r7,#6]
3858:../cleanflight/src/main/interface/cli.c ****     cliPrintf("%s", ownerNames[resourceTable[owner].owner]);
 16441              	 .loc 13 3858 0
 16442 0010 FA79     	 ldrb r2,[r7,#7]
 16443 0012 1149     	 ldr r1,.L967
 16444 0014 1346     	 mov r3,r2
 16445 0016 5B00     	 lsls r3,r3,#1
 16446 0018 1344     	 add r3,r3,r2
 16447 001a 5B00     	 lsls r3,r3,#1
 16448 001c 0B44     	 add r3,r3,r1
 16449 001e 1B78     	 ldrb r3,[r3]
 16450 0020 1A46     	 mov r2,r3
 16451 0022 0E4B     	 ldr r3,.L967+4
 16452 0024 53F82230 	 ldr r3,[r3,r2,lsl#2]
 16453 0028 0D48     	 ldr r0,.L967+8
 16454 002a 1946     	 mov r1,r3
 16455 002c FFF7FEFF 	 bl cliPrintf
3859:../cleanflight/src/main/interface/cli.c **** 
3860:../cleanflight/src/main/interface/cli.c ****     if (resourceTable[owner].maxIndex > 0) {
 16456              	 .loc 13 3860 0
 16457 0030 FA79     	 ldrb r2,[r7,#7]
 16458 0032 0949     	 ldr r1,.L967
 16459 0034 1346     	 mov r3,r2
 16460 0036 5B00     	 lsls r3,r3,#1
 16461 0038 1344     	 add r3,r3,r2
 16462 003a 5B00     	 lsls r3,r3,#1
 16463 003c 0B44     	 add r3,r3,r1
 16464 003e 5B79     	 ldrb r3,[r3,#5]
 16465 0040 002B     	 cmp r3,#0
 16466 0042 05D0     	 beq .L965
3861:../cleanflight/src/main/interface/cli.c ****         cliPrintf(" %d", RESOURCE_INDEX(index));
 16467              	 .loc 13 3861 0
 16468 0044 BB79     	 ldrb r3,[r7,#6]
 16469 0046 0133     	 adds r3,r3,#1
 16470 0048 0648     	 ldr r0,.L967+12
 16471 004a 1946     	 mov r1,r3
 16472 004c FFF7FEFF 	 bl cliPrintf
 16473              	.L965:
3862:../cleanflight/src/main/interface/cli.c ****     }
3863:../cleanflight/src/main/interface/cli.c **** }
 16474              	 .loc 13 3863 0
 16475 0050 0837     	 adds r7,r7,#8
 16476              	.LCFI633:
 16477              	 .cfi_def_cfa_offset 8
 16478 0052 BD46     	 mov sp,r7
 16479              	.LCFI634:
 16480              	 .cfi_def_cfa_register 13
 16481              	 
 16482 0054 80BD     	 pop {r7,pc}
 16483              	.L968:
 16484 0056 00BF     	 .align 2
 16485              	.L967:
 16486 0058 00000000 	 .word resourceTable
 16487 005c 00000000 	 .word ownerNames
 16488 0060 AC020000 	 .word .LC70
 16489 0064 580D0000 	 .word .LC214
 16490              	 .cfi_endproc
 16491              	.LFE785:
 16493              	 .section .rodata
 16494              	 .align 2
 16495              	.LC215:
 16496 0d5c 0D0A4E4F 	 .ascii "\015\012NOTE: %c%02d already assigned to \000"
 16496      54453A20 
 16496      25632530 
 16496      32642061 
 16496      6C726561 
 16497              	 .align 2
 16498              	.LC216:
 16499 0d80 2E2000   	 .ascii ". \000"
 16500 0d83 00       	 .align 2
 16501              	.LC217:
 16502 0d84 20646973 	 .ascii " disabled\000"
 16502      61626C65 
 16502      6400
 16503 0d8e 0000     	 .align 2
 16504              	.LC218:
 16505 0d90 2E00     	 .ascii ".\000"
 16506              	 .section .text.resourceCheck,"ax",%progbits
 16507              	 .align 2
 16508              	 .thumb
 16509              	 .thumb_func
 16511              	resourceCheck:
 16512              	.LFB786:
3864:../cleanflight/src/main/interface/cli.c **** 
3865:../cleanflight/src/main/interface/cli.c **** static void resourceCheck(uint8_t resourceIndex, uint8_t index, ioTag_t newTag)
3866:../cleanflight/src/main/interface/cli.c **** {
 16513              	 .loc 13 3866 0
 16514              	 .cfi_startproc
 16515              	 
 16516              	 
 16517 0000 90B5     	 push {r4,r7,lr}
 16518              	.LCFI635:
 16519              	 .cfi_def_cfa_offset 12
 16520              	 .cfi_offset 4,-12
 16521              	 .cfi_offset 7,-8
 16522              	 .cfi_offset 14,-4
 16523 0002 89B0     	 sub sp,sp,#36
 16524              	.LCFI636:
 16525              	 .cfi_def_cfa_offset 48
 16526 0004 00AF     	 add r7,sp,#0
 16527              	.LCFI637:
 16528              	 .cfi_def_cfa_register 7
 16529 0006 0346     	 mov r3,r0
 16530 0008 FB71     	 strb r3,[r7,#7]
 16531 000a 0B46     	 mov r3,r1
 16532 000c BB71     	 strb r3,[r7,#6]
 16533 000e 1346     	 mov r3,r2
 16534 0010 7B71     	 strb r3,[r7,#5]
3867:../cleanflight/src/main/interface/cli.c ****     if (!newTag) {
 16535              	 .loc 13 3867 0
 16536 0012 7B79     	 ldrb r3,[r7,#5]
 16537 0014 002B     	 cmp r3,#0
 16538 0016 00D1     	 bne .L970
3868:../cleanflight/src/main/interface/cli.c ****         return;
 16539              	 .loc 13 3868 0
 16540 0018 7CE0     	 b .L969
 16541              	.L970:
3869:../cleanflight/src/main/interface/cli.c ****     }
3870:../cleanflight/src/main/interface/cli.c **** 
3871:../cleanflight/src/main/interface/cli.c ****     const char * format = "\r\nNOTE: %c%02d already assigned to ";
 16542              	 .loc 13 3871 0
 16543 001a 404B     	 ldr r3,.L982
 16544 001c 3B61     	 str r3,[r7,#16]
 16545              	.LBB127:
3872:../cleanflight/src/main/interface/cli.c ****     for (int r = 0; r < (int)ARRAYLEN(resourceTable); r++) {
 16546              	 .loc 13 3872 0
 16547 001e 0023     	 movs r3,#0
 16548 0020 FB61     	 str r3,[r7,#28]
 16549 0022 74E0     	 b .L972
 16550              	.L981:
 16551              	.LBB128:
3873:../cleanflight/src/main/interface/cli.c ****         for (int i = 0; i < MAX_RESOURCE_INDEX(resourceTable[r].maxIndex); i++) {
 16552              	 .loc 13 3873 0
 16553 0024 0023     	 movs r3,#0
 16554 0026 BB61     	 str r3,[r7,#24]
 16555 0028 56E0     	 b .L973
 16556              	.L980:
 16557              	.LBB129:
3874:../cleanflight/src/main/interface/cli.c ****             ioTag_t *tag = getIoTag(resourceTable[r], i);
 16558              	 .loc 13 3874 0
 16559 002a BB69     	 ldr r3,[r7,#24]
 16560 002c DCB2     	 uxtb r4,r3
 16561 002e 3C49     	 ldr r1,.L982+4
 16562 0030 FA69     	 ldr r2,[r7,#28]
 16563 0032 1346     	 mov r3,r2
 16564 0034 5B00     	 lsls r3,r3,#1
 16565 0036 1344     	 add r3,r3,r2
 16566 0038 5B00     	 lsls r3,r3,#1
 16567 003a 0B44     	 add r3,r3,r1
 16568 003c 1A68     	 ldr r2,[r3]
 16569 003e 0021     	 movs r1,#0
 16570 0040 1146     	 mov r1,r2
 16571 0042 9A88     	 ldrh r2,[r3,#4]
 16572 0044 0023     	 movs r3,#0
 16573 0046 62F30F03 	 bfi r3,r2,#0,#16
 16574 004a 0846     	 mov r0,r1
 16575 004c 1946     	 mov r1,r3
 16576 004e 2246     	 mov r2,r4
 16577 0050 FFF7FEFF 	 bl getIoTag
 16578 0054 F860     	 str r0,[r7,#12]
3875:../cleanflight/src/main/interface/cli.c ****             if (*tag == newTag) {
 16579              	 .loc 13 3875 0
 16580 0056 FB68     	 ldr r3,[r7,#12]
 16581 0058 1B78     	 ldrb r3,[r3]
 16582 005a 7A79     	 ldrb r2,[r7,#5]
 16583 005c 9A42     	 cmp r2,r3
 16584 005e 38D1     	 bne .L974
 16585              	.LBB130:
3876:../cleanflight/src/main/interface/cli.c ****                 bool cleared = false;
 16586              	 .loc 13 3876 0
 16587 0060 0023     	 movs r3,#0
 16588 0062 FB75     	 strb r3,[r7,#23]
3877:../cleanflight/src/main/interface/cli.c ****                 if (r == resourceIndex) {
 16589              	 .loc 13 3877 0
 16590 0064 FA79     	 ldrb r2,[r7,#7]
 16591 0066 FB69     	 ldr r3,[r7,#28]
 16592 0068 9A42     	 cmp r2,r3
 16593 006a 09D1     	 bne .L975
3878:../cleanflight/src/main/interface/cli.c ****                     if (i == index) {
 16594              	 .loc 13 3878 0
 16595 006c BA79     	 ldrb r2,[r7,#6]
 16596 006e BB69     	 ldr r3,[r7,#24]
 16597 0070 9A42     	 cmp r2,r3
 16598 0072 00D1     	 bne .L976
3879:../cleanflight/src/main/interface/cli.c ****                         continue;
 16599              	 .loc 13 3879 0
 16600 0074 2DE0     	 b .L974
 16601              	.L976:
3880:../cleanflight/src/main/interface/cli.c ****                     }
3881:../cleanflight/src/main/interface/cli.c ****                     *tag = IO_TAG_NONE;
 16602              	 .loc 13 3881 0
 16603 0076 FB68     	 ldr r3,[r7,#12]
 16604 0078 0022     	 movs r2,#0
 16605 007a 1A70     	 strb r2,[r3]
3882:../cleanflight/src/main/interface/cli.c ****                     cleared = true;
 16606              	 .loc 13 3882 0
 16607 007c 0123     	 movs r3,#1
 16608 007e FB75     	 strb r3,[r7,#23]
 16609              	.L975:
3883:../cleanflight/src/main/interface/cli.c ****                 }
3884:../cleanflight/src/main/interface/cli.c **** 
3885:../cleanflight/src/main/interface/cli.c ****                 cliPrintf(format, DEFIO_TAG_GPIOID(newTag) + 'A', DEFIO_TAG_PIN(newTag));
 16610              	 .loc 13 3885 0
 16611 0080 7B79     	 ldrb r3,[r7,#5]
 16612 0082 1B09     	 lsrs r3,r3,#4
 16613 0084 DBB2     	 uxtb r3,r3
 16614 0086 03F14002 	 add r2,r3,#64
 16615 008a 7B79     	 ldrb r3,[r7,#5]
 16616 008c 03F00F03 	 and r3,r3,#15
 16617 0090 3869     	 ldr r0,[r7,#16]
 16618 0092 1146     	 mov r1,r2
 16619 0094 1A46     	 mov r2,r3
 16620 0096 FFF7FEFF 	 bl cliPrintf
3886:../cleanflight/src/main/interface/cli.c **** 
3887:../cleanflight/src/main/interface/cli.c ****                 printResourceOwner(r, i);
 16621              	 .loc 13 3887 0
 16622 009a FB69     	 ldr r3,[r7,#28]
 16623 009c DAB2     	 uxtb r2,r3
 16624 009e BB69     	 ldr r3,[r7,#24]
 16625 00a0 DBB2     	 uxtb r3,r3
 16626 00a2 1046     	 mov r0,r2
 16627 00a4 1946     	 mov r1,r3
 16628 00a6 FFF7FEFF 	 bl printResourceOwner
3888:../cleanflight/src/main/interface/cli.c **** 
3889:../cleanflight/src/main/interface/cli.c ****                 if (cleared) {
 16629              	 .loc 13 3889 0
 16630 00aa FB7D     	 ldrb r3,[r7,#23]
 16631 00ac 002B     	 cmp r3,#0
 16632 00ae 0DD0     	 beq .L977
3890:../cleanflight/src/main/interface/cli.c ****                     cliPrintf(". ");
 16633              	 .loc 13 3890 0
 16634 00b0 1C48     	 ldr r0,.L982+8
 16635 00b2 FFF7FEFF 	 bl cliPrintf
3891:../cleanflight/src/main/interface/cli.c ****                     printResourceOwner(r, i);
 16636              	 .loc 13 3891 0
 16637 00b6 FB69     	 ldr r3,[r7,#28]
 16638 00b8 DAB2     	 uxtb r2,r3
 16639 00ba BB69     	 ldr r3,[r7,#24]
 16640 00bc DBB2     	 uxtb r3,r3
 16641 00be 1046     	 mov r0,r2
 16642 00c0 1946     	 mov r1,r3
 16643 00c2 FFF7FEFF 	 bl printResourceOwner
3892:../cleanflight/src/main/interface/cli.c ****                     cliPrintf(" disabled");
 16644              	 .loc 13 3892 0
 16645 00c6 1848     	 ldr r0,.L982+12
 16646 00c8 FFF7FEFF 	 bl cliPrintf
 16647              	.L977:
3893:../cleanflight/src/main/interface/cli.c ****                 }
3894:../cleanflight/src/main/interface/cli.c **** 
3895:../cleanflight/src/main/interface/cli.c ****                 cliPrintLine(".");
 16648              	 .loc 13 3895 0
 16649 00cc 1748     	 ldr r0,.L982+16
 16650 00ce FFF7FEFF 	 bl cliPrintLine
 16651              	.L974:
 16652              	.LBE130:
 16653              	.LBE129:
3873:../cleanflight/src/main/interface/cli.c ****             ioTag_t *tag = getIoTag(resourceTable[r], i);
 16654              	 .loc 13 3873 0 discriminator 2
 16655 00d2 BB69     	 ldr r3,[r7,#24]
 16656 00d4 0133     	 adds r3,r3,#1
 16657 00d6 BB61     	 str r3,[r7,#24]
 16658              	.L973:
3873:../cleanflight/src/main/interface/cli.c ****             ioTag_t *tag = getIoTag(resourceTable[r], i);
 16659              	 .loc 13 3873 0 is_stmt 0 discriminator 1
 16660 00d8 1149     	 ldr r1,.L982+4
 16661 00da FA69     	 ldr r2,[r7,#28]
 16662 00dc 1346     	 mov r3,r2
 16663 00de 5B00     	 lsls r3,r3,#1
 16664 00e0 1344     	 add r3,r3,r2
 16665 00e2 5B00     	 lsls r3,r3,#1
 16666 00e4 0B44     	 add r3,r3,r1
 16667 00e6 5B79     	 ldrb r3,[r3,#5]
 16668 00e8 002B     	 cmp r3,#0
 16669 00ea 09D0     	 beq .L978
3873:../cleanflight/src/main/interface/cli.c ****             ioTag_t *tag = getIoTag(resourceTable[r], i);
 16670              	 .loc 13 3873 0 discriminator 3
 16671 00ec 0C49     	 ldr r1,.L982+4
 16672 00ee FA69     	 ldr r2,[r7,#28]
 16673 00f0 1346     	 mov r3,r2
 16674 00f2 5B00     	 lsls r3,r3,#1
 16675 00f4 1344     	 add r3,r3,r2
 16676 00f6 5B00     	 lsls r3,r3,#1
 16677 00f8 0B44     	 add r3,r3,r1
 16678 00fa 5B79     	 ldrb r3,[r3,#5]
 16679 00fc 1A46     	 mov r2,r3
 16680 00fe 00E0     	 b .L979
 16681              	.L978:
3873:../cleanflight/src/main/interface/cli.c ****             ioTag_t *tag = getIoTag(resourceTable[r], i);
 16682              	 .loc 13 3873 0 discriminator 4
 16683 0100 0122     	 movs r2,#1
 16684              	.L979:
3873:../cleanflight/src/main/interface/cli.c ****             ioTag_t *tag = getIoTag(resourceTable[r], i);
 16685              	 .loc 13 3873 0 discriminator 6
 16686 0102 BB69     	 ldr r3,[r7,#24]
 16687 0104 9A42     	 cmp r2,r3
 16688 0106 90DC     	 bgt .L980
 16689              	.LBE128:
3872:../cleanflight/src/main/interface/cli.c ****         for (int i = 0; i < MAX_RESOURCE_INDEX(resourceTable[r].maxIndex); i++) {
 16690              	 .loc 13 3872 0 is_stmt 1 discriminator 2
 16691 0108 FB69     	 ldr r3,[r7,#28]
 16692 010a 0133     	 adds r3,r3,#1
 16693 010c FB61     	 str r3,[r7,#28]
 16694              	.L972:
3872:../cleanflight/src/main/interface/cli.c ****         for (int i = 0; i < MAX_RESOURCE_INDEX(resourceTable[r].maxIndex); i++) {
 16695              	 .loc 13 3872 0 is_stmt 0 discriminator 1
 16696 010e FB69     	 ldr r3,[r7,#28]
 16697 0110 182B     	 cmp r3,#24
 16698 0112 87DD     	 ble .L981
 16699              	.L969:
 16700              	.LBE127:
3896:../cleanflight/src/main/interface/cli.c ****             }
3897:../cleanflight/src/main/interface/cli.c ****         }
3898:../cleanflight/src/main/interface/cli.c ****     }
3899:../cleanflight/src/main/interface/cli.c **** }
 16701              	 .loc 13 3899 0 is_stmt 1
 16702 0114 2437     	 adds r7,r7,#36
 16703              	.LCFI638:
 16704              	 .cfi_def_cfa_offset 12
 16705 0116 BD46     	 mov sp,r7
 16706              	.LCFI639:
 16707              	 .cfi_def_cfa_register 13
 16708              	 
 16709 0118 90BD     	 pop {r4,r7,pc}
 16710              	.L983:
 16711 011a 00BF     	 .align 2
 16712              	.L982:
 16713 011c 5C0D0000 	 .word .LC215
 16714 0120 00000000 	 .word resourceTable
 16715 0124 800D0000 	 .word .LC216
 16716 0128 840D0000 	 .word .LC217
 16717 012c 900D0000 	 .word .LC218
 16718              	 .cfi_endproc
 16719              	.LFE786:
 16721              	 .section .rodata
 16722 0d92 0000     	 .align 2
 16723              	.LC219:
 16724 0d94 4E4F4E45 	 .ascii "NONE\000"
 16724      00
 16725              	 .section .text.strToPin,"ax",%progbits
 16726              	 .align 2
 16727              	 .thumb
 16728              	 .thumb_func
 16730              	strToPin:
 16731              	.LFB787:
3900:../cleanflight/src/main/interface/cli.c **** 
3901:../cleanflight/src/main/interface/cli.c **** static bool strToPin(char *pch, ioTag_t *tag)
3902:../cleanflight/src/main/interface/cli.c **** {
 16732              	 .loc 13 3902 0
 16733              	 .cfi_startproc
 16734              	 
 16735              	 
 16736 0000 80B5     	 push {r7,lr}
 16737              	.LCFI640:
 16738              	 .cfi_def_cfa_offset 8
 16739              	 .cfi_offset 7,-8
 16740              	 .cfi_offset 14,-4
 16741 0002 84B0     	 sub sp,sp,#16
 16742              	.LCFI641:
 16743              	 .cfi_def_cfa_offset 24
 16744 0004 00AF     	 add r7,sp,#0
 16745              	.LCFI642:
 16746              	 .cfi_def_cfa_register 7
 16747 0006 7860     	 str r0,[r7,#4]
 16748 0008 3960     	 str r1,[r7]
3903:../cleanflight/src/main/interface/cli.c ****     if (strcasecmp(pch, "NONE") == 0) {
 16749              	 .loc 13 3903 0
 16750 000a 7868     	 ldr r0,[r7,#4]
 16751 000c 1C49     	 ldr r1,.L990
 16752 000e FFF7FEFF 	 bl strcasecmp
 16753 0012 0346     	 mov r3,r0
 16754 0014 002B     	 cmp r3,#0
 16755 0016 04D1     	 bne .L985
3904:../cleanflight/src/main/interface/cli.c ****         *tag = IO_TAG_NONE;
 16756              	 .loc 13 3904 0
 16757 0018 3B68     	 ldr r3,[r7]
 16758 001a 0022     	 movs r2,#0
 16759 001c 1A70     	 strb r2,[r3]
3905:../cleanflight/src/main/interface/cli.c ****         return true;
 16760              	 .loc 13 3905 0
 16761 001e 0123     	 movs r3,#1
 16762 0020 2AE0     	 b .L986
 16763              	.L985:
 16764              	.LBB131:
3906:../cleanflight/src/main/interface/cli.c ****     } else {
3907:../cleanflight/src/main/interface/cli.c ****         unsigned pin = 0;
 16765              	 .loc 13 3907 0
 16766 0022 0023     	 movs r3,#0
 16767 0024 FB60     	 str r3,[r7,#12]
3908:../cleanflight/src/main/interface/cli.c ****         unsigned port = (*pch >= 'a') ? *pch - 'a' : *pch - 'A';
 16768              	 .loc 13 3908 0
 16769 0026 7B68     	 ldr r3,[r7,#4]
 16770 0028 1B78     	 ldrb r3,[r3]
 16771 002a 602B     	 cmp r3,#96
 16772 002c 03D9     	 bls .L987
 16773              	 .loc 13 3908 0 is_stmt 0 discriminator 1
 16774 002e 7B68     	 ldr r3,[r7,#4]
 16775 0030 1B78     	 ldrb r3,[r3]
 16776 0032 613B     	 subs r3,r3,#97
 16777 0034 02E0     	 b .L988
 16778              	.L987:
 16779              	 .loc 13 3908 0 discriminator 2
 16780 0036 7B68     	 ldr r3,[r7,#4]
 16781 0038 1B78     	 ldrb r3,[r3]
 16782 003a 413B     	 subs r3,r3,#65
 16783              	.L988:
 16784              	 .loc 13 3908 0 discriminator 4
 16785 003c BB60     	 str r3,[r7,#8]
3909:../cleanflight/src/main/interface/cli.c **** 
3910:../cleanflight/src/main/interface/cli.c ****         if (port < 8) {
 16786              	 .loc 13 3910 0 is_stmt 1 discriminator 4
 16787 003e BB68     	 ldr r3,[r7,#8]
 16788 0040 072B     	 cmp r3,#7
 16789 0042 18D8     	 bhi .L989
3911:../cleanflight/src/main/interface/cli.c ****             pch++;
 16790              	 .loc 13 3911 0
 16791 0044 7B68     	 ldr r3,[r7,#4]
 16792 0046 0133     	 adds r3,r3,#1
 16793 0048 7B60     	 str r3,[r7,#4]
3912:../cleanflight/src/main/interface/cli.c ****             pin = atoi(pch);
 16794              	 .loc 13 3912 0
 16795 004a 7868     	 ldr r0,[r7,#4]
 16796 004c FFF7FEFF 	 bl atoi
 16797 0050 0346     	 mov r3,r0
 16798 0052 FB60     	 str r3,[r7,#12]
3913:../cleanflight/src/main/interface/cli.c ****             if (pin < 16) {
 16799              	 .loc 13 3913 0
 16800 0054 FB68     	 ldr r3,[r7,#12]
 16801 0056 0F2B     	 cmp r3,#15
 16802 0058 0DD8     	 bhi .L989
3914:../cleanflight/src/main/interface/cli.c ****                 *tag = DEFIO_TAG_MAKE(port, pin);
 16803              	 .loc 13 3914 0
 16804 005a BB68     	 ldr r3,[r7,#8]
 16805 005c DBB2     	 uxtb r3,r3
 16806 005e 0133     	 adds r3,r3,#1
 16807 0060 DBB2     	 uxtb r3,r3
 16808 0062 1B01     	 lsls r3,r3,#4
 16809 0064 DAB2     	 uxtb r2,r3
 16810 0066 FB68     	 ldr r3,[r7,#12]
 16811 0068 DBB2     	 uxtb r3,r3
 16812 006a 1343     	 orrs r3,r3,r2
 16813 006c DAB2     	 uxtb r2,r3
 16814 006e 3B68     	 ldr r3,[r7]
 16815 0070 1A70     	 strb r2,[r3]
3915:../cleanflight/src/main/interface/cli.c ****                 return true;
 16816              	 .loc 13 3915 0
 16817 0072 0123     	 movs r3,#1
 16818 0074 00E0     	 b .L986
 16819              	.L989:
 16820              	.LBE131:
3916:../cleanflight/src/main/interface/cli.c ****             }
3917:../cleanflight/src/main/interface/cli.c ****         }
3918:../cleanflight/src/main/interface/cli.c ****     }
3919:../cleanflight/src/main/interface/cli.c ****     return false;
 16821              	 .loc 13 3919 0
 16822 0076 0023     	 movs r3,#0
 16823              	.L986:
3920:../cleanflight/src/main/interface/cli.c **** }
 16824              	 .loc 13 3920 0
 16825 0078 1846     	 mov r0,r3
 16826 007a 1037     	 adds r7,r7,#16
 16827              	.LCFI643:
 16828              	 .cfi_def_cfa_offset 8
 16829 007c BD46     	 mov sp,r7
 16830              	.LCFI644:
 16831              	 .cfi_def_cfa_register 13
 16832              	 
 16833 007e 80BD     	 pop {r7,pc}
 16834              	.L991:
 16835              	 .align 2
 16836              	.L990:
 16837 0080 940D0000 	 .word .LC219
 16838              	 .cfi_endproc
 16839              	.LFE787:
 16841              	 .section .rodata
 16842 0d99 000000   	 .align 2
 16843              	.LC220:
 16844 0d9c 43757272 	 .ascii "Currently active IO resource assignments:\015\012(r"
 16844      656E746C 
 16844      79206163 
 16844      74697665 
 16844      20494F20 
 16845 0dc9 65626F6F 	 .ascii "eboot to update)\000"
 16845      7420746F 
 16845      20757064 
 16845      61746529 
 16845      00
 16846 0dda 0000     	 .align 2
 16847              	.LC221:
 16848 0ddc 25632530 	 .ascii "%c%02d: %s\000"
 16848      32643A20 
 16848      257300
 16849 0de7 00       	 .align 2
 16850              	.LC222:
 16851 0de8 0D0A5573 	 .ascii "\015\012Use: 'resource' to see how to change resour"
 16851      653A2027 
 16851      7265736F 
 16851      75726365 
 16851      2720746F 
 16852 0e15 6365732E 	 .ascii "ces.\000"
 16852      00
 16853 0e1a 0000     	 .align 2
 16854              	.LC223:
 16855 0e1c 496E7661 	 .ascii "Invalid\000"
 16855      6C696400 
 16856              	 .align 2
 16857              	.LC224:
 16858 0e24 5265736F 	 .ascii "Resource is freed\000"
 16858      75726365 
 16858      20697320 
 16858      66726565 
 16858      6400
 16859 0e36 0000     	 .align 2
 16860              	.LC225:
 16861 0e38 0D0A5265 	 .ascii "\015\012Resource is set to %c%02d\000"
 16861      736F7572 
 16861      63652069 
 16861      73207365 
 16861      7420746F 
 16862              	 .section .text.cliResource,"ax",%progbits
 16863              	 .align 2
 16864              	 .thumb
 16865              	 .thumb_func
 16867              	cliResource:
 16868              	.LFB788:
3921:../cleanflight/src/main/interface/cli.c **** 
3922:../cleanflight/src/main/interface/cli.c **** static void cliResource(char *cmdline)
3923:../cleanflight/src/main/interface/cli.c **** {
 16869              	 .loc 13 3923 0
 16870              	 .cfi_startproc
 16871              	 
 16872              	 
 16873 0000 90B5     	 push {r4,r7,lr}
 16874              	.LCFI645:
 16875              	 .cfi_def_cfa_offset 12
 16876              	 .cfi_offset 4,-12
 16877              	 .cfi_offset 7,-8
 16878              	 .cfi_offset 14,-4
 16879 0002 8DB0     	 sub sp,sp,#52
 16880              	.LCFI646:
 16881              	 .cfi_def_cfa_offset 64
 16882 0004 00AF     	 add r7,sp,#0
 16883              	.LCFI647:
 16884              	 .cfi_def_cfa_register 7
 16885 0006 7860     	 str r0,[r7,#4]
3924:../cleanflight/src/main/interface/cli.c ****     int len = strlen(cmdline);
 16886              	 .loc 13 3924 0
 16887 0008 7868     	 ldr r0,[r7,#4]
 16888 000a FFF7FEFF 	 bl strlen
 16889 000e 0346     	 mov r3,r0
 16890 0010 FB61     	 str r3,[r7,#28]
3925:../cleanflight/src/main/interface/cli.c **** 
3926:../cleanflight/src/main/interface/cli.c ****     if (len == 0) {
 16891              	 .loc 13 3926 0
 16892 0012 FB69     	 ldr r3,[r7,#28]
 16893 0014 002B     	 cmp r3,#0
 16894 0016 03D1     	 bne .L993
3927:../cleanflight/src/main/interface/cli.c ****         printResource(DUMP_MASTER | HIDE_UNUSED);
 16895              	 .loc 13 3927 0
 16896 0018 4120     	 movs r0,#65
 16897 001a FFF7FEFF 	 bl printResource
3928:../cleanflight/src/main/interface/cli.c **** 
3929:../cleanflight/src/main/interface/cli.c ****         return;
 16898              	 .loc 13 3929 0
 16899 001e 3DE1     	 b .L992
 16900              	.L993:
3930:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "list", len) == 0) {
 16901              	 .loc 13 3930 0
 16902 0020 FB69     	 ldr r3,[r7,#28]
 16903 0022 7868     	 ldr r0,[r7,#4]
 16904 0024 9F49     	 ldr r1,.L1017
 16905 0026 1A46     	 mov r2,r3
 16906 0028 FFF7FEFF 	 bl strncasecmp
 16907 002c 0346     	 mov r3,r0
 16908 002e 002B     	 cmp r3,#0
 16909 0030 47D1     	 bne .L995
3931:../cleanflight/src/main/interface/cli.c **** #ifdef MINIMAL_CLI
3932:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("IO");
3933:../cleanflight/src/main/interface/cli.c **** #else
3934:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("Currently active IO resource assignments:\r\n(reboot to update)");
 16910              	 .loc 13 3934 0
 16911 0032 9D48     	 ldr r0,.L1017+4
 16912 0034 FFF7FEFF 	 bl cliPrintLine
3935:../cleanflight/src/main/interface/cli.c ****         cliRepeat('-', 20);
 16913              	 .loc 13 3935 0
 16914 0038 2D20     	 movs r0,#45
 16915 003a 1421     	 movs r1,#20
 16916 003c FFF7FEFF 	 bl cliRepeat
 16917              	.LBB132:
3936:../cleanflight/src/main/interface/cli.c **** #endif
3937:../cleanflight/src/main/interface/cli.c ****         for (int i = 0; i < DEFIO_IO_USED_COUNT; i++) {
 16918              	 .loc 13 3937 0
 16919 0040 0023     	 movs r3,#0
 16920 0042 FB62     	 str r3,[r7,#44]
 16921 0044 36E0     	 b .L996
 16922              	.L998:
 16923              	.LBB133:
3938:../cleanflight/src/main/interface/cli.c ****             const char* owner;
3939:../cleanflight/src/main/interface/cli.c ****             owner = ownerNames[ioRecs[i].owner];
 16924              	 .loc 13 3939 0
 16925 0046 994A     	 ldr r2,.L1017+8
 16926 0048 FB6A     	 ldr r3,[r7,#44]
 16927 004a DB00     	 lsls r3,r3,#3
 16928 004c 1344     	 add r3,r3,r2
 16929 004e 9B79     	 ldrb r3,[r3,#6]
 16930 0050 1A46     	 mov r2,r3
 16931 0052 974B     	 ldr r3,.L1017+12
 16932 0054 53F82230 	 ldr r3,[r3,r2,lsl#2]
 16933 0058 3B61     	 str r3,[r7,#16]
3940:../cleanflight/src/main/interface/cli.c **** 
3941:../cleanflight/src/main/interface/cli.c ****             cliPrintf("%c%02d: %s", IO_GPIOPortIdx(ioRecs + i) + 'A', IO_GPIOPinIdx(ioRecs + i), ow
 16934              	 .loc 13 3941 0
 16935 005a FB6A     	 ldr r3,[r7,#44]
 16936 005c DB00     	 lsls r3,r3,#3
 16937 005e 934A     	 ldr r2,.L1017+8
 16938 0060 1344     	 add r3,r3,r2
 16939 0062 1846     	 mov r0,r3
 16940 0064 FFF7FEFF 	 bl IO_GPIOPortIdx
 16941 0068 0346     	 mov r3,r0
 16942 006a 03F14104 	 add r4,r3,#65
 16943 006e FB6A     	 ldr r3,[r7,#44]
 16944 0070 DB00     	 lsls r3,r3,#3
 16945 0072 8E4A     	 ldr r2,.L1017+8
 16946 0074 1344     	 add r3,r3,r2
 16947 0076 1846     	 mov r0,r3
 16948 0078 FFF7FEFF 	 bl IO_GPIOPinIdx
 16949 007c 0346     	 mov r3,r0
 16950 007e 8D48     	 ldr r0,.L1017+16
 16951 0080 2146     	 mov r1,r4
 16952 0082 1A46     	 mov r2,r3
 16953 0084 3B69     	 ldr r3,[r7,#16]
 16954 0086 FFF7FEFF 	 bl cliPrintf
3942:../cleanflight/src/main/interface/cli.c ****             if (ioRecs[i].index > 0) {
 16955              	 .loc 13 3942 0
 16956 008a 884A     	 ldr r2,.L1017+8
 16957 008c FB6A     	 ldr r3,[r7,#44]
 16958 008e DB00     	 lsls r3,r3,#3
 16959 0090 1344     	 add r3,r3,r2
 16960 0092 DB79     	 ldrb r3,[r3,#7]
 16961 0094 002B     	 cmp r3,#0
 16962 0096 08D0     	 beq .L997
3943:../cleanflight/src/main/interface/cli.c ****                 cliPrintf(" %d", ioRecs[i].index);
 16963              	 .loc 13 3943 0
 16964 0098 844A     	 ldr r2,.L1017+8
 16965 009a FB6A     	 ldr r3,[r7,#44]
 16966 009c DB00     	 lsls r3,r3,#3
 16967 009e 1344     	 add r3,r3,r2
 16968 00a0 DB79     	 ldrb r3,[r3,#7]
 16969 00a2 8548     	 ldr r0,.L1017+20
 16970 00a4 1946     	 mov r1,r3
 16971 00a6 FFF7FEFF 	 bl cliPrintf
 16972              	.L997:
3944:../cleanflight/src/main/interface/cli.c ****             }
3945:../cleanflight/src/main/interface/cli.c ****             cliPrintLinefeed();
 16973              	 .loc 13 3945 0 discriminator 2
 16974 00aa FFF7FEFF 	 bl cliPrintLinefeed
 16975              	.LBE133:
3937:../cleanflight/src/main/interface/cli.c ****             const char* owner;
 16976              	 .loc 13 3937 0 discriminator 2
 16977 00ae FB6A     	 ldr r3,[r7,#44]
 16978 00b0 0133     	 adds r3,r3,#1
 16979 00b2 FB62     	 str r3,[r7,#44]
 16980              	.L996:
3937:../cleanflight/src/main/interface/cli.c ****             const char* owner;
 16981              	 .loc 13 3937 0 is_stmt 0 discriminator 1
 16982 00b4 FB6A     	 ldr r3,[r7,#44]
 16983 00b6 482B     	 cmp r3,#72
 16984 00b8 C5DD     	 ble .L998
 16985              	.LBE132:
3946:../cleanflight/src/main/interface/cli.c ****         }
3947:../cleanflight/src/main/interface/cli.c **** 
3948:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
3949:../cleanflight/src/main/interface/cli.c ****         cliPrintLine("\r\nUse: 'resource' to see how to change resources.");
 16986              	 .loc 13 3949 0 is_stmt 1
 16987 00ba 8048     	 ldr r0,.L1017+24
 16988 00bc FFF7FEFF 	 bl cliPrintLine
3950:../cleanflight/src/main/interface/cli.c **** #endif
3951:../cleanflight/src/main/interface/cli.c **** 
3952:../cleanflight/src/main/interface/cli.c ****         return;
 16989              	 .loc 13 3952 0
 16990 00c0 ECE0     	 b .L992
 16991              	.L995:
3953:../cleanflight/src/main/interface/cli.c ****     }
3954:../cleanflight/src/main/interface/cli.c **** 
3955:../cleanflight/src/main/interface/cli.c ****     uint8_t resourceIndex = 0;
 16992              	 .loc 13 3955 0
 16993 00c2 0023     	 movs r3,#0
 16994 00c4 87F82B30 	 strb r3,[r7,#43]
3956:../cleanflight/src/main/interface/cli.c ****     int index = 0;
 16995              	 .loc 13 3956 0
 16996 00c8 0023     	 movs r3,#0
 16997 00ca 7B62     	 str r3,[r7,#36]
3957:../cleanflight/src/main/interface/cli.c ****     char *pch = NULL;
 16998              	 .loc 13 3957 0
 16999 00cc 0023     	 movs r3,#0
 17000 00ce 3B62     	 str r3,[r7,#32]
3958:../cleanflight/src/main/interface/cli.c ****     char *saveptr;
3959:../cleanflight/src/main/interface/cli.c **** 
3960:../cleanflight/src/main/interface/cli.c ****     pch = strtok_r(cmdline, " ", &saveptr);
 17001              	 .loc 13 3960 0
 17002 00d0 07F10C03 	 add r3,r7,#12
 17003 00d4 7868     	 ldr r0,[r7,#4]
 17004 00d6 7A49     	 ldr r1,.L1017+28
 17005 00d8 1A46     	 mov r2,r3
 17006 00da FFF7FEFF 	 bl strtok_r
 17007 00de 3862     	 str r0,[r7,#32]
3961:../cleanflight/src/main/interface/cli.c ****     for (resourceIndex = 0; ; resourceIndex++) {
 17008              	 .loc 13 3961 0
 17009 00e0 0023     	 movs r3,#0
 17010 00e2 87F82B30 	 strb r3,[r7,#43]
 17011              	.L1002:
3962:../cleanflight/src/main/interface/cli.c ****         if (resourceIndex >= ARRAYLEN(resourceTable)) {
 17012              	 .loc 13 3962 0
 17013 00e6 97F82B30 	 ldrb r3,[r7,#43]
 17014 00ea 182B     	 cmp r3,#24
 17015 00ec 03D9     	 bls .L999
3963:../cleanflight/src/main/interface/cli.c ****             cliPrintErrorLinef("Invalid");
 17016              	 .loc 13 3963 0
 17017 00ee 7548     	 ldr r0,.L1017+32
 17018 00f0 FFF7FEFF 	 bl cliPrintErrorLinef
3964:../cleanflight/src/main/interface/cli.c ****             return;
 17019              	 .loc 13 3964 0
 17020 00f4 D2E0     	 b .L992
 17021              	.L999:
3965:../cleanflight/src/main/interface/cli.c ****         }
3966:../cleanflight/src/main/interface/cli.c **** 
3967:../cleanflight/src/main/interface/cli.c ****         if (strncasecmp(pch, ownerNames[resourceTable[resourceIndex].owner], len) == 0) {
 17022              	 .loc 13 3967 0
 17023 00f6 97F82B20 	 ldrb r2,[r7,#43]
 17024 00fa 7349     	 ldr r1,.L1017+36
 17025 00fc 1346     	 mov r3,r2
 17026 00fe 5B00     	 lsls r3,r3,#1
 17027 0100 1344     	 add r3,r3,r2
 17028 0102 5B00     	 lsls r3,r3,#1
 17029 0104 0B44     	 add r3,r3,r1
 17030 0106 1B78     	 ldrb r3,[r3]
 17031 0108 1A46     	 mov r2,r3
 17032 010a 694B     	 ldr r3,.L1017+12
 17033 010c 53F82220 	 ldr r2,[r3,r2,lsl#2]
 17034 0110 FB69     	 ldr r3,[r7,#28]
 17035 0112 386A     	 ldr r0,[r7,#32]
 17036 0114 1146     	 mov r1,r2
 17037 0116 1A46     	 mov r2,r3
 17038 0118 FFF7FEFF 	 bl strncasecmp
 17039 011c 0346     	 mov r3,r0
 17040 011e 002B     	 cmp r3,#0
 17041 0120 18D1     	 bne .L1000
3968:../cleanflight/src/main/interface/cli.c ****             break;
 17042              	 .loc 13 3968 0
 17043 0122 00BF     	 nop
3969:../cleanflight/src/main/interface/cli.c ****         }
3970:../cleanflight/src/main/interface/cli.c ****     }
3971:../cleanflight/src/main/interface/cli.c **** 
3972:../cleanflight/src/main/interface/cli.c ****     pch = strtok_r(NULL, " ", &saveptr);
 17044              	 .loc 13 3972 0
 17045 0124 07F10C03 	 add r3,r7,#12
 17046 0128 0020     	 movs r0,#0
 17047 012a 6549     	 ldr r1,.L1017+28
 17048 012c 1A46     	 mov r2,r3
 17049 012e FFF7FEFF 	 bl strtok_r
 17050 0132 3862     	 str r0,[r7,#32]
3973:../cleanflight/src/main/interface/cli.c ****     index = atoi(pch);
 17051              	 .loc 13 3973 0
 17052 0134 386A     	 ldr r0,[r7,#32]
 17053 0136 FFF7FEFF 	 bl atoi
 17054 013a 7862     	 str r0,[r7,#36]
3974:../cleanflight/src/main/interface/cli.c **** 
3975:../cleanflight/src/main/interface/cli.c ****     if (resourceTable[resourceIndex].maxIndex > 0 || index > 0) {
 17055              	 .loc 13 3975 0
 17056 013c 97F82B20 	 ldrb r2,[r7,#43]
 17057 0140 6149     	 ldr r1,.L1017+36
 17058 0142 1346     	 mov r3,r2
 17059 0144 5B00     	 lsls r3,r3,#1
 17060 0146 1344     	 add r3,r3,r2
 17061 0148 5B00     	 lsls r3,r3,#1
 17062 014a 0B44     	 add r3,r3,r1
 17063 014c 5B79     	 ldrb r3,[r3,#5]
 17064 014e 002B     	 cmp r3,#0
 17065 0150 09D1     	 bne .L1003
 17066 0152 05E0     	 b .L1016
 17067              	.L1000:
3961:../cleanflight/src/main/interface/cli.c ****         if (resourceIndex >= ARRAYLEN(resourceTable)) {
 17068              	 .loc 13 3961 0
 17069 0154 97F82B30 	 ldrb r3,[r7,#43]
 17070 0158 0133     	 adds r3,r3,#1
 17071 015a 87F82B30 	 strb r3,[r7,#43]
3970:../cleanflight/src/main/interface/cli.c **** 
 17072              	 .loc 13 3970 0
 17073 015e C2E7     	 b .L1002
 17074              	.L1016:
 17075              	 .loc 13 3975 0 discriminator 1
 17076 0160 7B6A     	 ldr r3,[r7,#36]
 17077 0162 002B     	 cmp r3,#0
 17078 0164 43DD     	 ble .L1004
 17079              	.L1003:
3976:../cleanflight/src/main/interface/cli.c ****         if (index <= 0 || index > MAX_RESOURCE_INDEX(resourceTable[resourceIndex].maxIndex)) {
 17080              	 .loc 13 3976 0
 17081 0166 7B6A     	 ldr r3,[r7,#36]
 17082 0168 002B     	 cmp r3,#0
 17083 016a 19DD     	 ble .L1005
 17084              	 .loc 13 3976 0 is_stmt 0 discriminator 1
 17085 016c 97F82B20 	 ldrb r2,[r7,#43]
 17086 0170 5549     	 ldr r1,.L1017+36
 17087 0172 1346     	 mov r3,r2
 17088 0174 5B00     	 lsls r3,r3,#1
 17089 0176 1344     	 add r3,r3,r2
 17090 0178 5B00     	 lsls r3,r3,#1
 17091 017a 0B44     	 add r3,r3,r1
 17092 017c 5B79     	 ldrb r3,[r3,#5]
 17093 017e 002B     	 cmp r3,#0
 17094 0180 0AD0     	 beq .L1006
 17095              	 .loc 13 3976 0 discriminator 2
 17096 0182 97F82B20 	 ldrb r2,[r7,#43]
 17097 0186 5049     	 ldr r1,.L1017+36
 17098 0188 1346     	 mov r3,r2
 17099 018a 5B00     	 lsls r3,r3,#1
 17100 018c 1344     	 add r3,r3,r2
 17101 018e 5B00     	 lsls r3,r3,#1
 17102 0190 0B44     	 add r3,r3,r1
 17103 0192 5B79     	 ldrb r3,[r3,#5]
 17104 0194 1A46     	 mov r2,r3
 17105 0196 00E0     	 b .L1007
 17106              	.L1006:
 17107              	 .loc 13 3976 0 discriminator 3
 17108 0198 0122     	 movs r2,#1
 17109              	.L1007:
 17110              	 .loc 13 3976 0 discriminator 5
 17111 019a 7B6A     	 ldr r3,[r7,#36]
 17112 019c 9A42     	 cmp r2,r3
 17113 019e 1BDA     	 bge .L1008
 17114              	.L1005:
3977:../cleanflight/src/main/interface/cli.c ****             cliShowArgumentRangeError("index", 1, MAX_RESOURCE_INDEX(resourceTable[resourceIndex].m
 17115              	 .loc 13 3977 0 is_stmt 1
 17116 01a0 97F82B20 	 ldrb r2,[r7,#43]
 17117 01a4 4849     	 ldr r1,.L1017+36
 17118 01a6 1346     	 mov r3,r2
 17119 01a8 5B00     	 lsls r3,r3,#1
 17120 01aa 1344     	 add r3,r3,r2
 17121 01ac 5B00     	 lsls r3,r3,#1
 17122 01ae 0B44     	 add r3,r3,r1
 17123 01b0 5B79     	 ldrb r3,[r3,#5]
 17124 01b2 002B     	 cmp r3,#0
 17125 01b4 09D0     	 beq .L1009
 17126              	 .loc 13 3977 0 is_stmt 0 discriminator 1
 17127 01b6 97F82B20 	 ldrb r2,[r7,#43]
 17128 01ba 4349     	 ldr r1,.L1017+36
 17129 01bc 1346     	 mov r3,r2
 17130 01be 5B00     	 lsls r3,r3,#1
 17131 01c0 1344     	 add r3,r3,r2
 17132 01c2 5B00     	 lsls r3,r3,#1
 17133 01c4 0B44     	 add r3,r3,r1
 17134 01c6 5B79     	 ldrb r3,[r3,#5]
 17135 01c8 00E0     	 b .L1010
 17136              	.L1009:
 17137              	 .loc 13 3977 0 discriminator 2
 17138 01ca 0123     	 movs r3,#1
 17139              	.L1010:
 17140              	 .loc 13 3977 0 discriminator 4
 17141 01cc 3F48     	 ldr r0,.L1017+40
 17142 01ce 0121     	 movs r1,#1
 17143 01d0 1A46     	 mov r2,r3
 17144 01d2 FFF7FEFF 	 bl cliShowArgumentRangeError
3978:../cleanflight/src/main/interface/cli.c ****             return;
 17145              	 .loc 13 3978 0 is_stmt 1 discriminator 4
 17146 01d6 61E0     	 b .L992
 17147              	.L1008:
3979:../cleanflight/src/main/interface/cli.c ****         }
3980:../cleanflight/src/main/interface/cli.c ****         index -= 1;
 17148              	 .loc 13 3980 0
 17149 01d8 7B6A     	 ldr r3,[r7,#36]
 17150 01da 013B     	 subs r3,r3,#1
 17151 01dc 7B62     	 str r3,[r7,#36]
3981:../cleanflight/src/main/interface/cli.c **** 
3982:../cleanflight/src/main/interface/cli.c ****         pch = strtok_r(NULL, " ", &saveptr);
 17152              	 .loc 13 3982 0
 17153 01de 07F10C03 	 add r3,r7,#12
 17154 01e2 0020     	 movs r0,#0
 17155 01e4 3649     	 ldr r1,.L1017+28
 17156 01e6 1A46     	 mov r2,r3
 17157 01e8 FFF7FEFF 	 bl strtok_r
 17158 01ec 3862     	 str r0,[r7,#32]
 17159              	.L1004:
3983:../cleanflight/src/main/interface/cli.c ****     }
3984:../cleanflight/src/main/interface/cli.c **** 
3985:../cleanflight/src/main/interface/cli.c ****     ioTag_t *tag = getIoTag(resourceTable[resourceIndex], index);
 17160              	 .loc 13 3985 0
 17161 01ee 97F82B20 	 ldrb r2,[r7,#43]
 17162 01f2 7B6A     	 ldr r3,[r7,#36]
 17163 01f4 DCB2     	 uxtb r4,r3
 17164 01f6 3449     	 ldr r1,.L1017+36
 17165 01f8 1346     	 mov r3,r2
 17166 01fa 5B00     	 lsls r3,r3,#1
 17167 01fc 1344     	 add r3,r3,r2
 17168 01fe 5B00     	 lsls r3,r3,#1
 17169 0200 0B44     	 add r3,r3,r1
 17170 0202 1A68     	 ldr r2,[r3]
 17171 0204 0021     	 movs r1,#0
 17172 0206 1146     	 mov r1,r2
 17173 0208 9A88     	 ldrh r2,[r3,#4]
 17174 020a 0023     	 movs r3,#0
 17175 020c 62F30F03 	 bfi r3,r2,#0,#16
 17176 0210 0846     	 mov r0,r1
 17177 0212 1946     	 mov r1,r3
 17178 0214 2246     	 mov r2,r4
 17179 0216 FFF7FEFF 	 bl getIoTag
 17180 021a B861     	 str r0,[r7,#24]
3986:../cleanflight/src/main/interface/cli.c **** 
3987:../cleanflight/src/main/interface/cli.c ****     if (strlen(pch) > 0) {
 17181              	 .loc 13 3987 0
 17182 021c 3B6A     	 ldr r3,[r7,#32]
 17183 021e 1B78     	 ldrb r3,[r3]
 17184 0220 002B     	 cmp r3,#0
 17185 0222 39D0     	 beq .L1011
3988:../cleanflight/src/main/interface/cli.c ****         if (strToPin(pch, tag)) {
 17186              	 .loc 13 3988 0
 17187 0224 386A     	 ldr r0,[r7,#32]
 17188 0226 B969     	 ldr r1,[r7,#24]
 17189 0228 FFF7FEFF 	 bl strToPin
 17190 022c 0346     	 mov r3,r0
 17191 022e 002B     	 cmp r3,#0
 17192 0230 32D0     	 beq .L1011
3989:../cleanflight/src/main/interface/cli.c ****             if (*tag == IO_TAG_NONE) {
 17193              	 .loc 13 3989 0
 17194 0232 BB69     	 ldr r3,[r7,#24]
 17195 0234 1B78     	 ldrb r3,[r3]
 17196 0236 002B     	 cmp r3,#0
 17197 0238 03D1     	 bne .L1012
3990:../cleanflight/src/main/interface/cli.c **** #ifdef MINIMAL_CLI
3991:../cleanflight/src/main/interface/cli.c ****                 cliPrintLine("Freed");
3992:../cleanflight/src/main/interface/cli.c **** #else
3993:../cleanflight/src/main/interface/cli.c ****                 cliPrintLine("Resource is freed");
 17198              	 .loc 13 3993 0
 17199 023a 2548     	 ldr r0,.L1017+44
 17200 023c FFF7FEFF 	 bl cliPrintLine
3994:../cleanflight/src/main/interface/cli.c **** #endif
3995:../cleanflight/src/main/interface/cli.c ****                 return;
 17201              	 .loc 13 3995 0
 17202 0240 2CE0     	 b .L992
 17203              	.L1012:
 17204              	.LBB134:
3996:../cleanflight/src/main/interface/cli.c ****             } else {
3997:../cleanflight/src/main/interface/cli.c ****                 ioRec_t *rec = IO_Rec(IOGetByTag(*tag));
 17205              	 .loc 13 3997 0
 17206 0242 BB69     	 ldr r3,[r7,#24]
 17207 0244 1B78     	 ldrb r3,[r3]
 17208 0246 1846     	 mov r0,r3
 17209 0248 FFF7FEFF 	 bl IOGetByTag
 17210 024c 0346     	 mov r3,r0
 17211 024e 1846     	 mov r0,r3
 17212 0250 FFF7FEFF 	 bl IO_Rec
 17213 0254 7861     	 str r0,[r7,#20]
3998:../cleanflight/src/main/interface/cli.c ****                 if (rec) {
 17214              	 .loc 13 3998 0
 17215 0256 7B69     	 ldr r3,[r7,#20]
 17216 0258 002B     	 cmp r3,#0
 17217 025a 1AD0     	 beq .L1013
3999:../cleanflight/src/main/interface/cli.c ****                     resourceCheck(resourceIndex, index, *tag);
 17218              	 .loc 13 3999 0
 17219 025c 7B6A     	 ldr r3,[r7,#36]
 17220 025e DAB2     	 uxtb r2,r3
 17221 0260 BB69     	 ldr r3,[r7,#24]
 17222 0262 1B78     	 ldrb r3,[r3]
 17223 0264 97F82B10 	 ldrb r1,[r7,#43]
 17224 0268 0846     	 mov r0,r1
 17225 026a 1146     	 mov r1,r2
 17226 026c 1A46     	 mov r2,r3
 17227 026e FFF7FEFF 	 bl resourceCheck
4000:../cleanflight/src/main/interface/cli.c **** #ifdef MINIMAL_CLI
4001:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef(" %c%02d set", IO_GPIOPortIdx(rec) + 'A', IO_GPIOPinIdx(rec));
4002:../cleanflight/src/main/interface/cli.c **** #else
4003:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef("\r\nResource is set to %c%02d", IO_GPIOPortIdx(rec) + 'A', IO_GP
 17228              	 .loc 13 4003 0
 17229 0272 7869     	 ldr r0,[r7,#20]
 17230 0274 FFF7FEFF 	 bl IO_GPIOPortIdx
 17231 0278 0346     	 mov r3,r0
 17232 027a 03F14104 	 add r4,r3,#65
 17233 027e 7869     	 ldr r0,[r7,#20]
 17234 0280 FFF7FEFF 	 bl IO_GPIOPinIdx
 17235 0284 0346     	 mov r3,r0
 17236 0286 1348     	 ldr r0,.L1017+48
 17237 0288 2146     	 mov r1,r4
 17238 028a 1A46     	 mov r2,r3
 17239 028c FFF7FEFF 	 bl cliPrintLinef
4004:../cleanflight/src/main/interface/cli.c **** #endif
4005:../cleanflight/src/main/interface/cli.c ****                 } else {
4006:../cleanflight/src/main/interface/cli.c ****                     cliShowParseError();
4007:../cleanflight/src/main/interface/cli.c ****                 }
4008:../cleanflight/src/main/interface/cli.c ****                 return;
 17240              	 .loc 13 4008 0
 17241 0290 04E0     	 b .L992
 17242              	.L1013:
4006:../cleanflight/src/main/interface/cli.c ****                 }
 17243              	 .loc 13 4006 0
 17244 0292 FFF7FEFF 	 bl cliShowParseError
 17245              	 .loc 13 4008 0
 17246 0296 01E0     	 b .L992
 17247              	.L1011:
 17248              	.LBE134:
4009:../cleanflight/src/main/interface/cli.c ****             }
4010:../cleanflight/src/main/interface/cli.c ****         }
4011:../cleanflight/src/main/interface/cli.c ****     }
4012:../cleanflight/src/main/interface/cli.c **** 
4013:../cleanflight/src/main/interface/cli.c ****     cliShowParseError();
 17249              	 .loc 13 4013 0
 17250 0298 FFF7FEFF 	 bl cliShowParseError
 17251              	.L992:
4014:../cleanflight/src/main/interface/cli.c **** }
 17252              	 .loc 13 4014 0
 17253 029c 3437     	 adds r7,r7,#52
 17254              	.LCFI648:
 17255              	 .cfi_def_cfa_offset 12
 17256 029e BD46     	 mov sp,r7
 17257              	.LCFI649:
 17258              	 .cfi_def_cfa_register 13
 17259              	 
 17260 02a0 90BD     	 pop {r4,r7,pc}
 17261              	.L1018:
 17262 02a2 00BF     	 .align 2
 17263              	.L1017:
 17264 02a4 70070000 	 .word .LC139
 17265 02a8 9C0D0000 	 .word .LC220
 17266 02ac 00000000 	 .word ioRecs
 17267 02b0 00000000 	 .word ownerNames
 17268 02b4 DC0D0000 	 .word .LC221
 17269 02b8 580D0000 	 .word .LC214
 17270 02bc E80D0000 	 .word .LC222
 17271 02c0 84030000 	 .word .LC82
 17272 02c4 1C0E0000 	 .word .LC223
 17273 02c8 00000000 	 .word resourceTable
 17274 02cc 5C030000 	 .word .LC80
 17275 02d0 240E0000 	 .word .LC224
 17276 02d4 380E0000 	 .word .LC225
 17277              	 .cfi_endproc
 17278              	.LFE788:
 17280              	 .section .rodata
 17281              	 .align 2
 17282              	.LC226:
 17283 0e54 43757272 	 .ascii "Currently active DMA:\000"
 17283      656E746C 
 17283      79206163 
 17283      74697665 
 17283      20444D41 
 17284 0e6a 0000     	 .align 2
 17285              	.LC227:
 17286 0e6c 444D4125 	 .ascii "DMA%d Channel %d:\000"
 17286      64204368 
 17286      616E6E65 
 17286      6C202564 
 17286      3A00
 17287 0e7e 0000     	 .align 2
 17288              	.LC228:
 17289 0e80 20257320 	 .ascii " %s %d\000"
 17289      256400
 17290              	 .section .text.printDma,"ax",%progbits
 17291              	 .align 2
 17292              	 .thumb
 17293              	 .thumb_func
 17295              	printDma:
 17296              	.LFB789:
4015:../cleanflight/src/main/interface/cli.c **** 
4016:../cleanflight/src/main/interface/cli.c **** static void printDma(void)
4017:../cleanflight/src/main/interface/cli.c **** {
 17297              	 .loc 13 4017 0
 17298              	 .cfi_startproc
 17299              	 
 17300              	 
 17301 0000 90B5     	 push {r4,r7,lr}
 17302              	.LCFI650:
 17303              	 .cfi_def_cfa_offset 12
 17304              	 .cfi_offset 4,-12
 17305              	 .cfi_offset 7,-8
 17306              	 .cfi_offset 14,-4
 17307 0002 85B0     	 sub sp,sp,#20
 17308              	.LCFI651:
 17309              	 .cfi_def_cfa_offset 32
 17310 0004 00AF     	 add r7,sp,#0
 17311              	.LCFI652:
 17312              	 .cfi_def_cfa_register 7
4018:../cleanflight/src/main/interface/cli.c ****     cliPrintLinefeed();
 17313              	 .loc 13 4018 0
 17314 0006 FFF7FEFF 	 bl cliPrintLinefeed
4019:../cleanflight/src/main/interface/cli.c **** 
4020:../cleanflight/src/main/interface/cli.c **** #ifdef MINIMAL_CLI
4021:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("DMA:");
4022:../cleanflight/src/main/interface/cli.c **** #else
4023:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("Currently active DMA:");
 17315              	 .loc 13 4023 0
 17316 000a 2848     	 ldr r0,.L1024
 17317 000c FFF7FEFF 	 bl cliPrintLine
4024:../cleanflight/src/main/interface/cli.c ****     cliRepeat('-', 20);
 17318              	 .loc 13 4024 0
 17319 0010 2D20     	 movs r0,#45
 17320 0012 1421     	 movs r1,#20
 17321 0014 FFF7FEFF 	 bl cliRepeat
 17322              	.LBB135:
4025:../cleanflight/src/main/interface/cli.c **** #endif
4026:../cleanflight/src/main/interface/cli.c ****     for (int i = 1; i <= DMA_LAST_HANDLER; i++) {
 17323              	 .loc 13 4026 0
 17324 0018 0123     	 movs r3,#1
 17325 001a FB60     	 str r3,[r7,#12]
 17326 001c 3FE0     	 b .L1020
 17327              	.L1023:
 17328              	.LBB136:
4027:../cleanflight/src/main/interface/cli.c ****         const char* owner;
4028:../cleanflight/src/main/interface/cli.c ****         owner = ownerNames[dmaGetOwner(i)];
 17329              	 .loc 13 4028 0
 17330 001e FB68     	 ldr r3,[r7,#12]
 17331 0020 DBB2     	 uxtb r3,r3
 17332 0022 1846     	 mov r0,r3
 17333 0024 FFF7FEFF 	 bl dmaGetOwner
 17334 0028 0346     	 mov r3,r0
 17335 002a 1A46     	 mov r2,r3
 17336 002c 204B     	 ldr r3,.L1024+4
 17337 002e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 17338 0032 BB60     	 str r3,[r7,#8]
4029:../cleanflight/src/main/interface/cli.c **** 
4030:../cleanflight/src/main/interface/cli.c ****         cliPrintf(DMA_OUTPUT_STRING, DMA_DEVICE_NO(i), DMA_DEVICE_INDEX(i));
 17339              	 .loc 13 4030 0
 17340 0034 FB68     	 ldr r3,[r7,#12]
 17341 0036 013B     	 subs r3,r3,#1
 17342 0038 1E4A     	 ldr r2,.L1024+8
 17343 003a 82FB0312 	 smull r1,r2,r2,r3
 17344 003e 1A44     	 add r2,r2,r3
 17345 0040 9210     	 asrs r2,r2,#2
 17346 0042 DB17     	 asrs r3,r3,#31
 17347 0044 D31A     	 subs r3,r2,r3
 17348 0046 5C1C     	 adds r4,r3,#1
 17349 0048 FB68     	 ldr r3,[r7,#12]
 17350 004a 5A1E     	 subs r2,r3,#1
 17351 004c 194B     	 ldr r3,.L1024+8
 17352 004e 83FB0213 	 smull r1,r3,r3,r2
 17353 0052 1344     	 add r3,r3,r2
 17354 0054 9910     	 asrs r1,r3,#2
 17355 0056 D317     	 asrs r3,r2,#31
 17356 0058 C91A     	 subs r1,r1,r3
 17357 005a 0B46     	 mov r3,r1
 17358 005c DB00     	 lsls r3,r3,#3
 17359 005e 5B1A     	 subs r3,r3,r1
 17360 0060 D11A     	 subs r1,r2,r3
 17361 0062 4B1C     	 adds r3,r1,#1
 17362 0064 1448     	 ldr r0,.L1024+12
 17363 0066 2146     	 mov r1,r4
 17364 0068 1A46     	 mov r2,r3
 17365 006a FFF7FEFF 	 bl cliPrintf
4031:../cleanflight/src/main/interface/cli.c ****         uint8_t resourceIndex = dmaGetResourceIndex(i);
 17366              	 .loc 13 4031 0
 17367 006e FB68     	 ldr r3,[r7,#12]
 17368 0070 DBB2     	 uxtb r3,r3
 17369 0072 1846     	 mov r0,r3
 17370 0074 FFF7FEFF 	 bl dmaGetResourceIndex
 17371 0078 0346     	 mov r3,r0
 17372 007a FB71     	 strb r3,[r7,#7]
4032:../cleanflight/src/main/interface/cli.c ****         if (resourceIndex > 0) {
 17373              	 .loc 13 4032 0
 17374 007c FB79     	 ldrb r3,[r7,#7]
 17375 007e 002B     	 cmp r3,#0
 17376 0080 06D0     	 beq .L1021
4033:../cleanflight/src/main/interface/cli.c ****             cliPrintLinef(" %s %d", owner, resourceIndex);
 17377              	 .loc 13 4033 0
 17378 0082 FB79     	 ldrb r3,[r7,#7]
 17379 0084 0D48     	 ldr r0,.L1024+16
 17380 0086 B968     	 ldr r1,[r7,#8]
 17381 0088 1A46     	 mov r2,r3
 17382 008a FFF7FEFF 	 bl cliPrintLinef
 17383 008e 03E0     	 b .L1022
 17384              	.L1021:
4034:../cleanflight/src/main/interface/cli.c ****         } else {
4035:../cleanflight/src/main/interface/cli.c ****             cliPrintLinef(" %s", owner);
 17385              	 .loc 13 4035 0
 17386 0090 0B48     	 ldr r0,.L1024+20
 17387 0092 B968     	 ldr r1,[r7,#8]
 17388 0094 FFF7FEFF 	 bl cliPrintLinef
 17389              	.L1022:
 17390              	.LBE136:
4026:../cleanflight/src/main/interface/cli.c ****         const char* owner;
 17391              	 .loc 13 4026 0 discriminator 2
 17392 0098 FB68     	 ldr r3,[r7,#12]
 17393 009a 0133     	 adds r3,r3,#1
 17394 009c FB60     	 str r3,[r7,#12]
 17395              	.L1020:
4026:../cleanflight/src/main/interface/cli.c ****         const char* owner;
 17396              	 .loc 13 4026 0 is_stmt 0 discriminator 1
 17397 009e FB68     	 ldr r3,[r7,#12]
 17398 00a0 072B     	 cmp r3,#7
 17399 00a2 BCDD     	 ble .L1023
 17400              	.LBE135:
4036:../cleanflight/src/main/interface/cli.c ****         }
4037:../cleanflight/src/main/interface/cli.c ****     }
4038:../cleanflight/src/main/interface/cli.c **** }
 17401              	 .loc 13 4038 0 is_stmt 1
 17402 00a4 1437     	 adds r7,r7,#20
 17403              	.LCFI653:
 17404              	 .cfi_def_cfa_offset 12
 17405 00a6 BD46     	 mov sp,r7
 17406              	.LCFI654:
 17407              	 .cfi_def_cfa_register 13
 17408              	 
 17409 00a8 90BD     	 pop {r4,r7,pc}
 17410              	.L1025:
 17411 00aa 00BF     	 .align 2
 17412              	.L1024:
 17413 00ac 540E0000 	 .word .LC226
 17414 00b0 00000000 	 .word ownerNames
 17415 00b4 93244992 	 .word -1840700269
 17416 00b8 6C0E0000 	 .word .LC227
 17417 00bc 800E0000 	 .word .LC228
 17418 00c0 84070000 	 .word .LC141
 17419              	 .cfi_endproc
 17420              	.LFE789:
 17422              	 .section .text.cliDma,"ax",%progbits
 17423              	 .align 2
 17424              	 .thumb
 17425              	 .thumb_func
 17427              	cliDma:
 17428              	.LFB790:
4039:../cleanflight/src/main/interface/cli.c **** 
4040:../cleanflight/src/main/interface/cli.c **** static void cliDma(char* cmdLine)
4041:../cleanflight/src/main/interface/cli.c **** {
 17429              	 .loc 13 4041 0
 17430              	 .cfi_startproc
 17431              	 
 17432              	 
 17433 0000 80B5     	 push {r7,lr}
 17434              	.LCFI655:
 17435              	 .cfi_def_cfa_offset 8
 17436              	 .cfi_offset 7,-8
 17437              	 .cfi_offset 14,-4
 17438 0002 82B0     	 sub sp,sp,#8
 17439              	.LCFI656:
 17440              	 .cfi_def_cfa_offset 16
 17441 0004 00AF     	 add r7,sp,#0
 17442              	.LCFI657:
 17443              	 .cfi_def_cfa_register 7
 17444 0006 7860     	 str r0,[r7,#4]
4042:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdLine);
4043:../cleanflight/src/main/interface/cli.c ****     printDma();
 17445              	 .loc 13 4043 0
 17446 0008 FFF7FEFF 	 bl printDma
4044:../cleanflight/src/main/interface/cli.c **** }
 17447              	 .loc 13 4044 0
 17448 000c 0837     	 adds r7,r7,#8
 17449              	.LCFI658:
 17450              	 .cfi_def_cfa_offset 8
 17451 000e BD46     	 mov sp,r7
 17452              	.LCFI659:
 17453              	 .cfi_def_cfa_register 13
 17454              	 
 17455 0010 80BD     	 pop {r7,pc}
 17456              	 .cfi_endproc
 17457              	.LFE790:
 17459 0012 00BF     	 .section .rodata
 17460 0e87 00       	 .align 2
 17461              	.LC229:
 17462 0e88 6D617374 	 .ascii "master\000"
 17462      657200
 17463 0e8f 00       	 .align 2
 17464              	.LC230:
 17465 0e90 72617465 	 .ascii "rates\000"
 17465      7300
 17466 0e96 0000     	 .align 2
 17467              	.LC231:
 17468 0e98 616C6C00 	 .ascii "all\000"
 17469              	 .align 2
 17470              	.LC232:
 17471 0e9c 64656661 	 .ascii "defaults\000"
 17471      756C7473 
 17471      00
 17472 0ea5 000000   	 .align 2
 17473              	.LC233:
 17474 0ea8 76657273 	 .ascii "version\000"
 17474      696F6E00 
 17475              	 .align 2
 17476              	.LC234:
 17477 0eb0 72657365 	 .ascii "reset configuration to default settings\000"
 17477      7420636F 
 17477      6E666967 
 17477      75726174 
 17477      696F6E20 
 17478              	 .align 2
 17479              	.LC235:
 17480 0ed8 64656661 	 .ascii "defaults nosave\000"
 17480      756C7473 
 17480      206E6F73 
 17480      61766500 
 17481              	 .align 2
 17482              	.LC236:
 17483 0ee8 6E616D65 	 .ascii "name\000"
 17483      00
 17484 0eed 000000   	 .align 2
 17485              	.LC237:
 17486 0ef0 7265736F 	 .ascii "resources\000"
 17486      75726365 
 17486      7300
 17487 0efa 0000     	 .align 2
 17488              	.LC238:
 17489 0efc 6D697865 	 .ascii "mixer\000"
 17489      7200
 17490 0f02 0000     	 .align 2
 17491              	.LC239:
 17492 0f04 6D697865 	 .ascii "mixer %s\000"
 17492      72202573 
 17492      00
 17493 0f0d 000000   	 .align 2
 17494              	.LC240:
 17495 0f10 0D0A6D6D 	 .ascii "\015\012mmix reset\015\012\000"
 17495      69782072 
 17495      65736574 
 17495      0D0A00
 17496 0f1f 00       	 .align 2
 17497              	.LC241:
 17498 0f20 73657276 	 .ascii "servo\000"
 17498      6F00
 17499 0f26 0000     	 .align 2
 17500              	.LC242:
 17501 0f28 73657276 	 .ascii "servo mix\000"
 17501      6F206D69 
 17501      7800
 17502 0f32 0000     	 .align 2
 17503              	.LC243:
 17504 0f34 736D6978 	 .ascii "smix reset\015\012\000"
 17504      20726573 
 17504      65740D0A 
 17504      00
 17505 0f41 000000   	 .align 2
 17506              	.LC244:
 17507 0f44 66656174 	 .ascii "feature\000"
 17507      75726500 
 17508              	 .align 2
 17509              	.LC245:
 17510 0f4c 6D617000 	 .ascii "map\000"
 17511              	 .align 2
 17512              	.LC246:
 17513 0f50 73657269 	 .ascii "serial\000"
 17513      616C00
 17514 0f57 00       	 .align 2
 17515              	.LC247:
 17516 0f58 61757800 	 .ascii "aux\000"
 17517              	 .align 2
 17518              	.LC248:
 17519 0f5c 61646A72 	 .ascii "adjrange\000"
 17519      616E6765 
 17519      00
 17520 0f65 000000   	 .align 2
 17521              	.LC249:
 17522 0f68 72787261 	 .ascii "rxrange\000"
 17522      6E676500 
 17523              	 .align 2
 17524              	.LC250:
 17525 0f70 76747800 	 .ascii "vtx\000"
 17526              	 .align 2
 17527              	.LC251:
 17528 0f74 72786661 	 .ascii "rxfail\000"
 17528      696C00
 17529 0f7b 00       	 .align 2
 17530              	.LC252:
 17531 0f7c 72657374 	 .ascii "restore original profile selection\000"
 17531      6F726520 
 17531      6F726967 
 17531      696E616C 
 17531      2070726F 
 17532 0f9f 00       	 .align 2
 17533              	.LC253:
 17534 0fa0 72657374 	 .ascii "restore original rateprofile selection\000"
 17534      6F726520 
 17534      6F726967 
 17534      696E616C 
 17534      20726174 
 17535 0fc7 00       	 .align 2
 17536              	.LC254:
 17537 0fc8 73617665 	 .ascii "save configuration\000"
 17537      20636F6E 
 17537      66696775 
 17537      72617469 
 17537      6F6E00
 17538 0fdb 00       	 .align 2
 17539              	.LC255:
 17540 0fdc 73617665 	 .ascii "save\000"
 17540      00
 17541              	 .section .text.printConfig,"ax",%progbits
 17542              	 .align 2
 17543              	 .thumb
 17544              	 .thumb_func
 17546              	printConfig:
 17547              	.LFB791:
4045:../cleanflight/src/main/interface/cli.c **** #endif /* USE_RESOURCE_MGMT */
4046:../cleanflight/src/main/interface/cli.c **** 
4047:../cleanflight/src/main/interface/cli.c **** #ifdef USE_TIMER_MGMT
4048:../cleanflight/src/main/interface/cli.c **** 
4049:../cleanflight/src/main/interface/cli.c **** static void printTimer(uint8_t dumpMask)
4050:../cleanflight/src/main/interface/cli.c **** {
4051:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("# examples: ");
4052:../cleanflight/src/main/interface/cli.c ****     const char *format = "timer %c%02d %d";
4053:../cleanflight/src/main/interface/cli.c ****     cliPrint("#");
4054:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef(format, 'A', 1, 1);
4055:../cleanflight/src/main/interface/cli.c **** 
4056:../cleanflight/src/main/interface/cli.c ****     cliPrint("#");
4057:../cleanflight/src/main/interface/cli.c ****     cliPrintLinef(format, 'A', 1, 0);
4058:../cleanflight/src/main/interface/cli.c ****     
4059:../cleanflight/src/main/interface/cli.c ****     for (unsigned int i = 0; i < MAX_TIMER_PINMAP_COUNT; i++) {
4060:../cleanflight/src/main/interface/cli.c **** 
4061:../cleanflight/src/main/interface/cli.c ****         const ioTag_t ioTag = timerIOConfig(i)->ioTag;
4062:../cleanflight/src/main/interface/cli.c ****         const uint8_t timerIndex = timerIOConfig(i)->index;
4063:../cleanflight/src/main/interface/cli.c **** 
4064:../cleanflight/src/main/interface/cli.c ****         if (!ioTag) {
4065:../cleanflight/src/main/interface/cli.c ****             continue;
4066:../cleanflight/src/main/interface/cli.c ****         }
4067:../cleanflight/src/main/interface/cli.c **** 
4068:../cleanflight/src/main/interface/cli.c ****         if (timerIndex != 0 && !(dumpMask & HIDE_UNUSED)) {
4069:../cleanflight/src/main/interface/cli.c ****             cliDumpPrintLinef(dumpMask, false, format, 
4070:../cleanflight/src/main/interface/cli.c ****                 IO_GPIOPortIdxByTag(ioTag) + 'A', 
4071:../cleanflight/src/main/interface/cli.c ****                 IO_GPIOPinIdxByTag(ioTag),
4072:../cleanflight/src/main/interface/cli.c ****                 timerIndex
4073:../cleanflight/src/main/interface/cli.c ****                 );
4074:../cleanflight/src/main/interface/cli.c ****         }
4075:../cleanflight/src/main/interface/cli.c ****     }
4076:../cleanflight/src/main/interface/cli.c **** }
4077:../cleanflight/src/main/interface/cli.c **** 
4078:../cleanflight/src/main/interface/cli.c **** static void cliTimer(char *cmdline)
4079:../cleanflight/src/main/interface/cli.c **** {
4080:../cleanflight/src/main/interface/cli.c ****     int len = strlen(cmdline);
4081:../cleanflight/src/main/interface/cli.c **** 
4082:../cleanflight/src/main/interface/cli.c ****     if (len == 0) {
4083:../cleanflight/src/main/interface/cli.c ****         printTimer(DUMP_MASTER | HIDE_UNUSED);
4084:../cleanflight/src/main/interface/cli.c ****         return;
4085:../cleanflight/src/main/interface/cli.c ****     } else if (strncasecmp(cmdline, "list", len) == 0) {
4086:../cleanflight/src/main/interface/cli.c ****         printTimer(DUMP_MASTER);
4087:../cleanflight/src/main/interface/cli.c ****         return;
4088:../cleanflight/src/main/interface/cli.c ****     }
4089:../cleanflight/src/main/interface/cli.c ****     
4090:../cleanflight/src/main/interface/cli.c ****     char *pch = NULL;
4091:../cleanflight/src/main/interface/cli.c ****     char *saveptr;
4092:../cleanflight/src/main/interface/cli.c ****     int timerIOIndex = -1;
4093:../cleanflight/src/main/interface/cli.c ****     
4094:../cleanflight/src/main/interface/cli.c ****     ioTag_t ioTag = 0;
4095:../cleanflight/src/main/interface/cli.c ****     pch = strtok_r(cmdline, " ", &saveptr);    
4096:../cleanflight/src/main/interface/cli.c ****     if (!pch || !(strToPin(pch, &ioTag) && IOGetByTag(ioTag))) {
4097:../cleanflight/src/main/interface/cli.c ****         goto error;
4098:../cleanflight/src/main/interface/cli.c ****     }
4099:../cleanflight/src/main/interface/cli.c **** 
4100:../cleanflight/src/main/interface/cli.c ****     /* find existing entry, or go for next available */
4101:../cleanflight/src/main/interface/cli.c ****     for (unsigned i = 0; i < MAX_TIMER_PINMAP_COUNT; i++) {
4102:../cleanflight/src/main/interface/cli.c ****         if (timerIOConfig(i)->ioTag == ioTag) {
4103:../cleanflight/src/main/interface/cli.c ****             timerIOIndex = i;
4104:../cleanflight/src/main/interface/cli.c ****             break;
4105:../cleanflight/src/main/interface/cli.c ****         }
4106:../cleanflight/src/main/interface/cli.c **** 
4107:../cleanflight/src/main/interface/cli.c ****         /* first available empty slot */
4108:../cleanflight/src/main/interface/cli.c ****         if (timerIOIndex < 0 && timerIOConfig(i)->ioTag == IO_TAG_NONE) {
4109:../cleanflight/src/main/interface/cli.c ****             timerIOIndex = i;
4110:../cleanflight/src/main/interface/cli.c ****         }
4111:../cleanflight/src/main/interface/cli.c ****     }
4112:../cleanflight/src/main/interface/cli.c **** 
4113:../cleanflight/src/main/interface/cli.c ****     if (timerIOIndex < 0) {
4114:../cleanflight/src/main/interface/cli.c ****         cliPrintErrorLinef("Index out of range.");
4115:../cleanflight/src/main/interface/cli.c ****         return;
4116:../cleanflight/src/main/interface/cli.c ****     }
4117:../cleanflight/src/main/interface/cli.c **** 
4118:../cleanflight/src/main/interface/cli.c ****     uint8_t timerIndex = 0;
4119:../cleanflight/src/main/interface/cli.c ****     pch = strtok_r(NULL, " ", &saveptr);
4120:../cleanflight/src/main/interface/cli.c ****     if (pch) {
4121:../cleanflight/src/main/interface/cli.c ****         if (strcasecmp(pch, "list") == 0) {
4122:../cleanflight/src/main/interface/cli.c ****             /* output the list of available options */
4123:../cleanflight/src/main/interface/cli.c ****             uint8_t index = 1;
4124:../cleanflight/src/main/interface/cli.c ****             for (unsigned i = 0; i < USABLE_TIMER_CHANNEL_COUNT; i++) {
4125:../cleanflight/src/main/interface/cli.c ****                 if (timerHardware[i].tag == ioTag) {
4126:../cleanflight/src/main/interface/cli.c ****                     cliPrintLinef("# %d. TIM%d CH%d",
4127:../cleanflight/src/main/interface/cli.c ****                         index,
4128:../cleanflight/src/main/interface/cli.c ****                         timerGetTIMNumber(timerHardware[i].tim),
4129:../cleanflight/src/main/interface/cli.c ****                         CC_INDEX_FROM_CHANNEL(timerHardware[i].channel)
4130:../cleanflight/src/main/interface/cli.c ****                     );
4131:../cleanflight/src/main/interface/cli.c ****                     index++;
4132:../cleanflight/src/main/interface/cli.c ****                 }
4133:../cleanflight/src/main/interface/cli.c ****             }
4134:../cleanflight/src/main/interface/cli.c ****             return;
4135:../cleanflight/src/main/interface/cli.c ****         } else if (strcasecmp(pch, "none") == 0) {
4136:../cleanflight/src/main/interface/cli.c ****             goto success;
4137:../cleanflight/src/main/interface/cli.c ****         } else {
4138:../cleanflight/src/main/interface/cli.c ****             timerIndex = atoi(pch);
4139:../cleanflight/src/main/interface/cli.c ****         }
4140:../cleanflight/src/main/interface/cli.c ****     } else {
4141:../cleanflight/src/main/interface/cli.c ****         goto error;
4142:../cleanflight/src/main/interface/cli.c ****     }  
4143:../cleanflight/src/main/interface/cli.c **** 
4144:../cleanflight/src/main/interface/cli.c **** success:
4145:../cleanflight/src/main/interface/cli.c ****     timerIOConfigMutable(timerIOIndex)->ioTag = timerIndex == 0 ? IO_TAG_NONE : ioTag;
4146:../cleanflight/src/main/interface/cli.c ****     timerIOConfigMutable(timerIOIndex)->index = timerIndex;
4147:../cleanflight/src/main/interface/cli.c **** 
4148:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("Success");
4149:../cleanflight/src/main/interface/cli.c ****     return;
4150:../cleanflight/src/main/interface/cli.c ****     
4151:../cleanflight/src/main/interface/cli.c **** error:
4152:../cleanflight/src/main/interface/cli.c ****     cliShowParseError();
4153:../cleanflight/src/main/interface/cli.c **** }
4154:../cleanflight/src/main/interface/cli.c **** #endif
4155:../cleanflight/src/main/interface/cli.c **** 
4156:../cleanflight/src/main/interface/cli.c **** static void printConfig(char *cmdline, bool doDiff)
4157:../cleanflight/src/main/interface/cli.c **** {
 17548              	 .loc 13 4157 0
 17549              	 .cfi_startproc
 17550              	 
 17551              	 
 17552 0000 90B5     	 push {r4,r7,lr}
 17553              	.LCFI660:
 17554              	 .cfi_def_cfa_offset 12
 17555              	 .cfi_offset 4,-12
 17556              	 .cfi_offset 7,-8
 17557              	 .cfi_offset 14,-4
 17558 0002 89B0     	 sub sp,sp,#36
 17559              	.LCFI661:
 17560              	 .cfi_def_cfa_offset 48
 17561 0004 00AF     	 add r7,sp,#0
 17562              	.LCFI662:
 17563              	 .cfi_def_cfa_register 7
 17564 0006 7860     	 str r0,[r7,#4]
 17565 0008 0B46     	 mov r3,r1
 17566 000a FB70     	 strb r3,[r7,#3]
4158:../cleanflight/src/main/interface/cli.c ****     uint8_t dumpMask = DUMP_MASTER;
 17567              	 .loc 13 4158 0
 17568 000c 0123     	 movs r3,#1
 17569 000e FB77     	 strb r3,[r7,#31]
4159:../cleanflight/src/main/interface/cli.c ****     char *options;
4160:../cleanflight/src/main/interface/cli.c ****     if ((options = checkCommand(cmdline, "master"))) {
 17570              	 .loc 13 4160 0
 17571 0010 7868     	 ldr r0,[r7,#4]
 17572 0012 B049     	 ldr r1,.L1046
 17573 0014 FFF7FEFF 	 bl checkCommand
 17574 0018 B861     	 str r0,[r7,#24]
 17575 001a BB69     	 ldr r3,[r7,#24]
 17576 001c 002B     	 cmp r3,#0
 17577 001e 02D0     	 beq .L1028
4161:../cleanflight/src/main/interface/cli.c ****         dumpMask = DUMP_MASTER; // only
 17578              	 .loc 13 4161 0
 17579 0020 0123     	 movs r3,#1
 17580 0022 FB77     	 strb r3,[r7,#31]
 17581 0024 22E0     	 b .L1029
 17582              	.L1028:
4162:../cleanflight/src/main/interface/cli.c ****     } else if ((options = checkCommand(cmdline, "profile"))) {
 17583              	 .loc 13 4162 0
 17584 0026 7868     	 ldr r0,[r7,#4]
 17585 0028 AB49     	 ldr r1,.L1046+4
 17586 002a FFF7FEFF 	 bl checkCommand
 17587 002e B861     	 str r0,[r7,#24]
 17588 0030 BB69     	 ldr r3,[r7,#24]
 17589 0032 002B     	 cmp r3,#0
 17590 0034 02D0     	 beq .L1030
4163:../cleanflight/src/main/interface/cli.c ****         dumpMask = DUMP_PROFILE; // only
 17591              	 .loc 13 4163 0
 17592 0036 0223     	 movs r3,#2
 17593 0038 FB77     	 strb r3,[r7,#31]
 17594 003a 17E0     	 b .L1029
 17595              	.L1030:
4164:../cleanflight/src/main/interface/cli.c ****     } else if ((options = checkCommand(cmdline, "rates"))) {
 17596              	 .loc 13 4164 0
 17597 003c 7868     	 ldr r0,[r7,#4]
 17598 003e A749     	 ldr r1,.L1046+8
 17599 0040 FFF7FEFF 	 bl checkCommand
 17600 0044 B861     	 str r0,[r7,#24]
 17601 0046 BB69     	 ldr r3,[r7,#24]
 17602 0048 002B     	 cmp r3,#0
 17603 004a 02D0     	 beq .L1031
4165:../cleanflight/src/main/interface/cli.c ****         dumpMask = DUMP_RATES; // only
 17604              	 .loc 13 4165 0
 17605 004c 0423     	 movs r3,#4
 17606 004e FB77     	 strb r3,[r7,#31]
 17607 0050 0CE0     	 b .L1029
 17608              	.L1031:
4166:../cleanflight/src/main/interface/cli.c ****     } else if ((options = checkCommand(cmdline, "all"))) {
 17609              	 .loc 13 4166 0
 17610 0052 7868     	 ldr r0,[r7,#4]
 17611 0054 A249     	 ldr r1,.L1046+12
 17612 0056 FFF7FEFF 	 bl checkCommand
 17613 005a B861     	 str r0,[r7,#24]
 17614 005c BB69     	 ldr r3,[r7,#24]
 17615 005e 002B     	 cmp r3,#0
 17616 0060 02D0     	 beq .L1032
4167:../cleanflight/src/main/interface/cli.c ****         dumpMask = DUMP_ALL;   // all profiles and rates
 17617              	 .loc 13 4167 0
 17618 0062 0823     	 movs r3,#8
 17619 0064 FB77     	 strb r3,[r7,#31]
 17620 0066 01E0     	 b .L1029
 17621              	.L1032:
4168:../cleanflight/src/main/interface/cli.c ****     } else {
4169:../cleanflight/src/main/interface/cli.c ****         options = cmdline;
 17622              	 .loc 13 4169 0
 17623 0068 7B68     	 ldr r3,[r7,#4]
 17624 006a BB61     	 str r3,[r7,#24]
 17625              	.L1029:
4170:../cleanflight/src/main/interface/cli.c ****     }
4171:../cleanflight/src/main/interface/cli.c **** 
4172:../cleanflight/src/main/interface/cli.c ****     if (doDiff) {
 17626              	 .loc 13 4172 0
 17627 006c FB78     	 ldrb r3,[r7,#3]
 17628 006e 002B     	 cmp r3,#0
 17629 0070 03D0     	 beq .L1033
4173:../cleanflight/src/main/interface/cli.c ****         dumpMask = dumpMask | DO_DIFF;
 17630              	 .loc 13 4173 0
 17631 0072 FB7F     	 ldrb r3,[r7,#31]
 17632 0074 43F01003 	 orr r3,r3,#16
 17633 0078 FB77     	 strb r3,[r7,#31]
 17634              	.L1033:
4174:../cleanflight/src/main/interface/cli.c ****     }
4175:../cleanflight/src/main/interface/cli.c ****     
4176:../cleanflight/src/main/interface/cli.c ****     backupAndResetConfigs();
 17635              	 .loc 13 4176 0
 17636 007a FFF7FEFF 	 bl backupAndResetConfigs
4177:../cleanflight/src/main/interface/cli.c ****     if (checkCommand(options, "defaults")) {
 17637              	 .loc 13 4177 0
 17638 007e B869     	 ldr r0,[r7,#24]
 17639 0080 9849     	 ldr r1,.L1046+16
 17640 0082 FFF7FEFF 	 bl checkCommand
 17641 0086 0346     	 mov r3,r0
 17642 0088 002B     	 cmp r3,#0
 17643 008a 03D0     	 beq .L1034
4178:../cleanflight/src/main/interface/cli.c ****         dumpMask = dumpMask | SHOW_DEFAULTS;   // add default values as comments for changed values
 17644              	 .loc 13 4178 0
 17645 008c FB7F     	 ldrb r3,[r7,#31]
 17646 008e 43F02003 	 orr r3,r3,#32
 17647 0092 FB77     	 strb r3,[r7,#31]
 17648              	.L1034:
4179:../cleanflight/src/main/interface/cli.c ****     }
4180:../cleanflight/src/main/interface/cli.c **** 
4181:../cleanflight/src/main/interface/cli.c ****     if ((dumpMask & DUMP_MASTER) || (dumpMask & DUMP_ALL)) {
 17649              	 .loc 13 4181 0
 17650 0094 FB7F     	 ldrb r3,[r7,#31]
 17651 0096 03F00103 	 and r3,r3,#1
 17652 009a 002B     	 cmp r3,#0
 17653 009c 05D1     	 bne .L1035
 17654              	 .loc 13 4181 0 is_stmt 0 discriminator 1
 17655 009e FB7F     	 ldrb r3,[r7,#31]
 17656 00a0 03F00803 	 and r3,r3,#8
 17657 00a4 002B     	 cmp r3,#0
 17658 00a6 00F0B181 	 beq .L1036
 17659              	.L1035:
 17660              	.LBB137:
4182:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("version");
 17661              	 .loc 13 4182 0 is_stmt 1
 17662 00aa 8F48     	 ldr r0,.L1046+20
 17663 00ac FFF7FEFF 	 bl cliPrintHashLine
4183:../cleanflight/src/main/interface/cli.c ****         cliVersion(NULL);
 17664              	 .loc 13 4183 0
 17665 00b0 0020     	 movs r0,#0
 17666 00b2 FFF7FEFF 	 bl cliVersion
4184:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 17667              	 .loc 13 4184 0
 17668 00b6 FFF7FEFF 	 bl cliPrintLinefeed
4185:../cleanflight/src/main/interface/cli.c **** 
4186:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BOARD_INFO)
4187:../cleanflight/src/main/interface/cli.c ****         cliBoardName("");
 17669              	 .loc 13 4187 0
 17670 00ba 8C48     	 ldr r0,.L1046+24
 17671 00bc FFF7FEFF 	 bl cliBoardName
4188:../cleanflight/src/main/interface/cli.c ****         cliManufacturerId("");
 17672              	 .loc 13 4188 0
 17673 00c0 8A48     	 ldr r0,.L1046+24
 17674 00c2 FFF7FEFF 	 bl cliManufacturerId
4189:../cleanflight/src/main/interface/cli.c **** #endif
4190:../cleanflight/src/main/interface/cli.c **** 
4191:../cleanflight/src/main/interface/cli.c ****         if (dumpMask & DUMP_ALL) {
 17675              	 .loc 13 4191 0
 17676 00c6 FB7F     	 ldrb r3,[r7,#31]
 17677 00c8 03F00803 	 and r3,r3,#8
 17678 00cc 002B     	 cmp r3,#0
 17679 00ce 05D0     	 beq .L1037
4192:../cleanflight/src/main/interface/cli.c ****             cliMcuId(NULL);
 17680              	 .loc 13 4192 0
 17681 00d0 0020     	 movs r0,#0
 17682 00d2 FFF7FEFF 	 bl cliMcuId
4193:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BOARD_INFO) && defined(USE_SIGNATURE)
4194:../cleanflight/src/main/interface/cli.c ****         cliSignature("");
 17683              	 .loc 13 4194 0
 17684 00d6 8548     	 ldr r0,.L1046+24
 17685 00d8 FFF7FEFF 	 bl cliSignature
 17686              	.L1037:
4195:../cleanflight/src/main/interface/cli.c **** #endif
4196:../cleanflight/src/main/interface/cli.c ****         }
4197:../cleanflight/src/main/interface/cli.c **** 
4198:../cleanflight/src/main/interface/cli.c ****         if ((dumpMask & (DUMP_ALL | DO_DIFF)) == (DUMP_ALL | DO_DIFF)) {
 17687              	 .loc 13 4198 0
 17688 00dc FB7F     	 ldrb r3,[r7,#31]
 17689 00de 03F01803 	 and r3,r3,#24
 17690 00e2 182B     	 cmp r3,#24
 17691 00e4 07D1     	 bne .L1038
4199:../cleanflight/src/main/interface/cli.c ****             cliPrintHashLine("reset configuration to default settings");
 17692              	 .loc 13 4199 0
 17693 00e6 8248     	 ldr r0,.L1046+28
 17694 00e8 FFF7FEFF 	 bl cliPrintHashLine
4200:../cleanflight/src/main/interface/cli.c ****             cliPrint("defaults nosave");
 17695              	 .loc 13 4200 0
 17696 00ec 8148     	 ldr r0,.L1046+32
 17697 00ee FFF7FEFF 	 bl cliPrint
4201:../cleanflight/src/main/interface/cli.c ****             cliPrintLinefeed();
 17698              	 .loc 13 4201 0
 17699 00f2 FFF7FEFF 	 bl cliPrintLinefeed
 17700              	.L1038:
4202:../cleanflight/src/main/interface/cli.c ****         }
4203:../cleanflight/src/main/interface/cli.c **** 
4204:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("name");
 17701              	 .loc 13 4204 0
 17702 00f6 8048     	 ldr r0,.L1046+36
 17703 00f8 FFF7FEFF 	 bl cliPrintHashLine
4205:../cleanflight/src/main/interface/cli.c ****         printName(dumpMask, &pilotConfig_Copy);
 17704              	 .loc 13 4205 0
 17705 00fc FB7F     	 ldrb r3,[r7,#31]
 17706 00fe 1846     	 mov r0,r3
 17707 0100 7E49     	 ldr r1,.L1046+40
 17708 0102 FFF7FEFF 	 bl printName
4206:../cleanflight/src/main/interface/cli.c **** 
4207:../cleanflight/src/main/interface/cli.c **** #ifdef USE_RESOURCE_MGMT
4208:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("resources");
 17709              	 .loc 13 4208 0
 17710 0106 7E48     	 ldr r0,.L1046+44
 17711 0108 FFF7FEFF 	 bl cliPrintHashLine
4209:../cleanflight/src/main/interface/cli.c ****         printResource(dumpMask);
 17712              	 .loc 13 4209 0
 17713 010c FB7F     	 ldrb r3,[r7,#31]
 17714 010e 1846     	 mov r0,r3
 17715 0110 FFF7FEFF 	 bl printResource
4210:../cleanflight/src/main/interface/cli.c **** #endif
4211:../cleanflight/src/main/interface/cli.c **** 
4212:../cleanflight/src/main/interface/cli.c **** #ifndef USE_QUAD_MIXER_ONLY
4213:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("mixer");
 17716              	 .loc 13 4213 0
 17717 0114 7B48     	 ldr r0,.L1046+48
 17718 0116 FFF7FEFF 	 bl cliPrintHashLine
4214:../cleanflight/src/main/interface/cli.c ****         const bool equalsDefault = mixerConfig_Copy.mixerMode == mixerConfig()->mixerMode;
 17719              	 .loc 13 4214 0
 17720 011a 7B4B     	 ldr r3,.L1046+52
 17721 011c 1C78     	 ldrb r4,[r3]
 17722 011e FFF7FEFF 	 bl mixerConfig
 17723 0122 0346     	 mov r3,r0
 17724 0124 1B78     	 ldrb r3,[r3]
 17725 0126 9C42     	 cmp r4,r3
 17726 0128 0CBF     	 ite eq
 17727 012a 0123     	 moveq r3,#1
 17728 012c 0023     	 movne r3,#0
 17729 012e FB73     	 strb r3,[r7,#15]
4215:../cleanflight/src/main/interface/cli.c ****         const char *formatMixer = "mixer %s";
 17730              	 .loc 13 4215 0
 17731 0130 764B     	 ldr r3,.L1046+56
 17732 0132 BB60     	 str r3,[r7,#8]
4216:../cleanflight/src/main/interface/cli.c ****         cliDefaultPrintLinef(dumpMask, equalsDefault, formatMixer, mixerNames[mixerConfig()->mixerM
 17733              	 .loc 13 4216 0
 17734 0134 FFF7FEFF 	 bl mixerConfig
 17735 0138 0346     	 mov r3,r0
 17736 013a 1B78     	 ldrb r3,[r3]
 17737 013c 013B     	 subs r3,r3,#1
 17738 013e 744A     	 ldr r2,.L1046+60
 17739 0140 52F82330 	 ldr r3,[r2,r3,lsl#2]
 17740 0144 F97F     	 ldrb r1,[r7,#31]
 17741 0146 FA7B     	 ldrb r2,[r7,#15]
 17742 0148 0846     	 mov r0,r1
 17743 014a 1146     	 mov r1,r2
 17744 014c BA68     	 ldr r2,[r7,#8]
 17745 014e FFF7FEFF 	 bl cliDefaultPrintLinef
4217:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, equalsDefault, formatMixer, mixerNames[mixerConfig_Copy.mixerMo
 17746              	 .loc 13 4217 0
 17747 0152 6D4B     	 ldr r3,.L1046+52
 17748 0154 1B78     	 ldrb r3,[r3]
 17749 0156 013B     	 subs r3,r3,#1
 17750 0158 6D4A     	 ldr r2,.L1046+60
 17751 015a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 17752 015e F97F     	 ldrb r1,[r7,#31]
 17753 0160 FA7B     	 ldrb r2,[r7,#15]
 17754 0162 0846     	 mov r0,r1
 17755 0164 1146     	 mov r1,r2
 17756 0166 BA68     	 ldr r2,[r7,#8]
 17757 0168 FFF7FEFF 	 bl cliDumpPrintLinef
4218:../cleanflight/src/main/interface/cli.c **** 
4219:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, customMotorMixer(0)->throttle == 0.0f, "\r\nmmix reset\r\n");
 17758              	 .loc 13 4219 0
 17759 016c 0020     	 movs r0,#0
 17760 016e FFF7FEFF 	 bl customMotorMixer
 17761 0172 0346     	 mov r3,r0
 17762 0174 1B68     	 ldr r3,[r3]
 17763 0176 07EE903A 	 fmsr s15,r3
 17764 017a F5EE407A 	 fcmpzs s15
 17765 017e F1EE10FA 	 fmstat
 17766 0182 0CBF     	 ite eq
 17767 0184 0123     	 moveq r3,#1
 17768 0186 0023     	 movne r3,#0
 17769 0188 DBB2     	 uxtb r3,r3
 17770 018a FA7F     	 ldrb r2,[r7,#31]
 17771 018c 1046     	 mov r0,r2
 17772 018e 1946     	 mov r1,r3
 17773 0190 604A     	 ldr r2,.L1046+64
 17774 0192 FFF7FEFF 	 bl cliDumpPrintLinef
4220:../cleanflight/src/main/interface/cli.c **** 
4221:../cleanflight/src/main/interface/cli.c ****         printMotorMix(dumpMask, customMotorMixer_CopyArray, customMotorMixer(0));
 17775              	 .loc 13 4221 0
 17776 0196 0020     	 movs r0,#0
 17777 0198 FFF7FEFF 	 bl customMotorMixer
 17778 019c 0246     	 mov r2,r0
 17779 019e FB7F     	 ldrb r3,[r7,#31]
 17780 01a0 1846     	 mov r0,r3
 17781 01a2 5D49     	 ldr r1,.L1046+68
 17782 01a4 FFF7FEFF 	 bl printMotorMix
4222:../cleanflight/src/main/interface/cli.c **** 
4223:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SERVOS
4224:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("servo");
 17783              	 .loc 13 4224 0
 17784 01a8 5C48     	 ldr r0,.L1046+72
 17785 01aa FFF7FEFF 	 bl cliPrintHashLine
4225:../cleanflight/src/main/interface/cli.c ****         printServo(dumpMask, servoParams_CopyArray, servoParams(0));
 17786              	 .loc 13 4225 0
 17787 01ae 0020     	 movs r0,#0
 17788 01b0 FFF7FEFF 	 bl servoParams
 17789 01b4 0246     	 mov r2,r0
 17790 01b6 FB7F     	 ldrb r3,[r7,#31]
 17791 01b8 1846     	 mov r0,r3
 17792 01ba 5949     	 ldr r1,.L1046+76
 17793 01bc FFF7FEFF 	 bl printServo
4226:../cleanflight/src/main/interface/cli.c **** 
4227:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("servo mix");
 17794              	 .loc 13 4227 0
 17795 01c0 5848     	 ldr r0,.L1046+80
 17796 01c2 FFF7FEFF 	 bl cliPrintHashLine
4228:../cleanflight/src/main/interface/cli.c ****         // print custom servo mixer if exists
4229:../cleanflight/src/main/interface/cli.c ****         cliDumpPrintLinef(dumpMask, customServoMixers(0)->rate == 0, "smix reset\r\n");
 17797              	 .loc 13 4229 0
 17798 01c6 0020     	 movs r0,#0
 17799 01c8 FFF7FEFF 	 bl customServoMixers
 17800 01cc 0346     	 mov r3,r0
 17801 01ce 9B78     	 ldrb r3,[r3,#2]
 17802 01d0 5BB2     	 sxtb r3,r3
 17803 01d2 002B     	 cmp r3,#0
 17804 01d4 0CBF     	 ite eq
 17805 01d6 0123     	 moveq r3,#1
 17806 01d8 0023     	 movne r3,#0
 17807 01da DBB2     	 uxtb r3,r3
 17808 01dc FA7F     	 ldrb r2,[r7,#31]
 17809 01de 1046     	 mov r0,r2
 17810 01e0 1946     	 mov r1,r3
 17811 01e2 514A     	 ldr r2,.L1046+84
 17812 01e4 FFF7FEFF 	 bl cliDumpPrintLinef
4230:../cleanflight/src/main/interface/cli.c ****         printServoMix(dumpMask, customServoMixers_CopyArray, customServoMixers(0));
 17813              	 .loc 13 4230 0
 17814 01e8 0020     	 movs r0,#0
 17815 01ea FFF7FEFF 	 bl customServoMixers
 17816 01ee 0246     	 mov r2,r0
 17817 01f0 FB7F     	 ldrb r3,[r7,#31]
 17818 01f2 1846     	 mov r0,r3
 17819 01f4 4D49     	 ldr r1,.L1046+88
 17820 01f6 FFF7FEFF 	 bl printServoMix
4231:../cleanflight/src/main/interface/cli.c **** #endif
4232:../cleanflight/src/main/interface/cli.c **** #endif
4233:../cleanflight/src/main/interface/cli.c **** 
4234:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("feature");
 17821              	 .loc 13 4234 0
 17822 01fa 4D48     	 ldr r0,.L1046+92
 17823 01fc FFF7FEFF 	 bl cliPrintHashLine
4235:../cleanflight/src/main/interface/cli.c ****         printFeature(dumpMask, &featureConfig_Copy, featureConfig());
 17824              	 .loc 13 4235 0
 17825 0200 FFF7FEFF 	 bl featureConfig
 17826 0204 0246     	 mov r2,r0
 17827 0206 FB7F     	 ldrb r3,[r7,#31]
 17828 0208 1846     	 mov r0,r3
 17829 020a 4A49     	 ldr r1,.L1046+96
 17830 020c FFF7FEFF 	 bl printFeature
4236:../cleanflight/src/main/interface/cli.c **** 
4237:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BEEPER)
4238:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("beeper");
4239:../cleanflight/src/main/interface/cli.c ****         printBeeper(dumpMask, beeperConfig_Copy.beeper_off_flags, beeperConfig()->beeper_off_flags,
4240:../cleanflight/src/main/interface/cli.c **** 
4241:../cleanflight/src/main/interface/cli.c **** #if defined(USE_DSHOT)
4242:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("beacon");
4243:../cleanflight/src/main/interface/cli.c ****         printBeeper(dumpMask, beeperConfig_Copy.dshotBeaconOffFlags, beeperConfig()->dshotBeaconOff
4244:../cleanflight/src/main/interface/cli.c **** #endif
4245:../cleanflight/src/main/interface/cli.c **** #endif // USE_BEEPER
4246:../cleanflight/src/main/interface/cli.c **** 
4247:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("map");
 17831              	 .loc 13 4247 0
 17832 0210 4948     	 ldr r0,.L1046+100
 17833 0212 FFF7FEFF 	 bl cliPrintHashLine
4248:../cleanflight/src/main/interface/cli.c ****         printMap(dumpMask, &rxConfig_Copy, rxConfig());
 17834              	 .loc 13 4248 0
 17835 0216 FFF7FEFF 	 bl rxConfig
 17836 021a 0246     	 mov r2,r0
 17837 021c FB7F     	 ldrb r3,[r7,#31]
 17838 021e 1846     	 mov r0,r3
 17839 0220 4649     	 ldr r1,.L1046+104
 17840 0222 FFF7FEFF 	 bl printMap
4249:../cleanflight/src/main/interface/cli.c **** 
4250:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("serial");
 17841              	 .loc 13 4250 0
 17842 0226 4648     	 ldr r0,.L1046+108
 17843 0228 FFF7FEFF 	 bl cliPrintHashLine
4251:../cleanflight/src/main/interface/cli.c ****         printSerial(dumpMask, &serialConfig_Copy, serialConfig());
 17844              	 .loc 13 4251 0
 17845 022c FFF7FEFF 	 bl serialConfig
 17846 0230 0246     	 mov r2,r0
 17847 0232 FB7F     	 ldrb r3,[r7,#31]
 17848 0234 1846     	 mov r0,r3
 17849 0236 4349     	 ldr r1,.L1046+112
 17850 0238 FFF7FEFF 	 bl printSerial
4252:../cleanflight/src/main/interface/cli.c **** 
4253:../cleanflight/src/main/interface/cli.c **** #ifdef USE_LED_STRIP
4254:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("led");
4255:../cleanflight/src/main/interface/cli.c ****         printLed(dumpMask, ledStripConfig_Copy.ledConfigs, ledStripConfig()->ledConfigs);
4256:../cleanflight/src/main/interface/cli.c **** 
4257:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("color");
4258:../cleanflight/src/main/interface/cli.c ****         printColor(dumpMask, ledStripConfig_Copy.colors, ledStripConfig()->colors);
4259:../cleanflight/src/main/interface/cli.c **** 
4260:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("mode_color");
4261:../cleanflight/src/main/interface/cli.c ****         printModeColor(dumpMask, &ledStripConfig_Copy, ledStripConfig());
4262:../cleanflight/src/main/interface/cli.c **** #endif
4263:../cleanflight/src/main/interface/cli.c **** 
4264:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("aux");
 17851              	 .loc 13 4264 0
 17852 023c 4248     	 ldr r0,.L1046+116
 17853 023e FFF7FEFF 	 bl cliPrintHashLine
4265:../cleanflight/src/main/interface/cli.c ****         printAux(dumpMask, modeActivationConditions_CopyArray, modeActivationConditions(0));
 17854              	 .loc 13 4265 0
 17855 0242 0020     	 movs r0,#0
 17856 0244 FFF7FEFF 	 bl modeActivationConditions
 17857 0248 0246     	 mov r2,r0
 17858 024a FB7F     	 ldrb r3,[r7,#31]
 17859 024c 1846     	 mov r0,r3
 17860 024e 3F49     	 ldr r1,.L1046+120
 17861 0250 FFF7FEFF 	 bl printAux
4266:../cleanflight/src/main/interface/cli.c **** 
4267:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("adjrange");
 17862              	 .loc 13 4267 0
 17863 0254 3E48     	 ldr r0,.L1046+124
 17864 0256 FFF7FEFF 	 bl cliPrintHashLine
4268:../cleanflight/src/main/interface/cli.c ****         printAdjustmentRange(dumpMask, adjustmentRanges_CopyArray, adjustmentRanges(0));
 17865              	 .loc 13 4268 0
 17866 025a 0020     	 movs r0,#0
 17867 025c FFF7FEFF 	 bl adjustmentRanges
 17868 0260 0246     	 mov r2,r0
 17869 0262 FB7F     	 ldrb r3,[r7,#31]
 17870 0264 1846     	 mov r0,r3
 17871 0266 3B49     	 ldr r1,.L1046+128
 17872 0268 FFF7FEFF 	 bl printAdjustmentRange
4269:../cleanflight/src/main/interface/cli.c **** 
4270:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("rxrange");
 17873              	 .loc 13 4270 0
 17874 026c 3A48     	 ldr r0,.L1046+132
 17875 026e FFF7FEFF 	 bl cliPrintHashLine
4271:../cleanflight/src/main/interface/cli.c ****         printRxRange(dumpMask, rxChannelRangeConfigs_CopyArray, rxChannelRangeConfigs(0));
 17876              	 .loc 13 4271 0
 17877 0272 0020     	 movs r0,#0
 17878 0274 FFF7FEFF 	 bl rxChannelRangeConfigs
 17879 0278 0246     	 mov r2,r0
 17880 027a FB7F     	 ldrb r3,[r7,#31]
 17881 027c 1846     	 mov r0,r3
 17882 027e 3749     	 ldr r1,.L1046+136
 17883 0280 FFF7FEFF 	 bl printRxRange
4272:../cleanflight/src/main/interface/cli.c **** 
4273:../cleanflight/src/main/interface/cli.c **** #ifdef USE_VTX_CONTROL
4274:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("vtx");
 17884              	 .loc 13 4274 0
 17885 0284 3648     	 ldr r0,.L1046+140
 17886 0286 FFF7FEFF 	 bl cliPrintHashLine
4275:../cleanflight/src/main/interface/cli.c ****         printVtx(dumpMask, &vtxConfig_Copy, vtxConfig());
 17887              	 .loc 13 4275 0
 17888 028a FFF7FEFF 	 bl vtxConfig
 17889 028e 0246     	 mov r2,r0
 17890 0290 FB7F     	 ldrb r3,[r7,#31]
 17891 0292 1846     	 mov r0,r3
 17892 0294 3349     	 ldr r1,.L1046+144
 17893 0296 FFF7FEFF 	 bl printVtx
4276:../cleanflight/src/main/interface/cli.c **** #endif
4277:../cleanflight/src/main/interface/cli.c **** 
4278:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("rxfail");
 17894              	 .loc 13 4278 0
 17895 029a 3348     	 ldr r0,.L1046+148
 17896 029c FFF7FEFF 	 bl cliPrintHashLine
4279:../cleanflight/src/main/interface/cli.c ****         printRxFailsafe(dumpMask, rxFailsafeChannelConfigs_CopyArray, rxFailsafeChannelConfigs(0));
 17897              	 .loc 13 4279 0
 17898 02a0 0020     	 movs r0,#0
 17899 02a2 FFF7FEFF 	 bl rxFailsafeChannelConfigs
 17900 02a6 0246     	 mov r2,r0
 17901 02a8 FB7F     	 ldrb r3,[r7,#31]
 17902 02aa 1846     	 mov r0,r3
 17903 02ac 2F49     	 ldr r1,.L1046+152
 17904 02ae FFF7FEFF 	 bl printRxFailsafe
4280:../cleanflight/src/main/interface/cli.c **** 
4281:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("master");
 17905              	 .loc 13 4281 0
 17906 02b2 0848     	 ldr r0,.L1046
 17907 02b4 FFF7FEFF 	 bl cliPrintHashLine
4282:../cleanflight/src/main/interface/cli.c ****         dumpAllValues(MASTER_VALUE, dumpMask);
 17908              	 .loc 13 4282 0
 17909 02b8 FB7F     	 ldrb r3,[r7,#31]
 17910 02ba 0020     	 movs r0,#0
 17911 02bc 1946     	 mov r1,r3
 17912 02be FFF7FEFF 	 bl dumpAllValues
4283:../cleanflight/src/main/interface/cli.c **** 
4284:../cleanflight/src/main/interface/cli.c ****         if (dumpMask & DUMP_ALL) {
 17913              	 .loc 13 4284 0
 17914 02c2 FB7F     	 ldrb r3,[r7,#31]
 17915 02c4 03F00803 	 and r3,r3,#8
 17916 02c8 002B     	 cmp r3,#0
 17917 02ca 00F09180 	 beq .L1039
 17918              	.LBB138:
4285:../cleanflight/src/main/interface/cli.c ****             for (uint32_t pidProfileIndex = 0; pidProfileIndex < MAX_PROFILE_COUNT; pidProfileIndex
 17919              	 .loc 13 4285 0
 17920 02ce 0023     	 movs r3,#0
 17921 02d0 7B61     	 str r3,[r7,#20]
 17922 02d2 57E0     	 b .L1040
 17923              	.L1047:
 17924              	 .align 2
 17925              	.L1046:
 17926 02d4 880E0000 	 .word .LC229
 17927 02d8 24090000 	 .word .LC164
 17928 02dc 900E0000 	 .word .LC230
 17929 02e0 980E0000 	 .word .LC231
 17930 02e4 9C0E0000 	 .word .LC232
 17931 02e8 A80E0000 	 .word .LC233
 17932 02ec 04000000 	 .word .LC1
 17933 02f0 B00E0000 	 .word .LC234
 17934 02f4 D80E0000 	 .word .LC235
 17935 02f8 E80E0000 	 .word .LC236
 17936 02fc 00000000 	 .word pilotConfig_Copy
 17937 0300 F00E0000 	 .word .LC237
 17938 0304 FC0E0000 	 .word .LC238
 17939 0308 00000000 	 .word mixerConfig_Copy
 17940 030c 040F0000 	 .word .LC239
 17941 0310 00000000 	 .word mixerNames
 17942 0314 100F0000 	 .word .LC240
 17943 0318 00000000 	 .word customMotorMixer_CopyArray
 17944 031c 200F0000 	 .word .LC241
 17945 0320 00000000 	 .word servoParams_CopyArray
 17946 0324 280F0000 	 .word .LC242
 17947 0328 340F0000 	 .word .LC243
 17948 032c 00000000 	 .word customServoMixers_CopyArray
 17949 0330 440F0000 	 .word .LC244
 17950 0334 00000000 	 .word featureConfig_Copy
 17951 0338 4C0F0000 	 .word .LC245
 17952 033c 00000000 	 .word rxConfig_Copy
 17953 0340 500F0000 	 .word .LC246
 17954 0344 00000000 	 .word serialConfig_Copy
 17955 0348 580F0000 	 .word .LC247
 17956 034c 00000000 	 .word modeActivationConditions_CopyArray
 17957 0350 5C0F0000 	 .word .LC248
 17958 0354 00000000 	 .word adjustmentRanges_CopyArray
 17959 0358 680F0000 	 .word .LC249
 17960 035c 00000000 	 .word rxChannelRangeConfigs_CopyArray
 17961 0360 700F0000 	 .word .LC250
 17962 0364 00000000 	 .word vtxConfig_Copy
 17963 0368 740F0000 	 .word .LC251
 17964 036c 00000000 	 .word rxFailsafeChannelConfigs_CopyArray
 17965              	.L1041:
4286:../cleanflight/src/main/interface/cli.c ****                 cliDumpPidProfile(pidProfileIndex, dumpMask);
 17966              	 .loc 13 4286 0 discriminator 3
 17967 0370 7B69     	 ldr r3,[r7,#20]
 17968 0372 DAB2     	 uxtb r2,r3
 17969 0374 FB7F     	 ldrb r3,[r7,#31]
 17970 0376 1046     	 mov r0,r2
 17971 0378 1946     	 mov r1,r3
 17972 037a FFF7FEFF 	 bl cliDumpPidProfile
4285:../cleanflight/src/main/interface/cli.c ****             for (uint32_t pidProfileIndex = 0; pidProfileIndex < MAX_PROFILE_COUNT; pidProfileIndex
 17973              	 .loc 13 4285 0 discriminator 3
 17974 037e 7B69     	 ldr r3,[r7,#20]
 17975 0380 0133     	 adds r3,r3,#1
 17976 0382 7B61     	 str r3,[r7,#20]
 17977              	.L1040:
4285:../cleanflight/src/main/interface/cli.c ****             for (uint32_t pidProfileIndex = 0; pidProfileIndex < MAX_PROFILE_COUNT; pidProfileIndex
 17978              	 .loc 13 4285 0 is_stmt 0 discriminator 1
 17979 0384 7B69     	 ldr r3,[r7,#20]
 17980 0386 022B     	 cmp r3,#2
 17981 0388 F2D9     	 bls .L1041
 17982              	.LBE138:
4287:../cleanflight/src/main/interface/cli.c ****             }
4288:../cleanflight/src/main/interface/cli.c ****             cliPrintHashLine("restore original profile selection");
 17983              	 .loc 13 4288 0 is_stmt 1
 17984 038a 2F48     	 ldr r0,.L1048
 17985 038c FFF7FEFF 	 bl cliPrintHashLine
4289:../cleanflight/src/main/interface/cli.c **** 
4290:../cleanflight/src/main/interface/cli.c ****             pidProfileIndexToUse = systemConfig_Copy.pidProfileIndex;
 17986              	 .loc 13 4290 0
 17987 0390 2E4B     	 ldr r3,.L1048+4
 17988 0392 1B78     	 ldrb r3,[r3]
 17989 0394 DAB2     	 uxtb r2,r3
 17990 0396 2E4B     	 ldr r3,.L1048+8
 17991 0398 1A70     	 strb r2,[r3]
4291:../cleanflight/src/main/interface/cli.c **** 
4292:../cleanflight/src/main/interface/cli.c ****             cliProfile("");
 17992              	 .loc 13 4292 0
 17993 039a 2E48     	 ldr r0,.L1048+12
 17994 039c FFF7FEFF 	 bl cliProfile
4293:../cleanflight/src/main/interface/cli.c **** 
4294:../cleanflight/src/main/interface/cli.c ****             pidProfileIndexToUse = CURRENT_PROFILE_INDEX;
 17995              	 .loc 13 4294 0
 17996 03a0 2B4B     	 ldr r3,.L1048+8
 17997 03a2 FF22     	 movs r2,#255
 17998 03a4 1A70     	 strb r2,[r3]
 17999              	.LBB139:
4295:../cleanflight/src/main/interface/cli.c **** 
4296:../cleanflight/src/main/interface/cli.c ****             for (uint32_t rateIndex = 0; rateIndex < CONTROL_RATE_PROFILE_COUNT; rateIndex++) {
 18000              	 .loc 13 4296 0
 18001 03a6 0023     	 movs r3,#0
 18002 03a8 3B61     	 str r3,[r7,#16]
 18003 03aa 09E0     	 b .L1042
 18004              	.L1043:
4297:../cleanflight/src/main/interface/cli.c ****                 cliDumpRateProfile(rateIndex, dumpMask);
 18005              	 .loc 13 4297 0 discriminator 3
 18006 03ac 3B69     	 ldr r3,[r7,#16]
 18007 03ae DAB2     	 uxtb r2,r3
 18008 03b0 FB7F     	 ldrb r3,[r7,#31]
 18009 03b2 1046     	 mov r0,r2
 18010 03b4 1946     	 mov r1,r3
 18011 03b6 FFF7FEFF 	 bl cliDumpRateProfile
4296:../cleanflight/src/main/interface/cli.c ****                 cliDumpRateProfile(rateIndex, dumpMask);
 18012              	 .loc 13 4296 0 discriminator 3
 18013 03ba 3B69     	 ldr r3,[r7,#16]
 18014 03bc 0133     	 adds r3,r3,#1
 18015 03be 3B61     	 str r3,[r7,#16]
 18016              	.L1042:
4296:../cleanflight/src/main/interface/cli.c ****                 cliDumpRateProfile(rateIndex, dumpMask);
 18017              	 .loc 13 4296 0 is_stmt 0 discriminator 1
 18018 03c0 3B69     	 ldr r3,[r7,#16]
 18019 03c2 052B     	 cmp r3,#5
 18020 03c4 F2D9     	 bls .L1043
 18021              	.LBE139:
4298:../cleanflight/src/main/interface/cli.c ****             }
4299:../cleanflight/src/main/interface/cli.c ****             cliPrintHashLine("restore original rateprofile selection");
 18022              	 .loc 13 4299 0 is_stmt 1
 18023 03c6 2448     	 ldr r0,.L1048+16
 18024 03c8 FFF7FEFF 	 bl cliPrintHashLine
4300:../cleanflight/src/main/interface/cli.c **** 
4301:../cleanflight/src/main/interface/cli.c ****             rateProfileIndexToUse = systemConfig_Copy.activeRateProfile;
 18025              	 .loc 13 4301 0
 18026 03cc 1F4B     	 ldr r3,.L1048+4
 18027 03ce 5B78     	 ldrb r3,[r3,#1]
 18028 03d0 DAB2     	 uxtb r2,r3
 18029 03d2 224B     	 ldr r3,.L1048+20
 18030 03d4 1A70     	 strb r2,[r3]
4302:../cleanflight/src/main/interface/cli.c **** 
4303:../cleanflight/src/main/interface/cli.c ****             cliRateProfile("");
 18031              	 .loc 13 4303 0
 18032 03d6 1F48     	 ldr r0,.L1048+12
 18033 03d8 FFF7FEFF 	 bl cliRateProfile
4304:../cleanflight/src/main/interface/cli.c **** 
4305:../cleanflight/src/main/interface/cli.c ****             rateProfileIndexToUse = CURRENT_PROFILE_INDEX;
 18034              	 .loc 13 4305 0
 18035 03dc 1F4B     	 ldr r3,.L1048+20
 18036 03de FF22     	 movs r2,#255
 18037 03e0 1A70     	 strb r2,[r3]
4306:../cleanflight/src/main/interface/cli.c **** 
4307:../cleanflight/src/main/interface/cli.c ****             cliPrintHashLine("save configuration");
 18038              	 .loc 13 4307 0
 18039 03e2 1F48     	 ldr r0,.L1048+24
 18040 03e4 FFF7FEFF 	 bl cliPrintHashLine
4308:../cleanflight/src/main/interface/cli.c ****             cliPrint("save");
 18041              	 .loc 13 4308 0
 18042 03e8 1E48     	 ldr r0,.L1048+28
 18043 03ea FFF7FEFF 	 bl cliPrint
 18044 03ee 0DE0     	 b .L1036
 18045              	.L1039:
4309:../cleanflight/src/main/interface/cli.c ****         } else {
4310:../cleanflight/src/main/interface/cli.c ****             cliDumpPidProfile(systemConfig_Copy.pidProfileIndex, dumpMask);
 18046              	 .loc 13 4310 0
 18047 03f0 164B     	 ldr r3,.L1048+4
 18048 03f2 1A78     	 ldrb r2,[r3]
 18049 03f4 FB7F     	 ldrb r3,[r7,#31]
 18050 03f6 1046     	 mov r0,r2
 18051 03f8 1946     	 mov r1,r3
 18052 03fa FFF7FEFF 	 bl cliDumpPidProfile
4311:../cleanflight/src/main/interface/cli.c **** 
4312:../cleanflight/src/main/interface/cli.c ****             cliDumpRateProfile(systemConfig_Copy.activeRateProfile, dumpMask);
 18053              	 .loc 13 4312 0
 18054 03fe 134B     	 ldr r3,.L1048+4
 18055 0400 5A78     	 ldrb r2,[r3,#1]
 18056 0402 FB7F     	 ldrb r3,[r7,#31]
 18057 0404 1046     	 mov r0,r2
 18058 0406 1946     	 mov r1,r3
 18059 0408 FFF7FEFF 	 bl cliDumpRateProfile
 18060              	.L1036:
 18061              	.LBE137:
4313:../cleanflight/src/main/interface/cli.c ****         }
4314:../cleanflight/src/main/interface/cli.c ****     }
4315:../cleanflight/src/main/interface/cli.c **** 
4316:../cleanflight/src/main/interface/cli.c ****     if (dumpMask & DUMP_PROFILE) {
 18062              	 .loc 13 4316 0
 18063 040c FB7F     	 ldrb r3,[r7,#31]
 18064 040e 03F00203 	 and r3,r3,#2
 18065 0412 002B     	 cmp r3,#0
 18066 0414 06D0     	 beq .L1044
4317:../cleanflight/src/main/interface/cli.c ****         cliDumpPidProfile(systemConfig_Copy.pidProfileIndex, dumpMask);
 18067              	 .loc 13 4317 0
 18068 0416 0D4B     	 ldr r3,.L1048+4
 18069 0418 1A78     	 ldrb r2,[r3]
 18070 041a FB7F     	 ldrb r3,[r7,#31]
 18071 041c 1046     	 mov r0,r2
 18072 041e 1946     	 mov r1,r3
 18073 0420 FFF7FEFF 	 bl cliDumpPidProfile
 18074              	.L1044:
4318:../cleanflight/src/main/interface/cli.c ****     }
4319:../cleanflight/src/main/interface/cli.c **** 
4320:../cleanflight/src/main/interface/cli.c ****     if (dumpMask & DUMP_RATES) {
 18075              	 .loc 13 4320 0
 18076 0424 FB7F     	 ldrb r3,[r7,#31]
 18077 0426 03F00403 	 and r3,r3,#4
 18078 042a 002B     	 cmp r3,#0
 18079 042c 06D0     	 beq .L1045
4321:../cleanflight/src/main/interface/cli.c ****         cliDumpRateProfile(systemConfig_Copy.activeRateProfile, dumpMask);
 18080              	 .loc 13 4321 0
 18081 042e 074B     	 ldr r3,.L1048+4
 18082 0430 5A78     	 ldrb r2,[r3,#1]
 18083 0432 FB7F     	 ldrb r3,[r7,#31]
 18084 0434 1046     	 mov r0,r2
 18085 0436 1946     	 mov r1,r3
 18086 0438 FFF7FEFF 	 bl cliDumpRateProfile
 18087              	.L1045:
4322:../cleanflight/src/main/interface/cli.c ****     }
4323:../cleanflight/src/main/interface/cli.c ****     // restore configs from copies
4324:../cleanflight/src/main/interface/cli.c ****     restoreConfigs();
 18088              	 .loc 13 4324 0
 18089 043c FFF7FEFF 	 bl restoreConfigs
4325:../cleanflight/src/main/interface/cli.c **** }
 18090              	 .loc 13 4325 0
 18091 0440 2437     	 adds r7,r7,#36
 18092              	.LCFI663:
 18093              	 .cfi_def_cfa_offset 12
 18094 0442 BD46     	 mov sp,r7
 18095              	.LCFI664:
 18096              	 .cfi_def_cfa_register 13
 18097              	 
 18098 0444 90BD     	 pop {r4,r7,pc}
 18099              	.L1049:
 18100 0446 00BF     	 .align 2
 18101              	.L1048:
 18102 0448 7C0F0000 	 .word .LC252
 18103 044c 00000000 	 .word systemConfig_Copy
 18104 0450 00000000 	 .word pidProfileIndexToUse
 18105 0454 04000000 	 .word .LC1
 18106 0458 A00F0000 	 .word .LC253
 18107 045c 00000000 	 .word rateProfileIndexToUse
 18108 0460 C80F0000 	 .word .LC254
 18109 0464 DC0F0000 	 .word .LC255
 18110              	 .cfi_endproc
 18111              	.LFE791:
 18113              	 .section .text.cliDump,"ax",%progbits
 18114              	 .align 2
 18115              	 .thumb
 18116              	 .thumb_func
 18118              	cliDump:
 18119              	.LFB792:
4326:../cleanflight/src/main/interface/cli.c **** 
4327:../cleanflight/src/main/interface/cli.c **** static void cliDump(char *cmdline)
4328:../cleanflight/src/main/interface/cli.c **** {
 18120              	 .loc 13 4328 0
 18121              	 .cfi_startproc
 18122              	 
 18123              	 
 18124 0000 80B5     	 push {r7,lr}
 18125              	.LCFI665:
 18126              	 .cfi_def_cfa_offset 8
 18127              	 .cfi_offset 7,-8
 18128              	 .cfi_offset 14,-4
 18129 0002 82B0     	 sub sp,sp,#8
 18130              	.LCFI666:
 18131              	 .cfi_def_cfa_offset 16
 18132 0004 00AF     	 add r7,sp,#0
 18133              	.LCFI667:
 18134              	 .cfi_def_cfa_register 7
 18135 0006 7860     	 str r0,[r7,#4]
4329:../cleanflight/src/main/interface/cli.c ****     printConfig(cmdline, false);
 18136              	 .loc 13 4329 0
 18137 0008 7868     	 ldr r0,[r7,#4]
 18138 000a 0021     	 movs r1,#0
 18139 000c FFF7FEFF 	 bl printConfig
4330:../cleanflight/src/main/interface/cli.c **** }
 18140              	 .loc 13 4330 0
 18141 0010 0837     	 adds r7,r7,#8
 18142              	.LCFI668:
 18143              	 .cfi_def_cfa_offset 8
 18144 0012 BD46     	 mov sp,r7
 18145              	.LCFI669:
 18146              	 .cfi_def_cfa_register 13
 18147              	 
 18148 0014 80BD     	 pop {r7,pc}
 18149              	 .cfi_endproc
 18150              	.LFE792:
 18152 0016 00BF     	 .section .text.cliDiff,"ax",%progbits
 18153              	 .align 2
 18154              	 .thumb
 18155              	 .thumb_func
 18157              	cliDiff:
 18158              	.LFB793:
4331:../cleanflight/src/main/interface/cli.c **** 
4332:../cleanflight/src/main/interface/cli.c **** static void cliDiff(char *cmdline)
4333:../cleanflight/src/main/interface/cli.c **** {
 18159              	 .loc 13 4333 0
 18160              	 .cfi_startproc
 18161              	 
 18162              	 
 18163 0000 80B5     	 push {r7,lr}
 18164              	.LCFI670:
 18165              	 .cfi_def_cfa_offset 8
 18166              	 .cfi_offset 7,-8
 18167              	 .cfi_offset 14,-4
 18168 0002 82B0     	 sub sp,sp,#8
 18169              	.LCFI671:
 18170              	 .cfi_def_cfa_offset 16
 18171 0004 00AF     	 add r7,sp,#0
 18172              	.LCFI672:
 18173              	 .cfi_def_cfa_register 7
 18174 0006 7860     	 str r0,[r7,#4]
4334:../cleanflight/src/main/interface/cli.c ****     printConfig(cmdline, true);
 18175              	 .loc 13 4334 0
 18176 0008 7868     	 ldr r0,[r7,#4]
 18177 000a 0121     	 movs r1,#1
 18178 000c FFF7FEFF 	 bl printConfig
4335:../cleanflight/src/main/interface/cli.c **** }
 18179              	 .loc 13 4335 0
 18180 0010 0837     	 adds r7,r7,#8
 18181              	.LCFI673:
 18182              	 .cfi_def_cfa_offset 8
 18183 0012 BD46     	 mov sp,r7
 18184              	.LCFI674:
 18185              	 .cfi_def_cfa_register 13
 18186              	 
 18187 0014 80BD     	 pop {r7,pc}
 18188              	 .cfi_endproc
 18189              	.LFE793:
 18191              	 .global cmdTable
 18192 0016 00BF     	 .section .rodata
 18193 0fe1 000000   	 .align 2
 18194              	.LC256:
 18195 0fe4 636F6E66 	 .ascii "configure adjustment ranges\000"
 18195      69677572 
 18195      65206164 
 18195      6A757374 
 18195      6D656E74 
 18196              	 .align 2
 18197              	.LC257:
 18198 1000 636F6E66 	 .ascii "configure modes\000"
 18198      69677572 
 18198      65206D6F 
 18198      64657300 
 18199              	 .align 2
 18200              	.LC258:
 18201 1010 3C696E64 	 .ascii "<index> <mode> <aux> <start> <end> <logic>\000"
 18201      65783E20 
 18201      3C6D6F64 
 18201      653E203C 
 18201      6175783E 
 18202 103b 00       	 .align 2
 18203              	.LC259:
 18204 103c 626C00   	 .ascii "bl\000"
 18205 103f 00       	 .align 2
 18206              	.LC260:
 18207 1040 7265626F 	 .ascii "reboot into bootloader\000"
 18207      6F742069 
 18207      6E746F20 
 18207      626F6F74 
 18207      6C6F6164 
 18208 1057 00       	 .align 2
 18209              	.LC261:
 18210 1058 67657420 	 .ascii "get / set the name of the board model\000"
 18210      2F207365 
 18210      74207468 
 18210      65206E61 
 18210      6D65206F 
 18211 107e 0000     	 .align 2
 18212              	.LC262:
 18213 1080 5B626F61 	 .ascii "[board name]\000"
 18213      7264206E 
 18213      616D655D 
 18213      00
 18214 108d 000000   	 .align 2
 18215              	.LC263:
 18216 1090 72657365 	 .ascii "reset to defaults and reboot\000"
 18216      7420746F 
 18216      20646566 
 18216      61756C74 
 18216      7320616E 
 18217 10ad 000000   	 .align 2
 18218              	.LC264:
 18219 10b0 5B6E6F73 	 .ascii "[nosave]\000"
 18219      6176655D 
 18219      00
 18220 10b9 000000   	 .align 2
 18221              	.LC265:
 18222 10bc 64696666 	 .ascii "diff\000"
 18222      00
 18223 10c1 000000   	 .align 2
 18224              	.LC266:
 18225 10c4 6C697374 	 .ascii "list configuration changes from default\000"
 18225      20636F6E 
 18225      66696775 
 18225      72617469 
 18225      6F6E2063 
 18226              	 .align 2
 18227              	.LC267:
 18228 10ec 5B6D6173 	 .ascii "[master|profile|rates|all] {defaults}\000"
 18228      7465727C 
 18228      70726F66 
 18228      696C657C 
 18228      72617465 
 18229 1112 0000     	 .align 2
 18230              	.LC268:
 18231 1114 646D6100 	 .ascii "dma\000"
 18232              	 .align 2
 18233              	.LC269:
 18234 1118 6C697374 	 .ascii "list dma utilisation\000"
 18234      20646D61 
 18234      20757469 
 18234      6C697361 
 18234      74696F6E 
 18235 112d 000000   	 .align 2
 18236              	.LC270:
 18237 1130 64756D70 	 .ascii "dump\000"
 18237      00
 18238 1135 000000   	 .align 2
 18239              	.LC271:
 18240 1138 64756D70 	 .ascii "dump configuration\000"
 18240      20636F6E 
 18240      66696775 
 18240      72617469 
 18240      6F6E00
 18241 114b 00       	 .align 2
 18242              	.LC272:
 18243 114c 65786974 	 .ascii "exit\000"
 18243      00
 18244 1151 000000   	 .align 2
 18245              	.LC273:
 18246 1154 636F6E66 	 .ascii "configure features\000"
 18246      69677572 
 18246      65206665 
 18246      61747572 
 18246      657300
 18247 1167 00       	 .align 2
 18248              	.LC274:
 18249 1168 6C697374 	 .ascii "list\015\012\011<+|->[name]\000"
 18249      0D0A093C 
 18249      2B7C2D3E 
 18249      5B6E616D 
 18249      655D00
 18250 117b 00       	 .align 2
 18251              	.LC275:
 18252 117c 67657400 	 .ascii "get\000"
 18253              	 .align 2
 18254              	.LC276:
 18255 1180 67657420 	 .ascii "get variable value\000"
 18255      76617269 
 18255      61626C65 
 18255      2076616C 
 18255      756500
 18256 1193 00       	 .align 2
 18257              	.LC277:
 18258 1194 5B6E616D 	 .ascii "[name]\000"
 18258      655D00
 18259 119b 00       	 .align 2
 18260              	.LC278:
 18261 119c 67707370 	 .ascii "gpspassthrough\000"
 18261      61737374 
 18261      68726F75 
 18261      676800
 18262 11ab 00       	 .align 2
 18263              	.LC279:
 18264 11ac 70617373 	 .ascii "passthrough gps to serial\000"
 18264      7468726F 
 18264      75676820 
 18264      67707320 
 18264      746F2073 
 18265 11c6 0000     	 .align 2
 18266              	.LC280:
 18267 11c8 6779726F 	 .ascii "gyroregisters\000"
 18267      72656769 
 18267      73746572 
 18267      7300
 18268 11d6 0000     	 .align 2
 18269              	.LC281:
 18270 11d8 64756D70 	 .ascii "dump gyro config registers contents\000"
 18270      20677972 
 18270      6F20636F 
 18270      6E666967 
 18270      20726567 
 18271              	 .align 2
 18272              	.LC282:
 18273 11fc 68656C70 	 .ascii "help\000"
 18273      00
 18274 1201 000000   	 .align 2
 18275              	.LC283:
 18276 1204 67657420 	 .ascii "get / set the id of the board manufacturer\000"
 18276      2F207365 
 18276      74207468 
 18276      65206964 
 18276      206F6620 
 18277 122f 00       	 .align 2
 18278              	.LC284:
 18279 1230 5B6D616E 	 .ascii "[manufacturer id]\000"
 18279      75666163 
 18279      74757265 
 18279      72206964 
 18279      5D00
 18280 1242 0000     	 .align 2
 18281              	.LC285:
 18282 1244 636F6E66 	 .ascii "configure rc channel order\000"
 18282      69677572 
 18282      65207263 
 18282      20636861 
 18282      6E6E656C 
 18283 125f 00       	 .align 2
 18284              	.LC286:
 18285 1260 5B3C6D61 	 .ascii "[<map>]\000"
 18285      703E5D00 
 18286              	 .align 2
 18287              	.LC287:
 18288 1268 6D63755F 	 .ascii "mcu_id\000"
 18288      696400
 18289 126f 00       	 .align 2
 18290              	.LC288:
 18291 1270 6964206F 	 .ascii "id of the microcontroller\000"
 18291      66207468 
 18291      65206D69 
 18291      63726F63 
 18291      6F6E7472 
 18292 128a 0000     	 .align 2
 18293              	.LC289:
 18294 128c 636F6E66 	 .ascii "configure mixer\000"
 18294      69677572 
 18294      65206D69 
 18294      78657200 
 18295              	 .align 2
 18296              	.LC290:
 18297 129c 6C697374 	 .ascii "list\015\012\011<name>\000"
 18297      0D0A093C 
 18297      6E616D65 
 18297      3E00
 18298 12aa 0000     	 .align 2
 18299              	.LC291:
 18300 12ac 6D6D6978 	 .ascii "mmix\000"
 18300      00
 18301 12b1 000000   	 .align 2
 18302              	.LC292:
 18303 12b4 63757374 	 .ascii "custom motor mixer\000"
 18303      6F6D206D 
 18303      6F746F72 
 18303      206D6978 
 18303      657200
 18304 12c7 00       	 .align 2
 18305              	.LC293:
 18306 12c8 6D6F746F 	 .ascii "motor\000"
 18306      7200
 18307 12ce 0000     	 .align 2
 18308              	.LC294:
 18309 12d0 6765742F 	 .ascii "get/set motor\000"
 18309      73657420 
 18309      6D6F746F 
 18309      7200
 18310 12de 0000     	 .align 2
 18311              	.LC295:
 18312 12e0 3C696E64 	 .ascii "<index> [<value>]\000"
 18312      65783E20 
 18312      5B3C7661 
 18312      6C75653E 
 18312      5D00
 18313 12f2 0000     	 .align 2
 18314              	.LC296:
 18315 12f4 6E616D65 	 .ascii "name of craft\000"
 18315      206F6620 
 18315      63726166 
 18315      7400
 18316 1302 0000     	 .align 2
 18317              	.LC297:
 18318 1304 706C6179 	 .ascii "play_sound\000"
 18318      5F736F75 
 18318      6E6400
 18319 130f 00       	 .align 2
 18320              	.LC298:
 18321 1310 5B3C696E 	 .ascii "[<index>]\000"
 18321      6465783E 
 18321      5D00
 18322 131a 0000     	 .align 2
 18323              	.LC299:
 18324 131c 6368616E 	 .ascii "change profile\000"
 18324      67652070 
 18324      726F6669 
 18324      6C6500
 18325 132b 00       	 .align 2
 18326              	.LC300:
 18327 132c 6368616E 	 .ascii "change rate profile\000"
 18327      67652072 
 18327      61746520 
 18327      70726F66 
 18327      696C6500 
 18328              	 .align 2
 18329              	.LC301:
 18330 1340 72635F73 	 .ascii "rc_smoothing_info\000"
 18330      6D6F6F74 
 18330      68696E67 
 18330      5F696E66 
 18330      6F00
 18331 1352 0000     	 .align 2
 18332              	.LC302:
 18333 1354 73686F77 	 .ascii "show rc_smoothing operational settings\000"
 18333      2072635F 
 18333      736D6F6F 
 18333      7468696E 
 18333      67206F70 
 18334 137b 00       	 .align 2
 18335              	.LC303:
 18336 137c 7265736F 	 .ascii "resource\000"
 18336      75726365 
 18336      00
 18337 1385 000000   	 .align 2
 18338              	.LC304:
 18339 1388 73686F77 	 .ascii "show/set resources\000"
 18339      2F736574 
 18339      20726573 
 18339      6F757263 
 18339      657300
 18340 139b 00       	 .align 2
 18341              	.LC305:
 18342 139c 73686F77 	 .ascii "show/set rx failsafe settings\000"
 18342      2F736574 
 18342      20727820 
 18342      6661696C 
 18342      73616665 
 18343 13ba 0000     	 .align 2
 18344              	.LC306:
 18345 13bc 636F6E66 	 .ascii "configure rx channel ranges\000"
 18345      69677572 
 18345      65207278 
 18345      20636861 
 18345      6E6E656C 
 18346              	 .align 2
 18347              	.LC307:
 18348 13d8 73617665 	 .ascii "save and reboot\000"
 18348      20616E64 
 18348      20726562 
 18348      6F6F7400 
 18349              	 .align 2
 18350              	.LC308:
 18351 13e8 73645F69 	 .ascii "sd_info\000"
 18351      6E666F00 
 18352              	 .align 2
 18353              	.LC309:
 18354 13f0 73646361 	 .ascii "sdcard info\000"
 18354      72642069 
 18354      6E666F00 
 18355              	 .align 2
 18356              	.LC310:
 18357 13fc 636F6E66 	 .ascii "configure serial ports\000"
 18357      69677572 
 18357      65207365 
 18357      7269616C 
 18357      20706F72 
 18358 1413 00       	 .align 2
 18359              	.LC311:
 18360 1414 73657269 	 .ascii "serialpassthrough\000"
 18360      616C7061 
 18360      73737468 
 18360      726F7567 
 18360      6800
 18361 1426 0000     	 .align 2
 18362              	.LC312:
 18363 1428 70617373 	 .ascii "passthrough serial data to port\000"
 18363      7468726F 
 18363      75676820 
 18363      73657269 
 18363      616C2064 
 18364              	 .align 2
 18365              	.LC313:
 18366 1448 3C69643E 	 .ascii "<id> [baud] [mode] [DTR PINIO]: passthrough to seri"
 18366      205B6261 
 18366      75645D20 
 18366      5B6D6F64 
 18366      655D205B 
 18367 147b 616C00   	 .ascii "al\000"
 18368 147e 0000     	 .align 2
 18369              	.LC314:
 18370 1480 636F6E66 	 .ascii "configure servos\000"
 18370      69677572 
 18370      65207365 
 18370      72766F73 
 18370      00
 18371 1491 000000   	 .align 2
 18372              	.LC315:
 18373 1494 73657400 	 .ascii "set\000"
 18374              	 .align 2
 18375              	.LC316:
 18376 1498 6368616E 	 .ascii "change setting\000"
 18376      67652073 
 18376      65747469 
 18376      6E6700
 18377 14a7 00       	 .align 2
 18378              	.LC317:
 18379 14a8 5B3C6E61 	 .ascii "[<name>=<value>]\000"
 18379      6D653E3D 
 18379      3C76616C 
 18379      75653E5D 
 18379      00
 18380 14b9 000000   	 .align 2
 18381              	.LC318:
 18382 14bc 67657420 	 .ascii "get / set the board type signature\000"
 18382      2F207365 
 18382      74207468 
 18382      6520626F 
 18382      61726420 
 18383 14df 00       	 .align 2
 18384              	.LC319:
 18385 14e0 5B736967 	 .ascii "[signature]\000"
 18385      6E617475 
 18385      72655D00 
 18386              	 .align 2
 18387              	.LC320:
 18388 14ec 736D6978 	 .ascii "smix\000"
 18388      00
 18389 14f1 000000   	 .align 2
 18390              	.LC321:
 18391 14f4 73657276 	 .ascii "servo mixer\000"
 18391      6F206D69 
 18391      78657200 
 18392              	 .align 2
 18393              	.LC322:
 18394 1500 3C72756C 	 .ascii "<rule> <servo> <source> <rate> <speed> <min> <max> "
 18394      653E203C 
 18394      73657276 
 18394      6F3E203C 
 18394      736F7572 
 18395 1533 3C626F78 	 .ascii "<box>\015\012\011reset\015\012\011load <mixer>\015\012"
 18395      3E0D0A09 
 18395      72657365 
 18395      740D0A09 
 18395      6C6F6164 
 18396 1551 09726576 	 .ascii "\011reverse <servo> <source> r|n\000"
 18396      65727365 
 18396      203C7365 
 18396      72766F3E 
 18396      203C736F 
 18397 156f 00       	 .align 2
 18398              	.LC323:
 18399 1570 73746174 	 .ascii "status\000"
 18399      757300
 18400 1577 00       	 .align 2
 18401              	.LC324:
 18402 1578 73686F77 	 .ascii "show status\000"
 18402      20737461 
 18402      74757300 
 18403              	 .align 2
 18404              	.LC325:
 18405 1584 7461736B 	 .ascii "tasks\000"
 18405      7300
 18406 158a 0000     	 .align 2
 18407              	.LC326:
 18408 158c 73686F77 	 .ascii "show task stats\000"
 18408      20746173 
 18408      6B207374 
 18408      61747300 
 18409              	 .align 2
 18410              	.LC327:
 18411 159c 73686F77 	 .ascii "show version\000"
 18411      20766572 
 18411      73696F6E 
 18411      00
 18412 15a9 000000   	 .align 2
 18413              	.LC328:
 18414 15ac 76747820 	 .ascii "vtx channels on switch\000"
 18414      6368616E 
 18414      6E656C73 
 18414      206F6E20 
 18414      73776974 
 18415              	 .section .rodata.cmdTable,"a",%progbits
 18416              	 .align 2
 18419              	cmdTable:
 18420 0000 5C0F0000 	 .word .LC248
 18421 0004 E40F0000 	 .word .LC256
 18422 0008 00000000 	 .word 0
 18423 000c 00000000 	 .word cliAdjustmentRange
 18424 0010 580F0000 	 .word .LC247
 18425 0014 00100000 	 .word .LC257
 18426 0018 10100000 	 .word .LC258
 18427 001c 00000000 	 .word cliAux
 18428 0020 3C100000 	 .word .LC259
 18429 0024 40100000 	 .word .LC260
 18430 0028 00000000 	 .word 0
 18431 002c 00000000 	 .word cliBootloader
 18432 0030 90060000 	 .word .LC125
 18433 0034 58100000 	 .word .LC261
 18434 0038 80100000 	 .word .LC262
 18435 003c 00000000 	 .word cliBoardName
 18436 0040 9C0E0000 	 .word .LC232
 18437 0044 90100000 	 .word .LC263
 18438 0048 B0100000 	 .word .LC264
 18439 004c 00000000 	 .word cliDefaults
 18440 0050 BC100000 	 .word .LC265
 18441 0054 C4100000 	 .word .LC266
 18442 0058 EC100000 	 .word .LC267
 18443 005c 00000000 	 .word cliDiff
 18444 0060 14110000 	 .word .LC268
 18445 0064 18110000 	 .word .LC269
 18446 0068 00000000 	 .word 0
 18447 006c 00000000 	 .word cliDma
 18448 0070 30110000 	 .word .LC270
 18449 0074 38110000 	 .word .LC271
 18450 0078 EC100000 	 .word .LC267
 18451 007c 00000000 	 .word cliDump
 18452 0080 4C110000 	 .word .LC272
 18453 0084 00000000 	 .word 0
 18454 0088 00000000 	 .word 0
 18455 008c 00000000 	 .word cliExit
 18456 0090 440F0000 	 .word .LC244
 18457 0094 54110000 	 .word .LC273
 18458 0098 68110000 	 .word .LC274
 18459 009c 00000000 	 .word cliFeature
 18460 00a0 7C110000 	 .word .LC275
 18461 00a4 80110000 	 .word .LC276
 18462 00a8 94110000 	 .word .LC277
 18463 00ac 00000000 	 .word cliGet
 18464 00b0 9C110000 	 .word .LC278
 18465 00b4 AC110000 	 .word .LC279
 18466 00b8 00000000 	 .word 0
 18467 00bc 00000000 	 .word cliGpsPassthrough
 18468 00c0 C8110000 	 .word .LC280
 18469 00c4 D8110000 	 .word .LC281
 18470 00c8 00000000 	 .word 0
 18471 00cc 00000000 	 .word cliDumpGyroRegisters
 18472 00d0 FC110000 	 .word .LC282
 18473 00d4 00000000 	 .word 0
 18474 00d8 00000000 	 .word 0
 18475 00dc 00000000 	 .word cliHelp
 18476 00e0 AC060000 	 .word .LC127
 18477 00e4 04120000 	 .word .LC283
 18478 00e8 30120000 	 .word .LC284
 18479 00ec 00000000 	 .word cliManufacturerId
 18480 00f0 4C0F0000 	 .word .LC245
 18481 00f4 44120000 	 .word .LC285
 18482 00f8 60120000 	 .word .LC286
 18483 00fc 00000000 	 .word cliMap
 18484 0100 68120000 	 .word .LC287
 18485 0104 70120000 	 .word .LC288
 18486 0108 00000000 	 .word 0
 18487 010c 00000000 	 .word cliMcuId
 18488 0110 FC0E0000 	 .word .LC238
 18489 0114 8C120000 	 .word .LC289
 18490 0118 9C120000 	 .word .LC290
 18491 011c 00000000 	 .word cliMixer
 18492 0120 AC120000 	 .word .LC291
 18493 0124 B4120000 	 .word .LC292
 18494 0128 00000000 	 .word 0
 18495 012c 00000000 	 .word cliMotorMix
 18496 0130 C8120000 	 .word .LC293
 18497 0134 D0120000 	 .word .LC294
 18498 0138 E0120000 	 .word .LC295
 18499 013c 00000000 	 .word cliMotor
 18500 0140 E80E0000 	 .word .LC236
 18501 0144 F4120000 	 .word .LC296
 18502 0148 00000000 	 .word 0
 18503 014c 00000000 	 .word cliName
 18504 0150 04130000 	 .word .LC297
 18505 0154 00000000 	 .word 0
 18506 0158 10130000 	 .word .LC298
 18507 015c 00000000 	 .word cliPlaySound
 18508 0160 24090000 	 .word .LC164
 18509 0164 1C130000 	 .word .LC299
 18510 0168 10130000 	 .word .LC298
 18511 016c 00000000 	 .word cliProfile
 18512 0170 2C090000 	 .word .LC165
 18513 0174 2C130000 	 .word .LC300
 18514 0178 10130000 	 .word .LC298
 18515 017c 00000000 	 .word cliRateProfile
 18516 0180 40130000 	 .word .LC301
 18517 0184 54130000 	 .word .LC302
 18518 0188 00000000 	 .word 0
 18519 018c 00000000 	 .word cliRcSmoothing
 18520 0190 7C130000 	 .word .LC303
 18521 0194 88130000 	 .word .LC304
 18522 0198 00000000 	 .word 0
 18523 019c 00000000 	 .word cliResource
 18524 01a0 740F0000 	 .word .LC251
 18525 01a4 9C130000 	 .word .LC305
 18526 01a8 00000000 	 .word 0
 18527 01ac 00000000 	 .word cliRxFailsafe
 18528 01b0 680F0000 	 .word .LC249
 18529 01b4 BC130000 	 .word .LC306
 18530 01b8 00000000 	 .word 0
 18531 01bc 00000000 	 .word cliRxRange
 18532 01c0 DC0F0000 	 .word .LC255
 18533 01c4 D8130000 	 .word .LC307
 18534 01c8 00000000 	 .word 0
 18535 01cc 00000000 	 .word cliSave
 18536 01d0 E8130000 	 .word .LC308
 18537 01d4 F0130000 	 .word .LC309
 18538 01d8 00000000 	 .word 0
 18539 01dc 00000000 	 .word cliSdInfo
 18540 01e0 500F0000 	 .word .LC246
 18541 01e4 FC130000 	 .word .LC310
 18542 01e8 00000000 	 .word 0
 18543 01ec 00000000 	 .word cliSerial
 18544 01f0 14140000 	 .word .LC311
 18545 01f4 28140000 	 .word .LC312
 18546 01f8 48140000 	 .word .LC313
 18547 01fc 00000000 	 .word cliSerialPassthrough
 18548 0200 200F0000 	 .word .LC241
 18549 0204 80140000 	 .word .LC314
 18550 0208 00000000 	 .word 0
 18551 020c 00000000 	 .word cliServo
 18552 0210 94140000 	 .word .LC315
 18553 0214 98140000 	 .word .LC316
 18554 0218 A8140000 	 .word .LC317
 18555 021c 00000000 	 .word cliSet
 18556 0220 18070000 	 .word .LC132
 18557 0224 BC140000 	 .word .LC318
 18558 0228 E0140000 	 .word .LC319
 18559 022c 00000000 	 .word cliSignature
 18560 0230 EC140000 	 .word .LC320
 18561 0234 F4140000 	 .word .LC321
 18562 0238 00150000 	 .word .LC322
 18563 023c 00000000 	 .word cliServoMix
 18564 0240 70150000 	 .word .LC323
 18565 0244 78150000 	 .word .LC324
 18566 0248 00000000 	 .word 0
 18567 024c 00000000 	 .word cliStatus
 18568 0250 84150000 	 .word .LC325
 18569 0254 8C150000 	 .word .LC326
 18570 0258 00000000 	 .word 0
 18571 025c 00000000 	 .word cliTasks
 18572 0260 A80E0000 	 .word .LC233
 18573 0264 9C150000 	 .word .LC327
 18574 0268 00000000 	 .word 0
 18575 026c 00000000 	 .word cliVersion
 18576 0270 700F0000 	 .word .LC250
 18577 0274 AC150000 	 .word .LC328
 18578 0278 00000000 	 .word 0
 18579 027c 00000000 	 .word cliVtx
 18580              	 .section .rodata
 18581 15c3 00       	 .align 2
 18582              	.LC329:
 18583 15c4 202D2025 	 .ascii " - %s\000"
 18583      7300
 18584 15ca 0000     	 .align 2
 18585              	.LC330:
 18586 15cc 0D0A0925 	 .ascii "\015\012\011%s\000"
 18586      7300
 18587              	 .section .text.cliHelp,"ax",%progbits
 18588              	 .align 2
 18589              	 .thumb
 18590              	 .thumb_func
 18592              	cliHelp:
 18593              	.LFB794:
4336:../cleanflight/src/main/interface/cli.c **** 
4337:../cleanflight/src/main/interface/cli.c **** #if defined(USE_USB_MSC)
4338:../cleanflight/src/main/interface/cli.c **** static void cliMsc(char *cmdline)
4339:../cleanflight/src/main/interface/cli.c **** {
4340:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
4341:../cleanflight/src/main/interface/cli.c **** 
4342:../cleanflight/src/main/interface/cli.c ****     if (mscCheckFilesystemReady()) {
4343:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("Restarting in mass storage mode");
4344:../cleanflight/src/main/interface/cli.c ****         cliPrint("\r\nRebooting");
4345:../cleanflight/src/main/interface/cli.c ****         bufWriterFlush(cliWriter);
4346:../cleanflight/src/main/interface/cli.c ****         waitForSerialPortToFinishTransmitting(cliPort);
4347:../cleanflight/src/main/interface/cli.c ****         stopPwmAllMotors();
4348:../cleanflight/src/main/interface/cli.c **** 
4349:../cleanflight/src/main/interface/cli.c ****         systemResetToMsc();
4350:../cleanflight/src/main/interface/cli.c ****     } else {
4351:../cleanflight/src/main/interface/cli.c ****         cliPrintHashLine("Storage not present or failed to initialize!");
4352:../cleanflight/src/main/interface/cli.c ****     }
4353:../cleanflight/src/main/interface/cli.c **** }
4354:../cleanflight/src/main/interface/cli.c **** #endif
4355:../cleanflight/src/main/interface/cli.c **** 
4356:../cleanflight/src/main/interface/cli.c **** typedef struct {
4357:../cleanflight/src/main/interface/cli.c ****     const char *name;
4358:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
4359:../cleanflight/src/main/interface/cli.c ****     const char *description;
4360:../cleanflight/src/main/interface/cli.c ****     const char *args;
4361:../cleanflight/src/main/interface/cli.c **** #endif
4362:../cleanflight/src/main/interface/cli.c ****     void (*func)(char *cmdline);
4363:../cleanflight/src/main/interface/cli.c **** } clicmd_t;
4364:../cleanflight/src/main/interface/cli.c **** 
4365:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
4366:../cleanflight/src/main/interface/cli.c **** #define CLI_COMMAND_DEF(name, description, args, method) \
4367:../cleanflight/src/main/interface/cli.c **** { \
4368:../cleanflight/src/main/interface/cli.c ****     name , \
4369:../cleanflight/src/main/interface/cli.c ****     description , \
4370:../cleanflight/src/main/interface/cli.c ****     args , \
4371:../cleanflight/src/main/interface/cli.c ****     method \
4372:../cleanflight/src/main/interface/cli.c **** }
4373:../cleanflight/src/main/interface/cli.c **** #else
4374:../cleanflight/src/main/interface/cli.c **** #define CLI_COMMAND_DEF(name, description, args, method) \
4375:../cleanflight/src/main/interface/cli.c **** { \
4376:../cleanflight/src/main/interface/cli.c ****     name, \
4377:../cleanflight/src/main/interface/cli.c ****     method \
4378:../cleanflight/src/main/interface/cli.c **** }
4379:../cleanflight/src/main/interface/cli.c **** #endif
4380:../cleanflight/src/main/interface/cli.c **** 
4381:../cleanflight/src/main/interface/cli.c **** static void cliHelp(char *cmdline);
4382:../cleanflight/src/main/interface/cli.c **** 
4383:../cleanflight/src/main/interface/cli.c **** // should be sorted a..z for bsearch()
4384:../cleanflight/src/main/interface/cli.c **** const clicmd_t cmdTable[] = {
4385:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("adjrange", "configure adjustment ranges", NULL, cliAdjustmentRange),
4386:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("aux", "configure modes", "<index> <mode> <aux> <start> <end> <logic>", cliAux)
4387:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BEEPER)
4388:../cleanflight/src/main/interface/cli.c **** #if defined(USE_DSHOT)
4389:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("beacon", "enable/disable Dshot beacon for a condition", "list\r\n"
4390:../cleanflight/src/main/interface/cli.c ****         "\t<->[name]", cliBeacon),
4391:../cleanflight/src/main/interface/cli.c **** #endif
4392:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("beeper", "enable/disable beeper for a condition", "list\r\n"
4393:../cleanflight/src/main/interface/cli.c ****         "\t<->[name]", cliBeeper),
4394:../cleanflight/src/main/interface/cli.c **** #endif // USE_BEEPER
4395:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("bl", "reboot into bootloader", NULL, cliBootloader),
4396:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BOARD_INFO)
4397:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("board_name", "get / set the name of the board model", "[board name]", cliBoard
4398:../cleanflight/src/main/interface/cli.c **** #endif
4399:../cleanflight/src/main/interface/cli.c **** #ifdef USE_LED_STRIP
4400:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("color", "configure colors", NULL, cliColor),
4401:../cleanflight/src/main/interface/cli.c **** #endif
4402:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("defaults", "reset to defaults and reboot", "[nosave]", cliDefaults),
4403:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("diff", "list configuration changes from default", "[master|profile|rates|all] 
4404:../cleanflight/src/main/interface/cli.c **** #ifdef USE_RESOURCE_MGMT
4405:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("dma", "list dma utilisation", NULL, cliDma),
4406:../cleanflight/src/main/interface/cli.c **** #endif
4407:../cleanflight/src/main/interface/cli.c **** #ifdef USE_DSHOT
4408:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("dshotprog", "program DShot ESC(s)", "<index> <command>+", cliDshotProg),
4409:../cleanflight/src/main/interface/cli.c **** #endif
4410:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("dump", "dump configuration",
4411:../cleanflight/src/main/interface/cli.c ****         "[master|profile|rates|all] {defaults}", cliDump),
4412:../cleanflight/src/main/interface/cli.c **** #ifdef USE_ESCSERIAL
4413:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("escprog", "passthrough esc to serial", "<mode [sk/bl/ki/cc]> <index>", cliEscP
4414:../cleanflight/src/main/interface/cli.c **** #endif
4415:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("exit", NULL, NULL, cliExit),
4416:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("feature", "configure features",
4417:../cleanflight/src/main/interface/cli.c ****         "list\r\n"
4418:../cleanflight/src/main/interface/cli.c ****         "\t<+|->[name]", cliFeature),
4419:../cleanflight/src/main/interface/cli.c **** #ifdef USE_FLASHFS
4420:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("flash_erase", "erase flash chip", NULL, cliFlashErase),
4421:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("flash_info", "show flash chip info", NULL, cliFlashInfo),
4422:../cleanflight/src/main/interface/cli.c **** #ifdef USE_FLASH_TOOLS
4423:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("flash_read", NULL, "<length> <address>", cliFlashRead),
4424:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("flash_write", NULL, "<address> <message>", cliFlashWrite),
4425:../cleanflight/src/main/interface/cli.c **** #endif
4426:../cleanflight/src/main/interface/cli.c **** #endif
4427:../cleanflight/src/main/interface/cli.c **** #ifdef USE_RX_FRSKY_SPI
4428:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("frsky_bind", "initiate binding for FrSky SPI RX", NULL, cliFrSkyBind),
4429:../cleanflight/src/main/interface/cli.c **** #endif
4430:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("get", "get variable value", "[name]", cliGet),
4431:../cleanflight/src/main/interface/cli.c **** #ifdef USE_GPS
4432:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("gpspassthrough", "passthrough gps to serial", NULL, cliGpsPassthrough),
4433:../cleanflight/src/main/interface/cli.c **** #endif
4434:../cleanflight/src/main/interface/cli.c **** #if defined(USE_GYRO_REGISTER_DUMP) && !defined(SIMULATOR_BUILD)
4435:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("gyroregisters", "dump gyro config registers contents", NULL, cliDumpGyroRegist
4436:../cleanflight/src/main/interface/cli.c **** #endif
4437:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("help", NULL, NULL, cliHelp),
4438:../cleanflight/src/main/interface/cli.c **** #ifdef USE_LED_STRIP
4439:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("led", "configure leds", NULL, cliLed),
4440:../cleanflight/src/main/interface/cli.c **** #endif
4441:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BOARD_INFO)
4442:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("manufacturer_id", "get / set the id of the board manufacturer", "[manufacturer
4443:../cleanflight/src/main/interface/cli.c **** #endif
4444:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("map", "configure rc channel order", "[<map>]", cliMap),
4445:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("mcu_id", "id of the microcontroller", NULL, cliMcuId),
4446:../cleanflight/src/main/interface/cli.c **** #ifndef USE_QUAD_MIXER_ONLY
4447:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("mixer", "configure mixer", "list\r\n\t<name>", cliMixer),
4448:../cleanflight/src/main/interface/cli.c **** #endif
4449:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("mmix", "custom motor mixer", NULL, cliMotorMix),
4450:../cleanflight/src/main/interface/cli.c **** #ifdef USE_LED_STRIP
4451:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("mode_color", "configure mode and special colors", NULL, cliModeColor),
4452:../cleanflight/src/main/interface/cli.c **** #endif
4453:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("motor",  "get/set motor", "<index> [<value>]", cliMotor),
4454:../cleanflight/src/main/interface/cli.c **** #ifdef USE_USB_MSC
4455:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("msc", "switch into msc mode", NULL, cliMsc),
4456:../cleanflight/src/main/interface/cli.c **** #endif
4457:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("name", "name of craft", NULL, cliName),
4458:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
4459:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("play_sound", NULL, "[<index>]", cliPlaySound),
4460:../cleanflight/src/main/interface/cli.c **** #endif
4461:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("profile", "change profile", "[<index>]", cliProfile),
4462:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("rateprofile", "change rate profile", "[<index>]", cliRateProfile),
4463:../cleanflight/src/main/interface/cli.c **** #ifdef USE_RC_SMOOTHING_FILTER
4464:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("rc_smoothing_info", "show rc_smoothing operational settings", NULL, cliRcSmoot
4465:../cleanflight/src/main/interface/cli.c **** #endif // USE_RC_SMOOTHING_FILTER
4466:../cleanflight/src/main/interface/cli.c **** #ifdef USE_RESOURCE_MGMT
4467:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("resource", "show/set resources", NULL, cliResource),
4468:../cleanflight/src/main/interface/cli.c **** #endif
4469:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("rxfail", "show/set rx failsafe settings", NULL, cliRxFailsafe),
4470:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("rxrange", "configure rx channel ranges", NULL, cliRxRange),
4471:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("save", "save and reboot", NULL, cliSave),
4472:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SDCARD
4473:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("sd_info", "sdcard info", NULL, cliSdInfo),
4474:../cleanflight/src/main/interface/cli.c **** #endif
4475:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("serial", "configure serial ports", NULL, cliSerial),
4476:../cleanflight/src/main/interface/cli.c **** #ifndef SKIP_SERIAL_PASSTHROUGH
4477:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("serialpassthrough", "passthrough serial data to port", "<id> [baud] [mode] [DT
4478:../cleanflight/src/main/interface/cli.c **** #endif
4479:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SERVOS
4480:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("servo", "configure servos", NULL, cliServo),
4481:../cleanflight/src/main/interface/cli.c **** #endif
4482:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("set", "change setting", "[<name>=<value>]", cliSet),
4483:../cleanflight/src/main/interface/cli.c **** #if defined(USE_BOARD_INFO) && defined(USE_SIGNATURE)
4484:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("signature", "get / set the board type signature", "[signature]", cliSignature)
4485:../cleanflight/src/main/interface/cli.c **** #endif
4486:../cleanflight/src/main/interface/cli.c **** #ifdef USE_SERVOS
4487:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("smix", "servo mixer", "<rule> <servo> <source> <rate> <speed> <min> <max> <box
4488:../cleanflight/src/main/interface/cli.c ****         "\treset\r\n"
4489:../cleanflight/src/main/interface/cli.c ****         "\tload <mixer>\r\n"
4490:../cleanflight/src/main/interface/cli.c ****         "\treverse <servo> <source> r|n", cliServoMix),
4491:../cleanflight/src/main/interface/cli.c **** #endif
4492:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("status", "show status", NULL, cliStatus),
4493:../cleanflight/src/main/interface/cli.c **** #ifndef SKIP_TASK_STATISTICS
4494:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("tasks", "show task stats", NULL, cliTasks),
4495:../cleanflight/src/main/interface/cli.c **** #endif
4496:../cleanflight/src/main/interface/cli.c **** #ifdef USE_TIMER_MGMT
4497:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("timer", "show timer configuration", NULL, cliTimer),
4498:../cleanflight/src/main/interface/cli.c **** #endif
4499:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("version", "show version", NULL, cliVersion),
4500:../cleanflight/src/main/interface/cli.c **** #ifdef USE_VTX_CONTROL
4501:../cleanflight/src/main/interface/cli.c ****     CLI_COMMAND_DEF("vtx", "vtx channels on switch", NULL, cliVtx),
4502:../cleanflight/src/main/interface/cli.c **** #endif
4503:../cleanflight/src/main/interface/cli.c **** };
4504:../cleanflight/src/main/interface/cli.c **** 
4505:../cleanflight/src/main/interface/cli.c **** static void cliHelp(char *cmdline)
4506:../cleanflight/src/main/interface/cli.c **** {
 18594              	 .loc 13 4506 0
 18595              	 .cfi_startproc
 18596              	 
 18597              	 
 18598 0000 80B5     	 push {r7,lr}
 18599              	.LCFI675:
 18600              	 .cfi_def_cfa_offset 8
 18601              	 .cfi_offset 7,-8
 18602              	 .cfi_offset 14,-4
 18603 0002 84B0     	 sub sp,sp,#16
 18604              	.LCFI676:
 18605              	 .cfi_def_cfa_offset 24
 18606 0004 00AF     	 add r7,sp,#0
 18607              	.LCFI677:
 18608              	 .cfi_def_cfa_register 7
 18609 0006 7860     	 str r0,[r7,#4]
 18610              	.LBB140:
4507:../cleanflight/src/main/interface/cli.c ****     UNUSED(cmdline);
4508:../cleanflight/src/main/interface/cli.c **** 
4509:../cleanflight/src/main/interface/cli.c ****     for (uint32_t i = 0; i < ARRAYLEN(cmdTable); i++) {
 18611              	 .loc 13 4509 0
 18612 0008 0023     	 movs r3,#0
 18613 000a FB60     	 str r3,[r7,#12]
 18614 000c 2EE0     	 b .L1053
 18615              	.L1056:
4510:../cleanflight/src/main/interface/cli.c ****         cliPrint(cmdTable[i].name);
 18616              	 .loc 13 4510 0
 18617 000e 1A4A     	 ldr r2,.L1057
 18618 0010 FB68     	 ldr r3,[r7,#12]
 18619 0012 1B01     	 lsls r3,r3,#4
 18620 0014 1344     	 add r3,r3,r2
 18621 0016 1B68     	 ldr r3,[r3]
 18622 0018 1846     	 mov r0,r3
 18623 001a FFF7FEFF 	 bl cliPrint
4511:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
4512:../cleanflight/src/main/interface/cli.c ****         if (cmdTable[i].description) {
 18624              	 .loc 13 4512 0
 18625 001e 164A     	 ldr r2,.L1057
 18626 0020 FB68     	 ldr r3,[r7,#12]
 18627 0022 1B01     	 lsls r3,r3,#4
 18628 0024 1344     	 add r3,r3,r2
 18629 0026 5B68     	 ldr r3,[r3,#4]
 18630 0028 002B     	 cmp r3,#0
 18631 002a 08D0     	 beq .L1054
4513:../cleanflight/src/main/interface/cli.c ****             cliPrintf(" - %s", cmdTable[i].description);
 18632              	 .loc 13 4513 0
 18633 002c 124A     	 ldr r2,.L1057
 18634 002e FB68     	 ldr r3,[r7,#12]
 18635 0030 1B01     	 lsls r3,r3,#4
 18636 0032 1344     	 add r3,r3,r2
 18637 0034 5B68     	 ldr r3,[r3,#4]
 18638 0036 1148     	 ldr r0,.L1057+4
 18639 0038 1946     	 mov r1,r3
 18640 003a FFF7FEFF 	 bl cliPrintf
 18641              	.L1054:
4514:../cleanflight/src/main/interface/cli.c ****         }
4515:../cleanflight/src/main/interface/cli.c ****         if (cmdTable[i].args) {
 18642              	 .loc 13 4515 0
 18643 003e 0E4A     	 ldr r2,.L1057
 18644 0040 FB68     	 ldr r3,[r7,#12]
 18645 0042 1B01     	 lsls r3,r3,#4
 18646 0044 1344     	 add r3,r3,r2
 18647 0046 0833     	 adds r3,r3,#8
 18648 0048 1B68     	 ldr r3,[r3]
 18649 004a 002B     	 cmp r3,#0
 18650 004c 09D0     	 beq .L1055
4516:../cleanflight/src/main/interface/cli.c ****             cliPrintf("\r\n\t%s", cmdTable[i].args);
 18651              	 .loc 13 4516 0
 18652 004e 0A4A     	 ldr r2,.L1057
 18653 0050 FB68     	 ldr r3,[r7,#12]
 18654 0052 1B01     	 lsls r3,r3,#4
 18655 0054 1344     	 add r3,r3,r2
 18656 0056 0833     	 adds r3,r3,#8
 18657 0058 1B68     	 ldr r3,[r3]
 18658 005a 0948     	 ldr r0,.L1057+8
 18659 005c 1946     	 mov r1,r3
 18660 005e FFF7FEFF 	 bl cliPrintf
 18661              	.L1055:
4517:../cleanflight/src/main/interface/cli.c ****         }
4518:../cleanflight/src/main/interface/cli.c **** #endif
4519:../cleanflight/src/main/interface/cli.c ****         cliPrintLinefeed();
 18662              	 .loc 13 4519 0 discriminator 2
 18663 0062 FFF7FEFF 	 bl cliPrintLinefeed
4509:../cleanflight/src/main/interface/cli.c ****         cliPrint(cmdTable[i].name);
 18664              	 .loc 13 4509 0 discriminator 2
 18665 0066 FB68     	 ldr r3,[r7,#12]
 18666 0068 0133     	 adds r3,r3,#1
 18667 006a FB60     	 str r3,[r7,#12]
 18668              	.L1053:
4509:../cleanflight/src/main/interface/cli.c ****         cliPrint(cmdTable[i].name);
 18669              	 .loc 13 4509 0 is_stmt 0 discriminator 1
 18670 006c FB68     	 ldr r3,[r7,#12]
 18671 006e 272B     	 cmp r3,#39
 18672 0070 CDD9     	 bls .L1056
 18673              	.LBE140:
4520:../cleanflight/src/main/interface/cli.c ****     }
4521:../cleanflight/src/main/interface/cli.c **** }
 18674              	 .loc 13 4521 0 is_stmt 1
 18675 0072 1037     	 adds r7,r7,#16
 18676              	.LCFI678:
 18677              	 .cfi_def_cfa_offset 8
 18678 0074 BD46     	 mov sp,r7
 18679              	.LCFI679:
 18680              	 .cfi_def_cfa_register 13
 18681              	 
 18682 0076 80BD     	 pop {r7,pc}
 18683              	.L1058:
 18684              	 .align 2
 18685              	.L1057:
 18686 0078 00000000 	 .word cmdTable
 18687 007c C4150000 	 .word .LC329
 18688 0080 CC150000 	 .word .LC330
 18689              	 .cfi_endproc
 18690              	.LFE794:
 18692              	 .section .rodata
 18693 15d2 0000     	 .align 2
 18694              	.LC331:
 18695 15d4 0D1B5B4B 	 .ascii "\015\033[K\000"
 18695      00
 18696 15d9 000000   	 .align 2
 18697              	.LC332:
 18698 15dc 1B5B324A 	 .ascii "\033[2J\033[1;1H\000"
 18698      1B5B313B 
 18698      314800
 18699 15e7 00       	 .align 2
 18700              	.LC333:
 18701 15e8 556E6B6E 	 .ascii "Unknown command, try 'help'\000"
 18701      6F776E20 
 18701      636F6D6D 
 18701      616E642C 
 18701      20747279 
 18702              	 .align 2
 18703              	.LC334:
 18704 1604 08200800 	 .ascii "\010 \010\000"
 18705              	 .section .text.cliProcess,"ax",%progbits
 18706              	 .align 2
 18707              	 .global cliProcess
 18708              	 .thumb
 18709              	 .thumb_func
 18711              	cliProcess:
 18712              	.LFB795:
4522:../cleanflight/src/main/interface/cli.c **** 
4523:../cleanflight/src/main/interface/cli.c **** void cliProcess(void)
4524:../cleanflight/src/main/interface/cli.c **** {
 18713              	 .loc 13 4524 0
 18714              	 .cfi_startproc
 18715              	 
 18716              	 
 18717 0000 80B5     	 push {r7,lr}
 18718              	.LCFI680:
 18719              	 .cfi_def_cfa_offset 8
 18720              	 .cfi_offset 7,-8
 18721              	 .cfi_offset 14,-4
 18722 0002 88B0     	 sub sp,sp,#32
 18723              	.LCFI681:
 18724              	 .cfi_def_cfa_offset 40
 18725 0004 00AF     	 add r7,sp,#0
 18726              	.LCFI682:
 18727              	 .cfi_def_cfa_register 7
4525:../cleanflight/src/main/interface/cli.c ****     if (!cliWriter) {
 18728              	 .loc 13 4525 0
 18729 0006 964B     	 ldr r3,.L1100
 18730 0008 1B68     	 ldr r3,[r3]
 18731 000a 002B     	 cmp r3,#0
 18732 000c 00D1     	 bne .L1060
4526:../cleanflight/src/main/interface/cli.c ****         return;
 18733              	 .loc 13 4526 0
 18734 000e 77E1     	 b .L1059
 18735              	.L1060:
4527:../cleanflight/src/main/interface/cli.c ****     }
4528:../cleanflight/src/main/interface/cli.c **** 
4529:../cleanflight/src/main/interface/cli.c ****     // Be a little bit tricky.  Flush the last inputs buffer, if any.
4530:../cleanflight/src/main/interface/cli.c ****     bufWriterFlush(cliWriter);
 18736              	 .loc 13 4530 0
 18737 0010 934B     	 ldr r3,.L1100
 18738 0012 1B68     	 ldr r3,[r3]
 18739 0014 1846     	 mov r0,r3
 18740 0016 FFF7FEFF 	 bl bufWriterFlush
4531:../cleanflight/src/main/interface/cli.c **** 
4532:../cleanflight/src/main/interface/cli.c ****     while (serialRxBytesWaiting(cliPort)) {
 18741              	 .loc 13 4532 0
 18742 001a 68E1     	 b .L1062
 18743              	.L1099:
 18744              	.LBB141:
4533:../cleanflight/src/main/interface/cli.c ****         uint8_t c = serialRead(cliPort);
 18745              	 .loc 13 4533 0
 18746 001c 914B     	 ldr r3,.L1100+4
 18747 001e 1B68     	 ldr r3,[r3]
 18748 0020 1846     	 mov r0,r3
 18749 0022 FFF7FEFF 	 bl serialRead
 18750 0026 0346     	 mov r3,r0
 18751 0028 FB71     	 strb r3,[r7,#7]
4534:../cleanflight/src/main/interface/cli.c ****         if (c == '\t' || c == '?') {
 18752              	 .loc 13 4534 0
 18753 002a FB79     	 ldrb r3,[r7,#7]
 18754 002c 092B     	 cmp r3,#9
 18755 002e 03D0     	 beq .L1063
 18756              	 .loc 13 4534 0 is_stmt 0 discriminator 1
 18757 0030 FB79     	 ldrb r3,[r7,#7]
 18758 0032 3F2B     	 cmp r3,#63
 18759 0034 40F09780 	 bne .L1064
 18760              	.L1063:
 18761              	.LBB142:
4535:../cleanflight/src/main/interface/cli.c ****             // do tab completion
4536:../cleanflight/src/main/interface/cli.c ****             const clicmd_t *cmd, *pstart = NULL, *pend = NULL;
 18762              	 .loc 13 4536 0 is_stmt 1
 18763 0038 0023     	 movs r3,#0
 18764 003a BB61     	 str r3,[r7,#24]
 18765 003c 0023     	 movs r3,#0
 18766 003e 7B61     	 str r3,[r7,#20]
4537:../cleanflight/src/main/interface/cli.c ****             uint32_t i = bufferIndex;
 18767              	 .loc 13 4537 0
 18768 0040 894B     	 ldr r3,.L1100+8
 18769 0042 1B68     	 ldr r3,[r3]
 18770 0044 3B61     	 str r3,[r7,#16]
4538:../cleanflight/src/main/interface/cli.c ****             for (cmd = cmdTable; cmd < cmdTable + ARRAYLEN(cmdTable); cmd++) {
 18771              	 .loc 13 4538 0
 18772 0046 894B     	 ldr r3,.L1100+12
 18773 0048 FB61     	 str r3,[r7,#28]
 18774 004a 1AE0     	 b .L1065
 18775              	.L1069:
4539:../cleanflight/src/main/interface/cli.c ****                 if (bufferIndex && (strncasecmp(cliBuffer, cmd->name, bufferIndex) != 0))
 18776              	 .loc 13 4539 0
 18777 004c 864B     	 ldr r3,.L1100+8
 18778 004e 1B68     	 ldr r3,[r3]
 18779 0050 002B     	 cmp r3,#0
 18780 0052 0CD0     	 beq .L1066
 18781              	 .loc 13 4539 0 is_stmt 0 discriminator 1
 18782 0054 FB69     	 ldr r3,[r7,#28]
 18783 0056 1A68     	 ldr r2,[r3]
 18784 0058 834B     	 ldr r3,.L1100+8
 18785 005a 1B68     	 ldr r3,[r3]
 18786 005c 8448     	 ldr r0,.L1100+16
 18787 005e 1146     	 mov r1,r2
 18788 0060 1A46     	 mov r2,r3
 18789 0062 FFF7FEFF 	 bl strncasecmp
 18790 0066 0346     	 mov r3,r0
 18791 0068 002B     	 cmp r3,#0
 18792 006a 00D0     	 beq .L1066
4540:../cleanflight/src/main/interface/cli.c ****                     continue;
 18793              	 .loc 13 4540 0 is_stmt 1
 18794 006c 06E0     	 b .L1067
 18795              	.L1066:
4541:../cleanflight/src/main/interface/cli.c ****                 if (!pstart)
 18796              	 .loc 13 4541 0
 18797 006e BB69     	 ldr r3,[r7,#24]
 18798 0070 002B     	 cmp r3,#0
 18799 0072 01D1     	 bne .L1068
4542:../cleanflight/src/main/interface/cli.c ****                     pstart = cmd;
 18800              	 .loc 13 4542 0
 18801 0074 FB69     	 ldr r3,[r7,#28]
 18802 0076 BB61     	 str r3,[r7,#24]
 18803              	.L1068:
4543:../cleanflight/src/main/interface/cli.c ****                 pend = cmd;
 18804              	 .loc 13 4543 0
 18805 0078 FB69     	 ldr r3,[r7,#28]
 18806 007a 7B61     	 str r3,[r7,#20]
 18807              	.L1067:
4538:../cleanflight/src/main/interface/cli.c ****                 if (bufferIndex && (strncasecmp(cliBuffer, cmd->name, bufferIndex) != 0))
 18808              	 .loc 13 4538 0 discriminator 2
 18809 007c FB69     	 ldr r3,[r7,#28]
 18810 007e 1033     	 adds r3,r3,#16
 18811 0080 FB61     	 str r3,[r7,#28]
 18812              	.L1065:
4538:../cleanflight/src/main/interface/cli.c ****                 if (bufferIndex && (strncasecmp(cliBuffer, cmd->name, bufferIndex) != 0))
 18813              	 .loc 13 4538 0 is_stmt 0 discriminator 1
 18814 0082 FB69     	 ldr r3,[r7,#28]
 18815 0084 7B4A     	 ldr r2,.L1100+20
 18816 0086 9342     	 cmp r3,r2
 18817 0088 E0D3     	 bcc .L1069
4544:../cleanflight/src/main/interface/cli.c ****             }
4545:../cleanflight/src/main/interface/cli.c ****             if (pstart) {    /* Buffer matches one or more commands */
 18818              	 .loc 13 4545 0 is_stmt 1
 18819 008a BB69     	 ldr r3,[r7,#24]
 18820 008c 002B     	 cmp r3,#0
 18821 008e 38D0     	 beq .L1070
 18822              	.L1073:
4546:../cleanflight/src/main/interface/cli.c ****                 for (; ; bufferIndex++) {
4547:../cleanflight/src/main/interface/cli.c ****                     if (pstart->name[bufferIndex] != pend->name[bufferIndex])
 18823              	 .loc 13 4547 0
 18824 0090 BB69     	 ldr r3,[r7,#24]
 18825 0092 1A68     	 ldr r2,[r3]
 18826 0094 744B     	 ldr r3,.L1100+8
 18827 0096 1B68     	 ldr r3,[r3]
 18828 0098 1344     	 add r3,r3,r2
 18829 009a 1A78     	 ldrb r2,[r3]
 18830 009c 7B69     	 ldr r3,[r7,#20]
 18831 009e 1968     	 ldr r1,[r3]
 18832 00a0 714B     	 ldr r3,.L1100+8
 18833 00a2 1B68     	 ldr r3,[r3]
 18834 00a4 0B44     	 add r3,r3,r1
 18835 00a6 1B78     	 ldrb r3,[r3]
 18836 00a8 9A42     	 cmp r2,r3
 18837 00aa 00D0     	 beq .L1071
4548:../cleanflight/src/main/interface/cli.c ****                         break;
 18838              	 .loc 13 4548 0
 18839 00ac 29E0     	 b .L1070
 18840              	.L1071:
4549:../cleanflight/src/main/interface/cli.c ****                     if (!pstart->name[bufferIndex] && bufferIndex < sizeof(cliBuffer) - 2) {
 18841              	 .loc 13 4549 0
 18842 00ae BB69     	 ldr r3,[r7,#24]
 18843 00b0 1A68     	 ldr r2,[r3]
 18844 00b2 6D4B     	 ldr r3,.L1100+8
 18845 00b4 1B68     	 ldr r3,[r3]
 18846 00b6 1344     	 add r3,r3,r2
 18847 00b8 1B78     	 ldrb r3,[r3]
 18848 00ba 002B     	 cmp r3,#0
 18849 00bc 11D1     	 bne .L1072
 18850              	 .loc 13 4549 0 is_stmt 0 discriminator 1
 18851 00be 6A4B     	 ldr r3,.L1100+8
 18852 00c0 1B68     	 ldr r3,[r3]
 18853 00c2 FD2B     	 cmp r3,#253
 18854 00c4 0DD8     	 bhi .L1072
4550:../cleanflight/src/main/interface/cli.c ****                         /* Unambiguous -- append a space */
4551:../cleanflight/src/main/interface/cli.c ****                         cliBuffer[bufferIndex++] = ' ';
 18855              	 .loc 13 4551 0 is_stmt 1
 18856 00c6 684B     	 ldr r3,.L1100+8
 18857 00c8 1B68     	 ldr r3,[r3]
 18858 00ca 5A1C     	 adds r2,r3,#1
 18859 00cc 6649     	 ldr r1,.L1100+8
 18860 00ce 0A60     	 str r2,[r1]
 18861 00d0 674A     	 ldr r2,.L1100+16
 18862 00d2 2021     	 movs r1,#32
 18863 00d4 D154     	 strb r1,[r2,r3]
4552:../cleanflight/src/main/interface/cli.c ****                         cliBuffer[bufferIndex] = '\0';
 18864              	 .loc 13 4552 0
 18865 00d6 644B     	 ldr r3,.L1100+8
 18866 00d8 1B68     	 ldr r3,[r3]
 18867 00da 654A     	 ldr r2,.L1100+16
 18868 00dc 0021     	 movs r1,#0
 18869 00de D154     	 strb r1,[r2,r3]
4553:../cleanflight/src/main/interface/cli.c ****                         break;
 18870              	 .loc 13 4553 0
 18871 00e0 0FE0     	 b .L1070
 18872              	.L1072:
4554:../cleanflight/src/main/interface/cli.c ****                     }
4555:../cleanflight/src/main/interface/cli.c ****                     cliBuffer[bufferIndex] = pstart->name[bufferIndex];
 18873              	 .loc 13 4555 0
 18874 00e2 614B     	 ldr r3,.L1100+8
 18875 00e4 1B68     	 ldr r3,[r3]
 18876 00e6 BA69     	 ldr r2,[r7,#24]
 18877 00e8 1168     	 ldr r1,[r2]
 18878 00ea 5F4A     	 ldr r2,.L1100+8
 18879 00ec 1268     	 ldr r2,[r2]
 18880 00ee 0A44     	 add r2,r2,r1
 18881 00f0 1178     	 ldrb r1,[r2]
 18882 00f2 5F4A     	 ldr r2,.L1100+16
 18883 00f4 D154     	 strb r1,[r2,r3]
4546:../cleanflight/src/main/interface/cli.c ****                     if (pstart->name[bufferIndex] != pend->name[bufferIndex])
 18884              	 .loc 13 4546 0
 18885 00f6 5C4B     	 ldr r3,.L1100+8
 18886 00f8 1B68     	 ldr r3,[r3]
 18887 00fa 0133     	 adds r3,r3,#1
 18888 00fc 5A4A     	 ldr r2,.L1100+8
 18889 00fe 1360     	 str r3,[r2]
4556:../cleanflight/src/main/interface/cli.c ****                 }
 18890              	 .loc 13 4556 0
 18891 0100 C6E7     	 b .L1073
 18892              	.L1070:
4557:../cleanflight/src/main/interface/cli.c ****             }
4558:../cleanflight/src/main/interface/cli.c ****             if (!bufferIndex || pstart != pend) {
 18893              	 .loc 13 4558 0
 18894 0102 594B     	 ldr r3,.L1100+8
 18895 0104 1B68     	 ldr r3,[r3]
 18896 0106 002B     	 cmp r3,#0
 18897 0108 03D0     	 beq .L1074
 18898              	 .loc 13 4558 0 is_stmt 0 discriminator 1
 18899 010a BA69     	 ldr r2,[r7,#24]
 18900 010c 7B69     	 ldr r3,[r7,#20]
 18901 010e 9A42     	 cmp r2,r3
 18902 0110 18D0     	 beq .L1075
 18903              	.L1074:
4559:../cleanflight/src/main/interface/cli.c ****                 /* Print list of ambiguous matches */
4560:../cleanflight/src/main/interface/cli.c ****                 cliPrint("\r\033[K");
 18904              	 .loc 13 4560 0 is_stmt 1
 18905 0112 5948     	 ldr r0,.L1100+24
 18906 0114 FFF7FEFF 	 bl cliPrint
4561:../cleanflight/src/main/interface/cli.c ****                 for (cmd = pstart; cmd <= pend; cmd++) {
 18907              	 .loc 13 4561 0
 18908 0118 BB69     	 ldr r3,[r7,#24]
 18909 011a FB61     	 str r3,[r7,#28]
 18910 011c 0AE0     	 b .L1076
 18911              	.L1077:
4562:../cleanflight/src/main/interface/cli.c ****                     cliPrint(cmd->name);
 18912              	 .loc 13 4562 0 discriminator 3
 18913 011e FB69     	 ldr r3,[r7,#28]
 18914 0120 1B68     	 ldr r3,[r3]
 18915 0122 1846     	 mov r0,r3
 18916 0124 FFF7FEFF 	 bl cliPrint
4563:../cleanflight/src/main/interface/cli.c ****                     cliWrite('\t');
 18917              	 .loc 13 4563 0 discriminator 3
 18918 0128 0920     	 movs r0,#9
 18919 012a FFF7FEFF 	 bl cliWrite
4561:../cleanflight/src/main/interface/cli.c ****                 for (cmd = pstart; cmd <= pend; cmd++) {
 18920              	 .loc 13 4561 0 discriminator 3
 18921 012e FB69     	 ldr r3,[r7,#28]
 18922 0130 1033     	 adds r3,r3,#16
 18923 0132 FB61     	 str r3,[r7,#28]
 18924              	.L1076:
4561:../cleanflight/src/main/interface/cli.c ****                 for (cmd = pstart; cmd <= pend; cmd++) {
 18925              	 .loc 13 4561 0 is_stmt 0 discriminator 1
 18926 0134 FA69     	 ldr r2,[r7,#28]
 18927 0136 7B69     	 ldr r3,[r7,#20]
 18928 0138 9A42     	 cmp r2,r3
 18929 013a F0D9     	 bls .L1077
4564:../cleanflight/src/main/interface/cli.c ****                 }
4565:../cleanflight/src/main/interface/cli.c ****                 cliPrompt();
 18930              	 .loc 13 4565 0 is_stmt 1
 18931 013c FFF7FEFF 	 bl cliPrompt
4566:../cleanflight/src/main/interface/cli.c ****                 i = 0;    /* Redraw prompt */
 18932              	 .loc 13 4566 0
 18933 0140 0023     	 movs r3,#0
 18934 0142 3B61     	 str r3,[r7,#16]
 18935              	.L1075:
4567:../cleanflight/src/main/interface/cli.c ****             }
4568:../cleanflight/src/main/interface/cli.c ****             for (; i < bufferIndex; i++)
 18936              	 .loc 13 4568 0
 18937 0144 09E0     	 b .L1078
 18938              	.L1079:
4569:../cleanflight/src/main/interface/cli.c ****                 cliWrite(cliBuffer[i]);
 18939              	 .loc 13 4569 0 discriminator 2
 18940 0146 4A4A     	 ldr r2,.L1100+16
 18941 0148 3B69     	 ldr r3,[r7,#16]
 18942 014a 1344     	 add r3,r3,r2
 18943 014c 1B78     	 ldrb r3,[r3]
 18944 014e 1846     	 mov r0,r3
 18945 0150 FFF7FEFF 	 bl cliWrite
4568:../cleanflight/src/main/interface/cli.c ****                 cliWrite(cliBuffer[i]);
 18946              	 .loc 13 4568 0 discriminator 2
 18947 0154 3B69     	 ldr r3,[r7,#16]
 18948 0156 0133     	 adds r3,r3,#1
 18949 0158 3B61     	 str r3,[r7,#16]
 18950              	.L1078:
4568:../cleanflight/src/main/interface/cli.c ****                 cliWrite(cliBuffer[i]);
 18951              	 .loc 13 4568 0 is_stmt 0 discriminator 1
 18952 015a 434B     	 ldr r3,.L1100+8
 18953 015c 1B68     	 ldr r3,[r3]
 18954 015e 3A69     	 ldr r2,[r7,#16]
 18955 0160 9A42     	 cmp r2,r3
 18956 0162 F0D3     	 bcc .L1079
 18957              	.LBE142:
4534:../cleanflight/src/main/interface/cli.c ****             // do tab completion
 18958              	 .loc 13 4534 0 is_stmt 1
 18959 0164 C3E0     	 b .L1062
 18960              	.L1064:
4570:../cleanflight/src/main/interface/cli.c ****         } else if (!bufferIndex && c == 4) {   // CTRL-D
 18961              	 .loc 13 4570 0
 18962 0166 404B     	 ldr r3,.L1100+8
 18963 0168 1B68     	 ldr r3,[r3]
 18964 016a 002B     	 cmp r3,#0
 18965 016c 06D1     	 bne .L1080
 18966              	 .loc 13 4570 0 is_stmt 0 discriminator 1
 18967 016e FB79     	 ldrb r3,[r7,#7]
 18968 0170 042B     	 cmp r3,#4
 18969 0172 03D1     	 bne .L1080
4571:../cleanflight/src/main/interface/cli.c ****             cliExit(cliBuffer);
 18970              	 .loc 13 4571 0 is_stmt 1
 18971 0174 3E48     	 ldr r0,.L1100+16
 18972 0176 FFF7FEFF 	 bl cliExit
4572:../cleanflight/src/main/interface/cli.c ****             return;
 18973              	 .loc 13 4572 0
 18974 017a C1E0     	 b .L1059
 18975              	.L1080:
4573:../cleanflight/src/main/interface/cli.c ****         } else if (c == 12) {                  // NewPage / CTRL-L
 18976              	 .loc 13 4573 0
 18977 017c FB79     	 ldrb r3,[r7,#7]
 18978 017e 0C2B     	 cmp r3,#12
 18979 0180 05D1     	 bne .L1081
4574:../cleanflight/src/main/interface/cli.c ****             // clear screen
4575:../cleanflight/src/main/interface/cli.c ****             cliPrint("\033[2J\033[1;1H");
 18980              	 .loc 13 4575 0
 18981 0182 3E48     	 ldr r0,.L1100+28
 18982 0184 FFF7FEFF 	 bl cliPrint
4576:../cleanflight/src/main/interface/cli.c ****             cliPrompt();
 18983              	 .loc 13 4576 0
 18984 0188 FFF7FEFF 	 bl cliPrompt
 18985 018c AFE0     	 b .L1062
 18986              	.L1081:
4577:../cleanflight/src/main/interface/cli.c ****         } else if (bufferIndex && (c == '\n' || c == '\r')) {
 18987              	 .loc 13 4577 0
 18988 018e 364B     	 ldr r3,.L1100+8
 18989 0190 1B68     	 ldr r3,[r3]
 18990 0192 002B     	 cmp r3,#0
 18991 0194 78D0     	 beq .L1082
 18992              	 .loc 13 4577 0 is_stmt 0 discriminator 1
 18993 0196 FB79     	 ldrb r3,[r7,#7]
 18994 0198 0A2B     	 cmp r3,#10
 18995 019a 02D0     	 beq .L1083
 18996              	 .loc 13 4577 0 discriminator 2
 18997 019c FB79     	 ldrb r3,[r7,#7]
 18998 019e 0D2B     	 cmp r3,#13
 18999 01a0 72D1     	 bne .L1082
 19000              	.L1083:
 19001              	.LBB143:
4578:../cleanflight/src/main/interface/cli.c ****             // enter pressed
4579:../cleanflight/src/main/interface/cli.c ****             cliPrintLinefeed();
 19002              	 .loc 13 4579 0 is_stmt 1
 19003 01a2 FFF7FEFF 	 bl cliPrintLinefeed
4580:../cleanflight/src/main/interface/cli.c **** 
4581:../cleanflight/src/main/interface/cli.c ****             // Strip comment starting with # from line
4582:../cleanflight/src/main/interface/cli.c ****             char *p = cliBuffer;
 19004              	 .loc 13 4582 0
 19005 01a6 324B     	 ldr r3,.L1100+16
 19006 01a8 3B60     	 str r3,[r7]
4583:../cleanflight/src/main/interface/cli.c ****             p = strchr(p, '#');
 19007              	 .loc 13 4583 0
 19008 01aa 3868     	 ldr r0,[r7]
 19009 01ac 2321     	 movs r1,#35
 19010 01ae FFF7FEFF 	 bl strchr
 19011 01b2 3860     	 str r0,[r7]
4584:../cleanflight/src/main/interface/cli.c ****             if (NULL != p) {
 19012              	 .loc 13 4584 0
 19013 01b4 3B68     	 ldr r3,[r7]
 19014 01b6 002B     	 cmp r3,#0
 19015 01b8 05D0     	 beq .L1084
4585:../cleanflight/src/main/interface/cli.c ****                 bufferIndex = (uint32_t)(p - cliBuffer);
 19016              	 .loc 13 4585 0
 19017 01ba 3B68     	 ldr r3,[r7]
 19018 01bc 2C4A     	 ldr r2,.L1100+16
 19019 01be 9B1A     	 subs r3,r3,r2
 19020 01c0 1A46     	 mov r2,r3
 19021 01c2 294B     	 ldr r3,.L1100+8
 19022 01c4 1A60     	 str r2,[r3]
 19023              	.L1084:
4586:../cleanflight/src/main/interface/cli.c ****             }
4587:../cleanflight/src/main/interface/cli.c **** 
4588:../cleanflight/src/main/interface/cli.c ****             // Strip trailing whitespace
4589:../cleanflight/src/main/interface/cli.c ****             while (bufferIndex > 0 && cliBuffer[bufferIndex - 1] == ' ') {
 19024              	 .loc 13 4589 0
 19025 01c6 04E0     	 b .L1085
 19026              	.L1087:
4590:../cleanflight/src/main/interface/cli.c ****                 bufferIndex--;
 19027              	 .loc 13 4590 0
 19028 01c8 274B     	 ldr r3,.L1100+8
 19029 01ca 1B68     	 ldr r3,[r3]
 19030 01cc 013B     	 subs r3,r3,#1
 19031 01ce 264A     	 ldr r2,.L1100+8
 19032 01d0 1360     	 str r3,[r2]
 19033              	.L1085:
4589:../cleanflight/src/main/interface/cli.c ****                 bufferIndex--;
 19034              	 .loc 13 4589 0
 19035 01d2 254B     	 ldr r3,.L1100+8
 19036 01d4 1B68     	 ldr r3,[r3]
 19037 01d6 002B     	 cmp r3,#0
 19038 01d8 06D0     	 beq .L1086
4589:../cleanflight/src/main/interface/cli.c ****                 bufferIndex--;
 19039              	 .loc 13 4589 0 is_stmt 0 discriminator 1
 19040 01da 234B     	 ldr r3,.L1100+8
 19041 01dc 1B68     	 ldr r3,[r3]
 19042 01de 013B     	 subs r3,r3,#1
 19043 01e0 234A     	 ldr r2,.L1100+16
 19044 01e2 D35C     	 ldrb r3,[r2,r3]
 19045 01e4 202B     	 cmp r3,#32
 19046 01e6 EFD0     	 beq .L1087
 19047              	.L1086:
4591:../cleanflight/src/main/interface/cli.c ****             }
4592:../cleanflight/src/main/interface/cli.c **** 
4593:../cleanflight/src/main/interface/cli.c ****             // Process non-empty lines
4594:../cleanflight/src/main/interface/cli.c ****             if (bufferIndex > 0) {
 19048              	 .loc 13 4594 0 is_stmt 1
 19049 01e8 1F4B     	 ldr r3,.L1100+8
 19050 01ea 1B68     	 ldr r3,[r3]
 19051 01ec 002B     	 cmp r3,#0
 19052 01ee 28D0     	 beq .L1088
 19053              	.LBB144:
4595:../cleanflight/src/main/interface/cli.c ****                 cliBuffer[bufferIndex] = 0; // null terminate
 19054              	 .loc 13 4595 0
 19055 01f0 1D4B     	 ldr r3,.L1100+8
 19056 01f2 1B68     	 ldr r3,[r3]
 19057 01f4 1E4A     	 ldr r2,.L1100+16
 19058 01f6 0021     	 movs r1,#0
 19059 01f8 D154     	 strb r1,[r2,r3]
4596:../cleanflight/src/main/interface/cli.c **** 
4597:../cleanflight/src/main/interface/cli.c ****                 const clicmd_t *cmd;
4598:../cleanflight/src/main/interface/cli.c ****                 char *options;
4599:../cleanflight/src/main/interface/cli.c ****                 for (cmd = cmdTable; cmd < cmdTable + ARRAYLEN(cmdTable); cmd++) {
 19060              	 .loc 13 4599 0
 19061 01fa 1C4B     	 ldr r3,.L1100+12
 19062 01fc FB60     	 str r3,[r7,#12]
 19063 01fe 0DE0     	 b .L1089
 19064              	.L1092:
4600:../cleanflight/src/main/interface/cli.c ****                     if ((options = checkCommand(cliBuffer, cmd->name))) {
 19065              	 .loc 13 4600 0
 19066 0200 FB68     	 ldr r3,[r7,#12]
 19067 0202 1B68     	 ldr r3,[r3]
 19068 0204 1A48     	 ldr r0,.L1100+16
 19069 0206 1946     	 mov r1,r3
 19070 0208 FFF7FEFF 	 bl checkCommand
 19071 020c B860     	 str r0,[r7,#8]
 19072 020e BB68     	 ldr r3,[r7,#8]
 19073 0210 002B     	 cmp r3,#0
 19074 0212 00D0     	 beq .L1090
4601:../cleanflight/src/main/interface/cli.c ****                         break;
 19075              	 .loc 13 4601 0
 19076 0214 06E0     	 b .L1091
 19077              	.L1090:
4599:../cleanflight/src/main/interface/cli.c ****                     if ((options = checkCommand(cliBuffer, cmd->name))) {
 19078              	 .loc 13 4599 0 discriminator 2
 19079 0216 FB68     	 ldr r3,[r7,#12]
 19080 0218 1033     	 adds r3,r3,#16
 19081 021a FB60     	 str r3,[r7,#12]
 19082              	.L1089:
4599:../cleanflight/src/main/interface/cli.c ****                     if ((options = checkCommand(cliBuffer, cmd->name))) {
 19083              	 .loc 13 4599 0 is_stmt 0 discriminator 1
 19084 021c FB68     	 ldr r3,[r7,#12]
 19085 021e 154A     	 ldr r2,.L1100+20
 19086 0220 9342     	 cmp r3,r2
 19087 0222 EDD3     	 bcc .L1092
 19088              	.L1091:
4602:../cleanflight/src/main/interface/cli.c ****                     }
4603:../cleanflight/src/main/interface/cli.c ****                 }
4604:../cleanflight/src/main/interface/cli.c ****                 if (cmd < cmdTable + ARRAYLEN(cmdTable))
 19089              	 .loc 13 4604 0 is_stmt 1
 19090 0224 FB68     	 ldr r3,[r7,#12]
 19091 0226 134A     	 ldr r2,.L1100+20
 19092 0228 9342     	 cmp r3,r2
 19093 022a 04D2     	 bcs .L1093
4605:../cleanflight/src/main/interface/cli.c ****                     cmd->func(options);
 19094              	 .loc 13 4605 0
 19095 022c FB68     	 ldr r3,[r7,#12]
 19096 022e DB68     	 ldr r3,[r3,#12]
 19097 0230 B868     	 ldr r0,[r7,#8]
 19098 0232 9847     	 blx r3
 19099 0234 02E0     	 b .L1094
 19100              	.L1093:
4606:../cleanflight/src/main/interface/cli.c ****                 else
4607:../cleanflight/src/main/interface/cli.c ****                     cliPrint("Unknown command, try 'help'");
 19101              	 .loc 13 4607 0
 19102 0236 1248     	 ldr r0,.L1100+32
 19103 0238 FFF7FEFF 	 bl cliPrint
 19104              	.L1094:
4608:../cleanflight/src/main/interface/cli.c ****                 bufferIndex = 0;
 19105              	 .loc 13 4608 0
 19106 023c 0A4B     	 ldr r3,.L1100+8
 19107 023e 0022     	 movs r2,#0
 19108 0240 1A60     	 str r2,[r3]
 19109              	.L1088:
 19110              	.LBE144:
4609:../cleanflight/src/main/interface/cli.c ****             }
4610:../cleanflight/src/main/interface/cli.c **** 
4611:../cleanflight/src/main/interface/cli.c ****             memset(cliBuffer, 0, sizeof(cliBuffer));
 19111              	 .loc 13 4611 0
 19112 0242 0B48     	 ldr r0,.L1100+16
 19113 0244 0021     	 movs r1,#0
 19114 0246 4FF48072 	 mov r2,#256
 19115 024a FFF7FEFF 	 bl memset
4612:../cleanflight/src/main/interface/cli.c **** 
4613:../cleanflight/src/main/interface/cli.c ****             // 'exit' will reset this flag, so we don't need to print prompt again
4614:../cleanflight/src/main/interface/cli.c ****             if (!cliMode)
 19116              	 .loc 13 4614 0
 19117 024e 0D4B     	 ldr r3,.L1100+36
 19118 0250 1B78     	 ldrb r3,[r3]
 19119 0252 002B     	 cmp r3,#0
 19120 0254 00D1     	 bne .L1095
4615:../cleanflight/src/main/interface/cli.c ****                 return;
 19121              	 .loc 13 4615 0 discriminator 2
 19122 0256 53E0     	 b .L1059
 19123              	.L1095:
4616:../cleanflight/src/main/interface/cli.c **** 
4617:../cleanflight/src/main/interface/cli.c ****             cliPrompt();
 19124              	 .loc 13 4617 0
 19125 0258 FFF7FEFF 	 bl cliPrompt
 19126              	.LBE143:
4577:../cleanflight/src/main/interface/cli.c ****             // enter pressed
 19127              	 .loc 13 4577 0
 19128 025c 47E0     	 b .L1062
 19129              	.L1101:
 19130 025e 00BF     	 .align 2
 19131              	.L1100:
 19132 0260 00000000 	 .word cliWriter
 19133 0264 00000000 	 .word cliPort
 19134 0268 00000000 	 .word bufferIndex
 19135 026c 00000000 	 .word cmdTable
 19136 0270 00000000 	 .word cliBuffer
 19137 0274 80020000 	 .word cmdTable+640
 19138 0278 D4150000 	 .word .LC331
 19139 027c DC150000 	 .word .LC332
 19140 0280 E8150000 	 .word .LC333
 19141 0284 00000000 	 .word cliMode
 19142              	.L1082:
4618:../cleanflight/src/main/interface/cli.c ****         } else if (c == 127) {
 19143              	 .loc 13 4618 0
 19144 0288 FB79     	 ldrb r3,[r7,#7]
 19145 028a 7F2B     	 cmp r3,#127
 19146 028c 11D1     	 bne .L1096
4619:../cleanflight/src/main/interface/cli.c ****             // backspace
4620:../cleanflight/src/main/interface/cli.c ****             if (bufferIndex) {
 19147              	 .loc 13 4620 0
 19148 028e 1E4B     	 ldr r3,.L1102
 19149 0290 1B68     	 ldr r3,[r3]
 19150 0292 002B     	 cmp r3,#0
 19151 0294 2BD0     	 beq .L1062
4621:../cleanflight/src/main/interface/cli.c ****                 cliBuffer[--bufferIndex] = 0;
 19152              	 .loc 13 4621 0
 19153 0296 1C4B     	 ldr r3,.L1102
 19154 0298 1B68     	 ldr r3,[r3]
 19155 029a 013B     	 subs r3,r3,#1
 19156 029c 1A4A     	 ldr r2,.L1102
 19157 029e 1360     	 str r3,[r2]
 19158 02a0 194B     	 ldr r3,.L1102
 19159 02a2 1B68     	 ldr r3,[r3]
 19160 02a4 194A     	 ldr r2,.L1102+4
 19161 02a6 0021     	 movs r1,#0
 19162 02a8 D154     	 strb r1,[r2,r3]
4622:../cleanflight/src/main/interface/cli.c ****                 cliPrint("\010 \010");
 19163              	 .loc 13 4622 0
 19164 02aa 1948     	 ldr r0,.L1102+8
 19165 02ac FFF7FEFF 	 bl cliPrint
 19166 02b0 1DE0     	 b .L1062
 19167              	.L1096:
4623:../cleanflight/src/main/interface/cli.c ****             }
4624:../cleanflight/src/main/interface/cli.c ****         } else if (bufferIndex < sizeof(cliBuffer) && c >= 32 && c <= 126) {
 19168              	 .loc 13 4624 0
 19169 02b2 154B     	 ldr r3,.L1102
 19170 02b4 1B68     	 ldr r3,[r3]
 19171 02b6 FF2B     	 cmp r3,#255
 19172 02b8 19D8     	 bhi .L1062
 19173              	 .loc 13 4624 0 is_stmt 0 discriminator 1
 19174 02ba FB79     	 ldrb r3,[r7,#7]
 19175 02bc 1F2B     	 cmp r3,#31
 19176 02be 16D9     	 bls .L1062
 19177              	 .loc 13 4624 0 discriminator 2
 19178 02c0 FB79     	 ldrb r3,[r7,#7]
 19179 02c2 7E2B     	 cmp r3,#126
 19180 02c4 13D8     	 bhi .L1062
4625:../cleanflight/src/main/interface/cli.c ****             if (!bufferIndex && c == ' ')
 19181              	 .loc 13 4625 0 is_stmt 1
 19182 02c6 104B     	 ldr r3,.L1102
 19183 02c8 1B68     	 ldr r3,[r3]
 19184 02ca 002B     	 cmp r3,#0
 19185 02cc 03D1     	 bne .L1098
 19186              	 .loc 13 4625 0 is_stmt 0 discriminator 1
 19187 02ce FB79     	 ldrb r3,[r7,#7]
 19188 02d0 202B     	 cmp r3,#32
 19189 02d2 00D1     	 bne .L1098
4626:../cleanflight/src/main/interface/cli.c ****                 continue; // Ignore leading spaces
 19190              	 .loc 13 4626 0 is_stmt 1
 19191 02d4 0BE0     	 b .L1062
 19192              	.L1098:
4627:../cleanflight/src/main/interface/cli.c ****             cliBuffer[bufferIndex++] = c;
 19193              	 .loc 13 4627 0
 19194 02d6 0C4B     	 ldr r3,.L1102
 19195 02d8 1B68     	 ldr r3,[r3]
 19196 02da 5A1C     	 adds r2,r3,#1
 19197 02dc 0A49     	 ldr r1,.L1102
 19198 02de 0A60     	 str r2,[r1]
 19199 02e0 0A49     	 ldr r1,.L1102+4
 19200 02e2 FA79     	 ldrb r2,[r7,#7]
 19201 02e4 CA54     	 strb r2,[r1,r3]
4628:../cleanflight/src/main/interface/cli.c ****             cliWrite(c);
 19202              	 .loc 13 4628 0
 19203 02e6 FB79     	 ldrb r3,[r7,#7]
 19204 02e8 1846     	 mov r0,r3
 19205 02ea FFF7FEFF 	 bl cliWrite
 19206              	.L1062:
 19207              	.LBE141:
4532:../cleanflight/src/main/interface/cli.c ****         uint8_t c = serialRead(cliPort);
 19208              	 .loc 13 4532 0
 19209 02ee 094B     	 ldr r3,.L1102+12
 19210 02f0 1B68     	 ldr r3,[r3]
 19211 02f2 1846     	 mov r0,r3
 19212 02f4 FFF7FEFF 	 bl serialRxBytesWaiting
 19213 02f8 0346     	 mov r3,r0
 19214 02fa 002B     	 cmp r3,#0
 19215 02fc 7FF48EAE 	 bne .L1099
 19216              	.L1059:
4629:../cleanflight/src/main/interface/cli.c ****         }
4630:../cleanflight/src/main/interface/cli.c ****     }
4631:../cleanflight/src/main/interface/cli.c **** }
 19217              	 .loc 13 4631 0
 19218 0300 2037     	 adds r7,r7,#32
 19219              	.LCFI683:
 19220              	 .cfi_def_cfa_offset 8
 19221 0302 BD46     	 mov sp,r7
 19222              	.LCFI684:
 19223              	 .cfi_def_cfa_register 13
 19224              	 
 19225 0304 80BD     	 pop {r7,pc}
 19226              	.L1103:
 19227 0306 00BF     	 .align 2
 19228              	.L1102:
 19229 0308 00000000 	 .word bufferIndex
 19230 030c 00000000 	 .word cliBuffer
 19231 0310 04160000 	 .word .LC334
 19232 0314 00000000 	 .word cliPort
 19233              	 .cfi_endproc
 19234              	.LFE795:
 19236              	 .section .rodata
 19237              	 .align 2
 19238              	.LC335:
 19239 1608 0D0A456E 	 .ascii "\015\012Entering CLI Mode, type 'exit' to return, o"
 19239      74657269 
 19239      6E672043 
 19239      4C49204D 
 19239      6F64652C 
 19240 1635 72202768 	 .ascii "r 'help'\000"
 19240      656C7027 
 19240      00
 19241 163e 0000     	 .section .text.cliEnter,"ax",%progbits
 19242              	 .align 2
 19243              	 .global cliEnter
 19244              	 .thumb
 19245              	 .thumb_func
 19247              	cliEnter:
 19248              	.LFB796:
4632:../cleanflight/src/main/interface/cli.c **** 
4633:../cleanflight/src/main/interface/cli.c **** void cliEnter(serialPort_t *serialPort)
4634:../cleanflight/src/main/interface/cli.c **** {
 19249              	 .loc 13 4634 0
 19250              	 .cfi_startproc
 19251              	 
 19252              	 
 19253 0000 80B5     	 push {r7,lr}
 19254              	.LCFI685:
 19255              	 .cfi_def_cfa_offset 8
 19256              	 .cfi_offset 7,-8
 19257              	 .cfi_offset 14,-4
 19258 0002 82B0     	 sub sp,sp,#8
 19259              	.LCFI686:
 19260              	 .cfi_def_cfa_offset 16
 19261 0004 00AF     	 add r7,sp,#0
 19262              	.LCFI687:
 19263              	 .cfi_def_cfa_register 7
 19264 0006 7860     	 str r0,[r7,#4]
4635:../cleanflight/src/main/interface/cli.c ****     cliMode = 1;
 19265              	 .loc 13 4635 0
 19266 0008 154B     	 ldr r3,.L1105
 19267 000a 0122     	 movs r2,#1
 19268 000c 1A70     	 strb r2,[r3]
4636:../cleanflight/src/main/interface/cli.c ****     cliPort = serialPort;
 19269              	 .loc 13 4636 0
 19270 000e 154A     	 ldr r2,.L1105+4
 19271 0010 7B68     	 ldr r3,[r7,#4]
 19272 0012 1360     	 str r3,[r2]
4637:../cleanflight/src/main/interface/cli.c ****     setPrintfSerialPort(cliPort);
 19273              	 .loc 13 4637 0
 19274 0014 134B     	 ldr r3,.L1105+4
 19275 0016 1B68     	 ldr r3,[r3]
 19276 0018 1846     	 mov r0,r3
 19277 001a FFF7FEFF 	 bl setPrintfSerialPort
4638:../cleanflight/src/main/interface/cli.c ****     cliWriter = bufWriterInit(cliWriteBuffer, sizeof(cliWriteBuffer), (bufWrite_t)serialWriteBufShi
 19278              	 .loc 13 4638 0
 19279 001e 1248     	 ldr r0,.L1105+8
 19280 0020 4A21     	 movs r1,#74
 19281 0022 124A     	 ldr r2,.L1105+12
 19282 0024 7B68     	 ldr r3,[r7,#4]
 19283 0026 FFF7FEFF 	 bl bufWriterInit
 19284 002a 0246     	 mov r2,r0
 19285 002c 104B     	 ldr r3,.L1105+16
 19286 002e 1A60     	 str r2,[r3]
4639:../cleanflight/src/main/interface/cli.c **** 
4640:../cleanflight/src/main/interface/cli.c ****     schedulerSetCalulateTaskStatistics(systemConfig()->task_statistics);
 19287              	 .loc 13 4640 0
 19288 0030 FFF7FEFF 	 bl systemConfig
 19289 0034 0346     	 mov r3,r0
 19290 0036 DB78     	 ldrb r3,[r3,#3]
 19291 0038 002B     	 cmp r3,#0
 19292 003a 14BF     	 ite ne
 19293 003c 0123     	 movne r3,#1
 19294 003e 0023     	 moveq r3,#0
 19295 0040 DBB2     	 uxtb r3,r3
 19296 0042 1846     	 mov r0,r3
 19297 0044 FFF7FEFF 	 bl schedulerSetCalulateTaskStatistics
4641:../cleanflight/src/main/interface/cli.c **** 
4642:../cleanflight/src/main/interface/cli.c **** #ifndef MINIMAL_CLI
4643:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("\r\nEntering CLI Mode, type 'exit' to return, or 'help'");
 19298              	 .loc 13 4643 0
 19299 0048 0A48     	 ldr r0,.L1105+20
 19300 004a FFF7FEFF 	 bl cliPrintLine
4644:../cleanflight/src/main/interface/cli.c **** #else
4645:../cleanflight/src/main/interface/cli.c ****     cliPrintLine("\r\nCLI");
4646:../cleanflight/src/main/interface/cli.c **** #endif
4647:../cleanflight/src/main/interface/cli.c ****     cliPrompt();
 19301              	 .loc 13 4647 0
 19302 004e FFF7FEFF 	 bl cliPrompt
4648:../cleanflight/src/main/interface/cli.c **** 
4649:../cleanflight/src/main/interface/cli.c ****     setArmingDisabled(ARMING_DISABLED_CLI);
 19303              	 .loc 13 4649 0
 19304 0052 4FF48050 	 mov r0,#4096
 19305 0056 FFF7FEFF 	 bl setArmingDisabled
4650:../cleanflight/src/main/interface/cli.c **** }
 19306              	 .loc 13 4650 0
 19307 005a 0837     	 adds r7,r7,#8
 19308              	.LCFI688:
 19309              	 .cfi_def_cfa_offset 8
 19310 005c BD46     	 mov sp,r7
 19311              	.LCFI689:
 19312              	 .cfi_def_cfa_register 13
 19313              	 
 19314 005e 80BD     	 pop {r7,pc}
 19315              	.L1106:
 19316              	 .align 2
 19317              	.L1105:
 19318 0060 00000000 	 .word cliMode
 19319 0064 00000000 	 .word cliPort
 19320 0068 00000000 	 .word cliWriteBuffer
 19321 006c 00000000 	 .word serialWriteBufShim
 19322 0070 00000000 	 .word cliWriter
 19323 0074 08160000 	 .word .LC335
 19324              	 .cfi_endproc
 19325              	.LFE796:
 19327              	 .section .text.cliInit,"ax",%progbits
 19328              	 .align 2
 19329              	 .global cliInit
 19330              	 .thumb
 19331              	 .thumb_func
 19333              	cliInit:
 19334              	.LFB797:
4651:../cleanflight/src/main/interface/cli.c **** 
4652:../cleanflight/src/main/interface/cli.c **** void cliInit(const serialConfig_t *serialConfig)
4653:../cleanflight/src/main/interface/cli.c **** {
 19335              	 .loc 13 4653 0
 19336              	 .cfi_startproc
 19337              	 
 19338              	 
 19339              	 
 19340 0000 80B4     	 push {r7}
 19341              	.LCFI690:
 19342              	 .cfi_def_cfa_offset 4
 19343              	 .cfi_offset 7,-4
 19344 0002 83B0     	 sub sp,sp,#12
 19345              	.LCFI691:
 19346              	 .cfi_def_cfa_offset 16
 19347 0004 00AF     	 add r7,sp,#0
 19348              	.LCFI692:
 19349              	 .cfi_def_cfa_register 7
 19350 0006 7860     	 str r0,[r7,#4]
4654:../cleanflight/src/main/interface/cli.c ****     UNUSED(serialConfig);
4655:../cleanflight/src/main/interface/cli.c **** }
 19351              	 .loc 13 4655 0
 19352 0008 0C37     	 adds r7,r7,#12
 19353              	.LCFI693:
 19354              	 .cfi_def_cfa_offset 4
 19355 000a BD46     	 mov sp,r7
 19356              	.LCFI694:
 19357              	 .cfi_def_cfa_register 13
 19358              	 
 19359 000c 5DF8047B 	 ldr r7,[sp],#4
 19360              	.LCFI695:
 19361              	 .cfi_restore 7
 19362              	 .cfi_def_cfa_offset 0
 19363 0010 7047     	 bx lr
 19364              	 .cfi_endproc
 19365              	.LFE797:
 19367 0012 00BF     	 .section .data.lastSoundIdx.19000,"aw",%progbits
 19368              	 .align 2
 19371              	lastSoundIdx.19000:
 19372 0000 FFFFFFFF 	 .word -1
 19373              	 .text
 19374              	.Letext0:
 19375              	 .file 14 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 19376              	 .file 15 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 19377              	 .file 16 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stdarg.h"
 19378              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/xmc4700.h"
 19379              	 .file 18 "<built-in>"
 19380              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc4_gpio.h"
 19381              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 19382              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/platform.h"
 19383              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 19384              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 19385              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox/blackbox.h"
 19386              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/display.h"
 19387              	 .file 26 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 19388              	 .file 27 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/color.h"
 19389              	 .file 28 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 19390              	 .file 29 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus_i2c.h"
 19391              	 .file 30 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus.h"
 19392              	 .file 31 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sensor.h"
 19393              	 .file 32 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro.h"
 19394              	 .file 33 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro_mpu.h"
 19395              	 .file 34 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/gyro.h"
 19396              	 .file 35 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/buf_writer.h"
 19397              	 .file 36 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/camera_control.h"
 19398              	 .file 37 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 19399              	 .file 38 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/dma.h"
 19400              	 .file 39 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/flash.h"
 19401              	 .file 40 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 19402              	 .file 41 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_impl.h"
 19403              	 .file 42 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/light_led.h"
 19404              	 .file 43 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
 19405              	 .file 44 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
 19406              	 .file 45 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
 19407              	 .file 46 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/rangefinder/rangefinder_hcsr04.h"
 19408              	 .file 47 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/sdcard.h"
 19409              	 .file 48 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sdcard.h"
 19410              	 .file 49 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial_escserial.h"
 19411              	 .file 50 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/transponder_ir.h"
 19412              	 .file 51 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/controlrate_profile.h"
 19413              	 .file 52 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_core.h"
 19414              	 .file 53 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
 19415              	 .file 54 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 19416              	 .file 55 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
 19417              	 .file 56 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
 19418              	 .file 57 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
 19419              	 .file 58 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/interface/msp_box.h"
 19420              	 .file 59 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/interface/settings.h"
 19421              	 .file 60 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/asyncfatfs/asyncfatfs.h"
 19422              	 .file 61 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gimbal.h"
 19423              	 .file 62 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
 19424              	 .file 63 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/ledstrip.h"
 19425              	 .file 64 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/osd.h"
 19426              	 .file 65 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/transponder_ir.h"
 19427              	 .file 66 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx.h"
 19428              	 .file 67 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/adc.h"
 19429              	 .file 68 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/beeper.h"
 19430              	 .file 69 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/beeper_dev.h"
 19431              	 .file 70 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/board.h"
 19432              	 .file 71 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/bus_i2c.h"
 19433              	 .file 72 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/bus_spi.h"
 19434              	 .file 73 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/max7456.h"
 19435              	 .file 74 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pinio.h"
 19436              	 .file 75 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx_spi.h"
 19437              	 .file 76 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/rx/rx_pwm.h"
 19438              	 .file 77 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx_pwm.h"
 19439              	 .file 78 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/usb.h"
 19440              	 .file 79 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/cc2500_frsky_common.h"
 19441              	 .file 80 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/scheduler/scheduler.h"
 19442              	 .file 81 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/sensors.h"
 19443              	 .file 82 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/acceleration.h"
 19444              	 .file 83 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/barometer.h"
 19445              	 .file 84 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/boardalignment.h"
 19446              	 .file 85 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/compass.h"
 19447              	 .file 86 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/esc_sensor.h"
 19448              	 .file 87 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/telemetry/telemetry.h"
 19449              	 .file 88 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 19450              	 .file 89 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
 19451              	 .file 90 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/version.h"
 19452              	 .file 91 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/cms/cms.h"
 19453              	 .file 92 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_rc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 cli.c
    {standard input}:23     .bss.cliMode:00000000 cliMode
    {standard input}:24     .bss.cliMode:00000000 $d
                            *COM*:00000004 pCurrentDisplay
    {standard input}:27     .text.constrain:00000000 $t
    {standard input}:31     .text.constrain:00000000 constrain
    {standard input}:91     .text.featureConfig:00000000 $t
    {standard input}:95     .text.featureConfig:00000000 featureConfig
    {standard input}:125    .text.featureConfig:00000010 $d
    {standard input}:130    .text.pilotConfig:00000000 $t
    {standard input}:134    .text.pilotConfig:00000000 pilotConfig
    {standard input}:164    .text.pilotConfig:00000010 $d
    {standard input}:169    .text.pilotConfigMutable:00000000 $t
    {standard input}:173    .text.pilotConfigMutable:00000000 pilotConfigMutable
    {standard input}:202    .text.pilotConfigMutable:00000010 $d
    {standard input}:207    .text.systemConfig:00000000 $t
    {standard input}:211    .text.systemConfig:00000000 systemConfig
    {standard input}:240    .text.systemConfig:00000010 $d
    {standard input}:245    .text.modeActivationConditions:00000000 $t
    {standard input}:249    .text.modeActivationConditions:00000000 modeActivationConditions
    {standard input}:292    .text.modeActivationConditions:00000024 $d
    {standard input}:297    .text.modeActivationConditionsMutable:00000000 $t
    {standard input}:301    .text.modeActivationConditionsMutable:00000000 modeActivationConditionsMutable
    {standard input}:343    .text.modeActivationConditionsMutable:00000024 $d
    {standard input}:348    .text.adjustmentRanges:00000000 $t
    {standard input}:352    .text.adjustmentRanges:00000000 adjustmentRanges
    {standard input}:395    .text.adjustmentRanges:00000024 $d
    {standard input}:400    .text.adjustmentRangesMutable:00000000 $t
    {standard input}:404    .text.adjustmentRangesMutable:00000000 adjustmentRangesMutable
    {standard input}:446    .text.adjustmentRangesMutable:00000024 $d
    {standard input}:451    .text.customMotorMixer:00000000 $t
    {standard input}:455    .text.customMotorMixer:00000000 customMotorMixer
    {standard input}:495    .text.customMotorMixer:0000001c $d
    {standard input}:500    .text.customMotorMixerMutable:00000000 $t
    {standard input}:504    .text.customMotorMixerMutable:00000000 customMotorMixerMutable
    {standard input}:543    .text.customMotorMixerMutable:0000001c $d
    {standard input}:548    .text.mixerConfig:00000000 $t
    {standard input}:552    .text.mixerConfig:00000000 mixerConfig
    {standard input}:581    .text.mixerConfig:00000010 $d
    {standard input}:586    .text.mixerConfigMutable:00000000 $t
    {standard input}:590    .text.mixerConfigMutable:00000000 mixerConfigMutable
    {standard input}:619    .text.mixerConfigMutable:00000010 $d
    {standard input}:624    .text.pidConfig:00000000 $t
    {standard input}:628    .text.pidConfig:00000000 pidConfig
    {standard input}:658    .text.pidConfig:00000010 $d
                            *COM*:00000001 inputSource_e
    {standard input}:664    .text.customServoMixers:00000000 $t
    {standard input}:668    .text.customServoMixers:00000000 customServoMixers
    {standard input}:710    .text.customServoMixers:00000020 $d
    {standard input}:715    .text.customServoMixersMutable:00000000 $t
    {standard input}:719    .text.customServoMixersMutable:00000000 customServoMixersMutable
    {standard input}:760    .text.customServoMixersMutable:00000020 $d
    {standard input}:765    .text.customServoMixers_array:00000000 $t
    {standard input}:769    .text.customServoMixers_array:00000000 customServoMixers_array
    {standard input}:798    .text.customServoMixers_array:00000010 $d
    {standard input}:803    .text.servoParams:00000000 $t
    {standard input}:807    .text.servoParams:00000000 servoParams
    {standard input}:849    .text.servoParams:00000024 $d
    {standard input}:854    .text.servoParamsMutable:00000000 $t
    {standard input}:858    .text.servoParamsMutable:00000000 servoParamsMutable
    {standard input}:900    .text.servoParamsMutable:00000024 $d
                            *COM*:00000004 colors
                            *COM*:00000004 modeColors
                            *COM*:0000000b specialColors
    {standard input}:908    .text.serialConfig:00000000 $t
    {standard input}:912    .text.serialConfig:00000000 serialConfig
    {standard input}:942    .text.serialConfig:00000010 $d
    {standard input}:947    .text.vtxConfig:00000000 $t
    {standard input}:951    .text.vtxConfig:00000000 vtxConfig
    {standard input}:981    .text.vtxConfig:00000010 $d
    {standard input}:986    .text.vtxConfigMutable:00000000 $t
    {standard input}:990    .text.vtxConfigMutable:00000000 vtxConfigMutable
    {standard input}:1019   .text.vtxConfigMutable:00000010 $d
    {standard input}:1024   .text.rxConfig:00000000 $t
    {standard input}:1028   .text.rxConfig:00000000 rxConfig
    {standard input}:1058   .text.rxConfig:00000010 $d
    {standard input}:1063   .text.rxConfigMutable:00000000 $t
    {standard input}:1067   .text.rxConfigMutable:00000000 rxConfigMutable
    {standard input}:1096   .text.rxConfigMutable:00000010 $d
    {standard input}:1101   .text.rxFailsafeChannelConfigs:00000000 $t
    {standard input}:1105   .text.rxFailsafeChannelConfigs:00000000 rxFailsafeChannelConfigs
    {standard input}:1145   .text.rxFailsafeChannelConfigs:0000001c $d
    {standard input}:1150   .text.rxFailsafeChannelConfigsMutable:00000000 $t
    {standard input}:1154   .text.rxFailsafeChannelConfigsMutable:00000000 rxFailsafeChannelConfigsMutable
    {standard input}:1193   .text.rxFailsafeChannelConfigsMutable:0000001c $d
    {standard input}:1198   .text.rxChannelRangeConfigs:00000000 $t
    {standard input}:1202   .text.rxChannelRangeConfigs:00000000 rxChannelRangeConfigs
    {standard input}:1241   .text.rxChannelRangeConfigs:0000001c $d
    {standard input}:1246   .text.rxChannelRangeConfigsMutable:00000000 $t
    {standard input}:1250   .text.rxChannelRangeConfigsMutable:00000000 rxChannelRangeConfigsMutable
    {standard input}:1289   .text.rxChannelRangeConfigsMutable:0000001c $d
    {standard input}:1294   .bss.cliPort:00000000 $d
    {standard input}:1297   .bss.cliPort:00000000 cliPort
    {standard input}:1300   .bss.cliWriter:00000000 $d
    {standard input}:1303   .bss.cliWriter:00000000 cliWriter
    {standard input}:1306   .bss.cliWriteBuffer:00000000 $d
    {standard input}:1309   .bss.cliWriteBuffer:00000000 cliWriteBuffer
    {standard input}:1312   .bss.cliBuffer:00000000 $d
    {standard input}:1315   .bss.cliBuffer:00000000 cliBuffer
    {standard input}:1318   .bss.bufferIndex:00000000 $d
    {standard input}:1321   .bss.bufferIndex:00000000 bufferIndex
    {standard input}:1326   .bss.configIsInCopy:00000000 configIsInCopy
    {standard input}:1327   .bss.configIsInCopy:00000000 $d
    {standard input}:1331   .data.pidProfileIndexToUse:00000000 pidProfileIndexToUse
    {standard input}:1336   .data.rateProfileIndexToUse:00000000 rateProfileIndexToUse
    {standard input}:1341   .bss.boardInformationUpdated:00000000 boardInformationUpdated
    {standard input}:1342   .bss.boardInformationUpdated:00000000 $d
    {standard input}:1346   .bss.signatureUpdated:00000000 signatureUpdated
    {standard input}:1347   .bss.signatureUpdated:00000000 $d
    {standard input}:1349   .rodata:00000000 $d
    {standard input}:1353   .rodata.emptyName:00000000 $d
    {standard input}:1356   .rodata.emptyName:00000000 emptyName
    {standard input}:1363   .rodata.emptyString:00000000 $d
    {standard input}:1366   .rodata.emptyString:00000000 emptyString
    {standard input}:1448   .rodata.mixerNames:00000000 $d
    {standard input}:1451   .rodata.mixerNames:00000000 mixerNames
    {standard input}:1553   .rodata.featureNames:00000000 $d
    {standard input}:1556   .rodata.featureNames:00000000 featureNames
    {standard input}:1589   .rodata.rxFailsafeModeCharacters:00000000 $d
    {standard input}:1592   .rodata.rxFailsafeModeCharacters:00000000 rxFailsafeModeCharacters
    {standard input}:1595   .rodata.rxFailsafeModesTable:00000000 $d
    {standard input}:1598   .rodata.rxFailsafeModesTable:00000000 rxFailsafeModesTable
    {standard input}:1622   .rodata.sensorTypeNames:00000000 $d
    {standard input}:1625   .rodata.sensorTypeNames:00000000 sensorTypeNames
    {standard input}:1635   .data.sensorHardwareNames:00000000 $d
    {standard input}:1638   .data.sensorHardwareNames:00000000 sensorHardwareNames
    {standard input}:1645   .text.backupPgConfig:00000000 $t
    {standard input}:1649   .text.backupPgConfig:00000000 backupPgConfig
    {standard input}:1693   .text.restorePgConfig:00000000 $t
    {standard input}:1697   .text.restorePgConfig:00000000 restorePgConfig
    {standard input}:1740   .text.backupConfigs:00000000 $t
    {standard input}:1744   .text.backupConfigs:00000000 backupConfigs
    {standard input}:1797   .text.backupConfigs:0000002c $d
    {standard input}:1804   .text.restoreConfigs:00000000 $t
    {standard input}:1808   .text.restoreConfigs:00000000 restoreConfigs
    {standard input}:1861   .text.restoreConfigs:0000002c $d
    {standard input}:1868   .text.backupAndResetConfigs:00000000 $t
    {standard input}:1872   .text.backupAndResetConfigs:00000000 backupAndResetConfigs
    {standard input}:1896   .text.cliPrint:00000000 $t
    {standard input}:1900   .text.cliPrint:00000000 cliPrint
    {standard input}:1954   .text.cliPrint:00000038 $d
    {standard input}:1963   .text.cliPrintLinefeed:00000000 $t
    {standard input}:1967   .text.cliPrintLinefeed:00000000 cliPrintLinefeed
    {standard input}:1989   .text.cliPrintLinefeed:0000000c $d
    {standard input}:1994   .text.cliPrintLine:00000000 $t
    {standard input}:1998   .text.cliPrintLine:00000000 cliPrintLine
    {standard input}:2038   .text.cliPrintHashLine:00000000 $t
    {standard input}:2042   .text.cliPrintHashLine:00000000 cliPrintHashLine
    {standard input}:2078   .text.cliPrintHashLine:0000001c $d
    {standard input}:2083   .text.cliPutp:00000000 $t
    {standard input}:2087   .text.cliPutp:00000000 cliPutp
    {standard input}:2125   .text.cliPrintfva:00000000 $t
    {standard input}:2129   .text.cliPrintfva:00000000 cliPrintfva
    {standard input}:2173   .text.cliPrintfva:0000002c $d
    {standard input}:2179   .text.cliDumpPrintLinef:00000000 $t
    {standard input}:2183   .text.cliDumpPrintLinef:00000000 cliDumpPrintLinef
    {standard input}:2264   .text.cliWrite:00000000 $t
    {standard input}:2268   .text.cliWrite:00000000 cliWrite
    {standard input}:2306   .text.cliWrite:00000020 $d
    {standard input}:2311   .text.cliDefaultPrintLinef:00000000 $t
    {standard input}:2315   .text.cliDefaultPrintLinef:00000000 cliDefaultPrintLinef
    {standard input}:2398   .text.cliPrintf:00000000 $t
    {standard input}:2402   .text.cliPrintf:00000000 cliPrintf
    {standard input}:2458   .text.cliPrintLinef:00000000 $t
    {standard input}:2462   .text.cliPrintLinef:00000000 cliPrintLinef
    {standard input}:2524   .text.cliPrintErrorLinef:00000000 $t
    {standard input}:2528   .text.cliPrintErrorLinef:00000000 cliPrintErrorLinef
    {standard input}:2588   .text.cliPrintErrorLinef:0000002c $d
    {standard input}:2609   .text.printValuePointer:00000000 $t
    {standard input}:2613   .text.printValuePointer:00000000 printValuePointer
    {standard input}:2744   .text.printValuePointer:000000c0 $d
    {standard input}:2749   .text.printValuePointer:000000d4 $t
    {standard input}:2867   .text.printValuePointer:00000184 $d
    {standard input}:2877   .text.valuePtrEqualsDefault:00000000 $t
    {standard input}:2881   .text.valuePtrEqualsDefault:00000000 valuePtrEqualsDefault
    {standard input}:2951   .text.valuePtrEqualsDefault:00000060 $d
    {standard input}:2956   .text.valuePtrEqualsDefault:00000074 $t
    {standard input}:3161   .text.getPidProfileIndexToUse:00000000 $t
    {standard input}:3165   .text.getPidProfileIndexToUse:00000000 getPidProfileIndexToUse
    {standard input}:3201   .text.getPidProfileIndexToUse:00000024 $d
    {standard input}:3206   .text.getRateProfileIndexToUse:00000000 $t
    {standard input}:3210   .text.getRateProfileIndexToUse:00000000 getRateProfileIndexToUse
    {standard input}:3246   .text.getRateProfileIndexToUse:00000024 $d
    {standard input}:3251   .text.getValueOffset:00000000 $t
    {standard input}:3255   .text.getValueOffset:00000000 getValueOffset
    {standard input}:3340   .text.cliGetValuePointer:00000000 $t
    {standard input}:3345   .text.cliGetValuePointer:00000000 cliGetValuePointer
    {standard input}:3406   .text.cliGetValuePointer:00000048 $d
    {standard input}:3411   .text.cliGetDefaultPointer:00000000 $t
    {standard input}:3416   .text.cliGetDefaultPointer:00000000 cliGetDefaultPointer
    {standard input}:3470   .text.dumpPgValue:00000000 $t
    {standard input}:3474   .text.dumpPgValue:00000000 dumpPgValue
    {standard input}:3597   .text.dumpPgValue:000000c0 $d
    {standard input}:3603   .text.dumpAllValues:00000000 $t
    {standard input}:3607   .text.dumpAllValues:00000000 dumpAllValues
    {standard input}:3690   .text.dumpAllValues:00000064 $d
    {standard input}:3697   .text.cliPrintVar:00000000 $t
    {standard input}:3701   .text.cliPrintVar:00000000 cliPrintVar
    {standard input}:3763   .text.cliPrintVarRange:00000000 $t
    {standard input}:3767   .text.cliPrintVarRange:00000000 cliPrintVarRange
    {standard input}:3921   .text.cliPrintVarRange:000000d8 $d
    {standard input}:3932   .text.cliSetVar:00000000 $t
    {standard input}:3936   .text.cliSetVar:00000000 cliSetVar
    {standard input}:4100   .text.cliSetVar:000000f8 $d
    {standard input}:4104   .text.cliSetVar:00000108 $t
    {standard input}:4142   .text.cliRepeat:00000000 $t
    {standard input}:4146   .text.cliRepeat:00000000 cliRepeat
    {standard input}:4206   .text.cliRepeat:0000003c $d
    {standard input}:4211   .text.cliPrompt:00000000 $t
    {standard input}:4215   .text.cliPrompt:00000000 cliPrompt
    {standard input}:4237   .text.cliPrompt:0000000c $d
    {standard input}:4246   .text.cliShowParseError:00000000 $t
    {standard input}:4250   .text.cliShowParseError:00000000 cliShowParseError
    {standard input}:4272   .text.cliShowParseError:0000000c $d
    {standard input}:4281   .text.cliShowArgumentRangeError:00000000 $t
    {standard input}:4285   .text.cliShowArgumentRangeError:00000000 cliShowArgumentRangeError
    {standard input}:4323   .text.cliShowArgumentRangeError:00000020 $d
    {standard input}:4328   .text.nextArg:00000000 $t
    {standard input}:4332   .text.nextArg:00000000 nextArg
    {standard input}:4389   .text.processChannelRangeArgs:00000000 $t
    {standard input}:4393   .text.processChannelRangeArgs:00000000 processChannelRangeArgs
    {standard input}:4504   .text.processChannelRangeArgs:00000090 $d
    {standard input}:4509   .text.isEmpty:00000000 $t
    {standard input}:4513   .text.isEmpty:00000000 isEmpty
    {standard input}:4576   .text.printRxFailsafe:00000000 $t
    {standard input}:4580   .text.printRxFailsafe:00000000 printRxFailsafe
    {standard input}:4767   .text.printRxFailsafe:00000114 $d
    {standard input}:4781   .text.cliRxFailsafe:00000000 $t
    {standard input}:4785   .text.cliRxFailsafe:00000000 cliRxFailsafe
    {standard input}:5071   .text.cliRxFailsafe:000001e0 $d
    {standard input}:5086   .text.printAux:00000000 $t
    {standard input}:5090   .text.printAux:00000000 printAux
    {standard input}:5343   .text.printAux:0000017c $d
    {standard input}:5352   .text.cliAux:00000000 $t
    {standard input}:5356   .text.cliAux:00000000 cliAux
    {standard input}:5660   .text.cliAux:000001cc $d
    {standard input}:5670   .text.printSerial:00000000 $t
    {standard input}:5674   .text.printSerial:00000000 printSerial
    {standard input}:5944   .text.printSerial:000001b4 $d
    {standard input}:5950   .text.cliSerial:00000000 $t
    {standard input}:5954   .text.cliSerial:00000000 cliSerial
    {standard input}:6100   .text.cliSerial:000000e0 $d
    {standard input}:6104   .text.cliSerial:000000f0 $t
    {standard input}:6268   .text.cliSerial:000001c4 $d
    {standard input}:6274   .text.cbCtrlLine:00000000 $t
    {standard input}:6278   .text.cbCtrlLine:00000000 cbCtrlLine
    {standard input}:6368   .text.cliSerialPassthrough:00000000 $t
    {standard input}:6372   .text.cliSerialPassthrough:00000000 cliSerialPassthrough
    {standard input}:6437   .text.cliSerialPassthrough:00000054 $d
    {standard input}:6441   .text.cliSerialPassthrough:00000064 $t
    {standard input}:6735   .text.cliSerialPassthrough:0000024c $d
    {standard input}:6760   .text.printAdjustmentRange:00000000 $t
    {standard input}:6764   .text.printAdjustmentRange:00000000 printAdjustmentRange
    {standard input}:6997   .text.printAdjustmentRange:00000160 $d
    {standard input}:7002   .text.cliAdjustmentRange:00000000 $t
    {standard input}:7006   .text.cliAdjustmentRange:00000000 cliAdjustmentRange
    {standard input}:7362   .text.cliAdjustmentRange:00000228 $d
    {standard input}:7372   .text.printMotorMix:00000000 $t
    {standard input}:7376   .text.printMotorMix:00000000 printMotorMix
    {standard input}:7613   .text.printMotorMix:000001b4 $d
    {standard input}:7631   .text.cliMotorMix:00000000 $t
    {standard input}:7635   .text.cliMotorMix:00000000 cliMotorMix
    {standard input}:7925   .text.cliMotorMix:000001d4 $d
    {standard input}:7940   .text.printRxRange:00000000 $t
    {standard input}:7944   .text.printRxRange:00000000 printRxRange
    {standard input}:8079   .text.printRxRange:000000bc $d
    {standard input}:8084   .text.cliRxRange:00000000 $t
    {standard input}:8088   .text.cliRxRange:00000000 cliRxRange
    {standard input}:8289   .text.cliRxRange:00000130 $d
    {standard input}:8303   .text.printServo:00000000 $t
    {standard input}:8307   .text.printServo:00000000 printServo
    {standard input}:8652   .text.printServo:00000208 $d
    {standard input}:8658   .text.cliServo:00000000 $t
    {standard input}:8662   .text.cliServo:00000000 cliServo
    {standard input}:8966   .text.cliServo:000001bc $d
    {standard input}:8975   .text.printServoMix:00000000 $t
    {standard input}:8979   .text.printServoMix:00000000 printServoMix
    {standard input}:9175   .text.printServoMix:0000011c $d
    {standard input}:9199   .text.cliServoMix:00000000 $t
    {standard input}:9203   .text.cliServoMix:00000000 cliServoMix
    {standard input}:9655   .text.cliServoMix:000002cc $d
    {standard input}:9671   .text.cliServoMix:00000304 $t
    {standard input}:9819   .text.cliServoMix:000003e8 $d
    {standard input}:9824   .text.cliWriteBytes:00000000 $t
    {standard input}:9828   .text.cliWriteBytes:00000000 cliWriteBytes
    {standard input}:9912   .text.cliSdInfo:00000000 $t
    {standard input}:9916   .text.cliSdInfo:00000000 cliSdInfo
    {standard input}:10023  .text.cliSdInfo:0000009c $d
    {standard input}:10027  .text.cliSdInfo:000000ac $t
    {standard input}:10053  .text.cliSdInfo:000000d4 $d
    {standard input}:10057  .text.cliSdInfo:000000e4 $t
    {standard input}:10093  .text.cliSdInfo:00000104 $d
    {standard input}:10111  .text.printVtx:00000000 $t
    {standard input}:10115  .text.printVtx:00000000 printVtx
    {standard input}:10303  .text.printVtx:00000110 $d
    {standard input}:10308  .text.cliVtx:00000000 $t
    {standard input}:10312  .text.cliVtx:00000000 cliVtx
    {standard input}:10563  .text.cliVtx:00000180 $d
    {standard input}:10573  .text.printName:00000000 $t
    {standard input}:10577  .text.printName:00000000 printName
    {standard input}:10635  .text.printName:0000003c $d
    {standard input}:10641  .text.cliName:00000000 $t
    {standard input}:10645  .text.cliName:00000000 cliName
    {standard input}:10725  .text.cliName:00000070 $d
    {standard input}:10740  .text.cliBoardName:00000000 $t
    {standard input}:10744  .text.cliBoardName:00000000 cliBoardName
    {standard input}:10835  .text.cliBoardName:00000084 $d
    {standard input}:10850  .text.cliManufacturerId:00000000 $t
    {standard input}:10854  .text.cliManufacturerId:00000000 cliManufacturerId
    {standard input}:10945  .text.cliManufacturerId:00000084 $d
    {standard input}:10957  .text.writeSignature:00000000 $t
    {standard input}:10961  .text.writeSignature:00000000 writeSignature
    {standard input}:11021  .text.writeSignature:0000003c $d
    {standard input}:11039  .text.cliSignature:00000000 $t
    {standard input}:11043  .text.cliSignature:00000000 cliSignature
    {standard input}:11272  .text.cliSignature:00000184 $d
    {standard input}:11286  .text.cliMcuId:00000000 $t
    {standard input}:11290  .text.cliMcuId:00000000 cliMcuId
    {standard input}:11329  .text.cliMcuId:00000020 $d
    {standard input}:11344  .text.printFeature:00000000 $t
    {standard input}:11348  .text.printFeature:00000000 printFeature
    {standard input}:11562  .text.printFeature:00000164 $d
    {standard input}:11595  .text.cliFeature:00000000 $t
    {standard input}:11599  .text.cliFeature:00000000 cliFeature
    {standard input}:11848  .text.cliFeature:0000016c $d
    {standard input}:11867  .text.printMap:00000000 $t
    {standard input}:11871  .text.printMap:00000000 printMap
    {standard input}:12004  .text.printMap:000000d4 $d
    {standard input}:12010  .text.cliMap:00000000 $t
    {standard input}:12014  .text.cliMap:00000000 cliMap
    {standard input}:12204  .text.cliMap:00000134 $d
    {standard input}:12210  .text.skipSpace:00000000 $t
    {standard input}:12214  .text.skipSpace:00000000 skipSpace
    {standard input}:12265  .text.checkCommand:00000000 $t
    {standard input}:12269  .text.checkCommand:00000000 checkCommand
    {standard input}:12354  .text.cliRebootEx:00000000 $t
    {standard input}:12358  .text.cliRebootEx:00000000 cliRebootEx
    {standard input}:12416  .text.cliRebootEx:00000040 $d
    {standard input}:12423  .text.cliReboot:00000000 $t
    {standard input}:12427  .text.cliReboot:00000000 cliReboot
    {standard input}:12454  .text.cliBootloader:00000000 $t
    {standard input}:12458  .text.cliBootloader:00000000 cliBootloader
    {standard input}:12494  .text.cliBootloader:0000001c $d
    {standard input}:12503  .text.cliExit:00000000 $t
    {standard input}:12507  .text.cliExit:00000000 cliExit
    {standard input}:12565  .text.cliExit:00000040 $d
    {standard input}:12574  .text.cliGpsPassthrough:00000000 $t
    {standard input}:12578  .text.cliGpsPassthrough:00000000 cliGpsPassthrough
    {standard input}:12613  .text.cliGpsPassthrough:00000018 $d
    {standard input}:12628  .text.cliPrintGyroRegisters:00000000 $t
    {standard input}:12632  .text.cliPrintGyroRegisters:00000000 cliPrintGyroRegisters
    {standard input}:12690  .text.cliPrintGyroRegisters:0000004c $d
    {standard input}:12697  .text.cliDumpGyroRegisters:00000000 $t
    {standard input}:12701  .text.cliDumpGyroRegisters:00000000 cliDumpGyroRegisters
    {standard input}:12745  .text.parseOutputIndex:00000000 $t
    {standard input}:12749  .text.parseOutputIndex:00000000 parseOutputIndex
    {standard input}:12830  .text.parseOutputIndex:00000068 $d
    {standard input}:12841  .text.cliMixer:00000000 $t
    {standard input}:12845  .text.cliMixer:00000000 cliMixer
    {standard input}:12998  .text.cliMixer:000000d4 $d
    {standard input}:13019  .text.cliMotor:00000000 $t
    {standard input}:13023  .text.cliMotor:00000000 cliMotor
    {standard input}:13219  .text.cliMotor:0000012c $d
    {standard input}:13238  .text.cliPlaySound:00000000 $t
    {standard input}:13242  .text.cliPlaySound:00000000 cliPlaySound
    {standard input}:13367  .text.cliPlaySound:000000b0 $d
    {standard input}:19371  .data.lastSoundIdx.19000:00000000 lastSoundIdx.19000
    {standard input}:13379  .text.cliProfile:00000000 $t
    {standard input}:13383  .text.cliProfile:00000000 cliProfile
    {standard input}:13451  .text.cliProfile:00000050 $d
    {standard input}:13461  .text.cliRateProfile:00000000 $t
    {standard input}:13465  .text.cliRateProfile:00000000 cliRateProfile
    {standard input}:13533  .text.cliRateProfile:00000050 $d
    {standard input}:13543  .text.cliDumpPidProfile:00000000 $t
    {standard input}:13547  .text.cliDumpPidProfile:00000000 cliDumpPidProfile
    {standard input}:13610  .text.cliDumpPidProfile:00000044 $d
    {standard input}:13621  .text.cliDumpRateProfile:00000000 $t
    {standard input}:13625  .text.cliDumpRateProfile:00000000 cliDumpRateProfile
    {standard input}:13688  .text.cliDumpRateProfile:00000044 $d
    {standard input}:13699  .text.cliSave:00000000 $t
    {standard input}:13703  .text.cliSave:00000000 cliSave
    {standard input}:13756  .text.cliSave:00000034 $d
    {standard input}:13770  .text.cliDefaults:00000000 $t
    {standard input}:13774  .text.cliDefaults:00000000 cliDefaults
    {standard input}:13844  .text.cliDefaults:00000050 $d
    {standard input}:13854  .text.cliPrintVarDefault:00000000 $t
    {standard input}:13859  .text.cliPrintVarDefault:00000000 cliPrintVarDefault
    {standard input}:13948  .text.cliPrintVarDefault:0000007c $d
    {standard input}:13957  .text.cliGet:00000000 $t
    {standard input}:13961  .text.cliGet:00000000 cliGet
    {standard input}:14134  .text.cliGet:000000fc $d
    {standard input}:14145  .text.getWordLength:00000000 $t
    {standard input}:14149  .text.getWordLength:00000000 getWordLength
    {standard input}:14215  .text.cliSet:00000000 $t
    {standard input}:14219  .text.cliSet:00000000 cliSet
    {standard input}:14639  .text.cliSet:000002b0 $d
    {standard input}:14647  .text.cliSet:000002c4 $t
    {standard input}:14757  .text.cliSet:00000364 $d
    {standard input}:14798  .text.cliStatus:00000000 $t
    {standard input}:14802  .text.cliStatus:00000000 cliStatus
    {standard input}:15128  .text.cliStatus:00000254 $d
    {standard input}:15185  .text.cliTasks:00000000 $t
    {standard input}:15189  .text.cliTasks:00000000 cliTasks
    {standard input}:15567  .text.cliTasks:000002b8 $d
    {standard input}:15596  .text.cliVersion:00000000 $t
    {standard input}:15600  .text.cliVersion:00000000 cliVersion
    {standard input}:15658  .text.cliVersion:00000040 $d
    {standard input}:15716  .text.cliRcSmoothing:00000000 $t
    {standard input}:15720  .text.cliRcSmoothing:00000000 cliRcSmoothing
    {standard input}:15897  .text.cliRcSmoothing:0000013c $d
    {standard input}:15922  .rodata.resourceTable:00000000 resourceTable
    {standard input}:15919  .rodata.resourceTable:00000000 $d
    {standard input}:16049  .text.getIoTag:00000000 $t
    {standard input}:16053  .text.getIoTag:00000000 getIoTag
    {standard input}:16112  .text.printResource:00000000 $t
    {standard input}:16116  .text.printResource:00000000 printResource
    {standard input}:16402  .text.printResource:000001cc $d
    {standard input}:16415  .text.printResourceOwner:00000000 $t
    {standard input}:16419  .text.printResourceOwner:00000000 printResourceOwner
    {standard input}:16486  .text.printResourceOwner:00000058 $d
    {standard input}:16507  .text.resourceCheck:00000000 $t
    {standard input}:16511  .text.resourceCheck:00000000 resourceCheck
    {standard input}:16713  .text.resourceCheck:0000011c $d
    {standard input}:16726  .text.strToPin:00000000 $t
    {standard input}:16730  .text.strToPin:00000000 strToPin
    {standard input}:16837  .text.strToPin:00000080 $d
    {standard input}:16863  .text.cliResource:00000000 $t
    {standard input}:16867  .text.cliResource:00000000 cliResource
    {standard input}:17264  .text.cliResource:000002a4 $d
    {standard input}:17291  .text.printDma:00000000 $t
    {standard input}:17295  .text.printDma:00000000 printDma
    {standard input}:17413  .text.printDma:000000ac $d
    {standard input}:17423  .text.cliDma:00000000 $t
    {standard input}:17427  .text.cliDma:00000000 cliDma
    {standard input}:17542  .text.printConfig:00000000 $t
    {standard input}:17546  .text.printConfig:00000000 printConfig
    {standard input}:17926  .text.printConfig:000002d4 $d
    {standard input}:17967  .text.printConfig:00000370 $t
    {standard input}:18102  .text.printConfig:00000448 $d
    {standard input}:18114  .text.cliDump:00000000 $t
    {standard input}:18118  .text.cliDump:00000000 cliDump
    {standard input}:18153  .text.cliDiff:00000000 $t
    {standard input}:18157  .text.cliDiff:00000000 cliDiff
    {standard input}:18419  .rodata.cmdTable:00000000 cmdTable
    {standard input}:18416  .rodata.cmdTable:00000000 $d
    {standard input}:18592  .text.cliHelp:00000000 cliHelp
    {standard input}:18588  .text.cliHelp:00000000 $t
    {standard input}:18686  .text.cliHelp:00000078 $d
    {standard input}:18706  .text.cliProcess:00000000 $t
    {standard input}:18711  .text.cliProcess:00000000 cliProcess
    {standard input}:19132  .text.cliProcess:00000260 $d
    {standard input}:19144  .text.cliProcess:00000288 $t
    {standard input}:19229  .text.cliProcess:00000308 $d
    {standard input}:19242  .text.cliEnter:00000000 $t
    {standard input}:19247  .text.cliEnter:00000000 cliEnter
    {standard input}:19318  .text.cliEnter:00000060 $d
    {standard input}:19328  .text.cliInit:00000000 $t
    {standard input}:19333  .text.cliInit:00000000 cliInit
    {standard input}:19368  .data.lastSoundIdx.19000:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
featureConfig_System
pilotConfig_System
systemConfig_System
modeActivationConditions_SystemArray
adjustmentRanges_SystemArray
customMotorMixer_SystemArray
mixerConfig_System
pidConfig_System
customServoMixers_SystemArray
servoParams_SystemArray
serialConfig_System
vtxConfig_System
rxConfig_System
rxFailsafeChannelConfigs_SystemArray
rxChannelRangeConfigs_SystemArray
lookupTableGyroHardware
lookupTableAccHardware
lookupTableBaroHardware
lookupTableMagHardware
lookupTableRangefinderHardware
memcpy
__pg_registry_start
__pg_registry_end
resetConfigs
bufWriterAppend
bufWriterFlush
tfp_format
lookupTables
getCurrentPidProfileIndex
getCurrentControlRateProfileIndex
pgFind
valueTable
valueTableEntryCount
strchr
atoi
memcmp
itoa
findBoxByBoxId
findBoxByPermanentId
memset
serialIsPortAvailable
baudRates
serialFindPortConfiguration
lookupBaudRateIndex
pinioSet
strtok_r
strstr
findSerialPortUsageByIdentifier
openSerialPort
serialSetBaudRate
serialSetMode
serialSetBaudRateCb
serialSetCtrlLineStateCb
serialPassthrough
ftoa
strncasecmp
strlen
mixerLoadMix
fastA2F
strcasecmp
resetAllRxChannelRangeConfigurations
servoMixerLoadMix
sdcard_isInserted
sdcard_isInitialized
sdcard_getMetadata
afatfs_getFilesystemState
afatfs_getLastError
strncmp
strncpy
boardInformationIsSet
getBoardName
setBoardName
getManufacturerId
setManufacturerId
tfp_sprintf
strtoul
signatureIsSet
getSignature
setSignature
strcmp
featureMask
featureClear
featureSet
rcChannelLetters
toupper
parseRcChannels
isspace
waitForSerialPortToFinishTransmitting
stopPwmAllMotors
systemResetToBootloader
systemReset
mixerResetDisarmedMotors
gpsEnablePassthrough
gyroReadRegister
getMotorCount
convertExternalToMotor
motor_disarmed
beeperNameForTableIndex
beeperTableEntryCount
beeperSilence
beeperModeForTableIndex
beeper
changePidProfile
changeControlRateProfile
persistBoardInformation
persistSignature
writeEEPROM
strcasestr
millis
rtcGetDateTime
dateTimeFormatLocal
getBatteryVoltage
getBatteryCellCount
getBatteryStateString
sensorsMask
i2cGetErrorCounter
stackTotalSize
stackHighMem
getEEPROMConfigSize
getTaskDeltaTime
getArmingDisableFlags
ffs
SystemCoreClock
__config_end
__config_start
detectedSensors
acc
currentRxRefreshRate
averageSystemLoadPercent
armingDisableFlagNames
getTaskInfo
schedulerResetTaskMaxExecutionTime
getCheckFuncInfo
targetName
buildDate
buildTime
shortGitRevision
rcSmoothingGetValue
rcSmoothingAutoCalculate
ownerNames
IO_GPIOPortIdx
IO_GPIOPinIdx
IOGetByTag
IO_Rec
ioRecs
dmaGetOwner
dmaGetResourceIndex
pilotConfig_Copy
mixerConfig_Copy
customMotorMixer_CopyArray
servoParams_CopyArray
customServoMixers_CopyArray
featureConfig_Copy
rxConfig_Copy
serialConfig_Copy
modeActivationConditions_CopyArray
adjustmentRanges_CopyArray
rxChannelRangeConfigs_CopyArray
vtxConfig_Copy
rxFailsafeChannelConfigs_CopyArray
systemConfig_Copy
serialRead
serialRxBytesWaiting
setPrintfSerialPort
bufWriterInit
schedulerSetCalulateTaskStatistics
setArmingDisabled
serialWriteBufShim
