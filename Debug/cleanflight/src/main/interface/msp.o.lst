   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "msp.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.blackboxConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	blackboxConfig:
  25              	.LFB527:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox/blackbox.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "platform.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "build/build_config.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "common/time.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef enum BlackboxDevice {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_NONE = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #ifdef USE_FLASHFS
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_FLASH = 1,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #endif
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #ifdef USE_SDCARD
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_SDCARD = 2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #endif
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_SERIAL = 3
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } BlackboxDevice_e;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef enum BlackboxMode {
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_MODE_NORMAL = 0,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_MODE_MOTOR_TEST,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_MODE_ALWAYS_ON
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } BlackboxMode;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef enum FlightLogEvent {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_SYNC_BEEP = 0,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_INFLIGHT_ADJUSTMENT = 13,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_LOGGING_RESUME = 14,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_FLIGHTMODE = 30, // Add new event type for flight mode status.
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_LOG_END = 255
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } FlightLogEvent;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef struct blackboxConfig_s {
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint16_t p_ratio; // I-frame interval / P-frame interval
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint8_t device;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint8_t record_acc;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint8_t mode;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } blackboxConfig_t;
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** PG_DECLARE(blackboxConfig_t, blackboxConfig);
  27              	 .loc 1 60 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 60 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word blackboxConfig_System
  55              	 .cfi_endproc
  56              	.LFE527:
  58              	 .section .text.blackboxConfigMutable,"ax",%progbits
  59              	 .align 2
  60              	 .thumb
  61              	 .thumb_func
  63              	blackboxConfigMutable:
  64              	.LFB528:
  65              	 .loc 1 60 0
  66              	 .cfi_startproc
  67              	 
  68              	 
  69              	 
  70 0000 80B4     	 push {r7}
  71              	.LCFI4:
  72              	 .cfi_def_cfa_offset 4
  73              	 .cfi_offset 7,-4
  74 0002 00AF     	 add r7,sp,#0
  75              	.LCFI5:
  76              	 .cfi_def_cfa_register 7
  77              	 .loc 1 60 0
  78 0004 024B     	 ldr r3,.L7
  79 0006 1846     	 mov r0,r3
  80 0008 BD46     	 mov sp,r7
  81              	.LCFI6:
  82              	 .cfi_def_cfa_register 13
  83              	 
  84 000a 5DF8047B 	 ldr r7,[sp],#4
  85              	.LCFI7:
  86              	 .cfi_restore 7
  87              	 .cfi_def_cfa_offset 0
  88 000e 7047     	 bx lr
  89              	.L8:
  90              	 .align 2
  91              	.L7:
  92 0010 00000000 	 .word blackboxConfig_System
  93              	 .cfi_endproc
  94              	.LFE528:
  96              	 .section .text.constrain,"ax",%progbits
  97              	 .align 2
  98              	 .thumb
  99              	 .thumb_func
 101              	constrain:
 102              	.LFB529:
 103              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
 104              	 .loc 2 151 0
 105              	 .cfi_startproc
 106              	 
 107              	 
 108              	 
 109 0000 80B4     	 push {r7}
 110              	.LCFI8:
 111              	 .cfi_def_cfa_offset 4
 112              	 .cfi_offset 7,-4
 113 0002 85B0     	 sub sp,sp,#20
 114              	.LCFI9:
 115              	 .cfi_def_cfa_offset 24
 116 0004 00AF     	 add r7,sp,#0
 117              	.LCFI10:
 118              	 .cfi_def_cfa_register 7
 119 0006 F860     	 str r0,[r7,#12]
 120 0008 B960     	 str r1,[r7,#8]
 121 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
 122              	 .loc 2 152 0
 123 000c FA68     	 ldr r2,[r7,#12]
 124 000e BB68     	 ldr r3,[r7,#8]
 125 0010 9A42     	 cmp r2,r3
 126 0012 01DA     	 bge .L10
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
 127              	 .loc 2 153 0
 128 0014 BB68     	 ldr r3,[r7,#8]
 129 0016 06E0     	 b .L11
 130              	.L10:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
 131              	 .loc 2 154 0
 132 0018 FA68     	 ldr r2,[r7,#12]
 133 001a 7B68     	 ldr r3,[r7,#4]
 134 001c 9A42     	 cmp r2,r3
 135 001e 01DD     	 ble .L12
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 136              	 .loc 2 155 0
 137 0020 7B68     	 ldr r3,[r7,#4]
 138 0022 00E0     	 b .L11
 139              	.L12:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 140              	 .loc 2 157 0
 141 0024 FB68     	 ldr r3,[r7,#12]
 142              	.L11:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 143              	 .loc 2 158 0
 144 0026 1846     	 mov r0,r3
 145 0028 1437     	 adds r7,r7,#20
 146              	.LCFI11:
 147              	 .cfi_def_cfa_offset 4
 148 002a BD46     	 mov sp,r7
 149              	.LCFI12:
 150              	 .cfi_def_cfa_register 13
 151              	 
 152 002c 5DF8047B 	 ldr r7,[sp],#4
 153              	.LCFI13:
 154              	 .cfi_restore 7
 155              	 .cfi_def_cfa_offset 0
 156 0030 7047     	 bx lr
 157              	 .cfi_endproc
 158              	.LFE529:
 160 0032 00BF     	 .section .text.gyroConfig,"ax",%progbits
 161              	 .align 2
 162              	 .thumb
 163              	 .thumb_func
 165              	gyroConfig:
 166              	.LFB533:
 167              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/gyro.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "common/axis.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "drivers/bus.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #include "drivers/sensor.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_NONE = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_DEFAULT,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU6050,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_L3G4200D,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU3050,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_L3GD20,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU6000,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU6500,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_MPU9250,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20601,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20602,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20608G,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20649,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_ICM20689,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_BMI160,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_FAKE
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } gyroSensor_e;
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef struct gyro_s {
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint32_t targetLooptime;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     float gyroADCf[XYZ_AXIS_COUNT];
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } gyro_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** extern gyro_t gyro;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_OVERFLOW_CHECK_NONE = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_OVERFLOW_CHECK_YAW,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     GYRO_OVERFLOW_CHECK_ALL_AXES
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } gyroOverflowCheck_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #define GYRO_CONFIG_USE_GYRO_1      0
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #define GYRO_CONFIG_USE_GYRO_2      1
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** #define GYRO_CONFIG_USE_GYRO_BOTH   2
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef enum {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     FILTER_LOWPASS = 0,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     FILTER_LOWPASS2
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } filterSlots;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** typedef struct gyroConfig_s {
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_align;                       // gyro alignment
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyroMovementCalibrationThreshold; // people keep forgetting that moving model while in
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_sync_denom;                  // Gyro sample divider
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_hardware_lpf;                // gyro DLPF setting
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_32khz_hardware_lpf;          // gyro 32khz DLPF setting
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_high_fsr;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_use_32khz;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_to_use;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_lowpass_hz;
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_lowpass2_hz;
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_soft_notch_hz_1;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_soft_notch_cutoff_1;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_soft_notch_hz_2;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyro_soft_notch_cutoff_2;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     int16_t  gyro_offset_yaw;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  checkOverflow;
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     // Lowpass primary/secondary
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_lowpass_type;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  gyro_lowpass2_type;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t  yaw_spin_recovery;
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     int16_t  yaw_spin_threshold;
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint16_t gyroCalibrationDuration;  // Gyro calibration duration in 1/100 second
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t dyn_notch_quality; // bandpass quality factor, 100 for steep sided bandpass
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h ****     uint8_t dyn_notch_width_percent;
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** } gyroConfig_t;
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\gyro.h **** PG_DECLARE(gyroConfig_t, gyroConfig);
 168              	 .loc 3 103 0
 169              	 .cfi_startproc
 170              	 
 171              	 
 172              	 
 173 0000 80B4     	 push {r7}
 174              	.LCFI14:
 175              	 .cfi_def_cfa_offset 4
 176              	 .cfi_offset 7,-4
 177 0002 00AF     	 add r7,sp,#0
 178              	.LCFI15:
 179              	 .cfi_def_cfa_register 7
 180              	 .loc 3 103 0
 181 0004 024B     	 ldr r3,.L15
 182 0006 1846     	 mov r0,r3
 183 0008 BD46     	 mov sp,r7
 184              	.LCFI16:
 185              	 .cfi_def_cfa_register 13
 186              	 
 187 000a 5DF8047B 	 ldr r7,[sp],#4
 188              	.LCFI17:
 189              	 .cfi_restore 7
 190              	 .cfi_def_cfa_offset 0
 191 000e 7047     	 bx lr
 192              	.L16:
 193              	 .align 2
 194              	.L15:
 195 0010 00000000 	 .word gyroConfig_System
 196              	 .cfi_endproc
 197              	.LFE533:
 199              	 .section .text.gyroConfigMutable,"ax",%progbits
 200              	 .align 2
 201              	 .thumb
 202              	 .thumb_func
 204              	gyroConfigMutable:
 205              	.LFB534:
 206              	 .loc 3 103 0
 207              	 .cfi_startproc
 208              	 
 209              	 
 210              	 
 211 0000 80B4     	 push {r7}
 212              	.LCFI18:
 213              	 .cfi_def_cfa_offset 4
 214              	 .cfi_offset 7,-4
 215 0002 00AF     	 add r7,sp,#0
 216              	.LCFI19:
 217              	 .cfi_def_cfa_register 7
 218              	 .loc 3 103 0
 219 0004 024B     	 ldr r3,.L19
 220 0006 1846     	 mov r0,r3
 221 0008 BD46     	 mov sp,r7
 222              	.LCFI20:
 223              	 .cfi_def_cfa_register 13
 224              	 
 225 000a 5DF8047B 	 ldr r7,[sp],#4
 226              	.LCFI21:
 227              	 .cfi_restore 7
 228              	 .cfi_def_cfa_offset 0
 229 000e 7047     	 bx lr
 230              	.L20:
 231              	 .align 2
 232              	.L19:
 233 0010 00000000 	 .word gyroConfig_System
 234              	 .cfi_endproc
 235              	.LFE534:
 237              	 .section .text.pilotConfig,"ax",%progbits
 238              	 .align 2
 239              	 .thumb
 240              	 .thumb_func
 242              	pilotConfig:
 243              	.LFB549:
 244              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdbool.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #define MAX_NAME_LENGTH 16u
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** typedef struct pilotConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     char name[MAX_NAME_LENGTH + 1];
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** } pilotConfig_t;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** PG_DECLARE(pilotConfig_t, pilotConfig);
 245              	 .loc 4 34 0
 246              	 .cfi_startproc
 247              	 
 248              	 
 249              	 
 250 0000 80B4     	 push {r7}
 251              	.LCFI22:
 252              	 .cfi_def_cfa_offset 4
 253              	 .cfi_offset 7,-4
 254 0002 00AF     	 add r7,sp,#0
 255              	.LCFI23:
 256              	 .cfi_def_cfa_register 7
 257              	 .loc 4 34 0
 258 0004 024B     	 ldr r3,.L23
 259 0006 1846     	 mov r0,r3
 260 0008 BD46     	 mov sp,r7
 261              	.LCFI24:
 262              	 .cfi_def_cfa_register 13
 263              	 
 264 000a 5DF8047B 	 ldr r7,[sp],#4
 265              	.LCFI25:
 266              	 .cfi_restore 7
 267              	 .cfi_def_cfa_offset 0
 268 000e 7047     	 bx lr
 269              	.L24:
 270              	 .align 2
 271              	.L23:
 272 0010 00000000 	 .word pilotConfig_System
 273              	 .cfi_endproc
 274              	.LFE549:
 276              	 .section .text.pilotConfigMutable,"ax",%progbits
 277              	 .align 2
 278              	 .thumb
 279              	 .thumb_func
 281              	pilotConfigMutable:
 282              	.LFB550:
 283              	 .loc 4 34 0
 284              	 .cfi_startproc
 285              	 
 286              	 
 287              	 
 288 0000 80B4     	 push {r7}
 289              	.LCFI26:
 290              	 .cfi_def_cfa_offset 4
 291              	 .cfi_offset 7,-4
 292 0002 00AF     	 add r7,sp,#0
 293              	.LCFI27:
 294              	 .cfi_def_cfa_register 7
 295              	 .loc 4 34 0
 296 0004 024B     	 ldr r3,.L27
 297 0006 1846     	 mov r0,r3
 298 0008 BD46     	 mov sp,r7
 299              	.LCFI28:
 300              	 .cfi_def_cfa_register 13
 301              	 
 302 000a 5DF8047B 	 ldr r7,[sp],#4
 303              	.LCFI29:
 304              	 .cfi_restore 7
 305              	 .cfi_def_cfa_offset 0
 306 000e 7047     	 bx lr
 307              	.L28:
 308              	 .align 2
 309              	.L27:
 310 0010 00000000 	 .word pilotConfig_System
 311              	 .cfi_endproc
 312              	.LFE550:
 314              	 .section .text.systemConfig,"ax",%progbits
 315              	 .align 2
 316              	 .thumb
 317              	 .thumb_func
 319              	systemConfig:
 320              	.LFB551:
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** typedef struct systemConfig_s {
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t pidProfileIndex;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t activeRateProfile;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t debug_mode;
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t task_statistics;
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t rateProfile6PosSwitch;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t cpu_overclock;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     uint8_t powerOnArmingGraceTime; // in seconds
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     char boardIdentifier[sizeof(TARGET_BOARD_IDENTIFIER) + 1];
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** } systemConfig_t;
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** PG_DECLARE(systemConfig_t, systemConfig);
 321              	 .loc 4 47 0
 322              	 .cfi_startproc
 323              	 
 324              	 
 325              	 
 326 0000 80B4     	 push {r7}
 327              	.LCFI30:
 328              	 .cfi_def_cfa_offset 4
 329              	 .cfi_offset 7,-4
 330 0002 00AF     	 add r7,sp,#0
 331              	.LCFI31:
 332              	 .cfi_def_cfa_register 7
 333              	 .loc 4 47 0
 334 0004 024B     	 ldr r3,.L31
 335 0006 1846     	 mov r0,r3
 336 0008 BD46     	 mov sp,r7
 337              	.LCFI32:
 338              	 .cfi_def_cfa_register 13
 339              	 
 340 000a 5DF8047B 	 ldr r7,[sp],#4
 341              	.LCFI33:
 342              	 .cfi_restore 7
 343              	 .cfi_def_cfa_offset 0
 344 000e 7047     	 bx lr
 345              	.L32:
 346              	 .align 2
 347              	.L31:
 348 0010 00000000 	 .word systemConfig_System
 349              	 .cfi_endproc
 350              	.LFE551:
 352              	 .section .text.modeActivationConditions,"ax",%progbits
 353              	 .align 2
 354              	 .thumb
 355              	 .thumb_func
 357              	modeActivationConditions:
 358              	.LFB558:
 359              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define BOXID_NONE 255
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     // ARM flag
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXARM = 0,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     // FLIGHT_MODE
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXANGLE,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXHORIZON,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXMAG,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBARO,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXGPSHOME,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXGPSHOLD,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXHEADFREE,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPASSTHRU,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXFAILSAFE,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXGPSRESCUE,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXID_FLIGHTMODE_LAST = BOXGPSRESCUE,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // When new flight modes are added, the parameter group version for 'modeActivationConditions' in s
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     // RCMODE flags
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXANTIGRAVITY,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXHEADADJ,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMSTAB,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBEEPERON,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXLEDLOW,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCALIB,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXOSD,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXTELEMETRY,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXSERVO1,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXSERVO2,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXSERVO3,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBLACKBOX,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXAIRMODE,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOX3D,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXFPVANGLEMIX,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBLACKBOXERASE,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMERA1,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMERA2,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMERA3,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXFLIPOVERAFTERCRASH,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPREARM,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBEEPGPSCOUNT,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXVTXPITMODE,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPARALYZE,
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER1,
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER2,
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER3,
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER4,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPIDAUDIO,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXACROTRAINER,
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     CHECKBOX_ITEM_COUNT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } boxId_e;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef enum {
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     MODELOGIC_OR = 0,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     MODELOGIC_AND
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } modeLogic_e;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // type to hold enough bits for CHECKBOX_ITEM_COUNT. Struct used for value-like behavior
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef struct boxBitmask_s { uint32_t bits[(CHECKBOX_ITEM_COUNT + 31) / 32]; } boxBitmask_t;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MAX_MODE_ACTIVATION_CONDITION_COUNT 20
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define CHANNEL_RANGE_MIN 900
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define CHANNEL_RANGE_MAX 2100
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MODE_STEP_TO_CHANNEL_VALUE(step) (CHANNEL_RANGE_MIN + 25 * step)
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define CHANNEL_VALUE_TO_STEP(channelValue) ((constrain(channelValue, CHANNEL_RANGE_MIN, CHANNEL_RA
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MIN_MODE_RANGE_STEP 0
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MAX_MODE_RANGE_STEP ((CHANNEL_RANGE_MAX - CHANNEL_RANGE_MIN) / 25)
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // steps are 25 apart
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // a value of 0 corresponds to a channel value of 900 or less
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // a value of 48 corresponds to a channel value of 2100 or more
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // 48 steps between 900 and 2100
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef struct channelRange_s {
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     uint8_t startStep;
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     uint8_t endStep;
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } channelRange_t;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef struct modeActivationCondition_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     boxId_e modeId;
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     uint8_t auxChannelIndex;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     channelRange_t range;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     modeLogic_e modeLogic;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     boxId_e linkedTo;
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } modeActivationCondition_t;
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** PG_DECLARE_ARRAY(modeActivationCondition_t, MAX_MODE_ACTIVATION_CONDITION_COUNT, modeActivationCond
 360              	 .loc 5 117 0
 361              	 .cfi_startproc
 362              	 
 363              	 
 364              	 
 365 0000 80B4     	 push {r7}
 366              	.LCFI34:
 367              	 .cfi_def_cfa_offset 4
 368              	 .cfi_offset 7,-4
 369 0002 83B0     	 sub sp,sp,#12
 370              	.LCFI35:
 371              	 .cfi_def_cfa_offset 16
 372 0004 00AF     	 add r7,sp,#0
 373              	.LCFI36:
 374              	 .cfi_def_cfa_register 7
 375 0006 7860     	 str r0,[r7,#4]
 376              	 .loc 5 117 0
 377 0008 7A68     	 ldr r2,[r7,#4]
 378 000a 1346     	 mov r3,r2
 379 000c 5B00     	 lsls r3,r3,#1
 380 000e 1344     	 add r3,r3,r2
 381 0010 5B00     	 lsls r3,r3,#1
 382 0012 044A     	 ldr r2,.L35
 383 0014 1344     	 add r3,r3,r2
 384 0016 1846     	 mov r0,r3
 385 0018 0C37     	 adds r7,r7,#12
 386              	.LCFI37:
 387              	 .cfi_def_cfa_offset 4
 388 001a BD46     	 mov sp,r7
 389              	.LCFI38:
 390              	 .cfi_def_cfa_register 13
 391              	 
 392 001c 5DF8047B 	 ldr r7,[sp],#4
 393              	.LCFI39:
 394              	 .cfi_restore 7
 395              	 .cfi_def_cfa_offset 0
 396 0020 7047     	 bx lr
 397              	.L36:
 398 0022 00BF     	 .align 2
 399              	.L35:
 400 0024 00000000 	 .word modeActivationConditions_SystemArray
 401              	 .cfi_endproc
 402              	.LFE558:
 404              	 .section .text.modeActivationConditionsMutable,"ax",%progbits
 405              	 .align 2
 406              	 .thumb
 407              	 .thumb_func
 409              	modeActivationConditionsMutable:
 410              	.LFB559:
 411              	 .loc 5 117 0
 412              	 .cfi_startproc
 413              	 
 414              	 
 415              	 
 416 0000 80B4     	 push {r7}
 417              	.LCFI40:
 418              	 .cfi_def_cfa_offset 4
 419              	 .cfi_offset 7,-4
 420 0002 83B0     	 sub sp,sp,#12
 421              	.LCFI41:
 422              	 .cfi_def_cfa_offset 16
 423 0004 00AF     	 add r7,sp,#0
 424              	.LCFI42:
 425              	 .cfi_def_cfa_register 7
 426 0006 7860     	 str r0,[r7,#4]
 427              	 .loc 5 117 0
 428 0008 7A68     	 ldr r2,[r7,#4]
 429 000a 1346     	 mov r3,r2
 430 000c 5B00     	 lsls r3,r3,#1
 431 000e 1344     	 add r3,r3,r2
 432 0010 5B00     	 lsls r3,r3,#1
 433 0012 044A     	 ldr r2,.L39
 434 0014 1344     	 add r3,r3,r2
 435 0016 1846     	 mov r0,r3
 436 0018 0C37     	 adds r7,r7,#12
 437              	.LCFI43:
 438              	 .cfi_def_cfa_offset 4
 439 001a BD46     	 mov sp,r7
 440              	.LCFI44:
 441              	 .cfi_def_cfa_register 13
 442              	 
 443 001c 5DF8047B 	 ldr r7,[sp],#4
 444              	.LCFI45:
 445              	 .cfi_restore 7
 446              	 .cfi_def_cfa_offset 0
 447 0020 7047     	 bx lr
 448              	.L40:
 449 0022 00BF     	 .align 2
 450              	.L39:
 451 0024 00000000 	 .word modeActivationConditions_SystemArray
 452              	 .cfi_endproc
 453              	.LFE559:
 455              	 .section .text.adjustmentRanges,"ax",%progbits
 456              	 .align 2
 457              	 .thumb
 458              	 .thumb_func
 460              	adjustmentRanges:
 461              	.LFB561:
 462              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_adjustments.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #include "pg/pg.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #include "fc/rc_modes.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef enum {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_NONE = 0,
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_RC_RATE,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_RC_EXPO,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_THROTTLE_EXPO,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_RATE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_RATE,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_P,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_I,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_D,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_P,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_I,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_D,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_RATE_PROFILE,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_RATE,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_RATE,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_P,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_I,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_D,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_P,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_I,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_D,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_RC_RATE_YAW,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_ROLL_F,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_FEEDFORWARD_TRANSITION,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_HORIZON_STRENGTH,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_RC_RATE,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_RC_RATE,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_RC_EXPO,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_RC_EXPO,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PID_AUDIO,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_PITCH_F,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_ROLL_F,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_YAW_F,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_FUNCTION_COUNT
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentFunction_e;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef enum {
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_MODE_STEP,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     ADJUSTMENT_MODE_SELECT
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentMode_e;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef union adjustmentConfig_u {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t step;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t switchPositions;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentData_t;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef struct adjustmentConfig_s {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     adjustmentFunction_e adjustmentFunction;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     adjustmentMode_e mode;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     adjustmentData_t data;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentConfig_t;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** #define MAX_ADJUSTMENT_RANGE_COUNT 15
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** typedef struct adjustmentRange_s {
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     // when aux channel is in range...
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t auxChannelIndex;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     channelRange_t range;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     // ..then apply the adjustment function to the auxSwitchChannel ...
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t adjustmentFunction;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t auxSwitchChannelIndex;
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     // ... via slot
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint8_t adjustmentIndex;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint16_t adjustmentCenter;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h ****     uint16_t adjustmentScale;
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** } adjustmentRange_t;
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_adjustments.h **** PG_DECLARE_ARRAY(adjustmentRange_t, MAX_ADJUSTMENT_RANGE_COUNT, adjustmentRanges);
 463              	 .loc 6 97 0
 464              	 .cfi_startproc
 465              	 
 466              	 
 467              	 
 468 0000 80B4     	 push {r7}
 469              	.LCFI46:
 470              	 .cfi_def_cfa_offset 4
 471              	 .cfi_offset 7,-4
 472 0002 83B0     	 sub sp,sp,#12
 473              	.LCFI47:
 474              	 .cfi_def_cfa_offset 16
 475 0004 00AF     	 add r7,sp,#0
 476              	.LCFI48:
 477              	 .cfi_def_cfa_register 7
 478 0006 7860     	 str r0,[r7,#4]
 479              	 .loc 6 97 0
 480 0008 7A68     	 ldr r2,[r7,#4]
 481 000a 1346     	 mov r3,r2
 482 000c 9B00     	 lsls r3,r3,#2
 483 000e 1344     	 add r3,r3,r2
 484 0010 5B00     	 lsls r3,r3,#1
 485 0012 044A     	 ldr r2,.L43
 486 0014 1344     	 add r3,r3,r2
 487 0016 1846     	 mov r0,r3
 488 0018 0C37     	 adds r7,r7,#12
 489              	.LCFI49:
 490              	 .cfi_def_cfa_offset 4
 491 001a BD46     	 mov sp,r7
 492              	.LCFI50:
 493              	 .cfi_def_cfa_register 13
 494              	 
 495 001c 5DF8047B 	 ldr r7,[sp],#4
 496              	.LCFI51:
 497              	 .cfi_restore 7
 498              	 .cfi_def_cfa_offset 0
 499 0020 7047     	 bx lr
 500              	.L44:
 501 0022 00BF     	 .align 2
 502              	.L43:
 503 0024 00000000 	 .word adjustmentRanges_SystemArray
 504              	 .cfi_endproc
 505              	.LFE561:
 507              	 .section .text.adjustmentRangesMutable,"ax",%progbits
 508              	 .align 2
 509              	 .thumb
 510              	 .thumb_func
 512              	adjustmentRangesMutable:
 513              	.LFB562:
 514              	 .loc 6 97 0
 515              	 .cfi_startproc
 516              	 
 517              	 
 518              	 
 519 0000 80B4     	 push {r7}
 520              	.LCFI52:
 521              	 .cfi_def_cfa_offset 4
 522              	 .cfi_offset 7,-4
 523 0002 83B0     	 sub sp,sp,#12
 524              	.LCFI53:
 525              	 .cfi_def_cfa_offset 16
 526 0004 00AF     	 add r7,sp,#0
 527              	.LCFI54:
 528              	 .cfi_def_cfa_register 7
 529 0006 7860     	 str r0,[r7,#4]
 530              	 .loc 6 97 0
 531 0008 7A68     	 ldr r2,[r7,#4]
 532 000a 1346     	 mov r3,r2
 533 000c 9B00     	 lsls r3,r3,#2
 534 000e 1344     	 add r3,r3,r2
 535 0010 5B00     	 lsls r3,r3,#1
 536 0012 044A     	 ldr r2,.L47
 537 0014 1344     	 add r3,r3,r2
 538 0016 1846     	 mov r0,r3
 539 0018 0C37     	 adds r7,r7,#12
 540              	.LCFI55:
 541              	 .cfi_def_cfa_offset 4
 542 001a BD46     	 mov sp,r7
 543              	.LCFI56:
 544              	 .cfi_def_cfa_register 13
 545              	 
 546 001c 5DF8047B 	 ldr r7,[sp],#4
 547              	.LCFI57:
 548              	 .cfi_restore 7
 549              	 .cfi_def_cfa_offset 0
 550 0020 7047     	 bx lr
 551              	.L48:
 552 0022 00BF     	 .align 2
 553              	.L47:
 554 0024 00000000 	 .word adjustmentRanges_SystemArray
 555              	 .cfi_endproc
 556              	.LFE562:
 558              	 .section .text.rcControlsConfig,"ax",%progbits
 559              	 .align 2
 560              	 .thumb
 561              	 .thumb_func
 563              	rcControlsConfig:
 564              	.LFB564:
 565              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum rc_alias {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     ROLL = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     PITCH,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     YAW,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX1,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX3,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX4,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX5,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX6,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX7,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     AUX8
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rc_alias_e;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PRIMARY_CHANNEL_COUNT (THROTTLE + 1)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_LOW = 0,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     THROTTLE_HIGH
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } throttleStatus_e;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define AIRMODEDEADBAND 12
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     NOT_CENTERED = 0,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     CENTERED
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rollPitchStatus_e;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_OFF = 0,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DEFAULT,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_AUTO,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_MANUAL
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothing_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_INTERPOLATION,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_TYPE_FILTER
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingType_e;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_PT1,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_INPUT_BIQUAD
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInputFilter_e;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_OFF,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_PT1,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_DERIVATIVE_BIQUAD
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingDerivativeFilter_e;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef enum {
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_INPUT_ACTIVE,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_DERIVATIVE_ACTIVE,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     RC_SMOOTHING_VALUE_AVERAGE_FRAME
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingInfoType_e;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_LO (1 << (2 * ROLL))
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_CE (3 << (2 * ROLL))
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define ROL_HI (2 << (2 * ROLL))
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_LO (1 << (2 * PITCH))
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_CE (3 << (2 * PITCH))
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define PIT_HI (2 << (2 * PITCH))
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_LO (1 << (2 * YAW))
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_CE (3 << (2 * YAW))
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define YAW_HI (2 << (2 * YAW))
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_LO (1 << (2 * THROTTLE))
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_CE (3 << (2 * THROTTLE))
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define THR_HI (2 << (2 * THROTTLE))
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_EXPO_MAX  100
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RC_RATES_MAX  255
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** // (Super) rates are constrained to [0, 100] for Betaflight rates, so values higher than 100 won't 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_RATE_MAX  255
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** #define CONTROL_RATE_CONFIG_TPA_MAX              100
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** extern float rcCommand[4];
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilterTraining_s {
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     float sum;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int count;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t min;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t max;
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTraining_t;
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef union rcSmoothingFilterTypes_u {
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     pt1Filter_t pt1Filter;
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     biquadFilter_t biquadFilter;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilterTypes_t;
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcSmoothingFilter_s {
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool filterInitialized;
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTypes_t filter[4];
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t inputCutoffFrequency;
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t derivativeCutoffFrequency;
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     int averageFrameTimeUs;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     rcSmoothingFilterTraining_t training;
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcSmoothingFilter_t;
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct rcControlsConfig_s {
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t deadband;                       // introduce a deadband around the stick center for pit
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t yaw_deadband;                   // introduce a deadband around the stick center for yaw
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_deadband;              // defines the neutral zone of throttle stick during al
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t alt_hold_fast_change;           // when disabled, turn off the althold when throttle st
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     bool yaw_control_reversed;            // invert control direction of yaw
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } rcControlsConfig_t;
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(rcControlsConfig_t, rcControlsConfig);
 566              	 .loc 7 139 0
 567              	 .cfi_startproc
 568              	 
 569              	 
 570              	 
 571 0000 80B4     	 push {r7}
 572              	.LCFI58:
 573              	 .cfi_def_cfa_offset 4
 574              	 .cfi_offset 7,-4
 575 0002 00AF     	 add r7,sp,#0
 576              	.LCFI59:
 577              	 .cfi_def_cfa_register 7
 578              	 .loc 7 139 0
 579 0004 024B     	 ldr r3,.L51
 580 0006 1846     	 mov r0,r3
 581 0008 BD46     	 mov sp,r7
 582              	.LCFI60:
 583              	 .cfi_def_cfa_register 13
 584              	 
 585 000a 5DF8047B 	 ldr r7,[sp],#4
 586              	.LCFI61:
 587              	 .cfi_restore 7
 588              	 .cfi_def_cfa_offset 0
 589 000e 7047     	 bx lr
 590              	.L52:
 591              	 .align 2
 592              	.L51:
 593 0010 00000000 	 .word rcControlsConfig_System
 594              	 .cfi_endproc
 595              	.LFE564:
 597              	 .section .text.rcControlsConfigMutable,"ax",%progbits
 598              	 .align 2
 599              	 .thumb
 600              	 .thumb_func
 602              	rcControlsConfigMutable:
 603              	.LFB565:
 604              	 .loc 7 139 0
 605              	 .cfi_startproc
 606              	 
 607              	 
 608              	 
 609 0000 80B4     	 push {r7}
 610              	.LCFI62:
 611              	 .cfi_def_cfa_offset 4
 612              	 .cfi_offset 7,-4
 613 0002 00AF     	 add r7,sp,#0
 614              	.LCFI63:
 615              	 .cfi_def_cfa_register 7
 616              	 .loc 7 139 0
 617 0004 024B     	 ldr r3,.L55
 618 0006 1846     	 mov r0,r3
 619 0008 BD46     	 mov sp,r7
 620              	.LCFI64:
 621              	 .cfi_def_cfa_register 13
 622              	 
 623 000a 5DF8047B 	 ldr r7,[sp],#4
 624              	.LCFI65:
 625              	 .cfi_restore 7
 626              	 .cfi_def_cfa_offset 0
 627 000e 7047     	 bx lr
 628              	.L56:
 629              	 .align 2
 630              	.L55:
 631 0010 00000000 	 .word rcControlsConfig_System
 632              	 .cfi_endproc
 633              	.LFE565:
 635              	 .section .text.flight3DConfig,"ax",%progbits
 636              	 .align 2
 637              	 .thumb
 638              	 .thumb_func
 640              	flight3DConfig:
 641              	.LFB566:
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct flight3DConfig_s {
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_low;                // min 3d value
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_high;               // max 3d value
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t neutral3d;                     // center 3d value
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t deadband3d_throttle;           // default throttle deadband from MIDRC
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_low;                   // pwm output value for max negative thrust
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint16_t limit3d_high;                  // pwm output value for max positive thrust
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t switched_mode3d;                // enable '3D Switched Mode'
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } flight3DConfig_t;
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(flight3DConfig_t, flight3DConfig);
 642              	 .loc 7 151 0
 643              	 .cfi_startproc
 644              	 
 645              	 
 646              	 
 647 0000 80B4     	 push {r7}
 648              	.LCFI66:
 649              	 .cfi_def_cfa_offset 4
 650              	 .cfi_offset 7,-4
 651 0002 00AF     	 add r7,sp,#0
 652              	.LCFI67:
 653              	 .cfi_def_cfa_register 7
 654              	 .loc 7 151 0
 655 0004 024B     	 ldr r3,.L59
 656 0006 1846     	 mov r0,r3
 657 0008 BD46     	 mov sp,r7
 658              	.LCFI68:
 659              	 .cfi_def_cfa_register 13
 660              	 
 661 000a 5DF8047B 	 ldr r7,[sp],#4
 662              	.LCFI69:
 663              	 .cfi_restore 7
 664              	 .cfi_def_cfa_offset 0
 665 000e 7047     	 bx lr
 666              	.L60:
 667              	 .align 2
 668              	.L59:
 669 0010 00000000 	 .word flight3DConfig_System
 670              	 .cfi_endproc
 671              	.LFE566:
 673              	 .section .text.flight3DConfigMutable,"ax",%progbits
 674              	 .align 2
 675              	 .thumb
 676              	 .thumb_func
 678              	flight3DConfigMutable:
 679              	.LFB567:
 680              	 .loc 7 151 0
 681              	 .cfi_startproc
 682              	 
 683              	 
 684              	 
 685 0000 80B4     	 push {r7}
 686              	.LCFI70:
 687              	 .cfi_def_cfa_offset 4
 688              	 .cfi_offset 7,-4
 689 0002 00AF     	 add r7,sp,#0
 690              	.LCFI71:
 691              	 .cfi_def_cfa_register 7
 692              	 .loc 7 151 0
 693 0004 024B     	 ldr r3,.L63
 694 0006 1846     	 mov r0,r3
 695 0008 BD46     	 mov sp,r7
 696              	.LCFI72:
 697              	 .cfi_def_cfa_register 13
 698              	 
 699 000a 5DF8047B 	 ldr r7,[sp],#4
 700              	.LCFI73:
 701              	 .cfi_restore 7
 702              	 .cfi_def_cfa_offset 0
 703 000e 7047     	 bx lr
 704              	.L64:
 705              	 .align 2
 706              	.L63:
 707 0010 00000000 	 .word flight3DConfig_System
 708              	 .cfi_endproc
 709              	.LFE567:
 711              	 .section .text.armingConfig,"ax",%progbits
 712              	 .align 2
 713              	 .thumb
 714              	 .thumb_func
 716              	armingConfig:
 717              	.LFB568:
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** typedef struct armingConfig_s {
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t gyro_cal_on_first_arm;          // allow disarm/arm on throttle down + roll left/right
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h ****     uint8_t auto_disarm_delay;              // allow automatically disarming multicopters after aut
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** } armingConfig_t;
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** 
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_controls.h **** PG_DECLARE(armingConfig_t, armingConfig);
 718              	 .loc 7 158 0
 719              	 .cfi_startproc
 720              	 
 721              	 
 722              	 
 723 0000 80B4     	 push {r7}
 724              	.LCFI74:
 725              	 .cfi_def_cfa_offset 4
 726              	 .cfi_offset 7,-4
 727 0002 00AF     	 add r7,sp,#0
 728              	.LCFI75:
 729              	 .cfi_def_cfa_register 7
 730              	 .loc 7 158 0
 731 0004 024B     	 ldr r3,.L67
 732 0006 1846     	 mov r0,r3
 733 0008 BD46     	 mov sp,r7
 734              	.LCFI76:
 735              	 .cfi_def_cfa_register 13
 736              	 
 737 000a 5DF8047B 	 ldr r7,[sp],#4
 738              	.LCFI77:
 739              	 .cfi_restore 7
 740              	 .cfi_def_cfa_offset 0
 741 000e 7047     	 bx lr
 742              	.L68:
 743              	 .align 2
 744              	.L67:
 745 0010 00000000 	 .word armingConfig_System
 746              	 .cfi_endproc
 747              	.LFE568:
 749              	 .section .text.armingConfigMutable,"ax",%progbits
 750              	 .align 2
 751              	 .thumb
 752              	 .thumb_func
 754              	armingConfigMutable:
 755              	.LFB569:
 756              	 .loc 7 158 0
 757              	 .cfi_startproc
 758              	 
 759              	 
 760              	 
 761 0000 80B4     	 push {r7}
 762              	.LCFI78:
 763              	 .cfi_def_cfa_offset 4
 764              	 .cfi_offset 7,-4
 765 0002 00AF     	 add r7,sp,#0
 766              	.LCFI79:
 767              	 .cfi_def_cfa_register 7
 768              	 .loc 7 158 0
 769 0004 024B     	 ldr r3,.L71
 770 0006 1846     	 mov r0,r3
 771 0008 BD46     	 mov sp,r7
 772              	.LCFI80:
 773              	 .cfi_def_cfa_register 13
 774              	 
 775 000a 5DF8047B 	 ldr r7,[sp],#4
 776              	.LCFI81:
 777              	 .cfi_restore 7
 778              	 .cfi_def_cfa_offset 0
 779 000e 7047     	 bx lr
 780              	.L72:
 781              	 .align 2
 782              	.L71:
 783 0010 00000000 	 .word armingConfig_System
 784              	 .cfi_endproc
 785              	.LFE569:
 787              	 .section .text.failsafeConfig,"ax",%progbits
 788              	 .align 2
 789              	 .thumb
 790              	 .thumb_func
 792              	failsafeConfig:
 793              	.LFB570:
 794              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define FAILSAFE_POWER_ON_DELAY_US (1000 * 1000 * 5)
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define MILLIS_PER_TENTH_SECOND      100
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define MILLIS_PER_SECOND           1000
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_OF_1_SECONDS            1 * MILLIS_PER_SECOND
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_OF_3_SECONDS            3 * MILLIS_PER_SECOND
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_OF_30_SECONDS          30 * MILLIS_PER_SECOND
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_RXDATA_FAILURE        200    // millis
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** #define PERIOD_RXDATA_RECOVERY       200    // millis
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** typedef struct failsafeConfig_s {
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint16_t failsafe_throttle;             // Throttle level used for landing - specify value betw
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint16_t failsafe_throttle_low_delay;   // Time throttle stick must have been below 'min_check'
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_delay;                 // Guard time for failsafe activation after signal lost
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_off_delay;             // Time for Landing before motors stop in 0.1sec. 1 ste
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_switch_mode;           // failsafe switch action is 0: stage1 (identical to rc
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h ****     uint8_t failsafe_procedure;             // selected full failsafe procedure is 0: auto-landing,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** } failsafeConfig_t;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** 
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\failsafe.h **** PG_DECLARE(failsafeConfig_t, failsafeConfig);
 795              	 .loc 8 44 0
 796              	 .cfi_startproc
 797              	 
 798              	 
 799              	 
 800 0000 80B4     	 push {r7}
 801              	.LCFI82:
 802              	 .cfi_def_cfa_offset 4
 803              	 .cfi_offset 7,-4
 804 0002 00AF     	 add r7,sp,#0
 805              	.LCFI83:
 806              	 .cfi_def_cfa_register 7
 807              	 .loc 8 44 0
 808 0004 024B     	 ldr r3,.L75
 809 0006 1846     	 mov r0,r3
 810 0008 BD46     	 mov sp,r7
 811              	.LCFI84:
 812              	 .cfi_def_cfa_register 13
 813              	 
 814 000a 5DF8047B 	 ldr r7,[sp],#4
 815              	.LCFI85:
 816              	 .cfi_restore 7
 817              	 .cfi_def_cfa_offset 0
 818 000e 7047     	 bx lr
 819              	.L76:
 820              	 .align 2
 821              	.L75:
 822 0010 00000000 	 .word failsafeConfig_System
 823              	 .cfi_endproc
 824              	.LFE570:
 826              	 .section .text.failsafeConfigMutable,"ax",%progbits
 827              	 .align 2
 828              	 .thumb
 829              	 .thumb_func
 831              	failsafeConfigMutable:
 832              	.LFB571:
 833              	 .loc 8 44 0
 834              	 .cfi_startproc
 835              	 
 836              	 
 837              	 
 838 0000 80B4     	 push {r7}
 839              	.LCFI86:
 840              	 .cfi_def_cfa_offset 4
 841              	 .cfi_offset 7,-4
 842 0002 00AF     	 add r7,sp,#0
 843              	.LCFI87:
 844              	 .cfi_def_cfa_register 7
 845              	 .loc 8 44 0
 846 0004 024B     	 ldr r3,.L79
 847 0006 1846     	 mov r0,r3
 848 0008 BD46     	 mov sp,r7
 849              	.LCFI88:
 850              	 .cfi_def_cfa_register 13
 851              	 
 852 000a 5DF8047B 	 ldr r7,[sp],#4
 853              	.LCFI89:
 854              	 .cfi_restore 7
 855              	 .cfi_def_cfa_offset 0
 856 000e 7047     	 bx lr
 857              	.L80:
 858              	 .align 2
 859              	.L79:
 860 0010 00000000 	 .word failsafeConfig_System
 861              	 .cfi_endproc
 862              	.LFE571:
 864              	 .section .text.imuConfig,"ax",%progbits
 865              	 .align 2
 866              	 .thumb
 867              	 .thumb_func
 869              	imuConfig:
 870              	.LFB572:
 871              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #include "common/axis.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #include "common/maths.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** // Exported symbols
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern uint32_t accTimeSum;
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern int accSumCount;
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern float accVelScale;
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern int32_t accSum[XYZ_AXIS_COUNT];
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern bool canUseGPSHeading;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern float accAverage[XYZ_AXIS_COUNT];
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef struct {
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     float w,x,y,z;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } quaternion;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #define QUATERNION_INITIALIZE  {.w=1, .x=0, .y=0,.z=0}
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef struct {
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     float ww,wx,wy,wz,xx,xy,xz,yy,yz,zz;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } quaternionProducts;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #define QUATERNION_PRODUCTS_INITIALIZE  {.ww=1, .wx=0, .wy=0, .wz=0, .xx=0, .xy=0, .xz=0, .yy=0, .y
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef union {
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     int16_t raw[XYZ_AXIS_COUNT];
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     struct {
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****         // absolute angle inclination in multiple of 0.1 degree    180 deg = 1800
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****         int16_t roll;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****         int16_t pitch;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****         int16_t yaw;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     } values;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } attitudeEulerAngles_t;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** #define EULER_INITIALIZE  { { 0, 0, 0 } }
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** extern attitudeEulerAngles_t attitude;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef struct accDeadband_s {
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint8_t xy;                 // set the acc deadband for xy-Axis
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint8_t z;                  // set the acc deadband for z-Axis, this ignores small acceleration
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } accDeadband_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** typedef struct imuConfig_s {
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint16_t dcm_kp;                        // DCM filter proportional gain ( x 10000)
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint16_t dcm_ki;                        // DCM filter integral gain ( x 10000)
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint8_t small_angle;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     uint8_t acc_unarmedcal;                 // turn automatic acc compensation on/off
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h ****     accDeadband_t accDeadband;
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** } imuConfig_t;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\imu.h **** PG_DECLARE(imuConfig_t, imuConfig);
 872              	 .loc 9 72 0
 873              	 .cfi_startproc
 874              	 
 875              	 
 876              	 
 877 0000 80B4     	 push {r7}
 878              	.LCFI90:
 879              	 .cfi_def_cfa_offset 4
 880              	 .cfi_offset 7,-4
 881 0002 00AF     	 add r7,sp,#0
 882              	.LCFI91:
 883              	 .cfi_def_cfa_register 7
 884              	 .loc 9 72 0
 885 0004 024B     	 ldr r3,.L83
 886 0006 1846     	 mov r0,r3
 887 0008 BD46     	 mov sp,r7
 888              	.LCFI92:
 889              	 .cfi_def_cfa_register 13
 890              	 
 891 000a 5DF8047B 	 ldr r7,[sp],#4
 892              	.LCFI93:
 893              	 .cfi_restore 7
 894              	 .cfi_def_cfa_offset 0
 895 000e 7047     	 bx lr
 896              	.L84:
 897              	 .align 2
 898              	.L83:
 899 0010 00000000 	 .word imuConfig_System
 900              	 .cfi_endproc
 901              	.LFE572:
 903              	 .section .text.imuConfigMutable,"ax",%progbits
 904              	 .align 2
 905              	 .thumb
 906              	 .thumb_func
 908              	imuConfigMutable:
 909              	.LFB573:
 910              	 .loc 9 72 0
 911              	 .cfi_startproc
 912              	 
 913              	 
 914              	 
 915 0000 80B4     	 push {r7}
 916              	.LCFI94:
 917              	 .cfi_def_cfa_offset 4
 918              	 .cfi_offset 7,-4
 919 0002 00AF     	 add r7,sp,#0
 920              	.LCFI95:
 921              	 .cfi_def_cfa_register 7
 922              	 .loc 9 72 0
 923 0004 024B     	 ldr r3,.L87
 924 0006 1846     	 mov r0,r3
 925 0008 BD46     	 mov sp,r7
 926              	.LCFI96:
 927              	 .cfi_def_cfa_register 13
 928              	 
 929 000a 5DF8047B 	 ldr r7,[sp],#4
 930              	.LCFI97:
 931              	 .cfi_restore 7
 932              	 .cfi_def_cfa_offset 0
 933 000e 7047     	 bx lr
 934              	.L88:
 935              	 .align 2
 936              	.L87:
 937 0010 00000000 	 .word imuConfig_System
 938              	 .cfi_endproc
 939              	.LFE573:
 941              	 .section .text.mixerConfig,"ax",%progbits
 942              	 .align 2
 943              	 .thumb
 944              	 .thumb_func
 946              	mixerConfig:
 947              	.LFB577:
 948              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "platform.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "common/time.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output_counts.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/io_types.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #include "drivers/pwm_output.h"
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define QUAD_MOTOR_COUNT 4
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHED_MOTORS_PWM_RATE 16000
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define BRUSHLESS_MOTORS_PWM_RATE 480
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Digital protocol has fixed values
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_DISARM_COMMAND      0
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MIN_THROTTLE       48
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_MAX_THROTTLE     2047
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_LOW  1047
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** #define DSHOT_3D_DEADBAND_HIGH 1048
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Note: this is called MultiType/MULTITYPE_* in baseflight.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef enum mixerMode
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** {
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_TRI = 1,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADP = 2,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX = 3,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_BICOPTER = 4,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_GIMBAL = 5,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y6 = 6,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6 = 7,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_FLYING_WING = 8,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_Y4 = 9,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6X = 10,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOX8 = 11,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATP = 12,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_OCTOFLATX = 13,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_AIRPLANE = 14,        // airplane / singlecopter / dualcopter (not yet properly supported
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_120_CCPM = 15,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HELI_90_DEG = 16,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_VTAIL4 = 17,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_HEX6H = 18,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_RX_TO_SERVO = 19,    // PPM -> servo relay
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_DUALCOPTER = 20,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_SINGLECOPTER = 21,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_ATAIL4 = 22,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM = 23,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_AIRPLANE = 24,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_CUSTOM_TRI = 25,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     MIXER_QUADX_1234 = 26
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerMode_e;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer data per motor
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct motorMixer_s {
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float throttle;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float roll;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float pitch;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     float yaw;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } motorMixer_t;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE_ARRAY(motorMixer_t, MAX_SUPPORTED_MOTORS, customMotorMixer);
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** // Custom mixer configuration
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixer_s {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t motorCount;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t useServo;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     const motorMixer_t *motor;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixer_t;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct mixerConfig_s {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t mixerMode;
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     bool yaw_motors_reversed;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t crashflip_motor_percent;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } mixerConfig_t;
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE(mixerConfig_t, mixerConfig);
 949              	 .loc 10 96 0
 950              	 .cfi_startproc
 951              	 
 952              	 
 953              	 
 954 0000 80B4     	 push {r7}
 955              	.LCFI98:
 956              	 .cfi_def_cfa_offset 4
 957              	 .cfi_offset 7,-4
 958 0002 00AF     	 add r7,sp,#0
 959              	.LCFI99:
 960              	 .cfi_def_cfa_register 7
 961              	 .loc 10 96 0
 962 0004 024B     	 ldr r3,.L91
 963 0006 1846     	 mov r0,r3
 964 0008 BD46     	 mov sp,r7
 965              	.LCFI100:
 966              	 .cfi_def_cfa_register 13
 967              	 
 968 000a 5DF8047B 	 ldr r7,[sp],#4
 969              	.LCFI101:
 970              	 .cfi_restore 7
 971              	 .cfi_def_cfa_offset 0
 972 000e 7047     	 bx lr
 973              	.L92:
 974              	 .align 2
 975              	.L91:
 976 0010 00000000 	 .word mixerConfig_System
 977              	 .cfi_endproc
 978              	.LFE577:
 980              	 .section .text.mixerConfigMutable,"ax",%progbits
 981              	 .align 2
 982              	 .thumb
 983              	 .thumb_func
 985              	mixerConfigMutable:
 986              	.LFB578:
 987              	 .loc 10 96 0
 988              	 .cfi_startproc
 989              	 
 990              	 
 991              	 
 992 0000 80B4     	 push {r7}
 993              	.LCFI102:
 994              	 .cfi_def_cfa_offset 4
 995              	 .cfi_offset 7,-4
 996 0002 00AF     	 add r7,sp,#0
 997              	.LCFI103:
 998              	 .cfi_def_cfa_register 7
 999              	 .loc 10 96 0
 1000 0004 024B     	 ldr r3,.L95
 1001 0006 1846     	 mov r0,r3
 1002 0008 BD46     	 mov sp,r7
 1003              	.LCFI104:
 1004              	 .cfi_def_cfa_register 13
 1005              	 
 1006 000a 5DF8047B 	 ldr r7,[sp],#4
 1007              	.LCFI105:
 1008              	 .cfi_restore 7
 1009              	 .cfi_def_cfa_offset 0
 1010 000e 7047     	 bx lr
 1011              	.L96:
 1012              	 .align 2
 1013              	.L95:
 1014 0010 00000000 	 .word mixerConfig_System
 1015              	 .cfi_endproc
 1016              	.LFE578:
 1018              	 .section .text.motorConfig,"ax",%progbits
 1019              	 .align 2
 1020              	 .thumb
 1021              	 .thumb_func
 1023              	motorConfig:
 1024              	.LFB579:
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** typedef struct motorConfig_s {
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     motorDevConfig_t dev;
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t digitalIdleOffsetValue;        // Idle value for DShot protocol, full motor output = 1
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t minthrottle;                   // Set the minimum throttle command sent to the ESC (El
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t maxthrottle;                   // This is the maximum value for the ESCs at full power
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint16_t mincommand;                    // This is the value for the ESCs when they are not arm
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h ****     uint8_t motorPoleCount;                // Magnetic poles in the motors for calculating actual R
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** } motorConfig_t;
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** 
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\mixer.h **** PG_DECLARE(motorConfig_t, motorConfig);
 1025              	 .loc 10 107 0
 1026              	 .cfi_startproc
 1027              	 
 1028              	 
 1029              	 
 1030 0000 80B4     	 push {r7}
 1031              	.LCFI106:
 1032              	 .cfi_def_cfa_offset 4
 1033              	 .cfi_offset 7,-4
 1034 0002 00AF     	 add r7,sp,#0
 1035              	.LCFI107:
 1036              	 .cfi_def_cfa_register 7
 1037              	 .loc 10 107 0
 1038 0004 024B     	 ldr r3,.L99
 1039 0006 1846     	 mov r0,r3
 1040 0008 BD46     	 mov sp,r7
 1041              	.LCFI108:
 1042              	 .cfi_def_cfa_register 13
 1043              	 
 1044 000a 5DF8047B 	 ldr r7,[sp],#4
 1045              	.LCFI109:
 1046              	 .cfi_restore 7
 1047              	 .cfi_def_cfa_offset 0
 1048 000e 7047     	 bx lr
 1049              	.L100:
 1050              	 .align 2
 1051              	.L99:
 1052 0010 00000000 	 .word motorConfig_System
 1053              	 .cfi_endproc
 1054              	.LFE579:
 1056              	 .section .text.motorConfigMutable,"ax",%progbits
 1057              	 .align 2
 1058              	 .thumb
 1059              	 .thumb_func
 1061              	motorConfigMutable:
 1062              	.LFB580:
 1063              	 .loc 10 107 0
 1064              	 .cfi_startproc
 1065              	 
 1066              	 
 1067              	 
 1068 0000 80B4     	 push {r7}
 1069              	.LCFI110:
 1070              	 .cfi_def_cfa_offset 4
 1071              	 .cfi_offset 7,-4
 1072 0002 00AF     	 add r7,sp,#0
 1073              	.LCFI111:
 1074              	 .cfi_def_cfa_register 7
 1075              	 .loc 10 107 0
 1076 0004 024B     	 ldr r3,.L103
 1077 0006 1846     	 mov r0,r3
 1078 0008 BD46     	 mov sp,r7
 1079              	.LCFI112:
 1080              	 .cfi_def_cfa_register 13
 1081              	 
 1082 000a 5DF8047B 	 ldr r7,[sp],#4
 1083              	.LCFI113:
 1084              	 .cfi_restore 7
 1085              	 .cfi_def_cfa_offset 0
 1086 000e 7047     	 bx lr
 1087              	.L104:
 1088              	 .align 2
 1089              	.L103:
 1090 0010 00000000 	 .word motorConfig_System
 1091              	 .cfi_endproc
 1092              	.LFE580:
 1094              	 .section .text.pidConfig,"ax",%progbits
 1095              	 .align 2
 1096              	 .thumb
 1097              	 .thumb_func
 1099              	pidConfig:
 1100              	.LFB584:
 1101              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define MAX_PID_PROCESS_DENOM       16
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_CONTROLLER_BETAFLIGHT   1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_MIXER_SCALING           1000.0f
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PID_SERVO_MIXER_SCALING     0.7f
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT                500
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_YAW            400
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MIN            100
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PIDSUM_LIMIT_MAX            1000
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // Scaling factors for Pids for better tunable range in configurator for betaflight pid controller.
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define PTERM_SCALE 0.032029f
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define ITERM_SCALE 0.244381f
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define DTERM_SCALE 0.000529f
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // The constant scale factor to replace the Kd component of the feedforward calculation.
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** // This value gives the same "feel" as the previous Kd default of 26 (26 * DTERM_SCALE)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #define FEEDFORWARD_SCALE 0.013754f
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ROLL,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_PITCH,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_YAW,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_LEVEL,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_MAG,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_ITEM_COUNT
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidIndex_e;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_OFF = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ON,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     SUPEREXPO_YAW_ALWAYS
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidSuperExpoYaw_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_OFF = 0,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_STABILISATION_ON
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidStabilisationState_e;
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_OFF = 0,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_ON,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     PID_CRASH_RECOVERY_BEEP
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidCrashRecovery_e;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidf_s {
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t P;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t I;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t D;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t F;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidf_t;
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_SMOOTH,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ANTI_GRAVITY_STEP
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } antiGravityMode_e;
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_OFF,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RP_INC,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_RPY_INC
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelax_e;
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef enum {
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_GYRO,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     ITERM_RELAX_SETPOINT
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } itermRelaxType_e;
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidProfile_s {
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yaw_lowpass_hz;                // Additional yaw filter when yaw axis too noisy
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass_hz;              // Delta Filter in hz
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_hz;                // Biquad dterm notch hz
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_notch_cutoff;            // Biquad dterm notch low cutoff
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     pidf_t  pid[PID_ITEM_COUNT];
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t dterm_filter_type;              // Filter selection for dterm
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t itermWindupPointPercent;        // Experimental ITerm windup threshold, percent motor s
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimit;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t pidSumLimitYaw;
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pidAtMinThrottle;               // Disable/Enable pids on zero throttle. Normally even 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t levelAngleLimit;                // Max angle in degrees in level mode
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_effect;            // inclination factor for Horizon mode
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t horizon_tilt_expert_mode;       // OFF or ON
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     // Betaflight PID controller parameters
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t  antiGravityMode;             // type of anti gravity method
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermThrottleThreshold;        // max allowed throttle delta before iterm accelerated 
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermAcceleratorGain;          // Iterm Accelerator Gain when itermThrottlethreshold i
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t yawRateAccelLimit;             // yaw accel limiter for deg/sec/ms
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t rateAccelLimit;                // accel limiter roll/pitch deg/sec/ms
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_dthreshold;              // dterm crash value
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_gthreshold;              // gyro crash value
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_setpoint_threshold;      // setpoint must be below this value to detect crash, s
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_time;                    // ms
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_delay;                   // ms
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_angle;           // degrees
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery_rate;            // degree/second
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t vbatPidCompensation;            // Scale PIDsum to battery voltage
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t feedForwardTransition;          // Feed forward weight transition
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t crash_limit_yaw;               // limits yaw errorRate, so crashes don't cause huge th
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t itermLimit;
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t dterm_lowpass2_hz;             // Extra PT1 Filter on D in hz
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t crash_recovery;                 // off, on, on and beeps when it is in crash recovery m
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost;                 // how much should throttle be boosted during transient
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t throttle_boost_cutoff;          // Which cutoff frequency to use for throttle boost. hi
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_rotation;                 // rotates iterm to translate world errors to local coo
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t smart_feedforward;              // takes only the larger of P and the D weight feed for
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_type;               // Specifies type of relax algorithm
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax_cutoff;             // This cutoff frequency specifies a low pass filter wh
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t iterm_relax;                    // Enable iterm suppression during stick input
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_angle_limit;       // Acro trainer roll/pitch angle limit in degrees
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_debug_axis;        // The axis for which record debugging values are captu
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t acro_trainer_gain;              // The strength of the limiting. Raising may reduce ove
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t acro_trainer_lookahead_ms;     // The lookahead window in milliseconds used to reduce 
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_gain;               // How strongly should the absolute accumulated error b
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_limit;              // Limit to the correction
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t abs_control_error_limit;        // Limit to the accumulated error
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidProfile_t;
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #ifndef USE_OSD_SLAVE
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE_ARRAY(pidProfile_t, MAX_PROFILE_COUNT, pidProfiles);
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** #endif
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** typedef struct pidConfig_s {
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t pid_process_denom;              // Processing denominator for PID controller vs gyro sa
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_prevention;          // off, on - enables pidsum runaway disarm logic
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint16_t runaway_takeoff_deactivate_delay;   // delay in ms for "in-flight" conditions before d
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h ****     uint8_t runaway_takeoff_deactivate_throttle; // minimum throttle percent required during deacti
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** } pidConfig_t;
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** 
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\pid.h **** PG_DECLARE(pidConfig_t, pidConfig);
 1102              	 .loc 11 161 0
 1103              	 .cfi_startproc
 1104              	 
 1105              	 
 1106              	 
 1107 0000 80B4     	 push {r7}
 1108              	.LCFI114:
 1109              	 .cfi_def_cfa_offset 4
 1110              	 .cfi_offset 7,-4
 1111 0002 00AF     	 add r7,sp,#0
 1112              	.LCFI115:
 1113              	 .cfi_def_cfa_register 7
 1114              	 .loc 11 161 0
 1115 0004 024B     	 ldr r3,.L107
 1116 0006 1846     	 mov r0,r3
 1117 0008 BD46     	 mov sp,r7
 1118              	.LCFI116:
 1119              	 .cfi_def_cfa_register 13
 1120              	 
 1121 000a 5DF8047B 	 ldr r7,[sp],#4
 1122              	.LCFI117:
 1123              	 .cfi_restore 7
 1124              	 .cfi_def_cfa_offset 0
 1125 000e 7047     	 bx lr
 1126              	.L108:
 1127              	 .align 2
 1128              	.L107:
 1129 0010 00000000 	 .word pidConfig_System
 1130              	 .cfi_endproc
 1131              	.LFE584:
 1133              	 .section .text.pidConfigMutable,"ax",%progbits
 1134              	 .align 2
 1135              	 .thumb
 1136              	 .thumb_func
 1138              	pidConfigMutable:
 1139              	.LFB585:
 1140              	 .loc 11 161 0
 1141              	 .cfi_startproc
 1142              	 
 1143              	 
 1144              	 
 1145 0000 80B4     	 push {r7}
 1146              	.LCFI118:
 1147              	 .cfi_def_cfa_offset 4
 1148              	 .cfi_offset 7,-4
 1149 0002 00AF     	 add r7,sp,#0
 1150              	.LCFI119:
 1151              	 .cfi_def_cfa_register 7
 1152              	 .loc 11 161 0
 1153 0004 024B     	 ldr r3,.L111
 1154 0006 1846     	 mov r0,r3
 1155 0008 BD46     	 mov sp,r7
 1156              	.LCFI120:
 1157              	 .cfi_def_cfa_register 13
 1158              	 
 1159 000a 5DF8047B 	 ldr r7,[sp],#4
 1160              	.LCFI121:
 1161              	 .cfi_restore 7
 1162              	 .cfi_def_cfa_offset 0
 1163 000e 7047     	 bx lr
 1164              	.L112:
 1165              	 .align 2
 1166              	.L111:
 1167 0010 00000000 	 .word pidConfig_System
 1168              	 .cfi_endproc
 1169              	.LFE585:
 1171              	 .comm inputSource_e,1,1
 1172              	 .section .text.customServoMixers,"ax",%progbits
 1173              	 .align 2
 1174              	 .thumb
 1175              	 .thumb_func
 1177              	customServoMixers:
 1178              	.LFB586:
 1179              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/servos.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "drivers/io_types.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #include "drivers/pwm_output.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // These must be consecutive, see 'reversedSources'
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** enum {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_ROLL = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_PITCH,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_YAW,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_STABILIZED_THROTTLE,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_ROLL,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_PITCH,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_YAW,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_THROTTLE,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX1,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX2,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX3,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_RC_AUX4,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_GIMBAL_PITCH,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_GIMBAL_ROLL,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     INPUT_SOURCE_COUNT
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } inputSource_e;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // target servo channels
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef enum {
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_GIMBAL_PITCH = 0,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_GIMBAL_ROLL = 1,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPS = 2,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPPERON_1 = 3,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_FLAPPERON_2 = 4,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_RUDDER = 5,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_ELEVATOR = 6,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_THROTTLE = 7, // for internal combustion (IC) planes
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_BICOPTER_LEFT = 4,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_BICOPTER_RIGHT = 5,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_DUALCOPTER_LEFT = 4,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_DUALCOPTER_RIGHT = 5,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_1 = 3,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_2 = 4,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_3 = 5,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_SINGLECOPTER_4 = 6,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_LEFT = 0,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_RIGHT = 1,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_TOP = 2,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     SERVO_HELI_RUD = 3
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoIndex_e; // FIXME rename to servoChannel_e
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_PLANE_INDEX_MIN SERVO_FLAPS
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_PLANE_INDEX_MAX SERVO_THROTTLE
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_DUALCOPTER_INDEX_MIN SERVO_DUALCOPTER_LEFT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_DUALCOPTER_INDEX_MAX SERVO_DUALCOPTER_RIGHT
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_SINGLECOPTER_INDEX_MIN SERVO_SINGLECOPTER_1
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_SINGLECOPTER_INDEX_MAX SERVO_SINGLECOPTER_4
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_FLAPPERONS_MIN SERVO_FLAPPERON_1
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define SERVO_FLAPPERONS_MAX SERVO_FLAPPERON_2
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_RULES (2 * MAX_SUPPORTED_SERVOS)
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoMixer_s {
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t targetChannel;                  // servo that receives the output of the rule
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t inputSource;                    // input channel for this rule
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t rate;                            // range [-125;+125] ; can be used to adjust a rate 0-1
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t speed;                          // reduces the speed of the rule, 0=unlimited speed
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t min;                             // lower bound of rule range [0;100]% of servo max-min
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t max;                             // lower bound of rule range [0;100]% of servo max-min
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t box;                            // active rule if box is enabled, range [0;3], 0=no box
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoMixer_t;
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE_ARRAY(servoMixer_t, MAX_SERVO_RULES, customServoMixers);
 1180              	 .loc 12 99 0
 1181              	 .cfi_startproc
 1182              	 
 1183              	 
 1184              	 
 1185 0000 80B4     	 push {r7}
 1186              	.LCFI122:
 1187              	 .cfi_def_cfa_offset 4
 1188              	 .cfi_offset 7,-4
 1189 0002 83B0     	 sub sp,sp,#12
 1190              	.LCFI123:
 1191              	 .cfi_def_cfa_offset 16
 1192 0004 00AF     	 add r7,sp,#0
 1193              	.LCFI124:
 1194              	 .cfi_def_cfa_register 7
 1195 0006 7860     	 str r0,[r7,#4]
 1196              	 .loc 12 99 0
 1197 0008 7A68     	 ldr r2,[r7,#4]
 1198 000a 1346     	 mov r3,r2
 1199 000c DB00     	 lsls r3,r3,#3
 1200 000e 9B1A     	 subs r3,r3,r2
 1201 0010 034A     	 ldr r2,.L115
 1202 0012 1344     	 add r3,r3,r2
 1203 0014 1846     	 mov r0,r3
 1204 0016 0C37     	 adds r7,r7,#12
 1205              	.LCFI125:
 1206              	 .cfi_def_cfa_offset 4
 1207 0018 BD46     	 mov sp,r7
 1208              	.LCFI126:
 1209              	 .cfi_def_cfa_register 13
 1210              	 
 1211 001a 5DF8047B 	 ldr r7,[sp],#4
 1212              	.LCFI127:
 1213              	 .cfi_restore 7
 1214              	 .cfi_def_cfa_offset 0
 1215 001e 7047     	 bx lr
 1216              	.L116:
 1217              	 .align 2
 1218              	.L115:
 1219 0020 00000000 	 .word customServoMixers_SystemArray
 1220              	 .cfi_endproc
 1221              	.LFE586:
 1223              	 .section .text.customServoMixersMutable,"ax",%progbits
 1224              	 .align 2
 1225              	 .thumb
 1226              	 .thumb_func
 1228              	customServoMixersMutable:
 1229              	.LFB587:
 1230              	 .loc 12 99 0
 1231              	 .cfi_startproc
 1232              	 
 1233              	 
 1234              	 
 1235 0000 80B4     	 push {r7}
 1236              	.LCFI128:
 1237              	 .cfi_def_cfa_offset 4
 1238              	 .cfi_offset 7,-4
 1239 0002 83B0     	 sub sp,sp,#12
 1240              	.LCFI129:
 1241              	 .cfi_def_cfa_offset 16
 1242 0004 00AF     	 add r7,sp,#0
 1243              	.LCFI130:
 1244              	 .cfi_def_cfa_register 7
 1245 0006 7860     	 str r0,[r7,#4]
 1246              	 .loc 12 99 0
 1247 0008 7A68     	 ldr r2,[r7,#4]
 1248 000a 1346     	 mov r3,r2
 1249 000c DB00     	 lsls r3,r3,#3
 1250 000e 9B1A     	 subs r3,r3,r2
 1251 0010 034A     	 ldr r2,.L119
 1252 0012 1344     	 add r3,r3,r2
 1253 0014 1846     	 mov r0,r3
 1254 0016 0C37     	 adds r7,r7,#12
 1255              	.LCFI131:
 1256              	 .cfi_def_cfa_offset 4
 1257 0018 BD46     	 mov sp,r7
 1258              	.LCFI132:
 1259              	 .cfi_def_cfa_register 13
 1260              	 
 1261 001a 5DF8047B 	 ldr r7,[sp],#4
 1262              	.LCFI133:
 1263              	 .cfi_restore 7
 1264              	 .cfi_def_cfa_offset 0
 1265 001e 7047     	 bx lr
 1266              	.L120:
 1267              	 .align 2
 1268              	.L119:
 1269 0020 00000000 	 .word customServoMixers_SystemArray
 1270              	 .cfi_endproc
 1271              	.LFE587:
 1273              	 .section .text.servoParams,"ax",%progbits
 1274              	 .align 2
 1275              	 .thumb
 1276              	 .thumb_func
 1278              	servoParams:
 1279              	.LFB589:
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_SPEED UINT8_MAX
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** #define MAX_SERVO_BOXES 3
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** // Custom mixer configuration
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct mixerRules_s {
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint8_t servoRuleCount;
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     const servoMixer_t *rule;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } mixerRules_t;
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** extern const mixerRules_t servoMixers[];
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** typedef struct servoParam_s {
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     uint32_t reversedSources;               // the direction of servo movement for each input sourc
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t min;                            // servo min
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t max;                            // servo max
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int16_t middle;                         // servo middle
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t rate;                            // range [-125;+125] ; can be used to adjust a rate 0-1
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h ****     int8_t forwardFromChannel;              // RX channel index, 0 based.  See CHANNEL_FORWARDING_D
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** } servoParam_t;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** 
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight\servos.h **** PG_DECLARE_ARRAY(servoParam_t, MAX_SUPPORTED_SERVOS, servoParams);
 1280              	 .loc 12 121 0
 1281              	 .cfi_startproc
 1282              	 
 1283              	 
 1284              	 
 1285 0000 80B4     	 push {r7}
 1286              	.LCFI134:
 1287              	 .cfi_def_cfa_offset 4
 1288              	 .cfi_offset 7,-4
 1289 0002 83B0     	 sub sp,sp,#12
 1290              	.LCFI135:
 1291              	 .cfi_def_cfa_offset 16
 1292 0004 00AF     	 add r7,sp,#0
 1293              	.LCFI136:
 1294              	 .cfi_def_cfa_register 7
 1295 0006 7860     	 str r0,[r7,#4]
 1296              	 .loc 12 121 0
 1297 0008 7A68     	 ldr r2,[r7,#4]
 1298 000a 1346     	 mov r3,r2
 1299 000c 5B00     	 lsls r3,r3,#1
 1300 000e 1344     	 add r3,r3,r2
 1301 0010 9B00     	 lsls r3,r3,#2
 1302 0012 044A     	 ldr r2,.L123
 1303 0014 1344     	 add r3,r3,r2
 1304 0016 1846     	 mov r0,r3
 1305 0018 0C37     	 adds r7,r7,#12
 1306              	.LCFI137:
 1307              	 .cfi_def_cfa_offset 4
 1308 001a BD46     	 mov sp,r7
 1309              	.LCFI138:
 1310              	 .cfi_def_cfa_register 13
 1311              	 
 1312 001c 5DF8047B 	 ldr r7,[sp],#4
 1313              	.LCFI139:
 1314              	 .cfi_restore 7
 1315              	 .cfi_def_cfa_offset 0
 1316 0020 7047     	 bx lr
 1317              	.L124:
 1318 0022 00BF     	 .align 2
 1319              	.L123:
 1320 0024 00000000 	 .word servoParams_SystemArray
 1321              	 .cfi_endproc
 1322              	.LFE589:
 1324              	 .section .text.servoParamsMutable,"ax",%progbits
 1325              	 .align 2
 1326              	 .thumb
 1327              	 .thumb_func
 1329              	servoParamsMutable:
 1330              	.LFB590:
 1331              	 .loc 12 121 0
 1332              	 .cfi_startproc
 1333              	 
 1334              	 
 1335              	 
 1336 0000 80B4     	 push {r7}
 1337              	.LCFI140:
 1338              	 .cfi_def_cfa_offset 4
 1339              	 .cfi_offset 7,-4
 1340 0002 83B0     	 sub sp,sp,#12
 1341              	.LCFI141:
 1342              	 .cfi_def_cfa_offset 16
 1343 0004 00AF     	 add r7,sp,#0
 1344              	.LCFI142:
 1345              	 .cfi_def_cfa_register 7
 1346 0006 7860     	 str r0,[r7,#4]
 1347              	 .loc 12 121 0
 1348 0008 7A68     	 ldr r2,[r7,#4]
 1349 000a 1346     	 mov r3,r2
 1350 000c 5B00     	 lsls r3,r3,#1
 1351 000e 1344     	 add r3,r3,r2
 1352 0010 9B00     	 lsls r3,r3,#2
 1353 0012 044A     	 ldr r2,.L127
 1354 0014 1344     	 add r3,r3,r2
 1355 0016 1846     	 mov r0,r3
 1356 0018 0C37     	 adds r7,r7,#12
 1357              	.LCFI143:
 1358              	 .cfi_def_cfa_offset 4
 1359 001a BD46     	 mov sp,r7
 1360              	.LCFI144:
 1361              	 .cfi_def_cfa_register 13
 1362              	 
 1363 001c 5DF8047B 	 ldr r7,[sp],#4
 1364              	.LCFI145:
 1365              	 .cfi_restore 7
 1366              	 .cfi_def_cfa_offset 0
 1367 0020 7047     	 bx lr
 1368              	.L128:
 1369 0022 00BF     	 .align 2
 1370              	.L127:
 1371 0024 00000000 	 .word servoParams_SystemArray
 1372              	 .cfi_endproc
 1373              	.LFE590:
 1375              	 .section .text.gpsConfig,"ax",%progbits
 1376              	 .align 2
 1377              	 .thumb
 1378              	 .thumb_func
 1380              	gpsConfig:
 1381              	.LFB596:
 1382              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #include "common/axis.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define LAT 0
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define LON 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define GPS_DEGREES_DIVIDER 10000000L
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define GPS_X 1
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define GPS_Y 0
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_NMEA = 0,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_UBLOX
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsProvider_e;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_AUTO = 0,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_EGNOS,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_WAAS,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_MSAS,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_GAGAN
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } sbasMode_e;
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define SBAS_MODE_MAX SBAS_GAGAN
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_115200 = 0,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_57600,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_38400,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_19200,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_9600
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsBaudRate_e;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_AUTOCONFIG_OFF = 0,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_AUTOCONFIG_ON
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsAutoConfig_e;
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_AUTOBAUD_OFF = 0,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_AUTOBAUD_ON
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsAutoBaud_e;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define GPS_BAUDRATE_MAX GPS_BAUDRATE_9600
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef struct gpsConfig_s {
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     gpsProvider_e provider;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     sbasMode_e sbasMode;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     gpsAutoConfig_e autoConfig;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     gpsAutoBaud_e autoBaud;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     uint8_t gps_ublox_use_galileo;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsConfig_t;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** PG_DECLARE(gpsConfig_t, gpsConfig);
 1383              	 .loc 13 78 0
 1384              	 .cfi_startproc
 1385              	 
 1386              	 
 1387              	 
 1388 0000 80B4     	 push {r7}
 1389              	.LCFI146:
 1390              	 .cfi_def_cfa_offset 4
 1391              	 .cfi_offset 7,-4
 1392 0002 00AF     	 add r7,sp,#0
 1393              	.LCFI147:
 1394              	 .cfi_def_cfa_register 7
 1395              	 .loc 13 78 0
 1396 0004 024B     	 ldr r3,.L131
 1397 0006 1846     	 mov r0,r3
 1398 0008 BD46     	 mov sp,r7
 1399              	.LCFI148:
 1400              	 .cfi_def_cfa_register 13
 1401              	 
 1402 000a 5DF8047B 	 ldr r7,[sp],#4
 1403              	.LCFI149:
 1404              	 .cfi_restore 7
 1405              	 .cfi_def_cfa_offset 0
 1406 000e 7047     	 bx lr
 1407              	.L132:
 1408              	 .align 2
 1409              	.L131:
 1410 0010 00000000 	 .word gpsConfig_System
 1411              	 .cfi_endproc
 1412              	.LFE596:
 1414              	 .section .text.gpsConfigMutable,"ax",%progbits
 1415              	 .align 2
 1416              	 .thumb
 1417              	 .thumb_func
 1419              	gpsConfigMutable:
 1420              	.LFB597:
 1421              	 .loc 13 78 0
 1422              	 .cfi_startproc
 1423              	 
 1424              	 
 1425              	 
 1426 0000 80B4     	 push {r7}
 1427              	.LCFI150:
 1428              	 .cfi_def_cfa_offset 4
 1429              	 .cfi_offset 7,-4
 1430 0002 00AF     	 add r7,sp,#0
 1431              	.LCFI151:
 1432              	 .cfi_def_cfa_register 7
 1433              	 .loc 13 78 0
 1434 0004 024B     	 ldr r3,.L135
 1435 0006 1846     	 mov r0,r3
 1436 0008 BD46     	 mov sp,r7
 1437              	.LCFI152:
 1438              	 .cfi_def_cfa_register 13
 1439              	 
 1440 000a 5DF8047B 	 ldr r7,[sp],#4
 1441              	.LCFI153:
 1442              	 .cfi_restore 7
 1443              	 .cfi_def_cfa_offset 0
 1444 000e 7047     	 bx lr
 1445              	.L136:
 1446              	 .align 2
 1447              	.L135:
 1448 0010 00000000 	 .word gpsConfig_System
 1449              	 .cfi_endproc
 1450              	.LFE597:
 1452              	 .comm colors,4,4
 1453              	 .comm modeColors,4,4
 1454              	 .comm specialColors,11,4
 1455              	 .section .text.osdConfig,"ax",%progbits
 1456              	 .align 2
 1457              	 .thumb
 1458              	 .thumb_func
 1460              	osdConfig:
 1461              	.LFB610:
 1462              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/osd.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #include "pg/pg.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_NUM_TIMER_TYPES 3
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** extern const char * const osdTimerSourceNames[OSD_NUM_TIMER_TYPES];
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_ELEMENT_BUFFER_LENGTH 32
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define VISIBLE_FLAG  0x0800
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define VISIBLE(x)    (x & VISIBLE_FLAG)
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POS_MAX   0x3FF
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POSCFG_MAX   (VISIBLE_FLAG|0x3FF) // For CLI values
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Character coordinate
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POSITION_BITS 5 // 5 bits gives a range 0-31
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POSITION_XY_MASK ((1 << OSD_POSITION_BITS) - 1)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POS(x,y)  ((x & OSD_POSITION_XY_MASK) | ((y & OSD_POSITION_XY_MASK) << OSD_POSITION_BIT
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_X(x)      (x & OSD_POSITION_XY_MASK)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_Y(x)      ((x >> OSD_POSITION_BITS) & OSD_POSITION_XY_MASK)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Timer configuration
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Stored as 15[alarm:8][precision:4][source:4]0
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_TIMER(src, prec, alarm) ((src & 0x0F) | ((prec & 0x0F) << 4) | ((alarm & 0xFF ) << 8))
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_TIMER_SRC(timer)        (timer & 0x0F)
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_TIMER_PRECISION(timer)  ((timer >> 4) & 0x0F)
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_TIMER_ALARM(timer)      ((timer >> 8) & 0xFF)
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // NB: to ensure backwards compatibility, new enum values must be appended at the end but before th
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // *** IMPORTANT ***
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // If you are adding additional elements that do not require any conditional display logic,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // you must add the elements to the osdElementDisplayOrder[] array in src/main/io/osd.c
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_RSSI_VALUE,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_MAIN_BATT_VOLTAGE,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_CROSSHAIRS,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ARTIFICIAL_HORIZON,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_HORIZON_SIDEBARS,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ITEM_TIMER_1,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ITEM_TIMER_2,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_FLYMODE,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_CRAFT_NAME,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_THROTTLE_POS,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_VTX_CHANNEL,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_CURRENT_DRAW,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_MAH_DRAWN,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_GPS_SPEED,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_GPS_SATS,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ALTITUDE,
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ROLL_PIDS,
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_PITCH_PIDS,
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_YAW_PIDS,
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_POWER,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_PIDRATE_PROFILE,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNINGS,
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_AVG_CELL_VOLTAGE,
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_GPS_LON,
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_GPS_LAT,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_DEBUG,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_PITCH_ANGLE,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ROLL_ANGLE,
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_MAIN_BATT_USAGE,
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_DISARMED,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_HOME_DIR,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_HOME_DIST,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_NUMERICAL_HEADING,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_NUMERICAL_VARIO,
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_COMPASS_BAR,
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ESC_TMP,
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ESC_RPM,
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_REMAINING_TIME_ESTIMATE,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_RTC_DATETIME,
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ADJUSTMENT_RANGE,
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_CORE_TEMPERATURE,
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ANTI_GRAVITY,
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_G_FORCE,
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ITEM_COUNT // MUST BE LAST
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_items_e;
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // *** IMPORTANT ***
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // The order of the OSD stats enumeration *must* match the order they're displayed on-screen
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // This is because the fields are presented in the configurator in the order of the enumeration
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // and we want the configuration order to match the on-screen display order.
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Changes to the stats display order *must* be implemented in the configurator otherwise the
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // stats selections will not be populated correctly and the settings will become corrupted.
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** //
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Also - if the stats are reordered then the PR version must be incremented. Otherwise there
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // is no indication that the stored config must be reset and the bitmapped values will be incorrect
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_RTC_DATE_TIME,
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_TIMER_1,
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_TIMER_2,
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MAX_SPEED,
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MAX_DISTANCE,
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MIN_BATTERY,
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_END_BATTERY,
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_BATTERY,
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MIN_RSSI,
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MAX_CURRENT,
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_USED_MAH,
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MAX_ALTITUDE,
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_BLACKBOX,
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_BLACKBOX_NUMBER,
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_COUNT // MUST BE LAST
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_stats_e;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Make sure the number of stats do not exceed the available 32bit storage
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** STATIC_ASSERT(OSD_STAT_COUNT <= 32, osdstats_overflow);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_UNIT_IMPERIAL,
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_UNIT_METRIC
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_unit_e;
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_1,
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_2,
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_COUNT
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_timer_e;
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_SRC_ON,
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_SRC_TOTAL_ARMED,
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_SRC_LAST_ARMED,
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_SRC_COUNT
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_timer_source_e;
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_PREC_SECOND,
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_PREC_HUNDREDTHS,
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_PREC_COUNT
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_timer_precision_e;
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_ARMING_DISABLE,
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_BATTERY_NOT_FULL,
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_BATTERY_WARNING,
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_BATTERY_CRITICAL,
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_VISUAL_BEEPER,
 162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_CRASH_FLIP,
 163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_ESC_FAIL,
 164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_CORE_TEMPERATURE,
 165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_RC_SMOOTHING,
 166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_COUNT // MUST BE LAST
 167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osdWarningsFlags_e;
 168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 169:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Make sure the number of warnings do not exceed the available 16bit storage
 170:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** STATIC_ASSERT(OSD_WARNING_COUNT <= 16, osdwarnings_overflow);
 171:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 172:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define ESC_RPM_ALARM_OFF -1
 173:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define ESC_TEMP_ALARM_OFF INT8_MIN
 174:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define ESC_CURRENT_ALARM_OFF -1
 175:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 176:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef struct osdConfig_s {
 177:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t item_pos[OSD_ITEM_COUNT];
 178:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 179:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     // Alarms
 180:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t cap_alarm;
 181:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t alt_alarm;
 182:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint8_t rssi_alarm;
 183:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 184:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     osd_unit_e units;
 185:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 186:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t timers[OSD_TIMER_COUNT];
 187:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t enabledWarnings;
 188:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 189:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint8_t ahMaxPitch;
 190:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint8_t ahMaxRoll;
 191:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint32_t enabled_stats;
 192:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     int8_t esc_temp_alarm;
 193:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     int16_t esc_rpm_alarm;
 194:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     int16_t esc_current_alarm;
 195:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint8_t core_temp_alarm;
 196:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osdConfig_t;
 197:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 198:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** PG_DECLARE(osdConfig_t, osdConfig);
 1463              	 .loc 14 198 0
 1464              	 .cfi_startproc
 1465              	 
 1466              	 
 1467              	 
 1468 0000 80B4     	 push {r7}
 1469              	.LCFI154:
 1470              	 .cfi_def_cfa_offset 4
 1471              	 .cfi_offset 7,-4
 1472 0002 00AF     	 add r7,sp,#0
 1473              	.LCFI155:
 1474              	 .cfi_def_cfa_register 7
 1475              	 .loc 14 198 0
 1476 0004 024B     	 ldr r3,.L139
 1477 0006 1846     	 mov r0,r3
 1478 0008 BD46     	 mov sp,r7
 1479              	.LCFI156:
 1480              	 .cfi_def_cfa_register 13
 1481              	 
 1482 000a 5DF8047B 	 ldr r7,[sp],#4
 1483              	.LCFI157:
 1484              	 .cfi_restore 7
 1485              	 .cfi_def_cfa_offset 0
 1486 000e 7047     	 bx lr
 1487              	.L140:
 1488              	 .align 2
 1489              	.L139:
 1490 0010 00000000 	 .word osdConfig_System
 1491              	 .cfi_endproc
 1492              	.LFE610:
 1494              	 .section .text.osdConfigMutable,"ax",%progbits
 1495              	 .align 2
 1496              	 .thumb
 1497              	 .thumb_func
 1499              	osdConfigMutable:
 1500              	.LFB611:
 1501              	 .loc 14 198 0
 1502              	 .cfi_startproc
 1503              	 
 1504              	 
 1505              	 
 1506 0000 80B4     	 push {r7}
 1507              	.LCFI158:
 1508              	 .cfi_def_cfa_offset 4
 1509              	 .cfi_offset 7,-4
 1510 0002 00AF     	 add r7,sp,#0
 1511              	.LCFI159:
 1512              	 .cfi_def_cfa_register 7
 1513              	 .loc 14 198 0
 1514 0004 024B     	 ldr r3,.L143
 1515 0006 1846     	 mov r0,r3
 1516 0008 BD46     	 mov sp,r7
 1517              	.LCFI160:
 1518              	 .cfi_def_cfa_register 13
 1519              	 
 1520 000a 5DF8047B 	 ldr r7,[sp],#4
 1521              	.LCFI161:
 1522              	 .cfi_restore 7
 1523              	 .cfi_def_cfa_offset 0
 1524 000e 7047     	 bx lr
 1525              	.L144:
 1526              	 .align 2
 1527              	.L143:
 1528 0010 00000000 	 .word osdConfig_System
 1529              	 .cfi_endproc
 1530              	.LFE611:
 1532              	 .section .text.serialConfig,"ax",%progbits
 1533              	 .align 2
 1534              	 .thumb
 1535              	 .thumb_func
 1537              	serialConfig:
 1538              	.LFB612:
 1539              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include <stdbool.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include "drivers/serial.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_UNUSED = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_NOT_SHARED,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_SHARED
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } portSharing_e;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_NONE                = 0,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_MSP                 = (1 << 0),  // 1
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_GPS                 = (1 << 1),  // 2
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_FRSKY_HUB = (1 << 2),  // 4
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_HOTT      = (1 << 3),  // 8
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_LTM       = (1 << 4),  // 16
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_SMARTPORT = (1 << 5),  // 32
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_RX_SERIAL           = (1 << 6),  // 64
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_BLACKBOX            = (1 << 7),  // 128
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_MAVLINK   = (1 << 9),  // 512
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_ESC_SENSOR          = (1 << 10), // 1024
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_VTX_SMARTAUDIO      = (1 << 11), // 2048
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_IBUS      = (1 << 12), // 4096
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_VTX_TRAMP           = (1 << 13), // 8192
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_RCDEVICE            = (1 << 14), // 16384
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_LIDAR_TF            = (1 << 15), // 32768
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortFunction_e;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK (FUNCTION_TELEMETRY_FRSKY_HUB | FUNCTION_TELEMETRY_
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define TELEMETRY_PORT_FUNCTIONS_MASK (TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK | FUNCTION_TELEMETRY
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_AUTO = 0,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_9600,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_19200,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_38400,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_57600,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_115200,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_230400,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_250000,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_400000,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_460800,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_500000,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_921600,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_1000000,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_1500000,
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_2000000,
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_2470000
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } baudRate_e;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** extern const uint32_t baudRates[];
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // serial port identifiers are now fixed, these values are used by MSP commands.
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_NONE = -1,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART1 = 0,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART2,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART3,
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_UART4,
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_UART5,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART6,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART7,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART8,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USB_VCP = 20,
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_SOFTSERIAL1 = 30,
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_SOFTSERIAL2,
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS1 = 40,
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS2,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS3,
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS4,
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS5,
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS6,
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortIdentifier_e;
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** extern const serialPortIdentifier_e serialPortIdentifiers[SERIAL_PORT_COUNT];
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define SERIAL_PORT_IDENTIFIER_TO_INDEX(x) (((x) <= SERIAL_PORT_USART8) ? (x) : (RESOURCE_SOFT_OFFS
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define SERIAL_PORT_IDENTIFIER_TO_UARTDEV(x) ((x) - SERIAL_PORT_USART1 + UARTDEV_1)
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // runtime
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialPortUsage_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPort_t *serialPort;
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortFunction_e function;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortIdentifier_e identifier;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortUsage_t;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** serialPort_t *findSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // configuration
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialPortConfig_s {
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint16_t functionMask;
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortIdentifier_e identifier;
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t msp_baudrateIndex;
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t gps_baudrateIndex;
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t blackbox_baudrateIndex;
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t telemetry_baudrateIndex; // not used for all telemetry systems, e.g. HoTT only works at
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortConfig_t;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialConfig_s {
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortConfig_t portConfigs[SERIAL_PORT_COUNT];
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint16_t serial_update_rate_hz;
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t reboot_character;               // which byte is used to reboot. Default 'R', could be 
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialConfig_t;
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** PG_DECLARE(serialConfig_t, serialConfig);
 1540              	 .loc 15 135 0
 1541              	 .cfi_startproc
 1542              	 
 1543              	 
 1544              	 
 1545 0000 80B4     	 push {r7}
 1546              	.LCFI162:
 1547              	 .cfi_def_cfa_offset 4
 1548              	 .cfi_offset 7,-4
 1549 0002 00AF     	 add r7,sp,#0
 1550              	.LCFI163:
 1551              	 .cfi_def_cfa_register 7
 1552              	 .loc 15 135 0
 1553 0004 024B     	 ldr r3,.L147
 1554 0006 1846     	 mov r0,r3
 1555 0008 BD46     	 mov sp,r7
 1556              	.LCFI164:
 1557              	 .cfi_def_cfa_register 13
 1558              	 
 1559 000a 5DF8047B 	 ldr r7,[sp],#4
 1560              	.LCFI165:
 1561              	 .cfi_restore 7
 1562              	 .cfi_def_cfa_offset 0
 1563 000e 7047     	 bx lr
 1564              	.L148:
 1565              	 .align 2
 1566              	.L147:
 1567 0010 00000000 	 .word serialConfig_System
 1568              	 .cfi_endproc
 1569              	.LFE612:
 1571              	 .section .text.vtxSettingsConfig,"ax",%progbits
 1572              	 .align 2
 1573              	 .thumb
 1574              	 .thumb_func
 1576              	vtxSettingsConfig:
 1577              	.LFB618:
 1578              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include "platform.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include "common/time.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include "pg/pg.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** typedef struct vtxSettingsConfig_s {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t band;           // 1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t channel;        // 1-8
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t power;          // 0 = lowest
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint16_t freq;          // sets freq in MHz if band=0
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint16_t pitModeFreq;   // sets out-of-range pitmode frequency
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t lowPowerDisarm; // min power while disarmed
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** } vtxSettingsConfig_t;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** PG_DECLARE(vtxSettingsConfig_t, vtxSettingsConfig);
 1579              	 .loc 16 38 0
 1580              	 .cfi_startproc
 1581              	 
 1582              	 
 1583              	 
 1584 0000 80B4     	 push {r7}
 1585              	.LCFI166:
 1586              	 .cfi_def_cfa_offset 4
 1587              	 .cfi_offset 7,-4
 1588 0002 00AF     	 add r7,sp,#0
 1589              	.LCFI167:
 1590              	 .cfi_def_cfa_register 7
 1591              	 .loc 16 38 0
 1592 0004 024B     	 ldr r3,.L151
 1593 0006 1846     	 mov r0,r3
 1594 0008 BD46     	 mov sp,r7
 1595              	.LCFI168:
 1596              	 .cfi_def_cfa_register 13
 1597              	 
 1598 000a 5DF8047B 	 ldr r7,[sp],#4
 1599              	.LCFI169:
 1600              	 .cfi_restore 7
 1601              	 .cfi_def_cfa_offset 0
 1602 000e 7047     	 bx lr
 1603              	.L152:
 1604              	 .align 2
 1605              	.L151:
 1606 0010 00000000 	 .word vtxSettingsConfig_System
 1607              	 .cfi_endproc
 1608              	.LFE618:
 1610              	 .section .text.vtxSettingsConfigMutable,"ax",%progbits
 1611              	 .align 2
 1612              	 .thumb
 1613              	 .thumb_func
 1615              	vtxSettingsConfigMutable:
 1616              	.LFB619:
 1617              	 .loc 16 38 0
 1618              	 .cfi_startproc
 1619              	 
 1620              	 
 1621              	 
 1622 0000 80B4     	 push {r7}
 1623              	.LCFI170:
 1624              	 .cfi_def_cfa_offset 4
 1625              	 .cfi_offset 7,-4
 1626 0002 00AF     	 add r7,sp,#0
 1627              	.LCFI171:
 1628              	 .cfi_def_cfa_register 7
 1629              	 .loc 16 38 0
 1630 0004 024B     	 ldr r3,.L155
 1631 0006 1846     	 mov r0,r3
 1632 0008 BD46     	 mov sp,r7
 1633              	.LCFI172:
 1634              	 .cfi_def_cfa_register 13
 1635              	 
 1636 000a 5DF8047B 	 ldr r7,[sp],#4
 1637              	.LCFI173:
 1638              	 .cfi_restore 7
 1639              	 .cfi_def_cfa_offset 0
 1640 000e 7047     	 bx lr
 1641              	.L156:
 1642              	 .align 2
 1643              	.L155:
 1644 0010 00000000 	 .word vtxSettingsConfig_System
 1645              	 .cfi_endproc
 1646              	.LFE619:
 1648              	 .section .text.rxConfig,"ax",%progbits
 1649              	 .align 2
 1650              	 .thumb
 1651              	 .thumb_func
 1653              	rxConfig:
 1654              	.LFB624:
 1655              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
 1656              	 .loc 17 61 0
 1657              	 .cfi_startproc
 1658              	 
 1659              	 
 1660              	 
 1661 0000 80B4     	 push {r7}
 1662              	.LCFI174:
 1663              	 .cfi_def_cfa_offset 4
 1664              	 .cfi_offset 7,-4
 1665 0002 00AF     	 add r7,sp,#0
 1666              	.LCFI175:
 1667              	 .cfi_def_cfa_register 7
 1668              	 .loc 17 61 0
 1669 0004 024B     	 ldr r3,.L159
 1670 0006 1846     	 mov r0,r3
 1671 0008 BD46     	 mov sp,r7
 1672              	.LCFI176:
 1673              	 .cfi_def_cfa_register 13
 1674              	 
 1675 000a 5DF8047B 	 ldr r7,[sp],#4
 1676              	.LCFI177:
 1677              	 .cfi_restore 7
 1678              	 .cfi_def_cfa_offset 0
 1679 000e 7047     	 bx lr
 1680              	.L160:
 1681              	 .align 2
 1682              	.L159:
 1683 0010 00000000 	 .word rxConfig_System
 1684              	 .cfi_endproc
 1685              	.LFE624:
 1687              	 .section .text.rxConfigMutable,"ax",%progbits
 1688              	 .align 2
 1689              	 .thumb
 1690              	 .thumb_func
 1692              	rxConfigMutable:
 1693              	.LFB625:
 1694              	 .loc 17 61 0
 1695              	 .cfi_startproc
 1696              	 
 1697              	 
 1698              	 
 1699 0000 80B4     	 push {r7}
 1700              	.LCFI178:
 1701              	 .cfi_def_cfa_offset 4
 1702              	 .cfi_offset 7,-4
 1703 0002 00AF     	 add r7,sp,#0
 1704              	.LCFI179:
 1705              	 .cfi_def_cfa_register 7
 1706              	 .loc 17 61 0
 1707 0004 024B     	 ldr r3,.L163
 1708 0006 1846     	 mov r0,r3
 1709 0008 BD46     	 mov sp,r7
 1710              	.LCFI180:
 1711              	 .cfi_def_cfa_register 13
 1712              	 
 1713 000a 5DF8047B 	 ldr r7,[sp],#4
 1714              	.LCFI181:
 1715              	 .cfi_restore 7
 1716              	 .cfi_def_cfa_offset 0
 1717 000e 7047     	 bx lr
 1718              	.L164:
 1719              	 .align 2
 1720              	.L163:
 1721 0010 00000000 	 .word rxConfig_System
 1722              	 .cfi_endproc
 1723              	.LFE625:
 1725              	 .section .text.rxFailsafeChannelConfigs,"ax",%progbits
 1726              	 .align 2
 1727              	 .thumb
 1728              	 .thumb_func
 1730              	rxFailsafeChannelConfigs:
 1731              	.LFB632:
 1732              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "pg/rx.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "drivers/io_types.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define STICK_CHANNEL_COUNT 4
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_RANGE_MIN 1000
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_RANGE_MAX 2000
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_RANGE_MIDDLE (PWM_RANGE_MIN + ((PWM_RANGE_MAX - PWM_RANGE_MIN) / 2))
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_PULSE_MIN   750       // minimum PWM pulse width which is considered valid
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_PULSE_MAX   2250      // maximum PWM pulse width which is considered valid
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RXFAIL_STEP_TO_CHANNEL_VALUE(step) (PWM_PULSE_MIN + 25 * step)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define CHANNEL_VALUE_TO_RXFAIL_STEP(channelValue) ((constrain(channelValue, PWM_PULSE_MIN, PWM_PUL
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_RXFAIL_RANGE_STEP ((PWM_PULSE_MAX - PWM_PULSE_MIN) / 25)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define DEFAULT_SERVO_MIN 1000
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define DEFAULT_SERVO_MIDDLE 1500
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define DEFAULT_SERVO_MAX 2000
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_PENDING = 0,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_COMPLETE = (1 << 0),
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_FAILSAFE = (1 << 1),
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_PROCESSING_REQUIRED = (1 << 2),
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_DROPPED = (1 << 3)
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFrameState_e;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SPEKTRUM1024 = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SPEKTRUM2048 = 1,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SBUS = 2,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SUMD = 3,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SUMH = 4,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_XBUS_MODE_B = 5,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_XBUS_MODE_B_RJ01 = 6,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_IBUS = 7,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_JETIEXBUS = 8,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_CRSF = 9,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SRXL = 10,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_TARGET_CUSTOM = 11,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_FPORT = 12,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } SerialRXType;
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT          12
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_COUNT  8
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RC_CHANNEL_COUNT              18
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define NON_AUX_CHANNEL_COUNT 4
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_AUX_CHANNEL_COUNT (MAX_SUPPORTED_RC_CHANNEL_COUNT - NON_AUX_CHANNEL_COUNT)
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #if MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_COUNT > MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_CO
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #else
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #endif
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** extern const char rcChannelLetters[];
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** extern int16_t rcData[MAX_SUPPORTED_RC_CHANNEL_COUNT];       // interval [1000;2000]
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RSSI_SCALE_MIN 1
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RSSI_SCALE_MAX 255
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RSSI_SCALE_DEFAULT 100
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_AUTO = 0,
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_HOLD,
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_SET,
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_INVALID
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFailsafeChannelMode_e;
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RX_FAILSAFE_MODE_COUNT 3
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_TYPE_FLIGHT = 0,
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_TYPE_AUX
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFailsafeChannelType_e;
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RX_FAILSAFE_TYPE_COUNT 2
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef struct rxFailsafeChannelConfig_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint8_t mode; // See rxFailsafeChannelMode_e
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint8_t step;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFailsafeChannelConfig_t;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** PG_DECLARE_ARRAY(rxFailsafeChannelConfig_t, MAX_SUPPORTED_RC_CHANNEL_COUNT, rxFailsafeChannelConfig
 1733              	 .loc 18 114 0
 1734              	 .cfi_startproc
 1735              	 
 1736              	 
 1737              	 
 1738 0000 80B4     	 push {r7}
 1739              	.LCFI182:
 1740              	 .cfi_def_cfa_offset 4
 1741              	 .cfi_offset 7,-4
 1742 0002 83B0     	 sub sp,sp,#12
 1743              	.LCFI183:
 1744              	 .cfi_def_cfa_offset 16
 1745 0004 00AF     	 add r7,sp,#0
 1746              	.LCFI184:
 1747              	 .cfi_def_cfa_register 7
 1748 0006 7860     	 str r0,[r7,#4]
 1749              	 .loc 18 114 0
 1750 0008 7B68     	 ldr r3,[r7,#4]
 1751 000a 5B00     	 lsls r3,r3,#1
 1752 000c 034A     	 ldr r2,.L167
 1753 000e 1344     	 add r3,r3,r2
 1754 0010 1846     	 mov r0,r3
 1755 0012 0C37     	 adds r7,r7,#12
 1756              	.LCFI185:
 1757              	 .cfi_def_cfa_offset 4
 1758 0014 BD46     	 mov sp,r7
 1759              	.LCFI186:
 1760              	 .cfi_def_cfa_register 13
 1761              	 
 1762 0016 5DF8047B 	 ldr r7,[sp],#4
 1763              	.LCFI187:
 1764              	 .cfi_restore 7
 1765              	 .cfi_def_cfa_offset 0
 1766 001a 7047     	 bx lr
 1767              	.L168:
 1768              	 .align 2
 1769              	.L167:
 1770 001c 00000000 	 .word rxFailsafeChannelConfigs_SystemArray
 1771              	 .cfi_endproc
 1772              	.LFE632:
 1774              	 .section .text.rxFailsafeChannelConfigsMutable,"ax",%progbits
 1775              	 .align 2
 1776              	 .thumb
 1777              	 .thumb_func
 1779              	rxFailsafeChannelConfigsMutable:
 1780              	.LFB633:
 1781              	 .loc 18 114 0
 1782              	 .cfi_startproc
 1783              	 
 1784              	 
 1785              	 
 1786 0000 80B4     	 push {r7}
 1787              	.LCFI188:
 1788              	 .cfi_def_cfa_offset 4
 1789              	 .cfi_offset 7,-4
 1790 0002 83B0     	 sub sp,sp,#12
 1791              	.LCFI189:
 1792              	 .cfi_def_cfa_offset 16
 1793 0004 00AF     	 add r7,sp,#0
 1794              	.LCFI190:
 1795              	 .cfi_def_cfa_register 7
 1796 0006 7860     	 str r0,[r7,#4]
 1797              	 .loc 18 114 0
 1798 0008 7B68     	 ldr r3,[r7,#4]
 1799 000a 5B00     	 lsls r3,r3,#1
 1800 000c 034A     	 ldr r2,.L171
 1801 000e 1344     	 add r3,r3,r2
 1802 0010 1846     	 mov r0,r3
 1803 0012 0C37     	 adds r7,r7,#12
 1804              	.LCFI191:
 1805              	 .cfi_def_cfa_offset 4
 1806 0014 BD46     	 mov sp,r7
 1807              	.LCFI192:
 1808              	 .cfi_def_cfa_register 13
 1809              	 
 1810 0016 5DF8047B 	 ldr r7,[sp],#4
 1811              	.LCFI193:
 1812              	 .cfi_restore 7
 1813              	 .cfi_def_cfa_offset 0
 1814 001a 7047     	 bx lr
 1815              	.L172:
 1816              	 .align 2
 1817              	.L171:
 1818 001c 00000000 	 .word rxFailsafeChannelConfigs_SystemArray
 1819              	 .cfi_endproc
 1820              	.LFE633:
 1822              	 .section .text.currentSensorADCConfig,"ax",%progbits
 1823              	 .align 2
 1824              	 .thumb
 1825              	 .thumb_func
 1827              	currentSensorADCConfig:
 1828              	.LFB638:
 1829              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** #include "current_ids.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef enum {
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_NONE = 0,
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_ADC,
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_VIRTUAL,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_ESC,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_MSP,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_COUNT
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeterSource_e;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** extern const char * const currentMeterSourceNames[CURRENT_METER_COUNT];
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeter_s {
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperage;           // current read by current sensor in centiampere (1/100th A)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperageLatest;     // current read by current sensor in centiampere (1/100th A) (unfil
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t mAhDrawn;           // milliampere hours drawn from the battery since start
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeter_t;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // WARNING - do not mix usage of CURRENT_SENSOR_* and CURRENT_METER_*, they are separate concerns.
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeterMAhDrawnState_s {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t mAhDrawn;           // milliampere hours drawn from the battery since start
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     float mAhDrawnF;
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeterMAhDrawnState_t;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // Sensors
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef enum {
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_VIRTUAL = 0,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_ADC,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_ESC,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_MSP
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensor_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // ADC
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeterADCState_s {
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     currentMeterMAhDrawnState_t mahDrawnState;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperage;           // current read by current sensor in centiampere (1/100th A)
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperageLatest;     // current read by current sensor in centiampere (1/100th A) (unfil
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeterADCState_t;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentSensorADCConfig_s {
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int16_t scale;              // scale the current sensor output voltage to milliamps. Value in m
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int16_t offset;             // offset of the current sensor in mA
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensorADCConfig_t;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** PG_DECLARE(currentSensorADCConfig_t, currentSensorADCConfig);
 1830              	 .loc 19 77 0
 1831              	 .cfi_startproc
 1832              	 
 1833              	 
 1834              	 
 1835 0000 80B4     	 push {r7}
 1836              	.LCFI194:
 1837              	 .cfi_def_cfa_offset 4
 1838              	 .cfi_offset 7,-4
 1839 0002 00AF     	 add r7,sp,#0
 1840              	.LCFI195:
 1841              	 .cfi_def_cfa_register 7
 1842              	 .loc 19 77 0
 1843 0004 024B     	 ldr r3,.L175
 1844 0006 1846     	 mov r0,r3
 1845 0008 BD46     	 mov sp,r7
 1846              	.LCFI196:
 1847              	 .cfi_def_cfa_register 13
 1848              	 
 1849 000a 5DF8047B 	 ldr r7,[sp],#4
 1850              	.LCFI197:
 1851              	 .cfi_restore 7
 1852              	 .cfi_def_cfa_offset 0
 1853 000e 7047     	 bx lr
 1854              	.L176:
 1855              	 .align 2
 1856              	.L175:
 1857 0010 00000000 	 .word currentSensorADCConfig_System
 1858              	 .cfi_endproc
 1859              	.LFE638:
 1861              	 .section .text.currentSensorADCConfigMutable,"ax",%progbits
 1862              	 .align 2
 1863              	 .thumb
 1864              	 .thumb_func
 1866              	currentSensorADCConfigMutable:
 1867              	.LFB639:
 1868              	 .loc 19 77 0
 1869              	 .cfi_startproc
 1870              	 
 1871              	 
 1872              	 
 1873 0000 80B4     	 push {r7}
 1874              	.LCFI198:
 1875              	 .cfi_def_cfa_offset 4
 1876              	 .cfi_offset 7,-4
 1877 0002 00AF     	 add r7,sp,#0
 1878              	.LCFI199:
 1879              	 .cfi_def_cfa_register 7
 1880              	 .loc 19 77 0
 1881 0004 024B     	 ldr r3,.L179
 1882 0006 1846     	 mov r0,r3
 1883 0008 BD46     	 mov sp,r7
 1884              	.LCFI200:
 1885              	 .cfi_def_cfa_register 13
 1886              	 
 1887 000a 5DF8047B 	 ldr r7,[sp],#4
 1888              	.LCFI201:
 1889              	 .cfi_restore 7
 1890              	 .cfi_def_cfa_offset 0
 1891 000e 7047     	 bx lr
 1892              	.L180:
 1893              	 .align 2
 1894              	.L179:
 1895 0010 00000000 	 .word currentSensorADCConfig_System
 1896              	 .cfi_endproc
 1897              	.LFE639:
 1899              	 .section .text.currentSensorVirtualConfig,"ax",%progbits
 1900              	 .align 2
 1901              	 .thumb
 1902              	 .thumb_func
 1904              	currentSensorVirtualConfig:
 1905              	.LFB640:
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // Virtual
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeterVirtualState_s {
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     currentMeterMAhDrawnState_t mahDrawnState;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperage;           // current read by current sensor in centiampere (1/100th A)
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensorVirtualState_t;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentSensorVirtualConfig_s {
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int16_t scale;              // scale the current sensor output voltage to milliamps. Value in 1
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     uint16_t offset;            // offset of the current sensor in millivolt steps
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensorVirtualConfig_t;
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** PG_DECLARE(currentSensorVirtualConfig_t, currentSensorVirtualConfig);
 1906              	 .loc 19 93 0
 1907              	 .cfi_startproc
 1908              	 
 1909              	 
 1910              	 
 1911 0000 80B4     	 push {r7}
 1912              	.LCFI202:
 1913              	 .cfi_def_cfa_offset 4
 1914              	 .cfi_offset 7,-4
 1915 0002 00AF     	 add r7,sp,#0
 1916              	.LCFI203:
 1917              	 .cfi_def_cfa_register 7
 1918              	 .loc 19 93 0
 1919 0004 024B     	 ldr r3,.L183
 1920 0006 1846     	 mov r0,r3
 1921 0008 BD46     	 mov sp,r7
 1922              	.LCFI204:
 1923              	 .cfi_def_cfa_register 13
 1924              	 
 1925 000a 5DF8047B 	 ldr r7,[sp],#4
 1926              	.LCFI205:
 1927              	 .cfi_restore 7
 1928              	 .cfi_def_cfa_offset 0
 1929 000e 7047     	 bx lr
 1930              	.L184:
 1931              	 .align 2
 1932              	.L183:
 1933 0010 00000000 	 .word currentSensorVirtualConfig_System
 1934              	 .cfi_endproc
 1935              	.LFE640:
 1937              	 .section .text.currentSensorVirtualConfigMutable,"ax",%progbits
 1938              	 .align 2
 1939              	 .thumb
 1940              	 .thumb_func
 1942              	currentSensorVirtualConfigMutable:
 1943              	.LFB641:
 1944              	 .loc 19 93 0
 1945              	 .cfi_startproc
 1946              	 
 1947              	 
 1948              	 
 1949 0000 80B4     	 push {r7}
 1950              	.LCFI206:
 1951              	 .cfi_def_cfa_offset 4
 1952              	 .cfi_offset 7,-4
 1953 0002 00AF     	 add r7,sp,#0
 1954              	.LCFI207:
 1955              	 .cfi_def_cfa_register 7
 1956              	 .loc 19 93 0
 1957 0004 024B     	 ldr r3,.L187
 1958 0006 1846     	 mov r0,r3
 1959 0008 BD46     	 mov sp,r7
 1960              	.LCFI208:
 1961              	 .cfi_def_cfa_register 13
 1962              	 
 1963 000a 5DF8047B 	 ldr r7,[sp],#4
 1964              	.LCFI209:
 1965              	 .cfi_restore 7
 1966              	 .cfi_def_cfa_offset 0
 1967 000e 7047     	 bx lr
 1968              	.L188:
 1969              	 .align 2
 1970              	.L187:
 1971 0010 00000000 	 .word currentSensorVirtualConfig_System
 1972              	 .cfi_endproc
 1973              	.LFE641:
 1975              	 .section .text.voltageSensorADCConfig,"ax",%progbits
 1976              	 .align 2
 1977              	 .thumb
 1978              	 .thumb_func
 1980              	voltageSensorADCConfig:
 1981              	.LFB642:
 1982              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #include "voltage_ids.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** // meters
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_METER_NONE = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_METER_ADC,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_METER_ESC,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_METER_COUNT
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageMeterSource_e;
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** extern const char * const voltageMeterSourceNames[VOLTAGE_METER_COUNT];
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** // WARNING - do not mix usage of VOLTAGE_METER_* and VOLTAGE_SENSOR_*, they are separate concerns.
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef struct voltageMeter_s {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint16_t filtered;                      // voltage in 0.1V steps
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint16_t unfiltered;                    // voltage in 0.1V steps
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     bool lowVoltageCutoff;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageMeter_t;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** // sensors
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef enum {
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_TYPE_ADC_RESISTOR_DIVIDER = 0,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_TYPE_ESC
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageSensorType_e;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** // adc sensors
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** //
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_SCALE_MIN 0
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_SCALE_MAX 255
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_DIVIDER_MIN 1
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_DIVIDER_MAX 255
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_MULTIPLIER_MIN 1
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_MULTIPLIER_MAX 255
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #ifndef VBAT_LPF_FREQ
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VBAT_LPF_FREQ  0.1f
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #endif
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #ifndef MAX_VOLTAGE_SENSOR_ADC
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define MAX_VOLTAGE_SENSOR_ADC 1 // VBAT - some boards have external, 12V, 9V and 5V meters.
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #endif
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** #define VOLTAGE_METER_ID_ESC_COUNT 12
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef enum {
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_ADC_VBAT = 0,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_ADC_12V = 1,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_ADC_9V = 2,
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     VOLTAGE_SENSOR_ADC_5V = 3
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageSensorADC_e; // see also voltageMeterADCtoIDMap
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** typedef struct voltageSensorADCConfig_s {
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint8_t vbatscale;                      // adjust this to match battery voltage to reported val
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint8_t vbatresdivval;                  // resistor divider R2 (default NAZE 10(K))
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h ****     uint8_t vbatresdivmultiplier;           // multiplier for scale (e.g. 2.5:1 ratio with multipli
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** } voltageSensorADCConfig_t;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** 
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\voltage.h **** PG_DECLARE_ARRAY(voltageSensorADCConfig_t, MAX_VOLTAGE_SENSOR_ADC, voltageSensorADCConfig);
 1983              	 .loc 20 94 0
 1984              	 .cfi_startproc
 1985              	 
 1986              	 
 1987              	 
 1988 0000 80B4     	 push {r7}
 1989              	.LCFI210:
 1990              	 .cfi_def_cfa_offset 4
 1991              	 .cfi_offset 7,-4
 1992 0002 83B0     	 sub sp,sp,#12
 1993              	.LCFI211:
 1994              	 .cfi_def_cfa_offset 16
 1995 0004 00AF     	 add r7,sp,#0
 1996              	.LCFI212:
 1997              	 .cfi_def_cfa_register 7
 1998 0006 7860     	 str r0,[r7,#4]
 1999              	 .loc 20 94 0
 2000 0008 7A68     	 ldr r2,[r7,#4]
 2001 000a 1346     	 mov r3,r2
 2002 000c 5B00     	 lsls r3,r3,#1
 2003 000e 1344     	 add r3,r3,r2
 2004 0010 034A     	 ldr r2,.L191
 2005 0012 1344     	 add r3,r3,r2
 2006 0014 1846     	 mov r0,r3
 2007 0016 0C37     	 adds r7,r7,#12
 2008              	.LCFI213:
 2009              	 .cfi_def_cfa_offset 4
 2010 0018 BD46     	 mov sp,r7
 2011              	.LCFI214:
 2012              	 .cfi_def_cfa_register 13
 2013              	 
 2014 001a 5DF8047B 	 ldr r7,[sp],#4
 2015              	.LCFI215:
 2016              	 .cfi_restore 7
 2017              	 .cfi_def_cfa_offset 0
 2018 001e 7047     	 bx lr
 2019              	.L192:
 2020              	 .align 2
 2021              	.L191:
 2022 0020 00000000 	 .word voltageSensorADCConfig_SystemArray
 2023              	 .cfi_endproc
 2024              	.LFE642:
 2026              	 .section .text.voltageSensorADCConfigMutable,"ax",%progbits
 2027              	 .align 2
 2028              	 .thumb
 2029              	 .thumb_func
 2031              	voltageSensorADCConfigMutable:
 2032              	.LFB643:
 2033              	 .loc 20 94 0
 2034              	 .cfi_startproc
 2035              	 
 2036              	 
 2037              	 
 2038 0000 80B4     	 push {r7}
 2039              	.LCFI216:
 2040              	 .cfi_def_cfa_offset 4
 2041              	 .cfi_offset 7,-4
 2042 0002 83B0     	 sub sp,sp,#12
 2043              	.LCFI217:
 2044              	 .cfi_def_cfa_offset 16
 2045 0004 00AF     	 add r7,sp,#0
 2046              	.LCFI218:
 2047              	 .cfi_def_cfa_register 7
 2048 0006 7860     	 str r0,[r7,#4]
 2049              	 .loc 20 94 0
 2050 0008 7A68     	 ldr r2,[r7,#4]
 2051 000a 1346     	 mov r3,r2
 2052 000c 5B00     	 lsls r3,r3,#1
 2053 000e 1344     	 add r3,r3,r2
 2054 0010 034A     	 ldr r2,.L195
 2055 0012 1344     	 add r3,r3,r2
 2056 0014 1846     	 mov r0,r3
 2057 0016 0C37     	 adds r7,r7,#12
 2058              	.LCFI219:
 2059              	 .cfi_def_cfa_offset 4
 2060 0018 BD46     	 mov sp,r7
 2061              	.LCFI220:
 2062              	 .cfi_def_cfa_register 13
 2063              	 
 2064 001a 5DF8047B 	 ldr r7,[sp],#4
 2065              	.LCFI221:
 2066              	 .cfi_restore 7
 2067              	 .cfi_def_cfa_offset 0
 2068 001e 7047     	 bx lr
 2069              	.L196:
 2070              	 .align 2
 2071              	.L195:
 2072 0020 00000000 	 .word voltageSensorADCConfig_SystemArray
 2073              	 .cfi_endproc
 2074              	.LFE643:
 2076              	 .section .text.batteryConfig,"ax",%progbits
 2077              	 .align 2
 2078              	 .thumb
 2079              	 .thumb_func
 2081              	batteryConfig:
 2082              	.LFB645:
 2083              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/time.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/current.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/voltage.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct batteryConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // voltage
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmaxcellvoltage;             // maximum voltage per cell, used for auto-detecting ba
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmincellvoltage;             // minimum voltage per cell, this triggers battery crit
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatwarningcellvoltage;         // warning voltage per cell, this triggers battery warn
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatnotpresentcellvoltage;      // Between vbatmaxcellvoltage and 2*this is considered 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t lvcPercentage;                  // Percentage of throttle when lvc is triggered
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     voltageMeterSource_e voltageMeterSource; // source of battery voltage meter used, either ADC or
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // current
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     currentMeterSource_e currentMeterSource; // source of battery current meter used, either ADC, V
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint16_t batteryCapacity;               // mAh
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // warnings / alerts
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useVBatAlerts;                     // Issue alerts based on VBat readings
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useConsumptionAlerts;              // Issue alerts based on total power consumption
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t consumptionWarningPercentage;   // Percentage of remaining capacity that should trigger
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbathysteresis;                 // hysteresis for alarm, default 1 = 0.1V
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatfullcellvoltage;            // Cell voltage at which the battery is deemed to be "f
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } batteryConfig_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct lowVoltageCutoff_s {
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool enabled;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t percentage;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     timeUs_t startTime;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } lowVoltageCutoff_t;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** PG_DECLARE(batteryConfig_t, batteryConfig);
 2084              	 .loc 21 59 0
 2085              	 .cfi_startproc
 2086              	 
 2087              	 
 2088              	 
 2089 0000 80B4     	 push {r7}
 2090              	.LCFI222:
 2091              	 .cfi_def_cfa_offset 4
 2092              	 .cfi_offset 7,-4
 2093 0002 00AF     	 add r7,sp,#0
 2094              	.LCFI223:
 2095              	 .cfi_def_cfa_register 7
 2096              	 .loc 21 59 0
 2097 0004 024B     	 ldr r3,.L199
 2098 0006 1846     	 mov r0,r3
 2099 0008 BD46     	 mov sp,r7
 2100              	.LCFI224:
 2101              	 .cfi_def_cfa_register 13
 2102              	 
 2103 000a 5DF8047B 	 ldr r7,[sp],#4
 2104              	.LCFI225:
 2105              	 .cfi_restore 7
 2106              	 .cfi_def_cfa_offset 0
 2107 000e 7047     	 bx lr
 2108              	.L200:
 2109              	 .align 2
 2110              	.L199:
 2111 0010 00000000 	 .word batteryConfig_System
 2112              	 .cfi_endproc
 2113              	.LFE645:
 2115              	 .section .text.batteryConfigMutable,"ax",%progbits
 2116              	 .align 2
 2117              	 .thumb
 2118              	 .thumb_func
 2120              	batteryConfigMutable:
 2121              	.LFB646:
 2122              	 .loc 21 59 0
 2123              	 .cfi_startproc
 2124              	 
 2125              	 
 2126              	 
 2127 0000 80B4     	 push {r7}
 2128              	.LCFI226:
 2129              	 .cfi_def_cfa_offset 4
 2130              	 .cfi_offset 7,-4
 2131 0002 00AF     	 add r7,sp,#0
 2132              	.LCFI227:
 2133              	 .cfi_def_cfa_register 7
 2134              	 .loc 21 59 0
 2135 0004 024B     	 ldr r3,.L203
 2136 0006 1846     	 mov r0,r3
 2137 0008 BD46     	 mov sp,r7
 2138              	.LCFI228:
 2139              	 .cfi_def_cfa_register 13
 2140              	 
 2141 000a 5DF8047B 	 ldr r7,[sp],#4
 2142              	.LCFI229:
 2143              	 .cfi_restore 7
 2144              	 .cfi_def_cfa_offset 0
 2145 000e 7047     	 bx lr
 2146              	.L204:
 2147              	 .align 2
 2148              	.L203:
 2149 0010 00000000 	 .word batteryConfig_System
 2150              	 .cfi_endproc
 2151              	.LFE646:
 2153              	 .section .text.accelerometerConfig,"ax",%progbits
 2154              	 .align 2
 2155              	 .thumb
 2156              	 .thumb_func
 2158              	accelerometerConfig:
 2159              	.LFB647:
 2160              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/acceleration.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "pg/pg.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "drivers/accgyro/accgyro.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** #include "sensors/sensors.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** // Type of accelerometer used/detected
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_DEFAULT,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_NONE,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ADXL345,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU6050,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MMA8452,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_BMA280,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_LSM303DLHC,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU6000,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU6500,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_MPU9250,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20601,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20602,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20608G,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20649,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_ICM20689,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_BMI160,
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     ACC_FAKE
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } accelerationSensor_e;
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef struct acc_s {
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     accDev_t dev;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     uint32_t accSamplingInterval;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     float accADC[XYZ_AXIS_COUNT];
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     bool isAccelUpdatedAtLeastOnce;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } acc_t;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** extern acc_t acc;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef struct rollAndPitchTrims_s {
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     int16_t roll;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     int16_t pitch;
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } rollAndPitchTrims_t_def;
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef union rollAndPitchTrims_u {
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     int16_t raw[2];
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     rollAndPitchTrims_t_def values;
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } rollAndPitchTrims_t;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** typedef struct accelerometerConfig_s {
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     uint16_t acc_lpf_hz;                    // cutoff frequency for the low pass filter used on the
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     sensor_align_e acc_align;               // acc alignment
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     uint8_t acc_hardware;                   // Which acc hardware to use on boards with more than o
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     bool acc_high_fsr;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     flightDynamicsTrims_t accZero;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h ****     rollAndPitchTrims_t accelerometerTrims;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** } accelerometerConfig_t;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\acceleration.h **** PG_DECLARE(accelerometerConfig_t, accelerometerConfig);
 2161              	 .loc 22 78 0
 2162              	 .cfi_startproc
 2163              	 
 2164              	 
 2165              	 
 2166 0000 80B4     	 push {r7}
 2167              	.LCFI230:
 2168              	 .cfi_def_cfa_offset 4
 2169              	 .cfi_offset 7,-4
 2170 0002 00AF     	 add r7,sp,#0
 2171              	.LCFI231:
 2172              	 .cfi_def_cfa_register 7
 2173              	 .loc 22 78 0
 2174 0004 024B     	 ldr r3,.L207
 2175 0006 1846     	 mov r0,r3
 2176 0008 BD46     	 mov sp,r7
 2177              	.LCFI232:
 2178              	 .cfi_def_cfa_register 13
 2179              	 
 2180 000a 5DF8047B 	 ldr r7,[sp],#4
 2181              	.LCFI233:
 2182              	 .cfi_restore 7
 2183              	 .cfi_def_cfa_offset 0
 2184 000e 7047     	 bx lr
 2185              	.L208:
 2186              	 .align 2
 2187              	.L207:
 2188 0010 00000000 	 .word accelerometerConfig_System
 2189              	 .cfi_endproc
 2190              	.LFE647:
 2192              	 .section .text.accelerometerConfigMutable,"ax",%progbits
 2193              	 .align 2
 2194              	 .thumb
 2195              	 .thumb_func
 2197              	accelerometerConfigMutable:
 2198              	.LFB648:
 2199              	 .loc 22 78 0
 2200              	 .cfi_startproc
 2201              	 
 2202              	 
 2203              	 
 2204 0000 80B4     	 push {r7}
 2205              	.LCFI234:
 2206              	 .cfi_def_cfa_offset 4
 2207              	 .cfi_offset 7,-4
 2208 0002 00AF     	 add r7,sp,#0
 2209              	.LCFI235:
 2210              	 .cfi_def_cfa_register 7
 2211              	 .loc 22 78 0
 2212 0004 024B     	 ldr r3,.L211
 2213 0006 1846     	 mov r0,r3
 2214 0008 BD46     	 mov sp,r7
 2215              	.LCFI236:
 2216              	 .cfi_def_cfa_register 13
 2217              	 
 2218 000a 5DF8047B 	 ldr r7,[sp],#4
 2219              	.LCFI237:
 2220              	 .cfi_restore 7
 2221              	 .cfi_def_cfa_offset 0
 2222 000e 7047     	 bx lr
 2223              	.L212:
 2224              	 .align 2
 2225              	.L211:
 2226 0010 00000000 	 .word accelerometerConfig_System
 2227              	 .cfi_endproc
 2228              	.LFE648:
 2230              	 .section .text.barometerConfig,"ax",%progbits
 2231              	 .align 2
 2232              	 .thumb
 2233              	 .thumb_func
 2235              	barometerConfig:
 2236              	.LFB649:
 2237              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/barometer.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** #include "drivers/barometer/barometer.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** typedef enum {
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_DEFAULT = 0,
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_NONE = 1,
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_BMP085 = 2,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_MS5611 = 3,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_BMP280 = 4,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_LPS = 5,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     BARO_QMP6988 = 6,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 	BARO_DPS310 = 7
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** } baroSensor_e;
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** #define BARO_SAMPLE_COUNT_MAX   48
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** typedef struct barometerConfig_s {
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_bustype;
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_spi_device;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     ioTag_t baro_spi_csn;                   // Also used as XCLR (positive logic) for BMP085
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_i2c_device;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_i2c_address;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_hardware;                  // Barometer hardware to use
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint8_t baro_sample_count;              // size of baro filter array
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint16_t baro_noise_lpf;                // additional LPF to reduce baro noise
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint16_t baro_cf_vel;                   // apply Complimentary Filter to keep the calculated ve
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h ****     uint16_t baro_cf_alt;                   // apply CF to use ACC for height estimation
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** } barometerConfig_t;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** 
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\barometer.h **** PG_DECLARE(barometerConfig_t, barometerConfig);
 2238              	 .loc 23 52 0
 2239              	 .cfi_startproc
 2240              	 
 2241              	 
 2242              	 
 2243 0000 80B4     	 push {r7}
 2244              	.LCFI238:
 2245              	 .cfi_def_cfa_offset 4
 2246              	 .cfi_offset 7,-4
 2247 0002 00AF     	 add r7,sp,#0
 2248              	.LCFI239:
 2249              	 .cfi_def_cfa_register 7
 2250              	 .loc 23 52 0
 2251 0004 024B     	 ldr r3,.L215
 2252 0006 1846     	 mov r0,r3
 2253 0008 BD46     	 mov sp,r7
 2254              	.LCFI240:
 2255              	 .cfi_def_cfa_register 13
 2256              	 
 2257 000a 5DF8047B 	 ldr r7,[sp],#4
 2258              	.LCFI241:
 2259              	 .cfi_restore 7
 2260              	 .cfi_def_cfa_offset 0
 2261 000e 7047     	 bx lr
 2262              	.L216:
 2263              	 .align 2
 2264              	.L215:
 2265 0010 00000000 	 .word barometerConfig_System
 2266              	 .cfi_endproc
 2267              	.LFE649:
 2269              	 .section .text.barometerConfigMutable,"ax",%progbits
 2270              	 .align 2
 2271              	 .thumb
 2272              	 .thumb_func
 2274              	barometerConfigMutable:
 2275              	.LFB650:
 2276              	 .loc 23 52 0
 2277              	 .cfi_startproc
 2278              	 
 2279              	 
 2280              	 
 2281 0000 80B4     	 push {r7}
 2282              	.LCFI242:
 2283              	 .cfi_def_cfa_offset 4
 2284              	 .cfi_offset 7,-4
 2285 0002 00AF     	 add r7,sp,#0
 2286              	.LCFI243:
 2287              	 .cfi_def_cfa_register 7
 2288              	 .loc 23 52 0
 2289 0004 024B     	 ldr r3,.L219
 2290 0006 1846     	 mov r0,r3
 2291 0008 BD46     	 mov sp,r7
 2292              	.LCFI244:
 2293              	 .cfi_def_cfa_register 13
 2294              	 
 2295 000a 5DF8047B 	 ldr r7,[sp],#4
 2296              	.LCFI245:
 2297              	 .cfi_restore 7
 2298              	 .cfi_def_cfa_offset 0
 2299 000e 7047     	 bx lr
 2300              	.L220:
 2301              	 .align 2
 2302              	.L219:
 2303 0010 00000000 	 .word barometerConfig_System
 2304              	 .cfi_endproc
 2305              	.LFE650:
 2307              	 .section .text.boardAlignment,"ax",%progbits
 2308              	 .align 2
 2309              	 .thumb
 2310              	 .thumb_func
 2312              	boardAlignment:
 2313              	.LFB651:
 2314              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/boardalignment.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** typedef struct boardAlignment_s {
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****     int32_t rollDegrees;
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****     int32_t pitchDegrees;
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h ****     int32_t yawDegrees;
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** } boardAlignment_t;
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\boardalignment.h **** PG_DECLARE(boardAlignment_t, boardAlignment);
 2315              	 .loc 24 31 0
 2316              	 .cfi_startproc
 2317              	 
 2318              	 
 2319              	 
 2320 0000 80B4     	 push {r7}
 2321              	.LCFI246:
 2322              	 .cfi_def_cfa_offset 4
 2323              	 .cfi_offset 7,-4
 2324 0002 00AF     	 add r7,sp,#0
 2325              	.LCFI247:
 2326              	 .cfi_def_cfa_register 7
 2327              	 .loc 24 31 0
 2328 0004 024B     	 ldr r3,.L223
 2329 0006 1846     	 mov r0,r3
 2330 0008 BD46     	 mov sp,r7
 2331              	.LCFI248:
 2332              	 .cfi_def_cfa_register 13
 2333              	 
 2334 000a 5DF8047B 	 ldr r7,[sp],#4
 2335              	.LCFI249:
 2336              	 .cfi_restore 7
 2337              	 .cfi_def_cfa_offset 0
 2338 000e 7047     	 bx lr
 2339              	.L224:
 2340              	 .align 2
 2341              	.L223:
 2342 0010 00000000 	 .word boardAlignment_System
 2343              	 .cfi_endproc
 2344              	.LFE651:
 2346              	 .section .text.boardAlignmentMutable,"ax",%progbits
 2347              	 .align 2
 2348              	 .thumb
 2349              	 .thumb_func
 2351              	boardAlignmentMutable:
 2352              	.LFB652:
 2353              	 .loc 24 31 0
 2354              	 .cfi_startproc
 2355              	 
 2356              	 
 2357              	 
 2358 0000 80B4     	 push {r7}
 2359              	.LCFI250:
 2360              	 .cfi_def_cfa_offset 4
 2361              	 .cfi_offset 7,-4
 2362 0002 00AF     	 add r7,sp,#0
 2363              	.LCFI251:
 2364              	 .cfi_def_cfa_register 7
 2365              	 .loc 24 31 0
 2366 0004 024B     	 ldr r3,.L227
 2367 0006 1846     	 mov r0,r3
 2368 0008 BD46     	 mov sp,r7
 2369              	.LCFI252:
 2370              	 .cfi_def_cfa_register 13
 2371              	 
 2372 000a 5DF8047B 	 ldr r7,[sp],#4
 2373              	.LCFI253:
 2374              	 .cfi_restore 7
 2375              	 .cfi_def_cfa_offset 0
 2376 000e 7047     	 bx lr
 2377              	.L228:
 2378              	 .align 2
 2379              	.L227:
 2380 0010 00000000 	 .word boardAlignment_System
 2381              	 .cfi_endproc
 2382              	.LFE652:
 2384              	 .section .text.compassConfig,"ax",%progbits
 2385              	 .align 2
 2386              	 .thumb
 2387              	 .thumb_func
 2389              	compassConfig:
 2390              	.LFB655:
 2391              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/compass.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "drivers/io_types.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "drivers/sensor.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** #include "sensors/sensors.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** // Type of magnetometer used/detected
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** typedef enum {
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_DEFAULT = 0,
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_NONE = 1,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_HMC5883 = 2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_AK8975 = 3,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_AK8963 = 4,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     MAG_QMC5883 = 5
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** } magSensor_e;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** typedef struct mag_s {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     float magADC[XYZ_AXIS_COUNT];
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     float magneticDeclination;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** } mag_t;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** extern mag_t mag;
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** typedef struct compassConfig_s {
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     int16_t mag_declination;                // Get your magnetic decliniation from here : http://ma
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****                                             // For example, -6deg 37min, = -637 Japan, format is [s
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     sensor_align_e mag_align;               // mag alignment
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_hardware;                   // Which mag hardware to use on boards with more than o
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_bustype;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_i2c_device;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_i2c_address;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     uint8_t mag_spi_device;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     ioTag_t mag_spi_csn;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     ioTag_t interruptTag;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h ****     flightDynamicsTrims_t magZero;
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** } compassConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\compass.h **** PG_DECLARE(compassConfig_t, compassConfig);
 2392              	 .loc 25 61 0
 2393              	 .cfi_startproc
 2394              	 
 2395              	 
 2396              	 
 2397 0000 80B4     	 push {r7}
 2398              	.LCFI254:
 2399              	 .cfi_def_cfa_offset 4
 2400              	 .cfi_offset 7,-4
 2401 0002 00AF     	 add r7,sp,#0
 2402              	.LCFI255:
 2403              	 .cfi_def_cfa_register 7
 2404              	 .loc 25 61 0
 2405 0004 024B     	 ldr r3,.L231
 2406 0006 1846     	 mov r0,r3
 2407 0008 BD46     	 mov sp,r7
 2408              	.LCFI256:
 2409              	 .cfi_def_cfa_register 13
 2410              	 
 2411 000a 5DF8047B 	 ldr r7,[sp],#4
 2412              	.LCFI257:
 2413              	 .cfi_restore 7
 2414              	 .cfi_def_cfa_offset 0
 2415 000e 7047     	 bx lr
 2416              	.L232:
 2417              	 .align 2
 2418              	.L231:
 2419 0010 00000000 	 .word compassConfig_System
 2420              	 .cfi_endproc
 2421              	.LFE655:
 2423              	 .section .text.compassConfigMutable,"ax",%progbits
 2424              	 .align 2
 2425              	 .thumb
 2426              	 .thumb_func
 2428              	compassConfigMutable:
 2429              	.LFB656:
 2430              	 .loc 25 61 0
 2431              	 .cfi_startproc
 2432              	 
 2433              	 
 2434              	 
 2435 0000 80B4     	 push {r7}
 2436              	.LCFI258:
 2437              	 .cfi_def_cfa_offset 4
 2438              	 .cfi_offset 7,-4
 2439 0002 00AF     	 add r7,sp,#0
 2440              	.LCFI259:
 2441              	 .cfi_def_cfa_register 7
 2442              	 .loc 25 61 0
 2443 0004 024B     	 ldr r3,.L235
 2444 0006 1846     	 mov r0,r3
 2445 0008 BD46     	 mov sp,r7
 2446              	.LCFI260:
 2447              	 .cfi_def_cfa_register 13
 2448              	 
 2449 000a 5DF8047B 	 ldr r7,[sp],#4
 2450              	.LCFI261:
 2451              	 .cfi_restore 7
 2452              	 .cfi_def_cfa_offset 0
 2453 000e 7047     	 bx lr
 2454              	.L236:
 2455              	 .align 2
 2456              	.L235:
 2457 0010 00000000 	 .word compassConfig_System
 2458              	 .cfi_endproc
 2459              	.LFE656:
 2461              	 .section .rodata
 2462              	 .align 2
 2463              	.LC0:
 2464 0000 434C464C 	 .ascii "CLFL\000"
 2464      00
 2465 0005 000000   	 .section .rodata.flightControllerIdentifier,"a",%progbits
 2466              	 .align 2
 2469              	flightControllerIdentifier:
 2470 0000 00000000 	 .word .LC0
 2471              	 .section .bss.rebootMode,"aw",%nobits
 2474              	rebootMode:
 2475 0000 00       	 .space 1
 2476              	 .comm escMode,1,1
 2477              	 .comm escPortIndex,1,1
 2478              	 .section .text.mspFc4waySerialCommand,"ax",%progbits
 2479              	 .align 2
 2480              	 .thumb
 2481              	 .thumb_func
 2483              	mspFc4waySerialCommand:
 2484              	.LFB661:
 2485              	 .file 26 "../cleanflight/src/main/interface/msp.c"
   1:../cleanflight/src/main/interface/msp.c **** /*
   2:../cleanflight/src/main/interface/msp.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/interface/msp.c ****  *
   4:../cleanflight/src/main/interface/msp.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/interface/msp.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/interface/msp.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/interface/msp.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/interface/msp.c ****  * any later version.
   9:../cleanflight/src/main/interface/msp.c ****  *
  10:../cleanflight/src/main/interface/msp.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/interface/msp.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/interface/msp.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/interface/msp.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/interface/msp.c ****  *
  15:../cleanflight/src/main/interface/msp.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/interface/msp.c ****  * along with this software.
  17:../cleanflight/src/main/interface/msp.c ****  *
  18:../cleanflight/src/main/interface/msp.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/interface/msp.c ****  */
  20:../cleanflight/src/main/interface/msp.c **** 
  21:../cleanflight/src/main/interface/msp.c **** #include <stdbool.h>
  22:../cleanflight/src/main/interface/msp.c **** #include <stdint.h>
  23:../cleanflight/src/main/interface/msp.c **** #include <string.h>
  24:../cleanflight/src/main/interface/msp.c **** #include <math.h>
  25:../cleanflight/src/main/interface/msp.c **** #include <stdlib.h>
  26:../cleanflight/src/main/interface/msp.c **** 
  27:../cleanflight/src/main/interface/msp.c **** #include "platform.h"
  28:../cleanflight/src/main/interface/msp.c **** 
  29:../cleanflight/src/main/interface/msp.c **** #include "blackbox/blackbox.h"
  30:../cleanflight/src/main/interface/msp.c **** 
  31:../cleanflight/src/main/interface/msp.c **** #include "build/build_config.h"
  32:../cleanflight/src/main/interface/msp.c **** #include "build/debug.h"
  33:../cleanflight/src/main/interface/msp.c **** #include "build/version.h"
  34:../cleanflight/src/main/interface/msp.c **** 
  35:../cleanflight/src/main/interface/msp.c **** #include "common/axis.h"
  36:../cleanflight/src/main/interface/msp.c **** #include "common/bitarray.h"
  37:../cleanflight/src/main/interface/msp.c **** #include "common/color.h"
  38:../cleanflight/src/main/interface/msp.c **** #include "common/maths.h"
  39:../cleanflight/src/main/interface/msp.c **** #include "common/streambuf.h"
  40:../cleanflight/src/main/interface/msp.c **** #include "common/huffman.h"
  41:../cleanflight/src/main/interface/msp.c **** 
  42:../cleanflight/src/main/interface/msp.c **** #include "config/config_eeprom.h"
  43:../cleanflight/src/main/interface/msp.c **** #include "config/feature.h"
  44:../cleanflight/src/main/interface/msp.c **** 
  45:../cleanflight/src/main/interface/msp.c **** #include "drivers/accgyro/accgyro.h"
  46:../cleanflight/src/main/interface/msp.c **** #include "drivers/bus_i2c.h"
  47:../cleanflight/src/main/interface/msp.c **** #include "drivers/camera_control.h"
  48:../cleanflight/src/main/interface/msp.c **** #include "drivers/compass/compass.h"
  49:../cleanflight/src/main/interface/msp.c **** #include "drivers/flash.h"
  50:../cleanflight/src/main/interface/msp.c **** #include "drivers/io.h"
  51:../cleanflight/src/main/interface/msp.c **** #include "drivers/max7456.h"
  52:../cleanflight/src/main/interface/msp.c **** #include "drivers/pwm_output.h"
  53:../cleanflight/src/main/interface/msp.c **** #include "drivers/sdcard.h"
  54:../cleanflight/src/main/interface/msp.c **** #include "drivers/serial.h"
  55:../cleanflight/src/main/interface/msp.c **** #include "drivers/serial_escserial.h"
  56:../cleanflight/src/main/interface/msp.c **** #include "drivers/system.h"
  57:../cleanflight/src/main/interface/msp.c **** #include "drivers/transponder_ir.h"
  58:../cleanflight/src/main/interface/msp.c **** #include "drivers/usb_msc.h"
  59:../cleanflight/src/main/interface/msp.c **** #include "drivers/vtx_common.h"
  60:../cleanflight/src/main/interface/msp.c **** 
  61:../cleanflight/src/main/interface/msp.c **** #include "fc/board_info.h"
  62:../cleanflight/src/main/interface/msp.c **** #include "fc/config.h"
  63:../cleanflight/src/main/interface/msp.c **** #include "fc/controlrate_profile.h"
  64:../cleanflight/src/main/interface/msp.c **** #include "fc/fc_core.h"
  65:../cleanflight/src/main/interface/msp.c **** #include "fc/fc_rc.h"
  66:../cleanflight/src/main/interface/msp.c **** #include "fc/rc_adjustments.h"
  67:../cleanflight/src/main/interface/msp.c **** #include "fc/rc_controls.h"
  68:../cleanflight/src/main/interface/msp.c **** #include "fc/rc_modes.h"
  69:../cleanflight/src/main/interface/msp.c **** #include "fc/runtime_config.h"
  70:../cleanflight/src/main/interface/msp.c **** 
  71:../cleanflight/src/main/interface/msp.c **** #include "flight/position.h"
  72:../cleanflight/src/main/interface/msp.c **** #include "flight/failsafe.h"
  73:../cleanflight/src/main/interface/msp.c **** #include "flight/imu.h"
  74:../cleanflight/src/main/interface/msp.c **** #include "flight/mixer.h"
  75:../cleanflight/src/main/interface/msp.c **** #include "flight/pid.h"
  76:../cleanflight/src/main/interface/msp.c **** #include "flight/servos.h"
  77:../cleanflight/src/main/interface/msp.c **** 
  78:../cleanflight/src/main/interface/msp.c **** #include "interface/msp.h"
  79:../cleanflight/src/main/interface/msp.c **** #include "interface/msp_box.h"
  80:../cleanflight/src/main/interface/msp.c **** #include "interface/msp_protocol.h"
  81:../cleanflight/src/main/interface/msp.c **** 
  82:../cleanflight/src/main/interface/msp.c **** #include "io/asyncfatfs/asyncfatfs.h"
  83:../cleanflight/src/main/interface/msp.c **** #include "io/beeper.h"
  84:../cleanflight/src/main/interface/msp.c **** #include "io/flashfs.h"
  85:../cleanflight/src/main/interface/msp.c **** #include "io/gimbal.h"
  86:../cleanflight/src/main/interface/msp.c **** #include "io/gps.h"
  87:../cleanflight/src/main/interface/msp.c **** #include "io/ledstrip.h"
  88:../cleanflight/src/main/interface/msp.c **** #include "io/motors.h"
  89:../cleanflight/src/main/interface/msp.c **** #include "io/osd.h"
  90:../cleanflight/src/main/interface/msp.c **** #include "io/osd_slave.h"
  91:../cleanflight/src/main/interface/msp.c **** #include "io/serial.h"
  92:../cleanflight/src/main/interface/msp.c **** #include "io/serial_4way.h"
  93:../cleanflight/src/main/interface/msp.c **** #include "io/servos.h"
  94:../cleanflight/src/main/interface/msp.c **** #include "io/transponder_ir.h"
  95:../cleanflight/src/main/interface/msp.c **** #include "io/usb_msc.h"
  96:../cleanflight/src/main/interface/msp.c **** #include "io/vtx_control.h"
  97:../cleanflight/src/main/interface/msp.c **** #include "io/vtx.h"
  98:../cleanflight/src/main/interface/msp.c **** #include "io/vtx_string.h"
  99:../cleanflight/src/main/interface/msp.c **** 
 100:../cleanflight/src/main/interface/msp.c **** #include "msp/msp_serial.h"
 101:../cleanflight/src/main/interface/msp.c **** 
 102:../cleanflight/src/main/interface/msp.c **** #include "pg/beeper.h"
 103:../cleanflight/src/main/interface/msp.c **** #include "pg/board.h"
 104:../cleanflight/src/main/interface/msp.c **** #include "pg/pg.h"
 105:../cleanflight/src/main/interface/msp.c **** #include "pg/pg_ids.h"
 106:../cleanflight/src/main/interface/msp.c **** #include "pg/rx.h"
 107:../cleanflight/src/main/interface/msp.c **** #include "pg/rx_spi.h"
 108:../cleanflight/src/main/interface/msp.c **** #include "pg/usb.h"
 109:../cleanflight/src/main/interface/msp.c **** #include "pg/vcd.h"
 110:../cleanflight/src/main/interface/msp.c **** 
 111:../cleanflight/src/main/interface/msp.c **** #include "rx/rx.h"
 112:../cleanflight/src/main/interface/msp.c **** #include "rx/msp.h"
 113:../cleanflight/src/main/interface/msp.c **** 
 114:../cleanflight/src/main/interface/msp.c **** #include "scheduler/scheduler.h"
 115:../cleanflight/src/main/interface/msp.c **** 
 116:../cleanflight/src/main/interface/msp.c **** #include "sensors/battery.h"
 117:../cleanflight/src/main/interface/msp.c **** 
 118:../cleanflight/src/main/interface/msp.c **** #include "sensors/acceleration.h"
 119:../cleanflight/src/main/interface/msp.c **** #include "sensors/barometer.h"
 120:../cleanflight/src/main/interface/msp.c **** #include "sensors/boardalignment.h"
 121:../cleanflight/src/main/interface/msp.c **** #include "sensors/esc_sensor.h"
 122:../cleanflight/src/main/interface/msp.c **** #include "sensors/compass.h"
 123:../cleanflight/src/main/interface/msp.c **** #include "sensors/gyro.h"
 124:../cleanflight/src/main/interface/msp.c **** #include "sensors/rangefinder.h"
 125:../cleanflight/src/main/interface/msp.c **** #include "sensors/sensors.h"
 126:../cleanflight/src/main/interface/msp.c **** 
 127:../cleanflight/src/main/interface/msp.c **** #include "telemetry/telemetry.h"
 128:../cleanflight/src/main/interface/msp.c **** 
 129:../cleanflight/src/main/interface/msp.c **** #ifdef USE_HARDWARE_REVISION_DETECTION
 130:../cleanflight/src/main/interface/msp.c **** #include "hardware_revision.h"
 131:../cleanflight/src/main/interface/msp.c **** #endif
 132:../cleanflight/src/main/interface/msp.c **** 
 133:../cleanflight/src/main/interface/msp.c **** static const char * const flightControllerIdentifier = CLEANFLIGHT_IDENTIFIER; // 4 UPPER CASE alph
 134:../cleanflight/src/main/interface/msp.c **** 
 135:../cleanflight/src/main/interface/msp.c **** enum {
 136:../cleanflight/src/main/interface/msp.c ****     MSP_REBOOT_FIRMWARE = 0,
 137:../cleanflight/src/main/interface/msp.c ****     MSP_REBOOT_BOOTLOADER,
 138:../cleanflight/src/main/interface/msp.c ****     MSP_REBOOT_MSC,
 139:../cleanflight/src/main/interface/msp.c ****     MSP_REBOOT_COUNT,
 140:../cleanflight/src/main/interface/msp.c **** };
 141:../cleanflight/src/main/interface/msp.c **** 
 142:../cleanflight/src/main/interface/msp.c **** static uint8_t rebootMode;
 143:../cleanflight/src/main/interface/msp.c **** 
 144:../cleanflight/src/main/interface/msp.c **** #ifndef USE_OSD_SLAVE
 145:../cleanflight/src/main/interface/msp.c **** 
 146:../cleanflight/src/main/interface/msp.c **** typedef enum {
 147:../cleanflight/src/main/interface/msp.c ****     MSP_SDCARD_STATE_NOT_PRESENT = 0,
 148:../cleanflight/src/main/interface/msp.c ****     MSP_SDCARD_STATE_FATAL       = 1,
 149:../cleanflight/src/main/interface/msp.c ****     MSP_SDCARD_STATE_CARD_INIT   = 2,
 150:../cleanflight/src/main/interface/msp.c ****     MSP_SDCARD_STATE_FS_INIT     = 3,
 151:../cleanflight/src/main/interface/msp.c ****     MSP_SDCARD_STATE_READY       = 4
 152:../cleanflight/src/main/interface/msp.c **** } mspSDCardState_e;
 153:../cleanflight/src/main/interface/msp.c **** 
 154:../cleanflight/src/main/interface/msp.c **** typedef enum {
 155:../cleanflight/src/main/interface/msp.c ****     MSP_SDCARD_FLAG_SUPPORTTED   = 1
 156:../cleanflight/src/main/interface/msp.c **** } mspSDCardFlags_e;
 157:../cleanflight/src/main/interface/msp.c **** 
 158:../cleanflight/src/main/interface/msp.c **** typedef enum {
 159:../cleanflight/src/main/interface/msp.c ****     MSP_FLASHFS_FLAG_READY       = 1,
 160:../cleanflight/src/main/interface/msp.c ****     MSP_FLASHFS_FLAG_SUPPORTED  = 2
 161:../cleanflight/src/main/interface/msp.c **** } mspFlashFsFlags_e;
 162:../cleanflight/src/main/interface/msp.c **** 
 163:../cleanflight/src/main/interface/msp.c **** #define RATEPROFILE_MASK (1 << 7)
 164:../cleanflight/src/main/interface/msp.c **** #endif //USE_OSD_SLAVE
 165:../cleanflight/src/main/interface/msp.c **** 
 166:../cleanflight/src/main/interface/msp.c **** #define RTC_NOT_SUPPORTED 0xff
 167:../cleanflight/src/main/interface/msp.c **** 
 168:../cleanflight/src/main/interface/msp.c **** #ifdef USE_SERIAL_4WAY_BLHELI_INTERFACE
 169:../cleanflight/src/main/interface/msp.c **** #define ESC_4WAY 0xff
 170:../cleanflight/src/main/interface/msp.c **** 
 171:../cleanflight/src/main/interface/msp.c **** uint8_t escMode;
 172:../cleanflight/src/main/interface/msp.c **** uint8_t escPortIndex;
 173:../cleanflight/src/main/interface/msp.c **** 
 174:../cleanflight/src/main/interface/msp.c **** #ifdef USE_ESCSERIAL
 175:../cleanflight/src/main/interface/msp.c **** static void mspEscPassthroughFn(serialPort_t *serialPort)
 176:../cleanflight/src/main/interface/msp.c **** {
 177:../cleanflight/src/main/interface/msp.c ****     escEnablePassthrough(serialPort, escPortIndex, escMode);
 178:../cleanflight/src/main/interface/msp.c **** }
 179:../cleanflight/src/main/interface/msp.c **** #endif
 180:../cleanflight/src/main/interface/msp.c **** 
 181:../cleanflight/src/main/interface/msp.c **** static void mspFc4waySerialCommand(sbuf_t *dst, sbuf_t *src, mspPostProcessFnPtr *mspPostProcessFn)
 182:../cleanflight/src/main/interface/msp.c **** {
 2486              	 .loc 26 182 0
 2487              	 .cfi_startproc
 2488              	 
 2489              	 
 2490 0000 80B5     	 push {r7,lr}
 2491              	.LCFI262:
 2492              	 .cfi_def_cfa_offset 8
 2493              	 .cfi_offset 7,-8
 2494              	 .cfi_offset 14,-4
 2495 0002 86B0     	 sub sp,sp,#24
 2496              	.LCFI263:
 2497              	 .cfi_def_cfa_offset 32
 2498 0004 00AF     	 add r7,sp,#0
 2499              	.LCFI264:
 2500              	 .cfi_def_cfa_register 7
 2501 0006 F860     	 str r0,[r7,#12]
 2502 0008 B960     	 str r1,[r7,#8]
 2503 000a 7A60     	 str r2,[r7,#4]
 183:../cleanflight/src/main/interface/msp.c ****     const unsigned int dataSize = sbufBytesRemaining(src);
 2504              	 .loc 26 183 0
 2505 000c B868     	 ldr r0,[r7,#8]
 2506 000e FFF7FEFF 	 bl sbufBytesRemaining
 2507 0012 0346     	 mov r3,r0
 2508 0014 7B61     	 str r3,[r7,#20]
 184:../cleanflight/src/main/interface/msp.c ****     if (dataSize == 0) {
 2509              	 .loc 26 184 0
 2510 0016 7B69     	 ldr r3,[r7,#20]
 2511 0018 002B     	 cmp r3,#0
 2512 001a 03D1     	 bne .L238
 185:../cleanflight/src/main/interface/msp.c ****         // Legacy format
 186:../cleanflight/src/main/interface/msp.c **** 
 187:../cleanflight/src/main/interface/msp.c ****         escMode = ESC_4WAY;
 2513              	 .loc 26 187 0
 2514 001c 154B     	 ldr r3,.L245
 2515 001e FF22     	 movs r2,#255
 2516 0020 1A70     	 strb r2,[r3]
 2517 0022 0DE0     	 b .L239
 2518              	.L238:
 188:../cleanflight/src/main/interface/msp.c ****     } else {
 189:../cleanflight/src/main/interface/msp.c ****         escMode = sbufReadU8(src);
 2519              	 .loc 26 189 0
 2520 0024 B868     	 ldr r0,[r7,#8]
 2521 0026 FFF7FEFF 	 bl sbufReadU8
 2522 002a 0346     	 mov r3,r0
 2523 002c 1A46     	 mov r2,r3
 2524 002e 114B     	 ldr r3,.L245
 2525 0030 1A70     	 strb r2,[r3]
 190:../cleanflight/src/main/interface/msp.c ****         escPortIndex = sbufReadU8(src);
 2526              	 .loc 26 190 0
 2527 0032 B868     	 ldr r0,[r7,#8]
 2528 0034 FFF7FEFF 	 bl sbufReadU8
 2529 0038 0346     	 mov r3,r0
 2530 003a 1A46     	 mov r2,r3
 2531 003c 0E4B     	 ldr r3,.L245+4
 2532 003e 1A70     	 strb r2,[r3]
 2533              	.L239:
 191:../cleanflight/src/main/interface/msp.c ****     }
 192:../cleanflight/src/main/interface/msp.c **** 
 193:../cleanflight/src/main/interface/msp.c ****     switch (escMode) {
 2534              	 .loc 26 193 0
 2535 0040 0C4B     	 ldr r3,.L245
 2536 0042 1B78     	 ldrb r3,[r3]
 2537 0044 FF2B     	 cmp r3,#255
 2538 0046 0ED1     	 bne .L244
 194:../cleanflight/src/main/interface/msp.c ****     case ESC_4WAY:
 195:../cleanflight/src/main/interface/msp.c ****         // get channel number
 196:../cleanflight/src/main/interface/msp.c ****         // switch all motor lines HI
 197:../cleanflight/src/main/interface/msp.c ****         // reply with the count of ESC found
 198:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, esc4wayInit());
 2539              	 .loc 26 198 0
 2540 0048 FFF7FEFF 	 bl esc4wayInit
 2541 004c 0346     	 mov r3,r0
 2542 004e F868     	 ldr r0,[r7,#12]
 2543 0050 1946     	 mov r1,r3
 2544 0052 FFF7FEFF 	 bl sbufWriteU8
 199:../cleanflight/src/main/interface/msp.c **** 
 200:../cleanflight/src/main/interface/msp.c ****         if (mspPostProcessFn) {
 2545              	 .loc 26 200 0
 2546 0056 7B68     	 ldr r3,[r7,#4]
 2547 0058 002B     	 cmp r3,#0
 2548 005a 03D0     	 beq .L242
 201:../cleanflight/src/main/interface/msp.c ****             *mspPostProcessFn = esc4wayProcess;
 2549              	 .loc 26 201 0
 2550 005c 7B68     	 ldr r3,[r7,#4]
 2551 005e 074A     	 ldr r2,.L245+8
 2552 0060 1A60     	 str r2,[r3]
 202:../cleanflight/src/main/interface/msp.c ****         }
 203:../cleanflight/src/main/interface/msp.c ****         break;
 2553              	 .loc 26 203 0
 2554 0062 04E0     	 b .L237
 2555              	.L242:
 2556 0064 03E0     	 b .L237
 2557              	.L244:
 204:../cleanflight/src/main/interface/msp.c **** 
 205:../cleanflight/src/main/interface/msp.c **** #ifdef USE_ESCSERIAL
 206:../cleanflight/src/main/interface/msp.c ****     case PROTOCOL_SIMONK:
 207:../cleanflight/src/main/interface/msp.c ****     case PROTOCOL_BLHELI:
 208:../cleanflight/src/main/interface/msp.c ****     case PROTOCOL_KISS:
 209:../cleanflight/src/main/interface/msp.c ****     case PROTOCOL_KISSALL:
 210:../cleanflight/src/main/interface/msp.c ****     case PROTOCOL_CASTLE:
 211:../cleanflight/src/main/interface/msp.c ****         if (escPortIndex < getMotorCount() || (escMode == PROTOCOL_KISS && escPortIndex == ALL_MOTO
 212:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, 1);
 213:../cleanflight/src/main/interface/msp.c **** 
 214:../cleanflight/src/main/interface/msp.c ****             if (mspPostProcessFn) {
 215:../cleanflight/src/main/interface/msp.c ****                 *mspPostProcessFn = mspEscPassthroughFn;
 216:../cleanflight/src/main/interface/msp.c ****             }
 217:../cleanflight/src/main/interface/msp.c **** 
 218:../cleanflight/src/main/interface/msp.c ****             break;
 219:../cleanflight/src/main/interface/msp.c ****         }
 220:../cleanflight/src/main/interface/msp.c ****         FALLTHROUGH;
 221:../cleanflight/src/main/interface/msp.c **** #endif
 222:../cleanflight/src/main/interface/msp.c ****     default:
 223:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
 2558              	 .loc 26 223 0
 2559 0066 F868     	 ldr r0,[r7,#12]
 2560 0068 0021     	 movs r1,#0
 2561 006a FFF7FEFF 	 bl sbufWriteU8
 2562              	.L237:
 224:../cleanflight/src/main/interface/msp.c ****     }
 225:../cleanflight/src/main/interface/msp.c **** }
 2563              	 .loc 26 225 0
 2564 006e 1837     	 adds r7,r7,#24
 2565              	.LCFI265:
 2566              	 .cfi_def_cfa_offset 8
 2567 0070 BD46     	 mov sp,r7
 2568              	.LCFI266:
 2569              	 .cfi_def_cfa_register 13
 2570              	 
 2571 0072 80BD     	 pop {r7,pc}
 2572              	.L246:
 2573              	 .align 2
 2574              	.L245:
 2575 0074 00000000 	 .word escMode
 2576 0078 00000000 	 .word escPortIndex
 2577 007c 00000000 	 .word esc4wayProcess
 2578              	 .cfi_endproc
 2579              	.LFE661:
 2581              	 .section .text.mspRebootFn,"ax",%progbits
 2582              	 .align 2
 2583              	 .thumb
 2584              	 .thumb_func
 2586              	mspRebootFn:
 2587              	.LFB662:
 226:../cleanflight/src/main/interface/msp.c **** #endif //USE_SERIAL_4WAY_BLHELI_INTERFACE
 227:../cleanflight/src/main/interface/msp.c **** 
 228:../cleanflight/src/main/interface/msp.c **** static void mspRebootFn(serialPort_t *serialPort)
 229:../cleanflight/src/main/interface/msp.c **** {
 2588              	 .loc 26 229 0
 2589              	 .cfi_startproc
 2590              	 
 2591              	 
 2592 0000 80B5     	 push {r7,lr}
 2593              	.LCFI267:
 2594              	 .cfi_def_cfa_offset 8
 2595              	 .cfi_offset 7,-8
 2596              	 .cfi_offset 14,-4
 2597 0002 82B0     	 sub sp,sp,#8
 2598              	.LCFI268:
 2599              	 .cfi_def_cfa_offset 16
 2600 0004 00AF     	 add r7,sp,#0
 2601              	.LCFI269:
 2602              	 .cfi_def_cfa_register 7
 2603 0006 7860     	 str r0,[r7,#4]
 230:../cleanflight/src/main/interface/msp.c ****     UNUSED(serialPort);
 231:../cleanflight/src/main/interface/msp.c **** 
 232:../cleanflight/src/main/interface/msp.c **** #ifndef USE_OSD_SLAVE
 233:../cleanflight/src/main/interface/msp.c ****     stopPwmAllMotors();
 2604              	 .loc 26 233 0
 2605 0008 FFF7FEFF 	 bl stopPwmAllMotors
 234:../cleanflight/src/main/interface/msp.c **** #endif
 235:../cleanflight/src/main/interface/msp.c **** 
 236:../cleanflight/src/main/interface/msp.c ****     switch (rebootMode) {
 2606              	 .loc 26 236 0
 2607 000c 074B     	 ldr r3,.L253
 2608 000e 1B78     	 ldrb r3,[r3]
 2609 0010 002B     	 cmp r3,#0
 2610 0012 02D0     	 beq .L249
 2611 0014 012B     	 cmp r3,#1
 2612 0016 03D0     	 beq .L250
 2613 0018 05E0     	 b .L252
 2614              	.L249:
 237:../cleanflight/src/main/interface/msp.c ****     case MSP_REBOOT_FIRMWARE:
 238:../cleanflight/src/main/interface/msp.c ****         systemReset();
 2615              	 .loc 26 238 0
 2616 001a FFF7FEFF 	 bl systemReset
 239:../cleanflight/src/main/interface/msp.c **** 
 240:../cleanflight/src/main/interface/msp.c ****         break;
 2617              	 .loc 26 240 0
 2618 001e 03E0     	 b .L251
 2619              	.L250:
 241:../cleanflight/src/main/interface/msp.c ****     case MSP_REBOOT_BOOTLOADER:
 242:../cleanflight/src/main/interface/msp.c ****         systemResetToBootloader();
 2620              	 .loc 26 242 0
 2621 0020 FFF7FEFF 	 bl systemResetToBootloader
 243:../cleanflight/src/main/interface/msp.c **** 
 244:../cleanflight/src/main/interface/msp.c ****         break;
 2622              	 .loc 26 244 0
 2623 0024 00E0     	 b .L251
 2624              	.L252:
 245:../cleanflight/src/main/interface/msp.c **** #if defined(USE_USB_MSC)
 246:../cleanflight/src/main/interface/msp.c ****     case MSP_REBOOT_MSC:
 247:../cleanflight/src/main/interface/msp.c ****         systemResetToMsc();
 248:../cleanflight/src/main/interface/msp.c **** 
 249:../cleanflight/src/main/interface/msp.c ****         break;
 250:../cleanflight/src/main/interface/msp.c **** #endif
 251:../cleanflight/src/main/interface/msp.c ****     default:
 252:../cleanflight/src/main/interface/msp.c ****     
 253:../cleanflight/src/main/interface/msp.c ****         break;
 2625              	 .loc 26 253 0
 2626 0026 00BF     	 nop
 2627              	.L251:
 254:../cleanflight/src/main/interface/msp.c ****     }
 255:../cleanflight/src/main/interface/msp.c **** 
 256:../cleanflight/src/main/interface/msp.c ****     // control should never return here.
 257:../cleanflight/src/main/interface/msp.c ****     while (true) ;
 2628              	 .loc 26 257 0 discriminator 2
 2629 0028 FEE7     	 b .L251
 2630              	.L254:
 2631 002a 00BF     	 .align 2
 2632              	.L253:
 2633 002c 00000000 	 .word rebootMode
 2634              	 .cfi_endproc
 2635              	.LFE662:
 2637              	 .section .text.serializeSDCardSummaryReply,"ax",%progbits
 2638              	 .align 2
 2639              	 .thumb
 2640              	 .thumb_func
 2642              	serializeSDCardSummaryReply:
 2643              	.LFB663:
 258:../cleanflight/src/main/interface/msp.c **** }
 259:../cleanflight/src/main/interface/msp.c **** 
 260:../cleanflight/src/main/interface/msp.c **** #ifndef USE_OSD_SLAVE
 261:../cleanflight/src/main/interface/msp.c **** static void serializeSDCardSummaryReply(sbuf_t *dst)
 262:../cleanflight/src/main/interface/msp.c **** {
 2644              	 .loc 26 262 0
 2645              	 .cfi_startproc
 2646              	 
 2647              	 
 2648 0000 80B5     	 push {r7,lr}
 2649              	.LCFI270:
 2650              	 .cfi_def_cfa_offset 8
 2651              	 .cfi_offset 7,-8
 2652              	 .cfi_offset 14,-4
 2653 0002 84B0     	 sub sp,sp,#16
 2654              	.LCFI271:
 2655              	 .cfi_def_cfa_offset 24
 2656 0004 00AF     	 add r7,sp,#0
 2657              	.LCFI272:
 2658              	 .cfi_def_cfa_register 7
 2659 0006 7860     	 str r0,[r7,#4]
 263:../cleanflight/src/main/interface/msp.c **** #ifdef USE_SDCARD
 264:../cleanflight/src/main/interface/msp.c ****     uint8_t flags = MSP_SDCARD_FLAG_SUPPORTTED;
 2660              	 .loc 26 264 0
 2661 0008 0123     	 movs r3,#1
 2662 000a BB73     	 strb r3,[r7,#14]
 265:../cleanflight/src/main/interface/msp.c ****     uint8_t state = 0;
 2663              	 .loc 26 265 0
 2664 000c 0023     	 movs r3,#0
 2665 000e FB73     	 strb r3,[r7,#15]
 266:../cleanflight/src/main/interface/msp.c **** 
 267:../cleanflight/src/main/interface/msp.c ****     sbufWriteU8(dst, flags);
 2666              	 .loc 26 267 0
 2667 0010 BB7B     	 ldrb r3,[r7,#14]
 2668 0012 7868     	 ldr r0,[r7,#4]
 2669 0014 1946     	 mov r1,r3
 2670 0016 FFF7FEFF 	 bl sbufWriteU8
 268:../cleanflight/src/main/interface/msp.c **** 
 269:../cleanflight/src/main/interface/msp.c ****     // Merge the card and filesystem states together
 270:../cleanflight/src/main/interface/msp.c ****     if (!sdcard_isInserted()) {
 2671              	 .loc 26 270 0
 2672 001a FFF7FEFF 	 bl sdcard_isInserted
 2673 001e 0346     	 mov r3,r0
 2674 0020 83F00103 	 eor r3,r3,#1
 2675 0024 DBB2     	 uxtb r3,r3
 2676 0026 002B     	 cmp r3,#0
 2677 0028 02D0     	 beq .L256
 271:../cleanflight/src/main/interface/msp.c ****         state = MSP_SDCARD_STATE_NOT_PRESENT;
 2678              	 .loc 26 271 0
 2679 002a 0023     	 movs r3,#0
 2680 002c FB73     	 strb r3,[r7,#15]
 2681 002e 22E0     	 b .L257
 2682              	.L256:
 272:../cleanflight/src/main/interface/msp.c ****     } else if (!sdcard_isFunctional()) {
 2683              	 .loc 26 272 0
 2684 0030 FFF7FEFF 	 bl sdcard_isFunctional
 2685 0034 0346     	 mov r3,r0
 2686 0036 83F00103 	 eor r3,r3,#1
 2687 003a DBB2     	 uxtb r3,r3
 2688 003c 002B     	 cmp r3,#0
 2689 003e 02D0     	 beq .L258
 273:../cleanflight/src/main/interface/msp.c ****         state = MSP_SDCARD_STATE_FATAL;
 2690              	 .loc 26 273 0
 2691 0040 0123     	 movs r3,#1
 2692 0042 FB73     	 strb r3,[r7,#15]
 2693 0044 17E0     	 b .L257
 2694              	.L258:
 274:../cleanflight/src/main/interface/msp.c ****     } else {
 275:../cleanflight/src/main/interface/msp.c ****         switch (afatfs_getFilesystemState()) {
 2695              	 .loc 26 275 0
 2696 0046 FFF7FEFF 	 bl afatfs_getFilesystemState
 2697 004a 0346     	 mov r3,r0
 2698 004c 022B     	 cmp r3,#2
 2699 004e 04D0     	 beq .L260
 2700 0050 032B     	 cmp r3,#3
 2701 0052 0DD1     	 bne .L264
 276:../cleanflight/src/main/interface/msp.c ****         case AFATFS_FILESYSTEM_STATE_READY:
 277:../cleanflight/src/main/interface/msp.c ****             state = MSP_SDCARD_STATE_READY;
 2702              	 .loc 26 277 0
 2703 0054 0423     	 movs r3,#4
 2704 0056 FB73     	 strb r3,[r7,#15]
 278:../cleanflight/src/main/interface/msp.c ****             break;
 2705              	 .loc 26 278 0
 2706 0058 0DE0     	 b .L257
 2707              	.L260:
 279:../cleanflight/src/main/interface/msp.c **** 
 280:../cleanflight/src/main/interface/msp.c ****         case AFATFS_FILESYSTEM_STATE_INITIALIZATION:
 281:../cleanflight/src/main/interface/msp.c ****             if (sdcard_isInitialized()) {
 2708              	 .loc 26 281 0
 2709 005a FFF7FEFF 	 bl sdcard_isInitialized
 2710 005e 0346     	 mov r3,r0
 2711 0060 002B     	 cmp r3,#0
 2712 0062 02D0     	 beq .L262
 282:../cleanflight/src/main/interface/msp.c ****                 state = MSP_SDCARD_STATE_FS_INIT;
 2713              	 .loc 26 282 0
 2714 0064 0323     	 movs r3,#3
 2715 0066 FB73     	 strb r3,[r7,#15]
 283:../cleanflight/src/main/interface/msp.c ****             } else {
 284:../cleanflight/src/main/interface/msp.c ****                 state = MSP_SDCARD_STATE_CARD_INIT;
 285:../cleanflight/src/main/interface/msp.c ****             }
 286:../cleanflight/src/main/interface/msp.c ****             break;
 2716              	 .loc 26 286 0
 2717 0068 05E0     	 b .L257
 2718              	.L262:
 284:../cleanflight/src/main/interface/msp.c ****             }
 2719              	 .loc 26 284 0
 2720 006a 0223     	 movs r3,#2
 2721 006c FB73     	 strb r3,[r7,#15]
 2722              	 .loc 26 286 0
 2723 006e 02E0     	 b .L257
 2724              	.L264:
 287:../cleanflight/src/main/interface/msp.c **** 
 288:../cleanflight/src/main/interface/msp.c ****         case AFATFS_FILESYSTEM_STATE_FATAL:
 289:../cleanflight/src/main/interface/msp.c ****         case AFATFS_FILESYSTEM_STATE_UNKNOWN:
 290:../cleanflight/src/main/interface/msp.c ****         default:
 291:../cleanflight/src/main/interface/msp.c ****             state = MSP_SDCARD_STATE_FATAL;
 2725              	 .loc 26 291 0
 2726 0070 0123     	 movs r3,#1
 2727 0072 FB73     	 strb r3,[r7,#15]
 292:../cleanflight/src/main/interface/msp.c ****             break;
 2728              	 .loc 26 292 0
 2729 0074 00BF     	 nop
 2730              	.L257:
 293:../cleanflight/src/main/interface/msp.c ****         }
 294:../cleanflight/src/main/interface/msp.c ****     }
 295:../cleanflight/src/main/interface/msp.c **** 
 296:../cleanflight/src/main/interface/msp.c ****     sbufWriteU8(dst, state);
 2731              	 .loc 26 296 0
 2732 0076 FB7B     	 ldrb r3,[r7,#15]
 2733 0078 7868     	 ldr r0,[r7,#4]
 2734 007a 1946     	 mov r1,r3
 2735 007c FFF7FEFF 	 bl sbufWriteU8
 297:../cleanflight/src/main/interface/msp.c ****     sbufWriteU8(dst, afatfs_getLastError());
 2736              	 .loc 26 297 0
 2737 0080 FFF7FEFF 	 bl afatfs_getLastError
 2738 0084 0346     	 mov r3,r0
 2739 0086 7868     	 ldr r0,[r7,#4]
 2740 0088 1946     	 mov r1,r3
 2741 008a FFF7FEFF 	 bl sbufWriteU8
 298:../cleanflight/src/main/interface/msp.c ****     // Write free space and total space in kilobytes
 299:../cleanflight/src/main/interface/msp.c ****     sbufWriteU32(dst, afatfs_getContiguousFreeSpace() / 1024);
 2742              	 .loc 26 299 0
 2743 008e FFF7FEFF 	 bl afatfs_getContiguousFreeSpace
 2744 0092 0346     	 mov r3,r0
 2745 0094 9B0A     	 lsrs r3,r3,#10
 2746 0096 7868     	 ldr r0,[r7,#4]
 2747 0098 1946     	 mov r1,r3
 2748 009a FFF7FEFF 	 bl sbufWriteU32
 300:../cleanflight/src/main/interface/msp.c ****     sbufWriteU32(dst, sdcard_getMetadata()->numBlocks / 2); // Block size is half a kilobyte
 2749              	 .loc 26 300 0
 2750 009e FFF7FEFF 	 bl sdcard_getMetadata
 2751 00a2 0346     	 mov r3,r0
 2752 00a4 1B68     	 ldr r3,[r3]
 2753 00a6 5B08     	 lsrs r3,r3,#1
 2754 00a8 7868     	 ldr r0,[r7,#4]
 2755 00aa 1946     	 mov r1,r3
 2756 00ac FFF7FEFF 	 bl sbufWriteU32
 301:../cleanflight/src/main/interface/msp.c **** #else
 302:../cleanflight/src/main/interface/msp.c ****     sbufWriteU8(dst, 0);
 303:../cleanflight/src/main/interface/msp.c ****     sbufWriteU8(dst, 0);
 304:../cleanflight/src/main/interface/msp.c ****     sbufWriteU8(dst, 0);
 305:../cleanflight/src/main/interface/msp.c ****     sbufWriteU32(dst, 0);
 306:../cleanflight/src/main/interface/msp.c ****     sbufWriteU32(dst, 0);
 307:../cleanflight/src/main/interface/msp.c **** #endif
 308:../cleanflight/src/main/interface/msp.c **** }
 2757              	 .loc 26 308 0
 2758 00b0 1037     	 adds r7,r7,#16
 2759              	.LCFI273:
 2760              	 .cfi_def_cfa_offset 8
 2761 00b2 BD46     	 mov sp,r7
 2762              	.LCFI274:
 2763              	 .cfi_def_cfa_register 13
 2764              	 
 2765 00b4 80BD     	 pop {r7,pc}
 2766              	 .cfi_endproc
 2767              	.LFE663:
 2769 00b6 00BF     	 .section .text.serializeDataflashSummaryReply,"ax",%progbits
 2770              	 .align 2
 2771              	 .thumb
 2772              	 .thumb_func
 2774              	serializeDataflashSummaryReply:
 2775              	.LFB664:
 309:../cleanflight/src/main/interface/msp.c **** 
 310:../cleanflight/src/main/interface/msp.c **** static void serializeDataflashSummaryReply(sbuf_t *dst)
 311:../cleanflight/src/main/interface/msp.c **** {
 2776              	 .loc 26 311 0
 2777              	 .cfi_startproc
 2778              	 
 2779              	 
 2780 0000 80B5     	 push {r7,lr}
 2781              	.LCFI275:
 2782              	 .cfi_def_cfa_offset 8
 2783              	 .cfi_offset 7,-8
 2784              	 .cfi_offset 14,-4
 2785 0002 82B0     	 sub sp,sp,#8
 2786              	.LCFI276:
 2787              	 .cfi_def_cfa_offset 16
 2788 0004 00AF     	 add r7,sp,#0
 2789              	.LCFI277:
 2790              	 .cfi_def_cfa_register 7
 2791 0006 7860     	 str r0,[r7,#4]
 312:../cleanflight/src/main/interface/msp.c **** #ifdef USE_FLASHFS
 313:../cleanflight/src/main/interface/msp.c ****     if (flashfsIsSupported()) {
 314:../cleanflight/src/main/interface/msp.c ****         uint8_t flags = MSP_FLASHFS_FLAG_SUPPORTED;
 315:../cleanflight/src/main/interface/msp.c ****         flags |= (flashfsIsReady() ? MSP_FLASHFS_FLAG_READY : 0);
 316:../cleanflight/src/main/interface/msp.c ****         const flashGeometry_t *geometry = flashfsGetGeometry();
 317:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, flags);
 318:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, geometry->sectors);
 319:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, geometry->totalSize);
 320:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, flashfsGetOffset()); // Effectively the current number of bytes stored on
 321:../cleanflight/src/main/interface/msp.c ****     } else
 322:../cleanflight/src/main/interface/msp.c **** #endif
 323:../cleanflight/src/main/interface/msp.c **** 
 324:../cleanflight/src/main/interface/msp.c ****     // FlashFS is not configured or valid device is not detected
 325:../cleanflight/src/main/interface/msp.c ****     {
 326:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
 2792              	 .loc 26 326 0
 2793 0008 7868     	 ldr r0,[r7,#4]
 2794 000a 0021     	 movs r1,#0
 2795 000c FFF7FEFF 	 bl sbufWriteU8
 327:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, 0);
 2796              	 .loc 26 327 0
 2797 0010 7868     	 ldr r0,[r7,#4]
 2798 0012 0021     	 movs r1,#0
 2799 0014 FFF7FEFF 	 bl sbufWriteU32
 328:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, 0);
 2800              	 .loc 26 328 0
 2801 0018 7868     	 ldr r0,[r7,#4]
 2802 001a 0021     	 movs r1,#0
 2803 001c FFF7FEFF 	 bl sbufWriteU32
 329:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, 0);
 2804              	 .loc 26 329 0
 2805 0020 7868     	 ldr r0,[r7,#4]
 2806 0022 0021     	 movs r1,#0
 2807 0024 FFF7FEFF 	 bl sbufWriteU32
 330:../cleanflight/src/main/interface/msp.c ****     }    
 331:../cleanflight/src/main/interface/msp.c **** }
 2808              	 .loc 26 331 0
 2809 0028 0837     	 adds r7,r7,#8
 2810              	.LCFI278:
 2811              	 .cfi_def_cfa_offset 8
 2812 002a BD46     	 mov sp,r7
 2813              	.LCFI279:
 2814              	 .cfi_def_cfa_register 13
 2815              	 
 2816 002c 80BD     	 pop {r7,pc}
 2817              	 .cfi_endproc
 2818              	.LFE664:
 2820 002e 00BF     	 .section .text.mspCommonProcessOutCommand,"ax",%progbits
 2821              	 .align 2
 2822              	 .thumb
 2823              	 .thumb_func
 2825              	mspCommonProcessOutCommand:
 2826              	.LFB665:
 332:../cleanflight/src/main/interface/msp.c **** 
 333:../cleanflight/src/main/interface/msp.c **** #ifdef USE_FLASHFS
 334:../cleanflight/src/main/interface/msp.c **** enum compressionType_e {
 335:../cleanflight/src/main/interface/msp.c ****     NO_COMPRESSION,
 336:../cleanflight/src/main/interface/msp.c ****     HUFFMAN
 337:../cleanflight/src/main/interface/msp.c **** };
 338:../cleanflight/src/main/interface/msp.c **** 
 339:../cleanflight/src/main/interface/msp.c **** static void serializeDataflashReadReply(sbuf_t *dst, uint32_t address, const uint16_t size, bool us
 340:../cleanflight/src/main/interface/msp.c **** {
 341:../cleanflight/src/main/interface/msp.c ****     BUILD_BUG_ON(MSP_PORT_DATAFLASH_INFO_SIZE < 16);
 342:../cleanflight/src/main/interface/msp.c **** 
 343:../cleanflight/src/main/interface/msp.c ****     uint16_t readLen = size;
 344:../cleanflight/src/main/interface/msp.c ****     const int bytesRemainingInBuf = sbufBytesRemaining(dst) - MSP_PORT_DATAFLASH_INFO_SIZE;
 345:../cleanflight/src/main/interface/msp.c ****     if (readLen > bytesRemainingInBuf) {
 346:../cleanflight/src/main/interface/msp.c ****         readLen = bytesRemainingInBuf;
 347:../cleanflight/src/main/interface/msp.c ****     }
 348:../cleanflight/src/main/interface/msp.c ****     // size will be lower than that requested if we reach end of volume
 349:../cleanflight/src/main/interface/msp.c ****     const uint32_t flashfsSize = flashfsGetSize();
 350:../cleanflight/src/main/interface/msp.c ****     if (readLen > flashfsSize - address) {
 351:../cleanflight/src/main/interface/msp.c ****         // truncate the request
 352:../cleanflight/src/main/interface/msp.c ****         readLen = flashfsSize - address;
 353:../cleanflight/src/main/interface/msp.c ****     }
 354:../cleanflight/src/main/interface/msp.c ****     sbufWriteU32(dst, address);
 355:../cleanflight/src/main/interface/msp.c **** 
 356:../cleanflight/src/main/interface/msp.c ****     // legacy format does not support compression
 357:../cleanflight/src/main/interface/msp.c **** #ifdef USE_HUFFMAN
 358:../cleanflight/src/main/interface/msp.c ****     const uint8_t compressionMethod = (!allowCompression || useLegacyFormat) ? NO_COMPRESSION : HUF
 359:../cleanflight/src/main/interface/msp.c **** #else
 360:../cleanflight/src/main/interface/msp.c ****     const uint8_t compressionMethod = NO_COMPRESSION;
 361:../cleanflight/src/main/interface/msp.c ****     UNUSED(allowCompression);
 362:../cleanflight/src/main/interface/msp.c **** #endif
 363:../cleanflight/src/main/interface/msp.c **** 
 364:../cleanflight/src/main/interface/msp.c ****     if (compressionMethod == NO_COMPRESSION) {
 365:../cleanflight/src/main/interface/msp.c ****         if (!useLegacyFormat) {
 366:../cleanflight/src/main/interface/msp.c ****             // new format supports variable read lengths
 367:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, readLen);
 368:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, 0); // placeholder for compression format
 369:../cleanflight/src/main/interface/msp.c ****         }
 370:../cleanflight/src/main/interface/msp.c **** 
 371:../cleanflight/src/main/interface/msp.c ****         const int bytesRead = flashfsReadAbs(address, sbufPtr(dst), readLen);
 372:../cleanflight/src/main/interface/msp.c **** 
 373:../cleanflight/src/main/interface/msp.c ****         sbufAdvance(dst, bytesRead);
 374:../cleanflight/src/main/interface/msp.c **** 
 375:../cleanflight/src/main/interface/msp.c ****         if (useLegacyFormat) {
 376:../cleanflight/src/main/interface/msp.c ****             // pad the buffer with zeros
 377:../cleanflight/src/main/interface/msp.c ****             for (int i = bytesRead; i < size; i++) {
 378:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, 0);
 379:../cleanflight/src/main/interface/msp.c ****             }
 380:../cleanflight/src/main/interface/msp.c ****         }
 381:../cleanflight/src/main/interface/msp.c ****     } else {
 382:../cleanflight/src/main/interface/msp.c **** #ifdef USE_HUFFMAN
 383:../cleanflight/src/main/interface/msp.c ****         // compress in 256-byte chunks
 384:../cleanflight/src/main/interface/msp.c ****         const uint16_t READ_BUFFER_SIZE = 256;
 385:../cleanflight/src/main/interface/msp.c ****         uint8_t readBuffer[READ_BUFFER_SIZE];
 386:../cleanflight/src/main/interface/msp.c **** 
 387:../cleanflight/src/main/interface/msp.c ****         huffmanState_t state = {
 388:../cleanflight/src/main/interface/msp.c ****             .bytesWritten = 0,
 389:../cleanflight/src/main/interface/msp.c ****             .outByte = sbufPtr(dst) + sizeof(uint16_t) + sizeof(uint8_t) + HUFFMAN_INFO_SIZE,
 390:../cleanflight/src/main/interface/msp.c ****             .outBufLen = readLen,
 391:../cleanflight/src/main/interface/msp.c ****             .outBit = 0x80,
 392:../cleanflight/src/main/interface/msp.c ****         };
 393:../cleanflight/src/main/interface/msp.c ****         *state.outByte = 0;
 394:../cleanflight/src/main/interface/msp.c **** 
 395:../cleanflight/src/main/interface/msp.c ****         uint16_t bytesReadTotal = 0;
 396:../cleanflight/src/main/interface/msp.c ****         // read until output buffer overflows or flash is exhausted
 397:../cleanflight/src/main/interface/msp.c ****         while (state.bytesWritten < state.outBufLen && address + bytesReadTotal < flashfsSize) {
 398:../cleanflight/src/main/interface/msp.c ****             const int bytesRead = flashfsReadAbs(address + bytesReadTotal, readBuffer,
 399:../cleanflight/src/main/interface/msp.c ****                 MIN(sizeof(readBuffer), flashfsSize - address - bytesReadTotal));
 400:../cleanflight/src/main/interface/msp.c **** 
 401:../cleanflight/src/main/interface/msp.c ****             const int status = huffmanEncodeBufStreaming(&state, readBuffer, bytesRead, huffmanTabl
 402:../cleanflight/src/main/interface/msp.c ****             if (status == -1) {
 403:../cleanflight/src/main/interface/msp.c ****                 // overflow
 404:../cleanflight/src/main/interface/msp.c ****                 break;
 405:../cleanflight/src/main/interface/msp.c ****             }
 406:../cleanflight/src/main/interface/msp.c **** 
 407:../cleanflight/src/main/interface/msp.c ****             bytesReadTotal += bytesRead;
 408:../cleanflight/src/main/interface/msp.c ****         }
 409:../cleanflight/src/main/interface/msp.c **** 
 410:../cleanflight/src/main/interface/msp.c ****         if (state.outBit != 0x80) {
 411:../cleanflight/src/main/interface/msp.c ****             ++state.bytesWritten;
 412:../cleanflight/src/main/interface/msp.c ****         }
 413:../cleanflight/src/main/interface/msp.c **** 
 414:../cleanflight/src/main/interface/msp.c ****         // header
 415:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, HUFFMAN_INFO_SIZE + state.bytesWritten);
 416:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, compressionMethod);
 417:../cleanflight/src/main/interface/msp.c ****         // payload
 418:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, bytesReadTotal);
 419:../cleanflight/src/main/interface/msp.c ****         sbufAdvance(dst, state.bytesWritten);
 420:../cleanflight/src/main/interface/msp.c **** #endif
 421:../cleanflight/src/main/interface/msp.c ****     }
 422:../cleanflight/src/main/interface/msp.c **** }
 423:../cleanflight/src/main/interface/msp.c **** #endif // USE_FLASHFS
 424:../cleanflight/src/main/interface/msp.c **** #endif // USE_OSD_SLAVE
 425:../cleanflight/src/main/interface/msp.c **** 
 426:../cleanflight/src/main/interface/msp.c **** /*
 427:../cleanflight/src/main/interface/msp.c ****  * Returns true if the command was processd, false otherwise.
 428:../cleanflight/src/main/interface/msp.c ****  * May set mspPostProcessFunc to a function to be called once the command has been processed
 429:../cleanflight/src/main/interface/msp.c ****  */
 430:../cleanflight/src/main/interface/msp.c **** static bool mspCommonProcessOutCommand(uint8_t cmdMSP, sbuf_t *dst, mspPostProcessFnPtr *mspPostPro
 431:../cleanflight/src/main/interface/msp.c **** {
 2827              	 .loc 26 431 0
 2828              	 .cfi_startproc
 2829              	 
 2830              	 
 2831 0000 90B5     	 push {r4,r7,lr}
 2832              	.LCFI280:
 2833              	 .cfi_def_cfa_offset 12
 2834              	 .cfi_offset 4,-12
 2835              	 .cfi_offset 7,-8
 2836              	 .cfi_offset 14,-4
 2837 0002 97B0     	 sub sp,sp,#92
 2838              	.LCFI281:
 2839              	 .cfi_def_cfa_offset 104
 2840 0004 00AF     	 add r7,sp,#0
 2841              	.LCFI282:
 2842              	 .cfi_def_cfa_register 7
 2843 0006 0346     	 mov r3,r0
 2844 0008 B960     	 str r1,[r7,#8]
 2845 000a 7A60     	 str r2,[r7,#4]
 2846 000c FB73     	 strb r3,[r7,#15]
 432:../cleanflight/src/main/interface/msp.c ****     UNUSED(mspPostProcessFn);
 433:../cleanflight/src/main/interface/msp.c **** 
 434:../cleanflight/src/main/interface/msp.c ****     switch (cmdMSP) {
 2847              	 .loc 26 434 0
 2848 000e FB7B     	 ldrb r3,[r7,#15]
 2849 0010 382B     	 cmp r3,#56
 2850 0012 00F00C82 	 beq .L268
 2851 0016 382B     	 cmp r3,#56
 2852 0018 1ADC     	 bgt .L269
 2853 001a 042B     	 cmp r3,#4
 2854 001c 55D0     	 beq .L270
 2855 001e 042B     	 cmp r3,#4
 2856 0020 06DC     	 bgt .L271
 2857 0022 022B     	 cmp r3,#2
 2858 0024 3DD0     	 beq .L272
 2859 0026 022B     	 cmp r3,#2
 2860 0028 42DC     	 bgt .L273
 2861 002a 012B     	 cmp r3,#1
 2862 002c 2CD0     	 beq .L274
 2863 002e 61E3     	 b .L267
 2864              	.L271:
 2865 0030 202B     	 cmp r3,#32
 2866 0032 00F09282 	 beq .L275
 2867 0036 202B     	 cmp r3,#32
 2868 0038 03DC     	 bgt .L276
 2869 003a 052B     	 cmp r3,#5
 2870 003c 00F0A680 	 beq .L277
 2871 0040 58E3     	 b .L267
 2872              	.L276:
 2873 0042 242B     	 cmp r3,#36
 2874 0044 00F01281 	 beq .L278
 2875 0048 282B     	 cmp r3,#40
 2876 004a 00F02E82 	 beq .L279
 2877 004e 51E3     	 b .L267
 2878              	.L269:
 2879 0050 802B     	 cmp r3,#128
 2880 0052 00F05F81 	 beq .L280
 2881 0056 802B     	 cmp r3,#128
 2882 0058 09DC     	 bgt .L281
 2883 005a 542B     	 cmp r3,#84
 2884 005c 00F0B582 	 beq .L282
 2885 0060 6E2B     	 cmp r3,#110
 2886 0062 00F0A980 	 beq .L283
 2887 0066 522B     	 cmp r3,#82
 2888 0068 00F0AA82 	 beq .L284
 2889 006c 42E3     	 b .L267
 2890              	.L281:
 2891 006e 822B     	 cmp r3,#130
 2892 0070 00F00481 	 beq .L285
 2893 0074 822B     	 cmp r3,#130
 2894 0076 C0F27D81 	 blt .L286
 2895 007a A02B     	 cmp r3,#160
 2896 007c 00F0E380 	 beq .L287
 2897 0080 FE2B     	 cmp r3,#254
 2898 0082 00F0CD80 	 beq .L288
 2899 0086 35E3     	 b .L267
 2900              	.L274:
 435:../cleanflight/src/main/interface/msp.c ****     case MSP_API_VERSION:
 436:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, MSP_PROTOCOL_VERSION);
 2901              	 .loc 26 436 0
 2902 0088 B868     	 ldr r0,[r7,#8]
 2903 008a 0021     	 movs r1,#0
 2904 008c FFF7FEFF 	 bl sbufWriteU8
 437:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, API_VERSION_MAJOR);
 2905              	 .loc 26 437 0
 2906 0090 B868     	 ldr r0,[r7,#8]
 2907 0092 0121     	 movs r1,#1
 2908 0094 FFF7FEFF 	 bl sbufWriteU8
 438:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, API_VERSION_MINOR);
 2909              	 .loc 26 438 0
 2910 0098 B868     	 ldr r0,[r7,#8]
 2911 009a 2821     	 movs r1,#40
 2912 009c FFF7FEFF 	 bl sbufWriteU8
 439:../cleanflight/src/main/interface/msp.c ****         break;
 2913              	 .loc 26 439 0
 2914 00a0 2AE3     	 b .L289
 2915              	.L272:
 440:../cleanflight/src/main/interface/msp.c **** 
 441:../cleanflight/src/main/interface/msp.c ****     case MSP_FC_VARIANT:
 442:../cleanflight/src/main/interface/msp.c ****         sbufWriteData(dst, flightControllerIdentifier, FLIGHT_CONTROLLER_IDENTIFIER_LENGTH);
 2916              	 .loc 26 442 0
 2917 00a2 B84B     	 ldr r3,.L305
 2918 00a4 B868     	 ldr r0,[r7,#8]
 2919 00a6 1946     	 mov r1,r3
 2920 00a8 0422     	 movs r2,#4
 2921 00aa FFF7FEFF 	 bl sbufWriteData
 443:../cleanflight/src/main/interface/msp.c ****         break;
 2922              	 .loc 26 443 0
 2923 00ae 23E3     	 b .L289
 2924              	.L273:
 444:../cleanflight/src/main/interface/msp.c **** 
 445:../cleanflight/src/main/interface/msp.c ****     case MSP_FC_VERSION:
 446:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, FC_VERSION_MAJOR);
 2925              	 .loc 26 446 0
 2926 00b0 B868     	 ldr r0,[r7,#8]
 2927 00b2 0221     	 movs r1,#2
 2928 00b4 FFF7FEFF 	 bl sbufWriteU8
 447:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, FC_VERSION_MINOR);
 2929              	 .loc 26 447 0
 2930 00b8 B868     	 ldr r0,[r7,#8]
 2931 00ba 0521     	 movs r1,#5
 2932 00bc FFF7FEFF 	 bl sbufWriteU8
 448:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, FC_VERSION_PATCH_LEVEL);
 2933              	 .loc 26 448 0
 2934 00c0 B868     	 ldr r0,[r7,#8]
 2935 00c2 0021     	 movs r1,#0
 2936 00c4 FFF7FEFF 	 bl sbufWriteU8
 449:../cleanflight/src/main/interface/msp.c ****         break;
 2937              	 .loc 26 449 0
 2938 00c8 16E3     	 b .L289
 2939              	.L270:
 2940              	.LBB2:
 450:../cleanflight/src/main/interface/msp.c **** 
 451:../cleanflight/src/main/interface/msp.c ****     case MSP_BOARD_INFO:
 452:../cleanflight/src/main/interface/msp.c ****     {
 453:../cleanflight/src/main/interface/msp.c ****         sbufWriteData(dst, systemConfig()->boardIdentifier, BOARD_IDENTIFIER_LENGTH);
 2941              	 .loc 26 453 0
 2942 00ca FFF7FEFF 	 bl systemConfig
 2943 00ce 0346     	 mov r3,r0
 2944 00d0 0733     	 adds r3,r3,#7
 2945 00d2 B868     	 ldr r0,[r7,#8]
 2946 00d4 1946     	 mov r1,r3
 2947 00d6 0422     	 movs r2,#4
 2948 00d8 FFF7FEFF 	 bl sbufWriteData
 454:../cleanflight/src/main/interface/msp.c **** #ifdef USE_HARDWARE_REVISION_DETECTION
 455:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, hardwareRevision);
 456:../cleanflight/src/main/interface/msp.c **** #else
 457:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, 0); // No other build targets currently have hardware revision detection.
 2949              	 .loc 26 457 0
 2950 00dc B868     	 ldr r0,[r7,#8]
 2951 00de 0021     	 movs r1,#0
 2952 00e0 FFF7FEFF 	 bl sbufWriteU16
 458:../cleanflight/src/main/interface/msp.c **** #endif
 459:../cleanflight/src/main/interface/msp.c **** #ifdef USE_OSD_SLAVE
 460:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 1);  // 1 == OSD
 461:../cleanflight/src/main/interface/msp.c **** #else
 462:../cleanflight/src/main/interface/msp.c **** #if defined(USE_OSD) && defined(USE_MAX7456)
 463:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 2);  // 2 == FC with OSD
 464:../cleanflight/src/main/interface/msp.c **** #else
 465:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);  // 0 == FC
 2953              	 .loc 26 465 0
 2954 00e4 B868     	 ldr r0,[r7,#8]
 2955 00e6 0021     	 movs r1,#0
 2956 00e8 FFF7FEFF 	 bl sbufWriteU8
 466:../cleanflight/src/main/interface/msp.c **** #endif
 467:../cleanflight/src/main/interface/msp.c **** #endif
 468:../cleanflight/src/main/interface/msp.c ****         // Board communication capabilities (uint8)
 469:../cleanflight/src/main/interface/msp.c ****         // Bit 0: 1 iff the board has VCP
 470:../cleanflight/src/main/interface/msp.c ****         // Bit 1: 1 iff the board supports software serial
 471:../cleanflight/src/main/interface/msp.c ****         uint8_t commCapabilities = 0;
 2957              	 .loc 26 471 0
 2958 00ec 0023     	 movs r3,#0
 2959 00ee 87F83B30 	 strb r3,[r7,#59]
 472:../cleanflight/src/main/interface/msp.c **** #ifdef USE_VCP
 473:../cleanflight/src/main/interface/msp.c ****         commCapabilities |= 1 << 0;
 2960              	 .loc 26 473 0
 2961 00f2 97F83B30 	 ldrb r3,[r7,#59]
 2962 00f6 43F00103 	 orr r3,r3,#1
 2963 00fa 87F83B30 	 strb r3,[r7,#59]
 474:../cleanflight/src/main/interface/msp.c **** #endif
 475:../cleanflight/src/main/interface/msp.c **** #if defined(USE_SOFTSERIAL1) || defined(USE_SOFTSERIAL2)
 476:../cleanflight/src/main/interface/msp.c ****         commCapabilities |= 1 << 1;
 477:../cleanflight/src/main/interface/msp.c **** #endif
 478:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, commCapabilities);
 2964              	 .loc 26 478 0
 2965 00fe 97F83B30 	 ldrb r3,[r7,#59]
 2966 0102 B868     	 ldr r0,[r7,#8]
 2967 0104 1946     	 mov r1,r3
 2968 0106 FFF7FEFF 	 bl sbufWriteU8
 479:../cleanflight/src/main/interface/msp.c **** 
 480:../cleanflight/src/main/interface/msp.c ****         // Target name with explicit length
 481:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, strlen(targetName));
 2969              	 .loc 26 481 0
 2970 010a 9F4B     	 ldr r3,.L305+4
 2971 010c 1B68     	 ldr r3,[r3]
 2972 010e 1846     	 mov r0,r3
 2973 0110 FFF7FEFF 	 bl strlen
 2974 0114 0346     	 mov r3,r0
 2975 0116 DBB2     	 uxtb r3,r3
 2976 0118 B868     	 ldr r0,[r7,#8]
 2977 011a 1946     	 mov r1,r3
 2978 011c FFF7FEFF 	 bl sbufWriteU8
 482:../cleanflight/src/main/interface/msp.c ****         sbufWriteData(dst, targetName, strlen(targetName));
 2979              	 .loc 26 482 0
 2980 0120 994B     	 ldr r3,.L305+4
 2981 0122 1C68     	 ldr r4,[r3]
 2982 0124 984B     	 ldr r3,.L305+4
 2983 0126 1B68     	 ldr r3,[r3]
 2984 0128 1846     	 mov r0,r3
 2985 012a FFF7FEFF 	 bl strlen
 2986 012e 0346     	 mov r3,r0
 2987 0130 B868     	 ldr r0,[r7,#8]
 2988 0132 2146     	 mov r1,r4
 2989 0134 1A46     	 mov r2,r3
 2990 0136 FFF7FEFF 	 bl sbufWriteData
 483:../cleanflight/src/main/interface/msp.c **** 
 484:../cleanflight/src/main/interface/msp.c **** #if defined(USE_BOARD_INFO)
 485:../cleanflight/src/main/interface/msp.c ****         // Board name with explicit length
 486:../cleanflight/src/main/interface/msp.c ****         char *value = getBoardName();
 2991              	 .loc 26 486 0
 2992 013a FFF7FEFF 	 bl getBoardName
 2993 013e 7863     	 str r0,[r7,#52]
 487:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, strlen(value));
 2994              	 .loc 26 487 0
 2995 0140 786B     	 ldr r0,[r7,#52]
 2996 0142 FFF7FEFF 	 bl strlen
 2997 0146 0346     	 mov r3,r0
 2998 0148 DBB2     	 uxtb r3,r3
 2999 014a B868     	 ldr r0,[r7,#8]
 3000 014c 1946     	 mov r1,r3
 3001 014e FFF7FEFF 	 bl sbufWriteU8
 488:../cleanflight/src/main/interface/msp.c ****         sbufWriteString(dst, value);
 3002              	 .loc 26 488 0
 3003 0152 B868     	 ldr r0,[r7,#8]
 3004 0154 796B     	 ldr r1,[r7,#52]
 3005 0156 FFF7FEFF 	 bl sbufWriteString
 489:../cleanflight/src/main/interface/msp.c **** 
 490:../cleanflight/src/main/interface/msp.c ****         // Manufacturer id with explicit length
 491:../cleanflight/src/main/interface/msp.c ****         value = getManufacturerId();
 3006              	 .loc 26 491 0
 3007 015a FFF7FEFF 	 bl getManufacturerId
 3008 015e 7863     	 str r0,[r7,#52]
 492:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, strlen(value));
 3009              	 .loc 26 492 0
 3010 0160 786B     	 ldr r0,[r7,#52]
 3011 0162 FFF7FEFF 	 bl strlen
 3012 0166 0346     	 mov r3,r0
 3013 0168 DBB2     	 uxtb r3,r3
 3014 016a B868     	 ldr r0,[r7,#8]
 3015 016c 1946     	 mov r1,r3
 3016 016e FFF7FEFF 	 bl sbufWriteU8
 493:../cleanflight/src/main/interface/msp.c ****         sbufWriteString(dst, value);
 3017              	 .loc 26 493 0
 3018 0172 B868     	 ldr r0,[r7,#8]
 3019 0174 796B     	 ldr r1,[r7,#52]
 3020 0176 FFF7FEFF 	 bl sbufWriteString
 494:../cleanflight/src/main/interface/msp.c **** 
 495:../cleanflight/src/main/interface/msp.c **** #if defined(USE_SIGNATURE)
 496:../cleanflight/src/main/interface/msp.c ****         // Signature
 497:../cleanflight/src/main/interface/msp.c ****         sbufWriteData(dst, getSignature(), SIGNATURE_LENGTH);
 3021              	 .loc 26 497 0
 3022 017a FFF7FEFF 	 bl getSignature
 3023 017e 0346     	 mov r3,r0
 3024 0180 B868     	 ldr r0,[r7,#8]
 3025 0182 1946     	 mov r1,r3
 3026 0184 2022     	 movs r2,#32
 3027 0186 FFF7FEFF 	 bl sbufWriteData
 498:../cleanflight/src/main/interface/msp.c **** #endif
 499:../cleanflight/src/main/interface/msp.c **** #endif // USE_BOARD_INFO
 500:../cleanflight/src/main/interface/msp.c **** 
 501:../cleanflight/src/main/interface/msp.c ****         break;
 3028              	 .loc 26 501 0
 3029 018a B5E2     	 b .L289
 3030              	.L277:
 3031              	.LBE2:
 502:../cleanflight/src/main/interface/msp.c ****     }
 503:../cleanflight/src/main/interface/msp.c **** 
 504:../cleanflight/src/main/interface/msp.c ****     case MSP_BUILD_INFO:
 505:../cleanflight/src/main/interface/msp.c ****         sbufWriteData(dst, buildDate, BUILD_DATE_LENGTH);
 3032              	 .loc 26 505 0
 3033 018c 7F4B     	 ldr r3,.L305+8
 3034 018e 1B68     	 ldr r3,[r3]
 3035 0190 B868     	 ldr r0,[r7,#8]
 3036 0192 1946     	 mov r1,r3
 3037 0194 0B22     	 movs r2,#11
 3038 0196 FFF7FEFF 	 bl sbufWriteData
 506:../cleanflight/src/main/interface/msp.c ****         sbufWriteData(dst, buildTime, BUILD_TIME_LENGTH);
 3039              	 .loc 26 506 0
 3040 019a 7D4B     	 ldr r3,.L305+12
 3041 019c 1B68     	 ldr r3,[r3]
 3042 019e B868     	 ldr r0,[r7,#8]
 3043 01a0 1946     	 mov r1,r3
 3044 01a2 0822     	 movs r2,#8
 3045 01a4 FFF7FEFF 	 bl sbufWriteData
 507:../cleanflight/src/main/interface/msp.c ****         sbufWriteData(dst, shortGitRevision, GIT_SHORT_REVISION_LENGTH);
 3046              	 .loc 26 507 0
 3047 01a8 7A4B     	 ldr r3,.L305+16
 3048 01aa 1B68     	 ldr r3,[r3]
 3049 01ac B868     	 ldr r0,[r7,#8]
 3050 01ae 1946     	 mov r1,r3
 3051 01b0 0722     	 movs r2,#7
 3052 01b2 FFF7FEFF 	 bl sbufWriteData
 508:../cleanflight/src/main/interface/msp.c ****         break;
 3053              	 .loc 26 508 0
 3054 01b6 9FE2     	 b .L289
 3055              	.L283:
 509:../cleanflight/src/main/interface/msp.c **** 
 510:../cleanflight/src/main/interface/msp.c ****     case MSP_ANALOG:
 511:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, (uint8_t)constrain(getBatteryVoltage(), 0, 255));
 3056              	 .loc 26 511 0
 3057 01b8 FFF7FEFF 	 bl getBatteryVoltage
 3058 01bc 0346     	 mov r3,r0
 3059 01be 1846     	 mov r0,r3
 3060 01c0 0021     	 movs r1,#0
 3061 01c2 FF22     	 movs r2,#255
 3062 01c4 FFF7FEFF 	 bl constrain
 3063 01c8 0346     	 mov r3,r0
 3064 01ca DBB2     	 uxtb r3,r3
 3065 01cc B868     	 ldr r0,[r7,#8]
 3066 01ce 1946     	 mov r1,r3
 3067 01d0 FFF7FEFF 	 bl sbufWriteU8
 512:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, (uint16_t)constrain(getMAhDrawn(), 0, 0xFFFF)); // milliamp hours drawn f
 3068              	 .loc 26 512 0
 3069 01d4 FFF7FEFF 	 bl getMAhDrawn
 3070 01d8 0346     	 mov r3,r0
 3071 01da 1846     	 mov r0,r3
 3072 01dc 0021     	 movs r1,#0
 3073 01de 4FF6FF72 	 movw r2,#65535
 3074 01e2 FFF7FEFF 	 bl constrain
 3075 01e6 0346     	 mov r3,r0
 3076 01e8 9BB2     	 uxth r3,r3
 3077 01ea B868     	 ldr r0,[r7,#8]
 3078 01ec 1946     	 mov r1,r3
 3079 01ee FFF7FEFF 	 bl sbufWriteU16
 513:../cleanflight/src/main/interface/msp.c **** #ifdef USE_OSD_SLAVE
 514:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, 0); // rssi
 515:../cleanflight/src/main/interface/msp.c **** #else
 516:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, getRssi());
 3080              	 .loc 26 516 0
 3081 01f2 FFF7FEFF 	 bl getRssi
 3082 01f6 0346     	 mov r3,r0
 3083 01f8 B868     	 ldr r0,[r7,#8]
 3084 01fa 1946     	 mov r1,r3
 3085 01fc FFF7FEFF 	 bl sbufWriteU16
 517:../cleanflight/src/main/interface/msp.c **** #endif
 518:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, (int16_t)constrain(getAmperage(), -0x8000, 0x7FFF)); // send current in 0
 3086              	 .loc 26 518 0
 3087 0200 FFF7FEFF 	 bl getAmperage
 3088 0204 0346     	 mov r3,r0
 3089 0206 1846     	 mov r0,r3
 3090 0208 6349     	 ldr r1,.L305+20
 3091 020a 47F6FF72 	 movw r2,#32767
 3092 020e FFF7FEFF 	 bl constrain
 3093 0212 0346     	 mov r3,r0
 3094 0214 9BB2     	 uxth r3,r3
 3095 0216 B868     	 ldr r0,[r7,#8]
 3096 0218 1946     	 mov r1,r3
 3097 021a FFF7FEFF 	 bl sbufWriteU16
 519:../cleanflight/src/main/interface/msp.c ****         break;
 3098              	 .loc 26 519 0
 3099 021e 6BE2     	 b .L289
 3100              	.L288:
 3101              	.LBB3:
 520:../cleanflight/src/main/interface/msp.c **** 
 521:../cleanflight/src/main/interface/msp.c ****     case MSP_DEBUG:
 522:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < DEBUG16_VALUE_COUNT; i++) {
 3102              	 .loc 26 522 0
 3103 0220 0023     	 movs r3,#0
 3104 0222 7B65     	 str r3,[r7,#84]
 3105 0224 0BE0     	 b .L290
 3106              	.L291:
 523:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, debug[i]);      // 4 variables are here for general monitoring purpos
 3107              	 .loc 26 523 0 discriminator 3
 3108 0226 5D4A     	 ldr r2,.L305+24
 3109 0228 7B6D     	 ldr r3,[r7,#84]
 3110 022a 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 3111 022e 9BB2     	 uxth r3,r3
 3112 0230 B868     	 ldr r0,[r7,#8]
 3113 0232 1946     	 mov r1,r3
 3114 0234 FFF7FEFF 	 bl sbufWriteU16
 522:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, debug[i]);      // 4 variables are here for general monitoring purpos
 3115              	 .loc 26 522 0 discriminator 3
 3116 0238 7B6D     	 ldr r3,[r7,#84]
 3117 023a 0133     	 adds r3,r3,#1
 3118 023c 7B65     	 str r3,[r7,#84]
 3119              	.L290:
 522:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, debug[i]);      // 4 variables are here for general monitoring purpos
 3120              	 .loc 26 522 0 is_stmt 0 discriminator 1
 3121 023e 7B6D     	 ldr r3,[r7,#84]
 3122 0240 032B     	 cmp r3,#3
 3123 0242 F0DD     	 ble .L291
 3124              	.LBE3:
 524:../cleanflight/src/main/interface/msp.c ****         }
 525:../cleanflight/src/main/interface/msp.c ****         break;
 3125              	 .loc 26 525 0 is_stmt 1
 3126 0244 58E2     	 b .L289
 3127              	.L287:
 526:../cleanflight/src/main/interface/msp.c **** 
 527:../cleanflight/src/main/interface/msp.c ****     case MSP_UID:
 528:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, U_ID_0);
 3128              	 .loc 26 528 0
 3129 0246 564B     	 ldr r3,.L305+28
 3130 0248 1B68     	 ldr r3,[r3]
 3131 024a B868     	 ldr r0,[r7,#8]
 3132 024c 1946     	 mov r1,r3
 3133 024e FFF7FEFF 	 bl sbufWriteU32
 529:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, U_ID_1);
 3134              	 .loc 26 529 0
 3135 0252 544B     	 ldr r3,.L305+32
 3136 0254 1B68     	 ldr r3,[r3]
 3137 0256 B868     	 ldr r0,[r7,#8]
 3138 0258 1946     	 mov r1,r3
 3139 025a FFF7FEFF 	 bl sbufWriteU32
 530:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, U_ID_2);
 3140              	 .loc 26 530 0
 3141 025e 524B     	 ldr r3,.L305+36
 3142 0260 1B68     	 ldr r3,[r3]
 3143 0262 B868     	 ldr r0,[r7,#8]
 3144 0264 1946     	 mov r1,r3
 3145 0266 FFF7FEFF 	 bl sbufWriteU32
 531:../cleanflight/src/main/interface/msp.c ****         break;
 3146              	 .loc 26 531 0
 3147 026a 45E2     	 b .L289
 3148              	.L278:
 532:../cleanflight/src/main/interface/msp.c **** 
 533:../cleanflight/src/main/interface/msp.c ****     case MSP_FEATURE_CONFIG:
 534:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, featureMask());
 3149              	 .loc 26 534 0
 3150 026c FFF7FEFF 	 bl featureMask
 3151 0270 0346     	 mov r3,r0
 3152 0272 B868     	 ldr r0,[r7,#8]
 3153 0274 1946     	 mov r1,r3
 3154 0276 FFF7FEFF 	 bl sbufWriteU32
 535:../cleanflight/src/main/interface/msp.c ****         break;
 3155              	 .loc 26 535 0
 3156 027a 3DE2     	 b .L289
 3157              	.L285:
 536:../cleanflight/src/main/interface/msp.c **** 
 537:../cleanflight/src/main/interface/msp.c **** #ifdef USE_BEEPER
 538:../cleanflight/src/main/interface/msp.c ****     case MSP_BEEPER_CONFIG:
 539:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, beeperConfig()->beeper_off_flags);
 540:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, beeperConfig()->dshotBeaconTone);
 541:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, beeperConfig()->dshotBeaconOffFlags);
 542:../cleanflight/src/main/interface/msp.c ****         break;
 543:../cleanflight/src/main/interface/msp.c **** #endif
 544:../cleanflight/src/main/interface/msp.c **** 
 545:../cleanflight/src/main/interface/msp.c ****     case MSP_BATTERY_STATE: {
 546:../cleanflight/src/main/interface/msp.c ****         // battery characteristics
 547:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, (uint8_t)constrain(getBatteryCellCount(), 0, 255)); // 0 indicates battery
 3158              	 .loc 26 547 0
 3159 027c FFF7FEFF 	 bl getBatteryCellCount
 3160 0280 0346     	 mov r3,r0
 3161 0282 1846     	 mov r0,r3
 3162 0284 0021     	 movs r1,#0
 3163 0286 FF22     	 movs r2,#255
 3164 0288 FFF7FEFF 	 bl constrain
 3165 028c 0346     	 mov r3,r0
 3166 028e DBB2     	 uxtb r3,r3
 3167 0290 B868     	 ldr r0,[r7,#8]
 3168 0292 1946     	 mov r1,r3
 3169 0294 FFF7FEFF 	 bl sbufWriteU8
 548:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, batteryConfig()->batteryCapacity); // in mAh
 3170              	 .loc 26 548 0
 3171 0298 FFF7FEFF 	 bl batteryConfig
 3172 029c 0346     	 mov r3,r0
 3173 029e B3F80730 	 ldrh r3,[r3,#7]
 3174 02a2 9BB2     	 uxth r3,r3
 3175 02a4 B868     	 ldr r0,[r7,#8]
 3176 02a6 1946     	 mov r1,r3
 3177 02a8 FFF7FEFF 	 bl sbufWriteU16
 549:../cleanflight/src/main/interface/msp.c **** 
 550:../cleanflight/src/main/interface/msp.c ****         // battery state
 551:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, (uint8_t)constrain(getBatteryVoltage(), 0, 255)); // in 0.1V steps
 3178              	 .loc 26 551 0
 3179 02ac FFF7FEFF 	 bl getBatteryVoltage
 3180 02b0 0346     	 mov r3,r0
 3181 02b2 1846     	 mov r0,r3
 3182 02b4 0021     	 movs r1,#0
 3183 02b6 FF22     	 movs r2,#255
 3184 02b8 FFF7FEFF 	 bl constrain
 3185 02bc 0346     	 mov r3,r0
 3186 02be DBB2     	 uxtb r3,r3
 3187 02c0 B868     	 ldr r0,[r7,#8]
 3188 02c2 1946     	 mov r1,r3
 3189 02c4 FFF7FEFF 	 bl sbufWriteU8
 552:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, (uint16_t)constrain(getMAhDrawn(), 0, 0xFFFF)); // milliamp hours drawn f
 3190              	 .loc 26 552 0
 3191 02c8 FFF7FEFF 	 bl getMAhDrawn
 3192 02cc 0346     	 mov r3,r0
 3193 02ce 1846     	 mov r0,r3
 3194 02d0 0021     	 movs r1,#0
 3195 02d2 4FF6FF72 	 movw r2,#65535
 3196 02d6 FFF7FEFF 	 bl constrain
 3197 02da 0346     	 mov r3,r0
 3198 02dc 9BB2     	 uxth r3,r3
 3199 02de B868     	 ldr r0,[r7,#8]
 3200 02e0 1946     	 mov r1,r3
 3201 02e2 FFF7FEFF 	 bl sbufWriteU16
 553:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, (int16_t)constrain(getAmperage(), -0x8000, 0x7FFF)); // send current in 0
 3202              	 .loc 26 553 0
 3203 02e6 FFF7FEFF 	 bl getAmperage
 3204 02ea 0346     	 mov r3,r0
 3205 02ec 1846     	 mov r0,r3
 3206 02ee 2A49     	 ldr r1,.L305+20
 3207 02f0 47F6FF72 	 movw r2,#32767
 3208 02f4 FFF7FEFF 	 bl constrain
 3209 02f8 0346     	 mov r3,r0
 3210 02fa 9BB2     	 uxth r3,r3
 3211 02fc B868     	 ldr r0,[r7,#8]
 3212 02fe 1946     	 mov r1,r3
 3213 0300 FFF7FEFF 	 bl sbufWriteU16
 554:../cleanflight/src/main/interface/msp.c **** 
 555:../cleanflight/src/main/interface/msp.c ****         // battery alerts
 556:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, (uint8_t)getBatteryState());
 3214              	 .loc 26 556 0
 3215 0304 FFF7FEFF 	 bl getBatteryState
 3216 0308 0346     	 mov r3,r0
 3217 030a B868     	 ldr r0,[r7,#8]
 3218 030c 1946     	 mov r1,r3
 3219 030e FFF7FEFF 	 bl sbufWriteU8
 557:../cleanflight/src/main/interface/msp.c ****         break;
 3220              	 .loc 26 557 0
 3221 0312 F1E1     	 b .L289
 3222              	.L280:
 3223              	.LBB4:
 558:../cleanflight/src/main/interface/msp.c ****     }
 559:../cleanflight/src/main/interface/msp.c **** 
 560:../cleanflight/src/main/interface/msp.c ****     case MSP_VOLTAGE_METERS: {
 561:../cleanflight/src/main/interface/msp.c ****         // write out id and voltage meter values, once for each meter we support
 562:../cleanflight/src/main/interface/msp.c ****         uint8_t count = supportedVoltageMeterCount;
 3224              	 .loc 26 562 0
 3225 0314 254B     	 ldr r3,.L305+40
 3226 0316 1B78     	 ldrb r3,[r3]
 3227 0318 87F83330 	 strb r3,[r7,#51]
 3228              	.LBB5:
 563:../cleanflight/src/main/interface/msp.c **** #ifdef USE_ESC_SENSOR
 564:../cleanflight/src/main/interface/msp.c ****         count -= VOLTAGE_METER_ID_ESC_COUNT - getMotorCount();
 565:../cleanflight/src/main/interface/msp.c **** #endif
 566:../cleanflight/src/main/interface/msp.c **** 
 567:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < count; i++) {
 3229              	 .loc 26 567 0
 3230 031c 0023     	 movs r3,#0
 3231 031e 3B65     	 str r3,[r7,#80]
 3232 0320 22E0     	 b .L292
 3233              	.L293:
 3234              	.LBB6:
 568:../cleanflight/src/main/interface/msp.c **** 
 569:../cleanflight/src/main/interface/msp.c ****             voltageMeter_t meter;
 570:../cleanflight/src/main/interface/msp.c ****             uint8_t id = (uint8_t)voltageMeterIds[i];
 3235              	 .loc 26 570 0 discriminator 3
 3236 0322 234A     	 ldr r2,.L305+44
 3237 0324 3B6D     	 ldr r3,[r7,#80]
 3238 0326 1344     	 add r3,r3,r2
 3239 0328 1B78     	 ldrb r3,[r3]
 3240 032a 87F83230 	 strb r3,[r7,#50]
 571:../cleanflight/src/main/interface/msp.c ****             voltageMeterRead(id, &meter);
 3241              	 .loc 26 571 0 discriminator 3
 3242 032e 97F83220 	 ldrb r2,[r7,#50]
 3243 0332 07F12003 	 add r3,r7,#32
 3244 0336 1046     	 mov r0,r2
 3245 0338 1946     	 mov r1,r3
 3246 033a FFF7FEFF 	 bl voltageMeterRead
 572:../cleanflight/src/main/interface/msp.c **** 
 573:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, id);
 3247              	 .loc 26 573 0 discriminator 3
 3248 033e 97F83230 	 ldrb r3,[r7,#50]
 3249 0342 B868     	 ldr r0,[r7,#8]
 3250 0344 1946     	 mov r1,r3
 3251 0346 FFF7FEFF 	 bl sbufWriteU8
 574:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, (uint8_t)constrain(meter.filtered, 0, 255));
 3252              	 .loc 26 574 0 discriminator 3
 3253 034a 3B8C     	 ldrh r3,[r7,#32]
 3254 034c 1846     	 mov r0,r3
 3255 034e 0021     	 movs r1,#0
 3256 0350 FF22     	 movs r2,#255
 3257 0352 FFF7FEFF 	 bl constrain
 3258 0356 0346     	 mov r3,r0
 3259 0358 DBB2     	 uxtb r3,r3
 3260 035a B868     	 ldr r0,[r7,#8]
 3261 035c 1946     	 mov r1,r3
 3262 035e FFF7FEFF 	 bl sbufWriteU8
 3263              	.LBE6:
 567:../cleanflight/src/main/interface/msp.c **** 
 3264              	 .loc 26 567 0 discriminator 3
 3265 0362 3B6D     	 ldr r3,[r7,#80]
 3266 0364 0133     	 adds r3,r3,#1
 3267 0366 3B65     	 str r3,[r7,#80]
 3268              	.L292:
 567:../cleanflight/src/main/interface/msp.c **** 
 3269              	 .loc 26 567 0 is_stmt 0 discriminator 1
 3270 0368 97F83320 	 ldrb r2,[r7,#51]
 3271 036c 3B6D     	 ldr r3,[r7,#80]
 3272 036e 9A42     	 cmp r2,r3
 3273 0370 D7DC     	 bgt .L293
 3274              	.LBE5:
 575:../cleanflight/src/main/interface/msp.c ****         }
 576:../cleanflight/src/main/interface/msp.c ****         break;
 3275              	 .loc 26 576 0 is_stmt 1
 3276 0372 C1E1     	 b .L289
 3277              	.L286:
 3278              	.LBE4:
 3279              	.LBB7:
 577:../cleanflight/src/main/interface/msp.c ****     }
 578:../cleanflight/src/main/interface/msp.c **** 
 579:../cleanflight/src/main/interface/msp.c ****     case MSP_CURRENT_METERS: {
 580:../cleanflight/src/main/interface/msp.c ****         // write out id and current meter values, once for each meter we support
 581:../cleanflight/src/main/interface/msp.c ****         uint8_t count = supportedCurrentMeterCount;
 3280              	 .loc 26 581 0
 3281 0374 0F4B     	 ldr r3,.L305+48
 3282 0376 1B78     	 ldrb r3,[r3]
 3283 0378 87F83130 	 strb r3,[r7,#49]
 3284              	.LBB8:
 582:../cleanflight/src/main/interface/msp.c **** #ifdef USE_ESC_SENSOR
 583:../cleanflight/src/main/interface/msp.c ****         count -= VOLTAGE_METER_ID_ESC_COUNT - getMotorCount();
 584:../cleanflight/src/main/interface/msp.c **** #endif
 585:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < count; i++) {
 3285              	 .loc 26 585 0
 3286 037c 0023     	 movs r3,#0
 3287 037e FB64     	 str r3,[r7,#76]
 3288 0380 4FE0     	 b .L294
 3289              	.L306:
 3290 0382 00BF     	 .align 2
 3291              	.L305:
 3292 0384 00000000 	 .word .LC0
 3293 0388 00000000 	 .word targetName
 3294 038c 00000000 	 .word buildDate
 3295 0390 00000000 	 .word buildTime
 3296 0394 00000000 	 .word shortGitRevision
 3297 0398 0080FFFF 	 .word -32768
 3298 039c 00000000 	 .word debug
 3299 03a0 00400050 	 .word 1342193664
 3300 03a4 04400050 	 .word 1342193668
 3301 03a8 08400050 	 .word 1342193672
 3302 03ac 00000000 	 .word supportedVoltageMeterCount
 3303 03b0 00000000 	 .word voltageMeterIds
 3304 03b4 00000000 	 .word supportedCurrentMeterCount
 3305              	.L295:
 3306              	.LBB9:
 586:../cleanflight/src/main/interface/msp.c **** 
 587:../cleanflight/src/main/interface/msp.c ****             currentMeter_t meter;
 588:../cleanflight/src/main/interface/msp.c ****             uint8_t id = (uint8_t)currentMeterIds[i];
 3307              	 .loc 26 588 0 discriminator 3
 3308 03b8 BD4A     	 ldr r2,.L307
 3309 03ba FB6C     	 ldr r3,[r7,#76]
 3310 03bc 1344     	 add r3,r3,r2
 3311 03be 1B78     	 ldrb r3,[r3]
 3312 03c0 87F83030 	 strb r3,[r7,#48]
 589:../cleanflight/src/main/interface/msp.c ****             currentMeterRead(id, &meter);
 3313              	 .loc 26 589 0 discriminator 3
 3314 03c4 97F83020 	 ldrb r2,[r7,#48]
 3315 03c8 07F11403 	 add r3,r7,#20
 3316 03cc 1046     	 mov r0,r2
 3317 03ce 1946     	 mov r1,r3
 3318 03d0 FFF7FEFF 	 bl currentMeterRead
 590:../cleanflight/src/main/interface/msp.c **** 
 591:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, id);
 3319              	 .loc 26 591 0 discriminator 3
 3320 03d4 97F83030 	 ldrb r3,[r7,#48]
 3321 03d8 B868     	 ldr r0,[r7,#8]
 3322 03da 1946     	 mov r1,r3
 3323 03dc FFF7FEFF 	 bl sbufWriteU8
 592:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, (uint16_t)constrain(meter.mAhDrawn, 0, 0xFFFF)); // milliamp hours dr
 3324              	 .loc 26 592 0 discriminator 3
 3325 03e0 FB69     	 ldr r3,[r7,#28]
 3326 03e2 1846     	 mov r0,r3
 3327 03e4 0021     	 movs r1,#0
 3328 03e6 4FF6FF72 	 movw r2,#65535
 3329 03ea FFF7FEFF 	 bl constrain
 3330 03ee 0346     	 mov r3,r0
 3331 03f0 9BB2     	 uxth r3,r3
 3332 03f2 B868     	 ldr r0,[r7,#8]
 3333 03f4 1946     	 mov r1,r3
 3334 03f6 FFF7FEFF 	 bl sbufWriteU16
 593:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, (uint16_t)constrain(meter.amperage * 10, 0, 0xFFFF)); // send amperag
 3335              	 .loc 26 593 0 discriminator 3
 3336 03fa 7A69     	 ldr r2,[r7,#20]
 3337 03fc 1346     	 mov r3,r2
 3338 03fe 9B00     	 lsls r3,r3,#2
 3339 0400 1344     	 add r3,r3,r2
 3340 0402 5B00     	 lsls r3,r3,#1
 3341 0404 1846     	 mov r0,r3
 3342 0406 0021     	 movs r1,#0
 3343 0408 4FF6FF72 	 movw r2,#65535
 3344 040c FFF7FEFF 	 bl constrain
 3345 0410 0346     	 mov r3,r0
 3346 0412 9BB2     	 uxth r3,r3
 3347 0414 B868     	 ldr r0,[r7,#8]
 3348 0416 1946     	 mov r1,r3
 3349 0418 FFF7FEFF 	 bl sbufWriteU16
 3350              	.LBE9:
 585:../cleanflight/src/main/interface/msp.c **** 
 3351              	 .loc 26 585 0 discriminator 3
 3352 041c FB6C     	 ldr r3,[r7,#76]
 3353 041e 0133     	 adds r3,r3,#1
 3354 0420 FB64     	 str r3,[r7,#76]
 3355              	.L294:
 585:../cleanflight/src/main/interface/msp.c **** 
 3356              	 .loc 26 585 0 is_stmt 0 discriminator 1
 3357 0422 97F83120 	 ldrb r2,[r7,#49]
 3358 0426 FB6C     	 ldr r3,[r7,#76]
 3359 0428 9A42     	 cmp r2,r3
 3360 042a C5DC     	 bgt .L295
 3361              	.LBE8:
 594:../cleanflight/src/main/interface/msp.c ****         }
 595:../cleanflight/src/main/interface/msp.c ****         break;
 3362              	 .loc 26 595 0 is_stmt 1
 3363 042c 64E1     	 b .L289
 3364              	.L268:
 3365              	.LBE7:
 596:../cleanflight/src/main/interface/msp.c ****     }
 597:../cleanflight/src/main/interface/msp.c **** 
 598:../cleanflight/src/main/interface/msp.c ****     case MSP_VOLTAGE_METER_CONFIG:
 599:../cleanflight/src/main/interface/msp.c ****         // by using a sensor type and a sub-frame length it's possible to configure any type of vol
 600:../cleanflight/src/main/interface/msp.c ****         // e.g. an i2c/spi/can sensor or any sensor not built directly into the FC such as ESC/RX/S
 601:../cleanflight/src/main/interface/msp.c ****         // different configuration requirements.
 602:../cleanflight/src/main/interface/msp.c ****         BUILD_BUG_ON(VOLTAGE_SENSOR_ADC_VBAT != 0); // VOLTAGE_SENSOR_ADC_VBAT should be the first 
 603:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, MAX_VOLTAGE_SENSOR_ADC); // voltage meters in payload
 3366              	 .loc 26 603 0
 3367 042e B868     	 ldr r0,[r7,#8]
 3368 0430 0121     	 movs r1,#1
 3369 0432 FFF7FEFF 	 bl sbufWriteU8
 3370              	.LBB10:
 604:../cleanflight/src/main/interface/msp.c ****         for (int i = VOLTAGE_SENSOR_ADC_VBAT; i < MAX_VOLTAGE_SENSOR_ADC; i++) {
 3371              	 .loc 26 604 0
 3372 0436 0023     	 movs r3,#0
 3373 0438 BB64     	 str r3,[r7,#72]
 3374 043a 32E0     	 b .L296
 3375              	.L297:
 3376              	.LBB11:
 605:../cleanflight/src/main/interface/msp.c ****             const uint8_t adcSensorSubframeLength = 1 + 1 + 1 + 1 + 1; // length of id, type, vbats
 3377              	 .loc 26 605 0 discriminator 3
 3378 043c 0523     	 movs r3,#5
 3379 043e 87F82F30 	 strb r3,[r7,#47]
 606:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, adcSensorSubframeLength); // ADC sensor sub-frame length
 3380              	 .loc 26 606 0 discriminator 3
 3381 0442 97F82F30 	 ldrb r3,[r7,#47]
 3382 0446 B868     	 ldr r0,[r7,#8]
 3383 0448 1946     	 mov r1,r3
 3384 044a FFF7FEFF 	 bl sbufWriteU8
 607:../cleanflight/src/main/interface/msp.c **** 
 608:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, voltageMeterADCtoIDMap[i]); // id of the sensor
 3385              	 .loc 26 608 0 discriminator 3
 3386 044e 994A     	 ldr r2,.L307+4
 3387 0450 BB6C     	 ldr r3,[r7,#72]
 3388 0452 1344     	 add r3,r3,r2
 3389 0454 1B78     	 ldrb r3,[r3]
 3390 0456 B868     	 ldr r0,[r7,#8]
 3391 0458 1946     	 mov r1,r3
 3392 045a FFF7FEFF 	 bl sbufWriteU8
 609:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, VOLTAGE_SENSOR_TYPE_ADC_RESISTOR_DIVIDER); // indicate the type of sen
 3393              	 .loc 26 609 0 discriminator 3
 3394 045e B868     	 ldr r0,[r7,#8]
 3395 0460 0021     	 movs r1,#0
 3396 0462 FFF7FEFF 	 bl sbufWriteU8
 610:../cleanflight/src/main/interface/msp.c **** 
 611:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, voltageSensorADCConfig(i)->vbatscale);
 3397              	 .loc 26 611 0 discriminator 3
 3398 0466 B86C     	 ldr r0,[r7,#72]
 3399 0468 FFF7FEFF 	 bl voltageSensorADCConfig
 3400 046c 0346     	 mov r3,r0
 3401 046e 1B78     	 ldrb r3,[r3]
 3402 0470 B868     	 ldr r0,[r7,#8]
 3403 0472 1946     	 mov r1,r3
 3404 0474 FFF7FEFF 	 bl sbufWriteU8
 612:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, voltageSensorADCConfig(i)->vbatresdivval);
 3405              	 .loc 26 612 0 discriminator 3
 3406 0478 B86C     	 ldr r0,[r7,#72]
 3407 047a FFF7FEFF 	 bl voltageSensorADCConfig
 3408 047e 0346     	 mov r3,r0
 3409 0480 5B78     	 ldrb r3,[r3,#1]
 3410 0482 B868     	 ldr r0,[r7,#8]
 3411 0484 1946     	 mov r1,r3
 3412 0486 FFF7FEFF 	 bl sbufWriteU8
 613:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, voltageSensorADCConfig(i)->vbatresdivmultiplier);
 3413              	 .loc 26 613 0 discriminator 3
 3414 048a B86C     	 ldr r0,[r7,#72]
 3415 048c FFF7FEFF 	 bl voltageSensorADCConfig
 3416 0490 0346     	 mov r3,r0
 3417 0492 9B78     	 ldrb r3,[r3,#2]
 3418 0494 B868     	 ldr r0,[r7,#8]
 3419 0496 1946     	 mov r1,r3
 3420 0498 FFF7FEFF 	 bl sbufWriteU8
 3421              	.LBE11:
 604:../cleanflight/src/main/interface/msp.c ****             const uint8_t adcSensorSubframeLength = 1 + 1 + 1 + 1 + 1; // length of id, type, vbats
 3422              	 .loc 26 604 0 discriminator 3
 3423 049c BB6C     	 ldr r3,[r7,#72]
 3424 049e 0133     	 adds r3,r3,#1
 3425 04a0 BB64     	 str r3,[r7,#72]
 3426              	.L296:
 604:../cleanflight/src/main/interface/msp.c ****             const uint8_t adcSensorSubframeLength = 1 + 1 + 1 + 1 + 1; // length of id, type, vbats
 3427              	 .loc 26 604 0 is_stmt 0 discriminator 1
 3428 04a2 BB6C     	 ldr r3,[r7,#72]
 3429 04a4 002B     	 cmp r3,#0
 3430 04a6 C9DD     	 ble .L297
 3431              	.LBE10:
 614:../cleanflight/src/main/interface/msp.c ****         }
 615:../cleanflight/src/main/interface/msp.c ****         // if we had any other voltage sensors, this is where we would output any needed configurat
 616:../cleanflight/src/main/interface/msp.c ****         break;
 3432              	 .loc 26 616 0 is_stmt 1
 3433 04a8 26E1     	 b .L289
 3434              	.L279:
 3435              	.LBB12:
 617:../cleanflight/src/main/interface/msp.c **** 
 618:../cleanflight/src/main/interface/msp.c ****     case MSP_CURRENT_METER_CONFIG: {
 619:../cleanflight/src/main/interface/msp.c ****         // the ADC and VIRTUAL sensors have the same configuration requirements, however this API r
 620:../cleanflight/src/main/interface/msp.c ****         // that this situation may change and allows us to support configuration of any current sen
 621:../cleanflight/src/main/interface/msp.c ****         // specialist configuration requirements.
 622:../cleanflight/src/main/interface/msp.c **** 
 623:../cleanflight/src/main/interface/msp.c ****         int currentMeterCount = 1;
 3436              	 .loc 26 623 0
 3437 04aa 0123     	 movs r3,#1
 3438 04ac BB62     	 str r3,[r7,#40]
 624:../cleanflight/src/main/interface/msp.c **** 
 625:../cleanflight/src/main/interface/msp.c **** #ifdef USE_VIRTUAL_CURRENT_METER
 626:../cleanflight/src/main/interface/msp.c ****         currentMeterCount++;
 3439              	 .loc 26 626 0
 3440 04ae BB6A     	 ldr r3,[r7,#40]
 3441 04b0 0133     	 adds r3,r3,#1
 3442 04b2 BB62     	 str r3,[r7,#40]
 627:../cleanflight/src/main/interface/msp.c **** #endif
 628:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentMeterCount);
 3443              	 .loc 26 628 0
 3444 04b4 BB6A     	 ldr r3,[r7,#40]
 3445 04b6 DBB2     	 uxtb r3,r3
 3446 04b8 B868     	 ldr r0,[r7,#8]
 3447 04ba 1946     	 mov r1,r3
 3448 04bc FFF7FEFF 	 bl sbufWriteU8
 629:../cleanflight/src/main/interface/msp.c **** 
 630:../cleanflight/src/main/interface/msp.c ****         const uint8_t adcSensorSubframeLength = 1 + 1 + 2 + 2; // length of id, type, scale, offset
 3449              	 .loc 26 630 0
 3450 04c0 0623     	 movs r3,#6
 3451 04c2 87F82730 	 strb r3,[r7,#39]
 631:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, adcSensorSubframeLength);
 3452              	 .loc 26 631 0
 3453 04c6 97F82730 	 ldrb r3,[r7,#39]
 3454 04ca B868     	 ldr r0,[r7,#8]
 3455 04cc 1946     	 mov r1,r3
 3456 04ce FFF7FEFF 	 bl sbufWriteU8
 632:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, CURRENT_METER_ID_BATTERY_1); // the id of the meter
 3457              	 .loc 26 632 0
 3458 04d2 B868     	 ldr r0,[r7,#8]
 3459 04d4 0A21     	 movs r1,#10
 3460 04d6 FFF7FEFF 	 bl sbufWriteU8
 633:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, CURRENT_SENSOR_ADC); // indicate the type of sensor that the next part of 
 3461              	 .loc 26 633 0
 3462 04da B868     	 ldr r0,[r7,#8]
 3463 04dc 0121     	 movs r1,#1
 3464 04de FFF7FEFF 	 bl sbufWriteU8
 634:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentSensorADCConfig()->scale);
 3465              	 .loc 26 634 0
 3466 04e2 FFF7FEFF 	 bl currentSensorADCConfig
 3467 04e6 0346     	 mov r3,r0
 3468 04e8 B3F90030 	 ldrsh r3,[r3]
 3469 04ec 9BB2     	 uxth r3,r3
 3470 04ee 9BB2     	 uxth r3,r3
 3471 04f0 B868     	 ldr r0,[r7,#8]
 3472 04f2 1946     	 mov r1,r3
 3473 04f4 FFF7FEFF 	 bl sbufWriteU16
 635:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentSensorADCConfig()->offset);
 3474              	 .loc 26 635 0
 3475 04f8 FFF7FEFF 	 bl currentSensorADCConfig
 3476 04fc 0346     	 mov r3,r0
 3477 04fe B3F90230 	 ldrsh r3,[r3,#2]
 3478 0502 9BB2     	 uxth r3,r3
 3479 0504 9BB2     	 uxth r3,r3
 3480 0506 B868     	 ldr r0,[r7,#8]
 3481 0508 1946     	 mov r1,r3
 3482 050a FFF7FEFF 	 bl sbufWriteU16
 636:../cleanflight/src/main/interface/msp.c **** 
 637:../cleanflight/src/main/interface/msp.c **** #ifdef USE_VIRTUAL_CURRENT_METER
 638:../cleanflight/src/main/interface/msp.c ****         const int8_t virtualSensorSubframeLength = 1 + 1 + 2 + 2; // length of id, type, scale, off
 3483              	 .loc 26 638 0
 3484 050e 0623     	 movs r3,#6
 3485 0510 87F82630 	 strb r3,[r7,#38]
 639:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, virtualSensorSubframeLength);
 3486              	 .loc 26 639 0
 3487 0514 97F82630 	 ldrb r3,[r7,#38]
 3488 0518 B868     	 ldr r0,[r7,#8]
 3489 051a 1946     	 mov r1,r3
 3490 051c FFF7FEFF 	 bl sbufWriteU8
 640:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, CURRENT_METER_ID_VIRTUAL_1); // the id of the meter
 3491              	 .loc 26 640 0
 3492 0520 B868     	 ldr r0,[r7,#8]
 3493 0522 5021     	 movs r1,#80
 3494 0524 FFF7FEFF 	 bl sbufWriteU8
 641:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, CURRENT_SENSOR_VIRTUAL); // indicate the type of sensor that the next part
 3495              	 .loc 26 641 0
 3496 0528 B868     	 ldr r0,[r7,#8]
 3497 052a 0021     	 movs r1,#0
 3498 052c FFF7FEFF 	 bl sbufWriteU8
 642:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentSensorVirtualConfig()->scale);
 3499              	 .loc 26 642 0
 3500 0530 FFF7FEFF 	 bl currentSensorVirtualConfig
 3501 0534 0346     	 mov r3,r0
 3502 0536 B3F90030 	 ldrsh r3,[r3]
 3503 053a 9BB2     	 uxth r3,r3
 3504 053c 9BB2     	 uxth r3,r3
 3505 053e B868     	 ldr r0,[r7,#8]
 3506 0540 1946     	 mov r1,r3
 3507 0542 FFF7FEFF 	 bl sbufWriteU16
 643:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentSensorVirtualConfig()->offset);
 3508              	 .loc 26 643 0
 3509 0546 FFF7FEFF 	 bl currentSensorVirtualConfig
 3510 054a 0346     	 mov r3,r0
 3511 054c 5B88     	 ldrh r3,[r3,#2]
 3512 054e 9BB2     	 uxth r3,r3
 3513 0550 B868     	 ldr r0,[r7,#8]
 3514 0552 1946     	 mov r1,r3
 3515 0554 FFF7FEFF 	 bl sbufWriteU16
 644:../cleanflight/src/main/interface/msp.c **** #endif
 645:../cleanflight/src/main/interface/msp.c **** 
 646:../cleanflight/src/main/interface/msp.c ****         // if we had any other current sensors, this is where we would output any needed configurat
 647:../cleanflight/src/main/interface/msp.c ****         break;
 3516              	 .loc 26 647 0
 3517 0558 CEE0     	 b .L289
 3518              	.L275:
 3519              	.LBE12:
 648:../cleanflight/src/main/interface/msp.c ****     }
 649:../cleanflight/src/main/interface/msp.c **** 
 650:../cleanflight/src/main/interface/msp.c ****     case MSP_BATTERY_CONFIG:
 651:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, batteryConfig()->vbatmincellvoltage);
 3520              	 .loc 26 651 0
 3521 055a FFF7FEFF 	 bl batteryConfig
 3522 055e 0346     	 mov r3,r0
 3523 0560 5B78     	 ldrb r3,[r3,#1]
 3524 0562 B868     	 ldr r0,[r7,#8]
 3525 0564 1946     	 mov r1,r3
 3526 0566 FFF7FEFF 	 bl sbufWriteU8
 652:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, batteryConfig()->vbatmaxcellvoltage);
 3527              	 .loc 26 652 0
 3528 056a FFF7FEFF 	 bl batteryConfig
 3529 056e 0346     	 mov r3,r0
 3530 0570 1B78     	 ldrb r3,[r3]
 3531 0572 B868     	 ldr r0,[r7,#8]
 3532 0574 1946     	 mov r1,r3
 3533 0576 FFF7FEFF 	 bl sbufWriteU8
 653:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, batteryConfig()->vbatwarningcellvoltage);
 3534              	 .loc 26 653 0
 3535 057a FFF7FEFF 	 bl batteryConfig
 3536 057e 0346     	 mov r3,r0
 3537 0580 9B78     	 ldrb r3,[r3,#2]
 3538 0582 B868     	 ldr r0,[r7,#8]
 3539 0584 1946     	 mov r1,r3
 3540 0586 FFF7FEFF 	 bl sbufWriteU8
 654:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, batteryConfig()->batteryCapacity);
 3541              	 .loc 26 654 0
 3542 058a FFF7FEFF 	 bl batteryConfig
 3543 058e 0346     	 mov r3,r0
 3544 0590 B3F80730 	 ldrh r3,[r3,#7]
 3545 0594 9BB2     	 uxth r3,r3
 3546 0596 B868     	 ldr r0,[r7,#8]
 3547 0598 1946     	 mov r1,r3
 3548 059a FFF7FEFF 	 bl sbufWriteU16
 655:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, batteryConfig()->voltageMeterSource);
 3549              	 .loc 26 655 0
 3550 059e FFF7FEFF 	 bl batteryConfig
 3551 05a2 0346     	 mov r3,r0
 3552 05a4 5B79     	 ldrb r3,[r3,#5]
 3553 05a6 B868     	 ldr r0,[r7,#8]
 3554 05a8 1946     	 mov r1,r3
 3555 05aa FFF7FEFF 	 bl sbufWriteU8
 656:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, batteryConfig()->currentMeterSource);
 3556              	 .loc 26 656 0
 3557 05ae FFF7FEFF 	 bl batteryConfig
 3558 05b2 0346     	 mov r3,r0
 3559 05b4 9B79     	 ldrb r3,[r3,#6]
 3560 05b6 B868     	 ldr r0,[r7,#8]
 3561 05b8 1946     	 mov r1,r3
 3562 05ba FFF7FEFF 	 bl sbufWriteU8
 657:../cleanflight/src/main/interface/msp.c ****         break;
 3563              	 .loc 26 657 0
 3564 05be 9BE0     	 b .L289
 3565              	.L284:
 658:../cleanflight/src/main/interface/msp.c **** 
 659:../cleanflight/src/main/interface/msp.c ****     case MSP_TRANSPONDER_CONFIG: {
 660:../cleanflight/src/main/interface/msp.c **** #ifdef USE_TRANSPONDER
 661:../cleanflight/src/main/interface/msp.c ****         // Backward compatibility to BFC 3.1.1 is lost for this message type
 662:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, TRANSPONDER_PROVIDER_COUNT);
 663:../cleanflight/src/main/interface/msp.c ****         for (unsigned int i = 0; i < TRANSPONDER_PROVIDER_COUNT; i++) {
 664:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, transponderRequirements[i].provider);
 665:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, transponderRequirements[i].dataLength);
 666:../cleanflight/src/main/interface/msp.c ****         }
 667:../cleanflight/src/main/interface/msp.c **** 
 668:../cleanflight/src/main/interface/msp.c ****         uint8_t provider = transponderConfig()->provider;
 669:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, provider);
 670:../cleanflight/src/main/interface/msp.c **** 
 671:../cleanflight/src/main/interface/msp.c ****         if (provider) {
 672:../cleanflight/src/main/interface/msp.c ****             uint8_t requirementIndex = provider - 1;
 673:../cleanflight/src/main/interface/msp.c ****             uint8_t providerDataLength = transponderRequirements[requirementIndex].dataLength;
 674:../cleanflight/src/main/interface/msp.c **** 
 675:../cleanflight/src/main/interface/msp.c ****             for (unsigned int i = 0; i < providerDataLength; i++) {
 676:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, transponderConfig()->data[i]);
 677:../cleanflight/src/main/interface/msp.c ****             }
 678:../cleanflight/src/main/interface/msp.c ****         }
 679:../cleanflight/src/main/interface/msp.c **** #else
 680:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0); // no providers
 3566              	 .loc 26 680 0
 3567 05c0 B868     	 ldr r0,[r7,#8]
 3568 05c2 0021     	 movs r1,#0
 3569 05c4 FFF7FEFF 	 bl sbufWriteU8
 681:../cleanflight/src/main/interface/msp.c **** #endif
 682:../cleanflight/src/main/interface/msp.c ****         break;
 3570              	 .loc 26 682 0
 3571 05c8 96E0     	 b .L289
 3572              	.L282:
 3573              	.LBB13:
 683:../cleanflight/src/main/interface/msp.c ****     }
 684:../cleanflight/src/main/interface/msp.c **** 
 685:../cleanflight/src/main/interface/msp.c ****     case MSP_OSD_CONFIG: {
 686:../cleanflight/src/main/interface/msp.c **** #define OSD_FLAGS_OSD_FEATURE           (1 << 0)
 687:../cleanflight/src/main/interface/msp.c **** #define OSD_FLAGS_OSD_SLAVE             (1 << 1)
 688:../cleanflight/src/main/interface/msp.c **** #define OSD_FLAGS_RESERVED_1            (1 << 2)
 689:../cleanflight/src/main/interface/msp.c **** #define OSD_FLAGS_RESERVED_2            (1 << 3)
 690:../cleanflight/src/main/interface/msp.c **** #define OSD_FLAGS_OSD_HARDWARE_MAX_7456 (1 << 4)
 691:../cleanflight/src/main/interface/msp.c **** 
 692:../cleanflight/src/main/interface/msp.c ****         uint8_t osdFlags = 0;
 3574              	 .loc 26 692 0
 3575 05ca 0023     	 movs r3,#0
 3576 05cc 87F82530 	 strb r3,[r7,#37]
 693:../cleanflight/src/main/interface/msp.c **** #if defined(USE_OSD)
 694:../cleanflight/src/main/interface/msp.c ****         osdFlags |= OSD_FLAGS_OSD_FEATURE;
 3577              	 .loc 26 694 0
 3578 05d0 97F82530 	 ldrb r3,[r7,#37]
 3579 05d4 43F00103 	 orr r3,r3,#1
 3580 05d8 87F82530 	 strb r3,[r7,#37]
 695:../cleanflight/src/main/interface/msp.c **** #endif
 696:../cleanflight/src/main/interface/msp.c **** #if defined(USE_OSD_SLAVE)
 697:../cleanflight/src/main/interface/msp.c ****         osdFlags |= OSD_FLAGS_OSD_SLAVE;
 698:../cleanflight/src/main/interface/msp.c **** #endif
 699:../cleanflight/src/main/interface/msp.c **** #ifdef USE_MAX7456
 700:../cleanflight/src/main/interface/msp.c ****         osdFlags |= OSD_FLAGS_OSD_HARDWARE_MAX_7456;
 701:../cleanflight/src/main/interface/msp.c **** #endif
 702:../cleanflight/src/main/interface/msp.c **** 
 703:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, osdFlags);
 3581              	 .loc 26 703 0
 3582 05dc 97F82530 	 ldrb r3,[r7,#37]
 3583 05e0 B868     	 ldr r0,[r7,#8]
 3584 05e2 1946     	 mov r1,r3
 3585 05e4 FFF7FEFF 	 bl sbufWriteU8
 704:../cleanflight/src/main/interface/msp.c **** 
 705:../cleanflight/src/main/interface/msp.c **** #ifdef USE_MAX7456
 706:../cleanflight/src/main/interface/msp.c ****         // send video system (AUTO/PAL/NTSC)
 707:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, vcdProfile()->video_system);
 708:../cleanflight/src/main/interface/msp.c **** #else
 709:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
 3586              	 .loc 26 709 0
 3587 05e8 B868     	 ldr r0,[r7,#8]
 3588 05ea 0021     	 movs r1,#0
 3589 05ec FFF7FEFF 	 bl sbufWriteU8
 710:../cleanflight/src/main/interface/msp.c **** #endif
 711:../cleanflight/src/main/interface/msp.c **** 
 712:../cleanflight/src/main/interface/msp.c **** #ifdef USE_OSD
 713:../cleanflight/src/main/interface/msp.c ****         // OSD specific, not applicable to OSD slaves.
 714:../cleanflight/src/main/interface/msp.c **** 
 715:../cleanflight/src/main/interface/msp.c ****         // Configuration
 716:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, osdConfig()->units);
 3590              	 .loc 26 716 0
 3591 05f0 FFF7FEFF 	 bl osdConfig
 3592 05f4 0346     	 mov r3,r0
 3593 05f6 93F85B30 	 ldrb r3,[r3,#91]
 3594 05fa B868     	 ldr r0,[r7,#8]
 3595 05fc 1946     	 mov r1,r3
 3596 05fe FFF7FEFF 	 bl sbufWriteU8
 717:../cleanflight/src/main/interface/msp.c **** 
 718:../cleanflight/src/main/interface/msp.c ****         // Alarms
 719:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, osdConfig()->rssi_alarm);
 3597              	 .loc 26 719 0
 3598 0602 FFF7FEFF 	 bl osdConfig
 3599 0606 0346     	 mov r3,r0
 3600 0608 93F85A30 	 ldrb r3,[r3,#90]
 3601 060c B868     	 ldr r0,[r7,#8]
 3602 060e 1946     	 mov r1,r3
 3603 0610 FFF7FEFF 	 bl sbufWriteU8
 720:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, osdConfig()->cap_alarm);
 3604              	 .loc 26 720 0
 3605 0614 FFF7FEFF 	 bl osdConfig
 3606 0618 0346     	 mov r3,r0
 3607 061a B3F85630 	 ldrh r3,[r3,#86]
 3608 061e 9BB2     	 uxth r3,r3
 3609 0620 B868     	 ldr r0,[r7,#8]
 3610 0622 1946     	 mov r1,r3
 3611 0624 FFF7FEFF 	 bl sbufWriteU16
 721:../cleanflight/src/main/interface/msp.c **** 
 722:../cleanflight/src/main/interface/msp.c ****         // Reuse old timer alarm (U16) as OSD_ITEM_COUNT
 723:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
 3612              	 .loc 26 723 0
 3613 0628 B868     	 ldr r0,[r7,#8]
 3614 062a 0021     	 movs r1,#0
 3615 062c FFF7FEFF 	 bl sbufWriteU8
 724:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, OSD_ITEM_COUNT);
 3616              	 .loc 26 724 0
 3617 0630 B868     	 ldr r0,[r7,#8]
 3618 0632 2B21     	 movs r1,#43
 3619 0634 FFF7FEFF 	 bl sbufWriteU8
 725:../cleanflight/src/main/interface/msp.c **** 
 726:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, osdConfig()->alt_alarm);
 3620              	 .loc 26 726 0
 3621 0638 FFF7FEFF 	 bl osdConfig
 3622 063c 0346     	 mov r3,r0
 3623 063e B3F85830 	 ldrh r3,[r3,#88]
 3624 0642 9BB2     	 uxth r3,r3
 3625 0644 B868     	 ldr r0,[r7,#8]
 3626 0646 1946     	 mov r1,r3
 3627 0648 FFF7FEFF 	 bl sbufWriteU16
 3628              	.LBB14:
 727:../cleanflight/src/main/interface/msp.c **** 
 728:../cleanflight/src/main/interface/msp.c ****         // Element position and visibility
 729:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < OSD_ITEM_COUNT; i++) {
 3629              	 .loc 26 729 0
 3630 064c 0023     	 movs r3,#0
 3631 064e 7B64     	 str r3,[r7,#68]
 3632 0650 0DE0     	 b .L298
 3633              	.L299:
 730:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, osdConfig()->item_pos[i]);
 3634              	 .loc 26 730 0 discriminator 3
 3635 0652 FFF7FEFF 	 bl osdConfig
 3636 0656 0246     	 mov r2,r0
 3637 0658 7B6C     	 ldr r3,[r7,#68]
 3638 065a 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 3639 065e 9BB2     	 uxth r3,r3
 3640 0660 B868     	 ldr r0,[r7,#8]
 3641 0662 1946     	 mov r1,r3
 3642 0664 FFF7FEFF 	 bl sbufWriteU16
 729:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, osdConfig()->item_pos[i]);
 3643              	 .loc 26 729 0 discriminator 3
 3644 0668 7B6C     	 ldr r3,[r7,#68]
 3645 066a 0133     	 adds r3,r3,#1
 3646 066c 7B64     	 str r3,[r7,#68]
 3647              	.L298:
 729:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, osdConfig()->item_pos[i]);
 3648              	 .loc 26 729 0 is_stmt 0 discriminator 1
 3649 066e 7B6C     	 ldr r3,[r7,#68]
 3650 0670 2A2B     	 cmp r3,#42
 3651 0672 EEDD     	 ble .L299
 3652              	.LBE14:
 731:../cleanflight/src/main/interface/msp.c ****         }
 732:../cleanflight/src/main/interface/msp.c **** 
 733:../cleanflight/src/main/interface/msp.c ****         // Post flight statistics
 734:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, OSD_STAT_COUNT);
 3653              	 .loc 26 734 0 is_stmt 1
 3654 0674 B868     	 ldr r0,[r7,#8]
 3655 0676 0E21     	 movs r1,#14
 3656 0678 FFF7FEFF 	 bl sbufWriteU8
 3657              	.LBB15:
 735:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < OSD_STAT_COUNT; i++ ) {
 3658              	 .loc 26 735 0
 3659 067c 0023     	 movs r3,#0
 3660 067e 3B64     	 str r3,[r7,#64]
 3661 0680 0CE0     	 b .L300
 3662              	.L301:
 736:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, osdStatGetState(i));
 3663              	 .loc 26 736 0 discriminator 3
 3664 0682 3B6C     	 ldr r3,[r7,#64]
 3665 0684 DBB2     	 uxtb r3,r3
 3666 0686 1846     	 mov r0,r3
 3667 0688 FFF7FEFF 	 bl osdStatGetState
 3668 068c 0346     	 mov r3,r0
 3669 068e B868     	 ldr r0,[r7,#8]
 3670 0690 1946     	 mov r1,r3
 3671 0692 FFF7FEFF 	 bl sbufWriteU8
 735:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < OSD_STAT_COUNT; i++ ) {
 3672              	 .loc 26 735 0 discriminator 3
 3673 0696 3B6C     	 ldr r3,[r7,#64]
 3674 0698 0133     	 adds r3,r3,#1
 3675 069a 3B64     	 str r3,[r7,#64]
 3676              	.L300:
 735:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < OSD_STAT_COUNT; i++ ) {
 3677              	 .loc 26 735 0 is_stmt 0 discriminator 1
 3678 069c 3B6C     	 ldr r3,[r7,#64]
 3679 069e 0D2B     	 cmp r3,#13
 3680 06a0 EFDD     	 ble .L301
 3681              	.LBE15:
 737:../cleanflight/src/main/interface/msp.c ****         }
 738:../cleanflight/src/main/interface/msp.c **** 
 739:../cleanflight/src/main/interface/msp.c ****         // Timers
 740:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, OSD_TIMER_COUNT);
 3682              	 .loc 26 740 0 is_stmt 1
 3683 06a2 B868     	 ldr r0,[r7,#8]
 3684 06a4 0221     	 movs r1,#2
 3685 06a6 FFF7FEFF 	 bl sbufWriteU8
 3686              	.LBB16:
 741:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < OSD_TIMER_COUNT; i++) {
 3687              	 .loc 26 741 0
 3688 06aa 0023     	 movs r3,#0
 3689 06ac FB63     	 str r3,[r7,#60]
 3690 06ae 13E0     	 b .L302
 3691              	.L308:
 3692              	 .align 2
 3693              	.L307:
 3694 06b0 00000000 	 .word currentMeterIds
 3695 06b4 00000000 	 .word voltageMeterADCtoIDMap
 3696              	.L303:
 742:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, osdConfig()->timers[i]);
 3697              	 .loc 26 742 0 discriminator 3
 3698 06b8 FFF7FEFF 	 bl osdConfig
 3699 06bc 0246     	 mov r2,r0
 3700 06be FB6B     	 ldr r3,[r7,#60]
 3701 06c0 2C33     	 adds r3,r3,#44
 3702 06c2 5B00     	 lsls r3,r3,#1
 3703 06c4 1344     	 add r3,r3,r2
 3704 06c6 9B88     	 ldrh r3,[r3,#4]
 3705 06c8 9BB2     	 uxth r3,r3
 3706 06ca B868     	 ldr r0,[r7,#8]
 3707 06cc 1946     	 mov r1,r3
 3708 06ce FFF7FEFF 	 bl sbufWriteU16
 741:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < OSD_TIMER_COUNT; i++) {
 3709              	 .loc 26 741 0 discriminator 3
 3710 06d2 FB6B     	 ldr r3,[r7,#60]
 3711 06d4 0133     	 adds r3,r3,#1
 3712 06d6 FB63     	 str r3,[r7,#60]
 3713              	.L302:
 741:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < OSD_TIMER_COUNT; i++) {
 3714              	 .loc 26 741 0 is_stmt 0 discriminator 1
 3715 06d8 FB6B     	 ldr r3,[r7,#60]
 3716 06da 012B     	 cmp r3,#1
 3717 06dc ECDD     	 ble .L303
 3718              	.LBE16:
 743:../cleanflight/src/main/interface/msp.c ****         }
 744:../cleanflight/src/main/interface/msp.c **** 
 745:../cleanflight/src/main/interface/msp.c ****         // Enabled warnings
 746:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, osdConfig()->enabledWarnings);
 3719              	 .loc 26 746 0 is_stmt 1
 3720 06de FFF7FEFF 	 bl osdConfig
 3721 06e2 0346     	 mov r3,r0
 3722 06e4 B3F86030 	 ldrh r3,[r3,#96]
 3723 06e8 9BB2     	 uxth r3,r3
 3724 06ea B868     	 ldr r0,[r7,#8]
 3725 06ec 1946     	 mov r1,r3
 3726 06ee FFF7FEFF 	 bl sbufWriteU16
 747:../cleanflight/src/main/interface/msp.c **** #endif
 748:../cleanflight/src/main/interface/msp.c ****         break;
 3727              	 .loc 26 748 0
 3728 06f2 01E0     	 b .L289
 3729              	.L267:
 3730              	.LBE13:
 749:../cleanflight/src/main/interface/msp.c ****     }
 750:../cleanflight/src/main/interface/msp.c **** 
 751:../cleanflight/src/main/interface/msp.c ****     default:
 752:../cleanflight/src/main/interface/msp.c ****         return false;
 3731              	 .loc 26 752 0
 3732 06f4 0023     	 movs r3,#0
 3733 06f6 00E0     	 b .L304
 3734              	.L289:
 753:../cleanflight/src/main/interface/msp.c ****     }
 754:../cleanflight/src/main/interface/msp.c ****     return true;
 3735              	 .loc 26 754 0
 3736 06f8 0123     	 movs r3,#1
 3737              	.L304:
 755:../cleanflight/src/main/interface/msp.c **** }
 3738              	 .loc 26 755 0
 3739 06fa 1846     	 mov r0,r3
 3740 06fc 5C37     	 adds r7,r7,#92
 3741              	.LCFI283:
 3742              	 .cfi_def_cfa_offset 12
 3743 06fe BD46     	 mov sp,r7
 3744              	.LCFI284:
 3745              	 .cfi_def_cfa_register 13
 3746              	 
 3747 0700 90BD     	 pop {r4,r7,pc}
 3748              	 .cfi_endproc
 3749              	.LFE665:
 3751 0702 00BF     	 .section .text.mspProcessOutCommand,"ax",%progbits
 3752              	 .align 2
 3753              	 .thumb
 3754              	 .thumb_func
 3756              	mspProcessOutCommand:
 3757              	.LFB666:
 756:../cleanflight/src/main/interface/msp.c **** 
 757:../cleanflight/src/main/interface/msp.c **** #ifdef USE_OSD_SLAVE
 758:../cleanflight/src/main/interface/msp.c **** static bool mspProcessOutCommand(uint8_t cmdMSP, sbuf_t *dst)
 759:../cleanflight/src/main/interface/msp.c **** {
 760:../cleanflight/src/main/interface/msp.c ****     switch (cmdMSP) {
 761:../cleanflight/src/main/interface/msp.c ****     case MSP_STATUS_EX:
 762:../cleanflight/src/main/interface/msp.c ****     case MSP_STATUS:
 763:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, getTaskDeltaTime(TASK_SERIAL));
 764:../cleanflight/src/main/interface/msp.c **** #ifdef USE_I2C
 765:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, i2cGetErrorCounter());
 766:../cleanflight/src/main/interface/msp.c **** #else
 767:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, 0);
 768:../cleanflight/src/main/interface/msp.c **** #endif
 769:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, 0); // sensors
 770:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, 0); // flight modes
 771:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0); // profile
 772:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, constrain(averageSystemLoadPercent, 0, 100));
 773:../cleanflight/src/main/interface/msp.c ****         if (cmdMSP == MSP_STATUS_EX) {
 774:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, 1); // max profiles
 775:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, 0); // control rate profile
 776:../cleanflight/src/main/interface/msp.c ****         } else {
 777:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, 0); // gyro cycle time
 778:../cleanflight/src/main/interface/msp.c ****         }
 779:../cleanflight/src/main/interface/msp.c ****         break;
 780:../cleanflight/src/main/interface/msp.c **** 
 781:../cleanflight/src/main/interface/msp.c ****     default:
 782:../cleanflight/src/main/interface/msp.c ****         return false;
 783:../cleanflight/src/main/interface/msp.c ****     }
 784:../cleanflight/src/main/interface/msp.c ****     return true;
 785:../cleanflight/src/main/interface/msp.c **** }
 786:../cleanflight/src/main/interface/msp.c **** 
 787:../cleanflight/src/main/interface/msp.c **** #else
 788:../cleanflight/src/main/interface/msp.c **** 
 789:../cleanflight/src/main/interface/msp.c **** static bool mspProcessOutCommand(uint8_t cmdMSP, sbuf_t *dst)
 790:../cleanflight/src/main/interface/msp.c **** {
 3758              	 .loc 26 790 0
 3759              	 .cfi_startproc
 3760              	 
 3761              	 
 3762 0000 90B5     	 push {r4,r7,lr}
 3763              	.LCFI285:
 3764              	 .cfi_def_cfa_offset 12
 3765              	 .cfi_offset 4,-12
 3766              	 .cfi_offset 7,-8
 3767              	 .cfi_offset 14,-4
 3768 0002 A5B0     	 sub sp,sp,#148
 3769              	.LCFI286:
 3770              	 .cfi_def_cfa_offset 160
 3771 0004 00AF     	 add r7,sp,#0
 3772              	.LCFI287:
 3773              	 .cfi_def_cfa_register 7
 3774 0006 0346     	 mov r3,r0
 3775 0008 3960     	 str r1,[r7]
 3776 000a FB71     	 strb r3,[r7,#7]
 791:../cleanflight/src/main/interface/msp.c ****     bool unsupportedCommand = false;
 3777              	 .loc 26 791 0
 3778 000c 0023     	 movs r3,#0
 3779 000e 87F88F30 	 strb r3,[r7,#143]
 792:../cleanflight/src/main/interface/msp.c **** 
 793:../cleanflight/src/main/interface/msp.c ****     switch (cmdMSP) {
 3780              	 .loc 26 793 0
 3781 0012 FB79     	 ldrb r3,[r7,#7]
 3782 0014 0A3B     	 subs r3,r3,#10
 3783 0016 ED2B     	 cmp r3,#237
 3784 0018 01F23383 	 bhi .L310
 3785 001c 01A2     	 adr r2,.L312
 3786 001e 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 3787 0022 00BF     	 .p2align 2
 3788              	.L312:
 3789 0024 27060000 	 .word .L311+1
 3790 0028 83160000 	 .word .L310+1
 3791 002c 83160000 	 .word .L310+1
 3792 0030 83160000 	 .word .L310+1
 3793 0034 83160000 	 .word .L310+1
 3794 0038 83160000 	 .word .L310+1
 3795 003c 83160000 	 .word .L310+1
 3796 0040 83160000 	 .word .L310+1
 3797 0044 83160000 	 .word .L310+1
 3798 0048 83160000 	 .word .L310+1
 3799 004c 83160000 	 .word .L310+1
 3800 0050 83160000 	 .word .L310+1
 3801 0054 83160000 	 .word .L310+1
 3802 0058 83160000 	 .word .L310+1
 3803 005c 83160000 	 .word .L310+1
 3804 0060 83160000 	 .word .L310+1
 3805 0064 83160000 	 .word .L310+1
 3806 0068 83160000 	 .word .L310+1
 3807 006c 83160000 	 .word .L310+1
 3808 0070 83160000 	 .word .L310+1
 3809 0074 83160000 	 .word .L310+1
 3810 0078 83160000 	 .word .L310+1
 3811 007c 83160000 	 .word .L310+1
 3812 0080 83160000 	 .word .L310+1
 3813 0084 6B0A0000 	 .word .L313+1
 3814 0088 83160000 	 .word .L310+1
 3815 008c 83160000 	 .word .L310+1
 3816 0090 83160000 	 .word .L310+1
 3817 0094 B7080000 	 .word .L314+1
 3818 0098 83160000 	 .word .L310+1
 3819 009c 83160000 	 .word .L310+1
 3820 00a0 83160000 	 .word .L310+1
 3821 00a4 390D0000 	 .word .L315+1
 3822 00a8 83160000 	 .word .L310+1
 3823 00ac 8D0D0000 	 .word .L316+1
 3824 00b0 83160000 	 .word .L310+1
 3825 00b4 83160000 	 .word .L310+1
 3826 00b8 83160000 	 .word .L310+1
 3827 00bc 83160000 	 .word .L310+1
 3828 00c0 83160000 	 .word .L310+1
 3829 00c4 A70F0000 	 .word .L317+1
 3830 00c8 83160000 	 .word .L310+1
 3831 00cc E50A0000 	 .word .L318+1
 3832 00d0 83160000 	 .word .L310+1
 3833 00d4 CB0F0000 	 .word .L319+1
 3834 00d8 83160000 	 .word .L310+1
 3835 00dc 83160000 	 .word .L310+1
 3836 00e0 83160000 	 .word .L310+1
 3837 00e4 AB080000 	 .word .L320+1
 3838 00e8 5F0A0000 	 .word .L321+1
 3839 00ec 83160000 	 .word .L310+1
 3840 00f0 F1080000 	 .word .L322+1
 3841 00f4 83160000 	 .word .L310+1
 3842 00f8 83160000 	 .word .L310+1
 3843 00fc B90F0000 	 .word .L323+1
 3844 0100 83160000 	 .word .L310+1
 3845 0104 83160000 	 .word .L310+1
 3846 0108 83160000 	 .word .L310+1
 3847 010c 83160000 	 .word .L310+1
 3848 0110 83160000 	 .word .L310+1
 3849 0114 A7100000 	 .word .L324+1
 3850 0118 83160000 	 .word .L310+1
 3851 011c 83160000 	 .word .L310+1
 3852 0120 83160000 	 .word .L310+1
 3853 0124 83160000 	 .word .L310+1
 3854 0128 E90E0000 	 .word .L325+1
 3855 012c 83160000 	 .word .L310+1
 3856 0130 4F0F0000 	 .word .L326+1
 3857 0134 83160000 	 .word .L310+1
 3858 0138 F1100000 	 .word .L327+1
 3859 013c AF100000 	 .word .L328+1
 3860 0140 83160000 	 .word .L310+1
 3861 0144 83160000 	 .word .L310+1
 3862 0148 83160000 	 .word .L310+1
 3863 014c 83160000 	 .word .L310+1
 3864 0150 83160000 	 .word .L310+1
 3865 0154 83160000 	 .word .L310+1
 3866 0158 83160000 	 .word .L310+1
 3867 015c 69150000 	 .word .L329+1
 3868 0160 83160000 	 .word .L310+1
 3869 0164 A7110000 	 .word .L330+1
 3870 0168 83160000 	 .word .L310+1
 3871 016c 99120000 	 .word .L331+1
 3872 0170 83160000 	 .word .L310+1
 3873 0174 BD130000 	 .word .L332+1
 3874 0178 83160000 	 .word .L310+1
 3875 017c 33150000 	 .word .L333+1
 3876 0180 83160000 	 .word .L310+1
 3877 0184 83160000 	 .word .L310+1
 3878 0188 83160000 	 .word .L310+1
 3879 018c 83160000 	 .word .L310+1
 3880 0190 DD030000 	 .word .L334+1
 3881 0194 23050000 	 .word .L335+1
 3882 0198 63060000 	 .word .L336+1
 3883 019c B5070000 	 .word .L337+1
 3884 01a0 11080000 	 .word .L338+1
 3885 01a4 F30B0000 	 .word .L339+1
 3886 01a8 710C0000 	 .word .L340+1
 3887 01ac 3F080000 	 .word .L341+1
 3888 01b0 89080000 	 .word .L342+1
 3889 01b4 83160000 	 .word .L310+1
 3890 01b8 1D090000 	 .word .L343+1
 3891 01bc D7090000 	 .word .L344+1
 3892 01c0 83160000 	 .word .L310+1
 3893 01c4 83160000 	 .word .L310+1
 3894 01c8 83160000 	 .word .L310+1
 3895 01cc 83160000 	 .word .L310+1
 3896 01d0 3B0A0000 	 .word .L345+1
 3897 01d4 83160000 	 .word .L310+1
 3898 01d8 83160000 	 .word .L310+1
 3899 01dc 71060000 	 .word .L346+1
 3900 01e0 83160000 	 .word .L310+1
 3901 01e4 83160000 	 .word .L310+1
 3902 01e8 83160000 	 .word .L310+1
 3903 01ec F9100000 	 .word .L347+1
 3904 01f0 31110000 	 .word .L348+1
 3905 01f4 75110000 	 .word .L349+1
 3906 01f8 83160000 	 .word .L310+1
 3907 01fc 83160000 	 .word .L310+1
 3908 0200 83160000 	 .word .L310+1
 3909 0204 83160000 	 .word .L310+1
 3910 0208 4B0B0000 	 .word .L350+1
 3911 020c AF0B0000 	 .word .L351+1
 3912 0210 850B0000 	 .word .L352+1
 3913 0214 83160000 	 .word .L310+1
 3914 0218 83160000 	 .word .L310+1
 3915 021c 83160000 	 .word .L310+1
 3916 0220 83160000 	 .word .L310+1
 3917 0224 83160000 	 .word .L310+1
 3918 0228 83160000 	 .word .L310+1
 3919 022c 83160000 	 .word .L310+1
 3920 0230 83160000 	 .word .L310+1
 3921 0234 83160000 	 .word .L310+1
 3922 0238 83160000 	 .word .L310+1
 3923 023c 83160000 	 .word .L310+1
 3924 0240 83160000 	 .word .L310+1
 3925 0244 83160000 	 .word .L310+1
 3926 0248 83160000 	 .word .L310+1
 3927 024c 83160000 	 .word .L310+1
 3928 0250 83160000 	 .word .L310+1
 3929 0254 DD030000 	 .word .L334+1
 3930 0258 83160000 	 .word .L310+1
 3931 025c 83160000 	 .word .L310+1
 3932 0260 83160000 	 .word .L310+1
 3933 0264 83160000 	 .word .L310+1
 3934 0268 83160000 	 .word .L310+1
 3935 026c 83160000 	 .word .L310+1
 3936 0270 83160000 	 .word .L310+1
 3937 0274 83160000 	 .word .L310+1
 3938 0278 83160000 	 .word .L310+1
 3939 027c 83160000 	 .word .L310+1
 3940 0280 83160000 	 .word .L310+1
 3941 0284 83160000 	 .word .L310+1
 3942 0288 83160000 	 .word .L310+1
 3943 028c A10C0000 	 .word .L353+1
 3944 0290 83160000 	 .word .L310+1
 3945 0294 83160000 	 .word .L310+1
 3946 0298 83160000 	 .word .L310+1
 3947 029c 83160000 	 .word .L310+1
 3948 02a0 83160000 	 .word .L310+1
 3949 02a4 83160000 	 .word .L310+1
 3950 02a8 83160000 	 .word .L310+1
 3951 02ac 83160000 	 .word .L310+1
 3952 02b0 83160000 	 .word .L310+1
 3953 02b4 83160000 	 .word .L310+1
 3954 02b8 83160000 	 .word .L310+1
 3955 02bc 83160000 	 .word .L310+1
 3956 02c0 83160000 	 .word .L310+1
 3957 02c4 83160000 	 .word .L310+1
 3958 02c8 83160000 	 .word .L310+1
 3959 02cc 83160000 	 .word .L310+1
 3960 02d0 83160000 	 .word .L310+1
 3961 02d4 83160000 	 .word .L310+1
 3962 02d8 83160000 	 .word .L310+1
 3963 02dc 83160000 	 .word .L310+1
 3964 02e0 83160000 	 .word .L310+1
 3965 02e4 83160000 	 .word .L310+1
 3966 02e8 EF150000 	 .word .L354+1
 3967 02ec 83160000 	 .word .L310+1
 3968 02f0 83160000 	 .word .L310+1
 3969 02f4 83160000 	 .word .L310+1
 3970 02f8 83160000 	 .word .L310+1
 3971 02fc 83160000 	 .word .L310+1
 3972 0300 83160000 	 .word .L310+1
 3973 0304 83160000 	 .word .L310+1
 3974 0308 83160000 	 .word .L310+1
 3975 030c 83160000 	 .word .L310+1
 3976 0310 83160000 	 .word .L310+1
 3977 0314 83160000 	 .word .L310+1
 3978 0318 83160000 	 .word .L310+1
 3979 031c 83160000 	 .word .L310+1
 3980 0320 83160000 	 .word .L310+1
 3981 0324 83160000 	 .word .L310+1
 3982 0328 83160000 	 .word .L310+1
 3983 032c 83160000 	 .word .L310+1
 3984 0330 83160000 	 .word .L310+1
 3985 0334 83160000 	 .word .L310+1
 3986 0338 83160000 	 .word .L310+1
 3987 033c 83160000 	 .word .L310+1
 3988 0340 83160000 	 .word .L310+1
 3989 0344 83160000 	 .word .L310+1
 3990 0348 83160000 	 .word .L310+1
 3991 034c 83160000 	 .word .L310+1
 3992 0350 83160000 	 .word .L310+1
 3993 0354 83160000 	 .word .L310+1
 3994 0358 83160000 	 .word .L310+1
 3995 035c 83160000 	 .word .L310+1
 3996 0360 83160000 	 .word .L310+1
 3997 0364 83160000 	 .word .L310+1
 3998 0368 83160000 	 .word .L310+1
 3999 036c 83160000 	 .word .L310+1
 4000 0370 83160000 	 .word .L310+1
 4001 0374 83160000 	 .word .L310+1
 4002 0378 83160000 	 .word .L310+1
 4003 037c 83160000 	 .word .L310+1
 4004 0380 83160000 	 .word .L310+1
 4005 0384 83160000 	 .word .L310+1
 4006 0388 83160000 	 .word .L310+1
 4007 038c 83160000 	 .word .L310+1
 4008 0390 83160000 	 .word .L310+1
 4009 0394 83160000 	 .word .L310+1
 4010 0398 83160000 	 .word .L310+1
 4011 039c 83160000 	 .word .L310+1
 4012 03a0 83160000 	 .word .L310+1
 4013 03a4 83160000 	 .word .L310+1
 4014 03a8 83160000 	 .word .L310+1
 4015 03ac 83160000 	 .word .L310+1
 4016 03b0 83160000 	 .word .L310+1
 4017 03b4 83160000 	 .word .L310+1
 4018 03b8 83160000 	 .word .L310+1
 4019 03bc 090D0000 	 .word .L355+1
 4020 03c0 09070000 	 .word .L356+1
 4021 03c4 83160000 	 .word .L310+1
 4022 03c8 83160000 	 .word .L310+1
 4023 03cc 83160000 	 .word .L310+1
 4024 03d0 83160000 	 .word .L310+1
 4025 03d4 83160000 	 .word .L310+1
 4026 03d8 25160000 	 .word .L357+1
 4027              	 .p2align 1
 4028              	.L334:
 4029              	.LBB17:
 4030              	.LBB18:
 794:../cleanflight/src/main/interface/msp.c ****     case MSP_STATUS_EX:
 795:../cleanflight/src/main/interface/msp.c ****     case MSP_STATUS:
 796:../cleanflight/src/main/interface/msp.c ****         {
 797:../cleanflight/src/main/interface/msp.c ****             boxBitmask_t flightModeFlags;
 798:../cleanflight/src/main/interface/msp.c ****             const int flagBits = packFlightModeFlags(&flightModeFlags);
 4031              	 .loc 26 798 0
 4032 03dc 07F11403 	 add r3,r7,#20
 4033 03e0 1846     	 mov r0,r3
 4034 03e2 FFF7FEFF 	 bl packFlightModeFlags
 4035 03e6 7864     	 str r0,[r7,#68]
 799:../cleanflight/src/main/interface/msp.c **** 
 800:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, getTaskDeltaTime(TASK_GYROPID));
 4036              	 .loc 26 800 0
 4037 03e8 0220     	 movs r0,#2
 4038 03ea FFF7FEFF 	 bl getTaskDeltaTime
 4039 03ee 0346     	 mov r3,r0
 4040 03f0 9BB2     	 uxth r3,r3
 4041 03f2 3868     	 ldr r0,[r7]
 4042 03f4 1946     	 mov r1,r3
 4043 03f6 FFF7FEFF 	 bl sbufWriteU16
 801:../cleanflight/src/main/interface/msp.c **** #ifdef USE_I2C
 802:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, i2cGetErrorCounter());
 4044              	 .loc 26 802 0
 4045 03fa FFF7FEFF 	 bl i2cGetErrorCounter
 4046 03fe 0346     	 mov r3,r0
 4047 0400 3868     	 ldr r0,[r7]
 4048 0402 1946     	 mov r1,r3
 4049 0404 FFF7FEFF 	 bl sbufWriteU16
 803:../cleanflight/src/main/interface/msp.c **** #else
 804:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, 0);
 805:../cleanflight/src/main/interface/msp.c **** #endif
 806:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, sensors(SENSOR_ACC) | sensors(SENSOR_BARO) << 1 | sensors(SENSOR_MAG)
 4050              	 .loc 26 806 0
 4051 0408 0220     	 movs r0,#2
 4052 040a FFF7FEFF 	 bl sensors
 4053 040e 0346     	 mov r3,r0
 4054 0410 9CB2     	 uxth r4,r3
 4055 0412 0420     	 movs r0,#4
 4056 0414 FFF7FEFF 	 bl sensors
 4057 0418 0346     	 mov r3,r0
 4058 041a 5B00     	 lsls r3,r3,#1
 4059 041c 9BB2     	 uxth r3,r3
 4060 041e 2246     	 mov r2,r4
 4061 0420 1343     	 orrs r3,r3,r2
 4062 0422 9CB2     	 uxth r4,r3
 4063 0424 0820     	 movs r0,#8
 4064 0426 FFF7FEFF 	 bl sensors
 4065 042a 0346     	 mov r3,r0
 4066 042c 9B00     	 lsls r3,r3,#2
 4067 042e 9BB2     	 uxth r3,r3
 4068 0430 2246     	 mov r2,r4
 4069 0432 1343     	 orrs r3,r3,r2
 4070 0434 9CB2     	 uxth r4,r3
 4071 0436 2020     	 movs r0,#32
 4072 0438 FFF7FEFF 	 bl sensors
 4073 043c 0346     	 mov r3,r0
 4074 043e DB00     	 lsls r3,r3,#3
 4075 0440 9BB2     	 uxth r3,r3
 4076 0442 2246     	 mov r2,r4
 4077 0444 1343     	 orrs r3,r3,r2
 4078 0446 9CB2     	 uxth r4,r3
 4079 0448 1020     	 movs r0,#16
 4080 044a FFF7FEFF 	 bl sensors
 4081 044e 0346     	 mov r3,r0
 4082 0450 1B01     	 lsls r3,r3,#4
 4083 0452 9BB2     	 uxth r3,r3
 4084 0454 2246     	 mov r2,r4
 4085 0456 1343     	 orrs r3,r3,r2
 4086 0458 9CB2     	 uxth r4,r3
 4087 045a 0120     	 movs r0,#1
 4088 045c FFF7FEFF 	 bl sensors
 4089 0460 0346     	 mov r3,r0
 4090 0462 5B01     	 lsls r3,r3,#5
 4091 0464 9BB2     	 uxth r3,r3
 4092 0466 2246     	 mov r2,r4
 4093 0468 1343     	 orrs r3,r3,r2
 4094 046a 9BB2     	 uxth r3,r3
 4095 046c 9BB2     	 uxth r3,r3
 4096 046e 3868     	 ldr r0,[r7]
 4097 0470 1946     	 mov r1,r3
 4098 0472 FFF7FEFF 	 bl sbufWriteU16
 807:../cleanflight/src/main/interface/msp.c ****             sbufWriteData(dst, &flightModeFlags, 4);        // unconditional part of flags, first 3
 4099              	 .loc 26 807 0
 4100 0476 07F11403 	 add r3,r7,#20
 4101 047a 3868     	 ldr r0,[r7]
 4102 047c 1946     	 mov r1,r3
 4103 047e 0422     	 movs r2,#4
 4104 0480 FFF7FEFF 	 bl sbufWriteData
 808:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, getCurrentPidProfileIndex());
 4105              	 .loc 26 808 0
 4106 0484 FFF7FEFF 	 bl getCurrentPidProfileIndex
 4107 0488 0346     	 mov r3,r0
 4108 048a 3868     	 ldr r0,[r7]
 4109 048c 1946     	 mov r1,r3
 4110 048e FFF7FEFF 	 bl sbufWriteU8
 809:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, constrain(averageSystemLoadPercent, 0, 100));
 4111              	 .loc 26 809 0
 4112 0492 9F4B     	 ldr r3,.L409
 4113 0494 1B88     	 ldrh r3,[r3]
 4114 0496 1846     	 mov r0,r3
 4115 0498 0021     	 movs r1,#0
 4116 049a 6422     	 movs r2,#100
 4117 049c FFF7FEFF 	 bl constrain
 4118 04a0 0346     	 mov r3,r0
 4119 04a2 9BB2     	 uxth r3,r3
 4120 04a4 3868     	 ldr r0,[r7]
 4121 04a6 1946     	 mov r1,r3
 4122 04a8 FFF7FEFF 	 bl sbufWriteU16
 810:../cleanflight/src/main/interface/msp.c ****             if (cmdMSP == MSP_STATUS_EX) {
 4123              	 .loc 26 810 0
 4124 04ac FB79     	 ldrb r3,[r7,#7]
 4125 04ae 962B     	 cmp r3,#150
 4126 04b0 0BD1     	 bne .L358
 811:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, MAX_PROFILE_COUNT);
 4127              	 .loc 26 811 0
 4128 04b2 3868     	 ldr r0,[r7]
 4129 04b4 0321     	 movs r1,#3
 4130 04b6 FFF7FEFF 	 bl sbufWriteU8
 812:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, getCurrentControlRateProfileIndex());
 4131              	 .loc 26 812 0
 4132 04ba FFF7FEFF 	 bl getCurrentControlRateProfileIndex
 4133 04be 0346     	 mov r3,r0
 4134 04c0 3868     	 ldr r0,[r7]
 4135 04c2 1946     	 mov r1,r3
 4136 04c4 FFF7FEFF 	 bl sbufWriteU8
 4137 04c8 03E0     	 b .L359
 4138              	.L358:
 813:../cleanflight/src/main/interface/msp.c ****             } else {  // MSP_STATUS
 814:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, 0); // gyro cycle time
 4139              	 .loc 26 814 0
 4140 04ca 3868     	 ldr r0,[r7]
 4141 04cc 0021     	 movs r1,#0
 4142 04ce FFF7FEFF 	 bl sbufWriteU16
 4143              	.L359:
 815:../cleanflight/src/main/interface/msp.c ****             }
 816:../cleanflight/src/main/interface/msp.c **** 
 817:../cleanflight/src/main/interface/msp.c ****             // write flightModeFlags header. Lowest 4 bits contain number of bytes that follow
 818:../cleanflight/src/main/interface/msp.c ****             // header is emited even when all bits fit into 32 bits to allow future extension
 819:../cleanflight/src/main/interface/msp.c ****             int byteCount = (flagBits - 32 + 7) / 8;        // 32 already stored, round up
 4144              	 .loc 26 819 0
 4145 04d2 7B6C     	 ldr r3,[r7,#68]
 4146 04d4 193B     	 subs r3,r3,#25
 4147 04d6 002B     	 cmp r3,#0
 4148 04d8 00DA     	 bge .L360
 4149 04da 0733     	 adds r3,r3,#7
 4150              	.L360:
 4151 04dc DB10     	 asrs r3,r3,#3
 4152 04de 3B64     	 str r3,[r7,#64]
 820:../cleanflight/src/main/interface/msp.c ****             byteCount = constrain(byteCount, 0, 15);        // limit to 16 bytes (128 bits)
 4153              	 .loc 26 820 0
 4154 04e0 386C     	 ldr r0,[r7,#64]
 4155 04e2 0021     	 movs r1,#0
 4156 04e4 0F22     	 movs r2,#15
 4157 04e6 FFF7FEFF 	 bl constrain
 4158 04ea 3864     	 str r0,[r7,#64]
 821:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, byteCount);
 4159              	 .loc 26 821 0
 4160 04ec 3B6C     	 ldr r3,[r7,#64]
 4161 04ee DBB2     	 uxtb r3,r3
 4162 04f0 3868     	 ldr r0,[r7]
 4163 04f2 1946     	 mov r1,r3
 4164 04f4 FFF7FEFF 	 bl sbufWriteU8
 822:../cleanflight/src/main/interface/msp.c ****             sbufWriteData(dst, ((uint8_t*)&flightModeFlags) + 4, byteCount);
 4165              	 .loc 26 822 0
 4166 04f8 07F11403 	 add r3,r7,#20
 4167 04fc 0433     	 adds r3,r3,#4
 4168 04fe 3868     	 ldr r0,[r7]
 4169 0500 1946     	 mov r1,r3
 4170 0502 3A6C     	 ldr r2,[r7,#64]
 4171 0504 FFF7FEFF 	 bl sbufWriteData
 823:../cleanflight/src/main/interface/msp.c **** 
 824:../cleanflight/src/main/interface/msp.c ****             // Write arming disable flags
 825:../cleanflight/src/main/interface/msp.c ****             // 1 byte, flag count
 826:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, ARMING_DISABLE_FLAGS_COUNT);
 4172              	 .loc 26 826 0
 4173 0508 3868     	 ldr r0,[r7]
 4174 050a 1421     	 movs r1,#20
 4175 050c FFF7FEFF 	 bl sbufWriteU8
 827:../cleanflight/src/main/interface/msp.c ****             // 4 bytes, flags
 828:../cleanflight/src/main/interface/msp.c ****             const uint32_t armingDisableFlags = getArmingDisableFlags();
 4176              	 .loc 26 828 0
 4177 0510 FFF7FEFF 	 bl getArmingDisableFlags
 4178 0514 F863     	 str r0,[r7,#60]
 829:../cleanflight/src/main/interface/msp.c ****             sbufWriteU32(dst, armingDisableFlags);
 4179              	 .loc 26 829 0
 4180 0516 3868     	 ldr r0,[r7]
 4181 0518 F96B     	 ldr r1,[r7,#60]
 4182 051a FFF7FEFF 	 bl sbufWriteU32
 4183              	.LBE18:
 830:../cleanflight/src/main/interface/msp.c ****         }
 831:../cleanflight/src/main/interface/msp.c ****         break;
 4184              	 .loc 26 831 0
 4185 051e 01F0B3B8 	 b .L407
 4186              	.L335:
 4187              	.LBB19:
 832:../cleanflight/src/main/interface/msp.c **** 
 833:../cleanflight/src/main/interface/msp.c ****     case MSP_RAW_IMU:
 834:../cleanflight/src/main/interface/msp.c ****         {
 835:../cleanflight/src/main/interface/msp.c ****             // Hack scale due to choice of units for sensor data in multiwii
 836:../cleanflight/src/main/interface/msp.c **** 
 837:../cleanflight/src/main/interface/msp.c ****             uint8_t scale;
 838:../cleanflight/src/main/interface/msp.c **** 
 839:../cleanflight/src/main/interface/msp.c ****             if (acc.dev.acc_1G > 512*4) {
 4188              	 .loc 26 839 0
 4189 0522 7C4B     	 ldr r3,.L409+4
 4190 0524 B3F81130 	 ldrh r3,[r3,#17]
 4191 0528 9BB2     	 uxth r3,r3
 4192 052a B3F5006F 	 cmp r3,#2048
 4193 052e 03D9     	 bls .L362
 840:../cleanflight/src/main/interface/msp.c ****                 scale = 8;
 4194              	 .loc 26 840 0
 4195 0530 0823     	 movs r3,#8
 4196 0532 87F88E30 	 strb r3,[r7,#142]
 4197 0536 18E0     	 b .L363
 4198              	.L362:
 841:../cleanflight/src/main/interface/msp.c ****             } else if (acc.dev.acc_1G > 512*2) {
 4199              	 .loc 26 841 0
 4200 0538 764B     	 ldr r3,.L409+4
 4201 053a B3F81130 	 ldrh r3,[r3,#17]
 4202 053e 9BB2     	 uxth r3,r3
 4203 0540 B3F5806F 	 cmp r3,#1024
 4204 0544 03D9     	 bls .L364
 842:../cleanflight/src/main/interface/msp.c ****                 scale = 4;
 4205              	 .loc 26 842 0
 4206 0546 0423     	 movs r3,#4
 4207 0548 87F88E30 	 strb r3,[r7,#142]
 4208 054c 0DE0     	 b .L363
 4209              	.L364:
 843:../cleanflight/src/main/interface/msp.c ****             } else if (acc.dev.acc_1G >= 512) {
 4210              	 .loc 26 843 0
 4211 054e 714B     	 ldr r3,.L409+4
 4212 0550 B3F81130 	 ldrh r3,[r3,#17]
 4213 0554 9BB2     	 uxth r3,r3
 4214 0556 B3F5007F 	 cmp r3,#512
 4215 055a 03D3     	 bcc .L365
 844:../cleanflight/src/main/interface/msp.c ****                 scale = 2;
 4216              	 .loc 26 844 0
 4217 055c 0223     	 movs r3,#2
 4218 055e 87F88E30 	 strb r3,[r7,#142]
 4219 0562 02E0     	 b .L363
 4220              	.L365:
 845:../cleanflight/src/main/interface/msp.c ****             } else {
 846:../cleanflight/src/main/interface/msp.c ****                 scale = 1;
 4221              	 .loc 26 846 0
 4222 0564 0123     	 movs r3,#1
 4223 0566 87F88E30 	 strb r3,[r7,#142]
 4224              	.L363:
 4225              	.LBB20:
 847:../cleanflight/src/main/interface/msp.c ****             }
 848:../cleanflight/src/main/interface/msp.c **** 
 849:../cleanflight/src/main/interface/msp.c ****             for (int i = 0; i < 3; i++) {
 4226              	 .loc 26 849 0
 4227 056a 0023     	 movs r3,#0
 4228 056c C7F88830 	 str r3,[r7,#136]
 4229 0570 20E0     	 b .L366
 4230              	.L367:
 850:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, lrintf(acc.accADC[i] / scale));
 4231              	 .loc 26 850 0 discriminator 3
 4232 0572 684A     	 ldr r2,.L409+4
 4233 0574 D7F88830 	 ldr r3,[r7,#136]
 4234 0578 0833     	 adds r3,r3,#8
 4235 057a 9B00     	 lsls r3,r3,#2
 4236 057c 1344     	 add r3,r3,r2
 4237 057e D3F80530 	 ldr r3,[r3,#5]
 4238 0582 97F88E20 	 ldrb r2,[r7,#142]
 4239 0586 07EE902A 	 fmsr s15,r2
 4240 058a F8EEE77A 	 fsitos s15,s15
 4241 058e 07EE103A 	 fmsr s14,r3
 4242 0592 C7EE277A 	 fdivs s15,s14,s15
 4243 0596 17EE900A 	 fmrs r0,s15
 4244 059a FFF7FEFF 	 bl lrintf
 4245 059e 0346     	 mov r3,r0
 4246 05a0 9BB2     	 uxth r3,r3
 4247 05a2 3868     	 ldr r0,[r7]
 4248 05a4 1946     	 mov r1,r3
 4249 05a6 FFF7FEFF 	 bl sbufWriteU16
 849:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, lrintf(acc.accADC[i] / scale));
 4250              	 .loc 26 849 0 discriminator 3
 4251 05aa D7F88830 	 ldr r3,[r7,#136]
 4252 05ae 0133     	 adds r3,r3,#1
 4253 05b0 C7F88830 	 str r3,[r7,#136]
 4254              	.L366:
 849:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, lrintf(acc.accADC[i] / scale));
 4255              	 .loc 26 849 0 is_stmt 0 discriminator 1
 4256 05b4 D7F88830 	 ldr r3,[r7,#136]
 4257 05b8 022B     	 cmp r3,#2
 4258 05ba DADD     	 ble .L367
 4259              	.LBE20:
 4260              	.LBB21:
 851:../cleanflight/src/main/interface/msp.c ****             }
 852:../cleanflight/src/main/interface/msp.c ****             for (int i = 0; i < 3; i++) {
 4261              	 .loc 26 852 0 is_stmt 1
 4262 05bc 0023     	 movs r3,#0
 4263 05be C7F88430 	 str r3,[r7,#132]
 4264 05c2 0EE0     	 b .L368
 4265              	.L369:
 853:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, gyroRateDps(i));
 4266              	 .loc 26 853 0 discriminator 3
 4267 05c4 D7F88400 	 ldr r0,[r7,#132]
 4268 05c8 FFF7FEFF 	 bl gyroRateDps
 4269 05cc 0346     	 mov r3,r0
 4270 05ce 9BB2     	 uxth r3,r3
 4271 05d0 3868     	 ldr r0,[r7]
 4272 05d2 1946     	 mov r1,r3
 4273 05d4 FFF7FEFF 	 bl sbufWriteU16
 852:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, gyroRateDps(i));
 4274              	 .loc 26 852 0 discriminator 3
 4275 05d8 D7F88430 	 ldr r3,[r7,#132]
 4276 05dc 0133     	 adds r3,r3,#1
 4277 05de C7F88430 	 str r3,[r7,#132]
 4278              	.L368:
 852:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, gyroRateDps(i));
 4279              	 .loc 26 852 0 is_stmt 0 discriminator 1
 4280 05e2 D7F88430 	 ldr r3,[r7,#132]
 4281 05e6 022B     	 cmp r3,#2
 4282 05e8 ECDD     	 ble .L369
 4283              	.LBE21:
 4284              	.LBB22:
 854:../cleanflight/src/main/interface/msp.c ****             }
 855:../cleanflight/src/main/interface/msp.c ****             for (int i = 0; i < 3; i++) {
 4285              	 .loc 26 855 0 is_stmt 1
 4286 05ea 0023     	 movs r3,#0
 4287 05ec C7F88030 	 str r3,[r7,#128]
 4288 05f0 13E0     	 b .L370
 4289              	.L371:
 856:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, lrintf(mag.magADC[i]));
 4290              	 .loc 26 856 0 discriminator 3
 4291 05f2 494A     	 ldr r2,.L409+8
 4292 05f4 D7F88030 	 ldr r3,[r7,#128]
 4293 05f8 9B00     	 lsls r3,r3,#2
 4294 05fa 1344     	 add r3,r3,r2
 4295 05fc 1B68     	 ldr r3,[r3]
 4296 05fe 1846     	 mov r0,r3
 4297 0600 FFF7FEFF 	 bl lrintf
 4298 0604 0346     	 mov r3,r0
 4299 0606 9BB2     	 uxth r3,r3
 4300 0608 3868     	 ldr r0,[r7]
 4301 060a 1946     	 mov r1,r3
 4302 060c FFF7FEFF 	 bl sbufWriteU16
 855:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, lrintf(mag.magADC[i]));
 4303              	 .loc 26 855 0 discriminator 3
 4304 0610 D7F88030 	 ldr r3,[r7,#128]
 4305 0614 0133     	 adds r3,r3,#1
 4306 0616 C7F88030 	 str r3,[r7,#128]
 4307              	.L370:
 855:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, lrintf(mag.magADC[i]));
 4308              	 .loc 26 855 0 is_stmt 0 discriminator 1
 4309 061a D7F88030 	 ldr r3,[r7,#128]
 4310 061e 022B     	 cmp r3,#2
 4311 0620 E7DD     	 ble .L371
 4312              	.LBE22:
 4313              	.LBE19:
 857:../cleanflight/src/main/interface/msp.c ****             }
 858:../cleanflight/src/main/interface/msp.c ****         }
 859:../cleanflight/src/main/interface/msp.c ****         break;
 4314              	 .loc 26 859 0 is_stmt 1
 4315 0622 01F031B8 	 b .L407
 4316              	.L311:
 4317              	.LBB23:
 860:../cleanflight/src/main/interface/msp.c **** 
 861:../cleanflight/src/main/interface/msp.c ****     case MSP_NAME:
 862:../cleanflight/src/main/interface/msp.c ****         {
 863:../cleanflight/src/main/interface/msp.c ****             const int nameLen = strlen(pilotConfig()->name);
 4318              	 .loc 26 863 0
 4319 0626 FFF7FEFF 	 bl pilotConfig
 4320 062a 0346     	 mov r3,r0
 4321 062c 1846     	 mov r0,r3
 4322 062e FFF7FEFF 	 bl strlen
 4323 0632 0346     	 mov r3,r0
 4324 0634 BB63     	 str r3,[r7,#56]
 4325              	.LBB24:
 864:../cleanflight/src/main/interface/msp.c ****             for (int i = 0; i < nameLen; i++) {
 4326              	 .loc 26 864 0
 4327 0636 0023     	 movs r3,#0
 4328 0638 FB67     	 str r3,[r7,#124]
 4329 063a 0CE0     	 b .L372
 4330              	.L373:
 865:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, pilotConfig()->name[i]);
 4331              	 .loc 26 865 0 discriminator 3
 4332 063c FFF7FEFF 	 bl pilotConfig
 4333 0640 0246     	 mov r2,r0
 4334 0642 FB6F     	 ldr r3,[r7,#124]
 4335 0644 1344     	 add r3,r3,r2
 4336 0646 1B78     	 ldrb r3,[r3]
 4337 0648 3868     	 ldr r0,[r7]
 4338 064a 1946     	 mov r1,r3
 4339 064c FFF7FEFF 	 bl sbufWriteU8
 864:../cleanflight/src/main/interface/msp.c ****             for (int i = 0; i < nameLen; i++) {
 4340              	 .loc 26 864 0 discriminator 3
 4341 0650 FB6F     	 ldr r3,[r7,#124]
 4342 0652 0133     	 adds r3,r3,#1
 4343 0654 FB67     	 str r3,[r7,#124]
 4344              	.L372:
 864:../cleanflight/src/main/interface/msp.c ****             for (int i = 0; i < nameLen; i++) {
 4345              	 .loc 26 864 0 is_stmt 0 discriminator 1
 4346 0656 FA6F     	 ldr r2,[r7,#124]
 4347 0658 BB6B     	 ldr r3,[r7,#56]
 4348 065a 9A42     	 cmp r2,r3
 4349 065c EEDB     	 blt .L373
 4350              	.LBE24:
 4351              	.LBE23:
 866:../cleanflight/src/main/interface/msp.c ****             }
 867:../cleanflight/src/main/interface/msp.c ****         }
 868:../cleanflight/src/main/interface/msp.c ****         break;
 4352              	 .loc 26 868 0 is_stmt 1
 4353 065e 01F013B8 	 b .L407
 4354              	.L336:
 869:../cleanflight/src/main/interface/msp.c **** 
 870:../cleanflight/src/main/interface/msp.c **** #ifdef USE_SERVOS
 871:../cleanflight/src/main/interface/msp.c ****     case MSP_SERVO:
 872:../cleanflight/src/main/interface/msp.c ****         sbufWriteData(dst, &servo, MAX_SUPPORTED_SERVOS * 2);
 4355              	 .loc 26 872 0
 4356 0662 3868     	 ldr r0,[r7]
 4357 0664 2D49     	 ldr r1,.L409+12
 4358 0666 1022     	 movs r2,#16
 4359 0668 FFF7FEFF 	 bl sbufWriteData
 873:../cleanflight/src/main/interface/msp.c ****         break;
 4360              	 .loc 26 873 0
 4361 066c 01F00CB8 	 b .L407
 4362              	.L346:
 4363              	.LBB25:
 874:../cleanflight/src/main/interface/msp.c ****     case MSP_SERVO_CONFIGURATIONS:
 875:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < MAX_SUPPORTED_SERVOS; i++) {
 4364              	 .loc 26 875 0
 4365 0670 0023     	 movs r3,#0
 4366 0672 BB67     	 str r3,[r7,#120]
 4367 0674 43E0     	 b .L374
 4368              	.L375:
 876:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, servoParams(i)->min);
 4369              	 .loc 26 876 0 discriminator 3
 4370 0676 B86F     	 ldr r0,[r7,#120]
 4371 0678 FFF7FEFF 	 bl servoParams
 4372 067c 0346     	 mov r3,r0
 4373 067e B3F90430 	 ldrsh r3,[r3,#4]
 4374 0682 9BB2     	 uxth r3,r3
 4375 0684 9BB2     	 uxth r3,r3
 4376 0686 3868     	 ldr r0,[r7]
 4377 0688 1946     	 mov r1,r3
 4378 068a FFF7FEFF 	 bl sbufWriteU16
 877:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, servoParams(i)->max);
 4379              	 .loc 26 877 0 discriminator 3
 4380 068e B86F     	 ldr r0,[r7,#120]
 4381 0690 FFF7FEFF 	 bl servoParams
 4382 0694 0346     	 mov r3,r0
 4383 0696 B3F90630 	 ldrsh r3,[r3,#6]
 4384 069a 9BB2     	 uxth r3,r3
 4385 069c 9BB2     	 uxth r3,r3
 4386 069e 3868     	 ldr r0,[r7]
 4387 06a0 1946     	 mov r1,r3
 4388 06a2 FFF7FEFF 	 bl sbufWriteU16
 878:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, servoParams(i)->middle);
 4389              	 .loc 26 878 0 discriminator 3
 4390 06a6 B86F     	 ldr r0,[r7,#120]
 4391 06a8 FFF7FEFF 	 bl servoParams
 4392 06ac 0346     	 mov r3,r0
 4393 06ae B3F90830 	 ldrsh r3,[r3,#8]
 4394 06b2 9BB2     	 uxth r3,r3
 4395 06b4 9BB2     	 uxth r3,r3
 4396 06b6 3868     	 ldr r0,[r7]
 4397 06b8 1946     	 mov r1,r3
 4398 06ba FFF7FEFF 	 bl sbufWriteU16
 879:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, servoParams(i)->rate);
 4399              	 .loc 26 879 0 discriminator 3
 4400 06be B86F     	 ldr r0,[r7,#120]
 4401 06c0 FFF7FEFF 	 bl servoParams
 4402 06c4 0346     	 mov r3,r0
 4403 06c6 9B7A     	 ldrb r3,[r3,#10]
 4404 06c8 DBB2     	 uxtb r3,r3
 4405 06ca 3868     	 ldr r0,[r7]
 4406 06cc 1946     	 mov r1,r3
 4407 06ce FFF7FEFF 	 bl sbufWriteU8
 880:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, servoParams(i)->forwardFromChannel);
 4408              	 .loc 26 880 0 discriminator 3
 4409 06d2 B86F     	 ldr r0,[r7,#120]
 4410 06d4 FFF7FEFF 	 bl servoParams
 4411 06d8 0346     	 mov r3,r0
 4412 06da DB7A     	 ldrb r3,[r3,#11]
 4413 06dc DBB2     	 uxtb r3,r3
 4414 06de 3868     	 ldr r0,[r7]
 4415 06e0 1946     	 mov r1,r3
 4416 06e2 FFF7FEFF 	 bl sbufWriteU8
 881:../cleanflight/src/main/interface/msp.c ****             sbufWriteU32(dst, servoParams(i)->reversedSources);
 4417              	 .loc 26 881 0 discriminator 3
 4418 06e6 B86F     	 ldr r0,[r7,#120]
 4419 06e8 FFF7FEFF 	 bl servoParams
 4420 06ec 0346     	 mov r3,r0
 4421 06ee 1B68     	 ldr r3,[r3]
 4422 06f0 3868     	 ldr r0,[r7]
 4423 06f2 1946     	 mov r1,r3
 4424 06f4 FFF7FEFF 	 bl sbufWriteU32
 875:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, servoParams(i)->min);
 4425              	 .loc 26 875 0 discriminator 3
 4426 06f8 BB6F     	 ldr r3,[r7,#120]
 4427 06fa 0133     	 adds r3,r3,#1
 4428 06fc BB67     	 str r3,[r7,#120]
 4429              	.L374:
 875:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, servoParams(i)->min);
 4430              	 .loc 26 875 0 is_stmt 0 discriminator 1
 4431 06fe BB6F     	 ldr r3,[r7,#120]
 4432 0700 072B     	 cmp r3,#7
 4433 0702 B8DD     	 ble .L375
 4434              	.LBE25:
 882:../cleanflight/src/main/interface/msp.c ****         }
 883:../cleanflight/src/main/interface/msp.c ****         break;
 4435              	 .loc 26 883 0 is_stmt 1
 4436 0704 00F0C0BF 	 b .L407
 4437              	.L356:
 4438              	.LBB26:
 884:../cleanflight/src/main/interface/msp.c **** 
 885:../cleanflight/src/main/interface/msp.c ****     case MSP_SERVO_MIX_RULES:
 886:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < MAX_SERVO_RULES; i++) {
 4439              	 .loc 26 886 0
 4440 0708 0023     	 movs r3,#0
 4441 070a 7B67     	 str r3,[r7,#116]
 4442 070c 4DE0     	 b .L376
 4443              	.L410:
 4444 070e 00BF     	 .align 2
 4445              	.L409:
 4446 0710 00000000 	 .word averageSystemLoadPercent
 4447 0714 00000000 	 .word acc
 4448 0718 00000000 	 .word mag
 4449 071c 00000000 	 .word servo
 4450              	.L377:
 887:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, customServoMixers(i)->targetChannel);
 4451              	 .loc 26 887 0 discriminator 3
 4452 0720 786F     	 ldr r0,[r7,#116]
 4453 0722 FFF7FEFF 	 bl customServoMixers
 4454 0726 0346     	 mov r3,r0
 4455 0728 1B78     	 ldrb r3,[r3]
 4456 072a 3868     	 ldr r0,[r7]
 4457 072c 1946     	 mov r1,r3
 4458 072e FFF7FEFF 	 bl sbufWriteU8
 888:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, customServoMixers(i)->inputSource);
 4459              	 .loc 26 888 0 discriminator 3
 4460 0732 786F     	 ldr r0,[r7,#116]
 4461 0734 FFF7FEFF 	 bl customServoMixers
 4462 0738 0346     	 mov r3,r0
 4463 073a 5B78     	 ldrb r3,[r3,#1]
 4464 073c 3868     	 ldr r0,[r7]
 4465 073e 1946     	 mov r1,r3
 4466 0740 FFF7FEFF 	 bl sbufWriteU8
 889:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, customServoMixers(i)->rate);
 4467              	 .loc 26 889 0 discriminator 3
 4468 0744 786F     	 ldr r0,[r7,#116]
 4469 0746 FFF7FEFF 	 bl customServoMixers
 4470 074a 0346     	 mov r3,r0
 4471 074c 9B78     	 ldrb r3,[r3,#2]
 4472 074e DBB2     	 uxtb r3,r3
 4473 0750 3868     	 ldr r0,[r7]
 4474 0752 1946     	 mov r1,r3
 4475 0754 FFF7FEFF 	 bl sbufWriteU8
 890:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, customServoMixers(i)->speed);
 4476              	 .loc 26 890 0 discriminator 3
 4477 0758 786F     	 ldr r0,[r7,#116]
 4478 075a FFF7FEFF 	 bl customServoMixers
 4479 075e 0346     	 mov r3,r0
 4480 0760 DB78     	 ldrb r3,[r3,#3]
 4481 0762 3868     	 ldr r0,[r7]
 4482 0764 1946     	 mov r1,r3
 4483 0766 FFF7FEFF 	 bl sbufWriteU8
 891:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, customServoMixers(i)->min);
 4484              	 .loc 26 891 0 discriminator 3
 4485 076a 786F     	 ldr r0,[r7,#116]
 4486 076c FFF7FEFF 	 bl customServoMixers
 4487 0770 0346     	 mov r3,r0
 4488 0772 1B79     	 ldrb r3,[r3,#4]
 4489 0774 DBB2     	 uxtb r3,r3
 4490 0776 3868     	 ldr r0,[r7]
 4491 0778 1946     	 mov r1,r3
 4492 077a FFF7FEFF 	 bl sbufWriteU8
 892:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, customServoMixers(i)->max);
 4493              	 .loc 26 892 0 discriminator 3
 4494 077e 786F     	 ldr r0,[r7,#116]
 4495 0780 FFF7FEFF 	 bl customServoMixers
 4496 0784 0346     	 mov r3,r0
 4497 0786 5B79     	 ldrb r3,[r3,#5]
 4498 0788 DBB2     	 uxtb r3,r3
 4499 078a 3868     	 ldr r0,[r7]
 4500 078c 1946     	 mov r1,r3
 4501 078e FFF7FEFF 	 bl sbufWriteU8
 893:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, customServoMixers(i)->box);
 4502              	 .loc 26 893 0 discriminator 3
 4503 0792 786F     	 ldr r0,[r7,#116]
 4504 0794 FFF7FEFF 	 bl customServoMixers
 4505 0798 0346     	 mov r3,r0
 4506 079a 9B79     	 ldrb r3,[r3,#6]
 4507 079c 3868     	 ldr r0,[r7]
 4508 079e 1946     	 mov r1,r3
 4509 07a0 FFF7FEFF 	 bl sbufWriteU8
 886:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, customServoMixers(i)->targetChannel);
 4510              	 .loc 26 886 0 discriminator 3
 4511 07a4 7B6F     	 ldr r3,[r7,#116]
 4512 07a6 0133     	 adds r3,r3,#1
 4513 07a8 7B67     	 str r3,[r7,#116]
 4514              	.L376:
 886:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, customServoMixers(i)->targetChannel);
 4515              	 .loc 26 886 0 is_stmt 0 discriminator 1
 4516 07aa 7B6F     	 ldr r3,[r7,#116]
 4517 07ac 0F2B     	 cmp r3,#15
 4518 07ae B7DD     	 ble .L377
 4519              	.LBE26:
 894:../cleanflight/src/main/interface/msp.c ****         }
 895:../cleanflight/src/main/interface/msp.c ****         break;
 4520              	 .loc 26 895 0 is_stmt 1
 4521 07b0 00F06ABF 	 b .L407
 4522              	.L337:
 4523              	.LBB27:
 896:../cleanflight/src/main/interface/msp.c **** #endif
 897:../cleanflight/src/main/interface/msp.c **** 
 898:../cleanflight/src/main/interface/msp.c ****     case MSP_MOTOR:
 899:../cleanflight/src/main/interface/msp.c ****         for (unsigned i = 0; i < 8; i++) {
 4524              	 .loc 26 899 0
 4525 07b4 0023     	 movs r3,#0
 4526 07b6 3B67     	 str r3,[r7,#112]
 4527 07b8 25E0     	 b .L378
 4528              	.L382:
 900:../cleanflight/src/main/interface/msp.c ****             if (i >= MAX_SUPPORTED_MOTORS || !pwmGetMotors()[i].enabled) {
 4529              	 .loc 26 900 0
 4530 07ba 3B6F     	 ldr r3,[r7,#112]
 4531 07bc 072B     	 cmp r3,#7
 4532 07be 0DD8     	 bhi .L379
 4533              	 .loc 26 900 0 is_stmt 0 discriminator 1
 4534 07c0 FFF7FEFF 	 bl pwmGetMotors
 4535 07c4 0146     	 mov r1,r0
 4536 07c6 3B6F     	 ldr r3,[r7,#112]
 4537 07c8 1622     	 movs r2,#22
 4538 07ca 02FB03F3 	 mul r3,r2,r3
 4539 07ce 0B44     	 add r3,r3,r1
 4540 07d0 5B7C     	 ldrb r3,[r3,#17]
 4541 07d2 83F00103 	 eor r3,r3,#1
 4542 07d6 DBB2     	 uxtb r3,r3
 4543 07d8 002B     	 cmp r3,#0
 4544 07da 04D0     	 beq .L380
 4545              	.L379:
 901:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, 0);
 4546              	 .loc 26 901 0 is_stmt 1
 4547 07dc 3868     	 ldr r0,[r7]
 4548 07de 0021     	 movs r1,#0
 4549 07e0 FFF7FEFF 	 bl sbufWriteU16
 902:../cleanflight/src/main/interface/msp.c ****                 continue;
 4550              	 .loc 26 902 0
 4551 07e4 0CE0     	 b .L381
 4552              	.L380:
 903:../cleanflight/src/main/interface/msp.c ****             }
 904:../cleanflight/src/main/interface/msp.c **** 
 905:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, convertMotorToExternal(motor[i]));
 4553              	 .loc 26 905 0
 4554 07e6 A24A     	 ldr r2,.L411
 4555 07e8 3B6F     	 ldr r3,[r7,#112]
 4556 07ea 9B00     	 lsls r3,r3,#2
 4557 07ec 1344     	 add r3,r3,r2
 4558 07ee 1B68     	 ldr r3,[r3]
 4559 07f0 1846     	 mov r0,r3
 4560 07f2 FFF7FEFF 	 bl convertMotorToExternal
 4561 07f6 0346     	 mov r3,r0
 4562 07f8 3868     	 ldr r0,[r7]
 4563 07fa 1946     	 mov r1,r3
 4564 07fc FFF7FEFF 	 bl sbufWriteU16
 4565              	.L381:
 899:../cleanflight/src/main/interface/msp.c ****             if (i >= MAX_SUPPORTED_MOTORS || !pwmGetMotors()[i].enabled) {
 4566              	 .loc 26 899 0 discriminator 2
 4567 0800 3B6F     	 ldr r3,[r7,#112]
 4568 0802 0133     	 adds r3,r3,#1
 4569 0804 3B67     	 str r3,[r7,#112]
 4570              	.L378:
 899:../cleanflight/src/main/interface/msp.c ****             if (i >= MAX_SUPPORTED_MOTORS || !pwmGetMotors()[i].enabled) {
 4571              	 .loc 26 899 0 is_stmt 0 discriminator 1
 4572 0806 3B6F     	 ldr r3,[r7,#112]
 4573 0808 072B     	 cmp r3,#7
 4574 080a D6D9     	 bls .L382
 4575              	.LBE27:
 906:../cleanflight/src/main/interface/msp.c ****         }
 907:../cleanflight/src/main/interface/msp.c ****         break;
 4576              	 .loc 26 907 0 is_stmt 1
 4577 080c 00F03CBF 	 b .L407
 4578              	.L338:
 4579              	.LBB28:
 908:../cleanflight/src/main/interface/msp.c **** 
 909:../cleanflight/src/main/interface/msp.c ****     case MSP_RC:
 910:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < rxRuntimeConfig.channelCount; i++) {
 4580              	 .loc 26 910 0
 4581 0810 0023     	 movs r3,#0
 4582 0812 FB66     	 str r3,[r7,#108]
 4583 0814 0BE0     	 b .L383
 4584              	.L384:
 911:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, rcData[i]);
 4585              	 .loc 26 911 0 discriminator 3
 4586 0816 974A     	 ldr r2,.L411+4
 4587 0818 FB6E     	 ldr r3,[r7,#108]
 4588 081a 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 4589 081e 9BB2     	 uxth r3,r3
 4590 0820 3868     	 ldr r0,[r7]
 4591 0822 1946     	 mov r1,r3
 4592 0824 FFF7FEFF 	 bl sbufWriteU16
 910:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, rcData[i]);
 4593              	 .loc 26 910 0 discriminator 3
 4594 0828 FB6E     	 ldr r3,[r7,#108]
 4595 082a 0133     	 adds r3,r3,#1
 4596 082c FB66     	 str r3,[r7,#108]
 4597              	.L383:
 910:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, rcData[i]);
 4598              	 .loc 26 910 0 is_stmt 0 discriminator 1
 4599 082e 924B     	 ldr r3,.L411+8
 4600 0830 1B78     	 ldrb r3,[r3]
 4601 0832 1A46     	 mov r2,r3
 4602 0834 FB6E     	 ldr r3,[r7,#108]
 4603 0836 9A42     	 cmp r2,r3
 4604 0838 EDDC     	 bgt .L384
 4605              	.LBE28:
 912:../cleanflight/src/main/interface/msp.c ****         }
 913:../cleanflight/src/main/interface/msp.c ****         break;
 4606              	 .loc 26 913 0 is_stmt 1
 4607 083a 00F025BF 	 b .L407
 4608              	.L341:
 914:../cleanflight/src/main/interface/msp.c **** 
 915:../cleanflight/src/main/interface/msp.c ****     case MSP_ATTITUDE:
 916:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, attitude.values.roll);
 4609              	 .loc 26 916 0
 4610 083e 8F4B     	 ldr r3,.L411+12
 4611 0840 B3F90030 	 ldrsh r3,[r3]
 4612 0844 9BB2     	 uxth r3,r3
 4613 0846 9BB2     	 uxth r3,r3
 4614 0848 3868     	 ldr r0,[r7]
 4615 084a 1946     	 mov r1,r3
 4616 084c FFF7FEFF 	 bl sbufWriteU16
 917:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, attitude.values.pitch);
 4617              	 .loc 26 917 0
 4618 0850 8A4B     	 ldr r3,.L411+12
 4619 0852 B3F90230 	 ldrsh r3,[r3,#2]
 4620 0856 9BB2     	 uxth r3,r3
 4621 0858 9BB2     	 uxth r3,r3
 4622 085a 3868     	 ldr r0,[r7]
 4623 085c 1946     	 mov r1,r3
 4624 085e FFF7FEFF 	 bl sbufWriteU16
 918:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, DECIDEGREES_TO_DEGREES(attitude.values.yaw));
 4625              	 .loc 26 918 0
 4626 0862 864B     	 ldr r3,.L411+12
 4627 0864 B3F90430 	 ldrsh r3,[r3,#4]
 4628 0868 9BB2     	 uxth r3,r3
 4629 086a 1BB2     	 sxth r3,r3
 4630 086c 844A     	 ldr r2,.L411+16
 4631 086e 82FB0312 	 smull r1,r2,r2,r3
 4632 0872 9210     	 asrs r2,r2,#2
 4633 0874 DB17     	 asrs r3,r3,#31
 4634 0876 D31A     	 subs r3,r2,r3
 4635 0878 9BB2     	 uxth r3,r3
 4636 087a 9BB2     	 uxth r3,r3
 4637 087c 3868     	 ldr r0,[r7]
 4638 087e 1946     	 mov r1,r3
 4639 0880 FFF7FEFF 	 bl sbufWriteU16
 919:../cleanflight/src/main/interface/msp.c ****         break;
 4640              	 .loc 26 919 0
 4641 0884 00F000BF 	 b .L407
 4642              	.L342:
 920:../cleanflight/src/main/interface/msp.c **** 
 921:../cleanflight/src/main/interface/msp.c ****     case MSP_ALTITUDE:
 922:../cleanflight/src/main/interface/msp.c **** #if defined(USE_BARO) || defined(USE_RANGEFINDER)
 923:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, getEstimatedAltitude());
 4643              	 .loc 26 923 0
 4644 0888 FFF7FEFF 	 bl getEstimatedAltitude
 4645 088c 0346     	 mov r3,r0
 4646 088e 3868     	 ldr r0,[r7]
 4647 0890 1946     	 mov r1,r3
 4648 0892 FFF7FEFF 	 bl sbufWriteU32
 924:../cleanflight/src/main/interface/msp.c **** #else
 925:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, 0);
 926:../cleanflight/src/main/interface/msp.c **** #endif
 927:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, getEstimatedVario());
 4649              	 .loc 26 927 0
 4650 0896 FFF7FEFF 	 bl getEstimatedVario
 4651 089a 0346     	 mov r3,r0
 4652 089c 9BB2     	 uxth r3,r3
 4653 089e 3868     	 ldr r0,[r7]
 4654 08a0 1946     	 mov r1,r3
 4655 08a2 FFF7FEFF 	 bl sbufWriteU16
 928:../cleanflight/src/main/interface/msp.c ****         break;
 4656              	 .loc 26 928 0
 4657 08a6 00F0EFBE 	 b .L407
 4658              	.L320:
 929:../cleanflight/src/main/interface/msp.c **** 
 930:../cleanflight/src/main/interface/msp.c ****     case MSP_SONAR_ALTITUDE:
 931:../cleanflight/src/main/interface/msp.c **** #if defined(USE_RANGEFINDER)
 932:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, rangefinderGetLatestAltitude());
 933:../cleanflight/src/main/interface/msp.c **** #else
 934:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, 0);
 4659              	 .loc 26 934 0
 4660 08aa 3868     	 ldr r0,[r7]
 4661 08ac 0021     	 movs r1,#0
 4662 08ae FFF7FEFF 	 bl sbufWriteU32
 935:../cleanflight/src/main/interface/msp.c **** #endif
 936:../cleanflight/src/main/interface/msp.c ****         break;
 4663              	 .loc 26 936 0
 4664 08b2 00F0E9BE 	 b .L407
 4665              	.L314:
 937:../cleanflight/src/main/interface/msp.c **** 
 938:../cleanflight/src/main/interface/msp.c ****     case MSP_BOARD_ALIGNMENT_CONFIG:
 939:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, boardAlignment()->rollDegrees);
 4666              	 .loc 26 939 0
 4667 08b6 FFF7FEFF 	 bl boardAlignment
 4668 08ba 0346     	 mov r3,r0
 4669 08bc 1B68     	 ldr r3,[r3]
 4670 08be 9BB2     	 uxth r3,r3
 4671 08c0 3868     	 ldr r0,[r7]
 4672 08c2 1946     	 mov r1,r3
 4673 08c4 FFF7FEFF 	 bl sbufWriteU16
 940:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, boardAlignment()->pitchDegrees);
 4674              	 .loc 26 940 0
 4675 08c8 FFF7FEFF 	 bl boardAlignment
 4676 08cc 0346     	 mov r3,r0
 4677 08ce 5B68     	 ldr r3,[r3,#4]
 4678 08d0 9BB2     	 uxth r3,r3
 4679 08d2 3868     	 ldr r0,[r7]
 4680 08d4 1946     	 mov r1,r3
 4681 08d6 FFF7FEFF 	 bl sbufWriteU16
 941:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, boardAlignment()->yawDegrees);
 4682              	 .loc 26 941 0
 4683 08da FFF7FEFF 	 bl boardAlignment
 4684 08de 0346     	 mov r3,r0
 4685 08e0 9B68     	 ldr r3,[r3,#8]
 4686 08e2 9BB2     	 uxth r3,r3
 4687 08e4 3868     	 ldr r0,[r7]
 4688 08e6 1946     	 mov r1,r3
 4689 08e8 FFF7FEFF 	 bl sbufWriteU16
 942:../cleanflight/src/main/interface/msp.c ****         break;
 4690              	 .loc 26 942 0
 4691 08ec 00F0CCBE 	 b .L407
 4692              	.L322:
 943:../cleanflight/src/main/interface/msp.c **** 
 944:../cleanflight/src/main/interface/msp.c ****     case MSP_ARMING_CONFIG:
 945:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, armingConfig()->auto_disarm_delay);
 4693              	 .loc 26 945 0
 4694 08f0 FFF7FEFF 	 bl armingConfig
 4695 08f4 0346     	 mov r3,r0
 4696 08f6 5B78     	 ldrb r3,[r3,#1]
 4697 08f8 3868     	 ldr r0,[r7]
 4698 08fa 1946     	 mov r1,r3
 4699 08fc FFF7FEFF 	 bl sbufWriteU8
 946:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
 4700              	 .loc 26 946 0
 4701 0900 3868     	 ldr r0,[r7]
 4702 0902 0021     	 movs r1,#0
 4703 0904 FFF7FEFF 	 bl sbufWriteU8
 947:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, imuConfig()->small_angle);
 4704              	 .loc 26 947 0
 4705 0908 FFF7FEFF 	 bl imuConfig
 4706 090c 0346     	 mov r3,r0
 4707 090e 1B79     	 ldrb r3,[r3,#4]
 4708 0910 3868     	 ldr r0,[r7]
 4709 0912 1946     	 mov r1,r3
 4710 0914 FFF7FEFF 	 bl sbufWriteU8
 948:../cleanflight/src/main/interface/msp.c ****         break;
 4711              	 .loc 26 948 0
 4712 0918 00F0B6BE 	 b .L407
 4713              	.L343:
 949:../cleanflight/src/main/interface/msp.c **** 
 950:../cleanflight/src/main/interface/msp.c ****     case MSP_RC_TUNING:
 951:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentControlRateProfile->rcRates[FD_ROLL]);
 4714              	 .loc 26 951 0
 4715 091c 594B     	 ldr r3,.L411+20
 4716 091e 1B68     	 ldr r3,[r3]
 4717 0920 DB78     	 ldrb r3,[r3,#3]
 4718 0922 3868     	 ldr r0,[r7]
 4719 0924 1946     	 mov r1,r3
 4720 0926 FFF7FEFF 	 bl sbufWriteU8
 952:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentControlRateProfile->rcExpo[FD_ROLL]);
 4721              	 .loc 26 952 0
 4722 092a 564B     	 ldr r3,.L411+20
 4723 092c 1B68     	 ldr r3,[r3]
 4724 092e 9B79     	 ldrb r3,[r3,#6]
 4725 0930 3868     	 ldr r0,[r7]
 4726 0932 1946     	 mov r1,r3
 4727 0934 FFF7FEFF 	 bl sbufWriteU8
 4728              	.LBB29:
 953:../cleanflight/src/main/interface/msp.c ****         for (int i = 0 ; i < 3; i++) {
 4729              	 .loc 26 953 0
 4730 0938 0023     	 movs r3,#0
 4731 093a BB66     	 str r3,[r7,#104]
 4732 093c 0CE0     	 b .L385
 4733              	.L386:
 954:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, currentControlRateProfile->rates[i]); // R,P,Y see flight_dynamics_ind
 4734              	 .loc 26 954 0 discriminator 3
 4735 093e 514B     	 ldr r3,.L411+20
 4736 0940 1A68     	 ldr r2,[r3]
 4737 0942 BB6E     	 ldr r3,[r7,#104]
 4738 0944 1344     	 add r3,r3,r2
 4739 0946 0833     	 adds r3,r3,#8
 4740 0948 5B78     	 ldrb r3,[r3,#1]
 4741 094a 3868     	 ldr r0,[r7]
 4742 094c 1946     	 mov r1,r3
 4743 094e FFF7FEFF 	 bl sbufWriteU8
 953:../cleanflight/src/main/interface/msp.c ****         for (int i = 0 ; i < 3; i++) {
 4744              	 .loc 26 953 0 discriminator 3
 4745 0952 BB6E     	 ldr r3,[r7,#104]
 4746 0954 0133     	 adds r3,r3,#1
 4747 0956 BB66     	 str r3,[r7,#104]
 4748              	.L385:
 953:../cleanflight/src/main/interface/msp.c ****         for (int i = 0 ; i < 3; i++) {
 4749              	 .loc 26 953 0 is_stmt 0 discriminator 1
 4750 0958 BB6E     	 ldr r3,[r7,#104]
 4751 095a 022B     	 cmp r3,#2
 4752 095c EFDD     	 ble .L386
 4753              	.LBE29:
 955:../cleanflight/src/main/interface/msp.c ****         }
 956:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentControlRateProfile->dynThrPID);
 4754              	 .loc 26 956 0 is_stmt 1
 4755 095e 494B     	 ldr r3,.L411+20
 4756 0960 1B68     	 ldr r3,[r3]
 4757 0962 1B7B     	 ldrb r3,[r3,#12]
 4758 0964 3868     	 ldr r0,[r7]
 4759 0966 1946     	 mov r1,r3
 4760 0968 FFF7FEFF 	 bl sbufWriteU8
 957:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentControlRateProfile->thrMid8);
 4761              	 .loc 26 957 0
 4762 096c 454B     	 ldr r3,.L411+20
 4763 096e 1B68     	 ldr r3,[r3]
 4764 0970 1B78     	 ldrb r3,[r3]
 4765 0972 3868     	 ldr r0,[r7]
 4766 0974 1946     	 mov r1,r3
 4767 0976 FFF7FEFF 	 bl sbufWriteU8
 958:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentControlRateProfile->thrExpo8);
 4768              	 .loc 26 958 0
 4769 097a 424B     	 ldr r3,.L411+20
 4770 097c 1B68     	 ldr r3,[r3]
 4771 097e 5B78     	 ldrb r3,[r3,#1]
 4772 0980 3868     	 ldr r0,[r7]
 4773 0982 1946     	 mov r1,r3
 4774 0984 FFF7FEFF 	 bl sbufWriteU8
 959:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentControlRateProfile->tpa_breakpoint);
 4775              	 .loc 26 959 0
 4776 0988 3E4B     	 ldr r3,.L411+20
 4777 098a 1B68     	 ldr r3,[r3]
 4778 098c B3F80D30 	 ldrh r3,[r3,#13]
 4779 0990 9BB2     	 uxth r3,r3
 4780 0992 3868     	 ldr r0,[r7]
 4781 0994 1946     	 mov r1,r3
 4782 0996 FFF7FEFF 	 bl sbufWriteU16
 960:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentControlRateProfile->rcExpo[FD_YAW]);
 4783              	 .loc 26 960 0
 4784 099a 3A4B     	 ldr r3,.L411+20
 4785 099c 1B68     	 ldr r3,[r3]
 4786 099e 1B7A     	 ldrb r3,[r3,#8]
 4787 09a0 3868     	 ldr r0,[r7]
 4788 09a2 1946     	 mov r1,r3
 4789 09a4 FFF7FEFF 	 bl sbufWriteU8
 961:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentControlRateProfile->rcRates[FD_YAW]);
 4790              	 .loc 26 961 0
 4791 09a8 364B     	 ldr r3,.L411+20
 4792 09aa 1B68     	 ldr r3,[r3]
 4793 09ac 5B79     	 ldrb r3,[r3,#5]
 4794 09ae 3868     	 ldr r0,[r7]
 4795 09b0 1946     	 mov r1,r3
 4796 09b2 FFF7FEFF 	 bl sbufWriteU8
 962:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentControlRateProfile->rcRates[FD_PITCH]);
 4797              	 .loc 26 962 0
 4798 09b6 334B     	 ldr r3,.L411+20
 4799 09b8 1B68     	 ldr r3,[r3]
 4800 09ba 1B79     	 ldrb r3,[r3,#4]
 4801 09bc 3868     	 ldr r0,[r7]
 4802 09be 1946     	 mov r1,r3
 4803 09c0 FFF7FEFF 	 bl sbufWriteU8
 963:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentControlRateProfile->rcExpo[FD_PITCH]);
 4804              	 .loc 26 963 0
 4805 09c4 2F4B     	 ldr r3,.L411+20
 4806 09c6 1B68     	 ldr r3,[r3]
 4807 09c8 DB79     	 ldrb r3,[r3,#7]
 4808 09ca 3868     	 ldr r0,[r7]
 4809 09cc 1946     	 mov r1,r3
 4810 09ce FFF7FEFF 	 bl sbufWriteU8
 964:../cleanflight/src/main/interface/msp.c ****         break;
 4811              	 .loc 26 964 0
 4812 09d2 00F059BE 	 b .L407
 4813              	.L344:
 4814              	.LBB30:
 965:../cleanflight/src/main/interface/msp.c **** 
 966:../cleanflight/src/main/interface/msp.c ****     case MSP_PID:
 967:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < PID_ITEM_COUNT; i++) {
 4815              	 .loc 26 967 0
 4816 09d6 0023     	 movs r3,#0
 4817 09d8 7B66     	 str r3,[r7,#100]
 4818 09da 29E0     	 b .L387
 4819              	.L388:
 968:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, currentPidProfile->pid[i].P);
 4820              	 .loc 26 968 0 discriminator 3
 4821 09dc 2A4B     	 ldr r3,.L411+24
 4822 09de 1968     	 ldr r1,[r3]
 4823 09e0 7A6E     	 ldr r2,[r7,#100]
 4824 09e2 1346     	 mov r3,r2
 4825 09e4 9B00     	 lsls r3,r3,#2
 4826 09e6 1344     	 add r3,r3,r2
 4827 09e8 0B44     	 add r3,r3,r1
 4828 09ea 0833     	 adds r3,r3,#8
 4829 09ec 1B78     	 ldrb r3,[r3]
 4830 09ee 3868     	 ldr r0,[r7]
 4831 09f0 1946     	 mov r1,r3
 4832 09f2 FFF7FEFF 	 bl sbufWriteU8
 969:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, currentPidProfile->pid[i].I);
 4833              	 .loc 26 969 0 discriminator 3
 4834 09f6 244B     	 ldr r3,.L411+24
 4835 09f8 1968     	 ldr r1,[r3]
 4836 09fa 7A6E     	 ldr r2,[r7,#100]
 4837 09fc 1346     	 mov r3,r2
 4838 09fe 9B00     	 lsls r3,r3,#2
 4839 0a00 1344     	 add r3,r3,r2
 4840 0a02 0B44     	 add r3,r3,r1
 4841 0a04 0833     	 adds r3,r3,#8
 4842 0a06 5B78     	 ldrb r3,[r3,#1]
 4843 0a08 3868     	 ldr r0,[r7]
 4844 0a0a 1946     	 mov r1,r3
 4845 0a0c FFF7FEFF 	 bl sbufWriteU8
 970:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, currentPidProfile->pid[i].D);
 4846              	 .loc 26 970 0 discriminator 3
 4847 0a10 1D4B     	 ldr r3,.L411+24
 4848 0a12 1968     	 ldr r1,[r3]
 4849 0a14 7A6E     	 ldr r2,[r7,#100]
 4850 0a16 1346     	 mov r3,r2
 4851 0a18 9B00     	 lsls r3,r3,#2
 4852 0a1a 1344     	 add r3,r3,r2
 4853 0a1c 0B44     	 add r3,r3,r1
 4854 0a1e 0833     	 adds r3,r3,#8
 4855 0a20 9B78     	 ldrb r3,[r3,#2]
 4856 0a22 3868     	 ldr r0,[r7]
 4857 0a24 1946     	 mov r1,r3
 4858 0a26 FFF7FEFF 	 bl sbufWriteU8
 967:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, currentPidProfile->pid[i].P);
 4859              	 .loc 26 967 0 discriminator 3
 4860 0a2a 7B6E     	 ldr r3,[r7,#100]
 4861 0a2c 0133     	 adds r3,r3,#1
 4862 0a2e 7B66     	 str r3,[r7,#100]
 4863              	.L387:
 967:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, currentPidProfile->pid[i].P);
 4864              	 .loc 26 967 0 is_stmt 0 discriminator 1
 4865 0a30 7B6E     	 ldr r3,[r7,#100]
 4866 0a32 042B     	 cmp r3,#4
 4867 0a34 D2DD     	 ble .L388
 4868              	.LBE30:
 971:../cleanflight/src/main/interface/msp.c ****         }
 972:../cleanflight/src/main/interface/msp.c ****         break;
 4869              	 .loc 26 972 0 is_stmt 1
 4870 0a36 00F027BE 	 b .L407
 4871              	.L345:
 4872              	.LBB31:
 973:../cleanflight/src/main/interface/msp.c **** 
 974:../cleanflight/src/main/interface/msp.c ****     case MSP_PIDNAMES:
 975:../cleanflight/src/main/interface/msp.c ****         for (const char *c = pidNames; *c; c++) {
 4873              	 .loc 26 975 0
 4874 0a3a 144B     	 ldr r3,.L411+28
 4875 0a3c 3B66     	 str r3,[r7,#96]
 4876 0a3e 08E0     	 b .L389
 4877              	.L390:
 976:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, *c);
 4878              	 .loc 26 976 0 discriminator 3
 4879 0a40 3B6E     	 ldr r3,[r7,#96]
 4880 0a42 1B78     	 ldrb r3,[r3]
 4881 0a44 3868     	 ldr r0,[r7]
 4882 0a46 1946     	 mov r1,r3
 4883 0a48 FFF7FEFF 	 bl sbufWriteU8
 975:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, *c);
 4884              	 .loc 26 975 0 discriminator 3
 4885 0a4c 3B6E     	 ldr r3,[r7,#96]
 4886 0a4e 0133     	 adds r3,r3,#1
 4887 0a50 3B66     	 str r3,[r7,#96]
 4888              	.L389:
 975:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, *c);
 4889              	 .loc 26 975 0 is_stmt 0 discriminator 1
 4890 0a52 3B6E     	 ldr r3,[r7,#96]
 4891 0a54 1B78     	 ldrb r3,[r3]
 4892 0a56 002B     	 cmp r3,#0
 4893 0a58 F2D1     	 bne .L390
 4894              	.LBE31:
 977:../cleanflight/src/main/interface/msp.c ****         }
 978:../cleanflight/src/main/interface/msp.c ****         break;
 4895              	 .loc 26 978 0 is_stmt 1
 4896 0a5a 00F015BE 	 b .L407
 4897              	.L321:
 979:../cleanflight/src/main/interface/msp.c **** 
 980:../cleanflight/src/main/interface/msp.c ****     case MSP_PID_CONTROLLER:
 981:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, PID_CONTROLLER_BETAFLIGHT);
 4898              	 .loc 26 981 0
 4899 0a5e 3868     	 ldr r0,[r7]
 4900 0a60 0121     	 movs r1,#1
 4901 0a62 FFF7FEFF 	 bl sbufWriteU8
 982:../cleanflight/src/main/interface/msp.c ****         break;
 4902              	 .loc 26 982 0
 4903 0a66 00F00FBE 	 b .L407
 4904              	.L313:
 4905              	.LBB32:
 983:../cleanflight/src/main/interface/msp.c **** 
 984:../cleanflight/src/main/interface/msp.c ****     case MSP_MODE_RANGES:
 985:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < MAX_MODE_ACTIVATION_CONDITION_COUNT; i++) {
 4906              	 .loc 26 985 0
 4907 0a6a 0023     	 movs r3,#0
 4908 0a6c FB65     	 str r3,[r7,#92]
 4909 0a6e 34E0     	 b .L391
 4910              	.L412:
 4911              	 .align 2
 4912              	.L411:
 4913 0a70 00000000 	 .word motor
 4914 0a74 00000000 	 .word rcData
 4915 0a78 00000000 	 .word rxRuntimeConfig
 4916 0a7c 00000000 	 .word attitude
 4917 0a80 67666666 	 .word 1717986919
 4918 0a84 00000000 	 .word currentControlRateProfile
 4919 0a88 00000000 	 .word currentPidProfile
 4920 0a8c 00000000 	 .word pidNames
 4921              	.L392:
 4922              	.LBB33:
 986:../cleanflight/src/main/interface/msp.c ****             const modeActivationCondition_t *mac = modeActivationConditions(i);
 4923              	 .loc 26 986 0 discriminator 3
 4924 0a90 F86D     	 ldr r0,[r7,#92]
 4925 0a92 FFF7FEFF 	 bl modeActivationConditions
 4926 0a96 7863     	 str r0,[r7,#52]
 987:../cleanflight/src/main/interface/msp.c ****             const box_t *box = findBoxByBoxId(mac->modeId);
 4927              	 .loc 26 987 0 discriminator 3
 4928 0a98 7B6B     	 ldr r3,[r7,#52]
 4929 0a9a 1B78     	 ldrb r3,[r3]
 4930 0a9c 1846     	 mov r0,r3
 4931 0a9e FFF7FEFF 	 bl findBoxByBoxId
 4932 0aa2 3863     	 str r0,[r7,#48]
 988:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, box->permanentId);
 4933              	 .loc 26 988 0 discriminator 3
 4934 0aa4 3B6B     	 ldr r3,[r7,#48]
 4935 0aa6 5B79     	 ldrb r3,[r3,#5]
 4936 0aa8 3868     	 ldr r0,[r7]
 4937 0aaa 1946     	 mov r1,r3
 4938 0aac FFF7FEFF 	 bl sbufWriteU8
 989:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, mac->auxChannelIndex);
 4939              	 .loc 26 989 0 discriminator 3
 4940 0ab0 7B6B     	 ldr r3,[r7,#52]
 4941 0ab2 5B78     	 ldrb r3,[r3,#1]
 4942 0ab4 3868     	 ldr r0,[r7]
 4943 0ab6 1946     	 mov r1,r3
 4944 0ab8 FFF7FEFF 	 bl sbufWriteU8
 990:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, mac->range.startStep);
 4945              	 .loc 26 990 0 discriminator 3
 4946 0abc 7B6B     	 ldr r3,[r7,#52]
 4947 0abe 9B78     	 ldrb r3,[r3,#2]
 4948 0ac0 3868     	 ldr r0,[r7]
 4949 0ac2 1946     	 mov r1,r3
 4950 0ac4 FFF7FEFF 	 bl sbufWriteU8
 991:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, mac->range.endStep);
 4951              	 .loc 26 991 0 discriminator 3
 4952 0ac8 7B6B     	 ldr r3,[r7,#52]
 4953 0aca DB78     	 ldrb r3,[r3,#3]
 4954 0acc 3868     	 ldr r0,[r7]
 4955 0ace 1946     	 mov r1,r3
 4956 0ad0 FFF7FEFF 	 bl sbufWriteU8
 4957              	.LBE33:
 985:../cleanflight/src/main/interface/msp.c ****             const modeActivationCondition_t *mac = modeActivationConditions(i);
 4958              	 .loc 26 985 0 discriminator 3
 4959 0ad4 FB6D     	 ldr r3,[r7,#92]
 4960 0ad6 0133     	 adds r3,r3,#1
 4961 0ad8 FB65     	 str r3,[r7,#92]
 4962              	.L391:
 985:../cleanflight/src/main/interface/msp.c ****             const modeActivationCondition_t *mac = modeActivationConditions(i);
 4963              	 .loc 26 985 0 is_stmt 0 discriminator 1
 4964 0ada FB6D     	 ldr r3,[r7,#92]
 4965 0adc 132B     	 cmp r3,#19
 4966 0ade D7DD     	 ble .L392
 4967              	.LBE32:
 992:../cleanflight/src/main/interface/msp.c ****         }
 993:../cleanflight/src/main/interface/msp.c ****         break;
 4968              	 .loc 26 993 0 is_stmt 1
 4969 0ae0 00F0D2BD 	 b .L407
 4970              	.L318:
 4971              	.LBB34:
 994:../cleanflight/src/main/interface/msp.c **** 
 995:../cleanflight/src/main/interface/msp.c ****     case MSP_ADJUSTMENT_RANGES:
 996:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < MAX_ADJUSTMENT_RANGE_COUNT; i++) {
 4972              	 .loc 26 996 0
 4973 0ae4 0023     	 movs r3,#0
 4974 0ae6 BB65     	 str r3,[r7,#88]
 4975 0ae8 2AE0     	 b .L393
 4976              	.L394:
 4977              	.LBB35:
 997:../cleanflight/src/main/interface/msp.c ****             const adjustmentRange_t *adjRange = adjustmentRanges(i);
 4978              	 .loc 26 997 0 discriminator 3
 4979 0aea B86D     	 ldr r0,[r7,#88]
 4980 0aec FFF7FEFF 	 bl adjustmentRanges
 4981 0af0 F862     	 str r0,[r7,#44]
 998:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, adjRange->adjustmentIndex);
 4982              	 .loc 26 998 0 discriminator 3
 4983 0af2 FB6A     	 ldr r3,[r7,#44]
 4984 0af4 5B79     	 ldrb r3,[r3,#5]
 4985 0af6 3868     	 ldr r0,[r7]
 4986 0af8 1946     	 mov r1,r3
 4987 0afa FFF7FEFF 	 bl sbufWriteU8
 999:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, adjRange->auxChannelIndex);
 4988              	 .loc 26 999 0 discriminator 3
 4989 0afe FB6A     	 ldr r3,[r7,#44]
 4990 0b00 1B78     	 ldrb r3,[r3]
 4991 0b02 3868     	 ldr r0,[r7]
 4992 0b04 1946     	 mov r1,r3
 4993 0b06 FFF7FEFF 	 bl sbufWriteU8
1000:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, adjRange->range.startStep);
 4994              	 .loc 26 1000 0 discriminator 3
 4995 0b0a FB6A     	 ldr r3,[r7,#44]
 4996 0b0c 5B78     	 ldrb r3,[r3,#1]
 4997 0b0e 3868     	 ldr r0,[r7]
 4998 0b10 1946     	 mov r1,r3
 4999 0b12 FFF7FEFF 	 bl sbufWriteU8
1001:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, adjRange->range.endStep);
 5000              	 .loc 26 1001 0 discriminator 3
 5001 0b16 FB6A     	 ldr r3,[r7,#44]
 5002 0b18 9B78     	 ldrb r3,[r3,#2]
 5003 0b1a 3868     	 ldr r0,[r7]
 5004 0b1c 1946     	 mov r1,r3
 5005 0b1e FFF7FEFF 	 bl sbufWriteU8
1002:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, adjRange->adjustmentFunction);
 5006              	 .loc 26 1002 0 discriminator 3
 5007 0b22 FB6A     	 ldr r3,[r7,#44]
 5008 0b24 DB78     	 ldrb r3,[r3,#3]
 5009 0b26 3868     	 ldr r0,[r7]
 5010 0b28 1946     	 mov r1,r3
 5011 0b2a FFF7FEFF 	 bl sbufWriteU8
1003:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, adjRange->auxSwitchChannelIndex);
 5012              	 .loc 26 1003 0 discriminator 3
 5013 0b2e FB6A     	 ldr r3,[r7,#44]
 5014 0b30 1B79     	 ldrb r3,[r3,#4]
 5015 0b32 3868     	 ldr r0,[r7]
 5016 0b34 1946     	 mov r1,r3
 5017 0b36 FFF7FEFF 	 bl sbufWriteU8
 5018              	.LBE35:
 996:../cleanflight/src/main/interface/msp.c ****             const adjustmentRange_t *adjRange = adjustmentRanges(i);
 5019              	 .loc 26 996 0 discriminator 3
 5020 0b3a BB6D     	 ldr r3,[r7,#88]
 5021 0b3c 0133     	 adds r3,r3,#1
 5022 0b3e BB65     	 str r3,[r7,#88]
 5023              	.L393:
 996:../cleanflight/src/main/interface/msp.c ****             const adjustmentRange_t *adjRange = adjustmentRanges(i);
 5024              	 .loc 26 996 0 is_stmt 0 discriminator 1
 5025 0b40 BB6D     	 ldr r3,[r7,#88]
 5026 0b42 0E2B     	 cmp r3,#14
 5027 0b44 D1DD     	 ble .L394
 5028              	.LBE34:
1004:../cleanflight/src/main/interface/msp.c ****         }
1005:../cleanflight/src/main/interface/msp.c ****         break;
 5029              	 .loc 26 1005 0 is_stmt 1
 5030 0b46 00F09FBD 	 b .L407
 5031              	.L350:
1006:../cleanflight/src/main/interface/msp.c **** 
1007:../cleanflight/src/main/interface/msp.c ****     case MSP_MOTOR_CONFIG:
1008:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, motorConfig()->minthrottle);
 5032              	 .loc 26 1008 0
 5033 0b4a FFF7FEFF 	 bl motorConfig
 5034 0b4e 0346     	 mov r3,r0
 5035 0b50 1B8A     	 ldrh r3,[r3,#16]
 5036 0b52 9BB2     	 uxth r3,r3
 5037 0b54 3868     	 ldr r0,[r7]
 5038 0b56 1946     	 mov r1,r3
 5039 0b58 FFF7FEFF 	 bl sbufWriteU16
1009:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, motorConfig()->maxthrottle);
 5040              	 .loc 26 1009 0
 5041 0b5c FFF7FEFF 	 bl motorConfig
 5042 0b60 0346     	 mov r3,r0
 5043 0b62 5B8A     	 ldrh r3,[r3,#18]
 5044 0b64 9BB2     	 uxth r3,r3
 5045 0b66 3868     	 ldr r0,[r7]
 5046 0b68 1946     	 mov r1,r3
 5047 0b6a FFF7FEFF 	 bl sbufWriteU16
1010:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, motorConfig()->mincommand);
 5048              	 .loc 26 1010 0
 5049 0b6e FFF7FEFF 	 bl motorConfig
 5050 0b72 0346     	 mov r3,r0
 5051 0b74 9B8A     	 ldrh r3,[r3,#20]
 5052 0b76 9BB2     	 uxth r3,r3
 5053 0b78 3868     	 ldr r0,[r7]
 5054 0b7a 1946     	 mov r1,r3
 5055 0b7c FFF7FEFF 	 bl sbufWriteU16
1011:../cleanflight/src/main/interface/msp.c ****         break;
 5056              	 .loc 26 1011 0
 5057 0b80 00F082BD 	 b .L407
 5058              	.L352:
1012:../cleanflight/src/main/interface/msp.c **** 
1013:../cleanflight/src/main/interface/msp.c **** #ifdef USE_MAG
1014:../cleanflight/src/main/interface/msp.c ****     case MSP_COMPASS_CONFIG:
1015:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, compassConfig()->mag_declination / 10);
 5059              	 .loc 26 1015 0
 5060 0b84 FFF7FEFF 	 bl compassConfig
 5061 0b88 0346     	 mov r3,r0
 5062 0b8a B3F90030 	 ldrsh r3,[r3]
 5063 0b8e 9BB2     	 uxth r3,r3
 5064 0b90 1BB2     	 sxth r3,r3
 5065 0b92 724A     	 ldr r2,.L413
 5066 0b94 82FB0312 	 smull r1,r2,r2,r3
 5067 0b98 9210     	 asrs r2,r2,#2
 5068 0b9a DB17     	 asrs r3,r3,#31
 5069 0b9c D31A     	 subs r3,r2,r3
 5070 0b9e 9BB2     	 uxth r3,r3
 5071 0ba0 9BB2     	 uxth r3,r3
 5072 0ba2 3868     	 ldr r0,[r7]
 5073 0ba4 1946     	 mov r1,r3
 5074 0ba6 FFF7FEFF 	 bl sbufWriteU16
1016:../cleanflight/src/main/interface/msp.c ****         break;
 5075              	 .loc 26 1016 0
 5076 0baa 00F06DBD 	 b .L407
 5077              	.L351:
1017:../cleanflight/src/main/interface/msp.c **** #endif
1018:../cleanflight/src/main/interface/msp.c **** 
1019:../cleanflight/src/main/interface/msp.c **** #if defined(USE_ESC_SENSOR)
1020:../cleanflight/src/main/interface/msp.c ****     case MSP_ESC_SENSOR_DATA:
1021:../cleanflight/src/main/interface/msp.c ****         if (feature(FEATURE_ESC_SENSOR)) {
1022:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, getMotorCount());
1023:../cleanflight/src/main/interface/msp.c ****             for (int i = 0; i < getMotorCount(); i++) {
1024:../cleanflight/src/main/interface/msp.c ****                 const escSensorData_t *escData = getEscSensorData(i);
1025:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, escData->temperature);
1026:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, escData->rpm);
1027:../cleanflight/src/main/interface/msp.c ****             }
1028:../cleanflight/src/main/interface/msp.c ****         } else {
1029:../cleanflight/src/main/interface/msp.c ****             unsupportedCommand = true;
1030:../cleanflight/src/main/interface/msp.c ****         }
1031:../cleanflight/src/main/interface/msp.c **** 
1032:../cleanflight/src/main/interface/msp.c ****         break;
1033:../cleanflight/src/main/interface/msp.c **** #endif
1034:../cleanflight/src/main/interface/msp.c **** 
1035:../cleanflight/src/main/interface/msp.c **** #ifdef USE_GPS
1036:../cleanflight/src/main/interface/msp.c ****     case MSP_GPS_CONFIG:
1037:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gpsConfig()->provider);
 5078              	 .loc 26 1037 0
 5079 0bae FFF7FEFF 	 bl gpsConfig
 5080 0bb2 0346     	 mov r3,r0
 5081 0bb4 1B78     	 ldrb r3,[r3]
 5082 0bb6 3868     	 ldr r0,[r7]
 5083 0bb8 1946     	 mov r1,r3
 5084 0bba FFF7FEFF 	 bl sbufWriteU8
1038:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gpsConfig()->sbasMode);
 5085              	 .loc 26 1038 0
 5086 0bbe FFF7FEFF 	 bl gpsConfig
 5087 0bc2 0346     	 mov r3,r0
 5088 0bc4 5B78     	 ldrb r3,[r3,#1]
 5089 0bc6 3868     	 ldr r0,[r7]
 5090 0bc8 1946     	 mov r1,r3
 5091 0bca FFF7FEFF 	 bl sbufWriteU8
1039:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gpsConfig()->autoConfig);
 5092              	 .loc 26 1039 0
 5093 0bce FFF7FEFF 	 bl gpsConfig
 5094 0bd2 0346     	 mov r3,r0
 5095 0bd4 9B78     	 ldrb r3,[r3,#2]
 5096 0bd6 3868     	 ldr r0,[r7]
 5097 0bd8 1946     	 mov r1,r3
 5098 0bda FFF7FEFF 	 bl sbufWriteU8
1040:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gpsConfig()->autoBaud);
 5099              	 .loc 26 1040 0
 5100 0bde FFF7FEFF 	 bl gpsConfig
 5101 0be2 0346     	 mov r3,r0
 5102 0be4 DB78     	 ldrb r3,[r3,#3]
 5103 0be6 3868     	 ldr r0,[r7]
 5104 0be8 1946     	 mov r1,r3
 5105 0bea FFF7FEFF 	 bl sbufWriteU8
1041:../cleanflight/src/main/interface/msp.c ****         break;
 5106              	 .loc 26 1041 0
 5107 0bee 00F04BBD 	 b .L407
 5108              	.L339:
1042:../cleanflight/src/main/interface/msp.c **** 
1043:../cleanflight/src/main/interface/msp.c ****     case MSP_RAW_GPS:
1044:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, STATE(GPS_FIX));
 5109              	 .loc 26 1044 0
 5110 0bf2 5B4B     	 ldr r3,.L413+4
 5111 0bf4 1B78     	 ldrb r3,[r3]
 5112 0bf6 03F00203 	 and r3,r3,#2
 5113 0bfa DBB2     	 uxtb r3,r3
 5114 0bfc 3868     	 ldr r0,[r7]
 5115 0bfe 1946     	 mov r1,r3
 5116 0c00 FFF7FEFF 	 bl sbufWriteU8
1045:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gpsSol.numSat);
 5117              	 .loc 26 1045 0
 5118 0c04 574B     	 ldr r3,.L413+8
 5119 0c06 9B7C     	 ldrb r3,[r3,#18]
 5120 0c08 3868     	 ldr r0,[r7]
 5121 0c0a 1946     	 mov r1,r3
 5122 0c0c FFF7FEFF 	 bl sbufWriteU8
1046:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, gpsSol.llh.lat);
 5123              	 .loc 26 1046 0
 5124 0c10 544B     	 ldr r3,.L413+8
 5125 0c12 1B68     	 ldr r3,[r3]
 5126 0c14 3868     	 ldr r0,[r7]
 5127 0c16 1946     	 mov r1,r3
 5128 0c18 FFF7FEFF 	 bl sbufWriteU32
1047:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, gpsSol.llh.lon);
 5129              	 .loc 26 1047 0
 5130 0c1c 514B     	 ldr r3,.L413+8
 5131 0c1e 5B68     	 ldr r3,[r3,#4]
 5132 0c20 3868     	 ldr r0,[r7]
 5133 0c22 1946     	 mov r1,r3
 5134 0c24 FFF7FEFF 	 bl sbufWriteU32
1048:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, (uint16_t)constrain(gpsSol.llh.alt / 100, 0, UINT16_MAX)); // alt changed
 5135              	 .loc 26 1048 0
 5136 0c28 4E4B     	 ldr r3,.L413+8
 5137 0c2a 9B68     	 ldr r3,[r3,#8]
 5138 0c2c 4E4A     	 ldr r2,.L413+12
 5139 0c2e 82FB0312 	 smull r1,r2,r2,r3
 5140 0c32 5211     	 asrs r2,r2,#5
 5141 0c34 DB17     	 asrs r3,r3,#31
 5142 0c36 D31A     	 subs r3,r2,r3
 5143 0c38 1846     	 mov r0,r3
 5144 0c3a 0021     	 movs r1,#0
 5145 0c3c 4FF6FF72 	 movw r2,#65535
 5146 0c40 FFF7FEFF 	 bl constrain
 5147 0c44 0346     	 mov r3,r0
 5148 0c46 9BB2     	 uxth r3,r3
 5149 0c48 3868     	 ldr r0,[r7]
 5150 0c4a 1946     	 mov r1,r3
 5151 0c4c FFF7FEFF 	 bl sbufWriteU16
1049:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gpsSol.groundSpeed);
 5152              	 .loc 26 1049 0
 5153 0c50 444B     	 ldr r3,.L413+8
 5154 0c52 9B89     	 ldrh r3,[r3,#12]
 5155 0c54 9BB2     	 uxth r3,r3
 5156 0c56 3868     	 ldr r0,[r7]
 5157 0c58 1946     	 mov r1,r3
 5158 0c5a FFF7FEFF 	 bl sbufWriteU16
1050:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gpsSol.groundCourse);
 5159              	 .loc 26 1050 0
 5160 0c5e 414B     	 ldr r3,.L413+8
 5161 0c60 DB89     	 ldrh r3,[r3,#14]
 5162 0c62 9BB2     	 uxth r3,r3
 5163 0c64 3868     	 ldr r0,[r7]
 5164 0c66 1946     	 mov r1,r3
 5165 0c68 FFF7FEFF 	 bl sbufWriteU16
1051:../cleanflight/src/main/interface/msp.c ****         break;
 5166              	 .loc 26 1051 0
 5167 0c6c 00F00CBD 	 b .L407
 5168              	.L340:
1052:../cleanflight/src/main/interface/msp.c **** 
1053:../cleanflight/src/main/interface/msp.c ****     case MSP_COMP_GPS:
1054:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, GPS_distanceToHome);
 5169              	 .loc 26 1054 0
 5170 0c70 3E4B     	 ldr r3,.L413+16
 5171 0c72 1B88     	 ldrh r3,[r3]
 5172 0c74 3868     	 ldr r0,[r7]
 5173 0c76 1946     	 mov r1,r3
 5174 0c78 FFF7FEFF 	 bl sbufWriteU16
1055:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, GPS_directionToHome);
 5175              	 .loc 26 1055 0
 5176 0c7c 3C4B     	 ldr r3,.L413+20
 5177 0c7e 1B88     	 ldrh r3,[r3]
 5178 0c80 9BB2     	 uxth r3,r3
 5179 0c82 3868     	 ldr r0,[r7]
 5180 0c84 1946     	 mov r1,r3
 5181 0c86 FFF7FEFF 	 bl sbufWriteU16
1056:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, GPS_update & 1);
 5182              	 .loc 26 1056 0
 5183 0c8a 3A4B     	 ldr r3,.L413+24
 5184 0c8c 1B78     	 ldrb r3,[r3]
 5185 0c8e 03F00103 	 and r3,r3,#1
 5186 0c92 DBB2     	 uxtb r3,r3
 5187 0c94 3868     	 ldr r0,[r7]
 5188 0c96 1946     	 mov r1,r3
 5189 0c98 FFF7FEFF 	 bl sbufWriteU8
1057:../cleanflight/src/main/interface/msp.c ****         break;
 5190              	 .loc 26 1057 0
 5191 0c9c 00F0F4BC 	 b .L407
 5192              	.L353:
1058:../cleanflight/src/main/interface/msp.c **** 
1059:../cleanflight/src/main/interface/msp.c ****     case MSP_GPSSVINFO:
1060:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, GPS_numCh);
 5193              	 .loc 26 1060 0
 5194 0ca0 354B     	 ldr r3,.L413+28
 5195 0ca2 1B78     	 ldrb r3,[r3]
 5196 0ca4 3868     	 ldr r0,[r7]
 5197 0ca6 1946     	 mov r1,r3
 5198 0ca8 FFF7FEFF 	 bl sbufWriteU8
 5199              	.LBB36:
1061:../cleanflight/src/main/interface/msp.c ****        for (int i = 0; i < GPS_numCh; i++) {
 5200              	 .loc 26 1061 0
 5201 0cac 0023     	 movs r3,#0
 5202 0cae 7B65     	 str r3,[r7,#84]
 5203 0cb0 22E0     	 b .L395
 5204              	.L396:
1062:../cleanflight/src/main/interface/msp.c ****            sbufWriteU8(dst, GPS_svinfo_chn[i]);
 5205              	 .loc 26 1062 0 discriminator 3
 5206 0cb2 324A     	 ldr r2,.L413+32
 5207 0cb4 7B6D     	 ldr r3,[r7,#84]
 5208 0cb6 1344     	 add r3,r3,r2
 5209 0cb8 1B78     	 ldrb r3,[r3]
 5210 0cba 3868     	 ldr r0,[r7]
 5211 0cbc 1946     	 mov r1,r3
 5212 0cbe FFF7FEFF 	 bl sbufWriteU8
1063:../cleanflight/src/main/interface/msp.c ****            sbufWriteU8(dst, GPS_svinfo_svid[i]);
 5213              	 .loc 26 1063 0 discriminator 3
 5214 0cc2 2F4A     	 ldr r2,.L413+36
 5215 0cc4 7B6D     	 ldr r3,[r7,#84]
 5216 0cc6 1344     	 add r3,r3,r2
 5217 0cc8 1B78     	 ldrb r3,[r3]
 5218 0cca 3868     	 ldr r0,[r7]
 5219 0ccc 1946     	 mov r1,r3
 5220 0cce FFF7FEFF 	 bl sbufWriteU8
1064:../cleanflight/src/main/interface/msp.c ****            sbufWriteU8(dst, GPS_svinfo_quality[i]);
 5221              	 .loc 26 1064 0 discriminator 3
 5222 0cd2 2C4A     	 ldr r2,.L413+40
 5223 0cd4 7B6D     	 ldr r3,[r7,#84]
 5224 0cd6 1344     	 add r3,r3,r2
 5225 0cd8 1B78     	 ldrb r3,[r3]
 5226 0cda 3868     	 ldr r0,[r7]
 5227 0cdc 1946     	 mov r1,r3
 5228 0cde FFF7FEFF 	 bl sbufWriteU8
1065:../cleanflight/src/main/interface/msp.c ****            sbufWriteU8(dst, GPS_svinfo_cno[i]);
 5229              	 .loc 26 1065 0 discriminator 3
 5230 0ce2 294A     	 ldr r2,.L413+44
 5231 0ce4 7B6D     	 ldr r3,[r7,#84]
 5232 0ce6 1344     	 add r3,r3,r2
 5233 0ce8 1B78     	 ldrb r3,[r3]
 5234 0cea 3868     	 ldr r0,[r7]
 5235 0cec 1946     	 mov r1,r3
 5236 0cee FFF7FEFF 	 bl sbufWriteU8
1061:../cleanflight/src/main/interface/msp.c ****            sbufWriteU8(dst, GPS_svinfo_chn[i]);
 5237              	 .loc 26 1061 0 discriminator 3
 5238 0cf2 7B6D     	 ldr r3,[r7,#84]
 5239 0cf4 0133     	 adds r3,r3,#1
 5240 0cf6 7B65     	 str r3,[r7,#84]
 5241              	.L395:
1061:../cleanflight/src/main/interface/msp.c ****            sbufWriteU8(dst, GPS_svinfo_chn[i]);
 5242              	 .loc 26 1061 0 is_stmt 0 discriminator 1
 5243 0cf8 1F4B     	 ldr r3,.L413+28
 5244 0cfa 1B78     	 ldrb r3,[r3]
 5245 0cfc 1A46     	 mov r2,r3
 5246 0cfe 7B6D     	 ldr r3,[r7,#84]
 5247 0d00 9A42     	 cmp r2,r3
 5248 0d02 D6DC     	 bgt .L396
 5249              	.LBE36:
1066:../cleanflight/src/main/interface/msp.c ****        }
1067:../cleanflight/src/main/interface/msp.c ****         break;
 5250              	 .loc 26 1067 0 is_stmt 1
 5251 0d04 00F0C0BC 	 b .L407
 5252              	.L355:
1068:../cleanflight/src/main/interface/msp.c **** #endif
1069:../cleanflight/src/main/interface/msp.c **** 
1070:../cleanflight/src/main/interface/msp.c ****     case MSP_ACC_TRIM:
1071:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, accelerometerConfig()->accelerometerTrims.values.pitch);
 5253              	 .loc 26 1071 0
 5254 0d08 FFF7FEFF 	 bl accelerometerConfig
 5255 0d0c 0346     	 mov r3,r0
 5256 0d0e B3F90D30 	 ldrsh r3,[r3,#13]
 5257 0d12 9BB2     	 uxth r3,r3
 5258 0d14 9BB2     	 uxth r3,r3
 5259 0d16 3868     	 ldr r0,[r7]
 5260 0d18 1946     	 mov r1,r3
 5261 0d1a FFF7FEFF 	 bl sbufWriteU16
1072:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, accelerometerConfig()->accelerometerTrims.values.roll);
 5262              	 .loc 26 1072 0
 5263 0d1e FFF7FEFF 	 bl accelerometerConfig
 5264 0d22 0346     	 mov r3,r0
 5265 0d24 B3F90B30 	 ldrsh r3,[r3,#11]
 5266 0d28 9BB2     	 uxth r3,r3
 5267 0d2a 9BB2     	 uxth r3,r3
 5268 0d2c 3868     	 ldr r0,[r7]
 5269 0d2e 1946     	 mov r1,r3
 5270 0d30 FFF7FEFF 	 bl sbufWriteU16
1073:../cleanflight/src/main/interface/msp.c ****         break;
 5271              	 .loc 26 1073 0
 5272 0d34 00F0A8BC 	 b .L407
 5273              	.L315:
1074:../cleanflight/src/main/interface/msp.c **** 
1075:../cleanflight/src/main/interface/msp.c ****     case MSP_MIXER_CONFIG:
1076:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, mixerConfig()->mixerMode);
 5274              	 .loc 26 1076 0
 5275 0d38 FFF7FEFF 	 bl mixerConfig
 5276 0d3c 0346     	 mov r3,r0
 5277 0d3e 1B78     	 ldrb r3,[r3]
 5278 0d40 3868     	 ldr r0,[r7]
 5279 0d42 1946     	 mov r1,r3
 5280 0d44 FFF7FEFF 	 bl sbufWriteU8
1077:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, mixerConfig()->yaw_motors_reversed);
 5281              	 .loc 26 1077 0
 5282 0d48 FFF7FEFF 	 bl mixerConfig
 5283 0d4c 0346     	 mov r3,r0
 5284 0d4e 5B78     	 ldrb r3,[r3,#1]
 5285 0d50 3868     	 ldr r0,[r7]
 5286 0d52 1946     	 mov r1,r3
 5287 0d54 FFF7FEFF 	 bl sbufWriteU8
1078:../cleanflight/src/main/interface/msp.c ****         break;
 5288              	 .loc 26 1078 0
 5289 0d58 00F096BC 	 b .L407
 5290              	.L414:
 5291              	 .align 2
 5292              	.L413:
 5293 0d5c 67666666 	 .word 1717986919
 5294 0d60 00000000 	 .word stateFlags
 5295 0d64 00000000 	 .word gpsSol
 5296 0d68 1F85EB51 	 .word 1374389535
 5297 0d6c 00000000 	 .word GPS_distanceToHome
 5298 0d70 00000000 	 .word GPS_directionToHome
 5299 0d74 00000000 	 .word GPS_update
 5300 0d78 00000000 	 .word GPS_numCh
 5301 0d7c 00000000 	 .word GPS_svinfo_chn
 5302 0d80 00000000 	 .word GPS_svinfo_svid
 5303 0d84 00000000 	 .word GPS_svinfo_quality
 5304 0d88 00000000 	 .word GPS_svinfo_cno
 5305              	.L316:
1079:../cleanflight/src/main/interface/msp.c **** 
1080:../cleanflight/src/main/interface/msp.c ****     case MSP_RX_CONFIG:
1081:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->serialrx_provider);
 5306              	 .loc 26 1081 0
 5307 0d8c FFF7FEFF 	 bl rxConfig
 5308 0d90 0346     	 mov r3,r0
 5309 0d92 1B7A     	 ldrb r3,[r3,#8]
 5310 0d94 3868     	 ldr r0,[r7]
 5311 0d96 1946     	 mov r1,r3
 5312 0d98 FFF7FEFF 	 bl sbufWriteU8
1082:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, rxConfig()->maxcheck);
 5313              	 .loc 26 1082 0
 5314 0d9c FFF7FEFF 	 bl rxConfig
 5315 0da0 0346     	 mov r3,r0
 5316 0da2 DB8A     	 ldrh r3,[r3,#22]
 5317 0da4 9BB2     	 uxth r3,r3
 5318 0da6 3868     	 ldr r0,[r7]
 5319 0da8 1946     	 mov r1,r3
 5320 0daa FFF7FEFF 	 bl sbufWriteU16
1083:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, rxConfig()->midrc);
 5321              	 .loc 26 1083 0
 5322 0dae FFF7FEFF 	 bl rxConfig
 5323 0db2 0346     	 mov r3,r0
 5324 0db4 5B8A     	 ldrh r3,[r3,#18]
 5325 0db6 9BB2     	 uxth r3,r3
 5326 0db8 3868     	 ldr r0,[r7]
 5327 0dba 1946     	 mov r1,r3
 5328 0dbc FFF7FEFF 	 bl sbufWriteU16
1084:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, rxConfig()->mincheck);
 5329              	 .loc 26 1084 0
 5330 0dc0 FFF7FEFF 	 bl rxConfig
 5331 0dc4 0346     	 mov r3,r0
 5332 0dc6 9B8A     	 ldrh r3,[r3,#20]
 5333 0dc8 9BB2     	 uxth r3,r3
 5334 0dca 3868     	 ldr r0,[r7]
 5335 0dcc 1946     	 mov r1,r3
 5336 0dce FFF7FEFF 	 bl sbufWriteU16
1085:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->spektrum_sat_bind);
 5337              	 .loc 26 1085 0
 5338 0dd2 FFF7FEFF 	 bl rxConfig
 5339 0dd6 0346     	 mov r3,r0
 5340 0dd8 5B7B     	 ldrb r3,[r3,#13]
 5341 0dda 3868     	 ldr r0,[r7]
 5342 0ddc 1946     	 mov r1,r3
 5343 0dde FFF7FEFF 	 bl sbufWriteU8
1086:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, rxConfig()->rx_min_usec);
 5344              	 .loc 26 1086 0
 5345 0de2 FFF7FEFF 	 bl rxConfig
 5346 0de6 0346     	 mov r3,r0
 5347 0de8 B3F81D30 	 ldrh r3,[r3,#29]
 5348 0dec 9BB2     	 uxth r3,r3
 5349 0dee 3868     	 ldr r0,[r7]
 5350 0df0 1946     	 mov r1,r3
 5351 0df2 FFF7FEFF 	 bl sbufWriteU16
1087:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, rxConfig()->rx_max_usec);
 5352              	 .loc 26 1087 0
 5353 0df6 FFF7FEFF 	 bl rxConfig
 5354 0dfa 0346     	 mov r3,r0
 5355 0dfc B3F81F30 	 ldrh r3,[r3,#31]
 5356 0e00 9BB2     	 uxth r3,r3
 5357 0e02 3868     	 ldr r0,[r7]
 5358 0e04 1946     	 mov r1,r3
 5359 0e06 FFF7FEFF 	 bl sbufWriteU16
1088:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->rcInterpolation);
 5360              	 .loc 26 1088 0
 5361 0e0a FFF7FEFF 	 bl rxConfig
 5362 0e0e 0346     	 mov r3,r0
 5363 0e10 1B7E     	 ldrb r3,[r3,#24]
 5364 0e12 3868     	 ldr r0,[r7]
 5365 0e14 1946     	 mov r1,r3
 5366 0e16 FFF7FEFF 	 bl sbufWriteU8
1089:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->rcInterpolationInterval);
 5367              	 .loc 26 1089 0
 5368 0e1a FFF7FEFF 	 bl rxConfig
 5369 0e1e 0346     	 mov r3,r0
 5370 0e20 9B7E     	 ldrb r3,[r3,#26]
 5371 0e22 3868     	 ldr r0,[r7]
 5372 0e24 1946     	 mov r1,r3
 5373 0e26 FFF7FEFF 	 bl sbufWriteU8
1090:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, rxConfig()->airModeActivateThreshold * 10 + 1000);
 5374              	 .loc 26 1090 0
 5375 0e2a FFF7FEFF 	 bl rxConfig
 5376 0e2e 0346     	 mov r3,r0
 5377 0e30 1B7F     	 ldrb r3,[r3,#28]
 5378 0e32 9BB2     	 uxth r3,r3
 5379 0e34 1A46     	 mov r2,r3
 5380 0e36 9200     	 lsls r2,r2,#2
 5381 0e38 1344     	 add r3,r3,r2
 5382 0e3a 5B00     	 lsls r3,r3,#1
 5383 0e3c 9BB2     	 uxth r3,r3
 5384 0e3e 03F57A73 	 add r3,r3,#1000
 5385 0e42 9BB2     	 uxth r3,r3
 5386 0e44 3868     	 ldr r0,[r7]
 5387 0e46 1946     	 mov r1,r3
 5388 0e48 FFF7FEFF 	 bl sbufWriteU16
1091:../cleanflight/src/main/interface/msp.c **** #ifdef USE_RX_SPI
1092:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxSpiConfig()->rx_spi_protocol);
1093:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, rxSpiConfig()->rx_spi_id);
1094:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxSpiConfig()->rx_spi_rf_channel_count);
1095:../cleanflight/src/main/interface/msp.c **** #else
1096:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
 5389              	 .loc 26 1096 0
 5390 0e4c 3868     	 ldr r0,[r7]
 5391 0e4e 0021     	 movs r1,#0
 5392 0e50 FFF7FEFF 	 bl sbufWriteU8
1097:../cleanflight/src/main/interface/msp.c ****         sbufWriteU32(dst, 0);
 5393              	 .loc 26 1097 0
 5394 0e54 3868     	 ldr r0,[r7]
 5395 0e56 0021     	 movs r1,#0
 5396 0e58 FFF7FEFF 	 bl sbufWriteU32
1098:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
 5397              	 .loc 26 1098 0
 5398 0e5c 3868     	 ldr r0,[r7]
 5399 0e5e 0021     	 movs r1,#0
 5400 0e60 FFF7FEFF 	 bl sbufWriteU8
1099:../cleanflight/src/main/interface/msp.c **** #endif
1100:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->fpvCamAngleDegrees);
 5401              	 .loc 26 1100 0
 5402 0e64 FFF7FEFF 	 bl rxConfig
 5403 0e68 0346     	 mov r3,r0
 5404 0e6a DB7E     	 ldrb r3,[r3,#27]
 5405 0e6c 3868     	 ldr r0,[r7]
 5406 0e6e 1946     	 mov r1,r3
 5407 0e70 FFF7FEFF 	 bl sbufWriteU8
1101:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->rcInterpolationChannels);
 5408              	 .loc 26 1101 0
 5409 0e74 FFF7FEFF 	 bl rxConfig
 5410 0e78 0346     	 mov r3,r0
 5411 0e7a 5B7E     	 ldrb r3,[r3,#25]
 5412 0e7c 3868     	 ldr r0,[r7]
 5413 0e7e 1946     	 mov r1,r3
 5414 0e80 FFF7FEFF 	 bl sbufWriteU8
1102:../cleanflight/src/main/interface/msp.c **** #if defined(USE_RC_SMOOTHING_FILTER)
1103:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->rc_smoothing_type);
 5415              	 .loc 26 1103 0
 5416 0e84 FFF7FEFF 	 bl rxConfig
 5417 0e88 0346     	 mov r3,r0
 5418 0e8a 93F82430 	 ldrb r3,[r3,#36]
 5419 0e8e 3868     	 ldr r0,[r7]
 5420 0e90 1946     	 mov r1,r3
 5421 0e92 FFF7FEFF 	 bl sbufWriteU8
1104:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->rc_smoothing_input_cutoff);
 5422              	 .loc 26 1104 0
 5423 0e96 FFF7FEFF 	 bl rxConfig
 5424 0e9a 0346     	 mov r3,r0
 5425 0e9c 93F82530 	 ldrb r3,[r3,#37]
 5426 0ea0 3868     	 ldr r0,[r7]
 5427 0ea2 1946     	 mov r1,r3
 5428 0ea4 FFF7FEFF 	 bl sbufWriteU8
1105:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->rc_smoothing_derivative_cutoff);
 5429              	 .loc 26 1105 0
 5430 0ea8 FFF7FEFF 	 bl rxConfig
 5431 0eac 0346     	 mov r3,r0
 5432 0eae 93F82630 	 ldrb r3,[r3,#38]
 5433 0eb2 3868     	 ldr r0,[r7]
 5434 0eb4 1946     	 mov r1,r3
 5435 0eb6 FFF7FEFF 	 bl sbufWriteU8
1106:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->rc_smoothing_input_type);
 5436              	 .loc 26 1106 0
 5437 0eba FFF7FEFF 	 bl rxConfig
 5438 0ebe 0346     	 mov r3,r0
 5439 0ec0 93F82830 	 ldrb r3,[r3,#40]
 5440 0ec4 3868     	 ldr r0,[r7]
 5441 0ec6 1946     	 mov r1,r3
 5442 0ec8 FFF7FEFF 	 bl sbufWriteU8
1107:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->rc_smoothing_derivative_type);
 5443              	 .loc 26 1107 0
 5444 0ecc FFF7FEFF 	 bl rxConfig
 5445 0ed0 0346     	 mov r3,r0
 5446 0ed2 93F82930 	 ldrb r3,[r3,#41]
 5447 0ed6 3868     	 ldr r0,[r7]
 5448 0ed8 1946     	 mov r1,r3
 5449 0eda FFF7FEFF 	 bl sbufWriteU8
1108:../cleanflight/src/main/interface/msp.c **** #else
1109:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1110:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1111:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1112:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1113:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1114:../cleanflight/src/main/interface/msp.c **** #endif
1115:../cleanflight/src/main/interface/msp.c **** #if defined(USE_USB_CDC_HID)
1116:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, usbDevConfig()->type);
1117:../cleanflight/src/main/interface/msp.c **** #else
1118:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
 5450              	 .loc 26 1118 0
 5451 0ede 3868     	 ldr r0,[r7]
 5452 0ee0 0021     	 movs r1,#0
 5453 0ee2 FFF7FEFF 	 bl sbufWriteU8
1119:../cleanflight/src/main/interface/msp.c **** #endif
1120:../cleanflight/src/main/interface/msp.c **** 
1121:../cleanflight/src/main/interface/msp.c ****         break;
 5454              	 .loc 26 1121 0
 5455 0ee6 CFE3     	 b .L407
 5456              	.L325:
1122:../cleanflight/src/main/interface/msp.c ****     case MSP_FAILSAFE_CONFIG:
1123:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, failsafeConfig()->failsafe_delay);
 5457              	 .loc 26 1123 0
 5458 0ee8 FFF7FEFF 	 bl failsafeConfig
 5459 0eec 0346     	 mov r3,r0
 5460 0eee 1B79     	 ldrb r3,[r3,#4]
 5461 0ef0 3868     	 ldr r0,[r7]
 5462 0ef2 1946     	 mov r1,r3
 5463 0ef4 FFF7FEFF 	 bl sbufWriteU8
1124:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, failsafeConfig()->failsafe_off_delay);
 5464              	 .loc 26 1124 0
 5465 0ef8 FFF7FEFF 	 bl failsafeConfig
 5466 0efc 0346     	 mov r3,r0
 5467 0efe 5B79     	 ldrb r3,[r3,#5]
 5468 0f00 3868     	 ldr r0,[r7]
 5469 0f02 1946     	 mov r1,r3
 5470 0f04 FFF7FEFF 	 bl sbufWriteU8
1125:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, failsafeConfig()->failsafe_throttle);
 5471              	 .loc 26 1125 0
 5472 0f08 FFF7FEFF 	 bl failsafeConfig
 5473 0f0c 0346     	 mov r3,r0
 5474 0f0e 1B88     	 ldrh r3,[r3]
 5475 0f10 9BB2     	 uxth r3,r3
 5476 0f12 3868     	 ldr r0,[r7]
 5477 0f14 1946     	 mov r1,r3
 5478 0f16 FFF7FEFF 	 bl sbufWriteU16
1126:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, failsafeConfig()->failsafe_switch_mode);
 5479              	 .loc 26 1126 0
 5480 0f1a FFF7FEFF 	 bl failsafeConfig
 5481 0f1e 0346     	 mov r3,r0
 5482 0f20 9B79     	 ldrb r3,[r3,#6]
 5483 0f22 3868     	 ldr r0,[r7]
 5484 0f24 1946     	 mov r1,r3
 5485 0f26 FFF7FEFF 	 bl sbufWriteU8
1127:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, failsafeConfig()->failsafe_throttle_low_delay);
 5486              	 .loc 26 1127 0
 5487 0f2a FFF7FEFF 	 bl failsafeConfig
 5488 0f2e 0346     	 mov r3,r0
 5489 0f30 5B88     	 ldrh r3,[r3,#2]
 5490 0f32 9BB2     	 uxth r3,r3
 5491 0f34 3868     	 ldr r0,[r7]
 5492 0f36 1946     	 mov r1,r3
 5493 0f38 FFF7FEFF 	 bl sbufWriteU16
1128:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, failsafeConfig()->failsafe_procedure);
 5494              	 .loc 26 1128 0
 5495 0f3c FFF7FEFF 	 bl failsafeConfig
 5496 0f40 0346     	 mov r3,r0
 5497 0f42 DB79     	 ldrb r3,[r3,#7]
 5498 0f44 3868     	 ldr r0,[r7]
 5499 0f46 1946     	 mov r1,r3
 5500 0f48 FFF7FEFF 	 bl sbufWriteU8
1129:../cleanflight/src/main/interface/msp.c ****         break;
 5501              	 .loc 26 1129 0
 5502 0f4c 9CE3     	 b .L407
 5503              	.L326:
 5504              	.LBB37:
1130:../cleanflight/src/main/interface/msp.c **** 
1131:../cleanflight/src/main/interface/msp.c ****     case MSP_RXFAIL_CONFIG:
1132:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < rxRuntimeConfig.channelCount; i++) {
 5505              	 .loc 26 1132 0
 5506 0f4e 0023     	 movs r3,#0
 5507 0f50 3B65     	 str r3,[r7,#80]
 5508 0f52 21E0     	 b .L397
 5509              	.L398:
1133:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, rxFailsafeChannelConfigs(i)->mode);
 5510              	 .loc 26 1133 0 discriminator 3
 5511 0f54 386D     	 ldr r0,[r7,#80]
 5512 0f56 FFF7FEFF 	 bl rxFailsafeChannelConfigs
 5513 0f5a 0346     	 mov r3,r0
 5514 0f5c 1B78     	 ldrb r3,[r3]
 5515 0f5e 3868     	 ldr r0,[r7]
 5516 0f60 1946     	 mov r1,r3
 5517 0f62 FFF7FEFF 	 bl sbufWriteU8
1134:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, RXFAIL_STEP_TO_CHANNEL_VALUE(rxFailsafeChannelConfigs(i)->step));
 5518              	 .loc 26 1134 0 discriminator 3
 5519 0f66 386D     	 ldr r0,[r7,#80]
 5520 0f68 FFF7FEFF 	 bl rxFailsafeChannelConfigs
 5521 0f6c 0346     	 mov r3,r0
 5522 0f6e 5B78     	 ldrb r3,[r3,#1]
 5523 0f70 9BB2     	 uxth r3,r3
 5524 0f72 1A46     	 mov r2,r3
 5525 0f74 9200     	 lsls r2,r2,#2
 5526 0f76 1344     	 add r3,r3,r2
 5527 0f78 1A46     	 mov r2,r3
 5528 0f7a 9100     	 lsls r1,r2,#2
 5529 0f7c 1A46     	 mov r2,r3
 5530 0f7e 0B46     	 mov r3,r1
 5531 0f80 1344     	 add r3,r3,r2
 5532 0f82 9BB2     	 uxth r3,r3
 5533 0f84 03F2EE23 	 addw r3,r3,#750
 5534 0f88 9BB2     	 uxth r3,r3
 5535 0f8a 3868     	 ldr r0,[r7]
 5536 0f8c 1946     	 mov r1,r3
 5537 0f8e FFF7FEFF 	 bl sbufWriteU16
1132:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, rxFailsafeChannelConfigs(i)->mode);
 5538              	 .loc 26 1132 0 discriminator 3
 5539 0f92 3B6D     	 ldr r3,[r7,#80]
 5540 0f94 0133     	 adds r3,r3,#1
 5541 0f96 3B65     	 str r3,[r7,#80]
 5542              	.L397:
1132:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, rxFailsafeChannelConfigs(i)->mode);
 5543              	 .loc 26 1132 0 is_stmt 0 discriminator 1
 5544 0f98 BE4B     	 ldr r3,.L415
 5545 0f9a 1B78     	 ldrb r3,[r3]
 5546 0f9c 1A46     	 mov r2,r3
 5547 0f9e 3B6D     	 ldr r3,[r7,#80]
 5548 0fa0 9A42     	 cmp r2,r3
 5549 0fa2 D7DC     	 bgt .L398
 5550              	.LBE37:
1135:../cleanflight/src/main/interface/msp.c ****         }
1136:../cleanflight/src/main/interface/msp.c ****         break;
 5551              	 .loc 26 1136 0 is_stmt 1
 5552 0fa4 70E3     	 b .L407
 5553              	.L317:
1137:../cleanflight/src/main/interface/msp.c **** 
1138:../cleanflight/src/main/interface/msp.c ****     case MSP_RSSI_CONFIG:
1139:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rxConfig()->rssi_channel);
 5554              	 .loc 26 1139 0
 5555 0fa6 FFF7FEFF 	 bl rxConfig
 5556 0faa 0346     	 mov r3,r0
 5557 0fac DB7B     	 ldrb r3,[r3,#15]
 5558 0fae 3868     	 ldr r0,[r7]
 5559 0fb0 1946     	 mov r1,r3
 5560 0fb2 FFF7FEFF 	 bl sbufWriteU8
1140:../cleanflight/src/main/interface/msp.c ****         break;
 5561              	 .loc 26 1140 0
 5562 0fb6 67E3     	 b .L407
 5563              	.L323:
1141:../cleanflight/src/main/interface/msp.c **** 
1142:../cleanflight/src/main/interface/msp.c ****     case MSP_RX_MAP:
1143:../cleanflight/src/main/interface/msp.c ****         sbufWriteData(dst, rxConfig()->rcmap, RX_MAPPABLE_CHANNEL_COUNT);
 5564              	 .loc 26 1143 0
 5565 0fb8 FFF7FEFF 	 bl rxConfig
 5566 0fbc 0346     	 mov r3,r0
 5567 0fbe 3868     	 ldr r0,[r7]
 5568 0fc0 1946     	 mov r1,r3
 5569 0fc2 0822     	 movs r2,#8
 5570 0fc4 FFF7FEFF 	 bl sbufWriteData
1144:../cleanflight/src/main/interface/msp.c ****         break;
 5571              	 .loc 26 1144 0
 5572 0fc8 5EE3     	 b .L407
 5573              	.L319:
 5574              	.LBB38:
1145:../cleanflight/src/main/interface/msp.c **** 
1146:../cleanflight/src/main/interface/msp.c ****     case MSP_CF_SERIAL_CONFIG:
1147:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < SERIAL_PORT_COUNT; i++) {
 5575              	 .loc 26 1147 0
 5576 0fca 0023     	 movs r3,#0
 5577 0fcc FB64     	 str r3,[r7,#76]
 5578 0fce 66E0     	 b .L399
 5579              	.L402:
1148:../cleanflight/src/main/interface/msp.c ****             if (!serialIsPortAvailable(serialConfig()->portConfigs[i].identifier)) {
 5580              	 .loc 26 1148 0
 5581 0fd0 FFF7FEFF 	 bl serialConfig
 5582 0fd4 0146     	 mov r1,r0
 5583 0fd6 FA6C     	 ldr r2,[r7,#76]
 5584 0fd8 1346     	 mov r3,r2
 5585 0fda DB00     	 lsls r3,r3,#3
 5586 0fdc 9B1A     	 subs r3,r3,r2
 5587 0fde 0B44     	 add r3,r3,r1
 5588 0fe0 9B78     	 ldrb r3,[r3,#2]
 5589 0fe2 5BB2     	 sxtb r3,r3
 5590 0fe4 1846     	 mov r0,r3
 5591 0fe6 FFF7FEFF 	 bl serialIsPortAvailable
 5592 0fea 0346     	 mov r3,r0
 5593 0fec 83F00103 	 eor r3,r3,#1
 5594 0ff0 DBB2     	 uxtb r3,r3
 5595 0ff2 002B     	 cmp r3,#0
 5596 0ff4 00D0     	 beq .L400
1149:../cleanflight/src/main/interface/msp.c ****                 continue;
 5597              	 .loc 26 1149 0
 5598 0ff6 4FE0     	 b .L401
 5599              	.L400:
1150:../cleanflight/src/main/interface/msp.c ****             };
1151:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, serialConfig()->portConfigs[i].identifier);
 5600              	 .loc 26 1151 0
 5601 0ff8 FFF7FEFF 	 bl serialConfig
 5602 0ffc 0146     	 mov r1,r0
 5603 0ffe FA6C     	 ldr r2,[r7,#76]
 5604 1000 1346     	 mov r3,r2
 5605 1002 DB00     	 lsls r3,r3,#3
 5606 1004 9B1A     	 subs r3,r3,r2
 5607 1006 0B44     	 add r3,r3,r1
 5608 1008 9B78     	 ldrb r3,[r3,#2]
 5609 100a DBB2     	 uxtb r3,r3
 5610 100c 3868     	 ldr r0,[r7]
 5611 100e 1946     	 mov r1,r3
 5612 1010 FFF7FEFF 	 bl sbufWriteU8
1152:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, serialConfig()->portConfigs[i].functionMask);
 5613              	 .loc 26 1152 0
 5614 1014 FFF7FEFF 	 bl serialConfig
 5615 1018 0146     	 mov r1,r0
 5616 101a FA6C     	 ldr r2,[r7,#76]
 5617 101c 1346     	 mov r3,r2
 5618 101e DB00     	 lsls r3,r3,#3
 5619 1020 9B1A     	 subs r3,r3,r2
 5620 1022 0B44     	 add r3,r3,r1
 5621 1024 1B88     	 ldrh r3,[r3]
 5622 1026 9BB2     	 uxth r3,r3
 5623 1028 3868     	 ldr r0,[r7]
 5624 102a 1946     	 mov r1,r3
 5625 102c FFF7FEFF 	 bl sbufWriteU16
1153:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, serialConfig()->portConfigs[i].msp_baudrateIndex);
 5626              	 .loc 26 1153 0
 5627 1030 FFF7FEFF 	 bl serialConfig
 5628 1034 0146     	 mov r1,r0
 5629 1036 FA6C     	 ldr r2,[r7,#76]
 5630 1038 1346     	 mov r3,r2
 5631 103a DB00     	 lsls r3,r3,#3
 5632 103c 9B1A     	 subs r3,r3,r2
 5633 103e 0B44     	 add r3,r3,r1
 5634 1040 DB78     	 ldrb r3,[r3,#3]
 5635 1042 3868     	 ldr r0,[r7]
 5636 1044 1946     	 mov r1,r3
 5637 1046 FFF7FEFF 	 bl sbufWriteU8
1154:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, serialConfig()->portConfigs[i].gps_baudrateIndex);
 5638              	 .loc 26 1154 0
 5639 104a FFF7FEFF 	 bl serialConfig
 5640 104e 0146     	 mov r1,r0
 5641 1050 FA6C     	 ldr r2,[r7,#76]
 5642 1052 1346     	 mov r3,r2
 5643 1054 DB00     	 lsls r3,r3,#3
 5644 1056 9B1A     	 subs r3,r3,r2
 5645 1058 0B44     	 add r3,r3,r1
 5646 105a 1B79     	 ldrb r3,[r3,#4]
 5647 105c 3868     	 ldr r0,[r7]
 5648 105e 1946     	 mov r1,r3
 5649 1060 FFF7FEFF 	 bl sbufWriteU8
1155:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, serialConfig()->portConfigs[i].telemetry_baudrateIndex);
 5650              	 .loc 26 1155 0
 5651 1064 FFF7FEFF 	 bl serialConfig
 5652 1068 0146     	 mov r1,r0
 5653 106a FA6C     	 ldr r2,[r7,#76]
 5654 106c 1346     	 mov r3,r2
 5655 106e DB00     	 lsls r3,r3,#3
 5656 1070 9B1A     	 subs r3,r3,r2
 5657 1072 0B44     	 add r3,r3,r1
 5658 1074 9B79     	 ldrb r3,[r3,#6]
 5659 1076 3868     	 ldr r0,[r7]
 5660 1078 1946     	 mov r1,r3
 5661 107a FFF7FEFF 	 bl sbufWriteU8
1156:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, serialConfig()->portConfigs[i].blackbox_baudrateIndex);
 5662              	 .loc 26 1156 0
 5663 107e FFF7FEFF 	 bl serialConfig
 5664 1082 0146     	 mov r1,r0
 5665 1084 FA6C     	 ldr r2,[r7,#76]
 5666 1086 1346     	 mov r3,r2
 5667 1088 DB00     	 lsls r3,r3,#3
 5668 108a 9B1A     	 subs r3,r3,r2
 5669 108c 0B44     	 add r3,r3,r1
 5670 108e 5B79     	 ldrb r3,[r3,#5]
 5671 1090 3868     	 ldr r0,[r7]
 5672 1092 1946     	 mov r1,r3
 5673 1094 FFF7FEFF 	 bl sbufWriteU8
 5674              	.L401:
1147:../cleanflight/src/main/interface/msp.c ****             if (!serialIsPortAvailable(serialConfig()->portConfigs[i].identifier)) {
 5675              	 .loc 26 1147 0 discriminator 2
 5676 1098 FB6C     	 ldr r3,[r7,#76]
 5677 109a 0133     	 adds r3,r3,#1
 5678 109c FB64     	 str r3,[r7,#76]
 5679              	.L399:
1147:../cleanflight/src/main/interface/msp.c ****             if (!serialIsPortAvailable(serialConfig()->portConfigs[i].identifier)) {
 5680              	 .loc 26 1147 0 is_stmt 0 discriminator 1
 5681 109e FB6C     	 ldr r3,[r7,#76]
 5682 10a0 042B     	 cmp r3,#4
 5683 10a2 95DD     	 ble .L402
 5684              	.LBE38:
1157:../cleanflight/src/main/interface/msp.c ****         }
1158:../cleanflight/src/main/interface/msp.c ****         break;
 5685              	 .loc 26 1158 0 is_stmt 1
 5686 10a4 F0E2     	 b .L407
 5687              	.L324:
1159:../cleanflight/src/main/interface/msp.c **** 
1160:../cleanflight/src/main/interface/msp.c **** #ifdef USE_LED_STRIP
1161:../cleanflight/src/main/interface/msp.c ****     case MSP_LED_COLORS:
1162:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < LED_CONFIGURABLE_COLOR_COUNT; i++) {
1163:../cleanflight/src/main/interface/msp.c ****             const hsvColor_t *color = &ledStripConfig()->colors[i];
1164:../cleanflight/src/main/interface/msp.c ****             sbufWriteU16(dst, color->h);
1165:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, color->s);
1166:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, color->v);
1167:../cleanflight/src/main/interface/msp.c ****         }
1168:../cleanflight/src/main/interface/msp.c ****         break;
1169:../cleanflight/src/main/interface/msp.c **** 
1170:../cleanflight/src/main/interface/msp.c ****     case MSP_LED_STRIP_CONFIG:
1171:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < LED_MAX_STRIP_LENGTH; i++) {
1172:../cleanflight/src/main/interface/msp.c ****             const ledConfig_t *ledConfig = &ledStripConfig()->ledConfigs[i];
1173:../cleanflight/src/main/interface/msp.c ****             sbufWriteU32(dst, *ledConfig);
1174:../cleanflight/src/main/interface/msp.c ****         }
1175:../cleanflight/src/main/interface/msp.c ****         break;
1176:../cleanflight/src/main/interface/msp.c **** 
1177:../cleanflight/src/main/interface/msp.c ****     case MSP_LED_STRIP_MODECOLOR:
1178:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < LED_MODE_COUNT; i++) {
1179:../cleanflight/src/main/interface/msp.c ****             for (int j = 0; j < LED_DIRECTION_COUNT; j++) {
1180:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, i);
1181:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, j);
1182:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, ledStripConfig()->modeColors[i].color[j]);
1183:../cleanflight/src/main/interface/msp.c ****             }
1184:../cleanflight/src/main/interface/msp.c ****         }
1185:../cleanflight/src/main/interface/msp.c **** 
1186:../cleanflight/src/main/interface/msp.c ****         for (int j = 0; j < LED_SPECIAL_COLOR_COUNT; j++) {
1187:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, LED_MODE_COUNT);
1188:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, j);
1189:../cleanflight/src/main/interface/msp.c ****             sbufWriteU8(dst, ledStripConfig()->specialColors.color[j]);
1190:../cleanflight/src/main/interface/msp.c ****         }
1191:../cleanflight/src/main/interface/msp.c **** 
1192:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, LED_AUX_CHANNEL);
1193:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1194:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, ledStripConfig()->ledstrip_aux_channel);
1195:../cleanflight/src/main/interface/msp.c ****         break;
1196:../cleanflight/src/main/interface/msp.c **** #endif
1197:../cleanflight/src/main/interface/msp.c **** 
1198:../cleanflight/src/main/interface/msp.c ****     case MSP_DATAFLASH_SUMMARY:
1199:../cleanflight/src/main/interface/msp.c ****         serializeDataflashSummaryReply(dst);
 5688              	 .loc 26 1199 0
 5689 10a6 3868     	 ldr r0,[r7]
 5690 10a8 FFF7FEFF 	 bl serializeDataflashSummaryReply
1200:../cleanflight/src/main/interface/msp.c ****         break;
 5691              	 .loc 26 1200 0
 5692 10ac ECE2     	 b .L407
 5693              	.L328:
1201:../cleanflight/src/main/interface/msp.c **** 
1202:../cleanflight/src/main/interface/msp.c ****     case MSP_BLACKBOX_CONFIG:
1203:../cleanflight/src/main/interface/msp.c **** #ifdef USE_BLACKBOX
1204:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 1); //Blackbox supported
 5694              	 .loc 26 1204 0
 5695 10ae 3868     	 ldr r0,[r7]
 5696 10b0 0121     	 movs r1,#1
 5697 10b2 FFF7FEFF 	 bl sbufWriteU8
1205:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, blackboxConfig()->device);
 5698              	 .loc 26 1205 0
 5699 10b6 FFF7FEFF 	 bl blackboxConfig
 5700 10ba 0346     	 mov r3,r0
 5701 10bc 9B78     	 ldrb r3,[r3,#2]
 5702 10be 3868     	 ldr r0,[r7]
 5703 10c0 1946     	 mov r1,r3
 5704 10c2 FFF7FEFF 	 bl sbufWriteU8
1206:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 1); // Rate numerator, not used anymore
 5705              	 .loc 26 1206 0
 5706 10c6 3868     	 ldr r0,[r7]
 5707 10c8 0121     	 movs r1,#1
 5708 10ca FFF7FEFF 	 bl sbufWriteU8
1207:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, blackboxGetRateDenom());
 5709              	 .loc 26 1207 0
 5710 10ce FFF7FEFF 	 bl blackboxGetRateDenom
 5711 10d2 0346     	 mov r3,r0
 5712 10d4 3868     	 ldr r0,[r7]
 5713 10d6 1946     	 mov r1,r3
 5714 10d8 FFF7FEFF 	 bl sbufWriteU8
1208:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, blackboxConfig()->p_ratio);
 5715              	 .loc 26 1208 0
 5716 10dc FFF7FEFF 	 bl blackboxConfig
 5717 10e0 0346     	 mov r3,r0
 5718 10e2 1B88     	 ldrh r3,[r3]
 5719 10e4 9BB2     	 uxth r3,r3
 5720 10e6 3868     	 ldr r0,[r7]
 5721 10e8 1946     	 mov r1,r3
 5722 10ea FFF7FEFF 	 bl sbufWriteU16
1209:../cleanflight/src/main/interface/msp.c **** #else
1210:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0); // Blackbox not supported
1211:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1212:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1213:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1214:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, 0);
1215:../cleanflight/src/main/interface/msp.c **** #endif
1216:../cleanflight/src/main/interface/msp.c ****         break;
 5723              	 .loc 26 1216 0
 5724 10ee CBE2     	 b .L407
 5725              	.L327:
1217:../cleanflight/src/main/interface/msp.c **** 
1218:../cleanflight/src/main/interface/msp.c ****     case MSP_SDCARD_SUMMARY:
1219:../cleanflight/src/main/interface/msp.c ****         serializeSDCardSummaryReply(dst);
 5726              	 .loc 26 1219 0
 5727 10f0 3868     	 ldr r0,[r7]
 5728 10f2 FFF7FEFF 	 bl serializeSDCardSummaryReply
1220:../cleanflight/src/main/interface/msp.c ****         break;
 5729              	 .loc 26 1220 0
 5730 10f6 C7E2     	 b .L407
 5731              	.L347:
1221:../cleanflight/src/main/interface/msp.c **** 
1222:../cleanflight/src/main/interface/msp.c ****     case MSP_MOTOR_3D_CONFIG:
1223:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, flight3DConfig()->deadband3d_low);
 5732              	 .loc 26 1223 0
 5733 10f8 FFF7FEFF 	 bl flight3DConfig
 5734 10fc 0346     	 mov r3,r0
 5735 10fe 1B88     	 ldrh r3,[r3]
 5736 1100 9BB2     	 uxth r3,r3
 5737 1102 3868     	 ldr r0,[r7]
 5738 1104 1946     	 mov r1,r3
 5739 1106 FFF7FEFF 	 bl sbufWriteU16
1224:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, flight3DConfig()->deadband3d_high);
 5740              	 .loc 26 1224 0
 5741 110a FFF7FEFF 	 bl flight3DConfig
 5742 110e 0346     	 mov r3,r0
 5743 1110 5B88     	 ldrh r3,[r3,#2]
 5744 1112 9BB2     	 uxth r3,r3
 5745 1114 3868     	 ldr r0,[r7]
 5746 1116 1946     	 mov r1,r3
 5747 1118 FFF7FEFF 	 bl sbufWriteU16
1225:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, flight3DConfig()->neutral3d);
 5748              	 .loc 26 1225 0
 5749 111c FFF7FEFF 	 bl flight3DConfig
 5750 1120 0346     	 mov r3,r0
 5751 1122 9B88     	 ldrh r3,[r3,#4]
 5752 1124 9BB2     	 uxth r3,r3
 5753 1126 3868     	 ldr r0,[r7]
 5754 1128 1946     	 mov r1,r3
 5755 112a FFF7FEFF 	 bl sbufWriteU16
1226:../cleanflight/src/main/interface/msp.c ****         break;
 5756              	 .loc 26 1226 0
 5757 112e ABE2     	 b .L407
 5758              	.L348:
1227:../cleanflight/src/main/interface/msp.c **** 
1228:../cleanflight/src/main/interface/msp.c ****     case MSP_RC_DEADBAND:
1229:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rcControlsConfig()->deadband);
 5759              	 .loc 26 1229 0
 5760 1130 FFF7FEFF 	 bl rcControlsConfig
 5761 1134 0346     	 mov r3,r0
 5762 1136 1B78     	 ldrb r3,[r3]
 5763 1138 3868     	 ldr r0,[r7]
 5764 113a 1946     	 mov r1,r3
 5765 113c FFF7FEFF 	 bl sbufWriteU8
1230:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rcControlsConfig()->yaw_deadband);
 5766              	 .loc 26 1230 0
 5767 1140 FFF7FEFF 	 bl rcControlsConfig
 5768 1144 0346     	 mov r3,r0
 5769 1146 5B78     	 ldrb r3,[r3,#1]
 5770 1148 3868     	 ldr r0,[r7]
 5771 114a 1946     	 mov r1,r3
 5772 114c FFF7FEFF 	 bl sbufWriteU8
1231:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rcControlsConfig()->alt_hold_deadband);
 5773              	 .loc 26 1231 0
 5774 1150 FFF7FEFF 	 bl rcControlsConfig
 5775 1154 0346     	 mov r3,r0
 5776 1156 9B78     	 ldrb r3,[r3,#2]
 5777 1158 3868     	 ldr r0,[r7]
 5778 115a 1946     	 mov r1,r3
 5779 115c FFF7FEFF 	 bl sbufWriteU8
1232:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, flight3DConfig()->deadband3d_throttle);
 5780              	 .loc 26 1232 0
 5781 1160 FFF7FEFF 	 bl flight3DConfig
 5782 1164 0346     	 mov r3,r0
 5783 1166 DB88     	 ldrh r3,[r3,#6]
 5784 1168 9BB2     	 uxth r3,r3
 5785 116a 3868     	 ldr r0,[r7]
 5786 116c 1946     	 mov r1,r3
 5787 116e FFF7FEFF 	 bl sbufWriteU16
1233:../cleanflight/src/main/interface/msp.c ****         break;
 5788              	 .loc 26 1233 0
 5789 1172 89E2     	 b .L407
 5790              	.L349:
1234:../cleanflight/src/main/interface/msp.c **** 
1235:../cleanflight/src/main/interface/msp.c ****     case MSP_SENSOR_ALIGNMENT:
1236:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_align);
 5791              	 .loc 26 1236 0
 5792 1174 FFF7FEFF 	 bl gyroConfig
 5793 1178 0346     	 mov r3,r0
 5794 117a 1B78     	 ldrb r3,[r3]
 5795 117c 3868     	 ldr r0,[r7]
 5796 117e 1946     	 mov r1,r3
 5797 1180 FFF7FEFF 	 bl sbufWriteU8
1237:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, accelerometerConfig()->acc_align);
 5798              	 .loc 26 1237 0
 5799 1184 FFF7FEFF 	 bl accelerometerConfig
 5800 1188 0346     	 mov r3,r0
 5801 118a 9B78     	 ldrb r3,[r3,#2]
 5802 118c 3868     	 ldr r0,[r7]
 5803 118e 1946     	 mov r1,r3
 5804 1190 FFF7FEFF 	 bl sbufWriteU8
1238:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, compassConfig()->mag_align);
 5805              	 .loc 26 1238 0
 5806 1194 FFF7FEFF 	 bl compassConfig
 5807 1198 0346     	 mov r3,r0
 5808 119a 9B78     	 ldrb r3,[r3,#2]
 5809 119c 3868     	 ldr r0,[r7]
 5810 119e 1946     	 mov r1,r3
 5811 11a0 FFF7FEFF 	 bl sbufWriteU8
1239:../cleanflight/src/main/interface/msp.c ****         break;
 5812              	 .loc 26 1239 0
 5813 11a4 70E2     	 b .L407
 5814              	.L330:
1240:../cleanflight/src/main/interface/msp.c **** 
1241:../cleanflight/src/main/interface/msp.c ****     case MSP_ADVANCED_CONFIG:
1242:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_sync_denom);
 5815              	 .loc 26 1242 0
 5816 11a6 FFF7FEFF 	 bl gyroConfig
 5817 11aa 0346     	 mov r3,r0
 5818 11ac 9B78     	 ldrb r3,[r3,#2]
 5819 11ae 3868     	 ldr r0,[r7]
 5820 11b0 1946     	 mov r1,r3
 5821 11b2 FFF7FEFF 	 bl sbufWriteU8
1243:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, pidConfig()->pid_process_denom);
 5822              	 .loc 26 1243 0
 5823 11b6 FFF7FEFF 	 bl pidConfig
 5824 11ba 0346     	 mov r3,r0
 5825 11bc 1B78     	 ldrb r3,[r3]
 5826 11be 3868     	 ldr r0,[r7]
 5827 11c0 1946     	 mov r1,r3
 5828 11c2 FFF7FEFF 	 bl sbufWriteU8
1244:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, motorConfig()->dev.useUnsyncedPwm);
 5829              	 .loc 26 1244 0
 5830 11c6 FFF7FEFF 	 bl motorConfig
 5831 11ca 0346     	 mov r3,r0
 5832 11cc 1B79     	 ldrb r3,[r3,#4]
 5833 11ce 3868     	 ldr r0,[r7]
 5834 11d0 1946     	 mov r1,r3
 5835 11d2 FFF7FEFF 	 bl sbufWriteU8
1245:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, motorConfig()->dev.motorPwmProtocol);
 5836              	 .loc 26 1245 0
 5837 11d6 FFF7FEFF 	 bl motorConfig
 5838 11da 0346     	 mov r3,r0
 5839 11dc 9B78     	 ldrb r3,[r3,#2]
 5840 11de 3868     	 ldr r0,[r7]
 5841 11e0 1946     	 mov r1,r3
 5842 11e2 FFF7FEFF 	 bl sbufWriteU8
1246:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, motorConfig()->dev.motorPwmRate);
 5843              	 .loc 26 1246 0
 5844 11e6 FFF7FEFF 	 bl motorConfig
 5845 11ea 0346     	 mov r3,r0
 5846 11ec 1B88     	 ldrh r3,[r3]
 5847 11ee 9BB2     	 uxth r3,r3
 5848 11f0 3868     	 ldr r0,[r7]
 5849 11f2 1946     	 mov r1,r3
 5850 11f4 FFF7FEFF 	 bl sbufWriteU16
1247:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, motorConfig()->digitalIdleOffsetValue);
 5851              	 .loc 26 1247 0
 5852 11f8 FFF7FEFF 	 bl motorConfig
 5853 11fc 0346     	 mov r3,r0
 5854 11fe DB89     	 ldrh r3,[r3,#14]
 5855 1200 9BB2     	 uxth r3,r3
 5856 1202 3868     	 ldr r0,[r7]
 5857 1204 1946     	 mov r1,r3
 5858 1206 FFF7FEFF 	 bl sbufWriteU16
1248:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_use_32khz);
 5859              	 .loc 26 1248 0
 5860 120a FFF7FEFF 	 bl gyroConfig
 5861 120e 0346     	 mov r3,r0
 5862 1210 9B79     	 ldrb r3,[r3,#6]
 5863 1212 3868     	 ldr r0,[r7]
 5864 1214 1946     	 mov r1,r3
 5865 1216 FFF7FEFF 	 bl sbufWriteU8
1249:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, motorConfig()->dev.motorPwmInversion);
 5866              	 .loc 26 1249 0
 5867 121a FFF7FEFF 	 bl motorConfig
 5868 121e 0346     	 mov r3,r0
 5869 1220 DB78     	 ldrb r3,[r3,#3]
 5870 1222 3868     	 ldr r0,[r7]
 5871 1224 1946     	 mov r1,r3
 5872 1226 FFF7FEFF 	 bl sbufWriteU8
1250:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_to_use);
 5873              	 .loc 26 1250 0
 5874 122a FFF7FEFF 	 bl gyroConfig
 5875 122e 0346     	 mov r3,r0
 5876 1230 DB79     	 ldrb r3,[r3,#7]
 5877 1232 3868     	 ldr r0,[r7]
 5878 1234 1946     	 mov r1,r3
 5879 1236 FFF7FEFF 	 bl sbufWriteU8
1251:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_high_fsr);
 5880              	 .loc 26 1251 0
 5881 123a FFF7FEFF 	 bl gyroConfig
 5882 123e 0346     	 mov r3,r0
 5883 1240 5B79     	 ldrb r3,[r3,#5]
 5884 1242 3868     	 ldr r0,[r7]
 5885 1244 1946     	 mov r1,r3
 5886 1246 FFF7FEFF 	 bl sbufWriteU8
1252:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyroMovementCalibrationThreshold);
 5887              	 .loc 26 1252 0
 5888 124a FFF7FEFF 	 bl gyroConfig
 5889 124e 0346     	 mov r3,r0
 5890 1250 5B78     	 ldrb r3,[r3,#1]
 5891 1252 3868     	 ldr r0,[r7]
 5892 1254 1946     	 mov r1,r3
 5893 1256 FFF7FEFF 	 bl sbufWriteU8
1253:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gyroConfig()->gyroCalibrationDuration);
 5894              	 .loc 26 1253 0
 5895 125a FFF7FEFF 	 bl gyroConfig
 5896 125e 0346     	 mov r3,r0
 5897 1260 9B8B     	 ldrh r3,[r3,#28]
 5898 1262 9BB2     	 uxth r3,r3
 5899 1264 3868     	 ldr r0,[r7]
 5900 1266 1946     	 mov r1,r3
 5901 1268 FFF7FEFF 	 bl sbufWriteU16
1254:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gyroConfig()->gyro_offset_yaw);
 5902              	 .loc 26 1254 0
 5903 126c FFF7FEFF 	 bl gyroConfig
 5904 1270 0346     	 mov r3,r0
 5905 1272 B3F91430 	 ldrsh r3,[r3,#20]
 5906 1276 9BB2     	 uxth r3,r3
 5907 1278 9BB2     	 uxth r3,r3
 5908 127a 3868     	 ldr r0,[r7]
 5909 127c 1946     	 mov r1,r3
 5910 127e FFF7FEFF 	 bl sbufWriteU16
1255:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->checkOverflow);
 5911              	 .loc 26 1255 0
 5912 1282 FFF7FEFF 	 bl gyroConfig
 5913 1286 0346     	 mov r3,r0
 5914 1288 9B7D     	 ldrb r3,[r3,#22]
 5915 128a 3868     	 ldr r0,[r7]
 5916 128c 1946     	 mov r1,r3
 5917 128e FFF7FEFF 	 bl sbufWriteU8
1256:../cleanflight/src/main/interface/msp.c **** 
1257:../cleanflight/src/main/interface/msp.c ****         break;
 5918              	 .loc 26 1257 0
 5919 1292 F9E1     	 b .L407
 5920              	.L416:
 5921              	 .align 2
 5922              	.L415:
 5923 1294 00000000 	 .word rxRuntimeConfig
 5924              	.L331:
1258:../cleanflight/src/main/interface/msp.c ****     case MSP_FILTER_CONFIG :
1259:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_lowpass_hz);
 5925              	 .loc 26 1259 0
 5926 1298 FFF7FEFF 	 bl gyroConfig
 5927 129c 0346     	 mov r3,r0
 5928 129e 1B89     	 ldrh r3,[r3,#8]
 5929 12a0 9BB2     	 uxth r3,r3
 5930 12a2 DBB2     	 uxtb r3,r3
 5931 12a4 3868     	 ldr r0,[r7]
 5932 12a6 1946     	 mov r1,r3
 5933 12a8 FFF7FEFF 	 bl sbufWriteU8
1260:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->dterm_lowpass_hz);
 5934              	 .loc 26 1260 0
 5935 12ac AD4B     	 ldr r3,.L417
 5936 12ae 1B68     	 ldr r3,[r3]
 5937 12b0 5B88     	 ldrh r3,[r3,#2]
 5938 12b2 9BB2     	 uxth r3,r3
 5939 12b4 3868     	 ldr r0,[r7]
 5940 12b6 1946     	 mov r1,r3
 5941 12b8 FFF7FEFF 	 bl sbufWriteU16
1261:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->yaw_lowpass_hz);
 5942              	 .loc 26 1261 0
 5943 12bc A94B     	 ldr r3,.L417
 5944 12be 1B68     	 ldr r3,[r3]
 5945 12c0 1B88     	 ldrh r3,[r3]
 5946 12c2 9BB2     	 uxth r3,r3
 5947 12c4 3868     	 ldr r0,[r7]
 5948 12c6 1946     	 mov r1,r3
 5949 12c8 FFF7FEFF 	 bl sbufWriteU16
1262:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gyroConfig()->gyro_soft_notch_hz_1);
 5950              	 .loc 26 1262 0
 5951 12cc FFF7FEFF 	 bl gyroConfig
 5952 12d0 0346     	 mov r3,r0
 5953 12d2 9B89     	 ldrh r3,[r3,#12]
 5954 12d4 9BB2     	 uxth r3,r3
 5955 12d6 3868     	 ldr r0,[r7]
 5956 12d8 1946     	 mov r1,r3
 5957 12da FFF7FEFF 	 bl sbufWriteU16
1263:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gyroConfig()->gyro_soft_notch_cutoff_1);
 5958              	 .loc 26 1263 0
 5959 12de FFF7FEFF 	 bl gyroConfig
 5960 12e2 0346     	 mov r3,r0
 5961 12e4 DB89     	 ldrh r3,[r3,#14]
 5962 12e6 9BB2     	 uxth r3,r3
 5963 12e8 3868     	 ldr r0,[r7]
 5964 12ea 1946     	 mov r1,r3
 5965 12ec FFF7FEFF 	 bl sbufWriteU16
1264:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->dterm_notch_hz);
 5966              	 .loc 26 1264 0
 5967 12f0 9C4B     	 ldr r3,.L417
 5968 12f2 1B68     	 ldr r3,[r3]
 5969 12f4 9B88     	 ldrh r3,[r3,#4]
 5970 12f6 9BB2     	 uxth r3,r3
 5971 12f8 3868     	 ldr r0,[r7]
 5972 12fa 1946     	 mov r1,r3
 5973 12fc FFF7FEFF 	 bl sbufWriteU16
1265:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->dterm_notch_cutoff);
 5974              	 .loc 26 1265 0
 5975 1300 984B     	 ldr r3,.L417
 5976 1302 1B68     	 ldr r3,[r3]
 5977 1304 DB88     	 ldrh r3,[r3,#6]
 5978 1306 9BB2     	 uxth r3,r3
 5979 1308 3868     	 ldr r0,[r7]
 5980 130a 1946     	 mov r1,r3
 5981 130c FFF7FEFF 	 bl sbufWriteU16
1266:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gyroConfig()->gyro_soft_notch_hz_2);
 5982              	 .loc 26 1266 0
 5983 1310 FFF7FEFF 	 bl gyroConfig
 5984 1314 0346     	 mov r3,r0
 5985 1316 1B8A     	 ldrh r3,[r3,#16]
 5986 1318 9BB2     	 uxth r3,r3
 5987 131a 3868     	 ldr r0,[r7]
 5988 131c 1946     	 mov r1,r3
 5989 131e FFF7FEFF 	 bl sbufWriteU16
1267:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gyroConfig()->gyro_soft_notch_cutoff_2);
 5990              	 .loc 26 1267 0
 5991 1322 FFF7FEFF 	 bl gyroConfig
 5992 1326 0346     	 mov r3,r0
 5993 1328 5B8A     	 ldrh r3,[r3,#18]
 5994 132a 9BB2     	 uxth r3,r3
 5995 132c 3868     	 ldr r0,[r7]
 5996 132e 1946     	 mov r1,r3
 5997 1330 FFF7FEFF 	 bl sbufWriteU16
1268:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->dterm_filter_type);
 5998              	 .loc 26 1268 0
 5999 1334 8B4B     	 ldr r3,.L417
 6000 1336 1B68     	 ldr r3,[r3]
 6001 1338 93F82130 	 ldrb r3,[r3,#33]
 6002 133c 3868     	 ldr r0,[r7]
 6003 133e 1946     	 mov r1,r3
 6004 1340 FFF7FEFF 	 bl sbufWriteU8
1269:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_hardware_lpf);
 6005              	 .loc 26 1269 0
 6006 1344 FFF7FEFF 	 bl gyroConfig
 6007 1348 0346     	 mov r3,r0
 6008 134a DB78     	 ldrb r3,[r3,#3]
 6009 134c 3868     	 ldr r0,[r7]
 6010 134e 1946     	 mov r1,r3
 6011 1350 FFF7FEFF 	 bl sbufWriteU8
1270:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_32khz_hardware_lpf);
 6012              	 .loc 26 1270 0
 6013 1354 FFF7FEFF 	 bl gyroConfig
 6014 1358 0346     	 mov r3,r0
 6015 135a 1B79     	 ldrb r3,[r3,#4]
 6016 135c 3868     	 ldr r0,[r7]
 6017 135e 1946     	 mov r1,r3
 6018 1360 FFF7FEFF 	 bl sbufWriteU8
1271:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gyroConfig()->gyro_lowpass_hz);
 6019              	 .loc 26 1271 0
 6020 1364 FFF7FEFF 	 bl gyroConfig
 6021 1368 0346     	 mov r3,r0
 6022 136a 1B89     	 ldrh r3,[r3,#8]
 6023 136c 9BB2     	 uxth r3,r3
 6024 136e 3868     	 ldr r0,[r7]
 6025 1370 1946     	 mov r1,r3
 6026 1372 FFF7FEFF 	 bl sbufWriteU16
1272:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, gyroConfig()->gyro_lowpass2_hz);
 6027              	 .loc 26 1272 0
 6028 1376 FFF7FEFF 	 bl gyroConfig
 6029 137a 0346     	 mov r3,r0
 6030 137c 5B89     	 ldrh r3,[r3,#10]
 6031 137e 9BB2     	 uxth r3,r3
 6032 1380 3868     	 ldr r0,[r7]
 6033 1382 1946     	 mov r1,r3
 6034 1384 FFF7FEFF 	 bl sbufWriteU16
1273:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_lowpass_type);
 6035              	 .loc 26 1273 0
 6036 1388 FFF7FEFF 	 bl gyroConfig
 6037 138c 0346     	 mov r3,r0
 6038 138e DB7D     	 ldrb r3,[r3,#23]
 6039 1390 3868     	 ldr r0,[r7]
 6040 1392 1946     	 mov r1,r3
 6041 1394 FFF7FEFF 	 bl sbufWriteU8
1274:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, gyroConfig()->gyro_lowpass2_type);
 6042              	 .loc 26 1274 0
 6043 1398 FFF7FEFF 	 bl gyroConfig
 6044 139c 0346     	 mov r3,r0
 6045 139e 1B7E     	 ldrb r3,[r3,#24]
 6046 13a0 3868     	 ldr r0,[r7]
 6047 13a2 1946     	 mov r1,r3
 6048 13a4 FFF7FEFF 	 bl sbufWriteU8
1275:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->dterm_lowpass2_hz);
 6049              	 .loc 26 1275 0
 6050 13a8 6E4B     	 ldr r3,.L417
 6051 13aa 1B68     	 ldr r3,[r3]
 6052 13ac B3F84630 	 ldrh r3,[r3,#70]
 6053 13b0 9BB2     	 uxth r3,r3
 6054 13b2 3868     	 ldr r0,[r7]
 6055 13b4 1946     	 mov r1,r3
 6056 13b6 FFF7FEFF 	 bl sbufWriteU16
1276:../cleanflight/src/main/interface/msp.c **** 
1277:../cleanflight/src/main/interface/msp.c ****         break;
 6057              	 .loc 26 1277 0
 6058 13ba 65E1     	 b .L407
 6059              	.L332:
1278:../cleanflight/src/main/interface/msp.c ****     case MSP_PID_ADVANCED:
1279:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, 0);
 6060              	 .loc 26 1279 0
 6061 13bc 3868     	 ldr r0,[r7]
 6062 13be 0021     	 movs r1,#0
 6063 13c0 FFF7FEFF 	 bl sbufWriteU16
1280:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, 0);
 6064              	 .loc 26 1280 0
 6065 13c4 3868     	 ldr r0,[r7]
 6066 13c6 0021     	 movs r1,#0
 6067 13c8 FFF7FEFF 	 bl sbufWriteU16
1281:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, 0); // was pidProfile.yaw_p_limit
 6068              	 .loc 26 1281 0
 6069 13cc 3868     	 ldr r0,[r7]
 6070 13ce 0021     	 movs r1,#0
 6071 13d0 FFF7FEFF 	 bl sbufWriteU16
1282:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0); // reserved
 6072              	 .loc 26 1282 0
 6073 13d4 3868     	 ldr r0,[r7]
 6074 13d6 0021     	 movs r1,#0
 6075 13d8 FFF7FEFF 	 bl sbufWriteU8
1283:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->vbatPidCompensation);
 6076              	 .loc 26 1283 0
 6077 13dc 614B     	 ldr r3,.L417
 6078 13de 1B68     	 ldr r3,[r3]
 6079 13e0 93F84030 	 ldrb r3,[r3,#64]
 6080 13e4 3868     	 ldr r0,[r7]
 6081 13e6 1946     	 mov r1,r3
 6082 13e8 FFF7FEFF 	 bl sbufWriteU8
1284:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->feedForwardTransition);
 6083              	 .loc 26 1284 0
 6084 13ec 5D4B     	 ldr r3,.L417
 6085 13ee 1B68     	 ldr r3,[r3]
 6086 13f0 93F84130 	 ldrb r3,[r3,#65]
 6087 13f4 3868     	 ldr r0,[r7]
 6088 13f6 1946     	 mov r1,r3
 6089 13f8 FFF7FEFF 	 bl sbufWriteU8
1285:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0); // was low byte of currentPidProfile->dtermSetpointWeight
 6090              	 .loc 26 1285 0
 6091 13fc 3868     	 ldr r0,[r7]
 6092 13fe 0021     	 movs r1,#0
 6093 1400 FFF7FEFF 	 bl sbufWriteU8
1286:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0); // reserved
 6094              	 .loc 26 1286 0
 6095 1404 3868     	 ldr r0,[r7]
 6096 1406 0021     	 movs r1,#0
 6097 1408 FFF7FEFF 	 bl sbufWriteU8
1287:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0); // reserved
 6098              	 .loc 26 1287 0
 6099 140c 3868     	 ldr r0,[r7]
 6100 140e 0021     	 movs r1,#0
 6101 1410 FFF7FEFF 	 bl sbufWriteU8
1288:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0); // reserved
 6102              	 .loc 26 1288 0
 6103 1414 3868     	 ldr r0,[r7]
 6104 1416 0021     	 movs r1,#0
 6105 1418 FFF7FEFF 	 bl sbufWriteU8
1289:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->rateAccelLimit);
 6106              	 .loc 26 1289 0
 6107 141c 514B     	 ldr r3,.L417
 6108 141e 1B68     	 ldr r3,[r3]
 6109 1420 5B8E     	 ldrh r3,[r3,#50]
 6110 1422 9BB2     	 uxth r3,r3
 6111 1424 3868     	 ldr r0,[r7]
 6112 1426 1946     	 mov r1,r3
 6113 1428 FFF7FEFF 	 bl sbufWriteU16
1290:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->yawRateAccelLimit);
 6114              	 .loc 26 1290 0
 6115 142c 4D4B     	 ldr r3,.L417
 6116 142e 1B68     	 ldr r3,[r3]
 6117 1430 1B8E     	 ldrh r3,[r3,#48]
 6118 1432 9BB2     	 uxth r3,r3
 6119 1434 3868     	 ldr r0,[r7]
 6120 1436 1946     	 mov r1,r3
 6121 1438 FFF7FEFF 	 bl sbufWriteU16
1291:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->levelAngleLimit);
 6122              	 .loc 26 1291 0
 6123 143c 494B     	 ldr r3,.L417
 6124 143e 1B68     	 ldr r3,[r3]
 6125 1440 93F82830 	 ldrb r3,[r3,#40]
 6126 1444 3868     	 ldr r0,[r7]
 6127 1446 1946     	 mov r1,r3
 6128 1448 FFF7FEFF 	 bl sbufWriteU8
1292:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0); // was pidProfile.levelSensitivity
 6129              	 .loc 26 1292 0
 6130 144c 3868     	 ldr r0,[r7]
 6131 144e 0021     	 movs r1,#0
 6132 1450 FFF7FEFF 	 bl sbufWriteU8
1293:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->itermThrottleThreshold);
 6133              	 .loc 26 1293 0
 6134 1454 434B     	 ldr r3,.L417
 6135 1456 1B68     	 ldr r3,[r3]
 6136 1458 9B8D     	 ldrh r3,[r3,#44]
 6137 145a 9BB2     	 uxth r3,r3
 6138 145c 3868     	 ldr r0,[r7]
 6139 145e 1946     	 mov r1,r3
 6140 1460 FFF7FEFF 	 bl sbufWriteU16
1294:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->itermAcceleratorGain);
 6141              	 .loc 26 1294 0
 6142 1464 3F4B     	 ldr r3,.L417
 6143 1466 1B68     	 ldr r3,[r3]
 6144 1468 DB8D     	 ldrh r3,[r3,#46]
 6145 146a 9BB2     	 uxth r3,r3
 6146 146c 3868     	 ldr r0,[r7]
 6147 146e 1946     	 mov r1,r3
 6148 1470 FFF7FEFF 	 bl sbufWriteU16
1295:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, 0); // was currentPidProfile->dtermSetpointWeight
 6149              	 .loc 26 1295 0
 6150 1474 3868     	 ldr r0,[r7]
 6151 1476 0021     	 movs r1,#0
 6152 1478 FFF7FEFF 	 bl sbufWriteU16
1296:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->iterm_rotation);
 6153              	 .loc 26 1296 0
 6154 147c 394B     	 ldr r3,.L417
 6155 147e 1B68     	 ldr r3,[r3]
 6156 1480 93F84B30 	 ldrb r3,[r3,#75]
 6157 1484 3868     	 ldr r0,[r7]
 6158 1486 1946     	 mov r1,r3
 6159 1488 FFF7FEFF 	 bl sbufWriteU8
1297:../cleanflight/src/main/interface/msp.c **** #if defined(USE_SMART_FEEDFORWARD)
1298:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->smart_feedforward);
 6160              	 .loc 26 1298 0
 6161 148c 354B     	 ldr r3,.L417
 6162 148e 1B68     	 ldr r3,[r3]
 6163 1490 93F84C30 	 ldrb r3,[r3,#76]
 6164 1494 3868     	 ldr r0,[r7]
 6165 1496 1946     	 mov r1,r3
 6166 1498 FFF7FEFF 	 bl sbufWriteU8
1299:../cleanflight/src/main/interface/msp.c **** #else
1300:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1301:../cleanflight/src/main/interface/msp.c **** #endif
1302:../cleanflight/src/main/interface/msp.c **** #if defined(USE_ITERM_RELAX)
1303:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->iterm_relax);
 6167              	 .loc 26 1303 0
 6168 149c 314B     	 ldr r3,.L417
 6169 149e 1B68     	 ldr r3,[r3]
 6170 14a0 93F84F30 	 ldrb r3,[r3,#79]
 6171 14a4 3868     	 ldr r0,[r7]
 6172 14a6 1946     	 mov r1,r3
 6173 14a8 FFF7FEFF 	 bl sbufWriteU8
1304:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->iterm_relax_type);
 6174              	 .loc 26 1304 0
 6175 14ac 2D4B     	 ldr r3,.L417
 6176 14ae 1B68     	 ldr r3,[r3]
 6177 14b0 93F84D30 	 ldrb r3,[r3,#77]
 6178 14b4 3868     	 ldr r0,[r7]
 6179 14b6 1946     	 mov r1,r3
 6180 14b8 FFF7FEFF 	 bl sbufWriteU8
1305:../cleanflight/src/main/interface/msp.c **** #else
1306:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1307:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1308:../cleanflight/src/main/interface/msp.c **** #endif
1309:../cleanflight/src/main/interface/msp.c **** #if defined(USE_ABSOLUTE_CONTROL)
1310:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->abs_control_gain);
 6181              	 .loc 26 1310 0
 6182 14bc 294B     	 ldr r3,.L417
 6183 14be 1B68     	 ldr r3,[r3]
 6184 14c0 93F85530 	 ldrb r3,[r3,#85]
 6185 14c4 3868     	 ldr r0,[r7]
 6186 14c6 1946     	 mov r1,r3
 6187 14c8 FFF7FEFF 	 bl sbufWriteU8
1311:../cleanflight/src/main/interface/msp.c **** #else
1312:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1313:../cleanflight/src/main/interface/msp.c **** #endif
1314:../cleanflight/src/main/interface/msp.c **** #if defined(USE_THROTTLE_BOOST)
1315:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->throttle_boost);
 6188              	 .loc 26 1315 0
 6189 14cc 254B     	 ldr r3,.L417
 6190 14ce 1B68     	 ldr r3,[r3]
 6191 14d0 93F84930 	 ldrb r3,[r3,#73]
 6192 14d4 3868     	 ldr r0,[r7]
 6193 14d6 1946     	 mov r1,r3
 6194 14d8 FFF7FEFF 	 bl sbufWriteU8
1316:../cleanflight/src/main/interface/msp.c **** #else
1317:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1318:../cleanflight/src/main/interface/msp.c **** #endif
1319:../cleanflight/src/main/interface/msp.c **** #if defined(USE_ACRO_TRAINER)
1320:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->acro_trainer_angle_limit);
 6195              	 .loc 26 1320 0
 6196 14dc 214B     	 ldr r3,.L417
 6197 14de 1B68     	 ldr r3,[r3]
 6198 14e0 93F85030 	 ldrb r3,[r3,#80]
 6199 14e4 3868     	 ldr r0,[r7]
 6200 14e6 1946     	 mov r1,r3
 6201 14e8 FFF7FEFF 	 bl sbufWriteU8
1321:../cleanflight/src/main/interface/msp.c **** #else
1322:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, 0);
1323:../cleanflight/src/main/interface/msp.c **** #endif
1324:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->pid[PID_ROLL].F);
 6202              	 .loc 26 1324 0
 6203 14ec 1D4B     	 ldr r3,.L417
 6204 14ee 1B68     	 ldr r3,[r3]
 6205 14f0 B3F80B30 	 ldrh r3,[r3,#11]
 6206 14f4 9BB2     	 uxth r3,r3
 6207 14f6 3868     	 ldr r0,[r7]
 6208 14f8 1946     	 mov r1,r3
 6209 14fa FFF7FEFF 	 bl sbufWriteU16
1325:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->pid[PID_PITCH].F);
 6210              	 .loc 26 1325 0
 6211 14fe 194B     	 ldr r3,.L417
 6212 1500 1B68     	 ldr r3,[r3]
 6213 1502 1B8A     	 ldrh r3,[r3,#16]
 6214 1504 9BB2     	 uxth r3,r3
 6215 1506 3868     	 ldr r0,[r7]
 6216 1508 1946     	 mov r1,r3
 6217 150a FFF7FEFF 	 bl sbufWriteU16
1326:../cleanflight/src/main/interface/msp.c ****         sbufWriteU16(dst, currentPidProfile->pid[PID_YAW].F);
 6218              	 .loc 26 1326 0
 6219 150e 154B     	 ldr r3,.L417
 6220 1510 1B68     	 ldr r3,[r3]
 6221 1512 B3F81530 	 ldrh r3,[r3,#21]
 6222 1516 9BB2     	 uxth r3,r3
 6223 1518 3868     	 ldr r0,[r7]
 6224 151a 1946     	 mov r1,r3
 6225 151c FFF7FEFF 	 bl sbufWriteU16
1327:../cleanflight/src/main/interface/msp.c **** 
1328:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, currentPidProfile->antiGravityMode);
 6226              	 .loc 26 1328 0
 6227 1520 104B     	 ldr r3,.L417
 6228 1522 1B68     	 ldr r3,[r3]
 6229 1524 93F82B30 	 ldrb r3,[r3,#43]
 6230 1528 3868     	 ldr r0,[r7]
 6231 152a 1946     	 mov r1,r3
 6232 152c FFF7FEFF 	 bl sbufWriteU8
1329:../cleanflight/src/main/interface/msp.c **** 
1330:../cleanflight/src/main/interface/msp.c ****         break;
 6233              	 .loc 26 1330 0
 6234 1530 AAE0     	 b .L407
 6235              	.L333:
1331:../cleanflight/src/main/interface/msp.c ****     case MSP_SENSOR_CONFIG:
1332:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, accelerometerConfig()->acc_hardware);
 6236              	 .loc 26 1332 0
 6237 1532 FFF7FEFF 	 bl accelerometerConfig
 6238 1536 0346     	 mov r3,r0
 6239 1538 DB78     	 ldrb r3,[r3,#3]
 6240 153a 3868     	 ldr r0,[r7]
 6241 153c 1946     	 mov r1,r3
 6242 153e FFF7FEFF 	 bl sbufWriteU8
1333:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, barometerConfig()->baro_hardware);
 6243              	 .loc 26 1333 0
 6244 1542 FFF7FEFF 	 bl barometerConfig
 6245 1546 0346     	 mov r3,r0
 6246 1548 5B79     	 ldrb r3,[r3,#5]
 6247 154a 3868     	 ldr r0,[r7]
 6248 154c 1946     	 mov r1,r3
 6249 154e FFF7FEFF 	 bl sbufWriteU8
1334:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, compassConfig()->mag_hardware);
 6250              	 .loc 26 1334 0
 6251 1552 FFF7FEFF 	 bl compassConfig
 6252 1556 0346     	 mov r3,r0
 6253 1558 DB78     	 ldrb r3,[r3,#3]
 6254 155a 3868     	 ldr r0,[r7]
 6255 155c 1946     	 mov r1,r3
 6256 155e FFF7FEFF 	 bl sbufWriteU8
1335:../cleanflight/src/main/interface/msp.c ****         break;
 6257              	 .loc 26 1335 0
 6258 1562 91E0     	 b .L407
 6259              	.L418:
 6260              	 .align 2
 6261              	.L417:
 6262 1564 00000000 	 .word currentPidProfile
 6263              	.L329:
 6264              	.LBB39:
1336:../cleanflight/src/main/interface/msp.c **** 
1337:../cleanflight/src/main/interface/msp.c **** #if defined(USE_VTX_COMMON)
1338:../cleanflight/src/main/interface/msp.c ****     case MSP_VTX_CONFIG:
1339:../cleanflight/src/main/interface/msp.c ****         {
1340:../cleanflight/src/main/interface/msp.c ****             const vtxDevice_t *vtxDevice = vtxCommonDevice();
 6265              	 .loc 26 1340 0
 6266 1568 FFF7FEFF 	 bl vtxCommonDevice
 6267 156c B862     	 str r0,[r7,#40]
1341:../cleanflight/src/main/interface/msp.c ****             if (vtxDevice) {
 6268              	 .loc 26 1341 0
 6269 156e BB6A     	 ldr r3,[r7,#40]
 6270 1570 002B     	 cmp r3,#0
 6271 1572 37D0     	 beq .L403
 6272              	.LBB40:
1342:../cleanflight/src/main/interface/msp.c ****                 uint8_t pitmode=0;
 6273              	 .loc 26 1342 0
 6274 1574 0023     	 movs r3,#0
 6275 1576 FB74     	 strb r3,[r7,#19]
1343:../cleanflight/src/main/interface/msp.c ****                 vtxCommonGetPitMode(vtxDevice, &pitmode);
 6276              	 .loc 26 1343 0
 6277 1578 07F11303 	 add r3,r7,#19
 6278 157c B86A     	 ldr r0,[r7,#40]
 6279 157e 1946     	 mov r1,r3
 6280 1580 FFF7FEFF 	 bl vtxCommonGetPitMode
1344:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, vtxCommonGetDeviceType(vtxDevice));
 6281              	 .loc 26 1344 0
 6282 1584 B86A     	 ldr r0,[r7,#40]
 6283 1586 FFF7FEFF 	 bl vtxCommonGetDeviceType
 6284 158a 0346     	 mov r3,r0
 6285 158c 3868     	 ldr r0,[r7]
 6286 158e 1946     	 mov r1,r3
 6287 1590 FFF7FEFF 	 bl sbufWriteU8
1345:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, vtxSettingsConfig()->band);
 6288              	 .loc 26 1345 0
 6289 1594 FFF7FEFF 	 bl vtxSettingsConfig
 6290 1598 0346     	 mov r3,r0
 6291 159a 1B78     	 ldrb r3,[r3]
 6292 159c 3868     	 ldr r0,[r7]
 6293 159e 1946     	 mov r1,r3
 6294 15a0 FFF7FEFF 	 bl sbufWriteU8
1346:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, vtxSettingsConfig()->channel);
 6295              	 .loc 26 1346 0
 6296 15a4 FFF7FEFF 	 bl vtxSettingsConfig
 6297 15a8 0346     	 mov r3,r0
 6298 15aa 5B78     	 ldrb r3,[r3,#1]
 6299 15ac 3868     	 ldr r0,[r7]
 6300 15ae 1946     	 mov r1,r3
 6301 15b0 FFF7FEFF 	 bl sbufWriteU8
1347:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, vtxSettingsConfig()->power);
 6302              	 .loc 26 1347 0
 6303 15b4 FFF7FEFF 	 bl vtxSettingsConfig
 6304 15b8 0346     	 mov r3,r0
 6305 15ba 9B78     	 ldrb r3,[r3,#2]
 6306 15bc 3868     	 ldr r0,[r7]
 6307 15be 1946     	 mov r1,r3
 6308 15c0 FFF7FEFF 	 bl sbufWriteU8
1348:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, pitmode);
 6309              	 .loc 26 1348 0
 6310 15c4 FB7C     	 ldrb r3,[r7,#19]
 6311 15c6 3868     	 ldr r0,[r7]
 6312 15c8 1946     	 mov r1,r3
 6313 15ca FFF7FEFF 	 bl sbufWriteU8
1349:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, vtxSettingsConfig()->freq);
 6314              	 .loc 26 1349 0
 6315 15ce FFF7FEFF 	 bl vtxSettingsConfig
 6316 15d2 0346     	 mov r3,r0
 6317 15d4 B3F80330 	 ldrh r3,[r3,#3]
 6318 15d8 9BB2     	 uxth r3,r3
 6319 15da 3868     	 ldr r0,[r7]
 6320 15dc 1946     	 mov r1,r3
 6321 15de FFF7FEFF 	 bl sbufWriteU16
 6322              	.LBE40:
 6323              	.LBE39:
1350:../cleanflight/src/main/interface/msp.c ****                 // future extensions here...
1351:../cleanflight/src/main/interface/msp.c ****             } else {
1352:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, VTXDEV_UNKNOWN); // no VTX detected
1353:../cleanflight/src/main/interface/msp.c ****             }
1354:../cleanflight/src/main/interface/msp.c ****         }
1355:../cleanflight/src/main/interface/msp.c **** 
1356:../cleanflight/src/main/interface/msp.c ****         break;
 6324              	 .loc 26 1356 0
 6325 15e2 51E0     	 b .L407
 6326              	.L403:
 6327              	.LBB41:
1352:../cleanflight/src/main/interface/msp.c ****             }
 6328              	 .loc 26 1352 0
 6329 15e4 3868     	 ldr r0,[r7]
 6330 15e6 FF21     	 movs r1,#255
 6331 15e8 FFF7FEFF 	 bl sbufWriteU8
 6332              	.LBE41:
 6333              	 .loc 26 1356 0
 6334 15ec 4CE0     	 b .L407
 6335              	.L354:
1357:../cleanflight/src/main/interface/msp.c **** #endif
1358:../cleanflight/src/main/interface/msp.c **** 
1359:../cleanflight/src/main/interface/msp.c ****     case MSP_TX_INFO:
1360:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rssiSource);
 6336              	 .loc 26 1360 0
 6337 15ee 2F4B     	 ldr r3,.L419
 6338 15f0 1B78     	 ldrb r3,[r3]
 6339 15f2 3868     	 ldr r0,[r7]
 6340 15f4 1946     	 mov r1,r3
 6341 15f6 FFF7FEFF 	 bl sbufWriteU8
1361:../cleanflight/src/main/interface/msp.c ****         uint8_t rtcDateTimeIsSet = 0;
 6342              	 .loc 26 1361 0
 6343 15fa 0023     	 movs r3,#0
 6344 15fc 87F84B30 	 strb r3,[r7,#75]
1362:../cleanflight/src/main/interface/msp.c **** #ifdef USE_RTC_TIME
1363:../cleanflight/src/main/interface/msp.c ****         dateTime_t dt;
1364:../cleanflight/src/main/interface/msp.c ****         if (rtcGetDateTime(&dt)) {
 6345              	 .loc 26 1364 0
 6346 1600 07F11C03 	 add r3,r7,#28
 6347 1604 1846     	 mov r0,r3
 6348 1606 FFF7FEFF 	 bl rtcGetDateTime
 6349 160a 0346     	 mov r3,r0
 6350 160c 002B     	 cmp r3,#0
 6351 160e 02D0     	 beq .L405
1365:../cleanflight/src/main/interface/msp.c ****             rtcDateTimeIsSet = 1;
 6352              	 .loc 26 1365 0
 6353 1610 0123     	 movs r3,#1
 6354 1612 87F84B30 	 strb r3,[r7,#75]
 6355              	.L405:
1366:../cleanflight/src/main/interface/msp.c ****         }
1367:../cleanflight/src/main/interface/msp.c **** #else
1368:../cleanflight/src/main/interface/msp.c ****         rtcDateTimeIsSet = RTC_NOT_SUPPORTED;
1369:../cleanflight/src/main/interface/msp.c **** #endif
1370:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rtcDateTimeIsSet);
 6356              	 .loc 26 1370 0
 6357 1616 97F84B30 	 ldrb r3,[r7,#75]
 6358 161a 3868     	 ldr r0,[r7]
 6359 161c 1946     	 mov r1,r3
 6360 161e FFF7FEFF 	 bl sbufWriteU8
1371:../cleanflight/src/main/interface/msp.c **** 
1372:../cleanflight/src/main/interface/msp.c ****         break;
 6361              	 .loc 26 1372 0
 6362 1622 31E0     	 b .L407
 6363              	.L357:
 6364              	.LBB42:
1373:../cleanflight/src/main/interface/msp.c **** #ifdef USE_RTC_TIME
1374:../cleanflight/src/main/interface/msp.c ****     case MSP_RTC:
1375:../cleanflight/src/main/interface/msp.c ****         {
1376:../cleanflight/src/main/interface/msp.c ****             dateTime_t dt;
1377:../cleanflight/src/main/interface/msp.c ****             if (rtcGetDateTime(&dt)) {
 6365              	 .loc 26 1377 0
 6366 1624 07F10803 	 add r3,r7,#8
 6367 1628 1846     	 mov r0,r3
 6368 162a FFF7FEFF 	 bl rtcGetDateTime
 6369 162e 0346     	 mov r3,r0
 6370 1630 002B     	 cmp r3,#0
 6371 1632 25D0     	 beq .L406
1378:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, dt.year);
 6372              	 .loc 26 1378 0
 6373 1634 3B89     	 ldrh r3,[r7,#8]
 6374 1636 3868     	 ldr r0,[r7]
 6375 1638 1946     	 mov r1,r3
 6376 163a FFF7FEFF 	 bl sbufWriteU16
1379:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, dt.month);
 6377              	 .loc 26 1379 0
 6378 163e BB7A     	 ldrb r3,[r7,#10]
 6379 1640 3868     	 ldr r0,[r7]
 6380 1642 1946     	 mov r1,r3
 6381 1644 FFF7FEFF 	 bl sbufWriteU8
1380:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, dt.day);
 6382              	 .loc 26 1380 0
 6383 1648 FB7A     	 ldrb r3,[r7,#11]
 6384 164a 3868     	 ldr r0,[r7]
 6385 164c 1946     	 mov r1,r3
 6386 164e FFF7FEFF 	 bl sbufWriteU8
1381:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, dt.hours);
 6387              	 .loc 26 1381 0
 6388 1652 3B7B     	 ldrb r3,[r7,#12]
 6389 1654 3868     	 ldr r0,[r7]
 6390 1656 1946     	 mov r1,r3
 6391 1658 FFF7FEFF 	 bl sbufWriteU8
1382:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, dt.minutes);
 6392              	 .loc 26 1382 0
 6393 165c 7B7B     	 ldrb r3,[r7,#13]
 6394 165e 3868     	 ldr r0,[r7]
 6395 1660 1946     	 mov r1,r3
 6396 1662 FFF7FEFF 	 bl sbufWriteU8
1383:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, dt.seconds);
 6397              	 .loc 26 1383 0
 6398 1666 BB7B     	 ldrb r3,[r7,#14]
 6399 1668 3868     	 ldr r0,[r7]
 6400 166a 1946     	 mov r1,r3
 6401 166c FFF7FEFF 	 bl sbufWriteU8
1384:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU16(dst, dt.millis);
 6402              	 .loc 26 1384 0
 6403 1670 B7F80F30 	 ldrh r3,[r7,#15]
 6404 1674 9BB2     	 uxth r3,r3
 6405 1676 3868     	 ldr r0,[r7]
 6406 1678 1946     	 mov r1,r3
 6407 167a FFF7FEFF 	 bl sbufWriteU16
 6408              	.LBE42:
1385:../cleanflight/src/main/interface/msp.c ****             }
1386:../cleanflight/src/main/interface/msp.c ****         }
1387:../cleanflight/src/main/interface/msp.c **** 
1388:../cleanflight/src/main/interface/msp.c ****         break;
 6409              	 .loc 26 1388 0
 6410 167e 03E0     	 b .L407
 6411              	.L406:
 6412 1680 02E0     	 b .L407
 6413              	.L310:
1389:../cleanflight/src/main/interface/msp.c **** #endif
1390:../cleanflight/src/main/interface/msp.c ****     default:
1391:../cleanflight/src/main/interface/msp.c ****         unsupportedCommand = true;
 6414              	 .loc 26 1391 0
 6415 1682 0123     	 movs r3,#1
 6416 1684 87F88F30 	 strb r3,[r7,#143]
 6417              	.L407:
 6418              	.LBE17:
1392:../cleanflight/src/main/interface/msp.c ****     }
1393:../cleanflight/src/main/interface/msp.c ****     return !unsupportedCommand;
 6419              	 .loc 26 1393 0
 6420 1688 97F88F30 	 ldrb r3,[r7,#143]
 6421 168c 002B     	 cmp r3,#0
 6422 168e 14BF     	 ite ne
 6423 1690 0123     	 movne r3,#1
 6424 1692 0023     	 moveq r3,#0
 6425 1694 DBB2     	 uxtb r3,r3
 6426 1696 83F00103 	 eor r3,r3,#1
 6427 169a DBB2     	 uxtb r3,r3
 6428 169c 03F00103 	 and r3,r3,#1
 6429 16a0 DBB2     	 uxtb r3,r3
1394:../cleanflight/src/main/interface/msp.c **** }
 6430              	 .loc 26 1394 0
 6431 16a2 1846     	 mov r0,r3
 6432 16a4 9437     	 adds r7,r7,#148
 6433              	.LCFI288:
 6434              	 .cfi_def_cfa_offset 12
 6435 16a6 BD46     	 mov sp,r7
 6436              	.LCFI289:
 6437              	 .cfi_def_cfa_register 13
 6438              	 
 6439 16a8 90BD     	 pop {r4,r7,pc}
 6440              	.L420:
 6441 16aa 00BF     	 .align 2
 6442              	.L419:
 6443 16ac 00000000 	 .word rssiSource
 6444              	 .cfi_endproc
 6445              	.LFE666:
 6447              	 .section .text.mspFcProcessOutCommandWithArg,"ax",%progbits
 6448              	 .align 2
 6449              	 .thumb
 6450              	 .thumb_func
 6452              	mspFcProcessOutCommandWithArg:
 6453              	.LFB667:
1395:../cleanflight/src/main/interface/msp.c **** #endif // USE_OSD_SLAVE
1396:../cleanflight/src/main/interface/msp.c **** 
1397:../cleanflight/src/main/interface/msp.c **** static mspResult_e mspFcProcessOutCommandWithArg(uint8_t cmdMSP, sbuf_t *src, sbuf_t *dst, mspPostP
1398:../cleanflight/src/main/interface/msp.c **** {
 6454              	 .loc 26 1398 0
 6455              	 .cfi_startproc
 6456              	 
 6457              	 
 6458 0000 80B5     	 push {r7,lr}
 6459              	.LCFI290:
 6460              	 .cfi_def_cfa_offset 8
 6461              	 .cfi_offset 7,-8
 6462              	 .cfi_offset 14,-4
 6463 0002 86B0     	 sub sp,sp,#24
 6464              	.LCFI291:
 6465              	 .cfi_def_cfa_offset 32
 6466 0004 00AF     	 add r7,sp,#0
 6467              	.LCFI292:
 6468              	 .cfi_def_cfa_register 7
 6469 0006 B960     	 str r1,[r7,#8]
 6470 0008 7A60     	 str r2,[r7,#4]
 6471 000a 3B60     	 str r3,[r7]
 6472 000c 0346     	 mov r3,r0
 6473 000e FB73     	 strb r3,[r7,#15]
1399:../cleanflight/src/main/interface/msp.c **** #if defined(USE_OSD_SLAVE)
1400:../cleanflight/src/main/interface/msp.c ****         UNUSED(dst);
1401:../cleanflight/src/main/interface/msp.c **** #endif
1402:../cleanflight/src/main/interface/msp.c **** 
1403:../cleanflight/src/main/interface/msp.c ****     switch (cmdMSP) {
 6474              	 .loc 26 1403 0
 6475 0010 FB7B     	 ldrb r3,[r7,#15]
 6476 0012 742B     	 cmp r3,#116
 6477 0014 04D0     	 beq .L423
 6478 0016 772B     	 cmp r3,#119
 6479 0018 15D0     	 beq .L424
 6480 001a 442B     	 cmp r3,#68
 6481 001c 26D0     	 beq .L425
 6482 001e 4DE0     	 b .L436
 6483              	.L423:
 6484              	.LBB43:
1404:../cleanflight/src/main/interface/msp.c **** #if !defined(USE_OSD_SLAVE)
1405:../cleanflight/src/main/interface/msp.c ****     case MSP_BOXNAMES:
1406:../cleanflight/src/main/interface/msp.c ****         {
1407:../cleanflight/src/main/interface/msp.c ****             const int page = sbufBytesRemaining(src) ? sbufReadU8(src) : 0;
 6485              	 .loc 26 1407 0
 6486 0020 B868     	 ldr r0,[r7,#8]
 6487 0022 FFF7FEFF 	 bl sbufBytesRemaining
 6488 0026 0346     	 mov r3,r0
 6489 0028 002B     	 cmp r3,#0
 6490 002a 04D0     	 beq .L426
 6491              	 .loc 26 1407 0 is_stmt 0 discriminator 1
 6492 002c B868     	 ldr r0,[r7,#8]
 6493 002e FFF7FEFF 	 bl sbufReadU8
 6494 0032 0346     	 mov r3,r0
 6495 0034 00E0     	 b .L427
 6496              	.L426:
 6497              	 .loc 26 1407 0 discriminator 2
 6498 0036 0023     	 movs r3,#0
 6499              	.L427:
 6500              	 .loc 26 1407 0 discriminator 4
 6501 0038 7B61     	 str r3,[r7,#20]
1408:../cleanflight/src/main/interface/msp.c ****             serializeBoxReply(dst, page, &serializeBoxNameFn);
 6502              	 .loc 26 1408 0 is_stmt 1 discriminator 4
 6503 003a 7868     	 ldr r0,[r7,#4]
 6504 003c 7969     	 ldr r1,[r7,#20]
 6505 003e 234A     	 ldr r2,.L437
 6506 0040 FFF7FEFF 	 bl serializeBoxReply
 6507              	.LBE43:
1409:../cleanflight/src/main/interface/msp.c ****         }
1410:../cleanflight/src/main/interface/msp.c ****         break;
 6508              	 .loc 26 1410 0 discriminator 4
 6509 0044 3CE0     	 b .L428
 6510              	.L424:
 6511              	.LBB44:
1411:../cleanflight/src/main/interface/msp.c ****     case MSP_BOXIDS:
1412:../cleanflight/src/main/interface/msp.c ****         {
1413:../cleanflight/src/main/interface/msp.c ****             const int page = sbufBytesRemaining(src) ? sbufReadU8(src) : 0;
 6512              	 .loc 26 1413 0
 6513 0046 B868     	 ldr r0,[r7,#8]
 6514 0048 FFF7FEFF 	 bl sbufBytesRemaining
 6515 004c 0346     	 mov r3,r0
 6516 004e 002B     	 cmp r3,#0
 6517 0050 04D0     	 beq .L429
 6518              	 .loc 26 1413 0 is_stmt 0 discriminator 1
 6519 0052 B868     	 ldr r0,[r7,#8]
 6520 0054 FFF7FEFF 	 bl sbufReadU8
 6521 0058 0346     	 mov r3,r0
 6522 005a 00E0     	 b .L430
 6523              	.L429:
 6524              	 .loc 26 1413 0 discriminator 2
 6525 005c 0023     	 movs r3,#0
 6526              	.L430:
 6527              	 .loc 26 1413 0 discriminator 4
 6528 005e 3B61     	 str r3,[r7,#16]
1414:../cleanflight/src/main/interface/msp.c ****             serializeBoxReply(dst, page, &serializeBoxPermanentIdFn);
 6529              	 .loc 26 1414 0 is_stmt 1 discriminator 4
 6530 0060 7868     	 ldr r0,[r7,#4]
 6531 0062 3969     	 ldr r1,[r7,#16]
 6532 0064 1A4A     	 ldr r2,.L437+4
 6533 0066 FFF7FEFF 	 bl serializeBoxReply
 6534              	.LBE44:
1415:../cleanflight/src/main/interface/msp.c ****         }
1416:../cleanflight/src/main/interface/msp.c ****         break;
 6535              	 .loc 26 1416 0 discriminator 4
 6536 006a 29E0     	 b .L428
 6537              	.L425:
1417:../cleanflight/src/main/interface/msp.c **** #endif
1418:../cleanflight/src/main/interface/msp.c ****     case MSP_REBOOT:
1419:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src)) {
 6538              	 .loc 26 1419 0
 6539 006c B868     	 ldr r0,[r7,#8]
 6540 006e FFF7FEFF 	 bl sbufBytesRemaining
 6541 0072 0346     	 mov r3,r0
 6542 0074 002B     	 cmp r3,#0
 6543 0076 10D0     	 beq .L431
1420:../cleanflight/src/main/interface/msp.c ****             rebootMode = sbufReadU8(src);
 6544              	 .loc 26 1420 0
 6545 0078 B868     	 ldr r0,[r7,#8]
 6546 007a FFF7FEFF 	 bl sbufReadU8
 6547 007e 0346     	 mov r3,r0
 6548 0080 1A46     	 mov r2,r3
 6549 0082 144B     	 ldr r3,.L437+8
 6550 0084 1A70     	 strb r2,[r3]
1421:../cleanflight/src/main/interface/msp.c **** 
1422:../cleanflight/src/main/interface/msp.c ****             if (rebootMode >= MSP_REBOOT_COUNT
 6551              	 .loc 26 1422 0
 6552 0086 134B     	 ldr r3,.L437+8
 6553 0088 1B78     	 ldrb r3,[r3]
 6554 008a 022B     	 cmp r3,#2
 6555 008c 03D8     	 bhi .L432
1423:../cleanflight/src/main/interface/msp.c **** #if !defined(USE_USB_MSC)
1424:../cleanflight/src/main/interface/msp.c ****                 || rebootMode == MSP_REBOOT_MSC
 6556              	 .loc 26 1424 0
 6557 008e 114B     	 ldr r3,.L437+8
 6558 0090 1B78     	 ldrb r3,[r3]
 6559 0092 022B     	 cmp r3,#2
 6560 0094 04D1     	 bne .L433
 6561              	.L432:
1425:../cleanflight/src/main/interface/msp.c **** #endif
1426:../cleanflight/src/main/interface/msp.c ****                 ) {
1427:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
 6562              	 .loc 26 1427 0
 6563 0096 FF23     	 movs r3,#255
 6564 0098 13E0     	 b .L434
 6565              	.L431:
1428:../cleanflight/src/main/interface/msp.c ****             }
1429:../cleanflight/src/main/interface/msp.c ****         } else {
1430:../cleanflight/src/main/interface/msp.c ****             rebootMode = MSP_REBOOT_FIRMWARE;
 6566              	 .loc 26 1430 0
 6567 009a 0E4B     	 ldr r3,.L437+8
 6568 009c 0022     	 movs r2,#0
 6569 009e 1A70     	 strb r2,[r3]
 6570              	.L433:
1431:../cleanflight/src/main/interface/msp.c ****         }
1432:../cleanflight/src/main/interface/msp.c **** 
1433:../cleanflight/src/main/interface/msp.c ****         sbufWriteU8(dst, rebootMode);
 6571              	 .loc 26 1433 0
 6572 00a0 0C4B     	 ldr r3,.L437+8
 6573 00a2 1B78     	 ldrb r3,[r3]
 6574 00a4 7868     	 ldr r0,[r7,#4]
 6575 00a6 1946     	 mov r1,r3
 6576 00a8 FFF7FEFF 	 bl sbufWriteU8
1434:../cleanflight/src/main/interface/msp.c **** 
1435:../cleanflight/src/main/interface/msp.c **** #if defined(USE_USB_MSC)
1436:../cleanflight/src/main/interface/msp.c ****         if (rebootMode == MSP_REBOOT_MSC) {
1437:../cleanflight/src/main/interface/msp.c ****             if (mscCheckFilesystemReady()) {
1438:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, 1);
1439:../cleanflight/src/main/interface/msp.c ****             } else {
1440:../cleanflight/src/main/interface/msp.c ****                 sbufWriteU8(dst, 0);
1441:../cleanflight/src/main/interface/msp.c **** 
1442:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ACK;
1443:../cleanflight/src/main/interface/msp.c ****             }
1444:../cleanflight/src/main/interface/msp.c ****         }
1445:../cleanflight/src/main/interface/msp.c **** #endif
1446:../cleanflight/src/main/interface/msp.c **** 
1447:../cleanflight/src/main/interface/msp.c ****         if (mspPostProcessFn) {
 6577              	 .loc 26 1447 0
 6578 00ac 3B68     	 ldr r3,[r7]
 6579 00ae 002B     	 cmp r3,#0
 6580 00b0 03D0     	 beq .L435
1448:../cleanflight/src/main/interface/msp.c ****             *mspPostProcessFn = mspRebootFn;
 6581              	 .loc 26 1448 0
 6582 00b2 3B68     	 ldr r3,[r7]
 6583 00b4 084A     	 ldr r2,.L437+12
 6584 00b6 1A60     	 str r2,[r3]
1449:../cleanflight/src/main/interface/msp.c ****         }
1450:../cleanflight/src/main/interface/msp.c **** 
1451:../cleanflight/src/main/interface/msp.c ****         break;
 6585              	 .loc 26 1451 0
 6586 00b8 02E0     	 b .L428
 6587              	.L435:
 6588 00ba 01E0     	 b .L428
 6589              	.L436:
1452:../cleanflight/src/main/interface/msp.c ****     default:
1453:../cleanflight/src/main/interface/msp.c ****         return MSP_RESULT_CMD_UNKNOWN;
 6590              	 .loc 26 1453 0
 6591 00bc FE23     	 movs r3,#254
 6592 00be 00E0     	 b .L434
 6593              	.L428:
1454:../cleanflight/src/main/interface/msp.c ****     }
1455:../cleanflight/src/main/interface/msp.c ****     return MSP_RESULT_ACK;
 6594              	 .loc 26 1455 0
 6595 00c0 0123     	 movs r3,#1
 6596              	.L434:
 6597 00c2 5BB2     	 sxtb r3,r3
1456:../cleanflight/src/main/interface/msp.c **** }
 6598              	 .loc 26 1456 0
 6599 00c4 1846     	 mov r0,r3
 6600 00c6 1837     	 adds r7,r7,#24
 6601              	.LCFI293:
 6602              	 .cfi_def_cfa_offset 8
 6603 00c8 BD46     	 mov sp,r7
 6604              	.LCFI294:
 6605              	 .cfi_def_cfa_register 13
 6606              	 
 6607 00ca 80BD     	 pop {r7,pc}
 6608              	.L438:
 6609              	 .align 2
 6610              	.L437:
 6611 00cc 00000000 	 .word serializeBoxNameFn
 6612 00d0 00000000 	 .word serializeBoxPermanentIdFn
 6613 00d4 00000000 	 .word rebootMode
 6614 00d8 00000000 	 .word mspRebootFn
 6615              	 .cfi_endproc
 6616              	.LFE667:
 6618              	 .section .text.mspProcessInCommand,"ax",%progbits
 6619              	 .align 2
 6620              	 .thumb
 6621              	 .thumb_func
 6623              	mspProcessInCommand:
 6624              	.LFB668:
1457:../cleanflight/src/main/interface/msp.c **** 
1458:../cleanflight/src/main/interface/msp.c **** #ifdef USE_FLASHFS
1459:../cleanflight/src/main/interface/msp.c **** static void mspFcDataFlashReadCommand(sbuf_t *dst, sbuf_t *src)
1460:../cleanflight/src/main/interface/msp.c **** {
1461:../cleanflight/src/main/interface/msp.c ****     const unsigned int dataSize = sbufBytesRemaining(src);
1462:../cleanflight/src/main/interface/msp.c ****     const uint32_t readAddress = sbufReadU32(src);
1463:../cleanflight/src/main/interface/msp.c ****     uint16_t readLength;
1464:../cleanflight/src/main/interface/msp.c ****     bool allowCompression = false;
1465:../cleanflight/src/main/interface/msp.c ****     bool useLegacyFormat;
1466:../cleanflight/src/main/interface/msp.c ****     if (dataSize >= sizeof(uint32_t) + sizeof(uint16_t)) {
1467:../cleanflight/src/main/interface/msp.c ****         readLength = sbufReadU16(src);
1468:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src)) {
1469:../cleanflight/src/main/interface/msp.c ****             allowCompression = sbufReadU8(src);
1470:../cleanflight/src/main/interface/msp.c ****         }
1471:../cleanflight/src/main/interface/msp.c ****         useLegacyFormat = false;
1472:../cleanflight/src/main/interface/msp.c ****     } else {
1473:../cleanflight/src/main/interface/msp.c ****         readLength = 128;
1474:../cleanflight/src/main/interface/msp.c ****         useLegacyFormat = true;
1475:../cleanflight/src/main/interface/msp.c ****     }
1476:../cleanflight/src/main/interface/msp.c **** 
1477:../cleanflight/src/main/interface/msp.c ****     serializeDataflashReadReply(dst, readAddress, readLength, useLegacyFormat, allowCompression);
1478:../cleanflight/src/main/interface/msp.c **** }
1479:../cleanflight/src/main/interface/msp.c **** #endif
1480:../cleanflight/src/main/interface/msp.c **** 
1481:../cleanflight/src/main/interface/msp.c **** #ifdef USE_OSD_SLAVE
1482:../cleanflight/src/main/interface/msp.c **** static mspResult_e mspProcessInCommand(uint8_t cmdMSP, sbuf_t *src)
1483:../cleanflight/src/main/interface/msp.c **** {
1484:../cleanflight/src/main/interface/msp.c ****     UNUSED(cmdMSP);
1485:../cleanflight/src/main/interface/msp.c ****     UNUSED(src);
1486:../cleanflight/src/main/interface/msp.c **** 
1487:../cleanflight/src/main/interface/msp.c ****     switch(cmdMSP) {
1488:../cleanflight/src/main/interface/msp.c ****     case MSP_RESET_CONF:
1489:../cleanflight/src/main/interface/msp.c ****         resetEEPROM();
1490:../cleanflight/src/main/interface/msp.c ****         readEEPROM();
1491:../cleanflight/src/main/interface/msp.c ****         break;
1492:../cleanflight/src/main/interface/msp.c ****     case MSP_EEPROM_WRITE:
1493:../cleanflight/src/main/interface/msp.c ****         writeEEPROM();
1494:../cleanflight/src/main/interface/msp.c ****         readEEPROM();
1495:../cleanflight/src/main/interface/msp.c ****         break;
1496:../cleanflight/src/main/interface/msp.c ****     default:
1497:../cleanflight/src/main/interface/msp.c ****         // we do not know how to handle the (valid) message, indicate error MSP $M!
1498:../cleanflight/src/main/interface/msp.c ****         return MSP_RESULT_ERROR;
1499:../cleanflight/src/main/interface/msp.c ****     }
1500:../cleanflight/src/main/interface/msp.c ****     return MSP_RESULT_ACK;
1501:../cleanflight/src/main/interface/msp.c **** }
1502:../cleanflight/src/main/interface/msp.c **** 
1503:../cleanflight/src/main/interface/msp.c **** #else
1504:../cleanflight/src/main/interface/msp.c **** 
1505:../cleanflight/src/main/interface/msp.c **** static mspResult_e mspProcessInCommand(uint8_t cmdMSP, sbuf_t *src)
1506:../cleanflight/src/main/interface/msp.c **** {
 6625              	 .loc 26 1506 0
 6626              	 .cfi_startproc
 6627              	 
 6628              	 
 6629 0000 90B5     	 push {r4,r7,lr}
 6630              	.LCFI295:
 6631              	 .cfi_def_cfa_offset 12
 6632              	 .cfi_offset 4,-12
 6633              	 .cfi_offset 7,-8
 6634              	 .cfi_offset 14,-4
 6635 0002 B7B0     	 sub sp,sp,#220
 6636              	.LCFI296:
 6637              	 .cfi_def_cfa_offset 232
 6638 0004 00AF     	 add r7,sp,#0
 6639              	.LCFI297:
 6640              	 .cfi_def_cfa_register 7
 6641 0006 0346     	 mov r3,r0
 6642 0008 3960     	 str r1,[r7]
 6643 000a FB71     	 strb r3,[r7,#7]
1507:../cleanflight/src/main/interface/msp.c ****     uint32_t i;
1508:../cleanflight/src/main/interface/msp.c ****     uint8_t value;
1509:../cleanflight/src/main/interface/msp.c ****     const unsigned int dataSize = sbufBytesRemaining(src);
 6644              	 .loc 26 1509 0
 6645 000c 3868     	 ldr r0,[r7]
 6646 000e FFF7FEFF 	 bl sbufBytesRemaining
 6647 0012 0346     	 mov r3,r0
 6648 0014 C7F8B030 	 str r3,[r7,#176]
1510:../cleanflight/src/main/interface/msp.c ****     switch (cmdMSP) {
 6649              	 .loc 26 1510 0
 6650 0018 FB79     	 ldrb r3,[r7,#7]
 6651 001a 0B3B     	 subs r3,r3,#11
 6652 001c EF2B     	 cmp r3,#239
 6653 001e 01F24E84 	 bhi .L440
 6654 0022 01A2     	 adr r2,.L442
 6655 0024 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6656              	 .p2align 2
 6657              	.L442:
 6658 0028 E3160000 	 .word .L441+1
 6659 002c BF180000 	 .word .L440+1
 6660 0030 BF180000 	 .word .L440+1
 6661 0034 BF180000 	 .word .L440+1
 6662 0038 BF180000 	 .word .L440+1
 6663 003c BF180000 	 .word .L440+1
 6664 0040 BF180000 	 .word .L440+1
 6665 0044 BF180000 	 .word .L440+1
 6666 0048 BF180000 	 .word .L440+1
 6667 004c BF180000 	 .word .L440+1
 6668 0050 BF180000 	 .word .L440+1
 6669 0054 BF180000 	 .word .L440+1
 6670 0058 BF180000 	 .word .L440+1
 6671 005c BF180000 	 .word .L440+1
 6672 0060 BF180000 	 .word .L440+1
 6673 0064 BF180000 	 .word .L440+1
 6674 0068 BF180000 	 .word .L440+1
 6675 006c BF180000 	 .word .L440+1
 6676 0070 BF180000 	 .word .L440+1
 6677 0074 BF180000 	 .word .L440+1
 6678 0078 BF180000 	 .word .L440+1
 6679 007c BF180000 	 .word .L440+1
 6680 0080 BF180000 	 .word .L440+1
 6681 0084 BF180000 	 .word .L440+1
 6682 0088 15060000 	 .word .L443+1
 6683 008c BF180000 	 .word .L440+1
 6684 0090 F3120000 	 .word .L444+1
 6685 0094 BF180000 	 .word .L440+1
 6686 0098 07130000 	 .word .L445+1
 6687 009c BF180000 	 .word .L440+1
 6688 00a0 BF180000 	 .word .L440+1
 6689 00a4 BF180000 	 .word .L440+1
 6690 00a8 39130000 	 .word .L446+1
 6691 00ac BF180000 	 .word .L440+1
 6692 00b0 73130000 	 .word .L447+1
 6693 00b4 BF180000 	 .word .L440+1
 6694 00b8 BF180000 	 .word .L440+1
 6695 00bc BF180000 	 .word .L440+1
 6696 00c0 BF180000 	 .word .L440+1
 6697 00c4 BF180000 	 .word .L440+1
 6698 00c8 D9150000 	 .word .L448+1
 6699 00cc BF180000 	 .word .L440+1
 6700 00d0 B1060000 	 .word .L449+1
 6701 00d4 BF180000 	 .word .L440+1
 6702 00d8 1F160000 	 .word .L450+1
 6703 00dc BF180000 	 .word .L440+1
 6704 00e0 BF180000 	 .word .L440+1
 6705 00e4 BF180000 	 .word .L440+1
 6706 00e8 BF180000 	 .word .L440+1
 6707 00ec C3180000 	 .word .L577+1
 6708 00f0 BF180000 	 .word .L440+1
 6709 00f4 53050000 	 .word .L452+1
 6710 00f8 BF180000 	 .word .L440+1
 6711 00fc BF180000 	 .word .L440+1
 6712 0100 EB150000 	 .word .L453+1
 6713 0104 BF180000 	 .word .L440+1
 6714 0108 BF180000 	 .word .L440+1
 6715 010c BF180000 	 .word .L440+1
 6716 0110 BF180000 	 .word .L440+1
 6717 0114 BF180000 	 .word .L440+1
 6718 0118 BF180000 	 .word .L440+1
 6719 011c BF180000 	 .word .L440+1
 6720 0120 BF180000 	 .word .L440+1
 6721 0124 BF180000 	 .word .L440+1
 6722 0128 BF180000 	 .word .L440+1
 6723 012c FB140000 	 .word .L454+1
 6724 0130 BF180000 	 .word .L440+1
 6725 0134 71150000 	 .word .L455+1
 6726 0138 BF180000 	 .word .L440+1
 6727 013c BF180000 	 .word .L440+1
 6728 0140 A5100000 	 .word .L456+1
 6729 0144 BF180000 	 .word .L440+1
 6730 0148 BF180000 	 .word .L440+1
 6731 014c BF180000 	 .word .L440+1
 6732 0150 BF180000 	 .word .L440+1
 6733 0154 BF180000 	 .word .L440+1
 6734 0158 BF180000 	 .word .L440+1
 6735 015c BF180000 	 .word .L440+1
 6736 0160 09110000 	 .word .L457+1
 6737 0164 BF180000 	 .word .L440+1
 6738 0168 EB0B0000 	 .word .L458+1
 6739 016c BF180000 	 .word .L440+1
 6740 0170 130D0000 	 .word .L459+1
 6741 0174 BF180000 	 .word .L440+1
 6742 0178 690E0000 	 .word .L460+1
 6743 017c BF180000 	 .word .L440+1
 6744 0180 F90F0000 	 .word .L461+1
 6745 0184 BF180000 	 .word .L440+1
 6746 0188 07120000 	 .word .L462+1
 6747 018c BF180000 	 .word .L440+1
 6748 0190 BF180000 	 .word .L440+1
 6749 0194 BF180000 	 .word .L440+1
 6750 0198 BF180000 	 .word .L440+1
 6751 019c BF180000 	 .word .L440+1
 6752 01a0 BF180000 	 .word .L440+1
 6753 01a4 BF180000 	 .word .L440+1
 6754 01a8 BF180000 	 .word .L440+1
 6755 01ac BF180000 	 .word .L440+1
 6756 01b0 BF180000 	 .word .L440+1
 6757 01b4 BF180000 	 .word .L440+1
 6758 01b8 BF180000 	 .word .L440+1
 6759 01bc BF180000 	 .word .L440+1
 6760 01c0 BF180000 	 .word .L440+1
 6761 01c4 BF180000 	 .word .L440+1
 6762 01c8 BF180000 	 .word .L440+1
 6763 01cc BF180000 	 .word .L440+1
 6764 01d0 BF180000 	 .word .L440+1
 6765 01d4 BF180000 	 .word .L440+1
 6766 01d8 BF180000 	 .word .L440+1
 6767 01dc BF180000 	 .word .L440+1
 6768 01e0 BF180000 	 .word .L440+1
 6769 01e4 BF180000 	 .word .L440+1
 6770 01e8 BF180000 	 .word .L440+1
 6771 01ec BF180000 	 .word .L440+1
 6772 01f0 BF180000 	 .word .L440+1
 6773 01f4 BF180000 	 .word .L440+1
 6774 01f8 BF180000 	 .word .L440+1
 6775 01fc BF180000 	 .word .L440+1
 6776 0200 BF180000 	 .word .L440+1
 6777 0204 BF180000 	 .word .L440+1
 6778 0208 BF180000 	 .word .L440+1
 6779 020c BF180000 	 .word .L440+1
 6780 0210 BF180000 	 .word .L440+1
 6781 0214 BF180000 	 .word .L440+1
 6782 0218 BF180000 	 .word .L440+1
 6783 021c BF180000 	 .word .L440+1
 6784 0220 BF180000 	 .word .L440+1
 6785 0224 BF180000 	 .word .L440+1
 6786 0228 BF180000 	 .word .L440+1
 6787 022c BF180000 	 .word .L440+1
 6788 0230 BF180000 	 .word .L440+1
 6789 0234 BF180000 	 .word .L440+1
 6790 0238 BF180000 	 .word .L440+1
 6791 023c BF180000 	 .word .L440+1
 6792 0240 BF180000 	 .word .L440+1
 6793 0244 BF180000 	 .word .L440+1
 6794 0248 BF180000 	 .word .L440+1
 6795 024c BF180000 	 .word .L440+1
 6796 0250 BF180000 	 .word .L440+1
 6797 0254 BF180000 	 .word .L440+1
 6798 0258 BF180000 	 .word .L440+1
 6799 025c BF180000 	 .word .L440+1
 6800 0260 BF180000 	 .word .L440+1
 6801 0264 BF180000 	 .word .L440+1
 6802 0268 BF180000 	 .word .L440+1
 6803 026c BF180000 	 .word .L440+1
 6804 0270 BF180000 	 .word .L440+1
 6805 0274 BF180000 	 .word .L440+1
 6806 0278 BF180000 	 .word .L440+1
 6807 027c BF180000 	 .word .L440+1
 6808 0280 BF180000 	 .word .L440+1
 6809 0284 BF180000 	 .word .L440+1
 6810 0288 BF180000 	 .word .L440+1
 6811 028c BF180000 	 .word .L440+1
 6812 0290 BF180000 	 .word .L440+1
 6813 0294 BF180000 	 .word .L440+1
 6814 0298 BF180000 	 .word .L440+1
 6815 029c BF180000 	 .word .L440+1
 6816 02a0 BF180000 	 .word .L440+1
 6817 02a4 BF180000 	 .word .L440+1
 6818 02a8 BF180000 	 .word .L440+1
 6819 02ac BF180000 	 .word .L440+1
 6820 02b0 BF180000 	 .word .L440+1
 6821 02b4 BF180000 	 .word .L440+1
 6822 02b8 BF180000 	 .word .L440+1
 6823 02bc BF180000 	 .word .L440+1
 6824 02c0 BF180000 	 .word .L440+1
 6825 02c4 BF180000 	 .word .L440+1
 6826 02c8 BF180000 	 .word .L440+1
 6827 02cc BF180000 	 .word .L440+1
 6828 02d0 BF180000 	 .word .L440+1
 6829 02d4 BF180000 	 .word .L440+1
 6830 02d8 53040000 	 .word .L463+1
 6831 02dc BF180000 	 .word .L440+1
 6832 02e0 BF180000 	 .word .L440+1
 6833 02e4 9B170000 	 .word .L464+1
 6834 02e8 BF180000 	 .word .L440+1
 6835 02ec BF180000 	 .word .L440+1
 6836 02f0 BF180000 	 .word .L440+1
 6837 02f4 BF180000 	 .word .L440+1
 6838 02f8 BF180000 	 .word .L440+1
 6839 02fc BF180000 	 .word .L440+1
 6840 0300 BF180000 	 .word .L440+1
 6841 0304 BF180000 	 .word .L440+1
 6842 0308 BF180000 	 .word .L440+1
 6843 030c BF180000 	 .word .L440+1
 6844 0310 BF180000 	 .word .L440+1
 6845 0314 BF180000 	 .word .L440+1
 6846 0318 BF180000 	 .word .L440+1
 6847 031c C3040000 	 .word .L465+1
 6848 0320 6D120000 	 .word .L466+1
 6849 0324 8D050000 	 .word .L467+1
 6850 0328 BF180000 	 .word .L440+1
 6851 032c 61070000 	 .word .L468+1
 6852 0330 49100000 	 .word .L469+1
 6853 0334 65100000 	 .word .L470+1
 6854 0338 BF180000 	 .word .L440+1
 6855 033c 2D100000 	 .word .L471+1
 6856 0340 BF180000 	 .word .L440+1
 6857 0344 E9030000 	 .word .L472+1
 6858 0348 B1040000 	 .word .L473+1
 6859 034c AD090000 	 .word .L474+1
 6860 0350 BF180000 	 .word .L440+1
 6861 0354 6B090000 	 .word .L475+1
 6862 0358 BF180000 	 .word .L440+1
 6863 035c BF180000 	 .word .L440+1
 6864 0360 310B0000 	 .word .L476+1
 6865 0364 650B0000 	 .word .L477+1
 6866 0368 A90B0000 	 .word .L478+1
 6867 036c B70B0000 	 .word .L479+1
 6868 0370 BF180000 	 .word .L440+1
 6869 0374 D3080000 	 .word .L480+1
 6870 0378 07090000 	 .word .L481+1
 6871 037c 4B090000 	 .word .L482+1
 6872 0380 BF180000 	 .word .L440+1
 6873 0384 BF180000 	 .word .L440+1
 6874 0388 BF180000 	 .word .L440+1
 6875 038c BF180000 	 .word .L440+1
 6876 0390 BF180000 	 .word .L440+1
 6877 0394 BF180000 	 .word .L440+1
 6878 0398 BF180000 	 .word .L440+1
 6879 039c BF180000 	 .word .L440+1
 6880 03a0 BF180000 	 .word .L440+1
 6881 03a4 BF180000 	 .word .L440+1
 6882 03a8 BF180000 	 .word .L440+1
 6883 03ac BF180000 	 .word .L440+1
 6884 03b0 BF180000 	 .word .L440+1
 6885 03b4 BF180000 	 .word .L440+1
 6886 03b8 27050000 	 .word .L483+1
 6887 03bc BF180000 	 .word .L440+1
 6888 03c0 BF180000 	 .word .L440+1
 6889 03c4 670A0000 	 .word .L484+1
 6890 03c8 BF180000 	 .word .L440+1
 6891 03cc BF180000 	 .word .L440+1
 6892 03d0 BF180000 	 .word .L440+1
 6893 03d4 3B170000 	 .word .L485+1
 6894 03d8 BF180000 	 .word .L440+1
 6895 03dc AB170000 	 .word .L486+1
 6896 03e0 8D180000 	 .word .L487+1
 6897 03e4 87100000 	 .word .L488+1
 6898              	 .p2align 1
 6899              	.L472:
 6900              	.LBB45:
1511:../cleanflight/src/main/interface/msp.c ****     case MSP_SELECT_SETTING:
1512:../cleanflight/src/main/interface/msp.c ****         value = sbufReadU8(src);
 6901              	 .loc 26 1512 0
 6902 03e8 3868     	 ldr r0,[r7]
 6903 03ea FFF7FEFF 	 bl sbufReadU8
 6904 03ee 0346     	 mov r3,r0
 6905 03f0 87F8D730 	 strb r3,[r7,#215]
1513:../cleanflight/src/main/interface/msp.c ****         if ((value & RATEPROFILE_MASK) == 0) {
 6906              	 .loc 26 1513 0
 6907 03f4 97F8D730 	 ldrb r3,[r7,#215]
 6908 03f8 5BB2     	 sxtb r3,r3
 6909 03fa 002B     	 cmp r3,#0
 6910 03fc 13DB     	 blt .L489
1514:../cleanflight/src/main/interface/msp.c ****             if (!ARMING_FLAG(ARMED)) {
 6911              	 .loc 26 1514 0
 6912 03fe D54B     	 ldr r3,.L578
 6913 0400 1B78     	 ldrb r3,[r3]
 6914 0402 03F00103 	 and r3,r3,#1
 6915 0406 002B     	 cmp r3,#0
 6916 0408 21D1     	 bne .L492
1515:../cleanflight/src/main/interface/msp.c ****                 if (value >= MAX_PROFILE_COUNT) {
 6917              	 .loc 26 1515 0
 6918 040a 97F8D730 	 ldrb r3,[r7,#215]
 6919 040e 022B     	 cmp r3,#2
 6920 0410 02D9     	 bls .L491
1516:../cleanflight/src/main/interface/msp.c ****                     value = 0;
 6921              	 .loc 26 1516 0
 6922 0412 0023     	 movs r3,#0
 6923 0414 87F8D730 	 strb r3,[r7,#215]
 6924              	.L491:
1517:../cleanflight/src/main/interface/msp.c ****                 }
1518:../cleanflight/src/main/interface/msp.c ****                 changePidProfile(value);
 6925              	 .loc 26 1518 0
 6926 0418 97F8D730 	 ldrb r3,[r7,#215]
 6927 041c 1846     	 mov r0,r3
 6928 041e FFF7FEFF 	 bl changePidProfile
1519:../cleanflight/src/main/interface/msp.c ****             }
1520:../cleanflight/src/main/interface/msp.c ****         } else {
1521:../cleanflight/src/main/interface/msp.c ****             value = value & ~RATEPROFILE_MASK;
1522:../cleanflight/src/main/interface/msp.c **** 
1523:../cleanflight/src/main/interface/msp.c ****             if (value >= CONTROL_RATE_PROFILE_COUNT) {
1524:../cleanflight/src/main/interface/msp.c ****                 value = 0;
1525:../cleanflight/src/main/interface/msp.c ****             }
1526:../cleanflight/src/main/interface/msp.c ****             changeControlRateProfile(value);
1527:../cleanflight/src/main/interface/msp.c ****         }
1528:../cleanflight/src/main/interface/msp.c ****         break;
 6929              	 .loc 26 1528 0
 6930 0422 01F04FBA 	 b .L494
 6931              	.L489:
1521:../cleanflight/src/main/interface/msp.c **** 
 6932              	 .loc 26 1521 0
 6933 0426 97F8D730 	 ldrb r3,[r7,#215]
 6934 042a 03F07F03 	 and r3,r3,#127
 6935 042e 87F8D730 	 strb r3,[r7,#215]
1523:../cleanflight/src/main/interface/msp.c ****                 value = 0;
 6936              	 .loc 26 1523 0
 6937 0432 97F8D730 	 ldrb r3,[r7,#215]
 6938 0436 052B     	 cmp r3,#5
 6939 0438 02D9     	 bls .L493
1524:../cleanflight/src/main/interface/msp.c ****             }
 6940              	 .loc 26 1524 0
 6941 043a 0023     	 movs r3,#0
 6942 043c 87F8D730 	 strb r3,[r7,#215]
 6943              	.L493:
1526:../cleanflight/src/main/interface/msp.c ****         }
 6944              	 .loc 26 1526 0
 6945 0440 97F8D730 	 ldrb r3,[r7,#215]
 6946 0444 1846     	 mov r0,r3
 6947 0446 FFF7FEFF 	 bl changeControlRateProfile
 6948              	 .loc 26 1528 0
 6949 044a 01F03BBA 	 b .L494
 6950              	.L492:
 6951              	 .loc 26 1528 0 is_stmt 0 discriminator 1
 6952 044e 01F039BA 	 b .L494
 6953              	.L463:
1529:../cleanflight/src/main/interface/msp.c **** 
1530:../cleanflight/src/main/interface/msp.c ****     case MSP_COPY_PROFILE:
1531:../cleanflight/src/main/interface/msp.c ****         value = sbufReadU8(src);        // 0 = pid profile, 1 = control rate profile
 6954              	 .loc 26 1531 0 is_stmt 1
 6955 0452 3868     	 ldr r0,[r7]
 6956 0454 FFF7FEFF 	 bl sbufReadU8
 6957 0458 0346     	 mov r3,r0
 6958 045a 87F8D730 	 strb r3,[r7,#215]
1532:../cleanflight/src/main/interface/msp.c ****         uint8_t dstProfileIndex = sbufReadU8(src);
 6959              	 .loc 26 1532 0
 6960 045e 3868     	 ldr r0,[r7]
 6961 0460 FFF7FEFF 	 bl sbufReadU8
 6962 0464 0346     	 mov r3,r0
 6963 0466 87F87B30 	 strb r3,[r7,#123]
1533:../cleanflight/src/main/interface/msp.c ****         uint8_t srcProfileIndex = sbufReadU8(src);
 6964              	 .loc 26 1533 0
 6965 046a 3868     	 ldr r0,[r7]
 6966 046c FFF7FEFF 	 bl sbufReadU8
 6967 0470 0346     	 mov r3,r0
 6968 0472 87F87A30 	 strb r3,[r7,#122]
1534:../cleanflight/src/main/interface/msp.c ****         if (value == 0) {
 6969              	 .loc 26 1534 0
 6970 0476 97F8D730 	 ldrb r3,[r7,#215]
 6971 047a 002B     	 cmp r3,#0
 6972 047c 08D1     	 bne .L495
1535:../cleanflight/src/main/interface/msp.c ****             pidCopyProfile(dstProfileIndex, srcProfileIndex);
 6973              	 .loc 26 1535 0
 6974 047e 97F87B20 	 ldrb r2,[r7,#123]
 6975 0482 97F87A30 	 ldrb r3,[r7,#122]
 6976 0486 1046     	 mov r0,r2
 6977 0488 1946     	 mov r1,r3
 6978 048a FFF7FEFF 	 bl pidCopyProfile
 6979 048e 0DE0     	 b .L496
 6980              	.L495:
1536:../cleanflight/src/main/interface/msp.c ****         }
1537:../cleanflight/src/main/interface/msp.c ****         else if (value == 1) {
 6981              	 .loc 26 1537 0
 6982 0490 97F8D730 	 ldrb r3,[r7,#215]
 6983 0494 012B     	 cmp r3,#1
 6984 0496 09D1     	 bne .L496
1538:../cleanflight/src/main/interface/msp.c ****             copyControlRateProfile(dstProfileIndex, srcProfileIndex);
 6985              	 .loc 26 1538 0
 6986 0498 97F87B20 	 ldrb r2,[r7,#123]
 6987 049c 97F87A30 	 ldrb r3,[r7,#122]
 6988 04a0 1046     	 mov r0,r2
 6989 04a2 1946     	 mov r1,r3
 6990 04a4 FFF7FEFF 	 bl copyControlRateProfile
1539:../cleanflight/src/main/interface/msp.c ****         }
1540:../cleanflight/src/main/interface/msp.c ****         break;
 6991              	 .loc 26 1540 0
 6992 04a8 01F00CBA 	 b .L494
 6993              	.L496:
 6994 04ac 01F00ABA 	 b .L494
 6995              	.L473:
1541:../cleanflight/src/main/interface/msp.c **** 
1542:../cleanflight/src/main/interface/msp.c **** #if defined(USE_GPS) || defined(USE_MAG)
1543:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_HEADING:
1544:../cleanflight/src/main/interface/msp.c ****         magHold = sbufReadU16(src);
 6996              	 .loc 26 1544 0
 6997 04b0 3868     	 ldr r0,[r7]
 6998 04b2 FFF7FEFF 	 bl sbufReadU16
 6999 04b6 0346     	 mov r3,r0
 7000 04b8 9AB2     	 uxth r2,r3
 7001 04ba A74B     	 ldr r3,.L578+4
 7002 04bc 1A80     	 strh r2,[r3]
1545:../cleanflight/src/main/interface/msp.c ****         break;
 7003              	 .loc 26 1545 0
 7004 04be 01F001BA 	 b .L494
 7005              	.L465:
 7006              	.LBB46:
1546:../cleanflight/src/main/interface/msp.c **** #endif
1547:../cleanflight/src/main/interface/msp.c **** 
1548:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RAW_RC:
1549:../cleanflight/src/main/interface/msp.c **** #ifdef USE_RX_MSP
1550:../cleanflight/src/main/interface/msp.c ****         {
1551:../cleanflight/src/main/interface/msp.c ****             uint8_t channelCount = dataSize / sizeof(uint16_t);
 7007              	 .loc 26 1551 0
 7008 04c2 D7F8B030 	 ldr r3,[r7,#176]
 7009 04c6 5B08     	 lsrs r3,r3,#1
 7010 04c8 87F8AF30 	 strb r3,[r7,#175]
1552:../cleanflight/src/main/interface/msp.c ****             if (channelCount > MAX_SUPPORTED_RC_CHANNEL_COUNT) {
 7011              	 .loc 26 1552 0
 7012 04cc 97F8AF30 	 ldrb r3,[r7,#175]
 7013 04d0 122B     	 cmp r3,#18
 7014 04d2 02D9     	 bls .L497
1553:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
 7015              	 .loc 26 1553 0
 7016 04d4 FF23     	 movs r3,#255
 7017 04d6 01F0F6B9 	 b .L498
 7018              	.L497:
 7019              	.LBB47:
 7020              	.LBB48:
1554:../cleanflight/src/main/interface/msp.c ****             } else {
1555:../cleanflight/src/main/interface/msp.c ****                 uint16_t frame[MAX_SUPPORTED_RC_CHANNEL_COUNT];
1556:../cleanflight/src/main/interface/msp.c ****                 for (int i = 0; i < channelCount; i++) {
 7021              	 .loc 26 1556 0
 7022 04da 0023     	 movs r3,#0
 7023 04dc C7F8D030 	 str r3,[r7,#208]
 7024 04e0 11E0     	 b .L499
 7025              	.L500:
1557:../cleanflight/src/main/interface/msp.c ****                     frame[i] = sbufReadU16(src);
 7026              	 .loc 26 1557 0 discriminator 3
 7027 04e2 3868     	 ldr r0,[r7]
 7028 04e4 FFF7FEFF 	 bl sbufReadU16
 7029 04e8 0346     	 mov r3,r0
 7030 04ea 1A46     	 mov r2,r3
 7031 04ec D7F8D030 	 ldr r3,[r7,#208]
 7032 04f0 5B00     	 lsls r3,r3,#1
 7033 04f2 07F1D801 	 add r1,r7,#216
 7034 04f6 0B44     	 add r3,r3,r1
 7035 04f8 23F8CC2C 	 strh r2,[r3,#-204]
1556:../cleanflight/src/main/interface/msp.c ****                     frame[i] = sbufReadU16(src);
 7036              	 .loc 26 1556 0 discriminator 3
 7037 04fc D7F8D030 	 ldr r3,[r7,#208]
 7038 0500 0133     	 adds r3,r3,#1
 7039 0502 C7F8D030 	 str r3,[r7,#208]
 7040              	.L499:
1556:../cleanflight/src/main/interface/msp.c ****                     frame[i] = sbufReadU16(src);
 7041              	 .loc 26 1556 0 is_stmt 0 discriminator 1
 7042 0506 97F8AF20 	 ldrb r2,[r7,#175]
 7043 050a D7F8D030 	 ldr r3,[r7,#208]
 7044 050e 9A42     	 cmp r2,r3
 7045 0510 E7DC     	 bgt .L500
 7046              	.LBE48:
1558:../cleanflight/src/main/interface/msp.c ****                 }
1559:../cleanflight/src/main/interface/msp.c ****                 rxMspFrameReceive(frame, channelCount);
 7047              	 .loc 26 1559 0 is_stmt 1
 7048 0512 97F8AF30 	 ldrb r3,[r7,#175]
 7049 0516 07F10C02 	 add r2,r7,#12
 7050 051a 1046     	 mov r0,r2
 7051 051c 1946     	 mov r1,r3
 7052 051e FFF7FEFF 	 bl rxMspFrameReceive
 7053              	.LBE47:
 7054              	.LBE46:
1560:../cleanflight/src/main/interface/msp.c ****             }
1561:../cleanflight/src/main/interface/msp.c ****         }
1562:../cleanflight/src/main/interface/msp.c **** #endif
1563:../cleanflight/src/main/interface/msp.c ****         break;
 7055              	 .loc 26 1563 0
 7056 0522 01F0CFB9 	 b .L494
 7057              	.L483:
1564:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_ACC_TRIM:
1565:../cleanflight/src/main/interface/msp.c ****         accelerometerConfigMutable()->accelerometerTrims.values.pitch = sbufReadU16(src);
 7058              	 .loc 26 1565 0
 7059 0526 FFF7FEFF 	 bl accelerometerConfigMutable
 7060 052a 0446     	 mov r4,r0
 7061 052c 3868     	 ldr r0,[r7]
 7062 052e FFF7FEFF 	 bl sbufReadU16
 7063 0532 0346     	 mov r3,r0
 7064 0534 9BB2     	 uxth r3,r3
 7065 0536 A4F80D30 	 strh r3,[r4,#13]
1566:../cleanflight/src/main/interface/msp.c ****         accelerometerConfigMutable()->accelerometerTrims.values.roll  = sbufReadU16(src);
 7066              	 .loc 26 1566 0
 7067 053a FFF7FEFF 	 bl accelerometerConfigMutable
 7068 053e 0446     	 mov r4,r0
 7069 0540 3868     	 ldr r0,[r7]
 7070 0542 FFF7FEFF 	 bl sbufReadU16
 7071 0546 0346     	 mov r3,r0
 7072 0548 9BB2     	 uxth r3,r3
 7073 054a A4F80B30 	 strh r3,[r4,#11]
1567:../cleanflight/src/main/interface/msp.c ****         break;
 7074              	 .loc 26 1567 0
 7075 054e 01F0B9B9 	 b .L494
 7076              	.L452:
1568:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_ARMING_CONFIG:
1569:../cleanflight/src/main/interface/msp.c ****         armingConfigMutable()->auto_disarm_delay = sbufReadU8(src);
 7077              	 .loc 26 1569 0
 7078 0552 FFF7FEFF 	 bl armingConfigMutable
 7079 0556 0446     	 mov r4,r0
 7080 0558 3868     	 ldr r0,[r7]
 7081 055a FFF7FEFF 	 bl sbufReadU8
 7082 055e 0346     	 mov r3,r0
 7083 0560 6370     	 strb r3,[r4,#1]
1570:../cleanflight/src/main/interface/msp.c ****         sbufReadU8(src); // reserved
 7084              	 .loc 26 1570 0
 7085 0562 3868     	 ldr r0,[r7]
 7086 0564 FFF7FEFF 	 bl sbufReadU8
1571:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src)) {
 7087              	 .loc 26 1571 0
 7088 0568 3868     	 ldr r0,[r7]
 7089 056a FFF7FEFF 	 bl sbufBytesRemaining
 7090 056e 0346     	 mov r3,r0
 7091 0570 002B     	 cmp r3,#0
 7092 0572 09D0     	 beq .L501
1572:../cleanflight/src/main/interface/msp.c ****           imuConfigMutable()->small_angle = sbufReadU8(src);
 7093              	 .loc 26 1572 0
 7094 0574 FFF7FEFF 	 bl imuConfigMutable
 7095 0578 0446     	 mov r4,r0
 7096 057a 3868     	 ldr r0,[r7]
 7097 057c FFF7FEFF 	 bl sbufReadU8
 7098 0580 0346     	 mov r3,r0
 7099 0582 2371     	 strb r3,[r4,#4]
1573:../cleanflight/src/main/interface/msp.c ****         }
1574:../cleanflight/src/main/interface/msp.c ****         break;
 7100              	 .loc 26 1574 0
 7101 0584 01F09EB9 	 b .L494
 7102              	.L501:
 7103 0588 01F09CB9 	 b .L494
 7104              	.L467:
 7105              	.LBB49:
1575:../cleanflight/src/main/interface/msp.c **** 
1576:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_PID_CONTROLLER:
1577:../cleanflight/src/main/interface/msp.c ****         break;
1578:../cleanflight/src/main/interface/msp.c **** 
1579:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_PID:
1580:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < PID_ITEM_COUNT; i++) {
 7106              	 .loc 26 1580 0
 7107 058c 0023     	 movs r3,#0
 7108 058e C7F8CC30 	 str r3,[r7,#204]
 7109 0592 34E0     	 b .L502
 7110              	.L503:
1581:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->pid[i].P = sbufReadU8(src);
 7111              	 .loc 26 1581 0 discriminator 3
 7112 0594 714B     	 ldr r3,.L578+8
 7113 0596 1C68     	 ldr r4,[r3]
 7114 0598 3868     	 ldr r0,[r7]
 7115 059a FFF7FEFF 	 bl sbufReadU8
 7116 059e 0346     	 mov r3,r0
 7117 05a0 1946     	 mov r1,r3
 7118 05a2 D7F8CC20 	 ldr r2,[r7,#204]
 7119 05a6 1346     	 mov r3,r2
 7120 05a8 9B00     	 lsls r3,r3,#2
 7121 05aa 1344     	 add r3,r3,r2
 7122 05ac 2344     	 add r3,r3,r4
 7123 05ae 0833     	 adds r3,r3,#8
 7124 05b0 0A46     	 mov r2,r1
 7125 05b2 1A70     	 strb r2,[r3]
1582:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->pid[i].I = sbufReadU8(src);
 7126              	 .loc 26 1582 0 discriminator 3
 7127 05b4 694B     	 ldr r3,.L578+8
 7128 05b6 1C68     	 ldr r4,[r3]
 7129 05b8 3868     	 ldr r0,[r7]
 7130 05ba FFF7FEFF 	 bl sbufReadU8
 7131 05be 0346     	 mov r3,r0
 7132 05c0 1946     	 mov r1,r3
 7133 05c2 D7F8CC20 	 ldr r2,[r7,#204]
 7134 05c6 1346     	 mov r3,r2
 7135 05c8 9B00     	 lsls r3,r3,#2
 7136 05ca 1344     	 add r3,r3,r2
 7137 05cc 2344     	 add r3,r3,r4
 7138 05ce 0833     	 adds r3,r3,#8
 7139 05d0 0A46     	 mov r2,r1
 7140 05d2 5A70     	 strb r2,[r3,#1]
1583:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->pid[i].D = sbufReadU8(src);
 7141              	 .loc 26 1583 0 discriminator 3
 7142 05d4 614B     	 ldr r3,.L578+8
 7143 05d6 1C68     	 ldr r4,[r3]
 7144 05d8 3868     	 ldr r0,[r7]
 7145 05da FFF7FEFF 	 bl sbufReadU8
 7146 05de 0346     	 mov r3,r0
 7147 05e0 1946     	 mov r1,r3
 7148 05e2 D7F8CC20 	 ldr r2,[r7,#204]
 7149 05e6 1346     	 mov r3,r2
 7150 05e8 9B00     	 lsls r3,r3,#2
 7151 05ea 1344     	 add r3,r3,r2
 7152 05ec 2344     	 add r3,r3,r4
 7153 05ee 0833     	 adds r3,r3,#8
 7154 05f0 0A46     	 mov r2,r1
 7155 05f2 9A70     	 strb r2,[r3,#2]
1580:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->pid[i].P = sbufReadU8(src);
 7156              	 .loc 26 1580 0 discriminator 3
 7157 05f4 D7F8CC30 	 ldr r3,[r7,#204]
 7158 05f8 0133     	 adds r3,r3,#1
 7159 05fa C7F8CC30 	 str r3,[r7,#204]
 7160              	.L502:
1580:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->pid[i].P = sbufReadU8(src);
 7161              	 .loc 26 1580 0 is_stmt 0 discriminator 1
 7162 05fe D7F8CC30 	 ldr r3,[r7,#204]
 7163 0602 042B     	 cmp r3,#4
 7164 0604 C6DD     	 ble .L503
 7165              	.LBE49:
1584:../cleanflight/src/main/interface/msp.c ****         }
1585:../cleanflight/src/main/interface/msp.c ****         pidInitConfig(currentPidProfile);
 7166              	 .loc 26 1585 0 is_stmt 1
 7167 0606 554B     	 ldr r3,.L578+8
 7168 0608 1B68     	 ldr r3,[r3]
 7169 060a 1846     	 mov r0,r3
 7170 060c FFF7FEFF 	 bl pidInitConfig
1586:../cleanflight/src/main/interface/msp.c ****         break;
 7171              	 .loc 26 1586 0
 7172 0610 01F058B9 	 b .L494
 7173              	.L443:
1587:../cleanflight/src/main/interface/msp.c **** 
1588:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_MODE_RANGE:
1589:../cleanflight/src/main/interface/msp.c ****         i = sbufReadU8(src);
 7174              	 .loc 26 1589 0
 7175 0614 3868     	 ldr r0,[r7]
 7176 0616 FFF7FEFF 	 bl sbufReadU8
 7177 061a 0346     	 mov r3,r0
 7178 061c C7F8A830 	 str r3,[r7,#168]
1590:../cleanflight/src/main/interface/msp.c ****         if (i < MAX_MODE_ACTIVATION_CONDITION_COUNT) {
 7179              	 .loc 26 1590 0
 7180 0620 D7F8A830 	 ldr r3,[r7,#168]
 7181 0624 132B     	 cmp r3,#19
 7182 0626 40D8     	 bhi .L504
 7183              	.LBB50:
1591:../cleanflight/src/main/interface/msp.c ****             modeActivationCondition_t *mac = modeActivationConditionsMutable(i);
 7184              	 .loc 26 1591 0
 7185 0628 D7F8A830 	 ldr r3,[r7,#168]
 7186 062c 1846     	 mov r0,r3
 7187 062e FFF7FEFF 	 bl modeActivationConditionsMutable
 7188 0632 C7F8A400 	 str r0,[r7,#164]
1592:../cleanflight/src/main/interface/msp.c ****             i = sbufReadU8(src);
 7189              	 .loc 26 1592 0
 7190 0636 3868     	 ldr r0,[r7]
 7191 0638 FFF7FEFF 	 bl sbufReadU8
 7192 063c 0346     	 mov r3,r0
 7193 063e C7F8A830 	 str r3,[r7,#168]
1593:../cleanflight/src/main/interface/msp.c ****             const box_t *box = findBoxByPermanentId(i);
 7194              	 .loc 26 1593 0
 7195 0642 D7F8A830 	 ldr r3,[r7,#168]
 7196 0646 DBB2     	 uxtb r3,r3
 7197 0648 1846     	 mov r0,r3
 7198 064a FFF7FEFF 	 bl findBoxByPermanentId
 7199 064e C7F8A000 	 str r0,[r7,#160]
1594:../cleanflight/src/main/interface/msp.c ****             if (box) {
 7200              	 .loc 26 1594 0
 7201 0652 D7F8A030 	 ldr r3,[r7,#160]
 7202 0656 002B     	 cmp r3,#0
 7203 0658 24D0     	 beq .L505
1595:../cleanflight/src/main/interface/msp.c ****                 mac->modeId = box->boxId;
 7204              	 .loc 26 1595 0
 7205 065a D7F8A030 	 ldr r3,[r7,#160]
 7206 065e 1A78     	 ldrb r2,[r3]
 7207 0660 D7F8A430 	 ldr r3,[r7,#164]
 7208 0664 1A70     	 strb r2,[r3]
1596:../cleanflight/src/main/interface/msp.c ****                 mac->auxChannelIndex = sbufReadU8(src);
 7209              	 .loc 26 1596 0
 7210 0666 3868     	 ldr r0,[r7]
 7211 0668 FFF7FEFF 	 bl sbufReadU8
 7212 066c 0346     	 mov r3,r0
 7213 066e 1A46     	 mov r2,r3
 7214 0670 D7F8A430 	 ldr r3,[r7,#164]
 7215 0674 5A70     	 strb r2,[r3,#1]
1597:../cleanflight/src/main/interface/msp.c ****                 mac->range.startStep = sbufReadU8(src);
 7216              	 .loc 26 1597 0
 7217 0676 3868     	 ldr r0,[r7]
 7218 0678 FFF7FEFF 	 bl sbufReadU8
 7219 067c 0346     	 mov r3,r0
 7220 067e 1A46     	 mov r2,r3
 7221 0680 D7F8A430 	 ldr r3,[r7,#164]
 7222 0684 9A70     	 strb r2,[r3,#2]
1598:../cleanflight/src/main/interface/msp.c ****                 mac->range.endStep = sbufReadU8(src);
 7223              	 .loc 26 1598 0
 7224 0686 3868     	 ldr r0,[r7]
 7225 0688 FFF7FEFF 	 bl sbufReadU8
 7226 068c 0346     	 mov r3,r0
 7227 068e 1A46     	 mov r2,r3
 7228 0690 D7F8A430 	 ldr r3,[r7,#164]
 7229 0694 DA70     	 strb r2,[r3,#3]
1599:../cleanflight/src/main/interface/msp.c **** 
1600:../cleanflight/src/main/interface/msp.c ****                 useRcControlsConfig(currentPidProfile);
 7230              	 .loc 26 1600 0
 7231 0696 314B     	 ldr r3,.L578+8
 7232 0698 1B68     	 ldr r3,[r3]
 7233 069a 1846     	 mov r0,r3
 7234 069c FFF7FEFF 	 bl useRcControlsConfig
 7235              	.LBE50:
1601:../cleanflight/src/main/interface/msp.c ****             } else {
1602:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
1603:../cleanflight/src/main/interface/msp.c ****             }
1604:../cleanflight/src/main/interface/msp.c ****         } else {
1605:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
1606:../cleanflight/src/main/interface/msp.c ****         }
1607:../cleanflight/src/main/interface/msp.c ****         break;
 7236              	 .loc 26 1607 0
 7237 06a0 01F010B9 	 b .L494
 7238              	.L505:
 7239              	.LBB51:
1602:../cleanflight/src/main/interface/msp.c ****             }
 7240              	 .loc 26 1602 0
 7241 06a4 FF23     	 movs r3,#255
 7242 06a6 01F00EB9 	 b .L498
 7243              	.L504:
 7244              	.LBE51:
1605:../cleanflight/src/main/interface/msp.c ****         }
 7245              	 .loc 26 1605 0
 7246 06aa FF23     	 movs r3,#255
 7247 06ac 01F00BB9 	 b .L498
 7248              	.L449:
1608:../cleanflight/src/main/interface/msp.c **** 
1609:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_ADJUSTMENT_RANGE:
1610:../cleanflight/src/main/interface/msp.c ****         i = sbufReadU8(src);
 7249              	 .loc 26 1610 0
 7250 06b0 3868     	 ldr r0,[r7]
 7251 06b2 FFF7FEFF 	 bl sbufReadU8
 7252 06b6 0346     	 mov r3,r0
 7253 06b8 C7F8A830 	 str r3,[r7,#168]
1611:../cleanflight/src/main/interface/msp.c ****         if (i < MAX_ADJUSTMENT_RANGE_COUNT) {
 7254              	 .loc 26 1611 0
 7255 06bc D7F8A830 	 ldr r3,[r7,#168]
 7256 06c0 0E2B     	 cmp r3,#14
 7257 06c2 43D8     	 bhi .L508
 7258              	.LBB52:
1612:../cleanflight/src/main/interface/msp.c ****             adjustmentRange_t *adjRange = adjustmentRangesMutable(i);
 7259              	 .loc 26 1612 0
 7260 06c4 D7F8A830 	 ldr r3,[r7,#168]
 7261 06c8 1846     	 mov r0,r3
 7262 06ca FFF7FEFF 	 bl adjustmentRangesMutable
 7263 06ce C7F89C00 	 str r0,[r7,#156]
1613:../cleanflight/src/main/interface/msp.c ****             i = sbufReadU8(src);
 7264              	 .loc 26 1613 0
 7265 06d2 3868     	 ldr r0,[r7]
 7266 06d4 FFF7FEFF 	 bl sbufReadU8
 7267 06d8 0346     	 mov r3,r0
 7268 06da C7F8A830 	 str r3,[r7,#168]
1614:../cleanflight/src/main/interface/msp.c ****             if (i < MAX_SIMULTANEOUS_ADJUSTMENT_COUNT) {
 7269              	 .loc 26 1614 0
 7270 06de D7F8A830 	 ldr r3,[r7,#168]
 7271 06e2 032B     	 cmp r3,#3
 7272 06e4 2FD8     	 bhi .L509
1615:../cleanflight/src/main/interface/msp.c ****                 adjRange->adjustmentIndex = i;
 7273              	 .loc 26 1615 0
 7274 06e6 D7F8A830 	 ldr r3,[r7,#168]
 7275 06ea DAB2     	 uxtb r2,r3
 7276 06ec D7F89C30 	 ldr r3,[r7,#156]
 7277 06f0 5A71     	 strb r2,[r3,#5]
1616:../cleanflight/src/main/interface/msp.c ****                 adjRange->auxChannelIndex = sbufReadU8(src);
 7278              	 .loc 26 1616 0
 7279 06f2 3868     	 ldr r0,[r7]
 7280 06f4 FFF7FEFF 	 bl sbufReadU8
 7281 06f8 0346     	 mov r3,r0
 7282 06fa 1A46     	 mov r2,r3
 7283 06fc D7F89C30 	 ldr r3,[r7,#156]
 7284 0700 1A70     	 strb r2,[r3]
1617:../cleanflight/src/main/interface/msp.c ****                 adjRange->range.startStep = sbufReadU8(src);
 7285              	 .loc 26 1617 0
 7286 0702 3868     	 ldr r0,[r7]
 7287 0704 FFF7FEFF 	 bl sbufReadU8
 7288 0708 0346     	 mov r3,r0
 7289 070a 1A46     	 mov r2,r3
 7290 070c D7F89C30 	 ldr r3,[r7,#156]
 7291 0710 5A70     	 strb r2,[r3,#1]
1618:../cleanflight/src/main/interface/msp.c ****                 adjRange->range.endStep = sbufReadU8(src);
 7292              	 .loc 26 1618 0
 7293 0712 3868     	 ldr r0,[r7]
 7294 0714 FFF7FEFF 	 bl sbufReadU8
 7295 0718 0346     	 mov r3,r0
 7296 071a 1A46     	 mov r2,r3
 7297 071c D7F89C30 	 ldr r3,[r7,#156]
 7298 0720 9A70     	 strb r2,[r3,#2]
1619:../cleanflight/src/main/interface/msp.c ****                 adjRange->adjustmentFunction = sbufReadU8(src);
 7299              	 .loc 26 1619 0
 7300 0722 3868     	 ldr r0,[r7]
 7301 0724 FFF7FEFF 	 bl sbufReadU8
 7302 0728 0346     	 mov r3,r0
 7303 072a 1A46     	 mov r2,r3
 7304 072c D7F89C30 	 ldr r3,[r7,#156]
 7305 0730 DA70     	 strb r2,[r3,#3]
1620:../cleanflight/src/main/interface/msp.c ****                 adjRange->auxSwitchChannelIndex = sbufReadU8(src);
 7306              	 .loc 26 1620 0
 7307 0732 3868     	 ldr r0,[r7]
 7308 0734 FFF7FEFF 	 bl sbufReadU8
 7309 0738 0346     	 mov r3,r0
 7310 073a 1A46     	 mov r2,r3
 7311 073c D7F89C30 	 ldr r3,[r7,#156]
 7312 0740 1A71     	 strb r2,[r3,#4]
 7313              	.LBE52:
1621:../cleanflight/src/main/interface/msp.c ****             } else {
1622:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
1623:../cleanflight/src/main/interface/msp.c ****             }
1624:../cleanflight/src/main/interface/msp.c ****         } else {
1625:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
1626:../cleanflight/src/main/interface/msp.c ****         }
1627:../cleanflight/src/main/interface/msp.c ****         break;
 7314              	 .loc 26 1627 0
 7315 0742 01F0BFB8 	 b .L494
 7316              	.L509:
 7317              	.LBB53:
1622:../cleanflight/src/main/interface/msp.c ****             }
 7318              	 .loc 26 1622 0
 7319 0746 FF23     	 movs r3,#255
 7320 0748 01F0BDB8 	 b .L498
 7321              	.L508:
 7322              	.LBE53:
1625:../cleanflight/src/main/interface/msp.c ****         }
 7323              	 .loc 26 1625 0
 7324 074c FF23     	 movs r3,#255
 7325 074e 01F0BAB8 	 b .L498
 7326              	.L579:
 7327 0752 00BF     	 .align 2
 7328              	.L578:
 7329 0754 00000000 	 .word armingFlags
 7330 0758 00000000 	 .word magHold
 7331 075c 00000000 	 .word currentPidProfile
 7332              	.L468:
1628:../cleanflight/src/main/interface/msp.c **** 
1629:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RC_TUNING:
1630:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 10) {
 7333              	 .loc 26 1630 0
 7334 0760 3868     	 ldr r0,[r7]
 7335 0762 FFF7FEFF 	 bl sbufBytesRemaining
 7336 0766 0346     	 mov r3,r0
 7337 0768 092B     	 cmp r3,#9
 7338 076a 40F3AF80 	 ble .L512
1631:../cleanflight/src/main/interface/msp.c ****             value = sbufReadU8(src);
 7339              	 .loc 26 1631 0
 7340 076e 3868     	 ldr r0,[r7]
 7341 0770 FFF7FEFF 	 bl sbufReadU8
 7342 0774 0346     	 mov r3,r0
 7343 0776 87F8D730 	 strb r3,[r7,#215]
1632:../cleanflight/src/main/interface/msp.c ****             if (currentControlRateProfile->rcRates[FD_PITCH] == currentControlRateProfile->rcRates[
 7344              	 .loc 26 1632 0
 7345 077a C14B     	 ldr r3,.L580
 7346 077c 1B68     	 ldr r3,[r3]
 7347 077e 1A79     	 ldrb r2,[r3,#4]
 7348 0780 BF4B     	 ldr r3,.L580
 7349 0782 1B68     	 ldr r3,[r3]
 7350 0784 DB78     	 ldrb r3,[r3,#3]
 7351 0786 9A42     	 cmp r2,r3
 7352 0788 04D1     	 bne .L513
1633:../cleanflight/src/main/interface/msp.c ****                 currentControlRateProfile->rcRates[FD_PITCH] = value;
 7353              	 .loc 26 1633 0
 7354 078a BD4B     	 ldr r3,.L580
 7355 078c 1B68     	 ldr r3,[r3]
 7356 078e 97F8D720 	 ldrb r2,[r7,#215]
 7357 0792 1A71     	 strb r2,[r3,#4]
 7358              	.L513:
1634:../cleanflight/src/main/interface/msp.c ****             }
1635:../cleanflight/src/main/interface/msp.c ****             currentControlRateProfile->rcRates[FD_ROLL] = value;
 7359              	 .loc 26 1635 0
 7360 0794 BA4B     	 ldr r3,.L580
 7361 0796 1B68     	 ldr r3,[r3]
 7362 0798 97F8D720 	 ldrb r2,[r7,#215]
 7363 079c DA70     	 strb r2,[r3,#3]
1636:../cleanflight/src/main/interface/msp.c **** 
1637:../cleanflight/src/main/interface/msp.c ****             value = sbufReadU8(src);
 7364              	 .loc 26 1637 0
 7365 079e 3868     	 ldr r0,[r7]
 7366 07a0 FFF7FEFF 	 bl sbufReadU8
 7367 07a4 0346     	 mov r3,r0
 7368 07a6 87F8D730 	 strb r3,[r7,#215]
1638:../cleanflight/src/main/interface/msp.c ****             if (currentControlRateProfile->rcExpo[FD_PITCH] == currentControlRateProfile->rcExpo[FD
 7369              	 .loc 26 1638 0
 7370 07aa B54B     	 ldr r3,.L580
 7371 07ac 1B68     	 ldr r3,[r3]
 7372 07ae DA79     	 ldrb r2,[r3,#7]
 7373 07b0 B34B     	 ldr r3,.L580
 7374 07b2 1B68     	 ldr r3,[r3]
 7375 07b4 9B79     	 ldrb r3,[r3,#6]
 7376 07b6 9A42     	 cmp r2,r3
 7377 07b8 04D1     	 bne .L514
1639:../cleanflight/src/main/interface/msp.c ****                 currentControlRateProfile->rcExpo[FD_PITCH] = value;
 7378              	 .loc 26 1639 0
 7379 07ba B14B     	 ldr r3,.L580
 7380 07bc 1B68     	 ldr r3,[r3]
 7381 07be 97F8D720 	 ldrb r2,[r7,#215]
 7382 07c2 DA71     	 strb r2,[r3,#7]
 7383              	.L514:
1640:../cleanflight/src/main/interface/msp.c ****             }
1641:../cleanflight/src/main/interface/msp.c ****             currentControlRateProfile->rcExpo[FD_ROLL] = value;
 7384              	 .loc 26 1641 0
 7385 07c4 AE4B     	 ldr r3,.L580
 7386 07c6 1B68     	 ldr r3,[r3]
 7387 07c8 97F8D720 	 ldrb r2,[r7,#215]
 7388 07cc 9A71     	 strb r2,[r3,#6]
 7389              	.LBB54:
1642:../cleanflight/src/main/interface/msp.c **** 
1643:../cleanflight/src/main/interface/msp.c ****             for (int i = 0; i < 3; i++) {
 7390              	 .loc 26 1643 0
 7391 07ce 0023     	 movs r3,#0
 7392 07d0 C7F8C830 	 str r3,[r7,#200]
 7393 07d4 10E0     	 b .L515
 7394              	.L516:
1644:../cleanflight/src/main/interface/msp.c ****                 currentControlRateProfile->rates[i] = sbufReadU8(src);
 7395              	 .loc 26 1644 0 discriminator 3
 7396 07d6 AA4B     	 ldr r3,.L580
 7397 07d8 1C68     	 ldr r4,[r3]
 7398 07da 3868     	 ldr r0,[r7]
 7399 07dc FFF7FEFF 	 bl sbufReadU8
 7400 07e0 0346     	 mov r3,r0
 7401 07e2 1A46     	 mov r2,r3
 7402 07e4 D7F8C830 	 ldr r3,[r7,#200]
 7403 07e8 2344     	 add r3,r3,r4
 7404 07ea 0833     	 adds r3,r3,#8
 7405 07ec 5A70     	 strb r2,[r3,#1]
1643:../cleanflight/src/main/interface/msp.c ****                 currentControlRateProfile->rates[i] = sbufReadU8(src);
 7406              	 .loc 26 1643 0 discriminator 3
 7407 07ee D7F8C830 	 ldr r3,[r7,#200]
 7408 07f2 0133     	 adds r3,r3,#1
 7409 07f4 C7F8C830 	 str r3,[r7,#200]
 7410              	.L515:
1643:../cleanflight/src/main/interface/msp.c ****                 currentControlRateProfile->rates[i] = sbufReadU8(src);
 7411              	 .loc 26 1643 0 is_stmt 0 discriminator 1
 7412 07f8 D7F8C830 	 ldr r3,[r7,#200]
 7413 07fc 022B     	 cmp r3,#2
 7414 07fe EADD     	 ble .L516
 7415              	.LBE54:
1645:../cleanflight/src/main/interface/msp.c ****             }
1646:../cleanflight/src/main/interface/msp.c **** 
1647:../cleanflight/src/main/interface/msp.c ****             value = sbufReadU8(src);
 7416              	 .loc 26 1647 0 is_stmt 1
 7417 0800 3868     	 ldr r0,[r7]
 7418 0802 FFF7FEFF 	 bl sbufReadU8
 7419 0806 0346     	 mov r3,r0
 7420 0808 87F8D730 	 strb r3,[r7,#215]
1648:../cleanflight/src/main/interface/msp.c ****             currentControlRateProfile->dynThrPID = MIN(value, CONTROL_RATE_CONFIG_TPA_MAX);
 7421              	 .loc 26 1648 0
 7422 080c 9C4B     	 ldr r3,.L580
 7423 080e 1B68     	 ldr r3,[r3]
 7424              	.LBB55:
 7425 0810 97F8D720 	 ldrb r2,[r7,#215]
 7426 0814 87F89B20 	 strb r2,[r7,#155]
 7427 0818 6422     	 movs r2,#100
 7428 081a C7F89420 	 str r2,[r7,#148]
 7429 081e 97F89B10 	 ldrb r1,[r7,#155]
 7430 0822 D7F89420 	 ldr r2,[r7,#148]
 7431 0826 8A42     	 cmp r2,r1
 7432 0828 A8BF     	 it ge
 7433 082a 0A46     	 movge r2,r1
 7434              	.LBE55:
 7435 082c D2B2     	 uxtb r2,r2
 7436 082e 1A73     	 strb r2,[r3,#12]
1649:../cleanflight/src/main/interface/msp.c ****             currentControlRateProfile->thrMid8 = sbufReadU8(src);
 7437              	 .loc 26 1649 0
 7438 0830 934B     	 ldr r3,.L580
 7439 0832 1C68     	 ldr r4,[r3]
 7440 0834 3868     	 ldr r0,[r7]
 7441 0836 FFF7FEFF 	 bl sbufReadU8
 7442 083a 0346     	 mov r3,r0
 7443 083c 2370     	 strb r3,[r4]
1650:../cleanflight/src/main/interface/msp.c ****             currentControlRateProfile->thrExpo8 = sbufReadU8(src);
 7444              	 .loc 26 1650 0
 7445 083e 904B     	 ldr r3,.L580
 7446 0840 1C68     	 ldr r4,[r3]
 7447 0842 3868     	 ldr r0,[r7]
 7448 0844 FFF7FEFF 	 bl sbufReadU8
 7449 0848 0346     	 mov r3,r0
 7450 084a 6370     	 strb r3,[r4,#1]
1651:../cleanflight/src/main/interface/msp.c ****             currentControlRateProfile->tpa_breakpoint = sbufReadU16(src);
 7451              	 .loc 26 1651 0
 7452 084c 8C4B     	 ldr r3,.L580
 7453 084e 1C68     	 ldr r4,[r3]
 7454 0850 3868     	 ldr r0,[r7]
 7455 0852 FFF7FEFF 	 bl sbufReadU16
 7456 0856 0346     	 mov r3,r0
 7457 0858 A4F80D30 	 strh r3,[r4,#13]
1652:../cleanflight/src/main/interface/msp.c **** 
1653:../cleanflight/src/main/interface/msp.c ****             if (sbufBytesRemaining(src) >= 1) {
 7458              	 .loc 26 1653 0
 7459 085c 3868     	 ldr r0,[r7]
 7460 085e FFF7FEFF 	 bl sbufBytesRemaining
 7461 0862 0346     	 mov r3,r0
 7462 0864 002B     	 cmp r3,#0
 7463 0866 06DD     	 ble .L517
1654:../cleanflight/src/main/interface/msp.c ****                 currentControlRateProfile->rcExpo[FD_YAW] = sbufReadU8(src);
 7464              	 .loc 26 1654 0
 7465 0868 854B     	 ldr r3,.L580
 7466 086a 1C68     	 ldr r4,[r3]
 7467 086c 3868     	 ldr r0,[r7]
 7468 086e FFF7FEFF 	 bl sbufReadU8
 7469 0872 0346     	 mov r3,r0
 7470 0874 2372     	 strb r3,[r4,#8]
 7471              	.L517:
1655:../cleanflight/src/main/interface/msp.c ****             }
1656:../cleanflight/src/main/interface/msp.c **** 
1657:../cleanflight/src/main/interface/msp.c ****             if (sbufBytesRemaining(src) >= 1) {
 7472              	 .loc 26 1657 0
 7473 0876 3868     	 ldr r0,[r7]
 7474 0878 FFF7FEFF 	 bl sbufBytesRemaining
 7475 087c 0346     	 mov r3,r0
 7476 087e 002B     	 cmp r3,#0
 7477 0880 06DD     	 ble .L518
1658:../cleanflight/src/main/interface/msp.c ****                 currentControlRateProfile->rcRates[FD_YAW] = sbufReadU8(src);
 7478              	 .loc 26 1658 0
 7479 0882 7F4B     	 ldr r3,.L580
 7480 0884 1C68     	 ldr r4,[r3]
 7481 0886 3868     	 ldr r0,[r7]
 7482 0888 FFF7FEFF 	 bl sbufReadU8
 7483 088c 0346     	 mov r3,r0
 7484 088e 6371     	 strb r3,[r4,#5]
 7485              	.L518:
1659:../cleanflight/src/main/interface/msp.c ****             }
1660:../cleanflight/src/main/interface/msp.c **** 
1661:../cleanflight/src/main/interface/msp.c ****             if (sbufBytesRemaining(src) >= 1) {
 7486              	 .loc 26 1661 0
 7487 0890 3868     	 ldr r0,[r7]
 7488 0892 FFF7FEFF 	 bl sbufBytesRemaining
 7489 0896 0346     	 mov r3,r0
 7490 0898 002B     	 cmp r3,#0
 7491 089a 06DD     	 ble .L519
1662:../cleanflight/src/main/interface/msp.c ****                 currentControlRateProfile->rcRates[FD_PITCH] = sbufReadU8(src);
 7492              	 .loc 26 1662 0
 7493 089c 784B     	 ldr r3,.L580
 7494 089e 1C68     	 ldr r4,[r3]
 7495 08a0 3868     	 ldr r0,[r7]
 7496 08a2 FFF7FEFF 	 bl sbufReadU8
 7497 08a6 0346     	 mov r3,r0
 7498 08a8 2371     	 strb r3,[r4,#4]
 7499              	.L519:
1663:../cleanflight/src/main/interface/msp.c ****             }
1664:../cleanflight/src/main/interface/msp.c **** 
1665:../cleanflight/src/main/interface/msp.c ****             if (sbufBytesRemaining(src) >= 1) {
 7500              	 .loc 26 1665 0
 7501 08aa 3868     	 ldr r0,[r7]
 7502 08ac FFF7FEFF 	 bl sbufBytesRemaining
 7503 08b0 0346     	 mov r3,r0
 7504 08b2 002B     	 cmp r3,#0
 7505 08b4 06DD     	 ble .L520
1666:../cleanflight/src/main/interface/msp.c ****                 currentControlRateProfile->rcExpo[FD_PITCH] = sbufReadU8(src);
 7506              	 .loc 26 1666 0
 7507 08b6 724B     	 ldr r3,.L580
 7508 08b8 1C68     	 ldr r4,[r3]
 7509 08ba 3868     	 ldr r0,[r7]
 7510 08bc FFF7FEFF 	 bl sbufReadU8
 7511 08c0 0346     	 mov r3,r0
 7512 08c2 E371     	 strb r3,[r4,#7]
 7513              	.L520:
1667:../cleanflight/src/main/interface/msp.c ****             }
1668:../cleanflight/src/main/interface/msp.c **** 
1669:../cleanflight/src/main/interface/msp.c ****             initRcProcessing();
 7514              	 .loc 26 1669 0
 7515 08c4 FFF7FEFF 	 bl initRcProcessing
1670:../cleanflight/src/main/interface/msp.c ****         } else {
1671:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
1672:../cleanflight/src/main/interface/msp.c ****         }
1673:../cleanflight/src/main/interface/msp.c ****         break;
 7516              	 .loc 26 1673 0
 7517 08c8 00F0FCBF 	 b .L494
 7518              	.L512:
1671:../cleanflight/src/main/interface/msp.c ****         }
 7519              	 .loc 26 1671 0
 7520 08cc FF23     	 movs r3,#255
 7521 08ce 00F0FABF 	 b .L498
 7522              	.L480:
1674:../cleanflight/src/main/interface/msp.c **** 
1675:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_MOTOR_CONFIG:
1676:../cleanflight/src/main/interface/msp.c ****         motorConfigMutable()->minthrottle = sbufReadU16(src);
 7523              	 .loc 26 1676 0
 7524 08d2 FFF7FEFF 	 bl motorConfigMutable
 7525 08d6 0446     	 mov r4,r0
 7526 08d8 3868     	 ldr r0,[r7]
 7527 08da FFF7FEFF 	 bl sbufReadU16
 7528 08de 0346     	 mov r3,r0
 7529 08e0 2382     	 strh r3,[r4,#16]
1677:../cleanflight/src/main/interface/msp.c ****         motorConfigMutable()->maxthrottle = sbufReadU16(src);
 7530              	 .loc 26 1677 0
 7531 08e2 FFF7FEFF 	 bl motorConfigMutable
 7532 08e6 0446     	 mov r4,r0
 7533 08e8 3868     	 ldr r0,[r7]
 7534 08ea FFF7FEFF 	 bl sbufReadU16
 7535 08ee 0346     	 mov r3,r0
 7536 08f0 6382     	 strh r3,[r4,#18]
1678:../cleanflight/src/main/interface/msp.c ****         motorConfigMutable()->mincommand = sbufReadU16(src);
 7537              	 .loc 26 1678 0
 7538 08f2 FFF7FEFF 	 bl motorConfigMutable
 7539 08f6 0446     	 mov r4,r0
 7540 08f8 3868     	 ldr r0,[r7]
 7541 08fa FFF7FEFF 	 bl sbufReadU16
 7542 08fe 0346     	 mov r3,r0
 7543 0900 A382     	 strh r3,[r4,#20]
1679:../cleanflight/src/main/interface/msp.c ****         break;
 7544              	 .loc 26 1679 0
 7545 0902 00F0DFBF 	 b .L494
 7546              	.L481:
1680:../cleanflight/src/main/interface/msp.c **** 
1681:../cleanflight/src/main/interface/msp.c **** #ifdef USE_GPS
1682:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_GPS_CONFIG:
1683:../cleanflight/src/main/interface/msp.c ****         gpsConfigMutable()->provider = sbufReadU8(src);
 7547              	 .loc 26 1683 0
 7548 0906 FFF7FEFF 	 bl gpsConfigMutable
 7549 090a 0446     	 mov r4,r0
 7550 090c 3868     	 ldr r0,[r7]
 7551 090e FFF7FEFF 	 bl sbufReadU8
 7552 0912 0346     	 mov r3,r0
 7553 0914 2370     	 strb r3,[r4]
1684:../cleanflight/src/main/interface/msp.c ****         gpsConfigMutable()->sbasMode = sbufReadU8(src);
 7554              	 .loc 26 1684 0
 7555 0916 FFF7FEFF 	 bl gpsConfigMutable
 7556 091a 0446     	 mov r4,r0
 7557 091c 3868     	 ldr r0,[r7]
 7558 091e FFF7FEFF 	 bl sbufReadU8
 7559 0922 0346     	 mov r3,r0
 7560 0924 6370     	 strb r3,[r4,#1]
1685:../cleanflight/src/main/interface/msp.c ****         gpsConfigMutable()->autoConfig = sbufReadU8(src);
 7561              	 .loc 26 1685 0
 7562 0926 FFF7FEFF 	 bl gpsConfigMutable
 7563 092a 0446     	 mov r4,r0
 7564 092c 3868     	 ldr r0,[r7]
 7565 092e FFF7FEFF 	 bl sbufReadU8
 7566 0932 0346     	 mov r3,r0
 7567 0934 A370     	 strb r3,[r4,#2]
1686:../cleanflight/src/main/interface/msp.c ****         gpsConfigMutable()->autoBaud = sbufReadU8(src);
 7568              	 .loc 26 1686 0
 7569 0936 FFF7FEFF 	 bl gpsConfigMutable
 7570 093a 0446     	 mov r4,r0
 7571 093c 3868     	 ldr r0,[r7]
 7572 093e FFF7FEFF 	 bl sbufReadU8
 7573 0942 0346     	 mov r3,r0
 7574 0944 E370     	 strb r3,[r4,#3]
1687:../cleanflight/src/main/interface/msp.c ****         break;
 7575              	 .loc 26 1687 0
 7576 0946 00F0BDBF 	 b .L494
 7577              	.L482:
1688:../cleanflight/src/main/interface/msp.c **** #endif
1689:../cleanflight/src/main/interface/msp.c **** 
1690:../cleanflight/src/main/interface/msp.c **** #ifdef USE_MAG
1691:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_COMPASS_CONFIG:
1692:../cleanflight/src/main/interface/msp.c ****         compassConfigMutable()->mag_declination = sbufReadU16(src) * 10;
 7578              	 .loc 26 1692 0
 7579 094a FFF7FEFF 	 bl compassConfigMutable
 7580 094e 0446     	 mov r4,r0
 7581 0950 3868     	 ldr r0,[r7]
 7582 0952 FFF7FEFF 	 bl sbufReadU16
 7583 0956 0346     	 mov r3,r0
 7584 0958 1A46     	 mov r2,r3
 7585 095a 9200     	 lsls r2,r2,#2
 7586 095c 1344     	 add r3,r3,r2
 7587 095e 5B00     	 lsls r3,r3,#1
 7588 0960 9BB2     	 uxth r3,r3
 7589 0962 9BB2     	 uxth r3,r3
 7590 0964 2380     	 strh r3,[r4]
1693:../cleanflight/src/main/interface/msp.c ****         break;
 7591              	 .loc 26 1693 0
 7592 0966 00F0ADBF 	 b .L494
 7593              	.L475:
 7594              	.LBB56:
1694:../cleanflight/src/main/interface/msp.c **** #endif
1695:../cleanflight/src/main/interface/msp.c **** 
1696:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_MOTOR:
1697:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < getMotorCount(); i++) {
 7595              	 .loc 26 1697 0
 7596 096a 0023     	 movs r3,#0
 7597 096c C7F8C430 	 str r3,[r7,#196]
 7598 0970 12E0     	 b .L522
 7599              	.L523:
1698:../cleanflight/src/main/interface/msp.c ****             motor_disarmed[i] = convertExternalToMotor(sbufReadU16(src));
 7600              	 .loc 26 1698 0 discriminator 3
 7601 0972 3868     	 ldr r0,[r7]
 7602 0974 FFF7FEFF 	 bl sbufReadU16
 7603 0978 0346     	 mov r3,r0
 7604 097a 1846     	 mov r0,r3
 7605 097c FFF7FEFF 	 bl convertExternalToMotor
 7606 0980 0146     	 mov r1,r0
 7607 0982 404A     	 ldr r2,.L580+4
 7608 0984 D7F8C430 	 ldr r3,[r7,#196]
 7609 0988 9B00     	 lsls r3,r3,#2
 7610 098a 1344     	 add r3,r3,r2
 7611 098c 1960     	 str r1,[r3]
1697:../cleanflight/src/main/interface/msp.c ****             motor_disarmed[i] = convertExternalToMotor(sbufReadU16(src));
 7612              	 .loc 26 1697 0 discriminator 3
 7613 098e D7F8C430 	 ldr r3,[r7,#196]
 7614 0992 0133     	 adds r3,r3,#1
 7615 0994 C7F8C430 	 str r3,[r7,#196]
 7616              	.L522:
1697:../cleanflight/src/main/interface/msp.c ****             motor_disarmed[i] = convertExternalToMotor(sbufReadU16(src));
 7617              	 .loc 26 1697 0 is_stmt 0 discriminator 1
 7618 0998 FFF7FEFF 	 bl getMotorCount
 7619 099c 0346     	 mov r3,r0
 7620 099e 1A46     	 mov r2,r3
 7621 09a0 D7F8C430 	 ldr r3,[r7,#196]
 7622 09a4 9A42     	 cmp r2,r3
 7623 09a6 E4DC     	 bgt .L523
 7624              	.LBE56:
1699:../cleanflight/src/main/interface/msp.c ****         }
1700:../cleanflight/src/main/interface/msp.c ****         break;
 7625              	 .loc 26 1700 0 is_stmt 1
 7626 09a8 00F08CBF 	 b .L494
 7627              	.L474:
1701:../cleanflight/src/main/interface/msp.c **** 
1702:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_SERVO_CONFIGURATION:
1703:../cleanflight/src/main/interface/msp.c **** #ifdef USE_SERVOS
1704:../cleanflight/src/main/interface/msp.c ****         if (dataSize != 1 + 12) {
 7628              	 .loc 26 1704 0
 7629 09ac D7F8B030 	 ldr r3,[r7,#176]
 7630 09b0 0D2B     	 cmp r3,#13
 7631 09b2 02D0     	 beq .L524
1705:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
 7632              	 .loc 26 1705 0
 7633 09b4 FF23     	 movs r3,#255
 7634 09b6 00F086BF 	 b .L498
 7635              	.L524:
1706:../cleanflight/src/main/interface/msp.c ****         }
1707:../cleanflight/src/main/interface/msp.c ****         i = sbufReadU8(src);
 7636              	 .loc 26 1707 0
 7637 09ba 3868     	 ldr r0,[r7]
 7638 09bc FFF7FEFF 	 bl sbufReadU8
 7639 09c0 0346     	 mov r3,r0
 7640 09c2 C7F8A830 	 str r3,[r7,#168]
1708:../cleanflight/src/main/interface/msp.c ****         if (i >= MAX_SUPPORTED_SERVOS) {
 7641              	 .loc 26 1708 0
 7642 09c6 D7F8A830 	 ldr r3,[r7,#168]
 7643 09ca 072B     	 cmp r3,#7
 7644 09cc 02D9     	 bls .L525
1709:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
 7645              	 .loc 26 1709 0
 7646 09ce FF23     	 movs r3,#255
 7647 09d0 00F079BF 	 b .L498
 7648              	.L525:
1710:../cleanflight/src/main/interface/msp.c ****         } else {
1711:../cleanflight/src/main/interface/msp.c ****             servoParamsMutable(i)->min = sbufReadU16(src);
 7649              	 .loc 26 1711 0
 7650 09d4 D7F8A830 	 ldr r3,[r7,#168]
 7651 09d8 1846     	 mov r0,r3
 7652 09da FFF7FEFF 	 bl servoParamsMutable
 7653 09de 0446     	 mov r4,r0
 7654 09e0 3868     	 ldr r0,[r7]
 7655 09e2 FFF7FEFF 	 bl sbufReadU16
 7656 09e6 0346     	 mov r3,r0
 7657 09e8 9BB2     	 uxth r3,r3
 7658 09ea A380     	 strh r3,[r4,#4]
1712:../cleanflight/src/main/interface/msp.c ****             servoParamsMutable(i)->max = sbufReadU16(src);
 7659              	 .loc 26 1712 0
 7660 09ec D7F8A830 	 ldr r3,[r7,#168]
 7661 09f0 1846     	 mov r0,r3
 7662 09f2 FFF7FEFF 	 bl servoParamsMutable
 7663 09f6 0446     	 mov r4,r0
 7664 09f8 3868     	 ldr r0,[r7]
 7665 09fa FFF7FEFF 	 bl sbufReadU16
 7666 09fe 0346     	 mov r3,r0
 7667 0a00 9BB2     	 uxth r3,r3
 7668 0a02 E380     	 strh r3,[r4,#6]
1713:../cleanflight/src/main/interface/msp.c ****             servoParamsMutable(i)->middle = sbufReadU16(src);
 7669              	 .loc 26 1713 0
 7670 0a04 D7F8A830 	 ldr r3,[r7,#168]
 7671 0a08 1846     	 mov r0,r3
 7672 0a0a FFF7FEFF 	 bl servoParamsMutable
 7673 0a0e 0446     	 mov r4,r0
 7674 0a10 3868     	 ldr r0,[r7]
 7675 0a12 FFF7FEFF 	 bl sbufReadU16
 7676 0a16 0346     	 mov r3,r0
 7677 0a18 9BB2     	 uxth r3,r3
 7678 0a1a 2381     	 strh r3,[r4,#8]
1714:../cleanflight/src/main/interface/msp.c ****             servoParamsMutable(i)->rate = sbufReadU8(src);
 7679              	 .loc 26 1714 0
 7680 0a1c D7F8A830 	 ldr r3,[r7,#168]
 7681 0a20 1846     	 mov r0,r3
 7682 0a22 FFF7FEFF 	 bl servoParamsMutable
 7683 0a26 0446     	 mov r4,r0
 7684 0a28 3868     	 ldr r0,[r7]
 7685 0a2a FFF7FEFF 	 bl sbufReadU8
 7686 0a2e 0346     	 mov r3,r0
 7687 0a30 DBB2     	 uxtb r3,r3
 7688 0a32 A372     	 strb r3,[r4,#10]
1715:../cleanflight/src/main/interface/msp.c ****             servoParamsMutable(i)->forwardFromChannel = sbufReadU8(src);
 7689              	 .loc 26 1715 0
 7690 0a34 D7F8A830 	 ldr r3,[r7,#168]
 7691 0a38 1846     	 mov r0,r3
 7692 0a3a FFF7FEFF 	 bl servoParamsMutable
 7693 0a3e 0446     	 mov r4,r0
 7694 0a40 3868     	 ldr r0,[r7]
 7695 0a42 FFF7FEFF 	 bl sbufReadU8
 7696 0a46 0346     	 mov r3,r0
 7697 0a48 DBB2     	 uxtb r3,r3
 7698 0a4a E372     	 strb r3,[r4,#11]
1716:../cleanflight/src/main/interface/msp.c ****             servoParamsMutable(i)->reversedSources = sbufReadU32(src);
 7699              	 .loc 26 1716 0
 7700 0a4c D7F8A830 	 ldr r3,[r7,#168]
 7701 0a50 1846     	 mov r0,r3
 7702 0a52 FFF7FEFF 	 bl servoParamsMutable
 7703 0a56 0446     	 mov r4,r0
 7704 0a58 3868     	 ldr r0,[r7]
 7705 0a5a FFF7FEFF 	 bl sbufReadU32
 7706 0a5e 0346     	 mov r3,r0
 7707 0a60 2360     	 str r3,[r4]
1717:../cleanflight/src/main/interface/msp.c ****         }
1718:../cleanflight/src/main/interface/msp.c **** #endif
1719:../cleanflight/src/main/interface/msp.c ****         break;
 7708              	 .loc 26 1719 0
 7709 0a62 00F02FBF 	 b .L494
 7710              	.L484:
1720:../cleanflight/src/main/interface/msp.c **** 
1721:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_SERVO_MIX_RULE:
1722:../cleanflight/src/main/interface/msp.c **** #ifdef USE_SERVOS
1723:../cleanflight/src/main/interface/msp.c ****         i = sbufReadU8(src);
 7711              	 .loc 26 1723 0
 7712 0a66 3868     	 ldr r0,[r7]
 7713 0a68 FFF7FEFF 	 bl sbufReadU8
 7714 0a6c 0346     	 mov r3,r0
 7715 0a6e C7F8A830 	 str r3,[r7,#168]
1724:../cleanflight/src/main/interface/msp.c ****         if (i >= MAX_SERVO_RULES) {
 7716              	 .loc 26 1724 0
 7717 0a72 D7F8A830 	 ldr r3,[r7,#168]
 7718 0a76 0F2B     	 cmp r3,#15
 7719 0a78 06D9     	 bls .L526
1725:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
 7720              	 .loc 26 1725 0
 7721 0a7a FF23     	 movs r3,#255
 7722 0a7c 00F023BF 	 b .L498
 7723              	.L581:
 7724              	 .align 2
 7725              	.L580:
 7726 0a80 00000000 	 .word currentControlRateProfile
 7727 0a84 00000000 	 .word motor_disarmed
 7728              	.L526:
1726:../cleanflight/src/main/interface/msp.c ****         } else {
1727:../cleanflight/src/main/interface/msp.c ****             customServoMixersMutable(i)->targetChannel = sbufReadU8(src);
 7729              	 .loc 26 1727 0
 7730 0a88 D7F8A830 	 ldr r3,[r7,#168]
 7731 0a8c 1846     	 mov r0,r3
 7732 0a8e FFF7FEFF 	 bl customServoMixersMutable
 7733 0a92 0446     	 mov r4,r0
 7734 0a94 3868     	 ldr r0,[r7]
 7735 0a96 FFF7FEFF 	 bl sbufReadU8
 7736 0a9a 0346     	 mov r3,r0
 7737 0a9c 2370     	 strb r3,[r4]
1728:../cleanflight/src/main/interface/msp.c ****             customServoMixersMutable(i)->inputSource = sbufReadU8(src);
 7738              	 .loc 26 1728 0
 7739 0a9e D7F8A830 	 ldr r3,[r7,#168]
 7740 0aa2 1846     	 mov r0,r3
 7741 0aa4 FFF7FEFF 	 bl customServoMixersMutable
 7742 0aa8 0446     	 mov r4,r0
 7743 0aaa 3868     	 ldr r0,[r7]
 7744 0aac FFF7FEFF 	 bl sbufReadU8
 7745 0ab0 0346     	 mov r3,r0
 7746 0ab2 6370     	 strb r3,[r4,#1]
1729:../cleanflight/src/main/interface/msp.c ****             customServoMixersMutable(i)->rate = sbufReadU8(src);
 7747              	 .loc 26 1729 0
 7748 0ab4 D7F8A830 	 ldr r3,[r7,#168]
 7749 0ab8 1846     	 mov r0,r3
 7750 0aba FFF7FEFF 	 bl customServoMixersMutable
 7751 0abe 0446     	 mov r4,r0
 7752 0ac0 3868     	 ldr r0,[r7]
 7753 0ac2 FFF7FEFF 	 bl sbufReadU8
 7754 0ac6 0346     	 mov r3,r0
 7755 0ac8 DBB2     	 uxtb r3,r3
 7756 0aca A370     	 strb r3,[r4,#2]
1730:../cleanflight/src/main/interface/msp.c ****             customServoMixersMutable(i)->speed = sbufReadU8(src);
 7757              	 .loc 26 1730 0
 7758 0acc D7F8A830 	 ldr r3,[r7,#168]
 7759 0ad0 1846     	 mov r0,r3
 7760 0ad2 FFF7FEFF 	 bl customServoMixersMutable
 7761 0ad6 0446     	 mov r4,r0
 7762 0ad8 3868     	 ldr r0,[r7]
 7763 0ada FFF7FEFF 	 bl sbufReadU8
 7764 0ade 0346     	 mov r3,r0
 7765 0ae0 E370     	 strb r3,[r4,#3]
1731:../cleanflight/src/main/interface/msp.c ****             customServoMixersMutable(i)->min = sbufReadU8(src);
 7766              	 .loc 26 1731 0
 7767 0ae2 D7F8A830 	 ldr r3,[r7,#168]
 7768 0ae6 1846     	 mov r0,r3
 7769 0ae8 FFF7FEFF 	 bl customServoMixersMutable
 7770 0aec 0446     	 mov r4,r0
 7771 0aee 3868     	 ldr r0,[r7]
 7772 0af0 FFF7FEFF 	 bl sbufReadU8
 7773 0af4 0346     	 mov r3,r0
 7774 0af6 DBB2     	 uxtb r3,r3
 7775 0af8 2371     	 strb r3,[r4,#4]
1732:../cleanflight/src/main/interface/msp.c ****             customServoMixersMutable(i)->max = sbufReadU8(src);
 7776              	 .loc 26 1732 0
 7777 0afa D7F8A830 	 ldr r3,[r7,#168]
 7778 0afe 1846     	 mov r0,r3
 7779 0b00 FFF7FEFF 	 bl customServoMixersMutable
 7780 0b04 0446     	 mov r4,r0
 7781 0b06 3868     	 ldr r0,[r7]
 7782 0b08 FFF7FEFF 	 bl sbufReadU8
 7783 0b0c 0346     	 mov r3,r0
 7784 0b0e DBB2     	 uxtb r3,r3
 7785 0b10 6371     	 strb r3,[r4,#5]
1733:../cleanflight/src/main/interface/msp.c ****             customServoMixersMutable(i)->box = sbufReadU8(src);
 7786              	 .loc 26 1733 0
 7787 0b12 D7F8A830 	 ldr r3,[r7,#168]
 7788 0b16 1846     	 mov r0,r3
 7789 0b18 FFF7FEFF 	 bl customServoMixersMutable
 7790 0b1c 0446     	 mov r4,r0
 7791 0b1e 3868     	 ldr r0,[r7]
 7792 0b20 FFF7FEFF 	 bl sbufReadU8
 7793 0b24 0346     	 mov r3,r0
 7794 0b26 A371     	 strb r3,[r4,#6]
1734:../cleanflight/src/main/interface/msp.c ****             loadCustomServoMixer();
 7795              	 .loc 26 1734 0
 7796 0b28 FFF7FEFF 	 bl loadCustomServoMixer
1735:../cleanflight/src/main/interface/msp.c ****         }
1736:../cleanflight/src/main/interface/msp.c **** #endif
1737:../cleanflight/src/main/interface/msp.c ****         break;
 7797              	 .loc 26 1737 0
 7798 0b2c 00F0CABE 	 b .L494
 7799              	.L476:
1738:../cleanflight/src/main/interface/msp.c **** 
1739:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_MOTOR_3D_CONFIG:
1740:../cleanflight/src/main/interface/msp.c ****         flight3DConfigMutable()->deadband3d_low = sbufReadU16(src);
 7800              	 .loc 26 1740 0
 7801 0b30 FFF7FEFF 	 bl flight3DConfigMutable
 7802 0b34 0446     	 mov r4,r0
 7803 0b36 3868     	 ldr r0,[r7]
 7804 0b38 FFF7FEFF 	 bl sbufReadU16
 7805 0b3c 0346     	 mov r3,r0
 7806 0b3e 2380     	 strh r3,[r4]
1741:../cleanflight/src/main/interface/msp.c ****         flight3DConfigMutable()->deadband3d_high = sbufReadU16(src);
 7807              	 .loc 26 1741 0
 7808 0b40 FFF7FEFF 	 bl flight3DConfigMutable
 7809 0b44 0446     	 mov r4,r0
 7810 0b46 3868     	 ldr r0,[r7]
 7811 0b48 FFF7FEFF 	 bl sbufReadU16
 7812 0b4c 0346     	 mov r3,r0
 7813 0b4e 6380     	 strh r3,[r4,#2]
1742:../cleanflight/src/main/interface/msp.c ****         flight3DConfigMutable()->neutral3d = sbufReadU16(src);
 7814              	 .loc 26 1742 0
 7815 0b50 FFF7FEFF 	 bl flight3DConfigMutable
 7816 0b54 0446     	 mov r4,r0
 7817 0b56 3868     	 ldr r0,[r7]
 7818 0b58 FFF7FEFF 	 bl sbufReadU16
 7819 0b5c 0346     	 mov r3,r0
 7820 0b5e A380     	 strh r3,[r4,#4]
1743:../cleanflight/src/main/interface/msp.c ****         break;
 7821              	 .loc 26 1743 0
 7822 0b60 00F0B0BE 	 b .L494
 7823              	.L477:
1744:../cleanflight/src/main/interface/msp.c **** 
1745:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RC_DEADBAND:
1746:../cleanflight/src/main/interface/msp.c ****         rcControlsConfigMutable()->deadband = sbufReadU8(src);
 7824              	 .loc 26 1746 0
 7825 0b64 FFF7FEFF 	 bl rcControlsConfigMutable
 7826 0b68 0446     	 mov r4,r0
 7827 0b6a 3868     	 ldr r0,[r7]
 7828 0b6c FFF7FEFF 	 bl sbufReadU8
 7829 0b70 0346     	 mov r3,r0
 7830 0b72 2370     	 strb r3,[r4]
1747:../cleanflight/src/main/interface/msp.c ****         rcControlsConfigMutable()->yaw_deadband = sbufReadU8(src);
 7831              	 .loc 26 1747 0
 7832 0b74 FFF7FEFF 	 bl rcControlsConfigMutable
 7833 0b78 0446     	 mov r4,r0
 7834 0b7a 3868     	 ldr r0,[r7]
 7835 0b7c FFF7FEFF 	 bl sbufReadU8
 7836 0b80 0346     	 mov r3,r0
 7837 0b82 6370     	 strb r3,[r4,#1]
1748:../cleanflight/src/main/interface/msp.c ****         rcControlsConfigMutable()->alt_hold_deadband = sbufReadU8(src);
 7838              	 .loc 26 1748 0
 7839 0b84 FFF7FEFF 	 bl rcControlsConfigMutable
 7840 0b88 0446     	 mov r4,r0
 7841 0b8a 3868     	 ldr r0,[r7]
 7842 0b8c FFF7FEFF 	 bl sbufReadU8
 7843 0b90 0346     	 mov r3,r0
 7844 0b92 A370     	 strb r3,[r4,#2]
1749:../cleanflight/src/main/interface/msp.c ****         flight3DConfigMutable()->deadband3d_throttle = sbufReadU16(src);
 7845              	 .loc 26 1749 0
 7846 0b94 FFF7FEFF 	 bl flight3DConfigMutable
 7847 0b98 0446     	 mov r4,r0
 7848 0b9a 3868     	 ldr r0,[r7]
 7849 0b9c FFF7FEFF 	 bl sbufReadU16
 7850 0ba0 0346     	 mov r3,r0
 7851 0ba2 E380     	 strh r3,[r4,#6]
1750:../cleanflight/src/main/interface/msp.c ****         break;
 7852              	 .loc 26 1750 0
 7853 0ba4 00F08EBE 	 b .L494
 7854              	.L478:
1751:../cleanflight/src/main/interface/msp.c **** 
1752:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RESET_CURR_PID:
1753:../cleanflight/src/main/interface/msp.c ****         resetPidProfile(currentPidProfile);
 7855              	 .loc 26 1753 0
 7856 0ba8 AE4B     	 ldr r3,.L582
 7857 0baa 1B68     	 ldr r3,[r3]
 7858 0bac 1846     	 mov r0,r3
 7859 0bae FFF7FEFF 	 bl resetPidProfile
1754:../cleanflight/src/main/interface/msp.c ****         break;
 7860              	 .loc 26 1754 0
 7861 0bb2 00F087BE 	 b .L494
 7862              	.L479:
1755:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_SENSOR_ALIGNMENT:
1756:../cleanflight/src/main/interface/msp.c ****         gyroConfigMutable()->gyro_align = sbufReadU8(src);
 7863              	 .loc 26 1756 0
 7864 0bb6 FFF7FEFF 	 bl gyroConfigMutable
 7865 0bba 0446     	 mov r4,r0
 7866 0bbc 3868     	 ldr r0,[r7]
 7867 0bbe FFF7FEFF 	 bl sbufReadU8
 7868 0bc2 0346     	 mov r3,r0
 7869 0bc4 2370     	 strb r3,[r4]
1757:../cleanflight/src/main/interface/msp.c ****         accelerometerConfigMutable()->acc_align = sbufReadU8(src);
 7870              	 .loc 26 1757 0
 7871 0bc6 FFF7FEFF 	 bl accelerometerConfigMutable
 7872 0bca 0446     	 mov r4,r0
 7873 0bcc 3868     	 ldr r0,[r7]
 7874 0bce FFF7FEFF 	 bl sbufReadU8
 7875 0bd2 0346     	 mov r3,r0
 7876 0bd4 A370     	 strb r3,[r4,#2]
1758:../cleanflight/src/main/interface/msp.c ****         compassConfigMutable()->mag_align = sbufReadU8(src);
 7877              	 .loc 26 1758 0
 7878 0bd6 FFF7FEFF 	 bl compassConfigMutable
 7879 0bda 0446     	 mov r4,r0
 7880 0bdc 3868     	 ldr r0,[r7]
 7881 0bde FFF7FEFF 	 bl sbufReadU8
 7882 0be2 0346     	 mov r3,r0
 7883 0be4 A370     	 strb r3,[r4,#2]
1759:../cleanflight/src/main/interface/msp.c ****         break;
 7884              	 .loc 26 1759 0
 7885 0be6 00F06DBE 	 b .L494
 7886              	.L458:
1760:../cleanflight/src/main/interface/msp.c **** 
1761:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_ADVANCED_CONFIG:
1762:../cleanflight/src/main/interface/msp.c ****         gyroConfigMutable()->gyro_sync_denom = sbufReadU8(src);
 7887              	 .loc 26 1762 0
 7888 0bea FFF7FEFF 	 bl gyroConfigMutable
 7889 0bee 0446     	 mov r4,r0
 7890 0bf0 3868     	 ldr r0,[r7]
 7891 0bf2 FFF7FEFF 	 bl sbufReadU8
 7892 0bf6 0346     	 mov r3,r0
 7893 0bf8 A370     	 strb r3,[r4,#2]
1763:../cleanflight/src/main/interface/msp.c ****         pidConfigMutable()->pid_process_denom = sbufReadU8(src);
 7894              	 .loc 26 1763 0
 7895 0bfa FFF7FEFF 	 bl pidConfigMutable
 7896 0bfe 0446     	 mov r4,r0
 7897 0c00 3868     	 ldr r0,[r7]
 7898 0c02 FFF7FEFF 	 bl sbufReadU8
 7899 0c06 0346     	 mov r3,r0
 7900 0c08 2370     	 strb r3,[r4]
1764:../cleanflight/src/main/interface/msp.c ****         motorConfigMutable()->dev.useUnsyncedPwm = sbufReadU8(src);
 7901              	 .loc 26 1764 0
 7902 0c0a FFF7FEFF 	 bl motorConfigMutable
 7903 0c0e 0446     	 mov r4,r0
 7904 0c10 3868     	 ldr r0,[r7]
 7905 0c12 FFF7FEFF 	 bl sbufReadU8
 7906 0c16 0346     	 mov r3,r0
 7907 0c18 2371     	 strb r3,[r4,#4]
1765:../cleanflight/src/main/interface/msp.c **** #ifdef USE_DSHOT
1766:../cleanflight/src/main/interface/msp.c ****         motorConfigMutable()->dev.motorPwmProtocol = constrain(sbufReadU8(src), 0, PWM_TYPE_MAX - 1
1767:../cleanflight/src/main/interface/msp.c **** #else
1768:../cleanflight/src/main/interface/msp.c ****         motorConfigMutable()->dev.motorPwmProtocol = constrain(sbufReadU8(src), 0, PWM_TYPE_BRUSHED
 7908              	 .loc 26 1768 0
 7909 0c1a FFF7FEFF 	 bl motorConfigMutable
 7910 0c1e 0446     	 mov r4,r0
 7911 0c20 3868     	 ldr r0,[r7]
 7912 0c22 FFF7FEFF 	 bl sbufReadU8
 7913 0c26 0346     	 mov r3,r0
 7914 0c28 1846     	 mov r0,r3
 7915 0c2a 0021     	 movs r1,#0
 7916 0c2c 0422     	 movs r2,#4
 7917 0c2e FFF7FEFF 	 bl constrain
 7918 0c32 0346     	 mov r3,r0
 7919 0c34 DBB2     	 uxtb r3,r3
 7920 0c36 A370     	 strb r3,[r4,#2]
1769:../cleanflight/src/main/interface/msp.c **** #endif
1770:../cleanflight/src/main/interface/msp.c ****         motorConfigMutable()->dev.motorPwmRate = sbufReadU16(src);
 7921              	 .loc 26 1770 0
 7922 0c38 FFF7FEFF 	 bl motorConfigMutable
 7923 0c3c 0446     	 mov r4,r0
 7924 0c3e 3868     	 ldr r0,[r7]
 7925 0c40 FFF7FEFF 	 bl sbufReadU16
 7926 0c44 0346     	 mov r3,r0
 7927 0c46 2380     	 strh r3,[r4]
1771:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 2) {
 7928              	 .loc 26 1771 0
 7929 0c48 3868     	 ldr r0,[r7]
 7930 0c4a FFF7FEFF 	 bl sbufBytesRemaining
 7931 0c4e 0346     	 mov r3,r0
 7932 0c50 012B     	 cmp r3,#1
 7933 0c52 07DD     	 ble .L527
1772:../cleanflight/src/main/interface/msp.c ****             motorConfigMutable()->digitalIdleOffsetValue = sbufReadU16(src);
 7934              	 .loc 26 1772 0
 7935 0c54 FFF7FEFF 	 bl motorConfigMutable
 7936 0c58 0446     	 mov r4,r0
 7937 0c5a 3868     	 ldr r0,[r7]
 7938 0c5c FFF7FEFF 	 bl sbufReadU16
 7939 0c60 0346     	 mov r3,r0
 7940 0c62 E381     	 strh r3,[r4,#14]
 7941              	.L527:
1773:../cleanflight/src/main/interface/msp.c ****         }
1774:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src)) {
 7942              	 .loc 26 1774 0
 7943 0c64 3868     	 ldr r0,[r7]
 7944 0c66 FFF7FEFF 	 bl sbufBytesRemaining
 7945 0c6a 0346     	 mov r3,r0
 7946 0c6c 002B     	 cmp r3,#0
 7947 0c6e 07D0     	 beq .L528
1775:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_use_32khz = sbufReadU8(src);
 7948              	 .loc 26 1775 0
 7949 0c70 FFF7FEFF 	 bl gyroConfigMutable
 7950 0c74 0446     	 mov r4,r0
 7951 0c76 3868     	 ldr r0,[r7]
 7952 0c78 FFF7FEFF 	 bl sbufReadU8
 7953 0c7c 0346     	 mov r3,r0
 7954 0c7e A371     	 strb r3,[r4,#6]
 7955              	.L528:
1776:../cleanflight/src/main/interface/msp.c ****         }
1777:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src)) {
 7956              	 .loc 26 1777 0
 7957 0c80 3868     	 ldr r0,[r7]
 7958 0c82 FFF7FEFF 	 bl sbufBytesRemaining
 7959 0c86 0346     	 mov r3,r0
 7960 0c88 002B     	 cmp r3,#0
 7961 0c8a 07D0     	 beq .L529
1778:../cleanflight/src/main/interface/msp.c ****             motorConfigMutable()->dev.motorPwmInversion = sbufReadU8(src);
 7962              	 .loc 26 1778 0
 7963 0c8c FFF7FEFF 	 bl motorConfigMutable
 7964 0c90 0446     	 mov r4,r0
 7965 0c92 3868     	 ldr r0,[r7]
 7966 0c94 FFF7FEFF 	 bl sbufReadU8
 7967 0c98 0346     	 mov r3,r0
 7968 0c9a E370     	 strb r3,[r4,#3]
 7969              	.L529:
1779:../cleanflight/src/main/interface/msp.c ****         }
1780:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 8) {
 7970              	 .loc 26 1780 0
 7971 0c9c 3868     	 ldr r0,[r7]
 7972 0c9e FFF7FEFF 	 bl sbufBytesRemaining
 7973 0ca2 0346     	 mov r3,r0
 7974 0ca4 072B     	 cmp r3,#7
 7975 0ca6 30DD     	 ble .L530
1781:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_to_use = sbufReadU8(src);
 7976              	 .loc 26 1781 0
 7977 0ca8 FFF7FEFF 	 bl gyroConfigMutable
 7978 0cac 0446     	 mov r4,r0
 7979 0cae 3868     	 ldr r0,[r7]
 7980 0cb0 FFF7FEFF 	 bl sbufReadU8
 7981 0cb4 0346     	 mov r3,r0
 7982 0cb6 E371     	 strb r3,[r4,#7]
1782:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_high_fsr = sbufReadU8(src);
 7983              	 .loc 26 1782 0
 7984 0cb8 FFF7FEFF 	 bl gyroConfigMutable
 7985 0cbc 0446     	 mov r4,r0
 7986 0cbe 3868     	 ldr r0,[r7]
 7987 0cc0 FFF7FEFF 	 bl sbufReadU8
 7988 0cc4 0346     	 mov r3,r0
 7989 0cc6 6371     	 strb r3,[r4,#5]
1783:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyroMovementCalibrationThreshold = sbufReadU8(src);
 7990              	 .loc 26 1783 0
 7991 0cc8 FFF7FEFF 	 bl gyroConfigMutable
 7992 0ccc 0446     	 mov r4,r0
 7993 0cce 3868     	 ldr r0,[r7]
 7994 0cd0 FFF7FEFF 	 bl sbufReadU8
 7995 0cd4 0346     	 mov r3,r0
 7996 0cd6 6370     	 strb r3,[r4,#1]
1784:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyroCalibrationDuration = sbufReadU16(src);
 7997              	 .loc 26 1784 0
 7998 0cd8 FFF7FEFF 	 bl gyroConfigMutable
 7999 0cdc 0446     	 mov r4,r0
 8000 0cde 3868     	 ldr r0,[r7]
 8001 0ce0 FFF7FEFF 	 bl sbufReadU16
 8002 0ce4 0346     	 mov r3,r0
 8003 0ce6 A383     	 strh r3,[r4,#28]
1785:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_offset_yaw = sbufReadU16(src);
 8004              	 .loc 26 1785 0
 8005 0ce8 FFF7FEFF 	 bl gyroConfigMutable
 8006 0cec 0446     	 mov r4,r0
 8007 0cee 3868     	 ldr r0,[r7]
 8008 0cf0 FFF7FEFF 	 bl sbufReadU16
 8009 0cf4 0346     	 mov r3,r0
 8010 0cf6 9BB2     	 uxth r3,r3
 8011 0cf8 A382     	 strh r3,[r4,#20]
1786:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->checkOverflow = sbufReadU8(src);
 8012              	 .loc 26 1786 0
 8013 0cfa FFF7FEFF 	 bl gyroConfigMutable
 8014 0cfe 0446     	 mov r4,r0
 8015 0d00 3868     	 ldr r0,[r7]
 8016 0d02 FFF7FEFF 	 bl sbufReadU8
 8017 0d06 0346     	 mov r3,r0
 8018 0d08 A375     	 strb r3,[r4,#22]
 8019              	.L530:
1787:../cleanflight/src/main/interface/msp.c ****         }
1788:../cleanflight/src/main/interface/msp.c **** 
1789:../cleanflight/src/main/interface/msp.c ****         validateAndFixGyroConfig();
 8020              	 .loc 26 1789 0
 8021 0d0a FFF7FEFF 	 bl validateAndFixGyroConfig
1790:../cleanflight/src/main/interface/msp.c **** 
1791:../cleanflight/src/main/interface/msp.c ****         break;
 8022              	 .loc 26 1791 0
 8023 0d0e 00F0D9BD 	 b .L494
 8024              	.L459:
1792:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_FILTER_CONFIG:
1793:../cleanflight/src/main/interface/msp.c ****         gyroConfigMutable()->gyro_lowpass_hz = sbufReadU8(src);
 8025              	 .loc 26 1793 0
 8026 0d12 FFF7FEFF 	 bl gyroConfigMutable
 8027 0d16 0446     	 mov r4,r0
 8028 0d18 3868     	 ldr r0,[r7]
 8029 0d1a FFF7FEFF 	 bl sbufReadU8
 8030 0d1e 0346     	 mov r3,r0
 8031 0d20 9BB2     	 uxth r3,r3
 8032 0d22 2381     	 strh r3,[r4,#8]
1794:../cleanflight/src/main/interface/msp.c ****         currentPidProfile->dterm_lowpass_hz = sbufReadU16(src);
 8033              	 .loc 26 1794 0
 8034 0d24 4F4B     	 ldr r3,.L582
 8035 0d26 1C68     	 ldr r4,[r3]
 8036 0d28 3868     	 ldr r0,[r7]
 8037 0d2a FFF7FEFF 	 bl sbufReadU16
 8038 0d2e 0346     	 mov r3,r0
 8039 0d30 6380     	 strh r3,[r4,#2]
1795:../cleanflight/src/main/interface/msp.c ****         currentPidProfile->yaw_lowpass_hz = sbufReadU16(src);
 8040              	 .loc 26 1795 0
 8041 0d32 4C4B     	 ldr r3,.L582
 8042 0d34 1C68     	 ldr r4,[r3]
 8043 0d36 3868     	 ldr r0,[r7]
 8044 0d38 FFF7FEFF 	 bl sbufReadU16
 8045 0d3c 0346     	 mov r3,r0
 8046 0d3e 2380     	 strh r3,[r4]
1796:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 8) {
 8047              	 .loc 26 1796 0
 8048 0d40 3868     	 ldr r0,[r7]
 8049 0d42 FFF7FEFF 	 bl sbufBytesRemaining
 8050 0d46 0346     	 mov r3,r0
 8051 0d48 072B     	 cmp r3,#7
 8052 0d4a 1DDD     	 ble .L531
1797:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_soft_notch_hz_1 = sbufReadU16(src);
 8053              	 .loc 26 1797 0
 8054 0d4c FFF7FEFF 	 bl gyroConfigMutable
 8055 0d50 0446     	 mov r4,r0
 8056 0d52 3868     	 ldr r0,[r7]
 8057 0d54 FFF7FEFF 	 bl sbufReadU16
 8058 0d58 0346     	 mov r3,r0
 8059 0d5a A381     	 strh r3,[r4,#12]
1798:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_soft_notch_cutoff_1 = sbufReadU16(src);
 8060              	 .loc 26 1798 0
 8061 0d5c FFF7FEFF 	 bl gyroConfigMutable
 8062 0d60 0446     	 mov r4,r0
 8063 0d62 3868     	 ldr r0,[r7]
 8064 0d64 FFF7FEFF 	 bl sbufReadU16
 8065 0d68 0346     	 mov r3,r0
 8066 0d6a E381     	 strh r3,[r4,#14]
1799:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->dterm_notch_hz = sbufReadU16(src);
 8067              	 .loc 26 1799 0
 8068 0d6c 3D4B     	 ldr r3,.L582
 8069 0d6e 1C68     	 ldr r4,[r3]
 8070 0d70 3868     	 ldr r0,[r7]
 8071 0d72 FFF7FEFF 	 bl sbufReadU16
 8072 0d76 0346     	 mov r3,r0
 8073 0d78 A380     	 strh r3,[r4,#4]
1800:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->dterm_notch_cutoff = sbufReadU16(src);
 8074              	 .loc 26 1800 0
 8075 0d7a 3A4B     	 ldr r3,.L582
 8076 0d7c 1C68     	 ldr r4,[r3]
 8077 0d7e 3868     	 ldr r0,[r7]
 8078 0d80 FFF7FEFF 	 bl sbufReadU16
 8079 0d84 0346     	 mov r3,r0
 8080 0d86 E380     	 strh r3,[r4,#6]
 8081              	.L531:
1801:../cleanflight/src/main/interface/msp.c ****         }
1802:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 4) {
 8082              	 .loc 26 1802 0
 8083 0d88 3868     	 ldr r0,[r7]
 8084 0d8a FFF7FEFF 	 bl sbufBytesRemaining
 8085 0d8e 0346     	 mov r3,r0
 8086 0d90 032B     	 cmp r3,#3
 8087 0d92 0FDD     	 ble .L532
1803:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_soft_notch_hz_2 = sbufReadU16(src);
 8088              	 .loc 26 1803 0
 8089 0d94 FFF7FEFF 	 bl gyroConfigMutable
 8090 0d98 0446     	 mov r4,r0
 8091 0d9a 3868     	 ldr r0,[r7]
 8092 0d9c FFF7FEFF 	 bl sbufReadU16
 8093 0da0 0346     	 mov r3,r0
 8094 0da2 2382     	 strh r3,[r4,#16]
1804:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_soft_notch_cutoff_2 = sbufReadU16(src);
 8095              	 .loc 26 1804 0
 8096 0da4 FFF7FEFF 	 bl gyroConfigMutable
 8097 0da8 0446     	 mov r4,r0
 8098 0daa 3868     	 ldr r0,[r7]
 8099 0dac FFF7FEFF 	 bl sbufReadU16
 8100 0db0 0346     	 mov r3,r0
 8101 0db2 6382     	 strh r3,[r4,#18]
 8102              	.L532:
1805:../cleanflight/src/main/interface/msp.c ****         }
1806:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 1) {
 8103              	 .loc 26 1806 0
 8104 0db4 3868     	 ldr r0,[r7]
 8105 0db6 FFF7FEFF 	 bl sbufBytesRemaining
 8106 0dba 0346     	 mov r3,r0
 8107 0dbc 002B     	 cmp r3,#0
 8108 0dbe 07DD     	 ble .L533
1807:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->dterm_filter_type = sbufReadU8(src);
 8109              	 .loc 26 1807 0
 8110 0dc0 284B     	 ldr r3,.L582
 8111 0dc2 1C68     	 ldr r4,[r3]
 8112 0dc4 3868     	 ldr r0,[r7]
 8113 0dc6 FFF7FEFF 	 bl sbufReadU8
 8114 0dca 0346     	 mov r3,r0
 8115 0dcc 84F82130 	 strb r3,[r4,#33]
 8116              	.L533:
1808:../cleanflight/src/main/interface/msp.c ****         }
1809:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 10) {
 8117              	 .loc 26 1809 0
 8118 0dd0 3868     	 ldr r0,[r7]
 8119 0dd2 FFF7FEFF 	 bl sbufBytesRemaining
 8120 0dd6 0346     	 mov r3,r0
 8121 0dd8 092B     	 cmp r3,#9
 8122 0dda 37DD     	 ble .L534
1810:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_hardware_lpf = sbufReadU8(src);
 8123              	 .loc 26 1810 0
 8124 0ddc FFF7FEFF 	 bl gyroConfigMutable
 8125 0de0 0446     	 mov r4,r0
 8126 0de2 3868     	 ldr r0,[r7]
 8127 0de4 FFF7FEFF 	 bl sbufReadU8
 8128 0de8 0346     	 mov r3,r0
 8129 0dea E370     	 strb r3,[r4,#3]
1811:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_32khz_hardware_lpf = sbufReadU8(src);
 8130              	 .loc 26 1811 0
 8131 0dec FFF7FEFF 	 bl gyroConfigMutable
 8132 0df0 0446     	 mov r4,r0
 8133 0df2 3868     	 ldr r0,[r7]
 8134 0df4 FFF7FEFF 	 bl sbufReadU8
 8135 0df8 0346     	 mov r3,r0
 8136 0dfa 2371     	 strb r3,[r4,#4]
1812:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_lowpass_hz = sbufReadU16(src);
 8137              	 .loc 26 1812 0
 8138 0dfc FFF7FEFF 	 bl gyroConfigMutable
 8139 0e00 0446     	 mov r4,r0
 8140 0e02 3868     	 ldr r0,[r7]
 8141 0e04 FFF7FEFF 	 bl sbufReadU16
 8142 0e08 0346     	 mov r3,r0
 8143 0e0a 2381     	 strh r3,[r4,#8]
1813:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_lowpass2_hz = sbufReadU16(src);
 8144              	 .loc 26 1813 0
 8145 0e0c FFF7FEFF 	 bl gyroConfigMutable
 8146 0e10 0446     	 mov r4,r0
 8147 0e12 3868     	 ldr r0,[r7]
 8148 0e14 FFF7FEFF 	 bl sbufReadU16
 8149 0e18 0346     	 mov r3,r0
 8150 0e1a 6381     	 strh r3,[r4,#10]
1814:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_lowpass_type = sbufReadU8(src);
 8151              	 .loc 26 1814 0
 8152 0e1c FFF7FEFF 	 bl gyroConfigMutable
 8153 0e20 0446     	 mov r4,r0
 8154 0e22 3868     	 ldr r0,[r7]
 8155 0e24 FFF7FEFF 	 bl sbufReadU8
 8156 0e28 0346     	 mov r3,r0
 8157 0e2a E375     	 strb r3,[r4,#23]
1815:../cleanflight/src/main/interface/msp.c ****             gyroConfigMutable()->gyro_lowpass2_type = sbufReadU8(src);
 8158              	 .loc 26 1815 0
 8159 0e2c FFF7FEFF 	 bl gyroConfigMutable
 8160 0e30 0446     	 mov r4,r0
 8161 0e32 3868     	 ldr r0,[r7]
 8162 0e34 FFF7FEFF 	 bl sbufReadU8
 8163 0e38 0346     	 mov r3,r0
 8164 0e3a 2376     	 strb r3,[r4,#24]
1816:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->dterm_lowpass2_hz = sbufReadU16(src);
 8165              	 .loc 26 1816 0
 8166 0e3c 094B     	 ldr r3,.L582
 8167 0e3e 1C68     	 ldr r4,[r3]
 8168 0e40 3868     	 ldr r0,[r7]
 8169 0e42 FFF7FEFF 	 bl sbufReadU16
 8170 0e46 0346     	 mov r3,r0
 8171 0e48 A4F84630 	 strh r3,[r4,#70]
 8172              	.L534:
1817:../cleanflight/src/main/interface/msp.c ****         }
1818:../cleanflight/src/main/interface/msp.c ****         // reinitialize the gyro filters with the new values
1819:../cleanflight/src/main/interface/msp.c ****         validateAndFixGyroConfig();
 8173              	 .loc 26 1819 0
 8174 0e4c FFF7FEFF 	 bl validateAndFixGyroConfig
1820:../cleanflight/src/main/interface/msp.c ****         gyroInitFilters();
 8175              	 .loc 26 1820 0
 8176 0e50 FFF7FEFF 	 bl gyroInitFilters
1821:../cleanflight/src/main/interface/msp.c ****         // reinitialize the PID filters with the new values
1822:../cleanflight/src/main/interface/msp.c ****         pidInitFilters(currentPidProfile);
 8177              	 .loc 26 1822 0
 8178 0e54 034B     	 ldr r3,.L582
 8179 0e56 1B68     	 ldr r3,[r3]
 8180 0e58 1846     	 mov r0,r3
 8181 0e5a FFF7FEFF 	 bl pidInitFilters
1823:../cleanflight/src/main/interface/msp.c **** 
1824:../cleanflight/src/main/interface/msp.c ****         break;
 8182              	 .loc 26 1824 0
 8183 0e5e 00F031BD 	 b .L494
 8184              	.L583:
 8185 0e62 00BF     	 .align 2
 8186              	.L582:
 8187 0e64 00000000 	 .word currentPidProfile
 8188              	.L460:
1825:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_PID_ADVANCED:
1826:../cleanflight/src/main/interface/msp.c ****         sbufReadU16(src);
 8189              	 .loc 26 1826 0
 8190 0e68 3868     	 ldr r0,[r7]
 8191 0e6a FFF7FEFF 	 bl sbufReadU16
1827:../cleanflight/src/main/interface/msp.c ****         sbufReadU16(src);
 8192              	 .loc 26 1827 0
 8193 0e6e 3868     	 ldr r0,[r7]
 8194 0e70 FFF7FEFF 	 bl sbufReadU16
1828:../cleanflight/src/main/interface/msp.c ****         sbufReadU16(src); // was pidProfile.yaw_p_limit
 8195              	 .loc 26 1828 0
 8196 0e74 3868     	 ldr r0,[r7]
 8197 0e76 FFF7FEFF 	 bl sbufReadU16
1829:../cleanflight/src/main/interface/msp.c ****         sbufReadU8(src); // reserved
 8198              	 .loc 26 1829 0
 8199 0e7a 3868     	 ldr r0,[r7]
 8200 0e7c FFF7FEFF 	 bl sbufReadU8
1830:../cleanflight/src/main/interface/msp.c ****         currentPidProfile->vbatPidCompensation = sbufReadU8(src);
 8201              	 .loc 26 1830 0
 8202 0e80 C24B     	 ldr r3,.L584
 8203 0e82 1C68     	 ldr r4,[r3]
 8204 0e84 3868     	 ldr r0,[r7]
 8205 0e86 FFF7FEFF 	 bl sbufReadU8
 8206 0e8a 0346     	 mov r3,r0
 8207 0e8c 84F84030 	 strb r3,[r4,#64]
1831:../cleanflight/src/main/interface/msp.c ****         currentPidProfile->feedForwardTransition = sbufReadU8(src);
 8208              	 .loc 26 1831 0
 8209 0e90 BE4B     	 ldr r3,.L584
 8210 0e92 1C68     	 ldr r4,[r3]
 8211 0e94 3868     	 ldr r0,[r7]
 8212 0e96 FFF7FEFF 	 bl sbufReadU8
 8213 0e9a 0346     	 mov r3,r0
 8214 0e9c 84F84130 	 strb r3,[r4,#65]
1832:../cleanflight/src/main/interface/msp.c ****         sbufReadU8(src); // was low byte of currentPidProfile->dtermSetpointWeight
 8215              	 .loc 26 1832 0
 8216 0ea0 3868     	 ldr r0,[r7]
 8217 0ea2 FFF7FEFF 	 bl sbufReadU8
1833:../cleanflight/src/main/interface/msp.c ****         sbufReadU8(src); // reserved
 8218              	 .loc 26 1833 0
 8219 0ea6 3868     	 ldr r0,[r7]
 8220 0ea8 FFF7FEFF 	 bl sbufReadU8
1834:../cleanflight/src/main/interface/msp.c ****         sbufReadU8(src); // reserved
 8221              	 .loc 26 1834 0
 8222 0eac 3868     	 ldr r0,[r7]
 8223 0eae FFF7FEFF 	 bl sbufReadU8
1835:../cleanflight/src/main/interface/msp.c ****         sbufReadU8(src); // reserved
 8224              	 .loc 26 1835 0
 8225 0eb2 3868     	 ldr r0,[r7]
 8226 0eb4 FFF7FEFF 	 bl sbufReadU8
1836:../cleanflight/src/main/interface/msp.c ****         currentPidProfile->rateAccelLimit = sbufReadU16(src);
 8227              	 .loc 26 1836 0
 8228 0eb8 B44B     	 ldr r3,.L584
 8229 0eba 1C68     	 ldr r4,[r3]
 8230 0ebc 3868     	 ldr r0,[r7]
 8231 0ebe FFF7FEFF 	 bl sbufReadU16
 8232 0ec2 0346     	 mov r3,r0
 8233 0ec4 6386     	 strh r3,[r4,#50]
1837:../cleanflight/src/main/interface/msp.c ****         currentPidProfile->yawRateAccelLimit = sbufReadU16(src);
 8234              	 .loc 26 1837 0
 8235 0ec6 B14B     	 ldr r3,.L584
 8236 0ec8 1C68     	 ldr r4,[r3]
 8237 0eca 3868     	 ldr r0,[r7]
 8238 0ecc FFF7FEFF 	 bl sbufReadU16
 8239 0ed0 0346     	 mov r3,r0
 8240 0ed2 2386     	 strh r3,[r4,#48]
1838:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 2) {
 8241              	 .loc 26 1838 0
 8242 0ed4 3868     	 ldr r0,[r7]
 8243 0ed6 FFF7FEFF 	 bl sbufBytesRemaining
 8244 0eda 0346     	 mov r3,r0
 8245 0edc 012B     	 cmp r3,#1
 8246 0ede 0ADD     	 ble .L535
1839:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->levelAngleLimit = sbufReadU8(src);
 8247              	 .loc 26 1839 0
 8248 0ee0 AA4B     	 ldr r3,.L584
 8249 0ee2 1C68     	 ldr r4,[r3]
 8250 0ee4 3868     	 ldr r0,[r7]
 8251 0ee6 FFF7FEFF 	 bl sbufReadU8
 8252 0eea 0346     	 mov r3,r0
 8253 0eec 84F82830 	 strb r3,[r4,#40]
1840:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src); // was pidProfile.levelSensitivity
 8254              	 .loc 26 1840 0
 8255 0ef0 3868     	 ldr r0,[r7]
 8256 0ef2 FFF7FEFF 	 bl sbufReadU8
 8257              	.L535:
1841:../cleanflight/src/main/interface/msp.c ****         }
1842:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 4) {
 8258              	 .loc 26 1842 0
 8259 0ef6 3868     	 ldr r0,[r7]
 8260 0ef8 FFF7FEFF 	 bl sbufBytesRemaining
 8261 0efc 0346     	 mov r3,r0
 8262 0efe 032B     	 cmp r3,#3
 8263 0f00 0DDD     	 ble .L536
1843:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->itermThrottleThreshold = sbufReadU16(src);
 8264              	 .loc 26 1843 0
 8265 0f02 A24B     	 ldr r3,.L584
 8266 0f04 1C68     	 ldr r4,[r3]
 8267 0f06 3868     	 ldr r0,[r7]
 8268 0f08 FFF7FEFF 	 bl sbufReadU16
 8269 0f0c 0346     	 mov r3,r0
 8270 0f0e A385     	 strh r3,[r4,#44]
1844:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->itermAcceleratorGain = sbufReadU16(src);
 8271              	 .loc 26 1844 0
 8272 0f10 9E4B     	 ldr r3,.L584
 8273 0f12 1C68     	 ldr r4,[r3]
 8274 0f14 3868     	 ldr r0,[r7]
 8275 0f16 FFF7FEFF 	 bl sbufReadU16
 8276 0f1a 0346     	 mov r3,r0
 8277 0f1c E385     	 strh r3,[r4,#46]
 8278              	.L536:
1845:../cleanflight/src/main/interface/msp.c ****         }
1846:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 2) {
 8279              	 .loc 26 1846 0
 8280 0f1e 3868     	 ldr r0,[r7]
 8281 0f20 FFF7FEFF 	 bl sbufBytesRemaining
 8282 0f24 0346     	 mov r3,r0
 8283 0f26 012B     	 cmp r3,#1
 8284 0f28 02DD     	 ble .L537
1847:../cleanflight/src/main/interface/msp.c ****             sbufReadU16(src); // was currentPidProfile->dtermSetpointWeight
 8285              	 .loc 26 1847 0
 8286 0f2a 3868     	 ldr r0,[r7]
 8287 0f2c FFF7FEFF 	 bl sbufReadU16
 8288              	.L537:
1848:../cleanflight/src/main/interface/msp.c ****         }
1849:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 14) {
 8289              	 .loc 26 1849 0
 8290 0f30 3868     	 ldr r0,[r7]
 8291 0f32 FFF7FEFF 	 bl sbufBytesRemaining
 8292 0f36 0346     	 mov r3,r0
 8293 0f38 0D2B     	 cmp r3,#13
 8294 0f3a 56DD     	 ble .L538
1850:../cleanflight/src/main/interface/msp.c ****             // Added in MSP API 1.40
1851:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->iterm_rotation = sbufReadU8(src);
 8295              	 .loc 26 1851 0
 8296 0f3c 934B     	 ldr r3,.L584
 8297 0f3e 1C68     	 ldr r4,[r3]
 8298 0f40 3868     	 ldr r0,[r7]
 8299 0f42 FFF7FEFF 	 bl sbufReadU8
 8300 0f46 0346     	 mov r3,r0
 8301 0f48 84F84B30 	 strb r3,[r4,#75]
1852:../cleanflight/src/main/interface/msp.c **** #if defined(USE_SMART_FEEDFORWARD)
1853:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->smart_feedforward = sbufReadU8(src);
 8302              	 .loc 26 1853 0
 8303 0f4c 8F4B     	 ldr r3,.L584
 8304 0f4e 1C68     	 ldr r4,[r3]
 8305 0f50 3868     	 ldr r0,[r7]
 8306 0f52 FFF7FEFF 	 bl sbufReadU8
 8307 0f56 0346     	 mov r3,r0
 8308 0f58 84F84C30 	 strb r3,[r4,#76]
1854:../cleanflight/src/main/interface/msp.c **** #else
1855:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
1856:../cleanflight/src/main/interface/msp.c **** #endif
1857:../cleanflight/src/main/interface/msp.c **** #if defined(USE_ITERM_RELAX)
1858:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->iterm_relax = sbufReadU8(src);
 8309              	 .loc 26 1858 0
 8310 0f5c 8B4B     	 ldr r3,.L584
 8311 0f5e 1C68     	 ldr r4,[r3]
 8312 0f60 3868     	 ldr r0,[r7]
 8313 0f62 FFF7FEFF 	 bl sbufReadU8
 8314 0f66 0346     	 mov r3,r0
 8315 0f68 84F84F30 	 strb r3,[r4,#79]
1859:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->iterm_relax_type = sbufReadU8(src);
 8316              	 .loc 26 1859 0
 8317 0f6c 874B     	 ldr r3,.L584
 8318 0f6e 1C68     	 ldr r4,[r3]
 8319 0f70 3868     	 ldr r0,[r7]
 8320 0f72 FFF7FEFF 	 bl sbufReadU8
 8321 0f76 0346     	 mov r3,r0
 8322 0f78 84F84D30 	 strb r3,[r4,#77]
1860:../cleanflight/src/main/interface/msp.c **** #else
1861:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
1862:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
1863:../cleanflight/src/main/interface/msp.c **** #endif
1864:../cleanflight/src/main/interface/msp.c **** #if defined(USE_ABSOLUTE_CONTROL)
1865:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->abs_control_gain = sbufReadU8(src);
 8323              	 .loc 26 1865 0
 8324 0f7c 834B     	 ldr r3,.L584
 8325 0f7e 1C68     	 ldr r4,[r3]
 8326 0f80 3868     	 ldr r0,[r7]
 8327 0f82 FFF7FEFF 	 bl sbufReadU8
 8328 0f86 0346     	 mov r3,r0
 8329 0f88 84F85530 	 strb r3,[r4,#85]
1866:../cleanflight/src/main/interface/msp.c **** #else
1867:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
1868:../cleanflight/src/main/interface/msp.c **** #endif
1869:../cleanflight/src/main/interface/msp.c **** #if defined(USE_THROTTLE_BOOST)
1870:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->throttle_boost = sbufReadU8(src);
 8330              	 .loc 26 1870 0
 8331 0f8c 7F4B     	 ldr r3,.L584
 8332 0f8e 1C68     	 ldr r4,[r3]
 8333 0f90 3868     	 ldr r0,[r7]
 8334 0f92 FFF7FEFF 	 bl sbufReadU8
 8335 0f96 0346     	 mov r3,r0
 8336 0f98 84F84930 	 strb r3,[r4,#73]
1871:../cleanflight/src/main/interface/msp.c **** #else
1872:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
1873:../cleanflight/src/main/interface/msp.c **** #endif
1874:../cleanflight/src/main/interface/msp.c **** #if defined(USE_ACRO_TRAINER)
1875:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->acro_trainer_angle_limit = sbufReadU8(src);
 8337              	 .loc 26 1875 0
 8338 0f9c 7B4B     	 ldr r3,.L584
 8339 0f9e 1C68     	 ldr r4,[r3]
 8340 0fa0 3868     	 ldr r0,[r7]
 8341 0fa2 FFF7FEFF 	 bl sbufReadU8
 8342 0fa6 0346     	 mov r3,r0
 8343 0fa8 84F85030 	 strb r3,[r4,#80]
1876:../cleanflight/src/main/interface/msp.c **** #else
1877:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
1878:../cleanflight/src/main/interface/msp.c **** #endif
1879:../cleanflight/src/main/interface/msp.c ****             // PID controller feedforward terms
1880:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->pid[PID_ROLL].F = sbufReadU16(src);
 8344              	 .loc 26 1880 0
 8345 0fac 774B     	 ldr r3,.L584
 8346 0fae 1C68     	 ldr r4,[r3]
 8347 0fb0 3868     	 ldr r0,[r7]
 8348 0fb2 FFF7FEFF 	 bl sbufReadU16
 8349 0fb6 0346     	 mov r3,r0
 8350 0fb8 A4F80B30 	 strh r3,[r4,#11]
1881:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->pid[PID_PITCH].F = sbufReadU16(src);
 8351              	 .loc 26 1881 0
 8352 0fbc 734B     	 ldr r3,.L584
 8353 0fbe 1C68     	 ldr r4,[r3]
 8354 0fc0 3868     	 ldr r0,[r7]
 8355 0fc2 FFF7FEFF 	 bl sbufReadU16
 8356 0fc6 0346     	 mov r3,r0
 8357 0fc8 2382     	 strh r3,[r4,#16]
1882:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->pid[PID_YAW].F = sbufReadU16(src);
 8358              	 .loc 26 1882 0
 8359 0fca 704B     	 ldr r3,.L584
 8360 0fcc 1C68     	 ldr r4,[r3]
 8361 0fce 3868     	 ldr r0,[r7]
 8362 0fd0 FFF7FEFF 	 bl sbufReadU16
 8363 0fd4 0346     	 mov r3,r0
 8364 0fd6 A4F81530 	 strh r3,[r4,#21]
1883:../cleanflight/src/main/interface/msp.c **** 
1884:../cleanflight/src/main/interface/msp.c ****             currentPidProfile->antiGravityMode = sbufReadU8(src);
 8365              	 .loc 26 1884 0
 8366 0fda 6C4B     	 ldr r3,.L584
 8367 0fdc 1C68     	 ldr r4,[r3]
 8368 0fde 3868     	 ldr r0,[r7]
 8369 0fe0 FFF7FEFF 	 bl sbufReadU8
 8370 0fe4 0346     	 mov r3,r0
 8371 0fe6 84F82B30 	 strb r3,[r4,#43]
 8372              	.L538:
1885:../cleanflight/src/main/interface/msp.c ****         }
1886:../cleanflight/src/main/interface/msp.c ****         pidInitConfig(currentPidProfile);
 8373              	 .loc 26 1886 0
 8374 0fea 684B     	 ldr r3,.L584
 8375 0fec 1B68     	 ldr r3,[r3]
 8376 0fee 1846     	 mov r0,r3
 8377 0ff0 FFF7FEFF 	 bl pidInitConfig
1887:../cleanflight/src/main/interface/msp.c **** 
1888:../cleanflight/src/main/interface/msp.c ****         break;
 8378              	 .loc 26 1888 0
 8379 0ff4 00F066BC 	 b .L494
 8380              	.L461:
1889:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_SENSOR_CONFIG:
1890:../cleanflight/src/main/interface/msp.c ****         accelerometerConfigMutable()->acc_hardware = sbufReadU8(src);
 8381              	 .loc 26 1890 0
 8382 0ff8 FFF7FEFF 	 bl accelerometerConfigMutable
 8383 0ffc 0446     	 mov r4,r0
 8384 0ffe 3868     	 ldr r0,[r7]
 8385 1000 FFF7FEFF 	 bl sbufReadU8
 8386 1004 0346     	 mov r3,r0
 8387 1006 E370     	 strb r3,[r4,#3]
1891:../cleanflight/src/main/interface/msp.c ****         barometerConfigMutable()->baro_hardware = sbufReadU8(src);
 8388              	 .loc 26 1891 0
 8389 1008 FFF7FEFF 	 bl barometerConfigMutable
 8390 100c 0446     	 mov r4,r0
 8391 100e 3868     	 ldr r0,[r7]
 8392 1010 FFF7FEFF 	 bl sbufReadU8
 8393 1014 0346     	 mov r3,r0
 8394 1016 6371     	 strb r3,[r4,#5]
1892:../cleanflight/src/main/interface/msp.c ****         compassConfigMutable()->mag_hardware = sbufReadU8(src);
 8395              	 .loc 26 1892 0
 8396 1018 FFF7FEFF 	 bl compassConfigMutable
 8397 101c 0446     	 mov r4,r0
 8398 101e 3868     	 ldr r0,[r7]
 8399 1020 FFF7FEFF 	 bl sbufReadU8
 8400 1024 0346     	 mov r3,r0
 8401 1026 E370     	 strb r3,[r4,#3]
1893:../cleanflight/src/main/interface/msp.c ****         break;
 8402              	 .loc 26 1893 0
 8403 1028 00F04CBC 	 b .L494
 8404              	.L471:
1894:../cleanflight/src/main/interface/msp.c **** 
1895:../cleanflight/src/main/interface/msp.c ****     case MSP_RESET_CONF:
1896:../cleanflight/src/main/interface/msp.c ****         if (!ARMING_FLAG(ARMED)) {
 8405              	 .loc 26 1896 0
 8406 102c 584B     	 ldr r3,.L584+4
 8407 102e 1B78     	 ldrb r3,[r3]
 8408 1030 03F00103 	 and r3,r3,#1
 8409 1034 002B     	 cmp r3,#0
 8410 1036 05D1     	 bne .L539
1897:../cleanflight/src/main/interface/msp.c ****             resetEEPROM();
 8411              	 .loc 26 1897 0
 8412 1038 FFF7FEFF 	 bl resetEEPROM
1898:../cleanflight/src/main/interface/msp.c ****             readEEPROM();
 8413              	 .loc 26 1898 0
 8414 103c FFF7FEFF 	 bl readEEPROM
1899:../cleanflight/src/main/interface/msp.c ****         }
1900:../cleanflight/src/main/interface/msp.c ****         break;
 8415              	 .loc 26 1900 0
 8416 1040 00F040BC 	 b .L494
 8417              	.L539:
 8418 1044 00F03EBC 	 b .L494
 8419              	.L469:
1901:../cleanflight/src/main/interface/msp.c **** 
1902:../cleanflight/src/main/interface/msp.c ****     case MSP_ACC_CALIBRATION:
1903:../cleanflight/src/main/interface/msp.c ****         if (!ARMING_FLAG(ARMED))
 8420              	 .loc 26 1903 0
 8421 1048 514B     	 ldr r3,.L584+4
 8422 104a 1B78     	 ldrb r3,[r3]
 8423 104c 03F00103 	 and r3,r3,#1
 8424 1050 002B     	 cmp r3,#0
 8425 1052 05D1     	 bne .L540
1904:../cleanflight/src/main/interface/msp.c ****             accSetCalibrationCycles(CALIBRATING_ACC_CYCLES);
 8426              	 .loc 26 1904 0
 8427 1054 4FF4C870 	 mov r0,#400
 8428 1058 FFF7FEFF 	 bl accSetCalibrationCycles
1905:../cleanflight/src/main/interface/msp.c ****         break;
 8429              	 .loc 26 1905 0
 8430 105c 00F032BC 	 b .L494
 8431              	.L540:
 8432 1060 00F030BC 	 b .L494
 8433              	.L470:
1906:../cleanflight/src/main/interface/msp.c **** 
1907:../cleanflight/src/main/interface/msp.c ****     case MSP_MAG_CALIBRATION:
1908:../cleanflight/src/main/interface/msp.c ****         if (!ARMING_FLAG(ARMED))
 8434              	 .loc 26 1908 0
 8435 1064 4A4B     	 ldr r3,.L584+4
 8436 1066 1B78     	 ldrb r3,[r3]
 8437 1068 03F00103 	 and r3,r3,#1
 8438 106c 002B     	 cmp r3,#0
 8439 106e 08D1     	 bne .L541
1909:../cleanflight/src/main/interface/msp.c ****             ENABLE_STATE(CALIBRATE_MAG);
 8440              	 .loc 26 1909 0
 8441 1070 484B     	 ldr r3,.L584+8
 8442 1072 1B78     	 ldrb r3,[r3]
 8443 1074 43F00403 	 orr r3,r3,#4
 8444 1078 DAB2     	 uxtb r2,r3
 8445 107a 464B     	 ldr r3,.L584+8
 8446 107c 1A70     	 strb r2,[r3]
1910:../cleanflight/src/main/interface/msp.c ****         break;
 8447              	 .loc 26 1910 0
 8448 107e 00F021BC 	 b .L494
 8449              	.L541:
 8450 1082 00F01FBC 	 b .L494
 8451              	.L488:
1911:../cleanflight/src/main/interface/msp.c **** 
1912:../cleanflight/src/main/interface/msp.c ****     case MSP_EEPROM_WRITE:
1913:../cleanflight/src/main/interface/msp.c ****         if (ARMING_FLAG(ARMED)) {
 8452              	 .loc 26 1913 0
 8453 1086 424B     	 ldr r3,.L584+4
 8454 1088 1B78     	 ldrb r3,[r3]
 8455 108a 03F00103 	 and r3,r3,#1
 8456 108e 002B     	 cmp r3,#0
 8457 1090 02D0     	 beq .L542
1914:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
 8458              	 .loc 26 1914 0
 8459 1092 FF23     	 movs r3,#255
 8460 1094 00F017BC 	 b .L498
 8461              	.L542:
1915:../cleanflight/src/main/interface/msp.c ****         }
1916:../cleanflight/src/main/interface/msp.c ****         writeEEPROM();
 8462              	 .loc 26 1916 0
 8463 1098 FFF7FEFF 	 bl writeEEPROM
1917:../cleanflight/src/main/interface/msp.c ****         readEEPROM();
 8464              	 .loc 26 1917 0
 8465 109c FFF7FEFF 	 bl readEEPROM
1918:../cleanflight/src/main/interface/msp.c ****         break;
 8466              	 .loc 26 1918 0
 8467 10a0 00F010BC 	 b .L494
 8468              	.L456:
1919:../cleanflight/src/main/interface/msp.c **** 
1920:../cleanflight/src/main/interface/msp.c **** #ifdef USE_BLACKBOX
1921:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_BLACKBOX_CONFIG:
1922:../cleanflight/src/main/interface/msp.c ****         // Don't allow config to be updated while Blackbox is logging
1923:../cleanflight/src/main/interface/msp.c ****         if (blackboxMayEditConfig()) {
 8469              	 .loc 26 1923 0
 8470 10a4 FFF7FEFF 	 bl blackboxMayEditConfig
 8471 10a8 0346     	 mov r3,r0
 8472 10aa 002B     	 cmp r3,#0
 8473 10ac 2BD0     	 beq .L543
 8474              	.LBB57:
1924:../cleanflight/src/main/interface/msp.c ****             blackboxConfigMutable()->device = sbufReadU8(src);
 8475              	 .loc 26 1924 0
 8476 10ae FFF7FEFF 	 bl blackboxConfigMutable
 8477 10b2 0446     	 mov r4,r0
 8478 10b4 3868     	 ldr r0,[r7]
 8479 10b6 FFF7FEFF 	 bl sbufReadU8
 8480 10ba 0346     	 mov r3,r0
 8481 10bc A370     	 strb r3,[r4,#2]
1925:../cleanflight/src/main/interface/msp.c ****             const int rateNum = sbufReadU8(src); // was rate_num
 8482              	 .loc 26 1925 0
 8483 10be 3868     	 ldr r0,[r7]
 8484 10c0 FFF7FEFF 	 bl sbufReadU8
 8485 10c4 0346     	 mov r3,r0
 8486 10c6 7B67     	 str r3,[r7,#116]
1926:../cleanflight/src/main/interface/msp.c ****             const int rateDenom = sbufReadU8(src); // was rate_denom
 8487              	 .loc 26 1926 0
 8488 10c8 3868     	 ldr r0,[r7]
 8489 10ca FFF7FEFF 	 bl sbufReadU8
 8490 10ce 0346     	 mov r3,r0
 8491 10d0 3B67     	 str r3,[r7,#112]
1927:../cleanflight/src/main/interface/msp.c ****             if (sbufBytesRemaining(src) >= 2) {
 8492              	 .loc 26 1927 0
 8493 10d2 3868     	 ldr r0,[r7]
 8494 10d4 FFF7FEFF 	 bl sbufBytesRemaining
 8495 10d8 0346     	 mov r3,r0
 8496 10da 012B     	 cmp r3,#1
 8497 10dc 08DD     	 ble .L544
1928:../cleanflight/src/main/interface/msp.c ****                 // p_ratio specified, so use it directly
1929:../cleanflight/src/main/interface/msp.c ****                 blackboxConfigMutable()->p_ratio = sbufReadU16(src);
 8498              	 .loc 26 1929 0
 8499 10de FFF7FEFF 	 bl blackboxConfigMutable
 8500 10e2 0446     	 mov r4,r0
 8501 10e4 3868     	 ldr r0,[r7]
 8502 10e6 FFF7FEFF 	 bl sbufReadU16
 8503 10ea 0346     	 mov r3,r0
 8504 10ec 2380     	 strh r3,[r4]
 8505 10ee 0AE0     	 b .L543
 8506              	.L544:
1930:../cleanflight/src/main/interface/msp.c ****             } else {
1931:../cleanflight/src/main/interface/msp.c ****                 // p_ratio not specified in MSP, so calculate it from old rateNum and rateDenom
1932:../cleanflight/src/main/interface/msp.c ****                 blackboxConfigMutable()->p_ratio = blackboxCalculatePDenom(rateNum, rateDenom);
 8507              	 .loc 26 1932 0
 8508 10f0 FFF7FEFF 	 bl blackboxConfigMutable
 8509 10f4 0446     	 mov r4,r0
 8510 10f6 786F     	 ldr r0,[r7,#116]
 8511 10f8 396F     	 ldr r1,[r7,#112]
 8512 10fa FFF7FEFF 	 bl blackboxCalculatePDenom
 8513 10fe 0346     	 mov r3,r0
 8514 1100 9BB2     	 uxth r3,r3
 8515 1102 2380     	 strh r3,[r4]
 8516              	.LBE57:
1933:../cleanflight/src/main/interface/msp.c ****             }
1934:../cleanflight/src/main/interface/msp.c ****         }
1935:../cleanflight/src/main/interface/msp.c ****         break;
 8517              	 .loc 26 1935 0
 8518 1104 DEE3     	 b .L494
 8519              	.L543:
 8520 1106 DDE3     	 b .L494
 8521              	.L457:
 8522              	.LBB58:
1936:../cleanflight/src/main/interface/msp.c **** #endif
1937:../cleanflight/src/main/interface/msp.c **** 
1938:../cleanflight/src/main/interface/msp.c **** #ifdef USE_VTX_COMMON
1939:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_VTX_CONFIG:
1940:../cleanflight/src/main/interface/msp.c ****         {
1941:../cleanflight/src/main/interface/msp.c ****             vtxDevice_t *vtxDevice = vtxCommonDevice();
 8523              	 .loc 26 1941 0
 8524 1108 FFF7FEFF 	 bl vtxCommonDevice
 8525 110c F866     	 str r0,[r7,#108]
1942:../cleanflight/src/main/interface/msp.c ****             if (vtxDevice) {
 8526              	 .loc 26 1942 0
 8527 110e FB6E     	 ldr r3,[r7,#108]
 8528 1110 002B     	 cmp r3,#0
 8529 1112 77D0     	 beq .L545
1943:../cleanflight/src/main/interface/msp.c ****                 if (vtxCommonGetDeviceType(vtxDevice) != VTXDEV_UNKNOWN) {
 8530              	 .loc 26 1943 0
 8531 1114 F86E     	 ldr r0,[r7,#108]
 8532 1116 FFF7FEFF 	 bl vtxCommonGetDeviceType
 8533 111a 0346     	 mov r3,r0
 8534 111c FF2B     	 cmp r3,#255
 8535 111e 71D0     	 beq .L545
 8536              	.LBB59:
1944:../cleanflight/src/main/interface/msp.c ****                     uint16_t newFrequency = sbufReadU16(src);
 8537              	 .loc 26 1944 0
 8538 1120 3868     	 ldr r0,[r7]
 8539 1122 FFF7FEFF 	 bl sbufReadU16
 8540 1126 0346     	 mov r3,r0
 8541 1128 A7F86A30 	 strh r3,[r7,#106]
1945:../cleanflight/src/main/interface/msp.c ****                     if (newFrequency <= VTXCOMMON_MSP_BANDCHAN_CHKVAL) {  //value is band and chann
 8542              	 .loc 26 1945 0
 8543 112c B7F86A30 	 ldrh r3,[r7,#106]
 8544 1130 3F2B     	 cmp r3,#63
 8545 1132 31D8     	 bhi .L546
 8546              	.LBB60:
1946:../cleanflight/src/main/interface/msp.c ****                         const uint8_t newBand = (newFrequency / 8) + 1;
 8547              	 .loc 26 1946 0
 8548 1134 B7F86A30 	 ldrh r3,[r7,#106]
 8549 1138 DB08     	 lsrs r3,r3,#3
 8550 113a 9BB2     	 uxth r3,r3
 8551 113c DBB2     	 uxtb r3,r3
 8552 113e 0133     	 adds r3,r3,#1
 8553 1140 87F86930 	 strb r3,[r7,#105]
1947:../cleanflight/src/main/interface/msp.c ****                         const uint8_t newChannel = (newFrequency % 8) + 1;
 8554              	 .loc 26 1947 0
 8555 1144 B7F86A30 	 ldrh r3,[r7,#106]
 8556 1148 DBB2     	 uxtb r3,r3
 8557 114a 03F00703 	 and r3,r3,#7
 8558 114e DBB2     	 uxtb r3,r3
 8559 1150 0133     	 adds r3,r3,#1
 8560 1152 87F86830 	 strb r3,[r7,#104]
1948:../cleanflight/src/main/interface/msp.c ****                         vtxSettingsConfigMutable()->band = newBand;
 8561              	 .loc 26 1948 0
 8562 1156 FFF7FEFF 	 bl vtxSettingsConfigMutable
 8563 115a 0246     	 mov r2,r0
 8564 115c 97F86930 	 ldrb r3,[r7,#105]
 8565 1160 1370     	 strb r3,[r2]
1949:../cleanflight/src/main/interface/msp.c ****                         vtxSettingsConfigMutable()->channel = newChannel;
 8566              	 .loc 26 1949 0
 8567 1162 FFF7FEFF 	 bl vtxSettingsConfigMutable
 8568 1166 0246     	 mov r2,r0
 8569 1168 97F86830 	 ldrb r3,[r7,#104]
 8570 116c 5370     	 strb r3,[r2,#1]
1950:../cleanflight/src/main/interface/msp.c ****                         vtxSettingsConfigMutable()->freq = vtx58_Bandchan2Freq(newBand, newChannel)
 8571              	 .loc 26 1950 0
 8572 116e FFF7FEFF 	 bl vtxSettingsConfigMutable
 8573 1172 0446     	 mov r4,r0
 8574 1174 97F86920 	 ldrb r2,[r7,#105]
 8575 1178 97F86830 	 ldrb r3,[r7,#104]
 8576 117c 1046     	 mov r0,r2
 8577 117e 1946     	 mov r1,r3
 8578 1180 FFF7FEFF 	 bl vtx58_Bandchan2Freq
 8579 1184 0346     	 mov r3,r0
 8580 1186 A4F80330 	 strh r3,[r4,#3]
 8581              	.LBE60:
 8582 118a 11E0     	 b .L547
 8583              	.L585:
 8584              	 .align 2
 8585              	.L584:
 8586 118c 00000000 	 .word currentPidProfile
 8587 1190 00000000 	 .word armingFlags
 8588 1194 00000000 	 .word stateFlags
 8589              	.L546:
1951:../cleanflight/src/main/interface/msp.c ****                     } else {  //value is frequency in MHz
1952:../cleanflight/src/main/interface/msp.c ****                         vtxSettingsConfigMutable()->band = 0;
 8590              	 .loc 26 1952 0
 8591 1198 FFF7FEFF 	 bl vtxSettingsConfigMutable
 8592 119c 0346     	 mov r3,r0
 8593 119e 0022     	 movs r2,#0
 8594 11a0 1A70     	 strb r2,[r3]
1953:../cleanflight/src/main/interface/msp.c ****                         vtxSettingsConfigMutable()->freq = newFrequency;
 8595              	 .loc 26 1953 0
 8596 11a2 FFF7FEFF 	 bl vtxSettingsConfigMutable
 8597 11a6 0346     	 mov r3,r0
 8598 11a8 B7F86A20 	 ldrh r2,[r7,#106]
 8599 11ac A3F80320 	 strh r2,[r3,#3]
 8600              	.L547:
1954:../cleanflight/src/main/interface/msp.c ****                     }
1955:../cleanflight/src/main/interface/msp.c **** 
1956:../cleanflight/src/main/interface/msp.c ****                     if (sbufBytesRemaining(src) > 1) {
 8601              	 .loc 26 1956 0
 8602 11b0 3868     	 ldr r0,[r7]
 8603 11b2 FFF7FEFF 	 bl sbufBytesRemaining
 8604 11b6 0346     	 mov r3,r0
 8605 11b8 012B     	 cmp r3,#1
 8606 11ba 23DD     	 ble .L545
 8607              	.LBB61:
1957:../cleanflight/src/main/interface/msp.c ****                         vtxSettingsConfigMutable()->power = sbufReadU8(src);
 8608              	 .loc 26 1957 0
 8609 11bc FFF7FEFF 	 bl vtxSettingsConfigMutable
 8610 11c0 0446     	 mov r4,r0
 8611 11c2 3868     	 ldr r0,[r7]
 8612 11c4 FFF7FEFF 	 bl sbufReadU8
 8613 11c8 0346     	 mov r3,r0
 8614 11ca A370     	 strb r3,[r4,#2]
1958:../cleanflight/src/main/interface/msp.c ****                         // Delegate pitmode to vtx directly
1959:../cleanflight/src/main/interface/msp.c ****                         const uint8_t newPitmode = sbufReadU8(src);
 8615              	 .loc 26 1959 0
 8616 11cc 3868     	 ldr r0,[r7]
 8617 11ce FFF7FEFF 	 bl sbufReadU8
 8618 11d2 0346     	 mov r3,r0
 8619 11d4 87F86730 	 strb r3,[r7,#103]
1960:../cleanflight/src/main/interface/msp.c ****                         uint8_t currentPitmode = 0;
 8620              	 .loc 26 1960 0
 8621 11d8 0023     	 movs r3,#0
 8622 11da 87F85B30 	 strb r3,[r7,#91]
1961:../cleanflight/src/main/interface/msp.c ****                         vtxCommonGetPitMode(vtxDevice, &currentPitmode);
 8623              	 .loc 26 1961 0
 8624 11de 07F15B03 	 add r3,r7,#91
 8625 11e2 F86E     	 ldr r0,[r7,#108]
 8626 11e4 1946     	 mov r1,r3
 8627 11e6 FFF7FEFF 	 bl vtxCommonGetPitMode
1962:../cleanflight/src/main/interface/msp.c ****                         if (currentPitmode != newPitmode) {
 8628              	 .loc 26 1962 0
 8629 11ea 97F85B30 	 ldrb r3,[r7,#91]
 8630 11ee 97F86720 	 ldrb r2,[r7,#103]
 8631 11f2 9A42     	 cmp r2,r3
 8632 11f4 06D0     	 beq .L545
1963:../cleanflight/src/main/interface/msp.c ****                             vtxCommonSetPitMode(vtxDevice, newPitmode);
 8633              	 .loc 26 1963 0
 8634 11f6 97F86730 	 ldrb r3,[r7,#103]
 8635 11fa F86E     	 ldr r0,[r7,#108]
 8636 11fc 1946     	 mov r1,r3
 8637 11fe FFF7FEFF 	 bl vtxCommonSetPitMode
 8638              	.LBE61:
 8639              	.LBE59:
 8640              	.LBE58:
1964:../cleanflight/src/main/interface/msp.c ****                         }
1965:../cleanflight/src/main/interface/msp.c ****                     }
1966:../cleanflight/src/main/interface/msp.c ****                 }
1967:../cleanflight/src/main/interface/msp.c ****             }
1968:../cleanflight/src/main/interface/msp.c ****         }
1969:../cleanflight/src/main/interface/msp.c ****         break;
 8641              	 .loc 26 1969 0
 8642 1202 5FE3     	 b .L494
 8643              	.L545:
 8644              	 .loc 26 1969 0 is_stmt 0 discriminator 4
 8645 1204 5EE3     	 b .L494
 8646              	.L462:
 8647              	.LBB62:
1970:../cleanflight/src/main/interface/msp.c **** #endif
1971:../cleanflight/src/main/interface/msp.c **** 
1972:../cleanflight/src/main/interface/msp.c **** #ifdef USE_CAMERA_CONTROL
1973:../cleanflight/src/main/interface/msp.c ****     case MSP_CAMERA_CONTROL:
1974:../cleanflight/src/main/interface/msp.c ****         {
1975:../cleanflight/src/main/interface/msp.c ****             if (ARMING_FLAG(ARMED)) {
1976:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
1977:../cleanflight/src/main/interface/msp.c ****             }
1978:../cleanflight/src/main/interface/msp.c **** 
1979:../cleanflight/src/main/interface/msp.c ****             const uint8_t key = sbufReadU8(src);
1980:../cleanflight/src/main/interface/msp.c ****             cameraControlKeyPress(key, 0);
1981:../cleanflight/src/main/interface/msp.c ****         }
1982:../cleanflight/src/main/interface/msp.c ****         break;
1983:../cleanflight/src/main/interface/msp.c **** #endif
1984:../cleanflight/src/main/interface/msp.c **** 
1985:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_ARMING_DISABLED:
1986:../cleanflight/src/main/interface/msp.c ****         {
1987:../cleanflight/src/main/interface/msp.c ****             const uint8_t command = sbufReadU8(src);
 8648              	 .loc 26 1987 0 is_stmt 1
 8649 1206 3868     	 ldr r0,[r7]
 8650 1208 FFF7FEFF 	 bl sbufReadU8
 8651 120c 0346     	 mov r3,r0
 8652 120e 87F86630 	 strb r3,[r7,#102]
1988:../cleanflight/src/main/interface/msp.c ****             uint8_t disableRunawayTakeoff = 0;
 8653              	 .loc 26 1988 0
 8654 1212 0023     	 movs r3,#0
 8655 1214 87F8C330 	 strb r3,[r7,#195]
1989:../cleanflight/src/main/interface/msp.c **** #ifndef USE_RUNAWAY_TAKEOFF
1990:../cleanflight/src/main/interface/msp.c ****             UNUSED(disableRunawayTakeoff);
1991:../cleanflight/src/main/interface/msp.c **** #endif
1992:../cleanflight/src/main/interface/msp.c ****             if (sbufBytesRemaining(src)) {
 8656              	 .loc 26 1992 0
 8657 1218 3868     	 ldr r0,[r7]
 8658 121a FFF7FEFF 	 bl sbufBytesRemaining
 8659 121e 0346     	 mov r3,r0
 8660 1220 002B     	 cmp r3,#0
 8661 1222 05D0     	 beq .L549
1993:../cleanflight/src/main/interface/msp.c ****                 disableRunawayTakeoff = sbufReadU8(src);
 8662              	 .loc 26 1993 0
 8663 1224 3868     	 ldr r0,[r7]
 8664 1226 FFF7FEFF 	 bl sbufReadU8
 8665 122a 0346     	 mov r3,r0
 8666 122c 87F8C330 	 strb r3,[r7,#195]
 8667              	.L549:
1994:../cleanflight/src/main/interface/msp.c ****             }
1995:../cleanflight/src/main/interface/msp.c ****             if (command) {
 8668              	 .loc 26 1995 0
 8669 1230 97F86630 	 ldrb r3,[r7,#102]
 8670 1234 002B     	 cmp r3,#0
 8671 1236 0FD0     	 beq .L550
1996:../cleanflight/src/main/interface/msp.c ****                 setArmingDisabled(ARMING_DISABLED_MSP);
 8672              	 .loc 26 1996 0
 8673 1238 4FF48030 	 mov r0,#65536
 8674 123c FFF7FEFF 	 bl setArmingDisabled
1997:../cleanflight/src/main/interface/msp.c ****                 if (ARMING_FLAG(ARMED)) {
 8675              	 .loc 26 1997 0
 8676 1240 C64B     	 ldr r3,.L586
 8677 1242 1B78     	 ldrb r3,[r3]
 8678 1244 03F00103 	 and r3,r3,#1
 8679 1248 002B     	 cmp r3,#0
 8680 124a 01D0     	 beq .L551
1998:../cleanflight/src/main/interface/msp.c ****                     disarm();
 8681              	 .loc 26 1998 0
 8682 124c FFF7FEFF 	 bl disarm
 8683              	.L551:
1999:../cleanflight/src/main/interface/msp.c ****                 }
2000:../cleanflight/src/main/interface/msp.c **** #ifdef USE_RUNAWAY_TAKEOFF
2001:../cleanflight/src/main/interface/msp.c ****                 runawayTakeoffTemporaryDisable(false);
 8684              	 .loc 26 2001 0
 8685 1250 0020     	 movs r0,#0
 8686 1252 FFF7FEFF 	 bl runawayTakeoffTemporaryDisable
 8687              	.LBE62:
2002:../cleanflight/src/main/interface/msp.c **** #endif
2003:../cleanflight/src/main/interface/msp.c ****             } else {
2004:../cleanflight/src/main/interface/msp.c ****                 unsetArmingDisabled(ARMING_DISABLED_MSP);
2005:../cleanflight/src/main/interface/msp.c **** #ifdef USE_RUNAWAY_TAKEOFF
2006:../cleanflight/src/main/interface/msp.c ****                 runawayTakeoffTemporaryDisable(disableRunawayTakeoff);
2007:../cleanflight/src/main/interface/msp.c **** #endif
2008:../cleanflight/src/main/interface/msp.c ****             }
2009:../cleanflight/src/main/interface/msp.c ****         }
2010:../cleanflight/src/main/interface/msp.c ****         break;
 8688              	 .loc 26 2010 0
 8689 1256 35E3     	 b .L494
 8690              	.L550:
 8691              	.LBB63:
2004:../cleanflight/src/main/interface/msp.c **** #ifdef USE_RUNAWAY_TAKEOFF
 8692              	 .loc 26 2004 0
 8693 1258 4FF48030 	 mov r0,#65536
 8694 125c FFF7FEFF 	 bl unsetArmingDisabled
2006:../cleanflight/src/main/interface/msp.c **** #endif
 8695              	 .loc 26 2006 0
 8696 1260 97F8C330 	 ldrb r3,[r7,#195]
 8697 1264 1846     	 mov r0,r3
 8698 1266 FFF7FEFF 	 bl runawayTakeoffTemporaryDisable
 8699              	.LBE63:
 8700              	 .loc 26 2010 0
 8701 126a 2BE3     	 b .L494
 8702              	.L466:
2011:../cleanflight/src/main/interface/msp.c **** 
2012:../cleanflight/src/main/interface/msp.c **** #ifdef USE_FLASHFS
2013:../cleanflight/src/main/interface/msp.c ****     case MSP_DATAFLASH_ERASE:
2014:../cleanflight/src/main/interface/msp.c ****         flashfsEraseCompletely();
2015:../cleanflight/src/main/interface/msp.c ****         break;
2016:../cleanflight/src/main/interface/msp.c **** #endif
2017:../cleanflight/src/main/interface/msp.c **** 
2018:../cleanflight/src/main/interface/msp.c **** #ifdef USE_GPS
2019:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RAW_GPS:
2020:../cleanflight/src/main/interface/msp.c ****         if (sbufReadU8(src)) {
 8703              	 .loc 26 2020 0
 8704 126c 3868     	 ldr r0,[r7]
 8705 126e FFF7FEFF 	 bl sbufReadU8
 8706 1272 0346     	 mov r3,r0
 8707 1274 002B     	 cmp r3,#0
 8708 1276 07D0     	 beq .L553
2021:../cleanflight/src/main/interface/msp.c ****             ENABLE_STATE(GPS_FIX);
 8709              	 .loc 26 2021 0
 8710 1278 B94B     	 ldr r3,.L586+4
 8711 127a 1B78     	 ldrb r3,[r3]
 8712 127c 43F00203 	 orr r3,r3,#2
 8713 1280 DAB2     	 uxtb r2,r3
 8714 1282 B74B     	 ldr r3,.L586+4
 8715 1284 1A70     	 strb r2,[r3]
 8716 1286 06E0     	 b .L554
 8717              	.L553:
2022:../cleanflight/src/main/interface/msp.c ****         } else {
2023:../cleanflight/src/main/interface/msp.c ****             DISABLE_STATE(GPS_FIX);
 8718              	 .loc 26 2023 0
 8719 1288 B54B     	 ldr r3,.L586+4
 8720 128a 1B78     	 ldrb r3,[r3]
 8721 128c 23F00203 	 bic r3,r3,#2
 8722 1290 DAB2     	 uxtb r2,r3
 8723 1292 B34B     	 ldr r3,.L586+4
 8724 1294 1A70     	 strb r2,[r3]
 8725              	.L554:
2024:../cleanflight/src/main/interface/msp.c ****         }
2025:../cleanflight/src/main/interface/msp.c ****         gpsSol.numSat = sbufReadU8(src);
 8726              	 .loc 26 2025 0
 8727 1296 3868     	 ldr r0,[r7]
 8728 1298 FFF7FEFF 	 bl sbufReadU8
 8729 129c 0346     	 mov r3,r0
 8730 129e 1A46     	 mov r2,r3
 8731 12a0 B04B     	 ldr r3,.L586+8
 8732 12a2 9A74     	 strb r2,[r3,#18]
2026:../cleanflight/src/main/interface/msp.c ****         gpsSol.llh.lat = sbufReadU32(src);
 8733              	 .loc 26 2026 0
 8734 12a4 3868     	 ldr r0,[r7]
 8735 12a6 FFF7FEFF 	 bl sbufReadU32
 8736 12aa 0346     	 mov r3,r0
 8737 12ac 1A46     	 mov r2,r3
 8738 12ae AD4B     	 ldr r3,.L586+8
 8739 12b0 1A60     	 str r2,[r3]
2027:../cleanflight/src/main/interface/msp.c ****         gpsSol.llh.lon = sbufReadU32(src);
 8740              	 .loc 26 2027 0
 8741 12b2 3868     	 ldr r0,[r7]
 8742 12b4 FFF7FEFF 	 bl sbufReadU32
 8743 12b8 0346     	 mov r3,r0
 8744 12ba 1A46     	 mov r2,r3
 8745 12bc A94B     	 ldr r3,.L586+8
 8746 12be 5A60     	 str r2,[r3,#4]
2028:../cleanflight/src/main/interface/msp.c ****         gpsSol.llh.alt = sbufReadU16(src) * 100; // alt changed from 1m to 0.01m per lsb since MSP 
 8747              	 .loc 26 2028 0
 8748 12c0 3868     	 ldr r0,[r7]
 8749 12c2 FFF7FEFF 	 bl sbufReadU16
 8750 12c6 0346     	 mov r3,r0
 8751 12c8 1A46     	 mov r2,r3
 8752 12ca 6423     	 movs r3,#100
 8753 12cc 03FB02F3 	 mul r3,r3,r2
 8754 12d0 A44A     	 ldr r2,.L586+8
 8755 12d2 9360     	 str r3,[r2,#8]
2029:../cleanflight/src/main/interface/msp.c ****         gpsSol.groundSpeed = sbufReadU16(src);
 8756              	 .loc 26 2029 0
 8757 12d4 3868     	 ldr r0,[r7]
 8758 12d6 FFF7FEFF 	 bl sbufReadU16
 8759 12da 0346     	 mov r3,r0
 8760 12dc 1A46     	 mov r2,r3
 8761 12de A14B     	 ldr r3,.L586+8
 8762 12e0 9A81     	 strh r2,[r3,#12]
2030:../cleanflight/src/main/interface/msp.c ****         GPS_update |= 2;        // New data signalisation to GPS functions // FIXME Magic Numbers
 8763              	 .loc 26 2030 0
 8764 12e2 A14B     	 ldr r3,.L586+12
 8765 12e4 1B78     	 ldrb r3,[r3]
 8766 12e6 43F00203 	 orr r3,r3,#2
 8767 12ea DAB2     	 uxtb r2,r3
 8768 12ec 9E4B     	 ldr r3,.L586+12
 8769 12ee 1A70     	 strb r2,[r3]
2031:../cleanflight/src/main/interface/msp.c ****         break;
 8770              	 .loc 26 2031 0
 8771 12f0 E8E2     	 b .L494
 8772              	.L444:
2032:../cleanflight/src/main/interface/msp.c **** #endif // USE_GPS
2033:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_FEATURE_CONFIG:
2034:../cleanflight/src/main/interface/msp.c ****         featureClearAll();
 8773              	 .loc 26 2034 0
 8774 12f2 FFF7FEFF 	 bl featureClearAll
2035:../cleanflight/src/main/interface/msp.c ****         featureSet(sbufReadU32(src)); // features bitmap
 8775              	 .loc 26 2035 0
 8776 12f6 3868     	 ldr r0,[r7]
 8777 12f8 FFF7FEFF 	 bl sbufReadU32
 8778 12fc 0346     	 mov r3,r0
 8779 12fe 1846     	 mov r0,r3
 8780 1300 FFF7FEFF 	 bl featureSet
2036:../cleanflight/src/main/interface/msp.c ****         break;
 8781              	 .loc 26 2036 0
 8782 1304 DEE2     	 b .L494
 8783              	.L445:
2037:../cleanflight/src/main/interface/msp.c **** 
2038:../cleanflight/src/main/interface/msp.c **** #ifdef USE_BEEPER
2039:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_BEEPER_CONFIG:
2040:../cleanflight/src/main/interface/msp.c ****         beeperConfigMutable()->beeper_off_flags = sbufReadU32(src);
2041:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 1) {
2042:../cleanflight/src/main/interface/msp.c ****             beeperConfigMutable()->dshotBeaconTone = sbufReadU8(src);
2043:../cleanflight/src/main/interface/msp.c ****         }
2044:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 4) {
2045:../cleanflight/src/main/interface/msp.c ****             beeperConfigMutable()->dshotBeaconOffFlags = sbufReadU32(src);
2046:../cleanflight/src/main/interface/msp.c ****         }
2047:../cleanflight/src/main/interface/msp.c ****         break;
2048:../cleanflight/src/main/interface/msp.c **** #endif
2049:../cleanflight/src/main/interface/msp.c **** 
2050:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_BOARD_ALIGNMENT_CONFIG:
2051:../cleanflight/src/main/interface/msp.c ****         boardAlignmentMutable()->rollDegrees = sbufReadU16(src);
 8784              	 .loc 26 2051 0
 8785 1306 FFF7FEFF 	 bl boardAlignmentMutable
 8786 130a 0446     	 mov r4,r0
 8787 130c 3868     	 ldr r0,[r7]
 8788 130e FFF7FEFF 	 bl sbufReadU16
 8789 1312 0346     	 mov r3,r0
 8790 1314 2360     	 str r3,[r4]
2052:../cleanflight/src/main/interface/msp.c ****         boardAlignmentMutable()->pitchDegrees = sbufReadU16(src);
 8791              	 .loc 26 2052 0
 8792 1316 FFF7FEFF 	 bl boardAlignmentMutable
 8793 131a 0446     	 mov r4,r0
 8794 131c 3868     	 ldr r0,[r7]
 8795 131e FFF7FEFF 	 bl sbufReadU16
 8796 1322 0346     	 mov r3,r0
 8797 1324 6360     	 str r3,[r4,#4]
2053:../cleanflight/src/main/interface/msp.c ****         boardAlignmentMutable()->yawDegrees = sbufReadU16(src);
 8798              	 .loc 26 2053 0
 8799 1326 FFF7FEFF 	 bl boardAlignmentMutable
 8800 132a 0446     	 mov r4,r0
 8801 132c 3868     	 ldr r0,[r7]
 8802 132e FFF7FEFF 	 bl sbufReadU16
 8803 1332 0346     	 mov r3,r0
 8804 1334 A360     	 str r3,[r4,#8]
2054:../cleanflight/src/main/interface/msp.c ****         break;
 8805              	 .loc 26 2054 0
 8806 1336 C5E2     	 b .L494
 8807              	.L446:
2055:../cleanflight/src/main/interface/msp.c **** 
2056:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_MIXER_CONFIG:
2057:../cleanflight/src/main/interface/msp.c **** #ifndef USE_QUAD_MIXER_ONLY
2058:../cleanflight/src/main/interface/msp.c ****         mixerConfigMutable()->mixerMode = sbufReadU8(src);
 8808              	 .loc 26 2058 0
 8809 1338 FFF7FEFF 	 bl mixerConfigMutable
 8810 133c 0446     	 mov r4,r0
 8811 133e 3868     	 ldr r0,[r7]
 8812 1340 FFF7FEFF 	 bl sbufReadU8
 8813 1344 0346     	 mov r3,r0
 8814 1346 2370     	 strb r3,[r4]
2059:../cleanflight/src/main/interface/msp.c **** #else
2060:../cleanflight/src/main/interface/msp.c ****         sbufReadU8(src);
2061:../cleanflight/src/main/interface/msp.c **** #endif
2062:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 1) {
 8815              	 .loc 26 2062 0
 8816 1348 3868     	 ldr r0,[r7]
 8817 134a FFF7FEFF 	 bl sbufBytesRemaining
 8818 134e 0346     	 mov r3,r0
 8819 1350 002B     	 cmp r3,#0
 8820 1352 0DDD     	 ble .L555
2063:../cleanflight/src/main/interface/msp.c ****             mixerConfigMutable()->yaw_motors_reversed = sbufReadU8(src);
 8821              	 .loc 26 2063 0
 8822 1354 FFF7FEFF 	 bl mixerConfigMutable
 8823 1358 0446     	 mov r4,r0
 8824 135a 3868     	 ldr r0,[r7]
 8825 135c FFF7FEFF 	 bl sbufReadU8
 8826 1360 0346     	 mov r3,r0
 8827 1362 002B     	 cmp r3,#0
 8828 1364 14BF     	 ite ne
 8829 1366 0123     	 movne r3,#1
 8830 1368 0023     	 moveq r3,#0
 8831 136a DBB2     	 uxtb r3,r3
 8832 136c 6370     	 strb r3,[r4,#1]
2064:../cleanflight/src/main/interface/msp.c ****         }
2065:../cleanflight/src/main/interface/msp.c ****         break;
 8833              	 .loc 26 2065 0
 8834 136e A9E2     	 b .L494
 8835              	.L555:
 8836 1370 A8E2     	 b .L494
 8837              	.L447:
2066:../cleanflight/src/main/interface/msp.c **** 
2067:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RX_CONFIG:
2068:../cleanflight/src/main/interface/msp.c ****         rxConfigMutable()->serialrx_provider = sbufReadU8(src);
 8838              	 .loc 26 2068 0
 8839 1372 FFF7FEFF 	 bl rxConfigMutable
 8840 1376 0446     	 mov r4,r0
 8841 1378 3868     	 ldr r0,[r7]
 8842 137a FFF7FEFF 	 bl sbufReadU8
 8843 137e 0346     	 mov r3,r0
 8844 1380 2372     	 strb r3,[r4,#8]
2069:../cleanflight/src/main/interface/msp.c ****         rxConfigMutable()->maxcheck = sbufReadU16(src);
 8845              	 .loc 26 2069 0
 8846 1382 FFF7FEFF 	 bl rxConfigMutable
 8847 1386 0446     	 mov r4,r0
 8848 1388 3868     	 ldr r0,[r7]
 8849 138a FFF7FEFF 	 bl sbufReadU16
 8850 138e 0346     	 mov r3,r0
 8851 1390 E382     	 strh r3,[r4,#22]
2070:../cleanflight/src/main/interface/msp.c ****         rxConfigMutable()->midrc = sbufReadU16(src);
 8852              	 .loc 26 2070 0
 8853 1392 FFF7FEFF 	 bl rxConfigMutable
 8854 1396 0446     	 mov r4,r0
 8855 1398 3868     	 ldr r0,[r7]
 8856 139a FFF7FEFF 	 bl sbufReadU16
 8857 139e 0346     	 mov r3,r0
 8858 13a0 6382     	 strh r3,[r4,#18]
2071:../cleanflight/src/main/interface/msp.c ****         rxConfigMutable()->mincheck = sbufReadU16(src);
 8859              	 .loc 26 2071 0
 8860 13a2 FFF7FEFF 	 bl rxConfigMutable
 8861 13a6 0446     	 mov r4,r0
 8862 13a8 3868     	 ldr r0,[r7]
 8863 13aa FFF7FEFF 	 bl sbufReadU16
 8864 13ae 0346     	 mov r3,r0
 8865 13b0 A382     	 strh r3,[r4,#20]
2072:../cleanflight/src/main/interface/msp.c ****         rxConfigMutable()->spektrum_sat_bind = sbufReadU8(src);
 8866              	 .loc 26 2072 0
 8867 13b2 FFF7FEFF 	 bl rxConfigMutable
 8868 13b6 0446     	 mov r4,r0
 8869 13b8 3868     	 ldr r0,[r7]
 8870 13ba FFF7FEFF 	 bl sbufReadU8
 8871 13be 0346     	 mov r3,r0
 8872 13c0 6373     	 strb r3,[r4,#13]
2073:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 4) {
 8873              	 .loc 26 2073 0
 8874 13c2 3868     	 ldr r0,[r7]
 8875 13c4 FFF7FEFF 	 bl sbufBytesRemaining
 8876 13c8 0346     	 mov r3,r0
 8877 13ca 032B     	 cmp r3,#3
 8878 13cc 11DD     	 ble .L556
2074:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rx_min_usec = sbufReadU16(src);
 8879              	 .loc 26 2074 0
 8880 13ce FFF7FEFF 	 bl rxConfigMutable
 8881 13d2 0446     	 mov r4,r0
 8882 13d4 3868     	 ldr r0,[r7]
 8883 13d6 FFF7FEFF 	 bl sbufReadU16
 8884 13da 0346     	 mov r3,r0
 8885 13dc A4F81D30 	 strh r3,[r4,#29]
2075:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rx_max_usec = sbufReadU16(src);
 8886              	 .loc 26 2075 0
 8887 13e0 FFF7FEFF 	 bl rxConfigMutable
 8888 13e4 0446     	 mov r4,r0
 8889 13e6 3868     	 ldr r0,[r7]
 8890 13e8 FFF7FEFF 	 bl sbufReadU16
 8891 13ec 0346     	 mov r3,r0
 8892 13ee A4F81F30 	 strh r3,[r4,#31]
 8893              	.L556:
2076:../cleanflight/src/main/interface/msp.c ****         }
2077:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 4) {
 8894              	 .loc 26 2077 0
 8895 13f2 3868     	 ldr r0,[r7]
 8896 13f4 FFF7FEFF 	 bl sbufBytesRemaining
 8897 13f8 0346     	 mov r3,r0
 8898 13fa 032B     	 cmp r3,#3
 8899 13fc 20DD     	 ble .L557
2078:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rcInterpolation = sbufReadU8(src);
 8900              	 .loc 26 2078 0
 8901 13fe FFF7FEFF 	 bl rxConfigMutable
 8902 1402 0446     	 mov r4,r0
 8903 1404 3868     	 ldr r0,[r7]
 8904 1406 FFF7FEFF 	 bl sbufReadU8
 8905 140a 0346     	 mov r3,r0
 8906 140c 2376     	 strb r3,[r4,#24]
2079:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rcInterpolationInterval = sbufReadU8(src);
 8907              	 .loc 26 2079 0
 8908 140e FFF7FEFF 	 bl rxConfigMutable
 8909 1412 0446     	 mov r4,r0
 8910 1414 3868     	 ldr r0,[r7]
 8911 1416 FFF7FEFF 	 bl sbufReadU8
 8912 141a 0346     	 mov r3,r0
 8913 141c A376     	 strb r3,[r4,#26]
2080:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->airModeActivateThreshold = (sbufReadU16(src) - 1000) / 10;
 8914              	 .loc 26 2080 0
 8915 141e FFF7FEFF 	 bl rxConfigMutable
 8916 1422 0446     	 mov r4,r0
 8917 1424 3868     	 ldr r0,[r7]
 8918 1426 FFF7FEFF 	 bl sbufReadU16
 8919 142a 0346     	 mov r3,r0
 8920 142c A3F57A73 	 sub r3,r3,#1000
 8921 1430 4E4A     	 ldr r2,.L586+16
 8922 1432 82FB0312 	 smull r1,r2,r2,r3
 8923 1436 9210     	 asrs r2,r2,#2
 8924 1438 DB17     	 asrs r3,r3,#31
 8925 143a D31A     	 subs r3,r2,r3
 8926 143c DBB2     	 uxtb r3,r3
 8927 143e 2377     	 strb r3,[r4,#28]
 8928              	.L557:
2081:../cleanflight/src/main/interface/msp.c ****         }
2082:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 6) {
 8929              	 .loc 26 2082 0
 8930 1440 3868     	 ldr r0,[r7]
 8931 1442 FFF7FEFF 	 bl sbufBytesRemaining
 8932 1446 0346     	 mov r3,r0
 8933 1448 052B     	 cmp r3,#5
 8934 144a 08DD     	 ble .L558
2083:../cleanflight/src/main/interface/msp.c **** #ifdef USE_RX_SPI
2084:../cleanflight/src/main/interface/msp.c ****             rxSpiConfigMutable()->rx_spi_protocol = sbufReadU8(src);
2085:../cleanflight/src/main/interface/msp.c ****             rxSpiConfigMutable()->rx_spi_id = sbufReadU32(src);
2086:../cleanflight/src/main/interface/msp.c ****             rxSpiConfigMutable()->rx_spi_rf_channel_count = sbufReadU8(src);
2087:../cleanflight/src/main/interface/msp.c **** #else
2088:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
 8935              	 .loc 26 2088 0
 8936 144c 3868     	 ldr r0,[r7]
 8937 144e FFF7FEFF 	 bl sbufReadU8
2089:../cleanflight/src/main/interface/msp.c ****             sbufReadU32(src);
 8938              	 .loc 26 2089 0
 8939 1452 3868     	 ldr r0,[r7]
 8940 1454 FFF7FEFF 	 bl sbufReadU32
2090:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
 8941              	 .loc 26 2090 0
 8942 1458 3868     	 ldr r0,[r7]
 8943 145a FFF7FEFF 	 bl sbufReadU8
 8944              	.L558:
2091:../cleanflight/src/main/interface/msp.c **** #endif
2092:../cleanflight/src/main/interface/msp.c ****         }
2093:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 1) {
 8945              	 .loc 26 2093 0
 8946 145e 3868     	 ldr r0,[r7]
 8947 1460 FFF7FEFF 	 bl sbufBytesRemaining
 8948 1464 0346     	 mov r3,r0
 8949 1466 002B     	 cmp r3,#0
 8950 1468 07DD     	 ble .L559
2094:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->fpvCamAngleDegrees = sbufReadU8(src);
 8951              	 .loc 26 2094 0
 8952 146a FFF7FEFF 	 bl rxConfigMutable
 8953 146e 0446     	 mov r4,r0
 8954 1470 3868     	 ldr r0,[r7]
 8955 1472 FFF7FEFF 	 bl sbufReadU8
 8956 1476 0346     	 mov r3,r0
 8957 1478 E376     	 strb r3,[r4,#27]
 8958              	.L559:
2095:../cleanflight/src/main/interface/msp.c ****         }
2096:../cleanflight/src/main/interface/msp.c ****         if (sbufBytesRemaining(src) >= 6) {
 8959              	 .loc 26 2096 0
 8960 147a 3868     	 ldr r0,[r7]
 8961 147c FFF7FEFF 	 bl sbufBytesRemaining
 8962 1480 0346     	 mov r3,r0
 8963 1482 052B     	 cmp r3,#5
 8964 1484 38DD     	 ble .L560
2097:../cleanflight/src/main/interface/msp.c ****             // Added in MSP API 1.40
2098:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rcInterpolationChannels = sbufReadU8(src);
 8965              	 .loc 26 2098 0
 8966 1486 FFF7FEFF 	 bl rxConfigMutable
 8967 148a 0446     	 mov r4,r0
 8968 148c 3868     	 ldr r0,[r7]
 8969 148e FFF7FEFF 	 bl sbufReadU8
 8970 1492 0346     	 mov r3,r0
 8971 1494 6376     	 strb r3,[r4,#25]
2099:../cleanflight/src/main/interface/msp.c **** #if defined(USE_RC_SMOOTHING_FILTER)
2100:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rc_smoothing_type = sbufReadU8(src);
 8972              	 .loc 26 2100 0
 8973 1496 FFF7FEFF 	 bl rxConfigMutable
 8974 149a 0446     	 mov r4,r0
 8975 149c 3868     	 ldr r0,[r7]
 8976 149e FFF7FEFF 	 bl sbufReadU8
 8977 14a2 0346     	 mov r3,r0
 8978 14a4 84F82430 	 strb r3,[r4,#36]
2101:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rc_smoothing_input_cutoff = sbufReadU8(src);
 8979              	 .loc 26 2101 0
 8980 14a8 FFF7FEFF 	 bl rxConfigMutable
 8981 14ac 0446     	 mov r4,r0
 8982 14ae 3868     	 ldr r0,[r7]
 8983 14b0 FFF7FEFF 	 bl sbufReadU8
 8984 14b4 0346     	 mov r3,r0
 8985 14b6 84F82530 	 strb r3,[r4,#37]
2102:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rc_smoothing_derivative_cutoff = sbufReadU8(src);
 8986              	 .loc 26 2102 0
 8987 14ba FFF7FEFF 	 bl rxConfigMutable
 8988 14be 0446     	 mov r4,r0
 8989 14c0 3868     	 ldr r0,[r7]
 8990 14c2 FFF7FEFF 	 bl sbufReadU8
 8991 14c6 0346     	 mov r3,r0
 8992 14c8 84F82630 	 strb r3,[r4,#38]
2103:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rc_smoothing_input_type = sbufReadU8(src);
 8993              	 .loc 26 2103 0
 8994 14cc FFF7FEFF 	 bl rxConfigMutable
 8995 14d0 0446     	 mov r4,r0
 8996 14d2 3868     	 ldr r0,[r7]
 8997 14d4 FFF7FEFF 	 bl sbufReadU8
 8998 14d8 0346     	 mov r3,r0
 8999 14da 84F82830 	 strb r3,[r4,#40]
2104:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rc_smoothing_derivative_type = sbufReadU8(src);
 9000              	 .loc 26 2104 0
 9001 14de FFF7FEFF 	 bl rxConfigMutable
 9002 14e2 0446     	 mov r4,r0
 9003 14e4 3868     	 ldr r0,[r7]
 9004 14e6 FFF7FEFF 	 bl sbufReadU8
 9005 14ea 0346     	 mov r3,r0
 9006 14ec 84F82930 	 strb r3,[r4,#41]
2105:../cleanflight/src/main/interface/msp.c **** #else
2106:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
2107:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
2108:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
2109:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
2110:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
2111:../cleanflight/src/main/interface/msp.c **** #endif
2112:../cleanflight/src/main/interface/msp.c **** #if defined(USE_USB_CDC_HID)
2113:../cleanflight/src/main/interface/msp.c ****             usbDevConfigMutable()->type = sbufReadU8(src);
2114:../cleanflight/src/main/interface/msp.c **** #else
2115:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
 9007              	 .loc 26 2115 0
 9008 14f0 3868     	 ldr r0,[r7]
 9009 14f2 FFF7FEFF 	 bl sbufReadU8
2116:../cleanflight/src/main/interface/msp.c **** #endif
2117:../cleanflight/src/main/interface/msp.c ****         }
2118:../cleanflight/src/main/interface/msp.c **** 
2119:../cleanflight/src/main/interface/msp.c ****         break;
 9010              	 .loc 26 2119 0
 9011 14f6 E5E1     	 b .L494
 9012              	.L560:
 9013 14f8 E4E1     	 b .L494
 9014              	.L454:
2120:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_FAILSAFE_CONFIG:
2121:../cleanflight/src/main/interface/msp.c ****         failsafeConfigMutable()->failsafe_delay = sbufReadU8(src);
 9015              	 .loc 26 2121 0
 9016 14fa FFF7FEFF 	 bl failsafeConfigMutable
 9017 14fe 0446     	 mov r4,r0
 9018 1500 3868     	 ldr r0,[r7]
 9019 1502 FFF7FEFF 	 bl sbufReadU8
 9020 1506 0346     	 mov r3,r0
 9021 1508 2371     	 strb r3,[r4,#4]
2122:../cleanflight/src/main/interface/msp.c ****         failsafeConfigMutable()->failsafe_off_delay = sbufReadU8(src);
 9022              	 .loc 26 2122 0
 9023 150a FFF7FEFF 	 bl failsafeConfigMutable
 9024 150e 0446     	 mov r4,r0
 9025 1510 3868     	 ldr r0,[r7]
 9026 1512 FFF7FEFF 	 bl sbufReadU8
 9027 1516 0346     	 mov r3,r0
 9028 1518 6371     	 strb r3,[r4,#5]
2123:../cleanflight/src/main/interface/msp.c ****         failsafeConfigMutable()->failsafe_throttle = sbufReadU16(src);
 9029              	 .loc 26 2123 0
 9030 151a FFF7FEFF 	 bl failsafeConfigMutable
 9031 151e 0446     	 mov r4,r0
 9032 1520 3868     	 ldr r0,[r7]
 9033 1522 FFF7FEFF 	 bl sbufReadU16
 9034 1526 0346     	 mov r3,r0
 9035 1528 2380     	 strh r3,[r4]
2124:../cleanflight/src/main/interface/msp.c ****         failsafeConfigMutable()->failsafe_switch_mode = sbufReadU8(src);
 9036              	 .loc 26 2124 0
 9037 152a FFF7FEFF 	 bl failsafeConfigMutable
 9038 152e 0446     	 mov r4,r0
 9039 1530 3868     	 ldr r0,[r7]
 9040 1532 FFF7FEFF 	 bl sbufReadU8
 9041 1536 0346     	 mov r3,r0
 9042 1538 A371     	 strb r3,[r4,#6]
2125:../cleanflight/src/main/interface/msp.c ****         failsafeConfigMutable()->failsafe_throttle_low_delay = sbufReadU16(src);
 9043              	 .loc 26 2125 0
 9044 153a FFF7FEFF 	 bl failsafeConfigMutable
 9045 153e 0446     	 mov r4,r0
 9046 1540 3868     	 ldr r0,[r7]
 9047 1542 FFF7FEFF 	 bl sbufReadU16
 9048 1546 0346     	 mov r3,r0
 9049 1548 6380     	 strh r3,[r4,#2]
2126:../cleanflight/src/main/interface/msp.c ****         failsafeConfigMutable()->failsafe_procedure = sbufReadU8(src);
 9050              	 .loc 26 2126 0
 9051 154a FFF7FEFF 	 bl failsafeConfigMutable
 9052 154e 0446     	 mov r4,r0
 9053 1550 3868     	 ldr r0,[r7]
 9054 1552 FFF7FEFF 	 bl sbufReadU8
 9055 1556 0346     	 mov r3,r0
 9056 1558 E371     	 strb r3,[r4,#7]
2127:../cleanflight/src/main/interface/msp.c ****         break;
 9057              	 .loc 26 2127 0
 9058 155a B3E1     	 b .L494
 9059              	.L587:
 9060              	 .align 2
 9061              	.L586:
 9062 155c 00000000 	 .word armingFlags
 9063 1560 00000000 	 .word stateFlags
 9064 1564 00000000 	 .word gpsSol
 9065 1568 00000000 	 .word GPS_update
 9066 156c 67666666 	 .word 1717986919
 9067              	.L455:
2128:../cleanflight/src/main/interface/msp.c **** 
2129:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RXFAIL_CONFIG:
2130:../cleanflight/src/main/interface/msp.c ****         i = sbufReadU8(src);
 9068              	 .loc 26 2130 0
 9069 1570 3868     	 ldr r0,[r7]
 9070 1572 FFF7FEFF 	 bl sbufReadU8
 9071 1576 0346     	 mov r3,r0
 9072 1578 C7F8A830 	 str r3,[r7,#168]
2131:../cleanflight/src/main/interface/msp.c ****         if (i < MAX_SUPPORTED_RC_CHANNEL_COUNT) {
 9073              	 .loc 26 2131 0
 9074 157c D7F8A830 	 ldr r3,[r7,#168]
 9075 1580 112B     	 cmp r3,#17
 9076 1582 27D8     	 bhi .L561
2132:../cleanflight/src/main/interface/msp.c ****             rxFailsafeChannelConfigsMutable(i)->mode = sbufReadU8(src);
 9077              	 .loc 26 2132 0
 9078 1584 D7F8A830 	 ldr r3,[r7,#168]
 9079 1588 1846     	 mov r0,r3
 9080 158a FFF7FEFF 	 bl rxFailsafeChannelConfigsMutable
 9081 158e 0446     	 mov r4,r0
 9082 1590 3868     	 ldr r0,[r7]
 9083 1592 FFF7FEFF 	 bl sbufReadU8
 9084 1596 0346     	 mov r3,r0
 9085 1598 2370     	 strb r3,[r4]
2133:../cleanflight/src/main/interface/msp.c ****             rxFailsafeChannelConfigsMutable(i)->step = CHANNEL_VALUE_TO_RXFAIL_STEP(sbufReadU16(src
 9086              	 .loc 26 2133 0
 9087 159a D7F8A830 	 ldr r3,[r7,#168]
 9088 159e 1846     	 mov r0,r3
 9089 15a0 FFF7FEFF 	 bl rxFailsafeChannelConfigsMutable
 9090 15a4 0446     	 mov r4,r0
 9091 15a6 3868     	 ldr r0,[r7]
 9092 15a8 FFF7FEFF 	 bl sbufReadU16
 9093 15ac 0346     	 mov r3,r0
 9094 15ae 1846     	 mov r0,r3
 9095 15b0 40F2EE21 	 movw r1,#750
 9096 15b4 40F6CA02 	 movw r2,#2250
 9097 15b8 FFF7FEFF 	 bl constrain
 9098 15bc 0346     	 mov r3,r0
 9099 15be A3F2EE23 	 subw r3,r3,#750
 9100 15c2 C34A     	 ldr r2,.L588
 9101 15c4 82FB0312 	 smull r1,r2,r2,r3
 9102 15c8 D210     	 asrs r2,r2,#3
 9103 15ca DB17     	 asrs r3,r3,#31
 9104 15cc D31A     	 subs r3,r2,r3
 9105 15ce DBB2     	 uxtb r3,r3
 9106 15d0 6370     	 strb r3,[r4,#1]
2134:../cleanflight/src/main/interface/msp.c ****         } else {
2135:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
2136:../cleanflight/src/main/interface/msp.c ****         }
2137:../cleanflight/src/main/interface/msp.c ****         break;
 9107              	 .loc 26 2137 0
 9108 15d2 77E1     	 b .L494
 9109              	.L561:
2135:../cleanflight/src/main/interface/msp.c ****         }
 9110              	 .loc 26 2135 0
 9111 15d4 FF23     	 movs r3,#255
 9112 15d6 76E1     	 b .L498
 9113              	.L448:
2138:../cleanflight/src/main/interface/msp.c **** 
2139:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RSSI_CONFIG:
2140:../cleanflight/src/main/interface/msp.c ****         rxConfigMutable()->rssi_channel = sbufReadU8(src);
 9114              	 .loc 26 2140 0
 9115 15d8 FFF7FEFF 	 bl rxConfigMutable
 9116 15dc 0446     	 mov r4,r0
 9117 15de 3868     	 ldr r0,[r7]
 9118 15e0 FFF7FEFF 	 bl sbufReadU8
 9119 15e4 0346     	 mov r3,r0
 9120 15e6 E373     	 strb r3,[r4,#15]
2141:../cleanflight/src/main/interface/msp.c ****         break;
 9121              	 .loc 26 2141 0
 9122 15e8 6CE1     	 b .L494
 9123              	.L453:
 9124              	.LBB64:
2142:../cleanflight/src/main/interface/msp.c **** 
2143:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RX_MAP:
2144:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < RX_MAPPABLE_CHANNEL_COUNT; i++) {
 9125              	 .loc 26 2144 0
 9126 15ea 0023     	 movs r3,#0
 9127 15ec C7F8BC30 	 str r3,[r7,#188]
 9128 15f0 10E0     	 b .L563
 9129              	.L564:
2145:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rcmap[i] = sbufReadU8(src);
 9130              	 .loc 26 2145 0 discriminator 3
 9131 15f2 FFF7FEFF 	 bl rxConfigMutable
 9132 15f6 0446     	 mov r4,r0
 9133 15f8 3868     	 ldr r0,[r7]
 9134 15fa FFF7FEFF 	 bl sbufReadU8
 9135 15fe 0346     	 mov r3,r0
 9136 1600 1A46     	 mov r2,r3
 9137 1602 D7F8BC30 	 ldr r3,[r7,#188]
 9138 1606 2344     	 add r3,r3,r4
 9139 1608 1A70     	 strb r2,[r3]
2144:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rcmap[i] = sbufReadU8(src);
 9140              	 .loc 26 2144 0 discriminator 3
 9141 160a D7F8BC30 	 ldr r3,[r7,#188]
 9142 160e 0133     	 adds r3,r3,#1
 9143 1610 C7F8BC30 	 str r3,[r7,#188]
 9144              	.L563:
2144:../cleanflight/src/main/interface/msp.c ****             rxConfigMutable()->rcmap[i] = sbufReadU8(src);
 9145              	 .loc 26 2144 0 is_stmt 0 discriminator 1
 9146 1614 D7F8BC30 	 ldr r3,[r7,#188]
 9147 1618 072B     	 cmp r3,#7
 9148 161a EADD     	 ble .L564
 9149              	.LBE64:
2146:../cleanflight/src/main/interface/msp.c ****         }
2147:../cleanflight/src/main/interface/msp.c ****         break;
 9150              	 .loc 26 2147 0 is_stmt 1
 9151 161c 52E1     	 b .L494
 9152              	.L450:
 9153              	.LBB65:
2148:../cleanflight/src/main/interface/msp.c **** 
2149:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_CF_SERIAL_CONFIG:
2150:../cleanflight/src/main/interface/msp.c ****         {
2151:../cleanflight/src/main/interface/msp.c ****             uint8_t portConfigSize = sizeof(uint8_t) + sizeof(uint16_t) + (sizeof(uint8_t) * 4);
 9154              	 .loc 26 2151 0
 9155 161e 0723     	 movs r3,#7
 9156 1620 87F89330 	 strb r3,[r7,#147]
2152:../cleanflight/src/main/interface/msp.c **** 
2153:../cleanflight/src/main/interface/msp.c ****             if (dataSize % portConfigSize != 0) {
 9157              	 .loc 26 2153 0
 9158 1624 97F89320 	 ldrb r2,[r7,#147]
 9159 1628 D7F8B030 	 ldr r3,[r7,#176]
 9160 162c B3FBF2F1 	 udiv r1,r3,r2
 9161 1630 02FB01F2 	 mul r2,r2,r1
 9162 1634 9B1A     	 subs r3,r3,r2
 9163 1636 002B     	 cmp r3,#0
 9164 1638 01D0     	 beq .L565
2154:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
 9165              	 .loc 26 2154 0
 9166 163a FF23     	 movs r3,#255
 9167 163c 43E1     	 b .L498
 9168              	.L565:
2155:../cleanflight/src/main/interface/msp.c ****             }
2156:../cleanflight/src/main/interface/msp.c **** 
2157:../cleanflight/src/main/interface/msp.c ****             uint8_t remainingPortsInPacket = dataSize / portConfigSize;
 9169              	 .loc 26 2157 0
 9170 163e 97F89330 	 ldrb r3,[r7,#147]
 9171 1642 D7F8B020 	 ldr r2,[r7,#176]
 9172 1646 B2FBF3F3 	 udiv r3,r2,r3
 9173 164a 87F8BB30 	 strb r3,[r7,#187]
2158:../cleanflight/src/main/interface/msp.c **** 
2159:../cleanflight/src/main/interface/msp.c ****             while (remainingPortsInPacket--) {
 9174              	 .loc 26 2159 0
 9175 164e 40E0     	 b .L566
 9176              	.L568:
 9177              	.LBB66:
2160:../cleanflight/src/main/interface/msp.c ****                 uint8_t identifier = sbufReadU8(src);
 9178              	 .loc 26 2160 0
 9179 1650 3868     	 ldr r0,[r7]
 9180 1652 FFF7FEFF 	 bl sbufReadU8
 9181 1656 0346     	 mov r3,r0
 9182 1658 87F89230 	 strb r3,[r7,#146]
2161:../cleanflight/src/main/interface/msp.c **** 
2162:../cleanflight/src/main/interface/msp.c ****                 serialPortConfig_t *portConfig = serialFindPortConfiguration(identifier);
 9183              	 .loc 26 2162 0
 9184 165c 97F89230 	 ldrb r3,[r7,#146]
 9185 1660 5BB2     	 sxtb r3,r3
 9186 1662 1846     	 mov r0,r3
 9187 1664 FFF7FEFF 	 bl serialFindPortConfiguration
 9188 1668 C7F88C00 	 str r0,[r7,#140]
2163:../cleanflight/src/main/interface/msp.c ****                 if (!portConfig) {
 9189              	 .loc 26 2163 0
 9190 166c D7F88C30 	 ldr r3,[r7,#140]
 9191 1670 002B     	 cmp r3,#0
 9192 1672 01D1     	 bne .L567
2164:../cleanflight/src/main/interface/msp.c ****                     return MSP_RESULT_ERROR;
 9193              	 .loc 26 2164 0
 9194 1674 FF23     	 movs r3,#255
 9195 1676 26E1     	 b .L498
 9196              	.L567:
2165:../cleanflight/src/main/interface/msp.c ****                 }
2166:../cleanflight/src/main/interface/msp.c **** 
2167:../cleanflight/src/main/interface/msp.c ****                 portConfig->identifier = identifier;
 9197              	 .loc 26 2167 0
 9198 1678 97F89220 	 ldrb r2,[r7,#146]
 9199 167c D7F88C30 	 ldr r3,[r7,#140]
 9200 1680 9A70     	 strb r2,[r3,#2]
2168:../cleanflight/src/main/interface/msp.c ****                 portConfig->functionMask = sbufReadU16(src);
 9201              	 .loc 26 2168 0
 9202 1682 3868     	 ldr r0,[r7]
 9203 1684 FFF7FEFF 	 bl sbufReadU16
 9204 1688 0346     	 mov r3,r0
 9205 168a 1A46     	 mov r2,r3
 9206 168c D7F88C30 	 ldr r3,[r7,#140]
 9207 1690 1A80     	 strh r2,[r3]
2169:../cleanflight/src/main/interface/msp.c ****                 portConfig->msp_baudrateIndex = sbufReadU8(src);
 9208              	 .loc 26 2169 0
 9209 1692 3868     	 ldr r0,[r7]
 9210 1694 FFF7FEFF 	 bl sbufReadU8
 9211 1698 0346     	 mov r3,r0
 9212 169a 1A46     	 mov r2,r3
 9213 169c D7F88C30 	 ldr r3,[r7,#140]
 9214 16a0 DA70     	 strb r2,[r3,#3]
2170:../cleanflight/src/main/interface/msp.c ****                 portConfig->gps_baudrateIndex = sbufReadU8(src);
 9215              	 .loc 26 2170 0
 9216 16a2 3868     	 ldr r0,[r7]
 9217 16a4 FFF7FEFF 	 bl sbufReadU8
 9218 16a8 0346     	 mov r3,r0
 9219 16aa 1A46     	 mov r2,r3
 9220 16ac D7F88C30 	 ldr r3,[r7,#140]
 9221 16b0 1A71     	 strb r2,[r3,#4]
2171:../cleanflight/src/main/interface/msp.c ****                 portConfig->telemetry_baudrateIndex = sbufReadU8(src);
 9222              	 .loc 26 2171 0
 9223 16b2 3868     	 ldr r0,[r7]
 9224 16b4 FFF7FEFF 	 bl sbufReadU8
 9225 16b8 0346     	 mov r3,r0
 9226 16ba 1A46     	 mov r2,r3
 9227 16bc D7F88C30 	 ldr r3,[r7,#140]
 9228 16c0 9A71     	 strb r2,[r3,#6]
2172:../cleanflight/src/main/interface/msp.c ****                 portConfig->blackbox_baudrateIndex = sbufReadU8(src);
 9229              	 .loc 26 2172 0
 9230 16c2 3868     	 ldr r0,[r7]
 9231 16c4 FFF7FEFF 	 bl sbufReadU8
 9232 16c8 0346     	 mov r3,r0
 9233 16ca 1A46     	 mov r2,r3
 9234 16cc D7F88C30 	 ldr r3,[r7,#140]
 9235 16d0 5A71     	 strb r2,[r3,#5]
 9236              	.L566:
 9237              	.LBE66:
2159:../cleanflight/src/main/interface/msp.c ****                 uint8_t identifier = sbufReadU8(src);
 9238              	 .loc 26 2159 0
 9239 16d2 97F8BB30 	 ldrb r3,[r7,#187]
 9240 16d6 5A1E     	 subs r2,r3,#1
 9241 16d8 87F8BB20 	 strb r2,[r7,#187]
 9242 16dc 002B     	 cmp r3,#0
 9243 16de B7D1     	 bne .L568
 9244              	.LBE65:
2173:../cleanflight/src/main/interface/msp.c ****             }
2174:../cleanflight/src/main/interface/msp.c ****         }
2175:../cleanflight/src/main/interface/msp.c ****         break;
 9245              	 .loc 26 2175 0
 9246 16e0 F0E0     	 b .L494
 9247              	.L441:
2176:../cleanflight/src/main/interface/msp.c **** 
2177:../cleanflight/src/main/interface/msp.c **** #ifdef USE_LED_STRIP
2178:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_LED_COLORS:
2179:../cleanflight/src/main/interface/msp.c ****         for (int i = 0; i < LED_CONFIGURABLE_COLOR_COUNT; i++) {
2180:../cleanflight/src/main/interface/msp.c ****             hsvColor_t *color = &ledStripConfigMutable()->colors[i];
2181:../cleanflight/src/main/interface/msp.c ****             color->h = sbufReadU16(src);
2182:../cleanflight/src/main/interface/msp.c ****             color->s = sbufReadU8(src);
2183:../cleanflight/src/main/interface/msp.c ****             color->v = sbufReadU8(src);
2184:../cleanflight/src/main/interface/msp.c ****         }
2185:../cleanflight/src/main/interface/msp.c ****         break;
2186:../cleanflight/src/main/interface/msp.c **** 
2187:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_LED_STRIP_CONFIG:
2188:../cleanflight/src/main/interface/msp.c ****         {
2189:../cleanflight/src/main/interface/msp.c ****             i = sbufReadU8(src);
2190:../cleanflight/src/main/interface/msp.c ****             if (i >= LED_MAX_STRIP_LENGTH || dataSize != (1 + 4)) {
2191:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
2192:../cleanflight/src/main/interface/msp.c ****             }
2193:../cleanflight/src/main/interface/msp.c ****             ledConfig_t *ledConfig = &ledStripConfigMutable()->ledConfigs[i];
2194:../cleanflight/src/main/interface/msp.c ****             *ledConfig = sbufReadU32(src);
2195:../cleanflight/src/main/interface/msp.c ****             reevaluateLedConfig();
2196:../cleanflight/src/main/interface/msp.c ****         }
2197:../cleanflight/src/main/interface/msp.c ****         break;
2198:../cleanflight/src/main/interface/msp.c **** 
2199:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_LED_STRIP_MODECOLOR:
2200:../cleanflight/src/main/interface/msp.c ****         {
2201:../cleanflight/src/main/interface/msp.c ****             ledModeIndex_e modeIdx = sbufReadU8(src);
2202:../cleanflight/src/main/interface/msp.c ****             int funIdx = sbufReadU8(src);
2203:../cleanflight/src/main/interface/msp.c ****             int color = sbufReadU8(src);
2204:../cleanflight/src/main/interface/msp.c **** 
2205:../cleanflight/src/main/interface/msp.c ****             if (!setModeColor(modeIdx, funIdx, color))
2206:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
2207:../cleanflight/src/main/interface/msp.c ****         }
2208:../cleanflight/src/main/interface/msp.c ****         break;
2209:../cleanflight/src/main/interface/msp.c **** #endif
2210:../cleanflight/src/main/interface/msp.c **** 
2211:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_NAME:
2212:../cleanflight/src/main/interface/msp.c ****         memset(pilotConfigMutable()->name, 0, ARRAYLEN(pilotConfig()->name));
 9248              	 .loc 26 2212 0
 9249 16e2 FFF7FEFF 	 bl pilotConfigMutable
 9250 16e6 0346     	 mov r3,r0
 9251 16e8 1846     	 mov r0,r3
 9252 16ea 0021     	 movs r1,#0
 9253 16ec 1122     	 movs r2,#17
 9254 16ee FFF7FEFF 	 bl memset
 9255              	.LBB67:
2213:../cleanflight/src/main/interface/msp.c ****         for (unsigned int i = 0; i < MIN(MAX_NAME_LENGTH, dataSize); i++) {
 9256              	 .loc 26 2213 0
 9257 16f2 0023     	 movs r3,#0
 9258 16f4 C7F8B430 	 str r3,[r7,#180]
 9259 16f8 10E0     	 b .L569
 9260              	.L570:
2214:../cleanflight/src/main/interface/msp.c ****             pilotConfigMutable()->name[i] = sbufReadU8(src);
 9261              	 .loc 26 2214 0 discriminator 3
 9262 16fa FFF7FEFF 	 bl pilotConfigMutable
 9263 16fe 0446     	 mov r4,r0
 9264 1700 3868     	 ldr r0,[r7]
 9265 1702 FFF7FEFF 	 bl sbufReadU8
 9266 1706 0346     	 mov r3,r0
 9267 1708 1A46     	 mov r2,r3
 9268 170a D7F8B430 	 ldr r3,[r7,#180]
 9269 170e 2344     	 add r3,r3,r4
 9270 1710 1A70     	 strb r2,[r3]
2213:../cleanflight/src/main/interface/msp.c ****         for (unsigned int i = 0; i < MIN(MAX_NAME_LENGTH, dataSize); i++) {
 9271              	 .loc 26 2213 0 discriminator 3
 9272 1712 D7F8B430 	 ldr r3,[r7,#180]
 9273 1716 0133     	 adds r3,r3,#1
 9274 1718 C7F8B430 	 str r3,[r7,#180]
 9275              	.L569:
 9276              	.LBB68:
2213:../cleanflight/src/main/interface/msp.c ****         for (unsigned int i = 0; i < MIN(MAX_NAME_LENGTH, dataSize); i++) {
 9277              	 .loc 26 2213 0 is_stmt 0 discriminator 1
 9278 171c 1023     	 movs r3,#16
 9279 171e 3B66     	 str r3,[r7,#96]
 9280 1720 D7F8B030 	 ldr r3,[r7,#176]
 9281 1724 FB65     	 str r3,[r7,#92]
 9282 1726 FA6D     	 ldr r2,[r7,#92]
 9283 1728 3B6E     	 ldr r3,[r7,#96]
 9284 172a 9A42     	 cmp r2,r3
 9285 172c 28BF     	 it cs
 9286 172e 1A46     	 movcs r2,r3
 9287              	.LBE68:
 9288 1730 D7F8B430 	 ldr r3,[r7,#180]
 9289 1734 9A42     	 cmp r2,r3
 9290 1736 E0D8     	 bhi .L570
 9291              	.LBE67:
2215:../cleanflight/src/main/interface/msp.c ****         }
2216:../cleanflight/src/main/interface/msp.c ****         break;
 9292              	 .loc 26 2216 0 is_stmt 1
 9293 1738 C4E0     	 b .L494
 9294              	.L485:
 9295              	.LBB69:
2217:../cleanflight/src/main/interface/msp.c **** 
2218:../cleanflight/src/main/interface/msp.c **** #ifdef USE_RTC_TIME
2219:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_RTC:
2220:../cleanflight/src/main/interface/msp.c ****         {
2221:../cleanflight/src/main/interface/msp.c ****             dateTime_t dt;
2222:../cleanflight/src/main/interface/msp.c ****             dt.year = sbufReadU16(src);
 9296              	 .loc 26 2222 0
 9297 173a 3868     	 ldr r0,[r7]
 9298 173c FFF7FEFF 	 bl sbufReadU16
 9299 1740 0346     	 mov r3,r0
 9300 1742 A7F85030 	 strh r3,[r7,#80]
2223:../cleanflight/src/main/interface/msp.c ****             dt.month = sbufReadU8(src);
 9301              	 .loc 26 2223 0
 9302 1746 3868     	 ldr r0,[r7]
 9303 1748 FFF7FEFF 	 bl sbufReadU8
 9304 174c 0346     	 mov r3,r0
 9305 174e 87F85230 	 strb r3,[r7,#82]
2224:../cleanflight/src/main/interface/msp.c ****             dt.day = sbufReadU8(src);
 9306              	 .loc 26 2224 0
 9307 1752 3868     	 ldr r0,[r7]
 9308 1754 FFF7FEFF 	 bl sbufReadU8
 9309 1758 0346     	 mov r3,r0
 9310 175a 87F85330 	 strb r3,[r7,#83]
2225:../cleanflight/src/main/interface/msp.c ****             dt.hours = sbufReadU8(src);
 9311              	 .loc 26 2225 0
 9312 175e 3868     	 ldr r0,[r7]
 9313 1760 FFF7FEFF 	 bl sbufReadU8
 9314 1764 0346     	 mov r3,r0
 9315 1766 87F85430 	 strb r3,[r7,#84]
2226:../cleanflight/src/main/interface/msp.c ****             dt.minutes = sbufReadU8(src);
 9316              	 .loc 26 2226 0
 9317 176a 3868     	 ldr r0,[r7]
 9318 176c FFF7FEFF 	 bl sbufReadU8
 9319 1770 0346     	 mov r3,r0
 9320 1772 87F85530 	 strb r3,[r7,#85]
2227:../cleanflight/src/main/interface/msp.c ****             dt.seconds = sbufReadU8(src);
 9321              	 .loc 26 2227 0
 9322 1776 3868     	 ldr r0,[r7]
 9323 1778 FFF7FEFF 	 bl sbufReadU8
 9324 177c 0346     	 mov r3,r0
 9325 177e 87F85630 	 strb r3,[r7,#86]
2228:../cleanflight/src/main/interface/msp.c ****             dt.millis = 0;
 9326              	 .loc 26 2228 0
 9327 1782 0023     	 movs r3,#0
 9328 1784 87F85730 	 strb r3,[r7,#87]
 9329 1788 0023     	 movs r3,#0
 9330 178a 87F85830 	 strb r3,[r7,#88]
2229:../cleanflight/src/main/interface/msp.c ****             rtcSetDateTime(&dt);
 9331              	 .loc 26 2229 0
 9332 178e 07F15003 	 add r3,r7,#80
 9333 1792 1846     	 mov r0,r3
 9334 1794 FFF7FEFF 	 bl rtcSetDateTime
 9335              	.LBE69:
2230:../cleanflight/src/main/interface/msp.c ****         }
2231:../cleanflight/src/main/interface/msp.c **** 
2232:../cleanflight/src/main/interface/msp.c ****         break;
 9336              	 .loc 26 2232 0
 9337 1798 94E0     	 b .L494
 9338              	.L464:
2233:../cleanflight/src/main/interface/msp.c **** #endif
2234:../cleanflight/src/main/interface/msp.c **** 
2235:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_TX_INFO:
2236:../cleanflight/src/main/interface/msp.c ****         setRssiMsp(sbufReadU8(src));
 9339              	 .loc 26 2236 0
 9340 179a 3868     	 ldr r0,[r7]
 9341 179c FFF7FEFF 	 bl sbufReadU8
 9342 17a0 0346     	 mov r3,r0
 9343 17a2 1846     	 mov r0,r3
 9344 17a4 FFF7FEFF 	 bl setRssiMsp
2237:../cleanflight/src/main/interface/msp.c **** 
2238:../cleanflight/src/main/interface/msp.c ****         break;
 9345              	 .loc 26 2238 0
 9346 17a8 8CE0     	 b .L494
 9347              	.L486:
2239:../cleanflight/src/main/interface/msp.c **** 
2240:../cleanflight/src/main/interface/msp.c **** #if defined(USE_BOARD_INFO)
2241:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_BOARD_INFO:
2242:../cleanflight/src/main/interface/msp.c ****         if (!boardInformationIsSet()) {
 9348              	 .loc 26 2242 0
 9349 17aa FFF7FEFF 	 bl boardInformationIsSet
 9350 17ae 0346     	 mov r3,r0
 9351 17b0 83F00103 	 eor r3,r3,#1
 9352 17b4 DBB2     	 uxtb r3,r3
 9353 17b6 002B     	 cmp r3,#0
 9354 17b8 66D0     	 beq .L571
 9355              	.LBB70:
2243:../cleanflight/src/main/interface/msp.c ****             uint8_t length = sbufReadU8(src);
 9356              	 .loc 26 2243 0
 9357 17ba 3868     	 ldr r0,[r7]
 9358 17bc FFF7FEFF 	 bl sbufReadU8
 9359 17c0 0346     	 mov r3,r0
 9360 17c2 87F88B30 	 strb r3,[r7,#139]
 9361              	.LBB71:
2244:../cleanflight/src/main/interface/msp.c ****             char boardName[MAX_BOARD_NAME_LENGTH + 1];
2245:../cleanflight/src/main/interface/msp.c ****             sbufReadData(src, boardName, MIN(length, MAX_BOARD_NAME_LENGTH));
 9362              	 .loc 26 2245 0
 9363 17c6 97F88B30 	 ldrb r3,[r7,#139]
 9364 17ca 87F88A30 	 strb r3,[r7,#138]
 9365 17ce 1423     	 movs r3,#20
 9366 17d0 C7F88430 	 str r3,[r7,#132]
 9367 17d4 97F88A20 	 ldrb r2,[r7,#138]
 9368 17d8 D7F88430 	 ldr r3,[r7,#132]
 9369 17dc 9342     	 cmp r3,r2
 9370 17de A8BF     	 it ge
 9371 17e0 1346     	 movge r3,r2
 9372              	.LBE71:
 9373 17e2 07F13802 	 add r2,r7,#56
 9374 17e6 3868     	 ldr r0,[r7]
 9375 17e8 1146     	 mov r1,r2
 9376 17ea 1A46     	 mov r2,r3
 9377 17ec FFF7FEFF 	 bl sbufReadData
2246:../cleanflight/src/main/interface/msp.c ****             if (length > MAX_BOARD_NAME_LENGTH) {
 9378              	 .loc 26 2246 0
 9379 17f0 97F88B30 	 ldrb r3,[r7,#139]
 9380 17f4 142B     	 cmp r3,#20
 9381 17f6 06D9     	 bls .L572
2247:../cleanflight/src/main/interface/msp.c ****                 sbufAdvance(src, length - MAX_BOARD_NAME_LENGTH);
 9382              	 .loc 26 2247 0
 9383 17f8 97F88B30 	 ldrb r3,[r7,#139]
 9384 17fc 143B     	 subs r3,r3,#20
 9385 17fe 3868     	 ldr r0,[r7]
 9386 1800 1946     	 mov r1,r3
 9387 1802 FFF7FEFF 	 bl sbufAdvance
 9388              	.L572:
2248:../cleanflight/src/main/interface/msp.c ****             }
2249:../cleanflight/src/main/interface/msp.c ****             boardName[length] = '\0';
 9389              	 .loc 26 2249 0
 9390 1806 97F88B30 	 ldrb r3,[r7,#139]
 9391 180a 07F1D802 	 add r2,r7,#216
 9392 180e 1344     	 add r3,r3,r2
 9393 1810 0022     	 movs r2,#0
 9394 1812 03F8A02C 	 strb r2,[r3,#-160]
2250:../cleanflight/src/main/interface/msp.c ****             length = sbufReadU8(src);
 9395              	 .loc 26 2250 0
 9396 1816 3868     	 ldr r0,[r7]
 9397 1818 FFF7FEFF 	 bl sbufReadU8
 9398 181c 0346     	 mov r3,r0
 9399 181e 87F88B30 	 strb r3,[r7,#139]
 9400              	.LBB72:
2251:../cleanflight/src/main/interface/msp.c ****             char manufacturerId[MAX_MANUFACTURER_ID_LENGTH + 1];
2252:../cleanflight/src/main/interface/msp.c ****             sbufReadData(src, manufacturerId, MIN(length, MAX_MANUFACTURER_ID_LENGTH));
 9401              	 .loc 26 2252 0
 9402 1822 97F88B30 	 ldrb r3,[r7,#139]
 9403 1826 87F88330 	 strb r3,[r7,#131]
 9404 182a 0423     	 movs r3,#4
 9405 182c FB67     	 str r3,[r7,#124]
 9406 182e 97F88320 	 ldrb r2,[r7,#131]
 9407 1832 FB6F     	 ldr r3,[r7,#124]
 9408 1834 9342     	 cmp r3,r2
 9409 1836 A8BF     	 it ge
 9410 1838 1346     	 movge r3,r2
 9411              	.LBE72:
 9412 183a 07F13002 	 add r2,r7,#48
 9413 183e 3868     	 ldr r0,[r7]
 9414 1840 1146     	 mov r1,r2
 9415 1842 1A46     	 mov r2,r3
 9416 1844 FFF7FEFF 	 bl sbufReadData
2253:../cleanflight/src/main/interface/msp.c ****             if (length > MAX_MANUFACTURER_ID_LENGTH) {
 9417              	 .loc 26 2253 0
 9418 1848 97F88B30 	 ldrb r3,[r7,#139]
 9419 184c 042B     	 cmp r3,#4
 9420 184e 06D9     	 bls .L573
2254:../cleanflight/src/main/interface/msp.c ****                 sbufAdvance(src, length - MAX_MANUFACTURER_ID_LENGTH);
 9421              	 .loc 26 2254 0
 9422 1850 97F88B30 	 ldrb r3,[r7,#139]
 9423 1854 043B     	 subs r3,r3,#4
 9424 1856 3868     	 ldr r0,[r7]
 9425 1858 1946     	 mov r1,r3
 9426 185a FFF7FEFF 	 bl sbufAdvance
 9427              	.L573:
2255:../cleanflight/src/main/interface/msp.c ****             }
2256:../cleanflight/src/main/interface/msp.c ****             manufacturerId[length] = '\0';
 9428              	 .loc 26 2256 0
 9429 185e 97F88B30 	 ldrb r3,[r7,#139]
 9430 1862 07F1D802 	 add r2,r7,#216
 9431 1866 1344     	 add r3,r3,r2
 9432 1868 0022     	 movs r2,#0
 9433 186a 03F8A82C 	 strb r2,[r3,#-168]
2257:../cleanflight/src/main/interface/msp.c **** 
2258:../cleanflight/src/main/interface/msp.c ****             setBoardName(boardName);
 9434              	 .loc 26 2258 0
 9435 186e 07F13803 	 add r3,r7,#56
 9436 1872 1846     	 mov r0,r3
 9437 1874 FFF7FEFF 	 bl setBoardName
2259:../cleanflight/src/main/interface/msp.c ****             setManufacturerId(manufacturerId);
 9438              	 .loc 26 2259 0
 9439 1878 07F13003 	 add r3,r7,#48
 9440 187c 1846     	 mov r0,r3
 9441 187e FFF7FEFF 	 bl setManufacturerId
2260:../cleanflight/src/main/interface/msp.c ****             persistBoardInformation();
 9442              	 .loc 26 2260 0
 9443 1882 FFF7FEFF 	 bl persistBoardInformation
 9444              	.LBE70:
2261:../cleanflight/src/main/interface/msp.c ****         } else {
2262:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
2263:../cleanflight/src/main/interface/msp.c ****         }
2264:../cleanflight/src/main/interface/msp.c **** 
2265:../cleanflight/src/main/interface/msp.c ****         break;
 9445              	 .loc 26 2265 0
 9446 1886 1DE0     	 b .L494
 9447              	.L571:
2262:../cleanflight/src/main/interface/msp.c ****         }
 9448              	 .loc 26 2262 0
 9449 1888 FF23     	 movs r3,#255
 9450 188a 1CE0     	 b .L498
 9451              	.L487:
2266:../cleanflight/src/main/interface/msp.c **** #if defined(USE_SIGNATURE)
2267:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_SIGNATURE:
2268:../cleanflight/src/main/interface/msp.c ****         if (!signatureIsSet()) {
 9452              	 .loc 26 2268 0
 9453 188c FFF7FEFF 	 bl signatureIsSet
 9454 1890 0346     	 mov r3,r0
 9455 1892 83F00103 	 eor r3,r3,#1
 9456 1896 DBB2     	 uxtb r3,r3
 9457 1898 002B     	 cmp r3,#0
 9458 189a 0ED0     	 beq .L575
 9459              	.LBB73:
2269:../cleanflight/src/main/interface/msp.c ****             uint8_t signature[SIGNATURE_LENGTH];
2270:../cleanflight/src/main/interface/msp.c ****             sbufReadData(src, signature, SIGNATURE_LENGTH);
 9460              	 .loc 26 2270 0
 9461 189c 07F10C03 	 add r3,r7,#12
 9462 18a0 3868     	 ldr r0,[r7]
 9463 18a2 1946     	 mov r1,r3
 9464 18a4 2022     	 movs r2,#32
 9465 18a6 FFF7FEFF 	 bl sbufReadData
2271:../cleanflight/src/main/interface/msp.c ****             setSignature(signature);
 9466              	 .loc 26 2271 0
 9467 18aa 07F10C03 	 add r3,r7,#12
 9468 18ae 1846     	 mov r0,r3
 9469 18b0 FFF7FEFF 	 bl setSignature
2272:../cleanflight/src/main/interface/msp.c ****             persistSignature();
 9470              	 .loc 26 2272 0
 9471 18b4 FFF7FEFF 	 bl persistSignature
 9472              	.LBE73:
2273:../cleanflight/src/main/interface/msp.c ****         } else {
2274:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
2275:../cleanflight/src/main/interface/msp.c ****         }
2276:../cleanflight/src/main/interface/msp.c **** 
2277:../cleanflight/src/main/interface/msp.c ****         break;
 9473              	 .loc 26 2277 0
 9474 18b8 04E0     	 b .L494
 9475              	.L575:
2274:../cleanflight/src/main/interface/msp.c ****         }
 9476              	 .loc 26 2274 0
 9477 18ba FF23     	 movs r3,#255
 9478 18bc 03E0     	 b .L498
 9479              	.L440:
2278:../cleanflight/src/main/interface/msp.c **** #endif
2279:../cleanflight/src/main/interface/msp.c **** #endif // USE_BOARD_INFO
2280:../cleanflight/src/main/interface/msp.c ****     default:
2281:../cleanflight/src/main/interface/msp.c ****         // we do not know how to handle the (valid) message, indicate error MSP $M!
2282:../cleanflight/src/main/interface/msp.c ****         return MSP_RESULT_ERROR;
 9480              	 .loc 26 2282 0
 9481 18be FF23     	 movs r3,#255
 9482 18c0 01E0     	 b .L498
 9483              	.L577:
1577:../cleanflight/src/main/interface/msp.c **** 
 9484              	 .loc 26 1577 0
 9485 18c2 00BF     	 nop
 9486              	.L494:
 9487              	.LBE45:
2283:../cleanflight/src/main/interface/msp.c ****     }
2284:../cleanflight/src/main/interface/msp.c ****     return MSP_RESULT_ACK;
 9488              	 .loc 26 2284 0
 9489 18c4 0123     	 movs r3,#1
 9490              	.L498:
 9491 18c6 5BB2     	 sxtb r3,r3
2285:../cleanflight/src/main/interface/msp.c **** }
 9492              	 .loc 26 2285 0
 9493 18c8 1846     	 mov r0,r3
 9494 18ca DC37     	 adds r7,r7,#220
 9495              	.LCFI298:
 9496              	 .cfi_def_cfa_offset 12
 9497 18cc BD46     	 mov sp,r7
 9498              	.LCFI299:
 9499              	 .cfi_def_cfa_register 13
 9500              	 
 9501 18ce 90BD     	 pop {r4,r7,pc}
 9502              	.L589:
 9503              	 .align 2
 9504              	.L588:
 9505 18d0 1F85EB51 	 .word 1374389535
 9506              	 .cfi_endproc
 9507              	.LFE668:
 9509              	 .section .text.mspCommonProcessInCommand,"ax",%progbits
 9510              	 .align 2
 9511              	 .thumb
 9512              	 .thumb_func
 9514              	mspCommonProcessInCommand:
 9515              	.LFB669:
2286:../cleanflight/src/main/interface/msp.c **** #endif // USE_OSD_SLAVE
2287:../cleanflight/src/main/interface/msp.c **** 
2288:../cleanflight/src/main/interface/msp.c **** static mspResult_e mspCommonProcessInCommand(uint8_t cmdMSP, sbuf_t *src, mspPostProcessFnPtr *mspP
2289:../cleanflight/src/main/interface/msp.c **** {
 9516              	 .loc 26 2289 0
 9517              	 .cfi_startproc
 9518              	 
 9519              	 
 9520 0000 B0B5     	 push {r4,r5,r7,lr}
 9521              	.LCFI300:
 9522              	 .cfi_def_cfa_offset 16
 9523              	 .cfi_offset 4,-16
 9524              	 .cfi_offset 5,-12
 9525              	 .cfi_offset 7,-8
 9526              	 .cfi_offset 14,-4
 9527 0002 8AB0     	 sub sp,sp,#40
 9528              	.LCFI301:
 9529              	 .cfi_def_cfa_offset 56
 9530 0004 00AF     	 add r7,sp,#0
 9531              	.LCFI302:
 9532              	 .cfi_def_cfa_register 7
 9533 0006 0346     	 mov r3,r0
 9534 0008 B960     	 str r1,[r7,#8]
 9535 000a 7A60     	 str r2,[r7,#4]
 9536 000c FB73     	 strb r3,[r7,#15]
2290:../cleanflight/src/main/interface/msp.c ****     UNUSED(mspPostProcessFn);
2291:../cleanflight/src/main/interface/msp.c ****     const unsigned int dataSize = sbufBytesRemaining(src);
 9537              	 .loc 26 2291 0
 9538 000e B868     	 ldr r0,[r7,#8]
 9539 0010 FFF7FEFF 	 bl sbufBytesRemaining
 9540 0014 0346     	 mov r3,r0
 9541 0016 3B62     	 str r3,[r7,#32]
2292:../cleanflight/src/main/interface/msp.c ****     UNUSED(dataSize); // maybe unused due to compiler options
2293:../cleanflight/src/main/interface/msp.c **** 
2294:../cleanflight/src/main/interface/msp.c ****     switch (cmdMSP) {
 9542              	 .loc 26 2294 0
 9543 0018 FB7B     	 ldrb r3,[r7,#15]
 9544 001a 392B     	 cmp r3,#57
 9545 001c 0ED0     	 beq .L592
 9546 001e 392B     	 cmp r3,#57
 9547 0020 05DC     	 bgt .L593
 9548 0022 212B     	 cmp r3,#33
 9549 0024 00F08F80 	 beq .L594
 9550 0028 292B     	 cmp r3,#41
 9551 002a 54D0     	 beq .L595
 9552 002c 50E1     	 b .L591
 9553              	.L593:
 9554 002e 552B     	 cmp r3,#85
 9555 0030 00F0BB80 	 beq .L596
 9556 0034 572B     	 cmp r3,#87
 9557 0036 00F04981 	 beq .L597
 9558 003a 49E1     	 b .L591
 9559              	.L592:
 9560              	.LBB74:
2295:../cleanflight/src/main/interface/msp.c **** #ifdef USE_TRANSPONDER
2296:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_TRANSPONDER_CONFIG: {
2297:../cleanflight/src/main/interface/msp.c ****         uint8_t provider = sbufReadU8(src);
2298:../cleanflight/src/main/interface/msp.c ****         uint8_t bytesRemaining = dataSize - 1;
2299:../cleanflight/src/main/interface/msp.c **** 
2300:../cleanflight/src/main/interface/msp.c ****         if (provider > TRANSPONDER_PROVIDER_COUNT) {
2301:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
2302:../cleanflight/src/main/interface/msp.c ****         }
2303:../cleanflight/src/main/interface/msp.c **** 
2304:../cleanflight/src/main/interface/msp.c ****         const uint8_t requirementIndex = provider - 1;
2305:../cleanflight/src/main/interface/msp.c ****         const uint8_t transponderDataSize = transponderRequirements[requirementIndex].dataLength;
2306:../cleanflight/src/main/interface/msp.c **** 
2307:../cleanflight/src/main/interface/msp.c ****         transponderConfigMutable()->provider = provider;
2308:../cleanflight/src/main/interface/msp.c **** 
2309:../cleanflight/src/main/interface/msp.c ****         if (provider == TRANSPONDER_NONE) {
2310:../cleanflight/src/main/interface/msp.c ****             break;
2311:../cleanflight/src/main/interface/msp.c ****         }
2312:../cleanflight/src/main/interface/msp.c **** 
2313:../cleanflight/src/main/interface/msp.c ****         if (bytesRemaining != transponderDataSize) {
2314:../cleanflight/src/main/interface/msp.c ****             return MSP_RESULT_ERROR;
2315:../cleanflight/src/main/interface/msp.c ****         }
2316:../cleanflight/src/main/interface/msp.c **** 
2317:../cleanflight/src/main/interface/msp.c ****         if (provider != transponderConfig()->provider) {
2318:../cleanflight/src/main/interface/msp.c ****             transponderStopRepeating();
2319:../cleanflight/src/main/interface/msp.c ****         }
2320:../cleanflight/src/main/interface/msp.c **** 
2321:../cleanflight/src/main/interface/msp.c ****         memset(transponderConfigMutable()->data, 0, sizeof(transponderConfig()->data));
2322:../cleanflight/src/main/interface/msp.c **** 
2323:../cleanflight/src/main/interface/msp.c ****         for (unsigned int i = 0; i < transponderDataSize; i++) {
2324:../cleanflight/src/main/interface/msp.c ****             transponderConfigMutable()->data[i] = sbufReadU8(src);
2325:../cleanflight/src/main/interface/msp.c ****         }
2326:../cleanflight/src/main/interface/msp.c ****         transponderUpdateData();
2327:../cleanflight/src/main/interface/msp.c ****         break;
2328:../cleanflight/src/main/interface/msp.c ****     }
2329:../cleanflight/src/main/interface/msp.c **** #endif
2330:../cleanflight/src/main/interface/msp.c **** 
2331:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_VOLTAGE_METER_CONFIG: {
2332:../cleanflight/src/main/interface/msp.c ****         int8_t id = sbufReadU8(src);
 9561              	 .loc 26 2332 0
 9562 003c B868     	 ldr r0,[r7,#8]
 9563 003e FFF7FEFF 	 bl sbufReadU8
 9564 0042 0346     	 mov r3,r0
 9565 0044 BB76     	 strb r3,[r7,#26]
2333:../cleanflight/src/main/interface/msp.c **** 
2334:../cleanflight/src/main/interface/msp.c ****         //
2335:../cleanflight/src/main/interface/msp.c ****         // find and configure an ADC voltage sensor
2336:../cleanflight/src/main/interface/msp.c ****         //
2337:../cleanflight/src/main/interface/msp.c ****         int8_t voltageSensorADCIndex;
2338:../cleanflight/src/main/interface/msp.c ****         for (voltageSensorADCIndex = 0; voltageSensorADCIndex < MAX_VOLTAGE_SENSOR_ADC; voltageSens
 9566              	 .loc 26 2338 0
 9567 0046 0023     	 movs r3,#0
 9568 0048 87F82730 	 strb r3,[r7,#39]
 9569 004c 0FE0     	 b .L598
 9570              	.L601:
2339:../cleanflight/src/main/interface/msp.c ****             if (id == voltageMeterADCtoIDMap[voltageSensorADCIndex]) {
 9571              	 .loc 26 2339 0
 9572 004e 97F91A30 	 ldrsb r3,[r7,#26]
 9573 0052 97F92720 	 ldrsb r2,[r7,#39]
 9574 0056 A549     	 ldr r1,.L620
 9575 0058 8A5C     	 ldrb r2,[r1,r2]
 9576 005a 9342     	 cmp r3,r2
 9577 005c 00D1     	 bne .L599
2340:../cleanflight/src/main/interface/msp.c ****                 break;
 9578              	 .loc 26 2340 0
 9579 005e 0AE0     	 b .L600
 9580              	.L599:
2338:../cleanflight/src/main/interface/msp.c ****             if (id == voltageMeterADCtoIDMap[voltageSensorADCIndex]) {
 9581              	 .loc 26 2338 0 discriminator 2
 9582 0060 97F82730 	 ldrb r3,[r7,#39]
 9583 0064 DBB2     	 uxtb r3,r3
 9584 0066 0133     	 adds r3,r3,#1
 9585 0068 DBB2     	 uxtb r3,r3
 9586 006a 87F82730 	 strb r3,[r7,#39]
 9587              	.L598:
2338:../cleanflight/src/main/interface/msp.c ****             if (id == voltageMeterADCtoIDMap[voltageSensorADCIndex]) {
 9588              	 .loc 26 2338 0 is_stmt 0 discriminator 1
 9589 006e 97F92730 	 ldrsb r3,[r7,#39]
 9590 0072 002B     	 cmp r3,#0
 9591 0074 EBDD     	 ble .L601
 9592              	.L600:
2341:../cleanflight/src/main/interface/msp.c ****             }
2342:../cleanflight/src/main/interface/msp.c ****         }
2343:../cleanflight/src/main/interface/msp.c **** 
2344:../cleanflight/src/main/interface/msp.c ****         if (voltageSensorADCIndex < MAX_VOLTAGE_SENSOR_ADC) {
 9593              	 .loc 26 2344 0 is_stmt 1
 9594 0076 97F92730 	 ldrsb r3,[r7,#39]
 9595 007a 002B     	 cmp r3,#0
 9596 007c 21DC     	 bgt .L602
2345:../cleanflight/src/main/interface/msp.c ****             voltageSensorADCConfigMutable(voltageSensorADCIndex)->vbatscale = sbufReadU8(src);
 9597              	 .loc 26 2345 0
 9598 007e 97F92730 	 ldrsb r3,[r7,#39]
 9599 0082 1846     	 mov r0,r3
 9600 0084 FFF7FEFF 	 bl voltageSensorADCConfigMutable
 9601 0088 0446     	 mov r4,r0
 9602 008a B868     	 ldr r0,[r7,#8]
 9603 008c FFF7FEFF 	 bl sbufReadU8
 9604 0090 0346     	 mov r3,r0
 9605 0092 2370     	 strb r3,[r4]
2346:../cleanflight/src/main/interface/msp.c ****             voltageSensorADCConfigMutable(voltageSensorADCIndex)->vbatresdivval = sbufReadU8(src);
 9606              	 .loc 26 2346 0
 9607 0094 97F92730 	 ldrsb r3,[r7,#39]
 9608 0098 1846     	 mov r0,r3
 9609 009a FFF7FEFF 	 bl voltageSensorADCConfigMutable
 9610 009e 0446     	 mov r4,r0
 9611 00a0 B868     	 ldr r0,[r7,#8]
 9612 00a2 FFF7FEFF 	 bl sbufReadU8
 9613 00a6 0346     	 mov r3,r0
 9614 00a8 6370     	 strb r3,[r4,#1]
2347:../cleanflight/src/main/interface/msp.c ****             voltageSensorADCConfigMutable(voltageSensorADCIndex)->vbatresdivmultiplier = sbufReadU8
 9615              	 .loc 26 2347 0
 9616 00aa 97F92730 	 ldrsb r3,[r7,#39]
 9617 00ae 1846     	 mov r0,r3
 9618 00b0 FFF7FEFF 	 bl voltageSensorADCConfigMutable
 9619 00b4 0446     	 mov r4,r0
 9620 00b6 B868     	 ldr r0,[r7,#8]
 9621 00b8 FFF7FEFF 	 bl sbufReadU8
 9622 00bc 0346     	 mov r3,r0
 9623 00be A370     	 strb r3,[r4,#2]
2348:../cleanflight/src/main/interface/msp.c ****         } else {
2349:../cleanflight/src/main/interface/msp.c ****             // if we had any other types of voltage sensor to configure, this is where we'd do it.
2350:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
2351:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
2352:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
2353:../cleanflight/src/main/interface/msp.c ****         }
2354:../cleanflight/src/main/interface/msp.c ****         break;
 9624              	 .loc 26 2354 0
 9625 00c0 0DE1     	 b .L604
 9626              	.L602:
2350:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
 9627              	 .loc 26 2350 0
 9628 00c2 B868     	 ldr r0,[r7,#8]
 9629 00c4 FFF7FEFF 	 bl sbufReadU8
2351:../cleanflight/src/main/interface/msp.c ****             sbufReadU8(src);
 9630              	 .loc 26 2351 0
 9631 00c8 B868     	 ldr r0,[r7,#8]
 9632 00ca FFF7FEFF 	 bl sbufReadU8
2352:../cleanflight/src/main/interface/msp.c ****         }
 9633              	 .loc 26 2352 0
 9634 00ce B868     	 ldr r0,[r7,#8]
 9635 00d0 FFF7FEFF 	 bl sbufReadU8
 9636              	 .loc 26 2354 0
 9637 00d4 03E1     	 b .L604
 9638              	.L595:
 9639              	.LBE74:
 9640              	.LBB75:
2355:../cleanflight/src/main/interface/msp.c ****     }
2356:../cleanflight/src/main/interface/msp.c **** 
2357:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_CURRENT_METER_CONFIG: {
2358:../cleanflight/src/main/interface/msp.c ****         int id = sbufReadU8(src);
 9641              	 .loc 26 2358 0
 9642 00d6 B868     	 ldr r0,[r7,#8]
 9643 00d8 FFF7FEFF 	 bl sbufReadU8
 9644 00dc 0346     	 mov r3,r0
 9645 00de 7B61     	 str r3,[r7,#20]
2359:../cleanflight/src/main/interface/msp.c **** 
2360:../cleanflight/src/main/interface/msp.c ****         switch (id) {
 9646              	 .loc 26 2360 0
 9647 00e0 7B69     	 ldr r3,[r7,#20]
 9648 00e2 0A2B     	 cmp r3,#10
 9649 00e4 02D0     	 beq .L606
 9650 00e6 502B     	 cmp r3,#80
 9651 00e8 13D0     	 beq .L607
 9652 00ea 24E0     	 b .L619
 9653              	.L606:
2361:../cleanflight/src/main/interface/msp.c ****             case CURRENT_METER_ID_BATTERY_1:
2362:../cleanflight/src/main/interface/msp.c ****                 currentSensorADCConfigMutable()->scale = sbufReadU16(src);
 9654              	 .loc 26 2362 0
 9655 00ec FFF7FEFF 	 bl currentSensorADCConfigMutable
 9656 00f0 0446     	 mov r4,r0
 9657 00f2 B868     	 ldr r0,[r7,#8]
 9658 00f4 FFF7FEFF 	 bl sbufReadU16
 9659 00f8 0346     	 mov r3,r0
 9660 00fa 9BB2     	 uxth r3,r3
 9661 00fc 2380     	 strh r3,[r4]
2363:../cleanflight/src/main/interface/msp.c ****                 currentSensorADCConfigMutable()->offset = sbufReadU16(src);
 9662              	 .loc 26 2363 0
 9663 00fe FFF7FEFF 	 bl currentSensorADCConfigMutable
 9664 0102 0446     	 mov r4,r0
 9665 0104 B868     	 ldr r0,[r7,#8]
 9666 0106 FFF7FEFF 	 bl sbufReadU16
 9667 010a 0346     	 mov r3,r0
 9668 010c 9BB2     	 uxth r3,r3
 9669 010e 6380     	 strh r3,[r4,#2]
2364:../cleanflight/src/main/interface/msp.c ****                 break;
 9670              	 .loc 26 2364 0
 9671 0110 18E0     	 b .L608
 9672              	.L607:
2365:../cleanflight/src/main/interface/msp.c **** #ifdef USE_VIRTUAL_CURRENT_METER
2366:../cleanflight/src/main/interface/msp.c ****             case CURRENT_METER_ID_VIRTUAL_1:
2367:../cleanflight/src/main/interface/msp.c ****                 currentSensorVirtualConfigMutable()->scale = sbufReadU16(src);
 9673              	 .loc 26 2367 0
 9674 0112 FFF7FEFF 	 bl currentSensorVirtualConfigMutable
 9675 0116 0446     	 mov r4,r0
 9676 0118 B868     	 ldr r0,[r7,#8]
 9677 011a FFF7FEFF 	 bl sbufReadU16
 9678 011e 0346     	 mov r3,r0
 9679 0120 9BB2     	 uxth r3,r3
 9680 0122 2380     	 strh r3,[r4]
2368:../cleanflight/src/main/interface/msp.c ****                 currentSensorVirtualConfigMutable()->offset = sbufReadU16(src);
 9681              	 .loc 26 2368 0
 9682 0124 FFF7FEFF 	 bl currentSensorVirtualConfigMutable
 9683 0128 0446     	 mov r4,r0
 9684 012a B868     	 ldr r0,[r7,#8]
 9685 012c FFF7FEFF 	 bl sbufReadU16
 9686 0130 0346     	 mov r3,r0
 9687 0132 6380     	 strh r3,[r4,#2]
2369:../cleanflight/src/main/interface/msp.c ****                 break;
 9688              	 .loc 26 2369 0
 9689 0134 06E0     	 b .L608
 9690              	.L619:
2370:../cleanflight/src/main/interface/msp.c **** #endif
2371:../cleanflight/src/main/interface/msp.c ****             default:
2372:../cleanflight/src/main/interface/msp.c ****                 sbufReadU16(src);
 9691              	 .loc 26 2372 0
 9692 0136 B868     	 ldr r0,[r7,#8]
 9693 0138 FFF7FEFF 	 bl sbufReadU16
2373:../cleanflight/src/main/interface/msp.c ****                 sbufReadU16(src);
 9694              	 .loc 26 2373 0
 9695 013c B868     	 ldr r0,[r7,#8]
 9696 013e FFF7FEFF 	 bl sbufReadU16
2374:../cleanflight/src/main/interface/msp.c ****                 break;
 9697              	 .loc 26 2374 0
 9698 0142 00BF     	 nop
 9699              	.L608:
2375:../cleanflight/src/main/interface/msp.c ****         }
2376:../cleanflight/src/main/interface/msp.c ****         break;
 9700              	 .loc 26 2376 0
 9701 0144 CBE0     	 b .L604
 9702              	.L594:
 9703              	.LBE75:
2377:../cleanflight/src/main/interface/msp.c ****     }
2378:../cleanflight/src/main/interface/msp.c **** 
2379:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_BATTERY_CONFIG:
2380:../cleanflight/src/main/interface/msp.c ****         batteryConfigMutable()->vbatmincellvoltage = sbufReadU8(src);      // vbatlevel_warn1 in MW
 9704              	 .loc 26 2380 0
 9705 0146 FFF7FEFF 	 bl batteryConfigMutable
 9706 014a 0446     	 mov r4,r0
 9707 014c B868     	 ldr r0,[r7,#8]
 9708 014e FFF7FEFF 	 bl sbufReadU8
 9709 0152 0346     	 mov r3,r0
 9710 0154 6370     	 strb r3,[r4,#1]
2381:../cleanflight/src/main/interface/msp.c ****         batteryConfigMutable()->vbatmaxcellvoltage = sbufReadU8(src);      // vbatlevel_warn2 in MW
 9711              	 .loc 26 2381 0
 9712 0156 FFF7FEFF 	 bl batteryConfigMutable
 9713 015a 0446     	 mov r4,r0
 9714 015c B868     	 ldr r0,[r7,#8]
 9715 015e FFF7FEFF 	 bl sbufReadU8
 9716 0162 0346     	 mov r3,r0
 9717 0164 2370     	 strb r3,[r4]
2382:../cleanflight/src/main/interface/msp.c ****         batteryConfigMutable()->vbatwarningcellvoltage = sbufReadU8(src);  // vbatlevel when buzzer
 9718              	 .loc 26 2382 0
 9719 0166 FFF7FEFF 	 bl batteryConfigMutable
 9720 016a 0446     	 mov r4,r0
 9721 016c B868     	 ldr r0,[r7,#8]
 9722 016e FFF7FEFF 	 bl sbufReadU8
 9723 0172 0346     	 mov r3,r0
 9724 0174 A370     	 strb r3,[r4,#2]
2383:../cleanflight/src/main/interface/msp.c ****         batteryConfigMutable()->batteryCapacity = sbufReadU16(src);
 9725              	 .loc 26 2383 0
 9726 0176 FFF7FEFF 	 bl batteryConfigMutable
 9727 017a 0446     	 mov r4,r0
 9728 017c B868     	 ldr r0,[r7,#8]
 9729 017e FFF7FEFF 	 bl sbufReadU16
 9730 0182 0346     	 mov r3,r0
 9731 0184 A4F80730 	 strh r3,[r4,#7]
2384:../cleanflight/src/main/interface/msp.c ****         batteryConfigMutable()->voltageMeterSource = sbufReadU8(src);
 9732              	 .loc 26 2384 0
 9733 0188 FFF7FEFF 	 bl batteryConfigMutable
 9734 018c 0446     	 mov r4,r0
 9735 018e B868     	 ldr r0,[r7,#8]
 9736 0190 FFF7FEFF 	 bl sbufReadU8
 9737 0194 0346     	 mov r3,r0
 9738 0196 6371     	 strb r3,[r4,#5]
2385:../cleanflight/src/main/interface/msp.c ****         batteryConfigMutable()->currentMeterSource = sbufReadU8(src);
 9739              	 .loc 26 2385 0
 9740 0198 FFF7FEFF 	 bl batteryConfigMutable
 9741 019c 0446     	 mov r4,r0
 9742 019e B868     	 ldr r0,[r7,#8]
 9743 01a0 FFF7FEFF 	 bl sbufReadU8
 9744 01a4 0346     	 mov r3,r0
 9745 01a6 A371     	 strb r3,[r4,#6]
2386:../cleanflight/src/main/interface/msp.c ****         break;
 9746              	 .loc 26 2386 0
 9747 01a8 99E0     	 b .L604
 9748              	.L596:
 9749              	.LBB76:
2387:../cleanflight/src/main/interface/msp.c **** 
2388:../cleanflight/src/main/interface/msp.c **** #if defined(USE_OSD) || defined (USE_OSD_SLAVE)
2389:../cleanflight/src/main/interface/msp.c ****     case MSP_SET_OSD_CONFIG:
2390:../cleanflight/src/main/interface/msp.c ****         {
2391:../cleanflight/src/main/interface/msp.c ****             const uint8_t addr = sbufReadU8(src);
 9750              	 .loc 26 2391 0
 9751 01aa B868     	 ldr r0,[r7,#8]
 9752 01ac FFF7FEFF 	 bl sbufReadU8
 9753 01b0 0346     	 mov r3,r0
 9754 01b2 FB77     	 strb r3,[r7,#31]
2392:../cleanflight/src/main/interface/msp.c **** 
2393:../cleanflight/src/main/interface/msp.c ****             if ((int8_t)addr == -1) {
 9755              	 .loc 26 2393 0
 9756 01b4 FB7F     	 ldrb r3,[r7,#31]
 9757 01b6 FF2B     	 cmp r3,#255
 9758 01b8 39D1     	 bne .L609
2394:../cleanflight/src/main/interface/msp.c ****                 /* Set general OSD settings */
2395:../cleanflight/src/main/interface/msp.c **** #ifdef USE_MAX7456
2396:../cleanflight/src/main/interface/msp.c ****                 vcdProfileMutable()->video_system = sbufReadU8(src);
2397:../cleanflight/src/main/interface/msp.c **** #else
2398:../cleanflight/src/main/interface/msp.c ****                 sbufReadU8(src); // Skip video system
 9759              	 .loc 26 2398 0
 9760 01ba B868     	 ldr r0,[r7,#8]
 9761 01bc FFF7FEFF 	 bl sbufReadU8
2399:../cleanflight/src/main/interface/msp.c **** #endif
2400:../cleanflight/src/main/interface/msp.c **** #if defined(USE_OSD)
2401:../cleanflight/src/main/interface/msp.c ****                 osdConfigMutable()->units = sbufReadU8(src);
 9762              	 .loc 26 2401 0
 9763 01c0 FFF7FEFF 	 bl osdConfigMutable
 9764 01c4 0446     	 mov r4,r0
 9765 01c6 B868     	 ldr r0,[r7,#8]
 9766 01c8 FFF7FEFF 	 bl sbufReadU8
 9767 01cc 0346     	 mov r3,r0
 9768 01ce 84F85B30 	 strb r3,[r4,#91]
2402:../cleanflight/src/main/interface/msp.c **** 
2403:../cleanflight/src/main/interface/msp.c ****                 // Alarms
2404:../cleanflight/src/main/interface/msp.c ****                 osdConfigMutable()->rssi_alarm = sbufReadU8(src);
 9769              	 .loc 26 2404 0
 9770 01d2 FFF7FEFF 	 bl osdConfigMutable
 9771 01d6 0446     	 mov r4,r0
 9772 01d8 B868     	 ldr r0,[r7,#8]
 9773 01da FFF7FEFF 	 bl sbufReadU8
 9774 01de 0346     	 mov r3,r0
 9775 01e0 84F85A30 	 strb r3,[r4,#90]
2405:../cleanflight/src/main/interface/msp.c ****                 osdConfigMutable()->cap_alarm = sbufReadU16(src);
 9776              	 .loc 26 2405 0
 9777 01e4 FFF7FEFF 	 bl osdConfigMutable
 9778 01e8 0446     	 mov r4,r0
 9779 01ea B868     	 ldr r0,[r7,#8]
 9780 01ec FFF7FEFF 	 bl sbufReadU16
 9781 01f0 0346     	 mov r3,r0
 9782 01f2 A4F85630 	 strh r3,[r4,#86]
2406:../cleanflight/src/main/interface/msp.c ****                 sbufReadU16(src); // Skip unused (previously fly timer)
 9783              	 .loc 26 2406 0
 9784 01f6 B868     	 ldr r0,[r7,#8]
 9785 01f8 FFF7FEFF 	 bl sbufReadU16
2407:../cleanflight/src/main/interface/msp.c ****                 osdConfigMutable()->alt_alarm = sbufReadU16(src);
 9786              	 .loc 26 2407 0
 9787 01fc FFF7FEFF 	 bl osdConfigMutable
 9788 0200 0446     	 mov r4,r0
 9789 0202 B868     	 ldr r0,[r7,#8]
 9790 0204 FFF7FEFF 	 bl sbufReadU16
 9791 0208 0346     	 mov r3,r0
 9792 020a A4F85830 	 strh r3,[r4,#88]
2408:../cleanflight/src/main/interface/msp.c **** 
2409:../cleanflight/src/main/interface/msp.c ****                 if (sbufBytesRemaining(src) >= 2) {
 9793              	 .loc 26 2409 0
 9794 020e B868     	 ldr r0,[r7,#8]
 9795 0210 FFF7FEFF 	 bl sbufBytesRemaining
 9796 0214 0346     	 mov r3,r0
 9797 0216 012B     	 cmp r3,#1
 9798 0218 57DD     	 ble .L611
2410:../cleanflight/src/main/interface/msp.c ****                     /* Enabled warnings */
2411:../cleanflight/src/main/interface/msp.c ****                     osdConfigMutable()->enabledWarnings = sbufReadU16(src);
 9799              	 .loc 26 2411 0
 9800 021a FFF7FEFF 	 bl osdConfigMutable
 9801 021e 0446     	 mov r4,r0
 9802 0220 B868     	 ldr r0,[r7,#8]
 9803 0222 FFF7FEFF 	 bl sbufReadU16
 9804 0226 0346     	 mov r3,r0
 9805 0228 A4F86030 	 strh r3,[r4,#96]
 9806              	.LBE76:
2412:../cleanflight/src/main/interface/msp.c ****                 }
2413:../cleanflight/src/main/interface/msp.c **** #endif
2414:../cleanflight/src/main/interface/msp.c ****             } else if ((int8_t)addr == -2) {
2415:../cleanflight/src/main/interface/msp.c **** #if defined(USE_OSD)
2416:../cleanflight/src/main/interface/msp.c ****                 // Timers
2417:../cleanflight/src/main/interface/msp.c ****                 uint8_t index = sbufReadU8(src);
2418:../cleanflight/src/main/interface/msp.c ****                 if (index > OSD_TIMER_COUNT) {
2419:../cleanflight/src/main/interface/msp.c ****                   return MSP_RESULT_ERROR;
2420:../cleanflight/src/main/interface/msp.c ****                 }
2421:../cleanflight/src/main/interface/msp.c ****                 osdConfigMutable()->timers[index] = sbufReadU16(src);
2422:../cleanflight/src/main/interface/msp.c **** #endif
2423:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
2424:../cleanflight/src/main/interface/msp.c ****             } else {
2425:../cleanflight/src/main/interface/msp.c **** #if defined(USE_OSD)
2426:../cleanflight/src/main/interface/msp.c ****                 const uint16_t value = sbufReadU16(src);
2427:../cleanflight/src/main/interface/msp.c **** 
2428:../cleanflight/src/main/interface/msp.c ****                 /* Get screen index, 0 is post flight statistics, 1 and above are in flight OSD scr
2429:../cleanflight/src/main/interface/msp.c ****                 const uint8_t screen = (sbufBytesRemaining(src) >= 1) ? sbufReadU8(src) : 1;
2430:../cleanflight/src/main/interface/msp.c **** 
2431:../cleanflight/src/main/interface/msp.c ****                 if (screen == 0 && addr < OSD_STAT_COUNT) {
2432:../cleanflight/src/main/interface/msp.c ****                     /* Set statistic item enable */
2433:../cleanflight/src/main/interface/msp.c ****                     osdStatSetState(addr, (value != 0));
2434:../cleanflight/src/main/interface/msp.c ****                 } else if (addr < OSD_ITEM_COUNT) {
2435:../cleanflight/src/main/interface/msp.c ****                     /* Set element positions */
2436:../cleanflight/src/main/interface/msp.c ****                     osdConfigMutable()->item_pos[addr] = value;
2437:../cleanflight/src/main/interface/msp.c ****                 } else {
2438:../cleanflight/src/main/interface/msp.c ****                   return MSP_RESULT_ERROR;
2439:../cleanflight/src/main/interface/msp.c ****                 }
2440:../cleanflight/src/main/interface/msp.c **** #else
2441:../cleanflight/src/main/interface/msp.c ****                 return MSP_RESULT_ERROR;
2442:../cleanflight/src/main/interface/msp.c **** #endif
2443:../cleanflight/src/main/interface/msp.c ****             }
2444:../cleanflight/src/main/interface/msp.c ****         }
2445:../cleanflight/src/main/interface/msp.c ****         break;
 9807              	 .loc 26 2445 0
 9808 022c 57E0     	 b .L604
 9809              	.L609:
 9810              	.LBB79:
2414:../cleanflight/src/main/interface/msp.c **** #if defined(USE_OSD)
 9811              	 .loc 26 2414 0
 9812 022e FB7F     	 ldrb r3,[r7,#31]
 9813 0230 FE2B     	 cmp r3,#254
 9814 0232 19D1     	 bne .L612
 9815              	.LBB77:
2417:../cleanflight/src/main/interface/msp.c ****                 if (index > OSD_TIMER_COUNT) {
 9816              	 .loc 26 2417 0
 9817 0234 B868     	 ldr r0,[r7,#8]
 9818 0236 FFF7FEFF 	 bl sbufReadU8
 9819 023a 0346     	 mov r3,r0
 9820 023c BB77     	 strb r3,[r7,#30]
2418:../cleanflight/src/main/interface/msp.c ****                   return MSP_RESULT_ERROR;
 9821              	 .loc 26 2418 0
 9822 023e BB7F     	 ldrb r3,[r7,#30]
 9823 0240 022B     	 cmp r3,#2
 9824 0242 01D9     	 bls .L613
2419:../cleanflight/src/main/interface/msp.c ****                 }
 9825              	 .loc 26 2419 0
 9826 0244 FF23     	 movs r3,#255
 9827 0246 4BE0     	 b .L614
 9828              	.L613:
2421:../cleanflight/src/main/interface/msp.c **** #endif
 9829              	 .loc 26 2421 0
 9830 0248 FFF7FEFF 	 bl osdConfigMutable
 9831 024c 0546     	 mov r5,r0
 9832 024e BC7F     	 ldrb r4,[r7,#30]
 9833 0250 B868     	 ldr r0,[r7,#8]
 9834 0252 FFF7FEFF 	 bl sbufReadU16
 9835 0256 0346     	 mov r3,r0
 9836 0258 1A46     	 mov r2,r3
 9837 025a 04F12C03 	 add r3,r4,#44
 9838 025e 5B00     	 lsls r3,r3,#1
 9839 0260 2B44     	 add r3,r3,r5
 9840 0262 9A80     	 strh r2,[r3,#4]
2423:../cleanflight/src/main/interface/msp.c ****             } else {
 9841              	 .loc 26 2423 0
 9842 0264 FF23     	 movs r3,#255
 9843 0266 3BE0     	 b .L614
 9844              	.L612:
 9845              	.LBE77:
 9846              	.LBB78:
2426:../cleanflight/src/main/interface/msp.c **** 
 9847              	 .loc 26 2426 0
 9848 0268 B868     	 ldr r0,[r7,#8]
 9849 026a FFF7FEFF 	 bl sbufReadU16
 9850 026e 0346     	 mov r3,r0
 9851 0270 BB83     	 strh r3,[r7,#28]
2429:../cleanflight/src/main/interface/msp.c **** 
 9852              	 .loc 26 2429 0
 9853 0272 B868     	 ldr r0,[r7,#8]
 9854 0274 FFF7FEFF 	 bl sbufBytesRemaining
 9855 0278 0346     	 mov r3,r0
 9856 027a 002B     	 cmp r3,#0
 9857 027c 04DD     	 ble .L615
2429:../cleanflight/src/main/interface/msp.c **** 
 9858              	 .loc 26 2429 0 is_stmt 0 discriminator 1
 9859 027e B868     	 ldr r0,[r7,#8]
 9860 0280 FFF7FEFF 	 bl sbufReadU8
 9861 0284 0346     	 mov r3,r0
 9862 0286 00E0     	 b .L616
 9863              	.L615:
2429:../cleanflight/src/main/interface/msp.c **** 
 9864              	 .loc 26 2429 0 discriminator 2
 9865 0288 0123     	 movs r3,#1
 9866              	.L616:
2429:../cleanflight/src/main/interface/msp.c **** 
 9867              	 .loc 26 2429 0 discriminator 4
 9868 028a FB76     	 strb r3,[r7,#27]
2431:../cleanflight/src/main/interface/msp.c ****                     /* Set statistic item enable */
 9869              	 .loc 26 2431 0 is_stmt 1 discriminator 4
 9870 028c FB7E     	 ldrb r3,[r7,#27]
 9871 028e 002B     	 cmp r3,#0
 9872 0290 0ED1     	 bne .L617
2431:../cleanflight/src/main/interface/msp.c ****                     /* Set statistic item enable */
 9873              	 .loc 26 2431 0 is_stmt 0 discriminator 1
 9874 0292 FB7F     	 ldrb r3,[r7,#31]
 9875 0294 0D2B     	 cmp r3,#13
 9876 0296 0BD8     	 bhi .L617
2433:../cleanflight/src/main/interface/msp.c ****                 } else if (addr < OSD_ITEM_COUNT) {
 9877              	 .loc 26 2433 0 is_stmt 1
 9878 0298 BB8B     	 ldrh r3,[r7,#28]
 9879 029a 002B     	 cmp r3,#0
 9880 029c 14BF     	 ite ne
 9881 029e 0123     	 movne r3,#1
 9882 02a0 0023     	 moveq r3,#0
 9883 02a2 DBB2     	 uxtb r3,r3
 9884 02a4 FA7F     	 ldrb r2,[r7,#31]
 9885 02a6 1046     	 mov r0,r2
 9886 02a8 1946     	 mov r1,r3
 9887 02aa FFF7FEFF 	 bl osdStatSetState
 9888 02ae 0CE0     	 b .L611
 9889              	.L617:
2434:../cleanflight/src/main/interface/msp.c ****                     /* Set element positions */
 9890              	 .loc 26 2434 0
 9891 02b0 FB7F     	 ldrb r3,[r7,#31]
 9892 02b2 2A2B     	 cmp r3,#42
 9893 02b4 07D8     	 bhi .L618
2436:../cleanflight/src/main/interface/msp.c ****                 } else {
 9894              	 .loc 26 2436 0
 9895 02b6 FFF7FEFF 	 bl osdConfigMutable
 9896 02ba 0246     	 mov r2,r0
 9897 02bc FB7F     	 ldrb r3,[r7,#31]
 9898 02be B98B     	 ldrh r1,[r7,#28]
 9899 02c0 22F81310 	 strh r1,[r2,r3,lsl#1]
 9900 02c4 01E0     	 b .L611
 9901              	.L618:
2438:../cleanflight/src/main/interface/msp.c ****                 }
 9902              	 .loc 26 2438 0
 9903 02c6 FF23     	 movs r3,#255
 9904 02c8 0AE0     	 b .L614
 9905              	.L611:
 9906              	.LBE78:
 9907              	.LBE79:
 9908              	 .loc 26 2445 0 discriminator 1
 9909 02ca 08E0     	 b .L604
 9910              	.L597:
2446:../cleanflight/src/main/interface/msp.c **** 
2447:../cleanflight/src/main/interface/msp.c ****     case MSP_OSD_CHAR_WRITE:
2448:../cleanflight/src/main/interface/msp.c **** #ifdef USE_MAX7456
2449:../cleanflight/src/main/interface/msp.c ****         {
2450:../cleanflight/src/main/interface/msp.c ****             uint8_t font_data[64];
2451:../cleanflight/src/main/interface/msp.c ****             const uint8_t addr = sbufReadU8(src);
2452:../cleanflight/src/main/interface/msp.c ****             for (int i = 0; i < 54; i++) {
2453:../cleanflight/src/main/interface/msp.c ****                 font_data[i] = sbufReadU8(src);
2454:../cleanflight/src/main/interface/msp.c ****             }
2455:../cleanflight/src/main/interface/msp.c ****             // !!TODO - replace this with a device independent implementation
2456:../cleanflight/src/main/interface/msp.c ****             max7456WriteNvm(addr, font_data);
2457:../cleanflight/src/main/interface/msp.c ****         }
2458:../cleanflight/src/main/interface/msp.c ****         break;
2459:../cleanflight/src/main/interface/msp.c **** #else
2460:../cleanflight/src/main/interface/msp.c ****         return MSP_RESULT_ERROR;
 9911              	 .loc 26 2460 0
 9912 02cc FF23     	 movs r3,#255
 9913 02ce 07E0     	 b .L614
 9914              	.L591:
2461:../cleanflight/src/main/interface/msp.c **** #endif
2462:../cleanflight/src/main/interface/msp.c **** #endif // OSD || USE_OSD_SLAVE
2463:../cleanflight/src/main/interface/msp.c **** 
2464:../cleanflight/src/main/interface/msp.c ****     default:
2465:../cleanflight/src/main/interface/msp.c ****         return mspProcessInCommand(cmdMSP, src);
 9915              	 .loc 26 2465 0
 9916 02d0 FB7B     	 ldrb r3,[r7,#15]
 9917 02d2 1846     	 mov r0,r3
 9918 02d4 B968     	 ldr r1,[r7,#8]
 9919 02d6 FFF7FEFF 	 bl mspProcessInCommand
 9920 02da 0346     	 mov r3,r0
 9921 02dc 00E0     	 b .L614
 9922              	.L604:
2466:../cleanflight/src/main/interface/msp.c ****     }
2467:../cleanflight/src/main/interface/msp.c ****     return MSP_RESULT_ACK;
 9923              	 .loc 26 2467 0
 9924 02de 0123     	 movs r3,#1
 9925              	.L614:
 9926 02e0 5BB2     	 sxtb r3,r3
2468:../cleanflight/src/main/interface/msp.c **** }
 9927              	 .loc 26 2468 0
 9928 02e2 1846     	 mov r0,r3
 9929 02e4 2837     	 adds r7,r7,#40
 9930              	.LCFI303:
 9931              	 .cfi_def_cfa_offset 16
 9932 02e6 BD46     	 mov sp,r7
 9933              	.LCFI304:
 9934              	 .cfi_def_cfa_register 13
 9935              	 
 9936 02e8 B0BD     	 pop {r4,r5,r7,pc}
 9937              	.L621:
 9938 02ea 00BF     	 .align 2
 9939              	.L620:
 9940 02ec 00000000 	 .word voltageMeterADCtoIDMap
 9941              	 .cfi_endproc
 9942              	.LFE669:
 9944              	 .section .text.mspFcProcessCommand,"ax",%progbits
 9945              	 .align 2
 9946              	 .global mspFcProcessCommand
 9947              	 .thumb
 9948              	 .thumb_func
 9950              	mspFcProcessCommand:
 9951              	.LFB670:
2469:../cleanflight/src/main/interface/msp.c **** 
2470:../cleanflight/src/main/interface/msp.c **** /*
2471:../cleanflight/src/main/interface/msp.c ****  * Returns MSP_RESULT_ACK, MSP_RESULT_ERROR or MSP_RESULT_NO_REPLY
2472:../cleanflight/src/main/interface/msp.c ****  */
2473:../cleanflight/src/main/interface/msp.c **** mspResult_e mspFcProcessCommand(mspPacket_t *cmd, mspPacket_t *reply, mspPostProcessFnPtr *mspPostP
2474:../cleanflight/src/main/interface/msp.c **** {
 9952              	 .loc 26 2474 0
 9953              	 .cfi_startproc
 9954              	 
 9955              	 
 9956 0000 80B5     	 push {r7,lr}
 9957              	.LCFI305:
 9958              	 .cfi_def_cfa_offset 8
 9959              	 .cfi_offset 7,-8
 9960              	 .cfi_offset 14,-4
 9961 0002 88B0     	 sub sp,sp,#32
 9962              	.LCFI306:
 9963              	 .cfi_def_cfa_offset 40
 9964 0004 00AF     	 add r7,sp,#0
 9965              	.LCFI307:
 9966              	 .cfi_def_cfa_register 7
 9967 0006 F860     	 str r0,[r7,#12]
 9968 0008 B960     	 str r1,[r7,#8]
 9969 000a 7A60     	 str r2,[r7,#4]
2475:../cleanflight/src/main/interface/msp.c ****     int ret = MSP_RESULT_ACK;
 9970              	 .loc 26 2475 0
 9971 000c 0123     	 movs r3,#1
 9972 000e FB61     	 str r3,[r7,#28]
2476:../cleanflight/src/main/interface/msp.c ****     sbuf_t *dst = &reply->buf;
 9973              	 .loc 26 2476 0
 9974 0010 BB68     	 ldr r3,[r7,#8]
 9975 0012 BB61     	 str r3,[r7,#24]
2477:../cleanflight/src/main/interface/msp.c ****     sbuf_t *src = &cmd->buf;
 9976              	 .loc 26 2477 0
 9977 0014 FB68     	 ldr r3,[r7,#12]
 9978 0016 7B61     	 str r3,[r7,#20]
2478:../cleanflight/src/main/interface/msp.c ****     const uint8_t cmdMSP = cmd->cmd;
 9979              	 .loc 26 2478 0
 9980 0018 FB68     	 ldr r3,[r7,#12]
 9981 001a B3F90830 	 ldrsh r3,[r3,#8]
 9982 001e 9BB2     	 uxth r3,r3
 9983 0020 FB74     	 strb r3,[r7,#19]
2479:../cleanflight/src/main/interface/msp.c ****     // initialize reply by default
2480:../cleanflight/src/main/interface/msp.c ****     reply->cmd = cmd->cmd;
 9984              	 .loc 26 2480 0
 9985 0022 FB68     	 ldr r3,[r7,#12]
 9986 0024 B3F90830 	 ldrsh r3,[r3,#8]
 9987 0028 9AB2     	 uxth r2,r3
 9988 002a BB68     	 ldr r3,[r7,#8]
 9989 002c 1A81     	 strh r2,[r3,#8]
2481:../cleanflight/src/main/interface/msp.c **** 
2482:../cleanflight/src/main/interface/msp.c ****     if (mspCommonProcessOutCommand(cmdMSP, dst, mspPostProcessFn)) {
 9990              	 .loc 26 2482 0
 9991 002e FB7C     	 ldrb r3,[r7,#19]
 9992 0030 1846     	 mov r0,r3
 9993 0032 B969     	 ldr r1,[r7,#24]
 9994 0034 7A68     	 ldr r2,[r7,#4]
 9995 0036 FFF7FEFF 	 bl mspCommonProcessOutCommand
 9996 003a 0346     	 mov r3,r0
 9997 003c 002B     	 cmp r3,#0
 9998 003e 02D0     	 beq .L623
2483:../cleanflight/src/main/interface/msp.c ****         ret = MSP_RESULT_ACK;
 9999              	 .loc 26 2483 0
 10000 0040 0123     	 movs r3,#1
 10001 0042 FB61     	 str r3,[r7,#28]
 10002 0044 2AE0     	 b .L624
 10003              	.L623:
2484:../cleanflight/src/main/interface/msp.c ****     } else if (mspProcessOutCommand(cmdMSP, dst)) {
 10004              	 .loc 26 2484 0
 10005 0046 FB7C     	 ldrb r3,[r7,#19]
 10006 0048 1846     	 mov r0,r3
 10007 004a B969     	 ldr r1,[r7,#24]
 10008 004c FFF7FEFF 	 bl mspProcessOutCommand
 10009 0050 0346     	 mov r3,r0
 10010 0052 002B     	 cmp r3,#0
 10011 0054 02D0     	 beq .L625
2485:../cleanflight/src/main/interface/msp.c ****         ret = MSP_RESULT_ACK;
 10012              	 .loc 26 2485 0
 10013 0056 0123     	 movs r3,#1
 10014 0058 FB61     	 str r3,[r7,#28]
 10015 005a 1FE0     	 b .L624
 10016              	.L625:
2486:../cleanflight/src/main/interface/msp.c ****     } else if ((ret = mspFcProcessOutCommandWithArg(cmdMSP, src, dst, mspPostProcessFn)) != MSP_RES
 10017              	 .loc 26 2486 0
 10018 005c FB7C     	 ldrb r3,[r7,#19]
 10019 005e 1846     	 mov r0,r3
 10020 0060 7969     	 ldr r1,[r7,#20]
 10021 0062 BA69     	 ldr r2,[r7,#24]
 10022 0064 7B68     	 ldr r3,[r7,#4]
 10023 0066 FFF7FEFF 	 bl mspFcProcessOutCommandWithArg
 10024 006a 0346     	 mov r3,r0
 10025 006c FB61     	 str r3,[r7,#28]
 10026 006e FB69     	 ldr r3,[r7,#28]
 10027 0070 13F1020F 	 cmn r3,#2
 10028 0074 12D1     	 bne .L624
2487:../cleanflight/src/main/interface/msp.c ****         /* ret */;
2488:../cleanflight/src/main/interface/msp.c **** #ifdef USE_SERIAL_4WAY_BLHELI_INTERFACE
2489:../cleanflight/src/main/interface/msp.c ****     } else if (cmdMSP == MSP_SET_4WAY_IF) {
 10029              	 .loc 26 2489 0
 10030 0076 FB7C     	 ldrb r3,[r7,#19]
 10031 0078 F52B     	 cmp r3,#245
 10032 007a 07D1     	 bne .L626
2490:../cleanflight/src/main/interface/msp.c ****         mspFc4waySerialCommand(dst, src, mspPostProcessFn);
 10033              	 .loc 26 2490 0
 10034 007c B869     	 ldr r0,[r7,#24]
 10035 007e 7969     	 ldr r1,[r7,#20]
 10036 0080 7A68     	 ldr r2,[r7,#4]
 10037 0082 FFF7FEFF 	 bl mspFc4waySerialCommand
2491:../cleanflight/src/main/interface/msp.c ****         ret = MSP_RESULT_ACK;
 10038              	 .loc 26 2491 0
 10039 0086 0123     	 movs r3,#1
 10040 0088 FB61     	 str r3,[r7,#28]
 10041 008a 07E0     	 b .L624
 10042              	.L626:
2492:../cleanflight/src/main/interface/msp.c **** #endif
2493:../cleanflight/src/main/interface/msp.c **** #ifdef USE_FLASHFS
2494:../cleanflight/src/main/interface/msp.c ****     } else if (cmdMSP == MSP_DATAFLASH_READ) {
2495:../cleanflight/src/main/interface/msp.c ****         mspFcDataFlashReadCommand(dst, src);
2496:../cleanflight/src/main/interface/msp.c ****         ret = MSP_RESULT_ACK;
2497:../cleanflight/src/main/interface/msp.c **** #endif
2498:../cleanflight/src/main/interface/msp.c ****     } else {
2499:../cleanflight/src/main/interface/msp.c ****         ret = mspCommonProcessInCommand(cmdMSP, src, mspPostProcessFn);
 10043              	 .loc 26 2499 0
 10044 008c FB7C     	 ldrb r3,[r7,#19]
 10045 008e 1846     	 mov r0,r3
 10046 0090 7969     	 ldr r1,[r7,#20]
 10047 0092 7A68     	 ldr r2,[r7,#4]
 10048 0094 FFF7FEFF 	 bl mspCommonProcessInCommand
 10049 0098 0346     	 mov r3,r0
 10050 009a FB61     	 str r3,[r7,#28]
 10051              	.L624:
2500:../cleanflight/src/main/interface/msp.c ****     }
2501:../cleanflight/src/main/interface/msp.c ****     reply->result = ret;
 10052              	 .loc 26 2501 0
 10053 009c FB69     	 ldr r3,[r7,#28]
 10054 009e 9AB2     	 uxth r2,r3
 10055 00a0 BB68     	 ldr r3,[r7,#8]
 10056 00a2 A3F80B20 	 strh r2,[r3,#11]
2502:../cleanflight/src/main/interface/msp.c ****     return ret;
 10057              	 .loc 26 2502 0
 10058 00a6 FB69     	 ldr r3,[r7,#28]
 10059 00a8 DBB2     	 uxtb r3,r3
 10060 00aa 5BB2     	 sxtb r3,r3
2503:../cleanflight/src/main/interface/msp.c **** }
 10061              	 .loc 26 2503 0
 10062 00ac 1846     	 mov r0,r3
 10063 00ae 2037     	 adds r7,r7,#32
 10064              	.LCFI308:
 10065              	 .cfi_def_cfa_offset 8
 10066 00b0 BD46     	 mov sp,r7
 10067              	.LCFI309:
 10068              	 .cfi_def_cfa_register 13
 10069              	 
 10070 00b2 80BD     	 pop {r7,pc}
 10071              	 .cfi_endproc
 10072              	.LFE670:
 10074              	 .section .text.mspFcProcessReply,"ax",%progbits
 10075              	 .align 2
 10076              	 .global mspFcProcessReply
 10077              	 .thumb
 10078              	 .thumb_func
 10080              	mspFcProcessReply:
 10081              	.LFB671:
2504:../cleanflight/src/main/interface/msp.c **** 
2505:../cleanflight/src/main/interface/msp.c **** void mspFcProcessReply(mspPacket_t *reply)
2506:../cleanflight/src/main/interface/msp.c **** {
 10082              	 .loc 26 2506 0
 10083              	 .cfi_startproc
 10084              	 
 10085              	 
 10086 0000 80B5     	 push {r7,lr}
 10087              	.LCFI310:
 10088              	 .cfi_def_cfa_offset 8
 10089              	 .cfi_offset 7,-8
 10090              	 .cfi_offset 14,-4
 10091 0002 86B0     	 sub sp,sp,#24
 10092              	.LCFI311:
 10093              	 .cfi_def_cfa_offset 32
 10094 0004 00AF     	 add r7,sp,#0
 10095              	.LCFI312:
 10096              	 .cfi_def_cfa_register 7
 10097 0006 7860     	 str r0,[r7,#4]
2507:../cleanflight/src/main/interface/msp.c ****     sbuf_t *src = &reply->buf;
 10098              	 .loc 26 2507 0
 10099 0008 7B68     	 ldr r3,[r7,#4]
 10100 000a 7B61     	 str r3,[r7,#20]
2508:../cleanflight/src/main/interface/msp.c ****     UNUSED(src); // potentially unused depending on compile options.
2509:../cleanflight/src/main/interface/msp.c **** 
2510:../cleanflight/src/main/interface/msp.c ****     switch (reply->cmd) {
 10101              	 .loc 26 2510 0
 10102 000c 7B68     	 ldr r3,[r7,#4]
 10103 000e B3F90830 	 ldrsh r3,[r3,#8]
 10104 0012 9BB2     	 uxth r3,r3
 10105 0014 1BB2     	 sxth r3,r3
 10106 0016 6E2B     	 cmp r3,#110
 10107 0018 14D1     	 bne .L628
 10108              	.LBB80:
2511:../cleanflight/src/main/interface/msp.c **** #ifndef OSD_SLAVE
2512:../cleanflight/src/main/interface/msp.c ****     case MSP_ANALOG:
2513:../cleanflight/src/main/interface/msp.c ****         {
2514:../cleanflight/src/main/interface/msp.c ****             uint8_t batteryVoltage = sbufReadU8(src);
 10109              	 .loc 26 2514 0
 10110 001a 7869     	 ldr r0,[r7,#20]
 10111 001c FFF7FEFF 	 bl sbufReadU8
 10112 0020 0346     	 mov r3,r0
 10113 0022 FB74     	 strb r3,[r7,#19]
2515:../cleanflight/src/main/interface/msp.c ****             uint16_t mAhDrawn = sbufReadU16(src);
 10114              	 .loc 26 2515 0
 10115 0024 7869     	 ldr r0,[r7,#20]
 10116 0026 FFF7FEFF 	 bl sbufReadU16
 10117 002a 0346     	 mov r3,r0
 10118 002c 3B82     	 strh r3,[r7,#16]
2516:../cleanflight/src/main/interface/msp.c ****             uint16_t rssi = sbufReadU16(src);
 10119              	 .loc 26 2516 0
 10120 002e 7869     	 ldr r0,[r7,#20]
 10121 0030 FFF7FEFF 	 bl sbufReadU16
 10122 0034 0346     	 mov r3,r0
 10123 0036 FB81     	 strh r3,[r7,#14]
2517:../cleanflight/src/main/interface/msp.c ****             uint16_t amperage = sbufReadU16(src);
 10124              	 .loc 26 2517 0
 10125 0038 7869     	 ldr r0,[r7,#20]
 10126 003a FFF7FEFF 	 bl sbufReadU16
 10127 003e 0346     	 mov r3,r0
 10128 0040 BB81     	 strh r3,[r7,#12]
 10129              	.LBE80:
2518:../cleanflight/src/main/interface/msp.c **** 
2519:../cleanflight/src/main/interface/msp.c ****             UNUSED(rssi);
2520:../cleanflight/src/main/interface/msp.c ****             UNUSED(batteryVoltage);
2521:../cleanflight/src/main/interface/msp.c ****             UNUSED(amperage);
2522:../cleanflight/src/main/interface/msp.c ****             UNUSED(mAhDrawn);
2523:../cleanflight/src/main/interface/msp.c **** 
2524:../cleanflight/src/main/interface/msp.c **** #ifdef USE_MSP_CURRENT_METER
2525:../cleanflight/src/main/interface/msp.c ****             currentMeterMSPSet(amperage, mAhDrawn);
2526:../cleanflight/src/main/interface/msp.c **** #endif
2527:../cleanflight/src/main/interface/msp.c ****         }
2528:../cleanflight/src/main/interface/msp.c ****         break;
 10130              	 .loc 26 2528 0
 10131 0042 00BF     	 nop
 10132              	.L628:
2529:../cleanflight/src/main/interface/msp.c **** #endif
2530:../cleanflight/src/main/interface/msp.c **** 
2531:../cleanflight/src/main/interface/msp.c **** #ifdef USE_OSD_SLAVE
2532:../cleanflight/src/main/interface/msp.c ****     case MSP_DISPLAYPORT:
2533:../cleanflight/src/main/interface/msp.c ****         {
2534:../cleanflight/src/main/interface/msp.c ****             osdSlaveIsLocked = true; // lock it as soon as a MSP_DISPLAYPORT message is received to
2535:../cleanflight/src/main/interface/msp.c **** 
2536:../cleanflight/src/main/interface/msp.c ****             const int subCmd = sbufReadU8(src);
2537:../cleanflight/src/main/interface/msp.c **** 
2538:../cleanflight/src/main/interface/msp.c ****             switch (subCmd) {
2539:../cleanflight/src/main/interface/msp.c ****             case 0: // HEARTBEAT
2540:../cleanflight/src/main/interface/msp.c ****                 osdSlaveHeartbeat();
2541:../cleanflight/src/main/interface/msp.c ****                 break;
2542:../cleanflight/src/main/interface/msp.c ****             case 1: // RELEASE
2543:../cleanflight/src/main/interface/msp.c ****                 break;
2544:../cleanflight/src/main/interface/msp.c ****             case 2: // CLEAR
2545:../cleanflight/src/main/interface/msp.c ****                 osdSlaveClearScreen();
2546:../cleanflight/src/main/interface/msp.c ****                 break;
2547:../cleanflight/src/main/interface/msp.c ****             case 3:
2548:../cleanflight/src/main/interface/msp.c ****                 {
2549:../cleanflight/src/main/interface/msp.c **** #define MSP_OSD_MAX_STRING_LENGTH 30 // FIXME move this
2550:../cleanflight/src/main/interface/msp.c ****                     const uint8_t y = sbufReadU8(src); // row
2551:../cleanflight/src/main/interface/msp.c ****                     const uint8_t x = sbufReadU8(src); // column
2552:../cleanflight/src/main/interface/msp.c ****                     sbufReadU8(src); // reserved
2553:../cleanflight/src/main/interface/msp.c ****                     char buf[MSP_OSD_MAX_STRING_LENGTH + 1];
2554:../cleanflight/src/main/interface/msp.c ****                     const int len = MIN(sbufBytesRemaining(src), MSP_OSD_MAX_STRING_LENGTH);
2555:../cleanflight/src/main/interface/msp.c ****                     sbufReadData(src, &buf, len);
2556:../cleanflight/src/main/interface/msp.c ****                     buf[len] = 0;
2557:../cleanflight/src/main/interface/msp.c ****                     osdSlaveWrite(x, y, buf);
2558:../cleanflight/src/main/interface/msp.c ****                 }
2559:../cleanflight/src/main/interface/msp.c ****                 break;
2560:../cleanflight/src/main/interface/msp.c ****             case 4:
2561:../cleanflight/src/main/interface/msp.c ****                 osdSlaveDrawScreen();
2562:../cleanflight/src/main/interface/msp.c ****                 break;
2563:../cleanflight/src/main/interface/msp.c ****             }
2564:../cleanflight/src/main/interface/msp.c ****         }
2565:../cleanflight/src/main/interface/msp.c ****         break;
2566:../cleanflight/src/main/interface/msp.c **** #endif
2567:../cleanflight/src/main/interface/msp.c ****     }
2568:../cleanflight/src/main/interface/msp.c **** }
 10133              	 .loc 26 2568 0
 10134 0044 1837     	 adds r7,r7,#24
 10135              	.LCFI313:
 10136              	 .cfi_def_cfa_offset 8
 10137 0046 BD46     	 mov sp,r7
 10138              	.LCFI314:
 10139              	 .cfi_def_cfa_register 13
 10140              	 
 10141 0048 80BD     	 pop {r7,pc}
 10142              	 .cfi_endproc
 10143              	.LFE671:
 10145 004a 00BF     	 .section .text.mspInit,"ax",%progbits
 10146              	 .align 2
 10147              	 .global mspInit
 10148              	 .thumb
 10149              	 .thumb_func
 10151              	mspInit:
 10152              	.LFB672:
2569:../cleanflight/src/main/interface/msp.c **** 
2570:../cleanflight/src/main/interface/msp.c **** void mspInit(void)
2571:../cleanflight/src/main/interface/msp.c **** {
 10153              	 .loc 26 2571 0
 10154              	 .cfi_startproc
 10155              	 
 10156              	 
 10157 0000 80B5     	 push {r7,lr}
 10158              	.LCFI315:
 10159              	 .cfi_def_cfa_offset 8
 10160              	 .cfi_offset 7,-8
 10161              	 .cfi_offset 14,-4
 10162 0002 00AF     	 add r7,sp,#0
 10163              	.LCFI316:
 10164              	 .cfi_def_cfa_register 7
2572:../cleanflight/src/main/interface/msp.c **** #ifndef USE_OSD_SLAVE
2573:../cleanflight/src/main/interface/msp.c ****     initActiveBoxIds();
 10165              	 .loc 26 2573 0
 10166 0004 FFF7FEFF 	 bl initActiveBoxIds
2574:../cleanflight/src/main/interface/msp.c **** #endif
2575:../cleanflight/src/main/interface/msp.c **** }
 10167              	 .loc 26 2575 0
 10168 0008 80BD     	 pop {r7,pc}
 10169              	 .cfi_endproc
 10170              	.LFE672:
 10172 000a 00BF     	 .text
 10173              	.Letext0:
 10174              	 .file 27 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 10175              	 .file 28 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 10176              	 .file 29 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/xmc4700.h"
 10177              	 .file 30 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 10178              	 .file 31 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/platform.h"
 10179              	 .file 32 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 10180              	 .file 33 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 10181              	 .file 34 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/axis.h"
 10182              	 .file 35 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/color.h"
 10183              	 .file 36 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/streambuf.h"
 10184              	 .file 37 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 10185              	 .file 38 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 10186              	 .file 39 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus_i2c.h"
 10187              	 .file 40 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus.h"
 10188              	 .file 41 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sensor.h"
 10189              	 .file 42 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro.h"
 10190              	 .file 43 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro_mpu.h"
 10191              	 .file 44 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/camera_control.h"
 10192              	 .file 45 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/flash.h"
 10193              	 .file 46 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 10194              	 .file 47 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
 10195              	 .file 48 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/sdcard.h"
 10196              	 .file 49 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 10197              	 .file 50 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial_escserial.h"
 10198              	 .file 51 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/transponder_ir.h"
 10199              	 .file 52 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/vtx_common.h"
 10200              	 .file 53 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/controlrate_profile.h"
 10201              	 .file 54 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_core.h"
 10202              	 .file 55 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 10203              	 .file 56 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/interface/msp.h"
 10204              	 .file 57 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/interface/msp_box.h"
 10205              	 .file 58 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/asyncfatfs/asyncfatfs.h"
 10206              	 .file 59 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gimbal.h"
 10207              	 .file 60 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/ledstrip.h"
 10208              	 .file 61 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/transponder_ir.h"
 10209              	 .file 62 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx_control.h"
 10210              	 .file 63 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/beeper.h"
 10211              	 .file 64 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/board.h"
 10212              	 .file 65 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx_spi.h"
 10213              	 .file 66 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/usb.h"
 10214              	 .file 67 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/vcd.h"
 10215              	 .file 68 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/scheduler/scheduler.h"
 10216              	 .file 69 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current_ids.h"
 10217              	 .file 70 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/sensors.h"
 10218              	 .file 71 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/esc_sensor.h"
 10219              	 .file 72 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/rangefinder.h"
 10220              	 .file 73 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/telemetry/telemetry.h"
 10221              	 .file 74 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 10222              	 .file 75 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
 10223              	 .file 76 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/version.h"
DEFINED SYMBOLS
                            *ABS*:00000000 msp.c
    {standard input}:20     .text.blackboxConfig:00000000 $t
    {standard input}:24     .text.blackboxConfig:00000000 blackboxConfig
    {standard input}:54     .text.blackboxConfig:00000010 $d
    {standard input}:59     .text.blackboxConfigMutable:00000000 $t
    {standard input}:63     .text.blackboxConfigMutable:00000000 blackboxConfigMutable
    {standard input}:92     .text.blackboxConfigMutable:00000010 $d
    {standard input}:97     .text.constrain:00000000 $t
    {standard input}:101    .text.constrain:00000000 constrain
    {standard input}:161    .text.gyroConfig:00000000 $t
    {standard input}:165    .text.gyroConfig:00000000 gyroConfig
    {standard input}:195    .text.gyroConfig:00000010 $d
    {standard input}:200    .text.gyroConfigMutable:00000000 $t
    {standard input}:204    .text.gyroConfigMutable:00000000 gyroConfigMutable
    {standard input}:233    .text.gyroConfigMutable:00000010 $d
    {standard input}:238    .text.pilotConfig:00000000 $t
    {standard input}:242    .text.pilotConfig:00000000 pilotConfig
    {standard input}:272    .text.pilotConfig:00000010 $d
    {standard input}:277    .text.pilotConfigMutable:00000000 $t
    {standard input}:281    .text.pilotConfigMutable:00000000 pilotConfigMutable
    {standard input}:310    .text.pilotConfigMutable:00000010 $d
    {standard input}:315    .text.systemConfig:00000000 $t
    {standard input}:319    .text.systemConfig:00000000 systemConfig
    {standard input}:348    .text.systemConfig:00000010 $d
    {standard input}:353    .text.modeActivationConditions:00000000 $t
    {standard input}:357    .text.modeActivationConditions:00000000 modeActivationConditions
    {standard input}:400    .text.modeActivationConditions:00000024 $d
    {standard input}:405    .text.modeActivationConditionsMutable:00000000 $t
    {standard input}:409    .text.modeActivationConditionsMutable:00000000 modeActivationConditionsMutable
    {standard input}:451    .text.modeActivationConditionsMutable:00000024 $d
    {standard input}:456    .text.adjustmentRanges:00000000 $t
    {standard input}:460    .text.adjustmentRanges:00000000 adjustmentRanges
    {standard input}:503    .text.adjustmentRanges:00000024 $d
    {standard input}:508    .text.adjustmentRangesMutable:00000000 $t
    {standard input}:512    .text.adjustmentRangesMutable:00000000 adjustmentRangesMutable
    {standard input}:554    .text.adjustmentRangesMutable:00000024 $d
    {standard input}:559    .text.rcControlsConfig:00000000 $t
    {standard input}:563    .text.rcControlsConfig:00000000 rcControlsConfig
    {standard input}:593    .text.rcControlsConfig:00000010 $d
    {standard input}:598    .text.rcControlsConfigMutable:00000000 $t
    {standard input}:602    .text.rcControlsConfigMutable:00000000 rcControlsConfigMutable
    {standard input}:631    .text.rcControlsConfigMutable:00000010 $d
    {standard input}:636    .text.flight3DConfig:00000000 $t
    {standard input}:640    .text.flight3DConfig:00000000 flight3DConfig
    {standard input}:669    .text.flight3DConfig:00000010 $d
    {standard input}:674    .text.flight3DConfigMutable:00000000 $t
    {standard input}:678    .text.flight3DConfigMutable:00000000 flight3DConfigMutable
    {standard input}:707    .text.flight3DConfigMutable:00000010 $d
    {standard input}:712    .text.armingConfig:00000000 $t
    {standard input}:716    .text.armingConfig:00000000 armingConfig
    {standard input}:745    .text.armingConfig:00000010 $d
    {standard input}:750    .text.armingConfigMutable:00000000 $t
    {standard input}:754    .text.armingConfigMutable:00000000 armingConfigMutable
    {standard input}:783    .text.armingConfigMutable:00000010 $d
    {standard input}:788    .text.failsafeConfig:00000000 $t
    {standard input}:792    .text.failsafeConfig:00000000 failsafeConfig
    {standard input}:822    .text.failsafeConfig:00000010 $d
    {standard input}:827    .text.failsafeConfigMutable:00000000 $t
    {standard input}:831    .text.failsafeConfigMutable:00000000 failsafeConfigMutable
    {standard input}:860    .text.failsafeConfigMutable:00000010 $d
    {standard input}:865    .text.imuConfig:00000000 $t
    {standard input}:869    .text.imuConfig:00000000 imuConfig
    {standard input}:899    .text.imuConfig:00000010 $d
    {standard input}:904    .text.imuConfigMutable:00000000 $t
    {standard input}:908    .text.imuConfigMutable:00000000 imuConfigMutable
    {standard input}:937    .text.imuConfigMutable:00000010 $d
    {standard input}:942    .text.mixerConfig:00000000 $t
    {standard input}:946    .text.mixerConfig:00000000 mixerConfig
    {standard input}:976    .text.mixerConfig:00000010 $d
    {standard input}:981    .text.mixerConfigMutable:00000000 $t
    {standard input}:985    .text.mixerConfigMutable:00000000 mixerConfigMutable
    {standard input}:1014   .text.mixerConfigMutable:00000010 $d
    {standard input}:1019   .text.motorConfig:00000000 $t
    {standard input}:1023   .text.motorConfig:00000000 motorConfig
    {standard input}:1052   .text.motorConfig:00000010 $d
    {standard input}:1057   .text.motorConfigMutable:00000000 $t
    {standard input}:1061   .text.motorConfigMutable:00000000 motorConfigMutable
    {standard input}:1090   .text.motorConfigMutable:00000010 $d
    {standard input}:1095   .text.pidConfig:00000000 $t
    {standard input}:1099   .text.pidConfig:00000000 pidConfig
    {standard input}:1129   .text.pidConfig:00000010 $d
    {standard input}:1134   .text.pidConfigMutable:00000000 $t
    {standard input}:1138   .text.pidConfigMutable:00000000 pidConfigMutable
    {standard input}:1167   .text.pidConfigMutable:00000010 $d
                            *COM*:00000001 inputSource_e
    {standard input}:1173   .text.customServoMixers:00000000 $t
    {standard input}:1177   .text.customServoMixers:00000000 customServoMixers
    {standard input}:1219   .text.customServoMixers:00000020 $d
    {standard input}:1224   .text.customServoMixersMutable:00000000 $t
    {standard input}:1228   .text.customServoMixersMutable:00000000 customServoMixersMutable
    {standard input}:1269   .text.customServoMixersMutable:00000020 $d
    {standard input}:1274   .text.servoParams:00000000 $t
    {standard input}:1278   .text.servoParams:00000000 servoParams
    {standard input}:1320   .text.servoParams:00000024 $d
    {standard input}:1325   .text.servoParamsMutable:00000000 $t
    {standard input}:1329   .text.servoParamsMutable:00000000 servoParamsMutable
    {standard input}:1371   .text.servoParamsMutable:00000024 $d
    {standard input}:1376   .text.gpsConfig:00000000 $t
    {standard input}:1380   .text.gpsConfig:00000000 gpsConfig
    {standard input}:1410   .text.gpsConfig:00000010 $d
    {standard input}:1415   .text.gpsConfigMutable:00000000 $t
    {standard input}:1419   .text.gpsConfigMutable:00000000 gpsConfigMutable
    {standard input}:1448   .text.gpsConfigMutable:00000010 $d
                            *COM*:00000004 colors
                            *COM*:00000004 modeColors
                            *COM*:0000000b specialColors
    {standard input}:1456   .text.osdConfig:00000000 $t
    {standard input}:1460   .text.osdConfig:00000000 osdConfig
    {standard input}:1490   .text.osdConfig:00000010 $d
    {standard input}:1495   .text.osdConfigMutable:00000000 $t
    {standard input}:1499   .text.osdConfigMutable:00000000 osdConfigMutable
    {standard input}:1528   .text.osdConfigMutable:00000010 $d
    {standard input}:1533   .text.serialConfig:00000000 $t
    {standard input}:1537   .text.serialConfig:00000000 serialConfig
    {standard input}:1567   .text.serialConfig:00000010 $d
    {standard input}:1572   .text.vtxSettingsConfig:00000000 $t
    {standard input}:1576   .text.vtxSettingsConfig:00000000 vtxSettingsConfig
    {standard input}:1606   .text.vtxSettingsConfig:00000010 $d
    {standard input}:1611   .text.vtxSettingsConfigMutable:00000000 $t
    {standard input}:1615   .text.vtxSettingsConfigMutable:00000000 vtxSettingsConfigMutable
    {standard input}:1644   .text.vtxSettingsConfigMutable:00000010 $d
    {standard input}:1649   .text.rxConfig:00000000 $t
    {standard input}:1653   .text.rxConfig:00000000 rxConfig
    {standard input}:1683   .text.rxConfig:00000010 $d
    {standard input}:1688   .text.rxConfigMutable:00000000 $t
    {standard input}:1692   .text.rxConfigMutable:00000000 rxConfigMutable
    {standard input}:1721   .text.rxConfigMutable:00000010 $d
    {standard input}:1726   .text.rxFailsafeChannelConfigs:00000000 $t
    {standard input}:1730   .text.rxFailsafeChannelConfigs:00000000 rxFailsafeChannelConfigs
    {standard input}:1770   .text.rxFailsafeChannelConfigs:0000001c $d
    {standard input}:1775   .text.rxFailsafeChannelConfigsMutable:00000000 $t
    {standard input}:1779   .text.rxFailsafeChannelConfigsMutable:00000000 rxFailsafeChannelConfigsMutable
    {standard input}:1818   .text.rxFailsafeChannelConfigsMutable:0000001c $d
    {standard input}:1823   .text.currentSensorADCConfig:00000000 $t
    {standard input}:1827   .text.currentSensorADCConfig:00000000 currentSensorADCConfig
    {standard input}:1857   .text.currentSensorADCConfig:00000010 $d
    {standard input}:1862   .text.currentSensorADCConfigMutable:00000000 $t
    {standard input}:1866   .text.currentSensorADCConfigMutable:00000000 currentSensorADCConfigMutable
    {standard input}:1895   .text.currentSensorADCConfigMutable:00000010 $d
    {standard input}:1900   .text.currentSensorVirtualConfig:00000000 $t
    {standard input}:1904   .text.currentSensorVirtualConfig:00000000 currentSensorVirtualConfig
    {standard input}:1933   .text.currentSensorVirtualConfig:00000010 $d
    {standard input}:1938   .text.currentSensorVirtualConfigMutable:00000000 $t
    {standard input}:1942   .text.currentSensorVirtualConfigMutable:00000000 currentSensorVirtualConfigMutable
    {standard input}:1971   .text.currentSensorVirtualConfigMutable:00000010 $d
    {standard input}:1976   .text.voltageSensorADCConfig:00000000 $t
    {standard input}:1980   .text.voltageSensorADCConfig:00000000 voltageSensorADCConfig
    {standard input}:2022   .text.voltageSensorADCConfig:00000020 $d
    {standard input}:2027   .text.voltageSensorADCConfigMutable:00000000 $t
    {standard input}:2031   .text.voltageSensorADCConfigMutable:00000000 voltageSensorADCConfigMutable
    {standard input}:2072   .text.voltageSensorADCConfigMutable:00000020 $d
    {standard input}:2077   .text.batteryConfig:00000000 $t
    {standard input}:2081   .text.batteryConfig:00000000 batteryConfig
    {standard input}:2111   .text.batteryConfig:00000010 $d
    {standard input}:2116   .text.batteryConfigMutable:00000000 $t
    {standard input}:2120   .text.batteryConfigMutable:00000000 batteryConfigMutable
    {standard input}:2149   .text.batteryConfigMutable:00000010 $d
    {standard input}:2154   .text.accelerometerConfig:00000000 $t
    {standard input}:2158   .text.accelerometerConfig:00000000 accelerometerConfig
    {standard input}:2188   .text.accelerometerConfig:00000010 $d
    {standard input}:2193   .text.accelerometerConfigMutable:00000000 $t
    {standard input}:2197   .text.accelerometerConfigMutable:00000000 accelerometerConfigMutable
    {standard input}:2226   .text.accelerometerConfigMutable:00000010 $d
    {standard input}:2231   .text.barometerConfig:00000000 $t
    {standard input}:2235   .text.barometerConfig:00000000 barometerConfig
    {standard input}:2265   .text.barometerConfig:00000010 $d
    {standard input}:2270   .text.barometerConfigMutable:00000000 $t
    {standard input}:2274   .text.barometerConfigMutable:00000000 barometerConfigMutable
    {standard input}:2303   .text.barometerConfigMutable:00000010 $d
    {standard input}:2308   .text.boardAlignment:00000000 $t
    {standard input}:2312   .text.boardAlignment:00000000 boardAlignment
    {standard input}:2342   .text.boardAlignment:00000010 $d
    {standard input}:2347   .text.boardAlignmentMutable:00000000 $t
    {standard input}:2351   .text.boardAlignmentMutable:00000000 boardAlignmentMutable
    {standard input}:2380   .text.boardAlignmentMutable:00000010 $d
    {standard input}:2385   .text.compassConfig:00000000 $t
    {standard input}:2389   .text.compassConfig:00000000 compassConfig
    {standard input}:2419   .text.compassConfig:00000010 $d
    {standard input}:2424   .text.compassConfigMutable:00000000 $t
    {standard input}:2428   .text.compassConfigMutable:00000000 compassConfigMutable
    {standard input}:2457   .text.compassConfigMutable:00000010 $d
    {standard input}:2462   .rodata:00000000 $d
    {standard input}:2466   .rodata.flightControllerIdentifier:00000000 $d
    {standard input}:2469   .rodata.flightControllerIdentifier:00000000 flightControllerIdentifier
    {standard input}:2474   .bss.rebootMode:00000000 rebootMode
    {standard input}:2475   .bss.rebootMode:00000000 $d
                            *COM*:00000001 escMode
                            *COM*:00000001 escPortIndex
    {standard input}:2479   .text.mspFc4waySerialCommand:00000000 $t
    {standard input}:2483   .text.mspFc4waySerialCommand:00000000 mspFc4waySerialCommand
    {standard input}:2575   .text.mspFc4waySerialCommand:00000074 $d
    {standard input}:2582   .text.mspRebootFn:00000000 $t
    {standard input}:2586   .text.mspRebootFn:00000000 mspRebootFn
    {standard input}:2633   .text.mspRebootFn:0000002c $d
    {standard input}:2638   .text.serializeSDCardSummaryReply:00000000 $t
    {standard input}:2642   .text.serializeSDCardSummaryReply:00000000 serializeSDCardSummaryReply
    {standard input}:2770   .text.serializeDataflashSummaryReply:00000000 $t
    {standard input}:2774   .text.serializeDataflashSummaryReply:00000000 serializeDataflashSummaryReply
    {standard input}:2821   .text.mspCommonProcessOutCommand:00000000 $t
    {standard input}:2825   .text.mspCommonProcessOutCommand:00000000 mspCommonProcessOutCommand
    {standard input}:3292   .text.mspCommonProcessOutCommand:00000384 $d
    {standard input}:3308   .text.mspCommonProcessOutCommand:000003b8 $t
    {standard input}:3694   .text.mspCommonProcessOutCommand:000006b0 $d
    {standard input}:3698   .text.mspCommonProcessOutCommand:000006b8 $t
    {standard input}:3752   .text.mspProcessOutCommand:00000000 $t
    {standard input}:3756   .text.mspProcessOutCommand:00000000 mspProcessOutCommand
    {standard input}:3789   .text.mspProcessOutCommand:00000024 $d
    {standard input}:4027   .text.mspProcessOutCommand:000003dc $t
    {standard input}:4446   .text.mspProcessOutCommand:00000710 $d
    {standard input}:4452   .text.mspProcessOutCommand:00000720 $t
    {standard input}:4913   .text.mspProcessOutCommand:00000a70 $d
    {standard input}:4924   .text.mspProcessOutCommand:00000a90 $t
    {standard input}:5293   .text.mspProcessOutCommand:00000d5c $d
    {standard input}:5307   .text.mspProcessOutCommand:00000d8c $t
    {standard input}:5923   .text.mspProcessOutCommand:00001294 $d
    {standard input}:5926   .text.mspProcessOutCommand:00001298 $t
    {standard input}:6262   .text.mspProcessOutCommand:00001564 $d
    {standard input}:6266   .text.mspProcessOutCommand:00001568 $t
    {standard input}:6443   .text.mspProcessOutCommand:000016ac $d
    {standard input}:6448   .text.mspFcProcessOutCommandWithArg:00000000 $t
    {standard input}:6452   .text.mspFcProcessOutCommandWithArg:00000000 mspFcProcessOutCommandWithArg
    {standard input}:6611   .text.mspFcProcessOutCommandWithArg:000000cc $d
    {standard input}:6619   .text.mspProcessInCommand:00000000 $t
    {standard input}:6623   .text.mspProcessInCommand:00000000 mspProcessInCommand
    {standard input}:6658   .text.mspProcessInCommand:00000028 $d
    {standard input}:6898   .text.mspProcessInCommand:000003e8 $t
    {standard input}:7329   .text.mspProcessInCommand:00000754 $d
    {standard input}:7334   .text.mspProcessInCommand:00000760 $t
    {standard input}:7726   .text.mspProcessInCommand:00000a80 $d
    {standard input}:7730   .text.mspProcessInCommand:00000a88 $t
    {standard input}:8187   .text.mspProcessInCommand:00000e64 $d
    {standard input}:8190   .text.mspProcessInCommand:00000e68 $t
    {standard input}:8586   .text.mspProcessInCommand:0000118c $d
    {standard input}:8591   .text.mspProcessInCommand:00001198 $t
    {standard input}:9062   .text.mspProcessInCommand:0000155c $d
    {standard input}:9069   .text.mspProcessInCommand:00001570 $t
    {standard input}:9505   .text.mspProcessInCommand:000018d0 $d
    {standard input}:9510   .text.mspCommonProcessInCommand:00000000 $t
    {standard input}:9514   .text.mspCommonProcessInCommand:00000000 mspCommonProcessInCommand
    {standard input}:9940   .text.mspCommonProcessInCommand:000002ec $d
    {standard input}:9945   .text.mspFcProcessCommand:00000000 $t
    {standard input}:9950   .text.mspFcProcessCommand:00000000 mspFcProcessCommand
    {standard input}:10075  .text.mspFcProcessReply:00000000 $t
    {standard input}:10080  .text.mspFcProcessReply:00000000 mspFcProcessReply
    {standard input}:10146  .text.mspInit:00000000 $t
    {standard input}:10151  .text.mspInit:00000000 mspInit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
blackboxConfig_System
gyroConfig_System
pilotConfig_System
systemConfig_System
modeActivationConditions_SystemArray
adjustmentRanges_SystemArray
rcControlsConfig_System
flight3DConfig_System
armingConfig_System
failsafeConfig_System
imuConfig_System
mixerConfig_System
motorConfig_System
pidConfig_System
customServoMixers_SystemArray
servoParams_SystemArray
gpsConfig_System
osdConfig_System
serialConfig_System
vtxSettingsConfig_System
rxConfig_System
rxFailsafeChannelConfigs_SystemArray
currentSensorADCConfig_System
currentSensorVirtualConfig_System
voltageSensorADCConfig_SystemArray
batteryConfig_System
accelerometerConfig_System
barometerConfig_System
boardAlignment_System
compassConfig_System
sbufBytesRemaining
sbufReadU8
esc4wayInit
sbufWriteU8
esc4wayProcess
stopPwmAllMotors
systemReset
systemResetToBootloader
sdcard_isInserted
sdcard_isFunctional
afatfs_getFilesystemState
sdcard_isInitialized
afatfs_getLastError
afatfs_getContiguousFreeSpace
sbufWriteU32
sdcard_getMetadata
sbufWriteData
sbufWriteU16
strlen
getBoardName
sbufWriteString
getManufacturerId
getSignature
getBatteryVoltage
getMAhDrawn
getRssi
getAmperage
featureMask
getBatteryCellCount
getBatteryState
voltageMeterRead
targetName
buildDate
buildTime
shortGitRevision
debug
supportedVoltageMeterCount
voltageMeterIds
supportedCurrentMeterCount
currentMeterRead
osdStatGetState
currentMeterIds
voltageMeterADCtoIDMap
packFlightModeFlags
getTaskDeltaTime
i2cGetErrorCounter
sensors
getCurrentPidProfileIndex
getCurrentControlRateProfileIndex
getArmingDisableFlags
lrintf
gyroRateDps
averageSystemLoadPercent
acc
mag
servo
pwmGetMotors
convertMotorToExternal
getEstimatedAltitude
getEstimatedVario
motor
rcData
rxRuntimeConfig
attitude
currentControlRateProfile
currentPidProfile
pidNames
findBoxByBoxId
stateFlags
gpsSol
GPS_distanceToHome
GPS_directionToHome
GPS_update
GPS_numCh
GPS_svinfo_chn
GPS_svinfo_svid
GPS_svinfo_quality
GPS_svinfo_cno
serialIsPortAvailable
blackboxGetRateDenom
vtxCommonDevice
vtxCommonGetPitMode
vtxCommonGetDeviceType
rtcGetDateTime
rssiSource
serializeBoxReply
serializeBoxNameFn
serializeBoxPermanentIdFn
changePidProfile
changeControlRateProfile
pidCopyProfile
copyControlRateProfile
sbufReadU16
rxMspFrameReceive
pidInitConfig
findBoxByPermanentId
useRcControlsConfig
armingFlags
magHold
initRcProcessing
convertExternalToMotor
getMotorCount
sbufReadU32
motor_disarmed
loadCustomServoMixer
resetPidProfile
validateAndFixGyroConfig
gyroInitFilters
pidInitFilters
resetEEPROM
readEEPROM
accSetCalibrationCycles
writeEEPROM
blackboxMayEditConfig
blackboxCalculatePDenom
vtx58_Bandchan2Freq
vtxCommonSetPitMode
setArmingDisabled
disarm
runawayTakeoffTemporaryDisable
unsetArmingDisabled
featureClearAll
featureSet
serialFindPortConfiguration
memset
rtcSetDateTime
setRssiMsp
boardInformationIsSet
sbufReadData
sbufAdvance
setBoardName
setManufacturerId
persistBoardInformation
signatureIsSet
setSignature
persistSignature
osdStatSetState
initActiveBoxIds
