   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "asyncfatfs.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.afatfs,"aw",%nobits
  20              	 .align 2
  23              	afatfs:
  24 0000 00000000 	 .space 4580
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              	 .section .text.roundUpTo,"ax",%progbits
  26              	 .align 2
  27              	 .thumb
  28              	 .thumb_func
  30              	roundUpTo:
  31              	.LFB531:
  32              	 .file 1 "../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c"
   1:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /*
   2:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
   4:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * any later version.
   9:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
  10:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
  15:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * along with this software.
  17:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
  18:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
  20:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  21:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
  22:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * This is a FAT16/FAT32 filesystem for SD cards which uses asynchronous operations: The caller nee
  23:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * for the SD card to be ready.
  24:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
  25:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * On top of the regular FAT32 concepts, we add the idea of a "super cluster". Given one FAT sector
  26:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * the series of clusters which corresponds to all of the cluster entries in that FAT sector. If fi
  27:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * on super-cluster boundaries, they will have FAT sectors which are dedicated to them and independ
  28:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * files.
  29:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
  30:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * We can pre-allocate a "freefile" which is a file on disk made up of contiguous superclusters. Th
  31:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * to allocate a file on disk, we can carve it out of the freefile, and know that the clusters will
  32:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * without needing to read the FAT at all (the freefile's FAT is completely determined from its sta
  33:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * size, which we get from the directory entry). This allows for extremely fast append-only logging
  34:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
  35:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  36:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include <stdint.h>
  37:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include <stdlib.h>
  38:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include <string.h>
  39:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  40:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include "platform.h"
  41:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  42:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_DEBUG
  43:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include <signal.h>
  44:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include <stdio.h>
  45:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
  46:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  47:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include "asyncfatfs.h"
  48:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  49:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include "fat_standard.h"
  50:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include "drivers/sdcard.h"
  51:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include "common/maths.h"
  52:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include "common/time.h"
  53:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #include "common/utils.h"
  54:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  55:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_DEBUG
  56:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     #define ONLY_EXPOSE_FOR_TESTING
  57:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #else
  58:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     #define ONLY_EXPOSE_FOR_TESTING static
  59:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
  60:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  61:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_NUM_CACHE_SECTORS 8
  62:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  63:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // FAT filesystems are allowed to differ from these parameters, but we choose not to support those 
  64:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_SECTOR_SIZE  512
  65:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_NUM_FATS     2
  66:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  67:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_MAX_OPEN_FILES 3
  68:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  69:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_DEFAULT_FILE_DATE FAT_MAKE_DATE(2015, 12, 01)
  70:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_DEFAULT_FILE_TIME FAT_MAKE_TIME(00, 00, 00)
  71:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  72:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /*
  73:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * How many blocks will we write in a row before we bother using the SDcard's multiple block write 
  74:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * If this define is omitted, this disables multi-block write.
  75:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
  76:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_MIN_MULTIPLE_BLOCK_WRITE_COUNT 4
  77:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  78:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FILES_PER_DIRECTORY_SECTOR (AFATFS_SECTOR_SIZE / sizeof(fatDirectoryEntry_t))
  79:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  80:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FAT32_FAT_ENTRIES_PER_SECTOR  (AFATFS_SECTOR_SIZE / sizeof(uint32_t))
  81:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FAT16_FAT_ENTRIES_PER_SECTOR (AFATFS_SECTOR_SIZE / sizeof(uint16_t))
  82:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  83:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // We will read from the file
  84:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FILE_MODE_READ             1
  85:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // We will write to the file
  86:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FILE_MODE_WRITE            2
  87:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // We will append to the file, may not be combined with the write flag
  88:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FILE_MODE_APPEND           4
  89:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // File will occupy a series of superclusters (only valid for creating new files):
  90:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FILE_MODE_CONTIGUOUS       8
  91:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // File should be created if it doesn't exist:
  92:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FILE_MODE_CREATE           16
  93:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // The file's directory entry should be locked in cache so we can read it with no latency:
  94:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FILE_MODE_RETAIN_DIRECTORY 32
  95:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
  96:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // Open the cache sector for read access (it will be read from disk)
  97:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_CACHE_READ         1
  98:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // Open the cache sector for write access (it will be marked dirty)
  99:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_CACHE_WRITE        2
 100:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // Lock this sector to prevent its state from transitioning (prevent flushes to disk)
 101:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_CACHE_LOCK         4
 102:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // Discard this sector in preference to other sectors when it is in the in-sync state
 103:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_CACHE_DISCARDABLE  8
 104:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // Increase the retain counter of the cache sector to prevent it from being discarded when in the i
 105:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_CACHE_RETAIN       16
 106:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 107:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // Turn the largest free block on the disk into one contiguous file for efficient fragment-free all
 108:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_USE_FREEFILE
 109:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 110:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // When allocating a freefile, leave this many clusters un-allocated for regular files to use
 111:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FREEFILE_LEAVE_CLUSTERS 100
 112:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 113:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // Filename in 8.3 format:
 114:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_FREESPACE_FILENAME "FREESPAC.E"
 115:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 116:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #define AFATFS_INTROSPEC_LOG_FILENAME "ASYNCFAT.LOG"
 117:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 118:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 119:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_SAVE_DIRECTORY_NORMAL,
 120:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_SAVE_DIRECTORY_FOR_CLOSE,
 121:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_SAVE_DIRECTORY_DELETED
 122:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsSaveDirectoryEntryMode_e;
 123:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 124:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 125:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CACHE_STATE_EMPTY,
 126:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CACHE_STATE_IN_SYNC,
 127:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CACHE_STATE_READING,
 128:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CACHE_STATE_WRITING,
 129:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CACHE_STATE_DIRTY
 130:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsCacheBlockState_e;
 131:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 132:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 133:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_TYPE_NONE,
 134:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_TYPE_NORMAL,
 135:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_TYPE_FAT16_ROOT_DIRECTORY,
 136:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_TYPE_DIRECTORY
 137:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFileType_e;
 138:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 139:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 140:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     CLUSTER_SEARCH_FREE_AT_BEGINNING_OF_FAT_SECTOR,
 141:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     CLUSTER_SEARCH_FREE,
 142:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     CLUSTER_SEARCH_OCCUPIED
 143:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsClusterSearchCondition_e;
 144:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 145:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** enum {
 146:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CREATEFILE_PHASE_INITIAL = 0,
 147:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CREATEFILE_PHASE_FIND_FILE,
 148:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CREATEFILE_PHASE_CREATE_NEW_FILE,
 149:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CREATEFILE_PHASE_SUCCESS,
 150:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_CREATEFILE_PHASE_FAILURE
 151:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** };
 152:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 153:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 154:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FIND_CLUSTER_IN_PROGRESS,
 155:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FIND_CLUSTER_FOUND,
 156:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FIND_CLUSTER_FATAL,
 157:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FIND_CLUSTER_NOT_FOUND
 158:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFindClusterStatus_e;
 159:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 160:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** struct afatfsFileOperation_t;
 161:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 162:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef union afatfsFATSector_t {
 163:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t *bytes;
 164:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint16_t *fat16;
 165:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t *fat32;
 166:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFATSector_t;
 167:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 168:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsCacheBlockDescriptor_t {
 169:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
 170:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * The physical sector index on disk that this cached block corresponds to
 171:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 172:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t sectorIndex;
 173:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 174:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // We use an increasing timestamp to identify cache access times.
 175:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 176:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // This is the timestamp that this sector was first marked dirty at (so we can flush sectors in
 177:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t writeTimestamp;
 178:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 179:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // This is the last time the sector was accessed
 180:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t accessTimestamp;
 181:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 182:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /* This is set to non-zero when we expect to write a consecutive series of this many blocks (in
 183:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * so we will tell the SD-card to pre-erase those blocks.
 184:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      *
 185:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * This counter only needs to be set on the first block of a consecutive write (though setting 
 186:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * decreased, on the subsequent blocks won't hurt).
 187:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 188:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint16_t consecutiveEraseBlockCount;
 189:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 190:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsCacheBlockState_e state;
 191:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 192:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
 193:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * The state of this block must not transition (do not flush to disk, do not discard). This is 
 194:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * which is currently being written to by the application (so flushing it would be a waste of t
 195:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      *
 196:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * This is a binary state rather than a counter because we assume that only one party will be r
 197:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * so consider locking a given sector.
 198:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 199:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     unsigned locked:1;
 200:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 201:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
 202:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * A counter for how many parties want this sector to be retained in memory (not discarded). If
 203:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * non-zero, the sector may be flushed to disk if dirty but must remain in the cache. This is u
 204:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * a directory sector to be cached in order to meet our response time requirements.
 205:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 206:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     unsigned retainCount:6;
 207:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 208:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
 209:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * If this block is in the In Sync state, it should be discarded from the cache in preference t
 210:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * This is useful for data that we don't expect to read again, e.g. data written to an append-o
 211:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * is overridden by the locked and retainCount flags.
 212:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 213:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     unsigned discardable:1;
 214:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsCacheBlockDescriptor_t;
 215:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 216:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 217:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FAT_PATTERN_UNTERMINATED_CHAIN,
 218:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FAT_PATTERN_TERMINATED_CHAIN,
 219:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FAT_PATTERN_FREE
 220:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFATPattern_e;
 221:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 222:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 223:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FREE_SPACE_SEARCH_PHASE_FIND_HOLE,
 224:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FREE_SPACE_SEARCH_PHASE_GROW_HOLE
 225:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFreeSpaceSearchPhase_e;
 226:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 227:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsFreeSpaceSearch_t {
 228:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t candidateStart;
 229:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t candidateEnd;
 230:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t bestGapStart;
 231:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t bestGapLength;
 232:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFreeSpaceSearchPhase_e phase;
 233:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFreeSpaceSearch_t;
 234:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 235:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsFreeSpaceFAT_t {
 236:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t startCluster;
 237:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t endCluster;
 238:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFreeSpaceFAT_t;
 239:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 240:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsCreateFile_t {
 241:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFileCallback_t callback;
 242:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 243:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t phase;
 244:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t filename[FAT_FILENAME_LENGTH];
 245:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsCreateFile_t;
 246:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 247:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsSeek_t {
 248:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFileCallback_t callback;
 249:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 250:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t seekOffset;
 251:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsSeek_t;
 252:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 253:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 254:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_SUPERCLUSTER_PHASE_INIT = 0,
 255:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_SUPERCLUSTER_PHASE_UPDATE_FREEFILE_DIRECTORY,
 256:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_SUPERCLUSTER_PHASE_UPDATE_FAT,
 257:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_SUPERCLUSTER_PHASE_UPDATE_FILE_DIRECTORY
 258:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsAppendSuperclusterPhase_e;
 259:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 260:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsAppendSupercluster_t {
 261:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t previousCluster;
 262:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatRewriteStartCluster;
 263:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatRewriteEndCluster;
 264:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsAppendSuperclusterPhase_e phase;
 265:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsAppendSupercluster_t;
 266:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 267:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 268:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_FREE_CLUSTER_PHASE_INITIAL = 0,
 269:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_FREE_CLUSTER_PHASE_FIND_FREESPACE = 0,
 270:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FAT1,
 271:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FAT2,
 272:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FILE_DIRECTORY,
 273:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_FREE_CLUSTER_PHASE_COMPLETE,
 274:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_APPEND_FREE_CLUSTER_PHASE_FAILURE
 275:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsAppendFreeClusterPhase_e;
 276:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 277:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsAppendFreeCluster_t {
 278:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t previousCluster;
 279:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t searchCluster;
 280:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsAppendFreeClusterPhase_e phase;
 281:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsAppendFreeCluster_t;
 282:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 283:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 284:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_EXTEND_SUBDIRECTORY_PHASE_INITIAL = 0,
 285:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_EXTEND_SUBDIRECTORY_PHASE_ADD_FREE_CLUSTER = 0,
 286:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_EXTEND_SUBDIRECTORY_PHASE_WRITE_SECTORS,
 287:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_EXTEND_SUBDIRECTORY_PHASE_SUCCESS,
 288:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_EXTEND_SUBDIRECTORY_PHASE_FAILURE
 289:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsExtendSubdirectoryPhase_e;
 290:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 291:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsExtendSubdirectory_t {
 292:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // We need to call this as a sub-operation so we have it as our first member to be compatible w
 293:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsAppendFreeCluster_t appendFreeCluster;
 294:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 295:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsExtendSubdirectoryPhase_e phase;
 296:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 297:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t parentDirectoryCluster;
 298:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFileCallback_t callback;
 299:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsExtendSubdirectory_t;
 300:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 301:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 302:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_TRUNCATE_FILE_INITIAL = 0,
 303:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_TRUNCATE_FILE_UPDATE_DIRECTORY = 0,
 304:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_TRUNCATE_FILE_ERASE_FAT_CHAIN_NORMAL,
 305:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
 306:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_TRUNCATE_FILE_ERASE_FAT_CHAIN_CONTIGUOUS,
 307:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_TRUNCATE_FILE_PREPEND_TO_FREEFILE,
 308:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 309:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_TRUNCATE_FILE_SUCCESS
 310:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsTruncateFilePhase_e;
 311:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 312:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsTruncateFile_t {
 313:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t startCluster; // First cluster to erase
 314:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t currentCluster; // Used to mark progress
 315:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t endCluster; // Optional, for contiguous files set to 1 past the end cluster of the fil
 316:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFileCallback_t callback;
 317:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsTruncateFilePhase_e phase;
 318:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsTruncateFile_t;
 319:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 320:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 321:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_DELETE_FILE_DELETE_DIRECTORY_ENTRY,
 322:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_DELETE_FILE_DEALLOCATE_CLUSTERS
 323:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsDeleteFilePhase_e;
 324:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 325:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsDeleteFile_t {
 326:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsTruncateFile_t truncateFile;
 327:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsCallback_t callback;
 328:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsUnlinkFile_t;
 329:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 330:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsCloseFile_t {
 331:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsCallback_t callback;
 332:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsCloseFile_t;
 333:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 334:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 335:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_NONE,
 336:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_CREATE_FILE,
 337:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_SEEK, // Seek the file's cursorCluster forwards by seekOffset bytes
 338:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_CLOSE,
 339:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_TRUNCATE,
 340:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_UNLINK,
 341:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
 342:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_APPEND_SUPERCLUSTER,
 343:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_LOCKED,
 344:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 345:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_APPEND_FREE_CLUSTER,
 346:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_FILE_OPERATION_EXTEND_SUBDIRECTORY
 347:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFileOperation_e;
 348:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 349:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsFileOperation_t {
 350:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFileOperation_e operation;
 351:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     union {
 352:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsCreateFile_t createFile;
 353:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsSeek_t seek;
 354:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsAppendSupercluster_t appendSupercluster;
 355:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsAppendFreeCluster_t appendFreeCluster;
 356:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsExtendSubdirectory_t extendSubdirectory;
 357:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsUnlinkFile_t unlinkFile;
 358:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsTruncateFile_t truncateFile;
 359:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsCloseFile_t closeFile;
 360:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } state;
 361:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFileOperation_t;
 362:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 363:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfsFile_t {
 364:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFileType_e type;
 365:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 366:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // The byte offset of the cursor within the file
 367:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t cursorOffset;
 368:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 369:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /* The file size in bytes as seen by users of the filesystem (the exact length of the file they
 370:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      *
 371:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * This is only used by users of the filesystem, not us, so it only needs to be up to date for 
 372:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * seeks to the EOF), fread(), feof(), and fclose() (which writes the logicalSize to the direct
 373:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      *
 374:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * It becomes out of date when we fwrite() to extend the length of the file. In this situation,
 375:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * true, so we don't have to update the logicalSize for fread() or feof() to get the correct re
 376:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * to update it when we seek backwards (so we don't forget the logical EOF position), or fclose
 377:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 378:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t logicalSize;
 379:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 380:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /* The allocated size in bytes based on how many clusters have been assigned to the file. Alway
 381:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * the cluster size.
 382:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      *
 383:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * This is an underestimate for existing files, because we don't bother to check precisely how 
 384:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * at the time the file is opened (it might be longer than needed to contain the logical size),
 385:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * filesystem metadata is correct, it should always be at least as many clusters as needed to c
 386:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      *
 387:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * Since this is an estimate, we only use it to exaggerate the filesize in the directory entry 
 388:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * currently being written (so that the final cluster of the file will be entirely readable if 
 389:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * we can could update the directory entry with a new logicalSize).
 390:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 391:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t physicalSize;
 392:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 393:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
 394:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * The cluster that the file pointer is currently within. When seeking to the end of the file, 
 395:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * set to zero.
 396:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 397:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t cursorCluster;
 398:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 399:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
 400:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * The cluster before the one the file pointer is inside. This is set to zero when at the start
 401:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 402:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t cursorPreviousCluster;
 403:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 404:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t mode; // A combination of AFATFS_FILE_MODE_* flags
 405:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t attrib; // Combination of FAT_FILE_ATTRIBUTE_* flags for the directory entry of this fi
 406:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 407:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /* We hold on to one sector entry in the cache and remember its index here. The cache is invali
 408:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * seek across a sector boundary. This allows fwrite() to complete faster because it doesn't ne
 409:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * cache on every call.
 410:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 411:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int8_t writeLockedCacheIndex;
 412:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Ditto for fread():
 413:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int8_t readRetainCacheIndex;
 414:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 415:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // The position of our directory entry on the disk (so we can update it without consulting a pa
 416:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsDirEntryPointer_t directoryEntryPos;
 417:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 418:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // The first cluster number of the file, or 0 if this file is empty
 419:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t firstCluster;
 420:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 421:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // State for a queued operation on the file
 422:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     struct afatfsFileOperation_t operation;
 423:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsFile_t;
 424:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 425:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef enum {
 426:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_READ_MBR,
 427:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_READ_VOLUME_ID,
 428:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 429:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
 430:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_FREEFILE_CREATE,
 431:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_FREEFILE_CREATING,
 432:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_FREEFILE_FAT_SEARCH,
 433:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_FREEFILE_UPDATE_FAT,
 434:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_FREEFILE_SAVE_DIR_ENTRY,
 435:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_FREEFILE_LAST = AFATFS_INITIALIZATION_FREEFILE_SAVE_DIR_ENTRY,
 436:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 437:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 438:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_INTROSPECTIVE_LOGGING
 439:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_INTROSPEC_LOG_CREATE,
 440:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_INTROSPEC_LOG_CREATING,
 441:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 442:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 443:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     AFATFS_INITIALIZATION_DONE
 444:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfsInitializationPhase_e;
 445:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 446:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** typedef struct afatfs_t {
 447:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     fatFilesystemType_e filesystemType;
 448:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 449:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFilesystemState_e filesystemState;
 450:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsInitializationPhase_e initPhase;
 451:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 452:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // State used during FS initialisation where only one member of the union is used at a time
 453:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
 454:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     union {
 455:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsFreeSpaceSearch_t freeSpaceSearch;
 456:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsFreeSpaceFAT_t freeSpaceFAT;
 457:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } initState;
 458:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 459:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 460:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t cache[AFATFS_SECTOR_SIZE * AFATFS_NUM_CACHE_SECTORS];
 461:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsCacheBlockDescriptor_t cacheDescriptor[AFATFS_NUM_CACHE_SECTORS];
 462:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t cacheTimer;
 463:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 464:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int cacheDirtyEntries; // The number of cache entries in the AFATFS_CACHE_STATE_DIRTY state
 465:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     bool cacheFlushInProgress;
 466:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 467:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFile_t openFiles[AFATFS_MAX_OPEN_FILES];
 468:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 469:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
 470:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFile_t freeFile;
 471:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 472:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 473:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_INTROSPECTIVE_LOGGING
 474:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFile_t introSpecLog;
 475:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 476:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 477:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsError_e lastError;
 478:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 479:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     bool filesystemFull;
 480:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 481:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // The current working directory:
 482:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFile_t currentDirectory;
 483:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 484:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t partitionStartSector; // The physical sector that the first partition on the device be
 485:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 486:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatStartSector; // The first sector of the first FAT
 487:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatSectors;     // The size in sectors of a single FAT
 488:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 489:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
 490:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * Number of clusters available for storing user data. Note that clusters are numbered starting
 491:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * index of the last cluster on the volume is numClusters + 1 !!!
 492:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 493:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t numClusters;
 494:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t clusterStartSector; // The physical sector that the clusters area begins at
 495:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t sectorsPerCluster;
 496:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 497:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
 498:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * Number of the cluster we last allocated (i.e. free->occupied). Searches for a free cluster w
 499:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * cluster.
 500:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
 501:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t lastClusterAllocated;
 502:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 503:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /* Mask to be ANDed with a byte offset within a file to give the offset within the cluster */
 504:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t byteInClusterMask;
 505:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 506:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t rootDirectoryCluster; // Present on FAT32 and set to zero for FAT16
 507:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t rootDirectorySectors; // Zero on FAT32, for FAT16 the number of sectors that the root 
 508:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** } afatfs_t;
 509:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 510:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfs_t afatfs;
 511:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 512:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_fileOperationContinue(afatfsFile_t *file);
 513:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint8_t* afatfs_fileLockCursorSectorForWrite(afatfsFilePtr_t file);
 514:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint8_t* afatfs_fileRetainCursorSectorForRead(afatfsFilePtr_t file);
 515:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 516:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint32_t roundUpTo(uint32_t value, uint32_t rounding)
 517:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
  33              	 .loc 1 517 0
  34              	 .cfi_startproc
  35              	 
  36              	 
  37              	 
  38 0000 80B4     	 push {r7}
  39              	.LCFI0:
  40              	 .cfi_def_cfa_offset 4
  41              	 .cfi_offset 7,-4
  42 0002 85B0     	 sub sp,sp,#20
  43              	.LCFI1:
  44              	 .cfi_def_cfa_offset 24
  45 0004 00AF     	 add r7,sp,#0
  46              	.LCFI2:
  47              	 .cfi_def_cfa_register 7
  48 0006 7860     	 str r0,[r7,#4]
  49 0008 3960     	 str r1,[r7]
 518:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t remainder = value % rounding;
  50              	 .loc 1 518 0
  51 000a 7B68     	 ldr r3,[r7,#4]
  52 000c 3A68     	 ldr r2,[r7]
  53 000e B3FBF2F2 	 udiv r2,r3,r2
  54 0012 3968     	 ldr r1,[r7]
  55 0014 01FB02F2 	 mul r2,r1,r2
  56 0018 9B1A     	 subs r3,r3,r2
  57 001a FB60     	 str r3,[r7,#12]
 519:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 520:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (remainder > 0) {
  58              	 .loc 1 520 0
  59 001c FB68     	 ldr r3,[r7,#12]
  60 001e 002B     	 cmp r3,#0
  61 0020 05D0     	 beq .L2
 521:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         value += rounding - remainder;
  62              	 .loc 1 521 0
  63 0022 3A68     	 ldr r2,[r7]
  64 0024 FB68     	 ldr r3,[r7,#12]
  65 0026 D31A     	 subs r3,r2,r3
  66 0028 7A68     	 ldr r2,[r7,#4]
  67 002a 1344     	 add r3,r3,r2
  68 002c 7B60     	 str r3,[r7,#4]
  69              	.L2:
 522:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 523:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 524:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return value;
  70              	 .loc 1 524 0
  71 002e 7B68     	 ldr r3,[r7,#4]
 525:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
  72              	 .loc 1 525 0
  73 0030 1846     	 mov r0,r3
  74 0032 1437     	 adds r7,r7,#20
  75              	.LCFI3:
  76              	 .cfi_def_cfa_offset 4
  77 0034 BD46     	 mov sp,r7
  78              	.LCFI4:
  79              	 .cfi_def_cfa_register 13
  80              	 
  81 0036 5DF8047B 	 ldr r7,[sp],#4
  82              	.LCFI5:
  83              	 .cfi_restore 7
  84              	 .cfi_def_cfa_offset 0
  85 003a 7047     	 bx lr
  86              	 .cfi_endproc
  87              	.LFE531:
  89              	 .section .text.isPowerOfTwo,"ax",%progbits
  90              	 .align 2
  91              	 .thumb
  92              	 .thumb_func
  94              	isPowerOfTwo:
  95              	.LFB532:
 526:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 527:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static bool isPowerOfTwo(unsigned int x)
 528:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
  96              	 .loc 1 528 0
  97              	 .cfi_startproc
  98              	 
  99              	 
 100              	 
 101 0000 80B4     	 push {r7}
 102              	.LCFI6:
 103              	 .cfi_def_cfa_offset 4
 104              	 .cfi_offset 7,-4
 105 0002 83B0     	 sub sp,sp,#12
 106              	.LCFI7:
 107              	 .cfi_def_cfa_offset 16
 108 0004 00AF     	 add r7,sp,#0
 109              	.LCFI8:
 110              	 .cfi_def_cfa_register 7
 111 0006 7860     	 str r0,[r7,#4]
 529:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return ((x != 0) && ((x & (~x + 1)) == x));
 112              	 .loc 1 529 0
 113 0008 7B68     	 ldr r3,[r7,#4]
 114 000a 002B     	 cmp r3,#0
 115 000c 08D0     	 beq .L5
 116              	 .loc 1 529 0 is_stmt 0 discriminator 1
 117 000e 7B68     	 ldr r3,[r7,#4]
 118 0010 5A42     	 negs r2,r3
 119 0012 7B68     	 ldr r3,[r7,#4]
 120 0014 1A40     	 ands r2,r2,r3
 121 0016 7B68     	 ldr r3,[r7,#4]
 122 0018 9A42     	 cmp r2,r3
 123 001a 01D1     	 bne .L5
 124              	 .loc 1 529 0 discriminator 3
 125 001c 0123     	 movs r3,#1
 126 001e 00E0     	 b .L6
 127              	.L5:
 128              	 .loc 1 529 0 discriminator 4
 129 0020 0023     	 movs r3,#0
 130              	.L6:
 131              	 .loc 1 529 0 discriminator 6
 132 0022 03F00103 	 and r3,r3,#1
 133 0026 DBB2     	 uxtb r3,r3
 530:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 134              	 .loc 1 530 0 is_stmt 1 discriminator 6
 135 0028 1846     	 mov r0,r3
 136 002a 0C37     	 adds r7,r7,#12
 137              	.LCFI9:
 138              	 .cfi_def_cfa_offset 4
 139 002c BD46     	 mov sp,r7
 140              	.LCFI10:
 141              	 .cfi_def_cfa_register 13
 142              	 
 143 002e 5DF8047B 	 ldr r7,[sp],#4
 144              	.LCFI11:
 145              	 .cfi_restore 7
 146              	 .cfi_def_cfa_offset 0
 147 0032 7047     	 bx lr
 148              	 .cfi_endproc
 149              	.LFE532:
 151              	 .section .text.afatfs_assert,"ax",%progbits
 152              	 .align 2
 153              	 .thumb
 154              	 .thumb_func
 156              	afatfs_assert:
 157              	.LFB533:
 531:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 532:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 533:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Check for conditions that should always be true (and if otherwise mean a bug or a corrupt filesy
 534:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
 535:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * If the condition is false, the filesystem is marked as being in a fatal state.
 536:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
 537:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns the value of the condition.
 538:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 539:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static bool afatfs_assert(bool condition)
 540:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 158              	 .loc 1 540 0
 159              	 .cfi_startproc
 160              	 
 161              	 
 162              	 
 163 0000 80B4     	 push {r7}
 164              	.LCFI12:
 165              	 .cfi_def_cfa_offset 4
 166              	 .cfi_offset 7,-4
 167 0002 83B0     	 sub sp,sp,#12
 168              	.LCFI13:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI14:
 172              	 .cfi_def_cfa_register 7
 173 0006 0346     	 mov r3,r0
 174 0008 FB71     	 strb r3,[r7,#7]
 541:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (!condition) {
 175              	 .loc 1 541 0
 176 000a FB79     	 ldrb r3,[r7,#7]
 177 000c 83F00103 	 eor r3,r3,#1
 178 0010 DBB2     	 uxtb r3,r3
 179 0012 002B     	 cmp r3,#0
 180 0014 0FD0     	 beq .L9
 542:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.lastError == AFATFS_ERROR_NONE) {
 181              	 .loc 1 542 0
 182 0016 0B4B     	 ldr r3,.L12
 183 0018 03F58C53 	 add r3,r3,#4480
 184 001c 0133     	 adds r3,r3,#1
 185 001e 1B78     	 ldrb r3,[r3]
 186 0020 002B     	 cmp r3,#0
 187 0022 05D1     	 bne .L10
 543:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.lastError = AFATFS_ERROR_GENERIC;
 188              	 .loc 1 543 0
 189 0024 074B     	 ldr r3,.L12
 190 0026 03F58C53 	 add r3,r3,#4480
 191 002a 0133     	 adds r3,r3,#1
 192 002c 0122     	 movs r2,#1
 193 002e 1A70     	 strb r2,[r3]
 194              	.L10:
 544:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
 545:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.filesystemState = AFATFS_FILESYSTEM_STATE_FATAL;
 195              	 .loc 1 545 0
 196 0030 044B     	 ldr r3,.L12
 197 0032 0122     	 movs r2,#1
 198 0034 5A70     	 strb r2,[r3,#1]
 199              	.L9:
 546:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_DEBUG
 547:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         raise(SIGTRAP);
 548:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 549:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 550:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 551:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return condition;
 200              	 .loc 1 551 0
 201 0036 FB79     	 ldrb r3,[r7,#7]
 552:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 202              	 .loc 1 552 0
 203 0038 1846     	 mov r0,r3
 204 003a 0C37     	 adds r7,r7,#12
 205              	.LCFI15:
 206              	 .cfi_def_cfa_offset 4
 207 003c BD46     	 mov sp,r7
 208              	.LCFI16:
 209              	 .cfi_def_cfa_register 13
 210              	 
 211 003e 5DF8047B 	 ldr r7,[sp],#4
 212              	.LCFI17:
 213              	 .cfi_restore 7
 214              	 .cfi_def_cfa_offset 0
 215 0042 7047     	 bx lr
 216              	.L13:
 217              	 .align 2
 218              	.L12:
 219 0044 00000000 	 .word afatfs
 220              	 .cfi_endproc
 221              	.LFE533:
 223              	 .section .text.afatfs_fileIsBusy,"ax",%progbits
 224              	 .align 2
 225              	 .thumb
 226              	 .thumb_func
 228              	afatfs_fileIsBusy:
 229              	.LFB534:
 553:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 554:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static bool afatfs_fileIsBusy(afatfsFilePtr_t file)
 555:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 230              	 .loc 1 555 0
 231              	 .cfi_startproc
 232              	 
 233              	 
 234              	 
 235 0000 80B4     	 push {r7}
 236              	.LCFI18:
 237              	 .cfi_def_cfa_offset 4
 238              	 .cfi_offset 7,-4
 239 0002 83B0     	 sub sp,sp,#12
 240              	.LCFI19:
 241              	 .cfi_def_cfa_offset 16
 242 0004 00AF     	 add r7,sp,#0
 243              	.LCFI20:
 244              	 .cfi_def_cfa_register 7
 245 0006 7860     	 str r0,[r7,#4]
 556:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return file->operation.operation != AFATFS_FILE_OPERATION_NONE;
 246              	 .loc 1 556 0
 247 0008 7B68     	 ldr r3,[r7,#4]
 248 000a 93F82330 	 ldrb r3,[r3,#35]
 249 000e 002B     	 cmp r3,#0
 250 0010 14BF     	 ite ne
 251 0012 0123     	 movne r3,#1
 252 0014 0023     	 moveq r3,#0
 253 0016 DBB2     	 uxtb r3,r3
 557:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 254              	 .loc 1 557 0
 255 0018 1846     	 mov r0,r3
 256 001a 0C37     	 adds r7,r7,#12
 257              	.LCFI21:
 258              	 .cfi_def_cfa_offset 4
 259 001c BD46     	 mov sp,r7
 260              	.LCFI22:
 261              	 .cfi_def_cfa_register 13
 262              	 
 263 001e 5DF8047B 	 ldr r7,[sp],#4
 264              	.LCFI23:
 265              	 .cfi_restore 7
 266              	 .cfi_def_cfa_offset 0
 267 0022 7047     	 bx lr
 268              	 .cfi_endproc
 269              	.LFE534:
 271              	 .section .text.afatfs_fatEntriesPerSector,"ax",%progbits
 272              	 .align 2
 273              	 .thumb
 274              	 .thumb_func
 276              	afatfs_fatEntriesPerSector:
 277              	.LFB535:
 558:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 559:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 560:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * The number of FAT table entries that fit within one AFATFS sector size.
 561:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
 562:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Note that this is the same as the number of clusters in an AFATFS supercluster.
 563:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 564:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint32_t afatfs_fatEntriesPerSector(void)
 565:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 278              	 .loc 1 565 0
 279              	 .cfi_startproc
 280              	 
 281              	 
 282              	 
 283 0000 80B4     	 push {r7}
 284              	.LCFI24:
 285              	 .cfi_def_cfa_offset 4
 286              	 .cfi_offset 7,-4
 287 0002 00AF     	 add r7,sp,#0
 288              	.LCFI25:
 289              	 .cfi_def_cfa_register 7
 566:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT32 ? AFATFS_FAT32_FAT_ENTRIES_PER_SECTOR
 290              	 .loc 1 566 0
 291 0004 064B     	 ldr r3,.L20
 292 0006 1B78     	 ldrb r3,[r3]
 293 0008 032B     	 cmp r3,#3
 294 000a 01D1     	 bne .L17
 295              	 .loc 1 566 0 is_stmt 0 discriminator 1
 296 000c 8023     	 movs r3,#128
 297 000e 01E0     	 b .L18
 298              	.L17:
 299              	 .loc 1 566 0 discriminator 2
 300 0010 4FF48073 	 mov r3,#256
 301              	.L18:
 567:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 302              	 .loc 1 567 0 is_stmt 1 discriminator 4
 303 0014 1846     	 mov r0,r3
 304 0016 BD46     	 mov sp,r7
 305              	.LCFI26:
 306              	 .cfi_def_cfa_register 13
 307              	 
 308 0018 5DF8047B 	 ldr r7,[sp],#4
 309              	.LCFI27:
 310              	 .cfi_restore 7
 311              	 .cfi_def_cfa_offset 0
 312 001c 7047     	 bx lr
 313              	.L21:
 314 001e 00BF     	 .align 2
 315              	.L20:
 316 0020 00000000 	 .word afatfs
 317              	 .cfi_endproc
 318              	.LFE535:
 320              	 .section .text.afatfs_clusterSize,"ax",%progbits
 321              	 .align 2
 322              	 .thumb
 323              	 .thumb_func
 325              	afatfs_clusterSize:
 326              	.LFB536:
 568:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 569:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 570:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Size of a FAT cluster in bytes
 571:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 572:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** ONLY_EXPOSE_FOR_TESTING
 573:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** uint32_t afatfs_clusterSize(void)
 574:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 327              	 .loc 1 574 0
 328              	 .cfi_startproc
 329              	 
 330              	 
 331              	 
 332 0000 80B4     	 push {r7}
 333              	.LCFI28:
 334              	 .cfi_def_cfa_offset 4
 335              	 .cfi_offset 7,-4
 336 0002 00AF     	 add r7,sp,#0
 337              	.LCFI29:
 338              	 .cfi_def_cfa_register 7
 575:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.sectorsPerCluster * AFATFS_SECTOR_SIZE;
 339              	 .loc 1 575 0
 340 0004 054B     	 ldr r3,.L24
 341 0006 03F58E53 	 add r3,r3,#4544
 342 000a 1033     	 adds r3,r3,#16
 343 000c 1B68     	 ldr r3,[r3]
 344 000e 5B02     	 lsls r3,r3,#9
 576:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 345              	 .loc 1 576 0
 346 0010 1846     	 mov r0,r3
 347 0012 BD46     	 mov sp,r7
 348              	.LCFI30:
 349              	 .cfi_def_cfa_register 13
 350              	 
 351 0014 5DF8047B 	 ldr r7,[sp],#4
 352              	.LCFI31:
 353              	 .cfi_restore 7
 354              	 .cfi_def_cfa_offset 0
 355 0018 7047     	 bx lr
 356              	.L25:
 357 001a 00BF     	 .align 2
 358              	.L24:
 359 001c 00000000 	 .word afatfs
 360              	 .cfi_endproc
 361              	.LFE536:
 363              	 .section .text.afatfs_byteIndexInCluster,"ax",%progbits
 364              	 .align 2
 365              	 .thumb
 366              	 .thumb_func
 368              	afatfs_byteIndexInCluster:
 369              	.LFB537:
 577:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 578:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 579:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Given a byte offset within a file, return the byte offset of that position within the cluster it
 580:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 581:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint32_t afatfs_byteIndexInCluster(uint32_t byteOffset)
 582:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 370              	 .loc 1 582 0
 371              	 .cfi_startproc
 372              	 
 373              	 
 374              	 
 375 0000 80B4     	 push {r7}
 376              	.LCFI32:
 377              	 .cfi_def_cfa_offset 4
 378              	 .cfi_offset 7,-4
 379 0002 83B0     	 sub sp,sp,#12
 380              	.LCFI33:
 381              	 .cfi_def_cfa_offset 16
 382 0004 00AF     	 add r7,sp,#0
 383              	.LCFI34:
 384              	 .cfi_def_cfa_register 7
 385 0006 7860     	 str r0,[r7,#4]
 583:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.byteInClusterMask & byteOffset;
 386              	 .loc 1 583 0
 387 0008 064B     	 ldr r3,.L28
 388 000a 03F58E53 	 add r3,r3,#4544
 389 000e 1833     	 adds r3,r3,#24
 390 0010 1A68     	 ldr r2,[r3]
 391 0012 7B68     	 ldr r3,[r7,#4]
 392 0014 1340     	 ands r3,r3,r2
 584:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 393              	 .loc 1 584 0
 394 0016 1846     	 mov r0,r3
 395 0018 0C37     	 adds r7,r7,#12
 396              	.LCFI35:
 397              	 .cfi_def_cfa_offset 4
 398 001a BD46     	 mov sp,r7
 399              	.LCFI36:
 400              	 .cfi_def_cfa_register 13
 401              	 
 402 001c 5DF8047B 	 ldr r7,[sp],#4
 403              	.LCFI37:
 404              	 .cfi_restore 7
 405              	 .cfi_def_cfa_offset 0
 406 0020 7047     	 bx lr
 407              	.L29:
 408 0022 00BF     	 .align 2
 409              	.L28:
 410 0024 00000000 	 .word afatfs
 411              	 .cfi_endproc
 412              	.LFE537:
 414              	 .section .text.afatfs_sectorIndexInCluster,"ax",%progbits
 415              	 .align 2
 416              	 .thumb
 417              	 .thumb_func
 419              	afatfs_sectorIndexInCluster:
 420              	.LFB538:
 585:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 586:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 587:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Given a byte offset within a file, return the index of the sector within the cluster it belongs 
 588:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 589:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint32_t afatfs_sectorIndexInCluster(uint32_t byteOffset)
 590:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 421              	 .loc 1 590 0
 422              	 .cfi_startproc
 423              	 
 424              	 
 425 0000 80B5     	 push {r7,lr}
 426              	.LCFI38:
 427              	 .cfi_def_cfa_offset 8
 428              	 .cfi_offset 7,-8
 429              	 .cfi_offset 14,-4
 430 0002 82B0     	 sub sp,sp,#8
 431              	.LCFI39:
 432              	 .cfi_def_cfa_offset 16
 433 0004 00AF     	 add r7,sp,#0
 434              	.LCFI40:
 435              	 .cfi_def_cfa_register 7
 436 0006 7860     	 str r0,[r7,#4]
 591:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs_byteIndexInCluster(byteOffset) / AFATFS_SECTOR_SIZE;
 437              	 .loc 1 591 0
 438 0008 7868     	 ldr r0,[r7,#4]
 439 000a FFF7FEFF 	 bl afatfs_byteIndexInCluster
 440 000e 0346     	 mov r3,r0
 441 0010 5B0A     	 lsrs r3,r3,#9
 592:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 442              	 .loc 1 592 0
 443 0012 1846     	 mov r0,r3
 444 0014 0837     	 adds r7,r7,#8
 445              	.LCFI41:
 446              	 .cfi_def_cfa_offset 8
 447 0016 BD46     	 mov sp,r7
 448              	.LCFI42:
 449              	 .cfi_def_cfa_register 13
 450              	 
 451 0018 80BD     	 pop {r7,pc}
 452              	 .cfi_endproc
 453              	.LFE538:
 455 001a 00BF     	 .section .text.afatfs_cacheSectorGetMemory,"ax",%progbits
 456              	 .align 2
 457              	 .thumb
 458              	 .thumb_func
 460              	afatfs_cacheSectorGetMemory:
 461              	.LFB539:
 593:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 594:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** // Get the buffer memory for the cache entry of the given index.
 595:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint8_t *afatfs_cacheSectorGetMemory(int cacheEntryIndex)
 596:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 462              	 .loc 1 596 0
 463              	 .cfi_startproc
 464              	 
 465              	 
 466              	 
 467 0000 80B4     	 push {r7}
 468              	.LCFI43:
 469              	 .cfi_def_cfa_offset 4
 470              	 .cfi_offset 7,-4
 471 0002 83B0     	 sub sp,sp,#12
 472              	.LCFI44:
 473              	 .cfi_def_cfa_offset 16
 474 0004 00AF     	 add r7,sp,#0
 475              	.LCFI45:
 476              	 .cfi_def_cfa_register 7
 477 0006 7860     	 str r0,[r7,#4]
 597:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.cache + cacheEntryIndex * AFATFS_SECTOR_SIZE;
 478              	 .loc 1 597 0
 479 0008 7B68     	 ldr r3,[r7,#4]
 480 000a 5B02     	 lsls r3,r3,#9
 481 000c 1033     	 adds r3,r3,#16
 482 000e 044A     	 ldr r2,.L34
 483 0010 1344     	 add r3,r3,r2
 484 0012 0433     	 adds r3,r3,#4
 598:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 485              	 .loc 1 598 0
 486 0014 1846     	 mov r0,r3
 487 0016 0C37     	 adds r7,r7,#12
 488              	.LCFI46:
 489              	 .cfi_def_cfa_offset 4
 490 0018 BD46     	 mov sp,r7
 491              	.LCFI47:
 492              	 .cfi_def_cfa_register 13
 493              	 
 494 001a 5DF8047B 	 ldr r7,[sp],#4
 495              	.LCFI48:
 496              	 .cfi_restore 7
 497              	 .cfi_def_cfa_offset 0
 498 001e 7047     	 bx lr
 499              	.L35:
 500              	 .align 2
 501              	.L34:
 502 0020 00000000 	 .word afatfs
 503              	 .cfi_endproc
 504              	.LFE539:
 506              	 .section .text.afatfs_getCacheDescriptorIndexForBuffer,"ax",%progbits
 507              	 .align 2
 508              	 .thumb
 509              	 .thumb_func
 511              	afatfs_getCacheDescriptorIndexForBuffer:
 512              	.LFB540:
 599:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 600:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static int afatfs_getCacheDescriptorIndexForBuffer(uint8_t *memory)
 601:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 513              	 .loc 1 601 0
 514              	 .cfi_startproc
 515              	 
 516              	 
 517 0000 80B5     	 push {r7,lr}
 518              	.LCFI49:
 519              	 .cfi_def_cfa_offset 8
 520              	 .cfi_offset 7,-8
 521              	 .cfi_offset 14,-4
 522 0002 84B0     	 sub sp,sp,#16
 523              	.LCFI50:
 524              	 .cfi_def_cfa_offset 24
 525 0004 00AF     	 add r7,sp,#0
 526              	.LCFI51:
 527              	 .cfi_def_cfa_register 7
 528 0006 7860     	 str r0,[r7,#4]
 602:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int index = (memory - afatfs.cache) / AFATFS_SECTOR_SIZE;
 529              	 .loc 1 602 0
 530 0008 7B68     	 ldr r3,[r7,#4]
 531 000a 114A     	 ldr r2,.L42
 532 000c 9B1A     	 subs r3,r3,r2
 533 000e 002B     	 cmp r3,#0
 534 0010 01DA     	 bge .L37
 535 0012 03F2FF13 	 addw r3,r3,#511
 536              	.L37:
 537 0016 5B12     	 asrs r3,r3,#9
 538 0018 FB60     	 str r3,[r7,#12]
 603:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 604:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs_assert(index >= 0 && index < AFATFS_NUM_CACHE_SECTORS)) {
 539              	 .loc 1 604 0
 540 001a FB68     	 ldr r3,[r7,#12]
 541 001c 002B     	 cmp r3,#0
 542 001e 04DB     	 blt .L38
 543              	 .loc 1 604 0 is_stmt 0 discriminator 1
 544 0020 FB68     	 ldr r3,[r7,#12]
 545 0022 072B     	 cmp r3,#7
 546 0024 01DC     	 bgt .L38
 547              	 .loc 1 604 0 discriminator 3
 548 0026 0123     	 movs r3,#1
 549 0028 00E0     	 b .L39
 550              	.L38:
 551              	 .loc 1 604 0 discriminator 4
 552 002a 0023     	 movs r3,#0
 553              	.L39:
 554              	 .loc 1 604 0 discriminator 6
 555 002c 03F00103 	 and r3,r3,#1
 556 0030 DBB2     	 uxtb r3,r3
 557 0032 1846     	 mov r0,r3
 558 0034 FFF7FEFF 	 bl afatfs_assert
 559 0038 0346     	 mov r3,r0
 560 003a 002B     	 cmp r3,#0
 561 003c 01D0     	 beq .L40
 605:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return index;
 562              	 .loc 1 605 0 is_stmt 1
 563 003e FB68     	 ldr r3,[r7,#12]
 564 0040 01E0     	 b .L41
 565              	.L40:
 606:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
 607:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return -1;
 566              	 .loc 1 607 0
 567 0042 4FF0FF33 	 mov r3,#-1
 568              	.L41:
 608:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 609:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 569              	 .loc 1 609 0
 570 0046 1846     	 mov r0,r3
 571 0048 1037     	 adds r7,r7,#16
 572              	.LCFI52:
 573              	 .cfi_def_cfa_offset 8
 574 004a BD46     	 mov sp,r7
 575              	.LCFI53:
 576              	 .cfi_def_cfa_register 13
 577              	 
 578 004c 80BD     	 pop {r7,pc}
 579              	.L43:
 580 004e 00BF     	 .align 2
 581              	.L42:
 582 0050 14000000 	 .word afatfs+20
 583              	 .cfi_endproc
 584              	.LFE540:
 586              	 .section .text.afatfs_getCacheDescriptorForBuffer,"ax",%progbits
 587              	 .align 2
 588              	 .thumb
 589              	 .thumb_func
 591              	afatfs_getCacheDescriptorForBuffer:
 592              	.LFB541:
 610:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 611:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsCacheBlockDescriptor_t* afatfs_getCacheDescriptorForBuffer(uint8_t *memory)
 612:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 593              	 .loc 1 612 0
 594              	 .cfi_startproc
 595              	 
 596              	 
 597 0000 80B5     	 push {r7,lr}
 598              	.LCFI54:
 599              	 .cfi_def_cfa_offset 8
 600              	 .cfi_offset 7,-8
 601              	 .cfi_offset 14,-4
 602 0002 82B0     	 sub sp,sp,#8
 603              	.LCFI55:
 604              	 .cfi_def_cfa_offset 16
 605 0004 00AF     	 add r7,sp,#0
 606              	.LCFI56:
 607              	 .cfi_def_cfa_register 7
 608 0006 7860     	 str r0,[r7,#4]
 613:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.cacheDescriptor + afatfs_getCacheDescriptorIndexForBuffer(memory);
 609              	 .loc 1 613 0
 610 0008 7868     	 ldr r0,[r7,#4]
 611 000a FFF7FEFF 	 bl afatfs_getCacheDescriptorIndexForBuffer
 612 000e 0346     	 mov r3,r0
 613 0010 03F20113 	 addw r3,r3,#257
 614 0014 1B01     	 lsls r3,r3,#4
 615 0016 034A     	 ldr r2,.L46
 616 0018 1344     	 add r3,r3,r2
 617 001a 0433     	 adds r3,r3,#4
 614:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 618              	 .loc 1 614 0
 619 001c 1846     	 mov r0,r3
 620 001e 0837     	 adds r7,r7,#8
 621              	.LCFI57:
 622              	 .cfi_def_cfa_offset 8
 623 0020 BD46     	 mov sp,r7
 624              	.LCFI58:
 625              	 .cfi_def_cfa_register 13
 626              	 
 627 0022 80BD     	 pop {r7,pc}
 628              	.L47:
 629              	 .align 2
 630              	.L46:
 631 0024 00000000 	 .word afatfs
 632              	 .cfi_endproc
 633              	.LFE541:
 635              	 .section .text.afatfs_cacheSectorMarkDirty,"ax",%progbits
 636              	 .align 2
 637              	 .thumb
 638              	 .thumb_func
 640              	afatfs_cacheSectorMarkDirty:
 641              	.LFB542:
 615:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 616:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_cacheSectorMarkDirty(afatfsCacheBlockDescriptor_t *descriptor)
 617:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 642              	 .loc 1 617 0
 643              	 .cfi_startproc
 644              	 
 645              	 
 646              	 
 647 0000 80B4     	 push {r7}
 648              	.LCFI59:
 649              	 .cfi_def_cfa_offset 4
 650              	 .cfi_offset 7,-4
 651 0002 83B0     	 sub sp,sp,#12
 652              	.LCFI60:
 653              	 .cfi_def_cfa_offset 16
 654 0004 00AF     	 add r7,sp,#0
 655              	.LCFI61:
 656              	 .cfi_def_cfa_register 7
 657 0006 7860     	 str r0,[r7,#4]
 618:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (descriptor->state != AFATFS_CACHE_STATE_DIRTY) {
 658              	 .loc 1 618 0
 659 0008 7B68     	 ldr r3,[r7,#4]
 660 000a 9B7B     	 ldrb r3,[r3,#14]
 661 000c 042B     	 cmp r3,#4
 662 000e 1FD0     	 beq .L48
 619:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         descriptor->writeTimestamp = ++afatfs.cacheTimer;
 663              	 .loc 1 619 0
 664 0010 124B     	 ldr r3,.L50
 665 0012 03F58453 	 add r3,r3,#4224
 666 0016 1433     	 adds r3,r3,#20
 667 0018 1B68     	 ldr r3,[r3]
 668 001a 5A1C     	 adds r2,r3,#1
 669 001c 0F4B     	 ldr r3,.L50
 670 001e 03F58453 	 add r3,r3,#4224
 671 0022 1433     	 adds r3,r3,#20
 672 0024 1A60     	 str r2,[r3]
 673 0026 0D4B     	 ldr r3,.L50
 674 0028 03F58453 	 add r3,r3,#4224
 675 002c 1433     	 adds r3,r3,#20
 676 002e 1A68     	 ldr r2,[r3]
 677 0030 7B68     	 ldr r3,[r7,#4]
 678 0032 5A60     	 str r2,[r3,#4]
 620:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         descriptor->state = AFATFS_CACHE_STATE_DIRTY;
 679              	 .loc 1 620 0
 680 0034 7B68     	 ldr r3,[r7,#4]
 681 0036 0422     	 movs r2,#4
 682 0038 9A73     	 strb r2,[r3,#14]
 621:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.cacheDirtyEntries++;
 683              	 .loc 1 621 0
 684 003a 084B     	 ldr r3,.L50
 685 003c 03F58453 	 add r3,r3,#4224
 686 0040 1833     	 adds r3,r3,#24
 687 0042 1B68     	 ldr r3,[r3]
 688 0044 5A1C     	 adds r2,r3,#1
 689 0046 054B     	 ldr r3,.L50
 690 0048 03F58453 	 add r3,r3,#4224
 691 004c 1833     	 adds r3,r3,#24
 692 004e 1A60     	 str r2,[r3]
 693              	.L48:
 622:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 623:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 694              	 .loc 1 623 0
 695 0050 0C37     	 adds r7,r7,#12
 696              	.LCFI62:
 697              	 .cfi_def_cfa_offset 4
 698 0052 BD46     	 mov sp,r7
 699              	.LCFI63:
 700              	 .cfi_def_cfa_register 13
 701              	 
 702 0054 5DF8047B 	 ldr r7,[sp],#4
 703              	.LCFI64:
 704              	 .cfi_restore 7
 705              	 .cfi_def_cfa_offset 0
 706 0058 7047     	 bx lr
 707              	.L51:
 708 005a 00BF     	 .align 2
 709              	.L50:
 710 005c 00000000 	 .word afatfs
 711              	 .cfi_endproc
 712              	.LFE542:
 714              	 .section .text.afatfs_cacheSectorInit,"ax",%progbits
 715              	 .align 2
 716              	 .thumb
 717              	 .thumb_func
 719              	afatfs_cacheSectorInit:
 720              	.LFB543:
 624:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 625:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_cacheSectorInit(afatfsCacheBlockDescriptor_t *descriptor, uint32_t sectorIndex, 
 626:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 721              	 .loc 1 626 0
 722              	 .cfi_startproc
 723              	 
 724              	 
 725              	 
 726 0000 80B4     	 push {r7}
 727              	.LCFI65:
 728              	 .cfi_def_cfa_offset 4
 729              	 .cfi_offset 7,-4
 730 0002 85B0     	 sub sp,sp,#20
 731              	.LCFI66:
 732              	 .cfi_def_cfa_offset 24
 733 0004 00AF     	 add r7,sp,#0
 734              	.LCFI67:
 735              	 .cfi_def_cfa_register 7
 736 0006 F860     	 str r0,[r7,#12]
 737 0008 B960     	 str r1,[r7,#8]
 738 000a 1346     	 mov r3,r2
 739 000c FB71     	 strb r3,[r7,#7]
 627:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     descriptor->sectorIndex = sectorIndex;
 740              	 .loc 1 627 0
 741 000e FB68     	 ldr r3,[r7,#12]
 742 0010 BA68     	 ldr r2,[r7,#8]
 743 0012 1A60     	 str r2,[r3]
 628:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 629:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     descriptor->accessTimestamp = descriptor->writeTimestamp = ++afatfs.cacheTimer;
 744              	 .loc 1 629 0
 745 0014 194B     	 ldr r3,.L53
 746 0016 03F58453 	 add r3,r3,#4224
 747 001a 1433     	 adds r3,r3,#20
 748 001c 1B68     	 ldr r3,[r3]
 749 001e 5A1C     	 adds r2,r3,#1
 750 0020 164B     	 ldr r3,.L53
 751 0022 03F58453 	 add r3,r3,#4224
 752 0026 1433     	 adds r3,r3,#20
 753 0028 1A60     	 str r2,[r3]
 754 002a 144B     	 ldr r3,.L53
 755 002c 03F58453 	 add r3,r3,#4224
 756 0030 1433     	 adds r3,r3,#20
 757 0032 1A68     	 ldr r2,[r3]
 758 0034 FB68     	 ldr r3,[r7,#12]
 759 0036 5A60     	 str r2,[r3,#4]
 760 0038 FB68     	 ldr r3,[r7,#12]
 761 003a 5A68     	 ldr r2,[r3,#4]
 762 003c FB68     	 ldr r3,[r7,#12]
 763 003e 9A60     	 str r2,[r3,#8]
 630:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 631:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     descriptor->consecutiveEraseBlockCount = 0;
 764              	 .loc 1 631 0
 765 0040 FB68     	 ldr r3,[r7,#12]
 766 0042 0022     	 movs r2,#0
 767 0044 1A73     	 strb r2,[r3,#12]
 768 0046 0022     	 movs r2,#0
 769 0048 5A73     	 strb r2,[r3,#13]
 632:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 633:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     descriptor->state = AFATFS_CACHE_STATE_EMPTY;
 770              	 .loc 1 633 0
 771 004a FB68     	 ldr r3,[r7,#12]
 772 004c 0022     	 movs r2,#0
 773 004e 9A73     	 strb r2,[r3,#14]
 634:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 635:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     descriptor->locked = locked;
 774              	 .loc 1 635 0
 775 0050 FA68     	 ldr r2,[r7,#12]
 776 0052 D37B     	 ldrb r3,[r2,#15]
 777 0054 F979     	 ldrb r1,[r7,#7]
 778 0056 61F30003 	 bfi r3,r1,#0,#1
 779 005a D373     	 strb r3,[r2,#15]
 636:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     descriptor->retainCount = 0;
 780              	 .loc 1 636 0
 781 005c FA68     	 ldr r2,[r7,#12]
 782 005e D37B     	 ldrb r3,[r2,#15]
 783 0060 6FF34603 	 bfc r3,#1,#6
 784 0064 D373     	 strb r3,[r2,#15]
 637:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     descriptor->discardable = 0;
 785              	 .loc 1 637 0
 786 0066 FA68     	 ldr r2,[r7,#12]
 787 0068 D37B     	 ldrb r3,[r2,#15]
 788 006a 6FF3C713 	 bfc r3,#7,#1
 789 006e D373     	 strb r3,[r2,#15]
 638:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 790              	 .loc 1 638 0
 791 0070 1437     	 adds r7,r7,#20
 792              	.LCFI68:
 793              	 .cfi_def_cfa_offset 4
 794 0072 BD46     	 mov sp,r7
 795              	.LCFI69:
 796              	 .cfi_def_cfa_register 13
 797              	 
 798 0074 5DF8047B 	 ldr r7,[sp],#4
 799              	.LCFI70:
 800              	 .cfi_restore 7
 801              	 .cfi_def_cfa_offset 0
 802 0078 7047     	 bx lr
 803              	.L54:
 804 007a 00BF     	 .align 2
 805              	.L53:
 806 007c 00000000 	 .word afatfs
 807              	 .cfi_endproc
 808              	.LFE543:
 810              	 .section .text.afatfs_sdcardReadComplete,"ax",%progbits
 811              	 .align 2
 812              	 .thumb
 813              	 .thumb_func
 815              	afatfs_sdcardReadComplete:
 816              	.LFB544:
 639:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 640:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 641:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Called by the SD card driver when one of our read operations completes.
 642:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 643:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_sdcardReadComplete(sdcardBlockOperation_e operation, uint32_t sectorIndex, uint8
 644:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 817              	 .loc 1 644 0
 818              	 .cfi_startproc
 819              	 
 820              	 
 821 0000 80B5     	 push {r7,lr}
 822              	.LCFI71:
 823              	 .cfi_def_cfa_offset 8
 824              	 .cfi_offset 7,-8
 825              	 .cfi_offset 14,-4
 826 0002 86B0     	 sub sp,sp,#24
 827              	.LCFI72:
 828              	 .cfi_def_cfa_offset 32
 829 0004 00AF     	 add r7,sp,#0
 830              	.LCFI73:
 831              	 .cfi_def_cfa_register 7
 832 0006 B960     	 str r1,[r7,#8]
 833 0008 7A60     	 str r2,[r7,#4]
 834 000a 3B60     	 str r3,[r7]
 835 000c 0346     	 mov r3,r0
 836 000e FB73     	 strb r3,[r7,#15]
 837              	.LBB2:
 645:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     (void) operation;
 646:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     (void) callbackData;
 647:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 648:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 838              	 .loc 1 648 0
 839 0010 0023     	 movs r3,#0
 840 0012 7B61     	 str r3,[r7,#20]
 841 0014 47E0     	 b .L56
 842              	.L63:
 649:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.cacheDescriptor[i].state != AFATFS_CACHE_STATE_EMPTY
 843              	 .loc 1 649 0
 844 0016 274A     	 ldr r2,.L64
 845 0018 7B69     	 ldr r3,[r7,#20]
 846 001a 1B01     	 lsls r3,r3,#4
 847 001c 1344     	 add r3,r3,r2
 848 001e 03F58053 	 add r3,r3,#4096
 849 0022 1833     	 adds r3,r3,#24
 850 0024 9B7A     	 ldrb r3,[r3,#10]
 851 0026 002B     	 cmp r3,#0
 852 0028 3AD0     	 beq .L57
 650:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             && afatfs.cacheDescriptor[i].sectorIndex == sectorIndex
 853              	 .loc 1 650 0
 854 002a 224A     	 ldr r2,.L64
 855 002c 7B69     	 ldr r3,[r7,#20]
 856 002e 03F20113 	 addw r3,r3,#257
 857 0032 1B01     	 lsls r3,r3,#4
 858 0034 1344     	 add r3,r3,r2
 859 0036 5A68     	 ldr r2,[r3,#4]
 860 0038 BB68     	 ldr r3,[r7,#8]
 861 003a 9A42     	 cmp r2,r3
 862 003c 30D1     	 bne .L57
 651:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         ) {
 652:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (buffer == NULL) {
 863              	 .loc 1 652 0
 864 003e 7B68     	 ldr r3,[r7,#4]
 865 0040 002B     	 cmp r3,#0
 866 0042 09D1     	 bne .L58
 653:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Read failed, mark the sector as empty and whoever asked for it will ask for it a
 654:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.cacheDescriptor[i].state = AFATFS_CACHE_STATE_EMPTY;
 867              	 .loc 1 654 0
 868 0044 1B4A     	 ldr r2,.L64
 869 0046 7B69     	 ldr r3,[r7,#20]
 870 0048 1B01     	 lsls r3,r3,#4
 871 004a 1344     	 add r3,r3,r2
 872 004c 03F58053 	 add r3,r3,#4096
 873 0050 1833     	 adds r3,r3,#24
 874 0052 0022     	 movs r2,#0
 875 0054 9A72     	 strb r2,[r3,#10]
 655:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else {
 656:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs_assert(afatfs_cacheSectorGetMemory(i) == buffer && afatfs.cacheDescriptor[i]
 657:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 658:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.cacheDescriptor[i].state = AFATFS_CACHE_STATE_IN_SYNC;
 659:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 660:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 661:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 876              	 .loc 1 661 0
 877 0056 29E0     	 b .L55
 878              	.L58:
 656:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 879              	 .loc 1 656 0
 880 0058 7869     	 ldr r0,[r7,#20]
 881 005a FFF7FEFF 	 bl afatfs_cacheSectorGetMemory
 882 005e 0246     	 mov r2,r0
 883 0060 7B68     	 ldr r3,[r7,#4]
 884 0062 9A42     	 cmp r2,r3
 885 0064 0BD1     	 bne .L60
 656:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 886              	 .loc 1 656 0 is_stmt 0 discriminator 1
 887 0066 134A     	 ldr r2,.L64
 888 0068 7B69     	 ldr r3,[r7,#20]
 889 006a 1B01     	 lsls r3,r3,#4
 890 006c 1344     	 add r3,r3,r2
 891 006e 03F58053 	 add r3,r3,#4096
 892 0072 1833     	 adds r3,r3,#24
 893 0074 9B7A     	 ldrb r3,[r3,#10]
 894 0076 022B     	 cmp r3,#2
 895 0078 01D1     	 bne .L60
 656:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 896              	 .loc 1 656 0 discriminator 3
 897 007a 0123     	 movs r3,#1
 898 007c 00E0     	 b .L61
 899              	.L60:
 656:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 900              	 .loc 1 656 0 discriminator 4
 901 007e 0023     	 movs r3,#0
 902              	.L61:
 656:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 903              	 .loc 1 656 0 discriminator 6
 904 0080 03F00103 	 and r3,r3,#1
 905 0084 DBB2     	 uxtb r3,r3
 906 0086 1846     	 mov r0,r3
 907 0088 FFF7FEFF 	 bl afatfs_assert
 658:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 908              	 .loc 1 658 0 is_stmt 1 discriminator 6
 909 008c 094A     	 ldr r2,.L64
 910 008e 7B69     	 ldr r3,[r7,#20]
 911 0090 1B01     	 lsls r3,r3,#4
 912 0092 1344     	 add r3,r3,r2
 913 0094 03F58053 	 add r3,r3,#4096
 914 0098 1833     	 adds r3,r3,#24
 915 009a 0122     	 movs r2,#1
 916 009c 9A72     	 strb r2,[r3,#10]
 917              	 .loc 1 661 0 discriminator 6
 918 009e 05E0     	 b .L55
 919              	.L57:
 648:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.cacheDescriptor[i].state != AFATFS_CACHE_STATE_EMPTY
 920              	 .loc 1 648 0 discriminator 2
 921 00a0 7B69     	 ldr r3,[r7,#20]
 922 00a2 0133     	 adds r3,r3,#1
 923 00a4 7B61     	 str r3,[r7,#20]
 924              	.L56:
 648:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.cacheDescriptor[i].state != AFATFS_CACHE_STATE_EMPTY
 925              	 .loc 1 648 0 is_stmt 0 discriminator 1
 926 00a6 7B69     	 ldr r3,[r7,#20]
 927 00a8 072B     	 cmp r3,#7
 928 00aa B4DD     	 ble .L63
 929              	.L55:
 930              	.LBE2:
 662:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
 663:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 664:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 931              	 .loc 1 664 0 is_stmt 1
 932 00ac 1837     	 adds r7,r7,#24
 933              	.LCFI74:
 934              	 .cfi_def_cfa_offset 8
 935 00ae BD46     	 mov sp,r7
 936              	.LCFI75:
 937              	 .cfi_def_cfa_register 13
 938              	 
 939 00b0 80BD     	 pop {r7,pc}
 940              	.L65:
 941 00b2 00BF     	 .align 2
 942              	.L64:
 943 00b4 00000000 	 .word afatfs
 944              	 .cfi_endproc
 945              	.LFE544:
 947              	 .section .text.afatfs_sdcardWriteComplete,"ax",%progbits
 948              	 .align 2
 949              	 .thumb
 950              	 .thumb_func
 952              	afatfs_sdcardWriteComplete:
 953              	.LFB545:
 665:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 666:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 667:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Called by the SD card driver when one of our write operations completes.
 668:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 669:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_sdcardWriteComplete(sdcardBlockOperation_e operation, uint32_t sectorIndex, uint
 670:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 954              	 .loc 1 670 0
 955              	 .cfi_startproc
 956              	 
 957              	 
 958 0000 80B5     	 push {r7,lr}
 959              	.LCFI76:
 960              	 .cfi_def_cfa_offset 8
 961              	 .cfi_offset 7,-8
 962              	 .cfi_offset 14,-4
 963 0002 86B0     	 sub sp,sp,#24
 964              	.LCFI77:
 965              	 .cfi_def_cfa_offset 32
 966 0004 00AF     	 add r7,sp,#0
 967              	.LCFI78:
 968              	 .cfi_def_cfa_register 7
 969 0006 B960     	 str r1,[r7,#8]
 970 0008 7A60     	 str r2,[r7,#4]
 971 000a 3B60     	 str r3,[r7]
 972 000c 0346     	 mov r3,r0
 973 000e FB73     	 strb r3,[r7,#15]
 671:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     (void) operation;
 672:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     (void) callbackData;
 673:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 674:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.cacheFlushInProgress = false;
 974              	 .loc 1 674 0
 975 0010 2A4B     	 ldr r3,.L73
 976 0012 03F58453 	 add r3,r3,#4224
 977 0016 1C33     	 adds r3,r3,#28
 978 0018 0022     	 movs r2,#0
 979 001a 1A70     	 strb r2,[r3]
 980              	.LBB3:
 675:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 676:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 981              	 .loc 1 676 0
 982 001c 0023     	 movs r3,#0
 983 001e 7B61     	 str r3,[r7,#20]
 984 0020 45E0     	 b .L67
 985              	.L72:
 677:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         /* Keep in mind that someone may have marked the sector as dirty after writing had already 
 678:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * it marked as dirty because those modifications may have been made too late to make it to
 679:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          */
 680:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.cacheDescriptor[i].sectorIndex == sectorIndex
 986              	 .loc 1 680 0
 987 0022 264A     	 ldr r2,.L73
 988 0024 7B69     	 ldr r3,[r7,#20]
 989 0026 03F20113 	 addw r3,r3,#257
 990 002a 1B01     	 lsls r3,r3,#4
 991 002c 1344     	 add r3,r3,r2
 992 002e 5A68     	 ldr r2,[r3,#4]
 993 0030 BB68     	 ldr r3,[r7,#8]
 994 0032 9A42     	 cmp r2,r3
 995 0034 38D1     	 bne .L68
 681:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             && afatfs.cacheDescriptor[i].state == AFATFS_CACHE_STATE_WRITING
 996              	 .loc 1 681 0
 997 0036 214A     	 ldr r2,.L73
 998 0038 7B69     	 ldr r3,[r7,#20]
 999 003a 1B01     	 lsls r3,r3,#4
 1000 003c 1344     	 add r3,r3,r2
 1001 003e 03F58053 	 add r3,r3,#4096
 1002 0042 1833     	 adds r3,r3,#24
 1003 0044 9B7A     	 ldrb r3,[r3,#10]
 1004 0046 032B     	 cmp r3,#3
 1005 0048 2ED1     	 bne .L68
 682:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         ) {
 683:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (buffer == NULL) {
 1006              	 .loc 1 683 0
 1007 004a 7B68     	 ldr r3,[r7,#4]
 1008 004c 002B     	 cmp r3,#0
 1009 004e 14D1     	 bne .L69
 684:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Write failed, remark the sector as dirty
 685:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.cacheDescriptor[i].state = AFATFS_CACHE_STATE_DIRTY;
 1010              	 .loc 1 685 0
 1011 0050 1A4A     	 ldr r2,.L73
 1012 0052 7B69     	 ldr r3,[r7,#20]
 1013 0054 1B01     	 lsls r3,r3,#4
 1014 0056 1344     	 add r3,r3,r2
 1015 0058 03F58053 	 add r3,r3,#4096
 1016 005c 1833     	 adds r3,r3,#24
 1017 005e 0422     	 movs r2,#4
 1018 0060 9A72     	 strb r2,[r3,#10]
 686:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.cacheDirtyEntries++;
 1019              	 .loc 1 686 0
 1020 0062 164B     	 ldr r3,.L73
 1021 0064 03F58453 	 add r3,r3,#4224
 1022 0068 1833     	 adds r3,r3,#24
 1023 006a 1B68     	 ldr r3,[r3]
 1024 006c 5A1C     	 adds r2,r3,#1
 1025 006e 134B     	 ldr r3,.L73
 1026 0070 03F58453 	 add r3,r3,#4224
 1027 0074 1833     	 adds r3,r3,#24
 1028 0076 1A60     	 str r2,[r3]
 687:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else {
 688:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs_assert(afatfs_cacheSectorGetMemory(i) == buffer);
 689:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 690:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.cacheDescriptor[i].state = AFATFS_CACHE_STATE_IN_SYNC;
 691:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 692:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 1029              	 .loc 1 692 0
 1030 0078 1CE0     	 b .L66
 1031              	.L69:
 688:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 1032              	 .loc 1 688 0
 1033 007a 7869     	 ldr r0,[r7,#20]
 1034 007c FFF7FEFF 	 bl afatfs_cacheSectorGetMemory
 1035 0080 0246     	 mov r2,r0
 1036 0082 7B68     	 ldr r3,[r7,#4]
 1037 0084 9A42     	 cmp r2,r3
 1038 0086 0CBF     	 ite eq
 1039 0088 0123     	 moveq r3,#1
 1040 008a 0023     	 movne r3,#0
 1041 008c DBB2     	 uxtb r3,r3
 1042 008e 1846     	 mov r0,r3
 1043 0090 FFF7FEFF 	 bl afatfs_assert
 690:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 1044              	 .loc 1 690 0
 1045 0094 094A     	 ldr r2,.L73
 1046 0096 7B69     	 ldr r3,[r7,#20]
 1047 0098 1B01     	 lsls r3,r3,#4
 1048 009a 1344     	 add r3,r3,r2
 1049 009c 03F58053 	 add r3,r3,#4096
 1050 00a0 1833     	 adds r3,r3,#24
 1051 00a2 0122     	 movs r2,#1
 1052 00a4 9A72     	 strb r2,[r3,#10]
 1053              	 .loc 1 692 0
 1054 00a6 05E0     	 b .L66
 1055              	.L68:
 676:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         /* Keep in mind that someone may have marked the sector as dirty after writing had already 
 1056              	 .loc 1 676 0 discriminator 2
 1057 00a8 7B69     	 ldr r3,[r7,#20]
 1058 00aa 0133     	 adds r3,r3,#1
 1059 00ac 7B61     	 str r3,[r7,#20]
 1060              	.L67:
 676:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         /* Keep in mind that someone may have marked the sector as dirty after writing had already 
 1061              	 .loc 1 676 0 is_stmt 0 discriminator 1
 1062 00ae 7B69     	 ldr r3,[r7,#20]
 1063 00b0 072B     	 cmp r3,#7
 1064 00b2 B6DD     	 ble .L72
 1065              	.L66:
 1066              	.LBE3:
 693:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
 694:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 695:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 1067              	 .loc 1 695 0 is_stmt 1
 1068 00b4 1837     	 adds r7,r7,#24
 1069              	.LCFI79:
 1070              	 .cfi_def_cfa_offset 8
 1071 00b6 BD46     	 mov sp,r7
 1072              	.LCFI80:
 1073              	 .cfi_def_cfa_register 13
 1074              	 
 1075 00b8 80BD     	 pop {r7,pc}
 1076              	.L74:
 1077 00ba 00BF     	 .align 2
 1078              	.L73:
 1079 00bc 00000000 	 .word afatfs
 1080              	 .cfi_endproc
 1081              	.LFE545:
 1083              	 .section .text.afatfs_cacheFlushSector,"ax",%progbits
 1084              	 .align 2
 1085              	 .thumb
 1086              	 .thumb_func
 1088              	afatfs_cacheFlushSector:
 1089              	.LFB546:
 696:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 697:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 698:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Attempt to flush the dirty cache entry with the given index to the SDcard.
 699:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 700:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_cacheFlushSector(int cacheIndex)
 701:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 1090              	 .loc 1 701 0
 1091              	 .cfi_startproc
 1092              	 
 1093              	 
 1094 0000 90B5     	 push {r4,r7,lr}
 1095              	.LCFI81:
 1096              	 .cfi_def_cfa_offset 12
 1097              	 .cfi_offset 4,-12
 1098              	 .cfi_offset 7,-8
 1099              	 .cfi_offset 14,-4
 1100 0002 85B0     	 sub sp,sp,#20
 1101              	.LCFI82:
 1102              	 .cfi_def_cfa_offset 32
 1103 0004 00AF     	 add r7,sp,#0
 1104              	.LCFI83:
 1105              	 .cfi_def_cfa_register 7
 1106 0006 7860     	 str r0,[r7,#4]
 702:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsCacheBlockDescriptor_t *cacheDescriptor = &afatfs.cacheDescriptor[cacheIndex];
 1107              	 .loc 1 702 0
 1108 0008 7B68     	 ldr r3,[r7,#4]
 1109 000a 03F20113 	 addw r3,r3,#257
 1110 000e 1B01     	 lsls r3,r3,#4
 1111 0010 254A     	 ldr r2,.L80
 1112 0012 1344     	 add r3,r3,r2
 1113 0014 0433     	 adds r3,r3,#4
 1114 0016 FB60     	 str r3,[r7,#12]
 703:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 704:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_MIN_MULTIPLE_BLOCK_WRITE_COUNT
 705:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (cacheDescriptor->consecutiveEraseBlockCount) {
 1115              	 .loc 1 705 0
 1116 0018 FB68     	 ldr r3,[r7,#12]
 1117 001a 9B89     	 ldrh r3,[r3,#12]
 1118 001c 9BB2     	 uxth r3,r3
 1119 001e 002B     	 cmp r3,#0
 1120 0020 08D0     	 beq .L76
 706:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         sdcard_beginWriteBlocks(cacheDescriptor->sectorIndex, cacheDescriptor->consecutiveEraseBloc
 1121              	 .loc 1 706 0
 1122 0022 FB68     	 ldr r3,[r7,#12]
 1123 0024 1A68     	 ldr r2,[r3]
 1124 0026 FB68     	 ldr r3,[r7,#12]
 1125 0028 9B89     	 ldrh r3,[r3,#12]
 1126 002a 9BB2     	 uxth r3,r3
 1127 002c 1046     	 mov r0,r2
 1128 002e 1946     	 mov r1,r3
 1129 0030 FFF7FEFF 	 bl sdcard_beginWriteBlocks
 1130              	.L76:
 707:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 708:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 709:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 710:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (sdcard_writeBlock(cacheDescriptor->sectorIndex, afatfs_cacheSectorGetMemory(cacheIndex)
 1131              	 .loc 1 710 0
 1132 0034 FB68     	 ldr r3,[r7,#12]
 1133 0036 1C68     	 ldr r4,[r3]
 1134 0038 7868     	 ldr r0,[r7,#4]
 1135 003a FFF7FEFF 	 bl afatfs_cacheSectorGetMemory
 1136 003e 0346     	 mov r3,r0
 1137 0040 2046     	 mov r0,r4
 1138 0042 1946     	 mov r1,r3
 1139 0044 194A     	 ldr r2,.L80+4
 1140 0046 0023     	 movs r3,#0
 1141 0048 FFF7FEFF 	 bl sdcard_writeBlock
 1142 004c 0346     	 mov r3,r0
 1143 004e 002B     	 cmp r3,#0
 1144 0050 02D0     	 beq .L78
 1145 0052 022B     	 cmp r3,#2
 1146 0054 15D0     	 beq .L79
 1147 0056 23E0     	 b .L75
 1148              	.L78:
 711:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case SDCARD_OPERATION_IN_PROGRESS:
 712:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // The card will call us back later when the buffer transmission finishes
 713:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.cacheDirtyEntries--;
 1149              	 .loc 1 713 0
 1150 0058 134B     	 ldr r3,.L80
 1151 005a 03F58453 	 add r3,r3,#4224
 1152 005e 1833     	 adds r3,r3,#24
 1153 0060 1B68     	 ldr r3,[r3]
 1154 0062 5A1E     	 subs r2,r3,#1
 1155 0064 104B     	 ldr r3,.L80
 1156 0066 03F58453 	 add r3,r3,#4224
 1157 006a 1833     	 adds r3,r3,#24
 1158 006c 1A60     	 str r2,[r3]
 714:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             cacheDescriptor->state = AFATFS_CACHE_STATE_WRITING;
 1159              	 .loc 1 714 0
 1160 006e FB68     	 ldr r3,[r7,#12]
 1161 0070 0322     	 movs r2,#3
 1162 0072 9A73     	 strb r2,[r3,#14]
 715:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.cacheFlushInProgress = true;
 1163              	 .loc 1 715 0
 1164 0074 0C4B     	 ldr r3,.L80
 1165 0076 03F58453 	 add r3,r3,#4224
 1166 007a 1C33     	 adds r3,r3,#28
 1167 007c 0122     	 movs r2,#1
 1168 007e 1A70     	 strb r2,[r3]
 716:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 1169              	 .loc 1 716 0
 1170 0080 0EE0     	 b .L75
 1171              	.L79:
 717:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 718:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case SDCARD_OPERATION_SUCCESS:
 719:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Buffer is already transmitted
 720:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.cacheDirtyEntries--;
 1172              	 .loc 1 720 0
 1173 0082 094B     	 ldr r3,.L80
 1174 0084 03F58453 	 add r3,r3,#4224
 1175 0088 1833     	 adds r3,r3,#24
 1176 008a 1B68     	 ldr r3,[r3]
 1177 008c 5A1E     	 subs r2,r3,#1
 1178 008e 064B     	 ldr r3,.L80
 1179 0090 03F58453 	 add r3,r3,#4224
 1180 0094 1833     	 adds r3,r3,#24
 1181 0096 1A60     	 str r2,[r3]
 721:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             cacheDescriptor->state = AFATFS_CACHE_STATE_IN_SYNC;
 1182              	 .loc 1 721 0
 1183 0098 FB68     	 ldr r3,[r7,#12]
 1184 009a 0122     	 movs r2,#1
 1185 009c 9A73     	 strb r2,[r3,#14]
 722:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 1186              	 .loc 1 722 0
 1187 009e 00BF     	 nop
 1188              	.L75:
 723:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 724:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case SDCARD_OPERATION_BUSY:
 725:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case SDCARD_OPERATION_FAILURE:
 726:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         default:
 727:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             ;
 728:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 729:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 1189              	 .loc 1 729 0
 1190 00a0 1437     	 adds r7,r7,#20
 1191              	.LCFI84:
 1192              	 .cfi_def_cfa_offset 12
 1193 00a2 BD46     	 mov sp,r7
 1194              	.LCFI85:
 1195              	 .cfi_def_cfa_register 13
 1196              	 
 1197 00a4 90BD     	 pop {r4,r7,pc}
 1198              	.L81:
 1199 00a6 00BF     	 .align 2
 1200              	.L80:
 1201 00a8 00000000 	 .word afatfs
 1202 00ac 00000000 	 .word afatfs_sdcardWriteComplete
 1203              	 .cfi_endproc
 1204              	.LFE546:
 1206              	 .section .text.afatfs_findCacheSector,"ax",%progbits
 1207              	 .align 2
 1208              	 .thumb
 1209              	 .thumb_func
 1211              	afatfs_findCacheSector:
 1212              	.LFB547:
 730:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 731:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 732:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Find a sector in the cache which corresponds to the given physical sector index, or NULL if the 
 733:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * cached. Note that the cached sector could be in any state including completely empty.
 734:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 735:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsCacheBlockDescriptor_t* afatfs_findCacheSector(uint32_t sectorIndex)
 736:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 1213              	 .loc 1 736 0
 1214              	 .cfi_startproc
 1215              	 
 1216              	 
 1217              	 
 1218 0000 80B4     	 push {r7}
 1219              	.LCFI86:
 1220              	 .cfi_def_cfa_offset 4
 1221              	 .cfi_offset 7,-4
 1222 0002 85B0     	 sub sp,sp,#20
 1223              	.LCFI87:
 1224              	 .cfi_def_cfa_offset 24
 1225 0004 00AF     	 add r7,sp,#0
 1226              	.LCFI88:
 1227              	 .cfi_def_cfa_register 7
 1228 0006 7860     	 str r0,[r7,#4]
 1229              	.LBB4:
 737:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 1230              	 .loc 1 737 0
 1231 0008 0023     	 movs r3,#0
 1232 000a FB60     	 str r3,[r7,#12]
 1233 000c 14E0     	 b .L83
 1234              	.L86:
 738:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.cacheDescriptor[i].sectorIndex == sectorIndex) {
 1235              	 .loc 1 738 0
 1236 000e 0F4A     	 ldr r2,.L87
 1237 0010 FB68     	 ldr r3,[r7,#12]
 1238 0012 03F20113 	 addw r3,r3,#257
 1239 0016 1B01     	 lsls r3,r3,#4
 1240 0018 1344     	 add r3,r3,r2
 1241 001a 5A68     	 ldr r2,[r3,#4]
 1242 001c 7B68     	 ldr r3,[r7,#4]
 1243 001e 9A42     	 cmp r2,r3
 1244 0020 07D1     	 bne .L84
 739:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return &afatfs.cacheDescriptor[i];
 1245              	 .loc 1 739 0
 1246 0022 FB68     	 ldr r3,[r7,#12]
 1247 0024 03F20113 	 addw r3,r3,#257
 1248 0028 1B01     	 lsls r3,r3,#4
 1249 002a 084A     	 ldr r2,.L87
 1250 002c 1344     	 add r3,r3,r2
 1251 002e 0433     	 adds r3,r3,#4
 1252 0030 06E0     	 b .L85
 1253              	.L84:
 737:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 1254              	 .loc 1 737 0 discriminator 2
 1255 0032 FB68     	 ldr r3,[r7,#12]
 1256 0034 0133     	 adds r3,r3,#1
 1257 0036 FB60     	 str r3,[r7,#12]
 1258              	.L83:
 737:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 1259              	 .loc 1 737 0 is_stmt 0 discriminator 1
 1260 0038 FB68     	 ldr r3,[r7,#12]
 1261 003a 072B     	 cmp r3,#7
 1262 003c E7DD     	 ble .L86
 1263              	.LBE4:
 740:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
 741:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 742:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 743:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return NULL;
 1264              	 .loc 1 743 0 is_stmt 1
 1265 003e 0023     	 movs r3,#0
 1266              	.L85:
 744:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 1267              	 .loc 1 744 0
 1268 0040 1846     	 mov r0,r3
 1269 0042 1437     	 adds r7,r7,#20
 1270              	.LCFI89:
 1271              	 .cfi_def_cfa_offset 4
 1272 0044 BD46     	 mov sp,r7
 1273              	.LCFI90:
 1274              	 .cfi_def_cfa_register 13
 1275              	 
 1276 0046 5DF8047B 	 ldr r7,[sp],#4
 1277              	.LCFI91:
 1278              	 .cfi_restore 7
 1279              	 .cfi_def_cfa_offset 0
 1280 004a 7047     	 bx lr
 1281              	.L88:
 1282              	 .align 2
 1283              	.L87:
 1284 004c 00000000 	 .word afatfs
 1285              	 .cfi_endproc
 1286              	.LFE547:
 1288              	 .section .text.afatfs_allocateCacheSector,"ax",%progbits
 1289              	 .align 2
 1290              	 .thumb
 1291              	 .thumb_func
 1293              	afatfs_allocateCacheSector:
 1294              	.LFB548:
 745:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 746:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 747:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Find or allocate a cache sector for the given sector index on disk. Returns a block which matche
 748:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * conditions (in descending order of preference):
 749:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
 750:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * - The requested sector that already exists in the cache
 751:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * - The index of an empty sector
 752:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * - The index of a synced discardable sector
 753:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * - The index of the oldest synced sector
 754:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
 755:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Otherwise it returns -1 to signal failure (cache is full!)
 756:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 757:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static int afatfs_allocateCacheSector(uint32_t sectorIndex)
 758:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 1295              	 .loc 1 758 0
 1296              	 .cfi_startproc
 1297              	 
 1298              	 
 1299 0000 80B5     	 push {r7,lr}
 1300              	.LCFI92:
 1301              	 .cfi_def_cfa_offset 8
 1302              	 .cfi_offset 7,-8
 1303              	 .cfi_offset 14,-4
 1304 0002 88B0     	 sub sp,sp,#32
 1305              	.LCFI93:
 1306              	 .cfi_def_cfa_offset 40
 1307 0004 00AF     	 add r7,sp,#0
 1308              	.LCFI94:
 1309              	 .cfi_def_cfa_register 7
 1310 0006 7860     	 str r0,[r7,#4]
 759:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int allocateIndex;
 760:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int emptyIndex = -1, discardableIndex = -1;
 1311              	 .loc 1 760 0
 1312 0008 4FF0FF33 	 mov r3,#-1
 1313 000c BB61     	 str r3,[r7,#24]
 1314 000e 4FF0FF33 	 mov r3,#-1
 1315 0012 7B61     	 str r3,[r7,#20]
 761:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 762:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t oldestSyncedSectorLastUse = 0xFFFFFFFF;
 1316              	 .loc 1 762 0
 1317 0014 4FF0FF33 	 mov r3,#-1
 1318 0018 3B61     	 str r3,[r7,#16]
 763:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int oldestSyncedSectorIndex = -1;
 1319              	 .loc 1 763 0
 1320 001a 4FF0FF33 	 mov r3,#-1
 1321 001e FB60     	 str r3,[r7,#12]
 764:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 765:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (
 766:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         !afatfs_assert(
 767:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.numClusters == 0 // We're unable to check sector bounds during startup since we 
 1322              	 .loc 1 767 0
 1323 0020 714B     	 ldr r3,.L111
 1324 0022 03F58E53 	 add r3,r3,#4544
 1325 0026 0833     	 adds r3,r3,#8
 1326 0028 1B68     	 ldr r3,[r3]
 768:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             || sectorIndex < afatfs.clusterStartSector + afatfs.numClusters * afatfs.sectorsPerClus
 1327              	 .loc 1 768 0
 1328 002a 002B     	 cmp r3,#0
 1329 002c 14D0     	 beq .L90
 1330              	 .loc 1 768 0 is_stmt 0 discriminator 2
 1331 002e 6E4B     	 ldr r3,.L111
 1332 0030 03F58E53 	 add r3,r3,#4544
 1333 0034 0C33     	 adds r3,r3,#12
 1334 0036 1A68     	 ldr r2,[r3]
 1335 0038 6B4B     	 ldr r3,.L111
 1336 003a 03F58E53 	 add r3,r3,#4544
 1337 003e 0833     	 adds r3,r3,#8
 1338 0040 1968     	 ldr r1,[r3]
 1339 0042 694B     	 ldr r3,.L111
 1340 0044 03F58E53 	 add r3,r3,#4544
 1341 0048 1033     	 adds r3,r3,#16
 1342 004a 1B68     	 ldr r3,[r3]
 1343 004c 03FB01F3 	 mul r3,r3,r1
 1344 0050 1A44     	 add r2,r2,r3
 1345 0052 7B68     	 ldr r3,[r7,#4]
 1346 0054 9A42     	 cmp r2,r3
 1347 0056 01D9     	 bls .L91
 1348              	.L90:
 1349              	 .loc 1 768 0 discriminator 3
 1350 0058 0123     	 movs r3,#1
 1351 005a 00E0     	 b .L92
 1352              	.L91:
 1353              	 .loc 1 768 0 discriminator 4
 1354 005c 0023     	 movs r3,#0
 1355              	.L92:
 766:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.numClusters == 0 // We're unable to check sector bounds during startup since we 
 1356              	 .loc 1 766 0 is_stmt 1
 1357 005e 03F00103 	 and r3,r3,#1
 1358 0062 DBB2     	 uxtb r3,r3
 1359 0064 1846     	 mov r0,r3
 1360 0066 FFF7FEFF 	 bl afatfs_assert
 1361 006a 0346     	 mov r3,r0
 1362 006c 83F00103 	 eor r3,r3,#1
 1363 0070 DBB2     	 uxtb r3,r3
 765:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         !afatfs_assert(
 1364              	 .loc 1 765 0
 1365 0072 002B     	 cmp r3,#0
 1366 0074 02D0     	 beq .L93
 769:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         )
 770:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     ) {
 771:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return -1;
 1367              	 .loc 1 771 0
 1368 0076 4FF0FF33 	 mov r3,#-1
 1369 007a B1E0     	 b .L94
 1370              	.L93:
 1371              	.LBB5:
 772:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 773:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 774:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 1372              	 .loc 1 774 0
 1373 007c 0023     	 movs r3,#0
 1374 007e BB60     	 str r3,[r7,#8]
 1375 0080 85E0     	 b .L95
 1376              	.L104:
 775:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.cacheDescriptor[i].sectorIndex == sectorIndex) {
 1377              	 .loc 1 775 0
 1378 0082 594A     	 ldr r2,.L111
 1379 0084 BB68     	 ldr r3,[r7,#8]
 1380 0086 03F20113 	 addw r3,r3,#257
 1381 008a 1B01     	 lsls r3,r3,#4
 1382 008c 1344     	 add r3,r3,r2
 1383 008e 5A68     	 ldr r2,[r3,#4]
 1384 0090 7B68     	 ldr r3,[r7,#4]
 1385 0092 9A42     	 cmp r2,r3
 1386 0094 26D1     	 bne .L96
 776:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             /*
 777:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              * If the sector is actually empty then do a complete re-init of it just like the stand
 778:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              * empty case. (Sectors marked as empty should be treated as if they don't have a block
 779:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              */
 780:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs.cacheDescriptor[i].state == AFATFS_CACHE_STATE_EMPTY) {
 1387              	 .loc 1 780 0
 1388 0096 544A     	 ldr r2,.L111
 1389 0098 BB68     	 ldr r3,[r7,#8]
 1390 009a 1B01     	 lsls r3,r3,#4
 1391 009c 1344     	 add r3,r3,r2
 1392 009e 03F58053 	 add r3,r3,#4096
 1393 00a2 1833     	 adds r3,r3,#24
 1394 00a4 9B7A     	 ldrb r3,[r3,#10]
 1395 00a6 002B     	 cmp r3,#0
 1396 00a8 02D1     	 bne .L97
 781:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 emptyIndex = i;
 1397              	 .loc 1 781 0
 1398 00aa BB68     	 ldr r3,[r7,#8]
 1399 00ac BB61     	 str r3,[r7,#24]
 782:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 break;
 1400              	 .loc 1 782 0
 1401 00ae 72E0     	 b .L98
 1402              	.L97:
 783:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 784:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 785:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Bump the last access time
 786:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.cacheDescriptor[i].accessTimestamp = ++afatfs.cacheTimer;
 1403              	 .loc 1 786 0
 1404 00b0 4D4B     	 ldr r3,.L111
 1405 00b2 03F58453 	 add r3,r3,#4224
 1406 00b6 1433     	 adds r3,r3,#20
 1407 00b8 1B68     	 ldr r3,[r3]
 1408 00ba 5A1C     	 adds r2,r3,#1
 1409 00bc 4A4B     	 ldr r3,.L111
 1410 00be 03F58453 	 add r3,r3,#4224
 1411 00c2 1433     	 adds r3,r3,#20
 1412 00c4 1A60     	 str r2,[r3]
 1413 00c6 484B     	 ldr r3,.L111
 1414 00c8 03F58453 	 add r3,r3,#4224
 1415 00cc 1433     	 adds r3,r3,#20
 1416 00ce 1A68     	 ldr r2,[r3]
 1417 00d0 4549     	 ldr r1,.L111
 1418 00d2 BB68     	 ldr r3,[r7,#8]
 1419 00d4 1B01     	 lsls r3,r3,#4
 1420 00d6 0B44     	 add r3,r3,r1
 1421 00d8 03F58053 	 add r3,r3,#4096
 1422 00dc 1833     	 adds r3,r3,#24
 1423 00de 5A60     	 str r2,[r3,#4]
 787:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return i;
 1424              	 .loc 1 787 0
 1425 00e0 BB68     	 ldr r3,[r7,#8]
 1426 00e2 7DE0     	 b .L94
 1427              	.L96:
 788:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
 789:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 790:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         switch (afatfs.cacheDescriptor[i].state) {
 1428              	 .loc 1 790 0
 1429 00e4 404A     	 ldr r2,.L111
 1430 00e6 BB68     	 ldr r3,[r7,#8]
 1431 00e8 1B01     	 lsls r3,r3,#4
 1432 00ea 1344     	 add r3,r3,r2
 1433 00ec 03F58053 	 add r3,r3,#4096
 1434 00f0 1833     	 adds r3,r3,#24
 1435 00f2 9B7A     	 ldrb r3,[r3,#10]
 1436 00f4 002B     	 cmp r3,#0
 1437 00f6 02D0     	 beq .L100
 1438 00f8 012B     	 cmp r3,#1
 1439 00fa 03D0     	 beq .L101
 1440 00fc 44E0     	 b .L99
 1441              	.L100:
 791:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_CACHE_STATE_EMPTY:
 792:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 emptyIndex = i;
 1442              	 .loc 1 792 0
 1443 00fe BB68     	 ldr r3,[r7,#8]
 1444 0100 BB61     	 str r3,[r7,#24]
 793:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 1445              	 .loc 1 793 0
 1446 0102 41E0     	 b .L99
 1447              	.L101:
 794:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_CACHE_STATE_IN_SYNC:
 795:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Is this a synced sector that we could evict from the cache?
 796:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (!afatfs.cacheDescriptor[i].locked && afatfs.cacheDescriptor[i].retainCount == 0
 1448              	 .loc 1 796 0
 1449 0104 384A     	 ldr r2,.L111
 1450 0106 BB68     	 ldr r3,[r7,#8]
 1451 0108 1B01     	 lsls r3,r3,#4
 1452 010a 1344     	 add r3,r3,r2
 1453 010c 03F58053 	 add r3,r3,#4096
 1454 0110 1833     	 adds r3,r3,#24
 1455 0112 DB7A     	 ldrb r3,[r3,#11]
 1456 0114 C3F30003 	 ubfx r3,r3,#0,#1
 1457 0118 DBB2     	 uxtb r3,r3
 1458 011a 002B     	 cmp r3,#0
 1459 011c 33D1     	 bne .L102
 1460              	 .loc 1 796 0 is_stmt 0 discriminator 1
 1461 011e 324A     	 ldr r2,.L111
 1462 0120 BB68     	 ldr r3,[r7,#8]
 1463 0122 1B01     	 lsls r3,r3,#4
 1464 0124 1344     	 add r3,r3,r2
 1465 0126 03F58053 	 add r3,r3,#4096
 1466 012a 1833     	 adds r3,r3,#24
 1467 012c DB7A     	 ldrb r3,[r3,#11]
 1468 012e C3F34503 	 ubfx r3,r3,#1,#6
 1469 0132 DBB2     	 uxtb r3,r3
 1470 0134 002B     	 cmp r3,#0
 1471 0136 26D1     	 bne .L102
 797:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     if (afatfs.cacheDescriptor[i].discardable) {
 1472              	 .loc 1 797 0 is_stmt 1
 1473 0138 2B4A     	 ldr r2,.L111
 1474 013a BB68     	 ldr r3,[r7,#8]
 1475 013c 1B01     	 lsls r3,r3,#4
 1476 013e 1344     	 add r3,r3,r2
 1477 0140 03F58053 	 add r3,r3,#4096
 1478 0144 1833     	 adds r3,r3,#24
 1479 0146 DB7A     	 ldrb r3,[r3,#11]
 1480 0148 C3F3C013 	 ubfx r3,r3,#7,#1
 1481 014c DBB2     	 uxtb r3,r3
 1482 014e 002B     	 cmp r3,#0
 1483 0150 02D0     	 beq .L103
 798:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         discardableIndex = i;
 1484              	 .loc 1 798 0
 1485 0152 BB68     	 ldr r3,[r7,#8]
 1486 0154 7B61     	 str r3,[r7,#20]
 1487 0156 16E0     	 b .L102
 1488              	.L103:
 799:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     } else if (afatfs.cacheDescriptor[i].accessTimestamp < oldestSyncedSectorLastUs
 1489              	 .loc 1 799 0
 1490 0158 234A     	 ldr r2,.L111
 1491 015a BB68     	 ldr r3,[r7,#8]
 1492 015c 1B01     	 lsls r3,r3,#4
 1493 015e 1344     	 add r3,r3,r2
 1494 0160 03F58053 	 add r3,r3,#4096
 1495 0164 1833     	 adds r3,r3,#24
 1496 0166 5A68     	 ldr r2,[r3,#4]
 1497 0168 3B69     	 ldr r3,[r7,#16]
 1498 016a 9A42     	 cmp r2,r3
 1499 016c 0BD2     	 bcs .L102
 800:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // This is older than last block we decided to evict, so evict this one in 
 801:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         oldestSyncedSectorLastUse = afatfs.cacheDescriptor[i].accessTimestamp;
 1500              	 .loc 1 801 0
 1501 016e 1E4A     	 ldr r2,.L111
 1502 0170 BB68     	 ldr r3,[r7,#8]
 1503 0172 1B01     	 lsls r3,r3,#4
 1504 0174 1344     	 add r3,r3,r2
 1505 0176 03F58053 	 add r3,r3,#4096
 1506 017a 1833     	 adds r3,r3,#24
 1507 017c 5B68     	 ldr r3,[r3,#4]
 1508 017e 3B61     	 str r3,[r7,#16]
 802:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         oldestSyncedSectorIndex = i;
 1509              	 .loc 1 802 0
 1510 0180 BB68     	 ldr r3,[r7,#8]
 1511 0182 FB60     	 str r3,[r7,#12]
 803:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     }
 804:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
 805:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 1512              	 .loc 1 805 0
 1513 0184 FFE7     	 b .L110
 1514              	.L102:
 1515              	.L110:
 1516 0186 00BF     	 nop
 1517              	.L99:
 774:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.cacheDescriptor[i].sectorIndex == sectorIndex) {
 1518              	 .loc 1 774 0 discriminator 2
 1519 0188 BB68     	 ldr r3,[r7,#8]
 1520 018a 0133     	 adds r3,r3,#1
 1521 018c BB60     	 str r3,[r7,#8]
 1522              	.L95:
 774:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.cacheDescriptor[i].sectorIndex == sectorIndex) {
 1523              	 .loc 1 774 0 is_stmt 0 discriminator 1
 1524 018e BB68     	 ldr r3,[r7,#8]
 1525 0190 072B     	 cmp r3,#7
 1526 0192 7FF776AF 	 ble .L104
 1527              	.L98:
 1528              	.LBE5:
 806:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             default:
 807:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 ;
 808:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
 809:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 810:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 811:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (emptyIndex > -1) {
 1529              	 .loc 1 811 0 is_stmt 1
 1530 0196 BB69     	 ldr r3,[r7,#24]
 1531 0198 002B     	 cmp r3,#0
 1532 019a 02DB     	 blt .L105
 812:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         allocateIndex = emptyIndex;
 1533              	 .loc 1 812 0
 1534 019c BB69     	 ldr r3,[r7,#24]
 1535 019e FB61     	 str r3,[r7,#28]
 1536 01a0 0EE0     	 b .L106
 1537              	.L105:
 813:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else if (discardableIndex > -1) {
 1538              	 .loc 1 813 0
 1539 01a2 7B69     	 ldr r3,[r7,#20]
 1540 01a4 002B     	 cmp r3,#0
 1541 01a6 02DB     	 blt .L107
 814:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         allocateIndex = discardableIndex;
 1542              	 .loc 1 814 0
 1543 01a8 7B69     	 ldr r3,[r7,#20]
 1544 01aa FB61     	 str r3,[r7,#28]
 1545 01ac 08E0     	 b .L106
 1546              	.L107:
 815:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else if (oldestSyncedSectorIndex > -1) {
 1547              	 .loc 1 815 0
 1548 01ae FB68     	 ldr r3,[r7,#12]
 1549 01b0 002B     	 cmp r3,#0
 1550 01b2 02DB     	 blt .L108
 816:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         allocateIndex = oldestSyncedSectorIndex;
 1551              	 .loc 1 816 0
 1552 01b4 FB68     	 ldr r3,[r7,#12]
 1553 01b6 FB61     	 str r3,[r7,#28]
 1554 01b8 02E0     	 b .L106
 1555              	.L108:
 817:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
 818:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         allocateIndex = -1;
 1556              	 .loc 1 818 0
 1557 01ba 4FF0FF33 	 mov r3,#-1
 1558 01be FB61     	 str r3,[r7,#28]
 1559              	.L106:
 819:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 820:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 821:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (allocateIndex > -1) {
 1560              	 .loc 1 821 0
 1561 01c0 FB69     	 ldr r3,[r7,#28]
 1562 01c2 002B     	 cmp r3,#0
 1563 01c4 0BDB     	 blt .L109
 822:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_cacheSectorInit(&afatfs.cacheDescriptor[allocateIndex], sectorIndex, false);
 1564              	 .loc 1 822 0
 1565 01c6 FB69     	 ldr r3,[r7,#28]
 1566 01c8 03F20113 	 addw r3,r3,#257
 1567 01cc 1B01     	 lsls r3,r3,#4
 1568 01ce 064A     	 ldr r2,.L111
 1569 01d0 1344     	 add r3,r3,r2
 1570 01d2 0433     	 adds r3,r3,#4
 1571 01d4 1846     	 mov r0,r3
 1572 01d6 7968     	 ldr r1,[r7,#4]
 1573 01d8 0022     	 movs r2,#0
 1574 01da FFF7FEFF 	 bl afatfs_cacheSectorInit
 1575              	.L109:
 823:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 824:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 825:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return allocateIndex;
 1576              	 .loc 1 825 0
 1577 01de FB69     	 ldr r3,[r7,#28]
 1578              	.L94:
 826:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 1579              	 .loc 1 826 0
 1580 01e0 1846     	 mov r0,r3
 1581 01e2 2037     	 adds r7,r7,#32
 1582              	.LCFI95:
 1583              	 .cfi_def_cfa_offset 8
 1584 01e4 BD46     	 mov sp,r7
 1585              	.LCFI96:
 1586              	 .cfi_def_cfa_register 13
 1587              	 
 1588 01e6 80BD     	 pop {r7,pc}
 1589              	.L112:
 1590              	 .align 2
 1591              	.L111:
 1592 01e8 00000000 	 .word afatfs
 1593              	 .cfi_endproc
 1594              	.LFE548:
 1596              	 .section .text.afatfs_flush,"ax",%progbits
 1597              	 .align 2
 1598              	 .global afatfs_flush
 1599              	 .thumb
 1600              	 .thumb_func
 1602              	afatfs_flush:
 1603              	.LFB549:
 827:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 828:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 829:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Attempt to flush dirty cache pages out to the sdcard, returning true if all flushable data has b
 830:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 831:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_flush(void)
 832:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 1604              	 .loc 1 832 0
 1605              	 .cfi_startproc
 1606              	 
 1607              	 
 1608 0000 80B5     	 push {r7,lr}
 1609              	.LCFI97:
 1610              	 .cfi_def_cfa_offset 8
 1611              	 .cfi_offset 7,-8
 1612              	 .cfi_offset 14,-4
 1613 0002 84B0     	 sub sp,sp,#16
 1614              	.LCFI98:
 1615              	 .cfi_def_cfa_offset 24
 1616 0004 00AF     	 add r7,sp,#0
 1617              	.LCFI99:
 1618              	 .cfi_def_cfa_register 7
 833:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.cacheDirtyEntries > 0) {
 1619              	 .loc 1 833 0
 1620 0006 294B     	 ldr r3,.L120
 1621 0008 03F58453 	 add r3,r3,#4224
 1622 000c 1833     	 adds r3,r3,#24
 1623 000e 1B68     	 ldr r3,[r3]
 1624 0010 002B     	 cmp r3,#0
 1625 0012 45DD     	 ble .L114
 1626              	.LBB6:
 834:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Flush the oldest flushable sector
 835:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t earliestSectorTime = 0xFFFFFFFF;
 1627              	 .loc 1 835 0
 1628 0014 4FF0FF33 	 mov r3,#-1
 1629 0018 FB60     	 str r3,[r7,#12]
 836:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         int earliestSectorIndex = -1;
 1630              	 .loc 1 836 0
 1631 001a 4FF0FF33 	 mov r3,#-1
 1632 001e BB60     	 str r3,[r7,#8]
 1633              	.LBB7:
 837:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 838:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 1634              	 .loc 1 838 0
 1635 0020 0023     	 movs r3,#0
 1636 0022 7B60     	 str r3,[r7,#4]
 1637 0024 31E0     	 b .L115
 1638              	.L118:
 839:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs.cacheDescriptor[i].state == AFATFS_CACHE_STATE_DIRTY && !afatfs.cacheDescrip
 1639              	 .loc 1 839 0
 1640 0026 214A     	 ldr r2,.L120
 1641 0028 7B68     	 ldr r3,[r7,#4]
 1642 002a 1B01     	 lsls r3,r3,#4
 1643 002c 1344     	 add r3,r3,r2
 1644 002e 03F58053 	 add r3,r3,#4096
 1645 0032 1833     	 adds r3,r3,#24
 1646 0034 9B7A     	 ldrb r3,[r3,#10]
 1647 0036 042B     	 cmp r3,#4
 1648 0038 24D1     	 bne .L116
 1649              	 .loc 1 839 0 is_stmt 0 discriminator 1
 1650 003a 1C4A     	 ldr r2,.L120
 1651 003c 7B68     	 ldr r3,[r7,#4]
 1652 003e 1B01     	 lsls r3,r3,#4
 1653 0040 1344     	 add r3,r3,r2
 1654 0042 03F58053 	 add r3,r3,#4096
 1655 0046 1833     	 adds r3,r3,#24
 1656 0048 DB7A     	 ldrb r3,[r3,#11]
 1657 004a C3F30003 	 ubfx r3,r3,#0,#1
 1658 004e DBB2     	 uxtb r3,r3
 1659 0050 002B     	 cmp r3,#0
 1660 0052 17D1     	 bne .L116
 840:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 && (earliestSectorIndex == -1 || afatfs.cacheDescriptor[i].writeTimestamp < earlies
 1661              	 .loc 1 840 0 is_stmt 1
 1662 0054 BB68     	 ldr r3,[r7,#8]
 1663 0056 B3F1FF3F 	 cmp r3,#-1
 1664 005a 09D0     	 beq .L117
 1665              	 .loc 1 840 0 is_stmt 0 discriminator 1
 1666 005c 134A     	 ldr r2,.L120
 1667 005e 7B68     	 ldr r3,[r7,#4]
 1668 0060 03F20113 	 addw r3,r3,#257
 1669 0064 1B01     	 lsls r3,r3,#4
 1670 0066 1344     	 add r3,r3,r2
 1671 0068 9A68     	 ldr r2,[r3,#8]
 1672 006a FB68     	 ldr r3,[r7,#12]
 1673 006c 9A42     	 cmp r2,r3
 1674 006e 09D2     	 bcs .L116
 1675              	.L117:
 841:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             ) {
 842:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 earliestSectorIndex = i;
 1676              	 .loc 1 842 0 is_stmt 1
 1677 0070 7B68     	 ldr r3,[r7,#4]
 1678 0072 BB60     	 str r3,[r7,#8]
 843:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 earliestSectorTime = afatfs.cacheDescriptor[i].writeTimestamp;
 1679              	 .loc 1 843 0
 1680 0074 0D4A     	 ldr r2,.L120
 1681 0076 7B68     	 ldr r3,[r7,#4]
 1682 0078 03F20113 	 addw r3,r3,#257
 1683 007c 1B01     	 lsls r3,r3,#4
 1684 007e 1344     	 add r3,r3,r2
 1685 0080 9B68     	 ldr r3,[r3,#8]
 1686 0082 FB60     	 str r3,[r7,#12]
 1687              	.L116:
 838:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs.cacheDescriptor[i].state == AFATFS_CACHE_STATE_DIRTY && !afatfs.cacheDescrip
 1688              	 .loc 1 838 0 discriminator 2
 1689 0084 7B68     	 ldr r3,[r7,#4]
 1690 0086 0133     	 adds r3,r3,#1
 1691 0088 7B60     	 str r3,[r7,#4]
 1692              	.L115:
 838:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs.cacheDescriptor[i].state == AFATFS_CACHE_STATE_DIRTY && !afatfs.cacheDescrip
 1693              	 .loc 1 838 0 is_stmt 0 discriminator 1
 1694 008a 7B68     	 ldr r3,[r7,#4]
 1695 008c 072B     	 cmp r3,#7
 1696 008e CADD     	 ble .L118
 1697              	.LBE7:
 844:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 845:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
 846:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 847:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (earliestSectorIndex > -1) {
 1698              	 .loc 1 847 0 is_stmt 1
 1699 0090 BB68     	 ldr r3,[r7,#8]
 1700 0092 002B     	 cmp r3,#0
 1701 0094 04DB     	 blt .L114
 848:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_cacheFlushSector(earliestSectorIndex);
 1702              	 .loc 1 848 0
 1703 0096 B868     	 ldr r0,[r7,#8]
 1704 0098 FFF7FEFF 	 bl afatfs_cacheFlushSector
 849:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 850:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // That flush will take time to complete so we may as well tell caller to come back lat
 851:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return false;
 1705              	 .loc 1 851 0
 1706 009c 0023     	 movs r3,#0
 1707 009e 00E0     	 b .L119
 1708              	.L114:
 1709              	.LBE6:
 852:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
 853:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 854:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 855:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return true;
 1710              	 .loc 1 855 0
 1711 00a0 0123     	 movs r3,#1
 1712              	.L119:
 856:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 1713              	 .loc 1 856 0
 1714 00a2 1846     	 mov r0,r3
 1715 00a4 1037     	 adds r7,r7,#16
 1716              	.LCFI100:
 1717              	 .cfi_def_cfa_offset 8
 1718 00a6 BD46     	 mov sp,r7
 1719              	.LCFI101:
 1720              	 .cfi_def_cfa_register 13
 1721              	 
 1722 00a8 80BD     	 pop {r7,pc}
 1723              	.L121:
 1724 00aa 00BF     	 .align 2
 1725              	.L120:
 1726 00ac 00000000 	 .word afatfs
 1727              	 .cfi_endproc
 1728              	.LFE549:
 1730              	 .section .text.afatfs_isFull,"ax",%progbits
 1731              	 .align 2
 1732              	 .global afatfs_isFull
 1733              	 .thumb
 1734              	 .thumb_func
 1736              	afatfs_isFull:
 1737              	.LFB550:
 857:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 858:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 859:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true if either the freefile or the regular cluster pool has been exhausted during a prev
 860:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 861:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_isFull(void)
 862:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 1738              	 .loc 1 862 0
 1739              	 .cfi_startproc
 1740              	 
 1741              	 
 1742              	 
 1743 0000 80B4     	 push {r7}
 1744              	.LCFI102:
 1745              	 .cfi_def_cfa_offset 4
 1746              	 .cfi_offset 7,-4
 1747 0002 00AF     	 add r7,sp,#0
 1748              	.LCFI103:
 1749              	 .cfi_def_cfa_register 7
 863:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.filesystemFull;
 1750              	 .loc 1 863 0
 1751 0004 044B     	 ldr r3,.L124
 1752 0006 03F58C53 	 add r3,r3,#4480
 1753 000a 0233     	 adds r3,r3,#2
 1754 000c 1B78     	 ldrb r3,[r3]
 864:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 1755              	 .loc 1 864 0
 1756 000e 1846     	 mov r0,r3
 1757 0010 BD46     	 mov sp,r7
 1758              	.LCFI104:
 1759              	 .cfi_def_cfa_register 13
 1760              	 
 1761 0012 5DF8047B 	 ldr r7,[sp],#4
 1762              	.LCFI105:
 1763              	 .cfi_restore 7
 1764              	 .cfi_def_cfa_offset 0
 1765 0016 7047     	 bx lr
 1766              	.L125:
 1767              	 .align 2
 1768              	.L124:
 1769 0018 00000000 	 .word afatfs
 1770              	 .cfi_endproc
 1771              	.LFE550:
 1773              	 .section .text.afatfs_fatSectorToPhysical,"ax",%progbits
 1774              	 .align 2
 1775              	 .thumb
 1776              	 .thumb_func
 1778              	afatfs_fatSectorToPhysical:
 1779              	.LFB551:
 865:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 866:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 867:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Get the physical sector number that corresponds to the FAT sector of the given fatSectorIndex wi
 868:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * FAT (fatIndex may be 0 or 1). (0, 0) gives the first sector of the first FAT.
 869:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 870:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint32_t afatfs_fatSectorToPhysical(int fatIndex, uint32_t fatSectorIndex)
 871:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 1780              	 .loc 1 871 0
 1781              	 .cfi_startproc
 1782              	 
 1783              	 
 1784              	 
 1785 0000 80B4     	 push {r7}
 1786              	.LCFI106:
 1787              	 .cfi_def_cfa_offset 4
 1788              	 .cfi_offset 7,-4
 1789 0002 83B0     	 sub sp,sp,#12
 1790              	.LCFI107:
 1791              	 .cfi_def_cfa_offset 16
 1792 0004 00AF     	 add r7,sp,#0
 1793              	.LCFI108:
 1794              	 .cfi_def_cfa_register 7
 1795 0006 7860     	 str r0,[r7,#4]
 1796 0008 3960     	 str r1,[r7]
 872:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.fatStartSector + (fatIndex ? afatfs.fatSectors : 0) + fatSectorIndex;
 1797              	 .loc 1 872 0
 1798 000a 0B4B     	 ldr r3,.L130
 1799 000c 03F58E53 	 add r3,r3,#4544
 1800 0010 1A68     	 ldr r2,[r3]
 1801 0012 7B68     	 ldr r3,[r7,#4]
 1802 0014 002B     	 cmp r3,#0
 1803 0016 05D0     	 beq .L127
 1804              	 .loc 1 872 0 is_stmt 0 discriminator 1
 1805 0018 074B     	 ldr r3,.L130
 1806 001a 03F58E53 	 add r3,r3,#4544
 1807 001e 0433     	 adds r3,r3,#4
 1808 0020 1B68     	 ldr r3,[r3]
 1809 0022 00E0     	 b .L128
 1810              	.L127:
 1811              	 .loc 1 872 0 discriminator 2
 1812 0024 0023     	 movs r3,#0
 1813              	.L128:
 1814              	 .loc 1 872 0 discriminator 4
 1815 0026 1A44     	 add r2,r2,r3
 1816 0028 3B68     	 ldr r3,[r7]
 1817 002a 1344     	 add r3,r3,r2
 873:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 1818              	 .loc 1 873 0 is_stmt 1 discriminator 4
 1819 002c 1846     	 mov r0,r3
 1820 002e 0C37     	 adds r7,r7,#12
 1821              	.LCFI109:
 1822              	 .cfi_def_cfa_offset 4
 1823 0030 BD46     	 mov sp,r7
 1824              	.LCFI110:
 1825              	 .cfi_def_cfa_register 13
 1826              	 
 1827 0032 5DF8047B 	 ldr r7,[sp],#4
 1828              	.LCFI111:
 1829              	 .cfi_restore 7
 1830              	 .cfi_def_cfa_offset 0
 1831 0036 7047     	 bx lr
 1832              	.L131:
 1833              	 .align 2
 1834              	.L130:
 1835 0038 00000000 	 .word afatfs
 1836              	 .cfi_endproc
 1837              	.LFE551:
 1839              	 .section .text.afatfs_fileClusterToPhysical,"ax",%progbits
 1840              	 .align 2
 1841              	 .thumb
 1842              	 .thumb_func
 1844              	afatfs_fileClusterToPhysical:
 1845              	.LFB552:
 874:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 875:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint32_t afatfs_fileClusterToPhysical(uint32_t clusterNumber, uint32_t sectorIndex)
 876:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 1846              	 .loc 1 876 0
 1847              	 .cfi_startproc
 1848              	 
 1849              	 
 1850              	 
 1851 0000 80B4     	 push {r7}
 1852              	.LCFI112:
 1853              	 .cfi_def_cfa_offset 4
 1854              	 .cfi_offset 7,-4
 1855 0002 83B0     	 sub sp,sp,#12
 1856              	.LCFI113:
 1857              	 .cfi_def_cfa_offset 16
 1858 0004 00AF     	 add r7,sp,#0
 1859              	.LCFI114:
 1860              	 .cfi_def_cfa_register 7
 1861 0006 7860     	 str r0,[r7,#4]
 1862 0008 3960     	 str r1,[r7]
 877:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.clusterStartSector + (clusterNumber - 2) * afatfs.sectorsPerCluster + sectorIndex
 1863              	 .loc 1 877 0
 1864 000a 0B4B     	 ldr r3,.L134
 1865 000c 03F58E53 	 add r3,r3,#4544
 1866 0010 0C33     	 adds r3,r3,#12
 1867 0012 1A68     	 ldr r2,[r3]
 1868 0014 7B68     	 ldr r3,[r7,#4]
 1869 0016 991E     	 subs r1,r3,#2
 1870 0018 074B     	 ldr r3,.L134
 1871 001a 03F58E53 	 add r3,r3,#4544
 1872 001e 1033     	 adds r3,r3,#16
 1873 0020 1B68     	 ldr r3,[r3]
 1874 0022 03FB01F3 	 mul r3,r3,r1
 1875 0026 1A44     	 add r2,r2,r3
 1876 0028 3B68     	 ldr r3,[r7]
 1877 002a 1344     	 add r3,r3,r2
 878:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 1878              	 .loc 1 878 0
 1879 002c 1846     	 mov r0,r3
 1880 002e 0C37     	 adds r7,r7,#12
 1881              	.LCFI115:
 1882              	 .cfi_def_cfa_offset 4
 1883 0030 BD46     	 mov sp,r7
 1884              	.LCFI116:
 1885              	 .cfi_def_cfa_register 13
 1886              	 
 1887 0032 5DF8047B 	 ldr r7,[sp],#4
 1888              	.LCFI117:
 1889              	 .cfi_restore 7
 1890              	 .cfi_def_cfa_offset 0
 1891 0036 7047     	 bx lr
 1892              	.L135:
 1893              	 .align 2
 1894              	.L134:
 1895 0038 00000000 	 .word afatfs
 1896              	 .cfi_endproc
 1897              	.LFE552:
 1899              	 .section .text.afatfs_fileGetCursorPhysicalSector,"ax",%progbits
 1900              	 .align 2
 1901              	 .thumb
 1902              	 .thumb_func
 1904              	afatfs_fileGetCursorPhysicalSector:
 1905              	.LFB553:
 879:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 880:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint32_t afatfs_fileGetCursorPhysicalSector(afatfsFilePtr_t file)
 881:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 1906              	 .loc 1 881 0
 1907              	 .cfi_startproc
 1908              	 
 1909              	 
 1910 0000 80B5     	 push {r7,lr}
 1911              	.LCFI118:
 1912              	 .cfi_def_cfa_offset 8
 1913              	 .cfi_offset 7,-8
 1914              	 .cfi_offset 14,-4
 1915 0002 84B0     	 sub sp,sp,#16
 1916              	.LCFI119:
 1917              	 .cfi_def_cfa_offset 24
 1918 0004 00AF     	 add r7,sp,#0
 1919              	.LCFI120:
 1920              	 .cfi_def_cfa_register 7
 1921 0006 7860     	 str r0,[r7,#4]
 882:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->type == AFATFS_FILE_TYPE_FAT16_ROOT_DIRECTORY) {
 1922              	 .loc 1 882 0
 1923 0008 7B68     	 ldr r3,[r7,#4]
 1924 000a 1B78     	 ldrb r3,[r3]
 1925 000c 022B     	 cmp r3,#2
 1926 000e 10D1     	 bne .L137
 883:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return afatfs.fatStartSector + AFATFS_NUM_FATS * afatfs.fatSectors + file->cursorOffset / A
 1927              	 .loc 1 883 0
 1928 0010 114B     	 ldr r3,.L139
 1929 0012 03F58E53 	 add r3,r3,#4544
 1930 0016 1A68     	 ldr r2,[r3]
 1931 0018 0F4B     	 ldr r3,.L139
 1932 001a 03F58E53 	 add r3,r3,#4544
 1933 001e 0433     	 adds r3,r3,#4
 1934 0020 1B68     	 ldr r3,[r3]
 1935 0022 5B00     	 lsls r3,r3,#1
 1936 0024 1A44     	 add r2,r2,r3
 1937 0026 7B68     	 ldr r3,[r7,#4]
 1938 0028 D3F80130 	 ldr r3,[r3,#1]
 1939 002c 5B0A     	 lsrs r3,r3,#9
 1940 002e 1344     	 add r3,r3,r2
 1941 0030 0EE0     	 b .L138
 1942              	.L137:
 1943              	.LBB8:
 884:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
 885:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t cursorSectorInCluster = afatfs_sectorIndexInCluster(file->cursorOffset);
 1944              	 .loc 1 885 0
 1945 0032 7B68     	 ldr r3,[r7,#4]
 1946 0034 D3F80130 	 ldr r3,[r3,#1]
 1947 0038 1846     	 mov r0,r3
 1948 003a FFF7FEFF 	 bl afatfs_sectorIndexInCluster
 1949 003e F860     	 str r0,[r7,#12]
 886:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return afatfs_fileClusterToPhysical(file->cursorCluster, cursorSectorInCluster);
 1950              	 .loc 1 886 0
 1951 0040 7B68     	 ldr r3,[r7,#4]
 1952 0042 D3F80D30 	 ldr r3,[r3,#13]
 1953 0046 1846     	 mov r0,r3
 1954 0048 F968     	 ldr r1,[r7,#12]
 1955 004a FFF7FEFF 	 bl afatfs_fileClusterToPhysical
 1956 004e 0346     	 mov r3,r0
 1957              	.L138:
 1958              	.LBE8:
 887:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 888:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 1959              	 .loc 1 888 0
 1960 0050 1846     	 mov r0,r3
 1961 0052 1037     	 adds r7,r7,#16
 1962              	.LCFI121:
 1963              	 .cfi_def_cfa_offset 8
 1964 0054 BD46     	 mov sp,r7
 1965              	.LCFI122:
 1966              	 .cfi_def_cfa_register 13
 1967              	 
 1968 0056 80BD     	 pop {r7,pc}
 1969              	.L140:
 1970              	 .align 2
 1971              	.L139:
 1972 0058 00000000 	 .word afatfs
 1973              	 .cfi_endproc
 1974              	.LFE553:
 1976              	 .section .text.afatfs_fileGetCursorClusterAndSector,"ax",%progbits
 1977              	 .align 2
 1978              	 .thumb
 1979              	 .thumb_func
 1981              	afatfs_fileGetCursorClusterAndSector:
 1982              	.LFB554:
 889:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 890:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 891:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Sector here is the sector index within the cluster.
 892:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 893:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_fileGetCursorClusterAndSector(afatfsFilePtr_t file, uint32_t *cluster, uint16_t 
 894:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 1983              	 .loc 1 894 0
 1984              	 .cfi_startproc
 1985              	 
 1986              	 
 1987 0000 80B5     	 push {r7,lr}
 1988              	.LCFI123:
 1989              	 .cfi_def_cfa_offset 8
 1990              	 .cfi_offset 7,-8
 1991              	 .cfi_offset 14,-4
 1992 0002 84B0     	 sub sp,sp,#16
 1993              	.LCFI124:
 1994              	 .cfi_def_cfa_offset 24
 1995 0004 00AF     	 add r7,sp,#0
 1996              	.LCFI125:
 1997              	 .cfi_def_cfa_register 7
 1998 0006 F860     	 str r0,[r7,#12]
 1999 0008 B960     	 str r1,[r7,#8]
 2000 000a 7A60     	 str r2,[r7,#4]
 895:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     *cluster = file->cursorCluster;
 2001              	 .loc 1 895 0
 2002 000c FB68     	 ldr r3,[r7,#12]
 2003 000e D3F80D20 	 ldr r2,[r3,#13]
 2004 0012 BB68     	 ldr r3,[r7,#8]
 2005 0014 1A60     	 str r2,[r3]
 896:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 897:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->type == AFATFS_FILE_TYPE_FAT16_ROOT_DIRECTORY) {
 2006              	 .loc 1 897 0
 2007 0016 FB68     	 ldr r3,[r7,#12]
 2008 0018 1B78     	 ldrb r3,[r3]
 2009 001a 022B     	 cmp r3,#2
 2010 001c 07D1     	 bne .L142
 898:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         *sector = file->cursorOffset / AFATFS_SECTOR_SIZE;
 2011              	 .loc 1 898 0
 2012 001e FB68     	 ldr r3,[r7,#12]
 2013 0020 D3F80130 	 ldr r3,[r3,#1]
 2014 0024 5B0A     	 lsrs r3,r3,#9
 2015 0026 9AB2     	 uxth r2,r3
 2016 0028 7B68     	 ldr r3,[r7,#4]
 2017 002a 1A80     	 strh r2,[r3]
 2018 002c 09E0     	 b .L141
 2019              	.L142:
 899:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
 900:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         *sector = afatfs_sectorIndexInCluster(file->cursorOffset);
 2020              	 .loc 1 900 0
 2021 002e FB68     	 ldr r3,[r7,#12]
 2022 0030 D3F80130 	 ldr r3,[r3,#1]
 2023 0034 1846     	 mov r0,r3
 2024 0036 FFF7FEFF 	 bl afatfs_sectorIndexInCluster
 2025 003a 0346     	 mov r3,r0
 2026 003c 9AB2     	 uxth r2,r3
 2027 003e 7B68     	 ldr r3,[r7,#4]
 2028 0040 1A80     	 strh r2,[r3]
 2029              	.L141:
 901:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 902:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 2030              	 .loc 1 902 0
 2031 0042 1037     	 adds r7,r7,#16
 2032              	.LCFI126:
 2033              	 .cfi_def_cfa_offset 8
 2034 0044 BD46     	 mov sp,r7
 2035              	.LCFI127:
 2036              	 .cfi_def_cfa_register 13
 2037              	 
 2038 0046 80BD     	 pop {r7,pc}
 2039              	 .cfi_endproc
 2040              	.LFE554:
 2042              	 .section .text.afatfs_cacheSector,"ax",%progbits
 2043              	 .align 2
 2044              	 .thumb
 2045              	 .thumb_func
 2047              	afatfs_cacheSector:
 2048              	.LFB555:
 903:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 904:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 905:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Get a cache entry for the given sector and store a pointer to the cached memory in *buffer.
 906:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
 907:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * physicalSectorIndex - The index of the sector in the SD card to cache
 908:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * sectorflags         - A union of AFATFS_CACHE_* constants that says which operations the sector 
 909:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * buffer              - A pointer to the 512-byte memory buffer for the sector will be stored here
 910:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * eraseCount          - For write operations, set to a non-zero number to hint that we plan to wri
 911:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                       consecutively (including this sector)
 912:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
 913:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
 914:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - On success
 915:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - Card is busy, call again later
 916:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE     - When the filesystem encounters a fatal error
 917:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 918:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_cacheSector(uint32_t physicalSectorIndex, uint8_t **buffer, u
 919:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 2049              	 .loc 1 919 0
 2050              	 .cfi_startproc
 2051              	 
 2052              	 
 2053 0000 80B5     	 push {r7,lr}
 2054              	.LCFI128:
 2055              	 .cfi_def_cfa_offset 8
 2056              	 .cfi_offset 7,-8
 2057              	 .cfi_offset 14,-4
 2058 0002 88B0     	 sub sp,sp,#32
 2059              	.LCFI129:
 2060              	 .cfi_def_cfa_offset 40
 2061 0004 00AF     	 add r7,sp,#0
 2062              	.LCFI130:
 2063              	 .cfi_def_cfa_register 7
 2064 0006 F860     	 str r0,[r7,#12]
 2065 0008 B960     	 str r1,[r7,#8]
 2066 000a 3B60     	 str r3,[r7]
 2067 000c 1346     	 mov r3,r2
 2068 000e FB71     	 strb r3,[r7,#7]
 920:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // We never write to the MBR, so any attempt to write there is an asyncfatfs bug
 921:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (!afatfs_assert((sectorFlags & AFATFS_CACHE_WRITE) == 0 || physicalSectorIndex != 0)) {
 2069              	 .loc 1 921 0
 2070 0010 FB79     	 ldrb r3,[r7,#7]
 2071 0012 03F00203 	 and r3,r3,#2
 2072 0016 002B     	 cmp r3,#0
 2073 0018 02D0     	 beq .L145
 2074              	 .loc 1 921 0 is_stmt 0 discriminator 2
 2075 001a FB68     	 ldr r3,[r7,#12]
 2076 001c 002B     	 cmp r3,#0
 2077 001e 01D0     	 beq .L146
 2078              	.L145:
 2079              	 .loc 1 921 0 discriminator 3
 2080 0020 0123     	 movs r3,#1
 2081 0022 00E0     	 b .L147
 2082              	.L146:
 2083              	 .loc 1 921 0 discriminator 4
 2084 0024 0023     	 movs r3,#0
 2085              	.L147:
 2086              	 .loc 1 921 0 discriminator 6
 2087 0026 03F00103 	 and r3,r3,#1
 2088 002a DBB2     	 uxtb r3,r3
 2089 002c 1846     	 mov r0,r3
 2090 002e FFF7FEFF 	 bl afatfs_assert
 2091 0032 0346     	 mov r3,r0
 2092 0034 83F00103 	 eor r3,r3,#1
 2093 0038 DBB2     	 uxtb r3,r3
 2094 003a 002B     	 cmp r3,#0
 2095 003c 01D0     	 beq .L148
 922:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_FAILURE;
 2096              	 .loc 1 922 0 is_stmt 1
 2097 003e 0223     	 movs r3,#2
 2098 0040 BAE0     	 b .L149
 2099              	.L148:
 923:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 924:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 925:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int cacheSectorIndex = afatfs_allocateCacheSector(physicalSectorIndex);
 2100              	 .loc 1 925 0
 2101 0042 F868     	 ldr r0,[r7,#12]
 2102 0044 FFF7FEFF 	 bl afatfs_allocateCacheSector
 2103 0048 F861     	 str r0,[r7,#28]
 926:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 927:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (cacheSectorIndex == -1) {
 2104              	 .loc 1 927 0
 2105 004a FB69     	 ldr r3,[r7,#28]
 2106 004c B3F1FF3F 	 cmp r3,#-1
 2107 0050 01D1     	 bne .L150
 928:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // We don't have enough free cache to service this request right now, try again later
 929:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_IN_PROGRESS;
 2108              	 .loc 1 929 0
 2109 0052 0023     	 movs r3,#0
 2110 0054 B0E0     	 b .L149
 2111              	.L150:
 930:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 931:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 932:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (afatfs.cacheDescriptor[cacheSectorIndex].state) {
 2112              	 .loc 1 932 0
 2113 0056 5A4A     	 ldr r2,.L163
 2114 0058 FB69     	 ldr r3,[r7,#28]
 2115 005a 1B01     	 lsls r3,r3,#4
 2116 005c 1344     	 add r3,r3,r2
 2117 005e 03F58053 	 add r3,r3,#4096
 2118 0062 1833     	 adds r3,r3,#24
 2119 0064 9B7A     	 ldrb r3,[r3,#10]
 2120 0066 042B     	 cmp r3,#4
 2121 0068 00F2A280 	 bhi .L151
 2122 006c 01A2     	 adr r2,.L153
 2123 006e 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2124 0072 00BF     	 .p2align 2
 2125              	.L153:
 2126 0074 8D000000 	 .word .L152+1
 2127 0078 25010000 	 .word .L154+1
 2128 007c 89000000 	 .word .L155+1
 2129 0080 25010000 	 .word .L154+1
 2130 0084 43010000 	 .word .L156+1
 2131              	 .p2align 1
 2132              	.L155:
 933:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CACHE_STATE_READING:
 934:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_IN_PROGRESS;
 2133              	 .loc 1 934 0
 2134 0088 0023     	 movs r3,#0
 2135 008a 95E0     	 b .L149
 2136              	.L152:
 935:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 936:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 937:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CACHE_STATE_EMPTY:
 938:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if ((sectorFlags & AFATFS_CACHE_READ) != 0) {
 2137              	 .loc 1 938 0
 2138 008c FB79     	 ldrb r3,[r7,#7]
 2139 008e 03F00103 	 and r3,r3,#1
 2140 0092 002B     	 cmp r3,#0
 2141 0094 17D0     	 beq .L157
 939:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (sdcard_readBlock(physicalSectorIndex, afatfs_cacheSectorGetMemory(cacheSectorIn
 2142              	 .loc 1 939 0
 2143 0096 F869     	 ldr r0,[r7,#28]
 2144 0098 FFF7FEFF 	 bl afatfs_cacheSectorGetMemory
 2145 009c 0346     	 mov r3,r0
 2146 009e F868     	 ldr r0,[r7,#12]
 2147 00a0 1946     	 mov r1,r3
 2148 00a2 484A     	 ldr r2,.L163+4
 2149 00a4 0023     	 movs r3,#0
 2150 00a6 FFF7FEFF 	 bl sdcard_readBlock
 2151 00aa 0346     	 mov r3,r0
 2152 00ac 002B     	 cmp r3,#0
 2153 00ae 08D0     	 beq .L158
 940:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.cacheDescriptor[cacheSectorIndex].state = AFATFS_CACHE_STATE_READING;
 2154              	 .loc 1 940 0
 2155 00b0 434A     	 ldr r2,.L163
 2156 00b2 FB69     	 ldr r3,[r7,#28]
 2157 00b4 1B01     	 lsls r3,r3,#4
 2158 00b6 1344     	 add r3,r3,r2
 2159 00b8 03F58053 	 add r3,r3,#4096
 2160 00bc 1833     	 adds r3,r3,#24
 2161 00be 0222     	 movs r2,#2
 2162 00c0 9A72     	 strb r2,[r3,#10]
 2163              	.L158:
 941:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
 942:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 return AFATFS_OPERATION_IN_PROGRESS;
 2164              	 .loc 1 942 0
 2165 00c2 0023     	 movs r3,#0
 2166 00c4 78E0     	 b .L149
 2167              	.L157:
 943:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 944:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 945:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // We only get to decide these fields if we're the first ones to cache the sector:
 946:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.cacheDescriptor[cacheSectorIndex].discardable = (sectorFlags & AFATFS_CACHE_DISC
 2168              	 .loc 1 946 0
 2169 00c6 FB79     	 ldrb r3,[r7,#7]
 2170 00c8 03F00803 	 and r3,r3,#8
 2171 00cc 002B     	 cmp r3,#0
 2172 00ce 14BF     	 ite ne
 2173 00d0 0123     	 movne r3,#1
 2174 00d2 0023     	 moveq r3,#0
 2175 00d4 D9B2     	 uxtb r1,r3
 2176 00d6 3A4A     	 ldr r2,.L163
 2177 00d8 FB69     	 ldr r3,[r7,#28]
 2178 00da 1B01     	 lsls r3,r3,#4
 2179 00dc 1344     	 add r3,r3,r2
 2180 00de 03F58053 	 add r3,r3,#4096
 2181 00e2 1833     	 adds r3,r3,#24
 2182 00e4 DA7A     	 ldrb r2,[r3,#11]
 2183 00e6 61F3C712 	 bfi r2,r1,#7,#1
 2184 00ea DA72     	 strb r2,[r3,#11]
 947:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 948:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_MIN_MULTIPLE_BLOCK_WRITE_COUNT
 949:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Don't bother pre-erasing for small block sequences
 950:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (eraseCount < AFATFS_MIN_MULTIPLE_BLOCK_WRITE_COUNT) {
 2185              	 .loc 1 950 0
 2186 00ec 3B68     	 ldr r3,[r7]
 2187 00ee 032B     	 cmp r3,#3
 2188 00f0 02D8     	 bhi .L159
 951:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 eraseCount = 0;
 2189              	 .loc 1 951 0
 2190 00f2 0023     	 movs r3,#0
 2191 00f4 3B60     	 str r3,[r7]
 2192 00f6 0AE0     	 b .L160
 2193              	.L159:
 2194              	.LBB9:
 952:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else {
 953:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 eraseCount = MIN(eraseCount, (uint32_t)UINT16_MAX); // If caller asked for a longer
 2195              	 .loc 1 953 0
 2196 00f8 3B68     	 ldr r3,[r7]
 2197 00fa BB61     	 str r3,[r7,#24]
 2198 00fc 4FF6FF73 	 movw r3,#65535
 2199 0100 7B61     	 str r3,[r7,#20]
 2200 0102 7A69     	 ldr r2,[r7,#20]
 2201 0104 BB69     	 ldr r3,[r7,#24]
 2202 0106 9342     	 cmp r3,r2
 2203 0108 28BF     	 it cs
 2204 010a 1346     	 movcs r3,r2
 2205              	.LBE9:
 2206 010c 3B60     	 str r3,[r7]
 2207              	.L160:
 954:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 955:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 956:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.cacheDescriptor[cacheSectorIndex].consecutiveEraseBlockCount = eraseCount;
 2208              	 .loc 1 956 0
 2209 010e 3B68     	 ldr r3,[r7]
 2210 0110 99B2     	 uxth r1,r3
 2211 0112 2B4A     	 ldr r2,.L163
 2212 0114 FB69     	 ldr r3,[r7,#28]
 2213 0116 1B01     	 lsls r3,r3,#4
 2214 0118 1344     	 add r3,r3,r2
 2215 011a 03F58053 	 add r3,r3,#4096
 2216 011e 1833     	 adds r3,r3,#24
 2217 0120 0A46     	 mov r2,r1
 2218 0122 1A81     	 strh r2,[r3,#8]
 2219              	.L154:
 957:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
 958:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 959:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             FALLTHROUGH;
 960:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 961:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CACHE_STATE_WRITING:
 962:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CACHE_STATE_IN_SYNC:
 963:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if ((sectorFlags & AFATFS_CACHE_WRITE) != 0) {
 2220              	 .loc 1 963 0
 2221 0124 FB79     	 ldrb r3,[r7,#7]
 2222 0126 03F00203 	 and r3,r3,#2
 2223 012a 002B     	 cmp r3,#0
 2224 012c 09D0     	 beq .L156
 964:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs_cacheSectorMarkDirty(&afatfs.cacheDescriptor[cacheSectorIndex]);
 2225              	 .loc 1 964 0
 2226 012e FB69     	 ldr r3,[r7,#28]
 2227 0130 03F20113 	 addw r3,r3,#257
 2228 0134 1B01     	 lsls r3,r3,#4
 2229 0136 224A     	 ldr r2,.L163
 2230 0138 1344     	 add r3,r3,r2
 2231 013a 0433     	 adds r3,r3,#4
 2232 013c 1846     	 mov r0,r3
 2233 013e FFF7FEFF 	 bl afatfs_cacheSectorMarkDirty
 2234              	.L156:
 965:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 966:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             FALLTHROUGH;
 967:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 968:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CACHE_STATE_DIRTY:
 969:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if ((sectorFlags & AFATFS_CACHE_LOCK) != 0) {
 2235              	 .loc 1 969 0
 2236 0142 FB79     	 ldrb r3,[r7,#7]
 2237 0144 03F00403 	 and r3,r3,#4
 2238 0148 002B     	 cmp r3,#0
 2239 014a 0AD0     	 beq .L161
 970:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.cacheDescriptor[cacheSectorIndex].locked = 1;
 2240              	 .loc 1 970 0
 2241 014c 1C4A     	 ldr r2,.L163
 2242 014e FB69     	 ldr r3,[r7,#28]
 2243 0150 1B01     	 lsls r3,r3,#4
 2244 0152 1344     	 add r3,r3,r2
 2245 0154 03F58053 	 add r3,r3,#4096
 2246 0158 1833     	 adds r3,r3,#24
 2247 015a DA7A     	 ldrb r2,[r3,#11]
 2248 015c 42F00102 	 orr r2,r2,#1
 2249 0160 DA72     	 strb r2,[r3,#11]
 2250              	.L161:
 971:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 972:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if ((sectorFlags & AFATFS_CACHE_RETAIN) != 0) {
 2251              	 .loc 1 972 0
 2252 0162 FB79     	 ldrb r3,[r7,#7]
 2253 0164 03F01003 	 and r3,r3,#16
 2254 0168 002B     	 cmp r3,#0
 2255 016a 19D0     	 beq .L162
 973:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.cacheDescriptor[cacheSectorIndex].retainCount++;
 2256              	 .loc 1 973 0
 2257 016c 144A     	 ldr r2,.L163
 2258 016e FB69     	 ldr r3,[r7,#28]
 2259 0170 1B01     	 lsls r3,r3,#4
 2260 0172 1344     	 add r3,r3,r2
 2261 0174 03F58053 	 add r3,r3,#4096
 2262 0178 1833     	 adds r3,r3,#24
 2263 017a DB7A     	 ldrb r3,[r3,#11]
 2264 017c C3F34503 	 ubfx r3,r3,#1,#6
 2265 0180 DBB2     	 uxtb r3,r3
 2266 0182 0133     	 adds r3,r3,#1
 2267 0184 03F03F03 	 and r3,r3,#63
 2268 0188 D9B2     	 uxtb r1,r3
 2269 018a 0D4A     	 ldr r2,.L163
 2270 018c FB69     	 ldr r3,[r7,#28]
 2271 018e 1B01     	 lsls r3,r3,#4
 2272 0190 1344     	 add r3,r3,r2
 2273 0192 03F58053 	 add r3,r3,#4096
 2274 0196 1833     	 adds r3,r3,#24
 2275 0198 DA7A     	 ldrb r2,[r3,#11]
 2276 019a 61F34602 	 bfi r2,r1,#1,#6
 2277 019e DA72     	 strb r2,[r3,#11]
 2278              	.L162:
 974:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
 975:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 976:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             *buffer = afatfs_cacheSectorGetMemory(cacheSectorIndex);
 2279              	 .loc 1 976 0
 2280 01a0 F869     	 ldr r0,[r7,#28]
 2281 01a2 FFF7FEFF 	 bl afatfs_cacheSectorGetMemory
 2282 01a6 0246     	 mov r2,r0
 2283 01a8 BB68     	 ldr r3,[r7,#8]
 2284 01aa 1A60     	 str r2,[r3]
 977:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 978:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_SUCCESS;
 2285              	 .loc 1 978 0
 2286 01ac 0123     	 movs r3,#1
 2287 01ae 03E0     	 b .L149
 2288              	.L151:
 979:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 980:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 981:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         default:
 982:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Cache block in unknown state, should never happen
 983:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_assert(false);
 2289              	 .loc 1 983 0
 2290 01b0 0020     	 movs r0,#0
 2291 01b2 FFF7FEFF 	 bl afatfs_assert
 984:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_FAILURE;
 2292              	 .loc 1 984 0
 2293 01b6 0223     	 movs r3,#2
 2294              	.L149:
 985:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 986:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 2295              	 .loc 1 986 0
 2296 01b8 1846     	 mov r0,r3
 2297 01ba 2037     	 adds r7,r7,#32
 2298              	.LCFI131:
 2299              	 .cfi_def_cfa_offset 8
 2300 01bc BD46     	 mov sp,r7
 2301              	.LCFI132:
 2302              	 .cfi_def_cfa_register 13
 2303              	 
 2304 01be 80BD     	 pop {r7,pc}
 2305              	.L164:
 2306              	 .align 2
 2307              	.L163:
 2308 01c0 00000000 	 .word afatfs
 2309 01c4 00000000 	 .word afatfs_sdcardReadComplete
 2310              	 .cfi_endproc
 2311              	.LFE555:
 2313              	 .section .text.afatfs_parseMBR,"ax",%progbits
 2314              	 .align 2
 2315              	 .thumb
 2316              	 .thumb_func
 2318              	afatfs_parseMBR:
 2319              	.LFB556:
 987:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 988:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
 989:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Parse the details out of the given MBR sector (512 bytes long). Return true if a compatible file
 990:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
 991:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static bool afatfs_parseMBR(const uint8_t *sector)
 992:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 2320              	 .loc 1 992 0
 2321              	 .cfi_startproc
 2322              	 
 2323              	 
 2324              	 
 2325 0000 80B4     	 push {r7}
 2326              	.LCFI133:
 2327              	 .cfi_def_cfa_offset 4
 2328              	 .cfi_offset 7,-4
 2329 0002 85B0     	 sub sp,sp,#20
 2330              	.LCFI134:
 2331              	 .cfi_def_cfa_offset 24
 2332 0004 00AF     	 add r7,sp,#0
 2333              	.LCFI135:
 2334              	 .cfi_def_cfa_register 7
 2335 0006 7860     	 str r0,[r7,#4]
 993:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Check MBR signature
 994:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (sector[AFATFS_SECTOR_SIZE - 2] != 0x55 || sector[AFATFS_SECTOR_SIZE - 1] != 0xAA)
 2336              	 .loc 1 994 0
 2337 0008 7B68     	 ldr r3,[r7,#4]
 2338 000a 03F5FF73 	 add r3,r3,#510
 2339 000e 1B78     	 ldrb r3,[r3]
 2340 0010 552B     	 cmp r3,#85
 2341 0012 05D1     	 bne .L166
 2342              	 .loc 1 994 0 is_stmt 0 discriminator 1
 2343 0014 7B68     	 ldr r3,[r7,#4]
 2344 0016 03F2FF13 	 addw r3,r3,#511
 2345 001a 1B78     	 ldrb r3,[r3]
 2346 001c AA2B     	 cmp r3,#170
 2347 001e 01D0     	 beq .L167
 2348              	.L166:
 995:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false;
 2349              	 .loc 1 995 0 is_stmt 1
 2350 0020 0023     	 movs r3,#0
 2351 0022 3CE0     	 b .L168
 2352              	.L167:
 996:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 997:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     mbrPartitionEntry_t *partition = (mbrPartitionEntry_t *) (sector + 446);
 2353              	 .loc 1 997 0
 2354 0024 7B68     	 ldr r3,[r7,#4]
 2355 0026 03F5DF73 	 add r3,r3,#446
 2356 002a BB60     	 str r3,[r7,#8]
 2357              	.LBB10:
 998:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 999:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < 4; i++) {
 2358              	 .loc 1 999 0
 2359 002c 0023     	 movs r3,#0
 2360 002e FB60     	 str r3,[r7,#12]
 2361 0030 31E0     	 b .L169
 2362              	.L172:
1000:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (
1001:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             partition[i].lbaBegin > 0
 2363              	 .loc 1 1001 0
 2364 0032 FB68     	 ldr r3,[r7,#12]
 2365 0034 1B01     	 lsls r3,r3,#4
 2366 0036 BA68     	 ldr r2,[r7,#8]
 2367 0038 1344     	 add r3,r3,r2
 2368 003a 9B68     	 ldr r3,[r3,#8]
1000:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (
 2369              	 .loc 1 1000 0
 2370 003c 002B     	 cmp r3,#0
 2371 003e 27D0     	 beq .L170
1002:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             && (
1003:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 partition[i].type == MBR_PARTITION_TYPE_FAT32
 2372              	 .loc 1 1003 0
 2373 0040 FB68     	 ldr r3,[r7,#12]
 2374 0042 1B01     	 lsls r3,r3,#4
 2375 0044 BA68     	 ldr r2,[r7,#8]
 2376 0046 1344     	 add r3,r3,r2
 2377 0048 1B79     	 ldrb r3,[r3,#4]
1002:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             && (
 2378              	 .loc 1 1002 0
 2379 004a 0B2B     	 cmp r3,#11
 2380 004c 14D0     	 beq .L171
1004:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 || partition[i].type == MBR_PARTITION_TYPE_FAT32_LBA
 2381              	 .loc 1 1004 0
 2382 004e FB68     	 ldr r3,[r7,#12]
 2383 0050 1B01     	 lsls r3,r3,#4
 2384 0052 BA68     	 ldr r2,[r7,#8]
 2385 0054 1344     	 add r3,r3,r2
 2386 0056 1B79     	 ldrb r3,[r3,#4]
 2387 0058 0C2B     	 cmp r3,#12
 2388 005a 0DD0     	 beq .L171
1005:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 || partition[i].type == MBR_PARTITION_TYPE_FAT16
 2389              	 .loc 1 1005 0
 2390 005c FB68     	 ldr r3,[r7,#12]
 2391 005e 1B01     	 lsls r3,r3,#4
 2392 0060 BA68     	 ldr r2,[r7,#8]
 2393 0062 1344     	 add r3,r3,r2
 2394 0064 1B79     	 ldrb r3,[r3,#4]
 2395 0066 062B     	 cmp r3,#6
 2396 0068 06D0     	 beq .L171
1006:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 || partition[i].type == MBR_PARTITION_TYPE_FAT16_LBA
 2397              	 .loc 1 1006 0
 2398 006a FB68     	 ldr r3,[r7,#12]
 2399 006c 1B01     	 lsls r3,r3,#4
 2400 006e BA68     	 ldr r2,[r7,#8]
 2401 0070 1344     	 add r3,r3,r2
 2402 0072 1B79     	 ldrb r3,[r3,#4]
 2403 0074 0E2B     	 cmp r3,#14
 2404 0076 0BD1     	 bne .L170
 2405              	.L171:
1007:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             )
1008:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         ) {
1009:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.partitionStartSector = partition[i].lbaBegin;
 2406              	 .loc 1 1009 0
 2407 0078 FB68     	 ldr r3,[r7,#12]
 2408 007a 1B01     	 lsls r3,r3,#4
 2409 007c BA68     	 ldr r2,[r7,#8]
 2410 007e 1344     	 add r3,r3,r2
 2411 0080 9A68     	 ldr r2,[r3,#8]
 2412 0082 0A4B     	 ldr r3,.L173
 2413 0084 03F58D53 	 add r3,r3,#4512
 2414 0088 1C33     	 adds r3,r3,#28
 2415 008a 1A60     	 str r2,[r3]
1010:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1011:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return true;
 2416              	 .loc 1 1011 0
 2417 008c 0123     	 movs r3,#1
 2418 008e 06E0     	 b .L168
 2419              	.L170:
 999:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (
 2420              	 .loc 1 999 0 discriminator 2
 2421 0090 FB68     	 ldr r3,[r7,#12]
 2422 0092 0133     	 adds r3,r3,#1
 2423 0094 FB60     	 str r3,[r7,#12]
 2424              	.L169:
 999:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (
 2425              	 .loc 1 999 0 is_stmt 0 discriminator 1
 2426 0096 FB68     	 ldr r3,[r7,#12]
 2427 0098 032B     	 cmp r3,#3
 2428 009a CADD     	 ble .L172
 2429              	.LBE10:
1012:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1013:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1014:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1015:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return false;
 2430              	 .loc 1 1015 0 is_stmt 1
 2431 009c 0023     	 movs r3,#0
 2432              	.L168:
1016:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 2433              	 .loc 1 1016 0
 2434 009e 1846     	 mov r0,r3
 2435 00a0 1437     	 adds r7,r7,#20
 2436              	.LCFI136:
 2437              	 .cfi_def_cfa_offset 4
 2438 00a2 BD46     	 mov sp,r7
 2439              	.LCFI137:
 2440              	 .cfi_def_cfa_register 13
 2441              	 
 2442 00a4 5DF8047B 	 ldr r7,[sp],#4
 2443              	.LCFI138:
 2444              	 .cfi_restore 7
 2445              	 .cfi_def_cfa_offset 0
 2446 00a8 7047     	 bx lr
 2447              	.L174:
 2448 00aa 00BF     	 .align 2
 2449              	.L173:
 2450 00ac 00000000 	 .word afatfs
 2451              	 .cfi_endproc
 2452              	.LFE556:
 2454              	 .section .text.afatfs_parseVolumeID,"ax",%progbits
 2455              	 .align 2
 2456              	 .thumb
 2457              	 .thumb_func
 2459              	afatfs_parseVolumeID:
 2460              	.LFB557:
1017:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1018:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static bool afatfs_parseVolumeID(const uint8_t *sector)
1019:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 2461              	 .loc 1 1019 0
 2462              	 .cfi_startproc
 2463              	 
 2464              	 
 2465 0000 80B5     	 push {r7,lr}
 2466              	.LCFI139:
 2467              	 .cfi_def_cfa_offset 8
 2468              	 .cfi_offset 7,-8
 2469              	 .cfi_offset 14,-4
 2470 0002 86B0     	 sub sp,sp,#24
 2471              	.LCFI140:
 2472              	 .cfi_def_cfa_offset 32
 2473 0004 00AF     	 add r7,sp,#0
 2474              	.LCFI141:
 2475              	 .cfi_def_cfa_register 7
 2476 0006 7860     	 str r0,[r7,#4]
1020:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     fatVolumeID_t *volume = (fatVolumeID_t *) sector;
 2477              	 .loc 1 1020 0
 2478 0008 7B68     	 ldr r3,[r7,#4]
 2479 000a 7B61     	 str r3,[r7,#20]
1021:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1022:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.filesystemType = FAT_FILESYSTEM_TYPE_INVALID;
 2480              	 .loc 1 1022 0
 2481 000c 7C4B     	 ldr r3,.L190
 2482 000e 0022     	 movs r2,#0
 2483 0010 1A70     	 strb r2,[r3]
1023:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1024:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (volume->bytesPerSector != AFATFS_SECTOR_SIZE || volume->numFATs != AFATFS_NUM_FATS
 2484              	 .loc 1 1024 0
 2485 0012 7B69     	 ldr r3,[r7,#20]
 2486 0014 B3F80B30 	 ldrh r3,[r3,#11]
 2487 0018 9BB2     	 uxth r3,r3
 2488 001a B3F5007F 	 cmp r3,#512
 2489 001e 0FD1     	 bne .L176
 2490              	 .loc 1 1024 0 is_stmt 0 discriminator 1
 2491 0020 7B69     	 ldr r3,[r7,#20]
 2492 0022 1B7C     	 ldrb r3,[r3,#16]
 2493 0024 022B     	 cmp r3,#2
 2494 0026 0BD1     	 bne .L176
1025:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             || sector[510] != FAT_VOLUME_ID_SIGNATURE_1 || sector[511] != FAT_VOLUME_ID_SIGNATURE_2
 2495              	 .loc 1 1025 0 is_stmt 1
 2496 0028 7B68     	 ldr r3,[r7,#4]
 2497 002a 03F5FF73 	 add r3,r3,#510
 2498 002e 1B78     	 ldrb r3,[r3]
 2499 0030 552B     	 cmp r3,#85
 2500 0032 05D1     	 bne .L176
 2501              	 .loc 1 1025 0 is_stmt 0 discriminator 1
 2502 0034 7B68     	 ldr r3,[r7,#4]
 2503 0036 03F2FF13 	 addw r3,r3,#511
 2504 003a 1B78     	 ldrb r3,[r3]
 2505 003c AA2B     	 cmp r3,#170
 2506 003e 01D0     	 beq .L177
 2507              	.L176:
1026:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false;
 2508              	 .loc 1 1026 0 is_stmt 1
 2509 0040 0023     	 movs r3,#0
 2510 0042 D9E0     	 b .L178
 2511              	.L177:
1027:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1028:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1029:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.fatStartSector = afatfs.partitionStartSector + volume->reservedSectorCount;
 2512              	 .loc 1 1029 0
 2513 0044 6E4B     	 ldr r3,.L190
 2514 0046 03F58D53 	 add r3,r3,#4512
 2515 004a 1C33     	 adds r3,r3,#28
 2516 004c 1B68     	 ldr r3,[r3]
 2517 004e 7A69     	 ldr r2,[r7,#20]
 2518 0050 D289     	 ldrh r2,[r2,#14]
 2519 0052 92B2     	 uxth r2,r2
 2520 0054 1A44     	 add r2,r2,r3
 2521 0056 6A4B     	 ldr r3,.L190
 2522 0058 03F58E53 	 add r3,r3,#4544
 2523 005c 1A60     	 str r2,[r3]
1030:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1031:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.sectorsPerCluster = volume->sectorsPerCluster;
 2524              	 .loc 1 1031 0
 2525 005e 7B69     	 ldr r3,[r7,#20]
 2526 0060 5B7B     	 ldrb r3,[r3,#13]
 2527 0062 1A46     	 mov r2,r3
 2528 0064 664B     	 ldr r3,.L190
 2529 0066 03F58E53 	 add r3,r3,#4544
 2530 006a 1033     	 adds r3,r3,#16
 2531 006c 1A60     	 str r2,[r3]
1032:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.sectorsPerCluster < 1 || afatfs.sectorsPerCluster > 128 || !isPowerOfTwo(afatfs.sect
 2532              	 .loc 1 1032 0
 2533 006e 644B     	 ldr r3,.L190
 2534 0070 03F58E53 	 add r3,r3,#4544
 2535 0074 1033     	 adds r3,r3,#16
 2536 0076 1B68     	 ldr r3,[r3]
 2537 0078 002B     	 cmp r3,#0
 2538 007a 14D0     	 beq .L179
 2539              	 .loc 1 1032 0 is_stmt 0 discriminator 1
 2540 007c 604B     	 ldr r3,.L190
 2541 007e 03F58E53 	 add r3,r3,#4544
 2542 0082 1033     	 adds r3,r3,#16
 2543 0084 1B68     	 ldr r3,[r3]
 2544 0086 802B     	 cmp r3,#128
 2545 0088 0DD8     	 bhi .L179
 2546              	 .loc 1 1032 0 discriminator 2
 2547 008a 5D4B     	 ldr r3,.L190
 2548 008c 03F58E53 	 add r3,r3,#4544
 2549 0090 1033     	 adds r3,r3,#16
 2550 0092 1B68     	 ldr r3,[r3]
 2551 0094 1846     	 mov r0,r3
 2552 0096 FFF7FEFF 	 bl isPowerOfTwo
 2553 009a 0346     	 mov r3,r0
 2554 009c 83F00103 	 eor r3,r3,#1
 2555 00a0 DBB2     	 uxtb r3,r3
 2556 00a2 002B     	 cmp r3,#0
 2557 00a4 01D0     	 beq .L180
 2558              	.L179:
1033:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false;
 2559              	 .loc 1 1033 0 is_stmt 1
 2560 00a6 0023     	 movs r3,#0
 2561 00a8 A6E0     	 b .L178
 2562              	.L180:
1034:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1035:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1036:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.byteInClusterMask = AFATFS_SECTOR_SIZE * afatfs.sectorsPerCluster - 1;
 2563              	 .loc 1 1036 0
 2564 00aa 554B     	 ldr r3,.L190
 2565 00ac 03F58E53 	 add r3,r3,#4544
 2566 00b0 1033     	 adds r3,r3,#16
 2567 00b2 1B68     	 ldr r3,[r3]
 2568 00b4 5B02     	 lsls r3,r3,#9
 2569 00b6 5A1E     	 subs r2,r3,#1
 2570 00b8 514B     	 ldr r3,.L190
 2571 00ba 03F58E53 	 add r3,r3,#4544
 2572 00be 1833     	 adds r3,r3,#24
 2573 00c0 1A60     	 str r2,[r3]
1037:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1038:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.fatSectors = volume->FATSize16 != 0 ? volume->FATSize16 : volume->fatDescriptor.fat32.FA
 2574              	 .loc 1 1038 0
 2575 00c2 7B69     	 ldr r3,[r7,#20]
 2576 00c4 DB8A     	 ldrh r3,[r3,#22]
 2577 00c6 9BB2     	 uxth r3,r3
 2578 00c8 002B     	 cmp r3,#0
 2579 00ca 04D0     	 beq .L181
 2580              	 .loc 1 1038 0 is_stmt 0 discriminator 1
 2581 00cc 7B69     	 ldr r3,[r7,#20]
 2582 00ce DB8A     	 ldrh r3,[r3,#22]
 2583 00d0 9BB2     	 uxth r3,r3
 2584 00d2 1A46     	 mov r2,r3
 2585 00d4 01E0     	 b .L182
 2586              	.L181:
 2587              	 .loc 1 1038 0 discriminator 2
 2588 00d6 7B69     	 ldr r3,[r7,#20]
 2589 00d8 5A6A     	 ldr r2,[r3,#36]
 2590              	.L182:
 2591              	 .loc 1 1038 0 discriminator 4
 2592 00da 494B     	 ldr r3,.L190
 2593 00dc 03F58E53 	 add r3,r3,#4544
 2594 00e0 0433     	 adds r3,r3,#4
 2595 00e2 1A60     	 str r2,[r3]
1039:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1040:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Always zero on FAT32 since rootEntryCount is always zero (this is non-zero on FAT16)
1041:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.rootDirectorySectors = ((volume->rootEntryCount * FAT_DIRECTORY_ENTRY_SIZE) + (volume->b
 2596              	 .loc 1 1041 0 is_stmt 1 discriminator 4
 2597 00e4 7B69     	 ldr r3,[r7,#20]
 2598 00e6 B3F81130 	 ldrh r3,[r3,#17]
 2599 00ea 9BB2     	 uxth r3,r3
 2600 00ec 5A01     	 lsls r2,r3,#5
 2601 00ee 7B69     	 ldr r3,[r7,#20]
 2602 00f0 B3F80B30 	 ldrh r3,[r3,#11]
 2603 00f4 9BB2     	 uxth r3,r3
 2604 00f6 013B     	 subs r3,r3,#1
 2605 00f8 1344     	 add r3,r3,r2
 2606 00fa 7A69     	 ldr r2,[r7,#20]
 2607 00fc B2F80B20 	 ldrh r2,[r2,#11]
 2608 0100 92B2     	 uxth r2,r2
 2609 0102 93FBF2F3 	 sdiv r3,r3,r2
 2610 0106 1A46     	 mov r2,r3
 2611 0108 3D4B     	 ldr r3,.L190
 2612 010a 03F58F53 	 add r3,r3,#4576
 2613 010e 1A60     	 str r2,[r3]
1042:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t totalSectors = volume->totalSectors16 != 0 ? volume->totalSectors16 : volume->totalSec
 2614              	 .loc 1 1042 0 discriminator 4
 2615 0110 7B69     	 ldr r3,[r7,#20]
 2616 0112 B3F81330 	 ldrh r3,[r3,#19]
 2617 0116 9BB2     	 uxth r3,r3
 2618 0118 002B     	 cmp r3,#0
 2619 011a 04D0     	 beq .L183
 2620              	 .loc 1 1042 0 is_stmt 0 discriminator 1
 2621 011c 7B69     	 ldr r3,[r7,#20]
 2622 011e B3F81330 	 ldrh r3,[r3,#19]
 2623 0122 9BB2     	 uxth r3,r3
 2624 0124 01E0     	 b .L184
 2625              	.L183:
 2626              	 .loc 1 1042 0 discriminator 2
 2627 0126 7B69     	 ldr r3,[r7,#20]
 2628 0128 1B6A     	 ldr r3,[r3,#32]
 2629              	.L184:
 2630              	 .loc 1 1042 0 discriminator 4
 2631 012a 3B61     	 str r3,[r7,#16]
1043:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t dataSectors = totalSectors - (volume->reservedSectorCount + (AFATFS_NUM_FATS * afatfs.
 2632              	 .loc 1 1043 0 is_stmt 1 discriminator 4
 2633 012c 7B69     	 ldr r3,[r7,#20]
 2634 012e DB89     	 ldrh r3,[r3,#14]
 2635 0130 9BB2     	 uxth r3,r3
 2636 0132 1A46     	 mov r2,r3
 2637 0134 324B     	 ldr r3,.L190
 2638 0136 03F58E53 	 add r3,r3,#4544
 2639 013a 0433     	 adds r3,r3,#4
 2640 013c 1B68     	 ldr r3,[r3]
 2641 013e 5B00     	 lsls r3,r3,#1
 2642 0140 1A44     	 add r2,r2,r3
 2643 0142 2F4B     	 ldr r3,.L190
 2644 0144 03F58F53 	 add r3,r3,#4576
 2645 0148 1B68     	 ldr r3,[r3]
 2646 014a 1344     	 add r3,r3,r2
 2647 014c 3A69     	 ldr r2,[r7,#16]
 2648 014e D31A     	 subs r3,r2,r3
 2649 0150 FB60     	 str r3,[r7,#12]
1044:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1045:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.numClusters = dataSectors / volume->sectorsPerCluster;
 2650              	 .loc 1 1045 0 discriminator 4
 2651 0152 7B69     	 ldr r3,[r7,#20]
 2652 0154 5B7B     	 ldrb r3,[r3,#13]
 2653 0156 1A46     	 mov r2,r3
 2654 0158 FB68     	 ldr r3,[r7,#12]
 2655 015a B3FBF2F2 	 udiv r2,r3,r2
 2656 015e 284B     	 ldr r3,.L190
 2657 0160 03F58E53 	 add r3,r3,#4544
 2658 0164 0833     	 adds r3,r3,#8
 2659 0166 1A60     	 str r2,[r3]
1046:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1047:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.numClusters <= FAT12_MAX_CLUSTERS) {
 2660              	 .loc 1 1047 0 discriminator 4
 2661 0168 254B     	 ldr r3,.L190
 2662 016a 03F58E53 	 add r3,r3,#4544
 2663 016e 0833     	 adds r3,r3,#8
 2664 0170 1B68     	 ldr r3,[r3]
 2665 0172 40F6F472 	 movw r2,#4084
 2666 0176 9342     	 cmp r3,r2
 2667 0178 04D8     	 bhi .L185
1048:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.filesystemType = FAT_FILESYSTEM_TYPE_FAT12;
 2668              	 .loc 1 1048 0
 2669 017a 214B     	 ldr r3,.L190
 2670 017c 0122     	 movs r2,#1
 2671 017e 1A70     	 strb r2,[r3]
1049:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1050:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false; // FAT12 is not a supported filesystem
 2672              	 .loc 1 1050 0
 2673 0180 0023     	 movs r3,#0
 2674 0182 39E0     	 b .L178
 2675              	.L185:
1051:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else if (afatfs.numClusters <= FAT16_MAX_CLUSTERS) {
 2676              	 .loc 1 1051 0
 2677 0184 1E4B     	 ldr r3,.L190
 2678 0186 03F58E53 	 add r3,r3,#4544
 2679 018a 0833     	 adds r3,r3,#8
 2680 018c 1B68     	 ldr r3,[r3]
 2681 018e 4FF6F472 	 movw r2,#65524
 2682 0192 9342     	 cmp r3,r2
 2683 0194 03D8     	 bhi .L186
1052:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.filesystemType = FAT_FILESYSTEM_TYPE_FAT16;
 2684              	 .loc 1 1052 0
 2685 0196 1A4B     	 ldr r3,.L190
 2686 0198 0222     	 movs r2,#2
 2687 019a 1A70     	 strb r2,[r3]
 2688 019c 02E0     	 b .L187
 2689              	.L186:
1053:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
1054:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.filesystemType = FAT_FILESYSTEM_TYPE_FAT32;
 2690              	 .loc 1 1054 0
 2691 019e 184B     	 ldr r3,.L190
 2692 01a0 0322     	 movs r2,#3
 2693 01a2 1A70     	 strb r2,[r3]
 2694              	.L187:
1055:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1056:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1057:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT32) {
 2695              	 .loc 1 1057 0
 2696 01a4 164B     	 ldr r3,.L190
 2697 01a6 1B78     	 ldrb r3,[r3]
 2698 01a8 032B     	 cmp r3,#3
 2699 01aa 07D1     	 bne .L188
1058:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.rootDirectoryCluster = volume->fatDescriptor.fat32.rootCluster;
 2700              	 .loc 1 1058 0
 2701 01ac 7B69     	 ldr r3,[r7,#20]
 2702 01ae DA6A     	 ldr r2,[r3,#44]
 2703 01b0 134B     	 ldr r3,.L190
 2704 01b2 03F58E53 	 add r3,r3,#4544
 2705 01b6 1C33     	 adds r3,r3,#28
 2706 01b8 1A60     	 str r2,[r3]
 2707 01ba 05E0     	 b .L189
 2708              	.L188:
1059:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
1060:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // FAT16 doesn't store the root directory in clusters
1061:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.rootDirectoryCluster = 0;
 2709              	 .loc 1 1061 0
 2710 01bc 104B     	 ldr r3,.L190
 2711 01be 03F58E53 	 add r3,r3,#4544
 2712 01c2 1C33     	 adds r3,r3,#28
 2713 01c4 0022     	 movs r2,#0
 2714 01c6 1A60     	 str r2,[r3]
 2715              	.L189:
1062:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1063:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1064:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t endOfFATs = afatfs.fatStartSector + AFATFS_NUM_FATS * afatfs.fatSectors;
 2716              	 .loc 1 1064 0
 2717 01c8 0D4B     	 ldr r3,.L190
 2718 01ca 03F58E53 	 add r3,r3,#4544
 2719 01ce 1A68     	 ldr r2,[r3]
 2720 01d0 0B4B     	 ldr r3,.L190
 2721 01d2 03F58E53 	 add r3,r3,#4544
 2722 01d6 0433     	 adds r3,r3,#4
 2723 01d8 1B68     	 ldr r3,[r3]
 2724 01da 5B00     	 lsls r3,r3,#1
 2725 01dc 1344     	 add r3,r3,r2
 2726 01de BB60     	 str r3,[r7,#8]
1065:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1066:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.clusterStartSector = endOfFATs + afatfs.rootDirectorySectors;
 2727              	 .loc 1 1066 0
 2728 01e0 074B     	 ldr r3,.L190
 2729 01e2 03F58F53 	 add r3,r3,#4576
 2730 01e6 1A68     	 ldr r2,[r3]
 2731 01e8 BB68     	 ldr r3,[r7,#8]
 2732 01ea 1A44     	 add r2,r2,r3
 2733 01ec 044B     	 ldr r3,.L190
 2734 01ee 03F58E53 	 add r3,r3,#4544
 2735 01f2 0C33     	 adds r3,r3,#12
 2736 01f4 1A60     	 str r2,[r3]
1067:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1068:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return true;
 2737              	 .loc 1 1068 0
 2738 01f6 0123     	 movs r3,#1
 2739              	.L178:
1069:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 2740              	 .loc 1 1069 0
 2741 01f8 1846     	 mov r0,r3
 2742 01fa 1837     	 adds r7,r7,#24
 2743              	.LCFI142:
 2744              	 .cfi_def_cfa_offset 8
 2745 01fc BD46     	 mov sp,r7
 2746              	.LCFI143:
 2747              	 .cfi_def_cfa_register 13
 2748              	 
 2749 01fe 80BD     	 pop {r7,pc}
 2750              	.L191:
 2751              	 .align 2
 2752              	.L190:
 2753 0200 00000000 	 .word afatfs
 2754              	 .cfi_endproc
 2755              	.LFE557:
 2757              	 .section .text.afatfs_getFATPositionForCluster,"ax",%progbits
 2758              	 .align 2
 2759              	 .thumb
 2760              	 .thumb_func
 2762              	afatfs_getFATPositionForCluster:
 2763              	.LFB558:
1070:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1071:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1072:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Get the position of the FAT entry for the cluster with the given number.
1073:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1074:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_getFATPositionForCluster(uint32_t cluster, uint32_t *fatSectorIndex, uint32_t *f
1075:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 2764              	 .loc 1 1075 0
 2765              	 .cfi_startproc
 2766              	 
 2767              	 
 2768 0000 80B5     	 push {r7,lr}
 2769              	.LCFI144:
 2770              	 .cfi_def_cfa_offset 8
 2771              	 .cfi_offset 7,-8
 2772              	 .cfi_offset 14,-4
 2773 0002 86B0     	 sub sp,sp,#24
 2774              	.LCFI145:
 2775              	 .cfi_def_cfa_offset 32
 2776 0004 00AF     	 add r7,sp,#0
 2777              	.LCFI146:
 2778              	 .cfi_def_cfa_register 7
 2779 0006 F860     	 str r0,[r7,#12]
 2780 0008 B960     	 str r1,[r7,#8]
 2781 000a 7A60     	 str r2,[r7,#4]
1076:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT16) {
 2782              	 .loc 1 1076 0
 2783 000c 134B     	 ldr r3,.L195
 2784 000e 1B78     	 ldrb r3,[r3]
 2785 0010 022B     	 cmp r3,#2
 2786 0012 0FD1     	 bne .L193
 2787              	.LBB11:
1077:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t entriesPerFATSector = AFATFS_SECTOR_SIZE / sizeof(uint16_t);
 2788              	 .loc 1 1077 0
 2789 0014 4FF48073 	 mov r3,#256
 2790 0018 7B61     	 str r3,[r7,#20]
1078:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1079:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         *fatSectorIndex = cluster / entriesPerFATSector;
 2791              	 .loc 1 1079 0
 2792 001a FA68     	 ldr r2,[r7,#12]
 2793 001c 7B69     	 ldr r3,[r7,#20]
 2794 001e B2FBF3F2 	 udiv r2,r2,r3
 2795 0022 BB68     	 ldr r3,[r7,#8]
 2796 0024 1A60     	 str r2,[r3]
1080:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         *fatSectorEntryIndex = cluster & (entriesPerFATSector - 1);
 2797              	 .loc 1 1080 0
 2798 0026 7B69     	 ldr r3,[r7,#20]
 2799 0028 5A1E     	 subs r2,r3,#1
 2800 002a FB68     	 ldr r3,[r7,#12]
 2801 002c 1A40     	 ands r2,r2,r3
 2802 002e 7B68     	 ldr r3,[r7,#4]
 2803 0030 1A60     	 str r2,[r3]
 2804              	.LBE11:
 2805 0032 10E0     	 b .L192
 2806              	.L193:
 2807              	.LBB12:
1081:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
1082:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t entriesPerFATSector = AFATFS_SECTOR_SIZE / sizeof(uint32_t);
 2808              	 .loc 1 1082 0
 2809 0034 8023     	 movs r3,#128
 2810 0036 3B61     	 str r3,[r7,#16]
1083:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1084:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         *fatSectorIndex = fat32_decodeClusterNumber(cluster) / entriesPerFATSector;
 2811              	 .loc 1 1084 0
 2812 0038 F868     	 ldr r0,[r7,#12]
 2813 003a FFF7FEFF 	 bl fat32_decodeClusterNumber
 2814 003e 0246     	 mov r2,r0
 2815 0040 3B69     	 ldr r3,[r7,#16]
 2816 0042 B2FBF3F2 	 udiv r2,r2,r3
 2817 0046 BB68     	 ldr r3,[r7,#8]
 2818 0048 1A60     	 str r2,[r3]
1085:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         *fatSectorEntryIndex = cluster & (entriesPerFATSector - 1);
 2819              	 .loc 1 1085 0
 2820 004a 3B69     	 ldr r3,[r7,#16]
 2821 004c 5A1E     	 subs r2,r3,#1
 2822 004e FB68     	 ldr r3,[r7,#12]
 2823 0050 1A40     	 ands r2,r2,r3
 2824 0052 7B68     	 ldr r3,[r7,#4]
 2825 0054 1A60     	 str r2,[r3]
 2826              	.L192:
 2827              	.LBE12:
1086:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1087:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 2828              	 .loc 1 1087 0
 2829 0056 1837     	 adds r7,r7,#24
 2830              	.LCFI147:
 2831              	 .cfi_def_cfa_offset 8
 2832 0058 BD46     	 mov sp,r7
 2833              	.LCFI148:
 2834              	 .cfi_def_cfa_register 13
 2835              	 
 2836 005a 80BD     	 pop {r7,pc}
 2837              	.L196:
 2838              	 .align 2
 2839              	.L195:
 2840 005c 00000000 	 .word afatfs
 2841              	 .cfi_endproc
 2842              	.LFE558:
 2844              	 .section .text.afatfs_FATIsEndOfChainMarker,"ax",%progbits
 2845              	 .align 2
 2846              	 .thumb
 2847              	 .thumb_func
 2849              	afatfs_FATIsEndOfChainMarker:
 2850              	.LFB559:
1088:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1089:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static bool afatfs_FATIsEndOfChainMarker(uint32_t clusterNumber)
1090:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 2851              	 .loc 1 1090 0
 2852              	 .cfi_startproc
 2853              	 
 2854              	 
 2855 0000 80B5     	 push {r7,lr}
 2856              	.LCFI149:
 2857              	 .cfi_def_cfa_offset 8
 2858              	 .cfi_offset 7,-8
 2859              	 .cfi_offset 14,-4
 2860 0002 82B0     	 sub sp,sp,#8
 2861              	.LCFI150:
 2862              	 .cfi_def_cfa_offset 16
 2863 0004 00AF     	 add r7,sp,#0
 2864              	.LCFI151:
 2865              	 .cfi_def_cfa_register 7
 2866 0006 7860     	 str r0,[r7,#4]
1091:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT32) {
 2867              	 .loc 1 1091 0
 2868 0008 094B     	 ldr r3,.L200
 2869 000a 1B78     	 ldrb r3,[r3]
 2870 000c 032B     	 cmp r3,#3
 2871 000e 04D1     	 bne .L198
1092:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return fat32_isEndOfChainMarker(clusterNumber);
 2872              	 .loc 1 1092 0
 2873 0010 7868     	 ldr r0,[r7,#4]
 2874 0012 FFF7FEFF 	 bl fat32_isEndOfChainMarker
 2875 0016 0346     	 mov r3,r0
 2876 0018 05E0     	 b .L199
 2877              	.L198:
1093:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
1094:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return fat16_isEndOfChainMarker(clusterNumber);
 2878              	 .loc 1 1094 0
 2879 001a 7B68     	 ldr r3,[r7,#4]
 2880 001c 9BB2     	 uxth r3,r3
 2881 001e 1846     	 mov r0,r3
 2882 0020 FFF7FEFF 	 bl fat16_isEndOfChainMarker
 2883 0024 0346     	 mov r3,r0
 2884              	.L199:
1095:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1096:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 2885              	 .loc 1 1096 0
 2886 0026 1846     	 mov r0,r3
 2887 0028 0837     	 adds r7,r7,#8
 2888              	.LCFI152:
 2889              	 .cfi_def_cfa_offset 8
 2890 002a BD46     	 mov sp,r7
 2891              	.LCFI153:
 2892              	 .cfi_def_cfa_register 13
 2893              	 
 2894 002c 80BD     	 pop {r7,pc}
 2895              	.L201:
 2896 002e 00BF     	 .align 2
 2897              	.L200:
 2898 0030 00000000 	 .word afatfs
 2899              	 .cfi_endproc
 2900              	.LFE559:
 2902              	 .section .text.afatfs_FATGetNextCluster,"ax",%progbits
 2903              	 .align 2
 2904              	 .thumb
 2905              	 .thumb_func
 2907              	afatfs_FATGetNextCluster:
 2908              	.LFB560:
1097:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1098:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1099:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Look up the FAT to find out which cluster follows the one with the given number and store it int
1100:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1101:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Use fat_isFreeSpace() and fat_isEndOfChainMarker() on nextCluster to distinguish those special v
1102:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * cluster numbers.
1103:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1104:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Note that if you're trying to find the next cluster of a file, you should be calling afatfs_file
1105:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * instead, as that one supports contiguous freefile-based files (which needn't consult the FAT).
1106:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1107:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
1108:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - FS is busy right now, call again later
1109:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - *nextCluster is set to the next cluster number
1110:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1111:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_FATGetNextCluster(int fatIndex, uint32_t cluster, uint32_t *n
1112:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 2909              	 .loc 1 1112 0
 2910              	 .cfi_startproc
 2911              	 
 2912              	 
 2913 0000 80B5     	 push {r7,lr}
 2914              	.LCFI154:
 2915              	 .cfi_def_cfa_offset 8
 2916              	 .cfi_offset 7,-8
 2917              	 .cfi_offset 14,-4
 2918 0002 88B0     	 sub sp,sp,#32
 2919              	.LCFI155:
 2920              	 .cfi_def_cfa_offset 40
 2921 0004 00AF     	 add r7,sp,#0
 2922              	.LCFI156:
 2923              	 .cfi_def_cfa_register 7
 2924 0006 F860     	 str r0,[r7,#12]
 2925 0008 B960     	 str r1,[r7,#8]
 2926 000a 7A60     	 str r2,[r7,#4]
1113:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatSectorIndex, fatSectorEntryIndex;
1114:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFATSector_t sector;
1115:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1116:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_getFATPositionForCluster(cluster, &fatSectorIndex, &fatSectorEntryIndex);
 2927              	 .loc 1 1116 0
 2928 000c 07F11802 	 add r2,r7,#24
 2929 0010 07F11403 	 add r3,r7,#20
 2930 0014 B868     	 ldr r0,[r7,#8]
 2931 0016 1146     	 mov r1,r2
 2932 0018 1A46     	 mov r2,r3
 2933 001a FFF7FEFF 	 bl afatfs_getFATPositionForCluster
1117:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1118:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e result = afatfs_cacheSector(afatfs_fatSectorToPhysical(fatIndex, fatSec
 2934              	 .loc 1 1118 0
 2935 001e BB69     	 ldr r3,[r7,#24]
 2936 0020 F868     	 ldr r0,[r7,#12]
 2937 0022 1946     	 mov r1,r3
 2938 0024 FFF7FEFF 	 bl afatfs_fatSectorToPhysical
 2939 0028 0246     	 mov r2,r0
 2940 002a 07F11003 	 add r3,r7,#16
 2941 002e 1046     	 mov r0,r2
 2942 0030 1946     	 mov r1,r3
 2943 0032 0122     	 movs r2,#1
 2944 0034 0023     	 movs r3,#0
 2945 0036 FFF7FEFF 	 bl afatfs_cacheSector
 2946 003a 0346     	 mov r3,r0
 2947 003c FB77     	 strb r3,[r7,#31]
1119:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1120:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (result == AFATFS_OPERATION_SUCCESS) {
 2948              	 .loc 1 1120 0
 2949 003e FB7F     	 ldrb r3,[r7,#31]
 2950 0040 012B     	 cmp r3,#1
 2951 0042 17D1     	 bne .L203
1121:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT16) {
 2952              	 .loc 1 1121 0
 2953 0044 0E4B     	 ldr r3,.L206
 2954 0046 1B78     	 ldrb r3,[r3]
 2955 0048 022B     	 cmp r3,#2
 2956 004a 08D1     	 bne .L204
1122:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             *nextCluster = sector.fat16[fatSectorEntryIndex];
 2957              	 .loc 1 1122 0
 2958 004c 3A69     	 ldr r2,[r7,#16]
 2959 004e 7B69     	 ldr r3,[r7,#20]
 2960 0050 5B00     	 lsls r3,r3,#1
 2961 0052 1344     	 add r3,r3,r2
 2962 0054 1B88     	 ldrh r3,[r3]
 2963 0056 1A46     	 mov r2,r3
 2964 0058 7B68     	 ldr r3,[r7,#4]
 2965 005a 1A60     	 str r2,[r3]
 2966 005c 0AE0     	 b .L203
 2967              	.L204:
1123:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
1124:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             *nextCluster = fat32_decodeClusterNumber(sector.fat32[fatSectorEntryIndex]);
 2968              	 .loc 1 1124 0
 2969 005e 3A69     	 ldr r2,[r7,#16]
 2970 0060 7B69     	 ldr r3,[r7,#20]
 2971 0062 9B00     	 lsls r3,r3,#2
 2972 0064 1344     	 add r3,r3,r2
 2973 0066 1B68     	 ldr r3,[r3]
 2974 0068 1846     	 mov r0,r3
 2975 006a FFF7FEFF 	 bl fat32_decodeClusterNumber
 2976 006e 0246     	 mov r2,r0
 2977 0070 7B68     	 ldr r3,[r7,#4]
 2978 0072 1A60     	 str r2,[r3]
 2979              	.L203:
1125:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1126:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1127:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1128:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return result;
 2980              	 .loc 1 1128 0
 2981 0074 FB7F     	 ldrb r3,[r7,#31]
1129:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 2982              	 .loc 1 1129 0
 2983 0076 1846     	 mov r0,r3
 2984 0078 2037     	 adds r7,r7,#32
 2985              	.LCFI157:
 2986              	 .cfi_def_cfa_offset 8
 2987 007a BD46     	 mov sp,r7
 2988              	.LCFI158:
 2989              	 .cfi_def_cfa_register 13
 2990              	 
 2991 007c 80BD     	 pop {r7,pc}
 2992              	.L207:
 2993 007e 00BF     	 .align 2
 2994              	.L206:
 2995 0080 00000000 	 .word afatfs
 2996              	 .cfi_endproc
 2997              	.LFE560:
 2999              	 .section .text.afatfs_FATSetNextCluster,"ax",%progbits
 3000              	 .align 2
 3001              	 .thumb
 3002              	 .thumb_func
 3004              	afatfs_FATSetNextCluster:
 3005              	.LFB561:
1130:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1131:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1132:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Set the cluster number that follows the given cluster. Pass 0xFFFFFFFF for nextCluster to termin
1133:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1134:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
1135:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - On success
1136:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - Card is busy, call again later
1137:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE     - When the filesystem encounters a fatal error
1138:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1139:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_FATSetNextCluster(uint32_t startCluster, uint32_t nextCluster
1140:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 3006              	 .loc 1 1140 0
 3007              	 .cfi_startproc
 3008              	 
 3009              	 
 3010 0000 80B5     	 push {r7,lr}
 3011              	.LCFI159:
 3012              	 .cfi_def_cfa_offset 8
 3013              	 .cfi_offset 7,-8
 3014              	 .cfi_offset 14,-4
 3015 0002 88B0     	 sub sp,sp,#32
 3016              	.LCFI160:
 3017              	 .cfi_def_cfa_offset 40
 3018 0004 00AF     	 add r7,sp,#0
 3019              	.LCFI161:
 3020              	 .cfi_def_cfa_register 7
 3021 0006 7860     	 str r0,[r7,#4]
 3022 0008 3960     	 str r1,[r7]
1141:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFATSector_t sector;
1142:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatSectorIndex, fatSectorEntryIndex, fatPhysicalSector;
1143:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e result;
1144:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1145:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_DEBUG
1146:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_assert(startCluster >= FAT_SMALLEST_LEGAL_CLUSTER_NUMBER);
1147:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
1148:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1149:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_getFATPositionForCluster(startCluster, &fatSectorIndex, &fatSectorEntryIndex);
 3023              	 .loc 1 1149 0
 3024 000a 07F11002 	 add r2,r7,#16
 3025 000e 07F10C03 	 add r3,r7,#12
 3026 0012 7868     	 ldr r0,[r7,#4]
 3027 0014 1146     	 mov r1,r2
 3028 0016 1A46     	 mov r2,r3
 3029 0018 FFF7FEFF 	 bl afatfs_getFATPositionForCluster
1150:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1151:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     fatPhysicalSector = afatfs_fatSectorToPhysical(0, fatSectorIndex);
 3030              	 .loc 1 1151 0
 3031 001c 3B69     	 ldr r3,[r7,#16]
 3032 001e 0020     	 movs r0,#0
 3033 0020 1946     	 mov r1,r3
 3034 0022 FFF7FEFF 	 bl afatfs_fatSectorToPhysical
 3035 0026 F861     	 str r0,[r7,#28]
1152:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1153:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     result = afatfs_cacheSector(fatPhysicalSector, &sector.bytes, AFATFS_CACHE_READ | AFATFS_CACHE_
 3036              	 .loc 1 1153 0
 3037 0028 07F11403 	 add r3,r7,#20
 3038 002c F869     	 ldr r0,[r7,#28]
 3039 002e 1946     	 mov r1,r3
 3040 0030 0322     	 movs r2,#3
 3041 0032 0023     	 movs r3,#0
 3042 0034 FFF7FEFF 	 bl afatfs_cacheSector
 3043 0038 0346     	 mov r3,r0
 3044 003a FB76     	 strb r3,[r7,#27]
1154:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1155:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (result == AFATFS_OPERATION_SUCCESS) {
 3045              	 .loc 1 1155 0
 3046 003c FB7E     	 ldrb r3,[r7,#27]
 3047 003e 012B     	 cmp r3,#1
 3048 0040 11D1     	 bne .L209
1156:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT16) {
 3049              	 .loc 1 1156 0
 3050 0042 0B4B     	 ldr r3,.L212
 3051 0044 1B78     	 ldrb r3,[r3]
 3052 0046 022B     	 cmp r3,#2
 3053 0048 07D1     	 bne .L210
1157:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             sector.fat16[fatSectorEntryIndex] = nextCluster;
 3054              	 .loc 1 1157 0
 3055 004a 7A69     	 ldr r2,[r7,#20]
 3056 004c FB68     	 ldr r3,[r7,#12]
 3057 004e 5B00     	 lsls r3,r3,#1
 3058 0050 1344     	 add r3,r3,r2
 3059 0052 3A68     	 ldr r2,[r7]
 3060 0054 92B2     	 uxth r2,r2
 3061 0056 1A80     	 strh r2,[r3]
 3062 0058 05E0     	 b .L209
 3063              	.L210:
1158:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
1159:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             sector.fat32[fatSectorEntryIndex] = nextCluster;
 3064              	 .loc 1 1159 0
 3065 005a 7A69     	 ldr r2,[r7,#20]
 3066 005c FB68     	 ldr r3,[r7,#12]
 3067 005e 9B00     	 lsls r3,r3,#2
 3068 0060 1344     	 add r3,r3,r2
 3069 0062 3A68     	 ldr r2,[r7]
 3070 0064 1A60     	 str r2,[r3]
 3071              	.L209:
1160:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1161:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1162:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1163:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return result;
 3072              	 .loc 1 1163 0
 3073 0066 FB7E     	 ldrb r3,[r7,#27]
1164:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 3074              	 .loc 1 1164 0
 3075 0068 1846     	 mov r0,r3
 3076 006a 2037     	 adds r7,r7,#32
 3077              	.LCFI162:
 3078              	 .cfi_def_cfa_offset 8
 3079 006c BD46     	 mov sp,r7
 3080              	.LCFI163:
 3081              	 .cfi_def_cfa_register 13
 3082              	 
 3083 006e 80BD     	 pop {r7,pc}
 3084              	.L213:
 3085              	 .align 2
 3086              	.L212:
 3087 0070 00000000 	 .word afatfs
 3088              	 .cfi_endproc
 3089              	.LFE561:
 3091              	 .section .text.afatfs_fileUpdateFilesize,"ax",%progbits
 3092              	 .align 2
 3093              	 .thumb
 3094              	 .thumb_func
 3096              	afatfs_fileUpdateFilesize:
 3097              	.LFB562:
1165:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1166:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1167:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Bring the logical filesize up to date with the current cursor position.
1168:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1169:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_fileUpdateFilesize(afatfsFile_t *file)
1170:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 3098              	 .loc 1 1170 0
 3099              	 .cfi_startproc
 3100              	 
 3101              	 
 3102              	 
 3103 0000 80B4     	 push {r7}
 3104              	.LCFI164:
 3105              	 .cfi_def_cfa_offset 4
 3106              	 .cfi_offset 7,-4
 3107 0002 85B0     	 sub sp,sp,#20
 3108              	.LCFI165:
 3109              	 .cfi_def_cfa_offset 24
 3110 0004 00AF     	 add r7,sp,#0
 3111              	.LCFI166:
 3112              	 .cfi_def_cfa_register 7
 3113 0006 7860     	 str r0,[r7,#4]
 3114              	.LBB13:
1171:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->logicalSize = MAX(file->logicalSize, file->cursorOffset);
 3115              	 .loc 1 1171 0
 3116 0008 7B68     	 ldr r3,[r7,#4]
 3117 000a D3F80530 	 ldr r3,[r3,#5]
 3118 000e FB60     	 str r3,[r7,#12]
 3119 0010 7B68     	 ldr r3,[r7,#4]
 3120 0012 D3F80130 	 ldr r3,[r3,#1]
 3121 0016 BB60     	 str r3,[r7,#8]
 3122 0018 BA68     	 ldr r2,[r7,#8]
 3123 001a FB68     	 ldr r3,[r7,#12]
 3124 001c 9A42     	 cmp r2,r3
 3125 001e 38BF     	 it cc
 3126 0020 1A46     	 movcc r2,r3
 3127              	.LBE13:
 3128 0022 7B68     	 ldr r3,[r7,#4]
 3129 0024 C3F80520 	 str r2,[r3,#5]
1172:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 3130              	 .loc 1 1172 0
 3131 0028 1437     	 adds r7,r7,#20
 3132              	.LCFI167:
 3133              	 .cfi_def_cfa_offset 4
 3134 002a BD46     	 mov sp,r7
 3135              	.LCFI168:
 3136              	 .cfi_def_cfa_register 13
 3137              	 
 3138 002c 5DF8047B 	 ldr r7,[sp],#4
 3139              	.LCFI169:
 3140              	 .cfi_restore 7
 3141              	 .cfi_def_cfa_offset 0
 3142 0030 7047     	 bx lr
 3143              	 .cfi_endproc
 3144              	.LFE562:
 3146 0032 00BF     	 .section .text.afatfs_fileUnlockCacheSector,"ax",%progbits
 3147              	 .align 2
 3148              	 .thumb
 3149              	 .thumb_func
 3151              	afatfs_fileUnlockCacheSector:
 3152              	.LFB563:
1173:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1174:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_fileUnlockCacheSector(afatfsFilePtr_t file)
1175:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 3153              	 .loc 1 1175 0
 3154              	 .cfi_startproc
 3155              	 
 3156              	 
 3157              	 
 3158 0000 80B4     	 push {r7}
 3159              	.LCFI170:
 3160              	 .cfi_def_cfa_offset 4
 3161              	 .cfi_offset 7,-4
 3162 0002 85B0     	 sub sp,sp,#20
 3163              	.LCFI171:
 3164              	 .cfi_def_cfa_offset 24
 3165 0004 00AF     	 add r7,sp,#0
 3166              	.LCFI172:
 3167              	 .cfi_def_cfa_register 7
 3168 0006 7860     	 str r0,[r7,#4]
1176:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->writeLockedCacheIndex != -1) {
 3169              	 .loc 1 1176 0
 3170 0008 7B68     	 ldr r3,[r7,#4]
 3171 000a DB7D     	 ldrb r3,[r3,#23]
 3172 000c 5BB2     	 sxtb r3,r3
 3173 000e B3F1FF3F 	 cmp r3,#-1
 3174 0012 0FD0     	 beq .L216
1177:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.cacheDescriptor[file->writeLockedCacheIndex].locked = 0;
 3175              	 .loc 1 1177 0
 3176 0014 7B68     	 ldr r3,[r7,#4]
 3177 0016 DB7D     	 ldrb r3,[r3,#23]
 3178 0018 5BB2     	 sxtb r3,r3
 3179 001a 214A     	 ldr r2,.L218
 3180 001c 1B01     	 lsls r3,r3,#4
 3181 001e 1344     	 add r3,r3,r2
 3182 0020 03F58053 	 add r3,r3,#4096
 3183 0024 1833     	 adds r3,r3,#24
 3184 0026 DA7A     	 ldrb r2,[r3,#11]
 3185 0028 6FF30002 	 bfc r2,#0,#1
 3186 002c DA72     	 strb r2,[r3,#11]
1178:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->writeLockedCacheIndex = -1;
 3187              	 .loc 1 1178 0
 3188 002e 7B68     	 ldr r3,[r7,#4]
 3189 0030 FF22     	 movs r2,#255
 3190 0032 DA75     	 strb r2,[r3,#23]
 3191              	.L216:
1179:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1180:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->readRetainCacheIndex != -1) {
 3192              	 .loc 1 1180 0
 3193 0034 7B68     	 ldr r3,[r7,#4]
 3194 0036 1B7E     	 ldrb r3,[r3,#24]
 3195 0038 5BB2     	 sxtb r3,r3
 3196 003a B3F1FF3F 	 cmp r3,#-1
 3197 003e 29D0     	 beq .L215
1181:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.cacheDescriptor[file->readRetainCacheIndex].retainCount = MAX((int) afatfs.cacheDesc
 3198              	 .loc 1 1181 0
 3199 0040 7B68     	 ldr r3,[r7,#4]
 3200 0042 1B7E     	 ldrb r3,[r3,#24]
 3201 0044 5AB2     	 sxtb r2,r3
 3202              	.LBB14:
 3203 0046 7B68     	 ldr r3,[r7,#4]
 3204 0048 1B7E     	 ldrb r3,[r3,#24]
 3205 004a 5BB2     	 sxtb r3,r3
 3206 004c 1449     	 ldr r1,.L218
 3207 004e 1B01     	 lsls r3,r3,#4
 3208 0050 0B44     	 add r3,r3,r1
 3209 0052 03F58053 	 add r3,r3,#4096
 3210 0056 1833     	 adds r3,r3,#24
 3211 0058 DB7A     	 ldrb r3,[r3,#11]
 3212 005a C3F34503 	 ubfx r3,r3,#1,#6
 3213 005e DBB2     	 uxtb r3,r3
 3214 0060 013B     	 subs r3,r3,#1
 3215 0062 FB60     	 str r3,[r7,#12]
 3216 0064 0023     	 movs r3,#0
 3217 0066 BB60     	 str r3,[r7,#8]
 3218 0068 B968     	 ldr r1,[r7,#8]
 3219 006a FB68     	 ldr r3,[r7,#12]
 3220 006c 8B42     	 cmp r3,r1
 3221 006e B8BF     	 it lt
 3222 0070 0B46     	 movlt r3,r1
 3223              	.LBE14:
 3224 0072 DBB2     	 uxtb r3,r3
 3225 0074 03F03F03 	 and r3,r3,#63
 3226 0078 D9B2     	 uxtb r1,r3
 3227 007a 0948     	 ldr r0,.L218
 3228 007c 1301     	 lsls r3,r2,#4
 3229 007e 0344     	 add r3,r3,r0
 3230 0080 03F58053 	 add r3,r3,#4096
 3231 0084 1833     	 adds r3,r3,#24
 3232 0086 DA7A     	 ldrb r2,[r3,#11]
 3233 0088 61F34602 	 bfi r2,r1,#1,#6
 3234 008c DA72     	 strb r2,[r3,#11]
1182:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->readRetainCacheIndex = -1;
 3235              	 .loc 1 1182 0
 3236 008e 7B68     	 ldr r3,[r7,#4]
 3237 0090 FF22     	 movs r2,#255
 3238 0092 1A76     	 strb r2,[r3,#24]
 3239              	.L215:
1183:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1184:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 3240              	 .loc 1 1184 0
 3241 0094 1437     	 adds r7,r7,#20
 3242              	.LCFI173:
 3243              	 .cfi_def_cfa_offset 4
 3244 0096 BD46     	 mov sp,r7
 3245              	.LCFI174:
 3246              	 .cfi_def_cfa_register 13
 3247              	 
 3248 0098 5DF8047B 	 ldr r7,[sp],#4
 3249              	.LCFI175:
 3250              	 .cfi_restore 7
 3251              	 .cfi_def_cfa_offset 0
 3252 009c 7047     	 bx lr
 3253              	.L219:
 3254 009e 00BF     	 .align 2
 3255              	.L218:
 3256 00a0 00000000 	 .word afatfs
 3257              	 .cfi_endproc
 3258              	.LFE563:
 3260              	 .section .text.afatfs_findClusterWithCondition,"ax",%progbits
 3261              	 .align 2
 3262              	 .thumb
 3263              	 .thumb_func
 3265              	afatfs_findClusterWithCondition:
 3266              	.LFB564:
1185:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1186:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1187:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Starting from and including the given cluster number, find the number of the first cluster which
1188:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * condition.
1189:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1190:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * searchLimit - Last cluster to examine (exclusive). To search the entire volume, pass:
1191:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                   afatfs.numClusters + FAT_SMALLEST_LEGAL_CLUSTER_NUMBER
1192:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1193:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Condition:
1194:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     CLUSTER_SEARCH_FREE_AT_BEGINNING_OF_FAT_SECTOR - Find a cluster marked as free in the FAT wh
1195:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *         beginning of its FAT sector. The passed initial search 'cluster' must correspond to the 
1196:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     CLUSTER_SEARCH_FREE            - Find a cluster marked as free in the FAT
1197:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     CLUSTER_SEARCH_OCCUPIED        - Find a cluster marked as occupied in the FAT.
1198:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1199:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
1200:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_FIND_CLUSTER_FOUND       - A cluster matching the criteria was found and stored in *c
1201:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_FIND_CLUSTER_IN_PROGRESS - The search is not over, call this routine again later with
1202:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_FIND_CLUSTER_FATAL       - An unexpected read error occurred, the volume should be ab
1203:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_FIND_CLUSTER_NOT_FOUND   - The entire device was searched without finding a suitable 
1204:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                                       *cluster points to just beyond the final cluster).
1205:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1206:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsFindClusterStatus_e afatfs_findClusterWithCondition(afatfsClusterSearchCondition_e con
1207:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 3267              	 .loc 1 1207 0
 3268              	 .cfi_startproc
 3269              	 
 3270              	 
 3271 0000 90B5     	 push {r4,r7,lr}
 3272              	.LCFI176:
 3273              	 .cfi_def_cfa_offset 12
 3274              	 .cfi_offset 4,-12
 3275              	 .cfi_offset 7,-8
 3276              	 .cfi_offset 14,-4
 3277 0002 8DB0     	 sub sp,sp,#52
 3278              	.LCFI177:
 3279              	 .cfi_def_cfa_offset 64
 3280 0004 00AF     	 add r7,sp,#0
 3281              	.LCFI178:
 3282              	 .cfi_def_cfa_register 7
 3283 0006 0346     	 mov r3,r0
 3284 0008 B960     	 str r1,[r7,#8]
 3285 000a 7A60     	 str r2,[r7,#4]
 3286 000c FB73     	 strb r3,[r7,#15]
1208:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFATSector_t sector;
1209:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatSectorIndex, fatSectorEntryIndex;
1210:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1211:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatEntriesPerSector = afatfs_fatEntriesPerSector();
 3287              	 .loc 1 1211 0
 3288 000e FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 3289 0012 7862     	 str r0,[r7,#36]
1212:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     bool lookingForFree = condition == CLUSTER_SEARCH_FREE_AT_BEGINNING_OF_FAT_SECTOR || condition 
 3290              	 .loc 1 1212 0
 3291 0014 FB7B     	 ldrb r3,[r7,#15]
 3292 0016 002B     	 cmp r3,#0
 3293 0018 02D0     	 beq .L221
 3294              	 .loc 1 1212 0 is_stmt 0 discriminator 2
 3295 001a FB7B     	 ldrb r3,[r7,#15]
 3296 001c 012B     	 cmp r3,#1
 3297 001e 01D1     	 bne .L222
 3298              	.L221:
 3299              	 .loc 1 1212 0 discriminator 3
 3300 0020 0123     	 movs r3,#1
 3301 0022 00E0     	 b .L223
 3302              	.L222:
 3303              	 .loc 1 1212 0 discriminator 4
 3304 0024 0023     	 movs r3,#0
 3305              	.L223:
 3306              	 .loc 1 1212 0 discriminator 6
 3307 0026 87F82330 	 strb r3,[r7,#35]
 3308 002a 97F82330 	 ldrb r3,[r7,#35]
 3309 002e 03F00103 	 and r3,r3,#1
 3310 0032 87F82330 	 strb r3,[r7,#35]
1213:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1214:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int jump;
1215:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1216:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Get the FAT entry which corresponds to this cluster so we can begin our search there
1217:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_getFATPositionForCluster(*cluster, &fatSectorIndex, &fatSectorEntryIndex);
 3311              	 .loc 1 1217 0 is_stmt 1 discriminator 6
 3312 0036 BB68     	 ldr r3,[r7,#8]
 3313 0038 1968     	 ldr r1,[r3]
 3314 003a 07F11802 	 add r2,r7,#24
 3315 003e 07F11403 	 add r3,r7,#20
 3316 0042 0846     	 mov r0,r1
 3317 0044 1146     	 mov r1,r2
 3318 0046 1A46     	 mov r2,r3
 3319 0048 FFF7FEFF 	 bl afatfs_getFATPositionForCluster
1218:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1219:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (condition) {
 3320              	 .loc 1 1219 0 discriminator 6
 3321 004c FB7B     	 ldrb r3,[r7,#15]
 3322 004e 002B     	 cmp r3,#0
 3323 0050 04D0     	 beq .L225
 3324 0052 002B     	 cmp r3,#0
 3325 0054 19DB     	 blt .L224
 3326 0056 022B     	 cmp r3,#2
 3327 0058 17DC     	 bgt .L224
 3328              	 .loc 1 1219 0 is_stmt 0
 3329 005a 13E0     	 b .L243
 3330              	.L225:
1220:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case CLUSTER_SEARCH_FREE_AT_BEGINNING_OF_FAT_SECTOR:
1221:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             jump = fatEntriesPerSector;
 3331              	 .loc 1 1221 0 is_stmt 1
 3332 005c 7B6A     	 ldr r3,[r7,#36]
 3333 005e FB62     	 str r3,[r7,#44]
1222:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1223:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // We're supposed to call this routine with the cluster properly aligned
1224:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (!afatfs_assert(fatSectorEntryIndex == 0)) {
 3334              	 .loc 1 1224 0
 3335 0060 7B69     	 ldr r3,[r7,#20]
 3336 0062 002B     	 cmp r3,#0
 3337 0064 0CBF     	 ite eq
 3338 0066 0123     	 moveq r3,#1
 3339 0068 0023     	 movne r3,#0
 3340 006a DBB2     	 uxtb r3,r3
 3341 006c 1846     	 mov r0,r3
 3342 006e FFF7FEFF 	 bl afatfs_assert
 3343 0072 0346     	 mov r3,r0
 3344 0074 83F00103 	 eor r3,r3,#1
 3345 0078 DBB2     	 uxtb r3,r3
 3346 007a 002B     	 cmp r3,#0
 3347 007c 01D0     	 beq .L227
1225:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 return AFATFS_FIND_CLUSTER_FATAL;
 3348              	 .loc 1 1225 0
 3349 007e 0223     	 movs r3,#2
 3350 0080 A3E0     	 b .L242
 3351              	.L227:
1226:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1227:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 3352              	 .loc 1 1227 0
 3353 0082 07E0     	 b .L229
 3354              	.L243:
1228:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case CLUSTER_SEARCH_OCCUPIED:
1229:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case CLUSTER_SEARCH_FREE:
1230:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             jump = 1;
 3355              	 .loc 1 1230 0
 3356 0084 0123     	 movs r3,#1
 3357 0086 FB62     	 str r3,[r7,#44]
1231:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 3358              	 .loc 1 1231 0
 3359 0088 04E0     	 b .L229
 3360              	.L224:
1232:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         default:
1233:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_assert(false);
 3361              	 .loc 1 1233 0
 3362 008a 0020     	 movs r0,#0
 3363 008c FFF7FEFF 	 bl afatfs_assert
1234:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_FIND_CLUSTER_FATAL;
 3364              	 .loc 1 1234 0
 3365 0090 0223     	 movs r3,#2
 3366 0092 9AE0     	 b .L242
 3367              	.L229:
1235:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1236:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1237:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     while (*cluster < searchLimit) {
 3368              	 .loc 1 1237 0 discriminator 1
 3369 0094 8FE0     	 b .L230
 3370              	.L241:
 3371              	.LBB15:
1238:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1239:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
1240:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // If we're looking inside the freefile, we won't find any free clusters! Skip it!
1241:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.freeFile.logicalSize > 0 && *cluster == afatfs.freeFile.firstCluster) {
 3372              	 .loc 1 1241 0
 3373 0096 4F4B     	 ldr r3,.L245
 3374 0098 03F58A53 	 add r3,r3,#4416
 3375 009c 0D33     	 adds r3,r3,#13
 3376 009e 1B68     	 ldr r3,[r3]
 3377 00a0 002B     	 cmp r3,#0
 3378 00a2 27D0     	 beq .L231
 3379              	 .loc 1 1241 0 is_stmt 0 discriminator 1
 3380 00a4 BB68     	 ldr r3,[r7,#8]
 3381 00a6 1A68     	 ldr r2,[r3]
 3382 00a8 4A4B     	 ldr r3,.L245
 3383 00aa 03F58B53 	 add r3,r3,#4448
 3384 00ae 0733     	 adds r3,r3,#7
 3385 00b0 1B68     	 ldr r3,[r3]
 3386 00b2 9A42     	 cmp r2,r3
 3387 00b4 1ED1     	 bne .L231
1242:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             *cluster += (afatfs.freeFile.logicalSize + afatfs_clusterSize() - 1) / afatfs_clusterSi
 3388              	 .loc 1 1242 0 is_stmt 1
 3389 00b6 474B     	 ldr r3,.L245
 3390 00b8 03F58A53 	 add r3,r3,#4416
 3391 00bc 0D33     	 adds r3,r3,#13
 3392 00be 1C68     	 ldr r4,[r3]
 3393 00c0 FFF7FEFF 	 bl afatfs_clusterSize
 3394 00c4 0346     	 mov r3,r0
 3395 00c6 2344     	 add r3,r3,r4
 3396 00c8 5C1E     	 subs r4,r3,#1
 3397 00ca FFF7FEFF 	 bl afatfs_clusterSize
 3398 00ce 0346     	 mov r3,r0
 3399 00d0 B4FBF3F3 	 udiv r3,r4,r3
 3400 00d4 BA68     	 ldr r2,[r7,#8]
 3401 00d6 1268     	 ldr r2,[r2]
 3402 00d8 1A44     	 add r2,r2,r3
 3403 00da BB68     	 ldr r3,[r7,#8]
 3404 00dc 1A60     	 str r2,[r3]
1243:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1244:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Maintain alignment
1245:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             *cluster = roundUpTo(*cluster, jump);
 3405              	 .loc 1 1245 0
 3406 00de BB68     	 ldr r3,[r7,#8]
 3407 00e0 1A68     	 ldr r2,[r3]
 3408 00e2 FB6A     	 ldr r3,[r7,#44]
 3409 00e4 1046     	 mov r0,r2
 3410 00e6 1946     	 mov r1,r3
 3411 00e8 FFF7FEFF 	 bl roundUpTo
 3412 00ec 0246     	 mov r2,r0
 3413 00ee BB68     	 ldr r3,[r7,#8]
 3414 00f0 1A60     	 str r2,[r3]
1246:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             continue; // Go back to check that the new cluster number is within the volume
 3415              	 .loc 1 1246 0
 3416 00f2 60E0     	 b .L230
 3417              	.L231:
1247:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1248:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
1249:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1250:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsOperationStatus_e status = afatfs_cacheSector(afatfs_fatSectorToPhysical(0, fatSector
 3418              	 .loc 1 1250 0
 3419 00f4 BB69     	 ldr r3,[r7,#24]
 3420 00f6 0020     	 movs r0,#0
 3421 00f8 1946     	 mov r1,r3
 3422 00fa FFF7FEFF 	 bl afatfs_fatSectorToPhysical
 3423 00fe 0246     	 mov r2,r0
 3424 0100 07F11C03 	 add r3,r7,#28
 3425 0104 1046     	 mov r0,r2
 3426 0106 1946     	 mov r1,r3
 3427 0108 0922     	 movs r2,#9
 3428 010a 0023     	 movs r3,#0
 3429 010c FFF7FEFF 	 bl afatfs_cacheSector
 3430 0110 0346     	 mov r3,r0
 3431 0112 87F82230 	 strb r3,[r7,#34]
1251:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1252:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         switch (status) {
 3432              	 .loc 1 1252 0
 3433 0116 97F82230 	 ldrb r3,[r7,#34]
 3434 011a 012B     	 cmp r3,#1
 3435 011c 04D0     	 beq .L232
 3436 011e 022B     	 cmp r3,#2
 3437 0120 45D0     	 beq .L233
 3438 0122 002B     	 cmp r3,#0
 3439 0124 45D0     	 beq .L234
 3440 0126 46E0     	 b .L230
 3441              	.L232:
 3442              	.LBB16:
1253:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_OPERATION_SUCCESS:
1254:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 do {
1255:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     uint32_t clusterNumber;
1256:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1257:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     switch (afatfs.filesystemType) {
 3443              	 .loc 1 1257 0
 3444 0128 2A4B     	 ldr r3,.L245
 3445 012a 1B78     	 ldrb r3,[r3]
 3446 012c 022B     	 cmp r3,#2
 3447 012e 02D0     	 beq .L236
 3448 0130 032B     	 cmp r3,#3
 3449 0132 07D0     	 beq .L237
 3450 0134 10E0     	 b .L244
 3451              	.L236:
1258:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         case FAT_FILESYSTEM_TYPE_FAT16:
1259:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             clusterNumber = sector.fat16[fatSectorEntryIndex];
 3452              	 .loc 1 1259 0
 3453 0136 FA69     	 ldr r2,[r7,#28]
 3454 0138 7B69     	 ldr r3,[r7,#20]
 3455 013a 5B00     	 lsls r3,r3,#1
 3456 013c 1344     	 add r3,r3,r2
 3457 013e 1B88     	 ldrh r3,[r3]
 3458 0140 BB62     	 str r3,[r7,#40]
1260:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         break;
 3459              	 .loc 1 1260 0
 3460 0142 0BE0     	 b .L238
 3461              	.L237:
1261:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         case FAT_FILESYSTEM_TYPE_FAT32:
1262:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             clusterNumber = fat32_decodeClusterNumber(sector.fat32[fatSectorEntryIn
 3462              	 .loc 1 1262 0
 3463 0144 FA69     	 ldr r2,[r7,#28]
 3464 0146 7B69     	 ldr r3,[r7,#20]
 3465 0148 9B00     	 lsls r3,r3,#2
 3466 014a 1344     	 add r3,r3,r2
 3467 014c 1B68     	 ldr r3,[r3]
 3468 014e 1846     	 mov r0,r3
 3469 0150 FFF7FEFF 	 bl fat32_decodeClusterNumber
 3470 0154 B862     	 str r0,[r7,#40]
1263:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         break;
 3471              	 .loc 1 1263 0
 3472 0156 01E0     	 b .L238
 3473              	.L244:
1264:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         default:
1265:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             return AFATFS_FIND_CLUSTER_FATAL;
 3474              	 .loc 1 1265 0
 3475 0158 0223     	 movs r3,#2
 3476 015a 36E0     	 b .L242
 3477              	.L238:
1266:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     }
1267:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1268:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     if (fat_isFreeSpace(clusterNumber) == lookingForFree) {
 3478              	 .loc 1 1268 0
 3479 015c B86A     	 ldr r0,[r7,#40]
 3480 015e FFF7FEFF 	 bl fat_isFreeSpace
 3481 0162 0346     	 mov r3,r0
 3482 0164 1A46     	 mov r2,r3
 3483 0166 97F82330 	 ldrb r3,[r7,#35]
 3484 016a 9342     	 cmp r3,r2
 3485 016c 0BD1     	 bne .L239
1269:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         /*
1270:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                          * The final FAT sector may have fewer than fatEntriesPerSector entries in 
1271:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                          * check the cluster number is valid here before we report a bogus success!
1272:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                          */
1273:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         if (*cluster < searchLimit) {
 3486              	 .loc 1 1273 0
 3487 016e BB68     	 ldr r3,[r7,#8]
 3488 0170 1A68     	 ldr r2,[r3]
 3489 0172 7B68     	 ldr r3,[r7,#4]
 3490 0174 9A42     	 cmp r2,r3
 3491 0176 01D2     	 bcs .L240
1274:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             return AFATFS_FIND_CLUSTER_FOUND;
 3492              	 .loc 1 1274 0
 3493 0178 0123     	 movs r3,#1
 3494 017a 26E0     	 b .L242
 3495              	.L240:
1275:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         } else {
1276:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             *cluster = searchLimit;
 3496              	 .loc 1 1276 0
 3497 017c BB68     	 ldr r3,[r7,#8]
 3498 017e 7A68     	 ldr r2,[r7,#4]
 3499 0180 1A60     	 str r2,[r3]
1277:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             return AFATFS_FIND_CLUSTER_NOT_FOUND;
 3500              	 .loc 1 1277 0
 3501 0182 0323     	 movs r3,#3
 3502 0184 21E0     	 b .L242
 3503              	.L239:
1278:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         }
1279:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     }
1280:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1281:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     (*cluster) += jump;
 3504              	 .loc 1 1281 0
 3505 0186 BB68     	 ldr r3,[r7,#8]
 3506 0188 1A68     	 ldr r2,[r3]
 3507 018a FB6A     	 ldr r3,[r7,#44]
 3508 018c 1A44     	 add r2,r2,r3
 3509 018e BB68     	 ldr r3,[r7,#8]
 3510 0190 1A60     	 str r2,[r3]
1282:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     fatSectorEntryIndex += jump;
 3511              	 .loc 1 1282 0
 3512 0192 7A69     	 ldr r2,[r7,#20]
 3513 0194 FB6A     	 ldr r3,[r7,#44]
 3514 0196 1344     	 add r3,r3,r2
 3515 0198 7B61     	 str r3,[r7,#20]
 3516              	.LBE16:
1283:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 } while (fatSectorEntryIndex < fatEntriesPerSector);
 3517              	 .loc 1 1283 0
 3518 019a 7A69     	 ldr r2,[r7,#20]
 3519 019c 7B6A     	 ldr r3,[r7,#36]
 3520 019e 9A42     	 cmp r2,r3
 3521 01a0 C2D3     	 bcc .L232
1284:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1285:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Move on to the next FAT sector
1286:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 fatSectorIndex++;
 3522              	 .loc 1 1286 0
 3523 01a2 BB69     	 ldr r3,[r7,#24]
 3524 01a4 0133     	 adds r3,r3,#1
 3525 01a6 BB61     	 str r3,[r7,#24]
1287:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 fatSectorEntryIndex = 0;
 3526              	 .loc 1 1287 0
 3527 01a8 0023     	 movs r3,#0
 3528 01aa 7B61     	 str r3,[r7,#20]
1288:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 3529              	 .loc 1 1288 0
 3530 01ac 03E0     	 b .L230
 3531              	.L233:
1289:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_OPERATION_FAILURE:
1290:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 return AFATFS_FIND_CLUSTER_FATAL;
 3532              	 .loc 1 1290 0
 3533 01ae 0223     	 movs r3,#2
 3534 01b0 0BE0     	 b .L242
 3535              	.L234:
1291:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
1292:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_OPERATION_IN_PROGRESS:
1293:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 return AFATFS_FIND_CLUSTER_IN_PROGRESS;
 3536              	 .loc 1 1293 0
 3537 01b2 0023     	 movs r3,#0
 3538 01b4 09E0     	 b .L242
 3539              	.L230:
 3540              	.LBE15:
1237:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 3541              	 .loc 1 1237 0
 3542 01b6 BB68     	 ldr r3,[r7,#8]
 3543 01b8 1A68     	 ldr r2,[r3]
 3544 01ba 7B68     	 ldr r3,[r7,#4]
 3545 01bc 9A42     	 cmp r2,r3
 3546 01be FFF46AAF 	 bcc .L241
1294:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
1295:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1296:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1297:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1298:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // We looked at every available cluster and didn't find one matching the condition
1299:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     *cluster = searchLimit;
 3547              	 .loc 1 1299 0
 3548 01c2 BB68     	 ldr r3,[r7,#8]
 3549 01c4 7A68     	 ldr r2,[r7,#4]
 3550 01c6 1A60     	 str r2,[r3]
1300:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return AFATFS_FIND_CLUSTER_NOT_FOUND;
 3551              	 .loc 1 1300 0
 3552 01c8 0323     	 movs r3,#3
 3553              	.L242:
1301:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 3554              	 .loc 1 1301 0 discriminator 2
 3555 01ca 1846     	 mov r0,r3
 3556 01cc 3437     	 adds r7,r7,#52
 3557              	.LCFI179:
 3558              	 .cfi_def_cfa_offset 12
 3559 01ce BD46     	 mov sp,r7
 3560              	.LCFI180:
 3561              	 .cfi_def_cfa_register 13
 3562              	 
 3563 01d0 90BD     	 pop {r4,r7,pc}
 3564              	.L246:
 3565 01d2 00BF     	 .align 2
 3566              	.L245:
 3567 01d4 00000000 	 .word afatfs
 3568              	 .cfi_endproc
 3569              	.LFE564:
 3571              	 .section .text.afatfs_fileGetNextCluster,"ax",%progbits
 3572              	 .align 2
 3573              	 .thumb
 3574              	 .thumb_func
 3576              	afatfs_fileGetNextCluster:
 3577              	.LFB565:
1302:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1303:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1304:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Get the cluster that follows the currentCluster in the FAT chain for the given file.
1305:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1306:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
1307:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - FS is busy right now, call again later
1308:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - *nextCluster is set to the next cluster number
1309:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1310:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_fileGetNextCluster(afatfsFilePtr_t file, uint32_t currentClus
1311:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 3578              	 .loc 1 1311 0
 3579              	 .cfi_startproc
 3580              	 
 3581              	 
 3582 0000 80B5     	 push {r7,lr}
 3583              	.LCFI181:
 3584              	 .cfi_def_cfa_offset 8
 3585              	 .cfi_offset 7,-8
 3586              	 .cfi_offset 14,-4
 3587 0002 86B0     	 sub sp,sp,#24
 3588              	.LCFI182:
 3589              	 .cfi_def_cfa_offset 32
 3590 0004 00AF     	 add r7,sp,#0
 3591              	.LCFI183:
 3592              	 .cfi_def_cfa_register 7
 3593 0006 F860     	 str r0,[r7,#12]
 3594 0008 B960     	 str r1,[r7,#8]
 3595 000a 7A60     	 str r2,[r7,#4]
1312:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifndef AFATFS_USE_FREEFILE
1313:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     (void) file;
1314:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #else
1315:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if ((file->mode & AFATFS_FILE_MODE_CONTIGUOUS) != 0) {
 3596              	 .loc 1 1315 0
 3597 000c FB68     	 ldr r3,[r7,#12]
 3598 000e 5B7D     	 ldrb r3,[r3,#21]
 3599 0010 03F00803 	 and r3,r3,#8
 3600 0014 002B     	 cmp r3,#0
 3601 0016 1FD0     	 beq .L248
 3602              	.LBB17:
1316:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t freeFileStart = afatfs.freeFile.firstCluster;
 3603              	 .loc 1 1316 0
 3604 0018 144B     	 ldr r3,.L252
 3605 001a 03F58B53 	 add r3,r3,#4448
 3606 001e 0733     	 adds r3,r3,#7
 3607 0020 1B68     	 ldr r3,[r3]
 3608 0022 7B61     	 str r3,[r7,#20]
1317:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1318:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_assert(currentCluster + 1 <= freeFileStart);
 3609              	 .loc 1 1318 0
 3610 0024 BB68     	 ldr r3,[r7,#8]
 3611 0026 5A1C     	 adds r2,r3,#1
 3612 0028 7B69     	 ldr r3,[r7,#20]
 3613 002a 9A42     	 cmp r2,r3
 3614 002c 94BF     	 ite ls
 3615 002e 0123     	 movls r3,#1
 3616 0030 0023     	 movhi r3,#0
 3617 0032 DBB2     	 uxtb r3,r3
 3618 0034 1846     	 mov r0,r3
 3619 0036 FFF7FEFF 	 bl afatfs_assert
1319:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1320:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Would the next cluster lie outside the allocated file? (i.e. beyond the end of the file 
1321:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (currentCluster + 1 == freeFileStart) {
 3620              	 .loc 1 1321 0
 3621 003a BB68     	 ldr r3,[r7,#8]
 3622 003c 5A1C     	 adds r2,r3,#1
 3623 003e 7B69     	 ldr r3,[r7,#20]
 3624 0040 9A42     	 cmp r2,r3
 3625 0042 03D1     	 bne .L249
1322:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             *nextCluster = 0;
 3626              	 .loc 1 1322 0
 3627 0044 7B68     	 ldr r3,[r7,#4]
 3628 0046 0022     	 movs r2,#0
 3629 0048 1A60     	 str r2,[r3]
 3630 004a 03E0     	 b .L250
 3631              	.L249:
1323:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
1324:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             *nextCluster = currentCluster + 1;
 3632              	 .loc 1 1324 0
 3633 004c BB68     	 ldr r3,[r7,#8]
 3634 004e 5A1C     	 adds r2,r3,#1
 3635 0050 7B68     	 ldr r3,[r7,#4]
 3636 0052 1A60     	 str r2,[r3]
 3637              	.L250:
1325:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1326:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1327:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_SUCCESS;
 3638              	 .loc 1 1327 0
 3639 0054 0123     	 movs r3,#1
 3640 0056 05E0     	 b .L251
 3641              	.L248:
 3642              	.LBE17:
1328:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else
1329:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
1330:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     {
1331:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return afatfs_FATGetNextCluster(0, currentCluster, nextCluster);
 3643              	 .loc 1 1331 0
 3644 0058 0020     	 movs r0,#0
 3645 005a B968     	 ldr r1,[r7,#8]
 3646 005c 7A68     	 ldr r2,[r7,#4]
 3647 005e FFF7FEFF 	 bl afatfs_FATGetNextCluster
 3648 0062 0346     	 mov r3,r0
 3649              	.L251:
1332:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1333:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 3650              	 .loc 1 1333 0
 3651 0064 1846     	 mov r0,r3
 3652 0066 1837     	 adds r7,r7,#24
 3653              	.LCFI184:
 3654              	 .cfi_def_cfa_offset 8
 3655 0068 BD46     	 mov sp,r7
 3656              	.LCFI185:
 3657              	 .cfi_def_cfa_register 13
 3658              	 
 3659 006a 80BD     	 pop {r7,pc}
 3660              	.L253:
 3661              	 .align 2
 3662              	.L252:
 3663 006c 00000000 	 .word afatfs
 3664              	 .cfi_endproc
 3665              	.LFE565:
 3667              	 .section .text.afatfs_FATFillWithPattern,"ax",%progbits
 3668              	 .align 2
 3669              	 .thumb
 3670              	 .thumb_func
 3672              	afatfs_FATFillWithPattern:
 3673              	.LFB566:
1334:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1335:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
1336:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1337:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1338:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Update the FAT to fill the contiguous series of clusters with indexes [*startCluster...endCluste
1339:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * specified pattern.
1340:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1341:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * AFATFS_FAT_PATTERN_TERMINATED_CHAIN - Chain the clusters together in linear sequence and termina
1342:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * AFATFS_FAT_PATTERN_CHAIN            - Chain the clusters together without terminating the final 
1343:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * AFATFS_FAT_PATTERN_FREE             - Mark the clusters as free space
1344:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1345:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns -
1346:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS        - When the entire chain has been written
1347:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS    - Call again later with the updated *startCluster value in o
1348:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1349:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_FATFillWithPattern(afatfsFATPattern_e pattern, uint32_t *star
1350:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 3674              	 .loc 1 1350 0
 3675              	 .cfi_startproc
 3676              	 
 3677              	 
 3678 0000 90B5     	 push {r4,r7,lr}
 3679              	.LCFI186:
 3680              	 .cfi_def_cfa_offset 12
 3681              	 .cfi_offset 4,-12
 3682              	 .cfi_offset 7,-8
 3683              	 .cfi_offset 14,-4
 3684 0002 93B0     	 sub sp,sp,#76
 3685              	.LCFI187:
 3686              	 .cfi_def_cfa_offset 88
 3687 0004 00AF     	 add r7,sp,#0
 3688              	.LCFI188:
 3689              	 .cfi_def_cfa_register 7
 3690 0006 0346     	 mov r3,r0
 3691 0008 B960     	 str r1,[r7,#8]
 3692 000a 7A60     	 str r2,[r7,#4]
 3693 000c FB73     	 strb r3,[r7,#15]
1351:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFATSector_t sector;
1352:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatSectorIndex, firstEntryIndex, fatPhysicalSector;
1353:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t fatEntrySize;
1354:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t nextCluster;
1355:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e result;
1356:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t eraseSectorCount;
1357:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1358:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Find the position of the initial cluster to begin our fill
1359:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_getFATPositionForCluster(*startCluster, &fatSectorIndex, &firstEntryIndex);
 3694              	 .loc 1 1359 0
 3695 000e BB68     	 ldr r3,[r7,#8]
 3696 0010 1968     	 ldr r1,[r3]
 3697 0012 07F11802 	 add r2,r7,#24
 3698 0016 07F11403 	 add r3,r7,#20
 3699 001a 0846     	 mov r0,r1
 3700 001c 1146     	 mov r1,r2
 3701 001e 1A46     	 mov r2,r3
 3702 0020 FFF7FEFF 	 bl afatfs_getFATPositionForCluster
1360:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1361:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     fatPhysicalSector = afatfs_fatSectorToPhysical(0, fatSectorIndex);
 3703              	 .loc 1 1361 0
 3704 0024 BB69     	 ldr r3,[r7,#24]
 3705 0026 0020     	 movs r0,#0
 3706 0028 1946     	 mov r1,r3
 3707 002a FFF7FEFF 	 bl afatfs_fatSectorToPhysical
 3708 002e 7864     	 str r0,[r7,#68]
1362:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1363:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // How many consecutive FAT sectors will we be overwriting?
1364:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     eraseSectorCount = (endCluster - *startCluster + firstEntryIndex + afatfs_fatEntriesPerSector()
 3709              	 .loc 1 1364 0
 3710 0030 BB68     	 ldr r3,[r7,#8]
 3711 0032 1B68     	 ldr r3,[r3]
 3712 0034 7A68     	 ldr r2,[r7,#4]
 3713 0036 D21A     	 subs r2,r2,r3
 3714 0038 7B69     	 ldr r3,[r7,#20]
 3715 003a D418     	 adds r4,r2,r3
 3716 003c FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 3717 0040 0346     	 mov r3,r0
 3718 0042 2344     	 add r3,r3,r4
 3719 0044 5C1E     	 subs r4,r3,#1
 3720 0046 FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 3721 004a 0346     	 mov r3,r0
 3722 004c B4FBF3F3 	 udiv r3,r4,r3
 3723 0050 FB63     	 str r3,[r7,#60]
1365:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1366:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     while (*startCluster < endCluster) {
 3724              	 .loc 1 1366 0
 3725 0052 C6E0     	 b .L255
 3726              	.L274:
 3727              	.LBB18:
 3728              	.LBB19:
1367:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // The last entry we will fill inside this sector (exclusive):
1368:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t lastEntryIndex = MIN(firstEntryIndex + (endCluster - *startCluster), afatfs_fatEnt
 3729              	 .loc 1 1368 0
 3730 0054 BB68     	 ldr r3,[r7,#8]
 3731 0056 1B68     	 ldr r3,[r3]
 3732 0058 7A68     	 ldr r2,[r7,#4]
 3733 005a D21A     	 subs r2,r2,r3
 3734 005c 7B69     	 ldr r3,[r7,#20]
 3735 005e 1344     	 add r3,r3,r2
 3736 0060 FB62     	 str r3,[r7,#44]
 3737 0062 FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 3738 0066 B862     	 str r0,[r7,#40]
 3739 0068 BA6A     	 ldr r2,[r7,#40]
 3740 006a FB6A     	 ldr r3,[r7,#44]
 3741 006c 9342     	 cmp r3,r2
 3742 006e 28BF     	 it cs
 3743 0070 1346     	 movcs r3,r2
 3744              	.LBE19:
 3745 0072 7B62     	 str r3,[r7,#36]
1369:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1370:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint8_t cacheFlags = AFATFS_CACHE_WRITE | AFATFS_CACHE_DISCARDABLE;
 3746              	 .loc 1 1370 0
 3747 0074 0A23     	 movs r3,#10
 3748 0076 87F83B30 	 strb r3,[r7,#59]
1371:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1372:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (firstEntryIndex > 0 || lastEntryIndex < afatfs_fatEntriesPerSector()) {
 3749              	 .loc 1 1372 0
 3750 007a 7B69     	 ldr r3,[r7,#20]
 3751 007c 002B     	 cmp r3,#0
 3752 007e 05D1     	 bne .L256
 3753              	 .loc 1 1372 0 is_stmt 0 discriminator 1
 3754 0080 FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 3755 0084 0246     	 mov r2,r0
 3756 0086 7B6A     	 ldr r3,[r7,#36]
 3757 0088 9A42     	 cmp r2,r3
 3758 008a 05D9     	 bls .L257
 3759              	.L256:
1373:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // We're not overwriting the entire FAT sector so we must read the existing contents
1374:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             cacheFlags |= AFATFS_CACHE_READ;
 3760              	 .loc 1 1374 0 is_stmt 1
 3761 008c 97F83B30 	 ldrb r3,[r7,#59]
 3762 0090 43F00103 	 orr r3,r3,#1
 3763 0094 87F83B30 	 strb r3,[r7,#59]
 3764              	.L257:
1375:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1376:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1377:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         result = afatfs_cacheSector(fatPhysicalSector, &sector.bytes, cacheFlags, eraseSectorCount)
 3765              	 .loc 1 1377 0
 3766 0098 07F11C02 	 add r2,r7,#28
 3767 009c 97F83B30 	 ldrb r3,[r7,#59]
 3768 00a0 786C     	 ldr r0,[r7,#68]
 3769 00a2 1146     	 mov r1,r2
 3770 00a4 1A46     	 mov r2,r3
 3771 00a6 FB6B     	 ldr r3,[r7,#60]
 3772 00a8 FFF7FEFF 	 bl afatfs_cacheSector
 3773 00ac 0346     	 mov r3,r0
 3774 00ae 87F82330 	 strb r3,[r7,#35]
1378:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1379:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (result != AFATFS_OPERATION_SUCCESS) {
 3775              	 .loc 1 1379 0
 3776 00b2 97F82330 	 ldrb r3,[r7,#35]
 3777 00b6 012B     	 cmp r3,#1
 3778 00b8 02D0     	 beq .L258
1380:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return result;
 3779              	 .loc 1 1380 0
 3780 00ba 97F82330 	 ldrb r3,[r7,#35]
 3781 00be 97E0     	 b .L275
 3782              	.L258:
1381:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1382:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1383:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_DEBUG_VERBOSE
1384:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (pattern == AFATFS_FAT_PATTERN_FREE) {
1385:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             fprintf(stderr, "Marking cluster %u to %u as free in FAT sector %u...\n", *startCluster
1386:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
1387:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             fprintf(stderr, "Writing FAT chain from cluster %u to %u in FAT sector %u...\n", *start
1388:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1389:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
1390:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1391:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         switch (pattern) {
 3783              	 .loc 1 1391 0
 3784 00c0 FB7B     	 ldrb r3,[r7,#15]
 3785 00c2 002B     	 cmp r3,#0
 3786 00c4 C0F28580 	 blt .L260
 3787 00c8 012B     	 cmp r3,#1
 3788 00ca 02DD     	 ble .L261
 3789 00cc 022B     	 cmp r3,#2
 3790 00ce 5BD0     	 beq .L262
 3791 00d0 7FE0     	 b .L260
 3792              	.L261:
1392:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_FAT_PATTERN_TERMINATED_CHAIN:
1393:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_FAT_PATTERN_UNTERMINATED_CHAIN:
1394:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 nextCluster = *startCluster + 1;
 3793              	 .loc 1 1394 0
 3794 00d2 BB68     	 ldr r3,[r7,#8]
 3795 00d4 1B68     	 ldr r3,[r3]
 3796 00d6 0133     	 adds r3,r3,#1
 3797 00d8 3B64     	 str r3,[r7,#64]
1395:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Write all the "next cluster" pointers
1396:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT16) {
 3798              	 .loc 1 1396 0
 3799 00da 474B     	 ldr r3,.L276
 3800 00dc 1B78     	 ldrb r3,[r3]
 3801 00de 022B     	 cmp r3,#2
 3802 00e0 14D1     	 bne .L263
 3803              	.LBB20:
1397:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     for (uint32_t i = firstEntryIndex; i < lastEntryIndex; i++, nextCluster++) {
 3804              	 .loc 1 1397 0
 3805 00e2 7B69     	 ldr r3,[r7,#20]
 3806 00e4 7B63     	 str r3,[r7,#52]
 3807 00e6 0CE0     	 b .L264
 3808              	.L265:
1398:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         sector.fat16[i] = nextCluster;
 3809              	 .loc 1 1398 0 discriminator 3
 3810 00e8 FA69     	 ldr r2,[r7,#28]
 3811 00ea 7B6B     	 ldr r3,[r7,#52]
 3812 00ec 5B00     	 lsls r3,r3,#1
 3813 00ee 1344     	 add r3,r3,r2
 3814 00f0 3A6C     	 ldr r2,[r7,#64]
 3815 00f2 92B2     	 uxth r2,r2
 3816 00f4 1A80     	 strh r2,[r3]
1397:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     for (uint32_t i = firstEntryIndex; i < lastEntryIndex; i++, nextCluster++) {
 3817              	 .loc 1 1397 0 discriminator 3
 3818 00f6 7B6B     	 ldr r3,[r7,#52]
 3819 00f8 0133     	 adds r3,r3,#1
 3820 00fa 7B63     	 str r3,[r7,#52]
 3821 00fc 3B6C     	 ldr r3,[r7,#64]
 3822 00fe 0133     	 adds r3,r3,#1
 3823 0100 3B64     	 str r3,[r7,#64]
 3824              	.L264:
1397:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     for (uint32_t i = firstEntryIndex; i < lastEntryIndex; i++, nextCluster++) {
 3825              	 .loc 1 1397 0 is_stmt 0 discriminator 1
 3826 0102 7A6B     	 ldr r2,[r7,#52]
 3827 0104 7B6A     	 ldr r3,[r7,#36]
 3828 0106 9A42     	 cmp r2,r3
 3829 0108 EED3     	 bcc .L265
 3830              	.LBE20:
 3831 010a 12E0     	 b .L266
 3832              	.L263:
 3833              	.LBB21:
1399:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     }
1400:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 } else {
1401:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     for (uint32_t i = firstEntryIndex; i < lastEntryIndex; i++, nextCluster++) {
 3834              	 .loc 1 1401 0 is_stmt 1
 3835 010c 7B69     	 ldr r3,[r7,#20]
 3836 010e 3B63     	 str r3,[r7,#48]
 3837 0110 0BE0     	 b .L267
 3838              	.L268:
1402:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         sector.fat32[i] = nextCluster;
 3839              	 .loc 1 1402 0 discriminator 3
 3840 0112 FA69     	 ldr r2,[r7,#28]
 3841 0114 3B6B     	 ldr r3,[r7,#48]
 3842 0116 9B00     	 lsls r3,r3,#2
 3843 0118 1344     	 add r3,r3,r2
 3844 011a 3A6C     	 ldr r2,[r7,#64]
 3845 011c 1A60     	 str r2,[r3]
1401:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         sector.fat32[i] = nextCluster;
 3846              	 .loc 1 1401 0 discriminator 3
 3847 011e 3B6B     	 ldr r3,[r7,#48]
 3848 0120 0133     	 adds r3,r3,#1
 3849 0122 3B63     	 str r3,[r7,#48]
 3850 0124 3B6C     	 ldr r3,[r7,#64]
 3851 0126 0133     	 adds r3,r3,#1
 3852 0128 3B64     	 str r3,[r7,#64]
 3853              	.L267:
1401:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         sector.fat32[i] = nextCluster;
 3854              	 .loc 1 1401 0 is_stmt 0 discriminator 1
 3855 012a 3A6B     	 ldr r2,[r7,#48]
 3856 012c 7B6A     	 ldr r3,[r7,#36]
 3857 012e 9A42     	 cmp r2,r3
 3858 0130 EFD3     	 bcc .L268
 3859              	.L266:
 3860              	.LBE21:
1403:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     }
1404:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
1405:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1406:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 *startCluster += lastEntryIndex - firstEntryIndex;
 3861              	 .loc 1 1406 0 is_stmt 1
 3862 0132 BB68     	 ldr r3,[r7,#8]
 3863 0134 1A68     	 ldr r2,[r3]
 3864 0136 7B69     	 ldr r3,[r7,#20]
 3865 0138 796A     	 ldr r1,[r7,#36]
 3866 013a CB1A     	 subs r3,r1,r3
 3867 013c 1A44     	 add r2,r2,r3
 3868 013e BB68     	 ldr r3,[r7,#8]
 3869 0140 1A60     	 str r2,[r3]
1407:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1408:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (pattern == AFATFS_FAT_PATTERN_TERMINATED_CHAIN && *startCluster == endCluster) 
 3870              	 .loc 1 1408 0
 3871 0142 FB7B     	 ldrb r3,[r7,#15]
 3872 0144 012B     	 cmp r3,#1
 3873 0146 1ED1     	 bne .L269
 3874              	 .loc 1 1408 0 is_stmt 0 discriminator 1
 3875 0148 BB68     	 ldr r3,[r7,#8]
 3876 014a 1A68     	 ldr r2,[r3]
 3877 014c 7B68     	 ldr r3,[r7,#4]
 3878 014e 9A42     	 cmp r2,r3
 3879 0150 19D1     	 bne .L269
1409:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     // We completed the chain! Overwrite the last entry we wrote with the terminato
1410:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     if (afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT16) {
 3880              	 .loc 1 1410 0 is_stmt 1
 3881 0152 294B     	 ldr r3,.L276
 3882 0154 1B78     	 ldrb r3,[r3]
 3883 0156 022B     	 cmp r3,#2
 3884 0158 0AD1     	 bne .L270
1411:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         sector.fat16[lastEntryIndex - 1] = 0xFFFF;
 3885              	 .loc 1 1411 0
 3886 015a FA69     	 ldr r2,[r7,#28]
 3887 015c 7B6A     	 ldr r3,[r7,#36]
 3888 015e 03F10043 	 add r3,r3,#-2147483648
 3889 0162 013B     	 subs r3,r3,#1
 3890 0164 5B00     	 lsls r3,r3,#1
 3891 0166 1344     	 add r3,r3,r2
 3892 0168 4FF6FF72 	 movw r2,#65535
 3893 016c 1A80     	 strh r2,[r3]
1412:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     } else {
1413:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         sector.fat32[lastEntryIndex - 1] = 0xFFFFFFFF;
1414:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     }
1415:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     break;
 3894              	 .loc 1 1415 0
 3895 016e 30E0     	 b .L260
 3896              	.L270:
1413:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     }
 3897              	 .loc 1 1413 0
 3898 0170 FA69     	 ldr r2,[r7,#28]
 3899 0172 7B6A     	 ldr r3,[r7,#36]
 3900 0174 03F18043 	 add r3,r3,#1073741824
 3901 0178 013B     	 subs r3,r3,#1
 3902 017a 9B00     	 lsls r3,r3,#2
 3903 017c 1344     	 add r3,r3,r2
 3904 017e 4FF0FF32 	 mov r2,#-1
 3905 0182 1A60     	 str r2,[r3]
 3906              	 .loc 1 1415 0
 3907 0184 25E0     	 b .L260
 3908              	.L269:
1416:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
1417:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 3909              	 .loc 1 1417 0
 3910 0186 24E0     	 b .L260
 3911              	.L262:
1418:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_FAT_PATTERN_FREE:
1419:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 fatEntrySize = afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT16 ? sizeof(uint16_t
 3912              	 .loc 1 1419 0
 3913 0188 1B4B     	 ldr r3,.L276
 3914 018a 1B78     	 ldrb r3,[r3]
 3915 018c 022B     	 cmp r3,#2
 3916 018e 01D1     	 bne .L272
 3917              	 .loc 1 1419 0 is_stmt 0 discriminator 1
 3918 0190 0223     	 movs r3,#2
 3919 0192 00E0     	 b .L273
 3920              	.L272:
 3921              	 .loc 1 1419 0 discriminator 2
 3922 0194 0423     	 movs r3,#4
 3923              	.L273:
 3924              	 .loc 1 1419 0 discriminator 4
 3925 0196 87F82230 	 strb r3,[r7,#34]
1420:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1421:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 memset(sector.bytes + firstEntryIndex * fatEntrySize, 0, (lastEntryIndex - firstEnt
 3926              	 .loc 1 1421 0 is_stmt 1 discriminator 4
 3927 019a FA69     	 ldr r2,[r7,#28]
 3928 019c 97F82230 	 ldrb r3,[r7,#34]
 3929 01a0 7969     	 ldr r1,[r7,#20]
 3930 01a2 01FB03F3 	 mul r3,r1,r3
 3931 01a6 D118     	 adds r1,r2,r3
 3932 01a8 7B69     	 ldr r3,[r7,#20]
 3933 01aa 7A6A     	 ldr r2,[r7,#36]
 3934 01ac D31A     	 subs r3,r2,r3
 3935 01ae 97F82220 	 ldrb r2,[r7,#34]
 3936 01b2 02FB03F3 	 mul r3,r2,r3
 3937 01b6 0846     	 mov r0,r1
 3938 01b8 0021     	 movs r1,#0
 3939 01ba 1A46     	 mov r2,r3
 3940 01bc FFF7FEFF 	 bl memset
1422:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1423:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 *startCluster += lastEntryIndex - firstEntryIndex;
 3941              	 .loc 1 1423 0 discriminator 4
 3942 01c0 BB68     	 ldr r3,[r7,#8]
 3943 01c2 1A68     	 ldr r2,[r3]
 3944 01c4 7B69     	 ldr r3,[r7,#20]
 3945 01c6 796A     	 ldr r1,[r7,#36]
 3946 01c8 CB1A     	 subs r3,r1,r3
 3947 01ca 1A44     	 add r2,r2,r3
 3948 01cc BB68     	 ldr r3,[r7,#8]
 3949 01ce 1A60     	 str r2,[r3]
1424:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 3950              	 .loc 1 1424 0 discriminator 4
 3951 01d0 00BF     	 nop
 3952              	.L260:
1425:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1426:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1427:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         fatPhysicalSector++;
 3953              	 .loc 1 1427 0
 3954 01d2 7B6C     	 ldr r3,[r7,#68]
 3955 01d4 0133     	 adds r3,r3,#1
 3956 01d6 7B64     	 str r3,[r7,#68]
1428:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         eraseSectorCount--;
 3957              	 .loc 1 1428 0
 3958 01d8 FB6B     	 ldr r3,[r7,#60]
 3959 01da 013B     	 subs r3,r3,#1
 3960 01dc FB63     	 str r3,[r7,#60]
1429:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         firstEntryIndex = 0;
 3961              	 .loc 1 1429 0
 3962 01de 0023     	 movs r3,#0
 3963 01e0 7B61     	 str r3,[r7,#20]
 3964              	.L255:
 3965              	.LBE18:
1366:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // The last entry we will fill inside this sector (exclusive):
 3966              	 .loc 1 1366 0
 3967 01e2 BB68     	 ldr r3,[r7,#8]
 3968 01e4 1A68     	 ldr r2,[r3]
 3969 01e6 7B68     	 ldr r3,[r7,#4]
 3970 01e8 9A42     	 cmp r2,r3
 3971 01ea FFF433AF 	 bcc .L274
1430:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1431:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1432:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return AFATFS_OPERATION_SUCCESS;
 3972              	 .loc 1 1432 0
 3973 01ee 0123     	 movs r3,#1
 3974              	.L275:
1433:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 3975              	 .loc 1 1433 0 discriminator 1
 3976 01f0 1846     	 mov r0,r3
 3977 01f2 4C37     	 adds r7,r7,#76
 3978              	.LCFI189:
 3979              	 .cfi_def_cfa_offset 12
 3980 01f4 BD46     	 mov sp,r7
 3981              	.LCFI190:
 3982              	 .cfi_def_cfa_register 13
 3983              	 
 3984 01f6 90BD     	 pop {r4,r7,pc}
 3985              	.L277:
 3986              	 .align 2
 3987              	.L276:
 3988 01f8 00000000 	 .word afatfs
 3989              	 .cfi_endproc
 3990              	.LFE566:
 3992              	 .section .text.afatfs_saveDirectoryEntry,"ax",%progbits
 3993              	 .align 2
 3994              	 .thumb
 3995              	 .thumb_func
 3997              	afatfs_saveDirectoryEntry:
 3998              	.LFB567:
1434:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1435:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
1436:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1437:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1438:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Write the directory entry for the file into its `directoryEntryPos` position in its containing d
1439:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1440:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * mode:
1441:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_SAVE_DIRECTORY_NORMAL    - Store the file's physical size, not the logical size, in t
1442:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_SAVE_DIRECTORY_FOR_CLOSE - We're done extending the file so we can write the logical 
1443:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_SAVE_DIRECTORY_DELETED   - Mark the directory entry as deleted
1444:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1445:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
1446:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS - The directory entry has been stored into the directory sector in 
1447:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - Cache is too busy, retry later
1448:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE - If the filesystem enters the fatal state
1449:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1450:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_saveDirectoryEntry(afatfsFilePtr_t file, afatfsSaveDirectoryE
1451:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 3999              	 .loc 1 1451 0
 4000              	 .cfi_startproc
 4001              	 
 4002              	 
 4003 0000 80B5     	 push {r7,lr}
 4004              	.LCFI191:
 4005              	 .cfi_def_cfa_offset 8
 4006              	 .cfi_offset 7,-8
 4007              	 .cfi_offset 14,-4
 4008 0002 86B0     	 sub sp,sp,#24
 4009              	.LCFI192:
 4010              	 .cfi_def_cfa_offset 32
 4011 0004 00AF     	 add r7,sp,#0
 4012              	.LCFI193:
 4013              	 .cfi_def_cfa_register 7
 4014 0006 7860     	 str r0,[r7,#4]
 4015 0008 0B46     	 mov r3,r1
 4016 000a FB70     	 strb r3,[r7,#3]
1452:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t *sector;
1453:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e result;
1454:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1455:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->directoryEntryPos.sectorNumberPhysical == 0) {
 4017              	 .loc 1 1455 0
 4018 000c 7B68     	 ldr r3,[r7,#4]
 4019 000e D3F81930 	 ldr r3,[r3,#25]
 4020 0012 002B     	 cmp r3,#0
 4021 0014 01D1     	 bne .L279
1456:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_SUCCESS; // Root directories don't have a directory entry
 4022              	 .loc 1 1456 0
 4023 0016 0123     	 movs r3,#1
 4024 0018 59E0     	 b .L288
 4025              	.L279:
1457:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1458:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1459:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     result = afatfs_cacheSector(file->directoryEntryPos.sectorNumberPhysical, &sector, AFATFS_CACHE
 4026              	 .loc 1 1459 0
 4027 001a 7B68     	 ldr r3,[r7,#4]
 4028 001c D3F81920 	 ldr r2,[r3,#25]
 4029 0020 07F10C03 	 add r3,r7,#12
 4030 0024 1046     	 mov r0,r2
 4031 0026 1946     	 mov r1,r3
 4032 0028 0322     	 movs r2,#3
 4033 002a 0023     	 movs r3,#0
 4034 002c FFF7FEFF 	 bl afatfs_cacheSector
 4035 0030 0346     	 mov r3,r0
 4036 0032 FB75     	 strb r3,[r7,#23]
1460:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1461:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_DEBUG_VERBOSE
1462:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     fprintf(stderr, "Saving directory entry to sector %u...\n", file->directoryEntryPos.sectorNumbe
1463:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
1464:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1465:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (result == AFATFS_OPERATION_SUCCESS) {
 4037              	 .loc 1 1465 0
 4038 0034 FB7D     	 ldrb r3,[r7,#23]
 4039 0036 012B     	 cmp r3,#1
 4040 0038 48D1     	 bne .L281
1466:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_assert(file->directoryEntryPos.entryIndex >= 0)) {
 4041              	 .loc 1 1466 0
 4042 003a 7B68     	 ldr r3,[r7,#4]
 4043 003c B3F91D30 	 ldrsh r3,[r3,#29]
 4044 0040 9BB2     	 uxth r3,r3
 4045 0042 DB43     	 mvns r3,r3
 4046 0044 9BB2     	 uxth r3,r3
 4047 0046 DB0B     	 lsrs r3,r3,#15
 4048 0048 DBB2     	 uxtb r3,r3
 4049 004a 1846     	 mov r0,r3
 4050 004c FFF7FEFF 	 bl afatfs_assert
 4051 0050 0346     	 mov r3,r0
 4052 0052 002B     	 cmp r3,#0
 4053 0054 38D0     	 beq .L282
 4054              	.LBB22:
1467:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             fatDirectoryEntry_t *entry = (fatDirectoryEntry_t *) sector + file->directoryEntryPos.e
 4055              	 .loc 1 1467 0
 4056 0056 FA68     	 ldr r2,[r7,#12]
 4057 0058 7B68     	 ldr r3,[r7,#4]
 4058 005a B3F91D30 	 ldrsh r3,[r3,#29]
 4059 005e 9BB2     	 uxth r3,r3
 4060 0060 1BB2     	 sxth r3,r3
 4061 0062 5B01     	 lsls r3,r3,#5
 4062 0064 1344     	 add r3,r3,r2
 4063 0066 3B61     	 str r3,[r7,#16]
1468:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1469:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             switch (mode) {
 4064              	 .loc 1 1469 0
 4065 0068 FB78     	 ldrb r3,[r7,#3]
 4066 006a 012B     	 cmp r3,#1
 4067 006c 0CD0     	 beq .L284
 4068 006e 022B     	 cmp r3,#2
 4069 0070 07D0     	 beq .L285
 4070 0072 002B     	 cmp r3,#0
 4071 0074 0DD1     	 bne .L283
1470:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                case AFATFS_SAVE_DIRECTORY_NORMAL:
1471:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                    /* We exaggerate the length of the written file so that if power is lost, the en
1472:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     * still be readable (though the very tail of the file will be uninitialized dat
1473:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     *
1474:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     * This way we can avoid updating the directory entry too many times during fwri
1475:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     */
1476:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                    entry->fileSize = file->physicalSize;
 4072              	 .loc 1 1476 0
 4073 0076 7B68     	 ldr r3,[r7,#4]
 4074 0078 D3F80920 	 ldr r2,[r3,#9]
 4075 007c 3B69     	 ldr r3,[r7,#16]
 4076 007e DA61     	 str r2,[r3,#28]
1477:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                break;
 4077              	 .loc 1 1477 0
 4078 0080 07E0     	 b .L283
 4079              	.L285:
1478:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                case AFATFS_SAVE_DIRECTORY_DELETED:
1479:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                    entry->filename[0] = FAT_DELETED_FILE_MARKER;
 4080              	 .loc 1 1479 0
 4081 0082 3B69     	 ldr r3,[r7,#16]
 4082 0084 E522     	 movs r2,#229
 4083 0086 1A70     	 strb r2,[r3]
 4084              	.L284:
1480:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                    FALLTHROUGH;
1481:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1482:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                case AFATFS_SAVE_DIRECTORY_FOR_CLOSE:
1483:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                    // We write the true length of the file on close.
1484:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                    entry->fileSize = file->logicalSize;
 4085              	 .loc 1 1484 0
 4086 0088 7B68     	 ldr r3,[r7,#4]
 4087 008a D3F80520 	 ldr r2,[r3,#5]
 4088 008e 3B69     	 ldr r3,[r7,#16]
 4089 0090 DA61     	 str r2,[r3,#28]
 4090              	.L283:
1485:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1486:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1487:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // (sub)directories don't store a filesize in their directory entry:
1488:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (file->type == AFATFS_FILE_TYPE_DIRECTORY) {
 4091              	 .loc 1 1488 0
 4092 0092 7B68     	 ldr r3,[r7,#4]
 4093 0094 1B78     	 ldrb r3,[r3]
 4094 0096 032B     	 cmp r3,#3
 4095 0098 08D1     	 bne .L287
1489:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 entry->fileSize = 0;
 4096              	 .loc 1 1489 0
 4097 009a 3B69     	 ldr r3,[r7,#16]
 4098 009c 0022     	 movs r2,#0
 4099 009e 1A77     	 strb r2,[r3,#28]
 4100 00a0 0022     	 movs r2,#0
 4101 00a2 5A77     	 strb r2,[r3,#29]
 4102 00a4 0022     	 movs r2,#0
 4103 00a6 9A77     	 strb r2,[r3,#30]
 4104 00a8 0022     	 movs r2,#0
 4105 00aa DA77     	 strb r2,[r3,#31]
 4106              	.L287:
1490:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1491:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1492:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             entry->firstClusterHigh = file->firstCluster >> 16;
 4107              	 .loc 1 1492 0
 4108 00ac 7B68     	 ldr r3,[r7,#4]
 4109 00ae D3F81F30 	 ldr r3,[r3,#31]
 4110 00b2 1B0C     	 lsrs r3,r3,#16
 4111 00b4 9AB2     	 uxth r2,r3
 4112 00b6 3B69     	 ldr r3,[r7,#16]
 4113 00b8 9A82     	 strh r2,[r3,#20]
1493:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             entry->firstClusterLow = file->firstCluster & 0xFFFF;
 4114              	 .loc 1 1493 0
 4115 00ba 7B68     	 ldr r3,[r7,#4]
 4116 00bc D3F81F30 	 ldr r3,[r3,#31]
 4117 00c0 9AB2     	 uxth r2,r3
 4118 00c2 3B69     	 ldr r3,[r7,#16]
 4119 00c4 5A83     	 strh r2,[r3,#26]
 4120              	.LBE22:
 4121 00c6 01E0     	 b .L281
 4122              	.L282:
1494:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
1495:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_FAILURE;
 4123              	 .loc 1 1495 0
 4124 00c8 0223     	 movs r3,#2
 4125 00ca 00E0     	 b .L288
 4126              	.L281:
1496:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1497:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1498:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1499:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return result;
 4127              	 .loc 1 1499 0
 4128 00cc FB7D     	 ldrb r3,[r7,#23]
 4129              	.L288:
1500:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 4130              	 .loc 1 1500 0 discriminator 1
 4131 00ce 1846     	 mov r0,r3
 4132 00d0 1837     	 adds r7,r7,#24
 4133              	.LCFI194:
 4134              	 .cfi_def_cfa_offset 8
 4135 00d2 BD46     	 mov sp,r7
 4136              	.LCFI195:
 4137              	 .cfi_def_cfa_register 13
 4138              	 
 4139 00d4 80BD     	 pop {r7,pc}
 4140              	 .cfi_endproc
 4141              	.LFE567:
 4143 00d6 00BF     	 .section .text.afatfs_appendRegularFreeClusterContinue,"ax",%progbits
 4144              	 .align 2
 4145              	 .thumb
 4146              	 .thumb_func
 4148              	afatfs_appendRegularFreeClusterContinue:
 4149              	.LFB568:
1501:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1502:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1503:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Attempt to add a free cluster to the end of the given file. If the file was previously empty, th
1504:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * is updated to point to the new cluster.
1505:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1506:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
1507:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - The cluster has been appended
1508:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - Cache was busy, so call again later to continue
1509:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE     - Cluster could not be appended because the filesystem ran out 
1510:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                                    (afatfs.filesystemFull is set to true)
1511:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1512:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * If the file's operation was AFATFS_FILE_OPERATION_APPEND_FREE_CLUSTER, the file operation is cle
1513:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * otherwise it is left alone so that this operation can be called as a sub-operation of some other
1514:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * file.
1515:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1516:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_appendRegularFreeClusterContinue(afatfsFile_t *file)
1517:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 4150              	 .loc 1 1517 0
 4151              	 .cfi_startproc
 4152              	 
 4153              	 
 4154 0000 80B5     	 push {r7,lr}
 4155              	.LCFI196:
 4156              	 .cfi_def_cfa_offset 8
 4157              	 .cfi_offset 7,-8
 4158              	 .cfi_offset 14,-4
 4159 0002 84B0     	 sub sp,sp,#16
 4160              	.LCFI197:
 4161              	 .cfi_def_cfa_offset 24
 4162 0004 00AF     	 add r7,sp,#0
 4163              	.LCFI198:
 4164              	 .cfi_def_cfa_register 7
 4165 0006 7860     	 str r0,[r7,#4]
1518:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsAppendFreeCluster_t *opState = &file->operation.state.appendFreeCluster;
 4166              	 .loc 1 1518 0
 4167 0008 7B68     	 ldr r3,[r7,#4]
 4168 000a 2433     	 adds r3,r3,#36
 4169 000c FB60     	 str r3,[r7,#12]
 4170              	.L290:
1519:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status;
1520:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1521:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     doMore:
1522:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1523:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (opState->phase) {
 4171              	 .loc 1 1523 0
 4172 000e FB68     	 ldr r3,[r7,#12]
 4173 0010 1B7A     	 ldrb r3,[r3,#8]
 4174 0012 052B     	 cmp r3,#5
 4175 0014 00F2A980 	 bhi .L291
 4176 0018 01A2     	 adr r2,.L293
 4177 001a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 4178 001e 00BF     	 .p2align 2
 4179              	.L293:
 4180 0020 39000000 	 .word .L292+1
 4181 0024 C3000000 	 .word .L294+1
 4182 0028 F5000000 	 .word .L295+1
 4183 002c 19010000 	 .word .L296+1
 4184 0030 31010000 	 .word .L297+1
 4185 0034 47010000 	 .word .L298+1
 4186              	 .p2align 1
 4187              	.L292:
1524:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_FREE_CLUSTER_PHASE_FIND_FREESPACE:
1525:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             switch (afatfs_findClusterWithCondition(CLUSTER_SEARCH_FREE, &opState->searchCluster, a
 4188              	 .loc 1 1525 0
 4189 0038 FB68     	 ldr r3,[r7,#12]
 4190 003a 1A1D     	 adds r2,r3,#4
 4191 003c 4D4B     	 ldr r3,.L315
 4192 003e 03F58E53 	 add r3,r3,#4544
 4193 0042 0833     	 adds r3,r3,#8
 4194 0044 1B68     	 ldr r3,[r3]
 4195 0046 0233     	 adds r3,r3,#2
 4196 0048 0120     	 movs r0,#1
 4197 004a 1146     	 mov r1,r2
 4198 004c 1A46     	 mov r2,r3
 4199 004e FFF7FEFF 	 bl afatfs_findClusterWithCondition
 4200 0052 0346     	 mov r3,r0
 4201 0054 032B     	 cmp r3,#3
 4202 0056 00F28780 	 bhi .L313
 4203 005a 01A2     	 adr r2,.L301
 4204 005c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 4205              	 .p2align 2
 4206              	.L301:
 4207 0060 BF000000 	 .word .L314+1
 4208 0064 71000000 	 .word .L302+1
 4209 0068 B7000000 	 .word .L303+1
 4210 006c B7000000 	 .word .L303+1
 4211              	 .p2align 1
 4212              	.L302:
1526:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 case AFATFS_FIND_CLUSTER_FOUND:
1527:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.lastClusterAllocated = opState->searchCluster;
 4213              	 .loc 1 1527 0
 4214 0070 FB68     	 ldr r3,[r7,#12]
 4215 0072 5A68     	 ldr r2,[r3,#4]
 4216 0074 3F4B     	 ldr r3,.L315
 4217 0076 03F58E53 	 add r3,r3,#4544
 4218 007a 1433     	 adds r3,r3,#20
 4219 007c 1A60     	 str r2,[r3]
1528:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1529:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     // Make the cluster available for us to write in
1530:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     file->cursorCluster = opState->searchCluster;
 4220              	 .loc 1 1530 0
 4221 007e FB68     	 ldr r3,[r7,#12]
 4222 0080 5A68     	 ldr r2,[r3,#4]
 4223 0082 7B68     	 ldr r3,[r7,#4]
 4224 0084 C3F80D20 	 str r2,[r3,#13]
1531:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     file->physicalSize += afatfs_clusterSize();
 4225              	 .loc 1 1531 0
 4226 0088 FFF7FEFF 	 bl afatfs_clusterSize
 4227 008c 0246     	 mov r2,r0
 4228 008e 7B68     	 ldr r3,[r7,#4]
 4229 0090 D3F80930 	 ldr r3,[r3,#9]
 4230 0094 1A44     	 add r2,r2,r3
 4231 0096 7B68     	 ldr r3,[r7,#4]
 4232 0098 C3F80920 	 str r2,[r3,#9]
1532:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1533:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     if (opState->previousCluster == 0) {
 4233              	 .loc 1 1533 0
 4234 009c FB68     	 ldr r3,[r7,#12]
 4235 009e 1B68     	 ldr r3,[r3]
 4236 00a0 002B     	 cmp r3,#0
 4237 00a2 04D1     	 bne .L304
1534:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // This is the new first cluster in the file
1535:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         file->firstCluster = opState->searchCluster;
 4238              	 .loc 1 1535 0
 4239 00a4 FB68     	 ldr r3,[r7,#12]
 4240 00a6 5A68     	 ldr r2,[r3,#4]
 4241 00a8 7B68     	 ldr r3,[r7,#4]
 4242 00aa C3F81F20 	 str r2,[r3,#31]
 4243              	.L304:
1536:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     }
1537:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1538:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     opState->phase = AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FAT1;
 4244              	 .loc 1 1538 0
 4245 00ae FB68     	 ldr r3,[r7,#12]
 4246 00b0 0122     	 movs r2,#1
 4247 00b2 1A72     	 strb r2,[r3,#8]
1539:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     goto doMore;
 4248              	 .loc 1 1539 0
 4249 00b4 ABE7     	 b .L290
 4250              	.L303:
1540:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 break;
1541:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 case AFATFS_FIND_CLUSTER_FATAL:
1542:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 case AFATFS_FIND_CLUSTER_NOT_FOUND:
1543:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     // We couldn't find an empty cluster to append to the file
1544:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     opState->phase = AFATFS_APPEND_FREE_CLUSTER_PHASE_FAILURE;
 4251              	 .loc 1 1544 0
 4252 00b6 FB68     	 ldr r3,[r7,#12]
 4253 00b8 0522     	 movs r2,#5
 4254 00ba 1A72     	 strb r2,[r3,#8]
1545:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     goto doMore;
 4255              	 .loc 1 1545 0
 4256 00bc A7E7     	 b .L290
 4257              	.L314:
1546:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 break;
1547:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 case AFATFS_FIND_CLUSTER_IN_PROGRESS:
1548:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 break;
 4258              	 .loc 1 1548 0
 4259 00be 00BF     	 nop
1549:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1550:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 4260              	 .loc 1 1550 0
 4261 00c0 52E0     	 b .L313
 4262              	.L294:
1551:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FAT1:
1552:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Terminate the new cluster
1553:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_FATSetNextCluster(opState->searchCluster, 0xFFFFFFFF);
 4263              	 .loc 1 1553 0
 4264 00c2 FB68     	 ldr r3,[r7,#12]
 4265 00c4 5B68     	 ldr r3,[r3,#4]
 4266 00c6 1846     	 mov r0,r3
 4267 00c8 4FF0FF31 	 mov r1,#-1
 4268 00cc FFF7FEFF 	 bl afatfs_FATSetNextCluster
 4269 00d0 0346     	 mov r3,r0
 4270 00d2 FB72     	 strb r3,[r7,#11]
1554:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1555:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 4271              	 .loc 1 1555 0
 4272 00d4 FB7A     	 ldrb r3,[r7,#11]
 4273 00d6 012B     	 cmp r3,#1
 4274 00d8 0BD1     	 bne .L305
1556:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (opState->previousCluster) {
 4275              	 .loc 1 1556 0
 4276 00da FB68     	 ldr r3,[r7,#12]
 4277 00dc 1B68     	 ldr r3,[r3]
 4278 00de 002B     	 cmp r3,#0
 4279 00e0 03D0     	 beq .L306
1557:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     opState->phase = AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FAT2;
 4280              	 .loc 1 1557 0
 4281 00e2 FB68     	 ldr r3,[r7,#12]
 4282 00e4 0222     	 movs r2,#2
 4283 00e6 1A72     	 strb r2,[r3,#8]
 4284 00e8 02E0     	 b .L307
 4285              	.L306:
1558:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 } else {
1559:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     opState->phase = AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FILE_DIRECTORY;
 4286              	 .loc 1 1559 0
 4287 00ea FB68     	 ldr r3,[r7,#12]
 4288 00ec 0322     	 movs r2,#3
 4289 00ee 1A72     	 strb r2,[r3,#8]
 4290              	.L307:
1560:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
1561:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1562:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 4291              	 .loc 1 1562 0
 4292 00f0 8DE7     	 b .L290
 4293              	.L305:
1563:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1564:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 4294              	 .loc 1 1564 0
 4295 00f2 3AE0     	 b .L291
 4296              	.L295:
1565:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FAT2:
1566:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Add the new cluster to the pre-existing chain
1567:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_FATSetNextCluster(opState->previousCluster, opState->searchCluster);
 4297              	 .loc 1 1567 0
 4298 00f4 FB68     	 ldr r3,[r7,#12]
 4299 00f6 1A68     	 ldr r2,[r3]
 4300 00f8 FB68     	 ldr r3,[r7,#12]
 4301 00fa 5B68     	 ldr r3,[r3,#4]
 4302 00fc 1046     	 mov r0,r2
 4303 00fe 1946     	 mov r1,r3
 4304 0100 FFF7FEFF 	 bl afatfs_FATSetNextCluster
 4305 0104 0346     	 mov r3,r0
 4306 0106 FB72     	 strb r3,[r7,#11]
1568:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1569:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 4307              	 .loc 1 1569 0
 4308 0108 FB7A     	 ldrb r3,[r7,#11]
 4309 010a 012B     	 cmp r3,#1
 4310 010c 03D1     	 bne .L308
1570:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FILE_DIRECTORY;
 4311              	 .loc 1 1570 0
 4312 010e FB68     	 ldr r3,[r7,#12]
 4313 0110 0322     	 movs r2,#3
 4314 0112 1A72     	 strb r2,[r3,#8]
1571:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 4315              	 .loc 1 1571 0
 4316 0114 7BE7     	 b .L290
 4317              	.L308:
1572:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1573:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 4318              	 .loc 1 1573 0
 4319 0116 28E0     	 b .L291
 4320              	.L296:
1574:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FILE_DIRECTORY:
1575:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs_saveDirectoryEntry(file, AFATFS_SAVE_DIRECTORY_NORMAL) == AFATFS_OPERATION_S
 4321              	 .loc 1 1575 0
 4322 0118 7868     	 ldr r0,[r7,#4]
 4323 011a 0021     	 movs r1,#0
 4324 011c FFF7FEFF 	 bl afatfs_saveDirectoryEntry
 4325 0120 0346     	 mov r3,r0
 4326 0122 012B     	 cmp r3,#1
 4327 0124 03D1     	 bne .L309
1576:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_APPEND_FREE_CLUSTER_PHASE_COMPLETE;
 4328              	 .loc 1 1576 0
 4329 0126 FB68     	 ldr r3,[r7,#12]
 4330 0128 0422     	 movs r2,#4
 4331 012a 1A72     	 strb r2,[r3,#8]
1577:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 4332              	 .loc 1 1577 0
 4333 012c 6FE7     	 b .L290
 4334              	.L309:
1578:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1579:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 4335              	 .loc 1 1579 0
 4336 012e 1CE0     	 b .L291
 4337              	.L297:
1580:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_FREE_CLUSTER_PHASE_COMPLETE:
1581:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (file->operation.operation == AFATFS_FILE_OPERATION_APPEND_FREE_CLUSTER) {
 4338              	 .loc 1 1581 0
 4339 0130 7B68     	 ldr r3,[r7,#4]
 4340 0132 93F82330 	 ldrb r3,[r3,#35]
 4341 0136 082B     	 cmp r3,#8
 4342 0138 03D1     	 bne .L310
1582:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 4343              	 .loc 1 1582 0
 4344 013a 7B68     	 ldr r3,[r7,#4]
 4345 013c 0022     	 movs r2,#0
 4346 013e 83F82320 	 strb r2,[r3,#35]
 4347              	.L310:
1583:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1584:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1585:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_SUCCESS;
 4348              	 .loc 1 1585 0
 4349 0142 0123     	 movs r3,#1
 4350 0144 12E0     	 b .L311
 4351              	.L298:
1586:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
1587:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_FREE_CLUSTER_PHASE_FAILURE:
1588:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (file->operation.operation == AFATFS_FILE_OPERATION_APPEND_FREE_CLUSTER) {
 4352              	 .loc 1 1588 0
 4353 0146 7B68     	 ldr r3,[r7,#4]
 4354 0148 93F82330 	 ldrb r3,[r3,#35]
 4355 014c 082B     	 cmp r3,#8
 4356 014e 03D1     	 bne .L312
1589:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 4357              	 .loc 1 1589 0
 4358 0150 7B68     	 ldr r3,[r7,#4]
 4359 0152 0022     	 movs r2,#0
 4360 0154 83F82320 	 strb r2,[r3,#35]
 4361              	.L312:
1590:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1591:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1592:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.filesystemFull = true;
 4362              	 .loc 1 1592 0
 4363 0158 064B     	 ldr r3,.L315
 4364 015a 03F58C53 	 add r3,r3,#4480
 4365 015e 0233     	 adds r3,r3,#2
 4366 0160 0122     	 movs r2,#1
 4367 0162 1A70     	 strb r2,[r3]
1593:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_FAILURE;
 4368              	 .loc 1 1593 0
 4369 0164 0223     	 movs r3,#2
 4370 0166 01E0     	 b .L311
 4371              	.L313:
1550:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_FREE_CLUSTER_PHASE_UPDATE_FAT1:
 4372              	 .loc 1 1550 0
 4373 0168 00BF     	 nop
 4374              	.L291:
1594:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
1595:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1596:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1597:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return AFATFS_OPERATION_IN_PROGRESS;
 4375              	 .loc 1 1597 0
 4376 016a 0023     	 movs r3,#0
 4377              	.L311:
1598:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 4378              	 .loc 1 1598 0
 4379 016c 1846     	 mov r0,r3
 4380 016e 1037     	 adds r7,r7,#16
 4381              	.LCFI199:
 4382              	 .cfi_def_cfa_offset 8
 4383 0170 BD46     	 mov sp,r7
 4384              	.LCFI200:
 4385              	 .cfi_def_cfa_register 13
 4386              	 
 4387 0172 80BD     	 pop {r7,pc}
 4388              	.L316:
 4389              	 .align 2
 4390              	.L315:
 4391 0174 00000000 	 .word afatfs
 4392              	 .cfi_endproc
 4393              	.LFE568:
 4395              	 .section .text.afatfs_appendRegularFreeClusterInitOperationState,"ax",%progbits
 4396              	 .align 2
 4397              	 .thumb
 4398              	 .thumb_func
 4400              	afatfs_appendRegularFreeClusterInitOperationState:
 4401              	.LFB569:
1599:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1600:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_appendRegularFreeClusterInitOperationState(afatfsAppendFreeCluster_t *state, uin
1601:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 4402              	 .loc 1 1601 0
 4403              	 .cfi_startproc
 4404              	 
 4405              	 
 4406              	 
 4407 0000 80B4     	 push {r7}
 4408              	.LCFI201:
 4409              	 .cfi_def_cfa_offset 4
 4410              	 .cfi_offset 7,-4
 4411 0002 83B0     	 sub sp,sp,#12
 4412              	.LCFI202:
 4413              	 .cfi_def_cfa_offset 16
 4414 0004 00AF     	 add r7,sp,#0
 4415              	.LCFI203:
 4416              	 .cfi_def_cfa_register 7
 4417 0006 7860     	 str r0,[r7,#4]
 4418 0008 3960     	 str r1,[r7]
1602:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     state->phase = AFATFS_APPEND_FREE_CLUSTER_PHASE_INITIAL;
 4419              	 .loc 1 1602 0
 4420 000a 7B68     	 ldr r3,[r7,#4]
 4421 000c 0022     	 movs r2,#0
 4422 000e 1A72     	 strb r2,[r3,#8]
1603:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     state->previousCluster = previousCluster;
 4423              	 .loc 1 1603 0
 4424 0010 7B68     	 ldr r3,[r7,#4]
 4425 0012 3A68     	 ldr r2,[r7]
 4426 0014 1A60     	 str r2,[r3]
1604:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     state->searchCluster = afatfs.lastClusterAllocated;
 4427              	 .loc 1 1604 0
 4428 0016 064B     	 ldr r3,.L318
 4429 0018 03F58E53 	 add r3,r3,#4544
 4430 001c 1433     	 adds r3,r3,#20
 4431 001e 1A68     	 ldr r2,[r3]
 4432 0020 7B68     	 ldr r3,[r7,#4]
 4433 0022 5A60     	 str r2,[r3,#4]
1605:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 4434              	 .loc 1 1605 0
 4435 0024 0C37     	 adds r7,r7,#12
 4436              	.LCFI204:
 4437              	 .cfi_def_cfa_offset 4
 4438 0026 BD46     	 mov sp,r7
 4439              	.LCFI205:
 4440              	 .cfi_def_cfa_register 13
 4441              	 
 4442 0028 5DF8047B 	 ldr r7,[sp],#4
 4443              	.LCFI206:
 4444              	 .cfi_restore 7
 4445              	 .cfi_def_cfa_offset 0
 4446 002c 7047     	 bx lr
 4447              	.L319:
 4448 002e 00BF     	 .align 2
 4449              	.L318:
 4450 0030 00000000 	 .word afatfs
 4451              	 .cfi_endproc
 4452              	.LFE569:
 4454              	 .section .text.afatfs_appendRegularFreeCluster,"ax",%progbits
 4455              	 .align 2
 4456              	 .thumb
 4457              	 .thumb_func
 4459              	afatfs_appendRegularFreeCluster:
 4460              	.LFB570:
1606:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1607:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1608:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Queue up an operation to append a free cluster to the file and update the file's cursorCluster t
1609:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1610:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * You must seek to the end of the file first, so file.cursorCluster will be 0 for the first call, 
1611:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * `file.cursorPreviousCluster` will be the cluster to append after.
1612:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1613:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Note that the cursorCluster will be updated before this operation is completely finished (i.e. b
1614:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * updated) but you can go ahead and write to it before the operation succeeds.
1615:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1616:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
1617:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - The append completed successfully
1618:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - The operation was queued on the file and will complete later
1619:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE     - Operation could not be queued or append failed, check afatfs.
1620:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1621:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_appendRegularFreeCluster(afatfsFilePtr_t file)
1622:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 4461              	 .loc 1 1622 0
 4462              	 .cfi_startproc
 4463              	 
 4464              	 
 4465 0000 80B5     	 push {r7,lr}
 4466              	.LCFI207:
 4467              	 .cfi_def_cfa_offset 8
 4468              	 .cfi_offset 7,-8
 4469              	 .cfi_offset 14,-4
 4470 0002 82B0     	 sub sp,sp,#8
 4471              	.LCFI208:
 4472              	 .cfi_def_cfa_offset 16
 4473 0004 00AF     	 add r7,sp,#0
 4474              	.LCFI209:
 4475              	 .cfi_def_cfa_register 7
 4476 0006 7860     	 str r0,[r7,#4]
1623:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->operation.operation == AFATFS_FILE_OPERATION_APPEND_FREE_CLUSTER)
 4477              	 .loc 1 1623 0
 4478 0008 7B68     	 ldr r3,[r7,#4]
 4479 000a 93F82330 	 ldrb r3,[r3,#35]
 4480 000e 082B     	 cmp r3,#8
 4481 0010 01D1     	 bne .L321
1624:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_IN_PROGRESS;
 4482              	 .loc 1 1624 0
 4483 0012 0023     	 movs r3,#0
 4484 0014 20E0     	 b .L322
 4485              	.L321:
1625:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1626:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.filesystemFull || afatfs_fileIsBusy(file)) {
 4486              	 .loc 1 1626 0
 4487 0016 124B     	 ldr r3,.L325
 4488 0018 03F58C53 	 add r3,r3,#4480
 4489 001c 0233     	 adds r3,r3,#2
 4490 001e 1B78     	 ldrb r3,[r3]
 4491 0020 002B     	 cmp r3,#0
 4492 0022 05D1     	 bne .L323
 4493              	 .loc 1 1626 0 is_stmt 0 discriminator 1
 4494 0024 7868     	 ldr r0,[r7,#4]
 4495 0026 FFF7FEFF 	 bl afatfs_fileIsBusy
 4496 002a 0346     	 mov r3,r0
 4497 002c 002B     	 cmp r3,#0
 4498 002e 01D0     	 beq .L324
 4499              	.L323:
1627:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_FAILURE;
 4500              	 .loc 1 1627 0 is_stmt 1
 4501 0030 0223     	 movs r3,#2
 4502 0032 11E0     	 b .L322
 4503              	.L324:
1628:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1629:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1630:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->operation.operation = AFATFS_FILE_OPERATION_APPEND_FREE_CLUSTER;
 4504              	 .loc 1 1630 0
 4505 0034 7B68     	 ldr r3,[r7,#4]
 4506 0036 0822     	 movs r2,#8
 4507 0038 83F82320 	 strb r2,[r3,#35]
1631:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1632:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_appendRegularFreeClusterInitOperationState(&file->operation.state.appendFreeCluster, fil
 4508              	 .loc 1 1632 0
 4509 003c 7B68     	 ldr r3,[r7,#4]
 4510 003e 03F12402 	 add r2,r3,#36
 4511 0042 7B68     	 ldr r3,[r7,#4]
 4512 0044 D3F81130 	 ldr r3,[r3,#17]
 4513 0048 1046     	 mov r0,r2
 4514 004a 1946     	 mov r1,r3
 4515 004c FFF7FEFF 	 bl afatfs_appendRegularFreeClusterInitOperationState
1633:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1634:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs_appendRegularFreeClusterContinue(file);
 4516              	 .loc 1 1634 0
 4517 0050 7868     	 ldr r0,[r7,#4]
 4518 0052 FFF7FEFF 	 bl afatfs_appendRegularFreeClusterContinue
 4519 0056 0346     	 mov r3,r0
 4520              	.L322:
1635:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 4521              	 .loc 1 1635 0
 4522 0058 1846     	 mov r0,r3
 4523 005a 0837     	 adds r7,r7,#8
 4524              	.LCFI210:
 4525              	 .cfi_def_cfa_offset 8
 4526 005c BD46     	 mov sp,r7
 4527              	.LCFI211:
 4528              	 .cfi_def_cfa_register 13
 4529              	 
 4530 005e 80BD     	 pop {r7,pc}
 4531              	.L326:
 4532              	 .align 2
 4533              	.L325:
 4534 0060 00000000 	 .word afatfs
 4535              	 .cfi_endproc
 4536              	.LFE570:
 4538              	 .section .text.afatfs_superClusterSize,"ax",%progbits
 4539              	 .align 2
 4540              	 .thumb
 4541              	 .thumb_func
 4543              	afatfs_superClusterSize:
 4544              	.LFB571:
1636:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1637:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
1638:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1639:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1640:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Size of a AFATFS supercluster in bytes
1641:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1642:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** ONLY_EXPOSE_FOR_TESTING
1643:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** uint32_t afatfs_superClusterSize(void)
1644:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 4545              	 .loc 1 1644 0
 4546              	 .cfi_startproc
 4547              	 
 4548              	 
 4549 0000 98B5     	 push {r3,r4,r7,lr}
 4550              	.LCFI212:
 4551              	 .cfi_def_cfa_offset 16
 4552              	 .cfi_offset 3,-16
 4553              	 .cfi_offset 4,-12
 4554              	 .cfi_offset 7,-8
 4555              	 .cfi_offset 14,-4
 4556 0002 00AF     	 add r7,sp,#0
 4557              	.LCFI213:
 4558              	 .cfi_def_cfa_register 7
1645:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs_fatEntriesPerSector() * afatfs_clusterSize();
 4559              	 .loc 1 1645 0
 4560 0004 FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 4561 0008 0446     	 mov r4,r0
 4562 000a FFF7FEFF 	 bl afatfs_clusterSize
 4563 000e 0346     	 mov r3,r0
 4564 0010 03FB04F3 	 mul r3,r3,r4
1646:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 4565              	 .loc 1 1646 0
 4566 0014 1846     	 mov r0,r3
 4567 0016 98BD     	 pop {r3,r4,r7,pc}
 4568              	 .cfi_endproc
 4569              	.LFE571:
 4571              	 .section .text.afatfs_appendSuperclusterContinue,"ax",%progbits
 4572              	 .align 2
 4573              	 .thumb
 4574              	 .thumb_func
 4576              	afatfs_appendSuperclusterContinue:
 4577              	.LFB572:
1647:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1648:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1649:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Continue to attempt to add a supercluster to the end of the given file.
1650:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1651:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * If the file operation was set to AFATFS_FILE_OPERATION_APPEND_SUPERCLUSTER and the operation com
1652:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * operation is cleared.
1653:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1654:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
1655:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - On completion
1656:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - Operation still in progress
1657:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1658:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_appendSuperclusterContinue(afatfsFile_t *file)
1659:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 4578              	 .loc 1 1659 0
 4579              	 .cfi_startproc
 4580              	 
 4581              	 
 4582 0000 90B5     	 push {r4,r7,lr}
 4583              	.LCFI214:
 4584              	 .cfi_def_cfa_offset 12
 4585              	 .cfi_offset 4,-12
 4586              	 .cfi_offset 7,-8
 4587              	 .cfi_offset 14,-4
 4588 0002 85B0     	 sub sp,sp,#20
 4589              	.LCFI215:
 4590              	 .cfi_def_cfa_offset 32
 4591 0004 00AF     	 add r7,sp,#0
 4592              	.LCFI216:
 4593              	 .cfi_def_cfa_register 7
 4594 0006 7860     	 str r0,[r7,#4]
1660:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsAppendSupercluster_t *opState = &file->operation.state.appendSupercluster;
 4595              	 .loc 1 1660 0
 4596 0008 7B68     	 ldr r3,[r7,#4]
 4597 000a 2433     	 adds r3,r3,#36
 4598 000c BB60     	 str r3,[r7,#8]
1661:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1662:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status = AFATFS_OPERATION_FAILURE;
 4599              	 .loc 1 1662 0
 4600 000e 0223     	 movs r3,#2
 4601 0010 FB73     	 strb r3,[r7,#15]
 4602              	.L330:
1663:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1664:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     doMore:
1665:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (opState->phase) {
 4603              	 .loc 1 1665 0
 4604 0012 BB68     	 ldr r3,[r7,#8]
 4605 0014 1B7B     	 ldrb r3,[r3,#12]
 4606 0016 032B     	 cmp r3,#3
 4607 0018 00F29480 	 bhi .L331
 4608 001c 01A2     	 adr r2,.L333
 4609 001e 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 4610 0022 00BF     	 .p2align 2
 4611              	.L333:
 4612 0024 35000000 	 .word .L332+1
 4613 0028 F5000000 	 .word .L334+1
 4614 002c 11010000 	 .word .L335+1
 4615 0030 37010000 	 .word .L336+1
 4616              	 .p2align 1
 4617              	.L332:
1666:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_SUPERCLUSTER_PHASE_INIT:
1667:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Our file steals the first cluster of the freefile
1668:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1669:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // We can go ahead and write to that space before the FAT and directory are updated
1670:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->cursorCluster = afatfs.freeFile.firstCluster;
 4618              	 .loc 1 1670 0
 4619 0034 4D4B     	 ldr r3,.L344
 4620 0036 03F58B53 	 add r3,r3,#4448
 4621 003a 0733     	 adds r3,r3,#7
 4622 003c 1A68     	 ldr r2,[r3]
 4623 003e 7B68     	 ldr r3,[r7,#4]
 4624 0040 C3F80D20 	 str r2,[r3,#13]
1671:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->physicalSize += afatfs_superClusterSize();
 4625              	 .loc 1 1671 0
 4626 0044 FFF7FEFF 	 bl afatfs_superClusterSize
 4627 0048 0246     	 mov r2,r0
 4628 004a 7B68     	 ldr r3,[r7,#4]
 4629 004c D3F80930 	 ldr r3,[r3,#9]
 4630 0050 1A44     	 add r2,r2,r3
 4631 0052 7B68     	 ldr r3,[r7,#4]
 4632 0054 C3F80920 	 str r2,[r3,#9]
1672:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1673:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             /* Remove the first supercluster from the freefile
1674:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              *
1675:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              * Even if the freefile becomes empty, we still don't set its first cluster to zero. Th
1676:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              * afatfs_fileGetNextCluster() can tell where a contiguous file ends (at the start of t
1677:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              *
1678:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              * Note that normally the freefile can't become empty because it is allocated as a non-
1679:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              * of superclusters to avoid precisely this situation.
1680:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              */
1681:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.freeFile.firstCluster += afatfs_fatEntriesPerSector();
 4633              	 .loc 1 1681 0
 4634 0058 FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 4635 005c 0246     	 mov r2,r0
 4636 005e 434B     	 ldr r3,.L344
 4637 0060 03F58B53 	 add r3,r3,#4448
 4638 0064 0733     	 adds r3,r3,#7
 4639 0066 1B68     	 ldr r3,[r3]
 4640 0068 1A44     	 add r2,r2,r3
 4641 006a 404B     	 ldr r3,.L344
 4642 006c 03F58B53 	 add r3,r3,#4448
 4643 0070 0733     	 adds r3,r3,#7
 4644 0072 1A60     	 str r2,[r3]
1682:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.freeFile.logicalSize -= afatfs_superClusterSize();
 4645              	 .loc 1 1682 0
 4646 0074 FFF7FEFF 	 bl afatfs_superClusterSize
 4647 0078 0246     	 mov r2,r0
 4648 007a 3C4B     	 ldr r3,.L344
 4649 007c 03F58A53 	 add r3,r3,#4416
 4650 0080 0D33     	 adds r3,r3,#13
 4651 0082 1B68     	 ldr r3,[r3]
 4652 0084 9A1A     	 subs r2,r3,r2
 4653 0086 394B     	 ldr r3,.L344
 4654 0088 03F58A53 	 add r3,r3,#4416
 4655 008c 0D33     	 adds r3,r3,#13
 4656 008e 1A60     	 str r2,[r3]
1683:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.freeFile.physicalSize -= afatfs_superClusterSize();
 4657              	 .loc 1 1683 0
 4658 0090 FFF7FEFF 	 bl afatfs_superClusterSize
 4659 0094 0246     	 mov r2,r0
 4660 0096 354B     	 ldr r3,.L344
 4661 0098 03F58A53 	 add r3,r3,#4416
 4662 009c 1133     	 adds r3,r3,#17
 4663 009e 1B68     	 ldr r3,[r3]
 4664 00a0 9A1A     	 subs r2,r3,r2
 4665 00a2 324B     	 ldr r3,.L344
 4666 00a4 03F58A53 	 add r3,r3,#4416
 4667 00a8 1133     	 adds r3,r3,#17
 4668 00aa 1A60     	 str r2,[r3]
1684:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1685:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // The new supercluster needs to have its clusters chained contiguously and marked with
1686:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             opState->fatRewriteStartCluster = file->cursorCluster;
 4669              	 .loc 1 1686 0
 4670 00ac 7B68     	 ldr r3,[r7,#4]
 4671 00ae D3F80D20 	 ldr r2,[r3,#13]
 4672 00b2 BB68     	 ldr r3,[r7,#8]
 4673 00b4 5A60     	 str r2,[r3,#4]
1687:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             opState->fatRewriteEndCluster = opState->fatRewriteStartCluster + afatfs_fatEntriesPerS
 4674              	 .loc 1 1687 0
 4675 00b6 BB68     	 ldr r3,[r7,#8]
 4676 00b8 5C68     	 ldr r4,[r3,#4]
 4677 00ba FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 4678 00be 0346     	 mov r3,r0
 4679 00c0 E218     	 adds r2,r4,r3
 4680 00c2 BB68     	 ldr r3,[r7,#8]
 4681 00c4 9A60     	 str r2,[r3,#8]
1688:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1689:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (opState->previousCluster == 0) {
 4682              	 .loc 1 1689 0
 4683 00c6 BB68     	 ldr r3,[r7,#8]
 4684 00c8 1B68     	 ldr r3,[r3]
 4685 00ca 002B     	 cmp r3,#0
 4686 00cc 06D1     	 bne .L337
1690:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // This is the new first cluster in the file so we need to update the directory ent
1691:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 file->firstCluster = file->cursorCluster;
 4687              	 .loc 1 1691 0
 4688 00ce 7B68     	 ldr r3,[r7,#4]
 4689 00d0 D3F80D20 	 ldr r2,[r3,#13]
 4690 00d4 7B68     	 ldr r3,[r7,#4]
 4691 00d6 C3F81F20 	 str r2,[r3,#31]
 4692 00da 07E0     	 b .L338
 4693              	.L337:
1692:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else {
1693:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 /*
1694:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                  * We also need to update the FAT of the supercluster that used to end the file so 
1695:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                  * terminates there
1696:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                  */
1697:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->fatRewriteStartCluster -= afatfs_fatEntriesPerSector();
 4694              	 .loc 1 1697 0
 4695 00dc FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 4696 00e0 0246     	 mov r2,r0
 4697 00e2 BB68     	 ldr r3,[r7,#8]
 4698 00e4 5B68     	 ldr r3,[r3,#4]
 4699 00e6 9A1A     	 subs r2,r3,r2
 4700 00e8 BB68     	 ldr r3,[r7,#8]
 4701 00ea 5A60     	 str r2,[r3,#4]
 4702              	.L338:
1698:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1699:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1700:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             opState->phase = AFATFS_APPEND_SUPERCLUSTER_PHASE_UPDATE_FREEFILE_DIRECTORY;
 4703              	 .loc 1 1700 0
 4704 00ec BB68     	 ldr r3,[r7,#8]
 4705 00ee 0122     	 movs r2,#1
 4706 00f0 1A73     	 strb r2,[r3,#12]
1701:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             goto doMore;
 4707              	 .loc 1 1701 0
 4708 00f2 8EE7     	 b .L330
 4709              	.L334:
1702:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
1703:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_SUPERCLUSTER_PHASE_UPDATE_FREEFILE_DIRECTORY:
1704:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // First update the freefile's directory entry to remove the first supercluster so we d
1705:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_saveDirectoryEntry(&afatfs.freeFile, AFATFS_SAVE_DIRECTORY_NORMAL);
 4710              	 .loc 1 1705 0
 4711 00f4 1E48     	 ldr r0,.L344+4
 4712 00f6 0021     	 movs r1,#0
 4713 00f8 FFF7FEFF 	 bl afatfs_saveDirectoryEntry
 4714 00fc 0346     	 mov r3,r0
 4715 00fe FB73     	 strb r3,[r7,#15]
1706:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1707:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 4716              	 .loc 1 1707 0
 4717 0100 FB7B     	 ldrb r3,[r7,#15]
 4718 0102 012B     	 cmp r3,#1
 4719 0104 03D1     	 bne .L339
1708:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_APPEND_SUPERCLUSTER_PHASE_UPDATE_FAT;
 4720              	 .loc 1 1708 0
 4721 0106 BB68     	 ldr r3,[r7,#8]
 4722 0108 0222     	 movs r2,#2
 4723 010a 1A73     	 strb r2,[r3,#12]
1709:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 4724              	 .loc 1 1709 0
 4725 010c 81E7     	 b .L330
 4726              	.L339:
1710:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1711:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 4727              	 .loc 1 1711 0
 4728 010e 19E0     	 b .L331
 4729              	.L335:
1712:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_SUPERCLUSTER_PHASE_UPDATE_FAT:
1713:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_FATFillWithPattern(AFATFS_FAT_PATTERN_TERMINATED_CHAIN, &opState->fatRe
 4730              	 .loc 1 1713 0
 4731 0110 BB68     	 ldr r3,[r7,#8]
 4732 0112 1A1D     	 adds r2,r3,#4
 4733 0114 BB68     	 ldr r3,[r7,#8]
 4734 0116 9B68     	 ldr r3,[r3,#8]
 4735 0118 0120     	 movs r0,#1
 4736 011a 1146     	 mov r1,r2
 4737 011c 1A46     	 mov r2,r3
 4738 011e FFF7FEFF 	 bl afatfs_FATFillWithPattern
 4739 0122 0346     	 mov r3,r0
 4740 0124 FB73     	 strb r3,[r7,#15]
1714:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1715:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 4741              	 .loc 1 1715 0
 4742 0126 FB7B     	 ldrb r3,[r7,#15]
 4743 0128 012B     	 cmp r3,#1
 4744 012a 03D1     	 bne .L340
1716:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_APPEND_SUPERCLUSTER_PHASE_UPDATE_FILE_DIRECTORY;
 4745              	 .loc 1 1716 0
 4746 012c BB68     	 ldr r3,[r7,#8]
 4747 012e 0322     	 movs r2,#3
 4748 0130 1A73     	 strb r2,[r3,#12]
1717:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 4749              	 .loc 1 1717 0
 4750 0132 6EE7     	 b .L330
 4751              	.L340:
1718:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
1719:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 4752              	 .loc 1 1719 0
 4753 0134 06E0     	 b .L331
 4754              	.L336:
1720:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_APPEND_SUPERCLUSTER_PHASE_UPDATE_FILE_DIRECTORY:
1721:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Update the fileSize/firstCluster in the directory entry for the file
1722:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_saveDirectoryEntry(file, AFATFS_SAVE_DIRECTORY_NORMAL);
 4755              	 .loc 1 1722 0
 4756 0136 7868     	 ldr r0,[r7,#4]
 4757 0138 0021     	 movs r1,#0
 4758 013a FFF7FEFF 	 bl afatfs_saveDirectoryEntry
 4759 013e 0346     	 mov r3,r0
 4760 0140 FB73     	 strb r3,[r7,#15]
1723:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 4761              	 .loc 1 1723 0
 4762 0142 00BF     	 nop
 4763              	.L331:
1724:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1725:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1726:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if ((status == AFATFS_OPERATION_FAILURE || status == AFATFS_OPERATION_SUCCESS) && file->operati
 4764              	 .loc 1 1726 0
 4765 0144 FB7B     	 ldrb r3,[r7,#15]
 4766 0146 022B     	 cmp r3,#2
 4767 0148 02D0     	 beq .L341
 4768              	 .loc 1 1726 0 is_stmt 0 discriminator 2
 4769 014a FB7B     	 ldrb r3,[r7,#15]
 4770 014c 012B     	 cmp r3,#1
 4771 014e 08D1     	 bne .L342
 4772              	.L341:
 4773              	 .loc 1 1726 0 discriminator 3
 4774 0150 7B68     	 ldr r3,[r7,#4]
 4775 0152 93F82330 	 ldrb r3,[r3,#35]
 4776 0156 062B     	 cmp r3,#6
 4777 0158 03D1     	 bne .L342
1727:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 4778              	 .loc 1 1727 0 is_stmt 1
 4779 015a 7B68     	 ldr r3,[r7,#4]
 4780 015c 0022     	 movs r2,#0
 4781 015e 83F82320 	 strb r2,[r3,#35]
 4782              	.L342:
1728:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1729:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1730:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return status;
 4783              	 .loc 1 1730 0
 4784 0162 FB7B     	 ldrb r3,[r7,#15]
1731:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 4785              	 .loc 1 1731 0
 4786 0164 1846     	 mov r0,r3
 4787 0166 1437     	 adds r7,r7,#20
 4788              	.LCFI217:
 4789              	 .cfi_def_cfa_offset 12
 4790 0168 BD46     	 mov sp,r7
 4791              	.LCFI218:
 4792              	 .cfi_def_cfa_register 13
 4793              	 
 4794 016a 90BD     	 pop {r4,r7,pc}
 4795              	.L345:
 4796              	 .align 2
 4797              	.L344:
 4798 016c 00000000 	 .word afatfs
 4799 0170 48110000 	 .word afatfs+4424
 4800              	 .cfi_endproc
 4801              	.LFE572:
 4803              	 .section .text.afatfs_appendSupercluster,"ax",%progbits
 4804              	 .align 2
 4805              	 .thumb
 4806              	 .thumb_func
 4808              	afatfs_appendSupercluster:
 4809              	.LFB573:
1732:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1733:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1734:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Attempt to queue up an operation to append the first supercluster of the freefile to the given `
1735:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * must be at end-of-file).
1736:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1737:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * The new cluster number will be set into the file's cursorCluster.
1738:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1739:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
1740:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - The append completed successfully and the file's cursorCluste
1741:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - The operation was queued on the file and will complete later,
1742:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                                    append in progress.
1743:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE     - Operation could not be queued (file was busy) or append faile
1744:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                                    Check afatfs.fileSystemFull
1745:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1746:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_appendSupercluster(afatfsFilePtr_t file)
1747:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 4810              	 .loc 1 1747 0
 4811              	 .cfi_startproc
 4812              	 
 4813              	 
 4814 0000 80B5     	 push {r7,lr}
 4815              	.LCFI219:
 4816              	 .cfi_def_cfa_offset 8
 4817              	 .cfi_offset 7,-8
 4818              	 .cfi_offset 14,-4
 4819 0002 84B0     	 sub sp,sp,#16
 4820              	.LCFI220:
 4821              	 .cfi_def_cfa_offset 24
 4822 0004 00AF     	 add r7,sp,#0
 4823              	.LCFI221:
 4824              	 .cfi_def_cfa_register 7
 4825 0006 7860     	 str r0,[r7,#4]
1748:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t superClusterSize = afatfs_superClusterSize();
 4826              	 .loc 1 1748 0
 4827 0008 FFF7FEFF 	 bl afatfs_superClusterSize
 4828 000c F860     	 str r0,[r7,#12]
1749:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1750:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->operation.operation == AFATFS_FILE_OPERATION_APPEND_SUPERCLUSTER) {
 4829              	 .loc 1 1750 0
 4830 000e 7B68     	 ldr r3,[r7,#4]
 4831 0010 93F82330 	 ldrb r3,[r3,#35]
 4832 0014 062B     	 cmp r3,#6
 4833 0016 01D1     	 bne .L347
1751:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_IN_PROGRESS;
 4834              	 .loc 1 1751 0
 4835 0018 0023     	 movs r3,#0
 4836 001a 2FE0     	 b .L348
 4837              	.L347:
1752:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1753:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1754:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.freeFile.logicalSize < superClusterSize) {
 4838              	 .loc 1 1754 0
 4839 001c 194B     	 ldr r3,.L352
 4840 001e 03F58A53 	 add r3,r3,#4416
 4841 0022 0D33     	 adds r3,r3,#13
 4842 0024 1A68     	 ldr r2,[r3]
 4843 0026 FB68     	 ldr r3,[r7,#12]
 4844 0028 9A42     	 cmp r2,r3
 4845 002a 05D2     	 bcs .L349
1755:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.filesystemFull = true;
 4846              	 .loc 1 1755 0
 4847 002c 154B     	 ldr r3,.L352
 4848 002e 03F58C53 	 add r3,r3,#4480
 4849 0032 0233     	 adds r3,r3,#2
 4850 0034 0122     	 movs r2,#1
 4851 0036 1A70     	 strb r2,[r3]
 4852              	.L349:
1756:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1757:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1758:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.filesystemFull || afatfs_fileIsBusy(file)) {
 4853              	 .loc 1 1758 0
 4854 0038 124B     	 ldr r3,.L352
 4855 003a 03F58C53 	 add r3,r3,#4480
 4856 003e 0233     	 adds r3,r3,#2
 4857 0040 1B78     	 ldrb r3,[r3]
 4858 0042 002B     	 cmp r3,#0
 4859 0044 05D1     	 bne .L350
 4860              	 .loc 1 1758 0 is_stmt 0 discriminator 1
 4861 0046 7868     	 ldr r0,[r7,#4]
 4862 0048 FFF7FEFF 	 bl afatfs_fileIsBusy
 4863 004c 0346     	 mov r3,r0
 4864 004e 002B     	 cmp r3,#0
 4865 0050 01D0     	 beq .L351
 4866              	.L350:
1759:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_FAILURE;
 4867              	 .loc 1 1759 0 is_stmt 1
 4868 0052 0223     	 movs r3,#2
 4869 0054 12E0     	 b .L348
 4870              	.L351:
1760:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1761:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1762:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsAppendSupercluster_t *opState = &file->operation.state.appendSupercluster;
 4871              	 .loc 1 1762 0
 4872 0056 7B68     	 ldr r3,[r7,#4]
 4873 0058 2433     	 adds r3,r3,#36
 4874 005a BB60     	 str r3,[r7,#8]
1763:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1764:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->operation.operation = AFATFS_FILE_OPERATION_APPEND_SUPERCLUSTER;
 4875              	 .loc 1 1764 0
 4876 005c 7B68     	 ldr r3,[r7,#4]
 4877 005e 0622     	 movs r2,#6
 4878 0060 83F82320 	 strb r2,[r3,#35]
1765:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->phase = AFATFS_APPEND_SUPERCLUSTER_PHASE_INIT;
 4879              	 .loc 1 1765 0
 4880 0064 BB68     	 ldr r3,[r7,#8]
 4881 0066 0022     	 movs r2,#0
 4882 0068 1A73     	 strb r2,[r3,#12]
1766:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->previousCluster = file->cursorPreviousCluster;
 4883              	 .loc 1 1766 0
 4884 006a 7B68     	 ldr r3,[r7,#4]
 4885 006c D3F81120 	 ldr r2,[r3,#17]
 4886 0070 BB68     	 ldr r3,[r7,#8]
 4887 0072 1A60     	 str r2,[r3]
1767:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1768:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs_appendSuperclusterContinue(file);
 4888              	 .loc 1 1768 0
 4889 0074 7868     	 ldr r0,[r7,#4]
 4890 0076 FFF7FEFF 	 bl afatfs_appendSuperclusterContinue
 4891 007a 0346     	 mov r3,r0
 4892              	.L348:
1769:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 4893              	 .loc 1 1769 0
 4894 007c 1846     	 mov r0,r3
 4895 007e 1037     	 adds r7,r7,#16
 4896              	.LCFI222:
 4897              	 .cfi_def_cfa_offset 8
 4898 0080 BD46     	 mov sp,r7
 4899              	.LCFI223:
 4900              	 .cfi_def_cfa_register 13
 4901              	 
 4902 0082 80BD     	 pop {r7,pc}
 4903              	.L353:
 4904              	 .align 2
 4905              	.L352:
 4906 0084 00000000 	 .word afatfs
 4907              	 .cfi_endproc
 4908              	.LFE573:
 4910              	 .section .text.afatfs_appendFreeCluster,"ax",%progbits
 4911              	 .align 2
 4912              	 .thumb
 4913              	 .thumb_func
 4915              	afatfs_appendFreeCluster:
 4916              	.LFB574:
1770:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1771:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
1772:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1773:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1774:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Queue an operation to add a cluster of free space to the end of the file. Must be called when th
1775:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * is beyond the last allocated cluster.
1776:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1777:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_appendFreeCluster(afatfsFilePtr_t file)
1778:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 4917              	 .loc 1 1778 0
 4918              	 .cfi_startproc
 4919              	 
 4920              	 
 4921 0000 80B5     	 push {r7,lr}
 4922              	.LCFI224:
 4923              	 .cfi_def_cfa_offset 8
 4924              	 .cfi_offset 7,-8
 4925              	 .cfi_offset 14,-4
 4926 0002 84B0     	 sub sp,sp,#16
 4927              	.LCFI225:
 4928              	 .cfi_def_cfa_offset 24
 4929 0004 00AF     	 add r7,sp,#0
 4930              	.LCFI226:
 4931              	 .cfi_def_cfa_register 7
 4932 0006 7860     	 str r0,[r7,#4]
1779:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status;
1780:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1781:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
1782:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if ((file->mode & AFATFS_FILE_MODE_CONTIGUOUS) != 0) {
 4933              	 .loc 1 1782 0
 4934 0008 7B68     	 ldr r3,[r7,#4]
 4935 000a 5B7D     	 ldrb r3,[r3,#21]
 4936 000c 03F00803 	 and r3,r3,#8
 4937 0010 002B     	 cmp r3,#0
 4938 0012 05D0     	 beq .L355
1783:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Steal the first cluster from the beginning of the freefile if we can
1784:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         status = afatfs_appendSupercluster(file);
 4939              	 .loc 1 1784 0
 4940 0014 7868     	 ldr r0,[r7,#4]
 4941 0016 FFF7FEFF 	 bl afatfs_appendSupercluster
 4942 001a 0346     	 mov r3,r0
 4943 001c FB73     	 strb r3,[r7,#15]
 4944 001e 04E0     	 b .L356
 4945              	.L355:
1785:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else
1786:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
1787:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     {
1788:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         status = afatfs_appendRegularFreeCluster(file);
 4946              	 .loc 1 1788 0
 4947 0020 7868     	 ldr r0,[r7,#4]
 4948 0022 FFF7FEFF 	 bl afatfs_appendRegularFreeCluster
 4949 0026 0346     	 mov r3,r0
 4950 0028 FB73     	 strb r3,[r7,#15]
 4951              	.L356:
1789:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1790:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1791:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return status;
 4952              	 .loc 1 1791 0
 4953 002a FB7B     	 ldrb r3,[r7,#15]
1792:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 4954              	 .loc 1 1792 0
 4955 002c 1846     	 mov r0,r3
 4956 002e 1037     	 adds r7,r7,#16
 4957              	.LCFI227:
 4958              	 .cfi_def_cfa_offset 8
 4959 0030 BD46     	 mov sp,r7
 4960              	.LCFI228:
 4961              	 .cfi_def_cfa_register 13
 4962              	 
 4963 0032 80BD     	 pop {r7,pc}
 4964              	 .cfi_endproc
 4965              	.LFE574:
 4967              	 .section .text.afatfs_isEndOfAllocatedFile,"ax",%progbits
 4968              	 .align 2
 4969              	 .thumb
 4970              	 .thumb_func
 4972              	afatfs_isEndOfAllocatedFile:
 4973              	.LFB575:
1793:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1794:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1795:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true if the file's cursor is sitting beyond the end of the last allocated cluster (i.e. 
1796:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * is not checked).
1797:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1798:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static bool afatfs_isEndOfAllocatedFile(afatfsFilePtr_t file)
1799:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 4974              	 .loc 1 1799 0
 4975              	 .cfi_startproc
 4976              	 
 4977              	 
 4978 0000 80B5     	 push {r7,lr}
 4979              	.LCFI229:
 4980              	 .cfi_def_cfa_offset 8
 4981              	 .cfi_offset 7,-8
 4982              	 .cfi_offset 14,-4
 4983 0002 82B0     	 sub sp,sp,#8
 4984              	.LCFI230:
 4985              	 .cfi_def_cfa_offset 16
 4986 0004 00AF     	 add r7,sp,#0
 4987              	.LCFI231:
 4988              	 .cfi_def_cfa_register 7
 4989 0006 7860     	 str r0,[r7,#4]
1800:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->type == AFATFS_FILE_TYPE_FAT16_ROOT_DIRECTORY) {
 4990              	 .loc 1 1800 0
 4991 0008 7B68     	 ldr r3,[r7,#4]
 4992 000a 1B78     	 ldrb r3,[r3]
 4993 000c 022B     	 cmp r3,#2
 4994 000e 0DD1     	 bne .L359
1801:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return file->cursorOffset >= AFATFS_SECTOR_SIZE * afatfs.rootDirectorySectors;
 4995              	 .loc 1 1801 0
 4996 0010 7B68     	 ldr r3,[r7,#4]
 4997 0012 D3F80120 	 ldr r2,[r3,#1]
 4998 0016 114B     	 ldr r3,.L364
 4999 0018 03F58F53 	 add r3,r3,#4576
 5000 001c 1B68     	 ldr r3,[r3]
 5001 001e 5B02     	 lsls r3,r3,#9
 5002 0020 9A42     	 cmp r2,r3
 5003 0022 2CBF     	 ite cs
 5004 0024 0123     	 movcs r3,#1
 5005 0026 0023     	 movcc r3,#0
 5006 0028 DBB2     	 uxtb r3,r3
 5007 002a 13E0     	 b .L360
 5008              	.L359:
1802:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
1803:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return file->cursorCluster == 0 || afatfs_FATIsEndOfChainMarker(file->cursorCluster);
 5009              	 .loc 1 1803 0
 5010 002c 7B68     	 ldr r3,[r7,#4]
 5011 002e D3F80D30 	 ldr r3,[r3,#13]
 5012 0032 002B     	 cmp r3,#0
 5013 0034 08D0     	 beq .L361
 5014              	 .loc 1 1803 0 is_stmt 0 discriminator 2
 5015 0036 7B68     	 ldr r3,[r7,#4]
 5016 0038 D3F80D30 	 ldr r3,[r3,#13]
 5017 003c 1846     	 mov r0,r3
 5018 003e FFF7FEFF 	 bl afatfs_FATIsEndOfChainMarker
 5019 0042 0346     	 mov r3,r0
 5020 0044 002B     	 cmp r3,#0
 5021 0046 01D0     	 beq .L362
 5022              	.L361:
 5023              	 .loc 1 1803 0 discriminator 3
 5024 0048 0123     	 movs r3,#1
 5025 004a 00E0     	 b .L363
 5026              	.L362:
 5027              	 .loc 1 1803 0 discriminator 4
 5028 004c 0023     	 movs r3,#0
 5029              	.L363:
 5030              	 .loc 1 1803 0 discriminator 6
 5031 004e 03F00103 	 and r3,r3,#1
 5032 0052 DBB2     	 uxtb r3,r3
 5033              	.L360:
1804:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1805:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 5034              	 .loc 1 1805 0 is_stmt 1
 5035 0054 1846     	 mov r0,r3
 5036 0056 0837     	 adds r7,r7,#8
 5037              	.LCFI232:
 5038              	 .cfi_def_cfa_offset 8
 5039 0058 BD46     	 mov sp,r7
 5040              	.LCFI233:
 5041              	 .cfi_def_cfa_register 13
 5042              	 
 5043 005a 80BD     	 pop {r7,pc}
 5044              	.L365:
 5045              	 .align 2
 5046              	.L364:
 5047 005c 00000000 	 .word afatfs
 5048              	 .cfi_endproc
 5049              	.LFE575:
 5051              	 .section .text.afatfs_fileRetainCursorSectorForRead,"ax",%progbits
 5052              	 .align 2
 5053              	 .thumb
 5054              	 .thumb_func
 5056              	afatfs_fileRetainCursorSectorForRead:
 5057              	.LFB576:
1806:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1807:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1808:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Take a lock on the sector at the current file cursor position.
1809:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1810:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns a pointer to the sector buffer if successful, or NULL if at the end of file (check afatf
1811:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * or the sector has not yet been read in from disk.
1812:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1813:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint8_t* afatfs_fileRetainCursorSectorForRead(afatfsFilePtr_t file)
1814:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 5058              	 .loc 1 1814 0
 5059              	 .cfi_startproc
 5060              	 
 5061              	 
 5062 0000 80B5     	 push {r7,lr}
 5063              	.LCFI234:
 5064              	 .cfi_def_cfa_offset 8
 5065              	 .cfi_offset 7,-8
 5066              	 .cfi_offset 14,-4
 5067 0002 86B0     	 sub sp,sp,#24
 5068              	.LCFI235:
 5069              	 .cfi_def_cfa_offset 32
 5070 0004 00AF     	 add r7,sp,#0
 5071              	.LCFI236:
 5072              	 .cfi_def_cfa_register 7
 5073 0006 7860     	 str r0,[r7,#4]
1815:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t *result;
1816:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1817:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t physicalSector = afatfs_fileGetCursorPhysicalSector(file);
 5074              	 .loc 1 1817 0
 5075 0008 7868     	 ldr r0,[r7,#4]
 5076 000a FFF7FEFF 	 bl afatfs_fileGetCursorPhysicalSector
 5077 000e 7861     	 str r0,[r7,#20]
1818:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1819:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /* If we've already got a locked sector then we can assume that was the same one that's at the 
1820:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * cache is invalidated when crossing a sector boundary)
1821:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
1822:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->readRetainCacheIndex != -1) {
 5078              	 .loc 1 1822 0
 5079 0010 7B68     	 ldr r3,[r7,#4]
 5080 0012 1B7E     	 ldrb r3,[r3,#24]
 5081 0014 5BB2     	 sxtb r3,r3
 5082 0016 B3F1FF3F 	 cmp r3,#-1
 5083 001a 22D0     	 beq .L367
1823:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (!afatfs_assert(physicalSector == afatfs.cacheDescriptor[file->readRetainCacheIndex].sec
 5084              	 .loc 1 1823 0
 5085 001c 7B68     	 ldr r3,[r7,#4]
 5086 001e 1B7E     	 ldrb r3,[r3,#24]
 5087 0020 5BB2     	 sxtb r3,r3
 5088 0022 264A     	 ldr r2,.L374
 5089 0024 03F20113 	 addw r3,r3,#257
 5090 0028 1B01     	 lsls r3,r3,#4
 5091 002a 1344     	 add r3,r3,r2
 5092 002c 5A68     	 ldr r2,[r3,#4]
 5093 002e 7B69     	 ldr r3,[r7,#20]
 5094 0030 9A42     	 cmp r2,r3
 5095 0032 0CBF     	 ite eq
 5096 0034 0123     	 moveq r3,#1
 5097 0036 0023     	 movne r3,#0
 5098 0038 DBB2     	 uxtb r3,r3
 5099 003a 1846     	 mov r0,r3
 5100 003c FFF7FEFF 	 bl afatfs_assert
 5101 0040 0346     	 mov r3,r0
 5102 0042 83F00103 	 eor r3,r3,#1
 5103 0046 DBB2     	 uxtb r3,r3
 5104 0048 002B     	 cmp r3,#0
 5105 004a 01D0     	 beq .L368
1824:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return NULL;
 5106              	 .loc 1 1824 0
 5107 004c 0023     	 movs r3,#0
 5108 004e 31E0     	 b .L373
 5109              	.L368:
1825:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1826:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1827:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         result = afatfs_cacheSectorGetMemory(file->readRetainCacheIndex);
 5110              	 .loc 1 1827 0
 5111 0050 7B68     	 ldr r3,[r7,#4]
 5112 0052 1B7E     	 ldrb r3,[r3,#24]
 5113 0054 5BB2     	 sxtb r3,r3
 5114 0056 1846     	 mov r0,r3
 5115 0058 FFF7FEFF 	 bl afatfs_cacheSectorGetMemory
 5116 005c 0346     	 mov r3,r0
 5117 005e FB60     	 str r3,[r7,#12]
 5118 0060 27E0     	 b .L370
 5119              	.L367:
 5120              	.LBB23:
1828:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
1829:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_isEndOfAllocatedFile(file)) {
 5121              	 .loc 1 1829 0
 5122 0062 7868     	 ldr r0,[r7,#4]
 5123 0064 FFF7FEFF 	 bl afatfs_isEndOfAllocatedFile
 5124 0068 0346     	 mov r3,r0
 5125 006a 002B     	 cmp r3,#0
 5126 006c 01D0     	 beq .L371
1830:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return NULL;
 5127              	 .loc 1 1830 0
 5128 006e 0023     	 movs r3,#0
 5129 0070 20E0     	 b .L373
 5130              	.L371:
1831:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1832:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1833:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_assert(physicalSector > 0); // We never read the root sector using files
 5131              	 .loc 1 1833 0
 5132 0072 7B69     	 ldr r3,[r7,#20]
 5133 0074 002B     	 cmp r3,#0
 5134 0076 14BF     	 ite ne
 5135 0078 0123     	 movne r3,#1
 5136 007a 0023     	 moveq r3,#0
 5137 007c DBB2     	 uxtb r3,r3
 5138 007e 1846     	 mov r0,r3
 5139 0080 FFF7FEFF 	 bl afatfs_assert
1834:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1835:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsOperationStatus_e status = afatfs_cacheSector(
 5140              	 .loc 1 1835 0
 5141 0084 07F10C03 	 add r3,r7,#12
 5142 0088 7869     	 ldr r0,[r7,#20]
 5143 008a 1946     	 mov r1,r3
 5144 008c 1122     	 movs r2,#17
 5145 008e 0023     	 movs r3,#0
 5146 0090 FFF7FEFF 	 bl afatfs_cacheSector
 5147 0094 0346     	 mov r3,r0
 5148 0096 FB74     	 strb r3,[r7,#19]
1836:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             physicalSector,
1837:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             &result,
1838:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             AFATFS_CACHE_READ | AFATFS_CACHE_RETAIN,
1839:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             0
1840:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         );
1841:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1842:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (status != AFATFS_OPERATION_SUCCESS) {
 5149              	 .loc 1 1842 0
 5150 0098 FB7C     	 ldrb r3,[r7,#19]
 5151 009a 012B     	 cmp r3,#1
 5152 009c 01D0     	 beq .L372
1843:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Sector not ready for read
1844:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return NULL;
 5153              	 .loc 1 1844 0
 5154 009e 0023     	 movs r3,#0
 5155 00a0 08E0     	 b .L373
 5156              	.L372:
1845:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1846:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1847:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->readRetainCacheIndex = afatfs_getCacheDescriptorIndexForBuffer(result);
 5157              	 .loc 1 1847 0
 5158 00a2 FB68     	 ldr r3,[r7,#12]
 5159 00a4 1846     	 mov r0,r3
 5160 00a6 FFF7FEFF 	 bl afatfs_getCacheDescriptorIndexForBuffer
 5161 00aa 0346     	 mov r3,r0
 5162 00ac DAB2     	 uxtb r2,r3
 5163 00ae 7B68     	 ldr r3,[r7,#4]
 5164 00b0 1A76     	 strb r2,[r3,#24]
 5165              	.L370:
 5166              	.LBE23:
1848:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1849:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1850:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return result;
 5167              	 .loc 1 1850 0
 5168 00b2 FB68     	 ldr r3,[r7,#12]
 5169              	.L373:
1851:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 5170              	 .loc 1 1851 0 discriminator 1
 5171 00b4 1846     	 mov r0,r3
 5172 00b6 1837     	 adds r7,r7,#24
 5173              	.LCFI237:
 5174              	 .cfi_def_cfa_offset 8
 5175 00b8 BD46     	 mov sp,r7
 5176              	.LCFI238:
 5177              	 .cfi_def_cfa_register 13
 5178              	 
 5179 00ba 80BD     	 pop {r7,pc}
 5180              	.L375:
 5181              	 .align 2
 5182              	.L374:
 5183 00bc 00000000 	 .word afatfs
 5184              	 .cfi_endproc
 5185              	.LFE576:
 5187              	 .section .text.afatfs_fileLockCursorSectorForWrite,"ax",%progbits
 5188              	 .align 2
 5189              	 .thumb
 5190              	 .thumb_func
 5192              	afatfs_fileLockCursorSectorForWrite:
 5193              	.LFB577:
1852:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1853:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1854:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Lock the sector at the file's cursor position for write, and return a reference to the memory fo
1855:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1856:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns NULL if the cache was too busy, try again later.
1857:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1858:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static uint8_t* afatfs_fileLockCursorSectorForWrite(afatfsFilePtr_t file)
1859:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 5194              	 .loc 1 1859 0
 5195              	 .cfi_startproc
 5196              	 
 5197              	 
 5198 0000 90B5     	 push {r4,r7,lr}
 5199              	.LCFI239:
 5200              	 .cfi_def_cfa_offset 12
 5201              	 .cfi_offset 4,-12
 5202              	 .cfi_offset 7,-8
 5203              	 .cfi_offset 14,-4
 5204 0002 8DB0     	 sub sp,sp,#52
 5205              	.LCFI240:
 5206              	 .cfi_def_cfa_offset 64
 5207 0004 00AF     	 add r7,sp,#0
 5208              	.LCFI241:
 5209              	 .cfi_def_cfa_register 7
 5210 0006 7860     	 str r0,[r7,#4]
1860:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status;
1861:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t *result;
1862:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t eraseBlockCount;
1863:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1864:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Do we already have a sector locked in our cache at the cursor position?
1865:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->writeLockedCacheIndex != -1) {
 5211              	 .loc 1 1865 0
 5212 0008 7B68     	 ldr r3,[r7,#4]
 5213 000a DB7D     	 ldrb r3,[r3,#23]
 5214 000c 5BB2     	 sxtb r3,r3
 5215 000e B3F1FF3F 	 cmp r3,#-1
 5216 0012 26D0     	 beq .L377
 5217              	.LBB24:
1866:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t physicalSector = afatfs_fileGetCursorPhysicalSector(file);
 5218              	 .loc 1 1866 0
 5219 0014 7868     	 ldr r0,[r7,#4]
 5220 0016 FFF7FEFF 	 bl afatfs_fileGetCursorPhysicalSector
 5221 001a 7862     	 str r0,[r7,#36]
1867:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1868:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (!afatfs_assert(physicalSector == afatfs.cacheDescriptor[file->writeLockedCacheIndex].se
 5222              	 .loc 1 1868 0
 5223 001c 7B68     	 ldr r3,[r7,#4]
 5224 001e DB7D     	 ldrb r3,[r3,#23]
 5225 0020 5BB2     	 sxtb r3,r3
 5226 0022 4A4A     	 ldr r2,.L388
 5227 0024 03F20113 	 addw r3,r3,#257
 5228 0028 1B01     	 lsls r3,r3,#4
 5229 002a 1344     	 add r3,r3,r2
 5230 002c 5A68     	 ldr r2,[r3,#4]
 5231 002e 7B6A     	 ldr r3,[r7,#36]
 5232 0030 9A42     	 cmp r2,r3
 5233 0032 0CBF     	 ite eq
 5234 0034 0123     	 moveq r3,#1
 5235 0036 0023     	 movne r3,#0
 5236 0038 DBB2     	 uxtb r3,r3
 5237 003a 1846     	 mov r0,r3
 5238 003c FFF7FEFF 	 bl afatfs_assert
 5239 0040 0346     	 mov r3,r0
 5240 0042 83F00103 	 eor r3,r3,#1
 5241 0046 DBB2     	 uxtb r3,r3
 5242 0048 002B     	 cmp r3,#0
 5243 004a 01D0     	 beq .L378
1869:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return NULL;
 5244              	 .loc 1 1869 0
 5245 004c 0023     	 movs r3,#0
 5246 004e 78E0     	 b .L387
 5247              	.L378:
1870:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1871:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1872:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         result = afatfs_cacheSectorGetMemory(file->writeLockedCacheIndex);
 5248              	 .loc 1 1872 0
 5249 0050 7B68     	 ldr r3,[r7,#4]
 5250 0052 DB7D     	 ldrb r3,[r3,#23]
 5251 0054 5BB2     	 sxtb r3,r3
 5252 0056 1846     	 mov r0,r3
 5253 0058 FFF7FEFF 	 bl afatfs_cacheSectorGetMemory
 5254 005c 0346     	 mov r3,r0
 5255 005e BB60     	 str r3,[r7,#8]
 5256              	.LBE24:
 5257 0060 6EE0     	 b .L380
 5258              	.L377:
 5259              	.LBB25:
1873:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
1874:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Find / allocate a sector and lock it in the cache so we can rely on it sticking around
1875:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1876:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Are we at the start of an empty file or the end of a non-empty file? If so we need to ad
1877:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_isEndOfAllocatedFile(file) && afatfs_appendFreeCluster(file) != AFATFS_OPERATION
 5260              	 .loc 1 1877 0
 5261 0062 7868     	 ldr r0,[r7,#4]
 5262 0064 FFF7FEFF 	 bl afatfs_isEndOfAllocatedFile
 5263 0068 0346     	 mov r3,r0
 5264 006a 002B     	 cmp r3,#0
 5265 006c 07D0     	 beq .L381
 5266              	 .loc 1 1877 0 is_stmt 0 discriminator 1
 5267 006e 7868     	 ldr r0,[r7,#4]
 5268 0070 FFF7FEFF 	 bl afatfs_appendFreeCluster
 5269 0074 0346     	 mov r3,r0
 5270 0076 012B     	 cmp r3,#1
 5271 0078 01D0     	 beq .L381
1878:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // The extension of the file is in progress so please call us again later to try again
1879:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return NULL;
 5272              	 .loc 1 1879 0 is_stmt 1
 5273 007a 0023     	 movs r3,#0
 5274 007c 61E0     	 b .L387
 5275              	.L381:
1880:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1881:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1882:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t physicalSector = afatfs_fileGetCursorPhysicalSector(file);
 5276              	 .loc 1 1882 0
 5277 007e 7868     	 ldr r0,[r7,#4]
 5278 0080 FFF7FEFF 	 bl afatfs_fileGetCursorPhysicalSector
 5279 0084 3862     	 str r0,[r7,#32]
1883:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint8_t cacheFlags = AFATFS_CACHE_WRITE | AFATFS_CACHE_LOCK;
 5280              	 .loc 1 1883 0
 5281 0086 0623     	 movs r3,#6
 5282 0088 87F82B30 	 strb r3,[r7,#43]
1884:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t cursorOffsetInSector = file->cursorOffset % AFATFS_SECTOR_SIZE;
 5283              	 .loc 1 1884 0
 5284 008c 7B68     	 ldr r3,[r7,#4]
 5285 008e D3F80130 	 ldr r3,[r3,#1]
 5286 0092 C3F30803 	 ubfx r3,r3,#0,#9
 5287 0096 FB61     	 str r3,[r7,#28]
1885:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t offsetOfStartOfSector = file->cursorOffset & ~((uint32_t) AFATFS_SECTOR_SIZE - 1);
 5288              	 .loc 1 1885 0
 5289 0098 7B68     	 ldr r3,[r7,#4]
 5290 009a D3F80130 	 ldr r3,[r3,#1]
 5291 009e 23F4FF73 	 bic r3,r3,#510
 5292 00a2 23F00103 	 bic r3,r3,#1
 5293 00a6 BB61     	 str r3,[r7,#24]
1886:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t offsetOfEndOfSector = offsetOfStartOfSector + AFATFS_SECTOR_SIZE;
 5294              	 .loc 1 1886 0
 5295 00a8 BB69     	 ldr r3,[r7,#24]
 5296 00aa 03F50073 	 add r3,r3,#512
 5297 00ae 7B61     	 str r3,[r7,#20]
1887:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1888:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         /*
1889:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * If there is data before the write point in this sector, or there could be data after the
1890:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * then we need to have the original contents of the sector in the cache for us to merge in
1891:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          */
1892:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (
 5298              	 .loc 1 1892 0
 5299 00b0 FB69     	 ldr r3,[r7,#28]
 5300 00b2 002B     	 cmp r3,#0
 5301 00b4 05D1     	 bne .L382
1893:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             cursorOffsetInSector > 0
1894:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             || offsetOfEndOfSector < file->logicalSize
 5302              	 .loc 1 1894 0
 5303 00b6 7B68     	 ldr r3,[r7,#4]
 5304 00b8 D3F80520 	 ldr r2,[r3,#5]
 5305 00bc 7B69     	 ldr r3,[r7,#20]
 5306 00be 9A42     	 cmp r2,r3
 5307 00c0 05D9     	 bls .L383
 5308              	.L382:
1895:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         ) {
1896:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             cacheFlags |= AFATFS_CACHE_READ;
 5309              	 .loc 1 1896 0
 5310 00c2 97F82B30 	 ldrb r3,[r7,#43]
 5311 00c6 43F00103 	 orr r3,r3,#1
 5312 00ca 87F82B30 	 strb r3,[r7,#43]
 5313              	.L383:
1897:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1898:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1899:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // In contiguous append mode, we'll pre-erase the whole supercluster
1900:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if ((file->mode & (AFATFS_FILE_MODE_APPEND | AFATFS_FILE_MODE_CONTIGUOUS)) == (AFATFS_FILE_
 5314              	 .loc 1 1900 0
 5315 00ce 7B68     	 ldr r3,[r7,#4]
 5316 00d0 5B7D     	 ldrb r3,[r3,#21]
 5317 00d2 03F00C03 	 and r3,r3,#12
 5318 00d6 0C2B     	 cmp r3,#12
 5319 00d8 17D1     	 bne .L384
 5320              	.LBB26:
1901:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             uint32_t cursorOffsetInSupercluster = file->cursorOffset & (afatfs_superClusterSize() -
 5321              	 .loc 1 1901 0
 5322 00da 7B68     	 ldr r3,[r7,#4]
 5323 00dc D3F80140 	 ldr r4,[r3,#1]
 5324 00e0 FFF7FEFF 	 bl afatfs_superClusterSize
 5325 00e4 0346     	 mov r3,r0
 5326 00e6 013B     	 subs r3,r3,#1
 5327 00e8 2340     	 ands r3,r3,r4
 5328 00ea 3B61     	 str r3,[r7,#16]
1902:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1903:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             eraseBlockCount = afatfs_fatEntriesPerSector() * afatfs.sectorsPerCluster - cursorOffse
 5329              	 .loc 1 1903 0
 5330 00ec FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 5331 00f0 0246     	 mov r2,r0
 5332 00f2 164B     	 ldr r3,.L388
 5333 00f4 03F58E53 	 add r3,r3,#4544
 5334 00f8 1033     	 adds r3,r3,#16
 5335 00fa 1B68     	 ldr r3,[r3]
 5336 00fc 03FB02F2 	 mul r2,r3,r2
 5337 0100 3B69     	 ldr r3,[r7,#16]
 5338 0102 5B0A     	 lsrs r3,r3,#9
 5339 0104 D31A     	 subs r3,r2,r3
 5340 0106 FB62     	 str r3,[r7,#44]
 5341              	.LBE26:
 5342 0108 01E0     	 b .L385
 5343              	.L384:
1904:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
1905:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             eraseBlockCount = 0;
 5344              	 .loc 1 1905 0
 5345 010a 0023     	 movs r3,#0
 5346 010c FB62     	 str r3,[r7,#44]
 5347              	.L385:
1906:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1907:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1908:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         status = afatfs_cacheSector(
 5348              	 .loc 1 1908 0
 5349 010e 07F10802 	 add r2,r7,#8
 5350 0112 97F82B30 	 ldrb r3,[r7,#43]
 5351 0116 386A     	 ldr r0,[r7,#32]
 5352 0118 1146     	 mov r1,r2
 5353 011a 1A46     	 mov r2,r3
 5354 011c FB6A     	 ldr r3,[r7,#44]
 5355 011e FFF7FEFF 	 bl afatfs_cacheSector
 5356 0122 0346     	 mov r3,r0
 5357 0124 FB73     	 strb r3,[r7,#15]
1909:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             physicalSector,
1910:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             &result,
1911:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             cacheFlags,
1912:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             eraseBlockCount
1913:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         );
1914:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1915:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (status != AFATFS_OPERATION_SUCCESS) {
 5358              	 .loc 1 1915 0
 5359 0126 FB7B     	 ldrb r3,[r7,#15]
 5360 0128 012B     	 cmp r3,#1
 5361 012a 01D0     	 beq .L386
1916:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Not enough cache available to accept this write / sector not ready for read
1917:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return NULL;
 5362              	 .loc 1 1917 0
 5363 012c 0023     	 movs r3,#0
 5364 012e 08E0     	 b .L387
 5365              	.L386:
1918:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1919:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1920:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->writeLockedCacheIndex = afatfs_getCacheDescriptorIndexForBuffer(result);
 5366              	 .loc 1 1920 0
 5367 0130 BB68     	 ldr r3,[r7,#8]
 5368 0132 1846     	 mov r0,r3
 5369 0134 FFF7FEFF 	 bl afatfs_getCacheDescriptorIndexForBuffer
 5370 0138 0346     	 mov r3,r0
 5371 013a DAB2     	 uxtb r2,r3
 5372 013c 7B68     	 ldr r3,[r7,#4]
 5373 013e DA75     	 strb r2,[r3,#23]
 5374              	.L380:
 5375              	.LBE25:
1921:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1922:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1923:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return result;
 5376              	 .loc 1 1923 0
 5377 0140 BB68     	 ldr r3,[r7,#8]
 5378              	.L387:
1924:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 5379              	 .loc 1 1924 0 discriminator 1
 5380 0142 1846     	 mov r0,r3
 5381 0144 3437     	 adds r7,r7,#52
 5382              	.LCFI242:
 5383              	 .cfi_def_cfa_offset 12
 5384 0146 BD46     	 mov sp,r7
 5385              	.LCFI243:
 5386              	 .cfi_def_cfa_register 13
 5387              	 
 5388 0148 90BD     	 pop {r4,r7,pc}
 5389              	.L389:
 5390 014a 00BF     	 .align 2
 5391              	.L388:
 5392 014c 00000000 	 .word afatfs
 5393              	 .cfi_endproc
 5394              	.LFE577:
 5396              	 .section .text.afatfs_fseekAtomic,"ax",%progbits
 5397              	 .align 2
 5398              	 .thumb
 5399              	 .thumb_func
 5401              	afatfs_fseekAtomic:
 5402              	.LFB578:
1925:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1926:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1927:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Attempt to seek the file pointer by the offset, relative to the current position.
1928:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1929:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true if the seek was completed, or false if you should try again later by calling this r
1930:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * cursor is not moved and no seek operation is queued on the file for you).
1931:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1932:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * You can only seek forwards by the size of a cluster or less, or backwards to stay within the sam
1933:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * false will always be returned (calling this routine again will never make progress on the seek).
1934:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
1935:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * This amount of seek is special because we will have to wait on at most one read operation, so it
1936:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * the seek atomic.
1937:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
1938:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static bool afatfs_fseekAtomic(afatfsFilePtr_t file, int32_t offset)
1939:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 5403              	 .loc 1 1939 0
 5404              	 .cfi_startproc
 5405              	 
 5406              	 
 5407 0000 80B5     	 push {r7,lr}
 5408              	.LCFI244:
 5409              	 .cfi_def_cfa_offset 8
 5410              	 .cfi_offset 7,-8
 5411              	 .cfi_offset 14,-4
 5412 0002 8AB0     	 sub sp,sp,#40
 5413              	.LCFI245:
 5414              	 .cfi_def_cfa_offset 48
 5415 0004 00AF     	 add r7,sp,#0
 5416              	.LCFI246:
 5417              	 .cfi_def_cfa_register 7
 5418 0006 7860     	 str r0,[r7,#4]
 5419 0008 3960     	 str r1,[r7]
1940:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Seeks within a sector
1941:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t newSectorOffset = offset + file->cursorOffset % AFATFS_SECTOR_SIZE;
 5420              	 .loc 1 1941 0
 5421 000a 7B68     	 ldr r3,[r7,#4]
 5422 000c D3F80130 	 ldr r3,[r3,#1]
 5423 0010 C3F30802 	 ubfx r2,r3,#0,#9
 5424 0014 3B68     	 ldr r3,[r7]
 5425 0016 1344     	 add r3,r3,r2
 5426 0018 7B62     	 str r3,[r7,#36]
1942:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1943:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // i.e. newSectorOffset is non-negative and smaller than AFATFS_SECTOR_SIZE, we're staying with
1944:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (newSectorOffset < AFATFS_SECTOR_SIZE) {
 5427              	 .loc 1 1944 0
 5428 001a 7B6A     	 ldr r3,[r7,#36]
 5429 001c B3F5007F 	 cmp r3,#512
 5430 0020 09D2     	 bcs .L391
1945:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->cursorOffset += offset;
 5431              	 .loc 1 1945 0
 5432 0022 7B68     	 ldr r3,[r7,#4]
 5433 0024 D3F80120 	 ldr r2,[r3,#1]
 5434 0028 3B68     	 ldr r3,[r7]
 5435 002a 1A44     	 add r2,r2,r3
 5436 002c 7B68     	 ldr r3,[r7,#4]
 5437 002e C3F80120 	 str r2,[r3,#1]
1946:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return true;
 5438              	 .loc 1 1946 0
 5439 0032 0123     	 movs r3,#1
 5440 0034 6BE0     	 b .L392
 5441              	.L391:
1947:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1948:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1949:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // We're seeking outside the sector so unlock it if we were holding it
1950:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fileUnlockCacheSector(file);
 5442              	 .loc 1 1950 0
 5443 0036 7868     	 ldr r0,[r7,#4]
 5444 0038 FFF7FEFF 	 bl afatfs_fileUnlockCacheSector
1951:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1952:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // FAT16 root directories are made up of contiguous sectors rather than clusters
1953:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->type == AFATFS_FILE_TYPE_FAT16_ROOT_DIRECTORY) {
 5445              	 .loc 1 1953 0
 5446 003c 7B68     	 ldr r3,[r7,#4]
 5447 003e 1B78     	 ldrb r3,[r3]
 5448 0040 022B     	 cmp r3,#2
 5449 0042 09D1     	 bne .L393
1954:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->cursorOffset += offset;
 5450              	 .loc 1 1954 0
 5451 0044 7B68     	 ldr r3,[r7,#4]
 5452 0046 D3F80120 	 ldr r2,[r3,#1]
 5453 004a 3B68     	 ldr r3,[r7]
 5454 004c 1A44     	 add r2,r2,r3
 5455 004e 7B68     	 ldr r3,[r7,#4]
 5456 0050 C3F80120 	 str r2,[r3,#1]
1955:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1956:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return true;
 5457              	 .loc 1 1956 0
 5458 0054 0123     	 movs r3,#1
 5459 0056 5AE0     	 b .L392
 5460              	.L393:
1957:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1958:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1959:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t clusterSizeBytes = afatfs_clusterSize();
 5461              	 .loc 1 1959 0
 5462 0058 FFF7FEFF 	 bl afatfs_clusterSize
 5463 005c 3862     	 str r0,[r7,#32]
1960:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t offsetInCluster = afatfs_byteIndexInCluster(file->cursorOffset);
 5464              	 .loc 1 1960 0
 5465 005e 7B68     	 ldr r3,[r7,#4]
 5466 0060 D3F80130 	 ldr r3,[r3,#1]
 5467 0064 1846     	 mov r0,r3
 5468 0066 FFF7FEFF 	 bl afatfs_byteIndexInCluster
 5469 006a F861     	 str r0,[r7,#28]
1961:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t newOffsetInCluster = offsetInCluster + offset;
 5470              	 .loc 1 1961 0
 5471 006c 3B68     	 ldr r3,[r7]
 5472 006e FA69     	 ldr r2,[r7,#28]
 5473 0070 1344     	 add r3,r3,r2
 5474 0072 BB61     	 str r3,[r7,#24]
1962:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1963:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status;
1964:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1965:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (offset > (int32_t) clusterSizeBytes || offset < -(int32_t) offsetInCluster) {
 5475              	 .loc 1 1965 0
 5476 0074 3A6A     	 ldr r2,[r7,#32]
 5477 0076 3B68     	 ldr r3,[r7]
 5478 0078 9A42     	 cmp r2,r3
 5479 007a 04DB     	 blt .L394
 5480              	 .loc 1 1965 0 is_stmt 0 discriminator 1
 5481 007c FB69     	 ldr r3,[r7,#28]
 5482 007e 5A42     	 negs r2,r3
 5483 0080 3B68     	 ldr r3,[r7]
 5484 0082 9A42     	 cmp r2,r3
 5485 0084 01DD     	 ble .L395
 5486              	.L394:
1966:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false;
 5487              	 .loc 1 1966 0 is_stmt 1
 5488 0086 0023     	 movs r3,#0
 5489 0088 41E0     	 b .L392
 5490              	.L395:
1967:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1968:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1969:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Are we seeking outside the cluster? If so we'll need to find out the next cluster number
1970:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (newOffsetInCluster >= clusterSizeBytes) {
 5491              	 .loc 1 1970 0
 5492 008a BA69     	 ldr r2,[r7,#24]
 5493 008c 3B6A     	 ldr r3,[r7,#32]
 5494 008e 9A42     	 cmp r2,r3
 5495 0090 2BD3     	 bcc .L396
 5496              	.LBB27:
1971:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t nextCluster;
1972:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1973:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         status = afatfs_fileGetNextCluster(file, file->cursorCluster, &nextCluster);
 5497              	 .loc 1 1973 0
 5498 0092 7B68     	 ldr r3,[r7,#4]
 5499 0094 D3F80D20 	 ldr r2,[r3,#13]
 5500 0098 07F10C03 	 add r3,r7,#12
 5501 009c 7868     	 ldr r0,[r7,#4]
 5502 009e 1146     	 mov r1,r2
 5503 00a0 1A46     	 mov r2,r3
 5504 00a2 FFF7FEFF 	 bl afatfs_fileGetNextCluster
 5505 00a6 0346     	 mov r3,r0
 5506 00a8 FB75     	 strb r3,[r7,#23]
1974:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1975:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (status == AFATFS_OPERATION_SUCCESS) {
 5507              	 .loc 1 1975 0
 5508 00aa FB7D     	 ldrb r3,[r7,#23]
 5509 00ac 012B     	 cmp r3,#1
 5510 00ae 1AD1     	 bne .L397
 5511              	.LBB28:
1976:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Seek to the beginning of the next cluster
1977:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             uint32_t bytesToSeek = clusterSizeBytes - offsetInCluster;
 5512              	 .loc 1 1977 0
 5513 00b0 3A6A     	 ldr r2,[r7,#32]
 5514 00b2 FB69     	 ldr r3,[r7,#28]
 5515 00b4 D31A     	 subs r3,r2,r3
 5516 00b6 3B61     	 str r3,[r7,#16]
1978:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1979:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->cursorPreviousCluster = file->cursorCluster;
 5517              	 .loc 1 1979 0
 5518 00b8 7B68     	 ldr r3,[r7,#4]
 5519 00ba D3F80D20 	 ldr r2,[r3,#13]
 5520 00be 7B68     	 ldr r3,[r7,#4]
 5521 00c0 C3F81120 	 str r2,[r3,#17]
1980:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->cursorCluster = nextCluster;
 5522              	 .loc 1 1980 0
 5523 00c4 FA68     	 ldr r2,[r7,#12]
 5524 00c6 7B68     	 ldr r3,[r7,#4]
 5525 00c8 C3F80D20 	 str r2,[r3,#13]
1981:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->cursorOffset += bytesToSeek;
 5526              	 .loc 1 1981 0
 5527 00cc 7B68     	 ldr r3,[r7,#4]
 5528 00ce D3F80120 	 ldr r2,[r3,#1]
 5529 00d2 3B69     	 ldr r3,[r7,#16]
 5530 00d4 1A44     	 add r2,r2,r3
 5531 00d6 7B68     	 ldr r3,[r7,#4]
 5532 00d8 C3F80120 	 str r2,[r3,#1]
1982:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1983:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             offset -= bytesToSeek;
 5533              	 .loc 1 1983 0
 5534 00dc 3A68     	 ldr r2,[r7]
 5535 00de 3B69     	 ldr r3,[r7,#16]
 5536 00e0 D31A     	 subs r3,r2,r3
 5537 00e2 3B60     	 str r3,[r7]
 5538              	.LBE28:
 5539 00e4 01E0     	 b .L396
 5540              	.L397:
1984:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
1985:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Try again later
1986:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return false;
 5541              	 .loc 1 1986 0
 5542 00e6 0023     	 movs r3,#0
 5543 00e8 11E0     	 b .L392
 5544              	.L396:
 5545              	.LBE27:
1987:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
1988:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1989:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1990:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // If we didn't already hit the end of the file, add any remaining offset needed inside the clu
1991:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (!afatfs_isEndOfAllocatedFile(file)) {
 5546              	 .loc 1 1991 0
 5547 00ea 7868     	 ldr r0,[r7,#4]
 5548 00ec FFF7FEFF 	 bl afatfs_isEndOfAllocatedFile
 5549 00f0 0346     	 mov r3,r0
 5550 00f2 83F00103 	 eor r3,r3,#1
 5551 00f6 DBB2     	 uxtb r3,r3
 5552 00f8 002B     	 cmp r3,#0
 5553 00fa 07D0     	 beq .L398
1992:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->cursorOffset += offset;
 5554              	 .loc 1 1992 0
 5555 00fc 7B68     	 ldr r3,[r7,#4]
 5556 00fe D3F80120 	 ldr r2,[r3,#1]
 5557 0102 3B68     	 ldr r3,[r7]
 5558 0104 1A44     	 add r2,r2,r3
 5559 0106 7B68     	 ldr r3,[r7,#4]
 5560 0108 C3F80120 	 str r2,[r3,#1]
 5561              	.L398:
1993:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
1994:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1995:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return true;
 5562              	 .loc 1 1995 0
 5563 010c 0123     	 movs r3,#1
 5564              	.L392:
1996:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 5565              	 .loc 1 1996 0
 5566 010e 1846     	 mov r0,r3
 5567 0110 2837     	 adds r7,r7,#40
 5568              	.LCFI247:
 5569              	 .cfi_def_cfa_offset 8
 5570 0112 BD46     	 mov sp,r7
 5571              	.LCFI248:
 5572              	 .cfi_def_cfa_register 13
 5573              	 
 5574 0114 80BD     	 pop {r7,pc}
 5575              	 .cfi_endproc
 5576              	.LFE578:
 5578 0116 00BF     	 .section .text.afatfs_fseekInternalContinue,"ax",%progbits
 5579              	 .align 2
 5580              	 .thumb
 5581              	 .thumb_func
 5583              	afatfs_fseekInternalContinue:
 5584              	.LFB579:
1997:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
1998:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
1999:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true if the seek was completed, or false if it is still in progress.
2000:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2001:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static bool afatfs_fseekInternalContinue(afatfsFile_t *file)
2002:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 5585              	 .loc 1 2002 0
 5586              	 .cfi_startproc
 5587              	 
 5588              	 
 5589 0000 80B5     	 push {r7,lr}
 5590              	.LCFI249:
 5591              	 .cfi_def_cfa_offset 8
 5592              	 .cfi_offset 7,-8
 5593              	 .cfi_offset 14,-4
 5594 0002 88B0     	 sub sp,sp,#32
 5595              	.LCFI250:
 5596              	 .cfi_def_cfa_offset 40
 5597 0004 00AF     	 add r7,sp,#0
 5598              	.LCFI251:
 5599              	 .cfi_def_cfa_register 7
 5600 0006 7860     	 str r0,[r7,#4]
2003:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsSeek_t *opState = &file->operation.state.seek;
 5601              	 .loc 1 2003 0
 5602 0008 7B68     	 ldr r3,[r7,#4]
 5603 000a 2433     	 adds r3,r3,#36
 5604 000c BB61     	 str r3,[r7,#24]
2004:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t clusterSizeBytes = afatfs_clusterSize();
 5605              	 .loc 1 2004 0
 5606 000e FFF7FEFF 	 bl afatfs_clusterSize
 5607 0012 7861     	 str r0,[r7,#20]
2005:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t offsetInCluster = afatfs_byteIndexInCluster(file->cursorOffset);
 5608              	 .loc 1 2005 0
 5609 0014 7B68     	 ldr r3,[r7,#4]
 5610 0016 D3F80130 	 ldr r3,[r3,#1]
 5611 001a 1846     	 mov r0,r3
 5612 001c FFF7FEFF 	 bl afatfs_byteIndexInCluster
 5613 0020 F861     	 str r0,[r7,#28]
2006:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2007:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status;
2008:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2009:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Keep advancing the cursor cluster forwards to consume seekOffset
2010:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     while (offsetInCluster + opState->seekOffset >= clusterSizeBytes && !afatfs_isEndOfAllocatedFil
 5614              	 .loc 1 2010 0
 5615 0022 2FE0     	 b .L400
 5616              	.L404:
 5617              	.LBB29:
2011:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t nextCluster;
2012:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2013:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         status = afatfs_fileGetNextCluster(file, file->cursorCluster, &nextCluster);
 5618              	 .loc 1 2013 0
 5619 0024 7B68     	 ldr r3,[r7,#4]
 5620 0026 D3F80D20 	 ldr r2,[r3,#13]
 5621 002a 07F10803 	 add r3,r7,#8
 5622 002e 7868     	 ldr r0,[r7,#4]
 5623 0030 1146     	 mov r1,r2
 5624 0032 1A46     	 mov r2,r3
 5625 0034 FFF7FEFF 	 bl afatfs_fileGetNextCluster
 5626 0038 0346     	 mov r3,r0
 5627 003a FB74     	 strb r3,[r7,#19]
2014:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2015:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (status == AFATFS_OPERATION_SUCCESS) {
 5628              	 .loc 1 2015 0
 5629 003c FB7C     	 ldrb r3,[r7,#19]
 5630 003e 012B     	 cmp r3,#1
 5631 0040 1ED1     	 bne .L401
 5632              	.LBB30:
2016:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Seek to the beginning of the next cluster
2017:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             uint32_t bytesToSeek = clusterSizeBytes - offsetInCluster;
 5633              	 .loc 1 2017 0
 5634 0042 7A69     	 ldr r2,[r7,#20]
 5635 0044 FB69     	 ldr r3,[r7,#28]
 5636 0046 D31A     	 subs r3,r2,r3
 5637 0048 FB60     	 str r3,[r7,#12]
2018:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2019:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->cursorPreviousCluster = file->cursorCluster;
 5638              	 .loc 1 2019 0
 5639 004a 7B68     	 ldr r3,[r7,#4]
 5640 004c D3F80D20 	 ldr r2,[r3,#13]
 5641 0050 7B68     	 ldr r3,[r7,#4]
 5642 0052 C3F81120 	 str r2,[r3,#17]
2020:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->cursorCluster = nextCluster;
 5643              	 .loc 1 2020 0
 5644 0056 BA68     	 ldr r2,[r7,#8]
 5645 0058 7B68     	 ldr r3,[r7,#4]
 5646 005a C3F80D20 	 str r2,[r3,#13]
2021:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2022:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->cursorOffset += bytesToSeek;
 5647              	 .loc 1 2022 0
 5648 005e 7B68     	 ldr r3,[r7,#4]
 5649 0060 D3F80120 	 ldr r2,[r3,#1]
 5650 0064 FB68     	 ldr r3,[r7,#12]
 5651 0066 1A44     	 add r2,r2,r3
 5652 0068 7B68     	 ldr r3,[r7,#4]
 5653 006a C3F80120 	 str r2,[r3,#1]
2023:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             opState->seekOffset -= bytesToSeek;
 5654              	 .loc 1 2023 0
 5655 006e BB69     	 ldr r3,[r7,#24]
 5656 0070 5A68     	 ldr r2,[r3,#4]
 5657 0072 FB68     	 ldr r3,[r7,#12]
 5658 0074 D21A     	 subs r2,r2,r3
 5659 0076 BB69     	 ldr r3,[r7,#24]
 5660 0078 5A60     	 str r2,[r3,#4]
2024:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             offsetInCluster = 0;
 5661              	 .loc 1 2024 0
 5662 007a 0023     	 movs r3,#0
 5663 007c FB61     	 str r3,[r7,#28]
 5664              	.LBE30:
 5665 007e 01E0     	 b .L400
 5666              	.L401:
2025:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
2026:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Try again later
2027:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return false;
 5667              	 .loc 1 2027 0
 5668 0080 0023     	 movs r3,#0
 5669 0082 31E0     	 b .L402
 5670              	.L400:
 5671              	.LBE29:
2010:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t nextCluster;
 5672              	 .loc 1 2010 0
 5673 0084 BB69     	 ldr r3,[r7,#24]
 5674 0086 5A68     	 ldr r2,[r3,#4]
 5675 0088 FB69     	 ldr r3,[r7,#28]
 5676 008a 1A44     	 add r2,r2,r3
 5677 008c 7B69     	 ldr r3,[r7,#20]
 5678 008e 9A42     	 cmp r2,r3
 5679 0090 08D3     	 bcc .L403
2010:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t nextCluster;
 5680              	 .loc 1 2010 0 is_stmt 0 discriminator 1
 5681 0092 7868     	 ldr r0,[r7,#4]
 5682 0094 FFF7FEFF 	 bl afatfs_isEndOfAllocatedFile
 5683 0098 0346     	 mov r3,r0
 5684 009a 83F00103 	 eor r3,r3,#1
 5685 009e DBB2     	 uxtb r3,r3
 5686 00a0 002B     	 cmp r3,#0
 5687 00a2 BFD1     	 bne .L404
 5688              	.L403:
2028:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2029:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2030:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2031:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // If we didn't already hit the end of the file, add any remaining offset needed inside the clu
2032:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (!afatfs_isEndOfAllocatedFile(file)) {
 5689              	 .loc 1 2032 0 is_stmt 1
 5690 00a4 7868     	 ldr r0,[r7,#4]
 5691 00a6 FFF7FEFF 	 bl afatfs_isEndOfAllocatedFile
 5692 00aa 0346     	 mov r3,r0
 5693 00ac 83F00103 	 eor r3,r3,#1
 5694 00b0 DBB2     	 uxtb r3,r3
 5695 00b2 002B     	 cmp r3,#0
 5696 00b4 08D0     	 beq .L405
2033:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->cursorOffset += opState->seekOffset;
 5697              	 .loc 1 2033 0
 5698 00b6 7B68     	 ldr r3,[r7,#4]
 5699 00b8 D3F80120 	 ldr r2,[r3,#1]
 5700 00bc BB69     	 ldr r3,[r7,#24]
 5701 00be 5B68     	 ldr r3,[r3,#4]
 5702 00c0 1A44     	 add r2,r2,r3
 5703 00c2 7B68     	 ldr r3,[r7,#4]
 5704 00c4 C3F80120 	 str r2,[r3,#1]
 5705              	.L405:
2034:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2035:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2036:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fileUpdateFilesize(file); // TODO do we need this?
 5706              	 .loc 1 2036 0
 5707 00c8 7868     	 ldr r0,[r7,#4]
 5708 00ca FFF7FEFF 	 bl afatfs_fileUpdateFilesize
2037:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2038:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 5709              	 .loc 1 2038 0
 5710 00ce 7B68     	 ldr r3,[r7,#4]
 5711 00d0 0022     	 movs r2,#0
 5712 00d2 83F82320 	 strb r2,[r3,#35]
2039:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2040:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (opState->callback) {
 5713              	 .loc 1 2040 0
 5714 00d6 BB69     	 ldr r3,[r7,#24]
 5715 00d8 1B68     	 ldr r3,[r3]
 5716 00da 002B     	 cmp r3,#0
 5717 00dc 03D0     	 beq .L406
2041:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         opState->callback(file);
 5718              	 .loc 1 2041 0
 5719 00de BB69     	 ldr r3,[r7,#24]
 5720 00e0 1B68     	 ldr r3,[r3]
 5721 00e2 7868     	 ldr r0,[r7,#4]
 5722 00e4 9847     	 blx r3
 5723              	.L406:
2042:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2043:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2044:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return true;
 5724              	 .loc 1 2044 0
 5725 00e6 0123     	 movs r3,#1
 5726              	.L402:
2045:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 5727              	 .loc 1 2045 0
 5728 00e8 1846     	 mov r0,r3
 5729 00ea 2037     	 adds r7,r7,#32
 5730              	.LCFI252:
 5731              	 .cfi_def_cfa_offset 8
 5732 00ec BD46     	 mov sp,r7
 5733              	.LCFI253:
 5734              	 .cfi_def_cfa_register 13
 5735              	 
 5736 00ee 80BD     	 pop {r7,pc}
 5737              	 .cfi_endproc
 5738              	.LFE579:
 5740              	 .section .text.afatfs_fseekInternal,"ax",%progbits
 5741              	 .align 2
 5742              	 .thumb
 5743              	 .thumb_func
 5745              	afatfs_fseekInternal:
 5746              	.LFB580:
2046:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2047:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2048:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Seek the file pointer forwards by offset bytes. Calls the callback when the seek is complete.
2049:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2050:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Will happily seek beyond the logical end of the file.
2051:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2052:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
2053:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - The seek was completed immediately
2054:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - The seek was queued and will complete later
2055:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE     - The seek could not be queued because the file was busy with a
2056:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                                    try again later.
2057:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2058:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_fseekInternal(afatfsFilePtr_t file, uint32_t offset, afatfsFi
2059:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 5747              	 .loc 1 2059 0
 5748              	 .cfi_startproc
 5749              	 
 5750              	 
 5751 0000 80B5     	 push {r7,lr}
 5752              	.LCFI254:
 5753              	 .cfi_def_cfa_offset 8
 5754              	 .cfi_offset 7,-8
 5755              	 .cfi_offset 14,-4
 5756 0002 86B0     	 sub sp,sp,#24
 5757              	.LCFI255:
 5758              	 .cfi_def_cfa_offset 32
 5759 0004 00AF     	 add r7,sp,#0
 5760              	.LCFI256:
 5761              	 .cfi_def_cfa_register 7
 5762 0006 F860     	 str r0,[r7,#12]
 5763 0008 B960     	 str r1,[r7,#8]
 5764 000a 7A60     	 str r2,[r7,#4]
2060:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // See if we can seek without queuing an operation
2061:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs_fseekAtomic(file, offset)) {
 5765              	 .loc 1 2061 0
 5766 000c BB68     	 ldr r3,[r7,#8]
 5767 000e F868     	 ldr r0,[r7,#12]
 5768 0010 1946     	 mov r1,r3
 5769 0012 FFF7FEFF 	 bl afatfs_fseekAtomic
 5770 0016 0346     	 mov r3,r0
 5771 0018 002B     	 cmp r3,#0
 5772 001a 07D0     	 beq .L408
2062:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (callback) {
 5773              	 .loc 1 2062 0
 5774 001c 7B68     	 ldr r3,[r7,#4]
 5775 001e 002B     	 cmp r3,#0
 5776 0020 02D0     	 beq .L409
2063:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             callback(file);
 5777              	 .loc 1 2063 0
 5778 0022 7B68     	 ldr r3,[r7,#4]
 5779 0024 F868     	 ldr r0,[r7,#12]
 5780 0026 9847     	 blx r3
 5781              	.L409:
2064:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2065:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2066:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_SUCCESS;
 5782              	 .loc 1 2066 0
 5783 0028 0123     	 movs r3,#1
 5784 002a 15E0     	 b .L410
 5785              	.L408:
 5786              	.LBB31:
2067:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
2068:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Our operation must queue
2069:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_fileIsBusy(file)) {
 5787              	 .loc 1 2069 0
 5788 002c F868     	 ldr r0,[r7,#12]
 5789 002e FFF7FEFF 	 bl afatfs_fileIsBusy
 5790 0032 0346     	 mov r3,r0
 5791 0034 002B     	 cmp r3,#0
 5792 0036 01D0     	 beq .L411
2070:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_FAILURE;
 5793              	 .loc 1 2070 0
 5794 0038 0223     	 movs r3,#2
 5795 003a 0DE0     	 b .L410
 5796              	.L411:
2071:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2072:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2073:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsSeek_t *opState = &file->operation.state.seek;
 5797              	 .loc 1 2073 0
 5798 003c FB68     	 ldr r3,[r7,#12]
 5799 003e 2433     	 adds r3,r3,#36
 5800 0040 7B61     	 str r3,[r7,#20]
2074:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2075:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->operation.operation = AFATFS_FILE_OPERATION_SEEK;
 5801              	 .loc 1 2075 0
 5802 0042 FB68     	 ldr r3,[r7,#12]
 5803 0044 0222     	 movs r2,#2
 5804 0046 83F82320 	 strb r2,[r3,#35]
2076:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         opState->callback = callback;
 5805              	 .loc 1 2076 0
 5806 004a 7B69     	 ldr r3,[r7,#20]
 5807 004c 7A68     	 ldr r2,[r7,#4]
 5808 004e 1A60     	 str r2,[r3]
2077:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         opState->seekOffset = offset;
 5809              	 .loc 1 2077 0
 5810 0050 7B69     	 ldr r3,[r7,#20]
 5811 0052 BA68     	 ldr r2,[r7,#8]
 5812 0054 5A60     	 str r2,[r3,#4]
2078:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2079:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_IN_PROGRESS;
 5813              	 .loc 1 2079 0
 5814 0056 0023     	 movs r3,#0
 5815              	.L410:
 5816              	.LBE31:
2080:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2081:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 5817              	 .loc 1 2081 0
 5818 0058 1846     	 mov r0,r3
 5819 005a 1837     	 adds r7,r7,#24
 5820              	.LCFI257:
 5821              	 .cfi_def_cfa_offset 8
 5822 005c BD46     	 mov sp,r7
 5823              	.LCFI258:
 5824              	 .cfi_def_cfa_register 13
 5825              	 
 5826 005e 80BD     	 pop {r7,pc}
 5827              	 .cfi_endproc
 5828              	.LFE580:
 5830              	 .section .text.afatfs_fseek,"ax",%progbits
 5831              	 .align 2
 5832              	 .global afatfs_fseek
 5833              	 .thumb
 5834              	 .thumb_func
 5836              	afatfs_fseek:
 5837              	.LFB581:
2082:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2083:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2084:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Attempt to seek the file cursor from the given point (`whence`) by the given offset, just like C
2085:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2086:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * AFATFS_SEEK_SET with offset 0 will always return AFATFS_OPERATION_SUCCESS.
2087:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2088:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
2089:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - The seek was completed immediately
2090:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - The seek was queued and will complete later. Feel free to att
2091:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                                    operations on the file, they'll fail until the seek is comple
2092:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE     - The seek could not be queued because the file was busy with a
2093:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                                    try again later.
2094:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2095:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** afatfsOperationStatus_e afatfs_fseek(afatfsFilePtr_t file, int32_t offset, afatfsSeek_e whence)
2096:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 5838              	 .loc 1 2096 0
 5839              	 .cfi_startproc
 5840              	 
 5841              	 
 5842 0000 80B5     	 push {r7,lr}
 5843              	.LCFI259:
 5844              	 .cfi_def_cfa_offset 8
 5845              	 .cfi_offset 7,-8
 5846              	 .cfi_offset 14,-4
 5847 0002 88B0     	 sub sp,sp,#32
 5848              	.LCFI260:
 5849              	 .cfi_def_cfa_offset 40
 5850 0004 00AF     	 add r7,sp,#0
 5851              	.LCFI261:
 5852              	 .cfi_def_cfa_register 7
 5853 0006 F860     	 str r0,[r7,#12]
 5854 0008 B960     	 str r1,[r7,#8]
 5855 000a 1346     	 mov r3,r2
 5856 000c FB71     	 strb r3,[r7,#7]
2097:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // We need an up-to-date logical filesize so we can clamp seeks to the EOF
2098:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fileUpdateFilesize(file);
 5857              	 .loc 1 2098 0
 5858 000e F868     	 ldr r0,[r7,#12]
 5859 0010 FFF7FEFF 	 bl afatfs_fileUpdateFilesize
2099:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2100:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (whence) {
 5860              	 .loc 1 2100 0
 5861 0014 FB79     	 ldrb r3,[r7,#7]
 5862 0016 012B     	 cmp r3,#1
 5863 0018 02D0     	 beq .L414
 5864 001a 022B     	 cmp r3,#2
 5865 001c 20D0     	 beq .L415
 5866 001e 32E0     	 b .L413
 5867              	.L414:
2101:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_SEEK_CUR:
2102:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (offset >= 0) {
 5868              	 .loc 1 2102 0
 5869 0020 BB68     	 ldr r3,[r7,#8]
 5870 0022 002B     	 cmp r3,#0
 5871 0024 15DB     	 blt .L416
 5872              	.LBB32:
2103:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Only forwards seeks are supported by this routine:
2104:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 return afatfs_fseekInternal(file, MIN(file->cursorOffset + offset, file->logicalSiz
 5873              	 .loc 1 2104 0
 5874 0026 FB68     	 ldr r3,[r7,#12]
 5875 0028 D3F80120 	 ldr r2,[r3,#1]
 5876 002c BB68     	 ldr r3,[r7,#8]
 5877 002e 1344     	 add r3,r3,r2
 5878 0030 FB61     	 str r3,[r7,#28]
 5879 0032 FB68     	 ldr r3,[r7,#12]
 5880 0034 D3F80530 	 ldr r3,[r3,#5]
 5881 0038 BB61     	 str r3,[r7,#24]
 5882 003a BA69     	 ldr r2,[r7,#24]
 5883 003c FB69     	 ldr r3,[r7,#28]
 5884 003e 9342     	 cmp r3,r2
 5885 0040 28BF     	 it cs
 5886 0042 1346     	 movcs r3,r2
 5887              	.LBE32:
 5888 0044 F868     	 ldr r0,[r7,#12]
 5889 0046 1946     	 mov r1,r3
 5890 0048 0022     	 movs r2,#0
 5891 004a FFF7FEFF 	 bl afatfs_fseekInternal
 5892 004e 0346     	 mov r3,r0
 5893 0050 45E0     	 b .L417
 5894              	.L416:
2105:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2106:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2107:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Convert a backwards relative seek into a SEEK_SET. TODO considerable room for improv
2108:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             offset += file->cursorOffset;
 5895              	 .loc 1 2108 0
 5896 0052 FB68     	 ldr r3,[r7,#12]
 5897 0054 D3F80120 	 ldr r2,[r3,#1]
 5898 0058 BB68     	 ldr r3,[r7,#8]
 5899 005a 1344     	 add r3,r3,r2
 5900 005c BB60     	 str r3,[r7,#8]
2109:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 5901              	 .loc 1 2109 0
 5902 005e 12E0     	 b .L413
 5903              	.L415:
2110:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2111:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_SEEK_END:
2112:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Are we already at the right position?
2113:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (file->logicalSize + offset == file->cursorOffset) {
 5904              	 .loc 1 2113 0
 5905 0060 FB68     	 ldr r3,[r7,#12]
 5906 0062 D3F80520 	 ldr r2,[r3,#5]
 5907 0066 BB68     	 ldr r3,[r7,#8]
 5908 0068 1A44     	 add r2,r2,r3
 5909 006a FB68     	 ldr r3,[r7,#12]
 5910 006c D3F80130 	 ldr r3,[r3,#1]
 5911 0070 9A42     	 cmp r2,r3
 5912 0072 01D1     	 bne .L418
2114:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 return AFATFS_OPERATION_SUCCESS;
 5913              	 .loc 1 2114 0
 5914 0074 0123     	 movs r3,#1
 5915 0076 32E0     	 b .L417
 5916              	.L418:
2115:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2116:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2117:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Convert into a SEEK_SET
2118:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             offset += file->logicalSize;
 5917              	 .loc 1 2118 0
 5918 0078 FB68     	 ldr r3,[r7,#12]
 5919 007a D3F80520 	 ldr r2,[r3,#5]
 5920 007e BB68     	 ldr r3,[r7,#8]
 5921 0080 1344     	 add r3,r3,r2
 5922 0082 BB60     	 str r3,[r7,#8]
2119:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 5923              	 .loc 1 2119 0
 5924 0084 00BF     	 nop
 5925              	.L413:
2120:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2121:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_SEEK_SET:
2122:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             FALLTHROUGH;
2123:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2124:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2125:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Now we have a SEEK_SET with a positive offset. Begin by seeking to the start of the file
2126:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fileUnlockCacheSector(file);
 5926              	 .loc 1 2126 0
 5927 0086 F868     	 ldr r0,[r7,#12]
 5928 0088 FFF7FEFF 	 bl afatfs_fileUnlockCacheSector
2127:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2128:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->cursorPreviousCluster = 0;
 5929              	 .loc 1 2128 0
 5930 008c FB68     	 ldr r3,[r7,#12]
 5931 008e 0022     	 movs r2,#0
 5932 0090 5A74     	 strb r2,[r3,#17]
 5933 0092 0022     	 movs r2,#0
 5934 0094 9A74     	 strb r2,[r3,#18]
 5935 0096 0022     	 movs r2,#0
 5936 0098 DA74     	 strb r2,[r3,#19]
 5937 009a 0022     	 movs r2,#0
 5938 009c 1A75     	 strb r2,[r3,#20]
2129:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->cursorCluster = file->firstCluster;
 5939              	 .loc 1 2129 0
 5940 009e FB68     	 ldr r3,[r7,#12]
 5941 00a0 D3F81F20 	 ldr r2,[r3,#31]
 5942 00a4 FB68     	 ldr r3,[r7,#12]
 5943 00a6 C3F80D20 	 str r2,[r3,#13]
2130:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->cursorOffset = 0;
 5944              	 .loc 1 2130 0
 5945 00aa FB68     	 ldr r3,[r7,#12]
 5946 00ac 0022     	 movs r2,#0
 5947 00ae 5A70     	 strb r2,[r3,#1]
 5948 00b0 0022     	 movs r2,#0
 5949 00b2 9A70     	 strb r2,[r3,#2]
 5950 00b4 0022     	 movs r2,#0
 5951 00b6 DA70     	 strb r2,[r3,#3]
 5952 00b8 0022     	 movs r2,#0
 5953 00ba 1A71     	 strb r2,[r3,#4]
 5954              	.LBB33:
2131:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2132:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Then seek forwards by the offset
2133:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs_fseekInternal(file, MIN((uint32_t) offset, file->logicalSize), NULL);
 5955              	 .loc 1 2133 0
 5956 00bc BB68     	 ldr r3,[r7,#8]
 5957 00be 7B61     	 str r3,[r7,#20]
 5958 00c0 FB68     	 ldr r3,[r7,#12]
 5959 00c2 D3F80530 	 ldr r3,[r3,#5]
 5960 00c6 3B61     	 str r3,[r7,#16]
 5961 00c8 3A69     	 ldr r2,[r7,#16]
 5962 00ca 7B69     	 ldr r3,[r7,#20]
 5963 00cc 9342     	 cmp r3,r2
 5964 00ce 28BF     	 it cs
 5965 00d0 1346     	 movcs r3,r2
 5966              	.LBE33:
 5967 00d2 F868     	 ldr r0,[r7,#12]
 5968 00d4 1946     	 mov r1,r3
 5969 00d6 0022     	 movs r2,#0
 5970 00d8 FFF7FEFF 	 bl afatfs_fseekInternal
 5971 00dc 0346     	 mov r3,r0
 5972              	.L417:
2134:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 5973              	 .loc 1 2134 0
 5974 00de 1846     	 mov r0,r3
 5975 00e0 2037     	 adds r7,r7,#32
 5976              	.LCFI262:
 5977              	 .cfi_def_cfa_offset 8
 5978 00e2 BD46     	 mov sp,r7
 5979              	.LCFI263:
 5980              	 .cfi_def_cfa_register 13
 5981              	 
 5982 00e4 80BD     	 pop {r7,pc}
 5983              	 .cfi_endproc
 5984              	.LFE581:
 5986 00e6 00BF     	 .section .text.afatfs_ftell,"ax",%progbits
 5987              	 .align 2
 5988              	 .global afatfs_ftell
 5989              	 .thumb
 5990              	 .thumb_func
 5992              	afatfs_ftell:
 5993              	.LFB582:
2135:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2136:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2137:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Get the byte-offset of the file's cursor from the start of the file.
2138:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2139:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true on success, or false if the file is busy (try again later).
2140:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2141:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_ftell(afatfsFilePtr_t file, uint32_t *position)
2142:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 5994              	 .loc 1 2142 0
 5995              	 .cfi_startproc
 5996              	 
 5997              	 
 5998 0000 80B5     	 push {r7,lr}
 5999              	.LCFI264:
 6000              	 .cfi_def_cfa_offset 8
 6001              	 .cfi_offset 7,-8
 6002              	 .cfi_offset 14,-4
 6003 0002 82B0     	 sub sp,sp,#8
 6004              	.LCFI265:
 6005              	 .cfi_def_cfa_offset 16
 6006 0004 00AF     	 add r7,sp,#0
 6007              	.LCFI266:
 6008              	 .cfi_def_cfa_register 7
 6009 0006 7860     	 str r0,[r7,#4]
 6010 0008 3960     	 str r1,[r7]
2143:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs_fileIsBusy(file)) {
 6011              	 .loc 1 2143 0
 6012 000a 7868     	 ldr r0,[r7,#4]
 6013 000c FFF7FEFF 	 bl afatfs_fileIsBusy
 6014 0010 0346     	 mov r3,r0
 6015 0012 002B     	 cmp r3,#0
 6016 0014 01D0     	 beq .L420
2144:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false;
 6017              	 .loc 1 2144 0
 6018 0016 0023     	 movs r3,#0
 6019 0018 05E0     	 b .L421
 6020              	.L420:
2145:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
2146:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         *position = file->cursorOffset;
 6021              	 .loc 1 2146 0
 6022 001a 7B68     	 ldr r3,[r7,#4]
 6023 001c D3F80120 	 ldr r2,[r3,#1]
 6024 0020 3B68     	 ldr r3,[r7]
 6025 0022 1A60     	 str r2,[r3]
2147:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return true;
 6026              	 .loc 1 2147 0
 6027 0024 0123     	 movs r3,#1
 6028              	.L421:
2148:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2149:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 6029              	 .loc 1 2149 0
 6030 0026 1846     	 mov r0,r3
 6031 0028 0837     	 adds r7,r7,#8
 6032              	.LCFI267:
 6033              	 .cfi_def_cfa_offset 8
 6034 002a BD46     	 mov sp,r7
 6035              	.LCFI268:
 6036              	 .cfi_def_cfa_register 13
 6037              	 
 6038 002c 80BD     	 pop {r7,pc}
 6039              	 .cfi_endproc
 6040              	.LFE582:
 6042 002e 00BF     	 .section .text.afatfs_findNext,"ax",%progbits
 6043              	 .align 2
 6044              	 .global afatfs_findNext
 6045              	 .thumb
 6046              	 .thumb_func
 6048              	afatfs_findNext:
 6049              	.LFB583:
2150:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2151:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2152:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Attempt to advance the directory pointer `finder` to the next entry in the directory.
2153:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2154:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
2155:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS -     A pointer to the next directory entry has been loaded into *d
2156:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                                    directory was exhausted then *dirEntry will be set to NULL.
2157:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - The disk is busy. The pointer is not advanced, call again lat
2158:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2159:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** afatfsOperationStatus_e afatfs_findNext(afatfsFilePtr_t directory, afatfsFinder_t *finder, fatDirec
2160:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 6050              	 .loc 1 2160 0
 6051              	 .cfi_startproc
 6052              	 
 6053              	 
 6054 0000 80B5     	 push {r7,lr}
 6055              	.LCFI269:
 6056              	 .cfi_def_cfa_offset 8
 6057              	 .cfi_offset 7,-8
 6058              	 .cfi_offset 14,-4
 6059 0002 86B0     	 sub sp,sp,#24
 6060              	.LCFI270:
 6061              	 .cfi_def_cfa_offset 32
 6062 0004 00AF     	 add r7,sp,#0
 6063              	.LCFI271:
 6064              	 .cfi_def_cfa_register 7
 6065 0006 F860     	 str r0,[r7,#12]
 6066 0008 B960     	 str r1,[r7,#8]
 6067 000a 7A60     	 str r2,[r7,#4]
2161:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t *sector;
2162:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2163:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (finder->entryIndex == AFATFS_FILES_PER_DIRECTORY_SECTOR - 1) {
 6068              	 .loc 1 2163 0
 6069 000c BB68     	 ldr r3,[r7,#8]
 6070 000e B3F90430 	 ldrsh r3,[r3,#4]
 6071 0012 9BB2     	 uxth r3,r3
 6072 0014 1BB2     	 sxth r3,r3
 6073 0016 0F2B     	 cmp r3,#15
 6074 0018 11D1     	 bne .L423
2164:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_fseekAtomic(directory, AFATFS_SECTOR_SIZE)) {
 6075              	 .loc 1 2164 0
 6076 001a F868     	 ldr r0,[r7,#12]
 6077 001c 4FF40071 	 mov r1,#512
 6078 0020 FFF7FEFF 	 bl afatfs_fseekAtomic
 6079 0024 0346     	 mov r3,r0
 6080 0026 002B     	 cmp r3,#0
 6081 0028 07D0     	 beq .L424
2165:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             finder->entryIndex = -1;
 6082              	 .loc 1 2165 0
 6083 002a BB68     	 ldr r3,[r7,#8]
 6084 002c 4FF0FF32 	 mov r2,#-1
 6085 0030 1A71     	 strb r2,[r3,#4]
 6086 0032 4FF0FF32 	 mov r2,#-1
 6087 0036 5A71     	 strb r2,[r3,#5]
 6088 0038 01E0     	 b .L423
 6089              	.L424:
2166:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Fall through to read the first entry of that new sector
2167:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
2168:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_IN_PROGRESS;
 6090              	 .loc 1 2168 0
 6091 003a 0023     	 movs r3,#0
 6092 003c 2FE0     	 b .L425
 6093              	.L423:
2169:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2170:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2171:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2172:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     sector = afatfs_fileRetainCursorSectorForRead(directory);
 6094              	 .loc 1 2172 0
 6095 003e F868     	 ldr r0,[r7,#12]
 6096 0040 FFF7FEFF 	 bl afatfs_fileRetainCursorSectorForRead
 6097 0044 7861     	 str r0,[r7,#20]
2173:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2174:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (sector) {
 6098              	 .loc 1 2174 0
 6099 0046 7B69     	 ldr r3,[r7,#20]
 6100 0048 002B     	 cmp r3,#0
 6101 004a 1CD0     	 beq .L426
2175:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         finder->entryIndex++;
 6102              	 .loc 1 2175 0
 6103 004c BB68     	 ldr r3,[r7,#8]
 6104 004e B3F90430 	 ldrsh r3,[r3,#4]
 6105 0052 9BB2     	 uxth r3,r3
 6106 0054 9BB2     	 uxth r3,r3
 6107 0056 9BB2     	 uxth r3,r3
 6108 0058 0133     	 adds r3,r3,#1
 6109 005a 9BB2     	 uxth r3,r3
 6110 005c 9AB2     	 uxth r2,r3
 6111 005e BB68     	 ldr r3,[r7,#8]
 6112 0060 9A80     	 strh r2,[r3,#4]
2176:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2177:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         *dirEntry = (fatDirectoryEntry_t*) sector + finder->entryIndex;
 6113              	 .loc 1 2177 0
 6114 0062 BB68     	 ldr r3,[r7,#8]
 6115 0064 B3F90430 	 ldrsh r3,[r3,#4]
 6116 0068 9BB2     	 uxth r3,r3
 6117 006a 1BB2     	 sxth r3,r3
 6118 006c 5B01     	 lsls r3,r3,#5
 6119 006e 7A69     	 ldr r2,[r7,#20]
 6120 0070 1A44     	 add r2,r2,r3
 6121 0072 7B68     	 ldr r3,[r7,#4]
 6122 0074 1A60     	 str r2,[r3]
2178:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2179:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         finder->sectorNumberPhysical = afatfs_fileGetCursorPhysicalSector(directory);
 6123              	 .loc 1 2179 0
 6124 0076 F868     	 ldr r0,[r7,#12]
 6125 0078 FFF7FEFF 	 bl afatfs_fileGetCursorPhysicalSector
 6126 007c 0246     	 mov r2,r0
 6127 007e BB68     	 ldr r3,[r7,#8]
 6128 0080 1A60     	 str r2,[r3]
2180:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2181:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_SUCCESS;
 6129              	 .loc 1 2181 0
 6130 0082 0123     	 movs r3,#1
 6131 0084 0BE0     	 b .L425
 6132              	.L426:
2182:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
2183:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_isEndOfAllocatedFile(directory)) {
 6133              	 .loc 1 2183 0
 6134 0086 F868     	 ldr r0,[r7,#12]
 6135 0088 FFF7FEFF 	 bl afatfs_isEndOfAllocatedFile
 6136 008c 0346     	 mov r3,r0
 6137 008e 002B     	 cmp r3,#0
 6138 0090 04D0     	 beq .L427
2184:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             *dirEntry = NULL;
 6139              	 .loc 1 2184 0
 6140 0092 7B68     	 ldr r3,[r7,#4]
 6141 0094 0022     	 movs r2,#0
 6142 0096 1A60     	 str r2,[r3]
2185:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2186:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_SUCCESS;
 6143              	 .loc 1 2186 0
 6144 0098 0123     	 movs r3,#1
 6145 009a 00E0     	 b .L425
 6146              	.L427:
2187:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2188:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2189:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_IN_PROGRESS;
 6147              	 .loc 1 2189 0
 6148 009c 0023     	 movs r3,#0
 6149              	.L425:
2190:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2191:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 6150              	 .loc 1 2191 0
 6151 009e 1846     	 mov r0,r3
 6152 00a0 1837     	 adds r7,r7,#24
 6153              	.LCFI272:
 6154              	 .cfi_def_cfa_offset 8
 6155 00a2 BD46     	 mov sp,r7
 6156              	.LCFI273:
 6157              	 .cfi_def_cfa_register 13
 6158              	 
 6159 00a4 80BD     	 pop {r7,pc}
 6160              	 .cfi_endproc
 6161              	.LFE583:
 6163 00a6 00BF     	 .section .text.afatfs_findLast,"ax",%progbits
 6164              	 .align 2
 6165              	 .global afatfs_findLast
 6166              	 .thumb
 6167              	 .thumb_func
 6169              	afatfs_findLast:
 6170              	.LFB584:
2192:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2193:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2194:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Release resources associated with a find operation. Calling this more than once is harmless.
2195:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2196:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** void afatfs_findLast(afatfsFilePtr_t directory)
2197:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 6171              	 .loc 1 2197 0
 6172              	 .cfi_startproc
 6173              	 
 6174              	 
 6175 0000 80B5     	 push {r7,lr}
 6176              	.LCFI274:
 6177              	 .cfi_def_cfa_offset 8
 6178              	 .cfi_offset 7,-8
 6179              	 .cfi_offset 14,-4
 6180 0002 82B0     	 sub sp,sp,#8
 6181              	.LCFI275:
 6182              	 .cfi_def_cfa_offset 16
 6183 0004 00AF     	 add r7,sp,#0
 6184              	.LCFI276:
 6185              	 .cfi_def_cfa_register 7
 6186 0006 7860     	 str r0,[r7,#4]
2198:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fileUnlockCacheSector(directory);
 6187              	 .loc 1 2198 0
 6188 0008 7868     	 ldr r0,[r7,#4]
 6189 000a FFF7FEFF 	 bl afatfs_fileUnlockCacheSector
2199:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 6190              	 .loc 1 2199 0
 6191 000e 0837     	 adds r7,r7,#8
 6192              	.LCFI277:
 6193              	 .cfi_def_cfa_offset 8
 6194 0010 BD46     	 mov sp,r7
 6195              	.LCFI278:
 6196              	 .cfi_def_cfa_register 13
 6197              	 
 6198 0012 80BD     	 pop {r7,pc}
 6199              	 .cfi_endproc
 6200              	.LFE584:
 6202              	 .section .text.afatfs_findFirst,"ax",%progbits
 6203              	 .align 2
 6204              	 .global afatfs_findFirst
 6205              	 .thumb
 6206              	 .thumb_func
 6208              	afatfs_findFirst:
 6209              	.LFB585:
2200:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2201:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2202:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Initialise the finder so that the first call with the directory to findNext() will return the fi
2203:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * directory.
2204:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2205:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** void afatfs_findFirst(afatfsFilePtr_t directory, afatfsFinder_t *finder)
2206:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 6210              	 .loc 1 2206 0
 6211              	 .cfi_startproc
 6212              	 
 6213              	 
 6214 0000 80B5     	 push {r7,lr}
 6215              	.LCFI279:
 6216              	 .cfi_def_cfa_offset 8
 6217              	 .cfi_offset 7,-8
 6218              	 .cfi_offset 14,-4
 6219 0002 82B0     	 sub sp,sp,#8
 6220              	.LCFI280:
 6221              	 .cfi_def_cfa_offset 16
 6222 0004 00AF     	 add r7,sp,#0
 6223              	.LCFI281:
 6224              	 .cfi_def_cfa_register 7
 6225 0006 7860     	 str r0,[r7,#4]
 6226 0008 3960     	 str r1,[r7]
2207:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fseek(directory, 0, AFATFS_SEEK_SET);
 6227              	 .loc 1 2207 0
 6228 000a 7868     	 ldr r0,[r7,#4]
 6229 000c 0021     	 movs r1,#0
 6230 000e 0022     	 movs r2,#0
 6231 0010 FFF7FEFF 	 bl afatfs_fseek
2208:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     finder->entryIndex = -1;
 6232              	 .loc 1 2208 0
 6233 0014 3B68     	 ldr r3,[r7]
 6234 0016 4FF0FF32 	 mov r2,#-1
 6235 001a 1A71     	 strb r2,[r3,#4]
 6236 001c 4FF0FF32 	 mov r2,#-1
 6237 0020 5A71     	 strb r2,[r3,#5]
2209:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 6238              	 .loc 1 2209 0
 6239 0022 0837     	 adds r7,r7,#8
 6240              	.LCFI282:
 6241              	 .cfi_def_cfa_offset 8
 6242 0024 BD46     	 mov sp,r7
 6243              	.LCFI283:
 6244              	 .cfi_def_cfa_register 13
 6245              	 
 6246 0026 80BD     	 pop {r7,pc}
 6247              	 .cfi_endproc
 6248              	.LFE585:
 6250              	 .section .text.afatfs_extendSubdirectoryContinue,"ax",%progbits
 6251              	 .align 2
 6252              	 .thumb
 6253              	 .thumb_func
 6255              	afatfs_extendSubdirectoryContinue:
 6256              	.LFB586:
2210:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2211:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_extendSubdirectoryContinue(afatfsFile_t *directory)
2212:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 6257              	 .loc 1 2212 0
 6258              	 .cfi_startproc
 6259              	 
 6260              	 
 6261 0000 80B5     	 push {r7,lr}
 6262              	.LCFI284:
 6263              	 .cfi_def_cfa_offset 8
 6264              	 .cfi_offset 7,-8
 6265              	 .cfi_offset 14,-4
 6266 0002 8AB0     	 sub sp,sp,#40
 6267              	.LCFI285:
 6268              	 .cfi_def_cfa_offset 48
 6269 0004 00AF     	 add r7,sp,#0
 6270              	.LCFI286:
 6271              	 .cfi_def_cfa_register 7
 6272 0006 7860     	 str r0,[r7,#4]
2213:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsExtendSubdirectory_t *opState = &directory->operation.state.extendSubdirectory;
 6273              	 .loc 1 2213 0
 6274 0008 7B68     	 ldr r3,[r7,#4]
 6275 000a 2433     	 adds r3,r3,#36
 6276 000c 3B62     	 str r3,[r7,#32]
 6277              	.L431:
2214:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status;
2215:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t *sectorBuffer;
2216:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t clusterNumber, physicalSector;
2217:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint16_t sectorInCluster;
2218:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2219:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     doMore:
2220:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (opState->phase) {
 6278              	 .loc 1 2220 0
 6279 000e 3B6A     	 ldr r3,[r7,#32]
 6280 0010 5B7A     	 ldrb r3,[r3,#9]
 6281 0012 032B     	 cmp r3,#3
 6282 0014 00F2DE80 	 bhi .L432
 6283 0018 01A2     	 adr r2,.L434
 6284 001a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6285 001e 00BF     	 .p2align 2
 6286              	.L434:
 6287 0020 31000000 	 .word .L433+1
 6288 0024 59000000 	 .word .L435+1
 6289 0028 95010000 	 .word .L436+1
 6290 002c B5010000 	 .word .L437+1
 6291              	 .p2align 1
 6292              	.L433:
2221:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_EXTEND_SUBDIRECTORY_PHASE_ADD_FREE_CLUSTER:
2222:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_appendRegularFreeClusterContinue(directory);
 6293              	 .loc 1 2222 0
 6294 0030 7868     	 ldr r0,[r7,#4]
 6295 0032 FFF7FEFF 	 bl afatfs_appendRegularFreeClusterContinue
 6296 0036 0346     	 mov r3,r0
 6297 0038 FB77     	 strb r3,[r7,#31]
2223:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2224:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 6298              	 .loc 1 2224 0
 6299 003a FB7F     	 ldrb r3,[r7,#31]
 6300 003c 012B     	 cmp r3,#1
 6301 003e 03D1     	 bne .L438
2225:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_EXTEND_SUBDIRECTORY_PHASE_WRITE_SECTORS;
 6302              	 .loc 1 2225 0
 6303 0040 3B6A     	 ldr r3,[r7,#32]
 6304 0042 0122     	 movs r2,#1
 6305 0044 5A72     	 strb r2,[r3,#9]
2226:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 6306              	 .loc 1 2226 0
 6307 0046 E2E7     	 b .L431
 6308              	.L438:
2227:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else if (status == AFATFS_OPERATION_FAILURE) {
 6309              	 .loc 1 2227 0
 6310 0048 FB7F     	 ldrb r3,[r7,#31]
 6311 004a 022B     	 cmp r3,#2
 6312 004c 03D1     	 bne .L439
2228:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_EXTEND_SUBDIRECTORY_PHASE_FAILURE;
 6313              	 .loc 1 2228 0
 6314 004e 3B6A     	 ldr r3,[r7,#32]
 6315 0050 0322     	 movs r2,#3
 6316 0052 5A72     	 strb r2,[r3,#9]
2229:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 6317              	 .loc 1 2229 0
 6318 0054 DBE7     	 b .L431
 6319              	.L439:
2230:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2231:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 6320              	 .loc 1 2231 0
 6321 0056 BDE0     	 b .L432
 6322              	.L435:
2232:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_EXTEND_SUBDIRECTORY_PHASE_WRITE_SECTORS:
2233:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Now, zero out that cluster
2234:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_fileGetCursorClusterAndSector(directory, &clusterNumber, &sectorInCluster);
 6323              	 .loc 1 2234 0
 6324 0058 07F11002 	 add r2,r7,#16
 6325 005c 07F10E03 	 add r3,r7,#14
 6326 0060 7868     	 ldr r0,[r7,#4]
 6327 0062 1146     	 mov r1,r2
 6328 0064 1A46     	 mov r2,r3
 6329 0066 FFF7FEFF 	 bl afatfs_fileGetCursorClusterAndSector
2235:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             physicalSector = afatfs_fileGetCursorPhysicalSector(directory);
 6330              	 .loc 1 2235 0
 6331 006a 7868     	 ldr r0,[r7,#4]
 6332 006c FFF7FEFF 	 bl afatfs_fileGetCursorPhysicalSector
 6333 0070 7862     	 str r0,[r7,#36]
 6334              	.L446:
2236:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2237:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             while (1) {
2238:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 status = afatfs_cacheSector(physicalSector, &sectorBuffer, AFATFS_CACHE_WRITE, 0);
 6335              	 .loc 1 2238 0
 6336 0072 07F11403 	 add r3,r7,#20
 6337 0076 786A     	 ldr r0,[r7,#36]
 6338 0078 1946     	 mov r1,r3
 6339 007a 0222     	 movs r2,#2
 6340 007c 0023     	 movs r3,#0
 6341 007e FFF7FEFF 	 bl afatfs_cacheSector
 6342 0082 0346     	 mov r3,r0
 6343 0084 FB77     	 strb r3,[r7,#31]
2239:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2240:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (status != AFATFS_OPERATION_SUCCESS) {
 6344              	 .loc 1 2240 0
 6345 0086 FB7F     	 ldrb r3,[r7,#31]
 6346 0088 012B     	 cmp r3,#1
 6347 008a 01D0     	 beq .L440
2241:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     return status;
 6348              	 .loc 1 2241 0
 6349 008c FB7F     	 ldrb r3,[r7,#31]
 6350 008e A2E0     	 b .L449
 6351              	.L440:
2242:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2243:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2244:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 memset(sectorBuffer, 0, AFATFS_SECTOR_SIZE);
 6352              	 .loc 1 2244 0
 6353 0090 7B69     	 ldr r3,[r7,#20]
 6354 0092 1846     	 mov r0,r3
 6355 0094 0021     	 movs r1,#0
 6356 0096 4FF40072 	 mov r2,#512
 6357 009a FFF7FEFF 	 bl memset
2245:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2246:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // If this is the first sector of a non-root directory, create the "." and ".." ent
2247:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (directory->directoryEntryPos.sectorNumberPhysical != 0 && directory->cursorOffs
 6358              	 .loc 1 2247 0
 6359 009e 7B68     	 ldr r3,[r7,#4]
 6360 00a0 D3F81930 	 ldr r3,[r3,#25]
 6361 00a4 002B     	 cmp r3,#0
 6362 00a6 41D0     	 beq .L442
 6363              	 .loc 1 2247 0 is_stmt 0 discriminator 1
 6364 00a8 7B68     	 ldr r3,[r7,#4]
 6365 00aa D3F80130 	 ldr r3,[r3,#1]
 6366 00ae 002B     	 cmp r3,#0
 6367 00b0 3CD1     	 bne .L442
 6368              	.LBB34:
2248:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     fatDirectoryEntry_t *dirEntries = (fatDirectoryEntry_t *) sectorBuffer;
 6369              	 .loc 1 2248 0 is_stmt 1
 6370 00b2 7B69     	 ldr r3,[r7,#20]
 6371 00b4 BB61     	 str r3,[r7,#24]
2249:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2250:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     memset(dirEntries[0].filename, ' ', sizeof(dirEntries[0].filename));
 6372              	 .loc 1 2250 0
 6373 00b6 BB69     	 ldr r3,[r7,#24]
 6374 00b8 1846     	 mov r0,r3
 6375 00ba 2021     	 movs r1,#32
 6376 00bc 0B22     	 movs r2,#11
 6377 00be FFF7FEFF 	 bl memset
2251:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     dirEntries[0].filename[0] = '.';
 6378              	 .loc 1 2251 0
 6379 00c2 BB69     	 ldr r3,[r7,#24]
 6380 00c4 2E22     	 movs r2,#46
 6381 00c6 1A70     	 strb r2,[r3]
2252:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     dirEntries[0].firstClusterHigh = directory->firstCluster >> 16;
 6382              	 .loc 1 2252 0
 6383 00c8 7B68     	 ldr r3,[r7,#4]
 6384 00ca D3F81F30 	 ldr r3,[r3,#31]
 6385 00ce 1B0C     	 lsrs r3,r3,#16
 6386 00d0 9AB2     	 uxth r2,r3
 6387 00d2 BB69     	 ldr r3,[r7,#24]
 6388 00d4 9A82     	 strh r2,[r3,#20]
2253:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     dirEntries[0].firstClusterLow = directory->firstCluster & 0xFFFF;
 6389              	 .loc 1 2253 0
 6390 00d6 7B68     	 ldr r3,[r7,#4]
 6391 00d8 D3F81F30 	 ldr r3,[r3,#31]
 6392 00dc 9AB2     	 uxth r2,r3
 6393 00de BB69     	 ldr r3,[r7,#24]
 6394 00e0 5A83     	 strh r2,[r3,#26]
2254:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     dirEntries[0].attrib = FAT_FILE_ATTRIBUTE_DIRECTORY;
 6395              	 .loc 1 2254 0
 6396 00e2 BB69     	 ldr r3,[r7,#24]
 6397 00e4 1022     	 movs r2,#16
 6398 00e6 DA72     	 strb r2,[r3,#11]
2255:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2256:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     memset(dirEntries[1].filename, ' ', sizeof(dirEntries[1].filename));
 6399              	 .loc 1 2256 0
 6400 00e8 BB69     	 ldr r3,[r7,#24]
 6401 00ea 2033     	 adds r3,r3,#32
 6402 00ec 1846     	 mov r0,r3
 6403 00ee 2021     	 movs r1,#32
 6404 00f0 0B22     	 movs r2,#11
 6405 00f2 FFF7FEFF 	 bl memset
2257:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     dirEntries[1].filename[0] = '.';
 6406              	 .loc 1 2257 0
 6407 00f6 BB69     	 ldr r3,[r7,#24]
 6408 00f8 2033     	 adds r3,r3,#32
 6409 00fa 2E22     	 movs r2,#46
 6410 00fc 1A70     	 strb r2,[r3]
2258:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     dirEntries[1].filename[1] = '.';
 6411              	 .loc 1 2258 0
 6412 00fe BB69     	 ldr r3,[r7,#24]
 6413 0100 2033     	 adds r3,r3,#32
 6414 0102 2E22     	 movs r2,#46
 6415 0104 5A70     	 strb r2,[r3,#1]
2259:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     dirEntries[1].firstClusterHigh = opState->parentDirectoryCluster >> 16;
 6416              	 .loc 1 2259 0
 6417 0106 BB69     	 ldr r3,[r7,#24]
 6418 0108 2033     	 adds r3,r3,#32
 6419 010a 3A6A     	 ldr r2,[r7,#32]
 6420 010c D2F80A20 	 ldr r2,[r2,#10]
 6421 0110 120C     	 lsrs r2,r2,#16
 6422 0112 92B2     	 uxth r2,r2
 6423 0114 9A82     	 strh r2,[r3,#20]
2260:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     dirEntries[1].firstClusterLow = opState->parentDirectoryCluster & 0xFFFF;
 6424              	 .loc 1 2260 0
 6425 0116 BB69     	 ldr r3,[r7,#24]
 6426 0118 2033     	 adds r3,r3,#32
 6427 011a 3A6A     	 ldr r2,[r7,#32]
 6428 011c D2F80A20 	 ldr r2,[r2,#10]
 6429 0120 92B2     	 uxth r2,r2
 6430 0122 5A83     	 strh r2,[r3,#26]
2261:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     dirEntries[1].attrib = FAT_FILE_ATTRIBUTE_DIRECTORY;
 6431              	 .loc 1 2261 0
 6432 0124 BB69     	 ldr r3,[r7,#24]
 6433 0126 2033     	 adds r3,r3,#32
 6434 0128 1022     	 movs r2,#16
 6435 012a DA72     	 strb r2,[r3,#11]
 6436              	.L442:
 6437              	.LBE34:
2262:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2263:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2264:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (sectorInCluster < afatfs.sectorsPerCluster - 1) {
 6438              	 .loc 1 2264 0
 6439 012c FB89     	 ldrh r3,[r7,#14]
 6440 012e 1A46     	 mov r2,r3
 6441 0130 2B4B     	 ldr r3,.L451
 6442 0132 03F58E53 	 add r3,r3,#4544
 6443 0136 1033     	 adds r3,r3,#16
 6444 0138 1B68     	 ldr r3,[r3]
 6445 013a 013B     	 subs r3,r3,#1
 6446 013c 9A42     	 cmp r2,r3
 6447 013e 10D2     	 bcs .L443
2265:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     // Move to next sector
2266:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs_assert(afatfs_fseekAtomic(directory, AFATFS_SECTOR_SIZE));
 6448              	 .loc 1 2266 0
 6449 0140 7868     	 ldr r0,[r7,#4]
 6450 0142 4FF40071 	 mov r1,#512
 6451 0146 FFF7FEFF 	 bl afatfs_fseekAtomic
 6452 014a 0346     	 mov r3,r0
 6453 014c 1846     	 mov r0,r3
 6454 014e FFF7FEFF 	 bl afatfs_assert
2267:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     sectorInCluster++;
 6455              	 .loc 1 2267 0
 6456 0152 FB89     	 ldrh r3,[r7,#14]
 6457 0154 0133     	 adds r3,r3,#1
 6458 0156 9BB2     	 uxth r3,r3
 6459 0158 FB81     	 strh r3,[r7,#14]
2268:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     physicalSector++;
 6460              	 .loc 1 2268 0
 6461 015a 7B6A     	 ldr r3,[r7,#36]
 6462 015c 0133     	 adds r3,r3,#1
 6463 015e 7B62     	 str r3,[r7,#36]
 6464 0160 17E0     	 b .L450
 6465              	.L443:
2269:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 } else {
2270:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     break;
 6466              	 .loc 1 2270 0
 6467 0162 00BF     	 nop
2271:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2272:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2273:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2274:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Seek back to the beginning of the cluster
2275:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_assert(afatfs_fseekAtomic(directory, -AFATFS_SECTOR_SIZE * (afatfs.sectorsPerClu
 6468              	 .loc 1 2275 0
 6469 0164 1E4B     	 ldr r3,.L451
 6470 0166 03F58E53 	 add r3,r3,#4544
 6471 016a 1033     	 adds r3,r3,#16
 6472 016c 1A68     	 ldr r2,[r3]
 6473 016e 1346     	 mov r3,r2
 6474 0170 DB05     	 lsls r3,r3,#23
 6475 0172 9B1A     	 subs r3,r3,r2
 6476 0174 5B02     	 lsls r3,r3,#9
 6477 0176 03F50073 	 add r3,r3,#512
 6478 017a 7868     	 ldr r0,[r7,#4]
 6479 017c 1946     	 mov r1,r3
 6480 017e FFF7FEFF 	 bl afatfs_fseekAtomic
 6481 0182 0346     	 mov r3,r0
 6482 0184 1846     	 mov r0,r3
 6483 0186 FFF7FEFF 	 bl afatfs_assert
2276:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             opState->phase = AFATFS_EXTEND_SUBDIRECTORY_PHASE_SUCCESS;
 6484              	 .loc 1 2276 0
 6485 018a 3B6A     	 ldr r3,[r7,#32]
 6486 018c 0222     	 movs r2,#2
 6487 018e 5A72     	 strb r2,[r3,#9]
2277:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             goto doMore;
 6488              	 .loc 1 2277 0
 6489 0190 3DE7     	 b .L431
 6490              	.L450:
2272:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 6491              	 .loc 1 2272 0
 6492 0192 6EE7     	 b .L446
 6493              	.L436:
2278:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
2279:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_EXTEND_SUBDIRECTORY_PHASE_SUCCESS:
2280:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             directory->operation.operation = AFATFS_FILE_OPERATION_NONE;
 6494              	 .loc 1 2280 0
 6495 0194 7B68     	 ldr r3,[r7,#4]
 6496 0196 0022     	 movs r2,#0
 6497 0198 83F82320 	 strb r2,[r3,#35]
2281:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2282:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (opState->callback) {
 6498              	 .loc 1 2282 0
 6499 019c 3B6A     	 ldr r3,[r7,#32]
 6500 019e D3F80E30 	 ldr r3,[r3,#14]
 6501 01a2 002B     	 cmp r3,#0
 6502 01a4 04D0     	 beq .L447
2283:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->callback(directory);
 6503              	 .loc 1 2283 0
 6504 01a6 3B6A     	 ldr r3,[r7,#32]
 6505 01a8 D3F80E30 	 ldr r3,[r3,#14]
 6506 01ac 7868     	 ldr r0,[r7,#4]
 6507 01ae 9847     	 blx r3
 6508              	.L447:
2284:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2285:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2286:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_SUCCESS;
 6509              	 .loc 1 2286 0
 6510 01b0 0123     	 movs r3,#1
 6511 01b2 10E0     	 b .L449
 6512              	.L437:
2287:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
2288:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_EXTEND_SUBDIRECTORY_PHASE_FAILURE:
2289:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             directory->operation.operation = AFATFS_FILE_OPERATION_NONE;
 6513              	 .loc 1 2289 0
 6514 01b4 7B68     	 ldr r3,[r7,#4]
 6515 01b6 0022     	 movs r2,#0
 6516 01b8 83F82320 	 strb r2,[r3,#35]
2290:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2291:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (opState->callback) {
 6517              	 .loc 1 2291 0
 6518 01bc 3B6A     	 ldr r3,[r7,#32]
 6519 01be D3F80E30 	 ldr r3,[r3,#14]
 6520 01c2 002B     	 cmp r3,#0
 6521 01c4 04D0     	 beq .L448
2292:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->callback(NULL);
 6522              	 .loc 1 2292 0
 6523 01c6 3B6A     	 ldr r3,[r7,#32]
 6524 01c8 D3F80E30 	 ldr r3,[r3,#14]
 6525 01cc 0020     	 movs r0,#0
 6526 01ce 9847     	 blx r3
 6527              	.L448:
2293:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2294:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_FAILURE;
 6528              	 .loc 1 2294 0
 6529 01d0 0223     	 movs r3,#2
 6530 01d2 00E0     	 b .L449
 6531              	.L432:
2295:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
2296:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2297:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2298:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return AFATFS_OPERATION_IN_PROGRESS;
 6532              	 .loc 1 2298 0
 6533 01d4 0023     	 movs r3,#0
 6534              	.L449:
2299:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 6535              	 .loc 1 2299 0 discriminator 1
 6536 01d6 1846     	 mov r0,r3
 6537 01d8 2837     	 adds r7,r7,#40
 6538              	.LCFI287:
 6539              	 .cfi_def_cfa_offset 8
 6540 01da BD46     	 mov sp,r7
 6541              	.LCFI288:
 6542              	 .cfi_def_cfa_register 13
 6543              	 
 6544 01dc 80BD     	 pop {r7,pc}
 6545              	.L452:
 6546 01de 00BF     	 .align 2
 6547              	.L451:
 6548 01e0 00000000 	 .word afatfs
 6549              	 .cfi_endproc
 6550              	.LFE586:
 6552              	 .section .text.afatfs_extendSubdirectory,"ax",%progbits
 6553              	 .align 2
 6554              	 .thumb
 6555              	 .thumb_func
 6557              	afatfs_extendSubdirectory:
 6558              	.LFB587:
2300:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2301:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2302:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Queue an operation to add a cluster to a sub-directory.
2303:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2304:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Tthe new cluster is zero-filled. "." and ".." entries are added if it is the first cluster of a 
2305:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2306:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * The directory must not be busy, otherwise AFATFS_OPERATION_FAILURE is returned immediately.
2307:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2308:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * The directory's cursor must lie at the end of the directory file (i.e. isEndOfAllocatedFile() wo
2309:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2310:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * You must provide parentDirectory if this is the first extension to the subdirectory, otherwise p
2311:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2312:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_extendSubdirectory(afatfsFile_t *directory, afatfsFilePtr_t p
2313:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 6559              	 .loc 1 2313 0
 6560              	 .cfi_startproc
 6561              	 
 6562              	 
 6563 0000 80B5     	 push {r7,lr}
 6564              	.LCFI289:
 6565              	 .cfi_def_cfa_offset 8
 6566              	 .cfi_offset 7,-8
 6567              	 .cfi_offset 14,-4
 6568 0002 86B0     	 sub sp,sp,#24
 6569              	.LCFI290:
 6570              	 .cfi_def_cfa_offset 32
 6571 0004 00AF     	 add r7,sp,#0
 6572              	.LCFI291:
 6573              	 .cfi_def_cfa_register 7
 6574 0006 F860     	 str r0,[r7,#12]
 6575 0008 B960     	 str r1,[r7,#8]
 6576 000a 7A60     	 str r2,[r7,#4]
2314:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // FAT16 root directories cannot be extended
2315:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (directory->type == AFATFS_FILE_TYPE_FAT16_ROOT_DIRECTORY || afatfs_fileIsBusy(directory)) {
 6577              	 .loc 1 2315 0
 6578 000c FB68     	 ldr r3,[r7,#12]
 6579 000e 1B78     	 ldrb r3,[r3]
 6580 0010 022B     	 cmp r3,#2
 6581 0012 05D0     	 beq .L454
 6582              	 .loc 1 2315 0 is_stmt 0 discriminator 1
 6583 0014 F868     	 ldr r0,[r7,#12]
 6584 0016 FFF7FEFF 	 bl afatfs_fileIsBusy
 6585 001a 0346     	 mov r3,r0
 6586 001c 002B     	 cmp r3,#0
 6587 001e 01D0     	 beq .L455
 6588              	.L454:
2316:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_FAILURE;
 6589              	 .loc 1 2316 0 is_stmt 1
 6590 0020 0223     	 movs r3,#2
 6591 0022 24E0     	 b .L456
 6592              	.L455:
2317:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2318:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2319:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
2320:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * We'll assume that we're never asked to append the first cluster of a root directory, since a
2321:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * reasonably-formatted volume should have a root!
2322:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
2323:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsExtendSubdirectory_t *opState = &directory->operation.state.extendSubdirectory;
 6593              	 .loc 1 2323 0
 6594 0024 FB68     	 ldr r3,[r7,#12]
 6595 0026 2433     	 adds r3,r3,#36
 6596 0028 7B61     	 str r3,[r7,#20]
2324:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2325:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     directory->operation.operation = AFATFS_FILE_OPERATION_EXTEND_SUBDIRECTORY;
 6597              	 .loc 1 2325 0
 6598 002a FB68     	 ldr r3,[r7,#12]
 6599 002c 0922     	 movs r2,#9
 6600 002e 83F82320 	 strb r2,[r3,#35]
2326:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2327:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->phase = AFATFS_EXTEND_SUBDIRECTORY_PHASE_INITIAL;
 6601              	 .loc 1 2327 0
 6602 0032 7B69     	 ldr r3,[r7,#20]
 6603 0034 0022     	 movs r2,#0
 6604 0036 5A72     	 strb r2,[r3,#9]
2328:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->parentDirectoryCluster = parentDirectory ? parentDirectory->firstCluster : 0;
 6605              	 .loc 1 2328 0
 6606 0038 BB68     	 ldr r3,[r7,#8]
 6607 003a 002B     	 cmp r3,#0
 6608 003c 03D0     	 beq .L457
 6609              	 .loc 1 2328 0 is_stmt 0 discriminator 1
 6610 003e BB68     	 ldr r3,[r7,#8]
 6611 0040 D3F81F30 	 ldr r3,[r3,#31]
 6612 0044 00E0     	 b .L458
 6613              	.L457:
 6614              	 .loc 1 2328 0 discriminator 2
 6615 0046 0023     	 movs r3,#0
 6616              	.L458:
 6617              	 .loc 1 2328 0 discriminator 4
 6618 0048 7A69     	 ldr r2,[r7,#20]
 6619 004a C2F80A30 	 str r3,[r2,#10]
2329:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->callback = callback;
 6620              	 .loc 1 2329 0 is_stmt 1 discriminator 4
 6621 004e 7B69     	 ldr r3,[r7,#20]
 6622 0050 7A68     	 ldr r2,[r7,#4]
 6623 0052 C3F80E20 	 str r2,[r3,#14]
2330:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2331:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_appendRegularFreeClusterInitOperationState(&opState->appendFreeCluster, directory->curso
 6624              	 .loc 1 2331 0 discriminator 4
 6625 0056 7A69     	 ldr r2,[r7,#20]
 6626 0058 FB68     	 ldr r3,[r7,#12]
 6627 005a D3F81130 	 ldr r3,[r3,#17]
 6628 005e 1046     	 mov r0,r2
 6629 0060 1946     	 mov r1,r3
 6630 0062 FFF7FEFF 	 bl afatfs_appendRegularFreeClusterInitOperationState
2332:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2333:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs_extendSubdirectoryContinue(directory);
 6631              	 .loc 1 2333 0 discriminator 4
 6632 0066 F868     	 ldr r0,[r7,#12]
 6633 0068 FFF7FEFF 	 bl afatfs_extendSubdirectoryContinue
 6634 006c 0346     	 mov r3,r0
 6635              	.L456:
2334:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 6636              	 .loc 1 2334 0
 6637 006e 1846     	 mov r0,r3
 6638 0070 1837     	 adds r7,r7,#24
 6639              	.LCFI292:
 6640              	 .cfi_def_cfa_offset 8
 6641 0072 BD46     	 mov sp,r7
 6642              	.LCFI293:
 6643              	 .cfi_def_cfa_register 13
 6644              	 
 6645 0074 80BD     	 pop {r7,pc}
 6646              	 .cfi_endproc
 6647              	.LFE587:
 6649 0076 00BF     	 .section .text.afatfs_allocateDirectoryEntry,"ax",%progbits
 6650              	 .align 2
 6651              	 .thumb
 6652              	 .thumb_func
 6654              	afatfs_allocateDirectoryEntry:
 6655              	.LFB588:
2335:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2336:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2337:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Allocate space for a new directory entry to be written, store the position of that entry in the 
2338:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * the *dirEntry pointer to point to the entry within the cached FAT sector. This pointer's lifetim
2339:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * as the life of the cache, so don't dawdle.
2340:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2341:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Before the first call to this function, call afatfs_findFirst() on the directory.
2342:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2343:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * The directory sector in the cache is marked as dirty, so any changes written through to the entr
2344:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * in a subsequent poll cycle.
2345:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2346:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
2347:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - Call again later to continue
2348:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS     - Entry has been inserted and *dirEntry and *finder have been u
2349:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE     - When the directory is full.
2350:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2351:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_allocateDirectoryEntry(afatfsFilePtr_t directory, fatDirector
2352:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 6656              	 .loc 1 2352 0
 6657              	 .cfi_startproc
 6658              	 
 6659              	 
 6660 0000 80B5     	 push {r7,lr}
 6661              	.LCFI294:
 6662              	 .cfi_def_cfa_offset 8
 6663              	 .cfi_offset 7,-8
 6664              	 .cfi_offset 14,-4
 6665 0002 86B0     	 sub sp,sp,#24
 6666              	.LCFI295:
 6667              	 .cfi_def_cfa_offset 32
 6668 0004 00AF     	 add r7,sp,#0
 6669              	.LCFI296:
 6670              	 .cfi_def_cfa_register 7
 6671 0006 F860     	 str r0,[r7,#12]
 6672 0008 B960     	 str r1,[r7,#8]
 6673 000a 7A60     	 str r2,[r7,#4]
2353:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e result;
2354:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2355:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs_fileIsBusy(directory)) {
 6674              	 .loc 1 2355 0
 6675 000c F868     	 ldr r0,[r7,#12]
 6676 000e FFF7FEFF 	 bl afatfs_fileIsBusy
 6677 0012 0346     	 mov r3,r0
 6678 0014 002B     	 cmp r3,#0
 6679 0016 01D0     	 beq .L460
2356:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return AFATFS_OPERATION_IN_PROGRESS;
 6680              	 .loc 1 2356 0
 6681 0018 0023     	 movs r3,#0
 6682 001a 39E0     	 b .L461
 6683              	.L460:
2357:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2358:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2359:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     while ((result = afatfs_findNext(directory, finder, dirEntry)) == AFATFS_OPERATION_SUCCESS) {
 6684              	 .loc 1 2359 0
 6685 001c 2DE0     	 b .L462
 6686              	.L467:
2360:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (*dirEntry) {
 6687              	 .loc 1 2360 0
 6688 001e BB68     	 ldr r3,[r7,#8]
 6689 0020 1B68     	 ldr r3,[r3]
 6690 0022 002B     	 cmp r3,#0
 6691 0024 1DD0     	 beq .L463
2361:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (fat_isDirectoryEntryEmpty(*dirEntry) || fat_isDirectoryEntryTerminator(*dirEntry)) 
 6692              	 .loc 1 2361 0
 6693 0026 BB68     	 ldr r3,[r7,#8]
 6694 0028 1B68     	 ldr r3,[r3]
 6695 002a 1846     	 mov r0,r3
 6696 002c FFF7FEFF 	 bl fat_isDirectoryEntryEmpty
 6697 0030 0346     	 mov r3,r0
 6698 0032 002B     	 cmp r3,#0
 6699 0034 07D1     	 bne .L464
 6700              	 .loc 1 2361 0 is_stmt 0 discriminator 1
 6701 0036 BB68     	 ldr r3,[r7,#8]
 6702 0038 1B68     	 ldr r3,[r3]
 6703 003a 1846     	 mov r0,r3
 6704 003c FFF7FEFF 	 bl fat_isDirectoryEntryTerminator
 6705 0040 0346     	 mov r3,r0
 6706 0042 002B     	 cmp r3,#0
 6707 0044 19D0     	 beq .L462
 6708              	.L464:
2362:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs_cacheSectorMarkDirty(afatfs_getCacheDescriptorForBuffer((uint8_t*) *dirEntry
 6709              	 .loc 1 2362 0 is_stmt 1
 6710 0046 BB68     	 ldr r3,[r7,#8]
 6711 0048 1B68     	 ldr r3,[r3]
 6712 004a 1846     	 mov r0,r3
 6713 004c FFF7FEFF 	 bl afatfs_getCacheDescriptorForBuffer
 6714 0050 0346     	 mov r3,r0
 6715 0052 1846     	 mov r0,r3
 6716 0054 FFF7FEFF 	 bl afatfs_cacheSectorMarkDirty
2363:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2364:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs_findLast(directory);
 6717              	 .loc 1 2364 0
 6718 0058 F868     	 ldr r0,[r7,#12]
 6719 005a FFF7FEFF 	 bl afatfs_findLast
2365:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 return AFATFS_OPERATION_SUCCESS;
 6720              	 .loc 1 2365 0
 6721 005e 0123     	 movs r3,#1
 6722 0060 16E0     	 b .L461
 6723              	.L463:
2366:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2367:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
2368:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Need to extend directory size by adding a cluster
2369:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             result = afatfs_extendSubdirectory(directory, NULL, NULL);
 6724              	 .loc 1 2369 0
 6725 0062 F868     	 ldr r0,[r7,#12]
 6726 0064 0021     	 movs r1,#0
 6727 0066 0022     	 movs r2,#0
 6728 0068 FFF7FEFF 	 bl afatfs_extendSubdirectory
 6729 006c 0346     	 mov r3,r0
 6730 006e FB75     	 strb r3,[r7,#23]
2370:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2371:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (result == AFATFS_OPERATION_SUCCESS) {
 6731              	 .loc 1 2371 0
 6732 0070 FB7D     	 ldrb r3,[r7,#23]
 6733 0072 012B     	 cmp r3,#1
 6734 0074 00D1     	 bne .L465
2372:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Continue the search in the newly-extended directory
2373:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 continue;
 6735              	 .loc 1 2373 0
 6736 0076 00E0     	 b .L462
 6737              	.L465:
2374:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else {
2375:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // The status (in progress or failure) of extending the directory becomes our statu
2376:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 break;
 6738              	 .loc 1 2376 0
 6739 0078 09E0     	 b .L466
 6740              	.L462:
2359:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (*dirEntry) {
 6741              	 .loc 1 2359 0
 6742 007a F868     	 ldr r0,[r7,#12]
 6743 007c 7968     	 ldr r1,[r7,#4]
 6744 007e BA68     	 ldr r2,[r7,#8]
 6745 0080 FFF7FEFF 	 bl afatfs_findNext
 6746 0084 0346     	 mov r3,r0
 6747 0086 FB75     	 strb r3,[r7,#23]
 6748 0088 FB7D     	 ldrb r3,[r7,#23]
 6749 008a 012B     	 cmp r3,#1
 6750 008c C7D0     	 beq .L467
 6751              	.L466:
2377:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2378:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2379:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2380:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2381:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return result;
 6752              	 .loc 1 2381 0
 6753 008e FB7D     	 ldrb r3,[r7,#23]
 6754              	.L461:
2382:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 6755              	 .loc 1 2382 0
 6756 0090 1846     	 mov r0,r3
 6757 0092 1837     	 adds r7,r7,#24
 6758              	.LCFI297:
 6759              	 .cfi_def_cfa_offset 8
 6760 0094 BD46     	 mov sp,r7
 6761              	.LCFI298:
 6762              	 .cfi_def_cfa_register 13
 6763              	 
 6764 0096 80BD     	 pop {r7,pc}
 6765              	 .cfi_endproc
 6766              	.LFE588:
 6768              	 .section .text.afatfs_allocateFileHandle,"ax",%progbits
 6769              	 .align 2
 6770              	 .thumb
 6771              	 .thumb_func
 6773              	afatfs_allocateFileHandle:
 6774              	.LFB589:
2383:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2384:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2385:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Return a pointer to a free entry in the open files table (a file whose type is "NONE"). You shou
2386:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * the file afterwards with afatfs_initFileHandle().
2387:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2388:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsFilePtr_t afatfs_allocateFileHandle(void)
2389:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 6775              	 .loc 1 2389 0
 6776              	 .cfi_startproc
 6777              	 
 6778              	 
 6779              	 
 6780 0000 80B4     	 push {r7}
 6781              	.LCFI299:
 6782              	 .cfi_def_cfa_offset 4
 6783              	 .cfi_offset 7,-4
 6784 0002 83B0     	 sub sp,sp,#12
 6785              	.LCFI300:
 6786              	 .cfi_def_cfa_offset 16
 6787 0004 00AF     	 add r7,sp,#0
 6788              	.LCFI301:
 6789              	 .cfi_def_cfa_register 7
 6790              	.LBB35:
2390:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_MAX_OPEN_FILES; i++) {
 6791              	 .loc 1 2390 0
 6792 0006 0023     	 movs r3,#0
 6793 0008 7B60     	 str r3,[r7,#4]
 6794 000a 1DE0     	 b .L469
 6795              	.L472:
2391:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.openFiles[i].type == AFATFS_FILE_TYPE_NONE) {
 6796              	 .loc 1 2391 0
 6797 000c 1349     	 ldr r1,.L473
 6798 000e 7A68     	 ldr r2,[r7,#4]
 6799 0010 1346     	 mov r3,r2
 6800 0012 DB00     	 lsls r3,r3,#3
 6801 0014 9B1A     	 subs r3,r3,r2
 6802 0016 DB00     	 lsls r3,r3,#3
 6803 0018 1344     	 add r3,r3,r2
 6804 001a 0B44     	 add r3,r3,r1
 6805 001c 03F58453 	 add r3,r3,#4224
 6806 0020 1833     	 adds r3,r3,#24
 6807 0022 5B79     	 ldrb r3,[r3,#5]
 6808 0024 002B     	 cmp r3,#0
 6809 0026 0CD1     	 bne .L470
2392:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return &afatfs.openFiles[i];
 6810              	 .loc 1 2392 0
 6811 0028 7A68     	 ldr r2,[r7,#4]
 6812 002a 1346     	 mov r3,r2
 6813 002c DB00     	 lsls r3,r3,#3
 6814 002e 9B1A     	 subs r3,r3,r2
 6815 0030 DB00     	 lsls r3,r3,#3
 6816 0032 1344     	 add r3,r3,r2
 6817 0034 03F58453 	 add r3,r3,#4224
 6818 0038 1833     	 adds r3,r3,#24
 6819 003a 084A     	 ldr r2,.L473
 6820 003c 1344     	 add r3,r3,r2
 6821 003e 0533     	 adds r3,r3,#5
 6822 0040 06E0     	 b .L471
 6823              	.L470:
2390:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_MAX_OPEN_FILES; i++) {
 6824              	 .loc 1 2390 0 discriminator 2
 6825 0042 7B68     	 ldr r3,[r7,#4]
 6826 0044 0133     	 adds r3,r3,#1
 6827 0046 7B60     	 str r3,[r7,#4]
 6828              	.L469:
2390:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_MAX_OPEN_FILES; i++) {
 6829              	 .loc 1 2390 0 is_stmt 0 discriminator 1
 6830 0048 7B68     	 ldr r3,[r7,#4]
 6831 004a 022B     	 cmp r3,#2
 6832 004c DEDD     	 ble .L472
 6833              	.LBE35:
2393:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2394:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2395:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2396:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return NULL;
 6834              	 .loc 1 2396 0 is_stmt 1
 6835 004e 0023     	 movs r3,#0
 6836              	.L471:
2397:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 6837              	 .loc 1 2397 0
 6838 0050 1846     	 mov r0,r3
 6839 0052 0C37     	 adds r7,r7,#12
 6840              	.LCFI302:
 6841              	 .cfi_def_cfa_offset 4
 6842 0054 BD46     	 mov sp,r7
 6843              	.LCFI303:
 6844              	 .cfi_def_cfa_register 13
 6845              	 
 6846 0056 5DF8047B 	 ldr r7,[sp],#4
 6847              	.LCFI304:
 6848              	 .cfi_restore 7
 6849              	 .cfi_def_cfa_offset 0
 6850 005a 7047     	 bx lr
 6851              	.L474:
 6852              	 .align 2
 6853              	.L473:
 6854 005c 00000000 	 .word afatfs
 6855              	 .cfi_endproc
 6856              	.LFE589:
 6858              	 .section .text.afatfs_ftruncateContinue,"ax",%progbits
 6859              	 .align 2
 6860              	 .thumb
 6861              	 .thumb_func
 6863              	afatfs_ftruncateContinue:
 6864              	.LFB590:
2398:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2399:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2400:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Continue the file truncation.
2401:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2402:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * When truncation finally succeeds or fails, the current operation is cleared on the file (if the 
2403:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * was a truncate), then the truncate operation's callback is called. This allows the truncation to
2404:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * sub-operation without it clearing the parent file operation.
2405:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2406:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_ftruncateContinue(afatfsFilePtr_t file, bool markDeleted)
2407:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 6865              	 .loc 1 2407 0
 6866              	 .cfi_startproc
 6867              	 
 6868              	 
 6869 0000 90B5     	 push {r4,r7,lr}
 6870              	.LCFI305:
 6871              	 .cfi_def_cfa_offset 12
 6872              	 .cfi_offset 4,-12
 6873              	 .cfi_offset 7,-8
 6874              	 .cfi_offset 14,-4
 6875 0002 8BB0     	 sub sp,sp,#44
 6876              	.LCFI306:
 6877              	 .cfi_def_cfa_offset 56
 6878 0004 00AF     	 add r7,sp,#0
 6879              	.LCFI307:
 6880              	 .cfi_def_cfa_register 7
 6881 0006 7860     	 str r0,[r7,#4]
 6882 0008 0B46     	 mov r3,r1
 6883 000a FB70     	 strb r3,[r7,#3]
2408:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsTruncateFile_t *opState = &file->operation.state.truncateFile;
 6884              	 .loc 1 2408 0
 6885 000c 7B68     	 ldr r3,[r7,#4]
 6886 000e 2433     	 adds r3,r3,#36
 6887 0010 3B62     	 str r3,[r7,#32]
2409:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status = AFATFS_OPERATION_FAILURE;
 6888              	 .loc 1 2409 0
 6889 0012 0223     	 movs r3,#2
 6890 0014 87F82730 	 strb r3,[r7,#39]
 6891              	.L476:
2410:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2411:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
2412:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t oldFreeFileStart, freeFileGrow;
2413:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
2414:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2415:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     doMore:
2416:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2417:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (opState->phase) {
 6892              	 .loc 1 2417 0
 6893 0018 3B6A     	 ldr r3,[r7,#32]
 6894 001a 1B7C     	 ldrb r3,[r3,#16]
 6895 001c 042B     	 cmp r3,#4
 6896 001e 00F2DB80 	 bhi .L477
 6897 0022 01A2     	 adr r2,.L479
 6898 0024 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 6899              	 .p2align 2
 6900              	.L479:
 6901 0028 3D000000 	 .word .L478+1
 6902 002c 95010000 	 .word .L491+1
 6903 0030 79000000 	 .word .L481+1
 6904 0034 A3000000 	 .word .L482+1
 6905 0038 B3010000 	 .word .L483+1
 6906              	 .p2align 1
 6907              	.L478:
2418:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_TRUNCATE_FILE_UPDATE_DIRECTORY:
2419:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_saveDirectoryEntry(file, markDeleted ? AFATFS_SAVE_DIRECTORY_DELETED : 
 6908              	 .loc 1 2419 0
 6909 003c FB78     	 ldrb r3,[r7,#3]
 6910 003e 002B     	 cmp r3,#0
 6911 0040 01D0     	 beq .L484
 6912              	 .loc 1 2419 0 is_stmt 0 discriminator 1
 6913 0042 0223     	 movs r3,#2
 6914 0044 00E0     	 b .L485
 6915              	.L484:
 6916              	 .loc 1 2419 0 discriminator 2
 6917 0046 0023     	 movs r3,#0
 6918              	.L485:
 6919              	 .loc 1 2419 0 discriminator 4
 6920 0048 7868     	 ldr r0,[r7,#4]
 6921 004a 1946     	 mov r1,r3
 6922 004c FFF7FEFF 	 bl afatfs_saveDirectoryEntry
 6923 0050 0346     	 mov r3,r0
 6924 0052 87F82730 	 strb r3,[r7,#39]
2420:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2421:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 6925              	 .loc 1 2421 0 is_stmt 1 discriminator 4
 6926 0056 97F82730 	 ldrb r3,[r7,#39]
 6927 005a 012B     	 cmp r3,#1
 6928 005c 0BD1     	 bne .L486
2422:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
2423:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (opState->endCluster) {
 6929              	 .loc 1 2423 0
 6930 005e 3B6A     	 ldr r3,[r7,#32]
 6931 0060 9B68     	 ldr r3,[r3,#8]
 6932 0062 002B     	 cmp r3,#0
 6933 0064 03D0     	 beq .L487
2424:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     opState->phase = AFATFS_TRUNCATE_FILE_ERASE_FAT_CHAIN_CONTIGUOUS;
 6934              	 .loc 1 2424 0
 6935 0066 3B6A     	 ldr r3,[r7,#32]
 6936 0068 0222     	 movs r2,#2
 6937 006a 1A74     	 strb r2,[r3,#16]
 6938 006c 02E0     	 b .L488
 6939              	.L487:
2425:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 } else
2426:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
2427:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 {
2428:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     opState->phase = AFATFS_TRUNCATE_FILE_ERASE_FAT_CHAIN_NORMAL;
 6940              	 .loc 1 2428 0
 6941 006e 3B6A     	 ldr r3,[r7,#32]
 6942 0070 0122     	 movs r2,#1
 6943 0072 1A74     	 strb r2,[r3,#16]
 6944              	.L488:
2429:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2430:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 6945              	 .loc 1 2430 0
 6946 0074 D0E7     	 b .L476
 6947              	.L486:
2431:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2432:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 6948              	 .loc 1 2432 0
 6949 0076 AFE0     	 b .L477
 6950              	.L481:
2433:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
2434:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_TRUNCATE_FILE_ERASE_FAT_CHAIN_CONTIGUOUS:
2435:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Prepare the clusters to be added back on to the beginning of the freefile
2436:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_FATFillWithPattern(AFATFS_FAT_PATTERN_UNTERMINATED_CHAIN, &opState->cur
 6951              	 .loc 1 2436 0
 6952 0078 3B6A     	 ldr r3,[r7,#32]
 6953 007a 1A1D     	 adds r2,r3,#4
 6954 007c 3B6A     	 ldr r3,[r7,#32]
 6955 007e 9B68     	 ldr r3,[r3,#8]
 6956 0080 0020     	 movs r0,#0
 6957 0082 1146     	 mov r1,r2
 6958 0084 1A46     	 mov r2,r3
 6959 0086 FFF7FEFF 	 bl afatfs_FATFillWithPattern
 6960 008a 0346     	 mov r3,r0
 6961 008c 87F82730 	 strb r3,[r7,#39]
2437:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2438:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 6962              	 .loc 1 2438 0
 6963 0090 97F82730 	 ldrb r3,[r7,#39]
 6964 0094 012B     	 cmp r3,#1
 6965 0096 03D1     	 bne .L489
2439:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_TRUNCATE_FILE_PREPEND_TO_FREEFILE;
 6966              	 .loc 1 2439 0
 6967 0098 3B6A     	 ldr r3,[r7,#32]
 6968 009a 0322     	 movs r2,#3
 6969 009c 1A74     	 strb r2,[r3,#16]
2440:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 6970              	 .loc 1 2440 0
 6971 009e BBE7     	 b .L476
 6972              	.L489:
2441:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2442:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 6973              	 .loc 1 2442 0
 6974 00a0 9AE0     	 b .L477
 6975              	.L482:
2443:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_TRUNCATE_FILE_PREPEND_TO_FREEFILE:
2444:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Note, it's okay to run this code several times:
2445:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             oldFreeFileStart = afatfs.freeFile.firstCluster;
 6976              	 .loc 1 2445 0
 6977 00a2 574B     	 ldr r3,.L500
 6978 00a4 03F58B53 	 add r3,r3,#4448
 6979 00a8 0733     	 adds r3,r3,#7
 6980 00aa 1B68     	 ldr r3,[r3]
 6981 00ac FB61     	 str r3,[r7,#28]
2446:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2447:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.freeFile.firstCluster = opState->startCluster;
 6982              	 .loc 1 2447 0
 6983 00ae 3B6A     	 ldr r3,[r7,#32]
 6984 00b0 1A68     	 ldr r2,[r3]
 6985 00b2 534B     	 ldr r3,.L500
 6986 00b4 03F58B53 	 add r3,r3,#4448
 6987 00b8 0733     	 adds r3,r3,#7
 6988 00ba 1A60     	 str r2,[r3]
2448:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2449:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             freeFileGrow = (oldFreeFileStart - opState->startCluster) * afatfs_clusterSize();
 6989              	 .loc 1 2449 0
 6990 00bc 3B6A     	 ldr r3,[r7,#32]
 6991 00be 1B68     	 ldr r3,[r3]
 6992 00c0 FA69     	 ldr r2,[r7,#28]
 6993 00c2 D41A     	 subs r4,r2,r3
 6994 00c4 FFF7FEFF 	 bl afatfs_clusterSize
 6995 00c8 0346     	 mov r3,r0
 6996 00ca 03FB04F3 	 mul r3,r3,r4
 6997 00ce BB61     	 str r3,[r7,#24]
2450:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2451:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.freeFile.logicalSize += freeFileGrow;
 6998              	 .loc 1 2451 0
 6999 00d0 4B4B     	 ldr r3,.L500
 7000 00d2 03F58A53 	 add r3,r3,#4416
 7001 00d6 0D33     	 adds r3,r3,#13
 7002 00d8 1A68     	 ldr r2,[r3]
 7003 00da BB69     	 ldr r3,[r7,#24]
 7004 00dc 1A44     	 add r2,r2,r3
 7005 00de 484B     	 ldr r3,.L500
 7006 00e0 03F58A53 	 add r3,r3,#4416
 7007 00e4 0D33     	 adds r3,r3,#13
 7008 00e6 1A60     	 str r2,[r3]
2452:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.freeFile.physicalSize += freeFileGrow;
 7009              	 .loc 1 2452 0
 7010 00e8 454B     	 ldr r3,.L500
 7011 00ea 03F58A53 	 add r3,r3,#4416
 7012 00ee 1133     	 adds r3,r3,#17
 7013 00f0 1A68     	 ldr r2,[r3]
 7014 00f2 BB69     	 ldr r3,[r7,#24]
 7015 00f4 1A44     	 add r2,r2,r3
 7016 00f6 424B     	 ldr r3,.L500
 7017 00f8 03F58A53 	 add r3,r3,#4416
 7018 00fc 1133     	 adds r3,r3,#17
 7019 00fe 1A60     	 str r2,[r3]
2453:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2454:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_saveDirectoryEntry(&afatfs.freeFile, AFATFS_SAVE_DIRECTORY_NORMAL);
 7020              	 .loc 1 2454 0
 7021 0100 4048     	 ldr r0,.L500+4
 7022 0102 0021     	 movs r1,#0
 7023 0104 FFF7FEFF 	 bl afatfs_saveDirectoryEntry
 7024 0108 0346     	 mov r3,r0
 7025 010a 87F82730 	 strb r3,[r7,#39]
2455:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 7026              	 .loc 1 2455 0
 7027 010e 97F82730 	 ldrb r3,[r7,#39]
 7028 0112 012B     	 cmp r3,#1
 7029 0114 03D1     	 bne .L490
2456:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_TRUNCATE_FILE_SUCCESS;
 7030              	 .loc 1 2456 0
 7031 0116 3B6A     	 ldr r3,[r7,#32]
 7032 0118 0422     	 movs r2,#4
 7033 011a 1A74     	 strb r2,[r3,#16]
2457:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 7034              	 .loc 1 2457 0
 7035 011c 7CE7     	 b .L476
 7036              	.L490:
2458:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2459:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 7037              	 .loc 1 2459 0
 7038 011e 5BE0     	 b .L477
 7039              	.L496:
 7040              	.LBB36:
2460:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
2461:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_TRUNCATE_FILE_ERASE_FAT_CHAIN_NORMAL:
2462:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             while (!afatfs_FATIsEndOfChainMarker(opState->currentCluster)) {
2463:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 uint32_t nextCluster;
2464:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2465:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 status = afatfs_FATGetNextCluster(0, opState->currentCluster, &nextCluster);
 7041              	 .loc 1 2465 0
 7042 0120 3B6A     	 ldr r3,[r7,#32]
 7043 0122 5A68     	 ldr r2,[r3,#4]
 7044 0124 07F10C03 	 add r3,r7,#12
 7045 0128 0020     	 movs r0,#0
 7046 012a 1146     	 mov r1,r2
 7047 012c 1A46     	 mov r2,r3
 7048 012e FFF7FEFF 	 bl afatfs_FATGetNextCluster
 7049 0132 0346     	 mov r3,r0
 7050 0134 87F82730 	 strb r3,[r7,#39]
2466:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2467:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (status != AFATFS_OPERATION_SUCCESS) {
 7051              	 .loc 1 2467 0
 7052 0138 97F82730 	 ldrb r3,[r7,#39]
 7053 013c 012B     	 cmp r3,#1
 7054 013e 02D0     	 beq .L492
2468:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     return status;
 7055              	 .loc 1 2468 0
 7056 0140 97F82730 	 ldrb r3,[r7,#39]
 7057 0144 57E0     	 b .L495
 7058              	.L492:
2469:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2470:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2471:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 status = afatfs_FATSetNextCluster(opState->currentCluster, 0);
 7059              	 .loc 1 2471 0
 7060 0146 3B6A     	 ldr r3,[r7,#32]
 7061 0148 5B68     	 ldr r3,[r3,#4]
 7062 014a 1846     	 mov r0,r3
 7063 014c 0021     	 movs r1,#0
 7064 014e FFF7FEFF 	 bl afatfs_FATSetNextCluster
 7065 0152 0346     	 mov r3,r0
 7066 0154 87F82730 	 strb r3,[r7,#39]
2472:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2473:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (status != AFATFS_OPERATION_SUCCESS) {
 7067              	 .loc 1 2473 0
 7068 0158 97F82730 	 ldrb r3,[r7,#39]
 7069 015c 012B     	 cmp r3,#1
 7070 015e 02D0     	 beq .L494
2474:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     return status;
 7071              	 .loc 1 2474 0
 7072 0160 97F82730 	 ldrb r3,[r7,#39]
 7073 0164 47E0     	 b .L495
 7074              	.L494:
2475:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2476:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2477:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->currentCluster = nextCluster;
 7075              	 .loc 1 2477 0
 7076 0166 FA68     	 ldr r2,[r7,#12]
 7077 0168 3B6A     	 ldr r3,[r7,#32]
 7078 016a 5A60     	 str r2,[r3,#4]
 7079              	.LBB37:
2478:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2479:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Searches for unallocated regular clusters should be told about this free cluster
2480:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.lastClusterAllocated = MIN(afatfs.lastClusterAllocated, opState->currentClus
 7080              	 .loc 1 2480 0
 7081 016c 244B     	 ldr r3,.L500
 7082 016e 03F58E53 	 add r3,r3,#4544
 7083 0172 1433     	 adds r3,r3,#20
 7084 0174 1B68     	 ldr r3,[r3]
 7085 0176 7B61     	 str r3,[r7,#20]
 7086 0178 3B6A     	 ldr r3,[r7,#32]
 7087 017a 5B68     	 ldr r3,[r3,#4]
 7088 017c 013B     	 subs r3,r3,#1
 7089 017e 3B61     	 str r3,[r7,#16]
 7090 0180 3A69     	 ldr r2,[r7,#16]
 7091 0182 7B69     	 ldr r3,[r7,#20]
 7092 0184 9A42     	 cmp r2,r3
 7093 0186 28BF     	 it cs
 7094 0188 1A46     	 movcs r2,r3
 7095              	.LBE37:
 7096 018a 1D4B     	 ldr r3,.L500
 7097 018c 03F58E53 	 add r3,r3,#4544
 7098 0190 1433     	 adds r3,r3,#20
 7099 0192 1A60     	 str r2,[r3]
 7100              	.L491:
 7101              	.LBE36:
2462:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 uint32_t nextCluster;
 7102              	 .loc 1 2462 0
 7103 0194 3B6A     	 ldr r3,[r7,#32]
 7104 0196 5B68     	 ldr r3,[r3,#4]
 7105 0198 1846     	 mov r0,r3
 7106 019a FFF7FEFF 	 bl afatfs_FATIsEndOfChainMarker
 7107 019e 0346     	 mov r3,r0
 7108 01a0 83F00103 	 eor r3,r3,#1
 7109 01a4 DBB2     	 uxtb r3,r3
 7110 01a6 002B     	 cmp r3,#0
 7111 01a8 BAD1     	 bne .L496
2481:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2482:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2483:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             opState->phase = AFATFS_TRUNCATE_FILE_SUCCESS;
 7112              	 .loc 1 2483 0
 7113 01aa 3B6A     	 ldr r3,[r7,#32]
 7114 01ac 0422     	 movs r2,#4
 7115 01ae 1A74     	 strb r2,[r3,#16]
2484:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             goto doMore;
 7116              	 .loc 1 2484 0
 7117 01b0 32E7     	 b .L476
 7118              	.L483:
2485:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
2486:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_TRUNCATE_FILE_SUCCESS:
2487:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (file->operation.operation == AFATFS_FILE_OPERATION_TRUNCATE) {
 7119              	 .loc 1 2487 0
 7120 01b2 7B68     	 ldr r3,[r7,#4]
 7121 01b4 93F82330 	 ldrb r3,[r3,#35]
 7122 01b8 042B     	 cmp r3,#4
 7123 01ba 03D1     	 bne .L497
2488:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 7124              	 .loc 1 2488 0
 7125 01bc 7B68     	 ldr r3,[r7,#4]
 7126 01be 0022     	 movs r2,#0
 7127 01c0 83F82320 	 strb r2,[r3,#35]
 7128              	.L497:
2489:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2490:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2491:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (opState->callback) {
 7129              	 .loc 1 2491 0
 7130 01c4 3B6A     	 ldr r3,[r7,#32]
 7131 01c6 DB68     	 ldr r3,[r3,#12]
 7132 01c8 002B     	 cmp r3,#0
 7133 01ca 03D0     	 beq .L498
2492:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->callback(file);
 7134              	 .loc 1 2492 0
 7135 01cc 3B6A     	 ldr r3,[r7,#32]
 7136 01ce DB68     	 ldr r3,[r3,#12]
 7137 01d0 7868     	 ldr r0,[r7,#4]
 7138 01d2 9847     	 blx r3
 7139              	.L498:
2493:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2494:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2495:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return AFATFS_OPERATION_SUCCESS;
 7140              	 .loc 1 2495 0
 7141 01d4 0123     	 movs r3,#1
 7142 01d6 0EE0     	 b .L495
 7143              	.L477:
2496:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
2497:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2498:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2499:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (status == AFATFS_OPERATION_FAILURE && file->operation.operation == AFATFS_FILE_OPERATION_TR
 7144              	 .loc 1 2499 0
 7145 01d8 97F82730 	 ldrb r3,[r7,#39]
 7146 01dc 022B     	 cmp r3,#2
 7147 01de 08D1     	 bne .L499
 7148              	 .loc 1 2499 0 is_stmt 0 discriminator 1
 7149 01e0 7B68     	 ldr r3,[r7,#4]
 7150 01e2 93F82330 	 ldrb r3,[r3,#35]
 7151 01e6 042B     	 cmp r3,#4
 7152 01e8 03D1     	 bne .L499
2500:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 7153              	 .loc 1 2500 0 is_stmt 1
 7154 01ea 7B68     	 ldr r3,[r7,#4]
 7155 01ec 0022     	 movs r2,#0
 7156 01ee 83F82320 	 strb r2,[r3,#35]
 7157              	.L499:
2501:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2502:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2503:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return status;
 7158              	 .loc 1 2503 0
 7159 01f2 97F82730 	 ldrb r3,[r7,#39]
 7160              	.L495:
2504:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 7161              	 .loc 1 2504 0
 7162 01f6 1846     	 mov r0,r3
 7163 01f8 2C37     	 adds r7,r7,#44
 7164              	.LCFI308:
 7165              	 .cfi_def_cfa_offset 12
 7166 01fa BD46     	 mov sp,r7
 7167              	.LCFI309:
 7168              	 .cfi_def_cfa_register 13
 7169              	 
 7170 01fc 90BD     	 pop {r4,r7,pc}
 7171              	.L501:
 7172 01fe 00BF     	 .align 2
 7173              	.L500:
 7174 0200 00000000 	 .word afatfs
 7175 0204 48110000 	 .word afatfs+4424
 7176              	 .cfi_endproc
 7177              	.LFE590:
 7179              	 .section .text.afatfs_ftruncate,"ax",%progbits
 7180              	 .align 2
 7181              	 .global afatfs_ftruncate
 7182              	 .thumb
 7183              	 .thumb_func
 7185              	afatfs_ftruncate:
 7186              	.LFB591:
2505:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2506:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2507:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Queue an operation to truncate the file to zero bytes in length.
2508:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2509:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true if the operation was successfully queued or false if the file is busy (try again la
2510:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2511:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * The callback is called once the file has been truncated (some time after this routine returns).
2512:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2513:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_ftruncate(afatfsFilePtr_t file, afatfsFileCallback_t callback)
2514:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 7187              	 .loc 1 2514 0
 7188              	 .cfi_startproc
 7189              	 
 7190              	 
 7191 0000 80B5     	 push {r7,lr}
 7192              	.LCFI310:
 7193              	 .cfi_def_cfa_offset 8
 7194              	 .cfi_offset 7,-8
 7195              	 .cfi_offset 14,-4
 7196 0002 84B0     	 sub sp,sp,#16
 7197              	.LCFI311:
 7198              	 .cfi_def_cfa_offset 24
 7199 0004 00AF     	 add r7,sp,#0
 7200              	.LCFI312:
 7201              	 .cfi_def_cfa_register 7
 7202 0006 7860     	 str r0,[r7,#4]
 7203 0008 3960     	 str r1,[r7]
2515:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsTruncateFile_t *opState;
2516:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2517:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs_fileIsBusy(file))
 7204              	 .loc 1 2517 0
 7205 000a 7868     	 ldr r0,[r7,#4]
 7206 000c FFF7FEFF 	 bl afatfs_fileIsBusy
 7207 0010 0346     	 mov r3,r0
 7208 0012 002B     	 cmp r3,#0
 7209 0014 01D0     	 beq .L503
2518:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false;
 7210              	 .loc 1 2518 0
 7211 0016 0023     	 movs r3,#0
 7212 0018 50E0     	 b .L504
 7213              	.L503:
2519:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2520:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->operation.operation = AFATFS_FILE_OPERATION_TRUNCATE;
 7214              	 .loc 1 2520 0
 7215 001a 7B68     	 ldr r3,[r7,#4]
 7216 001c 0422     	 movs r2,#4
 7217 001e 83F82320 	 strb r2,[r3,#35]
2521:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2522:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState = &file->operation.state.truncateFile;
 7218              	 .loc 1 2522 0
 7219 0022 7B68     	 ldr r3,[r7,#4]
 7220 0024 2433     	 adds r3,r3,#36
 7221 0026 FB60     	 str r3,[r7,#12]
2523:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->callback = callback;
 7222              	 .loc 1 2523 0
 7223 0028 FB68     	 ldr r3,[r7,#12]
 7224 002a 3A68     	 ldr r2,[r7]
 7225 002c DA60     	 str r2,[r3,#12]
2524:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->phase = AFATFS_TRUNCATE_FILE_INITIAL;
 7226              	 .loc 1 2524 0
 7227 002e FB68     	 ldr r3,[r7,#12]
 7228 0030 0022     	 movs r2,#0
 7229 0032 1A74     	 strb r2,[r3,#16]
2525:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->startCluster = file->firstCluster;
 7230              	 .loc 1 2525 0
 7231 0034 7B68     	 ldr r3,[r7,#4]
 7232 0036 D3F81F20 	 ldr r2,[r3,#31]
 7233 003a FB68     	 ldr r3,[r7,#12]
 7234 003c 1A60     	 str r2,[r3]
2526:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->currentCluster = opState->startCluster;
 7235              	 .loc 1 2526 0
 7236 003e FB68     	 ldr r3,[r7,#12]
 7237 0040 1A68     	 ldr r2,[r3]
 7238 0042 FB68     	 ldr r3,[r7,#12]
 7239 0044 5A60     	 str r2,[r3,#4]
2527:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2528:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
2529:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if ((file->mode & AFATFS_FILE_MODE_CONTIGUOUS) != 0) {
 7240              	 .loc 1 2529 0
 7241 0046 7B68     	 ldr r3,[r7,#4]
 7242 0048 5B7D     	 ldrb r3,[r3,#21]
 7243 004a 03F00803 	 and r3,r3,#8
 7244 004e 002B     	 cmp r3,#0
 7245 0050 07D0     	 beq .L505
2530:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // The file is contiguous and ends where the freefile begins
2531:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         opState->endCluster = afatfs.freeFile.firstCluster;
 7246              	 .loc 1 2531 0
 7247 0052 1C4B     	 ldr r3,.L507
 7248 0054 03F58B53 	 add r3,r3,#4448
 7249 0058 0733     	 adds r3,r3,#7
 7250 005a 1A68     	 ldr r2,[r3]
 7251 005c FB68     	 ldr r3,[r7,#12]
 7252 005e 9A60     	 str r2,[r3,#8]
 7253 0060 08E0     	 b .L506
 7254              	.L505:
2532:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else
2533:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
2534:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     {
2535:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // The range of clusters to delete is not contiguous, so follow it as a linked-list instead
2536:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         opState->endCluster = 0;
 7255              	 .loc 1 2536 0
 7256 0062 FB68     	 ldr r3,[r7,#12]
 7257 0064 0022     	 movs r2,#0
 7258 0066 1A72     	 strb r2,[r3,#8]
 7259 0068 0022     	 movs r2,#0
 7260 006a 5A72     	 strb r2,[r3,#9]
 7261 006c 0022     	 movs r2,#0
 7262 006e 9A72     	 strb r2,[r3,#10]
 7263 0070 0022     	 movs r2,#0
 7264 0072 DA72     	 strb r2,[r3,#11]
 7265              	.L506:
2537:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2538:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2539:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // We'll drop the cluster chain from the directory entry immediately
2540:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->firstCluster = 0;
 7266              	 .loc 1 2540 0
 7267 0074 7B68     	 ldr r3,[r7,#4]
 7268 0076 0022     	 movs r2,#0
 7269 0078 DA77     	 strb r2,[r3,#31]
 7270 007a 0022     	 movs r2,#0
 7271 007c 83F82020 	 strb r2,[r3,#32]
 7272 0080 0022     	 movs r2,#0
 7273 0082 83F82120 	 strb r2,[r3,#33]
 7274 0086 0022     	 movs r2,#0
 7275 0088 83F82220 	 strb r2,[r3,#34]
2541:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->logicalSize = 0;
 7276              	 .loc 1 2541 0
 7277 008c 7B68     	 ldr r3,[r7,#4]
 7278 008e 0022     	 movs r2,#0
 7279 0090 5A71     	 strb r2,[r3,#5]
 7280 0092 0022     	 movs r2,#0
 7281 0094 9A71     	 strb r2,[r3,#6]
 7282 0096 0022     	 movs r2,#0
 7283 0098 DA71     	 strb r2,[r3,#7]
 7284 009a 0022     	 movs r2,#0
 7285 009c 1A72     	 strb r2,[r3,#8]
2542:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->physicalSize = 0;
 7286              	 .loc 1 2542 0
 7287 009e 7B68     	 ldr r3,[r7,#4]
 7288 00a0 0022     	 movs r2,#0
 7289 00a2 5A72     	 strb r2,[r3,#9]
 7290 00a4 0022     	 movs r2,#0
 7291 00a6 9A72     	 strb r2,[r3,#10]
 7292 00a8 0022     	 movs r2,#0
 7293 00aa DA72     	 strb r2,[r3,#11]
 7294 00ac 0022     	 movs r2,#0
 7295 00ae 1A73     	 strb r2,[r3,#12]
2543:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2544:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fseek(file, 0, AFATFS_SEEK_SET);
 7296              	 .loc 1 2544 0
 7297 00b0 7868     	 ldr r0,[r7,#4]
 7298 00b2 0021     	 movs r1,#0
 7299 00b4 0022     	 movs r2,#0
 7300 00b6 FFF7FEFF 	 bl afatfs_fseek
2545:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2546:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return true;
 7301              	 .loc 1 2546 0
 7302 00ba 0123     	 movs r3,#1
 7303              	.L504:
2547:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 7304              	 .loc 1 2547 0
 7305 00bc 1846     	 mov r0,r3
 7306 00be 1037     	 adds r7,r7,#16
 7307              	.LCFI313:
 7308              	 .cfi_def_cfa_offset 8
 7309 00c0 BD46     	 mov sp,r7
 7310              	.LCFI314:
 7311              	 .cfi_def_cfa_register 13
 7312              	 
 7313 00c2 80BD     	 pop {r7,pc}
 7314              	.L508:
 7315              	 .align 2
 7316              	.L507:
 7317 00c4 00000000 	 .word afatfs
 7318              	 .cfi_endproc
 7319              	.LFE591:
 7321              	 .section .text.afatfs_fileLoadDirectoryEntry,"ax",%progbits
 7322              	 .align 2
 7323              	 .thumb
 7324              	 .thumb_func
 7326              	afatfs_fileLoadDirectoryEntry:
 7327              	.LFB592:
2548:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2549:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2550:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Load details from the given FAT directory entry into the file.
2551:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2552:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_fileLoadDirectoryEntry(afatfsFile_t *file, fatDirectoryEntry_t *entry)
2553:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 7328              	 .loc 1 2553 0
 7329              	 .cfi_startproc
 7330              	 
 7331              	 
 7332 0000 90B5     	 push {r4,r7,lr}
 7333              	.LCFI315:
 7334              	 .cfi_def_cfa_offset 12
 7335              	 .cfi_offset 4,-12
 7336              	 .cfi_offset 7,-8
 7337              	 .cfi_offset 14,-4
 7338 0002 83B0     	 sub sp,sp,#12
 7339              	.LCFI316:
 7340              	 .cfi_def_cfa_offset 24
 7341 0004 00AF     	 add r7,sp,#0
 7342              	.LCFI317:
 7343              	 .cfi_def_cfa_register 7
 7344 0006 7860     	 str r0,[r7,#4]
 7345 0008 3960     	 str r1,[r7]
2554:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->firstCluster = (uint32_t) (entry->firstClusterHigh << 16) | entry->firstClusterLow;
 7346              	 .loc 1 2554 0
 7347 000a 3B68     	 ldr r3,[r7]
 7348 000c 9B8A     	 ldrh r3,[r3,#20]
 7349 000e 9BB2     	 uxth r3,r3
 7350 0010 1B04     	 lsls r3,r3,#16
 7351 0012 1A46     	 mov r2,r3
 7352 0014 3B68     	 ldr r3,[r7]
 7353 0016 5B8B     	 ldrh r3,[r3,#26]
 7354 0018 9BB2     	 uxth r3,r3
 7355 001a 1A43     	 orrs r2,r2,r3
 7356 001c 7B68     	 ldr r3,[r7,#4]
 7357 001e C3F81F20 	 str r2,[r3,#31]
2555:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->logicalSize = entry->fileSize;
 7358              	 .loc 1 2555 0
 7359 0022 3B68     	 ldr r3,[r7]
 7360 0024 DA69     	 ldr r2,[r3,#28]
 7361 0026 7B68     	 ldr r3,[r7,#4]
 7362 0028 C3F80520 	 str r2,[r3,#5]
2556:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->physicalSize = roundUpTo(entry->fileSize, afatfs_clusterSize());
 7363              	 .loc 1 2556 0
 7364 002c 3B68     	 ldr r3,[r7]
 7365 002e DC69     	 ldr r4,[r3,#28]
 7366 0030 FFF7FEFF 	 bl afatfs_clusterSize
 7367 0034 0346     	 mov r3,r0
 7368 0036 2046     	 mov r0,r4
 7369 0038 1946     	 mov r1,r3
 7370 003a FFF7FEFF 	 bl roundUpTo
 7371 003e 0246     	 mov r2,r0
 7372 0040 7B68     	 ldr r3,[r7,#4]
 7373 0042 C3F80920 	 str r2,[r3,#9]
2557:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->attrib = entry->attrib;
 7374              	 .loc 1 2557 0
 7375 0046 3B68     	 ldr r3,[r7]
 7376 0048 DA7A     	 ldrb r2,[r3,#11]
 7377 004a 7B68     	 ldr r3,[r7,#4]
 7378 004c 9A75     	 strb r2,[r3,#22]
2558:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 7379              	 .loc 1 2558 0
 7380 004e 0C37     	 adds r7,r7,#12
 7381              	.LCFI318:
 7382              	 .cfi_def_cfa_offset 12
 7383 0050 BD46     	 mov sp,r7
 7384              	.LCFI319:
 7385              	 .cfi_def_cfa_register 13
 7386              	 
 7387 0052 90BD     	 pop {r4,r7,pc}
 7388              	 .cfi_endproc
 7389              	.LFE592:
 7391              	 .section .text.afatfs_createFileContinue,"ax",%progbits
 7392              	 .align 2
 7393              	 .thumb
 7394              	 .thumb_func
 7396              	afatfs_createFileContinue:
 7397              	.LFB593:
2559:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2560:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_createFileContinue(afatfsFile_t *file)
2561:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 7398              	 .loc 1 2561 0
 7399              	 .cfi_startproc
 7400              	 
 7401              	 
 7402 0000 80B5     	 push {r7,lr}
 7403              	.LCFI320:
 7404              	 .cfi_def_cfa_offset 8
 7405              	 .cfi_offset 7,-8
 7406              	 .cfi_offset 14,-4
 7407 0002 8AB0     	 sub sp,sp,#40
 7408              	.LCFI321:
 7409              	 .cfi_def_cfa_offset 48
 7410 0004 00AF     	 add r7,sp,#0
 7411              	.LCFI322:
 7412              	 .cfi_def_cfa_register 7
 7413 0006 7860     	 str r0,[r7,#4]
2562:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsCreateFile_t *opState = &file->operation.state.createFile;
 7414              	 .loc 1 2562 0
 7415 0008 7B68     	 ldr r3,[r7,#4]
 7416 000a 2433     	 adds r3,r3,#36
 7417 000c 3B62     	 str r3,[r7,#32]
 7418              	.L511:
2563:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     fatDirectoryEntry_t *entry;
2564:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status;
2565:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2566:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     doMore:
2567:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2568:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (opState->phase) {
 7419              	 .loc 1 2568 0
 7420 000e 3B6A     	 ldr r3,[r7,#32]
 7421 0010 1B79     	 ldrb r3,[r3,#4]
 7422 0012 042B     	 cmp r3,#4
 7423 0014 00F24481 	 bhi .L510
 7424 0018 01A2     	 adr r2,.L514
 7425 001a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 7426 001e 00BF     	 .p2align 2
 7427              	.L514:
 7428 0020 35000000 	 .word .L513+1
 7429 0024 49000000 	 .word .L515+1
 7430 0028 F7000000 	 .word .L516+1
 7431 002c C1010000 	 .word .L517+1
 7432 0030 91020000 	 .word .L518+1
 7433              	 .p2align 1
 7434              	.L513:
2569:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CREATEFILE_PHASE_INITIAL:
2570:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_findFirst(&afatfs.currentDirectory, &file->directoryEntryPos);
 7435              	 .loc 1 2570 0
 7436 0034 7B68     	 ldr r3,[r7,#4]
 7437 0036 1933     	 adds r3,r3,#25
 7438 0038 9B48     	 ldr r0,.L536
 7439 003a 1946     	 mov r1,r3
 7440 003c FFF7FEFF 	 bl afatfs_findFirst
2571:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             opState->phase = AFATFS_CREATEFILE_PHASE_FIND_FILE;
 7441              	 .loc 1 2571 0
 7442 0040 3B6A     	 ldr r3,[r7,#32]
 7443 0042 0122     	 movs r2,#1
 7444 0044 1A71     	 strb r2,[r3,#4]
2572:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             goto doMore;
 7445              	 .loc 1 2572 0
 7446 0046 E2E7     	 b .L511
 7447              	.L515:
2573:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
2574:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CREATEFILE_PHASE_FIND_FILE:
2575:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             do {
2576:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 status = afatfs_findNext(&afatfs.currentDirectory, &file->directoryEntryPos, &entry
 7448              	 .loc 1 2576 0
 7449 0048 7B68     	 ldr r3,[r7,#4]
 7450 004a 03F11902 	 add r2,r3,#25
 7451 004e 07F11803 	 add r3,r7,#24
 7452 0052 9548     	 ldr r0,.L536
 7453 0054 1146     	 mov r1,r2
 7454 0056 1A46     	 mov r2,r3
 7455 0058 FFF7FEFF 	 bl afatfs_findNext
 7456 005c 0346     	 mov r3,r0
 7457 005e FB77     	 strb r3,[r7,#31]
2577:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2578:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 switch (status) {
 7458              	 .loc 1 2578 0
 7459 0060 FB7F     	 ldrb r3,[r7,#31]
 7460 0062 012B     	 cmp r3,#1
 7461 0064 02D0     	 beq .L520
 7462 0066 022B     	 cmp r3,#2
 7463 0068 3AD0     	 beq .L521
 7464 006a 40E0     	 b .L519
 7465              	.L520:
2579:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_OPERATION_SUCCESS:
2580:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // Is this the last entry in the directory?
2581:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         if (entry == NULL || fat_isDirectoryEntryTerminator(entry)) {
 7466              	 .loc 1 2581 0
 7467 006c BB69     	 ldr r3,[r7,#24]
 7468 006e 002B     	 cmp r3,#0
 7469 0070 06D0     	 beq .L522
 7470              	 .loc 1 2581 0 is_stmt 0 discriminator 1
 7471 0072 BB69     	 ldr r3,[r7,#24]
 7472 0074 1846     	 mov r0,r3
 7473 0076 FFF7FEFF 	 bl fat_isDirectoryEntryTerminator
 7474 007a 0346     	 mov r3,r0
 7475 007c 002B     	 cmp r3,#0
 7476 007e 16D0     	 beq .L523
 7477              	.L522:
2582:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             afatfs_findLast(&afatfs.currentDirectory);
 7478              	 .loc 1 2582 0 is_stmt 1
 7479 0080 8948     	 ldr r0,.L536
 7480 0082 FFF7FEFF 	 bl afatfs_findLast
2583:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2584:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             if ((file->mode & AFATFS_FILE_MODE_CREATE) != 0) {
 7481              	 .loc 1 2584 0
 7482 0086 7B68     	 ldr r3,[r7,#4]
 7483 0088 5B7D     	 ldrb r3,[r3,#21]
 7484 008a 03F01003 	 and r3,r3,#16
 7485 008e 002B     	 cmp r3,#0
 7486 0090 09D0     	 beq .L524
2585:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                                 // The file didn't already exist, so we can create it. Allocate a n
2586:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                                 afatfs_findFirst(&afatfs.currentDirectory, &file->directoryEntryPos
 7487              	 .loc 1 2586 0
 7488 0092 7B68     	 ldr r3,[r7,#4]
 7489 0094 1933     	 adds r3,r3,#25
 7490 0096 8448     	 ldr r0,.L536
 7491 0098 1946     	 mov r1,r3
 7492 009a FFF7FEFF 	 bl afatfs_findFirst
2587:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2588:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                                 opState->phase = AFATFS_CREATEFILE_PHASE_CREATE_NEW_FILE;
 7493              	 .loc 1 2588 0
 7494 009e 3B6A     	 ldr r3,[r7,#32]
 7495 00a0 0222     	 movs r2,#2
 7496 00a2 1A71     	 strb r2,[r3,#4]
2589:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                                 goto doMore;
 7497              	 .loc 1 2589 0
 7498 00a4 B3E7     	 b .L511
 7499              	.L524:
2590:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             } else {
2591:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                                 // File not found.
2592:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2593:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                                 opState->phase = AFATFS_CREATEFILE_PHASE_FAILURE;
 7500              	 .loc 1 2593 0
 7501 00a6 3B6A     	 ldr r3,[r7,#32]
 7502 00a8 0422     	 movs r2,#4
 7503 00aa 1A71     	 strb r2,[r3,#4]
2594:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                                 goto doMore;
 7504              	 .loc 1 2594 0
 7505 00ac AFE7     	 b .L511
 7506              	.L523:
2595:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             }
2596:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         } else if (strncmp(entry->filename, (char*) opState->filename, FAT_FILENAME
 7507              	 .loc 1 2596 0
 7508 00ae BB69     	 ldr r3,[r7,#24]
 7509 00b0 1A46     	 mov r2,r3
 7510 00b2 3B6A     	 ldr r3,[r7,#32]
 7511 00b4 0533     	 adds r3,r3,#5
 7512 00b6 1046     	 mov r0,r2
 7513 00b8 1946     	 mov r1,r3
 7514 00ba 0B22     	 movs r2,#11
 7515 00bc FFF7FEFF 	 bl strncmp
 7516 00c0 0346     	 mov r3,r0
 7517 00c2 002B     	 cmp r3,#0
 7518 00c4 0BD1     	 bne .L525
2597:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             // We found a file with this name!
2598:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             afatfs_fileLoadDirectoryEntry(file, entry);
 7519              	 .loc 1 2598 0
 7520 00c6 BB69     	 ldr r3,[r7,#24]
 7521 00c8 7868     	 ldr r0,[r7,#4]
 7522 00ca 1946     	 mov r1,r3
 7523 00cc FFF7FEFF 	 bl afatfs_fileLoadDirectoryEntry
2599:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2600:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             afatfs_findLast(&afatfs.currentDirectory);
 7524              	 .loc 1 2600 0
 7525 00d0 7548     	 ldr r0,.L536
 7526 00d2 FFF7FEFF 	 bl afatfs_findLast
2601:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2602:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             opState->phase = AFATFS_CREATEFILE_PHASE_SUCCESS;
 7527              	 .loc 1 2602 0
 7528 00d6 3B6A     	 ldr r3,[r7,#32]
 7529 00d8 0322     	 movs r2,#3
 7530 00da 1A71     	 strb r2,[r3,#4]
2603:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             goto doMore;
 7531              	 .loc 1 2603 0
 7532 00dc 97E7     	 b .L511
 7533              	.L525:
2604:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         } // Else this entry doesn't match, fall through and continue the search
2605:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     break;
 7534              	 .loc 1 2605 0
 7535 00de 06E0     	 b .L519
 7536              	.L521:
2606:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_OPERATION_FAILURE:
2607:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         afatfs_findLast(&afatfs.currentDirectory);
 7537              	 .loc 1 2607 0
 7538 00e0 7148     	 ldr r0,.L536
 7539 00e2 FFF7FEFF 	 bl afatfs_findLast
2608:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         opState->phase = AFATFS_CREATEFILE_PHASE_FAILURE;
 7540              	 .loc 1 2608 0
 7541 00e6 3B6A     	 ldr r3,[r7,#32]
 7542 00e8 0422     	 movs r2,#4
 7543 00ea 1A71     	 strb r2,[r3,#4]
2609:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         goto doMore;
 7544              	 .loc 1 2609 0
 7545 00ec 8FE7     	 b .L511
 7546              	.L519:
2610:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     break;
2611:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_OPERATION_IN_PROGRESS:
2612:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         ;
2613:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2614:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } while (status == AFATFS_OPERATION_SUCCESS);
 7547              	 .loc 1 2614 0
 7548 00ee FB7F     	 ldrb r3,[r7,#31]
 7549 00f0 012B     	 cmp r3,#1
 7550 00f2 A9D0     	 beq .L515
2615:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 7551              	 .loc 1 2615 0
 7552 00f4 D4E0     	 b .L510
 7553              	.L516:
2616:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CREATEFILE_PHASE_CREATE_NEW_FILE:
2617:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_allocateDirectoryEntry(&afatfs.currentDirectory, &entry, &file->directo
 7554              	 .loc 1 2617 0
 7555 00f6 7B68     	 ldr r3,[r7,#4]
 7556 00f8 1933     	 adds r3,r3,#25
 7557 00fa 07F11802 	 add r2,r7,#24
 7558 00fe 6A48     	 ldr r0,.L536
 7559 0100 1146     	 mov r1,r2
 7560 0102 1A46     	 mov r2,r3
 7561 0104 FFF7FEFF 	 bl afatfs_allocateDirectoryEntry
 7562 0108 0346     	 mov r3,r0
 7563 010a FB77     	 strb r3,[r7,#31]
2618:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2619:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 7564              	 .loc 1 2619 0
 7565 010c FB7F     	 ldrb r3,[r7,#31]
 7566 010e 012B     	 cmp r3,#1
 7567 0110 4ED1     	 bne .L526
 7568              	.LBB38:
2620:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 memset(entry, 0, sizeof(*entry));
 7569              	 .loc 1 2620 0
 7570 0112 BB69     	 ldr r3,[r7,#24]
 7571 0114 1846     	 mov r0,r3
 7572 0116 0021     	 movs r1,#0
 7573 0118 2022     	 movs r2,#32
 7574 011a FFF7FEFF 	 bl memset
2621:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2622:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 memcpy(entry->filename, opState->filename, FAT_FILENAME_LENGTH);
 7575              	 .loc 1 2622 0
 7576 011e BB69     	 ldr r3,[r7,#24]
 7577 0120 1A46     	 mov r2,r3
 7578 0122 3B6A     	 ldr r3,[r7,#32]
 7579 0124 0533     	 adds r3,r3,#5
 7580 0126 1046     	 mov r0,r2
 7581 0128 1946     	 mov r1,r3
 7582 012a 0B22     	 movs r2,#11
 7583 012c FFF7FEFF 	 bl memcpy
2623:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 entry->attrib = file->attrib;
 7584              	 .loc 1 2623 0
 7585 0130 BB69     	 ldr r3,[r7,#24]
 7586 0132 7A68     	 ldr r2,[r7,#4]
 7587 0134 927D     	 ldrb r2,[r2,#22]
 7588 0136 DA72     	 strb r2,[r3,#11]
2624:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2625:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 uint16_t fileDate = AFATFS_DEFAULT_FILE_DATE;
 7589              	 .loc 1 2625 0
 7590 0138 44F28173 	 movw r3,#18305
 7591 013c FB84     	 strh r3,[r7,#38]
2626:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 uint16_t fileTime = AFATFS_DEFAULT_FILE_TIME;
 7592              	 .loc 1 2626 0
 7593 013e 0023     	 movs r3,#0
 7594 0140 BB84     	 strh r3,[r7,#36]
2627:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2628:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 #ifdef USE_RTC_TIME
2629:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // rtcGetDateTime will fill dt with 0000-01-01T00:00:00
2630:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // when time is not known.
2631:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 dateTime_t dt;
2632:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 rtcGetDateTime(&dt);
 7595              	 .loc 1 2632 0
 7596 0142 07F10C03 	 add r3,r7,#12
 7597 0146 1846     	 mov r0,r3
 7598 0148 FFF7FEFF 	 bl rtcGetDateTime
2633:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (dt.year != 0) {
 7599              	 .loc 1 2633 0
 7600 014c BB89     	 ldrh r3,[r7,#12]
 7601 014e 002B     	 cmp r3,#0
 7602 0150 1DD0     	 beq .L527
2634:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     fileDate = FAT_MAKE_DATE(dt.year, dt.month, dt.day);
 7603              	 .loc 1 2634 0
 7604 0152 FB7B     	 ldrb r3,[r7,#15]
 7605 0154 9AB2     	 uxth r2,r3
 7606 0156 BB7B     	 ldrb r3,[r7,#14]
 7607 0158 5B01     	 lsls r3,r3,#5
 7608 015a 9BB2     	 uxth r3,r3
 7609 015c 1343     	 orrs r3,r3,r2
 7610 015e 9AB2     	 uxth r2,r3
 7611 0160 BB89     	 ldrh r3,[r7,#12]
 7612 0162 A3F2BC73 	 subw r3,r3,#1980
 7613 0166 5B02     	 lsls r3,r3,#9
 7614 0168 9BB2     	 uxth r3,r3
 7615 016a 1343     	 orrs r3,r3,r2
 7616 016c 9BB2     	 uxth r3,r3
 7617 016e FB84     	 strh r3,[r7,#38]
2635:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     fileTime = FAT_MAKE_TIME(dt.hours, dt.minutes, dt.seconds);
 7618              	 .loc 1 2635 0
 7619 0170 BB7C     	 ldrb r3,[r7,#18]
 7620 0172 5B08     	 lsrs r3,r3,#1
 7621 0174 DBB2     	 uxtb r3,r3
 7622 0176 9AB2     	 uxth r2,r3
 7623 0178 7B7C     	 ldrb r3,[r7,#17]
 7624 017a 5B01     	 lsls r3,r3,#5
 7625 017c 9BB2     	 uxth r3,r3
 7626 017e 1343     	 orrs r3,r3,r2
 7627 0180 9AB2     	 uxth r2,r3
 7628 0182 3B7C     	 ldrb r3,[r7,#16]
 7629 0184 DB02     	 lsls r3,r3,#11
 7630 0186 9BB2     	 uxth r3,r3
 7631 0188 1343     	 orrs r3,r3,r2
 7632 018a 9BB2     	 uxth r3,r3
 7633 018c BB84     	 strh r3,[r7,#36]
 7634              	.L527:
2636:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2637:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 #endif
2638:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2639:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 entry->creationDate = fileDate;
 7635              	 .loc 1 2639 0
 7636 018e BB69     	 ldr r3,[r7,#24]
 7637 0190 FA8C     	 ldrh r2,[r7,#38]
 7638 0192 1A82     	 strh r2,[r3,#16]
2640:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 entry->creationTime = fileTime;
 7639              	 .loc 1 2640 0
 7640 0194 BB69     	 ldr r3,[r7,#24]
 7641 0196 BA8C     	 ldrh r2,[r7,#36]
 7642 0198 DA81     	 strh r2,[r3,#14]
2641:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 entry->lastWriteDate = fileDate;
 7643              	 .loc 1 2641 0
 7644 019a BB69     	 ldr r3,[r7,#24]
 7645 019c FA8C     	 ldrh r2,[r7,#38]
 7646 019e 1A83     	 strh r2,[r3,#24]
2642:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 entry->lastWriteTime = fileTime;
 7647              	 .loc 1 2642 0
 7648 01a0 BB69     	 ldr r3,[r7,#24]
 7649 01a2 BA8C     	 ldrh r2,[r7,#36]
 7650 01a4 DA82     	 strh r2,[r3,#22]
2643:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2644:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_DEBUG_VERBOSE
2645:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 fprintf(stderr, "Adding directory entry for %.*s to sector %u\n", FAT_FILENAME_LENG
2646:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
2647:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2648:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_CREATEFILE_PHASE_SUCCESS;
 7651              	 .loc 1 2648 0
 7652 01a6 3B6A     	 ldr r3,[r7,#32]
 7653 01a8 0322     	 movs r2,#3
 7654 01aa 1A71     	 strb r2,[r3,#4]
2649:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 7655              	 .loc 1 2649 0
 7656 01ac 00BF     	 nop
 7657 01ae 2EE7     	 b .L511
 7658              	.L526:
 7659              	.LBE38:
2650:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else if (status == AFATFS_OPERATION_FAILURE) {
 7660              	 .loc 1 2650 0
 7661 01b0 FB7F     	 ldrb r3,[r7,#31]
 7662 01b2 022B     	 cmp r3,#2
 7663 01b4 03D1     	 bne .L528
2651:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 opState->phase = AFATFS_CREATEFILE_PHASE_FAILURE;
 7664              	 .loc 1 2651 0
 7665 01b6 3B6A     	 ldr r3,[r7,#32]
 7666 01b8 0422     	 movs r2,#4
 7667 01ba 1A71     	 strb r2,[r3,#4]
2652:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 7668              	 .loc 1 2652 0
 7669 01bc 27E7     	 b .L511
 7670              	.L528:
2653:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2654:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 7671              	 .loc 1 2654 0 discriminator 2
 7672 01be 6FE0     	 b .L510
 7673              	.L517:
2655:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CREATEFILE_PHASE_SUCCESS:
2656:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if ((file->mode & AFATFS_FILE_MODE_RETAIN_DIRECTORY) != 0) {
 7674              	 .loc 1 2656 0
 7675 01c0 7B68     	 ldr r3,[r7,#4]
 7676 01c2 5B7D     	 ldrb r3,[r3,#21]
 7677 01c4 03F02003 	 and r3,r3,#32
 7678 01c8 002B     	 cmp r3,#0
 7679 01ca 0FD0     	 beq .L529
 7680              	.LBB39:
2657:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 /*
2658:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                  * For this high performance file type, we require the directory entry for the file
2659:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                  * in the cache at all times.
2660:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                  */
2661:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 uint8_t *directorySector;
2662:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2663:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 status = afatfs_cacheSector(
 7681              	 .loc 1 2663 0
 7682 01cc 7B68     	 ldr r3,[r7,#4]
 7683 01ce D3F81920 	 ldr r2,[r3,#25]
 7684 01d2 07F10803 	 add r3,r7,#8
 7685 01d6 1046     	 mov r0,r2
 7686 01d8 1946     	 mov r1,r3
 7687 01da 1122     	 movs r2,#17
 7688 01dc 0023     	 movs r3,#0
 7689 01de FFF7FEFF 	 bl afatfs_cacheSector
 7690 01e2 0346     	 mov r3,r0
 7691 01e4 FB77     	 strb r3,[r7,#31]
2664:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     file->directoryEntryPos.sectorNumberPhysical,
2665:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     &directorySector,
2666:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     AFATFS_CACHE_READ | AFATFS_CACHE_RETAIN,
2667:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     0
2668:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 );
2669:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2670:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (status != AFATFS_OPERATION_SUCCESS) {
 7692              	 .loc 1 2670 0
 7693 01e6 FB7F     	 ldrb r3,[r7,#31]
 7694 01e8 012B     	 cmp r3,#1
 7695 01ea 59D1     	 bne .L510
 7696              	.L529:
 7697              	.LBE39:
2671:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     // Retry next time
2672:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     break;
2673:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2674:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2675:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2676:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_fseek(file, 0, AFATFS_SEEK_SET);
 7698              	 .loc 1 2676 0
 7699 01ec 7868     	 ldr r0,[r7,#4]
 7700 01ee 0021     	 movs r1,#0
 7701 01f0 0022     	 movs r2,#0
 7702 01f2 FFF7FEFF 	 bl afatfs_fseek
2677:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2678:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Is file empty?
2679:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (file->cursorCluster == 0) {
 7703              	 .loc 1 2679 0
 7704 01f6 7B68     	 ldr r3,[r7,#4]
 7705 01f8 D3F80D30 	 ldr r3,[r3,#13]
 7706 01fc 002B     	 cmp r3,#0
 7707 01fe 13D1     	 bne .L531
2680:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
2681:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if ((file->mode & AFATFS_FILE_MODE_CONTIGUOUS) != 0) {
 7708              	 .loc 1 2681 0
 7709 0200 7B68     	 ldr r3,[r7,#4]
 7710 0202 5B7D     	 ldrb r3,[r3,#21]
 7711 0204 03F00803 	 and r3,r3,#8
 7712 0208 002B     	 cmp r3,#0
 7713 020a 38D0     	 beq .L534
2682:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     if (afatfs_fileIsBusy(&afatfs.freeFile)) {
 7714              	 .loc 1 2682 0
 7715 020c 2748     	 ldr r0,.L536+4
 7716 020e FFF7FEFF 	 bl afatfs_fileIsBusy
 7717 0212 0346     	 mov r3,r0
 7718 0214 002B     	 cmp r3,#0
 7719 0216 00D0     	 beq .L533
2683:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // Someone else's using the freefile, come back later.
2684:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         break;
 7720              	 .loc 1 2684 0 discriminator 3
 7721 0218 42E0     	 b .L510
 7722              	.L533:
2685:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     } else {
2686:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // Lock the freefile for our exclusive access
2687:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         afatfs.freeFile.operation.operation = AFATFS_FILE_OPERATION_LOCKED;
 7723              	 .loc 1 2687 0
 7724 021a 254B     	 ldr r3,.L536+8
 7725 021c 03F58B53 	 add r3,r3,#4448
 7726 0220 0B33     	 adds r3,r3,#11
 7727 0222 0722     	 movs r2,#7
 7728 0224 1A70     	 strb r2,[r3]
 7729 0226 2AE0     	 b .L534
 7730              	.L531:
2688:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     }
2689:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2690:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
2691:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else {
2692:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // We can't guarantee that the existing file contents are contiguous
2693:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 file->mode &= ~AFATFS_FILE_MODE_CONTIGUOUS;
 7731              	 .loc 1 2693 0
 7732 0228 7B68     	 ldr r3,[r7,#4]
 7733 022a 5B7D     	 ldrb r3,[r3,#21]
 7734 022c 23F00803 	 bic r3,r3,#8
 7735 0230 DAB2     	 uxtb r2,r3
 7736 0232 7B68     	 ldr r3,[r7,#4]
 7737 0234 5A75     	 strb r2,[r3,#21]
2694:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2695:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Seek to the end of the file if it is in append mode
2696:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if ((file->mode & AFATFS_FILE_MODE_APPEND) != 0) {
 7738              	 .loc 1 2696 0
 7739 0236 7B68     	 ldr r3,[r7,#4]
 7740 0238 5B7D     	 ldrb r3,[r3,#21]
 7741 023a 03F00403 	 and r3,r3,#4
 7742 023e 002B     	 cmp r3,#0
 7743 0240 0ED0     	 beq .L535
2697:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     // This replaces our open file operation
2698:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 7744              	 .loc 1 2698 0
 7745 0242 7B68     	 ldr r3,[r7,#4]
 7746 0244 0022     	 movs r2,#0
 7747 0246 83F82320 	 strb r2,[r3,#35]
2699:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs_fseekInternal(file, file->logicalSize, opState->callback);
 7748              	 .loc 1 2699 0
 7749 024a 7B68     	 ldr r3,[r7,#4]
 7750 024c D3F80520 	 ldr r2,[r3,#5]
 7751 0250 3B6A     	 ldr r3,[r7,#32]
 7752 0252 1B68     	 ldr r3,[r3]
 7753 0254 7868     	 ldr r0,[r7,#4]
 7754 0256 1146     	 mov r1,r2
 7755 0258 1A46     	 mov r2,r3
 7756 025a FFF7FEFF 	 bl afatfs_fseekInternal
2700:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     break;
 7757              	 .loc 1 2700 0
 7758 025e 1FE0     	 b .L510
 7759              	.L535:
2701:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2702:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2703:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // If we're only writing (not reading) the file must be truncated
2704:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (file->mode == (AFATFS_FILE_MODE_CREATE | AFATFS_FILE_MODE_WRITE)) {
 7760              	 .loc 1 2704 0
 7761 0260 7B68     	 ldr r3,[r7,#4]
 7762 0262 5B7D     	 ldrb r3,[r3,#21]
 7763 0264 122B     	 cmp r3,#18
 7764 0266 0AD1     	 bne .L534
2705:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     // This replaces our open file operation
2706:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 7765              	 .loc 1 2706 0
 7766 0268 7B68     	 ldr r3,[r7,#4]
 7767 026a 0022     	 movs r2,#0
 7768 026c 83F82320 	 strb r2,[r3,#35]
2707:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs_ftruncate(file, opState->callback);
 7769              	 .loc 1 2707 0
 7770 0270 3B6A     	 ldr r3,[r7,#32]
 7771 0272 1B68     	 ldr r3,[r3]
 7772 0274 7868     	 ldr r0,[r7,#4]
 7773 0276 1946     	 mov r1,r3
 7774 0278 FFF7FEFF 	 bl afatfs_ftruncate
2708:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     break;
 7775              	 .loc 1 2708 0
 7776 027c 10E0     	 b .L510
 7777              	.L534:
2709:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
2710:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
2711:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2712:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 7778              	 .loc 1 2712 0
 7779 027e 7B68     	 ldr r3,[r7,#4]
 7780 0280 0022     	 movs r2,#0
 7781 0282 83F82320 	 strb r2,[r3,#35]
2713:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             opState->callback(file);
 7782              	 .loc 1 2713 0
 7783 0286 3B6A     	 ldr r3,[r7,#32]
 7784 0288 1B68     	 ldr r3,[r3]
 7785 028a 7868     	 ldr r0,[r7,#4]
 7786 028c 9847     	 blx r3
2714:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 7787              	 .loc 1 2714 0
 7788 028e 07E0     	 b .L510
 7789              	.L518:
2715:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_CREATEFILE_PHASE_FAILURE:
2716:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->type = AFATFS_FILE_TYPE_NONE;
 7790              	 .loc 1 2716 0
 7791 0290 7B68     	 ldr r3,[r7,#4]
 7792 0292 0022     	 movs r2,#0
 7793 0294 1A70     	 strb r2,[r3]
2717:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             opState->callback(NULL);
 7794              	 .loc 1 2717 0
 7795 0296 3B6A     	 ldr r3,[r7,#32]
 7796 0298 1B68     	 ldr r3,[r3]
 7797 029a 0020     	 movs r0,#0
 7798 029c 9847     	 blx r3
2718:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 7799              	 .loc 1 2718 0
 7800 029e 00BF     	 nop
 7801              	.L510:
2719:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2720:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 7802              	 .loc 1 2720 0
 7803 02a0 2837     	 adds r7,r7,#40
 7804              	.LCFI323:
 7805              	 .cfi_def_cfa_offset 8
 7806 02a2 BD46     	 mov sp,r7
 7807              	.LCFI324:
 7808              	 .cfi_def_cfa_register 13
 7809              	 
 7810 02a4 80BD     	 pop {r7,pc}
 7811              	.L537:
 7812 02a6 00BF     	 .align 2
 7813              	.L536:
 7814 02a8 83110000 	 .word afatfs+4483
 7815 02ac 48110000 	 .word afatfs+4424
 7816 02b0 00000000 	 .word afatfs
 7817              	 .cfi_endproc
 7818              	.LFE593:
 7820              	 .section .text.afatfs_initFileHandle,"ax",%progbits
 7821              	 .align 2
 7822              	 .thumb
 7823              	 .thumb_func
 7825              	afatfs_initFileHandle:
 7826              	.LFB594:
2721:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2722:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2723:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Reset the in-memory data for the given handle back to the zeroed initial state
2724:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2725:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_initFileHandle(afatfsFilePtr_t file)
2726:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 7827              	 .loc 1 2726 0
 7828              	 .cfi_startproc
 7829              	 
 7830              	 
 7831 0000 80B5     	 push {r7,lr}
 7832              	.LCFI325:
 7833              	 .cfi_def_cfa_offset 8
 7834              	 .cfi_offset 7,-8
 7835              	 .cfi_offset 14,-4
 7836 0002 82B0     	 sub sp,sp,#8
 7837              	.LCFI326:
 7838              	 .cfi_def_cfa_offset 16
 7839 0004 00AF     	 add r7,sp,#0
 7840              	.LCFI327:
 7841              	 .cfi_def_cfa_register 7
 7842 0006 7860     	 str r0,[r7,#4]
2727:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     memset(file, 0, sizeof(*file));
 7843              	 .loc 1 2727 0
 7844 0008 7868     	 ldr r0,[r7,#4]
 7845 000a 0021     	 movs r1,#0
 7846 000c 3922     	 movs r2,#57
 7847 000e FFF7FEFF 	 bl memset
2728:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->writeLockedCacheIndex = -1;
 7848              	 .loc 1 2728 0
 7849 0012 7B68     	 ldr r3,[r7,#4]
 7850 0014 FF22     	 movs r2,#255
 7851 0016 DA75     	 strb r2,[r3,#23]
2729:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->readRetainCacheIndex = -1;
 7852              	 .loc 1 2729 0
 7853 0018 7B68     	 ldr r3,[r7,#4]
 7854 001a FF22     	 movs r2,#255
 7855 001c 1A76     	 strb r2,[r3,#24]
2730:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 7856              	 .loc 1 2730 0
 7857 001e 0837     	 adds r7,r7,#8
 7858              	.LCFI328:
 7859              	 .cfi_def_cfa_offset 8
 7860 0020 BD46     	 mov sp,r7
 7861              	.LCFI329:
 7862              	 .cfi_def_cfa_register 13
 7863              	 
 7864 0022 80BD     	 pop {r7,pc}
 7865              	 .cfi_endproc
 7866              	.LFE594:
 7868              	 .section .text.afatfs_funlinkContinue,"ax",%progbits
 7869              	 .align 2
 7870              	 .thumb
 7871              	 .thumb_func
 7873              	afatfs_funlinkContinue:
 7874              	.LFB595:
2731:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2732:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_funlinkContinue(afatfsFilePtr_t file)
2733:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 7875              	 .loc 1 2733 0
 7876              	 .cfi_startproc
 7877              	 
 7878              	 
 7879 0000 80B5     	 push {r7,lr}
 7880              	.LCFI330:
 7881              	 .cfi_def_cfa_offset 8
 7882              	 .cfi_offset 7,-8
 7883              	 .cfi_offset 14,-4
 7884 0002 84B0     	 sub sp,sp,#16
 7885              	.LCFI331:
 7886              	 .cfi_def_cfa_offset 24
 7887 0004 00AF     	 add r7,sp,#0
 7888              	.LCFI332:
 7889              	 .cfi_def_cfa_register 7
 7890 0006 7860     	 str r0,[r7,#4]
2734:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsUnlinkFile_t *opState = &file->operation.state.unlinkFile;
 7891              	 .loc 1 2734 0
 7892 0008 7B68     	 ldr r3,[r7,#4]
 7893 000a 2433     	 adds r3,r3,#36
 7894 000c FB60     	 str r3,[r7,#12]
2735:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status;
2736:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2737:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     status = afatfs_ftruncateContinue(file, true);
 7895              	 .loc 1 2737 0
 7896 000e 7868     	 ldr r0,[r7,#4]
 7897 0010 0121     	 movs r1,#1
 7898 0012 FFF7FEFF 	 bl afatfs_ftruncateContinue
 7899 0016 0346     	 mov r3,r0
 7900 0018 FB72     	 strb r3,[r7,#11]
2738:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2739:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (status == AFATFS_OPERATION_SUCCESS) {
 7901              	 .loc 1 2739 0
 7902 001a FB7A     	 ldrb r3,[r7,#11]
 7903 001c 012B     	 cmp r3,#1
 7904 001e 0AD1     	 bne .L539
2740:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Once the truncation is completed, we can close the file handle
2741:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 7905              	 .loc 1 2741 0
 7906 0020 7B68     	 ldr r3,[r7,#4]
 7907 0022 0022     	 movs r2,#0
 7908 0024 83F82320 	 strb r2,[r3,#35]
2742:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_fclose(file, opState->callback);
 7909              	 .loc 1 2742 0
 7910 0028 FB68     	 ldr r3,[r7,#12]
 7911 002a D3F81130 	 ldr r3,[r3,#17]
 7912 002e 7868     	 ldr r0,[r7,#4]
 7913 0030 1946     	 mov r1,r3
 7914 0032 FFF7FEFF 	 bl afatfs_fclose
 7915              	.L539:
2743:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2744:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 7916              	 .loc 1 2744 0
 7917 0036 1037     	 adds r7,r7,#16
 7918              	.LCFI333:
 7919              	 .cfi_def_cfa_offset 8
 7920 0038 BD46     	 mov sp,r7
 7921              	.LCFI334:
 7922              	 .cfi_def_cfa_register 13
 7923              	 
 7924 003a 80BD     	 pop {r7,pc}
 7925              	 .cfi_endproc
 7926              	.LFE595:
 7928              	 .section .text.afatfs_funlink,"ax",%progbits
 7929              	 .align 2
 7930              	 .global afatfs_funlink
 7931              	 .thumb
 7932              	 .thumb_func
 7934              	afatfs_funlink:
 7935              	.LFB596:
2745:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2746:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2747:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Delete and close the file.
2748:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2749:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true if the operation was successfully queued (callback will be called some time after t
2750:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * or false if the file is busy and you should try again later.
2751:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2752:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_funlink(afatfsFilePtr_t file, afatfsCallback_t callback)
2753:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 7936              	 .loc 1 2753 0
 7937              	 .cfi_startproc
 7938              	 
 7939              	 
 7940 0000 80B5     	 push {r7,lr}
 7941              	.LCFI335:
 7942              	 .cfi_def_cfa_offset 8
 7943              	 .cfi_offset 7,-8
 7944              	 .cfi_offset 14,-4
 7945 0002 84B0     	 sub sp,sp,#16
 7946              	.LCFI336:
 7947              	 .cfi_def_cfa_offset 24
 7948 0004 00AF     	 add r7,sp,#0
 7949              	.LCFI337:
 7950              	 .cfi_def_cfa_register 7
 7951 0006 7860     	 str r0,[r7,#4]
 7952 0008 3960     	 str r1,[r7]
2754:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsUnlinkFile_t *opState = &file->operation.state.unlinkFile;
 7953              	 .loc 1 2754 0
 7954 000a 7B68     	 ldr r3,[r7,#4]
 7955 000c 2433     	 adds r3,r3,#36
 7956 000e FB60     	 str r3,[r7,#12]
2755:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2756:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (!file || file->type == AFATFS_FILE_TYPE_NONE) {
 7957              	 .loc 1 2756 0
 7958 0010 7B68     	 ldr r3,[r7,#4]
 7959 0012 002B     	 cmp r3,#0
 7960 0014 03D0     	 beq .L542
 7961              	 .loc 1 2756 0 is_stmt 0 discriminator 1
 7962 0016 7B68     	 ldr r3,[r7,#4]
 7963 0018 1B78     	 ldrb r3,[r3]
 7964 001a 002B     	 cmp r3,#0
 7965 001c 01D1     	 bne .L543
 7966              	.L542:
2757:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return true;
 7967              	 .loc 1 2757 0 is_stmt 1
 7968 001e 0123     	 movs r3,#1
 7969 0020 14E0     	 b .L544
 7970              	.L543:
2758:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2759:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2760:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
2761:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * Internally an unlink is implemented by first doing a ftruncate(), marking the directory entr
2762:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * then doing a fclose() operation.
2763:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
2764:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2765:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Start the sub-operation of truncating the file
2766:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (!afatfs_ftruncate(file, NULL))
 7971              	 .loc 1 2766 0
 7972 0022 7868     	 ldr r0,[r7,#4]
 7973 0024 0021     	 movs r1,#0
 7974 0026 FFF7FEFF 	 bl afatfs_ftruncate
 7975 002a 0346     	 mov r3,r0
 7976 002c 83F00103 	 eor r3,r3,#1
 7977 0030 DBB2     	 uxtb r3,r3
 7978 0032 002B     	 cmp r3,#0
 7979 0034 01D0     	 beq .L545
2767:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false;
 7980              	 .loc 1 2767 0
 7981 0036 0023     	 movs r3,#0
 7982 0038 08E0     	 b .L544
 7983              	.L545:
2768:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2769:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
2770:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * The unlink operation has its own private callback field so that the truncate suboperation do
2771:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * calling back early when it completes:
2772:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
2773:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->callback = callback;
 7984              	 .loc 1 2773 0
 7985 003a FB68     	 ldr r3,[r7,#12]
 7986 003c 3A68     	 ldr r2,[r7]
 7987 003e C3F81120 	 str r2,[r3,#17]
2774:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2775:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->operation.operation = AFATFS_FILE_OPERATION_UNLINK;
 7988              	 .loc 1 2775 0
 7989 0042 7B68     	 ldr r3,[r7,#4]
 7990 0044 0522     	 movs r2,#5
 7991 0046 83F82320 	 strb r2,[r3,#35]
2776:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2777:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return true;
 7992              	 .loc 1 2777 0
 7993 004a 0123     	 movs r3,#1
 7994              	.L544:
2778:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 7995              	 .loc 1 2778 0
 7996 004c 1846     	 mov r0,r3
 7997 004e 1037     	 adds r7,r7,#16
 7998              	.LCFI338:
 7999              	 .cfi_def_cfa_offset 8
 8000 0050 BD46     	 mov sp,r7
 8001              	.LCFI339:
 8002              	 .cfi_def_cfa_register 13
 8003              	 
 8004 0052 80BD     	 pop {r7,pc}
 8005              	 .cfi_endproc
 8006              	.LFE596:
 8008              	 .section .rodata
 8009              	 .align 2
 8010              	.LC0:
 8011 0000 2E00     	 .ascii ".\000"
 8012              	 .section .text.afatfs_createFile,"ax",%progbits
 8013              	 .align 2
 8014              	 .thumb
 8015              	 .thumb_func
 8017              	afatfs_createFile:
 8018              	.LFB597:
2779:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2780:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2781:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Open (or create) a file in the CWD with the given filename.
2782:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2783:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * file             - Memory location to store the newly opened file details
2784:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * name             - Filename in "name.ext" format. No path.
2785:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * attrib           - FAT file attributes to give the file (if created)
2786:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * fileMode         - Bitset of AFATFS_FILE_MODE_* constants. Include AFATFS_FILE_MODE_CREATE to cr
2787:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *                    it does not exist.
2788:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * callback         - Called when the operation is complete
2789:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2790:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsFilePtr_t afatfs_createFile(afatfsFilePtr_t file, const char *name, uint8_t attrib, ui
2791:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfsFileCallback_t callback)
2792:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 8019              	 .loc 1 2792 0
 8020              	 .cfi_startproc
 8021              	 
 8022              	 
 8023 0000 80B5     	 push {r7,lr}
 8024              	.LCFI340:
 8025              	 .cfi_def_cfa_offset 8
 8026              	 .cfi_offset 7,-8
 8027              	 .cfi_offset 14,-4
 8028 0002 86B0     	 sub sp,sp,#24
 8029              	.LCFI341:
 8030              	 .cfi_def_cfa_offset 32
 8031 0004 00AF     	 add r7,sp,#0
 8032              	.LCFI342:
 8033              	 .cfi_def_cfa_register 7
 8034 0006 F860     	 str r0,[r7,#12]
 8035 0008 B960     	 str r1,[r7,#8]
 8036 000a 1146     	 mov r1,r2
 8037 000c 1A46     	 mov r2,r3
 8038 000e 0B46     	 mov r3,r1
 8039 0010 FB71     	 strb r3,[r7,#7]
 8040 0012 1346     	 mov r3,r2
 8041 0014 BB71     	 strb r3,[r7,#6]
2793:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsCreateFile_t *opState = &file->operation.state.createFile;
 8042              	 .loc 1 2793 0
 8043 0016 FB68     	 ldr r3,[r7,#12]
 8044 0018 2433     	 adds r3,r3,#36
 8045 001a 7B61     	 str r3,[r7,#20]
2794:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2795:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_initFileHandle(file);
 8046              	 .loc 1 2795 0
 8047 001c F868     	 ldr r0,[r7,#12]
 8048 001e FFF7FEFF 	 bl afatfs_initFileHandle
2796:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2797:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Queue the operation to finish the file creation
2798:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->operation.operation = AFATFS_FILE_OPERATION_CREATE_FILE;
 8049              	 .loc 1 2798 0
 8050 0022 FB68     	 ldr r3,[r7,#12]
 8051 0024 0122     	 movs r2,#1
 8052 0026 83F82320 	 strb r2,[r3,#35]
2799:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2800:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->mode = fileMode;
 8053              	 .loc 1 2800 0
 8054 002a FB68     	 ldr r3,[r7,#12]
 8055 002c BA79     	 ldrb r2,[r7,#6]
 8056 002e 5A75     	 strb r2,[r3,#21]
2801:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2802:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (strcmp(name, ".") == 0) {
 8057              	 .loc 1 2802 0
 8058 0030 B868     	 ldr r0,[r7,#8]
 8059 0032 2D49     	 ldr r1,.L553
 8060 0034 FFF7FEFF 	 bl strcmp
 8061 0038 0346     	 mov r3,r0
 8062 003a 002B     	 cmp r3,#0
 8063 003c 26D1     	 bne .L547
2803:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->firstCluster = afatfs.currentDirectory.firstCluster;
 8064              	 .loc 1 2803 0
 8065 003e 2B4B     	 ldr r3,.L553+4
 8066 0040 03F58D53 	 add r3,r3,#4512
 8067 0044 0233     	 adds r3,r3,#2
 8068 0046 1A68     	 ldr r2,[r3]
 8069 0048 FB68     	 ldr r3,[r7,#12]
 8070 004a C3F81F20 	 str r2,[r3,#31]
2804:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->physicalSize = afatfs.currentDirectory.physicalSize;
 8071              	 .loc 1 2804 0
 8072 004e 274B     	 ldr r3,.L553+4
 8073 0050 03F58C53 	 add r3,r3,#4480
 8074 0054 0C33     	 adds r3,r3,#12
 8075 0056 1A68     	 ldr r2,[r3]
 8076 0058 FB68     	 ldr r3,[r7,#12]
 8077 005a C3F80920 	 str r2,[r3,#9]
2805:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->logicalSize = afatfs.currentDirectory.logicalSize;
 8078              	 .loc 1 2805 0
 8079 005e 234B     	 ldr r3,.L553+4
 8080 0060 03F58C53 	 add r3,r3,#4480
 8081 0064 0833     	 adds r3,r3,#8
 8082 0066 1A68     	 ldr r2,[r3]
 8083 0068 FB68     	 ldr r3,[r7,#12]
 8084 006a C3F80520 	 str r2,[r3,#5]
2806:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->attrib = afatfs.currentDirectory.attrib;
 8085              	 .loc 1 2806 0
 8086 006e 1F4B     	 ldr r3,.L553+4
 8087 0070 03F58C53 	 add r3,r3,#4480
 8088 0074 1933     	 adds r3,r3,#25
 8089 0076 1A78     	 ldrb r2,[r3]
 8090 0078 FB68     	 ldr r3,[r7,#12]
 8091 007a 9A75     	 strb r2,[r3,#22]
2807:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->type = afatfs.currentDirectory.type;
 8092              	 .loc 1 2807 0
 8093 007c 1B4B     	 ldr r3,.L553+4
 8094 007e 03F58C53 	 add r3,r3,#4480
 8095 0082 0333     	 adds r3,r3,#3
 8096 0084 1A78     	 ldrb r2,[r3]
 8097 0086 FB68     	 ldr r3,[r7,#12]
 8098 0088 1A70     	 strb r2,[r3]
 8099 008a 14E0     	 b .L548
 8100              	.L547:
2808:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
2809:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         fat_convertFilenameToFATStyle(name, opState->filename);
 8101              	 .loc 1 2809 0
 8102 008c 7B69     	 ldr r3,[r7,#20]
 8103 008e 0533     	 adds r3,r3,#5
 8104 0090 B868     	 ldr r0,[r7,#8]
 8105 0092 1946     	 mov r1,r3
 8106 0094 FFF7FEFF 	 bl fat_convertFilenameToFATStyle
2810:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->attrib = attrib;
 8107              	 .loc 1 2810 0
 8108 0098 FB68     	 ldr r3,[r7,#12]
 8109 009a FA79     	 ldrb r2,[r7,#7]
 8110 009c 9A75     	 strb r2,[r3,#22]
2811:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2812:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if ((attrib & FAT_FILE_ATTRIBUTE_DIRECTORY) != 0) {
 8111              	 .loc 1 2812 0
 8112 009e FB79     	 ldrb r3,[r7,#7]
 8113 00a0 03F01003 	 and r3,r3,#16
 8114 00a4 002B     	 cmp r3,#0
 8115 00a6 03D0     	 beq .L549
2813:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->type = AFATFS_FILE_TYPE_DIRECTORY;
 8116              	 .loc 1 2813 0
 8117 00a8 FB68     	 ldr r3,[r7,#12]
 8118 00aa 0322     	 movs r2,#3
 8119 00ac 1A70     	 strb r2,[r3]
 8120 00ae 02E0     	 b .L548
 8121              	.L549:
2814:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
2815:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             file->type = AFATFS_FILE_TYPE_NORMAL;
 8122              	 .loc 1 2815 0
 8123 00b0 FB68     	 ldr r3,[r7,#12]
 8124 00b2 0122     	 movs r2,#1
 8125 00b4 1A70     	 strb r2,[r3]
 8126              	.L548:
2816:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2817:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2818:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2819:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     opState->callback = callback;
 8127              	 .loc 1 2819 0
 8128 00b6 7B69     	 ldr r3,[r7,#20]
 8129 00b8 3A6A     	 ldr r2,[r7,#32]
 8130 00ba 1A60     	 str r2,[r3]
2820:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2821:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (strcmp(name, ".") == 0) {
 8131              	 .loc 1 2821 0
 8132 00bc B868     	 ldr r0,[r7,#8]
 8133 00be 0A49     	 ldr r1,.L553
 8134 00c0 FFF7FEFF 	 bl strcmp
 8135 00c4 0346     	 mov r3,r0
 8136 00c6 002B     	 cmp r3,#0
 8137 00c8 03D1     	 bne .L550
2822:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Since we already have the directory entry details, we can skip straight to the final ope
2823:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         opState->phase = AFATFS_CREATEFILE_PHASE_SUCCESS;
 8138              	 .loc 1 2823 0
 8139 00ca 7B69     	 ldr r3,[r7,#20]
 8140 00cc 0322     	 movs r2,#3
 8141 00ce 1A71     	 strb r2,[r3,#4]
 8142 00d0 02E0     	 b .L551
 8143              	.L550:
2824:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
2825:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         opState->phase = AFATFS_CREATEFILE_PHASE_INITIAL;
 8144              	 .loc 1 2825 0
 8145 00d2 7B69     	 ldr r3,[r7,#20]
 8146 00d4 0022     	 movs r2,#0
 8147 00d6 1A71     	 strb r2,[r3,#4]
 8148              	.L551:
2826:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2827:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2828:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_createFileContinue(file);
 8149              	 .loc 1 2828 0
 8150 00d8 F868     	 ldr r0,[r7,#12]
 8151 00da FFF7FEFF 	 bl afatfs_createFileContinue
2829:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2830:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return file;
 8152              	 .loc 1 2830 0
 8153 00de FB68     	 ldr r3,[r7,#12]
2831:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 8154              	 .loc 1 2831 0
 8155 00e0 1846     	 mov r0,r3
 8156 00e2 1837     	 adds r7,r7,#24
 8157              	.LCFI343:
 8158              	 .cfi_def_cfa_offset 8
 8159 00e4 BD46     	 mov sp,r7
 8160              	.LCFI344:
 8161              	 .cfi_def_cfa_register 13
 8162              	 
 8163 00e6 80BD     	 pop {r7,pc}
 8164              	.L554:
 8165              	 .align 2
 8166              	.L553:
 8167 00e8 00000000 	 .word .LC0
 8168 00ec 00000000 	 .word afatfs
 8169              	 .cfi_endproc
 8170              	.LFE597:
 8172              	 .section .text.afatfs_fcloseContinue,"ax",%progbits
 8173              	 .align 2
 8174              	 .thumb
 8175              	 .thumb_func
 8177              	afatfs_fcloseContinue:
 8178              	.LFB598:
2832:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2833:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_fcloseContinue(afatfsFilePtr_t file)
2834:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 8179              	 .loc 1 2834 0
 8180              	 .cfi_startproc
 8181              	 
 8182              	 
 8183 0000 80B5     	 push {r7,lr}
 8184              	.LCFI345:
 8185              	 .cfi_def_cfa_offset 8
 8186              	 .cfi_offset 7,-8
 8187              	 .cfi_offset 14,-4
 8188 0002 86B0     	 sub sp,sp,#24
 8189              	.LCFI346:
 8190              	 .cfi_def_cfa_offset 32
 8191 0004 00AF     	 add r7,sp,#0
 8192              	.LCFI347:
 8193              	 .cfi_def_cfa_register 7
 8194 0006 7860     	 str r0,[r7,#4]
2835:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsCacheBlockDescriptor_t *descriptor;
2836:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsCloseFile_t *opState = &file->operation.state.closeFile;
 8195              	 .loc 1 2836 0
 8196 0008 7B68     	 ldr r3,[r7,#4]
 8197 000a 2433     	 adds r3,r3,#36
 8198 000c 7B61     	 str r3,[r7,#20]
2837:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2838:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
2839:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * Directories don't update their parent directory entries over time, because their fileSize fi
2840:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * never changes (when we add the first cluster to the directory we save the directory entry at
2841:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * doesn't change afterwards). So don't bother trying to save their directory entries during fc
2842:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      *
2843:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * Also if we only opened the file for read then we didn't change the directory entry either.
2844:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
2845:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->type != AFATFS_FILE_TYPE_DIRECTORY && file->type != AFATFS_FILE_TYPE_FAT16_ROOT_DIREC
 8199              	 .loc 1 2845 0
 8200 000e 7B68     	 ldr r3,[r7,#4]
 8201 0010 1B78     	 ldrb r3,[r3]
 8202 0012 032B     	 cmp r3,#3
 8203 0014 11D0     	 beq .L556
 8204              	 .loc 1 2845 0 is_stmt 0 discriminator 1
 8205 0016 7B68     	 ldr r3,[r7,#4]
 8206 0018 1B78     	 ldrb r3,[r3]
 8207 001a 022B     	 cmp r3,#2
 8208 001c 0DD0     	 beq .L556
2846:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             && (file->mode & (AFATFS_FILE_MODE_APPEND | AFATFS_FILE_MODE_WRITE)) != 0) {
 8209              	 .loc 1 2846 0 is_stmt 1
 8210 001e 7B68     	 ldr r3,[r7,#4]
 8211 0020 5B7D     	 ldrb r3,[r3,#21]
 8212 0022 03F00603 	 and r3,r3,#6
 8213 0026 002B     	 cmp r3,#0
 8214 0028 07D0     	 beq .L556
2847:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_saveDirectoryEntry(file, AFATFS_SAVE_DIRECTORY_FOR_CLOSE) != AFATFS_OPERATION_SU
 8215              	 .loc 1 2847 0
 8216 002a 7868     	 ldr r0,[r7,#4]
 8217 002c 0121     	 movs r1,#1
 8218 002e FFF7FEFF 	 bl afatfs_saveDirectoryEntry
 8219 0032 0346     	 mov r3,r0
 8220 0034 012B     	 cmp r3,#1
 8221 0036 00D0     	 beq .L556
2848:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return;
 8222              	 .loc 1 2848 0
 8223 0038 50E0     	 b .L555
 8224              	.L556:
2849:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2850:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2851:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2852:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Release our reservation on the directory cache if needed
2853:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if ((file->mode & AFATFS_FILE_MODE_RETAIN_DIRECTORY) != 0) {
 8225              	 .loc 1 2853 0
 8226 003a 7B68     	 ldr r3,[r7,#4]
 8227 003c 5B7D     	 ldrb r3,[r3,#21]
 8228 003e 03F02003 	 and r3,r3,#32
 8229 0042 002B     	 cmp r3,#0
 8230 0044 20D0     	 beq .L558
2854:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         descriptor = afatfs_findCacheSector(file->directoryEntryPos.sectorNumberPhysical);
 8231              	 .loc 1 2854 0
 8232 0046 7B68     	 ldr r3,[r7,#4]
 8233 0048 D3F81930 	 ldr r3,[r3,#25]
 8234 004c 1846     	 mov r0,r3
 8235 004e FFF7FEFF 	 bl afatfs_findCacheSector
 8236 0052 3861     	 str r0,[r7,#16]
2855:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2856:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (descriptor) {
 8237              	 .loc 1 2856 0
 8238 0054 3B69     	 ldr r3,[r7,#16]
 8239 0056 002B     	 cmp r3,#0
 8240 0058 16D0     	 beq .L558
 8241              	.LBB40:
2857:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             descriptor->retainCount = MAX((int) descriptor->retainCount - 1, 0);
 8242              	 .loc 1 2857 0
 8243 005a 3B69     	 ldr r3,[r7,#16]
 8244 005c DB7B     	 ldrb r3,[r3,#15]
 8245 005e C3F34503 	 ubfx r3,r3,#1,#6
 8246 0062 DBB2     	 uxtb r3,r3
 8247 0064 013B     	 subs r3,r3,#1
 8248 0066 FB60     	 str r3,[r7,#12]
 8249 0068 0023     	 movs r3,#0
 8250 006a BB60     	 str r3,[r7,#8]
 8251 006c BA68     	 ldr r2,[r7,#8]
 8252 006e FB68     	 ldr r3,[r7,#12]
 8253 0070 9342     	 cmp r3,r2
 8254 0072 B8BF     	 it lt
 8255 0074 1346     	 movlt r3,r2
 8256              	.LBE40:
 8257 0076 DBB2     	 uxtb r3,r3
 8258 0078 03F03F03 	 and r3,r3,#63
 8259 007c D9B2     	 uxtb r1,r3
 8260 007e 3A69     	 ldr r2,[r7,#16]
 8261 0080 D37B     	 ldrb r3,[r2,#15]
 8262 0082 61F34603 	 bfi r3,r1,#1,#6
 8263 0086 D373     	 strb r3,[r2,#15]
 8264              	.L558:
2858:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2859:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2860:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2861:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Release locks on the sector at the file cursor position
2862:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fileUnlockCacheSector(file);
 8265              	 .loc 1 2862 0
 8266 0088 7868     	 ldr r0,[r7,#4]
 8267 008a FFF7FEFF 	 bl afatfs_fileUnlockCacheSector
2863:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2864:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
2865:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Release our exclusive lock on the freefile if needed
2866:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if ((file->mode & AFATFS_FILE_MODE_CONTIGUOUS) != 0) {
 8268              	 .loc 1 2866 0
 8269 008e 7B68     	 ldr r3,[r7,#4]
 8270 0090 5B7D     	 ldrb r3,[r3,#21]
 8271 0092 03F00803 	 and r3,r3,#8
 8272 0096 002B     	 cmp r3,#0
 8273 0098 12D0     	 beq .L559
2867:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_assert(afatfs.freeFile.operation.operation == AFATFS_FILE_OPERATION_LOCKED);
 8274              	 .loc 1 2867 0
 8275 009a 124B     	 ldr r3,.L560
 8276 009c 03F58B53 	 add r3,r3,#4448
 8277 00a0 0B33     	 adds r3,r3,#11
 8278 00a2 1B78     	 ldrb r3,[r3]
 8279 00a4 072B     	 cmp r3,#7
 8280 00a6 0CBF     	 ite eq
 8281 00a8 0123     	 moveq r3,#1
 8282 00aa 0023     	 movne r3,#0
 8283 00ac DBB2     	 uxtb r3,r3
 8284 00ae 1846     	 mov r0,r3
 8285 00b0 FFF7FEFF 	 bl afatfs_assert
2868:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.freeFile.operation.operation = AFATFS_FILE_OPERATION_NONE;
 8286              	 .loc 1 2868 0
 8287 00b4 0B4B     	 ldr r3,.L560
 8288 00b6 03F58B53 	 add r3,r3,#4448
 8289 00ba 0B33     	 adds r3,r3,#11
 8290 00bc 0022     	 movs r2,#0
 8291 00be 1A70     	 strb r2,[r3]
 8292              	.L559:
2869:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2870:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
2871:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2872:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->type = AFATFS_FILE_TYPE_NONE;
 8293              	 .loc 1 2872 0
 8294 00c0 7B68     	 ldr r3,[r7,#4]
 8295 00c2 0022     	 movs r2,#0
 8296 00c4 1A70     	 strb r2,[r3]
2873:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file->operation.operation = AFATFS_FILE_OPERATION_NONE;
 8297              	 .loc 1 2873 0
 8298 00c6 7B68     	 ldr r3,[r7,#4]
 8299 00c8 0022     	 movs r2,#0
 8300 00ca 83F82320 	 strb r2,[r3,#35]
2874:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2875:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (opState->callback) {
 8301              	 .loc 1 2875 0
 8302 00ce 7B69     	 ldr r3,[r7,#20]
 8303 00d0 1B68     	 ldr r3,[r3]
 8304 00d2 002B     	 cmp r3,#0
 8305 00d4 02D0     	 beq .L555
2876:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         opState->callback();
 8306              	 .loc 1 2876 0
 8307 00d6 7B69     	 ldr r3,[r7,#20]
 8308 00d8 1B68     	 ldr r3,[r3]
 8309 00da 9847     	 blx r3
 8310              	.L555:
2877:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2878:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 8311              	 .loc 1 2878 0
 8312 00dc 1837     	 adds r7,r7,#24
 8313              	.LCFI348:
 8314              	 .cfi_def_cfa_offset 8
 8315 00de BD46     	 mov sp,r7
 8316              	.LCFI349:
 8317              	 .cfi_def_cfa_register 13
 8318              	 
 8319 00e0 80BD     	 pop {r7,pc}
 8320              	.L561:
 8321 00e2 00BF     	 .align 2
 8322              	.L560:
 8323 00e4 00000000 	 .word afatfs
 8324              	 .cfi_endproc
 8325              	.LFE598:
 8327              	 .section .text.afatfs_fclose,"ax",%progbits
 8328              	 .align 2
 8329              	 .global afatfs_fclose
 8330              	 .thumb
 8331              	 .thumb_func
 8333              	afatfs_fclose:
 8334              	.LFB599:
2879:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2880:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2881:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true if an operation was successfully queued to close the file and destroy the file hand
2882:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * currently busy, false is returned and you should retry later.
2883:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2884:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * If provided, the callback will be called after the operation completes (pass NULL for no callbac
2885:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2886:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * If this function returns true, you should not make any further calls to the file (as the handle 
2887:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * new file).
2888:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2889:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_fclose(afatfsFilePtr_t file, afatfsCallback_t callback)
2890:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 8335              	 .loc 1 2890 0
 8336              	 .cfi_startproc
 8337              	 
 8338              	 
 8339 0000 80B5     	 push {r7,lr}
 8340              	.LCFI350:
 8341              	 .cfi_def_cfa_offset 8
 8342              	 .cfi_offset 7,-8
 8343              	 .cfi_offset 14,-4
 8344 0002 82B0     	 sub sp,sp,#8
 8345              	.LCFI351:
 8346              	 .cfi_def_cfa_offset 16
 8347 0004 00AF     	 add r7,sp,#0
 8348              	.LCFI352:
 8349              	 .cfi_def_cfa_register 7
 8350 0006 7860     	 str r0,[r7,#4]
 8351 0008 3960     	 str r1,[r7]
2891:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (!file || file->type == AFATFS_FILE_TYPE_NONE) {
 8352              	 .loc 1 2891 0
 8353 000a 7B68     	 ldr r3,[r7,#4]
 8354 000c 002B     	 cmp r3,#0
 8355 000e 03D0     	 beq .L563
 8356              	 .loc 1 2891 0 is_stmt 0 discriminator 1
 8357 0010 7B68     	 ldr r3,[r7,#4]
 8358 0012 1B78     	 ldrb r3,[r3]
 8359 0014 002B     	 cmp r3,#0
 8360 0016 01D1     	 bne .L564
 8361              	.L563:
2892:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return true;
 8362              	 .loc 1 2892 0 is_stmt 1
 8363 0018 0123     	 movs r3,#1
 8364 001a 15E0     	 b .L565
 8365              	.L564:
2893:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else if (afatfs_fileIsBusy(file)) {
 8366              	 .loc 1 2893 0
 8367 001c 7868     	 ldr r0,[r7,#4]
 8368 001e FFF7FEFF 	 bl afatfs_fileIsBusy
 8369 0022 0346     	 mov r3,r0
 8370 0024 002B     	 cmp r3,#0
 8371 0026 01D0     	 beq .L566
2894:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false;
 8372              	 .loc 1 2894 0
 8373 0028 0023     	 movs r3,#0
 8374 002a 0DE0     	 b .L565
 8375              	.L566:
2895:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
2896:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_fileUpdateFilesize(file);
 8376              	 .loc 1 2896 0
 8377 002c 7868     	 ldr r0,[r7,#4]
 8378 002e FFF7FEFF 	 bl afatfs_fileUpdateFilesize
2897:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2898:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->operation.operation = AFATFS_FILE_OPERATION_CLOSE;
 8379              	 .loc 1 2898 0
 8380 0032 7B68     	 ldr r3,[r7,#4]
 8381 0034 0322     	 movs r2,#3
 8382 0036 83F82320 	 strb r2,[r3,#35]
2899:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->operation.state.closeFile.callback = callback;
 8383              	 .loc 1 2899 0
 8384 003a 7B68     	 ldr r3,[r7,#4]
 8385 003c 3A68     	 ldr r2,[r7]
 8386 003e 5A62     	 str r2,[r3,#36]
2900:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_fcloseContinue(file);
 8387              	 .loc 1 2900 0
 8388 0040 7868     	 ldr r0,[r7,#4]
 8389 0042 FFF7FEFF 	 bl afatfs_fcloseContinue
2901:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return true;
 8390              	 .loc 1 2901 0
 8391 0046 0123     	 movs r3,#1
 8392              	.L565:
2902:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2903:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 8393              	 .loc 1 2903 0
 8394 0048 1846     	 mov r0,r3
 8395 004a 0837     	 adds r7,r7,#8
 8396              	.LCFI353:
 8397              	 .cfi_def_cfa_offset 8
 8398 004c BD46     	 mov sp,r7
 8399              	.LCFI354:
 8400              	 .cfi_def_cfa_register 13
 8401              	 
 8402 004e 80BD     	 pop {r7,pc}
 8403              	 .cfi_endproc
 8404              	.LFE599:
 8406              	 .section .text.afatfs_mkdir,"ax",%progbits
 8407              	 .align 2
 8408              	 .global afatfs_mkdir
 8409              	 .thumb
 8410              	 .thumb_func
 8412              	afatfs_mkdir:
 8413              	.LFB600:
2904:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2905:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2906:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Create a new directory with the given name, or open the directory if it already exists.
2907:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2908:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * The directory will be passed to the callback, or NULL if the creation failed.
2909:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2910:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true if the directory creation was begun, or false if there are too many open files.
2911:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2912:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_mkdir(const char *filename, afatfsFileCallback_t callback)
2913:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 8414              	 .loc 1 2913 0
 8415              	 .cfi_startproc
 8416              	 
 8417              	 
 8418 0000 80B5     	 push {r7,lr}
 8419              	.LCFI355:
 8420              	 .cfi_def_cfa_offset 8
 8421              	 .cfi_offset 7,-8
 8422              	 .cfi_offset 14,-4
 8423 0002 86B0     	 sub sp,sp,#24
 8424              	.LCFI356:
 8425              	 .cfi_def_cfa_offset 32
 8426 0004 02AF     	 add r7,sp,#8
 8427              	.LCFI357:
 8428              	 .cfi_def_cfa 7,24
 8429 0006 7860     	 str r0,[r7,#4]
 8430 0008 3960     	 str r1,[r7]
2914:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFilePtr_t file = afatfs_allocateFileHandle();
 8431              	 .loc 1 2914 0
 8432 000a FFF7FEFF 	 bl afatfs_allocateFileHandle
 8433 000e F860     	 str r0,[r7,#12]
2915:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2916:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file) {
 8434              	 .loc 1 2916 0
 8435 0010 FB68     	 ldr r3,[r7,#12]
 8436 0012 002B     	 cmp r3,#0
 8437 0014 08D0     	 beq .L568
2917:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_createFile(file, filename, FAT_FILE_ATTRIBUTE_DIRECTORY, AFATFS_FILE_MODE_CREATE | A
 8438              	 .loc 1 2917 0
 8439 0016 3B68     	 ldr r3,[r7]
 8440 0018 0093     	 str r3,[sp]
 8441 001a F868     	 ldr r0,[r7,#12]
 8442 001c 7968     	 ldr r1,[r7,#4]
 8443 001e 1022     	 movs r2,#16
 8444 0020 1323     	 movs r3,#19
 8445 0022 FFF7FEFF 	 bl afatfs_createFile
 8446 0026 05E0     	 b .L569
 8447              	.L568:
2918:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else if (callback) {
 8448              	 .loc 1 2918 0
 8449 0028 3B68     	 ldr r3,[r7]
 8450 002a 002B     	 cmp r3,#0
 8451 002c 02D0     	 beq .L569
2919:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         callback(NULL);
 8452              	 .loc 1 2919 0
 8453 002e 3B68     	 ldr r3,[r7]
 8454 0030 0020     	 movs r0,#0
 8455 0032 9847     	 blx r3
 8456              	.L569:
2920:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2921:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2922:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return file != NULL;
 8457              	 .loc 1 2922 0
 8458 0034 FB68     	 ldr r3,[r7,#12]
 8459 0036 002B     	 cmp r3,#0
 8460 0038 14BF     	 ite ne
 8461 003a 0123     	 movne r3,#1
 8462 003c 0023     	 moveq r3,#0
 8463 003e DBB2     	 uxtb r3,r3
2923:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 8464              	 .loc 1 2923 0
 8465 0040 1846     	 mov r0,r3
 8466 0042 1037     	 adds r7,r7,#16
 8467              	.LCFI358:
 8468              	 .cfi_def_cfa_offset 8
 8469 0044 BD46     	 mov sp,r7
 8470              	.LCFI359:
 8471              	 .cfi_def_cfa_register 13
 8472              	 
 8473 0046 80BD     	 pop {r7,pc}
 8474              	 .cfi_endproc
 8475              	.LFE600:
 8477              	 .section .text.afatfs_chdir,"ax",%progbits
 8478              	 .align 2
 8479              	 .global afatfs_chdir
 8480              	 .thumb
 8481              	 .thumb_func
 8483              	afatfs_chdir:
 8484              	.LFB601:
2924:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2925:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2926:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Change the working directory to the directory with the given handle (use fopen). Pass NULL for `
2927:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * change to the root directory.
2928:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2929:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true on success, false if you should call again later to retry. After changing into a di
2930:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * to that directory may be closed by fclose().
2931:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2932:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_chdir(afatfsFilePtr_t directory)
2933:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 8485              	 .loc 1 2933 0
 8486              	 .cfi_startproc
 8487              	 
 8488              	 
 8489 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 8490              	.LCFI360:
 8491              	 .cfi_def_cfa_offset 20
 8492              	 .cfi_offset 4,-20
 8493              	 .cfi_offset 5,-16
 8494              	 .cfi_offset 6,-12
 8495              	 .cfi_offset 7,-8
 8496              	 .cfi_offset 14,-4
 8497 0002 83B0     	 sub sp,sp,#12
 8498              	.LCFI361:
 8499              	 .cfi_def_cfa_offset 32
 8500 0004 00AF     	 add r7,sp,#0
 8501              	.LCFI362:
 8502              	 .cfi_def_cfa_register 7
 8503 0006 7860     	 str r0,[r7,#4]
2934:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs_fileIsBusy(&afatfs.currentDirectory)) {
 8504              	 .loc 1 2934 0
 8505 0008 3648     	 ldr r0,.L579
 8506 000a FFF7FEFF 	 bl afatfs_fileIsBusy
 8507 000e 0346     	 mov r3,r0
 8508 0010 002B     	 cmp r3,#0
 8509 0012 01D0     	 beq .L572
2935:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return false;
 8510              	 .loc 1 2935 0
 8511 0014 0023     	 movs r3,#0
 8512 0016 61E0     	 b .L573
 8513              	.L572:
2936:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2937:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2938:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (directory) {
 8514              	 .loc 1 2938 0
 8515 0018 7B68     	 ldr r3,[r7,#4]
 8516 001a 002B     	 cmp r3,#0
 8517 001c 28D0     	 beq .L574
2939:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_fileIsBusy(directory)) {
 8518              	 .loc 1 2939 0
 8519 001e 7868     	 ldr r0,[r7,#4]
 8520 0020 FFF7FEFF 	 bl afatfs_fileIsBusy
 8521 0024 0346     	 mov r3,r0
 8522 0026 002B     	 cmp r3,#0
 8523 0028 01D0     	 beq .L575
2940:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return false;
 8524              	 .loc 1 2940 0
 8525 002a 0023     	 movs r3,#0
 8526 002c 56E0     	 b .L573
 8527              	.L575:
2941:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
2942:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2943:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         memcpy(&afatfs.currentDirectory, directory, sizeof(*directory));
 8528              	 .loc 1 2943 0
 8529 002e 2E4B     	 ldr r3,.L579+4
 8530 0030 03F58C52 	 add r2,r3,#4480
 8531 0034 0332     	 adds r2,r2,#3
 8532 0036 7B68     	 ldr r3,[r7,#4]
 8533 0038 1046     	 mov r0,r2
 8534 003a 03F13004 	 add r4,r3,#48
 8535              	.L576:
 8536 003e 0246     	 mov r2,r0
 8537 0040 1946     	 mov r1,r3
 8538 0042 D1F800E0 	 ldr lr,[r1]
 8539 0046 4E68     	 ldr r6,[r1,#4]
 8540 0048 8D68     	 ldr r5,[r1,#8]
 8541 004a C968     	 ldr r1,[r1,#12]
 8542 004c C2F800E0 	 str lr,[r2]
 8543 0050 5660     	 str r6,[r2,#4]
 8544 0052 9560     	 str r5,[r2,#8]
 8545 0054 D160     	 str r1,[r2,#12]
 8546 0056 1033     	 adds r3,r3,#16
 8547 0058 1030     	 adds r0,r0,#16
 8548 005a A342     	 cmp r3,r4
 8549 005c EFD1     	 bne .L576
 8550 005e 0246     	 mov r2,r0
 8551 0060 1868     	 ldr r0,[r3]
 8552 0062 5968     	 ldr r1,[r3,#4]
 8553 0064 1060     	 str r0,[r2]
 8554 0066 5160     	 str r1,[r2,#4]
 8555 0068 1B7A     	 ldrb r3,[r3,#8]
 8556 006a 1372     	 strb r3,[r2,#8]
2944:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return true;
 8557              	 .loc 1 2944 0
 8558 006c 0123     	 movs r3,#1
 8559 006e 35E0     	 b .L573
 8560              	.L574:
2945:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
2946:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_initFileHandle(&afatfs.currentDirectory);
 8561              	 .loc 1 2946 0
 8562 0070 1C48     	 ldr r0,.L579
 8563 0072 FFF7FEFF 	 bl afatfs_initFileHandle
2947:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2948:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.currentDirectory.mode = AFATFS_FILE_MODE_READ | AFATFS_FILE_MODE_WRITE;
 8564              	 .loc 1 2948 0
 8565 0076 1C4B     	 ldr r3,.L579+4
 8566 0078 03F58C53 	 add r3,r3,#4480
 8567 007c 1833     	 adds r3,r3,#24
 8568 007e 0322     	 movs r2,#3
 8569 0080 1A70     	 strb r2,[r3]
2949:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2950:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.filesystemType == FAT_FILESYSTEM_TYPE_FAT16)
 8570              	 .loc 1 2950 0
 8571 0082 194B     	 ldr r3,.L579+4
 8572 0084 1B78     	 ldrb r3,[r3]
 8573 0086 022B     	 cmp r3,#2
 8574 0088 06D1     	 bne .L577
2951:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.currentDirectory.type = AFATFS_FILE_TYPE_FAT16_ROOT_DIRECTORY;
 8575              	 .loc 1 2951 0
 8576 008a 174B     	 ldr r3,.L579+4
 8577 008c 03F58C53 	 add r3,r3,#4480
 8578 0090 0333     	 adds r3,r3,#3
 8579 0092 0222     	 movs r2,#2
 8580 0094 1A70     	 strb r2,[r3]
 8581 0096 05E0     	 b .L578
 8582              	.L577:
2952:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         else
2953:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.currentDirectory.type = AFATFS_FILE_TYPE_DIRECTORY;
 8583              	 .loc 1 2953 0
 8584 0098 134B     	 ldr r3,.L579+4
 8585 009a 03F58C53 	 add r3,r3,#4480
 8586 009e 0333     	 adds r3,r3,#3
 8587 00a0 0322     	 movs r2,#3
 8588 00a2 1A70     	 strb r2,[r3]
 8589              	.L578:
2954:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2955:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.currentDirectory.firstCluster = afatfs.rootDirectoryCluster;
 8590              	 .loc 1 2955 0
 8591 00a4 104B     	 ldr r3,.L579+4
 8592 00a6 03F58E53 	 add r3,r3,#4544
 8593 00aa 1C33     	 adds r3,r3,#28
 8594 00ac 1A68     	 ldr r2,[r3]
 8595 00ae 0E4B     	 ldr r3,.L579+4
 8596 00b0 03F58D53 	 add r3,r3,#4512
 8597 00b4 0233     	 adds r3,r3,#2
 8598 00b6 1A60     	 str r2,[r3]
2956:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.currentDirectory.attrib = FAT_FILE_ATTRIBUTE_DIRECTORY;
 8599              	 .loc 1 2956 0
 8600 00b8 0B4B     	 ldr r3,.L579+4
 8601 00ba 03F58C53 	 add r3,r3,#4480
 8602 00be 1933     	 adds r3,r3,#25
 8603 00c0 1022     	 movs r2,#16
 8604 00c2 1A70     	 strb r2,[r3]
2957:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2958:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Root directories don't have a directory entry to represent themselves:
2959:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.currentDirectory.directoryEntryPos.sectorNumberPhysical = 0;
 8605              	 .loc 1 2959 0
 8606 00c4 084B     	 ldr r3,.L579+4
 8607 00c6 03F58C53 	 add r3,r3,#4480
 8608 00ca 1C33     	 adds r3,r3,#28
 8609 00cc 0022     	 movs r2,#0
 8610 00ce 1A60     	 str r2,[r3]
2960:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2961:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_fseek(&afatfs.currentDirectory, 0, AFATFS_SEEK_SET);
 8611              	 .loc 1 2961 0
 8612 00d0 0448     	 ldr r0,.L579
 8613 00d2 0021     	 movs r1,#0
 8614 00d4 0022     	 movs r2,#0
 8615 00d6 FFF7FEFF 	 bl afatfs_fseek
2962:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2963:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return true;
 8616              	 .loc 1 2963 0
 8617 00da 0123     	 movs r3,#1
 8618              	.L573:
2964:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
2965:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 8619              	 .loc 1 2965 0
 8620 00dc 1846     	 mov r0,r3
 8621 00de 0C37     	 adds r7,r7,#12
 8622              	.LCFI363:
 8623              	 .cfi_def_cfa_offset 20
 8624 00e0 BD46     	 mov sp,r7
 8625              	.LCFI364:
 8626              	 .cfi_def_cfa_register 13
 8627              	 
 8628 00e2 F0BD     	 pop {r4,r5,r6,r7,pc}
 8629              	.L580:
 8630              	 .align 2
 8631              	.L579:
 8632 00e4 83110000 	 .word afatfs+4483
 8633 00e8 00000000 	 .word afatfs
 8634              	 .cfi_endproc
 8635              	.LFE601:
 8637              	 .section .text.afatfs_fopen,"ax",%progbits
 8638              	 .align 2
 8639              	 .global afatfs_fopen
 8640              	 .thumb
 8641              	 .thumb_func
 8643              	afatfs_fopen:
 8644              	.LFB602:
2966:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2967:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
2968:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Begin the process of opening a file with the given name in the current working directory (paths 
2969:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * not supported) using the given mode.
2970:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2971:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * To open the current working directory, pass "." for filename.
2972:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2973:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * The complete() callback is called when finished with either a file handle (file was opened) or N
2974:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2975:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Supported file mode strings:
2976:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2977:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * r - Read from an existing file
2978:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * w - Create a file for write access, if the file already exists then truncate it
2979:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * a - Create a file for write access to the end of the file only, if the file already exists then 
2980:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2981:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * r+ - Read and write from an existing file
2982:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * w+ - Read and write from an existing file, if the file doesn't already exist it is created
2983:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * a+ - Read from or append to an existing file, if the file doesn't already exist it is created TO
2984:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2985:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * as - Create a new file which is stored contiguously on disk (high performance mode/freefile) for
2986:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * ws   If the file is already non-empty or freefile support is not compiled in then it will fall b
2987:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *      operation.
2988:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2989:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * All other mode strings are illegal. In particular, don't add "b" to the end of the mode string.
2990:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
2991:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns false if the the open failed really early (out of file handles).
2992:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
2993:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_fopen(const char *filename, const char *mode, afatfsFileCallback_t complete)
2994:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 8645              	 .loc 1 2994 0
 8646              	 .cfi_startproc
 8647              	 
 8648              	 
 8649 0000 90B5     	 push {r4,r7,lr}
 8650              	.LCFI365:
 8651              	 .cfi_def_cfa_offset 12
 8652              	 .cfi_offset 4,-12
 8653              	 .cfi_offset 7,-8
 8654              	 .cfi_offset 14,-4
 8655 0002 89B0     	 sub sp,sp,#36
 8656              	.LCFI366:
 8657              	 .cfi_def_cfa_offset 48
 8658 0004 02AF     	 add r7,sp,#8
 8659              	.LCFI367:
 8660              	 .cfi_def_cfa 7,40
 8661 0006 F860     	 str r0,[r7,#12]
 8662 0008 B960     	 str r1,[r7,#8]
 8663 000a 7A60     	 str r2,[r7,#4]
2995:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t fileMode = 0;
 8664              	 .loc 1 2995 0
 8665 000c 0023     	 movs r3,#0
 8666 000e FB75     	 strb r3,[r7,#23]
2996:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFilePtr_t file;
2997:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
2998:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (mode[0]) {
 8667              	 .loc 1 2998 0
 8668 0010 BB68     	 ldr r3,[r7,#8]
 8669 0012 1B78     	 ldrb r3,[r3]
 8670 0014 722B     	 cmp r3,#114
 8671 0016 04D0     	 beq .L583
 8672 0018 772B     	 cmp r3,#119
 8673 001a 05D0     	 beq .L584
 8674 001c 612B     	 cmp r3,#97
 8675 001e 06D0     	 beq .L585
 8676 0020 08E0     	 b .L582
 8677              	.L583:
2999:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case 'r':
3000:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             fileMode = AFATFS_FILE_MODE_READ;
 8678              	 .loc 1 3000 0
 8679 0022 0123     	 movs r3,#1
 8680 0024 FB75     	 strb r3,[r7,#23]
3001:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 8681              	 .loc 1 3001 0
 8682 0026 05E0     	 b .L582
 8683              	.L584:
3002:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case 'w':
3003:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             fileMode = AFATFS_FILE_MODE_WRITE | AFATFS_FILE_MODE_CREATE;
 8684              	 .loc 1 3003 0
 8685 0028 1223     	 movs r3,#18
 8686 002a FB75     	 strb r3,[r7,#23]
3004:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 8687              	 .loc 1 3004 0
 8688 002c 02E0     	 b .L582
 8689              	.L585:
3005:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case 'a':
3006:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             fileMode = AFATFS_FILE_MODE_APPEND | AFATFS_FILE_MODE_CREATE;
 8690              	 .loc 1 3006 0
 8691 002e 1423     	 movs r3,#20
 8692 0030 FB75     	 strb r3,[r7,#23]
3007:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 8693              	 .loc 1 3007 0
 8694 0032 00BF     	 nop
 8695              	.L582:
3008:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3009:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3010:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (mode[1]) {
 8696              	 .loc 1 3010 0
 8697 0034 BB68     	 ldr r3,[r7,#8]
 8698 0036 0133     	 adds r3,r3,#1
 8699 0038 1B78     	 ldrb r3,[r3]
 8700 003a 2B2B     	 cmp r3,#43
 8701 003c 02D0     	 beq .L587
 8702 003e 732B     	 cmp r3,#115
 8703 0040 0DD0     	 beq .L588
 8704 0042 11E0     	 b .L586
 8705              	.L587:
3011:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case '+':
3012:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             fileMode |= AFATFS_FILE_MODE_READ;
 8706              	 .loc 1 3012 0
 8707 0044 FB7D     	 ldrb r3,[r7,#23]
 8708 0046 43F00103 	 orr r3,r3,#1
 8709 004a FB75     	 strb r3,[r7,#23]
3013:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3014:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (fileMode == AFATFS_FILE_MODE_READ) {
 8710              	 .loc 1 3014 0
 8711 004c FB7D     	 ldrb r3,[r7,#23]
 8712 004e 012B     	 cmp r3,#1
 8713 0050 04D1     	 bne .L589
3015:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 fileMode |= AFATFS_FILE_MODE_WRITE;
 8714              	 .loc 1 3015 0
 8715 0052 FB7D     	 ldrb r3,[r7,#23]
 8716 0054 43F00203 	 orr r3,r3,#2
 8717 0058 FB75     	 strb r3,[r7,#23]
3016:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
3017:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 8718              	 .loc 1 3017 0
 8719 005a 05E0     	 b .L586
 8720              	.L589:
 8721 005c 04E0     	 b .L586
 8722              	.L588:
3018:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case 's':
3019:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
3020:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             fileMode |= AFATFS_FILE_MODE_CONTIGUOUS | AFATFS_FILE_MODE_RETAIN_DIRECTORY;
 8723              	 .loc 1 3020 0
 8724 005e FB7D     	 ldrb r3,[r7,#23]
 8725 0060 43F02803 	 orr r3,r3,#40
 8726 0064 FB75     	 strb r3,[r7,#23]
3021:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3022:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 8727              	 .loc 1 3022 0
 8728 0066 00BF     	 nop
 8729              	.L586:
3023:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3024:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3025:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     file = afatfs_allocateFileHandle();
 8730              	 .loc 1 3025 0
 8731 0068 FFF7FEFF 	 bl afatfs_allocateFileHandle
 8732 006c 3861     	 str r0,[r7,#16]
3026:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3027:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file) {
 8733              	 .loc 1 3027 0
 8734 006e 3B69     	 ldr r3,[r7,#16]
 8735 0070 002B     	 cmp r3,#0
 8736 0072 09D0     	 beq .L590
3028:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_createFile(file, filename, FAT_FILE_ATTRIBUTE_ARCHIVE, fileMode, complete);
 8737              	 .loc 1 3028 0
 8738 0074 FC7D     	 ldrb r4,[r7,#23]
 8739 0076 7B68     	 ldr r3,[r7,#4]
 8740 0078 0093     	 str r3,[sp]
 8741 007a 3869     	 ldr r0,[r7,#16]
 8742 007c F968     	 ldr r1,[r7,#12]
 8743 007e 2022     	 movs r2,#32
 8744 0080 2346     	 mov r3,r4
 8745 0082 FFF7FEFF 	 bl afatfs_createFile
 8746 0086 05E0     	 b .L591
 8747              	.L590:
3029:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else if (complete) {
 8748              	 .loc 1 3029 0
 8749 0088 7B68     	 ldr r3,[r7,#4]
 8750 008a 002B     	 cmp r3,#0
 8751 008c 02D0     	 beq .L591
3030:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         complete(NULL);
 8752              	 .loc 1 3030 0
 8753 008e 7B68     	 ldr r3,[r7,#4]
 8754 0090 0020     	 movs r0,#0
 8755 0092 9847     	 blx r3
 8756              	.L591:
3031:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3032:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3033:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return file != NULL;
 8757              	 .loc 1 3033 0
 8758 0094 3B69     	 ldr r3,[r7,#16]
 8759 0096 002B     	 cmp r3,#0
 8760 0098 14BF     	 ite ne
 8761 009a 0123     	 movne r3,#1
 8762 009c 0023     	 moveq r3,#0
 8763 009e DBB2     	 uxtb r3,r3
3034:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 8764              	 .loc 1 3034 0
 8765 00a0 1846     	 mov r0,r3
 8766 00a2 1C37     	 adds r7,r7,#28
 8767              	.LCFI368:
 8768              	 .cfi_def_cfa_offset 12
 8769 00a4 BD46     	 mov sp,r7
 8770              	.LCFI369:
 8771              	 .cfi_def_cfa_register 13
 8772              	 
 8773 00a6 90BD     	 pop {r4,r7,pc}
 8774              	 .cfi_endproc
 8775              	.LFE602:
 8777              	 .section .text.afatfs_fputc,"ax",%progbits
 8778              	 .align 2
 8779              	 .global afatfs_fputc
 8780              	 .thumb
 8781              	 .thumb_func
 8783              	afatfs_fputc:
 8784              	.LFB603:
3035:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3036:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3037:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Write a single character to the file at the current cursor position. If the cache is too busy to
3038:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * it is silently dropped.
3039:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3040:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** void afatfs_fputc(afatfsFilePtr_t file, uint8_t c)
3041:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 8785              	 .loc 1 3041 0
 8786              	 .cfi_startproc
 8787              	 
 8788              	 
 8789 0000 80B5     	 push {r7,lr}
 8790              	.LCFI370:
 8791              	 .cfi_def_cfa_offset 8
 8792              	 .cfi_offset 7,-8
 8793              	 .cfi_offset 14,-4
 8794 0002 84B0     	 sub sp,sp,#16
 8795              	.LCFI371:
 8796              	 .cfi_def_cfa_offset 24
 8797 0004 00AF     	 add r7,sp,#0
 8798              	.LCFI372:
 8799              	 .cfi_def_cfa_register 7
 8800 0006 7860     	 str r0,[r7,#4]
 8801 0008 0B46     	 mov r3,r1
 8802 000a FB70     	 strb r3,[r7,#3]
3042:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t cursorOffsetInSector = file->cursorOffset % AFATFS_SECTOR_SIZE;
 8803              	 .loc 1 3042 0
 8804 000c 7B68     	 ldr r3,[r7,#4]
 8805 000e D3F80130 	 ldr r3,[r3,#1]
 8806 0012 C3F30803 	 ubfx r3,r3,#0,#9
 8807 0016 FB60     	 str r3,[r7,#12]
3043:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3044:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     int cacheIndex = file->writeLockedCacheIndex;
 8808              	 .loc 1 3044 0
 8809 0018 7B68     	 ldr r3,[r7,#4]
 8810 001a DB7D     	 ldrb r3,[r3,#23]
 8811 001c 5BB2     	 sxtb r3,r3
 8812 001e BB60     	 str r3,[r7,#8]
3045:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3046:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /* If we've already locked the current sector in the cache, and we won't be completing the sect
3047:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * be caching/uncaching/seeking, so we can just run this simpler fast case.
3048:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
3049:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (cacheIndex != -1 && cursorOffsetInSector != AFATFS_SECTOR_SIZE - 1) {
 8813              	 .loc 1 3049 0
 8814 0020 BB68     	 ldr r3,[r7,#8]
 8815 0022 B3F1FF3F 	 cmp r3,#-1
 8816 0026 14D0     	 beq .L594
 8817              	 .loc 1 3049 0 is_stmt 0 discriminator 1
 8818 0028 FB68     	 ldr r3,[r7,#12]
 8819 002a 40F2FF12 	 movw r2,#511
 8820 002e 9342     	 cmp r3,r2
 8821 0030 0FD0     	 beq .L594
3050:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_cacheSectorGetMemory(cacheIndex)[cursorOffsetInSector] = c;
 8822              	 .loc 1 3050 0 is_stmt 1
 8823 0032 B868     	 ldr r0,[r7,#8]
 8824 0034 FFF7FEFF 	 bl afatfs_cacheSectorGetMemory
 8825 0038 0246     	 mov r2,r0
 8826 003a FB68     	 ldr r3,[r7,#12]
 8827 003c 1344     	 add r3,r3,r2
 8828 003e FA78     	 ldrb r2,[r7,#3]
 8829 0040 1A70     	 strb r2,[r3]
3051:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         file->cursorOffset++;
 8830              	 .loc 1 3051 0
 8831 0042 7B68     	 ldr r3,[r7,#4]
 8832 0044 D3F80130 	 ldr r3,[r3,#1]
 8833 0048 5A1C     	 adds r2,r3,#1
 8834 004a 7B68     	 ldr r3,[r7,#4]
 8835 004c C3F80120 	 str r2,[r3,#1]
 8836 0050 05E0     	 b .L593
 8837              	.L594:
3052:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
3053:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Slow path
3054:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_fwrite(file, &c, sizeof(c));
 8838              	 .loc 1 3054 0
 8839 0052 FB1C     	 adds r3,r7,#3
 8840 0054 7868     	 ldr r0,[r7,#4]
 8841 0056 1946     	 mov r1,r3
 8842 0058 0122     	 movs r2,#1
 8843 005a FFF7FEFF 	 bl afatfs_fwrite
 8844              	.L593:
3055:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3056:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 8845              	 .loc 1 3056 0
 8846 005e 1037     	 adds r7,r7,#16
 8847              	.LCFI373:
 8848              	 .cfi_def_cfa_offset 8
 8849 0060 BD46     	 mov sp,r7
 8850              	.LCFI374:
 8851              	 .cfi_def_cfa_register 13
 8852              	 
 8853 0062 80BD     	 pop {r7,pc}
 8854              	 .cfi_endproc
 8855              	.LFE603:
 8857              	 .section .text.afatfs_fwrite,"ax",%progbits
 8858              	 .align 2
 8859              	 .global afatfs_fwrite
 8860              	 .thumb
 8861              	 .thumb_func
 8863              	afatfs_fwrite:
 8864              	.LFB604:
3057:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3058:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3059:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Attempt to write `len` bytes from `buffer` into the `file`.
3060:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
3061:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns the number of bytes actually written.
3062:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
3063:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * 0 will be returned when:
3064:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     The filesystem is busy (try again later)
3065:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
3066:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Fewer bytes will be written than requested when:
3067:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     The write spanned a sector boundary and the next sector's contents/location was not yet avai
3068:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     Or you tried to extend the length of the file but the filesystem is full (check afatfs_isFul
3069:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3070:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** uint32_t afatfs_fwrite(afatfsFilePtr_t file, const uint8_t *buffer, uint32_t len)
3071:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 8865              	 .loc 1 3071 0
 8866              	 .cfi_startproc
 8867              	 
 8868              	 
 8869 0000 80B5     	 push {r7,lr}
 8870              	.LCFI375:
 8871              	 .cfi_def_cfa_offset 8
 8872              	 .cfi_offset 7,-8
 8873              	 .cfi_offset 14,-4
 8874 0002 8AB0     	 sub sp,sp,#40
 8875              	.LCFI376:
 8876              	 .cfi_def_cfa_offset 48
 8877 0004 00AF     	 add r7,sp,#0
 8878              	.LCFI377:
 8879              	 .cfi_def_cfa_register 7
 8880 0006 F860     	 str r0,[r7,#12]
 8881 0008 B960     	 str r1,[r7,#8]
 8882 000a 7A60     	 str r2,[r7,#4]
3072:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if ((file->mode & (AFATFS_FILE_MODE_APPEND | AFATFS_FILE_MODE_WRITE)) == 0) {
 8883              	 .loc 1 3072 0
 8884 000c FB68     	 ldr r3,[r7,#12]
 8885 000e 5B7D     	 ldrb r3,[r3,#21]
 8886 0010 03F00603 	 and r3,r3,#6
 8887 0014 002B     	 cmp r3,#0
 8888 0016 01D1     	 bne .L597
3073:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return 0;
 8889              	 .loc 1 3073 0
 8890 0018 0023     	 movs r3,#0
 8891 001a 5DE0     	 b .L598
 8892              	.L597:
3074:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3075:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3076:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs_fileIsBusy(file)) {
 8893              	 .loc 1 3076 0
 8894 001c F868     	 ldr r0,[r7,#12]
 8895 001e FFF7FEFF 	 bl afatfs_fileIsBusy
 8896 0022 0346     	 mov r3,r0
 8897 0024 002B     	 cmp r3,#0
 8898 0026 01D0     	 beq .L599
3077:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // There might be a seek pending
3078:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return 0;
 8899              	 .loc 1 3078 0
 8900 0028 0023     	 movs r3,#0
 8901 002a 55E0     	 b .L598
 8902              	.L599:
3079:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3080:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3081:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t cursorOffsetInSector = file->cursorOffset % AFATFS_SECTOR_SIZE;
 8903              	 .loc 1 3081 0
 8904 002c FB68     	 ldr r3,[r7,#12]
 8905 002e D3F80130 	 ldr r3,[r3,#1]
 8906 0032 C3F30803 	 ubfx r3,r3,#0,#9
 8907 0036 7B62     	 str r3,[r7,#36]
3082:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t writtenBytes = 0;
 8908              	 .loc 1 3082 0
 8909 0038 0023     	 movs r3,#0
 8910 003a 3B62     	 str r3,[r7,#32]
3083:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3084:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     while (len > 0) {
 8911              	 .loc 1 3084 0
 8912 003c 48E0     	 b .L600
 8913              	.L605:
 8914              	.LBB41:
 8915              	.LBB42:
3085:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t bytesToWriteThisSector = MIN(AFATFS_SECTOR_SIZE - cursorOffsetInSector, len);
 8916              	 .loc 1 3085 0
 8917 003e 7B6A     	 ldr r3,[r7,#36]
 8918 0040 C3F50073 	 rsb r3,r3,#512
 8919 0044 FB61     	 str r3,[r7,#28]
 8920 0046 7B68     	 ldr r3,[r7,#4]
 8921 0048 BB61     	 str r3,[r7,#24]
 8922 004a BA69     	 ldr r2,[r7,#24]
 8923 004c FB69     	 ldr r3,[r7,#28]
 8924 004e 9342     	 cmp r3,r2
 8925 0050 28BF     	 it cs
 8926 0052 1346     	 movcs r3,r2
 8927              	.LBE42:
 8928 0054 7B61     	 str r3,[r7,#20]
3086:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint8_t *sectorBuffer;
3087:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3088:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         sectorBuffer = afatfs_fileLockCursorSectorForWrite(file);
 8929              	 .loc 1 3088 0
 8930 0056 F868     	 ldr r0,[r7,#12]
 8931 0058 FFF7FEFF 	 bl afatfs_fileLockCursorSectorForWrite
 8932 005c 3861     	 str r0,[r7,#16]
3089:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (!sectorBuffer) {
 8933              	 .loc 1 3089 0
 8934 005e 3B69     	 ldr r3,[r7,#16]
 8935 0060 002B     	 cmp r3,#0
 8936 0062 00D1     	 bne .L601
3090:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Cache is currently busy
3091:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 8937              	 .loc 1 3091 0
 8938 0064 37E0     	 b .L602
 8939              	.L601:
3092:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3093:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3094:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         memcpy(sectorBuffer + cursorOffsetInSector, buffer, bytesToWriteThisSector);
 8940              	 .loc 1 3094 0
 8941 0066 3A69     	 ldr r2,[r7,#16]
 8942 0068 7B6A     	 ldr r3,[r7,#36]
 8943 006a 1344     	 add r3,r3,r2
 8944 006c 1846     	 mov r0,r3
 8945 006e B968     	 ldr r1,[r7,#8]
 8946 0070 7A69     	 ldr r2,[r7,#20]
 8947 0072 FFF7FEFF 	 bl memcpy
3095:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3096:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         writtenBytes += bytesToWriteThisSector;
 8948              	 .loc 1 3096 0
 8949 0076 3A6A     	 ldr r2,[r7,#32]
 8950 0078 7B69     	 ldr r3,[r7,#20]
 8951 007a 1344     	 add r3,r3,r2
 8952 007c 3B62     	 str r3,[r7,#32]
3097:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3098:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         /*
3099:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * If the seek doesn't complete immediately then we'll break and wait for that seek to comp
3100:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * the file to be non-busy on entry again.
3101:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          *
3102:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * A seek operation should always be able to queue on the file since we have checked that t
3103:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * on entry (fseek will never return AFATFS_OPERATION_FAILURE).
3104:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          *
3105:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * If the seek has to queue, when the seek completes, it'll update the fileSize for us to c
3106:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          */
3107:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_fseekInternal(file, bytesToWriteThisSector, NULL) == AFATFS_OPERATION_IN_PROGRES
 8953              	 .loc 1 3107 0
 8954 007e F868     	 ldr r0,[r7,#12]
 8955 0080 7969     	 ldr r1,[r7,#20]
 8956 0082 0022     	 movs r2,#0
 8957 0084 FFF7FEFF 	 bl afatfs_fseekInternal
 8958 0088 0346     	 mov r3,r0
 8959 008a 002B     	 cmp r3,#0
 8960 008c 00D1     	 bne .L603
3108:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 8961              	 .loc 1 3108 0
 8962 008e 22E0     	 b .L602
 8963              	.L603:
3109:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3110:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3111:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
3112:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if ((file->mode & AFATFS_FILE_MODE_CONTIGUOUS) != 0) {
 8964              	 .loc 1 3112 0
 8965 0090 FB68     	 ldr r3,[r7,#12]
 8966 0092 5B7D     	 ldrb r3,[r3,#21]
 8967 0094 03F00803 	 and r3,r3,#8
 8968 0098 002B     	 cmp r3,#0
 8969 009a 0FD0     	 beq .L604
3113:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_assert(file->cursorCluster < afatfs.freeFile.firstCluster);
 8970              	 .loc 1 3113 0
 8971 009c FB68     	 ldr r3,[r7,#12]
 8972 009e D3F80D20 	 ldr r2,[r3,#13]
 8973 00a2 0F4B     	 ldr r3,.L606
 8974 00a4 03F58B53 	 add r3,r3,#4448
 8975 00a8 0733     	 adds r3,r3,#7
 8976 00aa 1B68     	 ldr r3,[r3]
 8977 00ac 9A42     	 cmp r2,r3
 8978 00ae 34BF     	 ite cc
 8979 00b0 0123     	 movcc r3,#1
 8980 00b2 0023     	 movcs r3,#0
 8981 00b4 DBB2     	 uxtb r3,r3
 8982 00b6 1846     	 mov r0,r3
 8983 00b8 FFF7FEFF 	 bl afatfs_assert
 8984              	.L604:
3114:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3115:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3116:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3117:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         len -= bytesToWriteThisSector;
 8985              	 .loc 1 3117 0
 8986 00bc 7A68     	 ldr r2,[r7,#4]
 8987 00be 7B69     	 ldr r3,[r7,#20]
 8988 00c0 D31A     	 subs r3,r2,r3
 8989 00c2 7B60     	 str r3,[r7,#4]
3118:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         buffer += bytesToWriteThisSector;
 8990              	 .loc 1 3118 0
 8991 00c4 BA68     	 ldr r2,[r7,#8]
 8992 00c6 7B69     	 ldr r3,[r7,#20]
 8993 00c8 1344     	 add r3,r3,r2
 8994 00ca BB60     	 str r3,[r7,#8]
3119:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         cursorOffsetInSector = 0;
 8995              	 .loc 1 3119 0
 8996 00cc 0023     	 movs r3,#0
 8997 00ce 7B62     	 str r3,[r7,#36]
 8998              	.L600:
 8999              	.LBE41:
3084:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t bytesToWriteThisSector = MIN(AFATFS_SECTOR_SIZE - cursorOffsetInSector, len);
 9000              	 .loc 1 3084 0
 9001 00d0 7B68     	 ldr r3,[r7,#4]
 9002 00d2 002B     	 cmp r3,#0
 9003 00d4 B3D1     	 bne .L605
 9004              	.L602:
3120:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3121:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3122:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return writtenBytes;
 9005              	 .loc 1 3122 0
 9006 00d6 3B6A     	 ldr r3,[r7,#32]
 9007              	.L598:
3123:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 9008              	 .loc 1 3123 0
 9009 00d8 1846     	 mov r0,r3
 9010 00da 2837     	 adds r7,r7,#40
 9011              	.LCFI378:
 9012              	 .cfi_def_cfa_offset 8
 9013 00dc BD46     	 mov sp,r7
 9014              	.LCFI379:
 9015              	 .cfi_def_cfa_register 13
 9016              	 
 9017 00de 80BD     	 pop {r7,pc}
 9018              	.L607:
 9019              	 .align 2
 9020              	.L606:
 9021 00e0 00000000 	 .word afatfs
 9022              	 .cfi_endproc
 9023              	.LFE604:
 9025              	 .section .text.afatfs_fread,"ax",%progbits
 9026              	 .align 2
 9027              	 .global afatfs_fread
 9028              	 .thumb
 9029              	 .thumb_func
 9031              	afatfs_fread:
 9032              	.LFB605:
3124:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3125:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3126:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Attempt to read `len` bytes from `file` into the `buffer`.
3127:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
3128:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns the number of bytes actually read.
3129:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
3130:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * 0 will be returned when:
3131:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     The filesystem is busy (try again later)
3132:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     EOF was reached (check afatfs_isEof())
3133:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
3134:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Fewer bytes than requested will be read when:
3135:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     The read spans a AFATFS_SECTOR_SIZE boundary and the following sector was not available in t
3136:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3137:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** uint32_t afatfs_fread(afatfsFilePtr_t file, uint8_t *buffer, uint32_t len)
3138:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 9033              	 .loc 1 3138 0
 9034              	 .cfi_startproc
 9035              	 
 9036              	 
 9037 0000 80B5     	 push {r7,lr}
 9038              	.LCFI380:
 9039              	 .cfi_def_cfa_offset 8
 9040              	 .cfi_offset 7,-8
 9041              	 .cfi_offset 14,-4
 9042 0002 8CB0     	 sub sp,sp,#48
 9043              	.LCFI381:
 9044              	 .cfi_def_cfa_offset 56
 9045 0004 00AF     	 add r7,sp,#0
 9046              	.LCFI382:
 9047              	 .cfi_def_cfa_register 7
 9048 0006 F860     	 str r0,[r7,#12]
 9049 0008 B960     	 str r1,[r7,#8]
 9050 000a 7A60     	 str r2,[r7,#4]
3139:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if ((file->mode & AFATFS_FILE_MODE_READ) == 0) {
 9051              	 .loc 1 3139 0
 9052 000c FB68     	 ldr r3,[r7,#12]
 9053 000e 5B7D     	 ldrb r3,[r3,#21]
 9054 0010 03F00103 	 and r3,r3,#1
 9055 0014 002B     	 cmp r3,#0
 9056 0016 01D1     	 bne .L609
3140:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return 0;
 9057              	 .loc 1 3140 0
 9058 0018 0023     	 movs r3,#0
 9059 001a 62E0     	 b .L610
 9060              	.L609:
3141:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3142:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3143:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs_fileIsBusy(file)) {
 9061              	 .loc 1 3143 0
 9062 001c F868     	 ldr r0,[r7,#12]
 9063 001e FFF7FEFF 	 bl afatfs_fileIsBusy
 9064 0022 0346     	 mov r3,r0
 9065 0024 002B     	 cmp r3,#0
 9066 0026 01D0     	 beq .L611
3144:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // There might be a seek pending
3145:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return 0;
 9067              	 .loc 1 3145 0
 9068 0028 0023     	 movs r3,#0
 9069 002a 5AE0     	 b .L610
 9070              	.L611:
3146:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3147:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3148:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     /*
3149:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * If we've just previously fwritten() to extend the file, the logical filesize will be out of 
3150:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * will appear to be beyond the end of the file (but actually it's precisely at the end of the 
3151:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      * we had seeked backwards to where we could read something with fseek(), we would have updated
3152:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****      */
3153:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->cursorOffset >= file->logicalSize)
 9071              	 .loc 1 3153 0
 9072 002c FB68     	 ldr r3,[r7,#12]
 9073 002e D3F80120 	 ldr r2,[r3,#1]
 9074 0032 FB68     	 ldr r3,[r7,#12]
 9075 0034 D3F80530 	 ldr r3,[r3,#5]
 9076 0038 9A42     	 cmp r2,r3
 9077 003a 01D3     	 bcc .L612
3154:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return 0;
 9078              	 .loc 1 3154 0
 9079 003c 0023     	 movs r3,#0
 9080 003e 50E0     	 b .L610
 9081              	.L612:
 9082              	.LBB43:
3155:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3156:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     len = MIN(file->logicalSize - file->cursorOffset, len);
 9083              	 .loc 1 3156 0
 9084 0040 FB68     	 ldr r3,[r7,#12]
 9085 0042 D3F80520 	 ldr r2,[r3,#5]
 9086 0046 FB68     	 ldr r3,[r7,#12]
 9087 0048 D3F80130 	 ldr r3,[r3,#1]
 9088 004c D31A     	 subs r3,r2,r3
 9089 004e 7B62     	 str r3,[r7,#36]
 9090 0050 7B68     	 ldr r3,[r7,#4]
 9091 0052 3B62     	 str r3,[r7,#32]
 9092 0054 3A6A     	 ldr r2,[r7,#32]
 9093 0056 7B6A     	 ldr r3,[r7,#36]
 9094 0058 9342     	 cmp r3,r2
 9095 005a 28BF     	 it cs
 9096 005c 1346     	 movcs r3,r2
 9097              	.LBE43:
 9098 005e 7B60     	 str r3,[r7,#4]
3157:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3158:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t readBytes = 0;
 9099              	 .loc 1 3158 0
 9100 0060 0023     	 movs r3,#0
 9101 0062 FB62     	 str r3,[r7,#44]
3159:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t cursorOffsetInSector = file->cursorOffset % AFATFS_SECTOR_SIZE;
 9102              	 .loc 1 3159 0
 9103 0064 FB68     	 ldr r3,[r7,#12]
 9104 0066 D3F80130 	 ldr r3,[r3,#1]
 9105 006a C3F30803 	 ubfx r3,r3,#0,#9
 9106 006e BB62     	 str r3,[r7,#40]
3160:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3161:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     while (len > 0) {
 9107              	 .loc 1 3161 0
 9108 0070 33E0     	 b .L613
 9109              	.L617:
 9110              	.LBB44:
 9111              	.LBB45:
3162:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t bytesToReadThisSector = MIN(AFATFS_SECTOR_SIZE - cursorOffsetInSector, len);
 9112              	 .loc 1 3162 0
 9113 0072 BB6A     	 ldr r3,[r7,#40]
 9114 0074 C3F50073 	 rsb r3,r3,#512
 9115 0078 FB61     	 str r3,[r7,#28]
 9116 007a 7B68     	 ldr r3,[r7,#4]
 9117 007c BB61     	 str r3,[r7,#24]
 9118 007e BA69     	 ldr r2,[r7,#24]
 9119 0080 FB69     	 ldr r3,[r7,#28]
 9120 0082 9342     	 cmp r3,r2
 9121 0084 28BF     	 it cs
 9122 0086 1346     	 movcs r3,r2
 9123              	.LBE45:
 9124 0088 7B61     	 str r3,[r7,#20]
3163:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint8_t *sectorBuffer;
3164:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3165:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         sectorBuffer = afatfs_fileRetainCursorSectorForRead(file);
 9125              	 .loc 1 3165 0
 9126 008a F868     	 ldr r0,[r7,#12]
 9127 008c FFF7FEFF 	 bl afatfs_fileRetainCursorSectorForRead
 9128 0090 3861     	 str r0,[r7,#16]
3166:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (!sectorBuffer) {
 9129              	 .loc 1 3166 0
 9130 0092 3B69     	 ldr r3,[r7,#16]
 9131 0094 002B     	 cmp r3,#0
 9132 0096 01D1     	 bne .L614
3167:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Cache is currently busy
3168:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return readBytes;
 9133              	 .loc 1 3168 0
 9134 0098 FB6A     	 ldr r3,[r7,#44]
 9135 009a 22E0     	 b .L610
 9136              	.L614:
3169:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3170:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3171:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         memcpy(buffer, sectorBuffer + cursorOffsetInSector, bytesToReadThisSector);
 9137              	 .loc 1 3171 0
 9138 009c 3A69     	 ldr r2,[r7,#16]
 9139 009e BB6A     	 ldr r3,[r7,#40]
 9140 00a0 1344     	 add r3,r3,r2
 9141 00a2 B868     	 ldr r0,[r7,#8]
 9142 00a4 1946     	 mov r1,r3
 9143 00a6 7A69     	 ldr r2,[r7,#20]
 9144 00a8 FFF7FEFF 	 bl memcpy
3172:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3173:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         readBytes += bytesToReadThisSector;
 9145              	 .loc 1 3173 0
 9146 00ac FA6A     	 ldr r2,[r7,#44]
 9147 00ae 7B69     	 ldr r3,[r7,#20]
 9148 00b0 1344     	 add r3,r3,r2
 9149 00b2 FB62     	 str r3,[r7,#44]
3174:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3175:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         /*
3176:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * If the seek doesn't complete immediately then we'll break and wait for that seek to comp
3177:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * the file to be non-busy on entry again.
3178:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          *
3179:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * A seek operation should always be able to queue on the file since we have checked that t
3180:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * on entry (fseek will never return AFATFS_OPERATION_FAILURE).
3181:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          */
3182:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs_fseekInternal(file, bytesToReadThisSector, NULL) == AFATFS_OPERATION_IN_PROGRESS
 9150              	 .loc 1 3182 0
 9151 00b4 F868     	 ldr r0,[r7,#12]
 9152 00b6 7969     	 ldr r1,[r7,#20]
 9153 00b8 0022     	 movs r2,#0
 9154 00ba FFF7FEFF 	 bl afatfs_fseekInternal
 9155 00be 0346     	 mov r3,r0
 9156 00c0 002B     	 cmp r3,#0
 9157 00c2 00D1     	 bne .L615
3183:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 9158              	 .loc 1 3183 0
 9159 00c4 0CE0     	 b .L616
 9160              	.L615:
3184:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3185:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3186:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         len -= bytesToReadThisSector;
 9161              	 .loc 1 3186 0
 9162 00c6 7A68     	 ldr r2,[r7,#4]
 9163 00c8 7B69     	 ldr r3,[r7,#20]
 9164 00ca D31A     	 subs r3,r2,r3
 9165 00cc 7B60     	 str r3,[r7,#4]
3187:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         buffer += bytesToReadThisSector;
 9166              	 .loc 1 3187 0
 9167 00ce BA68     	 ldr r2,[r7,#8]
 9168 00d0 7B69     	 ldr r3,[r7,#20]
 9169 00d2 1344     	 add r3,r3,r2
 9170 00d4 BB60     	 str r3,[r7,#8]
3188:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         cursorOffsetInSector = 0;
 9171              	 .loc 1 3188 0
 9172 00d6 0023     	 movs r3,#0
 9173 00d8 BB62     	 str r3,[r7,#40]
 9174              	.L613:
 9175              	.LBE44:
3161:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         uint32_t bytesToReadThisSector = MIN(AFATFS_SECTOR_SIZE - cursorOffsetInSector, len);
 9176              	 .loc 1 3161 0
 9177 00da 7B68     	 ldr r3,[r7,#4]
 9178 00dc 002B     	 cmp r3,#0
 9179 00de C8D1     	 bne .L617
 9180              	.L616:
3189:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3190:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3191:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return readBytes;
 9181              	 .loc 1 3191 0
 9182 00e0 FB6A     	 ldr r3,[r7,#44]
 9183              	.L610:
3192:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 9184              	 .loc 1 3192 0
 9185 00e2 1846     	 mov r0,r3
 9186 00e4 3037     	 adds r7,r7,#48
 9187              	.LCFI383:
 9188              	 .cfi_def_cfa_offset 8
 9189 00e6 BD46     	 mov sp,r7
 9190              	.LCFI384:
 9191              	 .cfi_def_cfa_register 13
 9192              	 
 9193 00e8 80BD     	 pop {r7,pc}
 9194              	 .cfi_endproc
 9195              	.LFE605:
 9197 00ea 00BF     	 .section .text.afatfs_feof,"ax",%progbits
 9198              	 .align 2
 9199              	 .global afatfs_feof
 9200              	 .thumb
 9201              	 .thumb_func
 9203              	afatfs_feof:
 9204              	.LFB606:
3193:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3194:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3195:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns true if the file's pointer position currently lies at the end-of-file point (i.e. one by
3196:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * byte in the file).
3197:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3198:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_feof(afatfsFilePtr_t file)
3199:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 9205              	 .loc 1 3199 0
 9206              	 .cfi_startproc
 9207              	 
 9208              	 
 9209              	 
 9210 0000 80B4     	 push {r7}
 9211              	.LCFI385:
 9212              	 .cfi_def_cfa_offset 4
 9213              	 .cfi_offset 7,-4
 9214 0002 83B0     	 sub sp,sp,#12
 9215              	.LCFI386:
 9216              	 .cfi_def_cfa_offset 16
 9217 0004 00AF     	 add r7,sp,#0
 9218              	.LCFI387:
 9219              	 .cfi_def_cfa_register 7
 9220 0006 7860     	 str r0,[r7,#4]
3200:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return file->cursorOffset >= file->logicalSize;
 9221              	 .loc 1 3200 0
 9222 0008 7B68     	 ldr r3,[r7,#4]
 9223 000a D3F80120 	 ldr r2,[r3,#1]
 9224 000e 7B68     	 ldr r3,[r7,#4]
 9225 0010 D3F80530 	 ldr r3,[r3,#5]
 9226 0014 9A42     	 cmp r2,r3
 9227 0016 2CBF     	 ite cs
 9228 0018 0123     	 movcs r3,#1
 9229 001a 0023     	 movcc r3,#0
 9230 001c DBB2     	 uxtb r3,r3
3201:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 9231              	 .loc 1 3201 0
 9232 001e 1846     	 mov r0,r3
 9233 0020 0C37     	 adds r7,r7,#12
 9234              	.LCFI388:
 9235              	 .cfi_def_cfa_offset 4
 9236 0022 BD46     	 mov sp,r7
 9237              	.LCFI389:
 9238              	 .cfi_def_cfa_register 13
 9239              	 
 9240 0024 5DF8047B 	 ldr r7,[sp],#4
 9241              	.LCFI390:
 9242              	 .cfi_restore 7
 9243              	 .cfi_def_cfa_offset 0
 9244 0028 7047     	 bx lr
 9245              	 .cfi_endproc
 9246              	.LFE606:
 9248 002a 00BF     	 .section .text.afatfs_fileOperationContinue,"ax",%progbits
 9249              	 .align 2
 9250              	 .thumb
 9251              	 .thumb_func
 9253              	afatfs_fileOperationContinue:
 9254              	.LFB607:
3202:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3203:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3204:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Continue any queued operations on the given file.
3205:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3206:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_fileOperationContinue(afatfsFile_t *file)
3207:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 9255              	 .loc 1 3207 0
 9256              	 .cfi_startproc
 9257              	 
 9258              	 
 9259 0000 80B5     	 push {r7,lr}
 9260              	.LCFI391:
 9261              	 .cfi_def_cfa_offset 8
 9262              	 .cfi_offset 7,-8
 9263              	 .cfi_offset 14,-4
 9264 0002 82B0     	 sub sp,sp,#8
 9265              	.LCFI392:
 9266              	 .cfi_def_cfa_offset 16
 9267 0004 00AF     	 add r7,sp,#0
 9268              	.LCFI393:
 9269              	 .cfi_def_cfa_register 7
 9270 0006 7860     	 str r0,[r7,#4]
3208:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file->type == AFATFS_FILE_TYPE_NONE)
 9271              	 .loc 1 3208 0
 9272 0008 7B68     	 ldr r3,[r7,#4]
 9273 000a 1B78     	 ldrb r3,[r3]
 9274 000c 002B     	 cmp r3,#0
 9275 000e 00D1     	 bne .L621
3209:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return;
 9276              	 .loc 1 3209 0
 9277 0010 3DE0     	 b .L620
 9278              	.L621:
3210:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3211:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (file->operation.operation) {
 9279              	 .loc 1 3211 0
 9280 0012 7B68     	 ldr r3,[r7,#4]
 9281 0014 93F82330 	 ldrb r3,[r3,#35]
 9282 0018 092B     	 cmp r3,#9
 9283 001a 38D8     	 bhi .L620
 9284 001c 01A2     	 adr r2,.L624
 9285 001e 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 9286 0022 00BF     	 .p2align 2
 9287              	.L624:
 9288 0024 8F000000 	 .word .L620+1
 9289 0028 4D000000 	 .word .L625+1
 9290 002c 55000000 	 .word .L626+1
 9291 0030 5D000000 	 .word .L627+1
 9292 0034 6D000000 	 .word .L628+1
 9293 0038 65000000 	 .word .L629+1
 9294 003c 77000000 	 .word .L630+1
 9295 0040 8F000000 	 .word .L620+1
 9296 0044 7F000000 	 .word .L632+1
 9297 0048 87000000 	 .word .L633+1
 9298              	 .p2align 1
 9299              	.L625:
3212:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_CREATE_FILE:
3213:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_createFileContinue(file);
 9300              	 .loc 1 3213 0
 9301 004c 7868     	 ldr r0,[r7,#4]
 9302 004e FFF7FEFF 	 bl afatfs_createFileContinue
3214:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9303              	 .loc 1 3214 0
 9304 0052 1CE0     	 b .L620
 9305              	.L626:
3215:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_SEEK:
3216:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_fseekInternalContinue(file);
 9306              	 .loc 1 3216 0
 9307 0054 7868     	 ldr r0,[r7,#4]
 9308 0056 FFF7FEFF 	 bl afatfs_fseekInternalContinue
3217:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9309              	 .loc 1 3217 0
 9310 005a 18E0     	 b .L620
 9311              	.L627:
3218:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_CLOSE:
3219:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_fcloseContinue(file);
 9312              	 .loc 1 3219 0
 9313 005c 7868     	 ldr r0,[r7,#4]
 9314 005e FFF7FEFF 	 bl afatfs_fcloseContinue
3220:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9315              	 .loc 1 3220 0
 9316 0062 14E0     	 b .L620
 9317              	.L629:
3221:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_UNLINK:
3222:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****              afatfs_funlinkContinue(file);
 9318              	 .loc 1 3222 0
 9319 0064 7868     	 ldr r0,[r7,#4]
 9320 0066 FFF7FEFF 	 bl afatfs_funlinkContinue
3223:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9321              	 .loc 1 3223 0
 9322 006a 10E0     	 b .L620
 9323              	.L628:
3224:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_TRUNCATE:
3225:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_ftruncateContinue(file, false);
 9324              	 .loc 1 3225 0
 9325 006c 7868     	 ldr r0,[r7,#4]
 9326 006e 0021     	 movs r1,#0
 9327 0070 FFF7FEFF 	 bl afatfs_ftruncateContinue
3226:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9328              	 .loc 1 3226 0
 9329 0074 0BE0     	 b .L620
 9330              	.L630:
3227:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
3228:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_APPEND_SUPERCLUSTER:
3229:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_appendSuperclusterContinue(file);
 9331              	 .loc 1 3229 0
 9332 0076 7868     	 ldr r0,[r7,#4]
 9333 0078 FFF7FEFF 	 bl afatfs_appendSuperclusterContinue
3230:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9334              	 .loc 1 3230 0
 9335 007c 07E0     	 b .L620
 9336              	.L632:
3231:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_LOCKED:
3232:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             ;
3233:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
3234:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3235:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_APPEND_FREE_CLUSTER:
3236:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_appendRegularFreeClusterContinue(file);
 9337              	 .loc 1 3236 0
 9338 007e 7868     	 ldr r0,[r7,#4]
 9339 0080 FFF7FEFF 	 bl afatfs_appendRegularFreeClusterContinue
3237:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9340              	 .loc 1 3237 0
 9341 0084 03E0     	 b .L620
 9342              	.L633:
3238:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_EXTEND_SUBDIRECTORY:
3239:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_extendSubdirectoryContinue(file);
 9343              	 .loc 1 3239 0
 9344 0086 7868     	 ldr r0,[r7,#4]
 9345 0088 FFF7FEFF 	 bl afatfs_extendSubdirectoryContinue
3240:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9346              	 .loc 1 3240 0
 9347 008c 00BF     	 nop
 9348              	.L620:
3241:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_FILE_OPERATION_NONE:
3242:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             ;
3243:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
3244:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3245:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 9349              	 .loc 1 3245 0
 9350 008e 0837     	 adds r7,r7,#8
 9351              	.LCFI394:
 9352              	 .cfi_def_cfa_offset 8
 9353 0090 BD46     	 mov sp,r7
 9354              	.LCFI395:
 9355              	 .cfi_def_cfa_register 13
 9356              	 
 9357 0092 80BD     	 pop {r7,pc}
 9358              	 .cfi_endproc
 9359              	.LFE607:
 9361              	 .section .text.afatfs_fileOperationsPoll,"ax",%progbits
 9362              	 .align 2
 9363              	 .thumb
 9364              	 .thumb_func
 9366              	afatfs_fileOperationsPoll:
 9367              	.LFB608:
3246:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3247:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3248:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Check files for pending operations and execute them.
3249:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3250:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_fileOperationsPoll(void)
3251:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 9368              	 .loc 1 3251 0
 9369              	 .cfi_startproc
 9370              	 
 9371              	 
 9372 0000 80B5     	 push {r7,lr}
 9373              	.LCFI396:
 9374              	 .cfi_def_cfa_offset 8
 9375              	 .cfi_offset 7,-8
 9376              	 .cfi_offset 14,-4
 9377 0002 82B0     	 sub sp,sp,#8
 9378              	.LCFI397:
 9379              	 .cfi_def_cfa_offset 16
 9380 0004 00AF     	 add r7,sp,#0
 9381              	.LCFI398:
 9382              	 .cfi_def_cfa_register 7
3252:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fileOperationContinue(&afatfs.currentDirectory);
 9383              	 .loc 1 3252 0
 9384 0006 0F48     	 ldr r0,.L637
 9385 0008 FFF7FEFF 	 bl afatfs_fileOperationContinue
 9386              	.LBB46:
3253:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3254:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_INTROSPECTIVE_LOGGING
3255:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fileOperationContinue(&afatfs.introSpecLog);
3256:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3257:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3258:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_MAX_OPEN_FILES; i++) {
 9387              	 .loc 1 3258 0
 9388 000c 0023     	 movs r3,#0
 9389 000e 7B60     	 str r3,[r7,#4]
 9390 0010 11E0     	 b .L635
 9391              	.L636:
3259:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_fileOperationContinue(&afatfs.openFiles[i]);
 9392              	 .loc 1 3259 0 discriminator 3
 9393 0012 7A68     	 ldr r2,[r7,#4]
 9394 0014 1346     	 mov r3,r2
 9395 0016 DB00     	 lsls r3,r3,#3
 9396 0018 9B1A     	 subs r3,r3,r2
 9397 001a DB00     	 lsls r3,r3,#3
 9398 001c 1344     	 add r3,r3,r2
 9399 001e 03F58453 	 add r3,r3,#4224
 9400 0022 1833     	 adds r3,r3,#24
 9401 0024 084A     	 ldr r2,.L637+4
 9402 0026 1344     	 add r3,r3,r2
 9403 0028 0533     	 adds r3,r3,#5
 9404 002a 1846     	 mov r0,r3
 9405 002c FFF7FEFF 	 bl afatfs_fileOperationContinue
3258:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_fileOperationContinue(&afatfs.openFiles[i]);
 9406              	 .loc 1 3258 0 discriminator 3
 9407 0030 7B68     	 ldr r3,[r7,#4]
 9408 0032 0133     	 adds r3,r3,#1
 9409 0034 7B60     	 str r3,[r7,#4]
 9410              	.L635:
3258:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_fileOperationContinue(&afatfs.openFiles[i]);
 9411              	 .loc 1 3258 0 is_stmt 0 discriminator 1
 9412 0036 7B68     	 ldr r3,[r7,#4]
 9413 0038 022B     	 cmp r3,#2
 9414 003a EADD     	 ble .L636
 9415              	.LBE46:
3260:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3261:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 9416              	 .loc 1 3261 0 is_stmt 1
 9417 003c 0837     	 adds r7,r7,#8
 9418              	.LCFI399:
 9419              	 .cfi_def_cfa_offset 8
 9420 003e BD46     	 mov sp,r7
 9421              	.LCFI400:
 9422              	 .cfi_def_cfa_register 13
 9423              	 
 9424 0040 80BD     	 pop {r7,pc}
 9425              	.L638:
 9426 0042 00BF     	 .align 2
 9427              	.L637:
 9428 0044 83110000 	 .word afatfs+4483
 9429 0048 00000000 	 .word afatfs
 9430              	 .cfi_endproc
 9431              	.LFE608:
 9433              	 .section .text.afatfs_getContiguousFreeSpace,"ax",%progbits
 9434              	 .align 2
 9435              	 .global afatfs_getContiguousFreeSpace
 9436              	 .thumb
 9437              	 .thumb_func
 9439              	afatfs_getContiguousFreeSpace:
 9440              	.LFB609:
3262:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3263:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
3264:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3265:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3266:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Return the available size of the freefile (used for files in contiguous append mode)
3267:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3268:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** uint32_t afatfs_getContiguousFreeSpace(void)
3269:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 9441              	 .loc 1 3269 0
 9442              	 .cfi_startproc
 9443              	 
 9444              	 
 9445              	 
 9446 0000 80B4     	 push {r7}
 9447              	.LCFI401:
 9448              	 .cfi_def_cfa_offset 4
 9449              	 .cfi_offset 7,-4
 9450 0002 00AF     	 add r7,sp,#0
 9451              	.LCFI402:
 9452              	 .cfi_def_cfa_register 7
3270:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.freeFile.logicalSize;
 9453              	 .loc 1 3270 0
 9454 0004 044B     	 ldr r3,.L641
 9455 0006 03F58A53 	 add r3,r3,#4416
 9456 000a 0D33     	 adds r3,r3,#13
 9457 000c 1B68     	 ldr r3,[r3]
3271:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 9458              	 .loc 1 3271 0
 9459 000e 1846     	 mov r0,r3
 9460 0010 BD46     	 mov sp,r7
 9461              	.LCFI403:
 9462              	 .cfi_def_cfa_register 13
 9463              	 
 9464 0012 5DF8047B 	 ldr r7,[sp],#4
 9465              	.LCFI404:
 9466              	 .cfi_restore 7
 9467              	 .cfi_def_cfa_offset 0
 9468 0016 7047     	 bx lr
 9469              	.L642:
 9470              	 .align 2
 9471              	.L641:
 9472 0018 00000000 	 .word afatfs
 9473              	 .cfi_endproc
 9474              	.LFE609:
 9476              	 .section .text.afatfs_findLargestContiguousFreeBlockBegin,"ax",%progbits
 9477              	 .align 2
 9478              	 .thumb
 9479              	 .thumb_func
 9481              	afatfs_findLargestContiguousFreeBlockBegin:
 9482              	.LFB610:
3272:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3273:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3274:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Call to set up the initial state for finding the largest block of free space on the device whose
3275:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * sectors are themselves entirely free space (so the free space has dedicated FAT sectors of its o
3276:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3277:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_findLargestContiguousFreeBlockBegin(void)
3278:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 9483              	 .loc 1 3278 0
 9484              	 .cfi_startproc
 9485              	 
 9486              	 
 9487 0000 80B5     	 push {r7,lr}
 9488              	.LCFI405:
 9489              	 .cfi_def_cfa_offset 8
 9490              	 .cfi_offset 7,-8
 9491              	 .cfi_offset 14,-4
 9492 0002 00AF     	 add r7,sp,#0
 9493              	.LCFI406:
 9494              	 .cfi_def_cfa_register 7
3279:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // The first FAT sector has two reserved entries, so it isn't eligible for this search. Start a
3280:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.initState.freeSpaceSearch.candidateStart = afatfs_fatEntriesPerSector();
 9495              	 .loc 1 3280 0
 9496 0004 FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 9497 0008 0246     	 mov r2,r0
 9498 000a 0F4B     	 ldr r3,.L644
 9499 000c C3F80320 	 str r2,[r3,#3]
3281:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.initState.freeSpaceSearch.candidateEnd = afatfs.initState.freeSpaceSearch.candidateStart
 9500              	 .loc 1 3281 0
 9501 0010 0D4B     	 ldr r3,.L644
 9502 0012 D3F80330 	 ldr r3,[r3,#3]
 9503 0016 0C4A     	 ldr r2,.L644
 9504 0018 C2F80730 	 str r3,[r2,#7]
3282:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.initState.freeSpaceSearch.bestGapStart = 0;
 9505              	 .loc 1 3282 0
 9506 001c 0A4B     	 ldr r3,.L644
 9507 001e 0022     	 movs r2,#0
 9508 0020 DA72     	 strb r2,[r3,#11]
 9509 0022 0022     	 movs r2,#0
 9510 0024 1A73     	 strb r2,[r3,#12]
 9511 0026 0022     	 movs r2,#0
 9512 0028 5A73     	 strb r2,[r3,#13]
 9513 002a 0022     	 movs r2,#0
 9514 002c 9A73     	 strb r2,[r3,#14]
3283:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.initState.freeSpaceSearch.bestGapLength = 0;
 9515              	 .loc 1 3283 0
 9516 002e 064B     	 ldr r3,.L644
 9517 0030 0022     	 movs r2,#0
 9518 0032 DA73     	 strb r2,[r3,#15]
 9519 0034 0022     	 movs r2,#0
 9520 0036 1A74     	 strb r2,[r3,#16]
 9521 0038 0022     	 movs r2,#0
 9522 003a 5A74     	 strb r2,[r3,#17]
 9523 003c 0022     	 movs r2,#0
 9524 003e 9A74     	 strb r2,[r3,#18]
3284:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.initState.freeSpaceSearch.phase = AFATFS_FREE_SPACE_SEARCH_PHASE_FIND_HOLE;
 9525              	 .loc 1 3284 0
 9526 0040 014B     	 ldr r3,.L644
 9527 0042 0022     	 movs r2,#0
 9528 0044 DA74     	 strb r2,[r3,#19]
3285:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 9529              	 .loc 1 3285 0
 9530 0046 80BD     	 pop {r7,pc}
 9531              	.L645:
 9532              	 .align 2
 9533              	.L644:
 9534 0048 00000000 	 .word afatfs
 9535              	 .cfi_endproc
 9536              	.LFE610:
 9538              	 .section .text.afatfs_findLargestContiguousFreeBlockContinue,"ax",%progbits
 9539              	 .align 2
 9540              	 .thumb
 9541              	 .thumb_func
 9543              	afatfs_findLargestContiguousFreeBlockContinue:
 9544              	.LFB611:
3286:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3287:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3288:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Call to continue the search for the largest contiguous block of free space on the device.
3289:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
3290:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Returns:
3291:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_IN_PROGRESS - SD card is busy, call again later to resume
3292:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_SUCCESS - When the search has finished and afatfs.initState.freeSpaceSearch
3293:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *     AFATFS_OPERATION_FAILURE - When a read error occured
3294:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3295:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static afatfsOperationStatus_e afatfs_findLargestContiguousFreeBlockContinue(void)
3296:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 9545              	 .loc 1 3296 0
 9546              	 .cfi_startproc
 9547              	 
 9548              	 
 9549 0000 B0B5     	 push {r4,r5,r7,lr}
 9550              	.LCFI407:
 9551              	 .cfi_def_cfa_offset 16
 9552              	 .cfi_offset 4,-16
 9553              	 .cfi_offset 5,-12
 9554              	 .cfi_offset 7,-8
 9555              	 .cfi_offset 14,-4
 9556 0002 88B0     	 sub sp,sp,#32
 9557              	.LCFI408:
 9558              	 .cfi_def_cfa_offset 48
 9559 0004 00AF     	 add r7,sp,#0
 9560              	.LCFI409:
 9561              	 .cfi_def_cfa_register 7
3297:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFreeSpaceSearch_t *opState = &afatfs.initState.freeSpaceSearch;
 9562              	 .loc 1 3297 0
 9563 0006 544B     	 ldr r3,.L668
 9564 0008 FB61     	 str r3,[r7,#28]
3298:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t fatEntriesPerSector = afatfs_fatEntriesPerSector();
 9565              	 .loc 1 3298 0
 9566 000a FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 9567 000e B861     	 str r0,[r7,#24]
 9568              	.L665:
3299:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t candidateGapLength, searchLimit;
3300:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsFindClusterStatus_e searchStatus;
3301:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3302:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     while (1) {
3303:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         switch (opState->phase) {
 9569              	 .loc 1 3303 0
 9570 0010 FB69     	 ldr r3,[r7,#28]
 9571 0012 1B7C     	 ldrb r3,[r3,#16]
 9572 0014 002B     	 cmp r3,#0
 9573 0016 02D0     	 beq .L648
 9574 0018 012B     	 cmp r3,#1
 9575 001a 2BD0     	 beq .L649
 9576 001c 97E0     	 b .L647
 9577              	.L648:
3304:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_FREE_SPACE_SEARCH_PHASE_FIND_HOLE:
3305:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Find the first free cluster
3306:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 switch (afatfs_findClusterWithCondition(CLUSTER_SEARCH_FREE_AT_BEGINNING_OF_FAT_SEC
 9578              	 .loc 1 3306 0
 9579 001e FA69     	 ldr r2,[r7,#28]
 9580 0020 4E4B     	 ldr r3,.L668+4
 9581 0022 03F58E53 	 add r3,r3,#4544
 9582 0026 0833     	 adds r3,r3,#8
 9583 0028 1B68     	 ldr r3,[r3]
 9584 002a 0233     	 adds r3,r3,#2
 9585 002c 0020     	 movs r0,#0
 9586 002e 1146     	 mov r1,r2
 9587 0030 1A46     	 mov r2,r3
 9588 0032 FFF7FEFF 	 bl afatfs_findClusterWithCondition
 9589 0036 0346     	 mov r3,r0
 9590 0038 032B     	 cmp r3,#3
 9591 003a 00F28580 	 bhi .L666
 9592 003e 01A2     	 adr r2,.L652
 9593 0040 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 9594              	 .p2align 2
 9595              	.L652:
 9596 0044 71000000 	 .word .L651+1
 9597 0048 55000000 	 .word .L653+1
 9598 004c 69000000 	 .word .L654+1
 9599 0050 6D000000 	 .word .L655+1
 9600              	 .p2align 1
 9601              	.L653:
3307:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_FIND_CLUSTER_FOUND:
3308:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         opState->candidateEnd = opState->candidateStart + 1;
 9602              	 .loc 1 3308 0
 9603 0054 FB69     	 ldr r3,[r7,#28]
 9604 0056 1B68     	 ldr r3,[r3]
 9605 0058 5A1C     	 adds r2,r3,#1
 9606 005a FB69     	 ldr r3,[r7,#28]
 9607 005c 5A60     	 str r2,[r3,#4]
3309:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         opState->phase = AFATFS_FREE_SPACE_SEARCH_PHASE_GROW_HOLE;
 9608              	 .loc 1 3309 0
 9609 005e FB69     	 ldr r3,[r7,#28]
 9610 0060 0122     	 movs r2,#1
 9611 0062 1A74     	 strb r2,[r3,#16]
3310:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     break;
 9612              	 .loc 1 3310 0
 9613 0064 00BF     	 nop
3311:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3312:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_FIND_CLUSTER_FATAL:
3313:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // Some sort of read error occured
3314:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         return AFATFS_OPERATION_FAILURE;
3315:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3316:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_FIND_CLUSTER_NOT_FOUND:
3317:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // We finished searching the volume (didn't find any more holes to examine)
3318:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         return AFATFS_OPERATION_SUCCESS;
3319:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3320:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_FIND_CLUSTER_IN_PROGRESS:
3321:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         return AFATFS_OPERATION_IN_PROGRESS;
3322:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
3323:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 9614              	 .loc 1 3323 0
 9615 0066 6FE0     	 b .L666
 9616              	.L654:
3314:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 9617              	 .loc 1 3314 0
 9618 0068 0223     	 movs r3,#2
 9619 006a 71E0     	 b .L656
 9620              	.L655:
3318:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 9621              	 .loc 1 3318 0
 9622 006c 0123     	 movs r3,#1
 9623 006e 6FE0     	 b .L656
 9624              	.L651:
3321:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
 9625              	 .loc 1 3321 0
 9626 0070 0023     	 movs r3,#0
 9627 0072 6DE0     	 b .L656
 9628              	.L649:
 9629              	.LBB47:
3324:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_FREE_SPACE_SEARCH_PHASE_GROW_HOLE:
3325:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Find the first used cluster after the beginning of the hole (that signals the en
3326:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3327:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // Don't search beyond the end of the volume, or such that the freefile size would 
3328:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 searchLimit = MIN((uint64_t) opState->candidateStart + FAT_MAXIMUM_FILESIZE / afatf
 9630              	 .loc 1 3328 0
 9631 0074 FB69     	 ldr r3,[r7,#28]
 9632 0076 1B68     	 ldr r3,[r3]
 9633 0078 1C46     	 mov r4,r3
 9634 007a 4FF00005 	 mov r5,#0
 9635 007e FFF7FEFF 	 bl afatfs_clusterSize
 9636 0082 0246     	 mov r2,r0
 9637 0084 4FF0FF33 	 mov r3,#-1
 9638 0088 B3FBF2F3 	 udiv r3,r3,r2
 9639 008c 1A46     	 mov r2,r3
 9640 008e 4FF00003 	 mov r3,#0
 9641 0092 1219     	 adds r2,r2,r4
 9642 0094 43EB0503 	 adc r3,r3,r5
 9643 0098 C7E90423 	 strd r2,[r7,#16]
 9644 009c 2F4B     	 ldr r3,.L668+4
 9645 009e 03F58E53 	 add r3,r3,#4544
 9646 00a2 0833     	 adds r3,r3,#8
 9647 00a4 1B68     	 ldr r3,[r3]
 9648 00a6 0233     	 adds r3,r3,#2
 9649 00a8 FB60     	 str r3,[r7,#12]
 9650 00aa FB68     	 ldr r3,[r7,#12]
 9651 00ac 1846     	 mov r0,r3
 9652 00ae 4FF00001 	 mov r1,#0
 9653 00b2 D7E90423 	 ldrd r2,[r7,#16]
 9654 00b6 8B42     	 cmp r3,r1
 9655 00b8 08BF     	 it eq
 9656 00ba 8242     	 cmpeq r2,r0
 9657 00bc 01D2     	 bcs .L657
 9658 00be 1046     	 mov r0,r2
 9659 00c0 1946     	 mov r1,r3
 9660              	.L657:
 9661              	.LBE47:
 9662 00c2 0346     	 mov r3,r0
 9663 00c4 BB60     	 str r3,[r7,#8]
3329:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3330:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 searchStatus = afatfs_findClusterWithCondition(CLUSTER_SEARCH_OCCUPIED, &opState->c
 9664              	 .loc 1 3330 0
 9665 00c6 FB69     	 ldr r3,[r7,#28]
 9666 00c8 0433     	 adds r3,r3,#4
 9667 00ca 0220     	 movs r0,#2
 9668 00cc 1946     	 mov r1,r3
 9669 00ce BA68     	 ldr r2,[r7,#8]
 9670 00d0 FFF7FEFF 	 bl afatfs_findClusterWithCondition
 9671 00d4 0346     	 mov r3,r0
 9672 00d6 FB71     	 strb r3,[r7,#7]
3331:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3332:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 switch (searchStatus) {
 9673              	 .loc 1 3332 0
 9674 00d8 FB79     	 ldrb r3,[r7,#7]
 9675 00da 032B     	 cmp r3,#3
 9676 00dc 36D8     	 bhi .L667
 9677 00de 01A2     	 adr r2,.L660
 9678 00e0 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 9679              	 .p2align 2
 9680              	.L660:
 9681 00e4 45010000 	 .word .L659+1
 9682 00e8 F5000000 	 .word .L661+1
 9683 00ec 41010000 	 .word .L662+1
 9684 00f0 F5000000 	 .word .L661+1
 9685              	 .p2align 1
 9686              	.L661:
3333:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_FIND_CLUSTER_NOT_FOUND:
3334:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_FIND_CLUSTER_FOUND:
3335:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // Either we found a used sector, or the search reached the end of the volu
3336:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         candidateGapLength = opState->candidateEnd - opState->candidateStart;
 9687              	 .loc 1 3336 0
 9688 00f4 FB69     	 ldr r3,[r7,#28]
 9689 00f6 5A68     	 ldr r2,[r3,#4]
 9690 00f8 FB69     	 ldr r3,[r7,#28]
 9691 00fa 1B68     	 ldr r3,[r3]
 9692 00fc D31A     	 subs r3,r2,r3
 9693 00fe 3B60     	 str r3,[r7]
3337:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3338:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         if (candidateGapLength > opState->bestGapLength) {
 9694              	 .loc 1 3338 0
 9695 0100 FB69     	 ldr r3,[r7,#28]
 9696 0102 DA68     	 ldr r2,[r3,#12]
 9697 0104 3B68     	 ldr r3,[r7]
 9698 0106 9A42     	 cmp r2,r3
 9699 0108 06D2     	 bcs .L663
3339:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             opState->bestGapStart = opState->candidateStart;
 9700              	 .loc 1 3339 0
 9701 010a FB69     	 ldr r3,[r7,#28]
 9702 010c 1A68     	 ldr r2,[r3]
 9703 010e FB69     	 ldr r3,[r7,#28]
 9704 0110 9A60     	 str r2,[r3,#8]
3340:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             opState->bestGapLength = candidateGapLength;
 9705              	 .loc 1 3340 0
 9706 0112 FB69     	 ldr r3,[r7,#28]
 9707 0114 3A68     	 ldr r2,[r7]
 9708 0116 DA60     	 str r2,[r3,#12]
 9709              	.L663:
3341:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         }
3342:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3343:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         if (searchStatus == AFATFS_FIND_CLUSTER_NOT_FOUND) {
 9710              	 .loc 1 3343 0
 9711 0118 FB79     	 ldrb r3,[r7,#7]
 9712 011a 032B     	 cmp r3,#3
 9713 011c 01D1     	 bne .L664
3344:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             // This is the best hole there can be
3345:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             return AFATFS_OPERATION_SUCCESS;
 9714              	 .loc 1 3345 0
 9715 011e 0123     	 movs r3,#1
 9716 0120 16E0     	 b .L656
 9717              	.L664:
3346:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         } else {
3347:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             // Start a new search for a new hole
3348:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             opState->candidateStart = roundUpTo(opState->candidateEnd + 1, fatEntri
 9718              	 .loc 1 3348 0
 9719 0122 FB69     	 ldr r3,[r7,#28]
 9720 0124 5B68     	 ldr r3,[r3,#4]
 9721 0126 0133     	 adds r3,r3,#1
 9722 0128 1846     	 mov r0,r3
 9723 012a B969     	 ldr r1,[r7,#24]
 9724 012c FFF7FEFF 	 bl roundUpTo
 9725 0130 0246     	 mov r2,r0
 9726 0132 FB69     	 ldr r3,[r7,#28]
 9727 0134 1A60     	 str r2,[r3]
3349:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                             opState->phase = AFATFS_FREE_SPACE_SEARCH_PHASE_FIND_HOLE;
 9728              	 .loc 1 3349 0
 9729 0136 FB69     	 ldr r3,[r7,#28]
 9730 0138 0022     	 movs r2,#0
 9731 013a 1A74     	 strb r2,[r3,#16]
3350:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         }
3351:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     break;
 9732              	 .loc 1 3351 0
 9733 013c 00BF     	 nop
3352:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3353:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_FIND_CLUSTER_FATAL:
3354:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // Some sort of read error occured
3355:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         return AFATFS_OPERATION_FAILURE;
3356:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3357:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     case AFATFS_FIND_CLUSTER_IN_PROGRESS:
3358:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         return AFATFS_OPERATION_IN_PROGRESS;
3359:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
3360:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 9734              	 .loc 1 3360 0
 9735 013e 05E0     	 b .L667
 9736              	.L662:
3355:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
 9737              	 .loc 1 3355 0
 9738 0140 0223     	 movs r3,#2
 9739 0142 05E0     	 b .L656
 9740              	.L659:
3358:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
 9741              	 .loc 1 3358 0
 9742 0144 0023     	 movs r3,#0
 9743 0146 03E0     	 b .L656
 9744              	.L666:
3323:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_FREE_SPACE_SEARCH_PHASE_GROW_HOLE:
 9745              	 .loc 1 3323 0
 9746 0148 00BF     	 nop
 9747 014a 61E7     	 b .L665
 9748              	.L667:
 9749              	 .loc 1 3360 0
 9750 014c 00BF     	 nop
 9751              	.L647:
3361:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3362:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
 9752              	 .loc 1 3362 0 discriminator 1
 9753 014e 5FE7     	 b .L665
 9754              	.L656:
3363:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 9755              	 .loc 1 3363 0
 9756 0150 1846     	 mov r0,r3
 9757 0152 2037     	 adds r7,r7,#32
 9758              	.LCFI410:
 9759              	 .cfi_def_cfa_offset 16
 9760 0154 BD46     	 mov sp,r7
 9761              	.LCFI411:
 9762              	 .cfi_def_cfa_register 13
 9763              	 
 9764 0156 B0BD     	 pop {r4,r5,r7,pc}
 9765              	.L669:
 9766              	 .align 2
 9767              	.L668:
 9768 0158 03000000 	 .word afatfs+3
 9769 015c 00000000 	 .word afatfs
 9770              	 .cfi_endproc
 9771              	.LFE611:
 9773              	 .section .text.afatfs_freeFileCreated,"ax",%progbits
 9774              	 .align 2
 9775              	 .thumb
 9776              	 .thumb_func
 9778              	afatfs_freeFileCreated:
 9779              	.LFB612:
3364:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3365:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_freeFileCreated(afatfsFile_t *file)
3366:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 9780              	 .loc 1 3366 0
 9781              	 .cfi_startproc
 9782              	 
 9783              	 
 9784 0000 80B5     	 push {r7,lr}
 9785              	.LCFI412:
 9786              	 .cfi_def_cfa_offset 8
 9787              	 .cfi_offset 7,-8
 9788              	 .cfi_offset 14,-4
 9789 0002 82B0     	 sub sp,sp,#8
 9790              	.LCFI413:
 9791              	 .cfi_def_cfa_offset 16
 9792 0004 00AF     	 add r7,sp,#0
 9793              	.LCFI414:
 9794              	 .cfi_def_cfa_register 7
 9795 0006 7860     	 str r0,[r7,#4]
3367:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file) {
 9796              	 .loc 1 3367 0
 9797 0008 7B68     	 ldr r3,[r7,#4]
 9798 000a 002B     	 cmp r3,#0
 9799 000c 0ED0     	 beq .L671
3368:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Did the freefile already have allocated space?
3369:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (file->logicalSize > 0) {
 9800              	 .loc 1 3369 0
 9801 000e 7B68     	 ldr r3,[r7,#4]
 9802 0010 D3F80530 	 ldr r3,[r3,#5]
 9803 0014 002B     	 cmp r3,#0
 9804 0016 03D0     	 beq .L672
3370:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // We've completed freefile init, move on to the next init phase
3371:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.initPhase = AFATFS_INITIALIZATION_FREEFILE_LAST + 1;
 9805              	 .loc 1 3371 0
 9806 0018 0A4B     	 ldr r3,.L675
 9807 001a 0722     	 movs r2,#7
 9808 001c 9A70     	 strb r2,[r3,#2]
 9809 001e 0EE0     	 b .L670
 9810              	.L672:
3372:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         } else {
3373:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             // Allocate clusters for the freefile
3374:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_findLargestContiguousFreeBlockBegin();
 9811              	 .loc 1 3374 0
 9812 0020 FFF7FEFF 	 bl afatfs_findLargestContiguousFreeBlockBegin
3375:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.initPhase = AFATFS_INITIALIZATION_FREEFILE_FAT_SEARCH;
 9813              	 .loc 1 3375 0
 9814 0024 074B     	 ldr r3,.L675
 9815 0026 0422     	 movs r2,#4
 9816 0028 9A70     	 strb r2,[r3,#2]
 9817 002a 08E0     	 b .L670
 9818              	.L671:
3376:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3377:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
3378:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         // Failed to allocate an entry
3379:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.lastError = AFATFS_ERROR_GENERIC;
 9819              	 .loc 1 3379 0
 9820 002c 054B     	 ldr r3,.L675
 9821 002e 03F58C53 	 add r3,r3,#4480
 9822 0032 0133     	 adds r3,r3,#1
 9823 0034 0122     	 movs r2,#1
 9824 0036 1A70     	 strb r2,[r3]
3380:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.filesystemState = AFATFS_FILESYSTEM_STATE_FATAL;
 9825              	 .loc 1 3380 0
 9826 0038 024B     	 ldr r3,.L675
 9827 003a 0122     	 movs r2,#1
 9828 003c 5A70     	 strb r2,[r3,#1]
 9829              	.L670:
3381:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3382:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 9830              	 .loc 1 3382 0
 9831 003e 0837     	 adds r7,r7,#8
 9832              	.LCFI415:
 9833              	 .cfi_def_cfa_offset 8
 9834 0040 BD46     	 mov sp,r7
 9835              	.LCFI416:
 9836              	 .cfi_def_cfa_register 13
 9837              	 
 9838 0042 80BD     	 pop {r7,pc}
 9839              	.L676:
 9840              	 .align 2
 9841              	.L675:
 9842 0044 00000000 	 .word afatfs
 9843              	 .cfi_endproc
 9844              	.LFE612:
 9846              	 .section .rodata
 9847 0002 0000     	 .align 2
 9848              	.LC1:
 9849 0004 46524545 	 .ascii "FREESPAC.E\000"
 9849      53504143 
 9849      2E4500
 9850 000f 00       	 .section .text.afatfs_initContinue,"ax",%progbits
 9851              	 .align 2
 9852              	 .thumb
 9853              	 .thumb_func
 9855              	afatfs_initContinue:
 9856              	.LFB613:
3383:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3384:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3385:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3386:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_INTROSPECTIVE_LOGGING
3387:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3388:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_introspecLogCreated(afatfsFile_t *file)
3389:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
3390:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (file) {
3391:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.initPhase++;
3392:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     } else {
3393:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.lastError = AFATFS_ERROR_GENERIC;
3394:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs.filesystemState = AFATFS_FILESYSTEM_STATE_FATAL;
3395:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3396:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
3397:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3398:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3399:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3400:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** static void afatfs_initContinue(void)
3401:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 9857              	 .loc 1 3401 0
 9858              	 .cfi_startproc
 9859              	 
 9860              	 
 9861 0000 90B5     	 push {r4,r7,lr}
 9862              	.LCFI417:
 9863              	 .cfi_def_cfa_offset 12
 9864              	 .cfi_offset 4,-12
 9865              	 .cfi_offset 7,-8
 9866              	 .cfi_offset 14,-4
 9867 0002 87B0     	 sub sp,sp,#28
 9868              	.LCFI418:
 9869              	 .cfi_def_cfa_offset 40
 9870 0004 02AF     	 add r7,sp,#8
 9871              	.LCFI419:
 9872              	 .cfi_def_cfa 7,32
 9873              	.L678:
3402:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
3403:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfsOperationStatus_e status;
3404:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3405:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3406:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t *sector;
3407:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3408:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     doMore:
3409:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3410:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     switch (afatfs.initPhase) {
 9874              	 .loc 1 3410 0
 9875 0006 934B     	 ldr r3,.L699
 9876 0008 9B78     	 ldrb r3,[r3,#2]
 9877 000a 072B     	 cmp r3,#7
 9878 000c 00F21E81 	 bhi .L677
 9879 0010 01A2     	 adr r2,.L681
 9880 0012 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 9881 0016 00BF     	 .p2align 2
 9882              	.L681:
 9883 0018 39000000 	 .word .L680+1
 9884 001c 79000000 	 .word .L682+1
 9885 0020 CF000000 	 .word .L683+1
 9886 0024 E7000000 	 .word .L684+1
 9887 0028 EF000000 	 .word .L685+1
 9888 002c CB010000 	 .word .L686+1
 9889 0030 09020000 	 .word .L687+1
 9890 0034 45020000 	 .word .L688+1
 9891              	 .p2align 1
 9892              	.L680:
3411:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_READ_MBR:
3412:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs_cacheSector(0, &sector, AFATFS_CACHE_READ | AFATFS_CACHE_DISCARDABLE, 0) == 
 9893              	 .loc 1 3412 0
 9894 0038 3B46     	 mov r3,r7
 9895 003a 0020     	 movs r0,#0
 9896 003c 1946     	 mov r1,r3
 9897 003e 0922     	 movs r2,#9
 9898 0040 0023     	 movs r3,#0
 9899 0042 FFF7FEFF 	 bl afatfs_cacheSector
 9900 0046 0346     	 mov r3,r0
 9901 0048 012B     	 cmp r3,#1
 9902 004a 14D1     	 bne .L689
3413:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (afatfs_parseMBR(sector)) {
 9903              	 .loc 1 3413 0
 9904 004c 3B68     	 ldr r3,[r7]
 9905 004e 1846     	 mov r0,r3
 9906 0050 FFF7FEFF 	 bl afatfs_parseMBR
 9907 0054 0346     	 mov r3,r0
 9908 0056 002B     	 cmp r3,#0
 9909 0058 03D0     	 beq .L690
3414:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.initPhase = AFATFS_INITIALIZATION_READ_VOLUME_ID;
 9910              	 .loc 1 3414 0
 9911 005a 7E4B     	 ldr r3,.L699
 9912 005c 0122     	 movs r2,#1
 9913 005e 9A70     	 strb r2,[r3,#2]
3415:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     goto doMore;
 9914              	 .loc 1 3415 0
 9915 0060 D1E7     	 b .L678
 9916              	.L690:
3416:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 } else {
3417:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.lastError = AFATFS_ERROR_BAD_MBR;
 9917              	 .loc 1 3417 0
 9918 0062 7C4B     	 ldr r3,.L699
 9919 0064 03F58C53 	 add r3,r3,#4480
 9920 0068 0133     	 adds r3,r3,#1
 9921 006a 0222     	 movs r2,#2
 9922 006c 1A70     	 strb r2,[r3]
3418:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.filesystemState = AFATFS_FILESYSTEM_STATE_FATAL;
 9923              	 .loc 1 3418 0
 9924 006e 794B     	 ldr r3,.L699
 9925 0070 0122     	 movs r2,#1
 9926 0072 5A70     	 strb r2,[r3,#1]
3419:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
3420:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
3421:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9927              	 .loc 1 3421 0
 9928 0074 EAE0     	 b .L677
 9929              	.L689:
 9930 0076 E9E0     	 b .L677
 9931              	.L682:
3422:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_READ_VOLUME_ID:
3423:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs_cacheSector(afatfs.partitionStartSector, &sector, AFATFS_CACHE_READ | AFATFS
 9932              	 .loc 1 3423 0
 9933 0078 764B     	 ldr r3,.L699
 9934 007a 03F58D53 	 add r3,r3,#4512
 9935 007e 1C33     	 adds r3,r3,#28
 9936 0080 1A68     	 ldr r2,[r3]
 9937 0082 3B46     	 mov r3,r7
 9938 0084 1046     	 mov r0,r2
 9939 0086 1946     	 mov r1,r3
 9940 0088 0922     	 movs r2,#9
 9941 008a 0023     	 movs r3,#0
 9942 008c FFF7FEFF 	 bl afatfs_cacheSector
 9943 0090 0346     	 mov r3,r0
 9944 0092 012B     	 cmp r3,#1
 9945 0094 1AD1     	 bne .L691
3424:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (afatfs_parseVolumeID(sector)) {
 9946              	 .loc 1 3424 0
 9947 0096 3B68     	 ldr r3,[r7]
 9948 0098 1846     	 mov r0,r3
 9949 009a FFF7FEFF 	 bl afatfs_parseVolumeID
 9950 009e 0346     	 mov r3,r0
 9951 00a0 002B     	 cmp r3,#0
 9952 00a2 09D0     	 beq .L692
3425:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     // Open the root directory
3426:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs_chdir(NULL);
 9953              	 .loc 1 3426 0
 9954 00a4 0020     	 movs r0,#0
 9955 00a6 FFF7FEFF 	 bl afatfs_chdir
3427:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3428:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.initPhase++;
 9956              	 .loc 1 3428 0
 9957 00aa 6A4B     	 ldr r3,.L699
 9958 00ac 9B78     	 ldrb r3,[r3,#2]
 9959 00ae 0133     	 adds r3,r3,#1
 9960 00b0 DAB2     	 uxtb r2,r3
 9961 00b2 684B     	 ldr r3,.L699
 9962 00b4 9A70     	 strb r2,[r3,#2]
 9963 00b6 09E0     	 b .L691
 9964              	.L692:
3429:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 } else {
3430:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.lastError = AFATFS_ERROR_BAD_FILESYSTEM_HEADER;
 9965              	 .loc 1 3430 0
 9966 00b8 664B     	 ldr r3,.L699
 9967 00ba 03F58C53 	 add r3,r3,#4480
 9968 00be 0133     	 adds r3,r3,#1
 9969 00c0 0322     	 movs r2,#3
 9970 00c2 1A70     	 strb r2,[r3]
3431:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.filesystemState = AFATFS_FILESYSTEM_STATE_FATAL;
 9971              	 .loc 1 3431 0
 9972 00c4 634B     	 ldr r3,.L699
 9973 00c6 0122     	 movs r2,#1
 9974 00c8 5A70     	 strb r2,[r3,#1]
3432:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
3433:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
3434:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9975              	 .loc 1 3434 0
 9976 00ca BFE0     	 b .L677
 9977              	.L691:
 9978              	 .loc 1 3434 0 is_stmt 0 discriminator 2
 9979 00cc BEE0     	 b .L677
 9980              	.L683:
3435:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3436:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
3437:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_FREEFILE_CREATE:
3438:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.initPhase = AFATFS_INITIALIZATION_FREEFILE_CREATING;
 9981              	 .loc 1 3438 0 is_stmt 1
 9982 00ce 614B     	 ldr r3,.L699
 9983 00d0 0322     	 movs r2,#3
 9984 00d2 9A70     	 strb r2,[r3,#2]
3439:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3440:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_createFile(&afatfs.freeFile, AFATFS_FREESPACE_FILENAME, FAT_FILE_ATTRIBUTE_SYSTE
 9985              	 .loc 1 3440 0
 9986 00d4 604B     	 ldr r3,.L699+4
 9987 00d6 0093     	 str r3,[sp]
 9988 00d8 6048     	 ldr r0,.L699+8
 9989 00da 6149     	 ldr r1,.L699+12
 9990 00dc 0522     	 movs r2,#5
 9991 00de 3023     	 movs r3,#48
 9992 00e0 FFF7FEFF 	 bl afatfs_createFile
3441:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 AFATFS_FILE_MODE_CREATE | AFATFS_FILE_MODE_RETAIN_DIRECTORY, afatfs_freeFileCreated
3442:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9993              	 .loc 1 3442 0
 9994 00e4 B2E0     	 b .L677
 9995              	.L684:
3443:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_FREEFILE_CREATING:
3444:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_fileOperationContinue(&afatfs.freeFile);
 9996              	 .loc 1 3444 0
 9997 00e6 5D48     	 ldr r0,.L699+8
 9998 00e8 FFF7FEFF 	 bl afatfs_fileOperationContinue
3445:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 9999              	 .loc 1 3445 0
 10000 00ec AEE0     	 b .L677
 10001              	.L685:
3446:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_FREEFILE_FAT_SEARCH:
3447:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs_findLargestContiguousFreeBlockContinue() == AFATFS_OPERATION_SUCCESS) {
 10002              	 .loc 1 3447 0
 10003 00ee FFF7FEFF 	 bl afatfs_findLargestContiguousFreeBlockContinue
 10004 00f2 0346     	 mov r3,r0
 10005 00f4 012B     	 cmp r3,#1
 10006 00f6 67D1     	 bne .L693
3448:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // If the freefile ends up being empty then we only have to save its directory entr
3449:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.initPhase = AFATFS_INITIALIZATION_FREEFILE_SAVE_DIR_ENTRY;
 10007              	 .loc 1 3449 0
 10008 00f8 564B     	 ldr r3,.L699
 10009 00fa 0622     	 movs r2,#6
 10010 00fc 9A70     	 strb r2,[r3,#2]
3450:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3451:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 if (afatfs.initState.freeSpaceSearch.bestGapLength > AFATFS_FREEFILE_LEAVE_CLUSTERS
 10011              	 .loc 1 3451 0
 10012 00fe 554B     	 ldr r3,.L699
 10013 0100 D3F80F30 	 ldr r3,[r3,#15]
 10014 0104 652B     	 cmp r3,#101
 10015 0106 5ED9     	 bls .L694
3452:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.initState.freeSpaceSearch.bestGapLength -= AFATFS_FREEFILE_LEAVE_CLUSTER
 10016              	 .loc 1 3452 0
 10017 0108 524B     	 ldr r3,.L699
 10018 010a D3F80F30 	 ldr r3,[r3,#15]
 10019 010e 643B     	 subs r3,r3,#100
 10020 0110 504A     	 ldr r2,.L699
 10021 0112 C2F80F30 	 str r3,[r2,#15]
3453:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3454:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     /* So that the freefile never becomes empty, we want it to occupy a non-integer
3455:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                      * superclusters. So its size mod the number of clusters in a supercluster shou
3456:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                      */
3457:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     afatfs.initState.freeSpaceSearch.bestGapLength = ((afatfs.initState.freeSpaceSe
 10022              	 .loc 1 3457 0
 10023 0116 4F4B     	 ldr r3,.L699
 10024 0118 D3F80F30 	 ldr r3,[r3,#15]
 10025 011c 5C1E     	 subs r4,r3,#1
 10026 011e FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 10027 0122 0346     	 mov r3,r0
 10028 0124 5B42     	 negs r3,r3
 10029 0126 2340     	 ands r3,r3,r4
 10030 0128 0133     	 adds r3,r3,#1
 10031 012a 4A4A     	 ldr r2,.L699
 10032 012c C2F80F30 	 str r3,[r2,#15]
3458:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3459:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     // Anything useful left over?
3460:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     if (afatfs.initState.freeSpaceSearch.bestGapLength > afatfs_fatEntriesPerSector
 10033              	 .loc 1 3460 0
 10034 0130 484B     	 ldr r3,.L699
 10035 0132 D3F80F40 	 ldr r4,[r3,#15]
 10036 0136 FFF7FEFF 	 bl afatfs_fatEntriesPerSector
 10037 013a 0346     	 mov r3,r0
 10038 013c 9C42     	 cmp r4,r3
 10039 013e 42D9     	 bls .L694
 10040              	.LBB48:
3461:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         uint32_t startCluster = afatfs.initState.freeSpaceSearch.bestGapStart;
 10041              	 .loc 1 3461 0
 10042 0140 444B     	 ldr r3,.L699
 10043 0142 D3F80B30 	 ldr r3,[r3,#11]
 10044 0146 FB60     	 str r3,[r7,#12]
3462:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // Points 1-beyond the final cluster of the freefile:
3463:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         uint32_t endCluster = afatfs.initState.freeSpaceSearch.bestGapStart + afatf
 10045              	 .loc 1 3463 0
 10046 0148 424B     	 ldr r3,.L699
 10047 014a D3F80B20 	 ldr r2,[r3,#11]
 10048 014e 414B     	 ldr r3,.L699
 10049 0150 D3F80F30 	 ldr r3,[r3,#15]
 10050 0154 1344     	 add r3,r3,r2
 10051 0156 BB60     	 str r3,[r7,#8]
3464:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3465:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         afatfs_assert(endCluster < afatfs.numClusters + FAT_SMALLEST_LEGAL_CLUSTER_
 10052              	 .loc 1 3465 0
 10053 0158 3E4B     	 ldr r3,.L699
 10054 015a 03F58E53 	 add r3,r3,#4544
 10055 015e 0833     	 adds r3,r3,#8
 10056 0160 1B68     	 ldr r3,[r3]
 10057 0162 9A1C     	 adds r2,r3,#2
 10058 0164 BB68     	 ldr r3,[r7,#8]
 10059 0166 9A42     	 cmp r2,r3
 10060 0168 8CBF     	 ite hi
 10061 016a 0123     	 movhi r3,#1
 10062 016c 0023     	 movls r3,#0
 10063 016e DBB2     	 uxtb r3,r3
 10064 0170 1846     	 mov r0,r3
 10065 0172 FFF7FEFF 	 bl afatfs_assert
3466:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3467:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         afatfs.initState.freeSpaceFAT.startCluster = startCluster;
 10066              	 .loc 1 3467 0
 10067 0176 374A     	 ldr r2,.L699
 10068 0178 FB68     	 ldr r3,[r7,#12]
 10069 017a C2F80330 	 str r3,[r2,#3]
3468:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         afatfs.initState.freeSpaceFAT.endCluster = endCluster;
 10070              	 .loc 1 3468 0
 10071 017e 354A     	 ldr r2,.L699
 10072 0180 BB68     	 ldr r3,[r7,#8]
 10073 0182 C2F80730 	 str r3,[r2,#7]
3469:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3470:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         afatfs.freeFile.firstCluster = startCluster;
 10074              	 .loc 1 3470 0
 10075 0186 334B     	 ldr r3,.L699
 10076 0188 03F58B53 	 add r3,r3,#4448
 10077 018c 0733     	 adds r3,r3,#7
 10078 018e FA68     	 ldr r2,[r7,#12]
 10079 0190 1A60     	 str r2,[r3]
3471:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3472:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         afatfs.freeFile.logicalSize = afatfs.initState.freeSpaceSearch.bestGapLengt
 10080              	 .loc 1 3472 0
 10081 0192 304B     	 ldr r3,.L699
 10082 0194 D3F80F40 	 ldr r4,[r3,#15]
 10083 0198 FFF7FEFF 	 bl afatfs_clusterSize
 10084 019c 0346     	 mov r3,r0
 10085 019e 03FB04F2 	 mul r2,r3,r4
 10086 01a2 2C4B     	 ldr r3,.L699
 10087 01a4 03F58A53 	 add r3,r3,#4416
 10088 01a8 0D33     	 adds r3,r3,#13
 10089 01aa 1A60     	 str r2,[r3]
3473:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         afatfs.freeFile.physicalSize = afatfs.freeFile.logicalSize;
 10090              	 .loc 1 3473 0
 10091 01ac 294B     	 ldr r3,.L699
 10092 01ae 03F58A53 	 add r3,r3,#4416
 10093 01b2 0D33     	 adds r3,r3,#13
 10094 01b4 1A68     	 ldr r2,[r3]
 10095 01b6 274B     	 ldr r3,.L699
 10096 01b8 03F58A53 	 add r3,r3,#4416
 10097 01bc 1133     	 adds r3,r3,#17
 10098 01be 1A60     	 str r2,[r3]
3474:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3475:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         // We can write the FAT table for the freefile now
3476:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                         afatfs.initPhase = AFATFS_INITIALIZATION_FREEFILE_UPDATE_FAT;
 10099              	 .loc 1 3476 0
 10100 01c0 244B     	 ldr r3,.L699
 10101 01c2 0522     	 movs r2,#5
 10102 01c4 9A70     	 strb r2,[r3,#2]
 10103              	.L694:
 10104              	.LBE48:
3477:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                     } // Else the freefile's FAT chain and filesize remains the default (empty)
3478:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 }
3479:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3480:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 10105              	 .loc 1 3480 0
 10106 01c6 1EE7     	 b .L678
 10107              	.L693:
3481:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
3482:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 10108              	 .loc 1 3482 0 discriminator 3
 10109 01c8 40E0     	 b .L677
 10110              	.L686:
3483:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_FREEFILE_UPDATE_FAT:
3484:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_FATFillWithPattern(AFATFS_FAT_PATTERN_TERMINATED_CHAIN, &afatfs.initSta
 10111              	 .loc 1 3484 0
 10112 01ca 224B     	 ldr r3,.L699
 10113 01cc D3F80730 	 ldr r3,[r3,#7]
 10114 01d0 0120     	 movs r0,#1
 10115 01d2 2449     	 ldr r1,.L699+16
 10116 01d4 1A46     	 mov r2,r3
 10117 01d6 FFF7FEFF 	 bl afatfs_FATFillWithPattern
 10118 01da 0346     	 mov r3,r0
 10119 01dc FB71     	 strb r3,[r7,#7]
3485:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3486:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 10120              	 .loc 1 3486 0
 10121 01de FB79     	 ldrb r3,[r7,#7]
 10122 01e0 012B     	 cmp r3,#1
 10123 01e2 03D1     	 bne .L695
3487:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.initPhase = AFATFS_INITIALIZATION_FREEFILE_SAVE_DIR_ENTRY;
 10124              	 .loc 1 3487 0
 10125 01e4 1B4B     	 ldr r3,.L699
 10126 01e6 0622     	 movs r2,#6
 10127 01e8 9A70     	 strb r2,[r3,#2]
3488:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3489:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 10128              	 .loc 1 3489 0
 10129 01ea 0CE7     	 b .L678
 10130              	.L695:
3490:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else if (status == AFATFS_OPERATION_FAILURE) {
 10131              	 .loc 1 3490 0
 10132 01ec FB79     	 ldrb r3,[r7,#7]
 10133 01ee 022B     	 cmp r3,#2
 10134 01f0 09D1     	 bne .L696
3491:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.lastError = AFATFS_ERROR_GENERIC;
 10135              	 .loc 1 3491 0
 10136 01f2 184B     	 ldr r3,.L699
 10137 01f4 03F58C53 	 add r3,r3,#4480
 10138 01f8 0133     	 adds r3,r3,#1
 10139 01fa 0122     	 movs r2,#1
 10140 01fc 1A70     	 strb r2,[r3]
3492:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.filesystemState = AFATFS_FILESYSTEM_STATE_FATAL;
 10141              	 .loc 1 3492 0
 10142 01fe 154B     	 ldr r3,.L699
 10143 0200 0122     	 movs r2,#1
 10144 0202 5A70     	 strb r2,[r3,#1]
3493:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
3494:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 10145              	 .loc 1 3494 0
 10146 0204 22E0     	 b .L677
 10147              	.L696:
 10148              	 .loc 1 3494 0 is_stmt 0 discriminator 4
 10149 0206 21E0     	 b .L677
 10150              	.L687:
3495:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_FREEFILE_SAVE_DIR_ENTRY:
3496:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             status = afatfs_saveDirectoryEntry(&afatfs.freeFile, AFATFS_SAVE_DIRECTORY_NORMAL);
 10151              	 .loc 1 3496 0 is_stmt 1
 10152 0208 1448     	 ldr r0,.L699+8
 10153 020a 0021     	 movs r1,#0
 10154 020c FFF7FEFF 	 bl afatfs_saveDirectoryEntry
 10155 0210 0346     	 mov r3,r0
 10156 0212 FB71     	 strb r3,[r7,#7]
3497:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3498:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (status == AFATFS_OPERATION_SUCCESS) {
 10157              	 .loc 1 3498 0
 10158 0214 FB79     	 ldrb r3,[r7,#7]
 10159 0216 012B     	 cmp r3,#1
 10160 0218 06D1     	 bne .L697
3499:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.initPhase++;
 10161              	 .loc 1 3499 0
 10162 021a 0E4B     	 ldr r3,.L699
 10163 021c 9B78     	 ldrb r3,[r3,#2]
 10164 021e 0133     	 adds r3,r3,#1
 10165 0220 DAB2     	 uxtb r2,r3
 10166 0222 0C4B     	 ldr r3,.L699
 10167 0224 9A70     	 strb r2,[r3,#2]
3500:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 goto doMore;
 10168              	 .loc 1 3500 0
 10169 0226 EEE6     	 b .L678
 10170              	.L697:
3501:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             } else if (status == AFATFS_OPERATION_FAILURE) {
 10171              	 .loc 1 3501 0
 10172 0228 FB79     	 ldrb r3,[r7,#7]
 10173 022a 022B     	 cmp r3,#2
 10174 022c 09D1     	 bne .L698
3502:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.lastError = AFATFS_ERROR_GENERIC;
 10175              	 .loc 1 3502 0
 10176 022e 094B     	 ldr r3,.L699
 10177 0230 03F58C53 	 add r3,r3,#4480
 10178 0234 0133     	 adds r3,r3,#1
 10179 0236 0122     	 movs r2,#1
 10180 0238 1A70     	 strb r2,[r3]
3503:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs.filesystemState = AFATFS_FILESYSTEM_STATE_FATAL;
 10181              	 .loc 1 3503 0
 10182 023a 064B     	 ldr r3,.L699
 10183 023c 0122     	 movs r2,#1
 10184 023e 5A70     	 strb r2,[r3,#1]
3504:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
3505:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 10185              	 .loc 1 3505 0
 10186 0240 04E0     	 b .L677
 10187              	.L698:
 10188              	 .loc 1 3505 0 is_stmt 0 discriminator 5
 10189 0242 03E0     	 b .L677
 10190              	.L688:
3506:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3507:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3508:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_INTROSPECTIVE_LOGGING
3509:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_INTROSPEC_LOG_CREATE:
3510:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.initPhase = AFATFS_INITIALIZATION_INTROSPEC_LOG_CREATING;
3511:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3512:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_createFile(&afatfs.introSpecLog, AFATFS_INTROSPEC_LOG_FILENAME, FAT_FILE_ATTRIBU
3513:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 AFATFS_FILE_MODE_CREATE | AFATFS_FILE_MODE_APPEND, afatfs_introspecLogCreated);
3514:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
3515:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_INTROSPEC_LOG_CREATING:
3516:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_fileOperationContinue(&afatfs.introSpecLog);
3517:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
3518:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3519:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3520:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         case AFATFS_INITIALIZATION_DONE:
3521:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs.filesystemState = AFATFS_FILESYSTEM_STATE_READY;
 10191              	 .loc 1 3521 0 is_stmt 1
 10192 0244 034B     	 ldr r3,.L699
 10193 0246 0322     	 movs r2,#3
 10194 0248 5A70     	 strb r2,[r3,#1]
3522:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         break;
 10195              	 .loc 1 3522 0
 10196 024a 00BF     	 nop
 10197              	.L677:
3523:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3524:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 10198              	 .loc 1 3524 0
 10199 024c 1437     	 adds r7,r7,#20
 10200              	.LCFI420:
 10201              	 .cfi_def_cfa_offset 12
 10202 024e BD46     	 mov sp,r7
 10203              	.LCFI421:
 10204              	 .cfi_def_cfa_register 13
 10205              	 
 10206 0250 90BD     	 pop {r4,r7,pc}
 10207              	.L700:
 10208 0252 00BF     	 .align 2
 10209              	.L699:
 10210 0254 00000000 	 .word afatfs
 10211 0258 00000000 	 .word afatfs_freeFileCreated
 10212 025c 48110000 	 .word afatfs+4424
 10213 0260 04000000 	 .word .LC1
 10214 0264 03000000 	 .word afatfs+3
 10215              	 .cfi_endproc
 10216              	.LFE613:
 10218              	 .section .text.afatfs_poll,"ax",%progbits
 10219              	 .align 2
 10220              	 .global afatfs_poll
 10221              	 .thumb
 10222              	 .thumb_func
 10224              	afatfs_poll:
 10225              	.LFB614:
3525:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3526:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3527:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Check to see if there are any pending operations on the filesystem and perform a little work (wi
3528:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * sdcard). You must call this periodically.
3529:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3530:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** void afatfs_poll(void)
3531:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 10226              	 .loc 1 3531 0
 10227              	 .cfi_startproc
 10228              	 
 10229              	 
 10230 0000 80B5     	 push {r7,lr}
 10231              	.LCFI422:
 10232              	 .cfi_def_cfa_offset 8
 10233              	 .cfi_offset 7,-8
 10234              	 .cfi_offset 14,-4
 10235 0002 00AF     	 add r7,sp,#0
 10236              	.LCFI423:
 10237              	 .cfi_def_cfa_register 7
3532:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Only attempt to continue FS operations if the card is present & ready, otherwise we would ju
3533:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (sdcard_poll()) {
 10238              	 .loc 1 3533 0
 10239 0004 FFF7FEFF 	 bl sdcard_poll
 10240 0008 0346     	 mov r3,r0
 10241 000a 002B     	 cmp r3,#0
 10242 000c 0ED0     	 beq .L701
3534:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_flush();
 10243              	 .loc 1 3534 0
 10244 000e FFF7FEFF 	 bl afatfs_flush
3535:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3536:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         switch (afatfs.filesystemState) {
 10245              	 .loc 1 3536 0
 10246 0012 074B     	 ldr r3,.L705
 10247 0014 5B78     	 ldrb r3,[r3,#1]
 10248 0016 022B     	 cmp r3,#2
 10249 0018 02D0     	 beq .L703
 10250 001a 032B     	 cmp r3,#3
 10251 001c 03D0     	 beq .L704
 10252 001e 05E0     	 b .L701
 10253              	.L703:
3537:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_FILESYSTEM_STATE_INITIALIZATION:
3538:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs_initContinue();
 10254              	 .loc 1 3538 0
 10255 0020 FFF7FEFF 	 bl afatfs_initContinue
3539:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 10256              	 .loc 1 3539 0
 10257 0024 02E0     	 b .L701
 10258              	.L704:
3540:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             case AFATFS_FILESYSTEM_STATE_READY:
3541:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs_fileOperationsPoll();
 10259              	 .loc 1 3541 0
 10260 0026 FFF7FEFF 	 bl afatfs_fileOperationsPoll
3542:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             break;
 10261              	 .loc 1 3542 0
 10262 002a 00BF     	 nop
 10263              	.L701:
3543:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             default:
3544:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 ;
3545:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3546:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3547:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 10264              	 .loc 1 3547 0
 10265 002c 80BD     	 pop {r7,pc}
 10266              	.L706:
 10267 002e 00BF     	 .align 2
 10268              	.L705:
 10269 0030 00000000 	 .word afatfs
 10270              	 .cfi_endproc
 10271              	.LFE614:
 10273              	 .section .text.afatfs_getFilesystemState,"ax",%progbits
 10274              	 .align 2
 10275              	 .global afatfs_getFilesystemState
 10276              	 .thumb
 10277              	 .thumb_func
 10279              	afatfs_getFilesystemState:
 10280              	.LFB615:
3548:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3549:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_INTROSPECTIVE_LOGGING
3550:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3551:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** void afatfs_sdcardProfilerCallback(sdcardBlockOperation_e operation, uint32_t blockIndex, uint32_t 
3552:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
3553:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Make sure the log file has actually been opened before we try to log to it:
3554:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (afatfs.introSpecLog.type == AFATFS_FILE_TYPE_NONE) {
3555:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         return;
3556:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3557:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3558:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     enum {
3559:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         LOG_ENTRY_SIZE = 16 // Log entry size should be a power of two to avoid partial fwrites()
3560:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     };
3561:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3562:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint8_t buffer[LOG_ENTRY_SIZE];
3563:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3564:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[0] = operation;
3565:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3566:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Padding/reserved:
3567:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[1] = 0;
3568:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[2] = 0;
3569:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[3] = 0;
3570:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3571:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[4] = blockIndex & 0xFF;
3572:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[5] = (blockIndex >> 8) & 0xFF;
3573:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[6] = (blockIndex >> 16) & 0xFF;
3574:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[7] = (blockIndex >> 24) & 0xFF;
3575:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3576:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[8] = duration & 0xFF;
3577:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[9] = (duration >> 8) & 0xFF;
3578:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[10] = (duration >> 16) & 0xFF;
3579:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[11] = (duration >> 24) & 0xFF;
3580:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3581:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Padding/reserved:
3582:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[12] = 0;
3583:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[13] = 0;
3584:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[14] = 0;
3585:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     buffer[15] = 0;
3586:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3587:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Ignore write failures
3588:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs_fwrite(&afatfs.introSpecLog, buffer, LOG_ENTRY_SIZE);
3589:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
3590:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3591:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3592:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3593:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** afatfsFilesystemState_e afatfs_getFilesystemState(void)
3594:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 10281              	 .loc 1 3594 0
 10282              	 .cfi_startproc
 10283              	 
 10284              	 
 10285              	 
 10286 0000 80B4     	 push {r7}
 10287              	.LCFI424:
 10288              	 .cfi_def_cfa_offset 4
 10289              	 .cfi_offset 7,-4
 10290 0002 00AF     	 add r7,sp,#0
 10291              	.LCFI425:
 10292              	 .cfi_def_cfa_register 7
3595:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.filesystemState;
 10293              	 .loc 1 3595 0
 10294 0004 034B     	 ldr r3,.L709
 10295 0006 5B78     	 ldrb r3,[r3,#1]
3596:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 10296              	 .loc 1 3596 0
 10297 0008 1846     	 mov r0,r3
 10298 000a BD46     	 mov sp,r7
 10299              	.LCFI426:
 10300              	 .cfi_def_cfa_register 13
 10301              	 
 10302 000c 5DF8047B 	 ldr r7,[sp],#4
 10303              	.LCFI427:
 10304              	 .cfi_restore 7
 10305              	 .cfi_def_cfa_offset 0
 10306 0010 7047     	 bx lr
 10307              	.L710:
 10308 0012 00BF     	 .align 2
 10309              	.L709:
 10310 0014 00000000 	 .word afatfs
 10311              	 .cfi_endproc
 10312              	.LFE615:
 10314              	 .section .text.afatfs_getLastError,"ax",%progbits
 10315              	 .align 2
 10316              	 .global afatfs_getLastError
 10317              	 .thumb
 10318              	 .thumb_func
 10320              	afatfs_getLastError:
 10321              	.LFB616:
3597:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3598:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** afatfsError_e afatfs_getLastError(void)
3599:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 10322              	 .loc 1 3599 0
 10323              	 .cfi_startproc
 10324              	 
 10325              	 
 10326              	 
 10327 0000 80B4     	 push {r7}
 10328              	.LCFI428:
 10329              	 .cfi_def_cfa_offset 4
 10330              	 .cfi_offset 7,-4
 10331 0002 00AF     	 add r7,sp,#0
 10332              	.LCFI429:
 10333              	 .cfi_def_cfa_register 7
3600:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return afatfs.lastError;
 10334              	 .loc 1 3600 0
 10335 0004 044B     	 ldr r3,.L713
 10336 0006 03F58C53 	 add r3,r3,#4480
 10337 000a 0133     	 adds r3,r3,#1
 10338 000c 1B78     	 ldrb r3,[r3]
3601:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 10339              	 .loc 1 3601 0
 10340 000e 1846     	 mov r0,r3
 10341 0010 BD46     	 mov sp,r7
 10342              	.LCFI430:
 10343              	 .cfi_def_cfa_register 13
 10344              	 
 10345 0012 5DF8047B 	 ldr r7,[sp],#4
 10346              	.LCFI431:
 10347              	 .cfi_restore 7
 10348              	 .cfi_def_cfa_offset 0
 10349 0016 7047     	 bx lr
 10350              	.L714:
 10351              	 .align 2
 10352              	.L713:
 10353 0018 00000000 	 .word afatfs
 10354              	 .cfi_endproc
 10355              	.LFE616:
 10357              	 .section .text.afatfs_init,"ax",%progbits
 10358              	 .align 2
 10359              	 .global afatfs_init
 10360              	 .thumb
 10361              	 .thumb_func
 10363              	afatfs_init:
 10364              	.LFB617:
3602:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3603:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** void afatfs_init(void)
3604:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 10365              	 .loc 1 3604 0
 10366              	 .cfi_startproc
 10367              	 
 10368              	 
 10369              	 
 10370 0000 80B4     	 push {r7}
 10371              	.LCFI432:
 10372              	 .cfi_def_cfa_offset 4
 10373              	 .cfi_offset 7,-4
 10374 0002 00AF     	 add r7,sp,#0
 10375              	.LCFI433:
 10376              	 .cfi_def_cfa_register 7
3605:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.filesystemState = AFATFS_FILESYSTEM_STATE_INITIALIZATION;
 10377              	 .loc 1 3605 0
 10378 0004 074B     	 ldr r3,.L716
 10379 0006 0222     	 movs r2,#2
 10380 0008 5A70     	 strb r2,[r3,#1]
3606:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.initPhase = AFATFS_INITIALIZATION_READ_MBR;
 10381              	 .loc 1 3606 0
 10382 000a 064B     	 ldr r3,.L716
 10383 000c 0022     	 movs r2,#0
 10384 000e 9A70     	 strb r2,[r3,#2]
3607:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     afatfs.lastClusterAllocated = FAT_SMALLEST_LEGAL_CLUSTER_NUMBER;
 10385              	 .loc 1 3607 0
 10386 0010 044B     	 ldr r3,.L716
 10387 0012 03F58E53 	 add r3,r3,#4544
 10388 0016 1433     	 adds r3,r3,#20
 10389 0018 0222     	 movs r2,#2
 10390 001a 1A60     	 str r2,[r3]
3608:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3609:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_INTROSPECTIVE_LOGGING
3610:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     sdcard_setProfilerCallback(afatfs_sdcardProfilerCallback);
3611:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3612:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 10391              	 .loc 1 3612 0
 10392 001c BD46     	 mov sp,r7
 10393              	.LCFI434:
 10394              	 .cfi_def_cfa_register 13
 10395              	 
 10396 001e 5DF8047B 	 ldr r7,[sp],#4
 10397              	.LCFI435:
 10398              	 .cfi_restore 7
 10399              	 .cfi_def_cfa_offset 0
 10400 0022 7047     	 bx lr
 10401              	.L717:
 10402              	 .align 2
 10403              	.L716:
 10404 0024 00000000 	 .word afatfs
 10405              	 .cfi_endproc
 10406              	.LFE617:
 10408              	 .section .text.afatfs_destroy,"ax",%progbits
 10409              	 .align 2
 10410              	 .global afatfs_destroy
 10411              	 .thumb
 10412              	 .thumb_func
 10414              	afatfs_destroy:
 10415              	.LFB618:
3613:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3614:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3615:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Shut down the filesystem, flushing all data to the disk. Keep calling until it returns true.
3616:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  *
3617:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * dirty - Set to true to skip the flush operation and terminate immediately (buffered data will be
3618:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3619:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** bool afatfs_destroy(bool dirty)
3620:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 10416              	 .loc 1 3620 0
 10417              	 .cfi_startproc
 10418              	 
 10419              	 
 10420 0000 80B5     	 push {r7,lr}
 10421              	.LCFI436:
 10422              	 .cfi_def_cfa_offset 8
 10423              	 .cfi_offset 7,-8
 10424              	 .cfi_offset 14,-4
 10425 0002 84B0     	 sub sp,sp,#16
 10426              	.LCFI437:
 10427              	 .cfi_def_cfa_offset 24
 10428 0004 00AF     	 add r7,sp,#0
 10429              	.LCFI438:
 10430              	 .cfi_def_cfa_register 7
 10431 0006 0346     	 mov r3,r0
 10432 0008 FB71     	 strb r3,[r7,#7]
3621:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Only attempt detailed cleanup if the filesystem is in reasonable looking state
3622:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     if (!dirty && afatfs.filesystemState == AFATFS_FILESYSTEM_STATE_READY) {
 10433              	 .loc 1 3622 0
 10434 000a FB79     	 ldrb r3,[r7,#7]
 10435 000c 83F00103 	 eor r3,r3,#1
 10436 0010 DBB2     	 uxtb r3,r3
 10437 0012 002B     	 cmp r3,#0
 10438 0014 65D0     	 beq .L719
 10439              	 .loc 1 3622 0 is_stmt 0 discriminator 1
 10440 0016 384B     	 ldr r3,.L728
 10441 0018 5B78     	 ldrb r3,[r3,#1]
 10442 001a 032B     	 cmp r3,#3
 10443 001c 61D1     	 bne .L719
 10444              	.LBB49:
3623:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         int openFileCount = 0;
 10445              	 .loc 1 3623 0 is_stmt 1
 10446 001e 0023     	 movs r3,#0
 10447 0020 FB60     	 str r3,[r7,#12]
 10448              	.LBB50:
3624:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3625:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         for (int i = 0; i < AFATFS_MAX_OPEN_FILES; i++) {
 10449              	 .loc 1 3625 0
 10450 0022 0023     	 movs r3,#0
 10451 0024 BB60     	 str r3,[r7,#8]
 10452 0026 23E0     	 b .L720
 10453              	.L722:
3626:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs.openFiles[i].type != AFATFS_FILE_TYPE_NONE) {
 10454              	 .loc 1 3626 0
 10455 0028 3349     	 ldr r1,.L728
 10456 002a BA68     	 ldr r2,[r7,#8]
 10457 002c 1346     	 mov r3,r2
 10458 002e DB00     	 lsls r3,r3,#3
 10459 0030 9B1A     	 subs r3,r3,r2
 10460 0032 DB00     	 lsls r3,r3,#3
 10461 0034 1344     	 add r3,r3,r2
 10462 0036 0B44     	 add r3,r3,r1
 10463 0038 03F58453 	 add r3,r3,#4224
 10464 003c 1833     	 adds r3,r3,#24
 10465 003e 5B79     	 ldrb r3,[r3,#5]
 10466 0040 002B     	 cmp r3,#0
 10467 0042 12D0     	 beq .L721
3627:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 afatfs_fclose(&afatfs.openFiles[i], NULL);
 10468              	 .loc 1 3627 0
 10469 0044 BA68     	 ldr r2,[r7,#8]
 10470 0046 1346     	 mov r3,r2
 10471 0048 DB00     	 lsls r3,r3,#3
 10472 004a 9B1A     	 subs r3,r3,r2
 10473 004c DB00     	 lsls r3,r3,#3
 10474 004e 1344     	 add r3,r3,r2
 10475 0050 03F58453 	 add r3,r3,#4224
 10476 0054 1833     	 adds r3,r3,#24
 10477 0056 284A     	 ldr r2,.L728
 10478 0058 1344     	 add r3,r3,r2
 10479 005a 0533     	 adds r3,r3,#5
 10480 005c 1846     	 mov r0,r3
 10481 005e 0021     	 movs r1,#0
 10482 0060 FFF7FEFF 	 bl afatfs_fclose
3628:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 // The close operation might not finish right away, so count this file as still ope
3629:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****                 openFileCount++;
 10483              	 .loc 1 3629 0
 10484 0064 FB68     	 ldr r3,[r7,#12]
 10485 0066 0133     	 adds r3,r3,#1
 10486 0068 FB60     	 str r3,[r7,#12]
 10487              	.L721:
3625:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs.openFiles[i].type != AFATFS_FILE_TYPE_NONE) {
 10488              	 .loc 1 3625 0 discriminator 2
 10489 006a BB68     	 ldr r3,[r7,#8]
 10490 006c 0133     	 adds r3,r3,#1
 10491 006e BB60     	 str r3,[r7,#8]
 10492              	.L720:
3625:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             if (afatfs.openFiles[i].type != AFATFS_FILE_TYPE_NONE) {
 10493              	 .loc 1 3625 0 is_stmt 0 discriminator 1
 10494 0070 BB68     	 ldr r3,[r7,#8]
 10495 0072 022B     	 cmp r3,#2
 10496 0074 D8DD     	 ble .L722
 10497              	.LBE50:
3630:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             }
3631:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3632:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3633:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_INTROSPECTIVE_LOGGING
3634:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.introSpecLog.type != AFATFS_FILE_TYPE_NONE) {
3635:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_fclose(&afatfs.introSpecLog, NULL);
3636:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             openFileCount++;
3637:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3638:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3639:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3640:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_USE_FREEFILE
3641:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.freeFile.type != AFATFS_FILE_TYPE_NONE) {
 10498              	 .loc 1 3641 0 is_stmt 1
 10499 0076 204B     	 ldr r3,.L728
 10500 0078 03F58A53 	 add r3,r3,#4416
 10501 007c 0833     	 adds r3,r3,#8
 10502 007e 1B78     	 ldrb r3,[r3]
 10503 0080 002B     	 cmp r3,#0
 10504 0082 06D0     	 beq .L723
3642:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_fclose(&afatfs.freeFile, NULL);
 10505              	 .loc 1 3642 0
 10506 0084 1D48     	 ldr r0,.L728+4
 10507 0086 0021     	 movs r1,#0
 10508 0088 FFF7FEFF 	 bl afatfs_fclose
3643:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             openFileCount++;
 10509              	 .loc 1 3643 0
 10510 008c FB68     	 ldr r3,[r7,#12]
 10511 008e 0133     	 adds r3,r3,#1
 10512 0090 FB60     	 str r3,[r7,#12]
 10513              	.L723:
3644:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3645:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3646:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3647:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.currentDirectory.type != AFATFS_FILE_TYPE_NONE) {
 10514              	 .loc 1 3647 0
 10515 0092 194B     	 ldr r3,.L728
 10516 0094 03F58C53 	 add r3,r3,#4480
 10517 0098 0333     	 adds r3,r3,#3
 10518 009a 1B78     	 ldrb r3,[r3]
 10519 009c 002B     	 cmp r3,#0
 10520 009e 06D0     	 beq .L724
3648:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_fclose(&afatfs.currentDirectory, NULL);
 10521              	 .loc 1 3648 0
 10522 00a0 1748     	 ldr r0,.L728+8
 10523 00a2 0021     	 movs r1,#0
 10524 00a4 FFF7FEFF 	 bl afatfs_fclose
3649:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             openFileCount++;
 10525              	 .loc 1 3649 0
 10526 00a8 FB68     	 ldr r3,[r7,#12]
 10527 00aa 0133     	 adds r3,r3,#1
 10528 00ac FB60     	 str r3,[r7,#12]
 10529              	.L724:
3650:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3651:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3652:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         afatfs_poll();
 10530              	 .loc 1 3652 0
 10531 00ae FFF7FEFF 	 bl afatfs_poll
3653:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3654:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (!afatfs_flush()) {
 10532              	 .loc 1 3654 0
 10533 00b2 FFF7FEFF 	 bl afatfs_flush
 10534 00b6 0346     	 mov r3,r0
 10535 00b8 83F00103 	 eor r3,r3,#1
 10536 00bc DBB2     	 uxtb r3,r3
 10537 00be 002B     	 cmp r3,#0
 10538 00c0 01D0     	 beq .L725
3655:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return false;
 10539              	 .loc 1 3655 0
 10540 00c2 0023     	 movs r3,#0
 10541 00c4 14E0     	 b .L726
 10542              	.L725:
3656:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3657:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3658:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (afatfs.cacheFlushInProgress) {
 10543              	 .loc 1 3658 0
 10544 00c6 0C4B     	 ldr r3,.L728
 10545 00c8 03F58453 	 add r3,r3,#4224
 10546 00cc 1C33     	 adds r3,r3,#28
 10547 00ce 1B78     	 ldrb r3,[r3]
 10548 00d0 002B     	 cmp r3,#0
 10549 00d2 01D0     	 beq .L727
3659:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return false;
 10550              	 .loc 1 3659 0
 10551 00d4 0023     	 movs r3,#0
 10552 00d6 0BE0     	 b .L726
 10553              	.L727:
3660:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3661:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3662:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (openFileCount > 0) {
 10554              	 .loc 1 3662 0
 10555 00d8 FB68     	 ldr r3,[r7,#12]
 10556 00da 002B     	 cmp r3,#0
 10557 00dc 01DD     	 ble .L719
3663:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             return false;
 10558              	 .loc 1 3663 0
 10559 00de 0023     	 movs r3,#0
 10560 00e0 06E0     	 b .L726
 10561              	.L719:
 10562              	.LBE49:
3664:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3665:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3666:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #ifdef AFATFS_DEBUG
3667:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         /* All sector locks should have been released by closing the files, so the subsequent flush
3668:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          * all dirty pages to disk. If not, something's wrong:
3669:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****          */
3670:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
3671:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             afatfs_assert(afatfs.cacheDescriptor[i].state != AFATFS_CACHE_STATE_DIRTY);
3672:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3673:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** #endif
3674:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3675:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3676:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     // Clear the afatfs so it's as if we never ran
3677:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     memset(&afatfs, 0, sizeof(afatfs));
 10563              	 .loc 1 3677 0
 10564 00e2 0548     	 ldr r0,.L728
 10565 00e4 0021     	 movs r1,#0
 10566 00e6 41F2E412 	 movw r2,#4580
 10567 00ea FFF7FEFF 	 bl memset
3678:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3679:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return true;
 10568              	 .loc 1 3679 0
 10569 00ee 0123     	 movs r3,#1
 10570              	.L726:
3680:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 10571              	 .loc 1 3680 0
 10572 00f0 1846     	 mov r0,r3
 10573 00f2 1037     	 adds r7,r7,#16
 10574              	.LCFI439:
 10575              	 .cfi_def_cfa_offset 8
 10576 00f4 BD46     	 mov sp,r7
 10577              	.LCFI440:
 10578              	 .cfi_def_cfa_register 13
 10579              	 
 10580 00f6 80BD     	 pop {r7,pc}
 10581              	.L729:
 10582              	 .align 2
 10583              	.L728:
 10584 00f8 00000000 	 .word afatfs
 10585 00fc 48110000 	 .word afatfs+4424
 10586 0100 83110000 	 .word afatfs+4483
 10587              	 .cfi_endproc
 10588              	.LFE618:
 10590              	 .section .text.afatfs_getFreeBufferSpace,"ax",%progbits
 10591              	 .align 2
 10592              	 .global afatfs_getFreeBufferSpace
 10593              	 .thumb
 10594              	 .thumb_func
 10596              	afatfs_getFreeBufferSpace:
 10597              	.LFB619:
3681:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** 
3682:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** /**
3683:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  * Get a pessimistic estimate of the amount of buffer space that we have available to write to imme
3684:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****  */
3685:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** uint32_t afatfs_getFreeBufferSpace(void)
3686:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** {
 10598              	 .loc 1 3686 0
 10599              	 .cfi_startproc
 10600              	 
 10601              	 
 10602              	 
 10603 0000 80B4     	 push {r7}
 10604              	.LCFI441:
 10605              	 .cfi_def_cfa_offset 4
 10606              	 .cfi_offset 7,-4
 10607 0002 83B0     	 sub sp,sp,#12
 10608              	.LCFI442:
 10609              	 .cfi_def_cfa_offset 16
 10610 0004 00AF     	 add r7,sp,#0
 10611              	.LCFI443:
 10612              	 .cfi_def_cfa_register 7
3687:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     uint32_t result = 0;
 10613              	 .loc 1 3687 0
 10614 0006 0023     	 movs r3,#0
 10615 0008 7B60     	 str r3,[r7,#4]
 10616              	.LBB51:
3688:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 10617              	 .loc 1 3688 0
 10618 000a 0023     	 movs r3,#0
 10619 000c 3B60     	 str r3,[r7]
 10620 000e 27E0     	 b .L731
 10621              	.L734:
3689:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         if (!afatfs.cacheDescriptor[i].locked && (afatfs.cacheDescriptor[i].state == AFATFS_CACHE_S
 10622              	 .loc 1 3689 0
 10623 0010 184A     	 ldr r2,.L736
 10624 0012 3B68     	 ldr r3,[r7]
 10625 0014 1B01     	 lsls r3,r3,#4
 10626 0016 1344     	 add r3,r3,r2
 10627 0018 03F58053 	 add r3,r3,#4096
 10628 001c 1833     	 adds r3,r3,#24
 10629 001e DB7A     	 ldrb r3,[r3,#11]
 10630 0020 C3F30003 	 ubfx r3,r3,#0,#1
 10631 0024 DBB2     	 uxtb r3,r3
 10632 0026 002B     	 cmp r3,#0
 10633 0028 17D1     	 bne .L732
 10634              	 .loc 1 3689 0 is_stmt 0 discriminator 1
 10635 002a 124A     	 ldr r2,.L736
 10636 002c 3B68     	 ldr r3,[r7]
 10637 002e 1B01     	 lsls r3,r3,#4
 10638 0030 1344     	 add r3,r3,r2
 10639 0032 03F58053 	 add r3,r3,#4096
 10640 0036 1833     	 adds r3,r3,#24
 10641 0038 9B7A     	 ldrb r3,[r3,#10]
 10642 003a 002B     	 cmp r3,#0
 10643 003c 09D0     	 beq .L733
 10644              	 .loc 1 3689 0 discriminator 2
 10645 003e 0D4A     	 ldr r2,.L736
 10646 0040 3B68     	 ldr r3,[r7]
 10647 0042 1B01     	 lsls r3,r3,#4
 10648 0044 1344     	 add r3,r3,r2
 10649 0046 03F58053 	 add r3,r3,#4096
 10650 004a 1833     	 adds r3,r3,#24
 10651 004c 9B7A     	 ldrb r3,[r3,#10]
 10652 004e 012B     	 cmp r3,#1
 10653 0050 03D1     	 bne .L732
 10654              	.L733:
3690:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****             result += AFATFS_SECTOR_SIZE;
 10655              	 .loc 1 3690 0 is_stmt 1
 10656 0052 7B68     	 ldr r3,[r7,#4]
 10657 0054 03F50073 	 add r3,r3,#512
 10658 0058 7B60     	 str r3,[r7,#4]
 10659              	.L732:
3688:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 10660              	 .loc 1 3688 0 discriminator 2
 10661 005a 3B68     	 ldr r3,[r7]
 10662 005c 0133     	 adds r3,r3,#1
 10663 005e 3B60     	 str r3,[r7]
 10664              	.L731:
3688:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     for (int i = 0; i < AFATFS_NUM_CACHE_SECTORS; i++) {
 10665              	 .loc 1 3688 0 is_stmt 0 discriminator 1
 10666 0060 3B68     	 ldr r3,[r7]
 10667 0062 072B     	 cmp r3,#7
 10668 0064 D4DD     	 ble .L734
 10669              	.LBE51:
3691:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****         }
3692:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     }
3693:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c ****     return result;
 10670              	 .loc 1 3693 0 is_stmt 1
 10671 0066 7B68     	 ldr r3,[r7,#4]
3694:../cleanflight/src/main/io/asyncfatfs/asyncfatfs.c **** }
 10672              	 .loc 1 3694 0
 10673 0068 1846     	 mov r0,r3
 10674 006a 0C37     	 adds r7,r7,#12
 10675              	.LCFI444:
 10676              	 .cfi_def_cfa_offset 4
 10677 006c BD46     	 mov sp,r7
 10678              	.LCFI445:
 10679              	 .cfi_def_cfa_register 13
 10680              	 
 10681 006e 5DF8047B 	 ldr r7,[sp],#4
 10682              	.LCFI446:
 10683              	 .cfi_restore 7
 10684              	 .cfi_def_cfa_offset 0
 10685 0072 7047     	 bx lr
 10686              	.L737:
 10687              	 .align 2
 10688              	.L736:
 10689 0074 00000000 	 .word afatfs
 10690              	 .cfi_endproc
 10691              	.LFE619:
 10693              	 .text
 10694              	.Letext0:
 10695              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 10696              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 10697              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 10698              	 .file 5 "../cleanflight/src/main/io/asyncfatfs/fat_standard.h"
 10699              	 .file 6 "../cleanflight/src/main/io/asyncfatfs/asyncfatfs.h"
 10700              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 10701              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 10702              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/sdcard.h"
 10703              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sdcard.h"
 10704              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 10705              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 10706              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 asyncfatfs.c
    {standard input}:20     .bss.afatfs:00000000 $d
    {standard input}:23     .bss.afatfs:00000000 afatfs
    {standard input}:26     .text.roundUpTo:00000000 $t
    {standard input}:30     .text.roundUpTo:00000000 roundUpTo
    {standard input}:90     .text.isPowerOfTwo:00000000 $t
    {standard input}:94     .text.isPowerOfTwo:00000000 isPowerOfTwo
    {standard input}:152    .text.afatfs_assert:00000000 $t
    {standard input}:156    .text.afatfs_assert:00000000 afatfs_assert
    {standard input}:219    .text.afatfs_assert:00000044 $d
    {standard input}:224    .text.afatfs_fileIsBusy:00000000 $t
    {standard input}:228    .text.afatfs_fileIsBusy:00000000 afatfs_fileIsBusy
    {standard input}:272    .text.afatfs_fatEntriesPerSector:00000000 $t
    {standard input}:276    .text.afatfs_fatEntriesPerSector:00000000 afatfs_fatEntriesPerSector
    {standard input}:316    .text.afatfs_fatEntriesPerSector:00000020 $d
    {standard input}:321    .text.afatfs_clusterSize:00000000 $t
    {standard input}:325    .text.afatfs_clusterSize:00000000 afatfs_clusterSize
    {standard input}:359    .text.afatfs_clusterSize:0000001c $d
    {standard input}:364    .text.afatfs_byteIndexInCluster:00000000 $t
    {standard input}:368    .text.afatfs_byteIndexInCluster:00000000 afatfs_byteIndexInCluster
    {standard input}:410    .text.afatfs_byteIndexInCluster:00000024 $d
    {standard input}:415    .text.afatfs_sectorIndexInCluster:00000000 $t
    {standard input}:419    .text.afatfs_sectorIndexInCluster:00000000 afatfs_sectorIndexInCluster
    {standard input}:456    .text.afatfs_cacheSectorGetMemory:00000000 $t
    {standard input}:460    .text.afatfs_cacheSectorGetMemory:00000000 afatfs_cacheSectorGetMemory
    {standard input}:502    .text.afatfs_cacheSectorGetMemory:00000020 $d
    {standard input}:507    .text.afatfs_getCacheDescriptorIndexForBuffer:00000000 $t
    {standard input}:511    .text.afatfs_getCacheDescriptorIndexForBuffer:00000000 afatfs_getCacheDescriptorIndexForBuffer
    {standard input}:582    .text.afatfs_getCacheDescriptorIndexForBuffer:00000050 $d
    {standard input}:587    .text.afatfs_getCacheDescriptorForBuffer:00000000 $t
    {standard input}:591    .text.afatfs_getCacheDescriptorForBuffer:00000000 afatfs_getCacheDescriptorForBuffer
    {standard input}:631    .text.afatfs_getCacheDescriptorForBuffer:00000024 $d
    {standard input}:636    .text.afatfs_cacheSectorMarkDirty:00000000 $t
    {standard input}:640    .text.afatfs_cacheSectorMarkDirty:00000000 afatfs_cacheSectorMarkDirty
    {standard input}:710    .text.afatfs_cacheSectorMarkDirty:0000005c $d
    {standard input}:715    .text.afatfs_cacheSectorInit:00000000 $t
    {standard input}:719    .text.afatfs_cacheSectorInit:00000000 afatfs_cacheSectorInit
    {standard input}:806    .text.afatfs_cacheSectorInit:0000007c $d
    {standard input}:811    .text.afatfs_sdcardReadComplete:00000000 $t
    {standard input}:815    .text.afatfs_sdcardReadComplete:00000000 afatfs_sdcardReadComplete
    {standard input}:943    .text.afatfs_sdcardReadComplete:000000b4 $d
    {standard input}:948    .text.afatfs_sdcardWriteComplete:00000000 $t
    {standard input}:952    .text.afatfs_sdcardWriteComplete:00000000 afatfs_sdcardWriteComplete
    {standard input}:1079   .text.afatfs_sdcardWriteComplete:000000bc $d
    {standard input}:1084   .text.afatfs_cacheFlushSector:00000000 $t
    {standard input}:1088   .text.afatfs_cacheFlushSector:00000000 afatfs_cacheFlushSector
    {standard input}:1201   .text.afatfs_cacheFlushSector:000000a8 $d
    {standard input}:1207   .text.afatfs_findCacheSector:00000000 $t
    {standard input}:1211   .text.afatfs_findCacheSector:00000000 afatfs_findCacheSector
    {standard input}:1284   .text.afatfs_findCacheSector:0000004c $d
    {standard input}:1289   .text.afatfs_allocateCacheSector:00000000 $t
    {standard input}:1293   .text.afatfs_allocateCacheSector:00000000 afatfs_allocateCacheSector
    {standard input}:1592   .text.afatfs_allocateCacheSector:000001e8 $d
    {standard input}:1597   .text.afatfs_flush:00000000 $t
    {standard input}:1602   .text.afatfs_flush:00000000 afatfs_flush
    {standard input}:1726   .text.afatfs_flush:000000ac $d
    {standard input}:1731   .text.afatfs_isFull:00000000 $t
    {standard input}:1736   .text.afatfs_isFull:00000000 afatfs_isFull
    {standard input}:1769   .text.afatfs_isFull:00000018 $d
    {standard input}:1774   .text.afatfs_fatSectorToPhysical:00000000 $t
    {standard input}:1778   .text.afatfs_fatSectorToPhysical:00000000 afatfs_fatSectorToPhysical
    {standard input}:1835   .text.afatfs_fatSectorToPhysical:00000038 $d
    {standard input}:1840   .text.afatfs_fileClusterToPhysical:00000000 $t
    {standard input}:1844   .text.afatfs_fileClusterToPhysical:00000000 afatfs_fileClusterToPhysical
    {standard input}:1895   .text.afatfs_fileClusterToPhysical:00000038 $d
    {standard input}:1900   .text.afatfs_fileGetCursorPhysicalSector:00000000 $t
    {standard input}:1904   .text.afatfs_fileGetCursorPhysicalSector:00000000 afatfs_fileGetCursorPhysicalSector
    {standard input}:1972   .text.afatfs_fileGetCursorPhysicalSector:00000058 $d
    {standard input}:1977   .text.afatfs_fileGetCursorClusterAndSector:00000000 $t
    {standard input}:1981   .text.afatfs_fileGetCursorClusterAndSector:00000000 afatfs_fileGetCursorClusterAndSector
    {standard input}:2043   .text.afatfs_cacheSector:00000000 $t
    {standard input}:2047   .text.afatfs_cacheSector:00000000 afatfs_cacheSector
    {standard input}:2126   .text.afatfs_cacheSector:00000074 $d
    {standard input}:2131   .text.afatfs_cacheSector:00000088 $t
    {standard input}:2308   .text.afatfs_cacheSector:000001c0 $d
    {standard input}:2314   .text.afatfs_parseMBR:00000000 $t
    {standard input}:2318   .text.afatfs_parseMBR:00000000 afatfs_parseMBR
    {standard input}:2450   .text.afatfs_parseMBR:000000ac $d
    {standard input}:2455   .text.afatfs_parseVolumeID:00000000 $t
    {standard input}:2459   .text.afatfs_parseVolumeID:00000000 afatfs_parseVolumeID
    {standard input}:2753   .text.afatfs_parseVolumeID:00000200 $d
    {standard input}:2758   .text.afatfs_getFATPositionForCluster:00000000 $t
    {standard input}:2762   .text.afatfs_getFATPositionForCluster:00000000 afatfs_getFATPositionForCluster
    {standard input}:2840   .text.afatfs_getFATPositionForCluster:0000005c $d
    {standard input}:2845   .text.afatfs_FATIsEndOfChainMarker:00000000 $t
    {standard input}:2849   .text.afatfs_FATIsEndOfChainMarker:00000000 afatfs_FATIsEndOfChainMarker
    {standard input}:2898   .text.afatfs_FATIsEndOfChainMarker:00000030 $d
    {standard input}:2903   .text.afatfs_FATGetNextCluster:00000000 $t
    {standard input}:2907   .text.afatfs_FATGetNextCluster:00000000 afatfs_FATGetNextCluster
    {standard input}:2995   .text.afatfs_FATGetNextCluster:00000080 $d
    {standard input}:3000   .text.afatfs_FATSetNextCluster:00000000 $t
    {standard input}:3004   .text.afatfs_FATSetNextCluster:00000000 afatfs_FATSetNextCluster
    {standard input}:3087   .text.afatfs_FATSetNextCluster:00000070 $d
    {standard input}:3092   .text.afatfs_fileUpdateFilesize:00000000 $t
    {standard input}:3096   .text.afatfs_fileUpdateFilesize:00000000 afatfs_fileUpdateFilesize
    {standard input}:3147   .text.afatfs_fileUnlockCacheSector:00000000 $t
    {standard input}:3151   .text.afatfs_fileUnlockCacheSector:00000000 afatfs_fileUnlockCacheSector
    {standard input}:3256   .text.afatfs_fileUnlockCacheSector:000000a0 $d
    {standard input}:3261   .text.afatfs_findClusterWithCondition:00000000 $t
    {standard input}:3265   .text.afatfs_findClusterWithCondition:00000000 afatfs_findClusterWithCondition
    {standard input}:3567   .text.afatfs_findClusterWithCondition:000001d4 $d
    {standard input}:3572   .text.afatfs_fileGetNextCluster:00000000 $t
    {standard input}:3576   .text.afatfs_fileGetNextCluster:00000000 afatfs_fileGetNextCluster
    {standard input}:3663   .text.afatfs_fileGetNextCluster:0000006c $d
    {standard input}:3668   .text.afatfs_FATFillWithPattern:00000000 $t
    {standard input}:3672   .text.afatfs_FATFillWithPattern:00000000 afatfs_FATFillWithPattern
    {standard input}:3988   .text.afatfs_FATFillWithPattern:000001f8 $d
    {standard input}:3993   .text.afatfs_saveDirectoryEntry:00000000 $t
    {standard input}:3997   .text.afatfs_saveDirectoryEntry:00000000 afatfs_saveDirectoryEntry
    {standard input}:4144   .text.afatfs_appendRegularFreeClusterContinue:00000000 $t
    {standard input}:4148   .text.afatfs_appendRegularFreeClusterContinue:00000000 afatfs_appendRegularFreeClusterContinue
    {standard input}:4180   .text.afatfs_appendRegularFreeClusterContinue:00000020 $d
    {standard input}:4186   .text.afatfs_appendRegularFreeClusterContinue:00000038 $t
    {standard input}:4207   .text.afatfs_appendRegularFreeClusterContinue:00000060 $d
    {standard input}:4211   .text.afatfs_appendRegularFreeClusterContinue:00000070 $t
    {standard input}:4391   .text.afatfs_appendRegularFreeClusterContinue:00000174 $d
    {standard input}:4396   .text.afatfs_appendRegularFreeClusterInitOperationState:00000000 $t
    {standard input}:4400   .text.afatfs_appendRegularFreeClusterInitOperationState:00000000 afatfs_appendRegularFreeClusterInitOperationState
    {standard input}:4450   .text.afatfs_appendRegularFreeClusterInitOperationState:00000030 $d
    {standard input}:4455   .text.afatfs_appendRegularFreeCluster:00000000 $t
    {standard input}:4459   .text.afatfs_appendRegularFreeCluster:00000000 afatfs_appendRegularFreeCluster
    {standard input}:4534   .text.afatfs_appendRegularFreeCluster:00000060 $d
    {standard input}:4539   .text.afatfs_superClusterSize:00000000 $t
    {standard input}:4543   .text.afatfs_superClusterSize:00000000 afatfs_superClusterSize
    {standard input}:4572   .text.afatfs_appendSuperclusterContinue:00000000 $t
    {standard input}:4576   .text.afatfs_appendSuperclusterContinue:00000000 afatfs_appendSuperclusterContinue
    {standard input}:4612   .text.afatfs_appendSuperclusterContinue:00000024 $d
    {standard input}:4616   .text.afatfs_appendSuperclusterContinue:00000034 $t
    {standard input}:4798   .text.afatfs_appendSuperclusterContinue:0000016c $d
    {standard input}:4804   .text.afatfs_appendSupercluster:00000000 $t
    {standard input}:4808   .text.afatfs_appendSupercluster:00000000 afatfs_appendSupercluster
    {standard input}:4906   .text.afatfs_appendSupercluster:00000084 $d
    {standard input}:4911   .text.afatfs_appendFreeCluster:00000000 $t
    {standard input}:4915   .text.afatfs_appendFreeCluster:00000000 afatfs_appendFreeCluster
    {standard input}:4968   .text.afatfs_isEndOfAllocatedFile:00000000 $t
    {standard input}:4972   .text.afatfs_isEndOfAllocatedFile:00000000 afatfs_isEndOfAllocatedFile
    {standard input}:5047   .text.afatfs_isEndOfAllocatedFile:0000005c $d
    {standard input}:5052   .text.afatfs_fileRetainCursorSectorForRead:00000000 $t
    {standard input}:5056   .text.afatfs_fileRetainCursorSectorForRead:00000000 afatfs_fileRetainCursorSectorForRead
    {standard input}:5183   .text.afatfs_fileRetainCursorSectorForRead:000000bc $d
    {standard input}:5188   .text.afatfs_fileLockCursorSectorForWrite:00000000 $t
    {standard input}:5192   .text.afatfs_fileLockCursorSectorForWrite:00000000 afatfs_fileLockCursorSectorForWrite
    {standard input}:5392   .text.afatfs_fileLockCursorSectorForWrite:0000014c $d
    {standard input}:5397   .text.afatfs_fseekAtomic:00000000 $t
    {standard input}:5401   .text.afatfs_fseekAtomic:00000000 afatfs_fseekAtomic
    {standard input}:5579   .text.afatfs_fseekInternalContinue:00000000 $t
    {standard input}:5583   .text.afatfs_fseekInternalContinue:00000000 afatfs_fseekInternalContinue
    {standard input}:5741   .text.afatfs_fseekInternal:00000000 $t
    {standard input}:5745   .text.afatfs_fseekInternal:00000000 afatfs_fseekInternal
    {standard input}:5831   .text.afatfs_fseek:00000000 $t
    {standard input}:5836   .text.afatfs_fseek:00000000 afatfs_fseek
    {standard input}:5987   .text.afatfs_ftell:00000000 $t
    {standard input}:5992   .text.afatfs_ftell:00000000 afatfs_ftell
    {standard input}:6043   .text.afatfs_findNext:00000000 $t
    {standard input}:6048   .text.afatfs_findNext:00000000 afatfs_findNext
    {standard input}:6164   .text.afatfs_findLast:00000000 $t
    {standard input}:6169   .text.afatfs_findLast:00000000 afatfs_findLast
    {standard input}:6203   .text.afatfs_findFirst:00000000 $t
    {standard input}:6208   .text.afatfs_findFirst:00000000 afatfs_findFirst
    {standard input}:6251   .text.afatfs_extendSubdirectoryContinue:00000000 $t
    {standard input}:6255   .text.afatfs_extendSubdirectoryContinue:00000000 afatfs_extendSubdirectoryContinue
    {standard input}:6287   .text.afatfs_extendSubdirectoryContinue:00000020 $d
    {standard input}:6291   .text.afatfs_extendSubdirectoryContinue:00000030 $t
    {standard input}:6548   .text.afatfs_extendSubdirectoryContinue:000001e0 $d
    {standard input}:6553   .text.afatfs_extendSubdirectory:00000000 $t
    {standard input}:6557   .text.afatfs_extendSubdirectory:00000000 afatfs_extendSubdirectory
    {standard input}:6650   .text.afatfs_allocateDirectoryEntry:00000000 $t
    {standard input}:6654   .text.afatfs_allocateDirectoryEntry:00000000 afatfs_allocateDirectoryEntry
    {standard input}:6769   .text.afatfs_allocateFileHandle:00000000 $t
    {standard input}:6773   .text.afatfs_allocateFileHandle:00000000 afatfs_allocateFileHandle
    {standard input}:6854   .text.afatfs_allocateFileHandle:0000005c $d
    {standard input}:6859   .text.afatfs_ftruncateContinue:00000000 $t
    {standard input}:6863   .text.afatfs_ftruncateContinue:00000000 afatfs_ftruncateContinue
    {standard input}:6901   .text.afatfs_ftruncateContinue:00000028 $d
    {standard input}:6906   .text.afatfs_ftruncateContinue:0000003c $t
    {standard input}:7174   .text.afatfs_ftruncateContinue:00000200 $d
    {standard input}:7180   .text.afatfs_ftruncate:00000000 $t
    {standard input}:7185   .text.afatfs_ftruncate:00000000 afatfs_ftruncate
    {standard input}:7317   .text.afatfs_ftruncate:000000c4 $d
    {standard input}:7322   .text.afatfs_fileLoadDirectoryEntry:00000000 $t
    {standard input}:7326   .text.afatfs_fileLoadDirectoryEntry:00000000 afatfs_fileLoadDirectoryEntry
    {standard input}:7392   .text.afatfs_createFileContinue:00000000 $t
    {standard input}:7396   .text.afatfs_createFileContinue:00000000 afatfs_createFileContinue
    {standard input}:7428   .text.afatfs_createFileContinue:00000020 $d
    {standard input}:7433   .text.afatfs_createFileContinue:00000034 $t
    {standard input}:7814   .text.afatfs_createFileContinue:000002a8 $d
    {standard input}:7821   .text.afatfs_initFileHandle:00000000 $t
    {standard input}:7825   .text.afatfs_initFileHandle:00000000 afatfs_initFileHandle
    {standard input}:7869   .text.afatfs_funlinkContinue:00000000 $t
    {standard input}:7873   .text.afatfs_funlinkContinue:00000000 afatfs_funlinkContinue
    {standard input}:8333   .text.afatfs_fclose:00000000 afatfs_fclose
    {standard input}:7929   .text.afatfs_funlink:00000000 $t
    {standard input}:7934   .text.afatfs_funlink:00000000 afatfs_funlink
    {standard input}:8009   .rodata:00000000 $d
    {standard input}:8013   .text.afatfs_createFile:00000000 $t
    {standard input}:8017   .text.afatfs_createFile:00000000 afatfs_createFile
    {standard input}:8167   .text.afatfs_createFile:000000e8 $d
    {standard input}:8173   .text.afatfs_fcloseContinue:00000000 $t
    {standard input}:8177   .text.afatfs_fcloseContinue:00000000 afatfs_fcloseContinue
    {standard input}:8323   .text.afatfs_fcloseContinue:000000e4 $d
    {standard input}:8328   .text.afatfs_fclose:00000000 $t
    {standard input}:8407   .text.afatfs_mkdir:00000000 $t
    {standard input}:8412   .text.afatfs_mkdir:00000000 afatfs_mkdir
    {standard input}:8478   .text.afatfs_chdir:00000000 $t
    {standard input}:8483   .text.afatfs_chdir:00000000 afatfs_chdir
    {standard input}:8632   .text.afatfs_chdir:000000e4 $d
    {standard input}:8638   .text.afatfs_fopen:00000000 $t
    {standard input}:8643   .text.afatfs_fopen:00000000 afatfs_fopen
    {standard input}:8778   .text.afatfs_fputc:00000000 $t
    {standard input}:8783   .text.afatfs_fputc:00000000 afatfs_fputc
    {standard input}:8863   .text.afatfs_fwrite:00000000 afatfs_fwrite
    {standard input}:8858   .text.afatfs_fwrite:00000000 $t
    {standard input}:9021   .text.afatfs_fwrite:000000e0 $d
    {standard input}:9026   .text.afatfs_fread:00000000 $t
    {standard input}:9031   .text.afatfs_fread:00000000 afatfs_fread
    {standard input}:9198   .text.afatfs_feof:00000000 $t
    {standard input}:9203   .text.afatfs_feof:00000000 afatfs_feof
    {standard input}:9249   .text.afatfs_fileOperationContinue:00000000 $t
    {standard input}:9253   .text.afatfs_fileOperationContinue:00000000 afatfs_fileOperationContinue
    {standard input}:9288   .text.afatfs_fileOperationContinue:00000024 $d
    {standard input}:9298   .text.afatfs_fileOperationContinue:0000004c $t
    {standard input}:9362   .text.afatfs_fileOperationsPoll:00000000 $t
    {standard input}:9366   .text.afatfs_fileOperationsPoll:00000000 afatfs_fileOperationsPoll
    {standard input}:9428   .text.afatfs_fileOperationsPoll:00000044 $d
    {standard input}:9434   .text.afatfs_getContiguousFreeSpace:00000000 $t
    {standard input}:9439   .text.afatfs_getContiguousFreeSpace:00000000 afatfs_getContiguousFreeSpace
    {standard input}:9472   .text.afatfs_getContiguousFreeSpace:00000018 $d
    {standard input}:9477   .text.afatfs_findLargestContiguousFreeBlockBegin:00000000 $t
    {standard input}:9481   .text.afatfs_findLargestContiguousFreeBlockBegin:00000000 afatfs_findLargestContiguousFreeBlockBegin
    {standard input}:9534   .text.afatfs_findLargestContiguousFreeBlockBegin:00000048 $d
    {standard input}:9539   .text.afatfs_findLargestContiguousFreeBlockContinue:00000000 $t
    {standard input}:9543   .text.afatfs_findLargestContiguousFreeBlockContinue:00000000 afatfs_findLargestContiguousFreeBlockContinue
    {standard input}:9596   .text.afatfs_findLargestContiguousFreeBlockContinue:00000044 $d
    {standard input}:9600   .text.afatfs_findLargestContiguousFreeBlockContinue:00000054 $t
    {standard input}:9681   .text.afatfs_findLargestContiguousFreeBlockContinue:000000e4 $d
    {standard input}:9685   .text.afatfs_findLargestContiguousFreeBlockContinue:000000f4 $t
    {standard input}:9768   .text.afatfs_findLargestContiguousFreeBlockContinue:00000158 $d
    {standard input}:9774   .text.afatfs_freeFileCreated:00000000 $t
    {standard input}:9778   .text.afatfs_freeFileCreated:00000000 afatfs_freeFileCreated
    {standard input}:9842   .text.afatfs_freeFileCreated:00000044 $d
    {standard input}:9851   .text.afatfs_initContinue:00000000 $t
    {standard input}:9855   .text.afatfs_initContinue:00000000 afatfs_initContinue
    {standard input}:9883   .text.afatfs_initContinue:00000018 $d
    {standard input}:9891   .text.afatfs_initContinue:00000038 $t
    {standard input}:10210  .text.afatfs_initContinue:00000254 $d
    {standard input}:10219  .text.afatfs_poll:00000000 $t
    {standard input}:10224  .text.afatfs_poll:00000000 afatfs_poll
    {standard input}:10269  .text.afatfs_poll:00000030 $d
    {standard input}:10274  .text.afatfs_getFilesystemState:00000000 $t
    {standard input}:10279  .text.afatfs_getFilesystemState:00000000 afatfs_getFilesystemState
    {standard input}:10310  .text.afatfs_getFilesystemState:00000014 $d
    {standard input}:10315  .text.afatfs_getLastError:00000000 $t
    {standard input}:10320  .text.afatfs_getLastError:00000000 afatfs_getLastError
    {standard input}:10353  .text.afatfs_getLastError:00000018 $d
    {standard input}:10358  .text.afatfs_init:00000000 $t
    {standard input}:10363  .text.afatfs_init:00000000 afatfs_init
    {standard input}:10404  .text.afatfs_init:00000024 $d
    {standard input}:10409  .text.afatfs_destroy:00000000 $t
    {standard input}:10414  .text.afatfs_destroy:00000000 afatfs_destroy
    {standard input}:10584  .text.afatfs_destroy:000000f8 $d
    {standard input}:10591  .text.afatfs_getFreeBufferSpace:00000000 $t
    {standard input}:10596  .text.afatfs_getFreeBufferSpace:00000000 afatfs_getFreeBufferSpace
    {standard input}:10689  .text.afatfs_getFreeBufferSpace:00000074 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
sdcard_beginWriteBlocks
sdcard_writeBlock
sdcard_readBlock
fat32_decodeClusterNumber
fat32_isEndOfChainMarker
fat16_isEndOfChainMarker
fat_isFreeSpace
memset
fat_isDirectoryEntryEmpty
fat_isDirectoryEntryTerminator
strncmp
memcpy
rtcGetDateTime
strcmp
fat_convertFilenameToFATStyle
sdcard_poll
