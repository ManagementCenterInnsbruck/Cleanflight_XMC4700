   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "beeper.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.beeper,"ax",%progbits
  20              	 .align 2
  21              	 .global beeper
  22              	 .thumb
  23              	 .thumb_func
  25              	beeper:
  26              	.LFB560:
  27              	 .file 1 "../cleanflight/src/main/io/beeper.c"
   1:../cleanflight/src/main/io/beeper.c **** /*
   2:../cleanflight/src/main/io/beeper.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/io/beeper.c ****  *
   4:../cleanflight/src/main/io/beeper.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/io/beeper.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/io/beeper.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/io/beeper.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/io/beeper.c ****  * any later version.
   9:../cleanflight/src/main/io/beeper.c ****  *
  10:../cleanflight/src/main/io/beeper.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/io/beeper.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/io/beeper.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/io/beeper.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/io/beeper.c ****  *
  15:../cleanflight/src/main/io/beeper.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/io/beeper.c ****  * along with this software.
  17:../cleanflight/src/main/io/beeper.c ****  *
  18:../cleanflight/src/main/io/beeper.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/io/beeper.c ****  */
  20:../cleanflight/src/main/io/beeper.c **** 
  21:../cleanflight/src/main/io/beeper.c **** #include "stdbool.h"
  22:../cleanflight/src/main/io/beeper.c **** #include "stdint.h"
  23:../cleanflight/src/main/io/beeper.c **** 
  24:../cleanflight/src/main/io/beeper.c **** #include "platform.h"
  25:../cleanflight/src/main/io/beeper.c **** 
  26:../cleanflight/src/main/io/beeper.c **** #include "common/utils.h"
  27:../cleanflight/src/main/io/beeper.c **** 
  28:../cleanflight/src/main/io/beeper.c **** #include "config/feature.h"
  29:../cleanflight/src/main/io/beeper.c **** 
  30:../cleanflight/src/main/io/beeper.c **** #include "drivers/io.h"
  31:../cleanflight/src/main/io/beeper.c **** #include "drivers/pwm_output.h"
  32:../cleanflight/src/main/io/beeper.c **** #include "drivers/sound_beeper.h"
  33:../cleanflight/src/main/io/beeper.c **** #include "drivers/system.h"
  34:../cleanflight/src/main/io/beeper.c **** #include "drivers/time.h"
  35:../cleanflight/src/main/io/beeper.c **** 
  36:../cleanflight/src/main/io/beeper.c **** #include "flight/mixer.h"
  37:../cleanflight/src/main/io/beeper.c **** 
  38:../cleanflight/src/main/io/beeper.c **** #include "fc/config.h"
  39:../cleanflight/src/main/io/beeper.c **** #include "fc/fc_core.h"
  40:../cleanflight/src/main/io/beeper.c **** #include "fc/runtime_config.h"
  41:../cleanflight/src/main/io/beeper.c **** 
  42:../cleanflight/src/main/io/beeper.c **** #include "io/statusindicator.h"
  43:../cleanflight/src/main/io/beeper.c **** #include "io/vtx_control.h"
  44:../cleanflight/src/main/io/beeper.c **** 
  45:../cleanflight/src/main/io/beeper.c **** #ifdef USE_GPS
  46:../cleanflight/src/main/io/beeper.c **** #include "io/gps.h"
  47:../cleanflight/src/main/io/beeper.c **** #endif
  48:../cleanflight/src/main/io/beeper.c **** 
  49:../cleanflight/src/main/io/beeper.c **** #include "pg/beeper.h"
  50:../cleanflight/src/main/io/beeper.c **** 
  51:../cleanflight/src/main/io/beeper.c **** #include "sensors/battery.h"
  52:../cleanflight/src/main/io/beeper.c **** #include "sensors/sensors.h"
  53:../cleanflight/src/main/io/beeper.c **** 
  54:../cleanflight/src/main/io/beeper.c **** #include "beeper.h"
  55:../cleanflight/src/main/io/beeper.c **** 
  56:../cleanflight/src/main/io/beeper.c **** #ifdef BEEPER_INVERTED
  57:../cleanflight/src/main/io/beeper.c **** #define IS_OPEN_DRAIN   false
  58:../cleanflight/src/main/io/beeper.c **** #define IS_INVERTED     true
  59:../cleanflight/src/main/io/beeper.c **** #else
  60:../cleanflight/src/main/io/beeper.c **** #define IS_OPEN_DRAIN   true
  61:../cleanflight/src/main/io/beeper.c **** #define IS_INVERTED     false
  62:../cleanflight/src/main/io/beeper.c **** #endif
  63:../cleanflight/src/main/io/beeper.c **** 
  64:../cleanflight/src/main/io/beeper.c **** #ifdef USE_BEEPER
  65:../cleanflight/src/main/io/beeper.c **** #ifndef BEEPER_PWM_HZ
  66:../cleanflight/src/main/io/beeper.c **** #define BEEPER_PWM_HZ   0
  67:../cleanflight/src/main/io/beeper.c **** #endif
  68:../cleanflight/src/main/io/beeper.c **** #else
  69:../cleanflight/src/main/io/beeper.c **** #define BEEPER_PIN      NONE
  70:../cleanflight/src/main/io/beeper.c **** #define BEEPER_PWM_HZ   0
  71:../cleanflight/src/main/io/beeper.c **** #endif
  72:../cleanflight/src/main/io/beeper.c **** 
  73:../cleanflight/src/main/io/beeper.c **** #if FLASH_SIZE > 64
  74:../cleanflight/src/main/io/beeper.c **** #define BEEPER_NAMES
  75:../cleanflight/src/main/io/beeper.c **** #endif
  76:../cleanflight/src/main/io/beeper.c **** 
  77:../cleanflight/src/main/io/beeper.c **** #define MAX_MULTI_BEEPS 64   //size limit for 'beep_multiBeeps[]'
  78:../cleanflight/src/main/io/beeper.c **** 
  79:../cleanflight/src/main/io/beeper.c **** #define BEEPER_COMMAND_REPEAT 0xFE
  80:../cleanflight/src/main/io/beeper.c **** #define BEEPER_COMMAND_STOP   0xFF
  81:../cleanflight/src/main/io/beeper.c **** 
  82:../cleanflight/src/main/io/beeper.c **** #ifdef USE_DSHOT
  83:../cleanflight/src/main/io/beeper.c **** static timeUs_t lastDshotBeaconCommandTimeUs;
  84:../cleanflight/src/main/io/beeper.c **** #endif
  85:../cleanflight/src/main/io/beeper.c **** 
  86:../cleanflight/src/main/io/beeper.c **** #ifdef USE_BEEPER
  87:../cleanflight/src/main/io/beeper.c **** /* Beeper Sound Sequences: (Square wave generation)
  88:../cleanflight/src/main/io/beeper.c ****  * Sequence must end with 0xFF or 0xFE. 0xFE repeats the sequence from
  89:../cleanflight/src/main/io/beeper.c ****  * start when 0xFF stops the sound when it's completed.
  90:../cleanflight/src/main/io/beeper.c ****  *
  91:../cleanflight/src/main/io/beeper.c ****  * "Sound" Sequences are made so that 1st, 3rd, 5th.. are the delays how
  92:../cleanflight/src/main/io/beeper.c ****  * long the beeper is on and 2nd, 4th, 6th.. are the delays how long beeper
  93:../cleanflight/src/main/io/beeper.c ****  * is off. Delays are in milliseconds/10 (i.e., 5 => 50ms).
  94:../cleanflight/src/main/io/beeper.c ****  */
  95:../cleanflight/src/main/io/beeper.c **** // short fast beep
  96:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_shortBeep[] = {
  97:../cleanflight/src/main/io/beeper.c ****     10, 10, BEEPER_COMMAND_STOP
  98:../cleanflight/src/main/io/beeper.c **** };
  99:../cleanflight/src/main/io/beeper.c **** // arming beep
 100:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_armingBeep[] = {
 101:../cleanflight/src/main/io/beeper.c ****     30, 5, 5, 5, BEEPER_COMMAND_STOP
 102:../cleanflight/src/main/io/beeper.c **** };
 103:../cleanflight/src/main/io/beeper.c **** // armed beep (first pause, then short beep)
 104:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_armedBeep[] = {
 105:../cleanflight/src/main/io/beeper.c ****     0, 245, 10, 5, BEEPER_COMMAND_STOP
 106:../cleanflight/src/main/io/beeper.c **** };
 107:../cleanflight/src/main/io/beeper.c **** // disarming beeps
 108:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_disarmBeep[] = {
 109:../cleanflight/src/main/io/beeper.c ****     15, 5, 15, 5, BEEPER_COMMAND_STOP
 110:../cleanflight/src/main/io/beeper.c **** };
 111:../cleanflight/src/main/io/beeper.c **** // beeps while stick held in disarm position (after pause)
 112:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_disarmRepeatBeep[] = {
 113:../cleanflight/src/main/io/beeper.c ****     0, 100, 10, BEEPER_COMMAND_STOP
 114:../cleanflight/src/main/io/beeper.c **** };
 115:../cleanflight/src/main/io/beeper.c **** // Long beep and pause after that
 116:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_lowBatteryBeep[] = {
 117:../cleanflight/src/main/io/beeper.c ****     25, 50, BEEPER_COMMAND_STOP
 118:../cleanflight/src/main/io/beeper.c **** };
 119:../cleanflight/src/main/io/beeper.c **** // critical battery beep
 120:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_critBatteryBeep[] = {
 121:../cleanflight/src/main/io/beeper.c ****     50, 2, BEEPER_COMMAND_STOP
 122:../cleanflight/src/main/io/beeper.c **** };
 123:../cleanflight/src/main/io/beeper.c **** 
 124:../cleanflight/src/main/io/beeper.c **** // transmitter-signal-lost tone
 125:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_txLostBeep[] = {
 126:../cleanflight/src/main/io/beeper.c ****     50, 50, BEEPER_COMMAND_STOP
 127:../cleanflight/src/main/io/beeper.c **** };
 128:../cleanflight/src/main/io/beeper.c **** // SOS morse code:
 129:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_sos[] = {
 130:../cleanflight/src/main/io/beeper.c ****     10, 10, 10, 10, 10, 40, 40, 10, 40, 10, 40, 40, 10, 10, 10, 10, 10, 70, BEEPER_COMMAND_STOP
 131:../cleanflight/src/main/io/beeper.c **** };
 132:../cleanflight/src/main/io/beeper.c **** // Arming when GPS is fixed
 133:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_armedGpsFix[] = {
 134:../cleanflight/src/main/io/beeper.c ****     5, 5, 15, 5, 5, 5, 15, 30, BEEPER_COMMAND_STOP
 135:../cleanflight/src/main/io/beeper.c **** };
 136:../cleanflight/src/main/io/beeper.c **** // Ready beeps. When gps has fix and copter is ready to fly.
 137:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_readyBeep[] = {
 138:../cleanflight/src/main/io/beeper.c ****     4, 5, 4, 5, 8, 5, 15, 5, 8, 5, 4, 5, 4, 5, BEEPER_COMMAND_STOP
 139:../cleanflight/src/main/io/beeper.c **** };
 140:../cleanflight/src/main/io/beeper.c **** // 2 fast short beeps
 141:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_2shortBeeps[] = {
 142:../cleanflight/src/main/io/beeper.c ****     5, 5, 5, 5, BEEPER_COMMAND_STOP
 143:../cleanflight/src/main/io/beeper.c **** };
 144:../cleanflight/src/main/io/beeper.c **** // 2 longer beeps
 145:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_2longerBeeps[] = {
 146:../cleanflight/src/main/io/beeper.c ****     20, 15, 35, 5, BEEPER_COMMAND_STOP
 147:../cleanflight/src/main/io/beeper.c **** };
 148:../cleanflight/src/main/io/beeper.c **** // 3 beeps
 149:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_gyroCalibrated[] = {
 150:../cleanflight/src/main/io/beeper.c ****     20, 10, 20, 10, 20, 10, BEEPER_COMMAND_STOP
 151:../cleanflight/src/main/io/beeper.c **** };
 152:../cleanflight/src/main/io/beeper.c **** 
 153:../cleanflight/src/main/io/beeper.c **** // Cam connection opened
 154:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_camOpenBeep[] = {
 155:../cleanflight/src/main/io/beeper.c ****     5, 15, 10, 15, 20, BEEPER_COMMAND_STOP
 156:../cleanflight/src/main/io/beeper.c **** };
 157:../cleanflight/src/main/io/beeper.c **** 
 158:../cleanflight/src/main/io/beeper.c **** // Cam connection close
 159:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_camCloseBeep[] = {
 160:../cleanflight/src/main/io/beeper.c ****     10, 8, 5, BEEPER_COMMAND_STOP
 161:../cleanflight/src/main/io/beeper.c **** };
 162:../cleanflight/src/main/io/beeper.c **** 
 163:../cleanflight/src/main/io/beeper.c **** // RC Smoothing filter not initialized - 3 short + 1 long
 164:../cleanflight/src/main/io/beeper.c **** static const uint8_t beep_rcSmoothingInitFail[] = {
 165:../cleanflight/src/main/io/beeper.c ****     10, 10, 10, 10, 10, 10, 50, 25, BEEPER_COMMAND_STOP
 166:../cleanflight/src/main/io/beeper.c **** };
 167:../cleanflight/src/main/io/beeper.c **** 
 168:../cleanflight/src/main/io/beeper.c **** // array used for variable # of beeps (reporting GPS sat count, etc)
 169:../cleanflight/src/main/io/beeper.c **** static uint8_t beep_multiBeeps[MAX_MULTI_BEEPS + 1];
 170:../cleanflight/src/main/io/beeper.c **** 
 171:../cleanflight/src/main/io/beeper.c **** #define BEEPER_CONFIRMATION_BEEP_DURATION 2
 172:../cleanflight/src/main/io/beeper.c **** #define BEEPER_CONFIRMATION_BEEP_GAP_DURATION 20
 173:../cleanflight/src/main/io/beeper.c **** 
 174:../cleanflight/src/main/io/beeper.c **** #define BEEPER_WARNING_LONG_BEEP_MULTIPLIER 5
 175:../cleanflight/src/main/io/beeper.c **** 
 176:../cleanflight/src/main/io/beeper.c **** #define BEEPER_WARNING_BEEP_1_DURATION 20
 177:../cleanflight/src/main/io/beeper.c **** #define BEEPER_WARNING_BEEP_2_DURATION 5
 178:../cleanflight/src/main/io/beeper.c **** #define BEEPER_WARNING_BEEP_GAP_DURATION 10
 179:../cleanflight/src/main/io/beeper.c **** 
 180:../cleanflight/src/main/io/beeper.c **** // Beeper off = 0 Beeper on = 1
 181:../cleanflight/src/main/io/beeper.c **** static uint8_t beeperIsOn = 0;
 182:../cleanflight/src/main/io/beeper.c **** 
 183:../cleanflight/src/main/io/beeper.c **** // Place in current sequence
 184:../cleanflight/src/main/io/beeper.c **** static uint16_t beeperPos = 0;
 185:../cleanflight/src/main/io/beeper.c **** // Time when beeper routine must act next time
 186:../cleanflight/src/main/io/beeper.c **** static uint32_t beeperNextToggleTime = 0;
 187:../cleanflight/src/main/io/beeper.c **** // Time of last arming beep in microseconds (for blackbox)
 188:../cleanflight/src/main/io/beeper.c **** static uint32_t armingBeepTimeMicros = 0;
 189:../cleanflight/src/main/io/beeper.c **** 
 190:../cleanflight/src/main/io/beeper.c **** static void beeperProcessCommand(timeUs_t currentTimeUs);
 191:../cleanflight/src/main/io/beeper.c **** 
 192:../cleanflight/src/main/io/beeper.c **** typedef struct beeperTableEntry_s {
 193:../cleanflight/src/main/io/beeper.c ****     uint8_t mode;
 194:../cleanflight/src/main/io/beeper.c ****     uint8_t priority; // 0 = Highest
 195:../cleanflight/src/main/io/beeper.c ****     const uint8_t *sequence;
 196:../cleanflight/src/main/io/beeper.c **** #ifdef BEEPER_NAMES
 197:../cleanflight/src/main/io/beeper.c ****     const char *name;
 198:../cleanflight/src/main/io/beeper.c **** #endif
 199:../cleanflight/src/main/io/beeper.c **** } beeperTableEntry_t;
 200:../cleanflight/src/main/io/beeper.c **** 
 201:../cleanflight/src/main/io/beeper.c **** #ifdef BEEPER_NAMES
 202:../cleanflight/src/main/io/beeper.c **** #define BEEPER_ENTRY(a,b,c,d) a,b,c,d
 203:../cleanflight/src/main/io/beeper.c **** #else
 204:../cleanflight/src/main/io/beeper.c **** #define BEEPER_ENTRY(a,b,c,d) a,b,c
 205:../cleanflight/src/main/io/beeper.c **** #endif
 206:../cleanflight/src/main/io/beeper.c **** 
 207:../cleanflight/src/main/io/beeper.c **** static const beeperTableEntry_t beeperTable[] = {
 208:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_GYRO_CALIBRATED,       0, beep_gyroCalibrated,   "GYRO_CALIBRATED") },
 209:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_RX_LOST,               1, beep_txLostBeep,       "RX_LOST") },
 210:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_RX_LOST_LANDING,       2, beep_sos,              "RX_LOST_LANDING") },
 211:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_DISARMING,             3, beep_disarmBeep,       "DISARMING") },
 212:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_ARMING,                4, beep_armingBeep,       "ARMING")  },
 213:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_ARMING_GPS_FIX,        5, beep_armedGpsFix,      "ARMING_GPS_FIX") },
 214:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_BAT_CRIT_LOW,          6, beep_critBatteryBeep,  "BAT_CRIT_LOW") },
 215:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_BAT_LOW,               7, beep_lowBatteryBeep,   "BAT_LOW") },
 216:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_GPS_STATUS,            8, beep_multiBeeps,       "GPS_STATUS") },
 217:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_RX_SET,                9, beep_shortBeep,        "RX_SET") },
 218:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_ACC_CALIBRATION,       10, beep_2shortBeeps,     "ACC_CALIBRATION") },
 219:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_ACC_CALIBRATION_FAIL,  11, beep_2longerBeeps,    "ACC_CALIBRATION_FAIL") 
 220:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_READY_BEEP,            12, beep_readyBeep,       "READY_BEEP") },
 221:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_MULTI_BEEPS,           13, beep_multiBeeps,      "MULTI_BEEPS") }, // FIX
 222:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_DISARM_REPEAT,         14, beep_disarmRepeatBeep, "DISARM_REPEAT") },
 223:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_ARMED,                 15, beep_armedBeep,       "ARMED") },
 224:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_SYSTEM_INIT,           16, NULL,                 "SYSTEM_INIT") },
 225:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_USB,                   17, NULL,                 "ON_USB") },
 226:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_BLACKBOX_ERASE,        18, beep_2shortBeeps,     "BLACKBOX_ERASE") },
 227:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_CRASH_FLIP_MODE,       19, beep_2longerBeeps,    "CRASH FLIP") },
 228:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_CAM_CONNECTION_OPEN,   20, beep_camOpenBeep,     "CAM_CONNECTION_OPEN") }
 229:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_CAM_CONNECTION_CLOSE,  21, beep_camCloseBeep,    "CAM_CONNECTION_CLOSED")
 230:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_RC_SMOOTHING_INIT_FAIL,22, beep_rcSmoothingInitFail, "RC_SMOOTHING_INIT_F
 231:../cleanflight/src/main/io/beeper.c ****     { BEEPER_ENTRY(BEEPER_ALL,                   23, NULL,                 "ALL") },
 232:../cleanflight/src/main/io/beeper.c **** };
 233:../cleanflight/src/main/io/beeper.c **** 
 234:../cleanflight/src/main/io/beeper.c **** static const beeperTableEntry_t *currentBeeperEntry = NULL;
 235:../cleanflight/src/main/io/beeper.c **** 
 236:../cleanflight/src/main/io/beeper.c **** #define BEEPER_TABLE_ENTRY_COUNT (sizeof(beeperTable) / sizeof(beeperTableEntry_t))
 237:../cleanflight/src/main/io/beeper.c **** 
 238:../cleanflight/src/main/io/beeper.c **** /*
 239:../cleanflight/src/main/io/beeper.c ****  * Called to activate/deactivate beeper, using the given "BEEPER_..." value.
 240:../cleanflight/src/main/io/beeper.c ****  * This function returns immediately (does not block).
 241:../cleanflight/src/main/io/beeper.c ****  */
 242:../cleanflight/src/main/io/beeper.c **** void beeper(beeperMode_e mode)
 243:../cleanflight/src/main/io/beeper.c **** {
 244:../cleanflight/src/main/io/beeper.c ****     if (
 245:../cleanflight/src/main/io/beeper.c ****         mode == BEEPER_SILENCE || (
 246:../cleanflight/src/main/io/beeper.c ****             (beeperConfigMutable()->beeper_off_flags & BEEPER_GET_FLAG(BEEPER_USB))
 247:../cleanflight/src/main/io/beeper.c ****             && getBatteryState() == BATTERY_NOT_PRESENT
 248:../cleanflight/src/main/io/beeper.c ****         )
 249:../cleanflight/src/main/io/beeper.c ****     ) {
 250:../cleanflight/src/main/io/beeper.c ****         beeperSilence();
 251:../cleanflight/src/main/io/beeper.c ****         return;
 252:../cleanflight/src/main/io/beeper.c ****     }
 253:../cleanflight/src/main/io/beeper.c **** 
 254:../cleanflight/src/main/io/beeper.c ****     const beeperTableEntry_t *selectedCandidate = NULL;
 255:../cleanflight/src/main/io/beeper.c ****     for (uint32_t i = 0; i < BEEPER_TABLE_ENTRY_COUNT; i++) {
 256:../cleanflight/src/main/io/beeper.c ****         const beeperTableEntry_t *candidate = &beeperTable[i];
 257:../cleanflight/src/main/io/beeper.c ****         if (candidate->mode != mode) {
 258:../cleanflight/src/main/io/beeper.c ****             continue;
 259:../cleanflight/src/main/io/beeper.c ****         }
 260:../cleanflight/src/main/io/beeper.c **** 
 261:../cleanflight/src/main/io/beeper.c ****         if (!currentBeeperEntry) {
 262:../cleanflight/src/main/io/beeper.c ****             selectedCandidate = candidate;
 263:../cleanflight/src/main/io/beeper.c ****             break;
 264:../cleanflight/src/main/io/beeper.c ****         }
 265:../cleanflight/src/main/io/beeper.c **** 
 266:../cleanflight/src/main/io/beeper.c ****         if (candidate->priority < currentBeeperEntry->priority) {
 267:../cleanflight/src/main/io/beeper.c ****             selectedCandidate = candidate;
 268:../cleanflight/src/main/io/beeper.c ****         }
 269:../cleanflight/src/main/io/beeper.c **** 
 270:../cleanflight/src/main/io/beeper.c ****         break;
 271:../cleanflight/src/main/io/beeper.c ****     }
 272:../cleanflight/src/main/io/beeper.c **** 
 273:../cleanflight/src/main/io/beeper.c ****     if (!selectedCandidate) {
 274:../cleanflight/src/main/io/beeper.c ****         return;
 275:../cleanflight/src/main/io/beeper.c ****     }
 276:../cleanflight/src/main/io/beeper.c **** 
 277:../cleanflight/src/main/io/beeper.c ****     currentBeeperEntry = selectedCandidate;
 278:../cleanflight/src/main/io/beeper.c **** 
 279:../cleanflight/src/main/io/beeper.c ****     beeperPos = 0;
 280:../cleanflight/src/main/io/beeper.c ****     beeperNextToggleTime = 0;
 281:../cleanflight/src/main/io/beeper.c **** }
 282:../cleanflight/src/main/io/beeper.c **** 
 283:../cleanflight/src/main/io/beeper.c **** void beeperSilence(void)
 284:../cleanflight/src/main/io/beeper.c **** {
 285:../cleanflight/src/main/io/beeper.c ****     BEEP_OFF;
 286:../cleanflight/src/main/io/beeper.c ****     warningLedDisable();
 287:../cleanflight/src/main/io/beeper.c ****     warningLedRefresh();
 288:../cleanflight/src/main/io/beeper.c **** 
 289:../cleanflight/src/main/io/beeper.c **** 
 290:../cleanflight/src/main/io/beeper.c ****     beeperIsOn = 0;
 291:../cleanflight/src/main/io/beeper.c **** 
 292:../cleanflight/src/main/io/beeper.c ****     beeperNextToggleTime = 0;
 293:../cleanflight/src/main/io/beeper.c ****     beeperPos = 0;
 294:../cleanflight/src/main/io/beeper.c **** 
 295:../cleanflight/src/main/io/beeper.c ****     currentBeeperEntry = NULL;
 296:../cleanflight/src/main/io/beeper.c **** }
 297:../cleanflight/src/main/io/beeper.c **** 
 298:../cleanflight/src/main/io/beeper.c **** /*
 299:../cleanflight/src/main/io/beeper.c ****  * Emits the given number of 20ms beeps (with 200ms spacing).
 300:../cleanflight/src/main/io/beeper.c ****  * This function returns immediately (does not block).
 301:../cleanflight/src/main/io/beeper.c ****  */
 302:../cleanflight/src/main/io/beeper.c **** void beeperConfirmationBeeps(uint8_t beepCount)
 303:../cleanflight/src/main/io/beeper.c **** {
 304:../cleanflight/src/main/io/beeper.c ****     uint32_t i = 0;
 305:../cleanflight/src/main/io/beeper.c ****     uint32_t cLimit = beepCount * 2;
 306:../cleanflight/src/main/io/beeper.c ****     if (cLimit > MAX_MULTI_BEEPS) {
 307:../cleanflight/src/main/io/beeper.c ****         cLimit = MAX_MULTI_BEEPS;
 308:../cleanflight/src/main/io/beeper.c ****     }
 309:../cleanflight/src/main/io/beeper.c ****     do {
 310:../cleanflight/src/main/io/beeper.c ****         beep_multiBeeps[i++] = BEEPER_CONFIRMATION_BEEP_DURATION;
 311:../cleanflight/src/main/io/beeper.c ****         beep_multiBeeps[i++] = BEEPER_CONFIRMATION_BEEP_GAP_DURATION;
 312:../cleanflight/src/main/io/beeper.c ****     } while (i < cLimit);
 313:../cleanflight/src/main/io/beeper.c ****     beep_multiBeeps[i] = BEEPER_COMMAND_STOP;
 314:../cleanflight/src/main/io/beeper.c **** 
 315:../cleanflight/src/main/io/beeper.c ****     beeper(BEEPER_MULTI_BEEPS);
 316:../cleanflight/src/main/io/beeper.c **** }
 317:../cleanflight/src/main/io/beeper.c **** 
 318:../cleanflight/src/main/io/beeper.c **** void beeperWarningBeeps(uint8_t beepCount)
 319:../cleanflight/src/main/io/beeper.c **** {
 320:../cleanflight/src/main/io/beeper.c ****     uint8_t longBeepCount = beepCount / BEEPER_WARNING_LONG_BEEP_MULTIPLIER;
 321:../cleanflight/src/main/io/beeper.c ****     uint8_t shortBeepCount = beepCount % BEEPER_WARNING_LONG_BEEP_MULTIPLIER;
 322:../cleanflight/src/main/io/beeper.c **** 
 323:../cleanflight/src/main/io/beeper.c ****     unsigned i = 0;
 324:../cleanflight/src/main/io/beeper.c **** 
 325:../cleanflight/src/main/io/beeper.c ****     unsigned count = 0;
 326:../cleanflight/src/main/io/beeper.c ****     while (i < MAX_MULTI_BEEPS - 1 && count < WARNING_FLASH_COUNT) {
 327:../cleanflight/src/main/io/beeper.c ****         beep_multiBeeps[i++] = WARNING_FLASH_DURATION_MS / 10;
 328:../cleanflight/src/main/io/beeper.c ****         if (++count < WARNING_FLASH_COUNT) {
 329:../cleanflight/src/main/io/beeper.c ****             beep_multiBeeps[i++] = WARNING_FLASH_DURATION_MS / 10;
 330:../cleanflight/src/main/io/beeper.c ****         } else {
 331:../cleanflight/src/main/io/beeper.c ****             beep_multiBeeps[i++] = WARNING_PAUSE_DURATION_MS / 10;
 332:../cleanflight/src/main/io/beeper.c ****         }
 333:../cleanflight/src/main/io/beeper.c ****     }
 334:../cleanflight/src/main/io/beeper.c **** 
 335:../cleanflight/src/main/io/beeper.c ****     while (i < MAX_MULTI_BEEPS - 1 && longBeepCount > 0) {
 336:../cleanflight/src/main/io/beeper.c ****         beep_multiBeeps[i++] = WARNING_CODE_DURATION_LONG_MS / 10;
 337:../cleanflight/src/main/io/beeper.c ****         if (--longBeepCount > 0) {
 338:../cleanflight/src/main/io/beeper.c ****             beep_multiBeeps[i++] = WARNING_CODE_DURATION_LONG_MS / 10;
 339:../cleanflight/src/main/io/beeper.c ****         } else {
 340:../cleanflight/src/main/io/beeper.c ****             beep_multiBeeps[i++] = WARNING_PAUSE_DURATION_MS / 10;
 341:../cleanflight/src/main/io/beeper.c ****         }
 342:../cleanflight/src/main/io/beeper.c ****     }
 343:../cleanflight/src/main/io/beeper.c **** 
 344:../cleanflight/src/main/io/beeper.c ****     while (i < MAX_MULTI_BEEPS - 1 && shortBeepCount > 0) {
 345:../cleanflight/src/main/io/beeper.c ****         beep_multiBeeps[i++] = WARNING_CODE_DURATION_SHORT_MS / 10;
 346:../cleanflight/src/main/io/beeper.c ****         if (--shortBeepCount > 0) {
 347:../cleanflight/src/main/io/beeper.c ****             beep_multiBeeps[i++] = WARNING_CODE_DURATION_LONG_MS / 10;
 348:../cleanflight/src/main/io/beeper.c ****         }
 349:../cleanflight/src/main/io/beeper.c ****     }
 350:../cleanflight/src/main/io/beeper.c **** 
 351:../cleanflight/src/main/io/beeper.c ****     beep_multiBeeps[i] = BEEPER_COMMAND_STOP;
 352:../cleanflight/src/main/io/beeper.c **** 
 353:../cleanflight/src/main/io/beeper.c ****     beeper(BEEPER_MULTI_BEEPS);
 354:../cleanflight/src/main/io/beeper.c **** }
 355:../cleanflight/src/main/io/beeper.c **** 
 356:../cleanflight/src/main/io/beeper.c **** #ifdef USE_GPS
 357:../cleanflight/src/main/io/beeper.c **** static void beeperGpsStatus(void)
 358:../cleanflight/src/main/io/beeper.c **** {
 359:../cleanflight/src/main/io/beeper.c ****     if (!(beeperConfigMutable()->beeper_off_flags & BEEPER_GET_FLAG(BEEPER_GPS_STATUS))) {
 360:../cleanflight/src/main/io/beeper.c ****         // if GPS fix then beep out number of satellites
 361:../cleanflight/src/main/io/beeper.c ****         if (STATE(GPS_FIX) && gpsSol.numSat >= 5) {
 362:../cleanflight/src/main/io/beeper.c ****             uint8_t i = 0;
 363:../cleanflight/src/main/io/beeper.c ****             do {
 364:../cleanflight/src/main/io/beeper.c ****                 beep_multiBeeps[i++] = 5;
 365:../cleanflight/src/main/io/beeper.c ****                 beep_multiBeeps[i++] = 10;
 366:../cleanflight/src/main/io/beeper.c ****             } while (i < MAX_MULTI_BEEPS && gpsSol.numSat > i / 2);
 367:../cleanflight/src/main/io/beeper.c **** 
 368:../cleanflight/src/main/io/beeper.c ****             beep_multiBeeps[i - 1] = 50; // extend last pause
 369:../cleanflight/src/main/io/beeper.c ****             beep_multiBeeps[i] = BEEPER_COMMAND_STOP;
 370:../cleanflight/src/main/io/beeper.c **** 
 371:../cleanflight/src/main/io/beeper.c ****             beeper(BEEPER_MULTI_BEEPS);    //initiate sequence
 372:../cleanflight/src/main/io/beeper.c ****         }
 373:../cleanflight/src/main/io/beeper.c ****     }
 374:../cleanflight/src/main/io/beeper.c **** }
 375:../cleanflight/src/main/io/beeper.c **** #endif
 376:../cleanflight/src/main/io/beeper.c **** 
 377:../cleanflight/src/main/io/beeper.c **** /*
 378:../cleanflight/src/main/io/beeper.c ****  * Beeper handler function to be called periodically in loop. Updates beeper
 379:../cleanflight/src/main/io/beeper.c ****  * state via time schedule.
 380:../cleanflight/src/main/io/beeper.c ****  */
 381:../cleanflight/src/main/io/beeper.c **** void beeperUpdate(timeUs_t currentTimeUs)
 382:../cleanflight/src/main/io/beeper.c **** {
 383:../cleanflight/src/main/io/beeper.c ****     // If beeper option from AUX switch has been selected
 384:../cleanflight/src/main/io/beeper.c ****     if (IS_RC_MODE_ACTIVE(BOXBEEPERON)) {
 385:../cleanflight/src/main/io/beeper.c ****         beeper(BEEPER_RX_SET);
 386:../cleanflight/src/main/io/beeper.c **** #ifdef USE_GPS
 387:../cleanflight/src/main/io/beeper.c ****     } else if (feature(FEATURE_GPS) && IS_RC_MODE_ACTIVE(BOXBEEPGPSCOUNT)) {
 388:../cleanflight/src/main/io/beeper.c ****         beeperGpsStatus();
 389:../cleanflight/src/main/io/beeper.c **** #endif
 390:../cleanflight/src/main/io/beeper.c ****     }
 391:../cleanflight/src/main/io/beeper.c **** 
 392:../cleanflight/src/main/io/beeper.c ****     // Beeper routine doesn't need to update if there aren't any sounds ongoing
 393:../cleanflight/src/main/io/beeper.c ****     if (currentBeeperEntry == NULL) {
 394:../cleanflight/src/main/io/beeper.c ****         return;
 395:../cleanflight/src/main/io/beeper.c ****     }
 396:../cleanflight/src/main/io/beeper.c **** 
 397:../cleanflight/src/main/io/beeper.c ****     if (beeperNextToggleTime > currentTimeUs) {
 398:../cleanflight/src/main/io/beeper.c ****         return;
 399:../cleanflight/src/main/io/beeper.c ****     }
 400:../cleanflight/src/main/io/beeper.c **** 
 401:../cleanflight/src/main/io/beeper.c ****     if (!beeperIsOn) {
 402:../cleanflight/src/main/io/beeper.c ****         beeperIsOn = 1;
 403:../cleanflight/src/main/io/beeper.c **** 
 404:../cleanflight/src/main/io/beeper.c **** #ifdef USE_DSHOT
 405:../cleanflight/src/main/io/beeper.c ****         if (!areMotorsRunning()
 406:../cleanflight/src/main/io/beeper.c ****             && ((currentBeeperEntry->mode == BEEPER_RX_SET && !(beeperConfig()->dshotBeaconOffFlags
 407:../cleanflight/src/main/io/beeper.c ****             || (currentBeeperEntry->mode == BEEPER_RX_LOST && !(beeperConfig()->dshotBeaconOffFlags
 408:../cleanflight/src/main/io/beeper.c **** 
 409:../cleanflight/src/main/io/beeper.c ****             if ((currentTimeUs - getLastDisarmTimeUs() > DSHOT_BEACON_GUARD_DELAY_US) && !isTryingT
 410:../cleanflight/src/main/io/beeper.c ****                 lastDshotBeaconCommandTimeUs = currentTimeUs;
 411:../cleanflight/src/main/io/beeper.c ****                 pwmWriteDshotCommand(ALL_MOTORS, getMotorCount(), beeperConfig()->dshotBeaconTone, 
 412:../cleanflight/src/main/io/beeper.c ****             }
 413:../cleanflight/src/main/io/beeper.c ****         }
 414:../cleanflight/src/main/io/beeper.c **** #endif
 415:../cleanflight/src/main/io/beeper.c **** 
 416:../cleanflight/src/main/io/beeper.c ****         if (currentBeeperEntry->sequence[beeperPos] != 0) {
 417:../cleanflight/src/main/io/beeper.c ****             if (!(beeperConfigMutable()->beeper_off_flags & BEEPER_GET_FLAG(currentBeeperEntry->mod
 418:../cleanflight/src/main/io/beeper.c ****                 BEEP_ON;
 419:../cleanflight/src/main/io/beeper.c ****             warningLedEnable();
 420:../cleanflight/src/main/io/beeper.c ****             warningLedRefresh();
 421:../cleanflight/src/main/io/beeper.c ****             // if this was arming beep then mark time (for blackbox)
 422:../cleanflight/src/main/io/beeper.c ****             if (
 423:../cleanflight/src/main/io/beeper.c ****                 beeperPos == 0
 424:../cleanflight/src/main/io/beeper.c ****                 && (currentBeeperEntry->mode == BEEPER_ARMING || currentBeeperEntry->mode == BEEPER
 425:../cleanflight/src/main/io/beeper.c ****             ) {
 426:../cleanflight/src/main/io/beeper.c ****                 armingBeepTimeMicros = micros();
 427:../cleanflight/src/main/io/beeper.c ****             }
 428:../cleanflight/src/main/io/beeper.c ****         }
 429:../cleanflight/src/main/io/beeper.c ****     } else {
 430:../cleanflight/src/main/io/beeper.c ****         beeperIsOn = 0;
 431:../cleanflight/src/main/io/beeper.c ****         if (currentBeeperEntry->sequence[beeperPos] != 0) {
 432:../cleanflight/src/main/io/beeper.c ****             BEEP_OFF;
 433:../cleanflight/src/main/io/beeper.c ****             warningLedDisable();
 434:../cleanflight/src/main/io/beeper.c ****             warningLedRefresh();
 435:../cleanflight/src/main/io/beeper.c ****         }
 436:../cleanflight/src/main/io/beeper.c ****     }
 437:../cleanflight/src/main/io/beeper.c **** 
 438:../cleanflight/src/main/io/beeper.c ****     beeperProcessCommand(currentTimeUs);
 439:../cleanflight/src/main/io/beeper.c **** }
 440:../cleanflight/src/main/io/beeper.c **** 
 441:../cleanflight/src/main/io/beeper.c **** /*
 442:../cleanflight/src/main/io/beeper.c ****  * Calculates array position when next to change beeper state is due.
 443:../cleanflight/src/main/io/beeper.c ****  */
 444:../cleanflight/src/main/io/beeper.c **** static void beeperProcessCommand(timeUs_t currentTimeUs)
 445:../cleanflight/src/main/io/beeper.c **** {
 446:../cleanflight/src/main/io/beeper.c ****     if (currentBeeperEntry->sequence[beeperPos] == BEEPER_COMMAND_REPEAT) {
 447:../cleanflight/src/main/io/beeper.c ****         beeperPos = 0;
 448:../cleanflight/src/main/io/beeper.c ****     } else if (currentBeeperEntry->sequence[beeperPos] == BEEPER_COMMAND_STOP) {
 449:../cleanflight/src/main/io/beeper.c ****         beeperSilence();
 450:../cleanflight/src/main/io/beeper.c ****     } else {
 451:../cleanflight/src/main/io/beeper.c ****         // Otherwise advance the sequence and calculate next toggle time
 452:../cleanflight/src/main/io/beeper.c ****         beeperNextToggleTime = currentTimeUs + 1000 * 10 * currentBeeperEntry->sequence[beeperPos];
 453:../cleanflight/src/main/io/beeper.c ****         beeperPos++;
 454:../cleanflight/src/main/io/beeper.c ****     }
 455:../cleanflight/src/main/io/beeper.c **** }
 456:../cleanflight/src/main/io/beeper.c **** 
 457:../cleanflight/src/main/io/beeper.c **** /*
 458:../cleanflight/src/main/io/beeper.c ****  * Returns the time that the last arming beep occurred (in system-uptime
 459:../cleanflight/src/main/io/beeper.c ****  * microseconds).  This is fetched and logged by blackbox.
 460:../cleanflight/src/main/io/beeper.c ****  */
 461:../cleanflight/src/main/io/beeper.c **** uint32_t getArmingBeepTimeMicros(void)
 462:../cleanflight/src/main/io/beeper.c **** {
 463:../cleanflight/src/main/io/beeper.c ****     return armingBeepTimeMicros;
 464:../cleanflight/src/main/io/beeper.c **** }
 465:../cleanflight/src/main/io/beeper.c **** 
 466:../cleanflight/src/main/io/beeper.c **** /*
 467:../cleanflight/src/main/io/beeper.c ****  * Returns the 'beeperMode_e' value for the given beeper-table index,
 468:../cleanflight/src/main/io/beeper.c ****  * or BEEPER_SILENCE if none.
 469:../cleanflight/src/main/io/beeper.c ****  */
 470:../cleanflight/src/main/io/beeper.c **** beeperMode_e beeperModeForTableIndex(int idx)
 471:../cleanflight/src/main/io/beeper.c **** {
 472:../cleanflight/src/main/io/beeper.c ****     return (idx >= 0 && idx < (int)BEEPER_TABLE_ENTRY_COUNT) ? beeperTable[idx].mode : BEEPER_SILEN
 473:../cleanflight/src/main/io/beeper.c **** }
 474:../cleanflight/src/main/io/beeper.c **** 
 475:../cleanflight/src/main/io/beeper.c **** /*
 476:../cleanflight/src/main/io/beeper.c ****  * Returns the binary mask for the 'beeperMode_e' value corresponding to a given
 477:../cleanflight/src/main/io/beeper.c ****  * beeper-table index, or 0 if the beeperMode is BEEPER_SILENCE.
 478:../cleanflight/src/main/io/beeper.c ****  */
 479:../cleanflight/src/main/io/beeper.c **** uint32_t beeperModeMaskForTableIndex(int idx)
 480:../cleanflight/src/main/io/beeper.c **** {
 481:../cleanflight/src/main/io/beeper.c ****     beeperMode_e beeperMode = beeperModeForTableIndex(idx);
 482:../cleanflight/src/main/io/beeper.c ****     if (beeperMode == BEEPER_SILENCE)
 483:../cleanflight/src/main/io/beeper.c ****         return 0;
 484:../cleanflight/src/main/io/beeper.c ****     return BEEPER_GET_FLAG(beeperMode);
 485:../cleanflight/src/main/io/beeper.c **** }
 486:../cleanflight/src/main/io/beeper.c **** 
 487:../cleanflight/src/main/io/beeper.c **** /*
 488:../cleanflight/src/main/io/beeper.c ****  * Returns the name for the given beeper-table index, or NULL if none.
 489:../cleanflight/src/main/io/beeper.c ****  */
 490:../cleanflight/src/main/io/beeper.c **** const char *beeperNameForTableIndex(int idx)
 491:../cleanflight/src/main/io/beeper.c **** {
 492:../cleanflight/src/main/io/beeper.c **** #ifndef BEEPER_NAMES
 493:../cleanflight/src/main/io/beeper.c ****     UNUSED(idx);
 494:../cleanflight/src/main/io/beeper.c ****     return NULL;
 495:../cleanflight/src/main/io/beeper.c **** #else
 496:../cleanflight/src/main/io/beeper.c ****     return (idx >= 0 && idx < (int)BEEPER_TABLE_ENTRY_COUNT) ? beeperTable[idx].name : NULL;
 497:../cleanflight/src/main/io/beeper.c **** #endif
 498:../cleanflight/src/main/io/beeper.c **** }
 499:../cleanflight/src/main/io/beeper.c **** 
 500:../cleanflight/src/main/io/beeper.c **** /*
 501:../cleanflight/src/main/io/beeper.c ****  * Returns the number of entries in the beeper-sounds table.
 502:../cleanflight/src/main/io/beeper.c ****  */
 503:../cleanflight/src/main/io/beeper.c **** int beeperTableEntryCount(void)
 504:../cleanflight/src/main/io/beeper.c **** {
 505:../cleanflight/src/main/io/beeper.c ****     return (int)BEEPER_TABLE_ENTRY_COUNT;
 506:../cleanflight/src/main/io/beeper.c **** }
 507:../cleanflight/src/main/io/beeper.c **** 
 508:../cleanflight/src/main/io/beeper.c **** /*
 509:../cleanflight/src/main/io/beeper.c ****  * Returns true if the beeper is on, false otherwise
 510:../cleanflight/src/main/io/beeper.c ****  */
 511:../cleanflight/src/main/io/beeper.c **** bool isBeeperOn(void)
 512:../cleanflight/src/main/io/beeper.c **** {
 513:../cleanflight/src/main/io/beeper.c ****     return beeperIsOn;
 514:../cleanflight/src/main/io/beeper.c **** }
 515:../cleanflight/src/main/io/beeper.c **** 
 516:../cleanflight/src/main/io/beeper.c **** #else
 517:../cleanflight/src/main/io/beeper.c **** 
 518:../cleanflight/src/main/io/beeper.c **** // Stub out beeper functions if #BEEPER not defined
 519:../cleanflight/src/main/io/beeper.c **** void beeper(beeperMode_e mode) {UNUSED(mode);}
  28              	 .loc 1 519 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 83B0     	 sub sp,sp,#12
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 16
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 0346     	 mov r3,r0
  44 0008 FB71     	 strb r3,[r7,#7]
  45              	 .loc 1 519 0
  46 000a 0C37     	 adds r7,r7,#12
  47              	.LCFI3:
  48              	 .cfi_def_cfa_offset 4
  49 000c BD46     	 mov sp,r7
  50              	.LCFI4:
  51              	 .cfi_def_cfa_register 13
  52              	 
  53 000e 5DF8047B 	 ldr r7,[sp],#4
  54              	.LCFI5:
  55              	 .cfi_restore 7
  56              	 .cfi_def_cfa_offset 0
  57 0012 7047     	 bx lr
  58              	 .cfi_endproc
  59              	.LFE560:
  61              	 .section .text.beeperSilence,"ax",%progbits
  62              	 .align 2
  63              	 .global beeperSilence
  64              	 .thumb
  65              	 .thumb_func
  67              	beeperSilence:
  68              	.LFB561:
 520:../cleanflight/src/main/io/beeper.c **** void beeperSilence(void) {}
  69              	 .loc 1 520 0
  70              	 .cfi_startproc
  71              	 
  72              	 
  73              	 
  74 0000 80B4     	 push {r7}
  75              	.LCFI6:
  76              	 .cfi_def_cfa_offset 4
  77              	 .cfi_offset 7,-4
  78 0002 00AF     	 add r7,sp,#0
  79              	.LCFI7:
  80              	 .cfi_def_cfa_register 7
  81              	 .loc 1 520 0
  82 0004 BD46     	 mov sp,r7
  83              	.LCFI8:
  84              	 .cfi_def_cfa_register 13
  85              	 
  86 0006 5DF8047B 	 ldr r7,[sp],#4
  87              	.LCFI9:
  88              	 .cfi_restore 7
  89              	 .cfi_def_cfa_offset 0
  90 000a 7047     	 bx lr
  91              	 .cfi_endproc
  92              	.LFE561:
  94              	 .section .text.beeperConfirmationBeeps,"ax",%progbits
  95              	 .align 2
  96              	 .global beeperConfirmationBeeps
  97              	 .thumb
  98              	 .thumb_func
 100              	beeperConfirmationBeeps:
 101              	.LFB562:
 521:../cleanflight/src/main/io/beeper.c **** void beeperConfirmationBeeps(uint8_t beepCount) {UNUSED(beepCount);}
 102              	 .loc 1 521 0
 103              	 .cfi_startproc
 104              	 
 105              	 
 106              	 
 107 0000 80B4     	 push {r7}
 108              	.LCFI10:
 109              	 .cfi_def_cfa_offset 4
 110              	 .cfi_offset 7,-4
 111 0002 83B0     	 sub sp,sp,#12
 112              	.LCFI11:
 113              	 .cfi_def_cfa_offset 16
 114 0004 00AF     	 add r7,sp,#0
 115              	.LCFI12:
 116              	 .cfi_def_cfa_register 7
 117 0006 0346     	 mov r3,r0
 118 0008 FB71     	 strb r3,[r7,#7]
 119              	 .loc 1 521 0
 120 000a 0C37     	 adds r7,r7,#12
 121              	.LCFI13:
 122              	 .cfi_def_cfa_offset 4
 123 000c BD46     	 mov sp,r7
 124              	.LCFI14:
 125              	 .cfi_def_cfa_register 13
 126              	 
 127 000e 5DF8047B 	 ldr r7,[sp],#4
 128              	.LCFI15:
 129              	 .cfi_restore 7
 130              	 .cfi_def_cfa_offset 0
 131 0012 7047     	 bx lr
 132              	 .cfi_endproc
 133              	.LFE562:
 135              	 .section .text.beeperWarningBeeps,"ax",%progbits
 136              	 .align 2
 137              	 .global beeperWarningBeeps
 138              	 .thumb
 139              	 .thumb_func
 141              	beeperWarningBeeps:
 142              	.LFB563:
 522:../cleanflight/src/main/io/beeper.c **** void beeperWarningBeeps(uint8_t beepCount) {UNUSED(beepCount);}
 143              	 .loc 1 522 0
 144              	 .cfi_startproc
 145              	 
 146              	 
 147              	 
 148 0000 80B4     	 push {r7}
 149              	.LCFI16:
 150              	 .cfi_def_cfa_offset 4
 151              	 .cfi_offset 7,-4
 152 0002 83B0     	 sub sp,sp,#12
 153              	.LCFI17:
 154              	 .cfi_def_cfa_offset 16
 155 0004 00AF     	 add r7,sp,#0
 156              	.LCFI18:
 157              	 .cfi_def_cfa_register 7
 158 0006 0346     	 mov r3,r0
 159 0008 FB71     	 strb r3,[r7,#7]
 160              	 .loc 1 522 0
 161 000a 0C37     	 adds r7,r7,#12
 162              	.LCFI19:
 163              	 .cfi_def_cfa_offset 4
 164 000c BD46     	 mov sp,r7
 165              	.LCFI20:
 166              	 .cfi_def_cfa_register 13
 167              	 
 168 000e 5DF8047B 	 ldr r7,[sp],#4
 169              	.LCFI21:
 170              	 .cfi_restore 7
 171              	 .cfi_def_cfa_offset 0
 172 0012 7047     	 bx lr
 173              	 .cfi_endproc
 174              	.LFE563:
 176              	 .section .text.beeperUpdate,"ax",%progbits
 177              	 .align 2
 178              	 .global beeperUpdate
 179              	 .thumb
 180              	 .thumb_func
 182              	beeperUpdate:
 183              	.LFB564:
 523:../cleanflight/src/main/io/beeper.c **** void beeperUpdate(timeUs_t currentTimeUs) {UNUSED(currentTimeUs);}
 184              	 .loc 1 523 0
 185              	 .cfi_startproc
 186              	 
 187              	 
 188              	 
 189 0000 80B4     	 push {r7}
 190              	.LCFI22:
 191              	 .cfi_def_cfa_offset 4
 192              	 .cfi_offset 7,-4
 193 0002 83B0     	 sub sp,sp,#12
 194              	.LCFI23:
 195              	 .cfi_def_cfa_offset 16
 196 0004 00AF     	 add r7,sp,#0
 197              	.LCFI24:
 198              	 .cfi_def_cfa_register 7
 199 0006 7860     	 str r0,[r7,#4]
 200              	 .loc 1 523 0
 201 0008 0C37     	 adds r7,r7,#12
 202              	.LCFI25:
 203              	 .cfi_def_cfa_offset 4
 204 000a BD46     	 mov sp,r7
 205              	.LCFI26:
 206              	 .cfi_def_cfa_register 13
 207              	 
 208 000c 5DF8047B 	 ldr r7,[sp],#4
 209              	.LCFI27:
 210              	 .cfi_restore 7
 211              	 .cfi_def_cfa_offset 0
 212 0010 7047     	 bx lr
 213              	 .cfi_endproc
 214              	.LFE564:
 216 0012 00BF     	 .section .text.getArmingBeepTimeMicros,"ax",%progbits
 217              	 .align 2
 218              	 .global getArmingBeepTimeMicros
 219              	 .thumb
 220              	 .thumb_func
 222              	getArmingBeepTimeMicros:
 223              	.LFB565:
 524:../cleanflight/src/main/io/beeper.c **** uint32_t getArmingBeepTimeMicros(void) {return 0;}
 224              	 .loc 1 524 0
 225              	 .cfi_startproc
 226              	 
 227              	 
 228              	 
 229 0000 80B4     	 push {r7}
 230              	.LCFI28:
 231              	 .cfi_def_cfa_offset 4
 232              	 .cfi_offset 7,-4
 233 0002 00AF     	 add r7,sp,#0
 234              	.LCFI29:
 235              	 .cfi_def_cfa_register 7
 236              	 .loc 1 524 0
 237 0004 0023     	 movs r3,#0
 238 0006 1846     	 mov r0,r3
 239 0008 BD46     	 mov sp,r7
 240              	.LCFI30:
 241              	 .cfi_def_cfa_register 13
 242              	 
 243 000a 5DF8047B 	 ldr r7,[sp],#4
 244              	.LCFI31:
 245              	 .cfi_restore 7
 246              	 .cfi_def_cfa_offset 0
 247 000e 7047     	 bx lr
 248              	 .cfi_endproc
 249              	.LFE565:
 251              	 .section .text.beeperModeForTableIndex,"ax",%progbits
 252              	 .align 2
 253              	 .global beeperModeForTableIndex
 254              	 .thumb
 255              	 .thumb_func
 257              	beeperModeForTableIndex:
 258              	.LFB566:
 525:../cleanflight/src/main/io/beeper.c **** beeperMode_e beeperModeForTableIndex(int idx) {UNUSED(idx); return BEEPER_SILENCE;}
 259              	 .loc 1 525 0
 260              	 .cfi_startproc
 261              	 
 262              	 
 263              	 
 264 0000 80B4     	 push {r7}
 265              	.LCFI32:
 266              	 .cfi_def_cfa_offset 4
 267              	 .cfi_offset 7,-4
 268 0002 83B0     	 sub sp,sp,#12
 269              	.LCFI33:
 270              	 .cfi_def_cfa_offset 16
 271 0004 00AF     	 add r7,sp,#0
 272              	.LCFI34:
 273              	 .cfi_def_cfa_register 7
 274 0006 7860     	 str r0,[r7,#4]
 275              	 .loc 1 525 0
 276 0008 0023     	 movs r3,#0
 277 000a 1846     	 mov r0,r3
 278 000c 0C37     	 adds r7,r7,#12
 279              	.LCFI35:
 280              	 .cfi_def_cfa_offset 4
 281 000e BD46     	 mov sp,r7
 282              	.LCFI36:
 283              	 .cfi_def_cfa_register 13
 284              	 
 285 0010 5DF8047B 	 ldr r7,[sp],#4
 286              	.LCFI37:
 287              	 .cfi_restore 7
 288              	 .cfi_def_cfa_offset 0
 289 0014 7047     	 bx lr
 290              	 .cfi_endproc
 291              	.LFE566:
 293 0016 00BF     	 .section .text.beeperModeMaskForTableIndex,"ax",%progbits
 294              	 .align 2
 295              	 .global beeperModeMaskForTableIndex
 296              	 .thumb
 297              	 .thumb_func
 299              	beeperModeMaskForTableIndex:
 300              	.LFB567:
 526:../cleanflight/src/main/io/beeper.c **** uint32_t beeperModeMaskForTableIndex(int idx) {UNUSED(idx); return 0;}
 301              	 .loc 1 526 0
 302              	 .cfi_startproc
 303              	 
 304              	 
 305              	 
 306 0000 80B4     	 push {r7}
 307              	.LCFI38:
 308              	 .cfi_def_cfa_offset 4
 309              	 .cfi_offset 7,-4
 310 0002 83B0     	 sub sp,sp,#12
 311              	.LCFI39:
 312              	 .cfi_def_cfa_offset 16
 313 0004 00AF     	 add r7,sp,#0
 314              	.LCFI40:
 315              	 .cfi_def_cfa_register 7
 316 0006 7860     	 str r0,[r7,#4]
 317              	 .loc 1 526 0
 318 0008 0023     	 movs r3,#0
 319 000a 1846     	 mov r0,r3
 320 000c 0C37     	 adds r7,r7,#12
 321              	.LCFI41:
 322              	 .cfi_def_cfa_offset 4
 323 000e BD46     	 mov sp,r7
 324              	.LCFI42:
 325              	 .cfi_def_cfa_register 13
 326              	 
 327 0010 5DF8047B 	 ldr r7,[sp],#4
 328              	.LCFI43:
 329              	 .cfi_restore 7
 330              	 .cfi_def_cfa_offset 0
 331 0014 7047     	 bx lr
 332              	 .cfi_endproc
 333              	.LFE567:
 335 0016 00BF     	 .section .text.beeperNameForTableIndex,"ax",%progbits
 336              	 .align 2
 337              	 .global beeperNameForTableIndex
 338              	 .thumb
 339              	 .thumb_func
 341              	beeperNameForTableIndex:
 342              	.LFB568:
 527:../cleanflight/src/main/io/beeper.c **** const char *beeperNameForTableIndex(int idx) {UNUSED(idx); return NULL;}
 343              	 .loc 1 527 0
 344              	 .cfi_startproc
 345              	 
 346              	 
 347              	 
 348 0000 80B4     	 push {r7}
 349              	.LCFI44:
 350              	 .cfi_def_cfa_offset 4
 351              	 .cfi_offset 7,-4
 352 0002 83B0     	 sub sp,sp,#12
 353              	.LCFI45:
 354              	 .cfi_def_cfa_offset 16
 355 0004 00AF     	 add r7,sp,#0
 356              	.LCFI46:
 357              	 .cfi_def_cfa_register 7
 358 0006 7860     	 str r0,[r7,#4]
 359              	 .loc 1 527 0
 360 0008 0023     	 movs r3,#0
 361 000a 1846     	 mov r0,r3
 362 000c 0C37     	 adds r7,r7,#12
 363              	.LCFI47:
 364              	 .cfi_def_cfa_offset 4
 365 000e BD46     	 mov sp,r7
 366              	.LCFI48:
 367              	 .cfi_def_cfa_register 13
 368              	 
 369 0010 5DF8047B 	 ldr r7,[sp],#4
 370              	.LCFI49:
 371              	 .cfi_restore 7
 372              	 .cfi_def_cfa_offset 0
 373 0014 7047     	 bx lr
 374              	 .cfi_endproc
 375              	.LFE568:
 377 0016 00BF     	 .section .text.beeperTableEntryCount,"ax",%progbits
 378              	 .align 2
 379              	 .global beeperTableEntryCount
 380              	 .thumb
 381              	 .thumb_func
 383              	beeperTableEntryCount:
 384              	.LFB569:
 528:../cleanflight/src/main/io/beeper.c **** int beeperTableEntryCount(void) {return 0;}
 385              	 .loc 1 528 0
 386              	 .cfi_startproc
 387              	 
 388              	 
 389              	 
 390 0000 80B4     	 push {r7}
 391              	.LCFI50:
 392              	 .cfi_def_cfa_offset 4
 393              	 .cfi_offset 7,-4
 394 0002 00AF     	 add r7,sp,#0
 395              	.LCFI51:
 396              	 .cfi_def_cfa_register 7
 397              	 .loc 1 528 0
 398 0004 0023     	 movs r3,#0
 399 0006 1846     	 mov r0,r3
 400 0008 BD46     	 mov sp,r7
 401              	.LCFI52:
 402              	 .cfi_def_cfa_register 13
 403              	 
 404 000a 5DF8047B 	 ldr r7,[sp],#4
 405              	.LCFI53:
 406              	 .cfi_restore 7
 407              	 .cfi_def_cfa_offset 0
 408 000e 7047     	 bx lr
 409              	 .cfi_endproc
 410              	.LFE569:
 412              	 .section .text.isBeeperOn,"ax",%progbits
 413              	 .align 2
 414              	 .global isBeeperOn
 415              	 .thumb
 416              	 .thumb_func
 418              	isBeeperOn:
 419              	.LFB570:
 529:../cleanflight/src/main/io/beeper.c **** bool isBeeperOn(void) {return false;}
 420              	 .loc 1 529 0
 421              	 .cfi_startproc
 422              	 
 423              	 
 424              	 
 425 0000 80B4     	 push {r7}
 426              	.LCFI54:
 427              	 .cfi_def_cfa_offset 4
 428              	 .cfi_offset 7,-4
 429 0002 00AF     	 add r7,sp,#0
 430              	.LCFI55:
 431              	 .cfi_def_cfa_register 7
 432              	 .loc 1 529 0
 433 0004 0023     	 movs r3,#0
 434 0006 1846     	 mov r0,r3
 435 0008 BD46     	 mov sp,r7
 436              	.LCFI56:
 437              	 .cfi_def_cfa_register 13
 438              	 
 439 000a 5DF8047B 	 ldr r7,[sp],#4
 440              	.LCFI57:
 441              	 .cfi_restore 7
 442              	 .cfi_def_cfa_offset 0
 443 000e 7047     	 bx lr
 444              	 .cfi_endproc
 445              	.LFE570:
 447              	 .text
 448              	.Letext0:
 449              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 450              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 451              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 452              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 453              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/pwm_output.h"
 454              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 455              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/mixer.h"
 456              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 457              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_core.h"
 458              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 459              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx_control.h"
 460              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
 461              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/beeper.h"
 462              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
 463              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
 464              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
 465              	 .file 18 "../cleanflight/src/main/io/beeper.h"
 466              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 467              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 beeper.c
    {standard input}:20     .text.beeper:00000000 $t
    {standard input}:25     .text.beeper:00000000 beeper
    {standard input}:62     .text.beeperSilence:00000000 $t
    {standard input}:67     .text.beeperSilence:00000000 beeperSilence
    {standard input}:95     .text.beeperConfirmationBeeps:00000000 $t
    {standard input}:100    .text.beeperConfirmationBeeps:00000000 beeperConfirmationBeeps
    {standard input}:136    .text.beeperWarningBeeps:00000000 $t
    {standard input}:141    .text.beeperWarningBeeps:00000000 beeperWarningBeeps
    {standard input}:177    .text.beeperUpdate:00000000 $t
    {standard input}:182    .text.beeperUpdate:00000000 beeperUpdate
    {standard input}:217    .text.getArmingBeepTimeMicros:00000000 $t
    {standard input}:222    .text.getArmingBeepTimeMicros:00000000 getArmingBeepTimeMicros
    {standard input}:252    .text.beeperModeForTableIndex:00000000 $t
    {standard input}:257    .text.beeperModeForTableIndex:00000000 beeperModeForTableIndex
    {standard input}:294    .text.beeperModeMaskForTableIndex:00000000 $t
    {standard input}:299    .text.beeperModeMaskForTableIndex:00000000 beeperModeMaskForTableIndex
    {standard input}:336    .text.beeperNameForTableIndex:00000000 $t
    {standard input}:341    .text.beeperNameForTableIndex:00000000 beeperNameForTableIndex
    {standard input}:378    .text.beeperTableEntryCount:00000000 $t
    {standard input}:383    .text.beeperTableEntryCount:00000000 beeperTableEntryCount
    {standard input}:413    .text.isBeeperOn:00000000 $t
    {standard input}:418    .text.isBeeperOn:00000000 isBeeperOn
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
