   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "dashboard.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm pCurrentDisplay,4,4
  20              	 .section .text.constrain,"ax",%progbits
  21              	 .align 2
  22              	 .thumb
  23              	 .thumb_func
  25              	constrain:
  26              	.LFB527:
  27              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  28              	 .loc 1 151 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 85B0     	 sub sp,sp,#20
  38              	.LCFI1:
  39              	 .cfi_def_cfa_offset 24
  40 0004 00AF     	 add r7,sp,#0
  41              	.LCFI2:
  42              	 .cfi_def_cfa_register 7
  43 0006 F860     	 str r0,[r7,#12]
  44 0008 B960     	 str r1,[r7,#8]
  45 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
  46              	 .loc 1 152 0
  47 000c FA68     	 ldr r2,[r7,#12]
  48 000e BB68     	 ldr r3,[r7,#8]
  49 0010 9A42     	 cmp r2,r3
  50 0012 01DA     	 bge .L2
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
  51              	 .loc 1 153 0
  52 0014 BB68     	 ldr r3,[r7,#8]
  53 0016 06E0     	 b .L3
  54              	.L2:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
  55              	 .loc 1 154 0
  56 0018 FA68     	 ldr r2,[r7,#12]
  57 001a 7B68     	 ldr r3,[r7,#4]
  58 001c 9A42     	 cmp r2,r3
  59 001e 01DD     	 ble .L4
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
  60              	 .loc 1 155 0
  61 0020 7B68     	 ldr r3,[r7,#4]
  62 0022 00E0     	 b .L3
  63              	.L4:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
  64              	 .loc 1 157 0
  65 0024 FB68     	 ldr r3,[r7,#12]
  66              	.L3:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
  67              	 .loc 1 158 0
  68 0026 1846     	 mov r0,r3
  69 0028 1437     	 adds r7,r7,#20
  70              	.LCFI3:
  71              	 .cfi_def_cfa_offset 4
  72 002a BD46     	 mov sp,r7
  73              	.LCFI4:
  74              	 .cfi_def_cfa_register 13
  75              	 
  76 002c 5DF8047B 	 ldr r7,[sp],#4
  77              	.LCFI5:
  78              	 .cfi_restore 7
  79              	 .cfi_def_cfa_offset 0
  80 0030 7047     	 bx lr
  81              	 .cfi_endproc
  82              	.LFE527:
  84 0032 00BF     	 .section .text.dashboardConfig,"ax",%progbits
  85              	 .align 2
  86              	 .thumb
  87              	 .thumb_func
  89              	dashboardConfig:
  90              	.LFB531:
  91              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/dashboard.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h **** typedef struct dashboardConfig_s {
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****     I2CDevice device;
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h ****     uint8_t   address;
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h **** } dashboardConfig_t;
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\dashboard.h **** PG_DECLARE(dashboardConfig_t, dashboardConfig);
  92              	 .loc 2 26 0
  93              	 .cfi_startproc
  94              	 
  95              	 
  96              	 
  97 0000 80B4     	 push {r7}
  98              	.LCFI6:
  99              	 .cfi_def_cfa_offset 4
 100              	 .cfi_offset 7,-4
 101 0002 00AF     	 add r7,sp,#0
 102              	.LCFI7:
 103              	 .cfi_def_cfa_register 7
 104              	 .loc 2 26 0
 105 0004 024B     	 ldr r3,.L7
 106 0006 1846     	 mov r0,r3
 107 0008 BD46     	 mov sp,r7
 108              	.LCFI8:
 109              	 .cfi_def_cfa_register 13
 110              	 
 111 000a 5DF8047B 	 ldr r7,[sp],#4
 112              	.LCFI9:
 113              	 .cfi_restore 7
 114              	 .cfi_def_cfa_offset 0
 115 000e 7047     	 bx lr
 116              	.L8:
 117              	 .align 2
 118              	.L7:
 119 0010 00000000 	 .word dashboardConfig_System
 120              	 .cfi_endproc
 121              	.LFE531:
 123              	 .section .text.controlRateProfiles,"ax",%progbits
 124              	 .align 2
 125              	 .thumb
 126              	 .thumb_func
 128              	controlRateProfiles:
 129              	.LFB539:
 130              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/controlrate_profile.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** #define CONTROL_RATE_PROFILE_COUNT  6
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     RATES_TYPE_BETAFLIGHT = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     RATES_TYPE_RACEFLIGHT,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** } ratesType_e;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** typedef enum {
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     THROTTLE_LIMIT_TYPE_OFF = 0,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     THROTTLE_LIMIT_TYPE_SCALE,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     THROTTLE_LIMIT_TYPE_CLIP,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** } throttleLimitType_e;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** typedef struct controlRateConfig_s {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t thrMid8;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t thrExpo8;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t rates_type;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t rcRates[3];
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t rcExpo[3];
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t rates[3];
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t dynThrPID;
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint16_t tpa_breakpoint;                // Breakpoint where TPA is activated
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t throttle_limit_type;            // Sets the throttle limiting type - off, scale or clip
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h ****     uint8_t throttle_limit_percent;         // Sets the maximum pilot commanded throttle limit
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** } controlRateConfig_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\controlrate_profile.h **** PG_DECLARE_ARRAY(controlRateConfig_t, CONTROL_RATE_PROFILE_COUNT, controlRateProfiles);
 131              	 .loc 3 53 0
 132              	 .cfi_startproc
 133              	 
 134              	 
 135              	 
 136 0000 80B4     	 push {r7}
 137              	.LCFI10:
 138              	 .cfi_def_cfa_offset 4
 139              	 .cfi_offset 7,-4
 140 0002 83B0     	 sub sp,sp,#12
 141              	.LCFI11:
 142              	 .cfi_def_cfa_offset 16
 143 0004 00AF     	 add r7,sp,#0
 144              	.LCFI12:
 145              	 .cfi_def_cfa_register 7
 146 0006 7860     	 str r0,[r7,#4]
 147              	 .loc 3 53 0
 148 0008 7A68     	 ldr r2,[r7,#4]
 149 000a 1346     	 mov r3,r2
 150 000c 1B01     	 lsls r3,r3,#4
 151 000e 1344     	 add r3,r3,r2
 152 0010 034A     	 ldr r2,.L11
 153 0012 1344     	 add r3,r3,r2
 154 0014 1846     	 mov r0,r3
 155 0016 0C37     	 adds r7,r7,#12
 156              	.LCFI13:
 157              	 .cfi_def_cfa_offset 4
 158 0018 BD46     	 mov sp,r7
 159              	.LCFI14:
 160              	 .cfi_def_cfa_register 13
 161              	 
 162 001a 5DF8047B 	 ldr r7,[sp],#4
 163              	.LCFI15:
 164              	 .cfi_restore 7
 165              	 .cfi_def_cfa_offset 0
 166 001e 7047     	 bx lr
 167              	.L12:
 168              	 .align 2
 169              	.L11:
 170 0020 00000000 	 .word controlRateProfiles_SystemArray
 171              	 .cfi_endproc
 172              	.LFE539:
 174              	 .section .text.batteryConfig,"ax",%progbits
 175              	 .align 2
 176              	 .thumb
 177              	 .thumb_func
 179              	batteryConfig:
 180              	.LFB580:
 181              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/time.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/current.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/voltage.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct batteryConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // voltage
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmaxcellvoltage;             // maximum voltage per cell, used for auto-detecting ba
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmincellvoltage;             // minimum voltage per cell, this triggers battery crit
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatwarningcellvoltage;         // warning voltage per cell, this triggers battery warn
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatnotpresentcellvoltage;      // Between vbatmaxcellvoltage and 2*this is considered 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t lvcPercentage;                  // Percentage of throttle when lvc is triggered
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     voltageMeterSource_e voltageMeterSource; // source of battery voltage meter used, either ADC or
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // current
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     currentMeterSource_e currentMeterSource; // source of battery current meter used, either ADC, V
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint16_t batteryCapacity;               // mAh
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // warnings / alerts
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useVBatAlerts;                     // Issue alerts based on VBat readings
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useConsumptionAlerts;              // Issue alerts based on total power consumption
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t consumptionWarningPercentage;   // Percentage of remaining capacity that should trigger
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbathysteresis;                 // hysteresis for alarm, default 1 = 0.1V
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatfullcellvoltage;            // Cell voltage at which the battery is deemed to be "f
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } batteryConfig_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct lowVoltageCutoff_s {
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool enabled;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t percentage;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     timeUs_t startTime;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } lowVoltageCutoff_t;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** PG_DECLARE(batteryConfig_t, batteryConfig);
 182              	 .loc 4 59 0
 183              	 .cfi_startproc
 184              	 
 185              	 
 186              	 
 187 0000 80B4     	 push {r7}
 188              	.LCFI16:
 189              	 .cfi_def_cfa_offset 4
 190              	 .cfi_offset 7,-4
 191 0002 00AF     	 add r7,sp,#0
 192              	.LCFI17:
 193              	 .cfi_def_cfa_register 7
 194              	 .loc 4 59 0
 195 0004 024B     	 ldr r3,.L15
 196 0006 1846     	 mov r0,r3
 197 0008 BD46     	 mov sp,r7
 198              	.LCFI18:
 199              	 .cfi_def_cfa_register 13
 200              	 
 201 000a 5DF8047B 	 ldr r7,[sp],#4
 202              	.LCFI19:
 203              	 .cfi_restore 7
 204              	 .cfi_def_cfa_offset 0
 205 000e 7047     	 bx lr
 206              	.L16:
 207              	 .align 2
 208              	.L15:
 209 0010 00000000 	 .word batteryConfig_System
 210              	 .cfi_endproc
 211              	.LFE580:
 213              	 .section .bss.bus,"aw",%nobits
 214              	 .align 2
 217              	bus:
 218 0000 00000000 	 .space 4
 219              	 .section .bss.nextDisplayUpdateAt,"aw",%nobits
 220              	 .align 2
 223              	nextDisplayUpdateAt:
 224 0000 00000000 	 .space 4
 225              	 .section .bss.dashboardPresent,"aw",%nobits
 228              	dashboardPresent:
 229 0000 00       	 .space 1
 230              	 .section .bss.displayPort,"aw",%nobits
 231              	 .align 2
 234              	displayPort:
 235 0000 00000000 	 .space 4
 236              	 .section .bss.lineBuffer,"aw",%nobits
 237              	 .align 2
 240              	lineBuffer:
 241 0000 00000000 	 .space 22
 241      00000000 
 241      00000000 
 241      00000000 
 241      00000000 
 242 0016 0000     	 .section .rodata
 243              	 .align 2
 244              	.LC0:
 245 0000 7C2F2D5C 	 .ascii "|/-\\\000"
 245      00
 246              	 .section .data.tickerCharacters,"aw",%progbits
 247              	 .align 2
 250              	tickerCharacters:
 251 0000 00000000 	 .word .LC0
 252              	 .section .bss.pageState,"aw",%nobits
 253              	 .align 2
 256              	pageState:
 257 0000 00000000 	 .space 11
 257      00000000 
 257      000000
 258 000b 00       	 .section .text.resetDisplay,"ax",%progbits
 259              	 .align 2
 260              	 .thumb
 261              	 .thumb_func
 263              	resetDisplay:
 264              	.LFB584:
 265              	 .file 5 "../cleanflight/src/main/io/dashboard.c"
   1:../cleanflight/src/main/io/dashboard.c **** /*
   2:../cleanflight/src/main/io/dashboard.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/io/dashboard.c ****  *
   4:../cleanflight/src/main/io/dashboard.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/io/dashboard.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/io/dashboard.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/io/dashboard.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/io/dashboard.c ****  * any later version.
   9:../cleanflight/src/main/io/dashboard.c ****  *
  10:../cleanflight/src/main/io/dashboard.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/io/dashboard.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/io/dashboard.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/io/dashboard.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/io/dashboard.c ****  *
  15:../cleanflight/src/main/io/dashboard.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/io/dashboard.c ****  * along with this software.
  17:../cleanflight/src/main/io/dashboard.c ****  *
  18:../cleanflight/src/main/io/dashboard.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/io/dashboard.c ****  */
  20:../cleanflight/src/main/io/dashboard.c **** 
  21:../cleanflight/src/main/io/dashboard.c **** #include <stdbool.h>
  22:../cleanflight/src/main/io/dashboard.c **** #include <stdint.h>
  23:../cleanflight/src/main/io/dashboard.c **** #include <string.h>
  24:../cleanflight/src/main/io/dashboard.c **** #include <math.h>
  25:../cleanflight/src/main/io/dashboard.c **** 
  26:../cleanflight/src/main/io/dashboard.c **** #include "platform.h"
  27:../cleanflight/src/main/io/dashboard.c **** 
  28:../cleanflight/src/main/io/dashboard.c **** #ifdef USE_DASHBOARD
  29:../cleanflight/src/main/io/dashboard.c **** 
  30:../cleanflight/src/main/io/dashboard.c **** #include "common/utils.h"
  31:../cleanflight/src/main/io/dashboard.c **** 
  32:../cleanflight/src/main/io/dashboard.c **** #include "build/version.h"
  33:../cleanflight/src/main/io/dashboard.c **** #include "build/debug.h"
  34:../cleanflight/src/main/io/dashboard.c **** 
  35:../cleanflight/src/main/io/dashboard.c **** #include "build/build_config.h"
  36:../cleanflight/src/main/io/dashboard.c **** 
  37:../cleanflight/src/main/io/dashboard.c **** #include "drivers/bus.h"
  38:../cleanflight/src/main/io/dashboard.c **** #include "drivers/display.h"
  39:../cleanflight/src/main/io/dashboard.c **** #include "drivers/display_ug2864hsweg01.h"
  40:../cleanflight/src/main/io/dashboard.c **** #include "drivers/time.h"
  41:../cleanflight/src/main/io/dashboard.c **** 
  42:../cleanflight/src/main/io/dashboard.c **** #include "cms/cms.h"
  43:../cleanflight/src/main/io/dashboard.c **** 
  44:../cleanflight/src/main/io/dashboard.c **** #include "common/printf.h"
  45:../cleanflight/src/main/io/dashboard.c **** #include "common/maths.h"
  46:../cleanflight/src/main/io/dashboard.c **** #include "common/axis.h"
  47:../cleanflight/src/main/io/dashboard.c **** #include "common/typeconversion.h"
  48:../cleanflight/src/main/io/dashboard.c **** 
  49:../cleanflight/src/main/io/dashboard.c **** #include "config/feature.h"
  50:../cleanflight/src/main/io/dashboard.c **** #include "pg/pg.h"
  51:../cleanflight/src/main/io/dashboard.c **** #include "pg/pg_ids.h"
  52:../cleanflight/src/main/io/dashboard.c **** #include "pg/dashboard.h"
  53:../cleanflight/src/main/io/dashboard.c **** #include "pg/rx.h"
  54:../cleanflight/src/main/io/dashboard.c **** 
  55:../cleanflight/src/main/io/dashboard.c **** #include "fc/config.h"
  56:../cleanflight/src/main/io/dashboard.c **** #include "fc/controlrate_profile.h"
  57:../cleanflight/src/main/io/dashboard.c **** #include "fc/rc_controls.h"
  58:../cleanflight/src/main/io/dashboard.c **** #include "fc/runtime_config.h"
  59:../cleanflight/src/main/io/dashboard.c **** 
  60:../cleanflight/src/main/io/dashboard.c **** #include "flight/pid.h"
  61:../cleanflight/src/main/io/dashboard.c **** #include "flight/imu.h"
  62:../cleanflight/src/main/io/dashboard.c **** #include "flight/failsafe.h"
  63:../cleanflight/src/main/io/dashboard.c **** 
  64:../cleanflight/src/main/io/dashboard.c **** #include "io/gps.h"
  65:../cleanflight/src/main/io/dashboard.c **** #include "io/dashboard.h"
  66:../cleanflight/src/main/io/dashboard.c **** #include "io/displayport_oled.h"
  67:../cleanflight/src/main/io/dashboard.c **** 
  68:../cleanflight/src/main/io/dashboard.c **** #include "rx/rx.h"
  69:../cleanflight/src/main/io/dashboard.c **** 
  70:../cleanflight/src/main/io/dashboard.c **** #include "scheduler/scheduler.h"
  71:../cleanflight/src/main/io/dashboard.c **** 
  72:../cleanflight/src/main/io/dashboard.c **** #include "sensors/acceleration.h"
  73:../cleanflight/src/main/io/dashboard.c **** #include "sensors/battery.h"
  74:../cleanflight/src/main/io/dashboard.c **** #include "sensors/compass.h"
  75:../cleanflight/src/main/io/dashboard.c **** #include "sensors/gyro.h"
  76:../cleanflight/src/main/io/dashboard.c **** #include "sensors/sensors.h"
  77:../cleanflight/src/main/io/dashboard.c **** 
  78:../cleanflight/src/main/io/dashboard.c **** #define MICROSECONDS_IN_A_SECOND (1000 * 1000)
  79:../cleanflight/src/main/io/dashboard.c **** 
  80:../cleanflight/src/main/io/dashboard.c **** #define DISPLAY_UPDATE_FREQUENCY (MICROSECONDS_IN_A_SECOND / 5)
  81:../cleanflight/src/main/io/dashboard.c **** #define PAGE_CYCLE_FREQUENCY (MICROSECONDS_IN_A_SECOND * 5)
  82:../cleanflight/src/main/io/dashboard.c **** 
  83:../cleanflight/src/main/io/dashboard.c **** static busDevice_t *bus;
  84:../cleanflight/src/main/io/dashboard.c **** 
  85:../cleanflight/src/main/io/dashboard.c **** static uint32_t nextDisplayUpdateAt = 0;
  86:../cleanflight/src/main/io/dashboard.c **** static bool dashboardPresent = false;
  87:../cleanflight/src/main/io/dashboard.c **** 
  88:../cleanflight/src/main/io/dashboard.c **** static displayPort_t *displayPort;
  89:../cleanflight/src/main/io/dashboard.c **** 
  90:../cleanflight/src/main/io/dashboard.c **** #define PAGE_TITLE_LINE_COUNT 1
  91:../cleanflight/src/main/io/dashboard.c **** 
  92:../cleanflight/src/main/io/dashboard.c **** static char lineBuffer[SCREEN_CHARACTER_COLUMN_COUNT + 1];
  93:../cleanflight/src/main/io/dashboard.c **** 
  94:../cleanflight/src/main/io/dashboard.c **** #define HALF_SCREEN_CHARACTER_COLUMN_COUNT (SCREEN_CHARACTER_COLUMN_COUNT / 2)
  95:../cleanflight/src/main/io/dashboard.c **** #define IS_SCREEN_CHARACTER_COLUMN_COUNT_ODD (SCREEN_CHARACTER_COLUMN_COUNT & 1)
  96:../cleanflight/src/main/io/dashboard.c **** 
  97:../cleanflight/src/main/io/dashboard.c **** typedef void (*pageFnPtr)(void);
  98:../cleanflight/src/main/io/dashboard.c **** 
  99:../cleanflight/src/main/io/dashboard.c **** #define PAGE_FLAGS_NONE         0
 100:../cleanflight/src/main/io/dashboard.c **** #define PAGE_FLAGS_SKIP_CYCLING (1 << 0)
 101:../cleanflight/src/main/io/dashboard.c **** 
 102:../cleanflight/src/main/io/dashboard.c **** typedef struct pageEntry_s {
 103:../cleanflight/src/main/io/dashboard.c ****     pageId_e id;
 104:../cleanflight/src/main/io/dashboard.c ****     char *title;
 105:../cleanflight/src/main/io/dashboard.c ****     pageFnPtr drawFn;
 106:../cleanflight/src/main/io/dashboard.c ****     uint8_t flags;
 107:../cleanflight/src/main/io/dashboard.c **** } pageEntry_t;
 108:../cleanflight/src/main/io/dashboard.c **** 
 109:../cleanflight/src/main/io/dashboard.c **** static const char* tickerCharacters = "|/-\\"; // use 2/4/8 characters so that the divide is optima
 110:../cleanflight/src/main/io/dashboard.c **** #define TICKER_CHARACTER_COUNT (sizeof(tickerCharacters) / sizeof(char))
 111:../cleanflight/src/main/io/dashboard.c **** 
 112:../cleanflight/src/main/io/dashboard.c **** typedef enum {
 113:../cleanflight/src/main/io/dashboard.c ****     PAGE_STATE_FLAG_NONE = 0,
 114:../cleanflight/src/main/io/dashboard.c ****     PAGE_STATE_FLAG_CYCLE_ENABLED = (1 << 0),
 115:../cleanflight/src/main/io/dashboard.c ****     PAGE_STATE_FLAG_FORCE_PAGE_CHANGE = (1 << 1),
 116:../cleanflight/src/main/io/dashboard.c **** } pageFlags_e;
 117:../cleanflight/src/main/io/dashboard.c **** 
 118:../cleanflight/src/main/io/dashboard.c **** typedef struct pageState_s {
 119:../cleanflight/src/main/io/dashboard.c ****     bool pageChanging;
 120:../cleanflight/src/main/io/dashboard.c ****     const pageEntry_t *page;
 121:../cleanflight/src/main/io/dashboard.c ****     uint8_t pageFlags;
 122:../cleanflight/src/main/io/dashboard.c ****     uint8_t cycleIndex;
 123:../cleanflight/src/main/io/dashboard.c ****     uint32_t nextPageAt;
 124:../cleanflight/src/main/io/dashboard.c **** } pageState_t;
 125:../cleanflight/src/main/io/dashboard.c **** 
 126:../cleanflight/src/main/io/dashboard.c **** static pageState_t pageState;
 127:../cleanflight/src/main/io/dashboard.c **** 
 128:../cleanflight/src/main/io/dashboard.c **** static void resetDisplay(void)
 129:../cleanflight/src/main/io/dashboard.c **** {
 266              	 .loc 5 129 0
 267              	 .cfi_startproc
 268              	 
 269              	 
 270 0000 80B5     	 push {r7,lr}
 271              	.LCFI20:
 272              	 .cfi_def_cfa_offset 8
 273              	 .cfi_offset 7,-8
 274              	 .cfi_offset 14,-4
 275 0002 00AF     	 add r7,sp,#0
 276              	.LCFI21:
 277              	 .cfi_def_cfa_register 7
 130:../cleanflight/src/main/io/dashboard.c ****     dashboardPresent = ug2864hsweg01InitI2C(bus);
 278              	 .loc 5 130 0
 279 0004 044B     	 ldr r3,.L18
 280 0006 1B68     	 ldr r3,[r3]
 281 0008 1846     	 mov r0,r3
 282 000a FFF7FEFF 	 bl ug2864hsweg01InitI2C
 283 000e 0346     	 mov r3,r0
 284 0010 1A46     	 mov r2,r3
 285 0012 024B     	 ldr r3,.L18+4
 286 0014 1A70     	 strb r2,[r3]
 131:../cleanflight/src/main/io/dashboard.c **** }
 287              	 .loc 5 131 0
 288 0016 80BD     	 pop {r7,pc}
 289              	.L19:
 290              	 .align 2
 291              	.L18:
 292 0018 00000000 	 .word bus
 293 001c 00000000 	 .word dashboardPresent
 294              	 .cfi_endproc
 295              	.LFE584:
 297              	 .section .text.LCDprint,"ax",%progbits
 298              	 .align 2
 299              	 .global LCDprint
 300              	 .thumb
 301              	 .thumb_func
 303              	LCDprint:
 304              	.LFB585:
 132:../cleanflight/src/main/io/dashboard.c **** 
 133:../cleanflight/src/main/io/dashboard.c **** void LCDprint(uint8_t i)
 134:../cleanflight/src/main/io/dashboard.c **** {
 305              	 .loc 5 134 0
 306              	 .cfi_startproc
 307              	 
 308              	 
 309 0000 80B5     	 push {r7,lr}
 310              	.LCFI22:
 311              	 .cfi_def_cfa_offset 8
 312              	 .cfi_offset 7,-8
 313              	 .cfi_offset 14,-4
 314 0002 82B0     	 sub sp,sp,#8
 315              	.LCFI23:
 316              	 .cfi_def_cfa_offset 16
 317 0004 00AF     	 add r7,sp,#0
 318              	.LCFI24:
 319              	 .cfi_def_cfa_register 7
 320 0006 0346     	 mov r3,r0
 321 0008 FB71     	 strb r3,[r7,#7]
 135:../cleanflight/src/main/io/dashboard.c ****    i2c_OLED_send_char(bus, i);
 322              	 .loc 5 135 0
 323 000a 054B     	 ldr r3,.L21
 324 000c 1A68     	 ldr r2,[r3]
 325 000e FB79     	 ldrb r3,[r7,#7]
 326 0010 1046     	 mov r0,r2
 327 0012 1946     	 mov r1,r3
 328 0014 FFF7FEFF 	 bl i2c_OLED_send_char
 136:../cleanflight/src/main/io/dashboard.c **** }
 329              	 .loc 5 136 0
 330 0018 0837     	 adds r7,r7,#8
 331              	.LCFI25:
 332              	 .cfi_def_cfa_offset 8
 333 001a BD46     	 mov sp,r7
 334              	.LCFI26:
 335              	 .cfi_def_cfa_register 13
 336              	 
 337 001c 80BD     	 pop {r7,pc}
 338              	.L22:
 339 001e 00BF     	 .align 2
 340              	.L21:
 341 0020 00000000 	 .word bus
 342              	 .cfi_endproc
 343              	.LFE585:
 345              	 .section .text.padLineBuffer,"ax",%progbits
 346              	 .align 2
 347              	 .thumb
 348              	 .thumb_func
 350              	padLineBuffer:
 351              	.LFB586:
 137:../cleanflight/src/main/io/dashboard.c **** 
 138:../cleanflight/src/main/io/dashboard.c **** static void padLineBuffer(void)
 139:../cleanflight/src/main/io/dashboard.c **** {
 352              	 .loc 5 139 0
 353              	 .cfi_startproc
 354              	 
 355              	 
 356 0000 80B5     	 push {r7,lr}
 357              	.LCFI27:
 358              	 .cfi_def_cfa_offset 8
 359              	 .cfi_offset 7,-8
 360              	 .cfi_offset 14,-4
 361 0002 82B0     	 sub sp,sp,#8
 362              	.LCFI28:
 363              	 .cfi_def_cfa_offset 16
 364 0004 00AF     	 add r7,sp,#0
 365              	.LCFI29:
 366              	 .cfi_def_cfa_register 7
 140:../cleanflight/src/main/io/dashboard.c ****     uint8_t length = strlen(lineBuffer);
 367              	 .loc 5 140 0
 368 0006 0B48     	 ldr r0,.L26
 369 0008 FFF7FEFF 	 bl strlen
 370 000c 0346     	 mov r3,r0
 371 000e FB71     	 strb r3,[r7,#7]
 141:../cleanflight/src/main/io/dashboard.c ****     while (length < sizeof(lineBuffer) - 1) {
 372              	 .loc 5 141 0
 373 0010 06E0     	 b .L24
 374              	.L25:
 142:../cleanflight/src/main/io/dashboard.c ****         lineBuffer[length++] = ' ';
 375              	 .loc 5 142 0
 376 0012 FB79     	 ldrb r3,[r7,#7]
 377 0014 5A1C     	 adds r2,r3,#1
 378 0016 FA71     	 strb r2,[r7,#7]
 379 0018 1A46     	 mov r2,r3
 380 001a 064B     	 ldr r3,.L26
 381 001c 2021     	 movs r1,#32
 382 001e 9954     	 strb r1,[r3,r2]
 383              	.L24:
 141:../cleanflight/src/main/io/dashboard.c ****     while (length < sizeof(lineBuffer) - 1) {
 384              	 .loc 5 141 0
 385 0020 FB79     	 ldrb r3,[r7,#7]
 386 0022 142B     	 cmp r3,#20
 387 0024 F5D9     	 bls .L25
 143:../cleanflight/src/main/io/dashboard.c ****     }
 144:../cleanflight/src/main/io/dashboard.c ****     lineBuffer[length] = 0;
 388              	 .loc 5 144 0
 389 0026 FB79     	 ldrb r3,[r7,#7]
 390 0028 024A     	 ldr r2,.L26
 391 002a 0021     	 movs r1,#0
 392 002c D154     	 strb r1,[r2,r3]
 145:../cleanflight/src/main/io/dashboard.c **** }
 393              	 .loc 5 145 0
 394 002e 0837     	 adds r7,r7,#8
 395              	.LCFI30:
 396              	 .cfi_def_cfa_offset 8
 397 0030 BD46     	 mov sp,r7
 398              	.LCFI31:
 399              	 .cfi_def_cfa_register 13
 400              	 
 401 0032 80BD     	 pop {r7,pc}
 402              	.L27:
 403              	 .align 2
 404              	.L26:
 405 0034 00000000 	 .word lineBuffer
 406              	 .cfi_endproc
 407              	.LFE586:
 409              	 .section .text.padHalfLineBuffer,"ax",%progbits
 410              	 .align 2
 411              	 .thumb
 412              	 .thumb_func
 414              	padHalfLineBuffer:
 415              	.LFB587:
 146:../cleanflight/src/main/io/dashboard.c **** 
 147:../cleanflight/src/main/io/dashboard.c **** #ifdef USE_GPS
 148:../cleanflight/src/main/io/dashboard.c **** static void padHalfLineBuffer(void)
 149:../cleanflight/src/main/io/dashboard.c **** {
 416              	 .loc 5 149 0
 417              	 .cfi_startproc
 418              	 
 419              	 
 420 0000 80B5     	 push {r7,lr}
 421              	.LCFI32:
 422              	 .cfi_def_cfa_offset 8
 423              	 .cfi_offset 7,-8
 424              	 .cfi_offset 14,-4
 425 0002 82B0     	 sub sp,sp,#8
 426              	.LCFI33:
 427              	 .cfi_def_cfa_offset 16
 428 0004 00AF     	 add r7,sp,#0
 429              	.LCFI34:
 430              	 .cfi_def_cfa_register 7
 150:../cleanflight/src/main/io/dashboard.c ****     uint8_t halfLineIndex = sizeof(lineBuffer) / 2;
 431              	 .loc 5 150 0
 432 0006 0B23     	 movs r3,#11
 433 0008 BB71     	 strb r3,[r7,#6]
 151:../cleanflight/src/main/io/dashboard.c ****     uint8_t length = strlen(lineBuffer);
 434              	 .loc 5 151 0
 435 000a 0C48     	 ldr r0,.L31
 436 000c FFF7FEFF 	 bl strlen
 437 0010 0346     	 mov r3,r0
 438 0012 FB71     	 strb r3,[r7,#7]
 152:../cleanflight/src/main/io/dashboard.c ****     while (length < halfLineIndex - 1) {
 439              	 .loc 5 152 0
 440 0014 06E0     	 b .L29
 441              	.L30:
 153:../cleanflight/src/main/io/dashboard.c ****         lineBuffer[length++] = ' ';
 442              	 .loc 5 153 0
 443 0016 FB79     	 ldrb r3,[r7,#7]
 444 0018 5A1C     	 adds r2,r3,#1
 445 001a FA71     	 strb r2,[r7,#7]
 446 001c 1A46     	 mov r2,r3
 447 001e 074B     	 ldr r3,.L31
 448 0020 2021     	 movs r1,#32
 449 0022 9954     	 strb r1,[r3,r2]
 450              	.L29:
 152:../cleanflight/src/main/io/dashboard.c ****     while (length < halfLineIndex - 1) {
 451              	 .loc 5 152 0
 452 0024 FA79     	 ldrb r2,[r7,#7]
 453 0026 BB79     	 ldrb r3,[r7,#6]
 454 0028 013B     	 subs r3,r3,#1
 455 002a 9A42     	 cmp r2,r3
 456 002c F3DB     	 blt .L30
 154:../cleanflight/src/main/io/dashboard.c ****     }
 155:../cleanflight/src/main/io/dashboard.c ****     lineBuffer[length] = 0;
 457              	 .loc 5 155 0
 458 002e FB79     	 ldrb r3,[r7,#7]
 459 0030 024A     	 ldr r2,.L31
 460 0032 0021     	 movs r1,#0
 461 0034 D154     	 strb r1,[r2,r3]
 156:../cleanflight/src/main/io/dashboard.c **** }
 462              	 .loc 5 156 0
 463 0036 0837     	 adds r7,r7,#8
 464              	.LCFI35:
 465              	 .cfi_def_cfa_offset 8
 466 0038 BD46     	 mov sp,r7
 467              	.LCFI36:
 468              	 .cfi_def_cfa_register 13
 469              	 
 470 003a 80BD     	 pop {r7,pc}
 471              	.L32:
 472              	 .align 2
 473              	.L31:
 474 003c 00000000 	 .word lineBuffer
 475              	 .cfi_endproc
 476              	.LFE587:
 478              	 .section .text.drawHorizonalPercentageBar,"ax",%progbits
 479              	 .align 2
 480              	 .thumb
 481              	 .thumb_func
 483              	drawHorizonalPercentageBar:
 484              	.LFB588:
 157:../cleanflight/src/main/io/dashboard.c **** #endif
 158:../cleanflight/src/main/io/dashboard.c **** 
 159:../cleanflight/src/main/io/dashboard.c **** // LCDbar(n,v) : draw a bar graph - n number of chars for width, v value in % to display
 160:../cleanflight/src/main/io/dashboard.c **** static void drawHorizonalPercentageBar(uint8_t width,uint8_t percent)
 161:../cleanflight/src/main/io/dashboard.c **** {
 485              	 .loc 5 161 0
 486              	 .cfi_startproc
 487              	 
 488              	 
 489 0000 80B5     	 push {r7,lr}
 490              	.LCFI37:
 491              	 .cfi_def_cfa_offset 8
 492              	 .cfi_offset 7,-8
 493              	 .cfi_offset 14,-4
 494 0002 84B0     	 sub sp,sp,#16
 495              	.LCFI38:
 496              	 .cfi_def_cfa_offset 24
 497 0004 00AF     	 add r7,sp,#0
 498              	.LCFI39:
 499              	 .cfi_def_cfa_register 7
 500 0006 0346     	 mov r3,r0
 501 0008 0A46     	 mov r2,r1
 502 000a FB71     	 strb r3,[r7,#7]
 503 000c 1346     	 mov r3,r2
 504 000e BB71     	 strb r3,[r7,#6]
 162:../cleanflight/src/main/io/dashboard.c ****     uint8_t i, j;
 163:../cleanflight/src/main/io/dashboard.c **** 
 164:../cleanflight/src/main/io/dashboard.c ****     if (percent > 100)
 505              	 .loc 5 164 0
 506 0010 BB79     	 ldrb r3,[r7,#6]
 507 0012 642B     	 cmp r3,#100
 508 0014 01D9     	 bls .L34
 165:../cleanflight/src/main/io/dashboard.c ****         percent = 100;
 509              	 .loc 5 165 0
 510 0016 6423     	 movs r3,#100
 511 0018 BB71     	 strb r3,[r7,#6]
 512              	.L34:
 166:../cleanflight/src/main/io/dashboard.c **** 
 167:../cleanflight/src/main/io/dashboard.c ****     j = (width * percent) / 100;
 513              	 .loc 5 167 0
 514 001a FB79     	 ldrb r3,[r7,#7]
 515 001c BA79     	 ldrb r2,[r7,#6]
 516 001e 02FB03F3 	 mul r3,r2,r3
 517 0022 224A     	 ldr r2,.L40
 518 0024 82FB0312 	 smull r1,r2,r2,r3
 519 0028 5211     	 asrs r2,r2,#5
 520 002a DB17     	 asrs r3,r3,#31
 521 002c D31A     	 subs r3,r2,r3
 522 002e BB73     	 strb r3,[r7,#14]
 168:../cleanflight/src/main/io/dashboard.c **** 
 169:../cleanflight/src/main/io/dashboard.c ****     for (i = 0; i < j; i++)
 523              	 .loc 5 169 0
 524 0030 0023     	 movs r3,#0
 525 0032 FB73     	 strb r3,[r7,#15]
 526 0034 05E0     	 b .L35
 527              	.L36:
 170:../cleanflight/src/main/io/dashboard.c ****         LCDprint(159); // full
 528              	 .loc 5 170 0 discriminator 3
 529 0036 9F20     	 movs r0,#159
 530 0038 FFF7FEFF 	 bl LCDprint
 169:../cleanflight/src/main/io/dashboard.c ****         LCDprint(159); // full
 531              	 .loc 5 169 0 discriminator 3
 532 003c FB7B     	 ldrb r3,[r7,#15]
 533 003e 0133     	 adds r3,r3,#1
 534 0040 FB73     	 strb r3,[r7,#15]
 535              	.L35:
 169:../cleanflight/src/main/io/dashboard.c ****         LCDprint(159); // full
 536              	 .loc 5 169 0 is_stmt 0 discriminator 1
 537 0042 FA7B     	 ldrb r2,[r7,#15]
 538 0044 BB7B     	 ldrb r3,[r7,#14]
 539 0046 9A42     	 cmp r2,r3
 540 0048 F5D3     	 bcc .L36
 171:../cleanflight/src/main/io/dashboard.c **** 
 172:../cleanflight/src/main/io/dashboard.c ****     if (j < width)
 541              	 .loc 5 172 0 is_stmt 1
 542 004a BA7B     	 ldrb r2,[r7,#14]
 543 004c FB79     	 ldrb r3,[r7,#7]
 544 004e 9A42     	 cmp r2,r3
 545 0050 1BD2     	 bcs .L37
 173:../cleanflight/src/main/io/dashboard.c ****         LCDprint(154 + (percent * width * 5 / 100 - 5 * j)); // partial fill
 546              	 .loc 5 173 0
 547 0052 BB79     	 ldrb r3,[r7,#6]
 548 0054 FA79     	 ldrb r2,[r7,#7]
 549 0056 02FB03F2 	 mul r2,r2,r3
 550 005a 1346     	 mov r3,r2
 551 005c 9B00     	 lsls r3,r3,#2
 552 005e 1344     	 add r3,r3,r2
 553 0060 124A     	 ldr r2,.L40
 554 0062 82FB0312 	 smull r1,r2,r2,r3
 555 0066 5211     	 asrs r2,r2,#5
 556 0068 DB17     	 asrs r3,r3,#31
 557 006a D31A     	 subs r3,r2,r3
 558 006c DAB2     	 uxtb r2,r3
 559 006e BB7B     	 ldrb r3,[r7,#14]
 560 0070 1946     	 mov r1,r3
 561 0072 8901     	 lsls r1,r1,#6
 562 0074 C91A     	 subs r1,r1,r3
 563 0076 8900     	 lsls r1,r1,#2
 564 0078 CB1A     	 subs r3,r1,r3
 565 007a DBB2     	 uxtb r3,r3
 566 007c 1344     	 add r3,r3,r2
 567 007e DBB2     	 uxtb r3,r3
 568 0080 663B     	 subs r3,r3,#102
 569 0082 DBB2     	 uxtb r3,r3
 570 0084 1846     	 mov r0,r3
 571 0086 FFF7FEFF 	 bl LCDprint
 572              	.L37:
 174:../cleanflight/src/main/io/dashboard.c **** 
 175:../cleanflight/src/main/io/dashboard.c ****     for (i = j + 1; i < width; i++)
 573              	 .loc 5 175 0
 574 008a BB7B     	 ldrb r3,[r7,#14]
 575 008c 0133     	 adds r3,r3,#1
 576 008e FB73     	 strb r3,[r7,#15]
 577 0090 05E0     	 b .L38
 578              	.L39:
 176:../cleanflight/src/main/io/dashboard.c ****         LCDprint(154); // empty
 579              	 .loc 5 176 0 discriminator 3
 580 0092 9A20     	 movs r0,#154
 581 0094 FFF7FEFF 	 bl LCDprint
 175:../cleanflight/src/main/io/dashboard.c ****         LCDprint(154); // empty
 582              	 .loc 5 175 0 discriminator 3
 583 0098 FB7B     	 ldrb r3,[r7,#15]
 584 009a 0133     	 adds r3,r3,#1
 585 009c FB73     	 strb r3,[r7,#15]
 586              	.L38:
 175:../cleanflight/src/main/io/dashboard.c ****         LCDprint(154); // empty
 587              	 .loc 5 175 0 is_stmt 0 discriminator 1
 588 009e FA7B     	 ldrb r2,[r7,#15]
 589 00a0 FB79     	 ldrb r3,[r7,#7]
 590 00a2 9A42     	 cmp r2,r3
 591 00a4 F5D3     	 bcc .L39
 177:../cleanflight/src/main/io/dashboard.c **** }
 592              	 .loc 5 177 0 is_stmt 1
 593 00a6 1037     	 adds r7,r7,#16
 594              	.LCFI40:
 595              	 .cfi_def_cfa_offset 8
 596 00a8 BD46     	 mov sp,r7
 597              	.LCFI41:
 598              	 .cfi_def_cfa_register 13
 599              	 
 600 00aa 80BD     	 pop {r7,pc}
 601              	.L41:
 602              	 .align 2
 603              	.L40:
 604 00ac 1F85EB51 	 .word 1374389535
 605              	 .cfi_endproc
 606              	.LFE588:
 608              	 .section .text.updateTicker,"ax",%progbits
 609              	 .align 2
 610              	 .thumb
 611              	 .thumb_func
 613              	updateTicker:
 614              	.LFB589:
 178:../cleanflight/src/main/io/dashboard.c **** 
 179:../cleanflight/src/main/io/dashboard.c **** #if 0
 180:../cleanflight/src/main/io/dashboard.c **** static void fillScreenWithCharacters(void)
 181:../cleanflight/src/main/io/dashboard.c **** {
 182:../cleanflight/src/main/io/dashboard.c ****     for (uint8_t row = 0; row < SCREEN_CHARACTER_ROW_COUNT; row++) {
 183:../cleanflight/src/main/io/dashboard.c ****         for (uint8_t column = 0; column < SCREEN_CHARACTER_COLUMN_COUNT; column++) {
 184:../cleanflight/src/main/io/dashboard.c ****             i2c_OLED_set_xy(bus, column, row);
 185:../cleanflight/src/main/io/dashboard.c ****             i2c_OLED_send_char(bus, 'A' + column);
 186:../cleanflight/src/main/io/dashboard.c ****         }
 187:../cleanflight/src/main/io/dashboard.c ****     }
 188:../cleanflight/src/main/io/dashboard.c **** }
 189:../cleanflight/src/main/io/dashboard.c **** #endif
 190:../cleanflight/src/main/io/dashboard.c **** 
 191:../cleanflight/src/main/io/dashboard.c **** 
 192:../cleanflight/src/main/io/dashboard.c **** static void updateTicker(void)
 193:../cleanflight/src/main/io/dashboard.c **** {
 615              	 .loc 5 193 0
 616              	 .cfi_startproc
 617              	 
 618              	 
 619 0000 80B5     	 push {r7,lr}
 620              	.LCFI42:
 621              	 .cfi_def_cfa_offset 8
 622              	 .cfi_offset 7,-8
 623              	 .cfi_offset 14,-4
 624 0002 00AF     	 add r7,sp,#0
 625              	.LCFI43:
 626              	 .cfi_def_cfa_register 7
 194:../cleanflight/src/main/io/dashboard.c ****     static uint8_t tickerIndex = 0;
 195:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_xy(bus, SCREEN_CHARACTER_COLUMN_COUNT - 1, 0);
 627              	 .loc 5 195 0
 628 0004 104B     	 ldr r3,.L43
 629 0006 1B68     	 ldr r3,[r3]
 630 0008 1846     	 mov r0,r3
 631 000a 1421     	 movs r1,#20
 632 000c 0022     	 movs r2,#0
 633 000e FFF7FEFF 	 bl i2c_OLED_set_xy
 196:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_char(bus, tickerCharacters[tickerIndex]);
 634              	 .loc 5 196 0
 635 0012 0D4B     	 ldr r3,.L43
 636 0014 1968     	 ldr r1,[r3]
 637 0016 0D4B     	 ldr r3,.L43+4
 638 0018 1B68     	 ldr r3,[r3]
 639 001a 0D4A     	 ldr r2,.L43+8
 640 001c 1278     	 ldrb r2,[r2]
 641 001e 1344     	 add r3,r3,r2
 642 0020 1B78     	 ldrb r3,[r3]
 643 0022 0846     	 mov r0,r1
 644 0024 1946     	 mov r1,r3
 645 0026 FFF7FEFF 	 bl i2c_OLED_send_char
 197:../cleanflight/src/main/io/dashboard.c ****     tickerIndex++;
 646              	 .loc 5 197 0
 647 002a 094B     	 ldr r3,.L43+8
 648 002c 1B78     	 ldrb r3,[r3]
 649 002e 0133     	 adds r3,r3,#1
 650 0030 DAB2     	 uxtb r2,r3
 651 0032 074B     	 ldr r3,.L43+8
 652 0034 1A70     	 strb r2,[r3]
 198:../cleanflight/src/main/io/dashboard.c ****     tickerIndex = tickerIndex % TICKER_CHARACTER_COUNT;
 653              	 .loc 5 198 0
 654 0036 064B     	 ldr r3,.L43+8
 655 0038 1B78     	 ldrb r3,[r3]
 656 003a 03F00303 	 and r3,r3,#3
 657 003e DAB2     	 uxtb r2,r3
 658 0040 034B     	 ldr r3,.L43+8
 659 0042 1A70     	 strb r2,[r3]
 199:../cleanflight/src/main/io/dashboard.c **** }
 660              	 .loc 5 199 0
 661 0044 80BD     	 pop {r7,pc}
 662              	.L44:
 663 0046 00BF     	 .align 2
 664              	.L43:
 665 0048 00000000 	 .word bus
 666 004c 00000000 	 .word tickerCharacters
 667 0050 00000000 	 .word tickerIndex.14525
 668              	 .cfi_endproc
 669              	.LFE589:
 671              	 .section .text.updateRxStatus,"ax",%progbits
 672              	 .align 2
 673              	 .thumb
 674              	 .thumb_func
 676              	updateRxStatus:
 677              	.LFB590:
 200:../cleanflight/src/main/io/dashboard.c **** 
 201:../cleanflight/src/main/io/dashboard.c **** static void updateRxStatus(void)
 202:../cleanflight/src/main/io/dashboard.c **** {
 678              	 .loc 5 202 0
 679              	 .cfi_startproc
 680              	 
 681              	 
 682 0000 80B5     	 push {r7,lr}
 683              	.LCFI44:
 684              	 .cfi_def_cfa_offset 8
 685              	 .cfi_offset 7,-8
 686              	 .cfi_offset 14,-4
 687 0002 82B0     	 sub sp,sp,#8
 688              	.LCFI45:
 689              	 .cfi_def_cfa_offset 16
 690 0004 00AF     	 add r7,sp,#0
 691              	.LCFI46:
 692              	 .cfi_def_cfa_register 7
 203:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_xy(bus, SCREEN_CHARACTER_COLUMN_COUNT - 2, 0);
 693              	 .loc 5 203 0
 694 0006 104B     	 ldr r3,.L48
 695 0008 1B68     	 ldr r3,[r3]
 696 000a 1846     	 mov r0,r3
 697 000c 1321     	 movs r1,#19
 698 000e 0022     	 movs r2,#0
 699 0010 FFF7FEFF 	 bl i2c_OLED_set_xy
 204:../cleanflight/src/main/io/dashboard.c ****     char rxStatus = '!';
 700              	 .loc 5 204 0
 701 0014 2123     	 movs r3,#33
 702 0016 FB71     	 strb r3,[r7,#7]
 205:../cleanflight/src/main/io/dashboard.c ****     if (rxIsReceivingSignal()) {
 703              	 .loc 5 205 0
 704 0018 FFF7FEFF 	 bl rxIsReceivingSignal
 705 001c 0346     	 mov r3,r0
 706 001e 002B     	 cmp r3,#0
 707 0020 01D0     	 beq .L46
 206:../cleanflight/src/main/io/dashboard.c ****         rxStatus = 'r';
 708              	 .loc 5 206 0
 709 0022 7223     	 movs r3,#114
 710 0024 FB71     	 strb r3,[r7,#7]
 711              	.L46:
 207:../cleanflight/src/main/io/dashboard.c ****     } if (rxAreFlightChannelsValid()) {
 712              	 .loc 5 207 0
 713 0026 FFF7FEFF 	 bl rxAreFlightChannelsValid
 714 002a 0346     	 mov r3,r0
 715 002c 002B     	 cmp r3,#0
 716 002e 01D0     	 beq .L47
 208:../cleanflight/src/main/io/dashboard.c ****         rxStatus = 'R';
 717              	 .loc 5 208 0
 718 0030 5223     	 movs r3,#82
 719 0032 FB71     	 strb r3,[r7,#7]
 720              	.L47:
 209:../cleanflight/src/main/io/dashboard.c ****     }
 210:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_char(bus, rxStatus);
 721              	 .loc 5 210 0
 722 0034 044B     	 ldr r3,.L48
 723 0036 1A68     	 ldr r2,[r3]
 724 0038 FB79     	 ldrb r3,[r7,#7]
 725 003a 1046     	 mov r0,r2
 726 003c 1946     	 mov r1,r3
 727 003e FFF7FEFF 	 bl i2c_OLED_send_char
 211:../cleanflight/src/main/io/dashboard.c **** }
 728              	 .loc 5 211 0
 729 0042 0837     	 adds r7,r7,#8
 730              	.LCFI47:
 731              	 .cfi_def_cfa_offset 8
 732 0044 BD46     	 mov sp,r7
 733              	.LCFI48:
 734              	 .cfi_def_cfa_register 13
 735              	 
 736 0046 80BD     	 pop {r7,pc}
 737              	.L49:
 738              	 .align 2
 739              	.L48:
 740 0048 00000000 	 .word bus
 741              	 .cfi_endproc
 742              	.LFE590:
 744              	 .section .text.updateFailsafeStatus,"ax",%progbits
 745              	 .align 2
 746              	 .thumb
 747              	 .thumb_func
 749              	updateFailsafeStatus:
 750              	.LFB591:
 212:../cleanflight/src/main/io/dashboard.c **** 
 213:../cleanflight/src/main/io/dashboard.c **** static void updateFailsafeStatus(void)
 214:../cleanflight/src/main/io/dashboard.c **** {
 751              	 .loc 5 214 0
 752              	 .cfi_startproc
 753              	 
 754              	 
 755 0000 80B5     	 push {r7,lr}
 756              	.LCFI49:
 757              	 .cfi_def_cfa_offset 8
 758              	 .cfi_offset 7,-8
 759              	 .cfi_offset 14,-4
 760 0002 82B0     	 sub sp,sp,#8
 761              	.LCFI50:
 762              	 .cfi_def_cfa_offset 16
 763 0004 00AF     	 add r7,sp,#0
 764              	.LCFI51:
 765              	 .cfi_def_cfa_register 7
 215:../cleanflight/src/main/io/dashboard.c ****     char failsafeIndicator = '?';
 766              	 .loc 5 215 0
 767 0006 3F23     	 movs r3,#63
 768 0008 FB71     	 strb r3,[r7,#7]
 216:../cleanflight/src/main/io/dashboard.c ****     switch (failsafePhase()) {
 769              	 .loc 5 216 0
 770 000a FFF7FEFF 	 bl failsafePhase
 771 000e 0346     	 mov r3,r0
 772 0010 062B     	 cmp r3,#6
 773 0012 26D8     	 bhi .L51
 774 0014 01A2     	 adr r2,.L53
 775 0016 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 776 001a 00BF     	 .p2align 2
 777              	.L53:
 778 001c 39000000 	 .word .L52+1
 779 0020 3F000000 	 .word .L54+1
 780 0024 45000000 	 .word .L55+1
 781 0028 4B000000 	 .word .L56+1
 782 002c 51000000 	 .word .L57+1
 783 0030 57000000 	 .word .L58+1
 784 0034 5D000000 	 .word .L59+1
 785              	 .p2align 1
 786              	.L52:
 217:../cleanflight/src/main/io/dashboard.c ****     case FAILSAFE_IDLE:
 218:../cleanflight/src/main/io/dashboard.c ****         failsafeIndicator = '-';
 787              	 .loc 5 218 0
 788 0038 2D23     	 movs r3,#45
 789 003a FB71     	 strb r3,[r7,#7]
 219:../cleanflight/src/main/io/dashboard.c ****         break;
 790              	 .loc 5 219 0
 791 003c 11E0     	 b .L51
 792              	.L54:
 220:../cleanflight/src/main/io/dashboard.c ****     case FAILSAFE_RX_LOSS_DETECTED:
 221:../cleanflight/src/main/io/dashboard.c ****         failsafeIndicator = 'R';
 793              	 .loc 5 221 0
 794 003e 5223     	 movs r3,#82
 795 0040 FB71     	 strb r3,[r7,#7]
 222:../cleanflight/src/main/io/dashboard.c ****         break;
 796              	 .loc 5 222 0
 797 0042 0EE0     	 b .L51
 798              	.L55:
 223:../cleanflight/src/main/io/dashboard.c ****     case FAILSAFE_LANDING:
 224:../cleanflight/src/main/io/dashboard.c ****         failsafeIndicator = 'l';
 799              	 .loc 5 224 0
 800 0044 6C23     	 movs r3,#108
 801 0046 FB71     	 strb r3,[r7,#7]
 225:../cleanflight/src/main/io/dashboard.c ****         break;
 802              	 .loc 5 225 0
 803 0048 0BE0     	 b .L51
 804              	.L56:
 226:../cleanflight/src/main/io/dashboard.c ****     case FAILSAFE_LANDED:
 227:../cleanflight/src/main/io/dashboard.c ****         failsafeIndicator = 'L';
 805              	 .loc 5 227 0
 806 004a 4C23     	 movs r3,#76
 807 004c FB71     	 strb r3,[r7,#7]
 228:../cleanflight/src/main/io/dashboard.c ****         break;
 808              	 .loc 5 228 0
 809 004e 08E0     	 b .L51
 810              	.L57:
 229:../cleanflight/src/main/io/dashboard.c ****     case FAILSAFE_RX_LOSS_MONITORING:
 230:../cleanflight/src/main/io/dashboard.c ****         failsafeIndicator = 'M';
 811              	 .loc 5 230 0
 812 0050 4D23     	 movs r3,#77
 813 0052 FB71     	 strb r3,[r7,#7]
 231:../cleanflight/src/main/io/dashboard.c ****         break;
 814              	 .loc 5 231 0
 815 0054 05E0     	 b .L51
 816              	.L58:
 232:../cleanflight/src/main/io/dashboard.c ****     case FAILSAFE_RX_LOSS_RECOVERED:
 233:../cleanflight/src/main/io/dashboard.c ****         failsafeIndicator = 'r';
 817              	 .loc 5 233 0
 818 0056 7223     	 movs r3,#114
 819 0058 FB71     	 strb r3,[r7,#7]
 234:../cleanflight/src/main/io/dashboard.c ****         break;
 820              	 .loc 5 234 0
 821 005a 02E0     	 b .L51
 822              	.L59:
 235:../cleanflight/src/main/io/dashboard.c ****     case FAILSAFE_GPS_RESCUE:
 236:../cleanflight/src/main/io/dashboard.c ****         failsafeIndicator = 'G';
 823              	 .loc 5 236 0
 824 005c 4723     	 movs r3,#71
 825 005e FB71     	 strb r3,[r7,#7]
 237:../cleanflight/src/main/io/dashboard.c ****         break;
 826              	 .loc 5 237 0
 827 0060 00BF     	 nop
 828              	.L51:
 238:../cleanflight/src/main/io/dashboard.c ****     }
 239:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_xy(bus, SCREEN_CHARACTER_COLUMN_COUNT - 3, 0);
 829              	 .loc 5 239 0
 830 0062 084B     	 ldr r3,.L60
 831 0064 1B68     	 ldr r3,[r3]
 832 0066 1846     	 mov r0,r3
 833 0068 1221     	 movs r1,#18
 834 006a 0022     	 movs r2,#0
 835 006c FFF7FEFF 	 bl i2c_OLED_set_xy
 240:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_char(bus, failsafeIndicator);
 836              	 .loc 5 240 0
 837 0070 044B     	 ldr r3,.L60
 838 0072 1A68     	 ldr r2,[r3]
 839 0074 FB79     	 ldrb r3,[r7,#7]
 840 0076 1046     	 mov r0,r2
 841 0078 1946     	 mov r1,r3
 842 007a FFF7FEFF 	 bl i2c_OLED_send_char
 241:../cleanflight/src/main/io/dashboard.c **** }
 843              	 .loc 5 241 0
 844 007e 0837     	 adds r7,r7,#8
 845              	.LCFI52:
 846              	 .cfi_def_cfa_offset 8
 847 0080 BD46     	 mov sp,r7
 848              	.LCFI53:
 849              	 .cfi_def_cfa_register 13
 850              	 
 851 0082 80BD     	 pop {r7,pc}
 852              	.L61:
 853              	 .align 2
 854              	.L60:
 855 0084 00000000 	 .word bus
 856              	 .cfi_endproc
 857              	.LFE591:
 859              	 .section .text.showTitle,"ax",%progbits
 860              	 .align 2
 861              	 .thumb
 862              	 .thumb_func
 864              	showTitle:
 865              	.LFB592:
 242:../cleanflight/src/main/io/dashboard.c **** 
 243:../cleanflight/src/main/io/dashboard.c **** static void showTitle(void)
 244:../cleanflight/src/main/io/dashboard.c **** {
 866              	 .loc 5 244 0
 867              	 .cfi_startproc
 868              	 
 869              	 
 870 0000 80B5     	 push {r7,lr}
 871              	.LCFI54:
 872              	 .cfi_def_cfa_offset 8
 873              	 .cfi_offset 7,-8
 874              	 .cfi_offset 14,-4
 875 0002 00AF     	 add r7,sp,#0
 876              	.LCFI55:
 877              	 .cfi_def_cfa_register 7
 245:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, 0);
 878              	 .loc 5 245 0
 879 0004 084B     	 ldr r3,.L63
 880 0006 1B68     	 ldr r3,[r3]
 881 0008 1846     	 mov r0,r3
 882 000a 0021     	 movs r1,#0
 883 000c FFF7FEFF 	 bl i2c_OLED_set_line
 246:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, pageState.page->title);
 884              	 .loc 5 246 0
 885 0010 054B     	 ldr r3,.L63
 886 0012 1A68     	 ldr r2,[r3]
 887 0014 054B     	 ldr r3,.L63+4
 888 0016 D3F80130 	 ldr r3,[r3,#1]
 889 001a D3F80130 	 ldr r3,[r3,#1]
 890 001e 1046     	 mov r0,r2
 891 0020 1946     	 mov r1,r3
 892 0022 FFF7FEFF 	 bl i2c_OLED_send_string
 247:../cleanflight/src/main/io/dashboard.c **** }
 893              	 .loc 5 247 0
 894 0026 80BD     	 pop {r7,pc}
 895              	.L64:
 896              	 .align 2
 897              	.L63:
 898 0028 00000000 	 .word bus
 899 002c 00000000 	 .word pageState
 900              	 .cfi_endproc
 901              	.LFE592:
 903              	 .section .text.handlePageChange,"ax",%progbits
 904              	 .align 2
 905              	 .thumb
 906              	 .thumb_func
 908              	handlePageChange:
 909              	.LFB593:
 248:../cleanflight/src/main/io/dashboard.c **** 
 249:../cleanflight/src/main/io/dashboard.c **** static void handlePageChange(void)
 250:../cleanflight/src/main/io/dashboard.c **** {
 910              	 .loc 5 250 0
 911              	 .cfi_startproc
 912              	 
 913              	 
 914 0000 80B5     	 push {r7,lr}
 915              	.LCFI56:
 916              	 .cfi_def_cfa_offset 8
 917              	 .cfi_offset 7,-8
 918              	 .cfi_offset 14,-4
 919 0002 00AF     	 add r7,sp,#0
 920              	.LCFI57:
 921              	 .cfi_def_cfa_register 7
 251:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_clear_display_quick(bus);
 922              	 .loc 5 251 0
 923 0004 034B     	 ldr r3,.L66
 924 0006 1B68     	 ldr r3,[r3]
 925 0008 1846     	 mov r0,r3
 926 000a FFF7FEFF 	 bl i2c_OLED_clear_display_quick
 252:../cleanflight/src/main/io/dashboard.c ****     showTitle();
 927              	 .loc 5 252 0
 928 000e FFF7FEFF 	 bl showTitle
 253:../cleanflight/src/main/io/dashboard.c **** }
 929              	 .loc 5 253 0
 930 0012 80BD     	 pop {r7,pc}
 931              	.L67:
 932              	 .align 2
 933              	.L66:
 934 0014 00000000 	 .word bus
 935              	 .cfi_endproc
 936              	.LFE593:
 938              	 .section .text.drawRxChannel,"ax",%progbits
 939              	 .align 2
 940              	 .thumb
 941              	 .thumb_func
 943              	drawRxChannel:
 944              	.LFB594:
 254:../cleanflight/src/main/io/dashboard.c **** 
 255:../cleanflight/src/main/io/dashboard.c **** static void drawRxChannel(uint8_t channelIndex, uint8_t width)
 256:../cleanflight/src/main/io/dashboard.c **** {
 945              	 .loc 5 256 0
 946              	 .cfi_startproc
 947              	 
 948              	 
 949 0000 80B5     	 push {r7,lr}
 950              	.LCFI58:
 951              	 .cfi_def_cfa_offset 8
 952              	 .cfi_offset 7,-8
 953              	 .cfi_offset 14,-4
 954 0002 84B0     	 sub sp,sp,#16
 955              	.LCFI59:
 956              	 .cfi_def_cfa_offset 24
 957 0004 00AF     	 add r7,sp,#0
 958              	.LCFI60:
 959              	 .cfi_def_cfa_register 7
 960 0006 0346     	 mov r3,r0
 961 0008 0A46     	 mov r2,r1
 962 000a FB71     	 strb r3,[r7,#7]
 963 000c 1346     	 mov r3,r2
 964 000e BB71     	 strb r3,[r7,#6]
 257:../cleanflight/src/main/io/dashboard.c ****     LCDprint(rcChannelLetters[channelIndex]);
 965              	 .loc 5 257 0
 966 0010 FB79     	 ldrb r3,[r7,#7]
 967 0012 154A     	 ldr r2,.L69
 968 0014 D35C     	 ldrb r3,[r2,r3]
 969 0016 1846     	 mov r0,r3
 970 0018 FFF7FEFF 	 bl LCDprint
 258:../cleanflight/src/main/io/dashboard.c **** 
 259:../cleanflight/src/main/io/dashboard.c ****     const uint32_t percentage = (constrain(rcData[channelIndex], PWM_RANGE_MIN, PWM_RANGE_MAX) - PW
 971              	 .loc 5 259 0
 972 001c FB79     	 ldrb r3,[r7,#7]
 973 001e 134A     	 ldr r2,.L69+4
 974 0020 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 975 0024 1BB2     	 sxth r3,r3
 976 0026 1846     	 mov r0,r3
 977 0028 4FF47A71 	 mov r1,#1000
 978 002c 4FF4FA62 	 mov r2,#2000
 979 0030 FFF7FEFF 	 bl constrain
 980 0034 0346     	 mov r3,r0
 981 0036 A3F57A73 	 sub r3,r3,#1000
 982 003a 6422     	 movs r2,#100
 983 003c 02FB03F3 	 mul r3,r2,r3
 984 0040 0B4A     	 ldr r2,.L69+8
 985 0042 82FB0312 	 smull r1,r2,r2,r3
 986 0046 9211     	 asrs r2,r2,#6
 987 0048 DB17     	 asrs r3,r3,#31
 988 004a D31A     	 subs r3,r2,r3
 989 004c FB60     	 str r3,[r7,#12]
 260:../cleanflight/src/main/io/dashboard.c ****     drawHorizonalPercentageBar(width - 1, percentage);
 990              	 .loc 5 260 0
 991 004e BB79     	 ldrb r3,[r7,#6]
 992 0050 013B     	 subs r3,r3,#1
 993 0052 DAB2     	 uxtb r2,r3
 994 0054 FB68     	 ldr r3,[r7,#12]
 995 0056 DBB2     	 uxtb r3,r3
 996 0058 1046     	 mov r0,r2
 997 005a 1946     	 mov r1,r3
 998 005c FFF7FEFF 	 bl drawHorizonalPercentageBar
 261:../cleanflight/src/main/io/dashboard.c **** }
 999              	 .loc 5 261 0
 1000 0060 1037     	 adds r7,r7,#16
 1001              	.LCFI61:
 1002              	 .cfi_def_cfa_offset 8
 1003 0062 BD46     	 mov sp,r7
 1004              	.LCFI62:
 1005              	 .cfi_def_cfa_register 13
 1006              	 
 1007 0064 80BD     	 pop {r7,pc}
 1008              	.L70:
 1009 0066 00BF     	 .align 2
 1010              	.L69:
 1011 0068 00000000 	 .word rcChannelLetters
 1012 006c 00000000 	 .word rcData
 1013 0070 D34D6210 	 .word 274877907
 1014              	 .cfi_endproc
 1015              	.LFE594:
 1017              	 .section .text.showRxPage,"ax",%progbits
 1018              	 .align 2
 1019              	 .thumb
 1020              	 .thumb_func
 1022              	showRxPage:
 1023              	.LFB595:
 262:../cleanflight/src/main/io/dashboard.c **** 
 263:../cleanflight/src/main/io/dashboard.c **** #define RX_CHANNELS_PER_PAGE_COUNT 14
 264:../cleanflight/src/main/io/dashboard.c **** static void showRxPage(void)
 265:../cleanflight/src/main/io/dashboard.c **** {
 1024              	 .loc 5 265 0
 1025              	 .cfi_startproc
 1026              	 
 1027              	 
 1028 0000 80B5     	 push {r7,lr}
 1029              	.LCFI63:
 1030              	 .cfi_def_cfa_offset 8
 1031              	 .cfi_offset 7,-8
 1032              	 .cfi_offset 14,-4
 1033 0002 82B0     	 sub sp,sp,#8
 1034              	.LCFI64:
 1035              	 .cfi_def_cfa_offset 16
 1036 0004 00AF     	 add r7,sp,#0
 1037              	.LCFI65:
 1038              	 .cfi_def_cfa_register 7
 1039              	.LBB2:
 266:../cleanflight/src/main/io/dashboard.c ****     for (int channelIndex = 0; channelIndex < rxRuntimeConfig.channelCount && channelIndex < RX_CHA
 1040              	 .loc 5 266 0
 1041 0006 0023     	 movs r3,#0
 1042 0008 7B60     	 str r3,[r7,#4]
 1043 000a 27E0     	 b .L72
 1044              	.L76:
 267:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, (channelIndex / 2) + PAGE_TITLE_LINE_COUNT);
 1045              	 .loc 5 267 0
 1046 000c 194B     	 ldr r3,.L77
 1047 000e 1968     	 ldr r1,[r3]
 1048 0010 7B68     	 ldr r3,[r7,#4]
 1049 0012 DA0F     	 lsrs r2,r3,#31
 1050 0014 1344     	 add r3,r3,r2
 1051 0016 5B10     	 asrs r3,r3,#1
 1052 0018 DBB2     	 uxtb r3,r3
 1053 001a 0133     	 adds r3,r3,#1
 1054 001c DBB2     	 uxtb r3,r3
 1055 001e 0846     	 mov r0,r1
 1056 0020 1946     	 mov r1,r3
 1057 0022 FFF7FEFF 	 bl i2c_OLED_set_line
 268:../cleanflight/src/main/io/dashboard.c **** 
 269:../cleanflight/src/main/io/dashboard.c ****         drawRxChannel(channelIndex, HALF_SCREEN_CHARACTER_COLUMN_COUNT);
 1058              	 .loc 5 269 0
 1059 0026 7B68     	 ldr r3,[r7,#4]
 1060 0028 DBB2     	 uxtb r3,r3
 1061 002a 1846     	 mov r0,r3
 1062 002c 0A21     	 movs r1,#10
 1063 002e FFF7FEFF 	 bl drawRxChannel
 270:../cleanflight/src/main/io/dashboard.c **** 
 271:../cleanflight/src/main/io/dashboard.c ****         if (channelIndex >= rxRuntimeConfig.channelCount) {
 1064              	 .loc 5 271 0
 1065 0032 114B     	 ldr r3,.L77+4
 1066 0034 1B78     	 ldrb r3,[r3]
 1067 0036 1A46     	 mov r2,r3
 1068 0038 7B68     	 ldr r3,[r7,#4]
 1069 003a 9A42     	 cmp r2,r3
 1070 003c 00DC     	 bgt .L73
 272:../cleanflight/src/main/io/dashboard.c ****             continue;
 1071              	 .loc 5 272 0
 1072 003e 0AE0     	 b .L74
 1073              	.L73:
 273:../cleanflight/src/main/io/dashboard.c ****         }
 274:../cleanflight/src/main/io/dashboard.c **** 
 275:../cleanflight/src/main/io/dashboard.c ****         if (IS_SCREEN_CHARACTER_COLUMN_COUNT_ODD) {
 276:../cleanflight/src/main/io/dashboard.c ****             LCDprint(' ');
 1074              	 .loc 5 276 0
 1075 0040 2020     	 movs r0,#32
 1076 0042 FFF7FEFF 	 bl LCDprint
 277:../cleanflight/src/main/io/dashboard.c ****         }
 278:../cleanflight/src/main/io/dashboard.c **** 
 279:../cleanflight/src/main/io/dashboard.c ****         drawRxChannel(channelIndex + PAGE_TITLE_LINE_COUNT, HALF_SCREEN_CHARACTER_COLUMN_COUNT);
 1077              	 .loc 5 279 0
 1078 0046 7B68     	 ldr r3,[r7,#4]
 1079 0048 DBB2     	 uxtb r3,r3
 1080 004a 0133     	 adds r3,r3,#1
 1081 004c DBB2     	 uxtb r3,r3
 1082 004e 1846     	 mov r0,r3
 1083 0050 0A21     	 movs r1,#10
 1084 0052 FFF7FEFF 	 bl drawRxChannel
 1085              	.L74:
 266:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, (channelIndex / 2) + PAGE_TITLE_LINE_COUNT);
 1086              	 .loc 5 266 0 discriminator 2
 1087 0056 7B68     	 ldr r3,[r7,#4]
 1088 0058 0233     	 adds r3,r3,#2
 1089 005a 7B60     	 str r3,[r7,#4]
 1090              	.L72:
 266:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, (channelIndex / 2) + PAGE_TITLE_LINE_COUNT);
 1091              	 .loc 5 266 0 is_stmt 0 discriminator 1
 1092 005c 064B     	 ldr r3,.L77+4
 1093 005e 1B78     	 ldrb r3,[r3]
 1094 0060 1A46     	 mov r2,r3
 1095 0062 7B68     	 ldr r3,[r7,#4]
 1096 0064 9A42     	 cmp r2,r3
 1097 0066 02DD     	 ble .L71
 266:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, (channelIndex / 2) + PAGE_TITLE_LINE_COUNT);
 1098              	 .loc 5 266 0 discriminator 3
 1099 0068 7B68     	 ldr r3,[r7,#4]
 1100 006a 0D2B     	 cmp r3,#13
 1101 006c CEDD     	 ble .L76
 1102              	.L71:
 1103              	.LBE2:
 280:../cleanflight/src/main/io/dashboard.c ****     }
 281:../cleanflight/src/main/io/dashboard.c **** }
 1104              	 .loc 5 281 0 is_stmt 1
 1105 006e 0837     	 adds r7,r7,#8
 1106              	.LCFI66:
 1107              	 .cfi_def_cfa_offset 8
 1108 0070 BD46     	 mov sp,r7
 1109              	.LCFI67:
 1110              	 .cfi_def_cfa_register 13
 1111              	 
 1112 0072 80BD     	 pop {r7,pc}
 1113              	.L78:
 1114              	 .align 2
 1115              	.L77:
 1116 0074 00000000 	 .word bus
 1117 0078 00000000 	 .word rxRuntimeConfig
 1118              	 .cfi_endproc
 1119              	.LFE595:
 1121              	 .section .rodata
 1122 0005 000000   	 .align 2
 1123              	.LC1:
 1124 0008 76257320 	 .ascii "v%s (%s)\000"
 1124      28257329 
 1124      00
 1125 0011 000000   	 .align 2
 1126              	.LC2:
 1127 0014 322E352E 	 .ascii "2.5.0\000"
 1127      3000
 1128              	 .section .text.showWelcomePage,"ax",%progbits
 1129              	 .align 2
 1130              	 .thumb
 1131              	 .thumb_func
 1133              	showWelcomePage:
 1134              	.LFB596:
 282:../cleanflight/src/main/io/dashboard.c **** 
 283:../cleanflight/src/main/io/dashboard.c **** static void showWelcomePage(void)
 284:../cleanflight/src/main/io/dashboard.c **** {
 1135              	 .loc 5 284 0
 1136              	 .cfi_startproc
 1137              	 
 1138              	 
 1139 0000 80B5     	 push {r7,lr}
 1140              	.LCFI68:
 1141              	 .cfi_def_cfa_offset 8
 1142              	 .cfi_offset 7,-8
 1143              	 .cfi_offset 14,-4
 1144 0002 82B0     	 sub sp,sp,#8
 1145              	.LCFI69:
 1146              	 .cfi_def_cfa_offset 16
 1147 0004 00AF     	 add r7,sp,#0
 1148              	.LCFI70:
 1149              	 .cfi_def_cfa_register 7
 285:../cleanflight/src/main/io/dashboard.c ****     uint8_t rowIndex = PAGE_TITLE_LINE_COUNT;
 1150              	 .loc 5 285 0
 1151 0006 0123     	 movs r3,#1
 1152 0008 FB71     	 strb r3,[r7,#7]
 286:../cleanflight/src/main/io/dashboard.c **** 
 287:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "v%s (%s)", FC_VERSION_STRING, shortGitRevision);
 1153              	 .loc 5 287 0
 1154 000a 154B     	 ldr r3,.L80
 1155 000c 1B68     	 ldr r3,[r3]
 1156 000e 1548     	 ldr r0,.L80+4
 1157 0010 1549     	 ldr r1,.L80+8
 1158 0012 164A     	 ldr r2,.L80+12
 1159 0014 FFF7FEFF 	 bl tfp_sprintf
 288:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1160              	 .loc 5 288 0
 1161 0018 154B     	 ldr r3,.L80+16
 1162 001a 1A68     	 ldr r2,[r3]
 1163 001c FB79     	 ldrb r3,[r7,#7]
 1164 001e 591C     	 adds r1,r3,#1
 1165 0020 F971     	 strb r1,[r7,#7]
 1166 0022 1046     	 mov r0,r2
 1167 0024 1946     	 mov r1,r3
 1168 0026 FFF7FEFF 	 bl i2c_OLED_set_line
 289:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1169              	 .loc 5 289 0
 1170 002a 114B     	 ldr r3,.L80+16
 1171 002c 1B68     	 ldr r3,[r3]
 1172 002e 1846     	 mov r0,r3
 1173 0030 0C49     	 ldr r1,.L80+4
 1174 0032 FFF7FEFF 	 bl i2c_OLED_send_string
 290:../cleanflight/src/main/io/dashboard.c **** 
 291:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1175              	 .loc 5 291 0
 1176 0036 0E4B     	 ldr r3,.L80+16
 1177 0038 1A68     	 ldr r2,[r3]
 1178 003a FB79     	 ldrb r3,[r7,#7]
 1179 003c 591C     	 adds r1,r3,#1
 1180 003e F971     	 strb r1,[r7,#7]
 1181 0040 1046     	 mov r0,r2
 1182 0042 1946     	 mov r1,r3
 1183 0044 FFF7FEFF 	 bl i2c_OLED_set_line
 292:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, targetName);
 1184              	 .loc 5 292 0
 1185 0048 094B     	 ldr r3,.L80+16
 1186 004a 1A68     	 ldr r2,[r3]
 1187 004c 094B     	 ldr r3,.L80+20
 1188 004e 1B68     	 ldr r3,[r3]
 1189 0050 1046     	 mov r0,r2
 1190 0052 1946     	 mov r1,r3
 1191 0054 FFF7FEFF 	 bl i2c_OLED_send_string
 293:../cleanflight/src/main/io/dashboard.c **** }
 1192              	 .loc 5 293 0
 1193 0058 0837     	 adds r7,r7,#8
 1194              	.LCFI71:
 1195              	 .cfi_def_cfa_offset 8
 1196 005a BD46     	 mov sp,r7
 1197              	.LCFI72:
 1198              	 .cfi_def_cfa_register 13
 1199              	 
 1200 005c 80BD     	 pop {r7,pc}
 1201              	.L81:
 1202 005e 00BF     	 .align 2
 1203              	.L80:
 1204 0060 00000000 	 .word shortGitRevision
 1205 0064 00000000 	 .word lineBuffer
 1206 0068 08000000 	 .word .LC1
 1207 006c 14000000 	 .word .LC2
 1208 0070 00000000 	 .word bus
 1209 0074 00000000 	 .word targetName
 1210              	 .cfi_endproc
 1211              	.LFE596:
 1213              	 .section .text.showArmedPage,"ax",%progbits
 1214              	 .align 2
 1215              	 .thumb
 1216              	 .thumb_func
 1218              	showArmedPage:
 1219              	.LFB597:
 294:../cleanflight/src/main/io/dashboard.c **** 
 295:../cleanflight/src/main/io/dashboard.c **** static void showArmedPage(void)
 296:../cleanflight/src/main/io/dashboard.c **** {
 1220              	 .loc 5 296 0
 1221              	 .cfi_startproc
 1222              	 
 1223              	 
 1224              	 
 1225 0000 80B4     	 push {r7}
 1226              	.LCFI73:
 1227              	 .cfi_def_cfa_offset 4
 1228              	 .cfi_offset 7,-4
 1229 0002 00AF     	 add r7,sp,#0
 1230              	.LCFI74:
 1231              	 .cfi_def_cfa_register 7
 297:../cleanflight/src/main/io/dashboard.c **** }
 1232              	 .loc 5 297 0
 1233 0004 BD46     	 mov sp,r7
 1234              	.LCFI75:
 1235              	 .cfi_def_cfa_register 13
 1236              	 
 1237 0006 5DF8047B 	 ldr r7,[sp],#4
 1238              	.LCFI76:
 1239              	 .cfi_restore 7
 1240              	 .cfi_def_cfa_offset 0
 1241 000a 7047     	 bx lr
 1242              	 .cfi_endproc
 1243              	.LFE597:
 1245              	 .section .rodata
 1246 001a 0000     	 .align 2
 1247              	.LC3:
 1248 001c 50726F66 	 .ascii "Profile: %d\000"
 1248      696C653A 
 1248      20256400 
 1249              	 .align 2
 1250              	.LC4:
 1251 0028 25732050 	 .ascii "%s P:%3d I:%3d D:%3d\000"
 1251      3A253364 
 1251      20493A25 
 1251      33642044 
 1251      3A253364 
 1252 003d 000000   	 .align 2
 1253              	.LC5:
 1254 0040 52617465 	 .ascii "Rate profile: %d\000"
 1254      2070726F 
 1254      66696C65 
 1254      3A202564 
 1254      00
 1255 0051 000000   	 .align 2
 1256              	.LC6:
 1257 0054 5252723A 	 .ascii "RRr:%d PRR:%d YRR:%d\000"
 1257      25642050 
 1257      52523A25 
 1257      64205952 
 1257      523A2564 
 1258 0069 000000   	 .align 2
 1259              	.LC7:
 1260 006c 52453A25 	 .ascii "RE:%d PE:%d YE:%d\000"
 1260      64205045 
 1260      3A256420 
 1260      59453A25 
 1260      6400
 1261 007e 0000     	 .align 2
 1262              	.LC8:
 1263 0080 52523A25 	 .ascii "RR:%d PR:%d YR:%d\000"
 1263      64205052 
 1263      3A256420 
 1263      59523A25 
 1263      6400
 1264              	 .section .text.showProfilePage,"ax",%progbits
 1265              	 .align 2
 1266              	 .thumb
 1267              	 .thumb_func
 1269              	showProfilePage:
 1270              	.LFB598:
 298:../cleanflight/src/main/io/dashboard.c **** 
 299:../cleanflight/src/main/io/dashboard.c **** static void showProfilePage(void)
 300:../cleanflight/src/main/io/dashboard.c **** {
 1271              	 .loc 5 300 0
 1272              	 .cfi_startproc
 1273              	 
 1274              	 
 1275 0000 B0B5     	 push {r4,r5,r7,lr}
 1276              	.LCFI77:
 1277              	 .cfi_def_cfa_offset 16
 1278              	 .cfi_offset 4,-16
 1279              	 .cfi_offset 5,-12
 1280              	 .cfi_offset 7,-8
 1281              	 .cfi_offset 14,-4
 1282 0002 88B0     	 sub sp,sp,#32
 1283              	.LCFI78:
 1284              	 .cfi_def_cfa_offset 48
 1285 0004 02AF     	 add r7,sp,#8
 1286              	.LCFI79:
 1287              	 .cfi_def_cfa 7,40
 301:../cleanflight/src/main/io/dashboard.c ****     uint8_t rowIndex = PAGE_TITLE_LINE_COUNT;
 1288              	 .loc 5 301 0
 1289 0006 0123     	 movs r3,#1
 1290 0008 FB75     	 strb r3,[r7,#23]
 302:../cleanflight/src/main/io/dashboard.c **** 
 303:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "Profile: %d", getCurrentPidProfileIndex());
 1291              	 .loc 5 303 0
 1292 000a FFF7FEFF 	 bl getCurrentPidProfileIndex
 1293 000e 0346     	 mov r3,r0
 1294 0010 6A48     	 ldr r0,.L86
 1295 0012 6B49     	 ldr r1,.L86+4
 1296 0014 1A46     	 mov r2,r3
 1297 0016 FFF7FEFF 	 bl tfp_sprintf
 304:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1298              	 .loc 5 304 0
 1299 001a 6A4B     	 ldr r3,.L86+8
 1300 001c 1A68     	 ldr r2,[r3]
 1301 001e FB7D     	 ldrb r3,[r7,#23]
 1302 0020 591C     	 adds r1,r3,#1
 1303 0022 F975     	 strb r1,[r7,#23]
 1304 0024 1046     	 mov r0,r2
 1305 0026 1946     	 mov r1,r3
 1306 0028 FFF7FEFF 	 bl i2c_OLED_set_line
 305:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1307              	 .loc 5 305 0
 1308 002c 654B     	 ldr r3,.L86+8
 1309 002e 1B68     	 ldr r3,[r3]
 1310 0030 1846     	 mov r0,r3
 1311 0032 6249     	 ldr r1,.L86
 1312 0034 FFF7FEFF 	 bl i2c_OLED_send_string
 306:../cleanflight/src/main/io/dashboard.c **** 
 307:../cleanflight/src/main/io/dashboard.c ****     static const char* const axisTitles[3] = {"ROL", "PIT", "YAW"};
 308:../cleanflight/src/main/io/dashboard.c ****     const pidProfile_t *pidProfile = currentPidProfile;
 1313              	 .loc 5 308 0
 1314 0038 634B     	 ldr r3,.L86+12
 1315 003a 1B68     	 ldr r3,[r3]
 1316 003c FB60     	 str r3,[r7,#12]
 1317              	.LBB3:
 309:../cleanflight/src/main/io/dashboard.c ****     for (int axis = 0; axis < 3; ++axis) {
 1318              	 .loc 5 309 0
 1319 003e 0023     	 movs r3,#0
 1320 0040 3B61     	 str r3,[r7,#16]
 1321 0042 39E0     	 b .L84
 1322              	.L85:
 310:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "%s P:%3d I:%3d D:%3d",
 1323              	 .loc 5 310 0 discriminator 3
 1324 0044 614A     	 ldr r2,.L86+16
 1325 0046 3B69     	 ldr r3,[r7,#16]
 1326 0048 52F82340 	 ldr r4,[r2,r3,lsl#2]
 311:../cleanflight/src/main/io/dashboard.c ****             axisTitles[axis],
 312:../cleanflight/src/main/io/dashboard.c ****             pidProfile->pid[axis].P,
 1327              	 .loc 5 312 0 discriminator 3
 1328 004c F968     	 ldr r1,[r7,#12]
 1329 004e 3A69     	 ldr r2,[r7,#16]
 1330 0050 1346     	 mov r3,r2
 1331 0052 9B00     	 lsls r3,r3,#2
 1332 0054 1344     	 add r3,r3,r2
 1333 0056 0B44     	 add r3,r3,r1
 1334 0058 0833     	 adds r3,r3,#8
 1335 005a 1B78     	 ldrb r3,[r3]
 310:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "%s P:%3d I:%3d D:%3d",
 1336              	 .loc 5 310 0 discriminator 3
 1337 005c 1D46     	 mov r5,r3
 313:../cleanflight/src/main/io/dashboard.c ****             pidProfile->pid[axis].I,
 1338              	 .loc 5 313 0 discriminator 3
 1339 005e F968     	 ldr r1,[r7,#12]
 1340 0060 3A69     	 ldr r2,[r7,#16]
 1341 0062 1346     	 mov r3,r2
 1342 0064 9B00     	 lsls r3,r3,#2
 1343 0066 1344     	 add r3,r3,r2
 1344 0068 0B44     	 add r3,r3,r1
 1345 006a 0833     	 adds r3,r3,#8
 1346 006c 5B78     	 ldrb r3,[r3,#1]
 310:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "%s P:%3d I:%3d D:%3d",
 1347              	 .loc 5 310 0 discriminator 3
 1348 006e 1846     	 mov r0,r3
 314:../cleanflight/src/main/io/dashboard.c ****             pidProfile->pid[axis].D
 1349              	 .loc 5 314 0 discriminator 3
 1350 0070 F968     	 ldr r1,[r7,#12]
 1351 0072 3A69     	 ldr r2,[r7,#16]
 1352 0074 1346     	 mov r3,r2
 1353 0076 9B00     	 lsls r3,r3,#2
 1354 0078 1344     	 add r3,r3,r2
 1355 007a 0B44     	 add r3,r3,r1
 1356 007c 0833     	 adds r3,r3,#8
 1357 007e 9B78     	 ldrb r3,[r3,#2]
 310:../cleanflight/src/main/io/dashboard.c ****             axisTitles[axis],
 1358              	 .loc 5 310 0 discriminator 3
 1359 0080 0090     	 str r0,[sp]
 1360 0082 0193     	 str r3,[sp,#4]
 1361 0084 4D48     	 ldr r0,.L86
 1362 0086 5249     	 ldr r1,.L86+20
 1363 0088 2246     	 mov r2,r4
 1364 008a 2B46     	 mov r3,r5
 1365 008c FFF7FEFF 	 bl tfp_sprintf
 315:../cleanflight/src/main/io/dashboard.c ****         );
 316:../cleanflight/src/main/io/dashboard.c ****         padLineBuffer();
 1366              	 .loc 5 316 0 discriminator 3
 1367 0090 FFF7FEFF 	 bl padLineBuffer
 317:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, rowIndex++);
 1368              	 .loc 5 317 0 discriminator 3
 1369 0094 4B4B     	 ldr r3,.L86+8
 1370 0096 1A68     	 ldr r2,[r3]
 1371 0098 FB7D     	 ldrb r3,[r7,#23]
 1372 009a 591C     	 adds r1,r3,#1
 1373 009c F975     	 strb r1,[r7,#23]
 1374 009e 1046     	 mov r0,r2
 1375 00a0 1946     	 mov r1,r3
 1376 00a2 FFF7FEFF 	 bl i2c_OLED_set_line
 318:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_send_string(bus, lineBuffer);
 1377              	 .loc 5 318 0 discriminator 3
 1378 00a6 474B     	 ldr r3,.L86+8
 1379 00a8 1B68     	 ldr r3,[r3]
 1380 00aa 1846     	 mov r0,r3
 1381 00ac 4349     	 ldr r1,.L86
 1382 00ae FFF7FEFF 	 bl i2c_OLED_send_string
 309:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "%s P:%3d I:%3d D:%3d",
 1383              	 .loc 5 309 0 discriminator 3
 1384 00b2 3B69     	 ldr r3,[r7,#16]
 1385 00b4 0133     	 adds r3,r3,#1
 1386 00b6 3B61     	 str r3,[r7,#16]
 1387              	.L84:
 309:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "%s P:%3d I:%3d D:%3d",
 1388              	 .loc 5 309 0 is_stmt 0 discriminator 1
 1389 00b8 3B69     	 ldr r3,[r7,#16]
 1390 00ba 022B     	 cmp r3,#2
 1391 00bc C2DD     	 ble .L85
 1392              	.LBE3:
 319:../cleanflight/src/main/io/dashboard.c ****     }
 320:../cleanflight/src/main/io/dashboard.c **** 
 321:../cleanflight/src/main/io/dashboard.c ****     const uint8_t currentRateProfileIndex = getCurrentControlRateProfileIndex();
 1393              	 .loc 5 321 0 is_stmt 1
 1394 00be FFF7FEFF 	 bl getCurrentControlRateProfileIndex
 1395 00c2 0346     	 mov r3,r0
 1396 00c4 FB72     	 strb r3,[r7,#11]
 322:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "Rate profile: %d", currentRateProfileIndex);
 1397              	 .loc 5 322 0
 1398 00c6 FB7A     	 ldrb r3,[r7,#11]
 1399 00c8 3C48     	 ldr r0,.L86
 1400 00ca 4249     	 ldr r1,.L86+24
 1401 00cc 1A46     	 mov r2,r3
 1402 00ce FFF7FEFF 	 bl tfp_sprintf
 323:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1403              	 .loc 5 323 0
 1404 00d2 3C4B     	 ldr r3,.L86+8
 1405 00d4 1A68     	 ldr r2,[r3]
 1406 00d6 FB7D     	 ldrb r3,[r7,#23]
 1407 00d8 591C     	 adds r1,r3,#1
 1408 00da F975     	 strb r1,[r7,#23]
 1409 00dc 1046     	 mov r0,r2
 1410 00de 1946     	 mov r1,r3
 1411 00e0 FFF7FEFF 	 bl i2c_OLED_set_line
 324:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1412              	 .loc 5 324 0
 1413 00e4 374B     	 ldr r3,.L86+8
 1414 00e6 1B68     	 ldr r3,[r3]
 1415 00e8 1846     	 mov r0,r3
 1416 00ea 3449     	 ldr r1,.L86
 1417 00ec FFF7FEFF 	 bl i2c_OLED_send_string
 325:../cleanflight/src/main/io/dashboard.c **** 
 326:../cleanflight/src/main/io/dashboard.c ****     const controlRateConfig_t *controlRateConfig = controlRateProfiles(currentRateProfileIndex);
 1418              	 .loc 5 326 0
 1419 00f0 FB7A     	 ldrb r3,[r7,#11]
 1420 00f2 1846     	 mov r0,r3
 1421 00f4 FFF7FEFF 	 bl controlRateProfiles
 1422 00f8 7860     	 str r0,[r7,#4]
 327:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "RRr:%d PRR:%d YRR:%d",
 328:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rcRates[FD_ROLL],
 1423              	 .loc 5 328 0
 1424 00fa 7B68     	 ldr r3,[r7,#4]
 1425 00fc DB78     	 ldrb r3,[r3,#3]
 327:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "RRr:%d PRR:%d YRR:%d",
 1426              	 .loc 5 327 0
 1427 00fe 1A46     	 mov r2,r3
 329:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rcRates[FD_PITCH],
 1428              	 .loc 5 329 0
 1429 0100 7B68     	 ldr r3,[r7,#4]
 1430 0102 1B79     	 ldrb r3,[r3,#4]
 327:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "RRr:%d PRR:%d YRR:%d",
 1431              	 .loc 5 327 0
 1432 0104 1C46     	 mov r4,r3
 330:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rcRates[FD_YAW]
 1433              	 .loc 5 330 0
 1434 0106 7B68     	 ldr r3,[r7,#4]
 1435 0108 5B79     	 ldrb r3,[r3,#5]
 327:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "RRr:%d PRR:%d YRR:%d",
 1436              	 .loc 5 327 0
 1437 010a 0093     	 str r3,[sp]
 1438 010c 2B48     	 ldr r0,.L86
 1439 010e 3249     	 ldr r1,.L86+28
 1440 0110 2346     	 mov r3,r4
 1441 0112 FFF7FEFF 	 bl tfp_sprintf
 331:../cleanflight/src/main/io/dashboard.c ****     );
 332:../cleanflight/src/main/io/dashboard.c ****     padLineBuffer();
 1442              	 .loc 5 332 0
 1443 0116 FFF7FEFF 	 bl padLineBuffer
 333:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1444              	 .loc 5 333 0
 1445 011a 2A4B     	 ldr r3,.L86+8
 1446 011c 1A68     	 ldr r2,[r3]
 1447 011e FB7D     	 ldrb r3,[r7,#23]
 1448 0120 591C     	 adds r1,r3,#1
 1449 0122 F975     	 strb r1,[r7,#23]
 1450 0124 1046     	 mov r0,r2
 1451 0126 1946     	 mov r1,r3
 1452 0128 FFF7FEFF 	 bl i2c_OLED_set_line
 334:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1453              	 .loc 5 334 0
 1454 012c 254B     	 ldr r3,.L86+8
 1455 012e 1B68     	 ldr r3,[r3]
 1456 0130 1846     	 mov r0,r3
 1457 0132 2249     	 ldr r1,.L86
 1458 0134 FFF7FEFF 	 bl i2c_OLED_send_string
 335:../cleanflight/src/main/io/dashboard.c **** 
 336:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "RE:%d PE:%d YE:%d",
 337:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rcExpo[FD_ROLL],
 1459              	 .loc 5 337 0
 1460 0138 7B68     	 ldr r3,[r7,#4]
 1461 013a 9B79     	 ldrb r3,[r3,#6]
 336:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rcExpo[FD_ROLL],
 1462              	 .loc 5 336 0
 1463 013c 1A46     	 mov r2,r3
 338:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rcExpo[FD_PITCH],
 1464              	 .loc 5 338 0
 1465 013e 7B68     	 ldr r3,[r7,#4]
 1466 0140 DB79     	 ldrb r3,[r3,#7]
 336:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rcExpo[FD_ROLL],
 1467              	 .loc 5 336 0
 1468 0142 1C46     	 mov r4,r3
 339:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rcExpo[FD_YAW]
 1469              	 .loc 5 339 0
 1470 0144 7B68     	 ldr r3,[r7,#4]
 1471 0146 1B7A     	 ldrb r3,[r3,#8]
 336:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rcExpo[FD_ROLL],
 1472              	 .loc 5 336 0
 1473 0148 0093     	 str r3,[sp]
 1474 014a 1C48     	 ldr r0,.L86
 1475 014c 2349     	 ldr r1,.L86+32
 1476 014e 2346     	 mov r3,r4
 1477 0150 FFF7FEFF 	 bl tfp_sprintf
 340:../cleanflight/src/main/io/dashboard.c ****     );
 341:../cleanflight/src/main/io/dashboard.c ****     padLineBuffer();
 1478              	 .loc 5 341 0
 1479 0154 FFF7FEFF 	 bl padLineBuffer
 342:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1480              	 .loc 5 342 0
 1481 0158 1A4B     	 ldr r3,.L86+8
 1482 015a 1A68     	 ldr r2,[r3]
 1483 015c FB7D     	 ldrb r3,[r7,#23]
 1484 015e 591C     	 adds r1,r3,#1
 1485 0160 F975     	 strb r1,[r7,#23]
 1486 0162 1046     	 mov r0,r2
 1487 0164 1946     	 mov r1,r3
 1488 0166 FFF7FEFF 	 bl i2c_OLED_set_line
 343:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1489              	 .loc 5 343 0
 1490 016a 164B     	 ldr r3,.L86+8
 1491 016c 1B68     	 ldr r3,[r3]
 1492 016e 1846     	 mov r0,r3
 1493 0170 1249     	 ldr r1,.L86
 1494 0172 FFF7FEFF 	 bl i2c_OLED_send_string
 344:../cleanflight/src/main/io/dashboard.c **** 
 345:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "RR:%d PR:%d YR:%d",
 346:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rates[FD_ROLL],
 1495              	 .loc 5 346 0
 1496 0176 7B68     	 ldr r3,[r7,#4]
 1497 0178 5B7A     	 ldrb r3,[r3,#9]
 345:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rates[FD_ROLL],
 1498              	 .loc 5 345 0
 1499 017a 1A46     	 mov r2,r3
 347:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rates[FD_PITCH],
 1500              	 .loc 5 347 0
 1501 017c 7B68     	 ldr r3,[r7,#4]
 1502 017e 9B7A     	 ldrb r3,[r3,#10]
 345:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rates[FD_ROLL],
 1503              	 .loc 5 345 0
 1504 0180 1C46     	 mov r4,r3
 348:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rates[FD_YAW]
 1505              	 .loc 5 348 0
 1506 0182 7B68     	 ldr r3,[r7,#4]
 1507 0184 DB7A     	 ldrb r3,[r3,#11]
 345:../cleanflight/src/main/io/dashboard.c ****         controlRateConfig->rates[FD_ROLL],
 1508              	 .loc 5 345 0
 1509 0186 0093     	 str r3,[sp]
 1510 0188 0C48     	 ldr r0,.L86
 1511 018a 1549     	 ldr r1,.L86+36
 1512 018c 2346     	 mov r3,r4
 1513 018e FFF7FEFF 	 bl tfp_sprintf
 349:../cleanflight/src/main/io/dashboard.c ****     );
 350:../cleanflight/src/main/io/dashboard.c ****     padLineBuffer();
 1514              	 .loc 5 350 0
 1515 0192 FFF7FEFF 	 bl padLineBuffer
 351:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1516              	 .loc 5 351 0
 1517 0196 0B4B     	 ldr r3,.L86+8
 1518 0198 1A68     	 ldr r2,[r3]
 1519 019a FB7D     	 ldrb r3,[r7,#23]
 1520 019c 591C     	 adds r1,r3,#1
 1521 019e F975     	 strb r1,[r7,#23]
 1522 01a0 1046     	 mov r0,r2
 1523 01a2 1946     	 mov r1,r3
 1524 01a4 FFF7FEFF 	 bl i2c_OLED_set_line
 352:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1525              	 .loc 5 352 0
 1526 01a8 064B     	 ldr r3,.L86+8
 1527 01aa 1B68     	 ldr r3,[r3]
 1528 01ac 1846     	 mov r0,r3
 1529 01ae 0349     	 ldr r1,.L86
 1530 01b0 FFF7FEFF 	 bl i2c_OLED_send_string
 353:../cleanflight/src/main/io/dashboard.c **** }
 1531              	 .loc 5 353 0
 1532 01b4 1837     	 adds r7,r7,#24
 1533              	.LCFI80:
 1534              	 .cfi_def_cfa_offset 16
 1535 01b6 BD46     	 mov sp,r7
 1536              	.LCFI81:
 1537              	 .cfi_def_cfa_register 13
 1538              	 
 1539 01b8 B0BD     	 pop {r4,r5,r7,pc}
 1540              	.L87:
 1541 01ba 00BF     	 .align 2
 1542              	.L86:
 1543 01bc 00000000 	 .word lineBuffer
 1544 01c0 1C000000 	 .word .LC3
 1545 01c4 00000000 	 .word bus
 1546 01c8 00000000 	 .word currentPidProfile
 1547 01cc 00000000 	 .word axisTitles.14572
 1548 01d0 28000000 	 .word .LC4
 1549 01d4 40000000 	 .word .LC5
 1550 01d8 54000000 	 .word .LC6
 1551 01dc 6C000000 	 .word .LC7
 1552 01e0 80000000 	 .word .LC8
 1553              	 .cfi_endproc
 1554              	.LFE598:
 1556              	 .section .rodata
 1557 0092 0000     	 .align 2
 1558              	.LC9:
 1559 0094 53617473 	 .ascii "Sats: %d Fix: %c\000"
 1559      3A202564 
 1559      20466978 
 1559      3A202563 
 1559      00
 1560 00a5 000000   	 .align 2
 1561              	.LC10:
 1562 00a8 4C612F4C 	 .ascii "La/Lo: %d/%d\000"
 1562      6F3A2025 
 1562      642F2564 
 1562      00
 1563 00b5 000000   	 .align 2
 1564              	.LC11:
 1565 00b8 5370643A 	 .ascii "Spd: %d\000"
 1565      20256400 
 1566              	 .align 2
 1567              	.LC12:
 1568 00c0 47433A20 	 .ascii "GC: %d\000"
 1568      256400
 1569 00c7 00       	 .align 2
 1570              	.LC13:
 1571 00c8 52583A20 	 .ascii "RX: %d\000"
 1571      256400
 1572 00cf 00       	 .align 2
 1573              	.LC14:
 1574 00d0 45525273 	 .ascii "ERRs: %d\000"
 1574      3A202564 
 1574      00
 1575 00d9 000000   	 .align 2
 1576              	.LC15:
 1577 00dc 44743A20 	 .ascii "Dt: %d\000"
 1577      256400
 1578 00e3 00       	 .align 2
 1579              	.LC16:
 1580 00e4 544F733A 	 .ascii "TOs: %d\000"
 1580      20256400 
 1581              	 .section .text.showGpsPage,"ax",%progbits
 1582              	 .align 2
 1583              	 .thumb
 1584              	 .thumb_func
 1586              	showGpsPage:
 1587              	.LFB599:
 354:../cleanflight/src/main/io/dashboard.c **** #define SATELLITE_COUNT (sizeof(GPS_svinfo_cno) / sizeof(GPS_svinfo_cno[0]))
 355:../cleanflight/src/main/io/dashboard.c **** #define SATELLITE_GRAPH_LEFT_OFFSET ((SCREEN_CHARACTER_COLUMN_COUNT - SATELLITE_COUNT) / 2)
 356:../cleanflight/src/main/io/dashboard.c **** 
 357:../cleanflight/src/main/io/dashboard.c **** #ifdef USE_GPS
 358:../cleanflight/src/main/io/dashboard.c **** static void showGpsPage(void)
 359:../cleanflight/src/main/io/dashboard.c **** {
 1588              	 .loc 5 359 0
 1589              	 .cfi_startproc
 1590              	 
 1591              	 
 1592 0000 90B5     	 push {r4,r7,lr}
 1593              	.LCFI82:
 1594              	 .cfi_def_cfa_offset 12
 1595              	 .cfi_offset 4,-12
 1596              	 .cfi_offset 7,-8
 1597              	 .cfi_offset 14,-4
 1598 0002 87B0     	 sub sp,sp,#28
 1599              	.LCFI83:
 1600              	 .cfi_def_cfa_offset 40
 1601 0004 00AF     	 add r7,sp,#0
 1602              	.LCFI84:
 1603              	 .cfi_def_cfa_register 7
 360:../cleanflight/src/main/io/dashboard.c ****     if (!feature(FEATURE_GPS)) {
 1604              	 .loc 5 360 0
 1605 0006 8020     	 movs r0,#128
 1606 0008 FFF7FEFF 	 bl feature
 1607 000c 0346     	 mov r3,r0
 1608 000e 83F00103 	 eor r3,r3,#1
 1609 0012 DBB2     	 uxtb r3,r3
 1610 0014 002B     	 cmp r3,#0
 1611 0016 07D0     	 beq .L89
 361:../cleanflight/src/main/io/dashboard.c ****         pageState.pageFlags |= PAGE_STATE_FLAG_FORCE_PAGE_CHANGE;
 1612              	 .loc 5 361 0
 1613 0018 3F4B     	 ldr r3,.L97
 1614 001a 5B79     	 ldrb r3,[r3,#5]
 1615 001c 43F00203 	 orr r3,r3,#2
 1616 0020 DAB2     	 uxtb r2,r3
 1617 0022 3D4B     	 ldr r3,.L97
 1618 0024 5A71     	 strb r2,[r3,#5]
 362:../cleanflight/src/main/io/dashboard.c ****         return;
 1619              	 .loc 5 362 0
 1620 0026 73E1     	 b .L88
 1621              	.L89:
 363:../cleanflight/src/main/io/dashboard.c ****     }
 364:../cleanflight/src/main/io/dashboard.c **** 
 365:../cleanflight/src/main/io/dashboard.c ****     uint8_t rowIndex = PAGE_TITLE_LINE_COUNT;
 1622              	 .loc 5 365 0
 1623 0028 0123     	 movs r3,#1
 1624 002a FB74     	 strb r3,[r7,#19]
 366:../cleanflight/src/main/io/dashboard.c **** 
 367:../cleanflight/src/main/io/dashboard.c ****     static uint8_t gpsTicker = 0;
 368:../cleanflight/src/main/io/dashboard.c ****     static uint32_t lastGPSSvInfoReceivedCount = 0;
 369:../cleanflight/src/main/io/dashboard.c ****     if (GPS_svInfoReceivedCount != lastGPSSvInfoReceivedCount) {
 1625              	 .loc 5 369 0
 1626 002c 3B4B     	 ldr r3,.L97+4
 1627 002e 1A68     	 ldr r2,[r3]
 1628 0030 3B4B     	 ldr r3,.L97+8
 1629 0032 1B68     	 ldr r3,[r3]
 1630 0034 9A42     	 cmp r2,r3
 1631 0036 10D0     	 beq .L91
 370:../cleanflight/src/main/io/dashboard.c ****         lastGPSSvInfoReceivedCount = GPS_svInfoReceivedCount;
 1632              	 .loc 5 370 0
 1633 0038 384B     	 ldr r3,.L97+4
 1634 003a 1B68     	 ldr r3,[r3]
 1635 003c 384A     	 ldr r2,.L97+8
 1636 003e 1360     	 str r3,[r2]
 371:../cleanflight/src/main/io/dashboard.c ****         gpsTicker++;
 1637              	 .loc 5 371 0
 1638 0040 384B     	 ldr r3,.L97+12
 1639 0042 1B78     	 ldrb r3,[r3]
 1640 0044 0133     	 adds r3,r3,#1
 1641 0046 DAB2     	 uxtb r2,r3
 1642 0048 364B     	 ldr r3,.L97+12
 1643 004a 1A70     	 strb r2,[r3]
 372:../cleanflight/src/main/io/dashboard.c ****         gpsTicker = gpsTicker % TICKER_CHARACTER_COUNT;
 1644              	 .loc 5 372 0
 1645 004c 354B     	 ldr r3,.L97+12
 1646 004e 1B78     	 ldrb r3,[r3]
 1647 0050 03F00303 	 and r3,r3,#3
 1648 0054 DAB2     	 uxtb r2,r3
 1649 0056 334B     	 ldr r3,.L97+12
 1650 0058 1A70     	 strb r2,[r3]
 1651              	.L91:
 373:../cleanflight/src/main/io/dashboard.c ****     }
 374:../cleanflight/src/main/io/dashboard.c **** 
 375:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_xy(bus, 0, rowIndex);
 1652              	 .loc 5 375 0
 1653 005a 334B     	 ldr r3,.L97+16
 1654 005c 1A68     	 ldr r2,[r3]
 1655 005e FB7C     	 ldrb r3,[r7,#19]
 1656 0060 1046     	 mov r0,r2
 1657 0062 0021     	 movs r1,#0
 1658 0064 1A46     	 mov r2,r3
 1659 0066 FFF7FEFF 	 bl i2c_OLED_set_xy
 376:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_char(bus, tickerCharacters[gpsTicker]);
 1660              	 .loc 5 376 0
 1661 006a 2F4B     	 ldr r3,.L97+16
 1662 006c 1968     	 ldr r1,[r3]
 1663 006e 2F4B     	 ldr r3,.L97+20
 1664 0070 1B68     	 ldr r3,[r3]
 1665 0072 2C4A     	 ldr r2,.L97+12
 1666 0074 1278     	 ldrb r2,[r2]
 1667 0076 1344     	 add r3,r3,r2
 1668 0078 1B78     	 ldrb r3,[r3]
 1669 007a 0846     	 mov r0,r1
 1670 007c 1946     	 mov r1,r3
 1671 007e FFF7FEFF 	 bl i2c_OLED_send_char
 377:../cleanflight/src/main/io/dashboard.c **** 
 378:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_xy(bus, MAX(0, (uint8_t)SATELLITE_GRAPH_LEFT_OFFSET), rowIndex++);
 1672              	 .loc 5 378 0
 1673 0082 294B     	 ldr r3,.L97+16
 1674 0084 1968     	 ldr r1,[r3]
 1675              	.LBB4:
 1676 0086 0023     	 movs r3,#0
 1677 0088 FB60     	 str r3,[r7,#12]
 1678 008a 0223     	 movs r3,#2
 1679 008c FB72     	 strb r3,[r7,#11]
 1680 008e FA7A     	 ldrb r2,[r7,#11]
 1681 0090 FB68     	 ldr r3,[r7,#12]
 1682 0092 9342     	 cmp r3,r2
 1683 0094 B8BF     	 it lt
 1684 0096 1346     	 movlt r3,r2
 1685              	.LBE4:
 1686 0098 DAB2     	 uxtb r2,r3
 1687 009a FB7C     	 ldrb r3,[r7,#19]
 1688 009c 581C     	 adds r0,r3,#1
 1689 009e F874     	 strb r0,[r7,#19]
 1690 00a0 0846     	 mov r0,r1
 1691 00a2 1146     	 mov r1,r2
 1692 00a4 1A46     	 mov r2,r3
 1693 00a6 FFF7FEFF 	 bl i2c_OLED_set_xy
 379:../cleanflight/src/main/io/dashboard.c **** 
 380:../cleanflight/src/main/io/dashboard.c ****     uint32_t index;
 381:../cleanflight/src/main/io/dashboard.c ****     for (index = 0; index < SATELLITE_COUNT && index < SCREEN_CHARACTER_COLUMN_COUNT; index++) {
 1694              	 .loc 5 381 0
 1695 00aa 0023     	 movs r3,#0
 1696 00ac 7B61     	 str r3,[r7,#20]
 1697 00ae 24E0     	 b .L92
 1698              	.L94:
 1699              	.LBB5:
 382:../cleanflight/src/main/io/dashboard.c ****         uint8_t bargraphOffset = ((uint16_t) GPS_svinfo_cno[index] * VERTICAL_BARGRAPH_CHARACTER_CO
 1700              	 .loc 5 382 0 discriminator 4
 1701 00b0 1F4A     	 ldr r2,.L97+24
 1702 00b2 7B69     	 ldr r3,[r7,#20]
 1703 00b4 1344     	 add r3,r3,r2
 1704 00b6 1B78     	 ldrb r3,[r3]
 1705 00b8 1A46     	 mov r2,r3
 1706 00ba 1346     	 mov r3,r2
 1707 00bc DB00     	 lsls r3,r3,#3
 1708 00be 9B1A     	 subs r3,r3,r2
 1709 00c0 1C4A     	 ldr r2,.L97+28
 1710 00c2 82FB0312 	 smull r1,r2,r2,r3
 1711 00c6 1211     	 asrs r2,r2,#4
 1712 00c8 DB17     	 asrs r3,r3,#31
 1713 00ca D31A     	 subs r3,r2,r3
 1714 00cc BB72     	 strb r3,[r7,#10]
 1715              	.LBB6:
 383:../cleanflight/src/main/io/dashboard.c ****         bargraphOffset = MIN(bargraphOffset, VERTICAL_BARGRAPH_CHARACTER_COUNT - 1);
 1716              	 .loc 5 383 0 discriminator 4
 1717 00ce BB7A     	 ldrb r3,[r7,#10]
 1718 00d0 7B72     	 strb r3,[r7,#9]
 1719 00d2 0623     	 movs r3,#6
 1720 00d4 7B60     	 str r3,[r7,#4]
 1721 00d6 7A7A     	 ldrb r2,[r7,#9]
 1722 00d8 7B68     	 ldr r3,[r7,#4]
 1723 00da 9342     	 cmp r3,r2
 1724 00dc A8BF     	 it ge
 1725 00de 1346     	 movge r3,r2
 1726              	.LBE6:
 1727 00e0 BB72     	 strb r3,[r7,#10]
 384:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_send_char(bus, VERTICAL_BARGRAPH_ZERO_CHARACTER + bargraphOffset);
 1728              	 .loc 5 384 0 discriminator 4
 1729 00e2 114B     	 ldr r3,.L97+16
 1730 00e4 1A68     	 ldr r2,[r3]
 1731 00e6 BB7A     	 ldrb r3,[r7,#10]
 1732 00e8 603B     	 subs r3,r3,#96
 1733 00ea DBB2     	 uxtb r3,r3
 1734 00ec 1046     	 mov r0,r2
 1735 00ee 1946     	 mov r1,r3
 1736 00f0 FFF7FEFF 	 bl i2c_OLED_send_char
 1737              	.LBE5:
 381:../cleanflight/src/main/io/dashboard.c ****         uint8_t bargraphOffset = ((uint16_t) GPS_svinfo_cno[index] * VERTICAL_BARGRAPH_CHARACTER_CO
 1738              	 .loc 5 381 0 discriminator 4
 1739 00f4 7B69     	 ldr r3,[r7,#20]
 1740 00f6 0133     	 adds r3,r3,#1
 1741 00f8 7B61     	 str r3,[r7,#20]
 1742              	.L92:
 381:../cleanflight/src/main/io/dashboard.c ****         uint8_t bargraphOffset = ((uint16_t) GPS_svinfo_cno[index] * VERTICAL_BARGRAPH_CHARACTER_CO
 1743              	 .loc 5 381 0 is_stmt 0 discriminator 1
 1744 00fa 7B69     	 ldr r3,[r7,#20]
 1745 00fc 0F2B     	 cmp r3,#15
 1746 00fe 02D8     	 bhi .L93
 381:../cleanflight/src/main/io/dashboard.c ****         uint8_t bargraphOffset = ((uint16_t) GPS_svinfo_cno[index] * VERTICAL_BARGRAPH_CHARACTER_CO
 1747              	 .loc 5 381 0 discriminator 3
 1748 0100 7B69     	 ldr r3,[r7,#20]
 1749 0102 142B     	 cmp r3,#20
 1750 0104 D4D9     	 bls .L94
 1751              	.L93:
 385:../cleanflight/src/main/io/dashboard.c ****     }
 386:../cleanflight/src/main/io/dashboard.c **** 
 387:../cleanflight/src/main/io/dashboard.c **** 
 388:../cleanflight/src/main/io/dashboard.c ****     char fixChar = STATE(GPS_FIX) ? 'Y' : 'N';
 1752              	 .loc 5 388 0 is_stmt 1
 1753 0106 0C4B     	 ldr r3,.L97+32
 1754 0108 1B78     	 ldrb r3,[r3]
 1755 010a 03F00203 	 and r3,r3,#2
 1756 010e 002B     	 cmp r3,#0
 1757 0110 14D0     	 beq .L95
 1758              	 .loc 5 388 0 is_stmt 0 discriminator 1
 1759 0112 5923     	 movs r3,#89
 1760 0114 13E0     	 b .L96
 1761              	.L98:
 1762 0116 00BF     	 .align 2
 1763              	.L97:
 1764 0118 00000000 	 .word pageState
 1765 011c 00000000 	 .word GPS_svInfoReceivedCount
 1766 0120 00000000 	 .word lastGPSSvInfoReceivedCount.14585
 1767 0124 00000000 	 .word gpsTicker.14584
 1768 0128 00000000 	 .word bus
 1769 012c 00000000 	 .word tickerCharacters
 1770 0130 00000000 	 .word GPS_svinfo_cno
 1771 0134 F712DA4B 	 .word 1272582903
 1772 0138 00000000 	 .word stateFlags
 1773              	.L95:
 1774              	 .loc 5 388 0 discriminator 2
 1775 013c 4E23     	 movs r3,#78
 1776              	.L96:
 1777              	 .loc 5 388 0 discriminator 4
 1778 013e FB70     	 strb r3,[r7,#3]
 389:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "Sats: %d Fix: %c", gpsSol.numSat, fixChar);
 1779              	 .loc 5 389 0 is_stmt 1 discriminator 4
 1780 0140 754B     	 ldr r3,.L99
 1781 0142 9B7C     	 ldrb r3,[r3,#18]
 1782 0144 1A46     	 mov r2,r3
 1783 0146 FB78     	 ldrb r3,[r7,#3]
 1784 0148 7448     	 ldr r0,.L99+4
 1785 014a 7549     	 ldr r1,.L99+8
 1786 014c FFF7FEFF 	 bl tfp_sprintf
 390:../cleanflight/src/main/io/dashboard.c ****     padLineBuffer();
 1787              	 .loc 5 390 0 discriminator 4
 1788 0150 FFF7FEFF 	 bl padLineBuffer
 391:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1789              	 .loc 5 391 0 discriminator 4
 1790 0154 734B     	 ldr r3,.L99+12
 1791 0156 1A68     	 ldr r2,[r3]
 1792 0158 FB7C     	 ldrb r3,[r7,#19]
 1793 015a 591C     	 adds r1,r3,#1
 1794 015c F974     	 strb r1,[r7,#19]
 1795 015e 1046     	 mov r0,r2
 1796 0160 1946     	 mov r1,r3
 1797 0162 FFF7FEFF 	 bl i2c_OLED_set_line
 392:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1798              	 .loc 5 392 0 discriminator 4
 1799 0166 6F4B     	 ldr r3,.L99+12
 1800 0168 1B68     	 ldr r3,[r3]
 1801 016a 1846     	 mov r0,r3
 1802 016c 6B49     	 ldr r1,.L99+4
 1803 016e FFF7FEFF 	 bl i2c_OLED_send_string
 393:../cleanflight/src/main/io/dashboard.c **** 
 394:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "La/Lo: %d/%d", gpsSol.llh.lat / GPS_DEGREES_DIVIDER, gpsSol.llh.lon / 
 1804              	 .loc 5 394 0 discriminator 4
 1805 0172 694B     	 ldr r3,.L99
 1806 0174 1B68     	 ldr r3,[r3]
 1807 0176 6C4A     	 ldr r2,.L99+16
 1808 0178 82FB0312 	 smull r1,r2,r2,r3
 1809 017c 9215     	 asrs r2,r2,#22
 1810 017e DB17     	 asrs r3,r3,#31
 1811 0180 D41A     	 subs r4,r2,r3
 1812 0182 654B     	 ldr r3,.L99
 1813 0184 5B68     	 ldr r3,[r3,#4]
 1814 0186 684A     	 ldr r2,.L99+16
 1815 0188 82FB0312 	 smull r1,r2,r2,r3
 1816 018c 9215     	 asrs r2,r2,#22
 1817 018e DB17     	 asrs r3,r3,#31
 1818 0190 D31A     	 subs r3,r2,r3
 1819 0192 6248     	 ldr r0,.L99+4
 1820 0194 6549     	 ldr r1,.L99+20
 1821 0196 2246     	 mov r2,r4
 1822 0198 FFF7FEFF 	 bl tfp_sprintf
 395:../cleanflight/src/main/io/dashboard.c ****     padLineBuffer();
 1823              	 .loc 5 395 0 discriminator 4
 1824 019c FFF7FEFF 	 bl padLineBuffer
 396:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1825              	 .loc 5 396 0 discriminator 4
 1826 01a0 604B     	 ldr r3,.L99+12
 1827 01a2 1A68     	 ldr r2,[r3]
 1828 01a4 FB7C     	 ldrb r3,[r7,#19]
 1829 01a6 591C     	 adds r1,r3,#1
 1830 01a8 F974     	 strb r1,[r7,#19]
 1831 01aa 1046     	 mov r0,r2
 1832 01ac 1946     	 mov r1,r3
 1833 01ae FFF7FEFF 	 bl i2c_OLED_set_line
 397:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1834              	 .loc 5 397 0 discriminator 4
 1835 01b2 5C4B     	 ldr r3,.L99+12
 1836 01b4 1B68     	 ldr r3,[r3]
 1837 01b6 1846     	 mov r0,r3
 1838 01b8 5849     	 ldr r1,.L99+4
 1839 01ba FFF7FEFF 	 bl i2c_OLED_send_string
 398:../cleanflight/src/main/io/dashboard.c **** 
 399:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "Spd: %d", gpsSol.groundSpeed);
 1840              	 .loc 5 399 0 discriminator 4
 1841 01be 564B     	 ldr r3,.L99
 1842 01c0 9B89     	 ldrh r3,[r3,#12]
 1843 01c2 9BB2     	 uxth r3,r3
 1844 01c4 5548     	 ldr r0,.L99+4
 1845 01c6 5A49     	 ldr r1,.L99+24
 1846 01c8 1A46     	 mov r2,r3
 1847 01ca FFF7FEFF 	 bl tfp_sprintf
 400:../cleanflight/src/main/io/dashboard.c ****     padHalfLineBuffer();
 1848              	 .loc 5 400 0 discriminator 4
 1849 01ce FFF7FEFF 	 bl padHalfLineBuffer
 401:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex);
 1850              	 .loc 5 401 0 discriminator 4
 1851 01d2 544B     	 ldr r3,.L99+12
 1852 01d4 1A68     	 ldr r2,[r3]
 1853 01d6 FB7C     	 ldrb r3,[r7,#19]
 1854 01d8 1046     	 mov r0,r2
 1855 01da 1946     	 mov r1,r3
 1856 01dc FFF7FEFF 	 bl i2c_OLED_set_line
 402:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1857              	 .loc 5 402 0 discriminator 4
 1858 01e0 504B     	 ldr r3,.L99+12
 1859 01e2 1B68     	 ldr r3,[r3]
 1860 01e4 1846     	 mov r0,r3
 1861 01e6 4D49     	 ldr r1,.L99+4
 1862 01e8 FFF7FEFF 	 bl i2c_OLED_send_string
 403:../cleanflight/src/main/io/dashboard.c **** 
 404:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "GC: %d", gpsSol.groundCourse);
 1863              	 .loc 5 404 0 discriminator 4
 1864 01ec 4A4B     	 ldr r3,.L99
 1865 01ee DB89     	 ldrh r3,[r3,#14]
 1866 01f0 9BB2     	 uxth r3,r3
 1867 01f2 4A48     	 ldr r0,.L99+4
 1868 01f4 4F49     	 ldr r1,.L99+28
 1869 01f6 1A46     	 mov r2,r3
 1870 01f8 FFF7FEFF 	 bl tfp_sprintf
 405:../cleanflight/src/main/io/dashboard.c ****     padHalfLineBuffer();
 1871              	 .loc 5 405 0 discriminator 4
 1872 01fc FFF7FEFF 	 bl padHalfLineBuffer
 406:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_xy(bus, HALF_SCREEN_CHARACTER_COLUMN_COUNT, rowIndex++);
 1873              	 .loc 5 406 0 discriminator 4
 1874 0200 484B     	 ldr r3,.L99+12
 1875 0202 1A68     	 ldr r2,[r3]
 1876 0204 FB7C     	 ldrb r3,[r7,#19]
 1877 0206 591C     	 adds r1,r3,#1
 1878 0208 F974     	 strb r1,[r7,#19]
 1879 020a 1046     	 mov r0,r2
 1880 020c 0A21     	 movs r1,#10
 1881 020e 1A46     	 mov r2,r3
 1882 0210 FFF7FEFF 	 bl i2c_OLED_set_xy
 407:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1883              	 .loc 5 407 0 discriminator 4
 1884 0214 434B     	 ldr r3,.L99+12
 1885 0216 1B68     	 ldr r3,[r3]
 1886 0218 1846     	 mov r0,r3
 1887 021a 4049     	 ldr r1,.L99+4
 1888 021c FFF7FEFF 	 bl i2c_OLED_send_string
 408:../cleanflight/src/main/io/dashboard.c **** 
 409:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "RX: %d", GPS_packetCount);
 1889              	 .loc 5 409 0 discriminator 4
 1890 0220 454B     	 ldr r3,.L99+32
 1891 0222 1B68     	 ldr r3,[r3]
 1892 0224 3D48     	 ldr r0,.L99+4
 1893 0226 4549     	 ldr r1,.L99+36
 1894 0228 1A46     	 mov r2,r3
 1895 022a FFF7FEFF 	 bl tfp_sprintf
 410:../cleanflight/src/main/io/dashboard.c ****     padHalfLineBuffer();
 1896              	 .loc 5 410 0 discriminator 4
 1897 022e FFF7FEFF 	 bl padHalfLineBuffer
 411:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex);
 1898              	 .loc 5 411 0 discriminator 4
 1899 0232 3C4B     	 ldr r3,.L99+12
 1900 0234 1A68     	 ldr r2,[r3]
 1901 0236 FB7C     	 ldrb r3,[r7,#19]
 1902 0238 1046     	 mov r0,r2
 1903 023a 1946     	 mov r1,r3
 1904 023c FFF7FEFF 	 bl i2c_OLED_set_line
 412:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1905              	 .loc 5 412 0 discriminator 4
 1906 0240 384B     	 ldr r3,.L99+12
 1907 0242 1B68     	 ldr r3,[r3]
 1908 0244 1846     	 mov r0,r3
 1909 0246 3549     	 ldr r1,.L99+4
 1910 0248 FFF7FEFF 	 bl i2c_OLED_send_string
 413:../cleanflight/src/main/io/dashboard.c **** 
 414:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "ERRs: %d", gpsData.errors, gpsData.timeouts);
 1911              	 .loc 5 414 0 discriminator 4
 1912 024c 3C4B     	 ldr r3,.L99+40
 1913 024e 1A68     	 ldr r2,[r3]
 1914 0250 3B4B     	 ldr r3,.L99+40
 1915 0252 5B68     	 ldr r3,[r3,#4]
 1916 0254 3148     	 ldr r0,.L99+4
 1917 0256 3B49     	 ldr r1,.L99+44
 1918 0258 FFF7FEFF 	 bl tfp_sprintf
 415:../cleanflight/src/main/io/dashboard.c ****     padHalfLineBuffer();
 1919              	 .loc 5 415 0 discriminator 4
 1920 025c FFF7FEFF 	 bl padHalfLineBuffer
 416:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_xy(bus, HALF_SCREEN_CHARACTER_COLUMN_COUNT, rowIndex++);
 1921              	 .loc 5 416 0 discriminator 4
 1922 0260 304B     	 ldr r3,.L99+12
 1923 0262 1A68     	 ldr r2,[r3]
 1924 0264 FB7C     	 ldrb r3,[r7,#19]
 1925 0266 591C     	 adds r1,r3,#1
 1926 0268 F974     	 strb r1,[r7,#19]
 1927 026a 1046     	 mov r0,r2
 1928 026c 0A21     	 movs r1,#10
 1929 026e 1A46     	 mov r2,r3
 1930 0270 FFF7FEFF 	 bl i2c_OLED_set_xy
 417:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1931              	 .loc 5 417 0 discriminator 4
 1932 0274 2B4B     	 ldr r3,.L99+12
 1933 0276 1B68     	 ldr r3,[r3]
 1934 0278 1846     	 mov r0,r3
 1935 027a 2849     	 ldr r1,.L99+4
 1936 027c FFF7FEFF 	 bl i2c_OLED_send_string
 418:../cleanflight/src/main/io/dashboard.c **** 
 419:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "Dt: %d", gpsData.lastMessage - gpsData.lastLastMessage);
 1937              	 .loc 5 419 0 discriminator 4
 1938 0280 2F4B     	 ldr r3,.L99+40
 1939 0282 9A68     	 ldr r2,[r3,#8]
 1940 0284 2E4B     	 ldr r3,.L99+40
 1941 0286 DB68     	 ldr r3,[r3,#12]
 1942 0288 D31A     	 subs r3,r2,r3
 1943 028a 2448     	 ldr r0,.L99+4
 1944 028c 2E49     	 ldr r1,.L99+48
 1945 028e 1A46     	 mov r2,r3
 1946 0290 FFF7FEFF 	 bl tfp_sprintf
 420:../cleanflight/src/main/io/dashboard.c ****     padHalfLineBuffer();
 1947              	 .loc 5 420 0 discriminator 4
 1948 0294 FFF7FEFF 	 bl padHalfLineBuffer
 421:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex);
 1949              	 .loc 5 421 0 discriminator 4
 1950 0298 224B     	 ldr r3,.L99+12
 1951 029a 1A68     	 ldr r2,[r3]
 1952 029c FB7C     	 ldrb r3,[r7,#19]
 1953 029e 1046     	 mov r0,r2
 1954 02a0 1946     	 mov r1,r3
 1955 02a2 FFF7FEFF 	 bl i2c_OLED_set_line
 422:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1956              	 .loc 5 422 0 discriminator 4
 1957 02a6 1F4B     	 ldr r3,.L99+12
 1958 02a8 1B68     	 ldr r3,[r3]
 1959 02aa 1846     	 mov r0,r3
 1960 02ac 1B49     	 ldr r1,.L99+4
 1961 02ae FFF7FEFF 	 bl i2c_OLED_send_string
 423:../cleanflight/src/main/io/dashboard.c **** 
 424:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, "TOs: %d", gpsData.timeouts);
 1962              	 .loc 5 424 0 discriminator 4
 1963 02b2 234B     	 ldr r3,.L99+40
 1964 02b4 5B68     	 ldr r3,[r3,#4]
 1965 02b6 1948     	 ldr r0,.L99+4
 1966 02b8 2449     	 ldr r1,.L99+52
 1967 02ba 1A46     	 mov r2,r3
 1968 02bc FFF7FEFF 	 bl tfp_sprintf
 425:../cleanflight/src/main/io/dashboard.c ****     padHalfLineBuffer();
 1969              	 .loc 5 425 0 discriminator 4
 1970 02c0 FFF7FEFF 	 bl padHalfLineBuffer
 426:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_xy(bus, HALF_SCREEN_CHARACTER_COLUMN_COUNT, rowIndex++);
 1971              	 .loc 5 426 0 discriminator 4
 1972 02c4 174B     	 ldr r3,.L99+12
 1973 02c6 1A68     	 ldr r2,[r3]
 1974 02c8 FB7C     	 ldrb r3,[r7,#19]
 1975 02ca 591C     	 adds r1,r3,#1
 1976 02cc F974     	 strb r1,[r7,#19]
 1977 02ce 1046     	 mov r0,r2
 1978 02d0 0A21     	 movs r1,#10
 1979 02d2 1A46     	 mov r2,r3
 1980 02d4 FFF7FEFF 	 bl i2c_OLED_set_xy
 427:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 1981              	 .loc 5 427 0 discriminator 4
 1982 02d8 124B     	 ldr r3,.L99+12
 1983 02da 1B68     	 ldr r3,[r3]
 1984 02dc 1846     	 mov r0,r3
 1985 02de 0F49     	 ldr r1,.L99+4
 1986 02e0 FFF7FEFF 	 bl i2c_OLED_send_string
 428:../cleanflight/src/main/io/dashboard.c **** 
 429:../cleanflight/src/main/io/dashboard.c ****     strncpy(lineBuffer, gpsPacketLog, GPS_PACKET_LOG_ENTRY_COUNT);
 1987              	 .loc 5 429 0 discriminator 4
 1988 02e4 0D48     	 ldr r0,.L99+4
 1989 02e6 1A49     	 ldr r1,.L99+56
 1990 02e8 1522     	 movs r2,#21
 1991 02ea FFF7FEFF 	 bl strncpy
 430:../cleanflight/src/main/io/dashboard.c ****     padHalfLineBuffer();
 1992              	 .loc 5 430 0 discriminator 4
 1993 02ee FFF7FEFF 	 bl padHalfLineBuffer
 431:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 1994              	 .loc 5 431 0 discriminator 4
 1995 02f2 0C4B     	 ldr r3,.L99+12
 1996 02f4 1A68     	 ldr r2,[r3]
 1997 02f6 FB7C     	 ldrb r3,[r7,#19]
 1998 02f8 591C     	 adds r1,r3,#1
 1999 02fa F974     	 strb r1,[r7,#19]
 2000 02fc 1046     	 mov r0,r2
 2001 02fe 1946     	 mov r1,r3
 2002 0300 FFF7FEFF 	 bl i2c_OLED_set_line
 432:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 2003              	 .loc 5 432 0 discriminator 4
 2004 0304 074B     	 ldr r3,.L99+12
 2005 0306 1B68     	 ldr r3,[r3]
 2006 0308 1846     	 mov r0,r3
 2007 030a 0449     	 ldr r1,.L99+4
 2008 030c FFF7FEFF 	 bl i2c_OLED_send_string
 2009              	.L88:
 433:../cleanflight/src/main/io/dashboard.c **** }
 2010              	 .loc 5 433 0
 2011 0310 1C37     	 adds r7,r7,#28
 2012              	.LCFI85:
 2013              	 .cfi_def_cfa_offset 12
 2014 0312 BD46     	 mov sp,r7
 2015              	.LCFI86:
 2016              	 .cfi_def_cfa_register 13
 2017              	 
 2018 0314 90BD     	 pop {r4,r7,pc}
 2019              	.L100:
 2020 0316 00BF     	 .align 2
 2021              	.L99:
 2022 0318 00000000 	 .word gpsSol
 2023 031c 00000000 	 .word lineBuffer
 2024 0320 94000000 	 .word .LC9
 2025 0324 00000000 	 .word bus
 2026 0328 6BCA5F6B 	 .word 1801439851
 2027 032c A8000000 	 .word .LC10
 2028 0330 B8000000 	 .word .LC11
 2029 0334 C0000000 	 .word .LC12
 2030 0338 00000000 	 .word GPS_packetCount
 2031 033c C8000000 	 .word .LC13
 2032 0340 00000000 	 .word gpsData
 2033 0344 D0000000 	 .word .LC14
 2034 0348 DC000000 	 .word .LC15
 2035 034c E4000000 	 .word .LC16
 2036 0350 00000000 	 .word gpsPacketLog
 2037              	 .cfi_endproc
 2038              	.LFE599:
 2040              	 .section .rodata
 2041              	 .align 2
 2042              	.LC17:
 2043 00ec 566F6C74 	 .ascii "Volts: %d.%1d Cells: %d\000"
 2043      733A2025 
 2043      642E2531 
 2043      64204365 
 2043      6C6C733A 
 2044              	 .align 2
 2045              	.LC18:
 2046 0104 416D7073 	 .ascii "Amps: %d.%2d mAh: %d\000"
 2046      3A202564 
 2046      2E253264 
 2046      206D4168 
 2046      3A202564 
 2047              	 .section .text.showBatteryPage,"ax",%progbits
 2048              	 .align 2
 2049              	 .thumb
 2050              	 .thumb_func
 2052              	showBatteryPage:
 2053              	.LFB600:
 434:../cleanflight/src/main/io/dashboard.c **** #endif
 435:../cleanflight/src/main/io/dashboard.c **** 
 436:../cleanflight/src/main/io/dashboard.c **** static void showBatteryPage(void)
 437:../cleanflight/src/main/io/dashboard.c **** {
 2054              	 .loc 5 437 0
 2055              	 .cfi_startproc
 2056              	 
 2057              	 
 2058 0000 B0B5     	 push {r4,r5,r7,lr}
 2059              	.LCFI87:
 2060              	 .cfi_def_cfa_offset 16
 2061              	 .cfi_offset 4,-16
 2062              	 .cfi_offset 5,-12
 2063              	 .cfi_offset 7,-8
 2064              	 .cfi_offset 14,-4
 2065 0002 86B0     	 sub sp,sp,#24
 2066              	.LCFI88:
 2067              	 .cfi_def_cfa_offset 40
 2068 0004 02AF     	 add r7,sp,#8
 2069              	.LCFI89:
 2070              	 .cfi_def_cfa 7,32
 438:../cleanflight/src/main/io/dashboard.c ****     uint8_t rowIndex = PAGE_TITLE_LINE_COUNT;
 2071              	 .loc 5 438 0
 2072 0006 0123     	 movs r3,#1
 2073 0008 FB73     	 strb r3,[r7,#15]
 439:../cleanflight/src/main/io/dashboard.c **** 
 440:../cleanflight/src/main/io/dashboard.c ****     if (batteryConfig()->voltageMeterSource != VOLTAGE_METER_NONE) {
 2074              	 .loc 5 440 0
 2075 000a FFF7FEFF 	 bl batteryConfig
 2076 000e 0346     	 mov r3,r0
 2077 0010 5B79     	 ldrb r3,[r3,#5]
 2078 0012 002B     	 cmp r3,#0
 2079 0014 45D0     	 beq .L102
 2080              	.LBB7:
 441:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "Volts: %d.%1d Cells: %d", getBatteryVoltage() / 10, getBatteryVolt
 2081              	 .loc 5 441 0
 2082 0016 FFF7FEFF 	 bl getBatteryVoltage
 2083 001a 0346     	 mov r3,r0
 2084 001c 1A46     	 mov r2,r3
 2085 001e 464B     	 ldr r3,.L104
 2086 0020 A3FB0223 	 umull r2,r3,r3,r2
 2087 0024 DB08     	 lsrs r3,r3,#3
 2088 0026 9BB2     	 uxth r3,r3
 2089 0028 1D46     	 mov r5,r3
 2090 002a FFF7FEFF 	 bl getBatteryVoltage
 2091 002e 0346     	 mov r3,r0
 2092 0030 1A46     	 mov r2,r3
 2093 0032 414B     	 ldr r3,.L104
 2094 0034 A3FB0213 	 umull r1,r3,r3,r2
 2095 0038 D908     	 lsrs r1,r3,#3
 2096 003a 0B46     	 mov r3,r1
 2097 003c 9B00     	 lsls r3,r3,#2
 2098 003e 0B44     	 add r3,r3,r1
 2099 0040 5B00     	 lsls r3,r3,#1
 2100 0042 D31A     	 subs r3,r2,r3
 2101 0044 9BB2     	 uxth r3,r3
 2102 0046 1C46     	 mov r4,r3
 2103 0048 FFF7FEFF 	 bl getBatteryCellCount
 2104 004c 0346     	 mov r3,r0
 2105 004e 0093     	 str r3,[sp]
 2106 0050 3A48     	 ldr r0,.L104+4
 2107 0052 3B49     	 ldr r1,.L104+8
 2108 0054 2A46     	 mov r2,r5
 2109 0056 2346     	 mov r3,r4
 2110 0058 FFF7FEFF 	 bl tfp_sprintf
 442:../cleanflight/src/main/io/dashboard.c ****         padLineBuffer();
 2111              	 .loc 5 442 0
 2112 005c FFF7FEFF 	 bl padLineBuffer
 443:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, rowIndex++);
 2113              	 .loc 5 443 0
 2114 0060 384B     	 ldr r3,.L104+12
 2115 0062 1A68     	 ldr r2,[r3]
 2116 0064 FB7B     	 ldrb r3,[r7,#15]
 2117 0066 591C     	 adds r1,r3,#1
 2118 0068 F973     	 strb r1,[r7,#15]
 2119 006a 1046     	 mov r0,r2
 2120 006c 1946     	 mov r1,r3
 2121 006e FFF7FEFF 	 bl i2c_OLED_set_line
 444:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_send_string(bus, lineBuffer);
 2122              	 .loc 5 444 0
 2123 0072 344B     	 ldr r3,.L104+12
 2124 0074 1B68     	 ldr r3,[r3]
 2125 0076 1846     	 mov r0,r3
 2126 0078 3049     	 ldr r1,.L104+4
 2127 007a FFF7FEFF 	 bl i2c_OLED_send_string
 445:../cleanflight/src/main/io/dashboard.c **** 
 446:../cleanflight/src/main/io/dashboard.c ****         uint8_t batteryPercentage = calculateBatteryPercentageRemaining();
 2128              	 .loc 5 446 0
 2129 007e FFF7FEFF 	 bl calculateBatteryPercentageRemaining
 2130 0082 0346     	 mov r3,r0
 2131 0084 BB73     	 strb r3,[r7,#14]
 447:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, rowIndex++);
 2132              	 .loc 5 447 0
 2133 0086 2F4B     	 ldr r3,.L104+12
 2134 0088 1A68     	 ldr r2,[r3]
 2135 008a FB7B     	 ldrb r3,[r7,#15]
 2136 008c 591C     	 adds r1,r3,#1
 2137 008e F973     	 strb r1,[r7,#15]
 2138 0090 1046     	 mov r0,r2
 2139 0092 1946     	 mov r1,r3
 2140 0094 FFF7FEFF 	 bl i2c_OLED_set_line
 448:../cleanflight/src/main/io/dashboard.c ****         drawHorizonalPercentageBar(SCREEN_CHARACTER_COLUMN_COUNT, batteryPercentage);
 2141              	 .loc 5 448 0
 2142 0098 BB7B     	 ldrb r3,[r7,#14]
 2143 009a 1520     	 movs r0,#21
 2144 009c 1946     	 mov r1,r3
 2145 009e FFF7FEFF 	 bl drawHorizonalPercentageBar
 2146              	.L102:
 2147              	.LBE7:
 449:../cleanflight/src/main/io/dashboard.c ****     }
 450:../cleanflight/src/main/io/dashboard.c **** 
 451:../cleanflight/src/main/io/dashboard.c ****     if (batteryConfig()->currentMeterSource != CURRENT_METER_NONE) {
 2148              	 .loc 5 451 0
 2149 00a2 FFF7FEFF 	 bl batteryConfig
 2150 00a6 0346     	 mov r3,r0
 2151 00a8 9B79     	 ldrb r3,[r3,#6]
 2152 00aa 002B     	 cmp r3,#0
 2153 00ac 41D0     	 beq .L101
 2154              	.LBB8:
 452:../cleanflight/src/main/io/dashboard.c **** 
 453:../cleanflight/src/main/io/dashboard.c ****         int32_t amperage = getAmperage();
 2155              	 .loc 5 453 0
 2156 00ae FFF7FEFF 	 bl getAmperage
 2157 00b2 B860     	 str r0,[r7,#8]
 454:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "Amps: %d.%2d mAh: %d", amperage / 100, amperage % 100, getMAhDrawn
 2158              	 .loc 5 454 0
 2159 00b4 BB68     	 ldr r3,[r7,#8]
 2160 00b6 244A     	 ldr r2,.L104+16
 2161 00b8 82FB0312 	 smull r1,r2,r2,r3
 2162 00bc 5211     	 asrs r2,r2,#5
 2163 00be DB17     	 asrs r3,r3,#31
 2164 00c0 D51A     	 subs r5,r2,r3
 2165 00c2 BB68     	 ldr r3,[r7,#8]
 2166 00c4 204A     	 ldr r2,.L104+16
 2167 00c6 82FB0312 	 smull r1,r2,r2,r3
 2168 00ca 5111     	 asrs r1,r2,#5
 2169 00cc DA17     	 asrs r2,r3,#31
 2170 00ce 8C1A     	 subs r4,r1,r2
 2171 00d0 6422     	 movs r2,#100
 2172 00d2 02FB04F2 	 mul r2,r2,r4
 2173 00d6 9C1A     	 subs r4,r3,r2
 2174 00d8 FFF7FEFF 	 bl getMAhDrawn
 2175 00dc 0346     	 mov r3,r0
 2176 00de 0093     	 str r3,[sp]
 2177 00e0 1648     	 ldr r0,.L104+4
 2178 00e2 1A49     	 ldr r1,.L104+20
 2179 00e4 2A46     	 mov r2,r5
 2180 00e6 2346     	 mov r3,r4
 2181 00e8 FFF7FEFF 	 bl tfp_sprintf
 455:../cleanflight/src/main/io/dashboard.c ****         padLineBuffer();
 2182              	 .loc 5 455 0
 2183 00ec FFF7FEFF 	 bl padLineBuffer
 456:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, rowIndex++);
 2184              	 .loc 5 456 0
 2185 00f0 144B     	 ldr r3,.L104+12
 2186 00f2 1A68     	 ldr r2,[r3]
 2187 00f4 FB7B     	 ldrb r3,[r7,#15]
 2188 00f6 591C     	 adds r1,r3,#1
 2189 00f8 F973     	 strb r1,[r7,#15]
 2190 00fa 1046     	 mov r0,r2
 2191 00fc 1946     	 mov r1,r3
 2192 00fe FFF7FEFF 	 bl i2c_OLED_set_line
 457:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_send_string(bus, lineBuffer);
 2193              	 .loc 5 457 0
 2194 0102 104B     	 ldr r3,.L104+12
 2195 0104 1B68     	 ldr r3,[r3]
 2196 0106 1846     	 mov r0,r3
 2197 0108 0C49     	 ldr r1,.L104+4
 2198 010a FFF7FEFF 	 bl i2c_OLED_send_string
 458:../cleanflight/src/main/io/dashboard.c **** 
 459:../cleanflight/src/main/io/dashboard.c ****         uint8_t capacityPercentage = calculateBatteryPercentageRemaining();
 2199              	 .loc 5 459 0
 2200 010e FFF7FEFF 	 bl calculateBatteryPercentageRemaining
 2201 0112 0346     	 mov r3,r0
 2202 0114 FB71     	 strb r3,[r7,#7]
 460:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, rowIndex++);
 2203              	 .loc 5 460 0
 2204 0116 0B4B     	 ldr r3,.L104+12
 2205 0118 1A68     	 ldr r2,[r3]
 2206 011a FB7B     	 ldrb r3,[r7,#15]
 2207 011c 591C     	 adds r1,r3,#1
 2208 011e F973     	 strb r1,[r7,#15]
 2209 0120 1046     	 mov r0,r2
 2210 0122 1946     	 mov r1,r3
 2211 0124 FFF7FEFF 	 bl i2c_OLED_set_line
 461:../cleanflight/src/main/io/dashboard.c ****         drawHorizonalPercentageBar(SCREEN_CHARACTER_COLUMN_COUNT, capacityPercentage);
 2212              	 .loc 5 461 0
 2213 0128 FB79     	 ldrb r3,[r7,#7]
 2214 012a 1520     	 movs r0,#21
 2215 012c 1946     	 mov r1,r3
 2216 012e FFF7FEFF 	 bl drawHorizonalPercentageBar
 2217              	.L101:
 2218              	.LBE8:
 462:../cleanflight/src/main/io/dashboard.c ****     }
 463:../cleanflight/src/main/io/dashboard.c **** }
 2219              	 .loc 5 463 0
 2220 0132 1037     	 adds r7,r7,#16
 2221              	.LCFI90:
 2222              	 .cfi_def_cfa_offset 16
 2223 0134 BD46     	 mov sp,r7
 2224              	.LCFI91:
 2225              	 .cfi_def_cfa_register 13
 2226              	 
 2227 0136 B0BD     	 pop {r4,r5,r7,pc}
 2228              	.L105:
 2229              	 .align 2
 2230              	.L104:
 2231 0138 CDCCCCCC 	 .word -858993459
 2232 013c 00000000 	 .word lineBuffer
 2233 0140 EC000000 	 .word .LC17
 2234 0144 00000000 	 .word bus
 2235 0148 1F85EB51 	 .word 1374389535
 2236 014c 04010000 	 .word .LC18
 2237              	 .cfi_endproc
 2238              	.LFE600:
 2240              	 .section .rodata
 2241 0119 000000   	 .align 2
 2242              	.LC19:
 2243 011c 20202020 	 .ascii "        X     Y     Z\000"
 2243      20202020 
 2243      58202020 
 2243      20205920 
 2243      20202020 
 2244 0132 0000     	 .align 2
 2245              	.LC20:
 2246 0134 41434300 	 .ascii "ACC\000"
 2247              	 .align 2
 2248              	.LC21:
 2249 0138 47595200 	 .ascii "GYR\000"
 2250              	 .align 2
 2251              	.LC22:
 2252 013c 4D414700 	 .ascii "MAG\000"
 2253              	 .align 2
 2254              	.LC23:
 2255 0140 49264800 	 .ascii "I&H\000"
 2256              	 .section .text.showSensorsPage,"ax",%progbits
 2257              	 .align 2
 2258              	 .thumb
 2259              	 .thumb_func
 2261              	showSensorsPage:
 2262              	.LFB601:
 464:../cleanflight/src/main/io/dashboard.c **** 
 465:../cleanflight/src/main/io/dashboard.c **** static void showSensorsPage(void)
 466:../cleanflight/src/main/io/dashboard.c **** {
 2263              	 .loc 5 466 0
 2264              	 .cfi_startproc
 2265              	 
 2266              	 
 2267 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 2268              	.LCFI92:
 2269              	 .cfi_def_cfa_offset 20
 2270              	 .cfi_offset 4,-20
 2271              	 .cfi_offset 5,-16
 2272              	 .cfi_offset 6,-12
 2273              	 .cfi_offset 7,-8
 2274              	 .cfi_offset 14,-4
 2275 0002 85B0     	 sub sp,sp,#20
 2276              	.LCFI93:
 2277              	 .cfi_def_cfa_offset 40
 2278 0004 02AF     	 add r7,sp,#8
 2279              	.LCFI94:
 2280              	 .cfi_def_cfa 7,32
 467:../cleanflight/src/main/io/dashboard.c ****     uint8_t rowIndex = PAGE_TITLE_LINE_COUNT;
 2281              	 .loc 5 467 0
 2282 0006 0123     	 movs r3,#1
 2283 0008 FB71     	 strb r3,[r7,#7]
 468:../cleanflight/src/main/io/dashboard.c ****     static const char *format = "%s %5d %5d %5d";
 469:../cleanflight/src/main/io/dashboard.c **** 
 470:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 2284              	 .loc 5 470 0
 2285 000a 704B     	 ldr r3,.L110
 2286 000c 1A68     	 ldr r2,[r3]
 2287 000e FB79     	 ldrb r3,[r7,#7]
 2288 0010 591C     	 adds r1,r3,#1
 2289 0012 F971     	 strb r1,[r7,#7]
 2290 0014 1046     	 mov r0,r2
 2291 0016 1946     	 mov r1,r3
 2292 0018 FFF7FEFF 	 bl i2c_OLED_set_line
 471:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, "        X     Y     Z");
 2293              	 .loc 5 471 0
 2294 001c 6B4B     	 ldr r3,.L110
 2295 001e 1B68     	 ldr r3,[r3]
 2296 0020 1846     	 mov r0,r3
 2297 0022 6B49     	 ldr r1,.L110+4
 2298 0024 FFF7FEFF 	 bl i2c_OLED_send_string
 472:../cleanflight/src/main/io/dashboard.c **** 
 473:../cleanflight/src/main/io/dashboard.c ****     if (sensors(SENSOR_ACC)) {
 2299              	 .loc 5 473 0
 2300 0028 0220     	 movs r0,#2
 2301 002a FFF7FEFF 	 bl sensors
 2302 002e 0346     	 mov r3,r0
 2303 0030 002B     	 cmp r3,#0
 2304 0032 2FD0     	 beq .L107
 474:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, format, "ACC", lrintf(acc.accADC[X]), lrintf(acc.accADC[Y]), lrintf
 2305              	 .loc 5 474 0
 2306 0034 674B     	 ldr r3,.L110+8
 2307 0036 1C68     	 ldr r4,[r3]
 2308 0038 674B     	 ldr r3,.L110+12
 2309 003a D3F82530 	 ldr r3,[r3,#37]
 2310 003e 1846     	 mov r0,r3
 2311 0040 FFF7FEFF 	 bl lrintf
 2312 0044 0646     	 mov r6,r0
 2313 0046 644B     	 ldr r3,.L110+12
 2314 0048 D3F82930 	 ldr r3,[r3,#41]
 2315 004c 1846     	 mov r0,r3
 2316 004e FFF7FEFF 	 bl lrintf
 2317 0052 0546     	 mov r5,r0
 2318 0054 604B     	 ldr r3,.L110+12
 2319 0056 D3F82D30 	 ldr r3,[r3,#45]
 2320 005a 1846     	 mov r0,r3
 2321 005c FFF7FEFF 	 bl lrintf
 2322 0060 0346     	 mov r3,r0
 2323 0062 0095     	 str r5,[sp]
 2324 0064 0193     	 str r3,[sp,#4]
 2325 0066 5D48     	 ldr r0,.L110+16
 2326 0068 2146     	 mov r1,r4
 2327 006a 5D4A     	 ldr r2,.L110+20
 2328 006c 3346     	 mov r3,r6
 2329 006e FFF7FEFF 	 bl tfp_sprintf
 475:../cleanflight/src/main/io/dashboard.c ****         padLineBuffer();
 2330              	 .loc 5 475 0
 2331 0072 FFF7FEFF 	 bl padLineBuffer
 476:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, rowIndex++);
 2332              	 .loc 5 476 0
 2333 0076 554B     	 ldr r3,.L110
 2334 0078 1A68     	 ldr r2,[r3]
 2335 007a FB79     	 ldrb r3,[r7,#7]
 2336 007c 591C     	 adds r1,r3,#1
 2337 007e F971     	 strb r1,[r7,#7]
 2338 0080 1046     	 mov r0,r2
 2339 0082 1946     	 mov r1,r3
 2340 0084 FFF7FEFF 	 bl i2c_OLED_set_line
 477:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_send_string(bus, lineBuffer);
 2341              	 .loc 5 477 0
 2342 0088 504B     	 ldr r3,.L110
 2343 008a 1B68     	 ldr r3,[r3]
 2344 008c 1846     	 mov r0,r3
 2345 008e 5349     	 ldr r1,.L110+16
 2346 0090 FFF7FEFF 	 bl i2c_OLED_send_string
 2347              	.L107:
 478:../cleanflight/src/main/io/dashboard.c ****     }
 479:../cleanflight/src/main/io/dashboard.c **** 
 480:../cleanflight/src/main/io/dashboard.c ****     if (sensors(SENSOR_GYRO)) {
 2348              	 .loc 5 480 0
 2349 0094 0120     	 movs r0,#1
 2350 0096 FFF7FEFF 	 bl sensors
 2351 009a 0346     	 mov r3,r0
 2352 009c 002B     	 cmp r3,#0
 2353 009e 2CD0     	 beq .L108
 481:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, format, "GYR", lrintf(gyro.gyroADCf[X]), lrintf(gyro.gyroADCf[Y]), 
 2354              	 .loc 5 481 0
 2355 00a0 4C4B     	 ldr r3,.L110+8
 2356 00a2 1C68     	 ldr r4,[r3]
 2357 00a4 4F4B     	 ldr r3,.L110+24
 2358 00a6 5B68     	 ldr r3,[r3,#4]
 2359 00a8 1846     	 mov r0,r3
 2360 00aa FFF7FEFF 	 bl lrintf
 2361 00ae 0646     	 mov r6,r0
 2362 00b0 4C4B     	 ldr r3,.L110+24
 2363 00b2 9B68     	 ldr r3,[r3,#8]
 2364 00b4 1846     	 mov r0,r3
 2365 00b6 FFF7FEFF 	 bl lrintf
 2366 00ba 0546     	 mov r5,r0
 2367 00bc 494B     	 ldr r3,.L110+24
 2368 00be DB68     	 ldr r3,[r3,#12]
 2369 00c0 1846     	 mov r0,r3
 2370 00c2 FFF7FEFF 	 bl lrintf
 2371 00c6 0346     	 mov r3,r0
 2372 00c8 0095     	 str r5,[sp]
 2373 00ca 0193     	 str r3,[sp,#4]
 2374 00cc 4348     	 ldr r0,.L110+16
 2375 00ce 2146     	 mov r1,r4
 2376 00d0 454A     	 ldr r2,.L110+28
 2377 00d2 3346     	 mov r3,r6
 2378 00d4 FFF7FEFF 	 bl tfp_sprintf
 482:../cleanflight/src/main/io/dashboard.c ****         padLineBuffer();
 2379              	 .loc 5 482 0
 2380 00d8 FFF7FEFF 	 bl padLineBuffer
 483:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, rowIndex++);
 2381              	 .loc 5 483 0
 2382 00dc 3B4B     	 ldr r3,.L110
 2383 00de 1A68     	 ldr r2,[r3]
 2384 00e0 FB79     	 ldrb r3,[r7,#7]
 2385 00e2 591C     	 adds r1,r3,#1
 2386 00e4 F971     	 strb r1,[r7,#7]
 2387 00e6 1046     	 mov r0,r2
 2388 00e8 1946     	 mov r1,r3
 2389 00ea FFF7FEFF 	 bl i2c_OLED_set_line
 484:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_send_string(bus, lineBuffer);
 2390              	 .loc 5 484 0
 2391 00ee 374B     	 ldr r3,.L110
 2392 00f0 1B68     	 ldr r3,[r3]
 2393 00f2 1846     	 mov r0,r3
 2394 00f4 3949     	 ldr r1,.L110+16
 2395 00f6 FFF7FEFF 	 bl i2c_OLED_send_string
 2396              	.L108:
 485:../cleanflight/src/main/io/dashboard.c ****     }
 486:../cleanflight/src/main/io/dashboard.c **** 
 487:../cleanflight/src/main/io/dashboard.c **** #ifdef USE_MAG
 488:../cleanflight/src/main/io/dashboard.c ****     if (sensors(SENSOR_MAG)) {
 2397              	 .loc 5 488 0
 2398 00fa 0820     	 movs r0,#8
 2399 00fc FFF7FEFF 	 bl sensors
 2400 0100 0346     	 mov r3,r0
 2401 0102 002B     	 cmp r3,#0
 2402 0104 2CD0     	 beq .L109
 489:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, format, "MAG", lrintf(mag.magADC[X]), lrintf(mag.magADC[Y]), lrintf
 2403              	 .loc 5 489 0
 2404 0106 334B     	 ldr r3,.L110+8
 2405 0108 1C68     	 ldr r4,[r3]
 2406 010a 384B     	 ldr r3,.L110+32
 2407 010c 1B68     	 ldr r3,[r3]
 2408 010e 1846     	 mov r0,r3
 2409 0110 FFF7FEFF 	 bl lrintf
 2410 0114 0646     	 mov r6,r0
 2411 0116 354B     	 ldr r3,.L110+32
 2412 0118 5B68     	 ldr r3,[r3,#4]
 2413 011a 1846     	 mov r0,r3
 2414 011c FFF7FEFF 	 bl lrintf
 2415 0120 0546     	 mov r5,r0
 2416 0122 324B     	 ldr r3,.L110+32
 2417 0124 9B68     	 ldr r3,[r3,#8]
 2418 0126 1846     	 mov r0,r3
 2419 0128 FFF7FEFF 	 bl lrintf
 2420 012c 0346     	 mov r3,r0
 2421 012e 0095     	 str r5,[sp]
 2422 0130 0193     	 str r3,[sp,#4]
 2423 0132 2A48     	 ldr r0,.L110+16
 2424 0134 2146     	 mov r1,r4
 2425 0136 2E4A     	 ldr r2,.L110+36
 2426 0138 3346     	 mov r3,r6
 2427 013a FFF7FEFF 	 bl tfp_sprintf
 490:../cleanflight/src/main/io/dashboard.c ****         padLineBuffer();
 2428              	 .loc 5 490 0
 2429 013e FFF7FEFF 	 bl padLineBuffer
 491:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, rowIndex++);
 2430              	 .loc 5 491 0
 2431 0142 224B     	 ldr r3,.L110
 2432 0144 1A68     	 ldr r2,[r3]
 2433 0146 FB79     	 ldrb r3,[r7,#7]
 2434 0148 591C     	 adds r1,r3,#1
 2435 014a F971     	 strb r1,[r7,#7]
 2436 014c 1046     	 mov r0,r2
 2437 014e 1946     	 mov r1,r3
 2438 0150 FFF7FEFF 	 bl i2c_OLED_set_line
 492:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_send_string(bus, lineBuffer);
 2439              	 .loc 5 492 0
 2440 0154 1D4B     	 ldr r3,.L110
 2441 0156 1B68     	 ldr r3,[r3]
 2442 0158 1846     	 mov r0,r3
 2443 015a 2049     	 ldr r1,.L110+16
 2444 015c FFF7FEFF 	 bl i2c_OLED_send_string
 2445              	.L109:
 493:../cleanflight/src/main/io/dashboard.c ****     }
 494:../cleanflight/src/main/io/dashboard.c **** #endif
 495:../cleanflight/src/main/io/dashboard.c **** 
 496:../cleanflight/src/main/io/dashboard.c ****     tfp_sprintf(lineBuffer, format, "I&H", attitude.values.roll, attitude.values.pitch, DECIDEGREES
 2446              	 .loc 5 496 0
 2447 0160 1C4B     	 ldr r3,.L110+8
 2448 0162 1D68     	 ldr r5,[r3]
 2449 0164 234B     	 ldr r3,.L110+40
 2450 0166 B3F90030 	 ldrsh r3,[r3]
 2451 016a 9BB2     	 uxth r3,r3
 2452 016c 1CB2     	 sxth r4,r3
 2453 016e 214B     	 ldr r3,.L110+40
 2454 0170 B3F90230 	 ldrsh r3,[r3,#2]
 2455 0174 9BB2     	 uxth r3,r3
 2456 0176 1AB2     	 sxth r2,r3
 2457 0178 1E4B     	 ldr r3,.L110+40
 2458 017a B3F90430 	 ldrsh r3,[r3,#4]
 2459 017e 9BB2     	 uxth r3,r3
 2460 0180 1BB2     	 sxth r3,r3
 2461 0182 1D49     	 ldr r1,.L110+44
 2462 0184 81FB0301 	 smull r0,r1,r1,r3
 2463 0188 8910     	 asrs r1,r1,#2
 2464 018a DB17     	 asrs r3,r3,#31
 2465 018c CB1A     	 subs r3,r1,r3
 2466 018e 9BB2     	 uxth r3,r3
 2467 0190 1BB2     	 sxth r3,r3
 2468 0192 0092     	 str r2,[sp]
 2469 0194 0193     	 str r3,[sp,#4]
 2470 0196 1148     	 ldr r0,.L110+16
 2471 0198 2946     	 mov r1,r5
 2472 019a 184A     	 ldr r2,.L110+48
 2473 019c 2346     	 mov r3,r4
 2474 019e FFF7FEFF 	 bl tfp_sprintf
 497:../cleanflight/src/main/io/dashboard.c ****     padLineBuffer();
 2475              	 .loc 5 497 0
 2476 01a2 FFF7FEFF 	 bl padLineBuffer
 498:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 2477              	 .loc 5 498 0
 2478 01a6 094B     	 ldr r3,.L110
 2479 01a8 1A68     	 ldr r2,[r3]
 2480 01aa FB79     	 ldrb r3,[r7,#7]
 2481 01ac 591C     	 adds r1,r3,#1
 2482 01ae F971     	 strb r1,[r7,#7]
 2483 01b0 1046     	 mov r0,r2
 2484 01b2 1946     	 mov r1,r3
 2485 01b4 FFF7FEFF 	 bl i2c_OLED_set_line
 499:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 2486              	 .loc 5 499 0
 2487 01b8 044B     	 ldr r3,.L110
 2488 01ba 1B68     	 ldr r3,[r3]
 2489 01bc 1846     	 mov r0,r3
 2490 01be 0749     	 ldr r1,.L110+16
 2491 01c0 FFF7FEFF 	 bl i2c_OLED_send_string
 500:../cleanflight/src/main/io/dashboard.c **** 
 501:../cleanflight/src/main/io/dashboard.c ****     /*
 502:../cleanflight/src/main/io/dashboard.c ****     uint8_t length;
 503:../cleanflight/src/main/io/dashboard.c **** 
 504:../cleanflight/src/main/io/dashboard.c ****     ftoa(EstG.A[X], lineBuffer);
 505:../cleanflight/src/main/io/dashboard.c ****     length = strlen(lineBuffer);
 506:../cleanflight/src/main/io/dashboard.c ****     while (length < HALF_SCREEN_CHARACTER_COLUMN_COUNT) {
 507:../cleanflight/src/main/io/dashboard.c ****         lineBuffer[length++] = ' ';
 508:../cleanflight/src/main/io/dashboard.c ****         lineBuffer[length+1] = 0;
 509:../cleanflight/src/main/io/dashboard.c ****     }
 510:../cleanflight/src/main/io/dashboard.c ****     ftoa(EstG.A[Y], lineBuffer + length);
 511:../cleanflight/src/main/io/dashboard.c ****     padLineBuffer();
 512:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 513:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 514:../cleanflight/src/main/io/dashboard.c **** 
 515:../cleanflight/src/main/io/dashboard.c ****     ftoa(EstG.A[Z], lineBuffer);
 516:../cleanflight/src/main/io/dashboard.c ****     length = strlen(lineBuffer);
 517:../cleanflight/src/main/io/dashboard.c ****     while (length < HALF_SCREEN_CHARACTER_COLUMN_COUNT) {
 518:../cleanflight/src/main/io/dashboard.c ****         lineBuffer[length++] = ' ';
 519:../cleanflight/src/main/io/dashboard.c ****         lineBuffer[length+1] = 0;
 520:../cleanflight/src/main/io/dashboard.c ****     }
 521:../cleanflight/src/main/io/dashboard.c ****     ftoa(smallAngle, lineBuffer + length);
 522:../cleanflight/src/main/io/dashboard.c ****     padLineBuffer();
 523:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 524:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, lineBuffer);
 525:../cleanflight/src/main/io/dashboard.c ****     */
 526:../cleanflight/src/main/io/dashboard.c **** 
 527:../cleanflight/src/main/io/dashboard.c **** }
 2492              	 .loc 5 527 0
 2493 01c4 0C37     	 adds r7,r7,#12
 2494              	.LCFI95:
 2495              	 .cfi_def_cfa_offset 20
 2496 01c6 BD46     	 mov sp,r7
 2497              	.LCFI96:
 2498              	 .cfi_def_cfa_register 13
 2499              	 
 2500 01c8 F0BD     	 pop {r4,r5,r6,r7,pc}
 2501              	.L111:
 2502 01ca 00BF     	 .align 2
 2503              	.L110:
 2504 01cc 00000000 	 .word bus
 2505 01d0 1C010000 	 .word .LC19
 2506 01d4 00000000 	 .word format.14609
 2507 01d8 00000000 	 .word acc
 2508 01dc 00000000 	 .word lineBuffer
 2509 01e0 34010000 	 .word .LC20
 2510 01e4 00000000 	 .word gyro
 2511 01e8 38010000 	 .word .LC21
 2512 01ec 00000000 	 .word mag
 2513 01f0 3C010000 	 .word .LC22
 2514 01f4 00000000 	 .word attitude
 2515 01f8 67666666 	 .word 1717986919
 2516 01fc 40010000 	 .word .LC23
 2517              	 .cfi_endproc
 2518              	.LFE601:
 2520              	 .section .rodata
 2521              	 .align 2
 2522              	.LC24:
 2523 0144 5461736B 	 .ascii "Task max  avg mx% av%\000"
 2523      206D6178 
 2523      20206176 
 2523      67206D78 
 2523      25206176 
 2524              	 .section .text.showTasksPage,"ax",%progbits
 2525              	 .align 2
 2526              	 .thumb
 2527              	 .thumb_func
 2529              	showTasksPage:
 2530              	.LFB602:
 528:../cleanflight/src/main/io/dashboard.c **** 
 529:../cleanflight/src/main/io/dashboard.c **** #ifndef SKIP_TASK_STATISTICS
 530:../cleanflight/src/main/io/dashboard.c **** static void showTasksPage(void)
 531:../cleanflight/src/main/io/dashboard.c **** {
 2531              	 .loc 5 531 0
 2532              	 .cfi_startproc
 2533              	 
 2534              	 
 2535 0000 90B5     	 push {r4,r7,lr}
 2536              	.LCFI97:
 2537              	 .cfi_def_cfa_offset 12
 2538              	 .cfi_offset 4,-12
 2539              	 .cfi_offset 7,-8
 2540              	 .cfi_offset 14,-4
 2541 0002 91B0     	 sub sp,sp,#68
 2542              	.LCFI98:
 2543              	 .cfi_def_cfa_offset 80
 2544 0004 04AF     	 add r7,sp,#16
 2545              	.LCFI99:
 2546              	 .cfi_def_cfa 7,64
 532:../cleanflight/src/main/io/dashboard.c ****     uint8_t rowIndex = PAGE_TITLE_LINE_COUNT;
 2547              	 .loc 5 532 0
 2548 0006 0123     	 movs r3,#1
 2549 0008 87F82F30 	 strb r3,[r7,#47]
 533:../cleanflight/src/main/io/dashboard.c ****     static const char *format = "%2d%6d%5d%4d%4d";
 534:../cleanflight/src/main/io/dashboard.c **** 
 535:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_set_line(bus, rowIndex++);
 2550              	 .loc 5 535 0
 2551 000c 404B     	 ldr r3,.L117
 2552 000e 1A68     	 ldr r2,[r3]
 2553 0010 97F82F30 	 ldrb r3,[r7,#47]
 2554 0014 591C     	 adds r1,r3,#1
 2555 0016 87F82F10 	 strb r1,[r7,#47]
 2556 001a 1046     	 mov r0,r2
 2557 001c 1946     	 mov r1,r3
 2558 001e FFF7FEFF 	 bl i2c_OLED_set_line
 536:../cleanflight/src/main/io/dashboard.c ****     i2c_OLED_send_string(bus, "Task max  avg mx% av%");
 2559              	 .loc 5 536 0
 2560 0022 3B4B     	 ldr r3,.L117
 2561 0024 1B68     	 ldr r3,[r3]
 2562 0026 1846     	 mov r0,r3
 2563 0028 3A49     	 ldr r1,.L117+4
 2564 002a FFF7FEFF 	 bl i2c_OLED_send_string
 2565              	.LBB9:
 537:../cleanflight/src/main/io/dashboard.c ****     cfTaskInfo_t taskInfo;
 538:../cleanflight/src/main/io/dashboard.c ****     for (cfTaskId_e taskId = 0; taskId < TASK_COUNT; ++taskId) {
 2566              	 .loc 5 538 0
 2567 002e 0023     	 movs r3,#0
 2568 0030 87F82E30 	 strb r3,[r7,#46]
 2569 0034 64E0     	 b .L113
 2570              	.L116:
 539:../cleanflight/src/main/io/dashboard.c ****         getTaskInfo(taskId, &taskInfo);
 2571              	 .loc 5 539 0
 2572 0036 97F82E20 	 ldrb r2,[r7,#46]
 2573 003a 3B46     	 mov r3,r7
 2574 003c 1046     	 mov r0,r2
 2575 003e 1946     	 mov r1,r3
 2576 0040 FFF7FEFF 	 bl getTaskInfo
 540:../cleanflight/src/main/io/dashboard.c ****         if (taskInfo.isEnabled && taskId != TASK_SERIAL) {// don't waste a line of the display show
 2577              	 .loc 5 540 0
 2578 0044 3B7A     	 ldrb r3,[r7,#8]
 2579 0046 002B     	 cmp r3,#0
 2580 0048 55D0     	 beq .L114
 2581              	 .loc 5 540 0 is_stmt 0 discriminator 1
 2582 004a 97F82E30 	 ldrb r3,[r7,#46]
 2583 004e 062B     	 cmp r3,#6
 2584 0050 51D0     	 beq .L114
 2585              	.LBB10:
 541:../cleanflight/src/main/io/dashboard.c ****             const int taskFrequency = (int)(1000000.0f / ((float)taskInfo.latestDeltaTime));
 2586              	 .loc 5 541 0 is_stmt 1
 2587 0052 D7F80E30 	 ldr r3,[r7,#14]
 2588 0056 07EE903A 	 fmsr s15,r3
 2589 005a F8EEE77A 	 fsitos s15,s15
 2590 005e 9FED2E7A 	 flds s14,.L117+8
 2591 0062 C7EE277A 	 fdivs s15,s14,s15
 2592 0066 FDEEE77A 	 ftosizs s15,s15
 2593 006a 17EE903A 	 fmrs r3,s15
 2594 006e BB62     	 str r3,[r7,#40]
 542:../cleanflight/src/main/io/dashboard.c ****             const int maxLoad = (taskInfo.maxExecutionTime * taskFrequency + 5000) / 10000;
 2595              	 .loc 5 542 0
 2596 0070 D7F81230 	 ldr r3,[r7,#18]
 2597 0074 BA6A     	 ldr r2,[r7,#40]
 2598 0076 02FB03F3 	 mul r3,r2,r3
 2599 007a 03F59C53 	 add r3,r3,#4992
 2600 007e 0833     	 adds r3,r3,#8
 2601 0080 264A     	 ldr r2,.L117+12
 2602 0082 A2FB0323 	 umull r2,r3,r2,r3
 2603 0086 5B0B     	 lsrs r3,r3,#13
 2604 0088 7B62     	 str r3,[r7,#36]
 543:../cleanflight/src/main/io/dashboard.c ****             const int averageLoad = (taskInfo.averageExecutionTime * taskFrequency + 5000) / 10000;
 2605              	 .loc 5 543 0
 2606 008a D7F81A30 	 ldr r3,[r7,#26]
 2607 008e BA6A     	 ldr r2,[r7,#40]
 2608 0090 02FB03F3 	 mul r3,r2,r3
 2609 0094 03F59C53 	 add r3,r3,#4992
 2610 0098 0833     	 adds r3,r3,#8
 2611 009a 204A     	 ldr r2,.L117+12
 2612 009c A2FB0323 	 umull r2,r3,r2,r3
 2613 00a0 5B0B     	 lsrs r3,r3,#13
 2614 00a2 3B62     	 str r3,[r7,#32]
 544:../cleanflight/src/main/io/dashboard.c ****             tfp_sprintf(lineBuffer, format, taskId, taskInfo.maxExecutionTime, taskInfo.averageExec
 2615              	 .loc 5 544 0
 2616 00a4 1E4B     	 ldr r3,.L117+16
 2617 00a6 1968     	 ldr r1,[r3]
 2618 00a8 97F82E20 	 ldrb r2,[r7,#46]
 2619 00ac D7F81240 	 ldr r4,[r7,#18]
 2620 00b0 D7F81A30 	 ldr r3,[r7,#26]
 2621 00b4 0093     	 str r3,[sp]
 2622 00b6 7B6A     	 ldr r3,[r7,#36]
 2623 00b8 0193     	 str r3,[sp,#4]
 2624 00ba 3B6A     	 ldr r3,[r7,#32]
 2625 00bc 0293     	 str r3,[sp,#8]
 2626 00be 1948     	 ldr r0,.L117+20
 2627 00c0 2346     	 mov r3,r4
 2628 00c2 FFF7FEFF 	 bl tfp_sprintf
 545:../cleanflight/src/main/io/dashboard.c ****             padLineBuffer();
 2629              	 .loc 5 545 0
 2630 00c6 FFF7FEFF 	 bl padLineBuffer
 546:../cleanflight/src/main/io/dashboard.c ****             i2c_OLED_set_line(bus, rowIndex++);
 2631              	 .loc 5 546 0
 2632 00ca 114B     	 ldr r3,.L117
 2633 00cc 1A68     	 ldr r2,[r3]
 2634 00ce 97F82F30 	 ldrb r3,[r7,#47]
 2635 00d2 591C     	 adds r1,r3,#1
 2636 00d4 87F82F10 	 strb r1,[r7,#47]
 2637 00d8 1046     	 mov r0,r2
 2638 00da 1946     	 mov r1,r3
 2639 00dc FFF7FEFF 	 bl i2c_OLED_set_line
 547:../cleanflight/src/main/io/dashboard.c ****             i2c_OLED_send_string(bus, lineBuffer);
 2640              	 .loc 5 547 0
 2641 00e0 0B4B     	 ldr r3,.L117
 2642 00e2 1B68     	 ldr r3,[r3]
 2643 00e4 1846     	 mov r0,r3
 2644 00e6 0F49     	 ldr r1,.L117+20
 2645 00e8 FFF7FEFF 	 bl i2c_OLED_send_string
 548:../cleanflight/src/main/io/dashboard.c ****             if (rowIndex > SCREEN_CHARACTER_ROW_COUNT) {
 2646              	 .loc 5 548 0
 2647 00ec 97F82F30 	 ldrb r3,[r7,#47]
 2648 00f0 082B     	 cmp r3,#8
 2649 00f2 00D9     	 bls .L114
 549:../cleanflight/src/main/io/dashboard.c ****                 break;
 2650              	 .loc 5 549 0
 2651 00f4 08E0     	 b .L112
 2652              	.L114:
 2653              	.LBE10:
 538:../cleanflight/src/main/io/dashboard.c ****         getTaskInfo(taskId, &taskInfo);
 2654              	 .loc 5 538 0 discriminator 2
 2655 00f6 97F82E30 	 ldrb r3,[r7,#46]
 2656 00fa 0133     	 adds r3,r3,#1
 2657 00fc 87F82E30 	 strb r3,[r7,#46]
 2658              	.L113:
 538:../cleanflight/src/main/io/dashboard.c ****         getTaskInfo(taskId, &taskInfo);
 2659              	 .loc 5 538 0 is_stmt 0 discriminator 1
 2660 0100 97F82E30 	 ldrb r3,[r7,#46]
 2661 0104 142B     	 cmp r3,#20
 2662 0106 96D9     	 bls .L116
 2663              	.L112:
 2664              	.LBE9:
 550:../cleanflight/src/main/io/dashboard.c ****             }
 551:../cleanflight/src/main/io/dashboard.c ****         }
 552:../cleanflight/src/main/io/dashboard.c ****     }
 553:../cleanflight/src/main/io/dashboard.c **** }
 2665              	 .loc 5 553 0 is_stmt 1
 2666 0108 3437     	 adds r7,r7,#52
 2667              	.LCFI100:
 2668              	 .cfi_def_cfa_offset 12
 2669 010a BD46     	 mov sp,r7
 2670              	.LCFI101:
 2671              	 .cfi_def_cfa_register 13
 2672              	 
 2673 010c 90BD     	 pop {r4,r7,pc}
 2674              	.L118:
 2675 010e 00BF     	 .align 2
 2676              	.L117:
 2677 0110 00000000 	 .word bus
 2678 0114 44010000 	 .word .LC24
 2679 0118 00247449 	 .word 1232348160
 2680 011c 5917B7D1 	 .word -776530087
 2681 0120 00000000 	 .word format.14614
 2682 0124 00000000 	 .word lineBuffer
 2683              	 .cfi_endproc
 2684              	.LFE602:
 2686              	 .section .rodata
 2687 015a 0000     	 .align 2
 2688              	.LC25:
 2689 015c 2564203D 	 .ascii "%d = %5d\000"
 2689      20253564 
 2689      00
 2690              	 .section .text.showDebugPage,"ax",%progbits
 2691              	 .align 2
 2692              	 .thumb
 2693              	 .thumb_func
 2695              	showDebugPage:
 2696              	.LFB603:
 554:../cleanflight/src/main/io/dashboard.c **** #endif
 555:../cleanflight/src/main/io/dashboard.c **** 
 556:../cleanflight/src/main/io/dashboard.c **** #ifdef ENABLE_DEBUG_DASHBOARD_PAGE
 557:../cleanflight/src/main/io/dashboard.c **** 
 558:../cleanflight/src/main/io/dashboard.c **** static void showDebugPage(void)
 559:../cleanflight/src/main/io/dashboard.c **** {
 2697              	 .loc 5 559 0
 2698              	 .cfi_startproc
 2699              	 
 2700              	 
 2701 0000 80B5     	 push {r7,lr}
 2702              	.LCFI102:
 2703              	 .cfi_def_cfa_offset 8
 2704              	 .cfi_offset 7,-8
 2705              	 .cfi_offset 14,-4
 2706 0002 82B0     	 sub sp,sp,#8
 2707              	.LCFI103:
 2708              	 .cfi_def_cfa_offset 16
 2709 0004 00AF     	 add r7,sp,#0
 2710              	.LCFI104:
 2711              	 .cfi_def_cfa_register 7
 2712              	.LBB11:
 560:../cleanflight/src/main/io/dashboard.c ****     for (int rowIndex = 0; rowIndex < 4; rowIndex++) {
 2713              	 .loc 5 560 0
 2714 0006 0023     	 movs r3,#0
 2715 0008 7B60     	 str r3,[r7,#4]
 2716 000a 1EE0     	 b .L120
 2717              	.L121:
 561:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "%d = %5d", rowIndex, debug[rowIndex]);
 2718              	 .loc 5 561 0 discriminator 3
 2719 000c 124A     	 ldr r2,.L122
 2720 000e 7B68     	 ldr r3,[r7,#4]
 2721 0010 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2722 0014 1BB2     	 sxth r3,r3
 2723 0016 1148     	 ldr r0,.L122+4
 2724 0018 1149     	 ldr r1,.L122+8
 2725 001a 7A68     	 ldr r2,[r7,#4]
 2726 001c FFF7FEFF 	 bl tfp_sprintf
 562:../cleanflight/src/main/io/dashboard.c ****         padLineBuffer();
 2727              	 .loc 5 562 0 discriminator 3
 2728 0020 FFF7FEFF 	 bl padLineBuffer
 563:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_set_line(bus, rowIndex + PAGE_TITLE_LINE_COUNT);
 2729              	 .loc 5 563 0 discriminator 3
 2730 0024 0F4B     	 ldr r3,.L122+12
 2731 0026 1A68     	 ldr r2,[r3]
 2732 0028 7B68     	 ldr r3,[r7,#4]
 2733 002a DBB2     	 uxtb r3,r3
 2734 002c 0133     	 adds r3,r3,#1
 2735 002e DBB2     	 uxtb r3,r3
 2736 0030 1046     	 mov r0,r2
 2737 0032 1946     	 mov r1,r3
 2738 0034 FFF7FEFF 	 bl i2c_OLED_set_line
 564:../cleanflight/src/main/io/dashboard.c ****         i2c_OLED_send_string(bus, lineBuffer);
 2739              	 .loc 5 564 0 discriminator 3
 2740 0038 0A4B     	 ldr r3,.L122+12
 2741 003a 1B68     	 ldr r3,[r3]
 2742 003c 1846     	 mov r0,r3
 2743 003e 0749     	 ldr r1,.L122+4
 2744 0040 FFF7FEFF 	 bl i2c_OLED_send_string
 560:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "%d = %5d", rowIndex, debug[rowIndex]);
 2745              	 .loc 5 560 0 discriminator 3
 2746 0044 7B68     	 ldr r3,[r7,#4]
 2747 0046 0133     	 adds r3,r3,#1
 2748 0048 7B60     	 str r3,[r7,#4]
 2749              	.L120:
 560:../cleanflight/src/main/io/dashboard.c ****         tfp_sprintf(lineBuffer, "%d = %5d", rowIndex, debug[rowIndex]);
 2750              	 .loc 5 560 0 is_stmt 0 discriminator 1
 2751 004a 7B68     	 ldr r3,[r7,#4]
 2752 004c 032B     	 cmp r3,#3
 2753 004e DDDD     	 ble .L121
 2754              	.LBE11:
 565:../cleanflight/src/main/io/dashboard.c ****     }
 566:../cleanflight/src/main/io/dashboard.c **** }
 2755              	 .loc 5 566 0 is_stmt 1
 2756 0050 0837     	 adds r7,r7,#8
 2757              	.LCFI105:
 2758              	 .cfi_def_cfa_offset 8
 2759 0052 BD46     	 mov sp,r7
 2760              	.LCFI106:
 2761              	 .cfi_def_cfa_register 13
 2762              	 
 2763 0054 80BD     	 pop {r7,pc}
 2764              	.L123:
 2765 0056 00BF     	 .align 2
 2766              	.L122:
 2767 0058 00000000 	 .word debug
 2768 005c 00000000 	 .word lineBuffer
 2769 0060 5C010000 	 .word .LC25
 2770 0064 00000000 	 .word bus
 2771              	 .cfi_endproc
 2772              	.LFE603:
 2774              	 .section .rodata
 2775 0165 000000   	 .align 2
 2776              	.LC26:
 2777 0168 436C6561 	 .ascii "Cleanflight\000"
 2777      6E666C69 
 2777      67687400 
 2778              	 .align 2
 2779              	.LC27:
 2780 0174 41524D45 	 .ascii "ARMED\000"
 2780      4400
 2781 017a 0000     	 .align 2
 2782              	.LC28:
 2783 017c 50524F46 	 .ascii "PROFILE\000"
 2783      494C4500 
 2784              	 .align 2
 2785              	.LC29:
 2786 0184 47505300 	 .ascii "GPS\000"
 2787              	 .align 2
 2788              	.LC30:
 2789 0188 525800   	 .ascii "RX\000"
 2790 018b 00       	 .align 2
 2791              	.LC31:
 2792 018c 42415454 	 .ascii "BATTERY\000"
 2792      45525900 
 2793              	 .align 2
 2794              	.LC32:
 2795 0194 53454E53 	 .ascii "SENSORS\000"
 2795      4F525300 
 2796              	 .align 2
 2797              	.LC33:
 2798 019c 5441534B 	 .ascii "TASKS\000"
 2798      5300
 2799 01a2 0000     	 .align 2
 2800              	.LC34:
 2801 01a4 44454255 	 .ascii "DEBUG\000"
 2801      4700
 2802              	 .section .rodata.pages,"a",%progbits
 2803              	 .align 2
 2806              	pages:
 2807 0000 00       	 .byte 0
 2808 0001 68010000 	 .4byte .LC26
 2809 0005 00000000 	 .4byte showWelcomePage
 2810 0009 01       	 .byte 1
 2811 000a 01       	 .byte 1
 2812 000b 74010000 	 .4byte .LC27
 2813 000f 00000000 	 .4byte showArmedPage
 2814 0013 01       	 .byte 1
 2815 0014 05       	 .byte 5
 2816 0015 7C010000 	 .4byte .LC28
 2817 0019 00000000 	 .4byte showProfilePage
 2818 001d 00       	 .byte 0
 2819 001e 07       	 .byte 7
 2820 001f 84010000 	 .4byte .LC29
 2821 0023 00000000 	 .4byte showGpsPage
 2822 0027 00       	 .byte 0
 2823 0028 04       	 .byte 4
 2824 0029 88010000 	 .4byte .LC30
 2825 002d 00000000 	 .4byte showRxPage
 2826 0031 00       	 .byte 0
 2827 0032 02       	 .byte 2
 2828 0033 8C010000 	 .4byte .LC31
 2829 0037 00000000 	 .4byte showBatteryPage
 2830 003b 00       	 .byte 0
 2831 003c 03       	 .byte 3
 2832 003d 94010000 	 .4byte .LC32
 2833 0041 00000000 	 .4byte showSensorsPage
 2834 0045 00       	 .byte 0
 2835 0046 06       	 .byte 6
 2836 0047 9C010000 	 .4byte .LC33
 2837 004b 00000000 	 .4byte showTasksPage
 2838 004f 00       	 .byte 0
 2839 0050 08       	 .byte 8
 2840 0051 A4010000 	 .4byte .LC34
 2841 0055 00000000 	 .4byte showDebugPage
 2842 0059 00       	 .byte 0
 2843 005a 0000     	 .section .text.dashboardSetPage,"ax",%progbits
 2844              	 .align 2
 2845              	 .global dashboardSetPage
 2846              	 .thumb
 2847              	 .thumb_func
 2849              	dashboardSetPage:
 2850              	.LFB604:
 567:../cleanflight/src/main/io/dashboard.c **** #endif
 568:../cleanflight/src/main/io/dashboard.c **** 
 569:../cleanflight/src/main/io/dashboard.c **** static const pageEntry_t pages[PAGE_COUNT] = {
 570:../cleanflight/src/main/io/dashboard.c ****     { PAGE_WELCOME, FC_FIRMWARE_NAME,  showWelcomePage,    PAGE_FLAGS_SKIP_CYCLING },
 571:../cleanflight/src/main/io/dashboard.c ****     { PAGE_ARMED,   "ARMED",           showArmedPage,      PAGE_FLAGS_SKIP_CYCLING },
 572:../cleanflight/src/main/io/dashboard.c ****     { PAGE_PROFILE, "PROFILE",         showProfilePage,    PAGE_FLAGS_NONE },
 573:../cleanflight/src/main/io/dashboard.c **** #ifdef USE_GPS
 574:../cleanflight/src/main/io/dashboard.c ****     { PAGE_GPS,     "GPS",             showGpsPage,        PAGE_FLAGS_NONE },
 575:../cleanflight/src/main/io/dashboard.c **** #endif
 576:../cleanflight/src/main/io/dashboard.c ****     { PAGE_RX,      "RX",              showRxPage,         PAGE_FLAGS_NONE },
 577:../cleanflight/src/main/io/dashboard.c ****     { PAGE_BATTERY, "BATTERY",         showBatteryPage,    PAGE_FLAGS_NONE },
 578:../cleanflight/src/main/io/dashboard.c ****     { PAGE_SENSORS, "SENSORS",         showSensorsPage,    PAGE_FLAGS_NONE },
 579:../cleanflight/src/main/io/dashboard.c **** #ifndef SKIP_TASK_STATISTICS
 580:../cleanflight/src/main/io/dashboard.c ****     { PAGE_TASKS,   "TASKS",           showTasksPage,      PAGE_FLAGS_NONE },
 581:../cleanflight/src/main/io/dashboard.c **** #endif
 582:../cleanflight/src/main/io/dashboard.c **** #ifdef ENABLE_DEBUG_DASHBOARD_PAGE
 583:../cleanflight/src/main/io/dashboard.c ****     { PAGE_DEBUG,   "DEBUG",           showDebugPage,      PAGE_FLAGS_NONE },
 584:../cleanflight/src/main/io/dashboard.c **** #endif
 585:../cleanflight/src/main/io/dashboard.c **** };
 586:../cleanflight/src/main/io/dashboard.c **** 
 587:../cleanflight/src/main/io/dashboard.c **** 
 588:../cleanflight/src/main/io/dashboard.c **** void dashboardSetPage(pageId_e pageId)
 589:../cleanflight/src/main/io/dashboard.c **** {
 2851              	 .loc 5 589 0
 2852              	 .cfi_startproc
 2853              	 
 2854              	 
 2855              	 
 2856 0000 80B4     	 push {r7}
 2857              	.LCFI107:
 2858              	 .cfi_def_cfa_offset 4
 2859              	 .cfi_offset 7,-4
 2860 0002 85B0     	 sub sp,sp,#20
 2861              	.LCFI108:
 2862              	 .cfi_def_cfa_offset 24
 2863 0004 00AF     	 add r7,sp,#0
 2864              	.LCFI109:
 2865              	 .cfi_def_cfa_register 7
 2866 0006 0346     	 mov r3,r0
 2867 0008 FB71     	 strb r3,[r7,#7]
 2868              	.LBB12:
 590:../cleanflight/src/main/io/dashboard.c ****     for (int i = 0; i < PAGE_COUNT; i++) {
 2869              	 .loc 5 590 0
 2870 000a 0023     	 movs r3,#0
 2871 000c FB60     	 str r3,[r7,#12]
 2872 000e 13E0     	 b .L125
 2873              	.L127:
 2874              	.LBB13:
 591:../cleanflight/src/main/io/dashboard.c ****         const pageEntry_t *candidatePage = &pages[i];
 2875              	 .loc 5 591 0
 2876 0010 FA68     	 ldr r2,[r7,#12]
 2877 0012 1346     	 mov r3,r2
 2878 0014 9B00     	 lsls r3,r3,#2
 2879 0016 1344     	 add r3,r3,r2
 2880 0018 5B00     	 lsls r3,r3,#1
 2881 001a 0F4A     	 ldr r2,.L128
 2882 001c 1344     	 add r3,r3,r2
 2883 001e BB60     	 str r3,[r7,#8]
 592:../cleanflight/src/main/io/dashboard.c ****         if (candidatePage->id == pageId) {
 2884              	 .loc 5 592 0
 2885 0020 BB68     	 ldr r3,[r7,#8]
 2886 0022 1B78     	 ldrb r3,[r3]
 2887 0024 FA79     	 ldrb r2,[r7,#7]
 2888 0026 9A42     	 cmp r2,r3
 2889 0028 03D1     	 bne .L126
 593:../cleanflight/src/main/io/dashboard.c ****             pageState.page = candidatePage;
 2890              	 .loc 5 593 0
 2891 002a 0C4A     	 ldr r2,.L128+4
 2892 002c BB68     	 ldr r3,[r7,#8]
 2893 002e C2F80130 	 str r3,[r2,#1]
 2894              	.L126:
 2895              	.LBE13:
 590:../cleanflight/src/main/io/dashboard.c ****         const pageEntry_t *candidatePage = &pages[i];
 2896              	 .loc 5 590 0 discriminator 2
 2897 0032 FB68     	 ldr r3,[r7,#12]
 2898 0034 0133     	 adds r3,r3,#1
 2899 0036 FB60     	 str r3,[r7,#12]
 2900              	.L125:
 590:../cleanflight/src/main/io/dashboard.c ****         const pageEntry_t *candidatePage = &pages[i];
 2901              	 .loc 5 590 0 is_stmt 0 discriminator 1
 2902 0038 FB68     	 ldr r3,[r7,#12]
 2903 003a 082B     	 cmp r3,#8
 2904 003c E8DD     	 ble .L127
 2905              	.LBE12:
 594:../cleanflight/src/main/io/dashboard.c ****         }
 595:../cleanflight/src/main/io/dashboard.c ****     }
 596:../cleanflight/src/main/io/dashboard.c ****     pageState.pageFlags |= PAGE_STATE_FLAG_FORCE_PAGE_CHANGE;
 2906              	 .loc 5 596 0 is_stmt 1
 2907 003e 074B     	 ldr r3,.L128+4
 2908 0040 5B79     	 ldrb r3,[r3,#5]
 2909 0042 43F00203 	 orr r3,r3,#2
 2910 0046 DAB2     	 uxtb r2,r3
 2911 0048 044B     	 ldr r3,.L128+4
 2912 004a 5A71     	 strb r2,[r3,#5]
 597:../cleanflight/src/main/io/dashboard.c **** }
 2913              	 .loc 5 597 0
 2914 004c 1437     	 adds r7,r7,#20
 2915              	.LCFI110:
 2916              	 .cfi_def_cfa_offset 4
 2917 004e BD46     	 mov sp,r7
 2918              	.LCFI111:
 2919              	 .cfi_def_cfa_register 13
 2920              	 
 2921 0050 5DF8047B 	 ldr r7,[sp],#4
 2922              	.LCFI112:
 2923              	 .cfi_restore 7
 2924              	 .cfi_def_cfa_offset 0
 2925 0054 7047     	 bx lr
 2926              	.L129:
 2927 0056 00BF     	 .align 2
 2928              	.L128:
 2929 0058 00000000 	 .word pages
 2930 005c 00000000 	 .word pageState
 2931              	 .cfi_endproc
 2932              	.LFE604:
 2934              	 .section .text.dashboardUpdate,"ax",%progbits
 2935              	 .align 2
 2936              	 .global dashboardUpdate
 2937              	 .thumb
 2938              	 .thumb_func
 2940              	dashboardUpdate:
 2941              	.LFB605:
 598:../cleanflight/src/main/io/dashboard.c **** 
 599:../cleanflight/src/main/io/dashboard.c **** void dashboardUpdate(timeUs_t currentTimeUs)
 600:../cleanflight/src/main/io/dashboard.c **** {
 2942              	 .loc 5 600 0
 2943              	 .cfi_startproc
 2944              	 
 2945              	 
 2946 0000 80B5     	 push {r7,lr}
 2947              	.LCFI113:
 2948              	 .cfi_def_cfa_offset 8
 2949              	 .cfi_offset 7,-8
 2950              	 .cfi_offset 14,-4
 2951 0002 84B0     	 sub sp,sp,#16
 2952              	.LCFI114:
 2953              	 .cfi_def_cfa_offset 24
 2954 0004 00AF     	 add r7,sp,#0
 2955              	.LCFI115:
 2956              	 .cfi_def_cfa_register 7
 2957 0006 7860     	 str r0,[r7,#4]
 601:../cleanflight/src/main/io/dashboard.c ****     static uint8_t previousArmedState = 0;
 602:../cleanflight/src/main/io/dashboard.c **** 
 603:../cleanflight/src/main/io/dashboard.c **** #ifdef USE_CMS
 604:../cleanflight/src/main/io/dashboard.c ****     if (displayIsGrabbed(displayPort)) {
 2958              	 .loc 5 604 0
 2959 0008 694B     	 ldr r3,.L145
 2960 000a 1B68     	 ldr r3,[r3]
 2961 000c 1846     	 mov r0,r3
 2962 000e FFF7FEFF 	 bl displayIsGrabbed
 2963 0012 0346     	 mov r3,r0
 2964 0014 002B     	 cmp r3,#0
 2965 0016 00D0     	 beq .L131
 605:../cleanflight/src/main/io/dashboard.c ****         return;
 2966              	 .loc 5 605 0
 2967 0018 C6E0     	 b .L130
 2968              	.L131:
 606:../cleanflight/src/main/io/dashboard.c ****     }
 607:../cleanflight/src/main/io/dashboard.c **** #endif
 608:../cleanflight/src/main/io/dashboard.c **** 
 609:../cleanflight/src/main/io/dashboard.c ****     const bool updateNow = (int32_t)(currentTimeUs - nextDisplayUpdateAt) >= 0L;
 2969              	 .loc 5 609 0
 2970 001a 664B     	 ldr r3,.L145+4
 2971 001c 1B68     	 ldr r3,[r3]
 2972 001e 7A68     	 ldr r2,[r7,#4]
 2973 0020 D31A     	 subs r3,r2,r3
 2974 0022 DB43     	 mvns r3,r3
 2975 0024 DB0F     	 lsrs r3,r3,#31
 2976 0026 FB73     	 strb r3,[r7,#15]
 610:../cleanflight/src/main/io/dashboard.c ****     if (!updateNow) {
 2977              	 .loc 5 610 0
 2978 0028 FB7B     	 ldrb r3,[r7,#15]
 2979 002a 83F00103 	 eor r3,r3,#1
 2980 002e DBB2     	 uxtb r3,r3
 2981 0030 002B     	 cmp r3,#0
 2982 0032 00D0     	 beq .L133
 611:../cleanflight/src/main/io/dashboard.c ****         return;
 2983              	 .loc 5 611 0 discriminator 2
 2984 0034 B8E0     	 b .L130
 2985              	.L133:
 612:../cleanflight/src/main/io/dashboard.c ****     }
 613:../cleanflight/src/main/io/dashboard.c **** 
 614:../cleanflight/src/main/io/dashboard.c ****     nextDisplayUpdateAt = currentTimeUs + DISPLAY_UPDATE_FREQUENCY;
 2986              	 .loc 5 614 0
 2987 0036 7B68     	 ldr r3,[r7,#4]
 2988 0038 03F54333 	 add r3,r3,#199680
 2989 003c 03F5A073 	 add r3,r3,#320
 2990 0040 5C4A     	 ldr r2,.L145+4
 2991 0042 1360     	 str r3,[r2]
 615:../cleanflight/src/main/io/dashboard.c **** 
 616:../cleanflight/src/main/io/dashboard.c ****     bool armedState = ARMING_FLAG(ARMED) ? true : false;
 2992              	 .loc 5 616 0
 2993 0044 5C4B     	 ldr r3,.L145+8
 2994 0046 1B78     	 ldrb r3,[r3]
 2995 0048 03F00103 	 and r3,r3,#1
 2996 004c 002B     	 cmp r3,#0
 2997 004e 14BF     	 ite ne
 2998 0050 0123     	 movne r3,#1
 2999 0052 0023     	 moveq r3,#0
 3000 0054 BB73     	 strb r3,[r7,#14]
 617:../cleanflight/src/main/io/dashboard.c ****     bool armedStateChanged = armedState != previousArmedState;
 3001              	 .loc 5 617 0
 3002 0056 BB7B     	 ldrb r3,[r7,#14]
 3003 0058 584A     	 ldr r2,.L145+12
 3004 005a 1278     	 ldrb r2,[r2]
 3005 005c 9342     	 cmp r3,r2
 3006 005e 14BF     	 ite ne
 3007 0060 0123     	 movne r3,#1
 3008 0062 0023     	 moveq r3,#0
 3009 0064 7B73     	 strb r3,[r7,#13]
 618:../cleanflight/src/main/io/dashboard.c ****     previousArmedState = armedState;
 3010              	 .loc 5 618 0
 3011 0066 BA7B     	 ldrb r2,[r7,#14]
 3012 0068 544B     	 ldr r3,.L145+12
 3013 006a 1A70     	 strb r2,[r3]
 619:../cleanflight/src/main/io/dashboard.c **** 
 620:../cleanflight/src/main/io/dashboard.c ****     if (armedState) {
 3014              	 .loc 5 620 0
 3015 006c BB7B     	 ldrb r3,[r7,#14]
 3016 006e 002B     	 cmp r3,#0
 3017 0070 0DD0     	 beq .L134
 621:../cleanflight/src/main/io/dashboard.c ****         if (!armedStateChanged) {
 3018              	 .loc 5 621 0
 3019 0072 7B7B     	 ldrb r3,[r7,#13]
 3020 0074 83F00103 	 eor r3,r3,#1
 3021 0078 DBB2     	 uxtb r3,r3
 3022 007a 002B     	 cmp r3,#0
 3023 007c 00D0     	 beq .L135
 622:../cleanflight/src/main/io/dashboard.c ****             return;
 3024              	 .loc 5 622 0 discriminator 3
 3025 007e 93E0     	 b .L130
 3026              	.L135:
 623:../cleanflight/src/main/io/dashboard.c ****         }
 624:../cleanflight/src/main/io/dashboard.c ****         dashboardSetPage(PAGE_ARMED);
 3027              	 .loc 5 624 0
 3028 0080 0120     	 movs r0,#1
 3029 0082 FFF7FEFF 	 bl dashboardSetPage
 625:../cleanflight/src/main/io/dashboard.c ****         pageState.pageChanging = true;
 3030              	 .loc 5 625 0
 3031 0086 4E4B     	 ldr r3,.L145+16
 3032 0088 0122     	 movs r2,#1
 3033 008a 1A70     	 strb r2,[r3]
 3034 008c 55E0     	 b .L136
 3035              	.L134:
 626:../cleanflight/src/main/io/dashboard.c ****     } else {
 627:../cleanflight/src/main/io/dashboard.c ****         if (armedStateChanged) {
 3036              	 .loc 5 627 0
 3037 008e 7B7B     	 ldrb r3,[r7,#13]
 3038 0090 002B     	 cmp r3,#0
 3039 0092 06D0     	 beq .L137
 628:../cleanflight/src/main/io/dashboard.c ****             pageState.pageFlags |= PAGE_STATE_FLAG_FORCE_PAGE_CHANGE;
 3040              	 .loc 5 628 0
 3041 0094 4A4B     	 ldr r3,.L145+16
 3042 0096 5B79     	 ldrb r3,[r3,#5]
 3043 0098 43F00203 	 orr r3,r3,#2
 3044 009c DAB2     	 uxtb r2,r3
 3045 009e 484B     	 ldr r3,.L145+16
 3046 00a0 5A71     	 strb r2,[r3,#5]
 3047              	.L137:
 629:../cleanflight/src/main/io/dashboard.c ****         }
 630:../cleanflight/src/main/io/dashboard.c **** 
 631:../cleanflight/src/main/io/dashboard.c ****         pageState.pageChanging = (pageState.pageFlags & PAGE_STATE_FLAG_FORCE_PAGE_CHANGE) ||
 3048              	 .loc 5 631 0
 3049 00a2 474B     	 ldr r3,.L145+16
 3050 00a4 5B79     	 ldrb r3,[r3,#5]
 3051 00a6 03F00203 	 and r3,r3,#2
 3052 00aa 002B     	 cmp r3,#0
 3053 00ac 0CD1     	 bne .L138
 632:../cleanflight/src/main/io/dashboard.c ****                 (((int32_t)(currentTimeUs - pageState.nextPageAt) >= 0L && (pageState.pageFlags & P
 3054              	 .loc 5 632 0 discriminator 2
 3055 00ae 444B     	 ldr r3,.L145+16
 3056 00b0 D3F80730 	 ldr r3,[r3,#7]
 3057 00b4 7A68     	 ldr r2,[r7,#4]
 3058 00b6 D31A     	 subs r3,r2,r3
 631:../cleanflight/src/main/io/dashboard.c ****                 (((int32_t)(currentTimeUs - pageState.nextPageAt) >= 0L && (pageState.pageFlags & P
 3059              	 .loc 5 631 0 discriminator 2
 3060 00b8 002B     	 cmp r3,#0
 3061 00ba 07DB     	 blt .L139
 3062              	 .loc 5 632 0
 3063 00bc 404B     	 ldr r3,.L145+16
 3064 00be 5B79     	 ldrb r3,[r3,#5]
 3065 00c0 03F00103 	 and r3,r3,#1
 3066 00c4 002B     	 cmp r3,#0
 3067 00c6 01D0     	 beq .L139
 3068              	.L138:
 631:../cleanflight/src/main/io/dashboard.c ****                 (((int32_t)(currentTimeUs - pageState.nextPageAt) >= 0L && (pageState.pageFlags & P
 3069              	 .loc 5 631 0 discriminator 1
 3070 00c8 0123     	 movs r3,#1
 3071 00ca 00E0     	 b .L140
 3072              	.L139:
 631:../cleanflight/src/main/io/dashboard.c ****                 (((int32_t)(currentTimeUs - pageState.nextPageAt) >= 0L && (pageState.pageFlags & P
 3073              	 .loc 5 631 0 is_stmt 0 discriminator 3
 3074 00cc 0023     	 movs r3,#0
 3075              	.L140:
 631:../cleanflight/src/main/io/dashboard.c ****                 (((int32_t)(currentTimeUs - pageState.nextPageAt) >= 0L && (pageState.pageFlags & P
 3076              	 .loc 5 631 0 discriminator 5
 3077 00ce 03F00103 	 and r3,r3,#1
 3078 00d2 DAB2     	 uxtb r2,r3
 3079 00d4 3A4B     	 ldr r3,.L145+16
 3080 00d6 1A70     	 strb r2,[r3]
 633:../cleanflight/src/main/io/dashboard.c ****         if (pageState.pageChanging && (pageState.pageFlags & PAGE_STATE_FLAG_CYCLE_ENABLED)) {
 3081              	 .loc 5 633 0 is_stmt 1 discriminator 5
 3082 00d8 394B     	 ldr r3,.L145+16
 3083 00da 1B78     	 ldrb r3,[r3]
 3084 00dc 002B     	 cmp r3,#0
 3085 00de 2CD0     	 beq .L136
 3086              	 .loc 5 633 0 is_stmt 0 discriminator 1
 3087 00e0 374B     	 ldr r3,.L145+16
 3088 00e2 5B79     	 ldrb r3,[r3,#5]
 3089 00e4 03F00103 	 and r3,r3,#1
 3090 00e8 002B     	 cmp r3,#0
 3091 00ea 26D0     	 beq .L136
 3092              	.L141:
 634:../cleanflight/src/main/io/dashboard.c **** 
 635:../cleanflight/src/main/io/dashboard.c ****             do {
 636:../cleanflight/src/main/io/dashboard.c ****                 pageState.cycleIndex++;
 3093              	 .loc 5 636 0 is_stmt 1 discriminator 1
 3094 00ec 344B     	 ldr r3,.L145+16
 3095 00ee 9B79     	 ldrb r3,[r3,#6]
 3096 00f0 0133     	 adds r3,r3,#1
 3097 00f2 DAB2     	 uxtb r2,r3
 3098 00f4 324B     	 ldr r3,.L145+16
 3099 00f6 9A71     	 strb r2,[r3,#6]
 637:../cleanflight/src/main/io/dashboard.c ****                 pageState.cycleIndex = pageState.cycleIndex % PAGE_COUNT;
 3100              	 .loc 5 637 0 discriminator 1
 3101 00f8 314B     	 ldr r3,.L145+16
 3102 00fa 9A79     	 ldrb r2,[r3,#6]
 3103 00fc 314B     	 ldr r3,.L145+20
 3104 00fe A3FB0213 	 umull r1,r3,r3,r2
 3105 0102 5908     	 lsrs r1,r3,#1
 3106 0104 0B46     	 mov r3,r1
 3107 0106 DB00     	 lsls r3,r3,#3
 3108 0108 0B44     	 add r3,r3,r1
 3109 010a D31A     	 subs r3,r2,r3
 3110 010c DAB2     	 uxtb r2,r3
 3111 010e 2C4B     	 ldr r3,.L145+16
 3112 0110 9A71     	 strb r2,[r3,#6]
 638:../cleanflight/src/main/io/dashboard.c ****                 pageState.page = &pages[pageState.cycleIndex];
 3113              	 .loc 5 638 0 discriminator 1
 3114 0112 2B4B     	 ldr r3,.L145+16
 3115 0114 9B79     	 ldrb r3,[r3,#6]
 3116 0116 1A46     	 mov r2,r3
 3117 0118 1346     	 mov r3,r2
 3118 011a 9B00     	 lsls r3,r3,#2
 3119 011c 1344     	 add r3,r3,r2
 3120 011e 5B00     	 lsls r3,r3,#1
 3121 0120 294A     	 ldr r2,.L145+24
 3122 0122 1344     	 add r3,r3,r2
 3123 0124 264A     	 ldr r2,.L145+16
 3124 0126 C2F80130 	 str r3,[r2,#1]
 639:../cleanflight/src/main/io/dashboard.c ****             } while (pageState.page->flags & PAGE_FLAGS_SKIP_CYCLING);
 3125              	 .loc 5 639 0 discriminator 1
 3126 012a 254B     	 ldr r3,.L145+16
 3127 012c D3F80130 	 ldr r3,[r3,#1]
 3128 0130 5B7A     	 ldrb r3,[r3,#9]
 3129 0132 03F00103 	 and r3,r3,#1
 3130 0136 002B     	 cmp r3,#0
 3131 0138 D8D1     	 bne .L141
 3132              	.L136:
 640:../cleanflight/src/main/io/dashboard.c ****         }
 641:../cleanflight/src/main/io/dashboard.c ****     }
 642:../cleanflight/src/main/io/dashboard.c **** 
 643:../cleanflight/src/main/io/dashboard.c ****     if (pageState.pageChanging) {
 3133              	 .loc 5 643 0
 3134 013a 214B     	 ldr r3,.L145+16
 3135 013c 1B78     	 ldrb r3,[r3]
 3136 013e 002B     	 cmp r3,#0
 3137 0140 18D0     	 beq .L142
 644:../cleanflight/src/main/io/dashboard.c ****         pageState.pageFlags &= ~PAGE_STATE_FLAG_FORCE_PAGE_CHANGE;
 3138              	 .loc 5 644 0
 3139 0142 1F4B     	 ldr r3,.L145+16
 3140 0144 5B79     	 ldrb r3,[r3,#5]
 3141 0146 23F00203 	 bic r3,r3,#2
 3142 014a DAB2     	 uxtb r2,r3
 3143 014c 1C4B     	 ldr r3,.L145+16
 3144 014e 5A71     	 strb r2,[r3,#5]
 645:../cleanflight/src/main/io/dashboard.c ****         pageState.nextPageAt = currentTimeUs + PAGE_CYCLE_FREQUENCY;
 3145              	 .loc 5 645 0
 3146 0150 7A68     	 ldr r2,[r7,#4]
 3147 0152 1E4B     	 ldr r3,.L145+28
 3148 0154 1344     	 add r3,r3,r2
 3149 0156 1A4A     	 ldr r2,.L145+16
 3150 0158 C2F80730 	 str r3,[r2,#7]
 646:../cleanflight/src/main/io/dashboard.c **** 
 647:../cleanflight/src/main/io/dashboard.c ****         // Some OLED displays do not respond on the first initialisation so refresh the display
 648:../cleanflight/src/main/io/dashboard.c ****         // when the page changes in the hopes the hardware responds.  This also allows the
 649:../cleanflight/src/main/io/dashboard.c ****         // user to power off/on the display or connect it while powered.
 650:../cleanflight/src/main/io/dashboard.c ****         resetDisplay();
 3151              	 .loc 5 650 0
 3152 015c FFF7FEFF 	 bl resetDisplay
 651:../cleanflight/src/main/io/dashboard.c **** 
 652:../cleanflight/src/main/io/dashboard.c ****         if (!dashboardPresent) {
 3153              	 .loc 5 652 0
 3154 0160 1B4B     	 ldr r3,.L145+32
 3155 0162 1B78     	 ldrb r3,[r3]
 3156 0164 83F00103 	 eor r3,r3,#1
 3157 0168 DBB2     	 uxtb r3,r3
 3158 016a 002B     	 cmp r3,#0
 3159 016c 00D0     	 beq .L143
 653:../cleanflight/src/main/io/dashboard.c ****             return;
 3160              	 .loc 5 653 0 discriminator 4
 3161 016e 1BE0     	 b .L130
 3162              	.L143:
 654:../cleanflight/src/main/io/dashboard.c ****         }
 655:../cleanflight/src/main/io/dashboard.c ****         handlePageChange();
 3163              	 .loc 5 655 0
 3164 0170 FFF7FEFF 	 bl handlePageChange
 3165              	.L142:
 656:../cleanflight/src/main/io/dashboard.c ****     }
 657:../cleanflight/src/main/io/dashboard.c **** 
 658:../cleanflight/src/main/io/dashboard.c ****     if (!dashboardPresent) {
 3166              	 .loc 5 658 0
 3167 0174 164B     	 ldr r3,.L145+32
 3168 0176 1B78     	 ldrb r3,[r3]
 3169 0178 83F00103 	 eor r3,r3,#1
 3170 017c DBB2     	 uxtb r3,r3
 3171 017e 002B     	 cmp r3,#0
 3172 0180 00D0     	 beq .L144
 659:../cleanflight/src/main/io/dashboard.c ****         return;
 3173              	 .loc 5 659 0 discriminator 5
 3174 0182 11E0     	 b .L130
 3175              	.L144:
 660:../cleanflight/src/main/io/dashboard.c ****     }
 661:../cleanflight/src/main/io/dashboard.c **** 
 662:../cleanflight/src/main/io/dashboard.c ****     pageState.page->drawFn();
 3176              	 .loc 5 662 0
 3177 0184 0E4B     	 ldr r3,.L145+16
 3178 0186 D3F80130 	 ldr r3,[r3,#1]
 3179 018a D3F80530 	 ldr r3,[r3,#5]
 3180 018e 9847     	 blx r3
 663:../cleanflight/src/main/io/dashboard.c **** 
 664:../cleanflight/src/main/io/dashboard.c ****     if (!armedState) {
 3181              	 .loc 5 664 0
 3182 0190 BB7B     	 ldrb r3,[r7,#14]
 3183 0192 83F00103 	 eor r3,r3,#1
 3184 0196 DBB2     	 uxtb r3,r3
 3185 0198 002B     	 cmp r3,#0
 3186 019a 05D0     	 beq .L130
 665:../cleanflight/src/main/io/dashboard.c ****         updateFailsafeStatus();
 3187              	 .loc 5 665 0
 3188 019c FFF7FEFF 	 bl updateFailsafeStatus
 666:../cleanflight/src/main/io/dashboard.c ****         updateRxStatus();
 3189              	 .loc 5 666 0
 3190 01a0 FFF7FEFF 	 bl updateRxStatus
 667:../cleanflight/src/main/io/dashboard.c ****         updateTicker();
 3191              	 .loc 5 667 0
 3192 01a4 FFF7FEFF 	 bl updateTicker
 3193              	.L130:
 668:../cleanflight/src/main/io/dashboard.c ****     }
 669:../cleanflight/src/main/io/dashboard.c **** 
 670:../cleanflight/src/main/io/dashboard.c **** }
 3194              	 .loc 5 670 0
 3195 01a8 1037     	 adds r7,r7,#16
 3196              	.LCFI116:
 3197              	 .cfi_def_cfa_offset 8
 3198 01aa BD46     	 mov sp,r7
 3199              	.LCFI117:
 3200              	 .cfi_def_cfa_register 13
 3201              	 
 3202 01ac 80BD     	 pop {r7,pc}
 3203              	.L146:
 3204 01ae 00BF     	 .align 2
 3205              	.L145:
 3206 01b0 00000000 	 .word displayPort
 3207 01b4 00000000 	 .word nextDisplayUpdateAt
 3208 01b8 00000000 	 .word armingFlags
 3209 01bc 00000000 	 .word previousArmedState.14642
 3210 01c0 00000000 	 .word pageState
 3211 01c4 398EE338 	 .word 954437177
 3212 01c8 00000000 	 .word pages
 3213 01cc 404B4C00 	 .word 5000000
 3214 01d0 00000000 	 .word dashboardPresent
 3215              	 .cfi_endproc
 3216              	.LFE605:
 3218              	 .section .text.dashboardInit,"ax",%progbits
 3219              	 .align 2
 3220              	 .global dashboardInit
 3221              	 .thumb
 3222              	 .thumb_func
 3224              	dashboardInit:
 3225              	.LFB606:
 671:../cleanflight/src/main/io/dashboard.c **** 
 672:../cleanflight/src/main/io/dashboard.c **** void dashboardInit(void)
 673:../cleanflight/src/main/io/dashboard.c **** {
 3226              	 .loc 5 673 0
 3227              	 .cfi_startproc
 3228              	 
 3229              	 
 3230 0000 80B5     	 push {r7,lr}
 3231              	.LCFI118:
 3232              	 .cfi_def_cfa_offset 8
 3233              	 .cfi_offset 7,-8
 3234              	 .cfi_offset 14,-4
 3235 0002 82B0     	 sub sp,sp,#8
 3236              	.LCFI119:
 3237              	 .cfi_def_cfa_offset 16
 3238 0004 00AF     	 add r7,sp,#0
 3239              	.LCFI120:
 3240              	 .cfi_def_cfa_register 7
 674:../cleanflight/src/main/io/dashboard.c ****     static busDevice_t dashBoardBus;
 675:../cleanflight/src/main/io/dashboard.c ****     dashBoardBus.busdev_u.i2c.device = I2C_CFG_TO_DEV(dashboardConfig()->device);
 3241              	 .loc 5 675 0
 3242 0006 FFF7FEFF 	 bl dashboardConfig
 3243 000a 0346     	 mov r3,r0
 3244 000c 1B78     	 ldrb r3,[r3]
 3245 000e DBB2     	 uxtb r3,r3
 3246 0010 013B     	 subs r3,r3,#1
 3247 0012 DBB2     	 uxtb r3,r3
 3248 0014 DAB2     	 uxtb r2,r3
 3249 0016 1D4B     	 ldr r3,.L149
 3250 0018 5A70     	 strb r2,[r3,#1]
 676:../cleanflight/src/main/io/dashboard.c ****     dashBoardBus.busdev_u.i2c.address = dashboardConfig()->address;
 3251              	 .loc 5 676 0
 3252 001a FFF7FEFF 	 bl dashboardConfig
 3253 001e 0346     	 mov r3,r0
 3254 0020 5A78     	 ldrb r2,[r3,#1]
 3255 0022 1A4B     	 ldr r3,.L149
 3256 0024 9A70     	 strb r2,[r3,#2]
 677:../cleanflight/src/main/io/dashboard.c ****     bus = &dashBoardBus;
 3257              	 .loc 5 677 0
 3258 0026 1A4B     	 ldr r3,.L149+4
 3259 0028 184A     	 ldr r2,.L149
 3260 002a 1A60     	 str r2,[r3]
 678:../cleanflight/src/main/io/dashboard.c **** 
 679:../cleanflight/src/main/io/dashboard.c ****     delay(200);
 3261              	 .loc 5 679 0
 3262 002c C820     	 movs r0,#200
 3263 002e FFF7FEFF 	 bl delay
 680:../cleanflight/src/main/io/dashboard.c ****     resetDisplay();
 3264              	 .loc 5 680 0
 3265 0032 FFF7FEFF 	 bl resetDisplay
 681:../cleanflight/src/main/io/dashboard.c ****     delay(200);
 3266              	 .loc 5 681 0
 3267 0036 C820     	 movs r0,#200
 3268 0038 FFF7FEFF 	 bl delay
 682:../cleanflight/src/main/io/dashboard.c **** 
 683:../cleanflight/src/main/io/dashboard.c ****     displayPort = displayPortOledInit(bus);
 3269              	 .loc 5 683 0
 3270 003c 144B     	 ldr r3,.L149+4
 3271 003e 1B68     	 ldr r3,[r3]
 3272 0040 1846     	 mov r0,r3
 3273 0042 FFF7FEFF 	 bl displayPortOledInit
 3274 0046 0246     	 mov r2,r0
 3275 0048 124B     	 ldr r3,.L149+8
 3276 004a 1A60     	 str r2,[r3]
 684:../cleanflight/src/main/io/dashboard.c **** #if defined(USE_CMS)
 685:../cleanflight/src/main/io/dashboard.c ****     if (dashboardPresent) {
 3277              	 .loc 5 685 0
 3278 004c 124B     	 ldr r3,.L149+12
 3279 004e 1B78     	 ldrb r3,[r3]
 3280 0050 002B     	 cmp r3,#0
 3281 0052 04D0     	 beq .L148
 686:../cleanflight/src/main/io/dashboard.c ****         cmsDisplayPortRegister(displayPort);
 3282              	 .loc 5 686 0
 3283 0054 0F4B     	 ldr r3,.L149+8
 3284 0056 1B68     	 ldr r3,[r3]
 3285 0058 1846     	 mov r0,r3
 3286 005a FFF7FEFF 	 bl cmsDisplayPortRegister
 3287              	.L148:
 687:../cleanflight/src/main/io/dashboard.c ****     }
 688:../cleanflight/src/main/io/dashboard.c **** #endif
 689:../cleanflight/src/main/io/dashboard.c **** 
 690:../cleanflight/src/main/io/dashboard.c ****     memset(&pageState, 0, sizeof(pageState));
 3288              	 .loc 5 690 0
 3289 005e 0F48     	 ldr r0,.L149+16
 3290 0060 0021     	 movs r1,#0
 3291 0062 0B22     	 movs r2,#11
 3292 0064 FFF7FEFF 	 bl memset
 691:../cleanflight/src/main/io/dashboard.c ****     dashboardSetPage(PAGE_WELCOME);
 3293              	 .loc 5 691 0
 3294 0068 0020     	 movs r0,#0
 3295 006a FFF7FEFF 	 bl dashboardSetPage
 692:../cleanflight/src/main/io/dashboard.c **** 
 693:../cleanflight/src/main/io/dashboard.c ****     uint32_t now = micros();
 3296              	 .loc 5 693 0
 3297 006e FFF7FEFF 	 bl micros
 3298 0072 7860     	 str r0,[r7,#4]
 694:../cleanflight/src/main/io/dashboard.c ****     dashboardUpdate(now);
 3299              	 .loc 5 694 0
 3300 0074 7868     	 ldr r0,[r7,#4]
 3301 0076 FFF7FEFF 	 bl dashboardUpdate
 695:../cleanflight/src/main/io/dashboard.c **** 
 696:../cleanflight/src/main/io/dashboard.c ****     dashboardSetNextPageChangeAt(now + PAGE_CYCLE_FREQUENCY);
 3302              	 .loc 5 696 0
 3303 007a 7A68     	 ldr r2,[r7,#4]
 3304 007c 084B     	 ldr r3,.L149+20
 3305 007e 1344     	 add r3,r3,r2
 3306 0080 1846     	 mov r0,r3
 3307 0082 FFF7FEFF 	 bl dashboardSetNextPageChangeAt
 697:../cleanflight/src/main/io/dashboard.c **** }
 3308              	 .loc 5 697 0
 3309 0086 0837     	 adds r7,r7,#8
 3310              	.LCFI121:
 3311              	 .cfi_def_cfa_offset 8
 3312 0088 BD46     	 mov sp,r7
 3313              	.LCFI122:
 3314              	 .cfi_def_cfa_register 13
 3315              	 
 3316 008a 80BD     	 pop {r7,pc}
 3317              	.L150:
 3318              	 .align 2
 3319              	.L149:
 3320 008c 00000000 	 .word dashBoardBus.14651
 3321 0090 00000000 	 .word bus
 3322 0094 00000000 	 .word displayPort
 3323 0098 00000000 	 .word dashboardPresent
 3324 009c 00000000 	 .word pageState
 3325 00a0 404B4C00 	 .word 5000000
 3326              	 .cfi_endproc
 3327              	.LFE606:
 3329              	 .section .text.dashboardShowFixedPage,"ax",%progbits
 3330              	 .align 2
 3331              	 .global dashboardShowFixedPage
 3332              	 .thumb
 3333              	 .thumb_func
 3335              	dashboardShowFixedPage:
 3336              	.LFB607:
 698:../cleanflight/src/main/io/dashboard.c **** 
 699:../cleanflight/src/main/io/dashboard.c **** void dashboardShowFixedPage(pageId_e pageId)
 700:../cleanflight/src/main/io/dashboard.c **** {
 3337              	 .loc 5 700 0
 3338              	 .cfi_startproc
 3339              	 
 3340              	 
 3341 0000 80B5     	 push {r7,lr}
 3342              	.LCFI123:
 3343              	 .cfi_def_cfa_offset 8
 3344              	 .cfi_offset 7,-8
 3345              	 .cfi_offset 14,-4
 3346 0002 82B0     	 sub sp,sp,#8
 3347              	.LCFI124:
 3348              	 .cfi_def_cfa_offset 16
 3349 0004 00AF     	 add r7,sp,#0
 3350              	.LCFI125:
 3351              	 .cfi_def_cfa_register 7
 3352 0006 0346     	 mov r3,r0
 3353 0008 FB71     	 strb r3,[r7,#7]
 701:../cleanflight/src/main/io/dashboard.c ****     dashboardSetPage(pageId);
 3354              	 .loc 5 701 0
 3355 000a FB79     	 ldrb r3,[r7,#7]
 3356 000c 1846     	 mov r0,r3
 3357 000e FFF7FEFF 	 bl dashboardSetPage
 702:../cleanflight/src/main/io/dashboard.c ****     dashboardDisablePageCycling();
 3358              	 .loc 5 702 0
 3359 0012 FFF7FEFF 	 bl dashboardDisablePageCycling
 703:../cleanflight/src/main/io/dashboard.c **** }
 3360              	 .loc 5 703 0
 3361 0016 0837     	 adds r7,r7,#8
 3362              	.LCFI126:
 3363              	 .cfi_def_cfa_offset 8
 3364 0018 BD46     	 mov sp,r7
 3365              	.LCFI127:
 3366              	 .cfi_def_cfa_register 13
 3367              	 
 3368 001a 80BD     	 pop {r7,pc}
 3369              	 .cfi_endproc
 3370              	.LFE607:
 3372              	 .section .text.dashboardSetNextPageChangeAt,"ax",%progbits
 3373              	 .align 2
 3374              	 .global dashboardSetNextPageChangeAt
 3375              	 .thumb
 3376              	 .thumb_func
 3378              	dashboardSetNextPageChangeAt:
 3379              	.LFB608:
 704:../cleanflight/src/main/io/dashboard.c **** 
 705:../cleanflight/src/main/io/dashboard.c **** void dashboardSetNextPageChangeAt(timeUs_t futureMicros)
 706:../cleanflight/src/main/io/dashboard.c **** {
 3380              	 .loc 5 706 0
 3381              	 .cfi_startproc
 3382              	 
 3383              	 
 3384              	 
 3385 0000 80B4     	 push {r7}
 3386              	.LCFI128:
 3387              	 .cfi_def_cfa_offset 4
 3388              	 .cfi_offset 7,-4
 3389 0002 83B0     	 sub sp,sp,#12
 3390              	.LCFI129:
 3391              	 .cfi_def_cfa_offset 16
 3392 0004 00AF     	 add r7,sp,#0
 3393              	.LCFI130:
 3394              	 .cfi_def_cfa_register 7
 3395 0006 7860     	 str r0,[r7,#4]
 707:../cleanflight/src/main/io/dashboard.c ****     pageState.nextPageAt = futureMicros;
 3396              	 .loc 5 707 0
 3397 0008 044A     	 ldr r2,.L153
 3398 000a 7B68     	 ldr r3,[r7,#4]
 3399 000c C2F80730 	 str r3,[r2,#7]
 708:../cleanflight/src/main/io/dashboard.c **** }
 3400              	 .loc 5 708 0
 3401 0010 0C37     	 adds r7,r7,#12
 3402              	.LCFI131:
 3403              	 .cfi_def_cfa_offset 4
 3404 0012 BD46     	 mov sp,r7
 3405              	.LCFI132:
 3406              	 .cfi_def_cfa_register 13
 3407              	 
 3408 0014 5DF8047B 	 ldr r7,[sp],#4
 3409              	.LCFI133:
 3410              	 .cfi_restore 7
 3411              	 .cfi_def_cfa_offset 0
 3412 0018 7047     	 bx lr
 3413              	.L154:
 3414 001a 00BF     	 .align 2
 3415              	.L153:
 3416 001c 00000000 	 .word pageState
 3417              	 .cfi_endproc
 3418              	.LFE608:
 3420              	 .section .text.dashboardEnablePageCycling,"ax",%progbits
 3421              	 .align 2
 3422              	 .global dashboardEnablePageCycling
 3423              	 .thumb
 3424              	 .thumb_func
 3426              	dashboardEnablePageCycling:
 3427              	.LFB609:
 709:../cleanflight/src/main/io/dashboard.c **** 
 710:../cleanflight/src/main/io/dashboard.c **** void dashboardEnablePageCycling(void)
 711:../cleanflight/src/main/io/dashboard.c **** {
 3428              	 .loc 5 711 0
 3429              	 .cfi_startproc
 3430              	 
 3431              	 
 3432              	 
 3433 0000 80B4     	 push {r7}
 3434              	.LCFI134:
 3435              	 .cfi_def_cfa_offset 4
 3436              	 .cfi_offset 7,-4
 3437 0002 00AF     	 add r7,sp,#0
 3438              	.LCFI135:
 3439              	 .cfi_def_cfa_register 7
 712:../cleanflight/src/main/io/dashboard.c ****     pageState.pageFlags |= PAGE_STATE_FLAG_CYCLE_ENABLED;
 3440              	 .loc 5 712 0
 3441 0004 054B     	 ldr r3,.L156
 3442 0006 5B79     	 ldrb r3,[r3,#5]
 3443 0008 43F00103 	 orr r3,r3,#1
 3444 000c DAB2     	 uxtb r2,r3
 3445 000e 034B     	 ldr r3,.L156
 3446 0010 5A71     	 strb r2,[r3,#5]
 713:../cleanflight/src/main/io/dashboard.c **** }
 3447              	 .loc 5 713 0
 3448 0012 BD46     	 mov sp,r7
 3449              	.LCFI136:
 3450              	 .cfi_def_cfa_register 13
 3451              	 
 3452 0014 5DF8047B 	 ldr r7,[sp],#4
 3453              	.LCFI137:
 3454              	 .cfi_restore 7
 3455              	 .cfi_def_cfa_offset 0
 3456 0018 7047     	 bx lr
 3457              	.L157:
 3458 001a 00BF     	 .align 2
 3459              	.L156:
 3460 001c 00000000 	 .word pageState
 3461              	 .cfi_endproc
 3462              	.LFE609:
 3464              	 .section .text.dashboardResetPageCycling,"ax",%progbits
 3465              	 .align 2
 3466              	 .global dashboardResetPageCycling
 3467              	 .thumb
 3468              	 .thumb_func
 3470              	dashboardResetPageCycling:
 3471              	.LFB610:
 714:../cleanflight/src/main/io/dashboard.c **** 
 715:../cleanflight/src/main/io/dashboard.c **** void dashboardResetPageCycling(void)
 716:../cleanflight/src/main/io/dashboard.c **** {
 3472              	 .loc 5 716 0
 3473              	 .cfi_startproc
 3474              	 
 3475              	 
 3476              	 
 3477 0000 80B4     	 push {r7}
 3478              	.LCFI138:
 3479              	 .cfi_def_cfa_offset 4
 3480              	 .cfi_offset 7,-4
 3481 0002 00AF     	 add r7,sp,#0
 3482              	.LCFI139:
 3483              	 .cfi_def_cfa_register 7
 717:../cleanflight/src/main/io/dashboard.c ****     pageState.cycleIndex = PAGE_COUNT - 1; // start at first page
 3484              	 .loc 5 717 0
 3485 0004 034B     	 ldr r3,.L159
 3486 0006 0822     	 movs r2,#8
 3487 0008 9A71     	 strb r2,[r3,#6]
 718:../cleanflight/src/main/io/dashboard.c **** 
 719:../cleanflight/src/main/io/dashboard.c **** }
 3488              	 .loc 5 719 0
 3489 000a BD46     	 mov sp,r7
 3490              	.LCFI140:
 3491              	 .cfi_def_cfa_register 13
 3492              	 
 3493 000c 5DF8047B 	 ldr r7,[sp],#4
 3494              	.LCFI141:
 3495              	 .cfi_restore 7
 3496              	 .cfi_def_cfa_offset 0
 3497 0010 7047     	 bx lr
 3498              	.L160:
 3499 0012 00BF     	 .align 2
 3500              	.L159:
 3501 0014 00000000 	 .word pageState
 3502              	 .cfi_endproc
 3503              	.LFE610:
 3505              	 .section .text.dashboardDisablePageCycling,"ax",%progbits
 3506              	 .align 2
 3507              	 .global dashboardDisablePageCycling
 3508              	 .thumb
 3509              	 .thumb_func
 3511              	dashboardDisablePageCycling:
 3512              	.LFB611:
 720:../cleanflight/src/main/io/dashboard.c **** 
 721:../cleanflight/src/main/io/dashboard.c **** void dashboardDisablePageCycling(void)
 722:../cleanflight/src/main/io/dashboard.c **** {
 3513              	 .loc 5 722 0
 3514              	 .cfi_startproc
 3515              	 
 3516              	 
 3517              	 
 3518 0000 80B4     	 push {r7}
 3519              	.LCFI142:
 3520              	 .cfi_def_cfa_offset 4
 3521              	 .cfi_offset 7,-4
 3522 0002 00AF     	 add r7,sp,#0
 3523              	.LCFI143:
 3524              	 .cfi_def_cfa_register 7
 723:../cleanflight/src/main/io/dashboard.c ****     pageState.pageFlags &= ~PAGE_STATE_FLAG_CYCLE_ENABLED;
 3525              	 .loc 5 723 0
 3526 0004 054B     	 ldr r3,.L162
 3527 0006 5B79     	 ldrb r3,[r3,#5]
 3528 0008 23F00103 	 bic r3,r3,#1
 3529 000c DAB2     	 uxtb r2,r3
 3530 000e 034B     	 ldr r3,.L162
 3531 0010 5A71     	 strb r2,[r3,#5]
 724:../cleanflight/src/main/io/dashboard.c **** }
 3532              	 .loc 5 724 0
 3533 0012 BD46     	 mov sp,r7
 3534              	.LCFI144:
 3535              	 .cfi_def_cfa_register 13
 3536              	 
 3537 0014 5DF8047B 	 ldr r7,[sp],#4
 3538              	.LCFI145:
 3539              	 .cfi_restore 7
 3540              	 .cfi_def_cfa_offset 0
 3541 0018 7047     	 bx lr
 3542              	.L163:
 3543 001a 00BF     	 .align 2
 3544              	.L162:
 3545 001c 00000000 	 .word pageState
 3546              	 .cfi_endproc
 3547              	.LFE611:
 3549              	 .section .bss.tickerIndex.14525,"aw",%nobits
 3552              	tickerIndex.14525:
 3553 0000 00       	 .space 1
 3554              	 .section .rodata
 3555 01aa 0000     	 .align 2
 3556              	.LC35:
 3557 01ac 524F4C00 	 .ascii "ROL\000"
 3558              	 .align 2
 3559              	.LC36:
 3560 01b0 50495400 	 .ascii "PIT\000"
 3561              	 .align 2
 3562              	.LC37:
 3563 01b4 59415700 	 .ascii "YAW\000"
 3564              	 .section .rodata.axisTitles.14572,"a",%progbits
 3565              	 .align 2
 3568              	axisTitles.14572:
 3569 0000 AC010000 	 .word .LC35
 3570 0004 B0010000 	 .word .LC36
 3571 0008 B4010000 	 .word .LC37
 3572              	 .section .bss.lastGPSSvInfoReceivedCount.14585,"aw",%nobits
 3573              	 .align 2
 3576              	lastGPSSvInfoReceivedCount.14585:
 3577 0000 00000000 	 .space 4
 3578              	 .section .bss.gpsTicker.14584,"aw",%nobits
 3581              	gpsTicker.14584:
 3582 0000 00       	 .space 1
 3583              	 .section .rodata
 3584              	 .align 2
 3585              	.LC38:
 3586 01b8 25732025 	 .ascii "%s %5d %5d %5d\000"
 3586      35642025 
 3586      35642025 
 3586      356400
 3587              	 .section .data.format.14609,"aw",%progbits
 3588              	 .align 2
 3591              	format.14609:
 3592 0000 B8010000 	 .word .LC38
 3593              	 .section .rodata
 3594 01c7 00       	 .align 2
 3595              	.LC39:
 3596 01c8 25326425 	 .ascii "%2d%6d%5d%4d%4d\000"
 3596      36642535 
 3596      64253464 
 3596      25346400 
 3597              	 .section .data.format.14614,"aw",%progbits
 3598              	 .align 2
 3601              	format.14614:
 3602 0000 C8010000 	 .word .LC39
 3603              	 .section .bss.previousArmedState.14642,"aw",%nobits
 3606              	previousArmedState.14642:
 3607 0000 00       	 .space 1
 3608              	 .section .bss.dashBoardBus.14651,"aw",%nobits
 3609              	 .align 2
 3612              	dashBoardBus.14651:
 3613 0000 00000000 	 .space 9
 3613      00000000 
 3613      00
 3614 0009 000000   	 .text
 3615              	.Letext0:
 3616              	 .file 6 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3617              	 .file 7 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3618              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/xmc4700.h"
 3619              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 3620              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/platform.h"
 3621              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 3622              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus_i2c.h"
 3623              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 3624              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus.h"
 3625              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/display.h"
 3626              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 3627              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/axis.h"
 3628              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 3629              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
 3630              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 3631              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
 3632              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 3633              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
 3634              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
 3635              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
 3636              	 .file 26 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
 3637              	 .file 27 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/dashboard.h"
 3638              	 .file 28 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 3639              	 .file 29 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/scheduler/scheduler.h"
 3640              	 .file 30 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sensor.h"
 3641              	 .file 31 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro.h"
 3642              	 .file 32 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro_mpu.h"
 3643              	 .file 33 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/gyro.h"
 3644              	 .file 34 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/sensors.h"
 3645              	 .file 35 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/acceleration.h"
 3646              	 .file 36 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
 3647              	 .file 37 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
 3648              	 .file 38 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/compass.h"
 3649              	 .file 39 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 3650              	 .file 40 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
 3651              	 .file 41 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/version.h"
 3652              	 .file 42 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/cms/cms.h"
DEFINED SYMBOLS
                            *ABS*:00000000 dashboard.c
                            *COM*:00000004 pCurrentDisplay
    {standard input}:21     .text.constrain:00000000 $t
    {standard input}:25     .text.constrain:00000000 constrain
    {standard input}:85     .text.dashboardConfig:00000000 $t
    {standard input}:89     .text.dashboardConfig:00000000 dashboardConfig
    {standard input}:119    .text.dashboardConfig:00000010 $d
    {standard input}:124    .text.controlRateProfiles:00000000 $t
    {standard input}:128    .text.controlRateProfiles:00000000 controlRateProfiles
    {standard input}:170    .text.controlRateProfiles:00000020 $d
    {standard input}:175    .text.batteryConfig:00000000 $t
    {standard input}:179    .text.batteryConfig:00000000 batteryConfig
    {standard input}:209    .text.batteryConfig:00000010 $d
    {standard input}:214    .bss.bus:00000000 $d
    {standard input}:217    .bss.bus:00000000 bus
    {standard input}:220    .bss.nextDisplayUpdateAt:00000000 $d
    {standard input}:223    .bss.nextDisplayUpdateAt:00000000 nextDisplayUpdateAt
    {standard input}:228    .bss.dashboardPresent:00000000 dashboardPresent
    {standard input}:229    .bss.dashboardPresent:00000000 $d
    {standard input}:231    .bss.displayPort:00000000 $d
    {standard input}:234    .bss.displayPort:00000000 displayPort
    {standard input}:237    .bss.lineBuffer:00000000 $d
    {standard input}:240    .bss.lineBuffer:00000000 lineBuffer
    {standard input}:243    .rodata:00000000 $d
    {standard input}:247    .data.tickerCharacters:00000000 $d
    {standard input}:250    .data.tickerCharacters:00000000 tickerCharacters
    {standard input}:253    .bss.pageState:00000000 $d
    {standard input}:256    .bss.pageState:00000000 pageState
    {standard input}:259    .text.resetDisplay:00000000 $t
    {standard input}:263    .text.resetDisplay:00000000 resetDisplay
    {standard input}:292    .text.resetDisplay:00000018 $d
    {standard input}:298    .text.LCDprint:00000000 $t
    {standard input}:303    .text.LCDprint:00000000 LCDprint
    {standard input}:341    .text.LCDprint:00000020 $d
    {standard input}:346    .text.padLineBuffer:00000000 $t
    {standard input}:350    .text.padLineBuffer:00000000 padLineBuffer
    {standard input}:405    .text.padLineBuffer:00000034 $d
    {standard input}:410    .text.padHalfLineBuffer:00000000 $t
    {standard input}:414    .text.padHalfLineBuffer:00000000 padHalfLineBuffer
    {standard input}:474    .text.padHalfLineBuffer:0000003c $d
    {standard input}:479    .text.drawHorizonalPercentageBar:00000000 $t
    {standard input}:483    .text.drawHorizonalPercentageBar:00000000 drawHorizonalPercentageBar
    {standard input}:604    .text.drawHorizonalPercentageBar:000000ac $d
    {standard input}:609    .text.updateTicker:00000000 $t
    {standard input}:613    .text.updateTicker:00000000 updateTicker
    {standard input}:665    .text.updateTicker:00000048 $d
    {standard input}:3552   .bss.tickerIndex.14525:00000000 tickerIndex.14525
    {standard input}:672    .text.updateRxStatus:00000000 $t
    {standard input}:676    .text.updateRxStatus:00000000 updateRxStatus
    {standard input}:740    .text.updateRxStatus:00000048 $d
    {standard input}:745    .text.updateFailsafeStatus:00000000 $t
    {standard input}:749    .text.updateFailsafeStatus:00000000 updateFailsafeStatus
    {standard input}:778    .text.updateFailsafeStatus:0000001c $d
    {standard input}:785    .text.updateFailsafeStatus:00000038 $t
    {standard input}:855    .text.updateFailsafeStatus:00000084 $d
    {standard input}:860    .text.showTitle:00000000 $t
    {standard input}:864    .text.showTitle:00000000 showTitle
    {standard input}:898    .text.showTitle:00000028 $d
    {standard input}:904    .text.handlePageChange:00000000 $t
    {standard input}:908    .text.handlePageChange:00000000 handlePageChange
    {standard input}:934    .text.handlePageChange:00000014 $d
    {standard input}:939    .text.drawRxChannel:00000000 $t
    {standard input}:943    .text.drawRxChannel:00000000 drawRxChannel
    {standard input}:1011   .text.drawRxChannel:00000068 $d
    {standard input}:1018   .text.showRxPage:00000000 $t
    {standard input}:1022   .text.showRxPage:00000000 showRxPage
    {standard input}:1116   .text.showRxPage:00000074 $d
    {standard input}:1129   .text.showWelcomePage:00000000 $t
    {standard input}:1133   .text.showWelcomePage:00000000 showWelcomePage
    {standard input}:1204   .text.showWelcomePage:00000060 $d
    {standard input}:1214   .text.showArmedPage:00000000 $t
    {standard input}:1218   .text.showArmedPage:00000000 showArmedPage
    {standard input}:1265   .text.showProfilePage:00000000 $t
    {standard input}:1269   .text.showProfilePage:00000000 showProfilePage
    {standard input}:1543   .text.showProfilePage:000001bc $d
    {standard input}:3568   .rodata.axisTitles.14572:00000000 axisTitles.14572
    {standard input}:1582   .text.showGpsPage:00000000 $t
    {standard input}:1586   .text.showGpsPage:00000000 showGpsPage
    {standard input}:1764   .text.showGpsPage:00000118 $d
    {standard input}:3576   .bss.lastGPSSvInfoReceivedCount.14585:00000000 lastGPSSvInfoReceivedCount.14585
    {standard input}:3581   .bss.gpsTicker.14584:00000000 gpsTicker.14584
    {standard input}:1775   .text.showGpsPage:0000013c $t
    {standard input}:2022   .text.showGpsPage:00000318 $d
    {standard input}:2048   .text.showBatteryPage:00000000 $t
    {standard input}:2052   .text.showBatteryPage:00000000 showBatteryPage
    {standard input}:2231   .text.showBatteryPage:00000138 $d
    {standard input}:2257   .text.showSensorsPage:00000000 $t
    {standard input}:2261   .text.showSensorsPage:00000000 showSensorsPage
    {standard input}:2504   .text.showSensorsPage:000001cc $d
    {standard input}:3591   .data.format.14609:00000000 format.14609
    {standard input}:2525   .text.showTasksPage:00000000 $t
    {standard input}:2529   .text.showTasksPage:00000000 showTasksPage
    {standard input}:2677   .text.showTasksPage:00000110 $d
    {standard input}:3601   .data.format.14614:00000000 format.14614
    {standard input}:2691   .text.showDebugPage:00000000 $t
    {standard input}:2695   .text.showDebugPage:00000000 showDebugPage
    {standard input}:2767   .text.showDebugPage:00000058 $d
    {standard input}:2803   .rodata.pages:00000000 $d
    {standard input}:2806   .rodata.pages:00000000 pages
    {standard input}:2844   .text.dashboardSetPage:00000000 $t
    {standard input}:2849   .text.dashboardSetPage:00000000 dashboardSetPage
    {standard input}:2929   .text.dashboardSetPage:00000058 $d
    {standard input}:2935   .text.dashboardUpdate:00000000 $t
    {standard input}:2940   .text.dashboardUpdate:00000000 dashboardUpdate
    {standard input}:3206   .text.dashboardUpdate:000001b0 $d
    {standard input}:3606   .bss.previousArmedState.14642:00000000 previousArmedState.14642
    {standard input}:3219   .text.dashboardInit:00000000 $t
    {standard input}:3224   .text.dashboardInit:00000000 dashboardInit
    {standard input}:3378   .text.dashboardSetNextPageChangeAt:00000000 dashboardSetNextPageChangeAt
    {standard input}:3320   .text.dashboardInit:0000008c $d
    {standard input}:3612   .bss.dashBoardBus.14651:00000000 dashBoardBus.14651
    {standard input}:3330   .text.dashboardShowFixedPage:00000000 $t
    {standard input}:3335   .text.dashboardShowFixedPage:00000000 dashboardShowFixedPage
    {standard input}:3511   .text.dashboardDisablePageCycling:00000000 dashboardDisablePageCycling
    {standard input}:3373   .text.dashboardSetNextPageChangeAt:00000000 $t
    {standard input}:3416   .text.dashboardSetNextPageChangeAt:0000001c $d
    {standard input}:3421   .text.dashboardEnablePageCycling:00000000 $t
    {standard input}:3426   .text.dashboardEnablePageCycling:00000000 dashboardEnablePageCycling
    {standard input}:3460   .text.dashboardEnablePageCycling:0000001c $d
    {standard input}:3465   .text.dashboardResetPageCycling:00000000 $t
    {standard input}:3470   .text.dashboardResetPageCycling:00000000 dashboardResetPageCycling
    {standard input}:3501   .text.dashboardResetPageCycling:00000014 $d
    {standard input}:3506   .text.dashboardDisablePageCycling:00000000 $t
    {standard input}:3545   .text.dashboardDisablePageCycling:0000001c $d
    {standard input}:3553   .bss.tickerIndex.14525:00000000 $d
    {standard input}:3565   .rodata.axisTitles.14572:00000000 $d
    {standard input}:3573   .bss.lastGPSSvInfoReceivedCount.14585:00000000 $d
    {standard input}:3582   .bss.gpsTicker.14584:00000000 $d
    {standard input}:3588   .data.format.14609:00000000 $d
    {standard input}:3598   .data.format.14614:00000000 $d
    {standard input}:3607   .bss.previousArmedState.14642:00000000 $d
    {standard input}:3609   .bss.dashBoardBus.14651:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
dashboardConfig_System
controlRateProfiles_SystemArray
batteryConfig_System
ug2864hsweg01InitI2C
i2c_OLED_send_char
strlen
i2c_OLED_set_xy
rxIsReceivingSignal
rxAreFlightChannelsValid
failsafePhase
i2c_OLED_set_line
i2c_OLED_send_string
i2c_OLED_clear_display_quick
rcChannelLetters
rcData
rxRuntimeConfig
tfp_sprintf
shortGitRevision
targetName
getCurrentPidProfileIndex
getCurrentControlRateProfileIndex
currentPidProfile
feature
GPS_svInfoReceivedCount
GPS_svinfo_cno
stateFlags
strncpy
gpsSol
GPS_packetCount
gpsData
gpsPacketLog
getBatteryVoltage
getBatteryCellCount
calculateBatteryPercentageRemaining
getAmperage
getMAhDrawn
sensors
lrintf
acc
gyro
mag
attitude
getTaskInfo
debug
displayIsGrabbed
armingFlags
delay
displayPortOledInit
cmsDisplayPortRegister
memset
micros
