   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "gps.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.gpsConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	gpsConfig:
  25              	.LFB533:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #include "common/axis.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #include "common/time.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define LAT 0
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define LON 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define GPS_DEGREES_DIVIDER 10000000L
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define GPS_X 1
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define GPS_Y 0
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_NMEA = 0,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_UBLOX
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsProvider_e;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_AUTO = 0,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_EGNOS,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_WAAS,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_MSAS,
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     SBAS_GAGAN
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } sbasMode_e;
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define SBAS_MODE_MAX SBAS_GAGAN
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_115200 = 0,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_57600,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_38400,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_19200,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_BAUDRATE_9600
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsBaudRate_e;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_AUTOCONFIG_OFF = 0,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_AUTOCONFIG_ON
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsAutoConfig_e;
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef enum {
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_AUTOBAUD_OFF = 0,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     GPS_AUTOBAUD_ON
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsAutoBaud_e;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** #define GPS_BAUDRATE_MAX GPS_BAUDRATE_9600
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** typedef struct gpsConfig_s {
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     gpsProvider_e provider;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     sbasMode_e sbasMode;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     gpsAutoConfig_e autoConfig;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     gpsAutoBaud_e autoBaud;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h ****     uint8_t gps_ublox_use_galileo;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** } gpsConfig_t;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\gps.h **** PG_DECLARE(gpsConfig_t, gpsConfig);
  27              	 .loc 1 78 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 78 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word gpsConfig_System
  55              	 .cfi_endproc
  56              	.LFE533:
  58              	 .comm gpsPacketLog,21,4
  59              	 .section .data.gpsPacketLogChar,"aw",%progbits
  60              	 .align 2
  63              	gpsPacketLogChar:
  64 0000 00000000 	 .word gpsPacketLog
  65              	 .comm GPS_home,8,4
  66              	 .comm GPS_distanceToHome,2,2
  67              	 .comm GPS_directionToHome,2,2
  68              	 .comm dTnav,4,4
  69              	 .global actual_speed
  70              	 .section .bss.actual_speed,"aw",%nobits
  71              	 .align 2
  74              	actual_speed:
  75 0000 00000000 	 .space 4
  76              	 .comm nav_takeoff_bearing,2,2
  77              	 .global nav_mode
  78              	 .section .bss.nav_mode,"aw",%nobits
  81              	nav_mode:
  82 0000 00       	 .space 1
  83              	 .section .bss.GPS_filter_index,"aw",%nobits
  86              	GPS_filter_index:
  87 0000 00       	 .space 1
  88              	 .section .bss.GPS_filter,"aw",%nobits
  89              	 .align 2
  92              	GPS_filter:
  93 0000 00000000 	 .space 40
  93      00000000 
  93      00000000 
  93      00000000 
  93      00000000 
  94              	 .section .bss.GPS_filter_sum,"aw",%nobits
  95              	 .align 2
  98              	GPS_filter_sum:
  99 0000 00000000 	 .space 8
  99      00000000 
 100              	 .section .bss.GPS_read,"aw",%nobits
 101              	 .align 2
 104              	GPS_read:
 105 0000 00000000 	 .space 8
 105      00000000 
 106              	 .section .bss.GPS_filtered,"aw",%nobits
 107              	 .align 2
 110              	GPS_filtered:
 111 0000 00000000 	 .space 8
 111      00000000 
 112              	 .section .bss.GPS_degree,"aw",%nobits
 113              	 .align 2
 116              	GPS_degree:
 117 0000 00000000 	 .space 8
 117      00000000 
 118              	 .section .bss.fraction3,"aw",%nobits
 119              	 .align 2
 122              	fraction3:
 123 0000 00000000 	 .space 4
 124              	 .comm gpsSol,19,4
 125              	 .global GPS_packetCount
 126              	 .section .bss.GPS_packetCount,"aw",%nobits
 127              	 .align 2
 130              	GPS_packetCount:
 131 0000 00000000 	 .space 4
 132              	 .global GPS_svInfoReceivedCount
 133              	 .section .bss.GPS_svInfoReceivedCount,"aw",%nobits
 134              	 .align 2
 137              	GPS_svInfoReceivedCount:
 138 0000 00000000 	 .space 4
 139              	 .global GPS_update
 140              	 .section .bss.GPS_update,"aw",%nobits
 143              	GPS_update:
 144 0000 00       	 .space 1
 145              	 .comm GPS_numCh,1,1
 146              	 .comm GPS_svinfo_chn,16,4
 147              	 .comm GPS_svinfo_svid,16,4
 148              	 .comm GPS_svinfo_quality,16,4
 149              	 .comm GPS_svinfo_cno,16,4
 150              	 .section .bss.gpsPort,"aw",%nobits
 151              	 .align 2
 154              	gpsPort:
 155 0000 00000000 	 .space 4
 156              	 .section .rodata
 157              	 .align 2
 158              	.LC0:
 159 0000 24505542 	 .ascii "$PUBX,41,1,0003,0001,115200,0*1E\015\012\000"
 159      582C3431 
 159      2C312C30 
 159      3030332C 
 159      30303031 
 160 0023 00       	 .align 2
 161              	.LC1:
 162 0024 24504D54 	 .ascii "$PMTK251,115200*1F\015\012\000"
 162      4B323531 
 162      2C313135 
 162      3230302A 
 162      31460D0A 
 163 0039 000000   	 .align 2
 164              	.LC2:
 165 003c 24505542 	 .ascii "$PUBX,41,1,0003,0001,57600,0*2D\015\012\000"
 165      582C3431 
 165      2C312C30 
 165      3030332C 
 165      30303031 
 166 005e 0000     	 .align 2
 167              	.LC3:
 168 0060 24504D54 	 .ascii "$PMTK251,57600*2C\015\012\000"
 168      4B323531 
 168      2C353736 
 168      30302A32 
 168      430D0A00 
 169              	 .align 2
 170              	.LC4:
 171 0074 24505542 	 .ascii "$PUBX,41,1,0003,0001,38400,0*26\015\012\000"
 171      582C3431 
 171      2C312C30 
 171      3030332C 
 171      30303031 
 172 0096 0000     	 .align 2
 173              	.LC5:
 174 0098 24504D54 	 .ascii "$PMTK251,38400*27\015\012\000"
 174      4B323531 
 174      2C333834 
 174      30302A32 
 174      370D0A00 
 175              	 .align 2
 176              	.LC6:
 177 00ac 24505542 	 .ascii "$PUBX,41,1,0003,0001,19200,0*23\015\012\000"
 177      582C3431 
 177      2C312C30 
 177      3030332C 
 177      30303031 
 178 00ce 0000     	 .align 2
 179              	.LC7:
 180 00d0 24504D54 	 .ascii "$PMTK251,19200*22\015\012\000"
 180      4B323531 
 180      2C313932 
 180      30302A32 
 180      320D0A00 
 181              	 .align 2
 182              	.LC8:
 183 00e4 24505542 	 .ascii "$PUBX,41,1,0003,0001,9600,0*16\015\012\000"
 183      582C3431 
 183      2C312C30 
 183      3030332C 
 183      30303031 
 184 0105 000000   	 .align 2
 185              	.LC9:
 186 0108 00       	 .ascii "\000"
 187              	 .section .rodata.gpsInitData,"a",%progbits
 188              	 .align 2
 191              	gpsInitData:
 192 0000 00       	 .byte 0
 193 0001 05       	 .byte 5
 194 0002 00000000 	 .4byte .LC0
 195 0006 24000000 	 .4byte .LC1
 196 000a 01       	 .byte 1
 197 000b 04       	 .byte 4
 198 000c 3C000000 	 .4byte .LC2
 199 0010 60000000 	 .4byte .LC3
 200 0014 02       	 .byte 2
 201 0015 03       	 .byte 3
 202 0016 74000000 	 .4byte .LC4
 203 001a 98000000 	 .4byte .LC5
 204 001e 03       	 .byte 3
 205 001f 02       	 .byte 2
 206 0020 AC000000 	 .4byte .LC6
 207 0024 D0000000 	 .4byte .LC7
 208 0028 04       	 .byte 4
 209 0029 01       	 .byte 1
 210 002a E4000000 	 .4byte .LC8
 211 002e 08010000 	 .4byte .LC9
 212 0032 0000     	 .section .rodata.ubloxInit,"a",%progbits
 213              	 .align 2
 216              	ubloxInit:
 217 0000 B5       	 .byte -75
 218 0001 62       	 .byte 98
 219 0002 06       	 .byte 6
 220 0003 24       	 .byte 36
 221 0004 24       	 .byte 36
 222 0005 00       	 .byte 0
 223 0006 FF       	 .byte -1
 224 0007 FF       	 .byte -1
 225 0008 08       	 .byte 8
 226 0009 03       	 .byte 3
 227 000a 00       	 .byte 0
 228 000b 00       	 .byte 0
 229 000c 00       	 .byte 0
 230 000d 00       	 .byte 0
 231 000e 10       	 .byte 16
 232 000f 27       	 .byte 39
 233 0010 00       	 .byte 0
 234 0011 00       	 .byte 0
 235 0012 05       	 .byte 5
 236 0013 00       	 .byte 0
 237 0014 FA       	 .byte -6
 238 0015 00       	 .byte 0
 239 0016 FA       	 .byte -6
 240 0017 00       	 .byte 0
 241 0018 64       	 .byte 100
 242 0019 00       	 .byte 0
 243 001a 2C       	 .byte 44
 244 001b 01       	 .byte 1
 245 001c 00       	 .byte 0
 246 001d 3C       	 .byte 60
 247 001e 00       	 .byte 0
 248 001f 00       	 .byte 0
 249 0020 00       	 .byte 0
 250 0021 00       	 .byte 0
 251 0022 C8       	 .byte -56
 252 0023 00       	 .byte 0
 253 0024 00       	 .byte 0
 254 0025 00       	 .byte 0
 255 0026 00       	 .byte 0
 256 0027 00       	 .byte 0
 257 0028 00       	 .byte 0
 258 0029 00       	 .byte 0
 259 002a 1C       	 .byte 28
 260 002b 6C       	 .byte 108
 261 002c B5       	 .byte -75
 262 002d 62       	 .byte 98
 263 002e 06       	 .byte 6
 264 002f 01       	 .byte 1
 265 0030 03       	 .byte 3
 266 0031 00       	 .byte 0
 267 0032 F0       	 .byte -16
 268 0033 05       	 .byte 5
 269 0034 00       	 .byte 0
 270 0035 FF       	 .byte -1
 271 0036 19       	 .byte 25
 272 0037 B5       	 .byte -75
 273 0038 62       	 .byte 98
 274 0039 06       	 .byte 6
 275 003a 01       	 .byte 1
 276 003b 03       	 .byte 3
 277 003c 00       	 .byte 0
 278 003d F0       	 .byte -16
 279 003e 03       	 .byte 3
 280 003f 00       	 .byte 0
 281 0040 FD       	 .byte -3
 282 0041 15       	 .byte 21
 283 0042 B5       	 .byte -75
 284 0043 62       	 .byte 98
 285 0044 06       	 .byte 6
 286 0045 01       	 .byte 1
 287 0046 03       	 .byte 3
 288 0047 00       	 .byte 0
 289 0048 F0       	 .byte -16
 290 0049 01       	 .byte 1
 291 004a 00       	 .byte 0
 292 004b FB       	 .byte -5
 293 004c 11       	 .byte 17
 294 004d B5       	 .byte -75
 295 004e 62       	 .byte 98
 296 004f 06       	 .byte 6
 297 0050 01       	 .byte 1
 298 0051 03       	 .byte 3
 299 0052 00       	 .byte 0
 300 0053 F0       	 .byte -16
 301 0054 00       	 .byte 0
 302 0055 00       	 .byte 0
 303 0056 FA       	 .byte -6
 304 0057 0F       	 .byte 15
 305 0058 B5       	 .byte -75
 306 0059 62       	 .byte 98
 307 005a 06       	 .byte 6
 308 005b 01       	 .byte 1
 309 005c 03       	 .byte 3
 310 005d 00       	 .byte 0
 311 005e F0       	 .byte -16
 312 005f 02       	 .byte 2
 313 0060 00       	 .byte 0
 314 0061 FC       	 .byte -4
 315 0062 13       	 .byte 19
 316 0063 B5       	 .byte -75
 317 0064 62       	 .byte 98
 318 0065 06       	 .byte 6
 319 0066 01       	 .byte 1
 320 0067 03       	 .byte 3
 321 0068 00       	 .byte 0
 322 0069 F0       	 .byte -16
 323 006a 04       	 .byte 4
 324 006b 00       	 .byte 0
 325 006c FE       	 .byte -2
 326 006d 17       	 .byte 23
 327 006e B5       	 .byte -75
 328 006f 62       	 .byte 98
 329 0070 06       	 .byte 6
 330 0071 01       	 .byte 1
 331 0072 03       	 .byte 3
 332 0073 00       	 .byte 0
 333 0074 01       	 .byte 1
 334 0075 02       	 .byte 2
 335 0076 01       	 .byte 1
 336 0077 0E       	 .byte 14
 337 0078 47       	 .byte 71
 338 0079 B5       	 .byte -75
 339 007a 62       	 .byte 98
 340 007b 06       	 .byte 6
 341 007c 01       	 .byte 1
 342 007d 03       	 .byte 3
 343 007e 00       	 .byte 0
 344 007f 01       	 .byte 1
 345 0080 03       	 .byte 3
 346 0081 01       	 .byte 1
 347 0082 0F       	 .byte 15
 348 0083 49       	 .byte 73
 349 0084 B5       	 .byte -75
 350 0085 62       	 .byte 98
 351 0086 06       	 .byte 6
 352 0087 01       	 .byte 1
 353 0088 03       	 .byte 3
 354 0089 00       	 .byte 0
 355 008a 01       	 .byte 1
 356 008b 06       	 .byte 6
 357 008c 01       	 .byte 1
 358 008d 12       	 .byte 18
 359 008e 4F       	 .byte 79
 360 008f B5       	 .byte -75
 361 0090 62       	 .byte 98
 362 0091 06       	 .byte 6
 363 0092 01       	 .byte 1
 364 0093 03       	 .byte 3
 365 0094 00       	 .byte 0
 366 0095 01       	 .byte 1
 367 0096 30       	 .byte 48
 368 0097 05       	 .byte 5
 369 0098 40       	 .byte 64
 370 0099 A7       	 .byte -89
 371 009a B5       	 .byte -75
 372 009b 62       	 .byte 98
 373 009c 06       	 .byte 6
 374 009d 01       	 .byte 1
 375 009e 03       	 .byte 3
 376 009f 00       	 .byte 0
 377 00a0 01       	 .byte 1
 378 00a1 12       	 .byte 18
 379 00a2 01       	 .byte 1
 380 00a3 1E       	 .byte 30
 381 00a4 67       	 .byte 103
 382 00a5 B5       	 .byte -75
 383 00a6 62       	 .byte 98
 384 00a7 06       	 .byte 6
 385 00a8 08       	 .byte 8
 386 00a9 06       	 .byte 6
 387 00aa 00       	 .byte 0
 388 00ab C8       	 .byte -56
 389 00ac 00       	 .byte 0
 390 00ad 01       	 .byte 1
 391 00ae 00       	 .byte 0
 392 00af 01       	 .byte 1
 393 00b0 00       	 .byte 0
 394 00b1 DE       	 .byte -34
 395 00b2 6A       	 .byte 106
 396 00b3 00       	 .section .rodata.ubloxSbasPrefix,"a",%progbits
 397              	 .align 2
 400              	ubloxSbasPrefix:
 401 0000 B5       	 .byte -75
 402 0001 62       	 .byte 98
 403 0002 06       	 .byte 6
 404 0003 16       	 .byte 22
 405 0004 08       	 .byte 8
 406 0005 00       	 .byte 0
 407 0006 03       	 .byte 3
 408 0007 07       	 .byte 7
 409 0008 03       	 .byte 3
 410 0009 00       	 .byte 0
 411 000a 0000     	 .section .rodata.ubloxSbas,"a",%progbits
 412              	 .align 2
 415              	ubloxSbas:
 416 0000 00       	 .byte 0
 417 0001 00       	 .byte 0
 418 0002 00       	 .byte 0
 419 0003 00       	 .byte 0
 420 0004 00       	 .byte 0
 421 0005 31       	 .byte 49
 422 0006 E5       	 .byte -27
 423 0007 01       	 .byte 1
 424 0008 51       	 .byte 81
 425 0009 08       	 .byte 8
 426 000a 00       	 .byte 0
 427 000b 00       	 .byte 0
 428 000c 8A       	 .byte -118
 429 000d 41       	 .byte 65
 430 000e 02       	 .byte 2
 431 000f 04       	 .byte 4
 432 0010 E0       	 .byte -32
 433 0011 04       	 .byte 4
 434 0012 00       	 .byte 0
 435 0013 19       	 .byte 25
 436 0014 9D       	 .byte -99
 437 0015 03       	 .byte 3
 438 0016 00       	 .byte 0
 439 0017 02       	 .byte 2
 440 0018 02       	 .byte 2
 441 0019 00       	 .byte 0
 442 001a 35       	 .byte 53
 443 001b EF       	 .byte -17
 444 001c 04       	 .byte 4
 445 001d 80       	 .byte -128
 446 001e 01       	 .byte 1
 447 001f 00       	 .byte 0
 448 0020 00       	 .byte 0
 449 0021 B2       	 .byte -78
 450 0022 E8       	 .byte -24
 451 0023 00       	 .section .rodata.ubloxGalileoInit,"a",%progbits
 452              	 .align 2
 455              	ubloxGalileoInit:
 456 0000 B5       	 .byte -75
 457 0001 62       	 .byte 98
 458 0002 06       	 .byte 6
 459 0003 3E       	 .byte 62
 460 0004 3C       	 .byte 60
 461 0005 00       	 .byte 0
 462 0006 00       	 .byte 0
 463 0007 20       	 .byte 32
 464 0008 20       	 .byte 32
 465 0009 07       	 .byte 7
 466 000a 00       	 .byte 0
 467 000b 08       	 .byte 8
 468 000c 10       	 .byte 16
 469 000d 00       	 .byte 0
 470 000e 01       	 .byte 1
 471 000f 00       	 .byte 0
 472 0010 01       	 .byte 1
 473 0011 01       	 .byte 1
 474 0012 01       	 .byte 1
 475 0013 01       	 .byte 1
 476 0014 03       	 .byte 3
 477 0015 00       	 .byte 0
 478 0016 01       	 .byte 1
 479 0017 00       	 .byte 0
 480 0018 01       	 .byte 1
 481 0019 01       	 .byte 1
 482 001a 02       	 .byte 2
 483 001b 04       	 .byte 4
 484 001c 08       	 .byte 8
 485 001d 00       	 .byte 0
 486 001e 01       	 .byte 1
 487 001f 00       	 .byte 0
 488 0020 01       	 .byte 1
 489 0021 01       	 .byte 1
 490 0022 03       	 .byte 3
 491 0023 08       	 .byte 8
 492 0024 10       	 .byte 16
 493 0025 00       	 .byte 0
 494 0026 00       	 .byte 0
 495 0027 00       	 .byte 0
 496 0028 01       	 .byte 1
 497 0029 01       	 .byte 1
 498 002a 04       	 .byte 4
 499 002b 00       	 .byte 0
 500 002c 08       	 .byte 8
 501 002d 00       	 .byte 0
 502 002e 00       	 .byte 0
 503 002f 00       	 .byte 0
 504 0030 01       	 .byte 1
 505 0031 03       	 .byte 3
 506 0032 05       	 .byte 5
 507 0033 00       	 .byte 0
 508 0034 03       	 .byte 3
 509 0035 00       	 .byte 0
 510 0036 00       	 .byte 0
 511 0037 00       	 .byte 0
 512 0038 01       	 .byte 1
 513 0039 05       	 .byte 5
 514 003a 06       	 .byte 6
 515 003b 08       	 .byte 8
 516 003c 0E       	 .byte 14
 517 003d 00       	 .byte 0
 518 003e 01       	 .byte 1
 519 003f 00       	 .byte 0
 520 0040 01       	 .byte 1
 521 0041 01       	 .byte 1
 522 0042 55       	 .byte 85
 523 0043 47       	 .byte 71
 524              	 .comm gpsData,27,4
 525              	 .comm gpsConfig_System,5,4
 526              	 .comm gpsConfig_Copy,5,4
 527              	 .global gpsConfig_Registry
 528              	 .section .pg_registry,"a",%progbits
 529              	 .align 2
 532              	gpsConfig_Registry:
 533 0000 1E00     	 .short 30
 534 0002 0500     	 .short 5
 535 0004 00000000 	 .word gpsConfig_System
 536 0008 00000000 	 .word gpsConfig_Copy
 537 000c 00000000 	 .word 0
 538 0010 00000000 	 .word pgResetTemplate_gpsConfig
 539              	 .global pgResetTemplate_gpsConfig
 540              	 .section .pg_resetdata,"a",%progbits
 541              	 .align 1
 544              	pgResetTemplate_gpsConfig:
 545 0000 00       	 .byte 0
 546 0001 00       	 .byte 0
 547 0002 01       	 .byte 1
 548 0003 00       	 .byte 0
 549 0004 00       	 .byte 0
 550 0005 00       	 .section .text.shiftPacketLog,"ax",%progbits
 551              	 .align 2
 552              	 .thumb
 553              	 .thumb_func
 555              	shiftPacketLog:
 556              	.LFB552:
 557              	 .file 2 "../cleanflight/src/main/io/gps.c"
   1:../cleanflight/src/main/io/gps.c **** /*
   2:../cleanflight/src/main/io/gps.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/io/gps.c ****  *
   4:../cleanflight/src/main/io/gps.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/io/gps.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/io/gps.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/io/gps.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/io/gps.c ****  * any later version.
   9:../cleanflight/src/main/io/gps.c ****  *
  10:../cleanflight/src/main/io/gps.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/io/gps.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/io/gps.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/io/gps.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/io/gps.c ****  *
  15:../cleanflight/src/main/io/gps.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/io/gps.c ****  * along with this software.
  17:../cleanflight/src/main/io/gps.c ****  *
  18:../cleanflight/src/main/io/gps.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/io/gps.c ****  */
  20:../cleanflight/src/main/io/gps.c **** 
  21:../cleanflight/src/main/io/gps.c **** #include <stdbool.h>
  22:../cleanflight/src/main/io/gps.c **** #include <stdint.h>
  23:../cleanflight/src/main/io/gps.c **** #include <ctype.h>
  24:../cleanflight/src/main/io/gps.c **** #include <string.h>
  25:../cleanflight/src/main/io/gps.c **** #include <math.h>
  26:../cleanflight/src/main/io/gps.c **** 
  27:../cleanflight/src/main/io/gps.c **** #include "platform.h"
  28:../cleanflight/src/main/io/gps.c **** 
  29:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS
  30:../cleanflight/src/main/io/gps.c **** 
  31:../cleanflight/src/main/io/gps.c **** #include "build/build_config.h"
  32:../cleanflight/src/main/io/gps.c **** #include "build/debug.h"
  33:../cleanflight/src/main/io/gps.c **** 
  34:../cleanflight/src/main/io/gps.c **** #include "common/axis.h"
  35:../cleanflight/src/main/io/gps.c **** #include "common/gps_conversion.h"
  36:../cleanflight/src/main/io/gps.c **** #include "common/maths.h"
  37:../cleanflight/src/main/io/gps.c **** #include "common/utils.h"
  38:../cleanflight/src/main/io/gps.c **** 
  39:../cleanflight/src/main/io/gps.c **** #include "config/feature.h"
  40:../cleanflight/src/main/io/gps.c **** #include "pg/pg.h"
  41:../cleanflight/src/main/io/gps.c **** #include "pg/pg_ids.h"
  42:../cleanflight/src/main/io/gps.c **** 
  43:../cleanflight/src/main/io/gps.c **** #include "drivers/light_led.h"
  44:../cleanflight/src/main/io/gps.c **** #include "drivers/time.h"
  45:../cleanflight/src/main/io/gps.c **** 
  46:../cleanflight/src/main/io/gps.c **** #include "io/dashboard.h"
  47:../cleanflight/src/main/io/gps.c **** #include "io/gps.h"
  48:../cleanflight/src/main/io/gps.c **** #include "io/serial.h"
  49:../cleanflight/src/main/io/gps.c **** 
  50:../cleanflight/src/main/io/gps.c **** #include "fc/config.h"
  51:../cleanflight/src/main/io/gps.c **** #include "fc/runtime_config.h"
  52:../cleanflight/src/main/io/gps.c **** 
  53:../cleanflight/src/main/io/gps.c **** #include "flight/imu.h"
  54:../cleanflight/src/main/io/gps.c **** #include "flight/pid.h"
  55:../cleanflight/src/main/io/gps.c **** #include "flight/gps_rescue.h"
  56:../cleanflight/src/main/io/gps.c **** 
  57:../cleanflight/src/main/io/gps.c **** #include "sensors/sensors.h"
  58:../cleanflight/src/main/io/gps.c **** 
  59:../cleanflight/src/main/io/gps.c **** #define LOG_ERROR        '?'
  60:../cleanflight/src/main/io/gps.c **** #define LOG_IGNORED      '!'
  61:../cleanflight/src/main/io/gps.c **** #define LOG_SKIPPED      '>'
  62:../cleanflight/src/main/io/gps.c **** #define LOG_NMEA_GGA     'g'
  63:../cleanflight/src/main/io/gps.c **** #define LOG_NMEA_RMC     'r'
  64:../cleanflight/src/main/io/gps.c **** #define LOG_UBLOX_SOL    'O'
  65:../cleanflight/src/main/io/gps.c **** #define LOG_UBLOX_STATUS 'S'
  66:../cleanflight/src/main/io/gps.c **** #define LOG_UBLOX_SVINFO 'I'
  67:../cleanflight/src/main/io/gps.c **** #define LOG_UBLOX_POSLLH 'P'
  68:../cleanflight/src/main/io/gps.c **** #define LOG_UBLOX_VELNED 'V'
  69:../cleanflight/src/main/io/gps.c **** 
  70:../cleanflight/src/main/io/gps.c **** #define GPS_SV_MAXSATS   16
  71:../cleanflight/src/main/io/gps.c **** 
  72:../cleanflight/src/main/io/gps.c **** char gpsPacketLog[GPS_PACKET_LOG_ENTRY_COUNT];
  73:../cleanflight/src/main/io/gps.c **** static char *gpsPacketLogChar = gpsPacketLog;
  74:../cleanflight/src/main/io/gps.c **** // **********************
  75:../cleanflight/src/main/io/gps.c **** // GPS
  76:../cleanflight/src/main/io/gps.c **** // **********************
  77:../cleanflight/src/main/io/gps.c **** int32_t GPS_home[2];
  78:../cleanflight/src/main/io/gps.c **** uint16_t GPS_distanceToHome;        // distance to home point in meters
  79:../cleanflight/src/main/io/gps.c **** int16_t GPS_directionToHome;        // direction to home or hol point in degrees
  80:../cleanflight/src/main/io/gps.c **** float dTnav;             // Delta Time in milliseconds for navigation computations, updated with ev
  81:../cleanflight/src/main/io/gps.c **** int16_t actual_speed[2] = { 0, 0 };
  82:../cleanflight/src/main/io/gps.c **** int16_t nav_takeoff_bearing;
  83:../cleanflight/src/main/io/gps.c **** navigationMode_e nav_mode = NAV_MODE_NONE;    // Navigation mode
  84:../cleanflight/src/main/io/gps.c **** 
  85:../cleanflight/src/main/io/gps.c **** // moving average filter variables
  86:../cleanflight/src/main/io/gps.c **** #define GPS_FILTERING              1    // add a 5 element moving average filter to GPS coordinates
  87:../cleanflight/src/main/io/gps.c **** #ifdef GPS_FILTERING
  88:../cleanflight/src/main/io/gps.c **** #define GPS_FILTER_VECTOR_LENGTH 5
  89:../cleanflight/src/main/io/gps.c **** static uint8_t GPS_filter_index = 0;
  90:../cleanflight/src/main/io/gps.c **** static int32_t GPS_filter[2][GPS_FILTER_VECTOR_LENGTH];
  91:../cleanflight/src/main/io/gps.c **** static int32_t GPS_filter_sum[2];
  92:../cleanflight/src/main/io/gps.c **** static int32_t GPS_read[2];
  93:../cleanflight/src/main/io/gps.c **** static int32_t GPS_filtered[2];
  94:../cleanflight/src/main/io/gps.c **** static int32_t GPS_degree[2];   //the lat lon degree without any decimals (lat/10 000 000)
  95:../cleanflight/src/main/io/gps.c **** static uint16_t fraction3[2];
  96:../cleanflight/src/main/io/gps.c **** #endif
  97:../cleanflight/src/main/io/gps.c **** 
  98:../cleanflight/src/main/io/gps.c **** gpsSolutionData_t gpsSol;
  99:../cleanflight/src/main/io/gps.c **** uint32_t GPS_packetCount = 0;
 100:../cleanflight/src/main/io/gps.c **** uint32_t GPS_svInfoReceivedCount = 0; // SV = Space Vehicle, counter increments each time SV info i
 101:../cleanflight/src/main/io/gps.c **** uint8_t GPS_update = 0;             // it's a binary toggle to distinct a GPS position update
 102:../cleanflight/src/main/io/gps.c **** 
 103:../cleanflight/src/main/io/gps.c **** uint8_t GPS_numCh;                          // Number of channels
 104:../cleanflight/src/main/io/gps.c **** uint8_t GPS_svinfo_chn[GPS_SV_MAXSATS];     // Channel number
 105:../cleanflight/src/main/io/gps.c **** uint8_t GPS_svinfo_svid[GPS_SV_MAXSATS];    // Satellite ID
 106:../cleanflight/src/main/io/gps.c **** uint8_t GPS_svinfo_quality[GPS_SV_MAXSATS]; // Bitfield Qualtity
 107:../cleanflight/src/main/io/gps.c **** uint8_t GPS_svinfo_cno[GPS_SV_MAXSATS];     // Carrier to Noise Ratio (Signal Strength)
 108:../cleanflight/src/main/io/gps.c **** 
 109:../cleanflight/src/main/io/gps.c **** // GPS timeout for wrong baud rate/disconnection/etc in milliseconds (default 2.5second)
 110:../cleanflight/src/main/io/gps.c **** #define GPS_TIMEOUT (2500)
 111:../cleanflight/src/main/io/gps.c **** // How many entries in gpsInitData array below
 112:../cleanflight/src/main/io/gps.c **** #define GPS_INIT_ENTRIES (GPS_BAUDRATE_MAX + 1)
 113:../cleanflight/src/main/io/gps.c **** #define GPS_BAUDRATE_CHANGE_DELAY (200)
 114:../cleanflight/src/main/io/gps.c **** 
 115:../cleanflight/src/main/io/gps.c **** static serialPort_t *gpsPort;
 116:../cleanflight/src/main/io/gps.c **** 
 117:../cleanflight/src/main/io/gps.c **** typedef struct gpsInitData_s {
 118:../cleanflight/src/main/io/gps.c ****     uint8_t index;
 119:../cleanflight/src/main/io/gps.c ****     uint8_t baudrateIndex; // see baudRate_e
 120:../cleanflight/src/main/io/gps.c ****     const char *ubx;
 121:../cleanflight/src/main/io/gps.c ****     const char *mtk;
 122:../cleanflight/src/main/io/gps.c **** } gpsInitData_t;
 123:../cleanflight/src/main/io/gps.c **** 
 124:../cleanflight/src/main/io/gps.c **** // NMEA will cycle through these until valid data is received
 125:../cleanflight/src/main/io/gps.c **** static const gpsInitData_t gpsInitData[] = {
 126:../cleanflight/src/main/io/gps.c ****     { GPS_BAUDRATE_115200,  BAUD_115200, "$PUBX,41,1,0003,0001,115200,0*1E\r\n", "$PMTK251,115200*1
 127:../cleanflight/src/main/io/gps.c ****     { GPS_BAUDRATE_57600,    BAUD_57600, "$PUBX,41,1,0003,0001,57600,0*2D\r\n", "$PMTK251,57600*2C\
 128:../cleanflight/src/main/io/gps.c ****     { GPS_BAUDRATE_38400,    BAUD_38400, "$PUBX,41,1,0003,0001,38400,0*26\r\n", "$PMTK251,38400*27\
 129:../cleanflight/src/main/io/gps.c ****     { GPS_BAUDRATE_19200,    BAUD_19200, "$PUBX,41,1,0003,0001,19200,0*23\r\n", "$PMTK251,19200*22\
 130:../cleanflight/src/main/io/gps.c ****     // 9600 is not enough for 5Hz updates - leave for compatibility to dumb NMEA that only runs at 
 131:../cleanflight/src/main/io/gps.c ****     { GPS_BAUDRATE_9600,      BAUD_9600, "$PUBX,41,1,0003,0001,9600,0*16\r\n", "" }
 132:../cleanflight/src/main/io/gps.c **** };
 133:../cleanflight/src/main/io/gps.c **** 
 134:../cleanflight/src/main/io/gps.c **** #define GPS_INIT_DATA_ENTRY_COUNT (sizeof(gpsInitData) / sizeof(gpsInitData[0]))
 135:../cleanflight/src/main/io/gps.c **** 
 136:../cleanflight/src/main/io/gps.c **** #define DEFAULT_BAUD_RATE_INDEX 0
 137:../cleanflight/src/main/io/gps.c **** 
 138:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_UBLOX
 139:../cleanflight/src/main/io/gps.c **** static const uint8_t ubloxInit[] = {
 140:../cleanflight/src/main/io/gps.c ****     //Preprocessor Pedestrian Dynamic Platform Model Option
 141:../cleanflight/src/main/io/gps.c ****     #if defined(GPS_UBLOX_MODE_PEDESTRIAN)
 142:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x03, 0x03, 0x00,           // CFG-NAV5 - Set e
 143:../cleanflight/src/main/io/gps.c ****     0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00,           // Collected by res
 144:../cleanflight/src/main/io/gps.c ****     0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00,           // capturing the da
 145:../cleanflight/src/main/io/gps.c ****     0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xC2,
 146:../cleanflight/src/main/io/gps.c **** 
 147:../cleanflight/src/main/io/gps.c ****     //Preprocessor Airborne_1g Dynamic Platform Model Option
 148:../cleanflight/src/main/io/gps.c ****     #elif defined(GPS_UBLOX_MODE_AIRBORNE_1G)
 149:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00,           // CFG-NAV5 - Set e
 150:../cleanflight/src/main/io/gps.c ****     0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00,           // Collected by res
 151:../cleanflight/src/main/io/gps.c ****     0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00,           // <1g acceleration
 152:../cleanflight/src/main/io/gps.c ****     0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A, 0x28,
 153:../cleanflight/src/main/io/gps.c **** 
 154:../cleanflight/src/main/io/gps.c ****     //Default Airborne_4g Dynamic Platform Model
 155:../cleanflight/src/main/io/gps.c ****     #else
 156:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x08, 0x03, 0x00,           // CFG-NAV5 - Set e
 157:../cleanflight/src/main/io/gps.c ****     0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00,           // Collected by res
 158:../cleanflight/src/main/io/gps.c ****     0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00,           // <4g acceleration
 159:../cleanflight/src/main/io/gps.c ****     0x00, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x6C,
 160:../cleanflight/src/main/io/gps.c ****     #endif
 161:../cleanflight/src/main/io/gps.c **** 
 162:../cleanflight/src/main/io/gps.c ****     // DISABLE NMEA messages
 163:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x05, 0x00, 0xFF, 0x19,           // VGS: Course over
 164:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xFD, 0x15,           // GSV: GNSS Satell
 165:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x01, 0x00, 0xFB, 0x11,           // GLL: Latitude an
 166:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x00, 0x00, 0xFA, 0x0F,           // GGA: Global posi
 167:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x02, 0x00, 0xFC, 0x13,           // GSA: GNSS DOP an
 168:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0xF0, 0x04, 0x00, 0xFE, 0x17,           // RMC: Recommended
 169:../cleanflight/src/main/io/gps.c **** 
 170:../cleanflight/src/main/io/gps.c ****     // Enable UBLOX messages
 171:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x02, 0x01, 0x0E, 0x47,           // set POSLLH MSG r
 172:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x03, 0x01, 0x0F, 0x49,           // set STATUS MSG r
 173:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x06, 0x01, 0x12, 0x4F,           // set SOL MSG rate
 174:../cleanflight/src/main/io/gps.c ****     //0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x30, 0x01, 0x3C, 0xA3,           // set SVINFO MSG
 175:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x30, 0x05, 0x40, 0xA7,           // set SVINFO MSG r
 176:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x12, 0x01, 0x1E, 0x67,           // set VELNED MSG r
 177:../cleanflight/src/main/io/gps.c **** 
 178:../cleanflight/src/main/io/gps.c ****     0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A,            
 179:../cleanflight/src/main/io/gps.c **** };
 180:../cleanflight/src/main/io/gps.c **** 
 181:../cleanflight/src/main/io/gps.c **** // UBlox 6 Protocol documentation - GPS.G6-SW-10018-F
 182:../cleanflight/src/main/io/gps.c **** // SBAS Configuration Settings Desciption, Page 4/210
 183:../cleanflight/src/main/io/gps.c **** // 31.21 CFG-SBAS (0x06 0x16), Page 142/210
 184:../cleanflight/src/main/io/gps.c **** // A.10 SBAS Configuration (UBX-CFG-SBAS), Page 198/210 - GPS.G6-SW-10018-F
 185:../cleanflight/src/main/io/gps.c **** 
 186:../cleanflight/src/main/io/gps.c **** #define UBLOX_SBAS_PREFIX_LENGTH 10
 187:../cleanflight/src/main/io/gps.c **** 
 188:../cleanflight/src/main/io/gps.c **** static const uint8_t ubloxSbasPrefix[UBLOX_SBAS_PREFIX_LENGTH] = { 0xB5, 0x62, 0x06, 0x16, 0x08, 0x
 189:../cleanflight/src/main/io/gps.c **** 
 190:../cleanflight/src/main/io/gps.c **** #define UBLOX_SBAS_MESSAGE_LENGTH 6
 191:../cleanflight/src/main/io/gps.c **** typedef struct ubloxSbas_s {
 192:../cleanflight/src/main/io/gps.c ****     sbasMode_e mode;
 193:../cleanflight/src/main/io/gps.c ****     uint8_t message[UBLOX_SBAS_MESSAGE_LENGTH];
 194:../cleanflight/src/main/io/gps.c **** } ubloxSbas_t;
 195:../cleanflight/src/main/io/gps.c **** 
 196:../cleanflight/src/main/io/gps.c **** 
 197:../cleanflight/src/main/io/gps.c **** 
 198:../cleanflight/src/main/io/gps.c **** // Note: these must be defined in the same order is sbasMode_e since no lookup table is used.
 199:../cleanflight/src/main/io/gps.c **** static const ubloxSbas_t ubloxSbas[] = {
 200:../cleanflight/src/main/io/gps.c ****     // NOTE this could be optimized to save a few bytes of flash space since the same prefix is use
 201:../cleanflight/src/main/io/gps.c ****     { SBAS_AUTO,  { 0x00, 0x00, 0x00, 0x00, 0x31, 0xE5}},
 202:../cleanflight/src/main/io/gps.c ****     { SBAS_EGNOS, { 0x51, 0x08, 0x00, 0x00, 0x8A, 0x41}},
 203:../cleanflight/src/main/io/gps.c ****     { SBAS_WAAS,  { 0x04, 0xE0, 0x04, 0x00, 0x19, 0x9D}},
 204:../cleanflight/src/main/io/gps.c ****     { SBAS_MSAS,  { 0x00, 0x02, 0x02, 0x00, 0x35, 0xEF}},
 205:../cleanflight/src/main/io/gps.c ****     { SBAS_GAGAN, { 0x80, 0x01, 0x00, 0x00, 0xB2, 0xE8}}
 206:../cleanflight/src/main/io/gps.c **** };
 207:../cleanflight/src/main/io/gps.c **** 
 208:../cleanflight/src/main/io/gps.c **** // Remove QZSS and add Galileo (only 3 GNSS systems supported simultaneously)
 209:../cleanflight/src/main/io/gps.c **** // Frame captured from uCenter
 210:../cleanflight/src/main/io/gps.c **** static const uint8_t ubloxGalileoInit[] = {
 211:../cleanflight/src/main/io/gps.c ****         0xB5, 0x62, 0x06, 0x3E, 0x3C,                       // UBX-CGF-GNSS
 212:../cleanflight/src/main/io/gps.c ****         0x00, 0x00, 0x20, 0x20, 0x07,                       // GNSS
 213:../cleanflight/src/main/io/gps.c ****         0x00, 0x08, 0x10, 0x00, 0x01, 0x00, 0x01, 0x01,     // GPS
 214:../cleanflight/src/main/io/gps.c ****         0x01, 0x01, 0x03, 0x00, 0x01, 0x00, 0x01, 0x01,     // SBAS
 215:../cleanflight/src/main/io/gps.c ****         0x02, 0x04, 0x08, 0x00, 0x01, 0x00, 0x01, 0x01,     // Galileo
 216:../cleanflight/src/main/io/gps.c ****         0x03, 0x08, 0x10, 0x00, 0x00, 0x00, 0x01, 0x01,     // BeiDou
 217:../cleanflight/src/main/io/gps.c ****         0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x03,     // IMES
 218:../cleanflight/src/main/io/gps.c ****         0x05, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x05,     // QZSS
 219:../cleanflight/src/main/io/gps.c ****         0x06, 0x08, 0x0E, 0x00, 0x01, 0x00, 0x01, 0x01,     // GLONASS
 220:../cleanflight/src/main/io/gps.c ****         0x55, 0x47
 221:../cleanflight/src/main/io/gps.c **** };
 222:../cleanflight/src/main/io/gps.c **** #endif // USE_GPS_UBLOX
 223:../cleanflight/src/main/io/gps.c **** 
 224:../cleanflight/src/main/io/gps.c **** typedef enum {
 225:../cleanflight/src/main/io/gps.c ****     GPS_UNKNOWN,
 226:../cleanflight/src/main/io/gps.c ****     GPS_INITIALIZING,
 227:../cleanflight/src/main/io/gps.c ****     GPS_CHANGE_BAUD,
 228:../cleanflight/src/main/io/gps.c ****     GPS_CONFIGURE,
 229:../cleanflight/src/main/io/gps.c ****     GPS_RECEIVING_DATA,
 230:../cleanflight/src/main/io/gps.c ****     GPS_LOST_COMMUNICATION
 231:../cleanflight/src/main/io/gps.c **** } gpsState_e;
 232:../cleanflight/src/main/io/gps.c **** 
 233:../cleanflight/src/main/io/gps.c **** gpsData_t gpsData;
 234:../cleanflight/src/main/io/gps.c **** 
 235:../cleanflight/src/main/io/gps.c **** 
 236:../cleanflight/src/main/io/gps.c **** PG_REGISTER_WITH_RESET_TEMPLATE(gpsConfig_t, gpsConfig, PG_GPS_CONFIG, 0);
 237:../cleanflight/src/main/io/gps.c **** 
 238:../cleanflight/src/main/io/gps.c **** PG_RESET_TEMPLATE(gpsConfig_t, gpsConfig,
 239:../cleanflight/src/main/io/gps.c ****     .provider = GPS_NMEA,
 240:../cleanflight/src/main/io/gps.c ****     .sbasMode = SBAS_AUTO,
 241:../cleanflight/src/main/io/gps.c ****     .autoConfig = GPS_AUTOCONFIG_ON,
 242:../cleanflight/src/main/io/gps.c ****     .autoBaud = GPS_AUTOBAUD_OFF,
 243:../cleanflight/src/main/io/gps.c ****     .gps_ublox_use_galileo = false
 244:../cleanflight/src/main/io/gps.c **** );
 245:../cleanflight/src/main/io/gps.c **** 
 246:../cleanflight/src/main/io/gps.c **** static void shiftPacketLog(void)
 247:../cleanflight/src/main/io/gps.c **** {
 558              	 .loc 2 247 0
 559              	 .cfi_startproc
 560              	 
 561              	 
 562              	 
 563 0000 80B4     	 push {r7}
 564              	.LCFI4:
 565              	 .cfi_def_cfa_offset 4
 566              	 .cfi_offset 7,-4
 567 0002 83B0     	 sub sp,sp,#12
 568              	.LCFI5:
 569              	 .cfi_def_cfa_offset 16
 570 0004 00AF     	 add r7,sp,#0
 571              	.LCFI6:
 572              	 .cfi_def_cfa_register 7
 248:../cleanflight/src/main/io/gps.c ****     uint32_t i;
 249:../cleanflight/src/main/io/gps.c **** 
 250:../cleanflight/src/main/io/gps.c ****     for (i = ARRAYLEN(gpsPacketLog) - 1; i > 0 ; i--) {
 573              	 .loc 2 250 0
 574 0006 1423     	 movs r3,#20
 575 0008 7B60     	 str r3,[r7,#4]
 576 000a 0BE0     	 b .L6
 577              	.L7:
 251:../cleanflight/src/main/io/gps.c ****         gpsPacketLog[i] = gpsPacketLog[i-1];
 578              	 .loc 2 251 0 discriminator 3
 579 000c 7B68     	 ldr r3,[r7,#4]
 580 000e 013B     	 subs r3,r3,#1
 581 0010 084A     	 ldr r2,.L8
 582 0012 D15C     	 ldrb r1,[r2,r3]
 583 0014 074A     	 ldr r2,.L8
 584 0016 7B68     	 ldr r3,[r7,#4]
 585 0018 1344     	 add r3,r3,r2
 586 001a 0A46     	 mov r2,r1
 587 001c 1A70     	 strb r2,[r3]
 250:../cleanflight/src/main/io/gps.c ****         gpsPacketLog[i] = gpsPacketLog[i-1];
 588              	 .loc 2 250 0 discriminator 3
 589 001e 7B68     	 ldr r3,[r7,#4]
 590 0020 013B     	 subs r3,r3,#1
 591 0022 7B60     	 str r3,[r7,#4]
 592              	.L6:
 250:../cleanflight/src/main/io/gps.c ****         gpsPacketLog[i] = gpsPacketLog[i-1];
 593              	 .loc 2 250 0 is_stmt 0 discriminator 1
 594 0024 7B68     	 ldr r3,[r7,#4]
 595 0026 002B     	 cmp r3,#0
 596 0028 F0D1     	 bne .L7
 252:../cleanflight/src/main/io/gps.c ****     }
 253:../cleanflight/src/main/io/gps.c **** }
 597              	 .loc 2 253 0 is_stmt 1
 598 002a 0C37     	 adds r7,r7,#12
 599              	.LCFI7:
 600              	 .cfi_def_cfa_offset 4
 601 002c BD46     	 mov sp,r7
 602              	.LCFI8:
 603              	 .cfi_def_cfa_register 13
 604              	 
 605 002e 5DF8047B 	 ldr r7,[sp],#4
 606              	.LCFI9:
 607              	 .cfi_restore 7
 608              	 .cfi_def_cfa_offset 0
 609 0032 7047     	 bx lr
 610              	.L9:
 611              	 .align 2
 612              	.L8:
 613 0034 00000000 	 .word gpsPacketLog
 614              	 .cfi_endproc
 615              	.LFE552:
 617              	 .section .text.gpsSetState,"ax",%progbits
 618              	 .align 2
 619              	 .thumb
 620              	 .thumb_func
 622              	gpsSetState:
 623              	.LFB553:
 254:../cleanflight/src/main/io/gps.c **** 
 255:../cleanflight/src/main/io/gps.c **** static void gpsNewData(uint16_t c);
 256:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_NMEA
 257:../cleanflight/src/main/io/gps.c **** static bool gpsNewFrameNMEA(char c);
 258:../cleanflight/src/main/io/gps.c **** #endif
 259:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_UBLOX
 260:../cleanflight/src/main/io/gps.c **** static bool gpsNewFrameUBLOX(uint8_t data);
 261:../cleanflight/src/main/io/gps.c **** #endif
 262:../cleanflight/src/main/io/gps.c **** 
 263:../cleanflight/src/main/io/gps.c **** static void gpsSetState(gpsState_e state)
 264:../cleanflight/src/main/io/gps.c **** {
 624              	 .loc 2 264 0
 625              	 .cfi_startproc
 626              	 
 627              	 
 628 0000 80B5     	 push {r7,lr}
 629              	.LCFI10:
 630              	 .cfi_def_cfa_offset 8
 631              	 .cfi_offset 7,-8
 632              	 .cfi_offset 14,-4
 633 0002 82B0     	 sub sp,sp,#8
 634              	.LCFI11:
 635              	 .cfi_def_cfa_offset 16
 636 0004 00AF     	 add r7,sp,#0
 637              	.LCFI12:
 638              	 .cfi_def_cfa_register 7
 639 0006 0346     	 mov r3,r0
 640 0008 FB71     	 strb r3,[r7,#7]
 265:../cleanflight/src/main/io/gps.c ****     gpsData.state = state;
 641              	 .loc 2 265 0
 642 000a 0B4A     	 ldr r2,.L11
 643 000c FB79     	 ldrb r3,[r7,#7]
 644 000e 1376     	 strb r3,[r2,#24]
 266:../cleanflight/src/main/io/gps.c ****     gpsData.state_position = 0;
 645              	 .loc 2 266 0
 646 0010 094B     	 ldr r3,.L11
 647 0012 0022     	 movs r2,#0
 648 0014 1A74     	 strb r2,[r3,#16]
 649 0016 0022     	 movs r2,#0
 650 0018 5A74     	 strb r2,[r3,#17]
 651 001a 0022     	 movs r2,#0
 652 001c 9A74     	 strb r2,[r3,#18]
 653 001e 0022     	 movs r2,#0
 654 0020 DA74     	 strb r2,[r3,#19]
 267:../cleanflight/src/main/io/gps.c ****     gpsData.state_ts = millis();
 655              	 .loc 2 267 0
 656 0022 FFF7FEFF 	 bl millis
 657 0026 0246     	 mov r2,r0
 658 0028 034B     	 ldr r3,.L11
 659 002a 5A61     	 str r2,[r3,#20]
 268:../cleanflight/src/main/io/gps.c ****     gpsData.messageState = GPS_MESSAGE_STATE_IDLE;
 660              	 .loc 2 268 0
 661 002c 024B     	 ldr r3,.L11
 662 002e 0022     	 movs r2,#0
 663 0030 9A76     	 strb r2,[r3,#26]
 269:../cleanflight/src/main/io/gps.c **** }
 664              	 .loc 2 269 0
 665 0032 0837     	 adds r7,r7,#8
 666              	.LCFI13:
 667              	 .cfi_def_cfa_offset 8
 668 0034 BD46     	 mov sp,r7
 669              	.LCFI14:
 670              	 .cfi_def_cfa_register 13
 671              	 
 672 0036 80BD     	 pop {r7,pc}
 673              	.L12:
 674              	 .align 2
 675              	.L11:
 676 0038 00000000 	 .word gpsData
 677              	 .cfi_endproc
 678              	.LFE553:
 680              	 .section .text.gpsInit,"ax",%progbits
 681              	 .align 2
 682              	 .global gpsInit
 683              	 .thumb
 684              	 .thumb_func
 686              	gpsInit:
 687              	.LFB554:
 270:../cleanflight/src/main/io/gps.c **** 
 271:../cleanflight/src/main/io/gps.c **** void gpsInit(void)
 272:../cleanflight/src/main/io/gps.c **** {
 688              	 .loc 2 272 0
 689              	 .cfi_startproc
 690              	 
 691              	 
 692 0000 80B5     	 push {r7,lr}
 693              	.LCFI15:
 694              	 .cfi_def_cfa_offset 8
 695              	 .cfi_offset 7,-8
 696              	 .cfi_offset 14,-4
 697 0002 86B0     	 sub sp,sp,#24
 698              	.LCFI16:
 699              	 .cfi_def_cfa_offset 32
 700 0004 04AF     	 add r7,sp,#16
 701              	.LCFI17:
 702              	 .cfi_def_cfa 7,16
 273:../cleanflight/src/main/io/gps.c ****     gpsData.baudrateIndex = 0;
 703              	 .loc 2 273 0
 704 0006 394B     	 ldr r3,.L20
 705 0008 0022     	 movs r2,#0
 706 000a 5A76     	 strb r2,[r3,#25]
 274:../cleanflight/src/main/io/gps.c ****     gpsData.errors = 0;
 707              	 .loc 2 274 0
 708 000c 374B     	 ldr r3,.L20
 709 000e 0022     	 movs r2,#0
 710 0010 1A70     	 strb r2,[r3]
 711 0012 0022     	 movs r2,#0
 712 0014 5A70     	 strb r2,[r3,#1]
 713 0016 0022     	 movs r2,#0
 714 0018 9A70     	 strb r2,[r3,#2]
 715 001a 0022     	 movs r2,#0
 716 001c DA70     	 strb r2,[r3,#3]
 275:../cleanflight/src/main/io/gps.c ****     gpsData.timeouts = 0;
 717              	 .loc 2 275 0
 718 001e 334B     	 ldr r3,.L20
 719 0020 0022     	 movs r2,#0
 720 0022 1A71     	 strb r2,[r3,#4]
 721 0024 0022     	 movs r2,#0
 722 0026 5A71     	 strb r2,[r3,#5]
 723 0028 0022     	 movs r2,#0
 724 002a 9A71     	 strb r2,[r3,#6]
 725 002c 0022     	 movs r2,#0
 726 002e DA71     	 strb r2,[r3,#7]
 276:../cleanflight/src/main/io/gps.c **** 
 277:../cleanflight/src/main/io/gps.c ****     memset(gpsPacketLog, 0x00, sizeof(gpsPacketLog));
 727              	 .loc 2 277 0
 728 0030 2F48     	 ldr r0,.L20+4
 729 0032 0021     	 movs r1,#0
 730 0034 1522     	 movs r2,#21
 731 0036 FFF7FEFF 	 bl memset
 278:../cleanflight/src/main/io/gps.c **** 
 279:../cleanflight/src/main/io/gps.c ****     // init gpsData structure. if we're not actually enabled, don't bother doing anything else
 280:../cleanflight/src/main/io/gps.c ****     gpsSetState(GPS_UNKNOWN);
 732              	 .loc 2 280 0
 733 003a 0020     	 movs r0,#0
 734 003c FFF7FEFF 	 bl gpsSetState
 281:../cleanflight/src/main/io/gps.c **** 
 282:../cleanflight/src/main/io/gps.c ****     gpsData.lastMessage = millis();
 735              	 .loc 2 282 0
 736 0040 FFF7FEFF 	 bl millis
 737 0044 0246     	 mov r2,r0
 738 0046 294B     	 ldr r3,.L20
 739 0048 9A60     	 str r2,[r3,#8]
 283:../cleanflight/src/main/io/gps.c **** 
 284:../cleanflight/src/main/io/gps.c ****     serialPortConfig_t *gpsPortConfig = findSerialPortConfig(FUNCTION_GPS);
 740              	 .loc 2 284 0
 741 004a 0220     	 movs r0,#2
 742 004c FFF7FEFF 	 bl findSerialPortConfig
 743 0050 7860     	 str r0,[r7,#4]
 285:../cleanflight/src/main/io/gps.c ****     if (!gpsPortConfig) {
 744              	 .loc 2 285 0
 745 0052 7B68     	 ldr r3,[r7,#4]
 746 0054 002B     	 cmp r3,#0
 747 0056 00D1     	 bne .L14
 286:../cleanflight/src/main/io/gps.c ****         return;
 748              	 .loc 2 286 0
 749 0058 45E0     	 b .L13
 750              	.L14:
 287:../cleanflight/src/main/io/gps.c ****     }
 288:../cleanflight/src/main/io/gps.c **** 
 289:../cleanflight/src/main/io/gps.c ****     while (gpsInitData[gpsData.baudrateIndex].baudrateIndex != gpsPortConfig->gps_baudrateIndex) {
 751              	 .loc 2 289 0
 752 005a 0DE0     	 b .L16
 753              	.L18:
 290:../cleanflight/src/main/io/gps.c ****         gpsData.baudrateIndex++;
 754              	 .loc 2 290 0
 755 005c 234B     	 ldr r3,.L20
 756 005e 5B7E     	 ldrb r3,[r3,#25]
 757 0060 0133     	 adds r3,r3,#1
 758 0062 DAB2     	 uxtb r2,r3
 759 0064 214B     	 ldr r3,.L20
 760 0066 5A76     	 strb r2,[r3,#25]
 291:../cleanflight/src/main/io/gps.c ****         if (gpsData.baudrateIndex >= GPS_INIT_DATA_ENTRY_COUNT) {
 761              	 .loc 2 291 0
 762 0068 204B     	 ldr r3,.L20
 763 006a 5B7E     	 ldrb r3,[r3,#25]
 764 006c 042B     	 cmp r3,#4
 765 006e 03D9     	 bls .L16
 292:../cleanflight/src/main/io/gps.c ****             gpsData.baudrateIndex = DEFAULT_BAUD_RATE_INDEX;
 766              	 .loc 2 292 0
 767 0070 1E4B     	 ldr r3,.L20
 768 0072 0022     	 movs r2,#0
 769 0074 5A76     	 strb r2,[r3,#25]
 293:../cleanflight/src/main/io/gps.c ****             break;
 770              	 .loc 2 293 0
 771 0076 0DE0     	 b .L17
 772              	.L16:
 289:../cleanflight/src/main/io/gps.c ****         gpsData.baudrateIndex++;
 773              	 .loc 2 289 0
 774 0078 1C4B     	 ldr r3,.L20
 775 007a 5B7E     	 ldrb r3,[r3,#25]
 776 007c 1946     	 mov r1,r3
 777 007e 1D4A     	 ldr r2,.L20+8
 778 0080 0B46     	 mov r3,r1
 779 0082 9B00     	 lsls r3,r3,#2
 780 0084 0B44     	 add r3,r3,r1
 781 0086 5B00     	 lsls r3,r3,#1
 782 0088 1344     	 add r3,r3,r2
 783 008a 5A78     	 ldrb r2,[r3,#1]
 784 008c 7B68     	 ldr r3,[r7,#4]
 785 008e 1B79     	 ldrb r3,[r3,#4]
 786 0090 9A42     	 cmp r2,r3
 787 0092 E3D1     	 bne .L18
 788              	.L17:
 294:../cleanflight/src/main/io/gps.c ****         }
 295:../cleanflight/src/main/io/gps.c ****     }
 296:../cleanflight/src/main/io/gps.c **** 
 297:../cleanflight/src/main/io/gps.c ****     portMode_e mode = MODE_RXTX;
 789              	 .loc 2 297 0
 790 0094 0323     	 movs r3,#3
 791 0096 FB70     	 strb r3,[r7,#3]
 298:../cleanflight/src/main/io/gps.c **** #if defined(GPS_NMEA_TX_ONLY)
 299:../cleanflight/src/main/io/gps.c ****     if (gpsConfig()->provider == GPS_NMEA) {
 300:../cleanflight/src/main/io/gps.c ****         mode &= ~MODE_TX;
 301:../cleanflight/src/main/io/gps.c ****     }
 302:../cleanflight/src/main/io/gps.c **** #endif
 303:../cleanflight/src/main/io/gps.c **** 
 304:../cleanflight/src/main/io/gps.c ****     // no callback - buffer will be consumed in gpsUpdate()
 305:../cleanflight/src/main/io/gps.c ****     gpsPort = openSerialPort(gpsPortConfig->identifier, FUNCTION_GPS, NULL, NULL, baudRates[gpsInit
 792              	 .loc 2 305 0
 793 0098 7B68     	 ldr r3,[r7,#4]
 794 009a 9878     	 ldrb r0,[r3,#2]
 795 009c 134B     	 ldr r3,.L20
 796 009e 5B7E     	 ldrb r3,[r3,#25]
 797 00a0 1946     	 mov r1,r3
 798 00a2 144A     	 ldr r2,.L20+8
 799 00a4 0B46     	 mov r3,r1
 800 00a6 9B00     	 lsls r3,r3,#2
 801 00a8 0B44     	 add r3,r3,r1
 802 00aa 5B00     	 lsls r3,r3,#1
 803 00ac 1344     	 add r3,r3,r2
 804 00ae 5B78     	 ldrb r3,[r3,#1]
 805 00b0 1A46     	 mov r2,r3
 806 00b2 114B     	 ldr r3,.L20+12
 807 00b4 53F82230 	 ldr r3,[r3,r2,lsl#2]
 808 00b8 42B2     	 sxtb r2,r0
 809 00ba 0093     	 str r3,[sp]
 810 00bc FB78     	 ldrb r3,[r7,#3]
 811 00be 0193     	 str r3,[sp,#4]
 812 00c0 0023     	 movs r3,#0
 813 00c2 0293     	 str r3,[sp,#8]
 814 00c4 1046     	 mov r0,r2
 815 00c6 0221     	 movs r1,#2
 816 00c8 0022     	 movs r2,#0
 817 00ca 0023     	 movs r3,#0
 818 00cc FFF7FEFF 	 bl openSerialPort
 819 00d0 0246     	 mov r2,r0
 820 00d2 0A4B     	 ldr r3,.L20+16
 821 00d4 1A60     	 str r2,[r3]
 306:../cleanflight/src/main/io/gps.c ****     if (!gpsPort) {
 822              	 .loc 2 306 0
 823 00d6 094B     	 ldr r3,.L20+16
 824 00d8 1B68     	 ldr r3,[r3]
 825 00da 002B     	 cmp r3,#0
 826 00dc 00D1     	 bne .L19
 307:../cleanflight/src/main/io/gps.c ****         return;
 827              	 .loc 2 307 0 discriminator 2
 828 00de 02E0     	 b .L13
 829              	.L19:
 308:../cleanflight/src/main/io/gps.c ****     }
 309:../cleanflight/src/main/io/gps.c **** 
 310:../cleanflight/src/main/io/gps.c ****     // signal GPS "thread" to initialize when it gets to it
 311:../cleanflight/src/main/io/gps.c ****     gpsSetState(GPS_INITIALIZING);
 830              	 .loc 2 311 0
 831 00e0 0120     	 movs r0,#1
 832 00e2 FFF7FEFF 	 bl gpsSetState
 833              	.L13:
 312:../cleanflight/src/main/io/gps.c **** }
 834              	 .loc 2 312 0
 835 00e6 0837     	 adds r7,r7,#8
 836              	.LCFI18:
 837              	 .cfi_def_cfa_offset 8
 838 00e8 BD46     	 mov sp,r7
 839              	.LCFI19:
 840              	 .cfi_def_cfa_register 13
 841              	 
 842 00ea 80BD     	 pop {r7,pc}
 843              	.L21:
 844              	 .align 2
 845              	.L20:
 846 00ec 00000000 	 .word gpsData
 847 00f0 00000000 	 .word gpsPacketLog
 848 00f4 00000000 	 .word gpsInitData
 849 00f8 00000000 	 .word baudRates
 850 00fc 00000000 	 .word gpsPort
 851              	 .cfi_endproc
 852              	.LFE554:
 854              	 .section .rodata
 855 0109 000000   	 .align 2
 856              	.LC10:
 857 010c 24505352 	 .ascii "$PSRF100,1,115200,8,1,0*05\015\012\000"
 857      46313030 
 857      2C312C31 
 857      31353230 
 857      302C382C 
 858 0129 000000   	 .align 2
 859              	.LC11:
 860 012c 24505352 	 .ascii "$PSRF103,00,6,00,0*23\015\012\000"
 860      46313033 
 860      2C30302C 
 860      362C3030 
 860      2C302A32 
 861              	 .section .text.gpsInitNmea,"ax",%progbits
 862              	 .align 2
 863              	 .global gpsInitNmea
 864              	 .thumb
 865              	 .thumb_func
 867              	gpsInitNmea:
 868              	.LFB555:
 313:../cleanflight/src/main/io/gps.c **** 
 314:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_NMEA
 315:../cleanflight/src/main/io/gps.c **** void gpsInitNmea(void)
 316:../cleanflight/src/main/io/gps.c **** {
 869              	 .loc 2 316 0
 870              	 .cfi_startproc
 871              	 
 872              	 
 873 0000 80B5     	 push {r7,lr}
 874              	.LCFI20:
 875              	 .cfi_def_cfa_offset 8
 876              	 .cfi_offset 7,-8
 877              	 .cfi_offset 14,-4
 878 0002 82B0     	 sub sp,sp,#8
 879              	.LCFI21:
 880              	 .cfi_def_cfa_offset 16
 881 0004 00AF     	 add r7,sp,#0
 882              	.LCFI22:
 883              	 .cfi_def_cfa_register 7
 317:../cleanflight/src/main/io/gps.c **** #if !defined(GPS_NMEA_TX_ONLY)
 318:../cleanflight/src/main/io/gps.c ****     uint32_t now;
 319:../cleanflight/src/main/io/gps.c **** #endif
 320:../cleanflight/src/main/io/gps.c ****     switch (gpsData.state) {
 884              	 .loc 2 320 0
 885 0006 3E4B     	 ldr r3,.L34
 886 0008 1B7E     	 ldrb r3,[r3,#24]
 887 000a 012B     	 cmp r3,#1
 888 000c 02D0     	 beq .L24
 889 000e 022B     	 cmp r3,#2
 890 0010 34D0     	 beq .L25
 891 0012 72E0     	 b .L22
 892              	.L24:
 321:../cleanflight/src/main/io/gps.c ****         case GPS_INITIALIZING:
 322:../cleanflight/src/main/io/gps.c **** #if !defined(GPS_NMEA_TX_ONLY)
 323:../cleanflight/src/main/io/gps.c ****            now = millis();
 893              	 .loc 2 323 0
 894 0014 FFF7FEFF 	 bl millis
 895 0018 7860     	 str r0,[r7,#4]
 324:../cleanflight/src/main/io/gps.c ****            if (now - gpsData.state_ts < 1000) {
 896              	 .loc 2 324 0
 897 001a 394B     	 ldr r3,.L34
 898 001c 5B69     	 ldr r3,[r3,#20]
 899 001e 7A68     	 ldr r2,[r7,#4]
 900 0020 D31A     	 subs r3,r2,r3
 901 0022 B3F57A7F 	 cmp r3,#1000
 902 0026 00D2     	 bcs .L26
 325:../cleanflight/src/main/io/gps.c ****                return;
 903              	 .loc 2 325 0
 904 0028 67E0     	 b .L22
 905              	.L26:
 326:../cleanflight/src/main/io/gps.c ****            }
 327:../cleanflight/src/main/io/gps.c ****            gpsData.state_ts = now;
 906              	 .loc 2 327 0
 907 002a 354A     	 ldr r2,.L34
 908 002c 7B68     	 ldr r3,[r7,#4]
 909 002e 5361     	 str r3,[r2,#20]
 328:../cleanflight/src/main/io/gps.c ****            if (gpsData.state_position < 1) {
 910              	 .loc 2 328 0
 911 0030 334B     	 ldr r3,.L34
 912 0032 1B69     	 ldr r3,[r3,#16]
 913 0034 002B     	 cmp r3,#0
 914 0036 0CD1     	 bne .L27
 329:../cleanflight/src/main/io/gps.c ****                serialSetBaudRate(gpsPort, 4800);
 915              	 .loc 2 329 0
 916 0038 324B     	 ldr r3,.L34+4
 917 003a 1B68     	 ldr r3,[r3]
 918 003c 1846     	 mov r0,r3
 919 003e 4FF49651 	 mov r1,#4800
 920 0042 FFF7FEFF 	 bl serialSetBaudRate
 330:../cleanflight/src/main/io/gps.c ****                gpsData.state_position++;
 921              	 .loc 2 330 0
 922 0046 2E4B     	 ldr r3,.L34
 923 0048 1B69     	 ldr r3,[r3,#16]
 924 004a 0133     	 adds r3,r3,#1
 925 004c 2C4A     	 ldr r2,.L34
 926 004e 1361     	 str r3,[r2,#16]
 927 0050 13E0     	 b .L28
 928              	.L27:
 331:../cleanflight/src/main/io/gps.c ****            } else if (gpsData.state_position < 2) {
 929              	 .loc 2 331 0
 930 0052 2B4B     	 ldr r3,.L34
 931 0054 1B69     	 ldr r3,[r3,#16]
 932 0056 012B     	 cmp r3,#1
 933 0058 0BD8     	 bhi .L29
 332:../cleanflight/src/main/io/gps.c ****                // print our FIXED init string for the baudrate we want to be at
 333:../cleanflight/src/main/io/gps.c ****                serialPrint(gpsPort, "$PSRF100,1,115200,8,1,0*05\r\n");
 934              	 .loc 2 333 0
 935 005a 2A4B     	 ldr r3,.L34+4
 936 005c 1B68     	 ldr r3,[r3]
 937 005e 1846     	 mov r0,r3
 938 0060 2949     	 ldr r1,.L34+8
 939 0062 FFF7FEFF 	 bl serialPrint
 334:../cleanflight/src/main/io/gps.c ****                gpsData.state_position++;
 940              	 .loc 2 334 0
 941 0066 264B     	 ldr r3,.L34
 942 0068 1B69     	 ldr r3,[r3,#16]
 943 006a 0133     	 adds r3,r3,#1
 944 006c 244A     	 ldr r2,.L34
 945 006e 1361     	 str r3,[r2,#16]
 946 0070 03E0     	 b .L28
 947              	.L29:
 335:../cleanflight/src/main/io/gps.c ****            } else {
 336:../cleanflight/src/main/io/gps.c ****                // we're now (hopefully) at the correct rate, next state will switch to it
 337:../cleanflight/src/main/io/gps.c ****                gpsSetState(GPS_CHANGE_BAUD);
 948              	 .loc 2 337 0
 949 0072 0220     	 movs r0,#2
 950 0074 FFF7FEFF 	 bl gpsSetState
 338:../cleanflight/src/main/io/gps.c ****            }
 339:../cleanflight/src/main/io/gps.c ****            break;
 951              	 .loc 2 339 0
 952 0078 3FE0     	 b .L22
 953              	.L28:
 954              	 .loc 2 339 0 is_stmt 0 discriminator 2
 955 007a 3EE0     	 b .L22
 956              	.L25:
 340:../cleanflight/src/main/io/gps.c **** #endif
 341:../cleanflight/src/main/io/gps.c ****         case GPS_CHANGE_BAUD:
 342:../cleanflight/src/main/io/gps.c **** #if !defined(GPS_NMEA_TX_ONLY)
 343:../cleanflight/src/main/io/gps.c ****            now = millis();
 957              	 .loc 2 343 0 is_stmt 1
 958 007c FFF7FEFF 	 bl millis
 959 0080 7860     	 str r0,[r7,#4]
 344:../cleanflight/src/main/io/gps.c ****            if (now - gpsData.state_ts < 1000) {
 960              	 .loc 2 344 0
 961 0082 1F4B     	 ldr r3,.L34
 962 0084 5B69     	 ldr r3,[r3,#20]
 963 0086 7A68     	 ldr r2,[r7,#4]
 964 0088 D31A     	 subs r3,r2,r3
 965 008a B3F57A7F 	 cmp r3,#1000
 966 008e 00D2     	 bcs .L30
 345:../cleanflight/src/main/io/gps.c ****                return;
 967              	 .loc 2 345 0 discriminator 3
 968 0090 33E0     	 b .L22
 969              	.L30:
 346:../cleanflight/src/main/io/gps.c ****            }
 347:../cleanflight/src/main/io/gps.c ****            gpsData.state_ts = now;
 970              	 .loc 2 347 0
 971 0092 1B4A     	 ldr r2,.L34
 972 0094 7B68     	 ldr r3,[r7,#4]
 973 0096 5361     	 str r3,[r2,#20]
 348:../cleanflight/src/main/io/gps.c ****            if (gpsData.state_position < 1) {
 974              	 .loc 2 348 0
 975 0098 194B     	 ldr r3,.L34
 976 009a 1B69     	 ldr r3,[r3,#16]
 977 009c 002B     	 cmp r3,#0
 978 009e 18D1     	 bne .L31
 349:../cleanflight/src/main/io/gps.c ****                serialSetBaudRate(gpsPort, baudRates[gpsInitData[gpsData.baudrateIndex].baudrateInde
 979              	 .loc 2 349 0
 980 00a0 184B     	 ldr r3,.L34+4
 981 00a2 1868     	 ldr r0,[r3]
 982 00a4 164B     	 ldr r3,.L34
 983 00a6 5B7E     	 ldrb r3,[r3,#25]
 984 00a8 1946     	 mov r1,r3
 985 00aa 184A     	 ldr r2,.L34+12
 986 00ac 0B46     	 mov r3,r1
 987 00ae 9B00     	 lsls r3,r3,#2
 988 00b0 0B44     	 add r3,r3,r1
 989 00b2 5B00     	 lsls r3,r3,#1
 990 00b4 1344     	 add r3,r3,r2
 991 00b6 5B78     	 ldrb r3,[r3,#1]
 992 00b8 1A46     	 mov r2,r3
 993 00ba 154B     	 ldr r3,.L34+16
 994 00bc 53F82230 	 ldr r3,[r3,r2,lsl#2]
 995 00c0 1946     	 mov r1,r3
 996 00c2 FFF7FEFF 	 bl serialSetBaudRate
 350:../cleanflight/src/main/io/gps.c ****                gpsData.state_position++;
 997              	 .loc 2 350 0
 998 00c6 0E4B     	 ldr r3,.L34
 999 00c8 1B69     	 ldr r3,[r3,#16]
 1000 00ca 0133     	 adds r3,r3,#1
 1001 00cc 0C4A     	 ldr r2,.L34
 1002 00ce 1361     	 str r3,[r2,#16]
 1003 00d0 12E0     	 b .L32
 1004              	.L31:
 351:../cleanflight/src/main/io/gps.c ****            } else if (gpsData.state_position < 2) {
 1005              	 .loc 2 351 0
 1006 00d2 0B4B     	 ldr r3,.L34
 1007 00d4 1B69     	 ldr r3,[r3,#16]
 1008 00d6 012B     	 cmp r3,#1
 1009 00d8 0BD8     	 bhi .L33
 352:../cleanflight/src/main/io/gps.c ****                serialPrint(gpsPort, "$PSRF103,00,6,00,0*23\r\n");
 1010              	 .loc 2 352 0
 1011 00da 0A4B     	 ldr r3,.L34+4
 1012 00dc 1B68     	 ldr r3,[r3]
 1013 00de 1846     	 mov r0,r3
 1014 00e0 0C49     	 ldr r1,.L34+20
 1015 00e2 FFF7FEFF 	 bl serialPrint
 353:../cleanflight/src/main/io/gps.c ****                gpsData.state_position++;
 1016              	 .loc 2 353 0
 1017 00e6 064B     	 ldr r3,.L34
 1018 00e8 1B69     	 ldr r3,[r3,#16]
 1019 00ea 0133     	 adds r3,r3,#1
 1020 00ec 044A     	 ldr r2,.L34
 1021 00ee 1361     	 str r3,[r2,#16]
 1022 00f0 02E0     	 b .L32
 1023              	.L33:
 354:../cleanflight/src/main/io/gps.c ****            } else
 355:../cleanflight/src/main/io/gps.c **** #else
 356:../cleanflight/src/main/io/gps.c ****            {
 357:../cleanflight/src/main/io/gps.c ****                serialSetBaudRate(gpsPort, baudRates[gpsInitData[gpsData.baudrateIndex].baudrateInde
 358:../cleanflight/src/main/io/gps.c ****            }
 359:../cleanflight/src/main/io/gps.c **** #endif
 360:../cleanflight/src/main/io/gps.c ****                gpsSetState(GPS_RECEIVING_DATA);
 1024              	 .loc 2 360 0
 1025 00f2 0420     	 movs r0,#4
 1026 00f4 FFF7FEFF 	 bl gpsSetState
 1027              	.L32:
 361:../cleanflight/src/main/io/gps.c ****             break;
 1028              	 .loc 2 361 0 discriminator 4
 1029 00f8 00BF     	 nop
 1030              	.L22:
 362:../cleanflight/src/main/io/gps.c ****     }
 363:../cleanflight/src/main/io/gps.c **** }
 1031              	 .loc 2 363 0
 1032 00fa 0837     	 adds r7,r7,#8
 1033              	.LCFI23:
 1034              	 .cfi_def_cfa_offset 8
 1035 00fc BD46     	 mov sp,r7
 1036              	.LCFI24:
 1037              	 .cfi_def_cfa_register 13
 1038              	 
 1039 00fe 80BD     	 pop {r7,pc}
 1040              	.L35:
 1041              	 .align 2
 1042              	.L34:
 1043 0100 00000000 	 .word gpsData
 1044 0104 00000000 	 .word gpsPort
 1045 0108 0C010000 	 .word .LC10
 1046 010c 00000000 	 .word gpsInitData
 1047 0110 00000000 	 .word baudRates
 1048 0114 2C010000 	 .word .LC11
 1049              	 .cfi_endproc
 1050              	.LFE555:
 1052              	 .section .text.gpsInitUblox,"ax",%progbits
 1053              	 .align 2
 1054              	 .global gpsInitUblox
 1055              	 .thumb
 1056              	 .thumb_func
 1058              	gpsInitUblox:
 1059              	.LFB556:
 364:../cleanflight/src/main/io/gps.c **** #endif // USE_GPS_NMEA
 365:../cleanflight/src/main/io/gps.c **** 
 366:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_UBLOX
 367:../cleanflight/src/main/io/gps.c **** void gpsInitUblox(void)
 368:../cleanflight/src/main/io/gps.c **** {
 1060              	 .loc 2 368 0
 1061              	 .cfi_startproc
 1062              	 
 1063              	 
 1064 0000 90B5     	 push {r4,r7,lr}
 1065              	.LCFI25:
 1066              	 .cfi_def_cfa_offset 12
 1067              	 .cfi_offset 4,-12
 1068              	 .cfi_offset 7,-8
 1069              	 .cfi_offset 14,-4
 1070 0002 83B0     	 sub sp,sp,#12
 1071              	.LCFI26:
 1072              	 .cfi_def_cfa_offset 24
 1073 0004 00AF     	 add r7,sp,#0
 1074              	.LCFI27:
 1075              	 .cfi_def_cfa_register 7
 369:../cleanflight/src/main/io/gps.c ****     uint32_t now;
 370:../cleanflight/src/main/io/gps.c ****     // UBX will run at the serial port's baudrate, it shouldn't be "autodetected". So here we force
 371:../cleanflight/src/main/io/gps.c **** 
 372:../cleanflight/src/main/io/gps.c ****     // Wait until GPS transmit buffer is empty
 373:../cleanflight/src/main/io/gps.c ****     if (!isSerialTransmitBufferEmpty(gpsPort))
 1076              	 .loc 2 373 0
 1077 0006 9A4B     	 ldr r3,.L56
 1078 0008 1B68     	 ldr r3,[r3]
 1079 000a 1846     	 mov r0,r3
 1080 000c FFF7FEFF 	 bl isSerialTransmitBufferEmpty
 1081 0010 0346     	 mov r3,r0
 1082 0012 83F00103 	 eor r3,r3,#1
 1083 0016 DBB2     	 uxtb r3,r3
 1084 0018 002B     	 cmp r3,#0
 1085 001a 00D0     	 beq .L37
 374:../cleanflight/src/main/io/gps.c ****         return;
 1086              	 .loc 2 374 0
 1087 001c 24E1     	 b .L36
 1088              	.L37:
 375:../cleanflight/src/main/io/gps.c **** 
 376:../cleanflight/src/main/io/gps.c **** 
 377:../cleanflight/src/main/io/gps.c ****     switch (gpsData.state) {
 1089              	 .loc 2 377 0
 1090 001e 954B     	 ldr r3,.L56+4
 1091 0020 1B7E     	 ldrb r3,[r3,#24]
 1092 0022 022B     	 cmp r3,#2
 1093 0024 52D0     	 beq .L39
 1094 0026 032B     	 cmp r3,#3
 1095 0028 67D0     	 beq .L40
 1096 002a 012B     	 cmp r3,#1
 1097 002c 40F01C81 	 bne .L36
 378:../cleanflight/src/main/io/gps.c ****         case GPS_INITIALIZING:
 379:../cleanflight/src/main/io/gps.c ****             now = millis();
 1098              	 .loc 2 379 0
 1099 0030 FFF7FEFF 	 bl millis
 1100 0034 7860     	 str r0,[r7,#4]
 380:../cleanflight/src/main/io/gps.c ****             if (now - gpsData.state_ts < GPS_BAUDRATE_CHANGE_DELAY)
 1101              	 .loc 2 380 0
 1102 0036 8F4B     	 ldr r3,.L56+4
 1103 0038 5B69     	 ldr r3,[r3,#20]
 1104 003a 7A68     	 ldr r2,[r7,#4]
 1105 003c D31A     	 subs r3,r2,r3
 1106 003e C72B     	 cmp r3,#199
 1107 0040 00D8     	 bhi .L42
 381:../cleanflight/src/main/io/gps.c ****                 return;
 1108              	 .loc 2 381 0 discriminator 2
 1109 0042 11E1     	 b .L36
 1110              	.L42:
 382:../cleanflight/src/main/io/gps.c **** 
 383:../cleanflight/src/main/io/gps.c ****             if (gpsData.state_position < GPS_INIT_ENTRIES) {
 1111              	 .loc 2 383 0
 1112 0044 8B4B     	 ldr r3,.L56+4
 1113 0046 1B69     	 ldr r3,[r3,#16]
 1114 0048 042B     	 cmp r3,#4
 1115 004a 3BD8     	 bhi .L43
 1116              	.LBB2:
 384:../cleanflight/src/main/io/gps.c ****                 // try different speed to INIT
 385:../cleanflight/src/main/io/gps.c ****                 baudRate_e newBaudRateIndex = gpsInitData[gpsData.state_position].baudrateIndex;
 1117              	 .loc 2 385 0
 1118 004c 894B     	 ldr r3,.L56+4
 1119 004e 1A69     	 ldr r2,[r3,#16]
 1120 0050 8949     	 ldr r1,.L56+8
 1121 0052 1346     	 mov r3,r2
 1122 0054 9B00     	 lsls r3,r3,#2
 1123 0056 1344     	 add r3,r3,r2
 1124 0058 5B00     	 lsls r3,r3,#1
 1125 005a 0B44     	 add r3,r3,r1
 1126 005c 5B78     	 ldrb r3,[r3,#1]
 1127 005e FB70     	 strb r3,[r7,#3]
 386:../cleanflight/src/main/io/gps.c **** 
 387:../cleanflight/src/main/io/gps.c ****                 gpsData.state_ts = now;
 1128              	 .loc 2 387 0
 1129 0060 844A     	 ldr r2,.L56+4
 1130 0062 7B68     	 ldr r3,[r7,#4]
 1131 0064 5361     	 str r3,[r2,#20]
 388:../cleanflight/src/main/io/gps.c **** 
 389:../cleanflight/src/main/io/gps.c ****                 if (lookupBaudRateIndex(serialGetBaudRate(gpsPort)) != newBaudRateIndex) {
 1132              	 .loc 2 389 0
 1133 0066 824B     	 ldr r3,.L56
 1134 0068 1B68     	 ldr r3,[r3]
 1135 006a 1846     	 mov r0,r3
 1136 006c FFF7FEFF 	 bl serialGetBaudRate
 1137 0070 0346     	 mov r3,r0
 1138 0072 1846     	 mov r0,r3
 1139 0074 FFF7FEFF 	 bl lookupBaudRateIndex
 1140 0078 0346     	 mov r3,r0
 1141 007a 1A46     	 mov r2,r3
 1142 007c FB78     	 ldrb r3,[r7,#3]
 1143 007e 9342     	 cmp r3,r2
 1144 0080 0AD0     	 beq .L44
 390:../cleanflight/src/main/io/gps.c ****                     // change the rate if needed and wait a little
 391:../cleanflight/src/main/io/gps.c ****                     serialSetBaudRate(gpsPort, baudRates[newBaudRateIndex]);
 1145              	 .loc 2 391 0
 1146 0082 7B4B     	 ldr r3,.L56
 1147 0084 1968     	 ldr r1,[r3]
 1148 0086 FB78     	 ldrb r3,[r7,#3]
 1149 0088 7C4A     	 ldr r2,.L56+12
 1150 008a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 1151 008e 0846     	 mov r0,r1
 1152 0090 1946     	 mov r1,r3
 1153 0092 FFF7FEFF 	 bl serialSetBaudRate
 392:../cleanflight/src/main/io/gps.c ****                     return;
 1154              	 .loc 2 392 0
 1155 0096 E7E0     	 b .L36
 1156              	.L44:
 393:../cleanflight/src/main/io/gps.c ****                 }
 394:../cleanflight/src/main/io/gps.c **** 
 395:../cleanflight/src/main/io/gps.c ****                 // print our FIXED init string for the baudrate we want to be at
 396:../cleanflight/src/main/io/gps.c ****                 serialPrint(gpsPort, gpsInitData[gpsData.baudrateIndex].ubx);
 1157              	 .loc 2 396 0
 1158 0098 754B     	 ldr r3,.L56
 1159 009a 1868     	 ldr r0,[r3]
 1160 009c 754B     	 ldr r3,.L56+4
 1161 009e 5B7E     	 ldrb r3,[r3,#25]
 1162 00a0 1946     	 mov r1,r3
 1163 00a2 754A     	 ldr r2,.L56+8
 1164 00a4 0B46     	 mov r3,r1
 1165 00a6 9B00     	 lsls r3,r3,#2
 1166 00a8 0B44     	 add r3,r3,r1
 1167 00aa 5B00     	 lsls r3,r3,#1
 1168 00ac 1344     	 add r3,r3,r2
 1169 00ae D3F80230 	 ldr r3,[r3,#2]
 1170 00b2 1946     	 mov r1,r3
 1171 00b4 FFF7FEFF 	 bl serialPrint
 397:../cleanflight/src/main/io/gps.c **** 
 398:../cleanflight/src/main/io/gps.c ****                 gpsData.state_position++;
 1172              	 .loc 2 398 0
 1173 00b8 6E4B     	 ldr r3,.L56+4
 1174 00ba 1B69     	 ldr r3,[r3,#16]
 1175 00bc 0133     	 adds r3,r3,#1
 1176 00be 6D4A     	 ldr r2,.L56+4
 1177 00c0 1361     	 str r3,[r2,#16]
 1178              	.LBE2:
 399:../cleanflight/src/main/io/gps.c ****             } else {
 400:../cleanflight/src/main/io/gps.c ****                 // we're now (hopefully) at the correct rate, next state will switch to it
 401:../cleanflight/src/main/io/gps.c ****                 gpsSetState(GPS_CHANGE_BAUD);
 402:../cleanflight/src/main/io/gps.c ****             }
 403:../cleanflight/src/main/io/gps.c ****             break;
 1179              	 .loc 2 403 0
 1180 00c2 D1E0     	 b .L36
 1181              	.L43:
 401:../cleanflight/src/main/io/gps.c ****             }
 1182              	 .loc 2 401 0
 1183 00c4 0220     	 movs r0,#2
 1184 00c6 FFF7FEFF 	 bl gpsSetState
 1185              	 .loc 2 403 0
 1186 00ca CDE0     	 b .L36
 1187              	.L39:
 404:../cleanflight/src/main/io/gps.c ****         case GPS_CHANGE_BAUD:
 405:../cleanflight/src/main/io/gps.c ****             serialSetBaudRate(gpsPort, baudRates[gpsInitData[gpsData.baudrateIndex].baudrateIndex])
 1188              	 .loc 2 405 0
 1189 00cc 684B     	 ldr r3,.L56
 1190 00ce 1868     	 ldr r0,[r3]
 1191 00d0 684B     	 ldr r3,.L56+4
 1192 00d2 5B7E     	 ldrb r3,[r3,#25]
 1193 00d4 1946     	 mov r1,r3
 1194 00d6 684A     	 ldr r2,.L56+8
 1195 00d8 0B46     	 mov r3,r1
 1196 00da 9B00     	 lsls r3,r3,#2
 1197 00dc 0B44     	 add r3,r3,r1
 1198 00de 5B00     	 lsls r3,r3,#1
 1199 00e0 1344     	 add r3,r3,r2
 1200 00e2 5B78     	 ldrb r3,[r3,#1]
 1201 00e4 1A46     	 mov r2,r3
 1202 00e6 654B     	 ldr r3,.L56+12
 1203 00e8 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1204 00ec 1946     	 mov r1,r3
 1205 00ee FFF7FEFF 	 bl serialSetBaudRate
 406:../cleanflight/src/main/io/gps.c ****             gpsSetState(GPS_CONFIGURE);
 1206              	 .loc 2 406 0
 1207 00f2 0320     	 movs r0,#3
 1208 00f4 FFF7FEFF 	 bl gpsSetState
 407:../cleanflight/src/main/io/gps.c ****             break;
 1209              	 .loc 2 407 0
 1210 00f8 B6E0     	 b .L36
 1211              	.L40:
 408:../cleanflight/src/main/io/gps.c ****         case GPS_CONFIGURE:
 409:../cleanflight/src/main/io/gps.c **** 
 410:../cleanflight/src/main/io/gps.c ****             // Either use specific config file for GPS or let dynamically upload config
 411:../cleanflight/src/main/io/gps.c ****             if ( gpsConfig()->autoConfig == GPS_AUTOCONFIG_OFF ) {
 1212              	 .loc 2 411 0
 1213 00fa FFF7FEFF 	 bl gpsConfig
 1214 00fe 0346     	 mov r3,r0
 1215 0100 9B78     	 ldrb r3,[r3,#2]
 1216 0102 002B     	 cmp r3,#0
 1217 0104 03D1     	 bne .L46
 412:../cleanflight/src/main/io/gps.c ****                 gpsSetState(GPS_RECEIVING_DATA);
 1218              	 .loc 2 412 0
 1219 0106 0420     	 movs r0,#4
 1220 0108 FFF7FEFF 	 bl gpsSetState
 413:../cleanflight/src/main/io/gps.c ****                 break;
 1221              	 .loc 2 413 0
 1222 010c ACE0     	 b .L36
 1223              	.L46:
 414:../cleanflight/src/main/io/gps.c ****             }
 415:../cleanflight/src/main/io/gps.c **** 
 416:../cleanflight/src/main/io/gps.c ****             if (gpsData.messageState == GPS_MESSAGE_STATE_IDLE) {
 1224              	 .loc 2 416 0
 1225 010e 594B     	 ldr r3,.L56+4
 1226 0110 9B7E     	 ldrb r3,[r3,#26]
 1227 0112 002B     	 cmp r3,#0
 1228 0114 05D1     	 bne .L47
 417:../cleanflight/src/main/io/gps.c ****                 gpsData.messageState++;
 1229              	 .loc 2 417 0
 1230 0116 574B     	 ldr r3,.L56+4
 1231 0118 9B7E     	 ldrb r3,[r3,#26]
 1232 011a 0133     	 adds r3,r3,#1
 1233 011c DAB2     	 uxtb r2,r3
 1234 011e 554B     	 ldr r3,.L56+4
 1235 0120 9A76     	 strb r2,[r3,#26]
 1236              	.L47:
 418:../cleanflight/src/main/io/gps.c ****             }
 419:../cleanflight/src/main/io/gps.c **** 
 420:../cleanflight/src/main/io/gps.c ****             if (gpsData.messageState == GPS_MESSAGE_STATE_INIT) {
 1237              	 .loc 2 420 0
 1238 0122 544B     	 ldr r3,.L56+4
 1239 0124 9B7E     	 ldrb r3,[r3,#26]
 1240 0126 012B     	 cmp r3,#1
 1241 0128 22D1     	 bne .L48
 421:../cleanflight/src/main/io/gps.c **** 
 422:../cleanflight/src/main/io/gps.c ****                 if (gpsData.state_position < sizeof(ubloxInit)) {
 1242              	 .loc 2 422 0
 1243 012a 524B     	 ldr r3,.L56+4
 1244 012c 1B69     	 ldr r3,[r3,#16]
 1245 012e B22B     	 cmp r3,#178
 1246 0130 0FD8     	 bhi .L49
 423:../cleanflight/src/main/io/gps.c ****                     serialWrite(gpsPort, ubloxInit[gpsData.state_position]);
 1247              	 .loc 2 423 0
 1248 0132 4F4B     	 ldr r3,.L56
 1249 0134 1968     	 ldr r1,[r3]
 1250 0136 4F4B     	 ldr r3,.L56+4
 1251 0138 1B69     	 ldr r3,[r3,#16]
 1252 013a 514A     	 ldr r2,.L56+16
 1253 013c D35C     	 ldrb r3,[r2,r3]
 1254 013e 0846     	 mov r0,r1
 1255 0140 1946     	 mov r1,r3
 1256 0142 FFF7FEFF 	 bl serialWrite
 424:../cleanflight/src/main/io/gps.c ****                     gpsData.state_position++;
 1257              	 .loc 2 424 0
 1258 0146 4B4B     	 ldr r3,.L56+4
 1259 0148 1B69     	 ldr r3,[r3,#16]
 1260 014a 0133     	 adds r3,r3,#1
 1261 014c 494A     	 ldr r2,.L56+4
 1262 014e 1361     	 str r3,[r2,#16]
 1263 0150 0EE0     	 b .L48
 1264              	.L49:
 425:../cleanflight/src/main/io/gps.c ****                 } else {
 426:../cleanflight/src/main/io/gps.c ****                     gpsData.state_position = 0;
 1265              	 .loc 2 426 0
 1266 0152 484B     	 ldr r3,.L56+4
 1267 0154 0022     	 movs r2,#0
 1268 0156 1A74     	 strb r2,[r3,#16]
 1269 0158 0022     	 movs r2,#0
 1270 015a 5A74     	 strb r2,[r3,#17]
 1271 015c 0022     	 movs r2,#0
 1272 015e 9A74     	 strb r2,[r3,#18]
 1273 0160 0022     	 movs r2,#0
 1274 0162 DA74     	 strb r2,[r3,#19]
 427:../cleanflight/src/main/io/gps.c ****                     gpsData.messageState++;
 1275              	 .loc 2 427 0
 1276 0164 434B     	 ldr r3,.L56+4
 1277 0166 9B7E     	 ldrb r3,[r3,#26]
 1278 0168 0133     	 adds r3,r3,#1
 1279 016a DAB2     	 uxtb r2,r3
 1280 016c 414B     	 ldr r3,.L56+4
 1281 016e 9A76     	 strb r2,[r3,#26]
 1282              	.L48:
 428:../cleanflight/src/main/io/gps.c ****                 }
 429:../cleanflight/src/main/io/gps.c ****             }
 430:../cleanflight/src/main/io/gps.c **** 
 431:../cleanflight/src/main/io/gps.c ****             if (gpsData.messageState == GPS_MESSAGE_STATE_SBAS) {
 1283              	 .loc 2 431 0
 1284 0170 404B     	 ldr r3,.L56+4
 1285 0172 9B7E     	 ldrb r3,[r3,#26]
 1286 0174 022B     	 cmp r3,#2
 1287 0176 42D1     	 bne .L50
 432:../cleanflight/src/main/io/gps.c ****                 if (gpsData.state_position < UBLOX_SBAS_PREFIX_LENGTH) {
 1288              	 .loc 2 432 0
 1289 0178 3E4B     	 ldr r3,.L56+4
 1290 017a 1B69     	 ldr r3,[r3,#16]
 1291 017c 092B     	 cmp r3,#9
 1292 017e 0FD8     	 bhi .L51
 433:../cleanflight/src/main/io/gps.c ****                     serialWrite(gpsPort, ubloxSbasPrefix[gpsData.state_position]);
 1293              	 .loc 2 433 0
 1294 0180 3B4B     	 ldr r3,.L56
 1295 0182 1968     	 ldr r1,[r3]
 1296 0184 3B4B     	 ldr r3,.L56+4
 1297 0186 1B69     	 ldr r3,[r3,#16]
 1298 0188 3E4A     	 ldr r2,.L56+20
 1299 018a D35C     	 ldrb r3,[r2,r3]
 1300 018c 0846     	 mov r0,r1
 1301 018e 1946     	 mov r1,r3
 1302 0190 FFF7FEFF 	 bl serialWrite
 434:../cleanflight/src/main/io/gps.c ****                     gpsData.state_position++;
 1303              	 .loc 2 434 0
 1304 0194 374B     	 ldr r3,.L56+4
 1305 0196 1B69     	 ldr r3,[r3,#16]
 1306 0198 0133     	 adds r3,r3,#1
 1307 019a 364A     	 ldr r2,.L56+4
 1308 019c 1361     	 str r3,[r2,#16]
 1309 019e 2EE0     	 b .L50
 1310              	.L51:
 435:../cleanflight/src/main/io/gps.c ****                 } else if (gpsData.state_position < UBLOX_SBAS_PREFIX_LENGTH + UBLOX_SBAS_MESSAGE_L
 1311              	 .loc 2 435 0
 1312 01a0 344B     	 ldr r3,.L56+4
 1313 01a2 1B69     	 ldr r3,[r3,#16]
 1314 01a4 0F2B     	 cmp r3,#15
 1315 01a6 1BD8     	 bhi .L52
 436:../cleanflight/src/main/io/gps.c ****                     serialWrite(gpsPort, ubloxSbas[gpsConfig()->sbasMode].message[gpsData.state_pos
 1316              	 .loc 2 436 0
 1317 01a8 314B     	 ldr r3,.L56
 1318 01aa 1C68     	 ldr r4,[r3]
 1319 01ac FFF7FEFF 	 bl gpsConfig
 1320 01b0 0346     	 mov r3,r0
 1321 01b2 5B78     	 ldrb r3,[r3,#1]
 1322 01b4 1846     	 mov r0,r3
 1323 01b6 2F4B     	 ldr r3,.L56+4
 1324 01b8 1B69     	 ldr r3,[r3,#16]
 1325 01ba A3F10A02 	 sub r2,r3,#10
 1326 01be 3249     	 ldr r1,.L56+24
 1327 01c0 0346     	 mov r3,r0
 1328 01c2 DB00     	 lsls r3,r3,#3
 1329 01c4 1B1A     	 subs r3,r3,r0
 1330 01c6 1344     	 add r3,r3,r2
 1331 01c8 0B44     	 add r3,r3,r1
 1332 01ca 5B78     	 ldrb r3,[r3,#1]
 1333 01cc 2046     	 mov r0,r4
 1334 01ce 1946     	 mov r1,r3
 1335 01d0 FFF7FEFF 	 bl serialWrite
 437:../cleanflight/src/main/io/gps.c ****                     gpsData.state_position++;
 1336              	 .loc 2 437 0
 1337 01d4 274B     	 ldr r3,.L56+4
 1338 01d6 1B69     	 ldr r3,[r3,#16]
 1339 01d8 0133     	 adds r3,r3,#1
 1340 01da 264A     	 ldr r2,.L56+4
 1341 01dc 1361     	 str r3,[r2,#16]
 1342 01de 0EE0     	 b .L50
 1343              	.L52:
 438:../cleanflight/src/main/io/gps.c ****                 } else {
 439:../cleanflight/src/main/io/gps.c ****                     gpsData.state_position = 0;
 1344              	 .loc 2 439 0
 1345 01e0 244B     	 ldr r3,.L56+4
 1346 01e2 0022     	 movs r2,#0
 1347 01e4 1A74     	 strb r2,[r3,#16]
 1348 01e6 0022     	 movs r2,#0
 1349 01e8 5A74     	 strb r2,[r3,#17]
 1350 01ea 0022     	 movs r2,#0
 1351 01ec 9A74     	 strb r2,[r3,#18]
 1352 01ee 0022     	 movs r2,#0
 1353 01f0 DA74     	 strb r2,[r3,#19]
 440:../cleanflight/src/main/io/gps.c ****                     gpsData.messageState++;
 1354              	 .loc 2 440 0
 1355 01f2 204B     	 ldr r3,.L56+4
 1356 01f4 9B7E     	 ldrb r3,[r3,#26]
 1357 01f6 0133     	 adds r3,r3,#1
 1358 01f8 DAB2     	 uxtb r2,r3
 1359 01fa 1E4B     	 ldr r3,.L56+4
 1360 01fc 9A76     	 strb r2,[r3,#26]
 1361              	.L50:
 441:../cleanflight/src/main/io/gps.c ****                 }
 442:../cleanflight/src/main/io/gps.c ****             }
 443:../cleanflight/src/main/io/gps.c **** 
 444:../cleanflight/src/main/io/gps.c ****             if (gpsData.messageState == GPS_MESSAGE_STATE_GALILEO) {
 1362              	 .loc 2 444 0
 1363 01fe 1D4B     	 ldr r3,.L56+4
 1364 0200 9B7E     	 ldrb r3,[r3,#26]
 1365 0202 032B     	 cmp r3,#3
 1366 0204 28D1     	 bne .L53
 445:../cleanflight/src/main/io/gps.c ****                 if ((gpsConfig()->gps_ublox_use_galileo) && (gpsData.state_position < sizeof(ubloxG
 1367              	 .loc 2 445 0
 1368 0206 FFF7FEFF 	 bl gpsConfig
 1369 020a 0346     	 mov r3,r0
 1370 020c 1B79     	 ldrb r3,[r3,#4]
 1371 020e 002B     	 cmp r3,#0
 1372 0210 13D0     	 beq .L54
 1373              	 .loc 2 445 0 is_stmt 0 discriminator 1
 1374 0212 184B     	 ldr r3,.L56+4
 1375 0214 1B69     	 ldr r3,[r3,#16]
 1376 0216 432B     	 cmp r3,#67
 1377 0218 0FD8     	 bhi .L54
 446:../cleanflight/src/main/io/gps.c ****                     serialWrite(gpsPort, ubloxGalileoInit[gpsData.state_position]);
 1378              	 .loc 2 446 0 is_stmt 1
 1379 021a 154B     	 ldr r3,.L56
 1380 021c 1968     	 ldr r1,[r3]
 1381 021e 154B     	 ldr r3,.L56+4
 1382 0220 1B69     	 ldr r3,[r3,#16]
 1383 0222 1A4A     	 ldr r2,.L56+28
 1384 0224 D35C     	 ldrb r3,[r2,r3]
 1385 0226 0846     	 mov r0,r1
 1386 0228 1946     	 mov r1,r3
 1387 022a FFF7FEFF 	 bl serialWrite
 447:../cleanflight/src/main/io/gps.c ****                     gpsData.state_position++;
 1388              	 .loc 2 447 0
 1389 022e 114B     	 ldr r3,.L56+4
 1390 0230 1B69     	 ldr r3,[r3,#16]
 1391 0232 0133     	 adds r3,r3,#1
 1392 0234 0F4A     	 ldr r2,.L56+4
 1393 0236 1361     	 str r3,[r2,#16]
 1394 0238 0EE0     	 b .L53
 1395              	.L54:
 448:../cleanflight/src/main/io/gps.c ****                 } else {
 449:../cleanflight/src/main/io/gps.c ****                     gpsData.state_position = 0;
 1396              	 .loc 2 449 0
 1397 023a 0E4B     	 ldr r3,.L56+4
 1398 023c 0022     	 movs r2,#0
 1399 023e 1A74     	 strb r2,[r3,#16]
 1400 0240 0022     	 movs r2,#0
 1401 0242 5A74     	 strb r2,[r3,#17]
 1402 0244 0022     	 movs r2,#0
 1403 0246 9A74     	 strb r2,[r3,#18]
 1404 0248 0022     	 movs r2,#0
 1405 024a DA74     	 strb r2,[r3,#19]
 450:../cleanflight/src/main/io/gps.c ****                     gpsData.messageState++;
 1406              	 .loc 2 450 0
 1407 024c 094B     	 ldr r3,.L56+4
 1408 024e 9B7E     	 ldrb r3,[r3,#26]
 1409 0250 0133     	 adds r3,r3,#1
 1410 0252 DAB2     	 uxtb r2,r3
 1411 0254 074B     	 ldr r3,.L56+4
 1412 0256 9A76     	 strb r2,[r3,#26]
 1413              	.L53:
 451:../cleanflight/src/main/io/gps.c ****                 }
 452:../cleanflight/src/main/io/gps.c ****             }
 453:../cleanflight/src/main/io/gps.c **** 
 454:../cleanflight/src/main/io/gps.c ****             if (gpsData.messageState >= GPS_MESSAGE_STATE_ENTRY_COUNT) {
 1414              	 .loc 2 454 0
 1415 0258 064B     	 ldr r3,.L56+4
 1416 025a 9B7E     	 ldrb r3,[r3,#26]
 1417 025c 032B     	 cmp r3,#3
 1418 025e 02D9     	 bls .L55
 455:../cleanflight/src/main/io/gps.c ****                 // ublox should be initialised, try receiving
 456:../cleanflight/src/main/io/gps.c ****                 gpsSetState(GPS_RECEIVING_DATA);
 1419              	 .loc 2 456 0
 1420 0260 0420     	 movs r0,#4
 1421 0262 FFF7FEFF 	 bl gpsSetState
 1422              	.L55:
 457:../cleanflight/src/main/io/gps.c ****             }
 458:../cleanflight/src/main/io/gps.c ****             break;
 1423              	 .loc 2 458 0 discriminator 4
 1424 0266 00BF     	 nop
 1425              	.L36:
 459:../cleanflight/src/main/io/gps.c ****     }
 460:../cleanflight/src/main/io/gps.c **** }
 1426              	 .loc 2 460 0
 1427 0268 0C37     	 adds r7,r7,#12
 1428              	.LCFI28:
 1429              	 .cfi_def_cfa_offset 12
 1430 026a BD46     	 mov sp,r7
 1431              	.LCFI29:
 1432              	 .cfi_def_cfa_register 13
 1433              	 
 1434 026c 90BD     	 pop {r4,r7,pc}
 1435              	.L57:
 1436 026e 00BF     	 .align 2
 1437              	.L56:
 1438 0270 00000000 	 .word gpsPort
 1439 0274 00000000 	 .word gpsData
 1440 0278 00000000 	 .word gpsInitData
 1441 027c 00000000 	 .word baudRates
 1442 0280 00000000 	 .word ubloxInit
 1443 0284 00000000 	 .word ubloxSbasPrefix
 1444 0288 00000000 	 .word ubloxSbas
 1445 028c 00000000 	 .word ubloxGalileoInit
 1446              	 .cfi_endproc
 1447              	.LFE556:
 1449              	 .section .text.gpsInitHardware,"ax",%progbits
 1450              	 .align 2
 1451              	 .global gpsInitHardware
 1452              	 .thumb
 1453              	 .thumb_func
 1455              	gpsInitHardware:
 1456              	.LFB557:
 461:../cleanflight/src/main/io/gps.c **** #endif // USE_GPS_UBLOX
 462:../cleanflight/src/main/io/gps.c **** 
 463:../cleanflight/src/main/io/gps.c **** void gpsInitHardware(void)
 464:../cleanflight/src/main/io/gps.c **** {
 1457              	 .loc 2 464 0
 1458              	 .cfi_startproc
 1459              	 
 1460              	 
 1461 0000 80B5     	 push {r7,lr}
 1462              	.LCFI30:
 1463              	 .cfi_def_cfa_offset 8
 1464              	 .cfi_offset 7,-8
 1465              	 .cfi_offset 14,-4
 1466 0002 00AF     	 add r7,sp,#0
 1467              	.LCFI31:
 1468              	 .cfi_def_cfa_register 7
 465:../cleanflight/src/main/io/gps.c ****     switch (gpsConfig()->provider) {
 1469              	 .loc 2 465 0
 1470 0004 FFF7FEFF 	 bl gpsConfig
 1471 0008 0346     	 mov r3,r0
 1472 000a 1B78     	 ldrb r3,[r3]
 1473 000c 002B     	 cmp r3,#0
 1474 000e 02D0     	 beq .L60
 1475 0010 012B     	 cmp r3,#1
 1476 0012 03D0     	 beq .L61
 1477 0014 05E0     	 b .L58
 1478              	.L60:
 466:../cleanflight/src/main/io/gps.c ****     case GPS_NMEA:
 467:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_NMEA
 468:../cleanflight/src/main/io/gps.c ****         gpsInitNmea();
 1479              	 .loc 2 468 0
 1480 0016 FFF7FEFF 	 bl gpsInitNmea
 469:../cleanflight/src/main/io/gps.c **** #endif
 470:../cleanflight/src/main/io/gps.c ****         break;
 1481              	 .loc 2 470 0
 1482 001a 02E0     	 b .L58
 1483              	.L61:
 471:../cleanflight/src/main/io/gps.c **** 
 472:../cleanflight/src/main/io/gps.c ****     case GPS_UBLOX:
 473:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_UBLOX
 474:../cleanflight/src/main/io/gps.c ****         gpsInitUblox();
 1484              	 .loc 2 474 0
 1485 001c FFF7FEFF 	 bl gpsInitUblox
 475:../cleanflight/src/main/io/gps.c **** #endif
 476:../cleanflight/src/main/io/gps.c ****         break;
 1486              	 .loc 2 476 0
 1487 0020 00BF     	 nop
 1488              	.L58:
 477:../cleanflight/src/main/io/gps.c ****     }
 478:../cleanflight/src/main/io/gps.c **** }
 1489              	 .loc 2 478 0
 1490 0022 80BD     	 pop {r7,pc}
 1491              	 .cfi_endproc
 1492              	.LFE557:
 1494              	 .section .text.updateGpsIndicator,"ax",%progbits
 1495              	 .align 2
 1496              	 .thumb
 1497              	 .thumb_func
 1499              	updateGpsIndicator:
 1500              	.LFB558:
 479:../cleanflight/src/main/io/gps.c **** 
 480:../cleanflight/src/main/io/gps.c **** static void updateGpsIndicator(timeUs_t currentTimeUs)
 481:../cleanflight/src/main/io/gps.c **** {
 1501              	 .loc 2 481 0
 1502              	 .cfi_startproc
 1503              	 
 1504              	 
 1505 0000 80B5     	 push {r7,lr}
 1506              	.LCFI32:
 1507              	 .cfi_def_cfa_offset 8
 1508              	 .cfi_offset 7,-8
 1509              	 .cfi_offset 14,-4
 1510 0002 82B0     	 sub sp,sp,#8
 1511              	.LCFI33:
 1512              	 .cfi_def_cfa_offset 16
 1513 0004 00AF     	 add r7,sp,#0
 1514              	.LCFI34:
 1515              	 .cfi_def_cfa_register 7
 1516 0006 7860     	 str r0,[r7,#4]
 482:../cleanflight/src/main/io/gps.c ****     static uint32_t GPSLEDTime;
 483:../cleanflight/src/main/io/gps.c ****     if ((int32_t)(currentTimeUs - GPSLEDTime) >= 0 && (gpsSol.numSat >= 5)) {
 1517              	 .loc 2 483 0
 1518 0008 0B4B     	 ldr r3,.L64
 1519 000a 1B68     	 ldr r3,[r3]
 1520 000c 7A68     	 ldr r2,[r7,#4]
 1521 000e D31A     	 subs r3,r2,r3
 1522 0010 002B     	 cmp r3,#0
 1523 0012 0DDB     	 blt .L62
 1524              	 .loc 2 483 0 is_stmt 0 discriminator 1
 1525 0014 094B     	 ldr r3,.L64+4
 1526 0016 9B7C     	 ldrb r3,[r3,#18]
 1527 0018 042B     	 cmp r3,#4
 1528 001a 09D9     	 bls .L62
 484:../cleanflight/src/main/io/gps.c ****         GPSLEDTime = currentTimeUs + 150000;
 1529              	 .loc 2 484 0 is_stmt 1
 1530 001c 7B68     	 ldr r3,[r7,#4]
 1531 001e 03F51233 	 add r3,r3,#149504
 1532 0022 03F5F873 	 add r3,r3,#496
 1533 0026 044A     	 ldr r2,.L64
 1534 0028 1360     	 str r3,[r2]
 485:../cleanflight/src/main/io/gps.c ****         LED1_TOGGLE;
 1535              	 .loc 2 485 0
 1536 002a 0120     	 movs r0,#1
 1537 002c FFF7FEFF 	 bl ledToggle
 1538              	.L62:
 486:../cleanflight/src/main/io/gps.c ****     }
 487:../cleanflight/src/main/io/gps.c **** }
 1539              	 .loc 2 487 0
 1540 0030 0837     	 adds r7,r7,#8
 1541              	.LCFI35:
 1542              	 .cfi_def_cfa_offset 8
 1543 0032 BD46     	 mov sp,r7
 1544              	.LCFI36:
 1545              	 .cfi_def_cfa_register 13
 1546              	 
 1547 0034 80BD     	 pop {r7,pc}
 1548              	.L65:
 1549 0036 00BF     	 .align 2
 1550              	.L64:
 1551 0038 00000000 	 .word GPSLEDTime.13649
 1552 003c 00000000 	 .word gpsSol
 1553              	 .cfi_endproc
 1554              	.LFE558:
 1556              	 .section .text.gpsUpdate,"ax",%progbits
 1557              	 .align 2
 1558              	 .global gpsUpdate
 1559              	 .thumb
 1560              	 .thumb_func
 1562              	gpsUpdate:
 1563              	.LFB559:
 488:../cleanflight/src/main/io/gps.c **** 
 489:../cleanflight/src/main/io/gps.c **** void gpsUpdate(timeUs_t currentTimeUs)
 490:../cleanflight/src/main/io/gps.c **** {
 1564              	 .loc 2 490 0
 1565              	 .cfi_startproc
 1566              	 
 1567              	 
 1568 0000 80B5     	 push {r7,lr}
 1569              	.LCFI37:
 1570              	 .cfi_def_cfa_offset 8
 1571              	 .cfi_offset 7,-8
 1572              	 .cfi_offset 14,-4
 1573 0002 82B0     	 sub sp,sp,#8
 1574              	.LCFI38:
 1575              	 .cfi_def_cfa_offset 16
 1576 0004 00AF     	 add r7,sp,#0
 1577              	.LCFI39:
 1578              	 .cfi_def_cfa_register 7
 1579 0006 7860     	 str r0,[r7,#4]
 491:../cleanflight/src/main/io/gps.c ****     // read out available GPS bytes
 492:../cleanflight/src/main/io/gps.c ****     if (gpsPort) {
 1580              	 .loc 2 492 0
 1581 0008 414B     	 ldr r3,.L81
 1582 000a 1B68     	 ldr r3,[r3]
 1583 000c 002B     	 cmp r3,#0
 1584 000e 12D0     	 beq .L67
 493:../cleanflight/src/main/io/gps.c ****         while (serialRxBytesWaiting(gpsPort))
 1585              	 .loc 2 493 0
 1586 0010 09E0     	 b .L68
 1587              	.L69:
 494:../cleanflight/src/main/io/gps.c ****             gpsNewData(serialRead(gpsPort));
 1588              	 .loc 2 494 0
 1589 0012 3F4B     	 ldr r3,.L81
 1590 0014 1B68     	 ldr r3,[r3]
 1591 0016 1846     	 mov r0,r3
 1592 0018 FFF7FEFF 	 bl serialRead
 1593 001c 0346     	 mov r3,r0
 1594 001e 9BB2     	 uxth r3,r3
 1595 0020 1846     	 mov r0,r3
 1596 0022 FFF7FEFF 	 bl gpsNewData
 1597              	.L68:
 493:../cleanflight/src/main/io/gps.c ****         while (serialRxBytesWaiting(gpsPort))
 1598              	 .loc 2 493 0
 1599 0026 3A4B     	 ldr r3,.L81
 1600 0028 1B68     	 ldr r3,[r3]
 1601 002a 1846     	 mov r0,r3
 1602 002c FFF7FEFF 	 bl serialRxBytesWaiting
 1603 0030 0346     	 mov r3,r0
 1604 0032 002B     	 cmp r3,#0
 1605 0034 EDD1     	 bne .L69
 1606              	.L67:
 495:../cleanflight/src/main/io/gps.c ****     }
 496:../cleanflight/src/main/io/gps.c **** 
 497:../cleanflight/src/main/io/gps.c ****     switch (gpsData.state) {
 1607              	 .loc 2 497 0
 1608 0036 374B     	 ldr r3,.L81+4
 1609 0038 1B7E     	 ldrb r3,[r3,#24]
 1610 003a 052B     	 cmp r3,#5
 1611 003c 54D8     	 bhi .L70
 1612 003e 01A2     	 adr r2,.L72
 1613 0040 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1614              	 .p2align 2
 1615              	.L72:
 1616 0044 E9000000 	 .word .L70+1
 1617 0048 5D000000 	 .word .L73+1
 1618 004c 5D000000 	 .word .L73+1
 1619 0050 5D000000 	 .word .L73+1
 1620 0054 C5000000 	 .word .L74+1
 1621 0058 63000000 	 .word .L75+1
 1622              	 .p2align 1
 1623              	.L73:
 498:../cleanflight/src/main/io/gps.c ****         case GPS_UNKNOWN:
 499:../cleanflight/src/main/io/gps.c ****             break;
 500:../cleanflight/src/main/io/gps.c **** 
 501:../cleanflight/src/main/io/gps.c ****         case GPS_INITIALIZING:
 502:../cleanflight/src/main/io/gps.c ****         case GPS_CHANGE_BAUD:
 503:../cleanflight/src/main/io/gps.c ****         case GPS_CONFIGURE:
 504:../cleanflight/src/main/io/gps.c ****             gpsInitHardware();
 1624              	 .loc 2 504 0
 1625 005c FFF7FEFF 	 bl gpsInitHardware
 505:../cleanflight/src/main/io/gps.c ****             break;
 1626              	 .loc 2 505 0
 1627 0060 42E0     	 b .L70
 1628              	.L75:
 506:../cleanflight/src/main/io/gps.c **** 
 507:../cleanflight/src/main/io/gps.c ****         case GPS_LOST_COMMUNICATION:
 508:../cleanflight/src/main/io/gps.c ****             gpsData.timeouts++;
 1629              	 .loc 2 508 0
 1630 0062 2C4B     	 ldr r3,.L81+4
 1631 0064 5B68     	 ldr r3,[r3,#4]
 1632 0066 0133     	 adds r3,r3,#1
 1633 0068 2A4A     	 ldr r2,.L81+4
 1634 006a 5360     	 str r3,[r2,#4]
 509:../cleanflight/src/main/io/gps.c ****             if (gpsConfig()->autoBaud) {
 1635              	 .loc 2 509 0
 1636 006c FFF7FEFF 	 bl gpsConfig
 1637 0070 0346     	 mov r3,r0
 1638 0072 DB78     	 ldrb r3,[r3,#3]
 1639 0074 002B     	 cmp r3,#0
 1640 0076 12D0     	 beq .L76
 510:../cleanflight/src/main/io/gps.c ****                 // try another rate
 511:../cleanflight/src/main/io/gps.c ****                 gpsData.baudrateIndex++;
 1641              	 .loc 2 511 0
 1642 0078 264B     	 ldr r3,.L81+4
 1643 007a 5B7E     	 ldrb r3,[r3,#25]
 1644 007c 0133     	 adds r3,r3,#1
 1645 007e DAB2     	 uxtb r2,r3
 1646 0080 244B     	 ldr r3,.L81+4
 1647 0082 5A76     	 strb r2,[r3,#25]
 512:../cleanflight/src/main/io/gps.c ****                 gpsData.baudrateIndex %= GPS_INIT_ENTRIES;
 1648              	 .loc 2 512 0
 1649 0084 234B     	 ldr r3,.L81+4
 1650 0086 5A7E     	 ldrb r2,[r3,#25]
 1651 0088 234B     	 ldr r3,.L81+8
 1652 008a A3FB0213 	 umull r1,r3,r3,r2
 1653 008e 9908     	 lsrs r1,r3,#2
 1654 0090 0B46     	 mov r3,r1
 1655 0092 9B00     	 lsls r3,r3,#2
 1656 0094 0B44     	 add r3,r3,r1
 1657 0096 D31A     	 subs r3,r2,r3
 1658 0098 DAB2     	 uxtb r2,r3
 1659 009a 1E4B     	 ldr r3,.L81+4
 1660 009c 5A76     	 strb r2,[r3,#25]
 1661              	.L76:
 513:../cleanflight/src/main/io/gps.c ****             }
 514:../cleanflight/src/main/io/gps.c ****             gpsData.lastMessage = millis();
 1662              	 .loc 2 514 0
 1663 009e FFF7FEFF 	 bl millis
 1664 00a2 0246     	 mov r2,r0
 1665 00a4 1B4B     	 ldr r3,.L81+4
 1666 00a6 9A60     	 str r2,[r3,#8]
 515:../cleanflight/src/main/io/gps.c ****             gpsSol.numSat = 0;
 1667              	 .loc 2 515 0
 1668 00a8 1C4B     	 ldr r3,.L81+12
 1669 00aa 0022     	 movs r2,#0
 1670 00ac 9A74     	 strb r2,[r3,#18]
 516:../cleanflight/src/main/io/gps.c ****             DISABLE_STATE(GPS_FIX);
 1671              	 .loc 2 516 0
 1672 00ae 1C4B     	 ldr r3,.L81+16
 1673 00b0 1B78     	 ldrb r3,[r3]
 1674 00b2 23F00203 	 bic r3,r3,#2
 1675 00b6 DAB2     	 uxtb r2,r3
 1676 00b8 194B     	 ldr r3,.L81+16
 1677 00ba 1A70     	 strb r2,[r3]
 517:../cleanflight/src/main/io/gps.c ****             gpsSetState(GPS_INITIALIZING);
 1678              	 .loc 2 517 0
 1679 00bc 0120     	 movs r0,#1
 1680 00be FFF7FEFF 	 bl gpsSetState
 518:../cleanflight/src/main/io/gps.c ****             break;
 1681              	 .loc 2 518 0
 1682 00c2 11E0     	 b .L70
 1683              	.L74:
 519:../cleanflight/src/main/io/gps.c **** 
 520:../cleanflight/src/main/io/gps.c ****         case GPS_RECEIVING_DATA:
 521:../cleanflight/src/main/io/gps.c ****             // check for no data/gps timeout/cable disconnection etc
 522:../cleanflight/src/main/io/gps.c ****             if (millis() - gpsData.lastMessage > GPS_TIMEOUT) {
 1684              	 .loc 2 522 0
 1685 00c4 FFF7FEFF 	 bl millis
 1686 00c8 0246     	 mov r2,r0
 1687 00ca 124B     	 ldr r3,.L81+4
 1688 00cc 9B68     	 ldr r3,[r3,#8]
 1689 00ce D31A     	 subs r3,r2,r3
 1690 00d0 40F6C412 	 movw r2,#2500
 1691 00d4 9342     	 cmp r3,r2
 1692 00d6 06D9     	 bls .L77
 523:../cleanflight/src/main/io/gps.c ****                 // remove GPS from capability
 524:../cleanflight/src/main/io/gps.c ****                 sensorsClear(SENSOR_GPS);
 1693              	 .loc 2 524 0
 1694 00d8 2020     	 movs r0,#32
 1695 00da FFF7FEFF 	 bl sensorsClear
 525:../cleanflight/src/main/io/gps.c ****                 gpsSetState(GPS_LOST_COMMUNICATION);
 1696              	 .loc 2 525 0
 1697 00de 0520     	 movs r0,#5
 1698 00e0 FFF7FEFF 	 bl gpsSetState
 526:../cleanflight/src/main/io/gps.c ****             }
 527:../cleanflight/src/main/io/gps.c ****             break;
 1699              	 .loc 2 527 0
 1700 00e4 FFE7     	 b .L80
 1701              	.L77:
 1702              	.L80:
 1703 00e6 00BF     	 nop
 1704              	.L70:
 528:../cleanflight/src/main/io/gps.c ****     }
 529:../cleanflight/src/main/io/gps.c ****     if (sensors(SENSOR_GPS)) {
 1705              	 .loc 2 529 0
 1706 00e8 2020     	 movs r0,#32
 1707 00ea FFF7FEFF 	 bl sensors
 1708 00ee 0346     	 mov r3,r0
 1709 00f0 002B     	 cmp r3,#0
 1710 00f2 02D0     	 beq .L78
 530:../cleanflight/src/main/io/gps.c ****         updateGpsIndicator(currentTimeUs);
 1711              	 .loc 2 530 0
 1712 00f4 7868     	 ldr r0,[r7,#4]
 1713 00f6 FFF7FEFF 	 bl updateGpsIndicator
 1714              	.L78:
 531:../cleanflight/src/main/io/gps.c ****     }
 532:../cleanflight/src/main/io/gps.c **** #if defined(USE_GPS_RESCUE)
 533:../cleanflight/src/main/io/gps.c ****     if (gpsRescueIsConfigured()) {
 1715              	 .loc 2 533 0
 1716 00fa FFF7FEFF 	 bl gpsRescueIsConfigured
 1717 00fe 0346     	 mov r3,r0
 1718 0100 002B     	 cmp r3,#0
 1719 0102 01D0     	 beq .L66
 534:../cleanflight/src/main/io/gps.c ****         updateGPSRescueState();
 1720              	 .loc 2 534 0
 1721 0104 FFF7FEFF 	 bl updateGPSRescueState
 1722              	.L66:
 535:../cleanflight/src/main/io/gps.c ****     }
 536:../cleanflight/src/main/io/gps.c **** #endif
 537:../cleanflight/src/main/io/gps.c **** }
 1723              	 .loc 2 537 0
 1724 0108 0837     	 adds r7,r7,#8
 1725              	.LCFI40:
 1726              	 .cfi_def_cfa_offset 8
 1727 010a BD46     	 mov sp,r7
 1728              	.LCFI41:
 1729              	 .cfi_def_cfa_register 13
 1730              	 
 1731 010c 80BD     	 pop {r7,pc}
 1732              	.L82:
 1733 010e 00BF     	 .align 2
 1734              	.L81:
 1735 0110 00000000 	 .word gpsPort
 1736 0114 00000000 	 .word gpsData
 1737 0118 CDCCCCCC 	 .word -858993459
 1738 011c 00000000 	 .word gpsSol
 1739 0120 00000000 	 .word stateFlags
 1740              	 .cfi_endproc
 1741              	.LFE559:
 1743              	 .section .text.gpsNewData,"ax",%progbits
 1744              	 .align 2
 1745              	 .thumb
 1746              	 .thumb_func
 1748              	gpsNewData:
 1749              	.LFB560:
 538:../cleanflight/src/main/io/gps.c **** 
 539:../cleanflight/src/main/io/gps.c **** static void gpsNewData(uint16_t c)
 540:../cleanflight/src/main/io/gps.c **** {
 1750              	 .loc 2 540 0
 1751              	 .cfi_startproc
 1752              	 
 1753              	 
 1754 0000 80B5     	 push {r7,lr}
 1755              	.LCFI42:
 1756              	 .cfi_def_cfa_offset 8
 1757              	 .cfi_offset 7,-8
 1758              	 .cfi_offset 14,-4
 1759 0002 82B0     	 sub sp,sp,#8
 1760              	.LCFI43:
 1761              	 .cfi_def_cfa_offset 16
 1762 0004 00AF     	 add r7,sp,#0
 1763              	.LCFI44:
 1764              	 .cfi_def_cfa_register 7
 1765 0006 0346     	 mov r3,r0
 1766 0008 FB80     	 strh r3,[r7,#6]
 541:../cleanflight/src/main/io/gps.c ****     if (!gpsNewFrame(c)) {
 1767              	 .loc 2 541 0
 1768 000a FB88     	 ldrh r3,[r7,#6]
 1769 000c DBB2     	 uxtb r3,r3
 1770 000e 1846     	 mov r0,r3
 1771 0010 FFF7FEFF 	 bl gpsNewFrame
 1772 0014 0346     	 mov r3,r0
 1773 0016 83F00103 	 eor r3,r3,#1
 1774 001a DBB2     	 uxtb r3,r3
 1775 001c 002B     	 cmp r3,#0
 1776 001e 00D0     	 beq .L84
 542:../cleanflight/src/main/io/gps.c ****         return;
 1777              	 .loc 2 542 0
 1778 0020 18E0     	 b .L83
 1779              	.L84:
 543:../cleanflight/src/main/io/gps.c ****     }
 544:../cleanflight/src/main/io/gps.c **** 
 545:../cleanflight/src/main/io/gps.c ****     // new data received and parsed, we're in business
 546:../cleanflight/src/main/io/gps.c ****     gpsData.lastLastMessage = gpsData.lastMessage;
 1780              	 .loc 2 546 0
 1781 0022 0E4B     	 ldr r3,.L88
 1782 0024 9B68     	 ldr r3,[r3,#8]
 1783 0026 0D4A     	 ldr r2,.L88
 1784 0028 D360     	 str r3,[r2,#12]
 547:../cleanflight/src/main/io/gps.c ****     gpsData.lastMessage = millis();
 1785              	 .loc 2 547 0
 1786 002a FFF7FEFF 	 bl millis
 1787 002e 0246     	 mov r2,r0
 1788 0030 0A4B     	 ldr r3,.L88
 1789 0032 9A60     	 str r2,[r3,#8]
 548:../cleanflight/src/main/io/gps.c ****     sensorsSet(SENSOR_GPS);
 1790              	 .loc 2 548 0
 1791 0034 2020     	 movs r0,#32
 1792 0036 FFF7FEFF 	 bl sensorsSet
 549:../cleanflight/src/main/io/gps.c **** 
 550:../cleanflight/src/main/io/gps.c ****     if (GPS_update == 1)
 1793              	 .loc 2 550 0
 1794 003a 094B     	 ldr r3,.L88+4
 1795 003c 1B78     	 ldrb r3,[r3]
 1796 003e 012B     	 cmp r3,#1
 1797 0040 03D1     	 bne .L86
 551:../cleanflight/src/main/io/gps.c ****         GPS_update = 0;
 1798              	 .loc 2 551 0
 1799 0042 074B     	 ldr r3,.L88+4
 1800 0044 0022     	 movs r2,#0
 1801 0046 1A70     	 strb r2,[r3]
 1802 0048 02E0     	 b .L87
 1803              	.L86:
 552:../cleanflight/src/main/io/gps.c ****     else
 553:../cleanflight/src/main/io/gps.c ****         GPS_update = 1;
 1804              	 .loc 2 553 0
 1805 004a 054B     	 ldr r3,.L88+4
 1806 004c 0122     	 movs r2,#1
 1807 004e 1A70     	 strb r2,[r3]
 1808              	.L87:
 554:../cleanflight/src/main/io/gps.c **** 
 555:../cleanflight/src/main/io/gps.c **** #if 0
 556:../cleanflight/src/main/io/gps.c ****     debug[3] = GPS_update;
 557:../cleanflight/src/main/io/gps.c **** #endif
 558:../cleanflight/src/main/io/gps.c **** 
 559:../cleanflight/src/main/io/gps.c ****     onGpsNewData();
 1809              	 .loc 2 559 0
 1810 0050 FFF7FEFF 	 bl onGpsNewData
 1811              	.L83:
 560:../cleanflight/src/main/io/gps.c **** }
 1812              	 .loc 2 560 0
 1813 0054 0837     	 adds r7,r7,#8
 1814              	.LCFI45:
 1815              	 .cfi_def_cfa_offset 8
 1816 0056 BD46     	 mov sp,r7
 1817              	.LCFI46:
 1818              	 .cfi_def_cfa_register 13
 1819              	 
 1820 0058 80BD     	 pop {r7,pc}
 1821              	.L89:
 1822 005a 00BF     	 .align 2
 1823              	.L88:
 1824 005c 00000000 	 .word gpsData
 1825 0060 00000000 	 .word GPS_update
 1826              	 .cfi_endproc
 1827              	.LFE560:
 1829              	 .section .text.gpsNewFrame,"ax",%progbits
 1830              	 .align 2
 1831              	 .global gpsNewFrame
 1832              	 .thumb
 1833              	 .thumb_func
 1835              	gpsNewFrame:
 1836              	.LFB561:
 561:../cleanflight/src/main/io/gps.c **** 
 562:../cleanflight/src/main/io/gps.c **** bool gpsNewFrame(uint8_t c)
 563:../cleanflight/src/main/io/gps.c **** {
 1837              	 .loc 2 563 0
 1838              	 .cfi_startproc
 1839              	 
 1840              	 
 1841 0000 80B5     	 push {r7,lr}
 1842              	.LCFI47:
 1843              	 .cfi_def_cfa_offset 8
 1844              	 .cfi_offset 7,-8
 1845              	 .cfi_offset 14,-4
 1846 0002 82B0     	 sub sp,sp,#8
 1847              	.LCFI48:
 1848              	 .cfi_def_cfa_offset 16
 1849 0004 00AF     	 add r7,sp,#0
 1850              	.LCFI49:
 1851              	 .cfi_def_cfa_register 7
 1852 0006 0346     	 mov r3,r0
 1853 0008 FB71     	 strb r3,[r7,#7]
 564:../cleanflight/src/main/io/gps.c ****     switch (gpsConfig()->provider) {
 1854              	 .loc 2 564 0
 1855 000a FFF7FEFF 	 bl gpsConfig
 1856 000e 0346     	 mov r3,r0
 1857 0010 1B78     	 ldrb r3,[r3]
 1858 0012 002B     	 cmp r3,#0
 1859 0014 02D0     	 beq .L92
 1860 0016 012B     	 cmp r3,#1
 1861 0018 06D0     	 beq .L93
 1862 001a 0BE0     	 b .L95
 1863              	.L92:
 565:../cleanflight/src/main/io/gps.c ****     case GPS_NMEA:          // NMEA
 566:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_NMEA
 567:../cleanflight/src/main/io/gps.c ****         return gpsNewFrameNMEA(c);
 1864              	 .loc 2 567 0
 1865 001c FB79     	 ldrb r3,[r7,#7]
 1866 001e 1846     	 mov r0,r3
 1867 0020 FFF7FEFF 	 bl gpsNewFrameNMEA
 1868 0024 0346     	 mov r3,r0
 1869 0026 06E0     	 b .L94
 1870              	.L93:
 568:../cleanflight/src/main/io/gps.c **** #endif
 569:../cleanflight/src/main/io/gps.c ****         break;
 570:../cleanflight/src/main/io/gps.c ****     case GPS_UBLOX:         // UBX binary
 571:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_UBLOX
 572:../cleanflight/src/main/io/gps.c ****         return gpsNewFrameUBLOX(c);
 1871              	 .loc 2 572 0
 1872 0028 FB79     	 ldrb r3,[r7,#7]
 1873 002a 1846     	 mov r0,r3
 1874 002c FFF7FEFF 	 bl gpsNewFrameUBLOX
 1875 0030 0346     	 mov r3,r0
 1876 0032 00E0     	 b .L94
 1877              	.L95:
 573:../cleanflight/src/main/io/gps.c **** #endif
 574:../cleanflight/src/main/io/gps.c ****         break;
 575:../cleanflight/src/main/io/gps.c ****     }
 576:../cleanflight/src/main/io/gps.c ****     return false;
 1878              	 .loc 2 576 0
 1879 0034 0023     	 movs r3,#0
 1880              	.L94:
 577:../cleanflight/src/main/io/gps.c **** }
 1881              	 .loc 2 577 0
 1882 0036 1846     	 mov r0,r3
 1883 0038 0837     	 adds r7,r7,#8
 1884              	.LCFI50:
 1885              	 .cfi_def_cfa_offset 8
 1886 003a BD46     	 mov sp,r7
 1887              	.LCFI51:
 1888              	 .cfi_def_cfa_register 13
 1889              	 
 1890 003c 80BD     	 pop {r7,pc}
 1891              	 .cfi_endproc
 1892              	.LFE561:
 1894 003e 00BF     	 .section .text.grab_fields,"ax",%progbits
 1895              	 .align 2
 1896              	 .thumb
 1897              	 .thumb_func
 1899              	grab_fields:
 1900              	.LFB562:
 578:../cleanflight/src/main/io/gps.c **** 
 579:../cleanflight/src/main/io/gps.c **** 
 580:../cleanflight/src/main/io/gps.c **** /* This is a light implementation of a GPS frame decoding
 581:../cleanflight/src/main/io/gps.c ****    This should work with most of modern GPS devices configured to output 5 frames.
 582:../cleanflight/src/main/io/gps.c ****    It assumes there are some NMEA GGA frames to decode on the serial bus
 583:../cleanflight/src/main/io/gps.c ****    Now verifies checksum correctly before applying data
 584:../cleanflight/src/main/io/gps.c **** 
 585:../cleanflight/src/main/io/gps.c ****    Here we use only the following data :
 586:../cleanflight/src/main/io/gps.c ****      - latitude
 587:../cleanflight/src/main/io/gps.c ****      - longitude
 588:../cleanflight/src/main/io/gps.c ****      - GPS fix is/is not ok
 589:../cleanflight/src/main/io/gps.c ****      - GPS num sat (4 is enough to be +/- reliable)
 590:../cleanflight/src/main/io/gps.c ****      // added by Mis
 591:../cleanflight/src/main/io/gps.c ****      - GPS altitude (for OSD displaying)
 592:../cleanflight/src/main/io/gps.c ****      - GPS speed (for OSD displaying)
 593:../cleanflight/src/main/io/gps.c **** */
 594:../cleanflight/src/main/io/gps.c **** 
 595:../cleanflight/src/main/io/gps.c **** #define NO_FRAME   0
 596:../cleanflight/src/main/io/gps.c **** #define FRAME_GGA  1
 597:../cleanflight/src/main/io/gps.c **** #define FRAME_RMC  2
 598:../cleanflight/src/main/io/gps.c **** #define FRAME_GSV  3
 599:../cleanflight/src/main/io/gps.c **** 
 600:../cleanflight/src/main/io/gps.c **** 
 601:../cleanflight/src/main/io/gps.c **** // This code is used for parsing NMEA data
 602:../cleanflight/src/main/io/gps.c **** 
 603:../cleanflight/src/main/io/gps.c **** /* Alex optimization
 604:../cleanflight/src/main/io/gps.c ****   The latitude or longitude is coded this way in NMEA frames
 605:../cleanflight/src/main/io/gps.c ****   dm.f   coded as degrees + minutes + minute decimal
 606:../cleanflight/src/main/io/gps.c ****   Where:
 607:../cleanflight/src/main/io/gps.c ****     - d can be 1 or more char long. generally: 2 char long for latitude, 3 char long for longitude
 608:../cleanflight/src/main/io/gps.c ****     - m is always 2 char long
 609:../cleanflight/src/main/io/gps.c ****     - f can be 1 or more char long
 610:../cleanflight/src/main/io/gps.c ****   This function converts this format in a unique unsigned long where 1 degree = 10 000 000
 611:../cleanflight/src/main/io/gps.c **** 
 612:../cleanflight/src/main/io/gps.c ****   EOS increased the precision here, even if we think that the gps is not precise enough, with 10e5 
 613:../cleanflight/src/main/io/gps.c ****   with 10e7 it's around 1 cm now. Increasing it further is irrelevant, since even 1cm resolution is
 614:../cleanflight/src/main/io/gps.c ****   resolution also increased precision of nav calculations
 615:../cleanflight/src/main/io/gps.c **** static uint32_t GPS_coord_to_degrees(char *coordinateString)
 616:../cleanflight/src/main/io/gps.c **** {
 617:../cleanflight/src/main/io/gps.c ****     char *p = s, *d = s;
 618:../cleanflight/src/main/io/gps.c ****     uint8_t min, deg = 0;
 619:../cleanflight/src/main/io/gps.c ****     uint16_t frac = 0, mult = 10000;
 620:../cleanflight/src/main/io/gps.c **** 
 621:../cleanflight/src/main/io/gps.c ****     while (*p) {                // parse the string until its end
 622:../cleanflight/src/main/io/gps.c ****         if (d != s) {
 623:../cleanflight/src/main/io/gps.c ****             frac += (*p - '0') * mult;  // calculate only fractional part on up to 5 digits  (d != 
 624:../cleanflight/src/main/io/gps.c ****             mult /= 10;
 625:../cleanflight/src/main/io/gps.c ****         }
 626:../cleanflight/src/main/io/gps.c ****         if (*p == '.')
 627:../cleanflight/src/main/io/gps.c ****             d = p;              // locate '.' char in the string
 628:../cleanflight/src/main/io/gps.c ****         p++;
 629:../cleanflight/src/main/io/gps.c ****     }
 630:../cleanflight/src/main/io/gps.c ****     if (p == s)
 631:../cleanflight/src/main/io/gps.c ****         return 0;
 632:../cleanflight/src/main/io/gps.c ****     while (s < d - 2) {
 633:../cleanflight/src/main/io/gps.c ****         deg *= 10;              // convert degrees : all chars before minutes ; for the first itera
 634:../cleanflight/src/main/io/gps.c ****         deg += *(s++) - '0';
 635:../cleanflight/src/main/io/gps.c ****     }
 636:../cleanflight/src/main/io/gps.c ****     min = *(d - 1) - '0' + (*(d - 2) - '0') * 10;       // convert minutes : 2 previous char before
 637:../cleanflight/src/main/io/gps.c ****     return deg * 10000000UL + (min * 100000UL + frac) * 10UL / 6;
 638:../cleanflight/src/main/io/gps.c **** }
 639:../cleanflight/src/main/io/gps.c **** */
 640:../cleanflight/src/main/io/gps.c **** 
 641:../cleanflight/src/main/io/gps.c **** // helper functions
 642:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_NMEA
 643:../cleanflight/src/main/io/gps.c **** static uint32_t grab_fields(char *src, uint8_t mult)
 644:../cleanflight/src/main/io/gps.c **** {                               // convert string to uint32
 1901              	 .loc 2 644 0
 1902              	 .cfi_startproc
 1903              	 
 1904              	 
 1905              	 
 1906 0000 80B4     	 push {r7}
 1907              	.LCFI52:
 1908              	 .cfi_def_cfa_offset 4
 1909              	 .cfi_offset 7,-4
 1910 0002 87B0     	 sub sp,sp,#28
 1911              	.LCFI53:
 1912              	 .cfi_def_cfa_offset 32
 1913 0004 00AF     	 add r7,sp,#0
 1914              	.LCFI54:
 1915              	 .cfi_def_cfa_register 7
 1916 0006 7860     	 str r0,[r7,#4]
 1917 0008 0B46     	 mov r3,r1
 1918 000a FB70     	 strb r3,[r7,#3]
 645:../cleanflight/src/main/io/gps.c ****     uint32_t i;
 646:../cleanflight/src/main/io/gps.c ****     uint32_t tmp = 0;
 1919              	 .loc 2 646 0
 1920 000c 0023     	 movs r3,#0
 1921 000e 3B61     	 str r3,[r7,#16]
 647:../cleanflight/src/main/io/gps.c ****     int isneg = 0;
 1922              	 .loc 2 647 0
 1923 0010 0023     	 movs r3,#0
 1924 0012 FB60     	 str r3,[r7,#12]
 648:../cleanflight/src/main/io/gps.c ****     for (i = 0; src[i] != 0; i++) {
 1925              	 .loc 2 648 0
 1926 0014 0023     	 movs r3,#0
 1927 0016 7B61     	 str r3,[r7,#20]
 1928 0018 40E0     	 b .L97
 1929              	.L105:
 649:../cleanflight/src/main/io/gps.c ****         if ((i == 0) && (src[0] == '-')) { // detect negative sign
 1930              	 .loc 2 649 0
 1931 001a 7B69     	 ldr r3,[r7,#20]
 1932 001c 002B     	 cmp r3,#0
 1933 001e 06D1     	 bne .L98
 1934              	 .loc 2 649 0 is_stmt 0 discriminator 1
 1935 0020 7B68     	 ldr r3,[r7,#4]
 1936 0022 1B78     	 ldrb r3,[r3]
 1937 0024 2D2B     	 cmp r3,#45
 1938 0026 02D1     	 bne .L98
 650:../cleanflight/src/main/io/gps.c ****             isneg = 1;
 1939              	 .loc 2 650 0 is_stmt 1
 1940 0028 0123     	 movs r3,#1
 1941 002a FB60     	 str r3,[r7,#12]
 651:../cleanflight/src/main/io/gps.c ****             continue; // jump to next character if the first one was a negative sign
 1942              	 .loc 2 651 0
 1943 002c 33E0     	 b .L99
 1944              	.L98:
 652:../cleanflight/src/main/io/gps.c ****         }
 653:../cleanflight/src/main/io/gps.c ****         if (src[i] == '.') {
 1945              	 .loc 2 653 0
 1946 002e 7A68     	 ldr r2,[r7,#4]
 1947 0030 7B69     	 ldr r3,[r7,#20]
 1948 0032 1344     	 add r3,r3,r2
 1949 0034 1B78     	 ldrb r3,[r3]
 1950 0036 2E2B     	 cmp r3,#46
 1951 0038 0DD1     	 bne .L100
 654:../cleanflight/src/main/io/gps.c ****             i++;
 1952              	 .loc 2 654 0
 1953 003a 7B69     	 ldr r3,[r7,#20]
 1954 003c 0133     	 adds r3,r3,#1
 1955 003e 7B61     	 str r3,[r7,#20]
 655:../cleanflight/src/main/io/gps.c ****             if (mult == 0) {
 1956              	 .loc 2 655 0
 1957 0040 FB78     	 ldrb r3,[r7,#3]
 1958 0042 002B     	 cmp r3,#0
 1959 0044 00D1     	 bne .L101
 656:../cleanflight/src/main/io/gps.c ****                 break;
 1960              	 .loc 2 656 0
 1961 0046 2FE0     	 b .L102
 1962              	.L101:
 657:../cleanflight/src/main/io/gps.c ****             } else {
 658:../cleanflight/src/main/io/gps.c ****                 src[i + mult] = 0;
 1963              	 .loc 2 658 0
 1964 0048 FA78     	 ldrb r2,[r7,#3]
 1965 004a 7B69     	 ldr r3,[r7,#20]
 1966 004c 1344     	 add r3,r3,r2
 1967 004e 7A68     	 ldr r2,[r7,#4]
 1968 0050 1344     	 add r3,r3,r2
 1969 0052 0022     	 movs r2,#0
 1970 0054 1A70     	 strb r2,[r3]
 1971              	.L100:
 659:../cleanflight/src/main/io/gps.c ****             }
 660:../cleanflight/src/main/io/gps.c ****         }
 661:../cleanflight/src/main/io/gps.c ****         tmp *= 10;
 1972              	 .loc 2 661 0
 1973 0056 3A69     	 ldr r2,[r7,#16]
 1974 0058 1346     	 mov r3,r2
 1975 005a 9B00     	 lsls r3,r3,#2
 1976 005c 1344     	 add r3,r3,r2
 1977 005e 5B00     	 lsls r3,r3,#1
 1978 0060 3B61     	 str r3,[r7,#16]
 662:../cleanflight/src/main/io/gps.c ****         if (src[i] >= '0' && src[i] <= '9') {
 1979              	 .loc 2 662 0
 1980 0062 7A68     	 ldr r2,[r7,#4]
 1981 0064 7B69     	 ldr r3,[r7,#20]
 1982 0066 1344     	 add r3,r3,r2
 1983 0068 1B78     	 ldrb r3,[r3]
 1984 006a 2F2B     	 cmp r3,#47
 1985 006c 0ED9     	 bls .L103
 1986              	 .loc 2 662 0 is_stmt 0 discriminator 1
 1987 006e 7A68     	 ldr r2,[r7,#4]
 1988 0070 7B69     	 ldr r3,[r7,#20]
 1989 0072 1344     	 add r3,r3,r2
 1990 0074 1B78     	 ldrb r3,[r3]
 1991 0076 392B     	 cmp r3,#57
 1992 0078 08D8     	 bhi .L103
 663:../cleanflight/src/main/io/gps.c ****             tmp += src[i] - '0';
 1993              	 .loc 2 663 0 is_stmt 1
 1994 007a 7A68     	 ldr r2,[r7,#4]
 1995 007c 7B69     	 ldr r3,[r7,#20]
 1996 007e 1344     	 add r3,r3,r2
 1997 0080 1B78     	 ldrb r3,[r3]
 1998 0082 1A46     	 mov r2,r3
 1999 0084 3B69     	 ldr r3,[r7,#16]
 2000 0086 1344     	 add r3,r3,r2
 2001 0088 303B     	 subs r3,r3,#48
 2002 008a 3B61     	 str r3,[r7,#16]
 2003              	.L103:
 664:../cleanflight/src/main/io/gps.c ****         }
 665:../cleanflight/src/main/io/gps.c ****         if (i >= 15) {
 2004              	 .loc 2 665 0
 2005 008c 7B69     	 ldr r3,[r7,#20]
 2006 008e 0E2B     	 cmp r3,#14
 2007 0090 01D9     	 bls .L99
 666:../cleanflight/src/main/io/gps.c ****             return 0; // out of bounds
 2008              	 .loc 2 666 0
 2009 0092 0023     	 movs r3,#0
 2010 0094 10E0     	 b .L104
 2011              	.L99:
 648:../cleanflight/src/main/io/gps.c ****         if ((i == 0) && (src[0] == '-')) { // detect negative sign
 2012              	 .loc 2 648 0 discriminator 2
 2013 0096 7B69     	 ldr r3,[r7,#20]
 2014 0098 0133     	 adds r3,r3,#1
 2015 009a 7B61     	 str r3,[r7,#20]
 2016              	.L97:
 648:../cleanflight/src/main/io/gps.c ****         if ((i == 0) && (src[0] == '-')) { // detect negative sign
 2017              	 .loc 2 648 0 is_stmt 0 discriminator 1
 2018 009c 7A68     	 ldr r2,[r7,#4]
 2019 009e 7B69     	 ldr r3,[r7,#20]
 2020 00a0 1344     	 add r3,r3,r2
 2021 00a2 1B78     	 ldrb r3,[r3]
 2022 00a4 002B     	 cmp r3,#0
 2023 00a6 B8D1     	 bne .L105
 2024              	.L102:
 667:../cleanflight/src/main/io/gps.c ****         }
 668:../cleanflight/src/main/io/gps.c ****     }
 669:../cleanflight/src/main/io/gps.c ****     return isneg ? -tmp : tmp;    // handle negative altitudes
 2025              	 .loc 2 669 0 is_stmt 1
 2026 00a8 FB68     	 ldr r3,[r7,#12]
 2027 00aa 002B     	 cmp r3,#0
 2028 00ac 02D0     	 beq .L106
 2029              	 .loc 2 669 0 is_stmt 0 discriminator 1
 2030 00ae 3B69     	 ldr r3,[r7,#16]
 2031 00b0 5B42     	 negs r3,r3
 2032 00b2 00E0     	 b .L108
 2033              	.L106:
 2034              	 .loc 2 669 0 discriminator 2
 2035 00b4 3B69     	 ldr r3,[r7,#16]
 2036              	.L108:
 2037              	 .loc 2 669 0
 2038 00b6 00BF     	 nop
 2039              	.L104:
 670:../cleanflight/src/main/io/gps.c **** }
 2040              	 .loc 2 670 0 is_stmt 1
 2041 00b8 1846     	 mov r0,r3
 2042 00ba 1C37     	 adds r7,r7,#28
 2043              	.LCFI55:
 2044              	 .cfi_def_cfa_offset 4
 2045 00bc BD46     	 mov sp,r7
 2046              	.LCFI56:
 2047              	 .cfi_def_cfa_register 13
 2048              	 
 2049 00be 5DF8047B 	 ldr r7,[sp],#4
 2050              	.LCFI57:
 2051              	 .cfi_restore 7
 2052              	 .cfi_def_cfa_offset 0
 2053 00c2 7047     	 bx lr
 2054              	 .cfi_endproc
 2055              	.LFE562:
 2057              	 .section .text.gpsNewFrameNMEA,"ax",%progbits
 2058              	 .align 2
 2059              	 .thumb
 2060              	 .thumb_func
 2062              	gpsNewFrameNMEA:
 2063              	.LFB563:
 671:../cleanflight/src/main/io/gps.c **** 
 672:../cleanflight/src/main/io/gps.c **** typedef struct gpsDataNmea_s {
 673:../cleanflight/src/main/io/gps.c ****     int32_t latitude;
 674:../cleanflight/src/main/io/gps.c ****     int32_t longitude;
 675:../cleanflight/src/main/io/gps.c ****     uint8_t numSat;
 676:../cleanflight/src/main/io/gps.c ****     int32_t altitude;
 677:../cleanflight/src/main/io/gps.c ****     uint16_t speed;
 678:../cleanflight/src/main/io/gps.c ****     uint16_t hdop;
 679:../cleanflight/src/main/io/gps.c ****     uint16_t ground_course;
 680:../cleanflight/src/main/io/gps.c ****     uint32_t time;
 681:../cleanflight/src/main/io/gps.c ****     uint32_t date;
 682:../cleanflight/src/main/io/gps.c **** } gpsDataNmea_t;
 683:../cleanflight/src/main/io/gps.c **** 
 684:../cleanflight/src/main/io/gps.c **** static bool gpsNewFrameNMEA(char c)
 685:../cleanflight/src/main/io/gps.c **** {
 2064              	 .loc 2 685 0
 2065              	 .cfi_startproc
 2066              	 
 2067              	 
 2068 0000 90B5     	 push {r4,r7,lr}
 2069              	.LCFI58:
 2070              	 .cfi_def_cfa_offset 12
 2071              	 .cfi_offset 4,-12
 2072              	 .cfi_offset 7,-8
 2073              	 .cfi_offset 14,-4
 2074 0002 87B0     	 sub sp,sp,#28
 2075              	.LCFI59:
 2076              	 .cfi_def_cfa_offset 40
 2077 0004 00AF     	 add r7,sp,#0
 2078              	.LCFI60:
 2079              	 .cfi_def_cfa_register 7
 2080 0006 0346     	 mov r3,r0
 2081 0008 FB71     	 strb r3,[r7,#7]
 686:../cleanflight/src/main/io/gps.c ****     static gpsDataNmea_t gps_Msg;
 687:../cleanflight/src/main/io/gps.c **** 
 688:../cleanflight/src/main/io/gps.c ****     uint8_t frameOK = 0;
 2082              	 .loc 2 688 0
 2083 000a 0023     	 movs r3,#0
 2084 000c FB75     	 strb r3,[r7,#23]
 689:../cleanflight/src/main/io/gps.c ****     static uint8_t param = 0, offset = 0, parity = 0;
 690:../cleanflight/src/main/io/gps.c ****     static char string[15];
 691:../cleanflight/src/main/io/gps.c ****     static uint8_t checksum_param, gps_frame = NO_FRAME;
 692:../cleanflight/src/main/io/gps.c ****     static uint8_t svMessageNum = 0;
 693:../cleanflight/src/main/io/gps.c ****     uint8_t svSatNum = 0, svPacketIdx = 0, svSatParam = 0;
 2085              	 .loc 2 693 0
 2086 000e 0023     	 movs r3,#0
 2087 0010 BB75     	 strb r3,[r7,#22]
 2088 0012 0023     	 movs r3,#0
 2089 0014 7B75     	 strb r3,[r7,#21]
 2090 0016 0023     	 movs r3,#0
 2091 0018 3B75     	 strb r3,[r7,#20]
 694:../cleanflight/src/main/io/gps.c **** 
 695:../cleanflight/src/main/io/gps.c ****     switch (c) {
 2092              	 .loc 2 695 0
 2093 001a FB79     	 ldrb r3,[r7,#7]
 2094 001c 0A3B     	 subs r3,r3,#10
 2095 001e 222B     	 cmp r3,#34
 2096 0020 00F24283 	 bhi .L110
 2097 0024 01A2     	 adr r2,.L112
 2098 0026 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2099 002a 00BF     	 .p2align 2
 2100              	.L112:
 2101 002c 55040000 	 .word .L111+1
 2102 0030 A9060000 	 .word .L110+1
 2103 0034 A9060000 	 .word .L110+1
 2104 0038 55040000 	 .word .L111+1
 2105 003c A9060000 	 .word .L110+1
 2106 0040 A9060000 	 .word .L110+1
 2107 0044 A9060000 	 .word .L110+1
 2108 0048 A9060000 	 .word .L110+1
 2109 004c A9060000 	 .word .L110+1
 2110 0050 A9060000 	 .word .L110+1
 2111 0054 A9060000 	 .word .L110+1
 2112 0058 A9060000 	 .word .L110+1
 2113 005c A9060000 	 .word .L110+1
 2114 0060 A9060000 	 .word .L110+1
 2115 0064 A9060000 	 .word .L110+1
 2116 0068 A9060000 	 .word .L110+1
 2117 006c A9060000 	 .word .L110+1
 2118 0070 A9060000 	 .word .L110+1
 2119 0074 A9060000 	 .word .L110+1
 2120 0078 A9060000 	 .word .L110+1
 2121 007c A9060000 	 .word .L110+1
 2122 0080 A9060000 	 .word .L110+1
 2123 0084 A9060000 	 .word .L110+1
 2124 0088 A9060000 	 .word .L110+1
 2125 008c A9060000 	 .word .L110+1
 2126 0090 A9060000 	 .word .L110+1
 2127 0094 B9000000 	 .word .L113+1
 2128 0098 A9060000 	 .word .L110+1
 2129 009c A9060000 	 .word .L110+1
 2130 00a0 A9060000 	 .word .L110+1
 2131 00a4 A9060000 	 .word .L110+1
 2132 00a8 A9060000 	 .word .L110+1
 2133 00ac CD000000 	 .word .L114+1
 2134 00b0 A9060000 	 .word .L110+1
 2135 00b4 CD000000 	 .word .L114+1
 2136              	 .p2align 1
 2137              	.L113:
 696:../cleanflight/src/main/io/gps.c ****         case '$':
 697:../cleanflight/src/main/io/gps.c ****             param = 0;
 2138              	 .loc 2 697 0
 2139 00b8 A74B     	 ldr r3,.L170
 2140 00ba 0022     	 movs r2,#0
 2141 00bc 1A70     	 strb r2,[r3]
 698:../cleanflight/src/main/io/gps.c ****             offset = 0;
 2142              	 .loc 2 698 0
 2143 00be A74B     	 ldr r3,.L170+4
 2144 00c0 0022     	 movs r2,#0
 2145 00c2 1A70     	 strb r2,[r3]
 699:../cleanflight/src/main/io/gps.c ****             parity = 0;
 2146              	 .loc 2 699 0
 2147 00c4 A64B     	 ldr r3,.L170+8
 2148 00c6 0022     	 movs r2,#0
 2149 00c8 1A70     	 strb r2,[r3]
 700:../cleanflight/src/main/io/gps.c ****             break;
 2150              	 .loc 2 700 0
 2151 00ca 06E3     	 b .L115
 2152              	.L114:
 701:../cleanflight/src/main/io/gps.c ****         case ',':
 702:../cleanflight/src/main/io/gps.c ****         case '*':
 703:../cleanflight/src/main/io/gps.c ****             string[offset] = 0;
 2153              	 .loc 2 703 0
 2154 00cc A34B     	 ldr r3,.L170+4
 2155 00ce 1B78     	 ldrb r3,[r3]
 2156 00d0 1A46     	 mov r2,r3
 2157 00d2 A44B     	 ldr r3,.L170+12
 2158 00d4 0021     	 movs r1,#0
 2159 00d6 9954     	 strb r1,[r3,r2]
 704:../cleanflight/src/main/io/gps.c ****             if (param == 0) {       //frame identification
 2160              	 .loc 2 704 0
 2161 00d8 9F4B     	 ldr r3,.L170
 2162 00da 1B78     	 ldrb r3,[r3]
 2163 00dc 002B     	 cmp r3,#0
 2164 00de 47D1     	 bne .L116
 705:../cleanflight/src/main/io/gps.c ****                 gps_frame = NO_FRAME;
 2165              	 .loc 2 705 0
 2166 00e0 A14B     	 ldr r3,.L170+16
 2167 00e2 0022     	 movs r2,#0
 2168 00e4 1A70     	 strb r2,[r3]
 706:../cleanflight/src/main/io/gps.c ****                 if (string[0] == 'G' && string[1] == 'P' && string[2] == 'G' && string[3] == 'G' &&
 2169              	 .loc 2 706 0
 2170 00e6 9F4B     	 ldr r3,.L170+12
 2171 00e8 1B78     	 ldrb r3,[r3]
 2172 00ea 472B     	 cmp r3,#71
 2173 00ec 12D1     	 bne .L117
 2174              	 .loc 2 706 0 is_stmt 0 discriminator 1
 2175 00ee 9D4B     	 ldr r3,.L170+12
 2176 00f0 5B78     	 ldrb r3,[r3,#1]
 2177 00f2 502B     	 cmp r3,#80
 2178 00f4 0ED1     	 bne .L117
 2179              	 .loc 2 706 0 discriminator 2
 2180 00f6 9B4B     	 ldr r3,.L170+12
 2181 00f8 9B78     	 ldrb r3,[r3,#2]
 2182 00fa 472B     	 cmp r3,#71
 2183 00fc 0AD1     	 bne .L117
 2184              	 .loc 2 706 0 discriminator 3
 2185 00fe 994B     	 ldr r3,.L170+12
 2186 0100 DB78     	 ldrb r3,[r3,#3]
 2187 0102 472B     	 cmp r3,#71
 2188 0104 06D1     	 bne .L117
 2189              	 .loc 2 706 0 discriminator 4
 2190 0106 974B     	 ldr r3,.L170+12
 2191 0108 1B79     	 ldrb r3,[r3,#4]
 2192 010a 412B     	 cmp r3,#65
 2193 010c 02D1     	 bne .L117
 707:../cleanflight/src/main/io/gps.c ****                     gps_frame = FRAME_GGA;
 2194              	 .loc 2 707 0 is_stmt 1
 2195 010e 964B     	 ldr r3,.L170+16
 2196 0110 0122     	 movs r2,#1
 2197 0112 1A70     	 strb r2,[r3]
 2198              	.L117:
 708:../cleanflight/src/main/io/gps.c ****                 if (string[0] == 'G' && string[1] == 'P' && string[2] == 'R' && string[3] == 'M' &&
 2199              	 .loc 2 708 0
 2200 0114 934B     	 ldr r3,.L170+12
 2201 0116 1B78     	 ldrb r3,[r3]
 2202 0118 472B     	 cmp r3,#71
 2203 011a 12D1     	 bne .L118
 2204              	 .loc 2 708 0 is_stmt 0 discriminator 1
 2205 011c 914B     	 ldr r3,.L170+12
 2206 011e 5B78     	 ldrb r3,[r3,#1]
 2207 0120 502B     	 cmp r3,#80
 2208 0122 0ED1     	 bne .L118
 2209              	 .loc 2 708 0 discriminator 2
 2210 0124 8F4B     	 ldr r3,.L170+12
 2211 0126 9B78     	 ldrb r3,[r3,#2]
 2212 0128 522B     	 cmp r3,#82
 2213 012a 0AD1     	 bne .L118
 2214              	 .loc 2 708 0 discriminator 3
 2215 012c 8D4B     	 ldr r3,.L170+12
 2216 012e DB78     	 ldrb r3,[r3,#3]
 2217 0130 4D2B     	 cmp r3,#77
 2218 0132 06D1     	 bne .L118
 2219              	 .loc 2 708 0 discriminator 4
 2220 0134 8B4B     	 ldr r3,.L170+12
 2221 0136 1B79     	 ldrb r3,[r3,#4]
 2222 0138 432B     	 cmp r3,#67
 2223 013a 02D1     	 bne .L118
 709:../cleanflight/src/main/io/gps.c ****                     gps_frame = FRAME_RMC;
 2224              	 .loc 2 709 0 is_stmt 1
 2225 013c 8A4B     	 ldr r3,.L170+16
 2226 013e 0222     	 movs r2,#2
 2227 0140 1A70     	 strb r2,[r3]
 2228              	.L118:
 710:../cleanflight/src/main/io/gps.c ****                 if (string[0] == 'G' && string[1] == 'P' && string[2] == 'G' && string[3] == 'S' &&
 2229              	 .loc 2 710 0
 2230 0142 884B     	 ldr r3,.L170+12
 2231 0144 1B78     	 ldrb r3,[r3]
 2232 0146 472B     	 cmp r3,#71
 2233 0148 12D1     	 bne .L116
 2234              	 .loc 2 710 0 is_stmt 0 discriminator 1
 2235 014a 864B     	 ldr r3,.L170+12
 2236 014c 5B78     	 ldrb r3,[r3,#1]
 2237 014e 502B     	 cmp r3,#80
 2238 0150 0ED1     	 bne .L116
 2239              	 .loc 2 710 0 discriminator 2
 2240 0152 844B     	 ldr r3,.L170+12
 2241 0154 9B78     	 ldrb r3,[r3,#2]
 2242 0156 472B     	 cmp r3,#71
 2243 0158 0AD1     	 bne .L116
 2244              	 .loc 2 710 0 discriminator 3
 2245 015a 824B     	 ldr r3,.L170+12
 2246 015c DB78     	 ldrb r3,[r3,#3]
 2247 015e 532B     	 cmp r3,#83
 2248 0160 06D1     	 bne .L116
 2249              	 .loc 2 710 0 discriminator 4
 2250 0162 804B     	 ldr r3,.L170+12
 2251 0164 1B79     	 ldrb r3,[r3,#4]
 2252 0166 562B     	 cmp r3,#86
 2253 0168 02D1     	 bne .L116
 711:../cleanflight/src/main/io/gps.c ****                     gps_frame = FRAME_GSV;
 2254              	 .loc 2 711 0 is_stmt 1
 2255 016a 7F4B     	 ldr r3,.L170+16
 2256 016c 0322     	 movs r2,#3
 2257 016e 1A70     	 strb r2,[r3]
 2258              	.L116:
 712:../cleanflight/src/main/io/gps.c ****             }
 713:../cleanflight/src/main/io/gps.c **** 
 714:../cleanflight/src/main/io/gps.c ****             switch (gps_frame) {
 2259              	 .loc 2 714 0
 2260 0170 7D4B     	 ldr r3,.L170+16
 2261 0172 1B78     	 ldrb r3,[r3]
 2262 0174 022B     	 cmp r3,#2
 2263 0176 00F08580 	 beq .L120
 2264 017a 032B     	 cmp r3,#3
 2265 017c 00F0CD80 	 beq .L121
 2266 0180 012B     	 cmp r3,#1
 2267 0182 40F04F81 	 bne .L119
 715:../cleanflight/src/main/io/gps.c ****                 case FRAME_GGA:        //************* GPGGA FRAME parsing
 716:../cleanflight/src/main/io/gps.c ****                     switch (param) {
 2268              	 .loc 2 716 0
 2269 0186 744B     	 ldr r3,.L170
 2270 0188 1B78     	 ldrb r3,[r3]
 2271 018a 023B     	 subs r3,r3,#2
 2272 018c 072B     	 cmp r3,#7
 2273 018e 00F24681 	 bhi .L167
 2274 0192 01A2     	 adr r2,.L125
 2275 0194 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2276              	 .p2align 2
 2277              	.L125:
 2278 0198 B9010000 	 .word .L124+1
 2279 019c C9010000 	 .word .L126+1
 2280 01a0 DF010000 	 .word .L127+1
 2281 01a4 EF010000 	 .word .L128+1
 2282 01a8 05020000 	 .word .L129+1
 2283 01ac 2D020000 	 .word .L130+1
 2284 01b0 3F020000 	 .word .L131+1
 2285 01b4 67020000 	 .word .L132+1
 2286              	 .p2align 1
 2287              	.L124:
 717:../cleanflight/src/main/io/gps.c ****             //          case 1:             // Time information
 718:../cleanflight/src/main/io/gps.c ****             //              break;
 719:../cleanflight/src/main/io/gps.c ****                         case 2:
 720:../cleanflight/src/main/io/gps.c ****                             gps_Msg.latitude = GPS_coord_to_degrees(string);
 2288              	 .loc 2 720 0
 2289 01b8 6A48     	 ldr r0,.L170+12
 2290 01ba FFF7FEFF 	 bl GPS_coord_to_degrees
 2291 01be 0346     	 mov r3,r0
 2292 01c0 1A46     	 mov r2,r3
 2293 01c2 6A4B     	 ldr r3,.L170+20
 2294 01c4 1A60     	 str r2,[r3]
 721:../cleanflight/src/main/io/gps.c ****                             break;
 2295              	 .loc 2 721 0
 2296 01c6 5CE0     	 b .L123
 2297              	.L126:
 722:../cleanflight/src/main/io/gps.c ****                         case 3:
 723:../cleanflight/src/main/io/gps.c ****                             if (string[0] == 'S')
 2298              	 .loc 2 723 0
 2299 01c8 664B     	 ldr r3,.L170+12
 2300 01ca 1B78     	 ldrb r3,[r3]
 2301 01cc 532B     	 cmp r3,#83
 2302 01ce 05D1     	 bne .L133
 724:../cleanflight/src/main/io/gps.c ****                                 gps_Msg.latitude *= -1;
 2303              	 .loc 2 724 0
 2304 01d0 664B     	 ldr r3,.L170+20
 2305 01d2 1B68     	 ldr r3,[r3]
 2306 01d4 5B42     	 negs r3,r3
 2307 01d6 654A     	 ldr r2,.L170+20
 2308 01d8 1360     	 str r3,[r2]
 725:../cleanflight/src/main/io/gps.c ****                             break;
 2309              	 .loc 2 725 0
 2310 01da 52E0     	 b .L123
 2311              	.L133:
 2312 01dc 51E0     	 b .L123
 2313              	.L127:
 726:../cleanflight/src/main/io/gps.c ****                         case 4:
 727:../cleanflight/src/main/io/gps.c ****                             gps_Msg.longitude = GPS_coord_to_degrees(string);
 2314              	 .loc 2 727 0
 2315 01de 6148     	 ldr r0,.L170+12
 2316 01e0 FFF7FEFF 	 bl GPS_coord_to_degrees
 2317 01e4 0346     	 mov r3,r0
 2318 01e6 1A46     	 mov r2,r3
 2319 01e8 604B     	 ldr r3,.L170+20
 2320 01ea 5A60     	 str r2,[r3,#4]
 728:../cleanflight/src/main/io/gps.c ****                             break;
 2321              	 .loc 2 728 0
 2322 01ec 49E0     	 b .L123
 2323              	.L128:
 729:../cleanflight/src/main/io/gps.c ****                         case 5:
 730:../cleanflight/src/main/io/gps.c ****                             if (string[0] == 'W')
 2324              	 .loc 2 730 0
 2325 01ee 5D4B     	 ldr r3,.L170+12
 2326 01f0 1B78     	 ldrb r3,[r3]
 2327 01f2 572B     	 cmp r3,#87
 2328 01f4 05D1     	 bne .L134
 731:../cleanflight/src/main/io/gps.c ****                                 gps_Msg.longitude *= -1;
 2329              	 .loc 2 731 0
 2330 01f6 5D4B     	 ldr r3,.L170+20
 2331 01f8 5B68     	 ldr r3,[r3,#4]
 2332 01fa 5B42     	 negs r3,r3
 2333 01fc 5B4A     	 ldr r2,.L170+20
 2334 01fe 5360     	 str r3,[r2,#4]
 732:../cleanflight/src/main/io/gps.c ****                             break;
 2335              	 .loc 2 732 0
 2336 0200 3FE0     	 b .L123
 2337              	.L134:
 2338              	 .loc 2 732 0 is_stmt 0 discriminator 2
 2339 0202 3EE0     	 b .L123
 2340              	.L129:
 733:../cleanflight/src/main/io/gps.c ****                         case 6:
 734:../cleanflight/src/main/io/gps.c ****                             if (string[0] > '0') {
 2341              	 .loc 2 734 0 is_stmt 1
 2342 0204 574B     	 ldr r3,.L170+12
 2343 0206 1B78     	 ldrb r3,[r3]
 2344 0208 302B     	 cmp r3,#48
 2345 020a 07D9     	 bls .L135
 735:../cleanflight/src/main/io/gps.c ****                                 ENABLE_STATE(GPS_FIX);
 2346              	 .loc 2 735 0
 2347 020c 584B     	 ldr r3,.L170+24
 2348 020e 1B78     	 ldrb r3,[r3]
 2349 0210 43F00203 	 orr r3,r3,#2
 2350 0214 DAB2     	 uxtb r2,r3
 2351 0216 564B     	 ldr r3,.L170+24
 2352 0218 1A70     	 strb r2,[r3]
 736:../cleanflight/src/main/io/gps.c ****                             } else {
 737:../cleanflight/src/main/io/gps.c ****                                 DISABLE_STATE(GPS_FIX);
 738:../cleanflight/src/main/io/gps.c ****                             }
 739:../cleanflight/src/main/io/gps.c ****                             break;
 2353              	 .loc 2 739 0
 2354 021a 32E0     	 b .L123
 2355              	.L135:
 737:../cleanflight/src/main/io/gps.c ****                             }
 2356              	 .loc 2 737 0
 2357 021c 544B     	 ldr r3,.L170+24
 2358 021e 1B78     	 ldrb r3,[r3]
 2359 0220 23F00203 	 bic r3,r3,#2
 2360 0224 DAB2     	 uxtb r2,r3
 2361 0226 524B     	 ldr r3,.L170+24
 2362 0228 1A70     	 strb r2,[r3]
 2363              	 .loc 2 739 0
 2364 022a 2AE0     	 b .L123
 2365              	.L130:
 740:../cleanflight/src/main/io/gps.c ****                         case 7:
 741:../cleanflight/src/main/io/gps.c ****                             gps_Msg.numSat = grab_fields(string, 0);
 2366              	 .loc 2 741 0
 2367 022c 4D48     	 ldr r0,.L170+12
 2368 022e 0021     	 movs r1,#0
 2369 0230 FFF7FEFF 	 bl grab_fields
 2370 0234 0346     	 mov r3,r0
 2371 0236 DAB2     	 uxtb r2,r3
 2372 0238 4C4B     	 ldr r3,.L170+20
 2373 023a 1A72     	 strb r2,[r3,#8]
 742:../cleanflight/src/main/io/gps.c ****                             break;
 2374              	 .loc 2 742 0
 2375 023c 21E0     	 b .L123
 2376              	.L131:
 743:../cleanflight/src/main/io/gps.c ****                         case 8:
 744:../cleanflight/src/main/io/gps.c ****                             gps_Msg.hdop = grab_fields(string, 1) * 100;          // hdop
 2377              	 .loc 2 744 0
 2378 023e 4948     	 ldr r0,.L170+12
 2379 0240 0121     	 movs r1,#1
 2380 0242 FFF7FEFF 	 bl grab_fields
 2381 0246 0346     	 mov r3,r0
 2382 0248 9BB2     	 uxth r3,r3
 2383 024a 1A46     	 mov r2,r3
 2384 024c 9200     	 lsls r2,r2,#2
 2385 024e 1344     	 add r3,r3,r2
 2386 0250 1A46     	 mov r2,r3
 2387 0252 9100     	 lsls r1,r2,#2
 2388 0254 1A46     	 mov r2,r3
 2389 0256 0B46     	 mov r3,r1
 2390 0258 1344     	 add r3,r3,r2
 2391 025a 9B00     	 lsls r3,r3,#2
 2392 025c 9AB2     	 uxth r2,r3
 2393 025e 434B     	 ldr r3,.L170+20
 2394 0260 A3F80F20 	 strh r2,[r3,#15]
 745:../cleanflight/src/main/io/gps.c ****                             break;
 2395              	 .loc 2 745 0
 2396 0264 0DE0     	 b .L123
 2397              	.L132:
 746:../cleanflight/src/main/io/gps.c ****                         case 9:
 747:../cleanflight/src/main/io/gps.c ****                             gps_Msg.altitude = grab_fields(string, 1) * 10;     // altitude in cent
 2398              	 .loc 2 747 0
 2399 0266 3F48     	 ldr r0,.L170+12
 2400 0268 0121     	 movs r1,#1
 2401 026a FFF7FEFF 	 bl grab_fields
 2402 026e 0246     	 mov r2,r0
 2403 0270 1346     	 mov r3,r2
 2404 0272 9B00     	 lsls r3,r3,#2
 2405 0274 1344     	 add r3,r3,r2
 2406 0276 5B00     	 lsls r3,r3,#1
 2407 0278 1A46     	 mov r2,r3
 2408 027a 3C4B     	 ldr r3,.L170+20
 2409 027c C3F80920 	 str r2,[r3,#9]
 748:../cleanflight/src/main/io/gps.c ****                             break;
 2410              	 .loc 2 748 0
 2411 0280 00BF     	 nop
 2412              	.L123:
 749:../cleanflight/src/main/io/gps.c ****                     }
 750:../cleanflight/src/main/io/gps.c ****                     break;
 2413              	 .loc 2 750 0 discriminator 1
 2414 0282 CCE0     	 b .L167
 2415              	.L120:
 751:../cleanflight/src/main/io/gps.c ****                 case FRAME_RMC:        //************* GPRMC FRAME parsing
 752:../cleanflight/src/main/io/gps.c ****                     switch (param) {
 2416              	 .loc 2 752 0
 2417 0284 344B     	 ldr r3,.L170
 2418 0286 1B78     	 ldrb r3,[r3]
 2419 0288 013B     	 subs r3,r3,#1
 2420 028a 082B     	 cmp r3,#8
 2421 028c 00F2C980 	 bhi .L168
 2422 0290 01A2     	 adr r2,.L139
 2423 0292 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2424 0296 00BF     	 .p2align 2
 2425              	.L139:
 2426 0298 BD020000 	 .word .L138+1
 2427 029c 23040000 	 .word .L168+1
 2428 02a0 23040000 	 .word .L168+1
 2429 02a4 23040000 	 .word .L168+1
 2430 02a8 23040000 	 .word .L168+1
 2431 02ac 23040000 	 .word .L168+1
 2432 02b0 CF020000 	 .word .L140+1
 2433 02b4 F3020000 	 .word .L141+1
 2434 02b8 07030000 	 .word .L142+1
 2435              	 .p2align 1
 2436              	.L138:
 753:../cleanflight/src/main/io/gps.c ****                         case 1:
 754:../cleanflight/src/main/io/gps.c ****                             gps_Msg.time = grab_fields(string, 2); // UTC time hhmmss.ss
 2437              	 .loc 2 754 0
 2438 02bc 2948     	 ldr r0,.L170+12
 2439 02be 0221     	 movs r1,#2
 2440 02c0 FFF7FEFF 	 bl grab_fields
 2441 02c4 0246     	 mov r2,r0
 2442 02c6 294B     	 ldr r3,.L170+20
 2443 02c8 C3F81320 	 str r2,[r3,#19]
 755:../cleanflight/src/main/io/gps.c ****                             break;
 2444              	 .loc 2 755 0
 2445 02cc 24E0     	 b .L137
 2446              	.L140:
 756:../cleanflight/src/main/io/gps.c ****                         case 7:
 757:../cleanflight/src/main/io/gps.c ****                             gps_Msg.speed = ((grab_fields(string, 1) * 5144L) / 1000L);    // speed
 2447              	 .loc 2 757 0
 2448 02ce 2548     	 ldr r0,.L170+12
 2449 02d0 0121     	 movs r1,#1
 2450 02d2 FFF7FEFF 	 bl grab_fields
 2451 02d6 0246     	 mov r2,r0
 2452 02d8 41F21843 	 movw r3,#5144
 2453 02dc 03FB02F3 	 mul r3,r3,r2
 2454 02e0 244A     	 ldr r2,.L170+28
 2455 02e2 A2FB0323 	 umull r2,r3,r2,r3
 2456 02e6 9B09     	 lsrs r3,r3,#6
 2457 02e8 9AB2     	 uxth r2,r3
 2458 02ea 204B     	 ldr r3,.L170+20
 2459 02ec A3F80D20 	 strh r2,[r3,#13]
 758:../cleanflight/src/main/io/gps.c ****                             break;
 2460              	 .loc 2 758 0
 2461 02f0 12E0     	 b .L137
 2462              	.L141:
 759:../cleanflight/src/main/io/gps.c ****                         case 8:
 760:../cleanflight/src/main/io/gps.c ****                             gps_Msg.ground_course = (grab_fields(string, 1));      // ground course
 2463              	 .loc 2 760 0
 2464 02f2 1C48     	 ldr r0,.L170+12
 2465 02f4 0121     	 movs r1,#1
 2466 02f6 FFF7FEFF 	 bl grab_fields
 2467 02fa 0346     	 mov r3,r0
 2468 02fc 9AB2     	 uxth r2,r3
 2469 02fe 1B4B     	 ldr r3,.L170+20
 2470 0300 A3F81120 	 strh r2,[r3,#17]
 761:../cleanflight/src/main/io/gps.c ****                             break;
 2471              	 .loc 2 761 0
 2472 0304 08E0     	 b .L137
 2473              	.L142:
 762:../cleanflight/src/main/io/gps.c ****                         case 9:
 763:../cleanflight/src/main/io/gps.c ****                             gps_Msg.date = grab_fields(string, 0); // date dd/mm/yy
 2474              	 .loc 2 763 0
 2475 0306 1748     	 ldr r0,.L170+12
 2476 0308 0021     	 movs r1,#0
 2477 030a FFF7FEFF 	 bl grab_fields
 2478 030e 0246     	 mov r2,r0
 2479 0310 164B     	 ldr r3,.L170+20
 2480 0312 C3F81720 	 str r2,[r3,#23]
 764:../cleanflight/src/main/io/gps.c ****                             break;
 2481              	 .loc 2 764 0
 2482 0316 00BF     	 nop
 2483              	.L137:
 765:../cleanflight/src/main/io/gps.c ****                     }
 766:../cleanflight/src/main/io/gps.c ****                     break;
 2484              	 .loc 2 766 0
 2485 0318 83E0     	 b .L168
 2486              	.L121:
 767:../cleanflight/src/main/io/gps.c ****                 case FRAME_GSV:
 768:../cleanflight/src/main/io/gps.c ****                     switch (param) {
 2487              	 .loc 2 768 0
 2488 031a 0F4B     	 ldr r3,.L170
 2489 031c 1B78     	 ldrb r3,[r3]
 2490 031e 022B     	 cmp r3,#2
 2491 0320 02D0     	 beq .L144
 2492 0322 032B     	 cmp r3,#3
 2493 0324 09D0     	 beq .L145
 2494 0326 11E0     	 b .L143
 2495              	.L144:
 769:../cleanflight/src/main/io/gps.c ****                       /*case 1:
 770:../cleanflight/src/main/io/gps.c ****                             // Total number of messages of this type in this cycle
 771:../cleanflight/src/main/io/gps.c ****                             break; */
 772:../cleanflight/src/main/io/gps.c ****                         case 2:
 773:../cleanflight/src/main/io/gps.c ****                             // Message number
 774:../cleanflight/src/main/io/gps.c ****                             svMessageNum = grab_fields(string, 0);
 2496              	 .loc 2 774 0
 2497 0328 0E48     	 ldr r0,.L170+12
 2498 032a 0021     	 movs r1,#0
 2499 032c FFF7FEFF 	 bl grab_fields
 2500 0330 0346     	 mov r3,r0
 2501 0332 DAB2     	 uxtb r2,r3
 2502 0334 104B     	 ldr r3,.L170+32
 2503 0336 1A70     	 strb r2,[r3]
 775:../cleanflight/src/main/io/gps.c ****                             break;
 2504              	 .loc 2 775 0
 2505 0338 08E0     	 b .L143
 2506              	.L145:
 776:../cleanflight/src/main/io/gps.c ****                         case 3:
 777:../cleanflight/src/main/io/gps.c ****                             // Total number of SVs visible
 778:../cleanflight/src/main/io/gps.c ****                             GPS_numCh = grab_fields(string, 0);
 2507              	 .loc 2 778 0
 2508 033a 0A48     	 ldr r0,.L170+12
 2509 033c 0021     	 movs r1,#0
 2510 033e FFF7FEFF 	 bl grab_fields
 2511 0342 0346     	 mov r3,r0
 2512 0344 DAB2     	 uxtb r2,r3
 2513 0346 0D4B     	 ldr r3,.L170+36
 2514 0348 1A70     	 strb r2,[r3]
 779:../cleanflight/src/main/io/gps.c ****                             break;
 2515              	 .loc 2 779 0
 2516 034a 00BF     	 nop
 2517              	.L143:
 780:../cleanflight/src/main/io/gps.c ****                     }
 781:../cleanflight/src/main/io/gps.c ****                     if (param < 4)
 2518              	 .loc 2 781 0
 2519 034c 024B     	 ldr r3,.L170
 2520 034e 1B78     	 ldrb r3,[r3]
 2521 0350 032B     	 cmp r3,#3
 2522 0352 15D8     	 bhi .L146
 782:../cleanflight/src/main/io/gps.c ****                         break;
 2523              	 .loc 2 782 0
 2524 0354 66E0     	 b .L119
 2525              	.L171:
 2526 0356 00BF     	 .align 2
 2527              	.L170:
 2528 0358 00000000 	 .word param.13698
 2529 035c 00000000 	 .word offset.13699
 2530 0360 00000000 	 .word parity.13700
 2531 0364 00000000 	 .word string.13701
 2532 0368 00000000 	 .word gps_frame.13703
 2533 036c 00000000 	 .word gps_Msg.13696
 2534 0370 00000000 	 .word stateFlags
 2535 0374 D34D6210 	 .word 274877907
 2536 0378 00000000 	 .word svMessageNum.13704
 2537 037c 00000000 	 .word GPS_numCh
 2538              	.L146:
 783:../cleanflight/src/main/io/gps.c **** 
 784:../cleanflight/src/main/io/gps.c ****                     svPacketIdx = (param - 4) / 4 + 1; // satellite number in packet, 1-4
 2539              	 .loc 2 784 0
 2540 0380 654B     	 ldr r3,.L172
 2541 0382 1B78     	 ldrb r3,[r3]
 2542 0384 043B     	 subs r3,r3,#4
 2543 0386 002B     	 cmp r3,#0
 2544 0388 00DA     	 bge .L147
 2545 038a 0333     	 adds r3,r3,#3
 2546              	.L147:
 2547 038c 9B10     	 asrs r3,r3,#2
 2548 038e DBB2     	 uxtb r3,r3
 2549 0390 0133     	 adds r3,r3,#1
 2550 0392 7B75     	 strb r3,[r7,#21]
 785:../cleanflight/src/main/io/gps.c ****                     svSatNum    = svPacketIdx + (4 * (svMessageNum - 1)); // global satellite numbe
 2551              	 .loc 2 785 0
 2552 0394 614B     	 ldr r3,.L172+4
 2553 0396 1B78     	 ldrb r3,[r3]
 2554 0398 013B     	 subs r3,r3,#1
 2555 039a DBB2     	 uxtb r3,r3
 2556 039c 9B00     	 lsls r3,r3,#2
 2557 039e DAB2     	 uxtb r2,r3
 2558 03a0 7B7D     	 ldrb r3,[r7,#21]
 2559 03a2 1344     	 add r3,r3,r2
 2560 03a4 BB75     	 strb r3,[r7,#22]
 786:../cleanflight/src/main/io/gps.c ****                     svSatParam  = param - 3 - (4 * (svPacketIdx - 1)); // parameter number for sate
 2561              	 .loc 2 786 0
 2562 03a6 7B7D     	 ldrb r3,[r7,#21]
 2563 03a8 C3F10103 	 rsb r3,r3,#1
 2564 03ac DBB2     	 uxtb r3,r3
 2565 03ae 9B00     	 lsls r3,r3,#2
 2566 03b0 DAB2     	 uxtb r2,r3
 2567 03b2 594B     	 ldr r3,.L172
 2568 03b4 1B78     	 ldrb r3,[r3]
 2569 03b6 1344     	 add r3,r3,r2
 2570 03b8 DBB2     	 uxtb r3,r3
 2571 03ba 033B     	 subs r3,r3,#3
 2572 03bc 3B75     	 strb r3,[r7,#20]
 787:../cleanflight/src/main/io/gps.c **** 
 788:../cleanflight/src/main/io/gps.c ****                     if (svSatNum > GPS_SV_MAXSATS)
 2573              	 .loc 2 788 0
 2574 03be BB7D     	 ldrb r3,[r7,#22]
 2575 03c0 102B     	 cmp r3,#16
 2576 03c2 00D9     	 bls .L148
 789:../cleanflight/src/main/io/gps.c ****                         break;
 2577              	 .loc 2 789 0
 2578 03c4 2EE0     	 b .L119
 2579              	.L148:
 790:../cleanflight/src/main/io/gps.c **** 
 791:../cleanflight/src/main/io/gps.c ****                     switch (svSatParam) {
 2580              	 .loc 2 791 0
 2581 03c6 3B7D     	 ldrb r3,[r7,#20]
 2582 03c8 012B     	 cmp r3,#1
 2583 03ca 02D0     	 beq .L150
 2584 03cc 042B     	 cmp r3,#4
 2585 03ce 10D0     	 beq .L151
 2586 03d0 1FE0     	 b .L149
 2587              	.L150:
 792:../cleanflight/src/main/io/gps.c ****                         case 1:
 793:../cleanflight/src/main/io/gps.c ****                             // SV PRN number
 794:../cleanflight/src/main/io/gps.c ****                             GPS_svinfo_chn[svSatNum - 1]  = svSatNum;
 2588              	 .loc 2 794 0
 2589 03d2 BB7D     	 ldrb r3,[r7,#22]
 2590 03d4 013B     	 subs r3,r3,#1
 2591 03d6 5249     	 ldr r1,.L172+8
 2592 03d8 BA7D     	 ldrb r2,[r7,#22]
 2593 03da CA54     	 strb r2,[r1,r3]
 795:../cleanflight/src/main/io/gps.c ****                             GPS_svinfo_svid[svSatNum - 1] = grab_fields(string, 0);
 2594              	 .loc 2 795 0
 2595 03dc BB7D     	 ldrb r3,[r7,#22]
 2596 03de 5C1E     	 subs r4,r3,#1
 2597 03e0 5048     	 ldr r0,.L172+12
 2598 03e2 0021     	 movs r1,#0
 2599 03e4 FFF7FEFF 	 bl grab_fields
 2600 03e8 0346     	 mov r3,r0
 2601 03ea DAB2     	 uxtb r2,r3
 2602 03ec 4E4B     	 ldr r3,.L172+16
 2603 03ee 1A55     	 strb r2,[r3,r4]
 796:../cleanflight/src/main/io/gps.c ****                             break;
 2604              	 .loc 2 796 0
 2605 03f0 0FE0     	 b .L149
 2606              	.L151:
 797:../cleanflight/src/main/io/gps.c ****                       /*case 2:
 798:../cleanflight/src/main/io/gps.c ****                             // Elevation, in degrees, 90 maximum
 799:../cleanflight/src/main/io/gps.c ****                             break;
 800:../cleanflight/src/main/io/gps.c ****                         case 3:
 801:../cleanflight/src/main/io/gps.c ****                             // Azimuth, degrees from True North, 000 through 359
 802:../cleanflight/src/main/io/gps.c ****                             break; */
 803:../cleanflight/src/main/io/gps.c ****                         case 4:
 804:../cleanflight/src/main/io/gps.c ****                             // SNR, 00 through 99 dB (null when not tracking)
 805:../cleanflight/src/main/io/gps.c ****                             GPS_svinfo_cno[svSatNum - 1] = grab_fields(string, 0);
 2607              	 .loc 2 805 0
 2608 03f2 BB7D     	 ldrb r3,[r7,#22]
 2609 03f4 5C1E     	 subs r4,r3,#1
 2610 03f6 4B48     	 ldr r0,.L172+12
 2611 03f8 0021     	 movs r1,#0
 2612 03fa FFF7FEFF 	 bl grab_fields
 2613 03fe 0346     	 mov r3,r0
 2614 0400 DAB2     	 uxtb r2,r3
 2615 0402 4A4B     	 ldr r3,.L172+20
 2616 0404 1A55     	 strb r2,[r3,r4]
 806:../cleanflight/src/main/io/gps.c ****                             GPS_svinfo_quality[svSatNum - 1] = 0; // only used by ublox
 2617              	 .loc 2 806 0
 2618 0406 BB7D     	 ldrb r3,[r7,#22]
 2619 0408 013B     	 subs r3,r3,#1
 2620 040a 494A     	 ldr r2,.L172+24
 2621 040c 0021     	 movs r1,#0
 2622 040e D154     	 strb r1,[r2,r3]
 807:../cleanflight/src/main/io/gps.c ****                             break;
 2623              	 .loc 2 807 0
 2624 0410 00BF     	 nop
 2625              	.L149:
 808:../cleanflight/src/main/io/gps.c ****                     }
 809:../cleanflight/src/main/io/gps.c **** 
 810:../cleanflight/src/main/io/gps.c ****                     GPS_svInfoReceivedCount++;
 2626              	 .loc 2 810 0
 2627 0412 484B     	 ldr r3,.L172+28
 2628 0414 1B68     	 ldr r3,[r3]
 2629 0416 0133     	 adds r3,r3,#1
 2630 0418 464A     	 ldr r2,.L172+28
 2631 041a 1360     	 str r3,[r2]
 811:../cleanflight/src/main/io/gps.c **** 
 812:../cleanflight/src/main/io/gps.c ****                     break;
 2632              	 .loc 2 812 0
 2633 041c 02E0     	 b .L119
 2634              	.L167:
 750:../cleanflight/src/main/io/gps.c ****                 case FRAME_RMC:        //************* GPRMC FRAME parsing
 2635              	 .loc 2 750 0
 2636 041e 00BF     	 nop
 2637 0420 00E0     	 b .L119
 2638              	.L168:
 766:../cleanflight/src/main/io/gps.c ****                 case FRAME_GSV:
 2639              	 .loc 2 766 0
 2640 0422 00BF     	 nop
 2641              	.L119:
 813:../cleanflight/src/main/io/gps.c ****             }
 814:../cleanflight/src/main/io/gps.c **** 
 815:../cleanflight/src/main/io/gps.c ****             param++;
 2642              	 .loc 2 815 0
 2643 0424 3C4B     	 ldr r3,.L172
 2644 0426 1B78     	 ldrb r3,[r3]
 2645 0428 0133     	 adds r3,r3,#1
 2646 042a DAB2     	 uxtb r2,r3
 2647 042c 3A4B     	 ldr r3,.L172
 2648 042e 1A70     	 strb r2,[r3]
 816:../cleanflight/src/main/io/gps.c ****             offset = 0;
 2649              	 .loc 2 816 0
 2650 0430 414B     	 ldr r3,.L172+32
 2651 0432 0022     	 movs r2,#0
 2652 0434 1A70     	 strb r2,[r3]
 817:../cleanflight/src/main/io/gps.c ****             if (c == '*')
 2653              	 .loc 2 817 0
 2654 0436 FB79     	 ldrb r3,[r7,#7]
 2655 0438 2A2B     	 cmp r3,#42
 2656 043a 03D1     	 bne .L152
 818:../cleanflight/src/main/io/gps.c ****                 checksum_param = 1;
 2657              	 .loc 2 818 0
 2658 043c 3F4B     	 ldr r3,.L172+36
 2659 043e 0122     	 movs r2,#1
 2660 0440 1A70     	 strb r2,[r3]
 819:../cleanflight/src/main/io/gps.c ****             else
 820:../cleanflight/src/main/io/gps.c ****                 parity ^= c;
 821:../cleanflight/src/main/io/gps.c ****             break;
 2661              	 .loc 2 821 0
 2662 0442 4AE1     	 b .L115
 2663              	.L152:
 820:../cleanflight/src/main/io/gps.c ****             break;
 2664              	 .loc 2 820 0
 2665 0444 3E4B     	 ldr r3,.L172+40
 2666 0446 1A78     	 ldrb r2,[r3]
 2667 0448 FB79     	 ldrb r3,[r7,#7]
 2668 044a 5340     	 eors r3,r3,r2
 2669 044c DAB2     	 uxtb r2,r3
 2670 044e 3C4B     	 ldr r3,.L172+40
 2671 0450 1A70     	 strb r2,[r3]
 2672              	 .loc 2 821 0
 2673 0452 42E1     	 b .L115
 2674              	.L111:
 822:../cleanflight/src/main/io/gps.c ****         case '\r':
 823:../cleanflight/src/main/io/gps.c ****         case '\n':
 824:../cleanflight/src/main/io/gps.c ****             if (checksum_param) {   //parity checksum
 2675              	 .loc 2 824 0
 2676 0454 394B     	 ldr r3,.L172+36
 2677 0456 1B78     	 ldrb r3,[r3]
 2678 0458 002B     	 cmp r3,#0
 2679 045a 00F02181 	 beq .L154
 2680              	.LBB3:
 825:../cleanflight/src/main/io/gps.c ****                 shiftPacketLog();
 2681              	 .loc 2 825 0
 2682 045e FFF7FEFF 	 bl shiftPacketLog
 826:../cleanflight/src/main/io/gps.c ****                 uint8_t checksum = 16 * ((string[0] >= 'A') ? string[0] - 'A' + 10 : string[0] - '0
 2683              	 .loc 2 826 0
 2684 0462 304B     	 ldr r3,.L172+12
 2685 0464 1B78     	 ldrb r3,[r3]
 2686 0466 402B     	 cmp r3,#64
 2687 0468 06D9     	 bls .L155
 2688              	 .loc 2 826 0 is_stmt 0 discriminator 1
 2689 046a 2E4B     	 ldr r3,.L172+12
 2690 046c 1B78     	 ldrb r3,[r3]
 2691 046e 373B     	 subs r3,r3,#55
 2692 0470 DBB2     	 uxtb r3,r3
 2693 0472 1B01     	 lsls r3,r3,#4
 2694 0474 DAB2     	 uxtb r2,r3
 2695 0476 05E0     	 b .L156
 2696              	.L155:
 2697              	 .loc 2 826 0 discriminator 2
 2698 0478 2A4B     	 ldr r3,.L172+12
 2699 047a 1B78     	 ldrb r3,[r3]
 2700 047c 303B     	 subs r3,r3,#48
 2701 047e DBB2     	 uxtb r3,r3
 2702 0480 1B01     	 lsls r3,r3,#4
 2703 0482 DAB2     	 uxtb r2,r3
 2704              	.L156:
 2705              	 .loc 2 826 0 discriminator 4
 2706 0484 274B     	 ldr r3,.L172+12
 2707 0486 5B78     	 ldrb r3,[r3,#1]
 2708 0488 402B     	 cmp r3,#64
 2709 048a 04D9     	 bls .L157
 2710              	 .loc 2 826 0 discriminator 5
 2711 048c 254B     	 ldr r3,.L172+12
 2712 048e 5B78     	 ldrb r3,[r3,#1]
 2713 0490 373B     	 subs r3,r3,#55
 2714 0492 DBB2     	 uxtb r3,r3
 2715 0494 03E0     	 b .L158
 2716              	.L157:
 2717              	 .loc 2 826 0 discriminator 6
 2718 0496 234B     	 ldr r3,.L172+12
 2719 0498 5B78     	 ldrb r3,[r3,#1]
 2720 049a 303B     	 subs r3,r3,#48
 2721 049c DBB2     	 uxtb r3,r3
 2722              	.L158:
 2723              	 .loc 2 826 0 discriminator 8
 2724 049e 1344     	 add r3,r3,r2
 2725 04a0 FB74     	 strb r3,[r7,#19]
 827:../cleanflight/src/main/io/gps.c ****                 if (checksum == parity) {
 2726              	 .loc 2 827 0 is_stmt 1 discriminator 8
 2727 04a2 274B     	 ldr r3,.L172+40
 2728 04a4 1B78     	 ldrb r3,[r3]
 2729 04a6 FA7C     	 ldrb r2,[r7,#19]
 2730 04a8 9A42     	 cmp r2,r3
 2731 04aa 40F0F580 	 bne .L159
 828:../cleanflight/src/main/io/gps.c ****                     *gpsPacketLogChar = LOG_IGNORED;
 2732              	 .loc 2 828 0
 2733 04ae 254B     	 ldr r3,.L172+44
 2734 04b0 1B68     	 ldr r3,[r3]
 2735 04b2 2122     	 movs r2,#33
 2736 04b4 1A70     	 strb r2,[r3]
 829:../cleanflight/src/main/io/gps.c ****                     GPS_packetCount++;
 2737              	 .loc 2 829 0
 2738 04b6 244B     	 ldr r3,.L172+48
 2739 04b8 1B68     	 ldr r3,[r3]
 2740 04ba 0133     	 adds r3,r3,#1
 2741 04bc 224A     	 ldr r2,.L172+48
 2742 04be 1360     	 str r3,[r2]
 830:../cleanflight/src/main/io/gps.c ****                     switch (gps_frame) {
 2743              	 .loc 2 830 0
 2744 04c0 224B     	 ldr r3,.L172+52
 2745 04c2 1B78     	 ldrb r3,[r3]
 2746 04c4 012B     	 cmp r3,#1
 2747 04c6 02D0     	 beq .L161
 2748 04c8 022B     	 cmp r3,#2
 2749 04ca 47D0     	 beq .L162
 2750 04cc E8E0     	 b .L154
 2751              	.L161:
 831:../cleanflight/src/main/io/gps.c ****                     case FRAME_GGA:
 832:../cleanflight/src/main/io/gps.c ****                       *gpsPacketLogChar = LOG_NMEA_GGA;
 2752              	 .loc 2 832 0
 2753 04ce 1D4B     	 ldr r3,.L172+44
 2754 04d0 1B68     	 ldr r3,[r3]
 2755 04d2 6722     	 movs r2,#103
 2756 04d4 1A70     	 strb r2,[r3]
 833:../cleanflight/src/main/io/gps.c ****                       frameOK = 1;
 2757              	 .loc 2 833 0
 2758 04d6 0123     	 movs r3,#1
 2759 04d8 FB75     	 strb r3,[r7,#23]
 834:../cleanflight/src/main/io/gps.c ****                       if (STATE(GPS_FIX)) {
 2760              	 .loc 2 834 0
 2761 04da 1D4B     	 ldr r3,.L172+56
 2762 04dc 1B78     	 ldrb r3,[r3]
 2763 04de 03F00203 	 and r3,r3,#2
 2764 04e2 002B     	 cmp r3,#0
 2765 04e4 17D0     	 beq .L163
 835:../cleanflight/src/main/io/gps.c ****                             gpsSol.llh.lat = gps_Msg.latitude;
 2766              	 .loc 2 835 0
 2767 04e6 1B4B     	 ldr r3,.L172+60
 2768 04e8 1B68     	 ldr r3,[r3]
 2769 04ea 1B4A     	 ldr r2,.L172+64
 2770 04ec 1360     	 str r3,[r2]
 836:../cleanflight/src/main/io/gps.c ****                             gpsSol.llh.lon = gps_Msg.longitude;
 2771              	 .loc 2 836 0
 2772 04ee 194B     	 ldr r3,.L172+60
 2773 04f0 5B68     	 ldr r3,[r3,#4]
 2774 04f2 194A     	 ldr r2,.L172+64
 2775 04f4 5360     	 str r3,[r2,#4]
 837:../cleanflight/src/main/io/gps.c ****                             gpsSol.numSat = gps_Msg.numSat;
 2776              	 .loc 2 837 0
 2777 04f6 174B     	 ldr r3,.L172+60
 2778 04f8 1A7A     	 ldrb r2,[r3,#8]
 2779 04fa 174B     	 ldr r3,.L172+64
 2780 04fc 9A74     	 strb r2,[r3,#18]
 838:../cleanflight/src/main/io/gps.c ****                             gpsSol.llh.alt = gps_Msg.altitude;
 2781              	 .loc 2 838 0
 2782 04fe 154B     	 ldr r3,.L172+60
 2783 0500 D3F80930 	 ldr r3,[r3,#9]
 2784 0504 144A     	 ldr r2,.L172+64
 2785 0506 9360     	 str r3,[r2,#8]
 839:../cleanflight/src/main/io/gps.c ****                             gpsSol.hdop = gps_Msg.hdop;
 2786              	 .loc 2 839 0
 2787 0508 124B     	 ldr r3,.L172+60
 2788 050a B3F80F30 	 ldrh r3,[r3,#15]
 2789 050e 9AB2     	 uxth r2,r3
 2790 0510 114B     	 ldr r3,.L172+64
 2791 0512 1A82     	 strh r2,[r3,#16]
 840:../cleanflight/src/main/io/gps.c ****                         }
 841:../cleanflight/src/main/io/gps.c ****                         break;
 2792              	 .loc 2 841 0
 2793 0514 BFE0     	 b .L160
 2794              	.L163:
 2795 0516 BEE0     	 b .L160
 2796              	.L173:
 2797              	 .align 2
 2798              	.L172:
 2799 0518 00000000 	 .word param.13698
 2800 051c 00000000 	 .word svMessageNum.13704
 2801 0520 00000000 	 .word GPS_svinfo_chn
 2802 0524 00000000 	 .word string.13701
 2803 0528 00000000 	 .word GPS_svinfo_svid
 2804 052c 00000000 	 .word GPS_svinfo_cno
 2805 0530 00000000 	 .word GPS_svinfo_quality
 2806 0534 00000000 	 .word GPS_svInfoReceivedCount
 2807 0538 00000000 	 .word offset.13699
 2808 053c 00000000 	 .word checksum_param.13702
 2809 0540 00000000 	 .word parity.13700
 2810 0544 00000000 	 .word gpsPacketLogChar
 2811 0548 00000000 	 .word GPS_packetCount
 2812 054c 00000000 	 .word gps_frame.13703
 2813 0550 00000000 	 .word stateFlags
 2814 0554 00000000 	 .word gps_Msg.13696
 2815 0558 00000000 	 .word gpsSol
 2816              	.L162:
 842:../cleanflight/src/main/io/gps.c ****                     case FRAME_RMC:
 843:../cleanflight/src/main/io/gps.c ****                         *gpsPacketLogChar = LOG_NMEA_RMC;
 2817              	 .loc 2 843 0
 2818 055c 644B     	 ldr r3,.L174
 2819 055e 1B68     	 ldr r3,[r3]
 2820 0560 7222     	 movs r2,#114
 2821 0562 1A70     	 strb r2,[r3]
 844:../cleanflight/src/main/io/gps.c ****                         gpsSol.groundSpeed = gps_Msg.speed;
 2822              	 .loc 2 844 0
 2823 0564 634B     	 ldr r3,.L174+4
 2824 0566 B3F80D30 	 ldrh r3,[r3,#13]
 2825 056a 9AB2     	 uxth r2,r3
 2826 056c 624B     	 ldr r3,.L174+8
 2827 056e 9A81     	 strh r2,[r3,#12]
 845:../cleanflight/src/main/io/gps.c ****                         gpsSol.groundCourse = gps_Msg.ground_course;
 2828              	 .loc 2 845 0
 2829 0570 604B     	 ldr r3,.L174+4
 2830 0572 B3F81130 	 ldrh r3,[r3,#17]
 2831 0576 9AB2     	 uxth r2,r3
 2832 0578 5F4B     	 ldr r3,.L174+8
 2833 057a DA81     	 strh r2,[r3,#14]
 846:../cleanflight/src/main/io/gps.c **** #ifdef USE_RTC_TIME
 847:../cleanflight/src/main/io/gps.c ****                         // This check will miss 00:00:00.00, but we shouldn't care - next report wi
 848:../cleanflight/src/main/io/gps.c ****                         if(!rtcHasTime() && gps_Msg.date != 0 && gps_Msg.time != 0) {
 2834              	 .loc 2 848 0
 2835 057c FFF7FEFF 	 bl rtcHasTime
 2836 0580 0346     	 mov r3,r0
 2837 0582 83F00103 	 eor r3,r3,#1
 2838 0586 DBB2     	 uxtb r3,r3
 2839 0588 002B     	 cmp r3,#0
 2840 058a 00F08380 	 beq .L164
 2841              	 .loc 2 848 0 is_stmt 0 discriminator 1
 2842 058e 594B     	 ldr r3,.L174+4
 2843 0590 D3F81730 	 ldr r3,[r3,#23]
 2844 0594 002B     	 cmp r3,#0
 2845 0596 7DD0     	 beq .L164
 2846              	 .loc 2 848 0 discriminator 2
 2847 0598 564B     	 ldr r3,.L174+4
 2848 059a D3F81330 	 ldr r3,[r3,#19]
 2849 059e 002B     	 cmp r3,#0
 2850 05a0 78D0     	 beq .L164
 2851              	.LBB4:
 849:../cleanflight/src/main/io/gps.c ****                             dateTime_t temp_time;
 850:../cleanflight/src/main/io/gps.c ****                             temp_time.year = (gps_Msg.date % 100) + 2000;
 2852              	 .loc 2 850 0 is_stmt 1
 2853 05a2 544B     	 ldr r3,.L174+4
 2854 05a4 D3F81720 	 ldr r2,[r3,#23]
 2855 05a8 544B     	 ldr r3,.L174+12
 2856 05aa A3FB0213 	 umull r1,r3,r3,r2
 2857 05ae 5B09     	 lsrs r3,r3,#5
 2858 05b0 6421     	 movs r1,#100
 2859 05b2 01FB03F3 	 mul r3,r1,r3
 2860 05b6 D31A     	 subs r3,r2,r3
 2861 05b8 9BB2     	 uxth r3,r3
 2862 05ba 03F5FA63 	 add r3,r3,#2000
 2863 05be 9BB2     	 uxth r3,r3
 2864 05c0 3B81     	 strh r3,[r7,#8]
 851:../cleanflight/src/main/io/gps.c ****                             temp_time.month = (gps_Msg.date / 100) % 100;
 2865              	 .loc 2 851 0
 2866 05c2 4C4B     	 ldr r3,.L174+4
 2867 05c4 D3F81730 	 ldr r3,[r3,#23]
 2868 05c8 4C4A     	 ldr r2,.L174+12
 2869 05ca A2FB0323 	 umull r2,r3,r2,r3
 2870 05ce 5A09     	 lsrs r2,r3,#5
 2871 05d0 4A4B     	 ldr r3,.L174+12
 2872 05d2 A3FB0213 	 umull r1,r3,r3,r2
 2873 05d6 5B09     	 lsrs r3,r3,#5
 2874 05d8 6421     	 movs r1,#100
 2875 05da 01FB03F3 	 mul r3,r1,r3
 2876 05de D31A     	 subs r3,r2,r3
 2877 05e0 DBB2     	 uxtb r3,r3
 2878 05e2 BB72     	 strb r3,[r7,#10]
 852:../cleanflight/src/main/io/gps.c ****                             temp_time.day = (gps_Msg.date / 10000) % 100;
 2879              	 .loc 2 852 0
 2880 05e4 434B     	 ldr r3,.L174+4
 2881 05e6 D3F81730 	 ldr r3,[r3,#23]
 2882 05ea 454A     	 ldr r2,.L174+16
 2883 05ec A2FB0323 	 umull r2,r3,r2,r3
 2884 05f0 5A0B     	 lsrs r2,r3,#13
 2885 05f2 424B     	 ldr r3,.L174+12
 2886 05f4 A3FB0213 	 umull r1,r3,r3,r2
 2887 05f8 5B09     	 lsrs r3,r3,#5
 2888 05fa 6421     	 movs r1,#100
 2889 05fc 01FB03F3 	 mul r3,r1,r3
 2890 0600 D31A     	 subs r3,r2,r3
 2891 0602 DBB2     	 uxtb r3,r3
 2892 0604 FB72     	 strb r3,[r7,#11]
 853:../cleanflight/src/main/io/gps.c ****                             temp_time.hours = (gps_Msg.time / 1000000) % 100;
 2893              	 .loc 2 853 0
 2894 0606 3B4B     	 ldr r3,.L174+4
 2895 0608 D3F81330 	 ldr r3,[r3,#19]
 2896 060c 3D4A     	 ldr r2,.L174+20
 2897 060e A2FB0323 	 umull r2,r3,r2,r3
 2898 0612 9A0C     	 lsrs r2,r3,#18
 2899 0614 394B     	 ldr r3,.L174+12
 2900 0616 A3FB0213 	 umull r1,r3,r3,r2
 2901 061a 5B09     	 lsrs r3,r3,#5
 2902 061c 6421     	 movs r1,#100
 2903 061e 01FB03F3 	 mul r3,r1,r3
 2904 0622 D31A     	 subs r3,r2,r3
 2905 0624 DBB2     	 uxtb r3,r3
 2906 0626 3B73     	 strb r3,[r7,#12]
 854:../cleanflight/src/main/io/gps.c ****                             temp_time.minutes = (gps_Msg.time / 10000) % 100;
 2907              	 .loc 2 854 0
 2908 0628 324B     	 ldr r3,.L174+4
 2909 062a D3F81330 	 ldr r3,[r3,#19]
 2910 062e 344A     	 ldr r2,.L174+16
 2911 0630 A2FB0323 	 umull r2,r3,r2,r3
 2912 0634 5A0B     	 lsrs r2,r3,#13
 2913 0636 314B     	 ldr r3,.L174+12
 2914 0638 A3FB0213 	 umull r1,r3,r3,r2
 2915 063c 5B09     	 lsrs r3,r3,#5
 2916 063e 6421     	 movs r1,#100
 2917 0640 01FB03F3 	 mul r3,r1,r3
 2918 0644 D31A     	 subs r3,r2,r3
 2919 0646 DBB2     	 uxtb r3,r3
 2920 0648 7B73     	 strb r3,[r7,#13]
 855:../cleanflight/src/main/io/gps.c ****                             temp_time.seconds = (gps_Msg.time / 100) % 100;
 2921              	 .loc 2 855 0
 2922 064a 2A4B     	 ldr r3,.L174+4
 2923 064c D3F81330 	 ldr r3,[r3,#19]
 2924 0650 2A4A     	 ldr r2,.L174+12
 2925 0652 A2FB0323 	 umull r2,r3,r2,r3
 2926 0656 5A09     	 lsrs r2,r3,#5
 2927 0658 284B     	 ldr r3,.L174+12
 2928 065a A3FB0213 	 umull r1,r3,r3,r2
 2929 065e 5B09     	 lsrs r3,r3,#5
 2930 0660 6421     	 movs r1,#100
 2931 0662 01FB03F3 	 mul r3,r1,r3
 2932 0666 D31A     	 subs r3,r2,r3
 2933 0668 DBB2     	 uxtb r3,r3
 2934 066a BB73     	 strb r3,[r7,#14]
 856:../cleanflight/src/main/io/gps.c ****                             temp_time.millis = (gps_Msg.time & 100) * 10;
 2935              	 .loc 2 856 0
 2936 066c 214B     	 ldr r3,.L174+4
 2937 066e D3F81330 	 ldr r3,[r3,#19]
 2938 0672 9BB2     	 uxth r3,r3
 2939 0674 03F06403 	 and r3,r3,#100
 2940 0678 9BB2     	 uxth r3,r3
 2941 067a 1A46     	 mov r2,r3
 2942 067c 9200     	 lsls r2,r2,#2
 2943 067e 1344     	 add r3,r3,r2
 2944 0680 5B00     	 lsls r3,r3,#1
 2945 0682 9BB2     	 uxth r3,r3
 2946 0684 A7F80F30 	 strh r3,[r7,#15]
 857:../cleanflight/src/main/io/gps.c ****                             rtcSetDateTime(&temp_time);
 2947              	 .loc 2 857 0
 2948 0688 07F10803 	 add r3,r7,#8
 2949 068c 1846     	 mov r0,r3
 2950 068e FFF7FEFF 	 bl rtcSetDateTime
 2951              	.LBE4:
 858:../cleanflight/src/main/io/gps.c ****                         }
 859:../cleanflight/src/main/io/gps.c **** #endif
 860:../cleanflight/src/main/io/gps.c ****                         break;
 2952              	 .loc 2 860 0
 2953 0692 FFE7     	 b .L169
 2954              	.L164:
 2955              	.L169:
 2956 0694 00BF     	 nop
 2957              	.L160:
 2958 0696 03E0     	 b .L154
 2959              	.L159:
 861:../cleanflight/src/main/io/gps.c ****                     } // end switch
 862:../cleanflight/src/main/io/gps.c ****                 } else {
 863:../cleanflight/src/main/io/gps.c ****                     *gpsPacketLogChar = LOG_ERROR;
 2960              	 .loc 2 863 0
 2961 0698 154B     	 ldr r3,.L174
 2962 069a 1B68     	 ldr r3,[r3]
 2963 069c 3F22     	 movs r2,#63
 2964 069e 1A70     	 strb r2,[r3]
 2965              	.L154:
 2966              	.LBE3:
 864:../cleanflight/src/main/io/gps.c ****                 }
 865:../cleanflight/src/main/io/gps.c ****             }
 866:../cleanflight/src/main/io/gps.c ****             checksum_param = 0;
 2967              	 .loc 2 866 0
 2968 06a0 194B     	 ldr r3,.L174+24
 2969 06a2 0022     	 movs r2,#0
 2970 06a4 1A70     	 strb r2,[r3]
 867:../cleanflight/src/main/io/gps.c ****             break;
 2971              	 .loc 2 867 0
 2972 06a6 18E0     	 b .L115
 2973              	.L110:
 868:../cleanflight/src/main/io/gps.c ****         default:
 869:../cleanflight/src/main/io/gps.c ****             if (offset < 15)
 2974              	 .loc 2 869 0
 2975 06a8 184B     	 ldr r3,.L174+28
 2976 06aa 1B78     	 ldrb r3,[r3]
 2977 06ac 0E2B     	 cmp r3,#14
 2978 06ae 09D8     	 bhi .L165
 870:../cleanflight/src/main/io/gps.c ****                 string[offset++] = c;
 2979              	 .loc 2 870 0
 2980 06b0 164B     	 ldr r3,.L174+28
 2981 06b2 1B78     	 ldrb r3,[r3]
 2982 06b4 5A1C     	 adds r2,r3,#1
 2983 06b6 D1B2     	 uxtb r1,r2
 2984 06b8 144A     	 ldr r2,.L174+28
 2985 06ba 1170     	 strb r1,[r2]
 2986 06bc 1946     	 mov r1,r3
 2987 06be 144A     	 ldr r2,.L174+32
 2988 06c0 FB79     	 ldrb r3,[r7,#7]
 2989 06c2 5354     	 strb r3,[r2,r1]
 2990              	.L165:
 871:../cleanflight/src/main/io/gps.c ****             if (!checksum_param)
 2991              	 .loc 2 871 0
 2992 06c4 104B     	 ldr r3,.L174+24
 2993 06c6 1B78     	 ldrb r3,[r3]
 2994 06c8 002B     	 cmp r3,#0
 2995 06ca 06D1     	 bne .L115
 872:../cleanflight/src/main/io/gps.c ****                 parity ^= c;
 2996              	 .loc 2 872 0
 2997 06cc 114B     	 ldr r3,.L174+36
 2998 06ce 1A78     	 ldrb r2,[r3]
 2999 06d0 FB79     	 ldrb r3,[r7,#7]
 3000 06d2 5340     	 eors r3,r3,r2
 3001 06d4 DAB2     	 uxtb r2,r3
 3002 06d6 0F4B     	 ldr r3,.L174+36
 3003 06d8 1A70     	 strb r2,[r3]
 3004              	.L115:
 873:../cleanflight/src/main/io/gps.c ****     }
 874:../cleanflight/src/main/io/gps.c ****     return frameOK;
 3005              	 .loc 2 874 0
 3006 06da FB7D     	 ldrb r3,[r7,#23]
 3007 06dc 002B     	 cmp r3,#0
 3008 06de 14BF     	 ite ne
 3009 06e0 0123     	 movne r3,#1
 3010 06e2 0023     	 moveq r3,#0
 3011 06e4 DBB2     	 uxtb r3,r3
 875:../cleanflight/src/main/io/gps.c **** }
 3012              	 .loc 2 875 0
 3013 06e6 1846     	 mov r0,r3
 3014 06e8 1C37     	 adds r7,r7,#28
 3015              	.LCFI61:
 3016              	 .cfi_def_cfa_offset 12
 3017 06ea BD46     	 mov sp,r7
 3018              	.LCFI62:
 3019              	 .cfi_def_cfa_register 13
 3020              	 
 3021 06ec 90BD     	 pop {r4,r7,pc}
 3022              	.L175:
 3023 06ee 00BF     	 .align 2
 3024              	.L174:
 3025 06f0 00000000 	 .word gpsPacketLogChar
 3026 06f4 00000000 	 .word gps_Msg.13696
 3027 06f8 00000000 	 .word gpsSol
 3028 06fc 1F85EB51 	 .word 1374389535
 3029 0700 5917B7D1 	 .word -776530087
 3030 0704 83DE1B43 	 .word 1125899907
 3031 0708 00000000 	 .word checksum_param.13702
 3032 070c 00000000 	 .word offset.13699
 3033 0710 00000000 	 .word string.13701
 3034 0714 00000000 	 .word parity.13700
 3035              	 .cfi_endproc
 3036              	.LFE563:
 3038              	 .comm ubx_protocol_bytes,1,1
 3039              	 .comm ubs_nav_fix_type,1,1
 3040              	 .comm ubx_nav_status_bits,1,1
 3041              	 .section .bss._ck_a,"aw",%nobits
 3044              	_ck_a:
 3045 0000 00       	 .space 1
 3046              	 .section .bss._ck_b,"aw",%nobits
 3049              	_ck_b:
 3050 0000 00       	 .space 1
 3051              	 .section .bss._skip_packet,"aw",%nobits
 3054              	_skip_packet:
 3055 0000 00       	 .space 1
 3056              	 .section .bss._step,"aw",%nobits
 3059              	_step:
 3060 0000 00       	 .space 1
 3061              	 .section .bss._msg_id,"aw",%nobits
 3064              	_msg_id:
 3065 0000 00       	 .space 1
 3066              	 .section .bss._payload_length,"aw",%nobits
 3067              	 .align 1
 3070              	_payload_length:
 3071 0000 0000     	 .space 2
 3072              	 .section .bss._payload_counter,"aw",%nobits
 3073              	 .align 1
 3076              	_payload_counter:
 3077 0000 0000     	 .space 2
 3078              	 .section .bss.next_fix,"aw",%nobits
 3081              	next_fix:
 3082 0000 00       	 .space 1
 3083              	 .section .bss._class,"aw",%nobits
 3086              	_class:
 3087 0000 00       	 .space 1
 3088              	 .section .bss._new_position,"aw",%nobits
 3091              	_new_position:
 3092 0000 00       	 .space 1
 3093              	 .section .bss._new_speed,"aw",%nobits
 3096              	_new_speed:
 3097 0000 00       	 .space 1
 3098              	 .section .bss._buffer,"aw",%nobits
 3099              	 .align 2
 3102              	_buffer:
 3103 0000 00000000 	 .space 344
 3103      00000000 
 3103      00000000 
 3103      00000000 
 3103      00000000 
 3104              	 .section .text._update_checksum,"ax",%progbits
 3105              	 .align 2
 3106              	 .global _update_checksum
 3107              	 .thumb
 3108              	 .thumb_func
 3110              	_update_checksum:
 3111              	.LFB564:
 876:../cleanflight/src/main/io/gps.c **** #endif // USE_GPS_NMEA
 877:../cleanflight/src/main/io/gps.c **** 
 878:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_UBLOX
 879:../cleanflight/src/main/io/gps.c **** // UBX support
 880:../cleanflight/src/main/io/gps.c **** typedef struct {
 881:../cleanflight/src/main/io/gps.c ****     uint8_t preamble1;
 882:../cleanflight/src/main/io/gps.c ****     uint8_t preamble2;
 883:../cleanflight/src/main/io/gps.c ****     uint8_t msg_class;
 884:../cleanflight/src/main/io/gps.c ****     uint8_t msg_id;
 885:../cleanflight/src/main/io/gps.c ****     uint16_t length;
 886:../cleanflight/src/main/io/gps.c **** } ubx_header;
 887:../cleanflight/src/main/io/gps.c **** 
 888:../cleanflight/src/main/io/gps.c **** typedef struct {
 889:../cleanflight/src/main/io/gps.c ****     uint32_t time;              // GPS msToW
 890:../cleanflight/src/main/io/gps.c ****     int32_t longitude;
 891:../cleanflight/src/main/io/gps.c ****     int32_t latitude;
 892:../cleanflight/src/main/io/gps.c ****     int32_t altitude_ellipsoid;
 893:../cleanflight/src/main/io/gps.c ****     int32_t altitude_msl;
 894:../cleanflight/src/main/io/gps.c ****     uint32_t horizontal_accuracy;
 895:../cleanflight/src/main/io/gps.c ****     uint32_t vertical_accuracy;
 896:../cleanflight/src/main/io/gps.c **** } ubx_nav_posllh;
 897:../cleanflight/src/main/io/gps.c **** 
 898:../cleanflight/src/main/io/gps.c **** typedef struct {
 899:../cleanflight/src/main/io/gps.c ****     uint32_t time;              // GPS msToW
 900:../cleanflight/src/main/io/gps.c ****     uint8_t fix_type;
 901:../cleanflight/src/main/io/gps.c ****     uint8_t fix_status;
 902:../cleanflight/src/main/io/gps.c ****     uint8_t differential_status;
 903:../cleanflight/src/main/io/gps.c ****     uint8_t res;
 904:../cleanflight/src/main/io/gps.c ****     uint32_t time_to_first_fix;
 905:../cleanflight/src/main/io/gps.c ****     uint32_t uptime;            // milliseconds
 906:../cleanflight/src/main/io/gps.c **** } ubx_nav_status;
 907:../cleanflight/src/main/io/gps.c **** 
 908:../cleanflight/src/main/io/gps.c **** typedef struct {
 909:../cleanflight/src/main/io/gps.c ****     uint32_t time;
 910:../cleanflight/src/main/io/gps.c ****     int32_t time_nsec;
 911:../cleanflight/src/main/io/gps.c ****     int16_t week;
 912:../cleanflight/src/main/io/gps.c ****     uint8_t fix_type;
 913:../cleanflight/src/main/io/gps.c ****     uint8_t fix_status;
 914:../cleanflight/src/main/io/gps.c ****     int32_t ecef_x;
 915:../cleanflight/src/main/io/gps.c ****     int32_t ecef_y;
 916:../cleanflight/src/main/io/gps.c ****     int32_t ecef_z;
 917:../cleanflight/src/main/io/gps.c ****     uint32_t position_accuracy_3d;
 918:../cleanflight/src/main/io/gps.c ****     int32_t ecef_x_velocity;
 919:../cleanflight/src/main/io/gps.c ****     int32_t ecef_y_velocity;
 920:../cleanflight/src/main/io/gps.c ****     int32_t ecef_z_velocity;
 921:../cleanflight/src/main/io/gps.c ****     uint32_t speed_accuracy;
 922:../cleanflight/src/main/io/gps.c ****     uint16_t position_DOP;
 923:../cleanflight/src/main/io/gps.c ****     uint8_t res;
 924:../cleanflight/src/main/io/gps.c ****     uint8_t satellites;
 925:../cleanflight/src/main/io/gps.c ****     uint32_t res2;
 926:../cleanflight/src/main/io/gps.c **** } ubx_nav_solution;
 927:../cleanflight/src/main/io/gps.c **** 
 928:../cleanflight/src/main/io/gps.c **** typedef struct {
 929:../cleanflight/src/main/io/gps.c ****     uint32_t time;              // GPS msToW
 930:../cleanflight/src/main/io/gps.c ****     int32_t ned_north;
 931:../cleanflight/src/main/io/gps.c ****     int32_t ned_east;
 932:../cleanflight/src/main/io/gps.c ****     int32_t ned_down;
 933:../cleanflight/src/main/io/gps.c ****     uint32_t speed_3d;
 934:../cleanflight/src/main/io/gps.c ****     uint32_t speed_2d;
 935:../cleanflight/src/main/io/gps.c ****     int32_t heading_2d;
 936:../cleanflight/src/main/io/gps.c ****     uint32_t speed_accuracy;
 937:../cleanflight/src/main/io/gps.c ****     uint32_t heading_accuracy;
 938:../cleanflight/src/main/io/gps.c **** } ubx_nav_velned;
 939:../cleanflight/src/main/io/gps.c **** 
 940:../cleanflight/src/main/io/gps.c **** typedef struct {
 941:../cleanflight/src/main/io/gps.c ****     uint8_t chn;                // Channel number, 255 for SVx not assigned to channel
 942:../cleanflight/src/main/io/gps.c ****     uint8_t svid;               // Satellite ID
 943:../cleanflight/src/main/io/gps.c ****     uint8_t flags;              // Bitmask
 944:../cleanflight/src/main/io/gps.c ****     uint8_t quality;            // Bitfield
 945:../cleanflight/src/main/io/gps.c ****     uint8_t cno;                // Carrier to Noise Ratio (Signal Strength) // dbHz, 0-55.
 946:../cleanflight/src/main/io/gps.c ****     uint8_t elev;               // Elevation in integer degrees
 947:../cleanflight/src/main/io/gps.c ****     int16_t azim;               // Azimuth in integer degrees
 948:../cleanflight/src/main/io/gps.c ****     int32_t prRes;              // Pseudo range residual in centimetres
 949:../cleanflight/src/main/io/gps.c **** } ubx_nav_svinfo_channel;
 950:../cleanflight/src/main/io/gps.c **** 
 951:../cleanflight/src/main/io/gps.c **** typedef struct {
 952:../cleanflight/src/main/io/gps.c ****     uint32_t time;              // GPS Millisecond time of week
 953:../cleanflight/src/main/io/gps.c ****     uint8_t numCh;              // Number of channels
 954:../cleanflight/src/main/io/gps.c ****     uint8_t globalFlags;        // Bitmask, Chip hardware generation 0:Antaris, 1:u-blox 5, 2:u-blo
 955:../cleanflight/src/main/io/gps.c ****     uint16_t reserved2;         // Reserved
 956:../cleanflight/src/main/io/gps.c ****     ubx_nav_svinfo_channel channel[16];         // 16 satellites * 12 byte
 957:../cleanflight/src/main/io/gps.c **** } ubx_nav_svinfo;
 958:../cleanflight/src/main/io/gps.c **** 
 959:../cleanflight/src/main/io/gps.c **** enum {
 960:../cleanflight/src/main/io/gps.c ****     PREAMBLE1 = 0xb5,
 961:../cleanflight/src/main/io/gps.c ****     PREAMBLE2 = 0x62,
 962:../cleanflight/src/main/io/gps.c ****     CLASS_NAV = 0x01,
 963:../cleanflight/src/main/io/gps.c ****     CLASS_ACK = 0x05,
 964:../cleanflight/src/main/io/gps.c ****     CLASS_CFG = 0x06,
 965:../cleanflight/src/main/io/gps.c ****     MSG_ACK_NACK = 0x00,
 966:../cleanflight/src/main/io/gps.c ****     MSG_ACK_ACK = 0x01,
 967:../cleanflight/src/main/io/gps.c ****     MSG_POSLLH = 0x2,
 968:../cleanflight/src/main/io/gps.c ****     MSG_STATUS = 0x3,
 969:../cleanflight/src/main/io/gps.c ****     MSG_SOL = 0x6,
 970:../cleanflight/src/main/io/gps.c ****     MSG_VELNED = 0x12,
 971:../cleanflight/src/main/io/gps.c ****     MSG_SVINFO = 0x30,
 972:../cleanflight/src/main/io/gps.c ****     MSG_CFG_PRT = 0x00,
 973:../cleanflight/src/main/io/gps.c ****     MSG_CFG_RATE = 0x08,
 974:../cleanflight/src/main/io/gps.c ****     MSG_CFG_SET_RATE = 0x01,
 975:../cleanflight/src/main/io/gps.c ****     MSG_CFG_NAV_SETTINGS = 0x24
 976:../cleanflight/src/main/io/gps.c **** } ubx_protocol_bytes;
 977:../cleanflight/src/main/io/gps.c **** 
 978:../cleanflight/src/main/io/gps.c **** enum {
 979:../cleanflight/src/main/io/gps.c ****     FIX_NONE = 0,
 980:../cleanflight/src/main/io/gps.c ****     FIX_DEAD_RECKONING = 1,
 981:../cleanflight/src/main/io/gps.c ****     FIX_2D = 2,
 982:../cleanflight/src/main/io/gps.c ****     FIX_3D = 3,
 983:../cleanflight/src/main/io/gps.c ****     FIX_GPS_DEAD_RECKONING = 4,
 984:../cleanflight/src/main/io/gps.c ****     FIX_TIME = 5
 985:../cleanflight/src/main/io/gps.c **** } ubs_nav_fix_type;
 986:../cleanflight/src/main/io/gps.c **** 
 987:../cleanflight/src/main/io/gps.c **** enum {
 988:../cleanflight/src/main/io/gps.c ****     NAV_STATUS_FIX_VALID = 1,
 989:../cleanflight/src/main/io/gps.c ****     NAV_STATUS_TIME_WEEK_VALID = 4,
 990:../cleanflight/src/main/io/gps.c ****     NAV_STATUS_TIME_SECOND_VALID = 8
 991:../cleanflight/src/main/io/gps.c **** } ubx_nav_status_bits;
 992:../cleanflight/src/main/io/gps.c **** 
 993:../cleanflight/src/main/io/gps.c **** // Packet checksum accumulators
 994:../cleanflight/src/main/io/gps.c **** static uint8_t _ck_a;
 995:../cleanflight/src/main/io/gps.c **** static uint8_t _ck_b;
 996:../cleanflight/src/main/io/gps.c **** 
 997:../cleanflight/src/main/io/gps.c **** // State machine state
 998:../cleanflight/src/main/io/gps.c **** static bool _skip_packet;
 999:../cleanflight/src/main/io/gps.c **** static uint8_t _step;
1000:../cleanflight/src/main/io/gps.c **** static uint8_t _msg_id;
1001:../cleanflight/src/main/io/gps.c **** static uint16_t _payload_length;
1002:../cleanflight/src/main/io/gps.c **** static uint16_t _payload_counter;
1003:../cleanflight/src/main/io/gps.c **** 
1004:../cleanflight/src/main/io/gps.c **** static bool next_fix;
1005:../cleanflight/src/main/io/gps.c **** static uint8_t _class;
1006:../cleanflight/src/main/io/gps.c **** 
1007:../cleanflight/src/main/io/gps.c **** // do we have new position information?
1008:../cleanflight/src/main/io/gps.c **** static bool _new_position;
1009:../cleanflight/src/main/io/gps.c **** 
1010:../cleanflight/src/main/io/gps.c **** // do we have new speed information?
1011:../cleanflight/src/main/io/gps.c **** static bool _new_speed;
1012:../cleanflight/src/main/io/gps.c **** 
1013:../cleanflight/src/main/io/gps.c **** // Example packet sizes from UBlox u-center from a Glonass capable GPS receiver.
1014:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX NAV-STATUS,  Size  24,  'Navigation Status'
1015:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX NAV-POSLLH,  Size  36,  'Geodetic Position'
1016:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX NAV-VELNED,  Size  44,  'Velocity in WGS 84'
1017:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX NAV-CLOCK,  Size  28,  'Clock Status'
1018:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX NAV-AOPSTATUS,  Size  24,  'AOP Status'
1019:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX 03-09,  Size 208,  'Unknown'
1020:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX 03-10,  Size 336,  'Unknown'
1021:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX NAV-SOL,  Size  60,  'Navigation Solution'
1022:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX NAV,  Size 100,  'Navigation'
1023:../cleanflight/src/main/io/gps.c **** //15:17:55  R -> UBX NAV-SVINFO,  Size 328,  'Satellite Status and Information'
1024:../cleanflight/src/main/io/gps.c **** 
1025:../cleanflight/src/main/io/gps.c **** // from the UBlox6 document, the largest payout we receive i the NAV-SVINFO and the payload size
1026:../cleanflight/src/main/io/gps.c **** // is calculated as 8 + 12*numCh.  numCh in the case of a Glonass receiver is 28.
1027:../cleanflight/src/main/io/gps.c **** #define UBLOX_PAYLOAD_SIZE 344
1028:../cleanflight/src/main/io/gps.c **** 
1029:../cleanflight/src/main/io/gps.c **** 
1030:../cleanflight/src/main/io/gps.c **** // Receive buffer
1031:../cleanflight/src/main/io/gps.c **** static union {
1032:../cleanflight/src/main/io/gps.c ****     ubx_nav_posllh posllh;
1033:../cleanflight/src/main/io/gps.c ****     ubx_nav_status status;
1034:../cleanflight/src/main/io/gps.c ****     ubx_nav_solution solution;
1035:../cleanflight/src/main/io/gps.c ****     ubx_nav_velned velned;
1036:../cleanflight/src/main/io/gps.c ****     ubx_nav_svinfo svinfo;
1037:../cleanflight/src/main/io/gps.c ****     uint8_t bytes[UBLOX_PAYLOAD_SIZE];
1038:../cleanflight/src/main/io/gps.c **** } _buffer;
1039:../cleanflight/src/main/io/gps.c **** 
1040:../cleanflight/src/main/io/gps.c **** void _update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
1041:../cleanflight/src/main/io/gps.c **** {
 3112              	 .loc 2 1041 0
 3113              	 .cfi_startproc
 3114              	 
 3115              	 
 3116              	 
 3117 0000 80B4     	 push {r7}
 3118              	.LCFI63:
 3119              	 .cfi_def_cfa_offset 4
 3120              	 .cfi_offset 7,-4
 3121 0002 85B0     	 sub sp,sp,#20
 3122              	.LCFI64:
 3123              	 .cfi_def_cfa_offset 24
 3124 0004 00AF     	 add r7,sp,#0
 3125              	.LCFI65:
 3126              	 .cfi_def_cfa_register 7
 3127 0006 F860     	 str r0,[r7,#12]
 3128 0008 7A60     	 str r2,[r7,#4]
 3129 000a 3B60     	 str r3,[r7]
 3130 000c 0B46     	 mov r3,r1
 3131 000e FB72     	 strb r3,[r7,#11]
1042:../cleanflight/src/main/io/gps.c ****     while (len--) {
 3132              	 .loc 2 1042 0
 3133 0010 12E0     	 b .L177
 3134              	.L178:
1043:../cleanflight/src/main/io/gps.c ****         *ck_a += *data;
 3135              	 .loc 2 1043 0
 3136 0012 7B68     	 ldr r3,[r7,#4]
 3137 0014 1A78     	 ldrb r2,[r3]
 3138 0016 FB68     	 ldr r3,[r7,#12]
 3139 0018 1B78     	 ldrb r3,[r3]
 3140 001a 1344     	 add r3,r3,r2
 3141 001c DAB2     	 uxtb r2,r3
 3142 001e 7B68     	 ldr r3,[r7,#4]
 3143 0020 1A70     	 strb r2,[r3]
1044:../cleanflight/src/main/io/gps.c ****         *ck_b += *ck_a;
 3144              	 .loc 2 1044 0
 3145 0022 3B68     	 ldr r3,[r7]
 3146 0024 1A78     	 ldrb r2,[r3]
 3147 0026 7B68     	 ldr r3,[r7,#4]
 3148 0028 1B78     	 ldrb r3,[r3]
 3149 002a 1344     	 add r3,r3,r2
 3150 002c DAB2     	 uxtb r2,r3
 3151 002e 3B68     	 ldr r3,[r7]
 3152 0030 1A70     	 strb r2,[r3]
1045:../cleanflight/src/main/io/gps.c ****         data++;
 3153              	 .loc 2 1045 0
 3154 0032 FB68     	 ldr r3,[r7,#12]
 3155 0034 0133     	 adds r3,r3,#1
 3156 0036 FB60     	 str r3,[r7,#12]
 3157              	.L177:
1042:../cleanflight/src/main/io/gps.c ****         *ck_a += *data;
 3158              	 .loc 2 1042 0
 3159 0038 FB7A     	 ldrb r3,[r7,#11]
 3160 003a 5A1E     	 subs r2,r3,#1
 3161 003c FA72     	 strb r2,[r7,#11]
 3162 003e 002B     	 cmp r3,#0
 3163 0040 E7D1     	 bne .L178
1046:../cleanflight/src/main/io/gps.c ****     }
1047:../cleanflight/src/main/io/gps.c **** }
 3164              	 .loc 2 1047 0
 3165 0042 1437     	 adds r7,r7,#20
 3166              	.LCFI66:
 3167              	 .cfi_def_cfa_offset 4
 3168 0044 BD46     	 mov sp,r7
 3169              	.LCFI67:
 3170              	 .cfi_def_cfa_register 13
 3171              	 
 3172 0046 5DF8047B 	 ldr r7,[sp],#4
 3173              	.LCFI68:
 3174              	 .cfi_restore 7
 3175              	 .cfi_def_cfa_offset 0
 3176 004a 7047     	 bx lr
 3177              	 .cfi_endproc
 3178              	.LFE564:
 3180              	 .section .text.UBLOX_parse_gps,"ax",%progbits
 3181              	 .align 2
 3182              	 .thumb
 3183              	 .thumb_func
 3185              	UBLOX_parse_gps:
 3186              	.LFB565:
1048:../cleanflight/src/main/io/gps.c **** 
1049:../cleanflight/src/main/io/gps.c **** 
1050:../cleanflight/src/main/io/gps.c **** static bool UBLOX_parse_gps(void)
1051:../cleanflight/src/main/io/gps.c **** {
 3187              	 .loc 2 1051 0
 3188              	 .cfi_startproc
 3189              	 
 3190              	 
 3191 0000 80B5     	 push {r7,lr}
 3192              	.LCFI69:
 3193              	 .cfi_def_cfa_offset 8
 3194              	 .cfi_offset 7,-8
 3195              	 .cfi_offset 14,-4
 3196 0002 84B0     	 sub sp,sp,#16
 3197              	.LCFI70:
 3198              	 .cfi_def_cfa_offset 24
 3199 0004 00AF     	 add r7,sp,#0
 3200              	.LCFI71:
 3201              	 .cfi_def_cfa_register 7
1052:../cleanflight/src/main/io/gps.c ****     uint32_t i;
1053:../cleanflight/src/main/io/gps.c **** 
1054:../cleanflight/src/main/io/gps.c ****     *gpsPacketLogChar = LOG_IGNORED;
 3202              	 .loc 2 1054 0
 3203 0006 B24B     	 ldr r3,.L202+8
 3204 0008 1B68     	 ldr r3,[r3]
 3205 000a 2122     	 movs r2,#33
 3206 000c 1A70     	 strb r2,[r3]
1055:../cleanflight/src/main/io/gps.c **** 
1056:../cleanflight/src/main/io/gps.c ****     switch (_msg_id) {
 3207              	 .loc 2 1056 0
 3208 000e B14B     	 ldr r3,.L202+12
 3209 0010 1B78     	 ldrb r3,[r3]
 3210 0012 023B     	 subs r3,r3,#2
 3211 0014 2E2B     	 cmp r3,#46
 3212 0016 00F2BC81 	 bhi .L180
 3213 001a 01A2     	 adr r2,.L182
 3214 001c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 3215              	 .p2align 2
 3216              	.L182:
 3217 0020 DD000000 	 .word .L181+1
 3218 0024 37010000 	 .word .L183+1
 3219 0028 93030000 	 .word .L180+1
 3220 002c 93030000 	 .word .L180+1
 3221 0030 83010000 	 .word .L184+1
 3222 0034 93030000 	 .word .L180+1
 3223 0038 93030000 	 .word .L180+1
 3224 003c 93030000 	 .word .L180+1
 3225 0040 93030000 	 .word .L180+1
 3226 0044 93030000 	 .word .L180+1
 3227 0048 93030000 	 .word .L180+1
 3228 004c 93030000 	 .word .L180+1
 3229 0050 93030000 	 .word .L180+1
 3230 0054 93030000 	 .word .L180+1
 3231 0058 93030000 	 .word .L180+1
 3232 005c 93030000 	 .word .L180+1
 3233 0060 6F020000 	 .word .L185+1
 3234 0064 93030000 	 .word .L180+1
 3235 0068 93030000 	 .word .L180+1
 3236 006c 93030000 	 .word .L180+1
 3237 0070 93030000 	 .word .L180+1
 3238 0074 93030000 	 .word .L180+1
 3239 0078 93030000 	 .word .L180+1
 3240 007c 93030000 	 .word .L180+1
 3241 0080 93030000 	 .word .L180+1
 3242 0084 93030000 	 .word .L180+1
 3243 0088 93030000 	 .word .L180+1
 3244 008c 93030000 	 .word .L180+1
 3245 0090 93030000 	 .word .L180+1
 3246 0094 93030000 	 .word .L180+1
 3247 0098 93030000 	 .word .L180+1
 3248 009c 93030000 	 .word .L180+1
 3249 00a0 93030000 	 .word .L180+1
 3250 00a4 93030000 	 .word .L180+1
 3251 00a8 93030000 	 .word .L180+1
 3252 00ac 93030000 	 .word .L180+1
 3253 00b0 93030000 	 .word .L180+1
 3254 00b4 93030000 	 .word .L180+1
 3255 00b8 93030000 	 .word .L180+1
 3256 00bc 93030000 	 .word .L180+1
 3257 00c0 93030000 	 .word .L180+1
 3258 00c4 93030000 	 .word .L180+1
 3259 00c8 93030000 	 .word .L180+1
 3260 00cc 93030000 	 .word .L180+1
 3261 00d0 93030000 	 .word .L180+1
 3262 00d4 93030000 	 .word .L180+1
 3263 00d8 9F020000 	 .word .L186+1
 3264              	 .p2align 1
 3265              	.L181:
1057:../cleanflight/src/main/io/gps.c ****     case MSG_POSLLH:
1058:../cleanflight/src/main/io/gps.c ****         *gpsPacketLogChar = LOG_UBLOX_POSLLH;
 3266              	 .loc 2 1058 0
 3267 00dc 7C4B     	 ldr r3,.L202+8
 3268 00de 1B68     	 ldr r3,[r3]
 3269 00e0 5022     	 movs r2,#80
 3270 00e2 1A70     	 strb r2,[r3]
1059:../cleanflight/src/main/io/gps.c ****         //i2c_dataset.time                = _buffer.posllh.time;
1060:../cleanflight/src/main/io/gps.c ****         gpsSol.llh.lon = _buffer.posllh.longitude;
 3271              	 .loc 2 1060 0
 3272 00e4 7C4B     	 ldr r3,.L202+16
 3273 00e6 5B68     	 ldr r3,[r3,#4]
 3274 00e8 7C4A     	 ldr r2,.L202+20
 3275 00ea 5360     	 str r3,[r2,#4]
1061:../cleanflight/src/main/io/gps.c ****         gpsSol.llh.lat = _buffer.posllh.latitude;
 3276              	 .loc 2 1061 0
 3277 00ec 7A4B     	 ldr r3,.L202+16
 3278 00ee 9B68     	 ldr r3,[r3,#8]
 3279 00f0 7A4A     	 ldr r2,.L202+20
 3280 00f2 1360     	 str r3,[r2]
1062:../cleanflight/src/main/io/gps.c ****         gpsSol.llh.alt = _buffer.posllh.altitude_msl / 10;  //alt in cm
 3281              	 .loc 2 1062 0
 3282 00f4 784B     	 ldr r3,.L202+16
 3283 00f6 1B69     	 ldr r3,[r3,#16]
 3284 00f8 794A     	 ldr r2,.L202+24
 3285 00fa 82FB0312 	 smull r1,r2,r2,r3
 3286 00fe 9210     	 asrs r2,r2,#2
 3287 0100 DB17     	 asrs r3,r3,#31
 3288 0102 D31A     	 subs r3,r2,r3
 3289 0104 754A     	 ldr r2,.L202+20
 3290 0106 9360     	 str r3,[r2,#8]
1063:../cleanflight/src/main/io/gps.c ****         if (next_fix) {
 3291              	 .loc 2 1063 0
 3292 0108 764B     	 ldr r3,.L202+28
 3293 010a 1B78     	 ldrb r3,[r3]
 3294 010c 002B     	 cmp r3,#0
 3295 010e 07D0     	 beq .L187
1064:../cleanflight/src/main/io/gps.c ****             ENABLE_STATE(GPS_FIX);
 3296              	 .loc 2 1064 0
 3297 0110 754B     	 ldr r3,.L202+32
 3298 0112 1B78     	 ldrb r3,[r3]
 3299 0114 43F00203 	 orr r3,r3,#2
 3300 0118 DAB2     	 uxtb r2,r3
 3301 011a 734B     	 ldr r3,.L202+32
 3302 011c 1A70     	 strb r2,[r3]
 3303 011e 06E0     	 b .L188
 3304              	.L187:
1065:../cleanflight/src/main/io/gps.c ****         } else {
1066:../cleanflight/src/main/io/gps.c ****             DISABLE_STATE(GPS_FIX);
 3305              	 .loc 2 1066 0
 3306 0120 714B     	 ldr r3,.L202+32
 3307 0122 1B78     	 ldrb r3,[r3]
 3308 0124 23F00203 	 bic r3,r3,#2
 3309 0128 DAB2     	 uxtb r2,r3
 3310 012a 6F4B     	 ldr r3,.L202+32
 3311 012c 1A70     	 strb r2,[r3]
 3312              	.L188:
1067:../cleanflight/src/main/io/gps.c ****         }
1068:../cleanflight/src/main/io/gps.c ****         _new_position = true;
 3313              	 .loc 2 1068 0
 3314 012e 6F4B     	 ldr r3,.L202+36
 3315 0130 0122     	 movs r2,#1
 3316 0132 1A70     	 strb r2,[r3]
1069:../cleanflight/src/main/io/gps.c ****         break;
 3317              	 .loc 2 1069 0
 3318 0134 2FE1     	 b .L189
 3319              	.L183:
1070:../cleanflight/src/main/io/gps.c ****     case MSG_STATUS:
1071:../cleanflight/src/main/io/gps.c ****         *gpsPacketLogChar = LOG_UBLOX_STATUS;
 3320              	 .loc 2 1071 0
 3321 0136 664B     	 ldr r3,.L202+8
 3322 0138 1B68     	 ldr r3,[r3]
 3323 013a 5322     	 movs r2,#83
 3324 013c 1A70     	 strb r2,[r3]
1072:../cleanflight/src/main/io/gps.c ****         next_fix = (_buffer.status.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.status.fix_type =
 3325              	 .loc 2 1072 0
 3326 013e 664B     	 ldr r3,.L202+16
 3327 0140 5B79     	 ldrb r3,[r3,#5]
 3328 0142 03F00103 	 and r3,r3,#1
 3329 0146 002B     	 cmp r3,#0
 3330 0148 05D0     	 beq .L190
 3331              	 .loc 2 1072 0 is_stmt 0 discriminator 1
 3332 014a 634B     	 ldr r3,.L202+16
 3333 014c 1B79     	 ldrb r3,[r3,#4]
 3334 014e 032B     	 cmp r3,#3
 3335 0150 01D1     	 bne .L190
 3336              	 .loc 2 1072 0 discriminator 3
 3337 0152 0123     	 movs r3,#1
 3338 0154 00E0     	 b .L191
 3339              	.L190:
 3340              	 .loc 2 1072 0 discriminator 4
 3341 0156 0023     	 movs r3,#0
 3342              	.L191:
 3343              	 .loc 2 1072 0 discriminator 6
 3344 0158 03F00103 	 and r3,r3,#1
 3345 015c DAB2     	 uxtb r2,r3
 3346 015e 614B     	 ldr r3,.L202+28
 3347 0160 1A70     	 strb r2,[r3]
1073:../cleanflight/src/main/io/gps.c ****         if (!next_fix)
 3348              	 .loc 2 1073 0 is_stmt 1 discriminator 6
 3349 0162 604B     	 ldr r3,.L202+28
 3350 0164 1B78     	 ldrb r3,[r3]
 3351 0166 83F00103 	 eor r3,r3,#1
 3352 016a DBB2     	 uxtb r3,r3
 3353 016c 002B     	 cmp r3,#0
 3354 016e 07D0     	 beq .L192
1074:../cleanflight/src/main/io/gps.c ****             DISABLE_STATE(GPS_FIX);
 3355              	 .loc 2 1074 0
 3356 0170 5D4B     	 ldr r3,.L202+32
 3357 0172 1B78     	 ldrb r3,[r3]
 3358 0174 23F00203 	 bic r3,r3,#2
 3359 0178 DAB2     	 uxtb r2,r3
 3360 017a 5B4B     	 ldr r3,.L202+32
 3361 017c 1A70     	 strb r2,[r3]
1075:../cleanflight/src/main/io/gps.c ****         break;
 3362              	 .loc 2 1075 0
 3363 017e 0AE1     	 b .L189
 3364              	.L192:
 3365 0180 09E1     	 b .L189
 3366              	.L184:
1076:../cleanflight/src/main/io/gps.c ****     case MSG_SOL:
1077:../cleanflight/src/main/io/gps.c ****         *gpsPacketLogChar = LOG_UBLOX_SOL;
 3367              	 .loc 2 1077 0
 3368 0182 534B     	 ldr r3,.L202+8
 3369 0184 1B68     	 ldr r3,[r3]
 3370 0186 4F22     	 movs r2,#79
 3371 0188 1A70     	 strb r2,[r3]
1078:../cleanflight/src/main/io/gps.c ****         next_fix = (_buffer.solution.fix_status & NAV_STATUS_FIX_VALID) && (_buffer.solution.fix_ty
 3372              	 .loc 2 1078 0
 3373 018a 534B     	 ldr r3,.L202+16
 3374 018c DB7A     	 ldrb r3,[r3,#11]
 3375 018e 03F00103 	 and r3,r3,#1
 3376 0192 002B     	 cmp r3,#0
 3377 0194 05D0     	 beq .L193
 3378              	 .loc 2 1078 0 is_stmt 0 discriminator 1
 3379 0196 504B     	 ldr r3,.L202+16
 3380 0198 9B7A     	 ldrb r3,[r3,#10]
 3381 019a 032B     	 cmp r3,#3
 3382 019c 01D1     	 bne .L193
 3383              	 .loc 2 1078 0 discriminator 3
 3384 019e 0123     	 movs r3,#1
 3385 01a0 00E0     	 b .L194
 3386              	.L193:
 3387              	 .loc 2 1078 0 discriminator 4
 3388 01a2 0023     	 movs r3,#0
 3389              	.L194:
 3390              	 .loc 2 1078 0 discriminator 6
 3391 01a4 03F00103 	 and r3,r3,#1
 3392 01a8 DAB2     	 uxtb r2,r3
 3393 01aa 4E4B     	 ldr r3,.L202+28
 3394 01ac 1A70     	 strb r2,[r3]
1079:../cleanflight/src/main/io/gps.c ****         if (!next_fix)
 3395              	 .loc 2 1079 0 is_stmt 1 discriminator 6
 3396 01ae 4D4B     	 ldr r3,.L202+28
 3397 01b0 1B78     	 ldrb r3,[r3]
 3398 01b2 83F00103 	 eor r3,r3,#1
 3399 01b6 DBB2     	 uxtb r3,r3
 3400 01b8 002B     	 cmp r3,#0
 3401 01ba 06D0     	 beq .L195
1080:../cleanflight/src/main/io/gps.c ****             DISABLE_STATE(GPS_FIX);
 3402              	 .loc 2 1080 0
 3403 01bc 4A4B     	 ldr r3,.L202+32
 3404 01be 1B78     	 ldrb r3,[r3]
 3405 01c0 23F00203 	 bic r3,r3,#2
 3406 01c4 DAB2     	 uxtb r2,r3
 3407 01c6 484B     	 ldr r3,.L202+32
 3408 01c8 1A70     	 strb r2,[r3]
 3409              	.L195:
1081:../cleanflight/src/main/io/gps.c ****         gpsSol.numSat = _buffer.solution.satellites;
 3410              	 .loc 2 1081 0
 3411 01ca 434B     	 ldr r3,.L202+16
 3412 01cc 93F82F20 	 ldrb r2,[r3,#47]
 3413 01d0 424B     	 ldr r3,.L202+20
 3414 01d2 9A74     	 strb r2,[r3,#18]
1082:../cleanflight/src/main/io/gps.c ****         gpsSol.hdop = _buffer.solution.position_DOP;
 3415              	 .loc 2 1082 0
 3416 01d4 404B     	 ldr r3,.L202+16
 3417 01d6 9A8D     	 ldrh r2,[r3,#44]
 3418 01d8 404B     	 ldr r3,.L202+20
 3419 01da 1A82     	 strh r2,[r3,#16]
1083:../cleanflight/src/main/io/gps.c **** #ifdef USE_RTC_TIME
1084:../cleanflight/src/main/io/gps.c ****         //set clock, when gps time is available
1085:../cleanflight/src/main/io/gps.c ****         if(!rtcHasTime() && (_buffer.solution.fix_status & NAV_STATUS_TIME_SECOND_VALID) && (_buffe
 3420              	 .loc 2 1085 0
 3421 01dc FFF7FEFF 	 bl rtcHasTime
 3422 01e0 0346     	 mov r3,r0
 3423 01e2 83F00103 	 eor r3,r3,#1
 3424 01e6 DBB2     	 uxtb r3,r3
 3425 01e8 002B     	 cmp r3,#0
 3426 01ea 3FD0     	 beq .L196
 3427              	 .loc 2 1085 0 is_stmt 0 discriminator 1
 3428 01ec 3A4B     	 ldr r3,.L202+16
 3429 01ee DB7A     	 ldrb r3,[r3,#11]
 3430 01f0 03F00803 	 and r3,r3,#8
 3431 01f4 002B     	 cmp r3,#0
 3432 01f6 39D0     	 beq .L196
 3433              	 .loc 2 1085 0 discriminator 2
 3434 01f8 374B     	 ldr r3,.L202+16
 3435 01fa DB7A     	 ldrb r3,[r3,#11]
 3436 01fc 03F00403 	 and r3,r3,#4
 3437 0200 002B     	 cmp r3,#0
 3438 0202 33D0     	 beq .L196
 3439              	.LBB5:
1086:../cleanflight/src/main/io/gps.c ****             //calculate rtctime: week number * ms in a week + ms of week + fractions of second + of
1087:../cleanflight/src/main/io/gps.c ****             rtcTime_t temp_time = (((int64_t) _buffer.solution.week)*7*24*60*60*1000) + _buffer.sol
 3440              	 .loc 2 1087 0 is_stmt 1
 3441 0204 344B     	 ldr r3,.L202+16
 3442 0206 1B89     	 ldrh r3,[r3,#8]
 3443 0208 1AB2     	 sxth r2,r3
 3444 020a 4FEAE273 	 asr r3,r2,#31
 3445 020e 3849     	 ldr r1,.L202+40
 3446 0210 01FB03F0 	 mul r0,r1,r3
 3447 0214 0021     	 movs r1,#0
 3448 0216 01FB02F1 	 mul r1,r1,r2
 3449 021a 0144     	 add r1,r1,r0
 3450 021c 3448     	 ldr r0,.L202+40
 3451 021e A2FB0023 	 umull r2,r3,r2,r0
 3452 0222 1944     	 add r1,r1,r3
 3453 0224 0B46     	 mov r3,r1
 3454 0226 2C49     	 ldr r1,.L202+16
 3455 0228 0968     	 ldr r1,[r1]
 3456 022a 0846     	 mov r0,r1
 3457 022c 4FF00001 	 mov r1,#0
 3458 0230 8018     	 adds r0,r0,r2
 3459 0232 41EB0301 	 adc r1,r1,r3
 3460 0236 284B     	 ldr r3,.L202+16
 3461 0238 5B68     	 ldr r3,[r3,#4]
 3462 023a 2E4A     	 ldr r2,.L202+44
 3463 023c 82FB03E2 	 smull lr,r2,r2,r3
 3464 0240 9214     	 asrs r2,r2,#18
 3465 0242 DB17     	 asrs r3,r3,#31
 3466 0244 D31A     	 subs r3,r2,r3
 3467 0246 1A46     	 mov r2,r3
 3468 0248 4FEAE273 	 asr r3,r2,#31
 3469 024c 1218     	 adds r2,r2,r0
 3470 024e 43EB0103 	 adc r3,r3,r1
 3471 0252 1DA1     	 adr r1,.L202
 3472 0254 D1E90001 	 ldrd r0,[r1]
 3473 0258 1218     	 adds r2,r2,r0
 3474 025a 43EB0103 	 adc r3,r3,r1
 3475 025e C7E90023 	 strd r2,[r7]
1088:../cleanflight/src/main/io/gps.c ****             rtcSet(&temp_time);
 3476              	 .loc 2 1088 0
 3477 0262 3B46     	 mov r3,r7
 3478 0264 1846     	 mov r0,r3
 3479 0266 FFF7FEFF 	 bl rtcSet
 3480              	.LBE5:
1089:../cleanflight/src/main/io/gps.c ****         }
1090:../cleanflight/src/main/io/gps.c **** #endif
1091:../cleanflight/src/main/io/gps.c ****         break;
 3481              	 .loc 2 1091 0
 3482 026a 94E0     	 b .L189
 3483              	.L196:
 3484              	 .loc 2 1091 0 is_stmt 0 discriminator 1
 3485 026c 93E0     	 b .L189
 3486              	.L185:
1092:../cleanflight/src/main/io/gps.c ****     case MSG_VELNED:
1093:../cleanflight/src/main/io/gps.c ****         *gpsPacketLogChar = LOG_UBLOX_VELNED;
 3487              	 .loc 2 1093 0 is_stmt 1
 3488 026e 184B     	 ldr r3,.L202+8
 3489 0270 1B68     	 ldr r3,[r3]
 3490 0272 5622     	 movs r2,#86
 3491 0274 1A70     	 strb r2,[r3]
1094:../cleanflight/src/main/io/gps.c ****         // speed_3d                        = _buffer.velned.speed_3d;  // cm/s
1095:../cleanflight/src/main/io/gps.c ****         gpsSol.groundSpeed = _buffer.velned.speed_2d;    // cm/s
 3492              	 .loc 2 1095 0
 3493 0276 184B     	 ldr r3,.L202+16
 3494 0278 5B69     	 ldr r3,[r3,#20]
 3495 027a 9AB2     	 uxth r2,r3
 3496 027c 174B     	 ldr r3,.L202+20
 3497 027e 9A81     	 strh r2,[r3,#12]
1096:../cleanflight/src/main/io/gps.c ****         gpsSol.groundCourse = (uint16_t) (_buffer.velned.heading_2d / 10000);     // Heading 2D deg
 3498              	 .loc 2 1096 0
 3499 0280 154B     	 ldr r3,.L202+16
 3500 0282 9B69     	 ldr r3,[r3,#24]
 3501 0284 1C4A     	 ldr r2,.L202+48
 3502 0286 82FB0312 	 smull r1,r2,r2,r3
 3503 028a 1213     	 asrs r2,r2,#12
 3504 028c DB17     	 asrs r3,r3,#31
 3505 028e D31A     	 subs r3,r2,r3
 3506 0290 9AB2     	 uxth r2,r3
 3507 0292 124B     	 ldr r3,.L202+20
 3508 0294 DA81     	 strh r2,[r3,#14]
1097:../cleanflight/src/main/io/gps.c ****         _new_speed = true;
 3509              	 .loc 2 1097 0
 3510 0296 194B     	 ldr r3,.L202+52
 3511 0298 0122     	 movs r2,#1
 3512 029a 1A70     	 strb r2,[r3]
1098:../cleanflight/src/main/io/gps.c ****         break;
 3513              	 .loc 2 1098 0
 3514 029c 7BE0     	 b .L189
 3515              	.L186:
1099:../cleanflight/src/main/io/gps.c ****     case MSG_SVINFO:
1100:../cleanflight/src/main/io/gps.c ****         *gpsPacketLogChar = LOG_UBLOX_SVINFO;
 3516              	 .loc 2 1100 0
 3517 029e 0C4B     	 ldr r3,.L202+8
 3518 02a0 1B68     	 ldr r3,[r3]
 3519 02a2 4922     	 movs r2,#73
 3520 02a4 1A70     	 strb r2,[r3]
1101:../cleanflight/src/main/io/gps.c ****         GPS_numCh = _buffer.svinfo.numCh;
 3521              	 .loc 2 1101 0
 3522 02a6 0C4B     	 ldr r3,.L202+16
 3523 02a8 1A79     	 ldrb r2,[r3,#4]
 3524 02aa 154B     	 ldr r3,.L202+56
 3525 02ac 1A70     	 strb r2,[r3]
1102:../cleanflight/src/main/io/gps.c ****         if (GPS_numCh > 16)
 3526              	 .loc 2 1102 0
 3527 02ae 144B     	 ldr r3,.L202+56
 3528 02b0 1B78     	 ldrb r3,[r3]
 3529 02b2 102B     	 cmp r3,#16
 3530 02b4 02D9     	 bls .L197
1103:../cleanflight/src/main/io/gps.c ****             GPS_numCh = 16;
 3531              	 .loc 2 1103 0
 3532 02b6 124B     	 ldr r3,.L202+56
 3533 02b8 1022     	 movs r2,#16
 3534 02ba 1A70     	 strb r2,[r3]
 3535              	.L197:
1104:../cleanflight/src/main/io/gps.c ****         for (i = 0; i < GPS_numCh; i++) {
 3536              	 .loc 2 1104 0
 3537 02bc 0023     	 movs r3,#0
 3538 02be FB60     	 str r3,[r7,#12]
 3539 02c0 5BE0     	 b .L198
 3540              	.L203:
 3541 02c2 00BFAFF3 	 .align 3
 3541      0080
 3542              	.L202:
 3543 02c8 B0F5F790 	 .word -1862797904
 3544 02cc 49000000 	 .word 73
 3545 02d0 00000000 	 .word gpsPacketLogChar
 3546 02d4 00000000 	 .word _msg_id
 3547 02d8 00000000 	 .word _buffer
 3548 02dc 00000000 	 .word gpsSol
 3549 02e0 67666666 	 .word 1717986919
 3550 02e4 00000000 	 .word next_fix
 3551 02e8 00000000 	 .word stateFlags
 3552 02ec 00000000 	 .word _new_position
 3553 02f0 00840C24 	 .word 604800000
 3554 02f4 83DE1B43 	 .word 1125899907
 3555 02f8 AD8BDB68 	 .word 1759218605
 3556 02fc 00000000 	 .word _new_speed
 3557 0300 00000000 	 .word GPS_numCh
 3558              	.L199:
1105:../cleanflight/src/main/io/gps.c ****             GPS_svinfo_chn[i]= _buffer.svinfo.channel[i].chn;
 3559              	 .loc 2 1105 0 discriminator 3
 3560 0304 2F49     	 ldr r1,.L204
 3561 0306 FA68     	 ldr r2,[r7,#12]
 3562 0308 1346     	 mov r3,r2
 3563 030a 5B00     	 lsls r3,r3,#1
 3564 030c 1344     	 add r3,r3,r2
 3565 030e 9B00     	 lsls r3,r3,#2
 3566 0310 0B44     	 add r3,r3,r1
 3567 0312 0833     	 adds r3,r3,#8
 3568 0314 1978     	 ldrb r1,[r3]
 3569 0316 2C4A     	 ldr r2,.L204+4
 3570 0318 FB68     	 ldr r3,[r7,#12]
 3571 031a 1344     	 add r3,r3,r2
 3572 031c 0A46     	 mov r2,r1
 3573 031e 1A70     	 strb r2,[r3]
1106:../cleanflight/src/main/io/gps.c ****             GPS_svinfo_svid[i]= _buffer.svinfo.channel[i].svid;
 3574              	 .loc 2 1106 0 discriminator 3
 3575 0320 2849     	 ldr r1,.L204
 3576 0322 FA68     	 ldr r2,[r7,#12]
 3577 0324 1346     	 mov r3,r2
 3578 0326 5B00     	 lsls r3,r3,#1
 3579 0328 1344     	 add r3,r3,r2
 3580 032a 9B00     	 lsls r3,r3,#2
 3581 032c 0B44     	 add r3,r3,r1
 3582 032e 0833     	 adds r3,r3,#8
 3583 0330 5978     	 ldrb r1,[r3,#1]
 3584 0332 264A     	 ldr r2,.L204+8
 3585 0334 FB68     	 ldr r3,[r7,#12]
 3586 0336 1344     	 add r3,r3,r2
 3587 0338 0A46     	 mov r2,r1
 3588 033a 1A70     	 strb r2,[r3]
1107:../cleanflight/src/main/io/gps.c ****             GPS_svinfo_quality[i]=_buffer.svinfo.channel[i].quality;
 3589              	 .loc 2 1107 0 discriminator 3
 3590 033c 2149     	 ldr r1,.L204
 3591 033e FA68     	 ldr r2,[r7,#12]
 3592 0340 1346     	 mov r3,r2
 3593 0342 5B00     	 lsls r3,r3,#1
 3594 0344 1344     	 add r3,r3,r2
 3595 0346 9B00     	 lsls r3,r3,#2
 3596 0348 0B44     	 add r3,r3,r1
 3597 034a 0833     	 adds r3,r3,#8
 3598 034c D978     	 ldrb r1,[r3,#3]
 3599 034e 204A     	 ldr r2,.L204+12
 3600 0350 FB68     	 ldr r3,[r7,#12]
 3601 0352 1344     	 add r3,r3,r2
 3602 0354 0A46     	 mov r2,r1
 3603 0356 1A70     	 strb r2,[r3]
1108:../cleanflight/src/main/io/gps.c ****             GPS_svinfo_cno[i]= _buffer.svinfo.channel[i].cno;
 3604              	 .loc 2 1108 0 discriminator 3
 3605 0358 1A49     	 ldr r1,.L204
 3606 035a FA68     	 ldr r2,[r7,#12]
 3607 035c 1346     	 mov r3,r2
 3608 035e 5B00     	 lsls r3,r3,#1
 3609 0360 1344     	 add r3,r3,r2
 3610 0362 9B00     	 lsls r3,r3,#2
 3611 0364 0B44     	 add r3,r3,r1
 3612 0366 0833     	 adds r3,r3,#8
 3613 0368 1979     	 ldrb r1,[r3,#4]
 3614 036a 1A4A     	 ldr r2,.L204+16
 3615 036c FB68     	 ldr r3,[r7,#12]
 3616 036e 1344     	 add r3,r3,r2
 3617 0370 0A46     	 mov r2,r1
 3618 0372 1A70     	 strb r2,[r3]
1104:../cleanflight/src/main/io/gps.c ****             GPS_svinfo_chn[i]= _buffer.svinfo.channel[i].chn;
 3619              	 .loc 2 1104 0 discriminator 3
 3620 0374 FB68     	 ldr r3,[r7,#12]
 3621 0376 0133     	 adds r3,r3,#1
 3622 0378 FB60     	 str r3,[r7,#12]
 3623              	.L198:
1104:../cleanflight/src/main/io/gps.c ****             GPS_svinfo_chn[i]= _buffer.svinfo.channel[i].chn;
 3624              	 .loc 2 1104 0 is_stmt 0 discriminator 1
 3625 037a 174B     	 ldr r3,.L204+20
 3626 037c 1B78     	 ldrb r3,[r3]
 3627 037e 1A46     	 mov r2,r3
 3628 0380 FB68     	 ldr r3,[r7,#12]
 3629 0382 9A42     	 cmp r2,r3
 3630 0384 BED8     	 bhi .L199
1109:../cleanflight/src/main/io/gps.c ****         }
1110:../cleanflight/src/main/io/gps.c ****         GPS_svInfoReceivedCount++;
 3631              	 .loc 2 1110 0 is_stmt 1
 3632 0386 154B     	 ldr r3,.L204+24
 3633 0388 1B68     	 ldr r3,[r3]
 3634 038a 0133     	 adds r3,r3,#1
 3635 038c 134A     	 ldr r2,.L204+24
 3636 038e 1360     	 str r3,[r2]
1111:../cleanflight/src/main/io/gps.c ****         break;
 3637              	 .loc 2 1111 0
 3638 0390 01E0     	 b .L189
 3639              	.L180:
1112:../cleanflight/src/main/io/gps.c ****     default:
1113:../cleanflight/src/main/io/gps.c ****         return false;
 3640              	 .loc 2 1113 0
 3641 0392 0023     	 movs r3,#0
 3642 0394 11E0     	 b .L200
 3643              	.L189:
1114:../cleanflight/src/main/io/gps.c ****     }
1115:../cleanflight/src/main/io/gps.c **** 
1116:../cleanflight/src/main/io/gps.c ****     // we only return true when we get new position and speed data
1117:../cleanflight/src/main/io/gps.c ****     // this ensures we don't use stale data
1118:../cleanflight/src/main/io/gps.c ****     if (_new_position && _new_speed) {
 3644              	 .loc 2 1118 0
 3645 0396 124B     	 ldr r3,.L204+28
 3646 0398 1B78     	 ldrb r3,[r3]
 3647 039a 002B     	 cmp r3,#0
 3648 039c 0CD0     	 beq .L201
 3649              	 .loc 2 1118 0 is_stmt 0 discriminator 1
 3650 039e 114B     	 ldr r3,.L204+32
 3651 03a0 1B78     	 ldrb r3,[r3]
 3652 03a2 002B     	 cmp r3,#0
 3653 03a4 08D0     	 beq .L201
1119:../cleanflight/src/main/io/gps.c ****         _new_speed = _new_position = false;
 3654              	 .loc 2 1119 0 is_stmt 1
 3655 03a6 0E4B     	 ldr r3,.L204+28
 3656 03a8 0022     	 movs r2,#0
 3657 03aa 1A70     	 strb r2,[r3]
 3658 03ac 0C4B     	 ldr r3,.L204+28
 3659 03ae 1A78     	 ldrb r2,[r3]
 3660 03b0 0C4B     	 ldr r3,.L204+32
 3661 03b2 1A70     	 strb r2,[r3]
1120:../cleanflight/src/main/io/gps.c ****         return true;
 3662              	 .loc 2 1120 0
 3663 03b4 0123     	 movs r3,#1
 3664 03b6 00E0     	 b .L200
 3665              	.L201:
1121:../cleanflight/src/main/io/gps.c ****     }
1122:../cleanflight/src/main/io/gps.c ****     return false;
 3666              	 .loc 2 1122 0
 3667 03b8 0023     	 movs r3,#0
 3668              	.L200:
1123:../cleanflight/src/main/io/gps.c **** }
 3669              	 .loc 2 1123 0
 3670 03ba 1846     	 mov r0,r3
 3671 03bc 1037     	 adds r7,r7,#16
 3672              	.LCFI72:
 3673              	 .cfi_def_cfa_offset 8
 3674 03be BD46     	 mov sp,r7
 3675              	.LCFI73:
 3676              	 .cfi_def_cfa_register 13
 3677              	 
 3678 03c0 80BD     	 pop {r7,pc}
 3679              	.L205:
 3680 03c2 00BF     	 .align 2
 3681              	.L204:
 3682 03c4 00000000 	 .word _buffer
 3683 03c8 00000000 	 .word GPS_svinfo_chn
 3684 03cc 00000000 	 .word GPS_svinfo_svid
 3685 03d0 00000000 	 .word GPS_svinfo_quality
 3686 03d4 00000000 	 .word GPS_svinfo_cno
 3687 03d8 00000000 	 .word GPS_numCh
 3688 03dc 00000000 	 .word GPS_svInfoReceivedCount
 3689 03e0 00000000 	 .word _new_position
 3690 03e4 00000000 	 .word _new_speed
 3691              	 .cfi_endproc
 3692              	.LFE565:
 3694              	 .section .text.gpsNewFrameUBLOX,"ax",%progbits
 3695              	 .align 2
 3696              	 .thumb
 3697              	 .thumb_func
 3699              	gpsNewFrameUBLOX:
 3700              	.LFB566:
1124:../cleanflight/src/main/io/gps.c **** 
1125:../cleanflight/src/main/io/gps.c **** static bool gpsNewFrameUBLOX(uint8_t data)
1126:../cleanflight/src/main/io/gps.c **** {
 3701              	 .loc 2 1126 0
 3702              	 .cfi_startproc
 3703              	 
 3704              	 
 3705 0000 80B5     	 push {r7,lr}
 3706              	.LCFI74:
 3707              	 .cfi_def_cfa_offset 8
 3708              	 .cfi_offset 7,-8
 3709              	 .cfi_offset 14,-4
 3710 0002 84B0     	 sub sp,sp,#16
 3711              	.LCFI75:
 3712              	 .cfi_def_cfa_offset 24
 3713 0004 00AF     	 add r7,sp,#0
 3714              	.LCFI76:
 3715              	 .cfi_def_cfa_register 7
 3716 0006 0346     	 mov r3,r0
 3717 0008 FB71     	 strb r3,[r7,#7]
1127:../cleanflight/src/main/io/gps.c ****     bool parsed = false;
 3718              	 .loc 2 1127 0
 3719 000a 0023     	 movs r3,#0
 3720 000c FB73     	 strb r3,[r7,#15]
1128:../cleanflight/src/main/io/gps.c **** 
1129:../cleanflight/src/main/io/gps.c ****     switch (_step) {
 3721              	 .loc 2 1129 0
 3722 000e 8F4B     	 ldr r3,.L228
 3723 0010 1B78     	 ldrb r3,[r3]
 3724 0012 082B     	 cmp r3,#8
 3725 0014 00F21581 	 bhi .L207
 3726 0018 01A2     	 adr r2,.L209
 3727 001a 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 3728 001e 00BF     	 .p2align 2
 3729              	.L209:
 3730 0020 45000000 	 .word .L208+1
 3731 0024 61000000 	 .word .L210+1
 3732 0028 7D000000 	 .word .L211+1
 3733 002c 9F000000 	 .word .L212+1
 3734 0030 D1000000 	 .word .L213+1
 3735 0034 05010000 	 .word .L214+1
 3736 0038 6B010000 	 .word .L215+1
 3737 003c C7010000 	 .word .L216+1
 3738 0040 F1010000 	 .word .L217+1
 3739              	 .p2align 1
 3740              	.L208:
1130:../cleanflight/src/main/io/gps.c ****         case 0: // Sync char 1 (0xB5)
1131:../cleanflight/src/main/io/gps.c ****             if (PREAMBLE1 == data) {
 3741              	 .loc 2 1131 0
 3742 0044 FB79     	 ldrb r3,[r7,#7]
 3743 0046 B52B     	 cmp r3,#181
 3744 0048 09D1     	 bne .L218
1132:../cleanflight/src/main/io/gps.c ****                 _skip_packet = false;
 3745              	 .loc 2 1132 0
 3746 004a 814B     	 ldr r3,.L228+4
 3747 004c 0022     	 movs r2,#0
 3748 004e 1A70     	 strb r2,[r3]
1133:../cleanflight/src/main/io/gps.c ****                 _step++;
 3749              	 .loc 2 1133 0
 3750 0050 7E4B     	 ldr r3,.L228
 3751 0052 1B78     	 ldrb r3,[r3]
 3752 0054 0133     	 adds r3,r3,#1
 3753 0056 DAB2     	 uxtb r2,r3
 3754 0058 7C4B     	 ldr r3,.L228
 3755 005a 1A70     	 strb r2,[r3]
1134:../cleanflight/src/main/io/gps.c ****             }
1135:../cleanflight/src/main/io/gps.c ****             break;
 3756              	 .loc 2 1135 0
 3757 005c F1E0     	 b .L207
 3758              	.L218:
 3759 005e F0E0     	 b .L207
 3760              	.L210:
1136:../cleanflight/src/main/io/gps.c ****         case 1: // Sync char 2 (0x62)
1137:../cleanflight/src/main/io/gps.c ****             if (PREAMBLE2 != data) {
 3761              	 .loc 2 1137 0
 3762 0060 FB79     	 ldrb r3,[r7,#7]
 3763 0062 622B     	 cmp r3,#98
 3764 0064 03D0     	 beq .L219
1138:../cleanflight/src/main/io/gps.c ****                 _step = 0;
 3765              	 .loc 2 1138 0
 3766 0066 794B     	 ldr r3,.L228
 3767 0068 0022     	 movs r2,#0
 3768 006a 1A70     	 strb r2,[r3]
1139:../cleanflight/src/main/io/gps.c ****                 break;
 3769              	 .loc 2 1139 0
 3770 006c E9E0     	 b .L207
 3771              	.L219:
1140:../cleanflight/src/main/io/gps.c ****             }
1141:../cleanflight/src/main/io/gps.c ****             _step++;
 3772              	 .loc 2 1141 0
 3773 006e 774B     	 ldr r3,.L228
 3774 0070 1B78     	 ldrb r3,[r3]
 3775 0072 0133     	 adds r3,r3,#1
 3776 0074 DAB2     	 uxtb r2,r3
 3777 0076 754B     	 ldr r3,.L228
 3778 0078 1A70     	 strb r2,[r3]
1142:../cleanflight/src/main/io/gps.c ****             break;
 3779              	 .loc 2 1142 0
 3780 007a E2E0     	 b .L207
 3781              	.L211:
1143:../cleanflight/src/main/io/gps.c ****         case 2: // Class
1144:../cleanflight/src/main/io/gps.c ****             _step++;
 3782              	 .loc 2 1144 0
 3783 007c 734B     	 ldr r3,.L228
 3784 007e 1B78     	 ldrb r3,[r3]
 3785 0080 0133     	 adds r3,r3,#1
 3786 0082 DAB2     	 uxtb r2,r3
 3787 0084 714B     	 ldr r3,.L228
 3788 0086 1A70     	 strb r2,[r3]
1145:../cleanflight/src/main/io/gps.c ****             _class = data;
 3789              	 .loc 2 1145 0
 3790 0088 724A     	 ldr r2,.L228+8
 3791 008a FB79     	 ldrb r3,[r7,#7]
 3792 008c 1370     	 strb r3,[r2]
1146:../cleanflight/src/main/io/gps.c ****             _ck_b = _ck_a = data;   // reset the checksum accumulators
 3793              	 .loc 2 1146 0
 3794 008e 724A     	 ldr r2,.L228+12
 3795 0090 FB79     	 ldrb r3,[r7,#7]
 3796 0092 1370     	 strb r3,[r2]
 3797 0094 704B     	 ldr r3,.L228+12
 3798 0096 1A78     	 ldrb r2,[r3]
 3799 0098 704B     	 ldr r3,.L228+16
 3800 009a 1A70     	 strb r2,[r3]
1147:../cleanflight/src/main/io/gps.c ****             break;
 3801              	 .loc 2 1147 0
 3802 009c D1E0     	 b .L207
 3803              	.L212:
1148:../cleanflight/src/main/io/gps.c ****         case 3: // Id
1149:../cleanflight/src/main/io/gps.c ****             _step++;
 3804              	 .loc 2 1149 0
 3805 009e 6B4B     	 ldr r3,.L228
 3806 00a0 1B78     	 ldrb r3,[r3]
 3807 00a2 0133     	 adds r3,r3,#1
 3808 00a4 DAB2     	 uxtb r2,r3
 3809 00a6 694B     	 ldr r3,.L228
 3810 00a8 1A70     	 strb r2,[r3]
1150:../cleanflight/src/main/io/gps.c ****             _ck_b += (_ck_a += data);       // checksum byte
 3811              	 .loc 2 1150 0
 3812 00aa 6B4B     	 ldr r3,.L228+12
 3813 00ac 1A78     	 ldrb r2,[r3]
 3814 00ae FB79     	 ldrb r3,[r7,#7]
 3815 00b0 1344     	 add r3,r3,r2
 3816 00b2 DAB2     	 uxtb r2,r3
 3817 00b4 684B     	 ldr r3,.L228+12
 3818 00b6 1A70     	 strb r2,[r3]
 3819 00b8 674B     	 ldr r3,.L228+12
 3820 00ba 1A78     	 ldrb r2,[r3]
 3821 00bc 674B     	 ldr r3,.L228+16
 3822 00be 1B78     	 ldrb r3,[r3]
 3823 00c0 1344     	 add r3,r3,r2
 3824 00c2 DAB2     	 uxtb r2,r3
 3825 00c4 654B     	 ldr r3,.L228+16
 3826 00c6 1A70     	 strb r2,[r3]
1151:../cleanflight/src/main/io/gps.c ****             _msg_id = data;
 3827              	 .loc 2 1151 0
 3828 00c8 654A     	 ldr r2,.L228+20
 3829 00ca FB79     	 ldrb r3,[r7,#7]
 3830 00cc 1370     	 strb r3,[r2]
1152:../cleanflight/src/main/io/gps.c ****             break;
 3831              	 .loc 2 1152 0
 3832 00ce B8E0     	 b .L207
 3833              	.L213:
1153:../cleanflight/src/main/io/gps.c ****         case 4: // Payload length (part 1)
1154:../cleanflight/src/main/io/gps.c ****             _step++;
 3834              	 .loc 2 1154 0
 3835 00d0 5E4B     	 ldr r3,.L228
 3836 00d2 1B78     	 ldrb r3,[r3]
 3837 00d4 0133     	 adds r3,r3,#1
 3838 00d6 DAB2     	 uxtb r2,r3
 3839 00d8 5C4B     	 ldr r3,.L228
 3840 00da 1A70     	 strb r2,[r3]
1155:../cleanflight/src/main/io/gps.c ****             _ck_b += (_ck_a += data);       // checksum byte
 3841              	 .loc 2 1155 0
 3842 00dc 5E4B     	 ldr r3,.L228+12
 3843 00de 1A78     	 ldrb r2,[r3]
 3844 00e0 FB79     	 ldrb r3,[r7,#7]
 3845 00e2 1344     	 add r3,r3,r2
 3846 00e4 DAB2     	 uxtb r2,r3
 3847 00e6 5C4B     	 ldr r3,.L228+12
 3848 00e8 1A70     	 strb r2,[r3]
 3849 00ea 5B4B     	 ldr r3,.L228+12
 3850 00ec 1A78     	 ldrb r2,[r3]
 3851 00ee 5B4B     	 ldr r3,.L228+16
 3852 00f0 1B78     	 ldrb r3,[r3]
 3853 00f2 1344     	 add r3,r3,r2
 3854 00f4 DAB2     	 uxtb r2,r3
 3855 00f6 594B     	 ldr r3,.L228+16
 3856 00f8 1A70     	 strb r2,[r3]
1156:../cleanflight/src/main/io/gps.c ****             _payload_length = data; // payload length low byte
 3857              	 .loc 2 1156 0
 3858 00fa FB79     	 ldrb r3,[r7,#7]
 3859 00fc 9AB2     	 uxth r2,r3
 3860 00fe 594B     	 ldr r3,.L228+24
 3861 0100 1A80     	 strh r2,[r3]
1157:../cleanflight/src/main/io/gps.c ****             break;
 3862              	 .loc 2 1157 0
 3863 0102 9EE0     	 b .L207
 3864              	.L214:
1158:../cleanflight/src/main/io/gps.c ****         case 5: // Payload length (part 2)
1159:../cleanflight/src/main/io/gps.c ****             _step++;
 3865              	 .loc 2 1159 0
 3866 0104 514B     	 ldr r3,.L228
 3867 0106 1B78     	 ldrb r3,[r3]
 3868 0108 0133     	 adds r3,r3,#1
 3869 010a DAB2     	 uxtb r2,r3
 3870 010c 4F4B     	 ldr r3,.L228
 3871 010e 1A70     	 strb r2,[r3]
1160:../cleanflight/src/main/io/gps.c ****             _ck_b += (_ck_a += data);       // checksum byte
 3872              	 .loc 2 1160 0
 3873 0110 514B     	 ldr r3,.L228+12
 3874 0112 1A78     	 ldrb r2,[r3]
 3875 0114 FB79     	 ldrb r3,[r7,#7]
 3876 0116 1344     	 add r3,r3,r2
 3877 0118 DAB2     	 uxtb r2,r3
 3878 011a 4F4B     	 ldr r3,.L228+12
 3879 011c 1A70     	 strb r2,[r3]
 3880 011e 4E4B     	 ldr r3,.L228+12
 3881 0120 1A78     	 ldrb r2,[r3]
 3882 0122 4E4B     	 ldr r3,.L228+16
 3883 0124 1B78     	 ldrb r3,[r3]
 3884 0126 1344     	 add r3,r3,r2
 3885 0128 DAB2     	 uxtb r2,r3
 3886 012a 4C4B     	 ldr r3,.L228+16
 3887 012c 1A70     	 strb r2,[r3]
1161:../cleanflight/src/main/io/gps.c ****             _payload_length += (uint16_t)(data << 8);
 3888              	 .loc 2 1161 0
 3889 012e FB79     	 ldrb r3,[r7,#7]
 3890 0130 9BB2     	 uxth r3,r3
 3891 0132 1B02     	 lsls r3,r3,#8
 3892 0134 9AB2     	 uxth r2,r3
 3893 0136 4B4B     	 ldr r3,.L228+24
 3894 0138 1B88     	 ldrh r3,[r3]
 3895 013a 1344     	 add r3,r3,r2
 3896 013c 9AB2     	 uxth r2,r3
 3897 013e 494B     	 ldr r3,.L228+24
 3898 0140 1A80     	 strh r2,[r3]
1162:../cleanflight/src/main/io/gps.c ****             if (_payload_length > UBLOX_PAYLOAD_SIZE) {
 3899              	 .loc 2 1162 0
 3900 0142 484B     	 ldr r3,.L228+24
 3901 0144 1B88     	 ldrh r3,[r3]
 3902 0146 B3F5AC7F 	 cmp r3,#344
 3903 014a 02D9     	 bls .L220
1163:../cleanflight/src/main/io/gps.c ****                 _skip_packet = true;
 3904              	 .loc 2 1163 0
 3905 014c 404B     	 ldr r3,.L228+4
 3906 014e 0122     	 movs r2,#1
 3907 0150 1A70     	 strb r2,[r3]
 3908              	.L220:
1164:../cleanflight/src/main/io/gps.c ****             }
1165:../cleanflight/src/main/io/gps.c ****             _payload_counter = 0;   // prepare to receive payload
 3909              	 .loc 2 1165 0
 3910 0152 454B     	 ldr r3,.L228+28
 3911 0154 0022     	 movs r2,#0
 3912 0156 1A80     	 strh r2,[r3]
1166:../cleanflight/src/main/io/gps.c ****             if (_payload_length == 0) {
 3913              	 .loc 2 1166 0
 3914 0158 424B     	 ldr r3,.L228+24
 3915 015a 1B88     	 ldrh r3,[r3]
 3916 015c 002B     	 cmp r3,#0
 3917 015e 03D1     	 bne .L221
1167:../cleanflight/src/main/io/gps.c ****                 _step = 7;
 3918              	 .loc 2 1167 0
 3919 0160 3A4B     	 ldr r3,.L228
 3920 0162 0722     	 movs r2,#7
 3921 0164 1A70     	 strb r2,[r3]
1168:../cleanflight/src/main/io/gps.c ****             }
1169:../cleanflight/src/main/io/gps.c ****             break;
 3922              	 .loc 2 1169 0
 3923 0166 6CE0     	 b .L207
 3924              	.L221:
 3925 0168 6BE0     	 b .L207
 3926              	.L215:
1170:../cleanflight/src/main/io/gps.c ****         case 6:
1171:../cleanflight/src/main/io/gps.c ****             _ck_b += (_ck_a += data);       // checksum byte
 3927              	 .loc 2 1171 0
 3928 016a 3B4B     	 ldr r3,.L228+12
 3929 016c 1A78     	 ldrb r2,[r3]
 3930 016e FB79     	 ldrb r3,[r7,#7]
 3931 0170 1344     	 add r3,r3,r2
 3932 0172 DAB2     	 uxtb r2,r3
 3933 0174 384B     	 ldr r3,.L228+12
 3934 0176 1A70     	 strb r2,[r3]
 3935 0178 374B     	 ldr r3,.L228+12
 3936 017a 1A78     	 ldrb r2,[r3]
 3937 017c 374B     	 ldr r3,.L228+16
 3938 017e 1B78     	 ldrb r3,[r3]
 3939 0180 1344     	 add r3,r3,r2
 3940 0182 DAB2     	 uxtb r2,r3
 3941 0184 354B     	 ldr r3,.L228+16
 3942 0186 1A70     	 strb r2,[r3]
1172:../cleanflight/src/main/io/gps.c ****             if (_payload_counter < UBLOX_PAYLOAD_SIZE) {
 3943              	 .loc 2 1172 0
 3944 0188 374B     	 ldr r3,.L228+28
 3945 018a 1B88     	 ldrh r3,[r3]
 3946 018c B3F5AC7F 	 cmp r3,#344
 3947 0190 05D2     	 bcs .L222
1173:../cleanflight/src/main/io/gps.c ****                 _buffer.bytes[_payload_counter] = data;
 3948              	 .loc 2 1173 0
 3949 0192 354B     	 ldr r3,.L228+28
 3950 0194 1B88     	 ldrh r3,[r3]
 3951 0196 1946     	 mov r1,r3
 3952 0198 344A     	 ldr r2,.L228+32
 3953 019a FB79     	 ldrb r3,[r7,#7]
 3954 019c 5354     	 strb r3,[r2,r1]
 3955              	.L222:
1174:../cleanflight/src/main/io/gps.c ****             }
1175:../cleanflight/src/main/io/gps.c ****             if (++_payload_counter >= _payload_length) {
 3956              	 .loc 2 1175 0
 3957 019e 324B     	 ldr r3,.L228+28
 3958 01a0 1B88     	 ldrh r3,[r3]
 3959 01a2 0133     	 adds r3,r3,#1
 3960 01a4 9AB2     	 uxth r2,r3
 3961 01a6 304B     	 ldr r3,.L228+28
 3962 01a8 1A80     	 strh r2,[r3]
 3963 01aa 2F4B     	 ldr r3,.L228+28
 3964 01ac 1A88     	 ldrh r2,[r3]
 3965 01ae 2D4B     	 ldr r3,.L228+24
 3966 01b0 1B88     	 ldrh r3,[r3]
 3967 01b2 9A42     	 cmp r2,r3
 3968 01b4 06D3     	 bcc .L223
1176:../cleanflight/src/main/io/gps.c ****                 _step++;
 3969              	 .loc 2 1176 0
 3970 01b6 254B     	 ldr r3,.L228
 3971 01b8 1B78     	 ldrb r3,[r3]
 3972 01ba 0133     	 adds r3,r3,#1
 3973 01bc DAB2     	 uxtb r2,r3
 3974 01be 234B     	 ldr r3,.L228
 3975 01c0 1A70     	 strb r2,[r3]
1177:../cleanflight/src/main/io/gps.c ****             }
1178:../cleanflight/src/main/io/gps.c ****             break;
 3976              	 .loc 2 1178 0
 3977 01c2 3EE0     	 b .L207
 3978              	.L223:
 3979 01c4 3DE0     	 b .L207
 3980              	.L216:
1179:../cleanflight/src/main/io/gps.c ****         case 7:
1180:../cleanflight/src/main/io/gps.c ****             _step++;
 3981              	 .loc 2 1180 0
 3982 01c6 214B     	 ldr r3,.L228
 3983 01c8 1B78     	 ldrb r3,[r3]
 3984 01ca 0133     	 adds r3,r3,#1
 3985 01cc DAB2     	 uxtb r2,r3
 3986 01ce 1F4B     	 ldr r3,.L228
 3987 01d0 1A70     	 strb r2,[r3]
1181:../cleanflight/src/main/io/gps.c ****             if (_ck_a != data) {
 3988              	 .loc 2 1181 0
 3989 01d2 214B     	 ldr r3,.L228+12
 3990 01d4 1B78     	 ldrb r3,[r3]
 3991 01d6 FA79     	 ldrb r2,[r7,#7]
 3992 01d8 9A42     	 cmp r2,r3
 3993 01da 08D0     	 beq .L224
1182:../cleanflight/src/main/io/gps.c ****                 _skip_packet = true;          // bad checksum
 3994              	 .loc 2 1182 0
 3995 01dc 1C4B     	 ldr r3,.L228+4
 3996 01de 0122     	 movs r2,#1
 3997 01e0 1A70     	 strb r2,[r3]
1183:../cleanflight/src/main/io/gps.c ****                 gpsData.errors++;
 3998              	 .loc 2 1183 0
 3999 01e2 234B     	 ldr r3,.L228+36
 4000 01e4 1B68     	 ldr r3,[r3]
 4001 01e6 0133     	 adds r3,r3,#1
 4002 01e8 214A     	 ldr r2,.L228+36
 4003 01ea 1360     	 str r3,[r2]
1184:../cleanflight/src/main/io/gps.c ****             }
1185:../cleanflight/src/main/io/gps.c ****             break;
 4004              	 .loc 2 1185 0
 4005 01ec 29E0     	 b .L207
 4006              	.L224:
 4007 01ee 28E0     	 b .L207
 4008              	.L217:
1186:../cleanflight/src/main/io/gps.c ****         case 8:
1187:../cleanflight/src/main/io/gps.c ****             _step = 0;
 4009              	 .loc 2 1187 0
 4010 01f0 164B     	 ldr r3,.L228
 4011 01f2 0022     	 movs r2,#0
 4012 01f4 1A70     	 strb r2,[r3]
1188:../cleanflight/src/main/io/gps.c **** 
1189:../cleanflight/src/main/io/gps.c ****             shiftPacketLog();
 4013              	 .loc 2 1189 0
 4014 01f6 FFF7FEFF 	 bl shiftPacketLog
1190:../cleanflight/src/main/io/gps.c **** 
1191:../cleanflight/src/main/io/gps.c ****             if (_ck_b != data) {
 4015              	 .loc 2 1191 0
 4016 01fa 184B     	 ldr r3,.L228+16
 4017 01fc 1B78     	 ldrb r3,[r3]
 4018 01fe FA79     	 ldrb r2,[r7,#7]
 4019 0200 9A42     	 cmp r2,r3
 4020 0202 09D0     	 beq .L225
1192:../cleanflight/src/main/io/gps.c ****                 *gpsPacketLogChar = LOG_ERROR;
 4021              	 .loc 2 1192 0
 4022 0204 1B4B     	 ldr r3,.L228+40
 4023 0206 1B68     	 ldr r3,[r3]
 4024 0208 3F22     	 movs r2,#63
 4025 020a 1A70     	 strb r2,[r3]
1193:../cleanflight/src/main/io/gps.c ****                 gpsData.errors++;
 4026              	 .loc 2 1193 0
 4027 020c 184B     	 ldr r3,.L228+36
 4028 020e 1B68     	 ldr r3,[r3]
 4029 0210 0133     	 adds r3,r3,#1
 4030 0212 174A     	 ldr r2,.L228+36
 4031 0214 1360     	 str r3,[r2]
1194:../cleanflight/src/main/io/gps.c ****                 break;              // bad checksum
 4032              	 .loc 2 1194 0
 4033 0216 14E0     	 b .L207
 4034              	.L225:
1195:../cleanflight/src/main/io/gps.c ****             }
1196:../cleanflight/src/main/io/gps.c **** 
1197:../cleanflight/src/main/io/gps.c ****             GPS_packetCount++;
 4035              	 .loc 2 1197 0
 4036 0218 174B     	 ldr r3,.L228+44
 4037 021a 1B68     	 ldr r3,[r3]
 4038 021c 0133     	 adds r3,r3,#1
 4039 021e 164A     	 ldr r2,.L228+44
 4040 0220 1360     	 str r3,[r2]
1198:../cleanflight/src/main/io/gps.c **** 
1199:../cleanflight/src/main/io/gps.c ****             if (_skip_packet) {
 4041              	 .loc 2 1199 0
 4042 0222 0B4B     	 ldr r3,.L228+4
 4043 0224 1B78     	 ldrb r3,[r3]
 4044 0226 002B     	 cmp r3,#0
 4045 0228 04D0     	 beq .L226
1200:../cleanflight/src/main/io/gps.c ****                 *gpsPacketLogChar = LOG_SKIPPED;
 4046              	 .loc 2 1200 0
 4047 022a 124B     	 ldr r3,.L228+40
 4048 022c 1B68     	 ldr r3,[r3]
 4049 022e 3E22     	 movs r2,#62
 4050 0230 1A70     	 strb r2,[r3]
1201:../cleanflight/src/main/io/gps.c ****                 break;
 4051              	 .loc 2 1201 0
 4052 0232 06E0     	 b .L207
 4053              	.L226:
1202:../cleanflight/src/main/io/gps.c ****             }
1203:../cleanflight/src/main/io/gps.c **** 
1204:../cleanflight/src/main/io/gps.c ****             if (UBLOX_parse_gps()) {
 4054              	 .loc 2 1204 0
 4055 0234 FFF7FEFF 	 bl UBLOX_parse_gps
 4056 0238 0346     	 mov r3,r0
 4057 023a 002B     	 cmp r3,#0
 4058 023c 01D0     	 beq .L207
1205:../cleanflight/src/main/io/gps.c ****                 parsed = true;
 4059              	 .loc 2 1205 0
 4060 023e 0123     	 movs r3,#1
 4061 0240 FB73     	 strb r3,[r7,#15]
 4062              	.L207:
1206:../cleanflight/src/main/io/gps.c ****             }
1207:../cleanflight/src/main/io/gps.c ****     }
1208:../cleanflight/src/main/io/gps.c ****     return parsed;
 4063              	 .loc 2 1208 0
 4064 0242 FB7B     	 ldrb r3,[r7,#15]
1209:../cleanflight/src/main/io/gps.c **** }
 4065              	 .loc 2 1209 0
 4066 0244 1846     	 mov r0,r3
 4067 0246 1037     	 adds r7,r7,#16
 4068              	.LCFI77:
 4069              	 .cfi_def_cfa_offset 8
 4070 0248 BD46     	 mov sp,r7
 4071              	.LCFI78:
 4072              	 .cfi_def_cfa_register 13
 4073              	 
 4074 024a 80BD     	 pop {r7,pc}
 4075              	.L229:
 4076              	 .align 2
 4077              	.L228:
 4078 024c 00000000 	 .word _step
 4079 0250 00000000 	 .word _skip_packet
 4080 0254 00000000 	 .word _class
 4081 0258 00000000 	 .word _ck_a
 4082 025c 00000000 	 .word _ck_b
 4083 0260 00000000 	 .word _msg_id
 4084 0264 00000000 	 .word _payload_length
 4085 0268 00000000 	 .word _payload_counter
 4086 026c 00000000 	 .word _buffer
 4087 0270 00000000 	 .word gpsData
 4088 0274 00000000 	 .word gpsPacketLogChar
 4089 0278 00000000 	 .word GPS_packetCount
 4090              	 .cfi_endproc
 4091              	.LFE566:
 4093              	 .section .text.gpsHandlePassthrough,"ax",%progbits
 4094              	 .align 2
 4095              	 .thumb
 4096              	 .thumb_func
 4098              	gpsHandlePassthrough:
 4099              	.LFB567:
1210:../cleanflight/src/main/io/gps.c **** #endif // USE_GPS_UBLOX
1211:../cleanflight/src/main/io/gps.c **** 
1212:../cleanflight/src/main/io/gps.c **** static void gpsHandlePassthrough(uint8_t data)
1213:../cleanflight/src/main/io/gps.c **** {
 4100              	 .loc 2 1213 0
 4101              	 .cfi_startproc
 4102              	 
 4103              	 
 4104 0000 80B5     	 push {r7,lr}
 4105              	.LCFI79:
 4106              	 .cfi_def_cfa_offset 8
 4107              	 .cfi_offset 7,-8
 4108              	 .cfi_offset 14,-4
 4109 0002 82B0     	 sub sp,sp,#8
 4110              	.LCFI80:
 4111              	 .cfi_def_cfa_offset 16
 4112 0004 00AF     	 add r7,sp,#0
 4113              	.LCFI81:
 4114              	 .cfi_def_cfa_register 7
 4115 0006 0346     	 mov r3,r0
 4116 0008 FB71     	 strb r3,[r7,#7]
1214:../cleanflight/src/main/io/gps.c ****      gpsNewData(data);
 4117              	 .loc 2 1214 0
 4118 000a FB79     	 ldrb r3,[r7,#7]
 4119 000c 9BB2     	 uxth r3,r3
 4120 000e 1846     	 mov r0,r3
 4121 0010 FFF7FEFF 	 bl gpsNewData
1215:../cleanflight/src/main/io/gps.c ****  #ifdef USE_DASHBOARD
1216:../cleanflight/src/main/io/gps.c ****      if (feature(FEATURE_DASHBOARD)) {
 4122              	 .loc 2 1216 0
 4123 0014 4FF40030 	 mov r0,#131072
 4124 0018 FFF7FEFF 	 bl feature
 4125 001c 0346     	 mov r3,r0
 4126 001e 002B     	 cmp r3,#0
 4127 0020 05D0     	 beq .L230
1217:../cleanflight/src/main/io/gps.c ****          dashboardUpdate(micros());
 4128              	 .loc 2 1217 0
 4129 0022 FFF7FEFF 	 bl micros
 4130 0026 0346     	 mov r3,r0
 4131 0028 1846     	 mov r0,r3
 4132 002a FFF7FEFF 	 bl dashboardUpdate
 4133              	.L230:
1218:../cleanflight/src/main/io/gps.c ****      }
1219:../cleanflight/src/main/io/gps.c ****  #endif
1220:../cleanflight/src/main/io/gps.c **** 
1221:../cleanflight/src/main/io/gps.c ****  }
 4134              	 .loc 2 1221 0
 4135 002e 0837     	 adds r7,r7,#8
 4136              	.LCFI82:
 4137              	 .cfi_def_cfa_offset 8
 4138 0030 BD46     	 mov sp,r7
 4139              	.LCFI83:
 4140              	 .cfi_def_cfa_register 13
 4141              	 
 4142 0032 80BD     	 pop {r7,pc}
 4143              	 .cfi_endproc
 4144              	.LFE567:
 4146              	 .section .text.gpsEnablePassthrough,"ax",%progbits
 4147              	 .align 2
 4148              	 .global gpsEnablePassthrough
 4149              	 .thumb
 4150              	 .thumb_func
 4152              	gpsEnablePassthrough:
 4153              	.LFB568:
1222:../cleanflight/src/main/io/gps.c **** 
1223:../cleanflight/src/main/io/gps.c **** void gpsEnablePassthrough(serialPort_t *gpsPassthroughPort)
1224:../cleanflight/src/main/io/gps.c **** {
 4154              	 .loc 2 1224 0
 4155              	 .cfi_startproc
 4156              	 
 4157              	 
 4158 0000 80B5     	 push {r7,lr}
 4159              	.LCFI84:
 4160              	 .cfi_def_cfa_offset 8
 4161              	 .cfi_offset 7,-8
 4162              	 .cfi_offset 14,-4
 4163 0002 82B0     	 sub sp,sp,#8
 4164              	.LCFI85:
 4165              	 .cfi_def_cfa_offset 16
 4166 0004 00AF     	 add r7,sp,#0
 4167              	.LCFI86:
 4168              	 .cfi_def_cfa_register 7
 4169 0006 7860     	 str r0,[r7,#4]
1225:../cleanflight/src/main/io/gps.c ****     waitForSerialPortToFinishTransmitting(gpsPort);
 4170              	 .loc 2 1225 0
 4171 0008 174B     	 ldr r3,.L235
 4172 000a 1B68     	 ldr r3,[r3]
 4173 000c 1846     	 mov r0,r3
 4174 000e FFF7FEFF 	 bl waitForSerialPortToFinishTransmitting
1226:../cleanflight/src/main/io/gps.c ****     waitForSerialPortToFinishTransmitting(gpsPassthroughPort);
 4175              	 .loc 2 1226 0
 4176 0012 7868     	 ldr r0,[r7,#4]
 4177 0014 FFF7FEFF 	 bl waitForSerialPortToFinishTransmitting
1227:../cleanflight/src/main/io/gps.c **** 
1228:../cleanflight/src/main/io/gps.c ****     if (!(gpsPort->mode & MODE_TX))
 4178              	 .loc 2 1228 0
 4179 0018 134B     	 ldr r3,.L235
 4180 001a 1B68     	 ldr r3,[r3]
 4181 001c 1B79     	 ldrb r3,[r3,#4]
 4182 001e 03F00203 	 and r3,r3,#2
 4183 0022 002B     	 cmp r3,#0
 4184 0024 0BD1     	 bne .L233
1229:../cleanflight/src/main/io/gps.c ****         serialSetMode(gpsPort, gpsPort->mode | MODE_TX);
 4185              	 .loc 2 1229 0
 4186 0026 104B     	 ldr r3,.L235
 4187 0028 1A68     	 ldr r2,[r3]
 4188 002a 0F4B     	 ldr r3,.L235
 4189 002c 1B68     	 ldr r3,[r3]
 4190 002e 1B79     	 ldrb r3,[r3,#4]
 4191 0030 43F00203 	 orr r3,r3,#2
 4192 0034 DBB2     	 uxtb r3,r3
 4193 0036 1046     	 mov r0,r2
 4194 0038 1946     	 mov r1,r3
 4195 003a FFF7FEFF 	 bl serialSetMode
 4196              	.L233:
1230:../cleanflight/src/main/io/gps.c **** 
1231:../cleanflight/src/main/io/gps.c **** #ifdef USE_DASHBOARD
1232:../cleanflight/src/main/io/gps.c ****     if (feature(FEATURE_DASHBOARD)) {
 4197              	 .loc 2 1232 0
 4198 003e 4FF40030 	 mov r0,#131072
 4199 0042 FFF7FEFF 	 bl feature
 4200 0046 0346     	 mov r3,r0
 4201 0048 002B     	 cmp r3,#0
 4202 004a 02D0     	 beq .L234
1233:../cleanflight/src/main/io/gps.c ****         dashboardShowFixedPage(PAGE_GPS);
 4203              	 .loc 2 1233 0
 4204 004c 0720     	 movs r0,#7
 4205 004e FFF7FEFF 	 bl dashboardShowFixedPage
 4206              	.L234:
1234:../cleanflight/src/main/io/gps.c ****     }
1235:../cleanflight/src/main/io/gps.c **** #endif
1236:../cleanflight/src/main/io/gps.c **** 
1237:../cleanflight/src/main/io/gps.c ****     serialPassthrough(gpsPort, gpsPassthroughPort, &gpsHandlePassthrough, NULL);
 4207              	 .loc 2 1237 0
 4208 0052 054B     	 ldr r3,.L235
 4209 0054 1B68     	 ldr r3,[r3]
 4210 0056 1846     	 mov r0,r3
 4211 0058 7968     	 ldr r1,[r7,#4]
 4212 005a 044A     	 ldr r2,.L235+4
 4213 005c 0023     	 movs r3,#0
 4214 005e FFF7FEFF 	 bl serialPassthrough
1238:../cleanflight/src/main/io/gps.c **** }
 4215              	 .loc 2 1238 0
 4216 0062 0837     	 adds r7,r7,#8
 4217              	.LCFI87:
 4218              	 .cfi_def_cfa_offset 8
 4219 0064 BD46     	 mov sp,r7
 4220              	.LCFI88:
 4221              	 .cfi_def_cfa_register 13
 4222              	 
 4223 0066 80BD     	 pop {r7,pc}
 4224              	.L236:
 4225              	 .align 2
 4226              	.L235:
 4227 0068 00000000 	 .word gpsPort
 4228 006c 00000000 	 .word gpsHandlePassthrough
 4229              	 .cfi_endproc
 4230              	.LFE568:
 4232              	 .global GPS_scaleLonDown
 4233              	 .section .data.GPS_scaleLonDown,"aw",%progbits
 4234              	 .align 2
 4237              	GPS_scaleLonDown:
 4238 0000 0000803F 	 .word 1065353216
 4239              	 .section .text.GPS_calc_longitude_scaling,"ax",%progbits
 4240              	 .align 2
 4241              	 .global GPS_calc_longitude_scaling
 4242              	 .thumb
 4243              	 .thumb_func
 4245              	GPS_calc_longitude_scaling:
 4246              	.LFB569:
1239:../cleanflight/src/main/io/gps.c **** 
1240:../cleanflight/src/main/io/gps.c **** float GPS_scaleLonDown = 1.0f;  // this is used to offset the shrinking longitude as we go towards 
1241:../cleanflight/src/main/io/gps.c **** 
1242:../cleanflight/src/main/io/gps.c **** void GPS_calc_longitude_scaling(int32_t lat)
1243:../cleanflight/src/main/io/gps.c **** {
 4247              	 .loc 2 1243 0
 4248              	 .cfi_startproc
 4249              	 
 4250              	 
 4251 0000 80B5     	 push {r7,lr}
 4252              	.LCFI89:
 4253              	 .cfi_def_cfa_offset 8
 4254              	 .cfi_offset 7,-8
 4255              	 .cfi_offset 14,-4
 4256 0002 84B0     	 sub sp,sp,#16
 4257              	.LCFI90:
 4258              	 .cfi_def_cfa_offset 24
 4259 0004 00AF     	 add r7,sp,#0
 4260              	.LCFI91:
 4261              	 .cfi_def_cfa_register 7
 4262 0006 7860     	 str r0,[r7,#4]
 4263              	.LBB6:
1244:../cleanflight/src/main/io/gps.c ****     float rads = (ABS((float)lat) / 10000000.0f) * 0.0174532925f;
 4264              	 .loc 2 1244 0
 4265 0008 7B68     	 ldr r3,[r7,#4]
 4266 000a 07EE903A 	 fmsr s15,r3
 4267 000e F8EEE77A 	 fsitos s15,s15
 4268 0012 C7ED037A 	 fsts s15,[r7,#12]
 4269 0016 D7ED037A 	 flds s15,[r7,#12]
 4270 001a F5EEC07A 	 fcmpezs s15
 4271 001e F1EE10FA 	 fmstat
 4272 0022 02DD     	 ble .L242
 4273              	 .loc 2 1244 0 is_stmt 0 discriminator 1
 4274 0024 D7ED037A 	 flds s15,[r7,#12]
 4275 0028 03E0     	 b .L240
 4276              	.L242:
 4277              	 .loc 2 1244 0 discriminator 2
 4278 002a D7ED037A 	 flds s15,[r7,#12]
 4279 002e F1EE677A 	 fnegs s15,s15
 4280              	.L240:
 4281              	.LBE6:
 4282              	 .loc 2 1244 0 discriminator 4
 4283 0032 9FED097A 	 flds s14,.L243
 4284 0036 C7EE877A 	 fdivs s15,s15,s14
 4285 003a 9FED087A 	 flds s14,.L243+4
 4286 003e 67EE877A 	 fmuls s15,s15,s14
 4287 0042 C7ED027A 	 fsts s15,[r7,#8]
1245:../cleanflight/src/main/io/gps.c ****     GPS_scaleLonDown = cos_approx(rads);
 4288              	 .loc 2 1245 0 is_stmt 1 discriminator 4
 4289 0046 B868     	 ldr r0,[r7,#8]
 4290 0048 FFF7FEFF 	 bl cos_approx
 4291 004c 0246     	 mov r2,r0
 4292 004e 044B     	 ldr r3,.L243+8
 4293 0050 1A60     	 str r2,[r3]
1246:../cleanflight/src/main/io/gps.c **** }
 4294              	 .loc 2 1246 0 discriminator 4
 4295 0052 1037     	 adds r7,r7,#16
 4296              	.LCFI92:
 4297              	 .cfi_def_cfa_offset 8
 4298 0054 BD46     	 mov sp,r7
 4299              	.LCFI93:
 4300              	 .cfi_def_cfa_register 13
 4301              	 
 4302 0056 80BD     	 pop {r7,pc}
 4303              	.L244:
 4304              	 .align 2
 4305              	.L243:
 4306 0058 8096184B 	 .word 1259902592
 4307 005c 35FA8E3C 	 .word 1016003125
 4308 0060 00000000 	 .word GPS_scaleLonDown
 4309              	 .cfi_endproc
 4310              	.LFE569:
 4312              	 .section .text.GPS_reset_home_position,"ax",%progbits
 4313              	 .align 2
 4314              	 .global GPS_reset_home_position
 4315              	 .thumb
 4316              	 .thumb_func
 4318              	GPS_reset_home_position:
 4319              	.LFB570:
1247:../cleanflight/src/main/io/gps.c **** 
1248:../cleanflight/src/main/io/gps.c **** 
1249:../cleanflight/src/main/io/gps.c **** void GPS_reset_home_position(void)
1250:../cleanflight/src/main/io/gps.c **** {
 4320              	 .loc 2 1250 0
 4321              	 .cfi_startproc
 4322              	 
 4323              	 
 4324 0000 80B5     	 push {r7,lr}
 4325              	.LCFI94:
 4326              	 .cfi_def_cfa_offset 8
 4327              	 .cfi_offset 7,-8
 4328              	 .cfi_offset 14,-4
 4329 0002 00AF     	 add r7,sp,#0
 4330              	.LCFI95:
 4331              	 .cfi_def_cfa_register 7
1251:../cleanflight/src/main/io/gps.c ****     if (STATE(GPS_FIX) && gpsSol.numSat >= 5) {
 4332              	 .loc 2 1251 0
 4333 0004 0F4B     	 ldr r3,.L247
 4334 0006 1B78     	 ldrb r3,[r3]
 4335 0008 03F00203 	 and r3,r3,#2
 4336 000c 002B     	 cmp r3,#0
 4337 000e 17D0     	 beq .L245
 4338              	 .loc 2 1251 0 is_stmt 0 discriminator 1
 4339 0010 0D4B     	 ldr r3,.L247+4
 4340 0012 9B7C     	 ldrb r3,[r3,#18]
 4341 0014 042B     	 cmp r3,#4
 4342 0016 13D9     	 bls .L245
1252:../cleanflight/src/main/io/gps.c ****         GPS_home[LAT] = gpsSol.llh.lat;
 4343              	 .loc 2 1252 0 is_stmt 1
 4344 0018 0B4B     	 ldr r3,.L247+4
 4345 001a 1B68     	 ldr r3,[r3]
 4346 001c 0B4A     	 ldr r2,.L247+8
 4347 001e 1360     	 str r3,[r2]
1253:../cleanflight/src/main/io/gps.c ****         GPS_home[LON] = gpsSol.llh.lon;
 4348              	 .loc 2 1253 0
 4349 0020 094B     	 ldr r3,.L247+4
 4350 0022 5B68     	 ldr r3,[r3,#4]
 4351 0024 094A     	 ldr r2,.L247+8
 4352 0026 5360     	 str r3,[r2,#4]
1254:../cleanflight/src/main/io/gps.c ****         GPS_calc_longitude_scaling(gpsSol.llh.lat); // need an initial value for distance and beari
 4353              	 .loc 2 1254 0
 4354 0028 074B     	 ldr r3,.L247+4
 4355 002a 1B68     	 ldr r3,[r3]
 4356 002c 1846     	 mov r0,r3
 4357 002e FFF7FEFF 	 bl GPS_calc_longitude_scaling
1255:../cleanflight/src/main/io/gps.c ****         // Set ground altitude
1256:../cleanflight/src/main/io/gps.c ****         ENABLE_STATE(GPS_FIX_HOME);
 4358              	 .loc 2 1256 0
 4359 0032 044B     	 ldr r3,.L247
 4360 0034 1B78     	 ldrb r3,[r3]
 4361 0036 43F00103 	 orr r3,r3,#1
 4362 003a DAB2     	 uxtb r2,r3
 4363 003c 014B     	 ldr r3,.L247
 4364 003e 1A70     	 strb r2,[r3]
 4365              	.L245:
1257:../cleanflight/src/main/io/gps.c ****     }
1258:../cleanflight/src/main/io/gps.c **** }
 4366              	 .loc 2 1258 0
 4367 0040 80BD     	 pop {r7,pc}
 4368              	.L248:
 4369 0042 00BF     	 .align 2
 4370              	.L247:
 4371 0044 00000000 	 .word stateFlags
 4372 0048 00000000 	 .word gpsSol
 4373 004c 00000000 	 .word GPS_home
 4374              	 .cfi_endproc
 4375              	.LFE570:
 4377              	 .section .text.GPS_distance_cm_bearing,"ax",%progbits
 4378              	 .align 2
 4379              	 .global GPS_distance_cm_bearing
 4380              	 .thumb
 4381              	 .thumb_func
 4383              	GPS_distance_cm_bearing:
 4384              	.LFB571:
1259:../cleanflight/src/main/io/gps.c **** 
1260:../cleanflight/src/main/io/gps.c **** ////////////////////////////////////////////////////////////////////////////////////
1261:../cleanflight/src/main/io/gps.c **** #define DISTANCE_BETWEEN_TWO_LONGITUDE_POINTS_AT_EQUATOR_IN_HUNDREDS_OF_KILOMETERS 1.113195f
1262:../cleanflight/src/main/io/gps.c **** #define TAN_89_99_DEGREES 5729.57795f
1263:../cleanflight/src/main/io/gps.c **** // Get distance between two points in cm
1264:../cleanflight/src/main/io/gps.c **** // Get bearing from pos1 to pos2, returns an 1deg = 100 precision
1265:../cleanflight/src/main/io/gps.c **** void GPS_distance_cm_bearing(int32_t *currentLat1, int32_t *currentLon1, int32_t *destinationLat2, 
1266:../cleanflight/src/main/io/gps.c **** {
 4385              	 .loc 2 1266 0
 4386              	 .cfi_startproc
 4387              	 
 4388              	 
 4389 0000 80B5     	 push {r7,lr}
 4390              	.LCFI96:
 4391              	 .cfi_def_cfa_offset 8
 4392              	 .cfi_offset 7,-8
 4393              	 .cfi_offset 14,-4
 4394 0002 86B0     	 sub sp,sp,#24
 4395              	.LCFI97:
 4396              	 .cfi_def_cfa_offset 32
 4397 0004 00AF     	 add r7,sp,#0
 4398              	.LCFI98:
 4399              	 .cfi_def_cfa_register 7
 4400 0006 F860     	 str r0,[r7,#12]
 4401 0008 B960     	 str r1,[r7,#8]
 4402 000a 7A60     	 str r2,[r7,#4]
 4403 000c 3B60     	 str r3,[r7]
1267:../cleanflight/src/main/io/gps.c ****     float dLat = *destinationLat2 - *currentLat1; // difference of latitude in 1/10 000 000 degrees
 4404              	 .loc 2 1267 0
 4405 000e 7B68     	 ldr r3,[r7,#4]
 4406 0010 1A68     	 ldr r2,[r3]
 4407 0012 FB68     	 ldr r3,[r7,#12]
 4408 0014 1B68     	 ldr r3,[r3]
 4409 0016 D31A     	 subs r3,r2,r3
 4410 0018 07EE903A 	 fmsr s15,r3
 4411 001c F8EEE77A 	 fsitos s15,s15
 4412 0020 C7ED057A 	 fsts s15,[r7,#20]
1268:../cleanflight/src/main/io/gps.c ****     float dLon = (float)(*destinationLon2 - *currentLon1) * GPS_scaleLonDown;
 4413              	 .loc 2 1268 0
 4414 0024 3B68     	 ldr r3,[r7]
 4415 0026 1A68     	 ldr r2,[r3]
 4416 0028 BB68     	 ldr r3,[r7,#8]
 4417 002a 1B68     	 ldr r3,[r3]
 4418 002c D31A     	 subs r3,r2,r3
 4419 002e 07EE903A 	 fmsr s15,r3
 4420 0032 B8EEE77A 	 fsitos s14,s15
 4421 0036 264B     	 ldr r3,.L251
 4422 0038 D3ED007A 	 flds s15,[r3]
 4423 003c 67EE277A 	 fmuls s15,s14,s15
 4424 0040 C7ED047A 	 fsts s15,[r7,#16]
1269:../cleanflight/src/main/io/gps.c ****     *dist = sqrtf(sq(dLat) + sq(dLon)) * DISTANCE_BETWEEN_TWO_LONGITUDE_POINTS_AT_EQUATOR_IN_HUNDRE
 4425              	 .loc 2 1269 0
 4426 0044 97ED057A 	 flds s14,[r7,#20]
 4427 0048 D7ED057A 	 flds s15,[r7,#20]
 4428 004c 27EE277A 	 fmuls s14,s14,s15
 4429 0050 D7ED046A 	 flds s13,[r7,#16]
 4430 0054 D7ED047A 	 flds s15,[r7,#16]
 4431 0058 66EEA77A 	 fmuls s15,s13,s15
 4432 005c 77EE277A 	 fadds s15,s14,s15
 4433 0060 17EE900A 	 fmrs r0,s15
 4434 0064 FFF7FEFF 	 bl sqrtf
 4435 0068 07EE100A 	 fmsr s14,r0
 4436 006c DFED197A 	 flds s15,.L251+4
 4437 0070 67EE277A 	 fmuls s15,s14,s15
 4438 0074 FCEEE77A 	 ftouizs s15,s15
 4439 0078 17EE902A 	 fmrs r2,s15
 4440 007c 3B6A     	 ldr r3,[r7,#32]
 4441 007e 1A60     	 str r2,[r3]
1270:../cleanflight/src/main/io/gps.c **** 
1271:../cleanflight/src/main/io/gps.c ****     *bearing = 9000.0f + atan2_approx(-dLat, dLon) * TAN_89_99_DEGREES;      // Convert the output 
 4442              	 .loc 2 1271 0
 4443 0080 D7ED057A 	 flds s15,[r7,#20]
 4444 0084 F1EE677A 	 fnegs s15,s15
 4445 0088 17EE903A 	 fmrs r3,s15
 4446 008c 1846     	 mov r0,r3
 4447 008e 3969     	 ldr r1,[r7,#16]
 4448 0090 FFF7FEFF 	 bl atan2_approx
 4449 0094 07EE100A 	 fmsr s14,r0
 4450 0098 DFED0F7A 	 flds s15,.L251+8
 4451 009c 67EE277A 	 fmuls s15,s14,s15
 4452 00a0 9FED0E7A 	 flds s14,.L251+12
 4453 00a4 77EE877A 	 fadds s15,s15,s14
 4454 00a8 FDEEE77A 	 ftosizs s15,s15
 4455 00ac 17EE902A 	 fmrs r2,s15
 4456 00b0 7B6A     	 ldr r3,[r7,#36]
 4457 00b2 1A60     	 str r2,[r3]
1272:../cleanflight/src/main/io/gps.c ****     if (*bearing < 0)
 4458              	 .loc 2 1272 0
 4459 00b4 7B6A     	 ldr r3,[r7,#36]
 4460 00b6 1B68     	 ldr r3,[r3]
 4461 00b8 002B     	 cmp r3,#0
 4462 00ba 06DA     	 bge .L249
1273:../cleanflight/src/main/io/gps.c ****         *bearing += 36000;
 4463              	 .loc 2 1273 0
 4464 00bc 7B6A     	 ldr r3,[r7,#36]
 4465 00be 1B68     	 ldr r3,[r3]
 4466 00c0 03F50C43 	 add r3,r3,#35840
 4467 00c4 A033     	 adds r3,r3,#160
 4468 00c6 7A6A     	 ldr r2,[r7,#36]
 4469 00c8 1360     	 str r3,[r2]
 4470              	.L249:
1274:../cleanflight/src/main/io/gps.c **** }
 4471              	 .loc 2 1274 0
 4472 00ca 1837     	 adds r7,r7,#24
 4473              	.LCFI99:
 4474              	 .cfi_def_cfa_offset 8
 4475 00cc BD46     	 mov sp,r7
 4476              	.LCFI100:
 4477              	 .cfi_def_cfa_register 13
 4478              	 
 4479 00ce 80BD     	 pop {r7,pc}
 4480              	.L252:
 4481              	 .align 2
 4482              	.L251:
 4483 00d0 00000000 	 .word GPS_scaleLonDown
 4484 00d4 2C7D8E3F 	 .word 1066302764
 4485 00d8 A00CB345 	 .word 1169362080
 4486 00dc 00A00C46 	 .word 1175232512
 4487              	 .cfi_endproc
 4488              	.LFE571:
 4490              	 .section .text.GPS_calculateDistanceAndDirectionToHome,"ax",%progbits
 4491              	 .align 2
 4492              	 .global GPS_calculateDistanceAndDirectionToHome
 4493              	 .thumb
 4494              	 .thumb_func
 4496              	GPS_calculateDistanceAndDirectionToHome:
 4497              	.LFB572:
1275:../cleanflight/src/main/io/gps.c **** 
1276:../cleanflight/src/main/io/gps.c **** void GPS_calculateDistanceAndDirectionToHome(void)
1277:../cleanflight/src/main/io/gps.c **** {
 4498              	 .loc 2 1277 0
 4499              	 .cfi_startproc
 4500              	 
 4501              	 
 4502 0000 80B5     	 push {r7,lr}
 4503              	.LCFI101:
 4504              	 .cfi_def_cfa_offset 8
 4505              	 .cfi_offset 7,-8
 4506              	 .cfi_offset 14,-4
 4507 0002 84B0     	 sub sp,sp,#16
 4508              	.LCFI102:
 4509              	 .cfi_def_cfa_offset 24
 4510 0004 02AF     	 add r7,sp,#8
 4511              	.LCFI103:
 4512              	 .cfi_def_cfa 7,16
1278:../cleanflight/src/main/io/gps.c ****     if (STATE(GPS_FIX_HOME)) {      // If we don't have home set, do not display anything
 4513              	 .loc 2 1278 0
 4514 0006 164B     	 ldr r3,.L256
 4515 0008 1B78     	 ldrb r3,[r3]
 4516 000a 03F00103 	 and r3,r3,#1
 4517 000e 002B     	 cmp r3,#0
 4518 0010 1CD0     	 beq .L254
 4519              	.LBB7:
1279:../cleanflight/src/main/io/gps.c ****         uint32_t dist;
1280:../cleanflight/src/main/io/gps.c ****         int32_t dir;
1281:../cleanflight/src/main/io/gps.c ****         GPS_distance_cm_bearing(&gpsSol.llh.lat, &gpsSol.llh.lon, &GPS_home[LAT], &GPS_home[LON], &
 4520              	 .loc 2 1281 0
 4521 0012 3B1D     	 adds r3,r7,#4
 4522 0014 0093     	 str r3,[sp]
 4523 0016 3B46     	 mov r3,r7
 4524 0018 0193     	 str r3,[sp,#4]
 4525 001a 1248     	 ldr r0,.L256+4
 4526 001c 1249     	 ldr r1,.L256+8
 4527 001e 134A     	 ldr r2,.L256+12
 4528 0020 134B     	 ldr r3,.L256+16
 4529 0022 FFF7FEFF 	 bl GPS_distance_cm_bearing
1282:../cleanflight/src/main/io/gps.c ****         GPS_distanceToHome = dist / 100;
 4530              	 .loc 2 1282 0
 4531 0026 7B68     	 ldr r3,[r7,#4]
 4532 0028 124A     	 ldr r2,.L256+20
 4533 002a A2FB0323 	 umull r2,r3,r2,r3
 4534 002e 5B09     	 lsrs r3,r3,#5
 4535 0030 9AB2     	 uxth r2,r3
 4536 0032 114B     	 ldr r3,.L256+24
 4537 0034 1A80     	 strh r2,[r3]
1283:../cleanflight/src/main/io/gps.c ****         GPS_directionToHome = dir / 100;
 4538              	 .loc 2 1283 0
 4539 0036 3B68     	 ldr r3,[r7]
 4540 0038 0E4A     	 ldr r2,.L256+20
 4541 003a 82FB0312 	 smull r1,r2,r2,r3
 4542 003e 5211     	 asrs r2,r2,#5
 4543 0040 DB17     	 asrs r3,r3,#31
 4544 0042 D31A     	 subs r3,r2,r3
 4545 0044 9AB2     	 uxth r2,r3
 4546 0046 0D4B     	 ldr r3,.L256+28
 4547 0048 1A80     	 strh r2,[r3]
 4548              	.LBE7:
 4549 004a 05E0     	 b .L253
 4550              	.L254:
1284:../cleanflight/src/main/io/gps.c ****     } else {
1285:../cleanflight/src/main/io/gps.c ****         GPS_distanceToHome = 0;
 4551              	 .loc 2 1285 0
 4552 004c 0A4B     	 ldr r3,.L256+24
 4553 004e 0022     	 movs r2,#0
 4554 0050 1A80     	 strh r2,[r3]
1286:../cleanflight/src/main/io/gps.c ****         GPS_directionToHome = 0;
 4555              	 .loc 2 1286 0
 4556 0052 0A4B     	 ldr r3,.L256+28
 4557 0054 0022     	 movs r2,#0
 4558 0056 1A80     	 strh r2,[r3]
 4559              	.L253:
1287:../cleanflight/src/main/io/gps.c ****     }
1288:../cleanflight/src/main/io/gps.c **** }
 4560              	 .loc 2 1288 0
 4561 0058 0837     	 adds r7,r7,#8
 4562              	.LCFI104:
 4563              	 .cfi_def_cfa_offset 8
 4564 005a BD46     	 mov sp,r7
 4565              	.LCFI105:
 4566              	 .cfi_def_cfa_register 13
 4567              	 
 4568 005c 80BD     	 pop {r7,pc}
 4569              	.L257:
 4570 005e 00BF     	 .align 2
 4571              	.L256:
 4572 0060 00000000 	 .word stateFlags
 4573 0064 00000000 	 .word gpsSol
 4574 0068 04000000 	 .word gpsSol+4
 4575 006c 00000000 	 .word GPS_home
 4576 0070 04000000 	 .word GPS_home+4
 4577 0074 1F85EB51 	 .word 1374389535
 4578 0078 00000000 	 .word GPS_distanceToHome
 4579 007c 00000000 	 .word GPS_directionToHome
 4580              	 .cfi_endproc
 4581              	.LFE572:
 4583              	 .section .text.GPS_calc_velocity,"ax",%progbits
 4584              	 .align 2
 4585              	 .thumb
 4586              	 .thumb_func
 4588              	GPS_calc_velocity:
 4589              	.LFB573:
1289:../cleanflight/src/main/io/gps.c **** 
1290:../cleanflight/src/main/io/gps.c **** ////////////////////////////////////////////////////////////////////////////////////
1291:../cleanflight/src/main/io/gps.c **** // Calculate our current speed vector from gps position data
1292:../cleanflight/src/main/io/gps.c **** //
1293:../cleanflight/src/main/io/gps.c **** static void GPS_calc_velocity(void)
1294:../cleanflight/src/main/io/gps.c **** {
 4590              	 .loc 2 1294 0
 4591              	 .cfi_startproc
 4592              	 
 4593              	 
 4594              	 
 4595 0000 80B4     	 push {r7}
 4596              	.LCFI106:
 4597              	 .cfi_def_cfa_offset 4
 4598              	 .cfi_offset 7,-4
 4599 0002 85B0     	 sub sp,sp,#20
 4600              	.LCFI107:
 4601              	 .cfi_def_cfa_offset 24
 4602 0004 00AF     	 add r7,sp,#0
 4603              	.LCFI108:
 4604              	 .cfi_def_cfa_register 7
1295:../cleanflight/src/main/io/gps.c ****     static int16_t speed_old[2] = { 0, 0 };
1296:../cleanflight/src/main/io/gps.c ****     static int32_t last_coord[2] = { 0, 0 };
1297:../cleanflight/src/main/io/gps.c ****     static uint8_t init = 0;
1298:../cleanflight/src/main/io/gps.c **** 
1299:../cleanflight/src/main/io/gps.c ****     if (init) {
 4605              	 .loc 2 1299 0
 4606 0006 374B     	 ldr r3,.L260
 4607 0008 1B78     	 ldrb r3,[r3]
 4608 000a 002B     	 cmp r3,#0
 4609 000c 59D0     	 beq .L259
 4610              	.LBB8:
1300:../cleanflight/src/main/io/gps.c ****         float tmp = 1.0f / dTnav;
 4611              	 .loc 2 1300 0
 4612 000e 364B     	 ldr r3,.L260+4
 4613 0010 D3ED007A 	 flds s15,[r3]
 4614 0014 B7EE007A 	 fconsts s14,#112
 4615 0018 C7EE277A 	 fdivs s15,s14,s15
 4616 001c C7ED037A 	 fsts s15,[r7,#12]
1301:../cleanflight/src/main/io/gps.c ****         actual_speed[GPS_X] = (float)(gpsSol.llh.lon - last_coord[LON]) * GPS_scaleLonDown * tmp;
 4617              	 .loc 2 1301 0
 4618 0020 324B     	 ldr r3,.L260+8
 4619 0022 5A68     	 ldr r2,[r3,#4]
 4620 0024 324B     	 ldr r3,.L260+12
 4621 0026 5B68     	 ldr r3,[r3,#4]
 4622 0028 D31A     	 subs r3,r2,r3
 4623 002a 07EE903A 	 fmsr s15,r3
 4624 002e B8EEE77A 	 fsitos s14,s15
 4625 0032 304B     	 ldr r3,.L260+16
 4626 0034 D3ED007A 	 flds s15,[r3]
 4627 0038 27EE277A 	 fmuls s14,s14,s15
 4628 003c D7ED037A 	 flds s15,[r7,#12]
 4629 0040 67EE277A 	 fmuls s15,s14,s15
 4630 0044 FDEEE77A 	 ftosizs s15,s15
 4631 0048 C7ED017A 	 fsts s15,[r7,#4]
 4632 004c BB88     	 ldrh r3,[r7,#4]
 4633 004e 9AB2     	 uxth r2,r3
 4634 0050 294B     	 ldr r3,.L260+20
 4635 0052 5A80     	 strh r2,[r3,#2]
1302:../cleanflight/src/main/io/gps.c ****         actual_speed[GPS_Y] = (float)(gpsSol.llh.lat - last_coord[LAT]) * tmp;
 4636              	 .loc 2 1302 0
 4637 0054 254B     	 ldr r3,.L260+8
 4638 0056 1A68     	 ldr r2,[r3]
 4639 0058 254B     	 ldr r3,.L260+12
 4640 005a 1B68     	 ldr r3,[r3]
 4641 005c D31A     	 subs r3,r2,r3
 4642 005e 07EE903A 	 fmsr s15,r3
 4643 0062 B8EEE77A 	 fsitos s14,s15
 4644 0066 D7ED037A 	 flds s15,[r7,#12]
 4645 006a 67EE277A 	 fmuls s15,s14,s15
 4646 006e FDEEE77A 	 ftosizs s15,s15
 4647 0072 C7ED017A 	 fsts s15,[r7,#4]
 4648 0076 BB88     	 ldrh r3,[r7,#4]
 4649 0078 9AB2     	 uxth r2,r3
 4650 007a 1F4B     	 ldr r3,.L260+20
 4651 007c 1A80     	 strh r2,[r3]
1303:../cleanflight/src/main/io/gps.c **** 
1304:../cleanflight/src/main/io/gps.c ****         actual_speed[GPS_X] = (actual_speed[GPS_X] + speed_old[GPS_X]) / 2;
 4652              	 .loc 2 1304 0
 4653 007e 1E4B     	 ldr r3,.L260+20
 4654 0080 5B88     	 ldrh r3,[r3,#2]
 4655 0082 1AB2     	 sxth r2,r3
 4656 0084 1D4B     	 ldr r3,.L260+24
 4657 0086 5B88     	 ldrh r3,[r3,#2]
 4658 0088 1BB2     	 sxth r3,r3
 4659 008a 1344     	 add r3,r3,r2
 4660 008c DA0F     	 lsrs r2,r3,#31
 4661 008e 1344     	 add r3,r3,r2
 4662 0090 5B10     	 asrs r3,r3,#1
 4663 0092 9AB2     	 uxth r2,r3
 4664 0094 184B     	 ldr r3,.L260+20
 4665 0096 5A80     	 strh r2,[r3,#2]
1305:../cleanflight/src/main/io/gps.c ****         actual_speed[GPS_Y] = (actual_speed[GPS_Y] + speed_old[GPS_Y]) / 2;
 4666              	 .loc 2 1305 0
 4667 0098 174B     	 ldr r3,.L260+20
 4668 009a 1B88     	 ldrh r3,[r3]
 4669 009c 1AB2     	 sxth r2,r3
 4670 009e 174B     	 ldr r3,.L260+24
 4671 00a0 1B88     	 ldrh r3,[r3]
 4672 00a2 1BB2     	 sxth r3,r3
 4673 00a4 1344     	 add r3,r3,r2
 4674 00a6 DA0F     	 lsrs r2,r3,#31
 4675 00a8 1344     	 add r3,r3,r2
 4676 00aa 5B10     	 asrs r3,r3,#1
 4677 00ac 9AB2     	 uxth r2,r3
 4678 00ae 124B     	 ldr r3,.L260+20
 4679 00b0 1A80     	 strh r2,[r3]
1306:../cleanflight/src/main/io/gps.c **** 
1307:../cleanflight/src/main/io/gps.c ****         speed_old[GPS_X] = actual_speed[GPS_X];
 4680              	 .loc 2 1307 0
 4681 00b2 114B     	 ldr r3,.L260+20
 4682 00b4 5A88     	 ldrh r2,[r3,#2]
 4683 00b6 114B     	 ldr r3,.L260+24
 4684 00b8 5A80     	 strh r2,[r3,#2]
1308:../cleanflight/src/main/io/gps.c ****         speed_old[GPS_Y] = actual_speed[GPS_Y];
 4685              	 .loc 2 1308 0
 4686 00ba 0F4B     	 ldr r3,.L260+20
 4687 00bc 1A88     	 ldrh r2,[r3]
 4688 00be 0F4B     	 ldr r3,.L260+24
 4689 00c0 1A80     	 strh r2,[r3]
 4690              	.L259:
 4691              	.LBE8:
1309:../cleanflight/src/main/io/gps.c ****     }
1310:../cleanflight/src/main/io/gps.c ****     init = 1;
 4692              	 .loc 2 1310 0
 4693 00c2 084B     	 ldr r3,.L260
 4694 00c4 0122     	 movs r2,#1
 4695 00c6 1A70     	 strb r2,[r3]
1311:../cleanflight/src/main/io/gps.c **** 
1312:../cleanflight/src/main/io/gps.c ****     last_coord[LON] = gpsSol.llh.lon;
 4696              	 .loc 2 1312 0
 4697 00c8 084B     	 ldr r3,.L260+8
 4698 00ca 5B68     	 ldr r3,[r3,#4]
 4699 00cc 084A     	 ldr r2,.L260+12
 4700 00ce 5360     	 str r3,[r2,#4]
1313:../cleanflight/src/main/io/gps.c ****     last_coord[LAT] = gpsSol.llh.lat;
 4701              	 .loc 2 1313 0
 4702 00d0 064B     	 ldr r3,.L260+8
 4703 00d2 1B68     	 ldr r3,[r3]
 4704 00d4 064A     	 ldr r2,.L260+12
 4705 00d6 1360     	 str r3,[r2]
1314:../cleanflight/src/main/io/gps.c **** }
 4706              	 .loc 2 1314 0
 4707 00d8 1437     	 adds r7,r7,#20
 4708              	.LCFI109:
 4709              	 .cfi_def_cfa_offset 4
 4710 00da BD46     	 mov sp,r7
 4711              	.LCFI110:
 4712              	 .cfi_def_cfa_register 13
 4713              	 
 4714 00dc 5DF8047B 	 ldr r7,[sp],#4
 4715              	.LCFI111:
 4716              	 .cfi_restore 7
 4717              	 .cfi_def_cfa_offset 0
 4718 00e0 7047     	 bx lr
 4719              	.L261:
 4720 00e2 00BF     	 .align 2
 4721              	.L260:
 4722 00e4 00000000 	 .word init.13940
 4723 00e8 00000000 	 .word dTnav
 4724 00ec 00000000 	 .word gpsSol
 4725 00f0 00000000 	 .word last_coord.13939
 4726 00f4 00000000 	 .word GPS_scaleLonDown
 4727 00f8 00000000 	 .word actual_speed
 4728 00fc 00000000 	 .word speed_old.13938
 4729              	 .cfi_endproc
 4730              	.LFE573:
 4732              	 .section .text.onGpsNewData,"ax",%progbits
 4733              	 .align 2
 4734              	 .global onGpsNewData
 4735              	 .thumb
 4736              	 .thumb_func
 4738              	onGpsNewData:
 4739              	.LFB574:
1315:../cleanflight/src/main/io/gps.c **** 
1316:../cleanflight/src/main/io/gps.c **** void onGpsNewData(void)
1317:../cleanflight/src/main/io/gps.c **** {
 4740              	 .loc 2 1317 0
 4741              	 .cfi_startproc
 4742              	 
 4743              	 
 4744 0000 90B5     	 push {r4,r7,lr}
 4745              	.LCFI112:
 4746              	 .cfi_def_cfa_offset 12
 4747              	 .cfi_offset 4,-12
 4748              	 .cfi_offset 7,-8
 4749              	 .cfi_offset 14,-4
 4750 0002 85B0     	 sub sp,sp,#20
 4751              	.LCFI113:
 4752              	 .cfi_def_cfa_offset 32
 4753 0004 00AF     	 add r7,sp,#0
 4754              	.LCFI114:
 4755              	 .cfi_def_cfa_register 7
1318:../cleanflight/src/main/io/gps.c ****     if (!(STATE(GPS_FIX) && gpsSol.numSat >= 5)) {
 4756              	 .loc 2 1318 0
 4757 0006 8B4B     	 ldr r3,.L279
 4758 0008 1B78     	 ldrb r3,[r3]
 4759 000a 03F00203 	 and r3,r3,#2
 4760 000e 002B     	 cmp r3,#0
 4761 0010 03D0     	 beq .L263
 4762              	 .loc 2 1318 0 is_stmt 0 discriminator 1
 4763 0012 894B     	 ldr r3,.L279+4
 4764 0014 9B7C     	 ldrb r3,[r3,#18]
 4765 0016 042B     	 cmp r3,#4
 4766 0018 00D8     	 bhi .L264
 4767              	.L263:
1319:../cleanflight/src/main/io/gps.c ****         return;
 4768              	 .loc 2 1319 0 is_stmt 1
 4769 001a 08E1     	 b .L262
 4770              	.L264:
1320:../cleanflight/src/main/io/gps.c ****     }
1321:../cleanflight/src/main/io/gps.c **** 
1322:../cleanflight/src/main/io/gps.c ****     if (!ARMING_FLAG(ARMED))
 4771              	 .loc 2 1322 0
 4772 001c 874B     	 ldr r3,.L279+8
 4773 001e 1B78     	 ldrb r3,[r3]
 4774 0020 03F00103 	 and r3,r3,#1
 4775 0024 002B     	 cmp r3,#0
 4776 0026 06D1     	 bne .L266
1323:../cleanflight/src/main/io/gps.c ****         DISABLE_STATE(GPS_FIX_HOME);
 4777              	 .loc 2 1323 0
 4778 0028 824B     	 ldr r3,.L279
 4779 002a 1B78     	 ldrb r3,[r3]
 4780 002c 23F00103 	 bic r3,r3,#1
 4781 0030 DAB2     	 uxtb r2,r3
 4782 0032 804B     	 ldr r3,.L279
 4783 0034 1A70     	 strb r2,[r3]
 4784              	.L266:
1324:../cleanflight/src/main/io/gps.c **** 
1325:../cleanflight/src/main/io/gps.c ****     if (!STATE(GPS_FIX_HOME) && ARMING_FLAG(ARMED))
 4785              	 .loc 2 1325 0
 4786 0036 7F4B     	 ldr r3,.L279
 4787 0038 1B78     	 ldrb r3,[r3]
 4788 003a 03F00103 	 and r3,r3,#1
 4789 003e 002B     	 cmp r3,#0
 4790 0040 07D1     	 bne .L267
 4791              	 .loc 2 1325 0 is_stmt 0 discriminator 1
 4792 0042 7E4B     	 ldr r3,.L279+8
 4793 0044 1B78     	 ldrb r3,[r3]
 4794 0046 03F00103 	 and r3,r3,#1
 4795 004a 002B     	 cmp r3,#0
 4796 004c 01D0     	 beq .L267
1326:../cleanflight/src/main/io/gps.c ****         GPS_reset_home_position();
 4797              	 .loc 2 1326 0 is_stmt 1
 4798 004e FFF7FEFF 	 bl GPS_reset_home_position
 4799              	.L267:
1327:../cleanflight/src/main/io/gps.c **** 
1328:../cleanflight/src/main/io/gps.c ****     // Apply moving average filter to GPS data
1329:../cleanflight/src/main/io/gps.c **** #if defined(GPS_FILTERING)
1330:../cleanflight/src/main/io/gps.c ****     GPS_filter_index = (GPS_filter_index + 1) % GPS_FILTER_VECTOR_LENGTH;
 4800              	 .loc 2 1330 0
 4801 0052 7B4B     	 ldr r3,.L279+12
 4802 0054 1B78     	 ldrb r3,[r3]
 4803 0056 5A1C     	 adds r2,r3,#1
 4804 0058 7A4B     	 ldr r3,.L279+16
 4805 005a 83FB0213 	 smull r1,r3,r3,r2
 4806 005e 5910     	 asrs r1,r3,#1
 4807 0060 D317     	 asrs r3,r2,#31
 4808 0062 C91A     	 subs r1,r1,r3
 4809 0064 0B46     	 mov r3,r1
 4810 0066 9B00     	 lsls r3,r3,#2
 4811 0068 0B44     	 add r3,r3,r1
 4812 006a D11A     	 subs r1,r2,r3
 4813 006c CAB2     	 uxtb r2,r1
 4814 006e 744B     	 ldr r3,.L279+12
 4815 0070 1A70     	 strb r2,[r3]
 4816              	.LBB9:
1331:../cleanflight/src/main/io/gps.c ****     for (int axis = 0; axis < 2; axis++) {
 4817              	 .loc 2 1331 0
 4818 0072 0023     	 movs r3,#0
 4819 0074 FB60     	 str r3,[r7,#12]
 4820 0076 A6E0     	 b .L268
 4821              	.L273:
1332:../cleanflight/src/main/io/gps.c ****         GPS_read[axis] = axis == LAT ? gpsSol.llh.lat : gpsSol.llh.lon; // latest unfiltered data i
 4822              	 .loc 2 1332 0
 4823 0078 FB68     	 ldr r3,[r7,#12]
 4824 007a 002B     	 cmp r3,#0
 4825 007c 02D1     	 bne .L269
 4826              	 .loc 2 1332 0 is_stmt 0 discriminator 1
 4827 007e 6E4B     	 ldr r3,.L279+4
 4828 0080 1B68     	 ldr r3,[r3]
 4829 0082 01E0     	 b .L270
 4830              	.L269:
 4831              	 .loc 2 1332 0 discriminator 2
 4832 0084 6C4B     	 ldr r3,.L279+4
 4833 0086 5B68     	 ldr r3,[r3,#4]
 4834              	.L270:
 4835              	 .loc 2 1332 0 discriminator 4
 4836 0088 6F49     	 ldr r1,.L279+20
 4837 008a FA68     	 ldr r2,[r7,#12]
 4838 008c 41F82230 	 str r3,[r1,r2,lsl#2]
1333:../cleanflight/src/main/io/gps.c ****         GPS_degree[axis] = GPS_read[axis] / 10000000;   // get the degree to assure the sum fits to
 4839              	 .loc 2 1333 0 is_stmt 1 discriminator 4
 4840 0090 6D4A     	 ldr r2,.L279+20
 4841 0092 FB68     	 ldr r3,[r7,#12]
 4842 0094 52F82330 	 ldr r3,[r2,r3,lsl#2]
 4843 0098 6C4A     	 ldr r2,.L279+24
 4844 009a 82FB0312 	 smull r1,r2,r2,r3
 4845 009e 9215     	 asrs r2,r2,#22
 4846 00a0 DB17     	 asrs r3,r3,#31
 4847 00a2 D21A     	 subs r2,r2,r3
 4848 00a4 6A49     	 ldr r1,.L279+28
 4849 00a6 FB68     	 ldr r3,[r7,#12]
 4850 00a8 41F82320 	 str r2,[r1,r3,lsl#2]
1334:../cleanflight/src/main/io/gps.c **** 
1335:../cleanflight/src/main/io/gps.c ****         // How close we are to a degree line ? its the first three digits from the fractions of deg
1336:../cleanflight/src/main/io/gps.c ****         // later we use it to Check if we are close to a degree line, if yes, disable averaging,
1337:../cleanflight/src/main/io/gps.c ****         fraction3[axis] = (GPS_read[axis] - GPS_degree[axis] * 10000000) / 10000;
 4851              	 .loc 2 1337 0 discriminator 4
 4852 00ac 664A     	 ldr r2,.L279+20
 4853 00ae FB68     	 ldr r3,[r7,#12]
 4854 00b0 52F82320 	 ldr r2,[r2,r3,lsl#2]
 4855 00b4 6649     	 ldr r1,.L279+28
 4856 00b6 FB68     	 ldr r3,[r7,#12]
 4857 00b8 51F82330 	 ldr r3,[r1,r3,lsl#2]
 4858 00bc 6549     	 ldr r1,.L279+32
 4859 00be 01FB03F3 	 mul r3,r1,r3
 4860 00c2 1344     	 add r3,r3,r2
 4861 00c4 644A     	 ldr r2,.L279+36
 4862 00c6 82FB0312 	 smull r1,r2,r2,r3
 4863 00ca 1213     	 asrs r2,r2,#12
 4864 00cc DB17     	 asrs r3,r3,#31
 4865 00ce D31A     	 subs r3,r2,r3
 4866 00d0 99B2     	 uxth r1,r3
 4867 00d2 624A     	 ldr r2,.L279+40
 4868 00d4 FB68     	 ldr r3,[r7,#12]
 4869 00d6 22F81310 	 strh r1,[r2,r3,lsl#1]
1338:../cleanflight/src/main/io/gps.c **** 
1339:../cleanflight/src/main/io/gps.c ****         GPS_filter_sum[axis] -= GPS_filter[axis][GPS_filter_index];
 4870              	 .loc 2 1339 0 discriminator 4
 4871 00da 614A     	 ldr r2,.L279+44
 4872 00dc FB68     	 ldr r3,[r7,#12]
 4873 00de 52F82310 	 ldr r1,[r2,r3,lsl#2]
 4874 00e2 574B     	 ldr r3,.L279+12
 4875 00e4 1B78     	 ldrb r3,[r3]
 4876 00e6 1C46     	 mov r4,r3
 4877 00e8 5E48     	 ldr r0,.L279+48
 4878 00ea FA68     	 ldr r2,[r7,#12]
 4879 00ec 1346     	 mov r3,r2
 4880 00ee 9B00     	 lsls r3,r3,#2
 4881 00f0 1344     	 add r3,r3,r2
 4882 00f2 2344     	 add r3,r3,r4
 4883 00f4 50F82330 	 ldr r3,[r0,r3,lsl#2]
 4884 00f8 CA1A     	 subs r2,r1,r3
 4885 00fa 5949     	 ldr r1,.L279+44
 4886 00fc FB68     	 ldr r3,[r7,#12]
 4887 00fe 41F82320 	 str r2,[r1,r3,lsl#2]
1340:../cleanflight/src/main/io/gps.c ****         GPS_filter[axis][GPS_filter_index] = GPS_read[axis] - (GPS_degree[axis] * 10000000);
 4888              	 .loc 2 1340 0 discriminator 4
 4889 0102 4F4B     	 ldr r3,.L279+12
 4890 0104 1B78     	 ldrb r3,[r3]
 4891 0106 1C46     	 mov r4,r3
 4892 0108 4F4A     	 ldr r2,.L279+20
 4893 010a FB68     	 ldr r3,[r7,#12]
 4894 010c 52F82320 	 ldr r2,[r2,r3,lsl#2]
 4895 0110 4F49     	 ldr r1,.L279+28
 4896 0112 FB68     	 ldr r3,[r7,#12]
 4897 0114 51F82330 	 ldr r3,[r1,r3,lsl#2]
 4898 0118 4E49     	 ldr r1,.L279+32
 4899 011a 01FB03F3 	 mul r3,r1,r3
 4900 011e D118     	 adds r1,r2,r3
 4901 0120 5048     	 ldr r0,.L279+48
 4902 0122 FA68     	 ldr r2,[r7,#12]
 4903 0124 1346     	 mov r3,r2
 4904 0126 9B00     	 lsls r3,r3,#2
 4905 0128 1344     	 add r3,r3,r2
 4906 012a 2344     	 add r3,r3,r4
 4907 012c 40F82310 	 str r1,[r0,r3,lsl#2]
1341:../cleanflight/src/main/io/gps.c ****         GPS_filter_sum[axis] += GPS_filter[axis][GPS_filter_index];
 4908              	 .loc 2 1341 0 discriminator 4
 4909 0130 4B4A     	 ldr r2,.L279+44
 4910 0132 FB68     	 ldr r3,[r7,#12]
 4911 0134 52F82310 	 ldr r1,[r2,r3,lsl#2]
 4912 0138 414B     	 ldr r3,.L279+12
 4913 013a 1B78     	 ldrb r3,[r3]
 4914 013c 1C46     	 mov r4,r3
 4915 013e 4948     	 ldr r0,.L279+48
 4916 0140 FA68     	 ldr r2,[r7,#12]
 4917 0142 1346     	 mov r3,r2
 4918 0144 9B00     	 lsls r3,r3,#2
 4919 0146 1344     	 add r3,r3,r2
 4920 0148 2344     	 add r3,r3,r4
 4921 014a 50F82330 	 ldr r3,[r0,r3,lsl#2]
 4922 014e CA18     	 adds r2,r1,r3
 4923 0150 4349     	 ldr r1,.L279+44
 4924 0152 FB68     	 ldr r3,[r7,#12]
 4925 0154 41F82320 	 str r2,[r1,r3,lsl#2]
1342:../cleanflight/src/main/io/gps.c ****         GPS_filtered[axis] = GPS_filter_sum[axis] / GPS_FILTER_VECTOR_LENGTH + (GPS_degree[axis] * 
 4926              	 .loc 2 1342 0 discriminator 4
 4927 0158 414A     	 ldr r2,.L279+44
 4928 015a FB68     	 ldr r3,[r7,#12]
 4929 015c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 4930 0160 384A     	 ldr r2,.L279+16
 4931 0162 82FB0312 	 smull r1,r2,r2,r3
 4932 0166 5210     	 asrs r2,r2,#1
 4933 0168 DB17     	 asrs r3,r3,#31
 4934 016a D21A     	 subs r2,r2,r3
 4935 016c 3849     	 ldr r1,.L279+28
 4936 016e FB68     	 ldr r3,[r7,#12]
 4937 0170 51F82330 	 ldr r3,[r1,r3,lsl#2]
 4938 0174 3C49     	 ldr r1,.L279+52
 4939 0176 01FB03F3 	 mul r3,r1,r3
 4940 017a 1A44     	 add r2,r2,r3
 4941 017c 3B49     	 ldr r1,.L279+56
 4942 017e FB68     	 ldr r3,[r7,#12]
 4943 0180 41F82320 	 str r2,[r1,r3,lsl#2]
1343:../cleanflight/src/main/io/gps.c ****         if (nav_mode == NAV_MODE_POSHOLD) {             // we use gps averaging only in poshold mod
 4944              	 .loc 2 1343 0 discriminator 4
 4945 0184 3A4B     	 ldr r3,.L279+60
 4946 0186 1B78     	 ldrb r3,[r3]
 4947 0188 012B     	 cmp r3,#1
 4948 018a 19D1     	 bne .L271
1344:../cleanflight/src/main/io/gps.c ****             if (fraction3[axis] > 1 && fraction3[axis] < 999) {
 4949              	 .loc 2 1344 0
 4950 018c 334A     	 ldr r2,.L279+40
 4951 018e FB68     	 ldr r3,[r7,#12]
 4952 0190 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 4953 0194 012B     	 cmp r3,#1
 4954 0196 13D9     	 bls .L271
 4955              	 .loc 2 1344 0 is_stmt 0 discriminator 1
 4956 0198 304A     	 ldr r2,.L279+40
 4957 019a FB68     	 ldr r3,[r7,#12]
 4958 019c 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 4959 01a0 40F2E632 	 movw r2,#998
 4960 01a4 9342     	 cmp r3,r2
 4961 01a6 0BD8     	 bhi .L271
1345:../cleanflight/src/main/io/gps.c ****                 if (axis == LAT) {
 4962              	 .loc 2 1345 0 is_stmt 1
 4963 01a8 FB68     	 ldr r3,[r7,#12]
 4964 01aa 002B     	 cmp r3,#0
 4965 01ac 04D1     	 bne .L272
1346:../cleanflight/src/main/io/gps.c ****                     gpsSol.llh.lat = GPS_filtered[LAT];
 4966              	 .loc 2 1346 0
 4967 01ae 2F4B     	 ldr r3,.L279+56
 4968 01b0 1B68     	 ldr r3,[r3]
 4969 01b2 214A     	 ldr r2,.L279+4
 4970 01b4 1360     	 str r3,[r2]
 4971 01b6 03E0     	 b .L271
 4972              	.L272:
1347:../cleanflight/src/main/io/gps.c ****                 } else {
1348:../cleanflight/src/main/io/gps.c ****                     gpsSol.llh.lon = GPS_filtered[LON];
 4973              	 .loc 2 1348 0
 4974 01b8 2C4B     	 ldr r3,.L279+56
 4975 01ba 5B68     	 ldr r3,[r3,#4]
 4976 01bc 1E4A     	 ldr r2,.L279+4
 4977 01be 5360     	 str r3,[r2,#4]
 4978              	.L271:
1331:../cleanflight/src/main/io/gps.c ****         GPS_read[axis] = axis == LAT ? gpsSol.llh.lat : gpsSol.llh.lon; // latest unfiltered data i
 4979              	 .loc 2 1331 0 discriminator 2
 4980 01c0 FB68     	 ldr r3,[r7,#12]
 4981 01c2 0133     	 adds r3,r3,#1
 4982 01c4 FB60     	 str r3,[r7,#12]
 4983              	.L268:
1331:../cleanflight/src/main/io/gps.c ****         GPS_read[axis] = axis == LAT ? gpsSol.llh.lat : gpsSol.llh.lon; // latest unfiltered data i
 4984              	 .loc 2 1331 0 is_stmt 0 discriminator 1
 4985 01c6 FB68     	 ldr r3,[r7,#12]
 4986 01c8 012B     	 cmp r3,#1
 4987 01ca 7FF755AF 	 ble .L273
 4988              	.LBE9:
1349:../cleanflight/src/main/io/gps.c ****                 }
1350:../cleanflight/src/main/io/gps.c ****             }
1351:../cleanflight/src/main/io/gps.c ****         }
1352:../cleanflight/src/main/io/gps.c ****     }
1353:../cleanflight/src/main/io/gps.c **** #endif
1354:../cleanflight/src/main/io/gps.c **** 
1355:../cleanflight/src/main/io/gps.c ****     //
1356:../cleanflight/src/main/io/gps.c ****     // Calculate time delta for navigation loop, range 0-1.0f, in seconds
1357:../cleanflight/src/main/io/gps.c ****     //
1358:../cleanflight/src/main/io/gps.c ****     // Time for calculating x,y speed and navigation pids
1359:../cleanflight/src/main/io/gps.c ****     static uint32_t nav_loopTimer;
1360:../cleanflight/src/main/io/gps.c ****     dTnav = (float)(millis() - nav_loopTimer) / 1000.0f;
 4989              	 .loc 2 1360 0 is_stmt 1
 4990 01ce FFF7FEFF 	 bl millis
 4991 01d2 0246     	 mov r2,r0
 4992 01d4 274B     	 ldr r3,.L279+64
 4993 01d6 1B68     	 ldr r3,[r3]
 4994 01d8 D31A     	 subs r3,r2,r3
 4995 01da 07EE903A 	 fmsr s15,r3
 4996 01de F8EE677A 	 fuitos s15,s15
 4997 01e2 9FED257A 	 flds s14,.L279+68
 4998 01e6 C7EE877A 	 fdivs s15,s15,s14
 4999 01ea 244B     	 ldr r3,.L279+72
 5000 01ec C3ED007A 	 fsts s15,[r3]
1361:../cleanflight/src/main/io/gps.c ****     nav_loopTimer = millis();
 5001              	 .loc 2 1361 0
 5002 01f0 FFF7FEFF 	 bl millis
 5003 01f4 0246     	 mov r2,r0
 5004 01f6 1F4B     	 ldr r3,.L279+64
 5005 01f8 1A60     	 str r2,[r3]
 5006              	.LBB10:
1362:../cleanflight/src/main/io/gps.c ****     // prevent runup from bad GPS
1363:../cleanflight/src/main/io/gps.c ****     dTnav = MIN(dTnav, 1.0f);
 5007              	 .loc 2 1363 0
 5008 01fa 204B     	 ldr r3,.L279+72
 5009 01fc 1B68     	 ldr r3,[r3]
 5010 01fe BB60     	 str r3,[r7,#8]
 5011 0200 4FF07E53 	 mov r3,#1065353216
 5012 0204 7B60     	 str r3,[r7,#4]
 5013 0206 97ED027A 	 flds s14,[r7,#8]
 5014 020a D7ED017A 	 flds s15,[r7,#4]
 5015 020e B4EEE77A 	 fcmpes s14,s15
 5016 0212 F1EE10FA 	 fmstat
 5017 0216 01D5     	 bpl .L278
 5018              	 .loc 2 1363 0 is_stmt 0 discriminator 1
 5019 0218 BB68     	 ldr r3,[r7,#8]
 5020 021a 00E0     	 b .L276
 5021              	.L278:
 5022              	 .loc 2 1363 0 discriminator 2
 5023 021c 7B68     	 ldr r3,[r7,#4]
 5024              	.L276:
 5025              	.LBE10:
 5026              	 .loc 2 1363 0 discriminator 4
 5027 021e 174A     	 ldr r2,.L279+72
 5028 0220 1360     	 str r3,[r2]
1364:../cleanflight/src/main/io/gps.c **** 
1365:../cleanflight/src/main/io/gps.c ****     GPS_calculateDistanceAndDirectionToHome();
 5029              	 .loc 2 1365 0 is_stmt 1 discriminator 4
 5030 0222 FFF7FEFF 	 bl GPS_calculateDistanceAndDirectionToHome
1366:../cleanflight/src/main/io/gps.c ****     // calculate the current velocity based on gps coordinates continously to get a valid speed at 
1367:../cleanflight/src/main/io/gps.c ****     GPS_calc_velocity();
 5031              	 .loc 2 1367 0 discriminator 4
 5032 0226 FFF7FEFF 	 bl GPS_calc_velocity
1368:../cleanflight/src/main/io/gps.c **** 
1369:../cleanflight/src/main/io/gps.c **** #ifdef USE_GPS_RESCUE
1370:../cleanflight/src/main/io/gps.c ****     rescueNewGpsData();
 5033              	 .loc 2 1370 0 discriminator 4
 5034 022a FFF7FEFF 	 bl rescueNewGpsData
 5035              	.L262:
1371:../cleanflight/src/main/io/gps.c **** #endif
1372:../cleanflight/src/main/io/gps.c **** }
 5036              	 .loc 2 1372 0
 5037 022e 1437     	 adds r7,r7,#20
 5038              	.LCFI115:
 5039              	 .cfi_def_cfa_offset 12
 5040 0230 BD46     	 mov sp,r7
 5041              	.LCFI116:
 5042              	 .cfi_def_cfa_register 13
 5043              	 
 5044 0232 90BD     	 pop {r4,r7,pc}
 5045              	.L280:
 5046              	 .align 2
 5047              	.L279:
 5048 0234 00000000 	 .word stateFlags
 5049 0238 00000000 	 .word gpsSol
 5050 023c 00000000 	 .word armingFlags
 5051 0240 00000000 	 .word GPS_filter_index
 5052 0244 67666666 	 .word 1717986919
 5053 0248 00000000 	 .word GPS_read
 5054 024c 6BCA5F6B 	 .word 1801439851
 5055 0250 00000000 	 .word GPS_degree
 5056 0254 806967FF 	 .word -10000000
 5057 0258 AD8BDB68 	 .word 1759218605
 5058 025c 00000000 	 .word fraction3
 5059 0260 00000000 	 .word GPS_filter_sum
 5060 0264 00000000 	 .word GPS_filter
 5061 0268 80969800 	 .word 10000000
 5062 026c 00000000 	 .word GPS_filtered
 5063 0270 00000000 	 .word nav_mode
 5064 0274 00000000 	 .word nav_loopTimer.13949
 5065 0278 00007A44 	 .word 1148846080
 5066 027c 00000000 	 .word dTnav
 5067              	 .cfi_endproc
 5068              	.LFE574:
 5070              	 .section .bss.GPSLEDTime.13649,"aw",%nobits
 5071              	 .align 2
 5074              	GPSLEDTime.13649:
 5075 0000 00000000 	 .space 4
 5076              	 .section .bss.param.13698,"aw",%nobits
 5079              	param.13698:
 5080 0000 00       	 .space 1
 5081              	 .section .bss.offset.13699,"aw",%nobits
 5084              	offset.13699:
 5085 0000 00       	 .space 1
 5086              	 .section .bss.parity.13700,"aw",%nobits
 5089              	parity.13700:
 5090 0000 00       	 .space 1
 5091              	 .section .bss.string.13701,"aw",%nobits
 5092              	 .align 2
 5095              	string.13701:
 5096 0000 00000000 	 .space 15
 5096      00000000 
 5096      00000000 
 5096      000000
 5097 000f 00       	 .section .bss.gps_frame.13703,"aw",%nobits
 5100              	gps_frame.13703:
 5101 0000 00       	 .space 1
 5102              	 .section .bss.gps_Msg.13696,"aw",%nobits
 5103              	 .align 2
 5106              	gps_Msg.13696:
 5107 0000 00000000 	 .space 27
 5107      00000000 
 5107      00000000 
 5107      00000000 
 5107      00000000 
 5108 001b 00       	 .section .bss.svMessageNum.13704,"aw",%nobits
 5111              	svMessageNum.13704:
 5112 0000 00       	 .space 1
 5113              	 .section .bss.checksum_param.13702,"aw",%nobits
 5116              	checksum_param.13702:
 5117 0000 00       	 .space 1
 5118              	 .section .bss.init.13940,"aw",%nobits
 5121              	init.13940:
 5122 0000 00       	 .space 1
 5123              	 .section .bss.last_coord.13939,"aw",%nobits
 5124              	 .align 2
 5127              	last_coord.13939:
 5128 0000 00000000 	 .space 8
 5128      00000000 
 5129              	 .section .bss.speed_old.13938,"aw",%nobits
 5130              	 .align 2
 5133              	speed_old.13938:
 5134 0000 00000000 	 .space 4
 5135              	 .section .bss.nav_loopTimer.13949,"aw",%nobits
 5136              	 .align 2
 5139              	nav_loopTimer.13949:
 5140 0000 00000000 	 .space 4
 5141              	 .text
 5142              	.Letext0:
 5143              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 5144              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 5145              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 5146              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 5147              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 5148              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 5149              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 5150              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/light_led.h"
 5151              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 5152              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/dashboard.h"
 5153              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 5154              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 5155              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
 5156              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 5157              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 5158              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
 5159              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
 5160              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/gps_rescue.h"
 5161              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/sensors.h"
 5162              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 5163              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 gps.c
    {standard input}:20     .text.gpsConfig:00000000 $t
    {standard input}:24     .text.gpsConfig:00000000 gpsConfig
    {standard input}:54     .text.gpsConfig:00000010 $d
                            *COM*:00000005 gpsConfig_System
                            *COM*:00000015 gpsPacketLog
    {standard input}:60     .data.gpsPacketLogChar:00000000 $d
    {standard input}:63     .data.gpsPacketLogChar:00000000 gpsPacketLogChar
                            *COM*:00000008 GPS_home
                            *COM*:00000002 GPS_distanceToHome
                            *COM*:00000002 GPS_directionToHome
                            *COM*:00000004 dTnav
    {standard input}:74     .bss.actual_speed:00000000 actual_speed
    {standard input}:71     .bss.actual_speed:00000000 $d
                            *COM*:00000002 nav_takeoff_bearing
    {standard input}:81     .bss.nav_mode:00000000 nav_mode
    {standard input}:82     .bss.nav_mode:00000000 $d
    {standard input}:86     .bss.GPS_filter_index:00000000 GPS_filter_index
    {standard input}:87     .bss.GPS_filter_index:00000000 $d
    {standard input}:89     .bss.GPS_filter:00000000 $d
    {standard input}:92     .bss.GPS_filter:00000000 GPS_filter
    {standard input}:95     .bss.GPS_filter_sum:00000000 $d
    {standard input}:98     .bss.GPS_filter_sum:00000000 GPS_filter_sum
    {standard input}:101    .bss.GPS_read:00000000 $d
    {standard input}:104    .bss.GPS_read:00000000 GPS_read
    {standard input}:107    .bss.GPS_filtered:00000000 $d
    {standard input}:110    .bss.GPS_filtered:00000000 GPS_filtered
    {standard input}:113    .bss.GPS_degree:00000000 $d
    {standard input}:116    .bss.GPS_degree:00000000 GPS_degree
    {standard input}:119    .bss.fraction3:00000000 $d
    {standard input}:122    .bss.fraction3:00000000 fraction3
                            *COM*:00000013 gpsSol
    {standard input}:130    .bss.GPS_packetCount:00000000 GPS_packetCount
    {standard input}:127    .bss.GPS_packetCount:00000000 $d
    {standard input}:137    .bss.GPS_svInfoReceivedCount:00000000 GPS_svInfoReceivedCount
    {standard input}:134    .bss.GPS_svInfoReceivedCount:00000000 $d
    {standard input}:143    .bss.GPS_update:00000000 GPS_update
    {standard input}:144    .bss.GPS_update:00000000 $d
                            *COM*:00000001 GPS_numCh
                            *COM*:00000010 GPS_svinfo_chn
                            *COM*:00000010 GPS_svinfo_svid
                            *COM*:00000010 GPS_svinfo_quality
                            *COM*:00000010 GPS_svinfo_cno
    {standard input}:151    .bss.gpsPort:00000000 $d
    {standard input}:154    .bss.gpsPort:00000000 gpsPort
    {standard input}:157    .rodata:00000000 $d
    {standard input}:188    .rodata.gpsInitData:00000000 $d
    {standard input}:191    .rodata.gpsInitData:00000000 gpsInitData
    {standard input}:213    .rodata.ubloxInit:00000000 $d
    {standard input}:216    .rodata.ubloxInit:00000000 ubloxInit
    {standard input}:397    .rodata.ubloxSbasPrefix:00000000 $d
    {standard input}:400    .rodata.ubloxSbasPrefix:00000000 ubloxSbasPrefix
    {standard input}:412    .rodata.ubloxSbas:00000000 $d
    {standard input}:415    .rodata.ubloxSbas:00000000 ubloxSbas
    {standard input}:452    .rodata.ubloxGalileoInit:00000000 $d
    {standard input}:455    .rodata.ubloxGalileoInit:00000000 ubloxGalileoInit
                            *COM*:0000001b gpsData
                            *COM*:00000005 gpsConfig_Copy
    {standard input}:532    .pg_registry:00000000 gpsConfig_Registry
    {standard input}:529    .pg_registry:00000000 $d
    {standard input}:544    .pg_resetdata:00000000 pgResetTemplate_gpsConfig
    {standard input}:541    .pg_resetdata:00000000 $d
    {standard input}:551    .text.shiftPacketLog:00000000 $t
    {standard input}:555    .text.shiftPacketLog:00000000 shiftPacketLog
    {standard input}:613    .text.shiftPacketLog:00000034 $d
    {standard input}:618    .text.gpsSetState:00000000 $t
    {standard input}:622    .text.gpsSetState:00000000 gpsSetState
    {standard input}:676    .text.gpsSetState:00000038 $d
    {standard input}:681    .text.gpsInit:00000000 $t
    {standard input}:686    .text.gpsInit:00000000 gpsInit
    {standard input}:846    .text.gpsInit:000000ec $d
    {standard input}:862    .text.gpsInitNmea:00000000 $t
    {standard input}:867    .text.gpsInitNmea:00000000 gpsInitNmea
    {standard input}:1043   .text.gpsInitNmea:00000100 $d
    {standard input}:1053   .text.gpsInitUblox:00000000 $t
    {standard input}:1058   .text.gpsInitUblox:00000000 gpsInitUblox
    {standard input}:1438   .text.gpsInitUblox:00000270 $d
    {standard input}:1450   .text.gpsInitHardware:00000000 $t
    {standard input}:1455   .text.gpsInitHardware:00000000 gpsInitHardware
    {standard input}:1495   .text.updateGpsIndicator:00000000 $t
    {standard input}:1499   .text.updateGpsIndicator:00000000 updateGpsIndicator
    {standard input}:1551   .text.updateGpsIndicator:00000038 $d
    {standard input}:5074   .bss.GPSLEDTime.13649:00000000 GPSLEDTime.13649
    {standard input}:1557   .text.gpsUpdate:00000000 $t
    {standard input}:1562   .text.gpsUpdate:00000000 gpsUpdate
    {standard input}:1748   .text.gpsNewData:00000000 gpsNewData
    {standard input}:1616   .text.gpsUpdate:00000044 $d
    {standard input}:1622   .text.gpsUpdate:0000005c $t
    {standard input}:1735   .text.gpsUpdate:00000110 $d
    {standard input}:1744   .text.gpsNewData:00000000 $t
    {standard input}:1835   .text.gpsNewFrame:00000000 gpsNewFrame
    {standard input}:4738   .text.onGpsNewData:00000000 onGpsNewData
    {standard input}:1824   .text.gpsNewData:0000005c $d
    {standard input}:1830   .text.gpsNewFrame:00000000 $t
    {standard input}:2062   .text.gpsNewFrameNMEA:00000000 gpsNewFrameNMEA
    {standard input}:3699   .text.gpsNewFrameUBLOX:00000000 gpsNewFrameUBLOX
    {standard input}:1895   .text.grab_fields:00000000 $t
    {standard input}:1899   .text.grab_fields:00000000 grab_fields
    {standard input}:2058   .text.gpsNewFrameNMEA:00000000 $t
    {standard input}:2101   .text.gpsNewFrameNMEA:0000002c $d
    {standard input}:2136   .text.gpsNewFrameNMEA:000000b8 $t
    {standard input}:2278   .text.gpsNewFrameNMEA:00000198 $d
    {standard input}:2286   .text.gpsNewFrameNMEA:000001b8 $t
    {standard input}:2426   .text.gpsNewFrameNMEA:00000298 $d
    {standard input}:2435   .text.gpsNewFrameNMEA:000002bc $t
    {standard input}:2528   .text.gpsNewFrameNMEA:00000358 $d
    {standard input}:5079   .bss.param.13698:00000000 param.13698
    {standard input}:5084   .bss.offset.13699:00000000 offset.13699
    {standard input}:5089   .bss.parity.13700:00000000 parity.13700
    {standard input}:5095   .bss.string.13701:00000000 string.13701
    {standard input}:5100   .bss.gps_frame.13703:00000000 gps_frame.13703
    {standard input}:5106   .bss.gps_Msg.13696:00000000 gps_Msg.13696
    {standard input}:5111   .bss.svMessageNum.13704:00000000 svMessageNum.13704
    {standard input}:2540   .text.gpsNewFrameNMEA:00000380 $t
    {standard input}:2799   .text.gpsNewFrameNMEA:00000518 $d
    {standard input}:5116   .bss.checksum_param.13702:00000000 checksum_param.13702
    {standard input}:2818   .text.gpsNewFrameNMEA:0000055c $t
    {standard input}:3025   .text.gpsNewFrameNMEA:000006f0 $d
                            *COM*:00000001 ubx_protocol_bytes
                            *COM*:00000001 ubs_nav_fix_type
                            *COM*:00000001 ubx_nav_status_bits
    {standard input}:3044   .bss._ck_a:00000000 _ck_a
    {standard input}:3045   .bss._ck_a:00000000 $d
    {standard input}:3049   .bss._ck_b:00000000 _ck_b
    {standard input}:3050   .bss._ck_b:00000000 $d
    {standard input}:3054   .bss._skip_packet:00000000 _skip_packet
    {standard input}:3055   .bss._skip_packet:00000000 $d
    {standard input}:3059   .bss._step:00000000 _step
    {standard input}:3060   .bss._step:00000000 $d
    {standard input}:3064   .bss._msg_id:00000000 _msg_id
    {standard input}:3065   .bss._msg_id:00000000 $d
    {standard input}:3067   .bss._payload_length:00000000 $d
    {standard input}:3070   .bss._payload_length:00000000 _payload_length
    {standard input}:3073   .bss._payload_counter:00000000 $d
    {standard input}:3076   .bss._payload_counter:00000000 _payload_counter
    {standard input}:3081   .bss.next_fix:00000000 next_fix
    {standard input}:3082   .bss.next_fix:00000000 $d
    {standard input}:3086   .bss._class:00000000 _class
    {standard input}:3087   .bss._class:00000000 $d
    {standard input}:3091   .bss._new_position:00000000 _new_position
    {standard input}:3092   .bss._new_position:00000000 $d
    {standard input}:3096   .bss._new_speed:00000000 _new_speed
    {standard input}:3097   .bss._new_speed:00000000 $d
    {standard input}:3099   .bss._buffer:00000000 $d
    {standard input}:3102   .bss._buffer:00000000 _buffer
    {standard input}:3105   .text._update_checksum:00000000 $t
    {standard input}:3110   .text._update_checksum:00000000 _update_checksum
    {standard input}:3181   .text.UBLOX_parse_gps:00000000 $t
    {standard input}:3185   .text.UBLOX_parse_gps:00000000 UBLOX_parse_gps
    {standard input}:3217   .text.UBLOX_parse_gps:00000020 $d
    {standard input}:3264   .text.UBLOX_parse_gps:000000dc $t
    {standard input}:3543   .text.UBLOX_parse_gps:000002c8 $d
    {standard input}:3560   .text.UBLOX_parse_gps:00000304 $t
    {standard input}:3682   .text.UBLOX_parse_gps:000003c4 $d
    {standard input}:3695   .text.gpsNewFrameUBLOX:00000000 $t
    {standard input}:3730   .text.gpsNewFrameUBLOX:00000020 $d
    {standard input}:3739   .text.gpsNewFrameUBLOX:00000044 $t
    {standard input}:4078   .text.gpsNewFrameUBLOX:0000024c $d
    {standard input}:4094   .text.gpsHandlePassthrough:00000000 $t
    {standard input}:4098   .text.gpsHandlePassthrough:00000000 gpsHandlePassthrough
    {standard input}:4147   .text.gpsEnablePassthrough:00000000 $t
    {standard input}:4152   .text.gpsEnablePassthrough:00000000 gpsEnablePassthrough
    {standard input}:4227   .text.gpsEnablePassthrough:00000068 $d
    {standard input}:4237   .data.GPS_scaleLonDown:00000000 GPS_scaleLonDown
    {standard input}:4234   .data.GPS_scaleLonDown:00000000 $d
    {standard input}:4240   .text.GPS_calc_longitude_scaling:00000000 $t
    {standard input}:4245   .text.GPS_calc_longitude_scaling:00000000 GPS_calc_longitude_scaling
    {standard input}:4306   .text.GPS_calc_longitude_scaling:00000058 $d
    {standard input}:4313   .text.GPS_reset_home_position:00000000 $t
    {standard input}:4318   .text.GPS_reset_home_position:00000000 GPS_reset_home_position
    {standard input}:4371   .text.GPS_reset_home_position:00000044 $d
    {standard input}:4378   .text.GPS_distance_cm_bearing:00000000 $t
    {standard input}:4383   .text.GPS_distance_cm_bearing:00000000 GPS_distance_cm_bearing
    {standard input}:4483   .text.GPS_distance_cm_bearing:000000d0 $d
    {standard input}:4491   .text.GPS_calculateDistanceAndDirectionToHome:00000000 $t
    {standard input}:4496   .text.GPS_calculateDistanceAndDirectionToHome:00000000 GPS_calculateDistanceAndDirectionToHome
    {standard input}:4572   .text.GPS_calculateDistanceAndDirectionToHome:00000060 $d
    {standard input}:4584   .text.GPS_calc_velocity:00000000 $t
    {standard input}:4588   .text.GPS_calc_velocity:00000000 GPS_calc_velocity
    {standard input}:4722   .text.GPS_calc_velocity:000000e4 $d
    {standard input}:5121   .bss.init.13940:00000000 init.13940
    {standard input}:5127   .bss.last_coord.13939:00000000 last_coord.13939
    {standard input}:5133   .bss.speed_old.13938:00000000 speed_old.13938
    {standard input}:4733   .text.onGpsNewData:00000000 $t
    {standard input}:5048   .text.onGpsNewData:00000234 $d
    {standard input}:5139   .bss.nav_loopTimer.13949:00000000 nav_loopTimer.13949
    {standard input}:5071   .bss.GPSLEDTime.13649:00000000 $d
    {standard input}:5080   .bss.param.13698:00000000 $d
    {standard input}:5085   .bss.offset.13699:00000000 $d
    {standard input}:5090   .bss.parity.13700:00000000 $d
    {standard input}:5092   .bss.string.13701:00000000 $d
    {standard input}:5101   .bss.gps_frame.13703:00000000 $d
    {standard input}:5103   .bss.gps_Msg.13696:00000000 $d
    {standard input}:5112   .bss.svMessageNum.13704:00000000 $d
    {standard input}:5117   .bss.checksum_param.13702:00000000 $d
    {standard input}:5122   .bss.init.13940:00000000 $d
    {standard input}:5124   .bss.last_coord.13939:00000000 $d
    {standard input}:5130   .bss.speed_old.13938:00000000 $d
    {standard input}:5136   .bss.nav_loopTimer.13949:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
millis
memset
findSerialPortConfig
openSerialPort
baudRates
serialSetBaudRate
serialPrint
isSerialTransmitBufferEmpty
serialGetBaudRate
lookupBaudRateIndex
serialWrite
ledToggle
serialRead
serialRxBytesWaiting
sensorsClear
sensors
gpsRescueIsConfigured
updateGPSRescueState
stateFlags
sensorsSet
GPS_coord_to_degrees
rtcHasTime
rtcSetDateTime
rtcSet
feature
micros
dashboardUpdate
waitForSerialPortToFinishTransmitting
serialSetMode
dashboardShowFixedPage
serialPassthrough
cos_approx
sqrtf
atan2_approx
rescueNewGpsData
armingFlags
