   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "osd.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.cmp32,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	cmp32:
  25              	.LFB520:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/utils.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #include <stddef.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define NOOP do {} while (0)
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define ARRAYLEN(x) (sizeof(x) / sizeof((x)[0]))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define ARRAYEND(x) (&(x)[ARRAYLEN(x)])
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONST_CAST(type, value) ((type)(value))
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT_HELPER(x,y) x ## y
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT(x,y) CONCAT_HELPER(x, y)
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT2(_1,_2) CONCAT(_1, _2)
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT3(_1,_2,_3)  CONCAT(CONCAT(_1, _2), _3)
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT4(_1,_2,_3,_4)  CONCAT(CONCAT3(_1, _2, _3), _4)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STR_HELPER(x) #x
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STR(x) STR_HELPER(x)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define EXPAND_I(x) x
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define EXPAND(x) EXPAND_I(x)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // expand to t if bit is 1, f when bit is 0. Other bit values are not supported
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF(bit, t, f) PP_IIF_I(bit, t, f)
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_I(bit, t, f) PP_IIF_ ## bit(t, f)
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_0(t, f) f
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_1(t, f) t
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // Expand all argumens and call macro with them. When expansion of some argument contains ',', it w
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // #define TAKE3(_1,_2,_3) CONCAT3(_1,_2,_3)
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // #define MULTI2 A,B
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // PP_CALL(TAKE3, MULTI2, C) expands to ABC
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_CALL(macro, ...) macro(__VA_ARGS__)
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #if !defined(UNUSED)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define UNUSED(x) (void)(x)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #endif
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STATIC_ASSERT(condition, name) \
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****     typedef char assert_failed_ ## name [(condition) ? 1 : -1 ] __attribute__((unused))
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BIT(x) (1 << (x))
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** http://resnet.uoregon.edu/~gurney_j/jmpc/bitwise.html
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** */
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BITCOUNT(x) (((BX_(x)+(BX_(x)>>4)) & 0x0F0F0F0F) % 255)
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BX_(x) ((x) - (((x)>>1)&0x77777777) - (((x)>>2)&0x33333333) - (((x)>>3)&0x11111111))
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * https://groups.google.com/forum/?hl=en#!msg/comp.lang.c/attFnqwhvGk/sGBKXvIkY3AJ
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Return (v ? floor(log2(v)) : 0) when 0 <= v < 1<<[8, 16, 32, 64].
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Inefficient algorithm, intended for compile-time constants.
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  */
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_8BIT(v)  (8 - 90/(((v)/4+14)|1) - 2/((v)/2+1))
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_16BIT(v) (8*((v)>255) + LOG2_8BIT((v) >>8*((v)>255)))
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_32BIT(v) (16*((v)>65535L) + LOG2_16BIT((v)*1L >>16*((v)>65535L)))
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_64BIT(v) \
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****     (32*((v)/2L>>31 > 0) \
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****      + LOG2_32BIT((v)*1L >>16*((v)/2L>>31 > 0) \
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****                          >>16*((v)/2L>>31 > 0)))
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2(v) LOG2_64BIT(v)
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #if 0
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // ISO C version, but no type checking
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define container_of(ptr, type, member) \
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****                       ((type *) ((char *)(ptr) - offsetof(type, member)))
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #else
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // non ISO variant from linux kernel; checks ptr type, but triggers 'ISO C forbids braced-groups wi
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** //  __extension__ is here to disable this warning
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define container_of(ptr, type, member)  ( __extension__ ({     \
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****         const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****         (type *)( (char *)__mptr - offsetof(type,member) );}))
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** static inline int16_t cmp16(uint16_t a, uint16_t b) { return (int16_t)(a-b); }
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** static inline int32_t cmp32(uint32_t a, uint32_t b) { return (int32_t)(a-b); }
  27              	 .loc 1 100 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
  44              	 .loc 1 100 0
  45 000a 7A68     	 ldr r2,[r7,#4]
  46 000c 3B68     	 ldr r3,[r7]
  47 000e D31A     	 subs r3,r2,r3
  48 0010 1846     	 mov r0,r3
  49 0012 0C37     	 adds r7,r7,#12
  50              	.LCFI3:
  51              	 .cfi_def_cfa_offset 4
  52 0014 BD46     	 mov sp,r7
  53              	.LCFI4:
  54              	 .cfi_def_cfa_register 13
  55              	 
  56 0016 5DF8047B 	 ldr r7,[sp],#4
  57              	.LCFI5:
  58              	 .cfi_restore 7
  59              	 .cfi_def_cfa_offset 0
  60 001a 7047     	 bx lr
  61              	 .cfi_endproc
  62              	.LFE520:
  64              	 .section .text.blackboxConfig,"ax",%progbits
  65              	 .align 2
  66              	 .thumb
  67              	 .thumb_func
  69              	blackboxConfig:
  70              	.LFB527:
  71              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox/blackbox.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "platform.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "build/build_config.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "common/time.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef enum BlackboxDevice {
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_NONE = 0,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #ifdef USE_FLASHFS
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_FLASH = 1,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #endif
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #ifdef USE_SDCARD
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_SDCARD = 2,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** #endif
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_DEVICE_SERIAL = 3
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } BlackboxDevice_e;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef enum BlackboxMode {
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_MODE_NORMAL = 0,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_MODE_MOTOR_TEST,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     BLACKBOX_MODE_ALWAYS_ON
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } BlackboxMode;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef enum FlightLogEvent {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_SYNC_BEEP = 0,
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_INFLIGHT_ADJUSTMENT = 13,
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_LOGGING_RESUME = 14,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_FLIGHTMODE = 30, // Add new event type for flight mode status.
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     FLIGHT_LOG_EVENT_LOG_END = 255
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } FlightLogEvent;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** typedef struct blackboxConfig_s {
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint16_t p_ratio; // I-frame interval / P-frame interval
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint8_t device;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint8_t record_acc;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h ****     uint8_t mode;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** } blackboxConfig_t;
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/blackbox\blackbox.h **** PG_DECLARE(blackboxConfig_t, blackboxConfig);
  72              	 .loc 2 60 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 00AF     	 add r7,sp,#0
  82              	.LCFI7:
  83              	 .cfi_def_cfa_register 7
  84              	 .loc 2 60 0
  85 0004 024B     	 ldr r3,.L5
  86 0006 1846     	 mov r0,r3
  87 0008 BD46     	 mov sp,r7
  88              	.LCFI8:
  89              	 .cfi_def_cfa_register 13
  90              	 
  91 000a 5DF8047B 	 ldr r7,[sp],#4
  92              	.LCFI9:
  93              	 .cfi_restore 7
  94              	 .cfi_def_cfa_offset 0
  95 000e 7047     	 bx lr
  96              	.L6:
  97              	 .align 2
  98              	.L5:
  99 0010 00000000 	 .word blackboxConfig_System
 100              	 .cfi_endproc
 101              	.LFE527:
 103              	 .comm pCurrentDisplay,4,4
 104              	 .section .text.constrain,"ax",%progbits
 105              	 .align 2
 106              	 .thumb
 107              	 .thumb_func
 109              	constrain:
 110              	.LFB529:
 111              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
 112              	 .loc 3 151 0
 113              	 .cfi_startproc
 114              	 
 115              	 
 116              	 
 117 0000 80B4     	 push {r7}
 118              	.LCFI10:
 119              	 .cfi_def_cfa_offset 4
 120              	 .cfi_offset 7,-4
 121 0002 85B0     	 sub sp,sp,#20
 122              	.LCFI11:
 123              	 .cfi_def_cfa_offset 24
 124 0004 00AF     	 add r7,sp,#0
 125              	.LCFI12:
 126              	 .cfi_def_cfa_register 7
 127 0006 F860     	 str r0,[r7,#12]
 128 0008 B960     	 str r1,[r7,#8]
 129 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
 130              	 .loc 3 152 0
 131 000c FA68     	 ldr r2,[r7,#12]
 132 000e BB68     	 ldr r3,[r7,#8]
 133 0010 9A42     	 cmp r2,r3
 134 0012 01DA     	 bge .L8
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
 135              	 .loc 3 153 0
 136 0014 BB68     	 ldr r3,[r7,#8]
 137 0016 06E0     	 b .L9
 138              	.L8:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
 139              	 .loc 3 154 0
 140 0018 FA68     	 ldr r2,[r7,#12]
 141 001a 7B68     	 ldr r3,[r7,#4]
 142 001c 9A42     	 cmp r2,r3
 143 001e 01DD     	 ble .L10
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 144              	 .loc 3 155 0
 145 0020 7B68     	 ldr r3,[r7,#4]
 146 0022 00E0     	 b .L9
 147              	.L10:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 148              	 .loc 3 157 0
 149 0024 FB68     	 ldr r3,[r7,#12]
 150              	.L9:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 151              	 .loc 3 158 0
 152 0026 1846     	 mov r0,r3
 153 0028 1437     	 adds r7,r7,#20
 154              	.LCFI13:
 155              	 .cfi_def_cfa_offset 4
 156 002a BD46     	 mov sp,r7
 157              	.LCFI14:
 158              	 .cfi_def_cfa_register 13
 159              	 
 160 002c 5DF8047B 	 ldr r7,[sp],#4
 161              	.LCFI15:
 162              	 .cfi_restore 7
 163              	 .cfi_def_cfa_offset 0
 164 0030 7047     	 bx lr
 165              	 .cfi_endproc
 166              	.LFE529:
 168 0032 00BF     	 .section .text.pilotConfig,"ax",%progbits
 169              	 .align 2
 170              	 .thumb
 171              	 .thumb_func
 173              	pilotConfig:
 174              	.LFB537:
 175              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include <stdbool.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** #define MAX_NAME_LENGTH 16u
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** typedef struct pilotConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h ****     char name[MAX_NAME_LENGTH + 1];
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** } pilotConfig_t;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\config.h **** PG_DECLARE(pilotConfig_t, pilotConfig);
 176              	 .loc 4 34 0
 177              	 .cfi_startproc
 178              	 
 179              	 
 180              	 
 181 0000 80B4     	 push {r7}
 182              	.LCFI16:
 183              	 .cfi_def_cfa_offset 4
 184              	 .cfi_offset 7,-4
 185 0002 00AF     	 add r7,sp,#0
 186              	.LCFI17:
 187              	 .cfi_def_cfa_register 7
 188              	 .loc 4 34 0
 189 0004 024B     	 ldr r3,.L13
 190 0006 1846     	 mov r0,r3
 191 0008 BD46     	 mov sp,r7
 192              	.LCFI18:
 193              	 .cfi_def_cfa_register 13
 194              	 
 195 000a 5DF8047B 	 ldr r7,[sp],#4
 196              	.LCFI19:
 197              	 .cfi_restore 7
 198              	 .cfi_def_cfa_offset 0
 199 000e 7047     	 bx lr
 200              	.L14:
 201              	 .align 2
 202              	.L13:
 203 0010 00000000 	 .word pilotConfig_System
 204              	 .cfi_endproc
 205              	.LFE537:
 207              	 .section .text.osdConfig,"ax",%progbits
 208              	 .align 2
 209              	 .thumb
 210              	 .thumb_func
 212              	osdConfig:
 213              	.LFB564:
 214              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/osd.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #include "pg/pg.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_NUM_TIMER_TYPES 3
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** extern const char * const osdTimerSourceNames[OSD_NUM_TIMER_TYPES];
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_ELEMENT_BUFFER_LENGTH 32
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define VISIBLE_FLAG  0x0800
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define VISIBLE(x)    (x & VISIBLE_FLAG)
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POS_MAX   0x3FF
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POSCFG_MAX   (VISIBLE_FLAG|0x3FF) // For CLI values
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Character coordinate
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POSITION_BITS 5 // 5 bits gives a range 0-31
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POSITION_XY_MASK ((1 << OSD_POSITION_BITS) - 1)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_POS(x,y)  ((x & OSD_POSITION_XY_MASK) | ((y & OSD_POSITION_XY_MASK) << OSD_POSITION_BIT
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_X(x)      (x & OSD_POSITION_XY_MASK)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_Y(x)      ((x >> OSD_POSITION_BITS) & OSD_POSITION_XY_MASK)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Timer configuration
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Stored as 15[alarm:8][precision:4][source:4]0
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_TIMER(src, prec, alarm) ((src & 0x0F) | ((prec & 0x0F) << 4) | ((alarm & 0xFF ) << 8))
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_TIMER_SRC(timer)        (timer & 0x0F)
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_TIMER_PRECISION(timer)  ((timer >> 4) & 0x0F)
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define OSD_TIMER_ALARM(timer)      ((timer >> 8) & 0xFF)
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // NB: to ensure backwards compatibility, new enum values must be appended at the end but before th
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // *** IMPORTANT ***
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // If you are adding additional elements that do not require any conditional display logic,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // you must add the elements to the osdElementDisplayOrder[] array in src/main/io/osd.c
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_RSSI_VALUE,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_MAIN_BATT_VOLTAGE,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_CROSSHAIRS,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ARTIFICIAL_HORIZON,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_HORIZON_SIDEBARS,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ITEM_TIMER_1,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ITEM_TIMER_2,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_FLYMODE,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_CRAFT_NAME,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_THROTTLE_POS,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_VTX_CHANNEL,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_CURRENT_DRAW,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_MAH_DRAWN,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_GPS_SPEED,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_GPS_SATS,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ALTITUDE,
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ROLL_PIDS,
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_PITCH_PIDS,
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_YAW_PIDS,
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_POWER,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_PIDRATE_PROFILE,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNINGS,
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_AVG_CELL_VOLTAGE,
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_GPS_LON,
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_GPS_LAT,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_DEBUG,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_PITCH_ANGLE,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ROLL_ANGLE,
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_MAIN_BATT_USAGE,
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_DISARMED,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_HOME_DIR,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_HOME_DIST,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_NUMERICAL_HEADING,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_NUMERICAL_VARIO,
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_COMPASS_BAR,
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ESC_TMP,
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ESC_RPM,
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_REMAINING_TIME_ESTIMATE,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_RTC_DATETIME,
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ADJUSTMENT_RANGE,
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_CORE_TEMPERATURE,
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ANTI_GRAVITY,
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_G_FORCE,
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_ITEM_COUNT // MUST BE LAST
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_items_e;
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // *** IMPORTANT ***
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // The order of the OSD stats enumeration *must* match the order they're displayed on-screen
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // This is because the fields are presented in the configurator in the order of the enumeration
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // and we want the configuration order to match the on-screen display order.
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Changes to the stats display order *must* be implemented in the configurator otherwise the
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // stats selections will not be populated correctly and the settings will become corrupted.
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** //
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Also - if the stats are reordered then the PR version must be incremented. Otherwise there
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // is no indication that the stored config must be reset and the bitmapped values will be incorrect
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_RTC_DATE_TIME,
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_TIMER_1,
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_TIMER_2,
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MAX_SPEED,
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MAX_DISTANCE,
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MIN_BATTERY,
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_END_BATTERY,
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_BATTERY,
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MIN_RSSI,
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MAX_CURRENT,
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_USED_MAH,
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_MAX_ALTITUDE,
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_BLACKBOX,
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_BLACKBOX_NUMBER,
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_STAT_COUNT // MUST BE LAST
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_stats_e;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Make sure the number of stats do not exceed the available 32bit storage
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** STATIC_ASSERT(OSD_STAT_COUNT <= 32, osdstats_overflow);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_UNIT_IMPERIAL,
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_UNIT_METRIC
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_unit_e;
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_1,
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_2,
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_COUNT
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_timer_e;
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_SRC_ON,
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_SRC_TOTAL_ARMED,
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_SRC_LAST_ARMED,
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_SRC_COUNT
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_timer_source_e;
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_PREC_SECOND,
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_PREC_HUNDREDTHS,
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_TIMER_PREC_COUNT
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osd_timer_precision_e;
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef enum {
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_ARMING_DISABLE,
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_BATTERY_NOT_FULL,
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_BATTERY_WARNING,
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_BATTERY_CRITICAL,
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_VISUAL_BEEPER,
 162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_CRASH_FLIP,
 163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_ESC_FAIL,
 164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_CORE_TEMPERATURE,
 165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_RC_SMOOTHING,
 166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     OSD_WARNING_COUNT // MUST BE LAST
 167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osdWarningsFlags_e;
 168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 169:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** // Make sure the number of warnings do not exceed the available 16bit storage
 170:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** STATIC_ASSERT(OSD_WARNING_COUNT <= 16, osdwarnings_overflow);
 171:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 172:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define ESC_RPM_ALARM_OFF -1
 173:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define ESC_TEMP_ALARM_OFF INT8_MIN
 174:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** #define ESC_CURRENT_ALARM_OFF -1
 175:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 176:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** typedef struct osdConfig_s {
 177:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t item_pos[OSD_ITEM_COUNT];
 178:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 179:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     // Alarms
 180:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t cap_alarm;
 181:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t alt_alarm;
 182:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint8_t rssi_alarm;
 183:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 184:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     osd_unit_e units;
 185:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 186:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t timers[OSD_TIMER_COUNT];
 187:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint16_t enabledWarnings;
 188:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 189:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint8_t ahMaxPitch;
 190:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint8_t ahMaxRoll;
 191:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint32_t enabled_stats;
 192:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     int8_t esc_temp_alarm;
 193:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     int16_t esc_rpm_alarm;
 194:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     int16_t esc_current_alarm;
 195:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h ****     uint8_t core_temp_alarm;
 196:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** } osdConfig_t;
 197:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** 
 198:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\osd.h **** PG_DECLARE(osdConfig_t, osdConfig);
 215              	 .loc 5 198 0
 216              	 .cfi_startproc
 217              	 
 218              	 
 219              	 
 220 0000 80B4     	 push {r7}
 221              	.LCFI20:
 222              	 .cfi_def_cfa_offset 4
 223              	 .cfi_offset 7,-4
 224 0002 00AF     	 add r7,sp,#0
 225              	.LCFI21:
 226              	 .cfi_def_cfa_register 7
 227              	 .loc 5 198 0
 228 0004 024B     	 ldr r3,.L17
 229 0006 1846     	 mov r0,r3
 230 0008 BD46     	 mov sp,r7
 231              	.LCFI22:
 232              	 .cfi_def_cfa_register 13
 233              	 
 234 000a 5DF8047B 	 ldr r7,[sp],#4
 235              	.LCFI23:
 236              	 .cfi_restore 7
 237              	 .cfi_def_cfa_offset 0
 238 000e 7047     	 bx lr
 239              	.L18:
 240              	 .align 2
 241              	.L17:
 242 0010 00000000 	 .word osdConfig_System
 243              	 .cfi_endproc
 244              	.LFE564:
 246              	 .section .text.osdConfigMutable,"ax",%progbits
 247              	 .align 2
 248              	 .thumb
 249              	 .thumb_func
 251              	osdConfigMutable:
 252              	.LFB565:
 253              	 .loc 5 198 0
 254              	 .cfi_startproc
 255              	 
 256              	 
 257              	 
 258 0000 80B4     	 push {r7}
 259              	.LCFI24:
 260              	 .cfi_def_cfa_offset 4
 261              	 .cfi_offset 7,-4
 262 0002 00AF     	 add r7,sp,#0
 263              	.LCFI25:
 264              	 .cfi_def_cfa_register 7
 265              	 .loc 5 198 0
 266 0004 024B     	 ldr r3,.L21
 267 0006 1846     	 mov r0,r3
 268 0008 BD46     	 mov sp,r7
 269              	.LCFI26:
 270              	 .cfi_def_cfa_register 13
 271              	 
 272 000a 5DF8047B 	 ldr r7,[sp],#4
 273              	.LCFI27:
 274              	 .cfi_restore 7
 275              	 .cfi_def_cfa_offset 0
 276 000e 7047     	 bx lr
 277              	.L22:
 278              	 .align 2
 279              	.L21:
 280 0010 00000000 	 .word osdConfig_System
 281              	 .cfi_endproc
 282              	.LFE565:
 284              	 .section .text.vtxSettingsConfig,"ax",%progbits
 285              	 .align 2
 286              	 .thumb
 287              	 .thumb_func
 289              	vtxSettingsConfig:
 290              	.LFB566:
 291              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include "platform.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include "common/time.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include "pg/pg.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** typedef struct vtxSettingsConfig_s {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t band;           // 1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t channel;        // 1-8
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t power;          // 0 = lowest
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint16_t freq;          // sets freq in MHz if band=0
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint16_t pitModeFreq;   // sets out-of-range pitmode frequency
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t lowPowerDisarm; // min power while disarmed
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** } vtxSettingsConfig_t;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** PG_DECLARE(vtxSettingsConfig_t, vtxSettingsConfig);
 292              	 .loc 6 38 0
 293              	 .cfi_startproc
 294              	 
 295              	 
 296              	 
 297 0000 80B4     	 push {r7}
 298              	.LCFI28:
 299              	 .cfi_def_cfa_offset 4
 300              	 .cfi_offset 7,-4
 301 0002 00AF     	 add r7,sp,#0
 302              	.LCFI29:
 303              	 .cfi_def_cfa_register 7
 304              	 .loc 6 38 0
 305 0004 024B     	 ldr r3,.L25
 306 0006 1846     	 mov r0,r3
 307 0008 BD46     	 mov sp,r7
 308              	.LCFI30:
 309              	 .cfi_def_cfa_register 13
 310              	 
 311 000a 5DF8047B 	 ldr r7,[sp],#4
 312              	.LCFI31:
 313              	 .cfi_restore 7
 314              	 .cfi_def_cfa_offset 0
 315 000e 7047     	 bx lr
 316              	.L26:
 317              	 .align 2
 318              	.L25:
 319 0010 00000000 	 .word vtxSettingsConfig_System
 320              	 .cfi_endproc
 321              	.LFE566:
 323              	 .section .text.batteryConfig,"ax",%progbits
 324              	 .align 2
 325              	 .thumb
 326              	 .thumb_func
 328              	batteryConfig:
 329              	.LFB593:
 330              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/time.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/current.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/voltage.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct batteryConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // voltage
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmaxcellvoltage;             // maximum voltage per cell, used for auto-detecting ba
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmincellvoltage;             // minimum voltage per cell, this triggers battery crit
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatwarningcellvoltage;         // warning voltage per cell, this triggers battery warn
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatnotpresentcellvoltage;      // Between vbatmaxcellvoltage and 2*this is considered 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t lvcPercentage;                  // Percentage of throttle when lvc is triggered
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     voltageMeterSource_e voltageMeterSource; // source of battery voltage meter used, either ADC or
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // current
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     currentMeterSource_e currentMeterSource; // source of battery current meter used, either ADC, V
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint16_t batteryCapacity;               // mAh
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // warnings / alerts
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useVBatAlerts;                     // Issue alerts based on VBat readings
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useConsumptionAlerts;              // Issue alerts based on total power consumption
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t consumptionWarningPercentage;   // Percentage of remaining capacity that should trigger
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbathysteresis;                 // hysteresis for alarm, default 1 = 0.1V
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatfullcellvoltage;            // Cell voltage at which the battery is deemed to be "f
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } batteryConfig_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct lowVoltageCutoff_s {
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool enabled;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t percentage;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     timeUs_t startTime;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } lowVoltageCutoff_t;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** PG_DECLARE(batteryConfig_t, batteryConfig);
 331              	 .loc 7 59 0
 332              	 .cfi_startproc
 333              	 
 334              	 
 335              	 
 336 0000 80B4     	 push {r7}
 337              	.LCFI32:
 338              	 .cfi_def_cfa_offset 4
 339              	 .cfi_offset 7,-4
 340 0002 00AF     	 add r7,sp,#0
 341              	.LCFI33:
 342              	 .cfi_def_cfa_register 7
 343              	 .loc 7 59 0
 344 0004 024B     	 ldr r3,.L29
 345 0006 1846     	 mov r0,r3
 346 0008 BD46     	 mov sp,r7
 347              	.LCFI34:
 348              	 .cfi_def_cfa_register 13
 349              	 
 350 000a 5DF8047B 	 ldr r7,[sp],#4
 351              	.LCFI35:
 352              	 .cfi_restore 7
 353              	 .cfi_def_cfa_offset 0
 354 000e 7047     	 bx lr
 355              	.L30:
 356              	 .align 2
 357              	.L29:
 358 0010 00000000 	 .word batteryConfig_System
 359              	 .cfi_endproc
 360              	.LFE593:
 362              	 .global osdTimerSourceNames
 363              	 .section .rodata
 364              	 .align 2
 365              	.LC0:
 366 0000 4F4E2054 	 .ascii "ON TIME  \000"
 366      494D4520 
 366      2000
 367 000a 0000     	 .align 2
 368              	.LC1:
 369 000c 544F5441 	 .ascii "TOTAL ARM\000"
 369      4C204152 
 369      4D00
 370 0016 0000     	 .align 2
 371              	.LC2:
 372 0018 4C415354 	 .ascii "LAST ARM \000"
 372      2041524D 
 372      2000
 373              	 .section .rodata.osdTimerSourceNames,"a",%progbits
 374              	 .align 2
 377              	osdTimerSourceNames:
 378 0000 00000000 	 .word .LC0
 379 0004 0C000000 	 .word .LC1
 380 0008 18000000 	 .word .LC2
 381              	 .section .data.blinkState,"aw",%progbits
 384              	blinkState:
 385 0000 01       	 .byte 1
 386              	 .section .bss.showVisualBeeper,"aw",%nobits
 389              	showVisualBeeper:
 390 0000 00       	 .space 1
 391              	 .section .bss.blinkBits,"aw",%nobits
 392              	 .align 2
 395              	blinkBits:
 396 0000 00000000 	 .space 8
 396      00000000 
 397              	 .section .bss.flyTime,"aw",%nobits
 398              	 .align 2
 401              	flyTime:
 402 0000 00000000 	 .space 4
 403              	 .section .bss.stats,"aw",%nobits
 404              	 .align 2
 407              	stats:
 408 0000 00000000 	 .space 18
 408      00000000 
 408      00000000 
 408      00000000 
 408      0000
 409              	 .global resumeRefreshAt
 410 0012 0000     	 .section .bss.resumeRefreshAt,"aw",%nobits
 411              	 .align 2
 414              	resumeRefreshAt:
 415 0000 00000000 	 .space 4
 416              	 .section .bss.armState,"aw",%nobits
 419              	armState:
 420 0000 00       	 .space 1
 421              	 .section .bss.lastArmState,"aw",%nobits
 424              	lastArmState:
 425 0000 00       	 .space 1
 426              	 .section .bss.osdDisplayPort,"aw",%nobits
 427              	 .align 2
 430              	osdDisplayPort:
 431 0000 00000000 	 .space 4
 432              	 .section .rodata.compassBar,"a",%progbits
 433              	 .align 2
 436              	compassBar:
 437 0000 1B       	 .byte 27
 438 0001 1D       	 .byte 29
 439 0002 1C       	 .byte 28
 440 0003 1D       	 .byte 29
 441 0004 18       	 .byte 24
 442 0005 1D       	 .byte 29
 443 0006 1C       	 .byte 28
 444 0007 1D       	 .byte 29
 445 0008 1A       	 .byte 26
 446 0009 1D       	 .byte 29
 447 000a 1C       	 .byte 28
 448 000b 1D       	 .byte 29
 449 000c 19       	 .byte 25
 450 000d 1D       	 .byte 29
 451 000e 1C       	 .byte 28
 452 000f 1D       	 .byte 29
 453 0010 1B       	 .byte 27
 454 0011 1D       	 .byte 29
 455 0012 1C       	 .byte 28
 456 0013 1D       	 .byte 29
 457 0014 18       	 .byte 24
 458 0015 1D       	 .byte 29
 459 0016 1C       	 .byte 28
 460 0017 1D       	 .byte 29
 461              	 .section .rodata.osdElementDisplayOrder,"a",%progbits
 462              	 .align 2
 465              	osdElementDisplayOrder:
 466 0000 01       	 .byte 1
 467 0001 00       	 .byte 0
 468 0002 02       	 .byte 2
 469 0003 04       	 .byte 4
 470 0004 05       	 .byte 5
 471 0005 06       	 .byte 6
 472 0006 25       	 .byte 37
 473 0007 07       	 .byte 7
 474 0008 09       	 .byte 9
 475 0009 0A       	 .byte 10
 476 000a 0B       	 .byte 11
 477 000b 0C       	 .byte 12
 478 000c 08       	 .byte 8
 479 000d 0F       	 .byte 15
 480 000e 10       	 .byte 16
 481 000f 11       	 .byte 17
 482 0010 12       	 .byte 18
 483 0011 13       	 .byte 19
 484 0012 14       	 .byte 20
 485 0013 15       	 .byte 21
 486 0014 16       	 .byte 22
 487 0015 19       	 .byte 25
 488 0016 1A       	 .byte 26
 489 0017 1B       	 .byte 27
 490 0018 1C       	 .byte 28
 491 0019 1D       	 .byte 29
 492 001a 20       	 .byte 32
 493 001b 21       	 .byte 33
 494 001c 22       	 .byte 34
 495 001d 29       	 .byte 41
 496              	 .comm osdConfig_System,110,4
 497              	 .comm osdConfig_Copy,110,4
 498              	 .global osdConfig_Registry
 499 001e 0000     	 .section .pg_registry,"a",%progbits
 500              	 .align 2
 503              	osdConfig_Registry:
 504 0000 F531     	 .short 12789
 505 0002 6E00     	 .short 110
 506 0004 00000000 	 .word osdConfig_System
 507 0008 00000000 	 .word osdConfig_Copy
 508 000c 00000000 	 .word 0
 509 0010 00000000 	 .word pgResetFn_osdConfig
 510              	 .section .text.osdGetMetersToSelectedUnitSymbol,"ax",%progbits
 511              	 .align 2
 512              	 .thumb
 513              	 .thumb_func
 515              	osdGetMetersToSelectedUnitSymbol:
 516              	.LFB597:
 517              	 .file 8 "../cleanflight/src/main/io/osd.c"
   1:../cleanflight/src/main/io/osd.c **** /*
   2:../cleanflight/src/main/io/osd.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/io/osd.c ****  *
   4:../cleanflight/src/main/io/osd.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/io/osd.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/io/osd.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/io/osd.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/io/osd.c ****  * any later version.
   9:../cleanflight/src/main/io/osd.c ****  *
  10:../cleanflight/src/main/io/osd.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/io/osd.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/io/osd.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/io/osd.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/io/osd.c ****  *
  15:../cleanflight/src/main/io/osd.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/io/osd.c ****  * along with this software.
  17:../cleanflight/src/main/io/osd.c ****  *
  18:../cleanflight/src/main/io/osd.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/io/osd.c ****  */
  20:../cleanflight/src/main/io/osd.c **** 
  21:../cleanflight/src/main/io/osd.c **** /*
  22:../cleanflight/src/main/io/osd.c ****  Created by Marcin Baliniak
  23:../cleanflight/src/main/io/osd.c ****  some functions based on MinimOSD
  24:../cleanflight/src/main/io/osd.c **** 
  25:../cleanflight/src/main/io/osd.c ****  OSD-CMS separation by jflyper
  26:../cleanflight/src/main/io/osd.c ****  */
  27:../cleanflight/src/main/io/osd.c **** 
  28:../cleanflight/src/main/io/osd.c **** #include <stdbool.h>
  29:../cleanflight/src/main/io/osd.c **** #include <stdint.h>
  30:../cleanflight/src/main/io/osd.c **** #include <stdlib.h>
  31:../cleanflight/src/main/io/osd.c **** #include <string.h>
  32:../cleanflight/src/main/io/osd.c **** #include <ctype.h>
  33:../cleanflight/src/main/io/osd.c **** #include <math.h>
  34:../cleanflight/src/main/io/osd.c **** 
  35:../cleanflight/src/main/io/osd.c **** #include "platform.h"
  36:../cleanflight/src/main/io/osd.c **** 
  37:../cleanflight/src/main/io/osd.c **** #ifdef USE_OSD
  38:../cleanflight/src/main/io/osd.c **** 
  39:../cleanflight/src/main/io/osd.c **** #include "blackbox/blackbox.h"
  40:../cleanflight/src/main/io/osd.c **** #include "blackbox/blackbox_io.h"
  41:../cleanflight/src/main/io/osd.c **** 
  42:../cleanflight/src/main/io/osd.c **** #include "build/build_config.h"
  43:../cleanflight/src/main/io/osd.c **** #include "build/debug.h"
  44:../cleanflight/src/main/io/osd.c **** #include "build/version.h"
  45:../cleanflight/src/main/io/osd.c **** 
  46:../cleanflight/src/main/io/osd.c **** #include "cms/cms.h"
  47:../cleanflight/src/main/io/osd.c **** #include "cms/cms_types.h"
  48:../cleanflight/src/main/io/osd.c **** 
  49:../cleanflight/src/main/io/osd.c **** #include "common/axis.h"
  50:../cleanflight/src/main/io/osd.c **** #include "common/maths.h"
  51:../cleanflight/src/main/io/osd.c **** #include "common/printf.h"
  52:../cleanflight/src/main/io/osd.c **** #include "common/typeconversion.h"
  53:../cleanflight/src/main/io/osd.c **** #include "common/utils.h"
  54:../cleanflight/src/main/io/osd.c **** 
  55:../cleanflight/src/main/io/osd.c **** #include "config/feature.h"
  56:../cleanflight/src/main/io/osd.c **** 
  57:../cleanflight/src/main/io/osd.c **** #include "drivers/display.h"
  58:../cleanflight/src/main/io/osd.c **** #include "drivers/flash.h"
  59:../cleanflight/src/main/io/osd.c **** #include "drivers/max7456_symbols.h"
  60:../cleanflight/src/main/io/osd.c **** #include "drivers/sdcard.h"
  61:../cleanflight/src/main/io/osd.c **** #include "drivers/time.h"
  62:../cleanflight/src/main/io/osd.c **** 
  63:../cleanflight/src/main/io/osd.c **** #include "fc/config.h"
  64:../cleanflight/src/main/io/osd.c **** #include "fc/fc_core.h"
  65:../cleanflight/src/main/io/osd.c **** #include "fc/rc_adjustments.h"
  66:../cleanflight/src/main/io/osd.c **** #include "fc/rc_controls.h"
  67:../cleanflight/src/main/io/osd.c **** #include "fc/fc_rc.h"
  68:../cleanflight/src/main/io/osd.c **** #include "fc/runtime_config.h"
  69:../cleanflight/src/main/io/osd.c **** 
  70:../cleanflight/src/main/io/osd.c **** #include "flight/position.h"
  71:../cleanflight/src/main/io/osd.c **** #include "flight/imu.h"
  72:../cleanflight/src/main/io/osd.c **** #ifdef USE_ESC_SENSOR
  73:../cleanflight/src/main/io/osd.c **** #include "flight/mixer.h"
  74:../cleanflight/src/main/io/osd.c **** #endif
  75:../cleanflight/src/main/io/osd.c **** #include "flight/pid.h"
  76:../cleanflight/src/main/io/osd.c **** 
  77:../cleanflight/src/main/io/osd.c **** #include "io/asyncfatfs/asyncfatfs.h"
  78:../cleanflight/src/main/io/osd.c **** #include "io/beeper.h"
  79:../cleanflight/src/main/io/osd.c **** #include "io/flashfs.h"
  80:../cleanflight/src/main/io/osd.c **** #include "io/gps.h"
  81:../cleanflight/src/main/io/osd.c **** #include "io/osd.h"
  82:../cleanflight/src/main/io/osd.c **** #include "io/vtx_string.h"
  83:../cleanflight/src/main/io/osd.c **** #include "io/vtx.h"
  84:../cleanflight/src/main/io/osd.c **** 
  85:../cleanflight/src/main/io/osd.c **** #include "pg/pg.h"
  86:../cleanflight/src/main/io/osd.c **** #include "pg/pg_ids.h"
  87:../cleanflight/src/main/io/osd.c **** #include "pg/rx.h"
  88:../cleanflight/src/main/io/osd.c **** 
  89:../cleanflight/src/main/io/osd.c **** #include "rx/rx.h"
  90:../cleanflight/src/main/io/osd.c **** 
  91:../cleanflight/src/main/io/osd.c **** #include "sensors/acceleration.h"
  92:../cleanflight/src/main/io/osd.c **** #include "sensors/adcinternal.h"
  93:../cleanflight/src/main/io/osd.c **** #include "sensors/barometer.h"
  94:../cleanflight/src/main/io/osd.c **** #include "sensors/battery.h"
  95:../cleanflight/src/main/io/osd.c **** #include "sensors/esc_sensor.h"
  96:../cleanflight/src/main/io/osd.c **** #include "sensors/sensors.h"
  97:../cleanflight/src/main/io/osd.c **** 
  98:../cleanflight/src/main/io/osd.c **** #ifdef USE_HARDWARE_REVISION_DETECTION
  99:../cleanflight/src/main/io/osd.c **** #include "hardware_revision.h"
 100:../cleanflight/src/main/io/osd.c **** #endif
 101:../cleanflight/src/main/io/osd.c **** 
 102:../cleanflight/src/main/io/osd.c **** #define VIDEO_BUFFER_CHARS_PAL    480
 103:../cleanflight/src/main/io/osd.c **** #define FULL_CIRCLE 360
 104:../cleanflight/src/main/io/osd.c **** 
 105:../cleanflight/src/main/io/osd.c **** const char * const osdTimerSourceNames[] = {
 106:../cleanflight/src/main/io/osd.c ****     "ON TIME  ",
 107:../cleanflight/src/main/io/osd.c ****     "TOTAL ARM",
 108:../cleanflight/src/main/io/osd.c ****     "LAST ARM "
 109:../cleanflight/src/main/io/osd.c **** };
 110:../cleanflight/src/main/io/osd.c **** 
 111:../cleanflight/src/main/io/osd.c **** // Blink control
 112:../cleanflight/src/main/io/osd.c **** 
 113:../cleanflight/src/main/io/osd.c **** static bool blinkState = true;
 114:../cleanflight/src/main/io/osd.c **** static bool showVisualBeeper = false;
 115:../cleanflight/src/main/io/osd.c **** 
 116:../cleanflight/src/main/io/osd.c **** static uint32_t blinkBits[(OSD_ITEM_COUNT + 31)/32];
 117:../cleanflight/src/main/io/osd.c **** #define SET_BLINK(item) (blinkBits[(item) / 32] |= (1 << ((item) % 32)))
 118:../cleanflight/src/main/io/osd.c **** #define CLR_BLINK(item) (blinkBits[(item) / 32] &= ~(1 << ((item) % 32)))
 119:../cleanflight/src/main/io/osd.c **** #define IS_BLINK(item) (blinkBits[(item) / 32] & (1 << ((item) % 32)))
 120:../cleanflight/src/main/io/osd.c **** #define BLINK(item) (IS_BLINK(item) && blinkState)
 121:../cleanflight/src/main/io/osd.c **** 
 122:../cleanflight/src/main/io/osd.c **** // Things in both OSD and CMS
 123:../cleanflight/src/main/io/osd.c **** 
 124:../cleanflight/src/main/io/osd.c **** #define IS_HI(X)  (rcData[X] > 1750)
 125:../cleanflight/src/main/io/osd.c **** #define IS_LO(X)  (rcData[X] < 1250)
 126:../cleanflight/src/main/io/osd.c **** #define IS_MID(X) (rcData[X] > 1250 && rcData[X] < 1750)
 127:../cleanflight/src/main/io/osd.c **** 
 128:../cleanflight/src/main/io/osd.c **** static timeUs_t flyTime = 0;
 129:../cleanflight/src/main/io/osd.c **** 
 130:../cleanflight/src/main/io/osd.c **** typedef struct statistic_s {
 131:../cleanflight/src/main/io/osd.c ****     timeUs_t armed_time;
 132:../cleanflight/src/main/io/osd.c ****     int16_t max_speed;
 133:../cleanflight/src/main/io/osd.c ****     int16_t min_voltage; // /10
 134:../cleanflight/src/main/io/osd.c ****     int16_t max_current; // /10
 135:../cleanflight/src/main/io/osd.c ****     int16_t min_rssi;
 136:../cleanflight/src/main/io/osd.c ****     int32_t max_altitude;
 137:../cleanflight/src/main/io/osd.c ****     int16_t max_distance;
 138:../cleanflight/src/main/io/osd.c **** } statistic_t;
 139:../cleanflight/src/main/io/osd.c **** 
 140:../cleanflight/src/main/io/osd.c **** static statistic_t stats;
 141:../cleanflight/src/main/io/osd.c **** 
 142:../cleanflight/src/main/io/osd.c **** timeUs_t resumeRefreshAt = 0;
 143:../cleanflight/src/main/io/osd.c **** #define REFRESH_1S    1000 * 1000
 144:../cleanflight/src/main/io/osd.c **** 
 145:../cleanflight/src/main/io/osd.c **** static uint8_t armState;
 146:../cleanflight/src/main/io/osd.c **** static bool lastArmState;
 147:../cleanflight/src/main/io/osd.c **** 
 148:../cleanflight/src/main/io/osd.c **** static displayPort_t *osdDisplayPort;
 149:../cleanflight/src/main/io/osd.c **** 
 150:../cleanflight/src/main/io/osd.c **** #ifdef USE_ESC_SENSOR
 151:../cleanflight/src/main/io/osd.c **** static escSensorData_t *escDataCombined;
 152:../cleanflight/src/main/io/osd.c **** #endif
 153:../cleanflight/src/main/io/osd.c **** 
 154:../cleanflight/src/main/io/osd.c **** #define AH_SYMBOL_COUNT 9
 155:../cleanflight/src/main/io/osd.c **** #define AH_SIDEBAR_WIDTH_POS 7
 156:../cleanflight/src/main/io/osd.c **** #define AH_SIDEBAR_HEIGHT_POS 3
 157:../cleanflight/src/main/io/osd.c **** 
 158:../cleanflight/src/main/io/osd.c **** static const char compassBar[] = {
 159:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_W,
 160:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_LINE, SYM_HEADING_DIVIDED_LINE, SYM_HEADING_LINE,
 161:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_N,
 162:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_LINE, SYM_HEADING_DIVIDED_LINE, SYM_HEADING_LINE,
 163:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_E,
 164:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_LINE, SYM_HEADING_DIVIDED_LINE, SYM_HEADING_LINE,
 165:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_S,
 166:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_LINE, SYM_HEADING_DIVIDED_LINE, SYM_HEADING_LINE,
 167:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_W,
 168:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_LINE, SYM_HEADING_DIVIDED_LINE, SYM_HEADING_LINE,
 169:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_N,
 170:../cleanflight/src/main/io/osd.c ****   SYM_HEADING_LINE, SYM_HEADING_DIVIDED_LINE, SYM_HEADING_LINE
 171:../cleanflight/src/main/io/osd.c **** };
 172:../cleanflight/src/main/io/osd.c **** 
 173:../cleanflight/src/main/io/osd.c **** static const uint8_t osdElementDisplayOrder[] = {
 174:../cleanflight/src/main/io/osd.c ****     OSD_MAIN_BATT_VOLTAGE,
 175:../cleanflight/src/main/io/osd.c ****     OSD_RSSI_VALUE,
 176:../cleanflight/src/main/io/osd.c ****     OSD_CROSSHAIRS,
 177:../cleanflight/src/main/io/osd.c ****     OSD_HORIZON_SIDEBARS,
 178:../cleanflight/src/main/io/osd.c ****     OSD_ITEM_TIMER_1,
 179:../cleanflight/src/main/io/osd.c ****     OSD_ITEM_TIMER_2,
 180:../cleanflight/src/main/io/osd.c ****     OSD_REMAINING_TIME_ESTIMATE,
 181:../cleanflight/src/main/io/osd.c ****     OSD_FLYMODE,
 182:../cleanflight/src/main/io/osd.c ****     OSD_THROTTLE_POS,
 183:../cleanflight/src/main/io/osd.c ****     OSD_VTX_CHANNEL,
 184:../cleanflight/src/main/io/osd.c ****     OSD_CURRENT_DRAW,
 185:../cleanflight/src/main/io/osd.c ****     OSD_MAH_DRAWN,
 186:../cleanflight/src/main/io/osd.c ****     OSD_CRAFT_NAME,
 187:../cleanflight/src/main/io/osd.c ****     OSD_ALTITUDE,
 188:../cleanflight/src/main/io/osd.c ****     OSD_ROLL_PIDS,
 189:../cleanflight/src/main/io/osd.c ****     OSD_PITCH_PIDS,
 190:../cleanflight/src/main/io/osd.c ****     OSD_YAW_PIDS,
 191:../cleanflight/src/main/io/osd.c ****     OSD_POWER,
 192:../cleanflight/src/main/io/osd.c ****     OSD_PIDRATE_PROFILE,
 193:../cleanflight/src/main/io/osd.c ****     OSD_WARNINGS,
 194:../cleanflight/src/main/io/osd.c ****     OSD_AVG_CELL_VOLTAGE,
 195:../cleanflight/src/main/io/osd.c ****     OSD_DEBUG,
 196:../cleanflight/src/main/io/osd.c ****     OSD_PITCH_ANGLE,
 197:../cleanflight/src/main/io/osd.c ****     OSD_ROLL_ANGLE,
 198:../cleanflight/src/main/io/osd.c ****     OSD_MAIN_BATT_USAGE,
 199:../cleanflight/src/main/io/osd.c ****     OSD_DISARMED,
 200:../cleanflight/src/main/io/osd.c ****     OSD_NUMERICAL_HEADING,
 201:../cleanflight/src/main/io/osd.c ****     OSD_NUMERICAL_VARIO,
 202:../cleanflight/src/main/io/osd.c ****     OSD_COMPASS_BAR,
 203:../cleanflight/src/main/io/osd.c ****     OSD_ANTI_GRAVITY
 204:../cleanflight/src/main/io/osd.c **** };
 205:../cleanflight/src/main/io/osd.c **** 
 206:../cleanflight/src/main/io/osd.c **** PG_REGISTER_WITH_RESET_FN(osdConfig_t, osdConfig, PG_OSD_CONFIG, 3);
 207:../cleanflight/src/main/io/osd.c **** 
 208:../cleanflight/src/main/io/osd.c **** /**
 209:../cleanflight/src/main/io/osd.c ****  * Gets the correct altitude symbol for the current unit system
 210:../cleanflight/src/main/io/osd.c ****  */
 211:../cleanflight/src/main/io/osd.c **** static char osdGetMetersToSelectedUnitSymbol(void)
 212:../cleanflight/src/main/io/osd.c **** {
 518              	 .loc 8 212 0
 519              	 .cfi_startproc
 520              	 
 521              	 
 522 0000 80B5     	 push {r7,lr}
 523              	.LCFI36:
 524              	 .cfi_def_cfa_offset 8
 525              	 .cfi_offset 7,-8
 526              	 .cfi_offset 14,-4
 527 0002 00AF     	 add r7,sp,#0
 528              	.LCFI37:
 529              	 .cfi_def_cfa_register 7
 213:../cleanflight/src/main/io/osd.c ****     switch (osdConfig()->units) {
 530              	 .loc 8 213 0
 531 0004 FFF7FEFF 	 bl osdConfig
 532 0008 0346     	 mov r3,r0
 533 000a 93F85B30 	 ldrb r3,[r3,#91]
 534 000e 002B     	 cmp r3,#0
 535 0010 01D1     	 bne .L35
 214:../cleanflight/src/main/io/osd.c ****     case OSD_UNIT_IMPERIAL:
 215:../cleanflight/src/main/io/osd.c ****         return SYM_FT;
 536              	 .loc 8 215 0
 537 0012 0F23     	 movs r3,#15
 538 0014 00E0     	 b .L34
 539              	.L35:
 216:../cleanflight/src/main/io/osd.c ****     default:
 217:../cleanflight/src/main/io/osd.c ****         return SYM_M;
 540              	 .loc 8 217 0
 541 0016 0C23     	 movs r3,#12
 542              	.L34:
 218:../cleanflight/src/main/io/osd.c ****     }
 219:../cleanflight/src/main/io/osd.c **** }
 543              	 .loc 8 219 0
 544 0018 1846     	 mov r0,r3
 545 001a 80BD     	 pop {r7,pc}
 546              	 .cfi_endproc
 547              	.LFE597:
 549              	 .section .text.osdGetBatteryAverageCellVoltage,"ax",%progbits
 550              	 .align 2
 551              	 .thumb
 552              	 .thumb_func
 554              	osdGetBatteryAverageCellVoltage:
 555              	.LFB598:
 220:../cleanflight/src/main/io/osd.c **** 
 221:../cleanflight/src/main/io/osd.c **** /**
 222:../cleanflight/src/main/io/osd.c ****  * Gets average battery cell voltage in 0.01V units.
 223:../cleanflight/src/main/io/osd.c ****  */
 224:../cleanflight/src/main/io/osd.c **** static int osdGetBatteryAverageCellVoltage(void)
 225:../cleanflight/src/main/io/osd.c **** {
 556              	 .loc 8 225 0
 557              	 .cfi_startproc
 558              	 
 559              	 
 560 0000 98B5     	 push {r3,r4,r7,lr}
 561              	.LCFI38:
 562              	 .cfi_def_cfa_offset 16
 563              	 .cfi_offset 3,-16
 564              	 .cfi_offset 4,-12
 565              	 .cfi_offset 7,-8
 566              	 .cfi_offset 14,-4
 567 0002 00AF     	 add r7,sp,#0
 568              	.LCFI39:
 569              	 .cfi_def_cfa_register 7
 226:../cleanflight/src/main/io/osd.c ****     return (getBatteryVoltage() * 10) / getBatteryCellCount();
 570              	 .loc 8 226 0
 571 0004 FFF7FEFF 	 bl getBatteryVoltage
 572 0008 0346     	 mov r3,r0
 573 000a 1A46     	 mov r2,r3
 574 000c 1346     	 mov r3,r2
 575 000e 9B00     	 lsls r3,r3,#2
 576 0010 1344     	 add r3,r3,r2
 577 0012 5B00     	 lsls r3,r3,#1
 578 0014 1C46     	 mov r4,r3
 579 0016 FFF7FEFF 	 bl getBatteryCellCount
 580 001a 0346     	 mov r3,r0
 581 001c 94FBF3F3 	 sdiv r3,r4,r3
 227:../cleanflight/src/main/io/osd.c **** }
 582              	 .loc 8 227 0
 583 0020 1846     	 mov r0,r3
 584 0022 98BD     	 pop {r3,r4,r7,pc}
 585              	 .cfi_endproc
 586              	.LFE598:
 588              	 .section .text.osdGetBatterySymbol,"ax",%progbits
 589              	 .align 2
 590              	 .thumb
 591              	 .thumb_func
 593              	osdGetBatterySymbol:
 594              	.LFB599:
 228:../cleanflight/src/main/io/osd.c **** 
 229:../cleanflight/src/main/io/osd.c **** static char osdGetBatterySymbol(int cellVoltage)
 230:../cleanflight/src/main/io/osd.c **** {
 595              	 .loc 8 230 0
 596              	 .cfi_startproc
 597              	 
 598              	 
 599 0000 90B5     	 push {r4,r7,lr}
 600              	.LCFI40:
 601              	 .cfi_def_cfa_offset 12
 602              	 .cfi_offset 4,-12
 603              	 .cfi_offset 7,-8
 604              	 .cfi_offset 14,-4
 605 0002 87B0     	 sub sp,sp,#28
 606              	.LCFI41:
 607              	 .cfi_def_cfa_offset 40
 608 0004 02AF     	 add r7,sp,#8
 609              	.LCFI42:
 610              	 .cfi_def_cfa 7,32
 611 0006 7860     	 str r0,[r7,#4]
 231:../cleanflight/src/main/io/osd.c ****     if (getBatteryState() == BATTERY_CRITICAL) {
 612              	 .loc 8 231 0
 613 0008 FFF7FEFF 	 bl getBatteryState
 614 000c 0346     	 mov r3,r0
 615 000e 022B     	 cmp r3,#2
 616 0010 01D1     	 bne .L39
 232:../cleanflight/src/main/io/osd.c ****         return SYM_MAIN_BATT; // FIXME: currently the BAT- symbol, ideally replace with a battery w
 617              	 .loc 8 232 0
 618 0012 9723     	 movs r3,#151
 619 0014 26E0     	 b .L40
 620              	.L39:
 621              	.LBB2:
 233:../cleanflight/src/main/io/osd.c ****     } else {
 234:../cleanflight/src/main/io/osd.c ****         // Calculate a symbol offset using cell voltage over full cell voltage range
 235:../cleanflight/src/main/io/osd.c ****         const int symOffset = scaleRange(cellVoltage, batteryConfig()->vbatmincellvoltage * 10, bat
 622              	 .loc 8 235 0
 623 0016 FFF7FEFF 	 bl batteryConfig
 624 001a 0346     	 mov r3,r0
 625 001c 5B78     	 ldrb r3,[r3,#1]
 626 001e 1A46     	 mov r2,r3
 627 0020 1346     	 mov r3,r2
 628 0022 9B00     	 lsls r3,r3,#2
 629 0024 1344     	 add r3,r3,r2
 630 0026 5B00     	 lsls r3,r3,#1
 631 0028 1C46     	 mov r4,r3
 632 002a FFF7FEFF 	 bl batteryConfig
 633 002e 0346     	 mov r3,r0
 634 0030 1B78     	 ldrb r3,[r3]
 635 0032 1A46     	 mov r2,r3
 636 0034 1346     	 mov r3,r2
 637 0036 9B00     	 lsls r3,r3,#2
 638 0038 1344     	 add r3,r3,r2
 639 003a 5B00     	 lsls r3,r3,#1
 640 003c 1A46     	 mov r2,r3
 641 003e 0723     	 movs r3,#7
 642 0040 0093     	 str r3,[sp]
 643 0042 7868     	 ldr r0,[r7,#4]
 644 0044 2146     	 mov r1,r4
 645 0046 0023     	 movs r3,#0
 646 0048 FFF7FEFF 	 bl scaleRange
 647 004c F860     	 str r0,[r7,#12]
 236:../cleanflight/src/main/io/osd.c ****         return SYM_BATT_EMPTY - constrain(symOffset, 0, 6);
 648              	 .loc 8 236 0
 649 004e F868     	 ldr r0,[r7,#12]
 650 0050 0021     	 movs r1,#0
 651 0052 0622     	 movs r2,#6
 652 0054 FFF7FEFF 	 bl constrain
 653 0058 0346     	 mov r3,r0
 654 005a DAB2     	 uxtb r2,r3
 655 005c 6FF06903 	 mvn r3,#105
 656 0060 9B1A     	 subs r3,r3,r2
 657 0062 DBB2     	 uxtb r3,r3
 658              	.L40:
 659              	.LBE2:
 237:../cleanflight/src/main/io/osd.c ****     }
 238:../cleanflight/src/main/io/osd.c **** }
 660              	 .loc 8 238 0
 661 0064 1846     	 mov r0,r3
 662 0066 1437     	 adds r7,r7,#20
 663              	.LCFI43:
 664              	 .cfi_def_cfa_offset 12
 665 0068 BD46     	 mov sp,r7
 666              	.LCFI44:
 667              	 .cfi_def_cfa_register 13
 668              	 
 669 006a 90BD     	 pop {r4,r7,pc}
 670              	 .cfi_endproc
 671              	.LFE599:
 673              	 .section .text.osdGetMetersToSelectedUnit,"ax",%progbits
 674              	 .align 2
 675              	 .thumb
 676              	 .thumb_func
 678              	osdGetMetersToSelectedUnit:
 679              	.LFB600:
 239:../cleanflight/src/main/io/osd.c **** 
 240:../cleanflight/src/main/io/osd.c **** /**
 241:../cleanflight/src/main/io/osd.c ****  * Converts altitude based on the current unit system.
 242:../cleanflight/src/main/io/osd.c ****  * @param meters Value in meters to convert
 243:../cleanflight/src/main/io/osd.c ****  */
 244:../cleanflight/src/main/io/osd.c **** static int32_t osdGetMetersToSelectedUnit(int32_t meters)
 245:../cleanflight/src/main/io/osd.c **** {
 680              	 .loc 8 245 0
 681              	 .cfi_startproc
 682              	 
 683              	 
 684 0000 80B5     	 push {r7,lr}
 685              	.LCFI45:
 686              	 .cfi_def_cfa_offset 8
 687              	 .cfi_offset 7,-8
 688              	 .cfi_offset 14,-4
 689 0002 82B0     	 sub sp,sp,#8
 690              	.LCFI46:
 691              	 .cfi_def_cfa_offset 16
 692 0004 00AF     	 add r7,sp,#0
 693              	.LCFI47:
 694              	 .cfi_def_cfa_register 7
 695 0006 7860     	 str r0,[r7,#4]
 246:../cleanflight/src/main/io/osd.c ****     switch (osdConfig()->units) {
 696              	 .loc 8 246 0
 697 0008 FFF7FEFF 	 bl osdConfig
 698 000c 0346     	 mov r3,r0
 699 000e 93F85B30 	 ldrb r3,[r3,#91]
 700 0012 002B     	 cmp r3,#0
 701 0014 0BD1     	 bne .L45
 247:../cleanflight/src/main/io/osd.c ****     case OSD_UNIT_IMPERIAL:
 248:../cleanflight/src/main/io/osd.c ****         return (meters * 328) / 100; // Convert to feet / 100
 702              	 .loc 8 248 0
 703 0016 7B68     	 ldr r3,[r7,#4]
 704 0018 4FF4A472 	 mov r2,#328
 705 001c 02FB03F3 	 mul r3,r2,r3
 706 0020 054A     	 ldr r2,.L46
 707 0022 82FB0312 	 smull r1,r2,r2,r3
 708 0026 5211     	 asrs r2,r2,#5
 709 0028 DB17     	 asrs r3,r3,#31
 710 002a D31A     	 subs r3,r2,r3
 711 002c 00E0     	 b .L44
 712              	.L45:
 249:../cleanflight/src/main/io/osd.c ****     default:
 250:../cleanflight/src/main/io/osd.c ****         return meters;               // Already in metre / 100
 713              	 .loc 8 250 0
 714 002e 7B68     	 ldr r3,[r7,#4]
 715              	.L44:
 251:../cleanflight/src/main/io/osd.c ****     }
 252:../cleanflight/src/main/io/osd.c **** }
 716              	 .loc 8 252 0
 717 0030 1846     	 mov r0,r3
 718 0032 0837     	 adds r7,r7,#8
 719              	.LCFI48:
 720              	 .cfi_def_cfa_offset 8
 721 0034 BD46     	 mov sp,r7
 722              	.LCFI49:
 723              	 .cfi_def_cfa_register 13
 724              	 
 725 0036 80BD     	 pop {r7,pc}
 726              	.L47:
 727              	 .align 2
 728              	.L46:
 729 0038 1F85EB51 	 .word 1374389535
 730              	 .cfi_endproc
 731              	.LFE600:
 733              	 .section .rodata
 734 0022 0000     	 .align 2
 735              	.LC3:
 736 0024 25356420 	 .ascii "%5d %c\000"
 736      256300
 737              	 .section .text.osdFormatAltitudeString,"ax",%progbits
 738              	 .align 2
 739              	 .thumb
 740              	 .thumb_func
 742              	osdFormatAltitudeString:
 743              	.LFB601:
 253:../cleanflight/src/main/io/osd.c **** 
 254:../cleanflight/src/main/io/osd.c **** #if defined(USE_ADC_INTERNAL) || defined(USE_ESC_SENSOR)
 255:../cleanflight/src/main/io/osd.c **** STATIC_UNIT_TESTED int osdConvertTemperatureToSelectedUnit(int tempInDeciDegrees)
 256:../cleanflight/src/main/io/osd.c **** {
 257:../cleanflight/src/main/io/osd.c ****     switch (osdConfig()->units) {
 258:../cleanflight/src/main/io/osd.c ****     case OSD_UNIT_IMPERIAL:
 259:../cleanflight/src/main/io/osd.c ****         return ((tempInDeciDegrees * 9) / 5) + 320;
 260:../cleanflight/src/main/io/osd.c ****     default:
 261:../cleanflight/src/main/io/osd.c ****         return tempInDeciDegrees;
 262:../cleanflight/src/main/io/osd.c ****     }
 263:../cleanflight/src/main/io/osd.c **** }
 264:../cleanflight/src/main/io/osd.c **** 
 265:../cleanflight/src/main/io/osd.c **** static char osdGetTemperatureSymbolForSelectedUnit(void)
 266:../cleanflight/src/main/io/osd.c **** {
 267:../cleanflight/src/main/io/osd.c ****     switch (osdConfig()->units) {
 268:../cleanflight/src/main/io/osd.c ****     case OSD_UNIT_IMPERIAL:
 269:../cleanflight/src/main/io/osd.c ****         return 'F';
 270:../cleanflight/src/main/io/osd.c ****     default:
 271:../cleanflight/src/main/io/osd.c ****         return 'C';
 272:../cleanflight/src/main/io/osd.c ****     }
 273:../cleanflight/src/main/io/osd.c **** }
 274:../cleanflight/src/main/io/osd.c **** #endif
 275:../cleanflight/src/main/io/osd.c **** 
 276:../cleanflight/src/main/io/osd.c **** static void osdFormatAltitudeString(char * buff, int altitude)
 277:../cleanflight/src/main/io/osd.c **** {
 744              	 .loc 8 277 0
 745              	 .cfi_startproc
 746              	 
 747              	 
 748 0000 80B5     	 push {r7,lr}
 749              	.LCFI50:
 750              	 .cfi_def_cfa_offset 8
 751              	 .cfi_offset 7,-8
 752              	 .cfi_offset 14,-4
 753 0002 84B0     	 sub sp,sp,#16
 754              	.LCFI51:
 755              	 .cfi_def_cfa_offset 24
 756 0004 00AF     	 add r7,sp,#0
 757              	.LCFI52:
 758              	 .cfi_def_cfa_register 7
 759 0006 7860     	 str r0,[r7,#4]
 760 0008 3960     	 str r1,[r7]
 278:../cleanflight/src/main/io/osd.c ****     const int alt = osdGetMetersToSelectedUnit(altitude) / 10;
 761              	 .loc 8 278 0
 762 000a 3868     	 ldr r0,[r7]
 763 000c FFF7FEFF 	 bl osdGetMetersToSelectedUnit
 764 0010 0346     	 mov r3,r0
 765 0012 0D4A     	 ldr r2,.L49
 766 0014 82FB0312 	 smull r1,r2,r2,r3
 767 0018 9210     	 asrs r2,r2,#2
 768 001a DB17     	 asrs r3,r3,#31
 769 001c D31A     	 subs r3,r2,r3
 770 001e FB60     	 str r3,[r7,#12]
 279:../cleanflight/src/main/io/osd.c **** 
 280:../cleanflight/src/main/io/osd.c ****     tfp_sprintf(buff, "%5d %c", alt, osdGetMetersToSelectedUnitSymbol());
 771              	 .loc 8 280 0
 772 0020 FFF7FEFF 	 bl osdGetMetersToSelectedUnitSymbol
 773 0024 0346     	 mov r3,r0
 774 0026 7868     	 ldr r0,[r7,#4]
 775 0028 0849     	 ldr r1,.L49+4
 776 002a FA68     	 ldr r2,[r7,#12]
 777 002c FFF7FEFF 	 bl tfp_sprintf
 281:../cleanflight/src/main/io/osd.c ****     buff[5] = buff[4];
 778              	 .loc 8 281 0
 779 0030 7B68     	 ldr r3,[r7,#4]
 780 0032 0533     	 adds r3,r3,#5
 781 0034 7A68     	 ldr r2,[r7,#4]
 782 0036 1279     	 ldrb r2,[r2,#4]
 783 0038 1A70     	 strb r2,[r3]
 282:../cleanflight/src/main/io/osd.c ****     buff[4] = '.';
 784              	 .loc 8 282 0
 785 003a 7B68     	 ldr r3,[r7,#4]
 786 003c 0433     	 adds r3,r3,#4
 787 003e 2E22     	 movs r2,#46
 788 0040 1A70     	 strb r2,[r3]
 283:../cleanflight/src/main/io/osd.c **** }
 789              	 .loc 8 283 0
 790 0042 1037     	 adds r7,r7,#16
 791              	.LCFI53:
 792              	 .cfi_def_cfa_offset 8
 793 0044 BD46     	 mov sp,r7
 794              	.LCFI54:
 795              	 .cfi_def_cfa_register 13
 796              	 
 797 0046 80BD     	 pop {r7,pc}
 798              	.L50:
 799              	 .align 2
 800              	.L49:
 801 0048 67666666 	 .word 1717986919
 802 004c 24000000 	 .word .LC3
 803              	 .cfi_endproc
 804              	.LFE601:
 806              	 .section .rodata
 807 002b 00       	 .align 2
 808              	.LC4:
 809 002c 25732025 	 .ascii "%s %3d %3d %3d\000"
 809      33642025 
 809      33642025 
 809      336400
 810              	 .section .text.osdFormatPID,"ax",%progbits
 811              	 .align 2
 812              	 .thumb
 813              	 .thumb_func
 815              	osdFormatPID:
 816              	.LFB602:
 284:../cleanflight/src/main/io/osd.c **** 
 285:../cleanflight/src/main/io/osd.c **** static void osdFormatPID(char * buff, const char * label, const pidf_t * pid)
 286:../cleanflight/src/main/io/osd.c **** {
 817              	 .loc 8 286 0
 818              	 .cfi_startproc
 819              	 
 820              	 
 821 0000 90B5     	 push {r4,r7,lr}
 822              	.LCFI55:
 823              	 .cfi_def_cfa_offset 12
 824              	 .cfi_offset 4,-12
 825              	 .cfi_offset 7,-8
 826              	 .cfi_offset 14,-4
 827 0002 87B0     	 sub sp,sp,#28
 828              	.LCFI56:
 829              	 .cfi_def_cfa_offset 40
 830 0004 02AF     	 add r7,sp,#8
 831              	.LCFI57:
 832              	 .cfi_def_cfa 7,32
 833 0006 F860     	 str r0,[r7,#12]
 834 0008 B960     	 str r1,[r7,#8]
 835 000a 7A60     	 str r2,[r7,#4]
 287:../cleanflight/src/main/io/osd.c ****     tfp_sprintf(buff, "%s %3d %3d %3d", label, pid->P, pid->I, pid->D);
 836              	 .loc 8 287 0
 837 000c 7B68     	 ldr r3,[r7,#4]
 838 000e 1B78     	 ldrb r3,[r3]
 839 0010 1C46     	 mov r4,r3
 840 0012 7B68     	 ldr r3,[r7,#4]
 841 0014 5B78     	 ldrb r3,[r3,#1]
 842 0016 1A46     	 mov r2,r3
 843 0018 7B68     	 ldr r3,[r7,#4]
 844 001a 9B78     	 ldrb r3,[r3,#2]
 845 001c 0092     	 str r2,[sp]
 846 001e 0193     	 str r3,[sp,#4]
 847 0020 F868     	 ldr r0,[r7,#12]
 848 0022 0449     	 ldr r1,.L52
 849 0024 BA68     	 ldr r2,[r7,#8]
 850 0026 2346     	 mov r3,r4
 851 0028 FFF7FEFF 	 bl tfp_sprintf
 288:../cleanflight/src/main/io/osd.c **** }
 852              	 .loc 8 288 0
 853 002c 1437     	 adds r7,r7,#20
 854              	.LCFI58:
 855              	 .cfi_def_cfa_offset 12
 856 002e BD46     	 mov sp,r7
 857              	.LCFI59:
 858              	 .cfi_def_cfa_register 13
 859              	 
 860 0030 90BD     	 pop {r4,r7,pc}
 861              	.L53:
 862 0032 00BF     	 .align 2
 863              	.L52:
 864 0034 2C000000 	 .word .LC4
 865              	 .cfi_endproc
 866              	.LFE602:
 868              	 .section .text.osdGetHeadingIntoDiscreteDirections,"ax",%progbits
 869              	 .align 2
 870              	 .thumb
 871              	 .thumb_func
 873              	osdGetHeadingIntoDiscreteDirections:
 874              	.LFB603:
 289:../cleanflight/src/main/io/osd.c **** 
 290:../cleanflight/src/main/io/osd.c **** static uint8_t osdGetHeadingIntoDiscreteDirections(int heading, unsigned directions)
 291:../cleanflight/src/main/io/osd.c **** {
 875              	 .loc 8 291 0
 876              	 .cfi_startproc
 877              	 
 878              	 
 879              	 
 880 0000 80B4     	 push {r7}
 881              	.LCFI60:
 882              	 .cfi_def_cfa_offset 4
 883              	 .cfi_offset 7,-4
 884 0002 85B0     	 sub sp,sp,#20
 885              	.LCFI61:
 886              	 .cfi_def_cfa_offset 24
 887 0004 00AF     	 add r7,sp,#0
 888              	.LCFI62:
 889              	 .cfi_def_cfa_register 7
 890 0006 7860     	 str r0,[r7,#4]
 891 0008 3960     	 str r1,[r7]
 292:../cleanflight/src/main/io/osd.c ****     heading += FULL_CIRCLE;  // Ensure positive value
 892              	 .loc 8 292 0
 893 000a 7B68     	 ldr r3,[r7,#4]
 894 000c 03F5B473 	 add r3,r3,#360
 895 0010 7B60     	 str r3,[r7,#4]
 293:../cleanflight/src/main/io/osd.c **** 
 294:../cleanflight/src/main/io/osd.c ****     // Split input heading 0..359 into sectors 0..(directions-1), but offset
 295:../cleanflight/src/main/io/osd.c ****     // by half a sector so that sector 0 gets centered around heading 0.
 296:../cleanflight/src/main/io/osd.c ****     // We multiply heading by directions to not loose precision in divisions
 297:../cleanflight/src/main/io/osd.c ****     // In this way each segment will be a FULL_CIRCLE length
 298:../cleanflight/src/main/io/osd.c ****     int direction = (heading * directions + FULL_CIRCLE / 2) /  FULL_CIRCLE; // scale with rounding
 896              	 .loc 8 298 0
 897 0012 7B68     	 ldr r3,[r7,#4]
 898 0014 3A68     	 ldr r2,[r7]
 899 0016 02FB03F3 	 mul r3,r2,r3
 900 001a B433     	 adds r3,r3,#180
 901 001c DB08     	 lsrs r3,r3,#3
 902 001e 0B4A     	 ldr r2,.L56
 903 0020 A2FB0323 	 umull r2,r3,r2,r3
 904 0024 9B08     	 lsrs r3,r3,#2
 905 0026 FB60     	 str r3,[r7,#12]
 299:../cleanflight/src/main/io/osd.c ****     direction %= directions; // normalize
 906              	 .loc 8 299 0
 907 0028 FB68     	 ldr r3,[r7,#12]
 908 002a 3A68     	 ldr r2,[r7]
 909 002c B3FBF2F2 	 udiv r2,r3,r2
 910 0030 3968     	 ldr r1,[r7]
 911 0032 01FB02F2 	 mul r2,r1,r2
 912 0036 9B1A     	 subs r3,r3,r2
 913 0038 FB60     	 str r3,[r7,#12]
 300:../cleanflight/src/main/io/osd.c **** 
 301:../cleanflight/src/main/io/osd.c ****     return direction; // return segment number
 914              	 .loc 8 301 0
 915 003a FB68     	 ldr r3,[r7,#12]
 916 003c DBB2     	 uxtb r3,r3
 302:../cleanflight/src/main/io/osd.c **** }
 917              	 .loc 8 302 0
 918 003e 1846     	 mov r0,r3
 919 0040 1437     	 adds r7,r7,#20
 920              	.LCFI63:
 921              	 .cfi_def_cfa_offset 4
 922 0042 BD46     	 mov sp,r7
 923              	.LCFI64:
 924              	 .cfi_def_cfa_register 13
 925              	 
 926 0044 5DF8047B 	 ldr r7,[sp],#4
 927              	.LCFI65:
 928              	 .cfi_restore 7
 929              	 .cfi_def_cfa_offset 0
 930 0048 7047     	 bx lr
 931              	.L57:
 932 004a 00BF     	 .align 2
 933              	.L56:
 934 004c 176CC116 	 .word 381774871
 935              	 .cfi_endproc
 936              	.LFE603:
 938              	 .section .text.osdGetDirectionSymbolFromHeading,"ax",%progbits
 939              	 .align 2
 940              	 .thumb
 941              	 .thumb_func
 943              	osdGetDirectionSymbolFromHeading:
 944              	.LFB604:
 303:../cleanflight/src/main/io/osd.c **** 
 304:../cleanflight/src/main/io/osd.c **** static uint8_t osdGetDirectionSymbolFromHeading(int heading)
 305:../cleanflight/src/main/io/osd.c **** {
 945              	 .loc 8 305 0
 946              	 .cfi_startproc
 947              	 
 948              	 
 949 0000 80B5     	 push {r7,lr}
 950              	.LCFI66:
 951              	 .cfi_def_cfa_offset 8
 952              	 .cfi_offset 7,-8
 953              	 .cfi_offset 14,-4
 954 0002 82B0     	 sub sp,sp,#8
 955              	.LCFI67:
 956              	 .cfi_def_cfa_offset 16
 957 0004 00AF     	 add r7,sp,#0
 958              	.LCFI68:
 959              	 .cfi_def_cfa_register 7
 960 0006 7860     	 str r0,[r7,#4]
 306:../cleanflight/src/main/io/osd.c ****     heading = osdGetHeadingIntoDiscreteDirections(heading, 16);
 961              	 .loc 8 306 0
 962 0008 7868     	 ldr r0,[r7,#4]
 963 000a 1021     	 movs r1,#16
 964 000c FFF7FEFF 	 bl osdGetHeadingIntoDiscreteDirections
 965 0010 0346     	 mov r3,r0
 966 0012 7B60     	 str r3,[r7,#4]
 307:../cleanflight/src/main/io/osd.c **** 
 308:../cleanflight/src/main/io/osd.c ****     // Now heading has a heading with Up=0, Right=4, Down=8 and Left=12
 309:../cleanflight/src/main/io/osd.c ****     // Our symbols are Down=0, Right=4, Up=8 and Left=12
 310:../cleanflight/src/main/io/osd.c ****     // There're 16 arrow symbols. Transform it.
 311:../cleanflight/src/main/io/osd.c ****     heading = 16 - heading;
 967              	 .loc 8 311 0
 968 0014 7B68     	 ldr r3,[r7,#4]
 969 0016 C3F11003 	 rsb r3,r3,#16
 970 001a 7B60     	 str r3,[r7,#4]
 312:../cleanflight/src/main/io/osd.c ****     heading = (heading + 8) % 16;
 971              	 .loc 8 312 0
 972 001c 7B68     	 ldr r3,[r7,#4]
 973 001e 03F10802 	 add r2,r3,#8
 974 0022 084B     	 ldr r3,.L61
 975 0024 1340     	 ands r3,r3,r2
 976 0026 002B     	 cmp r3,#0
 977 0028 03DA     	 bge .L59
 978 002a 013B     	 subs r3,r3,#1
 979 002c 63F00F03 	 orn r3,r3,#15
 980 0030 0133     	 adds r3,r3,#1
 981              	.L59:
 982 0032 7B60     	 str r3,[r7,#4]
 313:../cleanflight/src/main/io/osd.c **** 
 314:../cleanflight/src/main/io/osd.c ****     return SYM_ARROW_SOUTH + heading;
 983              	 .loc 8 314 0
 984 0034 7B68     	 ldr r3,[r7,#4]
 985 0036 DBB2     	 uxtb r3,r3
 986 0038 6033     	 adds r3,r3,#96
 987 003a DBB2     	 uxtb r3,r3
 315:../cleanflight/src/main/io/osd.c **** }
 988              	 .loc 8 315 0
 989 003c 1846     	 mov r0,r3
 990 003e 0837     	 adds r7,r7,#8
 991              	.LCFI69:
 992              	 .cfi_def_cfa_offset 8
 993 0040 BD46     	 mov sp,r7
 994              	.LCFI70:
 995              	 .cfi_def_cfa_register 13
 996              	 
 997 0042 80BD     	 pop {r7,pc}
 998              	.L62:
 999              	 .align 2
 1000              	.L61:
 1001 0044 0F000080 	 .word -2147483633
 1002              	 .cfi_endproc
 1003              	.LFE604:
 1005              	 .section .text.osdGetTimerSymbol,"ax",%progbits
 1006              	 .align 2
 1007              	 .thumb
 1008              	 .thumb_func
 1010              	osdGetTimerSymbol:
 1011              	.LFB605:
 316:../cleanflight/src/main/io/osd.c **** 
 317:../cleanflight/src/main/io/osd.c **** static char osdGetTimerSymbol(osd_timer_source_e src)
 318:../cleanflight/src/main/io/osd.c **** {
 1012              	 .loc 8 318 0
 1013              	 .cfi_startproc
 1014              	 
 1015              	 
 1016              	 
 1017 0000 80B4     	 push {r7}
 1018              	.LCFI71:
 1019              	 .cfi_def_cfa_offset 4
 1020              	 .cfi_offset 7,-4
 1021 0002 83B0     	 sub sp,sp,#12
 1022              	.LCFI72:
 1023              	 .cfi_def_cfa_offset 16
 1024 0004 00AF     	 add r7,sp,#0
 1025              	.LCFI73:
 1026              	 .cfi_def_cfa_register 7
 1027 0006 0346     	 mov r3,r0
 1028 0008 FB71     	 strb r3,[r7,#7]
 319:../cleanflight/src/main/io/osd.c ****     switch (src) {
 1029              	 .loc 8 319 0
 1030 000a FB79     	 ldrb r3,[r7,#7]
 1031 000c 002B     	 cmp r3,#0
 1032 000e 04D0     	 beq .L65
 1033 0010 002B     	 cmp r3,#0
 1034 0012 06DB     	 blt .L64
 1035 0014 022B     	 cmp r3,#2
 1036 0016 04DC     	 bgt .L64
 1037 0018 01E0     	 b .L68
 1038              	.L65:
 320:../cleanflight/src/main/io/osd.c ****     case OSD_TIMER_SRC_ON:
 321:../cleanflight/src/main/io/osd.c ****         return SYM_ON_M;
 1039              	 .loc 8 321 0
 1040 001a 9B23     	 movs r3,#155
 1041 001c 02E0     	 b .L67
 1042              	.L68:
 322:../cleanflight/src/main/io/osd.c ****     case OSD_TIMER_SRC_TOTAL_ARMED:
 323:../cleanflight/src/main/io/osd.c ****     case OSD_TIMER_SRC_LAST_ARMED:
 324:../cleanflight/src/main/io/osd.c ****         return SYM_FLY_M;
 1043              	 .loc 8 324 0
 1044 001e 9C23     	 movs r3,#156
 1045 0020 00E0     	 b .L67
 1046              	.L64:
 325:../cleanflight/src/main/io/osd.c ****     default:
 326:../cleanflight/src/main/io/osd.c ****         return ' ';
 1047              	 .loc 8 326 0
 1048 0022 2023     	 movs r3,#32
 1049              	.L67:
 327:../cleanflight/src/main/io/osd.c ****     }
 328:../cleanflight/src/main/io/osd.c **** }
 1050              	 .loc 8 328 0
 1051 0024 1846     	 mov r0,r3
 1052 0026 0C37     	 adds r7,r7,#12
 1053              	.LCFI74:
 1054              	 .cfi_def_cfa_offset 4
 1055 0028 BD46     	 mov sp,r7
 1056              	.LCFI75:
 1057              	 .cfi_def_cfa_register 13
 1058              	 
 1059 002a 5DF8047B 	 ldr r7,[sp],#4
 1060              	.LCFI76:
 1061              	 .cfi_restore 7
 1062              	 .cfi_def_cfa_offset 0
 1063 002e 7047     	 bx lr
 1064              	 .cfi_endproc
 1065              	.LFE605:
 1067              	 .section .text.osdGetTimerValue,"ax",%progbits
 1068              	 .align 2
 1069              	 .thumb
 1070              	 .thumb_func
 1072              	osdGetTimerValue:
 1073              	.LFB606:
 329:../cleanflight/src/main/io/osd.c **** 
 330:../cleanflight/src/main/io/osd.c **** static timeUs_t osdGetTimerValue(osd_timer_source_e src)
 331:../cleanflight/src/main/io/osd.c **** {
 1074              	 .loc 8 331 0
 1075              	 .cfi_startproc
 1076              	 
 1077              	 
 1078 0000 80B5     	 push {r7,lr}
 1079              	.LCFI77:
 1080              	 .cfi_def_cfa_offset 8
 1081              	 .cfi_offset 7,-8
 1082              	 .cfi_offset 14,-4
 1083 0002 82B0     	 sub sp,sp,#8
 1084              	.LCFI78:
 1085              	 .cfi_def_cfa_offset 16
 1086 0004 00AF     	 add r7,sp,#0
 1087              	.LCFI79:
 1088              	 .cfi_def_cfa_register 7
 1089 0006 0346     	 mov r3,r0
 1090 0008 FB71     	 strb r3,[r7,#7]
 332:../cleanflight/src/main/io/osd.c ****     switch (src) {
 1091              	 .loc 8 332 0
 1092 000a FB79     	 ldrb r3,[r7,#7]
 1093 000c 012B     	 cmp r3,#1
 1094 000e 07D0     	 beq .L71
 1095 0010 022B     	 cmp r3,#2
 1096 0012 08D0     	 beq .L72
 1097 0014 002B     	 cmp r3,#0
 1098 0016 09D1     	 bne .L75
 333:../cleanflight/src/main/io/osd.c ****     case OSD_TIMER_SRC_ON:
 334:../cleanflight/src/main/io/osd.c ****         return micros();
 1099              	 .loc 8 334 0
 1100 0018 FFF7FEFF 	 bl micros
 1101 001c 0346     	 mov r3,r0
 1102 001e 06E0     	 b .L74
 1103              	.L71:
 335:../cleanflight/src/main/io/osd.c ****     case OSD_TIMER_SRC_TOTAL_ARMED:
 336:../cleanflight/src/main/io/osd.c ****         return flyTime;
 1104              	 .loc 8 336 0
 1105 0020 054B     	 ldr r3,.L76
 1106 0022 1B68     	 ldr r3,[r3]
 1107 0024 03E0     	 b .L74
 1108              	.L72:
 337:../cleanflight/src/main/io/osd.c ****     case OSD_TIMER_SRC_LAST_ARMED:
 338:../cleanflight/src/main/io/osd.c ****         return stats.armed_time;
 1109              	 .loc 8 338 0
 1110 0026 054B     	 ldr r3,.L76+4
 1111 0028 1B68     	 ldr r3,[r3]
 1112 002a 00E0     	 b .L74
 1113              	.L75:
 339:../cleanflight/src/main/io/osd.c ****     default:
 340:../cleanflight/src/main/io/osd.c ****         return 0;
 1114              	 .loc 8 340 0
 1115 002c 0023     	 movs r3,#0
 1116              	.L74:
 341:../cleanflight/src/main/io/osd.c ****     }
 342:../cleanflight/src/main/io/osd.c **** }
 1117              	 .loc 8 342 0
 1118 002e 1846     	 mov r0,r3
 1119 0030 0837     	 adds r7,r7,#8
 1120              	.LCFI80:
 1121              	 .cfi_def_cfa_offset 8
 1122 0032 BD46     	 mov sp,r7
 1123              	.LCFI81:
 1124              	 .cfi_def_cfa_register 13
 1125              	 
 1126 0034 80BD     	 pop {r7,pc}
 1127              	.L77:
 1128 0036 00BF     	 .align 2
 1129              	.L76:
 1130 0038 00000000 	 .word flyTime
 1131 003c 00000000 	 .word stats
 1132              	 .cfi_endproc
 1133              	.LFE606:
 1135              	 .section .rodata
 1136 003b 00       	 .align 2
 1137              	.LC5:
 1138 003c 25303264 	 .ascii "%02d:%02d\000"
 1138      3A253032 
 1138      6400
 1139 0046 0000     	 .align 2
 1140              	.LC6:
 1141 0048 25303264 	 .ascii "%02d:%02d.%02d\000"
 1141      3A253032 
 1141      642E2530 
 1141      326400
 1142              	 .section .text.osdFormatTime,"ax",%progbits
 1143              	 .align 2
 1144              	 .thumb
 1145              	 .thumb_func
 1147              	osdFormatTime:
 1148              	.LFB607:
 343:../cleanflight/src/main/io/osd.c **** 
 344:../cleanflight/src/main/io/osd.c **** STATIC_UNIT_TESTED void osdFormatTime(char * buff, osd_timer_precision_e precision, timeUs_t time)
 345:../cleanflight/src/main/io/osd.c **** {
 1149              	 .loc 8 345 0
 1150              	 .cfi_startproc
 1151              	 
 1152              	 
 1153 0000 80B5     	 push {r7,lr}
 1154              	.LCFI82:
 1155              	 .cfi_def_cfa_offset 8
 1156              	 .cfi_offset 7,-8
 1157              	 .cfi_offset 14,-4
 1158 0002 8AB0     	 sub sp,sp,#40
 1159              	.LCFI83:
 1160              	 .cfi_def_cfa_offset 48
 1161 0004 02AF     	 add r7,sp,#8
 1162              	.LCFI84:
 1163              	 .cfi_def_cfa 7,40
 1164 0006 F860     	 str r0,[r7,#12]
 1165 0008 0B46     	 mov r3,r1
 1166 000a 7A60     	 str r2,[r7,#4]
 1167 000c FB72     	 strb r3,[r7,#11]
 346:../cleanflight/src/main/io/osd.c ****     int seconds = time / 1000000;
 1168              	 .loc 8 346 0
 1169 000e 7B68     	 ldr r3,[r7,#4]
 1170 0010 1F4A     	 ldr r2,.L82
 1171 0012 A2FB0323 	 umull r2,r3,r2,r3
 1172 0016 9B0C     	 lsrs r3,r3,#18
 1173 0018 FB61     	 str r3,[r7,#28]
 347:../cleanflight/src/main/io/osd.c ****     const int minutes = seconds / 60;
 1174              	 .loc 8 347 0
 1175 001a FB69     	 ldr r3,[r7,#28]
 1176 001c 1D4A     	 ldr r2,.L82+4
 1177 001e 82FB0312 	 smull r1,r2,r2,r3
 1178 0022 1A44     	 add r2,r2,r3
 1179 0024 5211     	 asrs r2,r2,#5
 1180 0026 DB17     	 asrs r3,r3,#31
 1181 0028 D31A     	 subs r3,r2,r3
 1182 002a BB61     	 str r3,[r7,#24]
 348:../cleanflight/src/main/io/osd.c ****     seconds = seconds % 60;
 1183              	 .loc 8 348 0
 1184 002c FA69     	 ldr r2,[r7,#28]
 1185 002e 194B     	 ldr r3,.L82+4
 1186 0030 83FB0213 	 smull r1,r3,r3,r2
 1187 0034 1344     	 add r3,r3,r2
 1188 0036 5911     	 asrs r1,r3,#5
 1189 0038 D317     	 asrs r3,r2,#31
 1190 003a C91A     	 subs r1,r1,r3
 1191 003c 0B46     	 mov r3,r1
 1192 003e 1B01     	 lsls r3,r3,#4
 1193 0040 5B1A     	 subs r3,r3,r1
 1194 0042 9B00     	 lsls r3,r3,#2
 1195 0044 D31A     	 subs r3,r2,r3
 1196 0046 FB61     	 str r3,[r7,#28]
 349:../cleanflight/src/main/io/osd.c **** 
 350:../cleanflight/src/main/io/osd.c ****     switch (precision) {
 1197              	 .loc 8 350 0
 1198 0048 FB7A     	 ldrb r3,[r7,#11]
 1199 004a 012B     	 cmp r3,#1
 1200 004c 06D0     	 beq .L80
 351:../cleanflight/src/main/io/osd.c ****     case OSD_TIMER_PREC_SECOND:
 352:../cleanflight/src/main/io/osd.c ****     default:
 353:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%02d:%02d", minutes, seconds);
 1201              	 .loc 8 353 0
 1202 004e F868     	 ldr r0,[r7,#12]
 1203 0050 1149     	 ldr r1,.L82+8
 1204 0052 BA69     	 ldr r2,[r7,#24]
 1205 0054 FB69     	 ldr r3,[r7,#28]
 1206 0056 FFF7FEFF 	 bl tfp_sprintf
 354:../cleanflight/src/main/io/osd.c ****         break;
 1207              	 .loc 8 354 0
 1208 005a 16E0     	 b .L78
 1209              	.L80:
 1210              	.LBB3:
 355:../cleanflight/src/main/io/osd.c ****     case OSD_TIMER_PREC_HUNDREDTHS:
 356:../cleanflight/src/main/io/osd.c ****         {
 357:../cleanflight/src/main/io/osd.c ****             const int hundredths = (time / 10000) % 100;
 1211              	 .loc 8 357 0
 1212 005c 7B68     	 ldr r3,[r7,#4]
 1213 005e 0F4A     	 ldr r2,.L82+12
 1214 0060 A2FB0323 	 umull r2,r3,r2,r3
 1215 0064 5A0B     	 lsrs r2,r3,#13
 1216 0066 0E4B     	 ldr r3,.L82+16
 1217 0068 A3FB0213 	 umull r1,r3,r3,r2
 1218 006c 5B09     	 lsrs r3,r3,#5
 1219 006e 6421     	 movs r1,#100
 1220 0070 01FB03F3 	 mul r3,r1,r3
 1221 0074 D31A     	 subs r3,r2,r3
 1222 0076 7B61     	 str r3,[r7,#20]
 358:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%02d:%02d.%02d", minutes, seconds, hundredths);
 1223              	 .loc 8 358 0
 1224 0078 7B69     	 ldr r3,[r7,#20]
 1225 007a 0093     	 str r3,[sp]
 1226 007c F868     	 ldr r0,[r7,#12]
 1227 007e 0949     	 ldr r1,.L82+20
 1228 0080 BA69     	 ldr r2,[r7,#24]
 1229 0082 FB69     	 ldr r3,[r7,#28]
 1230 0084 FFF7FEFF 	 bl tfp_sprintf
 359:../cleanflight/src/main/io/osd.c ****             break;
 1231              	 .loc 8 359 0
 1232 0088 00BF     	 nop
 1233              	.L78:
 1234              	.LBE3:
 360:../cleanflight/src/main/io/osd.c ****         }
 361:../cleanflight/src/main/io/osd.c ****     }
 362:../cleanflight/src/main/io/osd.c **** }
 1235              	 .loc 8 362 0
 1236 008a 2037     	 adds r7,r7,#32
 1237              	.LCFI85:
 1238              	 .cfi_def_cfa_offset 8
 1239 008c BD46     	 mov sp,r7
 1240              	.LCFI86:
 1241              	 .cfi_def_cfa_register 13
 1242              	 
 1243 008e 80BD     	 pop {r7,pc}
 1244              	.L83:
 1245              	 .align 2
 1246              	.L82:
 1247 0090 83DE1B43 	 .word 1125899907
 1248 0094 89888888 	 .word -2004318071
 1249 0098 3C000000 	 .word .LC5
 1250 009c 5917B7D1 	 .word -776530087
 1251 00a0 1F85EB51 	 .word 1374389535
 1252 00a4 48000000 	 .word .LC6
 1253              	 .cfi_endproc
 1254              	.LFE607:
 1256              	 .section .text.osdFormatTimer,"ax",%progbits
 1257              	 .align 2
 1258              	 .thumb
 1259              	 .thumb_func
 1261              	osdFormatTimer:
 1262              	.LFB608:
 363:../cleanflight/src/main/io/osd.c **** 
 364:../cleanflight/src/main/io/osd.c **** STATIC_UNIT_TESTED void osdFormatTimer(char *buff, bool showSymbol, bool usePrecision, int timerInd
 365:../cleanflight/src/main/io/osd.c **** {
 1263              	 .loc 8 365 0
 1264              	 .cfi_startproc
 1265              	 
 1266              	 
 1267 0000 90B5     	 push {r4,r7,lr}
 1268              	.LCFI87:
 1269              	 .cfi_def_cfa_offset 12
 1270              	 .cfi_offset 4,-12
 1271              	 .cfi_offset 7,-8
 1272              	 .cfi_offset 14,-4
 1273 0002 87B0     	 sub sp,sp,#28
 1274              	.LCFI88:
 1275              	 .cfi_def_cfa_offset 40
 1276 0004 00AF     	 add r7,sp,#0
 1277              	.LCFI89:
 1278              	 .cfi_def_cfa_register 7
 1279 0006 F860     	 str r0,[r7,#12]
 1280 0008 7B60     	 str r3,[r7,#4]
 1281 000a 0B46     	 mov r3,r1
 1282 000c FB72     	 strb r3,[r7,#11]
 1283 000e 1346     	 mov r3,r2
 1284 0010 BB72     	 strb r3,[r7,#10]
 366:../cleanflight/src/main/io/osd.c ****     const uint16_t timer = osdConfig()->timers[timerIndex];
 1285              	 .loc 8 366 0
 1286 0012 FFF7FEFF 	 bl osdConfig
 1287 0016 0146     	 mov r1,r0
 1288 0018 7B68     	 ldr r3,[r7,#4]
 1289 001a 03F12C02 	 add r2,r3,#44
 1290 001e 5300     	 lsls r3,r2,#1
 1291 0020 0B44     	 add r3,r3,r1
 1292 0022 1879     	 ldrb r0,[r3,#4]
 1293 0024 5300     	 lsls r3,r2,#1
 1294 0026 0B44     	 add r3,r3,r1
 1295 0028 5B79     	 ldrb r3,[r3,#5]
 1296 002a 1B02     	 lsls r3,r3,#8
 1297 002c 0343     	 orrs r3,r3,r0
 1298 002e FB82     	 strh r3,[r7,#22]
 367:../cleanflight/src/main/io/osd.c ****     const uint8_t src = OSD_TIMER_SRC(timer);
 1299              	 .loc 8 367 0
 1300 0030 FB8A     	 ldrh r3,[r7,#22]
 1301 0032 DBB2     	 uxtb r3,r3
 1302 0034 03F00F03 	 and r3,r3,#15
 1303 0038 7B75     	 strb r3,[r7,#21]
 368:../cleanflight/src/main/io/osd.c **** 
 369:../cleanflight/src/main/io/osd.c ****     if (showSymbol) {
 1304              	 .loc 8 369 0
 1305 003a FB7A     	 ldrb r3,[r7,#11]
 1306 003c 002B     	 cmp r3,#0
 1307 003e 08D0     	 beq .L85
 370:../cleanflight/src/main/io/osd.c ****         *(buff++) = osdGetTimerSymbol(src);
 1308              	 .loc 8 370 0
 1309 0040 FC68     	 ldr r4,[r7,#12]
 1310 0042 631C     	 adds r3,r4,#1
 1311 0044 FB60     	 str r3,[r7,#12]
 1312 0046 7B7D     	 ldrb r3,[r7,#21]
 1313 0048 1846     	 mov r0,r3
 1314 004a FFF7FEFF 	 bl osdGetTimerSymbol
 1315 004e 0346     	 mov r3,r0
 1316 0050 2370     	 strb r3,[r4]
 1317              	.L85:
 371:../cleanflight/src/main/io/osd.c ****     }
 372:../cleanflight/src/main/io/osd.c **** 
 373:../cleanflight/src/main/io/osd.c ****     osdFormatTime(buff, (usePrecision ? OSD_TIMER_PRECISION(timer) : OSD_TIMER_PREC_SECOND), osdGet
 1318              	 .loc 8 373 0
 1319 0052 BB7A     	 ldrb r3,[r7,#10]
 1320 0054 002B     	 cmp r3,#0
 1321 0056 07D0     	 beq .L86
 1322              	 .loc 8 373 0 is_stmt 0 discriminator 1
 1323 0058 FB8A     	 ldrh r3,[r7,#22]
 1324 005a 1B09     	 lsrs r3,r3,#4
 1325 005c 9BB2     	 uxth r3,r3
 1326 005e DBB2     	 uxtb r3,r3
 1327 0060 03F00F03 	 and r3,r3,#15
 1328 0064 DCB2     	 uxtb r4,r3
 1329 0066 00E0     	 b .L87
 1330              	.L86:
 1331              	 .loc 8 373 0 discriminator 2
 1332 0068 0024     	 movs r4,#0
 1333              	.L87:
 1334              	 .loc 8 373 0 discriminator 4
 1335 006a 7B7D     	 ldrb r3,[r7,#21]
 1336 006c 1846     	 mov r0,r3
 1337 006e FFF7FEFF 	 bl osdGetTimerValue
 1338 0072 0346     	 mov r3,r0
 1339 0074 F868     	 ldr r0,[r7,#12]
 1340 0076 2146     	 mov r1,r4
 1341 0078 1A46     	 mov r2,r3
 1342 007a FFF7FEFF 	 bl osdFormatTime
 374:../cleanflight/src/main/io/osd.c **** }
 1343              	 .loc 8 374 0 is_stmt 1 discriminator 4
 1344 007e 1C37     	 adds r7,r7,#28
 1345              	.LCFI90:
 1346              	 .cfi_def_cfa_offset 12
 1347 0080 BD46     	 mov sp,r7
 1348              	.LCFI91:
 1349              	 .cfi_def_cfa_register 13
 1350              	 
 1351 0082 90BD     	 pop {r4,r7,pc}
 1352              	 .cfi_endproc
 1353              	.LFE608:
 1355              	 .section .rodata
 1356 0057 00       	 .align 2
 1357              	.LC7:
 1358 0058 25642E25 	 .ascii "%d.%07d\000"
 1358      30376400 
 1359              	 .section .text.osdFormatCoordinate,"ax",%progbits
 1360              	 .align 2
 1361              	 .thumb
 1362              	 .thumb_func
 1364              	osdFormatCoordinate:
 1365              	.LFB609:
 375:../cleanflight/src/main/io/osd.c **** 
 376:../cleanflight/src/main/io/osd.c **** #ifdef USE_GPS
 377:../cleanflight/src/main/io/osd.c **** static void osdFormatCoordinate(char *buff, char sym, int32_t val)
 378:../cleanflight/src/main/io/osd.c **** {
 1366              	 .loc 8 378 0
 1367              	 .cfi_startproc
 1368              	 
 1369              	 
 1370 0000 80B5     	 push {r7,lr}
 1371              	.LCFI92:
 1372              	 .cfi_def_cfa_offset 8
 1373              	 .cfi_offset 7,-8
 1374              	 .cfi_offset 14,-4
 1375 0002 88B0     	 sub sp,sp,#32
 1376              	.LCFI93:
 1377              	 .cfi_def_cfa_offset 40
 1378 0004 00AF     	 add r7,sp,#0
 1379              	.LCFI94:
 1380              	 .cfi_def_cfa_register 7
 1381 0006 F860     	 str r0,[r7,#12]
 1382 0008 0B46     	 mov r3,r1
 1383 000a 7A60     	 str r2,[r7,#4]
 1384 000c FB72     	 strb r3,[r7,#11]
 379:../cleanflight/src/main/io/osd.c ****     // latitude maximum integer width is 3 (-90).
 380:../cleanflight/src/main/io/osd.c ****     // longitude maximum integer width is 4 (-180).
 381:../cleanflight/src/main/io/osd.c ****     // We show 7 decimals, so we need to use 12 characters:
 382:../cleanflight/src/main/io/osd.c ****     // eg: s-180.1234567z   s=symbol, z=zero terminator, decimal separator  between 0 and 1
 383:../cleanflight/src/main/io/osd.c **** 
 384:../cleanflight/src/main/io/osd.c ****     static const int coordinateMaxLength = 13;//12 for the number (4 + dot + 7) + 1 for the symbol
 385:../cleanflight/src/main/io/osd.c **** 
 386:../cleanflight/src/main/io/osd.c ****     buff[0] = sym;
 1385              	 .loc 8 386 0
 1386 000e FB68     	 ldr r3,[r7,#12]
 1387 0010 FA7A     	 ldrb r2,[r7,#11]
 1388 0012 1A70     	 strb r2,[r3]
 387:../cleanflight/src/main/io/osd.c ****     const int32_t integerPart = val / GPS_DEGREES_DIVIDER;
 1389              	 .loc 8 387 0
 1390 0014 7B68     	 ldr r3,[r7,#4]
 1391 0016 1C4A     	 ldr r2,.L91
 1392 0018 82FB0312 	 smull r1,r2,r2,r3
 1393 001c 9215     	 asrs r2,r2,#22
 1394 001e DB17     	 asrs r3,r3,#31
 1395 0020 D31A     	 subs r3,r2,r3
 1396 0022 BB61     	 str r3,[r7,#24]
 388:../cleanflight/src/main/io/osd.c ****     const int32_t decimalPart = labs(val % GPS_DEGREES_DIVIDER);
 1397              	 .loc 8 388 0
 1398 0024 7A68     	 ldr r2,[r7,#4]
 1399 0026 184B     	 ldr r3,.L91
 1400 0028 83FB0213 	 smull r1,r3,r3,r2
 1401 002c 9915     	 asrs r1,r3,#22
 1402 002e D317     	 asrs r3,r2,#31
 1403 0030 CB1A     	 subs r3,r1,r3
 1404 0032 1649     	 ldr r1,.L91+4
 1405 0034 01FB03F3 	 mul r3,r1,r3
 1406 0038 D31A     	 subs r3,r2,r3
 1407 003a 002B     	 cmp r3,#0
 1408 003c B8BF     	 it lt
 1409 003e 5B42     	 rsblt r3,r3,#0
 1410 0040 7B61     	 str r3,[r7,#20]
 389:../cleanflight/src/main/io/osd.c ****     const int written = tfp_sprintf(buff + 1, "%d.%07d", integerPart, decimalPart);
 1411              	 .loc 8 389 0
 1412 0042 FB68     	 ldr r3,[r7,#12]
 1413 0044 0133     	 adds r3,r3,#1
 1414 0046 1846     	 mov r0,r3
 1415 0048 1149     	 ldr r1,.L91+8
 1416 004a BA69     	 ldr r2,[r7,#24]
 1417 004c 7B69     	 ldr r3,[r7,#20]
 1418 004e FFF7FEFF 	 bl tfp_sprintf
 1419 0052 3861     	 str r0,[r7,#16]
 1420              	.LBB4:
 390:../cleanflight/src/main/io/osd.c ****     // pad with blanks to coordinateMaxLength
 391:../cleanflight/src/main/io/osd.c ****     for (int pos = 1 + written; pos < coordinateMaxLength; ++pos) {
 1421              	 .loc 8 391 0
 1422 0054 3B69     	 ldr r3,[r7,#16]
 1423 0056 0133     	 adds r3,r3,#1
 1424 0058 FB61     	 str r3,[r7,#28]
 1425 005a 07E0     	 b .L89
 1426              	.L90:
 392:../cleanflight/src/main/io/osd.c ****         buff[pos] = SYM_BLANK;
 1427              	 .loc 8 392 0 discriminator 3
 1428 005c FB69     	 ldr r3,[r7,#28]
 1429 005e FA68     	 ldr r2,[r7,#12]
 1430 0060 1344     	 add r3,r3,r2
 1431 0062 2022     	 movs r2,#32
 1432 0064 1A70     	 strb r2,[r3]
 391:../cleanflight/src/main/io/osd.c ****         buff[pos] = SYM_BLANK;
 1433              	 .loc 8 391 0 discriminator 3
 1434 0066 FB69     	 ldr r3,[r7,#28]
 1435 0068 0133     	 adds r3,r3,#1
 1436 006a FB61     	 str r3,[r7,#28]
 1437              	.L89:
 391:../cleanflight/src/main/io/osd.c ****         buff[pos] = SYM_BLANK;
 1438              	 .loc 8 391 0 is_stmt 0 discriminator 1
 1439 006c 0D22     	 movs r2,#13
 1440 006e FB69     	 ldr r3,[r7,#28]
 1441 0070 9342     	 cmp r3,r2
 1442 0072 F3DB     	 blt .L90
 1443              	.LBE4:
 393:../cleanflight/src/main/io/osd.c ****     }
 394:../cleanflight/src/main/io/osd.c ****     buff[coordinateMaxLength] = '\0';
 1444              	 .loc 8 394 0 is_stmt 1
 1445 0074 0D23     	 movs r3,#13
 1446 0076 1A46     	 mov r2,r3
 1447 0078 FB68     	 ldr r3,[r7,#12]
 1448 007a 1344     	 add r3,r3,r2
 1449 007c 0022     	 movs r2,#0
 1450 007e 1A70     	 strb r2,[r3]
 395:../cleanflight/src/main/io/osd.c **** }
 1451              	 .loc 8 395 0
 1452 0080 2037     	 adds r7,r7,#32
 1453              	.LCFI95:
 1454              	 .cfi_def_cfa_offset 8
 1455 0082 BD46     	 mov sp,r7
 1456              	.LCFI96:
 1457              	 .cfi_def_cfa_register 13
 1458              	 
 1459 0084 80BD     	 pop {r7,pc}
 1460              	.L92:
 1461 0086 00BF     	 .align 2
 1462              	.L91:
 1463 0088 6BCA5F6B 	 .word 1801439851
 1464 008c 80969800 	 .word 10000000
 1465 0090 58000000 	 .word .LC7
 1466              	 .cfi_endproc
 1467              	.LFE609:
 1469              	 .section .text.osdFormatRtcDateTime,"ax",%progbits
 1470              	 .align 2
 1471              	 .thumb
 1472              	 .thumb_func
 1474              	osdFormatRtcDateTime:
 1475              	.LFB610:
 396:../cleanflight/src/main/io/osd.c **** #endif // USE_GPS
 397:../cleanflight/src/main/io/osd.c **** 
 398:../cleanflight/src/main/io/osd.c **** #ifdef USE_RTC_TIME
 399:../cleanflight/src/main/io/osd.c **** static bool osdFormatRtcDateTime(char *buffer)
 400:../cleanflight/src/main/io/osd.c **** {
 1476              	 .loc 8 400 0
 1477              	 .cfi_startproc
 1478              	 
 1479              	 
 1480 0000 80B5     	 push {r7,lr}
 1481              	.LCFI97:
 1482              	 .cfi_def_cfa_offset 8
 1483              	 .cfi_offset 7,-8
 1484              	 .cfi_offset 14,-4
 1485 0002 86B0     	 sub sp,sp,#24
 1486              	.LCFI98:
 1487              	 .cfi_def_cfa_offset 32
 1488 0004 00AF     	 add r7,sp,#0
 1489              	.LCFI99:
 1490              	 .cfi_def_cfa_register 7
 1491 0006 7860     	 str r0,[r7,#4]
 401:../cleanflight/src/main/io/osd.c ****     dateTime_t dateTime;
 402:../cleanflight/src/main/io/osd.c ****     if (!rtcGetDateTime(&dateTime)) {
 1492              	 .loc 8 402 0
 1493 0008 07F10C03 	 add r3,r7,#12
 1494 000c 1846     	 mov r0,r3
 1495 000e FFF7FEFF 	 bl rtcGetDateTime
 1496 0012 0346     	 mov r3,r0
 1497 0014 83F00103 	 eor r3,r3,#1
 1498 0018 DBB2     	 uxtb r3,r3
 1499 001a 002B     	 cmp r3,#0
 1500 001c 04D0     	 beq .L94
 403:../cleanflight/src/main/io/osd.c ****         buffer[0] = '\0';
 1501              	 .loc 8 403 0
 1502 001e 7B68     	 ldr r3,[r7,#4]
 1503 0020 0022     	 movs r2,#0
 1504 0022 1A70     	 strb r2,[r3]
 404:../cleanflight/src/main/io/osd.c **** 
 405:../cleanflight/src/main/io/osd.c ****         return false;
 1505              	 .loc 8 405 0
 1506 0024 0023     	 movs r3,#0
 1507 0026 06E0     	 b .L96
 1508              	.L94:
 406:../cleanflight/src/main/io/osd.c ****     }
 407:../cleanflight/src/main/io/osd.c **** 
 408:../cleanflight/src/main/io/osd.c ****     dateTimeFormatLocalShort(buffer, &dateTime);
 1509              	 .loc 8 408 0
 1510 0028 07F10C03 	 add r3,r7,#12
 1511 002c 7868     	 ldr r0,[r7,#4]
 1512 002e 1946     	 mov r1,r3
 1513 0030 FFF7FEFF 	 bl dateTimeFormatLocalShort
 409:../cleanflight/src/main/io/osd.c **** 
 410:../cleanflight/src/main/io/osd.c ****     return true;
 1514              	 .loc 8 410 0
 1515 0034 0123     	 movs r3,#1
 1516              	.L96:
 411:../cleanflight/src/main/io/osd.c **** }
 1517              	 .loc 8 411 0 discriminator 1
 1518 0036 1846     	 mov r0,r3
 1519 0038 1837     	 adds r7,r7,#24
 1520              	.LCFI100:
 1521              	 .cfi_def_cfa_offset 8
 1522 003a BD46     	 mov sp,r7
 1523              	.LCFI101:
 1524              	 .cfi_def_cfa_register 13
 1525              	 
 1526 003c 80BD     	 pop {r7,pc}
 1527              	 .cfi_endproc
 1528              	.LFE610:
 1530 003e 00BF     	 .section .text.osdFormatMessage,"ax",%progbits
 1531              	 .align 2
 1532              	 .thumb
 1533              	 .thumb_func
 1535              	osdFormatMessage:
 1536              	.LFB611:
 412:../cleanflight/src/main/io/osd.c **** #endif
 413:../cleanflight/src/main/io/osd.c **** 
 414:../cleanflight/src/main/io/osd.c **** static void osdFormatMessage(char *buff, size_t size, const char *message)
 415:../cleanflight/src/main/io/osd.c **** {
 1537              	 .loc 8 415 0
 1538              	 .cfi_startproc
 1539              	 
 1540              	 
 1541 0000 80B5     	 push {r7,lr}
 1542              	.LCFI102:
 1543              	 .cfi_def_cfa_offset 8
 1544              	 .cfi_offset 7,-8
 1545              	 .cfi_offset 14,-4
 1546 0002 84B0     	 sub sp,sp,#16
 1547              	.LCFI103:
 1548              	 .cfi_def_cfa_offset 24
 1549 0004 00AF     	 add r7,sp,#0
 1550              	.LCFI104:
 1551              	 .cfi_def_cfa_register 7
 1552 0006 F860     	 str r0,[r7,#12]
 1553 0008 B960     	 str r1,[r7,#8]
 1554 000a 7A60     	 str r2,[r7,#4]
 416:../cleanflight/src/main/io/osd.c ****     memset(buff, SYM_BLANK, size);
 1555              	 .loc 8 416 0
 1556 000c F868     	 ldr r0,[r7,#12]
 1557 000e 2021     	 movs r1,#32
 1558 0010 BA68     	 ldr r2,[r7,#8]
 1559 0012 FFF7FEFF 	 bl memset
 417:../cleanflight/src/main/io/osd.c ****     if (message) {
 1560              	 .loc 8 417 0
 1561 0016 7B68     	 ldr r3,[r7,#4]
 1562 0018 002B     	 cmp r3,#0
 1563 001a 08D0     	 beq .L98
 418:../cleanflight/src/main/io/osd.c ****         memcpy(buff, message, strlen(message));
 1564              	 .loc 8 418 0
 1565 001c 7868     	 ldr r0,[r7,#4]
 1566 001e FFF7FEFF 	 bl strlen
 1567 0022 0346     	 mov r3,r0
 1568 0024 F868     	 ldr r0,[r7,#12]
 1569 0026 7968     	 ldr r1,[r7,#4]
 1570 0028 1A46     	 mov r2,r3
 1571 002a FFF7FEFF 	 bl memcpy
 1572              	.L98:
 419:../cleanflight/src/main/io/osd.c ****     }
 420:../cleanflight/src/main/io/osd.c ****     // Ensure buff is zero terminated
 421:../cleanflight/src/main/io/osd.c ****     buff[size - 1] = '\0';
 1573              	 .loc 8 421 0
 1574 002e BB68     	 ldr r3,[r7,#8]
 1575 0030 013B     	 subs r3,r3,#1
 1576 0032 FA68     	 ldr r2,[r7,#12]
 1577 0034 1344     	 add r3,r3,r2
 1578 0036 0022     	 movs r2,#0
 1579 0038 1A70     	 strb r2,[r3]
 422:../cleanflight/src/main/io/osd.c **** }
 1580              	 .loc 8 422 0
 1581 003a 1037     	 adds r7,r7,#16
 1582              	.LCFI105:
 1583              	 .cfi_def_cfa_offset 8
 1584 003c BD46     	 mov sp,r7
 1585              	.LCFI106:
 1586              	 .cfi_def_cfa_register 13
 1587              	 
 1588 003e 80BD     	 pop {r7,pc}
 1589              	 .cfi_endproc
 1590              	.LFE611:
 1592              	 .section .text.osdStatSetState,"ax",%progbits
 1593              	 .align 2
 1594              	 .global osdStatSetState
 1595              	 .thumb
 1596              	 .thumb_func
 1598              	osdStatSetState:
 1599              	.LFB612:
 423:../cleanflight/src/main/io/osd.c **** 
 424:../cleanflight/src/main/io/osd.c **** void osdStatSetState(uint8_t statIndex, bool enabled)
 425:../cleanflight/src/main/io/osd.c **** {
 1600              	 .loc 8 425 0
 1601              	 .cfi_startproc
 1602              	 
 1603              	 
 1604 0000 80B5     	 push {r7,lr}
 1605              	.LCFI107:
 1606              	 .cfi_def_cfa_offset 8
 1607              	 .cfi_offset 7,-8
 1608              	 .cfi_offset 14,-4
 1609 0002 82B0     	 sub sp,sp,#8
 1610              	.LCFI108:
 1611              	 .cfi_def_cfa_offset 16
 1612 0004 00AF     	 add r7,sp,#0
 1613              	.LCFI109:
 1614              	 .cfi_def_cfa_register 7
 1615 0006 0346     	 mov r3,r0
 1616 0008 0A46     	 mov r2,r1
 1617 000a FB71     	 strb r3,[r7,#7]
 1618 000c 1346     	 mov r3,r2
 1619 000e BB71     	 strb r3,[r7,#6]
 426:../cleanflight/src/main/io/osd.c ****     if (enabled) {
 1620              	 .loc 8 426 0
 1621 0010 BB79     	 ldrb r3,[r7,#6]
 1622 0012 002B     	 cmp r3,#0
 1623 0014 0AD0     	 beq .L100
 427:../cleanflight/src/main/io/osd.c ****         osdConfigMutable()->enabled_stats |= (1 << statIndex);
 1624              	 .loc 8 427 0
 1625 0016 FFF7FEFF 	 bl osdConfigMutable
 1626 001a 0346     	 mov r3,r0
 1627 001c 5A6E     	 ldr r2,[r3,#100]
 1628 001e F979     	 ldrb r1,[r7,#7]
 1629 0020 0120     	 movs r0,#1
 1630 0022 00FA01F1 	 lsl r1,r0,r1
 1631 0026 0A43     	 orrs r2,r2,r1
 1632 0028 5A66     	 str r2,[r3,#100]
 1633 002a 0AE0     	 b .L99
 1634              	.L100:
 428:../cleanflight/src/main/io/osd.c ****     } else {
 429:../cleanflight/src/main/io/osd.c ****         osdConfigMutable()->enabled_stats &= ~(1 << statIndex);
 1635              	 .loc 8 429 0
 1636 002c FFF7FEFF 	 bl osdConfigMutable
 1637 0030 0346     	 mov r3,r0
 1638 0032 5A6E     	 ldr r2,[r3,#100]
 1639 0034 F979     	 ldrb r1,[r7,#7]
 1640 0036 0120     	 movs r0,#1
 1641 0038 00FA01F1 	 lsl r1,r0,r1
 1642 003c C943     	 mvns r1,r1
 1643 003e 0A40     	 ands r2,r2,r1
 1644 0040 5A66     	 str r2,[r3,#100]
 1645              	.L99:
 430:../cleanflight/src/main/io/osd.c ****     }
 431:../cleanflight/src/main/io/osd.c **** }
 1646              	 .loc 8 431 0
 1647 0042 0837     	 adds r7,r7,#8
 1648              	.LCFI110:
 1649              	 .cfi_def_cfa_offset 8
 1650 0044 BD46     	 mov sp,r7
 1651              	.LCFI111:
 1652              	 .cfi_def_cfa_register 13
 1653              	 
 1654 0046 80BD     	 pop {r7,pc}
 1655              	 .cfi_endproc
 1656              	.LFE612:
 1658              	 .section .text.osdStatGetState,"ax",%progbits
 1659              	 .align 2
 1660              	 .global osdStatGetState
 1661              	 .thumb
 1662              	 .thumb_func
 1664              	osdStatGetState:
 1665              	.LFB613:
 432:../cleanflight/src/main/io/osd.c **** 
 433:../cleanflight/src/main/io/osd.c **** bool osdStatGetState(uint8_t statIndex)
 434:../cleanflight/src/main/io/osd.c **** {
 1666              	 .loc 8 434 0
 1667              	 .cfi_startproc
 1668              	 
 1669              	 
 1670 0000 80B5     	 push {r7,lr}
 1671              	.LCFI112:
 1672              	 .cfi_def_cfa_offset 8
 1673              	 .cfi_offset 7,-8
 1674              	 .cfi_offset 14,-4
 1675 0002 82B0     	 sub sp,sp,#8
 1676              	.LCFI113:
 1677              	 .cfi_def_cfa_offset 16
 1678 0004 00AF     	 add r7,sp,#0
 1679              	.LCFI114:
 1680              	 .cfi_def_cfa_register 7
 1681 0006 0346     	 mov r3,r0
 1682 0008 FB71     	 strb r3,[r7,#7]
 435:../cleanflight/src/main/io/osd.c ****     return osdConfig()->enabled_stats & (1 << statIndex);
 1683              	 .loc 8 435 0
 1684 000a FFF7FEFF 	 bl osdConfig
 1685 000e 0346     	 mov r3,r0
 1686 0010 5B6E     	 ldr r3,[r3,#100]
 1687 0012 FA79     	 ldrb r2,[r7,#7]
 1688 0014 0121     	 movs r1,#1
 1689 0016 01FA02F2 	 lsl r2,r1,r2
 1690 001a 1340     	 ands r3,r3,r2
 1691 001c 002B     	 cmp r3,#0
 1692 001e 14BF     	 ite ne
 1693 0020 0123     	 movne r3,#1
 1694 0022 0023     	 moveq r3,#0
 1695 0024 DBB2     	 uxtb r3,r3
 436:../cleanflight/src/main/io/osd.c **** }
 1696              	 .loc 8 436 0
 1697 0026 1846     	 mov r0,r3
 1698 0028 0837     	 adds r7,r7,#8
 1699              	.LCFI115:
 1700              	 .cfi_def_cfa_offset 8
 1701 002a BD46     	 mov sp,r7
 1702              	.LCFI116:
 1703              	 .cfi_def_cfa_register 13
 1704              	 
 1705 002c 80BD     	 pop {r7,pc}
 1706              	 .cfi_endproc
 1707              	.LFE613:
 1709 002e 00BF     	 .section .text.osdWarnSetState,"ax",%progbits
 1710              	 .align 2
 1711              	 .global osdWarnSetState
 1712              	 .thumb
 1713              	 .thumb_func
 1715              	osdWarnSetState:
 1716              	.LFB614:
 437:../cleanflight/src/main/io/osd.c **** 
 438:../cleanflight/src/main/io/osd.c **** void osdWarnSetState(uint8_t warningIndex, bool enabled)
 439:../cleanflight/src/main/io/osd.c **** {
 1717              	 .loc 8 439 0
 1718              	 .cfi_startproc
 1719              	 
 1720              	 
 1721 0000 80B5     	 push {r7,lr}
 1722              	.LCFI117:
 1723              	 .cfi_def_cfa_offset 8
 1724              	 .cfi_offset 7,-8
 1725              	 .cfi_offset 14,-4
 1726 0002 82B0     	 sub sp,sp,#8
 1727              	.LCFI118:
 1728              	 .cfi_def_cfa_offset 16
 1729 0004 00AF     	 add r7,sp,#0
 1730              	.LCFI119:
 1731              	 .cfi_def_cfa_register 7
 1732 0006 0346     	 mov r3,r0
 1733 0008 0A46     	 mov r2,r1
 1734 000a FB71     	 strb r3,[r7,#7]
 1735 000c 1346     	 mov r3,r2
 1736 000e BB71     	 strb r3,[r7,#6]
 440:../cleanflight/src/main/io/osd.c ****     if (enabled) {
 1737              	 .loc 8 440 0
 1738 0010 BB79     	 ldrb r3,[r7,#6]
 1739 0012 002B     	 cmp r3,#0
 1740 0014 12D0     	 beq .L105
 441:../cleanflight/src/main/io/osd.c ****         osdConfigMutable()->enabledWarnings |= (1 << warningIndex);
 1741              	 .loc 8 441 0
 1742 0016 FFF7FEFF 	 bl osdConfigMutable
 1743 001a 0346     	 mov r3,r0
 1744 001c B3F86020 	 ldrh r2,[r3,#96]
 1745 0020 92B2     	 uxth r2,r2
 1746 0022 90B2     	 uxth r0,r2
 1747 0024 FA79     	 ldrb r2,[r7,#7]
 1748 0026 0121     	 movs r1,#1
 1749 0028 01FA02F2 	 lsl r2,r1,r2
 1750 002c 92B2     	 uxth r2,r2
 1751 002e 0146     	 mov r1,r0
 1752 0030 0A43     	 orrs r2,r2,r1
 1753 0032 92B2     	 uxth r2,r2
 1754 0034 92B2     	 uxth r2,r2
 1755 0036 A3F86020 	 strh r2,[r3,#96]
 1756 003a 13E0     	 b .L104
 1757              	.L105:
 442:../cleanflight/src/main/io/osd.c ****     } else {
 443:../cleanflight/src/main/io/osd.c ****         osdConfigMutable()->enabledWarnings &= ~(1 << warningIndex);
 1758              	 .loc 8 443 0
 1759 003c FFF7FEFF 	 bl osdConfigMutable
 1760 0040 0346     	 mov r3,r0
 1761 0042 B3F86020 	 ldrh r2,[r3,#96]
 1762 0046 92B2     	 uxth r2,r2
 1763 0048 90B2     	 uxth r0,r2
 1764 004a FA79     	 ldrb r2,[r7,#7]
 1765 004c 0121     	 movs r1,#1
 1766 004e 01FA02F2 	 lsl r2,r1,r2
 1767 0052 92B2     	 uxth r2,r2
 1768 0054 D243     	 mvns r2,r2
 1769 0056 92B2     	 uxth r2,r2
 1770 0058 0146     	 mov r1,r0
 1771 005a 0A40     	 ands r2,r2,r1
 1772 005c 92B2     	 uxth r2,r2
 1773 005e 92B2     	 uxth r2,r2
 1774 0060 A3F86020 	 strh r2,[r3,#96]
 1775              	.L104:
 444:../cleanflight/src/main/io/osd.c ****     }
 445:../cleanflight/src/main/io/osd.c **** }
 1776              	 .loc 8 445 0
 1777 0064 0837     	 adds r7,r7,#8
 1778              	.LCFI120:
 1779              	 .cfi_def_cfa_offset 8
 1780 0066 BD46     	 mov sp,r7
 1781              	.LCFI121:
 1782              	 .cfi_def_cfa_register 13
 1783              	 
 1784 0068 80BD     	 pop {r7,pc}
 1785              	 .cfi_endproc
 1786              	.LFE614:
 1788 006a 00BF     	 .section .text.osdWarnGetState,"ax",%progbits
 1789              	 .align 2
 1790              	 .global osdWarnGetState
 1791              	 .thumb
 1792              	 .thumb_func
 1794              	osdWarnGetState:
 1795              	.LFB615:
 446:../cleanflight/src/main/io/osd.c **** 
 447:../cleanflight/src/main/io/osd.c **** bool osdWarnGetState(uint8_t warningIndex)
 448:../cleanflight/src/main/io/osd.c **** {
 1796              	 .loc 8 448 0
 1797              	 .cfi_startproc
 1798              	 
 1799              	 
 1800 0000 80B5     	 push {r7,lr}
 1801              	.LCFI122:
 1802              	 .cfi_def_cfa_offset 8
 1803              	 .cfi_offset 7,-8
 1804              	 .cfi_offset 14,-4
 1805 0002 82B0     	 sub sp,sp,#8
 1806              	.LCFI123:
 1807              	 .cfi_def_cfa_offset 16
 1808 0004 00AF     	 add r7,sp,#0
 1809              	.LCFI124:
 1810              	 .cfi_def_cfa_register 7
 1811 0006 0346     	 mov r3,r0
 1812 0008 FB71     	 strb r3,[r7,#7]
 449:../cleanflight/src/main/io/osd.c ****     return osdConfig()->enabledWarnings & (1 << warningIndex);
 1813              	 .loc 8 449 0
 1814 000a FFF7FEFF 	 bl osdConfig
 1815 000e 0346     	 mov r3,r0
 1816 0010 B3F86030 	 ldrh r3,[r3,#96]
 1817 0014 9BB2     	 uxth r3,r3
 1818 0016 1946     	 mov r1,r3
 1819 0018 FB79     	 ldrb r3,[r7,#7]
 1820 001a 0122     	 movs r2,#1
 1821 001c 02FA03F3 	 lsl r3,r2,r3
 1822 0020 0B40     	 ands r3,r3,r1
 1823 0022 002B     	 cmp r3,#0
 1824 0024 14BF     	 ite ne
 1825 0026 0123     	 movne r3,#1
 1826 0028 0023     	 moveq r3,#0
 1827 002a DBB2     	 uxtb r3,r3
 450:../cleanflight/src/main/io/osd.c **** }
 1828              	 .loc 8 450 0
 1829 002c 1846     	 mov r0,r3
 1830 002e 0837     	 adds r7,r7,#8
 1831              	.LCFI125:
 1832              	 .cfi_def_cfa_offset 8
 1833 0030 BD46     	 mov sp,r7
 1834              	.LCFI126:
 1835              	 .cfi_def_cfa_register 13
 1836              	 
 1837 0032 80BD     	 pop {r7,pc}
 1838              	 .cfi_endproc
 1839              	.LFE615:
 1841              	 .section .rodata
 1842              	 .align 2
 1843              	.LC8:
 1844 0060 25632532 	 .ascii "%c%2d\000"
 1844      6400
 1845 0066 0000     	 .align 2
 1846              	.LC9:
 1847 0068 2532642E 	 .ascii "%2d.%1d%c\000"
 1847      25316425 
 1847      6300
 1848 0072 0000     	 .align 2
 1849              	.LC10:
 1850 0074 2533642E 	 .ascii "%3d.%02d%c\000"
 1850      25303264 
 1850      256300
 1851 007f 00       	 .align 2
 1852              	.LC11:
 1853 0080 25346425 	 .ascii "%4d%c\000"
 1853      6300
 1854 0086 0000     	 .align 2
 1855              	.LC12:
 1856 0088 25632563 	 .ascii "%c%c%2d\000"
 1856      25326400 
 1857              	 .align 2
 1858              	.LC13:
 1859 0090 2533644D 	 .ascii "%3dM\000"
 1859      00
 1860 0095 000000   	 .align 2
 1861              	.LC14:
 1862 0098 2533644B 	 .ascii "%3dK\000"
 1862      00
 1863 009d 000000   	 .align 2
 1864              	.LC15:
 1865 00a0 25642563 	 .ascii "%d%c\000"
 1865      00
 1866              	 .global __aeabi_i2d
 1867              	 .global __aeabi_dmul
 1868              	 .global __aeabi_dcmplt
 1869 00a5 000000   	 .align 2
 1870              	.LC16:
 1871 00a8 2D2D3A2D 	 .ascii "--:--\000"
 1871      2D00
 1872 00ae 0000     	 .align 2
 1873              	.LC17:
 1874 00b0 30303A30 	 .ascii "00:00\000"
 1874      3000
 1875 00b6 0000     	 .align 2
 1876              	.LC18:
 1877 00b8 21465321 	 .ascii "!FS!\000"
 1877      00
 1878 00bd 000000   	 .align 2
 1879              	.LC19:
 1880 00c0 53544142 	 .ascii "STAB\000"
 1880      00
 1881 00c5 000000   	 .align 2
 1882              	.LC20:
 1883 00c8 484F5220 	 .ascii "HOR \000"
 1883      00
 1884 00cd 000000   	 .align 2
 1885              	.LC21:
 1886 00d0 52455343 	 .ascii "RESC\000"
 1886      00
 1887 00d5 000000   	 .align 2
 1888              	.LC22:
 1889 00d8 4154524E 	 .ascii "ATRN\000"
 1889      00
 1890 00dd 000000   	 .align 2
 1891              	.LC23:
 1892 00e0 41495220 	 .ascii "AIR \000"
 1892      00
 1893 00e5 000000   	 .align 2
 1894              	.LC24:
 1895 00e8 4143524F 	 .ascii "ACRO\000"
 1895      00
 1896 00ed 000000   	 .align 2
 1897              	.LC25:
 1898 00f0 414700   	 .ascii "AG\000"
 1899 00f3 00       	 .align 2
 1900              	.LC26:
 1901 00f4 43524146 	 .ascii "CRAFT_NAME\000"
 1901      545F4E41 
 1901      4D4500
 1902 00ff 00       	 .align 2
 1903              	.LC27:
 1904 0100 25336400 	 .ascii "%3d\000"
 1905              	 .align 2
 1906              	.LC28:
 1907 0104 25633A25 	 .ascii "%c:%s:%1d\000"
 1907      733A2531 
 1907      6400
 1908 010e 0000     	 .align 2
 1909              	.LC29:
 1910 0110 25303164 	 .ascii "%01d.%01dG\000"
 1910      2E253031 
 1910      644700
 1911 011b 00       	 .align 2
 1912              	.LC30:
 1913 011c 524F4C00 	 .ascii "ROL\000"
 1914              	 .align 2
 1915              	.LC31:
 1916 0120 50495400 	 .ascii "PIT\000"
 1917              	 .align 2
 1918              	.LC32:
 1919 0124 59415700 	 .ascii "YAW\000"
 1920              	 .align 2
 1921              	.LC33:
 1922 0128 25346457 	 .ascii "%4dW\000"
 1922      00
 1923 012d 000000   	 .align 2
 1924              	.LC34:
 1925 0130 25642D25 	 .ascii "%d-%d\000"
 1925      6400
 1926 0136 0000     	 .align 2
 1927              	.LC35:
 1928 0138 204C414E 	 .ascii " LAND NOW\000"
 1928      44204E4F 
 1928      5700
 1929 0142 0000     	 .align 2
 1930              	.LC36:
 1931 0144 43524153 	 .ascii "CRASH FLIP\000"
 1931      4820464C 
 1931      495000
 1932 014f 00       	 .align 2
 1933              	.LC37:
 1934 0150 4C4F5720 	 .ascii "LOW BATTERY\000"
 1934      42415454 
 1934      45525900 
 1935              	 .align 2
 1936              	.LC38:
 1937 015c 5243534D 	 .ascii "RCSMOOTHING\000"
 1937      4F4F5448 
 1937      494E4700 
 1938              	 .align 2
 1939              	.LC39:
 1940 0168 42415454 	 .ascii "BATT < FULL\000"
 1940      203C2046 
 1940      554C4C00 
 1941              	 .align 2
 1942              	.LC40:
 1943 0174 20202A20 	 .ascii "  * * * *\000"
 1943      2A202A20 
 1943      2A00
 1944 017e 0000     	 .align 2
 1945              	.LC41:
 1946 0180 25642E25 	 .ascii "%d.%02d%c\000"
 1946      30326425 
 1946      6300
 1947 018a 0000     	 .align 2
 1948              	.LC42:
 1949 018c 44424720 	 .ascii "DBG %5d %5d %5d %5d\000"
 1949      25356420 
 1949      25356420 
 1949      25356420 
 1949      25356400 
 1950              	 .align 2
 1951              	.LC43:
 1952 01a0 25632530 	 .ascii "%c%02d.%01d\000"
 1952      32642E25 
 1952      30316400 
 1953              	 .align 2
 1954              	.LC44:
 1955 01ac 44495341 	 .ascii "DISARMED\000"
 1955      524D4544 
 1955      00
 1956 01b5 000000   	 .align 2
 1957              	.LC45:
 1958 01b8 20202020 	 .ascii "        \000"
 1958      20202020 
 1958      00
 1959 01c1 000000   	 .align 2
 1960              	.LC46:
 1961 01c4 25632530 	 .ascii "%c%03d\000"
 1961      336400
 1962 01cb 00       	 .align 2
 1963              	.LC47:
 1964 01cc 25632530 	 .ascii "%c%01d.%01d\000"
 1964      31642E25 
 1964      30316400 
 1965              	 .align 2
 1966              	.LC48:
 1967 01d8 25733A20 	 .ascii "%s: %3d\000"
 1967      25336400 
 1968              	 .section .text.osdDrawSingleElement,"ax",%progbits
 1969              	 .align 2
 1970              	 .thumb
 1971              	 .thumb_func
 1973              	osdDrawSingleElement:
 1974              	.LFB616:
 451:../cleanflight/src/main/io/osd.c **** 
 452:../cleanflight/src/main/io/osd.c **** static bool osdDrawSingleElement(uint8_t item)
 453:../cleanflight/src/main/io/osd.c **** {
 1975              	 .loc 8 453 0
 1976              	 .cfi_startproc
 1977              	 
 1978              	 
 1979 0000 B0B5     	 push {r4,r5,r7,lr}
 1980              	.LCFI127:
 1981              	 .cfi_def_cfa_offset 16
 1982              	 .cfi_offset 4,-16
 1983              	 .cfi_offset 5,-12
 1984              	 .cfi_offset 7,-8
 1985              	 .cfi_offset 14,-4
 1986 0002 AEB0     	 sub sp,sp,#184
 1987              	.LCFI128:
 1988              	 .cfi_def_cfa_offset 200
 1989 0004 02AF     	 add r7,sp,#8
 1990              	.LCFI129:
 1991              	 .cfi_def_cfa 7,192
 1992 0006 0346     	 mov r3,r0
 1993 0008 FB71     	 strb r3,[r7,#7]
 454:../cleanflight/src/main/io/osd.c ****     if (!VISIBLE(osdConfig()->item_pos[item]) || BLINK(item)) {
 1994              	 .loc 8 454 0
 1995 000a FFF7FEFF 	 bl osdConfig
 1996 000e 0246     	 mov r2,r0
 1997 0010 FB79     	 ldrb r3,[r7,#7]
 1998 0012 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 1999 0016 9BB2     	 uxth r3,r3
 2000 0018 03F40063 	 and r3,r3,#2048
 2001 001c 002B     	 cmp r3,#0
 2002 001e 13D0     	 beq .L110
 2003              	 .loc 8 454 0 is_stmt 0 discriminator 1
 2004 0020 FB79     	 ldrb r3,[r7,#7]
 2005 0022 5B09     	 lsrs r3,r3,#5
 2006 0024 DBB2     	 uxtb r3,r3
 2007 0026 1A46     	 mov r2,r3
 2008 0028 D44B     	 ldr r3,.L223
 2009 002a 53F82230 	 ldr r3,[r3,r2,lsl#2]
 2010 002e FA79     	 ldrb r2,[r7,#7]
 2011 0030 02F01F02 	 and r2,r2,#31
 2012 0034 0121     	 movs r1,#1
 2013 0036 01FA02F2 	 lsl r2,r1,r2
 2014 003a 1340     	 ands r3,r3,r2
 2015 003c 002B     	 cmp r3,#0
 2016 003e 06D0     	 beq .L111
 2017              	 .loc 8 454 0 discriminator 2
 2018 0040 CF4B     	 ldr r3,.L223+4
 2019 0042 1B78     	 ldrb r3,[r3]
 2020 0044 002B     	 cmp r3,#0
 2021 0046 02D0     	 beq .L111
 2022              	.L110:
 455:../cleanflight/src/main/io/osd.c ****         return false;
 2023              	 .loc 8 455 0 is_stmt 1
 2024 0048 0023     	 movs r3,#0
 2025 004a 00F0FEBF 	 b .L218
 2026              	.L111:
 456:../cleanflight/src/main/io/osd.c ****     }
 457:../cleanflight/src/main/io/osd.c **** 
 458:../cleanflight/src/main/io/osd.c ****     uint8_t elemPosX = OSD_X(osdConfig()->item_pos[item]);
 2027              	 .loc 8 458 0
 2028 004e FFF7FEFF 	 bl osdConfig
 2029 0052 0246     	 mov r2,r0
 2030 0054 FB79     	 ldrb r3,[r7,#7]
 2031 0056 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2032 005a 9BB2     	 uxth r3,r3
 2033 005c DBB2     	 uxtb r3,r3
 2034 005e 03F01F03 	 and r3,r3,#31
 2035 0062 87F88F30 	 strb r3,[r7,#143]
 459:../cleanflight/src/main/io/osd.c ****     uint8_t elemPosY = OSD_Y(osdConfig()->item_pos[item]);
 2036              	 .loc 8 459 0
 2037 0066 FFF7FEFF 	 bl osdConfig
 2038 006a 0246     	 mov r2,r0
 2039 006c FB79     	 ldrb r3,[r7,#7]
 2040 006e 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2041 0072 9BB2     	 uxth r3,r3
 2042 0074 5B09     	 lsrs r3,r3,#5
 2043 0076 9BB2     	 uxth r3,r3
 2044 0078 DBB2     	 uxtb r3,r3
 2045 007a 03F01F03 	 and r3,r3,#31
 2046 007e 87F88E30 	 strb r3,[r7,#142]
 460:../cleanflight/src/main/io/osd.c ****     char buff[OSD_ELEMENT_BUFFER_LENGTH] = "";
 2047              	 .loc 8 460 0
 2048 0082 0023     	 movs r3,#0
 2049 0084 FB60     	 str r3,[r7,#12]
 2050 0086 07F11003 	 add r3,r7,#16
 2051 008a 0022     	 movs r2,#0
 2052 008c 1A60     	 str r2,[r3]
 2053 008e 0433     	 adds r3,r3,#4
 2054 0090 0022     	 movs r2,#0
 2055 0092 1A60     	 str r2,[r3]
 2056 0094 0433     	 adds r3,r3,#4
 2057 0096 0022     	 movs r2,#0
 2058 0098 1A60     	 str r2,[r3]
 2059 009a 0433     	 adds r3,r3,#4
 2060 009c 0022     	 movs r2,#0
 2061 009e 1A60     	 str r2,[r3]
 2062 00a0 0433     	 adds r3,r3,#4
 2063 00a2 0022     	 movs r2,#0
 2064 00a4 1A60     	 str r2,[r3]
 2065 00a6 0433     	 adds r3,r3,#4
 2066 00a8 0022     	 movs r2,#0
 2067 00aa 1A60     	 str r2,[r3]
 2068 00ac 0433     	 adds r3,r3,#4
 2069 00ae 0022     	 movs r2,#0
 2070 00b0 1A60     	 str r2,[r3]
 2071 00b2 0433     	 adds r3,r3,#4
 461:../cleanflight/src/main/io/osd.c **** 
 462:../cleanflight/src/main/io/osd.c ****     switch (item) {
 2072              	 .loc 8 462 0
 2073 00b4 FB79     	 ldrb r3,[r7,#7]
 2074 00b6 2A2B     	 cmp r3,#42
 2075 00b8 00F2BA87 	 bhi .L113
 2076 00bc 01A2     	 adr r2,.L115
 2077 00be 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2078 00c2 00BF     	 .p2align 2
 2079              	.L115:
 2080 00c4 71010000 	 .word .L114+1
 2081 00c8 B1010000 	 .word .L116+1
 2082 00cc F5070000 	 .word .L117+1
 2083 00d0 09080000 	 .word .L118+1
 2084 00d4 27090000 	 .word .L119+1
 2085 00d8 89040000 	 .word .L120+1
 2086 00dc 89040000 	 .word .L120+1
 2087 00e0 6F050000 	 .word .L121+1
 2088 00e4 5D060000 	 .word .L122+1
 2089 00e8 3D070000 	 .word .L123+1
 2090 00ec 83070000 	 .word .L124+1
 2091 00f0 0D020000 	 .word .L125+1
 2092 00f4 5B020000 	 .word .L126+1
 2093 00f8 8F020000 	 .word .L127+1
 2094 00fc 73020000 	 .word .L128+1
 2095 0100 73040000 	 .word .L129+1
 2096 0104 C30A0000 	 .word .L130+1
 2097 0108 D90A0000 	 .word .L131+1
 2098 010c EF0A0000 	 .word .L132+1
 2099 0110 050B0000 	 .word .L133+1
 2100 0114 310B0000 	 .word .L134+1
 2101 0118 510B0000 	 .word .L135+1
 2102 011c EF0C0000 	 .word .L136+1
 2103 0120 0F030000 	 .word .L137+1
 2104 0124 F9020000 	 .word .L138+1
 2105 0128 950D0000 	 .word .L139+1
 2106 012c C30D0000 	 .word .L140+1
 2107 0130 C30D0000 	 .word .L140+1
 2108 0134 370E0000 	 .word .L141+1
 2109 0138 190F0000 	 .word .L142+1
 2110 013c 25030000 	 .word .L143+1
 2111 0140 D5030000 	 .word .L144+1
 2112 0144 510F0000 	 .word .L145+1
 2113 0148 870F0000 	 .word .L146+1
 2114 014c 33040000 	 .word .L147+1
 2115 0150 31100000 	 .word .L113+1
 2116 0154 31100000 	 .word .L113+1
 2117 0158 9F040000 	 .word .L148+1
 2118 015c FB0F0000 	 .word .L149+1
 2119 0160 07100000 	 .word .L150+1
 2120 0164 31100000 	 .word .L113+1
 2121 0168 39060000 	 .word .L151+1
 2122 016c ED090000 	 .word .L152+1
 2123              	 .p2align 1
 2124              	.L114:
 2125              	.LBB5:
 463:../cleanflight/src/main/io/osd.c ****     case OSD_RSSI_VALUE:
 464:../cleanflight/src/main/io/osd.c ****         {
 465:../cleanflight/src/main/io/osd.c ****             uint16_t osdRssi = getRssi() * 100 / 1024; // change range
 2126              	 .loc 8 465 0
 2127 0170 FFF7FEFF 	 bl getRssi
 2128 0174 0346     	 mov r3,r0
 2129 0176 1A46     	 mov r2,r3
 2130 0178 6423     	 movs r3,#100
 2131 017a 03FB02F3 	 mul r3,r3,r2
 2132 017e 002B     	 cmp r3,#0
 2133 0180 01DA     	 bge .L153
 2134 0182 03F2FF33 	 addw r3,r3,#1023
 2135              	.L153:
 2136 0186 9B12     	 asrs r3,r3,#10
 2137 0188 A7F8AE30 	 strh r3,[r7,#174]
 466:../cleanflight/src/main/io/osd.c ****             if (osdRssi >= 100)
 2138              	 .loc 8 466 0
 2139 018c B7F8AE30 	 ldrh r3,[r7,#174]
 2140 0190 632B     	 cmp r3,#99
 2141 0192 02D9     	 bls .L154
 467:../cleanflight/src/main/io/osd.c ****                 osdRssi = 99;
 2142              	 .loc 8 467 0
 2143 0194 6323     	 movs r3,#99
 2144 0196 A7F8AE30 	 strh r3,[r7,#174]
 2145              	.L154:
 468:../cleanflight/src/main/io/osd.c **** 
 469:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%c%2d", SYM_RSSI, osdRssi);
 2146              	 .loc 8 469 0
 2147 019a B7F8AE30 	 ldrh r3,[r7,#174]
 2148 019e 07F10C02 	 add r2,r7,#12
 2149 01a2 1046     	 mov r0,r2
 2150 01a4 7749     	 ldr r1,.L223+8
 2151 01a6 0122     	 movs r2,#1
 2152 01a8 FFF7FEFF 	 bl tfp_sprintf
 470:../cleanflight/src/main/io/osd.c ****             break;
 2153              	 .loc 8 470 0
 2154 01ac 00F042BF 	 b .L155
 2155              	.L116:
 2156              	.LBE5:
 471:../cleanflight/src/main/io/osd.c ****         }
 472:../cleanflight/src/main/io/osd.c **** 
 473:../cleanflight/src/main/io/osd.c ****     case OSD_MAIN_BATT_VOLTAGE:
 474:../cleanflight/src/main/io/osd.c ****         buff[0] = osdGetBatterySymbol(osdGetBatteryAverageCellVoltage());
 2157              	 .loc 8 474 0
 2158 01b0 FFF7FEFF 	 bl osdGetBatteryAverageCellVoltage
 2159 01b4 0346     	 mov r3,r0
 2160 01b6 1846     	 mov r0,r3
 2161 01b8 FFF7FEFF 	 bl osdGetBatterySymbol
 2162 01bc 0346     	 mov r3,r0
 2163 01be 3B73     	 strb r3,[r7,#12]
 475:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff + 1, "%2d.%1d%c", getBatteryVoltage() / 10, getBatteryVoltage() % 10, SYM_
 2164              	 .loc 8 475 0
 2165 01c0 FFF7FEFF 	 bl getBatteryVoltage
 2166 01c4 0346     	 mov r3,r0
 2167 01c6 1A46     	 mov r2,r3
 2168 01c8 6F4B     	 ldr r3,.L223+12
 2169 01ca A3FB0223 	 umull r2,r3,r3,r2
 2170 01ce DB08     	 lsrs r3,r3,#3
 2171 01d0 9BB2     	 uxth r3,r3
 2172 01d2 1D46     	 mov r5,r3
 2173 01d4 FFF7FEFF 	 bl getBatteryVoltage
 2174 01d8 0346     	 mov r3,r0
 2175 01da 1A46     	 mov r2,r3
 2176 01dc 6A4B     	 ldr r3,.L223+12
 2177 01de A3FB0213 	 umull r1,r3,r3,r2
 2178 01e2 D908     	 lsrs r1,r3,#3
 2179 01e4 0B46     	 mov r3,r1
 2180 01e6 9B00     	 lsls r3,r3,#2
 2181 01e8 0B44     	 add r3,r3,r1
 2182 01ea 5B00     	 lsls r3,r3,#1
 2183 01ec D31A     	 subs r3,r2,r3
 2184 01ee 9BB2     	 uxth r3,r3
 2185 01f0 1C46     	 mov r4,r3
 2186 01f2 07F10C03 	 add r3,r7,#12
 2187 01f6 5A1C     	 adds r2,r3,#1
 2188 01f8 0623     	 movs r3,#6
 2189 01fa 0093     	 str r3,[sp]
 2190 01fc 1046     	 mov r0,r2
 2191 01fe 6349     	 ldr r1,.L223+16
 2192 0200 2A46     	 mov r2,r5
 2193 0202 2346     	 mov r3,r4
 2194 0204 FFF7FEFF 	 bl tfp_sprintf
 476:../cleanflight/src/main/io/osd.c ****         break;
 2195              	 .loc 8 476 0
 2196 0208 00F014BF 	 b .L155
 2197              	.L125:
 2198              	.LBB6:
 477:../cleanflight/src/main/io/osd.c **** 
 478:../cleanflight/src/main/io/osd.c ****     case OSD_CURRENT_DRAW:
 479:../cleanflight/src/main/io/osd.c ****         {
 480:../cleanflight/src/main/io/osd.c ****             const int32_t amperage = getAmperage();
 2199              	 .loc 8 480 0
 2200 020c FFF7FEFF 	 bl getAmperage
 2201 0210 3867     	 str r0,[r7,#112]
 481:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%3d.%02d%c", abs(amperage) / 100, abs(amperage) % 100, SYM_AMP);
 2202              	 .loc 8 481 0
 2203 0212 3B6F     	 ldr r3,[r7,#112]
 2204 0214 002B     	 cmp r3,#0
 2205 0216 B8BF     	 it lt
 2206 0218 5B42     	 rsblt r3,r3,#0
 2207 021a 5D4A     	 ldr r2,.L223+20
 2208 021c 82FB0312 	 smull r1,r2,r2,r3
 2209 0220 5211     	 asrs r2,r2,#5
 2210 0222 DB17     	 asrs r3,r3,#31
 2211 0224 D51A     	 subs r5,r2,r3
 2212 0226 3B6F     	 ldr r3,[r7,#112]
 2213 0228 002B     	 cmp r3,#0
 2214 022a B8BF     	 it lt
 2215 022c 5B42     	 rsblt r3,r3,#0
 2216 022e 584A     	 ldr r2,.L223+20
 2217 0230 82FB0312 	 smull r1,r2,r2,r3
 2218 0234 5111     	 asrs r1,r2,#5
 2219 0236 DA17     	 asrs r2,r3,#31
 2220 0238 8C1A     	 subs r4,r1,r2
 2221 023a 6422     	 movs r2,#100
 2222 023c 02FB04F2 	 mul r2,r2,r4
 2223 0240 9C1A     	 subs r4,r3,r2
 2224 0242 07F10C02 	 add r2,r7,#12
 2225 0246 9A23     	 movs r3,#154
 2226 0248 0093     	 str r3,[sp]
 2227 024a 1046     	 mov r0,r2
 2228 024c 5149     	 ldr r1,.L223+24
 2229 024e 2A46     	 mov r2,r5
 2230 0250 2346     	 mov r3,r4
 2231 0252 FFF7FEFF 	 bl tfp_sprintf
 482:../cleanflight/src/main/io/osd.c ****             break;
 2232              	 .loc 8 482 0
 2233 0256 00F0EDBE 	 b .L155
 2234              	.L126:
 2235              	.LBE6:
 483:../cleanflight/src/main/io/osd.c ****         }
 484:../cleanflight/src/main/io/osd.c **** 
 485:../cleanflight/src/main/io/osd.c ****     case OSD_MAH_DRAWN:
 486:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%4d%c", getMAhDrawn(), SYM_MAH);
 2236              	 .loc 8 486 0
 2237 025a FFF7FEFF 	 bl getMAhDrawn
 2238 025e 0246     	 mov r2,r0
 2239 0260 07F10C03 	 add r3,r7,#12
 2240 0264 1846     	 mov r0,r3
 2241 0266 4C49     	 ldr r1,.L223+28
 2242 0268 0723     	 movs r3,#7
 2243 026a FFF7FEFF 	 bl tfp_sprintf
 487:../cleanflight/src/main/io/osd.c ****         break;
 2244              	 .loc 8 487 0
 2245 026e 00F0E1BE 	 b .L155
 2246              	.L128:
 488:../cleanflight/src/main/io/osd.c **** 
 489:../cleanflight/src/main/io/osd.c **** #ifdef USE_GPS
 490:../cleanflight/src/main/io/osd.c ****     case OSD_GPS_SATS:
 491:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%c%c%2d", SYM_SAT_L, SYM_SAT_R, gpsSol.numSat);
 2247              	 .loc 8 491 0
 2248 0272 4A4B     	 ldr r3,.L223+32
 2249 0274 9B7C     	 ldrb r3,[r3,#18]
 2250 0276 1A46     	 mov r2,r3
 2251 0278 07F10C03 	 add r3,r7,#12
 2252 027c 0092     	 str r2,[sp]
 2253 027e 1846     	 mov r0,r3
 2254 0280 4749     	 ldr r1,.L223+36
 2255 0282 1E22     	 movs r2,#30
 2256 0284 1F23     	 movs r3,#31
 2257 0286 FFF7FEFF 	 bl tfp_sprintf
 492:../cleanflight/src/main/io/osd.c ****         break;
 2258              	 .loc 8 492 0
 2259 028a 00F0D3BE 	 b .L155
 2260              	.L127:
 493:../cleanflight/src/main/io/osd.c **** 
 494:../cleanflight/src/main/io/osd.c ****     case OSD_GPS_SPEED:
 495:../cleanflight/src/main/io/osd.c ****         // FIXME ideally we want to use SYM_KMH symbol but it's not in the font any more, so we use
 496:../cleanflight/src/main/io/osd.c ****         switch (osdConfig()->units) {
 2261              	 .loc 8 496 0
 2262 028e FFF7FEFF 	 bl osdConfig
 2263 0292 0346     	 mov r3,r0
 2264 0294 93F85B30 	 ldrb r3,[r3,#91]
 2265 0298 002B     	 cmp r3,#0
 2266 029a 15D1     	 bne .L220
 497:../cleanflight/src/main/io/osd.c ****         case OSD_UNIT_IMPERIAL:
 498:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%3dM", CM_S_TO_MPH(gpsSol.groundSpeed));
 2267              	 .loc 8 498 0
 2268 029c 3F4B     	 ldr r3,.L223+32
 2269 029e 9B89     	 ldrh r3,[r3,#12]
 2270 02a0 9BB2     	 uxth r3,r3
 2271 02a2 1A46     	 mov r2,r3
 2272 02a4 42F21073 	 movw r3,#10000
 2273 02a8 03FB02F3 	 mul r3,r3,r2
 2274 02ac 3D4A     	 ldr r2,.L223+40
 2275 02ae 82FB0312 	 smull r1,r2,r2,r3
 2276 02b2 1214     	 asrs r2,r2,#16
 2277 02b4 DB17     	 asrs r3,r3,#31
 2278 02b6 D31A     	 subs r3,r2,r3
 2279 02b8 07F10C02 	 add r2,r7,#12
 2280 02bc 1046     	 mov r0,r2
 2281 02be 3A49     	 ldr r1,.L223+44
 2282 02c0 1A46     	 mov r2,r3
 2283 02c2 FFF7FEFF 	 bl tfp_sprintf
 499:../cleanflight/src/main/io/osd.c ****             break;
 2284              	 .loc 8 499 0
 2285 02c6 15E0     	 b .L158
 2286              	.L220:
 500:../cleanflight/src/main/io/osd.c ****         default:
 501:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%3dK", CM_S_TO_KM_H(gpsSol.groundSpeed));
 2287              	 .loc 8 501 0
 2288 02c8 344B     	 ldr r3,.L223+32
 2289 02ca 9B89     	 ldrh r3,[r3,#12]
 2290 02cc 9BB2     	 uxth r3,r3
 2291 02ce 1A46     	 mov r2,r3
 2292 02d0 1346     	 mov r3,r2
 2293 02d2 DB00     	 lsls r3,r3,#3
 2294 02d4 1344     	 add r3,r3,r2
 2295 02d6 9B00     	 lsls r3,r3,#2
 2296 02d8 344A     	 ldr r2,.L223+48
 2297 02da 82FB0312 	 smull r1,r2,r2,r3
 2298 02de 9211     	 asrs r2,r2,#6
 2299 02e0 DB17     	 asrs r3,r3,#31
 2300 02e2 D31A     	 subs r3,r2,r3
 2301 02e4 07F10C02 	 add r2,r7,#12
 2302 02e8 1046     	 mov r0,r2
 2303 02ea 3149     	 ldr r1,.L223+52
 2304 02ec 1A46     	 mov r2,r3
 2305 02ee FFF7FEFF 	 bl tfp_sprintf
 502:../cleanflight/src/main/io/osd.c ****             break;
 2306              	 .loc 8 502 0
 2307 02f2 00BF     	 nop
 2308              	.L158:
 503:../cleanflight/src/main/io/osd.c ****         }
 504:../cleanflight/src/main/io/osd.c ****         break;
 2309              	 .loc 8 504 0
 2310 02f4 00F09EBE 	 b .L155
 2311              	.L138:
 505:../cleanflight/src/main/io/osd.c **** 
 506:../cleanflight/src/main/io/osd.c ****     case OSD_GPS_LAT:
 507:../cleanflight/src/main/io/osd.c ****         // The SYM_LAT symbol in the actual font contains only blank, so we use the SYM_ARROW_NORTH
 508:../cleanflight/src/main/io/osd.c ****         osdFormatCoordinate(buff, SYM_ARROW_NORTH, gpsSol.llh.lat);
 2312              	 .loc 8 508 0
 2313 02f8 284B     	 ldr r3,.L223+32
 2314 02fa 1B68     	 ldr r3,[r3]
 2315 02fc 07F10C02 	 add r2,r7,#12
 2316 0300 1046     	 mov r0,r2
 2317 0302 6821     	 movs r1,#104
 2318 0304 1A46     	 mov r2,r3
 2319 0306 FFF7FEFF 	 bl osdFormatCoordinate
 509:../cleanflight/src/main/io/osd.c ****         break;
 2320              	 .loc 8 509 0
 2321 030a 00F093BE 	 b .L155
 2322              	.L137:
 510:../cleanflight/src/main/io/osd.c **** 
 511:../cleanflight/src/main/io/osd.c ****     case OSD_GPS_LON:
 512:../cleanflight/src/main/io/osd.c ****         // The SYM_LON symbol in the actual font contains only blank, so we use the SYM_ARROW_EAST
 513:../cleanflight/src/main/io/osd.c ****         osdFormatCoordinate(buff, SYM_ARROW_EAST, gpsSol.llh.lon);
 2323              	 .loc 8 513 0
 2324 030e 234B     	 ldr r3,.L223+32
 2325 0310 5B68     	 ldr r3,[r3,#4]
 2326 0312 07F10C02 	 add r2,r7,#12
 2327 0316 1046     	 mov r0,r2
 2328 0318 6421     	 movs r1,#100
 2329 031a 1A46     	 mov r2,r3
 2330 031c FFF7FEFF 	 bl osdFormatCoordinate
 514:../cleanflight/src/main/io/osd.c ****         break;
 2331              	 .loc 8 514 0
 2332 0320 00F088BE 	 b .L155
 2333              	.L143:
 515:../cleanflight/src/main/io/osd.c **** 
 516:../cleanflight/src/main/io/osd.c ****     case OSD_HOME_DIR:
 517:../cleanflight/src/main/io/osd.c ****         if (STATE(GPS_FIX) && STATE(GPS_FIX_HOME)) {
 2334              	 .loc 8 517 0
 2335 0324 234B     	 ldr r3,.L223+56
 2336 0326 1B78     	 ldrb r3,[r3]
 2337 0328 03F00203 	 and r3,r3,#2
 2338 032c 002B     	 cmp r3,#0
 2339 032e 4BD0     	 beq .L159
 2340              	 .loc 8 517 0 is_stmt 0 discriminator 1
 2341 0330 204B     	 ldr r3,.L223+56
 2342 0332 1B78     	 ldrb r3,[r3]
 2343 0334 03F00103 	 and r3,r3,#1
 2344 0338 002B     	 cmp r3,#0
 2345 033a 45D0     	 beq .L159
 518:../cleanflight/src/main/io/osd.c ****             if (GPS_distanceToHome > 0) {
 2346              	 .loc 8 518 0 is_stmt 1
 2347 033c 1E4B     	 ldr r3,.L223+60
 2348 033e 1B88     	 ldrh r3,[r3]
 2349 0340 002B     	 cmp r3,#0
 2350 0342 17D0     	 beq .L160
 2351              	.LBB7:
 519:../cleanflight/src/main/io/osd.c ****                 const int h = GPS_directionToHome - DECIDEGREES_TO_DEGREES(attitude.values.yaw);
 2352              	 .loc 8 519 0
 2353 0344 1D4B     	 ldr r3,.L223+64
 2354 0346 1B88     	 ldrh r3,[r3]
 2355 0348 1AB2     	 sxth r2,r3
 2356 034a 1D4B     	 ldr r3,.L223+68
 2357 034c B3F90430 	 ldrsh r3,[r3,#4]
 2358 0350 9BB2     	 uxth r3,r3
 2359 0352 1BB2     	 sxth r3,r3
 2360 0354 1B49     	 ldr r1,.L223+72
 2361 0356 81FB0301 	 smull r0,r1,r1,r3
 2362 035a 8910     	 asrs r1,r1,#2
 2363 035c DB17     	 asrs r3,r3,#31
 2364 035e CB1A     	 subs r3,r1,r3
 2365 0360 9BB2     	 uxth r3,r3
 2366 0362 1BB2     	 sxth r3,r3
 2367 0364 D31A     	 subs r3,r2,r3
 2368 0366 FB66     	 str r3,[r7,#108]
 520:../cleanflight/src/main/io/osd.c ****                 buff[0] = osdGetDirectionSymbolFromHeading(h);
 2369              	 .loc 8 520 0
 2370 0368 F86E     	 ldr r0,[r7,#108]
 2371 036a FFF7FEFF 	 bl osdGetDirectionSymbolFromHeading
 2372 036e 0346     	 mov r3,r0
 2373 0370 3B73     	 strb r3,[r7,#12]
 2374              	.LBE7:
 518:../cleanflight/src/main/io/osd.c ****             if (GPS_distanceToHome > 0) {
 2375              	 .loc 8 518 0
 2376 0372 2BE0     	 b .L162
 2377              	.L160:
 521:../cleanflight/src/main/io/osd.c ****             } else {
 522:../cleanflight/src/main/io/osd.c ****                 // We don't have a HOME symbol in the font, by now we use this
 523:../cleanflight/src/main/io/osd.c ****                 buff[0] = SYM_THR1;
 2378              	 .loc 8 523 0
 2379 0374 0523     	 movs r3,#5
 2380 0376 3B73     	 strb r3,[r7,#12]
 518:../cleanflight/src/main/io/osd.c ****                 const int h = GPS_directionToHome - DECIDEGREES_TO_DEGREES(attitude.values.yaw);
 2381              	 .loc 8 518 0
 2382 0378 28E0     	 b .L162
 2383              	.L224:
 2384 037a 00BF     	 .align 2
 2385              	.L223:
 2386 037c 00000000 	 .word blinkBits
 2387 0380 00000000 	 .word blinkState
 2388 0384 60000000 	 .word .LC8
 2389 0388 CDCCCCCC 	 .word -858993459
 2390 038c 68000000 	 .word .LC9
 2391 0390 1F85EB51 	 .word 1374389535
 2392 0394 74000000 	 .word .LC10
 2393 0398 80000000 	 .word .LC11
 2394 039c 00000000 	 .word gpsSol
 2395 03a0 88000000 	 .word .LC12
 2396 03a4 77918725 	 .word 629641591
 2397 03a8 90000000 	 .word .LC13
 2398 03ac D34D6210 	 .word 274877907
 2399 03b0 98000000 	 .word .LC14
 2400 03b4 00000000 	 .word stateFlags
 2401 03b8 00000000 	 .word GPS_distanceToHome
 2402 03bc 00000000 	 .word GPS_directionToHome
 2403 03c0 00000000 	 .word attitude
 2404 03c4 67666666 	 .word 1717986919
 2405              	.L159:
 524:../cleanflight/src/main/io/osd.c ****             }
 525:../cleanflight/src/main/io/osd.c **** 
 526:../cleanflight/src/main/io/osd.c ****         } else {
 527:../cleanflight/src/main/io/osd.c ****             // We use this symbol when we don't have a FIX
 528:../cleanflight/src/main/io/osd.c ****             buff[0] = SYM_COLON;
 2406              	 .loc 8 528 0
 2407 03c8 2D23     	 movs r3,#45
 2408 03ca 3B73     	 strb r3,[r7,#12]
 2409              	.L162:
 529:../cleanflight/src/main/io/osd.c ****         }
 530:../cleanflight/src/main/io/osd.c **** 
 531:../cleanflight/src/main/io/osd.c ****         buff[1] = 0;
 2410              	 .loc 8 531 0
 2411 03cc 0023     	 movs r3,#0
 2412 03ce 7B73     	 strb r3,[r7,#13]
 532:../cleanflight/src/main/io/osd.c **** 
 533:../cleanflight/src/main/io/osd.c ****         break;
 2413              	 .loc 8 533 0
 2414 03d0 00F030BE 	 b .L155
 2415              	.L144:
 534:../cleanflight/src/main/io/osd.c **** 
 535:../cleanflight/src/main/io/osd.c ****     case OSD_HOME_DIST:
 536:../cleanflight/src/main/io/osd.c ****         if (STATE(GPS_FIX) && STATE(GPS_FIX_HOME)) {
 2416              	 .loc 8 536 0
 2417 03d4 C64B     	 ldr r3,.L225+8
 2418 03d6 1B78     	 ldrb r3,[r3]
 2419 03d8 03F00203 	 and r3,r3,#2
 2420 03dc 002B     	 cmp r3,#0
 2421 03de 1AD0     	 beq .L163
 2422              	 .loc 8 536 0 is_stmt 0 discriminator 1
 2423 03e0 C34B     	 ldr r3,.L225+8
 2424 03e2 1B78     	 ldrb r3,[r3]
 2425 03e4 03F00103 	 and r3,r3,#1
 2426 03e8 002B     	 cmp r3,#0
 2427 03ea 14D0     	 beq .L163
 2428              	.LBB8:
 537:../cleanflight/src/main/io/osd.c ****             const int32_t distance = osdGetMetersToSelectedUnit(GPS_distanceToHome);
 2429              	 .loc 8 537 0 is_stmt 1
 2430 03ec C14B     	 ldr r3,.L225+12
 2431 03ee 1B88     	 ldrh r3,[r3]
 2432 03f0 1846     	 mov r0,r3
 2433 03f2 FFF7FEFF 	 bl osdGetMetersToSelectedUnit
 2434 03f6 B866     	 str r0,[r7,#104]
 538:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%d%c", distance, osdGetMetersToSelectedUnitSymbol());
 2435              	 .loc 8 538 0
 2436 03f8 FFF7FEFF 	 bl osdGetMetersToSelectedUnitSymbol
 2437 03fc 0346     	 mov r3,r0
 2438 03fe 1C46     	 mov r4,r3
 2439 0400 07F10C03 	 add r3,r7,#12
 2440 0404 1846     	 mov r0,r3
 2441 0406 BC49     	 ldr r1,.L225+16
 2442 0408 BA6E     	 ldr r2,[r7,#104]
 2443 040a 2346     	 mov r3,r4
 2444 040c FFF7FEFF 	 bl tfp_sprintf
 2445              	.LBE8:
 536:../cleanflight/src/main/io/osd.c ****             const int32_t distance = osdGetMetersToSelectedUnit(GPS_distanceToHome);
 2446              	 .loc 8 536 0
 2447 0410 00BF     	 nop
 539:../cleanflight/src/main/io/osd.c ****         } else {
 540:../cleanflight/src/main/io/osd.c ****             // We use this symbol when we don't have a FIX
 541:../cleanflight/src/main/io/osd.c ****             buff[0] = SYM_COLON;
 542:../cleanflight/src/main/io/osd.c ****             // overwrite any previous distance with blanks
 543:../cleanflight/src/main/io/osd.c ****             memset(buff + 1, SYM_BLANK, 6);
 544:../cleanflight/src/main/io/osd.c ****             buff[7] = '\0';
 545:../cleanflight/src/main/io/osd.c ****         }
 546:../cleanflight/src/main/io/osd.c ****         break;
 2448              	 .loc 8 546 0
 2449 0412 00F00FBE 	 b .L155
 2450              	.L163:
 541:../cleanflight/src/main/io/osd.c ****             // overwrite any previous distance with blanks
 2451              	 .loc 8 541 0
 2452 0416 2D23     	 movs r3,#45
 2453 0418 3B73     	 strb r3,[r7,#12]
 543:../cleanflight/src/main/io/osd.c ****             buff[7] = '\0';
 2454              	 .loc 8 543 0
 2455 041a 07F10C03 	 add r3,r7,#12
 2456 041e 0133     	 adds r3,r3,#1
 2457 0420 1846     	 mov r0,r3
 2458 0422 2021     	 movs r1,#32
 2459 0424 0622     	 movs r2,#6
 2460 0426 FFF7FEFF 	 bl memset
 544:../cleanflight/src/main/io/osd.c ****         }
 2461              	 .loc 8 544 0
 2462 042a 0023     	 movs r3,#0
 2463 042c FB74     	 strb r3,[r7,#19]
 2464              	 .loc 8 546 0
 2465 042e 00F001BE 	 b .L155
 2466              	.L147:
 547:../cleanflight/src/main/io/osd.c **** 
 548:../cleanflight/src/main/io/osd.c **** #endif // GPS
 549:../cleanflight/src/main/io/osd.c **** 
 550:../cleanflight/src/main/io/osd.c ****     case OSD_COMPASS_BAR:
 551:../cleanflight/src/main/io/osd.c ****         memcpy(buff, compassBar + osdGetHeadingIntoDiscreteDirections(DECIDEGREES_TO_DEGREES(attitu
 2467              	 .loc 8 551 0
 2468 0432 B24B     	 ldr r3,.L225+20
 2469 0434 B3F90430 	 ldrsh r3,[r3,#4]
 2470 0438 9BB2     	 uxth r3,r3
 2471 043a 1BB2     	 sxth r3,r3
 2472 043c B04A     	 ldr r2,.L225+24
 2473 043e 82FB0312 	 smull r1,r2,r2,r3
 2474 0442 9210     	 asrs r2,r2,#2
 2475 0444 DB17     	 asrs r3,r3,#31
 2476 0446 D31A     	 subs r3,r2,r3
 2477 0448 9BB2     	 uxth r3,r3
 2478 044a 1BB2     	 sxth r3,r3
 2479 044c 1846     	 mov r0,r3
 2480 044e 1021     	 movs r1,#16
 2481 0450 FFF7FEFF 	 bl osdGetHeadingIntoDiscreteDirections
 2482 0454 0346     	 mov r3,r0
 2483 0456 1A46     	 mov r2,r3
 2484 0458 AA4B     	 ldr r3,.L225+28
 2485 045a 1344     	 add r3,r3,r2
 2486 045c 07F10C02 	 add r2,r7,#12
 2487 0460 1046     	 mov r0,r2
 2488 0462 1946     	 mov r1,r3
 2489 0464 0922     	 movs r2,#9
 2490 0466 FFF7FEFF 	 bl memcpy
 552:../cleanflight/src/main/io/osd.c ****         buff[9] = 0;
 2491              	 .loc 8 552 0
 2492 046a 0023     	 movs r3,#0
 2493 046c 7B75     	 strb r3,[r7,#21]
 553:../cleanflight/src/main/io/osd.c ****         break;
 2494              	 .loc 8 553 0
 2495 046e 00F0E1BD 	 b .L155
 2496              	.L129:
 554:../cleanflight/src/main/io/osd.c **** 
 555:../cleanflight/src/main/io/osd.c ****     case OSD_ALTITUDE:
 556:../cleanflight/src/main/io/osd.c ****         osdFormatAltitudeString(buff, getEstimatedAltitude());
 2497              	 .loc 8 556 0
 2498 0472 FFF7FEFF 	 bl getEstimatedAltitude
 2499 0476 0246     	 mov r2,r0
 2500 0478 07F10C03 	 add r3,r7,#12
 2501 047c 1846     	 mov r0,r3
 2502 047e 1146     	 mov r1,r2
 2503 0480 FFF7FEFF 	 bl osdFormatAltitudeString
 557:../cleanflight/src/main/io/osd.c ****         break;
 2504              	 .loc 8 557 0
 2505 0484 00F0D6BD 	 b .L155
 2506              	.L120:
 558:../cleanflight/src/main/io/osd.c **** 
 559:../cleanflight/src/main/io/osd.c ****     case OSD_ITEM_TIMER_1:
 560:../cleanflight/src/main/io/osd.c ****     case OSD_ITEM_TIMER_2:
 561:../cleanflight/src/main/io/osd.c ****         osdFormatTimer(buff, true, true, item - OSD_ITEM_TIMER_1);
 2507              	 .loc 8 561 0
 2508 0488 FB79     	 ldrb r3,[r7,#7]
 2509 048a 053B     	 subs r3,r3,#5
 2510 048c 07F10C02 	 add r2,r7,#12
 2511 0490 1046     	 mov r0,r2
 2512 0492 0121     	 movs r1,#1
 2513 0494 0122     	 movs r2,#1
 2514 0496 FFF7FEFF 	 bl osdFormatTimer
 562:../cleanflight/src/main/io/osd.c ****         break;
 2515              	 .loc 8 562 0
 2516 049a 00F0CBBD 	 b .L155
 2517              	.L148:
 2518              	.LBB9:
 563:../cleanflight/src/main/io/osd.c **** 
 564:../cleanflight/src/main/io/osd.c ****     case OSD_REMAINING_TIME_ESTIMATE:
 565:../cleanflight/src/main/io/osd.c ****         {
 566:../cleanflight/src/main/io/osd.c ****             const int mAhDrawn = getMAhDrawn();
 2519              	 .loc 8 566 0
 2520 049e FFF7FEFF 	 bl getMAhDrawn
 2521 04a2 7866     	 str r0,[r7,#100]
 567:../cleanflight/src/main/io/osd.c ****             const int remaining_time = (int)((osdConfig()->cap_alarm - mAhDrawn) * ((float)flyTime)
 2522              	 .loc 8 567 0
 2523 04a4 FFF7FEFF 	 bl osdConfig
 2524 04a8 0346     	 mov r3,r0
 2525 04aa B3F85630 	 ldrh r3,[r3,#86]
 2526 04ae 9BB2     	 uxth r3,r3
 2527 04b0 1A46     	 mov r2,r3
 2528 04b2 7B6E     	 ldr r3,[r7,#100]
 2529 04b4 D31A     	 subs r3,r2,r3
 2530 04b6 07EE903A 	 fmsr s15,r3
 2531 04ba B8EEE77A 	 fsitos s14,s15
 2532 04be 924B     	 ldr r3,.L225+32
 2533 04c0 1B68     	 ldr r3,[r3]
 2534 04c2 07EE903A 	 fmsr s15,r3
 2535 04c6 F8EE677A 	 fuitos s15,s15
 2536 04ca 27EE277A 	 fmuls s14,s14,s15
 2537 04ce 7B6E     	 ldr r3,[r7,#100]
 2538 04d0 07EE903A 	 fmsr s15,r3
 2539 04d4 F8EEE77A 	 fsitos s15,s15
 2540 04d8 C7EE277A 	 fdivs s15,s14,s15
 2541 04dc FDEEE77A 	 ftosizs s15,s15
 2542 04e0 17EE903A 	 fmrs r3,s15
 2543 04e4 3B66     	 str r3,[r7,#96]
 568:../cleanflight/src/main/io/osd.c **** 
 569:../cleanflight/src/main/io/osd.c ****             if (mAhDrawn < 0.1 * osdConfig()->cap_alarm) {
 2544              	 .loc 8 569 0
 2545 04e6 786E     	 ldr r0,[r7,#100]
 2546 04e8 FFF7FEFF 	 bl __aeabi_i2d
 2547 04ec 0446     	 mov r4,r0
 2548 04ee 0D46     	 mov r5,r1
 2549 04f0 FFF7FEFF 	 bl osdConfig
 2550 04f4 0346     	 mov r3,r0
 2551 04f6 B3F85630 	 ldrh r3,[r3,#86]
 2552 04fa 9BB2     	 uxth r3,r3
 2553 04fc 1846     	 mov r0,r3
 2554 04fe FFF7FEFF 	 bl __aeabi_i2d
 2555 0502 0246     	 mov r2,r0
 2556 0504 0B46     	 mov r3,r1
 2557 0506 1046     	 mov r0,r2
 2558 0508 1946     	 mov r1,r3
 2559 050a 77A3     	 adr r3,.L225
 2560 050c D3E90023 	 ldrd r2,[r3]
 2561 0510 FFF7FEFF 	 bl __aeabi_dmul
 2562 0514 0246     	 mov r2,r0
 2563 0516 0B46     	 mov r3,r1
 2564 0518 2046     	 mov r0,r4
 2565 051a 2946     	 mov r1,r5
 2566 051c FFF7FEFF 	 bl __aeabi_dcmplt
 2567 0520 0346     	 mov r3,r0
 2568 0522 002B     	 cmp r3,#0
 2569 0524 06D0     	 beq .L221
 570:../cleanflight/src/main/io/osd.c ****                 tfp_sprintf(buff, "--:--");
 2570              	 .loc 8 570 0
 2571 0526 07F10C03 	 add r3,r7,#12
 2572 052a 1846     	 mov r0,r3
 2573 052c 7749     	 ldr r1,.L225+36
 2574 052e FFF7FEFF 	 bl tfp_sprintf
 2575 0532 1AE0     	 b .L167
 2576              	.L221:
 571:../cleanflight/src/main/io/osd.c ****             } else if (mAhDrawn > osdConfig()->cap_alarm) {
 2577              	 .loc 8 571 0
 2578 0534 FFF7FEFF 	 bl osdConfig
 2579 0538 0346     	 mov r3,r0
 2580 053a B3F85630 	 ldrh r3,[r3,#86]
 2581 053e 9BB2     	 uxth r3,r3
 2582 0540 1A46     	 mov r2,r3
 2583 0542 7B6E     	 ldr r3,[r7,#100]
 2584 0544 9A42     	 cmp r2,r3
 2585 0546 06DA     	 bge .L168
 572:../cleanflight/src/main/io/osd.c ****                 tfp_sprintf(buff, "00:00");
 2586              	 .loc 8 572 0
 2587 0548 07F10C03 	 add r3,r7,#12
 2588 054c 1846     	 mov r0,r3
 2589 054e 7049     	 ldr r1,.L225+40
 2590 0550 FFF7FEFF 	 bl tfp_sprintf
 2591 0554 09E0     	 b .L167
 2592              	.L168:
 573:../cleanflight/src/main/io/osd.c ****             } else {
 574:../cleanflight/src/main/io/osd.c ****                 osdFormatTime(buff, OSD_TIMER_PREC_SECOND, remaining_time);
 2593              	 .loc 8 574 0
 2594 0556 3B6E     	 ldr r3,[r7,#96]
 2595 0558 07F10C02 	 add r2,r7,#12
 2596 055c 1046     	 mov r0,r2
 2597 055e 0021     	 movs r1,#0
 2598 0560 1A46     	 mov r2,r3
 2599 0562 FFF7FEFF 	 bl osdFormatTime
 575:../cleanflight/src/main/io/osd.c ****             }
 576:../cleanflight/src/main/io/osd.c ****             break;
 2600              	 .loc 8 576 0
 2601 0566 00F065BD 	 b .L155
 2602              	.L167:
 2603 056a 00F063BD 	 b .L155
 2604              	.L121:
 2605              	.LBE9:
 577:../cleanflight/src/main/io/osd.c ****         }
 578:../cleanflight/src/main/io/osd.c **** 
 579:../cleanflight/src/main/io/osd.c ****     case OSD_FLYMODE:
 580:../cleanflight/src/main/io/osd.c ****         {
 581:../cleanflight/src/main/io/osd.c ****             if (FLIGHT_MODE(FAILSAFE_MODE)) {
 2606              	 .loc 8 581 0
 2607 056e 694B     	 ldr r3,.L225+44
 2608 0570 1B88     	 ldrh r3,[r3]
 2609 0572 03F48063 	 and r3,r3,#1024
 2610 0576 002B     	 cmp r3,#0
 2611 0578 08D0     	 beq .L169
 582:../cleanflight/src/main/io/osd.c ****                 strcpy(buff, "!FS!");
 2612              	 .loc 8 582 0
 2613 057a 07F10C03 	 add r3,r7,#12
 2614 057e 664A     	 ldr r2,.L225+48
 2615 0580 92E80300 	 ldmia r2,{r0,r1}
 2616 0584 1860     	 str r0,[r3]
 2617 0586 0433     	 adds r3,r3,#4
 2618 0588 1970     	 strb r1,[r3]
 2619 058a 53E0     	 b .L170
 2620              	.L169:
 583:../cleanflight/src/main/io/osd.c ****             } else if (FLIGHT_MODE(ANGLE_MODE)) {
 2621              	 .loc 8 583 0
 2622 058c 614B     	 ldr r3,.L225+44
 2623 058e 1B88     	 ldrh r3,[r3]
 2624 0590 03F00103 	 and r3,r3,#1
 2625 0594 002B     	 cmp r3,#0
 2626 0596 08D0     	 beq .L171
 584:../cleanflight/src/main/io/osd.c ****                 strcpy(buff, "STAB");
 2627              	 .loc 8 584 0
 2628 0598 07F10C03 	 add r3,r7,#12
 2629 059c 5F4A     	 ldr r2,.L225+52
 2630 059e 92E80300 	 ldmia r2,{r0,r1}
 2631 05a2 1860     	 str r0,[r3]
 2632 05a4 0433     	 adds r3,r3,#4
 2633 05a6 1970     	 strb r1,[r3]
 2634 05a8 44E0     	 b .L170
 2635              	.L171:
 585:../cleanflight/src/main/io/osd.c ****             } else if (FLIGHT_MODE(HORIZON_MODE)) {
 2636              	 .loc 8 585 0
 2637 05aa 5A4B     	 ldr r3,.L225+44
 2638 05ac 1B88     	 ldrh r3,[r3]
 2639 05ae 03F00203 	 and r3,r3,#2
 2640 05b2 002B     	 cmp r3,#0
 2641 05b4 08D0     	 beq .L172
 586:../cleanflight/src/main/io/osd.c ****                 strcpy(buff, "HOR ");
 2642              	 .loc 8 586 0
 2643 05b6 07F10C03 	 add r3,r7,#12
 2644 05ba 594A     	 ldr r2,.L225+56
 2645 05bc 92E80300 	 ldmia r2,{r0,r1}
 2646 05c0 1860     	 str r0,[r3]
 2647 05c2 0433     	 adds r3,r3,#4
 2648 05c4 1970     	 strb r1,[r3]
 2649 05c6 35E0     	 b .L170
 2650              	.L172:
 587:../cleanflight/src/main/io/osd.c ****             } else if (FLIGHT_MODE(GPS_RESCUE_MODE)) {
 2651              	 .loc 8 587 0
 2652 05c8 524B     	 ldr r3,.L225+44
 2653 05ca 1B88     	 ldrh r3,[r3]
 2654 05cc 03F40063 	 and r3,r3,#2048
 2655 05d0 002B     	 cmp r3,#0
 2656 05d2 08D0     	 beq .L173
 588:../cleanflight/src/main/io/osd.c ****                 strcpy(buff, "RESC");
 2657              	 .loc 8 588 0
 2658 05d4 07F10C03 	 add r3,r7,#12
 2659 05d8 524A     	 ldr r2,.L225+60
 2660 05da 92E80300 	 ldmia r2,{r0,r1}
 2661 05de 1860     	 str r0,[r3]
 2662 05e0 0433     	 adds r3,r3,#4
 2663 05e2 1970     	 strb r1,[r3]
 2664 05e4 26E0     	 b .L170
 2665              	.L173:
 589:../cleanflight/src/main/io/osd.c ****             } else if (IS_RC_MODE_ACTIVE(BOXACROTRAINER)) {
 2666              	 .loc 8 589 0
 2667 05e6 2820     	 movs r0,#40
 2668 05e8 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 2669 05ec 0346     	 mov r3,r0
 2670 05ee 002B     	 cmp r3,#0
 2671 05f0 08D0     	 beq .L174
 590:../cleanflight/src/main/io/osd.c ****                 strcpy(buff, "ATRN");
 2672              	 .loc 8 590 0
 2673 05f2 07F10C03 	 add r3,r7,#12
 2674 05f6 4C4A     	 ldr r2,.L225+64
 2675 05f8 92E80300 	 ldmia r2,{r0,r1}
 2676 05fc 1860     	 str r0,[r3]
 2677 05fe 0433     	 adds r3,r3,#4
 2678 0600 1970     	 strb r1,[r3]
 2679 0602 17E0     	 b .L170
 2680              	.L174:
 591:../cleanflight/src/main/io/osd.c ****             } else if (isAirmodeActive()) {
 2681              	 .loc 8 591 0
 2682 0604 FFF7FEFF 	 bl isAirmodeActive
 2683 0608 0346     	 mov r3,r0
 2684 060a 002B     	 cmp r3,#0
 2685 060c 08D0     	 beq .L175
 592:../cleanflight/src/main/io/osd.c ****                 strcpy(buff, "AIR ");
 2686              	 .loc 8 592 0
 2687 060e 07F10C03 	 add r3,r7,#12
 2688 0612 464A     	 ldr r2,.L225+68
 2689 0614 92E80300 	 ldmia r2,{r0,r1}
 2690 0618 1860     	 str r0,[r3]
 2691 061a 0433     	 adds r3,r3,#4
 2692 061c 1970     	 strb r1,[r3]
 2693 061e 09E0     	 b .L170
 2694              	.L175:
 593:../cleanflight/src/main/io/osd.c ****             } else {
 594:../cleanflight/src/main/io/osd.c ****                 strcpy(buff, "ACRO");
 2695              	 .loc 8 594 0
 2696 0620 07F10C03 	 add r3,r7,#12
 2697 0624 424A     	 ldr r2,.L225+72
 2698 0626 92E80300 	 ldmia r2,{r0,r1}
 2699 062a 1860     	 str r0,[r3]
 2700 062c 0433     	 adds r3,r3,#4
 2701 062e 1970     	 strb r1,[r3]
 595:../cleanflight/src/main/io/osd.c ****             }
 596:../cleanflight/src/main/io/osd.c **** 
 597:../cleanflight/src/main/io/osd.c ****             break;
 2702              	 .loc 8 597 0
 2703 0630 00F000BD 	 b .L155
 2704              	.L170:
 2705 0634 00F0FEBC 	 b .L155
 2706              	.L151:
 598:../cleanflight/src/main/io/osd.c ****         }
 599:../cleanflight/src/main/io/osd.c **** 
 600:../cleanflight/src/main/io/osd.c ****     case OSD_ANTI_GRAVITY:
 601:../cleanflight/src/main/io/osd.c ****         {
 602:../cleanflight/src/main/io/osd.c ****             if (pidOsdAntiGravityActive()) {
 2707              	 .loc 8 602 0
 2708 0638 FFF7FEFF 	 bl pidOsdAntiGravityActive
 2709 063c 0346     	 mov r3,r0
 2710 063e 002B     	 cmp r3,#0
 2711 0640 0AD0     	 beq .L176
 603:../cleanflight/src/main/io/osd.c ****                 strcpy(buff, "AG");
 2712              	 .loc 8 603 0
 2713 0642 07F10C03 	 add r3,r7,#12
 2714 0646 3B4A     	 ldr r2,.L225+76
 2715 0648 1268     	 ldr r2,[r2]
 2716 064a 1146     	 mov r1,r2
 2717 064c 1980     	 strh r1,[r3]
 2718 064e 0233     	 adds r3,r3,#2
 2719 0650 120C     	 lsrs r2,r2,#16
 2720 0652 1A70     	 strb r2,[r3]
 604:../cleanflight/src/main/io/osd.c ****             }
 605:../cleanflight/src/main/io/osd.c **** 
 606:../cleanflight/src/main/io/osd.c ****             break;
 2721              	 .loc 8 606 0
 2722 0654 00F0EEBC 	 b .L155
 2723              	.L176:
 2724 0658 00F0ECBC 	 b .L155
 2725              	.L122:
 607:../cleanflight/src/main/io/osd.c ****         }
 608:../cleanflight/src/main/io/osd.c **** 
 609:../cleanflight/src/main/io/osd.c ****     case OSD_CRAFT_NAME:
 610:../cleanflight/src/main/io/osd.c ****         // This does not strictly support iterative updating if the craft name changes at run time.
 611:../cleanflight/src/main/io/osd.c ****         //TODO: When iterative updating is implemented, change this so the craft name is only print
 612:../cleanflight/src/main/io/osd.c **** 
 613:../cleanflight/src/main/io/osd.c ****         if (strlen(pilotConfig()->name) == 0) {
 2726              	 .loc 8 613 0
 2727 065c FFF7FEFF 	 bl pilotConfig
 2728 0660 0346     	 mov r3,r0
 2729 0662 1B78     	 ldrb r3,[r3]
 2730 0664 002B     	 cmp r3,#0
 2731 0666 0AD1     	 bne .L177
 614:../cleanflight/src/main/io/osd.c ****             strcpy(buff, "CRAFT_NAME");
 2732              	 .loc 8 614 0
 2733 0668 07F10C03 	 add r3,r7,#12
 2734 066c 324A     	 ldr r2,.L225+80
 2735 066e 07CA     	 ldmia r2,{r0,r1,r2}
 2736 0670 03C3     	 stmia r3!,{r0,r1}
 2737 0672 1A80     	 strh r2,[r3]
 2738 0674 0233     	 adds r3,r3,#2
 2739 0676 120C     	 lsrs r2,r2,#16
 2740 0678 1A70     	 strb r2,[r3]
 615:../cleanflight/src/main/io/osd.c ****         } else {
 616:../cleanflight/src/main/io/osd.c ****             unsigned i;
 617:../cleanflight/src/main/io/osd.c ****             for (i = 0; i < MAX_NAME_LENGTH; i++) {
 618:../cleanflight/src/main/io/osd.c ****                 if (pilotConfig()->name[i]) {
 619:../cleanflight/src/main/io/osd.c ****                     buff[i] = toupper((unsigned char)pilotConfig()->name[i]);
 620:../cleanflight/src/main/io/osd.c ****                 } else {
 621:../cleanflight/src/main/io/osd.c ****                     break;
 622:../cleanflight/src/main/io/osd.c ****                 }    
 623:../cleanflight/src/main/io/osd.c ****             }    
 624:../cleanflight/src/main/io/osd.c ****             buff[i] = '\0';
 625:../cleanflight/src/main/io/osd.c ****         }
 626:../cleanflight/src/main/io/osd.c **** 
 627:../cleanflight/src/main/io/osd.c ****         break;
 2741              	 .loc 8 627 0
 2742 067a 00F0DBBC 	 b .L155
 2743              	.L177:
 2744              	.LBB10:
 617:../cleanflight/src/main/io/osd.c ****                 if (pilotConfig()->name[i]) {
 2745              	 .loc 8 617 0
 2746 067e 0023     	 movs r3,#0
 2747 0680 C7F8A830 	 str r3,[r7,#168]
 2748 0684 22E0     	 b .L179
 2749              	.L183:
 618:../cleanflight/src/main/io/osd.c ****                     buff[i] = toupper((unsigned char)pilotConfig()->name[i]);
 2750              	 .loc 8 618 0
 2751 0686 FFF7FEFF 	 bl pilotConfig
 2752 068a 0246     	 mov r2,r0
 2753 068c D7F8A830 	 ldr r3,[r7,#168]
 2754 0690 1344     	 add r3,r3,r2
 2755 0692 1B78     	 ldrb r3,[r3]
 2756 0694 002B     	 cmp r3,#0
 2757 0696 13D0     	 beq .L180
 619:../cleanflight/src/main/io/osd.c ****                 } else {
 2758              	 .loc 8 619 0
 2759 0698 FFF7FEFF 	 bl pilotConfig
 2760 069c 0246     	 mov r2,r0
 2761 069e D7F8A830 	 ldr r3,[r7,#168]
 2762 06a2 1344     	 add r3,r3,r2
 2763 06a4 1B78     	 ldrb r3,[r3]
 2764 06a6 1846     	 mov r0,r3
 2765 06a8 FFF7FEFF 	 bl toupper
 2766 06ac 0346     	 mov r3,r0
 2767 06ae D9B2     	 uxtb r1,r3
 2768 06b0 07F10C02 	 add r2,r7,#12
 2769 06b4 D7F8A830 	 ldr r3,[r7,#168]
 2770 06b8 1344     	 add r3,r3,r2
 2771 06ba 0A46     	 mov r2,r1
 2772 06bc 1A70     	 strb r2,[r3]
 2773 06be 00E0     	 b .L222
 2774              	.L180:
 621:../cleanflight/src/main/io/osd.c ****                 }    
 2775              	 .loc 8 621 0
 2776 06c0 08E0     	 b .L182
 2777              	.L222:
 617:../cleanflight/src/main/io/osd.c ****                 if (pilotConfig()->name[i]) {
 2778              	 .loc 8 617 0 discriminator 2
 2779 06c2 D7F8A830 	 ldr r3,[r7,#168]
 2780 06c6 0133     	 adds r3,r3,#1
 2781 06c8 C7F8A830 	 str r3,[r7,#168]
 2782              	.L179:
 617:../cleanflight/src/main/io/osd.c ****                 if (pilotConfig()->name[i]) {
 2783              	 .loc 8 617 0 is_stmt 0 discriminator 1
 2784 06cc D7F8A830 	 ldr r3,[r7,#168]
 2785 06d0 0F2B     	 cmp r3,#15
 2786 06d2 D8D9     	 bls .L183
 2787              	.L182:
 624:../cleanflight/src/main/io/osd.c ****         }
 2788              	 .loc 8 624 0 is_stmt 1
 2789 06d4 07F10C02 	 add r2,r7,#12
 2790 06d8 D7F8A830 	 ldr r3,[r7,#168]
 2791 06dc 1344     	 add r3,r3,r2
 2792 06de 0022     	 movs r2,#0
 2793 06e0 1A70     	 strb r2,[r3]
 2794              	.LBE10:
 2795              	 .loc 8 627 0
 2796 06e2 00F0A7BC 	 b .L155
 2797              	.L226:
 2798 06e6 00BF     	 .align 3
 2799              	.L225:
 2800 06e8 9A999999 	 .word -1717986918
 2801 06ec 9999B93F 	 .word 1069128089
 2802 06f0 00000000 	 .word stateFlags
 2803 06f4 00000000 	 .word GPS_distanceToHome
 2804 06f8 A0000000 	 .word .LC15
 2805 06fc 00000000 	 .word attitude
 2806 0700 67666666 	 .word 1717986919
 2807 0704 00000000 	 .word compassBar
 2808 0708 00000000 	 .word flyTime
 2809 070c A8000000 	 .word .LC16
 2810 0710 B0000000 	 .word .LC17
 2811 0714 00000000 	 .word flightModeFlags
 2812 0718 B8000000 	 .word .LC18
 2813 071c C0000000 	 .word .LC19
 2814 0720 C8000000 	 .word .LC20
 2815 0724 D0000000 	 .word .LC21
 2816 0728 D8000000 	 .word .LC22
 2817 072c E0000000 	 .word .LC23
 2818 0730 E8000000 	 .word .LC24
 2819 0734 F0000000 	 .word .LC25
 2820 0738 F4000000 	 .word .LC26
 2821              	.L123:
 628:../cleanflight/src/main/io/osd.c **** 
 629:../cleanflight/src/main/io/osd.c ****     case OSD_THROTTLE_POS:
 630:../cleanflight/src/main/io/osd.c ****         buff[0] = SYM_THR;
 2822              	 .loc 8 630 0
 2823 073c 0423     	 movs r3,#4
 2824 073e 3B73     	 strb r3,[r7,#12]
 631:../cleanflight/src/main/io/osd.c ****         buff[1] = SYM_THR1;
 2825              	 .loc 8 631 0
 2826 0740 0523     	 movs r3,#5
 2827 0742 7B73     	 strb r3,[r7,#13]
 632:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff + 2, "%3d", (constrain(rcData[THROTTLE], PWM_RANGE_MIN, PWM_RANGE_MAX) - P
 2828              	 .loc 8 632 0
 2829 0744 AD4B     	 ldr r3,.L227
 2830 0746 DB88     	 ldrh r3,[r3,#6]
 2831 0748 1BB2     	 sxth r3,r3
 2832 074a 1846     	 mov r0,r3
 2833 074c 4FF47A71 	 mov r1,#1000
 2834 0750 4FF4FA62 	 mov r2,#2000
 2835 0754 FFF7FEFF 	 bl constrain
 2836 0758 0346     	 mov r3,r0
 2837 075a A3F57A73 	 sub r3,r3,#1000
 2838 075e 6422     	 movs r2,#100
 2839 0760 02FB03F3 	 mul r3,r2,r3
 2840 0764 A64A     	 ldr r2,.L227+4
 2841 0766 82FB0312 	 smull r1,r2,r2,r3
 2842 076a 9211     	 asrs r2,r2,#6
 2843 076c DB17     	 asrs r3,r3,#31
 2844 076e D21A     	 subs r2,r2,r3
 2845 0770 07F10C03 	 add r3,r7,#12
 2846 0774 0233     	 adds r3,r3,#2
 2847 0776 1846     	 mov r0,r3
 2848 0778 A249     	 ldr r1,.L227+8
 2849 077a FFF7FEFF 	 bl tfp_sprintf
 633:../cleanflight/src/main/io/osd.c ****         break;
 2850              	 .loc 8 633 0
 2851 077e 00F059BC 	 b .L155
 2852              	.L124:
 2853              	.LBB11:
 634:../cleanflight/src/main/io/osd.c **** 
 635:../cleanflight/src/main/io/osd.c **** #if defined(USE_VTX_COMMON)
 636:../cleanflight/src/main/io/osd.c ****     case OSD_VTX_CHANNEL:
 637:../cleanflight/src/main/io/osd.c ****         {
 638:../cleanflight/src/main/io/osd.c ****             const char vtxBandLetter = vtx58BandLetter[vtxSettingsConfig()->band];
 2854              	 .loc 8 638 0
 2855 0782 FFF7FEFF 	 bl vtxSettingsConfig
 2856 0786 0346     	 mov r3,r0
 2857 0788 1B78     	 ldrb r3,[r3]
 2858 078a 1A46     	 mov r2,r3
 2859 078c 9E4B     	 ldr r3,.L227+12
 2860 078e 9B5C     	 ldrb r3,[r3,r2]
 2861 0790 87F85F30 	 strb r3,[r7,#95]
 639:../cleanflight/src/main/io/osd.c ****             const char *vtxChannelName = vtx58ChannelNames[vtxSettingsConfig()->channel];
 2862              	 .loc 8 639 0
 2863 0794 FFF7FEFF 	 bl vtxSettingsConfig
 2864 0798 0346     	 mov r3,r0
 2865 079a 5B78     	 ldrb r3,[r3,#1]
 2866 079c 1A46     	 mov r2,r3
 2867 079e 9B4B     	 ldr r3,.L227+16
 2868 07a0 53F82230 	 ldr r3,[r3,r2,lsl#2]
 2869 07a4 BB65     	 str r3,[r7,#88]
 640:../cleanflight/src/main/io/osd.c ****             uint8_t vtxPower = vtxSettingsConfig()->power;
 2870              	 .loc 8 640 0
 2871 07a6 FFF7FEFF 	 bl vtxSettingsConfig
 2872 07aa 0346     	 mov r3,r0
 2873 07ac 9B78     	 ldrb r3,[r3,#2]
 2874 07ae FB72     	 strb r3,[r7,#11]
 641:../cleanflight/src/main/io/osd.c ****             const vtxDevice_t *vtxDevice = vtxCommonDevice();
 2875              	 .loc 8 641 0
 2876 07b0 FFF7FEFF 	 bl vtxCommonDevice
 2877 07b4 7865     	 str r0,[r7,#84]
 642:../cleanflight/src/main/io/osd.c ****             if (vtxDevice && vtxSettingsConfig()->lowPowerDisarm) {
 2878              	 .loc 8 642 0
 2879 07b6 7B6D     	 ldr r3,[r7,#84]
 2880 07b8 002B     	 cmp r3,#0
 2881 07ba 0BD0     	 beq .L184
 2882              	 .loc 8 642 0 is_stmt 0 discriminator 1
 2883 07bc FFF7FEFF 	 bl vtxSettingsConfig
 2884 07c0 0346     	 mov r3,r0
 2885 07c2 DB79     	 ldrb r3,[r3,#7]
 2886 07c4 002B     	 cmp r3,#0
 2887 07c6 05D0     	 beq .L184
 643:../cleanflight/src/main/io/osd.c ****                 vtxCommonGetPowerIndex(vtxDevice, &vtxPower);
 2888              	 .loc 8 643 0 is_stmt 1
 2889 07c8 07F10B03 	 add r3,r7,#11
 2890 07cc 786D     	 ldr r0,[r7,#84]
 2891 07ce 1946     	 mov r1,r3
 2892 07d0 FFF7FEFF 	 bl vtxCommonGetPowerIndex
 2893              	.L184:
 644:../cleanflight/src/main/io/osd.c ****             }
 645:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%c:%s:%1d", vtxBandLetter, vtxChannelName, vtxPower);
 2894              	 .loc 8 645 0
 2895 07d4 97F85F30 	 ldrb r3,[r7,#95]
 2896 07d8 FA7A     	 ldrb r2,[r7,#11]
 2897 07da 1146     	 mov r1,r2
 2898 07dc 07F10C02 	 add r2,r7,#12
 2899 07e0 0091     	 str r1,[sp]
 2900 07e2 1046     	 mov r0,r2
 2901 07e4 8A49     	 ldr r1,.L227+20
 2902 07e6 1A46     	 mov r2,r3
 2903 07e8 BB6D     	 ldr r3,[r7,#88]
 2904 07ea FFF7FEFF 	 bl tfp_sprintf
 646:../cleanflight/src/main/io/osd.c ****             break;
 2905              	 .loc 8 646 0
 2906 07ee 00BF     	 nop
 2907 07f0 00F020BC 	 b .L155
 2908              	.L117:
 2909              	.LBE11:
 647:../cleanflight/src/main/io/osd.c ****         }
 648:../cleanflight/src/main/io/osd.c **** #endif
 649:../cleanflight/src/main/io/osd.c **** 
 650:../cleanflight/src/main/io/osd.c ****     case OSD_CROSSHAIRS:
 651:../cleanflight/src/main/io/osd.c ****         buff[0] = SYM_AH_CENTER_LINE;
 2910              	 .loc 8 651 0
 2911 07f4 2623     	 movs r3,#38
 2912 07f6 3B73     	 strb r3,[r7,#12]
 652:../cleanflight/src/main/io/osd.c ****         buff[1] = SYM_AH_CENTER;
 2913              	 .loc 8 652 0
 2914 07f8 7E23     	 movs r3,#126
 2915 07fa 7B73     	 strb r3,[r7,#13]
 653:../cleanflight/src/main/io/osd.c ****         buff[2] = SYM_AH_CENTER_LINE_RIGHT;
 2916              	 .loc 8 653 0
 2917 07fc 2723     	 movs r3,#39
 2918 07fe BB73     	 strb r3,[r7,#14]
 654:../cleanflight/src/main/io/osd.c ****         buff[3] = 0;
 2919              	 .loc 8 654 0
 2920 0800 0023     	 movs r3,#0
 2921 0802 FB73     	 strb r3,[r7,#15]
 655:../cleanflight/src/main/io/osd.c ****         break;
 2922              	 .loc 8 655 0
 2923 0804 00F016BC 	 b .L155
 2924              	.L118:
 2925              	.LBB12:
 656:../cleanflight/src/main/io/osd.c **** 
 657:../cleanflight/src/main/io/osd.c ****     case OSD_ARTIFICIAL_HORIZON:
 658:../cleanflight/src/main/io/osd.c ****         {
 659:../cleanflight/src/main/io/osd.c ****             // Get pitch and roll limits in tenths of degrees
 660:../cleanflight/src/main/io/osd.c ****             const int maxPitch = osdConfig()->ahMaxPitch * 10;
 2926              	 .loc 8 660 0
 2927 0808 FFF7FEFF 	 bl osdConfig
 2928 080c 0346     	 mov r3,r0
 2929 080e 93F86230 	 ldrb r3,[r3,#98]
 2930 0812 1A46     	 mov r2,r3
 2931 0814 1346     	 mov r3,r2
 2932 0816 9B00     	 lsls r3,r3,#2
 2933 0818 1344     	 add r3,r3,r2
 2934 081a 5B00     	 lsls r3,r3,#1
 2935 081c C7F88830 	 str r3,[r7,#136]
 661:../cleanflight/src/main/io/osd.c ****             const int maxRoll = osdConfig()->ahMaxRoll * 10;
 2936              	 .loc 8 661 0
 2937 0820 FFF7FEFF 	 bl osdConfig
 2938 0824 0346     	 mov r3,r0
 2939 0826 93F86330 	 ldrb r3,[r3,#99]
 2940 082a 1A46     	 mov r2,r3
 2941 082c 1346     	 mov r3,r2
 2942 082e 9B00     	 lsls r3,r3,#2
 2943 0830 1344     	 add r3,r3,r2
 2944 0832 5B00     	 lsls r3,r3,#1
 2945 0834 C7F88430 	 str r3,[r7,#132]
 662:../cleanflight/src/main/io/osd.c ****             const int rollAngle = constrain(attitude.values.roll, -maxRoll, maxRoll);
 2946              	 .loc 8 662 0
 2947 0838 764B     	 ldr r3,.L227+24
 2948 083a B3F90030 	 ldrsh r3,[r3]
 2949 083e 9BB2     	 uxth r3,r3
 2950 0840 1AB2     	 sxth r2,r3
 2951 0842 D7F88430 	 ldr r3,[r7,#132]
 2952 0846 5B42     	 negs r3,r3
 2953 0848 1046     	 mov r0,r2
 2954 084a 1946     	 mov r1,r3
 2955 084c D7F88420 	 ldr r2,[r7,#132]
 2956 0850 FFF7FEFF 	 bl constrain
 2957 0854 C7F88000 	 str r0,[r7,#128]
 663:../cleanflight/src/main/io/osd.c ****             int pitchAngle = constrain(attitude.values.pitch, -maxPitch, maxPitch);
 2958              	 .loc 8 663 0
 2959 0858 6E4B     	 ldr r3,.L227+24
 2960 085a B3F90230 	 ldrsh r3,[r3,#2]
 2961 085e 9BB2     	 uxth r3,r3
 2962 0860 1AB2     	 sxth r2,r3
 2963 0862 D7F88830 	 ldr r3,[r7,#136]
 2964 0866 5B42     	 negs r3,r3
 2965 0868 1046     	 mov r0,r2
 2966 086a 1946     	 mov r1,r3
 2967 086c D7F88820 	 ldr r2,[r7,#136]
 2968 0870 FFF7FEFF 	 bl constrain
 2969 0874 F867     	 str r0,[r7,#124]
 664:../cleanflight/src/main/io/osd.c ****             // Convert pitchAngle to y compensation value
 665:../cleanflight/src/main/io/osd.c ****             // (maxPitch / 25) divisor matches previous settings of fixed divisor of 8 and fixed ma
 666:../cleanflight/src/main/io/osd.c ****             pitchAngle = ((pitchAngle * 25) / maxPitch) - 41; // 41 = 4 * AH_SYMBOL_COUNT + 5
 2970              	 .loc 8 666 0
 2971 0876 FA6F     	 ldr r2,[r7,#124]
 2972 0878 1346     	 mov r3,r2
 2973 087a 9B00     	 lsls r3,r3,#2
 2974 087c 1344     	 add r3,r3,r2
 2975 087e 9A00     	 lsls r2,r3,#2
 2976 0880 1A44     	 add r2,r2,r3
 2977 0882 D7F88830 	 ldr r3,[r7,#136]
 2978 0886 92FBF3F3 	 sdiv r3,r2,r3
 2979 088a 293B     	 subs r3,r3,#41
 2980 088c FB67     	 str r3,[r7,#124]
 2981              	.LBB13:
 667:../cleanflight/src/main/io/osd.c **** 
 668:../cleanflight/src/main/io/osd.c ****             for (int x = -4; x <= 4; x++) {
 2982              	 .loc 8 668 0
 2983 088e 6FF00303 	 mvn r3,#3
 2984 0892 C7F8A430 	 str r3,[r7,#164]
 2985 0896 40E0     	 b .L185
 2986              	.L188:
 2987              	.LBB14:
 669:../cleanflight/src/main/io/osd.c ****                 const int y = ((-rollAngle * x) / 64) - pitchAngle;
 2988              	 .loc 8 669 0
 2989 0898 D7F88030 	 ldr r3,[r7,#128]
 2990 089c 5B42     	 negs r3,r3
 2991 089e D7F8A420 	 ldr r2,[r7,#164]
 2992 08a2 02FB03F3 	 mul r3,r2,r3
 2993 08a6 002B     	 cmp r3,#0
 2994 08a8 00DA     	 bge .L186
 2995 08aa 3F33     	 adds r3,r3,#63
 2996              	.L186:
 2997 08ac 9B11     	 asrs r3,r3,#6
 2998 08ae 1A46     	 mov r2,r3
 2999 08b0 FB6F     	 ldr r3,[r7,#124]
 3000 08b2 D31A     	 subs r3,r2,r3
 3001 08b4 BB67     	 str r3,[r7,#120]
 670:../cleanflight/src/main/io/osd.c ****                 if (y >= 0 && y <= 81) {
 3002              	 .loc 8 670 0
 3003 08b6 BB6F     	 ldr r3,[r7,#120]
 3004 08b8 002B     	 cmp r3,#0
 3005 08ba 29DB     	 blt .L187
 3006              	 .loc 8 670 0 is_stmt 0 discriminator 1
 3007 08bc BB6F     	 ldr r3,[r7,#120]
 3008 08be 512B     	 cmp r3,#81
 3009 08c0 26DC     	 bgt .L187
 671:../cleanflight/src/main/io/osd.c ****                     displayWriteChar(osdDisplayPort, elemPosX + x, elemPosY + (y / AH_SYMBOL_COUNT)
 3010              	 .loc 8 671 0 is_stmt 1
 3011 08c2 554B     	 ldr r3,.L227+28
 3012 08c4 1868     	 ldr r0,[r3]
 3013 08c6 D7F8A430 	 ldr r3,[r7,#164]
 3014 08ca DAB2     	 uxtb r2,r3
 3015 08cc 97F88F30 	 ldrb r3,[r7,#143]
 3016 08d0 1344     	 add r3,r3,r2
 3017 08d2 DDB2     	 uxtb r5,r3
 3018 08d4 BB6F     	 ldr r3,[r7,#120]
 3019 08d6 514A     	 ldr r2,.L227+32
 3020 08d8 82FB0312 	 smull r1,r2,r2,r3
 3021 08dc 5210     	 asrs r2,r2,#1
 3022 08de DB17     	 asrs r3,r3,#31
 3023 08e0 D31A     	 subs r3,r2,r3
 3024 08e2 DAB2     	 uxtb r2,r3
 3025 08e4 97F88E30 	 ldrb r3,[r7,#142]
 3026 08e8 1344     	 add r3,r3,r2
 3027 08ea DCB2     	 uxtb r4,r3
 3028 08ec BA6F     	 ldr r2,[r7,#120]
 3029 08ee 4B4B     	 ldr r3,.L227+32
 3030 08f0 83FB0213 	 smull r1,r3,r3,r2
 3031 08f4 5910     	 asrs r1,r3,#1
 3032 08f6 D317     	 asrs r3,r2,#31
 3033 08f8 C91A     	 subs r1,r1,r3
 3034 08fa 0B46     	 mov r3,r1
 3035 08fc DB00     	 lsls r3,r3,#3
 3036 08fe 0B44     	 add r3,r3,r1
 3037 0900 D11A     	 subs r1,r2,r3
 3038 0902 CBB2     	 uxtb r3,r1
 3039 0904 803B     	 subs r3,r3,#128
 3040 0906 DBB2     	 uxtb r3,r3
 3041 0908 2946     	 mov r1,r5
 3042 090a 2246     	 mov r2,r4
 3043 090c FFF7FEFF 	 bl displayWriteChar
 3044              	.L187:
 3045              	.LBE14:
 668:../cleanflight/src/main/io/osd.c ****                 const int y = ((-rollAngle * x) / 64) - pitchAngle;
 3046              	 .loc 8 668 0 discriminator 2
 3047 0910 D7F8A430 	 ldr r3,[r7,#164]
 3048 0914 0133     	 adds r3,r3,#1
 3049 0916 C7F8A430 	 str r3,[r7,#164]
 3050              	.L185:
 668:../cleanflight/src/main/io/osd.c ****                 const int y = ((-rollAngle * x) / 64) - pitchAngle;
 3051              	 .loc 8 668 0 is_stmt 0 discriminator 1
 3052 091a D7F8A430 	 ldr r3,[r7,#164]
 3053 091e 042B     	 cmp r3,#4
 3054 0920 BADD     	 ble .L188
 3055              	.LBE13:
 672:../cleanflight/src/main/io/osd.c ****                 }
 673:../cleanflight/src/main/io/osd.c ****             }
 674:../cleanflight/src/main/io/osd.c **** 
 675:../cleanflight/src/main/io/osd.c ****             return true;
 3056              	 .loc 8 675 0 is_stmt 1
 3057 0922 0123     	 movs r3,#1
 3058 0924 91E3     	 b .L218
 3059              	.L119:
 3060              	.LBE12:
 3061              	.LBB15:
 676:../cleanflight/src/main/io/osd.c ****         }
 677:../cleanflight/src/main/io/osd.c **** 
 678:../cleanflight/src/main/io/osd.c ****     case OSD_HORIZON_SIDEBARS:
 679:../cleanflight/src/main/io/osd.c ****         {
 680:../cleanflight/src/main/io/osd.c ****             // Draw AH sides
 681:../cleanflight/src/main/io/osd.c ****             const int8_t hudwidth = AH_SIDEBAR_WIDTH_POS;
 3062              	 .loc 8 681 0
 3063 0926 0723     	 movs r3,#7
 3064 0928 87F87730 	 strb r3,[r7,#119]
 682:../cleanflight/src/main/io/osd.c ****             const int8_t hudheight = AH_SIDEBAR_HEIGHT_POS;
 3065              	 .loc 8 682 0
 3066 092c 0323     	 movs r3,#3
 3067 092e 87F87630 	 strb r3,[r7,#118]
 3068              	.LBB16:
 683:../cleanflight/src/main/io/osd.c ****             for (int y = -hudheight; y <= hudheight; y++) {
 3069              	 .loc 8 683 0
 3070 0932 97F97630 	 ldrsb r3,[r7,#118]
 3071 0936 5B42     	 negs r3,r3
 3072 0938 C7F8A030 	 str r3,[r7,#160]
 3073 093c 2AE0     	 b .L189
 3074              	.L190:
 684:../cleanflight/src/main/io/osd.c ****                 displayWriteChar(osdDisplayPort, elemPosX - hudwidth, elemPosY + y, SYM_AH_DECORATI
 3075              	 .loc 8 684 0 discriminator 3
 3076 093e 364B     	 ldr r3,.L227+28
 3077 0940 1868     	 ldr r0,[r3]
 3078 0942 97F87730 	 ldrb r3,[r7,#119]
 3079 0946 97F88F20 	 ldrb r2,[r7,#143]
 3080 094a D31A     	 subs r3,r2,r3
 3081 094c D9B2     	 uxtb r1,r3
 3082 094e D7F8A030 	 ldr r3,[r7,#160]
 3083 0952 DAB2     	 uxtb r2,r3
 3084 0954 97F88E30 	 ldrb r3,[r7,#142]
 3085 0958 1344     	 add r3,r3,r2
 3086 095a DBB2     	 uxtb r3,r3
 3087 095c 1A46     	 mov r2,r3
 3088 095e 1323     	 movs r3,#19
 3089 0960 FFF7FEFF 	 bl displayWriteChar
 685:../cleanflight/src/main/io/osd.c ****                 displayWriteChar(osdDisplayPort, elemPosX + hudwidth, elemPosY + y, SYM_AH_DECORATI
 3090              	 .loc 8 685 0 discriminator 3
 3091 0964 2C4B     	 ldr r3,.L227+28
 3092 0966 1868     	 ldr r0,[r3]
 3093 0968 97F87720 	 ldrb r2,[r7,#119]
 3094 096c 97F88F30 	 ldrb r3,[r7,#143]
 3095 0970 1344     	 add r3,r3,r2
 3096 0972 D9B2     	 uxtb r1,r3
 3097 0974 D7F8A030 	 ldr r3,[r7,#160]
 3098 0978 DAB2     	 uxtb r2,r3
 3099 097a 97F88E30 	 ldrb r3,[r7,#142]
 3100 097e 1344     	 add r3,r3,r2
 3101 0980 DBB2     	 uxtb r3,r3
 3102 0982 1A46     	 mov r2,r3
 3103 0984 1323     	 movs r3,#19
 3104 0986 FFF7FEFF 	 bl displayWriteChar
 683:../cleanflight/src/main/io/osd.c ****             for (int y = -hudheight; y <= hudheight; y++) {
 3105              	 .loc 8 683 0 discriminator 3
 3106 098a D7F8A030 	 ldr r3,[r7,#160]
 3107 098e 0133     	 adds r3,r3,#1
 3108 0990 C7F8A030 	 str r3,[r7,#160]
 3109              	.L189:
 683:../cleanflight/src/main/io/osd.c ****             for (int y = -hudheight; y <= hudheight; y++) {
 3110              	 .loc 8 683 0 is_stmt 0 discriminator 1
 3111 0994 97F97620 	 ldrsb r2,[r7,#118]
 3112 0998 D7F8A030 	 ldr r3,[r7,#160]
 3113 099c 9A42     	 cmp r2,r3
 3114 099e CEDA     	 bge .L190
 3115              	.LBE16:
 686:../cleanflight/src/main/io/osd.c ****             }
 687:../cleanflight/src/main/io/osd.c **** 
 688:../cleanflight/src/main/io/osd.c ****             // AH level indicators
 689:../cleanflight/src/main/io/osd.c ****             displayWriteChar(osdDisplayPort, elemPosX - hudwidth + 1, elemPosY, SYM_AH_LEFT);
 3116              	 .loc 8 689 0 is_stmt 1
 3117 09a0 1D4B     	 ldr r3,.L227+28
 3118 09a2 1968     	 ldr r1,[r3]
 3119 09a4 97F87730 	 ldrb r3,[r7,#119]
 3120 09a8 97F88F20 	 ldrb r2,[r7,#143]
 3121 09ac D31A     	 subs r3,r2,r3
 3122 09ae DBB2     	 uxtb r3,r3
 3123 09b0 0133     	 adds r3,r3,#1
 3124 09b2 DAB2     	 uxtb r2,r3
 3125 09b4 97F88E30 	 ldrb r3,[r7,#142]
 3126 09b8 0846     	 mov r0,r1
 3127 09ba 1146     	 mov r1,r2
 3128 09bc 1A46     	 mov r2,r3
 3129 09be 0323     	 movs r3,#3
 3130 09c0 FFF7FEFF 	 bl displayWriteChar
 690:../cleanflight/src/main/io/osd.c ****             displayWriteChar(osdDisplayPort, elemPosX + hudwidth - 1, elemPosY, SYM_AH_RIGHT);
 3131              	 .loc 8 690 0
 3132 09c4 144B     	 ldr r3,.L227+28
 3133 09c6 1968     	 ldr r1,[r3]
 3134 09c8 97F87720 	 ldrb r2,[r7,#119]
 3135 09cc 97F88F30 	 ldrb r3,[r7,#143]
 3136 09d0 1344     	 add r3,r3,r2
 3137 09d2 DBB2     	 uxtb r3,r3
 3138 09d4 013B     	 subs r3,r3,#1
 3139 09d6 DAB2     	 uxtb r2,r3
 3140 09d8 97F88E30 	 ldrb r3,[r7,#142]
 3141 09dc 0846     	 mov r0,r1
 3142 09de 1146     	 mov r1,r2
 3143 09e0 1A46     	 mov r2,r3
 3144 09e2 0223     	 movs r3,#2
 3145 09e4 FFF7FEFF 	 bl displayWriteChar
 691:../cleanflight/src/main/io/osd.c **** 
 692:../cleanflight/src/main/io/osd.c ****             return true;
 3146              	 .loc 8 692 0
 3147 09e8 0123     	 movs r3,#1
 3148 09ea 2EE3     	 b .L218
 3149              	.L152:
 3150              	.LBE15:
 3151              	.LBB17:
 693:../cleanflight/src/main/io/osd.c ****         }
 694:../cleanflight/src/main/io/osd.c **** 
 695:../cleanflight/src/main/io/osd.c ****     case OSD_G_FORCE:
 696:../cleanflight/src/main/io/osd.c ****         {
 697:../cleanflight/src/main/io/osd.c ****             float osdGForce = 0;
 3152              	 .loc 8 697 0
 3153 09ec 4FF00003 	 mov r3,#0
 3154 09f0 C7F89C30 	 str r3,[r7,#156]
 3155              	.LBB18:
 698:../cleanflight/src/main/io/osd.c ****             for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 3156              	 .loc 8 698 0
 3157 09f4 0023     	 movs r3,#0
 3158 09f6 C7F89830 	 str r3,[r7,#152]
 3159 09fa 29E0     	 b .L191
 3160              	.L228:
 3161              	 .align 2
 3162              	.L227:
 3163 09fc 00000000 	 .word rcData
 3164 0a00 D34D6210 	 .word 274877907
 3165 0a04 00010000 	 .word .LC27
 3166 0a08 00000000 	 .word vtx58BandLetter
 3167 0a0c 00000000 	 .word vtx58ChannelNames
 3168 0a10 04010000 	 .word .LC28
 3169 0a14 00000000 	 .word attitude
 3170 0a18 00000000 	 .word osdDisplayPort
 3171 0a1c 398EE338 	 .word 954437177
 3172              	.L192:
 3173              	.LBB19:
 699:../cleanflight/src/main/io/osd.c ****                 const float a = accAverage[axis];
 3174              	 .loc 8 699 0 discriminator 3
 3175 0a20 C64A     	 ldr r2,.L229
 3176 0a22 D7F89830 	 ldr r3,[r7,#152]
 3177 0a26 9B00     	 lsls r3,r3,#2
 3178 0a28 1344     	 add r3,r3,r2
 3179 0a2a 1B68     	 ldr r3,[r3]
 3180 0a2c 3B65     	 str r3,[r7,#80]
 700:../cleanflight/src/main/io/osd.c ****                 osdGForce += a * a;
 3181              	 .loc 8 700 0 discriminator 3
 3182 0a2e 97ED147A 	 flds s14,[r7,#80]
 3183 0a32 D7ED147A 	 flds s15,[r7,#80]
 3184 0a36 67EE277A 	 fmuls s15,s14,s15
 3185 0a3a 97ED277A 	 flds s14,[r7,#156]
 3186 0a3e 77EE277A 	 fadds s15,s14,s15
 3187 0a42 C7ED277A 	 fsts s15,[r7,#156]
 3188              	.LBE19:
 698:../cleanflight/src/main/io/osd.c ****             for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 3189              	 .loc 8 698 0 discriminator 3
 3190 0a46 D7F89830 	 ldr r3,[r7,#152]
 3191 0a4a 0133     	 adds r3,r3,#1
 3192 0a4c C7F89830 	 str r3,[r7,#152]
 3193              	.L191:
 698:../cleanflight/src/main/io/osd.c ****             for (int axis = 0; axis < XYZ_AXIS_COUNT; axis++) {
 3194              	 .loc 8 698 0 is_stmt 0 discriminator 1
 3195 0a50 D7F89830 	 ldr r3,[r7,#152]
 3196 0a54 022B     	 cmp r3,#2
 3197 0a56 E3DD     	 ble .L192
 3198              	.LBE18:
 701:../cleanflight/src/main/io/osd.c ****             }
 702:../cleanflight/src/main/io/osd.c ****             osdGForce = sqrtf(osdGForce) / acc.dev.acc_1G;
 3199              	 .loc 8 702 0 is_stmt 1
 3200 0a58 D7F89C00 	 ldr r0,[r7,#156]
 3201 0a5c FFF7FEFF 	 bl sqrtf
 3202 0a60 07EE100A 	 fmsr s14,r0
 3203 0a64 B64B     	 ldr r3,.L229+4
 3204 0a66 B3F81130 	 ldrh r3,[r3,#17]
 3205 0a6a 9BB2     	 uxth r3,r3
 3206 0a6c 07EE903A 	 fmsr s15,r3
 3207 0a70 F8EEE77A 	 fsitos s15,s15
 3208 0a74 C7EE277A 	 fdivs s15,s14,s15
 3209 0a78 C7ED277A 	 fsts s15,[r7,#156]
 703:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%01d.%01dG", (int)osdGForce, (int)(osdGForce * 10) % 10);
 3210              	 .loc 8 703 0
 3211 0a7c D7ED277A 	 flds s15,[r7,#156]
 3212 0a80 FDEEE76A 	 ftosizs s13,s15
 3213 0a84 D7ED277A 	 flds s15,[r7,#156]
 3214 0a88 B2EE047A 	 fconsts s14,#36
 3215 0a8c 67EE877A 	 fmuls s15,s15,s14
 3216 0a90 FDEEE77A 	 ftosizs s15,s15
 3217 0a94 17EE902A 	 fmrs r2,s15
 3218 0a98 AA4B     	 ldr r3,.L229+8
 3219 0a9a 83FB0213 	 smull r1,r3,r3,r2
 3220 0a9e 9910     	 asrs r1,r3,#2
 3221 0aa0 D317     	 asrs r3,r2,#31
 3222 0aa2 CC1A     	 subs r4,r1,r3
 3223 0aa4 2346     	 mov r3,r4
 3224 0aa6 9B00     	 lsls r3,r3,#2
 3225 0aa8 2344     	 add r3,r3,r4
 3226 0aaa 5B00     	 lsls r3,r3,#1
 3227 0aac D41A     	 subs r4,r2,r3
 3228 0aae 07F10C03 	 add r3,r7,#12
 3229 0ab2 1846     	 mov r0,r3
 3230 0ab4 A449     	 ldr r1,.L229+12
 3231 0ab6 16EE902A 	 fmrs r2,s13
 3232 0aba 2346     	 mov r3,r4
 3233 0abc FFF7FEFF 	 bl tfp_sprintf
 704:../cleanflight/src/main/io/osd.c ****             break;
 3234              	 .loc 8 704 0
 3235 0ac0 B8E2     	 b .L155
 3236              	.L130:
 3237              	.LBE17:
 705:../cleanflight/src/main/io/osd.c ****         }
 706:../cleanflight/src/main/io/osd.c **** 
 707:../cleanflight/src/main/io/osd.c ****     case OSD_ROLL_PIDS:
 708:../cleanflight/src/main/io/osd.c ****         osdFormatPID(buff, "ROL", &currentPidProfile->pid[PID_ROLL]);
 3238              	 .loc 8 708 0
 3239 0ac2 A24B     	 ldr r3,.L229+16
 3240 0ac4 1B68     	 ldr r3,[r3]
 3241 0ac6 0833     	 adds r3,r3,#8
 3242 0ac8 07F10C02 	 add r2,r7,#12
 3243 0acc 1046     	 mov r0,r2
 3244 0ace A049     	 ldr r1,.L229+20
 3245 0ad0 1A46     	 mov r2,r3
 3246 0ad2 FFF7FEFF 	 bl osdFormatPID
 709:../cleanflight/src/main/io/osd.c ****         break;
 3247              	 .loc 8 709 0
 3248 0ad6 ADE2     	 b .L155
 3249              	.L131:
 710:../cleanflight/src/main/io/osd.c **** 
 711:../cleanflight/src/main/io/osd.c ****     case OSD_PITCH_PIDS:
 712:../cleanflight/src/main/io/osd.c ****         osdFormatPID(buff, "PIT", &currentPidProfile->pid[PID_PITCH]);
 3250              	 .loc 8 712 0
 3251 0ad8 9C4B     	 ldr r3,.L229+16
 3252 0ada 1B68     	 ldr r3,[r3]
 3253 0adc 0D33     	 adds r3,r3,#13
 3254 0ade 07F10C02 	 add r2,r7,#12
 3255 0ae2 1046     	 mov r0,r2
 3256 0ae4 9B49     	 ldr r1,.L229+24
 3257 0ae6 1A46     	 mov r2,r3
 3258 0ae8 FFF7FEFF 	 bl osdFormatPID
 713:../cleanflight/src/main/io/osd.c ****         break;
 3259              	 .loc 8 713 0
 3260 0aec A2E2     	 b .L155
 3261              	.L132:
 714:../cleanflight/src/main/io/osd.c **** 
 715:../cleanflight/src/main/io/osd.c ****     case OSD_YAW_PIDS:
 716:../cleanflight/src/main/io/osd.c ****         osdFormatPID(buff, "YAW", &currentPidProfile->pid[PID_YAW]);
 3262              	 .loc 8 716 0
 3263 0aee 974B     	 ldr r3,.L229+16
 3264 0af0 1B68     	 ldr r3,[r3]
 3265 0af2 1233     	 adds r3,r3,#18
 3266 0af4 07F10C02 	 add r2,r7,#12
 3267 0af8 1046     	 mov r0,r2
 3268 0afa 9749     	 ldr r1,.L229+28
 3269 0afc 1A46     	 mov r2,r3
 3270 0afe FFF7FEFF 	 bl osdFormatPID
 717:../cleanflight/src/main/io/osd.c ****         break;
 3271              	 .loc 8 717 0
 3272 0b02 97E2     	 b .L155
 3273              	.L133:
 718:../cleanflight/src/main/io/osd.c **** 
 719:../cleanflight/src/main/io/osd.c ****     case OSD_POWER:
 720:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%4dW", getAmperage() * getBatteryVoltage() / 1000);
 3274              	 .loc 8 720 0
 3275 0b04 FFF7FEFF 	 bl getAmperage
 3276 0b08 0446     	 mov r4,r0
 3277 0b0a FFF7FEFF 	 bl getBatteryVoltage
 3278 0b0e 0346     	 mov r3,r0
 3279 0b10 03FB04F3 	 mul r3,r3,r4
 3280 0b14 914A     	 ldr r2,.L229+32
 3281 0b16 82FB0312 	 smull r1,r2,r2,r3
 3282 0b1a 9211     	 asrs r2,r2,#6
 3283 0b1c DB17     	 asrs r3,r3,#31
 3284 0b1e D31A     	 subs r3,r2,r3
 3285 0b20 07F10C02 	 add r2,r7,#12
 3286 0b24 1046     	 mov r0,r2
 3287 0b26 8E49     	 ldr r1,.L229+36
 3288 0b28 1A46     	 mov r2,r3
 3289 0b2a FFF7FEFF 	 bl tfp_sprintf
 721:../cleanflight/src/main/io/osd.c ****         break;
 3290              	 .loc 8 721 0
 3291 0b2e 81E2     	 b .L155
 3292              	.L134:
 722:../cleanflight/src/main/io/osd.c **** 
 723:../cleanflight/src/main/io/osd.c ****     case OSD_PIDRATE_PROFILE:
 724:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%d-%d", getCurrentPidProfileIndex() + 1, getCurrentControlRateProfileInd
 3293              	 .loc 8 724 0
 3294 0b30 FFF7FEFF 	 bl getCurrentPidProfileIndex
 3295 0b34 0346     	 mov r3,r0
 3296 0b36 5C1C     	 adds r4,r3,#1
 3297 0b38 FFF7FEFF 	 bl getCurrentControlRateProfileIndex
 3298 0b3c 0346     	 mov r3,r0
 3299 0b3e 0133     	 adds r3,r3,#1
 3300 0b40 07F10C02 	 add r2,r7,#12
 3301 0b44 1046     	 mov r0,r2
 3302 0b46 8749     	 ldr r1,.L229+40
 3303 0b48 2246     	 mov r2,r4
 3304 0b4a FFF7FEFF 	 bl tfp_sprintf
 725:../cleanflight/src/main/io/osd.c ****         break;
 3305              	 .loc 8 725 0
 3306 0b4e 71E2     	 b .L155
 3307              	.L135:
 3308              	.LBB20:
 726:../cleanflight/src/main/io/osd.c **** 
 727:../cleanflight/src/main/io/osd.c ****     case OSD_WARNINGS:
 728:../cleanflight/src/main/io/osd.c ****         {
 729:../cleanflight/src/main/io/osd.c **** 
 730:../cleanflight/src/main/io/osd.c **** #define OSD_WARNINGS_MAX_SIZE 11
 731:../cleanflight/src/main/io/osd.c **** #define OSD_FORMAT_MESSAGE_BUFFER_SIZE (OSD_WARNINGS_MAX_SIZE + 1)
 732:../cleanflight/src/main/io/osd.c **** 
 733:../cleanflight/src/main/io/osd.c ****             STATIC_ASSERT(OSD_FORMAT_MESSAGE_BUFFER_SIZE <= sizeof(buff), osd_warnings_size_exceeds
 734:../cleanflight/src/main/io/osd.c **** 
 735:../cleanflight/src/main/io/osd.c ****             const batteryState_e batteryState = getBatteryState();
 3309              	 .loc 8 735 0
 3310 0b50 FFF7FEFF 	 bl getBatteryState
 3311 0b54 0346     	 mov r3,r0
 3312 0b56 87F84F30 	 strb r3,[r7,#79]
 736:../cleanflight/src/main/io/osd.c **** 
 737:../cleanflight/src/main/io/osd.c **** #ifdef USE_DSHOT
 738:../cleanflight/src/main/io/osd.c ****             if (isTryingToArm() && !ARMING_FLAG(ARMED)) {
 739:../cleanflight/src/main/io/osd.c ****                 int armingDelayTime = (getLastDshotBeaconCommandTimeUs() + DSHOT_BEACON_GUARD_DELAY
 740:../cleanflight/src/main/io/osd.c ****                 if (armingDelayTime < 0) {
 741:../cleanflight/src/main/io/osd.c ****                     armingDelayTime = 0;
 742:../cleanflight/src/main/io/osd.c ****                 }
 743:../cleanflight/src/main/io/osd.c ****                 if (armingDelayTime >= (DSHOT_BEACON_GUARD_DELAY_US / 1e5 - 5)) {
 744:../cleanflight/src/main/io/osd.c ****                     osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, " BEACON ON"); // Displa
 745:../cleanflight/src/main/io/osd.c ****                 } else {
 746:../cleanflight/src/main/io/osd.c ****                     char armingDelayMessage[OSD_FORMAT_MESSAGE_BUFFER_SIZE];
 747:../cleanflight/src/main/io/osd.c ****                     tfp_sprintf(armingDelayMessage, "ARM IN %d.%d", armingDelayTime / 10, armingDel
 748:../cleanflight/src/main/io/osd.c ****                     osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, armingDelayMessage);
 749:../cleanflight/src/main/io/osd.c ****                 }
 750:../cleanflight/src/main/io/osd.c ****                 break;
 751:../cleanflight/src/main/io/osd.c ****             }
 752:../cleanflight/src/main/io/osd.c **** #endif
 753:../cleanflight/src/main/io/osd.c **** 
 754:../cleanflight/src/main/io/osd.c ****             if (osdWarnGetState(OSD_WARNING_BATTERY_CRITICAL) && batteryState == BATTERY_CRITICAL) 
 3313              	 .loc 8 754 0
 3314 0b5a 0320     	 movs r0,#3
 3315 0b5c FFF7FEFF 	 bl osdWarnGetState
 3316 0b60 0346     	 mov r3,r0
 3317 0b62 002B     	 cmp r3,#0
 3318 0b64 0BD0     	 beq .L193
 3319              	 .loc 8 754 0 is_stmt 0 discriminator 1
 3320 0b66 97F84F30 	 ldrb r3,[r7,#79]
 3321 0b6a 022B     	 cmp r3,#2
 3322 0b6c 07D1     	 bne .L193
 755:../cleanflight/src/main/io/osd.c ****                 osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, " LAND NOW");
 3323              	 .loc 8 755 0 is_stmt 1
 3324 0b6e 07F10C03 	 add r3,r7,#12
 3325 0b72 1846     	 mov r0,r3
 3326 0b74 0C21     	 movs r1,#12
 3327 0b76 7C4A     	 ldr r2,.L229+44
 3328 0b78 FFF7FEFF 	 bl osdFormatMessage
 756:../cleanflight/src/main/io/osd.c ****                 break;
 3329              	 .loc 8 756 0
 3330 0b7c 5AE2     	 b .L155
 3331              	.L193:
 757:../cleanflight/src/main/io/osd.c ****             }
 758:../cleanflight/src/main/io/osd.c **** 
 759:../cleanflight/src/main/io/osd.c **** #ifdef USE_ADC_INTERNAL
 760:../cleanflight/src/main/io/osd.c ****             uint8_t coreTemperature = getCoreTemperatureCelsius();
 761:../cleanflight/src/main/io/osd.c ****             if (osdWarnGetState(OSD_WARNING_CORE_TEMPERATURE) && coreTemperature >= osdConfig()->co
 762:../cleanflight/src/main/io/osd.c ****                 char coreTemperatureWarningMsg[OSD_FORMAT_MESSAGE_BUFFER_SIZE];
 763:../cleanflight/src/main/io/osd.c ****                 tfp_sprintf(coreTemperatureWarningMsg, "CORE: %3d%c", osdConvertTemperatureToSelect
 764:../cleanflight/src/main/io/osd.c **** 
 765:../cleanflight/src/main/io/osd.c ****                 osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, coreTemperatureWarningMsg);
 766:../cleanflight/src/main/io/osd.c **** 
 767:../cleanflight/src/main/io/osd.c ****                 break;
 768:../cleanflight/src/main/io/osd.c ****             }
 769:../cleanflight/src/main/io/osd.c **** #endif
 770:../cleanflight/src/main/io/osd.c **** 
 771:../cleanflight/src/main/io/osd.c **** #ifdef USE_ESC_SENSOR
 772:../cleanflight/src/main/io/osd.c ****             // Show warning if we lose motor output, the ESC is overheating or excessive current dr
 773:../cleanflight/src/main/io/osd.c ****             if (feature(FEATURE_ESC_SENSOR) && osdWarnGetState(OSD_WARNING_ESC_FAIL)) {
 774:../cleanflight/src/main/io/osd.c ****                 char escWarningMsg[OSD_FORMAT_MESSAGE_BUFFER_SIZE];
 775:../cleanflight/src/main/io/osd.c ****                 unsigned pos = 0;
 776:../cleanflight/src/main/io/osd.c ****                 
 777:../cleanflight/src/main/io/osd.c ****                 const char *title = "ESC";
 778:../cleanflight/src/main/io/osd.c **** 
 779:../cleanflight/src/main/io/osd.c ****                 // center justify message
 780:../cleanflight/src/main/io/osd.c ****                 while (pos < (OSD_WARNINGS_MAX_SIZE - (strlen(title) + getMotorCount())) / 2) {
 781:../cleanflight/src/main/io/osd.c ****                     escWarningMsg[pos++] = ' ';
 782:../cleanflight/src/main/io/osd.c ****                 }
 783:../cleanflight/src/main/io/osd.c **** 
 784:../cleanflight/src/main/io/osd.c ****                 strcpy(escWarningMsg + pos, title);
 785:../cleanflight/src/main/io/osd.c ****                 pos += strlen(title);
 786:../cleanflight/src/main/io/osd.c **** 
 787:../cleanflight/src/main/io/osd.c ****                 unsigned i = 0;
 788:../cleanflight/src/main/io/osd.c ****                 unsigned escWarningCount = 0;
 789:../cleanflight/src/main/io/osd.c ****                 while (i < getMotorCount() && pos < OSD_FORMAT_MESSAGE_BUFFER_SIZE - 1) {
 790:../cleanflight/src/main/io/osd.c ****                     escSensorData_t *escData = getEscSensorData(i);
 791:../cleanflight/src/main/io/osd.c ****                     const char motorNumber = '1' + i;
 792:../cleanflight/src/main/io/osd.c ****                     // if everything is OK just display motor number else R, T or C
 793:../cleanflight/src/main/io/osd.c ****                     char warnFlag = motorNumber;
 794:../cleanflight/src/main/io/osd.c ****                     if (ARMING_FLAG(ARMED) && osdConfig()->esc_rpm_alarm != ESC_RPM_ALARM_OFF && ca
 795:../cleanflight/src/main/io/osd.c ****                         warnFlag = 'R';
 796:../cleanflight/src/main/io/osd.c ****                     }
 797:../cleanflight/src/main/io/osd.c ****                     if (osdConfig()->esc_temp_alarm != ESC_TEMP_ALARM_OFF && escData->temperature >
 798:../cleanflight/src/main/io/osd.c ****                         warnFlag = 'T';
 799:../cleanflight/src/main/io/osd.c ****                     }
 800:../cleanflight/src/main/io/osd.c ****                     if (ARMING_FLAG(ARMED) && osdConfig()->esc_current_alarm != ESC_CURRENT_ALARM_O
 801:../cleanflight/src/main/io/osd.c ****                         warnFlag = 'C';
 802:../cleanflight/src/main/io/osd.c ****                     }
 803:../cleanflight/src/main/io/osd.c **** 
 804:../cleanflight/src/main/io/osd.c ****                     escWarningMsg[pos++] = warnFlag;
 805:../cleanflight/src/main/io/osd.c **** 
 806:../cleanflight/src/main/io/osd.c ****                     if (warnFlag != motorNumber) {
 807:../cleanflight/src/main/io/osd.c ****                         escWarningCount++;
 808:../cleanflight/src/main/io/osd.c ****                     }
 809:../cleanflight/src/main/io/osd.c **** 
 810:../cleanflight/src/main/io/osd.c ****                     i++;
 811:../cleanflight/src/main/io/osd.c ****                 }
 812:../cleanflight/src/main/io/osd.c **** 
 813:../cleanflight/src/main/io/osd.c ****                 escWarningMsg[pos] = '\0';
 814:../cleanflight/src/main/io/osd.c **** 
 815:../cleanflight/src/main/io/osd.c ****                 if (escWarningCount > 0) {
 816:../cleanflight/src/main/io/osd.c ****                     osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, escWarningMsg);
 817:../cleanflight/src/main/io/osd.c ****                     break;
 818:../cleanflight/src/main/io/osd.c ****                 }
 819:../cleanflight/src/main/io/osd.c ****             }
 820:../cleanflight/src/main/io/osd.c **** #endif
 821:../cleanflight/src/main/io/osd.c **** 
 822:../cleanflight/src/main/io/osd.c ****             // Warn when in flip over after crash mode
 823:../cleanflight/src/main/io/osd.c ****             if (osdWarnGetState(OSD_WARNING_CRASH_FLIP) && isFlipOverAfterCrashMode()) {
 3332              	 .loc 8 823 0
 3333 0b7e 0520     	 movs r0,#5
 3334 0b80 FFF7FEFF 	 bl osdWarnGetState
 3335 0b84 0346     	 mov r3,r0
 3336 0b86 002B     	 cmp r3,#0
 3337 0b88 0CD0     	 beq .L194
 3338              	 .loc 8 823 0 is_stmt 0 discriminator 1
 3339 0b8a FFF7FEFF 	 bl isFlipOverAfterCrashMode
 3340 0b8e 0346     	 mov r3,r0
 3341 0b90 002B     	 cmp r3,#0
 3342 0b92 07D0     	 beq .L194
 824:../cleanflight/src/main/io/osd.c ****                 osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, "CRASH FLIP");
 3343              	 .loc 8 824 0 is_stmt 1
 3344 0b94 07F10C03 	 add r3,r7,#12
 3345 0b98 1846     	 mov r0,r3
 3346 0b9a 0C21     	 movs r1,#12
 3347 0b9c 734A     	 ldr r2,.L229+48
 3348 0b9e FFF7FEFF 	 bl osdFormatMessage
 825:../cleanflight/src/main/io/osd.c ****                 break;
 3349              	 .loc 8 825 0
 3350 0ba2 47E2     	 b .L155
 3351              	.L194:
 826:../cleanflight/src/main/io/osd.c ****             }
 827:../cleanflight/src/main/io/osd.c **** 
 828:../cleanflight/src/main/io/osd.c ****             // Show most severe reason for arming being disabled
 829:../cleanflight/src/main/io/osd.c ****             if (osdWarnGetState(OSD_WARNING_ARMING_DISABLE) && IS_RC_MODE_ACTIVE(BOXARM) && isArmin
 3352              	 .loc 8 829 0
 3353 0ba4 0020     	 movs r0,#0
 3354 0ba6 FFF7FEFF 	 bl osdWarnGetState
 3355 0baa 0346     	 mov r3,r0
 3356 0bac 002B     	 cmp r3,#0
 3357 0bae 32D0     	 beq .L195
 3358              	 .loc 8 829 0 is_stmt 0 discriminator 1
 3359 0bb0 0020     	 movs r0,#0
 3360 0bb2 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 3361 0bb6 0346     	 mov r3,r0
 3362 0bb8 002B     	 cmp r3,#0
 3363 0bba 2CD0     	 beq .L195
 3364              	 .loc 8 829 0 discriminator 2
 3365 0bbc FFF7FEFF 	 bl isArmingDisabled
 3366 0bc0 0346     	 mov r3,r0
 3367 0bc2 002B     	 cmp r3,#0
 3368 0bc4 27D0     	 beq .L195
 3369              	.LBB21:
 830:../cleanflight/src/main/io/osd.c ****                 const armingDisableFlags_e flags = getArmingDisableFlags();
 3370              	 .loc 8 830 0 is_stmt 1
 3371 0bc6 FFF7FEFF 	 bl getArmingDisableFlags
 3372 0bca B864     	 str r0,[r7,#72]
 3373              	.LBB22:
 831:../cleanflight/src/main/io/osd.c ****                 for (int i = 0; i < ARMING_DISABLE_FLAGS_COUNT; i++) {
 3374              	 .loc 8 831 0
 3375 0bcc 0023     	 movs r3,#0
 3376 0bce C7F89430 	 str r3,[r7,#148]
 3377 0bd2 1BE0     	 b .L196
 3378              	.L199:
 832:../cleanflight/src/main/io/osd.c ****                     if (flags & (1 << i)) {
 3379              	 .loc 8 832 0
 3380 0bd4 0122     	 movs r2,#1
 3381 0bd6 D7F89430 	 ldr r3,[r7,#148]
 3382 0bda 02FA03F3 	 lsl r3,r2,r3
 3383 0bde 1A46     	 mov r2,r3
 3384 0be0 BB6C     	 ldr r3,[r7,#72]
 3385 0be2 1340     	 ands r3,r3,r2
 3386 0be4 002B     	 cmp r3,#0
 3387 0be6 0CD0     	 beq .L197
 833:../cleanflight/src/main/io/osd.c ****                         osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, armingDisableFlagNam
 3388              	 .loc 8 833 0
 3389 0be8 614A     	 ldr r2,.L229+52
 3390 0bea D7F89430 	 ldr r3,[r7,#148]
 3391 0bee 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3392 0bf2 07F10C02 	 add r2,r7,#12
 3393 0bf6 1046     	 mov r0,r2
 3394 0bf8 0C21     	 movs r1,#12
 3395 0bfa 1A46     	 mov r2,r3
 3396 0bfc FFF7FEFF 	 bl osdFormatMessage
 834:../cleanflight/src/main/io/osd.c ****                         break;
 3397              	 .loc 8 834 0
 3398 0c00 08E0     	 b .L198
 3399              	.L197:
 831:../cleanflight/src/main/io/osd.c ****                     if (flags & (1 << i)) {
 3400              	 .loc 8 831 0 discriminator 2
 3401 0c02 D7F89430 	 ldr r3,[r7,#148]
 3402 0c06 0133     	 adds r3,r3,#1
 3403 0c08 C7F89430 	 str r3,[r7,#148]
 3404              	.L196:
 831:../cleanflight/src/main/io/osd.c ****                     if (flags & (1 << i)) {
 3405              	 .loc 8 831 0 is_stmt 0 discriminator 1
 3406 0c0c D7F89430 	 ldr r3,[r7,#148]
 3407 0c10 132B     	 cmp r3,#19
 3408 0c12 DFDD     	 ble .L199
 3409              	.L198:
 3410              	.LBE22:
 835:../cleanflight/src/main/io/osd.c ****                     }
 836:../cleanflight/src/main/io/osd.c ****                 }
 837:../cleanflight/src/main/io/osd.c ****                 break;
 3411              	 .loc 8 837 0 is_stmt 1
 3412 0c14 0EE2     	 b .L155
 3413              	.L195:
 3414              	.LBE21:
 838:../cleanflight/src/main/io/osd.c ****             }
 839:../cleanflight/src/main/io/osd.c **** 
 840:../cleanflight/src/main/io/osd.c ****             if (osdWarnGetState(OSD_WARNING_BATTERY_WARNING) && batteryState == BATTERY_WARNING) {
 3415              	 .loc 8 840 0
 3416 0c16 0220     	 movs r0,#2
 3417 0c18 FFF7FEFF 	 bl osdWarnGetState
 3418 0c1c 0346     	 mov r3,r0
 3419 0c1e 002B     	 cmp r3,#0
 3420 0c20 0BD0     	 beq .L200
 3421              	 .loc 8 840 0 is_stmt 0 discriminator 1
 3422 0c22 97F84F30 	 ldrb r3,[r7,#79]
 3423 0c26 012B     	 cmp r3,#1
 3424 0c28 07D1     	 bne .L200
 841:../cleanflight/src/main/io/osd.c ****                 osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, "LOW BATTERY");
 3425              	 .loc 8 841 0 is_stmt 1
 3426 0c2a 07F10C03 	 add r3,r7,#12
 3427 0c2e 1846     	 mov r0,r3
 3428 0c30 0C21     	 movs r1,#12
 3429 0c32 504A     	 ldr r2,.L229+56
 3430 0c34 FFF7FEFF 	 bl osdFormatMessage
 842:../cleanflight/src/main/io/osd.c ****                 break;
 3431              	 .loc 8 842 0
 3432 0c38 FCE1     	 b .L155
 3433              	.L200:
 843:../cleanflight/src/main/io/osd.c ****             }
 844:../cleanflight/src/main/io/osd.c **** 
 845:../cleanflight/src/main/io/osd.c **** #ifdef USE_RC_SMOOTHING_FILTER
 846:../cleanflight/src/main/io/osd.c ****             // Show warning if rc smoothing hasn't initialized the filters
 847:../cleanflight/src/main/io/osd.c ****             if (osdWarnGetState(OSD_WARNING_RC_SMOOTHING) && ARMING_FLAG(ARMED) && !rcSmoothingInit
 3434              	 .loc 8 847 0
 3435 0c3a 0820     	 movs r0,#8
 3436 0c3c FFF7FEFF 	 bl osdWarnGetState
 3437 0c40 0346     	 mov r3,r0
 3438 0c42 002B     	 cmp r3,#0
 3439 0c44 15D0     	 beq .L201
 3440              	 .loc 8 847 0 is_stmt 0 discriminator 1
 3441 0c46 4C4B     	 ldr r3,.L229+60
 3442 0c48 1B78     	 ldrb r3,[r3]
 3443 0c4a 03F00103 	 and r3,r3,#1
 3444 0c4e 002B     	 cmp r3,#0
 3445 0c50 0FD0     	 beq .L201
 3446              	 .loc 8 847 0 discriminator 2
 3447 0c52 FFF7FEFF 	 bl rcSmoothingInitializationComplete
 3448 0c56 0346     	 mov r3,r0
 3449 0c58 83F00103 	 eor r3,r3,#1
 3450 0c5c DBB2     	 uxtb r3,r3
 3451 0c5e 002B     	 cmp r3,#0
 3452 0c60 07D0     	 beq .L201
 848:../cleanflight/src/main/io/osd.c ****                 osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, "RCSMOOTHING");
 3453              	 .loc 8 848 0 is_stmt 1
 3454 0c62 07F10C03 	 add r3,r7,#12
 3455 0c66 1846     	 mov r0,r3
 3456 0c68 0C21     	 movs r1,#12
 3457 0c6a 444A     	 ldr r2,.L229+64
 3458 0c6c FFF7FEFF 	 bl osdFormatMessage
 849:../cleanflight/src/main/io/osd.c ****                 break;
 3459              	 .loc 8 849 0
 3460 0c70 E0E1     	 b .L155
 3461              	.L201:
 850:../cleanflight/src/main/io/osd.c ****             }
 851:../cleanflight/src/main/io/osd.c **** #endif
 852:../cleanflight/src/main/io/osd.c **** 
 853:../cleanflight/src/main/io/osd.c ****             // Show warning if battery is not fresh
 854:../cleanflight/src/main/io/osd.c ****             if (osdWarnGetState(OSD_WARNING_BATTERY_NOT_FULL) && !ARMING_FLAG(WAS_EVER_ARMED) && (g
 3462              	 .loc 8 854 0
 3463 0c72 0120     	 movs r0,#1
 3464 0c74 FFF7FEFF 	 bl osdWarnGetState
 3465 0c78 0346     	 mov r3,r0
 3466 0c7a 002B     	 cmp r3,#0
 3467 0c7c 1DD0     	 beq .L202
 3468              	 .loc 8 854 0 is_stmt 0 discriminator 1
 3469 0c7e 3E4B     	 ldr r3,.L229+60
 3470 0c80 1B78     	 ldrb r3,[r3]
 3471 0c82 03F00203 	 and r3,r3,#2
 3472 0c86 002B     	 cmp r3,#0
 3473 0c88 17D1     	 bne .L202
 3474              	 .loc 8 854 0 discriminator 2
 3475 0c8a FFF7FEFF 	 bl getBatteryState
 3476 0c8e 0346     	 mov r3,r0
 3477 0c90 002B     	 cmp r3,#0
 3478 0c92 12D1     	 bne .L202
 855:../cleanflight/src/main/io/osd.c ****                   && getBatteryAverageCellVoltage() < batteryConfig()->vbatfullcellvoltage) {
 3479              	 .loc 8 855 0 is_stmt 1
 3480 0c94 FFF7FEFF 	 bl getBatteryAverageCellVoltage
 3481 0c98 0346     	 mov r3,r0
 3482 0c9a 1C46     	 mov r4,r3
 3483 0c9c FFF7FEFF 	 bl batteryConfig
 3484 0ca0 0346     	 mov r3,r0
 3485 0ca2 5B7B     	 ldrb r3,[r3,#13]
 3486 0ca4 9BB2     	 uxth r3,r3
 3487 0ca6 9C42     	 cmp r4,r3
 3488 0ca8 07D2     	 bcs .L202
 856:../cleanflight/src/main/io/osd.c ****                 osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, "BATT < FULL");
 3489              	 .loc 8 856 0
 3490 0caa 07F10C03 	 add r3,r7,#12
 3491 0cae 1846     	 mov r0,r3
 3492 0cb0 0C21     	 movs r1,#12
 3493 0cb2 334A     	 ldr r2,.L229+68
 3494 0cb4 FFF7FEFF 	 bl osdFormatMessage
 857:../cleanflight/src/main/io/osd.c ****                 break;
 3495              	 .loc 8 857 0
 3496 0cb8 BCE1     	 b .L155
 3497              	.L202:
 858:../cleanflight/src/main/io/osd.c ****             }
 859:../cleanflight/src/main/io/osd.c **** 
 860:../cleanflight/src/main/io/osd.c ****             // Visual beeper
 861:../cleanflight/src/main/io/osd.c ****             if (osdWarnGetState(OSD_WARNING_VISUAL_BEEPER) && showVisualBeeper) {
 3498              	 .loc 8 861 0
 3499 0cba 0420     	 movs r0,#4
 3500 0cbc FFF7FEFF 	 bl osdWarnGetState
 3501 0cc0 0346     	 mov r3,r0
 3502 0cc2 002B     	 cmp r3,#0
 3503 0cc4 0BD0     	 beq .L203
 3504              	 .loc 8 861 0 is_stmt 0 discriminator 1
 3505 0cc6 2F4B     	 ldr r3,.L229+72
 3506 0cc8 1B78     	 ldrb r3,[r3]
 3507 0cca 002B     	 cmp r3,#0
 3508 0ccc 07D0     	 beq .L203
 862:../cleanflight/src/main/io/osd.c ****                 osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, "  * * * *");
 3509              	 .loc 8 862 0 is_stmt 1
 3510 0cce 07F10C03 	 add r3,r7,#12
 3511 0cd2 1846     	 mov r0,r3
 3512 0cd4 0C21     	 movs r1,#12
 3513 0cd6 2C4A     	 ldr r2,.L229+76
 3514 0cd8 FFF7FEFF 	 bl osdFormatMessage
 863:../cleanflight/src/main/io/osd.c ****                 break;
 3515              	 .loc 8 863 0
 3516 0cdc AAE1     	 b .L155
 3517              	.L203:
 864:../cleanflight/src/main/io/osd.c ****             }
 865:../cleanflight/src/main/io/osd.c **** 
 866:../cleanflight/src/main/io/osd.c ****             osdFormatMessage(buff, OSD_FORMAT_MESSAGE_BUFFER_SIZE, NULL);
 3518              	 .loc 8 866 0
 3519 0cde 07F10C03 	 add r3,r7,#12
 3520 0ce2 1846     	 mov r0,r3
 3521 0ce4 0C21     	 movs r1,#12
 3522 0ce6 0022     	 movs r2,#0
 3523 0ce8 FFF7FEFF 	 bl osdFormatMessage
 867:../cleanflight/src/main/io/osd.c ****             break;
 3524              	 .loc 8 867 0
 3525 0cec A2E1     	 b .L155
 3526              	.L136:
 3527              	.LBE20:
 3528              	.LBB23:
 868:../cleanflight/src/main/io/osd.c ****         }
 869:../cleanflight/src/main/io/osd.c **** 
 870:../cleanflight/src/main/io/osd.c ****     case OSD_AVG_CELL_VOLTAGE:
 871:../cleanflight/src/main/io/osd.c ****         {
 872:../cleanflight/src/main/io/osd.c ****             const int cellV = osdGetBatteryAverageCellVoltage();
 3529              	 .loc 8 872 0
 3530 0cee FFF7FEFF 	 bl osdGetBatteryAverageCellVoltage
 3531 0cf2 7864     	 str r0,[r7,#68]
 873:../cleanflight/src/main/io/osd.c ****             buff[0] = osdGetBatterySymbol(cellV);
 3532              	 .loc 8 873 0
 3533 0cf4 786C     	 ldr r0,[r7,#68]
 3534 0cf6 FFF7FEFF 	 bl osdGetBatterySymbol
 3535 0cfa 0346     	 mov r3,r0
 3536 0cfc 3B73     	 strb r3,[r7,#12]
 874:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff + 1, "%d.%02d%c", cellV / 100, cellV % 100, SYM_VOLT);
 3537              	 .loc 8 874 0
 3538 0cfe 7B6C     	 ldr r3,[r7,#68]
 3539 0d00 224A     	 ldr r2,.L229+80
 3540 0d02 82FB0312 	 smull r1,r2,r2,r3
 3541 0d06 5211     	 asrs r2,r2,#5
 3542 0d08 DB17     	 asrs r3,r3,#31
 3543 0d0a D51A     	 subs r5,r2,r3
 3544 0d0c 7B6C     	 ldr r3,[r7,#68]
 3545 0d0e 1F4A     	 ldr r2,.L229+80
 3546 0d10 82FB0312 	 smull r1,r2,r2,r3
 3547 0d14 5111     	 asrs r1,r2,#5
 3548 0d16 DA17     	 asrs r2,r3,#31
 3549 0d18 8C1A     	 subs r4,r1,r2
 3550 0d1a 6422     	 movs r2,#100
 3551 0d1c 02FB04F2 	 mul r2,r2,r4
 3552 0d20 9C1A     	 subs r4,r3,r2
 3553 0d22 07F10C03 	 add r3,r7,#12
 3554 0d26 5A1C     	 adds r2,r3,#1
 3555 0d28 0623     	 movs r3,#6
 3556 0d2a 0093     	 str r3,[sp]
 3557 0d2c 1046     	 mov r0,r2
 3558 0d2e 1849     	 ldr r1,.L229+84
 3559 0d30 2A46     	 mov r2,r5
 3560 0d32 2346     	 mov r3,r4
 3561 0d34 FFF7FEFF 	 bl tfp_sprintf
 875:../cleanflight/src/main/io/osd.c ****             break;
 3562              	 .loc 8 875 0
 3563 0d38 7CE1     	 b .L155
 3564              	.L230:
 3565 0d3a 00BF     	 .align 2
 3566              	.L229:
 3567 0d3c 00000000 	 .word accAverage
 3568 0d40 00000000 	 .word acc
 3569 0d44 67666666 	 .word 1717986919
 3570 0d48 10010000 	 .word .LC29
 3571 0d4c 00000000 	 .word currentPidProfile
 3572 0d50 1C010000 	 .word .LC30
 3573 0d54 20010000 	 .word .LC31
 3574 0d58 24010000 	 .word .LC32
 3575 0d5c D34D6210 	 .word 274877907
 3576 0d60 28010000 	 .word .LC33
 3577 0d64 30010000 	 .word .LC34
 3578 0d68 38010000 	 .word .LC35
 3579 0d6c 44010000 	 .word .LC36
 3580 0d70 00000000 	 .word armingDisableFlagNames
 3581 0d74 50010000 	 .word .LC37
 3582 0d78 00000000 	 .word armingFlags
 3583 0d7c 5C010000 	 .word .LC38
 3584 0d80 68010000 	 .word .LC39
 3585 0d84 00000000 	 .word showVisualBeeper
 3586 0d88 74010000 	 .word .LC40
 3587 0d8c 1F85EB51 	 .word 1374389535
 3588 0d90 80010000 	 .word .LC41
 3589              	.L139:
 3590              	.LBE23:
 876:../cleanflight/src/main/io/osd.c ****         }
 877:../cleanflight/src/main/io/osd.c **** 
 878:../cleanflight/src/main/io/osd.c ****     case OSD_DEBUG:
 879:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "DBG %5d %5d %5d %5d", debug[0], debug[1], debug[2], debug[3]);
 3591              	 .loc 8 879 0
 3592 0d94 AF4B     	 ldr r3,.L231
 3593 0d96 1B88     	 ldrh r3,[r3]
 3594 0d98 1DB2     	 sxth r5,r3
 3595 0d9a AE4B     	 ldr r3,.L231
 3596 0d9c 5B88     	 ldrh r3,[r3,#2]
 3597 0d9e 1CB2     	 sxth r4,r3
 3598 0da0 AC4B     	 ldr r3,.L231
 3599 0da2 9B88     	 ldrh r3,[r3,#4]
 3600 0da4 1AB2     	 sxth r2,r3
 3601 0da6 AB4B     	 ldr r3,.L231
 3602 0da8 DB88     	 ldrh r3,[r3,#6]
 3603 0daa 1BB2     	 sxth r3,r3
 3604 0dac 07F10C01 	 add r1,r7,#12
 3605 0db0 0092     	 str r2,[sp]
 3606 0db2 0193     	 str r3,[sp,#4]
 3607 0db4 0846     	 mov r0,r1
 3608 0db6 A849     	 ldr r1,.L231+4
 3609 0db8 2A46     	 mov r2,r5
 3610 0dba 2346     	 mov r3,r4
 3611 0dbc FFF7FEFF 	 bl tfp_sprintf
 880:../cleanflight/src/main/io/osd.c ****         break;
 3612              	 .loc 8 880 0
 3613 0dc0 38E1     	 b .L155
 3614              	.L140:
 3615              	.LBB24:
 881:../cleanflight/src/main/io/osd.c **** 
 882:../cleanflight/src/main/io/osd.c ****     case OSD_PITCH_ANGLE:
 883:../cleanflight/src/main/io/osd.c ****     case OSD_ROLL_ANGLE:
 884:../cleanflight/src/main/io/osd.c ****         {
 885:../cleanflight/src/main/io/osd.c ****             const int angle = (item == OSD_PITCH_ANGLE) ? attitude.values.pitch : attitude.values.r
 3616              	 .loc 8 885 0
 3617 0dc2 FB79     	 ldrb r3,[r7,#7]
 3618 0dc4 1A2B     	 cmp r3,#26
 3619 0dc6 05D1     	 bne .L204
 3620              	 .loc 8 885 0 is_stmt 0 discriminator 1
 3621 0dc8 A44B     	 ldr r3,.L231+8
 3622 0dca B3F90230 	 ldrsh r3,[r3,#2]
 3623 0dce 9BB2     	 uxth r3,r3
 3624 0dd0 1BB2     	 sxth r3,r3
 3625 0dd2 04E0     	 b .L205
 3626              	.L204:
 3627              	 .loc 8 885 0 discriminator 2
 3628 0dd4 A14B     	 ldr r3,.L231+8
 3629 0dd6 B3F90030 	 ldrsh r3,[r3]
 3630 0dda 9BB2     	 uxth r3,r3
 3631 0ddc 1BB2     	 sxth r3,r3
 3632              	.L205:
 3633              	 .loc 8 885 0 discriminator 4
 3634 0dde 3B64     	 str r3,[r7,#64]
 886:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%c%02d.%01d", angle < 0 ? '-' : ' ', abs(angle / 10), abs(angle % 10
 3635              	 .loc 8 886 0 is_stmt 1 discriminator 4
 3636 0de0 3B6C     	 ldr r3,[r7,#64]
 3637 0de2 002B     	 cmp r3,#0
 3638 0de4 01DA     	 bge .L206
 3639              	 .loc 8 886 0 is_stmt 0 discriminator 1
 3640 0de6 2D25     	 movs r5,#45
 3641 0de8 00E0     	 b .L207
 3642              	.L206:
 3643              	 .loc 8 886 0 discriminator 2
 3644 0dea 2025     	 movs r5,#32
 3645              	.L207:
 3646              	 .loc 8 886 0 discriminator 4
 3647 0dec 3B6C     	 ldr r3,[r7,#64]
 3648 0dee 9C4A     	 ldr r2,.L231+12
 3649 0df0 82FB0312 	 smull r1,r2,r2,r3
 3650 0df4 9210     	 asrs r2,r2,#2
 3651 0df6 DB17     	 asrs r3,r3,#31
 3652 0df8 D31A     	 subs r3,r2,r3
 3653 0dfa 83EAE374 	 eor r4,r3,r3,asr#31
 3654 0dfe A4EBE374 	 sub r4,r4,r3,asr#31
 3655 0e02 396C     	 ldr r1,[r7,#64]
 3656 0e04 964B     	 ldr r3,.L231+12
 3657 0e06 83FB0123 	 smull r2,r3,r3,r1
 3658 0e0a 9A10     	 asrs r2,r3,#2
 3659 0e0c CB17     	 asrs r3,r1,#31
 3660 0e0e D21A     	 subs r2,r2,r3
 3661 0e10 1346     	 mov r3,r2
 3662 0e12 9B00     	 lsls r3,r3,#2
 3663 0e14 1344     	 add r3,r3,r2
 3664 0e16 5B00     	 lsls r3,r3,#1
 3665 0e18 CA1A     	 subs r2,r1,r3
 3666 0e1a 82EAE273 	 eor r3,r2,r2,asr#31
 3667 0e1e A3EBE273 	 sub r3,r3,r2,asr#31
 3668 0e22 07F10C02 	 add r2,r7,#12
 3669 0e26 0093     	 str r3,[sp]
 3670 0e28 1046     	 mov r0,r2
 3671 0e2a 8E49     	 ldr r1,.L231+16
 3672 0e2c 2A46     	 mov r2,r5
 3673 0e2e 2346     	 mov r3,r4
 3674 0e30 FFF7FEFF 	 bl tfp_sprintf
 887:../cleanflight/src/main/io/osd.c ****             break;
 3675              	 .loc 8 887 0 is_stmt 1 discriminator 4
 3676 0e34 FEE0     	 b .L155
 3677              	.L141:
 3678              	.LBE24:
 3679              	.LBB25:
 888:../cleanflight/src/main/io/osd.c ****         }
 889:../cleanflight/src/main/io/osd.c **** 
 890:../cleanflight/src/main/io/osd.c ****     case OSD_MAIN_BATT_USAGE:
 891:../cleanflight/src/main/io/osd.c ****         {
 892:../cleanflight/src/main/io/osd.c ****             // Set length of indicator bar
 893:../cleanflight/src/main/io/osd.c ****             #define MAIN_BATT_USAGE_STEPS 11 // Use an odd number so the bar can be centered.
 894:../cleanflight/src/main/io/osd.c **** 
 895:../cleanflight/src/main/io/osd.c ****             // Calculate constrained value
 896:../cleanflight/src/main/io/osd.c ****             const float value = constrain(batteryConfig()->batteryCapacity - getMAhDrawn(), 0, batt
 3680              	 .loc 8 896 0
 3681 0e36 FFF7FEFF 	 bl batteryConfig
 3682 0e3a 0346     	 mov r3,r0
 3683 0e3c B3F80730 	 ldrh r3,[r3,#7]
 3684 0e40 9BB2     	 uxth r3,r3
 3685 0e42 1C46     	 mov r4,r3
 3686 0e44 FFF7FEFF 	 bl getMAhDrawn
 3687 0e48 0346     	 mov r3,r0
 3688 0e4a E41A     	 subs r4,r4,r3
 3689 0e4c FFF7FEFF 	 bl batteryConfig
 3690 0e50 0346     	 mov r3,r0
 3691 0e52 B3F80730 	 ldrh r3,[r3,#7]
 3692 0e56 9BB2     	 uxth r3,r3
 3693 0e58 2046     	 mov r0,r4
 3694 0e5a 0021     	 movs r1,#0
 3695 0e5c 1A46     	 mov r2,r3
 3696 0e5e FFF7FEFF 	 bl constrain
 3697 0e62 07EE900A 	 fmsr s15,r0
 3698 0e66 F8EEE77A 	 fsitos s15,s15
 3699 0e6a C7ED0F7A 	 fsts s15,[r7,#60]
 897:../cleanflight/src/main/io/osd.c **** 
 898:../cleanflight/src/main/io/osd.c ****             // Calculate mAh used progress
 899:../cleanflight/src/main/io/osd.c ****             const uint8_t mAhUsedProgress = ceilf((value / (batteryConfig()->batteryCapacity / MAIN
 3700              	 .loc 8 899 0
 3701 0e6e FFF7FEFF 	 bl batteryConfig
 3702 0e72 0346     	 mov r3,r0
 3703 0e74 B3F80730 	 ldrh r3,[r3,#7]
 3704 0e78 9BB2     	 uxth r3,r3
 3705 0e7a 7B4A     	 ldr r2,.L231+20
 3706 0e7c A2FB0323 	 umull r2,r3,r2,r3
 3707 0e80 DB08     	 lsrs r3,r3,#3
 3708 0e82 9BB2     	 uxth r3,r3
 3709 0e84 07EE903A 	 fmsr s15,r3
 3710 0e88 F8EEE77A 	 fsitos s15,s15
 3711 0e8c 97ED0F7A 	 flds s14,[r7,#60]
 3712 0e90 C7EE277A 	 fdivs s15,s14,s15
 3713 0e94 17EE900A 	 fmrs r0,s15
 3714 0e98 FFF7FEFF 	 bl ceilf
 3715 0e9c 07EE900A 	 fmsr s15,r0
 3716 0ea0 FCEEE77A 	 ftouizs s15,s15
 3717 0ea4 C7ED007A 	 fsts s15,[r7]
 3718 0ea8 3B78     	 ldrb r3,[r7]
 3719 0eaa 87F83B30 	 strb r3,[r7,#59]
 900:../cleanflight/src/main/io/osd.c **** 
 901:../cleanflight/src/main/io/osd.c ****             // Create empty battery indicator bar
 902:../cleanflight/src/main/io/osd.c ****             buff[0] = SYM_PB_START;
 3720              	 .loc 8 902 0
 3721 0eae 8A23     	 movs r3,#138
 3722 0eb0 3B73     	 strb r3,[r7,#12]
 3723              	.LBB26:
 903:../cleanflight/src/main/io/osd.c ****             for (int i = 1; i <= MAIN_BATT_USAGE_STEPS; i++) {
 3724              	 .loc 8 903 0
 3725 0eb2 0123     	 movs r3,#1
 3726 0eb4 C7F89030 	 str r3,[r7,#144]
 3727 0eb8 14E0     	 b .L208
 3728              	.L211:
 904:../cleanflight/src/main/io/osd.c ****                 buff[i] = i <= mAhUsedProgress ? SYM_PB_FULL : SYM_PB_EMPTY;
 3729              	 .loc 8 904 0
 3730 0eba 97F83B20 	 ldrb r2,[r7,#59]
 3731 0ebe D7F89030 	 ldr r3,[r7,#144]
 3732 0ec2 9A42     	 cmp r2,r3
 3733 0ec4 01DB     	 blt .L209
 3734              	 .loc 8 904 0 is_stmt 0 discriminator 1
 3735 0ec6 8B21     	 movs r1,#139
 3736 0ec8 00E0     	 b .L210
 3737              	.L209:
 3738              	 .loc 8 904 0 discriminator 2
 3739 0eca 8D21     	 movs r1,#141
 3740              	.L210:
 3741              	 .loc 8 904 0 discriminator 4
 3742 0ecc 07F10C02 	 add r2,r7,#12
 3743 0ed0 D7F89030 	 ldr r3,[r7,#144]
 3744 0ed4 1344     	 add r3,r3,r2
 3745 0ed6 0A46     	 mov r2,r1
 3746 0ed8 1A70     	 strb r2,[r3]
 903:../cleanflight/src/main/io/osd.c ****             for (int i = 1; i <= MAIN_BATT_USAGE_STEPS; i++) {
 3747              	 .loc 8 903 0 is_stmt 1 discriminator 4
 3748 0eda D7F89030 	 ldr r3,[r7,#144]
 3749 0ede 0133     	 adds r3,r3,#1
 3750 0ee0 C7F89030 	 str r3,[r7,#144]
 3751              	.L208:
 903:../cleanflight/src/main/io/osd.c ****             for (int i = 1; i <= MAIN_BATT_USAGE_STEPS; i++) {
 3752              	 .loc 8 903 0 is_stmt 0 discriminator 2
 3753 0ee4 D7F89030 	 ldr r3,[r7,#144]
 3754 0ee8 0B2B     	 cmp r3,#11
 3755 0eea E6DD     	 ble .L211
 3756              	.LBE26:
 905:../cleanflight/src/main/io/osd.c ****             }
 906:../cleanflight/src/main/io/osd.c ****             buff[MAIN_BATT_USAGE_STEPS + 1] = SYM_PB_CLOSE;
 3757              	 .loc 8 906 0 is_stmt 1
 3758 0eec 8F23     	 movs r3,#143
 3759 0eee 3B76     	 strb r3,[r7,#24]
 907:../cleanflight/src/main/io/osd.c ****             if (mAhUsedProgress > 0 && mAhUsedProgress < MAIN_BATT_USAGE_STEPS) {
 3760              	 .loc 8 907 0
 3761 0ef0 97F83B30 	 ldrb r3,[r7,#59]
 3762 0ef4 002B     	 cmp r3,#0
 3763 0ef6 0CD0     	 beq .L212
 3764              	 .loc 8 907 0 is_stmt 0 discriminator 1
 3765 0ef8 97F83B30 	 ldrb r3,[r7,#59]
 3766 0efc 0A2B     	 cmp r3,#10
 3767 0efe 08D8     	 bhi .L212
 908:../cleanflight/src/main/io/osd.c ****                 buff[1 + mAhUsedProgress] = SYM_PB_END;
 3768              	 .loc 8 908 0 is_stmt 1
 3769 0f00 97F83B30 	 ldrb r3,[r7,#59]
 3770 0f04 0133     	 adds r3,r3,#1
 3771 0f06 07F1B002 	 add r2,r7,#176
 3772 0f0a 1344     	 add r3,r3,r2
 3773 0f0c 8E22     	 movs r2,#142
 3774 0f0e 03F8A42C 	 strb r2,[r3,#-164]
 3775              	.L212:
 909:../cleanflight/src/main/io/osd.c ****             }
 910:../cleanflight/src/main/io/osd.c ****             buff[MAIN_BATT_USAGE_STEPS+2] = '\0';
 3776              	 .loc 8 910 0
 3777 0f12 0023     	 movs r3,#0
 3778 0f14 7B76     	 strb r3,[r7,#25]
 911:../cleanflight/src/main/io/osd.c ****             break;
 3779              	 .loc 8 911 0
 3780 0f16 8DE0     	 b .L155
 3781              	.L142:
 3782              	.LBE25:
 912:../cleanflight/src/main/io/osd.c ****         }
 913:../cleanflight/src/main/io/osd.c **** 
 914:../cleanflight/src/main/io/osd.c ****     case OSD_DISARMED:
 915:../cleanflight/src/main/io/osd.c ****         if (!ARMING_FLAG(ARMED)) {
 3783              	 .loc 8 915 0
 3784 0f18 544B     	 ldr r3,.L231+24
 3785 0f1a 1B78     	 ldrb r3,[r3]
 3786 0f1c 03F00103 	 and r3,r3,#1
 3787 0f20 002B     	 cmp r3,#0
 3788 0f22 06D1     	 bne .L213
 916:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "DISARMED");
 3789              	 .loc 8 916 0
 3790 0f24 07F10C03 	 add r3,r7,#12
 3791 0f28 1846     	 mov r0,r3
 3792 0f2a 5149     	 ldr r1,.L231+28
 3793 0f2c FFF7FEFF 	 bl tfp_sprintf
 3794 0f30 0DE0     	 b .L214
 3795              	.L213:
 917:../cleanflight/src/main/io/osd.c ****         } else {
 918:../cleanflight/src/main/io/osd.c ****             if (!lastArmState) {  // previously disarmed - blank out the message one time
 3796              	 .loc 8 918 0
 3797 0f32 504B     	 ldr r3,.L231+32
 3798 0f34 1B78     	 ldrb r3,[r3]
 3799 0f36 83F00103 	 eor r3,r3,#1
 3800 0f3a DBB2     	 uxtb r3,r3
 3801 0f3c 002B     	 cmp r3,#0
 3802 0f3e 06D0     	 beq .L214
 919:../cleanflight/src/main/io/osd.c ****                 tfp_sprintf(buff, "        ");
 3803              	 .loc 8 919 0
 3804 0f40 07F10C03 	 add r3,r7,#12
 3805 0f44 1846     	 mov r0,r3
 3806 0f46 4C49     	 ldr r1,.L231+36
 3807 0f48 FFF7FEFF 	 bl tfp_sprintf
 920:../cleanflight/src/main/io/osd.c ****             }
 921:../cleanflight/src/main/io/osd.c ****         }
 922:../cleanflight/src/main/io/osd.c ****         break;
 3808              	 .loc 8 922 0
 3809 0f4c 72E0     	 b .L155
 3810              	.L214:
 3811 0f4e 71E0     	 b .L155
 3812              	.L145:
 3813              	.LBB27:
 923:../cleanflight/src/main/io/osd.c **** 
 924:../cleanflight/src/main/io/osd.c ****     case OSD_NUMERICAL_HEADING:
 925:../cleanflight/src/main/io/osd.c ****         {
 926:../cleanflight/src/main/io/osd.c ****             const int heading = DECIDEGREES_TO_DEGREES(attitude.values.yaw);
 3814              	 .loc 8 926 0
 3815 0f50 424B     	 ldr r3,.L231+8
 3816 0f52 B3F90430 	 ldrsh r3,[r3,#4]
 3817 0f56 9BB2     	 uxth r3,r3
 3818 0f58 1BB2     	 sxth r3,r3
 3819 0f5a 414A     	 ldr r2,.L231+12
 3820 0f5c 82FB0312 	 smull r1,r2,r2,r3
 3821 0f60 9210     	 asrs r2,r2,#2
 3822 0f62 DB17     	 asrs r3,r3,#31
 3823 0f64 D31A     	 subs r3,r2,r3
 3824 0f66 9BB2     	 uxth r3,r3
 3825 0f68 1BB2     	 sxth r3,r3
 3826 0f6a 7B63     	 str r3,[r7,#52]
 927:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%c%03d", osdGetDirectionSymbolFromHeading(heading), heading);
 3827              	 .loc 8 927 0
 3828 0f6c 786B     	 ldr r0,[r7,#52]
 3829 0f6e FFF7FEFF 	 bl osdGetDirectionSymbolFromHeading
 3830 0f72 0346     	 mov r3,r0
 3831 0f74 1A46     	 mov r2,r3
 3832 0f76 07F10C03 	 add r3,r7,#12
 3833 0f7a 1846     	 mov r0,r3
 3834 0f7c 3F49     	 ldr r1,.L231+40
 3835 0f7e 7B6B     	 ldr r3,[r7,#52]
 3836 0f80 FFF7FEFF 	 bl tfp_sprintf
 928:../cleanflight/src/main/io/osd.c ****             break;
 3837              	 .loc 8 928 0
 3838 0f84 56E0     	 b .L155
 3839              	.L146:
 3840              	.LBE27:
 3841              	.LBB28:
 929:../cleanflight/src/main/io/osd.c ****         }
 930:../cleanflight/src/main/io/osd.c **** 
 931:../cleanflight/src/main/io/osd.c ****     case OSD_NUMERICAL_VARIO:
 932:../cleanflight/src/main/io/osd.c ****         {
 933:../cleanflight/src/main/io/osd.c ****             const int verticalSpeed = osdGetMetersToSelectedUnit(getEstimatedVario());
 3842              	 .loc 8 933 0
 3843 0f86 FFF7FEFF 	 bl getEstimatedVario
 3844 0f8a 0346     	 mov r3,r0
 3845 0f8c 1846     	 mov r0,r3
 3846 0f8e FFF7FEFF 	 bl osdGetMetersToSelectedUnit
 3847 0f92 3863     	 str r0,[r7,#48]
 934:../cleanflight/src/main/io/osd.c ****             const char directionSymbol = verticalSpeed < 0 ? SYM_ARROW_SOUTH : SYM_ARROW_NORTH;
 3848              	 .loc 8 934 0
 3849 0f94 3B6B     	 ldr r3,[r7,#48]
 3850 0f96 002B     	 cmp r3,#0
 3851 0f98 01DA     	 bge .L215
 3852              	 .loc 8 934 0 is_stmt 0 discriminator 1
 3853 0f9a 6023     	 movs r3,#96
 3854 0f9c 00E0     	 b .L216
 3855              	.L215:
 3856              	 .loc 8 934 0 discriminator 2
 3857 0f9e 6823     	 movs r3,#104
 3858              	.L216:
 3859              	 .loc 8 934 0 discriminator 4
 3860 0fa0 87F82F30 	 strb r3,[r7,#47]
 935:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%c%01d.%01d", directionSymbol, abs(verticalSpeed / 100), abs((vertic
 3861              	 .loc 8 935 0 is_stmt 1 discriminator 4
 3862 0fa4 97F82F50 	 ldrb r5,[r7,#47]
 3863 0fa8 3B6B     	 ldr r3,[r7,#48]
 3864 0faa 354A     	 ldr r2,.L231+44
 3865 0fac 82FB0312 	 smull r1,r2,r2,r3
 3866 0fb0 5211     	 asrs r2,r2,#5
 3867 0fb2 DB17     	 asrs r3,r3,#31
 3868 0fb4 D31A     	 subs r3,r2,r3
 3869 0fb6 83EAE374 	 eor r4,r3,r3,asr#31
 3870 0fba A4EBE374 	 sub r4,r4,r3,asr#31
 3871 0fbe 3A6B     	 ldr r2,[r7,#48]
 3872 0fc0 2F4B     	 ldr r3,.L231+44
 3873 0fc2 83FB0213 	 smull r1,r3,r3,r2
 3874 0fc6 5911     	 asrs r1,r3,#5
 3875 0fc8 D317     	 asrs r3,r2,#31
 3876 0fca CB1A     	 subs r3,r1,r3
 3877 0fcc 6421     	 movs r1,#100
 3878 0fce 01FB03F3 	 mul r3,r1,r3
 3879 0fd2 D31A     	 subs r3,r2,r3
 3880 0fd4 224A     	 ldr r2,.L231+12
 3881 0fd6 82FB0312 	 smull r1,r2,r2,r3
 3882 0fda 9210     	 asrs r2,r2,#2
 3883 0fdc DB17     	 asrs r3,r3,#31
 3884 0fde D31A     	 subs r3,r2,r3
 3885 0fe0 002B     	 cmp r3,#0
 3886 0fe2 B8BF     	 it lt
 3887 0fe4 5B42     	 rsblt r3,r3,#0
 3888 0fe6 07F10C02 	 add r2,r7,#12
 3889 0fea 0093     	 str r3,[sp]
 3890 0fec 1046     	 mov r0,r2
 3891 0fee 2549     	 ldr r1,.L231+48
 3892 0ff0 2A46     	 mov r2,r5
 3893 0ff2 2346     	 mov r3,r4
 3894 0ff4 FFF7FEFF 	 bl tfp_sprintf
 936:../cleanflight/src/main/io/osd.c ****             break;
 3895              	 .loc 8 936 0 discriminator 4
 3896 0ff8 1CE0     	 b .L155
 3897              	.L149:
 3898              	.LBE28:
 937:../cleanflight/src/main/io/osd.c ****         }
 938:../cleanflight/src/main/io/osd.c **** 
 939:../cleanflight/src/main/io/osd.c **** #ifdef USE_ESC_SENSOR
 940:../cleanflight/src/main/io/osd.c ****     case OSD_ESC_TMP:
 941:../cleanflight/src/main/io/osd.c ****         if (feature(FEATURE_ESC_SENSOR)) {
 942:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%3d%c", osdConvertTemperatureToSelectedUnit(escDataCombined->tempera
 943:../cleanflight/src/main/io/osd.c ****         }
 944:../cleanflight/src/main/io/osd.c ****         break;
 945:../cleanflight/src/main/io/osd.c **** 
 946:../cleanflight/src/main/io/osd.c ****     case OSD_ESC_RPM:
 947:../cleanflight/src/main/io/osd.c ****         if (feature(FEATURE_ESC_SENSOR)) {
 948:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%5d", escDataCombined == NULL ? 0 : calcEscRpm(escDataCombined->rpm)
 949:../cleanflight/src/main/io/osd.c ****         }
 950:../cleanflight/src/main/io/osd.c ****         break;
 951:../cleanflight/src/main/io/osd.c **** #endif
 952:../cleanflight/src/main/io/osd.c **** 
 953:../cleanflight/src/main/io/osd.c **** #ifdef USE_RTC_TIME
 954:../cleanflight/src/main/io/osd.c ****     case OSD_RTC_DATETIME:
 955:../cleanflight/src/main/io/osd.c ****         osdFormatRtcDateTime(&buff[0]);
 3899              	 .loc 8 955 0
 3900 0ffa 07F10C03 	 add r3,r7,#12
 3901 0ffe 1846     	 mov r0,r3
 3902 1000 FFF7FEFF 	 bl osdFormatRtcDateTime
 956:../cleanflight/src/main/io/osd.c ****         break;
 3903              	 .loc 8 956 0
 3904 1004 16E0     	 b .L155
 3905              	.L150:
 957:../cleanflight/src/main/io/osd.c **** #endif
 958:../cleanflight/src/main/io/osd.c **** 
 959:../cleanflight/src/main/io/osd.c **** #ifdef USE_OSD_ADJUSTMENTS
 960:../cleanflight/src/main/io/osd.c ****     case OSD_ADJUSTMENT_RANGE:
 961:../cleanflight/src/main/io/osd.c ****         if (getAdjustmentsRangeName()) {
 3906              	 .loc 8 961 0
 3907 1006 FFF7FEFF 	 bl getAdjustmentsRangeName
 3908 100a 0346     	 mov r3,r0
 3909 100c 002B     	 cmp r3,#0
 3910 100e 0ED0     	 beq .L217
 962:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%s: %3d", getAdjustmentsRangeName(), getAdjustmentsRangeValue());
 3911              	 .loc 8 962 0
 3912 1010 FFF7FEFF 	 bl getAdjustmentsRangeName
 3913 1014 0546     	 mov r5,r0
 3914 1016 FFF7FEFF 	 bl getAdjustmentsRangeValue
 3915 101a 0446     	 mov r4,r0
 3916 101c 07F10C03 	 add r3,r7,#12
 3917 1020 1846     	 mov r0,r3
 3918 1022 1949     	 ldr r1,.L231+52
 3919 1024 2A46     	 mov r2,r5
 3920 1026 2346     	 mov r3,r4
 3921 1028 FFF7FEFF 	 bl tfp_sprintf
 963:../cleanflight/src/main/io/osd.c ****         }
 964:../cleanflight/src/main/io/osd.c ****         break;
 3922              	 .loc 8 964 0
 3923 102c 02E0     	 b .L155
 3924              	.L217:
 3925 102e 01E0     	 b .L155
 3926              	.L113:
 965:../cleanflight/src/main/io/osd.c **** #endif
 966:../cleanflight/src/main/io/osd.c **** 
 967:../cleanflight/src/main/io/osd.c **** #ifdef USE_ADC_INTERNAL
 968:../cleanflight/src/main/io/osd.c ****     case OSD_CORE_TEMPERATURE:
 969:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%3d%c", osdConvertTemperatureToSelectedUnit(getCoreTemperatureCelsius() 
 970:../cleanflight/src/main/io/osd.c ****         break;
 971:../cleanflight/src/main/io/osd.c **** #endif
 972:../cleanflight/src/main/io/osd.c **** 
 973:../cleanflight/src/main/io/osd.c ****     default:
 974:../cleanflight/src/main/io/osd.c ****         return false;
 3927              	 .loc 8 974 0
 3928 1030 0023     	 movs r3,#0
 3929 1032 0AE0     	 b .L218
 3930              	.L155:
 975:../cleanflight/src/main/io/osd.c ****     }
 976:../cleanflight/src/main/io/osd.c **** 
 977:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, elemPosX, elemPosY, buff);
 3931              	 .loc 8 977 0
 3932 1034 154B     	 ldr r3,.L231+56
 3933 1036 1868     	 ldr r0,[r3]
 3934 1038 97F88F10 	 ldrb r1,[r7,#143]
 3935 103c 97F88E20 	 ldrb r2,[r7,#142]
 3936 1040 07F10C03 	 add r3,r7,#12
 3937 1044 FFF7FEFF 	 bl displayWrite
 978:../cleanflight/src/main/io/osd.c **** 
 979:../cleanflight/src/main/io/osd.c ****     return true;
 3938              	 .loc 8 979 0
 3939 1048 0123     	 movs r3,#1
 3940              	.L218:
 980:../cleanflight/src/main/io/osd.c **** }
 3941              	 .loc 8 980 0 discriminator 1
 3942 104a 1846     	 mov r0,r3
 3943 104c B037     	 adds r7,r7,#176
 3944              	.LCFI130:
 3945              	 .cfi_def_cfa_offset 16
 3946 104e BD46     	 mov sp,r7
 3947              	.LCFI131:
 3948              	 .cfi_def_cfa_register 13
 3949              	 
 3950 1050 B0BD     	 pop {r4,r5,r7,pc}
 3951              	.L232:
 3952 1052 00BF     	 .align 2
 3953              	.L231:
 3954 1054 00000000 	 .word debug
 3955 1058 8C010000 	 .word .LC42
 3956 105c 00000000 	 .word attitude
 3957 1060 67666666 	 .word 1717986919
 3958 1064 A0010000 	 .word .LC43
 3959 1068 A38B2EBA 	 .word -1171354717
 3960 106c 00000000 	 .word armingFlags
 3961 1070 AC010000 	 .word .LC44
 3962 1074 00000000 	 .word lastArmState
 3963 1078 B8010000 	 .word .LC45
 3964 107c C4010000 	 .word .LC46
 3965 1080 1F85EB51 	 .word 1374389535
 3966 1084 CC010000 	 .word .LC47
 3967 1088 D8010000 	 .word .LC48
 3968 108c 00000000 	 .word osdDisplayPort
 3969              	 .cfi_endproc
 3970              	.LFE616:
 3972              	 .section .text.osdDrawElements,"ax",%progbits
 3973              	 .align 2
 3974              	 .thumb
 3975              	 .thumb_func
 3977              	osdDrawElements:
 3978              	.LFB617:
 981:../cleanflight/src/main/io/osd.c **** 
 982:../cleanflight/src/main/io/osd.c **** static void osdDrawElements(void)
 983:../cleanflight/src/main/io/osd.c **** {
 3979              	 .loc 8 983 0
 3980              	 .cfi_startproc
 3981              	 
 3982              	 
 3983 0000 80B5     	 push {r7,lr}
 3984              	.LCFI132:
 3985              	 .cfi_def_cfa_offset 8
 3986              	 .cfi_offset 7,-8
 3987              	 .cfi_offset 14,-4
 3988 0002 82B0     	 sub sp,sp,#8
 3989              	.LCFI133:
 3990              	 .cfi_def_cfa_offset 16
 3991 0004 00AF     	 add r7,sp,#0
 3992              	.LCFI134:
 3993              	 .cfi_def_cfa_register 7
 984:../cleanflight/src/main/io/osd.c ****     displayClearScreen(osdDisplayPort);
 3994              	 .loc 8 984 0
 3995 0006 244B     	 ldr r3,.L240
 3996 0008 1B68     	 ldr r3,[r3]
 3997 000a 1846     	 mov r0,r3
 3998 000c FFF7FEFF 	 bl displayClearScreen
 985:../cleanflight/src/main/io/osd.c **** 
 986:../cleanflight/src/main/io/osd.c ****     // Hide OSD when OSDSW mode is active
 987:../cleanflight/src/main/io/osd.c ****     if (IS_RC_MODE_ACTIVE(BOXOSD)) {
 3999              	 .loc 8 987 0
 4000 0010 1120     	 movs r0,#17
 4001 0012 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 4002 0016 0346     	 mov r3,r0
 4003 0018 002B     	 cmp r3,#0
 4004 001a 00D0     	 beq .L234
 988:../cleanflight/src/main/io/osd.c ****         return;
 4005              	 .loc 8 988 0
 4006 001c 39E0     	 b .L233
 4007              	.L234:
 989:../cleanflight/src/main/io/osd.c ****     }
 990:../cleanflight/src/main/io/osd.c **** 
 991:../cleanflight/src/main/io/osd.c ****     if (sensors(SENSOR_ACC)) {
 4008              	 .loc 8 991 0
 4009 001e 0220     	 movs r0,#2
 4010 0020 FFF7FEFF 	 bl sensors
 4011 0024 0346     	 mov r3,r0
 4012 0026 002B     	 cmp r3,#0
 4013 0028 05D0     	 beq .L236
 992:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_ARTIFICIAL_HORIZON);
 4014              	 .loc 8 992 0
 4015 002a 0320     	 movs r0,#3
 4016 002c FFF7FEFF 	 bl osdDrawSingleElement
 993:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_G_FORCE);
 4017              	 .loc 8 993 0
 4018 0030 2A20     	 movs r0,#42
 4019 0032 FFF7FEFF 	 bl osdDrawSingleElement
 4020              	.L236:
 4021              	.LBB29:
 994:../cleanflight/src/main/io/osd.c ****     }
 995:../cleanflight/src/main/io/osd.c **** 
 996:../cleanflight/src/main/io/osd.c **** 
 997:../cleanflight/src/main/io/osd.c ****     for (unsigned i = 0; i < sizeof(osdElementDisplayOrder); i++) {
 4022              	 .loc 8 997 0
 4023 0036 0023     	 movs r3,#0
 4024 0038 7B60     	 str r3,[r7,#4]
 4025 003a 09E0     	 b .L237
 4026              	.L238:
 998:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(osdElementDisplayOrder[i]);
 4027              	 .loc 8 998 0 discriminator 3
 4028 003c 174A     	 ldr r2,.L240+4
 4029 003e 7B68     	 ldr r3,[r7,#4]
 4030 0040 1344     	 add r3,r3,r2
 4031 0042 1B78     	 ldrb r3,[r3]
 4032 0044 1846     	 mov r0,r3
 4033 0046 FFF7FEFF 	 bl osdDrawSingleElement
 997:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(osdElementDisplayOrder[i]);
 4034              	 .loc 8 997 0 discriminator 3
 4035 004a 7B68     	 ldr r3,[r7,#4]
 4036 004c 0133     	 adds r3,r3,#1
 4037 004e 7B60     	 str r3,[r7,#4]
 4038              	.L237:
 997:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(osdElementDisplayOrder[i]);
 4039              	 .loc 8 997 0 is_stmt 0 discriminator 1
 4040 0050 7B68     	 ldr r3,[r7,#4]
 4041 0052 1D2B     	 cmp r3,#29
 4042 0054 F2D9     	 bls .L238
 4043              	.LBE29:
 999:../cleanflight/src/main/io/osd.c ****     }
1000:../cleanflight/src/main/io/osd.c **** 
1001:../cleanflight/src/main/io/osd.c **** #ifdef USE_GPS
1002:../cleanflight/src/main/io/osd.c ****     if (sensors(SENSOR_GPS)) {
 4044              	 .loc 8 1002 0 is_stmt 1
 4045 0056 2020     	 movs r0,#32
 4046 0058 FFF7FEFF 	 bl sensors
 4047 005c 0346     	 mov r3,r0
 4048 005e 002B     	 cmp r3,#0
 4049 0060 11D0     	 beq .L239
1003:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_GPS_SATS);
 4050              	 .loc 8 1003 0
 4051 0062 0E20     	 movs r0,#14
 4052 0064 FFF7FEFF 	 bl osdDrawSingleElement
1004:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_GPS_SPEED);
 4053              	 .loc 8 1004 0
 4054 0068 0D20     	 movs r0,#13
 4055 006a FFF7FEFF 	 bl osdDrawSingleElement
1005:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_GPS_LAT);
 4056              	 .loc 8 1005 0
 4057 006e 1820     	 movs r0,#24
 4058 0070 FFF7FEFF 	 bl osdDrawSingleElement
1006:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_GPS_LON);
 4059              	 .loc 8 1006 0
 4060 0074 1720     	 movs r0,#23
 4061 0076 FFF7FEFF 	 bl osdDrawSingleElement
1007:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_HOME_DIST);
 4062              	 .loc 8 1007 0
 4063 007a 1F20     	 movs r0,#31
 4064 007c FFF7FEFF 	 bl osdDrawSingleElement
1008:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_HOME_DIR);
 4065              	 .loc 8 1008 0
 4066 0080 1E20     	 movs r0,#30
 4067 0082 FFF7FEFF 	 bl osdDrawSingleElement
 4068              	.L239:
1009:../cleanflight/src/main/io/osd.c ****     }
1010:../cleanflight/src/main/io/osd.c **** #endif // GPS
1011:../cleanflight/src/main/io/osd.c **** 
1012:../cleanflight/src/main/io/osd.c **** #ifdef USE_ESC_SENSOR
1013:../cleanflight/src/main/io/osd.c ****     if (feature(FEATURE_ESC_SENSOR)) {
1014:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_ESC_TMP);
1015:../cleanflight/src/main/io/osd.c ****         osdDrawSingleElement(OSD_ESC_RPM);
1016:../cleanflight/src/main/io/osd.c ****     }
1017:../cleanflight/src/main/io/osd.c **** #endif
1018:../cleanflight/src/main/io/osd.c **** 
1019:../cleanflight/src/main/io/osd.c **** #ifdef USE_RTC_TIME
1020:../cleanflight/src/main/io/osd.c ****     osdDrawSingleElement(OSD_RTC_DATETIME);
 4069              	 .loc 8 1020 0
 4070 0086 2620     	 movs r0,#38
 4071 0088 FFF7FEFF 	 bl osdDrawSingleElement
1021:../cleanflight/src/main/io/osd.c **** #endif
1022:../cleanflight/src/main/io/osd.c **** 
1023:../cleanflight/src/main/io/osd.c **** #ifdef USE_OSD_ADJUSTMENTS
1024:../cleanflight/src/main/io/osd.c ****     osdDrawSingleElement(OSD_ADJUSTMENT_RANGE);
 4072              	 .loc 8 1024 0
 4073 008c 2720     	 movs r0,#39
 4074 008e FFF7FEFF 	 bl osdDrawSingleElement
 4075              	.L233:
1025:../cleanflight/src/main/io/osd.c **** #endif
1026:../cleanflight/src/main/io/osd.c **** 
1027:../cleanflight/src/main/io/osd.c **** #ifdef USE_ADC_INTERNAL
1028:../cleanflight/src/main/io/osd.c ****     osdDrawSingleElement(OSD_CORE_TEMPERATURE);
1029:../cleanflight/src/main/io/osd.c **** #endif
1030:../cleanflight/src/main/io/osd.c **** }
 4076              	 .loc 8 1030 0
 4077 0092 0837     	 adds r7,r7,#8
 4078              	.LCFI135:
 4079              	 .cfi_def_cfa_offset 8
 4080 0094 BD46     	 mov sp,r7
 4081              	.LCFI136:
 4082              	 .cfi_def_cfa_register 13
 4083              	 
 4084 0096 80BD     	 pop {r7,pc}
 4085              	.L241:
 4086              	 .align 2
 4087              	.L240:
 4088 0098 00000000 	 .word osdDisplayPort
 4089 009c 00000000 	 .word osdElementDisplayOrder
 4090              	 .cfi_endproc
 4091              	.LFE617:
 4093              	 .section .text.pgResetFn_osdConfig,"ax",%progbits
 4094              	 .align 2
 4095              	 .global pgResetFn_osdConfig
 4096              	 .thumb
 4097              	 .thumb_func
 4099              	pgResetFn_osdConfig:
 4100              	.LFB618:
1031:../cleanflight/src/main/io/osd.c **** 
1032:../cleanflight/src/main/io/osd.c **** void pgResetFn_osdConfig(osdConfig_t *osdConfig)
1033:../cleanflight/src/main/io/osd.c **** {
 4101              	 .loc 8 1033 0
 4102              	 .cfi_startproc
 4103              	 
 4104              	 
 4105 0000 80B5     	 push {r7,lr}
 4106              	.LCFI137:
 4107              	 .cfi_def_cfa_offset 8
 4108              	 .cfi_offset 7,-8
 4109              	 .cfi_offset 14,-4
 4110 0002 84B0     	 sub sp,sp,#16
 4111              	.LCFI138:
 4112              	 .cfi_def_cfa_offset 24
 4113 0004 00AF     	 add r7,sp,#0
 4114              	.LCFI139:
 4115              	 .cfi_def_cfa_register 7
 4116 0006 7860     	 str r0,[r7,#4]
1034:../cleanflight/src/main/io/osd.c **** #ifdef USE_OSD_ITEM_POSITIONS
1035:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_RSSI_VALUE]         = OSD_POS(8, 1)   | VISIBLE_FLAG;
 4117              	 .loc 8 1035 0
 4118 0008 7B68     	 ldr r3,[r7,#4]
 4119 000a 0022     	 movs r2,#0
 4120 000c 42F02802 	 orr r2,r2,#40
 4121 0010 1A70     	 strb r2,[r3]
 4122 0012 0022     	 movs r2,#0
 4123 0014 42F00802 	 orr r2,r2,#8
 4124 0018 5A70     	 strb r2,[r3,#1]
1036:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_MAIN_BATT_VOLTAGE]  = OSD_POS(12, 1)  | VISIBLE_FLAG;
 4125              	 .loc 8 1036 0
 4126 001a 7B68     	 ldr r3,[r7,#4]
 4127 001c 0022     	 movs r2,#0
 4128 001e 42F02C02 	 orr r2,r2,#44
 4129 0022 9A70     	 strb r2,[r3,#2]
 4130 0024 0022     	 movs r2,#0
 4131 0026 42F00802 	 orr r2,r2,#8
 4132 002a DA70     	 strb r2,[r3,#3]
1037:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_CROSSHAIRS]         = OSD_POS(8, 6)   | VISIBLE_FLAG;
 4133              	 .loc 8 1037 0
 4134 002c 7B68     	 ldr r3,[r7,#4]
 4135 002e 0022     	 movs r2,#0
 4136 0030 62F03702 	 orn r2,r2,#55
 4137 0034 1A71     	 strb r2,[r3,#4]
 4138 0036 0022     	 movs r2,#0
 4139 0038 42F00802 	 orr r2,r2,#8
 4140 003c 5A71     	 strb r2,[r3,#5]
1038:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_ARTIFICIAL_HORIZON] = OSD_POS(8, 6)   | VISIBLE_FLAG;
 4141              	 .loc 8 1038 0
 4142 003e 7B68     	 ldr r3,[r7,#4]
 4143 0040 0022     	 movs r2,#0
 4144 0042 62F03702 	 orn r2,r2,#55
 4145 0046 9A71     	 strb r2,[r3,#6]
 4146 0048 0022     	 movs r2,#0
 4147 004a 42F00802 	 orr r2,r2,#8
 4148 004e DA71     	 strb r2,[r3,#7]
1039:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_HORIZON_SIDEBARS]   = OSD_POS(8, 6)   | VISIBLE_FLAG;
 4149              	 .loc 8 1039 0
 4150 0050 7B68     	 ldr r3,[r7,#4]
 4151 0052 0022     	 movs r2,#0
 4152 0054 62F03702 	 orn r2,r2,#55
 4153 0058 1A72     	 strb r2,[r3,#8]
 4154 005a 0022     	 movs r2,#0
 4155 005c 42F00802 	 orr r2,r2,#8
 4156 0060 5A72     	 strb r2,[r3,#9]
1040:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_ITEM_TIMER_1]       = OSD_POS(22, 1)  | VISIBLE_FLAG;
 4157              	 .loc 8 1040 0
 4158 0062 7B68     	 ldr r3,[r7,#4]
 4159 0064 0022     	 movs r2,#0
 4160 0066 42F03602 	 orr r2,r2,#54
 4161 006a 9A72     	 strb r2,[r3,#10]
 4162 006c 0022     	 movs r2,#0
 4163 006e 42F00802 	 orr r2,r2,#8
 4164 0072 DA72     	 strb r2,[r3,#11]
1041:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_ITEM_TIMER_2]       = OSD_POS(1, 1)   | VISIBLE_FLAG;
 4165              	 .loc 8 1041 0
 4166 0074 7B68     	 ldr r3,[r7,#4]
 4167 0076 0022     	 movs r2,#0
 4168 0078 42F02102 	 orr r2,r2,#33
 4169 007c 1A73     	 strb r2,[r3,#12]
 4170 007e 0022     	 movs r2,#0
 4171 0080 42F00802 	 orr r2,r2,#8
 4172 0084 5A73     	 strb r2,[r3,#13]
1042:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_FLYMODE]            = OSD_POS(13, 10) | VISIBLE_FLAG;
 4173              	 .loc 8 1042 0
 4174 0086 7B68     	 ldr r3,[r7,#4]
 4175 0088 0022     	 movs r2,#0
 4176 008a 42F04D02 	 orr r2,r2,#77
 4177 008e 9A73     	 strb r2,[r3,#14]
 4178 0090 0022     	 movs r2,#0
 4179 0092 42F00902 	 orr r2,r2,#9
 4180 0096 DA73     	 strb r2,[r3,#15]
1043:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_CRAFT_NAME]         = OSD_POS(10, 11) | VISIBLE_FLAG;
 4181              	 .loc 8 1043 0
 4182 0098 7B68     	 ldr r3,[r7,#4]
 4183 009a 0022     	 movs r2,#0
 4184 009c 42F06A02 	 orr r2,r2,#106
 4185 00a0 1A74     	 strb r2,[r3,#16]
 4186 00a2 0022     	 movs r2,#0
 4187 00a4 42F00902 	 orr r2,r2,#9
 4188 00a8 5A74     	 strb r2,[r3,#17]
1044:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_THROTTLE_POS]       = OSD_POS(1, 7)   | VISIBLE_FLAG;
 4189              	 .loc 8 1044 0
 4190 00aa 7B68     	 ldr r3,[r7,#4]
 4191 00ac 0022     	 movs r2,#0
 4192 00ae 62F01E02 	 orn r2,r2,#30
 4193 00b2 9A74     	 strb r2,[r3,#18]
 4194 00b4 0022     	 movs r2,#0
 4195 00b6 42F00802 	 orr r2,r2,#8
 4196 00ba DA74     	 strb r2,[r3,#19]
1045:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_VTX_CHANNEL]        = OSD_POS(24, 11) | VISIBLE_FLAG;
 4197              	 .loc 8 1045 0
 4198 00bc 7B68     	 ldr r3,[r7,#4]
 4199 00be 0022     	 movs r2,#0
 4200 00c0 42F07802 	 orr r2,r2,#120
 4201 00c4 1A75     	 strb r2,[r3,#20]
 4202 00c6 0022     	 movs r2,#0
 4203 00c8 42F00902 	 orr r2,r2,#9
 4204 00cc 5A75     	 strb r2,[r3,#21]
1046:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_CURRENT_DRAW]       = OSD_POS(1, 12)  | VISIBLE_FLAG;
 4205              	 .loc 8 1046 0
 4206 00ce 7B68     	 ldr r3,[r7,#4]
 4207 00d0 0022     	 movs r2,#0
 4208 00d2 62F07E02 	 orn r2,r2,#126
 4209 00d6 9A75     	 strb r2,[r3,#22]
 4210 00d8 0022     	 movs r2,#0
 4211 00da 42F00902 	 orr r2,r2,#9
 4212 00de DA75     	 strb r2,[r3,#23]
1047:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_MAH_DRAWN]          = OSD_POS(1, 11)  | VISIBLE_FLAG;
 4213              	 .loc 8 1047 0
 4214 00e0 7B68     	 ldr r3,[r7,#4]
 4215 00e2 0022     	 movs r2,#0
 4216 00e4 42F06102 	 orr r2,r2,#97
 4217 00e8 1A76     	 strb r2,[r3,#24]
 4218 00ea 0022     	 movs r2,#0
 4219 00ec 42F00902 	 orr r2,r2,#9
 4220 00f0 5A76     	 strb r2,[r3,#25]
1048:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_GPS_SPEED]          = OSD_POS(25, 6)  | VISIBLE_FLAG;
 4221              	 .loc 8 1048 0
 4222 00f2 7B68     	 ldr r3,[r7,#4]
 4223 00f4 0022     	 movs r2,#0
 4224 00f6 62F02602 	 orn r2,r2,#38
 4225 00fa 9A76     	 strb r2,[r3,#26]
 4226 00fc 0022     	 movs r2,#0
 4227 00fe 42F00802 	 orr r2,r2,#8
 4228 0102 DA76     	 strb r2,[r3,#27]
1049:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_GPS_SATS]           = OSD_POS(19, 1)  | VISIBLE_FLAG;
 4229              	 .loc 8 1049 0
 4230 0104 7B68     	 ldr r3,[r7,#4]
 4231 0106 0022     	 movs r2,#0
 4232 0108 42F03302 	 orr r2,r2,#51
 4233 010c 1A77     	 strb r2,[r3,#28]
 4234 010e 0022     	 movs r2,#0
 4235 0110 42F00802 	 orr r2,r2,#8
 4236 0114 5A77     	 strb r2,[r3,#29]
1050:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_ALTITUDE]           = OSD_POS(24, 7)  | VISIBLE_FLAG;
 4237              	 .loc 8 1050 0
 4238 0116 7B68     	 ldr r3,[r7,#4]
 4239 0118 0022     	 movs r2,#0
 4240 011a 62F00702 	 orn r2,r2,#7
 4241 011e 9A77     	 strb r2,[r3,#30]
 4242 0120 0022     	 movs r2,#0
 4243 0122 42F00802 	 orr r2,r2,#8
 4244 0126 DA77     	 strb r2,[r3,#31]
1051:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_ROLL_PIDS]          = OSD_POS(7, 13)  | VISIBLE_FLAG;
 4245              	 .loc 8 1051 0
 4246 0128 7B68     	 ldr r3,[r7,#4]
 4247 012a 0022     	 movs r2,#0
 4248 012c 62F05802 	 orn r2,r2,#88
 4249 0130 83F82020 	 strb r2,[r3,#32]
 4250 0134 0022     	 movs r2,#0
 4251 0136 42F00902 	 orr r2,r2,#9
 4252 013a 83F82120 	 strb r2,[r3,#33]
1052:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_PITCH_PIDS]         = OSD_POS(7, 14)  | VISIBLE_FLAG;
 4253              	 .loc 8 1052 0
 4254 013e 7B68     	 ldr r3,[r7,#4]
 4255 0140 0022     	 movs r2,#0
 4256 0142 62F03802 	 orn r2,r2,#56
 4257 0146 83F82220 	 strb r2,[r3,#34]
 4258 014a 0022     	 movs r2,#0
 4259 014c 42F00902 	 orr r2,r2,#9
 4260 0150 83F82320 	 strb r2,[r3,#35]
1053:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_YAW_PIDS]           = OSD_POS(7, 15)  | VISIBLE_FLAG;
 4261              	 .loc 8 1053 0
 4262 0154 7B68     	 ldr r3,[r7,#4]
 4263 0156 0022     	 movs r2,#0
 4264 0158 62F01802 	 orn r2,r2,#24
 4265 015c 83F82420 	 strb r2,[r3,#36]
 4266 0160 0022     	 movs r2,#0
 4267 0162 42F00902 	 orr r2,r2,#9
 4268 0166 83F82520 	 strb r2,[r3,#37]
1054:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_POWER]              = OSD_POS(1, 10)  | VISIBLE_FLAG;
 4269              	 .loc 8 1054 0
 4270 016a 7B68     	 ldr r3,[r7,#4]
 4271 016c 0022     	 movs r2,#0
 4272 016e 42F04102 	 orr r2,r2,#65
 4273 0172 83F82620 	 strb r2,[r3,#38]
 4274 0176 0022     	 movs r2,#0
 4275 0178 42F00902 	 orr r2,r2,#9
 4276 017c 83F82720 	 strb r2,[r3,#39]
1055:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_PIDRATE_PROFILE]    = OSD_POS(25, 10) | VISIBLE_FLAG;
 4277              	 .loc 8 1055 0
 4278 0180 7B68     	 ldr r3,[r7,#4]
 4279 0182 0022     	 movs r2,#0
 4280 0184 42F05902 	 orr r2,r2,#89
 4281 0188 83F82820 	 strb r2,[r3,#40]
 4282 018c 0022     	 movs r2,#0
 4283 018e 42F00902 	 orr r2,r2,#9
 4284 0192 83F82920 	 strb r2,[r3,#41]
1056:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_AVG_CELL_VOLTAGE]   = OSD_POS(12, 0)  | VISIBLE_FLAG;
 4285              	 .loc 8 1056 0
 4286 0196 7B68     	 ldr r3,[r7,#4]
 4287 0198 0022     	 movs r2,#0
 4288 019a 42F00C02 	 orr r2,r2,#12
 4289 019e 83F82C20 	 strb r2,[r3,#44]
 4290 01a2 0022     	 movs r2,#0
 4291 01a4 42F00802 	 orr r2,r2,#8
 4292 01a8 83F82D20 	 strb r2,[r3,#45]
1057:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_DEBUG]              = OSD_POS(1, 0);
 4293              	 .loc 8 1057 0
 4294 01ac 7B68     	 ldr r3,[r7,#4]
 4295 01ae 0022     	 movs r2,#0
 4296 01b0 42F00102 	 orr r2,r2,#1
 4297 01b4 83F83220 	 strb r2,[r3,#50]
 4298 01b8 0022     	 movs r2,#0
 4299 01ba 83F83320 	 strb r2,[r3,#51]
1058:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_PITCH_ANGLE]        = OSD_POS(1, 8)   | VISIBLE_FLAG;
 4300              	 .loc 8 1058 0
 4301 01be 7B68     	 ldr r3,[r7,#4]
 4302 01c0 0022     	 movs r2,#0
 4303 01c2 42F00102 	 orr r2,r2,#1
 4304 01c6 83F83420 	 strb r2,[r3,#52]
 4305 01ca 0022     	 movs r2,#0
 4306 01cc 42F00902 	 orr r2,r2,#9
 4307 01d0 83F83520 	 strb r2,[r3,#53]
1059:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_ROLL_ANGLE]         = OSD_POS(1, 9)   | VISIBLE_FLAG;
 4308              	 .loc 8 1059 0
 4309 01d4 7B68     	 ldr r3,[r7,#4]
 4310 01d6 0022     	 movs r2,#0
 4311 01d8 42F02102 	 orr r2,r2,#33
 4312 01dc 83F83620 	 strb r2,[r3,#54]
 4313 01e0 0022     	 movs r2,#0
 4314 01e2 42F00902 	 orr r2,r2,#9
 4315 01e6 83F83720 	 strb r2,[r3,#55]
1060:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_GPS_LAT]            = OSD_POS(1, 0)   | VISIBLE_FLAG;
 4316              	 .loc 8 1060 0
 4317 01ea 7B68     	 ldr r3,[r7,#4]
 4318 01ec 0022     	 movs r2,#0
 4319 01ee 42F00102 	 orr r2,r2,#1
 4320 01f2 83F83020 	 strb r2,[r3,#48]
 4321 01f6 0022     	 movs r2,#0
 4322 01f8 42F00802 	 orr r2,r2,#8
 4323 01fc 83F83120 	 strb r2,[r3,#49]
1061:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_GPS_LON]            = OSD_POS(18, 0)  | VISIBLE_FLAG;
 4324              	 .loc 8 1061 0
 4325 0200 7B68     	 ldr r3,[r7,#4]
 4326 0202 0022     	 movs r2,#0
 4327 0204 42F01202 	 orr r2,r2,#18
 4328 0208 83F82E20 	 strb r2,[r3,#46]
 4329 020c 0022     	 movs r2,#0
 4330 020e 42F00802 	 orr r2,r2,#8
 4331 0212 83F82F20 	 strb r2,[r3,#47]
1062:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_HOME_DIST]          = OSD_POS(15, 9)  | VISIBLE_FLAG;
 4332              	 .loc 8 1062 0
 4333 0216 7B68     	 ldr r3,[r7,#4]
 4334 0218 0022     	 movs r2,#0
 4335 021a 42F02F02 	 orr r2,r2,#47
 4336 021e 83F83E20 	 strb r2,[r3,#62]
 4337 0222 0022     	 movs r2,#0
 4338 0224 42F00902 	 orr r2,r2,#9
 4339 0228 83F83F20 	 strb r2,[r3,#63]
1063:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_HOME_DIR]           = OSD_POS(14, 9)  | VISIBLE_FLAG;
 4340              	 .loc 8 1063 0
 4341 022c 7B68     	 ldr r3,[r7,#4]
 4342 022e 0022     	 movs r2,#0
 4343 0230 42F02E02 	 orr r2,r2,#46
 4344 0234 83F83C20 	 strb r2,[r3,#60]
 4345 0238 0022     	 movs r2,#0
 4346 023a 42F00902 	 orr r2,r2,#9
 4347 023e 83F83D20 	 strb r2,[r3,#61]
1064:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_COMPASS_BAR]        = OSD_POS(10, 8)  | VISIBLE_FLAG;
 4348              	 .loc 8 1064 0
 4349 0242 7B68     	 ldr r3,[r7,#4]
 4350 0244 0022     	 movs r2,#0
 4351 0246 42F00A02 	 orr r2,r2,#10
 4352 024a 83F84420 	 strb r2,[r3,#68]
 4353 024e 0022     	 movs r2,#0
 4354 0250 42F00902 	 orr r2,r2,#9
 4355 0254 83F84520 	 strb r2,[r3,#69]
1065:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_MAIN_BATT_USAGE]    = OSD_POS(8, 12)  | VISIBLE_FLAG;
 4356              	 .loc 8 1065 0
 4357 0258 7B68     	 ldr r3,[r7,#4]
 4358 025a 0022     	 movs r2,#0
 4359 025c 62F07702 	 orn r2,r2,#119
 4360 0260 83F83820 	 strb r2,[r3,#56]
 4361 0264 0022     	 movs r2,#0
 4362 0266 42F00902 	 orr r2,r2,#9
 4363 026a 83F83920 	 strb r2,[r3,#57]
1066:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_DISARMED]           = OSD_POS(11, 4)  | VISIBLE_FLAG;
 4364              	 .loc 8 1066 0
 4365 026e 7B68     	 ldr r3,[r7,#4]
 4366 0270 0022     	 movs r2,#0
 4367 0272 62F07402 	 orn r2,r2,#116
 4368 0276 83F83A20 	 strb r2,[r3,#58]
 4369 027a 0022     	 movs r2,#0
 4370 027c 42F00802 	 orr r2,r2,#8
 4371 0280 83F83B20 	 strb r2,[r3,#59]
1067:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_NUMERICAL_HEADING]  = OSD_POS(24, 9)  | VISIBLE_FLAG;
 4372              	 .loc 8 1067 0
 4373 0284 7B68     	 ldr r3,[r7,#4]
 4374 0286 0022     	 movs r2,#0
 4375 0288 42F03802 	 orr r2,r2,#56
 4376 028c 83F84020 	 strb r2,[r3,#64]
 4377 0290 0022     	 movs r2,#0
 4378 0292 42F00902 	 orr r2,r2,#9
 4379 0296 83F84120 	 strb r2,[r3,#65]
1068:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_NUMERICAL_VARIO]    = OSD_POS(24, 8)  | VISIBLE_FLAG;
 4380              	 .loc 8 1068 0
 4381 029a 7B68     	 ldr r3,[r7,#4]
 4382 029c 0022     	 movs r2,#0
 4383 029e 42F01802 	 orr r2,r2,#24
 4384 02a2 83F84220 	 strb r2,[r3,#66]
 4385 02a6 0022     	 movs r2,#0
 4386 02a8 42F00902 	 orr r2,r2,#9
 4387 02ac 83F84320 	 strb r2,[r3,#67]
1069:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_ESC_TMP]            = OSD_POS(1,  5)  | VISIBLE_FLAG;
 4388              	 .loc 8 1069 0
 4389 02b0 7B68     	 ldr r3,[r7,#4]
 4390 02b2 0022     	 movs r2,#0
 4391 02b4 62F05E02 	 orn r2,r2,#94
 4392 02b8 83F84620 	 strb r2,[r3,#70]
 4393 02bc 0022     	 movs r2,#0
 4394 02be 42F00802 	 orr r2,r2,#8
 4395 02c2 83F84720 	 strb r2,[r3,#71]
1070:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_ESC_RPM]            = OSD_POS(1, 6)   | VISIBLE_FLAG;
 4396              	 .loc 8 1070 0
 4397 02c6 7B68     	 ldr r3,[r7,#4]
 4398 02c8 0022     	 movs r2,#0
 4399 02ca 62F03E02 	 orn r2,r2,#62
 4400 02ce 83F84820 	 strb r2,[r3,#72]
 4401 02d2 0022     	 movs r2,#0
 4402 02d4 42F00802 	 orr r2,r2,#8
 4403 02d8 83F84920 	 strb r2,[r3,#73]
1071:../cleanflight/src/main/io/osd.c **** #else
1072:../cleanflight/src/main/io/osd.c ****     // Position elements near centre of screen and disabled by default
1073:../cleanflight/src/main/io/osd.c ****     for (int i = 0; i < OSD_ITEM_COUNT; i++) {
1074:../cleanflight/src/main/io/osd.c ****         osdConfig->item_pos[i] = OSD_POS(10, 7);
1075:../cleanflight/src/main/io/osd.c ****     }
1076:../cleanflight/src/main/io/osd.c **** #endif
1077:../cleanflight/src/main/io/osd.c **** 
1078:../cleanflight/src/main/io/osd.c ****     // Always enable warnings elements by default
1079:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_WARNINGS] = OSD_POS(9, 10) | VISIBLE_FLAG;
 4404              	 .loc 8 1079 0
 4405 02dc 7B68     	 ldr r3,[r7,#4]
 4406 02de 0022     	 movs r2,#0
 4407 02e0 42F04902 	 orr r2,r2,#73
 4408 02e4 83F82A20 	 strb r2,[r3,#42]
 4409 02e8 0022     	 movs r2,#0
 4410 02ea 42F00902 	 orr r2,r2,#9
 4411 02ee 83F82B20 	 strb r2,[r3,#43]
1080:../cleanflight/src/main/io/osd.c **** 
1081:../cleanflight/src/main/io/osd.c ****     // Default to old fixed positions for these elements
1082:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_CROSSHAIRS]         = OSD_POS(13, 6);
 4412              	 .loc 8 1082 0
 4413 02f2 7B68     	 ldr r3,[r7,#4]
 4414 02f4 0022     	 movs r2,#0
 4415 02f6 62F03202 	 orn r2,r2,#50
 4416 02fa 1A71     	 strb r2,[r3,#4]
 4417 02fc 0022     	 movs r2,#0
 4418 02fe 5A71     	 strb r2,[r3,#5]
1083:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_ARTIFICIAL_HORIZON] = OSD_POS(14, 2);
 4419              	 .loc 8 1083 0
 4420 0300 7B68     	 ldr r3,[r7,#4]
 4421 0302 0022     	 movs r2,#0
 4422 0304 42F04E02 	 orr r2,r2,#78
 4423 0308 9A71     	 strb r2,[r3,#6]
 4424 030a 0022     	 movs r2,#0
 4425 030c DA71     	 strb r2,[r3,#7]
1084:../cleanflight/src/main/io/osd.c ****     osdConfig->item_pos[OSD_HORIZON_SIDEBARS]   = OSD_POS(14, 6);
 4426              	 .loc 8 1084 0
 4427 030e 7B68     	 ldr r3,[r7,#4]
 4428 0310 0022     	 movs r2,#0
 4429 0312 62F03102 	 orn r2,r2,#49
 4430 0316 1A72     	 strb r2,[r3,#8]
 4431 0318 0022     	 movs r2,#0
 4432 031a 5A72     	 strb r2,[r3,#9]
1085:../cleanflight/src/main/io/osd.c **** 
1086:../cleanflight/src/main/io/osd.c ****     // Enable the default stats
1087:../cleanflight/src/main/io/osd.c ****     osdConfig->enabled_stats = 0; // reset all to off and enable only a few initially
 4433              	 .loc 8 1087 0
 4434 031c 7B68     	 ldr r3,[r7,#4]
 4435 031e 0022     	 movs r2,#0
 4436 0320 83F86420 	 strb r2,[r3,#100]
 4437 0324 0022     	 movs r2,#0
 4438 0326 83F86520 	 strb r2,[r3,#101]
 4439 032a 0022     	 movs r2,#0
 4440 032c 83F86620 	 strb r2,[r3,#102]
 4441 0330 0022     	 movs r2,#0
 4442 0332 83F86720 	 strb r2,[r3,#103]
1088:../cleanflight/src/main/io/osd.c ****     osdStatSetState(OSD_STAT_MAX_SPEED, true);
 4443              	 .loc 8 1088 0
 4444 0336 0320     	 movs r0,#3
 4445 0338 0121     	 movs r1,#1
 4446 033a FFF7FEFF 	 bl osdStatSetState
1089:../cleanflight/src/main/io/osd.c ****     osdStatSetState(OSD_STAT_MIN_BATTERY, true);
 4447              	 .loc 8 1089 0
 4448 033e 0520     	 movs r0,#5
 4449 0340 0121     	 movs r1,#1
 4450 0342 FFF7FEFF 	 bl osdStatSetState
1090:../cleanflight/src/main/io/osd.c ****     osdStatSetState(OSD_STAT_MIN_RSSI, true);
 4451              	 .loc 8 1090 0
 4452 0346 0820     	 movs r0,#8
 4453 0348 0121     	 movs r1,#1
 4454 034a FFF7FEFF 	 bl osdStatSetState
1091:../cleanflight/src/main/io/osd.c ****     osdStatSetState(OSD_STAT_MAX_CURRENT, true);
 4455              	 .loc 8 1091 0
 4456 034e 0920     	 movs r0,#9
 4457 0350 0121     	 movs r1,#1
 4458 0352 FFF7FEFF 	 bl osdStatSetState
1092:../cleanflight/src/main/io/osd.c ****     osdStatSetState(OSD_STAT_USED_MAH, true);
 4459              	 .loc 8 1092 0
 4460 0356 0A20     	 movs r0,#10
 4461 0358 0121     	 movs r1,#1
 4462 035a FFF7FEFF 	 bl osdStatSetState
1093:../cleanflight/src/main/io/osd.c ****     osdStatSetState(OSD_STAT_BLACKBOX, true);
 4463              	 .loc 8 1093 0
 4464 035e 0C20     	 movs r0,#12
 4465 0360 0121     	 movs r1,#1
 4466 0362 FFF7FEFF 	 bl osdStatSetState
1094:../cleanflight/src/main/io/osd.c ****     osdStatSetState(OSD_STAT_BLACKBOX_NUMBER, true);
 4467              	 .loc 8 1094 0
 4468 0366 0D20     	 movs r0,#13
 4469 0368 0121     	 movs r1,#1
 4470 036a FFF7FEFF 	 bl osdStatSetState
1095:../cleanflight/src/main/io/osd.c ****     osdStatSetState(OSD_STAT_TIMER_2, true);
 4471              	 .loc 8 1095 0
 4472 036e 0220     	 movs r0,#2
 4473 0370 0121     	 movs r1,#1
 4474 0372 FFF7FEFF 	 bl osdStatSetState
1096:../cleanflight/src/main/io/osd.c **** 
1097:../cleanflight/src/main/io/osd.c ****     osdConfig->units = OSD_UNIT_METRIC;
 4475              	 .loc 8 1097 0
 4476 0376 7B68     	 ldr r3,[r7,#4]
 4477 0378 0122     	 movs r2,#1
 4478 037a 83F85B20 	 strb r2,[r3,#91]
 4479              	.LBB30:
1098:../cleanflight/src/main/io/osd.c **** 
1099:../cleanflight/src/main/io/osd.c ****     // Enable all warnings by default
1100:../cleanflight/src/main/io/osd.c ****     for (int i=0; i < OSD_WARNING_COUNT; i++) {
 4480              	 .loc 8 1100 0
 4481 037e 0023     	 movs r3,#0
 4482 0380 FB60     	 str r3,[r7,#12]
 4483 0382 08E0     	 b .L243
 4484              	.L244:
1101:../cleanflight/src/main/io/osd.c ****         osdWarnSetState(i, true);
 4485              	 .loc 8 1101 0 discriminator 3
 4486 0384 FB68     	 ldr r3,[r7,#12]
 4487 0386 DBB2     	 uxtb r3,r3
 4488 0388 1846     	 mov r0,r3
 4489 038a 0121     	 movs r1,#1
 4490 038c FFF7FEFF 	 bl osdWarnSetState
1100:../cleanflight/src/main/io/osd.c ****         osdWarnSetState(i, true);
 4491              	 .loc 8 1100 0 discriminator 3
 4492 0390 FB68     	 ldr r3,[r7,#12]
 4493 0392 0133     	 adds r3,r3,#1
 4494 0394 FB60     	 str r3,[r7,#12]
 4495              	.L243:
1100:../cleanflight/src/main/io/osd.c ****         osdWarnSetState(i, true);
 4496              	 .loc 8 1100 0 is_stmt 0 discriminator 1
 4497 0396 FB68     	 ldr r3,[r7,#12]
 4498 0398 082B     	 cmp r3,#8
 4499 039a F3DD     	 ble .L244
 4500              	.LBE30:
1102:../cleanflight/src/main/io/osd.c ****     }
1103:../cleanflight/src/main/io/osd.c **** 
1104:../cleanflight/src/main/io/osd.c ****     osdConfig->timers[OSD_TIMER_1] = OSD_TIMER(OSD_TIMER_SRC_ON, OSD_TIMER_PREC_SECOND, 10);
 4501              	 .loc 8 1104 0 is_stmt 1
 4502 039c 7B68     	 ldr r3,[r7,#4]
 4503 039e 0022     	 movs r2,#0
 4504 03a0 83F85C20 	 strb r2,[r3,#92]
 4505 03a4 0022     	 movs r2,#0
 4506 03a6 42F00A02 	 orr r2,r2,#10
 4507 03aa 83F85D20 	 strb r2,[r3,#93]
1105:../cleanflight/src/main/io/osd.c ****     osdConfig->timers[OSD_TIMER_2] = OSD_TIMER(OSD_TIMER_SRC_TOTAL_ARMED, OSD_TIMER_PREC_SECOND, 10
 4508              	 .loc 8 1105 0
 4509 03ae 7B68     	 ldr r3,[r7,#4]
 4510 03b0 0022     	 movs r2,#0
 4511 03b2 42F00102 	 orr r2,r2,#1
 4512 03b6 83F85E20 	 strb r2,[r3,#94]
 4513 03ba 0022     	 movs r2,#0
 4514 03bc 42F00A02 	 orr r2,r2,#10
 4515 03c0 83F85F20 	 strb r2,[r3,#95]
1106:../cleanflight/src/main/io/osd.c **** 
1107:../cleanflight/src/main/io/osd.c ****     osdConfig->rssi_alarm = 20;
 4516              	 .loc 8 1107 0
 4517 03c4 7B68     	 ldr r3,[r7,#4]
 4518 03c6 1422     	 movs r2,#20
 4519 03c8 83F85A20 	 strb r2,[r3,#90]
1108:../cleanflight/src/main/io/osd.c ****     osdConfig->cap_alarm  = 2200;
 4520              	 .loc 8 1108 0
 4521 03cc 7B68     	 ldr r3,[r7,#4]
 4522 03ce 0022     	 movs r2,#0
 4523 03d0 62F06702 	 orn r2,r2,#103
 4524 03d4 83F85620 	 strb r2,[r3,#86]
 4525 03d8 0022     	 movs r2,#0
 4526 03da 42F00802 	 orr r2,r2,#8
 4527 03de 83F85720 	 strb r2,[r3,#87]
1109:../cleanflight/src/main/io/osd.c ****     osdConfig->alt_alarm  = 100; // meters or feet depend on configuration
 4528              	 .loc 8 1109 0
 4529 03e2 7B68     	 ldr r3,[r7,#4]
 4530 03e4 0022     	 movs r2,#0
 4531 03e6 42F06402 	 orr r2,r2,#100
 4532 03ea 83F85820 	 strb r2,[r3,#88]
 4533 03ee 0022     	 movs r2,#0
 4534 03f0 83F85920 	 strb r2,[r3,#89]
1110:../cleanflight/src/main/io/osd.c ****     osdConfig->esc_temp_alarm = ESC_TEMP_ALARM_OFF; // off by default
 4535              	 .loc 8 1110 0
 4536 03f4 7B68     	 ldr r3,[r7,#4]
 4537 03f6 8022     	 movs r2,#128
 4538 03f8 83F86820 	 strb r2,[r3,#104]
1111:../cleanflight/src/main/io/osd.c ****     osdConfig->esc_rpm_alarm = ESC_RPM_ALARM_OFF; // off by default
 4539              	 .loc 8 1111 0
 4540 03fc 7B68     	 ldr r3,[r7,#4]
 4541 03fe 4FF0FF32 	 mov r2,#-1
 4542 0402 83F86920 	 strb r2,[r3,#105]
 4543 0406 4FF0FF32 	 mov r2,#-1
 4544 040a 83F86A20 	 strb r2,[r3,#106]
1112:../cleanflight/src/main/io/osd.c ****     osdConfig->esc_current_alarm = ESC_CURRENT_ALARM_OFF; // off by default
 4545              	 .loc 8 1112 0
 4546 040e 7B68     	 ldr r3,[r7,#4]
 4547 0410 4FF0FF32 	 mov r2,#-1
 4548 0414 83F86B20 	 strb r2,[r3,#107]
 4549 0418 4FF0FF32 	 mov r2,#-1
 4550 041c 83F86C20 	 strb r2,[r3,#108]
1113:../cleanflight/src/main/io/osd.c ****     osdConfig->core_temp_alarm = 70; // a temperature above 70C should produce a warning, lockups h
 4551              	 .loc 8 1113 0
 4552 0420 7B68     	 ldr r3,[r7,#4]
 4553 0422 4622     	 movs r2,#70
 4554 0424 83F86D20 	 strb r2,[r3,#109]
1114:../cleanflight/src/main/io/osd.c **** 
1115:../cleanflight/src/main/io/osd.c ****     osdConfig->ahMaxPitch = 20; // 20 degrees
 4555              	 .loc 8 1115 0
 4556 0428 7B68     	 ldr r3,[r7,#4]
 4557 042a 1422     	 movs r2,#20
 4558 042c 83F86220 	 strb r2,[r3,#98]
1116:../cleanflight/src/main/io/osd.c ****     osdConfig->ahMaxRoll = 40; // 40 degrees
 4559              	 .loc 8 1116 0
 4560 0430 7B68     	 ldr r3,[r7,#4]
 4561 0432 2822     	 movs r2,#40
 4562 0434 83F86320 	 strb r2,[r3,#99]
1117:../cleanflight/src/main/io/osd.c **** }
 4563              	 .loc 8 1117 0
 4564 0438 1037     	 adds r7,r7,#16
 4565              	.LCFI140:
 4566              	 .cfi_def_cfa_offset 8
 4567 043a BD46     	 mov sp,r7
 4568              	.LCFI141:
 4569              	 .cfi_def_cfa_register 13
 4570              	 
 4571 043c 80BD     	 pop {r7,pc}
 4572              	 .cfi_endproc
 4573              	.LFE618:
 4575 043e 00BF     	 .section .text.osdDrawLogo,"ax",%progbits
 4576              	 .align 2
 4577              	 .thumb
 4578              	 .thumb_func
 4580              	osdDrawLogo:
 4581              	.LFB619:
1118:../cleanflight/src/main/io/osd.c **** 
1119:../cleanflight/src/main/io/osd.c **** static void osdDrawLogo(int x, int y)
1120:../cleanflight/src/main/io/osd.c **** {
 4582              	 .loc 8 1120 0
 4583              	 .cfi_startproc
 4584              	 
 4585              	 
 4586 0000 90B5     	 push {r4,r7,lr}
 4587              	.LCFI142:
 4588              	 .cfi_def_cfa_offset 12
 4589              	 .cfi_offset 4,-12
 4590              	 .cfi_offset 7,-8
 4591              	 .cfi_offset 14,-4
 4592 0002 87B0     	 sub sp,sp,#28
 4593              	.LCFI143:
 4594              	 .cfi_def_cfa_offset 40
 4595 0004 00AF     	 add r7,sp,#0
 4596              	.LCFI144:
 4597              	 .cfi_def_cfa_register 7
 4598 0006 7860     	 str r0,[r7,#4]
 4599 0008 3960     	 str r1,[r7]
1121:../cleanflight/src/main/io/osd.c ****     // display logo and help
1122:../cleanflight/src/main/io/osd.c ****     int fontOffset = 160;
 4600              	 .loc 8 1122 0
 4601 000a A023     	 movs r3,#160
 4602 000c 7B61     	 str r3,[r7,#20]
 4603              	.LBB31:
1123:../cleanflight/src/main/io/osd.c ****     for (int row = 0; row < 4; row++) {
 4604              	 .loc 8 1123 0
 4605 000e 0023     	 movs r3,#0
 4606 0010 3B61     	 str r3,[r7,#16]
 4607 0012 23E0     	 b .L246
 4608              	.L250:
 4609              	.LBB32:
1124:../cleanflight/src/main/io/osd.c ****         for (int column = 0; column < 24; column++) {
 4610              	 .loc 8 1124 0
 4611 0014 0023     	 movs r3,#0
 4612 0016 FB60     	 str r3,[r7,#12]
 4613 0018 1AE0     	 b .L247
 4614              	.L249:
1125:../cleanflight/src/main/io/osd.c ****             if (fontOffset <= SYM_END_OF_FONT)
 4615              	 .loc 8 1125 0
 4616 001a 7B69     	 ldr r3,[r7,#20]
 4617 001c FF2B     	 cmp r3,#255
 4618 001e 14DC     	 bgt .L248
1126:../cleanflight/src/main/io/osd.c ****                 displayWriteChar(osdDisplayPort, x + column, y + row, fontOffset++);
 4619              	 .loc 8 1126 0
 4620 0020 114B     	 ldr r3,.L251
 4621 0022 1868     	 ldr r0,[r3]
 4622 0024 7B68     	 ldr r3,[r7,#4]
 4623 0026 DAB2     	 uxtb r2,r3
 4624 0028 FB68     	 ldr r3,[r7,#12]
 4625 002a DBB2     	 uxtb r3,r3
 4626 002c 1344     	 add r3,r3,r2
 4627 002e D9B2     	 uxtb r1,r3
 4628 0030 3B68     	 ldr r3,[r7]
 4629 0032 DAB2     	 uxtb r2,r3
 4630 0034 3B69     	 ldr r3,[r7,#16]
 4631 0036 DBB2     	 uxtb r3,r3
 4632 0038 1344     	 add r3,r3,r2
 4633 003a DCB2     	 uxtb r4,r3
 4634 003c 7B69     	 ldr r3,[r7,#20]
 4635 003e 5A1C     	 adds r2,r3,#1
 4636 0040 7A61     	 str r2,[r7,#20]
 4637 0042 DBB2     	 uxtb r3,r3
 4638 0044 2246     	 mov r2,r4
 4639 0046 FFF7FEFF 	 bl displayWriteChar
 4640              	.L248:
1124:../cleanflight/src/main/io/osd.c ****         for (int column = 0; column < 24; column++) {
 4641              	 .loc 8 1124 0 discriminator 2
 4642 004a FB68     	 ldr r3,[r7,#12]
 4643 004c 0133     	 adds r3,r3,#1
 4644 004e FB60     	 str r3,[r7,#12]
 4645              	.L247:
1124:../cleanflight/src/main/io/osd.c ****         for (int column = 0; column < 24; column++) {
 4646              	 .loc 8 1124 0 is_stmt 0 discriminator 1
 4647 0050 FB68     	 ldr r3,[r7,#12]
 4648 0052 172B     	 cmp r3,#23
 4649 0054 E1DD     	 ble .L249
 4650              	.LBE32:
1123:../cleanflight/src/main/io/osd.c ****         for (int column = 0; column < 24; column++) {
 4651              	 .loc 8 1123 0 is_stmt 1 discriminator 2
 4652 0056 3B69     	 ldr r3,[r7,#16]
 4653 0058 0133     	 adds r3,r3,#1
 4654 005a 3B61     	 str r3,[r7,#16]
 4655              	.L246:
1123:../cleanflight/src/main/io/osd.c ****         for (int column = 0; column < 24; column++) {
 4656              	 .loc 8 1123 0 is_stmt 0 discriminator 1
 4657 005c 3B69     	 ldr r3,[r7,#16]
 4658 005e 032B     	 cmp r3,#3
 4659 0060 D8DD     	 ble .L250
 4660              	.LBE31:
1127:../cleanflight/src/main/io/osd.c ****         }
1128:../cleanflight/src/main/io/osd.c ****     }
1129:../cleanflight/src/main/io/osd.c **** }
 4661              	 .loc 8 1129 0 is_stmt 1
 4662 0062 1C37     	 adds r7,r7,#28
 4663              	.LCFI145:
 4664              	 .cfi_def_cfa_offset 12
 4665 0064 BD46     	 mov sp,r7
 4666              	.LCFI146:
 4667              	 .cfi_def_cfa_register 13
 4668              	 
 4669 0066 90BD     	 pop {r4,r7,pc}
 4670              	.L252:
 4671              	 .align 2
 4672              	.L251:
 4673 0068 00000000 	 .word osdDisplayPort
 4674              	 .cfi_endproc
 4675              	.LFE619:
 4677              	 .section .rodata
 4678              	 .align 2
 4679              	.LC49:
 4680 01e0 56257300 	 .ascii "V%s\000"
 4681              	 .align 2
 4682              	.LC50:
 4683 01e4 322E352E 	 .ascii "2.5.0\000"
 4683      3000
 4684 01ea 0000     	 .align 2
 4685              	.LC51:
 4686 01ec 4D454E55 	 .ascii "MENU:THR MID\000"
 4686      3A544852 
 4686      204D4944 
 4686      00
 4687 01f9 000000   	 .align 2
 4688              	.LC52:
 4689 01fc 2B205941 	 .ascii "+ YAW LEFT\000"
 4689      57204C45 
 4689      465400
 4690 0207 00       	 .align 2
 4691              	.LC53:
 4692 0208 2B205049 	 .ascii "+ PITCH UP\000"
 4692      54434820 
 4692      555000
 4693              	 .section .text.osdInit,"ax",%progbits
 4694              	 .align 2
 4695              	 .global osdInit
 4696              	 .thumb
 4697              	 .thumb_func
 4699              	osdInit:
 4700              	.LFB620:
1130:../cleanflight/src/main/io/osd.c **** 
1131:../cleanflight/src/main/io/osd.c **** void osdInit(displayPort_t *osdDisplayPortToUse)
1132:../cleanflight/src/main/io/osd.c **** {
 4701              	 .loc 8 1132 0
 4702              	 .cfi_startproc
 4703              	 
 4704              	 
 4705 0000 80B5     	 push {r7,lr}
 4706              	.LCFI147:
 4707              	 .cfi_def_cfa_offset 8
 4708              	 .cfi_offset 7,-8
 4709              	 .cfi_offset 14,-4
 4710 0002 92B0     	 sub sp,sp,#72
 4711              	.LCFI148:
 4712              	 .cfi_def_cfa_offset 80
 4713 0004 00AF     	 add r7,sp,#0
 4714              	.LCFI149:
 4715              	 .cfi_def_cfa_register 7
 4716 0006 7860     	 str r0,[r7,#4]
1133:../cleanflight/src/main/io/osd.c ****     if (!osdDisplayPortToUse) {
 4717              	 .loc 8 1133 0
 4718 0008 7B68     	 ldr r3,[r7,#4]
 4719 000a 002B     	 cmp r3,#0
 4720 000c 63D0     	 beq .L253
1134:../cleanflight/src/main/io/osd.c ****         return;
1135:../cleanflight/src/main/io/osd.c ****     }
1136:../cleanflight/src/main/io/osd.c **** 
1137:../cleanflight/src/main/io/osd.c ****     BUILD_BUG_ON(OSD_POS_MAX != OSD_POS(31,31));
1138:../cleanflight/src/main/io/osd.c **** 
1139:../cleanflight/src/main/io/osd.c ****     osdDisplayPort = osdDisplayPortToUse;
 4721              	 .loc 8 1139 0
 4722 000e 334A     	 ldr r2,.L257
 4723 0010 7B68     	 ldr r3,[r7,#4]
 4724 0012 1360     	 str r3,[r2]
1140:../cleanflight/src/main/io/osd.c **** #ifdef USE_CMS
1141:../cleanflight/src/main/io/osd.c ****     cmsDisplayPortRegister(osdDisplayPort);
 4725              	 .loc 8 1141 0
 4726 0014 314B     	 ldr r3,.L257
 4727 0016 1B68     	 ldr r3,[r3]
 4728 0018 1846     	 mov r0,r3
 4729 001a FFF7FEFF 	 bl cmsDisplayPortRegister
1142:../cleanflight/src/main/io/osd.c **** #endif
1143:../cleanflight/src/main/io/osd.c **** 
1144:../cleanflight/src/main/io/osd.c ****     armState = ARMING_FLAG(ARMED);
 4730              	 .loc 8 1144 0
 4731 001e 304B     	 ldr r3,.L257+4
 4732 0020 1B78     	 ldrb r3,[r3]
 4733 0022 03F00103 	 and r3,r3,#1
 4734 0026 DAB2     	 uxtb r2,r3
 4735 0028 2E4B     	 ldr r3,.L257+8
 4736 002a 1A70     	 strb r2,[r3]
1145:../cleanflight/src/main/io/osd.c **** 
1146:../cleanflight/src/main/io/osd.c ****     memset(blinkBits, 0, sizeof(blinkBits));
 4737              	 .loc 8 1146 0
 4738 002c 2E48     	 ldr r0,.L257+12
 4739 002e 0021     	 movs r1,#0
 4740 0030 0822     	 movs r2,#8
 4741 0032 FFF7FEFF 	 bl memset
1147:../cleanflight/src/main/io/osd.c **** 
1148:../cleanflight/src/main/io/osd.c ****     displayClearScreen(osdDisplayPort);
 4742              	 .loc 8 1148 0
 4743 0036 294B     	 ldr r3,.L257
 4744 0038 1B68     	 ldr r3,[r3]
 4745 003a 1846     	 mov r0,r3
 4746 003c FFF7FEFF 	 bl displayClearScreen
1149:../cleanflight/src/main/io/osd.c **** 
1150:../cleanflight/src/main/io/osd.c ****     osdDrawLogo(3, 1);
 4747              	 .loc 8 1150 0
 4748 0040 0320     	 movs r0,#3
 4749 0042 0121     	 movs r1,#1
 4750 0044 FFF7FEFF 	 bl osdDrawLogo
1151:../cleanflight/src/main/io/osd.c **** 
1152:../cleanflight/src/main/io/osd.c ****     char string_buffer[30];
1153:../cleanflight/src/main/io/osd.c ****     tfp_sprintf(string_buffer, "V%s", FC_VERSION_STRING);
 4751              	 .loc 8 1153 0
 4752 0048 07F12803 	 add r3,r7,#40
 4753 004c 1846     	 mov r0,r3
 4754 004e 2749     	 ldr r1,.L257+16
 4755 0050 274A     	 ldr r2,.L257+20
 4756 0052 FFF7FEFF 	 bl tfp_sprintf
1154:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, 20, 6, string_buffer);
 4757              	 .loc 8 1154 0
 4758 0056 214B     	 ldr r3,.L257
 4759 0058 1A68     	 ldr r2,[r3]
 4760 005a 07F12803 	 add r3,r7,#40
 4761 005e 1046     	 mov r0,r2
 4762 0060 1421     	 movs r1,#20
 4763 0062 0622     	 movs r2,#6
 4764 0064 FFF7FEFF 	 bl displayWrite
1155:../cleanflight/src/main/io/osd.c **** #ifdef USE_CMS
1156:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, 7, 8,  CMS_STARTUP_HELP_TEXT1);
 4765              	 .loc 8 1156 0
 4766 0068 1C4B     	 ldr r3,.L257
 4767 006a 1B68     	 ldr r3,[r3]
 4768 006c 1846     	 mov r0,r3
 4769 006e 0721     	 movs r1,#7
 4770 0070 0822     	 movs r2,#8
 4771 0072 204B     	 ldr r3,.L257+24
 4772 0074 FFF7FEFF 	 bl displayWrite
1157:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, 11, 9, CMS_STARTUP_HELP_TEXT2);
 4773              	 .loc 8 1157 0
 4774 0078 184B     	 ldr r3,.L257
 4775 007a 1B68     	 ldr r3,[r3]
 4776 007c 1846     	 mov r0,r3
 4777 007e 0B21     	 movs r1,#11
 4778 0080 0922     	 movs r2,#9
 4779 0082 1D4B     	 ldr r3,.L257+28
 4780 0084 FFF7FEFF 	 bl displayWrite
1158:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, 11, 10, CMS_STARTUP_HELP_TEXT3);
 4781              	 .loc 8 1158 0
 4782 0088 144B     	 ldr r3,.L257
 4783 008a 1B68     	 ldr r3,[r3]
 4784 008c 1846     	 mov r0,r3
 4785 008e 0B21     	 movs r1,#11
 4786 0090 0A22     	 movs r2,#10
 4787 0092 1A4B     	 ldr r3,.L257+32
 4788 0094 FFF7FEFF 	 bl displayWrite
1159:../cleanflight/src/main/io/osd.c **** #endif
1160:../cleanflight/src/main/io/osd.c **** 
1161:../cleanflight/src/main/io/osd.c **** #ifdef USE_RTC_TIME
1162:../cleanflight/src/main/io/osd.c ****     char dateTimeBuffer[FORMATTED_DATE_TIME_BUFSIZE];
1163:../cleanflight/src/main/io/osd.c ****     if (osdFormatRtcDateTime(&dateTimeBuffer[0])) {
 4789              	 .loc 8 1163 0
 4790 0098 07F10803 	 add r3,r7,#8
 4791 009c 1846     	 mov r0,r3
 4792 009e FFF7FEFF 	 bl osdFormatRtcDateTime
 4793 00a2 0346     	 mov r3,r0
 4794 00a4 002B     	 cmp r3,#0
 4795 00a6 08D0     	 beq .L256
1164:../cleanflight/src/main/io/osd.c ****         displayWrite(osdDisplayPort, 5, 12, dateTimeBuffer);
 4796              	 .loc 8 1164 0
 4797 00a8 0C4B     	 ldr r3,.L257
 4798 00aa 1A68     	 ldr r2,[r3]
 4799 00ac 07F10803 	 add r3,r7,#8
 4800 00b0 1046     	 mov r0,r2
 4801 00b2 0521     	 movs r1,#5
 4802 00b4 0C22     	 movs r2,#12
 4803 00b6 FFF7FEFF 	 bl displayWrite
 4804              	.L256:
1165:../cleanflight/src/main/io/osd.c ****     }
1166:../cleanflight/src/main/io/osd.c **** #endif
1167:../cleanflight/src/main/io/osd.c **** 
1168:../cleanflight/src/main/io/osd.c ****     displayResync(osdDisplayPort);
 4805              	 .loc 8 1168 0
 4806 00ba 084B     	 ldr r3,.L257
 4807 00bc 1B68     	 ldr r3,[r3]
 4808 00be 1846     	 mov r0,r3
 4809 00c0 FFF7FEFF 	 bl displayResync
1169:../cleanflight/src/main/io/osd.c **** 
1170:../cleanflight/src/main/io/osd.c ****     resumeRefreshAt = micros() + (4 * REFRESH_1S);
 4810              	 .loc 8 1170 0
 4811 00c4 FFF7FEFF 	 bl micros
 4812 00c8 0346     	 mov r3,r0
 4813 00ca 03F57413 	 add r3,r3,#3997696
 4814 00ce 03F51063 	 add r3,r3,#2304
 4815 00d2 0B4A     	 ldr r2,.L257+36
 4816 00d4 1360     	 str r3,[r2]
 4817              	.L253:
1171:../cleanflight/src/main/io/osd.c **** }
 4818              	 .loc 8 1171 0
 4819 00d6 4837     	 adds r7,r7,#72
 4820              	.LCFI150:
 4821              	 .cfi_def_cfa_offset 8
 4822 00d8 BD46     	 mov sp,r7
 4823              	.LCFI151:
 4824              	 .cfi_def_cfa_register 13
 4825              	 
 4826 00da 80BD     	 pop {r7,pc}
 4827              	.L258:
 4828              	 .align 2
 4829              	.L257:
 4830 00dc 00000000 	 .word osdDisplayPort
 4831 00e0 00000000 	 .word armingFlags
 4832 00e4 00000000 	 .word armState
 4833 00e8 00000000 	 .word blinkBits
 4834 00ec E0010000 	 .word .LC49
 4835 00f0 E4010000 	 .word .LC50
 4836 00f4 EC010000 	 .word .LC51
 4837 00f8 FC010000 	 .word .LC52
 4838 00fc 08020000 	 .word .LC53
 4839 0100 00000000 	 .word resumeRefreshAt
 4840              	 .cfi_endproc
 4841              	.LFE620:
 4843              	 .section .text.osdInitialized,"ax",%progbits
 4844              	 .align 2
 4845              	 .global osdInitialized
 4846              	 .thumb
 4847              	 .thumb_func
 4849              	osdInitialized:
 4850              	.LFB621:
1172:../cleanflight/src/main/io/osd.c **** 
1173:../cleanflight/src/main/io/osd.c **** bool osdInitialized(void)
1174:../cleanflight/src/main/io/osd.c **** {
 4851              	 .loc 8 1174 0
 4852              	 .cfi_startproc
 4853              	 
 4854              	 
 4855              	 
 4856 0000 80B4     	 push {r7}
 4857              	.LCFI152:
 4858              	 .cfi_def_cfa_offset 4
 4859              	 .cfi_offset 7,-4
 4860 0002 00AF     	 add r7,sp,#0
 4861              	.LCFI153:
 4862              	 .cfi_def_cfa_register 7
1175:../cleanflight/src/main/io/osd.c ****     return osdDisplayPort;
 4863              	 .loc 8 1175 0
 4864 0004 054B     	 ldr r3,.L261
 4865 0006 1B68     	 ldr r3,[r3]
 4866 0008 002B     	 cmp r3,#0
 4867 000a 14BF     	 ite ne
 4868 000c 0123     	 movne r3,#1
 4869 000e 0023     	 moveq r3,#0
 4870 0010 DBB2     	 uxtb r3,r3
1176:../cleanflight/src/main/io/osd.c **** }
 4871              	 .loc 8 1176 0
 4872 0012 1846     	 mov r0,r3
 4873 0014 BD46     	 mov sp,r7
 4874              	.LCFI154:
 4875              	 .cfi_def_cfa_register 13
 4876              	 
 4877 0016 5DF8047B 	 ldr r7,[sp],#4
 4878              	.LCFI155:
 4879              	 .cfi_restore 7
 4880              	 .cfi_def_cfa_offset 0
 4881 001a 7047     	 bx lr
 4882              	.L262:
 4883              	 .align 2
 4884              	.L261:
 4885 001c 00000000 	 .word osdDisplayPort
 4886              	 .cfi_endproc
 4887              	.LFE621:
 4889              	 .section .text.osdUpdateAlarms,"ax",%progbits
 4890              	 .align 2
 4891              	 .global osdUpdateAlarms
 4892              	 .thumb
 4893              	 .thumb_func
 4895              	osdUpdateAlarms:
 4896              	.LFB622:
1177:../cleanflight/src/main/io/osd.c **** 
1178:../cleanflight/src/main/io/osd.c **** void osdUpdateAlarms(void)
1179:../cleanflight/src/main/io/osd.c **** {
 4897              	 .loc 8 1179 0
 4898              	 .cfi_startproc
 4899              	 
 4900              	 
 4901 0000 90B5     	 push {r4,r7,lr}
 4902              	.LCFI156:
 4903              	 .cfi_def_cfa_offset 12
 4904              	 .cfi_offset 4,-12
 4905              	 .cfi_offset 7,-8
 4906              	 .cfi_offset 14,-4
 4907 0002 87B0     	 sub sp,sp,#28
 4908              	.LCFI157:
 4909              	 .cfi_def_cfa_offset 40
 4910 0004 00AF     	 add r7,sp,#0
 4911              	.LCFI158:
 4912              	 .cfi_def_cfa_register 7
1180:../cleanflight/src/main/io/osd.c ****     // This is overdone?
1181:../cleanflight/src/main/io/osd.c **** 
1182:../cleanflight/src/main/io/osd.c ****     int32_t alt = osdGetMetersToSelectedUnit(getEstimatedAltitude()) / 100;
 4913              	 .loc 8 1182 0
 4914 0006 FFF7FEFF 	 bl getEstimatedAltitude
 4915 000a 0346     	 mov r3,r0
 4916 000c 1846     	 mov r0,r3
 4917 000e FFF7FEFF 	 bl osdGetMetersToSelectedUnit
 4918 0012 0346     	 mov r3,r0
 4919 0014 8F4A     	 ldr r2,.L285
 4920 0016 82FB0312 	 smull r1,r2,r2,r3
 4921 001a 5211     	 asrs r2,r2,#5
 4922 001c DB17     	 asrs r3,r3,#31
 4923 001e D31A     	 subs r3,r2,r3
 4924 0020 3B61     	 str r3,[r7,#16]
1183:../cleanflight/src/main/io/osd.c **** 
1184:../cleanflight/src/main/io/osd.c ****     if (getRssiPercent() < osdConfig()->rssi_alarm) {
 4925              	 .loc 8 1184 0
 4926 0022 FFF7FEFF 	 bl getRssiPercent
 4927 0026 0346     	 mov r3,r0
 4928 0028 1C46     	 mov r4,r3
 4929 002a FFF7FEFF 	 bl osdConfig
 4930 002e 0346     	 mov r3,r0
 4931 0030 93F85A30 	 ldrb r3,[r3,#90]
 4932 0034 9C42     	 cmp r4,r3
 4933 0036 06D2     	 bcs .L264
1185:../cleanflight/src/main/io/osd.c ****         SET_BLINK(OSD_RSSI_VALUE);
 4934              	 .loc 8 1185 0
 4935 0038 874B     	 ldr r3,.L285+4
 4936 003a 1B68     	 ldr r3,[r3]
 4937 003c 43F00103 	 orr r3,r3,#1
 4938 0040 854A     	 ldr r2,.L285+4
 4939 0042 1360     	 str r3,[r2]
 4940 0044 05E0     	 b .L265
 4941              	.L264:
1186:../cleanflight/src/main/io/osd.c ****     } else {
1187:../cleanflight/src/main/io/osd.c ****         CLR_BLINK(OSD_RSSI_VALUE);
 4942              	 .loc 8 1187 0
 4943 0046 844B     	 ldr r3,.L285+4
 4944 0048 1B68     	 ldr r3,[r3]
 4945 004a 23F00103 	 bic r3,r3,#1
 4946 004e 824A     	 ldr r2,.L285+4
 4947 0050 1360     	 str r3,[r2]
 4948              	.L265:
1188:../cleanflight/src/main/io/osd.c ****     }
1189:../cleanflight/src/main/io/osd.c **** 
1190:../cleanflight/src/main/io/osd.c ****     // Determine if the OSD_WARNINGS should blink
1191:../cleanflight/src/main/io/osd.c ****     if (getBatteryState() != BATTERY_OK
 4949              	 .loc 8 1191 0
 4950 0052 FFF7FEFF 	 bl getBatteryState
 4951 0056 0346     	 mov r3,r0
 4952 0058 002B     	 cmp r3,#0
 4953 005a 12D0     	 beq .L266
1192:../cleanflight/src/main/io/osd.c ****            && (osdWarnGetState(OSD_WARNING_BATTERY_CRITICAL) || osdWarnGetState(OSD_WARNING_BATTERY
 4954              	 .loc 8 1192 0
 4955 005c 0320     	 movs r0,#3
 4956 005e FFF7FEFF 	 bl osdWarnGetState
 4957 0062 0346     	 mov r3,r0
 4958 0064 002B     	 cmp r3,#0
 4959 0066 05D1     	 bne .L267
 4960              	 .loc 8 1192 0 is_stmt 0 discriminator 1
 4961 0068 0220     	 movs r0,#2
 4962 006a FFF7FEFF 	 bl osdWarnGetState
 4963 006e 0346     	 mov r3,r0
 4964 0070 002B     	 cmp r3,#0
 4965 0072 06D0     	 beq .L266
 4966              	.L267:
1193:../cleanflight/src/main/io/osd.c **** #ifdef USE_DSHOT
1194:../cleanflight/src/main/io/osd.c ****            && (!isTryingToArm())
1195:../cleanflight/src/main/io/osd.c **** #endif
1196:../cleanflight/src/main/io/osd.c ****        ) {
1197:../cleanflight/src/main/io/osd.c ****         SET_BLINK(OSD_WARNINGS);
 4967              	 .loc 8 1197 0 is_stmt 1
 4968 0074 784B     	 ldr r3,.L285+4
 4969 0076 1B68     	 ldr r3,[r3]
 4970 0078 43F40013 	 orr r3,r3,#2097152
 4971 007c 764A     	 ldr r2,.L285+4
 4972 007e 1360     	 str r3,[r2]
 4973 0080 05E0     	 b .L268
 4974              	.L266:
1198:../cleanflight/src/main/io/osd.c ****     } else {
1199:../cleanflight/src/main/io/osd.c ****         CLR_BLINK(OSD_WARNINGS);
 4975              	 .loc 8 1199 0
 4976 0082 754B     	 ldr r3,.L285+4
 4977 0084 1B68     	 ldr r3,[r3]
 4978 0086 23F40013 	 bic r3,r3,#2097152
 4979 008a 734A     	 ldr r2,.L285+4
 4980 008c 1360     	 str r3,[r2]
 4981              	.L268:
1200:../cleanflight/src/main/io/osd.c ****     }
1201:../cleanflight/src/main/io/osd.c **** 
1202:../cleanflight/src/main/io/osd.c ****     if (getBatteryState() == BATTERY_OK) {
 4982              	 .loc 8 1202 0
 4983 008e FFF7FEFF 	 bl getBatteryState
 4984 0092 0346     	 mov r3,r0
 4985 0094 002B     	 cmp r3,#0
 4986 0096 0CD1     	 bne .L269
1203:../cleanflight/src/main/io/osd.c ****         CLR_BLINK(OSD_MAIN_BATT_VOLTAGE);
 4987              	 .loc 8 1203 0
 4988 0098 6F4B     	 ldr r3,.L285+4
 4989 009a 1B68     	 ldr r3,[r3]
 4990 009c 23F00203 	 bic r3,r3,#2
 4991 00a0 6D4A     	 ldr r2,.L285+4
 4992 00a2 1360     	 str r3,[r2]
1204:../cleanflight/src/main/io/osd.c ****         CLR_BLINK(OSD_AVG_CELL_VOLTAGE);
 4993              	 .loc 8 1204 0
 4994 00a4 6C4B     	 ldr r3,.L285+4
 4995 00a6 1B68     	 ldr r3,[r3]
 4996 00a8 23F48003 	 bic r3,r3,#4194304
 4997 00ac 6A4A     	 ldr r2,.L285+4
 4998 00ae 1360     	 str r3,[r2]
 4999 00b0 0BE0     	 b .L270
 5000              	.L269:
1205:../cleanflight/src/main/io/osd.c ****     } else {
1206:../cleanflight/src/main/io/osd.c ****         SET_BLINK(OSD_MAIN_BATT_VOLTAGE);
 5001              	 .loc 8 1206 0
 5002 00b2 694B     	 ldr r3,.L285+4
 5003 00b4 1B68     	 ldr r3,[r3]
 5004 00b6 43F00203 	 orr r3,r3,#2
 5005 00ba 674A     	 ldr r2,.L285+4
 5006 00bc 1360     	 str r3,[r2]
1207:../cleanflight/src/main/io/osd.c ****         SET_BLINK(OSD_AVG_CELL_VOLTAGE);
 5007              	 .loc 8 1207 0
 5008 00be 664B     	 ldr r3,.L285+4
 5009 00c0 1B68     	 ldr r3,[r3]
 5010 00c2 43F48003 	 orr r3,r3,#4194304
 5011 00c6 644A     	 ldr r2,.L285+4
 5012 00c8 1360     	 str r3,[r2]
 5013              	.L270:
1208:../cleanflight/src/main/io/osd.c ****     }
1209:../cleanflight/src/main/io/osd.c **** 
1210:../cleanflight/src/main/io/osd.c ****     if (STATE(GPS_FIX) == 0) {
 5014              	 .loc 8 1210 0
 5015 00ca 644B     	 ldr r3,.L285+8
 5016 00cc 1B78     	 ldrb r3,[r3]
 5017 00ce 03F00203 	 and r3,r3,#2
 5018 00d2 002B     	 cmp r3,#0
 5019 00d4 06D1     	 bne .L271
1211:../cleanflight/src/main/io/osd.c ****         SET_BLINK(OSD_GPS_SATS);
 5020              	 .loc 8 1211 0
 5021 00d6 604B     	 ldr r3,.L285+4
 5022 00d8 1B68     	 ldr r3,[r3]
 5023 00da 43F48043 	 orr r3,r3,#16384
 5024 00de 5E4A     	 ldr r2,.L285+4
 5025 00e0 1360     	 str r3,[r2]
 5026 00e2 05E0     	 b .L272
 5027              	.L271:
1212:../cleanflight/src/main/io/osd.c ****     } else {
1213:../cleanflight/src/main/io/osd.c ****         CLR_BLINK(OSD_GPS_SATS);
 5028              	 .loc 8 1213 0
 5029 00e4 5C4B     	 ldr r3,.L285+4
 5030 00e6 1B68     	 ldr r3,[r3]
 5031 00e8 23F48043 	 bic r3,r3,#16384
 5032 00ec 5A4A     	 ldr r2,.L285+4
 5033 00ee 1360     	 str r3,[r2]
 5034              	.L272:
 5035              	.LBB33:
1214:../cleanflight/src/main/io/osd.c ****     }
1215:../cleanflight/src/main/io/osd.c **** 
1216:../cleanflight/src/main/io/osd.c ****     for (int i = 0; i < OSD_TIMER_COUNT; i++) {
 5036              	 .loc 8 1216 0
 5037 00f0 0023     	 movs r3,#0
 5038 00f2 7B61     	 str r3,[r7,#20]
 5039 00f4 61E0     	 b .L273
 5040              	.L280:
 5041              	.LBB34:
1217:../cleanflight/src/main/io/osd.c ****         const uint16_t timer = osdConfig()->timers[i];
 5042              	 .loc 8 1217 0
 5043 00f6 FFF7FEFF 	 bl osdConfig
 5044 00fa 0146     	 mov r1,r0
 5045 00fc 7B69     	 ldr r3,[r7,#20]
 5046 00fe 03F12C02 	 add r2,r3,#44
 5047 0102 5300     	 lsls r3,r2,#1
 5048 0104 0B44     	 add r3,r3,r1
 5049 0106 1879     	 ldrb r0,[r3,#4]
 5050 0108 5300     	 lsls r3,r2,#1
 5051 010a 0B44     	 add r3,r3,r1
 5052 010c 5B79     	 ldrb r3,[r3,#5]
 5053 010e 1B02     	 lsls r3,r3,#8
 5054 0110 0343     	 orrs r3,r3,r0
 5055 0112 FB81     	 strh r3,[r7,#14]
1218:../cleanflight/src/main/io/osd.c ****         const timeUs_t time = osdGetTimerValue(OSD_TIMER_SRC(timer));
 5056              	 .loc 8 1218 0
 5057 0114 FB89     	 ldrh r3,[r7,#14]
 5058 0116 DBB2     	 uxtb r3,r3
 5059 0118 03F00F03 	 and r3,r3,#15
 5060 011c DBB2     	 uxtb r3,r3
 5061 011e 1846     	 mov r0,r3
 5062 0120 FFF7FEFF 	 bl osdGetTimerValue
 5063 0124 B860     	 str r0,[r7,#8]
1219:../cleanflight/src/main/io/osd.c ****         const timeUs_t alarmTime = OSD_TIMER_ALARM(timer) * 60000000; // convert from minutes to us
 5064              	 .loc 8 1219 0
 5065 0126 FB89     	 ldrh r3,[r7,#14]
 5066 0128 1B0A     	 lsrs r3,r3,#8
 5067 012a 9BB2     	 uxth r3,r3
 5068 012c DBB2     	 uxtb r3,r3
 5069 012e 4C4A     	 ldr r2,.L285+12
 5070 0130 02FB03F3 	 mul r3,r2,r3
 5071 0134 7B60     	 str r3,[r7,#4]
1220:../cleanflight/src/main/io/osd.c ****         if (alarmTime != 0 && time >= alarmTime) {
 5072              	 .loc 8 1220 0
 5073 0136 7B68     	 ldr r3,[r7,#4]
 5074 0138 002B     	 cmp r3,#0
 5075 013a 1FD0     	 beq .L274
 5076              	 .loc 8 1220 0 is_stmt 0 discriminator 1
 5077 013c BA68     	 ldr r2,[r7,#8]
 5078 013e 7B68     	 ldr r3,[r7,#4]
 5079 0140 9A42     	 cmp r2,r3
 5080 0142 1BD3     	 bcc .L274
1221:../cleanflight/src/main/io/osd.c ****             SET_BLINK(OSD_ITEM_TIMER_1 + i);
 5081              	 .loc 8 1221 0 is_stmt 1
 5082 0144 7B69     	 ldr r3,[r7,#20]
 5083 0146 0533     	 adds r3,r3,#5
 5084 0148 002B     	 cmp r3,#0
 5085 014a 00DA     	 bge .L275
 5086 014c 1F33     	 adds r3,r3,#31
 5087              	.L275:
 5088 014e 5B11     	 asrs r3,r3,#5
 5089 0150 1A46     	 mov r2,r3
 5090 0152 414B     	 ldr r3,.L285+4
 5091 0154 53F82210 	 ldr r1,[r3,r2,lsl#2]
 5092 0158 7B69     	 ldr r3,[r7,#20]
 5093 015a 581D     	 adds r0,r3,#5
 5094 015c 414B     	 ldr r3,.L285+16
 5095 015e 0340     	 ands r3,r3,r0
 5096 0160 002B     	 cmp r3,#0
 5097 0162 03DA     	 bge .L276
 5098 0164 013B     	 subs r3,r3,#1
 5099 0166 63F01F03 	 orn r3,r3,#31
 5100 016a 0133     	 adds r3,r3,#1
 5101              	.L276:
 5102 016c 1846     	 mov r0,r3
 5103 016e 0123     	 movs r3,#1
 5104 0170 8340     	 lsls r3,r3,r0
 5105 0172 0B43     	 orrs r3,r3,r1
 5106 0174 3849     	 ldr r1,.L285+4
 5107 0176 41F82230 	 str r3,[r1,r2,lsl#2]
 5108 017a 1BE0     	 b .L277
 5109              	.L274:
1222:../cleanflight/src/main/io/osd.c ****         } else {
1223:../cleanflight/src/main/io/osd.c ****             CLR_BLINK(OSD_ITEM_TIMER_1 + i);
 5110              	 .loc 8 1223 0
 5111 017c 7B69     	 ldr r3,[r7,#20]
 5112 017e 0533     	 adds r3,r3,#5
 5113 0180 002B     	 cmp r3,#0
 5114 0182 00DA     	 bge .L278
 5115 0184 1F33     	 adds r3,r3,#31
 5116              	.L278:
 5117 0186 5B11     	 asrs r3,r3,#5
 5118 0188 1A46     	 mov r2,r3
 5119 018a 334B     	 ldr r3,.L285+4
 5120 018c 53F82210 	 ldr r1,[r3,r2,lsl#2]
 5121 0190 7B69     	 ldr r3,[r7,#20]
 5122 0192 581D     	 adds r0,r3,#5
 5123 0194 334B     	 ldr r3,.L285+16
 5124 0196 0340     	 ands r3,r3,r0
 5125 0198 002B     	 cmp r3,#0
 5126 019a 03DA     	 bge .L279
 5127 019c 013B     	 subs r3,r3,#1
 5128 019e 63F01F03 	 orn r3,r3,#31
 5129 01a2 0133     	 adds r3,r3,#1
 5130              	.L279:
 5131 01a4 1846     	 mov r0,r3
 5132 01a6 0123     	 movs r3,#1
 5133 01a8 8340     	 lsls r3,r3,r0
 5134 01aa DB43     	 mvns r3,r3
 5135 01ac 0B40     	 ands r3,r3,r1
 5136 01ae 2A49     	 ldr r1,.L285+4
 5137 01b0 41F82230 	 str r3,[r1,r2,lsl#2]
 5138              	.L277:
 5139              	.LBE34:
1216:../cleanflight/src/main/io/osd.c ****         const uint16_t timer = osdConfig()->timers[i];
 5140              	 .loc 8 1216 0 discriminator 2
 5141 01b4 7B69     	 ldr r3,[r7,#20]
 5142 01b6 0133     	 adds r3,r3,#1
 5143 01b8 7B61     	 str r3,[r7,#20]
 5144              	.L273:
1216:../cleanflight/src/main/io/osd.c ****         const uint16_t timer = osdConfig()->timers[i];
 5145              	 .loc 8 1216 0 is_stmt 0 discriminator 1
 5146 01ba 7B69     	 ldr r3,[r7,#20]
 5147 01bc 012B     	 cmp r3,#1
 5148 01be 9ADD     	 ble .L280
 5149              	.LBE33:
1224:../cleanflight/src/main/io/osd.c ****         }
1225:../cleanflight/src/main/io/osd.c ****     }
1226:../cleanflight/src/main/io/osd.c **** 
1227:../cleanflight/src/main/io/osd.c ****     if (getMAhDrawn() >= osdConfig()->cap_alarm) {
 5150              	 .loc 8 1227 0 is_stmt 1
 5151 01c0 FFF7FEFF 	 bl getMAhDrawn
 5152 01c4 0446     	 mov r4,r0
 5153 01c6 FFF7FEFF 	 bl osdConfig
 5154 01ca 0346     	 mov r3,r0
 5155 01cc B3F85630 	 ldrh r3,[r3,#86]
 5156 01d0 9BB2     	 uxth r3,r3
 5157 01d2 9C42     	 cmp r4,r3
 5158 01d4 12DB     	 blt .L281
1228:../cleanflight/src/main/io/osd.c ****         SET_BLINK(OSD_MAH_DRAWN);
 5159              	 .loc 8 1228 0
 5160 01d6 204B     	 ldr r3,.L285+4
 5161 01d8 1B68     	 ldr r3,[r3]
 5162 01da 43F48053 	 orr r3,r3,#4096
 5163 01de 1E4A     	 ldr r2,.L285+4
 5164 01e0 1360     	 str r3,[r2]
1229:../cleanflight/src/main/io/osd.c ****         SET_BLINK(OSD_MAIN_BATT_USAGE);
 5165              	 .loc 8 1229 0
 5166 01e2 1D4B     	 ldr r3,.L285+4
 5167 01e4 1B68     	 ldr r3,[r3]
 5168 01e6 43F08053 	 orr r3,r3,#268435456
 5169 01ea 1B4A     	 ldr r2,.L285+4
 5170 01ec 1360     	 str r3,[r2]
1230:../cleanflight/src/main/io/osd.c ****         SET_BLINK(OSD_REMAINING_TIME_ESTIMATE);
 5171              	 .loc 8 1230 0
 5172 01ee 1A4B     	 ldr r3,.L285+4
 5173 01f0 5B68     	 ldr r3,[r3,#4]
 5174 01f2 43F02003 	 orr r3,r3,#32
 5175 01f6 184A     	 ldr r2,.L285+4
 5176 01f8 5360     	 str r3,[r2,#4]
 5177 01fa 11E0     	 b .L282
 5178              	.L281:
1231:../cleanflight/src/main/io/osd.c ****     } else {
1232:../cleanflight/src/main/io/osd.c ****         CLR_BLINK(OSD_MAH_DRAWN);
 5179              	 .loc 8 1232 0
 5180 01fc 164B     	 ldr r3,.L285+4
 5181 01fe 1B68     	 ldr r3,[r3]
 5182 0200 23F48053 	 bic r3,r3,#4096
 5183 0204 144A     	 ldr r2,.L285+4
 5184 0206 1360     	 str r3,[r2]
1233:../cleanflight/src/main/io/osd.c ****         CLR_BLINK(OSD_MAIN_BATT_USAGE);
 5185              	 .loc 8 1233 0
 5186 0208 134B     	 ldr r3,.L285+4
 5187 020a 1B68     	 ldr r3,[r3]
 5188 020c 23F08053 	 bic r3,r3,#268435456
 5189 0210 114A     	 ldr r2,.L285+4
 5190 0212 1360     	 str r3,[r2]
1234:../cleanflight/src/main/io/osd.c ****         CLR_BLINK(OSD_REMAINING_TIME_ESTIMATE);
 5191              	 .loc 8 1234 0
 5192 0214 104B     	 ldr r3,.L285+4
 5193 0216 5B68     	 ldr r3,[r3,#4]
 5194 0218 23F02003 	 bic r3,r3,#32
 5195 021c 0E4A     	 ldr r2,.L285+4
 5196 021e 5360     	 str r3,[r2,#4]
 5197              	.L282:
1235:../cleanflight/src/main/io/osd.c ****     }
1236:../cleanflight/src/main/io/osd.c **** 
1237:../cleanflight/src/main/io/osd.c ****     if (alt >= osdConfig()->alt_alarm) {
 5198              	 .loc 8 1237 0
 5199 0220 FFF7FEFF 	 bl osdConfig
 5200 0224 0346     	 mov r3,r0
 5201 0226 B3F85830 	 ldrh r3,[r3,#88]
 5202 022a 9BB2     	 uxth r3,r3
 5203 022c 1A46     	 mov r2,r3
 5204 022e 3B69     	 ldr r3,[r7,#16]
 5205 0230 9A42     	 cmp r2,r3
 5206 0232 06DC     	 bgt .L283
1238:../cleanflight/src/main/io/osd.c ****         SET_BLINK(OSD_ALTITUDE);
 5207              	 .loc 8 1238 0
 5208 0234 084B     	 ldr r3,.L285+4
 5209 0236 1B68     	 ldr r3,[r3]
 5210 0238 43F40043 	 orr r3,r3,#32768
 5211 023c 064A     	 ldr r2,.L285+4
 5212 023e 1360     	 str r3,[r2]
 5213 0240 05E0     	 b .L263
 5214              	.L283:
1239:../cleanflight/src/main/io/osd.c ****     } else {
1240:../cleanflight/src/main/io/osd.c ****         CLR_BLINK(OSD_ALTITUDE);
 5215              	 .loc 8 1240 0
 5216 0242 054B     	 ldr r3,.L285+4
 5217 0244 1B68     	 ldr r3,[r3]
 5218 0246 23F40043 	 bic r3,r3,#32768
 5219 024a 034A     	 ldr r2,.L285+4
 5220 024c 1360     	 str r3,[r2]
 5221              	.L263:
1241:../cleanflight/src/main/io/osd.c ****     }
1242:../cleanflight/src/main/io/osd.c **** 
1243:../cleanflight/src/main/io/osd.c **** #ifdef USE_ESC_SENSOR
1244:../cleanflight/src/main/io/osd.c ****     if (feature(FEATURE_ESC_SENSOR)) {
1245:../cleanflight/src/main/io/osd.c ****         // This works because the combined ESC data contains the maximum temperature seen amongst a
1246:../cleanflight/src/main/io/osd.c ****         if (osdConfig()->esc_temp_alarm != ESC_TEMP_ALARM_OFF && escDataCombined->temperature >= os
1247:../cleanflight/src/main/io/osd.c ****             SET_BLINK(OSD_ESC_TMP);
1248:../cleanflight/src/main/io/osd.c ****         } else {
1249:../cleanflight/src/main/io/osd.c ****             CLR_BLINK(OSD_ESC_TMP);
1250:../cleanflight/src/main/io/osd.c ****         }
1251:../cleanflight/src/main/io/osd.c ****     }
1252:../cleanflight/src/main/io/osd.c **** #endif
1253:../cleanflight/src/main/io/osd.c **** }
 5222              	 .loc 8 1253 0
 5223 024e 1C37     	 adds r7,r7,#28
 5224              	.LCFI159:
 5225              	 .cfi_def_cfa_offset 12
 5226 0250 BD46     	 mov sp,r7
 5227              	.LCFI160:
 5228              	 .cfi_def_cfa_register 13
 5229              	 
 5230 0252 90BD     	 pop {r4,r7,pc}
 5231              	.L286:
 5232              	 .align 2
 5233              	.L285:
 5234 0254 1F85EB51 	 .word 1374389535
 5235 0258 00000000 	 .word blinkBits
 5236 025c 00000000 	 .word stateFlags
 5237 0260 00879303 	 .word 60000000
 5238 0264 1F000080 	 .word -2147483617
 5239              	 .cfi_endproc
 5240              	.LFE622:
 5242              	 .section .text.osdResetAlarms,"ax",%progbits
 5243              	 .align 2
 5244              	 .global osdResetAlarms
 5245              	 .thumb
 5246              	 .thumb_func
 5248              	osdResetAlarms:
 5249              	.LFB623:
1254:../cleanflight/src/main/io/osd.c **** 
1255:../cleanflight/src/main/io/osd.c **** void osdResetAlarms(void)
1256:../cleanflight/src/main/io/osd.c **** {
 5250              	 .loc 8 1256 0
 5251              	 .cfi_startproc
 5252              	 
 5253              	 
 5254              	 
 5255 0000 80B4     	 push {r7}
 5256              	.LCFI161:
 5257              	 .cfi_def_cfa_offset 4
 5258              	 .cfi_offset 7,-4
 5259 0002 00AF     	 add r7,sp,#0
 5260              	.LCFI162:
 5261              	 .cfi_def_cfa_register 7
1257:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_RSSI_VALUE);
 5262              	 .loc 8 1257 0
 5263 0004 254B     	 ldr r3,.L288
 5264 0006 1B68     	 ldr r3,[r3]
 5265 0008 23F00103 	 bic r3,r3,#1
 5266 000c 234A     	 ldr r2,.L288
 5267 000e 1360     	 str r3,[r2]
1258:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_MAIN_BATT_VOLTAGE);
 5268              	 .loc 8 1258 0
 5269 0010 224B     	 ldr r3,.L288
 5270 0012 1B68     	 ldr r3,[r3]
 5271 0014 23F00203 	 bic r3,r3,#2
 5272 0018 204A     	 ldr r2,.L288
 5273 001a 1360     	 str r3,[r2]
1259:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_WARNINGS);
 5274              	 .loc 8 1259 0
 5275 001c 1F4B     	 ldr r3,.L288
 5276 001e 1B68     	 ldr r3,[r3]
 5277 0020 23F40013 	 bic r3,r3,#2097152
 5278 0024 1D4A     	 ldr r2,.L288
 5279 0026 1360     	 str r3,[r2]
1260:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_GPS_SATS);
 5280              	 .loc 8 1260 0
 5281 0028 1C4B     	 ldr r3,.L288
 5282 002a 1B68     	 ldr r3,[r3]
 5283 002c 23F48043 	 bic r3,r3,#16384
 5284 0030 1A4A     	 ldr r2,.L288
 5285 0032 1360     	 str r3,[r2]
1261:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_MAH_DRAWN);
 5286              	 .loc 8 1261 0
 5287 0034 194B     	 ldr r3,.L288
 5288 0036 1B68     	 ldr r3,[r3]
 5289 0038 23F48053 	 bic r3,r3,#4096
 5290 003c 174A     	 ldr r2,.L288
 5291 003e 1360     	 str r3,[r2]
1262:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_ALTITUDE);
 5292              	 .loc 8 1262 0
 5293 0040 164B     	 ldr r3,.L288
 5294 0042 1B68     	 ldr r3,[r3]
 5295 0044 23F40043 	 bic r3,r3,#32768
 5296 0048 144A     	 ldr r2,.L288
 5297 004a 1360     	 str r3,[r2]
1263:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_AVG_CELL_VOLTAGE);
 5298              	 .loc 8 1263 0
 5299 004c 134B     	 ldr r3,.L288
 5300 004e 1B68     	 ldr r3,[r3]
 5301 0050 23F48003 	 bic r3,r3,#4194304
 5302 0054 114A     	 ldr r2,.L288
 5303 0056 1360     	 str r3,[r2]
1264:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_MAIN_BATT_USAGE);
 5304              	 .loc 8 1264 0
 5305 0058 104B     	 ldr r3,.L288
 5306 005a 1B68     	 ldr r3,[r3]
 5307 005c 23F08053 	 bic r3,r3,#268435456
 5308 0060 0E4A     	 ldr r2,.L288
 5309 0062 1360     	 str r3,[r2]
1265:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_ITEM_TIMER_1);
 5310              	 .loc 8 1265 0
 5311 0064 0D4B     	 ldr r3,.L288
 5312 0066 1B68     	 ldr r3,[r3]
 5313 0068 23F02003 	 bic r3,r3,#32
 5314 006c 0B4A     	 ldr r2,.L288
 5315 006e 1360     	 str r3,[r2]
1266:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_ITEM_TIMER_2);
 5316              	 .loc 8 1266 0
 5317 0070 0A4B     	 ldr r3,.L288
 5318 0072 1B68     	 ldr r3,[r3]
 5319 0074 23F04003 	 bic r3,r3,#64
 5320 0078 084A     	 ldr r2,.L288
 5321 007a 1360     	 str r3,[r2]
1267:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_REMAINING_TIME_ESTIMATE);
 5322              	 .loc 8 1267 0
 5323 007c 074B     	 ldr r3,.L288
 5324 007e 5B68     	 ldr r3,[r3,#4]
 5325 0080 23F02003 	 bic r3,r3,#32
 5326 0084 054A     	 ldr r2,.L288
 5327 0086 5360     	 str r3,[r2,#4]
1268:../cleanflight/src/main/io/osd.c ****     CLR_BLINK(OSD_ESC_TMP);
 5328              	 .loc 8 1268 0
 5329 0088 044B     	 ldr r3,.L288
 5330 008a 5B68     	 ldr r3,[r3,#4]
 5331 008c 23F00803 	 bic r3,r3,#8
 5332 0090 024A     	 ldr r2,.L288
 5333 0092 5360     	 str r3,[r2,#4]
1269:../cleanflight/src/main/io/osd.c **** }
 5334              	 .loc 8 1269 0
 5335 0094 BD46     	 mov sp,r7
 5336              	.LCFI163:
 5337              	 .cfi_def_cfa_register 13
 5338              	 
 5339 0096 5DF8047B 	 ldr r7,[sp],#4
 5340              	.LCFI164:
 5341              	 .cfi_restore 7
 5342              	 .cfi_def_cfa_offset 0
 5343 009a 7047     	 bx lr
 5344              	.L289:
 5345              	 .align 2
 5346              	.L288:
 5347 009c 00000000 	 .word blinkBits
 5348              	 .cfi_endproc
 5349              	.LFE623:
 5351              	 .section .text.osdResetStats,"ax",%progbits
 5352              	 .align 2
 5353              	 .thumb
 5354              	 .thumb_func
 5356              	osdResetStats:
 5357              	.LFB624:
1270:../cleanflight/src/main/io/osd.c **** 
1271:../cleanflight/src/main/io/osd.c **** static void osdResetStats(void)
1272:../cleanflight/src/main/io/osd.c **** {
 5358              	 .loc 8 1272 0
 5359              	 .cfi_startproc
 5360              	 
 5361              	 
 5362              	 
 5363 0000 80B4     	 push {r7}
 5364              	.LCFI165:
 5365              	 .cfi_def_cfa_offset 4
 5366              	 .cfi_offset 7,-4
 5367 0002 00AF     	 add r7,sp,#0
 5368              	.LCFI166:
 5369              	 .cfi_def_cfa_register 7
1273:../cleanflight/src/main/io/osd.c ****     stats.max_current  = 0;
 5370              	 .loc 8 1273 0
 5371 0004 0C4B     	 ldr r3,.L291
 5372 0006 0022     	 movs r2,#0
 5373 0008 1A81     	 strh r2,[r3,#8]
1274:../cleanflight/src/main/io/osd.c ****     stats.max_speed    = 0;
 5374              	 .loc 8 1274 0
 5375 000a 0B4B     	 ldr r3,.L291
 5376 000c 0022     	 movs r2,#0
 5377 000e 9A80     	 strh r2,[r3,#4]
1275:../cleanflight/src/main/io/osd.c ****     stats.min_voltage  = 500;
 5378              	 .loc 8 1275 0
 5379 0010 094B     	 ldr r3,.L291
 5380 0012 4FF4FA72 	 mov r2,#500
 5381 0016 DA80     	 strh r2,[r3,#6]
1276:../cleanflight/src/main/io/osd.c ****     stats.min_rssi     = 99;
 5382              	 .loc 8 1276 0
 5383 0018 074B     	 ldr r3,.L291
 5384 001a 6322     	 movs r2,#99
 5385 001c 5A81     	 strh r2,[r3,#10]
1277:../cleanflight/src/main/io/osd.c ****     stats.max_altitude = 0;
 5386              	 .loc 8 1277 0
 5387 001e 064B     	 ldr r3,.L291
 5388 0020 0022     	 movs r2,#0
 5389 0022 DA60     	 str r2,[r3,#12]
1278:../cleanflight/src/main/io/osd.c ****     stats.max_distance = 0;
 5390              	 .loc 8 1278 0
 5391 0024 044B     	 ldr r3,.L291
 5392 0026 0022     	 movs r2,#0
 5393 0028 1A82     	 strh r2,[r3,#16]
1279:../cleanflight/src/main/io/osd.c ****     stats.armed_time   = 0;
 5394              	 .loc 8 1279 0
 5395 002a 034B     	 ldr r3,.L291
 5396 002c 0022     	 movs r2,#0
 5397 002e 1A60     	 str r2,[r3]
1280:../cleanflight/src/main/io/osd.c **** }
 5398              	 .loc 8 1280 0
 5399 0030 BD46     	 mov sp,r7
 5400              	.LCFI167:
 5401              	 .cfi_def_cfa_register 13
 5402              	 
 5403 0032 5DF8047B 	 ldr r7,[sp],#4
 5404              	.LCFI168:
 5405              	 .cfi_restore 7
 5406              	 .cfi_def_cfa_offset 0
 5407 0036 7047     	 bx lr
 5408              	.L292:
 5409              	 .align 2
 5410              	.L291:
 5411 0038 00000000 	 .word stats
 5412              	 .cfi_endproc
 5413              	.LFE624:
 5415              	 .section .text.osdUpdateStats,"ax",%progbits
 5416              	 .align 2
 5417              	 .thumb
 5418              	 .thumb_func
 5420              	osdUpdateStats:
 5421              	.LFB625:
1281:../cleanflight/src/main/io/osd.c **** 
1282:../cleanflight/src/main/io/osd.c **** static void osdUpdateStats(void)
1283:../cleanflight/src/main/io/osd.c **** {
 5422              	 .loc 8 1283 0
 5423              	 .cfi_startproc
 5424              	 
 5425              	 
 5426 0000 80B5     	 push {r7,lr}
 5427              	.LCFI169:
 5428              	 .cfi_def_cfa_offset 8
 5429              	 .cfi_offset 7,-8
 5430              	 .cfi_offset 14,-4
 5431 0002 82B0     	 sub sp,sp,#8
 5432              	.LCFI170:
 5433              	 .cfi_def_cfa_offset 16
 5434 0004 00AF     	 add r7,sp,#0
 5435              	.LCFI171:
 5436              	 .cfi_def_cfa_register 7
1284:../cleanflight/src/main/io/osd.c ****     int16_t value = 0;
 5437              	 .loc 8 1284 0
 5438 0006 0023     	 movs r3,#0
 5439 0008 FB80     	 strh r3,[r7,#6]
1285:../cleanflight/src/main/io/osd.c **** #ifdef USE_GPS
1286:../cleanflight/src/main/io/osd.c ****     switch (osdConfig()->units) {
 5440              	 .loc 8 1286 0
 5441 000a FFF7FEFF 	 bl osdConfig
 5442 000e 0346     	 mov r3,r0
 5443 0010 93F85B30 	 ldrb r3,[r3,#91]
 5444 0014 002B     	 cmp r3,#0
 5445 0016 0FD1     	 bne .L303
1287:../cleanflight/src/main/io/osd.c ****     case OSD_UNIT_IMPERIAL:
1288:../cleanflight/src/main/io/osd.c ****         value = CM_S_TO_MPH(gpsSol.groundSpeed);
 5446              	 .loc 8 1288 0
 5447 0018 414B     	 ldr r3,.L304
 5448 001a 9B89     	 ldrh r3,[r3,#12]
 5449 001c 9BB2     	 uxth r3,r3
 5450 001e 1A46     	 mov r2,r3
 5451 0020 42F21073 	 movw r3,#10000
 5452 0024 03FB02F3 	 mul r3,r3,r2
 5453 0028 3E4A     	 ldr r2,.L304+4
 5454 002a 82FB0312 	 smull r1,r2,r2,r3
 5455 002e 1214     	 asrs r2,r2,#16
 5456 0030 DB17     	 asrs r3,r3,#31
 5457 0032 D31A     	 subs r3,r2,r3
 5458 0034 FB80     	 strh r3,[r7,#6]
1289:../cleanflight/src/main/io/osd.c ****         break;
 5459              	 .loc 8 1289 0
 5460 0036 0FE0     	 b .L296
 5461              	.L303:
1290:../cleanflight/src/main/io/osd.c ****     default:
1291:../cleanflight/src/main/io/osd.c ****         value = CM_S_TO_KM_H(gpsSol.groundSpeed);
 5462              	 .loc 8 1291 0
 5463 0038 394B     	 ldr r3,.L304
 5464 003a 9B89     	 ldrh r3,[r3,#12]
 5465 003c 9BB2     	 uxth r3,r3
 5466 003e 1A46     	 mov r2,r3
 5467 0040 1346     	 mov r3,r2
 5468 0042 DB00     	 lsls r3,r3,#3
 5469 0044 1344     	 add r3,r3,r2
 5470 0046 9B00     	 lsls r3,r3,#2
 5471 0048 374A     	 ldr r2,.L304+8
 5472 004a 82FB0312 	 smull r1,r2,r2,r3
 5473 004e 9211     	 asrs r2,r2,#6
 5474 0050 DB17     	 asrs r3,r3,#31
 5475 0052 D31A     	 subs r3,r2,r3
 5476 0054 FB80     	 strh r3,[r7,#6]
1292:../cleanflight/src/main/io/osd.c ****         break;
 5477              	 .loc 8 1292 0
 5478 0056 00BF     	 nop
 5479              	.L296:
1293:../cleanflight/src/main/io/osd.c ****     }
1294:../cleanflight/src/main/io/osd.c **** #endif
1295:../cleanflight/src/main/io/osd.c ****     if (stats.max_speed < value) {
 5480              	 .loc 8 1295 0
 5481 0058 344B     	 ldr r3,.L304+12
 5482 005a 9B88     	 ldrh r3,[r3,#4]
 5483 005c B7F90620 	 ldrsh r2,[r7,#6]
 5484 0060 1BB2     	 sxth r3,r3
 5485 0062 9A42     	 cmp r2,r3
 5486 0064 02DD     	 ble .L297
1296:../cleanflight/src/main/io/osd.c ****         stats.max_speed = value;
 5487              	 .loc 8 1296 0
 5488 0066 314A     	 ldr r2,.L304+12
 5489 0068 FB88     	 ldrh r3,[r7,#6]
 5490 006a 9380     	 strh r3,[r2,#4]
 5491              	.L297:
1297:../cleanflight/src/main/io/osd.c ****     }
1298:../cleanflight/src/main/io/osd.c **** 
1299:../cleanflight/src/main/io/osd.c ****     value = getBatteryVoltage();
 5492              	 .loc 8 1299 0
 5493 006c FFF7FEFF 	 bl getBatteryVoltage
 5494 0070 0346     	 mov r3,r0
 5495 0072 FB80     	 strh r3,[r7,#6]
1300:../cleanflight/src/main/io/osd.c ****     if (stats.min_voltage > value) {
 5496              	 .loc 8 1300 0
 5497 0074 2D4B     	 ldr r3,.L304+12
 5498 0076 DB88     	 ldrh r3,[r3,#6]
 5499 0078 B7F90620 	 ldrsh r2,[r7,#6]
 5500 007c 1BB2     	 sxth r3,r3
 5501 007e 9A42     	 cmp r2,r3
 5502 0080 02DA     	 bge .L298
1301:../cleanflight/src/main/io/osd.c ****         stats.min_voltage = value;
 5503              	 .loc 8 1301 0
 5504 0082 2A4A     	 ldr r2,.L304+12
 5505 0084 FB88     	 ldrh r3,[r7,#6]
 5506 0086 D380     	 strh r3,[r2,#6]
 5507              	.L298:
1302:../cleanflight/src/main/io/osd.c ****     }
1303:../cleanflight/src/main/io/osd.c **** 
1304:../cleanflight/src/main/io/osd.c ****     value = getAmperage() / 100;
 5508              	 .loc 8 1304 0
 5509 0088 FFF7FEFF 	 bl getAmperage
 5510 008c 0346     	 mov r3,r0
 5511 008e 284A     	 ldr r2,.L304+16
 5512 0090 82FB0312 	 smull r1,r2,r2,r3
 5513 0094 5211     	 asrs r2,r2,#5
 5514 0096 DB17     	 asrs r3,r3,#31
 5515 0098 D31A     	 subs r3,r2,r3
 5516 009a FB80     	 strh r3,[r7,#6]
1305:../cleanflight/src/main/io/osd.c ****     if (stats.max_current < value) {
 5517              	 .loc 8 1305 0
 5518 009c 234B     	 ldr r3,.L304+12
 5519 009e 1B89     	 ldrh r3,[r3,#8]
 5520 00a0 B7F90620 	 ldrsh r2,[r7,#6]
 5521 00a4 1BB2     	 sxth r3,r3
 5522 00a6 9A42     	 cmp r2,r3
 5523 00a8 02DD     	 ble .L299
1306:../cleanflight/src/main/io/osd.c ****         stats.max_current = value;
 5524              	 .loc 8 1306 0
 5525 00aa 204A     	 ldr r2,.L304+12
 5526 00ac FB88     	 ldrh r3,[r7,#6]
 5527 00ae 1381     	 strh r3,[r2,#8]
 5528              	.L299:
1307:../cleanflight/src/main/io/osd.c ****     }
1308:../cleanflight/src/main/io/osd.c **** 
1309:../cleanflight/src/main/io/osd.c ****     value = getRssiPercent();
 5529              	 .loc 8 1309 0
 5530 00b0 FFF7FEFF 	 bl getRssiPercent
 5531 00b4 0346     	 mov r3,r0
 5532 00b6 FB80     	 strh r3,[r7,#6]
1310:../cleanflight/src/main/io/osd.c ****     if (stats.min_rssi > value) {
 5533              	 .loc 8 1310 0
 5534 00b8 1C4B     	 ldr r3,.L304+12
 5535 00ba 5B89     	 ldrh r3,[r3,#10]
 5536 00bc B7F90620 	 ldrsh r2,[r7,#6]
 5537 00c0 1BB2     	 sxth r3,r3
 5538 00c2 9A42     	 cmp r2,r3
 5539 00c4 02DA     	 bge .L300
1311:../cleanflight/src/main/io/osd.c ****         stats.min_rssi = value;
 5540              	 .loc 8 1311 0
 5541 00c6 194A     	 ldr r2,.L304+12
 5542 00c8 FB88     	 ldrh r3,[r7,#6]
 5543 00ca 5381     	 strh r3,[r2,#10]
 5544              	.L300:
1312:../cleanflight/src/main/io/osd.c ****     }
1313:../cleanflight/src/main/io/osd.c **** 
1314:../cleanflight/src/main/io/osd.c ****     int altitude = getEstimatedAltitude();
 5545              	 .loc 8 1314 0
 5546 00cc FFF7FEFF 	 bl getEstimatedAltitude
 5547 00d0 3860     	 str r0,[r7]
1315:../cleanflight/src/main/io/osd.c ****     if (stats.max_altitude < altitude) {
 5548              	 .loc 8 1315 0
 5549 00d2 164B     	 ldr r3,.L304+12
 5550 00d4 DA68     	 ldr r2,[r3,#12]
 5551 00d6 3B68     	 ldr r3,[r7]
 5552 00d8 9A42     	 cmp r2,r3
 5553 00da 02DA     	 bge .L301
1316:../cleanflight/src/main/io/osd.c ****         stats.max_altitude = altitude;
 5554              	 .loc 8 1316 0
 5555 00dc 134A     	 ldr r2,.L304+12
 5556 00de 3B68     	 ldr r3,[r7]
 5557 00e0 D360     	 str r3,[r2,#12]
 5558              	.L301:
1317:../cleanflight/src/main/io/osd.c ****     }
1318:../cleanflight/src/main/io/osd.c **** 
1319:../cleanflight/src/main/io/osd.c **** #ifdef USE_GPS
1320:../cleanflight/src/main/io/osd.c ****     if (STATE(GPS_FIX) && STATE(GPS_FIX_HOME)) {
 5559              	 .loc 8 1320 0
 5560 00e2 144B     	 ldr r3,.L304+20
 5561 00e4 1B78     	 ldrb r3,[r3]
 5562 00e6 03F00203 	 and r3,r3,#2
 5563 00ea 002B     	 cmp r3,#0
 5564 00ec 14D0     	 beq .L293
 5565              	 .loc 8 1320 0 is_stmt 0 discriminator 1
 5566 00ee 114B     	 ldr r3,.L304+20
 5567 00f0 1B78     	 ldrb r3,[r3]
 5568 00f2 03F00103 	 and r3,r3,#1
 5569 00f6 002B     	 cmp r3,#0
 5570 00f8 0ED0     	 beq .L293
1321:../cleanflight/src/main/io/osd.c ****         value = GPS_distanceToHome;
 5571              	 .loc 8 1321 0 is_stmt 1
 5572 00fa 0F4B     	 ldr r3,.L304+24
 5573 00fc 1B88     	 ldrh r3,[r3]
 5574 00fe FB80     	 strh r3,[r7,#6]
1322:../cleanflight/src/main/io/osd.c **** 
1323:../cleanflight/src/main/io/osd.c ****         if (stats.max_distance < GPS_distanceToHome) {
 5575              	 .loc 8 1323 0
 5576 0100 0A4B     	 ldr r3,.L304+12
 5577 0102 1B8A     	 ldrh r3,[r3,#16]
 5578 0104 1BB2     	 sxth r3,r3
 5579 0106 0C4A     	 ldr r2,.L304+24
 5580 0108 1288     	 ldrh r2,[r2]
 5581 010a 9342     	 cmp r3,r2
 5582 010c 04DA     	 bge .L293
1324:../cleanflight/src/main/io/osd.c ****             stats.max_distance = GPS_distanceToHome;
 5583              	 .loc 8 1324 0
 5584 010e 0A4B     	 ldr r3,.L304+24
 5585 0110 1B88     	 ldrh r3,[r3]
 5586 0112 9AB2     	 uxth r2,r3
 5587 0114 054B     	 ldr r3,.L304+12
 5588 0116 1A82     	 strh r2,[r3,#16]
 5589              	.L293:
1325:../cleanflight/src/main/io/osd.c ****         }
1326:../cleanflight/src/main/io/osd.c ****     }
1327:../cleanflight/src/main/io/osd.c **** #endif
1328:../cleanflight/src/main/io/osd.c **** }
 5590              	 .loc 8 1328 0
 5591 0118 0837     	 adds r7,r7,#8
 5592              	.LCFI172:
 5593              	 .cfi_def_cfa_offset 8
 5594 011a BD46     	 mov sp,r7
 5595              	.LCFI173:
 5596              	 .cfi_def_cfa_register 13
 5597              	 
 5598 011c 80BD     	 pop {r7,pc}
 5599              	.L305:
 5600 011e 00BF     	 .align 2
 5601              	.L304:
 5602 0120 00000000 	 .word gpsSol
 5603 0124 77918725 	 .word 629641591
 5604 0128 D34D6210 	 .word 274877907
 5605 012c 00000000 	 .word stats
 5606 0130 1F85EB51 	 .word 1374389535
 5607 0134 00000000 	 .word stateFlags
 5608 0138 00000000 	 .word GPS_distanceToHome
 5609              	 .cfi_endproc
 5610              	.LFE625:
 5612              	 .section .rodata
 5613 0213 00       	 .align 2
 5614              	.LC54:
 5615 0214 25642525 	 .ascii "%d%%\000"
 5615      00
 5616 0219 000000   	 .align 2
 5617              	.LC55:
 5618 021c 4641554C 	 .ascii "FAULT\000"
 5618      5400
 5619              	 .section .text.osdGetBlackboxStatusString,"ax",%progbits
 5620              	 .align 2
 5621              	 .thumb
 5622              	 .thumb_func
 5624              	osdGetBlackboxStatusString:
 5625              	.LFB626:
1329:../cleanflight/src/main/io/osd.c **** 
1330:../cleanflight/src/main/io/osd.c **** #ifdef USE_BLACKBOX
1331:../cleanflight/src/main/io/osd.c **** static void osdGetBlackboxStatusString(char * buff)
1332:../cleanflight/src/main/io/osd.c **** {
 5626              	 .loc 8 1332 0
 5627              	 .cfi_startproc
 5628              	 
 5629              	 
 5630 0000 80B5     	 push {r7,lr}
 5631              	.LCFI174:
 5632              	 .cfi_def_cfa_offset 8
 5633              	 .cfi_offset 7,-8
 5634              	 .cfi_offset 14,-4
 5635 0002 86B0     	 sub sp,sp,#24
 5636              	.LCFI175:
 5637              	 .cfi_def_cfa_offset 32
 5638 0004 00AF     	 add r7,sp,#0
 5639              	.LCFI176:
 5640              	 .cfi_def_cfa_register 7
 5641 0006 7860     	 str r0,[r7,#4]
1333:../cleanflight/src/main/io/osd.c ****     bool storageDeviceIsWorking = false;
 5642              	 .loc 8 1333 0
 5643 0008 0023     	 movs r3,#0
 5644 000a FB75     	 strb r3,[r7,#23]
1334:../cleanflight/src/main/io/osd.c ****     uint32_t storageUsed = 0;
 5645              	 .loc 8 1334 0
 5646 000c 0023     	 movs r3,#0
 5647 000e 3B61     	 str r3,[r7,#16]
1335:../cleanflight/src/main/io/osd.c ****     uint32_t storageTotal = 0;
 5648              	 .loc 8 1335 0
 5649 0010 0023     	 movs r3,#0
 5650 0012 FB60     	 str r3,[r7,#12]
1336:../cleanflight/src/main/io/osd.c **** 
1337:../cleanflight/src/main/io/osd.c ****     switch (blackboxConfig()->device) {
 5651              	 .loc 8 1337 0
 5652 0014 FFF7FEFF 	 bl blackboxConfig
 5653 0018 0346     	 mov r3,r0
 5654 001a 9B78     	 ldrb r3,[r3,#2]
 5655 001c 022B     	 cmp r3,#2
 5656 001e 00D0     	 beq .L308
1338:../cleanflight/src/main/io/osd.c **** #ifdef USE_SDCARD
1339:../cleanflight/src/main/io/osd.c ****     case BLACKBOX_DEVICE_SDCARD:
1340:../cleanflight/src/main/io/osd.c ****         storageDeviceIsWorking = sdcard_isInserted() && sdcard_isFunctional() && (afatfs_getFilesys
1341:../cleanflight/src/main/io/osd.c ****         if (storageDeviceIsWorking) {
1342:../cleanflight/src/main/io/osd.c ****             storageTotal = sdcard_getMetadata()->numBlocks / 2000;
1343:../cleanflight/src/main/io/osd.c ****             storageUsed = storageTotal - (afatfs_getContiguousFreeSpace() / 1024000);
1344:../cleanflight/src/main/io/osd.c ****         }
1345:../cleanflight/src/main/io/osd.c ****         break;
1346:../cleanflight/src/main/io/osd.c **** #endif
1347:../cleanflight/src/main/io/osd.c **** 
1348:../cleanflight/src/main/io/osd.c **** #ifdef USE_FLASHFS
1349:../cleanflight/src/main/io/osd.c ****     case BLACKBOX_DEVICE_FLASH:
1350:../cleanflight/src/main/io/osd.c ****         storageDeviceIsWorking = flashfsIsSupported();
1351:../cleanflight/src/main/io/osd.c ****         if (storageDeviceIsWorking) {
1352:../cleanflight/src/main/io/osd.c ****             const flashGeometry_t *geometry = flashfsGetGeometry();
1353:../cleanflight/src/main/io/osd.c ****             storageTotal = geometry->totalSize / 1024;
1354:../cleanflight/src/main/io/osd.c ****             storageUsed = flashfsGetOffset() / 1024;
1355:../cleanflight/src/main/io/osd.c ****         }
1356:../cleanflight/src/main/io/osd.c ****         break;
1357:../cleanflight/src/main/io/osd.c **** #endif
1358:../cleanflight/src/main/io/osd.c **** 
1359:../cleanflight/src/main/io/osd.c ****     default:
1360:../cleanflight/src/main/io/osd.c ****         break;
 5657              	 .loc 8 1360 0
 5658 0020 2EE0     	 b .L312
 5659              	.L308:
1340:../cleanflight/src/main/io/osd.c ****         if (storageDeviceIsWorking) {
 5660              	 .loc 8 1340 0
 5661 0022 FFF7FEFF 	 bl sdcard_isInserted
 5662 0026 0346     	 mov r3,r0
 5663 0028 002B     	 cmp r3,#0
 5664 002a 0BD0     	 beq .L309
1340:../cleanflight/src/main/io/osd.c ****         if (storageDeviceIsWorking) {
 5665              	 .loc 8 1340 0 is_stmt 0 discriminator 1
 5666 002c FFF7FEFF 	 bl sdcard_isFunctional
 5667 0030 0346     	 mov r3,r0
 5668 0032 002B     	 cmp r3,#0
 5669 0034 06D0     	 beq .L309
1340:../cleanflight/src/main/io/osd.c ****         if (storageDeviceIsWorking) {
 5670              	 .loc 8 1340 0 discriminator 3
 5671 0036 FFF7FEFF 	 bl afatfs_getFilesystemState
 5672 003a 0346     	 mov r3,r0
 5673 003c 032B     	 cmp r3,#3
 5674 003e 01D1     	 bne .L309
1340:../cleanflight/src/main/io/osd.c ****         if (storageDeviceIsWorking) {
 5675              	 .loc 8 1340 0 discriminator 5
 5676 0040 0123     	 movs r3,#1
 5677 0042 00E0     	 b .L310
 5678              	.L309:
1340:../cleanflight/src/main/io/osd.c ****         if (storageDeviceIsWorking) {
 5679              	 .loc 8 1340 0 discriminator 6
 5680 0044 0023     	 movs r3,#0
 5681              	.L310:
1340:../cleanflight/src/main/io/osd.c ****         if (storageDeviceIsWorking) {
 5682              	 .loc 8 1340 0 discriminator 8
 5683 0046 FB75     	 strb r3,[r7,#23]
 5684 0048 FB7D     	 ldrb r3,[r7,#23]
 5685 004a 03F00103 	 and r3,r3,#1
 5686 004e FB75     	 strb r3,[r7,#23]
1341:../cleanflight/src/main/io/osd.c ****             storageTotal = sdcard_getMetadata()->numBlocks / 2000;
 5687              	 .loc 8 1341 0 is_stmt 1 discriminator 8
 5688 0050 FB7D     	 ldrb r3,[r7,#23]
 5689 0052 002B     	 cmp r3,#0
 5690 0054 13D0     	 beq .L311
1342:../cleanflight/src/main/io/osd.c ****             storageUsed = storageTotal - (afatfs_getContiguousFreeSpace() / 1024000);
 5691              	 .loc 8 1342 0
 5692 0056 FFF7FEFF 	 bl sdcard_getMetadata
 5693 005a 0346     	 mov r3,r0
 5694 005c 1B68     	 ldr r3,[r3]
 5695 005e 154A     	 ldr r2,.L316
 5696 0060 A2FB0323 	 umull r2,r3,r2,r3
 5697 0064 DB09     	 lsrs r3,r3,#7
 5698 0066 FB60     	 str r3,[r7,#12]
1343:../cleanflight/src/main/io/osd.c ****         }
 5699              	 .loc 8 1343 0
 5700 0068 FFF7FEFF 	 bl afatfs_getContiguousFreeSpace
 5701 006c 0246     	 mov r2,r0
 5702 006e 114B     	 ldr r3,.L316
 5703 0070 A3FB0223 	 umull r2,r3,r3,r2
 5704 0074 1B0C     	 lsrs r3,r3,#16
 5705 0076 FA68     	 ldr r2,[r7,#12]
 5706 0078 D31A     	 subs r3,r2,r3
 5707 007a 3B61     	 str r3,[r7,#16]
1345:../cleanflight/src/main/io/osd.c **** #endif
 5708              	 .loc 8 1345 0
 5709 007c FFE7     	 b .L315
 5710              	.L311:
 5711              	.L315:
 5712 007e 00BF     	 nop
 5713              	.L312:
1361:../cleanflight/src/main/io/osd.c ****     }
1362:../cleanflight/src/main/io/osd.c **** 
1363:../cleanflight/src/main/io/osd.c ****     if (storageDeviceIsWorking) {
 5714              	 .loc 8 1363 0
 5715 0080 FB7D     	 ldrb r3,[r7,#23]
 5716 0082 002B     	 cmp r3,#0
 5717 0084 0ED0     	 beq .L313
 5718              	.LBB35:
1364:../cleanflight/src/main/io/osd.c ****         const uint16_t storageUsedPercent = (storageUsed * 100) / storageTotal;
 5719              	 .loc 8 1364 0
 5720 0086 3B69     	 ldr r3,[r7,#16]
 5721 0088 6422     	 movs r2,#100
 5722 008a 02FB03F2 	 mul r2,r2,r3
 5723 008e FB68     	 ldr r3,[r7,#12]
 5724 0090 B2FBF3F3 	 udiv r3,r2,r3
 5725 0094 7B81     	 strh r3,[r7,#10]
1365:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%d%%", storageUsedPercent);
 5726              	 .loc 8 1365 0
 5727 0096 7B89     	 ldrh r3,[r7,#10]
 5728 0098 7868     	 ldr r0,[r7,#4]
 5729 009a 0749     	 ldr r1,.L316+4
 5730 009c 1A46     	 mov r2,r3
 5731 009e FFF7FEFF 	 bl tfp_sprintf
 5732              	.LBE35:
 5733 00a2 03E0     	 b .L306
 5734              	.L313:
1366:../cleanflight/src/main/io/osd.c ****     } else {
1367:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "FAULT");
 5735              	 .loc 8 1367 0
 5736 00a4 7868     	 ldr r0,[r7,#4]
 5737 00a6 0549     	 ldr r1,.L316+8
 5738 00a8 FFF7FEFF 	 bl tfp_sprintf
 5739              	.L306:
1368:../cleanflight/src/main/io/osd.c ****     }
1369:../cleanflight/src/main/io/osd.c **** }
 5740              	 .loc 8 1369 0
 5741 00ac 1837     	 adds r7,r7,#24
 5742              	.LCFI177:
 5743              	 .cfi_def_cfa_offset 8
 5744 00ae BD46     	 mov sp,r7
 5745              	.LCFI178:
 5746              	 .cfi_def_cfa_register 13
 5747              	 
 5748 00b0 80BD     	 pop {r7,pc}
 5749              	.L317:
 5750 00b2 00BF     	 .align 2
 5751              	.L316:
 5752 00b4 D34D6210 	 .word 274877907
 5753 00b8 14020000 	 .word .LC54
 5754 00bc 1C020000 	 .word .LC55
 5755              	 .cfi_endproc
 5756              	.LFE626:
 5758              	 .section .rodata
 5759 0222 0000     	 .align 2
 5760              	.LC56:
 5761 0224 3A00     	 .ascii ":\000"
 5762              	 .section .text.osdDisplayStatisticLabel,"ax",%progbits
 5763              	 .align 2
 5764              	 .thumb
 5765              	 .thumb_func
 5767              	osdDisplayStatisticLabel:
 5768              	.LFB627:
1370:../cleanflight/src/main/io/osd.c **** #endif
1371:../cleanflight/src/main/io/osd.c **** 
1372:../cleanflight/src/main/io/osd.c **** static void osdDisplayStatisticLabel(uint8_t y, const char * text, const char * value)
1373:../cleanflight/src/main/io/osd.c **** {
 5769              	 .loc 8 1373 0
 5770              	 .cfi_startproc
 5771              	 
 5772              	 
 5773 0000 80B5     	 push {r7,lr}
 5774              	.LCFI179:
 5775              	 .cfi_def_cfa_offset 8
 5776              	 .cfi_offset 7,-8
 5777              	 .cfi_offset 14,-4
 5778 0002 84B0     	 sub sp,sp,#16
 5779              	.LCFI180:
 5780              	 .cfi_def_cfa_offset 24
 5781 0004 00AF     	 add r7,sp,#0
 5782              	.LCFI181:
 5783              	 .cfi_def_cfa_register 7
 5784 0006 0346     	 mov r3,r0
 5785 0008 B960     	 str r1,[r7,#8]
 5786 000a 7A60     	 str r2,[r7,#4]
 5787 000c FB73     	 strb r3,[r7,#15]
1374:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, 2, y, text);
 5788              	 .loc 8 1374 0
 5789 000e 0F4B     	 ldr r3,.L319
 5790 0010 1A68     	 ldr r2,[r3]
 5791 0012 FB7B     	 ldrb r3,[r7,#15]
 5792 0014 1046     	 mov r0,r2
 5793 0016 0221     	 movs r1,#2
 5794 0018 1A46     	 mov r2,r3
 5795 001a BB68     	 ldr r3,[r7,#8]
 5796 001c FFF7FEFF 	 bl displayWrite
1375:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, 20, y, ":");
 5797              	 .loc 8 1375 0
 5798 0020 0A4B     	 ldr r3,.L319
 5799 0022 1A68     	 ldr r2,[r3]
 5800 0024 FB7B     	 ldrb r3,[r7,#15]
 5801 0026 1046     	 mov r0,r2
 5802 0028 1421     	 movs r1,#20
 5803 002a 1A46     	 mov r2,r3
 5804 002c 084B     	 ldr r3,.L319+4
 5805 002e FFF7FEFF 	 bl displayWrite
1376:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, 22, y, value);
 5806              	 .loc 8 1376 0
 5807 0032 064B     	 ldr r3,.L319
 5808 0034 1A68     	 ldr r2,[r3]
 5809 0036 FB7B     	 ldrb r3,[r7,#15]
 5810 0038 1046     	 mov r0,r2
 5811 003a 1621     	 movs r1,#22
 5812 003c 1A46     	 mov r2,r3
 5813 003e 7B68     	 ldr r3,[r7,#4]
 5814 0040 FFF7FEFF 	 bl displayWrite
1377:../cleanflight/src/main/io/osd.c **** }
 5815              	 .loc 8 1377 0
 5816 0044 1037     	 adds r7,r7,#16
 5817              	.LCFI182:
 5818              	 .cfi_def_cfa_offset 8
 5819 0046 BD46     	 mov sp,r7
 5820              	.LCFI183:
 5821              	 .cfi_def_cfa_register 13
 5822              	 
 5823 0048 80BD     	 pop {r7,pc}
 5824              	.L320:
 5825 004a 00BF     	 .align 2
 5826              	.L319:
 5827 004c 00000000 	 .word osdDisplayPort
 5828 0050 24020000 	 .word .LC56
 5829              	 .cfi_endproc
 5830              	.LFE627:
 5832              	 .section .text.isSomeStatEnabled,"ax",%progbits
 5833              	 .align 2
 5834              	 .thumb
 5835              	 .thumb_func
 5837              	isSomeStatEnabled:
 5838              	.LFB628:
1378:../cleanflight/src/main/io/osd.c **** 
1379:../cleanflight/src/main/io/osd.c **** /*
1380:../cleanflight/src/main/io/osd.c ****  * Test if there's some stat enabled
1381:../cleanflight/src/main/io/osd.c ****  */
1382:../cleanflight/src/main/io/osd.c **** static bool isSomeStatEnabled(void)
1383:../cleanflight/src/main/io/osd.c **** {
 5839              	 .loc 8 1383 0
 5840              	 .cfi_startproc
 5841              	 
 5842              	 
 5843 0000 80B5     	 push {r7,lr}
 5844              	.LCFI184:
 5845              	 .cfi_def_cfa_offset 8
 5846              	 .cfi_offset 7,-8
 5847              	 .cfi_offset 14,-4
 5848 0002 00AF     	 add r7,sp,#0
 5849              	.LCFI185:
 5850              	 .cfi_def_cfa_register 7
1384:../cleanflight/src/main/io/osd.c ****     return (osdConfig()->enabled_stats != 0);
 5851              	 .loc 8 1384 0
 5852 0004 FFF7FEFF 	 bl osdConfig
 5853 0008 0346     	 mov r3,r0
 5854 000a 5B6E     	 ldr r3,[r3,#100]
 5855 000c 002B     	 cmp r3,#0
 5856 000e 14BF     	 ite ne
 5857 0010 0123     	 movne r3,#1
 5858 0012 0023     	 moveq r3,#0
 5859 0014 DBB2     	 uxtb r3,r3
1385:../cleanflight/src/main/io/osd.c **** }
 5860              	 .loc 8 1385 0
 5861 0016 1846     	 mov r0,r3
 5862 0018 80BD     	 pop {r7,pc}
 5863              	 .cfi_endproc
 5864              	.LFE628:
 5866 001a 00BF     	 .section .rodata
 5867 0226 0000     	 .align 2
 5868              	.LC57:
 5869 0228 20202D2D 	 .ascii "  --- STATS ---\000"
 5869      2D205354 
 5869      41545320 
 5869      2D2D2D00 
 5870              	 .align 2
 5871              	.LC58:
 5872 0238 4E4F2052 	 .ascii "NO RTC\000"
 5872      544300
 5873 023f 00       	 .align 2
 5874              	.LC59:
 5875 0240 4D415820 	 .ascii "MAX SPEED\000"
 5875      53504545 
 5875      4400
 5876 024a 0000     	 .align 2
 5877              	.LC60:
 5878 024c 4D415820 	 .ascii "MAX DISTANCE\000"
 5878      44495354 
 5878      414E4345 
 5878      00
 5879 0259 000000   	 .align 2
 5880              	.LC61:
 5881 025c 25642E25 	 .ascii "%d.%1d%c\000"
 5881      31642563 
 5881      00
 5882 0265 000000   	 .align 2
 5883              	.LC62:
 5884 0268 4D494E20 	 .ascii "MIN BATTERY\000"
 5884      42415454 
 5884      45525900 
 5885              	 .align 2
 5886              	.LC63:
 5887 0274 454E4420 	 .ascii "END BATTERY\000"
 5887      42415454 
 5887      45525900 
 5888              	 .align 2
 5889              	.LC64:
 5890 0280 42415454 	 .ascii "BATTERY\000"
 5890      45525900 
 5891              	 .align 2
 5892              	.LC65:
 5893 0288 2500     	 .ascii "%\000"
 5894 028a 0000     	 .align 2
 5895              	.LC66:
 5896 028c 4D494E20 	 .ascii "MIN RSSI\000"
 5896      52535349 
 5896      00
 5897 0295 000000   	 .align 2
 5898              	.LC67:
 5899 0298 4100     	 .ascii "A\000"
 5900 029a 0000     	 .align 2
 5901              	.LC68:
 5902 029c 4D415820 	 .ascii "MAX CURRENT\000"
 5902      43555252 
 5902      454E5400 
 5903              	 .align 2
 5904              	.LC69:
 5905 02a8 55534544 	 .ascii "USED MAH\000"
 5905      204D4148 
 5905      00
 5906 02b1 000000   	 .align 2
 5907              	.LC70:
 5908 02b4 4D415820 	 .ascii "MAX ALTITUDE\000"
 5908      414C5449 
 5908      54554445 
 5908      00
 5909 02c1 000000   	 .align 2
 5910              	.LC71:
 5911 02c4 424C4143 	 .ascii "BLACKBOX\000"
 5911      4B424F58 
 5911      00
 5912 02cd 000000   	 .align 2
 5913              	.LC72:
 5914 02d0 4242204C 	 .ascii "BB LOG NUM\000"
 5914      4F47204E 
 5914      554D00
 5915              	 .section .text.osdShowStats,"ax",%progbits
 5916              	 .align 2
 5917              	 .thumb
 5918              	 .thumb_func
 5920              	osdShowStats:
 5921              	.LFB629:
1386:../cleanflight/src/main/io/osd.c **** 
1387:../cleanflight/src/main/io/osd.c **** // *** IMPORTANT ***
1388:../cleanflight/src/main/io/osd.c **** // The order of the OSD stats as displayed on-screen must match the osd_stats_e enumeration.
1389:../cleanflight/src/main/io/osd.c **** // This is because the fields are presented in the configurator in the order of the enumeration
1390:../cleanflight/src/main/io/osd.c **** // and we want the configuration order to match the on-screen display order.  If you change the
1391:../cleanflight/src/main/io/osd.c **** // display order you *must* update the osd_stats_e enumeration to match. Additionally the
1392:../cleanflight/src/main/io/osd.c **** // changes to the stats display order *must* be implemented in the configurator otherwise the
1393:../cleanflight/src/main/io/osd.c **** // stats selections will not be populated correctly and the settings will become corrupted.
1394:../cleanflight/src/main/io/osd.c **** 
1395:../cleanflight/src/main/io/osd.c **** static void osdShowStats(uint16_t endBatteryVoltage)
1396:../cleanflight/src/main/io/osd.c **** {
 5922              	 .loc 8 1396 0
 5923              	 .cfi_startproc
 5924              	 
 5925              	 
 5926 0000 B0B5     	 push {r4,r5,r7,lr}
 5927              	.LCFI186:
 5928              	 .cfi_def_cfa_offset 16
 5929              	 .cfi_offset 4,-16
 5930              	 .cfi_offset 5,-12
 5931              	 .cfi_offset 7,-8
 5932              	 .cfi_offset 14,-4
 5933 0002 8EB0     	 sub sp,sp,#56
 5934              	.LCFI187:
 5935              	 .cfi_def_cfa_offset 72
 5936 0004 02AF     	 add r7,sp,#8
 5937              	.LCFI188:
 5938              	 .cfi_def_cfa 7,64
 5939 0006 0346     	 mov r3,r0
 5940 0008 FB80     	 strh r3,[r7,#6]
1397:../cleanflight/src/main/io/osd.c ****     uint8_t top = 2;
 5941              	 .loc 8 1397 0
 5942 000a 0223     	 movs r3,#2
 5943 000c 87F82F30 	 strb r3,[r7,#47]
1398:../cleanflight/src/main/io/osd.c ****     char buff[OSD_ELEMENT_BUFFER_LENGTH];
1399:../cleanflight/src/main/io/osd.c **** 
1400:../cleanflight/src/main/io/osd.c ****     displayClearScreen(osdDisplayPort);
 5944              	 .loc 8 1400 0
 5945 0010 D54B     	 ldr r3,.L339
 5946 0012 1B68     	 ldr r3,[r3]
 5947 0014 1846     	 mov r0,r3
 5948 0016 FFF7FEFF 	 bl displayClearScreen
1401:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, 2, top++, "  --- STATS ---");
 5949              	 .loc 8 1401 0
 5950 001a D34B     	 ldr r3,.L339
 5951 001c 1A68     	 ldr r2,[r3]
 5952 001e 97F82F30 	 ldrb r3,[r7,#47]
 5953 0022 591C     	 adds r1,r3,#1
 5954 0024 87F82F10 	 strb r1,[r7,#47]
 5955 0028 1046     	 mov r0,r2
 5956 002a 0221     	 movs r1,#2
 5957 002c 1A46     	 mov r2,r3
 5958 002e CF4B     	 ldr r3,.L339+4
 5959 0030 FFF7FEFF 	 bl displayWrite
1402:../cleanflight/src/main/io/osd.c **** 
1403:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_RTC_DATE_TIME)) {
 5960              	 .loc 8 1403 0
 5961 0034 0020     	 movs r0,#0
 5962 0036 FFF7FEFF 	 bl osdStatGetState
 5963 003a 0346     	 mov r3,r0
 5964 003c 002B     	 cmp r3,#0
 5965 003e 26D0     	 beq .L324
 5966              	.LBB36:
1404:../cleanflight/src/main/io/osd.c ****         bool success = false;
 5967              	 .loc 8 1404 0
 5968 0040 0023     	 movs r3,#0
 5969 0042 87F82E30 	 strb r3,[r7,#46]
1405:../cleanflight/src/main/io/osd.c **** #ifdef USE_RTC_TIME
1406:../cleanflight/src/main/io/osd.c ****         success = osdFormatRtcDateTime(&buff[0]);
 5970              	 .loc 8 1406 0
 5971 0046 07F10C03 	 add r3,r7,#12
 5972 004a 1846     	 mov r0,r3
 5973 004c FFF7FEFF 	 bl osdFormatRtcDateTime
 5974 0050 0346     	 mov r3,r0
 5975 0052 87F82E30 	 strb r3,[r7,#46]
1407:../cleanflight/src/main/io/osd.c **** #endif
1408:../cleanflight/src/main/io/osd.c ****         if (!success) {
 5976              	 .loc 8 1408 0
 5977 0056 97F82E30 	 ldrb r3,[r7,#46]
 5978 005a 83F00103 	 eor r3,r3,#1
 5979 005e DBB2     	 uxtb r3,r3
 5980 0060 002B     	 cmp r3,#0
 5981 0062 05D0     	 beq .L325
1409:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "NO RTC");
 5982              	 .loc 8 1409 0
 5983 0064 07F10C03 	 add r3,r7,#12
 5984 0068 1846     	 mov r0,r3
 5985 006a C149     	 ldr r1,.L339+8
 5986 006c FFF7FEFF 	 bl tfp_sprintf
 5987              	.L325:
1410:../cleanflight/src/main/io/osd.c ****         }
1411:../cleanflight/src/main/io/osd.c **** 
1412:../cleanflight/src/main/io/osd.c ****         displayWrite(osdDisplayPort, 2, top++, buff);
 5988              	 .loc 8 1412 0
 5989 0070 BD4B     	 ldr r3,.L339
 5990 0072 1A68     	 ldr r2,[r3]
 5991 0074 97F82F30 	 ldrb r3,[r7,#47]
 5992 0078 591C     	 adds r1,r3,#1
 5993 007a 87F82F10 	 strb r1,[r7,#47]
 5994 007e 07F10C04 	 add r4,r7,#12
 5995 0082 1046     	 mov r0,r2
 5996 0084 0221     	 movs r1,#2
 5997 0086 1A46     	 mov r2,r3
 5998 0088 2346     	 mov r3,r4
 5999 008a FFF7FEFF 	 bl displayWrite
 6000              	.L324:
 6001              	.LBE36:
1413:../cleanflight/src/main/io/osd.c ****     }
1414:../cleanflight/src/main/io/osd.c **** 
1415:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_TIMER_1)) {
 6002              	 .loc 8 1415 0
 6003 008e 0120     	 movs r0,#1
 6004 0090 FFF7FEFF 	 bl osdStatGetState
 6005 0094 0346     	 mov r3,r0
 6006 0096 002B     	 cmp r3,#0
 6007 0098 2BD0     	 beq .L326
1416:../cleanflight/src/main/io/osd.c ****         osdFormatTimer(buff, false, (OSD_TIMER_SRC(osdConfig()->timers[OSD_TIMER_1]) == OSD_TIMER_S
 6008              	 .loc 8 1416 0
 6009 009a FFF7FEFF 	 bl osdConfig
 6010 009e 0346     	 mov r3,r0
 6011 00a0 B3F85C30 	 ldrh r3,[r3,#92]
 6012 00a4 9BB2     	 uxth r3,r3
 6013 00a6 03F00F03 	 and r3,r3,#15
 6014 00aa 002B     	 cmp r3,#0
 6015 00ac 14BF     	 ite ne
 6016 00ae 0123     	 movne r3,#1
 6017 00b0 0023     	 moveq r3,#0
 6018 00b2 DBB2     	 uxtb r3,r3
 6019 00b4 07F10C02 	 add r2,r7,#12
 6020 00b8 1046     	 mov r0,r2
 6021 00ba 0021     	 movs r1,#0
 6022 00bc 1A46     	 mov r2,r3
 6023 00be 0023     	 movs r3,#0
 6024 00c0 FFF7FEFF 	 bl osdFormatTimer
1417:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, osdTimerSourceNames[OSD_TIMER_SRC(osdConfig()->timers[OSD_T
 6025              	 .loc 8 1417 0
 6026 00c4 97F82F40 	 ldrb r4,[r7,#47]
 6027 00c8 631C     	 adds r3,r4,#1
 6028 00ca 87F82F30 	 strb r3,[r7,#47]
 6029 00ce FFF7FEFF 	 bl osdConfig
 6030 00d2 0346     	 mov r3,r0
 6031 00d4 B3F85C30 	 ldrh r3,[r3,#92]
 6032 00d8 9BB2     	 uxth r3,r3
 6033 00da 03F00F03 	 and r3,r3,#15
 6034 00de A54A     	 ldr r2,.L339+12
 6035 00e0 52F82320 	 ldr r2,[r2,r3,lsl#2]
 6036 00e4 07F10C03 	 add r3,r7,#12
 6037 00e8 2046     	 mov r0,r4
 6038 00ea 1146     	 mov r1,r2
 6039 00ec 1A46     	 mov r2,r3
 6040 00ee FFF7FEFF 	 bl osdDisplayStatisticLabel
 6041              	.L326:
1418:../cleanflight/src/main/io/osd.c ****     }
1419:../cleanflight/src/main/io/osd.c **** 
1420:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_TIMER_2)) {
 6042              	 .loc 8 1420 0
 6043 00f2 0220     	 movs r0,#2
 6044 00f4 FFF7FEFF 	 bl osdStatGetState
 6045 00f8 0346     	 mov r3,r0
 6046 00fa 002B     	 cmp r3,#0
 6047 00fc 2BD0     	 beq .L327
1421:../cleanflight/src/main/io/osd.c ****         osdFormatTimer(buff, false, (OSD_TIMER_SRC(osdConfig()->timers[OSD_TIMER_2]) == OSD_TIMER_S
 6048              	 .loc 8 1421 0
 6049 00fe FFF7FEFF 	 bl osdConfig
 6050 0102 0346     	 mov r3,r0
 6051 0104 B3F85E30 	 ldrh r3,[r3,#94]
 6052 0108 9BB2     	 uxth r3,r3
 6053 010a 03F00F03 	 and r3,r3,#15
 6054 010e 002B     	 cmp r3,#0
 6055 0110 14BF     	 ite ne
 6056 0112 0123     	 movne r3,#1
 6057 0114 0023     	 moveq r3,#0
 6058 0116 DBB2     	 uxtb r3,r3
 6059 0118 07F10C02 	 add r2,r7,#12
 6060 011c 1046     	 mov r0,r2
 6061 011e 0021     	 movs r1,#0
 6062 0120 1A46     	 mov r2,r3
 6063 0122 0123     	 movs r3,#1
 6064 0124 FFF7FEFF 	 bl osdFormatTimer
1422:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, osdTimerSourceNames[OSD_TIMER_SRC(osdConfig()->timers[OSD_T
 6065              	 .loc 8 1422 0
 6066 0128 97F82F40 	 ldrb r4,[r7,#47]
 6067 012c 631C     	 adds r3,r4,#1
 6068 012e 87F82F30 	 strb r3,[r7,#47]
 6069 0132 FFF7FEFF 	 bl osdConfig
 6070 0136 0346     	 mov r3,r0
 6071 0138 B3F85E30 	 ldrh r3,[r3,#94]
 6072 013c 9BB2     	 uxth r3,r3
 6073 013e 03F00F03 	 and r3,r3,#15
 6074 0142 8C4A     	 ldr r2,.L339+12
 6075 0144 52F82320 	 ldr r2,[r2,r3,lsl#2]
 6076 0148 07F10C03 	 add r3,r7,#12
 6077 014c 2046     	 mov r0,r4
 6078 014e 1146     	 mov r1,r2
 6079 0150 1A46     	 mov r2,r3
 6080 0152 FFF7FEFF 	 bl osdDisplayStatisticLabel
 6081              	.L327:
1423:../cleanflight/src/main/io/osd.c ****     }
1424:../cleanflight/src/main/io/osd.c **** 
1425:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_MAX_SPEED) && STATE(GPS_FIX)) {
 6082              	 .loc 8 1425 0
 6083 0156 0320     	 movs r0,#3
 6084 0158 FFF7FEFF 	 bl osdStatGetState
 6085 015c 0346     	 mov r3,r0
 6086 015e 002B     	 cmp r3,#0
 6087 0160 1AD0     	 beq .L328
 6088              	 .loc 8 1425 0 is_stmt 0 discriminator 1
 6089 0162 854B     	 ldr r3,.L339+16
 6090 0164 1B78     	 ldrb r3,[r3]
 6091 0166 03F00203 	 and r3,r3,#2
 6092 016a 002B     	 cmp r3,#0
 6093 016c 14D0     	 beq .L328
1426:../cleanflight/src/main/io/osd.c ****         itoa(stats.max_speed, buff, 10);
 6094              	 .loc 8 1426 0 is_stmt 1
 6095 016e 834B     	 ldr r3,.L339+20
 6096 0170 9B88     	 ldrh r3,[r3,#4]
 6097 0172 1AB2     	 sxth r2,r3
 6098 0174 07F10C03 	 add r3,r7,#12
 6099 0178 1046     	 mov r0,r2
 6100 017a 1946     	 mov r1,r3
 6101 017c 0A22     	 movs r2,#10
 6102 017e FFF7FEFF 	 bl itoa
1427:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, "MAX SPEED", buff);
 6103              	 .loc 8 1427 0
 6104 0182 97F82F30 	 ldrb r3,[r7,#47]
 6105 0186 5A1C     	 adds r2,r3,#1
 6106 0188 87F82F20 	 strb r2,[r7,#47]
 6107 018c 07F10C02 	 add r2,r7,#12
 6108 0190 1846     	 mov r0,r3
 6109 0192 7B49     	 ldr r1,.L339+24
 6110 0194 FFF7FEFF 	 bl osdDisplayStatisticLabel
 6111              	.L328:
1428:../cleanflight/src/main/io/osd.c ****     }
1429:../cleanflight/src/main/io/osd.c **** 
1430:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_MAX_DISTANCE)) {
 6112              	 .loc 8 1430 0
 6113 0198 0420     	 movs r0,#4
 6114 019a FFF7FEFF 	 bl osdStatGetState
 6115 019e 0346     	 mov r3,r0
 6116 01a0 002B     	 cmp r3,#0
 6117 01a2 1DD0     	 beq .L329
1431:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%d%c", osdGetMetersToSelectedUnit(stats.max_distance), osdGetMetersToSel
 6118              	 .loc 8 1431 0
 6119 01a4 754B     	 ldr r3,.L339+20
 6120 01a6 1B8A     	 ldrh r3,[r3,#16]
 6121 01a8 1BB2     	 sxth r3,r3
 6122 01aa 1846     	 mov r0,r3
 6123 01ac FFF7FEFF 	 bl osdGetMetersToSelectedUnit
 6124 01b0 0546     	 mov r5,r0
 6125 01b2 FFF7FEFF 	 bl osdGetMetersToSelectedUnitSymbol
 6126 01b6 0346     	 mov r3,r0
 6127 01b8 1C46     	 mov r4,r3
 6128 01ba 07F10C03 	 add r3,r7,#12
 6129 01be 1846     	 mov r0,r3
 6130 01c0 7049     	 ldr r1,.L339+28
 6131 01c2 2A46     	 mov r2,r5
 6132 01c4 2346     	 mov r3,r4
 6133 01c6 FFF7FEFF 	 bl tfp_sprintf
1432:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, "MAX DISTANCE", buff);
 6134              	 .loc 8 1432 0
 6135 01ca 97F82F30 	 ldrb r3,[r7,#47]
 6136 01ce 5A1C     	 adds r2,r3,#1
 6137 01d0 87F82F20 	 strb r2,[r7,#47]
 6138 01d4 07F10C02 	 add r2,r7,#12
 6139 01d8 1846     	 mov r0,r3
 6140 01da 6B49     	 ldr r1,.L339+32
 6141 01dc FFF7FEFF 	 bl osdDisplayStatisticLabel
 6142              	.L329:
1433:../cleanflight/src/main/io/osd.c ****     }
1434:../cleanflight/src/main/io/osd.c **** 
1435:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_MIN_BATTERY)) {
 6143              	 .loc 8 1435 0
 6144 01e0 0520     	 movs r0,#5
 6145 01e2 FFF7FEFF 	 bl osdStatGetState
 6146 01e6 0346     	 mov r3,r0
 6147 01e8 002B     	 cmp r3,#0
 6148 01ea 2FD0     	 beq .L330
1436:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%d.%1d%c", stats.min_voltage / 10, stats.min_voltage % 10, SYM_VOLT);
 6149              	 .loc 8 1436 0
 6150 01ec 634B     	 ldr r3,.L339+20
 6151 01ee DB88     	 ldrh r3,[r3,#6]
 6152 01f0 1BB2     	 sxth r3,r3
 6153 01f2 664A     	 ldr r2,.L339+36
 6154 01f4 82FB0312 	 smull r1,r2,r2,r3
 6155 01f8 9210     	 asrs r2,r2,#2
 6156 01fa DB17     	 asrs r3,r3,#31
 6157 01fc D31A     	 subs r3,r2,r3
 6158 01fe 9BB2     	 uxth r3,r3
 6159 0200 1DB2     	 sxth r5,r3
 6160 0202 5E4B     	 ldr r3,.L339+20
 6161 0204 DB88     	 ldrh r3,[r3,#6]
 6162 0206 1AB2     	 sxth r2,r3
 6163 0208 604B     	 ldr r3,.L339+36
 6164 020a 83FB0213 	 smull r1,r3,r3,r2
 6165 020e 9910     	 asrs r1,r3,#2
 6166 0210 D317     	 asrs r3,r2,#31
 6167 0212 C91A     	 subs r1,r1,r3
 6168 0214 0B46     	 mov r3,r1
 6169 0216 9B00     	 lsls r3,r3,#2
 6170 0218 0B44     	 add r3,r3,r1
 6171 021a 5B00     	 lsls r3,r3,#1
 6172 021c D31A     	 subs r3,r2,r3
 6173 021e 9BB2     	 uxth r3,r3
 6174 0220 1CB2     	 sxth r4,r3
 6175 0222 07F10C02 	 add r2,r7,#12
 6176 0226 0623     	 movs r3,#6
 6177 0228 0093     	 str r3,[sp]
 6178 022a 1046     	 mov r0,r2
 6179 022c 5849     	 ldr r1,.L339+40
 6180 022e 2A46     	 mov r2,r5
 6181 0230 2346     	 mov r3,r4
 6182 0232 FFF7FEFF 	 bl tfp_sprintf
1437:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, "MIN BATTERY", buff);
 6183              	 .loc 8 1437 0
 6184 0236 97F82F30 	 ldrb r3,[r7,#47]
 6185 023a 5A1C     	 adds r2,r3,#1
 6186 023c 87F82F20 	 strb r2,[r7,#47]
 6187 0240 07F10C02 	 add r2,r7,#12
 6188 0244 1846     	 mov r0,r3
 6189 0246 5349     	 ldr r1,.L339+44
 6190 0248 FFF7FEFF 	 bl osdDisplayStatisticLabel
 6191              	.L330:
1438:../cleanflight/src/main/io/osd.c ****     }
1439:../cleanflight/src/main/io/osd.c **** 
1440:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_END_BATTERY)) {
 6192              	 .loc 8 1440 0
 6193 024c 0620     	 movs r0,#6
 6194 024e FFF7FEFF 	 bl osdStatGetState
 6195 0252 0346     	 mov r3,r0
 6196 0254 002B     	 cmp r3,#0
 6197 0256 27D0     	 beq .L331
1441:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%d.%1d%c", endBatteryVoltage / 10, endBatteryVoltage % 10, SYM_VOLT);
 6198              	 .loc 8 1441 0
 6199 0258 FB88     	 ldrh r3,[r7,#6]
 6200 025a 4F4A     	 ldr r2,.L339+48
 6201 025c A2FB0323 	 umull r2,r3,r2,r3
 6202 0260 DB08     	 lsrs r3,r3,#3
 6203 0262 9BB2     	 uxth r3,r3
 6204 0264 1D46     	 mov r5,r3
 6205 0266 FA88     	 ldrh r2,[r7,#6]
 6206 0268 4B4B     	 ldr r3,.L339+48
 6207 026a A3FB0213 	 umull r1,r3,r3,r2
 6208 026e D908     	 lsrs r1,r3,#3
 6209 0270 0B46     	 mov r3,r1
 6210 0272 9B00     	 lsls r3,r3,#2
 6211 0274 0B44     	 add r3,r3,r1
 6212 0276 5B00     	 lsls r3,r3,#1
 6213 0278 D31A     	 subs r3,r2,r3
 6214 027a 9BB2     	 uxth r3,r3
 6215 027c 1C46     	 mov r4,r3
 6216 027e 07F10C02 	 add r2,r7,#12
 6217 0282 0623     	 movs r3,#6
 6218 0284 0093     	 str r3,[sp]
 6219 0286 1046     	 mov r0,r2
 6220 0288 4149     	 ldr r1,.L339+40
 6221 028a 2A46     	 mov r2,r5
 6222 028c 2346     	 mov r3,r4
 6223 028e FFF7FEFF 	 bl tfp_sprintf
1442:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, "END BATTERY", buff);
 6224              	 .loc 8 1442 0
 6225 0292 97F82F30 	 ldrb r3,[r7,#47]
 6226 0296 5A1C     	 adds r2,r3,#1
 6227 0298 87F82F20 	 strb r2,[r7,#47]
 6228 029c 07F10C02 	 add r2,r7,#12
 6229 02a0 1846     	 mov r0,r3
 6230 02a2 3E49     	 ldr r1,.L339+52
 6231 02a4 FFF7FEFF 	 bl osdDisplayStatisticLabel
 6232              	.L331:
1443:../cleanflight/src/main/io/osd.c ****     }
1444:../cleanflight/src/main/io/osd.c **** 
1445:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_BATTERY)) {
 6233              	 .loc 8 1445 0
 6234 02a8 0720     	 movs r0,#7
 6235 02aa FFF7FEFF 	 bl osdStatGetState
 6236 02ae 0346     	 mov r3,r0
 6237 02b0 002B     	 cmp r3,#0
 6238 02b2 2DD0     	 beq .L332
1446:../cleanflight/src/main/io/osd.c ****         tfp_sprintf(buff, "%d.%1d%c", getBatteryVoltage() / 10, getBatteryVoltage() % 10, SYM_VOLT)
 6239              	 .loc 8 1446 0
 6240 02b4 FFF7FEFF 	 bl getBatteryVoltage
 6241 02b8 0346     	 mov r3,r0
 6242 02ba 1A46     	 mov r2,r3
 6243 02bc 364B     	 ldr r3,.L339+48
 6244 02be A3FB0223 	 umull r2,r3,r3,r2
 6245 02c2 DB08     	 lsrs r3,r3,#3
 6246 02c4 9BB2     	 uxth r3,r3
 6247 02c6 1D46     	 mov r5,r3
 6248 02c8 FFF7FEFF 	 bl getBatteryVoltage
 6249 02cc 0346     	 mov r3,r0
 6250 02ce 1A46     	 mov r2,r3
 6251 02d0 314B     	 ldr r3,.L339+48
 6252 02d2 A3FB0213 	 umull r1,r3,r3,r2
 6253 02d6 D908     	 lsrs r1,r3,#3
 6254 02d8 0B46     	 mov r3,r1
 6255 02da 9B00     	 lsls r3,r3,#2
 6256 02dc 0B44     	 add r3,r3,r1
 6257 02de 5B00     	 lsls r3,r3,#1
 6258 02e0 D31A     	 subs r3,r2,r3
 6259 02e2 9BB2     	 uxth r3,r3
 6260 02e4 1C46     	 mov r4,r3
 6261 02e6 07F10C02 	 add r2,r7,#12
 6262 02ea 0623     	 movs r3,#6
 6263 02ec 0093     	 str r3,[sp]
 6264 02ee 1046     	 mov r0,r2
 6265 02f0 2749     	 ldr r1,.L339+40
 6266 02f2 2A46     	 mov r2,r5
 6267 02f4 2346     	 mov r3,r4
 6268 02f6 FFF7FEFF 	 bl tfp_sprintf
1447:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, "BATTERY", buff);
 6269              	 .loc 8 1447 0
 6270 02fa 97F82F30 	 ldrb r3,[r7,#47]
 6271 02fe 5A1C     	 adds r2,r3,#1
 6272 0300 87F82F20 	 strb r2,[r7,#47]
 6273 0304 07F10C02 	 add r2,r7,#12
 6274 0308 1846     	 mov r0,r3
 6275 030a 2549     	 ldr r1,.L339+56
 6276 030c FFF7FEFF 	 bl osdDisplayStatisticLabel
 6277              	.L332:
1448:../cleanflight/src/main/io/osd.c ****     }
1449:../cleanflight/src/main/io/osd.c **** 
1450:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_MIN_RSSI)) {
 6278              	 .loc 8 1450 0
 6279 0310 0820     	 movs r0,#8
 6280 0312 FFF7FEFF 	 bl osdStatGetState
 6281 0316 0346     	 mov r3,r0
 6282 0318 002B     	 cmp r3,#0
 6283 031a 47D0     	 beq .L333
1451:../cleanflight/src/main/io/osd.c ****         itoa(stats.min_rssi, buff, 10);
 6284              	 .loc 8 1451 0
 6285 031c 174B     	 ldr r3,.L339+20
 6286 031e 5B89     	 ldrh r3,[r3,#10]
 6287 0320 1AB2     	 sxth r2,r3
 6288 0322 07F10C03 	 add r3,r7,#12
 6289 0326 1046     	 mov r0,r2
 6290 0328 1946     	 mov r1,r3
 6291 032a 0A22     	 movs r2,#10
 6292 032c FFF7FEFF 	 bl itoa
1452:../cleanflight/src/main/io/osd.c ****         strcat(buff, "%");
 6293              	 .loc 8 1452 0
 6294 0330 07F10C03 	 add r3,r7,#12
 6295 0334 1846     	 mov r0,r3
 6296 0336 FFF7FEFF 	 bl strlen
 6297 033a 0346     	 mov r3,r0
 6298 033c 1A46     	 mov r2,r3
 6299 033e 07F10C03 	 add r3,r7,#12
 6300 0342 1344     	 add r3,r3,r2
 6301 0344 1749     	 ldr r1,.L339+60
 6302 0346 1A46     	 mov r2,r3
 6303 0348 0B46     	 mov r3,r1
 6304 034a 1B88     	 ldrh r3,[r3]
 6305 034c 1380     	 strh r3,[r2]
1453:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, "MIN RSSI", buff);
 6306              	 .loc 8 1453 0
 6307 034e 97F82F30 	 ldrb r3,[r7,#47]
 6308 0352 5A1C     	 adds r2,r3,#1
 6309 0354 87F82F20 	 strb r2,[r7,#47]
 6310 0358 07F10C02 	 add r2,r7,#12
 6311 035c 1846     	 mov r0,r3
 6312 035e 1249     	 ldr r1,.L339+64
 6313 0360 FFF7FEFF 	 bl osdDisplayStatisticLabel
 6314 0364 22E0     	 b .L340
 6315              	.L341:
 6316 0366 00BF     	 .align 2
 6317              	.L339:
 6318 0368 00000000 	 .word osdDisplayPort
 6319 036c 28020000 	 .word .LC57
 6320 0370 38020000 	 .word .LC58
 6321 0374 00000000 	 .word osdTimerSourceNames
 6322 0378 00000000 	 .word stateFlags
 6323 037c 00000000 	 .word stats
 6324 0380 40020000 	 .word .LC59
 6325 0384 A0000000 	 .word .LC15
 6326 0388 4C020000 	 .word .LC60
 6327 038c 67666666 	 .word 1717986919
 6328 0390 5C020000 	 .word .LC61
 6329 0394 68020000 	 .word .LC62
 6330 0398 CDCCCCCC 	 .word -858993459
 6331 039c 74020000 	 .word .LC63
 6332 03a0 80020000 	 .word .LC64
 6333 03a4 88020000 	 .word .LC65
 6334 03a8 8C020000 	 .word .LC66
 6335              	.L340:
 6336              	.L333:
1454:../cleanflight/src/main/io/osd.c ****     }
1455:../cleanflight/src/main/io/osd.c **** 
1456:../cleanflight/src/main/io/osd.c ****     if (batteryConfig()->currentMeterSource != CURRENT_METER_NONE) {
 6337              	 .loc 8 1456 0
 6338 03ac FFF7FEFF 	 bl batteryConfig
 6339 03b0 0346     	 mov r3,r0
 6340 03b2 9B79     	 ldrb r3,[r3,#6]
 6341 03b4 002B     	 cmp r3,#0
 6342 03b6 44D0     	 beq .L334
1457:../cleanflight/src/main/io/osd.c ****         if (osdStatGetState(OSD_STAT_MAX_CURRENT)) {
 6343              	 .loc 8 1457 0
 6344 03b8 0920     	 movs r0,#9
 6345 03ba FFF7FEFF 	 bl osdStatGetState
 6346 03be 0346     	 mov r3,r0
 6347 03c0 002B     	 cmp r3,#0
 6348 03c2 23D0     	 beq .L335
1458:../cleanflight/src/main/io/osd.c ****             itoa(stats.max_current, buff, 10);
 6349              	 .loc 8 1458 0
 6350 03c4 524B     	 ldr r3,.L342
 6351 03c6 1B89     	 ldrh r3,[r3,#8]
 6352 03c8 1AB2     	 sxth r2,r3
 6353 03ca 07F10C03 	 add r3,r7,#12
 6354 03ce 1046     	 mov r0,r2
 6355 03d0 1946     	 mov r1,r3
 6356 03d2 0A22     	 movs r2,#10
 6357 03d4 FFF7FEFF 	 bl itoa
1459:../cleanflight/src/main/io/osd.c ****             strcat(buff, "A");
 6358              	 .loc 8 1459 0
 6359 03d8 07F10C03 	 add r3,r7,#12
 6360 03dc 1846     	 mov r0,r3
 6361 03de FFF7FEFF 	 bl strlen
 6362 03e2 0346     	 mov r3,r0
 6363 03e4 1A46     	 mov r2,r3
 6364 03e6 07F10C03 	 add r3,r7,#12
 6365 03ea 1344     	 add r3,r3,r2
 6366 03ec 4949     	 ldr r1,.L342+4
 6367 03ee 1A46     	 mov r2,r3
 6368 03f0 0B46     	 mov r3,r1
 6369 03f2 1B88     	 ldrh r3,[r3]
 6370 03f4 1380     	 strh r3,[r2]
1460:../cleanflight/src/main/io/osd.c ****             osdDisplayStatisticLabel(top++, "MAX CURRENT", buff);
 6371              	 .loc 8 1460 0
 6372 03f6 97F82F30 	 ldrb r3,[r7,#47]
 6373 03fa 5A1C     	 adds r2,r3,#1
 6374 03fc 87F82F20 	 strb r2,[r7,#47]
 6375 0400 07F10C02 	 add r2,r7,#12
 6376 0404 1846     	 mov r0,r3
 6377 0406 4449     	 ldr r1,.L342+8
 6378 0408 FFF7FEFF 	 bl osdDisplayStatisticLabel
 6379              	.L335:
1461:../cleanflight/src/main/io/osd.c ****         }
1462:../cleanflight/src/main/io/osd.c **** 
1463:../cleanflight/src/main/io/osd.c ****         if (osdStatGetState(OSD_STAT_USED_MAH)) {
 6380              	 .loc 8 1463 0
 6381 040c 0A20     	 movs r0,#10
 6382 040e FFF7FEFF 	 bl osdStatGetState
 6383 0412 0346     	 mov r3,r0
 6384 0414 002B     	 cmp r3,#0
 6385 0416 14D0     	 beq .L334
1464:../cleanflight/src/main/io/osd.c ****             tfp_sprintf(buff, "%d%c", getMAhDrawn(), SYM_MAH);
 6386              	 .loc 8 1464 0
 6387 0418 FFF7FEFF 	 bl getMAhDrawn
 6388 041c 0246     	 mov r2,r0
 6389 041e 07F10C03 	 add r3,r7,#12
 6390 0422 1846     	 mov r0,r3
 6391 0424 3D49     	 ldr r1,.L342+12
 6392 0426 0723     	 movs r3,#7
 6393 0428 FFF7FEFF 	 bl tfp_sprintf
1465:../cleanflight/src/main/io/osd.c ****             osdDisplayStatisticLabel(top++, "USED MAH", buff);
 6394              	 .loc 8 1465 0
 6395 042c 97F82F30 	 ldrb r3,[r7,#47]
 6396 0430 5A1C     	 adds r2,r3,#1
 6397 0432 87F82F20 	 strb r2,[r7,#47]
 6398 0436 07F10C02 	 add r2,r7,#12
 6399 043a 1846     	 mov r0,r3
 6400 043c 3849     	 ldr r1,.L342+16
 6401 043e FFF7FEFF 	 bl osdDisplayStatisticLabel
 6402              	.L334:
1466:../cleanflight/src/main/io/osd.c ****         }
1467:../cleanflight/src/main/io/osd.c ****     }
1468:../cleanflight/src/main/io/osd.c **** 
1469:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_MAX_ALTITUDE)) {
 6403              	 .loc 8 1469 0
 6404 0442 0B20     	 movs r0,#11
 6405 0444 FFF7FEFF 	 bl osdStatGetState
 6406 0448 0346     	 mov r3,r0
 6407 044a 002B     	 cmp r3,#0
 6408 044c 12D0     	 beq .L336
1470:../cleanflight/src/main/io/osd.c ****         osdFormatAltitudeString(buff, stats.max_altitude);
 6409              	 .loc 8 1470 0
 6410 044e 304B     	 ldr r3,.L342
 6411 0450 DB68     	 ldr r3,[r3,#12]
 6412 0452 07F10C02 	 add r2,r7,#12
 6413 0456 1046     	 mov r0,r2
 6414 0458 1946     	 mov r1,r3
 6415 045a FFF7FEFF 	 bl osdFormatAltitudeString
1471:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, "MAX ALTITUDE", buff);
 6416              	 .loc 8 1471 0
 6417 045e 97F82F30 	 ldrb r3,[r7,#47]
 6418 0462 5A1C     	 adds r2,r3,#1
 6419 0464 87F82F20 	 strb r2,[r7,#47]
 6420 0468 07F10C02 	 add r2,r7,#12
 6421 046c 1846     	 mov r0,r3
 6422 046e 2D49     	 ldr r1,.L342+20
 6423 0470 FFF7FEFF 	 bl osdDisplayStatisticLabel
 6424              	.L336:
1472:../cleanflight/src/main/io/osd.c ****     }
1473:../cleanflight/src/main/io/osd.c **** 
1474:../cleanflight/src/main/io/osd.c **** #ifdef USE_BLACKBOX
1475:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_BLACKBOX) && blackboxConfig()->device && blackboxConfig()->device 
 6425              	 .loc 8 1475 0
 6426 0474 0C20     	 movs r0,#12
 6427 0476 FFF7FEFF 	 bl osdStatGetState
 6428 047a 0346     	 mov r3,r0
 6429 047c 002B     	 cmp r3,#0
 6430 047e 1BD0     	 beq .L337
 6431              	 .loc 8 1475 0 is_stmt 0 discriminator 1
 6432 0480 FFF7FEFF 	 bl blackboxConfig
 6433 0484 0346     	 mov r3,r0
 6434 0486 9B78     	 ldrb r3,[r3,#2]
 6435 0488 002B     	 cmp r3,#0
 6436 048a 15D0     	 beq .L337
 6437              	 .loc 8 1475 0 discriminator 2
 6438 048c FFF7FEFF 	 bl blackboxConfig
 6439 0490 0346     	 mov r3,r0
 6440 0492 9B78     	 ldrb r3,[r3,#2]
 6441 0494 032B     	 cmp r3,#3
 6442 0496 0FD0     	 beq .L337
1476:../cleanflight/src/main/io/osd.c ****         osdGetBlackboxStatusString(buff);
 6443              	 .loc 8 1476 0 is_stmt 1
 6444 0498 07F10C03 	 add r3,r7,#12
 6445 049c 1846     	 mov r0,r3
 6446 049e FFF7FEFF 	 bl osdGetBlackboxStatusString
1477:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, "BLACKBOX", buff);
 6447              	 .loc 8 1477 0
 6448 04a2 97F82F30 	 ldrb r3,[r7,#47]
 6449 04a6 5A1C     	 adds r2,r3,#1
 6450 04a8 87F82F20 	 strb r2,[r7,#47]
 6451 04ac 07F10C02 	 add r2,r7,#12
 6452 04b0 1846     	 mov r0,r3
 6453 04b2 1D49     	 ldr r1,.L342+24
 6454 04b4 FFF7FEFF 	 bl osdDisplayStatisticLabel
 6455              	.L337:
1478:../cleanflight/src/main/io/osd.c ****     }
1479:../cleanflight/src/main/io/osd.c **** 
1480:../cleanflight/src/main/io/osd.c ****     if (osdStatGetState(OSD_STAT_BLACKBOX_NUMBER) && blackboxConfig()->device && blackboxConfig()->
 6456              	 .loc 8 1480 0
 6457 04b8 0D20     	 movs r0,#13
 6458 04ba FFF7FEFF 	 bl osdStatGetState
 6459 04be 0346     	 mov r3,r0
 6460 04c0 002B     	 cmp r3,#0
 6461 04c2 21D0     	 beq .L323
 6462              	 .loc 8 1480 0 is_stmt 0 discriminator 1
 6463 04c4 FFF7FEFF 	 bl blackboxConfig
 6464 04c8 0346     	 mov r3,r0
 6465 04ca 9B78     	 ldrb r3,[r3,#2]
 6466 04cc 002B     	 cmp r3,#0
 6467 04ce 1BD0     	 beq .L323
 6468              	 .loc 8 1480 0 discriminator 2
 6469 04d0 FFF7FEFF 	 bl blackboxConfig
 6470 04d4 0346     	 mov r3,r0
 6471 04d6 9B78     	 ldrb r3,[r3,#2]
 6472 04d8 032B     	 cmp r3,#3
 6473 04da 15D0     	 beq .L323
1481:../cleanflight/src/main/io/osd.c ****         itoa(blackboxGetLogNumber(), buff, 10);
 6474              	 .loc 8 1481 0 is_stmt 1
 6475 04dc FFF7FEFF 	 bl blackboxGetLogNumber
 6476 04e0 0346     	 mov r3,r0
 6477 04e2 1A46     	 mov r2,r3
 6478 04e4 07F10C03 	 add r3,r7,#12
 6479 04e8 1046     	 mov r0,r2
 6480 04ea 1946     	 mov r1,r3
 6481 04ec 0A22     	 movs r2,#10
 6482 04ee FFF7FEFF 	 bl itoa
1482:../cleanflight/src/main/io/osd.c ****         osdDisplayStatisticLabel(top++, "BB LOG NUM", buff);
 6483              	 .loc 8 1482 0
 6484 04f2 97F82F30 	 ldrb r3,[r7,#47]
 6485 04f6 5A1C     	 adds r2,r3,#1
 6486 04f8 87F82F20 	 strb r2,[r7,#47]
 6487 04fc 07F10C02 	 add r2,r7,#12
 6488 0500 1846     	 mov r0,r3
 6489 0502 0A49     	 ldr r1,.L342+28
 6490 0504 FFF7FEFF 	 bl osdDisplayStatisticLabel
 6491              	.L323:
1483:../cleanflight/src/main/io/osd.c ****     }
1484:../cleanflight/src/main/io/osd.c **** #endif
1485:../cleanflight/src/main/io/osd.c **** 
1486:../cleanflight/src/main/io/osd.c **** }
 6492              	 .loc 8 1486 0
 6493 0508 3037     	 adds r7,r7,#48
 6494              	.LCFI189:
 6495              	 .cfi_def_cfa_offset 16
 6496 050a BD46     	 mov sp,r7
 6497              	.LCFI190:
 6498              	 .cfi_def_cfa_register 13
 6499              	 
 6500 050c B0BD     	 pop {r4,r5,r7,pc}
 6501              	.L343:
 6502 050e 00BF     	 .align 2
 6503              	.L342:
 6504 0510 00000000 	 .word stats
 6505 0514 98020000 	 .word .LC67
 6506 0518 9C020000 	 .word .LC68
 6507 051c A0000000 	 .word .LC15
 6508 0520 A8020000 	 .word .LC69
 6509 0524 B4020000 	 .word .LC70
 6510 0528 C4020000 	 .word .LC71
 6511 052c D0020000 	 .word .LC72
 6512              	 .cfi_endproc
 6513              	.LFE629:
 6515              	 .section .rodata
 6516 02db 00       	 .align 2
 6517              	.LC73:
 6518 02dc 41524D45 	 .ascii "ARMED\000"
 6518      4400
 6519 02e2 0000     	 .section .text.osdShowArmed,"ax",%progbits
 6520              	 .align 2
 6521              	 .thumb
 6522              	 .thumb_func
 6524              	osdShowArmed:
 6525              	.LFB630:
1487:../cleanflight/src/main/io/osd.c **** 
1488:../cleanflight/src/main/io/osd.c **** static void osdShowArmed(void)
1489:../cleanflight/src/main/io/osd.c **** {
 6526              	 .loc 8 1489 0
 6527              	 .cfi_startproc
 6528              	 
 6529              	 
 6530 0000 80B5     	 push {r7,lr}
 6531              	.LCFI191:
 6532              	 .cfi_def_cfa_offset 8
 6533              	 .cfi_offset 7,-8
 6534              	 .cfi_offset 14,-4
 6535 0002 00AF     	 add r7,sp,#0
 6536              	.LCFI192:
 6537              	 .cfi_def_cfa_register 7
1490:../cleanflight/src/main/io/osd.c ****     displayClearScreen(osdDisplayPort);
 6538              	 .loc 8 1490 0
 6539 0004 064B     	 ldr r3,.L345
 6540 0006 1B68     	 ldr r3,[r3]
 6541 0008 1846     	 mov r0,r3
 6542 000a FFF7FEFF 	 bl displayClearScreen
1491:../cleanflight/src/main/io/osd.c ****     displayWrite(osdDisplayPort, 12, 7, "ARMED");
 6543              	 .loc 8 1491 0
 6544 000e 044B     	 ldr r3,.L345
 6545 0010 1B68     	 ldr r3,[r3]
 6546 0012 1846     	 mov r0,r3
 6547 0014 0C21     	 movs r1,#12
 6548 0016 0722     	 movs r2,#7
 6549 0018 024B     	 ldr r3,.L345+4
 6550 001a FFF7FEFF 	 bl displayWrite
1492:../cleanflight/src/main/io/osd.c **** }
 6551              	 .loc 8 1492 0
 6552 001e 80BD     	 pop {r7,pc}
 6553              	.L346:
 6554              	 .align 2
 6555              	.L345:
 6556 0020 00000000 	 .word osdDisplayPort
 6557 0024 DC020000 	 .word .LC73
 6558              	 .cfi_endproc
 6559              	.LFE630:
 6561              	 .section .text.osdRefresh,"ax",%progbits
 6562              	 .align 2
 6563              	 .thumb
 6564              	 .thumb_func
 6566              	osdRefresh:
 6567              	.LFB631:
1493:../cleanflight/src/main/io/osd.c **** 
1494:../cleanflight/src/main/io/osd.c **** STATIC_UNIT_TESTED void osdRefresh(timeUs_t currentTimeUs)
1495:../cleanflight/src/main/io/osd.c **** {
 6568              	 .loc 8 1495 0
 6569              	 .cfi_startproc
 6570              	 
 6571              	 
 6572 0000 80B5     	 push {r7,lr}
 6573              	.LCFI193:
 6574              	 .cfi_def_cfa_offset 8
 6575              	 .cfi_offset 7,-8
 6576              	 .cfi_offset 14,-4
 6577 0002 84B0     	 sub sp,sp,#16
 6578              	.LCFI194:
 6579              	 .cfi_def_cfa_offset 24
 6580 0004 00AF     	 add r7,sp,#0
 6581              	.LCFI195:
 6582              	 .cfi_def_cfa_register 7
 6583 0006 7860     	 str r0,[r7,#4]
1496:../cleanflight/src/main/io/osd.c ****     static timeUs_t lastTimeUs = 0;
1497:../cleanflight/src/main/io/osd.c ****     static bool osdStatsEnabled = false;
1498:../cleanflight/src/main/io/osd.c ****     static bool osdStatsVisible = false;
1499:../cleanflight/src/main/io/osd.c ****     static timeUs_t osdStatsRefreshTimeUs;
1500:../cleanflight/src/main/io/osd.c ****     static uint16_t endBatteryVoltage;
1501:../cleanflight/src/main/io/osd.c **** 
1502:../cleanflight/src/main/io/osd.c ****     // detect arm/disarm
1503:../cleanflight/src/main/io/osd.c ****     if (armState != ARMING_FLAG(ARMED)) {
 6584              	 .loc 8 1503 0
 6585 0008 8D4B     	 ldr r3,.L363
 6586 000a 1B78     	 ldrb r3,[r3]
 6587 000c 1A46     	 mov r2,r3
 6588 000e 8D4B     	 ldr r3,.L363+4
 6589 0010 1B78     	 ldrb r3,[r3]
 6590 0012 03F00103 	 and r3,r3,#1
 6591 0016 9A42     	 cmp r2,r3
 6592 0018 41D0     	 beq .L348
1504:../cleanflight/src/main/io/osd.c ****         if (ARMING_FLAG(ARMED)) {
 6593              	 .loc 8 1504 0
 6594 001a 8A4B     	 ldr r3,.L363+4
 6595 001c 1B78     	 ldrb r3,[r3]
 6596 001e 03F00103 	 and r3,r3,#1
 6597 0022 002B     	 cmp r3,#0
 6598 0024 11D0     	 beq .L349
1505:../cleanflight/src/main/io/osd.c ****             osdStatsEnabled = false;
 6599              	 .loc 8 1505 0
 6600 0026 884B     	 ldr r3,.L363+8
 6601 0028 0022     	 movs r2,#0
 6602 002a 1A70     	 strb r2,[r3]
1506:../cleanflight/src/main/io/osd.c ****             osdStatsVisible = false;
 6603              	 .loc 8 1506 0
 6604 002c 874B     	 ldr r3,.L363+12
 6605 002e 0022     	 movs r2,#0
 6606 0030 1A70     	 strb r2,[r3]
1507:../cleanflight/src/main/io/osd.c ****             osdResetStats();
 6607              	 .loc 8 1507 0
 6608 0032 FFF7FEFF 	 bl osdResetStats
1508:../cleanflight/src/main/io/osd.c ****             osdShowArmed();
 6609              	 .loc 8 1508 0
 6610 0036 FFF7FEFF 	 bl osdShowArmed
1509:../cleanflight/src/main/io/osd.c ****             resumeRefreshAt = currentTimeUs + (REFRESH_1S / 2);
 6611              	 .loc 8 1509 0
 6612 003a 7B68     	 ldr r3,[r7,#4]
 6613 003c 03F5F423 	 add r3,r3,#499712
 6614 0040 03F59073 	 add r3,r3,#288
 6615 0044 824A     	 ldr r2,.L363+16
 6616 0046 1360     	 str r3,[r2]
 6617 0048 22E0     	 b .L350
 6618              	.L349:
1510:../cleanflight/src/main/io/osd.c ****         } else if (isSomeStatEnabled()
 6619              	 .loc 8 1510 0
 6620 004a FFF7FEFF 	 bl isSomeStatEnabled
 6621 004e 0346     	 mov r3,r0
 6622 0050 002B     	 cmp r3,#0
 6623 0052 1DD0     	 beq .L350
1511:../cleanflight/src/main/io/osd.c ****                    && (!(getArmingDisableFlags() & ARMING_DISABLED_RUNAWAY_TAKEOFF)
 6624              	 .loc 8 1511 0
 6625 0054 FFF7FEFF 	 bl getArmingDisableFlags
 6626 0058 0346     	 mov r3,r0
 6627 005a 03F02003 	 and r3,r3,#32
 6628 005e 002B     	 cmp r3,#0
 6629 0060 08D0     	 beq .L351
1512:../cleanflight/src/main/io/osd.c ****                        || !VISIBLE(osdConfig()->item_pos[OSD_WARNINGS]))) { // suppress stats if ru
 6630              	 .loc 8 1512 0
 6631 0062 FFF7FEFF 	 bl osdConfig
 6632 0066 0346     	 mov r3,r0
 6633 0068 5B8D     	 ldrh r3,[r3,#42]
 6634 006a 9BB2     	 uxth r3,r3
 6635 006c 03F40063 	 and r3,r3,#2048
 6636 0070 002B     	 cmp r3,#0
 6637 0072 0DD1     	 bne .L350
 6638              	.L351:
1513:../cleanflight/src/main/io/osd.c ****             osdStatsEnabled = true;
 6639              	 .loc 8 1513 0
 6640 0074 744B     	 ldr r3,.L363+8
 6641 0076 0122     	 movs r2,#1
 6642 0078 1A70     	 strb r2,[r3]
1514:../cleanflight/src/main/io/osd.c ****             resumeRefreshAt = currentTimeUs + (60 * REFRESH_1S);
 6643              	 .loc 8 1514 0
 6644 007a 7A68     	 ldr r2,[r7,#4]
 6645 007c 754B     	 ldr r3,.L363+20
 6646 007e 1344     	 add r3,r3,r2
 6647 0080 734A     	 ldr r2,.L363+16
 6648 0082 1360     	 str r3,[r2]
1515:../cleanflight/src/main/io/osd.c ****             endBatteryVoltage = getBatteryVoltage();
 6649              	 .loc 8 1515 0
 6650 0084 FFF7FEFF 	 bl getBatteryVoltage
 6651 0088 0346     	 mov r3,r0
 6652 008a 1A46     	 mov r2,r3
 6653 008c 724B     	 ldr r3,.L363+24
 6654 008e 1A80     	 strh r2,[r3]
 6655              	.L350:
1516:../cleanflight/src/main/io/osd.c ****         }
1517:../cleanflight/src/main/io/osd.c **** 
1518:../cleanflight/src/main/io/osd.c ****         armState = ARMING_FLAG(ARMED);
 6656              	 .loc 8 1518 0
 6657 0090 6C4B     	 ldr r3,.L363+4
 6658 0092 1B78     	 ldrb r3,[r3]
 6659 0094 03F00103 	 and r3,r3,#1
 6660 0098 DAB2     	 uxtb r2,r3
 6661 009a 694B     	 ldr r3,.L363
 6662 009c 1A70     	 strb r2,[r3]
 6663              	.L348:
1519:../cleanflight/src/main/io/osd.c ****     }
1520:../cleanflight/src/main/io/osd.c **** 
1521:../cleanflight/src/main/io/osd.c **** 
1522:../cleanflight/src/main/io/osd.c ****     if (ARMING_FLAG(ARMED)) {
 6664              	 .loc 8 1522 0
 6665 009e 694B     	 ldr r3,.L363+4
 6666 00a0 1B78     	 ldrb r3,[r3]
 6667 00a2 03F00103 	 and r3,r3,#1
 6668 00a6 002B     	 cmp r3,#0
 6669 00a8 13D0     	 beq .L352
 6670              	.LBB37:
1523:../cleanflight/src/main/io/osd.c ****         osdUpdateStats();
 6671              	 .loc 8 1523 0
 6672 00aa FFF7FEFF 	 bl osdUpdateStats
1524:../cleanflight/src/main/io/osd.c ****         timeUs_t deltaT = currentTimeUs - lastTimeUs;
 6673              	 .loc 8 1524 0
 6674 00ae 6B4B     	 ldr r3,.L363+28
 6675 00b0 1B68     	 ldr r3,[r3]
 6676 00b2 7A68     	 ldr r2,[r7,#4]
 6677 00b4 D31A     	 subs r3,r2,r3
 6678 00b6 FB60     	 str r3,[r7,#12]
1525:../cleanflight/src/main/io/osd.c ****         flyTime += deltaT;
 6679              	 .loc 8 1525 0
 6680 00b8 694B     	 ldr r3,.L363+32
 6681 00ba 1A68     	 ldr r2,[r3]
 6682 00bc FB68     	 ldr r3,[r7,#12]
 6683 00be 1344     	 add r3,r3,r2
 6684 00c0 674A     	 ldr r2,.L363+32
 6685 00c2 1360     	 str r3,[r2]
1526:../cleanflight/src/main/io/osd.c ****         stats.armed_time += deltaT;
 6686              	 .loc 8 1526 0
 6687 00c4 674B     	 ldr r3,.L363+36
 6688 00c6 1A68     	 ldr r2,[r3]
 6689 00c8 FB68     	 ldr r3,[r7,#12]
 6690 00ca 1344     	 add r3,r3,r2
 6691 00cc 654A     	 ldr r2,.L363+36
 6692 00ce 1360     	 str r3,[r2]
 6693              	.LBE37:
 6694 00d0 4FE0     	 b .L353
 6695              	.L352:
1527:../cleanflight/src/main/io/osd.c ****     } else if (osdStatsEnabled) {  // handle showing/hiding stats based on OSD disable switch posit
 6696              	 .loc 8 1527 0
 6697 00d2 5D4B     	 ldr r3,.L363+8
 6698 00d4 1B78     	 ldrb r3,[r3]
 6699 00d6 002B     	 cmp r3,#0
 6700 00d8 4BD0     	 beq .L353
1528:../cleanflight/src/main/io/osd.c ****         if (displayIsGrabbed(osdDisplayPort)) {
 6701              	 .loc 8 1528 0
 6702 00da 634B     	 ldr r3,.L363+40
 6703 00dc 1B68     	 ldr r3,[r3]
 6704 00de 1846     	 mov r0,r3
 6705 00e0 FFF7FEFF 	 bl displayIsGrabbed
 6706 00e4 0346     	 mov r3,r0
 6707 00e6 002B     	 cmp r3,#0
 6708 00e8 09D0     	 beq .L354
1529:../cleanflight/src/main/io/osd.c ****             osdStatsEnabled = false;
 6709              	 .loc 8 1529 0
 6710 00ea 574B     	 ldr r3,.L363+8
 6711 00ec 0022     	 movs r2,#0
 6712 00ee 1A70     	 strb r2,[r3]
1530:../cleanflight/src/main/io/osd.c ****             resumeRefreshAt = 0;
 6713              	 .loc 8 1530 0
 6714 00f0 574B     	 ldr r3,.L363+16
 6715 00f2 0022     	 movs r2,#0
 6716 00f4 1A60     	 str r2,[r3]
1531:../cleanflight/src/main/io/osd.c ****             stats.armed_time = 0;
 6717              	 .loc 8 1531 0
 6718 00f6 5B4B     	 ldr r3,.L363+36
 6719 00f8 0022     	 movs r2,#0
 6720 00fa 1A60     	 str r2,[r3]
 6721 00fc 39E0     	 b .L353
 6722              	.L354:
1532:../cleanflight/src/main/io/osd.c ****         } else {
1533:../cleanflight/src/main/io/osd.c ****             if (IS_RC_MODE_ACTIVE(BOXOSD) && osdStatsVisible) {
 6723              	 .loc 8 1533 0
 6724 00fe 1120     	 movs r0,#17
 6725 0100 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 6726 0104 0346     	 mov r3,r0
 6727 0106 002B     	 cmp r3,#0
 6728 0108 0CD0     	 beq .L355
 6729              	 .loc 8 1533 0 is_stmt 0 discriminator 1
 6730 010a 504B     	 ldr r3,.L363+12
 6731 010c 1B78     	 ldrb r3,[r3]
 6732 010e 002B     	 cmp r3,#0
 6733 0110 08D0     	 beq .L355
1534:../cleanflight/src/main/io/osd.c ****                 osdStatsVisible = false;
 6734              	 .loc 8 1534 0 is_stmt 1
 6735 0112 4E4B     	 ldr r3,.L363+12
 6736 0114 0022     	 movs r2,#0
 6737 0116 1A70     	 strb r2,[r3]
1535:../cleanflight/src/main/io/osd.c ****                 displayClearScreen(osdDisplayPort);
 6738              	 .loc 8 1535 0
 6739 0118 534B     	 ldr r3,.L363+40
 6740 011a 1B68     	 ldr r3,[r3]
 6741 011c 1846     	 mov r0,r3
 6742 011e FFF7FEFF 	 bl displayClearScreen
 6743 0122 26E0     	 b .L353
 6744              	.L355:
1536:../cleanflight/src/main/io/osd.c ****             } else if (!IS_RC_MODE_ACTIVE(BOXOSD)) {
 6745              	 .loc 8 1536 0
 6746 0124 1120     	 movs r0,#17
 6747 0126 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 6748 012a 0346     	 mov r3,r0
 6749 012c 83F00103 	 eor r3,r3,#1
 6750 0130 DBB2     	 uxtb r3,r3
 6751 0132 002B     	 cmp r3,#0
 6752 0134 1DD0     	 beq .L353
1537:../cleanflight/src/main/io/osd.c ****                 if (!osdStatsVisible) {
 6753              	 .loc 8 1537 0
 6754 0136 454B     	 ldr r3,.L363+12
 6755 0138 1B78     	 ldrb r3,[r3]
 6756 013a 83F00103 	 eor r3,r3,#1
 6757 013e DBB2     	 uxtb r3,r3
 6758 0140 002B     	 cmp r3,#0
 6759 0142 05D0     	 beq .L356
1538:../cleanflight/src/main/io/osd.c ****                     osdStatsVisible = true;
 6760              	 .loc 8 1538 0
 6761 0144 414B     	 ldr r3,.L363+12
 6762 0146 0122     	 movs r2,#1
 6763 0148 1A70     	 strb r2,[r3]
1539:../cleanflight/src/main/io/osd.c ****                     osdStatsRefreshTimeUs = 0;
 6764              	 .loc 8 1539 0
 6765 014a 484B     	 ldr r3,.L363+44
 6766 014c 0022     	 movs r2,#0
 6767 014e 1A60     	 str r2,[r3]
 6768              	.L356:
1540:../cleanflight/src/main/io/osd.c ****                 }
1541:../cleanflight/src/main/io/osd.c ****                 if (currentTimeUs >= osdStatsRefreshTimeUs) {
 6769              	 .loc 8 1541 0
 6770 0150 464B     	 ldr r3,.L363+44
 6771 0152 1B68     	 ldr r3,[r3]
 6772 0154 7A68     	 ldr r2,[r7,#4]
 6773 0156 9A42     	 cmp r2,r3
 6774 0158 0BD3     	 bcc .L353
1542:../cleanflight/src/main/io/osd.c ****                     osdStatsRefreshTimeUs = currentTimeUs + REFRESH_1S;
 6775              	 .loc 8 1542 0
 6776 015a 7B68     	 ldr r3,[r7,#4]
 6777 015c 03F57423 	 add r3,r3,#999424
 6778 0160 03F51073 	 add r3,r3,#576
 6779 0164 414A     	 ldr r2,.L363+44
 6780 0166 1360     	 str r3,[r2]
1543:../cleanflight/src/main/io/osd.c ****                     osdShowStats(endBatteryVoltage);
 6781              	 .loc 8 1543 0
 6782 0168 3B4B     	 ldr r3,.L363+24
 6783 016a 1B88     	 ldrh r3,[r3]
 6784 016c 1846     	 mov r0,r3
 6785 016e FFF7FEFF 	 bl osdShowStats
 6786              	.L353:
1544:../cleanflight/src/main/io/osd.c ****                 }
1545:../cleanflight/src/main/io/osd.c ****             }
1546:../cleanflight/src/main/io/osd.c ****         }
1547:../cleanflight/src/main/io/osd.c ****     }
1548:../cleanflight/src/main/io/osd.c ****     lastTimeUs = currentTimeUs;
 6787              	 .loc 8 1548 0
 6788 0172 3A4A     	 ldr r2,.L363+28
 6789 0174 7B68     	 ldr r3,[r7,#4]
 6790 0176 1360     	 str r3,[r2]
1549:../cleanflight/src/main/io/osd.c **** 
1550:../cleanflight/src/main/io/osd.c ****     if (resumeRefreshAt) {
 6791              	 .loc 8 1550 0
 6792 0178 354B     	 ldr r3,.L363+16
 6793 017a 1B68     	 ldr r3,[r3]
 6794 017c 002B     	 cmp r3,#0
 6795 017e 2DD0     	 beq .L357
1551:../cleanflight/src/main/io/osd.c ****         if (cmp32(currentTimeUs, resumeRefreshAt) < 0) {
 6796              	 .loc 8 1551 0
 6797 0180 334B     	 ldr r3,.L363+16
 6798 0182 1B68     	 ldr r3,[r3]
 6799 0184 7868     	 ldr r0,[r7,#4]
 6800 0186 1946     	 mov r1,r3
 6801 0188 FFF7FEFF 	 bl cmp32
 6802 018c 0346     	 mov r3,r0
 6803 018e 002B     	 cmp r3,#0
 6804 0190 16DA     	 bge .L358
1552:../cleanflight/src/main/io/osd.c ****             // in timeout period, check sticks for activity to resume display.
1553:../cleanflight/src/main/io/osd.c ****             if (IS_HI(THROTTLE) || IS_HI(PITCH)) {
 6805              	 .loc 8 1553 0
 6806 0192 374B     	 ldr r3,.L363+48
 6807 0194 DB88     	 ldrh r3,[r3,#6]
 6808 0196 1BB2     	 sxth r3,r3
 6809 0198 40F2D662 	 movw r2,#1750
 6810 019c 9342     	 cmp r3,r2
 6811 019e 06DC     	 bgt .L359
 6812              	 .loc 8 1553 0 is_stmt 0 discriminator 1
 6813 01a0 334B     	 ldr r3,.L363+48
 6814 01a2 5B88     	 ldrh r3,[r3,#2]
 6815 01a4 1BB2     	 sxth r3,r3
 6816 01a6 40F2D662 	 movw r2,#1750
 6817 01aa 9342     	 cmp r3,r2
 6818 01ac 02DD     	 ble .L360
 6819              	.L359:
1554:../cleanflight/src/main/io/osd.c ****                 resumeRefreshAt = currentTimeUs;
 6820              	 .loc 8 1554 0 is_stmt 1
 6821 01ae 284A     	 ldr r2,.L363+16
 6822 01b0 7B68     	 ldr r3,[r7,#4]
 6823 01b2 1360     	 str r3,[r2]
 6824              	.L360:
1555:../cleanflight/src/main/io/osd.c ****             }
1556:../cleanflight/src/main/io/osd.c ****             displayHeartbeat(osdDisplayPort);
 6825              	 .loc 8 1556 0
 6826 01b4 2C4B     	 ldr r3,.L363+40
 6827 01b6 1B68     	 ldr r3,[r3]
 6828 01b8 1846     	 mov r0,r3
 6829 01ba FFF7FEFF 	 bl displayHeartbeat
1557:../cleanflight/src/main/io/osd.c ****             return;
 6830              	 .loc 8 1557 0
 6831 01be 3BE0     	 b .L347
 6832              	.L358:
1558:../cleanflight/src/main/io/osd.c ****         } else {
1559:../cleanflight/src/main/io/osd.c ****             displayClearScreen(osdDisplayPort);
 6833              	 .loc 8 1559 0
 6834 01c0 294B     	 ldr r3,.L363+40
 6835 01c2 1B68     	 ldr r3,[r3]
 6836 01c4 1846     	 mov r0,r3
 6837 01c6 FFF7FEFF 	 bl displayClearScreen
1560:../cleanflight/src/main/io/osd.c ****             resumeRefreshAt = 0;
 6838              	 .loc 8 1560 0
 6839 01ca 214B     	 ldr r3,.L363+16
 6840 01cc 0022     	 movs r2,#0
 6841 01ce 1A60     	 str r2,[r3]
1561:../cleanflight/src/main/io/osd.c ****             osdStatsEnabled = false;
 6842              	 .loc 8 1561 0
 6843 01d0 1D4B     	 ldr r3,.L363+8
 6844 01d2 0022     	 movs r2,#0
 6845 01d4 1A70     	 strb r2,[r3]
1562:../cleanflight/src/main/io/osd.c ****             stats.armed_time = 0;
 6846              	 .loc 8 1562 0
 6847 01d6 234B     	 ldr r3,.L363+36
 6848 01d8 0022     	 movs r2,#0
 6849 01da 1A60     	 str r2,[r3]
 6850              	.L357:
1563:../cleanflight/src/main/io/osd.c ****         }
1564:../cleanflight/src/main/io/osd.c ****     }
1565:../cleanflight/src/main/io/osd.c **** 
1566:../cleanflight/src/main/io/osd.c ****     blinkState = (currentTimeUs / 200000) % 2;
 6851              	 .loc 8 1566 0
 6852 01dc 7B68     	 ldr r3,[r7,#4]
 6853 01de 9B09     	 lsrs r3,r3,#6
 6854 01e0 244A     	 ldr r2,.L363+52
 6855 01e2 A2FB0323 	 umull r2,r3,r2,r3
 6856 01e6 9B09     	 lsrs r3,r3,#6
 6857 01e8 03F00103 	 and r3,r3,#1
 6858 01ec 002B     	 cmp r3,#0
 6859 01ee 14BF     	 ite ne
 6860 01f0 0123     	 movne r3,#1
 6861 01f2 0023     	 moveq r3,#0
 6862 01f4 DAB2     	 uxtb r2,r3
 6863 01f6 204B     	 ldr r3,.L363+56
 6864 01f8 1A70     	 strb r2,[r3]
1567:../cleanflight/src/main/io/osd.c **** 
1568:../cleanflight/src/main/io/osd.c **** #ifdef USE_ESC_SENSOR
1569:../cleanflight/src/main/io/osd.c ****     if (feature(FEATURE_ESC_SENSOR)) {
1570:../cleanflight/src/main/io/osd.c ****         escDataCombined = getEscSensorData(ESC_SENSOR_COMBINED);
1571:../cleanflight/src/main/io/osd.c ****     }
1572:../cleanflight/src/main/io/osd.c **** #endif
1573:../cleanflight/src/main/io/osd.c **** 
1574:../cleanflight/src/main/io/osd.c **** #ifdef USE_CMS
1575:../cleanflight/src/main/io/osd.c ****     if (!displayIsGrabbed(osdDisplayPort)) {
 6865              	 .loc 8 1575 0
 6866 01fa 1B4B     	 ldr r3,.L363+40
 6867 01fc 1B68     	 ldr r3,[r3]
 6868 01fe 1846     	 mov r0,r3
 6869 0200 FFF7FEFF 	 bl displayIsGrabbed
 6870 0204 0346     	 mov r3,r0
 6871 0206 83F00103 	 eor r3,r3,#1
 6872 020a DBB2     	 uxtb r3,r3
 6873 020c 002B     	 cmp r3,#0
 6874 020e 08D0     	 beq .L362
1576:../cleanflight/src/main/io/osd.c ****         osdUpdateAlarms();
 6875              	 .loc 8 1576 0
 6876 0210 FFF7FEFF 	 bl osdUpdateAlarms
1577:../cleanflight/src/main/io/osd.c ****         osdDrawElements();
 6877              	 .loc 8 1577 0
 6878 0214 FFF7FEFF 	 bl osdDrawElements
1578:../cleanflight/src/main/io/osd.c ****         displayHeartbeat(osdDisplayPort);
 6879              	 .loc 8 1578 0
 6880 0218 134B     	 ldr r3,.L363+40
 6881 021a 1B68     	 ldr r3,[r3]
 6882 021c 1846     	 mov r0,r3
 6883 021e FFF7FEFF 	 bl displayHeartbeat
 6884              	.L362:
1579:../cleanflight/src/main/io/osd.c **** #ifdef OSD_CALLS_CMS
1580:../cleanflight/src/main/io/osd.c ****     } else {
1581:../cleanflight/src/main/io/osd.c ****         cmsUpdate(currentTimeUs);
1582:../cleanflight/src/main/io/osd.c **** #endif
1583:../cleanflight/src/main/io/osd.c ****     }
1584:../cleanflight/src/main/io/osd.c **** #endif
1585:../cleanflight/src/main/io/osd.c ****     lastArmState = ARMING_FLAG(ARMED);
 6885              	 .loc 8 1585 0
 6886 0222 084B     	 ldr r3,.L363+4
 6887 0224 1B78     	 ldrb r3,[r3]
 6888 0226 03F00103 	 and r3,r3,#1
 6889 022a 002B     	 cmp r3,#0
 6890 022c 14BF     	 ite ne
 6891 022e 0123     	 movne r3,#1
 6892 0230 0023     	 moveq r3,#0
 6893 0232 DAB2     	 uxtb r2,r3
 6894 0234 114B     	 ldr r3,.L363+60
 6895 0236 1A70     	 strb r2,[r3]
 6896              	.L347:
1586:../cleanflight/src/main/io/osd.c **** }
 6897              	 .loc 8 1586 0
 6898 0238 1037     	 adds r7,r7,#16
 6899              	.LCFI196:
 6900              	 .cfi_def_cfa_offset 8
 6901 023a BD46     	 mov sp,r7
 6902              	.LCFI197:
 6903              	 .cfi_def_cfa_register 13
 6904              	 
 6905 023c 80BD     	 pop {r7,pc}
 6906              	.L364:
 6907 023e 00BF     	 .align 2
 6908              	.L363:
 6909 0240 00000000 	 .word armState
 6910 0244 00000000 	 .word armingFlags
 6911 0248 00000000 	 .word osdStatsEnabled.16226
 6912 024c 00000000 	 .word osdStatsVisible.16227
 6913 0250 00000000 	 .word resumeRefreshAt
 6914 0254 00879303 	 .word 60000000
 6915 0258 00000000 	 .word endBatteryVoltage.16229
 6916 025c 00000000 	 .word lastTimeUs.16225
 6917 0260 00000000 	 .word flyTime
 6918 0264 00000000 	 .word stats
 6919 0268 00000000 	 .word osdDisplayPort
 6920 026c 00000000 	 .word osdStatsRefreshTimeUs.16228
 6921 0270 00000000 	 .word rcData
 6922 0274 632D3E05 	 .word 87960931
 6923 0278 00000000 	 .word blinkState
 6924 027c 00000000 	 .word lastArmState
 6925              	 .cfi_endproc
 6926              	.LFE631:
 6928              	 .section .text.osdUpdate,"ax",%progbits
 6929              	 .align 2
 6930              	 .global osdUpdate
 6931              	 .thumb
 6932              	 .thumb_func
 6934              	osdUpdate:
 6935              	.LFB632:
1587:../cleanflight/src/main/io/osd.c **** 
1588:../cleanflight/src/main/io/osd.c **** /*
1589:../cleanflight/src/main/io/osd.c ****  * Called periodically by the scheduler
1590:../cleanflight/src/main/io/osd.c ****  */
1591:../cleanflight/src/main/io/osd.c **** void osdUpdate(timeUs_t currentTimeUs)
1592:../cleanflight/src/main/io/osd.c **** {
 6936              	 .loc 8 1592 0
 6937              	 .cfi_startproc
 6938              	 
 6939              	 
 6940 0000 80B5     	 push {r7,lr}
 6941              	.LCFI198:
 6942              	 .cfi_def_cfa_offset 8
 6943              	 .cfi_offset 7,-8
 6944              	 .cfi_offset 14,-4
 6945 0002 82B0     	 sub sp,sp,#8
 6946              	.LCFI199:
 6947              	 .cfi_def_cfa_offset 16
 6948 0004 00AF     	 add r7,sp,#0
 6949              	.LCFI200:
 6950              	 .cfi_def_cfa_register 7
 6951 0006 7860     	 str r0,[r7,#4]
1593:../cleanflight/src/main/io/osd.c ****     static uint32_t counter = 0;
1594:../cleanflight/src/main/io/osd.c **** 
1595:../cleanflight/src/main/io/osd.c ****     if (isBeeperOn()) {
 6952              	 .loc 8 1595 0
 6953 0008 FFF7FEFF 	 bl isBeeperOn
 6954 000c 0346     	 mov r3,r0
 6955 000e 002B     	 cmp r3,#0
 6956 0010 02D0     	 beq .L366
1596:../cleanflight/src/main/io/osd.c ****         showVisualBeeper = true;
 6957              	 .loc 8 1596 0
 6958 0012 1A4B     	 ldr r3,.L371
 6959 0014 0122     	 movs r2,#1
 6960 0016 1A70     	 strb r2,[r3]
 6961              	.L366:
1597:../cleanflight/src/main/io/osd.c ****     }
1598:../cleanflight/src/main/io/osd.c **** 
1599:../cleanflight/src/main/io/osd.c **** #ifdef MAX7456_DMA_CHANNEL_TX
1600:../cleanflight/src/main/io/osd.c ****     // don't touch buffers if DMA transaction is in progress
1601:../cleanflight/src/main/io/osd.c ****     if (displayIsTransferInProgress(osdDisplayPort)) {
1602:../cleanflight/src/main/io/osd.c ****         return;
1603:../cleanflight/src/main/io/osd.c ****     }
1604:../cleanflight/src/main/io/osd.c **** #endif // MAX7456_DMA_CHANNEL_TX
1605:../cleanflight/src/main/io/osd.c **** 
1606:../cleanflight/src/main/io/osd.c **** #ifdef USE_SLOW_MSP_DISPLAYPORT_RATE_WHEN_UNARMED
1607:../cleanflight/src/main/io/osd.c ****     static uint32_t idlecounter = 0;
1608:../cleanflight/src/main/io/osd.c ****     if (!ARMING_FLAG(ARMED)) {
1609:../cleanflight/src/main/io/osd.c ****         if (idlecounter++ % 4 != 0) {
1610:../cleanflight/src/main/io/osd.c ****             return;
1611:../cleanflight/src/main/io/osd.c ****         }
1612:../cleanflight/src/main/io/osd.c ****     }
1613:../cleanflight/src/main/io/osd.c **** #endif
1614:../cleanflight/src/main/io/osd.c **** 
1615:../cleanflight/src/main/io/osd.c ****     // redraw values in buffer
1616:../cleanflight/src/main/io/osd.c **** #ifdef USE_MAX7456
1617:../cleanflight/src/main/io/osd.c **** #define DRAW_FREQ_DENOM 5
1618:../cleanflight/src/main/io/osd.c **** #else
1619:../cleanflight/src/main/io/osd.c **** #define DRAW_FREQ_DENOM 10 // MWOSD @ 115200 baud (
1620:../cleanflight/src/main/io/osd.c **** #endif
1621:../cleanflight/src/main/io/osd.c **** #define STATS_FREQ_DENOM    50
1622:../cleanflight/src/main/io/osd.c **** 
1623:../cleanflight/src/main/io/osd.c ****     if (counter % DRAW_FREQ_DENOM == 0) {
 6962              	 .loc 8 1623 0
 6963 0018 194B     	 ldr r3,.L371+4
 6964 001a 1968     	 ldr r1,[r3]
 6965 001c 194B     	 ldr r3,.L371+8
 6966 001e A3FB0123 	 umull r2,r3,r3,r1
 6967 0022 DA08     	 lsrs r2,r3,#3
 6968 0024 1346     	 mov r3,r2
 6969 0026 9B00     	 lsls r3,r3,#2
 6970 0028 1344     	 add r3,r3,r2
 6971 002a 5B00     	 lsls r3,r3,#1
 6972 002c CA1A     	 subs r2,r1,r3
 6973 002e 002A     	 cmp r2,#0
 6974 0030 06D1     	 bne .L367
1624:../cleanflight/src/main/io/osd.c ****         osdRefresh(currentTimeUs);
 6975              	 .loc 8 1624 0
 6976 0032 7868     	 ldr r0,[r7,#4]
 6977 0034 FFF7FEFF 	 bl osdRefresh
1625:../cleanflight/src/main/io/osd.c ****         showVisualBeeper = false;
 6978              	 .loc 8 1625 0
 6979 0038 104B     	 ldr r3,.L371
 6980 003a 0022     	 movs r2,#0
 6981 003c 1A70     	 strb r2,[r3]
 6982 003e 04E0     	 b .L368
 6983              	.L367:
1626:../cleanflight/src/main/io/osd.c ****     } else {
1627:../cleanflight/src/main/io/osd.c ****         // rest of time redraw screen 10 chars per idle so it doesn't lock the main idle
1628:../cleanflight/src/main/io/osd.c ****         displayDrawScreen(osdDisplayPort);
 6984              	 .loc 8 1628 0
 6985 0040 114B     	 ldr r3,.L371+12
 6986 0042 1B68     	 ldr r3,[r3]
 6987 0044 1846     	 mov r0,r3
 6988 0046 FFF7FEFF 	 bl displayDrawScreen
 6989              	.L368:
1629:../cleanflight/src/main/io/osd.c ****     }
1630:../cleanflight/src/main/io/osd.c ****     ++counter;
 6990              	 .loc 8 1630 0
 6991 004a 0D4B     	 ldr r3,.L371+4
 6992 004c 1B68     	 ldr r3,[r3]
 6993 004e 0133     	 adds r3,r3,#1
 6994 0050 0B4A     	 ldr r2,.L371+4
 6995 0052 1360     	 str r3,[r2]
1631:../cleanflight/src/main/io/osd.c **** 
1632:../cleanflight/src/main/io/osd.c **** #ifdef USE_CMS
1633:../cleanflight/src/main/io/osd.c ****     // do not allow ARM if we are in menu
1634:../cleanflight/src/main/io/osd.c ****     if (displayIsGrabbed(osdDisplayPort)) {
 6996              	 .loc 8 1634 0
 6997 0054 0C4B     	 ldr r3,.L371+12
 6998 0056 1B68     	 ldr r3,[r3]
 6999 0058 1846     	 mov r0,r3
 7000 005a FFF7FEFF 	 bl displayIsGrabbed
 7001 005e 0346     	 mov r3,r0
 7002 0060 002B     	 cmp r3,#0
 7003 0062 04D0     	 beq .L369
1635:../cleanflight/src/main/io/osd.c ****         setArmingDisabled(ARMING_DISABLED_OSD_MENU);
 7004              	 .loc 8 1635 0
 7005 0064 4FF48040 	 mov r0,#16384
 7006 0068 FFF7FEFF 	 bl setArmingDisabled
 7007 006c 03E0     	 b .L365
 7008              	.L369:
1636:../cleanflight/src/main/io/osd.c ****     } else {
1637:../cleanflight/src/main/io/osd.c ****         unsetArmingDisabled(ARMING_DISABLED_OSD_MENU);
 7009              	 .loc 8 1637 0
 7010 006e 4FF48040 	 mov r0,#16384
 7011 0072 FFF7FEFF 	 bl unsetArmingDisabled
 7012              	.L365:
1638:../cleanflight/src/main/io/osd.c ****     }
1639:../cleanflight/src/main/io/osd.c **** #endif
1640:../cleanflight/src/main/io/osd.c **** }
 7013              	 .loc 8 1640 0
 7014 0076 0837     	 adds r7,r7,#8
 7015              	.LCFI201:
 7016              	 .cfi_def_cfa_offset 8
 7017 0078 BD46     	 mov sp,r7
 7018              	.LCFI202:
 7019              	 .cfi_def_cfa_register 13
 7020              	 
 7021 007a 80BD     	 pop {r7,pc}
 7022              	.L372:
 7023              	 .align 2
 7024              	.L371:
 7025 007c 00000000 	 .word showVisualBeeper
 7026 0080 00000000 	 .word counter.16234
 7027 0084 CDCCCCCC 	 .word -858993459
 7028 0088 00000000 	 .word osdDisplayPort
 7029              	 .cfi_endproc
 7030              	.LFE632:
 7032              	 .section .rodata.coordinateMaxLength.16000,"a",%progbits
 7033              	 .align 2
 7036              	coordinateMaxLength.16000:
 7037 0000 0D000000 	 .word 13
 7038              	 .section .bss.osdStatsEnabled.16226,"aw",%nobits
 7041              	osdStatsEnabled.16226:
 7042 0000 00       	 .space 1
 7043              	 .section .bss.osdStatsVisible.16227,"aw",%nobits
 7046              	osdStatsVisible.16227:
 7047 0000 00       	 .space 1
 7048              	 .section .bss.endBatteryVoltage.16229,"aw",%nobits
 7049              	 .align 1
 7052              	endBatteryVoltage.16229:
 7053 0000 0000     	 .space 2
 7054              	 .section .bss.lastTimeUs.16225,"aw",%nobits
 7055              	 .align 2
 7058              	lastTimeUs.16225:
 7059 0000 00000000 	 .space 4
 7060              	 .section .bss.osdStatsRefreshTimeUs.16228,"aw",%nobits
 7061              	 .align 2
 7064              	osdStatsRefreshTimeUs.16228:
 7065 0000 00000000 	 .space 4
 7066              	 .section .bss.counter.16234,"aw",%nobits
 7067              	 .align 2
 7070              	counter.16234:
 7071 0000 00000000 	 .space 4
 7072              	 .text
 7073              	.Letext0:
 7074              	 .file 9 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 7075              	 .file 10 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 7076              	 .file 11 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 7077              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/xmc4700.h"
 7078              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 7079              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/platform.h"
 7080              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 7081              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 7082              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 7083              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/display.h"
 7084              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 7085              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 7086              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/flash.h"
 7087              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 7088              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/sdcard.h"
 7089              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/fc_core.h"
 7090              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 7091              	 .file 26 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_adjustments.h"
 7092              	 .file 27 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
 7093              	 .file 28 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 7094              	 .file 29 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/imu.h"
 7095              	 .file 30 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/pid.h"
 7096              	 .file 31 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/asyncfatfs/asyncfatfs.h"
 7097              	 .file 32 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/gps.h"
 7098              	 .file 33 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/vtx_common.h"
 7099              	 .file 34 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
 7100              	 .file 35 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 7101              	 .file 36 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus_i2c.h"
 7102              	 .file 37 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus.h"
 7103              	 .file 38 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/sensor.h"
 7104              	 .file 39 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro.h"
 7105              	 .file 40 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/accgyro/accgyro_mpu.h"
 7106              	 .file 41 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/gyro.h"
 7107              	 .file 42 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/sensors.h"
 7108              	 .file 43 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/acceleration.h"
 7109              	 .file 44 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/barometer.h"
 7110              	 .file 45 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
 7111              	 .file 46 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
 7112              	 .file 47 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/esc_sensor.h"
 7113              	 .file 48 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 7114              	 .file 49 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
 7115              	 .file 50 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/cms/cms.h"
 7116              	 .file 51 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx_string.h"
DEFINED SYMBOLS
                            *ABS*:00000000 osd.c
    {standard input}:20     .text.cmp32:00000000 $t
    {standard input}:24     .text.cmp32:00000000 cmp32
    {standard input}:65     .text.blackboxConfig:00000000 $t
    {standard input}:69     .text.blackboxConfig:00000000 blackboxConfig
    {standard input}:99     .text.blackboxConfig:00000010 $d
                            *COM*:00000004 pCurrentDisplay
    {standard input}:105    .text.constrain:00000000 $t
    {standard input}:109    .text.constrain:00000000 constrain
    {standard input}:169    .text.pilotConfig:00000000 $t
    {standard input}:173    .text.pilotConfig:00000000 pilotConfig
    {standard input}:203    .text.pilotConfig:00000010 $d
    {standard input}:208    .text.osdConfig:00000000 $t
    {standard input}:212    .text.osdConfig:00000000 osdConfig
    {standard input}:242    .text.osdConfig:00000010 $d
                            *COM*:0000006e osdConfig_System
    {standard input}:247    .text.osdConfigMutable:00000000 $t
    {standard input}:251    .text.osdConfigMutable:00000000 osdConfigMutable
    {standard input}:280    .text.osdConfigMutable:00000010 $d
    {standard input}:285    .text.vtxSettingsConfig:00000000 $t
    {standard input}:289    .text.vtxSettingsConfig:00000000 vtxSettingsConfig
    {standard input}:319    .text.vtxSettingsConfig:00000010 $d
    {standard input}:324    .text.batteryConfig:00000000 $t
    {standard input}:328    .text.batteryConfig:00000000 batteryConfig
    {standard input}:358    .text.batteryConfig:00000010 $d
    {standard input}:377    .rodata.osdTimerSourceNames:00000000 osdTimerSourceNames
    {standard input}:364    .rodata:00000000 $d
    {standard input}:374    .rodata.osdTimerSourceNames:00000000 $d
    {standard input}:384    .data.blinkState:00000000 blinkState
    {standard input}:389    .bss.showVisualBeeper:00000000 showVisualBeeper
    {standard input}:390    .bss.showVisualBeeper:00000000 $d
    {standard input}:392    .bss.blinkBits:00000000 $d
    {standard input}:395    .bss.blinkBits:00000000 blinkBits
    {standard input}:398    .bss.flyTime:00000000 $d
    {standard input}:401    .bss.flyTime:00000000 flyTime
    {standard input}:404    .bss.stats:00000000 $d
    {standard input}:407    .bss.stats:00000000 stats
    {standard input}:414    .bss.resumeRefreshAt:00000000 resumeRefreshAt
    {standard input}:411    .bss.resumeRefreshAt:00000000 $d
    {standard input}:419    .bss.armState:00000000 armState
    {standard input}:420    .bss.armState:00000000 $d
    {standard input}:424    .bss.lastArmState:00000000 lastArmState
    {standard input}:425    .bss.lastArmState:00000000 $d
    {standard input}:427    .bss.osdDisplayPort:00000000 $d
    {standard input}:430    .bss.osdDisplayPort:00000000 osdDisplayPort
    {standard input}:433    .rodata.compassBar:00000000 $d
    {standard input}:436    .rodata.compassBar:00000000 compassBar
    {standard input}:462    .rodata.osdElementDisplayOrder:00000000 $d
    {standard input}:465    .rodata.osdElementDisplayOrder:00000000 osdElementDisplayOrder
                            *COM*:0000006e osdConfig_Copy
    {standard input}:503    .pg_registry:00000000 osdConfig_Registry
    {standard input}:500    .pg_registry:00000000 $d
    {standard input}:4099   .text.pgResetFn_osdConfig:00000000 pgResetFn_osdConfig
    {standard input}:511    .text.osdGetMetersToSelectedUnitSymbol:00000000 $t
    {standard input}:515    .text.osdGetMetersToSelectedUnitSymbol:00000000 osdGetMetersToSelectedUnitSymbol
    {standard input}:550    .text.osdGetBatteryAverageCellVoltage:00000000 $t
    {standard input}:554    .text.osdGetBatteryAverageCellVoltage:00000000 osdGetBatteryAverageCellVoltage
    {standard input}:589    .text.osdGetBatterySymbol:00000000 $t
    {standard input}:593    .text.osdGetBatterySymbol:00000000 osdGetBatterySymbol
    {standard input}:674    .text.osdGetMetersToSelectedUnit:00000000 $t
    {standard input}:678    .text.osdGetMetersToSelectedUnit:00000000 osdGetMetersToSelectedUnit
    {standard input}:729    .text.osdGetMetersToSelectedUnit:00000038 $d
    {standard input}:738    .text.osdFormatAltitudeString:00000000 $t
    {standard input}:742    .text.osdFormatAltitudeString:00000000 osdFormatAltitudeString
    {standard input}:801    .text.osdFormatAltitudeString:00000048 $d
    {standard input}:811    .text.osdFormatPID:00000000 $t
    {standard input}:815    .text.osdFormatPID:00000000 osdFormatPID
    {standard input}:864    .text.osdFormatPID:00000034 $d
    {standard input}:869    .text.osdGetHeadingIntoDiscreteDirections:00000000 $t
    {standard input}:873    .text.osdGetHeadingIntoDiscreteDirections:00000000 osdGetHeadingIntoDiscreteDirections
    {standard input}:934    .text.osdGetHeadingIntoDiscreteDirections:0000004c $d
    {standard input}:939    .text.osdGetDirectionSymbolFromHeading:00000000 $t
    {standard input}:943    .text.osdGetDirectionSymbolFromHeading:00000000 osdGetDirectionSymbolFromHeading
    {standard input}:1001   .text.osdGetDirectionSymbolFromHeading:00000044 $d
    {standard input}:1006   .text.osdGetTimerSymbol:00000000 $t
    {standard input}:1010   .text.osdGetTimerSymbol:00000000 osdGetTimerSymbol
    {standard input}:1068   .text.osdGetTimerValue:00000000 $t
    {standard input}:1072   .text.osdGetTimerValue:00000000 osdGetTimerValue
    {standard input}:1130   .text.osdGetTimerValue:00000038 $d
    {standard input}:1143   .text.osdFormatTime:00000000 $t
    {standard input}:1147   .text.osdFormatTime:00000000 osdFormatTime
    {standard input}:1247   .text.osdFormatTime:00000090 $d
    {standard input}:1257   .text.osdFormatTimer:00000000 $t
    {standard input}:1261   .text.osdFormatTimer:00000000 osdFormatTimer
    {standard input}:1360   .text.osdFormatCoordinate:00000000 $t
    {standard input}:1364   .text.osdFormatCoordinate:00000000 osdFormatCoordinate
    {standard input}:1463   .text.osdFormatCoordinate:00000088 $d
    {standard input}:1470   .text.osdFormatRtcDateTime:00000000 $t
    {standard input}:1474   .text.osdFormatRtcDateTime:00000000 osdFormatRtcDateTime
    {standard input}:1531   .text.osdFormatMessage:00000000 $t
    {standard input}:1535   .text.osdFormatMessage:00000000 osdFormatMessage
    {standard input}:1593   .text.osdStatSetState:00000000 $t
    {standard input}:1598   .text.osdStatSetState:00000000 osdStatSetState
    {standard input}:1659   .text.osdStatGetState:00000000 $t
    {standard input}:1664   .text.osdStatGetState:00000000 osdStatGetState
    {standard input}:1710   .text.osdWarnSetState:00000000 $t
    {standard input}:1715   .text.osdWarnSetState:00000000 osdWarnSetState
    {standard input}:1789   .text.osdWarnGetState:00000000 $t
    {standard input}:1794   .text.osdWarnGetState:00000000 osdWarnGetState
    {standard input}:1969   .text.osdDrawSingleElement:00000000 $t
    {standard input}:1973   .text.osdDrawSingleElement:00000000 osdDrawSingleElement
    {standard input}:2080   .text.osdDrawSingleElement:000000c4 $d
    {standard input}:2123   .text.osdDrawSingleElement:00000170 $t
    {standard input}:2386   .text.osdDrawSingleElement:0000037c $d
    {standard input}:2407   .text.osdDrawSingleElement:000003c8 $t
    {standard input}:2800   .text.osdDrawSingleElement:000006e8 $d
    {standard input}:2823   .text.osdDrawSingleElement:0000073c $t
    {standard input}:3163   .text.osdDrawSingleElement:000009fc $d
    {standard input}:3175   .text.osdDrawSingleElement:00000a20 $t
    {standard input}:3567   .text.osdDrawSingleElement:00000d3c $d
    {standard input}:3592   .text.osdDrawSingleElement:00000d94 $t
    {standard input}:3954   .text.osdDrawSingleElement:00001054 $d
    {standard input}:3973   .text.osdDrawElements:00000000 $t
    {standard input}:3977   .text.osdDrawElements:00000000 osdDrawElements
    {standard input}:4088   .text.osdDrawElements:00000098 $d
    {standard input}:4094   .text.pgResetFn_osdConfig:00000000 $t
    {standard input}:4576   .text.osdDrawLogo:00000000 $t
    {standard input}:4580   .text.osdDrawLogo:00000000 osdDrawLogo
    {standard input}:4673   .text.osdDrawLogo:00000068 $d
    {standard input}:4694   .text.osdInit:00000000 $t
    {standard input}:4699   .text.osdInit:00000000 osdInit
    {standard input}:4830   .text.osdInit:000000dc $d
    {standard input}:4844   .text.osdInitialized:00000000 $t
    {standard input}:4849   .text.osdInitialized:00000000 osdInitialized
    {standard input}:4885   .text.osdInitialized:0000001c $d
    {standard input}:4890   .text.osdUpdateAlarms:00000000 $t
    {standard input}:4895   .text.osdUpdateAlarms:00000000 osdUpdateAlarms
    {standard input}:5234   .text.osdUpdateAlarms:00000254 $d
    {standard input}:5243   .text.osdResetAlarms:00000000 $t
    {standard input}:5248   .text.osdResetAlarms:00000000 osdResetAlarms
    {standard input}:5347   .text.osdResetAlarms:0000009c $d
    {standard input}:5352   .text.osdResetStats:00000000 $t
    {standard input}:5356   .text.osdResetStats:00000000 osdResetStats
    {standard input}:5411   .text.osdResetStats:00000038 $d
    {standard input}:5416   .text.osdUpdateStats:00000000 $t
    {standard input}:5420   .text.osdUpdateStats:00000000 osdUpdateStats
    {standard input}:5602   .text.osdUpdateStats:00000120 $d
    {standard input}:5620   .text.osdGetBlackboxStatusString:00000000 $t
    {standard input}:5624   .text.osdGetBlackboxStatusString:00000000 osdGetBlackboxStatusString
    {standard input}:5752   .text.osdGetBlackboxStatusString:000000b4 $d
    {standard input}:5763   .text.osdDisplayStatisticLabel:00000000 $t
    {standard input}:5767   .text.osdDisplayStatisticLabel:00000000 osdDisplayStatisticLabel
    {standard input}:5827   .text.osdDisplayStatisticLabel:0000004c $d
    {standard input}:5833   .text.isSomeStatEnabled:00000000 $t
    {standard input}:5837   .text.isSomeStatEnabled:00000000 isSomeStatEnabled
    {standard input}:5916   .text.osdShowStats:00000000 $t
    {standard input}:5920   .text.osdShowStats:00000000 osdShowStats
    {standard input}:6318   .text.osdShowStats:00000368 $d
    {standard input}:6338   .text.osdShowStats:000003ac $t
    {standard input}:6504   .text.osdShowStats:00000510 $d
    {standard input}:6520   .text.osdShowArmed:00000000 $t
    {standard input}:6524   .text.osdShowArmed:00000000 osdShowArmed
    {standard input}:6556   .text.osdShowArmed:00000020 $d
    {standard input}:6562   .text.osdRefresh:00000000 $t
    {standard input}:6566   .text.osdRefresh:00000000 osdRefresh
    {standard input}:6909   .text.osdRefresh:00000240 $d
    {standard input}:7041   .bss.osdStatsEnabled.16226:00000000 osdStatsEnabled.16226
    {standard input}:7046   .bss.osdStatsVisible.16227:00000000 osdStatsVisible.16227
    {standard input}:7052   .bss.endBatteryVoltage.16229:00000000 endBatteryVoltage.16229
    {standard input}:7058   .bss.lastTimeUs.16225:00000000 lastTimeUs.16225
    {standard input}:7064   .bss.osdStatsRefreshTimeUs.16228:00000000 osdStatsRefreshTimeUs.16228
    {standard input}:6929   .text.osdUpdate:00000000 $t
    {standard input}:6934   .text.osdUpdate:00000000 osdUpdate
    {standard input}:7025   .text.osdUpdate:0000007c $d
    {standard input}:7070   .bss.counter.16234:00000000 counter.16234
    {standard input}:7033   .rodata.coordinateMaxLength.16000:00000000 $d
    {standard input}:7036   .rodata.coordinateMaxLength.16000:00000000 coordinateMaxLength.16000
    {standard input}:7042   .bss.osdStatsEnabled.16226:00000000 $d
    {standard input}:7047   .bss.osdStatsVisible.16227:00000000 $d
    {standard input}:7049   .bss.endBatteryVoltage.16229:00000000 $d
    {standard input}:7055   .bss.lastTimeUs.16225:00000000 $d
    {standard input}:7061   .bss.osdStatsRefreshTimeUs.16228:00000000 $d
    {standard input}:7067   .bss.counter.16234:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
blackboxConfig_System
pilotConfig_System
vtxSettingsConfig_System
batteryConfig_System
getBatteryVoltage
getBatteryCellCount
getBatteryState
scaleRange
tfp_sprintf
micros
rtcGetDateTime
dateTimeFormatLocalShort
memset
strlen
memcpy
__aeabi_i2d
__aeabi_dmul
__aeabi_dcmplt
getRssi
getAmperage
getMAhDrawn
gpsSol
stateFlags
GPS_distanceToHome
GPS_directionToHome
attitude
getEstimatedAltitude
IS_RC_MODE_ACTIVE
isAirmodeActive
pidOsdAntiGravityActive
toupper
flightModeFlags
vtxCommonDevice
vtxCommonGetPowerIndex
displayWriteChar
rcData
vtx58BandLetter
vtx58ChannelNames
sqrtf
getCurrentPidProfileIndex
getCurrentControlRateProfileIndex
isFlipOverAfterCrashMode
isArmingDisabled
getArmingDisableFlags
rcSmoothingInitializationComplete
getBatteryAverageCellVoltage
accAverage
acc
currentPidProfile
armingDisableFlagNames
armingFlags
ceilf
getEstimatedVario
getAdjustmentsRangeName
getAdjustmentsRangeValue
displayWrite
debug
displayClearScreen
sensors
cmsDisplayPortRegister
displayResync
getRssiPercent
sdcard_isInserted
sdcard_isFunctional
afatfs_getFilesystemState
sdcard_getMetadata
afatfs_getContiguousFreeSpace
itoa
blackboxGetLogNumber
displayIsGrabbed
displayHeartbeat
isBeeperOn
displayDrawScreen
setArmingDisabled
unsetArmingDisabled
