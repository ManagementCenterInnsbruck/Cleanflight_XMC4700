   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "serial.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.serialPinConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	serialPinConfig:
  25              	.LFB531:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #include "drivers/io.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #include "pg/pg.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef enum {
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     MODE_RX = 1 << 0,
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     MODE_TX = 1 << 1,
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     MODE_RXTX = MODE_RX | MODE_TX
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** } portMode_e;
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef enum {
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_NOT_INVERTED  = 0 << 0,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_INVERTED      = 1 << 0,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_STOPBITS_1    = 0 << 1,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_STOPBITS_2    = 1 << 1,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_PARITY_NO     = 0 << 2,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_PARITY_EVEN   = 1 << 2,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_UNIDIR        = 0 << 3,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_BIDIR         = 1 << 3,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     /*
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * Note on SERIAL_BIDIR_PP
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * With SERIAL_BIDIR_PP, the very first start bit of back-to-back bytes
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * is lost and the first data byte will be lost by a framing error.
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * To ensure the first start bit to be sent, prepend a zero byte (0x00)
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * to actual data bytes.
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      */
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_BIDIR_OD        = 0 << 4,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_BIDIR_PP        = 1 << 4,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_BIDIR_NOPULL    = 1 << 5, // disable pulls in BIDIR RX mode
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** } portOptions_e;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** // Define known line control states which may be passed up by underlying serial driver callback
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #define CTRL_LINE_STATE_DTR (1 << 0)
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #define CTRL_LINE_STATE_RTS (1 << 1)
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef void (*serialReceiveCallbackPtr)(uint16_t data, void *rxCallbackData);   // used by serial 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef struct serialPort_s {
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     const struct serialPortVTable *vTable;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     portMode_e mode;
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     portOptions_e options;
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t baudRate;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t rxBufferSize;
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t txBufferSize;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     volatile uint8_t *rxBuffer;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     volatile uint8_t *txBuffer;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t rxBufferHead;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t rxBufferTail;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t txBufferHead;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t txBufferTail;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     serialReceiveCallbackPtr rxCallback;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     void *rxCallbackData;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint8_t identifier;
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** } serialPort_t;
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #if defined(USE_SOFTSERIAL1) || defined(USE_SOFTSERIAL2)
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** # ifdef USE_SOFTSERIAL2
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #  define SERIAL_PORT_MAX_INDEX (RESOURCE_SOFT_OFFSET + 2)
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** # else
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #  define SERIAL_PORT_MAX_INDEX (RESOURCE_SOFT_OFFSET + 1)
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** # endif
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #else
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** # define SERIAL_PORT_MAX_INDEX RESOURCE_SOFT_OFFSET
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #endif
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef struct serialPinConfig_s {
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     ioTag_t ioTagTx[SERIAL_PORT_MAX_INDEX];
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     ioTag_t ioTagRx[SERIAL_PORT_MAX_INDEX];
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     ioTag_t ioTagInverter[SERIAL_PORT_MAX_INDEX];
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** } serialPinConfig_t;
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** PG_DECLARE(serialPinConfig_t, serialPinConfig);
  27              	 .loc 1 100 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 100 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word serialPinConfig_System
  55              	 .cfi_endproc
  56              	.LFE531:
  58              	 .section .text.serialConfig,"ax",%progbits
  59              	 .align 2
  60              	 .thumb
  61              	 .thumb_func
  63              	serialConfig:
  64              	.LFB535:
  65              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include <stdbool.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include "drivers/serial.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_UNUSED = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_NOT_SHARED,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_SHARED
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } portSharing_e;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_NONE                = 0,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_MSP                 = (1 << 0),  // 1
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_GPS                 = (1 << 1),  // 2
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_FRSKY_HUB = (1 << 2),  // 4
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_HOTT      = (1 << 3),  // 8
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_LTM       = (1 << 4),  // 16
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_SMARTPORT = (1 << 5),  // 32
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_RX_SERIAL           = (1 << 6),  // 64
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_BLACKBOX            = (1 << 7),  // 128
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_MAVLINK   = (1 << 9),  // 512
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_ESC_SENSOR          = (1 << 10), // 1024
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_VTX_SMARTAUDIO      = (1 << 11), // 2048
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_IBUS      = (1 << 12), // 4096
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_VTX_TRAMP           = (1 << 13), // 8192
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_RCDEVICE            = (1 << 14), // 16384
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_LIDAR_TF            = (1 << 15), // 32768
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortFunction_e;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK (FUNCTION_TELEMETRY_FRSKY_HUB | FUNCTION_TELEMETRY_
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define TELEMETRY_PORT_FUNCTIONS_MASK (TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK | FUNCTION_TELEMETRY
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_AUTO = 0,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_9600,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_19200,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_38400,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_57600,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_115200,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_230400,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_250000,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_400000,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_460800,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_500000,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_921600,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_1000000,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_1500000,
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_2000000,
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_2470000
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } baudRate_e;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** extern const uint32_t baudRates[];
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // serial port identifiers are now fixed, these values are used by MSP commands.
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_NONE = -1,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART1 = 0,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART2,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART3,
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_UART4,
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_UART5,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART6,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART7,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART8,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USB_VCP = 20,
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_SOFTSERIAL1 = 30,
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_SOFTSERIAL2,
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS1 = 40,
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS2,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS3,
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS4,
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS5,
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS6,
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortIdentifier_e;
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** extern const serialPortIdentifier_e serialPortIdentifiers[SERIAL_PORT_COUNT];
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define SERIAL_PORT_IDENTIFIER_TO_INDEX(x) (((x) <= SERIAL_PORT_USART8) ? (x) : (RESOURCE_SOFT_OFFS
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define SERIAL_PORT_IDENTIFIER_TO_UARTDEV(x) ((x) - SERIAL_PORT_USART1 + UARTDEV_1)
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // runtime
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialPortUsage_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPort_t *serialPort;
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortFunction_e function;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortIdentifier_e identifier;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortUsage_t;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** serialPort_t *findSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // configuration
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialPortConfig_s {
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint16_t functionMask;
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortIdentifier_e identifier;
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t msp_baudrateIndex;
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t gps_baudrateIndex;
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t blackbox_baudrateIndex;
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t telemetry_baudrateIndex; // not used for all telemetry systems, e.g. HoTT only works at
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortConfig_t;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialConfig_s {
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortConfig_t portConfigs[SERIAL_PORT_COUNT];
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint16_t serial_update_rate_hz;
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t reboot_character;               // which byte is used to reboot. Default 'R', could be 
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialConfig_t;
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** PG_DECLARE(serialConfig_t, serialConfig);
  66              	 .loc 2 135 0
  67              	 .cfi_startproc
  68              	 
  69              	 
  70              	 
  71 0000 80B4     	 push {r7}
  72              	.LCFI4:
  73              	 .cfi_def_cfa_offset 4
  74              	 .cfi_offset 7,-4
  75 0002 00AF     	 add r7,sp,#0
  76              	.LCFI5:
  77              	 .cfi_def_cfa_register 7
  78              	 .loc 2 135 0
  79 0004 024B     	 ldr r3,.L7
  80 0006 1846     	 mov r0,r3
  81 0008 BD46     	 mov sp,r7
  82              	.LCFI6:
  83              	 .cfi_def_cfa_register 13
  84              	 
  85 000a 5DF8047B 	 ldr r7,[sp],#4
  86              	.LCFI7:
  87              	 .cfi_restore 7
  88              	 .cfi_def_cfa_offset 0
  89 000e 7047     	 bx lr
  90              	.L8:
  91              	 .align 2
  92              	.L7:
  93 0010 00000000 	 .word serialConfig_System
  94              	 .cfi_endproc
  95              	.LFE535:
  97              	 .section .text.serialConfigMutable,"ax",%progbits
  98              	 .align 2
  99              	 .thumb
 100              	 .thumb_func
 102              	serialConfigMutable:
 103              	.LFB536:
 104              	 .loc 2 135 0
 105              	 .cfi_startproc
 106              	 
 107              	 
 108              	 
 109 0000 80B4     	 push {r7}
 110              	.LCFI8:
 111              	 .cfi_def_cfa_offset 4
 112              	 .cfi_offset 7,-4
 113 0002 00AF     	 add r7,sp,#0
 114              	.LCFI9:
 115              	 .cfi_def_cfa_register 7
 116              	 .loc 2 135 0
 117 0004 024B     	 ldr r3,.L11
 118 0006 1846     	 mov r0,r3
 119 0008 BD46     	 mov sp,r7
 120              	.LCFI10:
 121              	 .cfi_def_cfa_register 13
 122              	 
 123 000a 5DF8047B 	 ldr r7,[sp],#4
 124              	.LCFI11:
 125              	 .cfi_restore 7
 126              	 .cfi_def_cfa_offset 0
 127 000e 7047     	 bx lr
 128              	.L12:
 129              	 .align 2
 130              	.L11:
 131 0010 00000000 	 .word serialConfig_System
 132              	 .cfi_endproc
 133              	.LFE536:
 135              	 .section .bss.serialPortUsageList,"aw",%nobits
 136              	 .align 2
 139              	serialPortUsageList:
 140 0000 00000000 	 .space 35
 140      00000000 
 140      00000000 
 140      00000000 
 140      00000000 
 141              	 .global serialPortIdentifiers
 142 0023 00       	 .section .rodata.serialPortIdentifiers,"a",%progbits
 143              	 .align 2
 146              	serialPortIdentifiers:
 147 0000 14       	 .byte 20
 148 0001 00       	 .byte 0
 149 0002 03       	 .byte 3
 150 0003 05       	 .byte 5
 151 0004 2A       	 .byte 42
 152 0005 000000   	 .section .bss.serialPortCount,"aw",%nobits
 155              	serialPortCount:
 156 0000 00       	 .space 1
 157              	 .global baudRates
 158              	 .section .rodata.baudRates,"a",%progbits
 159              	 .align 2
 162              	baudRates:
 163 0000 00000000 	 .word 0
 164 0004 80250000 	 .word 9600
 165 0008 004B0000 	 .word 19200
 166 000c 00960000 	 .word 38400
 167 0010 00E10000 	 .word 57600
 168 0014 00C20100 	 .word 115200
 169 0018 00840300 	 .word 230400
 170 001c 90D00300 	 .word 250000
 171 0020 801A0600 	 .word 400000
 172 0024 00080700 	 .word 460800
 173 0028 20A10700 	 .word 500000
 174 002c 00100E00 	 .word 921600
 175 0030 40420F00 	 .word 1000000
 176 0034 60E31600 	 .word 1500000
 177 0038 80841E00 	 .word 2000000
 178 003c 70B02500 	 .word 2470000
 179              	 .comm serialConfig_System,38,4
 180              	 .comm serialConfig_Copy,38,4
 181              	 .global serialConfig_Registry
 182              	 .section .pg_registry,"a",%progbits
 183              	 .align 2
 186              	serialConfig_Registry:
 187 0000 0D00     	 .short 13
 188 0002 2600     	 .short 38
 189 0004 00000000 	 .word serialConfig_System
 190 0008 00000000 	 .word serialConfig_Copy
 191 000c 00000000 	 .word 0
 192 0010 00000000 	 .word pgResetFn_serialConfig
 193              	 .section .text.pgResetFn_serialConfig,"ax",%progbits
 194              	 .align 2
 195              	 .global pgResetFn_serialConfig
 196              	 .thumb
 197              	 .thumb_func
 199              	pgResetFn_serialConfig:
 200              	.LFB539:
 201              	 .file 3 "../cleanflight/src/main/io/serial.c"
   1:../cleanflight/src/main/io/serial.c **** /*
   2:../cleanflight/src/main/io/serial.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/io/serial.c ****  *
   4:../cleanflight/src/main/io/serial.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/io/serial.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/io/serial.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/io/serial.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/io/serial.c ****  * any later version.
   9:../cleanflight/src/main/io/serial.c ****  *
  10:../cleanflight/src/main/io/serial.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/io/serial.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/io/serial.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/io/serial.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/io/serial.c ****  *
  15:../cleanflight/src/main/io/serial.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/io/serial.c ****  * along with this software.
  17:../cleanflight/src/main/io/serial.c ****  *
  18:../cleanflight/src/main/io/serial.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/io/serial.c ****  */
  20:../cleanflight/src/main/io/serial.c **** 
  21:../cleanflight/src/main/io/serial.c **** #include <stdbool.h>
  22:../cleanflight/src/main/io/serial.c **** #include <stdint.h>
  23:../cleanflight/src/main/io/serial.c **** #include <string.h>
  24:../cleanflight/src/main/io/serial.c **** 
  25:../cleanflight/src/main/io/serial.c **** #include "platform.h"
  26:../cleanflight/src/main/io/serial.c **** 
  27:../cleanflight/src/main/io/serial.c **** #include "build/build_config.h"
  28:../cleanflight/src/main/io/serial.c **** 
  29:../cleanflight/src/main/io/serial.c **** #include "common/utils.h"
  30:../cleanflight/src/main/io/serial.c **** 
  31:../cleanflight/src/main/io/serial.c **** #include "pg/pg.h"
  32:../cleanflight/src/main/io/serial.c **** #include "pg/pg_ids.h"
  33:../cleanflight/src/main/io/serial.c **** 
  34:../cleanflight/src/main/io/serial.c **** #include "fc/config.h"
  35:../cleanflight/src/main/io/serial.c **** 
  36:../cleanflight/src/main/io/serial.c **** #include "drivers/time.h"
  37:../cleanflight/src/main/io/serial.c **** #include "drivers/system.h"
  38:../cleanflight/src/main/io/serial.c **** #include "drivers/serial.h"
  39:../cleanflight/src/main/io/serial.c **** #include "drivers/serial_uart.h"
  40:../cleanflight/src/main/io/serial.c **** #if defined(USE_SOFTSERIAL1) || defined(USE_SOFTSERIAL2)
  41:../cleanflight/src/main/io/serial.c **** #include "drivers/serial_softserial.h"
  42:../cleanflight/src/main/io/serial.c **** #endif
  43:../cleanflight/src/main/io/serial.c **** 
  44:../cleanflight/src/main/io/serial.c **** #if defined(USE_SPIS_DEVICE_1) || defined(USE_SPIS_DEVICE_2) || defined(USE_SPIS_DEVICE_3) || defin
  45:../cleanflight/src/main/io/serial.c **** #include "drivers/serial_spi_slave.h"
  46:../cleanflight/src/main/io/serial.c **** #endif
  47:../cleanflight/src/main/io/serial.c **** 
  48:../cleanflight/src/main/io/serial.c **** #if defined(SIMULATOR_BUILD)
  49:../cleanflight/src/main/io/serial.c **** #include "drivers/serial_tcp.h"
  50:../cleanflight/src/main/io/serial.c **** #endif
  51:../cleanflight/src/main/io/serial.c **** 
  52:../cleanflight/src/main/io/serial.c **** #include "drivers/light_led.h"
  53:../cleanflight/src/main/io/serial.c **** 
  54:../cleanflight/src/main/io/serial.c **** #if defined(USE_VCP)
  55:../cleanflight/src/main/io/serial.c **** #include "drivers/serial_usb_vcp.h"
  56:../cleanflight/src/main/io/serial.c **** #endif
  57:../cleanflight/src/main/io/serial.c **** 
  58:../cleanflight/src/main/io/serial.c **** #include "io/serial.h"
  59:../cleanflight/src/main/io/serial.c **** 
  60:../cleanflight/src/main/io/serial.c **** #include "interface/cli.h"
  61:../cleanflight/src/main/io/serial.c **** 
  62:../cleanflight/src/main/io/serial.c **** #include "msp/msp_serial.h"
  63:../cleanflight/src/main/io/serial.c **** 
  64:../cleanflight/src/main/io/serial.c **** #ifdef USE_TELEMETRY
  65:../cleanflight/src/main/io/serial.c **** #include "telemetry/telemetry.h"
  66:../cleanflight/src/main/io/serial.c **** #endif
  67:../cleanflight/src/main/io/serial.c **** 
  68:../cleanflight/src/main/io/serial.c **** #include "pg/pinio.h"
  69:../cleanflight/src/main/io/serial.c **** 
  70:../cleanflight/src/main/io/serial.c **** static serialPortUsage_t serialPortUsageList[SERIAL_PORT_COUNT];
  71:../cleanflight/src/main/io/serial.c **** 
  72:../cleanflight/src/main/io/serial.c **** const serialPortIdentifier_e serialPortIdentifiers[SERIAL_PORT_COUNT] = {
  73:../cleanflight/src/main/io/serial.c **** #ifdef USE_VCP
  74:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_USB_VCP,
  75:../cleanflight/src/main/io/serial.c **** #endif
  76:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART1
  77:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_USART1,
  78:../cleanflight/src/main/io/serial.c **** #endif
  79:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART2
  80:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_USART2,
  81:../cleanflight/src/main/io/serial.c **** #endif
  82:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART3
  83:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_USART3,
  84:../cleanflight/src/main/io/serial.c **** #endif
  85:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART4
  86:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_UART4,
  87:../cleanflight/src/main/io/serial.c **** #endif
  88:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART5
  89:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_UART5,
  90:../cleanflight/src/main/io/serial.c **** #endif
  91:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART6
  92:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_USART6,
  93:../cleanflight/src/main/io/serial.c **** #endif
  94:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART7
  95:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_USART7,
  96:../cleanflight/src/main/io/serial.c **** #endif
  97:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART8
  98:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_USART8,
  99:../cleanflight/src/main/io/serial.c **** #endif
 100:../cleanflight/src/main/io/serial.c **** #ifdef USE_SOFTSERIAL1
 101:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_SOFTSERIAL1,
 102:../cleanflight/src/main/io/serial.c **** #endif
 103:../cleanflight/src/main/io/serial.c **** #ifdef USE_SOFTSERIAL2
 104:../cleanflight/src/main/io/serial.c ****     SERIAL_PORT_SOFTSERIAL2,
 105:../cleanflight/src/main/io/serial.c **** #endif
 106:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_1
 107:../cleanflight/src/main/io/serial.c **** 	SERIAL_PORT_SPIS1,
 108:../cleanflight/src/main/io/serial.c **** #endif
 109:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_2
 110:../cleanflight/src/main/io/serial.c **** 	SERIAL_PORT_SPIS2,
 111:../cleanflight/src/main/io/serial.c **** #endif
 112:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_3
 113:../cleanflight/src/main/io/serial.c **** 	SERIAL_PORT_SPIS3,
 114:../cleanflight/src/main/io/serial.c **** #endif
 115:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_4
 116:../cleanflight/src/main/io/serial.c **** 	SERIAL_PORT_SPIS4,
 117:../cleanflight/src/main/io/serial.c **** #endif
 118:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_5
 119:../cleanflight/src/main/io/serial.c **** 	SERIAL_PORT_SPIS5,
 120:../cleanflight/src/main/io/serial.c **** #endif
 121:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_6
 122:../cleanflight/src/main/io/serial.c **** 	SERIAL_PORT_SPIS6,
 123:../cleanflight/src/main/io/serial.c **** #endif
 124:../cleanflight/src/main/io/serial.c **** };
 125:../cleanflight/src/main/io/serial.c **** 
 126:../cleanflight/src/main/io/serial.c **** static uint8_t serialPortCount;
 127:../cleanflight/src/main/io/serial.c **** 
 128:../cleanflight/src/main/io/serial.c **** const uint32_t baudRates[] = {0, 9600, 19200, 38400, 57600, 115200, 230400, 250000,
 129:../cleanflight/src/main/io/serial.c ****         400000, 460800, 500000, 921600, 1000000, 1500000, 2000000, 2470000}; // see baudRate_e
 130:../cleanflight/src/main/io/serial.c **** 
 131:../cleanflight/src/main/io/serial.c **** #define BAUD_RATE_COUNT (sizeof(baudRates) / sizeof(baudRates[0]))
 132:../cleanflight/src/main/io/serial.c **** 
 133:../cleanflight/src/main/io/serial.c **** PG_REGISTER_WITH_RESET_FN(serialConfig_t, serialConfig, PG_SERIAL_CONFIG, 0);
 134:../cleanflight/src/main/io/serial.c **** 
 135:../cleanflight/src/main/io/serial.c **** void pgResetFn_serialConfig(serialConfig_t *serialConfig)
 136:../cleanflight/src/main/io/serial.c **** {
 202              	 .loc 3 136 0
 203              	 .cfi_startproc
 204              	 
 205              	 
 206 0000 80B5     	 push {r7,lr}
 207              	.LCFI12:
 208              	 .cfi_def_cfa_offset 8
 209              	 .cfi_offset 7,-8
 210              	 .cfi_offset 14,-4
 211 0002 84B0     	 sub sp,sp,#16
 212              	.LCFI13:
 213              	 .cfi_def_cfa_offset 24
 214 0004 00AF     	 add r7,sp,#0
 215              	.LCFI14:
 216              	 .cfi_def_cfa_register 7
 217 0006 7860     	 str r0,[r7,#4]
 137:../cleanflight/src/main/io/serial.c ****     memset(serialConfig, 0, sizeof(serialConfig_t));
 218              	 .loc 3 137 0
 219 0008 7868     	 ldr r0,[r7,#4]
 220 000a 0021     	 movs r1,#0
 221 000c 2622     	 movs r2,#38
 222 000e FFF7FEFF 	 bl memset
 223              	.LBB2:
 138:../cleanflight/src/main/io/serial.c **** 
 139:../cleanflight/src/main/io/serial.c ****     for (int i = 0; i < SERIAL_PORT_COUNT; i++) {
 224              	 .loc 3 139 0
 225 0012 0023     	 movs r3,#0
 226 0014 FB60     	 str r3,[r7,#12]
 227 0016 2EE0     	 b .L14
 228              	.L15:
 140:../cleanflight/src/main/io/serial.c ****         serialConfig->portConfigs[i].identifier = serialPortIdentifiers[i];
 229              	 .loc 3 140 0 discriminator 3
 230 0018 2B4A     	 ldr r2,.L17
 231 001a FB68     	 ldr r3,[r7,#12]
 232 001c 1344     	 add r3,r3,r2
 233 001e 1878     	 ldrb r0,[r3]
 234 0020 7968     	 ldr r1,[r7,#4]
 235 0022 FA68     	 ldr r2,[r7,#12]
 236 0024 1346     	 mov r3,r2
 237 0026 DB00     	 lsls r3,r3,#3
 238 0028 9B1A     	 subs r3,r3,r2
 239 002a 0B44     	 add r3,r3,r1
 240 002c 0246     	 mov r2,r0
 241 002e 9A70     	 strb r2,[r3,#2]
 141:../cleanflight/src/main/io/serial.c ****         serialConfig->portConfigs[i].msp_baudrateIndex = BAUD_115200;
 242              	 .loc 3 141 0 discriminator 3
 243 0030 7968     	 ldr r1,[r7,#4]
 244 0032 FA68     	 ldr r2,[r7,#12]
 245 0034 1346     	 mov r3,r2
 246 0036 DB00     	 lsls r3,r3,#3
 247 0038 9B1A     	 subs r3,r3,r2
 248 003a 0B44     	 add r3,r3,r1
 249 003c 0522     	 movs r2,#5
 250 003e DA70     	 strb r2,[r3,#3]
 142:../cleanflight/src/main/io/serial.c ****         serialConfig->portConfigs[i].gps_baudrateIndex = BAUD_57600;
 251              	 .loc 3 142 0 discriminator 3
 252 0040 7968     	 ldr r1,[r7,#4]
 253 0042 FA68     	 ldr r2,[r7,#12]
 254 0044 1346     	 mov r3,r2
 255 0046 DB00     	 lsls r3,r3,#3
 256 0048 9B1A     	 subs r3,r3,r2
 257 004a 0B44     	 add r3,r3,r1
 258 004c 0422     	 movs r2,#4
 259 004e 1A71     	 strb r2,[r3,#4]
 143:../cleanflight/src/main/io/serial.c ****         serialConfig->portConfigs[i].telemetry_baudrateIndex = BAUD_AUTO;
 260              	 .loc 3 143 0 discriminator 3
 261 0050 7968     	 ldr r1,[r7,#4]
 262 0052 FA68     	 ldr r2,[r7,#12]
 263 0054 1346     	 mov r3,r2
 264 0056 DB00     	 lsls r3,r3,#3
 265 0058 9B1A     	 subs r3,r3,r2
 266 005a 0B44     	 add r3,r3,r1
 267 005c 0022     	 movs r2,#0
 268 005e 9A71     	 strb r2,[r3,#6]
 144:../cleanflight/src/main/io/serial.c ****         serialConfig->portConfigs[i].blackbox_baudrateIndex = BAUD_115200;
 269              	 .loc 3 144 0 discriminator 3
 270 0060 7968     	 ldr r1,[r7,#4]
 271 0062 FA68     	 ldr r2,[r7,#12]
 272 0064 1346     	 mov r3,r2
 273 0066 DB00     	 lsls r3,r3,#3
 274 0068 9B1A     	 subs r3,r3,r2
 275 006a 0B44     	 add r3,r3,r1
 276 006c 0522     	 movs r2,#5
 277 006e 5A71     	 strb r2,[r3,#5]
 139:../cleanflight/src/main/io/serial.c ****         serialConfig->portConfigs[i].identifier = serialPortIdentifiers[i];
 278              	 .loc 3 139 0 discriminator 3
 279 0070 FB68     	 ldr r3,[r7,#12]
 280 0072 0133     	 adds r3,r3,#1
 281 0074 FB60     	 str r3,[r7,#12]
 282              	.L14:
 139:../cleanflight/src/main/io/serial.c ****         serialConfig->portConfigs[i].identifier = serialPortIdentifiers[i];
 283              	 .loc 3 139 0 is_stmt 0 discriminator 1
 284 0076 FB68     	 ldr r3,[r7,#12]
 285 0078 042B     	 cmp r3,#4
 286 007a CDDD     	 ble .L15
 287              	.LBE2:
 145:../cleanflight/src/main/io/serial.c ****     }
 146:../cleanflight/src/main/io/serial.c **** 
 147:../cleanflight/src/main/io/serial.c ****     serialConfig->portConfigs[0].functionMask = FUNCTION_MSP;
 288              	 .loc 3 147 0 is_stmt 1
 289 007c 7B68     	 ldr r3,[r7,#4]
 290 007e 0022     	 movs r2,#0
 291 0080 42F00102 	 orr r2,r2,#1
 292 0084 1A70     	 strb r2,[r3]
 293 0086 0022     	 movs r2,#0
 294 0088 5A70     	 strb r2,[r3,#1]
 148:../cleanflight/src/main/io/serial.c **** 
 149:../cleanflight/src/main/io/serial.c **** #ifdef SERIALRX_UART
 150:../cleanflight/src/main/io/serial.c ****     serialPortConfig_t *serialRxUartConfig = serialFindPortConfiguration(SERIALRX_UART);
 295              	 .loc 3 150 0
 296 008a 0520     	 movs r0,#5
 297 008c FFF7FEFF 	 bl serialFindPortConfiguration
 298 0090 B860     	 str r0,[r7,#8]
 151:../cleanflight/src/main/io/serial.c ****     if (serialRxUartConfig) {
 299              	 .loc 3 151 0
 300 0092 BB68     	 ldr r3,[r7,#8]
 301 0094 002B     	 cmp r3,#0
 302 0096 06D0     	 beq .L16
 152:../cleanflight/src/main/io/serial.c ****         serialRxUartConfig->functionMask = FUNCTION_RX_SERIAL;
 303              	 .loc 3 152 0
 304 0098 BB68     	 ldr r3,[r7,#8]
 305 009a 0022     	 movs r2,#0
 306 009c 42F04002 	 orr r2,r2,#64
 307 00a0 1A70     	 strb r2,[r3]
 308 00a2 0022     	 movs r2,#0
 309 00a4 5A70     	 strb r2,[r3,#1]
 310              	.L16:
 153:../cleanflight/src/main/io/serial.c ****     }
 154:../cleanflight/src/main/io/serial.c **** #endif
 155:../cleanflight/src/main/io/serial.c **** 
 156:../cleanflight/src/main/io/serial.c **** #if defined(TELEMETRY_UART) && defined(TELEMETRY_PROVIDER_DEFAULT)
 157:../cleanflight/src/main/io/serial.c ****     serialPortConfig_t *serialTelemetryConfig = serialFindPortConfiguration(TELEMETRY_UART);
 158:../cleanflight/src/main/io/serial.c ****     if (serialTelemetryConfig) {
 159:../cleanflight/src/main/io/serial.c ****         serialTelemetryConfig->functionMask = TELEMETRY_PROVIDER_DEFAULT;
 160:../cleanflight/src/main/io/serial.c ****     }
 161:../cleanflight/src/main/io/serial.c **** #endif
 162:../cleanflight/src/main/io/serial.c **** 
 163:../cleanflight/src/main/io/serial.c **** #if defined(GPS_UART)
 164:../cleanflight/src/main/io/serial.c ****     serialPortConfig_t *serialGPSConfig = serialFindPortConfiguration(GPS_UART);
 165:../cleanflight/src/main/io/serial.c ****     if (serialGPSConfig) {
 166:../cleanflight/src/main/io/serial.c ****         serialGPSConfig->functionMask = FUNCTION_GPS;
 167:../cleanflight/src/main/io/serial.c ****     }
 168:../cleanflight/src/main/io/serial.c **** #endif
 169:../cleanflight/src/main/io/serial.c **** 
 170:../cleanflight/src/main/io/serial.c **** #ifdef SBUS_TELEMETRY_UART
 171:../cleanflight/src/main/io/serial.c ****     serialPortConfig_t *serialTlemetryUartConfig = serialFindPortConfiguration(SBUS_TELEMETRY_UART)
 172:../cleanflight/src/main/io/serial.c ****     if (serialTlemetryUartConfig) {
 173:../cleanflight/src/main/io/serial.c ****         serialTlemetryUartConfig->functionMask = FUNCTION_TELEMETRY_SMARTPORT;
 174:../cleanflight/src/main/io/serial.c ****     }
 175:../cleanflight/src/main/io/serial.c **** #endif
 176:../cleanflight/src/main/io/serial.c **** 
 177:../cleanflight/src/main/io/serial.c **** #if defined(USE_VCP) && defined(USE_MSP_UART)
 178:../cleanflight/src/main/io/serial.c ****     if (serialConfig->portConfigs[0].identifier == SERIAL_PORT_USB_VCP) {
 179:../cleanflight/src/main/io/serial.c ****         serialPortConfig_t * uart1Config = serialFindPortConfiguration(SERIAL_PORT_USART1);
 180:../cleanflight/src/main/io/serial.c ****         if (uart1Config) {
 181:../cleanflight/src/main/io/serial.c ****             uart1Config->functionMask = FUNCTION_MSP;
 182:../cleanflight/src/main/io/serial.c ****         }
 183:../cleanflight/src/main/io/serial.c ****     }
 184:../cleanflight/src/main/io/serial.c **** #endif
 185:../cleanflight/src/main/io/serial.c **** 
 186:../cleanflight/src/main/io/serial.c ****     serialConfig->reboot_character = 'R';
 311              	 .loc 3 186 0
 312 00a6 7B68     	 ldr r3,[r7,#4]
 313 00a8 5222     	 movs r2,#82
 314 00aa 83F82520 	 strb r2,[r3,#37]
 187:../cleanflight/src/main/io/serial.c ****     serialConfig->serial_update_rate_hz = 100;
 315              	 .loc 3 187 0
 316 00ae 7B68     	 ldr r3,[r7,#4]
 317 00b0 0022     	 movs r2,#0
 318 00b2 42F06402 	 orr r2,r2,#100
 319 00b6 83F82320 	 strb r2,[r3,#35]
 320 00ba 0022     	 movs r2,#0
 321 00bc 83F82420 	 strb r2,[r3,#36]
 188:../cleanflight/src/main/io/serial.c **** }
 322              	 .loc 3 188 0
 323 00c0 1037     	 adds r7,r7,#16
 324              	.LCFI15:
 325              	 .cfi_def_cfa_offset 8
 326 00c2 BD46     	 mov sp,r7
 327              	.LCFI16:
 328              	 .cfi_def_cfa_register 13
 329              	 
 330 00c4 80BD     	 pop {r7,pc}
 331              	.L18:
 332 00c6 00BF     	 .align 2
 333              	.L17:
 334 00c8 00000000 	 .word serialPortIdentifiers
 335              	 .cfi_endproc
 336              	.LFE539:
 338              	 .section .text.lookupBaudRateIndex,"ax",%progbits
 339              	 .align 2
 340              	 .global lookupBaudRateIndex
 341              	 .thumb
 342              	 .thumb_func
 344              	lookupBaudRateIndex:
 345              	.LFB540:
 189:../cleanflight/src/main/io/serial.c **** 
 190:../cleanflight/src/main/io/serial.c **** baudRate_e lookupBaudRateIndex(uint32_t baudRate)
 191:../cleanflight/src/main/io/serial.c **** {
 346              	 .loc 3 191 0
 347              	 .cfi_startproc
 348              	 
 349              	 
 350              	 
 351 0000 80B4     	 push {r7}
 352              	.LCFI17:
 353              	 .cfi_def_cfa_offset 4
 354              	 .cfi_offset 7,-4
 355 0002 85B0     	 sub sp,sp,#20
 356              	.LCFI18:
 357              	 .cfi_def_cfa_offset 24
 358 0004 00AF     	 add r7,sp,#0
 359              	.LCFI19:
 360              	 .cfi_def_cfa_register 7
 361 0006 7860     	 str r0,[r7,#4]
 192:../cleanflight/src/main/io/serial.c ****     uint8_t index;
 193:../cleanflight/src/main/io/serial.c **** 
 194:../cleanflight/src/main/io/serial.c ****     for (index = 0; index < BAUD_RATE_COUNT; index++) {
 362              	 .loc 3 194 0
 363 0008 0023     	 movs r3,#0
 364 000a FB73     	 strb r3,[r7,#15]
 365 000c 0BE0     	 b .L20
 366              	.L23:
 195:../cleanflight/src/main/io/serial.c ****         if (baudRates[index] == baudRate) {
 367              	 .loc 3 195 0
 368 000e FB7B     	 ldrb r3,[r7,#15]
 369 0010 0A4A     	 ldr r2,.L24
 370 0012 52F82320 	 ldr r2,[r2,r3,lsl#2]
 371 0016 7B68     	 ldr r3,[r7,#4]
 372 0018 9A42     	 cmp r2,r3
 373 001a 01D1     	 bne .L21
 196:../cleanflight/src/main/io/serial.c ****             return index;
 374              	 .loc 3 196 0
 375 001c FB7B     	 ldrb r3,[r7,#15]
 376 001e 06E0     	 b .L22
 377              	.L21:
 194:../cleanflight/src/main/io/serial.c ****         if (baudRates[index] == baudRate) {
 378              	 .loc 3 194 0 discriminator 2
 379 0020 FB7B     	 ldrb r3,[r7,#15]
 380 0022 0133     	 adds r3,r3,#1
 381 0024 FB73     	 strb r3,[r7,#15]
 382              	.L20:
 194:../cleanflight/src/main/io/serial.c ****         if (baudRates[index] == baudRate) {
 383              	 .loc 3 194 0 is_stmt 0 discriminator 1
 384 0026 FB7B     	 ldrb r3,[r7,#15]
 385 0028 0F2B     	 cmp r3,#15
 386 002a F0D9     	 bls .L23
 197:../cleanflight/src/main/io/serial.c ****         }
 198:../cleanflight/src/main/io/serial.c ****     }
 199:../cleanflight/src/main/io/serial.c ****     return BAUD_AUTO;
 387              	 .loc 3 199 0 is_stmt 1
 388 002c 0023     	 movs r3,#0
 389              	.L22:
 200:../cleanflight/src/main/io/serial.c **** }
 390              	 .loc 3 200 0
 391 002e 1846     	 mov r0,r3
 392 0030 1437     	 adds r7,r7,#20
 393              	.LCFI20:
 394              	 .cfi_def_cfa_offset 4
 395 0032 BD46     	 mov sp,r7
 396              	.LCFI21:
 397              	 .cfi_def_cfa_register 13
 398              	 
 399 0034 5DF8047B 	 ldr r7,[sp],#4
 400              	.LCFI22:
 401              	 .cfi_restore 7
 402              	 .cfi_def_cfa_offset 0
 403 0038 7047     	 bx lr
 404              	.L25:
 405 003a 00BF     	 .align 2
 406              	.L24:
 407 003c 00000000 	 .word baudRates
 408              	 .cfi_endproc
 409              	.LFE540:
 411              	 .section .text.findSerialPortIndexByIdentifier,"ax",%progbits
 412              	 .align 2
 413              	 .global findSerialPortIndexByIdentifier
 414              	 .thumb
 415              	 .thumb_func
 417              	findSerialPortIndexByIdentifier:
 418              	.LFB541:
 201:../cleanflight/src/main/io/serial.c **** 
 202:../cleanflight/src/main/io/serial.c **** int findSerialPortIndexByIdentifier(serialPortIdentifier_e identifier)
 203:../cleanflight/src/main/io/serial.c **** {
 419              	 .loc 3 203 0
 420              	 .cfi_startproc
 421              	 
 422              	 
 423              	 
 424 0000 80B4     	 push {r7}
 425              	.LCFI23:
 426              	 .cfi_def_cfa_offset 4
 427              	 .cfi_offset 7,-4
 428 0002 85B0     	 sub sp,sp,#20
 429              	.LCFI24:
 430              	 .cfi_def_cfa_offset 24
 431 0004 00AF     	 add r7,sp,#0
 432              	.LCFI25:
 433              	 .cfi_def_cfa_register 7
 434 0006 0346     	 mov r3,r0
 435 0008 FB71     	 strb r3,[r7,#7]
 436              	.LBB3:
 204:../cleanflight/src/main/io/serial.c ****     for (int index = 0; index < SERIAL_PORT_COUNT; index++) {
 437              	 .loc 3 204 0
 438 000a 0023     	 movs r3,#0
 439 000c FB60     	 str r3,[r7,#12]
 440 000e 0DE0     	 b .L27
 441              	.L30:
 205:../cleanflight/src/main/io/serial.c ****         if (serialPortIdentifiers[index] == identifier) {
 442              	 .loc 3 205 0
 443 0010 0C4A     	 ldr r2,.L31
 444 0012 FB68     	 ldr r3,[r7,#12]
 445 0014 1344     	 add r3,r3,r2
 446 0016 1B78     	 ldrb r3,[r3]
 447 0018 97F90720 	 ldrsb r2,[r7,#7]
 448 001c 5BB2     	 sxtb r3,r3
 449 001e 9A42     	 cmp r2,r3
 450 0020 01D1     	 bne .L28
 206:../cleanflight/src/main/io/serial.c ****             return index;
 451              	 .loc 3 206 0
 452 0022 FB68     	 ldr r3,[r7,#12]
 453 0024 07E0     	 b .L29
 454              	.L28:
 204:../cleanflight/src/main/io/serial.c ****     for (int index = 0; index < SERIAL_PORT_COUNT; index++) {
 455              	 .loc 3 204 0 discriminator 2
 456 0026 FB68     	 ldr r3,[r7,#12]
 457 0028 0133     	 adds r3,r3,#1
 458 002a FB60     	 str r3,[r7,#12]
 459              	.L27:
 204:../cleanflight/src/main/io/serial.c ****     for (int index = 0; index < SERIAL_PORT_COUNT; index++) {
 460              	 .loc 3 204 0 is_stmt 0 discriminator 1
 461 002c FB68     	 ldr r3,[r7,#12]
 462 002e 042B     	 cmp r3,#4
 463 0030 EEDD     	 ble .L30
 464              	.LBE3:
 207:../cleanflight/src/main/io/serial.c ****         }
 208:../cleanflight/src/main/io/serial.c ****     }
 209:../cleanflight/src/main/io/serial.c ****     return -1;
 465              	 .loc 3 209 0 is_stmt 1
 466 0032 4FF0FF33 	 mov r3,#-1
 467              	.L29:
 210:../cleanflight/src/main/io/serial.c **** }
 468              	 .loc 3 210 0
 469 0036 1846     	 mov r0,r3
 470 0038 1437     	 adds r7,r7,#20
 471              	.LCFI26:
 472              	 .cfi_def_cfa_offset 4
 473 003a BD46     	 mov sp,r7
 474              	.LCFI27:
 475              	 .cfi_def_cfa_register 13
 476              	 
 477 003c 5DF8047B 	 ldr r7,[sp],#4
 478              	.LCFI28:
 479              	 .cfi_restore 7
 480              	 .cfi_def_cfa_offset 0
 481 0040 7047     	 bx lr
 482              	.L32:
 483 0042 00BF     	 .align 2
 484              	.L31:
 485 0044 00000000 	 .word serialPortIdentifiers
 486              	 .cfi_endproc
 487              	.LFE541:
 489              	 .section .text.findSerialPortUsageByIdentifier,"ax",%progbits
 490              	 .align 2
 491              	 .global findSerialPortUsageByIdentifier
 492              	 .thumb
 493              	 .thumb_func
 495              	findSerialPortUsageByIdentifier:
 496              	.LFB542:
 211:../cleanflight/src/main/io/serial.c **** 
 212:../cleanflight/src/main/io/serial.c **** serialPortUsage_t *findSerialPortUsageByIdentifier(serialPortIdentifier_e identifier)
 213:../cleanflight/src/main/io/serial.c **** {
 497              	 .loc 3 213 0
 498              	 .cfi_startproc
 499              	 
 500              	 
 501              	 
 502 0000 80B4     	 push {r7}
 503              	.LCFI29:
 504              	 .cfi_def_cfa_offset 4
 505              	 .cfi_offset 7,-4
 506 0002 85B0     	 sub sp,sp,#20
 507              	.LCFI30:
 508              	 .cfi_def_cfa_offset 24
 509 0004 00AF     	 add r7,sp,#0
 510              	.LCFI31:
 511              	 .cfi_def_cfa_register 7
 512 0006 0346     	 mov r3,r0
 513 0008 FB71     	 strb r3,[r7,#7]
 214:../cleanflight/src/main/io/serial.c ****     uint8_t index;
 215:../cleanflight/src/main/io/serial.c ****     for (index = 0; index < SERIAL_PORT_COUNT; index++) {
 514              	 .loc 3 215 0
 515 000a 0023     	 movs r3,#0
 516 000c FB73     	 strb r3,[r7,#15]
 517 000e 12E0     	 b .L34
 518              	.L37:
 519              	.LBB4:
 216:../cleanflight/src/main/io/serial.c ****         serialPortUsage_t *candidate = &serialPortUsageList[index];
 520              	 .loc 3 216 0
 521 0010 FA7B     	 ldrb r2,[r7,#15]
 522 0012 1346     	 mov r3,r2
 523 0014 DB00     	 lsls r3,r3,#3
 524 0016 9B1A     	 subs r3,r3,r2
 525 0018 0C4A     	 ldr r2,.L38
 526 001a 1344     	 add r3,r3,r2
 527 001c BB60     	 str r3,[r7,#8]
 217:../cleanflight/src/main/io/serial.c ****         if (candidate->identifier == identifier) {
 528              	 .loc 3 217 0
 529 001e BB68     	 ldr r3,[r7,#8]
 530 0020 9B79     	 ldrb r3,[r3,#6]
 531 0022 97F90720 	 ldrsb r2,[r7,#7]
 532 0026 5BB2     	 sxtb r3,r3
 533 0028 9A42     	 cmp r2,r3
 534 002a 01D1     	 bne .L35
 218:../cleanflight/src/main/io/serial.c ****             return candidate;
 535              	 .loc 3 218 0
 536 002c BB68     	 ldr r3,[r7,#8]
 537 002e 06E0     	 b .L36
 538              	.L35:
 539              	.LBE4:
 215:../cleanflight/src/main/io/serial.c ****         serialPortUsage_t *candidate = &serialPortUsageList[index];
 540              	 .loc 3 215 0 discriminator 2
 541 0030 FB7B     	 ldrb r3,[r7,#15]
 542 0032 0133     	 adds r3,r3,#1
 543 0034 FB73     	 strb r3,[r7,#15]
 544              	.L34:
 215:../cleanflight/src/main/io/serial.c ****         serialPortUsage_t *candidate = &serialPortUsageList[index];
 545              	 .loc 3 215 0 is_stmt 0 discriminator 1
 546 0036 FB7B     	 ldrb r3,[r7,#15]
 547 0038 042B     	 cmp r3,#4
 548 003a E9D9     	 bls .L37
 219:../cleanflight/src/main/io/serial.c ****         }
 220:../cleanflight/src/main/io/serial.c ****     }
 221:../cleanflight/src/main/io/serial.c ****     return NULL;
 549              	 .loc 3 221 0 is_stmt 1
 550 003c 0023     	 movs r3,#0
 551              	.L36:
 222:../cleanflight/src/main/io/serial.c **** }
 552              	 .loc 3 222 0
 553 003e 1846     	 mov r0,r3
 554 0040 1437     	 adds r7,r7,#20
 555              	.LCFI32:
 556              	 .cfi_def_cfa_offset 4
 557 0042 BD46     	 mov sp,r7
 558              	.LCFI33:
 559              	 .cfi_def_cfa_register 13
 560              	 
 561 0044 5DF8047B 	 ldr r7,[sp],#4
 562              	.LCFI34:
 563              	 .cfi_restore 7
 564              	 .cfi_def_cfa_offset 0
 565 0048 7047     	 bx lr
 566              	.L39:
 567 004a 00BF     	 .align 2
 568              	.L38:
 569 004c 00000000 	 .word serialPortUsageList
 570              	 .cfi_endproc
 571              	.LFE542:
 573              	 .section .text.findSerialPortUsageByPort,"ax",%progbits
 574              	 .align 2
 575              	 .global findSerialPortUsageByPort
 576              	 .thumb
 577              	 .thumb_func
 579              	findSerialPortUsageByPort:
 580              	.LFB543:
 223:../cleanflight/src/main/io/serial.c **** 
 224:../cleanflight/src/main/io/serial.c **** serialPortUsage_t *findSerialPortUsageByPort(serialPort_t *serialPort) {
 581              	 .loc 3 224 0
 582              	 .cfi_startproc
 583              	 
 584              	 
 585              	 
 586 0000 80B4     	 push {r7}
 587              	.LCFI35:
 588              	 .cfi_def_cfa_offset 4
 589              	 .cfi_offset 7,-4
 590 0002 85B0     	 sub sp,sp,#20
 591              	.LCFI36:
 592              	 .cfi_def_cfa_offset 24
 593 0004 00AF     	 add r7,sp,#0
 594              	.LCFI37:
 595              	 .cfi_def_cfa_register 7
 596 0006 7860     	 str r0,[r7,#4]
 225:../cleanflight/src/main/io/serial.c ****     uint8_t index;
 226:../cleanflight/src/main/io/serial.c ****     for (index = 0; index < SERIAL_PORT_COUNT; index++) {
 597              	 .loc 3 226 0
 598 0008 0023     	 movs r3,#0
 599 000a FB73     	 strb r3,[r7,#15]
 600 000c 10E0     	 b .L41
 601              	.L44:
 602              	.LBB5:
 227:../cleanflight/src/main/io/serial.c ****         serialPortUsage_t *candidate = &serialPortUsageList[index];
 603              	 .loc 3 227 0
 604 000e FA7B     	 ldrb r2,[r7,#15]
 605 0010 1346     	 mov r3,r2
 606 0012 DB00     	 lsls r3,r3,#3
 607 0014 9B1A     	 subs r3,r3,r2
 608 0016 0B4A     	 ldr r2,.L45
 609 0018 1344     	 add r3,r3,r2
 610 001a BB60     	 str r3,[r7,#8]
 228:../cleanflight/src/main/io/serial.c ****         if (candidate->serialPort == serialPort) {
 611              	 .loc 3 228 0
 612 001c BB68     	 ldr r3,[r7,#8]
 613 001e 1A68     	 ldr r2,[r3]
 614 0020 7B68     	 ldr r3,[r7,#4]
 615 0022 9A42     	 cmp r2,r3
 616 0024 01D1     	 bne .L42
 229:../cleanflight/src/main/io/serial.c ****             return candidate;
 617              	 .loc 3 229 0
 618 0026 BB68     	 ldr r3,[r7,#8]
 619 0028 06E0     	 b .L43
 620              	.L42:
 621              	.LBE5:
 226:../cleanflight/src/main/io/serial.c ****         serialPortUsage_t *candidate = &serialPortUsageList[index];
 622              	 .loc 3 226 0 discriminator 2
 623 002a FB7B     	 ldrb r3,[r7,#15]
 624 002c 0133     	 adds r3,r3,#1
 625 002e FB73     	 strb r3,[r7,#15]
 626              	.L41:
 226:../cleanflight/src/main/io/serial.c ****         serialPortUsage_t *candidate = &serialPortUsageList[index];
 627              	 .loc 3 226 0 is_stmt 0 discriminator 1
 628 0030 FB7B     	 ldrb r3,[r7,#15]
 629 0032 042B     	 cmp r3,#4
 630 0034 EBD9     	 bls .L44
 230:../cleanflight/src/main/io/serial.c ****         }
 231:../cleanflight/src/main/io/serial.c ****     }
 232:../cleanflight/src/main/io/serial.c ****     return NULL;
 631              	 .loc 3 232 0 is_stmt 1
 632 0036 0023     	 movs r3,#0
 633              	.L43:
 233:../cleanflight/src/main/io/serial.c **** }
 634              	 .loc 3 233 0
 635 0038 1846     	 mov r0,r3
 636 003a 1437     	 adds r7,r7,#20
 637              	.LCFI38:
 638              	 .cfi_def_cfa_offset 4
 639 003c BD46     	 mov sp,r7
 640              	.LCFI39:
 641              	 .cfi_def_cfa_register 13
 642              	 
 643 003e 5DF8047B 	 ldr r7,[sp],#4
 644              	.LCFI40:
 645              	 .cfi_restore 7
 646              	 .cfi_def_cfa_offset 0
 647 0042 7047     	 bx lr
 648              	.L46:
 649              	 .align 2
 650              	.L45:
 651 0044 00000000 	 .word serialPortUsageList
 652              	 .cfi_endproc
 653              	.LFE543:
 655              	 .section .bss.findSerialPortConfigState,"aw",%nobits
 656              	 .align 2
 659              	findSerialPortConfigState:
 660 0000 00       	 .space 1
 661 0001 000000   	 .section .text.findSerialPortConfig,"ax",%progbits
 662              	 .align 2
 663              	 .global findSerialPortConfig
 664              	 .thumb
 665              	 .thumb_func
 667              	findSerialPortConfig:
 668              	.LFB544:
 234:../cleanflight/src/main/io/serial.c **** 
 235:../cleanflight/src/main/io/serial.c **** typedef struct findSerialPortConfigState_s {
 236:../cleanflight/src/main/io/serial.c ****     uint8_t lastIndex;
 237:../cleanflight/src/main/io/serial.c **** } findSerialPortConfigState_t;
 238:../cleanflight/src/main/io/serial.c **** 
 239:../cleanflight/src/main/io/serial.c **** static findSerialPortConfigState_t findSerialPortConfigState;
 240:../cleanflight/src/main/io/serial.c **** 
 241:../cleanflight/src/main/io/serial.c **** serialPortConfig_t *findSerialPortConfig(serialPortFunction_e function)
 242:../cleanflight/src/main/io/serial.c **** {
 669              	 .loc 3 242 0
 670              	 .cfi_startproc
 671              	 
 672              	 
 673 0000 80B5     	 push {r7,lr}
 674              	.LCFI41:
 675              	 .cfi_def_cfa_offset 8
 676              	 .cfi_offset 7,-8
 677              	 .cfi_offset 14,-4
 678 0002 82B0     	 sub sp,sp,#8
 679              	.LCFI42:
 680              	 .cfi_def_cfa_offset 16
 681 0004 00AF     	 add r7,sp,#0
 682              	.LCFI43:
 683              	 .cfi_def_cfa_register 7
 684 0006 0346     	 mov r3,r0
 685 0008 FB80     	 strh r3,[r7,#6]
 243:../cleanflight/src/main/io/serial.c ****     memset(&findSerialPortConfigState, 0, sizeof(findSerialPortConfigState));
 686              	 .loc 3 243 0
 687 000a 0748     	 ldr r0,.L49
 688 000c 0021     	 movs r1,#0
 689 000e 0122     	 movs r2,#1
 690 0010 FFF7FEFF 	 bl memset
 244:../cleanflight/src/main/io/serial.c **** 
 245:../cleanflight/src/main/io/serial.c ****     return findNextSerialPortConfig(function);
 691              	 .loc 3 245 0
 692 0014 FB88     	 ldrh r3,[r7,#6]
 693 0016 1846     	 mov r0,r3
 694 0018 FFF7FEFF 	 bl findNextSerialPortConfig
 695 001c 0346     	 mov r3,r0
 246:../cleanflight/src/main/io/serial.c **** }
 696              	 .loc 3 246 0
 697 001e 1846     	 mov r0,r3
 698 0020 0837     	 adds r7,r7,#8
 699              	.LCFI44:
 700              	 .cfi_def_cfa_offset 8
 701 0022 BD46     	 mov sp,r7
 702              	.LCFI45:
 703              	 .cfi_def_cfa_register 13
 704              	 
 705 0024 80BD     	 pop {r7,pc}
 706              	.L50:
 707 0026 00BF     	 .align 2
 708              	.L49:
 709 0028 00000000 	 .word findSerialPortConfigState
 710              	 .cfi_endproc
 711              	.LFE544:
 713              	 .section .text.findNextSerialPortConfig,"ax",%progbits
 714              	 .align 2
 715              	 .global findNextSerialPortConfig
 716              	 .thumb
 717              	 .thumb_func
 719              	findNextSerialPortConfig:
 720              	.LFB545:
 247:../cleanflight/src/main/io/serial.c **** 
 248:../cleanflight/src/main/io/serial.c **** serialPortConfig_t *findNextSerialPortConfig(serialPortFunction_e function)
 249:../cleanflight/src/main/io/serial.c **** {
 721              	 .loc 3 249 0
 722              	 .cfi_startproc
 723              	 
 724              	 
 725 0000 80B5     	 push {r7,lr}
 726              	.LCFI46:
 727              	 .cfi_def_cfa_offset 8
 728              	 .cfi_offset 7,-8
 729              	 .cfi_offset 14,-4
 730 0002 84B0     	 sub sp,sp,#16
 731              	.LCFI47:
 732              	 .cfi_def_cfa_offset 24
 733 0004 00AF     	 add r7,sp,#0
 734              	.LCFI48:
 735              	 .cfi_def_cfa_register 7
 736 0006 0346     	 mov r3,r0
 737 0008 FB80     	 strh r3,[r7,#6]
 250:../cleanflight/src/main/io/serial.c ****     while (findSerialPortConfigState.lastIndex < SERIAL_PORT_COUNT) {
 738              	 .loc 3 250 0
 739 000a 18E0     	 b .L52
 740              	.L54:
 741              	.LBB6:
 251:../cleanflight/src/main/io/serial.c ****         serialPortConfig_t *candidate = &serialConfigMutable()->portConfigs[findSerialPortConfigSta
 742              	 .loc 3 251 0
 743 000c FFF7FEFF 	 bl serialConfigMutable
 744 0010 0146     	 mov r1,r0
 745 0012 0F4B     	 ldr r3,.L55
 746 0014 1B78     	 ldrb r3,[r3]
 747 0016 5A1C     	 adds r2,r3,#1
 748 0018 D0B2     	 uxtb r0,r2
 749 001a 0D4A     	 ldr r2,.L55
 750 001c 1070     	 strb r0,[r2]
 751 001e 1A46     	 mov r2,r3
 752 0020 1346     	 mov r3,r2
 753 0022 DB00     	 lsls r3,r3,#3
 754 0024 9B1A     	 subs r3,r3,r2
 755 0026 0B44     	 add r3,r3,r1
 756 0028 FB60     	 str r3,[r7,#12]
 252:../cleanflight/src/main/io/serial.c **** 
 253:../cleanflight/src/main/io/serial.c ****         if (candidate->functionMask & function) {
 757              	 .loc 3 253 0
 758 002a FB68     	 ldr r3,[r7,#12]
 759 002c 1B88     	 ldrh r3,[r3]
 760 002e 9AB2     	 uxth r2,r3
 761 0030 FB88     	 ldrh r3,[r7,#6]
 762 0032 1340     	 ands r3,r3,r2
 763 0034 9BB2     	 uxth r3,r3
 764 0036 002B     	 cmp r3,#0
 765 0038 01D0     	 beq .L52
 254:../cleanflight/src/main/io/serial.c ****             return candidate;
 766              	 .loc 3 254 0
 767 003a FB68     	 ldr r3,[r7,#12]
 768 003c 04E0     	 b .L53
 769              	.L52:
 770              	.LBE6:
 250:../cleanflight/src/main/io/serial.c ****         serialPortConfig_t *candidate = &serialConfigMutable()->portConfigs[findSerialPortConfigSta
 771              	 .loc 3 250 0
 772 003e 044B     	 ldr r3,.L55
 773 0040 1B78     	 ldrb r3,[r3]
 774 0042 042B     	 cmp r3,#4
 775 0044 E2D9     	 bls .L54
 255:../cleanflight/src/main/io/serial.c ****         }
 256:../cleanflight/src/main/io/serial.c ****     }
 257:../cleanflight/src/main/io/serial.c ****     return NULL;
 776              	 .loc 3 257 0
 777 0046 0023     	 movs r3,#0
 778              	.L53:
 258:../cleanflight/src/main/io/serial.c **** }
 779              	 .loc 3 258 0
 780 0048 1846     	 mov r0,r3
 781 004a 1037     	 adds r7,r7,#16
 782              	.LCFI49:
 783              	 .cfi_def_cfa_offset 8
 784 004c BD46     	 mov sp,r7
 785              	.LCFI50:
 786              	 .cfi_def_cfa_register 13
 787              	 
 788 004e 80BD     	 pop {r7,pc}
 789              	.L56:
 790              	 .align 2
 791              	.L55:
 792 0050 00000000 	 .word findSerialPortConfigState
 793              	 .cfi_endproc
 794              	.LFE545:
 796              	 .section .text.determinePortSharing,"ax",%progbits
 797              	 .align 2
 798              	 .global determinePortSharing
 799              	 .thumb
 800              	 .thumb_func
 802              	determinePortSharing:
 803              	.LFB546:
 259:../cleanflight/src/main/io/serial.c **** 
 260:../cleanflight/src/main/io/serial.c **** portSharing_e determinePortSharing(const serialPortConfig_t *portConfig, serialPortFunction_e funct
 261:../cleanflight/src/main/io/serial.c **** {
 804              	 .loc 3 261 0
 805              	 .cfi_startproc
 806              	 
 807              	 
 808              	 
 809 0000 80B4     	 push {r7}
 810              	.LCFI51:
 811              	 .cfi_def_cfa_offset 4
 812              	 .cfi_offset 7,-4
 813 0002 83B0     	 sub sp,sp,#12
 814              	.LCFI52:
 815              	 .cfi_def_cfa_offset 16
 816 0004 00AF     	 add r7,sp,#0
 817              	.LCFI53:
 818              	 .cfi_def_cfa_register 7
 819 0006 7860     	 str r0,[r7,#4]
 820 0008 0B46     	 mov r3,r1
 821 000a 7B80     	 strh r3,[r7,#2]
 262:../cleanflight/src/main/io/serial.c ****     if (!portConfig || (portConfig->functionMask & function) == 0) {
 822              	 .loc 3 262 0
 823 000c 7B68     	 ldr r3,[r7,#4]
 824 000e 002B     	 cmp r3,#0
 825 0010 07D0     	 beq .L58
 826              	 .loc 3 262 0 is_stmt 0 discriminator 1
 827 0012 7B68     	 ldr r3,[r7,#4]
 828 0014 1B88     	 ldrh r3,[r3]
 829 0016 9AB2     	 uxth r2,r3
 830 0018 7B88     	 ldrh r3,[r7,#2]
 831 001a 1340     	 ands r3,r3,r2
 832 001c 9BB2     	 uxth r3,r3
 833 001e 002B     	 cmp r3,#0
 834 0020 01D1     	 bne .L59
 835              	.L58:
 263:../cleanflight/src/main/io/serial.c ****         return PORTSHARING_UNUSED;
 836              	 .loc 3 263 0 is_stmt 1
 837 0022 0023     	 movs r3,#0
 838 0024 08E0     	 b .L60
 839              	.L59:
 264:../cleanflight/src/main/io/serial.c ****     }
 265:../cleanflight/src/main/io/serial.c ****     return portConfig->functionMask == function ? PORTSHARING_NOT_SHARED : PORTSHARING_SHARED;
 840              	 .loc 3 265 0
 841 0026 7B68     	 ldr r3,[r7,#4]
 842 0028 1B88     	 ldrh r3,[r3]
 843 002a 9BB2     	 uxth r3,r3
 844 002c 7A88     	 ldrh r2,[r7,#2]
 845 002e 9A42     	 cmp r2,r3
 846 0030 01D1     	 bne .L61
 847              	 .loc 3 265 0 is_stmt 0 discriminator 1
 848 0032 0123     	 movs r3,#1
 849 0034 00E0     	 b .L60
 850              	.L61:
 851              	 .loc 3 265 0 discriminator 2
 852 0036 0223     	 movs r3,#2
 853              	.L60:
 266:../cleanflight/src/main/io/serial.c **** }
 854              	 .loc 3 266 0 is_stmt 1
 855 0038 1846     	 mov r0,r3
 856 003a 0C37     	 adds r7,r7,#12
 857              	.LCFI54:
 858              	 .cfi_def_cfa_offset 4
 859 003c BD46     	 mov sp,r7
 860              	.LCFI55:
 861              	 .cfi_def_cfa_register 13
 862              	 
 863 003e 5DF8047B 	 ldr r7,[sp],#4
 864              	.LCFI56:
 865              	 .cfi_restore 7
 866              	 .cfi_def_cfa_offset 0
 867 0042 7047     	 bx lr
 868              	 .cfi_endproc
 869              	.LFE546:
 871              	 .section .text.isSerialPortShared,"ax",%progbits
 872              	 .align 2
 873              	 .global isSerialPortShared
 874              	 .thumb
 875              	 .thumb_func
 877              	isSerialPortShared:
 878              	.LFB547:
 267:../cleanflight/src/main/io/serial.c **** 
 268:../cleanflight/src/main/io/serial.c **** bool isSerialPortShared(const serialPortConfig_t *portConfig, uint16_t functionMask, serialPortFunc
 269:../cleanflight/src/main/io/serial.c **** {
 879              	 .loc 3 269 0
 880              	 .cfi_startproc
 881              	 
 882              	 
 883              	 
 884 0000 80B4     	 push {r7}
 885              	.LCFI57:
 886              	 .cfi_def_cfa_offset 4
 887              	 .cfi_offset 7,-4
 888 0002 83B0     	 sub sp,sp,#12
 889              	.LCFI58:
 890              	 .cfi_def_cfa_offset 16
 891 0004 00AF     	 add r7,sp,#0
 892              	.LCFI59:
 893              	 .cfi_def_cfa_register 7
 894 0006 7860     	 str r0,[r7,#4]
 895 0008 0B46     	 mov r3,r1
 896 000a 7B80     	 strh r3,[r7,#2]
 897 000c 1346     	 mov r3,r2
 898 000e 3B80     	 strh r3,[r7]
 270:../cleanflight/src/main/io/serial.c ****     return (portConfig) && (portConfig->functionMask & sharedWithFunction) && (portConfig->function
 899              	 .loc 3 270 0
 900 0010 7B68     	 ldr r3,[r7,#4]
 901 0012 002B     	 cmp r3,#0
 902 0014 11D0     	 beq .L64
 903              	 .loc 3 270 0 is_stmt 0 discriminator 1
 904 0016 7B68     	 ldr r3,[r7,#4]
 905 0018 1B88     	 ldrh r3,[r3]
 906 001a 9AB2     	 uxth r2,r3
 907 001c 3B88     	 ldrh r3,[r7]
 908 001e 1340     	 ands r3,r3,r2
 909 0020 9BB2     	 uxth r3,r3
 910 0022 002B     	 cmp r3,#0
 911 0024 09D0     	 beq .L64
 912              	 .loc 3 270 0 discriminator 3
 913 0026 7B68     	 ldr r3,[r7,#4]
 914 0028 1B88     	 ldrh r3,[r3]
 915 002a 9AB2     	 uxth r2,r3
 916 002c 7B88     	 ldrh r3,[r7,#2]
 917 002e 1340     	 ands r3,r3,r2
 918 0030 9BB2     	 uxth r3,r3
 919 0032 002B     	 cmp r3,#0
 920 0034 01D0     	 beq .L64
 921              	 .loc 3 270 0 discriminator 5
 922 0036 0123     	 movs r3,#1
 923 0038 00E0     	 b .L65
 924              	.L64:
 925              	 .loc 3 270 0 discriminator 6
 926 003a 0023     	 movs r3,#0
 927              	.L65:
 928              	 .loc 3 270 0 discriminator 8
 929 003c 03F00103 	 and r3,r3,#1
 930 0040 DBB2     	 uxtb r3,r3
 271:../cleanflight/src/main/io/serial.c **** }
 931              	 .loc 3 271 0 is_stmt 1 discriminator 8
 932 0042 1846     	 mov r0,r3
 933 0044 0C37     	 adds r7,r7,#12
 934              	.LCFI60:
 935              	 .cfi_def_cfa_offset 4
 936 0046 BD46     	 mov sp,r7
 937              	.LCFI61:
 938              	 .cfi_def_cfa_register 13
 939              	 
 940 0048 5DF8047B 	 ldr r7,[sp],#4
 941              	.LCFI62:
 942              	 .cfi_restore 7
 943              	 .cfi_def_cfa_offset 0
 944 004c 7047     	 bx lr
 945              	 .cfi_endproc
 946              	.LFE547:
 948 004e 00BF     	 .section .text.findSharedSerialPort,"ax",%progbits
 949              	 .align 2
 950              	 .global findSharedSerialPort
 951              	 .thumb
 952              	 .thumb_func
 954              	findSharedSerialPort:
 955              	.LFB548:
 272:../cleanflight/src/main/io/serial.c **** 
 273:../cleanflight/src/main/io/serial.c **** serialPort_t *findSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction)
 274:../cleanflight/src/main/io/serial.c **** {
 956              	 .loc 3 274 0
 957              	 .cfi_startproc
 958              	 
 959              	 
 960 0000 80B5     	 push {r7,lr}
 961              	.LCFI63:
 962              	 .cfi_def_cfa_offset 8
 963              	 .cfi_offset 7,-8
 964              	 .cfi_offset 14,-4
 965 0002 86B0     	 sub sp,sp,#24
 966              	.LCFI64:
 967              	 .cfi_def_cfa_offset 32
 968 0004 00AF     	 add r7,sp,#0
 969              	.LCFI65:
 970              	 .cfi_def_cfa_register 7
 971 0006 0346     	 mov r3,r0
 972 0008 0A46     	 mov r2,r1
 973 000a FB80     	 strh r3,[r7,#6]
 974 000c 1346     	 mov r3,r2
 975 000e BB80     	 strh r3,[r7,#4]
 976              	.LBB7:
 275:../cleanflight/src/main/io/serial.c ****     for (unsigned i = 0; i < SERIAL_PORT_COUNT; i++) {
 977              	 .loc 3 275 0
 978 0010 0023     	 movs r3,#0
 979 0012 7B61     	 str r3,[r7,#20]
 980 0014 23E0     	 b .L68
 981              	.L72:
 982              	.LBB8:
 276:../cleanflight/src/main/io/serial.c ****         const serialPortConfig_t *candidate = &serialConfig()->portConfigs[i];
 983              	 .loc 3 276 0
 984 0016 FFF7FEFF 	 bl serialConfig
 985 001a 0146     	 mov r1,r0
 986 001c 7A69     	 ldr r2,[r7,#20]
 987 001e 1346     	 mov r3,r2
 988 0020 DB00     	 lsls r3,r3,#3
 989 0022 9B1A     	 subs r3,r3,r2
 990 0024 0B44     	 add r3,r3,r1
 991 0026 3B61     	 str r3,[r7,#16]
 277:../cleanflight/src/main/io/serial.c **** 
 278:../cleanflight/src/main/io/serial.c ****         if (isSerialPortShared(candidate, functionMask, sharedWithFunction)) {
 992              	 .loc 3 278 0
 993 0028 FA88     	 ldrh r2,[r7,#6]
 994 002a BB88     	 ldrh r3,[r7,#4]
 995 002c 3869     	 ldr r0,[r7,#16]
 996 002e 1146     	 mov r1,r2
 997 0030 1A46     	 mov r2,r3
 998 0032 FFF7FEFF 	 bl isSerialPortShared
 999 0036 0346     	 mov r3,r0
 1000 0038 002B     	 cmp r3,#0
 1001 003a 0DD0     	 beq .L69
 1002              	.LBB9:
 279:../cleanflight/src/main/io/serial.c ****             const serialPortUsage_t *serialPortUsage = findSerialPortUsageByIdentifier(candidate->i
 1003              	 .loc 3 279 0
 1004 003c 3B69     	 ldr r3,[r7,#16]
 1005 003e 9B78     	 ldrb r3,[r3,#2]
 1006 0040 5BB2     	 sxtb r3,r3
 1007 0042 1846     	 mov r0,r3
 1008 0044 FFF7FEFF 	 bl findSerialPortUsageByIdentifier
 1009 0048 F860     	 str r0,[r7,#12]
 280:../cleanflight/src/main/io/serial.c ****             if (!serialPortUsage) {
 1010              	 .loc 3 280 0
 1011 004a FB68     	 ldr r3,[r7,#12]
 1012 004c 002B     	 cmp r3,#0
 1013 004e 00D1     	 bne .L70
 281:../cleanflight/src/main/io/serial.c ****                 continue;
 1014              	 .loc 3 281 0
 1015 0050 02E0     	 b .L69
 1016              	.L70:
 282:../cleanflight/src/main/io/serial.c ****             }
 283:../cleanflight/src/main/io/serial.c ****             return serialPortUsage->serialPort;
 1017              	 .loc 3 283 0
 1018 0052 FB68     	 ldr r3,[r7,#12]
 1019 0054 1B68     	 ldr r3,[r3]
 1020 0056 06E0     	 b .L71
 1021              	.L69:
 1022              	.LBE9:
 1023              	.LBE8:
 275:../cleanflight/src/main/io/serial.c ****         const serialPortConfig_t *candidate = &serialConfig()->portConfigs[i];
 1024              	 .loc 3 275 0 discriminator 2
 1025 0058 7B69     	 ldr r3,[r7,#20]
 1026 005a 0133     	 adds r3,r3,#1
 1027 005c 7B61     	 str r3,[r7,#20]
 1028              	.L68:
 275:../cleanflight/src/main/io/serial.c ****         const serialPortConfig_t *candidate = &serialConfig()->portConfigs[i];
 1029              	 .loc 3 275 0 is_stmt 0 discriminator 1
 1030 005e 7B69     	 ldr r3,[r7,#20]
 1031 0060 042B     	 cmp r3,#4
 1032 0062 D8D9     	 bls .L72
 1033              	.LBE7:
 284:../cleanflight/src/main/io/serial.c ****         }
 285:../cleanflight/src/main/io/serial.c ****     }
 286:../cleanflight/src/main/io/serial.c ****     return NULL;
 1034              	 .loc 3 286 0 is_stmt 1
 1035 0064 0023     	 movs r3,#0
 1036              	.L71:
 287:../cleanflight/src/main/io/serial.c **** }
 1037              	 .loc 3 287 0
 1038 0066 1846     	 mov r0,r3
 1039 0068 1837     	 adds r7,r7,#24
 1040              	.LCFI66:
 1041              	 .cfi_def_cfa_offset 8
 1042 006a BD46     	 mov sp,r7
 1043              	.LCFI67:
 1044              	 .cfi_def_cfa_register 13
 1045              	 
 1046 006c 80BD     	 pop {r7,pc}
 1047              	 .cfi_endproc
 1048              	.LFE548:
 1050 006e 00BF     	 .section .text.isSerialConfigValid,"ax",%progbits
 1051              	 .align 2
 1052              	 .global isSerialConfigValid
 1053              	 .thumb
 1054              	 .thumb_func
 1056              	isSerialConfigValid:
 1057              	.LFB549:
 288:../cleanflight/src/main/io/serial.c **** 
 289:../cleanflight/src/main/io/serial.c **** #ifdef USE_TELEMETRY
 290:../cleanflight/src/main/io/serial.c **** #define ALL_FUNCTIONS_SHARABLE_WITH_MSP (FUNCTION_BLACKBOX | TELEMETRY_PORT_FUNCTIONS_MASK)
 291:../cleanflight/src/main/io/serial.c **** #else
 292:../cleanflight/src/main/io/serial.c **** #define ALL_FUNCTIONS_SHARABLE_WITH_MSP (FUNCTION_BLACKBOX)
 293:../cleanflight/src/main/io/serial.c **** #endif
 294:../cleanflight/src/main/io/serial.c **** 
 295:../cleanflight/src/main/io/serial.c **** bool isSerialConfigValid(const serialConfig_t *serialConfigToCheck)
 296:../cleanflight/src/main/io/serial.c **** {
 1058              	 .loc 3 296 0
 1059              	 .cfi_startproc
 1060              	 
 1061              	 
 1062              	 
 1063 0000 80B4     	 push {r7}
 1064              	.LCFI68:
 1065              	 .cfi_def_cfa_offset 4
 1066              	 .cfi_offset 7,-4
 1067 0002 87B0     	 sub sp,sp,#28
 1068              	.LCFI69:
 1069              	 .cfi_def_cfa_offset 32
 1070 0004 00AF     	 add r7,sp,#0
 1071              	.LCFI70:
 1072              	 .cfi_def_cfa_register 7
 1073 0006 7860     	 str r0,[r7,#4]
 297:../cleanflight/src/main/io/serial.c ****     UNUSED(serialConfigToCheck);
 298:../cleanflight/src/main/io/serial.c ****     /*
 299:../cleanflight/src/main/io/serial.c ****      * rules:
 300:../cleanflight/src/main/io/serial.c ****      * - 1 MSP port minimum, max MSP ports is defined and must be adhered to.
 301:../cleanflight/src/main/io/serial.c ****      * - MSP is allowed to be shared with EITHER any telemetry OR blackbox.
 302:../cleanflight/src/main/io/serial.c ****      *   (using either / or, switching based on armed / disarmed or the AUX channel configured for 
 303:../cleanflight/src/main/io/serial.c ****      * - serial RX and FrSky / LTM / MAVLink telemetry can be shared
 304:../cleanflight/src/main/io/serial.c ****      *   (serial RX using RX line, telemetry using TX line)
 305:../cleanflight/src/main/io/serial.c ****      * - No other sharing combinations are valid.
 306:../cleanflight/src/main/io/serial.c ****      */
 307:../cleanflight/src/main/io/serial.c ****     uint8_t mspPortCount = 0;
 1074              	 .loc 3 307 0
 1075 0008 0023     	 movs r3,#0
 1076 000a FB75     	 strb r3,[r7,#23]
 1077              	.LBB10:
 308:../cleanflight/src/main/io/serial.c **** 
 309:../cleanflight/src/main/io/serial.c ****     for (int index = 0; index < SERIAL_PORT_COUNT; index++) {
 1078              	 .loc 3 309 0
 1079 000c 0023     	 movs r3,#0
 1080 000e 3B61     	 str r3,[r7,#16]
 1081 0010 75E0     	 b .L74
 1082              	.L80:
 1083              	.LBB11:
 310:../cleanflight/src/main/io/serial.c ****         const serialPortConfig_t *portConfig = &serialConfigToCheck->portConfigs[index];
 1084              	 .loc 3 310 0
 1085 0012 3A69     	 ldr r2,[r7,#16]
 1086 0014 1346     	 mov r3,r2
 1087 0016 DB00     	 lsls r3,r3,#3
 1088 0018 9B1A     	 subs r3,r3,r2
 1089 001a 7A68     	 ldr r2,[r7,#4]
 1090 001c 1344     	 add r3,r3,r2
 1091 001e FB60     	 str r3,[r7,#12]
 311:../cleanflight/src/main/io/serial.c **** 
 312:../cleanflight/src/main/io/serial.c ****         if (portConfig->functionMask & FUNCTION_MSP) {
 1092              	 .loc 3 312 0
 1093 0020 FB68     	 ldr r3,[r7,#12]
 1094 0022 1B88     	 ldrh r3,[r3]
 1095 0024 9BB2     	 uxth r3,r3
 1096 0026 03F00103 	 and r3,r3,#1
 1097 002a 002B     	 cmp r3,#0
 1098 002c 02D0     	 beq .L75
 313:../cleanflight/src/main/io/serial.c ****             mspPortCount++;
 1099              	 .loc 3 313 0
 1100 002e FB7D     	 ldrb r3,[r7,#23]
 1101 0030 0133     	 adds r3,r3,#1
 1102 0032 FB75     	 strb r3,[r7,#23]
 1103              	.L75:
 314:../cleanflight/src/main/io/serial.c ****         }
 315:../cleanflight/src/main/io/serial.c **** 
 316:../cleanflight/src/main/io/serial.c ****         uint8_t bitCount = BITCOUNT(portConfig->functionMask);
 1104              	 .loc 3 316 0
 1105 0034 FB68     	 ldr r3,[r7,#12]
 1106 0036 1B88     	 ldrh r3,[r3]
 1107 0038 9BB2     	 uxth r3,r3
 1108 003a 1A46     	 mov r2,r3
 1109 003c FB68     	 ldr r3,[r7,#12]
 1110 003e 1B88     	 ldrh r3,[r3]
 1111 0040 9BB2     	 uxth r3,r3
 1112 0042 5B08     	 lsrs r3,r3,#1
 1113 0044 9BB2     	 uxth r3,r3
 1114 0046 03F07733 	 and r3,r3,#2004318071
 1115 004a D21A     	 subs r2,r2,r3
 1116 004c FB68     	 ldr r3,[r7,#12]
 1117 004e 1B88     	 ldrh r3,[r3]
 1118 0050 9BB2     	 uxth r3,r3
 1119 0052 9B08     	 lsrs r3,r3,#2
 1120 0054 9BB2     	 uxth r3,r3
 1121 0056 03F03333 	 and r3,r3,#858993459
 1122 005a D21A     	 subs r2,r2,r3
 1123 005c FB68     	 ldr r3,[r7,#12]
 1124 005e 1B88     	 ldrh r3,[r3]
 1125 0060 9BB2     	 uxth r3,r3
 1126 0062 DB08     	 lsrs r3,r3,#3
 1127 0064 9BB2     	 uxth r3,r3
 1128 0066 03F01133 	 and r3,r3,#286331153
 1129 006a D21A     	 subs r2,r2,r3
 1130 006c FB68     	 ldr r3,[r7,#12]
 1131 006e 1B88     	 ldrh r3,[r3]
 1132 0070 9BB2     	 uxth r3,r3
 1133 0072 1946     	 mov r1,r3
 1134 0074 FB68     	 ldr r3,[r7,#12]
 1135 0076 1B88     	 ldrh r3,[r3]
 1136 0078 9BB2     	 uxth r3,r3
 1137 007a 5B08     	 lsrs r3,r3,#1
 1138 007c 9BB2     	 uxth r3,r3
 1139 007e 03F07733 	 and r3,r3,#2004318071
 1140 0082 C91A     	 subs r1,r1,r3
 1141 0084 FB68     	 ldr r3,[r7,#12]
 1142 0086 1B88     	 ldrh r3,[r3]
 1143 0088 9BB2     	 uxth r3,r3
 1144 008a 9B08     	 lsrs r3,r3,#2
 1145 008c 9BB2     	 uxth r3,r3
 1146 008e 03F03333 	 and r3,r3,#858993459
 1147 0092 C91A     	 subs r1,r1,r3
 1148 0094 FB68     	 ldr r3,[r7,#12]
 1149 0096 1B88     	 ldrh r3,[r3]
 1150 0098 9BB2     	 uxth r3,r3
 1151 009a DB08     	 lsrs r3,r3,#3
 1152 009c 9BB2     	 uxth r3,r3
 1153 009e 03F01133 	 and r3,r3,#286331153
 1154 00a2 CB1A     	 subs r3,r1,r3
 1155 00a4 1B11     	 asrs r3,r3,#4
 1156 00a6 1344     	 add r3,r3,r2
 1157 00a8 03F00F32 	 and r2,r3,#252645135
 1158 00ac 1D4B     	 ldr r3,.L83
 1159 00ae 82FB0301 	 smull r0,r1,r2,r3
 1160 00b2 5318     	 adds r3,r2,r1
 1161 00b4 D911     	 asrs r1,r3,#7
 1162 00b6 D317     	 asrs r3,r2,#31
 1163 00b8 C91A     	 subs r1,r1,r3
 1164 00ba 0B46     	 mov r3,r1
 1165 00bc 1B02     	 lsls r3,r3,#8
 1166 00be 5B1A     	 subs r3,r3,r1
 1167 00c0 D11A     	 subs r1,r2,r3
 1168 00c2 0B46     	 mov r3,r1
 1169 00c4 FB72     	 strb r3,[r7,#11]
 317:../cleanflight/src/main/io/serial.c ****         if (bitCount > 1) {
 1170              	 .loc 3 317 0
 1171 00c6 FB7A     	 ldrb r3,[r7,#11]
 1172 00c8 012B     	 cmp r3,#1
 1173 00ca 15D9     	 bls .L76
 318:../cleanflight/src/main/io/serial.c ****             // shared
 319:../cleanflight/src/main/io/serial.c ****             if (bitCount > 2) {
 1174              	 .loc 3 319 0
 1175 00cc FB7A     	 ldrb r3,[r7,#11]
 1176 00ce 022B     	 cmp r3,#2
 1177 00d0 01D9     	 bls .L77
 320:../cleanflight/src/main/io/serial.c ****                 return false;
 1178              	 .loc 3 320 0
 1179 00d2 0023     	 movs r3,#0
 1180 00d4 1FE0     	 b .L78
 1181              	.L77:
 321:../cleanflight/src/main/io/serial.c ****             }
 322:../cleanflight/src/main/io/serial.c **** 
 323:../cleanflight/src/main/io/serial.c ****             if ((portConfig->functionMask & FUNCTION_MSP) && (portConfig->functionMask & ALL_FUNCTI
 1182              	 .loc 3 323 0
 1183 00d6 FB68     	 ldr r3,[r7,#12]
 1184 00d8 1B88     	 ldrh r3,[r3]
 1185 00da 9BB2     	 uxth r3,r3
 1186 00dc 03F00103 	 and r3,r3,#1
 1187 00e0 002B     	 cmp r3,#0
 1188 00e2 07D0     	 beq .L79
 1189              	 .loc 3 323 0 is_stmt 0 discriminator 1
 1190 00e4 FB68     	 ldr r3,[r7,#12]
 1191 00e6 1B88     	 ldrh r3,[r3]
 1192 00e8 9BB2     	 uxth r3,r3
 1193 00ea 03F08003 	 and r3,r3,#128
 1194 00ee 002B     	 cmp r3,#0
 1195 00f0 00D0     	 beq .L79
 1196              	 .loc 3 323 0
 1197 00f2 01E0     	 b .L76
 1198              	.L79:
 324:../cleanflight/src/main/io/serial.c ****                 // MSP & telemetry
 325:../cleanflight/src/main/io/serial.c **** #ifdef USE_TELEMETRY
 326:../cleanflight/src/main/io/serial.c ****             } else if (telemetryCheckRxPortShared(portConfig)) {
 327:../cleanflight/src/main/io/serial.c ****                 // serial RX & telemetry
 328:../cleanflight/src/main/io/serial.c **** #endif
 329:../cleanflight/src/main/io/serial.c ****             } else {
 330:../cleanflight/src/main/io/serial.c ****                 // some other combination
 331:../cleanflight/src/main/io/serial.c ****                 return false;
 1199              	 .loc 3 331 0 is_stmt 1
 1200 00f4 0023     	 movs r3,#0
 1201 00f6 0EE0     	 b .L78
 1202              	.L76:
 1203              	.LBE11:
 309:../cleanflight/src/main/io/serial.c ****         const serialPortConfig_t *portConfig = &serialConfigToCheck->portConfigs[index];
 1204              	 .loc 3 309 0 discriminator 2
 1205 00f8 3B69     	 ldr r3,[r7,#16]
 1206 00fa 0133     	 adds r3,r3,#1
 1207 00fc 3B61     	 str r3,[r7,#16]
 1208              	.L74:
 309:../cleanflight/src/main/io/serial.c ****         const serialPortConfig_t *portConfig = &serialConfigToCheck->portConfigs[index];
 1209              	 .loc 3 309 0 is_stmt 0 discriminator 1
 1210 00fe 3B69     	 ldr r3,[r7,#16]
 1211 0100 042B     	 cmp r3,#4
 1212 0102 86DD     	 ble .L80
 1213              	.LBE10:
 332:../cleanflight/src/main/io/serial.c ****             }
 333:../cleanflight/src/main/io/serial.c ****         }
 334:../cleanflight/src/main/io/serial.c ****     }
 335:../cleanflight/src/main/io/serial.c **** 
 336:../cleanflight/src/main/io/serial.c ****     if (mspPortCount == 0 || mspPortCount > MAX_MSP_PORT_COUNT) {
 1214              	 .loc 3 336 0 is_stmt 1
 1215 0104 FB7D     	 ldrb r3,[r7,#23]
 1216 0106 002B     	 cmp r3,#0
 1217 0108 02D0     	 beq .L81
 1218              	 .loc 3 336 0 is_stmt 0 discriminator 1
 1219 010a FB7D     	 ldrb r3,[r7,#23]
 1220 010c 032B     	 cmp r3,#3
 1221 010e 01D9     	 bls .L82
 1222              	.L81:
 337:../cleanflight/src/main/io/serial.c ****         return false;
 1223              	 .loc 3 337 0 is_stmt 1
 1224 0110 0023     	 movs r3,#0
 1225 0112 00E0     	 b .L78
 1226              	.L82:
 338:../cleanflight/src/main/io/serial.c ****     }
 339:../cleanflight/src/main/io/serial.c ****     return true;
 1227              	 .loc 3 339 0
 1228 0114 0123     	 movs r3,#1
 1229              	.L78:
 340:../cleanflight/src/main/io/serial.c **** }
 1230              	 .loc 3 340 0
 1231 0116 1846     	 mov r0,r3
 1232 0118 1C37     	 adds r7,r7,#28
 1233              	.LCFI71:
 1234              	 .cfi_def_cfa_offset 4
 1235 011a BD46     	 mov sp,r7
 1236              	.LCFI72:
 1237              	 .cfi_def_cfa_register 13
 1238              	 
 1239 011c 5DF8047B 	 ldr r7,[sp],#4
 1240              	.LCFI73:
 1241              	 .cfi_restore 7
 1242              	 .cfi_def_cfa_offset 0
 1243 0120 7047     	 bx lr
 1244              	.L84:
 1245 0122 00BF     	 .align 2
 1246              	.L83:
 1247 0124 81808080 	 .word -2139062143
 1248              	 .cfi_endproc
 1249              	.LFE549:
 1251              	 .section .text.serialFindPortConfiguration,"ax",%progbits
 1252              	 .align 2
 1253              	 .global serialFindPortConfiguration
 1254              	 .thumb
 1255              	 .thumb_func
 1257              	serialFindPortConfiguration:
 1258              	.LFB550:
 341:../cleanflight/src/main/io/serial.c **** 
 342:../cleanflight/src/main/io/serial.c **** serialPortConfig_t *serialFindPortConfiguration(serialPortIdentifier_e identifier)
 343:../cleanflight/src/main/io/serial.c **** {
 1259              	 .loc 3 343 0
 1260              	 .cfi_startproc
 1261              	 
 1262              	 
 1263 0000 80B5     	 push {r7,lr}
 1264              	.LCFI74:
 1265              	 .cfi_def_cfa_offset 8
 1266              	 .cfi_offset 7,-8
 1267              	 .cfi_offset 14,-4
 1268 0002 84B0     	 sub sp,sp,#16
 1269              	.LCFI75:
 1270              	 .cfi_def_cfa_offset 24
 1271 0004 00AF     	 add r7,sp,#0
 1272              	.LCFI76:
 1273              	 .cfi_def_cfa_register 7
 1274 0006 0346     	 mov r3,r0
 1275 0008 FB71     	 strb r3,[r7,#7]
 1276              	.LBB12:
 344:../cleanflight/src/main/io/serial.c ****     for (int index = 0; index < SERIAL_PORT_COUNT; index++) {
 1277              	 .loc 3 344 0
 1278 000a 0023     	 movs r3,#0
 1279 000c FB60     	 str r3,[r7,#12]
 1280 000e 14E0     	 b .L86
 1281              	.L89:
 1282              	.LBB13:
 345:../cleanflight/src/main/io/serial.c ****         serialPortConfig_t *candidate = &serialConfigMutable()->portConfigs[index];
 1283              	 .loc 3 345 0
 1284 0010 FFF7FEFF 	 bl serialConfigMutable
 1285 0014 0146     	 mov r1,r0
 1286 0016 FA68     	 ldr r2,[r7,#12]
 1287 0018 1346     	 mov r3,r2
 1288 001a DB00     	 lsls r3,r3,#3
 1289 001c 9B1A     	 subs r3,r3,r2
 1290 001e 0B44     	 add r3,r3,r1
 1291 0020 BB60     	 str r3,[r7,#8]
 346:../cleanflight/src/main/io/serial.c ****         if (candidate->identifier == identifier) {
 1292              	 .loc 3 346 0
 1293 0022 BB68     	 ldr r3,[r7,#8]
 1294 0024 9B78     	 ldrb r3,[r3,#2]
 1295 0026 97F90720 	 ldrsb r2,[r7,#7]
 1296 002a 5BB2     	 sxtb r3,r3
 1297 002c 9A42     	 cmp r2,r3
 1298 002e 01D1     	 bne .L87
 347:../cleanflight/src/main/io/serial.c ****             return candidate;
 1299              	 .loc 3 347 0
 1300 0030 BB68     	 ldr r3,[r7,#8]
 1301 0032 06E0     	 b .L88
 1302              	.L87:
 1303              	.LBE13:
 344:../cleanflight/src/main/io/serial.c ****         serialPortConfig_t *candidate = &serialConfigMutable()->portConfigs[index];
 1304              	 .loc 3 344 0 discriminator 2
 1305 0034 FB68     	 ldr r3,[r7,#12]
 1306 0036 0133     	 adds r3,r3,#1
 1307 0038 FB60     	 str r3,[r7,#12]
 1308              	.L86:
 344:../cleanflight/src/main/io/serial.c ****         serialPortConfig_t *candidate = &serialConfigMutable()->portConfigs[index];
 1309              	 .loc 3 344 0 is_stmt 0 discriminator 1
 1310 003a FB68     	 ldr r3,[r7,#12]
 1311 003c 042B     	 cmp r3,#4
 1312 003e E7DD     	 ble .L89
 1313              	.LBE12:
 348:../cleanflight/src/main/io/serial.c ****         }
 349:../cleanflight/src/main/io/serial.c ****     }
 350:../cleanflight/src/main/io/serial.c ****     return NULL;
 1314              	 .loc 3 350 0 is_stmt 1
 1315 0040 0023     	 movs r3,#0
 1316              	.L88:
 351:../cleanflight/src/main/io/serial.c **** }
 1317              	 .loc 3 351 0
 1318 0042 1846     	 mov r0,r3
 1319 0044 1037     	 adds r7,r7,#16
 1320              	.LCFI77:
 1321              	 .cfi_def_cfa_offset 8
 1322 0046 BD46     	 mov sp,r7
 1323              	.LCFI78:
 1324              	 .cfi_def_cfa_register 13
 1325              	 
 1326 0048 80BD     	 pop {r7,pc}
 1327              	 .cfi_endproc
 1328              	.LFE550:
 1330 004a 00BF     	 .section .text.doesConfigurationUsePort,"ax",%progbits
 1331              	 .align 2
 1332              	 .global doesConfigurationUsePort
 1333              	 .thumb
 1334              	 .thumb_func
 1336              	doesConfigurationUsePort:
 1337              	.LFB551:
 352:../cleanflight/src/main/io/serial.c **** 
 353:../cleanflight/src/main/io/serial.c **** bool doesConfigurationUsePort(serialPortIdentifier_e identifier)
 354:../cleanflight/src/main/io/serial.c **** {
 1338              	 .loc 3 354 0
 1339              	 .cfi_startproc
 1340              	 
 1341              	 
 1342 0000 80B5     	 push {r7,lr}
 1343              	.LCFI79:
 1344              	 .cfi_def_cfa_offset 8
 1345              	 .cfi_offset 7,-8
 1346              	 .cfi_offset 14,-4
 1347 0002 84B0     	 sub sp,sp,#16
 1348              	.LCFI80:
 1349              	 .cfi_def_cfa_offset 24
 1350 0004 00AF     	 add r7,sp,#0
 1351              	.LCFI81:
 1352              	 .cfi_def_cfa_register 7
 1353 0006 0346     	 mov r3,r0
 1354 0008 FB71     	 strb r3,[r7,#7]
 355:../cleanflight/src/main/io/serial.c ****     serialPortConfig_t *candidate = serialFindPortConfiguration(identifier);
 1355              	 .loc 3 355 0
 1356 000a 97F90730 	 ldrsb r3,[r7,#7]
 1357 000e 1846     	 mov r0,r3
 1358 0010 FFF7FEFF 	 bl serialFindPortConfiguration
 1359 0014 F860     	 str r0,[r7,#12]
 356:../cleanflight/src/main/io/serial.c ****     return candidate != NULL && candidate->functionMask;
 1360              	 .loc 3 356 0
 1361 0016 FB68     	 ldr r3,[r7,#12]
 1362 0018 002B     	 cmp r3,#0
 1363 001a 06D0     	 beq .L91
 1364              	 .loc 3 356 0 is_stmt 0 discriminator 1
 1365 001c FB68     	 ldr r3,[r7,#12]
 1366 001e 1B88     	 ldrh r3,[r3]
 1367 0020 9BB2     	 uxth r3,r3
 1368 0022 002B     	 cmp r3,#0
 1369 0024 01D0     	 beq .L91
 1370              	 .loc 3 356 0 discriminator 3
 1371 0026 0123     	 movs r3,#1
 1372 0028 00E0     	 b .L92
 1373              	.L91:
 1374              	 .loc 3 356 0 discriminator 4
 1375 002a 0023     	 movs r3,#0
 1376              	.L92:
 1377              	 .loc 3 356 0 discriminator 6
 1378 002c 03F00103 	 and r3,r3,#1
 1379 0030 DBB2     	 uxtb r3,r3
 357:../cleanflight/src/main/io/serial.c **** }
 1380              	 .loc 3 357 0 is_stmt 1 discriminator 6
 1381 0032 1846     	 mov r0,r3
 1382 0034 1037     	 adds r7,r7,#16
 1383              	.LCFI82:
 1384              	 .cfi_def_cfa_offset 8
 1385 0036 BD46     	 mov sp,r7
 1386              	.LCFI83:
 1387              	 .cfi_def_cfa_register 13
 1388              	 
 1389 0038 80BD     	 pop {r7,pc}
 1390              	 .cfi_endproc
 1391              	.LFE551:
 1393 003a 00BF     	 .section .text.openSerialPort,"ax",%progbits
 1394              	 .align 2
 1395              	 .global openSerialPort
 1396              	 .thumb
 1397              	 .thumb_func
 1399              	openSerialPort:
 1400              	.LFB552:
 358:../cleanflight/src/main/io/serial.c **** 
 359:../cleanflight/src/main/io/serial.c **** serialPort_t *openSerialPort(
 360:../cleanflight/src/main/io/serial.c ****     serialPortIdentifier_e identifier,
 361:../cleanflight/src/main/io/serial.c ****     serialPortFunction_e function,
 362:../cleanflight/src/main/io/serial.c ****     serialReceiveCallbackPtr rxCallback,
 363:../cleanflight/src/main/io/serial.c ****     void *rxCallbackData,
 364:../cleanflight/src/main/io/serial.c ****     uint32_t baudRate,
 365:../cleanflight/src/main/io/serial.c ****     portMode_e mode,
 366:../cleanflight/src/main/io/serial.c ****     portOptions_e options)
 367:../cleanflight/src/main/io/serial.c **** {
 1401              	 .loc 3 367 0
 1402              	 .cfi_startproc
 1403              	 
 1404              	 
 1405 0000 80B5     	 push {r7,lr}
 1406              	.LCFI84:
 1407              	 .cfi_def_cfa_offset 8
 1408              	 .cfi_offset 7,-8
 1409              	 .cfi_offset 14,-4
 1410 0002 88B0     	 sub sp,sp,#32
 1411              	.LCFI85:
 1412              	 .cfi_def_cfa_offset 40
 1413 0004 02AF     	 add r7,sp,#8
 1414              	.LCFI86:
 1415              	 .cfi_def_cfa 7,32
 1416 0006 BA60     	 str r2,[r7,#8]
 1417 0008 7B60     	 str r3,[r7,#4]
 1418 000a 0346     	 mov r3,r0
 1419 000c FB73     	 strb r3,[r7,#15]
 1420 000e 0B46     	 mov r3,r1
 1421 0010 BB81     	 strh r3,[r7,#12]
 368:../cleanflight/src/main/io/serial.c **** #if !(defined(USE_UART) || defined(USE_SOFTSERIAL1) || defined(USE_SOFTSERIAL2))
 369:../cleanflight/src/main/io/serial.c ****     UNUSED(rxCallback);
 370:../cleanflight/src/main/io/serial.c ****     UNUSED(rxCallbackData);
 371:../cleanflight/src/main/io/serial.c ****     UNUSED(baudRate);
 372:../cleanflight/src/main/io/serial.c ****     UNUSED(mode);
 373:../cleanflight/src/main/io/serial.c ****     UNUSED(options);
 374:../cleanflight/src/main/io/serial.c **** #endif
 375:../cleanflight/src/main/io/serial.c **** 
 376:../cleanflight/src/main/io/serial.c ****     serialPortUsage_t *serialPortUsage = findSerialPortUsageByIdentifier(identifier);
 1422              	 .loc 3 376 0
 1423 0012 97F90F30 	 ldrsb r3,[r7,#15]
 1424 0016 1846     	 mov r0,r3
 1425 0018 FFF7FEFF 	 bl findSerialPortUsageByIdentifier
 1426 001c 3861     	 str r0,[r7,#16]
 377:../cleanflight/src/main/io/serial.c ****     if (!serialPortUsage || serialPortUsage->function != FUNCTION_NONE) {
 1427              	 .loc 3 377 0
 1428 001e 3B69     	 ldr r3,[r7,#16]
 1429 0020 002B     	 cmp r3,#0
 1430 0022 04D0     	 beq .L95
 1431              	 .loc 3 377 0 is_stmt 0 discriminator 1
 1432 0024 3B69     	 ldr r3,[r7,#16]
 1433 0026 9B88     	 ldrh r3,[r3,#4]
 1434 0028 9BB2     	 uxth r3,r3
 1435 002a 002B     	 cmp r3,#0
 1436 002c 01D0     	 beq .L96
 1437              	.L95:
 378:../cleanflight/src/main/io/serial.c ****         // not available / already in use
 379:../cleanflight/src/main/io/serial.c ****         return NULL;
 1438              	 .loc 3 379 0 is_stmt 1
 1439 002e 0023     	 movs r3,#0
 1440 0030 90E0     	 b .L97
 1441              	.L96:
 380:../cleanflight/src/main/io/serial.c ****     }
 381:../cleanflight/src/main/io/serial.c **** 
 382:../cleanflight/src/main/io/serial.c ****     serialPort_t *serialPort = NULL;
 1442              	 .loc 3 382 0
 1443 0032 0023     	 movs r3,#0
 1444 0034 7B61     	 str r3,[r7,#20]
 383:../cleanflight/src/main/io/serial.c **** 
 384:../cleanflight/src/main/io/serial.c ****     switch (identifier) {
 1445              	 .loc 3 384 0
 1446 0036 97F90F30 	 ldrsb r3,[r7,#15]
 1447 003a 2A2B     	 cmp r3,#42
 1448 003c 79D8     	 bhi .L105
 1449 003e 01A2     	 adr r2,.L100
 1450 0040 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1451              	 .p2align 2
 1452              	.L100:
 1453 0044 F9000000 	 .word .L99+1
 1454 0048 33010000 	 .word .L105+1
 1455 004c 33010000 	 .word .L105+1
 1456 0050 F9000000 	 .word .L99+1
 1457 0054 33010000 	 .word .L105+1
 1458 0058 F9000000 	 .word .L99+1
 1459 005c 33010000 	 .word .L105+1
 1460 0060 33010000 	 .word .L105+1
 1461 0064 33010000 	 .word .L105+1
 1462 0068 33010000 	 .word .L105+1
 1463 006c 33010000 	 .word .L105+1
 1464 0070 33010000 	 .word .L105+1
 1465 0074 33010000 	 .word .L105+1
 1466 0078 33010000 	 .word .L105+1
 1467 007c 33010000 	 .word .L105+1
 1468 0080 33010000 	 .word .L105+1
 1469 0084 33010000 	 .word .L105+1
 1470 0088 33010000 	 .word .L105+1
 1471 008c 33010000 	 .word .L105+1
 1472 0090 33010000 	 .word .L105+1
 1473 0094 F1000000 	 .word .L101+1
 1474 0098 33010000 	 .word .L105+1
 1475 009c 33010000 	 .word .L105+1
 1476 00a0 33010000 	 .word .L105+1
 1477 00a4 33010000 	 .word .L105+1
 1478 00a8 33010000 	 .word .L105+1
 1479 00ac 33010000 	 .word .L105+1
 1480 00b0 33010000 	 .word .L105+1
 1481 00b4 33010000 	 .word .L105+1
 1482 00b8 33010000 	 .word .L105+1
 1483 00bc 33010000 	 .word .L105+1
 1484 00c0 33010000 	 .word .L105+1
 1485 00c4 33010000 	 .word .L105+1
 1486 00c8 33010000 	 .word .L105+1
 1487 00cc 33010000 	 .word .L105+1
 1488 00d0 33010000 	 .word .L105+1
 1489 00d4 33010000 	 .word .L105+1
 1490 00d8 33010000 	 .word .L105+1
 1491 00dc 33010000 	 .word .L105+1
 1492 00e0 33010000 	 .word .L105+1
 1493 00e4 33010000 	 .word .L105+1
 1494 00e8 33010000 	 .word .L105+1
 1495 00ec 17010000 	 .word .L102+1
 1496              	 .p2align 1
 1497              	.L101:
 385:../cleanflight/src/main/io/serial.c **** #ifdef USE_VCP
 386:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_USB_VCP:
 387:../cleanflight/src/main/io/serial.c ****             serialPort = usbVcpOpen();
 1498              	 .loc 3 387 0
 1499 00f0 FFF7FEFF 	 bl usbVcpOpen
 1500 00f4 7861     	 str r0,[r7,#20]
 388:../cleanflight/src/main/io/serial.c ****             break;
 1501              	 .loc 3 388 0
 1502 00f6 1DE0     	 b .L103
 1503              	.L99:
 389:../cleanflight/src/main/io/serial.c **** #endif
 390:../cleanflight/src/main/io/serial.c **** 
 391:../cleanflight/src/main/io/serial.c **** #if defined(USE_UART)
 392:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART1
 393:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_USART1:
 394:../cleanflight/src/main/io/serial.c **** #endif
 395:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART2
 396:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_USART2:
 397:../cleanflight/src/main/io/serial.c **** #endif
 398:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART3
 399:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_USART3:
 400:../cleanflight/src/main/io/serial.c **** #endif
 401:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART4
 402:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_UART4:
 403:../cleanflight/src/main/io/serial.c **** #endif
 404:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART5
 405:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_UART5:
 406:../cleanflight/src/main/io/serial.c **** #endif
 407:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART6
 408:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_USART6:
 409:../cleanflight/src/main/io/serial.c **** #endif
 410:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART7
 411:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_USART7:
 412:../cleanflight/src/main/io/serial.c **** #endif
 413:../cleanflight/src/main/io/serial.c **** #ifdef USE_UART8
 414:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_USART8:
 415:../cleanflight/src/main/io/serial.c **** #endif
 416:../cleanflight/src/main/io/serial.c **** #if defined(SIMULATOR_BUILD)
 417:../cleanflight/src/main/io/serial.c ****             // emulate serial ports over TCP
 418:../cleanflight/src/main/io/serial.c ****             serialPort = serTcpOpen(SERIAL_PORT_IDENTIFIER_TO_UARTDEV(identifier), rxCallback, rxCa
 419:../cleanflight/src/main/io/serial.c **** #else
 420:../cleanflight/src/main/io/serial.c ****             serialPort = uartOpen(SERIAL_PORT_IDENTIFIER_TO_UARTDEV(identifier), rxCallback, rxCall
 1504              	 .loc 3 420 0
 1505 00f8 FA7B     	 ldrb r2,[r7,#15]
 1506 00fa 97F82430 	 ldrb r3,[r7,#36]
 1507 00fe 0093     	 str r3,[sp]
 1508 0100 97F82830 	 ldrb r3,[r7,#40]
 1509 0104 0193     	 str r3,[sp,#4]
 1510 0106 1046     	 mov r0,r2
 1511 0108 B968     	 ldr r1,[r7,#8]
 1512 010a 7A68     	 ldr r2,[r7,#4]
 1513 010c 3B6A     	 ldr r3,[r7,#32]
 1514 010e FFF7FEFF 	 bl uartOpen
 1515 0112 7861     	 str r0,[r7,#20]
 421:../cleanflight/src/main/io/serial.c **** #endif
 422:../cleanflight/src/main/io/serial.c ****             break;
 1516              	 .loc 3 422 0
 1517 0114 0EE0     	 b .L103
 1518              	.L102:
 423:../cleanflight/src/main/io/serial.c **** #endif
 424:../cleanflight/src/main/io/serial.c **** 
 425:../cleanflight/src/main/io/serial.c **** #ifdef USE_SOFTSERIAL1
 426:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_SOFTSERIAL1:
 427:../cleanflight/src/main/io/serial.c ****             serialPort = openSoftSerial(SOFTSERIAL1, rxCallback, rxCallbackData, baudRate, mode, op
 428:../cleanflight/src/main/io/serial.c ****             break;
 429:../cleanflight/src/main/io/serial.c **** #endif
 430:../cleanflight/src/main/io/serial.c **** #ifdef USE_SOFTSERIAL2
 431:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_SOFTSERIAL2:
 432:../cleanflight/src/main/io/serial.c ****             serialPort = openSoftSerial(SOFTSERIAL2, rxCallback, rxCallbackData, baudRate, mode, op
 433:../cleanflight/src/main/io/serial.c ****             break;
 434:../cleanflight/src/main/io/serial.c **** #endif
 435:../cleanflight/src/main/io/serial.c **** 
 436:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_1
 437:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_SPIS1:
 438:../cleanflight/src/main/io/serial.c ****         	serialPort = spiSlaveOpen(SPIDEV_1, rxCallback, rxCallbackData, baudRate, mode, options);
 439:../cleanflight/src/main/io/serial.c **** 		break;
 440:../cleanflight/src/main/io/serial.c **** #endif
 441:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_2
 442:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_SPIS2:
 443:../cleanflight/src/main/io/serial.c ****         	serialPort = spiSlaveOpen(SPIDEV_2, rxCallback, rxCallbackData, baudRate, mode, options);
 444:../cleanflight/src/main/io/serial.c **** 		break;
 445:../cleanflight/src/main/io/serial.c **** #endif
 446:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_3
 447:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_SPIS3:
 448:../cleanflight/src/main/io/serial.c ****         	serialPort = spiSlaveOpen(SPIDEV_3, rxCallback, rxCallbackData, baudRate, mode, options);
 1519              	 .loc 3 448 0
 1520 0116 97F82430 	 ldrb r3,[r7,#36]
 1521 011a 0093     	 str r3,[sp]
 1522 011c 97F82830 	 ldrb r3,[r7,#40]
 1523 0120 0193     	 str r3,[sp,#4]
 1524 0122 0220     	 movs r0,#2
 1525 0124 B968     	 ldr r1,[r7,#8]
 1526 0126 7A68     	 ldr r2,[r7,#4]
 1527 0128 3B6A     	 ldr r3,[r7,#32]
 1528 012a FFF7FEFF 	 bl spiSlaveOpen
 1529 012e 7861     	 str r0,[r7,#20]
 449:../cleanflight/src/main/io/serial.c **** 		break;
 1530              	 .loc 3 449 0
 1531 0130 00E0     	 b .L103
 1532              	.L105:
 450:../cleanflight/src/main/io/serial.c **** #endif
 451:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_4
 452:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_SPIS4:
 453:../cleanflight/src/main/io/serial.c ****         	serialPort = spiSlaveOpen(SPIDEV_4, rxCallback, rxCallbackData, baudRate, mode, options);
 454:../cleanflight/src/main/io/serial.c **** 		break;
 455:../cleanflight/src/main/io/serial.c **** #endif
 456:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_5
 457:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_SPIS5:
 458:../cleanflight/src/main/io/serial.c ****         	serialPort = spiSlaveOpen(SPIDEV_5, rxCallback, rxCallbackData, baudRate, mode, options);
 459:../cleanflight/src/main/io/serial.c **** 		break;
 460:../cleanflight/src/main/io/serial.c **** #endif
 461:../cleanflight/src/main/io/serial.c **** #ifdef USE_SPIS_DEVICE_6
 462:../cleanflight/src/main/io/serial.c ****         case SERIAL_PORT_SPIS6:
 463:../cleanflight/src/main/io/serial.c ****         	serialPort = spiSlaveOpen(SPIDEV_6, rxCallback, rxCallbackData, baudRate, mode, options);
 464:../cleanflight/src/main/io/serial.c **** 		break;
 465:../cleanflight/src/main/io/serial.c **** #endif
 466:../cleanflight/src/main/io/serial.c ****         default:
 467:../cleanflight/src/main/io/serial.c ****             break;
 1533              	 .loc 3 467 0
 1534 0132 00BF     	 nop
 1535              	.L103:
 468:../cleanflight/src/main/io/serial.c ****     }
 469:../cleanflight/src/main/io/serial.c **** 
 470:../cleanflight/src/main/io/serial.c ****     if (!serialPort) {
 1536              	 .loc 3 470 0
 1537 0134 7B69     	 ldr r3,[r7,#20]
 1538 0136 002B     	 cmp r3,#0
 1539 0138 01D1     	 bne .L104
 471:../cleanflight/src/main/io/serial.c ****         return NULL;
 1540              	 .loc 3 471 0
 1541 013a 0023     	 movs r3,#0
 1542 013c 0AE0     	 b .L97
 1543              	.L104:
 472:../cleanflight/src/main/io/serial.c ****     }
 473:../cleanflight/src/main/io/serial.c **** 
 474:../cleanflight/src/main/io/serial.c ****     serialPort->identifier = identifier;
 1544              	 .loc 3 474 0
 1545 013e FA7B     	 ldrb r2,[r7,#15]
 1546 0140 7B69     	 ldr r3,[r7,#20]
 1547 0142 83F83220 	 strb r2,[r3,#50]
 475:../cleanflight/src/main/io/serial.c **** 
 476:../cleanflight/src/main/io/serial.c ****     serialPortUsage->function = function;
 1548              	 .loc 3 476 0
 1549 0146 3B69     	 ldr r3,[r7,#16]
 1550 0148 BA89     	 ldrh r2,[r7,#12]
 1551 014a 9A80     	 strh r2,[r3,#4]
 477:../cleanflight/src/main/io/serial.c ****     serialPortUsage->serialPort = serialPort;
 1552              	 .loc 3 477 0
 1553 014c 3B69     	 ldr r3,[r7,#16]
 1554 014e 7A69     	 ldr r2,[r7,#20]
 1555 0150 1A60     	 str r2,[r3]
 478:../cleanflight/src/main/io/serial.c **** 
 479:../cleanflight/src/main/io/serial.c ****     return serialPort;
 1556              	 .loc 3 479 0
 1557 0152 7B69     	 ldr r3,[r7,#20]
 1558              	.L97:
 480:../cleanflight/src/main/io/serial.c **** }
 1559              	 .loc 3 480 0
 1560 0154 1846     	 mov r0,r3
 1561 0156 1837     	 adds r7,r7,#24
 1562              	.LCFI87:
 1563              	 .cfi_def_cfa_offset 8
 1564 0158 BD46     	 mov sp,r7
 1565              	.LCFI88:
 1566              	 .cfi_def_cfa_register 13
 1567              	 
 1568 015a 80BD     	 pop {r7,pc}
 1569              	 .cfi_endproc
 1570              	.LFE552:
 1572              	 .section .text.closeSerialPort,"ax",%progbits
 1573              	 .align 2
 1574              	 .global closeSerialPort
 1575              	 .thumb
 1576              	 .thumb_func
 1578              	closeSerialPort:
 1579              	.LFB553:
 481:../cleanflight/src/main/io/serial.c **** 
 482:../cleanflight/src/main/io/serial.c **** void closeSerialPort(serialPort_t *serialPort)
 483:../cleanflight/src/main/io/serial.c **** {
 1580              	 .loc 3 483 0
 1581              	 .cfi_startproc
 1582              	 
 1583              	 
 1584 0000 80B5     	 push {r7,lr}
 1585              	.LCFI89:
 1586              	 .cfi_def_cfa_offset 8
 1587              	 .cfi_offset 7,-8
 1588              	 .cfi_offset 14,-4
 1589 0002 84B0     	 sub sp,sp,#16
 1590              	.LCFI90:
 1591              	 .cfi_def_cfa_offset 24
 1592 0004 00AF     	 add r7,sp,#0
 1593              	.LCFI91:
 1594              	 .cfi_def_cfa_register 7
 1595 0006 7860     	 str r0,[r7,#4]
 484:../cleanflight/src/main/io/serial.c ****     serialPortUsage_t *serialPortUsage = findSerialPortUsageByPort(serialPort);
 1596              	 .loc 3 484 0
 1597 0008 7868     	 ldr r0,[r7,#4]
 1598 000a FFF7FEFF 	 bl findSerialPortUsageByPort
 1599 000e F860     	 str r0,[r7,#12]
 485:../cleanflight/src/main/io/serial.c ****     if (!serialPortUsage) {
 1600              	 .loc 3 485 0
 1601 0010 FB68     	 ldr r3,[r7,#12]
 1602 0012 002B     	 cmp r3,#0
 1603 0014 00D1     	 bne .L107
 486:../cleanflight/src/main/io/serial.c ****         // already closed
 487:../cleanflight/src/main/io/serial.c ****         return;
 1604              	 .loc 3 487 0
 1605 0016 1AE0     	 b .L106
 1606              	.L107:
 488:../cleanflight/src/main/io/serial.c ****     }
 489:../cleanflight/src/main/io/serial.c **** 
 490:../cleanflight/src/main/io/serial.c ****     // TODO wait until data has been transmitted.
 491:../cleanflight/src/main/io/serial.c ****     serialPort->rxCallback = NULL;
 1607              	 .loc 3 491 0
 1608 0018 7B68     	 ldr r3,[r7,#4]
 1609 001a 0022     	 movs r2,#0
 1610 001c 83F82A20 	 strb r2,[r3,#42]
 1611 0020 0022     	 movs r2,#0
 1612 0022 83F82B20 	 strb r2,[r3,#43]
 1613 0026 0022     	 movs r2,#0
 1614 0028 83F82C20 	 strb r2,[r3,#44]
 1615 002c 0022     	 movs r2,#0
 1616 002e 83F82D20 	 strb r2,[r3,#45]
 492:../cleanflight/src/main/io/serial.c **** 
 493:../cleanflight/src/main/io/serial.c ****     serialPortUsage->function = FUNCTION_NONE;
 1617              	 .loc 3 493 0
 1618 0032 FB68     	 ldr r3,[r7,#12]
 1619 0034 0022     	 movs r2,#0
 1620 0036 1A71     	 strb r2,[r3,#4]
 1621 0038 0022     	 movs r2,#0
 1622 003a 5A71     	 strb r2,[r3,#5]
 494:../cleanflight/src/main/io/serial.c ****     serialPortUsage->serialPort = NULL;
 1623              	 .loc 3 494 0
 1624 003c FB68     	 ldr r3,[r7,#12]
 1625 003e 0022     	 movs r2,#0
 1626 0040 1A70     	 strb r2,[r3]
 1627 0042 0022     	 movs r2,#0
 1628 0044 5A70     	 strb r2,[r3,#1]
 1629 0046 0022     	 movs r2,#0
 1630 0048 9A70     	 strb r2,[r3,#2]
 1631 004a 0022     	 movs r2,#0
 1632 004c DA70     	 strb r2,[r3,#3]
 1633              	.L106:
 495:../cleanflight/src/main/io/serial.c **** }
 1634              	 .loc 3 495 0
 1635 004e 1037     	 adds r7,r7,#16
 1636              	.LCFI92:
 1637              	 .cfi_def_cfa_offset 8
 1638 0050 BD46     	 mov sp,r7
 1639              	.LCFI93:
 1640              	 .cfi_def_cfa_register 13
 1641              	 
 1642 0052 80BD     	 pop {r7,pc}
 1643              	 .cfi_endproc
 1644              	.LFE553:
 1646              	 .section .text.serialInit,"ax",%progbits
 1647              	 .align 2
 1648              	 .global serialInit
 1649              	 .thumb
 1650              	 .thumb_func
 1652              	serialInit:
 1653              	.LFB554:
 496:../cleanflight/src/main/io/serial.c **** 
 497:../cleanflight/src/main/io/serial.c **** void serialInit(bool softserialEnabled, serialPortIdentifier_e serialPortToDisable)
 498:../cleanflight/src/main/io/serial.c **** {
 1654              	 .loc 3 498 0
 1655              	 .cfi_startproc
 1656              	 
 1657              	 
 1658 0000 80B5     	 push {r7,lr}
 1659              	.LCFI94:
 1660              	 .cfi_def_cfa_offset 8
 1661              	 .cfi_offset 7,-8
 1662              	 .cfi_offset 14,-4
 1663 0002 84B0     	 sub sp,sp,#16
 1664              	.LCFI95:
 1665              	 .cfi_def_cfa_offset 24
 1666 0004 00AF     	 add r7,sp,#0
 1667              	.LCFI96:
 1668              	 .cfi_def_cfa_register 7
 1669 0006 0346     	 mov r3,r0
 1670 0008 0A46     	 mov r2,r1
 1671 000a FB71     	 strb r3,[r7,#7]
 1672 000c 1346     	 mov r3,r2
 1673 000e BB71     	 strb r3,[r7,#6]
 499:../cleanflight/src/main/io/serial.c **** #if !defined(USE_SOFTSERIAL1) && !defined(USE_SOFTSERIAL2)
 500:../cleanflight/src/main/io/serial.c ****     UNUSED(softserialEnabled);
 501:../cleanflight/src/main/io/serial.c **** #endif
 502:../cleanflight/src/main/io/serial.c **** 
 503:../cleanflight/src/main/io/serial.c ****     serialPortCount = SERIAL_PORT_COUNT;
 1674              	 .loc 3 503 0
 1675 0010 554B     	 ldr r3,.L120
 1676 0012 0522     	 movs r2,#5
 1677 0014 1A70     	 strb r2,[r3]
 504:../cleanflight/src/main/io/serial.c ****     memset(&serialPortUsageList, 0, sizeof(serialPortUsageList));
 1678              	 .loc 3 504 0
 1679 0016 5548     	 ldr r0,.L120+4
 1680 0018 0021     	 movs r1,#0
 1681 001a 2322     	 movs r2,#35
 1682 001c FFF7FEFF 	 bl memset
 1683              	.LBB14:
 505:../cleanflight/src/main/io/serial.c **** 
 506:../cleanflight/src/main/io/serial.c ****     for (int index = 0; index < SERIAL_PORT_COUNT; index++) {
 1684              	 .loc 3 506 0
 1685 0020 0023     	 movs r3,#0
 1686 0022 FB60     	 str r3,[r7,#12]
 1687 0024 98E0     	 b .L110
 1688              	.L119:
 507:../cleanflight/src/main/io/serial.c ****         serialPortUsageList[index].identifier = serialPortIdentifiers[index];
 1689              	 .loc 3 507 0
 1690 0026 524A     	 ldr r2,.L120+8
 1691 0028 FB68     	 ldr r3,[r7,#12]
 1692 002a 1344     	 add r3,r3,r2
 1693 002c 1878     	 ldrb r0,[r3]
 1694 002e 4F49     	 ldr r1,.L120+4
 1695 0030 FA68     	 ldr r2,[r7,#12]
 1696 0032 1346     	 mov r3,r2
 1697 0034 DB00     	 lsls r3,r3,#3
 1698 0036 9B1A     	 subs r3,r3,r2
 1699 0038 0B44     	 add r3,r3,r1
 1700 003a 0246     	 mov r2,r0
 1701 003c 9A71     	 strb r2,[r3,#6]
 508:../cleanflight/src/main/io/serial.c **** 
 509:../cleanflight/src/main/io/serial.c ****         if (serialPortToDisable != SERIAL_PORT_NONE) {
 1702              	 .loc 3 509 0
 1703 003e 97F90630 	 ldrsb r3,[r7,#6]
 1704 0042 B3F1FF3F 	 cmp r3,#-1
 1705 0046 1AD0     	 beq .L111
 510:../cleanflight/src/main/io/serial.c ****             if (serialPortUsageList[index].identifier == serialPortToDisable) {
 1706              	 .loc 3 510 0
 1707 0048 4849     	 ldr r1,.L120+4
 1708 004a FA68     	 ldr r2,[r7,#12]
 1709 004c 1346     	 mov r3,r2
 1710 004e DB00     	 lsls r3,r3,#3
 1711 0050 9B1A     	 subs r3,r3,r2
 1712 0052 0B44     	 add r3,r3,r1
 1713 0054 9B79     	 ldrb r3,[r3,#6]
 1714 0056 97F90620 	 ldrsb r2,[r7,#6]
 1715 005a 5BB2     	 sxtb r3,r3
 1716 005c 9A42     	 cmp r2,r3
 1717 005e 78D1     	 bne .L113
 511:../cleanflight/src/main/io/serial.c ****                 serialPortUsageList[index].identifier = SERIAL_PORT_NONE;
 1718              	 .loc 3 511 0
 1719 0060 4249     	 ldr r1,.L120+4
 1720 0062 FA68     	 ldr r2,[r7,#12]
 1721 0064 1346     	 mov r3,r2
 1722 0066 DB00     	 lsls r3,r3,#3
 1723 0068 9B1A     	 subs r3,r3,r2
 1724 006a 0B44     	 add r3,r3,r1
 1725 006c FF22     	 movs r2,#255
 1726 006e 9A71     	 strb r2,[r3,#6]
 512:../cleanflight/src/main/io/serial.c ****                 serialPortCount--;
 1727              	 .loc 3 512 0
 1728 0070 3D4B     	 ldr r3,.L120
 1729 0072 1B78     	 ldrb r3,[r3]
 1730 0074 013B     	 subs r3,r3,#1
 1731 0076 DAB2     	 uxtb r2,r3
 1732 0078 3B4B     	 ldr r3,.L120
 1733 007a 1A70     	 strb r2,[r3]
 1734 007c 69E0     	 b .L113
 1735              	.L111:
 513:../cleanflight/src/main/io/serial.c ****             }
 514:../cleanflight/src/main/io/serial.c ****         }
 515:../cleanflight/src/main/io/serial.c **** 
 516:../cleanflight/src/main/io/serial.c **** #if !defined(SIMULATOR_BUILD)
 517:../cleanflight/src/main/io/serial.c ****         else if (serialPortUsageList[index].identifier <= SERIAL_PORT_USART8) {
 1736              	 .loc 3 517 0
 1737 007e 3B49     	 ldr r1,.L120+4
 1738 0080 FA68     	 ldr r2,[r7,#12]
 1739 0082 1346     	 mov r3,r2
 1740 0084 DB00     	 lsls r3,r3,#3
 1741 0086 9B1A     	 subs r3,r3,r2
 1742 0088 0B44     	 add r3,r3,r1
 1743 008a 9B79     	 ldrb r3,[r3,#6]
 1744 008c 5BB2     	 sxtb r3,r3
 1745 008e 072B     	 cmp r3,#7
 1746 0090 3DDC     	 bgt .L114
 1747              	.LBB15:
 518:../cleanflight/src/main/io/serial.c ****             int resourceIndex = SERIAL_PORT_IDENTIFIER_TO_INDEX(serialPortUsageList[index].identifi
 1748              	 .loc 3 518 0
 1749 0092 3649     	 ldr r1,.L120+4
 1750 0094 FA68     	 ldr r2,[r7,#12]
 1751 0096 1346     	 mov r3,r2
 1752 0098 DB00     	 lsls r3,r3,#3
 1753 009a 9B1A     	 subs r3,r3,r2
 1754 009c 0B44     	 add r3,r3,r1
 1755 009e 9B79     	 ldrb r3,[r3,#6]
 1756 00a0 5BB2     	 sxtb r3,r3
 1757 00a2 072B     	 cmp r3,#7
 1758 00a4 08DC     	 bgt .L115
 1759              	 .loc 3 518 0 is_stmt 0 discriminator 1
 1760 00a6 3149     	 ldr r1,.L120+4
 1761 00a8 FA68     	 ldr r2,[r7,#12]
 1762 00aa 1346     	 mov r3,r2
 1763 00ac DB00     	 lsls r3,r3,#3
 1764 00ae 9B1A     	 subs r3,r3,r2
 1765 00b0 0B44     	 add r3,r3,r1
 1766 00b2 9B79     	 ldrb r3,[r3,#6]
 1767 00b4 5BB2     	 sxtb r3,r3
 1768 00b6 08E0     	 b .L116
 1769              	.L115:
 1770              	 .loc 3 518 0 discriminator 2
 1771 00b8 2C49     	 ldr r1,.L120+4
 1772 00ba FA68     	 ldr r2,[r7,#12]
 1773 00bc 1346     	 mov r3,r2
 1774 00be DB00     	 lsls r3,r3,#3
 1775 00c0 9B1A     	 subs r3,r3,r2
 1776 00c2 0B44     	 add r3,r3,r1
 1777 00c4 9B79     	 ldrb r3,[r3,#6]
 1778 00c6 5BB2     	 sxtb r3,r3
 1779 00c8 143B     	 subs r3,r3,#20
 1780              	.L116:
 1781              	 .loc 3 518 0 discriminator 4
 1782 00ca BB60     	 str r3,[r7,#8]
 519:../cleanflight/src/main/io/serial.c ****             if (!(serialPinConfig()->ioTagTx[resourceIndex] || serialPinConfig()->ioTagRx[resourceI
 1783              	 .loc 3 519 0 is_stmt 1 discriminator 4
 1784 00cc FFF7FEFF 	 bl serialPinConfig
 1785 00d0 0246     	 mov r2,r0
 1786 00d2 BB68     	 ldr r3,[r7,#8]
 1787 00d4 1344     	 add r3,r3,r2
 1788 00d6 1B78     	 ldrb r3,[r3]
 1789 00d8 002B     	 cmp r3,#0
 1790 00da 17D1     	 bne .L117
 1791              	 .loc 3 519 0 is_stmt 0 discriminator 1
 1792 00dc FFF7FEFF 	 bl serialPinConfig
 1793 00e0 0246     	 mov r2,r0
 1794 00e2 BB68     	 ldr r3,[r7,#8]
 1795 00e4 1344     	 add r3,r3,r2
 1796 00e6 0833     	 adds r3,r3,#8
 1797 00e8 9B78     	 ldrb r3,[r3,#2]
 1798 00ea 002B     	 cmp r3,#0
 1799 00ec 0ED1     	 bne .L117
 520:../cleanflight/src/main/io/serial.c ****                 serialPortUsageList[index].identifier = SERIAL_PORT_NONE;
 1800              	 .loc 3 520 0 is_stmt 1
 1801 00ee 1F49     	 ldr r1,.L120+4
 1802 00f0 FA68     	 ldr r2,[r7,#12]
 1803 00f2 1346     	 mov r3,r2
 1804 00f4 DB00     	 lsls r3,r3,#3
 1805 00f6 9B1A     	 subs r3,r3,r2
 1806 00f8 0B44     	 add r3,r3,r1
 1807 00fa FF22     	 movs r2,#255
 1808 00fc 9A71     	 strb r2,[r3,#6]
 521:../cleanflight/src/main/io/serial.c ****                 serialPortCount--;
 1809              	 .loc 3 521 0
 1810 00fe 1A4B     	 ldr r3,.L120
 1811 0100 1B78     	 ldrb r3,[r3]
 1812 0102 013B     	 subs r3,r3,#1
 1813 0104 DAB2     	 uxtb r2,r3
 1814 0106 184B     	 ldr r3,.L120
 1815 0108 1A70     	 strb r2,[r3]
 1816              	.LBE15:
 1817 010a 22E0     	 b .L113
 1818              	.L117:
 1819 010c 21E0     	 b .L113
 1820              	.L114:
 522:../cleanflight/src/main/io/serial.c ****             }
 523:../cleanflight/src/main/io/serial.c ****         }
 524:../cleanflight/src/main/io/serial.c **** #endif
 525:../cleanflight/src/main/io/serial.c **** 
 526:../cleanflight/src/main/io/serial.c ****         else if ((serialPortUsageList[index].identifier == SERIAL_PORT_SOFTSERIAL1
 1821              	 .loc 3 526 0
 1822 010e 1749     	 ldr r1,.L120+4
 1823 0110 FA68     	 ldr r2,[r7,#12]
 1824 0112 1346     	 mov r3,r2
 1825 0114 DB00     	 lsls r3,r3,#3
 1826 0116 9B1A     	 subs r3,r3,r2
 1827 0118 0B44     	 add r3,r3,r1
 1828 011a 9B79     	 ldrb r3,[r3,#6]
 1829 011c 5BB2     	 sxtb r3,r3
 1830 011e 1E2B     	 cmp r3,#30
 1831 0120 09D0     	 beq .L118
 527:../cleanflight/src/main/io/serial.c **** #ifdef USE_SOFTSERIAL1
 528:../cleanflight/src/main/io/serial.c ****             && !(softserialEnabled && (serialPinConfig()->ioTagTx[RESOURCE_SOFT_OFFSET + SOFTSERIAL
 529:../cleanflight/src/main/io/serial.c ****                 serialPinConfig()->ioTagRx[RESOURCE_SOFT_OFFSET + SOFTSERIAL1]))
 530:../cleanflight/src/main/io/serial.c **** #endif
 531:../cleanflight/src/main/io/serial.c ****            ) || (serialPortUsageList[index].identifier == SERIAL_PORT_SOFTSERIAL2
 1832              	 .loc 3 531 0
 1833 0122 1249     	 ldr r1,.L120+4
 1834 0124 FA68     	 ldr r2,[r7,#12]
 1835 0126 1346     	 mov r3,r2
 1836 0128 DB00     	 lsls r3,r3,#3
 1837 012a 9B1A     	 subs r3,r3,r2
 1838 012c 0B44     	 add r3,r3,r1
 1839 012e 9B79     	 ldrb r3,[r3,#6]
 1840 0130 5BB2     	 sxtb r3,r3
 1841 0132 1F2B     	 cmp r3,#31
 1842 0134 0DD1     	 bne .L113
 1843              	.L118:
 532:../cleanflight/src/main/io/serial.c **** #ifdef USE_SOFTSERIAL2
 533:../cleanflight/src/main/io/serial.c ****             && !(softserialEnabled && (serialPinConfig()->ioTagTx[RESOURCE_SOFT_OFFSET + SOFTSERIAL
 534:../cleanflight/src/main/io/serial.c ****                 serialPinConfig()->ioTagRx[RESOURCE_SOFT_OFFSET + SOFTSERIAL2]))
 535:../cleanflight/src/main/io/serial.c **** #endif
 536:../cleanflight/src/main/io/serial.c ****             )) {
 537:../cleanflight/src/main/io/serial.c ****             serialPortUsageList[index].identifier = SERIAL_PORT_NONE;
 1844              	 .loc 3 537 0
 1845 0136 0D49     	 ldr r1,.L120+4
 1846 0138 FA68     	 ldr r2,[r7,#12]
 1847 013a 1346     	 mov r3,r2
 1848 013c DB00     	 lsls r3,r3,#3
 1849 013e 9B1A     	 subs r3,r3,r2
 1850 0140 0B44     	 add r3,r3,r1
 1851 0142 FF22     	 movs r2,#255
 1852 0144 9A71     	 strb r2,[r3,#6]
 538:../cleanflight/src/main/io/serial.c ****             serialPortCount--;
 1853              	 .loc 3 538 0
 1854 0146 084B     	 ldr r3,.L120
 1855 0148 1B78     	 ldrb r3,[r3]
 1856 014a 013B     	 subs r3,r3,#1
 1857 014c DAB2     	 uxtb r2,r3
 1858 014e 064B     	 ldr r3,.L120
 1859 0150 1A70     	 strb r2,[r3]
 1860              	.L113:
 506:../cleanflight/src/main/io/serial.c ****         serialPortUsageList[index].identifier = serialPortIdentifiers[index];
 1861              	 .loc 3 506 0 discriminator 2
 1862 0152 FB68     	 ldr r3,[r7,#12]
 1863 0154 0133     	 adds r3,r3,#1
 1864 0156 FB60     	 str r3,[r7,#12]
 1865              	.L110:
 506:../cleanflight/src/main/io/serial.c ****         serialPortUsageList[index].identifier = serialPortIdentifiers[index];
 1866              	 .loc 3 506 0 is_stmt 0 discriminator 1
 1867 0158 FB68     	 ldr r3,[r7,#12]
 1868 015a 042B     	 cmp r3,#4
 1869 015c 7FF763AF 	 ble .L119
 1870              	.LBE14:
 539:../cleanflight/src/main/io/serial.c ****         }
 540:../cleanflight/src/main/io/serial.c ****     }
 541:../cleanflight/src/main/io/serial.c **** }
 1871              	 .loc 3 541 0 is_stmt 1
 1872 0160 1037     	 adds r7,r7,#16
 1873              	.LCFI97:
 1874              	 .cfi_def_cfa_offset 8
 1875 0162 BD46     	 mov sp,r7
 1876              	.LCFI98:
 1877              	 .cfi_def_cfa_register 13
 1878              	 
 1879 0164 80BD     	 pop {r7,pc}
 1880              	.L121:
 1881 0166 00BF     	 .align 2
 1882              	.L120:
 1883 0168 00000000 	 .word serialPortCount
 1884 016c 00000000 	 .word serialPortUsageList
 1885 0170 00000000 	 .word serialPortIdentifiers
 1886              	 .cfi_endproc
 1887              	.LFE554:
 1889              	 .section .text.serialRemovePort,"ax",%progbits
 1890              	 .align 2
 1891              	 .global serialRemovePort
 1892              	 .thumb
 1893              	 .thumb_func
 1895              	serialRemovePort:
 1896              	.LFB555:
 542:../cleanflight/src/main/io/serial.c **** 
 543:../cleanflight/src/main/io/serial.c **** void serialRemovePort(serialPortIdentifier_e identifier)
 544:../cleanflight/src/main/io/serial.c **** {
 1897              	 .loc 3 544 0
 1898              	 .cfi_startproc
 1899              	 
 1900              	 
 1901              	 
 1902 0000 80B4     	 push {r7}
 1903              	.LCFI99:
 1904              	 .cfi_def_cfa_offset 4
 1905              	 .cfi_offset 7,-4
 1906 0002 85B0     	 sub sp,sp,#20
 1907              	.LCFI100:
 1908              	 .cfi_def_cfa_offset 24
 1909 0004 00AF     	 add r7,sp,#0
 1910              	.LCFI101:
 1911              	 .cfi_def_cfa_register 7
 1912 0006 0346     	 mov r3,r0
 1913 0008 FB71     	 strb r3,[r7,#7]
 1914              	.LBB16:
 545:../cleanflight/src/main/io/serial.c ****     for (uint8_t index = 0; index < SERIAL_PORT_COUNT; index++) {
 1915              	 .loc 3 545 0
 1916 000a 0023     	 movs r3,#0
 1917 000c FB73     	 strb r3,[r7,#15]
 1918 000e 1CE0     	 b .L123
 1919              	.L125:
 546:../cleanflight/src/main/io/serial.c ****         if (serialPortUsageList[index].identifier == identifier) {
 1920              	 .loc 3 546 0
 1921 0010 FA7B     	 ldrb r2,[r7,#15]
 1922 0012 1249     	 ldr r1,.L126
 1923 0014 1346     	 mov r3,r2
 1924 0016 DB00     	 lsls r3,r3,#3
 1925 0018 9B1A     	 subs r3,r3,r2
 1926 001a 0B44     	 add r3,r3,r1
 1927 001c 9B79     	 ldrb r3,[r3,#6]
 1928 001e 97F90720 	 ldrsb r2,[r7,#7]
 1929 0022 5BB2     	 sxtb r3,r3
 1930 0024 9A42     	 cmp r2,r3
 1931 0026 0DD1     	 bne .L124
 547:../cleanflight/src/main/io/serial.c ****             serialPortUsageList[index].identifier = SERIAL_PORT_NONE;
 1932              	 .loc 3 547 0
 1933 0028 FA7B     	 ldrb r2,[r7,#15]
 1934 002a 0C49     	 ldr r1,.L126
 1935 002c 1346     	 mov r3,r2
 1936 002e DB00     	 lsls r3,r3,#3
 1937 0030 9B1A     	 subs r3,r3,r2
 1938 0032 0B44     	 add r3,r3,r1
 1939 0034 FF22     	 movs r2,#255
 1940 0036 9A71     	 strb r2,[r3,#6]
 548:../cleanflight/src/main/io/serial.c ****             serialPortCount--;
 1941              	 .loc 3 548 0
 1942 0038 094B     	 ldr r3,.L126+4
 1943 003a 1B78     	 ldrb r3,[r3]
 1944 003c 013B     	 subs r3,r3,#1
 1945 003e DAB2     	 uxtb r2,r3
 1946 0040 074B     	 ldr r3,.L126+4
 1947 0042 1A70     	 strb r2,[r3]
 1948              	.L124:
 545:../cleanflight/src/main/io/serial.c ****         if (serialPortUsageList[index].identifier == identifier) {
 1949              	 .loc 3 545 0 discriminator 2
 1950 0044 FB7B     	 ldrb r3,[r7,#15]
 1951 0046 0133     	 adds r3,r3,#1
 1952 0048 FB73     	 strb r3,[r7,#15]
 1953              	.L123:
 545:../cleanflight/src/main/io/serial.c ****         if (serialPortUsageList[index].identifier == identifier) {
 1954              	 .loc 3 545 0 is_stmt 0 discriminator 1
 1955 004a FB7B     	 ldrb r3,[r7,#15]
 1956 004c 042B     	 cmp r3,#4
 1957 004e DFD9     	 bls .L125
 1958              	.LBE16:
 549:../cleanflight/src/main/io/serial.c ****         }
 550:../cleanflight/src/main/io/serial.c ****     }
 551:../cleanflight/src/main/io/serial.c **** }
 1959              	 .loc 3 551 0 is_stmt 1
 1960 0050 1437     	 adds r7,r7,#20
 1961              	.LCFI102:
 1962              	 .cfi_def_cfa_offset 4
 1963 0052 BD46     	 mov sp,r7
 1964              	.LCFI103:
 1965              	 .cfi_def_cfa_register 13
 1966              	 
 1967 0054 5DF8047B 	 ldr r7,[sp],#4
 1968              	.LCFI104:
 1969              	 .cfi_restore 7
 1970              	 .cfi_def_cfa_offset 0
 1971 0058 7047     	 bx lr
 1972              	.L127:
 1973 005a 00BF     	 .align 2
 1974              	.L126:
 1975 005c 00000000 	 .word serialPortUsageList
 1976 0060 00000000 	 .word serialPortCount
 1977              	 .cfi_endproc
 1978              	.LFE555:
 1980              	 .section .text.serialGetAvailablePortCount,"ax",%progbits
 1981              	 .align 2
 1982              	 .global serialGetAvailablePortCount
 1983              	 .thumb
 1984              	 .thumb_func
 1986              	serialGetAvailablePortCount:
 1987              	.LFB556:
 552:../cleanflight/src/main/io/serial.c **** 
 553:../cleanflight/src/main/io/serial.c **** uint8_t serialGetAvailablePortCount(void)
 554:../cleanflight/src/main/io/serial.c **** {
 1988              	 .loc 3 554 0
 1989              	 .cfi_startproc
 1990              	 
 1991              	 
 1992              	 
 1993 0000 80B4     	 push {r7}
 1994              	.LCFI105:
 1995              	 .cfi_def_cfa_offset 4
 1996              	 .cfi_offset 7,-4
 1997 0002 00AF     	 add r7,sp,#0
 1998              	.LCFI106:
 1999              	 .cfi_def_cfa_register 7
 555:../cleanflight/src/main/io/serial.c ****     return serialPortCount;
 2000              	 .loc 3 555 0
 2001 0004 034B     	 ldr r3,.L130
 2002 0006 1B78     	 ldrb r3,[r3]
 556:../cleanflight/src/main/io/serial.c **** }
 2003              	 .loc 3 556 0
 2004 0008 1846     	 mov r0,r3
 2005 000a BD46     	 mov sp,r7
 2006              	.LCFI107:
 2007              	 .cfi_def_cfa_register 13
 2008              	 
 2009 000c 5DF8047B 	 ldr r7,[sp],#4
 2010              	.LCFI108:
 2011              	 .cfi_restore 7
 2012              	 .cfi_def_cfa_offset 0
 2013 0010 7047     	 bx lr
 2014              	.L131:
 2015 0012 00BF     	 .align 2
 2016              	.L130:
 2017 0014 00000000 	 .word serialPortCount
 2018              	 .cfi_endproc
 2019              	.LFE556:
 2021              	 .section .text.serialIsPortAvailable,"ax",%progbits
 2022              	 .align 2
 2023              	 .global serialIsPortAvailable
 2024              	 .thumb
 2025              	 .thumb_func
 2027              	serialIsPortAvailable:
 2028              	.LFB557:
 557:../cleanflight/src/main/io/serial.c **** 
 558:../cleanflight/src/main/io/serial.c **** bool serialIsPortAvailable(serialPortIdentifier_e identifier)
 559:../cleanflight/src/main/io/serial.c **** {
 2029              	 .loc 3 559 0
 2030              	 .cfi_startproc
 2031              	 
 2032              	 
 2033              	 
 2034 0000 80B4     	 push {r7}
 2035              	.LCFI109:
 2036              	 .cfi_def_cfa_offset 4
 2037              	 .cfi_offset 7,-4
 2038 0002 85B0     	 sub sp,sp,#20
 2039              	.LCFI110:
 2040              	 .cfi_def_cfa_offset 24
 2041 0004 00AF     	 add r7,sp,#0
 2042              	.LCFI111:
 2043              	 .cfi_def_cfa_register 7
 2044 0006 0346     	 mov r3,r0
 2045 0008 FB71     	 strb r3,[r7,#7]
 2046              	.LBB17:
 560:../cleanflight/src/main/io/serial.c ****     for (uint8_t index = 0; index < SERIAL_PORT_COUNT; index++) {
 2047              	 .loc 3 560 0
 2048 000a 0023     	 movs r3,#0
 2049 000c FB73     	 strb r3,[r7,#15]
 2050 000e 10E0     	 b .L133
 2051              	.L136:
 561:../cleanflight/src/main/io/serial.c ****         if (serialPortUsageList[index].identifier == identifier) {
 2052              	 .loc 3 561 0
 2053 0010 FA7B     	 ldrb r2,[r7,#15]
 2054 0012 0D49     	 ldr r1,.L137
 2055 0014 1346     	 mov r3,r2
 2056 0016 DB00     	 lsls r3,r3,#3
 2057 0018 9B1A     	 subs r3,r3,r2
 2058 001a 0B44     	 add r3,r3,r1
 2059 001c 9B79     	 ldrb r3,[r3,#6]
 2060 001e 97F90720 	 ldrsb r2,[r7,#7]
 2061 0022 5BB2     	 sxtb r3,r3
 2062 0024 9A42     	 cmp r2,r3
 2063 0026 01D1     	 bne .L134
 562:../cleanflight/src/main/io/serial.c ****             return true;
 2064              	 .loc 3 562 0
 2065 0028 0123     	 movs r3,#1
 2066 002a 06E0     	 b .L135
 2067              	.L134:
 560:../cleanflight/src/main/io/serial.c ****     for (uint8_t index = 0; index < SERIAL_PORT_COUNT; index++) {
 2068              	 .loc 3 560 0 discriminator 2
 2069 002c FB7B     	 ldrb r3,[r7,#15]
 2070 002e 0133     	 adds r3,r3,#1
 2071 0030 FB73     	 strb r3,[r7,#15]
 2072              	.L133:
 560:../cleanflight/src/main/io/serial.c ****     for (uint8_t index = 0; index < SERIAL_PORT_COUNT; index++) {
 2073              	 .loc 3 560 0 is_stmt 0 discriminator 1
 2074 0032 FB7B     	 ldrb r3,[r7,#15]
 2075 0034 042B     	 cmp r3,#4
 2076 0036 EBD9     	 bls .L136
 2077              	.LBE17:
 563:../cleanflight/src/main/io/serial.c ****         }
 564:../cleanflight/src/main/io/serial.c ****     }
 565:../cleanflight/src/main/io/serial.c ****     return false;
 2078              	 .loc 3 565 0 is_stmt 1
 2079 0038 0023     	 movs r3,#0
 2080              	.L135:
 566:../cleanflight/src/main/io/serial.c **** }
 2081              	 .loc 3 566 0
 2082 003a 1846     	 mov r0,r3
 2083 003c 1437     	 adds r7,r7,#20
 2084              	.LCFI112:
 2085              	 .cfi_def_cfa_offset 4
 2086 003e BD46     	 mov sp,r7
 2087              	.LCFI113:
 2088              	 .cfi_def_cfa_register 13
 2089              	 
 2090 0040 5DF8047B 	 ldr r7,[sp],#4
 2091              	.LCFI114:
 2092              	 .cfi_restore 7
 2093              	 .cfi_def_cfa_offset 0
 2094 0044 7047     	 bx lr
 2095              	.L138:
 2096 0046 00BF     	 .align 2
 2097              	.L137:
 2098 0048 00000000 	 .word serialPortUsageList
 2099              	 .cfi_endproc
 2100              	.LFE557:
 2102              	 .section .text.waitForSerialPortToFinishTransmitting,"ax",%progbits
 2103              	 .align 2
 2104              	 .global waitForSerialPortToFinishTransmitting
 2105              	 .thumb
 2106              	 .thumb_func
 2108              	waitForSerialPortToFinishTransmitting:
 2109              	.LFB558:
 567:../cleanflight/src/main/io/serial.c **** 
 568:../cleanflight/src/main/io/serial.c **** void waitForSerialPortToFinishTransmitting(serialPort_t *serialPort)
 569:../cleanflight/src/main/io/serial.c **** {
 2110              	 .loc 3 569 0
 2111              	 .cfi_startproc
 2112              	 
 2113              	 
 2114 0000 80B5     	 push {r7,lr}
 2115              	.LCFI115:
 2116              	 .cfi_def_cfa_offset 8
 2117              	 .cfi_offset 7,-8
 2118              	 .cfi_offset 14,-4
 2119 0002 82B0     	 sub sp,sp,#8
 2120              	.LCFI116:
 2121              	 .cfi_def_cfa_offset 16
 2122 0004 00AF     	 add r7,sp,#0
 2123              	.LCFI117:
 2124              	 .cfi_def_cfa_register 7
 2125 0006 7860     	 str r0,[r7,#4]
 570:../cleanflight/src/main/io/serial.c ****     while (!isSerialTransmitBufferEmpty(serialPort)) {
 2126              	 .loc 3 570 0
 2127 0008 02E0     	 b .L140
 2128              	.L141:
 571:../cleanflight/src/main/io/serial.c ****         delay(10);
 2129              	 .loc 3 571 0
 2130 000a 0A20     	 movs r0,#10
 2131 000c FFF7FEFF 	 bl delay
 2132              	.L140:
 570:../cleanflight/src/main/io/serial.c ****     while (!isSerialTransmitBufferEmpty(serialPort)) {
 2133              	 .loc 3 570 0
 2134 0010 7868     	 ldr r0,[r7,#4]
 2135 0012 FFF7FEFF 	 bl isSerialTransmitBufferEmpty
 2136 0016 0346     	 mov r3,r0
 2137 0018 83F00103 	 eor r3,r3,#1
 2138 001c DBB2     	 uxtb r3,r3
 2139 001e 002B     	 cmp r3,#0
 2140 0020 F3D1     	 bne .L141
 572:../cleanflight/src/main/io/serial.c ****     };
 573:../cleanflight/src/main/io/serial.c **** }
 2141              	 .loc 3 573 0
 2142 0022 0837     	 adds r7,r7,#8
 2143              	.LCFI118:
 2144              	 .cfi_def_cfa_offset 8
 2145 0024 BD46     	 mov sp,r7
 2146              	.LCFI119:
 2147              	 .cfi_def_cfa_register 13
 2148              	 
 2149 0026 80BD     	 pop {r7,pc}
 2150              	 .cfi_endproc
 2151              	.LFE558:
 2153              	 .section .text.nopConsumer,"ax",%progbits
 2154              	 .align 2
 2155              	 .thumb
 2156              	 .thumb_func
 2158              	nopConsumer:
 2159              	.LFB559:
 574:../cleanflight/src/main/io/serial.c **** 
 575:../cleanflight/src/main/io/serial.c **** #if defined(USE_GPS) || ! defined(SKIP_SERIAL_PASSTHROUGH)
 576:../cleanflight/src/main/io/serial.c **** // Default data consumer for serialPassThrough.
 577:../cleanflight/src/main/io/serial.c **** static void nopConsumer(uint8_t data)
 578:../cleanflight/src/main/io/serial.c **** {
 2160              	 .loc 3 578 0
 2161              	 .cfi_startproc
 2162              	 
 2163              	 
 2164              	 
 2165 0000 80B4     	 push {r7}
 2166              	.LCFI120:
 2167              	 .cfi_def_cfa_offset 4
 2168              	 .cfi_offset 7,-4
 2169 0002 83B0     	 sub sp,sp,#12
 2170              	.LCFI121:
 2171              	 .cfi_def_cfa_offset 16
 2172 0004 00AF     	 add r7,sp,#0
 2173              	.LCFI122:
 2174              	 .cfi_def_cfa_register 7
 2175 0006 0346     	 mov r3,r0
 2176 0008 FB71     	 strb r3,[r7,#7]
 579:../cleanflight/src/main/io/serial.c ****     UNUSED(data);
 580:../cleanflight/src/main/io/serial.c **** }
 2177              	 .loc 3 580 0
 2178 000a 0C37     	 adds r7,r7,#12
 2179              	.LCFI123:
 2180              	 .cfi_def_cfa_offset 4
 2181 000c BD46     	 mov sp,r7
 2182              	.LCFI124:
 2183              	 .cfi_def_cfa_register 13
 2184              	 
 2185 000e 5DF8047B 	 ldr r7,[sp],#4
 2186              	.LCFI125:
 2187              	 .cfi_restore 7
 2188              	 .cfi_def_cfa_offset 0
 2189 0012 7047     	 bx lr
 2190              	 .cfi_endproc
 2191              	.LFE559:
 2193              	 .section .text.serialPassthrough,"ax",%progbits
 2194              	 .align 2
 2195              	 .global serialPassthrough
 2196              	 .thumb
 2197              	 .thumb_func
 2199              	serialPassthrough:
 2200              	.LFB560:
 581:../cleanflight/src/main/io/serial.c **** 
 582:../cleanflight/src/main/io/serial.c **** /*
 583:../cleanflight/src/main/io/serial.c ****  A high-level serial passthrough implementation. Used by cli to start an
 584:../cleanflight/src/main/io/serial.c ****  arbitrary serial passthrough "proxy". Optional callbacks can be given to allow
 585:../cleanflight/src/main/io/serial.c ****  for specialized data processing.
 586:../cleanflight/src/main/io/serial.c ****  */
 587:../cleanflight/src/main/io/serial.c **** void serialPassthrough(serialPort_t *left, serialPort_t *right, serialConsumer *leftC, serialConsum
 588:../cleanflight/src/main/io/serial.c **** {
 2201              	 .loc 3 588 0
 2202              	 .cfi_startproc
 2203              	 
 2204              	 
 2205 0000 80B5     	 push {r7,lr}
 2206              	.LCFI126:
 2207              	 .cfi_def_cfa_offset 8
 2208              	 .cfi_offset 7,-8
 2209              	 .cfi_offset 14,-4
 2210 0002 86B0     	 sub sp,sp,#24
 2211              	.LCFI127:
 2212              	 .cfi_def_cfa_offset 32
 2213 0004 00AF     	 add r7,sp,#0
 2214              	.LCFI128:
 2215              	 .cfi_def_cfa_register 7
 2216 0006 F860     	 str r0,[r7,#12]
 2217 0008 B960     	 str r1,[r7,#8]
 2218 000a 7A60     	 str r2,[r7,#4]
 2219 000c 3B60     	 str r3,[r7]
 589:../cleanflight/src/main/io/serial.c ****     waitForSerialPortToFinishTransmitting(left);
 2220              	 .loc 3 589 0
 2221 000e F868     	 ldr r0,[r7,#12]
 2222 0010 FFF7FEFF 	 bl waitForSerialPortToFinishTransmitting
 590:../cleanflight/src/main/io/serial.c ****     waitForSerialPortToFinishTransmitting(right);
 2223              	 .loc 3 590 0
 2224 0014 B868     	 ldr r0,[r7,#8]
 2225 0016 FFF7FEFF 	 bl waitForSerialPortToFinishTransmitting
 591:../cleanflight/src/main/io/serial.c **** 
 592:../cleanflight/src/main/io/serial.c ****     if (!leftC)
 2226              	 .loc 3 592 0
 2227 001a 7B68     	 ldr r3,[r7,#4]
 2228 001c 002B     	 cmp r3,#0
 2229 001e 01D1     	 bne .L144
 593:../cleanflight/src/main/io/serial.c ****         leftC = &nopConsumer;
 2230              	 .loc 3 593 0
 2231 0020 2A4B     	 ldr r3,.L151
 2232 0022 7B60     	 str r3,[r7,#4]
 2233              	.L144:
 594:../cleanflight/src/main/io/serial.c ****     if (!rightC)
 2234              	 .loc 3 594 0
 2235 0024 3B68     	 ldr r3,[r7]
 2236 0026 002B     	 cmp r3,#0
 2237 0028 01D1     	 bne .L145
 595:../cleanflight/src/main/io/serial.c ****         rightC = &nopConsumer;
 2238              	 .loc 3 595 0
 2239 002a 284B     	 ldr r3,.L151
 2240 002c 3B60     	 str r3,[r7]
 2241              	.L145:
 596:../cleanflight/src/main/io/serial.c **** 
 597:../cleanflight/src/main/io/serial.c ****     LED0_OFF;
 2242              	 .loc 3 597 0
 2243 002e 0020     	 movs r0,#0
 2244 0030 0021     	 movs r1,#0
 2245 0032 FFF7FEFF 	 bl ledSet
 598:../cleanflight/src/main/io/serial.c ****     LED1_OFF;
 2246              	 .loc 3 598 0
 2247 0036 0120     	 movs r0,#1
 2248 0038 0021     	 movs r1,#0
 2249 003a FFF7FEFF 	 bl ledSet
 2250              	.L150:
 599:../cleanflight/src/main/io/serial.c **** 
 600:../cleanflight/src/main/io/serial.c ****     // Either port might be open in a mode other than MODE_RXTX. We rely on
 601:../cleanflight/src/main/io/serial.c ****     // serialRxBytesWaiting() to do the right thing for a TX only port. No
 602:../cleanflight/src/main/io/serial.c ****     // special handling is necessary OR performed.
 603:../cleanflight/src/main/io/serial.c ****     while (1) {
 604:../cleanflight/src/main/io/serial.c ****         // TODO: maintain a timestamp of last data received. Use this to
 605:../cleanflight/src/main/io/serial.c ****         // implement a guard interval and check for `+++` as an escape sequence
 606:../cleanflight/src/main/io/serial.c ****         // to return to CLI command mode.
 607:../cleanflight/src/main/io/serial.c ****         // https://en.wikipedia.org/wiki/Escape_sequence#Modem_control
 608:../cleanflight/src/main/io/serial.c ****         if (serialRxBytesWaiting(left)) {
 2251              	 .loc 3 608 0
 2252 003e F868     	 ldr r0,[r7,#12]
 2253 0040 FFF7FEFF 	 bl serialRxBytesWaiting
 2254 0044 0346     	 mov r3,r0
 2255 0046 002B     	 cmp r3,#0
 2256 0048 1CD0     	 beq .L146
 2257              	.LBB18:
 609:../cleanflight/src/main/io/serial.c ****             LED0_ON;
 2258              	 .loc 3 609 0
 2259 004a 0020     	 movs r0,#0
 2260 004c 0121     	 movs r1,#1
 2261 004e FFF7FEFF 	 bl ledSet
 610:../cleanflight/src/main/io/serial.c ****             uint8_t c = serialRead(left);
 2262              	 .loc 3 610 0
 2263 0052 F868     	 ldr r0,[r7,#12]
 2264 0054 FFF7FEFF 	 bl serialRead
 2265 0058 0346     	 mov r3,r0
 2266 005a BB75     	 strb r3,[r7,#22]
 611:../cleanflight/src/main/io/serial.c ****             // Make sure there is space in the tx buffer
 612:../cleanflight/src/main/io/serial.c ****             while (!serialTxBytesFree(right));
 2267              	 .loc 3 612 0
 2268 005c 00BF     	 nop
 2269              	.L147:
 2270              	 .loc 3 612 0 is_stmt 0 discriminator 1
 2271 005e B868     	 ldr r0,[r7,#8]
 2272 0060 FFF7FEFF 	 bl serialTxBytesFree
 2273 0064 0346     	 mov r3,r0
 2274 0066 002B     	 cmp r3,#0
 2275 0068 F9D0     	 beq .L147
 613:../cleanflight/src/main/io/serial.c ****             serialWrite(right, c);
 2276              	 .loc 3 613 0 is_stmt 1
 2277 006a BB7D     	 ldrb r3,[r7,#22]
 2278 006c B868     	 ldr r0,[r7,#8]
 2279 006e 1946     	 mov r1,r3
 2280 0070 FFF7FEFF 	 bl serialWrite
 614:../cleanflight/src/main/io/serial.c ****             leftC(c);
 2281              	 .loc 3 614 0
 2282 0074 BA7D     	 ldrb r2,[r7,#22]
 2283 0076 7B68     	 ldr r3,[r7,#4]
 2284 0078 1046     	 mov r0,r2
 2285 007a 9847     	 blx r3
 615:../cleanflight/src/main/io/serial.c ****             LED0_OFF;
 2286              	 .loc 3 615 0
 2287 007c 0020     	 movs r0,#0
 2288 007e 0021     	 movs r1,#0
 2289 0080 FFF7FEFF 	 bl ledSet
 2290              	.L146:
 2291              	.LBE18:
 616:../cleanflight/src/main/io/serial.c ****          }
 617:../cleanflight/src/main/io/serial.c ****          if (serialRxBytesWaiting(right)) {
 2292              	 .loc 3 617 0
 2293 0084 B868     	 ldr r0,[r7,#8]
 2294 0086 FFF7FEFF 	 bl serialRxBytesWaiting
 2295 008a 0346     	 mov r3,r0
 2296 008c 002B     	 cmp r3,#0
 2297 008e 1CD0     	 beq .L148
 2298              	.LBB19:
 618:../cleanflight/src/main/io/serial.c ****              LED0_ON;
 2299              	 .loc 3 618 0
 2300 0090 0020     	 movs r0,#0
 2301 0092 0121     	 movs r1,#1
 2302 0094 FFF7FEFF 	 bl ledSet
 619:../cleanflight/src/main/io/serial.c ****              uint8_t c = serialRead(right);
 2303              	 .loc 3 619 0
 2304 0098 B868     	 ldr r0,[r7,#8]
 2305 009a FFF7FEFF 	 bl serialRead
 2306 009e 0346     	 mov r3,r0
 2307 00a0 FB75     	 strb r3,[r7,#23]
 620:../cleanflight/src/main/io/serial.c ****              // Make sure there is space in the tx buffer
 621:../cleanflight/src/main/io/serial.c ****              while (!serialTxBytesFree(left));
 2308              	 .loc 3 621 0
 2309 00a2 00BF     	 nop
 2310              	.L149:
 2311              	 .loc 3 621 0 is_stmt 0 discriminator 1
 2312 00a4 F868     	 ldr r0,[r7,#12]
 2313 00a6 FFF7FEFF 	 bl serialTxBytesFree
 2314 00aa 0346     	 mov r3,r0
 2315 00ac 002B     	 cmp r3,#0
 2316 00ae F9D0     	 beq .L149
 622:../cleanflight/src/main/io/serial.c ****              serialWrite(left, c);
 2317              	 .loc 3 622 0 is_stmt 1
 2318 00b0 FB7D     	 ldrb r3,[r7,#23]
 2319 00b2 F868     	 ldr r0,[r7,#12]
 2320 00b4 1946     	 mov r1,r3
 2321 00b6 FFF7FEFF 	 bl serialWrite
 623:../cleanflight/src/main/io/serial.c ****              rightC(c);
 2322              	 .loc 3 623 0
 2323 00ba FA7D     	 ldrb r2,[r7,#23]
 2324 00bc 3B68     	 ldr r3,[r7]
 2325 00be 1046     	 mov r0,r2
 2326 00c0 9847     	 blx r3
 624:../cleanflight/src/main/io/serial.c ****              LED0_OFF;
 2327              	 .loc 3 624 0
 2328 00c2 0020     	 movs r0,#0
 2329 00c4 0021     	 movs r1,#0
 2330 00c6 FFF7FEFF 	 bl ledSet
 2331              	.L148:
 2332              	.LBE19:
 625:../cleanflight/src/main/io/serial.c ****          }
 626:../cleanflight/src/main/io/serial.c ****      }
 2333              	 .loc 3 626 0
 2334 00ca B8E7     	 b .L150
 2335              	.L152:
 2336              	 .align 2
 2337              	.L151:
 2338 00cc 00000000 	 .word nopConsumer
 2339              	 .cfi_endproc
 2340              	.LFE560:
 2342              	 .text
 2343              	.Letext0:
 2344              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2345              	 .file 5 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2346              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 2347              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 2348              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 2349              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 2350              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 2351              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 2352              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial_uart.h"
 2353              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/bus_spi.h"
 2354              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/light_led.h"
 2355              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pinio.h"
 2356              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 2357              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 serial.c
    {standard input}:20     .text.serialPinConfig:00000000 $t
    {standard input}:24     .text.serialPinConfig:00000000 serialPinConfig
    {standard input}:54     .text.serialPinConfig:00000010 $d
    {standard input}:59     .text.serialConfig:00000000 $t
    {standard input}:63     .text.serialConfig:00000000 serialConfig
    {standard input}:93     .text.serialConfig:00000010 $d
                            *COM*:00000026 serialConfig_System
    {standard input}:98     .text.serialConfigMutable:00000000 $t
    {standard input}:102    .text.serialConfigMutable:00000000 serialConfigMutable
    {standard input}:131    .text.serialConfigMutable:00000010 $d
    {standard input}:136    .bss.serialPortUsageList:00000000 $d
    {standard input}:139    .bss.serialPortUsageList:00000000 serialPortUsageList
    {standard input}:146    .rodata.serialPortIdentifiers:00000000 serialPortIdentifiers
    {standard input}:143    .rodata.serialPortIdentifiers:00000000 $d
    {standard input}:155    .bss.serialPortCount:00000000 serialPortCount
    {standard input}:156    .bss.serialPortCount:00000000 $d
    {standard input}:162    .rodata.baudRates:00000000 baudRates
    {standard input}:159    .rodata.baudRates:00000000 $d
                            *COM*:00000026 serialConfig_Copy
    {standard input}:186    .pg_registry:00000000 serialConfig_Registry
    {standard input}:183    .pg_registry:00000000 $d
    {standard input}:199    .text.pgResetFn_serialConfig:00000000 pgResetFn_serialConfig
    {standard input}:194    .text.pgResetFn_serialConfig:00000000 $t
    {standard input}:1257   .text.serialFindPortConfiguration:00000000 serialFindPortConfiguration
    {standard input}:334    .text.pgResetFn_serialConfig:000000c8 $d
    {standard input}:339    .text.lookupBaudRateIndex:00000000 $t
    {standard input}:344    .text.lookupBaudRateIndex:00000000 lookupBaudRateIndex
    {standard input}:407    .text.lookupBaudRateIndex:0000003c $d
    {standard input}:412    .text.findSerialPortIndexByIdentifier:00000000 $t
    {standard input}:417    .text.findSerialPortIndexByIdentifier:00000000 findSerialPortIndexByIdentifier
    {standard input}:485    .text.findSerialPortIndexByIdentifier:00000044 $d
    {standard input}:490    .text.findSerialPortUsageByIdentifier:00000000 $t
    {standard input}:495    .text.findSerialPortUsageByIdentifier:00000000 findSerialPortUsageByIdentifier
    {standard input}:569    .text.findSerialPortUsageByIdentifier:0000004c $d
    {standard input}:574    .text.findSerialPortUsageByPort:00000000 $t
    {standard input}:579    .text.findSerialPortUsageByPort:00000000 findSerialPortUsageByPort
    {standard input}:651    .text.findSerialPortUsageByPort:00000044 $d
    {standard input}:656    .bss.findSerialPortConfigState:00000000 $d
    {standard input}:659    .bss.findSerialPortConfigState:00000000 findSerialPortConfigState
    {standard input}:662    .text.findSerialPortConfig:00000000 $t
    {standard input}:667    .text.findSerialPortConfig:00000000 findSerialPortConfig
    {standard input}:719    .text.findNextSerialPortConfig:00000000 findNextSerialPortConfig
    {standard input}:709    .text.findSerialPortConfig:00000028 $d
    {standard input}:714    .text.findNextSerialPortConfig:00000000 $t
    {standard input}:792    .text.findNextSerialPortConfig:00000050 $d
    {standard input}:797    .text.determinePortSharing:00000000 $t
    {standard input}:802    .text.determinePortSharing:00000000 determinePortSharing
    {standard input}:872    .text.isSerialPortShared:00000000 $t
    {standard input}:877    .text.isSerialPortShared:00000000 isSerialPortShared
    {standard input}:949    .text.findSharedSerialPort:00000000 $t
    {standard input}:954    .text.findSharedSerialPort:00000000 findSharedSerialPort
    {standard input}:1051   .text.isSerialConfigValid:00000000 $t
    {standard input}:1056   .text.isSerialConfigValid:00000000 isSerialConfigValid
    {standard input}:1247   .text.isSerialConfigValid:00000124 $d
    {standard input}:1252   .text.serialFindPortConfiguration:00000000 $t
    {standard input}:1331   .text.doesConfigurationUsePort:00000000 $t
    {standard input}:1336   .text.doesConfigurationUsePort:00000000 doesConfigurationUsePort
    {standard input}:1394   .text.openSerialPort:00000000 $t
    {standard input}:1399   .text.openSerialPort:00000000 openSerialPort
    {standard input}:1453   .text.openSerialPort:00000044 $d
    {standard input}:1496   .text.openSerialPort:000000f0 $t
    {standard input}:1573   .text.closeSerialPort:00000000 $t
    {standard input}:1578   .text.closeSerialPort:00000000 closeSerialPort
    {standard input}:1647   .text.serialInit:00000000 $t
    {standard input}:1652   .text.serialInit:00000000 serialInit
    {standard input}:1883   .text.serialInit:00000168 $d
    {standard input}:1890   .text.serialRemovePort:00000000 $t
    {standard input}:1895   .text.serialRemovePort:00000000 serialRemovePort
    {standard input}:1975   .text.serialRemovePort:0000005c $d
    {standard input}:1981   .text.serialGetAvailablePortCount:00000000 $t
    {standard input}:1986   .text.serialGetAvailablePortCount:00000000 serialGetAvailablePortCount
    {standard input}:2017   .text.serialGetAvailablePortCount:00000014 $d
    {standard input}:2022   .text.serialIsPortAvailable:00000000 $t
    {standard input}:2027   .text.serialIsPortAvailable:00000000 serialIsPortAvailable
    {standard input}:2098   .text.serialIsPortAvailable:00000048 $d
    {standard input}:2103   .text.waitForSerialPortToFinishTransmitting:00000000 $t
    {standard input}:2108   .text.waitForSerialPortToFinishTransmitting:00000000 waitForSerialPortToFinishTransmitting
    {standard input}:2154   .text.nopConsumer:00000000 $t
    {standard input}:2158   .text.nopConsumer:00000000 nopConsumer
    {standard input}:2194   .text.serialPassthrough:00000000 $t
    {standard input}:2199   .text.serialPassthrough:00000000 serialPassthrough
    {standard input}:2338   .text.serialPassthrough:000000cc $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
serialPinConfig_System
memset
usbVcpOpen
uartOpen
spiSlaveOpen
delay
isSerialTransmitBufferEmpty
ledSet
serialRxBytesWaiting
serialRead
serialTxBytesFree
serialWrite
