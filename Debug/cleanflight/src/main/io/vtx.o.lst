   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "vtx.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.vtxSettingsConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	vtxSettingsConfig:
  25              	.LFB538:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include "platform.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include "common/time.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** #include "pg/pg.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** typedef struct vtxSettingsConfig_s {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t band;           // 1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t channel;        // 1-8
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t power;          // 0 = lowest
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint16_t freq;          // sets freq in MHz if band=0
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint16_t pitModeFreq;   // sets out-of-range pitmode frequency
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h ****     uint8_t lowPowerDisarm; // min power while disarmed
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** } vtxSettingsConfig_t;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** 
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx.h **** PG_DECLARE(vtxSettingsConfig_t, vtxSettingsConfig);
  27              	 .loc 1 38 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 38 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word vtxSettingsConfig_System
  55              	 .cfi_endproc
  56              	.LFE538:
  58              	 .section .text.vtxSettingsConfigMutable,"ax",%progbits
  59              	 .align 2
  60              	 .thumb
  61              	 .thumb_func
  63              	vtxSettingsConfigMutable:
  64              	.LFB539:
  65              	 .loc 1 38 0
  66              	 .cfi_startproc
  67              	 
  68              	 
  69              	 
  70 0000 80B4     	 push {r7}
  71              	.LCFI4:
  72              	 .cfi_def_cfa_offset 4
  73              	 .cfi_offset 7,-4
  74 0002 00AF     	 add r7,sp,#0
  75              	.LCFI5:
  76              	 .cfi_def_cfa_register 7
  77              	 .loc 1 38 0
  78 0004 024B     	 ldr r3,.L7
  79 0006 1846     	 mov r0,r3
  80 0008 BD46     	 mov sp,r7
  81              	.LCFI6:
  82              	 .cfi_def_cfa_register 13
  83              	 
  84 000a 5DF8047B 	 ldr r7,[sp],#4
  85              	.LCFI7:
  86              	 .cfi_restore 7
  87              	 .cfi_def_cfa_offset 0
  88 000e 7047     	 bx lr
  89              	.L8:
  90              	 .align 2
  91              	.L7:
  92 0010 00000000 	 .word vtxSettingsConfig_System
  93              	 .cfi_endproc
  94              	.LFE539:
  96              	 .comm vtxSettingsConfig_System,8,4
  97              	 .comm vtxSettingsConfig_Copy,8,4
  98              	 .global vtxSettingsConfig_Registry
  99              	 .section .pg_registry,"a",%progbits
 100              	 .align 2
 103              	vtxSettingsConfig_Registry:
 104 0000 0301     	 .short 259
 105 0002 0800     	 .short 8
 106 0004 00000000 	 .word vtxSettingsConfig_System
 107 0008 00000000 	 .word vtxSettingsConfig_Copy
 108 000c 00000000 	 .word 0
 109 0010 00000000 	 .word pgResetTemplate_vtxSettingsConfig
 110              	 .global pgResetTemplate_vtxSettingsConfig
 111              	 .section .pg_resetdata,"a",%progbits
 112              	 .align 1
 115              	pgResetTemplate_vtxSettingsConfig:
 116 0000 04       	 .byte 4
 117 0001 01       	 .byte 1
 118 0002 01       	 .byte 1
 119 0003 6C16     	 .2byte 5740
 120 0005 0000     	 .2byte 0
 121 0007 00       	 .byte 0
 122              	 .section .text.vtxInit,"ax",%progbits
 123              	 .align 2
 124              	 .global vtxInit
 125              	 .thumb
 126              	 .thumb_func
 128              	vtxInit:
 129              	.LFB542:
 130              	 .file 2 "../cleanflight/src/main/io/vtx.c"
   1:../cleanflight/src/main/io/vtx.c **** /*
   2:../cleanflight/src/main/io/vtx.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/io/vtx.c ****  *
   4:../cleanflight/src/main/io/vtx.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/io/vtx.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/io/vtx.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/io/vtx.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/io/vtx.c ****  * any later version.
   9:../cleanflight/src/main/io/vtx.c ****  *
  10:../cleanflight/src/main/io/vtx.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/io/vtx.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/io/vtx.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/io/vtx.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/io/vtx.c ****  *
  15:../cleanflight/src/main/io/vtx.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/io/vtx.c ****  * along with this software.
  17:../cleanflight/src/main/io/vtx.c ****  *
  18:../cleanflight/src/main/io/vtx.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/io/vtx.c ****  */
  20:../cleanflight/src/main/io/vtx.c **** 
  21:../cleanflight/src/main/io/vtx.c **** #include <stdint.h>
  22:../cleanflight/src/main/io/vtx.c **** #include <string.h>
  23:../cleanflight/src/main/io/vtx.c **** 
  24:../cleanflight/src/main/io/vtx.c **** #include "platform.h"
  25:../cleanflight/src/main/io/vtx.c **** 
  26:../cleanflight/src/main/io/vtx.c **** #if defined(USE_VTX_COMMON)
  27:../cleanflight/src/main/io/vtx.c **** 
  28:../cleanflight/src/main/io/vtx.c **** #include "common/maths.h"
  29:../cleanflight/src/main/io/vtx.c **** #include "common/time.h"
  30:../cleanflight/src/main/io/vtx.c **** 
  31:../cleanflight/src/main/io/vtx.c **** #include "drivers/vtx_common.h"
  32:../cleanflight/src/main/io/vtx.c **** 
  33:../cleanflight/src/main/io/vtx.c **** #include "fc/config.h"
  34:../cleanflight/src/main/io/vtx.c **** #include "fc/rc_modes.h"
  35:../cleanflight/src/main/io/vtx.c **** #include "fc/runtime_config.h"
  36:../cleanflight/src/main/io/vtx.c **** 
  37:../cleanflight/src/main/io/vtx.c **** #include "flight/failsafe.h"
  38:../cleanflight/src/main/io/vtx.c **** 
  39:../cleanflight/src/main/io/vtx.c **** #include "io/vtx.h"
  40:../cleanflight/src/main/io/vtx.c **** #include "io/vtx_string.h"
  41:../cleanflight/src/main/io/vtx.c **** #include "io/vtx_control.h"
  42:../cleanflight/src/main/io/vtx.c **** 
  43:../cleanflight/src/main/io/vtx.c **** #include "interface/cli.h"
  44:../cleanflight/src/main/io/vtx.c **** 
  45:../cleanflight/src/main/io/vtx.c **** #include "pg/pg.h"
  46:../cleanflight/src/main/io/vtx.c **** #include "pg/pg_ids.h"
  47:../cleanflight/src/main/io/vtx.c **** 
  48:../cleanflight/src/main/io/vtx.c **** 
  49:../cleanflight/src/main/io/vtx.c **** PG_REGISTER_WITH_RESET_TEMPLATE(vtxSettingsConfig_t, vtxSettingsConfig, PG_VTX_SETTINGS_CONFIG, 0);
  50:../cleanflight/src/main/io/vtx.c **** 
  51:../cleanflight/src/main/io/vtx.c **** PG_RESET_TEMPLATE(vtxSettingsConfig_t, vtxSettingsConfig,
  52:../cleanflight/src/main/io/vtx.c ****     .band = VTX_SETTINGS_DEFAULT_BAND,
  53:../cleanflight/src/main/io/vtx.c ****     .channel = VTX_SETTINGS_DEFAULT_CHANNEL,
  54:../cleanflight/src/main/io/vtx.c ****     .power = VTX_SETTINGS_DEFAULT_POWER,
  55:../cleanflight/src/main/io/vtx.c ****     .freq = VTX_SETTINGS_DEFAULT_FREQ,
  56:../cleanflight/src/main/io/vtx.c ****     .pitModeFreq = VTX_SETTINGS_DEFAULT_PITMODE_FREQ,
  57:../cleanflight/src/main/io/vtx.c ****     .lowPowerDisarm = VTX_SETTINGS_DEFAULT_LOW_POWER_DISARM,
  58:../cleanflight/src/main/io/vtx.c **** );
  59:../cleanflight/src/main/io/vtx.c **** 
  60:../cleanflight/src/main/io/vtx.c **** typedef enum {
  61:../cleanflight/src/main/io/vtx.c ****     VTX_PARAM_POWER = 0,
  62:../cleanflight/src/main/io/vtx.c ****     VTX_PARAM_BANDCHAN,
  63:../cleanflight/src/main/io/vtx.c ****     VTX_PARAM_PITMODE,
  64:../cleanflight/src/main/io/vtx.c ****     VTX_PARAM_CONFIRM,
  65:../cleanflight/src/main/io/vtx.c ****     VTX_PARAM_COUNT
  66:../cleanflight/src/main/io/vtx.c **** } vtxScheduleParams_e;
  67:../cleanflight/src/main/io/vtx.c **** 
  68:../cleanflight/src/main/io/vtx.c **** void vtxInit(void)
  69:../cleanflight/src/main/io/vtx.c **** {
 131              	 .loc 2 69 0
 132              	 .cfi_startproc
 133              	 
 134              	 
 135 0000 90B5     	 push {r4,r7,lr}
 136              	.LCFI8:
 137              	 .cfi_def_cfa_offset 12
 138              	 .cfi_offset 4,-12
 139              	 .cfi_offset 7,-8
 140              	 .cfi_offset 14,-4
 141 0002 85B0     	 sub sp,sp,#20
 142              	.LCFI9:
 143              	 .cfi_def_cfa_offset 32
 144 0004 00AF     	 add r7,sp,#0
 145              	.LCFI10:
 146              	 .cfi_def_cfa_register 7
  70:../cleanflight/src/main/io/vtx.c ****     bool settingsUpdated = false;
 147              	 .loc 2 70 0
 148 0006 0023     	 movs r3,#0
 149 0008 FB73     	 strb r3,[r7,#15]
  71:../cleanflight/src/main/io/vtx.c **** 
  72:../cleanflight/src/main/io/vtx.c ****     // sync frequency in parameter group when band/channel are specified
  73:../cleanflight/src/main/io/vtx.c ****     const uint16_t freq = vtx58_Bandchan2Freq(vtxSettingsConfig()->band, vtxSettingsConfig()->chann
 150              	 .loc 2 73 0
 151 000a FFF7FEFF 	 bl vtxSettingsConfig
 152 000e 0346     	 mov r3,r0
 153 0010 1C78     	 ldrb r4,[r3]
 154 0012 FFF7FEFF 	 bl vtxSettingsConfig
 155 0016 0346     	 mov r3,r0
 156 0018 5B78     	 ldrb r3,[r3,#1]
 157 001a 2046     	 mov r0,r4
 158 001c 1946     	 mov r1,r3
 159 001e FFF7FEFF 	 bl vtx58_Bandchan2Freq
 160 0022 0346     	 mov r3,r0
 161 0024 BB81     	 strh r3,[r7,#12]
  74:../cleanflight/src/main/io/vtx.c ****     if (vtxSettingsConfig()->band && freq != vtxSettingsConfig()->freq) {
 162              	 .loc 2 74 0
 163 0026 FFF7FEFF 	 bl vtxSettingsConfig
 164 002a 0346     	 mov r3,r0
 165 002c 1B78     	 ldrb r3,[r3]
 166 002e 002B     	 cmp r3,#0
 167 0030 10D0     	 beq .L10
 168              	 .loc 2 74 0 is_stmt 0 discriminator 1
 169 0032 FFF7FEFF 	 bl vtxSettingsConfig
 170 0036 0346     	 mov r3,r0
 171 0038 B3F80330 	 ldrh r3,[r3,#3]
 172 003c 9BB2     	 uxth r3,r3
 173 003e BA89     	 ldrh r2,[r7,#12]
 174 0040 9A42     	 cmp r2,r3
 175 0042 07D0     	 beq .L10
  75:../cleanflight/src/main/io/vtx.c ****         vtxSettingsConfigMutable()->freq = freq;
 176              	 .loc 2 75 0 is_stmt 1
 177 0044 FFF7FEFF 	 bl vtxSettingsConfigMutable
 178 0048 0346     	 mov r3,r0
 179 004a BA89     	 ldrh r2,[r7,#12]
 180 004c A3F80320 	 strh r2,[r3,#3]
  76:../cleanflight/src/main/io/vtx.c ****         settingsUpdated = true;
 181              	 .loc 2 76 0
 182 0050 0123     	 movs r3,#1
 183 0052 FB73     	 strb r3,[r7,#15]
 184              	.L10:
  77:../cleanflight/src/main/io/vtx.c ****     }
  78:../cleanflight/src/main/io/vtx.c **** 
  79:../cleanflight/src/main/io/vtx.c **** #if defined(VTX_SETTINGS_FREQCMD)
  80:../cleanflight/src/main/io/vtx.c ****     // constrain pit mode frequency
  81:../cleanflight/src/main/io/vtx.c ****     if (vtxSettingsConfig()->pitModeFreq) {
 185              	 .loc 2 81 0
 186 0054 FFF7FEFF 	 bl vtxSettingsConfig
 187 0058 0346     	 mov r3,r0
 188 005a B3F80530 	 ldrh r3,[r3,#5]
 189 005e 9BB2     	 uxth r3,r3
 190 0060 002B     	 cmp r3,#0
 191 0062 21D0     	 beq .L11
 192              	.LBB2:
 193              	.LBB3:
  82:../cleanflight/src/main/io/vtx.c ****         const uint16_t constrainedPitModeFreq = MAX(vtxSettingsConfig()->pitModeFreq, VTX_SETTINGS_
 194              	 .loc 2 82 0
 195 0064 FFF7FEFF 	 bl vtxSettingsConfig
 196 0068 0346     	 mov r3,r0
 197 006a 5A79     	 ldrb r2,[r3,#5]
 198 006c 9B79     	 ldrb r3,[r3,#6]
 199 006e 1B02     	 lsls r3,r3,#8
 200 0070 1343     	 orrs r3,r3,r2
 201 0072 7B81     	 strh r3,[r7,#10]
 202 0074 41F28833 	 movw r3,#5000
 203 0078 7B60     	 str r3,[r7,#4]
 204 007a 7A89     	 ldrh r2,[r7,#10]
 205 007c 7B68     	 ldr r3,[r7,#4]
 206 007e 9342     	 cmp r3,r2
 207 0080 B8BF     	 it lt
 208 0082 1346     	 movlt r3,r2
 209              	.LBE3:
 210 0084 7B80     	 strh r3,[r7,#2]
  83:../cleanflight/src/main/io/vtx.c ****         if (constrainedPitModeFreq != vtxSettingsConfig()->pitModeFreq) {
 211              	 .loc 2 83 0
 212 0086 FFF7FEFF 	 bl vtxSettingsConfig
 213 008a 0346     	 mov r3,r0
 214 008c B3F80530 	 ldrh r3,[r3,#5]
 215 0090 9BB2     	 uxth r3,r3
 216 0092 7A88     	 ldrh r2,[r7,#2]
 217 0094 9A42     	 cmp r2,r3
 218 0096 07D0     	 beq .L11
  84:../cleanflight/src/main/io/vtx.c ****             vtxSettingsConfigMutable()->pitModeFreq = constrainedPitModeFreq;
 219              	 .loc 2 84 0
 220 0098 FFF7FEFF 	 bl vtxSettingsConfigMutable
 221 009c 0346     	 mov r3,r0
 222 009e 7A88     	 ldrh r2,[r7,#2]
 223 00a0 A3F80520 	 strh r2,[r3,#5]
  85:../cleanflight/src/main/io/vtx.c ****             settingsUpdated = true;
 224              	 .loc 2 85 0
 225 00a4 0123     	 movs r3,#1
 226 00a6 FB73     	 strb r3,[r7,#15]
 227              	.L11:
 228              	.LBE2:
  86:../cleanflight/src/main/io/vtx.c ****         }
  87:../cleanflight/src/main/io/vtx.c ****     }
  88:../cleanflight/src/main/io/vtx.c **** #endif
  89:../cleanflight/src/main/io/vtx.c **** 
  90:../cleanflight/src/main/io/vtx.c ****     if (settingsUpdated) {
 229              	 .loc 2 90 0
 230 00a8 FB7B     	 ldrb r3,[r7,#15]
 231 00aa 002B     	 cmp r3,#0
 232 00ac 01D0     	 beq .L9
  91:../cleanflight/src/main/io/vtx.c ****         saveConfigAndNotify();
 233              	 .loc 2 91 0
 234 00ae FFF7FEFF 	 bl saveConfigAndNotify
 235              	.L9:
  92:../cleanflight/src/main/io/vtx.c ****     }
  93:../cleanflight/src/main/io/vtx.c **** }
 236              	 .loc 2 93 0
 237 00b2 1437     	 adds r7,r7,#20
 238              	.LCFI11:
 239              	 .cfi_def_cfa_offset 12
 240 00b4 BD46     	 mov sp,r7
 241              	.LCFI12:
 242              	 .cfi_def_cfa_register 13
 243              	 
 244 00b6 90BD     	 pop {r4,r7,pc}
 245              	 .cfi_endproc
 246              	.LFE542:
 248              	 .section .text.vtxGetSettings,"ax",%progbits
 249              	 .align 2
 250              	 .thumb
 251              	 .thumb_func
 253              	vtxGetSettings:
 254              	.LFB543:
  94:../cleanflight/src/main/io/vtx.c **** 
  95:../cleanflight/src/main/io/vtx.c **** STATIC_UNIT_TESTED vtxSettingsConfig_t vtxGetSettings(void)
  96:../cleanflight/src/main/io/vtx.c **** {
 255              	 .loc 2 96 0
 256              	 .cfi_startproc
 257              	 
 258              	 
 259 0000 80B5     	 push {r7,lr}
 260              	.LCFI13:
 261              	 .cfi_def_cfa_offset 8
 262              	 .cfi_offset 7,-8
 263              	 .cfi_offset 14,-4
 264 0002 84B0     	 sub sp,sp,#16
 265              	.LCFI14:
 266              	 .cfi_def_cfa_offset 24
 267 0004 00AF     	 add r7,sp,#0
 268              	.LCFI15:
 269              	 .cfi_def_cfa_register 7
 270 0006 7860     	 str r0,[r7,#4]
  97:../cleanflight/src/main/io/vtx.c ****     vtxSettingsConfig_t settings = {
  98:../cleanflight/src/main/io/vtx.c ****         .band = vtxSettingsConfig()->band,
 271              	 .loc 2 98 0
 272 0008 FFF7FEFF 	 bl vtxSettingsConfig
 273 000c 0346     	 mov r3,r0
 274 000e 1B78     	 ldrb r3,[r3]
  97:../cleanflight/src/main/io/vtx.c ****     vtxSettingsConfig_t settings = {
 275              	 .loc 2 97 0
 276 0010 3B72     	 strb r3,[r7,#8]
  99:../cleanflight/src/main/io/vtx.c ****         .channel = vtxSettingsConfig()->channel,
 277              	 .loc 2 99 0
 278 0012 FFF7FEFF 	 bl vtxSettingsConfig
 279 0016 0346     	 mov r3,r0
 280 0018 5B78     	 ldrb r3,[r3,#1]
  97:../cleanflight/src/main/io/vtx.c ****     vtxSettingsConfig_t settings = {
 281              	 .loc 2 97 0
 282 001a 7B72     	 strb r3,[r7,#9]
 100:../cleanflight/src/main/io/vtx.c ****         .power = vtxSettingsConfig()->power,
 283              	 .loc 2 100 0
 284 001c FFF7FEFF 	 bl vtxSettingsConfig
 285 0020 0346     	 mov r3,r0
 286 0022 9B78     	 ldrb r3,[r3,#2]
  97:../cleanflight/src/main/io/vtx.c ****     vtxSettingsConfig_t settings = {
 287              	 .loc 2 97 0
 288 0024 BB72     	 strb r3,[r7,#10]
 101:../cleanflight/src/main/io/vtx.c ****         .freq = vtxSettingsConfig()->freq,
 289              	 .loc 2 101 0
 290 0026 FFF7FEFF 	 bl vtxSettingsConfig
 291 002a 0346     	 mov r3,r0
 292 002c B3F80330 	 ldrh r3,[r3,#3]
 293 0030 9BB2     	 uxth r3,r3
  97:../cleanflight/src/main/io/vtx.c ****         .band = vtxSettingsConfig()->band,
 294              	 .loc 2 97 0
 295 0032 A7F80B30 	 strh r3,[r7,#11]
 102:../cleanflight/src/main/io/vtx.c ****         .pitModeFreq = vtxSettingsConfig()->pitModeFreq,
 296              	 .loc 2 102 0
 297 0036 FFF7FEFF 	 bl vtxSettingsConfig
 298 003a 0346     	 mov r3,r0
 299 003c B3F80530 	 ldrh r3,[r3,#5]
 300 0040 9BB2     	 uxth r3,r3
  97:../cleanflight/src/main/io/vtx.c ****         .band = vtxSettingsConfig()->band,
 301              	 .loc 2 97 0
 302 0042 A7F80D30 	 strh r3,[r7,#13]
 103:../cleanflight/src/main/io/vtx.c ****         .lowPowerDisarm = vtxSettingsConfig()->lowPowerDisarm,
 303              	 .loc 2 103 0
 304 0046 FFF7FEFF 	 bl vtxSettingsConfig
 305 004a 0346     	 mov r3,r0
 306 004c DB79     	 ldrb r3,[r3,#7]
  97:../cleanflight/src/main/io/vtx.c ****         .band = vtxSettingsConfig()->band,
 307              	 .loc 2 97 0
 308 004e FB73     	 strb r3,[r7,#15]
 104:../cleanflight/src/main/io/vtx.c ****     };
 105:../cleanflight/src/main/io/vtx.c **** 
 106:../cleanflight/src/main/io/vtx.c **** #if defined(VTX_SETTINGS_FREQCMD)
 107:../cleanflight/src/main/io/vtx.c ****     if (IS_RC_MODE_ACTIVE(BOXVTXPITMODE) && isModeActivationConditionPresent(BOXVTXPITMODE) && sett
 309              	 .loc 2 107 0
 310 0050 2120     	 movs r0,#33
 311 0052 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 312 0056 0346     	 mov r3,r0
 313 0058 002B     	 cmp r3,#0
 314 005a 13D0     	 beq .L14
 315              	 .loc 2 107 0 is_stmt 0 discriminator 1
 316 005c 2120     	 movs r0,#33
 317 005e FFF7FEFF 	 bl isModeActivationConditionPresent
 318 0062 0346     	 mov r3,r0
 319 0064 002B     	 cmp r3,#0
 320 0066 0DD0     	 beq .L14
 321              	 .loc 2 107 0 discriminator 2
 322 0068 B7F80D30 	 ldrh r3,[r7,#13]
 323 006c 9BB2     	 uxth r3,r3
 324 006e 002B     	 cmp r3,#0
 325 0070 08D0     	 beq .L14
 108:../cleanflight/src/main/io/vtx.c ****         settings.band = 0;
 326              	 .loc 2 108 0 is_stmt 1
 327 0072 0023     	 movs r3,#0
 328 0074 3B72     	 strb r3,[r7,#8]
 109:../cleanflight/src/main/io/vtx.c ****         settings.freq = settings.pitModeFreq;
 329              	 .loc 2 109 0
 330 0076 B7F80D30 	 ldrh r3,[r7,#13]
 331 007a 9BB2     	 uxth r3,r3
 332 007c A7F80B30 	 strh r3,[r7,#11]
 110:../cleanflight/src/main/io/vtx.c ****         settings.power = VTX_SETTINGS_DEFAULT_POWER;
 333              	 .loc 2 110 0
 334 0080 0123     	 movs r3,#1
 335 0082 BB72     	 strb r3,[r7,#10]
 336              	.L14:
 111:../cleanflight/src/main/io/vtx.c ****     }
 112:../cleanflight/src/main/io/vtx.c **** #endif
 113:../cleanflight/src/main/io/vtx.c **** 
 114:../cleanflight/src/main/io/vtx.c ****     if (!ARMING_FLAG(ARMED) && settings.lowPowerDisarm && !failsafeIsActive()) {
 337              	 .loc 2 114 0
 338 0084 0E4B     	 ldr r3,.L17
 339 0086 1B78     	 ldrb r3,[r3]
 340 0088 03F00103 	 and r3,r3,#1
 341 008c 002B     	 cmp r3,#0
 342 008e 0CD1     	 bne .L15
 343              	 .loc 2 114 0 is_stmt 0 discriminator 1
 344 0090 FB7B     	 ldrb r3,[r7,#15]
 345 0092 002B     	 cmp r3,#0
 346 0094 09D0     	 beq .L15
 347              	 .loc 2 114 0 discriminator 2
 348 0096 FFF7FEFF 	 bl failsafeIsActive
 349 009a 0346     	 mov r3,r0
 350 009c 83F00103 	 eor r3,r3,#1
 351 00a0 DBB2     	 uxtb r3,r3
 352 00a2 002B     	 cmp r3,#0
 353 00a4 01D0     	 beq .L15
 115:../cleanflight/src/main/io/vtx.c ****         settings.power = VTX_SETTINGS_DEFAULT_POWER;
 354              	 .loc 2 115 0 is_stmt 1
 355 00a6 0123     	 movs r3,#1
 356 00a8 BB72     	 strb r3,[r7,#10]
 357              	.L15:
 116:../cleanflight/src/main/io/vtx.c ****     }
 117:../cleanflight/src/main/io/vtx.c **** 
 118:../cleanflight/src/main/io/vtx.c ****     return settings;
 358              	 .loc 2 118 0
 359 00aa 7B68     	 ldr r3,[r7,#4]
 360 00ac 1A46     	 mov r2,r3
 361 00ae 07F10803 	 add r3,r7,#8
 362 00b2 03CB     	 ldmia r3!,{r0,r1}
 363 00b4 1060     	 str r0,[r2]
 364 00b6 5160     	 str r1,[r2,#4]
 119:../cleanflight/src/main/io/vtx.c **** }
 365              	 .loc 2 119 0
 366 00b8 7868     	 ldr r0,[r7,#4]
 367 00ba 1037     	 adds r7,r7,#16
 368              	.LCFI16:
 369              	 .cfi_def_cfa_offset 8
 370 00bc BD46     	 mov sp,r7
 371              	.LCFI17:
 372              	 .cfi_def_cfa_register 13
 373              	 
 374 00be 80BD     	 pop {r7,pc}
 375              	.L18:
 376              	 .align 2
 377              	.L17:
 378 00c0 00000000 	 .word armingFlags
 379              	 .cfi_endproc
 380              	.LFE543:
 382              	 .section .text.vtxProcessBandAndChannel,"ax",%progbits
 383              	 .align 2
 384              	 .thumb
 385              	 .thumb_func
 387              	vtxProcessBandAndChannel:
 388              	.LFB544:
 120:../cleanflight/src/main/io/vtx.c **** 
 121:../cleanflight/src/main/io/vtx.c **** static bool vtxProcessBandAndChannel(vtxDevice_t *vtxDevice)
 122:../cleanflight/src/main/io/vtx.c **** {
 389              	 .loc 2 122 0
 390              	 .cfi_startproc
 391              	 
 392              	 
 393 0000 80B5     	 push {r7,lr}
 394              	.LCFI18:
 395              	 .cfi_def_cfa_offset 8
 396              	 .cfi_offset 7,-8
 397              	 .cfi_offset 14,-4
 398 0002 86B0     	 sub sp,sp,#24
 399              	.LCFI19:
 400              	 .cfi_def_cfa_offset 32
 401 0004 00AF     	 add r7,sp,#0
 402              	.LCFI20:
 403              	 .cfi_def_cfa_register 7
 404 0006 7860     	 str r0,[r7,#4]
 123:../cleanflight/src/main/io/vtx.c ****     if(!ARMING_FLAG(ARMED)) {
 405              	 .loc 2 123 0
 406 0008 164B     	 ldr r3,.L25
 407 000a 1B78     	 ldrb r3,[r3]
 408 000c 03F00103 	 and r3,r3,#1
 409 0010 002B     	 cmp r3,#0
 410 0012 21D1     	 bne .L20
 411              	.LBB4:
 124:../cleanflight/src/main/io/vtx.c ****         uint8_t vtxBand;
 125:../cleanflight/src/main/io/vtx.c ****         uint8_t vtxChan;
 126:../cleanflight/src/main/io/vtx.c ****         if (vtxCommonGetBandAndChannel(vtxDevice, &vtxBand, &vtxChan)) {
 412              	 .loc 2 126 0
 413 0014 07F11702 	 add r2,r7,#23
 414 0018 07F11603 	 add r3,r7,#22
 415 001c 7868     	 ldr r0,[r7,#4]
 416 001e 1146     	 mov r1,r2
 417 0020 1A46     	 mov r2,r3
 418 0022 FFF7FEFF 	 bl vtxCommonGetBandAndChannel
 419 0026 0346     	 mov r3,r0
 420 0028 002B     	 cmp r3,#0
 421 002a 15D0     	 beq .L20
 422              	.LBB5:
 127:../cleanflight/src/main/io/vtx.c ****             const vtxSettingsConfig_t settings = vtxGetSettings();
 423              	 .loc 2 127 0
 424 002c 07F10C03 	 add r3,r7,#12
 425 0030 1846     	 mov r0,r3
 426 0032 FFF7FEFF 	 bl vtxGetSettings
 128:../cleanflight/src/main/io/vtx.c ****             if (vtxBand != settings.band || vtxChan != settings.channel) {
 427              	 .loc 2 128 0
 428 0036 3A7B     	 ldrb r2,[r7,#12]
 429 0038 FB7D     	 ldrb r3,[r7,#23]
 430 003a 9A42     	 cmp r2,r3
 431 003c 03D1     	 bne .L22
 432              	 .loc 2 128 0 is_stmt 0 discriminator 1
 433 003e 7A7B     	 ldrb r2,[r7,#13]
 434 0040 BB7D     	 ldrb r3,[r7,#22]
 435 0042 9A42     	 cmp r2,r3
 436 0044 08D0     	 beq .L21
 437              	.L22:
 129:../cleanflight/src/main/io/vtx.c ****                 vtxCommonSetBandAndChannel(vtxDevice, settings.band, settings.channel);
 438              	 .loc 2 129 0 is_stmt 1
 439 0046 3A7B     	 ldrb r2,[r7,#12]
 440 0048 7B7B     	 ldrb r3,[r7,#13]
 441 004a 7868     	 ldr r0,[r7,#4]
 442 004c 1146     	 mov r1,r2
 443 004e 1A46     	 mov r2,r3
 444 0050 FFF7FEFF 	 bl vtxCommonSetBandAndChannel
 130:../cleanflight/src/main/io/vtx.c ****                 return true;
 445              	 .loc 2 130 0
 446 0054 0123     	 movs r3,#1
 447 0056 00E0     	 b .L24
 448              	.L21:
 449              	.L20:
 450              	.LBE5:
 451              	.LBE4:
 131:../cleanflight/src/main/io/vtx.c ****             }
 132:../cleanflight/src/main/io/vtx.c ****         }
 133:../cleanflight/src/main/io/vtx.c ****     }
 134:../cleanflight/src/main/io/vtx.c ****     return false;
 452              	 .loc 2 134 0
 453 0058 0023     	 movs r3,#0
 454              	.L24:
 135:../cleanflight/src/main/io/vtx.c **** }
 455              	 .loc 2 135 0 discriminator 2
 456 005a 1846     	 mov r0,r3
 457 005c 1837     	 adds r7,r7,#24
 458              	.LCFI21:
 459              	 .cfi_def_cfa_offset 8
 460 005e BD46     	 mov sp,r7
 461              	.LCFI22:
 462              	 .cfi_def_cfa_register 13
 463              	 
 464 0060 80BD     	 pop {r7,pc}
 465              	.L26:
 466 0062 00BF     	 .align 2
 467              	.L25:
 468 0064 00000000 	 .word armingFlags
 469              	 .cfi_endproc
 470              	.LFE544:
 472              	 .section .text.vtxProcessFrequency,"ax",%progbits
 473              	 .align 2
 474              	 .thumb
 475              	 .thumb_func
 477              	vtxProcessFrequency:
 478              	.LFB545:
 136:../cleanflight/src/main/io/vtx.c **** 
 137:../cleanflight/src/main/io/vtx.c **** #if defined(VTX_SETTINGS_FREQCMD)
 138:../cleanflight/src/main/io/vtx.c **** static bool vtxProcessFrequency(vtxDevice_t *vtxDevice)
 139:../cleanflight/src/main/io/vtx.c **** {
 479              	 .loc 2 139 0
 480              	 .cfi_startproc
 481              	 
 482              	 
 483 0000 80B5     	 push {r7,lr}
 484              	.LCFI23:
 485              	 .cfi_def_cfa_offset 8
 486              	 .cfi_offset 7,-8
 487              	 .cfi_offset 14,-4
 488 0002 86B0     	 sub sp,sp,#24
 489              	.LCFI24:
 490              	 .cfi_def_cfa_offset 32
 491 0004 00AF     	 add r7,sp,#0
 492              	.LCFI25:
 493              	 .cfi_def_cfa_register 7
 494 0006 7860     	 str r0,[r7,#4]
 140:../cleanflight/src/main/io/vtx.c ****     if(!ARMING_FLAG(ARMED)) {
 495              	 .loc 2 140 0
 496 0008 134B     	 ldr r3,.L32
 497 000a 1B78     	 ldrb r3,[r3]
 498 000c 03F00103 	 and r3,r3,#1
 499 0010 002B     	 cmp r3,#0
 500 0012 1CD1     	 bne .L28
 501              	.LBB6:
 141:../cleanflight/src/main/io/vtx.c ****         uint16_t vtxFreq;
 142:../cleanflight/src/main/io/vtx.c ****         if (vtxCommonGetFrequency(vtxDevice, &vtxFreq)) {
 502              	 .loc 2 142 0
 503 0014 07F11603 	 add r3,r7,#22
 504 0018 7868     	 ldr r0,[r7,#4]
 505 001a 1946     	 mov r1,r3
 506 001c FFF7FEFF 	 bl vtxCommonGetFrequency
 507 0020 0346     	 mov r3,r0
 508 0022 002B     	 cmp r3,#0
 509 0024 13D0     	 beq .L28
 510              	.LBB7:
 143:../cleanflight/src/main/io/vtx.c ****             const vtxSettingsConfig_t settings = vtxGetSettings();
 511              	 .loc 2 143 0
 512 0026 07F10C03 	 add r3,r7,#12
 513 002a 1846     	 mov r0,r3
 514 002c FFF7FEFF 	 bl vtxGetSettings
 144:../cleanflight/src/main/io/vtx.c ****             if (vtxFreq != settings.freq) {
 515              	 .loc 2 144 0
 516 0030 B7F80F30 	 ldrh r3,[r7,#15]
 517 0034 9AB2     	 uxth r2,r3
 518 0036 FB8A     	 ldrh r3,[r7,#22]
 519 0038 9A42     	 cmp r2,r3
 520 003a 08D0     	 beq .L29
 145:../cleanflight/src/main/io/vtx.c ****                 vtxCommonSetFrequency(vtxDevice, settings.freq);
 521              	 .loc 2 145 0
 522 003c B7F80F30 	 ldrh r3,[r7,#15]
 523 0040 9BB2     	 uxth r3,r3
 524 0042 7868     	 ldr r0,[r7,#4]
 525 0044 1946     	 mov r1,r3
 526 0046 FFF7FEFF 	 bl vtxCommonSetFrequency
 146:../cleanflight/src/main/io/vtx.c ****                 return true;
 527              	 .loc 2 146 0
 528 004a 0123     	 movs r3,#1
 529 004c 00E0     	 b .L31
 530              	.L29:
 531              	.L28:
 532              	.LBE7:
 533              	.LBE6:
 147:../cleanflight/src/main/io/vtx.c ****             }
 148:../cleanflight/src/main/io/vtx.c ****         }
 149:../cleanflight/src/main/io/vtx.c ****     }
 150:../cleanflight/src/main/io/vtx.c ****     return false;
 534              	 .loc 2 150 0
 535 004e 0023     	 movs r3,#0
 536              	.L31:
 151:../cleanflight/src/main/io/vtx.c **** }
 537              	 .loc 2 151 0 discriminator 2
 538 0050 1846     	 mov r0,r3
 539 0052 1837     	 adds r7,r7,#24
 540              	.LCFI26:
 541              	 .cfi_def_cfa_offset 8
 542 0054 BD46     	 mov sp,r7
 543              	.LCFI27:
 544              	 .cfi_def_cfa_register 13
 545              	 
 546 0056 80BD     	 pop {r7,pc}
 547              	.L33:
 548              	 .align 2
 549              	.L32:
 550 0058 00000000 	 .word armingFlags
 551              	 .cfi_endproc
 552              	.LFE545:
 554              	 .section .text.vtxProcessPower,"ax",%progbits
 555              	 .align 2
 556              	 .thumb
 557              	 .thumb_func
 559              	vtxProcessPower:
 560              	.LFB546:
 152:../cleanflight/src/main/io/vtx.c **** #endif
 153:../cleanflight/src/main/io/vtx.c **** 
 154:../cleanflight/src/main/io/vtx.c **** static bool vtxProcessPower(vtxDevice_t *vtxDevice)
 155:../cleanflight/src/main/io/vtx.c **** {
 561              	 .loc 2 155 0
 562              	 .cfi_startproc
 563              	 
 564              	 
 565 0000 80B5     	 push {r7,lr}
 566              	.LCFI28:
 567              	 .cfi_def_cfa_offset 8
 568              	 .cfi_offset 7,-8
 569              	 .cfi_offset 14,-4
 570 0002 86B0     	 sub sp,sp,#24
 571              	.LCFI29:
 572              	 .cfi_def_cfa_offset 32
 573 0004 00AF     	 add r7,sp,#0
 574              	.LCFI30:
 575              	 .cfi_def_cfa_register 7
 576 0006 7860     	 str r0,[r7,#4]
 156:../cleanflight/src/main/io/vtx.c ****     uint8_t vtxPower;
 157:../cleanflight/src/main/io/vtx.c ****     if (vtxCommonGetPowerIndex(vtxDevice, &vtxPower)) {
 577              	 .loc 2 157 0
 578 0008 07F11703 	 add r3,r7,#23
 579 000c 7868     	 ldr r0,[r7,#4]
 580 000e 1946     	 mov r1,r3
 581 0010 FFF7FEFF 	 bl vtxCommonGetPowerIndex
 582 0014 0346     	 mov r3,r0
 583 0016 002B     	 cmp r3,#0
 584 0018 0FD0     	 beq .L35
 585              	.LBB8:
 158:../cleanflight/src/main/io/vtx.c ****         const vtxSettingsConfig_t settings = vtxGetSettings();
 586              	 .loc 2 158 0
 587 001a 07F10C03 	 add r3,r7,#12
 588 001e 1846     	 mov r0,r3
 589 0020 FFF7FEFF 	 bl vtxGetSettings
 159:../cleanflight/src/main/io/vtx.c ****         if (vtxPower != settings.power) {
 590              	 .loc 2 159 0
 591 0024 BA7B     	 ldrb r2,[r7,#14]
 592 0026 FB7D     	 ldrb r3,[r7,#23]
 593 0028 9A42     	 cmp r2,r3
 594 002a 06D0     	 beq .L35
 160:../cleanflight/src/main/io/vtx.c ****             vtxCommonSetPowerByIndex(vtxDevice, settings.power);
 595              	 .loc 2 160 0
 596 002c BB7B     	 ldrb r3,[r7,#14]
 597 002e 7868     	 ldr r0,[r7,#4]
 598 0030 1946     	 mov r1,r3
 599 0032 FFF7FEFF 	 bl vtxCommonSetPowerByIndex
 161:../cleanflight/src/main/io/vtx.c ****             return true;
 600              	 .loc 2 161 0
 601 0036 0123     	 movs r3,#1
 602 0038 00E0     	 b .L38
 603              	.L35:
 604              	.LBE8:
 162:../cleanflight/src/main/io/vtx.c ****         }
 163:../cleanflight/src/main/io/vtx.c ****     }
 164:../cleanflight/src/main/io/vtx.c ****     return false;
 605              	 .loc 2 164 0
 606 003a 0023     	 movs r3,#0
 607              	.L38:
 165:../cleanflight/src/main/io/vtx.c **** }
 608              	 .loc 2 165 0 discriminator 1
 609 003c 1846     	 mov r0,r3
 610 003e 1837     	 adds r7,r7,#24
 611              	.LCFI31:
 612              	 .cfi_def_cfa_offset 8
 613 0040 BD46     	 mov sp,r7
 614              	.LCFI32:
 615              	 .cfi_def_cfa_register 13
 616              	 
 617 0042 80BD     	 pop {r7,pc}
 618              	 .cfi_endproc
 619              	.LFE546:
 621              	 .section .text.vtxProcessPitMode,"ax",%progbits
 622              	 .align 2
 623              	 .thumb
 624              	 .thumb_func
 626              	vtxProcessPitMode:
 627              	.LFB547:
 166:../cleanflight/src/main/io/vtx.c **** 
 167:../cleanflight/src/main/io/vtx.c **** static bool vtxProcessPitMode(vtxDevice_t *vtxDevice)
 168:../cleanflight/src/main/io/vtx.c **** {
 628              	 .loc 2 168 0
 629              	 .cfi_startproc
 630              	 
 631              	 
 632 0000 80B5     	 push {r7,lr}
 633              	.LCFI33:
 634              	 .cfi_def_cfa_offset 8
 635              	 .cfi_offset 7,-8
 636              	 .cfi_offset 14,-4
 637 0002 84B0     	 sub sp,sp,#16
 638              	.LCFI34:
 639              	 .cfi_def_cfa_offset 24
 640 0004 00AF     	 add r7,sp,#0
 641              	.LCFI35:
 642              	 .cfi_def_cfa_register 7
 643 0006 7860     	 str r0,[r7,#4]
 169:../cleanflight/src/main/io/vtx.c ****     uint8_t pitOnOff;
 170:../cleanflight/src/main/io/vtx.c **** 
 171:../cleanflight/src/main/io/vtx.c ****     bool        currPmSwitchState;
 172:../cleanflight/src/main/io/vtx.c ****     static bool prevPmSwitchState = false;
 173:../cleanflight/src/main/io/vtx.c **** 
 174:../cleanflight/src/main/io/vtx.c ****     if (!ARMING_FLAG(ARMED) && vtxCommonGetPitMode(vtxDevice, &pitOnOff)) {
 644              	 .loc 2 174 0
 645 0008 224B     	 ldr r3,.L45
 646 000a 1B78     	 ldrb r3,[r3]
 647 000c 03F00103 	 and r3,r3,#1
 648 0010 002B     	 cmp r3,#0
 649 0012 3AD1     	 bne .L40
 650              	 .loc 2 174 0 is_stmt 0 discriminator 1
 651 0014 07F10E03 	 add r3,r7,#14
 652 0018 7868     	 ldr r0,[r7,#4]
 653 001a 1946     	 mov r1,r3
 654 001c FFF7FEFF 	 bl vtxCommonGetPitMode
 655 0020 0346     	 mov r3,r0
 656 0022 002B     	 cmp r3,#0
 657 0024 31D0     	 beq .L40
 175:../cleanflight/src/main/io/vtx.c ****         currPmSwitchState = IS_RC_MODE_ACTIVE(BOXVTXPITMODE);
 658              	 .loc 2 175 0 is_stmt 1
 659 0026 2120     	 movs r0,#33
 660 0028 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 661 002c 0346     	 mov r3,r0
 662 002e FB73     	 strb r3,[r7,#15]
 176:../cleanflight/src/main/io/vtx.c **** 
 177:../cleanflight/src/main/io/vtx.c ****         if (currPmSwitchState != prevPmSwitchState) {
 663              	 .loc 2 177 0
 664 0030 194B     	 ldr r3,.L45+4
 665 0032 1B78     	 ldrb r3,[r3]
 666 0034 FA7B     	 ldrb r2,[r7,#15]
 667 0036 9A42     	 cmp r2,r3
 668 0038 27D0     	 beq .L40
 178:../cleanflight/src/main/io/vtx.c ****             prevPmSwitchState = currPmSwitchState;
 669              	 .loc 2 178 0
 670 003a 174A     	 ldr r2,.L45+4
 671 003c FB7B     	 ldrb r3,[r7,#15]
 672 003e 1370     	 strb r3,[r2]
 179:../cleanflight/src/main/io/vtx.c **** 
 180:../cleanflight/src/main/io/vtx.c ****             if (currPmSwitchState) {
 673              	 .loc 2 180 0
 674 0040 FB7B     	 ldrb r3,[r7,#15]
 675 0042 002B     	 cmp r3,#0
 676 0044 18D0     	 beq .L41
 181:../cleanflight/src/main/io/vtx.c **** #if defined(VTX_SETTINGS_FREQCMD)
 182:../cleanflight/src/main/io/vtx.c ****                 if (vtxSettingsConfig()->pitModeFreq) {
 677              	 .loc 2 182 0
 678 0046 FFF7FEFF 	 bl vtxSettingsConfig
 679 004a 0346     	 mov r3,r0
 680 004c B3F80530 	 ldrh r3,[r3,#5]
 681 0050 9BB2     	 uxth r3,r3
 682 0052 002B     	 cmp r3,#0
 683 0054 01D0     	 beq .L42
 183:../cleanflight/src/main/io/vtx.c ****                     return false;
 684              	 .loc 2 183 0
 685 0056 0023     	 movs r3,#0
 686 0058 18E0     	 b .L44
 687              	.L42:
 184:../cleanflight/src/main/io/vtx.c ****                 }
 185:../cleanflight/src/main/io/vtx.c **** #endif
 186:../cleanflight/src/main/io/vtx.c ****                 if (isModeActivationConditionPresent(BOXVTXPITMODE)) {
 688              	 .loc 2 186 0
 689 005a 2120     	 movs r0,#33
 690 005c FFF7FEFF 	 bl isModeActivationConditionPresent
 691 0060 0346     	 mov r3,r0
 692 0062 002B     	 cmp r3,#0
 693 0064 11D0     	 beq .L40
 187:../cleanflight/src/main/io/vtx.c ****                     if (!pitOnOff) {
 694              	 .loc 2 187 0
 695 0066 BB7B     	 ldrb r3,[r7,#14]
 696 0068 002B     	 cmp r3,#0
 697 006a 0ED1     	 bne .L40
 188:../cleanflight/src/main/io/vtx.c ****                         vtxCommonSetPitMode(vtxDevice, true);
 698              	 .loc 2 188 0
 699 006c 7868     	 ldr r0,[r7,#4]
 700 006e 0121     	 movs r1,#1
 701 0070 FFF7FEFF 	 bl vtxCommonSetPitMode
 189:../cleanflight/src/main/io/vtx.c ****                         return true;
 702              	 .loc 2 189 0
 703 0074 0123     	 movs r3,#1
 704 0076 09E0     	 b .L44
 705              	.L41:
 190:../cleanflight/src/main/io/vtx.c ****                     }
 191:../cleanflight/src/main/io/vtx.c ****                 }
 192:../cleanflight/src/main/io/vtx.c ****             } else {
 193:../cleanflight/src/main/io/vtx.c ****                 if (pitOnOff) {
 706              	 .loc 2 193 0
 707 0078 BB7B     	 ldrb r3,[r7,#14]
 708 007a 002B     	 cmp r3,#0
 709 007c 05D0     	 beq .L40
 194:../cleanflight/src/main/io/vtx.c ****                     vtxCommonSetPitMode(vtxDevice, false);
 710              	 .loc 2 194 0
 711 007e 7868     	 ldr r0,[r7,#4]
 712 0080 0021     	 movs r1,#0
 713 0082 FFF7FEFF 	 bl vtxCommonSetPitMode
 195:../cleanflight/src/main/io/vtx.c ****                     return true;
 714              	 .loc 2 195 0
 715 0086 0123     	 movs r3,#1
 716 0088 00E0     	 b .L44
 717              	.L40:
 196:../cleanflight/src/main/io/vtx.c ****                 }
 197:../cleanflight/src/main/io/vtx.c ****             }
 198:../cleanflight/src/main/io/vtx.c ****         }
 199:../cleanflight/src/main/io/vtx.c ****     }
 200:../cleanflight/src/main/io/vtx.c ****     return false;
 718              	 .loc 2 200 0
 719 008a 0023     	 movs r3,#0
 720              	.L44:
 201:../cleanflight/src/main/io/vtx.c **** }
 721              	 .loc 2 201 0 discriminator 1
 722 008c 1846     	 mov r0,r3
 723 008e 1037     	 adds r7,r7,#16
 724              	.LCFI36:
 725              	 .cfi_def_cfa_offset 8
 726 0090 BD46     	 mov sp,r7
 727              	.LCFI37:
 728              	 .cfi_def_cfa_register 13
 729              	 
 730 0092 80BD     	 pop {r7,pc}
 731              	.L46:
 732              	 .align 2
 733              	.L45:
 734 0094 00000000 	 .word armingFlags
 735 0098 00000000 	 .word prevPmSwitchState.12209
 736              	 .cfi_endproc
 737              	.LFE547:
 739              	 .section .text.vtxProcessStateUpdate,"ax",%progbits
 740              	 .align 2
 741              	 .thumb
 742              	 .thumb_func
 744              	vtxProcessStateUpdate:
 745              	.LFB548:
 202:../cleanflight/src/main/io/vtx.c **** 
 203:../cleanflight/src/main/io/vtx.c **** static bool vtxProcessStateUpdate(vtxDevice_t *vtxDevice)
 204:../cleanflight/src/main/io/vtx.c **** {
 746              	 .loc 2 204 0
 747              	 .cfi_startproc
 748              	 
 749              	 
 750 0000 80B5     	 push {r7,lr}
 751              	.LCFI38:
 752              	 .cfi_def_cfa_offset 8
 753              	 .cfi_offset 7,-8
 754              	 .cfi_offset 14,-4
 755 0002 86B0     	 sub sp,sp,#24
 756              	.LCFI39:
 757              	 .cfi_def_cfa_offset 32
 758 0004 00AF     	 add r7,sp,#0
 759              	.LCFI40:
 760              	 .cfi_def_cfa_register 7
 761 0006 7860     	 str r0,[r7,#4]
 205:../cleanflight/src/main/io/vtx.c ****     const vtxSettingsConfig_t vtxSettingsState = vtxGetSettings();
 762              	 .loc 2 205 0
 763 0008 07F11003 	 add r3,r7,#16
 764 000c 1846     	 mov r0,r3
 765 000e FFF7FEFF 	 bl vtxGetSettings
 206:../cleanflight/src/main/io/vtx.c ****     vtxSettingsConfig_t vtxState = vtxSettingsState;
 766              	 .loc 2 206 0
 767 0012 07F10803 	 add r3,r7,#8
 768 0016 07F11002 	 add r2,r7,#16
 769 001a 92E80300 	 ldmia r2,{r0,r1}
 770 001e 83E80300 	 stmia r3,{r0,r1}
 207:../cleanflight/src/main/io/vtx.c **** 
 208:../cleanflight/src/main/io/vtx.c ****     if (vtxSettingsState.band) {
 771              	 .loc 2 208 0
 772 0022 3B7C     	 ldrb r3,[r7,#16]
 773 0024 002B     	 cmp r3,#0
 774 0026 0AD0     	 beq .L48
 209:../cleanflight/src/main/io/vtx.c ****         vtxCommonGetBandAndChannel(vtxDevice, &vtxState.band, &vtxState.channel);
 775              	 .loc 2 209 0
 776 0028 07F10802 	 add r2,r7,#8
 777 002c 07F10803 	 add r3,r7,#8
 778 0030 0133     	 adds r3,r3,#1
 779 0032 7868     	 ldr r0,[r7,#4]
 780 0034 1146     	 mov r1,r2
 781 0036 1A46     	 mov r2,r3
 782 0038 FFF7FEFF 	 bl vtxCommonGetBandAndChannel
 783 003c 06E0     	 b .L49
 784              	.L48:
 210:../cleanflight/src/main/io/vtx.c **** #if defined(VTX_SETTINGS_FREQCMD)
 211:../cleanflight/src/main/io/vtx.c ****     } else {
 212:../cleanflight/src/main/io/vtx.c ****         vtxCommonGetFrequency(vtxDevice, &vtxState.freq);
 785              	 .loc 2 212 0
 786 003e 07F10803 	 add r3,r7,#8
 787 0042 0333     	 adds r3,r3,#3
 788 0044 7868     	 ldr r0,[r7,#4]
 789 0046 1946     	 mov r1,r3
 790 0048 FFF7FEFF 	 bl vtxCommonGetFrequency
 791              	.L49:
 213:../cleanflight/src/main/io/vtx.c **** #endif
 214:../cleanflight/src/main/io/vtx.c ****     }
 215:../cleanflight/src/main/io/vtx.c **** 
 216:../cleanflight/src/main/io/vtx.c ****     vtxCommonGetPowerIndex(vtxDevice, &vtxState.power);
 792              	 .loc 2 216 0
 793 004c 07F10803 	 add r3,r7,#8
 794 0050 0233     	 adds r3,r3,#2
 795 0052 7868     	 ldr r0,[r7,#4]
 796 0054 1946     	 mov r1,r3
 797 0056 FFF7FEFF 	 bl vtxCommonGetPowerIndex
 217:../cleanflight/src/main/io/vtx.c **** 
 218:../cleanflight/src/main/io/vtx.c ****     return (bool)memcmp(&vtxSettingsState, &vtxState, sizeof(vtxSettingsConfig_t));
 798              	 .loc 2 218 0
 799 005a 07F11002 	 add r2,r7,#16
 800 005e 07F10803 	 add r3,r7,#8
 801 0062 1046     	 mov r0,r2
 802 0064 1946     	 mov r1,r3
 803 0066 0822     	 movs r2,#8
 804 0068 FFF7FEFF 	 bl memcmp
 805 006c 0346     	 mov r3,r0
 806 006e 002B     	 cmp r3,#0
 807 0070 14BF     	 ite ne
 808 0072 0123     	 movne r3,#1
 809 0074 0023     	 moveq r3,#0
 810 0076 DBB2     	 uxtb r3,r3
 219:../cleanflight/src/main/io/vtx.c **** }
 811              	 .loc 2 219 0
 812 0078 1846     	 mov r0,r3
 813 007a 1837     	 adds r7,r7,#24
 814              	.LCFI41:
 815              	 .cfi_def_cfa_offset 8
 816 007c BD46     	 mov sp,r7
 817              	.LCFI42:
 818              	 .cfi_def_cfa_register 13
 819              	 
 820 007e 80BD     	 pop {r7,pc}
 821              	 .cfi_endproc
 822              	.LFE548:
 824              	 .section .text.vtxUpdate,"ax",%progbits
 825              	 .align 2
 826              	 .global vtxUpdate
 827              	 .thumb
 828              	 .thumb_func
 830              	vtxUpdate:
 831              	.LFB549:
 220:../cleanflight/src/main/io/vtx.c **** 
 221:../cleanflight/src/main/io/vtx.c **** void vtxUpdate(timeUs_t currentTimeUs)
 222:../cleanflight/src/main/io/vtx.c **** {
 832              	 .loc 2 222 0
 833              	 .cfi_startproc
 834              	 
 835              	 
 836 0000 80B5     	 push {r7,lr}
 837              	.LCFI43:
 838              	 .cfi_def_cfa_offset 8
 839              	 .cfi_offset 7,-8
 840              	 .cfi_offset 14,-4
 841 0002 88B0     	 sub sp,sp,#32
 842              	.LCFI44:
 843              	 .cfi_def_cfa_offset 40
 844 0004 00AF     	 add r7,sp,#0
 845              	.LCFI45:
 846              	 .cfi_def_cfa_register 7
 847 0006 7860     	 str r0,[r7,#4]
 223:../cleanflight/src/main/io/vtx.c ****     static uint8_t currentSchedule = 0;
 224:../cleanflight/src/main/io/vtx.c **** 
 225:../cleanflight/src/main/io/vtx.c ****     if (cliMode) {
 848              	 .loc 2 225 0
 849 0008 384B     	 ldr r3,.L68
 850 000a 1B78     	 ldrb r3,[r3]
 851 000c 002B     	 cmp r3,#0
 852 000e 00D0     	 beq .L52
 226:../cleanflight/src/main/io/vtx.c ****         return;
 853              	 .loc 2 226 0
 854 0010 69E0     	 b .L51
 855              	.L52:
 227:../cleanflight/src/main/io/vtx.c ****     }
 228:../cleanflight/src/main/io/vtx.c **** 
 229:../cleanflight/src/main/io/vtx.c ****     vtxDevice_t *vtxDevice = vtxCommonDevice();
 856              	 .loc 2 229 0
 857 0012 FFF7FEFF 	 bl vtxCommonDevice
 858 0016 B861     	 str r0,[r7,#24]
 230:../cleanflight/src/main/io/vtx.c ****     if (vtxDevice) {
 859              	 .loc 2 230 0
 860 0018 BB69     	 ldr r3,[r7,#24]
 861 001a 002B     	 cmp r3,#0
 862 001c 63D0     	 beq .L51
 863              	.LBB9:
 231:../cleanflight/src/main/io/vtx.c ****         // Check input sources for config updates
 232:../cleanflight/src/main/io/vtx.c ****         vtxControlInputPoll();
 864              	 .loc 2 232 0
 865 001e FFF7FEFF 	 bl vtxControlInputPoll
 233:../cleanflight/src/main/io/vtx.c **** 
 234:../cleanflight/src/main/io/vtx.c ****         const uint8_t startingSchedule = currentSchedule;
 866              	 .loc 2 234 0
 867 0022 334B     	 ldr r3,.L68+4
 868 0024 1B78     	 ldrb r3,[r3]
 869 0026 FB75     	 strb r3,[r7,#23]
 235:../cleanflight/src/main/io/vtx.c ****         bool vtxUpdatePending = false;
 870              	 .loc 2 235 0
 871 0028 0023     	 movs r3,#0
 872 002a FB77     	 strb r3,[r7,#31]
 873              	.L65:
 236:../cleanflight/src/main/io/vtx.c ****         do {
 237:../cleanflight/src/main/io/vtx.c ****             switch (currentSchedule) {
 874              	 .loc 2 237 0
 875 002c 304B     	 ldr r3,.L68+4
 876 002e 1B78     	 ldrb r3,[r3]
 877 0030 032B     	 cmp r3,#3
 878 0032 31D8     	 bhi .L67
 879 0034 01A2     	 adr r2,.L56
 880 0036 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 881 003a 00BF     	 .p2align 2
 882              	.L56:
 883 003c 4D000000 	 .word .L55+1
 884 0040 59000000 	 .word .L57+1
 885 0044 81000000 	 .word .L58+1
 886 0048 8D000000 	 .word .L59+1
 887              	 .p2align 1
 888              	.L55:
 238:../cleanflight/src/main/io/vtx.c ****                 case VTX_PARAM_POWER:
 239:../cleanflight/src/main/io/vtx.c ****                     vtxUpdatePending = vtxProcessPower(vtxDevice);
 889              	 .loc 2 239 0
 890 004c B869     	 ldr r0,[r7,#24]
 891 004e FFF7FEFF 	 bl vtxProcessPower
 892 0052 0346     	 mov r3,r0
 893 0054 FB77     	 strb r3,[r7,#31]
 240:../cleanflight/src/main/io/vtx.c ****                     break;
 894              	 .loc 2 240 0
 895 0056 20E0     	 b .L60
 896              	.L57:
 241:../cleanflight/src/main/io/vtx.c ****                 case VTX_PARAM_BANDCHAN:
 242:../cleanflight/src/main/io/vtx.c ****                     if (vtxGetSettings().band) {
 897              	 .loc 2 242 0
 898 0058 07F10C03 	 add r3,r7,#12
 899 005c 1846     	 mov r0,r3
 900 005e FFF7FEFF 	 bl vtxGetSettings
 901 0062 3B7B     	 ldrb r3,[r7,#12]
 902 0064 002B     	 cmp r3,#0
 903 0066 05D0     	 beq .L61
 243:../cleanflight/src/main/io/vtx.c ****                         vtxUpdatePending = vtxProcessBandAndChannel(vtxDevice);
 904              	 .loc 2 243 0
 905 0068 B869     	 ldr r0,[r7,#24]
 906 006a FFF7FEFF 	 bl vtxProcessBandAndChannel
 907 006e 0346     	 mov r3,r0
 908 0070 FB77     	 strb r3,[r7,#31]
 244:../cleanflight/src/main/io/vtx.c **** #if defined(VTX_SETTINGS_FREQCMD)
 245:../cleanflight/src/main/io/vtx.c ****                     } else {
 246:../cleanflight/src/main/io/vtx.c ****                         vtxUpdatePending = vtxProcessFrequency(vtxDevice);
 247:../cleanflight/src/main/io/vtx.c **** #endif
 248:../cleanflight/src/main/io/vtx.c ****                     }
 249:../cleanflight/src/main/io/vtx.c ****                     break;
 909              	 .loc 2 249 0
 910 0072 12E0     	 b .L60
 911              	.L61:
 246:../cleanflight/src/main/io/vtx.c **** #endif
 912              	 .loc 2 246 0
 913 0074 B869     	 ldr r0,[r7,#24]
 914 0076 FFF7FEFF 	 bl vtxProcessFrequency
 915 007a 0346     	 mov r3,r0
 916 007c FB77     	 strb r3,[r7,#31]
 917              	 .loc 2 249 0
 918 007e 0CE0     	 b .L60
 919              	.L58:
 250:../cleanflight/src/main/io/vtx.c ****                 case VTX_PARAM_PITMODE:
 251:../cleanflight/src/main/io/vtx.c ****                     vtxUpdatePending = vtxProcessPitMode(vtxDevice);
 920              	 .loc 2 251 0
 921 0080 B869     	 ldr r0,[r7,#24]
 922 0082 FFF7FEFF 	 bl vtxProcessPitMode
 923 0086 0346     	 mov r3,r0
 924 0088 FB77     	 strb r3,[r7,#31]
 252:../cleanflight/src/main/io/vtx.c ****                     break;
 925              	 .loc 2 252 0
 926 008a 06E0     	 b .L60
 927              	.L59:
 253:../cleanflight/src/main/io/vtx.c ****                 case VTX_PARAM_CONFIRM:
 254:../cleanflight/src/main/io/vtx.c ****                     vtxUpdatePending = vtxProcessStateUpdate(vtxDevice);
 928              	 .loc 2 254 0
 929 008c B869     	 ldr r0,[r7,#24]
 930 008e FFF7FEFF 	 bl vtxProcessStateUpdate
 931 0092 0346     	 mov r3,r0
 932 0094 FB77     	 strb r3,[r7,#31]
 255:../cleanflight/src/main/io/vtx.c ****                     break;
 933              	 .loc 2 255 0
 934 0096 00E0     	 b .L60
 935              	.L67:
 256:../cleanflight/src/main/io/vtx.c ****                 default:
 257:../cleanflight/src/main/io/vtx.c ****                     break;
 936              	 .loc 2 257 0
 937 0098 00BF     	 nop
 938              	.L60:
 258:../cleanflight/src/main/io/vtx.c ****             }
 259:../cleanflight/src/main/io/vtx.c ****             currentSchedule = (currentSchedule + 1) % VTX_PARAM_COUNT;
 939              	 .loc 2 259 0
 940 009a 154B     	 ldr r3,.L68+4
 941 009c 1B78     	 ldrb r3,[r3]
 942 009e 5A1C     	 adds r2,r3,#1
 943 00a0 144B     	 ldr r3,.L68+8
 944 00a2 1340     	 ands r3,r3,r2
 945 00a4 002B     	 cmp r3,#0
 946 00a6 03DA     	 bge .L63
 947 00a8 013B     	 subs r3,r3,#1
 948 00aa 63F00303 	 orn r3,r3,#3
 949 00ae 0133     	 adds r3,r3,#1
 950              	.L63:
 951 00b0 DAB2     	 uxtb r2,r3
 952 00b2 0F4B     	 ldr r3,.L68+4
 953 00b4 1A70     	 strb r2,[r3]
 260:../cleanflight/src/main/io/vtx.c ****         } while (!vtxUpdatePending && currentSchedule != startingSchedule);
 954              	 .loc 2 260 0
 955 00b6 FB7F     	 ldrb r3,[r7,#31]
 956 00b8 83F00103 	 eor r3,r3,#1
 957 00bc DBB2     	 uxtb r3,r3
 958 00be 002B     	 cmp r3,#0
 959 00c0 04D0     	 beq .L64
 960              	 .loc 2 260 0 is_stmt 0 discriminator 1
 961 00c2 0B4B     	 ldr r3,.L68+4
 962 00c4 1B78     	 ldrb r3,[r3]
 963 00c6 FA7D     	 ldrb r2,[r7,#23]
 964 00c8 9A42     	 cmp r2,r3
 965 00ca AFD1     	 bne .L65
 966              	.L64:
 261:../cleanflight/src/main/io/vtx.c **** 
 262:../cleanflight/src/main/io/vtx.c ****         if (!ARMING_FLAG(ARMED) || vtxUpdatePending) {
 967              	 .loc 2 262 0 is_stmt 1
 968 00cc 0A4B     	 ldr r3,.L68+12
 969 00ce 1B78     	 ldrb r3,[r3]
 970 00d0 03F00103 	 and r3,r3,#1
 971 00d4 002B     	 cmp r3,#0
 972 00d6 02D0     	 beq .L66
 973              	 .loc 2 262 0 is_stmt 0 discriminator 1
 974 00d8 FB7F     	 ldrb r3,[r7,#31]
 975 00da 002B     	 cmp r3,#0
 976 00dc 03D0     	 beq .L51
 977              	.L66:
 263:../cleanflight/src/main/io/vtx.c ****             vtxCommonProcess(vtxDevice, currentTimeUs);
 978              	 .loc 2 263 0 is_stmt 1
 979 00de B869     	 ldr r0,[r7,#24]
 980 00e0 7968     	 ldr r1,[r7,#4]
 981 00e2 FFF7FEFF 	 bl vtxCommonProcess
 982              	.L51:
 983              	.LBE9:
 264:../cleanflight/src/main/io/vtx.c ****         }
 265:../cleanflight/src/main/io/vtx.c ****     }
 266:../cleanflight/src/main/io/vtx.c **** }
 984              	 .loc 2 266 0
 985 00e6 2037     	 adds r7,r7,#32
 986              	.LCFI46:
 987              	 .cfi_def_cfa_offset 8
 988 00e8 BD46     	 mov sp,r7
 989              	.LCFI47:
 990              	 .cfi_def_cfa_register 13
 991              	 
 992 00ea 80BD     	 pop {r7,pc}
 993              	.L69:
 994              	 .align 2
 995              	.L68:
 996 00ec 00000000 	 .word cliMode
 997 00f0 00000000 	 .word currentSchedule.12218
 998 00f4 03000080 	 .word -2147483645
 999 00f8 00000000 	 .word armingFlags
 1000              	 .cfi_endproc
 1001              	.LFE549:
 1003              	 .section .bss.prevPmSwitchState.12209,"aw",%nobits
 1006              	prevPmSwitchState.12209:
 1007 0000 00       	 .space 1
 1008              	 .section .bss.currentSchedule.12218,"aw",%nobits
 1011              	currentSchedule.12218:
 1012 0000 00       	 .space 1
 1013              	 .text
 1014              	.Letext0:
 1015              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1016              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1017              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 1018              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 1019              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 1020              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/vtx_common.h"
 1021              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 1022              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 1023              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 1024              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
 1025              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx_control.h"
 1026              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 1027              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
 1028              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/interface/cli.h"
DEFINED SYMBOLS
                            *ABS*:00000000 vtx.c
    {standard input}:20     .text.vtxSettingsConfig:00000000 $t
    {standard input}:24     .text.vtxSettingsConfig:00000000 vtxSettingsConfig
    {standard input}:54     .text.vtxSettingsConfig:00000010 $d
                            *COM*:00000008 vtxSettingsConfig_System
    {standard input}:59     .text.vtxSettingsConfigMutable:00000000 $t
    {standard input}:63     .text.vtxSettingsConfigMutable:00000000 vtxSettingsConfigMutable
    {standard input}:92     .text.vtxSettingsConfigMutable:00000010 $d
                            *COM*:00000008 vtxSettingsConfig_Copy
    {standard input}:103    .pg_registry:00000000 vtxSettingsConfig_Registry
    {standard input}:100    .pg_registry:00000000 $d
    {standard input}:115    .pg_resetdata:00000000 pgResetTemplate_vtxSettingsConfig
    {standard input}:112    .pg_resetdata:00000000 $d
    {standard input}:123    .text.vtxInit:00000000 $t
    {standard input}:128    .text.vtxInit:00000000 vtxInit
    {standard input}:249    .text.vtxGetSettings:00000000 $t
    {standard input}:253    .text.vtxGetSettings:00000000 vtxGetSettings
    {standard input}:378    .text.vtxGetSettings:000000c0 $d
    {standard input}:383    .text.vtxProcessBandAndChannel:00000000 $t
    {standard input}:387    .text.vtxProcessBandAndChannel:00000000 vtxProcessBandAndChannel
    {standard input}:468    .text.vtxProcessBandAndChannel:00000064 $d
    {standard input}:473    .text.vtxProcessFrequency:00000000 $t
    {standard input}:477    .text.vtxProcessFrequency:00000000 vtxProcessFrequency
    {standard input}:550    .text.vtxProcessFrequency:00000058 $d
    {standard input}:555    .text.vtxProcessPower:00000000 $t
    {standard input}:559    .text.vtxProcessPower:00000000 vtxProcessPower
    {standard input}:622    .text.vtxProcessPitMode:00000000 $t
    {standard input}:626    .text.vtxProcessPitMode:00000000 vtxProcessPitMode
    {standard input}:734    .text.vtxProcessPitMode:00000094 $d
    {standard input}:1006   .bss.prevPmSwitchState.12209:00000000 prevPmSwitchState.12209
    {standard input}:740    .text.vtxProcessStateUpdate:00000000 $t
    {standard input}:744    .text.vtxProcessStateUpdate:00000000 vtxProcessStateUpdate
    {standard input}:825    .text.vtxUpdate:00000000 $t
    {standard input}:830    .text.vtxUpdate:00000000 vtxUpdate
    {standard input}:883    .text.vtxUpdate:0000003c $d
    {standard input}:887    .text.vtxUpdate:0000004c $t
    {standard input}:996    .text.vtxUpdate:000000ec $d
    {standard input}:1011   .bss.currentSchedule.12218:00000000 currentSchedule.12218
    {standard input}:1007   .bss.prevPmSwitchState.12209:00000000 $d
    {standard input}:1012   .bss.currentSchedule.12218:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vtx58_Bandchan2Freq
saveConfigAndNotify
IS_RC_MODE_ACTIVE
isModeActivationConditionPresent
failsafeIsActive
armingFlags
vtxCommonGetBandAndChannel
vtxCommonSetBandAndChannel
vtxCommonGetFrequency
vtxCommonSetFrequency
vtxCommonGetPowerIndex
vtxCommonSetPowerByIndex
vtxCommonGetPitMode
vtxCommonSetPitMode
memcmp
vtxCommonDevice
vtxControlInputPoll
vtxCommonProcess
cliMode
