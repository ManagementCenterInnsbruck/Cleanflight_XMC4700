   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "vtx_tramp.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.cmp32,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	cmp32:
  25              	.LFB520:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/utils.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #include <stddef.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define NOOP do {} while (0)
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define ARRAYLEN(x) (sizeof(x) / sizeof((x)[0]))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define ARRAYEND(x) (&(x)[ARRAYLEN(x)])
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONST_CAST(type, value) ((type)(value))
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT_HELPER(x,y) x ## y
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT(x,y) CONCAT_HELPER(x, y)
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT2(_1,_2) CONCAT(_1, _2)
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT3(_1,_2,_3)  CONCAT(CONCAT(_1, _2), _3)
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT4(_1,_2,_3,_4)  CONCAT(CONCAT3(_1, _2, _3), _4)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STR_HELPER(x) #x
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STR(x) STR_HELPER(x)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define EXPAND_I(x) x
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define EXPAND(x) EXPAND_I(x)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // expand to t if bit is 1, f when bit is 0. Other bit values are not supported
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF(bit, t, f) PP_IIF_I(bit, t, f)
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_I(bit, t, f) PP_IIF_ ## bit(t, f)
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_0(t, f) f
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_1(t, f) t
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // Expand all argumens and call macro with them. When expansion of some argument contains ',', it w
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // #define TAKE3(_1,_2,_3) CONCAT3(_1,_2,_3)
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // #define MULTI2 A,B
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // PP_CALL(TAKE3, MULTI2, C) expands to ABC
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_CALL(macro, ...) macro(__VA_ARGS__)
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #if !defined(UNUSED)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define UNUSED(x) (void)(x)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #endif
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STATIC_ASSERT(condition, name) \
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****     typedef char assert_failed_ ## name [(condition) ? 1 : -1 ] __attribute__((unused))
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BIT(x) (1 << (x))
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** http://resnet.uoregon.edu/~gurney_j/jmpc/bitwise.html
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** */
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BITCOUNT(x) (((BX_(x)+(BX_(x)>>4)) & 0x0F0F0F0F) % 255)
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BX_(x) ((x) - (((x)>>1)&0x77777777) - (((x)>>2)&0x33333333) - (((x)>>3)&0x11111111))
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * https://groups.google.com/forum/?hl=en#!msg/comp.lang.c/attFnqwhvGk/sGBKXvIkY3AJ
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Return (v ? floor(log2(v)) : 0) when 0 <= v < 1<<[8, 16, 32, 64].
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Inefficient algorithm, intended for compile-time constants.
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  */
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_8BIT(v)  (8 - 90/(((v)/4+14)|1) - 2/((v)/2+1))
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_16BIT(v) (8*((v)>255) + LOG2_8BIT((v) >>8*((v)>255)))
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_32BIT(v) (16*((v)>65535L) + LOG2_16BIT((v)*1L >>16*((v)>65535L)))
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_64BIT(v) \
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****     (32*((v)/2L>>31 > 0) \
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****      + LOG2_32BIT((v)*1L >>16*((v)/2L>>31 > 0) \
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****                          >>16*((v)/2L>>31 > 0)))
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2(v) LOG2_64BIT(v)
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #if 0
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // ISO C version, but no type checking
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define container_of(ptr, type, member) \
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****                       ((type *) ((char *)(ptr) - offsetof(type, member)))
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #else
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // non ISO variant from linux kernel; checks ptr type, but triggers 'ISO C forbids braced-groups wi
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** //  __extension__ is here to disable this warning
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define container_of(ptr, type, member)  ( __extension__ ({     \
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****         const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****         (type *)( (char *)__mptr - offsetof(type,member) );}))
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** static inline int16_t cmp16(uint16_t a, uint16_t b) { return (int16_t)(a-b); }
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** static inline int32_t cmp32(uint32_t a, uint32_t b) { return (int32_t)(a-b); }
  27              	 .loc 1 100 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
  44              	 .loc 1 100 0
  45 000a 7A68     	 ldr r2,[r7,#4]
  46 000c 3B68     	 ldr r3,[r7]
  47 000e D31A     	 subs r3,r2,r3
  48 0010 1846     	 mov r0,r3
  49 0012 0C37     	 adds r7,r7,#12
  50              	.LCFI3:
  51              	 .cfi_def_cfa_offset 4
  52 0014 BD46     	 mov sp,r7
  53              	.LCFI4:
  54              	 .cfi_def_cfa_register 13
  55              	 
  56 0016 5DF8047B 	 ldr r7,[sp],#4
  57              	.LCFI5:
  58              	 .cfi_restore 7
  59              	 .cfi_def_cfa_offset 0
  60 001a 7047     	 bx lr
  61              	 .cfi_endproc
  62              	.LFE520:
  64              	 .comm pCurrentDisplay,4,4
  65              	 .section .text.vtxConfig,"ax",%progbits
  66              	 .align 2
  67              	 .thumb
  68              	 .thumb_func
  70              	vtxConfig:
  71              	.LFB536:
  72              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx_control.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include "platform.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include "pg/pg.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #include "fc/rc_modes.h"
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** #define MAX_CHANNEL_ACTIVATION_CONDITION_COUNT  10
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** typedef struct vtxChannelActivationCondition_s {
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     uint8_t auxChannelIndex;
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     uint8_t band;
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     uint8_t channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     channelRange_t range;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** } vtxChannelActivationCondition_t;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** typedef struct vtxConfig_s {
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     vtxChannelActivationCondition_t vtxChannelActivationConditions[MAX_CHANNEL_ACTIVATION_CONDITION
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h ****     uint8_t halfDuplex;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** } vtxConfig_t;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\vtx_control.h **** PG_DECLARE(vtxConfig_t, vtxConfig);
  73              	 .loc 2 45 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77              	 
  78 0000 80B4     	 push {r7}
  79              	.LCFI6:
  80              	 .cfi_def_cfa_offset 4
  81              	 .cfi_offset 7,-4
  82 0002 00AF     	 add r7,sp,#0
  83              	.LCFI7:
  84              	 .cfi_def_cfa_register 7
  85              	 .loc 2 45 0
  86 0004 024B     	 ldr r3,.L5
  87 0006 1846     	 mov r0,r3
  88 0008 BD46     	 mov sp,r7
  89              	.LCFI8:
  90              	 .cfi_def_cfa_register 13
  91              	 
  92 000a 5DF8047B 	 ldr r7,[sp],#4
  93              	.LCFI9:
  94              	 .cfi_restore 7
  95              	 .cfi_def_cfa_offset 0
  96 000e 7047     	 bx lr
  97              	.L6:
  98              	 .align 2
  99              	.L5:
 100 0010 00000000 	 .word vtxConfig_System
 101              	 .cfi_endproc
 102              	.LFE536:
 104              	 .global trampPowerTable
 105              	 .section .rodata.trampPowerTable,"a",%progbits
 106              	 .align 2
 109              	trampPowerTable:
 110 0000 1900     	 .short 25
 111 0002 6400     	 .short 100
 112 0004 C800     	 .short 200
 113 0006 9001     	 .short 400
 114 0008 5802     	 .short 600
 115              	 .global trampPowerNames
 116 000a 0000     	 .section .rodata
 117              	 .align 2
 118              	.LC0:
 119 0000 2D2D2D00 	 .ascii "---\000"
 120              	 .align 2
 121              	.LC1:
 122 0004 32352000 	 .ascii "25 \000"
 123              	 .align 2
 124              	.LC2:
 125 0008 31303000 	 .ascii "100\000"
 126              	 .align 2
 127              	.LC3:
 128 000c 32303000 	 .ascii "200\000"
 129              	 .align 2
 130              	.LC4:
 131 0010 34303000 	 .ascii "400\000"
 132              	 .align 2
 133              	.LC5:
 134 0014 36303000 	 .ascii "600\000"
 135              	 .section .rodata.trampPowerNames,"a",%progbits
 136              	 .align 2
 139              	trampPowerNames:
 140 0000 00000000 	 .word .LC0
 141 0004 04000000 	 .word .LC1
 142 0008 08000000 	 .word .LC2
 143 000c 0C000000 	 .word .LC3
 144 0010 10000000 	 .word .LC4
 145 0014 14000000 	 .word .LC5
 146              	 .section .rodata.trampVTable,"a",%progbits
 147              	 .align 2
 150              	trampVTable:
 151 0000 00000000 	 .word vtxTrampProcess
 152 0004 00000000 	 .word vtxTrampGetDeviceType
 153 0008 00000000 	 .word vtxTrampIsReady
 154 000c 00000000 	 .word vtxTrampSetBandAndChannel
 155 0010 00000000 	 .word vtxTrampSetPowerByIndex
 156 0014 00000000 	 .word vtxTrampSetPitMode
 157 0018 00000000 	 .word vtxTrampSetFreq
 158 001c 00000000 	 .word vtxTrampGetBandAndChannel
 159 0020 00000000 	 .word vtxTrampGetPowerIndex
 160 0024 00000000 	 .word vtxTrampGetPitMode
 161 0028 00000000 	 .word vtxTrampGetFreq
 162              	 .section .data.vtxTramp,"aw",%progbits
 163              	 .align 2
 166              	vtxTramp:
 167 0000 00000000 	 .word trampVTable
 168 0004 05       	 .byte 5
 169 0005 08       	 .byte 8
 170 0006 0A       	 .byte 10
 171 0007 00       	 .space 1
 172 0008 00000000 	 .space 4
 173 000c 00000000 	 .word vtx58BandNames
 174 0010 00000000 	 .word vtx58ChannelNames
 175 0014 00000000 	 .word trampPowerNames
 176 0018 00000000 	 .space 6
 176      0000
 177 001e 0000     	 .section .bss.trampSerialPort,"aw",%nobits
 178              	 .align 2
 181              	trampSerialPort:
 182 0000 00000000 	 .space 4
 183              	 .section .bss.trampReqBuffer,"aw",%nobits
 184              	 .align 2
 187              	trampReqBuffer:
 188 0000 00000000 	 .space 16
 188      00000000 
 188      00000000 
 188      00000000 
 189              	 .section .bss.trampRespBuffer,"aw",%nobits
 190              	 .align 2
 193              	trampRespBuffer:
 194 0000 00000000 	 .space 16
 194      00000000 
 194      00000000 
 194      00000000 
 195              	 .global trampStatus
 196              	 .section .bss.trampStatus,"aw",%nobits
 199              	trampStatus:
 200 0000 00       	 .space 1
 201              	 .comm trampRFFreqMin,4,4
 202              	 .comm trampRFFreqMax,4,4
 203              	 .comm trampRFPowerMax,4,4
 204              	 .global trampSetByFreqFlag
 205              	 .section .bss.trampSetByFreqFlag,"aw",%nobits
 208              	trampSetByFreqFlag:
 209 0000 00       	 .space 1
 210              	 .global trampCurFreq
 211              	 .section .bss.trampCurFreq,"aw",%nobits
 212              	 .align 2
 215              	trampCurFreq:
 216 0000 00000000 	 .space 4
 217              	 .global trampBand
 218              	 .section .bss.trampBand,"aw",%nobits
 221              	trampBand:
 222 0000 00       	 .space 1
 223              	 .global trampChannel
 224              	 .section .bss.trampChannel,"aw",%nobits
 227              	trampChannel:
 228 0000 00       	 .space 1
 229              	 .global trampPower
 230              	 .section .bss.trampPower,"aw",%nobits
 231              	 .align 1
 234              	trampPower:
 235 0000 0000     	 .space 2
 236              	 .global trampConfiguredPower
 237              	 .section .bss.trampConfiguredPower,"aw",%nobits
 238              	 .align 1
 241              	trampConfiguredPower:
 242 0000 0000     	 .space 2
 243              	 .global trampTemperature
 244              	 .section .bss.trampTemperature,"aw",%nobits
 245              	 .align 1
 248              	trampTemperature:
 249 0000 0000     	 .space 2
 250              	 .global trampPitMode
 251              	 .section .bss.trampPitMode,"aw",%nobits
 254              	trampPitMode:
 255 0000 00       	 .space 1
 256              	 .global trampConfFreq
 257              	 .section .bss.trampConfFreq,"aw",%nobits
 258              	 .align 2
 261              	trampConfFreq:
 262 0000 00000000 	 .space 4
 263              	 .global trampFreqRetries
 264              	 .section .bss.trampFreqRetries,"aw",%nobits
 267              	trampFreqRetries:
 268 0000 00       	 .space 1
 269              	 .global trampConfPower
 270              	 .section .bss.trampConfPower,"aw",%nobits
 271              	 .align 1
 274              	trampConfPower:
 275 0000 0000     	 .space 2
 276              	 .global trampPowerRetries
 277              	 .section .bss.trampPowerRetries,"aw",%nobits
 280              	trampPowerRetries:
 281 0000 00       	 .space 1
 282              	 .section .text.trampWriteBuf,"ax",%progbits
 283              	 .align 2
 284              	 .thumb
 285              	 .thumb_func
 287              	trampWriteBuf:
 288              	.LFB540:
 289              	 .file 3 "../cleanflight/src/main/io/vtx_tramp.c"
   1:../cleanflight/src/main/io/vtx_tramp.c **** /*
   2:../cleanflight/src/main/io/vtx_tramp.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/io/vtx_tramp.c ****  *
   4:../cleanflight/src/main/io/vtx_tramp.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/io/vtx_tramp.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/io/vtx_tramp.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/io/vtx_tramp.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/io/vtx_tramp.c ****  * any later version.
   9:../cleanflight/src/main/io/vtx_tramp.c ****  *
  10:../cleanflight/src/main/io/vtx_tramp.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/io/vtx_tramp.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/io/vtx_tramp.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/io/vtx_tramp.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/io/vtx_tramp.c ****  *
  15:../cleanflight/src/main/io/vtx_tramp.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/io/vtx_tramp.c ****  * along with this software.
  17:../cleanflight/src/main/io/vtx_tramp.c ****  *
  18:../cleanflight/src/main/io/vtx_tramp.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/io/vtx_tramp.c ****  */
  20:../cleanflight/src/main/io/vtx_tramp.c **** 
  21:../cleanflight/src/main/io/vtx_tramp.c **** /* Created by jflyper */
  22:../cleanflight/src/main/io/vtx_tramp.c **** 
  23:../cleanflight/src/main/io/vtx_tramp.c **** #include <stdbool.h>
  24:../cleanflight/src/main/io/vtx_tramp.c **** #include <stdint.h>
  25:../cleanflight/src/main/io/vtx_tramp.c **** #include <ctype.h>
  26:../cleanflight/src/main/io/vtx_tramp.c **** #include <string.h>
  27:../cleanflight/src/main/io/vtx_tramp.c **** 
  28:../cleanflight/src/main/io/vtx_tramp.c **** #include "platform.h"
  29:../cleanflight/src/main/io/vtx_tramp.c **** 
  30:../cleanflight/src/main/io/vtx_tramp.c **** #if defined(USE_VTX_TRAMP) && defined(USE_VTX_CONTROL)
  31:../cleanflight/src/main/io/vtx_tramp.c **** 
  32:../cleanflight/src/main/io/vtx_tramp.c **** #include "build/debug.h"
  33:../cleanflight/src/main/io/vtx_tramp.c **** 
  34:../cleanflight/src/main/io/vtx_tramp.c **** #include "common/maths.h"
  35:../cleanflight/src/main/io/vtx_tramp.c **** #include "common/utils.h"
  36:../cleanflight/src/main/io/vtx_tramp.c **** 
  37:../cleanflight/src/main/io/vtx_tramp.c **** #include "cms/cms_menu_vtx_tramp.h"
  38:../cleanflight/src/main/io/vtx_tramp.c **** 
  39:../cleanflight/src/main/io/vtx_tramp.c **** #include "drivers/vtx_common.h"
  40:../cleanflight/src/main/io/vtx_tramp.c **** 
  41:../cleanflight/src/main/io/vtx_tramp.c **** #include "io/serial.h"
  42:../cleanflight/src/main/io/vtx_tramp.c **** #include "io/vtx_tramp.h"
  43:../cleanflight/src/main/io/vtx_tramp.c **** #include "io/vtx_control.h"
  44:../cleanflight/src/main/io/vtx_tramp.c **** #include "io/vtx.h"
  45:../cleanflight/src/main/io/vtx_tramp.c **** #include "io/vtx_string.h"
  46:../cleanflight/src/main/io/vtx_tramp.c **** 
  47:../cleanflight/src/main/io/vtx_tramp.c **** #if defined(USE_CMS) || defined(USE_VTX_COMMON)
  48:../cleanflight/src/main/io/vtx_tramp.c **** const uint16_t trampPowerTable[VTX_TRAMP_POWER_COUNT] = {
  49:../cleanflight/src/main/io/vtx_tramp.c ****     25, 100, 200, 400, 600
  50:../cleanflight/src/main/io/vtx_tramp.c **** };
  51:../cleanflight/src/main/io/vtx_tramp.c **** 
  52:../cleanflight/src/main/io/vtx_tramp.c **** const char * const trampPowerNames[VTX_TRAMP_POWER_COUNT+1] = {
  53:../cleanflight/src/main/io/vtx_tramp.c ****     "---", "25 ", "100", "200", "400", "600"
  54:../cleanflight/src/main/io/vtx_tramp.c **** };
  55:../cleanflight/src/main/io/vtx_tramp.c **** #endif
  56:../cleanflight/src/main/io/vtx_tramp.c **** 
  57:../cleanflight/src/main/io/vtx_tramp.c **** #if defined(USE_VTX_COMMON)
  58:../cleanflight/src/main/io/vtx_tramp.c **** static const vtxVTable_t trampVTable; // forward
  59:../cleanflight/src/main/io/vtx_tramp.c **** static vtxDevice_t vtxTramp = {
  60:../cleanflight/src/main/io/vtx_tramp.c ****     .vTable = &trampVTable,
  61:../cleanflight/src/main/io/vtx_tramp.c ****     .capability.bandCount = VTX_TRAMP_BAND_COUNT,
  62:../cleanflight/src/main/io/vtx_tramp.c ****     .capability.channelCount = VTX_TRAMP_CHANNEL_COUNT,
  63:../cleanflight/src/main/io/vtx_tramp.c ****     .capability.powerCount = sizeof(trampPowerTable),
  64:../cleanflight/src/main/io/vtx_tramp.c ****     .bandNames = (char **)vtx58BandNames,
  65:../cleanflight/src/main/io/vtx_tramp.c ****     .channelNames = (char **)vtx58ChannelNames,
  66:../cleanflight/src/main/io/vtx_tramp.c ****     .powerNames = (char **)trampPowerNames,
  67:../cleanflight/src/main/io/vtx_tramp.c **** };
  68:../cleanflight/src/main/io/vtx_tramp.c **** #endif
  69:../cleanflight/src/main/io/vtx_tramp.c **** 
  70:../cleanflight/src/main/io/vtx_tramp.c **** static serialPort_t *trampSerialPort = NULL;
  71:../cleanflight/src/main/io/vtx_tramp.c **** 
  72:../cleanflight/src/main/io/vtx_tramp.c **** static uint8_t trampReqBuffer[16];
  73:../cleanflight/src/main/io/vtx_tramp.c **** static uint8_t trampRespBuffer[16];
  74:../cleanflight/src/main/io/vtx_tramp.c **** 
  75:../cleanflight/src/main/io/vtx_tramp.c **** typedef enum {
  76:../cleanflight/src/main/io/vtx_tramp.c ****     TRAMP_STATUS_BAD_DEVICE = -1,
  77:../cleanflight/src/main/io/vtx_tramp.c ****     TRAMP_STATUS_OFFLINE = 0,
  78:../cleanflight/src/main/io/vtx_tramp.c ****     TRAMP_STATUS_ONLINE,
  79:../cleanflight/src/main/io/vtx_tramp.c ****     TRAMP_STATUS_SET_FREQ_PW,
  80:../cleanflight/src/main/io/vtx_tramp.c ****     TRAMP_STATUS_CHECK_FREQ_PW
  81:../cleanflight/src/main/io/vtx_tramp.c **** } trampStatus_e;
  82:../cleanflight/src/main/io/vtx_tramp.c **** 
  83:../cleanflight/src/main/io/vtx_tramp.c **** trampStatus_e trampStatus = TRAMP_STATUS_OFFLINE;
  84:../cleanflight/src/main/io/vtx_tramp.c **** 
  85:../cleanflight/src/main/io/vtx_tramp.c **** uint32_t trampRFFreqMin;
  86:../cleanflight/src/main/io/vtx_tramp.c **** uint32_t trampRFFreqMax;
  87:../cleanflight/src/main/io/vtx_tramp.c **** uint32_t trampRFPowerMax;
  88:../cleanflight/src/main/io/vtx_tramp.c **** 
  89:../cleanflight/src/main/io/vtx_tramp.c **** bool trampSetByFreqFlag = false;  //false = set via band/channel
  90:../cleanflight/src/main/io/vtx_tramp.c **** uint32_t trampCurFreq = 0;
  91:../cleanflight/src/main/io/vtx_tramp.c **** uint8_t trampBand = 0;
  92:../cleanflight/src/main/io/vtx_tramp.c **** uint8_t trampChannel = 0;
  93:../cleanflight/src/main/io/vtx_tramp.c **** uint16_t trampPower = 0;       // Actual transmitting power
  94:../cleanflight/src/main/io/vtx_tramp.c **** uint16_t trampConfiguredPower = 0; // Configured transmitting power
  95:../cleanflight/src/main/io/vtx_tramp.c **** int16_t trampTemperature = 0;
  96:../cleanflight/src/main/io/vtx_tramp.c **** uint8_t trampPitMode = 0;
  97:../cleanflight/src/main/io/vtx_tramp.c **** 
  98:../cleanflight/src/main/io/vtx_tramp.c **** // Maximum number of requests sent to try a config change
  99:../cleanflight/src/main/io/vtx_tramp.c **** #define TRAMP_MAX_RETRIES 2
 100:../cleanflight/src/main/io/vtx_tramp.c **** 
 101:../cleanflight/src/main/io/vtx_tramp.c **** uint32_t trampConfFreq = 0;
 102:../cleanflight/src/main/io/vtx_tramp.c **** uint8_t  trampFreqRetries = 0;
 103:../cleanflight/src/main/io/vtx_tramp.c **** 
 104:../cleanflight/src/main/io/vtx_tramp.c **** uint16_t trampConfPower = 0;
 105:../cleanflight/src/main/io/vtx_tramp.c **** uint8_t  trampPowerRetries = 0;
 106:../cleanflight/src/main/io/vtx_tramp.c **** 
 107:../cleanflight/src/main/io/vtx_tramp.c **** static void trampWriteBuf(uint8_t *buf)
 108:../cleanflight/src/main/io/vtx_tramp.c **** {
 290              	 .loc 3 108 0
 291              	 .cfi_startproc
 292              	 
 293              	 
 294 0000 80B5     	 push {r7,lr}
 295              	.LCFI10:
 296              	 .cfi_def_cfa_offset 8
 297              	 .cfi_offset 7,-8
 298              	 .cfi_offset 14,-4
 299 0002 82B0     	 sub sp,sp,#8
 300              	.LCFI11:
 301              	 .cfi_def_cfa_offset 16
 302 0004 00AF     	 add r7,sp,#0
 303              	.LCFI12:
 304              	 .cfi_def_cfa_register 7
 305 0006 7860     	 str r0,[r7,#4]
 109:../cleanflight/src/main/io/vtx_tramp.c ****     serialWriteBuf(trampSerialPort, buf, 16);
 306              	 .loc 3 109 0
 307 0008 044B     	 ldr r3,.L8
 308 000a 1B68     	 ldr r3,[r3]
 309 000c 1846     	 mov r0,r3
 310 000e 7968     	 ldr r1,[r7,#4]
 311 0010 1022     	 movs r2,#16
 312 0012 FFF7FEFF 	 bl serialWriteBuf
 110:../cleanflight/src/main/io/vtx_tramp.c **** }
 313              	 .loc 3 110 0
 314 0016 0837     	 adds r7,r7,#8
 315              	.LCFI13:
 316              	 .cfi_def_cfa_offset 8
 317 0018 BD46     	 mov sp,r7
 318              	.LCFI14:
 319              	 .cfi_def_cfa_register 13
 320              	 
 321 001a 80BD     	 pop {r7,pc}
 322              	.L9:
 323              	 .align 2
 324              	.L8:
 325 001c 00000000 	 .word trampSerialPort
 326              	 .cfi_endproc
 327              	.LFE540:
 329              	 .section .text.trampChecksum,"ax",%progbits
 330              	 .align 2
 331              	 .thumb
 332              	 .thumb_func
 334              	trampChecksum:
 335              	.LFB541:
 111:../cleanflight/src/main/io/vtx_tramp.c **** 
 112:../cleanflight/src/main/io/vtx_tramp.c **** static uint8_t trampChecksum(uint8_t *trampBuf)
 113:../cleanflight/src/main/io/vtx_tramp.c **** {
 336              	 .loc 3 113 0
 337              	 .cfi_startproc
 338              	 
 339              	 
 340              	 
 341 0000 80B4     	 push {r7}
 342              	.LCFI15:
 343              	 .cfi_def_cfa_offset 4
 344              	 .cfi_offset 7,-4
 345 0002 85B0     	 sub sp,sp,#20
 346              	.LCFI16:
 347              	 .cfi_def_cfa_offset 24
 348 0004 00AF     	 add r7,sp,#0
 349              	.LCFI17:
 350              	 .cfi_def_cfa_register 7
 351 0006 7860     	 str r0,[r7,#4]
 114:../cleanflight/src/main/io/vtx_tramp.c ****     uint8_t cksum = 0;
 352              	 .loc 3 114 0
 353 0008 0023     	 movs r3,#0
 354 000a FB73     	 strb r3,[r7,#15]
 355              	.LBB2:
 115:../cleanflight/src/main/io/vtx_tramp.c **** 
 116:../cleanflight/src/main/io/vtx_tramp.c ****     for (int i = 1 ; i < 14 ; i++) {
 356              	 .loc 3 116 0
 357 000c 0123     	 movs r3,#1
 358 000e BB60     	 str r3,[r7,#8]
 359 0010 09E0     	 b .L11
 360              	.L12:
 117:../cleanflight/src/main/io/vtx_tramp.c ****         cksum += trampBuf[i];
 361              	 .loc 3 117 0 discriminator 3
 362 0012 BB68     	 ldr r3,[r7,#8]
 363 0014 7A68     	 ldr r2,[r7,#4]
 364 0016 1344     	 add r3,r3,r2
 365 0018 1A78     	 ldrb r2,[r3]
 366 001a FB7B     	 ldrb r3,[r7,#15]
 367 001c 1344     	 add r3,r3,r2
 368 001e FB73     	 strb r3,[r7,#15]
 116:../cleanflight/src/main/io/vtx_tramp.c ****         cksum += trampBuf[i];
 369              	 .loc 3 116 0 discriminator 3
 370 0020 BB68     	 ldr r3,[r7,#8]
 371 0022 0133     	 adds r3,r3,#1
 372 0024 BB60     	 str r3,[r7,#8]
 373              	.L11:
 116:../cleanflight/src/main/io/vtx_tramp.c ****         cksum += trampBuf[i];
 374              	 .loc 3 116 0 is_stmt 0 discriminator 1
 375 0026 BB68     	 ldr r3,[r7,#8]
 376 0028 0D2B     	 cmp r3,#13
 377 002a F2DD     	 ble .L12
 378              	.LBE2:
 118:../cleanflight/src/main/io/vtx_tramp.c ****     }
 119:../cleanflight/src/main/io/vtx_tramp.c **** 
 120:../cleanflight/src/main/io/vtx_tramp.c ****     return cksum;
 379              	 .loc 3 120 0 is_stmt 1
 380 002c FB7B     	 ldrb r3,[r7,#15]
 121:../cleanflight/src/main/io/vtx_tramp.c **** }
 381              	 .loc 3 121 0
 382 002e 1846     	 mov r0,r3
 383 0030 1437     	 adds r7,r7,#20
 384              	.LCFI18:
 385              	 .cfi_def_cfa_offset 4
 386 0032 BD46     	 mov sp,r7
 387              	.LCFI19:
 388              	 .cfi_def_cfa_register 13
 389              	 
 390 0034 5DF8047B 	 ldr r7,[sp],#4
 391              	.LCFI20:
 392              	 .cfi_restore 7
 393              	 .cfi_def_cfa_offset 0
 394 0038 7047     	 bx lr
 395              	 .cfi_endproc
 396              	.LFE541:
 398 003a 00BF     	 .section .text.trampCmdU16,"ax",%progbits
 399              	 .align 2
 400              	 .global trampCmdU16
 401              	 .thumb
 402              	 .thumb_func
 404              	trampCmdU16:
 405              	.LFB542:
 122:../cleanflight/src/main/io/vtx_tramp.c **** 
 123:../cleanflight/src/main/io/vtx_tramp.c **** void trampCmdU16(uint8_t cmd, uint16_t param)
 124:../cleanflight/src/main/io/vtx_tramp.c **** {
 406              	 .loc 3 124 0
 407              	 .cfi_startproc
 408              	 
 409              	 
 410 0000 80B5     	 push {r7,lr}
 411              	.LCFI21:
 412              	 .cfi_def_cfa_offset 8
 413              	 .cfi_offset 7,-8
 414              	 .cfi_offset 14,-4
 415 0002 82B0     	 sub sp,sp,#8
 416              	.LCFI22:
 417              	 .cfi_def_cfa_offset 16
 418 0004 00AF     	 add r7,sp,#0
 419              	.LCFI23:
 420              	 .cfi_def_cfa_register 7
 421 0006 0346     	 mov r3,r0
 422 0008 0A46     	 mov r2,r1
 423 000a FB71     	 strb r3,[r7,#7]
 424 000c 1346     	 mov r3,r2
 425 000e BB80     	 strh r3,[r7,#4]
 125:../cleanflight/src/main/io/vtx_tramp.c ****     if (!trampSerialPort) {
 426              	 .loc 3 125 0
 427 0010 134B     	 ldr r3,.L17
 428 0012 1B68     	 ldr r3,[r3]
 429 0014 002B     	 cmp r3,#0
 430 0016 00D1     	 bne .L15
 126:../cleanflight/src/main/io/vtx_tramp.c ****         return;
 431              	 .loc 3 126 0
 432 0018 1EE0     	 b .L14
 433              	.L15:
 127:../cleanflight/src/main/io/vtx_tramp.c ****     }
 128:../cleanflight/src/main/io/vtx_tramp.c **** 
 129:../cleanflight/src/main/io/vtx_tramp.c ****     memset(trampReqBuffer, 0, ARRAYLEN(trampReqBuffer));
 434              	 .loc 3 129 0
 435 001a 1248     	 ldr r0,.L17+4
 436 001c 0021     	 movs r1,#0
 437 001e 1022     	 movs r2,#16
 438 0020 FFF7FEFF 	 bl memset
 130:../cleanflight/src/main/io/vtx_tramp.c ****     trampReqBuffer[0] = 15;
 439              	 .loc 3 130 0
 440 0024 0F4B     	 ldr r3,.L17+4
 441 0026 0F22     	 movs r2,#15
 442 0028 1A70     	 strb r2,[r3]
 131:../cleanflight/src/main/io/vtx_tramp.c ****     trampReqBuffer[1] = cmd;
 443              	 .loc 3 131 0
 444 002a 0E4A     	 ldr r2,.L17+4
 445 002c FB79     	 ldrb r3,[r7,#7]
 446 002e 5370     	 strb r3,[r2,#1]
 132:../cleanflight/src/main/io/vtx_tramp.c ****     trampReqBuffer[2] = param & 0xff;
 447              	 .loc 3 132 0
 448 0030 BB88     	 ldrh r3,[r7,#4]
 449 0032 DAB2     	 uxtb r2,r3
 450 0034 0B4B     	 ldr r3,.L17+4
 451 0036 9A70     	 strb r2,[r3,#2]
 133:../cleanflight/src/main/io/vtx_tramp.c ****     trampReqBuffer[3] = (param >> 8) & 0xff;
 452              	 .loc 3 133 0
 453 0038 BB88     	 ldrh r3,[r7,#4]
 454 003a 1B0A     	 lsrs r3,r3,#8
 455 003c 9BB2     	 uxth r3,r3
 456 003e DAB2     	 uxtb r2,r3
 457 0040 084B     	 ldr r3,.L17+4
 458 0042 DA70     	 strb r2,[r3,#3]
 134:../cleanflight/src/main/io/vtx_tramp.c ****     trampReqBuffer[14] = trampChecksum(trampReqBuffer);
 459              	 .loc 3 134 0
 460 0044 0748     	 ldr r0,.L17+4
 461 0046 FFF7FEFF 	 bl trampChecksum
 462 004a 0346     	 mov r3,r0
 463 004c 1A46     	 mov r2,r3
 464 004e 054B     	 ldr r3,.L17+4
 465 0050 9A73     	 strb r2,[r3,#14]
 135:../cleanflight/src/main/io/vtx_tramp.c ****     trampWriteBuf(trampReqBuffer);
 466              	 .loc 3 135 0
 467 0052 0448     	 ldr r0,.L17+4
 468 0054 FFF7FEFF 	 bl trampWriteBuf
 469              	.L14:
 136:../cleanflight/src/main/io/vtx_tramp.c **** }
 470              	 .loc 3 136 0
 471 0058 0837     	 adds r7,r7,#8
 472              	.LCFI24:
 473              	 .cfi_def_cfa_offset 8
 474 005a BD46     	 mov sp,r7
 475              	.LCFI25:
 476              	 .cfi_def_cfa_register 13
 477              	 
 478 005c 80BD     	 pop {r7,pc}
 479              	.L18:
 480 005e 00BF     	 .align 2
 481              	.L17:
 482 0060 00000000 	 .word trampSerialPort
 483 0064 00000000 	 .word trampReqBuffer
 484              	 .cfi_endproc
 485              	.LFE542:
 487              	 .section .text.trampValidateFreq,"ax",%progbits
 488              	 .align 2
 489              	 .thumb
 490              	 .thumb_func
 492              	trampValidateFreq:
 493              	.LFB543:
 137:../cleanflight/src/main/io/vtx_tramp.c **** 
 138:../cleanflight/src/main/io/vtx_tramp.c **** static bool trampValidateFreq(uint16_t freq)
 139:../cleanflight/src/main/io/vtx_tramp.c **** {
 494              	 .loc 3 139 0
 495              	 .cfi_startproc
 496              	 
 497              	 
 498              	 
 499 0000 80B4     	 push {r7}
 500              	.LCFI26:
 501              	 .cfi_def_cfa_offset 4
 502              	 .cfi_offset 7,-4
 503 0002 83B0     	 sub sp,sp,#12
 504              	.LCFI27:
 505              	 .cfi_def_cfa_offset 16
 506 0004 00AF     	 add r7,sp,#0
 507              	.LCFI28:
 508              	 .cfi_def_cfa_register 7
 509 0006 0346     	 mov r3,r0
 510 0008 FB80     	 strh r3,[r7,#6]
 140:../cleanflight/src/main/io/vtx_tramp.c ****     return (freq >= VTX_TRAMP_MIN_FREQUENCY_MHZ && freq <= VTX_TRAMP_MAX_FREQUENCY_MHZ);
 511              	 .loc 3 140 0
 512 000a FB88     	 ldrh r3,[r7,#6]
 513 000c 41F28732 	 movw r2,#4999
 514 0010 9342     	 cmp r3,r2
 515 0012 06D9     	 bls .L20
 516              	 .loc 3 140 0 is_stmt 0 discriminator 1
 517 0014 FB88     	 ldrh r3,[r7,#6]
 518 0016 41F26F72 	 movw r2,#5999
 519 001a 9342     	 cmp r3,r2
 520 001c 01D8     	 bhi .L20
 521              	 .loc 3 140 0 discriminator 3
 522 001e 0123     	 movs r3,#1
 523 0020 00E0     	 b .L21
 524              	.L20:
 525              	 .loc 3 140 0 discriminator 4
 526 0022 0023     	 movs r3,#0
 527              	.L21:
 528              	 .loc 3 140 0 discriminator 6
 529 0024 03F00103 	 and r3,r3,#1
 530 0028 DBB2     	 uxtb r3,r3
 141:../cleanflight/src/main/io/vtx_tramp.c **** }
 531              	 .loc 3 141 0 is_stmt 1 discriminator 6
 532 002a 1846     	 mov r0,r3
 533 002c 0C37     	 adds r7,r7,#12
 534              	.LCFI29:
 535              	 .cfi_def_cfa_offset 4
 536 002e BD46     	 mov sp,r7
 537              	.LCFI30:
 538              	 .cfi_def_cfa_register 13
 539              	 
 540 0030 5DF8047B 	 ldr r7,[sp],#4
 541              	.LCFI31:
 542              	 .cfi_restore 7
 543              	 .cfi_def_cfa_offset 0
 544 0034 7047     	 bx lr
 545              	 .cfi_endproc
 546              	.LFE543:
 548 0036 00BF     	 .section .text.trampDevSetFreq,"ax",%progbits
 549              	 .align 2
 550              	 .thumb
 551              	 .thumb_func
 553              	trampDevSetFreq:
 554              	.LFB544:
 142:../cleanflight/src/main/io/vtx_tramp.c **** 
 143:../cleanflight/src/main/io/vtx_tramp.c **** static void trampDevSetFreq(uint16_t freq)
 144:../cleanflight/src/main/io/vtx_tramp.c **** {
 555              	 .loc 3 144 0
 556              	 .cfi_startproc
 557              	 
 558              	 
 559              	 
 560 0000 80B4     	 push {r7}
 561              	.LCFI32:
 562              	 .cfi_def_cfa_offset 4
 563              	 .cfi_offset 7,-4
 564 0002 83B0     	 sub sp,sp,#12
 565              	.LCFI33:
 566              	 .cfi_def_cfa_offset 16
 567 0004 00AF     	 add r7,sp,#0
 568              	.LCFI34:
 569              	 .cfi_def_cfa_register 7
 570 0006 0346     	 mov r3,r0
 571 0008 FB80     	 strh r3,[r7,#6]
 145:../cleanflight/src/main/io/vtx_tramp.c ****     trampConfFreq = freq;
 572              	 .loc 3 145 0
 573 000a FB88     	 ldrh r3,[r7,#6]
 574 000c 074A     	 ldr r2,.L25
 575 000e 1360     	 str r3,[r2]
 146:../cleanflight/src/main/io/vtx_tramp.c ****     if (trampConfFreq != trampCurFreq) {
 576              	 .loc 3 146 0
 577 0010 064B     	 ldr r3,.L25
 578 0012 1A68     	 ldr r2,[r3]
 579 0014 064B     	 ldr r3,.L25+4
 580 0016 1B68     	 ldr r3,[r3]
 581 0018 9A42     	 cmp r2,r3
 582 001a 02D0     	 beq .L23
 147:../cleanflight/src/main/io/vtx_tramp.c ****         trampFreqRetries = TRAMP_MAX_RETRIES;
 583              	 .loc 3 147 0
 584 001c 054B     	 ldr r3,.L25+8
 585 001e 0222     	 movs r2,#2
 586 0020 1A70     	 strb r2,[r3]
 587              	.L23:
 148:../cleanflight/src/main/io/vtx_tramp.c ****     }
 149:../cleanflight/src/main/io/vtx_tramp.c **** }
 588              	 .loc 3 149 0
 589 0022 0C37     	 adds r7,r7,#12
 590              	.LCFI35:
 591              	 .cfi_def_cfa_offset 4
 592 0024 BD46     	 mov sp,r7
 593              	.LCFI36:
 594              	 .cfi_def_cfa_register 13
 595              	 
 596 0026 5DF8047B 	 ldr r7,[sp],#4
 597              	.LCFI37:
 598              	 .cfi_restore 7
 599              	 .cfi_def_cfa_offset 0
 600 002a 7047     	 bx lr
 601              	.L26:
 602              	 .align 2
 603              	.L25:
 604 002c 00000000 	 .word trampConfFreq
 605 0030 00000000 	 .word trampCurFreq
 606 0034 00000000 	 .word trampFreqRetries
 607              	 .cfi_endproc
 608              	.LFE544:
 610              	 .section .text.trampSetFreq,"ax",%progbits
 611              	 .align 2
 612              	 .global trampSetFreq
 613              	 .thumb
 614              	 .thumb_func
 616              	trampSetFreq:
 617              	.LFB545:
 150:../cleanflight/src/main/io/vtx_tramp.c **** 
 151:../cleanflight/src/main/io/vtx_tramp.c **** void trampSetFreq(uint16_t freq)
 152:../cleanflight/src/main/io/vtx_tramp.c **** {
 618              	 .loc 3 152 0
 619              	 .cfi_startproc
 620              	 
 621              	 
 622 0000 80B5     	 push {r7,lr}
 623              	.LCFI38:
 624              	 .cfi_def_cfa_offset 8
 625              	 .cfi_offset 7,-8
 626              	 .cfi_offset 14,-4
 627 0002 82B0     	 sub sp,sp,#8
 628              	.LCFI39:
 629              	 .cfi_def_cfa_offset 16
 630 0004 00AF     	 add r7,sp,#0
 631              	.LCFI40:
 632              	 .cfi_def_cfa_register 7
 633 0006 0346     	 mov r3,r0
 634 0008 FB80     	 strh r3,[r7,#6]
 153:../cleanflight/src/main/io/vtx_tramp.c ****     trampSetByFreqFlag = true;         //set freq via MHz value
 635              	 .loc 3 153 0
 636 000a 054B     	 ldr r3,.L28
 637 000c 0122     	 movs r2,#1
 638 000e 1A70     	 strb r2,[r3]
 154:../cleanflight/src/main/io/vtx_tramp.c ****     trampDevSetFreq(freq);
 639              	 .loc 3 154 0
 640 0010 FB88     	 ldrh r3,[r7,#6]
 641 0012 1846     	 mov r0,r3
 642 0014 FFF7FEFF 	 bl trampDevSetFreq
 155:../cleanflight/src/main/io/vtx_tramp.c **** }
 643              	 .loc 3 155 0
 644 0018 0837     	 adds r7,r7,#8
 645              	.LCFI41:
 646              	 .cfi_def_cfa_offset 8
 647 001a BD46     	 mov sp,r7
 648              	.LCFI42:
 649              	 .cfi_def_cfa_register 13
 650              	 
 651 001c 80BD     	 pop {r7,pc}
 652              	.L29:
 653 001e 00BF     	 .align 2
 654              	.L28:
 655 0020 00000000 	 .word trampSetByFreqFlag
 656              	 .cfi_endproc
 657              	.LFE545:
 659              	 .section .text.trampSendFreq,"ax",%progbits
 660              	 .align 2
 661              	 .global trampSendFreq
 662              	 .thumb
 663              	 .thumb_func
 665              	trampSendFreq:
 666              	.LFB546:
 156:../cleanflight/src/main/io/vtx_tramp.c **** 
 157:../cleanflight/src/main/io/vtx_tramp.c **** void trampSendFreq(uint16_t freq)
 158:../cleanflight/src/main/io/vtx_tramp.c **** {
 667              	 .loc 3 158 0
 668              	 .cfi_startproc
 669              	 
 670              	 
 671 0000 80B5     	 push {r7,lr}
 672              	.LCFI43:
 673              	 .cfi_def_cfa_offset 8
 674              	 .cfi_offset 7,-8
 675              	 .cfi_offset 14,-4
 676 0002 82B0     	 sub sp,sp,#8
 677              	.LCFI44:
 678              	 .cfi_def_cfa_offset 16
 679 0004 00AF     	 add r7,sp,#0
 680              	.LCFI45:
 681              	 .cfi_def_cfa_register 7
 682 0006 0346     	 mov r3,r0
 683 0008 FB80     	 strh r3,[r7,#6]
 159:../cleanflight/src/main/io/vtx_tramp.c ****     trampCmdU16('F', freq);
 684              	 .loc 3 159 0
 685 000a FB88     	 ldrh r3,[r7,#6]
 686 000c 4620     	 movs r0,#70
 687 000e 1946     	 mov r1,r3
 688 0010 FFF7FEFF 	 bl trampCmdU16
 160:../cleanflight/src/main/io/vtx_tramp.c **** }
 689              	 .loc 3 160 0
 690 0014 0837     	 adds r7,r7,#8
 691              	.LCFI46:
 692              	 .cfi_def_cfa_offset 8
 693 0016 BD46     	 mov sp,r7
 694              	.LCFI47:
 695              	 .cfi_def_cfa_register 13
 696              	 
 697 0018 80BD     	 pop {r7,pc}
 698              	 .cfi_endproc
 699              	.LFE546:
 701 001a 00BF     	 .section .text.trampValidateBandAndChannel,"ax",%progbits
 702              	 .align 2
 703              	 .thumb
 704              	 .thumb_func
 706              	trampValidateBandAndChannel:
 707              	.LFB547:
 161:../cleanflight/src/main/io/vtx_tramp.c **** 
 162:../cleanflight/src/main/io/vtx_tramp.c **** static bool trampValidateBandAndChannel(uint8_t band, uint8_t channel)
 163:../cleanflight/src/main/io/vtx_tramp.c **** {
 708              	 .loc 3 163 0
 709              	 .cfi_startproc
 710              	 
 711              	 
 712              	 
 713 0000 80B4     	 push {r7}
 714              	.LCFI48:
 715              	 .cfi_def_cfa_offset 4
 716              	 .cfi_offset 7,-4
 717 0002 83B0     	 sub sp,sp,#12
 718              	.LCFI49:
 719              	 .cfi_def_cfa_offset 16
 720 0004 00AF     	 add r7,sp,#0
 721              	.LCFI50:
 722              	 .cfi_def_cfa_register 7
 723 0006 0346     	 mov r3,r0
 724 0008 0A46     	 mov r2,r1
 725 000a FB71     	 strb r3,[r7,#7]
 726 000c 1346     	 mov r3,r2
 727 000e BB71     	 strb r3,[r7,#6]
 164:../cleanflight/src/main/io/vtx_tramp.c ****     return (band >= VTX_TRAMP_MIN_BAND && band <= VTX_TRAMP_MAX_BAND &&
 165:../cleanflight/src/main/io/vtx_tramp.c ****             channel >= VTX_TRAMP_MIN_CHANNEL && channel <= VTX_TRAMP_MAX_CHANNEL);
 728              	 .loc 3 165 0
 729 0010 FB79     	 ldrb r3,[r7,#7]
 730 0012 002B     	 cmp r3,#0
 731 0014 0AD0     	 beq .L32
 164:../cleanflight/src/main/io/vtx_tramp.c ****     return (band >= VTX_TRAMP_MIN_BAND && band <= VTX_TRAMP_MAX_BAND &&
 732              	 .loc 3 164 0
 733 0016 FB79     	 ldrb r3,[r7,#7]
 734 0018 052B     	 cmp r3,#5
 735 001a 07D8     	 bhi .L32
 164:../cleanflight/src/main/io/vtx_tramp.c ****     return (band >= VTX_TRAMP_MIN_BAND && band <= VTX_TRAMP_MAX_BAND &&
 736              	 .loc 3 164 0 is_stmt 0 discriminator 1
 737 001c BB79     	 ldrb r3,[r7,#6]
 738 001e 002B     	 cmp r3,#0
 739 0020 04D0     	 beq .L32
 740              	 .loc 3 165 0 is_stmt 1 discriminator 3
 741 0022 BB79     	 ldrb r3,[r7,#6]
 742 0024 082B     	 cmp r3,#8
 743 0026 01D8     	 bhi .L32
 744              	 .loc 3 165 0 is_stmt 0 discriminator 2
 745 0028 0123     	 movs r3,#1
 746 002a 00E0     	 b .L33
 747              	.L32:
 748              	 .loc 3 165 0 discriminator 1
 749 002c 0023     	 movs r3,#0
 750              	.L33:
 164:../cleanflight/src/main/io/vtx_tramp.c ****     return (band >= VTX_TRAMP_MIN_BAND && band <= VTX_TRAMP_MAX_BAND &&
 751              	 .loc 3 164 0 is_stmt 1
 752 002e 03F00103 	 and r3,r3,#1
 753 0032 DBB2     	 uxtb r3,r3
 166:../cleanflight/src/main/io/vtx_tramp.c **** }
 754              	 .loc 3 166 0
 755 0034 1846     	 mov r0,r3
 756 0036 0C37     	 adds r7,r7,#12
 757              	.LCFI51:
 758              	 .cfi_def_cfa_offset 4
 759 0038 BD46     	 mov sp,r7
 760              	.LCFI52:
 761              	 .cfi_def_cfa_register 13
 762              	 
 763 003a 5DF8047B 	 ldr r7,[sp],#4
 764              	.LCFI53:
 765              	 .cfi_restore 7
 766              	 .cfi_def_cfa_offset 0
 767 003e 7047     	 bx lr
 768              	 .cfi_endproc
 769              	.LFE547:
 771              	 .section .text.trampDevSetBandAndChannel,"ax",%progbits
 772              	 .align 2
 773              	 .thumb
 774              	 .thumb_func
 776              	trampDevSetBandAndChannel:
 777              	.LFB548:
 167:../cleanflight/src/main/io/vtx_tramp.c **** 
 168:../cleanflight/src/main/io/vtx_tramp.c **** static void trampDevSetBandAndChannel(uint8_t band, uint8_t channel)
 169:../cleanflight/src/main/io/vtx_tramp.c **** {
 778              	 .loc 3 169 0
 779              	 .cfi_startproc
 780              	 
 781              	 
 782 0000 80B5     	 push {r7,lr}
 783              	.LCFI54:
 784              	 .cfi_def_cfa_offset 8
 785              	 .cfi_offset 7,-8
 786              	 .cfi_offset 14,-4
 787 0002 82B0     	 sub sp,sp,#8
 788              	.LCFI55:
 789              	 .cfi_def_cfa_offset 16
 790 0004 00AF     	 add r7,sp,#0
 791              	.LCFI56:
 792              	 .cfi_def_cfa_register 7
 793 0006 0346     	 mov r3,r0
 794 0008 0A46     	 mov r2,r1
 795 000a FB71     	 strb r3,[r7,#7]
 796 000c 1346     	 mov r3,r2
 797 000e BB71     	 strb r3,[r7,#6]
 170:../cleanflight/src/main/io/vtx_tramp.c ****     trampDevSetFreq(vtx58_Bandchan2Freq(band, channel));
 798              	 .loc 3 170 0
 799 0010 FA79     	 ldrb r2,[r7,#7]
 800 0012 BB79     	 ldrb r3,[r7,#6]
 801 0014 1046     	 mov r0,r2
 802 0016 1946     	 mov r1,r3
 803 0018 FFF7FEFF 	 bl vtx58_Bandchan2Freq
 804 001c 0346     	 mov r3,r0
 805 001e 1846     	 mov r0,r3
 806 0020 FFF7FEFF 	 bl trampDevSetFreq
 171:../cleanflight/src/main/io/vtx_tramp.c **** }
 807              	 .loc 3 171 0
 808 0024 0837     	 adds r7,r7,#8
 809              	.LCFI57:
 810              	 .cfi_def_cfa_offset 8
 811 0026 BD46     	 mov sp,r7
 812              	.LCFI58:
 813              	 .cfi_def_cfa_register 13
 814              	 
 815 0028 80BD     	 pop {r7,pc}
 816              	 .cfi_endproc
 817              	.LFE548:
 819 002a 00BF     	 .section .text.trampSetBandAndChannel,"ax",%progbits
 820              	 .align 2
 821              	 .global trampSetBandAndChannel
 822              	 .thumb
 823              	 .thumb_func
 825              	trampSetBandAndChannel:
 826              	.LFB549:
 172:../cleanflight/src/main/io/vtx_tramp.c **** 
 173:../cleanflight/src/main/io/vtx_tramp.c **** void trampSetBandAndChannel(uint8_t band, uint8_t channel)
 174:../cleanflight/src/main/io/vtx_tramp.c **** {
 827              	 .loc 3 174 0
 828              	 .cfi_startproc
 829              	 
 830              	 
 831 0000 80B5     	 push {r7,lr}
 832              	.LCFI59:
 833              	 .cfi_def_cfa_offset 8
 834              	 .cfi_offset 7,-8
 835              	 .cfi_offset 14,-4
 836 0002 82B0     	 sub sp,sp,#8
 837              	.LCFI60:
 838              	 .cfi_def_cfa_offset 16
 839 0004 00AF     	 add r7,sp,#0
 840              	.LCFI61:
 841              	 .cfi_def_cfa_register 7
 842 0006 0346     	 mov r3,r0
 843 0008 0A46     	 mov r2,r1
 844 000a FB71     	 strb r3,[r7,#7]
 845 000c 1346     	 mov r3,r2
 846 000e BB71     	 strb r3,[r7,#6]
 175:../cleanflight/src/main/io/vtx_tramp.c ****     trampSetByFreqFlag = false;        //set freq via band/channel
 847              	 .loc 3 175 0
 848 0010 054B     	 ldr r3,.L37
 849 0012 0022     	 movs r2,#0
 850 0014 1A70     	 strb r2,[r3]
 176:../cleanflight/src/main/io/vtx_tramp.c ****     trampDevSetBandAndChannel(band, channel);
 851              	 .loc 3 176 0
 852 0016 FA79     	 ldrb r2,[r7,#7]
 853 0018 BB79     	 ldrb r3,[r7,#6]
 854 001a 1046     	 mov r0,r2
 855 001c 1946     	 mov r1,r3
 856 001e FFF7FEFF 	 bl trampDevSetBandAndChannel
 177:../cleanflight/src/main/io/vtx_tramp.c **** }
 857              	 .loc 3 177 0
 858 0022 0837     	 adds r7,r7,#8
 859              	.LCFI62:
 860              	 .cfi_def_cfa_offset 8
 861 0024 BD46     	 mov sp,r7
 862              	.LCFI63:
 863              	 .cfi_def_cfa_register 13
 864              	 
 865 0026 80BD     	 pop {r7,pc}
 866              	.L38:
 867              	 .align 2
 868              	.L37:
 869 0028 00000000 	 .word trampSetByFreqFlag
 870              	 .cfi_endproc
 871              	.LFE549:
 873              	 .section .text.trampSetRFPower,"ax",%progbits
 874              	 .align 2
 875              	 .global trampSetRFPower
 876              	 .thumb
 877              	 .thumb_func
 879              	trampSetRFPower:
 880              	.LFB550:
 178:../cleanflight/src/main/io/vtx_tramp.c **** 
 179:../cleanflight/src/main/io/vtx_tramp.c **** void trampSetRFPower(uint16_t level)
 180:../cleanflight/src/main/io/vtx_tramp.c **** {
 881              	 .loc 3 180 0
 882              	 .cfi_startproc
 883              	 
 884              	 
 885              	 
 886 0000 80B4     	 push {r7}
 887              	.LCFI64:
 888              	 .cfi_def_cfa_offset 4
 889              	 .cfi_offset 7,-4
 890 0002 83B0     	 sub sp,sp,#12
 891              	.LCFI65:
 892              	 .cfi_def_cfa_offset 16
 893 0004 00AF     	 add r7,sp,#0
 894              	.LCFI66:
 895              	 .cfi_def_cfa_register 7
 896 0006 0346     	 mov r3,r0
 897 0008 FB80     	 strh r3,[r7,#6]
 181:../cleanflight/src/main/io/vtx_tramp.c ****     trampConfPower = level;
 898              	 .loc 3 181 0
 899 000a 084A     	 ldr r2,.L41
 900 000c FB88     	 ldrh r3,[r7,#6]
 901 000e 1380     	 strh r3,[r2]
 182:../cleanflight/src/main/io/vtx_tramp.c ****     if (trampConfPower != trampPower) {
 902              	 .loc 3 182 0
 903 0010 064B     	 ldr r3,.L41
 904 0012 1A88     	 ldrh r2,[r3]
 905 0014 064B     	 ldr r3,.L41+4
 906 0016 1B88     	 ldrh r3,[r3]
 907 0018 9A42     	 cmp r2,r3
 908 001a 02D0     	 beq .L39
 183:../cleanflight/src/main/io/vtx_tramp.c ****         trampPowerRetries = TRAMP_MAX_RETRIES;
 909              	 .loc 3 183 0
 910 001c 054B     	 ldr r3,.L41+8
 911 001e 0222     	 movs r2,#2
 912 0020 1A70     	 strb r2,[r3]
 913              	.L39:
 184:../cleanflight/src/main/io/vtx_tramp.c ****     }
 185:../cleanflight/src/main/io/vtx_tramp.c **** }
 914              	 .loc 3 185 0
 915 0022 0C37     	 adds r7,r7,#12
 916              	.LCFI67:
 917              	 .cfi_def_cfa_offset 4
 918 0024 BD46     	 mov sp,r7
 919              	.LCFI68:
 920              	 .cfi_def_cfa_register 13
 921              	 
 922 0026 5DF8047B 	 ldr r7,[sp],#4
 923              	.LCFI69:
 924              	 .cfi_restore 7
 925              	 .cfi_def_cfa_offset 0
 926 002a 7047     	 bx lr
 927              	.L42:
 928              	 .align 2
 929              	.L41:
 930 002c 00000000 	 .word trampConfPower
 931 0030 00000000 	 .word trampPower
 932 0034 00000000 	 .word trampPowerRetries
 933              	 .cfi_endproc
 934              	.LFE550:
 936              	 .section .text.trampSendRFPower,"ax",%progbits
 937              	 .align 2
 938              	 .global trampSendRFPower
 939              	 .thumb
 940              	 .thumb_func
 942              	trampSendRFPower:
 943              	.LFB551:
 186:../cleanflight/src/main/io/vtx_tramp.c **** 
 187:../cleanflight/src/main/io/vtx_tramp.c **** void trampSendRFPower(uint16_t level)
 188:../cleanflight/src/main/io/vtx_tramp.c **** {
 944              	 .loc 3 188 0
 945              	 .cfi_startproc
 946              	 
 947              	 
 948 0000 80B5     	 push {r7,lr}
 949              	.LCFI70:
 950              	 .cfi_def_cfa_offset 8
 951              	 .cfi_offset 7,-8
 952              	 .cfi_offset 14,-4
 953 0002 82B0     	 sub sp,sp,#8
 954              	.LCFI71:
 955              	 .cfi_def_cfa_offset 16
 956 0004 00AF     	 add r7,sp,#0
 957              	.LCFI72:
 958              	 .cfi_def_cfa_register 7
 959 0006 0346     	 mov r3,r0
 960 0008 FB80     	 strh r3,[r7,#6]
 189:../cleanflight/src/main/io/vtx_tramp.c ****     trampCmdU16('P', level);
 961              	 .loc 3 189 0
 962 000a FB88     	 ldrh r3,[r7,#6]
 963 000c 5020     	 movs r0,#80
 964 000e 1946     	 mov r1,r3
 965 0010 FFF7FEFF 	 bl trampCmdU16
 190:../cleanflight/src/main/io/vtx_tramp.c **** }
 966              	 .loc 3 190 0
 967 0014 0837     	 adds r7,r7,#8
 968              	.LCFI73:
 969              	 .cfi_def_cfa_offset 8
 970 0016 BD46     	 mov sp,r7
 971              	.LCFI74:
 972              	 .cfi_def_cfa_register 13
 973              	 
 974 0018 80BD     	 pop {r7,pc}
 975              	 .cfi_endproc
 976              	.LFE551:
 978 001a 00BF     	 .section .text.trampCommitChanges,"ax",%progbits
 979              	 .align 2
 980              	 .global trampCommitChanges
 981              	 .thumb
 982              	 .thumb_func
 984              	trampCommitChanges:
 985              	.LFB552:
 191:../cleanflight/src/main/io/vtx_tramp.c **** 
 192:../cleanflight/src/main/io/vtx_tramp.c **** // return false if error
 193:../cleanflight/src/main/io/vtx_tramp.c **** bool trampCommitChanges(void)
 194:../cleanflight/src/main/io/vtx_tramp.c **** {
 986              	 .loc 3 194 0
 987              	 .cfi_startproc
 988              	 
 989              	 
 990              	 
 991 0000 80B4     	 push {r7}
 992              	.LCFI75:
 993              	 .cfi_def_cfa_offset 4
 994              	 .cfi_offset 7,-4
 995 0002 00AF     	 add r7,sp,#0
 996              	.LCFI76:
 997              	 .cfi_def_cfa_register 7
 195:../cleanflight/src/main/io/vtx_tramp.c ****     if (trampStatus != TRAMP_STATUS_ONLINE) {
 998              	 .loc 3 195 0
 999 0004 074B     	 ldr r3,.L47
 1000 0006 1B78     	 ldrb r3,[r3]
 1001 0008 5BB2     	 sxtb r3,r3
 1002 000a 012B     	 cmp r3,#1
 1003 000c 01D0     	 beq .L45
 196:../cleanflight/src/main/io/vtx_tramp.c ****         return false;
 1004              	 .loc 3 196 0
 1005 000e 0023     	 movs r3,#0
 1006 0010 03E0     	 b .L46
 1007              	.L45:
 197:../cleanflight/src/main/io/vtx_tramp.c ****     }
 198:../cleanflight/src/main/io/vtx_tramp.c **** 
 199:../cleanflight/src/main/io/vtx_tramp.c ****     trampStatus = TRAMP_STATUS_SET_FREQ_PW;
 1008              	 .loc 3 199 0
 1009 0012 044B     	 ldr r3,.L47
 1010 0014 0222     	 movs r2,#2
 1011 0016 1A70     	 strb r2,[r3]
 200:../cleanflight/src/main/io/vtx_tramp.c ****     return true;
 1012              	 .loc 3 200 0
 1013 0018 0123     	 movs r3,#1
 1014              	.L46:
 201:../cleanflight/src/main/io/vtx_tramp.c **** }
 1015              	 .loc 3 201 0
 1016 001a 1846     	 mov r0,r3
 1017 001c BD46     	 mov sp,r7
 1018              	.LCFI77:
 1019              	 .cfi_def_cfa_register 13
 1020              	 
 1021 001e 5DF8047B 	 ldr r7,[sp],#4
 1022              	.LCFI78:
 1023              	 .cfi_restore 7
 1024              	 .cfi_def_cfa_offset 0
 1025 0022 7047     	 bx lr
 1026              	.L48:
 1027              	 .align 2
 1028              	.L47:
 1029 0024 00000000 	 .word trampStatus
 1030              	 .cfi_endproc
 1031              	.LFE552:
 1033              	 .section .text.trampDevSetPowerByIndex,"ax",%progbits
 1034              	 .align 2
 1035              	 .thumb
 1036              	 .thumb_func
 1038              	trampDevSetPowerByIndex:
 1039              	.LFB553:
 202:../cleanflight/src/main/io/vtx_tramp.c **** 
 203:../cleanflight/src/main/io/vtx_tramp.c **** // return false if index out of range
 204:../cleanflight/src/main/io/vtx_tramp.c **** static bool trampDevSetPowerByIndex(uint8_t index)
 205:../cleanflight/src/main/io/vtx_tramp.c **** {
 1040              	 .loc 3 205 0
 1041              	 .cfi_startproc
 1042              	 
 1043              	 
 1044 0000 80B5     	 push {r7,lr}
 1045              	.LCFI79:
 1046              	 .cfi_def_cfa_offset 8
 1047              	 .cfi_offset 7,-8
 1048              	 .cfi_offset 14,-4
 1049 0002 82B0     	 sub sp,sp,#8
 1050              	.LCFI80:
 1051              	 .cfi_def_cfa_offset 16
 1052 0004 00AF     	 add r7,sp,#0
 1053              	.LCFI81:
 1054              	 .cfi_def_cfa_register 7
 1055 0006 0346     	 mov r3,r0
 1056 0008 FB71     	 strb r3,[r7,#7]
 206:../cleanflight/src/main/io/vtx_tramp.c ****     if (index > 0 && index <= sizeof(trampPowerTable)) {
 1057              	 .loc 3 206 0
 1058 000a FB79     	 ldrb r3,[r7,#7]
 1059 000c 002B     	 cmp r3,#0
 1060 000e 0ED0     	 beq .L50
 1061              	 .loc 3 206 0 is_stmt 0 discriminator 1
 1062 0010 FB79     	 ldrb r3,[r7,#7]
 1063 0012 0A2B     	 cmp r3,#10
 1064 0014 0BD8     	 bhi .L50
 207:../cleanflight/src/main/io/vtx_tramp.c ****         trampSetRFPower(trampPowerTable[index - 1]);
 1065              	 .loc 3 207 0 is_stmt 1
 1066 0016 FB79     	 ldrb r3,[r7,#7]
 1067 0018 013B     	 subs r3,r3,#1
 1068 001a 074A     	 ldr r2,.L52
 1069 001c 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 1070 0020 1846     	 mov r0,r3
 1071 0022 FFF7FEFF 	 bl trampSetRFPower
 208:../cleanflight/src/main/io/vtx_tramp.c ****         trampCommitChanges();
 1072              	 .loc 3 208 0
 1073 0026 FFF7FEFF 	 bl trampCommitChanges
 209:../cleanflight/src/main/io/vtx_tramp.c ****         return true;
 1074              	 .loc 3 209 0
 1075 002a 0123     	 movs r3,#1
 1076 002c 00E0     	 b .L51
 1077              	.L50:
 210:../cleanflight/src/main/io/vtx_tramp.c ****     }
 211:../cleanflight/src/main/io/vtx_tramp.c ****     return false;
 1078              	 .loc 3 211 0
 1079 002e 0023     	 movs r3,#0
 1080              	.L51:
 212:../cleanflight/src/main/io/vtx_tramp.c **** }
 1081              	 .loc 3 212 0
 1082 0030 1846     	 mov r0,r3
 1083 0032 0837     	 adds r7,r7,#8
 1084              	.LCFI82:
 1085              	 .cfi_def_cfa_offset 8
 1086 0034 BD46     	 mov sp,r7
 1087              	.LCFI83:
 1088              	 .cfi_def_cfa_register 13
 1089              	 
 1090 0036 80BD     	 pop {r7,pc}
 1091              	.L53:
 1092              	 .align 2
 1093              	.L52:
 1094 0038 00000000 	 .word trampPowerTable
 1095              	 .cfi_endproc
 1096              	.LFE553:
 1098              	 .section .text.trampSetPitMode,"ax",%progbits
 1099              	 .align 2
 1100              	 .global trampSetPitMode
 1101              	 .thumb
 1102              	 .thumb_func
 1104              	trampSetPitMode:
 1105              	.LFB554:
 213:../cleanflight/src/main/io/vtx_tramp.c **** 
 214:../cleanflight/src/main/io/vtx_tramp.c **** void trampSetPitMode(uint8_t onoff)
 215:../cleanflight/src/main/io/vtx_tramp.c **** {
 1106              	 .loc 3 215 0
 1107              	 .cfi_startproc
 1108              	 
 1109              	 
 1110 0000 80B5     	 push {r7,lr}
 1111              	.LCFI84:
 1112              	 .cfi_def_cfa_offset 8
 1113              	 .cfi_offset 7,-8
 1114              	 .cfi_offset 14,-4
 1115 0002 82B0     	 sub sp,sp,#8
 1116              	.LCFI85:
 1117              	 .cfi_def_cfa_offset 16
 1118 0004 00AF     	 add r7,sp,#0
 1119              	.LCFI86:
 1120              	 .cfi_def_cfa_register 7
 1121 0006 0346     	 mov r3,r0
 1122 0008 FB71     	 strb r3,[r7,#7]
 216:../cleanflight/src/main/io/vtx_tramp.c ****     trampCmdU16('I', onoff ? 0 : 1);
 1123              	 .loc 3 216 0
 1124 000a FB79     	 ldrb r3,[r7,#7]
 1125 000c 002B     	 cmp r3,#0
 1126 000e 0CBF     	 ite eq
 1127 0010 0123     	 moveq r3,#1
 1128 0012 0023     	 movne r3,#0
 1129 0014 DBB2     	 uxtb r3,r3
 1130 0016 9BB2     	 uxth r3,r3
 1131 0018 4920     	 movs r0,#73
 1132 001a 1946     	 mov r1,r3
 1133 001c FFF7FEFF 	 bl trampCmdU16
 217:../cleanflight/src/main/io/vtx_tramp.c **** }
 1134              	 .loc 3 217 0
 1135 0020 0837     	 adds r7,r7,#8
 1136              	.LCFI87:
 1137              	 .cfi_def_cfa_offset 8
 1138 0022 BD46     	 mov sp,r7
 1139              	.LCFI88:
 1140              	 .cfi_def_cfa_register 13
 1141              	 
 1142 0024 80BD     	 pop {r7,pc}
 1143              	 .cfi_endproc
 1144              	.LFE554:
 1146 0026 00BF     	 .section .text.trampHandleResponse,"ax",%progbits
 1147              	 .align 2
 1148              	 .global trampHandleResponse
 1149              	 .thumb
 1150              	 .thumb_func
 1152              	trampHandleResponse:
 1153              	.LFB555:
 218:../cleanflight/src/main/io/vtx_tramp.c **** 
 219:../cleanflight/src/main/io/vtx_tramp.c **** // returns completed response code
 220:../cleanflight/src/main/io/vtx_tramp.c **** char trampHandleResponse(void)
 221:../cleanflight/src/main/io/vtx_tramp.c **** {
 1154              	 .loc 3 221 0
 1155              	 .cfi_startproc
 1156              	 
 1157              	 
 1158 0000 80B5     	 push {r7,lr}
 1159              	.LCFI89:
 1160              	 .cfi_def_cfa_offset 8
 1161              	 .cfi_offset 7,-8
 1162              	 .cfi_offset 14,-4
 1163 0002 82B0     	 sub sp,sp,#8
 1164              	.LCFI90:
 1165              	 .cfi_def_cfa_offset 16
 1166 0004 00AF     	 add r7,sp,#0
 1167              	.LCFI91:
 1168              	 .cfi_def_cfa_register 7
 222:../cleanflight/src/main/io/vtx_tramp.c ****     const uint8_t respCode = trampRespBuffer[1];
 1169              	 .loc 3 222 0
 1170 0006 4D4B     	 ldr r3,.L67
 1171 0008 5B78     	 ldrb r3,[r3,#1]
 1172 000a FB71     	 strb r3,[r7,#7]
 223:../cleanflight/src/main/io/vtx_tramp.c **** 
 224:../cleanflight/src/main/io/vtx_tramp.c ****     switch (respCode) {
 1173              	 .loc 3 224 0
 1174 000c FB79     	 ldrb r3,[r7,#7]
 1175 000e 732B     	 cmp r3,#115
 1176 0010 7BD0     	 beq .L57
 1177 0012 762B     	 cmp r3,#118
 1178 0014 29D0     	 beq .L58
 1179 0016 722B     	 cmp r3,#114
 1180 0018 40F08A80 	 bne .L56
 1181              	.LBB3:
 225:../cleanflight/src/main/io/vtx_tramp.c ****     case 'r':
 226:../cleanflight/src/main/io/vtx_tramp.c ****         {
 227:../cleanflight/src/main/io/vtx_tramp.c ****             const uint16_t min_freq = trampRespBuffer[2]|(trampRespBuffer[3] << 8);
 1182              	 .loc 3 227 0
 1183 001c 474B     	 ldr r3,.L67
 1184 001e 9B78     	 ldrb r3,[r3,#2]
 1185 0020 9AB2     	 uxth r2,r3
 1186 0022 464B     	 ldr r3,.L67
 1187 0024 DB78     	 ldrb r3,[r3,#3]
 1188 0026 1B02     	 lsls r3,r3,#8
 1189 0028 9BB2     	 uxth r3,r3
 1190 002a 1343     	 orrs r3,r3,r2
 1191 002c 9BB2     	 uxth r3,r3
 1192 002e BB80     	 strh r3,[r7,#4]
 228:../cleanflight/src/main/io/vtx_tramp.c ****             if (min_freq != 0) {
 1193              	 .loc 3 228 0
 1194 0030 BB88     	 ldrh r3,[r7,#4]
 1195 0032 002B     	 cmp r3,#0
 1196 0034 18D0     	 beq .L60
 229:../cleanflight/src/main/io/vtx_tramp.c ****                 trampRFFreqMin = min_freq;
 1197              	 .loc 3 229 0
 1198 0036 BB88     	 ldrh r3,[r7,#4]
 1199 0038 414A     	 ldr r2,.L67+4
 1200 003a 1360     	 str r3,[r2]
 230:../cleanflight/src/main/io/vtx_tramp.c ****                 trampRFFreqMax = trampRespBuffer[4]|(trampRespBuffer[5] << 8);
 1201              	 .loc 3 230 0
 1202 003c 3F4B     	 ldr r3,.L67
 1203 003e 1B79     	 ldrb r3,[r3,#4]
 1204 0040 1A46     	 mov r2,r3
 1205 0042 3E4B     	 ldr r3,.L67
 1206 0044 5B79     	 ldrb r3,[r3,#5]
 1207 0046 1B02     	 lsls r3,r3,#8
 1208 0048 1343     	 orrs r3,r3,r2
 1209 004a 1A46     	 mov r2,r3
 1210 004c 3D4B     	 ldr r3,.L67+8
 1211 004e 1A60     	 str r2,[r3]
 231:../cleanflight/src/main/io/vtx_tramp.c ****                 trampRFPowerMax = trampRespBuffer[6]|(trampRespBuffer[7] << 8);
 1212              	 .loc 3 231 0
 1213 0050 3A4B     	 ldr r3,.L67
 1214 0052 9B79     	 ldrb r3,[r3,#6]
 1215 0054 1A46     	 mov r2,r3
 1216 0056 394B     	 ldr r3,.L67
 1217 0058 DB79     	 ldrb r3,[r3,#7]
 1218 005a 1B02     	 lsls r3,r3,#8
 1219 005c 1343     	 orrs r3,r3,r2
 1220 005e 1A46     	 mov r2,r3
 1221 0060 394B     	 ldr r3,.L67+12
 1222 0062 1A60     	 str r2,[r3]
 232:../cleanflight/src/main/io/vtx_tramp.c ****                 return 'r';
 1223              	 .loc 3 232 0
 1224 0064 7223     	 movs r3,#114
 1225 0066 64E0     	 b .L61
 1226              	.L60:
 1227              	.LBE3:
 233:../cleanflight/src/main/io/vtx_tramp.c ****             }
 234:../cleanflight/src/main/io/vtx_tramp.c **** 
 235:../cleanflight/src/main/io/vtx_tramp.c ****             // throw bytes echoed from tx to rx in bidirectional mode away
 236:../cleanflight/src/main/io/vtx_tramp.c ****         }
 237:../cleanflight/src/main/io/vtx_tramp.c ****         break;
 1228              	 .loc 3 237 0
 1229 0068 62E0     	 b .L56
 1230              	.L58:
 1231              	.LBB4:
 238:../cleanflight/src/main/io/vtx_tramp.c **** 
 239:../cleanflight/src/main/io/vtx_tramp.c ****     case 'v':
 240:../cleanflight/src/main/io/vtx_tramp.c ****         {
 241:../cleanflight/src/main/io/vtx_tramp.c ****             const uint16_t freq = trampRespBuffer[2]|(trampRespBuffer[3] << 8);
 1232              	 .loc 3 241 0
 1233 006a 344B     	 ldr r3,.L67
 1234 006c 9B78     	 ldrb r3,[r3,#2]
 1235 006e 9AB2     	 uxth r2,r3
 1236 0070 324B     	 ldr r3,.L67
 1237 0072 DB78     	 ldrb r3,[r3,#3]
 1238 0074 1B02     	 lsls r3,r3,#8
 1239 0076 9BB2     	 uxth r3,r3
 1240 0078 1343     	 orrs r3,r3,r2
 1241 007a 9BB2     	 uxth r3,r3
 1242 007c 7B80     	 strh r3,[r7,#2]
 242:../cleanflight/src/main/io/vtx_tramp.c ****             if (freq != 0) {
 1243              	 .loc 3 242 0
 1244 007e 7B88     	 ldrh r3,[r7,#2]
 1245 0080 002B     	 cmp r3,#0
 1246 0082 41D0     	 beq .L62
 243:../cleanflight/src/main/io/vtx_tramp.c ****                 trampCurFreq = freq;
 1247              	 .loc 3 243 0
 1248 0084 7B88     	 ldrh r3,[r7,#2]
 1249 0086 314A     	 ldr r2,.L67+16
 1250 0088 1360     	 str r3,[r2]
 244:../cleanflight/src/main/io/vtx_tramp.c ****                 trampConfiguredPower = trampRespBuffer[4]|(trampRespBuffer[5] << 8);
 1251              	 .loc 3 244 0
 1252 008a 2C4B     	 ldr r3,.L67
 1253 008c 1B79     	 ldrb r3,[r3,#4]
 1254 008e 9AB2     	 uxth r2,r3
 1255 0090 2A4B     	 ldr r3,.L67
 1256 0092 5B79     	 ldrb r3,[r3,#5]
 1257 0094 1B02     	 lsls r3,r3,#8
 1258 0096 9BB2     	 uxth r3,r3
 1259 0098 1343     	 orrs r3,r3,r2
 1260 009a 9BB2     	 uxth r3,r3
 1261 009c 9AB2     	 uxth r2,r3
 1262 009e 2C4B     	 ldr r3,.L67+20
 1263 00a0 1A80     	 strh r2,[r3]
 245:../cleanflight/src/main/io/vtx_tramp.c ****                 trampPitMode = trampRespBuffer[7];
 1264              	 .loc 3 245 0
 1265 00a2 264B     	 ldr r3,.L67
 1266 00a4 DA79     	 ldrb r2,[r3,#7]
 1267 00a6 2B4B     	 ldr r3,.L67+24
 1268 00a8 1A70     	 strb r2,[r3]
 246:../cleanflight/src/main/io/vtx_tramp.c ****                 trampPower = trampRespBuffer[8]|(trampRespBuffer[9] << 8);
 1269              	 .loc 3 246 0
 1270 00aa 244B     	 ldr r3,.L67
 1271 00ac 1B7A     	 ldrb r3,[r3,#8]
 1272 00ae 9AB2     	 uxth r2,r3
 1273 00b0 224B     	 ldr r3,.L67
 1274 00b2 5B7A     	 ldrb r3,[r3,#9]
 1275 00b4 1B02     	 lsls r3,r3,#8
 1276 00b6 9BB2     	 uxth r3,r3
 1277 00b8 1343     	 orrs r3,r3,r2
 1278 00ba 9BB2     	 uxth r3,r3
 1279 00bc 9AB2     	 uxth r2,r3
 1280 00be 264B     	 ldr r3,.L67+28
 1281 00c0 1A80     	 strh r2,[r3]
 247:../cleanflight/src/main/io/vtx_tramp.c **** 
 248:../cleanflight/src/main/io/vtx_tramp.c ****                 // if no band/chan match then make sure set-by-freq mode is flagged
 249:../cleanflight/src/main/io/vtx_tramp.c ****                 if (!vtx58_Freq2Bandchan(trampCurFreq, &trampBand, &trampChannel)) {
 1282              	 .loc 3 249 0
 1283 00c2 224B     	 ldr r3,.L67+16
 1284 00c4 1B68     	 ldr r3,[r3]
 1285 00c6 9BB2     	 uxth r3,r3
 1286 00c8 1846     	 mov r0,r3
 1287 00ca 2449     	 ldr r1,.L67+32
 1288 00cc 244A     	 ldr r2,.L67+36
 1289 00ce FFF7FEFF 	 bl vtx58_Freq2Bandchan
 1290 00d2 0346     	 mov r3,r0
 1291 00d4 83F00103 	 eor r3,r3,#1
 1292 00d8 DBB2     	 uxtb r3,r3
 1293 00da 002B     	 cmp r3,#0
 1294 00dc 02D0     	 beq .L63
 250:../cleanflight/src/main/io/vtx_tramp.c ****                     trampSetByFreqFlag = true;
 1295              	 .loc 3 250 0
 1296 00de 214B     	 ldr r3,.L67+40
 1297 00e0 0122     	 movs r2,#1
 1298 00e2 1A70     	 strb r2,[r3]
 1299              	.L63:
 251:../cleanflight/src/main/io/vtx_tramp.c ****                 }
 252:../cleanflight/src/main/io/vtx_tramp.c **** 
 253:../cleanflight/src/main/io/vtx_tramp.c ****                 if (trampConfFreq == 0)  trampConfFreq  = trampCurFreq;
 1300              	 .loc 3 253 0
 1301 00e4 204B     	 ldr r3,.L67+44
 1302 00e6 1B68     	 ldr r3,[r3]
 1303 00e8 002B     	 cmp r3,#0
 1304 00ea 03D1     	 bne .L64
 1305              	 .loc 3 253 0 is_stmt 0 discriminator 1
 1306 00ec 174B     	 ldr r3,.L67+16
 1307 00ee 1B68     	 ldr r3,[r3]
 1308 00f0 1D4A     	 ldr r2,.L67+44
 1309 00f2 1360     	 str r3,[r2]
 1310              	.L64:
 254:../cleanflight/src/main/io/vtx_tramp.c ****                 if (trampConfPower == 0) trampConfPower = trampPower;
 1311              	 .loc 3 254 0 is_stmt 1
 1312 00f4 1D4B     	 ldr r3,.L67+48
 1313 00f6 1B88     	 ldrh r3,[r3]
 1314 00f8 002B     	 cmp r3,#0
 1315 00fa 03D1     	 bne .L65
 1316              	 .loc 3 254 0 is_stmt 0 discriminator 1
 1317 00fc 164B     	 ldr r3,.L67+28
 1318 00fe 1A88     	 ldrh r2,[r3]
 1319 0100 1A4B     	 ldr r3,.L67+48
 1320 0102 1A80     	 strh r2,[r3]
 1321              	.L65:
 255:../cleanflight/src/main/io/vtx_tramp.c ****                 return 'v';
 1322              	 .loc 3 255 0 is_stmt 1
 1323 0104 7623     	 movs r3,#118
 1324 0106 14E0     	 b .L61
 1325              	.L62:
 1326              	.LBE4:
 256:../cleanflight/src/main/io/vtx_tramp.c ****             }
 257:../cleanflight/src/main/io/vtx_tramp.c **** 
 258:../cleanflight/src/main/io/vtx_tramp.c ****             // throw bytes echoed from tx to rx in bidirectional mode away
 259:../cleanflight/src/main/io/vtx_tramp.c ****         }
 260:../cleanflight/src/main/io/vtx_tramp.c ****         break;
 1327              	 .loc 3 260 0
 1328 0108 12E0     	 b .L56
 1329              	.L57:
 1330              	.LBB5:
 261:../cleanflight/src/main/io/vtx_tramp.c **** 
 262:../cleanflight/src/main/io/vtx_tramp.c ****     case 's':
 263:../cleanflight/src/main/io/vtx_tramp.c ****         {
 264:../cleanflight/src/main/io/vtx_tramp.c ****             const uint16_t temp = (int16_t)(trampRespBuffer[6]|(trampRespBuffer[7] << 8));
 1331              	 .loc 3 264 0
 1332 010a 0C4B     	 ldr r3,.L67
 1333 010c 9B79     	 ldrb r3,[r3,#6]
 1334 010e 9AB2     	 uxth r2,r3
 1335 0110 0A4B     	 ldr r3,.L67
 1336 0112 DB79     	 ldrb r3,[r3,#7]
 1337 0114 1B02     	 lsls r3,r3,#8
 1338 0116 9BB2     	 uxth r3,r3
 1339 0118 1343     	 orrs r3,r3,r2
 1340 011a 9BB2     	 uxth r3,r3
 1341 011c 3B80     	 strh r3,[r7]
 265:../cleanflight/src/main/io/vtx_tramp.c ****             if (temp != 0) {
 1342              	 .loc 3 265 0
 1343 011e 3B88     	 ldrh r3,[r7]
 1344 0120 002B     	 cmp r3,#0
 1345 0122 04D0     	 beq .L66
 266:../cleanflight/src/main/io/vtx_tramp.c ****                 trampTemperature = temp;
 1346              	 .loc 3 266 0
 1347 0124 3A88     	 ldrh r2,[r7]
 1348 0126 124B     	 ldr r3,.L67+52
 1349 0128 1A80     	 strh r2,[r3]
 267:../cleanflight/src/main/io/vtx_tramp.c ****                 return 's';
 1350              	 .loc 3 267 0
 1351 012a 7323     	 movs r3,#115
 1352 012c 01E0     	 b .L61
 1353              	.L66:
 1354              	.LBE5:
 268:../cleanflight/src/main/io/vtx_tramp.c ****             }
 269:../cleanflight/src/main/io/vtx_tramp.c ****         }
 270:../cleanflight/src/main/io/vtx_tramp.c ****         break;
 1355              	 .loc 3 270 0
 1356 012e 00BF     	 nop
 1357              	.L56:
 271:../cleanflight/src/main/io/vtx_tramp.c ****     }
 272:../cleanflight/src/main/io/vtx_tramp.c **** 
 273:../cleanflight/src/main/io/vtx_tramp.c ****     return 0;
 1358              	 .loc 3 273 0
 1359 0130 0023     	 movs r3,#0
 1360              	.L61:
 274:../cleanflight/src/main/io/vtx_tramp.c **** }
 1361              	 .loc 3 274 0
 1362 0132 1846     	 mov r0,r3
 1363 0134 0837     	 adds r7,r7,#8
 1364              	.LCFI92:
 1365              	 .cfi_def_cfa_offset 8
 1366 0136 BD46     	 mov sp,r7
 1367              	.LCFI93:
 1368              	 .cfi_def_cfa_register 13
 1369              	 
 1370 0138 80BD     	 pop {r7,pc}
 1371              	.L68:
 1372 013a 00BF     	 .align 2
 1373              	.L67:
 1374 013c 00000000 	 .word trampRespBuffer
 1375 0140 00000000 	 .word trampRFFreqMin
 1376 0144 00000000 	 .word trampRFFreqMax
 1377 0148 00000000 	 .word trampRFPowerMax
 1378 014c 00000000 	 .word trampCurFreq
 1379 0150 00000000 	 .word trampConfiguredPower
 1380 0154 00000000 	 .word trampPitMode
 1381 0158 00000000 	 .word trampPower
 1382 015c 00000000 	 .word trampBand
 1383 0160 00000000 	 .word trampChannel
 1384 0164 00000000 	 .word trampSetByFreqFlag
 1385 0168 00000000 	 .word trampConfFreq
 1386 016c 00000000 	 .word trampConfPower
 1387 0170 00000000 	 .word trampTemperature
 1388              	 .cfi_endproc
 1389              	.LFE555:
 1391              	 .section .bss.trampReceiveState,"aw",%nobits
 1394              	trampReceiveState:
 1395 0000 00       	 .space 1
 1396              	 .section .bss.trampReceivePos,"aw",%nobits
 1397              	 .align 2
 1400              	trampReceivePos:
 1401 0000 00000000 	 .space 4
 1402              	 .section .text.trampResetReceiver,"ax",%progbits
 1403              	 .align 2
 1404              	 .thumb
 1405              	 .thumb_func
 1407              	trampResetReceiver:
 1408              	.LFB556:
 275:../cleanflight/src/main/io/vtx_tramp.c **** 
 276:../cleanflight/src/main/io/vtx_tramp.c **** typedef enum {
 277:../cleanflight/src/main/io/vtx_tramp.c ****     S_WAIT_LEN = 0,   // Waiting for a packet len
 278:../cleanflight/src/main/io/vtx_tramp.c ****     S_WAIT_CODE,      // Waiting for a response code
 279:../cleanflight/src/main/io/vtx_tramp.c ****     S_DATA,           // Waiting for rest of the packet.
 280:../cleanflight/src/main/io/vtx_tramp.c **** } trampReceiveState_e;
 281:../cleanflight/src/main/io/vtx_tramp.c **** 
 282:../cleanflight/src/main/io/vtx_tramp.c **** static trampReceiveState_e trampReceiveState = S_WAIT_LEN;
 283:../cleanflight/src/main/io/vtx_tramp.c **** static int trampReceivePos = 0;
 284:../cleanflight/src/main/io/vtx_tramp.c **** 
 285:../cleanflight/src/main/io/vtx_tramp.c **** static void trampResetReceiver(void)
 286:../cleanflight/src/main/io/vtx_tramp.c **** {
 1409              	 .loc 3 286 0
 1410              	 .cfi_startproc
 1411              	 
 1412              	 
 1413              	 
 1414 0000 80B4     	 push {r7}
 1415              	.LCFI94:
 1416              	 .cfi_def_cfa_offset 4
 1417              	 .cfi_offset 7,-4
 1418 0002 00AF     	 add r7,sp,#0
 1419              	.LCFI95:
 1420              	 .cfi_def_cfa_register 7
 287:../cleanflight/src/main/io/vtx_tramp.c ****     trampReceiveState = S_WAIT_LEN;
 1421              	 .loc 3 287 0
 1422 0004 044B     	 ldr r3,.L70
 1423 0006 0022     	 movs r2,#0
 1424 0008 1A70     	 strb r2,[r3]
 288:../cleanflight/src/main/io/vtx_tramp.c ****     trampReceivePos = 0;
 1425              	 .loc 3 288 0
 1426 000a 044B     	 ldr r3,.L70+4
 1427 000c 0022     	 movs r2,#0
 1428 000e 1A60     	 str r2,[r3]
 289:../cleanflight/src/main/io/vtx_tramp.c **** }
 1429              	 .loc 3 289 0
 1430 0010 BD46     	 mov sp,r7
 1431              	.LCFI96:
 1432              	 .cfi_def_cfa_register 13
 1433              	 
 1434 0012 5DF8047B 	 ldr r7,[sp],#4
 1435              	.LCFI97:
 1436              	 .cfi_restore 7
 1437              	 .cfi_def_cfa_offset 0
 1438 0016 7047     	 bx lr
 1439              	.L71:
 1440              	 .align 2
 1441              	.L70:
 1442 0018 00000000 	 .word trampReceiveState
 1443 001c 00000000 	 .word trampReceivePos
 1444              	 .cfi_endproc
 1445              	.LFE556:
 1447              	 .section .text.trampIsValidResponseCode,"ax",%progbits
 1448              	 .align 2
 1449              	 .thumb
 1450              	 .thumb_func
 1452              	trampIsValidResponseCode:
 1453              	.LFB557:
 290:../cleanflight/src/main/io/vtx_tramp.c **** 
 291:../cleanflight/src/main/io/vtx_tramp.c **** static bool trampIsValidResponseCode(uint8_t code)
 292:../cleanflight/src/main/io/vtx_tramp.c **** {
 1454              	 .loc 3 292 0
 1455              	 .cfi_startproc
 1456              	 
 1457              	 
 1458              	 
 1459 0000 80B4     	 push {r7}
 1460              	.LCFI98:
 1461              	 .cfi_def_cfa_offset 4
 1462              	 .cfi_offset 7,-4
 1463 0002 83B0     	 sub sp,sp,#12
 1464              	.LCFI99:
 1465              	 .cfi_def_cfa_offset 16
 1466 0004 00AF     	 add r7,sp,#0
 1467              	.LCFI100:
 1468              	 .cfi_def_cfa_register 7
 1469 0006 0346     	 mov r3,r0
 1470 0008 FB71     	 strb r3,[r7,#7]
 293:../cleanflight/src/main/io/vtx_tramp.c ****     if (code == 'r' || code == 'v' || code == 's') {
 1471              	 .loc 3 293 0
 1472 000a FB79     	 ldrb r3,[r7,#7]
 1473 000c 722B     	 cmp r3,#114
 1474 000e 05D0     	 beq .L73
 1475              	 .loc 3 293 0 is_stmt 0 discriminator 1
 1476 0010 FB79     	 ldrb r3,[r7,#7]
 1477 0012 762B     	 cmp r3,#118
 1478 0014 02D0     	 beq .L73
 1479              	 .loc 3 293 0 discriminator 2
 1480 0016 FB79     	 ldrb r3,[r7,#7]
 1481 0018 732B     	 cmp r3,#115
 1482 001a 01D1     	 bne .L74
 1483              	.L73:
 294:../cleanflight/src/main/io/vtx_tramp.c ****         return true;
 1484              	 .loc 3 294 0 is_stmt 1
 1485 001c 0123     	 movs r3,#1
 1486 001e 00E0     	 b .L75
 1487              	.L74:
 295:../cleanflight/src/main/io/vtx_tramp.c ****     } else {
 296:../cleanflight/src/main/io/vtx_tramp.c ****         return false;
 1488              	 .loc 3 296 0
 1489 0020 0023     	 movs r3,#0
 1490              	.L75:
 297:../cleanflight/src/main/io/vtx_tramp.c ****     }
 298:../cleanflight/src/main/io/vtx_tramp.c **** }
 1491              	 .loc 3 298 0
 1492 0022 1846     	 mov r0,r3
 1493 0024 0C37     	 adds r7,r7,#12
 1494              	.LCFI101:
 1495              	 .cfi_def_cfa_offset 4
 1496 0026 BD46     	 mov sp,r7
 1497              	.LCFI102:
 1498              	 .cfi_def_cfa_register 13
 1499              	 
 1500 0028 5DF8047B 	 ldr r7,[sp],#4
 1501              	.LCFI103:
 1502              	 .cfi_restore 7
 1503              	 .cfi_def_cfa_offset 0
 1504 002c 7047     	 bx lr
 1505              	 .cfi_endproc
 1506              	.LFE557:
 1508 002e 00BF     	 .section .text.trampReceive,"ax",%progbits
 1509              	 .align 2
 1510              	 .thumb
 1511              	 .thumb_func
 1513              	trampReceive:
 1514              	.LFB558:
 299:../cleanflight/src/main/io/vtx_tramp.c **** 
 300:../cleanflight/src/main/io/vtx_tramp.c **** // returns completed response code or 0
 301:../cleanflight/src/main/io/vtx_tramp.c **** static char trampReceive(uint32_t currentTimeUs)
 302:../cleanflight/src/main/io/vtx_tramp.c **** {
 1515              	 .loc 3 302 0
 1516              	 .cfi_startproc
 1517              	 
 1518              	 
 1519 0000 80B5     	 push {r7,lr}
 1520              	.LCFI104:
 1521              	 .cfi_def_cfa_offset 8
 1522              	 .cfi_offset 7,-8
 1523              	 .cfi_offset 14,-4
 1524 0002 84B0     	 sub sp,sp,#16
 1525              	.LCFI105:
 1526              	 .cfi_def_cfa_offset 24
 1527 0004 00AF     	 add r7,sp,#0
 1528              	.LCFI106:
 1529              	 .cfi_def_cfa_register 7
 1530 0006 7860     	 str r0,[r7,#4]
 303:../cleanflight/src/main/io/vtx_tramp.c ****     UNUSED(currentTimeUs);
 304:../cleanflight/src/main/io/vtx_tramp.c **** 
 305:../cleanflight/src/main/io/vtx_tramp.c ****     if (!trampSerialPort) {
 1531              	 .loc 3 305 0
 1532 0008 2F4B     	 ldr r3,.L91
 1533 000a 1B68     	 ldr r3,[r3]
 1534 000c 002B     	 cmp r3,#0
 1535 000e 01D1     	 bne .L77
 306:../cleanflight/src/main/io/vtx_tramp.c ****         return 0;
 1536              	 .loc 3 306 0
 1537 0010 0023     	 movs r3,#0
 1538 0012 55E0     	 b .L78
 1539              	.L77:
 307:../cleanflight/src/main/io/vtx_tramp.c ****     }
 308:../cleanflight/src/main/io/vtx_tramp.c **** 
 309:../cleanflight/src/main/io/vtx_tramp.c ****     while (serialRxBytesWaiting(trampSerialPort)) {
 1540              	 .loc 3 309 0
 1541 0014 4BE0     	 b .L79
 1542              	.L89:
 1543              	.LBB6:
 310:../cleanflight/src/main/io/vtx_tramp.c ****         const uint8_t c = serialRead(trampSerialPort);
 1544              	 .loc 3 310 0
 1545 0016 2C4B     	 ldr r3,.L91
 1546 0018 1B68     	 ldr r3,[r3]
 1547 001a 1846     	 mov r0,r3
 1548 001c FFF7FEFF 	 bl serialRead
 1549 0020 0346     	 mov r3,r0
 1550 0022 FB73     	 strb r3,[r7,#15]
 311:../cleanflight/src/main/io/vtx_tramp.c ****         trampRespBuffer[trampReceivePos++] = c;
 1551              	 .loc 3 311 0
 1552 0024 294B     	 ldr r3,.L91+4
 1553 0026 1B68     	 ldr r3,[r3]
 1554 0028 5A1C     	 adds r2,r3,#1
 1555 002a 2849     	 ldr r1,.L91+4
 1556 002c 0A60     	 str r2,[r1]
 1557 002e 2849     	 ldr r1,.L91+8
 1558 0030 FA7B     	 ldrb r2,[r7,#15]
 1559 0032 CA54     	 strb r2,[r1,r3]
 312:../cleanflight/src/main/io/vtx_tramp.c **** 
 313:../cleanflight/src/main/io/vtx_tramp.c ****         switch (trampReceiveState) {
 1560              	 .loc 3 313 0
 1561 0034 274B     	 ldr r3,.L91+12
 1562 0036 1B78     	 ldrb r3,[r3]
 1563 0038 012B     	 cmp r3,#1
 1564 003a 0ED0     	 beq .L81
 1565 003c 022B     	 cmp r3,#2
 1566 003e 1AD0     	 beq .L82
 1567 0040 002B     	 cmp r3,#0
 1568 0042 31D1     	 bne .L90
 314:../cleanflight/src/main/io/vtx_tramp.c ****         case S_WAIT_LEN:
 315:../cleanflight/src/main/io/vtx_tramp.c ****             if (c == 0x0F) {
 1569              	 .loc 3 315 0
 1570 0044 FB7B     	 ldrb r3,[r7,#15]
 1571 0046 0F2B     	 cmp r3,#15
 1572 0048 03D1     	 bne .L84
 316:../cleanflight/src/main/io/vtx_tramp.c ****                 trampReceiveState = S_WAIT_CODE;
 1573              	 .loc 3 316 0
 1574 004a 224B     	 ldr r3,.L91+12
 1575 004c 0122     	 movs r2,#1
 1576 004e 1A70     	 strb r2,[r3]
 1577 0050 02E0     	 b .L85
 1578              	.L84:
 317:../cleanflight/src/main/io/vtx_tramp.c ****             } else {
 318:../cleanflight/src/main/io/vtx_tramp.c ****                 trampReceivePos = 0;
 1579              	 .loc 3 318 0
 1580 0052 1E4B     	 ldr r3,.L91+4
 1581 0054 0022     	 movs r2,#0
 1582 0056 1A60     	 str r2,[r3]
 1583              	.L85:
 319:../cleanflight/src/main/io/vtx_tramp.c ****             }
 320:../cleanflight/src/main/io/vtx_tramp.c ****             break;
 1584              	 .loc 3 320 0
 1585 0058 29E0     	 b .L79
 1586              	.L81:
 321:../cleanflight/src/main/io/vtx_tramp.c **** 
 322:../cleanflight/src/main/io/vtx_tramp.c ****         case S_WAIT_CODE:
 323:../cleanflight/src/main/io/vtx_tramp.c ****             if (trampIsValidResponseCode(c)) {
 1587              	 .loc 3 323 0
 1588 005a FB7B     	 ldrb r3,[r7,#15]
 1589 005c 1846     	 mov r0,r3
 1590 005e FFF7FEFF 	 bl trampIsValidResponseCode
 1591 0062 0346     	 mov r3,r0
 1592 0064 002B     	 cmp r3,#0
 1593 0066 03D0     	 beq .L86
 324:../cleanflight/src/main/io/vtx_tramp.c ****                 trampReceiveState = S_DATA;
 1594              	 .loc 3 324 0
 1595 0068 1A4B     	 ldr r3,.L91+12
 1596 006a 0222     	 movs r2,#2
 1597 006c 1A70     	 strb r2,[r3]
 1598 006e 01E0     	 b .L87
 1599              	.L86:
 325:../cleanflight/src/main/io/vtx_tramp.c ****             } else {
 326:../cleanflight/src/main/io/vtx_tramp.c ****                 trampResetReceiver();
 1600              	 .loc 3 326 0
 1601 0070 FFF7FEFF 	 bl trampResetReceiver
 1602              	.L87:
 327:../cleanflight/src/main/io/vtx_tramp.c ****             }
 328:../cleanflight/src/main/io/vtx_tramp.c ****             break;
 1603              	 .loc 3 328 0
 1604 0074 1BE0     	 b .L79
 1605              	.L82:
 329:../cleanflight/src/main/io/vtx_tramp.c **** 
 330:../cleanflight/src/main/io/vtx_tramp.c ****         case S_DATA:
 331:../cleanflight/src/main/io/vtx_tramp.c ****             if (trampReceivePos == 16) {
 1606              	 .loc 3 331 0
 1607 0076 154B     	 ldr r3,.L91+4
 1608 0078 1B68     	 ldr r3,[r3]
 1609 007a 102B     	 cmp r3,#16
 1610 007c 13D1     	 bne .L88
 1611              	.LBB7:
 332:../cleanflight/src/main/io/vtx_tramp.c ****                 uint8_t cksum = trampChecksum(trampRespBuffer);
 1612              	 .loc 3 332 0
 1613 007e 1448     	 ldr r0,.L91+8
 1614 0080 FFF7FEFF 	 bl trampChecksum
 1615 0084 0346     	 mov r3,r0
 1616 0086 BB73     	 strb r3,[r7,#14]
 333:../cleanflight/src/main/io/vtx_tramp.c **** 
 334:../cleanflight/src/main/io/vtx_tramp.c ****                 trampResetReceiver();
 1617              	 .loc 3 334 0
 1618 0088 FFF7FEFF 	 bl trampResetReceiver
 335:../cleanflight/src/main/io/vtx_tramp.c **** 
 336:../cleanflight/src/main/io/vtx_tramp.c ****                 if ((trampRespBuffer[14] == cksum) && (trampRespBuffer[15] == 0)) {
 1619              	 .loc 3 336 0
 1620 008c 104B     	 ldr r3,.L91+8
 1621 008e 9B7B     	 ldrb r3,[r3,#14]
 1622 0090 BA7B     	 ldrb r2,[r7,#14]
 1623 0092 9A42     	 cmp r2,r3
 1624 0094 07D1     	 bne .L88
 1625              	 .loc 3 336 0 is_stmt 0 discriminator 1
 1626 0096 0E4B     	 ldr r3,.L91+8
 1627 0098 DB7B     	 ldrb r3,[r3,#15]
 1628 009a 002B     	 cmp r3,#0
 1629 009c 03D1     	 bne .L88
 337:../cleanflight/src/main/io/vtx_tramp.c ****                     return trampHandleResponse();
 1630              	 .loc 3 337 0 is_stmt 1
 1631 009e FFF7FEFF 	 bl trampHandleResponse
 1632 00a2 0346     	 mov r3,r0
 1633 00a4 0CE0     	 b .L78
 1634              	.L88:
 1635              	.LBE7:
 338:../cleanflight/src/main/io/vtx_tramp.c ****                 }
 339:../cleanflight/src/main/io/vtx_tramp.c ****             }
 340:../cleanflight/src/main/io/vtx_tramp.c ****             break;
 1636              	 .loc 3 340 0
 1637 00a6 02E0     	 b .L79
 1638              	.L90:
 341:../cleanflight/src/main/io/vtx_tramp.c **** 
 342:../cleanflight/src/main/io/vtx_tramp.c ****         default:
 343:../cleanflight/src/main/io/vtx_tramp.c ****             trampResetReceiver();
 1639              	 .loc 3 343 0
 1640 00a8 FFF7FEFF 	 bl trampResetReceiver
 344:../cleanflight/src/main/io/vtx_tramp.c ****             break;
 1641              	 .loc 3 344 0
 1642 00ac 00BF     	 nop
 1643              	.L79:
 1644              	.LBE6:
 309:../cleanflight/src/main/io/vtx_tramp.c ****         const uint8_t c = serialRead(trampSerialPort);
 1645              	 .loc 3 309 0
 1646 00ae 064B     	 ldr r3,.L91
 1647 00b0 1B68     	 ldr r3,[r3]
 1648 00b2 1846     	 mov r0,r3
 1649 00b4 FFF7FEFF 	 bl serialRxBytesWaiting
 1650 00b8 0346     	 mov r3,r0
 1651 00ba 002B     	 cmp r3,#0
 1652 00bc ABD1     	 bne .L89
 345:../cleanflight/src/main/io/vtx_tramp.c ****         }
 346:../cleanflight/src/main/io/vtx_tramp.c ****     }
 347:../cleanflight/src/main/io/vtx_tramp.c **** 
 348:../cleanflight/src/main/io/vtx_tramp.c ****     return 0;
 1653              	 .loc 3 348 0
 1654 00be 0023     	 movs r3,#0
 1655              	.L78:
 349:../cleanflight/src/main/io/vtx_tramp.c **** }
 1656              	 .loc 3 349 0
 1657 00c0 1846     	 mov r0,r3
 1658 00c2 1037     	 adds r7,r7,#16
 1659              	.LCFI107:
 1660              	 .cfi_def_cfa_offset 8
 1661 00c4 BD46     	 mov sp,r7
 1662              	.LCFI108:
 1663              	 .cfi_def_cfa_register 13
 1664              	 
 1665 00c6 80BD     	 pop {r7,pc}
 1666              	.L92:
 1667              	 .align 2
 1668              	.L91:
 1669 00c8 00000000 	 .word trampSerialPort
 1670 00cc 00000000 	 .word trampReceivePos
 1671 00d0 00000000 	 .word trampRespBuffer
 1672 00d4 00000000 	 .word trampReceiveState
 1673              	 .cfi_endproc
 1674              	.LFE558:
 1676              	 .section .text.trampQuery,"ax",%progbits
 1677              	 .align 2
 1678              	 .global trampQuery
 1679              	 .thumb
 1680              	 .thumb_func
 1682              	trampQuery:
 1683              	.LFB559:
 350:../cleanflight/src/main/io/vtx_tramp.c **** 
 351:../cleanflight/src/main/io/vtx_tramp.c **** void trampQuery(uint8_t cmd)
 352:../cleanflight/src/main/io/vtx_tramp.c **** {
 1684              	 .loc 3 352 0
 1685              	 .cfi_startproc
 1686              	 
 1687              	 
 1688 0000 80B5     	 push {r7,lr}
 1689              	.LCFI109:
 1690              	 .cfi_def_cfa_offset 8
 1691              	 .cfi_offset 7,-8
 1692              	 .cfi_offset 14,-4
 1693 0002 82B0     	 sub sp,sp,#8
 1694              	.LCFI110:
 1695              	 .cfi_def_cfa_offset 16
 1696 0004 00AF     	 add r7,sp,#0
 1697              	.LCFI111:
 1698              	 .cfi_def_cfa_register 7
 1699 0006 0346     	 mov r3,r0
 1700 0008 FB71     	 strb r3,[r7,#7]
 353:../cleanflight/src/main/io/vtx_tramp.c ****     trampResetReceiver();
 1701              	 .loc 3 353 0
 1702 000a FFF7FEFF 	 bl trampResetReceiver
 354:../cleanflight/src/main/io/vtx_tramp.c ****     trampCmdU16(cmd, 0);
 1703              	 .loc 3 354 0
 1704 000e FB79     	 ldrb r3,[r7,#7]
 1705 0010 1846     	 mov r0,r3
 1706 0012 0021     	 movs r1,#0
 1707 0014 FFF7FEFF 	 bl trampCmdU16
 355:../cleanflight/src/main/io/vtx_tramp.c **** }
 1708              	 .loc 3 355 0
 1709 0018 0837     	 adds r7,r7,#8
 1710              	.LCFI112:
 1711              	 .cfi_def_cfa_offset 8
 1712 001a BD46     	 mov sp,r7
 1713              	.LCFI113:
 1714              	 .cfi_def_cfa_register 13
 1715              	 
 1716 001c 80BD     	 pop {r7,pc}
 1717              	 .cfi_endproc
 1718              	.LFE559:
 1720 001e 00BF     	 .section .text.trampQueryR,"ax",%progbits
 1721              	 .align 2
 1722              	 .global trampQueryR
 1723              	 .thumb
 1724              	 .thumb_func
 1726              	trampQueryR:
 1727              	.LFB560:
 356:../cleanflight/src/main/io/vtx_tramp.c **** 
 357:../cleanflight/src/main/io/vtx_tramp.c **** void trampQueryR(void)
 358:../cleanflight/src/main/io/vtx_tramp.c **** {
 1728              	 .loc 3 358 0
 1729              	 .cfi_startproc
 1730              	 
 1731              	 
 1732 0000 80B5     	 push {r7,lr}
 1733              	.LCFI114:
 1734              	 .cfi_def_cfa_offset 8
 1735              	 .cfi_offset 7,-8
 1736              	 .cfi_offset 14,-4
 1737 0002 00AF     	 add r7,sp,#0
 1738              	.LCFI115:
 1739              	 .cfi_def_cfa_register 7
 359:../cleanflight/src/main/io/vtx_tramp.c ****     trampQuery('r');
 1740              	 .loc 3 359 0
 1741 0004 7220     	 movs r0,#114
 1742 0006 FFF7FEFF 	 bl trampQuery
 360:../cleanflight/src/main/io/vtx_tramp.c **** }
 1743              	 .loc 3 360 0
 1744 000a 80BD     	 pop {r7,pc}
 1745              	 .cfi_endproc
 1746              	.LFE560:
 1748              	 .section .text.trampQueryV,"ax",%progbits
 1749              	 .align 2
 1750              	 .global trampQueryV
 1751              	 .thumb
 1752              	 .thumb_func
 1754              	trampQueryV:
 1755              	.LFB561:
 361:../cleanflight/src/main/io/vtx_tramp.c **** 
 362:../cleanflight/src/main/io/vtx_tramp.c **** void trampQueryV(void)
 363:../cleanflight/src/main/io/vtx_tramp.c **** {
 1756              	 .loc 3 363 0
 1757              	 .cfi_startproc
 1758              	 
 1759              	 
 1760 0000 80B5     	 push {r7,lr}
 1761              	.LCFI116:
 1762              	 .cfi_def_cfa_offset 8
 1763              	 .cfi_offset 7,-8
 1764              	 .cfi_offset 14,-4
 1765 0002 00AF     	 add r7,sp,#0
 1766              	.LCFI117:
 1767              	 .cfi_def_cfa_register 7
 364:../cleanflight/src/main/io/vtx_tramp.c ****     trampQuery('v');
 1768              	 .loc 3 364 0
 1769 0004 7620     	 movs r0,#118
 1770 0006 FFF7FEFF 	 bl trampQuery
 365:../cleanflight/src/main/io/vtx_tramp.c **** }
 1771              	 .loc 3 365 0
 1772 000a 80BD     	 pop {r7,pc}
 1773              	 .cfi_endproc
 1774              	.LFE561:
 1776              	 .section .text.trampQueryS,"ax",%progbits
 1777              	 .align 2
 1778              	 .global trampQueryS
 1779              	 .thumb
 1780              	 .thumb_func
 1782              	trampQueryS:
 1783              	.LFB562:
 366:../cleanflight/src/main/io/vtx_tramp.c **** 
 367:../cleanflight/src/main/io/vtx_tramp.c **** void trampQueryS(void)
 368:../cleanflight/src/main/io/vtx_tramp.c **** {
 1784              	 .loc 3 368 0
 1785              	 .cfi_startproc
 1786              	 
 1787              	 
 1788 0000 80B5     	 push {r7,lr}
 1789              	.LCFI118:
 1790              	 .cfi_def_cfa_offset 8
 1791              	 .cfi_offset 7,-8
 1792              	 .cfi_offset 14,-4
 1793 0002 00AF     	 add r7,sp,#0
 1794              	.LCFI119:
 1795              	 .cfi_def_cfa_register 7
 369:../cleanflight/src/main/io/vtx_tramp.c ****     trampQuery('s');
 1796              	 .loc 3 369 0
 1797 0004 7320     	 movs r0,#115
 1798 0006 FFF7FEFF 	 bl trampQuery
 370:../cleanflight/src/main/io/vtx_tramp.c **** }
 1799              	 .loc 3 370 0
 1800 000a 80BD     	 pop {r7,pc}
 1801              	 .cfi_endproc
 1802              	.LFE562:
 1804              	 .section .text.vtxTrampProcess,"ax",%progbits
 1805              	 .align 2
 1806              	 .thumb
 1807              	 .thumb_func
 1809              	vtxTrampProcess:
 1810              	.LFB563:
 371:../cleanflight/src/main/io/vtx_tramp.c **** 
 372:../cleanflight/src/main/io/vtx_tramp.c **** static void vtxTrampProcess(vtxDevice_t *vtxDevice, timeUs_t currentTimeUs)
 373:../cleanflight/src/main/io/vtx_tramp.c **** {
 1811              	 .loc 3 373 0
 1812              	 .cfi_startproc
 1813              	 
 1814              	 
 1815 0000 80B5     	 push {r7,lr}
 1816              	.LCFI120:
 1817              	 .cfi_def_cfa_offset 8
 1818              	 .cfi_offset 7,-8
 1819              	 .cfi_offset 14,-4
 1820 0002 84B0     	 sub sp,sp,#16
 1821              	.LCFI121:
 1822              	 .cfi_def_cfa_offset 24
 1823 0004 00AF     	 add r7,sp,#0
 1824              	.LCFI122:
 1825              	 .cfi_def_cfa_register 7
 1826 0006 7860     	 str r0,[r7,#4]
 1827 0008 3960     	 str r1,[r7]
 374:../cleanflight/src/main/io/vtx_tramp.c ****     UNUSED(vtxDevice);
 375:../cleanflight/src/main/io/vtx_tramp.c **** 
 376:../cleanflight/src/main/io/vtx_tramp.c ****     static timeUs_t lastQueryTimeUs = 0;
 377:../cleanflight/src/main/io/vtx_tramp.c ****     static bool initSettingsDoneFlag = false;
 378:../cleanflight/src/main/io/vtx_tramp.c **** 
 379:../cleanflight/src/main/io/vtx_tramp.c **** #ifdef TRAMP_DEBUG
 380:../cleanflight/src/main/io/vtx_tramp.c ****     static uint16_t debugFreqReqCounter = 0;
 381:../cleanflight/src/main/io/vtx_tramp.c ****     static uint16_t debugPowReqCounter = 0;
 382:../cleanflight/src/main/io/vtx_tramp.c **** #endif
 383:../cleanflight/src/main/io/vtx_tramp.c **** 
 384:../cleanflight/src/main/io/vtx_tramp.c ****     if (trampStatus == TRAMP_STATUS_BAD_DEVICE) {
 1828              	 .loc 3 384 0
 1829 000a 6D4B     	 ldr r3,.L122
 1830 000c 1B78     	 ldrb r3,[r3]
 1831 000e 5BB2     	 sxtb r3,r3
 1832 0010 B3F1FF3F 	 cmp r3,#-1
 1833 0014 00D1     	 bne .L98
 385:../cleanflight/src/main/io/vtx_tramp.c ****         return;
 1834              	 .loc 3 385 0
 1835 0016 CFE0     	 b .L97
 1836              	.L98:
 386:../cleanflight/src/main/io/vtx_tramp.c ****     }
 387:../cleanflight/src/main/io/vtx_tramp.c **** 
 388:../cleanflight/src/main/io/vtx_tramp.c ****     const char replyCode = trampReceive(currentTimeUs);
 1837              	 .loc 3 388 0
 1838 0018 3868     	 ldr r0,[r7]
 1839 001a FFF7FEFF 	 bl trampReceive
 1840 001e 0346     	 mov r3,r0
 1841 0020 BB73     	 strb r3,[r7,#14]
 389:../cleanflight/src/main/io/vtx_tramp.c **** 
 390:../cleanflight/src/main/io/vtx_tramp.c **** #ifdef TRAMP_DEBUG
 391:../cleanflight/src/main/io/vtx_tramp.c ****     debug[0] = trampStatus;
 392:../cleanflight/src/main/io/vtx_tramp.c **** #endif
 393:../cleanflight/src/main/io/vtx_tramp.c **** 
 394:../cleanflight/src/main/io/vtx_tramp.c ****     switch (replyCode) {
 1842              	 .loc 3 394 0
 1843 0022 BB7B     	 ldrb r3,[r7,#14]
 1844 0024 722B     	 cmp r3,#114
 1845 0026 02D0     	 beq .L101
 1846 0028 762B     	 cmp r3,#118
 1847 002a 14D0     	 beq .L102
 1848 002c 1DE0     	 b .L100
 1849              	.L101:
 395:../cleanflight/src/main/io/vtx_tramp.c ****     case 'r':
 396:../cleanflight/src/main/io/vtx_tramp.c ****         if (trampStatus <= TRAMP_STATUS_OFFLINE) {
 1850              	 .loc 3 396 0
 1851 002e 644B     	 ldr r3,.L122
 1852 0030 1B78     	 ldrb r3,[r3]
 1853 0032 5BB2     	 sxtb r3,r3
 1854 0034 002B     	 cmp r3,#0
 1855 0036 0DDC     	 bgt .L103
 397:../cleanflight/src/main/io/vtx_tramp.c ****             trampStatus = TRAMP_STATUS_ONLINE;
 1856              	 .loc 3 397 0
 1857 0038 614B     	 ldr r3,.L122
 1858 003a 0122     	 movs r2,#1
 1859 003c 1A70     	 strb r2,[r3]
 398:../cleanflight/src/main/io/vtx_tramp.c **** 
 399:../cleanflight/src/main/io/vtx_tramp.c ****             // once device is ready enter vtx settings
 400:../cleanflight/src/main/io/vtx_tramp.c ****             if (!initSettingsDoneFlag) {
 1860              	 .loc 3 400 0
 1861 003e 614B     	 ldr r3,.L122+4
 1862 0040 1B78     	 ldrb r3,[r3]
 1863 0042 83F00103 	 eor r3,r3,#1
 1864 0046 DBB2     	 uxtb r3,r3
 1865 0048 002B     	 cmp r3,#0
 1866 004a 03D0     	 beq .L103
 401:../cleanflight/src/main/io/vtx_tramp.c ****                 initSettingsDoneFlag = true;
 1867              	 .loc 3 401 0
 1868 004c 5D4B     	 ldr r3,.L122+4
 1869 004e 0122     	 movs r2,#1
 1870 0050 1A70     	 strb r2,[r3]
 402:../cleanflight/src/main/io/vtx_tramp.c ****                 // if vtx_band!=0 then enter 'vtx_band/chan' values (and power)
 403:../cleanflight/src/main/io/vtx_tramp.c ****             }
 404:../cleanflight/src/main/io/vtx_tramp.c ****         }
 405:../cleanflight/src/main/io/vtx_tramp.c ****         break;
 1871              	 .loc 3 405 0
 1872 0052 0AE0     	 b .L100
 1873              	.L103:
 1874 0054 09E0     	 b .L100
 1875              	.L102:
 406:../cleanflight/src/main/io/vtx_tramp.c **** 
 407:../cleanflight/src/main/io/vtx_tramp.c ****     case 'v':
 408:../cleanflight/src/main/io/vtx_tramp.c ****          if (trampStatus == TRAMP_STATUS_CHECK_FREQ_PW) {
 1876              	 .loc 3 408 0
 1877 0056 5A4B     	 ldr r3,.L122
 1878 0058 1B78     	 ldrb r3,[r3]
 1879 005a 5BB2     	 sxtb r3,r3
 1880 005c 032B     	 cmp r3,#3
 1881 005e 03D1     	 bne .L104
 409:../cleanflight/src/main/io/vtx_tramp.c ****              trampStatus = TRAMP_STATUS_SET_FREQ_PW;
 1882              	 .loc 3 409 0
 1883 0060 574B     	 ldr r3,.L122
 1884 0062 0222     	 movs r2,#2
 1885 0064 1A70     	 strb r2,[r3]
 410:../cleanflight/src/main/io/vtx_tramp.c ****          }
 411:../cleanflight/src/main/io/vtx_tramp.c ****          break;
 1886              	 .loc 3 411 0
 1887 0066 FFE7     	 b .L120
 1888              	.L104:
 1889              	.L120:
 1890 0068 00BF     	 nop
 1891              	.L100:
 412:../cleanflight/src/main/io/vtx_tramp.c ****     }
 413:../cleanflight/src/main/io/vtx_tramp.c **** 
 414:../cleanflight/src/main/io/vtx_tramp.c ****     switch (trampStatus) {
 1892              	 .loc 3 414 0
 1893 006a 554B     	 ldr r3,.L122
 1894 006c 1B78     	 ldrb r3,[r3]
 1895 006e 5BB2     	 sxtb r3,r3
 1896 0070 032B     	 cmp r3,#3
 1897 0072 00F29E80 	 bhi .L121
 1898 0076 01A2     	 adr r2,.L107
 1899 0078 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1900              	 .p2align 2
 1901              	.L107:
 1902 007c 8D000000 	 .word .L106+1
 1903 0080 8D000000 	 .word .L106+1
 1904 0084 D5000000 	 .word .L108+1
 1905 0088 91010000 	 .word .L109+1
 1906              	 .p2align 1
 1907              	.L106:
 415:../cleanflight/src/main/io/vtx_tramp.c **** 
 416:../cleanflight/src/main/io/vtx_tramp.c ****     case TRAMP_STATUS_OFFLINE:
 417:../cleanflight/src/main/io/vtx_tramp.c ****     case TRAMP_STATUS_ONLINE:
 418:../cleanflight/src/main/io/vtx_tramp.c ****         if (cmp32(currentTimeUs, lastQueryTimeUs) > 1000 * 1000) { // 1s
 1908              	 .loc 3 418 0
 1909 008c 4E4B     	 ldr r3,.L122+8
 1910 008e 1B68     	 ldr r3,[r3]
 1911 0090 3868     	 ldr r0,[r7]
 1912 0092 1946     	 mov r1,r3
 1913 0094 FFF7FEFF 	 bl cmp32
 1914 0098 0246     	 mov r2,r0
 1915 009a 4C4B     	 ldr r3,.L122+12
 1916 009c 9A42     	 cmp r2,r3
 1917 009e 18DD     	 ble .L110
 419:../cleanflight/src/main/io/vtx_tramp.c **** 
 420:../cleanflight/src/main/io/vtx_tramp.c ****             if (trampStatus == TRAMP_STATUS_OFFLINE) {
 1918              	 .loc 3 420 0
 1919 00a0 474B     	 ldr r3,.L122
 1920 00a2 1B78     	 ldrb r3,[r3]
 1921 00a4 002B     	 cmp r3,#0
 1922 00a6 02D1     	 bne .L111
 421:../cleanflight/src/main/io/vtx_tramp.c ****                 trampQueryR();
 1923              	 .loc 3 421 0
 1924 00a8 FFF7FEFF 	 bl trampQueryR
 1925 00ac 0DE0     	 b .L112
 1926              	.L111:
 1927              	.LBB8:
 422:../cleanflight/src/main/io/vtx_tramp.c ****             } else {
 423:../cleanflight/src/main/io/vtx_tramp.c ****                 static unsigned int cnt = 0;
 424:../cleanflight/src/main/io/vtx_tramp.c ****                 if (((cnt++) & 1) == 0) {
 1928              	 .loc 3 424 0
 1929 00ae 484B     	 ldr r3,.L122+16
 1930 00b0 1B68     	 ldr r3,[r3]
 1931 00b2 5A1C     	 adds r2,r3,#1
 1932 00b4 4649     	 ldr r1,.L122+16
 1933 00b6 0A60     	 str r2,[r1]
 1934 00b8 03F00103 	 and r3,r3,#1
 1935 00bc 002B     	 cmp r3,#0
 1936 00be 02D1     	 bne .L113
 425:../cleanflight/src/main/io/vtx_tramp.c ****                     trampQueryV();
 1937              	 .loc 3 425 0
 1938 00c0 FFF7FEFF 	 bl trampQueryV
 1939 00c4 01E0     	 b .L112
 1940              	.L113:
 426:../cleanflight/src/main/io/vtx_tramp.c ****                 } else {
 427:../cleanflight/src/main/io/vtx_tramp.c ****                     trampQueryS();
 1941              	 .loc 3 427 0
 1942 00c6 FFF7FEFF 	 bl trampQueryS
 1943              	.L112:
 1944              	.LBE8:
 428:../cleanflight/src/main/io/vtx_tramp.c ****                 }
 429:../cleanflight/src/main/io/vtx_tramp.c ****             }
 430:../cleanflight/src/main/io/vtx_tramp.c **** 
 431:../cleanflight/src/main/io/vtx_tramp.c ****             lastQueryTimeUs = currentTimeUs;
 1945              	 .loc 3 431 0
 1946 00ca 3F4A     	 ldr r2,.L122+8
 1947 00cc 3B68     	 ldr r3,[r7]
 1948 00ce 1360     	 str r3,[r2]
 432:../cleanflight/src/main/io/vtx_tramp.c ****         }
 433:../cleanflight/src/main/io/vtx_tramp.c ****         break;
 1949              	 .loc 3 433 0
 1950 00d0 70E0     	 b .L114
 1951              	.L110:
 1952 00d2 6FE0     	 b .L114
 1953              	.L108:
 1954              	.LBB9:
 434:../cleanflight/src/main/io/vtx_tramp.c **** 
 435:../cleanflight/src/main/io/vtx_tramp.c ****     case TRAMP_STATUS_SET_FREQ_PW:
 436:../cleanflight/src/main/io/vtx_tramp.c ****         {
 437:../cleanflight/src/main/io/vtx_tramp.c ****             bool done = true;
 1955              	 .loc 3 437 0
 1956 00d4 0123     	 movs r3,#1
 1957 00d6 FB73     	 strb r3,[r7,#15]
 438:../cleanflight/src/main/io/vtx_tramp.c ****             if (trampConfFreq && trampFreqRetries && (trampConfFreq != trampCurFreq)) {
 1958              	 .loc 3 438 0
 1959 00d8 3E4B     	 ldr r3,.L122+20
 1960 00da 1B68     	 ldr r3,[r3]
 1961 00dc 002B     	 cmp r3,#0
 1962 00de 18D0     	 beq .L115
 1963              	 .loc 3 438 0 is_stmt 0 discriminator 1
 1964 00e0 3D4B     	 ldr r3,.L122+24
 1965 00e2 1B78     	 ldrb r3,[r3]
 1966 00e4 002B     	 cmp r3,#0
 1967 00e6 14D0     	 beq .L115
 1968              	 .loc 3 438 0 discriminator 2
 1969 00e8 3A4B     	 ldr r3,.L122+20
 1970 00ea 1A68     	 ldr r2,[r3]
 1971 00ec 3B4B     	 ldr r3,.L122+28
 1972 00ee 1B68     	 ldr r3,[r3]
 1973 00f0 9A42     	 cmp r2,r3
 1974 00f2 0ED0     	 beq .L115
 439:../cleanflight/src/main/io/vtx_tramp.c ****                 trampSendFreq(trampConfFreq);
 1975              	 .loc 3 439 0 is_stmt 1
 1976 00f4 374B     	 ldr r3,.L122+20
 1977 00f6 1B68     	 ldr r3,[r3]
 1978 00f8 9BB2     	 uxth r3,r3
 1979 00fa 1846     	 mov r0,r3
 1980 00fc FFF7FEFF 	 bl trampSendFreq
 440:../cleanflight/src/main/io/vtx_tramp.c ****                 trampFreqRetries--;
 1981              	 .loc 3 440 0
 1982 0100 354B     	 ldr r3,.L122+24
 1983 0102 1B78     	 ldrb r3,[r3]
 1984 0104 013B     	 subs r3,r3,#1
 1985 0106 DAB2     	 uxtb r2,r3
 1986 0108 334B     	 ldr r3,.L122+24
 1987 010a 1A70     	 strb r2,[r3]
 441:../cleanflight/src/main/io/vtx_tramp.c **** #ifdef TRAMP_DEBUG
 442:../cleanflight/src/main/io/vtx_tramp.c ****                 debugFreqReqCounter++;
 443:../cleanflight/src/main/io/vtx_tramp.c **** #endif
 444:../cleanflight/src/main/io/vtx_tramp.c ****                 done = false;
 1988              	 .loc 3 444 0
 1989 010c 0023     	 movs r3,#0
 1990 010e FB73     	 strb r3,[r7,#15]
 1991 0110 1AE0     	 b .L116
 1992              	.L115:
 445:../cleanflight/src/main/io/vtx_tramp.c ****             } else if (trampConfPower && trampPowerRetries && (trampConfPower != trampConfiguredPow
 1993              	 .loc 3 445 0
 1994 0112 334B     	 ldr r3,.L122+32
 1995 0114 1B88     	 ldrh r3,[r3]
 1996 0116 002B     	 cmp r3,#0
 1997 0118 16D0     	 beq .L116
 1998              	 .loc 3 445 0 is_stmt 0 discriminator 1
 1999 011a 324B     	 ldr r3,.L122+36
 2000 011c 1B78     	 ldrb r3,[r3]
 2001 011e 002B     	 cmp r3,#0
 2002 0120 12D0     	 beq .L116
 2003              	 .loc 3 445 0 discriminator 2
 2004 0122 2F4B     	 ldr r3,.L122+32
 2005 0124 1A88     	 ldrh r2,[r3]
 2006 0126 304B     	 ldr r3,.L122+40
 2007 0128 1B88     	 ldrh r3,[r3]
 2008 012a 9A42     	 cmp r2,r3
 2009 012c 0CD0     	 beq .L116
 446:../cleanflight/src/main/io/vtx_tramp.c ****                 trampSendRFPower(trampConfPower);
 2010              	 .loc 3 446 0 is_stmt 1
 2011 012e 2C4B     	 ldr r3,.L122+32
 2012 0130 1B88     	 ldrh r3,[r3]
 2013 0132 1846     	 mov r0,r3
 2014 0134 FFF7FEFF 	 bl trampSendRFPower
 447:../cleanflight/src/main/io/vtx_tramp.c ****                 trampPowerRetries--;
 2015              	 .loc 3 447 0
 2016 0138 2A4B     	 ldr r3,.L122+36
 2017 013a 1B78     	 ldrb r3,[r3]
 2018 013c 013B     	 subs r3,r3,#1
 2019 013e DAB2     	 uxtb r2,r3
 2020 0140 284B     	 ldr r3,.L122+36
 2021 0142 1A70     	 strb r2,[r3]
 448:../cleanflight/src/main/io/vtx_tramp.c **** #ifdef TRAMP_DEBUG
 449:../cleanflight/src/main/io/vtx_tramp.c ****                 debugPowReqCounter++;
 450:../cleanflight/src/main/io/vtx_tramp.c **** #endif
 451:../cleanflight/src/main/io/vtx_tramp.c ****                 done = false;
 2022              	 .loc 3 451 0
 2023 0144 0023     	 movs r3,#0
 2024 0146 FB73     	 strb r3,[r7,#15]
 2025              	.L116:
 452:../cleanflight/src/main/io/vtx_tramp.c ****             }
 453:../cleanflight/src/main/io/vtx_tramp.c **** 
 454:../cleanflight/src/main/io/vtx_tramp.c ****             if (!done) {
 2026              	 .loc 3 454 0
 2027 0148 FB7B     	 ldrb r3,[r7,#15]
 2028 014a 83F00103 	 eor r3,r3,#1
 2029 014e DBB2     	 uxtb r3,r3
 2030 0150 002B     	 cmp r3,#0
 2031 0152 0AD0     	 beq .L117
 455:../cleanflight/src/main/io/vtx_tramp.c ****                 trampStatus = TRAMP_STATUS_CHECK_FREQ_PW;
 2032              	 .loc 3 455 0
 2033 0154 1A4B     	 ldr r3,.L122
 2034 0156 0322     	 movs r2,#3
 2035 0158 1A70     	 strb r2,[r3]
 456:../cleanflight/src/main/io/vtx_tramp.c **** 
 457:../cleanflight/src/main/io/vtx_tramp.c ****                 // delay next status query by 300ms
 458:../cleanflight/src/main/io/vtx_tramp.c ****                 lastQueryTimeUs = currentTimeUs + 300 * 1000;
 2036              	 .loc 3 458 0
 2037 015a 3B68     	 ldr r3,[r7]
 2038 015c 03F59223 	 add r3,r3,#299008
 2039 0160 03F57873 	 add r3,r3,#992
 2040 0164 184A     	 ldr r2,.L122+8
 2041 0166 1360     	 str r3,[r2]
 2042              	.LBE9:
 459:../cleanflight/src/main/io/vtx_tramp.c ****             } else {
 460:../cleanflight/src/main/io/vtx_tramp.c ****                 // everything has been done, let's return to original state
 461:../cleanflight/src/main/io/vtx_tramp.c ****                 trampStatus = TRAMP_STATUS_ONLINE;
 462:../cleanflight/src/main/io/vtx_tramp.c ****                 // reset configuration value in case it failed (no more retries)
 463:../cleanflight/src/main/io/vtx_tramp.c ****                 trampConfFreq  = trampCurFreq;
 464:../cleanflight/src/main/io/vtx_tramp.c ****                 trampConfPower = trampPower;
 465:../cleanflight/src/main/io/vtx_tramp.c ****                 trampFreqRetries = trampPowerRetries = 0;
 466:../cleanflight/src/main/io/vtx_tramp.c ****             }
 467:../cleanflight/src/main/io/vtx_tramp.c ****         }
 468:../cleanflight/src/main/io/vtx_tramp.c ****         break;
 2043              	 .loc 3 468 0
 2044 0168 24E0     	 b .L114
 2045              	.L117:
 2046              	.LBB10:
 461:../cleanflight/src/main/io/vtx_tramp.c ****                 // reset configuration value in case it failed (no more retries)
 2047              	 .loc 3 461 0
 2048 016a 154B     	 ldr r3,.L122
 2049 016c 0122     	 movs r2,#1
 2050 016e 1A70     	 strb r2,[r3]
 463:../cleanflight/src/main/io/vtx_tramp.c ****                 trampConfPower = trampPower;
 2051              	 .loc 3 463 0
 2052 0170 1A4B     	 ldr r3,.L122+28
 2053 0172 1B68     	 ldr r3,[r3]
 2054 0174 174A     	 ldr r2,.L122+20
 2055 0176 1360     	 str r3,[r2]
 464:../cleanflight/src/main/io/vtx_tramp.c ****                 trampFreqRetries = trampPowerRetries = 0;
 2056              	 .loc 3 464 0
 2057 0178 1C4B     	 ldr r3,.L122+44
 2058 017a 1A88     	 ldrh r2,[r3]
 2059 017c 184B     	 ldr r3,.L122+32
 2060 017e 1A80     	 strh r2,[r3]
 465:../cleanflight/src/main/io/vtx_tramp.c ****             }
 2061              	 .loc 3 465 0
 2062 0180 184B     	 ldr r3,.L122+36
 2063 0182 0022     	 movs r2,#0
 2064 0184 1A70     	 strb r2,[r3]
 2065 0186 174B     	 ldr r3,.L122+36
 2066 0188 1A78     	 ldrb r2,[r3]
 2067 018a 134B     	 ldr r3,.L122+24
 2068 018c 1A70     	 strb r2,[r3]
 2069              	.LBE10:
 2070              	 .loc 3 468 0
 2071 018e 11E0     	 b .L114
 2072              	.L109:
 469:../cleanflight/src/main/io/vtx_tramp.c **** 
 470:../cleanflight/src/main/io/vtx_tramp.c ****     case TRAMP_STATUS_CHECK_FREQ_PW:
 471:../cleanflight/src/main/io/vtx_tramp.c ****         if (cmp32(currentTimeUs, lastQueryTimeUs) > 200 * 1000) {
 2073              	 .loc 3 471 0
 2074 0190 0D4B     	 ldr r3,.L122+8
 2075 0192 1B68     	 ldr r3,[r3]
 2076 0194 3868     	 ldr r0,[r7]
 2077 0196 1946     	 mov r1,r3
 2078 0198 FFF7FEFF 	 bl cmp32
 2079 019c 0246     	 mov r2,r0
 2080 019e 144B     	 ldr r3,.L122+48
 2081 01a0 9A42     	 cmp r2,r3
 2082 01a2 05DD     	 ble .L119
 472:../cleanflight/src/main/io/vtx_tramp.c ****             trampQueryV();
 2083              	 .loc 3 472 0
 2084 01a4 FFF7FEFF 	 bl trampQueryV
 473:../cleanflight/src/main/io/vtx_tramp.c ****             lastQueryTimeUs = currentTimeUs;
 2085              	 .loc 3 473 0
 2086 01a8 074A     	 ldr r2,.L122+8
 2087 01aa 3B68     	 ldr r3,[r7]
 2088 01ac 1360     	 str r3,[r2]
 474:../cleanflight/src/main/io/vtx_tramp.c ****         }
 475:../cleanflight/src/main/io/vtx_tramp.c ****         break;
 2089              	 .loc 3 475 0
 2090 01ae 01E0     	 b .L114
 2091              	.L119:
 2092 01b0 00E0     	 b .L114
 2093              	.L121:
 476:../cleanflight/src/main/io/vtx_tramp.c **** 
 477:../cleanflight/src/main/io/vtx_tramp.c ****     default:
 478:../cleanflight/src/main/io/vtx_tramp.c ****         break;
 2094              	 .loc 3 478 0
 2095 01b2 00BF     	 nop
 2096              	.L114:
 479:../cleanflight/src/main/io/vtx_tramp.c ****     }
 480:../cleanflight/src/main/io/vtx_tramp.c **** 
 481:../cleanflight/src/main/io/vtx_tramp.c **** #ifdef TRAMP_DEBUG
 482:../cleanflight/src/main/io/vtx_tramp.c ****     debug[1] = debugFreqReqCounter;
 483:../cleanflight/src/main/io/vtx_tramp.c ****     debug[2] = debugPowReqCounter;
 484:../cleanflight/src/main/io/vtx_tramp.c ****     debug[3] = 0;
 485:../cleanflight/src/main/io/vtx_tramp.c **** #endif
 486:../cleanflight/src/main/io/vtx_tramp.c **** 
 487:../cleanflight/src/main/io/vtx_tramp.c **** #ifdef USE_CMS
 488:../cleanflight/src/main/io/vtx_tramp.c ****     trampCmsUpdateStatusString();
 2097              	 .loc 3 488 0
 2098 01b4 FFF7FEFF 	 bl trampCmsUpdateStatusString
 2099              	.L97:
 489:../cleanflight/src/main/io/vtx_tramp.c **** #endif
 490:../cleanflight/src/main/io/vtx_tramp.c **** }
 2100              	 .loc 3 490 0
 2101 01b8 1037     	 adds r7,r7,#16
 2102              	.LCFI123:
 2103              	 .cfi_def_cfa_offset 8
 2104 01ba BD46     	 mov sp,r7
 2105              	.LCFI124:
 2106              	 .cfi_def_cfa_register 13
 2107              	 
 2108 01bc 80BD     	 pop {r7,pc}
 2109              	.L123:
 2110 01be 00BF     	 .align 2
 2111              	.L122:
 2112 01c0 00000000 	 .word trampStatus
 2113 01c4 00000000 	 .word initSettingsDoneFlag.12738
 2114 01c8 00000000 	 .word lastQueryTimeUs.12737
 2115 01cc 40420F00 	 .word 1000000
 2116 01d0 00000000 	 .word cnt.12745
 2117 01d4 00000000 	 .word trampConfFreq
 2118 01d8 00000000 	 .word trampFreqRetries
 2119 01dc 00000000 	 .word trampCurFreq
 2120 01e0 00000000 	 .word trampConfPower
 2121 01e4 00000000 	 .word trampPowerRetries
 2122 01e8 00000000 	 .word trampConfiguredPower
 2123 01ec 00000000 	 .word trampPower
 2124 01f0 400D0300 	 .word 200000
 2125              	 .cfi_endproc
 2126              	.LFE563:
 2128              	 .section .text.vtxTrampGetDeviceType,"ax",%progbits
 2129              	 .align 2
 2130              	 .thumb
 2131              	 .thumb_func
 2133              	vtxTrampGetDeviceType:
 2134              	.LFB564:
 491:../cleanflight/src/main/io/vtx_tramp.c **** 
 492:../cleanflight/src/main/io/vtx_tramp.c **** 
 493:../cleanflight/src/main/io/vtx_tramp.c **** #ifdef USE_VTX_COMMON
 494:../cleanflight/src/main/io/vtx_tramp.c **** 
 495:../cleanflight/src/main/io/vtx_tramp.c **** // Interface to common VTX API
 496:../cleanflight/src/main/io/vtx_tramp.c **** 
 497:../cleanflight/src/main/io/vtx_tramp.c **** static vtxDevType_e vtxTrampGetDeviceType(const vtxDevice_t *vtxDevice)
 498:../cleanflight/src/main/io/vtx_tramp.c **** {
 2135              	 .loc 3 498 0
 2136              	 .cfi_startproc
 2137              	 
 2138              	 
 2139              	 
 2140 0000 80B4     	 push {r7}
 2141              	.LCFI125:
 2142              	 .cfi_def_cfa_offset 4
 2143              	 .cfi_offset 7,-4
 2144 0002 83B0     	 sub sp,sp,#12
 2145              	.LCFI126:
 2146              	 .cfi_def_cfa_offset 16
 2147 0004 00AF     	 add r7,sp,#0
 2148              	.LCFI127:
 2149              	 .cfi_def_cfa_register 7
 2150 0006 7860     	 str r0,[r7,#4]
 499:../cleanflight/src/main/io/vtx_tramp.c ****     UNUSED(vtxDevice);
 500:../cleanflight/src/main/io/vtx_tramp.c ****     return VTXDEV_TRAMP;
 2151              	 .loc 3 500 0
 2152 0008 0423     	 movs r3,#4
 501:../cleanflight/src/main/io/vtx_tramp.c **** }
 2153              	 .loc 3 501 0
 2154 000a 1846     	 mov r0,r3
 2155 000c 0C37     	 adds r7,r7,#12
 2156              	.LCFI128:
 2157              	 .cfi_def_cfa_offset 4
 2158 000e BD46     	 mov sp,r7
 2159              	.LCFI129:
 2160              	 .cfi_def_cfa_register 13
 2161              	 
 2162 0010 5DF8047B 	 ldr r7,[sp],#4
 2163              	.LCFI130:
 2164              	 .cfi_restore 7
 2165              	 .cfi_def_cfa_offset 0
 2166 0014 7047     	 bx lr
 2167              	 .cfi_endproc
 2168              	.LFE564:
 2170 0016 00BF     	 .section .text.vtxTrampIsReady,"ax",%progbits
 2171              	 .align 2
 2172              	 .thumb
 2173              	 .thumb_func
 2175              	vtxTrampIsReady:
 2176              	.LFB565:
 502:../cleanflight/src/main/io/vtx_tramp.c **** 
 503:../cleanflight/src/main/io/vtx_tramp.c **** static bool vtxTrampIsReady(const vtxDevice_t *vtxDevice)
 504:../cleanflight/src/main/io/vtx_tramp.c **** {
 2177              	 .loc 3 504 0
 2178              	 .cfi_startproc
 2179              	 
 2180              	 
 2181              	 
 2182 0000 80B4     	 push {r7}
 2183              	.LCFI131:
 2184              	 .cfi_def_cfa_offset 4
 2185              	 .cfi_offset 7,-4
 2186 0002 83B0     	 sub sp,sp,#12
 2187              	.LCFI132:
 2188              	 .cfi_def_cfa_offset 16
 2189 0004 00AF     	 add r7,sp,#0
 2190              	.LCFI133:
 2191              	 .cfi_def_cfa_register 7
 2192 0006 7860     	 str r0,[r7,#4]
 505:../cleanflight/src/main/io/vtx_tramp.c ****     return vtxDevice!=NULL && trampStatus > TRAMP_STATUS_OFFLINE;
 2193              	 .loc 3 505 0
 2194 0008 7B68     	 ldr r3,[r7,#4]
 2195 000a 002B     	 cmp r3,#0
 2196 000c 06D0     	 beq .L127
 2197              	 .loc 3 505 0 is_stmt 0 discriminator 1
 2198 000e 084B     	 ldr r3,.L130
 2199 0010 1B78     	 ldrb r3,[r3]
 2200 0012 5BB2     	 sxtb r3,r3
 2201 0014 002B     	 cmp r3,#0
 2202 0016 01DD     	 ble .L127
 2203              	 .loc 3 505 0 discriminator 3
 2204 0018 0123     	 movs r3,#1
 2205 001a 00E0     	 b .L128
 2206              	.L127:
 2207              	 .loc 3 505 0 discriminator 4
 2208 001c 0023     	 movs r3,#0
 2209              	.L128:
 2210              	 .loc 3 505 0 discriminator 6
 2211 001e 03F00103 	 and r3,r3,#1
 2212 0022 DBB2     	 uxtb r3,r3
 506:../cleanflight/src/main/io/vtx_tramp.c **** }
 2213              	 .loc 3 506 0 is_stmt 1 discriminator 6
 2214 0024 1846     	 mov r0,r3
 2215 0026 0C37     	 adds r7,r7,#12
 2216              	.LCFI134:
 2217              	 .cfi_def_cfa_offset 4
 2218 0028 BD46     	 mov sp,r7
 2219              	.LCFI135:
 2220              	 .cfi_def_cfa_register 13
 2221              	 
 2222 002a 5DF8047B 	 ldr r7,[sp],#4
 2223              	.LCFI136:
 2224              	 .cfi_restore 7
 2225              	 .cfi_def_cfa_offset 0
 2226 002e 7047     	 bx lr
 2227              	.L131:
 2228              	 .align 2
 2229              	.L130:
 2230 0030 00000000 	 .word trampStatus
 2231              	 .cfi_endproc
 2232              	.LFE565:
 2234              	 .section .text.vtxTrampSetBandAndChannel,"ax",%progbits
 2235              	 .align 2
 2236              	 .thumb
 2237              	 .thumb_func
 2239              	vtxTrampSetBandAndChannel:
 2240              	.LFB566:
 507:../cleanflight/src/main/io/vtx_tramp.c **** 
 508:../cleanflight/src/main/io/vtx_tramp.c **** static void vtxTrampSetBandAndChannel(vtxDevice_t *vtxDevice, uint8_t band, uint8_t channel)
 509:../cleanflight/src/main/io/vtx_tramp.c **** {
 2241              	 .loc 3 509 0
 2242              	 .cfi_startproc
 2243              	 
 2244              	 
 2245 0000 80B5     	 push {r7,lr}
 2246              	.LCFI137:
 2247              	 .cfi_def_cfa_offset 8
 2248              	 .cfi_offset 7,-8
 2249              	 .cfi_offset 14,-4
 2250 0002 82B0     	 sub sp,sp,#8
 2251              	.LCFI138:
 2252              	 .cfi_def_cfa_offset 16
 2253 0004 00AF     	 add r7,sp,#0
 2254              	.LCFI139:
 2255              	 .cfi_def_cfa_register 7
 2256 0006 7860     	 str r0,[r7,#4]
 2257 0008 0B46     	 mov r3,r1
 2258 000a FB70     	 strb r3,[r7,#3]
 2259 000c 1346     	 mov r3,r2
 2260 000e BB70     	 strb r3,[r7,#2]
 510:../cleanflight/src/main/io/vtx_tramp.c ****     UNUSED(vtxDevice);
 511:../cleanflight/src/main/io/vtx_tramp.c ****     if (trampValidateBandAndChannel(band, channel)) {
 2261              	 .loc 3 511 0
 2262 0010 FA78     	 ldrb r2,[r7,#3]
 2263 0012 BB78     	 ldrb r3,[r7,#2]
 2264 0014 1046     	 mov r0,r2
 2265 0016 1946     	 mov r1,r3
 2266 0018 FFF7FEFF 	 bl trampValidateBandAndChannel
 2267 001c 0346     	 mov r3,r0
 2268 001e 002B     	 cmp r3,#0
 2269 0020 07D0     	 beq .L132
 512:../cleanflight/src/main/io/vtx_tramp.c ****         trampSetBandAndChannel(band, channel);
 2270              	 .loc 3 512 0
 2271 0022 FA78     	 ldrb r2,[r7,#3]
 2272 0024 BB78     	 ldrb r3,[r7,#2]
 2273 0026 1046     	 mov r0,r2
 2274 0028 1946     	 mov r1,r3
 2275 002a FFF7FEFF 	 bl trampSetBandAndChannel
 513:../cleanflight/src/main/io/vtx_tramp.c ****         trampCommitChanges();
 2276              	 .loc 3 513 0
 2277 002e FFF7FEFF 	 bl trampCommitChanges
 2278              	.L132:
 514:../cleanflight/src/main/io/vtx_tramp.c ****     }
 515:../cleanflight/src/main/io/vtx_tramp.c **** }
 2279              	 .loc 3 515 0
 2280 0032 0837     	 adds r7,r7,#8
 2281              	.LCFI140:
 2282              	 .cfi_def_cfa_offset 8
 2283 0034 BD46     	 mov sp,r7
 2284              	.LCFI141:
 2285              	 .cfi_def_cfa_register 13
 2286              	 
 2287 0036 80BD     	 pop {r7,pc}
 2288              	 .cfi_endproc
 2289              	.LFE566:
 2291              	 .section .text.vtxTrampSetPowerByIndex,"ax",%progbits
 2292              	 .align 2
 2293              	 .thumb
 2294              	 .thumb_func
 2296              	vtxTrampSetPowerByIndex:
 2297              	.LFB567:
 516:../cleanflight/src/main/io/vtx_tramp.c **** 
 517:../cleanflight/src/main/io/vtx_tramp.c **** static void vtxTrampSetPowerByIndex(vtxDevice_t *vtxDevice, uint8_t index)
 518:../cleanflight/src/main/io/vtx_tramp.c **** {
 2298              	 .loc 3 518 0
 2299              	 .cfi_startproc
 2300              	 
 2301              	 
 2302 0000 80B5     	 push {r7,lr}
 2303              	.LCFI142:
 2304              	 .cfi_def_cfa_offset 8
 2305              	 .cfi_offset 7,-8
 2306              	 .cfi_offset 14,-4
 2307 0002 82B0     	 sub sp,sp,#8
 2308              	.LCFI143:
 2309              	 .cfi_def_cfa_offset 16
 2310 0004 00AF     	 add r7,sp,#0
 2311              	.LCFI144:
 2312              	 .cfi_def_cfa_register 7
 2313 0006 7860     	 str r0,[r7,#4]
 2314 0008 0B46     	 mov r3,r1
 2315 000a FB70     	 strb r3,[r7,#3]
 519:../cleanflight/src/main/io/vtx_tramp.c ****     UNUSED(vtxDevice);
 520:../cleanflight/src/main/io/vtx_tramp.c ****     trampDevSetPowerByIndex(index);
 2316              	 .loc 3 520 0
 2317 000c FB78     	 ldrb r3,[r7,#3]
 2318 000e 1846     	 mov r0,r3
 2319 0010 FFF7FEFF 	 bl trampDevSetPowerByIndex
 521:../cleanflight/src/main/io/vtx_tramp.c **** }
 2320              	 .loc 3 521 0
 2321 0014 0837     	 adds r7,r7,#8
 2322              	.LCFI145:
 2323              	 .cfi_def_cfa_offset 8
 2324 0016 BD46     	 mov sp,r7
 2325              	.LCFI146:
 2326              	 .cfi_def_cfa_register 13
 2327              	 
 2328 0018 80BD     	 pop {r7,pc}
 2329              	 .cfi_endproc
 2330              	.LFE567:
 2332 001a 00BF     	 .section .text.vtxTrampSetPitMode,"ax",%progbits
 2333              	 .align 2
 2334              	 .thumb
 2335              	 .thumb_func
 2337              	vtxTrampSetPitMode:
 2338              	.LFB568:
 522:../cleanflight/src/main/io/vtx_tramp.c **** 
 523:../cleanflight/src/main/io/vtx_tramp.c **** static void vtxTrampSetPitMode(vtxDevice_t *vtxDevice, uint8_t onoff)
 524:../cleanflight/src/main/io/vtx_tramp.c **** {
 2339              	 .loc 3 524 0
 2340              	 .cfi_startproc
 2341              	 
 2342              	 
 2343 0000 80B5     	 push {r7,lr}
 2344              	.LCFI147:
 2345              	 .cfi_def_cfa_offset 8
 2346              	 .cfi_offset 7,-8
 2347              	 .cfi_offset 14,-4
 2348 0002 82B0     	 sub sp,sp,#8
 2349              	.LCFI148:
 2350              	 .cfi_def_cfa_offset 16
 2351 0004 00AF     	 add r7,sp,#0
 2352              	.LCFI149:
 2353              	 .cfi_def_cfa_register 7
 2354 0006 7860     	 str r0,[r7,#4]
 2355 0008 0B46     	 mov r3,r1
 2356 000a FB70     	 strb r3,[r7,#3]
 525:../cleanflight/src/main/io/vtx_tramp.c ****     UNUSED(vtxDevice);
 526:../cleanflight/src/main/io/vtx_tramp.c ****     trampSetPitMode(onoff);
 2357              	 .loc 3 526 0
 2358 000c FB78     	 ldrb r3,[r7,#3]
 2359 000e 1846     	 mov r0,r3
 2360 0010 FFF7FEFF 	 bl trampSetPitMode
 527:../cleanflight/src/main/io/vtx_tramp.c **** }
 2361              	 .loc 3 527 0
 2362 0014 0837     	 adds r7,r7,#8
 2363              	.LCFI150:
 2364              	 .cfi_def_cfa_offset 8
 2365 0016 BD46     	 mov sp,r7
 2366              	.LCFI151:
 2367              	 .cfi_def_cfa_register 13
 2368              	 
 2369 0018 80BD     	 pop {r7,pc}
 2370              	 .cfi_endproc
 2371              	.LFE568:
 2373 001a 00BF     	 .section .text.vtxTrampSetFreq,"ax",%progbits
 2374              	 .align 2
 2375              	 .thumb
 2376              	 .thumb_func
 2378              	vtxTrampSetFreq:
 2379              	.LFB569:
 528:../cleanflight/src/main/io/vtx_tramp.c **** 
 529:../cleanflight/src/main/io/vtx_tramp.c **** static void vtxTrampSetFreq(vtxDevice_t *vtxDevice, uint16_t freq)
 530:../cleanflight/src/main/io/vtx_tramp.c **** {
 2380              	 .loc 3 530 0
 2381              	 .cfi_startproc
 2382              	 
 2383              	 
 2384 0000 80B5     	 push {r7,lr}
 2385              	.LCFI152:
 2386              	 .cfi_def_cfa_offset 8
 2387              	 .cfi_offset 7,-8
 2388              	 .cfi_offset 14,-4
 2389 0002 82B0     	 sub sp,sp,#8
 2390              	.LCFI153:
 2391              	 .cfi_def_cfa_offset 16
 2392 0004 00AF     	 add r7,sp,#0
 2393              	.LCFI154:
 2394              	 .cfi_def_cfa_register 7
 2395 0006 7860     	 str r0,[r7,#4]
 2396 0008 0B46     	 mov r3,r1
 2397 000a 7B80     	 strh r3,[r7,#2]
 531:../cleanflight/src/main/io/vtx_tramp.c ****     UNUSED(vtxDevice);
 532:../cleanflight/src/main/io/vtx_tramp.c ****     if (trampValidateFreq(freq)) {
 2398              	 .loc 3 532 0
 2399 000c 7B88     	 ldrh r3,[r7,#2]
 2400 000e 1846     	 mov r0,r3
 2401 0010 FFF7FEFF 	 bl trampValidateFreq
 2402 0014 0346     	 mov r3,r0
 2403 0016 002B     	 cmp r3,#0
 2404 0018 05D0     	 beq .L136
 533:../cleanflight/src/main/io/vtx_tramp.c ****         trampSetFreq(freq);
 2405              	 .loc 3 533 0
 2406 001a 7B88     	 ldrh r3,[r7,#2]
 2407 001c 1846     	 mov r0,r3
 2408 001e FFF7FEFF 	 bl trampSetFreq
 534:../cleanflight/src/main/io/vtx_tramp.c ****         trampCommitChanges();
 2409              	 .loc 3 534 0
 2410 0022 FFF7FEFF 	 bl trampCommitChanges
 2411              	.L136:
 535:../cleanflight/src/main/io/vtx_tramp.c ****     }
 536:../cleanflight/src/main/io/vtx_tramp.c **** }
 2412              	 .loc 3 536 0
 2413 0026 0837     	 adds r7,r7,#8
 2414              	.LCFI155:
 2415              	 .cfi_def_cfa_offset 8
 2416 0028 BD46     	 mov sp,r7
 2417              	.LCFI156:
 2418              	 .cfi_def_cfa_register 13
 2419              	 
 2420 002a 80BD     	 pop {r7,pc}
 2421              	 .cfi_endproc
 2422              	.LFE569:
 2424              	 .section .text.vtxTrampGetBandAndChannel,"ax",%progbits
 2425              	 .align 2
 2426              	 .thumb
 2427              	 .thumb_func
 2429              	vtxTrampGetBandAndChannel:
 2430              	.LFB570:
 537:../cleanflight/src/main/io/vtx_tramp.c **** 
 538:../cleanflight/src/main/io/vtx_tramp.c **** static bool vtxTrampGetBandAndChannel(const vtxDevice_t *vtxDevice, uint8_t *pBand, uint8_t *pChann
 539:../cleanflight/src/main/io/vtx_tramp.c **** {
 2431              	 .loc 3 539 0
 2432              	 .cfi_startproc
 2433              	 
 2434              	 
 2435 0000 80B5     	 push {r7,lr}
 2436              	.LCFI157:
 2437              	 .cfi_def_cfa_offset 8
 2438              	 .cfi_offset 7,-8
 2439              	 .cfi_offset 14,-4
 2440 0002 84B0     	 sub sp,sp,#16
 2441              	.LCFI158:
 2442              	 .cfi_def_cfa_offset 24
 2443 0004 00AF     	 add r7,sp,#0
 2444              	.LCFI159:
 2445              	 .cfi_def_cfa_register 7
 2446 0006 F860     	 str r0,[r7,#12]
 2447 0008 B960     	 str r1,[r7,#8]
 2448 000a 7A60     	 str r2,[r7,#4]
 540:../cleanflight/src/main/io/vtx_tramp.c ****     if (!vtxTrampIsReady(vtxDevice)) {
 2449              	 .loc 3 540 0
 2450 000c F868     	 ldr r0,[r7,#12]
 2451 000e FFF7FEFF 	 bl vtxTrampIsReady
 2452 0012 0346     	 mov r3,r0
 2453 0014 83F00103 	 eor r3,r3,#1
 2454 0018 DBB2     	 uxtb r3,r3
 2455 001a 002B     	 cmp r3,#0
 2456 001c 01D0     	 beq .L139
 541:../cleanflight/src/main/io/vtx_tramp.c ****         return false;
 2457              	 .loc 3 541 0
 2458 001e 0023     	 movs r3,#0
 2459 0020 0EE0     	 b .L140
 2460              	.L139:
 542:../cleanflight/src/main/io/vtx_tramp.c ****     }
 543:../cleanflight/src/main/io/vtx_tramp.c **** 
 544:../cleanflight/src/main/io/vtx_tramp.c ****     // if in user-freq mode then report band as zero
 545:../cleanflight/src/main/io/vtx_tramp.c ****     *pBand = trampSetByFreqFlag ? 0 : trampBand;
 2461              	 .loc 3 545 0
 2462 0022 094B     	 ldr r3,.L143
 2463 0024 1B78     	 ldrb r3,[r3]
 2464 0026 002B     	 cmp r3,#0
 2465 0028 01D0     	 beq .L141
 2466              	 .loc 3 545 0 is_stmt 0 discriminator 1
 2467 002a 0022     	 movs r2,#0
 2468 002c 01E0     	 b .L142
 2469              	.L141:
 2470              	 .loc 3 545 0 discriminator 2
 2471 002e 074B     	 ldr r3,.L143+4
 2472 0030 1A78     	 ldrb r2,[r3]
 2473              	.L142:
 2474              	 .loc 3 545 0 discriminator 4
 2475 0032 BB68     	 ldr r3,[r7,#8]
 2476 0034 1A70     	 strb r2,[r3]
 546:../cleanflight/src/main/io/vtx_tramp.c ****     *pChannel = trampChannel;
 2477              	 .loc 3 546 0 is_stmt 1 discriminator 4
 2478 0036 064B     	 ldr r3,.L143+8
 2479 0038 1A78     	 ldrb r2,[r3]
 2480 003a 7B68     	 ldr r3,[r7,#4]
 2481 003c 1A70     	 strb r2,[r3]
 547:../cleanflight/src/main/io/vtx_tramp.c ****     return true;
 2482              	 .loc 3 547 0 discriminator 4
 2483 003e 0123     	 movs r3,#1
 2484              	.L140:
 548:../cleanflight/src/main/io/vtx_tramp.c **** }
 2485              	 .loc 3 548 0
 2486 0040 1846     	 mov r0,r3
 2487 0042 1037     	 adds r7,r7,#16
 2488              	.LCFI160:
 2489              	 .cfi_def_cfa_offset 8
 2490 0044 BD46     	 mov sp,r7
 2491              	.LCFI161:
 2492              	 .cfi_def_cfa_register 13
 2493              	 
 2494 0046 80BD     	 pop {r7,pc}
 2495              	.L144:
 2496              	 .align 2
 2497              	.L143:
 2498 0048 00000000 	 .word trampSetByFreqFlag
 2499 004c 00000000 	 .word trampBand
 2500 0050 00000000 	 .word trampChannel
 2501              	 .cfi_endproc
 2502              	.LFE570:
 2504              	 .section .text.vtxTrampGetPowerIndex,"ax",%progbits
 2505              	 .align 2
 2506              	 .thumb
 2507              	 .thumb_func
 2509              	vtxTrampGetPowerIndex:
 2510              	.LFB571:
 549:../cleanflight/src/main/io/vtx_tramp.c **** 
 550:../cleanflight/src/main/io/vtx_tramp.c **** static bool vtxTrampGetPowerIndex(const vtxDevice_t *vtxDevice, uint8_t *pIndex)
 551:../cleanflight/src/main/io/vtx_tramp.c **** {
 2511              	 .loc 3 551 0
 2512              	 .cfi_startproc
 2513              	 
 2514              	 
 2515 0000 80B5     	 push {r7,lr}
 2516              	.LCFI162:
 2517              	 .cfi_def_cfa_offset 8
 2518              	 .cfi_offset 7,-8
 2519              	 .cfi_offset 14,-4
 2520 0002 84B0     	 sub sp,sp,#16
 2521              	.LCFI163:
 2522              	 .cfi_def_cfa_offset 24
 2523 0004 00AF     	 add r7,sp,#0
 2524              	.LCFI164:
 2525              	 .cfi_def_cfa_register 7
 2526 0006 7860     	 str r0,[r7,#4]
 2527 0008 3960     	 str r1,[r7]
 552:../cleanflight/src/main/io/vtx_tramp.c ****     if (!vtxTrampIsReady(vtxDevice)) {
 2528              	 .loc 3 552 0
 2529 000a 7868     	 ldr r0,[r7,#4]
 2530 000c FFF7FEFF 	 bl vtxTrampIsReady
 2531 0010 0346     	 mov r3,r0
 2532 0012 83F00103 	 eor r3,r3,#1
 2533 0016 DBB2     	 uxtb r3,r3
 2534 0018 002B     	 cmp r3,#0
 2535 001a 01D0     	 beq .L146
 553:../cleanflight/src/main/io/vtx_tramp.c ****         return false;
 2536              	 .loc 3 553 0
 2537 001c 0023     	 movs r3,#0
 2538 001e 1BE0     	 b .L147
 2539              	.L146:
 554:../cleanflight/src/main/io/vtx_tramp.c ****     }
 555:../cleanflight/src/main/io/vtx_tramp.c **** 
 556:../cleanflight/src/main/io/vtx_tramp.c ****     if (trampConfiguredPower > 0) {
 2540              	 .loc 3 556 0
 2541 0020 0F4B     	 ldr r3,.L152
 2542 0022 1B88     	 ldrh r3,[r3]
 2543 0024 002B     	 cmp r3,#0
 2544 0026 16D0     	 beq .L148
 2545              	.LBB11:
 557:../cleanflight/src/main/io/vtx_tramp.c ****         for (uint8_t i = 0; i < sizeof(trampPowerTable); i++) {
 2546              	 .loc 3 557 0
 2547 0028 0023     	 movs r3,#0
 2548 002a FB73     	 strb r3,[r7,#15]
 2549 002c 10E0     	 b .L149
 2550              	.L151:
 558:../cleanflight/src/main/io/vtx_tramp.c ****             if (trampConfiguredPower <= trampPowerTable[i]) {
 2551              	 .loc 3 558 0
 2552 002e FB7B     	 ldrb r3,[r7,#15]
 2553 0030 0C4A     	 ldr r2,.L152+4
 2554 0032 32F81320 	 ldrh r2,[r2,r3,lsl#1]
 2555 0036 0A4B     	 ldr r3,.L152
 2556 0038 1B88     	 ldrh r3,[r3]
 2557 003a 9A42     	 cmp r2,r3
 2558 003c 05D3     	 bcc .L150
 559:../cleanflight/src/main/io/vtx_tramp.c ****                 *pIndex = i + 1;
 2559              	 .loc 3 559 0
 2560 003e FB7B     	 ldrb r3,[r7,#15]
 2561 0040 0133     	 adds r3,r3,#1
 2562 0042 DAB2     	 uxtb r2,r3
 2563 0044 3B68     	 ldr r3,[r7]
 2564 0046 1A70     	 strb r2,[r3]
 560:../cleanflight/src/main/io/vtx_tramp.c ****                 break;
 2565              	 .loc 3 560 0
 2566 0048 05E0     	 b .L148
 2567              	.L150:
 557:../cleanflight/src/main/io/vtx_tramp.c ****             if (trampConfiguredPower <= trampPowerTable[i]) {
 2568              	 .loc 3 557 0 discriminator 2
 2569 004a FB7B     	 ldrb r3,[r7,#15]
 2570 004c 0133     	 adds r3,r3,#1
 2571 004e FB73     	 strb r3,[r7,#15]
 2572              	.L149:
 557:../cleanflight/src/main/io/vtx_tramp.c ****             if (trampConfiguredPower <= trampPowerTable[i]) {
 2573              	 .loc 3 557 0 is_stmt 0 discriminator 1
 2574 0050 FB7B     	 ldrb r3,[r7,#15]
 2575 0052 092B     	 cmp r3,#9
 2576 0054 EBD9     	 bls .L151
 2577              	.L148:
 2578              	.LBE11:
 561:../cleanflight/src/main/io/vtx_tramp.c ****             }
 562:../cleanflight/src/main/io/vtx_tramp.c ****         }
 563:../cleanflight/src/main/io/vtx_tramp.c ****     }
 564:../cleanflight/src/main/io/vtx_tramp.c **** 
 565:../cleanflight/src/main/io/vtx_tramp.c ****     return true;
 2579              	 .loc 3 565 0 is_stmt 1
 2580 0056 0123     	 movs r3,#1
 2581              	.L147:
 566:../cleanflight/src/main/io/vtx_tramp.c **** }
 2582              	 .loc 3 566 0
 2583 0058 1846     	 mov r0,r3
 2584 005a 1037     	 adds r7,r7,#16
 2585              	.LCFI165:
 2586              	 .cfi_def_cfa_offset 8
 2587 005c BD46     	 mov sp,r7
 2588              	.LCFI166:
 2589              	 .cfi_def_cfa_register 13
 2590              	 
 2591 005e 80BD     	 pop {r7,pc}
 2592              	.L153:
 2593              	 .align 2
 2594              	.L152:
 2595 0060 00000000 	 .word trampConfiguredPower
 2596 0064 00000000 	 .word trampPowerTable
 2597              	 .cfi_endproc
 2598              	.LFE571:
 2600              	 .section .text.vtxTrampGetPitMode,"ax",%progbits
 2601              	 .align 2
 2602              	 .thumb
 2603              	 .thumb_func
 2605              	vtxTrampGetPitMode:
 2606              	.LFB572:
 567:../cleanflight/src/main/io/vtx_tramp.c **** 
 568:../cleanflight/src/main/io/vtx_tramp.c **** static bool vtxTrampGetPitMode(const vtxDevice_t *vtxDevice, uint8_t *pOnOff)
 569:../cleanflight/src/main/io/vtx_tramp.c **** {
 2607              	 .loc 3 569 0
 2608              	 .cfi_startproc
 2609              	 
 2610              	 
 2611 0000 80B5     	 push {r7,lr}
 2612              	.LCFI167:
 2613              	 .cfi_def_cfa_offset 8
 2614              	 .cfi_offset 7,-8
 2615              	 .cfi_offset 14,-4
 2616 0002 82B0     	 sub sp,sp,#8
 2617              	.LCFI168:
 2618              	 .cfi_def_cfa_offset 16
 2619 0004 00AF     	 add r7,sp,#0
 2620              	.LCFI169:
 2621              	 .cfi_def_cfa_register 7
 2622 0006 7860     	 str r0,[r7,#4]
 2623 0008 3960     	 str r1,[r7]
 570:../cleanflight/src/main/io/vtx_tramp.c ****     if (!vtxTrampIsReady(vtxDevice)) {
 2624              	 .loc 3 570 0
 2625 000a 7868     	 ldr r0,[r7,#4]
 2626 000c FFF7FEFF 	 bl vtxTrampIsReady
 2627 0010 0346     	 mov r3,r0
 2628 0012 83F00103 	 eor r3,r3,#1
 2629 0016 DBB2     	 uxtb r3,r3
 2630 0018 002B     	 cmp r3,#0
 2631 001a 01D0     	 beq .L155
 571:../cleanflight/src/main/io/vtx_tramp.c ****         return false;
 2632              	 .loc 3 571 0
 2633 001c 0023     	 movs r3,#0
 2634 001e 04E0     	 b .L156
 2635              	.L155:
 572:../cleanflight/src/main/io/vtx_tramp.c ****     }
 573:../cleanflight/src/main/io/vtx_tramp.c **** 
 574:../cleanflight/src/main/io/vtx_tramp.c ****     *pOnOff = trampPitMode;
 2636              	 .loc 3 574 0
 2637 0020 044B     	 ldr r3,.L157
 2638 0022 1A78     	 ldrb r2,[r3]
 2639 0024 3B68     	 ldr r3,[r7]
 2640 0026 1A70     	 strb r2,[r3]
 575:../cleanflight/src/main/io/vtx_tramp.c ****     return true;
 2641              	 .loc 3 575 0
 2642 0028 0123     	 movs r3,#1
 2643              	.L156:
 576:../cleanflight/src/main/io/vtx_tramp.c **** }
 2644              	 .loc 3 576 0
 2645 002a 1846     	 mov r0,r3
 2646 002c 0837     	 adds r7,r7,#8
 2647              	.LCFI170:
 2648              	 .cfi_def_cfa_offset 8
 2649 002e BD46     	 mov sp,r7
 2650              	.LCFI171:
 2651              	 .cfi_def_cfa_register 13
 2652              	 
 2653 0030 80BD     	 pop {r7,pc}
 2654              	.L158:
 2655 0032 00BF     	 .align 2
 2656              	.L157:
 2657 0034 00000000 	 .word trampPitMode
 2658              	 .cfi_endproc
 2659              	.LFE572:
 2661              	 .section .text.vtxTrampGetFreq,"ax",%progbits
 2662              	 .align 2
 2663              	 .thumb
 2664              	 .thumb_func
 2666              	vtxTrampGetFreq:
 2667              	.LFB573:
 577:../cleanflight/src/main/io/vtx_tramp.c **** 
 578:../cleanflight/src/main/io/vtx_tramp.c **** static bool vtxTrampGetFreq(const vtxDevice_t *vtxDevice, uint16_t *pFreq)
 579:../cleanflight/src/main/io/vtx_tramp.c **** {
 2668              	 .loc 3 579 0
 2669              	 .cfi_startproc
 2670              	 
 2671              	 
 2672 0000 80B5     	 push {r7,lr}
 2673              	.LCFI172:
 2674              	 .cfi_def_cfa_offset 8
 2675              	 .cfi_offset 7,-8
 2676              	 .cfi_offset 14,-4
 2677 0002 82B0     	 sub sp,sp,#8
 2678              	.LCFI173:
 2679              	 .cfi_def_cfa_offset 16
 2680 0004 00AF     	 add r7,sp,#0
 2681              	.LCFI174:
 2682              	 .cfi_def_cfa_register 7
 2683 0006 7860     	 str r0,[r7,#4]
 2684 0008 3960     	 str r1,[r7]
 580:../cleanflight/src/main/io/vtx_tramp.c ****     if (!vtxTrampIsReady(vtxDevice)) {
 2685              	 .loc 3 580 0
 2686 000a 7868     	 ldr r0,[r7,#4]
 2687 000c FFF7FEFF 	 bl vtxTrampIsReady
 2688 0010 0346     	 mov r3,r0
 2689 0012 83F00103 	 eor r3,r3,#1
 2690 0016 DBB2     	 uxtb r3,r3
 2691 0018 002B     	 cmp r3,#0
 2692 001a 01D0     	 beq .L160
 581:../cleanflight/src/main/io/vtx_tramp.c ****         return false;
 2693              	 .loc 3 581 0
 2694 001c 0023     	 movs r3,#0
 2695 001e 05E0     	 b .L161
 2696              	.L160:
 582:../cleanflight/src/main/io/vtx_tramp.c ****     }
 583:../cleanflight/src/main/io/vtx_tramp.c **** 
 584:../cleanflight/src/main/io/vtx_tramp.c ****     *pFreq = trampCurFreq;
 2697              	 .loc 3 584 0
 2698 0020 044B     	 ldr r3,.L162
 2699 0022 1B68     	 ldr r3,[r3]
 2700 0024 9AB2     	 uxth r2,r3
 2701 0026 3B68     	 ldr r3,[r7]
 2702 0028 1A80     	 strh r2,[r3]
 585:../cleanflight/src/main/io/vtx_tramp.c ****     return true;
 2703              	 .loc 3 585 0
 2704 002a 0123     	 movs r3,#1
 2705              	.L161:
 586:../cleanflight/src/main/io/vtx_tramp.c **** }
 2706              	 .loc 3 586 0
 2707 002c 1846     	 mov r0,r3
 2708 002e 0837     	 adds r7,r7,#8
 2709              	.LCFI175:
 2710              	 .cfi_def_cfa_offset 8
 2711 0030 BD46     	 mov sp,r7
 2712              	.LCFI176:
 2713              	 .cfi_def_cfa_register 13
 2714              	 
 2715 0032 80BD     	 pop {r7,pc}
 2716              	.L163:
 2717              	 .align 2
 2718              	.L162:
 2719 0034 00000000 	 .word trampCurFreq
 2720              	 .cfi_endproc
 2721              	.LFE573:
 2723              	 .section .text.vtxTrampInit,"ax",%progbits
 2724              	 .align 2
 2725              	 .global vtxTrampInit
 2726              	 .thumb
 2727              	 .thumb_func
 2729              	vtxTrampInit:
 2730              	.LFB574:
 587:../cleanflight/src/main/io/vtx_tramp.c **** 
 588:../cleanflight/src/main/io/vtx_tramp.c **** static const vtxVTable_t trampVTable = {
 589:../cleanflight/src/main/io/vtx_tramp.c ****     .process = vtxTrampProcess,
 590:../cleanflight/src/main/io/vtx_tramp.c ****     .getDeviceType = vtxTrampGetDeviceType,
 591:../cleanflight/src/main/io/vtx_tramp.c ****     .isReady = vtxTrampIsReady,
 592:../cleanflight/src/main/io/vtx_tramp.c ****     .setBandAndChannel = vtxTrampSetBandAndChannel,
 593:../cleanflight/src/main/io/vtx_tramp.c ****     .setPowerByIndex = vtxTrampSetPowerByIndex,
 594:../cleanflight/src/main/io/vtx_tramp.c ****     .setPitMode = vtxTrampSetPitMode,
 595:../cleanflight/src/main/io/vtx_tramp.c ****     .setFrequency = vtxTrampSetFreq,
 596:../cleanflight/src/main/io/vtx_tramp.c ****     .getBandAndChannel = vtxTrampGetBandAndChannel,
 597:../cleanflight/src/main/io/vtx_tramp.c ****     .getPowerIndex = vtxTrampGetPowerIndex,
 598:../cleanflight/src/main/io/vtx_tramp.c ****     .getPitMode = vtxTrampGetPitMode,
 599:../cleanflight/src/main/io/vtx_tramp.c ****     .getFrequency = vtxTrampGetFreq,
 600:../cleanflight/src/main/io/vtx_tramp.c **** };
 601:../cleanflight/src/main/io/vtx_tramp.c **** 
 602:../cleanflight/src/main/io/vtx_tramp.c **** #endif
 603:../cleanflight/src/main/io/vtx_tramp.c **** 
 604:../cleanflight/src/main/io/vtx_tramp.c **** bool vtxTrampInit(void)
 605:../cleanflight/src/main/io/vtx_tramp.c **** {
 2731              	 .loc 3 605 0
 2732              	 .cfi_startproc
 2733              	 
 2734              	 
 2735 0000 80B5     	 push {r7,lr}
 2736              	.LCFI177:
 2737              	 .cfi_def_cfa_offset 8
 2738              	 .cfi_offset 7,-8
 2739              	 .cfi_offset 14,-4
 2740 0002 86B0     	 sub sp,sp,#24
 2741              	.LCFI178:
 2742              	 .cfi_def_cfa_offset 32
 2743 0004 04AF     	 add r7,sp,#16
 2744              	.LCFI179:
 2745              	 .cfi_def_cfa 7,16
 606:../cleanflight/src/main/io/vtx_tramp.c ****     serialPortConfig_t *portConfig = findSerialPortConfig(FUNCTION_VTX_TRAMP);
 2746              	 .loc 3 606 0
 2747 0006 4FF40050 	 mov r0,#8192
 2748 000a FFF7FEFF 	 bl findSerialPortConfig
 2749 000e 7860     	 str r0,[r7,#4]
 607:../cleanflight/src/main/io/vtx_tramp.c **** 
 608:../cleanflight/src/main/io/vtx_tramp.c ****     if (portConfig) {
 2750              	 .loc 3 608 0
 2751 0010 7B68     	 ldr r3,[r7,#4]
 2752 0012 002B     	 cmp r3,#0
 2753 0014 23D0     	 beq .L165
 2754              	.LBB12:
 609:../cleanflight/src/main/io/vtx_tramp.c ****         portOptions_e portOptions = 0;
 2755              	 .loc 3 609 0
 2756 0016 0023     	 movs r3,#0
 2757 0018 FB70     	 strb r3,[r7,#3]
 610:../cleanflight/src/main/io/vtx_tramp.c **** #if defined(USE_VTX_COMMON)
 611:../cleanflight/src/main/io/vtx_tramp.c ****         portOptions = portOptions | (vtxConfig()->halfDuplex ? SERIAL_BIDIR : SERIAL_UNIDIR);
 2758              	 .loc 3 611 0
 2759 001a FFF7FEFF 	 bl vtxConfig
 2760 001e 0346     	 mov r3,r0
 2761 0020 93F83230 	 ldrb r3,[r3,#50]
 2762 0024 002B     	 cmp r3,#0
 2763 0026 01D0     	 beq .L166
 2764              	 .loc 3 611 0 is_stmt 0 discriminator 1
 2765 0028 0822     	 movs r2,#8
 2766 002a 00E0     	 b .L167
 2767              	.L166:
 2768              	 .loc 3 611 0 discriminator 2
 2769 002c 0022     	 movs r2,#0
 2770              	.L167:
 2771              	 .loc 3 611 0 discriminator 4
 2772 002e FB78     	 ldrb r3,[r7,#3]
 2773 0030 1343     	 orrs r3,r3,r2
 2774 0032 DBB2     	 uxtb r3,r3
 2775 0034 FB70     	 strb r3,[r7,#3]
 612:../cleanflight/src/main/io/vtx_tramp.c **** #else
 613:../cleanflight/src/main/io/vtx_tramp.c ****         portOptions = SERIAL_BIDIR;
 614:../cleanflight/src/main/io/vtx_tramp.c **** #endif
 615:../cleanflight/src/main/io/vtx_tramp.c **** 
 616:../cleanflight/src/main/io/vtx_tramp.c ****         trampSerialPort = openSerialPort(portConfig->identifier, FUNCTION_VTX_TRAMP, NULL, NULL, 96
 2776              	 .loc 3 616 0 is_stmt 1 discriminator 4
 2777 0036 7B68     	 ldr r3,[r7,#4]
 2778 0038 9B78     	 ldrb r3,[r3,#2]
 2779 003a 5AB2     	 sxtb r2,r3
 2780 003c 4FF41653 	 mov r3,#9600
 2781 0040 0093     	 str r3,[sp]
 2782 0042 0323     	 movs r3,#3
 2783 0044 0193     	 str r3,[sp,#4]
 2784 0046 FB78     	 ldrb r3,[r7,#3]
 2785 0048 0293     	 str r3,[sp,#8]
 2786 004a 1046     	 mov r0,r2
 2787 004c 4FF40051 	 mov r1,#8192
 2788 0050 0022     	 movs r2,#0
 2789 0052 0023     	 movs r3,#0
 2790 0054 FFF7FEFF 	 bl openSerialPort
 2791 0058 0246     	 mov r2,r0
 2792 005a 084B     	 ldr r3,.L170
 2793 005c 1A60     	 str r2,[r3]
 2794              	.L165:
 2795              	.LBE12:
 617:../cleanflight/src/main/io/vtx_tramp.c ****     }
 618:../cleanflight/src/main/io/vtx_tramp.c **** 
 619:../cleanflight/src/main/io/vtx_tramp.c ****     if (!trampSerialPort) {
 2796              	 .loc 3 619 0
 2797 005e 074B     	 ldr r3,.L170
 2798 0060 1B68     	 ldr r3,[r3]
 2799 0062 002B     	 cmp r3,#0
 2800 0064 01D1     	 bne .L168
 620:../cleanflight/src/main/io/vtx_tramp.c ****         return false;
 2801              	 .loc 3 620 0
 2802 0066 0023     	 movs r3,#0
 2803 0068 03E0     	 b .L169
 2804              	.L168:
 621:../cleanflight/src/main/io/vtx_tramp.c ****     }
 622:../cleanflight/src/main/io/vtx_tramp.c **** 
 623:../cleanflight/src/main/io/vtx_tramp.c **** #if defined(USE_VTX_COMMON)
 624:../cleanflight/src/main/io/vtx_tramp.c ****     vtxCommonSetDevice(&vtxTramp);
 2805              	 .loc 3 624 0
 2806 006a 0548     	 ldr r0,.L170+4
 2807 006c FFF7FEFF 	 bl vtxCommonSetDevice
 625:../cleanflight/src/main/io/vtx_tramp.c **** #endif
 626:../cleanflight/src/main/io/vtx_tramp.c **** 
 627:../cleanflight/src/main/io/vtx_tramp.c ****     return true;
 2808              	 .loc 3 627 0
 2809 0070 0123     	 movs r3,#1
 2810              	.L169:
 628:../cleanflight/src/main/io/vtx_tramp.c **** }
 2811              	 .loc 3 628 0
 2812 0072 1846     	 mov r0,r3
 2813 0074 0837     	 adds r7,r7,#8
 2814              	.LCFI180:
 2815              	 .cfi_def_cfa_offset 8
 2816 0076 BD46     	 mov sp,r7
 2817              	.LCFI181:
 2818              	 .cfi_def_cfa_register 13
 2819              	 
 2820 0078 80BD     	 pop {r7,pc}
 2821              	.L171:
 2822 007a 00BF     	 .align 2
 2823              	.L170:
 2824 007c 00000000 	 .word trampSerialPort
 2825 0080 00000000 	 .word vtxTramp
 2826              	 .cfi_endproc
 2827              	.LFE574:
 2829              	 .section .bss.initSettingsDoneFlag.12738,"aw",%nobits
 2832              	initSettingsDoneFlag.12738:
 2833 0000 00       	 .space 1
 2834              	 .section .bss.lastQueryTimeUs.12737,"aw",%nobits
 2835              	 .align 2
 2838              	lastQueryTimeUs.12737:
 2839 0000 00000000 	 .space 4
 2840              	 .section .bss.cnt.12745,"aw",%nobits
 2841              	 .align 2
 2844              	cnt.12745:
 2845 0000 00000000 	 .space 4
 2846              	 .text
 2847              	.Letext0:
 2848              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2849              	 .file 5 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2850              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 2851              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/display.h"
 2852              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 2853              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 2854              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/vtx_common.h"
 2855              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 2856              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 2857              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 2858              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
 2859              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
 2860              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx.h"
 2861              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 2862              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
 2863              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/cms/cms.h"
 2864              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/vtx_string.h"
DEFINED SYMBOLS
                            *ABS*:00000000 vtx_tramp.c
    {standard input}:20     .text.cmp32:00000000 $t
    {standard input}:24     .text.cmp32:00000000 cmp32
                            *COM*:00000004 pCurrentDisplay
    {standard input}:66     .text.vtxConfig:00000000 $t
    {standard input}:70     .text.vtxConfig:00000000 vtxConfig
    {standard input}:100    .text.vtxConfig:00000010 $d
    {standard input}:109    .rodata.trampPowerTable:00000000 trampPowerTable
    {standard input}:106    .rodata.trampPowerTable:00000000 $d
    {standard input}:139    .rodata.trampPowerNames:00000000 trampPowerNames
    {standard input}:117    .rodata:00000000 $d
    {standard input}:136    .rodata.trampPowerNames:00000000 $d
    {standard input}:147    .rodata.trampVTable:00000000 $d
    {standard input}:150    .rodata.trampVTable:00000000 trampVTable
    {standard input}:1809   .text.vtxTrampProcess:00000000 vtxTrampProcess
    {standard input}:2133   .text.vtxTrampGetDeviceType:00000000 vtxTrampGetDeviceType
    {standard input}:2175   .text.vtxTrampIsReady:00000000 vtxTrampIsReady
    {standard input}:2239   .text.vtxTrampSetBandAndChannel:00000000 vtxTrampSetBandAndChannel
    {standard input}:2296   .text.vtxTrampSetPowerByIndex:00000000 vtxTrampSetPowerByIndex
    {standard input}:2337   .text.vtxTrampSetPitMode:00000000 vtxTrampSetPitMode
    {standard input}:2378   .text.vtxTrampSetFreq:00000000 vtxTrampSetFreq
    {standard input}:2429   .text.vtxTrampGetBandAndChannel:00000000 vtxTrampGetBandAndChannel
    {standard input}:2509   .text.vtxTrampGetPowerIndex:00000000 vtxTrampGetPowerIndex
    {standard input}:2605   .text.vtxTrampGetPitMode:00000000 vtxTrampGetPitMode
    {standard input}:2666   .text.vtxTrampGetFreq:00000000 vtxTrampGetFreq
    {standard input}:163    .data.vtxTramp:00000000 $d
    {standard input}:166    .data.vtxTramp:00000000 vtxTramp
    {standard input}:178    .bss.trampSerialPort:00000000 $d
    {standard input}:181    .bss.trampSerialPort:00000000 trampSerialPort
    {standard input}:184    .bss.trampReqBuffer:00000000 $d
    {standard input}:187    .bss.trampReqBuffer:00000000 trampReqBuffer
    {standard input}:190    .bss.trampRespBuffer:00000000 $d
    {standard input}:193    .bss.trampRespBuffer:00000000 trampRespBuffer
    {standard input}:199    .bss.trampStatus:00000000 trampStatus
    {standard input}:200    .bss.trampStatus:00000000 $d
                            *COM*:00000004 trampRFFreqMin
                            *COM*:00000004 trampRFFreqMax
                            *COM*:00000004 trampRFPowerMax
    {standard input}:208    .bss.trampSetByFreqFlag:00000000 trampSetByFreqFlag
    {standard input}:209    .bss.trampSetByFreqFlag:00000000 $d
    {standard input}:215    .bss.trampCurFreq:00000000 trampCurFreq
    {standard input}:212    .bss.trampCurFreq:00000000 $d
    {standard input}:221    .bss.trampBand:00000000 trampBand
    {standard input}:222    .bss.trampBand:00000000 $d
    {standard input}:227    .bss.trampChannel:00000000 trampChannel
    {standard input}:228    .bss.trampChannel:00000000 $d
    {standard input}:234    .bss.trampPower:00000000 trampPower
    {standard input}:231    .bss.trampPower:00000000 $d
    {standard input}:241    .bss.trampConfiguredPower:00000000 trampConfiguredPower
    {standard input}:238    .bss.trampConfiguredPower:00000000 $d
    {standard input}:248    .bss.trampTemperature:00000000 trampTemperature
    {standard input}:245    .bss.trampTemperature:00000000 $d
    {standard input}:254    .bss.trampPitMode:00000000 trampPitMode
    {standard input}:255    .bss.trampPitMode:00000000 $d
    {standard input}:261    .bss.trampConfFreq:00000000 trampConfFreq
    {standard input}:258    .bss.trampConfFreq:00000000 $d
    {standard input}:267    .bss.trampFreqRetries:00000000 trampFreqRetries
    {standard input}:268    .bss.trampFreqRetries:00000000 $d
    {standard input}:274    .bss.trampConfPower:00000000 trampConfPower
    {standard input}:271    .bss.trampConfPower:00000000 $d
    {standard input}:280    .bss.trampPowerRetries:00000000 trampPowerRetries
    {standard input}:281    .bss.trampPowerRetries:00000000 $d
    {standard input}:283    .text.trampWriteBuf:00000000 $t
    {standard input}:287    .text.trampWriteBuf:00000000 trampWriteBuf
    {standard input}:325    .text.trampWriteBuf:0000001c $d
    {standard input}:330    .text.trampChecksum:00000000 $t
    {standard input}:334    .text.trampChecksum:00000000 trampChecksum
    {standard input}:399    .text.trampCmdU16:00000000 $t
    {standard input}:404    .text.trampCmdU16:00000000 trampCmdU16
    {standard input}:482    .text.trampCmdU16:00000060 $d
    {standard input}:488    .text.trampValidateFreq:00000000 $t
    {standard input}:492    .text.trampValidateFreq:00000000 trampValidateFreq
    {standard input}:549    .text.trampDevSetFreq:00000000 $t
    {standard input}:553    .text.trampDevSetFreq:00000000 trampDevSetFreq
    {standard input}:604    .text.trampDevSetFreq:0000002c $d
    {standard input}:611    .text.trampSetFreq:00000000 $t
    {standard input}:616    .text.trampSetFreq:00000000 trampSetFreq
    {standard input}:655    .text.trampSetFreq:00000020 $d
    {standard input}:660    .text.trampSendFreq:00000000 $t
    {standard input}:665    .text.trampSendFreq:00000000 trampSendFreq
    {standard input}:702    .text.trampValidateBandAndChannel:00000000 $t
    {standard input}:706    .text.trampValidateBandAndChannel:00000000 trampValidateBandAndChannel
    {standard input}:772    .text.trampDevSetBandAndChannel:00000000 $t
    {standard input}:776    .text.trampDevSetBandAndChannel:00000000 trampDevSetBandAndChannel
    {standard input}:820    .text.trampSetBandAndChannel:00000000 $t
    {standard input}:825    .text.trampSetBandAndChannel:00000000 trampSetBandAndChannel
    {standard input}:869    .text.trampSetBandAndChannel:00000028 $d
    {standard input}:874    .text.trampSetRFPower:00000000 $t
    {standard input}:879    .text.trampSetRFPower:00000000 trampSetRFPower
    {standard input}:930    .text.trampSetRFPower:0000002c $d
    {standard input}:937    .text.trampSendRFPower:00000000 $t
    {standard input}:942    .text.trampSendRFPower:00000000 trampSendRFPower
    {standard input}:979    .text.trampCommitChanges:00000000 $t
    {standard input}:984    .text.trampCommitChanges:00000000 trampCommitChanges
    {standard input}:1029   .text.trampCommitChanges:00000024 $d
    {standard input}:1034   .text.trampDevSetPowerByIndex:00000000 $t
    {standard input}:1038   .text.trampDevSetPowerByIndex:00000000 trampDevSetPowerByIndex
    {standard input}:1094   .text.trampDevSetPowerByIndex:00000038 $d
    {standard input}:1099   .text.trampSetPitMode:00000000 $t
    {standard input}:1104   .text.trampSetPitMode:00000000 trampSetPitMode
    {standard input}:1147   .text.trampHandleResponse:00000000 $t
    {standard input}:1152   .text.trampHandleResponse:00000000 trampHandleResponse
    {standard input}:1374   .text.trampHandleResponse:0000013c $d
    {standard input}:1394   .bss.trampReceiveState:00000000 trampReceiveState
    {standard input}:1395   .bss.trampReceiveState:00000000 $d
    {standard input}:1397   .bss.trampReceivePos:00000000 $d
    {standard input}:1400   .bss.trampReceivePos:00000000 trampReceivePos
    {standard input}:1403   .text.trampResetReceiver:00000000 $t
    {standard input}:1407   .text.trampResetReceiver:00000000 trampResetReceiver
    {standard input}:1442   .text.trampResetReceiver:00000018 $d
    {standard input}:1448   .text.trampIsValidResponseCode:00000000 $t
    {standard input}:1452   .text.trampIsValidResponseCode:00000000 trampIsValidResponseCode
    {standard input}:1509   .text.trampReceive:00000000 $t
    {standard input}:1513   .text.trampReceive:00000000 trampReceive
    {standard input}:1669   .text.trampReceive:000000c8 $d
    {standard input}:1677   .text.trampQuery:00000000 $t
    {standard input}:1682   .text.trampQuery:00000000 trampQuery
    {standard input}:1721   .text.trampQueryR:00000000 $t
    {standard input}:1726   .text.trampQueryR:00000000 trampQueryR
    {standard input}:1749   .text.trampQueryV:00000000 $t
    {standard input}:1754   .text.trampQueryV:00000000 trampQueryV
    {standard input}:1777   .text.trampQueryS:00000000 $t
    {standard input}:1782   .text.trampQueryS:00000000 trampQueryS
    {standard input}:1805   .text.vtxTrampProcess:00000000 $t
    {standard input}:1902   .text.vtxTrampProcess:0000007c $d
    {standard input}:1906   .text.vtxTrampProcess:0000008c $t
    {standard input}:2112   .text.vtxTrampProcess:000001c0 $d
    {standard input}:2832   .bss.initSettingsDoneFlag.12738:00000000 initSettingsDoneFlag.12738
    {standard input}:2838   .bss.lastQueryTimeUs.12737:00000000 lastQueryTimeUs.12737
    {standard input}:2844   .bss.cnt.12745:00000000 cnt.12745
    {standard input}:2129   .text.vtxTrampGetDeviceType:00000000 $t
    {standard input}:2171   .text.vtxTrampIsReady:00000000 $t
    {standard input}:2230   .text.vtxTrampIsReady:00000030 $d
    {standard input}:2235   .text.vtxTrampSetBandAndChannel:00000000 $t
    {standard input}:2292   .text.vtxTrampSetPowerByIndex:00000000 $t
    {standard input}:2333   .text.vtxTrampSetPitMode:00000000 $t
    {standard input}:2374   .text.vtxTrampSetFreq:00000000 $t
    {standard input}:2425   .text.vtxTrampGetBandAndChannel:00000000 $t
    {standard input}:2498   .text.vtxTrampGetBandAndChannel:00000048 $d
    {standard input}:2505   .text.vtxTrampGetPowerIndex:00000000 $t
    {standard input}:2595   .text.vtxTrampGetPowerIndex:00000060 $d
    {standard input}:2601   .text.vtxTrampGetPitMode:00000000 $t
    {standard input}:2657   .text.vtxTrampGetPitMode:00000034 $d
    {standard input}:2662   .text.vtxTrampGetFreq:00000000 $t
    {standard input}:2719   .text.vtxTrampGetFreq:00000034 $d
    {standard input}:2724   .text.vtxTrampInit:00000000 $t
    {standard input}:2729   .text.vtxTrampInit:00000000 vtxTrampInit
    {standard input}:2824   .text.vtxTrampInit:0000007c $d
    {standard input}:2833   .bss.initSettingsDoneFlag.12738:00000000 $d
    {standard input}:2835   .bss.lastQueryTimeUs.12737:00000000 $d
    {standard input}:2841   .bss.cnt.12745:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
vtxConfig_System
vtx58BandNames
vtx58ChannelNames
serialWriteBuf
memset
vtx58_Bandchan2Freq
vtx58_Freq2Bandchan
serialRead
serialRxBytesWaiting
trampCmsUpdateStatusString
findSerialPortConfig
openSerialPort
vtxCommonSetDevice
