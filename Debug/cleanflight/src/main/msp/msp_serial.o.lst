   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "msp_serial.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.serialConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	serialConfig:
  25              	.LFB526:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include <stdbool.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include "pg/pg.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #include "drivers/serial.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_UNUSED = 0,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_NOT_SHARED,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     PORTSHARING_SHARED
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } portSharing_e;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_NONE                = 0,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_MSP                 = (1 << 0),  // 1
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_GPS                 = (1 << 1),  // 2
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_FRSKY_HUB = (1 << 2),  // 4
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_HOTT      = (1 << 3),  // 8
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_LTM       = (1 << 4),  // 16
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_SMARTPORT = (1 << 5),  // 32
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_RX_SERIAL           = (1 << 6),  // 64
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_BLACKBOX            = (1 << 7),  // 128
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_MAVLINK   = (1 << 9),  // 512
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_ESC_SENSOR          = (1 << 10), // 1024
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_VTX_SMARTAUDIO      = (1 << 11), // 2048
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_TELEMETRY_IBUS      = (1 << 12), // 4096
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_VTX_TRAMP           = (1 << 13), // 8192
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_RCDEVICE            = (1 << 14), // 16384
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     FUNCTION_LIDAR_TF            = (1 << 15), // 32768
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortFunction_e;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK (FUNCTION_TELEMETRY_FRSKY_HUB | FUNCTION_TELEMETRY_
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define TELEMETRY_PORT_FUNCTIONS_MASK (TELEMETRY_SHAREABLE_PORT_FUNCTIONS_MASK | FUNCTION_TELEMETRY
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_AUTO = 0,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_9600,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_19200,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_38400,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_57600,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_115200,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_230400,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_250000,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_400000,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_460800,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_500000,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_921600,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_1000000,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_1500000,
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_2000000,
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     BAUD_2470000
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } baudRate_e;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** extern const uint32_t baudRates[];
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // serial port identifiers are now fixed, these values are used by MSP commands.
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef enum {
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_NONE = -1,
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART1 = 0,
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART2,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART3,
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_UART4,
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_UART5,
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART6,
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART7,
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USART8,
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_USB_VCP = 20,
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_SOFTSERIAL1 = 30,
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     SERIAL_PORT_SOFTSERIAL2,
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS1 = 40,
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS2,
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS3,
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS4,
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS5,
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 	SERIAL_PORT_SPIS6,
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortIdentifier_e;
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** extern const serialPortIdentifier_e serialPortIdentifiers[SERIAL_PORT_COUNT];
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define SERIAL_PORT_IDENTIFIER_TO_INDEX(x) (((x) <= SERIAL_PORT_USART8) ? (x) : (RESOURCE_SOFT_OFFS
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** #define SERIAL_PORT_IDENTIFIER_TO_UARTDEV(x) ((x) - SERIAL_PORT_USART1 + UARTDEV_1)
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // runtime
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialPortUsage_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPort_t *serialPort;
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortFunction_e function;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortIdentifier_e identifier;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortUsage_t;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** serialPort_t *findSharedSerialPort(uint16_t functionMask, serialPortFunction_e sharedWithFunction);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** // configuration
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** //
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialPortConfig_s {
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint16_t functionMask;
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortIdentifier_e identifier;
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t msp_baudrateIndex;
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t gps_baudrateIndex;
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t blackbox_baudrateIndex;
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t telemetry_baudrateIndex; // not used for all telemetry systems, e.g. HoTT only works at
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialPortConfig_t;
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** typedef struct serialConfig_s {
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     serialPortConfig_t portConfigs[SERIAL_PORT_COUNT];
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint16_t serial_update_rate_hz;
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h ****     uint8_t reboot_character;               // which byte is used to reboot. Default 'R', could be 
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** } serialConfig_t;
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** 
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io\serial.h **** PG_DECLARE(serialConfig_t, serialConfig);
  27              	 .loc 1 135 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 135 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word serialConfig_System
  55              	 .cfi_endproc
  56              	.LFE526:
  58              	 .section .bss.mspPorts,"aw",%nobits
  59              	 .align 2
  62              	mspPorts:
  63 0000 00000000 	 .space 654
  63      00000000 
  63      00000000 
  63      00000000 
  63      00000000 
  64 028e 0000     	 .section .text.resetMspPort,"ax",%progbits
  65              	 .align 2
  66              	 .thumb
  67              	 .thumb_func
  69              	resetMspPort:
  70              	.LFB531:
  71              	 .file 2 "../cleanflight/src/main/msp/msp_serial.c"
   1:../cleanflight/src/main/msp/msp_serial.c **** /*
   2:../cleanflight/src/main/msp/msp_serial.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/msp/msp_serial.c ****  *
   4:../cleanflight/src/main/msp/msp_serial.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/msp/msp_serial.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/msp/msp_serial.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/msp/msp_serial.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/msp/msp_serial.c ****  * any later version.
   9:../cleanflight/src/main/msp/msp_serial.c ****  *
  10:../cleanflight/src/main/msp/msp_serial.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/msp/msp_serial.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/msp/msp_serial.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/msp/msp_serial.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/msp/msp_serial.c ****  *
  15:../cleanflight/src/main/msp/msp_serial.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/msp/msp_serial.c ****  * along with this software.
  17:../cleanflight/src/main/msp/msp_serial.c ****  *
  18:../cleanflight/src/main/msp/msp_serial.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/msp/msp_serial.c ****  */
  20:../cleanflight/src/main/msp/msp_serial.c **** 
  21:../cleanflight/src/main/msp/msp_serial.c **** #include <stdbool.h>
  22:../cleanflight/src/main/msp/msp_serial.c **** #include <stdint.h>
  23:../cleanflight/src/main/msp/msp_serial.c **** #include <string.h>
  24:../cleanflight/src/main/msp/msp_serial.c **** 
  25:../cleanflight/src/main/msp/msp_serial.c **** #include "platform.h"
  26:../cleanflight/src/main/msp/msp_serial.c **** 
  27:../cleanflight/src/main/msp/msp_serial.c **** #include "build/debug.h"
  28:../cleanflight/src/main/msp/msp_serial.c **** 
  29:../cleanflight/src/main/msp/msp_serial.c **** #include "common/streambuf.h"
  30:../cleanflight/src/main/msp/msp_serial.c **** #include "common/utils.h"
  31:../cleanflight/src/main/msp/msp_serial.c **** #include "common/crc.h"
  32:../cleanflight/src/main/msp/msp_serial.c **** 
  33:../cleanflight/src/main/msp/msp_serial.c **** #include "drivers/system.h"
  34:../cleanflight/src/main/msp/msp_serial.c **** 
  35:../cleanflight/src/main/msp/msp_serial.c **** #include "interface/msp.h"
  36:../cleanflight/src/main/msp/msp_serial.c **** #include "interface/cli.h"
  37:../cleanflight/src/main/msp/msp_serial.c **** 
  38:../cleanflight/src/main/msp/msp_serial.c **** #include "io/serial.h"
  39:../cleanflight/src/main/msp/msp_serial.c **** 
  40:../cleanflight/src/main/msp/msp_serial.c **** #include "msp/msp_serial.h"
  41:../cleanflight/src/main/msp/msp_serial.c **** 
  42:../cleanflight/src/main/msp/msp_serial.c **** static mspPort_t mspPorts[MAX_MSP_PORT_COUNT];
  43:../cleanflight/src/main/msp/msp_serial.c **** 
  44:../cleanflight/src/main/msp/msp_serial.c **** static void resetMspPort(mspPort_t *mspPortToReset, serialPort_t *serialPort, bool sharedWithTeleme
  45:../cleanflight/src/main/msp/msp_serial.c **** {
  72              	 .loc 2 45 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76 0000 80B5     	 push {r7,lr}
  77              	.LCFI4:
  78              	 .cfi_def_cfa_offset 8
  79              	 .cfi_offset 7,-8
  80              	 .cfi_offset 14,-4
  81 0002 84B0     	 sub sp,sp,#16
  82              	.LCFI5:
  83              	 .cfi_def_cfa_offset 24
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI6:
  86              	 .cfi_def_cfa_register 7
  87 0006 F860     	 str r0,[r7,#12]
  88 0008 B960     	 str r1,[r7,#8]
  89 000a 1346     	 mov r3,r2
  90 000c FB71     	 strb r3,[r7,#7]
  46:../cleanflight/src/main/msp/msp_serial.c ****     memset(mspPortToReset, 0, sizeof(mspPort_t));
  91              	 .loc 2 46 0
  92 000e F868     	 ldr r0,[r7,#12]
  93 0010 0021     	 movs r1,#0
  94 0012 DA22     	 movs r2,#218
  95 0014 FFF7FEFF 	 bl memset
  47:../cleanflight/src/main/msp/msp_serial.c **** 
  48:../cleanflight/src/main/msp/msp_serial.c ****     mspPortToReset->port = serialPort;
  96              	 .loc 2 48 0
  97 0018 FB68     	 ldr r3,[r7,#12]
  98 001a BA68     	 ldr r2,[r7,#8]
  99 001c 1A60     	 str r2,[r3]
  49:../cleanflight/src/main/msp/msp_serial.c ****     mspPortToReset->sharedWithTelemetry = sharedWithTelemetry;
 100              	 .loc 2 49 0
 101 001e FB68     	 ldr r3,[r7,#12]
 102 0020 FA79     	 ldrb r2,[r7,#7]
 103 0022 83F8D920 	 strb r2,[r3,#217]
  50:../cleanflight/src/main/msp/msp_serial.c **** }
 104              	 .loc 2 50 0
 105 0026 1037     	 adds r7,r7,#16
 106              	.LCFI7:
 107              	 .cfi_def_cfa_offset 8
 108 0028 BD46     	 mov sp,r7
 109              	.LCFI8:
 110              	 .cfi_def_cfa_register 13
 111              	 
 112 002a 80BD     	 pop {r7,pc}
 113              	 .cfi_endproc
 114              	.LFE531:
 116              	 .section .text.mspSerialAllocatePorts,"ax",%progbits
 117              	 .align 2
 118              	 .global mspSerialAllocatePorts
 119              	 .thumb
 120              	 .thumb_func
 122              	mspSerialAllocatePorts:
 123              	.LFB532:
  51:../cleanflight/src/main/msp/msp_serial.c **** 
  52:../cleanflight/src/main/msp/msp_serial.c **** void mspSerialAllocatePorts(void)
  53:../cleanflight/src/main/msp/msp_serial.c **** {
 124              	 .loc 2 53 0
 125              	 .cfi_startproc
 126              	 
 127              	 
 128 0000 80B5     	 push {r7,lr}
 129              	.LCFI9:
 130              	 .cfi_def_cfa_offset 8
 131              	 .cfi_offset 7,-8
 132              	 .cfi_offset 14,-4
 133 0002 8AB0     	 sub sp,sp,#40
 134              	.LCFI10:
 135              	 .cfi_def_cfa_offset 48
 136 0004 04AF     	 add r7,sp,#16
 137              	.LCFI11:
 138              	 .cfi_def_cfa 7,32
  54:../cleanflight/src/main/msp/msp_serial.c ****     uint8_t portIndex = 0;
 139              	 .loc 2 54 0
 140 0006 0023     	 movs r3,#0
 141 0008 FB75     	 strb r3,[r7,#23]
  55:../cleanflight/src/main/msp/msp_serial.c ****     serialPortConfig_t *portConfig = findSerialPortConfig(FUNCTION_MSP);
 142              	 .loc 2 55 0
 143 000a 0120     	 movs r0,#1
 144 000c FFF7FEFF 	 bl findSerialPortConfig
 145 0010 3861     	 str r0,[r7,#16]
  56:../cleanflight/src/main/msp/msp_serial.c ****     while (portConfig && portIndex < MAX_MSP_PORT_COUNT) {
 146              	 .loc 2 56 0
 147 0012 3BE0     	 b .L7
 148              	.L11:
 149              	.LBB2:
  57:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t *mspPort = &mspPorts[portIndex];
 150              	 .loc 2 57 0
 151 0014 FB7D     	 ldrb r3,[r7,#23]
 152 0016 DA22     	 movs r2,#218
 153 0018 02FB03F3 	 mul r3,r2,r3
 154 001c 204A     	 ldr r2,.L12
 155 001e 1344     	 add r3,r3,r2
 156 0020 FB60     	 str r3,[r7,#12]
  58:../cleanflight/src/main/msp/msp_serial.c ****         if (mspPort->port) {
 157              	 .loc 2 58 0
 158 0022 FB68     	 ldr r3,[r7,#12]
 159 0024 1B68     	 ldr r3,[r3]
 160 0026 002B     	 cmp r3,#0
 161 0028 03D0     	 beq .L8
  59:../cleanflight/src/main/msp/msp_serial.c ****             portIndex++;
 162              	 .loc 2 59 0
 163 002a FB7D     	 ldrb r3,[r7,#23]
 164 002c 0133     	 adds r3,r3,#1
 165 002e FB75     	 strb r3,[r7,#23]
  60:../cleanflight/src/main/msp/msp_serial.c ****             continue;
 166              	 .loc 2 60 0
 167 0030 2CE0     	 b .L7
 168              	.L8:
  61:../cleanflight/src/main/msp/msp_serial.c ****         }
  62:../cleanflight/src/main/msp/msp_serial.c **** 
  63:../cleanflight/src/main/msp/msp_serial.c ****         serialPort_t *serialPort = openSerialPort(portConfig->identifier, FUNCTION_MSP, NULL, NULL,
 169              	 .loc 2 63 0
 170 0032 3B69     	 ldr r3,[r7,#16]
 171 0034 9A78     	 ldrb r2,[r3,#2]
 172 0036 3B69     	 ldr r3,[r7,#16]
 173 0038 DB78     	 ldrb r3,[r3,#3]
 174 003a 1946     	 mov r1,r3
 175 003c 194B     	 ldr r3,.L12+4
 176 003e 53F82130 	 ldr r3,[r3,r1,lsl#2]
 177 0042 52B2     	 sxtb r2,r2
 178 0044 0093     	 str r3,[sp]
 179 0046 0323     	 movs r3,#3
 180 0048 0193     	 str r3,[sp,#4]
 181 004a 0023     	 movs r3,#0
 182 004c 0293     	 str r3,[sp,#8]
 183 004e 1046     	 mov r0,r2
 184 0050 0121     	 movs r1,#1
 185 0052 0022     	 movs r2,#0
 186 0054 0023     	 movs r3,#0
 187 0056 FFF7FEFF 	 bl openSerialPort
 188 005a B860     	 str r0,[r7,#8]
  64:../cleanflight/src/main/msp/msp_serial.c ****         if (serialPort) {
 189              	 .loc 2 64 0
 190 005c BB68     	 ldr r3,[r7,#8]
 191 005e 002B     	 cmp r3,#0
 192 0060 10D0     	 beq .L9
 193              	.LBB3:
  65:../cleanflight/src/main/msp/msp_serial.c ****             bool sharedWithTelemetry = isSerialPortShared(portConfig, FUNCTION_MSP, TELEMETRY_PORT_
 194              	 .loc 2 65 0
 195 0062 3869     	 ldr r0,[r7,#16]
 196 0064 0121     	 movs r1,#1
 197 0066 4FF40F72 	 mov r2,#572
 198 006a FFF7FEFF 	 bl isSerialPortShared
 199 006e 0346     	 mov r3,r0
 200 0070 FB71     	 strb r3,[r7,#7]
  66:../cleanflight/src/main/msp/msp_serial.c ****             resetMspPort(mspPort, serialPort, sharedWithTelemetry);
 201              	 .loc 2 66 0
 202 0072 FB79     	 ldrb r3,[r7,#7]
 203 0074 F868     	 ldr r0,[r7,#12]
 204 0076 B968     	 ldr r1,[r7,#8]
 205 0078 1A46     	 mov r2,r3
 206 007a FFF7FEFF 	 bl resetMspPort
  67:../cleanflight/src/main/msp/msp_serial.c ****             portIndex++;
 207              	 .loc 2 67 0
 208 007e FB7D     	 ldrb r3,[r7,#23]
 209 0080 0133     	 adds r3,r3,#1
 210 0082 FB75     	 strb r3,[r7,#23]
 211              	.L9:
 212              	.LBE3:
  68:../cleanflight/src/main/msp/msp_serial.c ****         }
  69:../cleanflight/src/main/msp/msp_serial.c **** 
  70:../cleanflight/src/main/msp/msp_serial.c ****         portConfig = findNextSerialPortConfig(FUNCTION_MSP);
 213              	 .loc 2 70 0
 214 0084 0120     	 movs r0,#1
 215 0086 FFF7FEFF 	 bl findNextSerialPortConfig
 216 008a 3861     	 str r0,[r7,#16]
 217              	.L7:
 218              	.LBE2:
  56:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t *mspPort = &mspPorts[portIndex];
 219              	 .loc 2 56 0
 220 008c 3B69     	 ldr r3,[r7,#16]
 221 008e 002B     	 cmp r3,#0
 222 0090 02D0     	 beq .L6
  56:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t *mspPort = &mspPorts[portIndex];
 223              	 .loc 2 56 0 is_stmt 0 discriminator 1
 224 0092 FB7D     	 ldrb r3,[r7,#23]
 225 0094 022B     	 cmp r3,#2
 226 0096 BDD9     	 bls .L11
 227              	.L6:
  71:../cleanflight/src/main/msp/msp_serial.c ****     }
  72:../cleanflight/src/main/msp/msp_serial.c **** }
 228              	 .loc 2 72 0 is_stmt 1
 229 0098 1837     	 adds r7,r7,#24
 230              	.LCFI12:
 231              	 .cfi_def_cfa_offset 8
 232 009a BD46     	 mov sp,r7
 233              	.LCFI13:
 234              	 .cfi_def_cfa_register 13
 235              	 
 236 009c 80BD     	 pop {r7,pc}
 237              	.L13:
 238 009e 00BF     	 .align 2
 239              	.L12:
 240 00a0 00000000 	 .word mspPorts
 241 00a4 00000000 	 .word baudRates
 242              	 .cfi_endproc
 243              	.LFE532:
 245              	 .section .text.mspSerialReleasePortIfAllocated,"ax",%progbits
 246              	 .align 2
 247              	 .global mspSerialReleasePortIfAllocated
 248              	 .thumb
 249              	 .thumb_func
 251              	mspSerialReleasePortIfAllocated:
 252              	.LFB533:
  73:../cleanflight/src/main/msp/msp_serial.c **** 
  74:../cleanflight/src/main/msp/msp_serial.c **** void mspSerialReleasePortIfAllocated(serialPort_t *serialPort)
  75:../cleanflight/src/main/msp/msp_serial.c **** {
 253              	 .loc 2 75 0
 254              	 .cfi_startproc
 255              	 
 256              	 
 257 0000 80B5     	 push {r7,lr}
 258              	.LCFI14:
 259              	 .cfi_def_cfa_offset 8
 260              	 .cfi_offset 7,-8
 261              	 .cfi_offset 14,-4
 262 0002 84B0     	 sub sp,sp,#16
 263              	.LCFI15:
 264              	 .cfi_def_cfa_offset 24
 265 0004 00AF     	 add r7,sp,#0
 266              	.LCFI16:
 267              	 .cfi_def_cfa_register 7
 268 0006 7860     	 str r0,[r7,#4]
 269              	.LBB4:
  76:../cleanflight/src/main/msp/msp_serial.c ****     for (uint8_t portIndex = 0; portIndex < MAX_MSP_PORT_COUNT; portIndex++) {
 270              	 .loc 2 76 0
 271 0008 0023     	 movs r3,#0
 272 000a FB73     	 strb r3,[r7,#15]
 273 000c 16E0     	 b .L15
 274              	.L17:
 275              	.LBB5:
  77:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t *candidateMspPort = &mspPorts[portIndex];
 276              	 .loc 2 77 0
 277 000e FB7B     	 ldrb r3,[r7,#15]
 278 0010 DA22     	 movs r2,#218
 279 0012 02FB03F3 	 mul r3,r2,r3
 280 0016 0C4A     	 ldr r2,.L18
 281 0018 1344     	 add r3,r3,r2
 282 001a BB60     	 str r3,[r7,#8]
  78:../cleanflight/src/main/msp/msp_serial.c ****         if (candidateMspPort->port == serialPort) {
 283              	 .loc 2 78 0
 284 001c BB68     	 ldr r3,[r7,#8]
 285 001e 1A68     	 ldr r2,[r3]
 286 0020 7B68     	 ldr r3,[r7,#4]
 287 0022 9A42     	 cmp r2,r3
 288 0024 07D1     	 bne .L16
  79:../cleanflight/src/main/msp/msp_serial.c ****             closeSerialPort(serialPort);
 289              	 .loc 2 79 0
 290 0026 7868     	 ldr r0,[r7,#4]
 291 0028 FFF7FEFF 	 bl closeSerialPort
  80:../cleanflight/src/main/msp/msp_serial.c ****             memset(candidateMspPort, 0, sizeof(mspPort_t));
 292              	 .loc 2 80 0
 293 002c B868     	 ldr r0,[r7,#8]
 294 002e 0021     	 movs r1,#0
 295 0030 DA22     	 movs r2,#218
 296 0032 FFF7FEFF 	 bl memset
 297              	.L16:
 298              	.LBE5:
  76:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t *candidateMspPort = &mspPorts[portIndex];
 299              	 .loc 2 76 0 discriminator 2
 300 0036 FB7B     	 ldrb r3,[r7,#15]
 301 0038 0133     	 adds r3,r3,#1
 302 003a FB73     	 strb r3,[r7,#15]
 303              	.L15:
  76:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t *candidateMspPort = &mspPorts[portIndex];
 304              	 .loc 2 76 0 is_stmt 0 discriminator 1
 305 003c FB7B     	 ldrb r3,[r7,#15]
 306 003e 022B     	 cmp r3,#2
 307 0040 E5D9     	 bls .L17
 308              	.LBE4:
  81:../cleanflight/src/main/msp/msp_serial.c ****         }
  82:../cleanflight/src/main/msp/msp_serial.c ****     }
  83:../cleanflight/src/main/msp/msp_serial.c **** }
 309              	 .loc 2 83 0 is_stmt 1
 310 0042 1037     	 adds r7,r7,#16
 311              	.LCFI17:
 312              	 .cfi_def_cfa_offset 8
 313 0044 BD46     	 mov sp,r7
 314              	.LCFI18:
 315              	 .cfi_def_cfa_register 13
 316              	 
 317 0046 80BD     	 pop {r7,pc}
 318              	.L19:
 319              	 .align 2
 320              	.L18:
 321 0048 00000000 	 .word mspPorts
 322              	 .cfi_endproc
 323              	.LFE533:
 325              	 .section .text.mspSerialProcessReceivedData,"ax",%progbits
 326              	 .align 2
 327              	 .thumb
 328              	 .thumb_func
 330              	mspSerialProcessReceivedData:
 331              	.LFB534:
  84:../cleanflight/src/main/msp/msp_serial.c **** 
  85:../cleanflight/src/main/msp/msp_serial.c **** #if defined(USE_TELEMETRY)
  86:../cleanflight/src/main/msp/msp_serial.c **** void mspSerialReleaseSharedTelemetryPorts(void) {
  87:../cleanflight/src/main/msp/msp_serial.c ****     for (uint8_t portIndex = 0; portIndex < MAX_MSP_PORT_COUNT; portIndex++) {
  88:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t *candidateMspPort = &mspPorts[portIndex];
  89:../cleanflight/src/main/msp/msp_serial.c ****         if (candidateMspPort->sharedWithTelemetry) {
  90:../cleanflight/src/main/msp/msp_serial.c ****             closeSerialPort(candidateMspPort->port);
  91:../cleanflight/src/main/msp/msp_serial.c ****             memset(candidateMspPort, 0, sizeof(mspPort_t));
  92:../cleanflight/src/main/msp/msp_serial.c ****         }
  93:../cleanflight/src/main/msp/msp_serial.c ****     }
  94:../cleanflight/src/main/msp/msp_serial.c **** }
  95:../cleanflight/src/main/msp/msp_serial.c **** #endif
  96:../cleanflight/src/main/msp/msp_serial.c **** 
  97:../cleanflight/src/main/msp/msp_serial.c **** static bool mspSerialProcessReceivedData(mspPort_t *mspPort, uint8_t c)
  98:../cleanflight/src/main/msp/msp_serial.c **** {
 332              	 .loc 2 98 0
 333              	 .cfi_startproc
 334              	 
 335              	 
 336 0000 80B5     	 push {r7,lr}
 337              	.LCFI19:
 338              	 .cfi_def_cfa_offset 8
 339              	 .cfi_offset 7,-8
 340              	 .cfi_offset 14,-4
 341 0002 86B0     	 sub sp,sp,#24
 342              	.LCFI20:
 343              	 .cfi_def_cfa_offset 32
 344 0004 00AF     	 add r7,sp,#0
 345              	.LCFI21:
 346              	 .cfi_def_cfa_register 7
 347 0006 7860     	 str r0,[r7,#4]
 348 0008 0B46     	 mov r3,r1
 349 000a FB70     	 strb r3,[r7,#3]
  99:../cleanflight/src/main/msp/msp_serial.c ****     switch (mspPort->c_state) {
 350              	 .loc 2 99 0
 351 000c 7B68     	 ldr r3,[r7,#4]
 352 000e 5B7A     	 ldrb r3,[r3,#9]
 353 0010 013B     	 subs r3,r3,#1
 354 0012 0B2B     	 cmp r3,#11
 355 0014 1AD8     	 bhi .L21
 356 0016 01A2     	 adr r2,.L23
 357 0018 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 358              	 .p2align 2
 359              	.L23:
 360 001c 5F000000 	 .word .L22+1
 361 0020 BF000000 	 .word .L24+1
 362 0024 EB000000 	 .word .L25+1
 363 0028 17010000 	 .word .L26+1
 364 002c D9010000 	 .word .L27+1
 365 0030 1B020000 	 .word .L28+1
 366 0034 37020000 	 .word .L29+1
 367 0038 E3020000 	 .word .L30+1
 368 003c 3F030000 	 .word .L31+1
 369 0040 6D030000 	 .word .L32+1
 370 0044 07040000 	 .word .L33+1
 371 0048 51040000 	 .word .L34+1
 372              	 .p2align 1
 373              	.L21:
 100:../cleanflight/src/main/msp/msp_serial.c ****         default:
 101:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_IDLE:      // Waiting for '$' character
 102:../cleanflight/src/main/msp/msp_serial.c ****             if (c == '$') {
 374              	 .loc 2 102 0
 375 004c FB78     	 ldrb r3,[r7,#3]
 376 004e 242B     	 cmp r3,#36
 377 0050 03D1     	 bne .L35
 103:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_HEADER_START;
 378              	 .loc 2 103 0
 379 0052 7B68     	 ldr r3,[r7,#4]
 380 0054 0122     	 movs r2,#1
 381 0056 5A72     	 strb r2,[r3,#9]
 104:../cleanflight/src/main/msp/msp_serial.c ****             }
 105:../cleanflight/src/main/msp/msp_serial.c ****             else {
 106:../cleanflight/src/main/msp/msp_serial.c ****                 return false;
 107:../cleanflight/src/main/msp/msp_serial.c ****             }
 108:../cleanflight/src/main/msp/msp_serial.c ****             break;
 382              	 .loc 2 108 0
 383 0058 08E2     	 b .L38
 384              	.L35:
 106:../cleanflight/src/main/msp/msp_serial.c ****             }
 385              	 .loc 2 106 0
 386 005a 0023     	 movs r3,#0
 387 005c 07E2     	 b .L37
 388              	.L22:
 109:../cleanflight/src/main/msp/msp_serial.c **** 
 110:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_HEADER_START:  // Waiting for 'M' (MSPv1 / MSPv2_over_v1) or 'X' (MSPv2 native)
 111:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->offset = 0;
 389              	 .loc 2 111 0
 390 005e 7B68     	 ldr r3,[r7,#4]
 391 0060 0022     	 movs r2,#0
 392 0062 83F8CF20 	 strb r2,[r3,#207]
 393 0066 0022     	 movs r2,#0
 394 0068 83F8D020 	 strb r2,[r3,#208]
 395 006c 0022     	 movs r2,#0
 396 006e 83F8D120 	 strb r2,[r3,#209]
 397 0072 0022     	 movs r2,#0
 398 0074 83F8D220 	 strb r2,[r3,#210]
 112:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum1 = 0;
 399              	 .loc 2 112 0
 400 0078 7B68     	 ldr r3,[r7,#4]
 401 007a 0022     	 movs r2,#0
 402 007c 83F8D720 	 strb r2,[r3,#215]
 113:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum2 = 0;
 403              	 .loc 2 113 0
 404 0080 7B68     	 ldr r3,[r7,#4]
 405 0082 0022     	 movs r2,#0
 406 0084 83F8D820 	 strb r2,[r3,#216]
 114:../cleanflight/src/main/msp/msp_serial.c ****             switch (c) {
 407              	 .loc 2 114 0
 408 0088 FB78     	 ldrb r3,[r7,#3]
 409 008a 4D2B     	 cmp r3,#77
 410 008c 02D0     	 beq .L40
 411 008e 582B     	 cmp r3,#88
 412 0090 08D0     	 beq .L41
 413 0092 0FE0     	 b .L73
 414              	.L40:
 115:../cleanflight/src/main/msp/msp_serial.c ****                 case 'M':
 116:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->c_state = MSP_HEADER_M;
 415              	 .loc 2 116 0
 416 0094 7B68     	 ldr r3,[r7,#4]
 417 0096 0222     	 movs r2,#2
 418 0098 5A72     	 strb r2,[r3,#9]
 117:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->mspVersion = MSP_V1;
 419              	 .loc 2 117 0
 420 009a 7B68     	 ldr r3,[r7,#4]
 421 009c 0022     	 movs r2,#0
 422 009e 83F8CE20 	 strb r2,[r3,#206]
 118:../cleanflight/src/main/msp/msp_serial.c ****                     break;
 423              	 .loc 2 118 0
 424 00a2 0BE0     	 b .L42
 425              	.L41:
 119:../cleanflight/src/main/msp/msp_serial.c ****                 case 'X':
 120:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->c_state = MSP_HEADER_X;
 426              	 .loc 2 120 0
 427 00a4 7B68     	 ldr r3,[r7,#4]
 428 00a6 0322     	 movs r2,#3
 429 00a8 5A72     	 strb r2,[r3,#9]
 121:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->mspVersion = MSP_V2_NATIVE;
 430              	 .loc 2 121 0
 431 00aa 7B68     	 ldr r3,[r7,#4]
 432 00ac 0222     	 movs r2,#2
 433 00ae 83F8CE20 	 strb r2,[r3,#206]
 122:../cleanflight/src/main/msp/msp_serial.c ****                     break;
 434              	 .loc 2 122 0
 435 00b2 03E0     	 b .L42
 436              	.L73:
 123:../cleanflight/src/main/msp/msp_serial.c ****                 default:
 124:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->c_state = MSP_IDLE;
 437              	 .loc 2 124 0
 438 00b4 7B68     	 ldr r3,[r7,#4]
 439 00b6 0022     	 movs r2,#0
 440 00b8 5A72     	 strb r2,[r3,#9]
 125:../cleanflight/src/main/msp/msp_serial.c ****                     break;
 441              	 .loc 2 125 0
 442 00ba 00BF     	 nop
 443              	.L42:
 126:../cleanflight/src/main/msp/msp_serial.c ****             }
 127:../cleanflight/src/main/msp/msp_serial.c ****             break;
 444              	 .loc 2 127 0
 445 00bc D6E1     	 b .L38
 446              	.L24:
 128:../cleanflight/src/main/msp/msp_serial.c **** 
 129:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_HEADER_M:      // Waiting for '<' / '>'
 130:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->c_state = MSP_HEADER_V1;
 447              	 .loc 2 130 0
 448 00be 7B68     	 ldr r3,[r7,#4]
 449 00c0 0422     	 movs r2,#4
 450 00c2 5A72     	 strb r2,[r3,#9]
 131:../cleanflight/src/main/msp/msp_serial.c ****             switch (c) {
 451              	 .loc 2 131 0
 452 00c4 FB78     	 ldrb r3,[r7,#3]
 453 00c6 3C2B     	 cmp r3,#60
 454 00c8 02D0     	 beq .L44
 455 00ca 3E2B     	 cmp r3,#62
 456 00cc 04D0     	 beq .L45
 457 00ce 07E0     	 b .L74
 458              	.L44:
 132:../cleanflight/src/main/msp/msp_serial.c ****                 case '<':
 133:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->packetType = MSP_PACKET_COMMAND;
 459              	 .loc 2 133 0
 460 00d0 7B68     	 ldr r3,[r7,#4]
 461 00d2 0022     	 movs r2,#0
 462 00d4 9A72     	 strb r2,[r3,#10]
 134:../cleanflight/src/main/msp/msp_serial.c ****                     break;
 463              	 .loc 2 134 0
 464 00d6 07E0     	 b .L46
 465              	.L45:
 135:../cleanflight/src/main/msp/msp_serial.c ****                 case '>':
 136:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->packetType = MSP_PACKET_REPLY;
 466              	 .loc 2 136 0
 467 00d8 7B68     	 ldr r3,[r7,#4]
 468 00da 0122     	 movs r2,#1
 469 00dc 9A72     	 strb r2,[r3,#10]
 137:../cleanflight/src/main/msp/msp_serial.c ****                     break;
 470              	 .loc 2 137 0
 471 00de 03E0     	 b .L46
 472              	.L74:
 138:../cleanflight/src/main/msp/msp_serial.c ****                 default:
 139:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->c_state = MSP_IDLE;
 473              	 .loc 2 139 0
 474 00e0 7B68     	 ldr r3,[r7,#4]
 475 00e2 0022     	 movs r2,#0
 476 00e4 5A72     	 strb r2,[r3,#9]
 140:../cleanflight/src/main/msp/msp_serial.c ****                     break;
 477              	 .loc 2 140 0
 478 00e6 00BF     	 nop
 479              	.L46:
 141:../cleanflight/src/main/msp/msp_serial.c ****             }
 142:../cleanflight/src/main/msp/msp_serial.c ****             break;
 480              	 .loc 2 142 0
 481 00e8 C0E1     	 b .L38
 482              	.L25:
 143:../cleanflight/src/main/msp/msp_serial.c **** 
 144:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_HEADER_X:
 145:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->c_state = MSP_HEADER_V2_NATIVE;
 483              	 .loc 2 145 0
 484 00ea 7B68     	 ldr r3,[r7,#4]
 485 00ec 0A22     	 movs r2,#10
 486 00ee 5A72     	 strb r2,[r3,#9]
 146:../cleanflight/src/main/msp/msp_serial.c ****             switch (c) {
 487              	 .loc 2 146 0
 488 00f0 FB78     	 ldrb r3,[r7,#3]
 489 00f2 3C2B     	 cmp r3,#60
 490 00f4 02D0     	 beq .L48
 491 00f6 3E2B     	 cmp r3,#62
 492 00f8 04D0     	 beq .L49
 493 00fa 07E0     	 b .L75
 494              	.L48:
 147:../cleanflight/src/main/msp/msp_serial.c ****                 case '<':
 148:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->packetType = MSP_PACKET_COMMAND;
 495              	 .loc 2 148 0
 496 00fc 7B68     	 ldr r3,[r7,#4]
 497 00fe 0022     	 movs r2,#0
 498 0100 9A72     	 strb r2,[r3,#10]
 149:../cleanflight/src/main/msp/msp_serial.c ****                     break;
 499              	 .loc 2 149 0
 500 0102 07E0     	 b .L50
 501              	.L49:
 150:../cleanflight/src/main/msp/msp_serial.c ****                 case '>':
 151:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->packetType = MSP_PACKET_REPLY;
 502              	 .loc 2 151 0
 503 0104 7B68     	 ldr r3,[r7,#4]
 504 0106 0122     	 movs r2,#1
 505 0108 9A72     	 strb r2,[r3,#10]
 152:../cleanflight/src/main/msp/msp_serial.c ****                     break;
 506              	 .loc 2 152 0
 507 010a 03E0     	 b .L50
 508              	.L75:
 153:../cleanflight/src/main/msp/msp_serial.c ****                 default:
 154:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->c_state = MSP_IDLE;
 509              	 .loc 2 154 0
 510 010c 7B68     	 ldr r3,[r7,#4]
 511 010e 0022     	 movs r2,#0
 512 0110 5A72     	 strb r2,[r3,#9]
 155:../cleanflight/src/main/msp/msp_serial.c ****                     break;
 513              	 .loc 2 155 0
 514 0112 00BF     	 nop
 515              	.L50:
 156:../cleanflight/src/main/msp/msp_serial.c ****             }
 157:../cleanflight/src/main/msp/msp_serial.c ****             break;
 516              	 .loc 2 157 0
 517 0114 AAE1     	 b .L38
 518              	.L26:
 158:../cleanflight/src/main/msp/msp_serial.c **** 
 159:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_HEADER_V1:     // Now receive v1 header (size/cmd), this is already checksummable
 160:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->inBuf[mspPort->offset++] = c;
 519              	 .loc 2 160 0
 520 0116 7B68     	 ldr r3,[r7,#4]
 521 0118 D3F8CF30 	 ldr r3,[r3,#207]
 522 011c 591C     	 adds r1,r3,#1
 523 011e 7A68     	 ldr r2,[r7,#4]
 524 0120 C2F8CF10 	 str r1,[r2,#207]
 525 0124 7A68     	 ldr r2,[r7,#4]
 526 0126 1344     	 add r3,r3,r2
 527 0128 FA78     	 ldrb r2,[r7,#3]
 528 012a DA72     	 strb r2,[r3,#11]
 161:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum1 ^= c;
 529              	 .loc 2 161 0
 530 012c 7B68     	 ldr r3,[r7,#4]
 531 012e 93F8D720 	 ldrb r2,[r3,#215]
 532 0132 FB78     	 ldrb r3,[r7,#3]
 533 0134 5340     	 eors r3,r3,r2
 534 0136 DAB2     	 uxtb r2,r3
 535 0138 7B68     	 ldr r3,[r7,#4]
 536 013a 83F8D720 	 strb r2,[r3,#215]
 162:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPort->offset == sizeof(mspHeaderV1_t)) {
 537              	 .loc 2 162 0
 538 013e 7B68     	 ldr r3,[r7,#4]
 539 0140 D3F8CF30 	 ldr r3,[r3,#207]
 540 0144 022B     	 cmp r3,#2
 541 0146 46D1     	 bne .L51
 542              	.LBB6:
 163:../cleanflight/src/main/msp/msp_serial.c ****                 mspHeaderV1_t * hdr = (mspHeaderV1_t *)&mspPort->inBuf[0];
 543              	 .loc 2 163 0
 544 0148 7B68     	 ldr r3,[r7,#4]
 545 014a 0B33     	 adds r3,r3,#11
 546 014c 7B61     	 str r3,[r7,#20]
 164:../cleanflight/src/main/msp/msp_serial.c ****                 // Check incoming buffer size limit
 165:../cleanflight/src/main/msp/msp_serial.c ****                 if (hdr->size > MSP_PORT_INBUF_SIZE) {
 547              	 .loc 2 165 0
 548 014e 7B69     	 ldr r3,[r7,#20]
 549 0150 1B78     	 ldrb r3,[r3]
 550 0152 C02B     	 cmp r3,#192
 551 0154 03D9     	 bls .L52
 166:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->c_state = MSP_IDLE;
 552              	 .loc 2 166 0
 553 0156 7B68     	 ldr r3,[r7,#4]
 554 0158 0022     	 movs r2,#0
 555 015a 5A72     	 strb r2,[r3,#9]
 556 015c 3BE0     	 b .L51
 557              	.L52:
 167:../cleanflight/src/main/msp/msp_serial.c ****                 }
 168:../cleanflight/src/main/msp/msp_serial.c ****                 else if (hdr->cmd == MSP_V2_FRAME_ID) {
 558              	 .loc 2 168 0
 559 015e 7B69     	 ldr r3,[r7,#20]
 560 0160 5B78     	 ldrb r3,[r3,#1]
 561 0162 FF2B     	 cmp r3,#255
 562 0164 0FD1     	 bne .L53
 169:../cleanflight/src/main/msp/msp_serial.c ****                     // MSPv1 payload must be big enough to hold V2 header + extra checksum
 170:../cleanflight/src/main/msp/msp_serial.c ****                     if (hdr->size >= sizeof(mspHeaderV2_t) + 1) {
 563              	 .loc 2 170 0
 564 0166 7B69     	 ldr r3,[r7,#20]
 565 0168 1B78     	 ldrb r3,[r3]
 566 016a 052B     	 cmp r3,#5
 567 016c 07D9     	 bls .L54
 171:../cleanflight/src/main/msp/msp_serial.c ****                         mspPort->mspVersion = MSP_V2_OVER_V1;
 568              	 .loc 2 171 0
 569 016e 7B68     	 ldr r3,[r7,#4]
 570 0170 0122     	 movs r2,#1
 571 0172 83F8CE20 	 strb r2,[r3,#206]
 172:../cleanflight/src/main/msp/msp_serial.c ****                         mspPort->c_state = MSP_HEADER_V2_OVER_V1;
 572              	 .loc 2 172 0
 573 0176 7B68     	 ldr r3,[r7,#4]
 574 0178 0722     	 movs r2,#7
 575 017a 5A72     	 strb r2,[r3,#9]
 576 017c 2BE0     	 b .L51
 577              	.L54:
 173:../cleanflight/src/main/msp/msp_serial.c ****                     }
 174:../cleanflight/src/main/msp/msp_serial.c ****                     else {
 175:../cleanflight/src/main/msp/msp_serial.c ****                         mspPort->c_state = MSP_IDLE;
 578              	 .loc 2 175 0
 579 017e 7B68     	 ldr r3,[r7,#4]
 580 0180 0022     	 movs r2,#0
 581 0182 5A72     	 strb r2,[r3,#9]
 582              	.LBE6:
 176:../cleanflight/src/main/msp/msp_serial.c ****                     }
 177:../cleanflight/src/main/msp/msp_serial.c ****                 }
 178:../cleanflight/src/main/msp/msp_serial.c ****                 else {
 179:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->dataSize = hdr->size;
 180:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->cmdMSP = hdr->cmd;
 181:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->cmdFlags = 0;
 182:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->offset = 0;                // re-use buffer
 183:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->c_state = mspPort->dataSize > 0 ? MSP_PAYLOAD_V1 : MSP_CHECKSUM_V1;   
 184:../cleanflight/src/main/msp/msp_serial.c ****                 }
 185:../cleanflight/src/main/msp/msp_serial.c ****             }
 186:../cleanflight/src/main/msp/msp_serial.c ****             break;
 583              	 .loc 2 186 0
 584 0184 72E1     	 b .L38
 585              	.L53:
 586              	.LBB7:
 179:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->cmdMSP = hdr->cmd;
 587              	 .loc 2 179 0
 588 0186 7B69     	 ldr r3,[r7,#20]
 589 0188 1B78     	 ldrb r3,[r3]
 590 018a 1A46     	 mov r2,r3
 591 018c 7B68     	 ldr r3,[r7,#4]
 592 018e C3F8D320 	 str r2,[r3,#211]
 180:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->cmdFlags = 0;
 593              	 .loc 2 180 0
 594 0192 7B69     	 ldr r3,[r7,#20]
 595 0194 5B78     	 ldrb r3,[r3,#1]
 596 0196 9AB2     	 uxth r2,r3
 597 0198 7B68     	 ldr r3,[r7,#4]
 598 019a A3F8CB20 	 strh r2,[r3,#203]
 181:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->offset = 0;                // re-use buffer
 599              	 .loc 2 181 0
 600 019e 7B68     	 ldr r3,[r7,#4]
 601 01a0 0022     	 movs r2,#0
 602 01a2 83F8CD20 	 strb r2,[r3,#205]
 182:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->c_state = mspPort->dataSize > 0 ? MSP_PAYLOAD_V1 : MSP_CHECKSUM_V1;   
 603              	 .loc 2 182 0
 604 01a6 7B68     	 ldr r3,[r7,#4]
 605 01a8 0022     	 movs r2,#0
 606 01aa 83F8CF20 	 strb r2,[r3,#207]
 607 01ae 0022     	 movs r2,#0
 608 01b0 83F8D020 	 strb r2,[r3,#208]
 609 01b4 0022     	 movs r2,#0
 610 01b6 83F8D120 	 strb r2,[r3,#209]
 611 01ba 0022     	 movs r2,#0
 612 01bc 83F8D220 	 strb r2,[r3,#210]
 183:../cleanflight/src/main/msp/msp_serial.c ****                 }
 613              	 .loc 2 183 0
 614 01c0 7B68     	 ldr r3,[r7,#4]
 615 01c2 D3F8D330 	 ldr r3,[r3,#211]
 616 01c6 002B     	 cmp r3,#0
 617 01c8 01D0     	 beq .L56
 183:../cleanflight/src/main/msp/msp_serial.c ****                 }
 618              	 .loc 2 183 0 is_stmt 0 discriminator 1
 619 01ca 0522     	 movs r2,#5
 620 01cc 00E0     	 b .L57
 621              	.L56:
 183:../cleanflight/src/main/msp/msp_serial.c ****                 }
 622              	 .loc 2 183 0 discriminator 2
 623 01ce 0622     	 movs r2,#6
 624              	.L57:
 183:../cleanflight/src/main/msp/msp_serial.c ****                 }
 625              	 .loc 2 183 0 discriminator 4
 626 01d0 7B68     	 ldr r3,[r7,#4]
 627 01d2 5A72     	 strb r2,[r3,#9]
 628              	.LBE7:
 629              	 .loc 2 186 0 is_stmt 1 discriminator 4
 630 01d4 4AE1     	 b .L38
 631              	.L51:
 632              	 .loc 2 186 0 is_stmt 0 discriminator 1
 633 01d6 49E1     	 b .L38
 634              	.L27:
 187:../cleanflight/src/main/msp/msp_serial.c **** 
 188:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_PAYLOAD_V1:
 189:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->inBuf[mspPort->offset++] = c;
 635              	 .loc 2 189 0 is_stmt 1
 636 01d8 7B68     	 ldr r3,[r7,#4]
 637 01da D3F8CF30 	 ldr r3,[r3,#207]
 638 01de 591C     	 adds r1,r3,#1
 639 01e0 7A68     	 ldr r2,[r7,#4]
 640 01e2 C2F8CF10 	 str r1,[r2,#207]
 641 01e6 7A68     	 ldr r2,[r7,#4]
 642 01e8 1344     	 add r3,r3,r2
 643 01ea FA78     	 ldrb r2,[r7,#3]
 644 01ec DA72     	 strb r2,[r3,#11]
 190:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum1 ^= c;
 645              	 .loc 2 190 0
 646 01ee 7B68     	 ldr r3,[r7,#4]
 647 01f0 93F8D720 	 ldrb r2,[r3,#215]
 648 01f4 FB78     	 ldrb r3,[r7,#3]
 649 01f6 5340     	 eors r3,r3,r2
 650 01f8 DAB2     	 uxtb r2,r3
 651 01fa 7B68     	 ldr r3,[r7,#4]
 652 01fc 83F8D720 	 strb r2,[r3,#215]
 191:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPort->offset == mspPort->dataSize) {
 653              	 .loc 2 191 0
 654 0200 7B68     	 ldr r3,[r7,#4]
 655 0202 D3F8CF20 	 ldr r2,[r3,#207]
 656 0206 7B68     	 ldr r3,[r7,#4]
 657 0208 D3F8D330 	 ldr r3,[r3,#211]
 658 020c 9A42     	 cmp r2,r3
 659 020e 03D1     	 bne .L58
 192:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_CHECKSUM_V1;
 660              	 .loc 2 192 0
 661 0210 7B68     	 ldr r3,[r7,#4]
 662 0212 0622     	 movs r2,#6
 663 0214 5A72     	 strb r2,[r3,#9]
 193:../cleanflight/src/main/msp/msp_serial.c ****             }
 194:../cleanflight/src/main/msp/msp_serial.c ****             break;
 664              	 .loc 2 194 0
 665 0216 29E1     	 b .L38
 666              	.L58:
 667 0218 28E1     	 b .L38
 668              	.L28:
 195:../cleanflight/src/main/msp/msp_serial.c **** 
 196:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_CHECKSUM_V1:
 197:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPort->checksum1 == c) {
 669              	 .loc 2 197 0
 670 021a 7B68     	 ldr r3,[r7,#4]
 671 021c 93F8D730 	 ldrb r3,[r3,#215]
 672 0220 FA78     	 ldrb r2,[r7,#3]
 673 0222 9A42     	 cmp r2,r3
 674 0224 03D1     	 bne .L59
 198:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_COMMAND_RECEIVED;
 675              	 .loc 2 198 0
 676 0226 7B68     	 ldr r3,[r7,#4]
 677 0228 0D22     	 movs r2,#13
 678 022a 5A72     	 strb r2,[r3,#9]
 199:../cleanflight/src/main/msp/msp_serial.c ****             } else {
 200:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_IDLE;
 201:../cleanflight/src/main/msp/msp_serial.c ****             }
 202:../cleanflight/src/main/msp/msp_serial.c ****             break;
 679              	 .loc 2 202 0
 680 022c 1EE1     	 b .L38
 681              	.L59:
 200:../cleanflight/src/main/msp/msp_serial.c ****             }
 682              	 .loc 2 200 0
 683 022e 7B68     	 ldr r3,[r7,#4]
 684 0230 0022     	 movs r2,#0
 685 0232 5A72     	 strb r2,[r3,#9]
 686              	 .loc 2 202 0
 687 0234 1AE1     	 b .L38
 688              	.L29:
 203:../cleanflight/src/main/msp/msp_serial.c **** 
 204:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_HEADER_V2_OVER_V1:     // V2 header is part of V1 payload - we need to calculate b
 205:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->inBuf[mspPort->offset++] = c;
 689              	 .loc 2 205 0
 690 0236 7B68     	 ldr r3,[r7,#4]
 691 0238 D3F8CF30 	 ldr r3,[r3,#207]
 692 023c 591C     	 adds r1,r3,#1
 693 023e 7A68     	 ldr r2,[r7,#4]
 694 0240 C2F8CF10 	 str r1,[r2,#207]
 695 0244 7A68     	 ldr r2,[r7,#4]
 696 0246 1344     	 add r3,r3,r2
 697 0248 FA78     	 ldrb r2,[r7,#3]
 698 024a DA72     	 strb r2,[r3,#11]
 206:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum1 ^= c;
 699              	 .loc 2 206 0
 700 024c 7B68     	 ldr r3,[r7,#4]
 701 024e 93F8D720 	 ldrb r2,[r3,#215]
 702 0252 FB78     	 ldrb r3,[r7,#3]
 703 0254 5340     	 eors r3,r3,r2
 704 0256 DAB2     	 uxtb r2,r3
 705 0258 7B68     	 ldr r3,[r7,#4]
 706 025a 83F8D720 	 strb r2,[r3,#215]
 207:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum2 = crc8_dvb_s2(mspPort->checksum2, c);
 707              	 .loc 2 207 0
 708 025e 7B68     	 ldr r3,[r7,#4]
 709 0260 93F8D820 	 ldrb r2,[r3,#216]
 710 0264 FB78     	 ldrb r3,[r7,#3]
 711 0266 1046     	 mov r0,r2
 712 0268 1946     	 mov r1,r3
 713 026a FFF7FEFF 	 bl crc8_dvb_s2
 714 026e 0346     	 mov r3,r0
 715 0270 1A46     	 mov r2,r3
 716 0272 7B68     	 ldr r3,[r7,#4]
 717 0274 83F8D820 	 strb r2,[r3,#216]
 208:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPort->offset == (sizeof(mspHeaderV2_t) + sizeof(mspHeaderV1_t))) {
 718              	 .loc 2 208 0
 719 0278 7B68     	 ldr r3,[r7,#4]
 720 027a D3F8CF30 	 ldr r3,[r3,#207]
 721 027e 072B     	 cmp r3,#7
 722 0280 2ED1     	 bne .L61
 723              	.LBB8:
 209:../cleanflight/src/main/msp/msp_serial.c ****                 mspHeaderV2_t * hdrv2 = (mspHeaderV2_t *)&mspPort->inBuf[sizeof(mspHeaderV1_t)];
 724              	 .loc 2 209 0
 725 0282 7B68     	 ldr r3,[r7,#4]
 726 0284 0D33     	 adds r3,r3,#13
 727 0286 3B61     	 str r3,[r7,#16]
 210:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->dataSize = hdrv2->size;
 728              	 .loc 2 210 0
 729 0288 3B69     	 ldr r3,[r7,#16]
 730 028a B3F80330 	 ldrh r3,[r3,#3]
 731 028e 9BB2     	 uxth r3,r3
 732 0290 1A46     	 mov r2,r3
 733 0292 7B68     	 ldr r3,[r7,#4]
 734 0294 C3F8D320 	 str r2,[r3,#211]
 211:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->cmdMSP = hdrv2->cmd;
 735              	 .loc 2 211 0
 736 0298 3B69     	 ldr r3,[r7,#16]
 737 029a B3F80130 	 ldrh r3,[r3,#1]
 738 029e 9AB2     	 uxth r2,r3
 739 02a0 7B68     	 ldr r3,[r7,#4]
 740 02a2 A3F8CB20 	 strh r2,[r3,#203]
 212:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->cmdFlags = hdrv2->flags;
 741              	 .loc 2 212 0
 742 02a6 3B69     	 ldr r3,[r7,#16]
 743 02a8 1A78     	 ldrb r2,[r3]
 744 02aa 7B68     	 ldr r3,[r7,#4]
 745 02ac 83F8CD20 	 strb r2,[r3,#205]
 213:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->offset = 0;                // re-use buffer
 746              	 .loc 2 213 0
 747 02b0 7B68     	 ldr r3,[r7,#4]
 748 02b2 0022     	 movs r2,#0
 749 02b4 83F8CF20 	 strb r2,[r3,#207]
 750 02b8 0022     	 movs r2,#0
 751 02ba 83F8D020 	 strb r2,[r3,#208]
 752 02be 0022     	 movs r2,#0
 753 02c0 83F8D120 	 strb r2,[r3,#209]
 754 02c4 0022     	 movs r2,#0
 755 02c6 83F8D220 	 strb r2,[r3,#210]
 214:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = mspPort->dataSize > 0 ? MSP_PAYLOAD_V2_OVER_V1 : MSP_CHECKSUM_V2
 756              	 .loc 2 214 0
 757 02ca 7B68     	 ldr r3,[r7,#4]
 758 02cc D3F8D330 	 ldr r3,[r3,#211]
 759 02d0 002B     	 cmp r3,#0
 760 02d2 01D0     	 beq .L62
 761              	 .loc 2 214 0 is_stmt 0 discriminator 1
 762 02d4 0822     	 movs r2,#8
 763 02d6 00E0     	 b .L63
 764              	.L62:
 765              	 .loc 2 214 0 discriminator 2
 766 02d8 0922     	 movs r2,#9
 767              	.L63:
 768              	 .loc 2 214 0 discriminator 4
 769 02da 7B68     	 ldr r3,[r7,#4]
 770 02dc 5A72     	 strb r2,[r3,#9]
 771              	.LBE8:
 215:../cleanflight/src/main/msp/msp_serial.c ****             }
 216:../cleanflight/src/main/msp/msp_serial.c ****             break;
 772              	 .loc 2 216 0 is_stmt 1 discriminator 4
 773 02de C5E0     	 b .L38
 774              	.L61:
 775              	 .loc 2 216 0 is_stmt 0
 776 02e0 C4E0     	 b .L38
 777              	.L30:
 217:../cleanflight/src/main/msp/msp_serial.c **** 
 218:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_PAYLOAD_V2_OVER_V1:
 219:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum2 = crc8_dvb_s2(mspPort->checksum2, c);
 778              	 .loc 2 219 0 is_stmt 1
 779 02e2 7B68     	 ldr r3,[r7,#4]
 780 02e4 93F8D820 	 ldrb r2,[r3,#216]
 781 02e8 FB78     	 ldrb r3,[r7,#3]
 782 02ea 1046     	 mov r0,r2
 783 02ec 1946     	 mov r1,r3
 784 02ee FFF7FEFF 	 bl crc8_dvb_s2
 785 02f2 0346     	 mov r3,r0
 786 02f4 1A46     	 mov r2,r3
 787 02f6 7B68     	 ldr r3,[r7,#4]
 788 02f8 83F8D820 	 strb r2,[r3,#216]
 220:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum1 ^= c;
 789              	 .loc 2 220 0
 790 02fc 7B68     	 ldr r3,[r7,#4]
 791 02fe 93F8D720 	 ldrb r2,[r3,#215]
 792 0302 FB78     	 ldrb r3,[r7,#3]
 793 0304 5340     	 eors r3,r3,r2
 794 0306 DAB2     	 uxtb r2,r3
 795 0308 7B68     	 ldr r3,[r7,#4]
 796 030a 83F8D720 	 strb r2,[r3,#215]
 221:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->inBuf[mspPort->offset++] = c;
 797              	 .loc 2 221 0
 798 030e 7B68     	 ldr r3,[r7,#4]
 799 0310 D3F8CF30 	 ldr r3,[r3,#207]
 800 0314 591C     	 adds r1,r3,#1
 801 0316 7A68     	 ldr r2,[r7,#4]
 802 0318 C2F8CF10 	 str r1,[r2,#207]
 803 031c 7A68     	 ldr r2,[r7,#4]
 804 031e 1344     	 add r3,r3,r2
 805 0320 FA78     	 ldrb r2,[r7,#3]
 806 0322 DA72     	 strb r2,[r3,#11]
 222:../cleanflight/src/main/msp/msp_serial.c **** 
 223:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPort->offset == mspPort->dataSize) {
 807              	 .loc 2 223 0
 808 0324 7B68     	 ldr r3,[r7,#4]
 809 0326 D3F8CF20 	 ldr r2,[r3,#207]
 810 032a 7B68     	 ldr r3,[r7,#4]
 811 032c D3F8D330 	 ldr r3,[r3,#211]
 812 0330 9A42     	 cmp r2,r3
 813 0332 03D1     	 bne .L64
 224:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_CHECKSUM_V2_OVER_V1;
 814              	 .loc 2 224 0
 815 0334 7B68     	 ldr r3,[r7,#4]
 816 0336 0922     	 movs r2,#9
 817 0338 5A72     	 strb r2,[r3,#9]
 225:../cleanflight/src/main/msp/msp_serial.c ****             }
 226:../cleanflight/src/main/msp/msp_serial.c ****             break;
 818              	 .loc 2 226 0
 819 033a 97E0     	 b .L38
 820              	.L64:
 821 033c 96E0     	 b .L38
 822              	.L31:
 227:../cleanflight/src/main/msp/msp_serial.c **** 
 228:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_CHECKSUM_V2_OVER_V1:
 229:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum1 ^= c;
 823              	 .loc 2 229 0
 824 033e 7B68     	 ldr r3,[r7,#4]
 825 0340 93F8D720 	 ldrb r2,[r3,#215]
 826 0344 FB78     	 ldrb r3,[r7,#3]
 827 0346 5340     	 eors r3,r3,r2
 828 0348 DAB2     	 uxtb r2,r3
 829 034a 7B68     	 ldr r3,[r7,#4]
 830 034c 83F8D720 	 strb r2,[r3,#215]
 230:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPort->checksum2 == c) {
 831              	 .loc 2 230 0
 832 0350 7B68     	 ldr r3,[r7,#4]
 833 0352 93F8D830 	 ldrb r3,[r3,#216]
 834 0356 FA78     	 ldrb r2,[r7,#3]
 835 0358 9A42     	 cmp r2,r3
 836 035a 03D1     	 bne .L65
 231:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_CHECKSUM_V1; // Checksum 2 correct - verify v1 checksum
 837              	 .loc 2 231 0
 838 035c 7B68     	 ldr r3,[r7,#4]
 839 035e 0622     	 movs r2,#6
 840 0360 5A72     	 strb r2,[r3,#9]
 232:../cleanflight/src/main/msp/msp_serial.c ****             } else {
 233:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_IDLE;
 234:../cleanflight/src/main/msp/msp_serial.c ****             }
 235:../cleanflight/src/main/msp/msp_serial.c ****             break;
 841              	 .loc 2 235 0
 842 0362 83E0     	 b .L38
 843              	.L65:
 233:../cleanflight/src/main/msp/msp_serial.c ****             }
 844              	 .loc 2 233 0
 845 0364 7B68     	 ldr r3,[r7,#4]
 846 0366 0022     	 movs r2,#0
 847 0368 5A72     	 strb r2,[r3,#9]
 848              	 .loc 2 235 0
 849 036a 7FE0     	 b .L38
 850              	.L32:
 236:../cleanflight/src/main/msp/msp_serial.c **** 
 237:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_HEADER_V2_NATIVE:
 238:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->inBuf[mspPort->offset++] = c;
 851              	 .loc 2 238 0
 852 036c 7B68     	 ldr r3,[r7,#4]
 853 036e D3F8CF30 	 ldr r3,[r3,#207]
 854 0372 591C     	 adds r1,r3,#1
 855 0374 7A68     	 ldr r2,[r7,#4]
 856 0376 C2F8CF10 	 str r1,[r2,#207]
 857 037a 7A68     	 ldr r2,[r7,#4]
 858 037c 1344     	 add r3,r3,r2
 859 037e FA78     	 ldrb r2,[r7,#3]
 860 0380 DA72     	 strb r2,[r3,#11]
 239:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum2 = crc8_dvb_s2(mspPort->checksum2, c);
 861              	 .loc 2 239 0
 862 0382 7B68     	 ldr r3,[r7,#4]
 863 0384 93F8D820 	 ldrb r2,[r3,#216]
 864 0388 FB78     	 ldrb r3,[r7,#3]
 865 038a 1046     	 mov r0,r2
 866 038c 1946     	 mov r1,r3
 867 038e FFF7FEFF 	 bl crc8_dvb_s2
 868 0392 0346     	 mov r3,r0
 869 0394 1A46     	 mov r2,r3
 870 0396 7B68     	 ldr r3,[r7,#4]
 871 0398 83F8D820 	 strb r2,[r3,#216]
 240:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPort->offset == sizeof(mspHeaderV2_t)) {
 872              	 .loc 2 240 0
 873 039c 7B68     	 ldr r3,[r7,#4]
 874 039e D3F8CF30 	 ldr r3,[r3,#207]
 875 03a2 052B     	 cmp r3,#5
 876 03a4 2ED1     	 bne .L67
 877              	.LBB9:
 241:../cleanflight/src/main/msp/msp_serial.c ****                 mspHeaderV2_t * hdrv2 = (mspHeaderV2_t *)&mspPort->inBuf[0];
 878              	 .loc 2 241 0
 879 03a6 7B68     	 ldr r3,[r7,#4]
 880 03a8 0B33     	 adds r3,r3,#11
 881 03aa FB60     	 str r3,[r7,#12]
 242:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->dataSize = hdrv2->size;
 882              	 .loc 2 242 0
 883 03ac FB68     	 ldr r3,[r7,#12]
 884 03ae B3F80330 	 ldrh r3,[r3,#3]
 885 03b2 9BB2     	 uxth r3,r3
 886 03b4 1A46     	 mov r2,r3
 887 03b6 7B68     	 ldr r3,[r7,#4]
 888 03b8 C3F8D320 	 str r2,[r3,#211]
 243:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->cmdMSP = hdrv2->cmd;
 889              	 .loc 2 243 0
 890 03bc FB68     	 ldr r3,[r7,#12]
 891 03be B3F80130 	 ldrh r3,[r3,#1]
 892 03c2 9AB2     	 uxth r2,r3
 893 03c4 7B68     	 ldr r3,[r7,#4]
 894 03c6 A3F8CB20 	 strh r2,[r3,#203]
 244:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->cmdFlags = hdrv2->flags;
 895              	 .loc 2 244 0
 896 03ca FB68     	 ldr r3,[r7,#12]
 897 03cc 1A78     	 ldrb r2,[r3]
 898 03ce 7B68     	 ldr r3,[r7,#4]
 899 03d0 83F8CD20 	 strb r2,[r3,#205]
 245:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->offset = 0;                // re-use buffer
 900              	 .loc 2 245 0
 901 03d4 7B68     	 ldr r3,[r7,#4]
 902 03d6 0022     	 movs r2,#0
 903 03d8 83F8CF20 	 strb r2,[r3,#207]
 904 03dc 0022     	 movs r2,#0
 905 03de 83F8D020 	 strb r2,[r3,#208]
 906 03e2 0022     	 movs r2,#0
 907 03e4 83F8D120 	 strb r2,[r3,#209]
 908 03e8 0022     	 movs r2,#0
 909 03ea 83F8D220 	 strb r2,[r3,#210]
 246:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = mspPort->dataSize > 0 ? MSP_PAYLOAD_V2_NATIVE : MSP_CHECKSUM_V2_
 910              	 .loc 2 246 0
 911 03ee 7B68     	 ldr r3,[r7,#4]
 912 03f0 D3F8D330 	 ldr r3,[r3,#211]
 913 03f4 002B     	 cmp r3,#0
 914 03f6 01D0     	 beq .L68
 915              	 .loc 2 246 0 is_stmt 0 discriminator 1
 916 03f8 0B22     	 movs r2,#11
 917 03fa 00E0     	 b .L69
 918              	.L68:
 919              	 .loc 2 246 0 discriminator 2
 920 03fc 0C22     	 movs r2,#12
 921              	.L69:
 922              	 .loc 2 246 0 discriminator 4
 923 03fe 7B68     	 ldr r3,[r7,#4]
 924 0400 5A72     	 strb r2,[r3,#9]
 925              	.LBE9:
 247:../cleanflight/src/main/msp/msp_serial.c ****             }
 248:../cleanflight/src/main/msp/msp_serial.c ****             break;
 926              	 .loc 2 248 0 is_stmt 1 discriminator 4
 927 0402 33E0     	 b .L38
 928              	.L67:
 929              	 .loc 2 248 0 is_stmt 0
 930 0404 32E0     	 b .L38
 931              	.L33:
 249:../cleanflight/src/main/msp/msp_serial.c **** 
 250:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_PAYLOAD_V2_NATIVE:
 251:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->checksum2 = crc8_dvb_s2(mspPort->checksum2, c);
 932              	 .loc 2 251 0 is_stmt 1
 933 0406 7B68     	 ldr r3,[r7,#4]
 934 0408 93F8D820 	 ldrb r2,[r3,#216]
 935 040c FB78     	 ldrb r3,[r7,#3]
 936 040e 1046     	 mov r0,r2
 937 0410 1946     	 mov r1,r3
 938 0412 FFF7FEFF 	 bl crc8_dvb_s2
 939 0416 0346     	 mov r3,r0
 940 0418 1A46     	 mov r2,r3
 941 041a 7B68     	 ldr r3,[r7,#4]
 942 041c 83F8D820 	 strb r2,[r3,#216]
 252:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->inBuf[mspPort->offset++] = c;
 943              	 .loc 2 252 0
 944 0420 7B68     	 ldr r3,[r7,#4]
 945 0422 D3F8CF30 	 ldr r3,[r3,#207]
 946 0426 591C     	 adds r1,r3,#1
 947 0428 7A68     	 ldr r2,[r7,#4]
 948 042a C2F8CF10 	 str r1,[r2,#207]
 949 042e 7A68     	 ldr r2,[r7,#4]
 950 0430 1344     	 add r3,r3,r2
 951 0432 FA78     	 ldrb r2,[r7,#3]
 952 0434 DA72     	 strb r2,[r3,#11]
 253:../cleanflight/src/main/msp/msp_serial.c **** 
 254:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPort->offset == mspPort->dataSize) {
 953              	 .loc 2 254 0
 954 0436 7B68     	 ldr r3,[r7,#4]
 955 0438 D3F8CF20 	 ldr r2,[r3,#207]
 956 043c 7B68     	 ldr r3,[r7,#4]
 957 043e D3F8D330 	 ldr r3,[r3,#211]
 958 0442 9A42     	 cmp r2,r3
 959 0444 03D1     	 bne .L70
 255:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_CHECKSUM_V2_NATIVE;
 960              	 .loc 2 255 0
 961 0446 7B68     	 ldr r3,[r7,#4]
 962 0448 0C22     	 movs r2,#12
 963 044a 5A72     	 strb r2,[r3,#9]
 256:../cleanflight/src/main/msp/msp_serial.c ****             }
 257:../cleanflight/src/main/msp/msp_serial.c ****             break;
 964              	 .loc 2 257 0
 965 044c 0EE0     	 b .L38
 966              	.L70:
 967 044e 0DE0     	 b .L38
 968              	.L34:
 258:../cleanflight/src/main/msp/msp_serial.c **** 
 259:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_CHECKSUM_V2_NATIVE:
 260:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPort->checksum2 == c) {
 969              	 .loc 2 260 0
 970 0450 7B68     	 ldr r3,[r7,#4]
 971 0452 93F8D830 	 ldrb r3,[r3,#216]
 972 0456 FA78     	 ldrb r2,[r7,#3]
 973 0458 9A42     	 cmp r2,r3
 974 045a 03D1     	 bne .L71
 261:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_COMMAND_RECEIVED;
 975              	 .loc 2 261 0
 976 045c 7B68     	 ldr r3,[r7,#4]
 977 045e 0D22     	 movs r2,#13
 978 0460 5A72     	 strb r2,[r3,#9]
 262:../cleanflight/src/main/msp/msp_serial.c ****             } else {
 263:../cleanflight/src/main/msp/msp_serial.c ****                 mspPort->c_state = MSP_IDLE;
 264:../cleanflight/src/main/msp/msp_serial.c ****             }
 265:../cleanflight/src/main/msp/msp_serial.c ****             break;
 979              	 .loc 2 265 0
 980 0462 02E0     	 b .L76
 981              	.L71:
 263:../cleanflight/src/main/msp/msp_serial.c ****             }
 982              	 .loc 2 263 0
 983 0464 7B68     	 ldr r3,[r7,#4]
 984 0466 0022     	 movs r2,#0
 985 0468 5A72     	 strb r2,[r3,#9]
 986              	.L76:
 987              	 .loc 2 265 0
 988 046a 00BF     	 nop
 989              	.L38:
 266:../cleanflight/src/main/msp/msp_serial.c ****     }
 267:../cleanflight/src/main/msp/msp_serial.c **** 
 268:../cleanflight/src/main/msp/msp_serial.c ****     return true;
 990              	 .loc 2 268 0
 991 046c 0123     	 movs r3,#1
 992              	.L37:
 269:../cleanflight/src/main/msp/msp_serial.c **** }
 993              	 .loc 2 269 0
 994 046e 1846     	 mov r0,r3
 995 0470 1837     	 adds r7,r7,#24
 996              	.LCFI22:
 997              	 .cfi_def_cfa_offset 8
 998 0472 BD46     	 mov sp,r7
 999              	.LCFI23:
 1000              	 .cfi_def_cfa_register 13
 1001              	 
 1002 0474 80BD     	 pop {r7,pc}
 1003              	 .cfi_endproc
 1004              	.LFE534:
 1006 0476 00BF     	 .section .text.mspSerialChecksumBuf,"ax",%progbits
 1007              	 .align 2
 1008              	 .thumb
 1009              	 .thumb_func
 1011              	mspSerialChecksumBuf:
 1012              	.LFB535:
 270:../cleanflight/src/main/msp/msp_serial.c **** 
 271:../cleanflight/src/main/msp/msp_serial.c **** static uint8_t mspSerialChecksumBuf(uint8_t checksum, const uint8_t *data, int len)
 272:../cleanflight/src/main/msp/msp_serial.c **** {
 1013              	 .loc 2 272 0
 1014              	 .cfi_startproc
 1015              	 
 1016              	 
 1017              	 
 1018 0000 80B4     	 push {r7}
 1019              	.LCFI24:
 1020              	 .cfi_def_cfa_offset 4
 1021              	 .cfi_offset 7,-4
 1022 0002 85B0     	 sub sp,sp,#20
 1023              	.LCFI25:
 1024              	 .cfi_def_cfa_offset 24
 1025 0004 00AF     	 add r7,sp,#0
 1026              	.LCFI26:
 1027              	 .cfi_def_cfa_register 7
 1028 0006 0346     	 mov r3,r0
 1029 0008 B960     	 str r1,[r7,#8]
 1030 000a 7A60     	 str r2,[r7,#4]
 1031 000c FB73     	 strb r3,[r7,#15]
 273:../cleanflight/src/main/msp/msp_serial.c ****     while (len-- > 0) {
 1032              	 .loc 2 273 0
 1033 000e 06E0     	 b .L78
 1034              	.L79:
 274:../cleanflight/src/main/msp/msp_serial.c ****         checksum ^= *data++;
 1035              	 .loc 2 274 0
 1036 0010 BB68     	 ldr r3,[r7,#8]
 1037 0012 5A1C     	 adds r2,r3,#1
 1038 0014 BA60     	 str r2,[r7,#8]
 1039 0016 1A78     	 ldrb r2,[r3]
 1040 0018 FB7B     	 ldrb r3,[r7,#15]
 1041 001a 5340     	 eors r3,r3,r2
 1042 001c FB73     	 strb r3,[r7,#15]
 1043              	.L78:
 273:../cleanflight/src/main/msp/msp_serial.c ****     while (len-- > 0) {
 1044              	 .loc 2 273 0
 1045 001e 7B68     	 ldr r3,[r7,#4]
 1046 0020 5A1E     	 subs r2,r3,#1
 1047 0022 7A60     	 str r2,[r7,#4]
 1048 0024 002B     	 cmp r3,#0
 1049 0026 F3DC     	 bgt .L79
 275:../cleanflight/src/main/msp/msp_serial.c ****     }
 276:../cleanflight/src/main/msp/msp_serial.c ****     return checksum;
 1050              	 .loc 2 276 0
 1051 0028 FB7B     	 ldrb r3,[r7,#15]
 277:../cleanflight/src/main/msp/msp_serial.c **** }
 1052              	 .loc 2 277 0
 1053 002a 1846     	 mov r0,r3
 1054 002c 1437     	 adds r7,r7,#20
 1055              	.LCFI27:
 1056              	 .cfi_def_cfa_offset 4
 1057 002e BD46     	 mov sp,r7
 1058              	.LCFI28:
 1059              	 .cfi_def_cfa_register 13
 1060              	 
 1061 0030 5DF8047B 	 ldr r7,[sp],#4
 1062              	.LCFI29:
 1063              	 .cfi_restore 7
 1064              	 .cfi_def_cfa_offset 0
 1065 0034 7047     	 bx lr
 1066              	 .cfi_endproc
 1067              	.LFE535:
 1069 0036 00BF     	 .section .text.mspSerialSendFrame,"ax",%progbits
 1070              	 .align 2
 1071              	 .thumb
 1072              	 .thumb_func
 1074              	mspSerialSendFrame:
 1075              	.LFB536:
 278:../cleanflight/src/main/msp/msp_serial.c **** 
 279:../cleanflight/src/main/msp/msp_serial.c **** #define JUMBO_FRAME_SIZE_LIMIT 255
 280:../cleanflight/src/main/msp/msp_serial.c **** static int mspSerialSendFrame(mspPort_t *msp, const uint8_t * hdr, int hdrLen, const uint8_t * data
 281:../cleanflight/src/main/msp/msp_serial.c **** {
 1076              	 .loc 2 281 0
 1077              	 .cfi_startproc
 1078              	 
 1079              	 
 1080 0000 80B5     	 push {r7,lr}
 1081              	.LCFI30:
 1082              	 .cfi_def_cfa_offset 8
 1083              	 .cfi_offset 7,-8
 1084              	 .cfi_offset 14,-4
 1085 0002 86B0     	 sub sp,sp,#24
 1086              	.LCFI31:
 1087              	 .cfi_def_cfa_offset 32
 1088 0004 00AF     	 add r7,sp,#0
 1089              	.LCFI32:
 1090              	 .cfi_def_cfa_register 7
 1091 0006 F860     	 str r0,[r7,#12]
 1092 0008 B960     	 str r1,[r7,#8]
 1093 000a 7A60     	 str r2,[r7,#4]
 1094 000c 3B60     	 str r3,[r7]
 282:../cleanflight/src/main/msp/msp_serial.c ****     // We are allowed to send out the response if
 283:../cleanflight/src/main/msp/msp_serial.c ****     //  a) TX buffer is completely empty (we are talking to well-behaving party that follows reques
 284:../cleanflight/src/main/msp/msp_serial.c ****     //     this allows us to transmit jumbo frames bigger than TX buffer (serialWriteBuf will block
 285:../cleanflight/src/main/msp/msp_serial.c ****     //  b) Response fits into TX buffer
 286:../cleanflight/src/main/msp/msp_serial.c ****     const int totalFrameLength = hdrLen + dataLen + crcLen;
 1095              	 .loc 2 286 0
 1096 000e 7A68     	 ldr r2,[r7,#4]
 1097 0010 3B6A     	 ldr r3,[r7,#32]
 1098 0012 1A44     	 add r2,r2,r3
 1099 0014 BB6A     	 ldr r3,[r7,#40]
 1100 0016 1344     	 add r3,r3,r2
 1101 0018 7B61     	 str r3,[r7,#20]
 287:../cleanflight/src/main/msp/msp_serial.c ****     if (!isSerialTransmitBufferEmpty(msp->port) && ((int)serialTxBytesFree(msp->port) < totalFrameL
 1102              	 .loc 2 287 0
 1103 001a FB68     	 ldr r3,[r7,#12]
 1104 001c 1B68     	 ldr r3,[r3]
 1105 001e 1846     	 mov r0,r3
 1106 0020 FFF7FEFF 	 bl isSerialTransmitBufferEmpty
 1107 0024 0346     	 mov r3,r0
 1108 0026 83F00103 	 eor r3,r3,#1
 1109 002a DBB2     	 uxtb r3,r3
 1110 002c 002B     	 cmp r3,#0
 1111 002e 0BD0     	 beq .L82
 1112              	 .loc 2 287 0 is_stmt 0 discriminator 1
 1113 0030 FB68     	 ldr r3,[r7,#12]
 1114 0032 1B68     	 ldr r3,[r3]
 1115 0034 1846     	 mov r0,r3
 1116 0036 FFF7FEFF 	 bl serialTxBytesFree
 1117 003a 0346     	 mov r3,r0
 1118 003c 1A46     	 mov r2,r3
 1119 003e 7B69     	 ldr r3,[r7,#20]
 1120 0040 9A42     	 cmp r2,r3
 1121 0042 01DA     	 bge .L82
 288:../cleanflight/src/main/msp/msp_serial.c ****         return 0;
 1122              	 .loc 2 288 0 is_stmt 1
 1123 0044 0023     	 movs r3,#0
 1124 0046 1FE0     	 b .L83
 1125              	.L82:
 289:../cleanflight/src/main/msp/msp_serial.c **** 
 290:../cleanflight/src/main/msp/msp_serial.c ****     // Transmit frame
 291:../cleanflight/src/main/msp/msp_serial.c ****     serialBeginWrite(msp->port);
 1126              	 .loc 2 291 0
 1127 0048 FB68     	 ldr r3,[r7,#12]
 1128 004a 1B68     	 ldr r3,[r3]
 1129 004c 1846     	 mov r0,r3
 1130 004e FFF7FEFF 	 bl serialBeginWrite
 292:../cleanflight/src/main/msp/msp_serial.c ****     serialWriteBuf(msp->port, hdr, hdrLen);
 1131              	 .loc 2 292 0
 1132 0052 FB68     	 ldr r3,[r7,#12]
 1133 0054 1B68     	 ldr r3,[r3]
 1134 0056 1846     	 mov r0,r3
 1135 0058 B968     	 ldr r1,[r7,#8]
 1136 005a 7A68     	 ldr r2,[r7,#4]
 1137 005c FFF7FEFF 	 bl serialWriteBuf
 293:../cleanflight/src/main/msp/msp_serial.c ****     serialWriteBuf(msp->port, data, dataLen);
 1138              	 .loc 2 293 0
 1139 0060 FB68     	 ldr r3,[r7,#12]
 1140 0062 1B68     	 ldr r3,[r3]
 1141 0064 1846     	 mov r0,r3
 1142 0066 3968     	 ldr r1,[r7]
 1143 0068 3A6A     	 ldr r2,[r7,#32]
 1144 006a FFF7FEFF 	 bl serialWriteBuf
 294:../cleanflight/src/main/msp/msp_serial.c ****     serialWriteBuf(msp->port, crc, crcLen);
 1145              	 .loc 2 294 0
 1146 006e FB68     	 ldr r3,[r7,#12]
 1147 0070 1B68     	 ldr r3,[r3]
 1148 0072 1846     	 mov r0,r3
 1149 0074 796A     	 ldr r1,[r7,#36]
 1150 0076 BA6A     	 ldr r2,[r7,#40]
 1151 0078 FFF7FEFF 	 bl serialWriteBuf
 295:../cleanflight/src/main/msp/msp_serial.c ****     serialEndWrite(msp->port);
 1152              	 .loc 2 295 0
 1153 007c FB68     	 ldr r3,[r7,#12]
 1154 007e 1B68     	 ldr r3,[r3]
 1155 0080 1846     	 mov r0,r3
 1156 0082 FFF7FEFF 	 bl serialEndWrite
 296:../cleanflight/src/main/msp/msp_serial.c **** 
 297:../cleanflight/src/main/msp/msp_serial.c ****     return totalFrameLength;
 1157              	 .loc 2 297 0
 1158 0086 7B69     	 ldr r3,[r7,#20]
 1159              	.L83:
 298:../cleanflight/src/main/msp/msp_serial.c **** }
 1160              	 .loc 2 298 0
 1161 0088 1846     	 mov r0,r3
 1162 008a 1837     	 adds r7,r7,#24
 1163              	.LCFI33:
 1164              	 .cfi_def_cfa_offset 8
 1165 008c BD46     	 mov sp,r7
 1166              	.LCFI34:
 1167              	 .cfi_def_cfa_register 13
 1168              	 
 1169 008e 80BD     	 pop {r7,pc}
 1170              	 .cfi_endproc
 1171              	.LFE536:
 1173              	 .section .text.mspSerialEncode,"ax",%progbits
 1174              	 .align 2
 1175              	 .thumb
 1176              	 .thumb_func
 1178              	mspSerialEncode:
 1179              	.LFB537:
 299:../cleanflight/src/main/msp/msp_serial.c **** 
 300:../cleanflight/src/main/msp/msp_serial.c **** static int mspSerialEncode(mspPort_t *msp, mspPacket_t *packet, mspVersion_e mspVersion)
 301:../cleanflight/src/main/msp/msp_serial.c **** {
 1180              	 .loc 2 301 0
 1181              	 .cfi_startproc
 1182              	 
 1183              	 
 1184 0000 90B5     	 push {r4,r7,lr}
 1185              	.LCFI35:
 1186              	 .cfi_def_cfa_offset 12
 1187              	 .cfi_offset 4,-12
 1188              	 .cfi_offset 7,-8
 1189              	 .cfi_offset 14,-4
 1190 0002 99B0     	 sub sp,sp,#100
 1191              	.LCFI36:
 1192              	 .cfi_def_cfa_offset 112
 1193 0004 04AF     	 add r7,sp,#16
 1194              	.LCFI37:
 1195              	 .cfi_def_cfa 7,96
 1196 0006 F860     	 str r0,[r7,#12]
 1197 0008 B960     	 str r1,[r7,#8]
 1198 000a 1346     	 mov r3,r2
 1199 000c FB71     	 strb r3,[r7,#7]
 302:../cleanflight/src/main/msp/msp_serial.c ****     static const uint8_t mspMagic[MSP_VERSION_COUNT] = MSP_VERSION_MAGIC_INITIALIZER;
 303:../cleanflight/src/main/msp/msp_serial.c ****     const int dataLen = sbufBytesRemaining(&packet->buf);
 1200              	 .loc 2 303 0
 1201 000e BB68     	 ldr r3,[r7,#8]
 1202 0010 1846     	 mov r0,r3
 1203 0012 FFF7FEFF 	 bl sbufBytesRemaining
 1204 0016 7864     	 str r0,[r7,#68]
 304:../cleanflight/src/main/msp/msp_serial.c ****     uint8_t hdrBuf[16] = { '$', mspMagic[mspVersion], packet->result == MSP_RESULT_ERROR ? '!' : '>
 1205              	 .loc 2 304 0
 1206 0018 07F11403 	 add r3,r7,#20
 1207 001c 0022     	 movs r2,#0
 1208 001e 1A60     	 str r2,[r3]
 1209 0020 0433     	 adds r3,r3,#4
 1210 0022 0022     	 movs r2,#0
 1211 0024 1A60     	 str r2,[r3]
 1212 0026 0433     	 adds r3,r3,#4
 1213 0028 0022     	 movs r2,#0
 1214 002a 1A60     	 str r2,[r3]
 1215 002c 0433     	 adds r3,r3,#4
 1216 002e 0022     	 movs r2,#0
 1217 0030 1A60     	 str r2,[r3]
 1218 0032 0433     	 adds r3,r3,#4
 1219 0034 2423     	 movs r3,#36
 1220 0036 3B75     	 strb r3,[r7,#20]
 1221 0038 FB79     	 ldrb r3,[r7,#7]
 1222 003a A84A     	 ldr r2,.L97
 1223 003c D35C     	 ldrb r3,[r2,r3]
 1224 003e 7B75     	 strb r3,[r7,#21]
 1225 0040 BB68     	 ldr r3,[r7,#8]
 1226 0042 B3F90B30 	 ldrsh r3,[r3,#11]
 1227 0046 9BB2     	 uxth r3,r3
 1228 0048 1BB2     	 sxth r3,r3
 1229 004a B3F1FF3F 	 cmp r3,#-1
 1230 004e 01D1     	 bne .L85
 1231              	 .loc 2 304 0 is_stmt 0 discriminator 1
 1232 0050 2123     	 movs r3,#33
 1233 0052 00E0     	 b .L86
 1234              	.L85:
 1235              	 .loc 2 304 0 discriminator 2
 1236 0054 3E23     	 movs r3,#62
 1237              	.L86:
 1238              	 .loc 2 304 0 discriminator 4
 1239 0056 BB75     	 strb r3,[r7,#22]
 305:../cleanflight/src/main/msp/msp_serial.c ****     uint8_t crcBuf[2];
 306:../cleanflight/src/main/msp/msp_serial.c ****     uint8_t checksum;
 307:../cleanflight/src/main/msp/msp_serial.c ****     int hdrLen = 3;
 1240              	 .loc 2 307 0 is_stmt 1 discriminator 4
 1241 0058 0323     	 movs r3,#3
 1242 005a FB64     	 str r3,[r7,#76]
 308:../cleanflight/src/main/msp/msp_serial.c ****     int crcLen = 0;
 1243              	 .loc 2 308 0 discriminator 4
 1244 005c 0023     	 movs r3,#0
 1245 005e BB64     	 str r3,[r7,#72]
 309:../cleanflight/src/main/msp/msp_serial.c **** 
 310:../cleanflight/src/main/msp/msp_serial.c ****     #define V1_CHECKSUM_STARTPOS 3
 311:../cleanflight/src/main/msp/msp_serial.c ****     if (mspVersion == MSP_V1) {
 1246              	 .loc 2 311 0 discriminator 4
 1247 0060 FB79     	 ldrb r3,[r7,#7]
 1248 0062 002B     	 cmp r3,#0
 1249 0064 4BD1     	 bne .L87
 1250              	.LBB10:
 312:../cleanflight/src/main/msp/msp_serial.c ****         mspHeaderV1_t * hdrV1 = (mspHeaderV1_t *)&hdrBuf[hdrLen];
 1251              	 .loc 2 312 0
 1252 0066 07F11402 	 add r2,r7,#20
 1253 006a FB6C     	 ldr r3,[r7,#76]
 1254 006c 1344     	 add r3,r3,r2
 1255 006e BB62     	 str r3,[r7,#40]
 313:../cleanflight/src/main/msp/msp_serial.c ****         hdrLen += sizeof(mspHeaderV1_t);
 1256              	 .loc 2 313 0
 1257 0070 FB6C     	 ldr r3,[r7,#76]
 1258 0072 0233     	 adds r3,r3,#2
 1259 0074 FB64     	 str r3,[r7,#76]
 314:../cleanflight/src/main/msp/msp_serial.c ****         hdrV1->cmd = packet->cmd;
 1260              	 .loc 2 314 0
 1261 0076 BB68     	 ldr r3,[r7,#8]
 1262 0078 B3F90830 	 ldrsh r3,[r3,#8]
 1263 007c 9BB2     	 uxth r3,r3
 1264 007e DAB2     	 uxtb r2,r3
 1265 0080 BB6A     	 ldr r3,[r7,#40]
 1266 0082 5A70     	 strb r2,[r3,#1]
 315:../cleanflight/src/main/msp/msp_serial.c **** 
 316:../cleanflight/src/main/msp/msp_serial.c ****         // Add JUMBO-frame header if necessary
 317:../cleanflight/src/main/msp/msp_serial.c ****         if (dataLen >= JUMBO_FRAME_SIZE_LIMIT) {
 1267              	 .loc 2 317 0
 1268 0084 7B6C     	 ldr r3,[r7,#68]
 1269 0086 FE2B     	 cmp r3,#254
 1270 0088 0FDD     	 ble .L88
 1271              	.LBB11:
 318:../cleanflight/src/main/msp/msp_serial.c ****             mspHeaderJUMBO_t * hdrJUMBO = (mspHeaderJUMBO_t *)&hdrBuf[hdrLen];
 1272              	 .loc 2 318 0
 1273 008a 07F11402 	 add r2,r7,#20
 1274 008e FB6C     	 ldr r3,[r7,#76]
 1275 0090 1344     	 add r3,r3,r2
 1276 0092 7B62     	 str r3,[r7,#36]
 319:../cleanflight/src/main/msp/msp_serial.c ****             hdrLen += sizeof(mspHeaderJUMBO_t);
 1277              	 .loc 2 319 0
 1278 0094 FB6C     	 ldr r3,[r7,#76]
 1279 0096 0233     	 adds r3,r3,#2
 1280 0098 FB64     	 str r3,[r7,#76]
 320:../cleanflight/src/main/msp/msp_serial.c **** 
 321:../cleanflight/src/main/msp/msp_serial.c ****             hdrV1->size = JUMBO_FRAME_SIZE_LIMIT;
 1281              	 .loc 2 321 0
 1282 009a BB6A     	 ldr r3,[r7,#40]
 1283 009c FF22     	 movs r2,#255
 1284 009e 1A70     	 strb r2,[r3]
 322:../cleanflight/src/main/msp/msp_serial.c ****             hdrJUMBO->size = dataLen;
 1285              	 .loc 2 322 0
 1286 00a0 7B6C     	 ldr r3,[r7,#68]
 1287 00a2 9AB2     	 uxth r2,r3
 1288 00a4 7B6A     	 ldr r3,[r7,#36]
 1289 00a6 1A80     	 strh r2,[r3]
 1290              	.LBE11:
 1291 00a8 03E0     	 b .L89
 1292              	.L88:
 323:../cleanflight/src/main/msp/msp_serial.c ****         }
 324:../cleanflight/src/main/msp/msp_serial.c ****         else {
 325:../cleanflight/src/main/msp/msp_serial.c ****             hdrV1->size = dataLen;
 1293              	 .loc 2 325 0
 1294 00aa 7B6C     	 ldr r3,[r7,#68]
 1295 00ac DAB2     	 uxtb r2,r3
 1296 00ae BB6A     	 ldr r3,[r7,#40]
 1297 00b0 1A70     	 strb r2,[r3]
 1298              	.L89:
 326:../cleanflight/src/main/msp/msp_serial.c ****         }
 327:../cleanflight/src/main/msp/msp_serial.c **** 
 328:../cleanflight/src/main/msp/msp_serial.c ****         // Pre-calculate CRC
 329:../cleanflight/src/main/msp/msp_serial.c ****         checksum = mspSerialChecksumBuf(0, hdrBuf + V1_CHECKSUM_STARTPOS, hdrLen - V1_CHECKSUM_STAR
 1299              	 .loc 2 329 0
 1300 00b2 FB6C     	 ldr r3,[r7,#76]
 1301 00b4 DA1E     	 subs r2,r3,#3
 1302 00b6 07F11403 	 add r3,r7,#20
 1303 00ba 0333     	 adds r3,r3,#3
 1304 00bc 0020     	 movs r0,#0
 1305 00be 1946     	 mov r1,r3
 1306 00c0 FFF7FEFF 	 bl mspSerialChecksumBuf
 1307 00c4 0346     	 mov r3,r0
 1308 00c6 87F83F30 	 strb r3,[r7,#63]
 330:../cleanflight/src/main/msp/msp_serial.c ****         checksum = mspSerialChecksumBuf(checksum, sbufPtr(&packet->buf), dataLen);
 1309              	 .loc 2 330 0
 1310 00ca BB68     	 ldr r3,[r7,#8]
 1311 00cc 1846     	 mov r0,r3
 1312 00ce FFF7FEFF 	 bl sbufPtr
 1313 00d2 0246     	 mov r2,r0
 1314 00d4 97F83F30 	 ldrb r3,[r7,#63]
 1315 00d8 1846     	 mov r0,r3
 1316 00da 1146     	 mov r1,r2
 1317 00dc 7A6C     	 ldr r2,[r7,#68]
 1318 00de FFF7FEFF 	 bl mspSerialChecksumBuf
 1319 00e2 0346     	 mov r3,r0
 1320 00e4 87F83F30 	 strb r3,[r7,#63]
 331:../cleanflight/src/main/msp/msp_serial.c ****         crcBuf[crcLen++] = checksum;
 1321              	 .loc 2 331 0
 1322 00e8 BB6C     	 ldr r3,[r7,#72]
 1323 00ea 5A1C     	 adds r2,r3,#1
 1324 00ec BA64     	 str r2,[r7,#72]
 1325 00ee 07F15002 	 add r2,r7,#80
 1326 00f2 1344     	 add r3,r3,r2
 1327 00f4 97F83F20 	 ldrb r2,[r7,#63]
 1328 00f8 03F8402C 	 strb r2,[r3,#-64]
 1329              	.LBE10:
 1330 00fc D4E0     	 b .L90
 1331              	.L87:
 332:../cleanflight/src/main/msp/msp_serial.c ****     }
 333:../cleanflight/src/main/msp/msp_serial.c ****     else if (mspVersion == MSP_V2_OVER_V1) {
 1332              	 .loc 2 333 0
 1333 00fe FB79     	 ldrb r3,[r7,#7]
 1334 0100 012B     	 cmp r3,#1
 1335 0102 40F09180 	 bne .L91
 1336              	.LBB12:
 334:../cleanflight/src/main/msp/msp_serial.c ****         mspHeaderV1_t * hdrV1 = (mspHeaderV1_t *)&hdrBuf[hdrLen];
 1337              	 .loc 2 334 0
 1338 0106 07F11402 	 add r2,r7,#20
 1339 010a FB6C     	 ldr r3,[r7,#76]
 1340 010c 1344     	 add r3,r3,r2
 1341 010e BB63     	 str r3,[r7,#56]
 335:../cleanflight/src/main/msp/msp_serial.c **** 
 336:../cleanflight/src/main/msp/msp_serial.c ****         hdrLen += sizeof(mspHeaderV1_t);
 1342              	 .loc 2 336 0
 1343 0110 FB6C     	 ldr r3,[r7,#76]
 1344 0112 0233     	 adds r3,r3,#2
 1345 0114 FB64     	 str r3,[r7,#76]
 337:../cleanflight/src/main/msp/msp_serial.c **** 
 338:../cleanflight/src/main/msp/msp_serial.c ****         mspHeaderV2_t * hdrV2 = (mspHeaderV2_t *)&hdrBuf[hdrLen];
 1346              	 .loc 2 338 0
 1347 0116 07F11402 	 add r2,r7,#20
 1348 011a FB6C     	 ldr r3,[r7,#76]
 1349 011c 1344     	 add r3,r3,r2
 1350 011e 7B63     	 str r3,[r7,#52]
 339:../cleanflight/src/main/msp/msp_serial.c ****         hdrLen += sizeof(mspHeaderV2_t);
 1351              	 .loc 2 339 0
 1352 0120 FB6C     	 ldr r3,[r7,#76]
 1353 0122 0533     	 adds r3,r3,#5
 1354 0124 FB64     	 str r3,[r7,#76]
 340:../cleanflight/src/main/msp/msp_serial.c **** 
 341:../cleanflight/src/main/msp/msp_serial.c ****         const int v1PayloadSize = sizeof(mspHeaderV2_t) + dataLen + 1;  // MSPv2 header + data payl
 1355              	 .loc 2 341 0
 1356 0126 7B6C     	 ldr r3,[r7,#68]
 1357 0128 0633     	 adds r3,r3,#6
 1358 012a 3B63     	 str r3,[r7,#48]
 342:../cleanflight/src/main/msp/msp_serial.c ****         hdrV1->cmd = MSP_V2_FRAME_ID;
 1359              	 .loc 2 342 0
 1360 012c BB6B     	 ldr r3,[r7,#56]
 1361 012e FF22     	 movs r2,#255
 1362 0130 5A70     	 strb r2,[r3,#1]
 343:../cleanflight/src/main/msp/msp_serial.c **** 
 344:../cleanflight/src/main/msp/msp_serial.c ****         // Add JUMBO-frame header if necessary
 345:../cleanflight/src/main/msp/msp_serial.c ****         if (v1PayloadSize >= JUMBO_FRAME_SIZE_LIMIT) {
 1363              	 .loc 2 345 0
 1364 0132 3B6B     	 ldr r3,[r7,#48]
 1365 0134 FE2B     	 cmp r3,#254
 1366 0136 0FDD     	 ble .L92
 1367              	.LBB13:
 346:../cleanflight/src/main/msp/msp_serial.c ****             mspHeaderJUMBO_t * hdrJUMBO = (mspHeaderJUMBO_t *)&hdrBuf[hdrLen];
 1368              	 .loc 2 346 0
 1369 0138 07F11402 	 add r2,r7,#20
 1370 013c FB6C     	 ldr r3,[r7,#76]
 1371 013e 1344     	 add r3,r3,r2
 1372 0140 FB62     	 str r3,[r7,#44]
 347:../cleanflight/src/main/msp/msp_serial.c ****             hdrLen += sizeof(mspHeaderJUMBO_t);
 1373              	 .loc 2 347 0
 1374 0142 FB6C     	 ldr r3,[r7,#76]
 1375 0144 0233     	 adds r3,r3,#2
 1376 0146 FB64     	 str r3,[r7,#76]
 348:../cleanflight/src/main/msp/msp_serial.c **** 
 349:../cleanflight/src/main/msp/msp_serial.c ****             hdrV1->size = JUMBO_FRAME_SIZE_LIMIT;
 1377              	 .loc 2 349 0
 1378 0148 BB6B     	 ldr r3,[r7,#56]
 1379 014a FF22     	 movs r2,#255
 1380 014c 1A70     	 strb r2,[r3]
 350:../cleanflight/src/main/msp/msp_serial.c ****             hdrJUMBO->size = v1PayloadSize;
 1381              	 .loc 2 350 0
 1382 014e 3B6B     	 ldr r3,[r7,#48]
 1383 0150 9AB2     	 uxth r2,r3
 1384 0152 FB6A     	 ldr r3,[r7,#44]
 1385 0154 1A80     	 strh r2,[r3]
 1386              	.LBE13:
 1387 0156 03E0     	 b .L93
 1388              	.L92:
 351:../cleanflight/src/main/msp/msp_serial.c ****         }
 352:../cleanflight/src/main/msp/msp_serial.c ****         else {
 353:../cleanflight/src/main/msp/msp_serial.c ****             hdrV1->size = v1PayloadSize;
 1389              	 .loc 2 353 0
 1390 0158 3B6B     	 ldr r3,[r7,#48]
 1391 015a DAB2     	 uxtb r2,r3
 1392 015c BB6B     	 ldr r3,[r7,#56]
 1393 015e 1A70     	 strb r2,[r3]
 1394              	.L93:
 354:../cleanflight/src/main/msp/msp_serial.c ****         }
 355:../cleanflight/src/main/msp/msp_serial.c **** 
 356:../cleanflight/src/main/msp/msp_serial.c ****         // Fill V2 header
 357:../cleanflight/src/main/msp/msp_serial.c ****         hdrV2->flags = packet->flags;
 1395              	 .loc 2 357 0
 1396 0160 BB68     	 ldr r3,[r7,#8]
 1397 0162 9A7A     	 ldrb r2,[r3,#10]
 1398 0164 7B6B     	 ldr r3,[r7,#52]
 1399 0166 1A70     	 strb r2,[r3]
 358:../cleanflight/src/main/msp/msp_serial.c ****         hdrV2->cmd = packet->cmd;
 1400              	 .loc 2 358 0
 1401 0168 BB68     	 ldr r3,[r7,#8]
 1402 016a B3F90830 	 ldrsh r3,[r3,#8]
 1403 016e 9BB2     	 uxth r3,r3
 1404 0170 9AB2     	 uxth r2,r3
 1405 0172 7B6B     	 ldr r3,[r7,#52]
 1406 0174 A3F80120 	 strh r2,[r3,#1]
 359:../cleanflight/src/main/msp/msp_serial.c ****         hdrV2->size = dataLen;
 1407              	 .loc 2 359 0
 1408 0178 7B6C     	 ldr r3,[r7,#68]
 1409 017a 9AB2     	 uxth r2,r3
 1410 017c 7B6B     	 ldr r3,[r7,#52]
 1411 017e A3F80320 	 strh r2,[r3,#3]
 360:../cleanflight/src/main/msp/msp_serial.c **** 
 361:../cleanflight/src/main/msp/msp_serial.c ****         // V2 CRC: only V2 header + data payload
 362:../cleanflight/src/main/msp/msp_serial.c ****         checksum = crc8_dvb_s2_update(0, (uint8_t *)hdrV2, sizeof(mspHeaderV2_t));
 1412              	 .loc 2 362 0
 1413 0182 0020     	 movs r0,#0
 1414 0184 796B     	 ldr r1,[r7,#52]
 1415 0186 0522     	 movs r2,#5
 1416 0188 FFF7FEFF 	 bl crc8_dvb_s2_update
 1417 018c 0346     	 mov r3,r0
 1418 018e 87F83F30 	 strb r3,[r7,#63]
 363:../cleanflight/src/main/msp/msp_serial.c ****         checksum = crc8_dvb_s2_update(checksum, sbufPtr(&packet->buf), dataLen);
 1419              	 .loc 2 363 0
 1420 0192 BB68     	 ldr r3,[r7,#8]
 1421 0194 1846     	 mov r0,r3
 1422 0196 FFF7FEFF 	 bl sbufPtr
 1423 019a 0146     	 mov r1,r0
 1424 019c 7B6C     	 ldr r3,[r7,#68]
 1425 019e 97F83F20 	 ldrb r2,[r7,#63]
 1426 01a2 1046     	 mov r0,r2
 1427 01a4 1A46     	 mov r2,r3
 1428 01a6 FFF7FEFF 	 bl crc8_dvb_s2_update
 1429 01aa 0346     	 mov r3,r0
 1430 01ac 87F83F30 	 strb r3,[r7,#63]
 364:../cleanflight/src/main/msp/msp_serial.c ****         crcBuf[crcLen++] = checksum;
 1431              	 .loc 2 364 0
 1432 01b0 BB6C     	 ldr r3,[r7,#72]
 1433 01b2 5A1C     	 adds r2,r3,#1
 1434 01b4 BA64     	 str r2,[r7,#72]
 1435 01b6 07F15002 	 add r2,r7,#80
 1436 01ba 1344     	 add r3,r3,r2
 1437 01bc 97F83F20 	 ldrb r2,[r7,#63]
 1438 01c0 03F8402C 	 strb r2,[r3,#-64]
 365:../cleanflight/src/main/msp/msp_serial.c **** 
 366:../cleanflight/src/main/msp/msp_serial.c ****         // V1 CRC: All headers + data payload + V2 CRC byte
 367:../cleanflight/src/main/msp/msp_serial.c ****         checksum = mspSerialChecksumBuf(0, hdrBuf + V1_CHECKSUM_STARTPOS, hdrLen - V1_CHECKSUM_STAR
 1439              	 .loc 2 367 0
 1440 01c4 FB6C     	 ldr r3,[r7,#76]
 1441 01c6 DA1E     	 subs r2,r3,#3
 1442 01c8 07F11403 	 add r3,r7,#20
 1443 01cc 0333     	 adds r3,r3,#3
 1444 01ce 0020     	 movs r0,#0
 1445 01d0 1946     	 mov r1,r3
 1446 01d2 FFF7FEFF 	 bl mspSerialChecksumBuf
 1447 01d6 0346     	 mov r3,r0
 1448 01d8 87F83F30 	 strb r3,[r7,#63]
 368:../cleanflight/src/main/msp/msp_serial.c ****         checksum = mspSerialChecksumBuf(checksum, sbufPtr(&packet->buf), dataLen);
 1449              	 .loc 2 368 0
 1450 01dc BB68     	 ldr r3,[r7,#8]
 1451 01de 1846     	 mov r0,r3
 1452 01e0 FFF7FEFF 	 bl sbufPtr
 1453 01e4 0246     	 mov r2,r0
 1454 01e6 97F83F30 	 ldrb r3,[r7,#63]
 1455 01ea 1846     	 mov r0,r3
 1456 01ec 1146     	 mov r1,r2
 1457 01ee 7A6C     	 ldr r2,[r7,#68]
 1458 01f0 FFF7FEFF 	 bl mspSerialChecksumBuf
 1459 01f4 0346     	 mov r3,r0
 1460 01f6 87F83F30 	 strb r3,[r7,#63]
 369:../cleanflight/src/main/msp/msp_serial.c ****         checksum = mspSerialChecksumBuf(checksum, crcBuf, crcLen);
 1461              	 .loc 2 369 0
 1462 01fa 97F83F20 	 ldrb r2,[r7,#63]
 1463 01fe 07F11003 	 add r3,r7,#16
 1464 0202 1046     	 mov r0,r2
 1465 0204 1946     	 mov r1,r3
 1466 0206 BA6C     	 ldr r2,[r7,#72]
 1467 0208 FFF7FEFF 	 bl mspSerialChecksumBuf
 1468 020c 0346     	 mov r3,r0
 1469 020e 87F83F30 	 strb r3,[r7,#63]
 370:../cleanflight/src/main/msp/msp_serial.c ****         crcBuf[crcLen++] = checksum;
 1470              	 .loc 2 370 0
 1471 0212 BB6C     	 ldr r3,[r7,#72]
 1472 0214 5A1C     	 adds r2,r3,#1
 1473 0216 BA64     	 str r2,[r7,#72]
 1474 0218 07F15002 	 add r2,r7,#80
 1475 021c 1344     	 add r3,r3,r2
 1476 021e 97F83F20 	 ldrb r2,[r7,#63]
 1477 0222 03F8402C 	 strb r2,[r3,#-64]
 1478              	.LBE12:
 1479 0226 3FE0     	 b .L90
 1480              	.L91:
 371:../cleanflight/src/main/msp/msp_serial.c ****     }
 372:../cleanflight/src/main/msp/msp_serial.c ****     else if (mspVersion == MSP_V2_NATIVE) {
 1481              	 .loc 2 372 0
 1482 0228 FB79     	 ldrb r3,[r7,#7]
 1483 022a 022B     	 cmp r3,#2
 1484 022c 3AD1     	 bne .L94
 1485              	.LBB14:
 373:../cleanflight/src/main/msp/msp_serial.c ****         mspHeaderV2_t * hdrV2 = (mspHeaderV2_t *)&hdrBuf[hdrLen];
 1486              	 .loc 2 373 0
 1487 022e 07F11402 	 add r2,r7,#20
 1488 0232 FB6C     	 ldr r3,[r7,#76]
 1489 0234 1344     	 add r3,r3,r2
 1490 0236 3B64     	 str r3,[r7,#64]
 374:../cleanflight/src/main/msp/msp_serial.c ****         hdrLen += sizeof(mspHeaderV2_t);
 1491              	 .loc 2 374 0
 1492 0238 FB6C     	 ldr r3,[r7,#76]
 1493 023a 0533     	 adds r3,r3,#5
 1494 023c FB64     	 str r3,[r7,#76]
 375:../cleanflight/src/main/msp/msp_serial.c **** 
 376:../cleanflight/src/main/msp/msp_serial.c ****         hdrV2->flags = packet->flags;
 1495              	 .loc 2 376 0
 1496 023e BB68     	 ldr r3,[r7,#8]
 1497 0240 9A7A     	 ldrb r2,[r3,#10]
 1498 0242 3B6C     	 ldr r3,[r7,#64]
 1499 0244 1A70     	 strb r2,[r3]
 377:../cleanflight/src/main/msp/msp_serial.c ****         hdrV2->cmd = packet->cmd;
 1500              	 .loc 2 377 0
 1501 0246 BB68     	 ldr r3,[r7,#8]
 1502 0248 B3F90830 	 ldrsh r3,[r3,#8]
 1503 024c 9BB2     	 uxth r3,r3
 1504 024e 9AB2     	 uxth r2,r3
 1505 0250 3B6C     	 ldr r3,[r7,#64]
 1506 0252 A3F80120 	 strh r2,[r3,#1]
 378:../cleanflight/src/main/msp/msp_serial.c ****         hdrV2->size = dataLen;
 1507              	 .loc 2 378 0
 1508 0256 7B6C     	 ldr r3,[r7,#68]
 1509 0258 9AB2     	 uxth r2,r3
 1510 025a 3B6C     	 ldr r3,[r7,#64]
 1511 025c A3F80320 	 strh r2,[r3,#3]
 379:../cleanflight/src/main/msp/msp_serial.c **** 
 380:../cleanflight/src/main/msp/msp_serial.c ****         checksum = crc8_dvb_s2_update(0, (uint8_t *)hdrV2, sizeof(mspHeaderV2_t));
 1512              	 .loc 2 380 0
 1513 0260 0020     	 movs r0,#0
 1514 0262 396C     	 ldr r1,[r7,#64]
 1515 0264 0522     	 movs r2,#5
 1516 0266 FFF7FEFF 	 bl crc8_dvb_s2_update
 1517 026a 0346     	 mov r3,r0
 1518 026c 87F83F30 	 strb r3,[r7,#63]
 381:../cleanflight/src/main/msp/msp_serial.c ****         checksum = crc8_dvb_s2_update(checksum, sbufPtr(&packet->buf), dataLen);
 1519              	 .loc 2 381 0
 1520 0270 BB68     	 ldr r3,[r7,#8]
 1521 0272 1846     	 mov r0,r3
 1522 0274 FFF7FEFF 	 bl sbufPtr
 1523 0278 0146     	 mov r1,r0
 1524 027a 7B6C     	 ldr r3,[r7,#68]
 1525 027c 97F83F20 	 ldrb r2,[r7,#63]
 1526 0280 1046     	 mov r0,r2
 1527 0282 1A46     	 mov r2,r3
 1528 0284 FFF7FEFF 	 bl crc8_dvb_s2_update
 1529 0288 0346     	 mov r3,r0
 1530 028a 87F83F30 	 strb r3,[r7,#63]
 382:../cleanflight/src/main/msp/msp_serial.c ****         crcBuf[crcLen++] = checksum;
 1531              	 .loc 2 382 0
 1532 028e BB6C     	 ldr r3,[r7,#72]
 1533 0290 5A1C     	 adds r2,r3,#1
 1534 0292 BA64     	 str r2,[r7,#72]
 1535 0294 07F15002 	 add r2,r7,#80
 1536 0298 1344     	 add r3,r3,r2
 1537 029a 97F83F20 	 ldrb r2,[r7,#63]
 1538 029e 03F8402C 	 strb r2,[r3,#-64]
 1539              	.LBE14:
 1540 02a2 01E0     	 b .L90
 1541              	.L94:
 383:../cleanflight/src/main/msp/msp_serial.c ****     }
 384:../cleanflight/src/main/msp/msp_serial.c ****     else {
 385:../cleanflight/src/main/msp/msp_serial.c ****         // Shouldn't get here
 386:../cleanflight/src/main/msp/msp_serial.c ****         return 0;
 1542              	 .loc 2 386 0
 1543 02a4 0023     	 movs r3,#0
 1544 02a6 14E0     	 b .L96
 1545              	.L90:
 387:../cleanflight/src/main/msp/msp_serial.c ****     }
 388:../cleanflight/src/main/msp/msp_serial.c **** 
 389:../cleanflight/src/main/msp/msp_serial.c ****     // Send the frame
 390:../cleanflight/src/main/msp/msp_serial.c ****     return mspSerialSendFrame(msp, hdrBuf, hdrLen, sbufPtr(&packet->buf), dataLen, crcBuf, crcLen);
 1546              	 .loc 2 390 0
 1547 02a8 BB68     	 ldr r3,[r7,#8]
 1548 02aa 1846     	 mov r0,r3
 1549 02ac FFF7FEFF 	 bl sbufPtr
 1550 02b0 0446     	 mov r4,r0
 1551 02b2 07F11402 	 add r2,r7,#20
 1552 02b6 7B6C     	 ldr r3,[r7,#68]
 1553 02b8 0093     	 str r3,[sp]
 1554 02ba 07F11003 	 add r3,r7,#16
 1555 02be 0193     	 str r3,[sp,#4]
 1556 02c0 BB6C     	 ldr r3,[r7,#72]
 1557 02c2 0293     	 str r3,[sp,#8]
 1558 02c4 F868     	 ldr r0,[r7,#12]
 1559 02c6 1146     	 mov r1,r2
 1560 02c8 FA6C     	 ldr r2,[r7,#76]
 1561 02ca 2346     	 mov r3,r4
 1562 02cc FFF7FEFF 	 bl mspSerialSendFrame
 1563 02d0 0346     	 mov r3,r0
 1564              	.L96:
 391:../cleanflight/src/main/msp/msp_serial.c **** }
 1565              	 .loc 2 391 0 discriminator 1
 1566 02d2 1846     	 mov r0,r3
 1567 02d4 5437     	 adds r7,r7,#84
 1568              	.LCFI38:
 1569              	 .cfi_def_cfa_offset 12
 1570 02d6 BD46     	 mov sp,r7
 1571              	.LCFI39:
 1572              	 .cfi_def_cfa_register 13
 1573              	 
 1574 02d8 90BD     	 pop {r4,r7,pc}
 1575              	.L98:
 1576 02da 00BF     	 .align 2
 1577              	.L97:
 1578 02dc 00000000 	 .word mspMagic.12321
 1579              	 .cfi_endproc
 1580              	.LFE537:
 1582              	 .section .rodata
 1583              	 .align 2
 1584              	.LC1:
 1585 0000 00000000 	 .word outBuf.12339
 1586 0004 00010000 	 .word outBuf.12339+256
 1587 0008 FFFF     	 .short -1
 1588 000a 00       	 .byte 0
 1589 000b 0000     	 .2byte 0
 1590 000d 00       	 .byte 0
 1591 000e 0000     	 .section .text.mspSerialProcessReceivedCommand,"ax",%progbits
 1592              	 .align 2
 1593              	 .thumb
 1594              	 .thumb_func
 1596              	mspSerialProcessReceivedCommand:
 1597              	.LFB538:
 392:../cleanflight/src/main/msp/msp_serial.c **** 
 393:../cleanflight/src/main/msp/msp_serial.c **** static mspPostProcessFnPtr mspSerialProcessReceivedCommand(mspPort_t *msp, mspProcessCommandFnPtr m
 394:../cleanflight/src/main/msp/msp_serial.c **** {
 1598              	 .loc 2 394 0
 1599              	 .cfi_startproc
 1600              	 
 1601              	 
 1602 0000 90B5     	 push {r4,r7,lr}
 1603              	.LCFI40:
 1604              	 .cfi_def_cfa_offset 12
 1605              	 .cfi_offset 4,-12
 1606              	 .cfi_offset 7,-8
 1607              	 .cfi_offset 14,-4
 1608 0002 8DB0     	 sub sp,sp,#52
 1609              	.LCFI41:
 1610              	 .cfi_def_cfa_offset 64
 1611 0004 00AF     	 add r7,sp,#0
 1612              	.LCFI42:
 1613              	 .cfi_def_cfa_register 7
 1614 0006 7860     	 str r0,[r7,#4]
 1615 0008 3960     	 str r1,[r7]
 395:../cleanflight/src/main/msp/msp_serial.c ****     static uint8_t outBuf[MSP_PORT_OUTBUF_SIZE];
 396:../cleanflight/src/main/msp/msp_serial.c **** 
 397:../cleanflight/src/main/msp/msp_serial.c ****     mspPacket_t reply = {
 1616              	 .loc 2 397 0
 1617 000a 264A     	 ldr r2,.L102
 1618 000c 07F11C03 	 add r3,r7,#28
 1619 0010 1446     	 mov r4,r2
 1620 0012 2068     	 ldr r0,[r4]
 1621 0014 6168     	 ldr r1,[r4,#4]
 1622 0016 A268     	 ldr r2,[r4,#8]
 1623 0018 07C3     	 stmia r3!,{r0,r1,r2}
 1624 001a A289     	 ldrh r2,[r4,#12]
 1625 001c 1A80     	 strh r2,[r3]
 398:../cleanflight/src/main/msp/msp_serial.c ****         .buf = { .ptr = outBuf, .end = ARRAYEND(outBuf), },
 399:../cleanflight/src/main/msp/msp_serial.c ****         .cmd = -1,
 400:../cleanflight/src/main/msp/msp_serial.c ****         .flags = 0,
 401:../cleanflight/src/main/msp/msp_serial.c ****         .result = 0,
 402:../cleanflight/src/main/msp/msp_serial.c ****         .direction = MSP_DIRECTION_REPLY,
 403:../cleanflight/src/main/msp/msp_serial.c ****     };
 404:../cleanflight/src/main/msp/msp_serial.c ****     uint8_t *outBufHead = reply.buf.ptr;
 1626              	 .loc 2 404 0
 1627 001e FB69     	 ldr r3,[r7,#28]
 1628 0020 FB62     	 str r3,[r7,#44]
 405:../cleanflight/src/main/msp/msp_serial.c **** 
 406:../cleanflight/src/main/msp/msp_serial.c ****     mspPacket_t command = {
 407:../cleanflight/src/main/msp/msp_serial.c ****         .buf = { .ptr = msp->inBuf, .end = msp->inBuf + msp->dataSize, },
 1629              	 .loc 2 407 0
 1630 0022 7B68     	 ldr r3,[r7,#4]
 1631 0024 0B33     	 adds r3,r3,#11
 406:../cleanflight/src/main/msp/msp_serial.c ****         .buf = { .ptr = msp->inBuf, .end = msp->inBuf + msp->dataSize, },
 1632              	 .loc 2 406 0
 1633 0026 FB60     	 str r3,[r7,#12]
 1634              	 .loc 2 407 0
 1635 0028 7B68     	 ldr r3,[r7,#4]
 1636 002a D3F8D330 	 ldr r3,[r3,#211]
 1637 002e 0833     	 adds r3,r3,#8
 1638 0030 7A68     	 ldr r2,[r7,#4]
 1639 0032 1344     	 add r3,r3,r2
 1640 0034 0333     	 adds r3,r3,#3
 406:../cleanflight/src/main/msp/msp_serial.c ****         .buf = { .ptr = msp->inBuf, .end = msp->inBuf + msp->dataSize, },
 1641              	 .loc 2 406 0
 1642 0036 3B61     	 str r3,[r7,#16]
 408:../cleanflight/src/main/msp/msp_serial.c ****         .cmd = msp->cmdMSP,
 1643              	 .loc 2 408 0
 1644 0038 7B68     	 ldr r3,[r7,#4]
 1645 003a B3F8CB30 	 ldrh r3,[r3,#203]
 1646 003e 9BB2     	 uxth r3,r3
 406:../cleanflight/src/main/msp/msp_serial.c ****         .buf = { .ptr = msp->inBuf, .end = msp->inBuf + msp->dataSize, },
 1647              	 .loc 2 406 0
 1648 0040 9BB2     	 uxth r3,r3
 1649 0042 BB82     	 strh r3,[r7,#20]
 409:../cleanflight/src/main/msp/msp_serial.c ****         .flags = msp->cmdFlags,
 1650              	 .loc 2 409 0
 1651 0044 7B68     	 ldr r3,[r7,#4]
 1652 0046 93F8CD30 	 ldrb r3,[r3,#205]
 406:../cleanflight/src/main/msp/msp_serial.c ****         .buf = { .ptr = msp->inBuf, .end = msp->inBuf + msp->dataSize, },
 1653              	 .loc 2 406 0
 1654 004a BB75     	 strb r3,[r7,#22]
 1655 004c 0023     	 movs r3,#0
 1656 004e FB75     	 strb r3,[r7,#23]
 1657 0050 0023     	 movs r3,#0
 1658 0052 3B76     	 strb r3,[r7,#24]
 1659 0054 0123     	 movs r3,#1
 1660 0056 7B76     	 strb r3,[r7,#25]
 410:../cleanflight/src/main/msp/msp_serial.c ****         .result = 0,
 411:../cleanflight/src/main/msp/msp_serial.c ****         .direction = MSP_DIRECTION_REQUEST,
 412:../cleanflight/src/main/msp/msp_serial.c ****     };
 413:../cleanflight/src/main/msp/msp_serial.c **** 
 414:../cleanflight/src/main/msp/msp_serial.c ****     mspPostProcessFnPtr mspPostProcessFn = NULL;
 1661              	 .loc 2 414 0
 1662 0058 0023     	 movs r3,#0
 1663 005a BB60     	 str r3,[r7,#8]
 415:../cleanflight/src/main/msp/msp_serial.c ****     const mspResult_e status = mspProcessCommandFn(&command, &reply, &mspPostProcessFn);
 1664              	 .loc 2 415 0
 1665 005c 07F10C00 	 add r0,r7,#12
 1666 0060 07F11C01 	 add r1,r7,#28
 1667 0064 07F10802 	 add r2,r7,#8
 1668 0068 3B68     	 ldr r3,[r7]
 1669 006a 9847     	 blx r3
 1670 006c 0346     	 mov r3,r0
 1671 006e 87F82B30 	 strb r3,[r7,#43]
 416:../cleanflight/src/main/msp/msp_serial.c **** 
 417:../cleanflight/src/main/msp/msp_serial.c ****     if (status != MSP_RESULT_NO_REPLY) {
 1672              	 .loc 2 417 0
 1673 0072 97F92B30 	 ldrsb r3,[r7,#43]
 1674 0076 002B     	 cmp r3,#0
 1675 0078 0FD0     	 beq .L100
 418:../cleanflight/src/main/msp/msp_serial.c ****         sbufSwitchToReader(&reply.buf, outBufHead); // change streambuf direction
 1676              	 .loc 2 418 0
 1677 007a 07F11C03 	 add r3,r7,#28
 1678 007e 1846     	 mov r0,r3
 1679 0080 F96A     	 ldr r1,[r7,#44]
 1680 0082 FFF7FEFF 	 bl sbufSwitchToReader
 419:../cleanflight/src/main/msp/msp_serial.c ****         mspSerialEncode(msp, &reply, msp->mspVersion);
 1681              	 .loc 2 419 0
 1682 0086 7B68     	 ldr r3,[r7,#4]
 1683 0088 93F8CE30 	 ldrb r3,[r3,#206]
 1684 008c 07F11C02 	 add r2,r7,#28
 1685 0090 7868     	 ldr r0,[r7,#4]
 1686 0092 1146     	 mov r1,r2
 1687 0094 1A46     	 mov r2,r3
 1688 0096 FFF7FEFF 	 bl mspSerialEncode
 1689              	.L100:
 420:../cleanflight/src/main/msp/msp_serial.c ****     }
 421:../cleanflight/src/main/msp/msp_serial.c **** 
 422:../cleanflight/src/main/msp/msp_serial.c ****     return mspPostProcessFn;
 1690              	 .loc 2 422 0
 1691 009a BB68     	 ldr r3,[r7,#8]
 423:../cleanflight/src/main/msp/msp_serial.c **** }
 1692              	 .loc 2 423 0
 1693 009c 1846     	 mov r0,r3
 1694 009e 3437     	 adds r7,r7,#52
 1695              	.LCFI43:
 1696              	 .cfi_def_cfa_offset 12
 1697 00a0 BD46     	 mov sp,r7
 1698              	.LCFI44:
 1699              	 .cfi_def_cfa_register 13
 1700              	 
 1701 00a2 90BD     	 pop {r4,r7,pc}
 1702              	.L103:
 1703              	 .align 2
 1704              	.L102:
 1705 00a4 00000000 	 .word .LC1
 1706              	 .cfi_endproc
 1707              	.LFE538:
 1709              	 .section .text.mspEvaluateNonMspData,"ax",%progbits
 1710              	 .align 2
 1711              	 .thumb
 1712              	 .thumb_func
 1714              	mspEvaluateNonMspData:
 1715              	.LFB539:
 424:../cleanflight/src/main/msp/msp_serial.c **** 
 425:../cleanflight/src/main/msp/msp_serial.c **** static void mspEvaluateNonMspData(mspPort_t * mspPort, uint8_t receivedChar)
 426:../cleanflight/src/main/msp/msp_serial.c **** {
 1716              	 .loc 2 426 0
 1717              	 .cfi_startproc
 1718              	 
 1719              	 
 1720 0000 80B5     	 push {r7,lr}
 1721              	.LCFI45:
 1722              	 .cfi_def_cfa_offset 8
 1723              	 .cfi_offset 7,-8
 1724              	 .cfi_offset 14,-4
 1725 0002 82B0     	 sub sp,sp,#8
 1726              	.LCFI46:
 1727              	 .cfi_def_cfa_offset 16
 1728 0004 00AF     	 add r7,sp,#0
 1729              	.LCFI47:
 1730              	 .cfi_def_cfa_register 7
 1731 0006 7860     	 str r0,[r7,#4]
 1732 0008 0B46     	 mov r3,r1
 1733 000a FB70     	 strb r3,[r7,#3]
 427:../cleanflight/src/main/msp/msp_serial.c **** #ifdef USE_CLI
 428:../cleanflight/src/main/msp/msp_serial.c ****     if (receivedChar == '#') {
 1734              	 .loc 2 428 0
 1735 000c FB78     	 ldrb r3,[r7,#3]
 1736 000e 232B     	 cmp r3,#35
 1737 0010 03D1     	 bne .L105
 429:../cleanflight/src/main/msp/msp_serial.c ****         mspPort->pendingRequest = MSP_PENDING_CLI;
 1738              	 .loc 2 429 0
 1739 0012 7B68     	 ldr r3,[r7,#4]
 1740 0014 0222     	 movs r2,#2
 1741 0016 1A72     	 strb r2,[r3,#8]
 430:../cleanflight/src/main/msp/msp_serial.c ****         return;
 1742              	 .loc 2 430 0
 1743 0018 0BE0     	 b .L104
 1744              	.L105:
 431:../cleanflight/src/main/msp/msp_serial.c ****     }
 432:../cleanflight/src/main/msp/msp_serial.c **** #endif
 433:../cleanflight/src/main/msp/msp_serial.c **** 
 434:../cleanflight/src/main/msp/msp_serial.c ****     if (receivedChar == serialConfig()->reboot_character) {
 1745              	 .loc 2 434 0
 1746 001a FFF7FEFF 	 bl serialConfig
 1747 001e 0346     	 mov r3,r0
 1748 0020 93F82530 	 ldrb r3,[r3,#37]
 1749 0024 FA78     	 ldrb r2,[r7,#3]
 1750 0026 9A42     	 cmp r2,r3
 1751 0028 03D1     	 bne .L104
 435:../cleanflight/src/main/msp/msp_serial.c ****         mspPort->pendingRequest = MSP_PENDING_BOOTLOADER;
 1752              	 .loc 2 435 0
 1753 002a 7B68     	 ldr r3,[r7,#4]
 1754 002c 0122     	 movs r2,#1
 1755 002e 1A72     	 strb r2,[r3,#8]
 436:../cleanflight/src/main/msp/msp_serial.c ****         return;
 1756              	 .loc 2 436 0
 1757 0030 00BF     	 nop
 1758              	.L104:
 437:../cleanflight/src/main/msp/msp_serial.c ****     }
 438:../cleanflight/src/main/msp/msp_serial.c **** }
 1759              	 .loc 2 438 0
 1760 0032 0837     	 adds r7,r7,#8
 1761              	.LCFI48:
 1762              	 .cfi_def_cfa_offset 8
 1763 0034 BD46     	 mov sp,r7
 1764              	.LCFI49:
 1765              	 .cfi_def_cfa_register 13
 1766              	 
 1767 0036 80BD     	 pop {r7,pc}
 1768              	 .cfi_endproc
 1769              	.LFE539:
 1771              	 .section .text.mspProcessPendingRequest,"ax",%progbits
 1772              	 .align 2
 1773              	 .thumb
 1774              	 .thumb_func
 1776              	mspProcessPendingRequest:
 1777              	.LFB540:
 439:../cleanflight/src/main/msp/msp_serial.c **** 
 440:../cleanflight/src/main/msp/msp_serial.c **** static void mspProcessPendingRequest(mspPort_t * mspPort)
 441:../cleanflight/src/main/msp/msp_serial.c **** {
 1778              	 .loc 2 441 0
 1779              	 .cfi_startproc
 1780              	 
 1781              	 
 1782 0000 80B5     	 push {r7,lr}
 1783              	.LCFI50:
 1784              	 .cfi_def_cfa_offset 8
 1785              	 .cfi_offset 7,-8
 1786              	 .cfi_offset 14,-4
 1787 0002 82B0     	 sub sp,sp,#8
 1788              	.LCFI51:
 1789              	 .cfi_def_cfa_offset 16
 1790 0004 00AF     	 add r7,sp,#0
 1791              	.LCFI52:
 1792              	 .cfi_def_cfa_register 7
 1793 0006 7860     	 str r0,[r7,#4]
 442:../cleanflight/src/main/msp/msp_serial.c ****     // If no request is pending or 100ms guard time has not elapsed - do nothing
 443:../cleanflight/src/main/msp/msp_serial.c ****     if ((mspPort->pendingRequest == MSP_PENDING_NONE) || (millis() - mspPort->lastActivityMs < 100)
 1794              	 .loc 2 443 0
 1795 0008 7B68     	 ldr r3,[r7,#4]
 1796 000a 1B7A     	 ldrb r3,[r3,#8]
 1797 000c 002B     	 cmp r3,#0
 1798 000e 07D0     	 beq .L108
 1799              	 .loc 2 443 0 is_stmt 0 discriminator 1
 1800 0010 FFF7FEFF 	 bl millis
 1801 0014 0246     	 mov r2,r0
 1802 0016 7B68     	 ldr r3,[r7,#4]
 1803 0018 5B68     	 ldr r3,[r3,#4]
 1804 001a D31A     	 subs r3,r2,r3
 1805 001c 632B     	 cmp r3,#99
 1806 001e 00D8     	 bhi .L109
 1807              	.L108:
 444:../cleanflight/src/main/msp/msp_serial.c ****         return;
 1808              	 .loc 2 444 0 is_stmt 1
 1809 0020 0FE0     	 b .L107
 1810              	.L109:
 445:../cleanflight/src/main/msp/msp_serial.c ****     }
 446:../cleanflight/src/main/msp/msp_serial.c **** 
 447:../cleanflight/src/main/msp/msp_serial.c ****     switch(mspPort->pendingRequest) {
 1811              	 .loc 2 447 0
 1812 0022 7B68     	 ldr r3,[r7,#4]
 1813 0024 1B7A     	 ldrb r3,[r3,#8]
 1814 0026 012B     	 cmp r3,#1
 1815 0028 02D0     	 beq .L112
 1816 002a 022B     	 cmp r3,#2
 1817 002c 03D0     	 beq .L113
 448:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_PENDING_BOOTLOADER:
 449:../cleanflight/src/main/msp/msp_serial.c ****             systemResetToBootloader();
 450:../cleanflight/src/main/msp/msp_serial.c ****             break;
 451:../cleanflight/src/main/msp/msp_serial.c **** 
 452:../cleanflight/src/main/msp/msp_serial.c **** #ifdef USE_CLI
 453:../cleanflight/src/main/msp/msp_serial.c ****         case MSP_PENDING_CLI:
 454:../cleanflight/src/main/msp/msp_serial.c ****             cliEnter(mspPort->port);
 455:../cleanflight/src/main/msp/msp_serial.c ****             break;
 456:../cleanflight/src/main/msp/msp_serial.c **** #endif
 457:../cleanflight/src/main/msp/msp_serial.c **** 
 458:../cleanflight/src/main/msp/msp_serial.c ****         default:
 459:../cleanflight/src/main/msp/msp_serial.c ****             break;
 1818              	 .loc 2 459 0
 1819 002e 08E0     	 b .L107
 1820              	.L112:
 449:../cleanflight/src/main/msp/msp_serial.c ****             break;
 1821              	 .loc 2 449 0
 1822 0030 FFF7FEFF 	 bl systemResetToBootloader
 450:../cleanflight/src/main/msp/msp_serial.c **** 
 1823              	 .loc 2 450 0
 1824 0034 05E0     	 b .L107
 1825              	.L113:
 454:../cleanflight/src/main/msp/msp_serial.c ****             break;
 1826              	 .loc 2 454 0
 1827 0036 7B68     	 ldr r3,[r7,#4]
 1828 0038 1B68     	 ldr r3,[r3]
 1829 003a 1846     	 mov r0,r3
 1830 003c FFF7FEFF 	 bl cliEnter
 455:../cleanflight/src/main/msp/msp_serial.c **** #endif
 1831              	 .loc 2 455 0
 1832 0040 00BF     	 nop
 1833              	.L107:
 460:../cleanflight/src/main/msp/msp_serial.c ****     }
 461:../cleanflight/src/main/msp/msp_serial.c **** }
 1834              	 .loc 2 461 0
 1835 0042 0837     	 adds r7,r7,#8
 1836              	.LCFI53:
 1837              	 .cfi_def_cfa_offset 8
 1838 0044 BD46     	 mov sp,r7
 1839              	.LCFI54:
 1840              	 .cfi_def_cfa_register 13
 1841              	 
 1842 0046 80BD     	 pop {r7,pc}
 1843              	 .cfi_endproc
 1844              	.LFE540:
 1846              	 .section .text.mspSerialProcessReceivedReply,"ax",%progbits
 1847              	 .align 2
 1848              	 .thumb
 1849              	 .thumb_func
 1851              	mspSerialProcessReceivedReply:
 1852              	.LFB541:
 462:../cleanflight/src/main/msp/msp_serial.c **** 
 463:../cleanflight/src/main/msp/msp_serial.c **** static void mspSerialProcessReceivedReply(mspPort_t *msp, mspProcessReplyFnPtr mspProcessReplyFn)
 464:../cleanflight/src/main/msp/msp_serial.c **** {
 1853              	 .loc 2 464 0
 1854              	 .cfi_startproc
 1855              	 
 1856              	 
 1857 0000 80B5     	 push {r7,lr}
 1858              	.LCFI55:
 1859              	 .cfi_def_cfa_offset 8
 1860              	 .cfi_offset 7,-8
 1861              	 .cfi_offset 14,-4
 1862 0002 86B0     	 sub sp,sp,#24
 1863              	.LCFI56:
 1864              	 .cfi_def_cfa_offset 32
 1865 0004 00AF     	 add r7,sp,#0
 1866              	.LCFI57:
 1867              	 .cfi_def_cfa_register 7
 1868 0006 7860     	 str r0,[r7,#4]
 1869 0008 3960     	 str r1,[r7]
 465:../cleanflight/src/main/msp/msp_serial.c ****     mspPacket_t reply = {
 1870              	 .loc 2 465 0
 1871 000a 07F10803 	 add r3,r7,#8
 1872 000e 0022     	 movs r2,#0
 1873 0010 1A60     	 str r2,[r3]
 1874 0012 0433     	 adds r3,r3,#4
 1875 0014 0022     	 movs r2,#0
 1876 0016 1A60     	 str r2,[r3]
 1877 0018 0433     	 adds r3,r3,#4
 1878 001a 0022     	 movs r2,#0
 1879 001c 1A60     	 str r2,[r3]
 1880 001e 0433     	 adds r3,r3,#4
 1881 0020 0022     	 movs r2,#0
 1882 0022 1A80     	 strh r2,[r3]
 1883 0024 0233     	 adds r3,r3,#2
 466:../cleanflight/src/main/msp/msp_serial.c ****         .buf = {
 467:../cleanflight/src/main/msp/msp_serial.c ****             .ptr = msp->inBuf,
 1884              	 .loc 2 467 0
 1885 0026 7B68     	 ldr r3,[r7,#4]
 1886 0028 0B33     	 adds r3,r3,#11
 465:../cleanflight/src/main/msp/msp_serial.c ****     mspPacket_t reply = {
 1887              	 .loc 2 465 0
 1888 002a BB60     	 str r3,[r7,#8]
 468:../cleanflight/src/main/msp/msp_serial.c ****             .end = msp->inBuf + msp->dataSize,
 1889              	 .loc 2 468 0
 1890 002c 7B68     	 ldr r3,[r7,#4]
 1891 002e D3F8D330 	 ldr r3,[r3,#211]
 1892 0032 0833     	 adds r3,r3,#8
 1893 0034 7A68     	 ldr r2,[r7,#4]
 1894 0036 1344     	 add r3,r3,r2
 1895 0038 0333     	 adds r3,r3,#3
 465:../cleanflight/src/main/msp/msp_serial.c ****     mspPacket_t reply = {
 1896              	 .loc 2 465 0
 1897 003a FB60     	 str r3,[r7,#12]
 469:../cleanflight/src/main/msp/msp_serial.c ****         },
 470:../cleanflight/src/main/msp/msp_serial.c ****         .cmd = msp->cmdMSP,
 1898              	 .loc 2 470 0
 1899 003c 7B68     	 ldr r3,[r7,#4]
 1900 003e B3F8CB30 	 ldrh r3,[r3,#203]
 1901 0042 9BB2     	 uxth r3,r3
 465:../cleanflight/src/main/msp/msp_serial.c ****         .buf = {
 1902              	 .loc 2 465 0
 1903 0044 9BB2     	 uxth r3,r3
 1904 0046 3B82     	 strh r3,[r7,#16]
 471:../cleanflight/src/main/msp/msp_serial.c ****         .result = 0,
 472:../cleanflight/src/main/msp/msp_serial.c ****     };
 473:../cleanflight/src/main/msp/msp_serial.c **** 
 474:../cleanflight/src/main/msp/msp_serial.c ****     mspProcessReplyFn(&reply);
 1905              	 .loc 2 474 0
 1906 0048 07F10802 	 add r2,r7,#8
 1907 004c 3B68     	 ldr r3,[r7]
 1908 004e 1046     	 mov r0,r2
 1909 0050 9847     	 blx r3
 475:../cleanflight/src/main/msp/msp_serial.c **** 
 476:../cleanflight/src/main/msp/msp_serial.c ****     msp->c_state = MSP_IDLE;
 1910              	 .loc 2 476 0
 1911 0052 7B68     	 ldr r3,[r7,#4]
 1912 0054 0022     	 movs r2,#0
 1913 0056 5A72     	 strb r2,[r3,#9]
 477:../cleanflight/src/main/msp/msp_serial.c **** }
 1914              	 .loc 2 477 0
 1915 0058 1837     	 adds r7,r7,#24
 1916              	.LCFI58:
 1917              	 .cfi_def_cfa_offset 8
 1918 005a BD46     	 mov sp,r7
 1919              	.LCFI59:
 1920              	 .cfi_def_cfa_register 13
 1921              	 
 1922 005c 80BD     	 pop {r7,pc}
 1923              	 .cfi_endproc
 1924              	.LFE541:
 1926 005e 00BF     	 .section .text.mspSerialProcess,"ax",%progbits
 1927              	 .align 2
 1928              	 .global mspSerialProcess
 1929              	 .thumb
 1930              	 .thumb_func
 1932              	mspSerialProcess:
 1933              	.LFB542:
 478:../cleanflight/src/main/msp/msp_serial.c **** 
 479:../cleanflight/src/main/msp/msp_serial.c **** /*
 480:../cleanflight/src/main/msp/msp_serial.c ****  * Process MSP commands from serial ports configured as MSP ports.
 481:../cleanflight/src/main/msp/msp_serial.c ****  *
 482:../cleanflight/src/main/msp/msp_serial.c ****  * Called periodically by the scheduler.
 483:../cleanflight/src/main/msp/msp_serial.c ****  */
 484:../cleanflight/src/main/msp/msp_serial.c **** void mspSerialProcess(mspEvaluateNonMspData_e evaluateNonMspData, mspProcessCommandFnPtr mspProcess
 485:../cleanflight/src/main/msp/msp_serial.c **** {
 1934              	 .loc 2 485 0
 1935              	 .cfi_startproc
 1936              	 
 1937              	 
 1938 0000 80B5     	 push {r7,lr}
 1939              	.LCFI60:
 1940              	 .cfi_def_cfa_offset 8
 1941              	 .cfi_offset 7,-8
 1942              	 .cfi_offset 14,-4
 1943 0002 88B0     	 sub sp,sp,#32
 1944              	.LCFI61:
 1945              	 .cfi_def_cfa_offset 40
 1946 0004 00AF     	 add r7,sp,#0
 1947              	.LCFI62:
 1948              	 .cfi_def_cfa_register 7
 1949 0006 0346     	 mov r3,r0
 1950 0008 B960     	 str r1,[r7,#8]
 1951 000a 7A60     	 str r2,[r7,#4]
 1952 000c FB73     	 strb r3,[r7,#15]
 1953              	.LBB15:
 486:../cleanflight/src/main/msp/msp_serial.c ****     for (uint8_t portIndex = 0; portIndex < MAX_MSP_PORT_COUNT; portIndex++) {
 1954              	 .loc 2 486 0
 1955 000e 0023     	 movs r3,#0
 1956 0010 FB77     	 strb r3,[r7,#31]
 1957 0012 70E0     	 b .L116
 1958              	.L127:
 1959              	.LBB16:
 487:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 1960              	 .loc 2 487 0
 1961 0014 FB7F     	 ldrb r3,[r7,#31]
 1962 0016 DA22     	 movs r2,#218
 1963 0018 02FB03F3 	 mul r3,r2,r3
 1964 001c 394A     	 ldr r2,.L128
 1965 001e 1344     	 add r3,r3,r2
 1966 0020 7B61     	 str r3,[r7,#20]
 488:../cleanflight/src/main/msp/msp_serial.c ****         if (!mspPort->port) {
 1967              	 .loc 2 488 0
 1968 0022 7B69     	 ldr r3,[r7,#20]
 1969 0024 1B68     	 ldr r3,[r3]
 1970 0026 002B     	 cmp r3,#0
 1971 0028 00D1     	 bne .L117
 489:../cleanflight/src/main/msp/msp_serial.c ****             continue;
 1972              	 .loc 2 489 0
 1973 002a 61E0     	 b .L118
 1974              	.L117:
 490:../cleanflight/src/main/msp/msp_serial.c ****         }
 491:../cleanflight/src/main/msp/msp_serial.c **** 
 492:../cleanflight/src/main/msp/msp_serial.c ****         mspPostProcessFnPtr mspPostProcessFn = NULL;
 1975              	 .loc 2 492 0
 1976 002c 0023     	 movs r3,#0
 1977 002e BB61     	 str r3,[r7,#24]
 493:../cleanflight/src/main/msp/msp_serial.c **** 
 494:../cleanflight/src/main/msp/msp_serial.c ****         if (serialRxBytesWaiting(mspPort->port)) {
 1978              	 .loc 2 494 0
 1979 0030 7B69     	 ldr r3,[r7,#20]
 1980 0032 1B68     	 ldr r3,[r3]
 1981 0034 1846     	 mov r0,r3
 1982 0036 FFF7FEFF 	 bl serialRxBytesWaiting
 1983 003a 0346     	 mov r3,r0
 1984 003c 002B     	 cmp r3,#0
 1985 003e 54D0     	 beq .L119
 495:../cleanflight/src/main/msp/msp_serial.c ****             // There are bytes incoming - abort pending request
 496:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->lastActivityMs = millis();
 1986              	 .loc 2 496 0
 1987 0040 FFF7FEFF 	 bl millis
 1988 0044 0246     	 mov r2,r0
 1989 0046 7B69     	 ldr r3,[r7,#20]
 1990 0048 5A60     	 str r2,[r3,#4]
 497:../cleanflight/src/main/msp/msp_serial.c ****             mspPort->pendingRequest = MSP_PENDING_NONE;
 1991              	 .loc 2 497 0
 1992 004a 7B69     	 ldr r3,[r7,#20]
 1993 004c 0022     	 movs r2,#0
 1994 004e 1A72     	 strb r2,[r3,#8]
 498:../cleanflight/src/main/msp/msp_serial.c **** 
 499:../cleanflight/src/main/msp/msp_serial.c ****             while (serialRxBytesWaiting(mspPort->port)) {
 1995              	 .loc 2 499 0
 1996 0050 35E0     	 b .L120
 1997              	.L125:
 1998              	.LBB17:
 500:../cleanflight/src/main/msp/msp_serial.c ****                 const uint8_t c = serialRead(mspPort->port);
 1999              	 .loc 2 500 0
 2000 0052 7B69     	 ldr r3,[r7,#20]
 2001 0054 1B68     	 ldr r3,[r3]
 2002 0056 1846     	 mov r0,r3
 2003 0058 FFF7FEFF 	 bl serialRead
 2004 005c 0346     	 mov r3,r0
 2005 005e FB74     	 strb r3,[r7,#19]
 501:../cleanflight/src/main/msp/msp_serial.c ****                 const bool consumed = mspSerialProcessReceivedData(mspPort, c);
 2006              	 .loc 2 501 0
 2007 0060 FB7C     	 ldrb r3,[r7,#19]
 2008 0062 7869     	 ldr r0,[r7,#20]
 2009 0064 1946     	 mov r1,r3
 2010 0066 FFF7FEFF 	 bl mspSerialProcessReceivedData
 2011 006a 0346     	 mov r3,r0
 2012 006c BB74     	 strb r3,[r7,#18]
 502:../cleanflight/src/main/msp/msp_serial.c **** 
 503:../cleanflight/src/main/msp/msp_serial.c ****                 if (!consumed && evaluateNonMspData == MSP_EVALUATE_NON_MSP_DATA) {
 2013              	 .loc 2 503 0
 2014 006e BB7C     	 ldrb r3,[r7,#18]
 2015 0070 83F00103 	 eor r3,r3,#1
 2016 0074 DBB2     	 uxtb r3,r3
 2017 0076 002B     	 cmp r3,#0
 2018 0078 07D0     	 beq .L121
 2019              	 .loc 2 503 0 is_stmt 0 discriminator 1
 2020 007a FB7B     	 ldrb r3,[r7,#15]
 2021 007c 002B     	 cmp r3,#0
 2022 007e 04D1     	 bne .L121
 504:../cleanflight/src/main/msp/msp_serial.c ****                     mspEvaluateNonMspData(mspPort, c);
 2023              	 .loc 2 504 0 is_stmt 1
 2024 0080 FB7C     	 ldrb r3,[r7,#19]
 2025 0082 7869     	 ldr r0,[r7,#20]
 2026 0084 1946     	 mov r1,r3
 2027 0086 FFF7FEFF 	 bl mspEvaluateNonMspData
 2028              	.L121:
 505:../cleanflight/src/main/msp/msp_serial.c ****                 }
 506:../cleanflight/src/main/msp/msp_serial.c **** 
 507:../cleanflight/src/main/msp/msp_serial.c ****                 if (mspPort->c_state == MSP_COMMAND_RECEIVED) {
 2029              	 .loc 2 507 0
 2030 008a 7B69     	 ldr r3,[r7,#20]
 2031 008c 5B7A     	 ldrb r3,[r3,#9]
 2032 008e 0D2B     	 cmp r3,#13
 2033 0090 15D1     	 bne .L120
 508:../cleanflight/src/main/msp/msp_serial.c ****                     if (mspPort->packetType == MSP_PACKET_COMMAND) {
 2034              	 .loc 2 508 0
 2035 0092 7B69     	 ldr r3,[r7,#20]
 2036 0094 9B7A     	 ldrb r3,[r3,#10]
 2037 0096 002B     	 cmp r3,#0
 2038 0098 05D1     	 bne .L122
 509:../cleanflight/src/main/msp/msp_serial.c ****                         mspPostProcessFn = mspSerialProcessReceivedCommand(mspPort, mspProcessComma
 2039              	 .loc 2 509 0
 2040 009a 7869     	 ldr r0,[r7,#20]
 2041 009c B968     	 ldr r1,[r7,#8]
 2042 009e FFF7FEFF 	 bl mspSerialProcessReceivedCommand
 2043 00a2 B861     	 str r0,[r7,#24]
 2044 00a4 07E0     	 b .L123
 2045              	.L122:
 510:../cleanflight/src/main/msp/msp_serial.c ****                     } else if (mspPort->packetType == MSP_PACKET_REPLY) {
 2046              	 .loc 2 510 0
 2047 00a6 7B69     	 ldr r3,[r7,#20]
 2048 00a8 9B7A     	 ldrb r3,[r3,#10]
 2049 00aa 012B     	 cmp r3,#1
 2050 00ac 03D1     	 bne .L123
 511:../cleanflight/src/main/msp/msp_serial.c ****                         mspSerialProcessReceivedReply(mspPort, mspProcessReplyFn);
 2051              	 .loc 2 511 0
 2052 00ae 7869     	 ldr r0,[r7,#20]
 2053 00b0 7968     	 ldr r1,[r7,#4]
 2054 00b2 FFF7FEFF 	 bl mspSerialProcessReceivedReply
 2055              	.L123:
 512:../cleanflight/src/main/msp/msp_serial.c ****                     }
 513:../cleanflight/src/main/msp/msp_serial.c **** 
 514:../cleanflight/src/main/msp/msp_serial.c ****                     mspPort->c_state = MSP_IDLE;
 2056              	 .loc 2 514 0
 2057 00b6 7B69     	 ldr r3,[r7,#20]
 2058 00b8 0022     	 movs r2,#0
 2059 00ba 5A72     	 strb r2,[r3,#9]
 515:../cleanflight/src/main/msp/msp_serial.c ****                     break; // process one command at a time so as not to block.
 2060              	 .loc 2 515 0
 2061 00bc 07E0     	 b .L124
 2062              	.L120:
 2063              	.LBE17:
 499:../cleanflight/src/main/msp/msp_serial.c ****                 const uint8_t c = serialRead(mspPort->port);
 2064              	 .loc 2 499 0
 2065 00be 7B69     	 ldr r3,[r7,#20]
 2066 00c0 1B68     	 ldr r3,[r3]
 2067 00c2 1846     	 mov r0,r3
 2068 00c4 FFF7FEFF 	 bl serialRxBytesWaiting
 2069 00c8 0346     	 mov r3,r0
 2070 00ca 002B     	 cmp r3,#0
 2071 00cc C1D1     	 bne .L125
 2072              	.L124:
 516:../cleanflight/src/main/msp/msp_serial.c ****                 }
 517:../cleanflight/src/main/msp/msp_serial.c ****             }
 518:../cleanflight/src/main/msp/msp_serial.c **** 
 519:../cleanflight/src/main/msp/msp_serial.c ****             if (mspPostProcessFn) {
 2073              	 .loc 2 519 0
 2074 00ce BB69     	 ldr r3,[r7,#24]
 2075 00d0 002B     	 cmp r3,#0
 2076 00d2 0DD0     	 beq .L118
 520:../cleanflight/src/main/msp/msp_serial.c ****                 waitForSerialPortToFinishTransmitting(mspPort->port);
 2077              	 .loc 2 520 0
 2078 00d4 7B69     	 ldr r3,[r7,#20]
 2079 00d6 1B68     	 ldr r3,[r3]
 2080 00d8 1846     	 mov r0,r3
 2081 00da FFF7FEFF 	 bl waitForSerialPortToFinishTransmitting
 521:../cleanflight/src/main/msp/msp_serial.c ****                 mspPostProcessFn(mspPort->port);
 2082              	 .loc 2 521 0
 2083 00de 7B69     	 ldr r3,[r7,#20]
 2084 00e0 1A68     	 ldr r2,[r3]
 2085 00e2 BB69     	 ldr r3,[r7,#24]
 2086 00e4 1046     	 mov r0,r2
 2087 00e6 9847     	 blx r3
 2088 00e8 02E0     	 b .L118
 2089              	.L119:
 522:../cleanflight/src/main/msp/msp_serial.c ****             }
 523:../cleanflight/src/main/msp/msp_serial.c ****         }
 524:../cleanflight/src/main/msp/msp_serial.c ****         else {
 525:../cleanflight/src/main/msp/msp_serial.c ****             mspProcessPendingRequest(mspPort);
 2090              	 .loc 2 525 0
 2091 00ea 7869     	 ldr r0,[r7,#20]
 2092 00ec FFF7FEFF 	 bl mspProcessPendingRequest
 2093              	.L118:
 2094              	.LBE16:
 486:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2095              	 .loc 2 486 0 discriminator 2
 2096 00f0 FB7F     	 ldrb r3,[r7,#31]
 2097 00f2 0133     	 adds r3,r3,#1
 2098 00f4 FB77     	 strb r3,[r7,#31]
 2099              	.L116:
 486:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2100              	 .loc 2 486 0 is_stmt 0 discriminator 1
 2101 00f6 FB7F     	 ldrb r3,[r7,#31]
 2102 00f8 022B     	 cmp r3,#2
 2103 00fa 8BD9     	 bls .L127
 2104              	.LBE15:
 526:../cleanflight/src/main/msp/msp_serial.c ****         }
 527:../cleanflight/src/main/msp/msp_serial.c ****     }
 528:../cleanflight/src/main/msp/msp_serial.c **** }
 2105              	 .loc 2 528 0 is_stmt 1
 2106 00fc 2037     	 adds r7,r7,#32
 2107              	.LCFI63:
 2108              	 .cfi_def_cfa_offset 8
 2109 00fe BD46     	 mov sp,r7
 2110              	.LCFI64:
 2111              	 .cfi_def_cfa_register 13
 2112              	 
 2113 0100 80BD     	 pop {r7,pc}
 2114              	.L129:
 2115 0102 00BF     	 .align 2
 2116              	.L128:
 2117 0104 00000000 	 .word mspPorts
 2118              	 .cfi_endproc
 2119              	.LFE542:
 2121              	 .section .text.mspSerialWaiting,"ax",%progbits
 2122              	 .align 2
 2123              	 .global mspSerialWaiting
 2124              	 .thumb
 2125              	 .thumb_func
 2127              	mspSerialWaiting:
 2128              	.LFB543:
 529:../cleanflight/src/main/msp/msp_serial.c **** 
 530:../cleanflight/src/main/msp/msp_serial.c **** bool mspSerialWaiting(void)
 531:../cleanflight/src/main/msp/msp_serial.c **** {
 2129              	 .loc 2 531 0
 2130              	 .cfi_startproc
 2131              	 
 2132              	 
 2133 0000 80B5     	 push {r7,lr}
 2134              	.LCFI65:
 2135              	 .cfi_def_cfa_offset 8
 2136              	 .cfi_offset 7,-8
 2137              	 .cfi_offset 14,-4
 2138 0002 82B0     	 sub sp,sp,#8
 2139              	.LCFI66:
 2140              	 .cfi_def_cfa_offset 16
 2141 0004 00AF     	 add r7,sp,#0
 2142              	.LCFI67:
 2143              	 .cfi_def_cfa_register 7
 2144              	.LBB18:
 532:../cleanflight/src/main/msp/msp_serial.c ****     for (uint8_t portIndex = 0; portIndex < MAX_MSP_PORT_COUNT; portIndex++) {
 2145              	 .loc 2 532 0
 2146 0006 0023     	 movs r3,#0
 2147 0008 FB71     	 strb r3,[r7,#7]
 2148 000a 18E0     	 b .L131
 2149              	.L135:
 2150              	.LBB19:
 533:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2151              	 .loc 2 533 0
 2152 000c FB79     	 ldrb r3,[r7,#7]
 2153 000e DA22     	 movs r2,#218
 2154 0010 02FB03F3 	 mul r3,r2,r3
 2155 0014 0E4A     	 ldr r2,.L136
 2156 0016 1344     	 add r3,r3,r2
 2157 0018 3B60     	 str r3,[r7]
 534:../cleanflight/src/main/msp/msp_serial.c ****         if (!mspPort->port) {
 2158              	 .loc 2 534 0
 2159 001a 3B68     	 ldr r3,[r7]
 2160 001c 1B68     	 ldr r3,[r3]
 2161 001e 002B     	 cmp r3,#0
 2162 0020 00D1     	 bne .L132
 535:../cleanflight/src/main/msp/msp_serial.c ****             continue;
 2163              	 .loc 2 535 0
 2164 0022 09E0     	 b .L133
 2165              	.L132:
 536:../cleanflight/src/main/msp/msp_serial.c ****         }
 537:../cleanflight/src/main/msp/msp_serial.c **** 
 538:../cleanflight/src/main/msp/msp_serial.c ****         if (serialRxBytesWaiting(mspPort->port)) {
 2166              	 .loc 2 538 0
 2167 0024 3B68     	 ldr r3,[r7]
 2168 0026 1B68     	 ldr r3,[r3]
 2169 0028 1846     	 mov r0,r3
 2170 002a FFF7FEFF 	 bl serialRxBytesWaiting
 2171 002e 0346     	 mov r3,r0
 2172 0030 002B     	 cmp r3,#0
 2173 0032 01D0     	 beq .L133
 539:../cleanflight/src/main/msp/msp_serial.c ****             return true;
 2174              	 .loc 2 539 0
 2175 0034 0123     	 movs r3,#1
 2176 0036 06E0     	 b .L134
 2177              	.L133:
 2178              	.LBE19:
 532:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2179              	 .loc 2 532 0 discriminator 2
 2180 0038 FB79     	 ldrb r3,[r7,#7]
 2181 003a 0133     	 adds r3,r3,#1
 2182 003c FB71     	 strb r3,[r7,#7]
 2183              	.L131:
 532:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2184              	 .loc 2 532 0 is_stmt 0 discriminator 1
 2185 003e FB79     	 ldrb r3,[r7,#7]
 2186 0040 022B     	 cmp r3,#2
 2187 0042 E3D9     	 bls .L135
 2188              	.LBE18:
 540:../cleanflight/src/main/msp/msp_serial.c ****         }
 541:../cleanflight/src/main/msp/msp_serial.c ****     }
 542:../cleanflight/src/main/msp/msp_serial.c ****     return false;
 2189              	 .loc 2 542 0 is_stmt 1
 2190 0044 0023     	 movs r3,#0
 2191              	.L134:
 543:../cleanflight/src/main/msp/msp_serial.c **** }
 2192              	 .loc 2 543 0
 2193 0046 1846     	 mov r0,r3
 2194 0048 0837     	 adds r7,r7,#8
 2195              	.LCFI68:
 2196              	 .cfi_def_cfa_offset 8
 2197 004a BD46     	 mov sp,r7
 2198              	.LCFI69:
 2199              	 .cfi_def_cfa_register 13
 2200              	 
 2201 004c 80BD     	 pop {r7,pc}
 2202              	.L137:
 2203 004e 00BF     	 .align 2
 2204              	.L136:
 2205 0050 00000000 	 .word mspPorts
 2206              	 .cfi_endproc
 2207              	.LFE543:
 2209              	 .section .text.mspSerialInit,"ax",%progbits
 2210              	 .align 2
 2211              	 .global mspSerialInit
 2212              	 .thumb
 2213              	 .thumb_func
 2215              	mspSerialInit:
 2216              	.LFB544:
 544:../cleanflight/src/main/msp/msp_serial.c **** 
 545:../cleanflight/src/main/msp/msp_serial.c **** void mspSerialInit(void)
 546:../cleanflight/src/main/msp/msp_serial.c **** {
 2217              	 .loc 2 546 0
 2218              	 .cfi_startproc
 2219              	 
 2220              	 
 2221 0000 80B5     	 push {r7,lr}
 2222              	.LCFI70:
 2223              	 .cfi_def_cfa_offset 8
 2224              	 .cfi_offset 7,-8
 2225              	 .cfi_offset 14,-4
 2226 0002 00AF     	 add r7,sp,#0
 2227              	.LCFI71:
 2228              	 .cfi_def_cfa_register 7
 547:../cleanflight/src/main/msp/msp_serial.c ****     memset(mspPorts, 0, sizeof(mspPorts));
 2229              	 .loc 2 547 0
 2230 0004 0448     	 ldr r0,.L139
 2231 0006 0021     	 movs r1,#0
 2232 0008 40F28E22 	 movw r2,#654
 2233 000c FFF7FEFF 	 bl memset
 548:../cleanflight/src/main/msp/msp_serial.c ****     mspSerialAllocatePorts();
 2234              	 .loc 2 548 0
 2235 0010 FFF7FEFF 	 bl mspSerialAllocatePorts
 549:../cleanflight/src/main/msp/msp_serial.c **** }
 2236              	 .loc 2 549 0
 2237 0014 80BD     	 pop {r7,pc}
 2238              	.L140:
 2239 0016 00BF     	 .align 2
 2240              	.L139:
 2241 0018 00000000 	 .word mspPorts
 2242              	 .cfi_endproc
 2243              	.LFE544:
 2245              	 .section .text.mspSerialPush,"ax",%progbits
 2246              	 .align 2
 2247              	 .global mspSerialPush
 2248              	 .thumb
 2249              	 .thumb_func
 2251              	mspSerialPush:
 2252              	.LFB545:
 550:../cleanflight/src/main/msp/msp_serial.c **** 
 551:../cleanflight/src/main/msp/msp_serial.c **** int mspSerialPush(uint8_t cmd, uint8_t *data, int datalen, mspDirection_e direction)
 552:../cleanflight/src/main/msp/msp_serial.c **** {
 2253              	 .loc 2 552 0
 2254              	 .cfi_startproc
 2255              	 
 2256              	 
 2257 0000 80B5     	 push {r7,lr}
 2258              	.LCFI72:
 2259              	 .cfi_def_cfa_offset 8
 2260              	 .cfi_offset 7,-8
 2261              	 .cfi_offset 14,-4
 2262 0002 8CB0     	 sub sp,sp,#48
 2263              	.LCFI73:
 2264              	 .cfi_def_cfa_offset 56
 2265 0004 00AF     	 add r7,sp,#0
 2266              	.LCFI74:
 2267              	 .cfi_def_cfa_register 7
 2268 0006 B960     	 str r1,[r7,#8]
 2269 0008 7A60     	 str r2,[r7,#4]
 2270 000a 1A46     	 mov r2,r3
 2271 000c 0346     	 mov r3,r0
 2272 000e FB73     	 strb r3,[r7,#15]
 2273 0010 1346     	 mov r3,r2
 2274 0012 BB73     	 strb r3,[r7,#14]
 553:../cleanflight/src/main/msp/msp_serial.c ****     int ret = 0;
 2275              	 .loc 2 553 0
 2276 0014 0023     	 movs r3,#0
 2277 0016 FB62     	 str r3,[r7,#44]
 2278              	.LBB20:
 554:../cleanflight/src/main/msp/msp_serial.c **** 
 555:../cleanflight/src/main/msp/msp_serial.c ****     for (int portIndex = 0; portIndex < MAX_MSP_PORT_COUNT; portIndex++) {
 2279              	 .loc 2 555 0
 2280 0018 0023     	 movs r3,#0
 2281 001a BB62     	 str r3,[r7,#40]
 2282 001c 37E0     	 b .L142
 2283              	.L147:
 2284              	.LBB21:
 556:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2285              	 .loc 2 556 0
 2286 001e BB6A     	 ldr r3,[r7,#40]
 2287 0020 DA22     	 movs r2,#218
 2288 0022 02FB03F3 	 mul r3,r2,r3
 2289 0026 1E4A     	 ldr r2,.L149
 2290 0028 1344     	 add r3,r3,r2
 2291 002a 7B62     	 str r3,[r7,#36]
 557:../cleanflight/src/main/msp/msp_serial.c ****         if (!mspPort->port) {
 2292              	 .loc 2 557 0
 2293 002c 7B6A     	 ldr r3,[r7,#36]
 2294 002e 1B68     	 ldr r3,[r3]
 2295 0030 002B     	 cmp r3,#0
 2296 0032 00D1     	 bne .L143
 558:../cleanflight/src/main/msp/msp_serial.c ****             continue;
 2297              	 .loc 2 558 0
 2298 0034 28E0     	 b .L146
 2299              	.L143:
 559:../cleanflight/src/main/msp/msp_serial.c ****         }
 560:../cleanflight/src/main/msp/msp_serial.c **** 
 561:../cleanflight/src/main/msp/msp_serial.c ****         // XXX Kludge!!! Avoid zombie VCP port (avoid VCP entirely for now)
 562:../cleanflight/src/main/msp/msp_serial.c ****         if (mspPort->port->identifier == SERIAL_PORT_USB_VCP) {
 2300              	 .loc 2 562 0
 2301 0036 7B6A     	 ldr r3,[r7,#36]
 2302 0038 1B68     	 ldr r3,[r3]
 2303 003a 93F83230 	 ldrb r3,[r3,#50]
 2304 003e 142B     	 cmp r3,#20
 2305 0040 00D1     	 bne .L145
 563:../cleanflight/src/main/msp/msp_serial.c ****             continue;
 2306              	 .loc 2 563 0
 2307 0042 21E0     	 b .L146
 2308              	.L145:
 564:../cleanflight/src/main/msp/msp_serial.c ****         }
 565:../cleanflight/src/main/msp/msp_serial.c **** 
 566:../cleanflight/src/main/msp/msp_serial.c ****         mspPacket_t push = {
 2309              	 .loc 2 566 0
 2310 0044 07F11403 	 add r3,r7,#20
 2311 0048 0022     	 movs r2,#0
 2312 004a 1A60     	 str r2,[r3]
 2313 004c 0433     	 adds r3,r3,#4
 2314 004e 0022     	 movs r2,#0
 2315 0050 1A60     	 str r2,[r3]
 2316 0052 0433     	 adds r3,r3,#4
 2317 0054 0022     	 movs r2,#0
 2318 0056 1A60     	 str r2,[r3]
 2319 0058 0433     	 adds r3,r3,#4
 2320 005a 0022     	 movs r2,#0
 2321 005c 1A80     	 strh r2,[r3]
 2322 005e 0233     	 adds r3,r3,#2
 2323 0060 BB68     	 ldr r3,[r7,#8]
 2324 0062 7B61     	 str r3,[r7,#20]
 567:../cleanflight/src/main/msp/msp_serial.c ****             .buf = { .ptr = data, .end = data + datalen, },
 2325              	 .loc 2 567 0
 2326 0064 7B68     	 ldr r3,[r7,#4]
 2327 0066 BA68     	 ldr r2,[r7,#8]
 2328 0068 1344     	 add r3,r3,r2
 566:../cleanflight/src/main/msp/msp_serial.c ****             .buf = { .ptr = data, .end = data + datalen, },
 2329              	 .loc 2 566 0
 2330 006a BB61     	 str r3,[r7,#24]
 2331 006c FB7B     	 ldrb r3,[r7,#15]
 2332 006e 9BB2     	 uxth r3,r3
 2333 0070 BB83     	 strh r3,[r7,#28]
 2334 0072 BB7B     	 ldrb r3,[r7,#14]
 2335 0074 87F82130 	 strb r3,[r7,#33]
 568:../cleanflight/src/main/msp/msp_serial.c ****             .cmd = cmd,
 569:../cleanflight/src/main/msp/msp_serial.c ****             .result = 0,
 570:../cleanflight/src/main/msp/msp_serial.c ****             .direction = direction,
 571:../cleanflight/src/main/msp/msp_serial.c ****         };
 572:../cleanflight/src/main/msp/msp_serial.c **** 
 573:../cleanflight/src/main/msp/msp_serial.c ****         ret = mspSerialEncode(mspPort, &push, MSP_V1);
 2336              	 .loc 2 573 0
 2337 0078 07F11403 	 add r3,r7,#20
 2338 007c 786A     	 ldr r0,[r7,#36]
 2339 007e 1946     	 mov r1,r3
 2340 0080 0022     	 movs r2,#0
 2341 0082 FFF7FEFF 	 bl mspSerialEncode
 2342 0086 F862     	 str r0,[r7,#44]
 2343              	.L146:
 2344              	.LBE21:
 555:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2345              	 .loc 2 555 0 discriminator 2
 2346 0088 BB6A     	 ldr r3,[r7,#40]
 2347 008a 0133     	 adds r3,r3,#1
 2348 008c BB62     	 str r3,[r7,#40]
 2349              	.L142:
 555:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2350              	 .loc 2 555 0 is_stmt 0 discriminator 1
 2351 008e BB6A     	 ldr r3,[r7,#40]
 2352 0090 022B     	 cmp r3,#2
 2353 0092 C4DD     	 ble .L147
 2354              	.LBE20:
 574:../cleanflight/src/main/msp/msp_serial.c ****     }
 575:../cleanflight/src/main/msp/msp_serial.c ****     return ret; // return the number of bytes written
 2355              	 .loc 2 575 0 is_stmt 1
 2356 0094 FB6A     	 ldr r3,[r7,#44]
 576:../cleanflight/src/main/msp/msp_serial.c **** }
 2357              	 .loc 2 576 0
 2358 0096 1846     	 mov r0,r3
 2359 0098 3037     	 adds r7,r7,#48
 2360              	.LCFI75:
 2361              	 .cfi_def_cfa_offset 8
 2362 009a BD46     	 mov sp,r7
 2363              	.LCFI76:
 2364              	 .cfi_def_cfa_register 13
 2365              	 
 2366 009c 80BD     	 pop {r7,pc}
 2367              	.L150:
 2368 009e 00BF     	 .align 2
 2369              	.L149:
 2370 00a0 00000000 	 .word mspPorts
 2371              	 .cfi_endproc
 2372              	.LFE545:
 2374              	 .section .text.mspSerialTxBytesFree,"ax",%progbits
 2375              	 .align 2
 2376              	 .global mspSerialTxBytesFree
 2377              	 .thumb
 2378              	 .thumb_func
 2380              	mspSerialTxBytesFree:
 2381              	.LFB546:
 577:../cleanflight/src/main/msp/msp_serial.c **** 
 578:../cleanflight/src/main/msp/msp_serial.c **** 
 579:../cleanflight/src/main/msp/msp_serial.c **** uint32_t mspSerialTxBytesFree(void)
 580:../cleanflight/src/main/msp/msp_serial.c **** {
 2382              	 .loc 2 580 0
 2383              	 .cfi_startproc
 2384              	 
 2385              	 
 2386 0000 80B5     	 push {r7,lr}
 2387              	.LCFI77:
 2388              	 .cfi_def_cfa_offset 8
 2389              	 .cfi_offset 7,-8
 2390              	 .cfi_offset 14,-4
 2391 0002 84B0     	 sub sp,sp,#16
 2392              	.LCFI78:
 2393              	 .cfi_def_cfa_offset 24
 2394 0004 00AF     	 add r7,sp,#0
 2395              	.LCFI79:
 2396              	 .cfi_def_cfa_register 7
 581:../cleanflight/src/main/msp/msp_serial.c ****     uint32_t ret = UINT32_MAX;
 2397              	 .loc 2 581 0
 2398 0006 4FF0FF33 	 mov r3,#-1
 2399 000a FB60     	 str r3,[r7,#12]
 2400              	.LBB22:
 582:../cleanflight/src/main/msp/msp_serial.c **** 
 583:../cleanflight/src/main/msp/msp_serial.c ****     for (int portIndex = 0; portIndex < MAX_MSP_PORT_COUNT; portIndex++) {
 2401              	 .loc 2 583 0
 2402 000c 0023     	 movs r3,#0
 2403 000e BB60     	 str r3,[r7,#8]
 2404 0010 21E0     	 b .L152
 2405              	.L156:
 2406              	.LBB23:
 584:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2407              	 .loc 2 584 0
 2408 0012 BB68     	 ldr r3,[r7,#8]
 2409 0014 DA22     	 movs r2,#218
 2410 0016 02FB03F3 	 mul r3,r2,r3
 2411 001a 134A     	 ldr r2,.L158
 2412 001c 1344     	 add r3,r3,r2
 2413 001e 7B60     	 str r3,[r7,#4]
 585:../cleanflight/src/main/msp/msp_serial.c ****         if (!mspPort->port) {
 2414              	 .loc 2 585 0
 2415 0020 7B68     	 ldr r3,[r7,#4]
 2416 0022 1B68     	 ldr r3,[r3]
 2417 0024 002B     	 cmp r3,#0
 2418 0026 00D1     	 bne .L153
 586:../cleanflight/src/main/msp/msp_serial.c ****             continue;
 2419              	 .loc 2 586 0
 2420 0028 12E0     	 b .L154
 2421              	.L153:
 587:../cleanflight/src/main/msp/msp_serial.c ****         }
 588:../cleanflight/src/main/msp/msp_serial.c **** 
 589:../cleanflight/src/main/msp/msp_serial.c ****         // XXX Kludge!!! Avoid zombie VCP port (avoid VCP entirely for now)
 590:../cleanflight/src/main/msp/msp_serial.c ****         if (mspPort->port->identifier == SERIAL_PORT_USB_VCP) {
 2422              	 .loc 2 590 0
 2423 002a 7B68     	 ldr r3,[r7,#4]
 2424 002c 1B68     	 ldr r3,[r3]
 2425 002e 93F83230 	 ldrb r3,[r3,#50]
 2426 0032 142B     	 cmp r3,#20
 2427 0034 00D1     	 bne .L155
 591:../cleanflight/src/main/msp/msp_serial.c ****             continue;
 2428              	 .loc 2 591 0
 2429 0036 0BE0     	 b .L154
 2430              	.L155:
 592:../cleanflight/src/main/msp/msp_serial.c ****         }
 593:../cleanflight/src/main/msp/msp_serial.c **** 
 594:../cleanflight/src/main/msp/msp_serial.c ****         const uint32_t bytesFree = serialTxBytesFree(mspPort->port);
 2431              	 .loc 2 594 0
 2432 0038 7B68     	 ldr r3,[r7,#4]
 2433 003a 1B68     	 ldr r3,[r3]
 2434 003c 1846     	 mov r0,r3
 2435 003e FFF7FEFF 	 bl serialTxBytesFree
 2436 0042 3860     	 str r0,[r7]
 595:../cleanflight/src/main/msp/msp_serial.c ****         if (bytesFree < ret) {
 2437              	 .loc 2 595 0
 2438 0044 3A68     	 ldr r2,[r7]
 2439 0046 FB68     	 ldr r3,[r7,#12]
 2440 0048 9A42     	 cmp r2,r3
 2441 004a 01D2     	 bcs .L154
 596:../cleanflight/src/main/msp/msp_serial.c ****             ret = bytesFree;
 2442              	 .loc 2 596 0
 2443 004c 3B68     	 ldr r3,[r7]
 2444 004e FB60     	 str r3,[r7,#12]
 2445              	.L154:
 2446              	.LBE23:
 583:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2447              	 .loc 2 583 0 discriminator 2
 2448 0050 BB68     	 ldr r3,[r7,#8]
 2449 0052 0133     	 adds r3,r3,#1
 2450 0054 BB60     	 str r3,[r7,#8]
 2451              	.L152:
 583:../cleanflight/src/main/msp/msp_serial.c ****         mspPort_t * const mspPort = &mspPorts[portIndex];
 2452              	 .loc 2 583 0 is_stmt 0 discriminator 1
 2453 0056 BB68     	 ldr r3,[r7,#8]
 2454 0058 022B     	 cmp r3,#2
 2455 005a DADD     	 ble .L156
 2456              	.LBE22:
 597:../cleanflight/src/main/msp/msp_serial.c ****         }
 598:../cleanflight/src/main/msp/msp_serial.c ****     }
 599:../cleanflight/src/main/msp/msp_serial.c **** 
 600:../cleanflight/src/main/msp/msp_serial.c ****     return ret;
 2457              	 .loc 2 600 0 is_stmt 1
 2458 005c FB68     	 ldr r3,[r7,#12]
 601:../cleanflight/src/main/msp/msp_serial.c **** }
 2459              	 .loc 2 601 0
 2460 005e 1846     	 mov r0,r3
 2461 0060 1037     	 adds r7,r7,#16
 2462              	.LCFI80:
 2463              	 .cfi_def_cfa_offset 8
 2464 0062 BD46     	 mov sp,r7
 2465              	.LCFI81:
 2466              	 .cfi_def_cfa_register 13
 2467              	 
 2468 0064 80BD     	 pop {r7,pc}
 2469              	.L159:
 2470 0066 00BF     	 .align 2
 2471              	.L158:
 2472 0068 00000000 	 .word mspPorts
 2473              	 .cfi_endproc
 2474              	.LFE546:
 2476              	 .section .rodata.mspMagic.12321,"a",%progbits
 2477              	 .align 2
 2480              	mspMagic.12321:
 2481 0000 4D       	 .byte 77
 2482 0001 4D       	 .byte 77
 2483 0002 58       	 .byte 88
 2484 0003 00       	 .section .bss.outBuf.12339,"aw",%nobits
 2485              	 .align 2
 2488              	outBuf.12339:
 2489 0000 00000000 	 .space 256
 2489      00000000 
 2489      00000000 
 2489      00000000 
 2489      00000000 
 2490              	 .text
 2491              	.Letext0:
 2492              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2493              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2494              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 2495              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/streambuf.h"
 2496              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 2497              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/interface/msp.h"
 2498              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 2499              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 2500              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 2501              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 2502              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/msp/msp_serial.h"
 2503              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 2504              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 msp_serial.c
    {standard input}:20     .text.serialConfig:00000000 $t
    {standard input}:24     .text.serialConfig:00000000 serialConfig
    {standard input}:54     .text.serialConfig:00000010 $d
    {standard input}:59     .bss.mspPorts:00000000 $d
    {standard input}:62     .bss.mspPorts:00000000 mspPorts
    {standard input}:65     .text.resetMspPort:00000000 $t
    {standard input}:69     .text.resetMspPort:00000000 resetMspPort
    {standard input}:117    .text.mspSerialAllocatePorts:00000000 $t
    {standard input}:122    .text.mspSerialAllocatePorts:00000000 mspSerialAllocatePorts
    {standard input}:240    .text.mspSerialAllocatePorts:000000a0 $d
    {standard input}:246    .text.mspSerialReleasePortIfAllocated:00000000 $t
    {standard input}:251    .text.mspSerialReleasePortIfAllocated:00000000 mspSerialReleasePortIfAllocated
    {standard input}:321    .text.mspSerialReleasePortIfAllocated:00000048 $d
    {standard input}:326    .text.mspSerialProcessReceivedData:00000000 $t
    {standard input}:330    .text.mspSerialProcessReceivedData:00000000 mspSerialProcessReceivedData
    {standard input}:360    .text.mspSerialProcessReceivedData:0000001c $d
    {standard input}:372    .text.mspSerialProcessReceivedData:0000004c $t
    {standard input}:1007   .text.mspSerialChecksumBuf:00000000 $t
    {standard input}:1011   .text.mspSerialChecksumBuf:00000000 mspSerialChecksumBuf
    {standard input}:1070   .text.mspSerialSendFrame:00000000 $t
    {standard input}:1074   .text.mspSerialSendFrame:00000000 mspSerialSendFrame
    {standard input}:1174   .text.mspSerialEncode:00000000 $t
    {standard input}:1178   .text.mspSerialEncode:00000000 mspSerialEncode
    {standard input}:1578   .text.mspSerialEncode:000002dc $d
    {standard input}:2480   .rodata.mspMagic.12321:00000000 mspMagic.12321
    {standard input}:1583   .rodata:00000000 $d
    {standard input}:2488   .bss.outBuf.12339:00000000 outBuf.12339
    {standard input}:1592   .text.mspSerialProcessReceivedCommand:00000000 $t
    {standard input}:1596   .text.mspSerialProcessReceivedCommand:00000000 mspSerialProcessReceivedCommand
    {standard input}:1705   .text.mspSerialProcessReceivedCommand:000000a4 $d
    {standard input}:1710   .text.mspEvaluateNonMspData:00000000 $t
    {standard input}:1714   .text.mspEvaluateNonMspData:00000000 mspEvaluateNonMspData
    {standard input}:1772   .text.mspProcessPendingRequest:00000000 $t
    {standard input}:1776   .text.mspProcessPendingRequest:00000000 mspProcessPendingRequest
    {standard input}:1847   .text.mspSerialProcessReceivedReply:00000000 $t
    {standard input}:1851   .text.mspSerialProcessReceivedReply:00000000 mspSerialProcessReceivedReply
    {standard input}:1927   .text.mspSerialProcess:00000000 $t
    {standard input}:1932   .text.mspSerialProcess:00000000 mspSerialProcess
    {standard input}:2117   .text.mspSerialProcess:00000104 $d
    {standard input}:2122   .text.mspSerialWaiting:00000000 $t
    {standard input}:2127   .text.mspSerialWaiting:00000000 mspSerialWaiting
    {standard input}:2205   .text.mspSerialWaiting:00000050 $d
    {standard input}:2210   .text.mspSerialInit:00000000 $t
    {standard input}:2215   .text.mspSerialInit:00000000 mspSerialInit
    {standard input}:2241   .text.mspSerialInit:00000018 $d
    {standard input}:2246   .text.mspSerialPush:00000000 $t
    {standard input}:2251   .text.mspSerialPush:00000000 mspSerialPush
    {standard input}:2370   .text.mspSerialPush:000000a0 $d
    {standard input}:2375   .text.mspSerialTxBytesFree:00000000 $t
    {standard input}:2380   .text.mspSerialTxBytesFree:00000000 mspSerialTxBytesFree
    {standard input}:2472   .text.mspSerialTxBytesFree:00000068 $d
    {standard input}:2477   .rodata.mspMagic.12321:00000000 $d
    {standard input}:2485   .bss.outBuf.12339:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
serialConfig_System
memset
findSerialPortConfig
openSerialPort
isSerialPortShared
findNextSerialPortConfig
baudRates
closeSerialPort
crc8_dvb_s2
isSerialTransmitBufferEmpty
serialTxBytesFree
serialBeginWrite
serialWriteBuf
serialEndWrite
sbufBytesRemaining
sbufPtr
crc8_dvb_s2_update
sbufSwitchToReader
millis
systemResetToBootloader
cliEnter
serialRxBytesWaiting
serialRead
waitForSerialPortToFinishTransmitting
