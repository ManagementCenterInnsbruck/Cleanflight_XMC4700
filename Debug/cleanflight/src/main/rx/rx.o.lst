   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "rx.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.cmp32,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	cmp32:
  25              	.LFB520:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/utils.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #include <stddef.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define NOOP do {} while (0)
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define ARRAYLEN(x) (sizeof(x) / sizeof((x)[0]))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define ARRAYEND(x) (&(x)[ARRAYLEN(x)])
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONST_CAST(type, value) ((type)(value))
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT_HELPER(x,y) x ## y
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT(x,y) CONCAT_HELPER(x, y)
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT2(_1,_2) CONCAT(_1, _2)
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT3(_1,_2,_3)  CONCAT(CONCAT(_1, _2), _3)
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT4(_1,_2,_3,_4)  CONCAT(CONCAT3(_1, _2, _3), _4)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STR_HELPER(x) #x
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STR(x) STR_HELPER(x)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define EXPAND_I(x) x
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define EXPAND(x) EXPAND_I(x)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // expand to t if bit is 1, f when bit is 0. Other bit values are not supported
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF(bit, t, f) PP_IIF_I(bit, t, f)
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_I(bit, t, f) PP_IIF_ ## bit(t, f)
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_0(t, f) f
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_1(t, f) t
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // Expand all argumens and call macro with them. When expansion of some argument contains ',', it w
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // #define TAKE3(_1,_2,_3) CONCAT3(_1,_2,_3)
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // #define MULTI2 A,B
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // PP_CALL(TAKE3, MULTI2, C) expands to ABC
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_CALL(macro, ...) macro(__VA_ARGS__)
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #if !defined(UNUSED)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define UNUSED(x) (void)(x)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #endif
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STATIC_ASSERT(condition, name) \
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****     typedef char assert_failed_ ## name [(condition) ? 1 : -1 ] __attribute__((unused))
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BIT(x) (1 << (x))
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** http://resnet.uoregon.edu/~gurney_j/jmpc/bitwise.html
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** */
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BITCOUNT(x) (((BX_(x)+(BX_(x)>>4)) & 0x0F0F0F0F) % 255)
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BX_(x) ((x) - (((x)>>1)&0x77777777) - (((x)>>2)&0x33333333) - (((x)>>3)&0x11111111))
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * https://groups.google.com/forum/?hl=en#!msg/comp.lang.c/attFnqwhvGk/sGBKXvIkY3AJ
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Return (v ? floor(log2(v)) : 0) when 0 <= v < 1<<[8, 16, 32, 64].
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Inefficient algorithm, intended for compile-time constants.
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  */
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_8BIT(v)  (8 - 90/(((v)/4+14)|1) - 2/((v)/2+1))
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_16BIT(v) (8*((v)>255) + LOG2_8BIT((v) >>8*((v)>255)))
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_32BIT(v) (16*((v)>65535L) + LOG2_16BIT((v)*1L >>16*((v)>65535L)))
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_64BIT(v) \
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****     (32*((v)/2L>>31 > 0) \
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****      + LOG2_32BIT((v)*1L >>16*((v)/2L>>31 > 0) \
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****                          >>16*((v)/2L>>31 > 0)))
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2(v) LOG2_64BIT(v)
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #if 0
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // ISO C version, but no type checking
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define container_of(ptr, type, member) \
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****                       ((type *) ((char *)(ptr) - offsetof(type, member)))
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #else
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // non ISO variant from linux kernel; checks ptr type, but triggers 'ISO C forbids braced-groups wi
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** //  __extension__ is here to disable this warning
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define container_of(ptr, type, member)  ( __extension__ ({     \
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****         const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****         (type *)( (char *)__mptr - offsetof(type,member) );}))
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** static inline int16_t cmp16(uint16_t a, uint16_t b) { return (int16_t)(a-b); }
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** static inline int32_t cmp32(uint32_t a, uint32_t b) { return (int32_t)(a-b); }
  27              	 .loc 1 100 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
  44              	 .loc 1 100 0
  45 000a 7A68     	 ldr r2,[r7,#4]
  46 000c 3B68     	 ldr r3,[r7]
  47 000e D31A     	 subs r3,r2,r3
  48 0010 1846     	 mov r0,r3
  49 0012 0C37     	 adds r7,r7,#12
  50              	.LCFI3:
  51              	 .cfi_def_cfa_offset 4
  52 0014 BD46     	 mov sp,r7
  53              	.LCFI4:
  54              	 .cfi_def_cfa_register 13
  55              	 
  56 0016 5DF8047B 	 ldr r7,[sp],#4
  57              	.LCFI5:
  58              	 .cfi_restore 7
  59              	 .cfi_def_cfa_offset 0
  60 001a 7047     	 bx lr
  61              	 .cfi_endproc
  62              	.LFE520:
  64              	 .section .text.constrain,"ax",%progbits
  65              	 .align 2
  66              	 .thumb
  67              	 .thumb_func
  69              	constrain:
  70              	.LFB521:
  71              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  72              	 .loc 2 151 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 85B0     	 sub sp,sp,#20
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 24
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 F860     	 str r0,[r7,#12]
  88 0008 B960     	 str r1,[r7,#8]
  89 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
  90              	 .loc 2 152 0
  91 000c FA68     	 ldr r2,[r7,#12]
  92 000e BB68     	 ldr r3,[r7,#8]
  93 0010 9A42     	 cmp r2,r3
  94 0012 01DA     	 bge .L4
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
  95              	 .loc 2 153 0
  96 0014 BB68     	 ldr r3,[r7,#8]
  97 0016 06E0     	 b .L5
  98              	.L4:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
  99              	 .loc 2 154 0
 100 0018 FA68     	 ldr r2,[r7,#12]
 101 001a 7B68     	 ldr r3,[r7,#4]
 102 001c 9A42     	 cmp r2,r3
 103 001e 01DD     	 ble .L6
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 104              	 .loc 2 155 0
 105 0020 7B68     	 ldr r3,[r7,#4]
 106 0022 00E0     	 b .L5
 107              	.L6:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 108              	 .loc 2 157 0
 109 0024 FB68     	 ldr r3,[r7,#12]
 110              	.L5:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 111              	 .loc 2 158 0
 112 0026 1846     	 mov r0,r3
 113 0028 1437     	 adds r7,r7,#20
 114              	.LCFI9:
 115              	 .cfi_def_cfa_offset 4
 116 002a BD46     	 mov sp,r7
 117              	.LCFI10:
 118              	 .cfi_def_cfa_register 13
 119              	 
 120 002c 5DF8047B 	 ldr r7,[sp],#4
 121              	.LCFI11:
 122              	 .cfi_restore 7
 123              	 .cfi_def_cfa_offset 0
 124 0030 7047     	 bx lr
 125              	 .cfi_endproc
 126              	.LFE521:
 128 0032 00BF     	 .section .text.cmpTimeUs,"ax",%progbits
 129              	 .align 2
 130              	 .thumb
 131              	 .thumb_func
 133              	cmpTimeUs:
 134              	.LFB528:
 135              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include "platform.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #include "pg/pg.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // time difference, 32 bits always sufficient
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef int32_t timeDelta_t;
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // millisecond time
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint32_t timeMs_t ;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** // microsecond time
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #ifdef USE_64BIT_TIME
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint64_t timeUs_t;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #define TIMEUS_MAX UINT64_MAX
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #else
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** typedef uint32_t timeUs_t;
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #define TIMEUS_MAX UINT32_MAX
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** #endif
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\time.h **** static inline timeDelta_t cmpTimeUs(timeUs_t a, timeUs_t b) { return (timeDelta_t)(a - b); }
 136              	 .loc 3 43 0
 137              	 .cfi_startproc
 138              	 
 139              	 
 140              	 
 141 0000 80B4     	 push {r7}
 142              	.LCFI12:
 143              	 .cfi_def_cfa_offset 4
 144              	 .cfi_offset 7,-4
 145 0002 83B0     	 sub sp,sp,#12
 146              	.LCFI13:
 147              	 .cfi_def_cfa_offset 16
 148 0004 00AF     	 add r7,sp,#0
 149              	.LCFI14:
 150              	 .cfi_def_cfa_register 7
 151 0006 7860     	 str r0,[r7,#4]
 152 0008 3960     	 str r1,[r7]
 153              	 .loc 3 43 0
 154 000a 7A68     	 ldr r2,[r7,#4]
 155 000c 3B68     	 ldr r3,[r7]
 156 000e D31A     	 subs r3,r2,r3
 157 0010 1846     	 mov r0,r3
 158 0012 0C37     	 adds r7,r7,#12
 159              	.LCFI15:
 160              	 .cfi_def_cfa_offset 4
 161 0014 BD46     	 mov sp,r7
 162              	.LCFI16:
 163              	 .cfi_def_cfa_register 13
 164              	 
 165 0016 5DF8047B 	 ldr r7,[sp],#4
 166              	.LCFI17:
 167              	 .cfi_restore 7
 168              	 .cfi_def_cfa_offset 0
 169 001a 7047     	 bx lr
 170              	 .cfi_endproc
 171              	.LFE528:
 173              	 .section .text.modeActivationConditions,"ax",%progbits
 174              	 .align 2
 175              	 .thumb
 176              	 .thumb_func
 178              	modeActivationConditions:
 179              	.LFB541:
 180              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_modes.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #include <stdbool.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define BOXID_NONE 255
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef enum {
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     // ARM flag
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXARM = 0,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     // FLIGHT_MODE
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXANGLE,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXHORIZON,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXMAG,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBARO,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXGPSHOME,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXGPSHOLD,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXHEADFREE,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPASSTHRU,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXFAILSAFE,
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXGPSRESCUE,
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXID_FLIGHTMODE_LAST = BOXGPSRESCUE,
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // When new flight modes are added, the parameter group version for 'modeActivationConditions' in s
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     // RCMODE flags
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXANTIGRAVITY,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXHEADADJ,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMSTAB,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBEEPERON,
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXLEDLOW,
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCALIB,
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXOSD,
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXTELEMETRY,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXSERVO1,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXSERVO2,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXSERVO3,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBLACKBOX,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXAIRMODE,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOX3D,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXFPVANGLEMIX,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBLACKBOXERASE,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMERA1,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMERA2,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXCAMERA3,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXFLIPOVERAFTERCRASH,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPREARM,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXBEEPGPSCOUNT,
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXVTXPITMODE,
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPARALYZE,
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER1,
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER2,
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER3,
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXUSER4,
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXPIDAUDIO,
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     BOXACROTRAINER,
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     CHECKBOX_ITEM_COUNT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } boxId_e;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef enum {
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     MODELOGIC_OR = 0,
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     MODELOGIC_AND
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } modeLogic_e;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // type to hold enough bits for CHECKBOX_ITEM_COUNT. Struct used for value-like behavior
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef struct boxBitmask_s { uint32_t bits[(CHECKBOX_ITEM_COUNT + 31) / 32]; } boxBitmask_t;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MAX_MODE_ACTIVATION_CONDITION_COUNT 20
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define CHANNEL_RANGE_MIN 900
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define CHANNEL_RANGE_MAX 2100
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MODE_STEP_TO_CHANNEL_VALUE(step) (CHANNEL_RANGE_MIN + 25 * step)
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define CHANNEL_VALUE_TO_STEP(channelValue) ((constrain(channelValue, CHANNEL_RANGE_MIN, CHANNEL_RA
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MIN_MODE_RANGE_STEP 0
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** #define MAX_MODE_RANGE_STEP ((CHANNEL_RANGE_MAX - CHANNEL_RANGE_MIN) / 25)
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // steps are 25 apart
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // a value of 0 corresponds to a channel value of 900 or less
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // a value of 48 corresponds to a channel value of 2100 or more
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** // 48 steps between 900 and 2100
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef struct channelRange_s {
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     uint8_t startStep;
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     uint8_t endStep;
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } channelRange_t;
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** typedef struct modeActivationCondition_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     boxId_e modeId;
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     uint8_t auxChannelIndex;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     channelRange_t range;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     modeLogic_e modeLogic;
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h ****     boxId_e linkedTo;
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** } modeActivationCondition_t;
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** 
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc\rc_modes.h **** PG_DECLARE_ARRAY(modeActivationCondition_t, MAX_MODE_ACTIVATION_CONDITION_COUNT, modeActivationCond
 181              	 .loc 4 117 0
 182              	 .cfi_startproc
 183              	 
 184              	 
 185              	 
 186 0000 80B4     	 push {r7}
 187              	.LCFI18:
 188              	 .cfi_def_cfa_offset 4
 189              	 .cfi_offset 7,-4
 190 0002 83B0     	 sub sp,sp,#12
 191              	.LCFI19:
 192              	 .cfi_def_cfa_offset 16
 193 0004 00AF     	 add r7,sp,#0
 194              	.LCFI20:
 195              	 .cfi_def_cfa_register 7
 196 0006 7860     	 str r0,[r7,#4]
 197              	 .loc 4 117 0
 198 0008 7A68     	 ldr r2,[r7,#4]
 199 000a 1346     	 mov r3,r2
 200 000c 5B00     	 lsls r3,r3,#1
 201 000e 1344     	 add r3,r3,r2
 202 0010 5B00     	 lsls r3,r3,#1
 203 0012 044A     	 ldr r2,.L11
 204 0014 1344     	 add r3,r3,r2
 205 0016 1846     	 mov r0,r3
 206 0018 0C37     	 adds r7,r7,#12
 207              	.LCFI21:
 208              	 .cfi_def_cfa_offset 4
 209 001a BD46     	 mov sp,r7
 210              	.LCFI22:
 211              	 .cfi_def_cfa_register 13
 212              	 
 213 001c 5DF8047B 	 ldr r7,[sp],#4
 214              	.LCFI23:
 215              	 .cfi_restore 7
 216              	 .cfi_def_cfa_offset 0
 217 0020 7047     	 bx lr
 218              	.L12:
 219 0022 00BF     	 .align 2
 220              	.L11:
 221 0024 00000000 	 .word modeActivationConditions_SystemArray
 222              	 .cfi_endproc
 223              	.LFE541:
 225              	 .section .text.rxConfig,"ax",%progbits
 226              	 .align 2
 227              	 .thumb
 228              	 .thumb_func
 230              	rxConfig:
 231              	.LFB550:
 232              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
 233              	 .loc 5 61 0
 234              	 .cfi_startproc
 235              	 
 236              	 
 237              	 
 238 0000 80B4     	 push {r7}
 239              	.LCFI24:
 240              	 .cfi_def_cfa_offset 4
 241              	 .cfi_offset 7,-4
 242 0002 00AF     	 add r7,sp,#0
 243              	.LCFI25:
 244              	 .cfi_def_cfa_register 7
 245              	 .loc 5 61 0
 246 0004 024B     	 ldr r3,.L15
 247 0006 1846     	 mov r0,r3
 248 0008 BD46     	 mov sp,r7
 249              	.LCFI26:
 250              	 .cfi_def_cfa_register 13
 251              	 
 252 000a 5DF8047B 	 ldr r7,[sp],#4
 253              	.LCFI27:
 254              	 .cfi_restore 7
 255              	 .cfi_def_cfa_offset 0
 256 000e 7047     	 bx lr
 257              	.L16:
 258              	 .align 2
 259              	.L15:
 260 0010 00000000 	 .word rxConfig_System
 261              	 .cfi_endproc
 262              	.LFE550:
 264              	 .section .text.rxFailsafeChannelConfigs,"ax",%progbits
 265              	 .align 2
 266              	 .thumb
 267              	 .thumb_func
 269              	rxFailsafeChannelConfigs:
 270              	.LFB552:
 271              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "pg/rx.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #include "drivers/io_types.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define STICK_CHANNEL_COUNT 4
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_RANGE_MIN 1000
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_RANGE_MAX 2000
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_RANGE_MIDDLE (PWM_RANGE_MIN + ((PWM_RANGE_MAX - PWM_RANGE_MIN) / 2))
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_PULSE_MIN   750       // minimum PWM pulse width which is considered valid
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define PWM_PULSE_MAX   2250      // maximum PWM pulse width which is considered valid
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RXFAIL_STEP_TO_CHANNEL_VALUE(step) (PWM_PULSE_MIN + 25 * step)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define CHANNEL_VALUE_TO_RXFAIL_STEP(channelValue) ((constrain(channelValue, PWM_PULSE_MIN, PWM_PUL
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_RXFAIL_RANGE_STEP ((PWM_PULSE_MAX - PWM_PULSE_MIN) / 25)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define DEFAULT_SERVO_MIN 1000
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define DEFAULT_SERVO_MIDDLE 1500
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define DEFAULT_SERVO_MAX 2000
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_PENDING = 0,
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_COMPLETE = (1 << 0),
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_FAILSAFE = (1 << 1),
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_PROCESSING_REQUIRED = (1 << 2),
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FRAME_DROPPED = (1 << 3)
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFrameState_e;
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SPEKTRUM1024 = 0,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SPEKTRUM2048 = 1,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SBUS = 2,
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SUMD = 3,
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SUMH = 4,
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_XBUS_MODE_B = 5,
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_XBUS_MODE_B_RJ01 = 6,
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_IBUS = 7,
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_JETIEXBUS = 8,
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_CRSF = 9,
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_SRXL = 10,
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_TARGET_CUSTOM = 11,
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     SERIALRX_FPORT = 12,
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } SerialRXType;
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT          12
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_COUNT  8
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RC_CHANNEL_COUNT              18
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define NON_AUX_CHANNEL_COUNT 4
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_AUX_CHANNEL_COUNT (MAX_SUPPORTED_RC_CHANNEL_COUNT - NON_AUX_CHANNEL_COUNT)
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #if MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_COUNT > MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT MAX_SUPPORTED_RC_PARALLEL_PWM_CHANNEL_CO
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #else
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT MAX_SUPPORTED_RC_PPM_CHANNEL_COUNT
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #endif
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** extern const char rcChannelLetters[];
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** extern int16_t rcData[MAX_SUPPORTED_RC_CHANNEL_COUNT];       // interval [1000;2000]
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RSSI_SCALE_MIN 1
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RSSI_SCALE_MAX 255
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RSSI_SCALE_DEFAULT 100
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_AUTO = 0,
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_HOLD,
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_SET,
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_MODE_INVALID
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFailsafeChannelMode_e;
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RX_FAILSAFE_MODE_COUNT 3
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef enum {
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_TYPE_FLIGHT = 0,
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     RX_FAILSAFE_TYPE_AUX
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFailsafeChannelType_e;
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** #define RX_FAILSAFE_TYPE_COUNT 2
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef struct rxFailsafeChannelConfig_s {
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint8_t mode; // See rxFailsafeChannelMode_e
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint8_t step;
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxFailsafeChannelConfig_t;
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** PG_DECLARE_ARRAY(rxFailsafeChannelConfig_t, MAX_SUPPORTED_RC_CHANNEL_COUNT, rxFailsafeChannelConfig
 272              	 .loc 6 114 0
 273              	 .cfi_startproc
 274              	 
 275              	 
 276              	 
 277 0000 80B4     	 push {r7}
 278              	.LCFI28:
 279              	 .cfi_def_cfa_offset 4
 280              	 .cfi_offset 7,-4
 281 0002 83B0     	 sub sp,sp,#12
 282              	.LCFI29:
 283              	 .cfi_def_cfa_offset 16
 284 0004 00AF     	 add r7,sp,#0
 285              	.LCFI30:
 286              	 .cfi_def_cfa_register 7
 287 0006 7860     	 str r0,[r7,#4]
 288              	 .loc 6 114 0
 289 0008 7B68     	 ldr r3,[r7,#4]
 290 000a 5B00     	 lsls r3,r3,#1
 291 000c 034A     	 ldr r2,.L19
 292 000e 1344     	 add r3,r3,r2
 293 0010 1846     	 mov r0,r3
 294 0012 0C37     	 adds r7,r7,#12
 295              	.LCFI31:
 296              	 .cfi_def_cfa_offset 4
 297 0014 BD46     	 mov sp,r7
 298              	.LCFI32:
 299              	 .cfi_def_cfa_register 13
 300              	 
 301 0016 5DF8047B 	 ldr r7,[sp],#4
 302              	.LCFI33:
 303              	 .cfi_restore 7
 304              	 .cfi_def_cfa_offset 0
 305 001a 7047     	 bx lr
 306              	.L20:
 307              	 .align 2
 308              	.L19:
 309 001c 00000000 	 .word rxFailsafeChannelConfigs_SystemArray
 310              	 .cfi_endproc
 311              	.LFE552:
 313              	 .section .text.rxChannelRangeConfigs,"ax",%progbits
 314              	 .align 2
 315              	 .thumb
 316              	 .thumb_func
 318              	rxChannelRangeConfigs:
 319              	.LFB555:
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** typedef struct rxChannelRangeConfig_s {
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint16_t min;
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h ****     uint16_t max;
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** } rxChannelRangeConfig_t;
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** 
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx\rx.h **** PG_DECLARE_ARRAY(rxChannelRangeConfig_t, NON_AUX_CHANNEL_COUNT, rxChannelRangeConfigs);
 320              	 .loc 6 121 0
 321              	 .cfi_startproc
 322              	 
 323              	 
 324              	 
 325 0000 80B4     	 push {r7}
 326              	.LCFI34:
 327              	 .cfi_def_cfa_offset 4
 328              	 .cfi_offset 7,-4
 329 0002 83B0     	 sub sp,sp,#12
 330              	.LCFI35:
 331              	 .cfi_def_cfa_offset 16
 332 0004 00AF     	 add r7,sp,#0
 333              	.LCFI36:
 334              	 .cfi_def_cfa_register 7
 335 0006 7860     	 str r0,[r7,#4]
 336              	 .loc 6 121 0
 337 0008 7B68     	 ldr r3,[r7,#4]
 338 000a 9B00     	 lsls r3,r3,#2
 339 000c 034A     	 ldr r2,.L23
 340 000e 1344     	 add r3,r3,r2
 341 0010 1846     	 mov r0,r3
 342 0012 0C37     	 adds r7,r7,#12
 343              	.LCFI37:
 344              	 .cfi_def_cfa_offset 4
 345 0014 BD46     	 mov sp,r7
 346              	.LCFI38:
 347              	 .cfi_def_cfa_register 13
 348              	 
 349 0016 5DF8047B 	 ldr r7,[sp],#4
 350              	.LCFI39:
 351              	 .cfi_restore 7
 352              	 .cfi_def_cfa_offset 0
 353 001a 7047     	 bx lr
 354              	.L24:
 355              	 .align 2
 356              	.L23:
 357 001c 00000000 	 .word rxChannelRangeConfigs_SystemArray
 358              	 .cfi_endproc
 359              	.LFE555:
 361              	 .global rcChannelLetters
 362              	 .section .rodata.rcChannelLetters,"a",%progbits
 363              	 .align 2
 366              	rcChannelLetters:
 367 0000 41455254 	 .ascii "AERT12345678abcdefgh\000"
 367      31323334 
 367      35363738 
 367      61626364 
 367      65666768 
 368 0015 000000   	 .section .bss.rssi,"aw",%nobits
 369              	 .align 1
 372              	rssi:
 373 0000 0000     	 .space 2
 374              	 .section .bss.lastMspRssiUpdateUs,"aw",%nobits
 375              	 .align 2
 378              	lastMspRssiUpdateUs:
 379 0000 00000000 	 .space 4
 380              	 .comm rssiSource,1,1
 381              	 .section .bss.rxDataProcessingRequired,"aw",%nobits
 384              	rxDataProcessingRequired:
 385 0000 00       	 .space 1
 386              	 .section .bss.auxiliaryProcessingRequired,"aw",%nobits
 389              	auxiliaryProcessingRequired:
 390 0000 00       	 .space 1
 391              	 .section .bss.rxSignalReceived,"aw",%nobits
 394              	rxSignalReceived:
 395 0000 00       	 .space 1
 396              	 .section .bss.rxFlightChannelsValid,"aw",%nobits
 399              	rxFlightChannelsValid:
 400 0000 00       	 .space 1
 401              	 .section .data.rxIsInFailsafeMode,"aw",%progbits
 404              	rxIsInFailsafeMode:
 405 0000 01       	 .byte 1
 406              	 .section .bss.rxChannelCount,"aw",%nobits
 409              	rxChannelCount:
 410 0000 00       	 .space 1
 411              	 .section .bss.rxNextUpdateAtUs,"aw",%nobits
 412              	 .align 2
 415              	rxNextUpdateAtUs:
 416 0000 00000000 	 .space 4
 417              	 .section .bss.needRxSignalBefore,"aw",%nobits
 418              	 .align 2
 421              	needRxSignalBefore:
 422 0000 00000000 	 .space 4
 423              	 .section .bss.needRxSignalMaxDelayUs,"aw",%nobits
 424              	 .align 2
 427              	needRxSignalMaxDelayUs:
 428 0000 00000000 	 .space 4
 429              	 .section .bss.suspendRxSignalUntil,"aw",%nobits
 430              	 .align 2
 433              	suspendRxSignalUntil:
 434 0000 00000000 	 .space 4
 435              	 .section .bss.skipRxSamples,"aw",%nobits
 438              	skipRxSamples:
 439 0000 00       	 .space 1
 440              	 .section .bss.rcRaw,"aw",%nobits
 441              	 .align 2
 444              	rcRaw:
 445 0000 00000000 	 .space 36
 445      00000000 
 445      00000000 
 445      00000000 
 445      00000000 
 446              	 .comm rcData,36,4
 447              	 .comm rcInvalidPulsPeriod,72,4
 448              	 .comm rxRuntimeConfig,23,4
 449              	 .section .bss.rcSampleIndex,"aw",%nobits
 452              	rcSampleIndex:
 453 0000 00       	 .space 1
 454              	 .comm rxChannelRangeConfigs_SystemArray,16,4
 455              	 .comm rxChannelRangeConfigs_CopyArray,16,4
 456              	 .global rxChannelRangeConfigs_Registry
 457              	 .section .pg_registry,"a",%progbits
 458              	 .align 2
 461              	rxChannelRangeConfigs_Registry:
 462 0000 2C00     	 .short 44
 463 0002 1000     	 .short 16
 464 0004 00000000 	 .word rxChannelRangeConfigs_SystemArray
 465 0008 00000000 	 .word rxChannelRangeConfigs_CopyArray
 466 000c 00000000 	 .word 0
 467 0010 00000000 	 .word pgResetFn_rxChannelRangeConfigs
 468              	 .section .text.pgResetFn_rxChannelRangeConfigs,"ax",%progbits
 469              	 .align 2
 470              	 .global pgResetFn_rxChannelRangeConfigs
 471              	 .thumb
 472              	 .thumb_func
 474              	pgResetFn_rxChannelRangeConfigs:
 475              	.LFB560:
 476              	 .file 7 "../cleanflight/src/main/rx/rx.c"
   1:../cleanflight/src/main/rx/rx.c **** /*
   2:../cleanflight/src/main/rx/rx.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/rx/rx.c ****  *
   4:../cleanflight/src/main/rx/rx.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/rx/rx.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/rx/rx.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/rx/rx.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/rx/rx.c ****  * any later version.
   9:../cleanflight/src/main/rx/rx.c ****  *
  10:../cleanflight/src/main/rx/rx.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/rx/rx.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/rx/rx.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/rx/rx.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/rx/rx.c ****  *
  15:../cleanflight/src/main/rx/rx.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/rx/rx.c ****  * along with this software.
  17:../cleanflight/src/main/rx/rx.c ****  *
  18:../cleanflight/src/main/rx/rx.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/rx/rx.c ****  */
  20:../cleanflight/src/main/rx/rx.c **** 
  21:../cleanflight/src/main/rx/rx.c **** #include <stdbool.h>
  22:../cleanflight/src/main/rx/rx.c **** #include <stdint.h>
  23:../cleanflight/src/main/rx/rx.c **** #include <stdlib.h>
  24:../cleanflight/src/main/rx/rx.c **** 
  25:../cleanflight/src/main/rx/rx.c **** #include <string.h>
  26:../cleanflight/src/main/rx/rx.c **** 
  27:../cleanflight/src/main/rx/rx.c **** #include "platform.h"
  28:../cleanflight/src/main/rx/rx.c **** 
  29:../cleanflight/src/main/rx/rx.c **** #include "build/build_config.h"
  30:../cleanflight/src/main/rx/rx.c **** #include "build/debug.h"
  31:../cleanflight/src/main/rx/rx.c **** 
  32:../cleanflight/src/main/rx/rx.c **** #include "common/maths.h"
  33:../cleanflight/src/main/rx/rx.c **** #include "common/utils.h"
  34:../cleanflight/src/main/rx/rx.c **** 
  35:../cleanflight/src/main/rx/rx.c **** #include "config/config_reset.h"
  36:../cleanflight/src/main/rx/rx.c **** #include "config/feature.h"
  37:../cleanflight/src/main/rx/rx.c **** 
  38:../cleanflight/src/main/rx/rx.c **** #include "drivers/adc.h"
  39:../cleanflight/src/main/rx/rx.c **** #include "drivers/rx/rx_pwm.h"
  40:../cleanflight/src/main/rx/rx.c **** #include "drivers/rx/rx_spi.h"
  41:../cleanflight/src/main/rx/rx.c **** #include "drivers/time.h"
  42:../cleanflight/src/main/rx/rx.c **** 
  43:../cleanflight/src/main/rx/rx.c **** #include "fc/config.h"
  44:../cleanflight/src/main/rx/rx.c **** #include "fc/rc_controls.h"
  45:../cleanflight/src/main/rx/rx.c **** #include "fc/rc_modes.h"
  46:../cleanflight/src/main/rx/rx.c **** 
  47:../cleanflight/src/main/rx/rx.c **** #include "flight/failsafe.h"
  48:../cleanflight/src/main/rx/rx.c **** 
  49:../cleanflight/src/main/rx/rx.c **** #include "io/serial.h"
  50:../cleanflight/src/main/rx/rx.c **** 
  51:../cleanflight/src/main/rx/rx.c **** #include "pg/pg.h"
  52:../cleanflight/src/main/rx/rx.c **** #include "pg/pg_ids.h"
  53:../cleanflight/src/main/rx/rx.c **** #include "pg/rx.h"
  54:../cleanflight/src/main/rx/rx.c **** 
  55:../cleanflight/src/main/rx/rx.c **** #include "rx/rx.h"
  56:../cleanflight/src/main/rx/rx.c **** #include "rx/pwm.h"
  57:../cleanflight/src/main/rx/rx.c **** #include "rx/fport.h"
  58:../cleanflight/src/main/rx/rx.c **** #include "rx/sbus.h"
  59:../cleanflight/src/main/rx/rx.c **** #include "rx/spektrum.h"
  60:../cleanflight/src/main/rx/rx.c **** #include "rx/sumd.h"
  61:../cleanflight/src/main/rx/rx.c **** #include "rx/sumh.h"
  62:../cleanflight/src/main/rx/rx.c **** #include "rx/msp.h"
  63:../cleanflight/src/main/rx/rx.c **** #include "rx/xbus.h"
  64:../cleanflight/src/main/rx/rx.c **** #include "rx/ibus.h"
  65:../cleanflight/src/main/rx/rx.c **** #include "rx/jetiexbus.h"
  66:../cleanflight/src/main/rx/rx.c **** #include "rx/crsf.h"
  67:../cleanflight/src/main/rx/rx.c **** #include "rx/rx_spi.h"
  68:../cleanflight/src/main/rx/rx.c **** #include "rx/targetcustomserial.h"
  69:../cleanflight/src/main/rx/rx.c **** 
  70:../cleanflight/src/main/rx/rx.c **** 
  71:../cleanflight/src/main/rx/rx.c **** const char rcChannelLetters[] = "AERT12345678abcdefgh";
  72:../cleanflight/src/main/rx/rx.c **** 
  73:../cleanflight/src/main/rx/rx.c **** static uint16_t rssi = 0;                  // range: [0;1023]
  74:../cleanflight/src/main/rx/rx.c **** static timeUs_t lastMspRssiUpdateUs = 0;
  75:../cleanflight/src/main/rx/rx.c **** 
  76:../cleanflight/src/main/rx/rx.c **** #define MSP_RSSI_TIMEOUT_US 1500000   // 1.5 sec
  77:../cleanflight/src/main/rx/rx.c **** 
  78:../cleanflight/src/main/rx/rx.c **** #define RSSI_ADC_DIVISOR (4096 / 1024)
  79:../cleanflight/src/main/rx/rx.c **** #define RSSI_OFFSET_SCALING (1024 / 100.0f)
  80:../cleanflight/src/main/rx/rx.c **** 
  81:../cleanflight/src/main/rx/rx.c **** rssiSource_e rssiSource;
  82:../cleanflight/src/main/rx/rx.c **** 
  83:../cleanflight/src/main/rx/rx.c **** static bool rxDataProcessingRequired = false;
  84:../cleanflight/src/main/rx/rx.c **** static bool auxiliaryProcessingRequired = false;
  85:../cleanflight/src/main/rx/rx.c **** 
  86:../cleanflight/src/main/rx/rx.c **** static bool rxSignalReceived = false;
  87:../cleanflight/src/main/rx/rx.c **** static bool rxFlightChannelsValid = false;
  88:../cleanflight/src/main/rx/rx.c **** static bool rxIsInFailsafeMode = true;
  89:../cleanflight/src/main/rx/rx.c **** static uint8_t rxChannelCount;
  90:../cleanflight/src/main/rx/rx.c **** 
  91:../cleanflight/src/main/rx/rx.c **** static timeUs_t rxNextUpdateAtUs = 0;
  92:../cleanflight/src/main/rx/rx.c **** static uint32_t needRxSignalBefore = 0;
  93:../cleanflight/src/main/rx/rx.c **** static uint32_t needRxSignalMaxDelayUs;
  94:../cleanflight/src/main/rx/rx.c **** static uint32_t suspendRxSignalUntil = 0;
  95:../cleanflight/src/main/rx/rx.c **** static uint8_t  skipRxSamples = 0;
  96:../cleanflight/src/main/rx/rx.c **** 
  97:../cleanflight/src/main/rx/rx.c **** static int16_t rcRaw[MAX_SUPPORTED_RC_CHANNEL_COUNT];     // interval [1000;2000]
  98:../cleanflight/src/main/rx/rx.c **** int16_t rcData[MAX_SUPPORTED_RC_CHANNEL_COUNT];     // interval [1000;2000]
  99:../cleanflight/src/main/rx/rx.c **** uint32_t rcInvalidPulsPeriod[MAX_SUPPORTED_RC_CHANNEL_COUNT];
 100:../cleanflight/src/main/rx/rx.c **** 
 101:../cleanflight/src/main/rx/rx.c **** #define MAX_INVALID_PULS_TIME    300
 102:../cleanflight/src/main/rx/rx.c **** #define PPM_AND_PWM_SAMPLE_COUNT 3
 103:../cleanflight/src/main/rx/rx.c **** 
 104:../cleanflight/src/main/rx/rx.c **** #define DELAY_50_HZ (1000000 / 50)
 105:../cleanflight/src/main/rx/rx.c **** #define DELAY_33_HZ (1000000 / 33)
 106:../cleanflight/src/main/rx/rx.c **** #define DELAY_10_HZ (1000000 / 10)
 107:../cleanflight/src/main/rx/rx.c **** #define DELAY_5_HZ (1000000 / 5)
 108:../cleanflight/src/main/rx/rx.c **** #define SKIP_RC_ON_SUSPEND_PERIOD 1500000           // 1.5 second period in usec (call frequency in
 109:../cleanflight/src/main/rx/rx.c **** #define SKIP_RC_SAMPLES_ON_RESUME  2                // flush 2 samples to drop wrong measurements (
 110:../cleanflight/src/main/rx/rx.c **** 
 111:../cleanflight/src/main/rx/rx.c **** rxRuntimeConfig_t rxRuntimeConfig;
 112:../cleanflight/src/main/rx/rx.c **** static uint8_t rcSampleIndex = 0;
 113:../cleanflight/src/main/rx/rx.c **** 
 114:../cleanflight/src/main/rx/rx.c **** PG_REGISTER_ARRAY_WITH_RESET_FN(rxChannelRangeConfig_t, NON_AUX_CHANNEL_COUNT, rxChannelRangeConfig
 115:../cleanflight/src/main/rx/rx.c **** void pgResetFn_rxChannelRangeConfigs(rxChannelRangeConfig_t *rxChannelRangeConfigs)
 116:../cleanflight/src/main/rx/rx.c **** {
 477              	 .loc 7 116 0
 478              	 .cfi_startproc
 479              	 
 480              	 
 481              	 
 482 0000 80B4     	 push {r7}
 483              	.LCFI40:
 484              	 .cfi_def_cfa_offset 4
 485              	 .cfi_offset 7,-4
 486 0002 85B0     	 sub sp,sp,#20
 487              	.LCFI41:
 488              	 .cfi_def_cfa_offset 24
 489 0004 00AF     	 add r7,sp,#0
 490              	.LCFI42:
 491              	 .cfi_def_cfa_register 7
 492 0006 7860     	 str r0,[r7,#4]
 493              	.LBB2:
 117:../cleanflight/src/main/rx/rx.c ****     // set default calibration to full range and 1:1 mapping
 118:../cleanflight/src/main/rx/rx.c ****     for (int i = 0; i < NON_AUX_CHANNEL_COUNT; i++) {
 494              	 .loc 7 118 0
 495 0008 0023     	 movs r3,#0
 496 000a FB60     	 str r3,[r7,#12]
 497 000c 1AE0     	 b .L26
 498              	.L27:
 119:../cleanflight/src/main/rx/rx.c ****         rxChannelRangeConfigs[i].min = PWM_RANGE_MIN;
 499              	 .loc 7 119 0 discriminator 3
 500 000e FB68     	 ldr r3,[r7,#12]
 501 0010 9B00     	 lsls r3,r3,#2
 502 0012 7A68     	 ldr r2,[r7,#4]
 503 0014 1344     	 add r3,r3,r2
 504 0016 0022     	 movs r2,#0
 505 0018 62F01702 	 orn r2,r2,#23
 506 001c 1A70     	 strb r2,[r3]
 507 001e 0022     	 movs r2,#0
 508 0020 42F00302 	 orr r2,r2,#3
 509 0024 5A70     	 strb r2,[r3,#1]
 120:../cleanflight/src/main/rx/rx.c ****         rxChannelRangeConfigs[i].max = PWM_RANGE_MAX;
 510              	 .loc 7 120 0 discriminator 3
 511 0026 FB68     	 ldr r3,[r7,#12]
 512 0028 9B00     	 lsls r3,r3,#2
 513 002a 7A68     	 ldr r2,[r7,#4]
 514 002c 1344     	 add r3,r3,r2
 515 002e 0022     	 movs r2,#0
 516 0030 62F02F02 	 orn r2,r2,#47
 517 0034 9A70     	 strb r2,[r3,#2]
 518 0036 0022     	 movs r2,#0
 519 0038 42F00702 	 orr r2,r2,#7
 520 003c DA70     	 strb r2,[r3,#3]
 118:../cleanflight/src/main/rx/rx.c ****         rxChannelRangeConfigs[i].min = PWM_RANGE_MIN;
 521              	 .loc 7 118 0 discriminator 3
 522 003e FB68     	 ldr r3,[r7,#12]
 523 0040 0133     	 adds r3,r3,#1
 524 0042 FB60     	 str r3,[r7,#12]
 525              	.L26:
 118:../cleanflight/src/main/rx/rx.c ****         rxChannelRangeConfigs[i].min = PWM_RANGE_MIN;
 526              	 .loc 7 118 0 is_stmt 0 discriminator 1
 527 0044 FB68     	 ldr r3,[r7,#12]
 528 0046 032B     	 cmp r3,#3
 529 0048 E1DD     	 ble .L27
 530              	.LBE2:
 121:../cleanflight/src/main/rx/rx.c ****     }
 122:../cleanflight/src/main/rx/rx.c **** }
 531              	 .loc 7 122 0 is_stmt 1
 532 004a 1437     	 adds r7,r7,#20
 533              	.LCFI43:
 534              	 .cfi_def_cfa_offset 4
 535 004c BD46     	 mov sp,r7
 536              	.LCFI44:
 537              	 .cfi_def_cfa_register 13
 538              	 
 539 004e 5DF8047B 	 ldr r7,[sp],#4
 540              	.LCFI45:
 541              	 .cfi_restore 7
 542              	 .cfi_def_cfa_offset 0
 543 0052 7047     	 bx lr
 544              	 .cfi_endproc
 545              	.LFE560:
 547              	 .comm rxFailsafeChannelConfigs_SystemArray,36,4
 548              	 .comm rxFailsafeChannelConfigs_CopyArray,36,4
 549              	 .global rxFailsafeChannelConfigs_Registry
 550              	 .section .pg_registry
 551              	 .align 2
 554              	rxFailsafeChannelConfigs_Registry:
 555 0014 2B00     	 .short 43
 556 0016 2400     	 .short 36
 557 0018 00000000 	 .word rxFailsafeChannelConfigs_SystemArray
 558 001c 00000000 	 .word rxFailsafeChannelConfigs_CopyArray
 559 0020 00000000 	 .word 0
 560 0024 00000000 	 .word pgResetFn_rxFailsafeChannelConfigs
 561              	 .section .text.pgResetFn_rxFailsafeChannelConfigs,"ax",%progbits
 562              	 .align 2
 563              	 .global pgResetFn_rxFailsafeChannelConfigs
 564              	 .thumb
 565              	 .thumb_func
 567              	pgResetFn_rxFailsafeChannelConfigs:
 568              	.LFB561:
 123:../cleanflight/src/main/rx/rx.c **** 
 124:../cleanflight/src/main/rx/rx.c **** PG_REGISTER_ARRAY_WITH_RESET_FN(rxFailsafeChannelConfig_t, MAX_SUPPORTED_RC_CHANNEL_COUNT, rxFailsa
 125:../cleanflight/src/main/rx/rx.c **** void pgResetFn_rxFailsafeChannelConfigs(rxFailsafeChannelConfig_t *rxFailsafeChannelConfigs)
 126:../cleanflight/src/main/rx/rx.c **** {
 569              	 .loc 7 126 0
 570              	 .cfi_startproc
 571              	 
 572              	 
 573 0000 90B5     	 push {r4,r7,lr}
 574              	.LCFI46:
 575              	 .cfi_def_cfa_offset 12
 576              	 .cfi_offset 4,-12
 577              	 .cfi_offset 7,-8
 578              	 .cfi_offset 14,-4
 579 0002 85B0     	 sub sp,sp,#20
 580              	.LCFI47:
 581              	 .cfi_def_cfa_offset 32
 582 0004 00AF     	 add r7,sp,#0
 583              	.LCFI48:
 584              	 .cfi_def_cfa_register 7
 585 0006 7860     	 str r0,[r7,#4]
 586              	.LBB3:
 127:../cleanflight/src/main/rx/rx.c ****     for (int i = 0; i < MAX_SUPPORTED_RC_CHANNEL_COUNT; i++) {
 587              	 .loc 7 127 0
 588 0008 0023     	 movs r3,#0
 589 000a FB60     	 str r3,[r7,#12]
 590 000c 3AE0     	 b .L29
 591              	.L32:
 128:../cleanflight/src/main/rx/rx.c ****         rxFailsafeChannelConfigs[i].mode = (i < NON_AUX_CHANNEL_COUNT) ? RX_FAILSAFE_MODE_AUTO : RX
 592              	 .loc 7 128 0
 593 000e FB68     	 ldr r3,[r7,#12]
 594 0010 5B00     	 lsls r3,r3,#1
 595 0012 7A68     	 ldr r2,[r7,#4]
 596 0014 1344     	 add r3,r3,r2
 597 0016 FA68     	 ldr r2,[r7,#12]
 598 0018 032A     	 cmp r2,#3
 599 001a CCBF     	 ite gt
 600 001c 0122     	 movgt r2,#1
 601 001e 0022     	 movle r2,#0
 602 0020 D2B2     	 uxtb r2,r2
 603 0022 1A70     	 strb r2,[r3]
 129:../cleanflight/src/main/rx/rx.c ****         rxFailsafeChannelConfigs[i].step = (i == THROTTLE)
 604              	 .loc 7 129 0
 605 0024 FB68     	 ldr r3,[r7,#12]
 606 0026 5B00     	 lsls r3,r3,#1
 607 0028 7A68     	 ldr r2,[r7,#4]
 608 002a D418     	 adds r4,r2,r3
 609 002c FB68     	 ldr r3,[r7,#12]
 610 002e 032B     	 cmp r3,#3
 611 0030 12D1     	 bne .L30
 130:../cleanflight/src/main/rx/rx.c ****             ? CHANNEL_VALUE_TO_RXFAIL_STEP(RX_MIN_USEC)
 612              	 .loc 7 130 0 discriminator 1
 613 0032 40F27530 	 movw r0,#885
 614 0036 40F2EE21 	 movw r1,#750
 615 003a 40F6CA02 	 movw r2,#2250
 616 003e FFF7FEFF 	 bl constrain
 617 0042 0346     	 mov r3,r0
 618 0044 A3F2EE23 	 subw r3,r3,#750
 619 0048 114A     	 ldr r2,.L33
 620 004a 82FB0312 	 smull r1,r2,r2,r3
 621 004e D210     	 asrs r2,r2,#3
 622 0050 DB17     	 asrs r3,r3,#31
 623 0052 D31A     	 subs r3,r2,r3
 129:../cleanflight/src/main/rx/rx.c ****         rxFailsafeChannelConfigs[i].step = (i == THROTTLE)
 624              	 .loc 7 129 0 discriminator 1
 625 0054 DBB2     	 uxtb r3,r3
 626 0056 11E0     	 b .L31
 627              	.L30:
 131:../cleanflight/src/main/rx/rx.c ****             : CHANNEL_VALUE_TO_RXFAIL_STEP(RX_MID_USEC);
 628              	 .loc 7 131 0 discriminator 2
 629 0058 40F2DC50 	 movw r0,#1500
 630 005c 40F2EE21 	 movw r1,#750
 631 0060 40F6CA02 	 movw r2,#2250
 632 0064 FFF7FEFF 	 bl constrain
 633 0068 0346     	 mov r3,r0
 634 006a A3F2EE23 	 subw r3,r3,#750
 635 006e 084A     	 ldr r2,.L33
 636 0070 82FB0312 	 smull r1,r2,r2,r3
 637 0074 D210     	 asrs r2,r2,#3
 638 0076 DB17     	 asrs r3,r3,#31
 639 0078 D31A     	 subs r3,r2,r3
 129:../cleanflight/src/main/rx/rx.c ****         rxFailsafeChannelConfigs[i].step = (i == THROTTLE)
 640              	 .loc 7 129 0 discriminator 2
 641 007a DBB2     	 uxtb r3,r3
 642              	.L31:
 129:../cleanflight/src/main/rx/rx.c ****         rxFailsafeChannelConfigs[i].step = (i == THROTTLE)
 643              	 .loc 7 129 0 is_stmt 0 discriminator 4
 644 007c 6370     	 strb r3,[r4,#1]
 127:../cleanflight/src/main/rx/rx.c ****         rxFailsafeChannelConfigs[i].mode = (i < NON_AUX_CHANNEL_COUNT) ? RX_FAILSAFE_MODE_AUTO : RX
 645              	 .loc 7 127 0 is_stmt 1 discriminator 4
 646 007e FB68     	 ldr r3,[r7,#12]
 647 0080 0133     	 adds r3,r3,#1
 648 0082 FB60     	 str r3,[r7,#12]
 649              	.L29:
 127:../cleanflight/src/main/rx/rx.c ****         rxFailsafeChannelConfigs[i].mode = (i < NON_AUX_CHANNEL_COUNT) ? RX_FAILSAFE_MODE_AUTO : RX
 650              	 .loc 7 127 0 is_stmt 0 discriminator 2
 651 0084 FB68     	 ldr r3,[r7,#12]
 652 0086 112B     	 cmp r3,#17
 653 0088 C1DD     	 ble .L32
 654              	.LBE3:
 132:../cleanflight/src/main/rx/rx.c ****     }
 133:../cleanflight/src/main/rx/rx.c **** }
 655              	 .loc 7 133 0 is_stmt 1
 656 008a 1437     	 adds r7,r7,#20
 657              	.LCFI49:
 658              	 .cfi_def_cfa_offset 12
 659 008c BD46     	 mov sp,r7
 660              	.LCFI50:
 661              	 .cfi_def_cfa_register 13
 662              	 
 663 008e 90BD     	 pop {r4,r7,pc}
 664              	.L34:
 665              	 .align 2
 666              	.L33:
 667 0090 1F85EB51 	 .word 1374389535
 668              	 .cfi_endproc
 669              	.LFE561:
 671              	 .section .text.resetAllRxChannelRangeConfigurations,"ax",%progbits
 672              	 .align 2
 673              	 .global resetAllRxChannelRangeConfigurations
 674              	 .thumb
 675              	 .thumb_func
 677              	resetAllRxChannelRangeConfigurations:
 678              	.LFB562:
 134:../cleanflight/src/main/rx/rx.c **** 
 135:../cleanflight/src/main/rx/rx.c **** void resetAllRxChannelRangeConfigurations(rxChannelRangeConfig_t *rxChannelRangeConfig) {
 679              	 .loc 7 135 0
 680              	 .cfi_startproc
 681              	 
 682              	 
 683              	 
 684 0000 80B4     	 push {r7}
 685              	.LCFI51:
 686              	 .cfi_def_cfa_offset 4
 687              	 .cfi_offset 7,-4
 688 0002 85B0     	 sub sp,sp,#20
 689              	.LCFI52:
 690              	 .cfi_def_cfa_offset 24
 691 0004 00AF     	 add r7,sp,#0
 692              	.LCFI53:
 693              	 .cfi_def_cfa_register 7
 694 0006 7860     	 str r0,[r7,#4]
 695              	.LBB4:
 136:../cleanflight/src/main/rx/rx.c ****     // set default calibration to full range and 1:1 mapping
 137:../cleanflight/src/main/rx/rx.c ****     for (int i = 0; i < NON_AUX_CHANNEL_COUNT; i++) {
 696              	 .loc 7 137 0
 697 0008 0023     	 movs r3,#0
 698 000a FB60     	 str r3,[r7,#12]
 699 000c 17E0     	 b .L36
 700              	.L37:
 138:../cleanflight/src/main/rx/rx.c ****         rxChannelRangeConfig->min = PWM_RANGE_MIN;
 701              	 .loc 7 138 0 discriminator 3
 702 000e 7B68     	 ldr r3,[r7,#4]
 703 0010 0022     	 movs r2,#0
 704 0012 62F01702 	 orn r2,r2,#23
 705 0016 1A70     	 strb r2,[r3]
 706 0018 0022     	 movs r2,#0
 707 001a 42F00302 	 orr r2,r2,#3
 708 001e 5A70     	 strb r2,[r3,#1]
 139:../cleanflight/src/main/rx/rx.c ****         rxChannelRangeConfig->max = PWM_RANGE_MAX;
 709              	 .loc 7 139 0 discriminator 3
 710 0020 7B68     	 ldr r3,[r7,#4]
 711 0022 0022     	 movs r2,#0
 712 0024 62F02F02 	 orn r2,r2,#47
 713 0028 9A70     	 strb r2,[r3,#2]
 714 002a 0022     	 movs r2,#0
 715 002c 42F00702 	 orr r2,r2,#7
 716 0030 DA70     	 strb r2,[r3,#3]
 140:../cleanflight/src/main/rx/rx.c ****         rxChannelRangeConfig++;
 717              	 .loc 7 140 0 discriminator 3
 718 0032 7B68     	 ldr r3,[r7,#4]
 719 0034 0433     	 adds r3,r3,#4
 720 0036 7B60     	 str r3,[r7,#4]
 137:../cleanflight/src/main/rx/rx.c ****         rxChannelRangeConfig->min = PWM_RANGE_MIN;
 721              	 .loc 7 137 0 discriminator 3
 722 0038 FB68     	 ldr r3,[r7,#12]
 723 003a 0133     	 adds r3,r3,#1
 724 003c FB60     	 str r3,[r7,#12]
 725              	.L36:
 137:../cleanflight/src/main/rx/rx.c ****         rxChannelRangeConfig->min = PWM_RANGE_MIN;
 726              	 .loc 7 137 0 is_stmt 0 discriminator 1
 727 003e FB68     	 ldr r3,[r7,#12]
 728 0040 032B     	 cmp r3,#3
 729 0042 E4DD     	 ble .L37
 730              	.LBE4:
 141:../cleanflight/src/main/rx/rx.c ****     }
 142:../cleanflight/src/main/rx/rx.c **** }
 731              	 .loc 7 142 0 is_stmt 1
 732 0044 1437     	 adds r7,r7,#20
 733              	.LCFI54:
 734              	 .cfi_def_cfa_offset 4
 735 0046 BD46     	 mov sp,r7
 736              	.LCFI55:
 737              	 .cfi_def_cfa_register 13
 738              	 
 739 0048 5DF8047B 	 ldr r7,[sp],#4
 740              	.LCFI56:
 741              	 .cfi_restore 7
 742              	 .cfi_def_cfa_offset 0
 743 004c 7047     	 bx lr
 744              	 .cfi_endproc
 745              	.LFE562:
 747 004e 00BF     	 .section .text.nullReadRawRC,"ax",%progbits
 748              	 .align 2
 749              	 .thumb
 750              	 .thumb_func
 752              	nullReadRawRC:
 753              	.LFB563:
 143:../cleanflight/src/main/rx/rx.c **** 
 144:../cleanflight/src/main/rx/rx.c **** static uint16_t nullReadRawRC(const rxRuntimeConfig_t *rxRuntimeConfig, uint8_t channel)
 145:../cleanflight/src/main/rx/rx.c **** {
 754              	 .loc 7 145 0
 755              	 .cfi_startproc
 756              	 
 757              	 
 758              	 
 759 0000 80B4     	 push {r7}
 760              	.LCFI57:
 761              	 .cfi_def_cfa_offset 4
 762              	 .cfi_offset 7,-4
 763 0002 83B0     	 sub sp,sp,#12
 764              	.LCFI58:
 765              	 .cfi_def_cfa_offset 16
 766 0004 00AF     	 add r7,sp,#0
 767              	.LCFI59:
 768              	 .cfi_def_cfa_register 7
 769 0006 7860     	 str r0,[r7,#4]
 770 0008 0B46     	 mov r3,r1
 771 000a FB70     	 strb r3,[r7,#3]
 146:../cleanflight/src/main/rx/rx.c ****     UNUSED(rxRuntimeConfig);
 147:../cleanflight/src/main/rx/rx.c ****     UNUSED(channel);
 148:../cleanflight/src/main/rx/rx.c **** 
 149:../cleanflight/src/main/rx/rx.c ****     return PPM_RCVR_TIMEOUT;
 772              	 .loc 7 149 0
 773 000c 0023     	 movs r3,#0
 150:../cleanflight/src/main/rx/rx.c **** }
 774              	 .loc 7 150 0
 775 000e 1846     	 mov r0,r3
 776 0010 0C37     	 adds r7,r7,#12
 777              	.LCFI60:
 778              	 .cfi_def_cfa_offset 4
 779 0012 BD46     	 mov sp,r7
 780              	.LCFI61:
 781              	 .cfi_def_cfa_register 13
 782              	 
 783 0014 5DF8047B 	 ldr r7,[sp],#4
 784              	.LCFI62:
 785              	 .cfi_restore 7
 786              	 .cfi_def_cfa_offset 0
 787 0018 7047     	 bx lr
 788              	 .cfi_endproc
 789              	.LFE563:
 791 001a 00BF     	 .section .text.nullFrameStatus,"ax",%progbits
 792              	 .align 2
 793              	 .thumb
 794              	 .thumb_func
 796              	nullFrameStatus:
 797              	.LFB564:
 151:../cleanflight/src/main/rx/rx.c **** 
 152:../cleanflight/src/main/rx/rx.c **** static uint8_t nullFrameStatus(rxRuntimeConfig_t *rxRuntimeConfig)
 153:../cleanflight/src/main/rx/rx.c **** {
 798              	 .loc 7 153 0
 799              	 .cfi_startproc
 800              	 
 801              	 
 802              	 
 803 0000 80B4     	 push {r7}
 804              	.LCFI63:
 805              	 .cfi_def_cfa_offset 4
 806              	 .cfi_offset 7,-4
 807 0002 83B0     	 sub sp,sp,#12
 808              	.LCFI64:
 809              	 .cfi_def_cfa_offset 16
 810 0004 00AF     	 add r7,sp,#0
 811              	.LCFI65:
 812              	 .cfi_def_cfa_register 7
 813 0006 7860     	 str r0,[r7,#4]
 154:../cleanflight/src/main/rx/rx.c ****     UNUSED(rxRuntimeConfig);
 155:../cleanflight/src/main/rx/rx.c **** 
 156:../cleanflight/src/main/rx/rx.c ****     return RX_FRAME_PENDING;
 814              	 .loc 7 156 0
 815 0008 0023     	 movs r3,#0
 157:../cleanflight/src/main/rx/rx.c **** }
 816              	 .loc 7 157 0
 817 000a 1846     	 mov r0,r3
 818 000c 0C37     	 adds r7,r7,#12
 819              	.LCFI66:
 820              	 .cfi_def_cfa_offset 4
 821 000e BD46     	 mov sp,r7
 822              	.LCFI67:
 823              	 .cfi_def_cfa_register 13
 824              	 
 825 0010 5DF8047B 	 ldr r7,[sp],#4
 826              	.LCFI68:
 827              	 .cfi_restore 7
 828              	 .cfi_def_cfa_offset 0
 829 0014 7047     	 bx lr
 830              	 .cfi_endproc
 831              	.LFE564:
 833 0016 00BF     	 .section .text.nullProcessFrame,"ax",%progbits
 834              	 .align 2
 835              	 .thumb
 836              	 .thumb_func
 838              	nullProcessFrame:
 839              	.LFB565:
 158:../cleanflight/src/main/rx/rx.c **** 
 159:../cleanflight/src/main/rx/rx.c **** static bool nullProcessFrame(const rxRuntimeConfig_t *rxRuntimeConfig)
 160:../cleanflight/src/main/rx/rx.c **** {
 840              	 .loc 7 160 0
 841              	 .cfi_startproc
 842              	 
 843              	 
 844              	 
 845 0000 80B4     	 push {r7}
 846              	.LCFI69:
 847              	 .cfi_def_cfa_offset 4
 848              	 .cfi_offset 7,-4
 849 0002 83B0     	 sub sp,sp,#12
 850              	.LCFI70:
 851              	 .cfi_def_cfa_offset 16
 852 0004 00AF     	 add r7,sp,#0
 853              	.LCFI71:
 854              	 .cfi_def_cfa_register 7
 855 0006 7860     	 str r0,[r7,#4]
 161:../cleanflight/src/main/rx/rx.c ****     UNUSED(rxRuntimeConfig);
 162:../cleanflight/src/main/rx/rx.c **** 
 163:../cleanflight/src/main/rx/rx.c ****     return true;
 856              	 .loc 7 163 0
 857 0008 0123     	 movs r3,#1
 164:../cleanflight/src/main/rx/rx.c **** }
 858              	 .loc 7 164 0
 859 000a 1846     	 mov r0,r3
 860 000c 0C37     	 adds r7,r7,#12
 861              	.LCFI72:
 862              	 .cfi_def_cfa_offset 4
 863 000e BD46     	 mov sp,r7
 864              	.LCFI73:
 865              	 .cfi_def_cfa_register 13
 866              	 
 867 0010 5DF8047B 	 ldr r7,[sp],#4
 868              	.LCFI74:
 869              	 .cfi_restore 7
 870              	 .cfi_def_cfa_offset 0
 871 0014 7047     	 bx lr
 872              	 .cfi_endproc
 873              	.LFE565:
 875 0016 00BF     	 .section .text.isPulseValid,"ax",%progbits
 876              	 .align 2
 877              	 .thumb
 878              	 .thumb_func
 880              	isPulseValid:
 881              	.LFB566:
 165:../cleanflight/src/main/rx/rx.c **** 
 166:../cleanflight/src/main/rx/rx.c **** STATIC_UNIT_TESTED bool isPulseValid(uint16_t pulseDuration)
 167:../cleanflight/src/main/rx/rx.c **** {
 882              	 .loc 7 167 0
 883              	 .cfi_startproc
 884              	 
 885              	 
 886 0000 80B5     	 push {r7,lr}
 887              	.LCFI75:
 888              	 .cfi_def_cfa_offset 8
 889              	 .cfi_offset 7,-8
 890              	 .cfi_offset 14,-4
 891 0002 82B0     	 sub sp,sp,#8
 892              	.LCFI76:
 893              	 .cfi_def_cfa_offset 16
 894 0004 00AF     	 add r7,sp,#0
 895              	.LCFI77:
 896              	 .cfi_def_cfa_register 7
 897 0006 0346     	 mov r3,r0
 898 0008 FB80     	 strh r3,[r7,#6]
 168:../cleanflight/src/main/rx/rx.c ****     return  pulseDuration >= rxConfig()->rx_min_usec &&
 899              	 .loc 7 168 0
 900 000a FFF7FEFF 	 bl rxConfig
 901 000e 0346     	 mov r3,r0
 902 0010 B3F81D30 	 ldrh r3,[r3,#29]
 903 0014 9BB2     	 uxth r3,r3
 904 0016 FA88     	 ldrh r2,[r7,#6]
 905 0018 9A42     	 cmp r2,r3
 906 001a 0AD3     	 bcc .L45
 169:../cleanflight/src/main/rx/rx.c ****             pulseDuration <= rxConfig()->rx_max_usec;
 907              	 .loc 7 169 0 discriminator 1
 908 001c FFF7FEFF 	 bl rxConfig
 909 0020 0346     	 mov r3,r0
 910 0022 B3F81F30 	 ldrh r3,[r3,#31]
 911 0026 9BB2     	 uxth r3,r3
 168:../cleanflight/src/main/rx/rx.c ****     return  pulseDuration >= rxConfig()->rx_min_usec &&
 912              	 .loc 7 168 0 discriminator 1
 913 0028 FA88     	 ldrh r2,[r7,#6]
 914 002a 9A42     	 cmp r2,r3
 915 002c 01D8     	 bhi .L45
 168:../cleanflight/src/main/rx/rx.c ****     return  pulseDuration >= rxConfig()->rx_min_usec &&
 916              	 .loc 7 168 0 is_stmt 0 discriminator 3
 917 002e 0123     	 movs r3,#1
 918 0030 00E0     	 b .L46
 919              	.L45:
 168:../cleanflight/src/main/rx/rx.c ****     return  pulseDuration >= rxConfig()->rx_min_usec &&
 920              	 .loc 7 168 0 discriminator 4
 921 0032 0023     	 movs r3,#0
 922              	.L46:
 168:../cleanflight/src/main/rx/rx.c ****     return  pulseDuration >= rxConfig()->rx_min_usec &&
 923              	 .loc 7 168 0 discriminator 6
 924 0034 03F00103 	 and r3,r3,#1
 925 0038 DBB2     	 uxtb r3,r3
 170:../cleanflight/src/main/rx/rx.c **** }
 926              	 .loc 7 170 0 is_stmt 1 discriminator 6
 927 003a 1846     	 mov r0,r3
 928 003c 0837     	 adds r7,r7,#8
 929              	.LCFI78:
 930              	 .cfi_def_cfa_offset 8
 931 003e BD46     	 mov sp,r7
 932              	.LCFI79:
 933              	 .cfi_def_cfa_register 13
 934              	 
 935 0040 80BD     	 pop {r7,pc}
 936              	 .cfi_endproc
 937              	.LFE566:
 939 0042 00BF     	 .section .text.serialRxInit,"ax",%progbits
 940              	 .align 2
 941              	 .global serialRxInit
 942              	 .thumb
 943              	 .thumb_func
 945              	serialRxInit:
 946              	.LFB567:
 171:../cleanflight/src/main/rx/rx.c **** 
 172:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIAL_RX
 173:../cleanflight/src/main/rx/rx.c **** bool serialRxInit(const rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig)
 174:../cleanflight/src/main/rx/rx.c **** {
 947              	 .loc 7 174 0
 948              	 .cfi_startproc
 949              	 
 950              	 
 951 0000 80B5     	 push {r7,lr}
 952              	.LCFI80:
 953              	 .cfi_def_cfa_offset 8
 954              	 .cfi_offset 7,-8
 955              	 .cfi_offset 14,-4
 956 0002 84B0     	 sub sp,sp,#16
 957              	.LCFI81:
 958              	 .cfi_def_cfa_offset 24
 959 0004 00AF     	 add r7,sp,#0
 960              	.LCFI82:
 961              	 .cfi_def_cfa_register 7
 962 0006 7860     	 str r0,[r7,#4]
 963 0008 3960     	 str r1,[r7]
 175:../cleanflight/src/main/rx/rx.c ****     bool enabled = false;
 964              	 .loc 7 175 0
 965 000a 0023     	 movs r3,#0
 966 000c FB73     	 strb r3,[r7,#15]
 176:../cleanflight/src/main/rx/rx.c ****     switch (rxConfig->serialrx_provider) {
 967              	 .loc 7 176 0
 968 000e 7B68     	 ldr r3,[r7,#4]
 969 0010 1B7A     	 ldrb r3,[r3,#8]
 970 0012 0A2B     	 cmp r3,#10
 971 0014 50D8     	 bhi .L49
 972 0016 01A2     	 adr r2,.L51
 973 0018 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 974              	 .p2align 2
 975              	.L51:
 976 001c 49000000 	 .word .L50+1
 977 0020 49000000 	 .word .L50+1
 978 0024 57000000 	 .word .L52+1
 979 0028 65000000 	 .word .L53+1
 980 002c 73000000 	 .word .L54+1
 981 0030 81000000 	 .word .L55+1
 982 0034 81000000 	 .word .L55+1
 983 0038 8F000000 	 .word .L56+1
 984 003c 9D000000 	 .word .L57+1
 985 0040 AB000000 	 .word .L58+1
 986 0044 49000000 	 .word .L50+1
 987              	 .p2align 1
 988              	.L50:
 177:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_SPEKTRUM
 178:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_SRXL:
 179:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_SPEKTRUM1024:
 180:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_SPEKTRUM2048:
 181:../cleanflight/src/main/rx/rx.c ****         enabled = spektrumInit(rxConfig, rxRuntimeConfig);
 989              	 .loc 7 181 0
 990 0048 7868     	 ldr r0,[r7,#4]
 991 004a 3968     	 ldr r1,[r7]
 992 004c FFF7FEFF 	 bl spektrumInit
 993 0050 0346     	 mov r3,r0
 994 0052 FB73     	 strb r3,[r7,#15]
 182:../cleanflight/src/main/rx/rx.c ****         break;
 995              	 .loc 7 182 0
 996 0054 33E0     	 b .L59
 997              	.L52:
 183:../cleanflight/src/main/rx/rx.c **** #endif
 184:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_SBUS
 185:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_SBUS:
 186:../cleanflight/src/main/rx/rx.c ****         enabled = sbusInit(rxConfig, rxRuntimeConfig);
 998              	 .loc 7 186 0
 999 0056 7868     	 ldr r0,[r7,#4]
 1000 0058 3968     	 ldr r1,[r7]
 1001 005a FFF7FEFF 	 bl sbusInit
 1002 005e 0346     	 mov r3,r0
 1003 0060 FB73     	 strb r3,[r7,#15]
 187:../cleanflight/src/main/rx/rx.c ****         break;
 1004              	 .loc 7 187 0
 1005 0062 2CE0     	 b .L59
 1006              	.L53:
 188:../cleanflight/src/main/rx/rx.c **** #endif
 189:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_SUMD
 190:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_SUMD:
 191:../cleanflight/src/main/rx/rx.c ****         enabled = sumdInit(rxConfig, rxRuntimeConfig);
 1007              	 .loc 7 191 0
 1008 0064 7868     	 ldr r0,[r7,#4]
 1009 0066 3968     	 ldr r1,[r7]
 1010 0068 FFF7FEFF 	 bl sumdInit
 1011 006c 0346     	 mov r3,r0
 1012 006e FB73     	 strb r3,[r7,#15]
 192:../cleanflight/src/main/rx/rx.c ****         break;
 1013              	 .loc 7 192 0
 1014 0070 25E0     	 b .L59
 1015              	.L54:
 193:../cleanflight/src/main/rx/rx.c **** #endif
 194:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_SUMH
 195:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_SUMH:
 196:../cleanflight/src/main/rx/rx.c ****         enabled = sumhInit(rxConfig, rxRuntimeConfig);
 1016              	 .loc 7 196 0
 1017 0072 7868     	 ldr r0,[r7,#4]
 1018 0074 3968     	 ldr r1,[r7]
 1019 0076 FFF7FEFF 	 bl sumhInit
 1020 007a 0346     	 mov r3,r0
 1021 007c FB73     	 strb r3,[r7,#15]
 197:../cleanflight/src/main/rx/rx.c ****         break;
 1022              	 .loc 7 197 0
 1023 007e 1EE0     	 b .L59
 1024              	.L55:
 198:../cleanflight/src/main/rx/rx.c **** #endif
 199:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_XBUS
 200:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_XBUS_MODE_B:
 201:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_XBUS_MODE_B_RJ01:
 202:../cleanflight/src/main/rx/rx.c ****         enabled = xBusInit(rxConfig, rxRuntimeConfig);
 1025              	 .loc 7 202 0
 1026 0080 7868     	 ldr r0,[r7,#4]
 1027 0082 3968     	 ldr r1,[r7]
 1028 0084 FFF7FEFF 	 bl xBusInit
 1029 0088 0346     	 mov r3,r0
 1030 008a FB73     	 strb r3,[r7,#15]
 203:../cleanflight/src/main/rx/rx.c ****         break;
 1031              	 .loc 7 203 0
 1032 008c 17E0     	 b .L59
 1033              	.L56:
 204:../cleanflight/src/main/rx/rx.c **** #endif
 205:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_IBUS
 206:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_IBUS:
 207:../cleanflight/src/main/rx/rx.c ****         enabled = ibusInit(rxConfig, rxRuntimeConfig);
 1034              	 .loc 7 207 0
 1035 008e 7868     	 ldr r0,[r7,#4]
 1036 0090 3968     	 ldr r1,[r7]
 1037 0092 FFF7FEFF 	 bl ibusInit
 1038 0096 0346     	 mov r3,r0
 1039 0098 FB73     	 strb r3,[r7,#15]
 208:../cleanflight/src/main/rx/rx.c ****         break;
 1040              	 .loc 7 208 0
 1041 009a 10E0     	 b .L59
 1042              	.L57:
 209:../cleanflight/src/main/rx/rx.c **** #endif
 210:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_JETIEXBUS
 211:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_JETIEXBUS:
 212:../cleanflight/src/main/rx/rx.c ****         enabled = jetiExBusInit(rxConfig, rxRuntimeConfig);
 1043              	 .loc 7 212 0
 1044 009c 7868     	 ldr r0,[r7,#4]
 1045 009e 3968     	 ldr r1,[r7]
 1046 00a0 FFF7FEFF 	 bl jetiExBusInit
 1047 00a4 0346     	 mov r3,r0
 1048 00a6 FB73     	 strb r3,[r7,#15]
 213:../cleanflight/src/main/rx/rx.c ****         break;
 1049              	 .loc 7 213 0
 1050 00a8 09E0     	 b .L59
 1051              	.L58:
 214:../cleanflight/src/main/rx/rx.c **** #endif
 215:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_CRSF
 216:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_CRSF:
 217:../cleanflight/src/main/rx/rx.c ****         enabled = crsfRxInit(rxConfig, rxRuntimeConfig);
 1052              	 .loc 7 217 0
 1053 00aa 7868     	 ldr r0,[r7,#4]
 1054 00ac 3968     	 ldr r1,[r7]
 1055 00ae FFF7FEFF 	 bl crsfRxInit
 1056 00b2 0346     	 mov r3,r0
 1057 00b4 FB73     	 strb r3,[r7,#15]
 218:../cleanflight/src/main/rx/rx.c ****         break;
 1058              	 .loc 7 218 0
 1059 00b6 02E0     	 b .L59
 1060              	.L49:
 219:../cleanflight/src/main/rx/rx.c **** #endif
 220:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_TARGET_CUSTOM
 221:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_TARGET_CUSTOM:
 222:../cleanflight/src/main/rx/rx.c ****         enabled = targetCustomSerialRxInit(rxConfig, rxRuntimeConfig);
 223:../cleanflight/src/main/rx/rx.c ****         break;
 224:../cleanflight/src/main/rx/rx.c **** #endif
 225:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIALRX_FPORT
 226:../cleanflight/src/main/rx/rx.c ****     case SERIALRX_FPORT:
 227:../cleanflight/src/main/rx/rx.c ****         enabled = fportRxInit(rxConfig, rxRuntimeConfig);
 228:../cleanflight/src/main/rx/rx.c ****         break;
 229:../cleanflight/src/main/rx/rx.c **** #endif
 230:../cleanflight/src/main/rx/rx.c ****     default:
 231:../cleanflight/src/main/rx/rx.c ****         enabled = false;
 1061              	 .loc 7 231 0
 1062 00b8 0023     	 movs r3,#0
 1063 00ba FB73     	 strb r3,[r7,#15]
 232:../cleanflight/src/main/rx/rx.c ****         break;
 1064              	 .loc 7 232 0
 1065 00bc 00BF     	 nop
 1066              	.L59:
 233:../cleanflight/src/main/rx/rx.c ****     }
 234:../cleanflight/src/main/rx/rx.c ****     return enabled;
 1067              	 .loc 7 234 0
 1068 00be FB7B     	 ldrb r3,[r7,#15]
 235:../cleanflight/src/main/rx/rx.c **** }
 1069              	 .loc 7 235 0
 1070 00c0 1846     	 mov r0,r3
 1071 00c2 1037     	 adds r7,r7,#16
 1072              	.LCFI83:
 1073              	 .cfi_def_cfa_offset 8
 1074 00c4 BD46     	 mov sp,r7
 1075              	.LCFI84:
 1076              	 .cfi_def_cfa_register 13
 1077              	 
 1078 00c6 80BD     	 pop {r7,pc}
 1079              	 .cfi_endproc
 1080              	.LFE567:
 1082              	 .section .text.rxInit,"ax",%progbits
 1083              	 .align 2
 1084              	 .global rxInit
 1085              	 .thumb
 1086              	 .thumb_func
 1088              	rxInit:
 1089              	.LFB568:
 236:../cleanflight/src/main/rx/rx.c **** #endif
 237:../cleanflight/src/main/rx/rx.c **** 
 238:../cleanflight/src/main/rx/rx.c **** void rxInit(void)
 239:../cleanflight/src/main/rx/rx.c **** {
 1090              	 .loc 7 239 0
 1091              	 .cfi_startproc
 1092              	 
 1093              	 
 1094 0000 80B5     	 push {r7,lr}
 1095              	.LCFI85:
 1096              	 .cfi_def_cfa_offset 8
 1097              	 .cfi_offset 7,-8
 1098              	 .cfi_offset 14,-4
 1099 0002 88B0     	 sub sp,sp,#32
 1100              	.LCFI86:
 1101              	 .cfi_def_cfa_offset 40
 1102 0004 00AF     	 add r7,sp,#0
 1103              	.LCFI87:
 1104              	 .cfi_def_cfa_register 7
 240:../cleanflight/src/main/rx/rx.c ****     rxRuntimeConfig.rcReadRawFn = nullReadRawRC;
 1105              	 .loc 7 240 0
 1106 0006 7B4B     	 ldr r3,.L77
 1107 0008 7B4A     	 ldr r2,.L77+4
 1108 000a C3F80320 	 str r2,[r3,#3]
 241:../cleanflight/src/main/rx/rx.c ****     rxRuntimeConfig.rcFrameStatusFn = nullFrameStatus;
 1109              	 .loc 7 241 0
 1110 000e 794B     	 ldr r3,.L77
 1111 0010 7A4A     	 ldr r2,.L77+8
 1112 0012 C3F80720 	 str r2,[r3,#7]
 242:../cleanflight/src/main/rx/rx.c ****     rxRuntimeConfig.rcProcessFrameFn = nullProcessFrame;
 1113              	 .loc 7 242 0
 1114 0016 774B     	 ldr r3,.L77
 1115 0018 794A     	 ldr r2,.L77+12
 1116 001a C3F80B20 	 str r2,[r3,#11]
 243:../cleanflight/src/main/rx/rx.c ****     rcSampleIndex = 0;
 1117              	 .loc 7 243 0
 1118 001e 794B     	 ldr r3,.L77+16
 1119 0020 0022     	 movs r2,#0
 1120 0022 1A70     	 strb r2,[r3]
 244:../cleanflight/src/main/rx/rx.c ****     needRxSignalMaxDelayUs = DELAY_10_HZ;
 1121              	 .loc 7 244 0
 1122 0024 784B     	 ldr r3,.L77+20
 1123 0026 794A     	 ldr r2,.L77+24
 1124 0028 1A60     	 str r2,[r3]
 1125              	.LBB5:
 245:../cleanflight/src/main/rx/rx.c **** 
 246:../cleanflight/src/main/rx/rx.c ****     for (int i = 0; i < MAX_SUPPORTED_RC_CHANNEL_COUNT; i++) {
 1126              	 .loc 7 246 0
 1127 002a 0023     	 movs r3,#0
 1128 002c FB61     	 str r3,[r7,#28]
 1129 002e 15E0     	 b .L62
 1130              	.L63:
 247:../cleanflight/src/main/rx/rx.c ****         rcData[i] = rxConfig()->midrc;
 1131              	 .loc 7 247 0 discriminator 3
 1132 0030 FFF7FEFF 	 bl rxConfig
 1133 0034 0346     	 mov r3,r0
 1134 0036 5B8A     	 ldrh r3,[r3,#18]
 1135 0038 9BB2     	 uxth r3,r3
 1136 003a 99B2     	 uxth r1,r3
 1137 003c 744A     	 ldr r2,.L77+28
 1138 003e FB69     	 ldr r3,[r7,#28]
 1139 0040 22F81310 	 strh r1,[r2,r3,lsl#1]
 248:../cleanflight/src/main/rx/rx.c ****         rcInvalidPulsPeriod[i] = millis() + MAX_INVALID_PULS_TIME;
 1140              	 .loc 7 248 0 discriminator 3
 1141 0044 FFF7FEFF 	 bl millis
 1142 0048 0346     	 mov r3,r0
 1143 004a 03F59672 	 add r2,r3,#300
 1144 004e 7149     	 ldr r1,.L77+32
 1145 0050 FB69     	 ldr r3,[r7,#28]
 1146 0052 41F82320 	 str r2,[r1,r3,lsl#2]
 246:../cleanflight/src/main/rx/rx.c ****         rcData[i] = rxConfig()->midrc;
 1147              	 .loc 7 246 0 discriminator 3
 1148 0056 FB69     	 ldr r3,[r7,#28]
 1149 0058 0133     	 adds r3,r3,#1
 1150 005a FB61     	 str r3,[r7,#28]
 1151              	.L62:
 246:../cleanflight/src/main/rx/rx.c ****         rcData[i] = rxConfig()->midrc;
 1152              	 .loc 7 246 0 is_stmt 0 discriminator 1
 1153 005c FB69     	 ldr r3,[r7,#28]
 1154 005e 112B     	 cmp r3,#17
 1155 0060 E6DD     	 ble .L63
 1156              	.LBE5:
 249:../cleanflight/src/main/rx/rx.c ****     }
 250:../cleanflight/src/main/rx/rx.c **** 
 251:../cleanflight/src/main/rx/rx.c ****     rcData[THROTTLE] = (feature(FEATURE_3D)) ? rxConfig()->midrc : rxConfig()->rx_min_usec;
 1157              	 .loc 7 251 0 is_stmt 1
 1158 0062 4FF48050 	 mov r0,#4096
 1159 0066 FFF7FEFF 	 bl feature
 1160 006a 0346     	 mov r3,r0
 1161 006c 002B     	 cmp r3,#0
 1162 006e 06D0     	 beq .L64
 1163              	 .loc 7 251 0 is_stmt 0 discriminator 1
 1164 0070 FFF7FEFF 	 bl rxConfig
 1165 0074 0346     	 mov r3,r0
 1166 0076 5B8A     	 ldrh r3,[r3,#18]
 1167 0078 9BB2     	 uxth r3,r3
 1168 007a 9BB2     	 uxth r3,r3
 1169 007c 06E0     	 b .L65
 1170              	.L64:
 1171              	 .loc 7 251 0 discriminator 2
 1172 007e FFF7FEFF 	 bl rxConfig
 1173 0082 0346     	 mov r3,r0
 1174 0084 B3F81D30 	 ldrh r3,[r3,#29]
 1175 0088 9BB2     	 uxth r3,r3
 1176 008a 9BB2     	 uxth r3,r3
 1177              	.L65:
 1178              	 .loc 7 251 0 discriminator 4
 1179 008c 604A     	 ldr r2,.L77+28
 1180 008e D380     	 strh r3,[r2,#6]
 1181              	.LBB6:
 252:../cleanflight/src/main/rx/rx.c **** 
 253:../cleanflight/src/main/rx/rx.c ****     // Initialize ARM switch to OFF position when arming via switch is defined
 254:../cleanflight/src/main/rx/rx.c ****     // TODO - move to rc_mode.c
 255:../cleanflight/src/main/rx/rx.c ****     for (int i = 0; i < MAX_MODE_ACTIVATION_CONDITION_COUNT; i++) {
 1182              	 .loc 7 255 0 is_stmt 1 discriminator 4
 1183 0090 0023     	 movs r3,#0
 1184 0092 BB61     	 str r3,[r7,#24]
 1185 0094 3CE0     	 b .L66
 1186              	.L70:
 1187              	.LBB7:
 256:../cleanflight/src/main/rx/rx.c ****         const modeActivationCondition_t *modeActivationCondition = modeActivationConditions(i);
 1188              	 .loc 7 256 0
 1189 0096 B869     	 ldr r0,[r7,#24]
 1190 0098 FFF7FEFF 	 bl modeActivationConditions
 1191 009c 3861     	 str r0,[r7,#16]
 257:../cleanflight/src/main/rx/rx.c ****         if (modeActivationCondition->modeId == BOXARM && IS_RANGE_USABLE(&modeActivationCondition->
 1192              	 .loc 7 257 0
 1193 009e 3B69     	 ldr r3,[r7,#16]
 1194 00a0 1B78     	 ldrb r3,[r3]
 1195 00a2 002B     	 cmp r3,#0
 1196 00a4 31D1     	 bne .L67
 1197              	 .loc 7 257 0 is_stmt 0 discriminator 1
 1198 00a6 3B69     	 ldr r3,[r7,#16]
 1199 00a8 9A78     	 ldrb r2,[r3,#2]
 1200 00aa 3B69     	 ldr r3,[r7,#16]
 1201 00ac DB78     	 ldrb r3,[r3,#3]
 1202 00ae 9A42     	 cmp r2,r3
 1203 00b0 2BD2     	 bcs .L67
 1204              	.LBB8:
 258:../cleanflight/src/main/rx/rx.c ****             // ARM switch is defined, determine an OFF value
 259:../cleanflight/src/main/rx/rx.c ****             uint16_t value;
 260:../cleanflight/src/main/rx/rx.c ****             if (modeActivationCondition->range.startStep > 0) {
 1205              	 .loc 7 260 0 is_stmt 1
 1206 00b2 3B69     	 ldr r3,[r7,#16]
 1207 00b4 9B78     	 ldrb r3,[r3,#2]
 1208 00b6 002B     	 cmp r3,#0
 1209 00b8 10D0     	 beq .L68
 261:../cleanflight/src/main/rx/rx.c ****                 value = MODE_STEP_TO_CHANNEL_VALUE((modeActivationCondition->range.startStep - 1));
 1210              	 .loc 7 261 0
 1211 00ba 3B69     	 ldr r3,[r7,#16]
 1212 00bc 9B78     	 ldrb r3,[r3,#2]
 1213 00be 013B     	 subs r3,r3,#1
 1214 00c0 9BB2     	 uxth r3,r3
 1215 00c2 1A46     	 mov r2,r3
 1216 00c4 9200     	 lsls r2,r2,#2
 1217 00c6 1344     	 add r3,r3,r2
 1218 00c8 1A46     	 mov r2,r3
 1219 00ca 9100     	 lsls r1,r2,#2
 1220 00cc 1A46     	 mov r2,r3
 1221 00ce 0B46     	 mov r3,r1
 1222 00d0 1344     	 add r3,r3,r2
 1223 00d2 9BB2     	 uxth r3,r3
 1224 00d4 03F56173 	 add r3,r3,#900
 1225 00d8 FB82     	 strh r3,[r7,#22]
 1226 00da 0FE0     	 b .L69
 1227              	.L68:
 262:../cleanflight/src/main/rx/rx.c ****             } else {
 263:../cleanflight/src/main/rx/rx.c ****                 value = MODE_STEP_TO_CHANNEL_VALUE((modeActivationCondition->range.endStep + 1));
 1228              	 .loc 7 263 0
 1229 00dc 3B69     	 ldr r3,[r7,#16]
 1230 00de DB78     	 ldrb r3,[r3,#3]
 1231 00e0 0133     	 adds r3,r3,#1
 1232 00e2 9BB2     	 uxth r3,r3
 1233 00e4 1A46     	 mov r2,r3
 1234 00e6 9200     	 lsls r2,r2,#2
 1235 00e8 1344     	 add r3,r3,r2
 1236 00ea 1A46     	 mov r2,r3
 1237 00ec 9100     	 lsls r1,r2,#2
 1238 00ee 1A46     	 mov r2,r3
 1239 00f0 0B46     	 mov r3,r1
 1240 00f2 1344     	 add r3,r3,r2
 1241 00f4 9BB2     	 uxth r3,r3
 1242 00f6 03F56173 	 add r3,r3,#900
 1243 00fa FB82     	 strh r3,[r7,#22]
 1244              	.L69:
 264:../cleanflight/src/main/rx/rx.c ****             }
 265:../cleanflight/src/main/rx/rx.c ****             // Initialize ARM AUX channel to OFF value
 266:../cleanflight/src/main/rx/rx.c ****             rcData[modeActivationCondition->auxChannelIndex + NON_AUX_CHANNEL_COUNT] = value;
 1245              	 .loc 7 266 0
 1246 00fc 3B69     	 ldr r3,[r7,#16]
 1247 00fe 5B78     	 ldrb r3,[r3,#1]
 1248 0100 0433     	 adds r3,r3,#4
 1249 0102 F98A     	 ldrh r1,[r7,#22]
 1250 0104 424A     	 ldr r2,.L77+28
 1251 0106 22F81310 	 strh r1,[r2,r3,lsl#1]
 1252              	.L67:
 1253              	.LBE8:
 1254              	.LBE7:
 255:../cleanflight/src/main/rx/rx.c ****         const modeActivationCondition_t *modeActivationCondition = modeActivationConditions(i);
 1255              	 .loc 7 255 0 discriminator 2
 1256 010a BB69     	 ldr r3,[r7,#24]
 1257 010c 0133     	 adds r3,r3,#1
 1258 010e BB61     	 str r3,[r7,#24]
 1259              	.L66:
 255:../cleanflight/src/main/rx/rx.c ****         const modeActivationCondition_t *modeActivationCondition = modeActivationConditions(i);
 1260              	 .loc 7 255 0 is_stmt 0 discriminator 1
 1261 0110 BB69     	 ldr r3,[r7,#24]
 1262 0112 132B     	 cmp r3,#19
 1263 0114 BFDD     	 ble .L70
 1264              	.LBE6:
 267:../cleanflight/src/main/rx/rx.c ****         }
 268:../cleanflight/src/main/rx/rx.c ****     }
 269:../cleanflight/src/main/rx/rx.c **** 
 270:../cleanflight/src/main/rx/rx.c **** #ifdef USE_SERIAL_RX
 271:../cleanflight/src/main/rx/rx.c ****     if (feature(FEATURE_RX_SERIAL)) {
 1265              	 .loc 7 271 0 is_stmt 1
 1266 0116 0820     	 movs r0,#8
 1267 0118 FFF7FEFF 	 bl feature
 1268 011c 0346     	 mov r3,r0
 1269 011e 002B     	 cmp r3,#0
 1270 0120 19D0     	 beq .L71
 1271              	.LBB9:
 272:../cleanflight/src/main/rx/rx.c ****         const bool enabled = serialRxInit(rxConfig(), &rxRuntimeConfig);
 1272              	 .loc 7 272 0
 1273 0122 FFF7FEFF 	 bl rxConfig
 1274 0126 0346     	 mov r3,r0
 1275 0128 1846     	 mov r0,r3
 1276 012a 3249     	 ldr r1,.L77
 1277 012c FFF7FEFF 	 bl serialRxInit
 1278 0130 0346     	 mov r3,r0
 1279 0132 FB73     	 strb r3,[r7,#15]
 273:../cleanflight/src/main/rx/rx.c ****         if (!enabled) {
 1280              	 .loc 7 273 0
 1281 0134 FB7B     	 ldrb r3,[r7,#15]
 1282 0136 83F00103 	 eor r3,r3,#1
 1283 013a DBB2     	 uxtb r3,r3
 1284 013c 002B     	 cmp r3,#0
 1285 013e 0AD0     	 beq .L71
 274:../cleanflight/src/main/rx/rx.c ****             featureClear(FEATURE_RX_SERIAL);
 1286              	 .loc 7 274 0
 1287 0140 0820     	 movs r0,#8
 1288 0142 FFF7FEFF 	 bl featureClear
 275:../cleanflight/src/main/rx/rx.c ****             rxRuntimeConfig.rcReadRawFn = nullReadRawRC;
 1289              	 .loc 7 275 0
 1290 0146 2B4B     	 ldr r3,.L77
 1291 0148 2B4A     	 ldr r2,.L77+4
 1292 014a C3F80320 	 str r2,[r3,#3]
 276:../cleanflight/src/main/rx/rx.c ****             rxRuntimeConfig.rcFrameStatusFn = nullFrameStatus;
 1293              	 .loc 7 276 0
 1294 014e 294B     	 ldr r3,.L77
 1295 0150 2A4A     	 ldr r2,.L77+8
 1296 0152 C3F80720 	 str r2,[r3,#7]
 1297              	.L71:
 1298              	.LBE9:
 277:../cleanflight/src/main/rx/rx.c ****         }
 278:../cleanflight/src/main/rx/rx.c ****     }
 279:../cleanflight/src/main/rx/rx.c **** #endif
 280:../cleanflight/src/main/rx/rx.c **** 
 281:../cleanflight/src/main/rx/rx.c **** #ifdef USE_RX_MSP
 282:../cleanflight/src/main/rx/rx.c ****     if (feature(FEATURE_RX_MSP)) {
 1299              	 .loc 7 282 0
 1300 0156 4FF48040 	 mov r0,#16384
 1301 015a FFF7FEFF 	 bl feature
 1302 015e 0346     	 mov r3,r0
 1303 0160 002B     	 cmp r3,#0
 1304 0162 09D0     	 beq .L72
 283:../cleanflight/src/main/rx/rx.c ****         rxMspInit(rxConfig(), &rxRuntimeConfig);
 1305              	 .loc 7 283 0
 1306 0164 FFF7FEFF 	 bl rxConfig
 1307 0168 0346     	 mov r3,r0
 1308 016a 1846     	 mov r0,r3
 1309 016c 2149     	 ldr r1,.L77
 1310 016e FFF7FEFF 	 bl rxMspInit
 284:../cleanflight/src/main/rx/rx.c ****         needRxSignalMaxDelayUs = DELAY_5_HZ;
 1311              	 .loc 7 284 0
 1312 0172 254B     	 ldr r3,.L77+20
 1313 0174 284A     	 ldr r2,.L77+36
 1314 0176 1A60     	 str r2,[r3]
 1315              	.L72:
 285:../cleanflight/src/main/rx/rx.c ****     }
 286:../cleanflight/src/main/rx/rx.c **** #endif
 287:../cleanflight/src/main/rx/rx.c **** 
 288:../cleanflight/src/main/rx/rx.c **** #ifdef USE_RX_SPI
 289:../cleanflight/src/main/rx/rx.c ****     if (feature(FEATURE_RX_SPI)) {
 290:../cleanflight/src/main/rx/rx.c ****         const bool enabled = rxSpiInit(rxSpiConfig(), &rxRuntimeConfig);
 291:../cleanflight/src/main/rx/rx.c ****         if (!enabled) {
 292:../cleanflight/src/main/rx/rx.c ****             featureClear(FEATURE_RX_SPI);
 293:../cleanflight/src/main/rx/rx.c ****             rxRuntimeConfig.rcReadRawFn = nullReadRawRC;
 294:../cleanflight/src/main/rx/rx.c ****             rxRuntimeConfig.rcFrameStatusFn = nullFrameStatus;
 295:../cleanflight/src/main/rx/rx.c ****         }
 296:../cleanflight/src/main/rx/rx.c ****     }
 297:../cleanflight/src/main/rx/rx.c **** #endif
 298:../cleanflight/src/main/rx/rx.c **** 
 299:../cleanflight/src/main/rx/rx.c **** #if defined(USE_PWM) || defined(USE_PPM)
 300:../cleanflight/src/main/rx/rx.c ****     if (feature(FEATURE_RX_PPM) || feature(FEATURE_RX_PARALLEL_PWM)) {
 1316              	 .loc 7 300 0
 1317 0178 0120     	 movs r0,#1
 1318 017a FFF7FEFF 	 bl feature
 1319 017e 0346     	 mov r3,r0
 1320 0180 002B     	 cmp r3,#0
 1321 0182 06D1     	 bne .L73
 1322              	 .loc 7 300 0 is_stmt 0 discriminator 1
 1323 0184 4FF40050 	 mov r0,#8192
 1324 0188 FFF7FEFF 	 bl feature
 1325 018c 0346     	 mov r3,r0
 1326 018e 002B     	 cmp r3,#0
 1327 0190 06D0     	 beq .L74
 1328              	.L73:
 301:../cleanflight/src/main/rx/rx.c ****         rxPwmInit(rxConfig(), &rxRuntimeConfig);
 1329              	 .loc 7 301 0 is_stmt 1
 1330 0192 FFF7FEFF 	 bl rxConfig
 1331 0196 0346     	 mov r3,r0
 1332 0198 1846     	 mov r0,r3
 1333 019a 1649     	 ldr r1,.L77
 1334 019c FFF7FEFF 	 bl rxPwmInit
 1335              	.L74:
 302:../cleanflight/src/main/rx/rx.c ****     }
 303:../cleanflight/src/main/rx/rx.c **** #endif
 304:../cleanflight/src/main/rx/rx.c **** 
 305:../cleanflight/src/main/rx/rx.c **** #if defined(USE_ADC)
 306:../cleanflight/src/main/rx/rx.c ****     if (feature(FEATURE_RSSI_ADC)) {
 1336              	 .loc 7 306 0
 1337 01a0 4FF40040 	 mov r0,#32768
 1338 01a4 FFF7FEFF 	 bl feature
 1339 01a8 0346     	 mov r3,r0
 1340 01aa 002B     	 cmp r3,#0
 1341 01ac 03D0     	 beq .L75
 307:../cleanflight/src/main/rx/rx.c ****         rssiSource = RSSI_SOURCE_ADC;
 1342              	 .loc 7 307 0
 1343 01ae 1B4B     	 ldr r3,.L77+40
 1344 01b0 0122     	 movs r2,#1
 1345 01b2 1A70     	 strb r2,[r3]
 1346 01b4 08E0     	 b .L76
 1347              	.L75:
 308:../cleanflight/src/main/rx/rx.c ****     } else
 309:../cleanflight/src/main/rx/rx.c **** #endif
 310:../cleanflight/src/main/rx/rx.c ****     if (rxConfig()->rssi_channel > 0) {
 1348              	 .loc 7 310 0
 1349 01b6 FFF7FEFF 	 bl rxConfig
 1350 01ba 0346     	 mov r3,r0
 1351 01bc DB7B     	 ldrb r3,[r3,#15]
 1352 01be 002B     	 cmp r3,#0
 1353 01c0 02D0     	 beq .L76
 311:../cleanflight/src/main/rx/rx.c ****         rssiSource = RSSI_SOURCE_RX_CHANNEL;
 1354              	 .loc 7 311 0
 1355 01c2 164B     	 ldr r3,.L77+40
 1356 01c4 0222     	 movs r2,#2
 1357 01c6 1A70     	 strb r2,[r3]
 1358              	.L76:
 1359              	.LBB10:
 312:../cleanflight/src/main/rx/rx.c ****     }
 313:../cleanflight/src/main/rx/rx.c **** 
 314:../cleanflight/src/main/rx/rx.c ****     rxChannelCount = MIN(rxConfig()->max_aux_channel + NON_AUX_CHANNEL_COUNT, rxRuntimeConfig.chann
 1360              	 .loc 7 314 0
 1361 01c8 FFF7FEFF 	 bl rxConfig
 1362 01cc 0346     	 mov r3,r0
 1363 01ce 93F82130 	 ldrb r3,[r3,#33]
 1364 01d2 0433     	 adds r3,r3,#4
 1365 01d4 BB60     	 str r3,[r7,#8]
 1366 01d6 074B     	 ldr r3,.L77
 1367 01d8 1B78     	 ldrb r3,[r3]
 1368 01da FB71     	 strb r3,[r7,#7]
 1369 01dc FA79     	 ldrb r2,[r7,#7]
 1370 01de BB68     	 ldr r3,[r7,#8]
 1371 01e0 9342     	 cmp r3,r2
 1372 01e2 A8BF     	 it ge
 1373 01e4 1346     	 movge r3,r2
 1374              	.LBE10:
 1375 01e6 DAB2     	 uxtb r2,r3
 1376 01e8 0D4B     	 ldr r3,.L77+44
 1377 01ea 1A70     	 strb r2,[r3]
 315:../cleanflight/src/main/rx/rx.c **** }
 1378              	 .loc 7 315 0
 1379 01ec 2037     	 adds r7,r7,#32
 1380              	.LCFI88:
 1381              	 .cfi_def_cfa_offset 8
 1382 01ee BD46     	 mov sp,r7
 1383              	.LCFI89:
 1384              	 .cfi_def_cfa_register 13
 1385              	 
 1386 01f0 80BD     	 pop {r7,pc}
 1387              	.L78:
 1388 01f2 00BF     	 .align 2
 1389              	.L77:
 1390 01f4 00000000 	 .word rxRuntimeConfig
 1391 01f8 00000000 	 .word nullReadRawRC
 1392 01fc 00000000 	 .word nullFrameStatus
 1393 0200 00000000 	 .word nullProcessFrame
 1394 0204 00000000 	 .word rcSampleIndex
 1395 0208 00000000 	 .word needRxSignalMaxDelayUs
 1396 020c A0860100 	 .word 100000
 1397 0210 00000000 	 .word rcData
 1398 0214 00000000 	 .word rcInvalidPulsPeriod
 1399 0218 400D0300 	 .word 200000
 1400 021c 00000000 	 .word rssiSource
 1401 0220 00000000 	 .word rxChannelCount
 1402              	 .cfi_endproc
 1403              	.LFE568:
 1405              	 .section .text.rxIsReceivingSignal,"ax",%progbits
 1406              	 .align 2
 1407              	 .global rxIsReceivingSignal
 1408              	 .thumb
 1409              	 .thumb_func
 1411              	rxIsReceivingSignal:
 1412              	.LFB569:
 316:../cleanflight/src/main/rx/rx.c **** 
 317:../cleanflight/src/main/rx/rx.c **** bool rxIsReceivingSignal(void)
 318:../cleanflight/src/main/rx/rx.c **** {
 1413              	 .loc 7 318 0
 1414              	 .cfi_startproc
 1415              	 
 1416              	 
 1417              	 
 1418 0000 80B4     	 push {r7}
 1419              	.LCFI90:
 1420              	 .cfi_def_cfa_offset 4
 1421              	 .cfi_offset 7,-4
 1422 0002 00AF     	 add r7,sp,#0
 1423              	.LCFI91:
 1424              	 .cfi_def_cfa_register 7
 319:../cleanflight/src/main/rx/rx.c ****     return rxSignalReceived;
 1425              	 .loc 7 319 0
 1426 0004 034B     	 ldr r3,.L81
 1427 0006 1B78     	 ldrb r3,[r3]
 320:../cleanflight/src/main/rx/rx.c **** }
 1428              	 .loc 7 320 0
 1429 0008 1846     	 mov r0,r3
 1430 000a BD46     	 mov sp,r7
 1431              	.LCFI92:
 1432              	 .cfi_def_cfa_register 13
 1433              	 
 1434 000c 5DF8047B 	 ldr r7,[sp],#4
 1435              	.LCFI93:
 1436              	 .cfi_restore 7
 1437              	 .cfi_def_cfa_offset 0
 1438 0010 7047     	 bx lr
 1439              	.L82:
 1440 0012 00BF     	 .align 2
 1441              	.L81:
 1442 0014 00000000 	 .word rxSignalReceived
 1443              	 .cfi_endproc
 1444              	.LFE569:
 1446              	 .section .text.rxAreFlightChannelsValid,"ax",%progbits
 1447              	 .align 2
 1448              	 .global rxAreFlightChannelsValid
 1449              	 .thumb
 1450              	 .thumb_func
 1452              	rxAreFlightChannelsValid:
 1453              	.LFB570:
 321:../cleanflight/src/main/rx/rx.c **** 
 322:../cleanflight/src/main/rx/rx.c **** bool rxAreFlightChannelsValid(void)
 323:../cleanflight/src/main/rx/rx.c **** {
 1454              	 .loc 7 323 0
 1455              	 .cfi_startproc
 1456              	 
 1457              	 
 1458              	 
 1459 0000 80B4     	 push {r7}
 1460              	.LCFI94:
 1461              	 .cfi_def_cfa_offset 4
 1462              	 .cfi_offset 7,-4
 1463 0002 00AF     	 add r7,sp,#0
 1464              	.LCFI95:
 1465              	 .cfi_def_cfa_register 7
 324:../cleanflight/src/main/rx/rx.c ****     return rxFlightChannelsValid;
 1466              	 .loc 7 324 0
 1467 0004 034B     	 ldr r3,.L85
 1468 0006 1B78     	 ldrb r3,[r3]
 325:../cleanflight/src/main/rx/rx.c **** }
 1469              	 .loc 7 325 0
 1470 0008 1846     	 mov r0,r3
 1471 000a BD46     	 mov sp,r7
 1472              	.LCFI96:
 1473              	 .cfi_def_cfa_register 13
 1474              	 
 1475 000c 5DF8047B 	 ldr r7,[sp],#4
 1476              	.LCFI97:
 1477              	 .cfi_restore 7
 1478              	 .cfi_def_cfa_offset 0
 1479 0010 7047     	 bx lr
 1480              	.L86:
 1481 0012 00BF     	 .align 2
 1482              	.L85:
 1483 0014 00000000 	 .word rxFlightChannelsValid
 1484              	 .cfi_endproc
 1485              	.LFE570:
 1487              	 .section .text.suspendRxSignal,"ax",%progbits
 1488              	 .align 2
 1489              	 .global suspendRxSignal
 1490              	 .thumb
 1491              	 .thumb_func
 1493              	suspendRxSignal:
 1494              	.LFB571:
 326:../cleanflight/src/main/rx/rx.c **** 
 327:../cleanflight/src/main/rx/rx.c **** void suspendRxSignal(void)
 328:../cleanflight/src/main/rx/rx.c **** {
 1495              	 .loc 7 328 0
 1496              	 .cfi_startproc
 1497              	 
 1498              	 
 1499 0000 80B5     	 push {r7,lr}
 1500              	.LCFI98:
 1501              	 .cfi_def_cfa_offset 8
 1502              	 .cfi_offset 7,-8
 1503              	 .cfi_offset 14,-4
 1504 0002 00AF     	 add r7,sp,#0
 1505              	.LCFI99:
 1506              	 .cfi_def_cfa_register 7
 329:../cleanflight/src/main/rx/rx.c ****     suspendRxSignalUntil = micros() + SKIP_RC_ON_SUSPEND_PERIOD;
 1507              	 .loc 7 329 0
 1508 0004 FFF7FEFF 	 bl micros
 1509 0008 0346     	 mov r3,r0
 1510 000a 03F5B713 	 add r3,r3,#1499136
 1511 000e 03F55873 	 add r3,r3,#864
 1512 0012 044A     	 ldr r2,.L88
 1513 0014 1360     	 str r3,[r2]
 330:../cleanflight/src/main/rx/rx.c ****     skipRxSamples = SKIP_RC_SAMPLES_ON_RESUME;
 1514              	 .loc 7 330 0
 1515 0016 044B     	 ldr r3,.L88+4
 1516 0018 0222     	 movs r2,#2
 1517 001a 1A70     	 strb r2,[r3]
 331:../cleanflight/src/main/rx/rx.c ****     failsafeOnRxSuspend(SKIP_RC_ON_SUSPEND_PERIOD);
 1518              	 .loc 7 331 0
 1519 001c 0348     	 ldr r0,.L88+8
 1520 001e FFF7FEFF 	 bl failsafeOnRxSuspend
 332:../cleanflight/src/main/rx/rx.c **** }
 1521              	 .loc 7 332 0
 1522 0022 80BD     	 pop {r7,pc}
 1523              	.L89:
 1524              	 .align 2
 1525              	.L88:
 1526 0024 00000000 	 .word suspendRxSignalUntil
 1527 0028 00000000 	 .word skipRxSamples
 1528 002c 60E31600 	 .word 1500000
 1529              	 .cfi_endproc
 1530              	.LFE571:
 1532              	 .section .text.resumeRxSignal,"ax",%progbits
 1533              	 .align 2
 1534              	 .global resumeRxSignal
 1535              	 .thumb
 1536              	 .thumb_func
 1538              	resumeRxSignal:
 1539              	.LFB572:
 333:../cleanflight/src/main/rx/rx.c **** 
 334:../cleanflight/src/main/rx/rx.c **** void resumeRxSignal(void)
 335:../cleanflight/src/main/rx/rx.c **** {
 1540              	 .loc 7 335 0
 1541              	 .cfi_startproc
 1542              	 
 1543              	 
 1544 0000 80B5     	 push {r7,lr}
 1545              	.LCFI100:
 1546              	 .cfi_def_cfa_offset 8
 1547              	 .cfi_offset 7,-8
 1548              	 .cfi_offset 14,-4
 1549 0002 00AF     	 add r7,sp,#0
 1550              	.LCFI101:
 1551              	 .cfi_def_cfa_register 7
 336:../cleanflight/src/main/rx/rx.c ****     suspendRxSignalUntil = micros();
 1552              	 .loc 7 336 0
 1553 0004 FFF7FEFF 	 bl micros
 1554 0008 0246     	 mov r2,r0
 1555 000a 044B     	 ldr r3,.L91
 1556 000c 1A60     	 str r2,[r3]
 337:../cleanflight/src/main/rx/rx.c ****     skipRxSamples = SKIP_RC_SAMPLES_ON_RESUME;
 1557              	 .loc 7 337 0
 1558 000e 044B     	 ldr r3,.L91+4
 1559 0010 0222     	 movs r2,#2
 1560 0012 1A70     	 strb r2,[r3]
 338:../cleanflight/src/main/rx/rx.c ****     failsafeOnRxResume();
 1561              	 .loc 7 338 0
 1562 0014 FFF7FEFF 	 bl failsafeOnRxResume
 339:../cleanflight/src/main/rx/rx.c **** }
 1563              	 .loc 7 339 0
 1564 0018 80BD     	 pop {r7,pc}
 1565              	.L92:
 1566 001a 00BF     	 .align 2
 1567              	.L91:
 1568 001c 00000000 	 .word suspendRxSignalUntil
 1569 0020 00000000 	 .word skipRxSamples
 1570              	 .cfi_endproc
 1571              	.LFE572:
 1573              	 .section .text.rxUpdateCheck,"ax",%progbits
 1574              	 .align 2
 1575              	 .global rxUpdateCheck
 1576              	 .thumb
 1577              	 .thumb_func
 1579              	rxUpdateCheck:
 1580              	.LFB573:
 340:../cleanflight/src/main/rx/rx.c **** 
 341:../cleanflight/src/main/rx/rx.c **** bool rxUpdateCheck(timeUs_t currentTimeUs, timeDelta_t currentDeltaTime)
 342:../cleanflight/src/main/rx/rx.c **** {
 1581              	 .loc 7 342 0
 1582              	 .cfi_startproc
 1583              	 
 1584              	 
 1585 0000 80B5     	 push {r7,lr}
 1586              	.LCFI102:
 1587              	 .cfi_def_cfa_offset 8
 1588              	 .cfi_offset 7,-8
 1589              	 .cfi_offset 14,-4
 1590 0002 84B0     	 sub sp,sp,#16
 1591              	.LCFI103:
 1592              	 .cfi_def_cfa_offset 24
 1593 0004 00AF     	 add r7,sp,#0
 1594              	.LCFI104:
 1595              	 .cfi_def_cfa_register 7
 1596 0006 7860     	 str r0,[r7,#4]
 1597 0008 3960     	 str r1,[r7]
 343:../cleanflight/src/main/rx/rx.c ****     UNUSED(currentDeltaTime);
 344:../cleanflight/src/main/rx/rx.c **** 
 345:../cleanflight/src/main/rx/rx.c ****     bool signalReceived = false;
 1598              	 .loc 7 345 0
 1599 000a 0023     	 movs r3,#0
 1600 000c FB73     	 strb r3,[r7,#15]
 346:../cleanflight/src/main/rx/rx.c ****     bool useDataDrivenProcessing = true;
 1601              	 .loc 7 346 0
 1602 000e 0123     	 movs r3,#1
 1603 0010 BB73     	 strb r3,[r7,#14]
 347:../cleanflight/src/main/rx/rx.c **** 
 348:../cleanflight/src/main/rx/rx.c **** #if defined(USE_PWM) || defined(USE_PPM)
 349:../cleanflight/src/main/rx/rx.c ****     if (feature(FEATURE_RX_PPM)) {
 1604              	 .loc 7 349 0
 1605 0012 0120     	 movs r0,#1
 1606 0014 FFF7FEFF 	 bl feature
 1607 0018 0346     	 mov r3,r0
 1608 001a 002B     	 cmp r3,#0
 1609 001c 12D0     	 beq .L94
 350:../cleanflight/src/main/rx/rx.c ****         if (isPPMDataBeingReceived()) {
 1610              	 .loc 7 350 0
 1611 001e FFF7FEFF 	 bl isPPMDataBeingReceived
 1612 0022 0346     	 mov r3,r0
 1613 0024 002B     	 cmp r3,#0
 1614 0026 7AD0     	 beq .L96
 351:../cleanflight/src/main/rx/rx.c ****             signalReceived = true;
 1615              	 .loc 7 351 0
 1616 0028 0123     	 movs r3,#1
 1617 002a FB73     	 strb r3,[r7,#15]
 352:../cleanflight/src/main/rx/rx.c ****             rxIsInFailsafeMode = false;
 1618              	 .loc 7 352 0
 1619 002c 554B     	 ldr r3,.L113
 1620 002e 0022     	 movs r2,#0
 1621 0030 1A70     	 strb r2,[r3]
 353:../cleanflight/src/main/rx/rx.c ****             needRxSignalBefore = currentTimeUs + needRxSignalMaxDelayUs;
 1622              	 .loc 7 353 0
 1623 0032 554B     	 ldr r3,.L113+4
 1624 0034 1A68     	 ldr r2,[r3]
 1625 0036 7B68     	 ldr r3,[r7,#4]
 1626 0038 1344     	 add r3,r3,r2
 1627 003a 544A     	 ldr r2,.L113+8
 1628 003c 1360     	 str r3,[r2]
 354:../cleanflight/src/main/rx/rx.c ****             resetPPMDataReceivedState();
 1629              	 .loc 7 354 0
 1630 003e FFF7FEFF 	 bl resetPPMDataReceivedState
 1631 0042 6CE0     	 b .L96
 1632              	.L94:
 355:../cleanflight/src/main/rx/rx.c ****         }
 356:../cleanflight/src/main/rx/rx.c ****     } else if (feature(FEATURE_RX_PARALLEL_PWM)) {
 1633              	 .loc 7 356 0
 1634 0044 4FF40050 	 mov r0,#8192
 1635 0048 FFF7FEFF 	 bl feature
 1636 004c 0346     	 mov r3,r0
 1637 004e 002B     	 cmp r3,#0
 1638 0050 12D0     	 beq .L97
 357:../cleanflight/src/main/rx/rx.c ****         if (isPWMDataBeingReceived()) {
 1639              	 .loc 7 357 0
 1640 0052 FFF7FEFF 	 bl isPWMDataBeingReceived
 1641 0056 0346     	 mov r3,r0
 1642 0058 002B     	 cmp r3,#0
 1643 005a 60D0     	 beq .L96
 358:../cleanflight/src/main/rx/rx.c ****             signalReceived = true;
 1644              	 .loc 7 358 0
 1645 005c 0123     	 movs r3,#1
 1646 005e FB73     	 strb r3,[r7,#15]
 359:../cleanflight/src/main/rx/rx.c ****             rxIsInFailsafeMode = false;
 1647              	 .loc 7 359 0
 1648 0060 484B     	 ldr r3,.L113
 1649 0062 0022     	 movs r2,#0
 1650 0064 1A70     	 strb r2,[r3]
 360:../cleanflight/src/main/rx/rx.c ****             needRxSignalBefore = currentTimeUs + needRxSignalMaxDelayUs;
 1651              	 .loc 7 360 0
 1652 0066 484B     	 ldr r3,.L113+4
 1653 0068 1A68     	 ldr r2,[r3]
 1654 006a 7B68     	 ldr r3,[r7,#4]
 1655 006c 1344     	 add r3,r3,r2
 1656 006e 474A     	 ldr r2,.L113+8
 1657 0070 1360     	 str r3,[r2]
 361:../cleanflight/src/main/rx/rx.c ****             useDataDrivenProcessing = false;
 1658              	 .loc 7 361 0
 1659 0072 0023     	 movs r3,#0
 1660 0074 BB73     	 strb r3,[r7,#14]
 1661 0076 52E0     	 b .L96
 1662              	.L97:
 1663              	.LBB11:
 362:../cleanflight/src/main/rx/rx.c ****         }
 363:../cleanflight/src/main/rx/rx.c ****     } else
 364:../cleanflight/src/main/rx/rx.c **** #endif
 365:../cleanflight/src/main/rx/rx.c ****     {
 366:../cleanflight/src/main/rx/rx.c ****         const uint8_t frameStatus = rxRuntimeConfig.rcFrameStatusFn(&rxRuntimeConfig);
 1664              	 .loc 7 366 0
 1665 0078 454B     	 ldr r3,.L113+12
 1666 007a D3F80730 	 ldr r3,[r3,#7]
 1667 007e 4448     	 ldr r0,.L113+12
 1668 0080 9847     	 blx r3
 1669 0082 0346     	 mov r3,r0
 1670 0084 7B73     	 strb r3,[r7,#13]
 367:../cleanflight/src/main/rx/rx.c ****         if (frameStatus & RX_FRAME_COMPLETE) {
 1671              	 .loc 7 367 0
 1672 0086 7B7B     	 ldrb r3,[r7,#13]
 1673 0088 03F00103 	 and r3,r3,#1
 1674 008c 002B     	 cmp r3,#0
 1675 008e 3ED0     	 beq .L99
 1676              	.LBB12:
 368:../cleanflight/src/main/rx/rx.c ****             rxIsInFailsafeMode = (frameStatus & RX_FRAME_FAILSAFE) != 0;
 1677              	 .loc 7 368 0
 1678 0090 7B7B     	 ldrb r3,[r7,#13]
 1679 0092 03F00203 	 and r3,r3,#2
 1680 0096 002B     	 cmp r3,#0
 1681 0098 14BF     	 ite ne
 1682 009a 0123     	 movne r3,#1
 1683 009c 0023     	 moveq r3,#0
 1684 009e DAB2     	 uxtb r2,r3
 1685 00a0 384B     	 ldr r3,.L113
 1686 00a2 1A70     	 strb r2,[r3]
 369:../cleanflight/src/main/rx/rx.c ****             bool rxFrameDropped = (frameStatus & RX_FRAME_DROPPED) != 0;
 1687              	 .loc 7 369 0
 1688 00a4 7B7B     	 ldrb r3,[r7,#13]
 1689 00a6 03F00803 	 and r3,r3,#8
 1690 00aa 002B     	 cmp r3,#0
 1691 00ac 14BF     	 ite ne
 1692 00ae 0123     	 movne r3,#1
 1693 00b0 0023     	 moveq r3,#0
 1694 00b2 3B73     	 strb r3,[r7,#12]
 370:../cleanflight/src/main/rx/rx.c ****             signalReceived = !(rxIsInFailsafeMode || rxFrameDropped);
 1695              	 .loc 7 370 0
 1696 00b4 334B     	 ldr r3,.L113
 1697 00b6 1B78     	 ldrb r3,[r3]
 1698 00b8 83F00103 	 eor r3,r3,#1
 1699 00bc DBB2     	 uxtb r3,r3
 1700 00be 002B     	 cmp r3,#0
 1701 00c0 07D0     	 beq .L100
 1702              	 .loc 7 370 0 is_stmt 0 discriminator 1
 1703 00c2 3B7B     	 ldrb r3,[r7,#12]
 1704 00c4 83F00103 	 eor r3,r3,#1
 1705 00c8 DBB2     	 uxtb r3,r3
 1706 00ca 002B     	 cmp r3,#0
 1707 00cc 01D0     	 beq .L100
 1708              	 .loc 7 370 0 discriminator 3
 1709 00ce 0123     	 movs r3,#1
 1710 00d0 00E0     	 b .L101
 1711              	.L100:
 1712              	 .loc 7 370 0 discriminator 4
 1713 00d2 0023     	 movs r3,#0
 1714              	.L101:
 1715              	 .loc 7 370 0 discriminator 6
 1716 00d4 FB73     	 strb r3,[r7,#15]
 1717 00d6 FB7B     	 ldrb r3,[r7,#15]
 1718 00d8 03F00103 	 and r3,r3,#1
 1719 00dc FB73     	 strb r3,[r7,#15]
 371:../cleanflight/src/main/rx/rx.c ****             if (signalReceived) {
 1720              	 .loc 7 371 0 is_stmt 1 discriminator 6
 1721 00de FB7B     	 ldrb r3,[r7,#15]
 1722 00e0 002B     	 cmp r3,#0
 1723 00e2 05D0     	 beq .L102
 372:../cleanflight/src/main/rx/rx.c ****                 needRxSignalBefore = currentTimeUs + needRxSignalMaxDelayUs;
 1724              	 .loc 7 372 0
 1725 00e4 284B     	 ldr r3,.L113+4
 1726 00e6 1A68     	 ldr r2,[r3]
 1727 00e8 7B68     	 ldr r3,[r7,#4]
 1728 00ea 1344     	 add r3,r3,r2
 1729 00ec 274A     	 ldr r2,.L113+8
 1730 00ee 1360     	 str r3,[r2]
 1731              	.L102:
 373:../cleanflight/src/main/rx/rx.c ****             }
 374:../cleanflight/src/main/rx/rx.c **** 
 375:../cleanflight/src/main/rx/rx.c ****             if (frameStatus & (RX_FRAME_FAILSAFE | RX_FRAME_DROPPED)) {
 1732              	 .loc 7 375 0
 1733 00f0 7B7B     	 ldrb r3,[r7,#13]
 1734 00f2 03F00A03 	 and r3,r3,#10
 1735 00f6 002B     	 cmp r3,#0
 1736 00f8 04D0     	 beq .L103
 376:../cleanflight/src/main/rx/rx.c ****             	// No (0%) signal
 377:../cleanflight/src/main/rx/rx.c ****             	setRssi(0, RSSI_SOURCE_FRAME_ERRORS);
 1737              	 .loc 7 377 0
 1738 00fa 0020     	 movs r0,#0
 1739 00fc 0521     	 movs r1,#5
 1740 00fe FFF7FEFF 	 bl setRssi
 1741 0102 04E0     	 b .L99
 1742              	.L103:
 378:../cleanflight/src/main/rx/rx.c ****             } else {
 379:../cleanflight/src/main/rx/rx.c ****             	// Valid (100%) signal
 380:../cleanflight/src/main/rx/rx.c ****             	setRssi(RSSI_MAX_VALUE, RSSI_SOURCE_FRAME_ERRORS);
 1743              	 .loc 7 380 0
 1744 0104 40F2FF30 	 movw r0,#1023
 1745 0108 0521     	 movs r1,#5
 1746 010a FFF7FEFF 	 bl setRssi
 1747              	.L99:
 1748              	.LBE12:
 381:../cleanflight/src/main/rx/rx.c ****             }
 382:../cleanflight/src/main/rx/rx.c ****         }
 383:../cleanflight/src/main/rx/rx.c **** 
 384:../cleanflight/src/main/rx/rx.c ****         if (frameStatus & RX_FRAME_PROCESSING_REQUIRED) {
 1749              	 .loc 7 384 0
 1750 010e 7B7B     	 ldrb r3,[r7,#13]
 1751 0110 03F00403 	 and r3,r3,#4
 1752 0114 002B     	 cmp r3,#0
 1753 0116 02D0     	 beq .L96
 385:../cleanflight/src/main/rx/rx.c ****             auxiliaryProcessingRequired = true;
 1754              	 .loc 7 385 0
 1755 0118 1E4B     	 ldr r3,.L113+16
 1756 011a 0122     	 movs r2,#1
 1757 011c 1A70     	 strb r2,[r3]
 1758              	.L96:
 1759              	.LBE11:
 386:../cleanflight/src/main/rx/rx.c ****         }
 387:../cleanflight/src/main/rx/rx.c ****     }
 388:../cleanflight/src/main/rx/rx.c **** 
 389:../cleanflight/src/main/rx/rx.c ****     if (signalReceived) {
 1760              	 .loc 7 389 0
 1761 011e FB7B     	 ldrb r3,[r7,#15]
 1762 0120 002B     	 cmp r3,#0
 1763 0122 03D0     	 beq .L104
 390:../cleanflight/src/main/rx/rx.c ****         rxSignalReceived = true;
 1764              	 .loc 7 390 0
 1765 0124 1C4B     	 ldr r3,.L113+20
 1766 0126 0122     	 movs r2,#1
 1767 0128 1A70     	 strb r2,[r3]
 1768 012a 07E0     	 b .L105
 1769              	.L104:
 391:../cleanflight/src/main/rx/rx.c ****     } else if (currentTimeUs >= needRxSignalBefore) {
 1770              	 .loc 7 391 0
 1771 012c 174B     	 ldr r3,.L113+8
 1772 012e 1B68     	 ldr r3,[r3]
 1773 0130 7A68     	 ldr r2,[r7,#4]
 1774 0132 9A42     	 cmp r2,r3
 1775 0134 02D3     	 bcc .L105
 392:../cleanflight/src/main/rx/rx.c ****         rxSignalReceived = false;
 1776              	 .loc 7 392 0
 1777 0136 184B     	 ldr r3,.L113+20
 1778 0138 0022     	 movs r2,#0
 1779 013a 1A70     	 strb r2,[r3]
 1780              	.L105:
 393:../cleanflight/src/main/rx/rx.c ****     }
 394:../cleanflight/src/main/rx/rx.c **** 
 395:../cleanflight/src/main/rx/rx.c ****     if ((signalReceived && useDataDrivenProcessing) || cmpTimeUs(currentTimeUs, rxNextUpdateAtUs) >
 1781              	 .loc 7 395 0
 1782 013c FB7B     	 ldrb r3,[r7,#15]
 1783 013e 002B     	 cmp r3,#0
 1784 0140 02D0     	 beq .L106
 1785              	 .loc 7 395 0 is_stmt 0 discriminator 1
 1786 0142 BB7B     	 ldrb r3,[r7,#14]
 1787 0144 002B     	 cmp r3,#0
 1788 0146 08D1     	 bne .L107
 1789              	.L106:
 1790              	 .loc 7 395 0 discriminator 3
 1791 0148 144B     	 ldr r3,.L113+24
 1792 014a 1B68     	 ldr r3,[r3]
 1793 014c 7868     	 ldr r0,[r7,#4]
 1794 014e 1946     	 mov r1,r3
 1795 0150 FFF7FEFF 	 bl cmpTimeUs
 1796 0154 0346     	 mov r3,r0
 1797 0156 002B     	 cmp r3,#0
 1798 0158 02DD     	 ble .L108
 1799              	.L107:
 396:../cleanflight/src/main/rx/rx.c ****         rxDataProcessingRequired = true;
 1800              	 .loc 7 396 0 is_stmt 1
 1801 015a 114B     	 ldr r3,.L113+28
 1802 015c 0122     	 movs r2,#1
 1803 015e 1A70     	 strb r2,[r3]
 1804              	.L108:
 397:../cleanflight/src/main/rx/rx.c ****     }
 398:../cleanflight/src/main/rx/rx.c **** 
 399:../cleanflight/src/main/rx/rx.c ****     return rxDataProcessingRequired || auxiliaryProcessingRequired; // data driven or 50Hz
 1805              	 .loc 7 399 0
 1806 0160 0F4B     	 ldr r3,.L113+28
 1807 0162 1B78     	 ldrb r3,[r3]
 1808 0164 002B     	 cmp r3,#0
 1809 0166 03D1     	 bne .L109
 1810              	 .loc 7 399 0 is_stmt 0 discriminator 2
 1811 0168 0A4B     	 ldr r3,.L113+16
 1812 016a 1B78     	 ldrb r3,[r3]
 1813 016c 002B     	 cmp r3,#0
 1814 016e 01D0     	 beq .L110
 1815              	.L109:
 1816              	 .loc 7 399 0 discriminator 3
 1817 0170 0123     	 movs r3,#1
 1818 0172 00E0     	 b .L111
 1819              	.L110:
 1820              	 .loc 7 399 0 discriminator 4
 1821 0174 0023     	 movs r3,#0
 1822              	.L111:
 1823              	 .loc 7 399 0 discriminator 6
 1824 0176 03F00103 	 and r3,r3,#1
 1825 017a DBB2     	 uxtb r3,r3
 400:../cleanflight/src/main/rx/rx.c **** }
 1826              	 .loc 7 400 0 is_stmt 1 discriminator 6
 1827 017c 1846     	 mov r0,r3
 1828 017e 1037     	 adds r7,r7,#16
 1829              	.LCFI105:
 1830              	 .cfi_def_cfa_offset 8
 1831 0180 BD46     	 mov sp,r7
 1832              	.LCFI106:
 1833              	 .cfi_def_cfa_register 13
 1834              	 
 1835 0182 80BD     	 pop {r7,pc}
 1836              	.L114:
 1837              	 .align 2
 1838              	.L113:
 1839 0184 00000000 	 .word rxIsInFailsafeMode
 1840 0188 00000000 	 .word needRxSignalMaxDelayUs
 1841 018c 00000000 	 .word needRxSignalBefore
 1842 0190 00000000 	 .word rxRuntimeConfig
 1843 0194 00000000 	 .word auxiliaryProcessingRequired
 1844 0198 00000000 	 .word rxSignalReceived
 1845 019c 00000000 	 .word rxNextUpdateAtUs
 1846 01a0 00000000 	 .word rxDataProcessingRequired
 1847              	 .cfi_endproc
 1848              	.LFE573:
 1850              	 .section .text.calculateChannelMovingAverage,"ax",%progbits
 1851              	 .align 2
 1852              	 .thumb
 1853              	 .thumb_func
 1855              	calculateChannelMovingAverage:
 1856              	.LFB574:
 401:../cleanflight/src/main/rx/rx.c **** 
 402:../cleanflight/src/main/rx/rx.c **** static uint16_t calculateChannelMovingAverage(uint8_t chan, uint16_t sample)
 403:../cleanflight/src/main/rx/rx.c **** {
 1857              	 .loc 7 403 0
 1858              	 .cfi_startproc
 1859              	 
 1860              	 
 1861              	 
 1862 0000 90B4     	 push {r4,r7}
 1863              	.LCFI107:
 1864              	 .cfi_def_cfa_offset 8
 1865              	 .cfi_offset 4,-8
 1866              	 .cfi_offset 7,-4
 1867 0002 84B0     	 sub sp,sp,#16
 1868              	.LCFI108:
 1869              	 .cfi_def_cfa_offset 24
 1870 0004 00AF     	 add r7,sp,#0
 1871              	.LCFI109:
 1872              	 .cfi_def_cfa_register 7
 1873 0006 0346     	 mov r3,r0
 1874 0008 0A46     	 mov r2,r1
 1875 000a FB71     	 strb r3,[r7,#7]
 1876 000c 1346     	 mov r3,r2
 1877 000e BB80     	 strh r3,[r7,#4]
 404:../cleanflight/src/main/rx/rx.c ****     static int16_t rcSamples[MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT][PPM_AND_PWM_SAMPLE
 405:../cleanflight/src/main/rx/rx.c ****     static int16_t rcDataMean[MAX_SUPPORTED_RX_PARALLEL_PWM_OR_PPM_CHANNEL_COUNT];
 406:../cleanflight/src/main/rx/rx.c ****     static bool rxSamplesCollected = false;
 407:../cleanflight/src/main/rx/rx.c **** 
 408:../cleanflight/src/main/rx/rx.c ****     const uint8_t currentSampleIndex = rcSampleIndex % PPM_AND_PWM_SAMPLE_COUNT;
 1878              	 .loc 7 408 0
 1879 0010 2D4B     	 ldr r3,.L121
 1880 0012 1A78     	 ldrb r2,[r3]
 1881 0014 2D4B     	 ldr r3,.L121+4
 1882 0016 A3FB0213 	 umull r1,r3,r3,r2
 1883 001a 5908     	 lsrs r1,r3,#1
 1884 001c 0B46     	 mov r3,r1
 1885 001e 5B00     	 lsls r3,r3,#1
 1886 0020 0B44     	 add r3,r3,r1
 1887 0022 D31A     	 subs r3,r2,r3
 1888 0024 FB72     	 strb r3,[r7,#11]
 409:../cleanflight/src/main/rx/rx.c **** 
 410:../cleanflight/src/main/rx/rx.c ****     // update the recent samples and compute the average of them
 411:../cleanflight/src/main/rx/rx.c ****     rcSamples[chan][currentSampleIndex] = sample;
 1889              	 .loc 7 411 0
 1890 0026 FA79     	 ldrb r2,[r7,#7]
 1891 0028 F97A     	 ldrb r1,[r7,#11]
 1892 002a BC88     	 ldrh r4,[r7,#4]
 1893 002c 2848     	 ldr r0,.L121+8
 1894 002e 1346     	 mov r3,r2
 1895 0030 5B00     	 lsls r3,r3,#1
 1896 0032 1344     	 add r3,r3,r2
 1897 0034 0B44     	 add r3,r3,r1
 1898 0036 2246     	 mov r2,r4
 1899 0038 20F81320 	 strh r2,[r0,r3,lsl#1]
 412:../cleanflight/src/main/rx/rx.c **** 
 413:../cleanflight/src/main/rx/rx.c ****     // avoid returning an incorrect average which would otherwise occur before enough samples
 414:../cleanflight/src/main/rx/rx.c ****     if (!rxSamplesCollected) {
 1900              	 .loc 7 414 0
 1901 003c 254B     	 ldr r3,.L121+12
 1902 003e 1B78     	 ldrb r3,[r3]
 1903 0040 83F00103 	 eor r3,r3,#1
 1904 0044 DBB2     	 uxtb r3,r3
 1905 0046 002B     	 cmp r3,#0
 1906 0048 08D0     	 beq .L116
 415:../cleanflight/src/main/rx/rx.c ****         if (rcSampleIndex < PPM_AND_PWM_SAMPLE_COUNT) {
 1907              	 .loc 7 415 0
 1908 004a 1F4B     	 ldr r3,.L121
 1909 004c 1B78     	 ldrb r3,[r3]
 1910 004e 022B     	 cmp r3,#2
 1911 0050 01D8     	 bhi .L117
 416:../cleanflight/src/main/rx/rx.c ****             return sample;
 1912              	 .loc 7 416 0
 1913 0052 BB88     	 ldrh r3,[r7,#4]
 1914 0054 32E0     	 b .L118
 1915              	.L117:
 417:../cleanflight/src/main/rx/rx.c ****         }
 418:../cleanflight/src/main/rx/rx.c ****         rxSamplesCollected = true;
 1916              	 .loc 7 418 0
 1917 0056 1F4B     	 ldr r3,.L121+12
 1918 0058 0122     	 movs r2,#1
 1919 005a 1A70     	 strb r2,[r3]
 1920              	.L116:
 419:../cleanflight/src/main/rx/rx.c ****     }
 420:../cleanflight/src/main/rx/rx.c **** 
 421:../cleanflight/src/main/rx/rx.c ****     rcDataMean[chan] = 0;
 1921              	 .loc 7 421 0
 1922 005c FB79     	 ldrb r3,[r7,#7]
 1923 005e 1E4A     	 ldr r2,.L121+16
 1924 0060 0021     	 movs r1,#0
 1925 0062 22F81310 	 strh r1,[r2,r3,lsl#1]
 1926              	.LBB13:
 422:../cleanflight/src/main/rx/rx.c ****     for (int sampleIndex = 0; sampleIndex < PPM_AND_PWM_SAMPLE_COUNT; sampleIndex++) {
 1927              	 .loc 7 422 0
 1928 0066 0023     	 movs r3,#0
 1929 0068 FB60     	 str r3,[r7,#12]
 1930 006a 18E0     	 b .L119
 1931              	.L120:
 423:../cleanflight/src/main/rx/rx.c ****         rcDataMean[chan] += rcSamples[chan][sampleIndex];
 1932              	 .loc 7 423 0 discriminator 3
 1933 006c F979     	 ldrb r1,[r7,#7]
 1934 006e FB79     	 ldrb r3,[r7,#7]
 1935 0070 194A     	 ldr r2,.L121+16
 1936 0072 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 1937 0076 98B2     	 uxth r0,r3
 1938 0078 FA79     	 ldrb r2,[r7,#7]
 1939 007a 154C     	 ldr r4,.L121+8
 1940 007c 1346     	 mov r3,r2
 1941 007e 5B00     	 lsls r3,r3,#1
 1942 0080 1344     	 add r3,r3,r2
 1943 0082 FA68     	 ldr r2,[r7,#12]
 1944 0084 1344     	 add r3,r3,r2
 1945 0086 34F81330 	 ldrh r3,[r4,r3,lsl#1]
 1946 008a 9BB2     	 uxth r3,r3
 1947 008c 0344     	 add r3,r3,r0
 1948 008e 9BB2     	 uxth r3,r3
 1949 0090 9AB2     	 uxth r2,r3
 1950 0092 114B     	 ldr r3,.L121+16
 1951 0094 23F81120 	 strh r2,[r3,r1,lsl#1]
 422:../cleanflight/src/main/rx/rx.c ****     for (int sampleIndex = 0; sampleIndex < PPM_AND_PWM_SAMPLE_COUNT; sampleIndex++) {
 1952              	 .loc 7 422 0 discriminator 3
 1953 0098 FB68     	 ldr r3,[r7,#12]
 1954 009a 0133     	 adds r3,r3,#1
 1955 009c FB60     	 str r3,[r7,#12]
 1956              	.L119:
 422:../cleanflight/src/main/rx/rx.c ****     for (int sampleIndex = 0; sampleIndex < PPM_AND_PWM_SAMPLE_COUNT; sampleIndex++) {
 1957              	 .loc 7 422 0 is_stmt 0 discriminator 1
 1958 009e FB68     	 ldr r3,[r7,#12]
 1959 00a0 022B     	 cmp r3,#2
 1960 00a2 E3DD     	 ble .L120
 1961              	.LBE13:
 424:../cleanflight/src/main/rx/rx.c ****     }
 425:../cleanflight/src/main/rx/rx.c ****     return rcDataMean[chan] / PPM_AND_PWM_SAMPLE_COUNT;
 1962              	 .loc 7 425 0 is_stmt 1
 1963 00a4 FB79     	 ldrb r3,[r7,#7]
 1964 00a6 0C4A     	 ldr r2,.L121+16
 1965 00a8 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 1966 00ac 1BB2     	 sxth r3,r3
 1967 00ae 0B4A     	 ldr r2,.L121+20
 1968 00b0 82FB0312 	 smull r1,r2,r2,r3
 1969 00b4 DB17     	 asrs r3,r3,#31
 1970 00b6 D31A     	 subs r3,r2,r3
 1971 00b8 9BB2     	 uxth r3,r3
 1972 00ba 9BB2     	 uxth r3,r3
 1973              	.L118:
 426:../cleanflight/src/main/rx/rx.c **** }
 1974              	 .loc 7 426 0
 1975 00bc 1846     	 mov r0,r3
 1976 00be 1037     	 adds r7,r7,#16
 1977              	.LCFI110:
 1978              	 .cfi_def_cfa_offset 8
 1979 00c0 BD46     	 mov sp,r7
 1980              	.LCFI111:
 1981              	 .cfi_def_cfa_register 13
 1982              	 
 1983 00c2 90BC     	 pop {r4,r7}
 1984              	.LCFI112:
 1985              	 .cfi_restore 7
 1986              	 .cfi_restore 4
 1987              	 .cfi_def_cfa_offset 0
 1988 00c4 7047     	 bx lr
 1989              	.L122:
 1990 00c6 00BF     	 .align 2
 1991              	.L121:
 1992 00c8 00000000 	 .word rcSampleIndex
 1993 00cc ABAAAAAA 	 .word -1431655765
 1994 00d0 00000000 	 .word rcSamples.13601
 1995 00d4 00000000 	 .word rxSamplesCollected.13603
 1996 00d8 00000000 	 .word rcDataMean.13602
 1997 00dc 56555555 	 .word 1431655766
 1998              	 .cfi_endproc
 1999              	.LFE574:
 2001              	 .section .text.getRxfailValue,"ax",%progbits
 2002              	 .align 2
 2003              	 .thumb
 2004              	 .thumb_func
 2006              	getRxfailValue:
 2007              	.LFB575:
 427:../cleanflight/src/main/rx/rx.c **** 
 428:../cleanflight/src/main/rx/rx.c **** static uint16_t getRxfailValue(uint8_t channel)
 429:../cleanflight/src/main/rx/rx.c **** {
 2008              	 .loc 7 429 0
 2009              	 .cfi_startproc
 2010              	 
 2011              	 
 2012 0000 80B5     	 push {r7,lr}
 2013              	.LCFI113:
 2014              	 .cfi_def_cfa_offset 8
 2015              	 .cfi_offset 7,-8
 2016              	 .cfi_offset 14,-4
 2017 0002 84B0     	 sub sp,sp,#16
 2018              	.LCFI114:
 2019              	 .cfi_def_cfa_offset 24
 2020 0004 00AF     	 add r7,sp,#0
 2021              	.LCFI115:
 2022              	 .cfi_def_cfa_register 7
 2023 0006 0346     	 mov r3,r0
 2024 0008 FB71     	 strb r3,[r7,#7]
 430:../cleanflight/src/main/rx/rx.c ****     const rxFailsafeChannelConfig_t *channelFailsafeConfig = rxFailsafeChannelConfigs(channel);
 2025              	 .loc 7 430 0
 2026 000a FB79     	 ldrb r3,[r7,#7]
 2027 000c 1846     	 mov r0,r3
 2028 000e FFF7FEFF 	 bl rxFailsafeChannelConfigs
 2029 0012 F860     	 str r0,[r7,#12]
 431:../cleanflight/src/main/rx/rx.c **** 
 432:../cleanflight/src/main/rx/rx.c ****     switch (channelFailsafeConfig->mode) {
 2030              	 .loc 7 432 0
 2031 0014 FB68     	 ldr r3,[r7,#12]
 2032 0016 1B78     	 ldrb r3,[r3]
 2033 0018 002B     	 cmp r3,#0
 2034 001a 02D0     	 beq .L125
 2035 001c 022B     	 cmp r3,#2
 2036 001e 28D0     	 beq .L126
 2037 0020 21E0     	 b .L124
 2038              	.L125:
 433:../cleanflight/src/main/rx/rx.c ****     case RX_FAILSAFE_MODE_AUTO:
 434:../cleanflight/src/main/rx/rx.c ****         switch (channel) {
 2039              	 .loc 7 434 0
 2040 0022 FB79     	 ldrb r3,[r7,#7]
 2041 0024 002B     	 cmp r3,#0
 2042 0026 1EDB     	 blt .L124
 2043 0028 022B     	 cmp r3,#2
 2044 002a 02DD     	 ble .L127
 2045 002c 032B     	 cmp r3,#3
 2046 002e 06D0     	 beq .L128
 2047 0030 19E0     	 b .L124
 2048              	.L127:
 435:../cleanflight/src/main/rx/rx.c ****         case ROLL:
 436:../cleanflight/src/main/rx/rx.c ****         case PITCH:
 437:../cleanflight/src/main/rx/rx.c ****         case YAW:
 438:../cleanflight/src/main/rx/rx.c ****             return rxConfig()->midrc;
 2049              	 .loc 7 438 0
 2050 0032 FFF7FEFF 	 bl rxConfig
 2051 0036 0346     	 mov r3,r0
 2052 0038 5B8A     	 ldrh r3,[r3,#18]
 2053 003a 9BB2     	 uxth r3,r3
 2054 003c 28E0     	 b .L129
 2055              	.L128:
 439:../cleanflight/src/main/rx/rx.c ****         case THROTTLE:
 440:../cleanflight/src/main/rx/rx.c ****             if (feature(FEATURE_3D))
 2056              	 .loc 7 440 0
 2057 003e 4FF48050 	 mov r0,#4096
 2058 0042 FFF7FEFF 	 bl feature
 2059 0046 0346     	 mov r3,r0
 2060 0048 002B     	 cmp r3,#0
 2061 004a 05D0     	 beq .L130
 441:../cleanflight/src/main/rx/rx.c ****                 return rxConfig()->midrc;
 2062              	 .loc 7 441 0
 2063 004c FFF7FEFF 	 bl rxConfig
 2064 0050 0346     	 mov r3,r0
 2065 0052 5B8A     	 ldrh r3,[r3,#18]
 2066 0054 9BB2     	 uxth r3,r3
 2067 0056 1BE0     	 b .L129
 2068              	.L130:
 442:../cleanflight/src/main/rx/rx.c ****             else
 443:../cleanflight/src/main/rx/rx.c ****                 return rxConfig()->rx_min_usec;
 2069              	 .loc 7 443 0
 2070 0058 FFF7FEFF 	 bl rxConfig
 2071 005c 0346     	 mov r3,r0
 2072 005e B3F81D30 	 ldrh r3,[r3,#29]
 2073 0062 9BB2     	 uxth r3,r3
 2074 0064 14E0     	 b .L129
 2075              	.L124:
 444:../cleanflight/src/main/rx/rx.c ****         }
 445:../cleanflight/src/main/rx/rx.c ****         /* no break */
 446:../cleanflight/src/main/rx/rx.c **** 
 447:../cleanflight/src/main/rx/rx.c ****     default:
 448:../cleanflight/src/main/rx/rx.c ****     case RX_FAILSAFE_MODE_INVALID:
 449:../cleanflight/src/main/rx/rx.c ****     case RX_FAILSAFE_MODE_HOLD:
 450:../cleanflight/src/main/rx/rx.c ****         return rcData[channel];
 2076              	 .loc 7 450 0
 2077 0066 FB79     	 ldrb r3,[r7,#7]
 2078 0068 0B4A     	 ldr r2,.L131
 2079 006a 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2080 006e 9BB2     	 uxth r3,r3
 2081 0070 0EE0     	 b .L129
 2082              	.L126:
 451:../cleanflight/src/main/rx/rx.c **** 
 452:../cleanflight/src/main/rx/rx.c ****     case RX_FAILSAFE_MODE_SET:
 453:../cleanflight/src/main/rx/rx.c ****         return RXFAIL_STEP_TO_CHANNEL_VALUE(channelFailsafeConfig->step);
 2083              	 .loc 7 453 0
 2084 0072 FB68     	 ldr r3,[r7,#12]
 2085 0074 5B78     	 ldrb r3,[r3,#1]
 2086 0076 9BB2     	 uxth r3,r3
 2087 0078 1A46     	 mov r2,r3
 2088 007a 9200     	 lsls r2,r2,#2
 2089 007c 1344     	 add r3,r3,r2
 2090 007e 1A46     	 mov r2,r3
 2091 0080 9100     	 lsls r1,r2,#2
 2092 0082 1A46     	 mov r2,r3
 2093 0084 0B46     	 mov r3,r1
 2094 0086 1344     	 add r3,r3,r2
 2095 0088 9BB2     	 uxth r3,r3
 2096 008a 03F2EE23 	 addw r3,r3,#750
 2097 008e 9BB2     	 uxth r3,r3
 2098              	.L129:
 454:../cleanflight/src/main/rx/rx.c ****     }
 455:../cleanflight/src/main/rx/rx.c **** }
 2099              	 .loc 7 455 0
 2100 0090 1846     	 mov r0,r3
 2101 0092 1037     	 adds r7,r7,#16
 2102              	.LCFI116:
 2103              	 .cfi_def_cfa_offset 8
 2104 0094 BD46     	 mov sp,r7
 2105              	.LCFI117:
 2106              	 .cfi_def_cfa_register 13
 2107              	 
 2108 0096 80BD     	 pop {r7,pc}
 2109              	.L132:
 2110              	 .align 2
 2111              	.L131:
 2112 0098 00000000 	 .word rcData
 2113              	 .cfi_endproc
 2114              	.LFE575:
 2116              	 .section .text.applyRxChannelRangeConfiguraton,"ax",%progbits
 2117              	 .align 2
 2118              	 .thumb
 2119              	 .thumb_func
 2121              	applyRxChannelRangeConfiguraton:
 2122              	.LFB576:
 456:../cleanflight/src/main/rx/rx.c **** 
 457:../cleanflight/src/main/rx/rx.c **** STATIC_UNIT_TESTED uint16_t applyRxChannelRangeConfiguraton(int sample, const rxChannelRangeConfig_
 458:../cleanflight/src/main/rx/rx.c **** {
 2123              	 .loc 7 458 0
 2124              	 .cfi_startproc
 2125              	 
 2126              	 
 2127 0000 80B5     	 push {r7,lr}
 2128              	.LCFI118:
 2129              	 .cfi_def_cfa_offset 8
 2130              	 .cfi_offset 7,-8
 2131              	 .cfi_offset 14,-4
 2132 0002 84B0     	 sub sp,sp,#16
 2133              	.LCFI119:
 2134              	 .cfi_def_cfa_offset 24
 2135 0004 02AF     	 add r7,sp,#8
 2136              	.LCFI120:
 2137              	 .cfi_def_cfa 7,16
 2138 0006 7860     	 str r0,[r7,#4]
 2139 0008 3960     	 str r1,[r7]
 459:../cleanflight/src/main/rx/rx.c ****     // Avoid corruption of channel with a value of PPM_RCVR_TIMEOUT
 460:../cleanflight/src/main/rx/rx.c ****     if (sample == PPM_RCVR_TIMEOUT) {
 2140              	 .loc 7 460 0
 2141 000a 7B68     	 ldr r3,[r7,#4]
 2142 000c 002B     	 cmp r3,#0
 2143 000e 01D1     	 bne .L134
 461:../cleanflight/src/main/rx/rx.c ****         return PPM_RCVR_TIMEOUT;
 2144              	 .loc 7 461 0
 2145 0010 0023     	 movs r3,#0
 2146 0012 1AE0     	 b .L135
 2147              	.L134:
 462:../cleanflight/src/main/rx/rx.c ****     }
 463:../cleanflight/src/main/rx/rx.c **** 
 464:../cleanflight/src/main/rx/rx.c ****     sample = scaleRange(sample, range->min, range->max, PWM_RANGE_MIN, PWM_RANGE_MAX);
 2148              	 .loc 7 464 0
 2149 0014 3B68     	 ldr r3,[r7]
 2150 0016 1B88     	 ldrh r3,[r3]
 2151 0018 9BB2     	 uxth r3,r3
 2152 001a 1946     	 mov r1,r3
 2153 001c 3B68     	 ldr r3,[r7]
 2154 001e 5B88     	 ldrh r3,[r3,#2]
 2155 0020 9BB2     	 uxth r3,r3
 2156 0022 1A46     	 mov r2,r3
 2157 0024 4FF4FA63 	 mov r3,#2000
 2158 0028 0093     	 str r3,[sp]
 2159 002a 7868     	 ldr r0,[r7,#4]
 2160 002c 4FF47A73 	 mov r3,#1000
 2161 0030 FFF7FEFF 	 bl scaleRange
 2162 0034 7860     	 str r0,[r7,#4]
 465:../cleanflight/src/main/rx/rx.c ****     sample = constrain(sample, PWM_PULSE_MIN, PWM_PULSE_MAX);
 2163              	 .loc 7 465 0
 2164 0036 7868     	 ldr r0,[r7,#4]
 2165 0038 40F2EE21 	 movw r1,#750
 2166 003c 40F6CA02 	 movw r2,#2250
 2167 0040 FFF7FEFF 	 bl constrain
 2168 0044 7860     	 str r0,[r7,#4]
 466:../cleanflight/src/main/rx/rx.c **** 
 467:../cleanflight/src/main/rx/rx.c ****     return sample;
 2169              	 .loc 7 467 0
 2170 0046 7B68     	 ldr r3,[r7,#4]
 2171 0048 9BB2     	 uxth r3,r3
 2172              	.L135:
 468:../cleanflight/src/main/rx/rx.c **** }
 2173              	 .loc 7 468 0
 2174 004a 1846     	 mov r0,r3
 2175 004c 0837     	 adds r7,r7,#8
 2176              	.LCFI121:
 2177              	 .cfi_def_cfa_offset 8
 2178 004e BD46     	 mov sp,r7
 2179              	.LCFI122:
 2180              	 .cfi_def_cfa_register 13
 2181              	 
 2182 0050 80BD     	 pop {r7,pc}
 2183              	 .cfi_endproc
 2184              	.LFE576:
 2186 0052 00BF     	 .section .text.readRxChannelsApplyRanges,"ax",%progbits
 2187              	 .align 2
 2188              	 .thumb
 2189              	 .thumb_func
 2191              	readRxChannelsApplyRanges:
 2192              	.LFB577:
 469:../cleanflight/src/main/rx/rx.c **** 
 470:../cleanflight/src/main/rx/rx.c **** static void readRxChannelsApplyRanges(void)
 471:../cleanflight/src/main/rx/rx.c **** {
 2193              	 .loc 7 471 0
 2194              	 .cfi_startproc
 2195              	 
 2196              	 
 2197 0000 90B5     	 push {r4,r7,lr}
 2198              	.LCFI123:
 2199              	 .cfi_def_cfa_offset 12
 2200              	 .cfi_offset 4,-12
 2201              	 .cfi_offset 7,-8
 2202              	 .cfi_offset 14,-4
 2203 0002 83B0     	 sub sp,sp,#12
 2204              	.LCFI124:
 2205              	 .cfi_def_cfa_offset 24
 2206 0004 00AF     	 add r7,sp,#0
 2207              	.LCFI125:
 2208              	 .cfi_def_cfa_register 7
 2209              	.LBB14:
 472:../cleanflight/src/main/rx/rx.c ****     for (int channel = 0; channel < rxChannelCount; channel++) {
 2210              	 .loc 7 472 0
 2211 0006 0023     	 movs r3,#0
 2212 0008 7B60     	 str r3,[r7,#4]
 2213 000a 2BE0     	 b .L137
 2214              	.L141:
 2215              	.LBB15:
 473:../cleanflight/src/main/rx/rx.c **** 
 474:../cleanflight/src/main/rx/rx.c ****         const uint8_t rawChannel = channel < RX_MAPPABLE_CHANNEL_COUNT ? rxConfig()->rcmap[channel]
 2216              	 .loc 7 474 0
 2217 000c 7B68     	 ldr r3,[r7,#4]
 2218 000e 072B     	 cmp r3,#7
 2219 0010 06DC     	 bgt .L138
 2220              	 .loc 7 474 0 is_stmt 0 discriminator 1
 2221 0012 FFF7FEFF 	 bl rxConfig
 2222 0016 0246     	 mov r2,r0
 2223 0018 7B68     	 ldr r3,[r7,#4]
 2224 001a 1344     	 add r3,r3,r2
 2225 001c 1B78     	 ldrb r3,[r3]
 2226 001e 01E0     	 b .L139
 2227              	.L138:
 2228              	 .loc 7 474 0 discriminator 2
 2229 0020 7B68     	 ldr r3,[r7,#4]
 2230 0022 DBB2     	 uxtb r3,r3
 2231              	.L139:
 2232              	 .loc 7 474 0 discriminator 4
 2233 0024 7B70     	 strb r3,[r7,#1]
 475:../cleanflight/src/main/rx/rx.c **** 
 476:../cleanflight/src/main/rx/rx.c ****         // sample the channel
 477:../cleanflight/src/main/rx/rx.c ****         uint16_t sample = rxRuntimeConfig.rcReadRawFn(&rxRuntimeConfig, rawChannel);
 2234              	 .loc 7 477 0 is_stmt 1 discriminator 4
 2235 0026 144B     	 ldr r3,.L142
 2236 0028 D3F80330 	 ldr r3,[r3,#3]
 2237 002c 7A78     	 ldrb r2,[r7,#1]
 2238 002e 1248     	 ldr r0,.L142
 2239 0030 1146     	 mov r1,r2
 2240 0032 9847     	 blx r3
 2241 0034 0346     	 mov r3,r0
 2242 0036 7B80     	 strh r3,[r7,#2]
 478:../cleanflight/src/main/rx/rx.c **** 
 479:../cleanflight/src/main/rx/rx.c ****         // apply the rx calibration
 480:../cleanflight/src/main/rx/rx.c ****         if (channel < NON_AUX_CHANNEL_COUNT) {
 2243              	 .loc 7 480 0 discriminator 4
 2244 0038 7B68     	 ldr r3,[r7,#4]
 2245 003a 032B     	 cmp r3,#3
 2246 003c 0ADC     	 bgt .L140
 481:../cleanflight/src/main/rx/rx.c ****             sample = applyRxChannelRangeConfiguraton(sample, rxChannelRangeConfigs(channel));
 2247              	 .loc 7 481 0
 2248 003e 7C88     	 ldrh r4,[r7,#2]
 2249 0040 7868     	 ldr r0,[r7,#4]
 2250 0042 FFF7FEFF 	 bl rxChannelRangeConfigs
 2251 0046 0346     	 mov r3,r0
 2252 0048 2046     	 mov r0,r4
 2253 004a 1946     	 mov r1,r3
 2254 004c FFF7FEFF 	 bl applyRxChannelRangeConfiguraton
 2255 0050 0346     	 mov r3,r0
 2256 0052 7B80     	 strh r3,[r7,#2]
 2257              	.L140:
 482:../cleanflight/src/main/rx/rx.c ****         }
 483:../cleanflight/src/main/rx/rx.c **** 
 484:../cleanflight/src/main/rx/rx.c ****         rcRaw[channel] = sample;
 2258              	 .loc 7 484 0 discriminator 2
 2259 0054 7988     	 ldrh r1,[r7,#2]
 2260 0056 094A     	 ldr r2,.L142+4
 2261 0058 7B68     	 ldr r3,[r7,#4]
 2262 005a 22F81310 	 strh r1,[r2,r3,lsl#1]
 2263              	.LBE15:
 472:../cleanflight/src/main/rx/rx.c **** 
 2264              	 .loc 7 472 0 discriminator 2
 2265 005e 7B68     	 ldr r3,[r7,#4]
 2266 0060 0133     	 adds r3,r3,#1
 2267 0062 7B60     	 str r3,[r7,#4]
 2268              	.L137:
 472:../cleanflight/src/main/rx/rx.c **** 
 2269              	 .loc 7 472 0 is_stmt 0 discriminator 1
 2270 0064 064B     	 ldr r3,.L142+8
 2271 0066 1B78     	 ldrb r3,[r3]
 2272 0068 1A46     	 mov r2,r3
 2273 006a 7B68     	 ldr r3,[r7,#4]
 2274 006c 9A42     	 cmp r2,r3
 2275 006e CDDC     	 bgt .L141
 2276              	.LBE14:
 485:../cleanflight/src/main/rx/rx.c ****     }
 486:../cleanflight/src/main/rx/rx.c **** }
 2277              	 .loc 7 486 0 is_stmt 1
 2278 0070 0C37     	 adds r7,r7,#12
 2279              	.LCFI126:
 2280              	 .cfi_def_cfa_offset 12
 2281 0072 BD46     	 mov sp,r7
 2282              	.LCFI127:
 2283              	 .cfi_def_cfa_register 13
 2284              	 
 2285 0074 90BD     	 pop {r4,r7,pc}
 2286              	.L143:
 2287 0076 00BF     	 .align 2
 2288              	.L142:
 2289 0078 00000000 	 .word rxRuntimeConfig
 2290 007c 00000000 	 .word rcRaw
 2291 0080 00000000 	 .word rxChannelCount
 2292              	 .cfi_endproc
 2293              	.LFE577:
 2295              	 .section .text.detectAndApplySignalLossBehaviour,"ax",%progbits
 2296              	 .align 2
 2297              	 .thumb
 2298              	 .thumb_func
 2300              	detectAndApplySignalLossBehaviour:
 2301              	.LFB578:
 487:../cleanflight/src/main/rx/rx.c **** 
 488:../cleanflight/src/main/rx/rx.c **** static void detectAndApplySignalLossBehaviour(void)
 489:../cleanflight/src/main/rx/rx.c **** {
 2302              	 .loc 7 489 0
 2303              	 .cfi_startproc
 2304              	 
 2305              	 
 2306 0000 80B5     	 push {r7,lr}
 2307              	.LCFI128:
 2308              	 .cfi_def_cfa_offset 8
 2309              	 .cfi_offset 7,-8
 2310              	 .cfi_offset 14,-4
 2311 0002 86B0     	 sub sp,sp,#24
 2312              	.LCFI129:
 2313              	 .cfi_def_cfa_offset 32
 2314 0004 00AF     	 add r7,sp,#0
 2315              	.LCFI130:
 2316              	 .cfi_def_cfa_register 7
 490:../cleanflight/src/main/rx/rx.c ****     const uint32_t currentTimeMs = millis();
 2317              	 .loc 7 490 0
 2318 0006 FFF7FEFF 	 bl millis
 2319 000a B860     	 str r0,[r7,#8]
 491:../cleanflight/src/main/rx/rx.c **** 
 492:../cleanflight/src/main/rx/rx.c ****     const bool useValueFromRx = rxSignalReceived && !rxIsInFailsafeMode;
 2320              	 .loc 7 492 0
 2321 000c 5F4B     	 ldr r3,.L163
 2322 000e 1B78     	 ldrb r3,[r3]
 2323 0010 002B     	 cmp r3,#0
 2324 0012 08D0     	 beq .L145
 2325              	 .loc 7 492 0 is_stmt 0 discriminator 1
 2326 0014 5E4B     	 ldr r3,.L163+4
 2327 0016 1B78     	 ldrb r3,[r3]
 2328 0018 83F00103 	 eor r3,r3,#1
 2329 001c DBB2     	 uxtb r3,r3
 2330 001e 002B     	 cmp r3,#0
 2331 0020 01D0     	 beq .L145
 2332              	 .loc 7 492 0 discriminator 3
 2333 0022 0123     	 movs r3,#1
 2334 0024 00E0     	 b .L146
 2335              	.L145:
 2336              	 .loc 7 492 0 discriminator 4
 2337 0026 0023     	 movs r3,#0
 2338              	.L146:
 2339              	 .loc 7 492 0 discriminator 6
 2340 0028 FB71     	 strb r3,[r7,#7]
 2341 002a FB79     	 ldrb r3,[r7,#7]
 2342 002c 03F00103 	 and r3,r3,#1
 2343 0030 FB71     	 strb r3,[r7,#7]
 493:../cleanflight/src/main/rx/rx.c **** 
 494:../cleanflight/src/main/rx/rx.c ****     DEBUG_SET(DEBUG_RX_SIGNAL_LOSS, 0, rxSignalReceived);
 2344              	 .loc 7 494 0 is_stmt 1 discriminator 6
 2345 0032 584B     	 ldr r3,.L163+8
 2346 0034 1B78     	 ldrb r3,[r3]
 2347 0036 292B     	 cmp r3,#41
 2348 0038 04D1     	 bne .L147
 2349              	 .loc 7 494 0 is_stmt 0 discriminator 1
 2350 003a 544B     	 ldr r3,.L163
 2351 003c 1B78     	 ldrb r3,[r3]
 2352 003e 9AB2     	 uxth r2,r3
 2353 0040 554B     	 ldr r3,.L163+12
 2354 0042 1A80     	 strh r2,[r3]
 2355              	.L147:
 495:../cleanflight/src/main/rx/rx.c ****     DEBUG_SET(DEBUG_RX_SIGNAL_LOSS, 1, rxIsInFailsafeMode);
 2356              	 .loc 7 495 0 is_stmt 1
 2357 0044 534B     	 ldr r3,.L163+8
 2358 0046 1B78     	 ldrb r3,[r3]
 2359 0048 292B     	 cmp r3,#41
 2360 004a 04D1     	 bne .L148
 2361              	 .loc 7 495 0 is_stmt 0 discriminator 1
 2362 004c 504B     	 ldr r3,.L163+4
 2363 004e 1B78     	 ldrb r3,[r3]
 2364 0050 9AB2     	 uxth r2,r3
 2365 0052 514B     	 ldr r3,.L163+12
 2366 0054 5A80     	 strh r2,[r3,#2]
 2367              	.L148:
 496:../cleanflight/src/main/rx/rx.c **** 
 497:../cleanflight/src/main/rx/rx.c ****     rxFlightChannelsValid = true;
 2368              	 .loc 7 497 0 is_stmt 1
 2369 0056 514B     	 ldr r3,.L163+16
 2370 0058 0122     	 movs r2,#1
 2371 005a 1A70     	 strb r2,[r3]
 2372              	.LBB16:
 498:../cleanflight/src/main/rx/rx.c ****     for (int channel = 0; channel < rxChannelCount; channel++) {
 2373              	 .loc 7 498 0
 2374 005c 0023     	 movs r3,#0
 2375 005e 7B61     	 str r3,[r7,#20]
 2376 0060 57E0     	 b .L149
 2377              	.L157:
 2378              	.LBB17:
 499:../cleanflight/src/main/rx/rx.c ****         uint16_t sample = rcRaw[channel];
 2379              	 .loc 7 499 0
 2380 0062 4F4A     	 ldr r2,.L163+20
 2381 0064 7B69     	 ldr r3,[r7,#20]
 2382 0066 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 2383 006a 7B82     	 strh r3,[r7,#18]
 500:../cleanflight/src/main/rx/rx.c **** 
 501:../cleanflight/src/main/rx/rx.c ****         const bool validPulse = useValueFromRx && isPulseValid(sample);
 2384              	 .loc 7 501 0
 2385 006c FB79     	 ldrb r3,[r7,#7]
 2386 006e 002B     	 cmp r3,#0
 2387 0070 08D0     	 beq .L150
 2388              	 .loc 7 501 0 is_stmt 0 discriminator 1
 2389 0072 7B8A     	 ldrh r3,[r7,#18]
 2390 0074 1846     	 mov r0,r3
 2391 0076 FFF7FEFF 	 bl isPulseValid
 2392 007a 0346     	 mov r3,r0
 2393 007c 002B     	 cmp r3,#0
 2394 007e 01D0     	 beq .L150
 2395              	 .loc 7 501 0 discriminator 3
 2396 0080 0123     	 movs r3,#1
 2397 0082 00E0     	 b .L151
 2398              	.L150:
 2399              	 .loc 7 501 0 discriminator 4
 2400 0084 0023     	 movs r3,#0
 2401              	.L151:
 2402              	 .loc 7 501 0 discriminator 6
 2403 0086 BB71     	 strb r3,[r7,#6]
 2404 0088 BB79     	 ldrb r3,[r7,#6]
 2405 008a 03F00103 	 and r3,r3,#1
 2406 008e BB71     	 strb r3,[r7,#6]
 502:../cleanflight/src/main/rx/rx.c **** 
 503:../cleanflight/src/main/rx/rx.c ****         if (validPulse) {
 2407              	 .loc 7 503 0 is_stmt 1 discriminator 6
 2408 0090 BB79     	 ldrb r3,[r7,#6]
 2409 0092 002B     	 cmp r3,#0
 2410 0094 07D0     	 beq .L152
 504:../cleanflight/src/main/rx/rx.c ****             rcInvalidPulsPeriod[channel] = currentTimeMs + MAX_INVALID_PULS_TIME;
 2411              	 .loc 7 504 0
 2412 0096 BB68     	 ldr r3,[r7,#8]
 2413 0098 03F59672 	 add r2,r3,#300
 2414 009c 4149     	 ldr r1,.L163+24
 2415 009e 7B69     	 ldr r3,[r7,#20]
 2416 00a0 41F82320 	 str r2,[r1,r3,lsl#2]
 2417 00a4 18E0     	 b .L153
 2418              	.L152:
 505:../cleanflight/src/main/rx/rx.c ****         } else {
 506:../cleanflight/src/main/rx/rx.c ****             if (cmp32(currentTimeMs, rcInvalidPulsPeriod[channel]) < 0) {
 2419              	 .loc 7 506 0
 2420 00a6 3F4A     	 ldr r2,.L163+24
 2421 00a8 7B69     	 ldr r3,[r7,#20]
 2422 00aa 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2423 00ae B868     	 ldr r0,[r7,#8]
 2424 00b0 1946     	 mov r1,r3
 2425 00b2 FFF7FEFF 	 bl cmp32
 2426 00b6 0346     	 mov r3,r0
 2427 00b8 002B     	 cmp r3,#0
 2428 00ba 00DA     	 bge .L154
 507:../cleanflight/src/main/rx/rx.c ****                 continue;           // skip to next channel to hold channel value MAX_INVALID_PULS_
 2429              	 .loc 7 507 0
 2430 00bc 26E0     	 b .L155
 2431              	.L154:
 508:../cleanflight/src/main/rx/rx.c ****             } else {
 509:../cleanflight/src/main/rx/rx.c ****                 sample = getRxfailValue(channel);   // after that apply rxfail value
 2432              	 .loc 7 509 0
 2433 00be 7B69     	 ldr r3,[r7,#20]
 2434 00c0 DBB2     	 uxtb r3,r3
 2435 00c2 1846     	 mov r0,r3
 2436 00c4 FFF7FEFF 	 bl getRxfailValue
 2437 00c8 0346     	 mov r3,r0
 2438 00ca 7B82     	 strh r3,[r7,#18]
 510:../cleanflight/src/main/rx/rx.c ****                 if (channel < NON_AUX_CHANNEL_COUNT) {
 2439              	 .loc 7 510 0
 2440 00cc 7B69     	 ldr r3,[r7,#20]
 2441 00ce 032B     	 cmp r3,#3
 2442 00d0 02DC     	 bgt .L153
 511:../cleanflight/src/main/rx/rx.c ****                     rxFlightChannelsValid = false;
 2443              	 .loc 7 511 0
 2444 00d2 324B     	 ldr r3,.L163+16
 2445 00d4 0022     	 movs r2,#0
 2446 00d6 1A70     	 strb r2,[r3]
 2447              	.L153:
 512:../cleanflight/src/main/rx/rx.c ****                 }
 513:../cleanflight/src/main/rx/rx.c ****             }
 514:../cleanflight/src/main/rx/rx.c ****         }
 515:../cleanflight/src/main/rx/rx.c ****         if (feature(FEATURE_RX_PARALLEL_PWM | FEATURE_RX_PPM)) {
 2448              	 .loc 7 515 0
 2449 00d8 42F20100 	 movw r0,#8193
 2450 00dc FFF7FEFF 	 bl feature
 2451 00e0 0346     	 mov r3,r0
 2452 00e2 002B     	 cmp r3,#0
 2453 00e4 0DD0     	 beq .L156
 516:../cleanflight/src/main/rx/rx.c ****             // smooth output for PWM and PPM
 517:../cleanflight/src/main/rx/rx.c ****             rcData[channel] = calculateChannelMovingAverage(channel, sample);
 2454              	 .loc 7 517 0
 2455 00e6 7B69     	 ldr r3,[r7,#20]
 2456 00e8 DAB2     	 uxtb r2,r3
 2457 00ea 7B8A     	 ldrh r3,[r7,#18]
 2458 00ec 1046     	 mov r0,r2
 2459 00ee 1946     	 mov r1,r3
 2460 00f0 FFF7FEFF 	 bl calculateChannelMovingAverage
 2461 00f4 0346     	 mov r3,r0
 2462 00f6 99B2     	 uxth r1,r3
 2463 00f8 2B4A     	 ldr r2,.L163+28
 2464 00fa 7B69     	 ldr r3,[r7,#20]
 2465 00fc 22F81310 	 strh r1,[r2,r3,lsl#1]
 2466 0100 04E0     	 b .L155
 2467              	.L156:
 518:../cleanflight/src/main/rx/rx.c ****         } else {
 519:../cleanflight/src/main/rx/rx.c ****             rcData[channel] = sample;
 2468              	 .loc 7 519 0
 2469 0102 798A     	 ldrh r1,[r7,#18]
 2470 0104 284A     	 ldr r2,.L163+28
 2471 0106 7B69     	 ldr r3,[r7,#20]
 2472 0108 22F81310 	 strh r1,[r2,r3,lsl#1]
 2473              	.L155:
 2474              	.LBE17:
 498:../cleanflight/src/main/rx/rx.c ****         uint16_t sample = rcRaw[channel];
 2475              	 .loc 7 498 0 discriminator 2
 2476 010c 7B69     	 ldr r3,[r7,#20]
 2477 010e 0133     	 adds r3,r3,#1
 2478 0110 7B61     	 str r3,[r7,#20]
 2479              	.L149:
 498:../cleanflight/src/main/rx/rx.c ****         uint16_t sample = rcRaw[channel];
 2480              	 .loc 7 498 0 is_stmt 0 discriminator 1
 2481 0112 264B     	 ldr r3,.L163+32
 2482 0114 1B78     	 ldrb r3,[r3]
 2483 0116 1A46     	 mov r2,r3
 2484 0118 7B69     	 ldr r3,[r7,#20]
 2485 011a 9A42     	 cmp r2,r3
 2486 011c A1DC     	 bgt .L157
 2487              	.LBE16:
 520:../cleanflight/src/main/rx/rx.c ****         }
 521:../cleanflight/src/main/rx/rx.c ****     }
 522:../cleanflight/src/main/rx/rx.c **** 
 523:../cleanflight/src/main/rx/rx.c ****     if (rxFlightChannelsValid && !IS_RC_MODE_ACTIVE(BOXFAILSAFE)) {
 2488              	 .loc 7 523 0 is_stmt 1
 2489 011e 1F4B     	 ldr r3,.L163+16
 2490 0120 1B78     	 ldrb r3,[r3]
 2491 0122 002B     	 cmp r3,#0
 2492 0124 0BD0     	 beq .L158
 2493              	 .loc 7 523 0 is_stmt 0 discriminator 1
 2494 0126 0920     	 movs r0,#9
 2495 0128 FFF7FEFF 	 bl IS_RC_MODE_ACTIVE
 2496 012c 0346     	 mov r3,r0
 2497 012e 83F00103 	 eor r3,r3,#1
 2498 0132 DBB2     	 uxtb r3,r3
 2499 0134 002B     	 cmp r3,#0
 2500 0136 02D0     	 beq .L158
 524:../cleanflight/src/main/rx/rx.c ****         failsafeOnValidDataReceived();
 2501              	 .loc 7 524 0 is_stmt 1
 2502 0138 FFF7FEFF 	 bl failsafeOnValidDataReceived
 2503 013c 1BE0     	 b .L159
 2504              	.L158:
 525:../cleanflight/src/main/rx/rx.c ****     } else {
 526:../cleanflight/src/main/rx/rx.c ****         rxIsInFailsafeMode = true;
 2505              	 .loc 7 526 0
 2506 013e 144B     	 ldr r3,.L163+4
 2507 0140 0122     	 movs r2,#1
 2508 0142 1A70     	 strb r2,[r3]
 527:../cleanflight/src/main/rx/rx.c ****         failsafeOnValidDataFailed();
 2509              	 .loc 7 527 0
 2510 0144 FFF7FEFF 	 bl failsafeOnValidDataFailed
 2511              	.LBB18:
 528:../cleanflight/src/main/rx/rx.c ****         for (int channel = 0; channel < rxChannelCount; channel++) {
 2512              	 .loc 7 528 0
 2513 0148 0023     	 movs r3,#0
 2514 014a FB60     	 str r3,[r7,#12]
 2515 014c 0DE0     	 b .L160
 2516              	.L161:
 529:../cleanflight/src/main/rx/rx.c ****             rcData[channel] = getRxfailValue(channel);
 2517              	 .loc 7 529 0 discriminator 3
 2518 014e FB68     	 ldr r3,[r7,#12]
 2519 0150 DBB2     	 uxtb r3,r3
 2520 0152 1846     	 mov r0,r3
 2521 0154 FFF7FEFF 	 bl getRxfailValue
 2522 0158 0346     	 mov r3,r0
 2523 015a 99B2     	 uxth r1,r3
 2524 015c 124A     	 ldr r2,.L163+28
 2525 015e FB68     	 ldr r3,[r7,#12]
 2526 0160 22F81310 	 strh r1,[r2,r3,lsl#1]
 528:../cleanflight/src/main/rx/rx.c ****         for (int channel = 0; channel < rxChannelCount; channel++) {
 2527              	 .loc 7 528 0 discriminator 3
 2528 0164 FB68     	 ldr r3,[r7,#12]
 2529 0166 0133     	 adds r3,r3,#1
 2530 0168 FB60     	 str r3,[r7,#12]
 2531              	.L160:
 528:../cleanflight/src/main/rx/rx.c ****         for (int channel = 0; channel < rxChannelCount; channel++) {
 2532              	 .loc 7 528 0 is_stmt 0 discriminator 1
 2533 016a 104B     	 ldr r3,.L163+32
 2534 016c 1B78     	 ldrb r3,[r3]
 2535 016e 1A46     	 mov r2,r3
 2536 0170 FB68     	 ldr r3,[r7,#12]
 2537 0172 9A42     	 cmp r2,r3
 2538 0174 EBDC     	 bgt .L161
 2539              	.L159:
 2540              	.LBE18:
 530:../cleanflight/src/main/rx/rx.c ****         }
 531:../cleanflight/src/main/rx/rx.c ****     }
 532:../cleanflight/src/main/rx/rx.c ****     DEBUG_SET(DEBUG_RX_SIGNAL_LOSS, 3, rcData[THROTTLE]);
 2541              	 .loc 7 532 0 is_stmt 1
 2542 0176 074B     	 ldr r3,.L163+8
 2543 0178 1B78     	 ldrb r3,[r3]
 2544 017a 292B     	 cmp r3,#41
 2545 017c 03D1     	 bne .L144
 2546              	 .loc 7 532 0 is_stmt 0 discriminator 1
 2547 017e 0A4B     	 ldr r3,.L163+28
 2548 0180 DA88     	 ldrh r2,[r3,#6]
 2549 0182 054B     	 ldr r3,.L163+12
 2550 0184 DA80     	 strh r2,[r3,#6]
 2551              	.L144:
 533:../cleanflight/src/main/rx/rx.c **** }
 2552              	 .loc 7 533 0 is_stmt 1
 2553 0186 1837     	 adds r7,r7,#24
 2554              	.LCFI131:
 2555              	 .cfi_def_cfa_offset 8
 2556 0188 BD46     	 mov sp,r7
 2557              	.LCFI132:
 2558              	 .cfi_def_cfa_register 13
 2559              	 
 2560 018a 80BD     	 pop {r7,pc}
 2561              	.L164:
 2562              	 .align 2
 2563              	.L163:
 2564 018c 00000000 	 .word rxSignalReceived
 2565 0190 00000000 	 .word rxIsInFailsafeMode
 2566 0194 00000000 	 .word debugMode
 2567 0198 00000000 	 .word debug
 2568 019c 00000000 	 .word rxFlightChannelsValid
 2569 01a0 00000000 	 .word rcRaw
 2570 01a4 00000000 	 .word rcInvalidPulsPeriod
 2571 01a8 00000000 	 .word rcData
 2572 01ac 00000000 	 .word rxChannelCount
 2573              	 .cfi_endproc
 2574              	.LFE578:
 2576              	 .section .text.calculateRxChannelsAndUpdateFailsafe,"ax",%progbits
 2577              	 .align 2
 2578              	 .global calculateRxChannelsAndUpdateFailsafe
 2579              	 .thumb
 2580              	 .thumb_func
 2582              	calculateRxChannelsAndUpdateFailsafe:
 2583              	.LFB579:
 534:../cleanflight/src/main/rx/rx.c **** 
 535:../cleanflight/src/main/rx/rx.c **** bool calculateRxChannelsAndUpdateFailsafe(timeUs_t currentTimeUs)
 536:../cleanflight/src/main/rx/rx.c **** {
 2584              	 .loc 7 536 0
 2585              	 .cfi_startproc
 2586              	 
 2587              	 
 2588 0000 80B5     	 push {r7,lr}
 2589              	.LCFI133:
 2590              	 .cfi_def_cfa_offset 8
 2591              	 .cfi_offset 7,-8
 2592              	 .cfi_offset 14,-4
 2593 0002 82B0     	 sub sp,sp,#8
 2594              	.LCFI134:
 2595              	 .cfi_def_cfa_offset 16
 2596 0004 00AF     	 add r7,sp,#0
 2597              	.LCFI135:
 2598              	 .cfi_def_cfa_register 7
 2599 0006 7860     	 str r0,[r7,#4]
 537:../cleanflight/src/main/rx/rx.c ****     if (auxiliaryProcessingRequired) {
 2600              	 .loc 7 537 0
 2601 0008 244B     	 ldr r3,.L171
 2602 000a 1B78     	 ldrb r3,[r3]
 2603 000c 002B     	 cmp r3,#0
 2604 000e 12D0     	 beq .L166
 538:../cleanflight/src/main/rx/rx.c ****         auxiliaryProcessingRequired = !rxRuntimeConfig.rcProcessFrameFn(&rxRuntimeConfig);
 2605              	 .loc 7 538 0
 2606 0010 234B     	 ldr r3,.L171+4
 2607 0012 D3F80B30 	 ldr r3,[r3,#11]
 2608 0016 2248     	 ldr r0,.L171+4
 2609 0018 9847     	 blx r3
 2610 001a 0346     	 mov r3,r0
 2611 001c 002B     	 cmp r3,#0
 2612 001e 14BF     	 ite ne
 2613 0020 0123     	 movne r3,#1
 2614 0022 0023     	 moveq r3,#0
 2615 0024 DBB2     	 uxtb r3,r3
 2616 0026 83F00103 	 eor r3,r3,#1
 2617 002a DBB2     	 uxtb r3,r3
 2618 002c 03F00103 	 and r3,r3,#1
 2619 0030 DAB2     	 uxtb r2,r3
 2620 0032 1A4B     	 ldr r3,.L171
 2621 0034 1A70     	 strb r2,[r3]
 2622              	.L166:
 539:../cleanflight/src/main/rx/rx.c ****     }
 540:../cleanflight/src/main/rx/rx.c **** 
 541:../cleanflight/src/main/rx/rx.c ****     if (!rxDataProcessingRequired) {
 2623              	 .loc 7 541 0
 2624 0036 1B4B     	 ldr r3,.L171+8
 2625 0038 1B78     	 ldrb r3,[r3]
 2626 003a 83F00103 	 eor r3,r3,#1
 2627 003e DBB2     	 uxtb r3,r3
 2628 0040 002B     	 cmp r3,#0
 2629 0042 01D0     	 beq .L167
 542:../cleanflight/src/main/rx/rx.c ****         return false;
 2630              	 .loc 7 542 0
 2631 0044 0023     	 movs r3,#0
 2632 0046 24E0     	 b .L168
 2633              	.L167:
 543:../cleanflight/src/main/rx/rx.c ****     }
 544:../cleanflight/src/main/rx/rx.c **** 
 545:../cleanflight/src/main/rx/rx.c ****     rxDataProcessingRequired = false;
 2634              	 .loc 7 545 0
 2635 0048 164B     	 ldr r3,.L171+8
 2636 004a 0022     	 movs r2,#0
 2637 004c 1A70     	 strb r2,[r3]
 546:../cleanflight/src/main/rx/rx.c ****     rxNextUpdateAtUs = currentTimeUs + DELAY_33_HZ;
 2638              	 .loc 7 546 0
 2639 004e 7B68     	 ldr r3,[r7,#4]
 2640 0050 03F5EC43 	 add r3,r3,#30208
 2641 0054 5F33     	 adds r3,r3,#95
 2642 0056 144A     	 ldr r2,.L171+12
 2643 0058 1360     	 str r3,[r2]
 547:../cleanflight/src/main/rx/rx.c **** 
 548:../cleanflight/src/main/rx/rx.c ****     // only proceed when no more samples to skip and suspend period is over
 549:../cleanflight/src/main/rx/rx.c ****     if (skipRxSamples) {
 2644              	 .loc 7 549 0
 2645 005a 144B     	 ldr r3,.L171+16
 2646 005c 1B78     	 ldrb r3,[r3]
 2647 005e 002B     	 cmp r3,#0
 2648 0060 0CD0     	 beq .L169
 550:../cleanflight/src/main/rx/rx.c ****         if (currentTimeUs > suspendRxSignalUntil) {
 2649              	 .loc 7 550 0
 2650 0062 134B     	 ldr r3,.L171+20
 2651 0064 1B68     	 ldr r3,[r3]
 2652 0066 7A68     	 ldr r2,[r7,#4]
 2653 0068 9A42     	 cmp r2,r3
 2654 006a 05D9     	 bls .L170
 551:../cleanflight/src/main/rx/rx.c ****             skipRxSamples--;
 2655              	 .loc 7 551 0
 2656 006c 0F4B     	 ldr r3,.L171+16
 2657 006e 1B78     	 ldrb r3,[r3]
 2658 0070 013B     	 subs r3,r3,#1
 2659 0072 DAB2     	 uxtb r2,r3
 2660 0074 0D4B     	 ldr r3,.L171+16
 2661 0076 1A70     	 strb r2,[r3]
 2662              	.L170:
 552:../cleanflight/src/main/rx/rx.c ****         }
 553:../cleanflight/src/main/rx/rx.c **** 
 554:../cleanflight/src/main/rx/rx.c ****         return true;
 2663              	 .loc 7 554 0
 2664 0078 0123     	 movs r3,#1
 2665 007a 0AE0     	 b .L168
 2666              	.L169:
 555:../cleanflight/src/main/rx/rx.c ****     }
 556:../cleanflight/src/main/rx/rx.c **** 
 557:../cleanflight/src/main/rx/rx.c ****     readRxChannelsApplyRanges();
 2667              	 .loc 7 557 0
 2668 007c FFF7FEFF 	 bl readRxChannelsApplyRanges
 558:../cleanflight/src/main/rx/rx.c ****     detectAndApplySignalLossBehaviour();
 2669              	 .loc 7 558 0
 2670 0080 FFF7FEFF 	 bl detectAndApplySignalLossBehaviour
 559:../cleanflight/src/main/rx/rx.c **** 
 560:../cleanflight/src/main/rx/rx.c ****     rcSampleIndex++;
 2671              	 .loc 7 560 0
 2672 0084 0B4B     	 ldr r3,.L171+24
 2673 0086 1B78     	 ldrb r3,[r3]
 2674 0088 0133     	 adds r3,r3,#1
 2675 008a DAB2     	 uxtb r2,r3
 2676 008c 094B     	 ldr r3,.L171+24
 2677 008e 1A70     	 strb r2,[r3]
 561:../cleanflight/src/main/rx/rx.c **** 
 562:../cleanflight/src/main/rx/rx.c ****     return true;
 2678              	 .loc 7 562 0
 2679 0090 0123     	 movs r3,#1
 2680              	.L168:
 563:../cleanflight/src/main/rx/rx.c **** }
 2681              	 .loc 7 563 0
 2682 0092 1846     	 mov r0,r3
 2683 0094 0837     	 adds r7,r7,#8
 2684              	.LCFI136:
 2685              	 .cfi_def_cfa_offset 8
 2686 0096 BD46     	 mov sp,r7
 2687              	.LCFI137:
 2688              	 .cfi_def_cfa_register 13
 2689              	 
 2690 0098 80BD     	 pop {r7,pc}
 2691              	.L172:
 2692 009a 00BF     	 .align 2
 2693              	.L171:
 2694 009c 00000000 	 .word auxiliaryProcessingRequired
 2695 00a0 00000000 	 .word rxRuntimeConfig
 2696 00a4 00000000 	 .word rxDataProcessingRequired
 2697 00a8 00000000 	 .word rxNextUpdateAtUs
 2698 00ac 00000000 	 .word skipRxSamples
 2699 00b0 00000000 	 .word suspendRxSignalUntil
 2700 00b4 00000000 	 .word rcSampleIndex
 2701              	 .cfi_endproc
 2702              	.LFE579:
 2704              	 .section .text.parseRcChannels,"ax",%progbits
 2705              	 .align 2
 2706              	 .global parseRcChannels
 2707              	 .thumb
 2708              	 .thumb_func
 2710              	parseRcChannels:
 2711              	.LFB580:
 564:../cleanflight/src/main/rx/rx.c **** 
 565:../cleanflight/src/main/rx/rx.c **** void parseRcChannels(const char *input, rxConfig_t *rxConfig)
 566:../cleanflight/src/main/rx/rx.c **** {
 2712              	 .loc 7 566 0
 2713              	 .cfi_startproc
 2714              	 
 2715              	 
 2716 0000 80B5     	 push {r7,lr}
 2717              	.LCFI138:
 2718              	 .cfi_def_cfa_offset 8
 2719              	 .cfi_offset 7,-8
 2720              	 .cfi_offset 14,-4
 2721 0002 84B0     	 sub sp,sp,#16
 2722              	.LCFI139:
 2723              	 .cfi_def_cfa_offset 24
 2724 0004 00AF     	 add r7,sp,#0
 2725              	.LCFI140:
 2726              	 .cfi_def_cfa_register 7
 2727 0006 7860     	 str r0,[r7,#4]
 2728 0008 3960     	 str r1,[r7]
 2729              	.LBB19:
 567:../cleanflight/src/main/rx/rx.c ****     for (const char *c = input; *c; c++) {
 2730              	 .loc 7 567 0
 2731 000a 7B68     	 ldr r3,[r7,#4]
 2732 000c FB60     	 str r3,[r7,#12]
 2733 000e 19E0     	 b .L174
 2734              	.L176:
 2735              	.LBB20:
 568:../cleanflight/src/main/rx/rx.c ****         const char *s = strchr(rcChannelLetters, *c);
 2736              	 .loc 7 568 0
 2737 0010 FB68     	 ldr r3,[r7,#12]
 2738 0012 1B78     	 ldrb r3,[r3]
 2739 0014 0F48     	 ldr r0,.L177
 2740 0016 1946     	 mov r1,r3
 2741 0018 FFF7FEFF 	 bl strchr
 2742 001c B860     	 str r0,[r7,#8]
 569:../cleanflight/src/main/rx/rx.c ****         if (s && (s < rcChannelLetters + RX_MAPPABLE_CHANNEL_COUNT)) {
 2743              	 .loc 7 569 0
 2744 001e BB68     	 ldr r3,[r7,#8]
 2745 0020 002B     	 cmp r3,#0
 2746 0022 0CD0     	 beq .L175
 2747              	 .loc 7 569 0 is_stmt 0 discriminator 1
 2748 0024 BB68     	 ldr r3,[r7,#8]
 2749 0026 0C4A     	 ldr r2,.L177+4
 2750 0028 9342     	 cmp r3,r2
 2751 002a 08D2     	 bcs .L175
 570:../cleanflight/src/main/rx/rx.c ****             rxConfig->rcmap[s - rcChannelLetters] = c - input;
 2752              	 .loc 7 570 0 is_stmt 1
 2753 002c BB68     	 ldr r3,[r7,#8]
 2754 002e 094A     	 ldr r2,.L177
 2755 0030 9B1A     	 subs r3,r3,r2
 2756 0032 F968     	 ldr r1,[r7,#12]
 2757 0034 7A68     	 ldr r2,[r7,#4]
 2758 0036 8A1A     	 subs r2,r1,r2
 2759 0038 D1B2     	 uxtb r1,r2
 2760 003a 3A68     	 ldr r2,[r7]
 2761 003c D154     	 strb r1,[r2,r3]
 2762              	.L175:
 2763              	.LBE20:
 567:../cleanflight/src/main/rx/rx.c ****         const char *s = strchr(rcChannelLetters, *c);
 2764              	 .loc 7 567 0 discriminator 2
 2765 003e FB68     	 ldr r3,[r7,#12]
 2766 0040 0133     	 adds r3,r3,#1
 2767 0042 FB60     	 str r3,[r7,#12]
 2768              	.L174:
 567:../cleanflight/src/main/rx/rx.c ****         const char *s = strchr(rcChannelLetters, *c);
 2769              	 .loc 7 567 0 is_stmt 0 discriminator 1
 2770 0044 FB68     	 ldr r3,[r7,#12]
 2771 0046 1B78     	 ldrb r3,[r3]
 2772 0048 002B     	 cmp r3,#0
 2773 004a E1D1     	 bne .L176
 2774              	.LBE19:
 571:../cleanflight/src/main/rx/rx.c ****         }
 572:../cleanflight/src/main/rx/rx.c ****     }
 573:../cleanflight/src/main/rx/rx.c **** }
 2775              	 .loc 7 573 0 is_stmt 1
 2776 004c 1037     	 adds r7,r7,#16
 2777              	.LCFI141:
 2778              	 .cfi_def_cfa_offset 8
 2779 004e BD46     	 mov sp,r7
 2780              	.LCFI142:
 2781              	 .cfi_def_cfa_register 13
 2782              	 
 2783 0050 80BD     	 pop {r7,pc}
 2784              	.L178:
 2785 0052 00BF     	 .align 2
 2786              	.L177:
 2787 0054 00000000 	 .word rcChannelLetters
 2788 0058 08000000 	 .word rcChannelLetters+8
 2789              	 .cfi_endproc
 2790              	.LFE580:
 2792              	 .section .text.setRssiDirect,"ax",%progbits
 2793              	 .align 2
 2794              	 .global setRssiDirect
 2795              	 .thumb
 2796              	 .thumb_func
 2798              	setRssiDirect:
 2799              	.LFB581:
 574:../cleanflight/src/main/rx/rx.c **** 
 575:../cleanflight/src/main/rx/rx.c **** void setRssiDirect(uint16_t newRssi, rssiSource_e source)
 576:../cleanflight/src/main/rx/rx.c **** {
 2800              	 .loc 7 576 0
 2801              	 .cfi_startproc
 2802              	 
 2803              	 
 2804              	 
 2805 0000 80B4     	 push {r7}
 2806              	.LCFI143:
 2807              	 .cfi_def_cfa_offset 4
 2808              	 .cfi_offset 7,-4
 2809 0002 83B0     	 sub sp,sp,#12
 2810              	.LCFI144:
 2811              	 .cfi_def_cfa_offset 16
 2812 0004 00AF     	 add r7,sp,#0
 2813              	.LCFI145:
 2814              	 .cfi_def_cfa_register 7
 2815 0006 0346     	 mov r3,r0
 2816 0008 0A46     	 mov r2,r1
 2817 000a FB80     	 strh r3,[r7,#6]
 2818 000c 1346     	 mov r3,r2
 2819 000e 7B71     	 strb r3,[r7,#5]
 577:../cleanflight/src/main/rx/rx.c ****     if (source != rssiSource) {
 2820              	 .loc 7 577 0
 2821 0010 064B     	 ldr r3,.L182
 2822 0012 1B78     	 ldrb r3,[r3]
 2823 0014 7A79     	 ldrb r2,[r7,#5]
 2824 0016 9A42     	 cmp r2,r3
 2825 0018 00D0     	 beq .L180
 578:../cleanflight/src/main/rx/rx.c ****         return;
 2826              	 .loc 7 578 0
 2827 001a 02E0     	 b .L179
 2828              	.L180:
 579:../cleanflight/src/main/rx/rx.c ****     }
 580:../cleanflight/src/main/rx/rx.c **** 
 581:../cleanflight/src/main/rx/rx.c ****     rssi = newRssi;
 2829              	 .loc 7 581 0
 2830 001c 044A     	 ldr r2,.L182+4
 2831 001e FB88     	 ldrh r3,[r7,#6]
 2832 0020 1380     	 strh r3,[r2]
 2833              	.L179:
 582:../cleanflight/src/main/rx/rx.c **** }
 2834              	 .loc 7 582 0
 2835 0022 0C37     	 adds r7,r7,#12
 2836              	.LCFI146:
 2837              	 .cfi_def_cfa_offset 4
 2838 0024 BD46     	 mov sp,r7
 2839              	.LCFI147:
 2840              	 .cfi_def_cfa_register 13
 2841              	 
 2842 0026 5DF8047B 	 ldr r7,[sp],#4
 2843              	.LCFI148:
 2844              	 .cfi_restore 7
 2845              	 .cfi_def_cfa_offset 0
 2846 002a 7047     	 bx lr
 2847              	.L183:
 2848              	 .align 2
 2849              	.L182:
 2850 002c 00000000 	 .word rssiSource
 2851 0030 00000000 	 .word rssi
 2852              	 .cfi_endproc
 2853              	.LFE581:
 2855              	 .section .text.setRssi,"ax",%progbits
 2856              	 .align 2
 2857              	 .global setRssi
 2858              	 .thumb
 2859              	 .thumb_func
 2861              	setRssi:
 2862              	.LFB582:
 583:../cleanflight/src/main/rx/rx.c **** 
 584:../cleanflight/src/main/rx/rx.c **** #define RSSI_SAMPLE_COUNT 16
 585:../cleanflight/src/main/rx/rx.c **** 
 586:../cleanflight/src/main/rx/rx.c **** void setRssi(uint16_t rssiValue, rssiSource_e source)
 587:../cleanflight/src/main/rx/rx.c **** {
 2863              	 .loc 7 587 0
 2864              	 .cfi_startproc
 2865              	 
 2866              	 
 2867              	 
 2868 0000 80B4     	 push {r7}
 2869              	.LCFI149:
 2870              	 .cfi_def_cfa_offset 4
 2871              	 .cfi_offset 7,-4
 2872 0002 85B0     	 sub sp,sp,#20
 2873              	.LCFI150:
 2874              	 .cfi_def_cfa_offset 24
 2875 0004 00AF     	 add r7,sp,#0
 2876              	.LCFI151:
 2877              	 .cfi_def_cfa_register 7
 2878 0006 0346     	 mov r3,r0
 2879 0008 0A46     	 mov r2,r1
 2880 000a FB80     	 strh r3,[r7,#6]
 2881 000c 1346     	 mov r3,r2
 2882 000e 7B71     	 strb r3,[r7,#5]
 588:../cleanflight/src/main/rx/rx.c ****     if (source != rssiSource) {
 2883              	 .loc 7 588 0
 2884 0010 1B4B     	 ldr r3,.L188
 2885 0012 1B78     	 ldrb r3,[r3]
 2886 0014 7A79     	 ldrb r2,[r7,#5]
 2887 0016 9A42     	 cmp r2,r3
 2888 0018 00D0     	 beq .L185
 589:../cleanflight/src/main/rx/rx.c ****         return;
 2889              	 .loc 7 589 0
 2890 001a 2CE0     	 b .L184
 2891              	.L185:
 590:../cleanflight/src/main/rx/rx.c ****     }
 591:../cleanflight/src/main/rx/rx.c **** 
 592:../cleanflight/src/main/rx/rx.c ****     static uint16_t rssiSamples[RSSI_SAMPLE_COUNT];
 593:../cleanflight/src/main/rx/rx.c ****     static uint8_t rssiSampleIndex = 0;
 594:../cleanflight/src/main/rx/rx.c ****     static unsigned sum = 0;
 595:../cleanflight/src/main/rx/rx.c **** 
 596:../cleanflight/src/main/rx/rx.c ****     sum = sum + rssiValue;
 2892              	 .loc 7 596 0
 2893 001c FA88     	 ldrh r2,[r7,#6]
 2894 001e 194B     	 ldr r3,.L188+4
 2895 0020 1B68     	 ldr r3,[r3]
 2896 0022 1344     	 add r3,r3,r2
 2897 0024 174A     	 ldr r2,.L188+4
 2898 0026 1360     	 str r3,[r2]
 597:../cleanflight/src/main/rx/rx.c ****     sum = sum - rssiSamples[rssiSampleIndex];
 2899              	 .loc 7 597 0
 2900 0028 164B     	 ldr r3,.L188+4
 2901 002a 1B68     	 ldr r3,[r3]
 2902 002c 164A     	 ldr r2,.L188+8
 2903 002e 1278     	 ldrb r2,[r2]
 2904 0030 1146     	 mov r1,r2
 2905 0032 164A     	 ldr r2,.L188+12
 2906 0034 32F81120 	 ldrh r2,[r2,r1,lsl#1]
 2907 0038 9B1A     	 subs r3,r3,r2
 2908 003a 124A     	 ldr r2,.L188+4
 2909 003c 1360     	 str r3,[r2]
 598:../cleanflight/src/main/rx/rx.c ****     rssiSamples[rssiSampleIndex] = rssiValue;
 2910              	 .loc 7 598 0
 2911 003e 124B     	 ldr r3,.L188+8
 2912 0040 1B78     	 ldrb r3,[r3]
 2913 0042 1946     	 mov r1,r3
 2914 0044 114A     	 ldr r2,.L188+12
 2915 0046 FB88     	 ldrh r3,[r7,#6]
 2916 0048 22F81130 	 strh r3,[r2,r1,lsl#1]
 599:../cleanflight/src/main/rx/rx.c ****     rssiSampleIndex = (rssiSampleIndex + 1) % RSSI_SAMPLE_COUNT;
 2917              	 .loc 7 599 0
 2918 004c 0E4B     	 ldr r3,.L188+8
 2919 004e 1B78     	 ldrb r3,[r3]
 2920 0050 5A1C     	 adds r2,r3,#1
 2921 0052 0F4B     	 ldr r3,.L188+16
 2922 0054 1340     	 ands r3,r3,r2
 2923 0056 002B     	 cmp r3,#0
 2924 0058 03DA     	 bge .L187
 2925 005a 013B     	 subs r3,r3,#1
 2926 005c 63F00F03 	 orn r3,r3,#15
 2927 0060 0133     	 adds r3,r3,#1
 2928              	.L187:
 2929 0062 DAB2     	 uxtb r2,r3
 2930 0064 084B     	 ldr r3,.L188+8
 2931 0066 1A70     	 strb r2,[r3]
 600:../cleanflight/src/main/rx/rx.c **** 
 601:../cleanflight/src/main/rx/rx.c ****     int16_t rssiMean = sum / RSSI_SAMPLE_COUNT;
 2932              	 .loc 7 601 0
 2933 0068 064B     	 ldr r3,.L188+4
 2934 006a 1B68     	 ldr r3,[r3]
 2935 006c 1B09     	 lsrs r3,r3,#4
 2936 006e FB81     	 strh r3,[r7,#14]
 602:../cleanflight/src/main/rx/rx.c **** 
 603:../cleanflight/src/main/rx/rx.c ****     rssi = rssiMean;
 2937              	 .loc 7 603 0
 2938 0070 FA89     	 ldrh r2,[r7,#14]
 2939 0072 084B     	 ldr r3,.L188+20
 2940 0074 1A80     	 strh r2,[r3]
 2941              	.L184:
 604:../cleanflight/src/main/rx/rx.c **** }
 2942              	 .loc 7 604 0
 2943 0076 1437     	 adds r7,r7,#20
 2944              	.LCFI152:
 2945              	 .cfi_def_cfa_offset 4
 2946 0078 BD46     	 mov sp,r7
 2947              	.LCFI153:
 2948              	 .cfi_def_cfa_register 13
 2949              	 
 2950 007a 5DF8047B 	 ldr r7,[sp],#4
 2951              	.LCFI154:
 2952              	 .cfi_restore 7
 2953              	 .cfi_def_cfa_offset 0
 2954 007e 7047     	 bx lr
 2955              	.L189:
 2956              	 .align 2
 2957              	.L188:
 2958 0080 00000000 	 .word rssiSource
 2959 0084 00000000 	 .word sum.13673
 2960 0088 00000000 	 .word rssiSampleIndex.13672
 2961 008c 00000000 	 .word rssiSamples.13671
 2962 0090 0F000080 	 .word -2147483633
 2963 0094 00000000 	 .word rssi
 2964              	 .cfi_endproc
 2965              	.LFE582:
 2967              	 .section .text.setRssiMsp,"ax",%progbits
 2968              	 .align 2
 2969              	 .global setRssiMsp
 2970              	 .thumb
 2971              	 .thumb_func
 2973              	setRssiMsp:
 2974              	.LFB583:
 605:../cleanflight/src/main/rx/rx.c **** 
 606:../cleanflight/src/main/rx/rx.c **** void setRssiMsp(uint8_t newMspRssi)
 607:../cleanflight/src/main/rx/rx.c **** {
 2975              	 .loc 7 607 0
 2976              	 .cfi_startproc
 2977              	 
 2978              	 
 2979 0000 80B5     	 push {r7,lr}
 2980              	.LCFI155:
 2981              	 .cfi_def_cfa_offset 8
 2982              	 .cfi_offset 7,-8
 2983              	 .cfi_offset 14,-4
 2984 0002 82B0     	 sub sp,sp,#8
 2985              	.LCFI156:
 2986              	 .cfi_def_cfa_offset 16
 2987 0004 00AF     	 add r7,sp,#0
 2988              	.LCFI157:
 2989              	 .cfi_def_cfa_register 7
 2990 0006 0346     	 mov r3,r0
 2991 0008 FB71     	 strb r3,[r7,#7]
 608:../cleanflight/src/main/rx/rx.c ****     if (rssiSource == RSSI_SOURCE_NONE) {
 2992              	 .loc 7 608 0
 2993 000a 0C4B     	 ldr r3,.L193
 2994 000c 1B78     	 ldrb r3,[r3]
 2995 000e 002B     	 cmp r3,#0
 2996 0010 02D1     	 bne .L191
 609:../cleanflight/src/main/rx/rx.c ****         rssiSource = RSSI_SOURCE_MSP;
 2997              	 .loc 7 609 0
 2998 0012 0A4B     	 ldr r3,.L193
 2999 0014 0422     	 movs r2,#4
 3000 0016 1A70     	 strb r2,[r3]
 3001              	.L191:
 610:../cleanflight/src/main/rx/rx.c ****     }
 611:../cleanflight/src/main/rx/rx.c **** 
 612:../cleanflight/src/main/rx/rx.c ****     if (rssiSource == RSSI_SOURCE_MSP) {
 3002              	 .loc 7 612 0
 3003 0018 084B     	 ldr r3,.L193
 3004 001a 1B78     	 ldrb r3,[r3]
 3005 001c 042B     	 cmp r3,#4
 3006 001e 0AD1     	 bne .L190
 613:../cleanflight/src/main/rx/rx.c ****         rssi = ((uint16_t)newMspRssi) << 2;
 3007              	 .loc 7 613 0
 3008 0020 FB79     	 ldrb r3,[r7,#7]
 3009 0022 9BB2     	 uxth r3,r3
 3010 0024 9B00     	 lsls r3,r3,#2
 3011 0026 9AB2     	 uxth r2,r3
 3012 0028 054B     	 ldr r3,.L193+4
 3013 002a 1A80     	 strh r2,[r3]
 614:../cleanflight/src/main/rx/rx.c ****         lastMspRssiUpdateUs = micros();
 3014              	 .loc 7 614 0
 3015 002c FFF7FEFF 	 bl micros
 3016 0030 0246     	 mov r2,r0
 3017 0032 044B     	 ldr r3,.L193+8
 3018 0034 1A60     	 str r2,[r3]
 3019              	.L190:
 615:../cleanflight/src/main/rx/rx.c ****     }
 616:../cleanflight/src/main/rx/rx.c **** }
 3020              	 .loc 7 616 0
 3021 0036 0837     	 adds r7,r7,#8
 3022              	.LCFI158:
 3023              	 .cfi_def_cfa_offset 8
 3024 0038 BD46     	 mov sp,r7
 3025              	.LCFI159:
 3026              	 .cfi_def_cfa_register 13
 3027              	 
 3028 003a 80BD     	 pop {r7,pc}
 3029              	.L194:
 3030              	 .align 2
 3031              	.L193:
 3032 003c 00000000 	 .word rssiSource
 3033 0040 00000000 	 .word rssi
 3034 0044 00000000 	 .word lastMspRssiUpdateUs
 3035              	 .cfi_endproc
 3036              	.LFE583:
 3038              	 .section .text.updateRSSIPWM,"ax",%progbits
 3039              	 .align 2
 3040              	 .thumb
 3041              	 .thumb_func
 3043              	updateRSSIPWM:
 3044              	.LFB584:
 617:../cleanflight/src/main/rx/rx.c **** 
 618:../cleanflight/src/main/rx/rx.c **** static void updateRSSIPWM(void)
 619:../cleanflight/src/main/rx/rx.c **** {
 3045              	 .loc 7 619 0
 3046              	 .cfi_startproc
 3047              	 
 3048              	 
 3049 0000 80B5     	 push {r7,lr}
 3050              	.LCFI160:
 3051              	 .cfi_def_cfa_offset 8
 3052              	 .cfi_offset 7,-8
 3053              	 .cfi_offset 14,-4
 3054 0002 82B0     	 sub sp,sp,#8
 3055              	.LCFI161:
 3056              	 .cfi_def_cfa_offset 16
 3057 0004 00AF     	 add r7,sp,#0
 3058              	.LCFI162:
 3059              	 .cfi_def_cfa_register 7
 620:../cleanflight/src/main/rx/rx.c ****     // Read value of AUX channel as rssi
 621:../cleanflight/src/main/rx/rx.c ****     int16_t pwmRssi = rcData[rxConfig()->rssi_channel - 1];
 3060              	 .loc 7 621 0
 3061 0006 FFF7FEFF 	 bl rxConfig
 3062 000a 0346     	 mov r3,r0
 3063 000c DB7B     	 ldrb r3,[r3,#15]
 3064 000e 013B     	 subs r3,r3,#1
 3065 0010 184A     	 ldr r2,.L197
 3066 0012 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 3067 0016 FB80     	 strh r3,[r7,#6]
 622:../cleanflight/src/main/rx/rx.c **** 
 623:../cleanflight/src/main/rx/rx.c ****     // RSSI_Invert option
 624:../cleanflight/src/main/rx/rx.c ****     if (rxConfig()->rssi_invert) {
 3068              	 .loc 7 624 0
 3069 0018 FFF7FEFF 	 bl rxConfig
 3070 001c 0346     	 mov r3,r0
 3071 001e 5B7C     	 ldrb r3,[r3,#17]
 3072 0020 002B     	 cmp r3,#0
 3073 0022 05D0     	 beq .L196
 625:../cleanflight/src/main/rx/rx.c ****         pwmRssi = ((2000 - pwmRssi) + 1000);
 3074              	 .loc 7 625 0
 3075 0024 FB88     	 ldrh r3,[r7,#6]
 3076 0026 C3F53B63 	 rsb r3,r3,#2992
 3077 002a 0833     	 adds r3,r3,#8
 3078 002c 9BB2     	 uxth r3,r3
 3079 002e FB80     	 strh r3,[r7,#6]
 3080              	.L196:
 626:../cleanflight/src/main/rx/rx.c ****     }
 627:../cleanflight/src/main/rx/rx.c **** 
 628:../cleanflight/src/main/rx/rx.c ****     // Range of rawPwmRssi is [1000;2000]. rssi should be in [0;1023];
 629:../cleanflight/src/main/rx/rx.c ****     setRssiDirect(constrain(((pwmRssi - 1000) / 1000.0f) * RSSI_MAX_VALUE, 0, RSSI_MAX_VALUE), RSSI
 3081              	 .loc 7 629 0
 3082 0030 B7F90630 	 ldrsh r3,[r7,#6]
 3083 0034 A3F57A73 	 sub r3,r3,#1000
 3084 0038 07EE903A 	 fmsr s15,r3
 3085 003c F8EEE77A 	 fsitos s15,s15
 3086 0040 9FED0D7A 	 flds s14,.L197+4
 3087 0044 C7EE877A 	 fdivs s15,s15,s14
 3088 0048 9FED0C7A 	 flds s14,.L197+8
 3089 004c 67EE877A 	 fmuls s15,s15,s14
 3090 0050 FDEEE77A 	 ftosizs s15,s15
 3091 0054 17EE900A 	 fmrs r0,s15
 3092 0058 0021     	 movs r1,#0
 3093 005a 40F2FF32 	 movw r2,#1023
 3094 005e FFF7FEFF 	 bl constrain
 3095 0062 0346     	 mov r3,r0
 3096 0064 9BB2     	 uxth r3,r3
 3097 0066 1846     	 mov r0,r3
 3098 0068 0221     	 movs r1,#2
 3099 006a FFF7FEFF 	 bl setRssiDirect
 630:../cleanflight/src/main/rx/rx.c **** }
 3100              	 .loc 7 630 0
 3101 006e 0837     	 adds r7,r7,#8
 3102              	.LCFI163:
 3103              	 .cfi_def_cfa_offset 8
 3104 0070 BD46     	 mov sp,r7
 3105              	.LCFI164:
 3106              	 .cfi_def_cfa_register 13
 3107              	 
 3108 0072 80BD     	 pop {r7,pc}
 3109              	.L198:
 3110              	 .align 2
 3111              	.L197:
 3112 0074 00000000 	 .word rcData
 3113 0078 00007A44 	 .word 1148846080
 3114 007c 00C07F44 	 .word 1149222912
 3115              	 .cfi_endproc
 3116              	.LFE584:
 3118              	 .section .text.updateRSSIADC,"ax",%progbits
 3119              	 .align 2
 3120              	 .thumb
 3121              	 .thumb_func
 3123              	updateRSSIADC:
 3124              	.LFB585:
 631:../cleanflight/src/main/rx/rx.c **** 
 632:../cleanflight/src/main/rx/rx.c **** static void updateRSSIADC(timeUs_t currentTimeUs)
 633:../cleanflight/src/main/rx/rx.c **** {
 3125              	 .loc 7 633 0
 3126              	 .cfi_startproc
 3127              	 
 3128              	 
 3129 0000 80B5     	 push {r7,lr}
 3130              	.LCFI165:
 3131              	 .cfi_def_cfa_offset 8
 3132              	 .cfi_offset 7,-8
 3133              	 .cfi_offset 14,-4
 3134 0002 84B0     	 sub sp,sp,#16
 3135              	.LCFI166:
 3136              	 .cfi_def_cfa_offset 24
 3137 0004 00AF     	 add r7,sp,#0
 3138              	.LCFI167:
 3139              	 .cfi_def_cfa_register 7
 3140 0006 7860     	 str r0,[r7,#4]
 634:../cleanflight/src/main/rx/rx.c **** #ifndef USE_ADC
 635:../cleanflight/src/main/rx/rx.c ****     UNUSED(currentTimeUs);
 636:../cleanflight/src/main/rx/rx.c **** #else
 637:../cleanflight/src/main/rx/rx.c ****     static uint32_t rssiUpdateAt = 0;
 638:../cleanflight/src/main/rx/rx.c **** 
 639:../cleanflight/src/main/rx/rx.c ****     if ((int32_t)(currentTimeUs - rssiUpdateAt) < 0) {
 3141              	 .loc 7 639 0
 3142 0008 134B     	 ldr r3,.L203
 3143 000a 1B68     	 ldr r3,[r3]
 3144 000c 7A68     	 ldr r2,[r7,#4]
 3145 000e D31A     	 subs r3,r2,r3
 3146 0010 002B     	 cmp r3,#0
 3147 0012 00DA     	 bge .L200
 640:../cleanflight/src/main/rx/rx.c ****         return;
 3148              	 .loc 7 640 0
 3149 0014 1DE0     	 b .L199
 3150              	.L200:
 641:../cleanflight/src/main/rx/rx.c ****     }
 642:../cleanflight/src/main/rx/rx.c ****     rssiUpdateAt = currentTimeUs + DELAY_50_HZ;
 3151              	 .loc 7 642 0
 3152 0016 7B68     	 ldr r3,[r7,#4]
 3153 0018 03F59C43 	 add r3,r3,#19968
 3154 001c 2033     	 adds r3,r3,#32
 3155 001e 0E4A     	 ldr r2,.L203
 3156 0020 1360     	 str r3,[r2]
 643:../cleanflight/src/main/rx/rx.c **** 
 644:../cleanflight/src/main/rx/rx.c ****     const uint16_t adcRssiSample = adcGetChannel(ADC_RSSI);
 3157              	 .loc 7 644 0
 3158 0022 0320     	 movs r0,#3
 3159 0024 FFF7FEFF 	 bl adcGetChannel
 3160 0028 0346     	 mov r3,r0
 3161 002a BB81     	 strh r3,[r7,#12]
 645:../cleanflight/src/main/rx/rx.c ****     uint16_t rssiValue = adcRssiSample / RSSI_ADC_DIVISOR;
 3162              	 .loc 7 645 0
 3163 002c BB89     	 ldrh r3,[r7,#12]
 3164 002e 9B08     	 lsrs r3,r3,#2
 3165 0030 FB81     	 strh r3,[r7,#14]
 646:../cleanflight/src/main/rx/rx.c **** 
 647:../cleanflight/src/main/rx/rx.c ****     // RSSI_Invert option
 648:../cleanflight/src/main/rx/rx.c ****     if (rxConfig()->rssi_invert) {
 3166              	 .loc 7 648 0
 3167 0032 FFF7FEFF 	 bl rxConfig
 3168 0036 0346     	 mov r3,r0
 3169 0038 5B7C     	 ldrb r3,[r3,#17]
 3170 003a 002B     	 cmp r3,#0
 3171 003c 04D0     	 beq .L202
 649:../cleanflight/src/main/rx/rx.c ****         rssiValue = RSSI_MAX_VALUE - rssiValue;
 3172              	 .loc 7 649 0
 3173 003e FB89     	 ldrh r3,[r7,#14]
 3174 0040 C3F57F73 	 rsb r3,r3,#1020
 3175 0044 0333     	 adds r3,r3,#3
 3176 0046 FB81     	 strh r3,[r7,#14]
 3177              	.L202:
 650:../cleanflight/src/main/rx/rx.c ****     }
 651:../cleanflight/src/main/rx/rx.c **** 
 652:../cleanflight/src/main/rx/rx.c ****     setRssi(rssiValue, RSSI_SOURCE_ADC);
 3178              	 .loc 7 652 0
 3179 0048 FB89     	 ldrh r3,[r7,#14]
 3180 004a 1846     	 mov r0,r3
 3181 004c 0121     	 movs r1,#1
 3182 004e FFF7FEFF 	 bl setRssi
 3183              	.L199:
 653:../cleanflight/src/main/rx/rx.c **** #endif
 654:../cleanflight/src/main/rx/rx.c **** }
 3184              	 .loc 7 654 0
 3185 0052 1037     	 adds r7,r7,#16
 3186              	.LCFI168:
 3187              	 .cfi_def_cfa_offset 8
 3188 0054 BD46     	 mov sp,r7
 3189              	.LCFI169:
 3190              	 .cfi_def_cfa_register 13
 3191              	 
 3192 0056 80BD     	 pop {r7,pc}
 3193              	.L204:
 3194              	 .align 2
 3195              	.L203:
 3196 0058 00000000 	 .word rssiUpdateAt.13685
 3197              	 .cfi_endproc
 3198              	.LFE585:
 3200              	 .section .text.updateRSSI,"ax",%progbits
 3201              	 .align 2
 3202              	 .global updateRSSI
 3203              	 .thumb
 3204              	 .thumb_func
 3206              	updateRSSI:
 3207              	.LFB586:
 655:../cleanflight/src/main/rx/rx.c **** 
 656:../cleanflight/src/main/rx/rx.c **** void updateRSSI(timeUs_t currentTimeUs)
 657:../cleanflight/src/main/rx/rx.c **** {
 3208              	 .loc 7 657 0
 3209              	 .cfi_startproc
 3210              	 
 3211              	 
 3212 0000 80B5     	 push {r7,lr}
 3213              	.LCFI170:
 3214              	 .cfi_def_cfa_offset 8
 3215              	 .cfi_offset 7,-8
 3216              	 .cfi_offset 14,-4
 3217 0002 82B0     	 sub sp,sp,#8
 3218              	.LCFI171:
 3219              	 .cfi_def_cfa_offset 16
 3220 0004 00AF     	 add r7,sp,#0
 3221              	.LCFI172:
 3222              	 .cfi_def_cfa_register 7
 3223 0006 7860     	 str r0,[r7,#4]
 658:../cleanflight/src/main/rx/rx.c ****     switch (rssiSource) {
 3224              	 .loc 7 658 0
 3225 0008 124B     	 ldr r3,.L213
 3226 000a 1B78     	 ldrb r3,[r3]
 3227 000c 022B     	 cmp r3,#2
 3228 000e 04D0     	 beq .L207
 3229 0010 042B     	 cmp r3,#4
 3230 0012 09D0     	 beq .L208
 3231 0014 012B     	 cmp r3,#1
 3232 0016 03D0     	 beq .L209
 659:../cleanflight/src/main/rx/rx.c ****     case RSSI_SOURCE_RX_CHANNEL:
 660:../cleanflight/src/main/rx/rx.c ****         updateRSSIPWM();
 661:../cleanflight/src/main/rx/rx.c ****         break;
 662:../cleanflight/src/main/rx/rx.c ****     case RSSI_SOURCE_ADC:
 663:../cleanflight/src/main/rx/rx.c ****         updateRSSIADC(currentTimeUs);
 664:../cleanflight/src/main/rx/rx.c ****         break;
 665:../cleanflight/src/main/rx/rx.c ****     case RSSI_SOURCE_MSP:
 666:../cleanflight/src/main/rx/rx.c ****         if (cmpTimeUs(micros(), lastMspRssiUpdateUs) > MSP_RSSI_TIMEOUT_US) {
 667:../cleanflight/src/main/rx/rx.c ****             rssi = 0;
 668:../cleanflight/src/main/rx/rx.c ****         }
 669:../cleanflight/src/main/rx/rx.c ****         break;
 670:../cleanflight/src/main/rx/rx.c ****     default:
 671:../cleanflight/src/main/rx/rx.c ****         break;
 3233              	 .loc 7 671 0
 3234 0018 18E0     	 b .L205
 3235              	.L207:
 660:../cleanflight/src/main/rx/rx.c ****         break;
 3236              	 .loc 7 660 0
 3237 001a FFF7FEFF 	 bl updateRSSIPWM
 661:../cleanflight/src/main/rx/rx.c ****     case RSSI_SOURCE_ADC:
 3238              	 .loc 7 661 0
 3239 001e 15E0     	 b .L205
 3240              	.L209:
 663:../cleanflight/src/main/rx/rx.c ****         break;
 3241              	 .loc 7 663 0
 3242 0020 7868     	 ldr r0,[r7,#4]
 3243 0022 FFF7FEFF 	 bl updateRSSIADC
 664:../cleanflight/src/main/rx/rx.c ****     case RSSI_SOURCE_MSP:
 3244              	 .loc 7 664 0
 3245 0026 11E0     	 b .L205
 3246              	.L208:
 666:../cleanflight/src/main/rx/rx.c ****             rssi = 0;
 3247              	 .loc 7 666 0
 3248 0028 FFF7FEFF 	 bl micros
 3249 002c 0246     	 mov r2,r0
 3250 002e 0A4B     	 ldr r3,.L213+4
 3251 0030 1B68     	 ldr r3,[r3]
 3252 0032 1046     	 mov r0,r2
 3253 0034 1946     	 mov r1,r3
 3254 0036 FFF7FEFF 	 bl cmpTimeUs
 3255 003a 0246     	 mov r2,r0
 3256 003c 074B     	 ldr r3,.L213+8
 3257 003e 9A42     	 cmp r2,r3
 3258 0040 03DD     	 ble .L211
 667:../cleanflight/src/main/rx/rx.c ****         }
 3259              	 .loc 7 667 0
 3260 0042 074B     	 ldr r3,.L213+12
 3261 0044 0022     	 movs r2,#0
 3262 0046 1A80     	 strh r2,[r3]
 669:../cleanflight/src/main/rx/rx.c ****     default:
 3263              	 .loc 7 669 0
 3264 0048 FFE7     	 b .L212
 3265              	.L211:
 3266              	.L212:
 3267 004a 00BF     	 nop
 3268              	.L205:
 672:../cleanflight/src/main/rx/rx.c ****     }
 673:../cleanflight/src/main/rx/rx.c **** }
 3269              	 .loc 7 673 0
 3270 004c 0837     	 adds r7,r7,#8
 3271              	.LCFI173:
 3272              	 .cfi_def_cfa_offset 8
 3273 004e BD46     	 mov sp,r7
 3274              	.LCFI174:
 3275              	 .cfi_def_cfa_register 13
 3276              	 
 3277 0050 80BD     	 pop {r7,pc}
 3278              	.L214:
 3279 0052 00BF     	 .align 2
 3280              	.L213:
 3281 0054 00000000 	 .word rssiSource
 3282 0058 00000000 	 .word lastMspRssiUpdateUs
 3283 005c 60E31600 	 .word 1500000
 3284 0060 00000000 	 .word rssi
 3285              	 .cfi_endproc
 3286              	.LFE586:
 3288              	 .section .text.getRssi,"ax",%progbits
 3289              	 .align 2
 3290              	 .global getRssi
 3291              	 .thumb
 3292              	 .thumb_func
 3294              	getRssi:
 3295              	.LFB587:
 674:../cleanflight/src/main/rx/rx.c **** 
 675:../cleanflight/src/main/rx/rx.c **** uint16_t getRssi(void)
 676:../cleanflight/src/main/rx/rx.c **** {
 3296              	 .loc 7 676 0
 3297              	 .cfi_startproc
 3298              	 
 3299              	 
 3300 0000 80B5     	 push {r7,lr}
 3301              	.LCFI175:
 3302              	 .cfi_def_cfa_offset 8
 3303              	 .cfi_offset 7,-8
 3304              	 .cfi_offset 14,-4
 3305 0002 2DED028B 	 fstmfdd sp!,{d8}
 3306              	.LCFI176:
 3307              	 .cfi_def_cfa_offset 16
 3308              	 .cfi_offset 80,-16
 3309              	 .cfi_offset 81,-12
 3310 0006 82B0     	 sub sp,sp,#8
 3311              	.LCFI177:
 3312              	 .cfi_def_cfa_offset 24
 3313 0008 00AF     	 add r7,sp,#0
 3314              	.LCFI178:
 3315              	 .cfi_def_cfa_register 7
 677:../cleanflight/src/main/rx/rx.c ****     return rxConfig()->rssi_scale / 100.0f * rssi + rxConfig()->rssi_offset * RSSI_OFFSET_SCALING;
 3316              	 .loc 7 677 0
 3317 000a FFF7FEFF 	 bl rxConfig
 3318 000e 0346     	 mov r3,r0
 3319 0010 1B7C     	 ldrb r3,[r3,#16]
 3320 0012 07EE903A 	 fmsr s15,r3
 3321 0016 F8EEE77A 	 fsitos s15,s15
 3322 001a 9FED147A 	 flds s14,.L217
 3323 001e 87EE877A 	 fdivs s14,s15,s14
 3324 0022 134B     	 ldr r3,.L217+4
 3325 0024 1B88     	 ldrh r3,[r3]
 3326 0026 07EE903A 	 fmsr s15,r3
 3327 002a F8EEE77A 	 fsitos s15,s15
 3328 002e 27EE278A 	 fmuls s16,s14,s15
 3329 0032 FFF7FEFF 	 bl rxConfig
 3330 0036 0346     	 mov r3,r0
 3331 0038 93F82330 	 ldrb r3,[r3,#35]
 3332 003c 5BB2     	 sxtb r3,r3
 3333 003e 07EE903A 	 fmsr s15,r3
 3334 0042 F8EEE77A 	 fsitos s15,s15
 3335 0046 9FED0B7A 	 flds s14,.L217+8
 3336 004a 67EE877A 	 fmuls s15,s15,s14
 3337 004e 78EE277A 	 fadds s15,s16,s15
 3338 0052 FCEEE77A 	 ftouizs s15,s15
 3339 0056 C7ED017A 	 fsts s15,[r7,#4]
 3340 005a BB88     	 ldrh r3,[r7,#4]
 3341 005c 9BB2     	 uxth r3,r3
 678:../cleanflight/src/main/rx/rx.c **** }
 3342              	 .loc 7 678 0
 3343 005e 1846     	 mov r0,r3
 3344 0060 0837     	 adds r7,r7,#8
 3345              	.LCFI179:
 3346              	 .cfi_def_cfa_offset 16
 3347 0062 BD46     	 mov sp,r7
 3348              	.LCFI180:
 3349              	 .cfi_def_cfa_register 13
 3350              	 
 3351 0064 BDEC028B 	 fldmfdd sp!,{d8}
 3352              	.LCFI181:
 3353              	 .cfi_restore 80
 3354              	 .cfi_restore 81
 3355              	 .cfi_def_cfa_offset 8
 3356 0068 80BD     	 pop {r7,pc}
 3357              	.L218:
 3358 006a 00BF     	 .align 2
 3359              	.L217:
 3360 006c 0000C842 	 .word 1120403456
 3361 0070 00000000 	 .word rssi
 3362 0074 0AD72341 	 .word 1092867850
 3363              	 .cfi_endproc
 3364              	.LFE587:
 3366              	 .section .text.getRssiPercent,"ax",%progbits
 3367              	 .align 2
 3368              	 .global getRssiPercent
 3369              	 .thumb
 3370              	 .thumb_func
 3372              	getRssiPercent:
 3373              	.LFB588:
 679:../cleanflight/src/main/rx/rx.c **** 
 680:../cleanflight/src/main/rx/rx.c **** uint8_t getRssiPercent(void)
 681:../cleanflight/src/main/rx/rx.c **** {
 3374              	 .loc 7 681 0
 3375              	 .cfi_startproc
 3376              	 
 3377              	 
 3378 0000 80B5     	 push {r7,lr}
 3379              	.LCFI182:
 3380              	 .cfi_def_cfa_offset 8
 3381              	 .cfi_offset 7,-8
 3382              	 .cfi_offset 14,-4
 3383 0002 82B0     	 sub sp,sp,#8
 3384              	.LCFI183:
 3385              	 .cfi_def_cfa_offset 16
 3386 0004 02AF     	 add r7,sp,#8
 3387              	.LCFI184:
 3388              	 .cfi_def_cfa 7,8
 682:../cleanflight/src/main/rx/rx.c ****     return scaleRange(getRssi(), 0, RSSI_MAX_VALUE, 0, 100);
 3389              	 .loc 7 682 0
 3390 0006 FFF7FEFF 	 bl getRssi
 3391 000a 0346     	 mov r3,r0
 3392 000c 1A46     	 mov r2,r3
 3393 000e 6423     	 movs r3,#100
 3394 0010 0093     	 str r3,[sp]
 3395 0012 1046     	 mov r0,r2
 3396 0014 0021     	 movs r1,#0
 3397 0016 40F2FF32 	 movw r2,#1023
 3398 001a 0023     	 movs r3,#0
 3399 001c FFF7FEFF 	 bl scaleRange
 3400 0020 0346     	 mov r3,r0
 3401 0022 DBB2     	 uxtb r3,r3
 683:../cleanflight/src/main/rx/rx.c **** }
 3402              	 .loc 7 683 0
 3403 0024 1846     	 mov r0,r3
 3404 0026 BD46     	 mov sp,r7
 3405              	.LCFI185:
 3406              	 .cfi_def_cfa_register 13
 3407              	 
 3408 0028 80BD     	 pop {r7,pc}
 3409              	 .cfi_endproc
 3410              	.LFE588:
 3412 002a 00BF     	 .section .text.rxGetRefreshRate,"ax",%progbits
 3413              	 .align 2
 3414              	 .global rxGetRefreshRate
 3415              	 .thumb
 3416              	 .thumb_func
 3418              	rxGetRefreshRate:
 3419              	.LFB589:
 684:../cleanflight/src/main/rx/rx.c **** 
 685:../cleanflight/src/main/rx/rx.c **** uint16_t rxGetRefreshRate(void)
 686:../cleanflight/src/main/rx/rx.c **** {
 3420              	 .loc 7 686 0
 3421              	 .cfi_startproc
 3422              	 
 3423              	 
 3424              	 
 3425 0000 80B4     	 push {r7}
 3426              	.LCFI186:
 3427              	 .cfi_def_cfa_offset 4
 3428              	 .cfi_offset 7,-4
 3429 0002 00AF     	 add r7,sp,#0
 3430              	.LCFI187:
 3431              	 .cfi_def_cfa_register 7
 687:../cleanflight/src/main/rx/rx.c ****     return rxRuntimeConfig.rxRefreshRate;
 3432              	 .loc 7 687 0
 3433 0004 044B     	 ldr r3,.L223
 3434 0006 B3F80130 	 ldrh r3,[r3,#1]
 3435 000a 9BB2     	 uxth r3,r3
 688:../cleanflight/src/main/rx/rx.c **** }
 3436              	 .loc 7 688 0
 3437 000c 1846     	 mov r0,r3
 3438 000e BD46     	 mov sp,r7
 3439              	.LCFI188:
 3440              	 .cfi_def_cfa_register 13
 3441              	 
 3442 0010 5DF8047B 	 ldr r7,[sp],#4
 3443              	.LCFI189:
 3444              	 .cfi_restore 7
 3445              	 .cfi_def_cfa_offset 0
 3446 0014 7047     	 bx lr
 3447              	.L224:
 3448 0016 00BF     	 .align 2
 3449              	.L223:
 3450 0018 00000000 	 .word rxRuntimeConfig
 3451              	 .cfi_endproc
 3452              	.LFE589:
 3454              	 .section .bss.rcSamples.13601,"aw",%nobits
 3455              	 .align 2
 3458              	rcSamples.13601:
 3459 0000 00000000 	 .space 72
 3459      00000000 
 3459      00000000 
 3459      00000000 
 3459      00000000 
 3460              	 .section .bss.rxSamplesCollected.13603,"aw",%nobits
 3463              	rxSamplesCollected.13603:
 3464 0000 00       	 .space 1
 3465              	 .section .bss.rcDataMean.13602,"aw",%nobits
 3466              	 .align 2
 3469              	rcDataMean.13602:
 3470 0000 00000000 	 .space 24
 3470      00000000 
 3470      00000000 
 3470      00000000 
 3470      00000000 
 3471              	 .section .bss.sum.13673,"aw",%nobits
 3472              	 .align 2
 3475              	sum.13673:
 3476 0000 00000000 	 .space 4
 3477              	 .section .bss.rssiSampleIndex.13672,"aw",%nobits
 3480              	rssiSampleIndex.13672:
 3481 0000 00       	 .space 1
 3482              	 .section .bss.rssiSamples.13671,"aw",%nobits
 3483              	 .align 2
 3486              	rssiSamples.13671:
 3487 0000 00000000 	 .space 32
 3487      00000000 
 3487      00000000 
 3487      00000000 
 3487      00000000 
 3488              	 .section .bss.rssiUpdateAt.13685,"aw",%nobits
 3489              	 .align 2
 3492              	rssiUpdateAt.13685:
 3493 0000 00000000 	 .space 4
 3494              	 .text
 3495              	.Letext0:
 3496              	 .file 8 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3497              	 .file 9 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3498              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 3499              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 3500              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 3501              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 3502              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 3503              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/adc.h"
 3504              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 3505              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
 3506              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/flight/failsafe.h"
 3507              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 3508              	 .file 20 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 3509              	 .file 21 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
 3510              	 .file 22 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/interface/crsf_protocol.h"
 3511              	 .file 23 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx_spi.h"
 3512              	 .file 24 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 3513              	 .file 25 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 rx.c
    {standard input}:20     .text.cmp32:00000000 $t
    {standard input}:24     .text.cmp32:00000000 cmp32
    {standard input}:65     .text.constrain:00000000 $t
    {standard input}:69     .text.constrain:00000000 constrain
    {standard input}:129    .text.cmpTimeUs:00000000 $t
    {standard input}:133    .text.cmpTimeUs:00000000 cmpTimeUs
    {standard input}:174    .text.modeActivationConditions:00000000 $t
    {standard input}:178    .text.modeActivationConditions:00000000 modeActivationConditions
    {standard input}:221    .text.modeActivationConditions:00000024 $d
    {standard input}:226    .text.rxConfig:00000000 $t
    {standard input}:230    .text.rxConfig:00000000 rxConfig
    {standard input}:260    .text.rxConfig:00000010 $d
    {standard input}:265    .text.rxFailsafeChannelConfigs:00000000 $t
    {standard input}:269    .text.rxFailsafeChannelConfigs:00000000 rxFailsafeChannelConfigs
    {standard input}:309    .text.rxFailsafeChannelConfigs:0000001c $d
                            *COM*:00000024 rxFailsafeChannelConfigs_SystemArray
    {standard input}:314    .text.rxChannelRangeConfigs:00000000 $t
    {standard input}:318    .text.rxChannelRangeConfigs:00000000 rxChannelRangeConfigs
    {standard input}:357    .text.rxChannelRangeConfigs:0000001c $d
                            *COM*:00000010 rxChannelRangeConfigs_SystemArray
    {standard input}:366    .rodata.rcChannelLetters:00000000 rcChannelLetters
    {standard input}:363    .rodata.rcChannelLetters:00000000 $d
    {standard input}:369    .bss.rssi:00000000 $d
    {standard input}:372    .bss.rssi:00000000 rssi
    {standard input}:375    .bss.lastMspRssiUpdateUs:00000000 $d
    {standard input}:378    .bss.lastMspRssiUpdateUs:00000000 lastMspRssiUpdateUs
                            *COM*:00000001 rssiSource
    {standard input}:384    .bss.rxDataProcessingRequired:00000000 rxDataProcessingRequired
    {standard input}:385    .bss.rxDataProcessingRequired:00000000 $d
    {standard input}:389    .bss.auxiliaryProcessingRequired:00000000 auxiliaryProcessingRequired
    {standard input}:390    .bss.auxiliaryProcessingRequired:00000000 $d
    {standard input}:394    .bss.rxSignalReceived:00000000 rxSignalReceived
    {standard input}:395    .bss.rxSignalReceived:00000000 $d
    {standard input}:399    .bss.rxFlightChannelsValid:00000000 rxFlightChannelsValid
    {standard input}:400    .bss.rxFlightChannelsValid:00000000 $d
    {standard input}:404    .data.rxIsInFailsafeMode:00000000 rxIsInFailsafeMode
    {standard input}:409    .bss.rxChannelCount:00000000 rxChannelCount
    {standard input}:410    .bss.rxChannelCount:00000000 $d
    {standard input}:412    .bss.rxNextUpdateAtUs:00000000 $d
    {standard input}:415    .bss.rxNextUpdateAtUs:00000000 rxNextUpdateAtUs
    {standard input}:418    .bss.needRxSignalBefore:00000000 $d
    {standard input}:421    .bss.needRxSignalBefore:00000000 needRxSignalBefore
    {standard input}:424    .bss.needRxSignalMaxDelayUs:00000000 $d
    {standard input}:427    .bss.needRxSignalMaxDelayUs:00000000 needRxSignalMaxDelayUs
    {standard input}:430    .bss.suspendRxSignalUntil:00000000 $d
    {standard input}:433    .bss.suspendRxSignalUntil:00000000 suspendRxSignalUntil
    {standard input}:438    .bss.skipRxSamples:00000000 skipRxSamples
    {standard input}:439    .bss.skipRxSamples:00000000 $d
    {standard input}:441    .bss.rcRaw:00000000 $d
    {standard input}:444    .bss.rcRaw:00000000 rcRaw
                            *COM*:00000024 rcData
                            *COM*:00000048 rcInvalidPulsPeriod
                            *COM*:00000017 rxRuntimeConfig
    {standard input}:452    .bss.rcSampleIndex:00000000 rcSampleIndex
    {standard input}:453    .bss.rcSampleIndex:00000000 $d
                            *COM*:00000010 rxChannelRangeConfigs_CopyArray
    {standard input}:461    .pg_registry:00000000 rxChannelRangeConfigs_Registry
    {standard input}:458    .pg_registry:00000000 $d
    {standard input}:474    .text.pgResetFn_rxChannelRangeConfigs:00000000 pgResetFn_rxChannelRangeConfigs
    {standard input}:469    .text.pgResetFn_rxChannelRangeConfigs:00000000 $t
                            *COM*:00000024 rxFailsafeChannelConfigs_CopyArray
    {standard input}:554    .pg_registry:00000014 rxFailsafeChannelConfigs_Registry
    {standard input}:567    .text.pgResetFn_rxFailsafeChannelConfigs:00000000 pgResetFn_rxFailsafeChannelConfigs
    {standard input}:562    .text.pgResetFn_rxFailsafeChannelConfigs:00000000 $t
    {standard input}:667    .text.pgResetFn_rxFailsafeChannelConfigs:00000090 $d
    {standard input}:672    .text.resetAllRxChannelRangeConfigurations:00000000 $t
    {standard input}:677    .text.resetAllRxChannelRangeConfigurations:00000000 resetAllRxChannelRangeConfigurations
    {standard input}:748    .text.nullReadRawRC:00000000 $t
    {standard input}:752    .text.nullReadRawRC:00000000 nullReadRawRC
    {standard input}:792    .text.nullFrameStatus:00000000 $t
    {standard input}:796    .text.nullFrameStatus:00000000 nullFrameStatus
    {standard input}:834    .text.nullProcessFrame:00000000 $t
    {standard input}:838    .text.nullProcessFrame:00000000 nullProcessFrame
    {standard input}:876    .text.isPulseValid:00000000 $t
    {standard input}:880    .text.isPulseValid:00000000 isPulseValid
    {standard input}:940    .text.serialRxInit:00000000 $t
    {standard input}:945    .text.serialRxInit:00000000 serialRxInit
    {standard input}:976    .text.serialRxInit:0000001c $d
    {standard input}:987    .text.serialRxInit:00000048 $t
    {standard input}:1083   .text.rxInit:00000000 $t
    {standard input}:1088   .text.rxInit:00000000 rxInit
    {standard input}:1390   .text.rxInit:000001f4 $d
    {standard input}:1406   .text.rxIsReceivingSignal:00000000 $t
    {standard input}:1411   .text.rxIsReceivingSignal:00000000 rxIsReceivingSignal
    {standard input}:1442   .text.rxIsReceivingSignal:00000014 $d
    {standard input}:1447   .text.rxAreFlightChannelsValid:00000000 $t
    {standard input}:1452   .text.rxAreFlightChannelsValid:00000000 rxAreFlightChannelsValid
    {standard input}:1483   .text.rxAreFlightChannelsValid:00000014 $d
    {standard input}:1488   .text.suspendRxSignal:00000000 $t
    {standard input}:1493   .text.suspendRxSignal:00000000 suspendRxSignal
    {standard input}:1526   .text.suspendRxSignal:00000024 $d
    {standard input}:1533   .text.resumeRxSignal:00000000 $t
    {standard input}:1538   .text.resumeRxSignal:00000000 resumeRxSignal
    {standard input}:1568   .text.resumeRxSignal:0000001c $d
    {standard input}:1574   .text.rxUpdateCheck:00000000 $t
    {standard input}:1579   .text.rxUpdateCheck:00000000 rxUpdateCheck
    {standard input}:2861   .text.setRssi:00000000 setRssi
    {standard input}:1839   .text.rxUpdateCheck:00000184 $d
    {standard input}:1851   .text.calculateChannelMovingAverage:00000000 $t
    {standard input}:1855   .text.calculateChannelMovingAverage:00000000 calculateChannelMovingAverage
    {standard input}:1992   .text.calculateChannelMovingAverage:000000c8 $d
    {standard input}:3458   .bss.rcSamples.13601:00000000 rcSamples.13601
    {standard input}:3463   .bss.rxSamplesCollected.13603:00000000 rxSamplesCollected.13603
    {standard input}:3469   .bss.rcDataMean.13602:00000000 rcDataMean.13602
    {standard input}:2002   .text.getRxfailValue:00000000 $t
    {standard input}:2006   .text.getRxfailValue:00000000 getRxfailValue
    {standard input}:2112   .text.getRxfailValue:00000098 $d
    {standard input}:2117   .text.applyRxChannelRangeConfiguraton:00000000 $t
    {standard input}:2121   .text.applyRxChannelRangeConfiguraton:00000000 applyRxChannelRangeConfiguraton
    {standard input}:2187   .text.readRxChannelsApplyRanges:00000000 $t
    {standard input}:2191   .text.readRxChannelsApplyRanges:00000000 readRxChannelsApplyRanges
    {standard input}:2289   .text.readRxChannelsApplyRanges:00000078 $d
    {standard input}:2296   .text.detectAndApplySignalLossBehaviour:00000000 $t
    {standard input}:2300   .text.detectAndApplySignalLossBehaviour:00000000 detectAndApplySignalLossBehaviour
    {standard input}:2564   .text.detectAndApplySignalLossBehaviour:0000018c $d
    {standard input}:2577   .text.calculateRxChannelsAndUpdateFailsafe:00000000 $t
    {standard input}:2582   .text.calculateRxChannelsAndUpdateFailsafe:00000000 calculateRxChannelsAndUpdateFailsafe
    {standard input}:2694   .text.calculateRxChannelsAndUpdateFailsafe:0000009c $d
    {standard input}:2705   .text.parseRcChannels:00000000 $t
    {standard input}:2710   .text.parseRcChannels:00000000 parseRcChannels
    {standard input}:2787   .text.parseRcChannels:00000054 $d
    {standard input}:2793   .text.setRssiDirect:00000000 $t
    {standard input}:2798   .text.setRssiDirect:00000000 setRssiDirect
    {standard input}:2850   .text.setRssiDirect:0000002c $d
    {standard input}:2856   .text.setRssi:00000000 $t
    {standard input}:2958   .text.setRssi:00000080 $d
    {standard input}:3475   .bss.sum.13673:00000000 sum.13673
    {standard input}:3480   .bss.rssiSampleIndex.13672:00000000 rssiSampleIndex.13672
    {standard input}:3486   .bss.rssiSamples.13671:00000000 rssiSamples.13671
    {standard input}:2968   .text.setRssiMsp:00000000 $t
    {standard input}:2973   .text.setRssiMsp:00000000 setRssiMsp
    {standard input}:3032   .text.setRssiMsp:0000003c $d
    {standard input}:3039   .text.updateRSSIPWM:00000000 $t
    {standard input}:3043   .text.updateRSSIPWM:00000000 updateRSSIPWM
    {standard input}:3112   .text.updateRSSIPWM:00000074 $d
    {standard input}:3119   .text.updateRSSIADC:00000000 $t
    {standard input}:3123   .text.updateRSSIADC:00000000 updateRSSIADC
    {standard input}:3196   .text.updateRSSIADC:00000058 $d
    {standard input}:3492   .bss.rssiUpdateAt.13685:00000000 rssiUpdateAt.13685
    {standard input}:3201   .text.updateRSSI:00000000 $t
    {standard input}:3206   .text.updateRSSI:00000000 updateRSSI
    {standard input}:3281   .text.updateRSSI:00000054 $d
    {standard input}:3289   .text.getRssi:00000000 $t
    {standard input}:3294   .text.getRssi:00000000 getRssi
    {standard input}:3360   .text.getRssi:0000006c $d
    {standard input}:3367   .text.getRssiPercent:00000000 $t
    {standard input}:3372   .text.getRssiPercent:00000000 getRssiPercent
    {standard input}:3413   .text.rxGetRefreshRate:00000000 $t
    {standard input}:3418   .text.rxGetRefreshRate:00000000 rxGetRefreshRate
    {standard input}:3450   .text.rxGetRefreshRate:00000018 $d
    {standard input}:3455   .bss.rcSamples.13601:00000000 $d
    {standard input}:3464   .bss.rxSamplesCollected.13603:00000000 $d
    {standard input}:3466   .bss.rcDataMean.13602:00000000 $d
    {standard input}:3472   .bss.sum.13673:00000000 $d
    {standard input}:3481   .bss.rssiSampleIndex.13672:00000000 $d
    {standard input}:3483   .bss.rssiSamples.13671:00000000 $d
    {standard input}:3489   .bss.rssiUpdateAt.13685:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
modeActivationConditions_SystemArray
rxConfig_System
spektrumInit
sbusInit
sumdInit
sumhInit
xBusInit
ibusInit
jetiExBusInit
crsfRxInit
millis
feature
featureClear
rxMspInit
rxPwmInit
micros
failsafeOnRxSuspend
failsafeOnRxResume
isPPMDataBeingReceived
resetPPMDataReceivedState
isPWMDataBeingReceived
scaleRange
IS_RC_MODE_ACTIVE
failsafeOnValidDataReceived
failsafeOnValidDataFailed
debugMode
debug
strchr
adcGetChannel
