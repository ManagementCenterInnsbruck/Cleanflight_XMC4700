   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "spektrum.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.serialPinConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	serialPinConfig:
  25              	.LFB531:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #include "drivers/io.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #include "pg/pg.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef enum {
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     MODE_RX = 1 << 0,
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     MODE_TX = 1 << 1,
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     MODE_RXTX = MODE_RX | MODE_TX
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** } portMode_e;
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef enum {
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_NOT_INVERTED  = 0 << 0,
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_INVERTED      = 1 << 0,
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_STOPBITS_1    = 0 << 1,
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_STOPBITS_2    = 1 << 1,
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_PARITY_NO     = 0 << 2,
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_PARITY_EVEN   = 1 << 2,
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_UNIDIR        = 0 << 3,
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_BIDIR         = 1 << 3,
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     /*
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * Note on SERIAL_BIDIR_PP
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * With SERIAL_BIDIR_PP, the very first start bit of back-to-back bytes
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * is lost and the first data byte will be lost by a framing error.
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * To ensure the first start bit to be sent, prepend a zero byte (0x00)
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      * to actual data bytes.
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****      */
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_BIDIR_OD        = 0 << 4,
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_BIDIR_PP        = 1 << 4,
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     SERIAL_BIDIR_NOPULL    = 1 << 5, // disable pulls in BIDIR RX mode
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** } portOptions_e;
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** // Define known line control states which may be passed up by underlying serial driver callback
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #define CTRL_LINE_STATE_DTR (1 << 0)
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #define CTRL_LINE_STATE_RTS (1 << 1)
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef void (*serialReceiveCallbackPtr)(uint16_t data, void *rxCallbackData);   // used by serial 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef struct serialPort_s {
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     const struct serialPortVTable *vTable;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     portMode_e mode;
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     portOptions_e options;
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t baudRate;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t rxBufferSize;
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t txBufferSize;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     volatile uint8_t *rxBuffer;
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     volatile uint8_t *txBuffer;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t rxBufferHead;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t rxBufferTail;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t txBufferHead;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint32_t txBufferTail;
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     serialReceiveCallbackPtr rxCallback;
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     void *rxCallbackData;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     uint8_t identifier;
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** } serialPort_t;
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #if defined(USE_SOFTSERIAL1) || defined(USE_SOFTSERIAL2)
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** # ifdef USE_SOFTSERIAL2
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #  define SERIAL_PORT_MAX_INDEX (RESOURCE_SOFT_OFFSET + 2)
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** # else
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #  define SERIAL_PORT_MAX_INDEX (RESOURCE_SOFT_OFFSET + 1)
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** # endif
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #else
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** # define SERIAL_PORT_MAX_INDEX RESOURCE_SOFT_OFFSET
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** #endif
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** typedef struct serialPinConfig_s {
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     ioTag_t ioTagTx[SERIAL_PORT_MAX_INDEX];
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     ioTag_t ioTagRx[SERIAL_PORT_MAX_INDEX];
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h ****     ioTag_t ioTagInverter[SERIAL_PORT_MAX_INDEX];
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** } serialPinConfig_t;
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers\serial.h **** PG_DECLARE(serialPinConfig_t, serialPinConfig);
  27              	 .loc 1 100 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 100 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word serialPinConfig_System
  55              	 .cfi_endproc
  56              	.LFE531:
  58              	 .section .text.rxConfig,"ax",%progbits
  59              	 .align 2
  60              	 .thumb
  61              	 .thumb_func
  63              	rxConfig:
  64              	.LFB541:
  65              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "drivers/io_types.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** #include "pg/pg.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** typedef struct rxConfig_s {
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcmap[RX_MAPPABLE_CHANNEL_COUNT];  // mapping of radio channels to internal RPYTA+ orde
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_provider;              // type of UART-based receiver (0 = spek 10, 1 = spek 1
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t serialrx_inverted;              // invert the serial RX protocol compared to it's defau
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t halfDuplex;                     // allow rx to operate in half duplex mode on F4, ignor
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_pin_override_ioTag;
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     ioTag_t spektrum_bind_plug_ioTag;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind;              // number of bind pulses for Spektrum satellite receive
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t spektrum_sat_bind_autoreset;    // whenever we will reset (exit) binding mode after har
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_channel;
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_scale;
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_invert;
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t midrc;                         // Some radios have not a neutral point centered on 150
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t mincheck;                      // minimum rc end
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t maxcheck;                      // maximum rc end
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolation;
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationChannels;
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rcInterpolationInterval;
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t fpvCamAngleDegrees;             // Camera angle to be scaled into rc commands
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t airModeActivateThreshold;       // Throttle setpoint percent where airmode gets activat
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_min_usec;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint16_t rx_max_usec;
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t max_aux_channel;
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rssi_src_frame_errors;          // true to use frame drop flags in the rx protocol
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     int8_t rssi_offset;                     // offset applied to the RSSI value before it is return
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_type;              // Determines the smoothing algorithm to use: INTERPOLA
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_cutoff;      // Filter cutoff frequency for the input filter (0 = au
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_cutoff; // Filter cutoff frequency for the setpoint weight deri
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_debug_axis;        // Axis to log as debug values when debug_mode = RC_SMO
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_input_type;        // Input filter type (0 = PT1, 1 = BIQUAD)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h ****     uint8_t rc_smoothing_derivative_type;   // Derivative filter type (0 = OFF, 1 = PT1, 2 = BIQUAD
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** } rxConfig_t;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg\rx.h **** PG_DECLARE(rxConfig_t, rxConfig);
  66              	 .loc 2 61 0
  67              	 .cfi_startproc
  68              	 
  69              	 
  70              	 
  71 0000 80B4     	 push {r7}
  72              	.LCFI4:
  73              	 .cfi_def_cfa_offset 4
  74              	 .cfi_offset 7,-4
  75 0002 00AF     	 add r7,sp,#0
  76              	.LCFI5:
  77              	 .cfi_def_cfa_register 7
  78              	 .loc 2 61 0
  79 0004 024B     	 ldr r3,.L7
  80 0006 1846     	 mov r0,r3
  81 0008 BD46     	 mov sp,r7
  82              	.LCFI6:
  83              	 .cfi_def_cfa_register 13
  84              	 
  85 000a 5DF8047B 	 ldr r7,[sp],#4
  86              	.LCFI7:
  87              	 .cfi_restore 7
  88              	 .cfi_def_cfa_offset 0
  89 000e 7047     	 bx lr
  90              	.L8:
  91              	 .align 2
  92              	.L7:
  93 0010 00000000 	 .word rxConfig_System
  94              	 .cfi_endproc
  95              	.LFE541:
  97              	 .global srxlEnabled
  98              	 .section .bss.srxlEnabled,"aw",%nobits
 101              	srxlEnabled:
 102 0000 00       	 .space 1
 103              	 .comm resolution,4,4
 104              	 .comm rssi_channel,1,1
 105              	 .section .bss.spek_chan_shift,"aw",%nobits
 108              	spek_chan_shift:
 109 0000 00       	 .space 1
 110              	 .section .bss.spek_chan_mask,"aw",%nobits
 113              	spek_chan_mask:
 114 0000 00       	 .space 1
 115              	 .section .bss.rcFrameComplete,"aw",%nobits
 118              	rcFrameComplete:
 119 0000 00       	 .space 1
 120              	 .section .bss.spekHiRes,"aw",%nobits
 123              	spekHiRes:
 124 0000 00       	 .space 1
 125              	 .section .bss.spekFrame,"aw",%nobits
 126              	 .align 2
 129              	spekFrame:
 130 0000 00000000 	 .space 16
 130      00000000 
 130      00000000 
 130      00000000 
 131              	 .section .bss.rxRuntimeConfigPtr,"aw",%nobits
 132              	 .align 2
 135              	rxRuntimeConfigPtr:
 136 0000 00000000 	 .space 4
 137              	 .section .bss.serialPort,"aw",%nobits
 138              	 .align 2
 141              	serialPort:
 142 0000 00000000 	 .space 4
 143              	 .section .text.spektrumDataReceive,"ax",%progbits
 144              	 .align 2
 145              	 .thumb
 146              	 .thumb_func
 148              	spektrumDataReceive:
 149              	.LFB551:
 150              	 .file 3 "../cleanflight/src/main/rx/spektrum.c"
   1:../cleanflight/src/main/rx/spektrum.c **** /*
   2:../cleanflight/src/main/rx/spektrum.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/rx/spektrum.c ****  *
   4:../cleanflight/src/main/rx/spektrum.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/rx/spektrum.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/rx/spektrum.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/rx/spektrum.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/rx/spektrum.c ****  * any later version.
   9:../cleanflight/src/main/rx/spektrum.c ****  *
  10:../cleanflight/src/main/rx/spektrum.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/rx/spektrum.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/rx/spektrum.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/rx/spektrum.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/rx/spektrum.c ****  *
  15:../cleanflight/src/main/rx/spektrum.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/rx/spektrum.c ****  * along with this software.
  17:../cleanflight/src/main/rx/spektrum.c ****  *
  18:../cleanflight/src/main/rx/spektrum.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/rx/spektrum.c ****  */
  20:../cleanflight/src/main/rx/spektrum.c **** 
  21:../cleanflight/src/main/rx/spektrum.c **** #include "platform.h"
  22:../cleanflight/src/main/rx/spektrum.c **** #ifdef USE_SERIAL_RX
  23:../cleanflight/src/main/rx/spektrum.c **** 
  24:../cleanflight/src/main/rx/spektrum.c **** #include <string.h>
  25:../cleanflight/src/main/rx/spektrum.c **** 
  26:../cleanflight/src/main/rx/spektrum.c **** #include "common/maths.h"
  27:../cleanflight/src/main/rx/spektrum.c **** 
  28:../cleanflight/src/main/rx/spektrum.c **** #include "build/debug.h"
  29:../cleanflight/src/main/rx/spektrum.c **** 
  30:../cleanflight/src/main/rx/spektrum.c **** #include "drivers/io.h"
  31:../cleanflight/src/main/rx/spektrum.c **** #include "drivers/io_impl.h"
  32:../cleanflight/src/main/rx/spektrum.c **** #include "drivers/light_led.h"
  33:../cleanflight/src/main/rx/spektrum.c **** #include "drivers/system.h"
  34:../cleanflight/src/main/rx/spektrum.c **** #include "drivers/time.h"
  35:../cleanflight/src/main/rx/spektrum.c **** 
  36:../cleanflight/src/main/rx/spektrum.c **** #include "io/serial.h"
  37:../cleanflight/src/main/rx/spektrum.c **** 
  38:../cleanflight/src/main/rx/spektrum.c **** #include "fc/config.h"
  39:../cleanflight/src/main/rx/spektrum.c **** #include "fc/fc_dispatch.h"
  40:../cleanflight/src/main/rx/spektrum.c **** 
  41:../cleanflight/src/main/rx/spektrum.c **** #include "io/spektrum_rssi.h"
  42:../cleanflight/src/main/rx/spektrum.c **** #include "io/spektrum_vtx_control.h"
  43:../cleanflight/src/main/rx/spektrum.c **** 
  44:../cleanflight/src/main/rx/spektrum.c **** #include "telemetry/telemetry.h"
  45:../cleanflight/src/main/rx/spektrum.c **** #include "telemetry/srxl.h"
  46:../cleanflight/src/main/rx/spektrum.c **** 
  47:../cleanflight/src/main/rx/spektrum.c **** #include "pg/rx.h"
  48:../cleanflight/src/main/rx/spektrum.c **** 
  49:../cleanflight/src/main/rx/spektrum.c **** #include "rx/rx.h"
  50:../cleanflight/src/main/rx/spektrum.c **** #include "rx/spektrum.h"
  51:../cleanflight/src/main/rx/spektrum.c **** 
  52:../cleanflight/src/main/rx/spektrum.c **** #include "config/feature.h"
  53:../cleanflight/src/main/rx/spektrum.c **** 
  54:../cleanflight/src/main/rx/spektrum.c **** // driver for spektrum satellite receiver / sbus
  55:../cleanflight/src/main/rx/spektrum.c **** 
  56:../cleanflight/src/main/rx/spektrum.c **** bool srxlEnabled = false;
  57:../cleanflight/src/main/rx/spektrum.c **** int32_t resolution;
  58:../cleanflight/src/main/rx/spektrum.c **** uint8_t rssi_channel;
  59:../cleanflight/src/main/rx/spektrum.c **** 
  60:../cleanflight/src/main/rx/spektrum.c **** static uint8_t spek_chan_shift;
  61:../cleanflight/src/main/rx/spektrum.c **** static uint8_t spek_chan_mask;
  62:../cleanflight/src/main/rx/spektrum.c **** static bool rcFrameComplete = false;
  63:../cleanflight/src/main/rx/spektrum.c **** static bool spekHiRes = false;
  64:../cleanflight/src/main/rx/spektrum.c **** 
  65:../cleanflight/src/main/rx/spektrum.c **** static volatile uint8_t spekFrame[SPEK_FRAME_SIZE];
  66:../cleanflight/src/main/rx/spektrum.c **** 
  67:../cleanflight/src/main/rx/spektrum.c **** static rxRuntimeConfig_t *rxRuntimeConfigPtr;
  68:../cleanflight/src/main/rx/spektrum.c **** static serialPort_t *serialPort;
  69:../cleanflight/src/main/rx/spektrum.c **** 
  70:../cleanflight/src/main/rx/spektrum.c **** #if defined(USE_TELEMETRY) && defined(USE_TELEMETRY_SRXL)
  71:../cleanflight/src/main/rx/spektrum.c **** static uint8_t telemetryBuf[SRXL_FRAME_SIZE_MAX];
  72:../cleanflight/src/main/rx/spektrum.c **** static uint8_t telemetryBufLen = 0;
  73:../cleanflight/src/main/rx/spektrum.c **** 
  74:../cleanflight/src/main/rx/spektrum.c **** void srxlRxSendTelemetryDataDispatch(dispatchEntry_t *self);
  75:../cleanflight/src/main/rx/spektrum.c **** static dispatchEntry_t srxlTelemetryDispatch = { .dispatch = srxlRxSendTelemetryDataDispatch};
  76:../cleanflight/src/main/rx/spektrum.c **** #endif
  77:../cleanflight/src/main/rx/spektrum.c **** 
  78:../cleanflight/src/main/rx/spektrum.c **** // Receive ISR callback
  79:../cleanflight/src/main/rx/spektrum.c **** static void spektrumDataReceive(uint16_t c, void *data)
  80:../cleanflight/src/main/rx/spektrum.c **** {
 151              	 .loc 3 80 0
 152              	 .cfi_startproc
 153              	 
 154              	 
 155 0000 80B5     	 push {r7,lr}
 156              	.LCFI8:
 157              	 .cfi_def_cfa_offset 8
 158              	 .cfi_offset 7,-8
 159              	 .cfi_offset 14,-4
 160 0002 84B0     	 sub sp,sp,#16
 161              	.LCFI9:
 162              	 .cfi_def_cfa_offset 24
 163 0004 00AF     	 add r7,sp,#0
 164              	.LCFI10:
 165              	 .cfi_def_cfa_register 7
 166 0006 0346     	 mov r3,r0
 167 0008 3960     	 str r1,[r7]
 168 000a FB80     	 strh r3,[r7,#6]
  81:../cleanflight/src/main/rx/spektrum.c ****     UNUSED(data);
  82:../cleanflight/src/main/rx/spektrum.c **** 
  83:../cleanflight/src/main/rx/spektrum.c ****     uint32_t spekTime, spekTimeInterval;
  84:../cleanflight/src/main/rx/spektrum.c ****     static uint32_t spekTimeLast = 0;
  85:../cleanflight/src/main/rx/spektrum.c ****     static uint8_t spekFramePosition = 0;
  86:../cleanflight/src/main/rx/spektrum.c **** 
  87:../cleanflight/src/main/rx/spektrum.c ****     spekTime = micros();
 169              	 .loc 3 87 0
 170 000c FFF7FEFF 	 bl micros
 171 0010 F860     	 str r0,[r7,#12]
  88:../cleanflight/src/main/rx/spektrum.c ****     spekTimeInterval = spekTime - spekTimeLast;
 172              	 .loc 3 88 0
 173 0012 164B     	 ldr r3,.L13
 174 0014 1B68     	 ldr r3,[r3]
 175 0016 FA68     	 ldr r2,[r7,#12]
 176 0018 D31A     	 subs r3,r2,r3
 177 001a BB60     	 str r3,[r7,#8]
  89:../cleanflight/src/main/rx/spektrum.c ****     spekTimeLast = spekTime;
 178              	 .loc 3 89 0
 179 001c 134A     	 ldr r2,.L13
 180 001e FB68     	 ldr r3,[r7,#12]
 181 0020 1360     	 str r3,[r2]
  90:../cleanflight/src/main/rx/spektrum.c **** 
  91:../cleanflight/src/main/rx/spektrum.c ****     if (spekTimeInterval > SPEKTRUM_NEEDED_FRAME_INTERVAL) {
 182              	 .loc 3 91 0
 183 0022 BB68     	 ldr r3,[r7,#8]
 184 0024 41F28832 	 movw r2,#5000
 185 0028 9342     	 cmp r3,r2
 186 002a 02D9     	 bls .L10
  92:../cleanflight/src/main/rx/spektrum.c ****         spekFramePosition = 0;
 187              	 .loc 3 92 0
 188 002c 104B     	 ldr r3,.L13+4
 189 002e 0022     	 movs r2,#0
 190 0030 1A70     	 strb r2,[r3]
 191              	.L10:
  93:../cleanflight/src/main/rx/spektrum.c ****     }
  94:../cleanflight/src/main/rx/spektrum.c **** 
  95:../cleanflight/src/main/rx/spektrum.c ****     if (spekFramePosition < SPEK_FRAME_SIZE) {
 192              	 .loc 3 95 0
 193 0032 0F4B     	 ldr r3,.L13+4
 194 0034 1B78     	 ldrb r3,[r3]
 195 0036 0F2B     	 cmp r3,#15
 196 0038 15D8     	 bhi .L9
  96:../cleanflight/src/main/rx/spektrum.c ****         spekFrame[spekFramePosition++] = (uint8_t)c;
 197              	 .loc 3 96 0
 198 003a 0D4B     	 ldr r3,.L13+4
 199 003c 1B78     	 ldrb r3,[r3]
 200 003e 5A1C     	 adds r2,r3,#1
 201 0040 D1B2     	 uxtb r1,r2
 202 0042 0B4A     	 ldr r2,.L13+4
 203 0044 1170     	 strb r1,[r2]
 204 0046 1A46     	 mov r2,r3
 205 0048 FB88     	 ldrh r3,[r7,#6]
 206 004a D9B2     	 uxtb r1,r3
 207 004c 094B     	 ldr r3,.L13+8
 208 004e 9954     	 strb r1,[r3,r2]
  97:../cleanflight/src/main/rx/spektrum.c ****         if (spekFramePosition < SPEK_FRAME_SIZE) {
 209              	 .loc 3 97 0
 210 0050 074B     	 ldr r3,.L13+4
 211 0052 1B78     	 ldrb r3,[r3]
 212 0054 0F2B     	 cmp r3,#15
 213 0056 03D8     	 bhi .L12
  98:../cleanflight/src/main/rx/spektrum.c ****             rcFrameComplete = false;
 214              	 .loc 3 98 0
 215 0058 074B     	 ldr r3,.L13+12
 216 005a 0022     	 movs r2,#0
 217 005c 1A70     	 strb r2,[r3]
 218 005e 02E0     	 b .L9
 219              	.L12:
  99:../cleanflight/src/main/rx/spektrum.c ****         } else {
 100:../cleanflight/src/main/rx/spektrum.c ****             rcFrameComplete = true;
 220              	 .loc 3 100 0
 221 0060 054B     	 ldr r3,.L13+12
 222 0062 0122     	 movs r2,#1
 223 0064 1A70     	 strb r2,[r3]
 224              	.L9:
 101:../cleanflight/src/main/rx/spektrum.c ****         }
 102:../cleanflight/src/main/rx/spektrum.c ****     }
 103:../cleanflight/src/main/rx/spektrum.c **** }
 225              	 .loc 3 103 0
 226 0066 1037     	 adds r7,r7,#16
 227              	.LCFI11:
 228              	 .cfi_def_cfa_offset 8
 229 0068 BD46     	 mov sp,r7
 230              	.LCFI12:
 231              	 .cfi_def_cfa_register 13
 232              	 
 233 006a 80BD     	 pop {r7,pc}
 234              	.L14:
 235              	 .align 2
 236              	.L13:
 237 006c 00000000 	 .word spekTimeLast.12646
 238 0070 00000000 	 .word spekFramePosition.12647
 239 0074 00000000 	 .word spekFrame
 240 0078 00000000 	 .word rcFrameComplete
 241              	 .cfi_endproc
 242              	.LFE551:
 244              	 .comm spekChannelData,48,4
 245              	 .section .text.spektrumFrameStatus,"ax",%progbits
 246              	 .align 2
 247              	 .thumb
 248              	 .thumb_func
 250              	spektrumFrameStatus:
 251              	.LFB552:
 104:../cleanflight/src/main/rx/spektrum.c **** 
 105:../cleanflight/src/main/rx/spektrum.c **** 
 106:../cleanflight/src/main/rx/spektrum.c **** uint32_t spekChannelData[SPEKTRUM_MAX_SUPPORTED_CHANNEL_COUNT];
 107:../cleanflight/src/main/rx/spektrum.c **** 
 108:../cleanflight/src/main/rx/spektrum.c **** static uint8_t spektrumFrameStatus(rxRuntimeConfig_t *rxRuntimeConfig)
 109:../cleanflight/src/main/rx/spektrum.c **** {
 252              	 .loc 3 109 0
 253              	 .cfi_startproc
 254              	 
 255              	 
 256 0000 80B5     	 push {r7,lr}
 257              	.LCFI13:
 258              	 .cfi_def_cfa_offset 8
 259              	 .cfi_offset 7,-8
 260              	 .cfi_offset 14,-4
 261 0002 86B0     	 sub sp,sp,#24
 262              	.LCFI14:
 263              	 .cfi_def_cfa_offset 32
 264 0004 00AF     	 add r7,sp,#0
 265              	.LCFI15:
 266              	 .cfi_def_cfa_register 7
 267 0006 7860     	 str r0,[r7,#4]
 110:../cleanflight/src/main/rx/spektrum.c ****     UNUSED(rxRuntimeConfig);
 111:../cleanflight/src/main/rx/spektrum.c **** 
 112:../cleanflight/src/main/rx/spektrum.c ****     if (!rcFrameComplete) {
 268              	 .loc 3 112 0
 269 0008 3D4B     	 ldr r3,.L24
 270 000a 1B78     	 ldrb r3,[r3]
 271 000c 83F00103 	 eor r3,r3,#1
 272 0010 DBB2     	 uxtb r3,r3
 273 0012 002B     	 cmp r3,#0
 274 0014 01D0     	 beq .L16
 113:../cleanflight/src/main/rx/spektrum.c ****         return RX_FRAME_PENDING;
 275              	 .loc 3 113 0
 276 0016 0023     	 movs r3,#0
 277 0018 6DE0     	 b .L17
 278              	.L16:
 114:../cleanflight/src/main/rx/spektrum.c ****     }
 115:../cleanflight/src/main/rx/spektrum.c **** 
 116:../cleanflight/src/main/rx/spektrum.c ****     rcFrameComplete = false;
 279              	 .loc 3 116 0
 280 001a 394B     	 ldr r3,.L24
 281 001c 0022     	 movs r2,#0
 282 001e 1A70     	 strb r2,[r3]
 117:../cleanflight/src/main/rx/spektrum.c **** 
 118:../cleanflight/src/main/rx/spektrum.c **** #if defined(USE_SPEKTRUM_REAL_RSSI) || defined(USE_SPEKTRUM_FAKE_RSSI)
 119:../cleanflight/src/main/rx/spektrum.c ****     spektrumHandleRSSI(spekFrame);
 283              	 .loc 3 119 0
 284 0020 3848     	 ldr r0,.L24+4
 285 0022 FFF7FEFF 	 bl spektrumHandleRSSI
 120:../cleanflight/src/main/rx/spektrum.c **** #endif
 121:../cleanflight/src/main/rx/spektrum.c **** 
 122:../cleanflight/src/main/rx/spektrum.c ****     // Get the VTX control bytes in a frame
 123:../cleanflight/src/main/rx/spektrum.c ****     uint32_t vtxControl = ((spekFrame[SPEKTRUM_VTX_CONTROL_1] << 24) |
 286              	 .loc 3 123 0
 287 0026 374B     	 ldr r3,.L24+4
 288 0028 1B7B     	 ldrb r3,[r3,#12]
 289 002a DBB2     	 uxtb r3,r3
 290 002c 1A06     	 lsls r2,r3,#24
 124:../cleanflight/src/main/rx/spektrum.c ****                            (spekFrame[SPEKTRUM_VTX_CONTROL_2] << 16) |
 291              	 .loc 3 124 0
 292 002e 354B     	 ldr r3,.L24+4
 293 0030 5B7B     	 ldrb r3,[r3,#13]
 294 0032 DBB2     	 uxtb r3,r3
 295 0034 1B04     	 lsls r3,r3,#16
 123:../cleanflight/src/main/rx/spektrum.c ****                            (spekFrame[SPEKTRUM_VTX_CONTROL_2] << 16) |
 296              	 .loc 3 123 0
 297 0036 1A43     	 orrs r2,r2,r3
 125:../cleanflight/src/main/rx/spektrum.c ****                            (spekFrame[SPEKTRUM_VTX_CONTROL_3] <<  8) |
 298              	 .loc 3 125 0
 299 0038 324B     	 ldr r3,.L24+4
 300 003a 9B7B     	 ldrb r3,[r3,#14]
 301 003c DBB2     	 uxtb r3,r3
 302 003e 1B02     	 lsls r3,r3,#8
 124:../cleanflight/src/main/rx/spektrum.c ****                            (spekFrame[SPEKTRUM_VTX_CONTROL_2] << 16) |
 303              	 .loc 3 124 0
 304 0040 1343     	 orrs r3,r3,r2
 126:../cleanflight/src/main/rx/spektrum.c ****                            (spekFrame[SPEKTRUM_VTX_CONTROL_4] <<  0) );
 305              	 .loc 3 126 0
 306 0042 304A     	 ldr r2,.L24+4
 307 0044 D27B     	 ldrb r2,[r2,#15]
 308 0046 D2B2     	 uxtb r2,r2
 125:../cleanflight/src/main/rx/spektrum.c ****                            (spekFrame[SPEKTRUM_VTX_CONTROL_3] <<  8) |
 309              	 .loc 3 125 0
 310 0048 1343     	 orrs r3,r3,r2
 123:../cleanflight/src/main/rx/spektrum.c ****                            (spekFrame[SPEKTRUM_VTX_CONTROL_2] << 16) |
 311              	 .loc 3 123 0
 312 004a FB60     	 str r3,[r7,#12]
 127:../cleanflight/src/main/rx/spektrum.c **** 
 128:../cleanflight/src/main/rx/spektrum.c ****     int8_t spektrumRcDataSize;
 129:../cleanflight/src/main/rx/spektrum.c ****     // Handle VTX control frame.
 130:../cleanflight/src/main/rx/spektrum.c ****     if ((vtxControl & SPEKTRUM_VTX_CONTROL_FRAME_MASK) == SPEKTRUM_VTX_CONTROL_FRAME &&
 313              	 .loc 3 130 0
 314 004c FB68     	 ldr r3,[r7,#12]
 315 004e 03F0F023 	 and r3,r3,#-268374016
 316 0052 B3F1E02F 	 cmp r3,#-536813568
 317 0056 0CD1     	 bne .L18
 131:../cleanflight/src/main/rx/spektrum.c ****         (spekFrame[2] & 0x80) == 0 )  {
 318              	 .loc 3 131 0 discriminator 1
 319 0058 2A4B     	 ldr r3,.L24+4
 320 005a 9B78     	 ldrb r3,[r3,#2]
 321 005c DBB2     	 uxtb r3,r3
 322 005e DBB2     	 uxtb r3,r3
 130:../cleanflight/src/main/rx/spektrum.c ****         (spekFrame[2] & 0x80) == 0 )  {
 323              	 .loc 3 130 0 discriminator 1
 324 0060 5BB2     	 sxtb r3,r3
 325 0062 002B     	 cmp r3,#0
 326 0064 05DB     	 blt .L18
 132:../cleanflight/src/main/rx/spektrum.c **** #if defined(USE_SPEKTRUM_VTX_CONTROL) && defined(USE_VTX_COMMON)
 133:../cleanflight/src/main/rx/spektrum.c ****       spektrumHandleVtxControl(vtxControl);
 327              	 .loc 3 133 0
 328 0066 F868     	 ldr r0,[r7,#12]
 329 0068 FFF7FEFF 	 bl spektrumHandleVtxControl
 134:../cleanflight/src/main/rx/spektrum.c **** #endif
 135:../cleanflight/src/main/rx/spektrum.c ****       spektrumRcDataSize = SPEK_FRAME_SIZE - SPEKTRUM_VTX_CONTROL_SIZE;
 330              	 .loc 3 135 0
 331 006c 0C23     	 movs r3,#12
 332 006e FB75     	 strb r3,[r7,#23]
 333 0070 01E0     	 b .L19
 334              	.L18:
 136:../cleanflight/src/main/rx/spektrum.c ****     } else {
 137:../cleanflight/src/main/rx/spektrum.c ****       spektrumRcDataSize = SPEK_FRAME_SIZE;
 335              	 .loc 3 137 0
 336 0072 1023     	 movs r3,#16
 337 0074 FB75     	 strb r3,[r7,#23]
 338              	.L19:
 339              	.LBB2:
 138:../cleanflight/src/main/rx/spektrum.c ****     }
 139:../cleanflight/src/main/rx/spektrum.c **** 
 140:../cleanflight/src/main/rx/spektrum.c ****     // Get the RC control channel inputs
 141:../cleanflight/src/main/rx/spektrum.c ****     for (int b = 3; b < spektrumRcDataSize; b += 2) {
 340              	 .loc 3 141 0
 341 0076 0323     	 movs r3,#3
 342 0078 3B61     	 str r3,[r7,#16]
 343 007a 36E0     	 b .L20
 344              	.L23:
 345              	.LBB3:
 142:../cleanflight/src/main/rx/spektrum.c ****         const uint8_t spekChannel = 0x0F & (spekFrame[b - 1] >> spek_chan_shift);
 346              	 .loc 3 142 0
 347 007c 3B69     	 ldr r3,[r7,#16]
 348 007e 013B     	 subs r3,r3,#1
 349 0080 204A     	 ldr r2,.L24+4
 350 0082 D35C     	 ldrb r3,[r2,r3]
 351 0084 DBB2     	 uxtb r3,r3
 352 0086 1A46     	 mov r2,r3
 353 0088 1F4B     	 ldr r3,.L24+8
 354 008a 1B78     	 ldrb r3,[r3]
 355 008c 42FA03F3 	 asr r3,r2,r3
 356 0090 DBB2     	 uxtb r3,r3
 357 0092 03F00F03 	 and r3,r3,#15
 358 0096 FB72     	 strb r3,[r7,#11]
 143:../cleanflight/src/main/rx/spektrum.c ****         if (spekChannel < rxRuntimeConfigPtr->channelCount && spekChannel < SPEKTRUM_MAX_SUPPORTED_
 359              	 .loc 3 143 0
 360 0098 1C4B     	 ldr r3,.L24+12
 361 009a 1B68     	 ldr r3,[r3]
 362 009c 1B78     	 ldrb r3,[r3]
 363 009e FA7A     	 ldrb r2,[r7,#11]
 364 00a0 9A42     	 cmp r2,r3
 365 00a2 1FD2     	 bcs .L21
 366              	 .loc 3 143 0 is_stmt 0 discriminator 1
 367 00a4 FB7A     	 ldrb r3,[r7,#11]
 368 00a6 0B2B     	 cmp r3,#11
 369 00a8 1CD8     	 bhi .L21
 144:../cleanflight/src/main/rx/spektrum.c ****             if (rssi_channel == 0 || spekChannel != rssi_channel) {
 370              	 .loc 3 144 0 is_stmt 1
 371 00aa 194B     	 ldr r3,.L24+16
 372 00ac 1B78     	 ldrb r3,[r3]
 373 00ae 002B     	 cmp r3,#0
 374 00b0 04D0     	 beq .L22
 375              	 .loc 3 144 0 is_stmt 0 discriminator 1
 376 00b2 174B     	 ldr r3,.L24+16
 377 00b4 1B78     	 ldrb r3,[r3]
 378 00b6 FA7A     	 ldrb r2,[r7,#11]
 379 00b8 9A42     	 cmp r2,r3
 380 00ba 13D0     	 beq .L21
 381              	.L22:
 145:../cleanflight/src/main/rx/spektrum.c ****                 spekChannelData[spekChannel] = ((uint32_t)(spekFrame[b - 1] & spek_chan_mask) << 8)
 382              	 .loc 3 145 0 is_stmt 1
 383 00bc FB7A     	 ldrb r3,[r7,#11]
 384 00be 3A69     	 ldr r2,[r7,#16]
 385 00c0 013A     	 subs r2,r2,#1
 386 00c2 1049     	 ldr r1,.L24+4
 387 00c4 8A5C     	 ldrb r2,[r1,r2]
 388 00c6 D1B2     	 uxtb r1,r2
 389 00c8 124A     	 ldr r2,.L24+20
 390 00ca 1278     	 ldrb r2,[r2]
 391 00cc 0A40     	 ands r2,r2,r1
 392 00ce D2B2     	 uxtb r2,r2
 393 00d0 1202     	 lsls r2,r2,#8
 394 00d2 0C48     	 ldr r0,.L24+4
 395 00d4 3969     	 ldr r1,[r7,#16]
 396 00d6 0144     	 add r1,r1,r0
 397 00d8 0978     	 ldrb r1,[r1]
 398 00da C9B2     	 uxtb r1,r1
 399 00dc 0A44     	 add r2,r2,r1
 400 00de 0E49     	 ldr r1,.L24+24
 401 00e0 41F82320 	 str r2,[r1,r3,lsl#2]
 402              	.L21:
 403              	.LBE3:
 141:../cleanflight/src/main/rx/spektrum.c ****         const uint8_t spekChannel = 0x0F & (spekFrame[b - 1] >> spek_chan_shift);
 404              	 .loc 3 141 0 discriminator 2
 405 00e4 3B69     	 ldr r3,[r7,#16]
 406 00e6 0233     	 adds r3,r3,#2
 407 00e8 3B61     	 str r3,[r7,#16]
 408              	.L20:
 141:../cleanflight/src/main/rx/spektrum.c ****         const uint8_t spekChannel = 0x0F & (spekFrame[b - 1] >> spek_chan_shift);
 409              	 .loc 3 141 0 is_stmt 0 discriminator 1
 410 00ea 97F91720 	 ldrsb r2,[r7,#23]
 411 00ee 3B69     	 ldr r3,[r7,#16]
 412 00f0 9A42     	 cmp r2,r3
 413 00f2 C3DC     	 bgt .L23
 414              	.LBE2:
 146:../cleanflight/src/main/rx/spektrum.c ****             }
 147:../cleanflight/src/main/rx/spektrum.c ****         }
 148:../cleanflight/src/main/rx/spektrum.c ****     }
 149:../cleanflight/src/main/rx/spektrum.c **** 
 150:../cleanflight/src/main/rx/spektrum.c **** #if defined(USE_TELEMETRY) && defined(USE_TELEMETRY_SRXL)
 151:../cleanflight/src/main/rx/spektrum.c ****     if (srxlEnabled) {
 152:../cleanflight/src/main/rx/spektrum.c ****         /* Only dispatch for transmission if there are some data in buffer AND servos in phase 0 */
 153:../cleanflight/src/main/rx/spektrum.c ****         if (telemetryBufLen && (spekFrame[2] & 0x80) == 0) {
 154:../cleanflight/src/main/rx/spektrum.c ****             dispatchAdd(&srxlTelemetryDispatch, SPEKTRUM_TELEMETRY_FRAME_DELAY);
 155:../cleanflight/src/main/rx/spektrum.c ****         }
 156:../cleanflight/src/main/rx/spektrum.c **** 
 157:../cleanflight/src/main/rx/spektrum.c ****         /* Trigger tm data collection if buffer has been sent and is empty, 
 158:../cleanflight/src/main/rx/spektrum.c ****            so data will be ready to transmit in the next phase 0 */
 159:../cleanflight/src/main/rx/spektrum.c ****         if (telemetryBufLen == 0) {
 160:../cleanflight/src/main/rx/spektrum.c ****             srxlCollectTelemetryNow();
 161:../cleanflight/src/main/rx/spektrum.c ****         }
 162:../cleanflight/src/main/rx/spektrum.c ****     }
 163:../cleanflight/src/main/rx/spektrum.c **** #endif
 164:../cleanflight/src/main/rx/spektrum.c **** 
 165:../cleanflight/src/main/rx/spektrum.c ****     return RX_FRAME_COMPLETE;
 415              	 .loc 3 165 0 is_stmt 1
 416 00f4 0123     	 movs r3,#1
 417              	.L17:
 166:../cleanflight/src/main/rx/spektrum.c **** }
 418              	 .loc 3 166 0
 419 00f6 1846     	 mov r0,r3
 420 00f8 1837     	 adds r7,r7,#24
 421              	.LCFI16:
 422              	 .cfi_def_cfa_offset 8
 423 00fa BD46     	 mov sp,r7
 424              	.LCFI17:
 425              	 .cfi_def_cfa_register 13
 426              	 
 427 00fc 80BD     	 pop {r7,pc}
 428              	.L25:
 429 00fe 00BF     	 .align 2
 430              	.L24:
 431 0100 00000000 	 .word rcFrameComplete
 432 0104 00000000 	 .word spekFrame
 433 0108 00000000 	 .word spek_chan_shift
 434 010c 00000000 	 .word rxRuntimeConfigPtr
 435 0110 00000000 	 .word rssi_channel
 436 0114 00000000 	 .word spek_chan_mask
 437 0118 00000000 	 .word spekChannelData
 438              	 .cfi_endproc
 439              	.LFE552:
 441              	 .section .text.spektrumReadRawRC,"ax",%progbits
 442              	 .align 2
 443              	 .thumb
 444              	 .thumb_func
 446              	spektrumReadRawRC:
 447              	.LFB553:
 167:../cleanflight/src/main/rx/spektrum.c **** 
 168:../cleanflight/src/main/rx/spektrum.c **** static uint16_t spektrumReadRawRC(const rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan)
 169:../cleanflight/src/main/rx/spektrum.c **** {
 448              	 .loc 3 169 0
 449              	 .cfi_startproc
 450              	 
 451              	 
 452              	 
 453 0000 80B4     	 push {r7}
 454              	.LCFI18:
 455              	 .cfi_def_cfa_offset 4
 456              	 .cfi_offset 7,-4
 457 0002 85B0     	 sub sp,sp,#20
 458              	.LCFI19:
 459              	 .cfi_def_cfa_offset 24
 460 0004 00AF     	 add r7,sp,#0
 461              	.LCFI20:
 462              	 .cfi_def_cfa_register 7
 463 0006 7860     	 str r0,[r7,#4]
 464 0008 0B46     	 mov r3,r1
 465 000a FB70     	 strb r3,[r7,#3]
 170:../cleanflight/src/main/rx/spektrum.c ****     uint16_t data;
 171:../cleanflight/src/main/rx/spektrum.c **** 
 172:../cleanflight/src/main/rx/spektrum.c ****     if (chan >= rxRuntimeConfig->channelCount) {
 466              	 .loc 3 172 0
 467 000c 7B68     	 ldr r3,[r7,#4]
 468 000e 1B78     	 ldrb r3,[r3]
 469 0010 FA78     	 ldrb r2,[r7,#3]
 470 0012 9A42     	 cmp r2,r3
 471 0014 01D3     	 bcc .L27
 173:../cleanflight/src/main/rx/spektrum.c ****         return 0;
 472              	 .loc 3 173 0
 473 0016 0023     	 movs r3,#0
 474 0018 16E0     	 b .L28
 475              	.L27:
 174:../cleanflight/src/main/rx/spektrum.c ****     }
 175:../cleanflight/src/main/rx/spektrum.c **** 
 176:../cleanflight/src/main/rx/spektrum.c ****     if (spekHiRes)
 476              	 .loc 3 176 0
 477 001a 0E4B     	 ldr r3,.L31
 478 001c 1B78     	 ldrb r3,[r3]
 479 001e 002B     	 cmp r3,#0
 480 0020 09D0     	 beq .L29
 177:../cleanflight/src/main/rx/spektrum.c ****         data = 988 + (spekChannelData[chan] >> 1);   // 2048 mode
 481              	 .loc 3 177 0
 482 0022 FB78     	 ldrb r3,[r7,#3]
 483 0024 0C4A     	 ldr r2,.L31+4
 484 0026 52F82330 	 ldr r3,[r2,r3,lsl#2]
 485 002a 5B08     	 lsrs r3,r3,#1
 486 002c 9BB2     	 uxth r3,r3
 487 002e 03F57773 	 add r3,r3,#988
 488 0032 FB81     	 strh r3,[r7,#14]
 489 0034 07E0     	 b .L30
 490              	.L29:
 178:../cleanflight/src/main/rx/spektrum.c ****     else
 179:../cleanflight/src/main/rx/spektrum.c ****         data = 988 + spekChannelData[chan];          // 1024 mode
 491              	 .loc 3 179 0
 492 0036 FB78     	 ldrb r3,[r7,#3]
 493 0038 074A     	 ldr r2,.L31+4
 494 003a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 495 003e 9BB2     	 uxth r3,r3
 496 0040 03F57773 	 add r3,r3,#988
 497 0044 FB81     	 strh r3,[r7,#14]
 498              	.L30:
 180:../cleanflight/src/main/rx/spektrum.c **** 
 181:../cleanflight/src/main/rx/spektrum.c ****     return data;
 499              	 .loc 3 181 0
 500 0046 FB89     	 ldrh r3,[r7,#14]
 501              	.L28:
 182:../cleanflight/src/main/rx/spektrum.c **** }
 502              	 .loc 3 182 0
 503 0048 1846     	 mov r0,r3
 504 004a 1437     	 adds r7,r7,#20
 505              	.LCFI21:
 506              	 .cfi_def_cfa_offset 4
 507 004c BD46     	 mov sp,r7
 508              	.LCFI22:
 509              	 .cfi_def_cfa_register 13
 510              	 
 511 004e 5DF8047B 	 ldr r7,[sp],#4
 512              	.LCFI23:
 513              	 .cfi_restore 7
 514              	 .cfi_def_cfa_offset 0
 515 0052 7047     	 bx lr
 516              	.L32:
 517              	 .align 2
 518              	.L31:
 519 0054 00000000 	 .word spekHiRes
 520 0058 00000000 	 .word spekChannelData
 521              	 .cfi_endproc
 522              	.LFE553:
 524              	 .section .text.spekShouldBind,"ax",%progbits
 525              	 .align 2
 526              	 .global spekShouldBind
 527              	 .thumb
 528              	 .thumb_func
 530              	spekShouldBind:
 531              	.LFB554:
 183:../cleanflight/src/main/rx/spektrum.c **** 
 184:../cleanflight/src/main/rx/spektrum.c **** #ifdef USE_SPEKTRUM_BIND
 185:../cleanflight/src/main/rx/spektrum.c **** 
 186:../cleanflight/src/main/rx/spektrum.c **** bool spekShouldBind(uint8_t spektrum_sat_bind)
 187:../cleanflight/src/main/rx/spektrum.c **** {
 532              	 .loc 3 187 0
 533              	 .cfi_startproc
 534              	 
 535              	 
 536 0000 80B5     	 push {r7,lr}
 537              	.LCFI24:
 538              	 .cfi_def_cfa_offset 8
 539              	 .cfi_offset 7,-8
 540              	 .cfi_offset 14,-4
 541 0002 84B0     	 sub sp,sp,#16
 542              	.LCFI25:
 543              	 .cfi_def_cfa_offset 24
 544 0004 00AF     	 add r7,sp,#0
 545              	.LCFI26:
 546              	 .cfi_def_cfa_register 7
 547 0006 0346     	 mov r3,r0
 548 0008 FB71     	 strb r3,[r7,#7]
 188:../cleanflight/src/main/rx/spektrum.c **** #ifdef USE_SPEKTRUM_BIND_PLUG
 189:../cleanflight/src/main/rx/spektrum.c ****     IO_t BindPlug = IOGetByTag(rxConfig()->spektrum_bind_plug_ioTag);
 549              	 .loc 3 189 0
 550 000a FFF7FEFF 	 bl rxConfig
 551 000e 0346     	 mov r3,r0
 552 0010 1B7B     	 ldrb r3,[r3,#12]
 553 0012 1846     	 mov r0,r3
 554 0014 FFF7FEFF 	 bl IOGetByTag
 555 0018 F860     	 str r0,[r7,#12]
 190:../cleanflight/src/main/rx/spektrum.c **** 
 191:../cleanflight/src/main/rx/spektrum.c ****     if (BindPlug) {
 556              	 .loc 3 191 0
 557 001a FB68     	 ldr r3,[r7,#12]
 558 001c 002B     	 cmp r3,#0
 559 001e 13D0     	 beq .L34
 192:../cleanflight/src/main/rx/spektrum.c ****         IOInit(BindPlug, OWNER_RX_BIND, 0);
 560              	 .loc 3 192 0
 561 0020 F868     	 ldr r0,[r7,#12]
 562 0022 2721     	 movs r1,#39
 563 0024 0022     	 movs r2,#0
 564 0026 FFF7FEFF 	 bl IOInit
 193:../cleanflight/src/main/rx/spektrum.c ****         IOConfigGPIO(BindPlug, IOCFG_IPU);
 565              	 .loc 3 193 0
 566 002a F868     	 ldr r0,[r7,#12]
 567 002c 1021     	 movs r1,#16
 568 002e FFF7FEFF 	 bl IOConfigGPIO
 194:../cleanflight/src/main/rx/spektrum.c **** 
 195:../cleanflight/src/main/rx/spektrum.c ****         // Check status of bind plug and exit if not active
 196:../cleanflight/src/main/rx/spektrum.c ****         delayMicroseconds(10);  // allow configuration to settle
 569              	 .loc 3 196 0
 570 0032 0A20     	 movs r0,#10
 571 0034 FFF7FEFF 	 bl delayMicroseconds
 197:../cleanflight/src/main/rx/spektrum.c ****         if (IORead(BindPlug)) {
 572              	 .loc 3 197 0
 573 0038 F868     	 ldr r0,[r7,#12]
 574 003a FFF7FEFF 	 bl IORead
 575 003e 0346     	 mov r3,r0
 576 0040 002B     	 cmp r3,#0
 577 0042 01D0     	 beq .L34
 198:../cleanflight/src/main/rx/spektrum.c ****             return false;
 578              	 .loc 3 198 0
 579 0044 0023     	 movs r3,#0
 580 0046 13E0     	 b .L35
 581              	.L34:
 199:../cleanflight/src/main/rx/spektrum.c ****         }
 200:../cleanflight/src/main/rx/spektrum.c ****     }
 201:../cleanflight/src/main/rx/spektrum.c **** #endif // USE_SPEKTRUM_BIND_PLUG
 202:../cleanflight/src/main/rx/spektrum.c **** 
 203:../cleanflight/src/main/rx/spektrum.c ****     return !(
 204:../cleanflight/src/main/rx/spektrum.c ****         isMPUSoftReset() ||
 582              	 .loc 3 204 0
 583 0048 FFF7FEFF 	 bl isMPUSoftReset
 584 004c 0346     	 mov r3,r0
 585 004e 83F00103 	 eor r3,r3,#1
 586 0052 DBB2     	 uxtb r3,r3
 203:../cleanflight/src/main/rx/spektrum.c ****         isMPUSoftReset() ||
 587              	 .loc 3 203 0
 588 0054 002B     	 cmp r3,#0
 589 0056 07D0     	 beq .L36
 590              	 .loc 3 204 0
 591 0058 FB79     	 ldrb r3,[r7,#7]
 592 005a 002B     	 cmp r3,#0
 593 005c 04D0     	 beq .L36
 203:../cleanflight/src/main/rx/spektrum.c ****         isMPUSoftReset() ||
 594              	 .loc 3 203 0 discriminator 3
 595 005e FB79     	 ldrb r3,[r7,#7]
 596 0060 0A2B     	 cmp r3,#10
 597 0062 01D8     	 bhi .L36
 203:../cleanflight/src/main/rx/spektrum.c ****         isMPUSoftReset() ||
 598              	 .loc 3 203 0 is_stmt 0 discriminator 2
 599 0064 0123     	 movs r3,#1
 600 0066 00E0     	 b .L37
 601              	.L36:
 203:../cleanflight/src/main/rx/spektrum.c ****         isMPUSoftReset() ||
 602              	 .loc 3 203 0 discriminator 1
 603 0068 0023     	 movs r3,#0
 604              	.L37:
 203:../cleanflight/src/main/rx/spektrum.c ****         isMPUSoftReset() ||
 605              	 .loc 3 203 0 discriminator 5
 606 006a 03F00103 	 and r3,r3,#1
 607 006e DBB2     	 uxtb r3,r3
 608              	.L35:
 205:../cleanflight/src/main/rx/spektrum.c ****         spektrum_sat_bind == SPEKTRUM_SAT_BIND_DISABLED ||
 206:../cleanflight/src/main/rx/spektrum.c ****         spektrum_sat_bind > SPEKTRUM_SAT_BIND_MAX
 207:../cleanflight/src/main/rx/spektrum.c ****     );
 208:../cleanflight/src/main/rx/spektrum.c **** }
 609              	 .loc 3 208 0 is_stmt 1
 610 0070 1846     	 mov r0,r3
 611 0072 1037     	 adds r7,r7,#16
 612              	.LCFI27:
 613              	 .cfi_def_cfa_offset 8
 614 0074 BD46     	 mov sp,r7
 615              	.LCFI28:
 616              	 .cfi_def_cfa_register 13
 617              	 
 618 0076 80BD     	 pop {r7,pc}
 619              	 .cfi_endproc
 620              	.LFE554:
 622              	 .section .text.spektrumBind,"ax",%progbits
 623              	 .align 2
 624              	 .global spektrumBind
 625              	 .thumb
 626              	 .thumb_func
 628              	spektrumBind:
 629              	.LFB555:
 209:../cleanflight/src/main/rx/spektrum.c **** 
 210:../cleanflight/src/main/rx/spektrum.c **** /* spektrumBind function ported from Baseflight. It's used to bind satellite receiver to TX.
 211:../cleanflight/src/main/rx/spektrum.c ****  * Function must be called immediately after startup so that we don't miss satellite bind window.
 212:../cleanflight/src/main/rx/spektrum.c ****  * Known parameters. Tested with DSMX satellite and DX8 radio. Framerate (11ms or 22ms) must be sel
 213:../cleanflight/src/main/rx/spektrum.c ****  * 9 = DSMX 11ms / DSMX 22ms
 214:../cleanflight/src/main/rx/spektrum.c ****  * 5 = DSM2 11ms 2048 / DSM2 22ms 1024
 215:../cleanflight/src/main/rx/spektrum.c ****  */
 216:../cleanflight/src/main/rx/spektrum.c **** void spektrumBind(rxConfig_t *rxConfig)
 217:../cleanflight/src/main/rx/spektrum.c **** {
 630              	 .loc 3 217 0
 631              	 .cfi_startproc
 632              	 
 633              	 
 634 0000 80B5     	 push {r7,lr}
 635              	.LCFI29:
 636              	 .cfi_def_cfa_offset 8
 637              	 .cfi_offset 7,-8
 638              	 .cfi_offset 14,-4
 639 0002 88B0     	 sub sp,sp,#32
 640              	.LCFI30:
 641              	 .cfi_def_cfa_offset 40
 642 0004 00AF     	 add r7,sp,#0
 643              	.LCFI31:
 644              	 .cfi_def_cfa_register 7
 645 0006 7860     	 str r0,[r7,#4]
 218:../cleanflight/src/main/rx/spektrum.c ****     if (!spekShouldBind(rxConfig->spektrum_sat_bind)) {
 646              	 .loc 3 218 0
 647 0008 7B68     	 ldr r3,[r7,#4]
 648 000a 5B7B     	 ldrb r3,[r3,#13]
 649 000c 1846     	 mov r0,r3
 650 000e FFF7FEFF 	 bl spekShouldBind
 651 0012 0346     	 mov r3,r0
 652 0014 83F00103 	 eor r3,r3,#1
 653 0018 DBB2     	 uxtb r3,r3
 654 001a 002B     	 cmp r3,#0
 655 001c 00D0     	 beq .L39
 219:../cleanflight/src/main/rx/spektrum.c ****         return;
 656              	 .loc 3 219 0
 657 001e A1E0     	 b .L38
 658              	.L39:
 220:../cleanflight/src/main/rx/spektrum.c ****     }
 221:../cleanflight/src/main/rx/spektrum.c **** 
 222:../cleanflight/src/main/rx/spektrum.c ****     // Determine a pin to use
 223:../cleanflight/src/main/rx/spektrum.c ****     ioTag_t bindPin = IO_TAG_NONE;
 659              	 .loc 3 223 0
 660 0020 0023     	 movs r3,#0
 661 0022 FB77     	 strb r3,[r7,#31]
 224:../cleanflight/src/main/rx/spektrum.c **** 
 225:../cleanflight/src/main/rx/spektrum.c ****     if (rxConfig->spektrum_bind_pin_override_ioTag) {
 662              	 .loc 3 225 0
 663 0024 7B68     	 ldr r3,[r7,#4]
 664 0026 DB7A     	 ldrb r3,[r3,#11]
 665 0028 002B     	 cmp r3,#0
 666 002a 03D0     	 beq .L41
 226:../cleanflight/src/main/rx/spektrum.c ****         bindPin = rxConfig->spektrum_bind_pin_override_ioTag;
 667              	 .loc 3 226 0
 668 002c 7B68     	 ldr r3,[r7,#4]
 669 002e DB7A     	 ldrb r3,[r3,#11]
 670 0030 FB77     	 strb r3,[r7,#31]
 671 0032 30E0     	 b .L42
 672              	.L41:
 673              	.LBB4:
 227:../cleanflight/src/main/rx/spektrum.c ****     } else {
 228:../cleanflight/src/main/rx/spektrum.c ****         const serialPortConfig_t *portConfig = findSerialPortConfig(FUNCTION_RX_SERIAL);
 674              	 .loc 3 228 0
 675 0034 4020     	 movs r0,#64
 676 0036 FFF7FEFF 	 bl findSerialPortConfig
 677 003a 7861     	 str r0,[r7,#20]
 229:../cleanflight/src/main/rx/spektrum.c ****         if (!portConfig) {
 678              	 .loc 3 229 0
 679 003c 7B69     	 ldr r3,[r7,#20]
 680 003e 002B     	 cmp r3,#0
 681 0040 00D1     	 bne .L43
 230:../cleanflight/src/main/rx/spektrum.c ****             return;
 682              	 .loc 3 230 0 discriminator 2
 683 0042 8FE0     	 b .L38
 684              	.L43:
 231:../cleanflight/src/main/rx/spektrum.c ****         }
 232:../cleanflight/src/main/rx/spektrum.c **** 
 233:../cleanflight/src/main/rx/spektrum.c ****         int index = SERIAL_PORT_IDENTIFIER_TO_INDEX(portConfig->identifier);
 685              	 .loc 3 233 0
 686 0044 7B69     	 ldr r3,[r7,#20]
 687 0046 9B78     	 ldrb r3,[r3,#2]
 688 0048 5BB2     	 sxtb r3,r3
 689 004a 072B     	 cmp r3,#7
 690 004c 03DC     	 bgt .L44
 691              	 .loc 3 233 0 is_stmt 0 discriminator 1
 692 004e 7B69     	 ldr r3,[r7,#20]
 693 0050 9B78     	 ldrb r3,[r3,#2]
 694 0052 5BB2     	 sxtb r3,r3
 695 0054 03E0     	 b .L45
 696              	.L44:
 697              	 .loc 3 233 0 discriminator 2
 698 0056 7B69     	 ldr r3,[r7,#20]
 699 0058 9B78     	 ldrb r3,[r3,#2]
 700 005a 5BB2     	 sxtb r3,r3
 701 005c 143B     	 subs r3,r3,#20
 702              	.L45:
 703              	 .loc 3 233 0 discriminator 4
 704 005e 3B61     	 str r3,[r7,#16]
 234:../cleanflight/src/main/rx/spektrum.c ****         ioTag_t txPin = serialPinConfig()->ioTagTx[index];
 705              	 .loc 3 234 0 is_stmt 1 discriminator 4
 706 0060 FFF7FEFF 	 bl serialPinConfig
 707 0064 0246     	 mov r2,r0
 708 0066 3B69     	 ldr r3,[r7,#16]
 709 0068 1344     	 add r3,r3,r2
 710 006a 1B78     	 ldrb r3,[r3]
 711 006c FB73     	 strb r3,[r7,#15]
 235:../cleanflight/src/main/rx/spektrum.c ****         ioTag_t rxPin = serialPinConfig()->ioTagRx[index];
 712              	 .loc 3 235 0 discriminator 4
 713 006e FFF7FEFF 	 bl serialPinConfig
 714 0072 0246     	 mov r2,r0
 715 0074 3B69     	 ldr r3,[r7,#16]
 716 0076 1344     	 add r3,r3,r2
 717 0078 0833     	 adds r3,r3,#8
 718 007a 9B78     	 ldrb r3,[r3,#2]
 719 007c BB73     	 strb r3,[r7,#14]
 236:../cleanflight/src/main/rx/spektrum.c **** 
 237:../cleanflight/src/main/rx/spektrum.c ****         // Take care half-duplex case
 238:../cleanflight/src/main/rx/spektrum.c ****         switch (rxConfig->serialrx_provider) {
 239:../cleanflight/src/main/rx/spektrum.c ****         case SERIALRX_SRXL:
 240:../cleanflight/src/main/rx/spektrum.c **** #if defined(USE_TELEMETRY) && defined(USE_TELEMETRY_SRXL)
 241:../cleanflight/src/main/rx/spektrum.c ****             if (feature(FEATURE_TELEMETRY) && !telemetryCheckRxPortShared(portConfig)) {
 242:../cleanflight/src/main/rx/spektrum.c ****                 bindPin = txPin;
 243:../cleanflight/src/main/rx/spektrum.c ****             }
 244:../cleanflight/src/main/rx/spektrum.c ****             break;
 245:../cleanflight/src/main/rx/spektrum.c **** #endif // USE_TELEMETRY && USE_TELEMETRY_SRXL
 246:../cleanflight/src/main/rx/spektrum.c **** 
 247:../cleanflight/src/main/rx/spektrum.c ****         default:
 248:../cleanflight/src/main/rx/spektrum.c ****             bindPin = rxConfig->halfDuplex ? txPin : rxPin;
 720              	 .loc 3 248 0 discriminator 4
 721 007e 7B68     	 ldr r3,[r7,#4]
 722 0080 9B7A     	 ldrb r3,[r3,#10]
 723 0082 002B     	 cmp r3,#0
 724 0084 01D0     	 beq .L46
 725              	 .loc 3 248 0 is_stmt 0 discriminator 1
 726 0086 FB7B     	 ldrb r3,[r7,#15]
 727 0088 00E0     	 b .L47
 728              	.L46:
 729              	 .loc 3 248 0 discriminator 2
 730 008a BB7B     	 ldrb r3,[r7,#14]
 731              	.L47:
 732              	 .loc 3 248 0 discriminator 4
 733 008c FB77     	 strb r3,[r7,#31]
 249:../cleanflight/src/main/rx/spektrum.c ****         }
 250:../cleanflight/src/main/rx/spektrum.c **** 
 251:../cleanflight/src/main/rx/spektrum.c ****         if (!bindPin) {
 734              	 .loc 3 251 0 is_stmt 1 discriminator 4
 735 008e FB7F     	 ldrb r3,[r7,#31]
 736 0090 002B     	 cmp r3,#0
 737 0092 00D1     	 bne .L42
 252:../cleanflight/src/main/rx/spektrum.c ****             return;
 738              	 .loc 3 252 0 discriminator 3
 739 0094 66E0     	 b .L38
 740              	.L42:
 741              	.LBE4:
 253:../cleanflight/src/main/rx/spektrum.c ****         }
 254:../cleanflight/src/main/rx/spektrum.c ****     }
 255:../cleanflight/src/main/rx/spektrum.c **** 
 256:../cleanflight/src/main/rx/spektrum.c ****     IO_t bindIO = IOGetByTag(bindPin);
 742              	 .loc 3 256 0
 743 0096 FB7F     	 ldrb r3,[r7,#31]
 744 0098 1846     	 mov r0,r3
 745 009a FFF7FEFF 	 bl IOGetByTag
 746 009e B860     	 str r0,[r7,#8]
 257:../cleanflight/src/main/rx/spektrum.c **** 
 258:../cleanflight/src/main/rx/spektrum.c ****     IOInit(bindIO, OWNER_RX_BIND, 0);
 747              	 .loc 3 258 0
 748 00a0 B868     	 ldr r0,[r7,#8]
 749 00a2 2721     	 movs r1,#39
 750 00a4 0022     	 movs r2,#0
 751 00a6 FFF7FEFF 	 bl IOInit
 259:../cleanflight/src/main/rx/spektrum.c ****     IOConfigGPIO(bindIO, IOCFG_OUT_PP);
 752              	 .loc 3 259 0
 753 00aa B868     	 ldr r0,[r7,#8]
 754 00ac 8021     	 movs r1,#128
 755 00ae FFF7FEFF 	 bl IOConfigGPIO
 260:../cleanflight/src/main/rx/spektrum.c **** 
 261:../cleanflight/src/main/rx/spektrum.c ****     LED1_ON;
 756              	 .loc 3 261 0
 757 00b2 0120     	 movs r0,#1
 758 00b4 0121     	 movs r1,#1
 759 00b6 FFF7FEFF 	 bl ledSet
 262:../cleanflight/src/main/rx/spektrum.c **** 
 263:../cleanflight/src/main/rx/spektrum.c ****     // RX line, set high
 264:../cleanflight/src/main/rx/spektrum.c ****     IOWrite(bindIO, true);
 760              	 .loc 3 264 0
 761 00ba B868     	 ldr r0,[r7,#8]
 762 00bc 0121     	 movs r1,#1
 763 00be FFF7FEFF 	 bl IOWrite
 265:../cleanflight/src/main/rx/spektrum.c **** 
 266:../cleanflight/src/main/rx/spektrum.c ****     // Bind window is around 20-140ms after powerup
 267:../cleanflight/src/main/rx/spektrum.c ****     delay(60);
 764              	 .loc 3 267 0
 765 00c2 3C20     	 movs r0,#60
 766 00c4 FFF7FEFF 	 bl delay
 268:../cleanflight/src/main/rx/spektrum.c ****     LED1_OFF;
 767              	 .loc 3 268 0
 768 00c8 0120     	 movs r0,#1
 769 00ca 0021     	 movs r1,#0
 770 00cc FFF7FEFF 	 bl ledSet
 771              	.LBB5:
 269:../cleanflight/src/main/rx/spektrum.c **** 
 270:../cleanflight/src/main/rx/spektrum.c ****     for (int i = 0; i < rxConfig->spektrum_sat_bind; i++) {
 772              	 .loc 3 270 0
 773 00d0 0023     	 movs r3,#0
 774 00d2 BB61     	 str r3,[r7,#24]
 775 00d4 20E0     	 b .L48
 776              	.L49:
 271:../cleanflight/src/main/rx/spektrum.c ****         LED0_OFF;
 777              	 .loc 3 271 0 discriminator 3
 778 00d6 0020     	 movs r0,#0
 779 00d8 0021     	 movs r1,#0
 780 00da FFF7FEFF 	 bl ledSet
 272:../cleanflight/src/main/rx/spektrum.c ****         LED2_OFF;
 781              	 .loc 3 272 0 discriminator 3
 782 00de 0220     	 movs r0,#2
 783 00e0 0021     	 movs r1,#0
 784 00e2 FFF7FEFF 	 bl ledSet
 273:../cleanflight/src/main/rx/spektrum.c ****         // RX line, drive low for 120us
 274:../cleanflight/src/main/rx/spektrum.c ****         IOWrite(bindIO, false);
 785              	 .loc 3 274 0 discriminator 3
 786 00e6 B868     	 ldr r0,[r7,#8]
 787 00e8 0021     	 movs r1,#0
 788 00ea FFF7FEFF 	 bl IOWrite
 275:../cleanflight/src/main/rx/spektrum.c ****         delayMicroseconds(120);
 789              	 .loc 3 275 0 discriminator 3
 790 00ee 7820     	 movs r0,#120
 791 00f0 FFF7FEFF 	 bl delayMicroseconds
 276:../cleanflight/src/main/rx/spektrum.c **** 
 277:../cleanflight/src/main/rx/spektrum.c ****         LED0_ON;
 792              	 .loc 3 277 0 discriminator 3
 793 00f4 0020     	 movs r0,#0
 794 00f6 0121     	 movs r1,#1
 795 00f8 FFF7FEFF 	 bl ledSet
 278:../cleanflight/src/main/rx/spektrum.c ****         LED2_ON;
 796              	 .loc 3 278 0 discriminator 3
 797 00fc 0220     	 movs r0,#2
 798 00fe 0121     	 movs r1,#1
 799 0100 FFF7FEFF 	 bl ledSet
 279:../cleanflight/src/main/rx/spektrum.c ****         // RX line, drive high for 120us
 280:../cleanflight/src/main/rx/spektrum.c ****         IOWrite(bindIO, true);
 800              	 .loc 3 280 0 discriminator 3
 801 0104 B868     	 ldr r0,[r7,#8]
 802 0106 0121     	 movs r1,#1
 803 0108 FFF7FEFF 	 bl IOWrite
 281:../cleanflight/src/main/rx/spektrum.c ****         delayMicroseconds(120);
 804              	 .loc 3 281 0 discriminator 3
 805 010c 7820     	 movs r0,#120
 806 010e FFF7FEFF 	 bl delayMicroseconds
 270:../cleanflight/src/main/rx/spektrum.c ****         LED0_OFF;
 807              	 .loc 3 270 0 discriminator 3
 808 0112 BB69     	 ldr r3,[r7,#24]
 809 0114 0133     	 adds r3,r3,#1
 810 0116 BB61     	 str r3,[r7,#24]
 811              	.L48:
 270:../cleanflight/src/main/rx/spektrum.c ****         LED0_OFF;
 812              	 .loc 3 270 0 is_stmt 0 discriminator 1
 813 0118 7B68     	 ldr r3,[r7,#4]
 814 011a 5B7B     	 ldrb r3,[r3,#13]
 815 011c 1A46     	 mov r2,r3
 816 011e BB69     	 ldr r3,[r7,#24]
 817 0120 9A42     	 cmp r2,r3
 818 0122 D8DC     	 bgt .L49
 819              	.LBE5:
 282:../cleanflight/src/main/rx/spektrum.c **** 
 283:../cleanflight/src/main/rx/spektrum.c ****     }
 284:../cleanflight/src/main/rx/spektrum.c **** 
 285:../cleanflight/src/main/rx/spektrum.c **** 
 286:../cleanflight/src/main/rx/spektrum.c ****     // Release the bind pin to avoid interference with an actual rx pin,
 287:../cleanflight/src/main/rx/spektrum.c ****     // when rxConfig->spektrum_bind_pin_override_ioTag is used.
 288:../cleanflight/src/main/rx/spektrum.c ****     // This happens when the bind pin is connected in parallel to the rx pin.
 289:../cleanflight/src/main/rx/spektrum.c **** 
 290:../cleanflight/src/main/rx/spektrum.c ****     if (rxConfig->spektrum_bind_pin_override_ioTag) {
 820              	 .loc 3 290 0 is_stmt 1
 821 0124 7B68     	 ldr r3,[r7,#4]
 822 0126 DB7A     	 ldrb r3,[r3,#11]
 823 0128 002B     	 cmp r3,#0
 824 012a 06D0     	 beq .L50
 291:../cleanflight/src/main/rx/spektrum.c ****         delay(50); // Keep it high for 50msec
 825              	 .loc 3 291 0
 826 012c 3220     	 movs r0,#50
 827 012e FFF7FEFF 	 bl delay
 292:../cleanflight/src/main/rx/spektrum.c ****         IOConfigGPIO(bindIO, IOCFG_IN_FLOATING);
 828              	 .loc 3 292 0
 829 0132 B868     	 ldr r0,[r7,#8]
 830 0134 0021     	 movs r1,#0
 831 0136 FFF7FEFF 	 bl IOConfigGPIO
 832              	.L50:
 293:../cleanflight/src/main/rx/spektrum.c ****     }
 294:../cleanflight/src/main/rx/spektrum.c **** 
 295:../cleanflight/src/main/rx/spektrum.c ****     // If we came here as a result of hard  reset (power up, with spektrum_sat_bind set), then rese
 296:../cleanflight/src/main/rx/spektrum.c ****     // Don't reset if hardware bind plug is present
 297:../cleanflight/src/main/rx/spektrum.c ****     // Reset only when autoreset is enabled
 298:../cleanflight/src/main/rx/spektrum.c **** 
 299:../cleanflight/src/main/rx/spektrum.c ****     if (!rxConfig->spektrum_bind_plug_ioTag && rxConfig->spektrum_sat_bind_autoreset == 1 && !isMPU
 833              	 .loc 3 299 0
 834 013a 7B68     	 ldr r3,[r7,#4]
 835 013c 1B7B     	 ldrb r3,[r3,#12]
 836 013e 002B     	 cmp r3,#0
 837 0140 10D1     	 bne .L38
 838              	 .loc 3 299 0 is_stmt 0 discriminator 1
 839 0142 7B68     	 ldr r3,[r7,#4]
 840 0144 9B7B     	 ldrb r3,[r3,#14]
 841 0146 012B     	 cmp r3,#1
 842 0148 0CD1     	 bne .L38
 843              	 .loc 3 299 0 discriminator 2
 844 014a FFF7FEFF 	 bl isMPUSoftReset
 845 014e 0346     	 mov r3,r0
 846 0150 83F00103 	 eor r3,r3,#1
 847 0154 DBB2     	 uxtb r3,r3
 848 0156 002B     	 cmp r3,#0
 849 0158 04D0     	 beq .L38
 300:../cleanflight/src/main/rx/spektrum.c ****         rxConfig->spektrum_sat_bind = 0;
 850              	 .loc 3 300 0 is_stmt 1
 851 015a 7B68     	 ldr r3,[r7,#4]
 852 015c 0022     	 movs r2,#0
 853 015e 5A73     	 strb r2,[r3,#13]
 301:../cleanflight/src/main/rx/spektrum.c ****         saveConfigAndNotify();
 854              	 .loc 3 301 0
 855 0160 FFF7FEFF 	 bl saveConfigAndNotify
 856              	.L38:
 302:../cleanflight/src/main/rx/spektrum.c ****     }
 303:../cleanflight/src/main/rx/spektrum.c **** }
 857              	 .loc 3 303 0
 858 0164 2037     	 adds r7,r7,#32
 859              	.LCFI32:
 860              	 .cfi_def_cfa_offset 8
 861 0166 BD46     	 mov sp,r7
 862              	.LCFI33:
 863              	 .cfi_def_cfa_register 13
 864              	 
 865 0168 80BD     	 pop {r7,pc}
 866              	 .cfi_endproc
 867              	.LFE555:
 869 016a 00BF     	 .section .text.spektrumInit,"ax",%progbits
 870              	 .align 2
 871              	 .global spektrumInit
 872              	 .thumb
 873              	 .thumb_func
 875              	spektrumInit:
 876              	.LFB556:
 304:../cleanflight/src/main/rx/spektrum.c **** #endif // USE_SPEKTRUM_BIND
 305:../cleanflight/src/main/rx/spektrum.c **** 
 306:../cleanflight/src/main/rx/spektrum.c **** bool spektrumInit(const rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig)
 307:../cleanflight/src/main/rx/spektrum.c **** {
 877              	 .loc 3 307 0
 878              	 .cfi_startproc
 879              	 
 880              	 
 881 0000 80B5     	 push {r7,lr}
 882              	.LCFI34:
 883              	 .cfi_def_cfa_offset 8
 884              	 .cfi_offset 7,-8
 885              	 .cfi_offset 14,-4
 886 0002 88B0     	 sub sp,sp,#32
 887              	.LCFI35:
 888              	 .cfi_def_cfa_offset 40
 889 0004 04AF     	 add r7,sp,#16
 890              	.LCFI36:
 891              	 .cfi_def_cfa 7,24
 892 0006 7860     	 str r0,[r7,#4]
 893 0008 3960     	 str r1,[r7]
 308:../cleanflight/src/main/rx/spektrum.c ****     rxRuntimeConfigPtr = rxRuntimeConfig;
 894              	 .loc 3 308 0
 895 000a 554A     	 ldr r2,.L65
 896 000c 3B68     	 ldr r3,[r7]
 897 000e 1360     	 str r3,[r2]
 309:../cleanflight/src/main/rx/spektrum.c **** 
 310:../cleanflight/src/main/rx/spektrum.c ****     const serialPortConfig_t *portConfig = findSerialPortConfig(FUNCTION_RX_SERIAL);
 898              	 .loc 3 310 0
 899 0010 4020     	 movs r0,#64
 900 0012 FFF7FEFF 	 bl findSerialPortConfig
 901 0016 F860     	 str r0,[r7,#12]
 311:../cleanflight/src/main/rx/spektrum.c ****     if (!portConfig) {
 902              	 .loc 3 311 0
 903 0018 FB68     	 ldr r3,[r7,#12]
 904 001a 002B     	 cmp r3,#0
 905 001c 01D1     	 bne .L52
 312:../cleanflight/src/main/rx/spektrum.c ****         return false;
 906              	 .loc 3 312 0
 907 001e 0023     	 movs r3,#0
 908 0020 99E0     	 b .L53
 909              	.L52:
 313:../cleanflight/src/main/rx/spektrum.c ****     }
 314:../cleanflight/src/main/rx/spektrum.c **** 
 315:../cleanflight/src/main/rx/spektrum.c ****     srxlEnabled = false;
 910              	 .loc 3 315 0
 911 0022 504B     	 ldr r3,.L65+4
 912 0024 0022     	 movs r2,#0
 913 0026 1A70     	 strb r2,[r3]
 316:../cleanflight/src/main/rx/spektrum.c **** #if defined(USE_TELEMETRY) && defined(USE_TELEMETRY_SRXL)
 317:../cleanflight/src/main/rx/spektrum.c ****     bool portShared = telemetryCheckRxPortShared(portConfig);
 318:../cleanflight/src/main/rx/spektrum.c **** #else
 319:../cleanflight/src/main/rx/spektrum.c ****     bool portShared = false;
 914              	 .loc 3 319 0
 915 0028 0023     	 movs r3,#0
 916 002a FB72     	 strb r3,[r7,#11]
 320:../cleanflight/src/main/rx/spektrum.c **** #endif
 321:../cleanflight/src/main/rx/spektrum.c **** 
 322:../cleanflight/src/main/rx/spektrum.c ****     switch (rxConfig->serialrx_provider) {
 917              	 .loc 3 322 0
 918 002c 7B68     	 ldr r3,[r7,#4]
 919 002e 1B7A     	 ldrb r3,[r3,#8]
 920 0030 012B     	 cmp r3,#1
 921 0032 04D0     	 beq .L55
 922 0034 0A2B     	 cmp r3,#10
 923 0036 02D0     	 beq .L55
 924 0038 002B     	 cmp r3,#0
 925 003a 1AD0     	 beq .L56
 926 003c 33E0     	 b .L54
 927              	.L55:
 323:../cleanflight/src/main/rx/spektrum.c ****     case SERIALRX_SRXL:
 324:../cleanflight/src/main/rx/spektrum.c **** #if defined(USE_TELEMETRY) && defined(USE_TELEMETRY_SRXL)
 325:../cleanflight/src/main/rx/spektrum.c ****         srxlEnabled = (feature(FEATURE_TELEMETRY) && !portShared);
 326:../cleanflight/src/main/rx/spektrum.c ****         FALLTHROUGH;
 327:../cleanflight/src/main/rx/spektrum.c **** #endif
 328:../cleanflight/src/main/rx/spektrum.c ****     case SERIALRX_SPEKTRUM2048:
 329:../cleanflight/src/main/rx/spektrum.c ****         // 11 bit frames
 330:../cleanflight/src/main/rx/spektrum.c ****         spek_chan_shift = 3;
 928              	 .loc 3 330 0
 929 003e 4A4B     	 ldr r3,.L65+8
 930 0040 0322     	 movs r2,#3
 931 0042 1A70     	 strb r2,[r3]
 331:../cleanflight/src/main/rx/spektrum.c ****         spek_chan_mask = 0x07;
 932              	 .loc 3 331 0
 933 0044 494B     	 ldr r3,.L65+12
 934 0046 0722     	 movs r2,#7
 935 0048 1A70     	 strb r2,[r3]
 332:../cleanflight/src/main/rx/spektrum.c ****         spekHiRes = true;
 936              	 .loc 3 332 0
 937 004a 494B     	 ldr r3,.L65+16
 938 004c 0122     	 movs r2,#1
 939 004e 1A70     	 strb r2,[r3]
 333:../cleanflight/src/main/rx/spektrum.c ****         resolution = 2048;
 940              	 .loc 3 333 0
 941 0050 484B     	 ldr r3,.L65+20
 942 0052 4FF40062 	 mov r2,#2048
 943 0056 1A60     	 str r2,[r3]
 334:../cleanflight/src/main/rx/spektrum.c ****         rxRuntimeConfig->channelCount = SPEKTRUM_2048_CHANNEL_COUNT;
 944              	 .loc 3 334 0
 945 0058 3B68     	 ldr r3,[r7]
 946 005a 0C22     	 movs r2,#12
 947 005c 1A70     	 strb r2,[r3]
 335:../cleanflight/src/main/rx/spektrum.c ****         rxRuntimeConfig->rxRefreshRate = 11000;
 948              	 .loc 3 335 0
 949 005e 3B68     	 ldr r3,[r7]
 950 0060 0022     	 movs r2,#0
 951 0062 62F00702 	 orn r2,r2,#7
 952 0066 5A70     	 strb r2,[r3,#1]
 953 0068 0022     	 movs r2,#0
 954 006a 42F02A02 	 orr r2,r2,#42
 955 006e 9A70     	 strb r2,[r3,#2]
 336:../cleanflight/src/main/rx/spektrum.c ****         break;
 956              	 .loc 3 336 0
 957 0070 19E0     	 b .L54
 958              	.L56:
 337:../cleanflight/src/main/rx/spektrum.c ****     case SERIALRX_SPEKTRUM1024:
 338:../cleanflight/src/main/rx/spektrum.c ****         // 10 bit frames
 339:../cleanflight/src/main/rx/spektrum.c ****         spek_chan_shift = 2;
 959              	 .loc 3 339 0
 960 0072 3D4B     	 ldr r3,.L65+8
 961 0074 0222     	 movs r2,#2
 962 0076 1A70     	 strb r2,[r3]
 340:../cleanflight/src/main/rx/spektrum.c ****         spek_chan_mask = 0x03;
 963              	 .loc 3 340 0
 964 0078 3C4B     	 ldr r3,.L65+12
 965 007a 0322     	 movs r2,#3
 966 007c 1A70     	 strb r2,[r3]
 341:../cleanflight/src/main/rx/spektrum.c ****         spekHiRes = false;
 967              	 .loc 3 341 0
 968 007e 3C4B     	 ldr r3,.L65+16
 969 0080 0022     	 movs r2,#0
 970 0082 1A70     	 strb r2,[r3]
 342:../cleanflight/src/main/rx/spektrum.c ****         resolution = 1024;
 971              	 .loc 3 342 0
 972 0084 3B4B     	 ldr r3,.L65+20
 973 0086 4FF48062 	 mov r2,#1024
 974 008a 1A60     	 str r2,[r3]
 343:../cleanflight/src/main/rx/spektrum.c ****         rxRuntimeConfig->channelCount = SPEKTRUM_1024_CHANNEL_COUNT;
 975              	 .loc 3 343 0
 976 008c 3B68     	 ldr r3,[r7]
 977 008e 0722     	 movs r2,#7
 978 0090 1A70     	 strb r2,[r3]
 344:../cleanflight/src/main/rx/spektrum.c ****         rxRuntimeConfig->rxRefreshRate = 22000;
 979              	 .loc 3 344 0
 980 0092 3B68     	 ldr r3,[r7]
 981 0094 0022     	 movs r2,#0
 982 0096 62F00F02 	 orn r2,r2,#15
 983 009a 5A70     	 strb r2,[r3,#1]
 984 009c 0022     	 movs r2,#0
 985 009e 42F05502 	 orr r2,r2,#85
 986 00a2 9A70     	 strb r2,[r3,#2]
 345:../cleanflight/src/main/rx/spektrum.c ****         break;
 987              	 .loc 3 345 0
 988 00a4 00BF     	 nop
 989              	.L54:
 346:../cleanflight/src/main/rx/spektrum.c ****     }
 347:../cleanflight/src/main/rx/spektrum.c **** 
 348:../cleanflight/src/main/rx/spektrum.c ****     rxRuntimeConfig->rcReadRawFn = spektrumReadRawRC;
 990              	 .loc 3 348 0
 991 00a6 3B68     	 ldr r3,[r7]
 992 00a8 334A     	 ldr r2,.L65+24
 993 00aa C3F80320 	 str r2,[r3,#3]
 349:../cleanflight/src/main/rx/spektrum.c ****     rxRuntimeConfig->rcFrameStatusFn = spektrumFrameStatus;
 994              	 .loc 3 349 0
 995 00ae 3B68     	 ldr r3,[r7]
 996 00b0 324A     	 ldr r2,.L65+28
 997 00b2 C3F80720 	 str r2,[r3,#7]
 350:../cleanflight/src/main/rx/spektrum.c **** 
 351:../cleanflight/src/main/rx/spektrum.c ****     serialPort = openSerialPort(portConfig->identifier,
 998              	 .loc 3 351 0
 999 00b6 FB68     	 ldr r3,[r7,#12]
 1000 00b8 9978     	 ldrb r1,[r3,#2]
 1001 00ba FB7A     	 ldrb r3,[r7,#11]
 1002 00bc 002B     	 cmp r3,#0
 1003 00be 03D1     	 bne .L57
 352:../cleanflight/src/main/rx/spektrum.c ****         FUNCTION_RX_SERIAL,
 353:../cleanflight/src/main/rx/spektrum.c ****         spektrumDataReceive,
 354:../cleanflight/src/main/rx/spektrum.c ****         NULL,
 355:../cleanflight/src/main/rx/spektrum.c ****         SPEKTRUM_BAUDRATE,
 356:../cleanflight/src/main/rx/spektrum.c ****         portShared || srxlEnabled ? MODE_RXTX : MODE_RX,
 1004              	 .loc 3 356 0
 1005 00c0 284B     	 ldr r3,.L65+4
 1006 00c2 1B78     	 ldrb r3,[r3]
 1007 00c4 002B     	 cmp r3,#0
 1008 00c6 01D0     	 beq .L58
 1009              	.L57:
 351:../cleanflight/src/main/rx/spektrum.c ****         FUNCTION_RX_SERIAL,
 1010              	 .loc 3 351 0 discriminator 1
 1011 00c8 0322     	 movs r2,#3
 1012 00ca 00E0     	 b .L59
 1013              	.L58:
 351:../cleanflight/src/main/rx/spektrum.c ****         FUNCTION_RX_SERIAL,
 1014              	 .loc 3 351 0 is_stmt 0 discriminator 3
 1015 00cc 0122     	 movs r2,#1
 1016              	.L59:
 357:../cleanflight/src/main/rx/spektrum.c ****         (rxConfig->serialrx_inverted ? SERIAL_INVERTED : 0) | ((srxlEnabled || rxConfig->halfDuplex
 1017              	 .loc 3 357 0 is_stmt 1 discriminator 2
 1018 00ce 7B68     	 ldr r3,[r7,#4]
 1019 00d0 5B7A     	 ldrb r3,[r3,#9]
 1020 00d2 002B     	 cmp r3,#0
 1021 00d4 14BF     	 ite ne
 1022 00d6 0123     	 movne r3,#1
 1023 00d8 0023     	 moveq r3,#0
 1024 00da DBB2     	 uxtb r3,r3
 1025 00dc D8B2     	 uxtb r0,r3
 351:../cleanflight/src/main/rx/spektrum.c ****         FUNCTION_RX_SERIAL,
 1026              	 .loc 3 351 0 discriminator 2
 1027 00de 214B     	 ldr r3,.L65+4
 1028 00e0 1B78     	 ldrb r3,[r3]
 1029 00e2 002B     	 cmp r3,#0
 1030 00e4 03D1     	 bne .L60
 1031              	 .loc 3 357 0
 1032 00e6 7B68     	 ldr r3,[r7,#4]
 1033 00e8 9B7A     	 ldrb r3,[r3,#10]
 1034 00ea 002B     	 cmp r3,#0
 1035 00ec 01D0     	 beq .L61
 1036              	.L60:
 351:../cleanflight/src/main/rx/spektrum.c ****         FUNCTION_RX_SERIAL,
 1037              	 .loc 3 351 0 discriminator 4
 1038 00ee 0823     	 movs r3,#8
 1039 00f0 00E0     	 b .L62
 1040              	.L61:
 351:../cleanflight/src/main/rx/spektrum.c ****         FUNCTION_RX_SERIAL,
 1041              	 .loc 3 351 0 is_stmt 0 discriminator 6
 1042 00f2 0023     	 movs r3,#0
 1043              	.L62:
 351:../cleanflight/src/main/rx/spektrum.c ****         FUNCTION_RX_SERIAL,
 1044              	 .loc 3 351 0 discriminator 5
 1045 00f4 0343     	 orrs r3,r3,r0
 1046 00f6 DBB2     	 uxtb r3,r3
 1047 00f8 DBB2     	 uxtb r3,r3
 1048 00fa 48B2     	 sxtb r0,r1
 1049 00fc 4FF4E131 	 mov r1,#115200
 1050 0100 0091     	 str r1,[sp]
 1051 0102 0192     	 str r2,[sp,#4]
 1052 0104 0293     	 str r3,[sp,#8]
 1053 0106 4021     	 movs r1,#64
 1054 0108 1D4A     	 ldr r2,.L65+32
 1055 010a 0023     	 movs r3,#0
 1056 010c FFF7FEFF 	 bl openSerialPort
 1057 0110 0246     	 mov r2,r0
 1058 0112 1C4B     	 ldr r3,.L65+36
 1059 0114 1A60     	 str r2,[r3]
 358:../cleanflight/src/main/rx/spektrum.c ****         );
 359:../cleanflight/src/main/rx/spektrum.c **** #if defined(USE_TELEMETRY) && defined(USE_TELEMETRY_SRXL)
 360:../cleanflight/src/main/rx/spektrum.c ****     if (portShared) {
 361:../cleanflight/src/main/rx/spektrum.c ****         telemetrySharedPort = serialPort;
 362:../cleanflight/src/main/rx/spektrum.c ****     }
 363:../cleanflight/src/main/rx/spektrum.c **** #endif
 364:../cleanflight/src/main/rx/spektrum.c **** 
 365:../cleanflight/src/main/rx/spektrum.c ****     rssi_channel = rxConfig->rssi_channel - 1; // -1 because rxConfig->rssi_channel is 1-based and 
 1060              	 .loc 3 365 0 is_stmt 1 discriminator 5
 1061 0116 7B68     	 ldr r3,[r7,#4]
 1062 0118 DB7B     	 ldrb r3,[r3,#15]
 1063 011a 013B     	 subs r3,r3,#1
 1064 011c DAB2     	 uxtb r2,r3
 1065 011e 1A4B     	 ldr r3,.L65+40
 1066 0120 1A70     	 strb r2,[r3]
 366:../cleanflight/src/main/rx/spektrum.c ****     if (rssi_channel >= rxRuntimeConfig->channelCount) {
 1067              	 .loc 3 366 0 discriminator 5
 1068 0122 3B68     	 ldr r3,[r7]
 1069 0124 1A78     	 ldrb r2,[r3]
 1070 0126 184B     	 ldr r3,.L65+40
 1071 0128 1B78     	 ldrb r3,[r3]
 1072 012a 9A42     	 cmp r2,r3
 1073 012c 02D8     	 bhi .L63
 367:../cleanflight/src/main/rx/spektrum.c ****         rssi_channel = 0;
 1074              	 .loc 3 367 0
 1075 012e 164B     	 ldr r3,.L65+40
 1076 0130 0022     	 movs r2,#0
 1077 0132 1A70     	 strb r2,[r3]
 1078              	.L63:
 368:../cleanflight/src/main/rx/spektrum.c ****     }
 369:../cleanflight/src/main/rx/spektrum.c **** 
 370:../cleanflight/src/main/rx/spektrum.c ****     if (serialPort && srxlEnabled) {
 1079              	 .loc 3 370 0
 1080 0134 134B     	 ldr r3,.L65+36
 1081 0136 1B68     	 ldr r3,[r3]
 1082 0138 002B     	 cmp r3,#0
 1083 013a 05D0     	 beq .L64
 1084              	 .loc 3 370 0 is_stmt 0 discriminator 1
 1085 013c 094B     	 ldr r3,.L65+4
 1086 013e 1B78     	 ldrb r3,[r3]
 1087 0140 002B     	 cmp r3,#0
 1088 0142 01D0     	 beq .L64
 371:../cleanflight/src/main/rx/spektrum.c ****         dispatchEnable();
 1089              	 .loc 3 371 0 is_stmt 1
 1090 0144 FFF7FEFF 	 bl dispatchEnable
 1091              	.L64:
 372:../cleanflight/src/main/rx/spektrum.c ****     }
 373:../cleanflight/src/main/rx/spektrum.c ****     return serialPort != NULL;
 1092              	 .loc 3 373 0
 1093 0148 0E4B     	 ldr r3,.L65+36
 1094 014a 1B68     	 ldr r3,[r3]
 1095 014c 002B     	 cmp r3,#0
 1096 014e 14BF     	 ite ne
 1097 0150 0123     	 movne r3,#1
 1098 0152 0023     	 moveq r3,#0
 1099 0154 DBB2     	 uxtb r3,r3
 1100              	.L53:
 374:../cleanflight/src/main/rx/spektrum.c **** }
 1101              	 .loc 3 374 0
 1102 0156 1846     	 mov r0,r3
 1103 0158 1037     	 adds r7,r7,#16
 1104              	.LCFI37:
 1105              	 .cfi_def_cfa_offset 8
 1106 015a BD46     	 mov sp,r7
 1107              	.LCFI38:
 1108              	 .cfi_def_cfa_register 13
 1109              	 
 1110 015c 80BD     	 pop {r7,pc}
 1111              	.L66:
 1112 015e 00BF     	 .align 2
 1113              	.L65:
 1114 0160 00000000 	 .word rxRuntimeConfigPtr
 1115 0164 00000000 	 .word srxlEnabled
 1116 0168 00000000 	 .word spek_chan_shift
 1117 016c 00000000 	 .word spek_chan_mask
 1118 0170 00000000 	 .word spekHiRes
 1119 0174 00000000 	 .word resolution
 1120 0178 00000000 	 .word spektrumReadRawRC
 1121 017c 00000000 	 .word spektrumFrameStatus
 1122 0180 00000000 	 .word spektrumDataReceive
 1123 0184 00000000 	 .word serialPort
 1124 0188 00000000 	 .word rssi_channel
 1125              	 .cfi_endproc
 1126              	.LFE556:
 1128              	 .section .text.srxlRxIsActive,"ax",%progbits
 1129              	 .align 2
 1130              	 .global srxlRxIsActive
 1131              	 .thumb
 1132              	 .thumb_func
 1134              	srxlRxIsActive:
 1135              	.LFB557:
 375:../cleanflight/src/main/rx/spektrum.c **** 
 376:../cleanflight/src/main/rx/spektrum.c **** #if defined(USE_TELEMETRY) && defined(USE_TELEMETRY_SRXL)
 377:../cleanflight/src/main/rx/spektrum.c **** void srxlRxWriteTelemetryData(const void *data, int len)
 378:../cleanflight/src/main/rx/spektrum.c **** {
 379:../cleanflight/src/main/rx/spektrum.c ****     len = MIN(len, (int)sizeof(telemetryBuf));
 380:../cleanflight/src/main/rx/spektrum.c ****     memcpy(telemetryBuf, data, len);
 381:../cleanflight/src/main/rx/spektrum.c ****     telemetryBufLen = len;
 382:../cleanflight/src/main/rx/spektrum.c **** }
 383:../cleanflight/src/main/rx/spektrum.c **** 
 384:../cleanflight/src/main/rx/spektrum.c **** void srxlRxSendTelemetryDataDispatch(dispatchEntry_t* self)
 385:../cleanflight/src/main/rx/spektrum.c **** {
 386:../cleanflight/src/main/rx/spektrum.c ****     UNUSED(self);
 387:../cleanflight/src/main/rx/spektrum.c ****     // if there is telemetry data to write
 388:../cleanflight/src/main/rx/spektrum.c ****     if (telemetryBufLen > 0) {
 389:../cleanflight/src/main/rx/spektrum.c ****         serialWriteBuf(serialPort, telemetryBuf, telemetryBufLen);
 390:../cleanflight/src/main/rx/spektrum.c ****         telemetryBufLen = 0; // reset telemetry buffer
 391:../cleanflight/src/main/rx/spektrum.c ****     }
 392:../cleanflight/src/main/rx/spektrum.c **** }
 393:../cleanflight/src/main/rx/spektrum.c **** #endif
 394:../cleanflight/src/main/rx/spektrum.c **** 
 395:../cleanflight/src/main/rx/spektrum.c **** bool srxlRxIsActive(void)
 396:../cleanflight/src/main/rx/spektrum.c **** {
 1136              	 .loc 3 396 0
 1137              	 .cfi_startproc
 1138              	 
 1139              	 
 1140              	 
 1141 0000 80B4     	 push {r7}
 1142              	.LCFI39:
 1143              	 .cfi_def_cfa_offset 4
 1144              	 .cfi_offset 7,-4
 1145 0002 00AF     	 add r7,sp,#0
 1146              	.LCFI40:
 1147              	 .cfi_def_cfa_register 7
 397:../cleanflight/src/main/rx/spektrum.c ****     return serialPort != NULL;
 1148              	 .loc 3 397 0
 1149 0004 054B     	 ldr r3,.L69
 1150 0006 1B68     	 ldr r3,[r3]
 1151 0008 002B     	 cmp r3,#0
 1152 000a 14BF     	 ite ne
 1153 000c 0123     	 movne r3,#1
 1154 000e 0023     	 moveq r3,#0
 1155 0010 DBB2     	 uxtb r3,r3
 398:../cleanflight/src/main/rx/spektrum.c **** }
 1156              	 .loc 3 398 0
 1157 0012 1846     	 mov r0,r3
 1158 0014 BD46     	 mov sp,r7
 1159              	.LCFI41:
 1160              	 .cfi_def_cfa_register 13
 1161              	 
 1162 0016 5DF8047B 	 ldr r7,[sp],#4
 1163              	.LCFI42:
 1164              	 .cfi_restore 7
 1165              	 .cfi_def_cfa_offset 0
 1166 001a 7047     	 bx lr
 1167              	.L70:
 1168              	 .align 2
 1169              	.L69:
 1170 001c 00000000 	 .word serialPort
 1171              	 .cfi_endproc
 1172              	.LFE557:
 1174              	 .section .bss.spekTimeLast.12646,"aw",%nobits
 1175              	 .align 2
 1178              	spekTimeLast.12646:
 1179 0000 00000000 	 .space 4
 1180              	 .section .bss.spekFramePosition.12647,"aw",%nobits
 1183              	spekFramePosition.12647:
 1184 0000 00       	 .space 1
 1185              	 .text
 1186              	.Letext0:
 1187              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1188              	 .file 5 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1189              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc4_gpio.h"
 1190              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 1191              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 1192              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 1193              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 1194              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/light_led.h"
 1195              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 1196              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
 1197              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 1198              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/telemetry/telemetry.h"
 1199              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 1200              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 1201              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 1202              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 spektrum.c
    {standard input}:20     .text.serialPinConfig:00000000 $t
    {standard input}:24     .text.serialPinConfig:00000000 serialPinConfig
    {standard input}:54     .text.serialPinConfig:00000010 $d
    {standard input}:59     .text.rxConfig:00000000 $t
    {standard input}:63     .text.rxConfig:00000000 rxConfig
    {standard input}:93     .text.rxConfig:00000010 $d
    {standard input}:101    .bss.srxlEnabled:00000000 srxlEnabled
    {standard input}:102    .bss.srxlEnabled:00000000 $d
                            *COM*:00000004 resolution
                            *COM*:00000001 rssi_channel
    {standard input}:108    .bss.spek_chan_shift:00000000 spek_chan_shift
    {standard input}:109    .bss.spek_chan_shift:00000000 $d
    {standard input}:113    .bss.spek_chan_mask:00000000 spek_chan_mask
    {standard input}:114    .bss.spek_chan_mask:00000000 $d
    {standard input}:118    .bss.rcFrameComplete:00000000 rcFrameComplete
    {standard input}:119    .bss.rcFrameComplete:00000000 $d
    {standard input}:123    .bss.spekHiRes:00000000 spekHiRes
    {standard input}:124    .bss.spekHiRes:00000000 $d
    {standard input}:126    .bss.spekFrame:00000000 $d
    {standard input}:129    .bss.spekFrame:00000000 spekFrame
    {standard input}:132    .bss.rxRuntimeConfigPtr:00000000 $d
    {standard input}:135    .bss.rxRuntimeConfigPtr:00000000 rxRuntimeConfigPtr
    {standard input}:138    .bss.serialPort:00000000 $d
    {standard input}:141    .bss.serialPort:00000000 serialPort
    {standard input}:144    .text.spektrumDataReceive:00000000 $t
    {standard input}:148    .text.spektrumDataReceive:00000000 spektrumDataReceive
    {standard input}:237    .text.spektrumDataReceive:0000006c $d
    {standard input}:1178   .bss.spekTimeLast.12646:00000000 spekTimeLast.12646
    {standard input}:1183   .bss.spekFramePosition.12647:00000000 spekFramePosition.12647
                            *COM*:00000030 spekChannelData
    {standard input}:246    .text.spektrumFrameStatus:00000000 $t
    {standard input}:250    .text.spektrumFrameStatus:00000000 spektrumFrameStatus
    {standard input}:431    .text.spektrumFrameStatus:00000100 $d
    {standard input}:442    .text.spektrumReadRawRC:00000000 $t
    {standard input}:446    .text.spektrumReadRawRC:00000000 spektrumReadRawRC
    {standard input}:519    .text.spektrumReadRawRC:00000054 $d
    {standard input}:525    .text.spekShouldBind:00000000 $t
    {standard input}:530    .text.spekShouldBind:00000000 spekShouldBind
    {standard input}:623    .text.spektrumBind:00000000 $t
    {standard input}:628    .text.spektrumBind:00000000 spektrumBind
    {standard input}:870    .text.spektrumInit:00000000 $t
    {standard input}:875    .text.spektrumInit:00000000 spektrumInit
    {standard input}:1114   .text.spektrumInit:00000160 $d
    {standard input}:1129   .text.srxlRxIsActive:00000000 $t
    {standard input}:1134   .text.srxlRxIsActive:00000000 srxlRxIsActive
    {standard input}:1170   .text.srxlRxIsActive:0000001c $d
    {standard input}:1175   .bss.spekTimeLast.12646:00000000 $d
    {standard input}:1184   .bss.spekFramePosition.12647:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
serialPinConfig_System
rxConfig_System
micros
spektrumHandleRSSI
spektrumHandleVtxControl
IOGetByTag
IOInit
IOConfigGPIO
delayMicroseconds
IORead
isMPUSoftReset
findSerialPortConfig
ledSet
IOWrite
delay
saveConfigAndNotify
openSerialPort
dispatchEnable
