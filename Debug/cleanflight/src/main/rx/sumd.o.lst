   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "sumd.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.sumdFrameDone,"aw",%nobits
  22              	sumdFrameDone:
  23 0000 00       	 .space 1
  24              	 .section .bss.sumdChannels,"aw",%nobits
  25              	 .align 2
  28              	sumdChannels:
  29 0000 00000000 	 .space 32
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              	 .section .bss.crc,"aw",%nobits
  31              	 .align 1
  34              	crc:
  35 0000 0000     	 .space 2
  36              	 .section .bss.sumd,"aw",%nobits
  37              	 .align 2
  40              	sumd:
  41 0000 00000000 	 .space 37
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42 0025 000000   	 .section .bss.sumdChannelCount,"aw",%nobits
  45              	sumdChannelCount:
  46 0000 00       	 .space 1
  47              	 .section .text.sumdDataReceive,"ax",%progbits
  48              	 .align 2
  49              	 .thumb
  50              	 .thumb_func
  52              	sumdDataReceive:
  53              	.LFB539:
  54              	 .file 1 "../cleanflight/src/main/rx/sumd.c"
   1:../cleanflight/src/main/rx/sumd.c **** /*
   2:../cleanflight/src/main/rx/sumd.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/rx/sumd.c ****  *
   4:../cleanflight/src/main/rx/sumd.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/rx/sumd.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/rx/sumd.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/rx/sumd.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/rx/sumd.c ****  * any later version.
   9:../cleanflight/src/main/rx/sumd.c ****  *
  10:../cleanflight/src/main/rx/sumd.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/rx/sumd.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/rx/sumd.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/rx/sumd.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/rx/sumd.c ****  *
  15:../cleanflight/src/main/rx/sumd.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/rx/sumd.c ****  * along with this software.
  17:../cleanflight/src/main/rx/sumd.c ****  *
  18:../cleanflight/src/main/rx/sumd.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/rx/sumd.c ****  */
  20:../cleanflight/src/main/rx/sumd.c **** 
  21:../cleanflight/src/main/rx/sumd.c **** #include <stdbool.h>
  22:../cleanflight/src/main/rx/sumd.c **** #include <stdint.h>
  23:../cleanflight/src/main/rx/sumd.c **** #include <stdlib.h>
  24:../cleanflight/src/main/rx/sumd.c **** 
  25:../cleanflight/src/main/rx/sumd.c **** #include "platform.h"
  26:../cleanflight/src/main/rx/sumd.c **** 
  27:../cleanflight/src/main/rx/sumd.c **** #ifdef USE_SERIAL_RX
  28:../cleanflight/src/main/rx/sumd.c **** 
  29:../cleanflight/src/main/rx/sumd.c **** #include "common/crc.h"
  30:../cleanflight/src/main/rx/sumd.c **** #include "common/utils.h"
  31:../cleanflight/src/main/rx/sumd.c **** 
  32:../cleanflight/src/main/rx/sumd.c **** #include "drivers/time.h"
  33:../cleanflight/src/main/rx/sumd.c **** 
  34:../cleanflight/src/main/rx/sumd.c **** #include "io/serial.h"
  35:../cleanflight/src/main/rx/sumd.c **** 
  36:../cleanflight/src/main/rx/sumd.c **** #ifdef USE_TELEMETRY
  37:../cleanflight/src/main/rx/sumd.c **** #include "telemetry/telemetry.h"
  38:../cleanflight/src/main/rx/sumd.c **** #endif
  39:../cleanflight/src/main/rx/sumd.c **** 
  40:../cleanflight/src/main/rx/sumd.c **** #include "pg/rx.h"
  41:../cleanflight/src/main/rx/sumd.c **** 
  42:../cleanflight/src/main/rx/sumd.c **** #include "rx/rx.h"
  43:../cleanflight/src/main/rx/sumd.c **** #include "rx/sumd.h"
  44:../cleanflight/src/main/rx/sumd.c **** 
  45:../cleanflight/src/main/rx/sumd.c **** // driver for SUMD receiver using UART2
  46:../cleanflight/src/main/rx/sumd.c **** 
  47:../cleanflight/src/main/rx/sumd.c **** // FIXME test support for more than 8 channels, should probably work up to 12 channels
  48:../cleanflight/src/main/rx/sumd.c **** 
  49:../cleanflight/src/main/rx/sumd.c **** #define SUMD_SYNCBYTE 0xA8
  50:../cleanflight/src/main/rx/sumd.c **** #define SUMD_MAX_CHANNEL 16
  51:../cleanflight/src/main/rx/sumd.c **** #define SUMD_BUFFSIZE (SUMD_MAX_CHANNEL * 2 + 5) // 6 channels + 5 = 17 bytes for 6 channels
  52:../cleanflight/src/main/rx/sumd.c **** 
  53:../cleanflight/src/main/rx/sumd.c **** #define SUMD_BAUDRATE 115200
  54:../cleanflight/src/main/rx/sumd.c **** 
  55:../cleanflight/src/main/rx/sumd.c **** static bool sumdFrameDone = false;
  56:../cleanflight/src/main/rx/sumd.c **** static uint16_t sumdChannels[SUMD_MAX_CHANNEL];
  57:../cleanflight/src/main/rx/sumd.c **** static uint16_t crc;
  58:../cleanflight/src/main/rx/sumd.c **** 
  59:../cleanflight/src/main/rx/sumd.c **** static uint8_t sumd[SUMD_BUFFSIZE] = { 0, };
  60:../cleanflight/src/main/rx/sumd.c **** static uint8_t sumdChannelCount;
  61:../cleanflight/src/main/rx/sumd.c **** 
  62:../cleanflight/src/main/rx/sumd.c **** // Receive ISR callback
  63:../cleanflight/src/main/rx/sumd.c **** static void sumdDataReceive(uint16_t c, void *data)
  64:../cleanflight/src/main/rx/sumd.c **** {
  55              	 .loc 1 64 0
  56              	 .cfi_startproc
  57              	 
  58              	 
  59 0000 80B5     	 push {r7,lr}
  60              	.LCFI0:
  61              	 .cfi_def_cfa_offset 8
  62              	 .cfi_offset 7,-8
  63              	 .cfi_offset 14,-4
  64 0002 84B0     	 sub sp,sp,#16
  65              	.LCFI1:
  66              	 .cfi_def_cfa_offset 24
  67 0004 00AF     	 add r7,sp,#0
  68              	.LCFI2:
  69              	 .cfi_def_cfa_register 7
  70 0006 0346     	 mov r3,r0
  71 0008 3960     	 str r1,[r7]
  72 000a FB80     	 strh r3,[r7,#6]
  65:../cleanflight/src/main/rx/sumd.c ****     UNUSED(data);
  66:../cleanflight/src/main/rx/sumd.c **** 
  67:../cleanflight/src/main/rx/sumd.c ****     uint32_t sumdTime;
  68:../cleanflight/src/main/rx/sumd.c ****     static uint32_t sumdTimeLast;
  69:../cleanflight/src/main/rx/sumd.c ****     static uint8_t sumdIndex;
  70:../cleanflight/src/main/rx/sumd.c **** 
  71:../cleanflight/src/main/rx/sumd.c ****     sumdTime = micros();
  73              	 .loc 1 71 0
  74 000c FFF7FEFF 	 bl micros
  75 0010 F860     	 str r0,[r7,#12]
  72:../cleanflight/src/main/rx/sumd.c ****     if ((sumdTime - sumdTimeLast) > 4000)
  76              	 .loc 1 72 0
  77 0012 2E4B     	 ldr r3,.L9
  78 0014 1B68     	 ldr r3,[r3]
  79 0016 FA68     	 ldr r2,[r7,#12]
  80 0018 D31A     	 subs r3,r2,r3
  81 001a B3F57A6F 	 cmp r3,#4000
  82 001e 02D9     	 bls .L2
  73:../cleanflight/src/main/rx/sumd.c ****         sumdIndex = 0;
  83              	 .loc 1 73 0
  84 0020 2B4B     	 ldr r3,.L9+4
  85 0022 0022     	 movs r2,#0
  86 0024 1A70     	 strb r2,[r3]
  87              	.L2:
  74:../cleanflight/src/main/rx/sumd.c ****     sumdTimeLast = sumdTime;
  88              	 .loc 1 74 0
  89 0026 294A     	 ldr r2,.L9
  90 0028 FB68     	 ldr r3,[r7,#12]
  91 002a 1360     	 str r3,[r2]
  75:../cleanflight/src/main/rx/sumd.c **** 
  76:../cleanflight/src/main/rx/sumd.c ****     if (sumdIndex == 0) {
  92              	 .loc 1 76 0
  93 002c 284B     	 ldr r3,.L9+4
  94 002e 1B78     	 ldrb r3,[r3]
  95 0030 002B     	 cmp r3,#0
  96 0032 09D1     	 bne .L3
  77:../cleanflight/src/main/rx/sumd.c ****         if (c != SUMD_SYNCBYTE)
  97              	 .loc 1 77 0
  98 0034 FB88     	 ldrh r3,[r7,#6]
  99 0036 A82B     	 cmp r3,#168
 100 0038 00D0     	 beq .L4
  78:../cleanflight/src/main/rx/sumd.c ****             return;
 101              	 .loc 1 78 0
 102 003a 43E0     	 b .L1
 103              	.L4:
  79:../cleanflight/src/main/rx/sumd.c ****         else
  80:../cleanflight/src/main/rx/sumd.c ****         {
  81:../cleanflight/src/main/rx/sumd.c ****             sumdFrameDone = false; // lazy main loop didnt fetch the stuff
 104              	 .loc 1 81 0
 105 003c 254B     	 ldr r3,.L9+8
 106 003e 0022     	 movs r2,#0
 107 0040 1A70     	 strb r2,[r3]
  82:../cleanflight/src/main/rx/sumd.c ****             crc = 0;
 108              	 .loc 1 82 0
 109 0042 254B     	 ldr r3,.L9+12
 110 0044 0022     	 movs r2,#0
 111 0046 1A80     	 strh r2,[r3]
 112              	.L3:
  83:../cleanflight/src/main/rx/sumd.c ****         }
  84:../cleanflight/src/main/rx/sumd.c ****     }
  85:../cleanflight/src/main/rx/sumd.c ****     if (sumdIndex == 2)
 113              	 .loc 1 85 0
 114 0048 214B     	 ldr r3,.L9+4
 115 004a 1B78     	 ldrb r3,[r3]
 116 004c 022B     	 cmp r3,#2
 117 004e 03D1     	 bne .L6
  86:../cleanflight/src/main/rx/sumd.c ****         sumdChannelCount = (uint8_t)c;
 118              	 .loc 1 86 0
 119 0050 FB88     	 ldrh r3,[r7,#6]
 120 0052 DAB2     	 uxtb r2,r3
 121 0054 214B     	 ldr r3,.L9+16
 122 0056 1A70     	 strb r2,[r3]
 123              	.L6:
  87:../cleanflight/src/main/rx/sumd.c ****     if (sumdIndex < SUMD_BUFFSIZE)
 124              	 .loc 1 87 0
 125 0058 1D4B     	 ldr r3,.L9+4
 126 005a 1B78     	 ldrb r3,[r3]
 127 005c 242B     	 cmp r3,#36
 128 005e 06D8     	 bhi .L7
  88:../cleanflight/src/main/rx/sumd.c ****         sumd[sumdIndex] = (uint8_t)c;
 129              	 .loc 1 88 0
 130 0060 1B4B     	 ldr r3,.L9+4
 131 0062 1B78     	 ldrb r3,[r3]
 132 0064 1A46     	 mov r2,r3
 133 0066 FB88     	 ldrh r3,[r7,#6]
 134 0068 D9B2     	 uxtb r1,r3
 135 006a 1D4B     	 ldr r3,.L9+20
 136 006c 9954     	 strb r1,[r3,r2]
 137              	.L7:
  89:../cleanflight/src/main/rx/sumd.c ****     sumdIndex++;
 138              	 .loc 1 89 0
 139 006e 184B     	 ldr r3,.L9+4
 140 0070 1B78     	 ldrb r3,[r3]
 141 0072 0133     	 adds r3,r3,#1
 142 0074 DAB2     	 uxtb r2,r3
 143 0076 164B     	 ldr r3,.L9+4
 144 0078 1A70     	 strb r2,[r3]
  90:../cleanflight/src/main/rx/sumd.c ****     if (sumdIndex < sumdChannelCount * 2 + 4)
 145              	 .loc 1 90 0
 146 007a 154B     	 ldr r3,.L9+4
 147 007c 1B78     	 ldrb r3,[r3]
 148 007e 1A46     	 mov r2,r3
 149 0080 164B     	 ldr r3,.L9+16
 150 0082 1B78     	 ldrb r3,[r3]
 151 0084 0233     	 adds r3,r3,#2
 152 0086 5B00     	 lsls r3,r3,#1
 153 0088 9A42     	 cmp r2,r3
 154 008a 0CDA     	 bge .L8
  91:../cleanflight/src/main/rx/sumd.c ****         crc = crc16_ccitt(crc, (uint8_t)c);
 155              	 .loc 1 91 0
 156 008c 124B     	 ldr r3,.L9+12
 157 008e 1A88     	 ldrh r2,[r3]
 158 0090 FB88     	 ldrh r3,[r7,#6]
 159 0092 DBB2     	 uxtb r3,r3
 160 0094 1046     	 mov r0,r2
 161 0096 1946     	 mov r1,r3
 162 0098 FFF7FEFF 	 bl crc16_ccitt
 163 009c 0346     	 mov r3,r0
 164 009e 1A46     	 mov r2,r3
 165 00a0 0D4B     	 ldr r3,.L9+12
 166 00a2 1A80     	 strh r2,[r3]
 167 00a4 0EE0     	 b .L1
 168              	.L8:
  92:../cleanflight/src/main/rx/sumd.c ****     else
  93:../cleanflight/src/main/rx/sumd.c ****         if (sumdIndex == sumdChannelCount * 2 + 5) {
 169              	 .loc 1 93 0
 170 00a6 0A4B     	 ldr r3,.L9+4
 171 00a8 1B78     	 ldrb r3,[r3]
 172 00aa 1A46     	 mov r2,r3
 173 00ac 0B4B     	 ldr r3,.L9+16
 174 00ae 1B78     	 ldrb r3,[r3]
 175 00b0 5B00     	 lsls r3,r3,#1
 176 00b2 0533     	 adds r3,r3,#5
 177 00b4 9A42     	 cmp r2,r3
 178 00b6 05D1     	 bne .L1
  94:../cleanflight/src/main/rx/sumd.c ****             sumdIndex = 0;
 179              	 .loc 1 94 0
 180 00b8 054B     	 ldr r3,.L9+4
 181 00ba 0022     	 movs r2,#0
 182 00bc 1A70     	 strb r2,[r3]
  95:../cleanflight/src/main/rx/sumd.c ****             sumdFrameDone = true;
 183              	 .loc 1 95 0
 184 00be 054B     	 ldr r3,.L9+8
 185 00c0 0122     	 movs r2,#1
 186 00c2 1A70     	 strb r2,[r3]
 187              	.L1:
  96:../cleanflight/src/main/rx/sumd.c ****         }
  97:../cleanflight/src/main/rx/sumd.c **** }
 188              	 .loc 1 97 0
 189 00c4 1037     	 adds r7,r7,#16
 190              	.LCFI3:
 191              	 .cfi_def_cfa_offset 8
 192 00c6 BD46     	 mov sp,r7
 193              	.LCFI4:
 194              	 .cfi_def_cfa_register 13
 195              	 
 196 00c8 80BD     	 pop {r7,pc}
 197              	.L10:
 198 00ca 00BF     	 .align 2
 199              	.L9:
 200 00cc 00000000 	 .word sumdTimeLast.12546
 201 00d0 00000000 	 .word sumdIndex.12547
 202 00d4 00000000 	 .word sumdFrameDone
 203 00d8 00000000 	 .word crc
 204 00dc 00000000 	 .word sumdChannelCount
 205 00e0 00000000 	 .word sumd
 206              	 .cfi_endproc
 207              	.LFE539:
 209              	 .section .text.sumdFrameStatus,"ax",%progbits
 210              	 .align 2
 211              	 .thumb
 212              	 .thumb_func
 214              	sumdFrameStatus:
 215              	.LFB540:
  98:../cleanflight/src/main/rx/sumd.c **** 
  99:../cleanflight/src/main/rx/sumd.c **** #define SUMD_OFFSET_CHANNEL_1_HIGH 3
 100:../cleanflight/src/main/rx/sumd.c **** #define SUMD_OFFSET_CHANNEL_1_LOW 4
 101:../cleanflight/src/main/rx/sumd.c **** #define SUMD_BYTES_PER_CHANNEL 2
 102:../cleanflight/src/main/rx/sumd.c **** 
 103:../cleanflight/src/main/rx/sumd.c **** 
 104:../cleanflight/src/main/rx/sumd.c **** #define SUMD_FRAME_STATE_OK 0x01
 105:../cleanflight/src/main/rx/sumd.c **** #define SUMD_FRAME_STATE_FAILSAFE 0x81
 106:../cleanflight/src/main/rx/sumd.c **** 
 107:../cleanflight/src/main/rx/sumd.c **** static uint8_t sumdFrameStatus(rxRuntimeConfig_t *rxRuntimeConfig)
 108:../cleanflight/src/main/rx/sumd.c **** {
 216              	 .loc 1 108 0
 217              	 .cfi_startproc
 218              	 
 219              	 
 220              	 
 221 0000 80B4     	 push {r7}
 222              	.LCFI5:
 223              	 .cfi_def_cfa_offset 4
 224              	 .cfi_offset 7,-4
 225 0002 85B0     	 sub sp,sp,#20
 226              	.LCFI6:
 227              	 .cfi_def_cfa_offset 24
 228 0004 00AF     	 add r7,sp,#0
 229              	.LCFI7:
 230              	 .cfi_def_cfa_register 7
 231 0006 7860     	 str r0,[r7,#4]
 109:../cleanflight/src/main/rx/sumd.c ****     UNUSED(rxRuntimeConfig);
 110:../cleanflight/src/main/rx/sumd.c **** 
 111:../cleanflight/src/main/rx/sumd.c ****     uint8_t channelIndex;
 112:../cleanflight/src/main/rx/sumd.c **** 
 113:../cleanflight/src/main/rx/sumd.c ****     uint8_t frameStatus = RX_FRAME_PENDING;
 232              	 .loc 1 113 0
 233 0008 0023     	 movs r3,#0
 234 000a BB73     	 strb r3,[r7,#14]
 114:../cleanflight/src/main/rx/sumd.c **** 
 115:../cleanflight/src/main/rx/sumd.c ****     if (!sumdFrameDone) {
 235              	 .loc 1 115 0
 236 000c 2E4B     	 ldr r3,.L23
 237 000e 1B78     	 ldrb r3,[r3]
 238 0010 83F00103 	 eor r3,r3,#1
 239 0014 DBB2     	 uxtb r3,r3
 240 0016 002B     	 cmp r3,#0
 241 0018 01D0     	 beq .L12
 116:../cleanflight/src/main/rx/sumd.c ****         return frameStatus;
 242              	 .loc 1 116 0
 243 001a BB7B     	 ldrb r3,[r7,#14]
 244 001c 4DE0     	 b .L13
 245              	.L12:
 117:../cleanflight/src/main/rx/sumd.c ****     }
 118:../cleanflight/src/main/rx/sumd.c **** 
 119:../cleanflight/src/main/rx/sumd.c ****     sumdFrameDone = false;
 246              	 .loc 1 119 0
 247 001e 2A4B     	 ldr r3,.L23
 248 0020 0022     	 movs r2,#0
 249 0022 1A70     	 strb r2,[r3]
 120:../cleanflight/src/main/rx/sumd.c **** 
 121:../cleanflight/src/main/rx/sumd.c ****     // verify CRC
 122:../cleanflight/src/main/rx/sumd.c ****     if (crc != ((sumd[SUMD_BYTES_PER_CHANNEL * sumdChannelCount + SUMD_OFFSET_CHANNEL_1_HIGH] << 8)
 250              	 .loc 1 122 0
 251 0024 294B     	 ldr r3,.L23+4
 252 0026 1B88     	 ldrh r3,[r3]
 253 0028 1846     	 mov r0,r3
 254 002a 294B     	 ldr r3,.L23+8
 255 002c 1B78     	 ldrb r3,[r3]
 256 002e 5B00     	 lsls r3,r3,#1
 257 0030 0333     	 adds r3,r3,#3
 258 0032 284A     	 ldr r2,.L23+12
 259 0034 D35C     	 ldrb r3,[r2,r3]
 260 0036 1B02     	 lsls r3,r3,#8
 123:../cleanflight/src/main/rx/sumd.c ****             (sumd[SUMD_BYTES_PER_CHANNEL * sumdChannelCount + SUMD_OFFSET_CHANNEL_1_LOW])))
 261              	 .loc 1 123 0
 262 0038 254A     	 ldr r2,.L23+8
 263 003a 1278     	 ldrb r2,[r2]
 264 003c 0232     	 adds r2,r2,#2
 265 003e 5200     	 lsls r2,r2,#1
 266 0040 2449     	 ldr r1,.L23+12
 267 0042 8A5C     	 ldrb r2,[r1,r2]
 122:../cleanflight/src/main/rx/sumd.c ****             (sumd[SUMD_BYTES_PER_CHANNEL * sumdChannelCount + SUMD_OFFSET_CHANNEL_1_LOW])))
 268              	 .loc 1 122 0
 269 0044 1343     	 orrs r3,r3,r2
 270 0046 9842     	 cmp r0,r3
 271 0048 01D0     	 beq .L14
 124:../cleanflight/src/main/rx/sumd.c ****         return frameStatus;
 272              	 .loc 1 124 0
 273 004a BB7B     	 ldrb r3,[r7,#14]
 274 004c 35E0     	 b .L13
 275              	.L14:
 125:../cleanflight/src/main/rx/sumd.c **** 
 126:../cleanflight/src/main/rx/sumd.c ****     switch (sumd[1]) {
 276              	 .loc 1 126 0
 277 004e 214B     	 ldr r3,.L23+12
 278 0050 5B78     	 ldrb r3,[r3,#1]
 279 0052 012B     	 cmp r3,#1
 280 0054 04D0     	 beq .L16
 281 0056 812B     	 cmp r3,#129
 282 0058 05D1     	 bne .L22
 127:../cleanflight/src/main/rx/sumd.c ****         case SUMD_FRAME_STATE_FAILSAFE:
 128:../cleanflight/src/main/rx/sumd.c ****             frameStatus = RX_FRAME_COMPLETE | RX_FRAME_FAILSAFE;
 283              	 .loc 1 128 0
 284 005a 0323     	 movs r3,#3
 285 005c BB73     	 strb r3,[r7,#14]
 129:../cleanflight/src/main/rx/sumd.c ****             break;
 286              	 .loc 1 129 0
 287 005e 04E0     	 b .L18
 288              	.L16:
 130:../cleanflight/src/main/rx/sumd.c ****         case SUMD_FRAME_STATE_OK:
 131:../cleanflight/src/main/rx/sumd.c ****             frameStatus = RX_FRAME_COMPLETE;
 289              	 .loc 1 131 0
 290 0060 0123     	 movs r3,#1
 291 0062 BB73     	 strb r3,[r7,#14]
 132:../cleanflight/src/main/rx/sumd.c ****             break;
 292              	 .loc 1 132 0
 293 0064 01E0     	 b .L18
 294              	.L22:
 133:../cleanflight/src/main/rx/sumd.c ****         default:
 134:../cleanflight/src/main/rx/sumd.c ****             return frameStatus;
 295              	 .loc 1 134 0
 296 0066 BB7B     	 ldrb r3,[r7,#14]
 297 0068 27E0     	 b .L13
 298              	.L18:
 135:../cleanflight/src/main/rx/sumd.c ****     }
 136:../cleanflight/src/main/rx/sumd.c **** 
 137:../cleanflight/src/main/rx/sumd.c ****     if (sumdChannelCount > SUMD_MAX_CHANNEL)
 299              	 .loc 1 137 0
 300 006a 194B     	 ldr r3,.L23+8
 301 006c 1B78     	 ldrb r3,[r3]
 302 006e 102B     	 cmp r3,#16
 303 0070 02D9     	 bls .L19
 138:../cleanflight/src/main/rx/sumd.c ****         sumdChannelCount = SUMD_MAX_CHANNEL;
 304              	 .loc 1 138 0
 305 0072 174B     	 ldr r3,.L23+8
 306 0074 1022     	 movs r2,#16
 307 0076 1A70     	 strb r2,[r3]
 308              	.L19:
 139:../cleanflight/src/main/rx/sumd.c **** 
 140:../cleanflight/src/main/rx/sumd.c ****     for (channelIndex = 0; channelIndex < sumdChannelCount; channelIndex++) {
 309              	 .loc 1 140 0
 310 0078 0023     	 movs r3,#0
 311 007a FB73     	 strb r3,[r7,#15]
 312 007c 17E0     	 b .L20
 313              	.L21:
 141:../cleanflight/src/main/rx/sumd.c ****         sumdChannels[channelIndex] = (
 314              	 .loc 1 141 0 discriminator 3
 315 007e FB7B     	 ldrb r3,[r7,#15]
 142:../cleanflight/src/main/rx/sumd.c ****             (sumd[SUMD_BYTES_PER_CHANNEL * channelIndex + SUMD_OFFSET_CHANNEL_1_HIGH] << 8) |
 316              	 .loc 1 142 0 discriminator 3
 317 0080 FA7B     	 ldrb r2,[r7,#15]
 318 0082 5200     	 lsls r2,r2,#1
 319 0084 0332     	 adds r2,r2,#3
 320 0086 1349     	 ldr r1,.L23+12
 321 0088 8A5C     	 ldrb r2,[r1,r2]
 322 008a 1202     	 lsls r2,r2,#8
 141:../cleanflight/src/main/rx/sumd.c ****         sumdChannels[channelIndex] = (
 323              	 .loc 1 141 0 discriminator 3
 324 008c 90B2     	 uxth r0,r2
 143:../cleanflight/src/main/rx/sumd.c ****             sumd[SUMD_BYTES_PER_CHANNEL * channelIndex + SUMD_OFFSET_CHANNEL_1_LOW]
 325              	 .loc 1 143 0 discriminator 3
 326 008e FA7B     	 ldrb r2,[r7,#15]
 327 0090 0232     	 adds r2,r2,#2
 328 0092 5200     	 lsls r2,r2,#1
 329 0094 0F49     	 ldr r1,.L23+12
 330 0096 8A5C     	 ldrb r2,[r1,r2]
 141:../cleanflight/src/main/rx/sumd.c ****         sumdChannels[channelIndex] = (
 331              	 .loc 1 141 0 discriminator 3
 332 0098 92B2     	 uxth r2,r2
 333 009a 0146     	 mov r1,r0
 334 009c 0A43     	 orrs r2,r2,r1
 335 009e 92B2     	 uxth r2,r2
 336 00a0 91B2     	 uxth r1,r2
 337 00a2 0D4A     	 ldr r2,.L23+16
 338 00a4 22F81310 	 strh r1,[r2,r3,lsl#1]
 140:../cleanflight/src/main/rx/sumd.c ****         sumdChannels[channelIndex] = (
 339              	 .loc 1 140 0 discriminator 3
 340 00a8 FB7B     	 ldrb r3,[r7,#15]
 341 00aa 0133     	 adds r3,r3,#1
 342 00ac FB73     	 strb r3,[r7,#15]
 343              	.L20:
 140:../cleanflight/src/main/rx/sumd.c ****         sumdChannels[channelIndex] = (
 344              	 .loc 1 140 0 is_stmt 0 discriminator 1
 345 00ae 084B     	 ldr r3,.L23+8
 346 00b0 1B78     	 ldrb r3,[r3]
 347 00b2 FA7B     	 ldrb r2,[r7,#15]
 348 00b4 9A42     	 cmp r2,r3
 349 00b6 E2D3     	 bcc .L21
 144:../cleanflight/src/main/rx/sumd.c ****         );
 145:../cleanflight/src/main/rx/sumd.c ****     }
 146:../cleanflight/src/main/rx/sumd.c ****     return frameStatus;
 350              	 .loc 1 146 0 is_stmt 1
 351 00b8 BB7B     	 ldrb r3,[r7,#14]
 352              	.L13:
 147:../cleanflight/src/main/rx/sumd.c **** }
 353              	 .loc 1 147 0
 354 00ba 1846     	 mov r0,r3
 355 00bc 1437     	 adds r7,r7,#20
 356              	.LCFI8:
 357              	 .cfi_def_cfa_offset 4
 358 00be BD46     	 mov sp,r7
 359              	.LCFI9:
 360              	 .cfi_def_cfa_register 13
 361              	 
 362 00c0 5DF8047B 	 ldr r7,[sp],#4
 363              	.LCFI10:
 364              	 .cfi_restore 7
 365              	 .cfi_def_cfa_offset 0
 366 00c4 7047     	 bx lr
 367              	.L24:
 368 00c6 00BF     	 .align 2
 369              	.L23:
 370 00c8 00000000 	 .word sumdFrameDone
 371 00cc 00000000 	 .word crc
 372 00d0 00000000 	 .word sumdChannelCount
 373 00d4 00000000 	 .word sumd
 374 00d8 00000000 	 .word sumdChannels
 375              	 .cfi_endproc
 376              	.LFE540:
 378              	 .section .text.sumdReadRawRC,"ax",%progbits
 379              	 .align 2
 380              	 .thumb
 381              	 .thumb_func
 383              	sumdReadRawRC:
 384              	.LFB541:
 148:../cleanflight/src/main/rx/sumd.c **** 
 149:../cleanflight/src/main/rx/sumd.c **** static uint16_t sumdReadRawRC(const rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan)
 150:../cleanflight/src/main/rx/sumd.c **** {
 385              	 .loc 1 150 0
 386              	 .cfi_startproc
 387              	 
 388              	 
 389              	 
 390 0000 80B4     	 push {r7}
 391              	.LCFI11:
 392              	 .cfi_def_cfa_offset 4
 393              	 .cfi_offset 7,-4
 394 0002 83B0     	 sub sp,sp,#12
 395              	.LCFI12:
 396              	 .cfi_def_cfa_offset 16
 397 0004 00AF     	 add r7,sp,#0
 398              	.LCFI13:
 399              	 .cfi_def_cfa_register 7
 400 0006 7860     	 str r0,[r7,#4]
 401 0008 0B46     	 mov r3,r1
 402 000a FB70     	 strb r3,[r7,#3]
 151:../cleanflight/src/main/rx/sumd.c ****     UNUSED(rxRuntimeConfig);
 152:../cleanflight/src/main/rx/sumd.c ****     return sumdChannels[chan] / 8;
 403              	 .loc 1 152 0
 404 000c FB78     	 ldrb r3,[r7,#3]
 405 000e 054A     	 ldr r2,.L27
 406 0010 32F81330 	 ldrh r3,[r2,r3,lsl#1]
 407 0014 DB08     	 lsrs r3,r3,#3
 408 0016 9BB2     	 uxth r3,r3
 153:../cleanflight/src/main/rx/sumd.c **** }
 409              	 .loc 1 153 0
 410 0018 1846     	 mov r0,r3
 411 001a 0C37     	 adds r7,r7,#12
 412              	.LCFI14:
 413              	 .cfi_def_cfa_offset 4
 414 001c BD46     	 mov sp,r7
 415              	.LCFI15:
 416              	 .cfi_def_cfa_register 13
 417              	 
 418 001e 5DF8047B 	 ldr r7,[sp],#4
 419              	.LCFI16:
 420              	 .cfi_restore 7
 421              	 .cfi_def_cfa_offset 0
 422 0022 7047     	 bx lr
 423              	.L28:
 424              	 .align 2
 425              	.L27:
 426 0024 00000000 	 .word sumdChannels
 427              	 .cfi_endproc
 428              	.LFE541:
 430              	 .section .text.sumdInit,"ax",%progbits
 431              	 .align 2
 432              	 .global sumdInit
 433              	 .thumb
 434              	 .thumb_func
 436              	sumdInit:
 437              	.LFB542:
 154:../cleanflight/src/main/rx/sumd.c **** 
 155:../cleanflight/src/main/rx/sumd.c **** bool sumdInit(const rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig)
 156:../cleanflight/src/main/rx/sumd.c **** {
 438              	 .loc 1 156 0
 439              	 .cfi_startproc
 440              	 
 441              	 
 442 0000 80B5     	 push {r7,lr}
 443              	.LCFI17:
 444              	 .cfi_def_cfa_offset 8
 445              	 .cfi_offset 7,-8
 446              	 .cfi_offset 14,-4
 447 0002 8AB0     	 sub sp,sp,#40
 448              	.LCFI18:
 449              	 .cfi_def_cfa_offset 48
 450 0004 04AF     	 add r7,sp,#16
 451              	.LCFI19:
 452              	 .cfi_def_cfa 7,32
 453 0006 7860     	 str r0,[r7,#4]
 454 0008 3960     	 str r1,[r7]
 157:../cleanflight/src/main/rx/sumd.c ****     UNUSED(rxConfig);
 158:../cleanflight/src/main/rx/sumd.c **** 
 159:../cleanflight/src/main/rx/sumd.c ****     rxRuntimeConfig->channelCount = SUMD_MAX_CHANNEL;
 455              	 .loc 1 159 0
 456 000a 3B68     	 ldr r3,[r7]
 457 000c 1022     	 movs r2,#16
 458 000e 1A70     	 strb r2,[r3]
 160:../cleanflight/src/main/rx/sumd.c ****     rxRuntimeConfig->rxRefreshRate = 11000;
 459              	 .loc 1 160 0
 460 0010 3B68     	 ldr r3,[r7]
 461 0012 0022     	 movs r2,#0
 462 0014 62F00702 	 orn r2,r2,#7
 463 0018 5A70     	 strb r2,[r3,#1]
 464 001a 0022     	 movs r2,#0
 465 001c 42F02A02 	 orr r2,r2,#42
 466 0020 9A70     	 strb r2,[r3,#2]
 161:../cleanflight/src/main/rx/sumd.c **** 
 162:../cleanflight/src/main/rx/sumd.c ****     rxRuntimeConfig->rcReadRawFn = sumdReadRawRC;
 467              	 .loc 1 162 0
 468 0022 3B68     	 ldr r3,[r7]
 469 0024 204A     	 ldr r2,.L36
 470 0026 C3F80320 	 str r2,[r3,#3]
 163:../cleanflight/src/main/rx/sumd.c ****     rxRuntimeConfig->rcFrameStatusFn = sumdFrameStatus;
 471              	 .loc 1 163 0
 472 002a 3B68     	 ldr r3,[r7]
 473 002c 1F4A     	 ldr r2,.L36+4
 474 002e C3F80720 	 str r2,[r3,#7]
 164:../cleanflight/src/main/rx/sumd.c **** 
 165:../cleanflight/src/main/rx/sumd.c ****     const serialPortConfig_t *portConfig = findSerialPortConfig(FUNCTION_RX_SERIAL);
 475              	 .loc 1 165 0
 476 0032 4020     	 movs r0,#64
 477 0034 FFF7FEFF 	 bl findSerialPortConfig
 478 0038 7861     	 str r0,[r7,#20]
 166:../cleanflight/src/main/rx/sumd.c ****     if (!portConfig) {
 479              	 .loc 1 166 0
 480 003a 7B69     	 ldr r3,[r7,#20]
 481 003c 002B     	 cmp r3,#0
 482 003e 01D1     	 bne .L30
 167:../cleanflight/src/main/rx/sumd.c ****         return false;
 483              	 .loc 1 167 0
 484 0040 0023     	 movs r3,#0
 485 0042 2DE0     	 b .L31
 486              	.L30:
 168:../cleanflight/src/main/rx/sumd.c ****     }
 169:../cleanflight/src/main/rx/sumd.c **** 
 170:../cleanflight/src/main/rx/sumd.c **** #ifdef USE_TELEMETRY
 171:../cleanflight/src/main/rx/sumd.c ****     bool portShared = telemetryCheckRxPortShared(portConfig);
 172:../cleanflight/src/main/rx/sumd.c **** #else
 173:../cleanflight/src/main/rx/sumd.c ****     bool portShared = false;
 487              	 .loc 1 173 0
 488 0044 0023     	 movs r3,#0
 489 0046 FB74     	 strb r3,[r7,#19]
 174:../cleanflight/src/main/rx/sumd.c **** #endif
 175:../cleanflight/src/main/rx/sumd.c **** 
 176:../cleanflight/src/main/rx/sumd.c ****     serialPort_t *sumdPort = openSerialPort(portConfig->identifier,
 490              	 .loc 1 176 0
 491 0048 7B69     	 ldr r3,[r7,#20]
 492 004a 9978     	 ldrb r1,[r3,#2]
 493 004c FB7C     	 ldrb r3,[r7,#19]
 494 004e 002B     	 cmp r3,#0
 495 0050 01D0     	 beq .L32
 496              	 .loc 1 176 0 is_stmt 0 discriminator 1
 497 0052 0322     	 movs r2,#3
 498 0054 00E0     	 b .L33
 499              	.L32:
 500              	 .loc 1 176 0 discriminator 2
 501 0056 0122     	 movs r2,#1
 502              	.L33:
 177:../cleanflight/src/main/rx/sumd.c ****         FUNCTION_RX_SERIAL,
 178:../cleanflight/src/main/rx/sumd.c ****         sumdDataReceive,
 179:../cleanflight/src/main/rx/sumd.c ****         NULL,
 180:../cleanflight/src/main/rx/sumd.c ****         SUMD_BAUDRATE,
 181:../cleanflight/src/main/rx/sumd.c ****         portShared ? MODE_RXTX : MODE_RX,
 182:../cleanflight/src/main/rx/sumd.c ****         (rxConfig->serialrx_inverted ? SERIAL_INVERTED : 0) | (rxConfig->halfDuplex ? SERIAL_BIDIR 
 503              	 .loc 1 182 0 is_stmt 1 discriminator 4
 504 0058 7B68     	 ldr r3,[r7,#4]
 505 005a 5B7A     	 ldrb r3,[r3,#9]
 506 005c 002B     	 cmp r3,#0
 507 005e 14BF     	 ite ne
 508 0060 0123     	 movne r3,#1
 509 0062 0023     	 moveq r3,#0
 510 0064 DBB2     	 uxtb r3,r3
 511 0066 D8B2     	 uxtb r0,r3
 512 0068 7B68     	 ldr r3,[r7,#4]
 513 006a 9B7A     	 ldrb r3,[r3,#10]
 176:../cleanflight/src/main/rx/sumd.c ****         FUNCTION_RX_SERIAL,
 514              	 .loc 1 176 0 discriminator 4
 515 006c 002B     	 cmp r3,#0
 516 006e 01D0     	 beq .L34
 176:../cleanflight/src/main/rx/sumd.c ****         FUNCTION_RX_SERIAL,
 517              	 .loc 1 176 0 is_stmt 0 discriminator 5
 518 0070 0823     	 movs r3,#8
 519 0072 00E0     	 b .L35
 520              	.L34:
 176:../cleanflight/src/main/rx/sumd.c ****         FUNCTION_RX_SERIAL,
 521              	 .loc 1 176 0 discriminator 6
 522 0074 0023     	 movs r3,#0
 523              	.L35:
 176:../cleanflight/src/main/rx/sumd.c ****         FUNCTION_RX_SERIAL,
 524              	 .loc 1 176 0 discriminator 8
 525 0076 0343     	 orrs r3,r3,r0
 526 0078 DBB2     	 uxtb r3,r3
 527 007a DBB2     	 uxtb r3,r3
 528 007c 48B2     	 sxtb r0,r1
 529 007e 4FF4E131 	 mov r1,#115200
 530 0082 0091     	 str r1,[sp]
 531 0084 0192     	 str r2,[sp,#4]
 532 0086 0293     	 str r3,[sp,#8]
 533 0088 4021     	 movs r1,#64
 534 008a 094A     	 ldr r2,.L36+8
 535 008c 0023     	 movs r3,#0
 536 008e FFF7FEFF 	 bl openSerialPort
 537 0092 F860     	 str r0,[r7,#12]
 183:../cleanflight/src/main/rx/sumd.c ****         );
 184:../cleanflight/src/main/rx/sumd.c **** 
 185:../cleanflight/src/main/rx/sumd.c **** #ifdef USE_TELEMETRY
 186:../cleanflight/src/main/rx/sumd.c ****     if (portShared) {
 187:../cleanflight/src/main/rx/sumd.c ****         telemetrySharedPort = sumdPort;
 188:../cleanflight/src/main/rx/sumd.c ****     }
 189:../cleanflight/src/main/rx/sumd.c **** #endif
 190:../cleanflight/src/main/rx/sumd.c **** 
 191:../cleanflight/src/main/rx/sumd.c ****     return sumdPort != NULL;
 538              	 .loc 1 191 0 is_stmt 1 discriminator 8
 539 0094 FB68     	 ldr r3,[r7,#12]
 540 0096 002B     	 cmp r3,#0
 541 0098 14BF     	 ite ne
 542 009a 0123     	 movne r3,#1
 543 009c 0023     	 moveq r3,#0
 544 009e DBB2     	 uxtb r3,r3
 545              	.L31:
 192:../cleanflight/src/main/rx/sumd.c **** }
 546              	 .loc 1 192 0
 547 00a0 1846     	 mov r0,r3
 548 00a2 1837     	 adds r7,r7,#24
 549              	.LCFI20:
 550              	 .cfi_def_cfa_offset 8
 551 00a4 BD46     	 mov sp,r7
 552              	.LCFI21:
 553              	 .cfi_def_cfa_register 13
 554              	 
 555 00a6 80BD     	 pop {r7,pc}
 556              	.L37:
 557              	 .align 2
 558              	.L36:
 559 00a8 00000000 	 .word sumdReadRawRC
 560 00ac 00000000 	 .word sumdFrameStatus
 561 00b0 00000000 	 .word sumdDataReceive
 562              	 .cfi_endproc
 563              	.LFE542:
 565              	 .section .bss.sumdTimeLast.12546,"aw",%nobits
 566              	 .align 2
 569              	sumdTimeLast.12546:
 570 0000 00000000 	 .space 4
 571              	 .section .bss.sumdIndex.12547,"aw",%nobits
 574              	sumdIndex.12547:
 575 0000 00       	 .space 1
 576              	 .text
 577              	.Letext0:
 578              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 579              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 580              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 581              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 582              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 583              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 584              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 585              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
 586              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
 587              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 588              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 589              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sumd.c
    {standard input}:22     .bss.sumdFrameDone:00000000 sumdFrameDone
    {standard input}:23     .bss.sumdFrameDone:00000000 $d
    {standard input}:25     .bss.sumdChannels:00000000 $d
    {standard input}:28     .bss.sumdChannels:00000000 sumdChannels
    {standard input}:31     .bss.crc:00000000 $d
    {standard input}:34     .bss.crc:00000000 crc
    {standard input}:37     .bss.sumd:00000000 $d
    {standard input}:40     .bss.sumd:00000000 sumd
    {standard input}:45     .bss.sumdChannelCount:00000000 sumdChannelCount
    {standard input}:46     .bss.sumdChannelCount:00000000 $d
    {standard input}:48     .text.sumdDataReceive:00000000 $t
    {standard input}:52     .text.sumdDataReceive:00000000 sumdDataReceive
    {standard input}:200    .text.sumdDataReceive:000000cc $d
    {standard input}:569    .bss.sumdTimeLast.12546:00000000 sumdTimeLast.12546
    {standard input}:574    .bss.sumdIndex.12547:00000000 sumdIndex.12547
    {standard input}:210    .text.sumdFrameStatus:00000000 $t
    {standard input}:214    .text.sumdFrameStatus:00000000 sumdFrameStatus
    {standard input}:370    .text.sumdFrameStatus:000000c8 $d
    {standard input}:379    .text.sumdReadRawRC:00000000 $t
    {standard input}:383    .text.sumdReadRawRC:00000000 sumdReadRawRC
    {standard input}:426    .text.sumdReadRawRC:00000024 $d
    {standard input}:431    .text.sumdInit:00000000 $t
    {standard input}:436    .text.sumdInit:00000000 sumdInit
    {standard input}:559    .text.sumdInit:000000a8 $d
    {standard input}:566    .bss.sumdTimeLast.12546:00000000 $d
    {standard input}:575    .bss.sumdIndex.12547:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
micros
crc16_ccitt
findSerialPortConfig
openSerialPort
