   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "sumh.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.sumhFrameDone,"aw",%nobits
  22              	sumhFrameDone:
  23 0000 00       	 .space 1
  24              	 .section .bss.sumhFrame,"aw",%nobits
  25              	 .align 2
  28              	sumhFrame:
  29 0000 00000000 	 .space 21
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30 0015 000000   	 .section .bss.sumhChannels,"aw",%nobits
  31              	 .align 2
  34              	sumhChannels:
  35 0000 00000000 	 .space 32
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              	 .section .bss.sumhPort,"aw",%nobits
  37              	 .align 2
  40              	sumhPort:
  41 0000 00000000 	 .space 4
  42              	 .section .text.sumhDataReceive,"ax",%progbits
  43              	 .align 2
  44              	 .thumb
  45              	 .thumb_func
  47              	sumhDataReceive:
  48              	.LFB539:
  49              	 .file 1 "../cleanflight/src/main/rx/sumh.c"
   1:../cleanflight/src/main/rx/sumh.c **** /*
   2:../cleanflight/src/main/rx/sumh.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/rx/sumh.c ****  *
   4:../cleanflight/src/main/rx/sumh.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/rx/sumh.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/rx/sumh.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/rx/sumh.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/rx/sumh.c ****  * any later version.
   9:../cleanflight/src/main/rx/sumh.c ****  *
  10:../cleanflight/src/main/rx/sumh.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/rx/sumh.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/rx/sumh.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/rx/sumh.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/rx/sumh.c ****  *
  15:../cleanflight/src/main/rx/sumh.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/rx/sumh.c ****  * along with this software.
  17:../cleanflight/src/main/rx/sumh.c ****  *
  18:../cleanflight/src/main/rx/sumh.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/rx/sumh.c ****  */
  20:../cleanflight/src/main/rx/sumh.c **** 
  21:../cleanflight/src/main/rx/sumh.c **** /*
  22:../cleanflight/src/main/rx/sumh.c ****  * References:
  23:../cleanflight/src/main/rx/sumh.c ****  *  http://fpv-treff.de/viewtopic.php?f=18&t=1368&start=3020#p44535
  24:../cleanflight/src/main/rx/sumh.c ****  *  http://fpv-community.de/showthread.php?29033-MultiWii-mit-Graupner-SUMD-SUMH-und-USB-Joystick-a
  25:../cleanflight/src/main/rx/sumh.c ****  */
  26:../cleanflight/src/main/rx/sumh.c **** 
  27:../cleanflight/src/main/rx/sumh.c **** #include <stdbool.h>
  28:../cleanflight/src/main/rx/sumh.c **** #include <stdint.h>
  29:../cleanflight/src/main/rx/sumh.c **** #include <stdlib.h>
  30:../cleanflight/src/main/rx/sumh.c **** 
  31:../cleanflight/src/main/rx/sumh.c **** #include "platform.h"
  32:../cleanflight/src/main/rx/sumh.c **** 
  33:../cleanflight/src/main/rx/sumh.c **** #ifdef USE_SERIAL_RX
  34:../cleanflight/src/main/rx/sumh.c **** 
  35:../cleanflight/src/main/rx/sumh.c **** #include "common/utils.h"
  36:../cleanflight/src/main/rx/sumh.c **** 
  37:../cleanflight/src/main/rx/sumh.c **** #include "drivers/time.h"
  38:../cleanflight/src/main/rx/sumh.c **** 
  39:../cleanflight/src/main/rx/sumh.c **** #include "io/serial.h"
  40:../cleanflight/src/main/rx/sumh.c **** 
  41:../cleanflight/src/main/rx/sumh.c **** #ifdef USE_TELEMETRY
  42:../cleanflight/src/main/rx/sumh.c **** #include "telemetry/telemetry.h"
  43:../cleanflight/src/main/rx/sumh.c **** #endif
  44:../cleanflight/src/main/rx/sumh.c **** 
  45:../cleanflight/src/main/rx/sumh.c **** #include "pg/rx.h"
  46:../cleanflight/src/main/rx/sumh.c **** 
  47:../cleanflight/src/main/rx/sumh.c **** #include "rx/rx.h"
  48:../cleanflight/src/main/rx/sumh.c **** #include "rx/sumh.h"
  49:../cleanflight/src/main/rx/sumh.c **** 
  50:../cleanflight/src/main/rx/sumh.c **** // driver for SUMH receiver using UART2
  51:../cleanflight/src/main/rx/sumh.c **** 
  52:../cleanflight/src/main/rx/sumh.c **** #define SUMH_BAUDRATE 115200
  53:../cleanflight/src/main/rx/sumh.c **** 
  54:../cleanflight/src/main/rx/sumh.c **** #define SUMH_MAX_CHANNEL_COUNT 8
  55:../cleanflight/src/main/rx/sumh.c **** #define SUMH_FRAME_SIZE 21
  56:../cleanflight/src/main/rx/sumh.c **** 
  57:../cleanflight/src/main/rx/sumh.c **** static bool sumhFrameDone = false;
  58:../cleanflight/src/main/rx/sumh.c **** 
  59:../cleanflight/src/main/rx/sumh.c **** static uint8_t sumhFrame[SUMH_FRAME_SIZE];
  60:../cleanflight/src/main/rx/sumh.c **** static uint32_t sumhChannels[SUMH_MAX_CHANNEL_COUNT];
  61:../cleanflight/src/main/rx/sumh.c **** 
  62:../cleanflight/src/main/rx/sumh.c **** static serialPort_t *sumhPort;
  63:../cleanflight/src/main/rx/sumh.c **** 
  64:../cleanflight/src/main/rx/sumh.c **** 
  65:../cleanflight/src/main/rx/sumh.c **** // Receive ISR callback
  66:../cleanflight/src/main/rx/sumh.c **** static void sumhDataReceive(uint16_t c, void *data)
  67:../cleanflight/src/main/rx/sumh.c **** {
  50              	 .loc 1 67 0
  51              	 .cfi_startproc
  52              	 
  53              	 
  54 0000 80B5     	 push {r7,lr}
  55              	.LCFI0:
  56              	 .cfi_def_cfa_offset 8
  57              	 .cfi_offset 7,-8
  58              	 .cfi_offset 14,-4
  59 0002 84B0     	 sub sp,sp,#16
  60              	.LCFI1:
  61              	 .cfi_def_cfa_offset 24
  62 0004 00AF     	 add r7,sp,#0
  63              	.LCFI2:
  64              	 .cfi_def_cfa_register 7
  65 0006 0346     	 mov r3,r0
  66 0008 3960     	 str r1,[r7]
  67 000a FB80     	 strh r3,[r7,#6]
  68:../cleanflight/src/main/rx/sumh.c ****     UNUSED(data);
  69:../cleanflight/src/main/rx/sumh.c **** 
  70:../cleanflight/src/main/rx/sumh.c ****     uint32_t sumhTime;
  71:../cleanflight/src/main/rx/sumh.c ****     static uint32_t sumhTimeLast, sumhTimeInterval;
  72:../cleanflight/src/main/rx/sumh.c ****     static uint8_t sumhFramePosition;
  73:../cleanflight/src/main/rx/sumh.c **** 
  74:../cleanflight/src/main/rx/sumh.c ****     sumhTime = micros();
  68              	 .loc 1 74 0
  69 000c FFF7FEFF 	 bl micros
  70 0010 F860     	 str r0,[r7,#12]
  75:../cleanflight/src/main/rx/sumh.c ****     sumhTimeInterval = sumhTime - sumhTimeLast;
  71              	 .loc 1 75 0
  72 0012 154B     	 ldr r3,.L5
  73 0014 1B68     	 ldr r3,[r3]
  74 0016 FA68     	 ldr r2,[r7,#12]
  75 0018 D31A     	 subs r3,r2,r3
  76 001a 144A     	 ldr r2,.L5+4
  77 001c 1360     	 str r3,[r2]
  76:../cleanflight/src/main/rx/sumh.c ****     sumhTimeLast = sumhTime;
  78              	 .loc 1 76 0
  79 001e 124A     	 ldr r2,.L5
  80 0020 FB68     	 ldr r3,[r7,#12]
  81 0022 1360     	 str r3,[r2]
  77:../cleanflight/src/main/rx/sumh.c ****     if (sumhTimeInterval > 5000) {
  82              	 .loc 1 77 0
  83 0024 114B     	 ldr r3,.L5+4
  84 0026 1B68     	 ldr r3,[r3]
  85 0028 41F28832 	 movw r2,#5000
  86 002c 9342     	 cmp r3,r2
  87 002e 02D9     	 bls .L2
  78:../cleanflight/src/main/rx/sumh.c ****         sumhFramePosition = 0;
  88              	 .loc 1 78 0
  89 0030 0F4B     	 ldr r3,.L5+8
  90 0032 0022     	 movs r2,#0
  91 0034 1A70     	 strb r2,[r3]
  92              	.L2:
  79:../cleanflight/src/main/rx/sumh.c ****     }
  80:../cleanflight/src/main/rx/sumh.c **** 
  81:../cleanflight/src/main/rx/sumh.c ****     sumhFrame[sumhFramePosition] = (uint8_t) c;
  93              	 .loc 1 81 0
  94 0036 0E4B     	 ldr r3,.L5+8
  95 0038 1B78     	 ldrb r3,[r3]
  96 003a 1A46     	 mov r2,r3
  97 003c FB88     	 ldrh r3,[r7,#6]
  98 003e D9B2     	 uxtb r1,r3
  99 0040 0C4B     	 ldr r3,.L5+12
 100 0042 9954     	 strb r1,[r3,r2]
  82:../cleanflight/src/main/rx/sumh.c ****     if (sumhFramePosition == SUMH_FRAME_SIZE - 1) {
 101              	 .loc 1 82 0
 102 0044 0A4B     	 ldr r3,.L5+8
 103 0046 1B78     	 ldrb r3,[r3]
 104 0048 142B     	 cmp r3,#20
 105 004a 03D1     	 bne .L3
  83:../cleanflight/src/main/rx/sumh.c ****         // FIXME at this point the value of 'c' is unused and un tested, what should it be, is it i
  84:../cleanflight/src/main/rx/sumh.c ****         sumhFrameDone = true;
 106              	 .loc 1 84 0
 107 004c 0A4B     	 ldr r3,.L5+16
 108 004e 0122     	 movs r2,#1
 109 0050 1A70     	 strb r2,[r3]
 110 0052 05E0     	 b .L1
 111              	.L3:
  85:../cleanflight/src/main/rx/sumh.c ****     } else {
  86:../cleanflight/src/main/rx/sumh.c ****         sumhFramePosition++;
 112              	 .loc 1 86 0
 113 0054 064B     	 ldr r3,.L5+8
 114 0056 1B78     	 ldrb r3,[r3]
 115 0058 0133     	 adds r3,r3,#1
 116 005a DAB2     	 uxtb r2,r3
 117 005c 044B     	 ldr r3,.L5+8
 118 005e 1A70     	 strb r2,[r3]
 119              	.L1:
  87:../cleanflight/src/main/rx/sumh.c ****     }
  88:../cleanflight/src/main/rx/sumh.c **** }
 120              	 .loc 1 88 0
 121 0060 1037     	 adds r7,r7,#16
 122              	.LCFI3:
 123              	 .cfi_def_cfa_offset 8
 124 0062 BD46     	 mov sp,r7
 125              	.LCFI4:
 126              	 .cfi_def_cfa_register 13
 127              	 
 128 0064 80BD     	 pop {r7,pc}
 129              	.L6:
 130 0066 00BF     	 .align 2
 131              	.L5:
 132 0068 00000000 	 .word sumhTimeLast.12517
 133 006c 00000000 	 .word sumhTimeInterval.12518
 134 0070 00000000 	 .word sumhFramePosition.12519
 135 0074 00000000 	 .word sumhFrame
 136 0078 00000000 	 .word sumhFrameDone
 137              	 .cfi_endproc
 138              	.LFE539:
 140              	 .section .text.sumhFrameStatus,"ax",%progbits
 141              	 .align 2
 142              	 .thumb
 143              	 .thumb_func
 145              	sumhFrameStatus:
 146              	.LFB540:
  89:../cleanflight/src/main/rx/sumh.c **** 
  90:../cleanflight/src/main/rx/sumh.c **** static uint8_t sumhFrameStatus(rxRuntimeConfig_t *rxRuntimeConfig)
  91:../cleanflight/src/main/rx/sumh.c **** {
 147              	 .loc 1 91 0
 148              	 .cfi_startproc
 149              	 
 150              	 
 151              	 
 152 0000 80B4     	 push {r7}
 153              	.LCFI5:
 154              	 .cfi_def_cfa_offset 4
 155              	 .cfi_offset 7,-4
 156 0002 85B0     	 sub sp,sp,#20
 157              	.LCFI6:
 158              	 .cfi_def_cfa_offset 24
 159 0004 00AF     	 add r7,sp,#0
 160              	.LCFI7:
 161              	 .cfi_def_cfa_register 7
 162 0006 7860     	 str r0,[r7,#4]
  92:../cleanflight/src/main/rx/sumh.c ****     UNUSED(rxRuntimeConfig);
  93:../cleanflight/src/main/rx/sumh.c **** 
  94:../cleanflight/src/main/rx/sumh.c ****     uint8_t channelIndex;
  95:../cleanflight/src/main/rx/sumh.c **** 
  96:../cleanflight/src/main/rx/sumh.c ****     if (!sumhFrameDone) {
 163              	 .loc 1 96 0
 164 0008 224B     	 ldr r3,.L14
 165 000a 1B78     	 ldrb r3,[r3]
 166 000c 83F00103 	 eor r3,r3,#1
 167 0010 DBB2     	 uxtb r3,r3
 168 0012 002B     	 cmp r3,#0
 169 0014 01D0     	 beq .L8
  97:../cleanflight/src/main/rx/sumh.c ****         return RX_FRAME_PENDING;
 170              	 .loc 1 97 0
 171 0016 0023     	 movs r3,#0
 172 0018 36E0     	 b .L9
 173              	.L8:
  98:../cleanflight/src/main/rx/sumh.c ****     }
  99:../cleanflight/src/main/rx/sumh.c **** 
 100:../cleanflight/src/main/rx/sumh.c ****     sumhFrameDone = false;
 174              	 .loc 1 100 0
 175 001a 1E4B     	 ldr r3,.L14
 176 001c 0022     	 movs r2,#0
 177 001e 1A70     	 strb r2,[r3]
 101:../cleanflight/src/main/rx/sumh.c **** 
 102:../cleanflight/src/main/rx/sumh.c ****     if (!((sumhFrame[0] == 0xA8) && (sumhFrame[SUMH_FRAME_SIZE - 2] == 0))) {
 178              	 .loc 1 102 0
 179 0020 1D4B     	 ldr r3,.L14+4
 180 0022 1B78     	 ldrb r3,[r3]
 181 0024 A82B     	 cmp r3,#168
 182 0026 03D1     	 bne .L10
 183              	 .loc 1 102 0 is_stmt 0 discriminator 1
 184 0028 1B4B     	 ldr r3,.L14+4
 185 002a DB7C     	 ldrb r3,[r3,#19]
 186 002c 002B     	 cmp r3,#0
 187 002e 01D0     	 beq .L11
 188              	.L10:
 103:../cleanflight/src/main/rx/sumh.c ****         return RX_FRAME_PENDING;
 189              	 .loc 1 103 0 is_stmt 1
 190 0030 0023     	 movs r3,#0
 191 0032 29E0     	 b .L9
 192              	.L11:
 104:../cleanflight/src/main/rx/sumh.c ****     }
 105:../cleanflight/src/main/rx/sumh.c **** 
 106:../cleanflight/src/main/rx/sumh.c ****     for (channelIndex = 0; channelIndex < SUMH_MAX_CHANNEL_COUNT; channelIndex++) {
 193              	 .loc 1 106 0
 194 0034 0023     	 movs r3,#0
 195 0036 FB73     	 strb r3,[r7,#15]
 196 0038 22E0     	 b .L12
 197              	.L13:
 107:../cleanflight/src/main/rx/sumh.c ****         sumhChannels[channelIndex] = (((uint32_t)(sumhFrame[(channelIndex << 1) + 3]) << 8)
 198              	 .loc 1 107 0 discriminator 3
 199 003a FB7B     	 ldrb r3,[r7,#15]
 200 003c FA7B     	 ldrb r2,[r7,#15]
 201 003e 5200     	 lsls r2,r2,#1
 202 0040 0332     	 adds r2,r2,#3
 203 0042 1549     	 ldr r1,.L14+4
 204 0044 8A5C     	 ldrb r2,[r1,r2]
 205 0046 1202     	 lsls r2,r2,#8
 108:../cleanflight/src/main/rx/sumh.c ****                 + sumhFrame[(channelIndex << 1) + 4]) / 6.4f - 375;
 206              	 .loc 1 108 0 discriminator 3
 207 0048 F97B     	 ldrb r1,[r7,#15]
 208 004a 4900     	 lsls r1,r1,#1
 209 004c 0431     	 adds r1,r1,#4
 210 004e 1248     	 ldr r0,.L14+4
 211 0050 415C     	 ldrb r1,[r0,r1]
 212 0052 0A44     	 add r2,r2,r1
 213 0054 07EE902A 	 fmsr s15,r2
 214 0058 F8EE677A 	 fuitos s15,s15
 215 005c 9FED0F7A 	 flds s14,.L14+8
 216 0060 C7EE877A 	 fdivs s15,s15,s14
 217 0064 9FED0E7A 	 flds s14,.L14+12
 218 0068 77EEC77A 	 fsubs s15,s15,s14
 107:../cleanflight/src/main/rx/sumh.c ****         sumhChannels[channelIndex] = (((uint32_t)(sumhFrame[(channelIndex << 1) + 3]) << 8)
 219              	 .loc 1 107 0 discriminator 3
 220 006c FCEEE77A 	 ftouizs s15,s15
 221 0070 17EE901A 	 fmrs r1,s15
 222 0074 0B4A     	 ldr r2,.L14+16
 223 0076 42F82310 	 str r1,[r2,r3,lsl#2]
 106:../cleanflight/src/main/rx/sumh.c ****         sumhChannels[channelIndex] = (((uint32_t)(sumhFrame[(channelIndex << 1) + 3]) << 8)
 224              	 .loc 1 106 0 discriminator 3
 225 007a FB7B     	 ldrb r3,[r7,#15]
 226 007c 0133     	 adds r3,r3,#1
 227 007e FB73     	 strb r3,[r7,#15]
 228              	.L12:
 106:../cleanflight/src/main/rx/sumh.c ****         sumhChannels[channelIndex] = (((uint32_t)(sumhFrame[(channelIndex << 1) + 3]) << 8)
 229              	 .loc 1 106 0 is_stmt 0 discriminator 1
 230 0080 FB7B     	 ldrb r3,[r7,#15]
 231 0082 072B     	 cmp r3,#7
 232 0084 D9D9     	 bls .L13
 109:../cleanflight/src/main/rx/sumh.c ****     }
 110:../cleanflight/src/main/rx/sumh.c ****     return RX_FRAME_COMPLETE;
 233              	 .loc 1 110 0 is_stmt 1
 234 0086 0123     	 movs r3,#1
 235              	.L9:
 111:../cleanflight/src/main/rx/sumh.c **** }
 236              	 .loc 1 111 0
 237 0088 1846     	 mov r0,r3
 238 008a 1437     	 adds r7,r7,#20
 239              	.LCFI8:
 240              	 .cfi_def_cfa_offset 4
 241 008c BD46     	 mov sp,r7
 242              	.LCFI9:
 243              	 .cfi_def_cfa_register 13
 244              	 
 245 008e 5DF8047B 	 ldr r7,[sp],#4
 246              	.LCFI10:
 247              	 .cfi_restore 7
 248              	 .cfi_def_cfa_offset 0
 249 0092 7047     	 bx lr
 250              	.L15:
 251              	 .align 2
 252              	.L14:
 253 0094 00000000 	 .word sumhFrameDone
 254 0098 00000000 	 .word sumhFrame
 255 009c CDCCCC40 	 .word 1087163597
 256 00a0 0080BB43 	 .word 1136361472
 257 00a4 00000000 	 .word sumhChannels
 258              	 .cfi_endproc
 259              	.LFE540:
 261              	 .section .text.sumhReadRawRC,"ax",%progbits
 262              	 .align 2
 263              	 .thumb
 264              	 .thumb_func
 266              	sumhReadRawRC:
 267              	.LFB541:
 112:../cleanflight/src/main/rx/sumh.c **** 
 113:../cleanflight/src/main/rx/sumh.c **** static uint16_t sumhReadRawRC(const rxRuntimeConfig_t *rxRuntimeConfig, uint8_t chan)
 114:../cleanflight/src/main/rx/sumh.c **** {
 268              	 .loc 1 114 0
 269              	 .cfi_startproc
 270              	 
 271              	 
 272              	 
 273 0000 80B4     	 push {r7}
 274              	.LCFI11:
 275              	 .cfi_def_cfa_offset 4
 276              	 .cfi_offset 7,-4
 277 0002 83B0     	 sub sp,sp,#12
 278              	.LCFI12:
 279              	 .cfi_def_cfa_offset 16
 280 0004 00AF     	 add r7,sp,#0
 281              	.LCFI13:
 282              	 .cfi_def_cfa_register 7
 283 0006 7860     	 str r0,[r7,#4]
 284 0008 0B46     	 mov r3,r1
 285 000a FB70     	 strb r3,[r7,#3]
 115:../cleanflight/src/main/rx/sumh.c ****     UNUSED(rxRuntimeConfig);
 116:../cleanflight/src/main/rx/sumh.c **** 
 117:../cleanflight/src/main/rx/sumh.c ****     if (chan >= SUMH_MAX_CHANNEL_COUNT) {
 286              	 .loc 1 117 0
 287 000c FB78     	 ldrb r3,[r7,#3]
 288 000e 072B     	 cmp r3,#7
 289 0010 01D9     	 bls .L17
 118:../cleanflight/src/main/rx/sumh.c ****         return 0;
 290              	 .loc 1 118 0
 291 0012 0023     	 movs r3,#0
 292 0014 04E0     	 b .L18
 293              	.L17:
 119:../cleanflight/src/main/rx/sumh.c ****     }
 120:../cleanflight/src/main/rx/sumh.c **** 
 121:../cleanflight/src/main/rx/sumh.c ****     return sumhChannels[chan];
 294              	 .loc 1 121 0
 295 0016 FB78     	 ldrb r3,[r7,#3]
 296 0018 044A     	 ldr r2,.L19
 297 001a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 298 001e 9BB2     	 uxth r3,r3
 299              	.L18:
 122:../cleanflight/src/main/rx/sumh.c **** }
 300              	 .loc 1 122 0
 301 0020 1846     	 mov r0,r3
 302 0022 0C37     	 adds r7,r7,#12
 303              	.LCFI14:
 304              	 .cfi_def_cfa_offset 4
 305 0024 BD46     	 mov sp,r7
 306              	.LCFI15:
 307              	 .cfi_def_cfa_register 13
 308              	 
 309 0026 5DF8047B 	 ldr r7,[sp],#4
 310              	.LCFI16:
 311              	 .cfi_restore 7
 312              	 .cfi_def_cfa_offset 0
 313 002a 7047     	 bx lr
 314              	.L20:
 315              	 .align 2
 316              	.L19:
 317 002c 00000000 	 .word sumhChannels
 318              	 .cfi_endproc
 319              	.LFE541:
 321              	 .section .text.sumhInit,"ax",%progbits
 322              	 .align 2
 323              	 .global sumhInit
 324              	 .thumb
 325              	 .thumb_func
 327              	sumhInit:
 328              	.LFB542:
 123:../cleanflight/src/main/rx/sumh.c **** 
 124:../cleanflight/src/main/rx/sumh.c **** bool sumhInit(const rxConfig_t *rxConfig, rxRuntimeConfig_t *rxRuntimeConfig)
 125:../cleanflight/src/main/rx/sumh.c **** {
 329              	 .loc 1 125 0
 330              	 .cfi_startproc
 331              	 
 332              	 
 333 0000 80B5     	 push {r7,lr}
 334              	.LCFI17:
 335              	 .cfi_def_cfa_offset 8
 336              	 .cfi_offset 7,-8
 337              	 .cfi_offset 14,-4
 338 0002 88B0     	 sub sp,sp,#32
 339              	.LCFI18:
 340              	 .cfi_def_cfa_offset 40
 341 0004 04AF     	 add r7,sp,#16
 342              	.LCFI19:
 343              	 .cfi_def_cfa 7,24
 344 0006 7860     	 str r0,[r7,#4]
 345 0008 3960     	 str r1,[r7]
 126:../cleanflight/src/main/rx/sumh.c ****     UNUSED(rxConfig);
 127:../cleanflight/src/main/rx/sumh.c **** 
 128:../cleanflight/src/main/rx/sumh.c ****     rxRuntimeConfig->channelCount = SUMH_MAX_CHANNEL_COUNT;
 346              	 .loc 1 128 0
 347 000a 3B68     	 ldr r3,[r7]
 348 000c 0822     	 movs r2,#8
 349 000e 1A70     	 strb r2,[r3]
 129:../cleanflight/src/main/rx/sumh.c ****     rxRuntimeConfig->rxRefreshRate = 11000;
 350              	 .loc 1 129 0
 351 0010 3B68     	 ldr r3,[r7]
 352 0012 0022     	 movs r2,#0
 353 0014 62F00702 	 orn r2,r2,#7
 354 0018 5A70     	 strb r2,[r3,#1]
 355 001a 0022     	 movs r2,#0
 356 001c 42F02A02 	 orr r2,r2,#42
 357 0020 9A70     	 strb r2,[r3,#2]
 130:../cleanflight/src/main/rx/sumh.c **** 
 131:../cleanflight/src/main/rx/sumh.c ****     rxRuntimeConfig->rcReadRawFn = sumhReadRawRC;
 358              	 .loc 1 131 0
 359 0022 3B68     	 ldr r3,[r7]
 360 0024 1D4A     	 ldr r2,.L26
 361 0026 C3F80320 	 str r2,[r3,#3]
 132:../cleanflight/src/main/rx/sumh.c ****     rxRuntimeConfig->rcFrameStatusFn = sumhFrameStatus;
 362              	 .loc 1 132 0
 363 002a 3B68     	 ldr r3,[r7]
 364 002c 1C4A     	 ldr r2,.L26+4
 365 002e C3F80720 	 str r2,[r3,#7]
 133:../cleanflight/src/main/rx/sumh.c **** 
 134:../cleanflight/src/main/rx/sumh.c ****     const serialPortConfig_t *portConfig = findSerialPortConfig(FUNCTION_RX_SERIAL);
 366              	 .loc 1 134 0
 367 0032 4020     	 movs r0,#64
 368 0034 FFF7FEFF 	 bl findSerialPortConfig
 369 0038 F860     	 str r0,[r7,#12]
 135:../cleanflight/src/main/rx/sumh.c ****     if (!portConfig) {
 370              	 .loc 1 135 0
 371 003a FB68     	 ldr r3,[r7,#12]
 372 003c 002B     	 cmp r3,#0
 373 003e 01D1     	 bne .L22
 136:../cleanflight/src/main/rx/sumh.c ****         return false;
 374              	 .loc 1 136 0
 375 0040 0023     	 movs r3,#0
 376 0042 27E0     	 b .L23
 377              	.L22:
 137:../cleanflight/src/main/rx/sumh.c ****     }
 138:../cleanflight/src/main/rx/sumh.c **** 
 139:../cleanflight/src/main/rx/sumh.c **** #ifdef USE_TELEMETRY
 140:../cleanflight/src/main/rx/sumh.c ****     bool portShared = telemetryCheckRxPortShared(portConfig);
 141:../cleanflight/src/main/rx/sumh.c **** #else
 142:../cleanflight/src/main/rx/sumh.c ****     bool portShared = false;
 378              	 .loc 1 142 0
 379 0044 0023     	 movs r3,#0
 380 0046 FB72     	 strb r3,[r7,#11]
 143:../cleanflight/src/main/rx/sumh.c **** #endif
 144:../cleanflight/src/main/rx/sumh.c **** 
 145:../cleanflight/src/main/rx/sumh.c ****     sumhPort = openSerialPort(portConfig->identifier, FUNCTION_RX_SERIAL, sumhDataReceive, NULL, SU
 381              	 .loc 1 145 0
 382 0048 FB68     	 ldr r3,[r7,#12]
 383 004a 9978     	 ldrb r1,[r3,#2]
 384 004c FB7A     	 ldrb r3,[r7,#11]
 385 004e 002B     	 cmp r3,#0
 386 0050 01D0     	 beq .L24
 387              	 .loc 1 145 0 is_stmt 0 discriminator 1
 388 0052 0323     	 movs r3,#3
 389 0054 00E0     	 b .L25
 390              	.L24:
 391              	 .loc 1 145 0 discriminator 2
 392 0056 0123     	 movs r3,#1
 393              	.L25:
 394              	 .loc 1 145 0 discriminator 4
 395 0058 7A68     	 ldr r2,[r7,#4]
 396 005a 527A     	 ldrb r2,[r2,#9]
 397 005c 002A     	 cmp r2,#0
 398 005e 14BF     	 ite ne
 399 0060 0122     	 movne r2,#1
 400 0062 0022     	 moveq r2,#0
 401 0064 D2B2     	 uxtb r2,r2
 402 0066 1046     	 mov r0,r2
 403 0068 49B2     	 sxtb r1,r1
 404 006a 4FF4E132 	 mov r2,#115200
 405 006e 0092     	 str r2,[sp]
 406 0070 0193     	 str r3,[sp,#4]
 407 0072 0290     	 str r0,[sp,#8]
 408 0074 0846     	 mov r0,r1
 409 0076 4021     	 movs r1,#64
 410 0078 0A4A     	 ldr r2,.L26+8
 411 007a 0023     	 movs r3,#0
 412 007c FFF7FEFF 	 bl openSerialPort
 413 0080 0246     	 mov r2,r0
 414 0082 094B     	 ldr r3,.L26+12
 415 0084 1A60     	 str r2,[r3]
 146:../cleanflight/src/main/rx/sumh.c **** 
 147:../cleanflight/src/main/rx/sumh.c **** #ifdef USE_TELEMETRY
 148:../cleanflight/src/main/rx/sumh.c ****     if (portShared) {
 149:../cleanflight/src/main/rx/sumh.c ****         telemetrySharedPort = sumhPort;
 150:../cleanflight/src/main/rx/sumh.c ****     }
 151:../cleanflight/src/main/rx/sumh.c **** #endif
 152:../cleanflight/src/main/rx/sumh.c **** 
 153:../cleanflight/src/main/rx/sumh.c ****     return sumhPort != NULL;
 416              	 .loc 1 153 0 is_stmt 1 discriminator 4
 417 0086 084B     	 ldr r3,.L26+12
 418 0088 1B68     	 ldr r3,[r3]
 419 008a 002B     	 cmp r3,#0
 420 008c 14BF     	 ite ne
 421 008e 0123     	 movne r3,#1
 422 0090 0023     	 moveq r3,#0
 423 0092 DBB2     	 uxtb r3,r3
 424              	.L23:
 154:../cleanflight/src/main/rx/sumh.c **** }
 425              	 .loc 1 154 0
 426 0094 1846     	 mov r0,r3
 427 0096 1037     	 adds r7,r7,#16
 428              	.LCFI20:
 429              	 .cfi_def_cfa_offset 8
 430 0098 BD46     	 mov sp,r7
 431              	.LCFI21:
 432              	 .cfi_def_cfa_register 13
 433              	 
 434 009a 80BD     	 pop {r7,pc}
 435              	.L27:
 436              	 .align 2
 437              	.L26:
 438 009c 00000000 	 .word sumhReadRawRC
 439 00a0 00000000 	 .word sumhFrameStatus
 440 00a4 00000000 	 .word sumhDataReceive
 441 00a8 00000000 	 .word sumhPort
 442              	 .cfi_endproc
 443              	.LFE542:
 445              	 .section .bss.sumhTimeLast.12517,"aw",%nobits
 446              	 .align 2
 449              	sumhTimeLast.12517:
 450 0000 00000000 	 .space 4
 451              	 .section .bss.sumhTimeInterval.12518,"aw",%nobits
 452              	 .align 2
 455              	sumhTimeInterval.12518:
 456 0000 00000000 	 .space 4
 457              	 .section .bss.sumhFramePosition.12519,"aw",%nobits
 460              	sumhFramePosition.12519:
 461 0000 00       	 .space 1
 462              	 .text
 463              	.Letext0:
 464              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 465              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 466              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 467              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 468              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 469              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/resource.h"
 470              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 471              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
 472              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/rx.h"
 473              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/rx/rx.h"
 474              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 475              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sumh.c
    {standard input}:22     .bss.sumhFrameDone:00000000 sumhFrameDone
    {standard input}:23     .bss.sumhFrameDone:00000000 $d
    {standard input}:25     .bss.sumhFrame:00000000 $d
    {standard input}:28     .bss.sumhFrame:00000000 sumhFrame
    {standard input}:31     .bss.sumhChannels:00000000 $d
    {standard input}:34     .bss.sumhChannels:00000000 sumhChannels
    {standard input}:37     .bss.sumhPort:00000000 $d
    {standard input}:40     .bss.sumhPort:00000000 sumhPort
    {standard input}:43     .text.sumhDataReceive:00000000 $t
    {standard input}:47     .text.sumhDataReceive:00000000 sumhDataReceive
    {standard input}:132    .text.sumhDataReceive:00000068 $d
    {standard input}:449    .bss.sumhTimeLast.12517:00000000 sumhTimeLast.12517
    {standard input}:455    .bss.sumhTimeInterval.12518:00000000 sumhTimeInterval.12518
    {standard input}:460    .bss.sumhFramePosition.12519:00000000 sumhFramePosition.12519
    {standard input}:141    .text.sumhFrameStatus:00000000 $t
    {standard input}:145    .text.sumhFrameStatus:00000000 sumhFrameStatus
    {standard input}:253    .text.sumhFrameStatus:00000094 $d
    {standard input}:262    .text.sumhReadRawRC:00000000 $t
    {standard input}:266    .text.sumhReadRawRC:00000000 sumhReadRawRC
    {standard input}:317    .text.sumhReadRawRC:0000002c $d
    {standard input}:322    .text.sumhInit:00000000 $t
    {standard input}:327    .text.sumhInit:00000000 sumhInit
    {standard input}:438    .text.sumhInit:0000009c $d
    {standard input}:446    .bss.sumhTimeLast.12517:00000000 $d
    {standard input}:452    .bss.sumhTimeInterval.12518:00000000 $d
    {standard input}:461    .bss.sumhFramePosition.12519:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
micros
findSerialPortConfig
openSerialPort
