   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "scheduler.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.currentTask,"aw",%nobits
  20              	 .align 2
  23              	currentTask:
  24 0000 00000000 	 .space 4
  25              	 .section .bss.totalWaitingTasks,"aw",%nobits
  26              	 .align 2
  29              	totalWaitingTasks:
  30 0000 00000000 	 .space 4
  31              	 .section .bss.totalWaitingTasksSamples,"aw",%nobits
  32              	 .align 2
  35              	totalWaitingTasksSamples:
  36 0000 00000000 	 .space 4
  37              	 .section .bss.calculateTaskStatistics,"aw",%nobits
  40              	calculateTaskStatistics:
  41 0000 00       	 .space 1
  42              	 .global averageSystemLoadPercent
  43              	 .section .bss.averageSystemLoadPercent,"aw",%nobits
  44              	 .align 1
  47              	averageSystemLoadPercent:
  48 0000 0000     	 .space 2
  49              	 .section .bss.taskQueuePos,"aw",%nobits
  50              	 .align 2
  53              	taskQueuePos:
  54 0000 00000000 	 .space 4
  55              	 .section .bss.taskQueueSize,"aw",%nobits
  56              	 .align 2
  59              	taskQueueSize:
  60 0000 00000000 	 .space 4
  61              	 .section .bss.taskQueueArray,"aw",%nobits
  62              	 .align 2
  65              	taskQueueArray:
  66 0000 00000000 	 .space 88
  66      00000000 
  66      00000000 
  66      00000000 
  66      00000000 
  67              	 .section .text.queueClear,"ax",%progbits
  68              	 .align 2
  69              	 .global queueClear
  70              	 .thumb
  71              	 .thumb_func
  73              	queueClear:
  74              	.LFB529:
  75              	 .file 1 "../cleanflight/src/main/scheduler/scheduler.c"
   1:../cleanflight/src/main/scheduler/scheduler.c **** /*
   2:../cleanflight/src/main/scheduler/scheduler.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/scheduler/scheduler.c ****  *
   4:../cleanflight/src/main/scheduler/scheduler.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/scheduler/scheduler.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/scheduler/scheduler.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/scheduler/scheduler.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/scheduler/scheduler.c ****  * any later version.
   9:../cleanflight/src/main/scheduler/scheduler.c ****  *
  10:../cleanflight/src/main/scheduler/scheduler.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/scheduler/scheduler.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/scheduler/scheduler.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/scheduler/scheduler.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/scheduler/scheduler.c ****  *
  15:../cleanflight/src/main/scheduler/scheduler.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/scheduler/scheduler.c ****  * along with this software.
  17:../cleanflight/src/main/scheduler/scheduler.c ****  *
  18:../cleanflight/src/main/scheduler/scheduler.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/scheduler/scheduler.c ****  */
  20:../cleanflight/src/main/scheduler/scheduler.c **** 
  21:../cleanflight/src/main/scheduler/scheduler.c **** #define SRC_MAIN_SCHEDULER_C_
  22:../cleanflight/src/main/scheduler/scheduler.c **** 
  23:../cleanflight/src/main/scheduler/scheduler.c **** #include <stdbool.h>
  24:../cleanflight/src/main/scheduler/scheduler.c **** #include <stdint.h>
  25:../cleanflight/src/main/scheduler/scheduler.c **** #include <string.h>
  26:../cleanflight/src/main/scheduler/scheduler.c **** 
  27:../cleanflight/src/main/scheduler/scheduler.c **** #include "platform.h"
  28:../cleanflight/src/main/scheduler/scheduler.c **** 
  29:../cleanflight/src/main/scheduler/scheduler.c **** #include "build/build_config.h"
  30:../cleanflight/src/main/scheduler/scheduler.c **** #include "build/debug.h"
  31:../cleanflight/src/main/scheduler/scheduler.c **** 
  32:../cleanflight/src/main/scheduler/scheduler.c **** #include "scheduler/scheduler.h"
  33:../cleanflight/src/main/scheduler/scheduler.c **** 
  34:../cleanflight/src/main/scheduler/scheduler.c **** #include "config/config_unittest.h"
  35:../cleanflight/src/main/scheduler/scheduler.c **** 
  36:../cleanflight/src/main/scheduler/scheduler.c **** #include "common/maths.h"
  37:../cleanflight/src/main/scheduler/scheduler.c **** #include "common/time.h"
  38:../cleanflight/src/main/scheduler/scheduler.c **** #include "common/utils.h"
  39:../cleanflight/src/main/scheduler/scheduler.c **** 
  40:../cleanflight/src/main/scheduler/scheduler.c **** #include "drivers/time.h"
  41:../cleanflight/src/main/scheduler/scheduler.c **** 
  42:../cleanflight/src/main/scheduler/scheduler.c **** // DEBUG_SCHEDULER, timings for:
  43:../cleanflight/src/main/scheduler/scheduler.c **** // 0 - gyroUpdate()
  44:../cleanflight/src/main/scheduler/scheduler.c **** // 1 - pidController()
  45:../cleanflight/src/main/scheduler/scheduler.c **** // 2 - time spent in scheduler
  46:../cleanflight/src/main/scheduler/scheduler.c **** // 3 - time spent executing check function
  47:../cleanflight/src/main/scheduler/scheduler.c **** 
  48:../cleanflight/src/main/scheduler/scheduler.c **** static FAST_RAM_ZERO_INIT cfTask_t *currentTask = NULL;
  49:../cleanflight/src/main/scheduler/scheduler.c **** 
  50:../cleanflight/src/main/scheduler/scheduler.c **** static FAST_RAM_ZERO_INIT uint32_t totalWaitingTasks;
  51:../cleanflight/src/main/scheduler/scheduler.c **** static FAST_RAM_ZERO_INIT uint32_t totalWaitingTasksSamples;
  52:../cleanflight/src/main/scheduler/scheduler.c **** 
  53:../cleanflight/src/main/scheduler/scheduler.c **** static FAST_RAM_ZERO_INIT bool calculateTaskStatistics;
  54:../cleanflight/src/main/scheduler/scheduler.c **** FAST_RAM_ZERO_INIT uint16_t averageSystemLoadPercent = 0;
  55:../cleanflight/src/main/scheduler/scheduler.c **** 
  56:../cleanflight/src/main/scheduler/scheduler.c **** 
  57:../cleanflight/src/main/scheduler/scheduler.c **** static FAST_RAM_ZERO_INIT int taskQueuePos = 0;
  58:../cleanflight/src/main/scheduler/scheduler.c **** STATIC_UNIT_TESTED FAST_RAM_ZERO_INIT int taskQueueSize = 0;
  59:../cleanflight/src/main/scheduler/scheduler.c **** 
  60:../cleanflight/src/main/scheduler/scheduler.c **** // No need for a linked list for the queue, since items are only inserted at startup
  61:../cleanflight/src/main/scheduler/scheduler.c **** 
  62:../cleanflight/src/main/scheduler/scheduler.c **** STATIC_UNIT_TESTED FAST_RAM_ZERO_INIT cfTask_t* taskQueueArray[TASK_COUNT + 1]; // extra item for N
  63:../cleanflight/src/main/scheduler/scheduler.c **** 
  64:../cleanflight/src/main/scheduler/scheduler.c **** void queueClear(void)
  65:../cleanflight/src/main/scheduler/scheduler.c **** {
  76              	 .loc 1 65 0
  77              	 .cfi_startproc
  78              	 
  79              	 
  80 0000 80B5     	 push {r7,lr}
  81              	.LCFI0:
  82              	 .cfi_def_cfa_offset 8
  83              	 .cfi_offset 7,-8
  84              	 .cfi_offset 14,-4
  85 0002 00AF     	 add r7,sp,#0
  86              	.LCFI1:
  87              	 .cfi_def_cfa_register 7
  66:../cleanflight/src/main/scheduler/scheduler.c ****     memset(taskQueueArray, 0, sizeof(taskQueueArray));
  88              	 .loc 1 66 0
  89 0004 0548     	 ldr r0,.L2
  90 0006 0021     	 movs r1,#0
  91 0008 5822     	 movs r2,#88
  92 000a FFF7FEFF 	 bl memset
  67:../cleanflight/src/main/scheduler/scheduler.c ****     taskQueuePos = 0;
  93              	 .loc 1 67 0
  94 000e 044B     	 ldr r3,.L2+4
  95 0010 0022     	 movs r2,#0
  96 0012 1A60     	 str r2,[r3]
  68:../cleanflight/src/main/scheduler/scheduler.c ****     taskQueueSize = 0;
  97              	 .loc 1 68 0
  98 0014 034B     	 ldr r3,.L2+8
  99 0016 0022     	 movs r2,#0
 100 0018 1A60     	 str r2,[r3]
  69:../cleanflight/src/main/scheduler/scheduler.c **** }
 101              	 .loc 1 69 0
 102 001a 80BD     	 pop {r7,pc}
 103              	.L3:
 104              	 .align 2
 105              	.L2:
 106 001c 00000000 	 .word taskQueueArray
 107 0020 00000000 	 .word taskQueuePos
 108 0024 00000000 	 .word taskQueueSize
 109              	 .cfi_endproc
 110              	.LFE529:
 112              	 .section .text.queueContains,"ax",%progbits
 113              	 .align 2
 114              	 .global queueContains
 115              	 .thumb
 116              	 .thumb_func
 118              	queueContains:
 119              	.LFB530:
  70:../cleanflight/src/main/scheduler/scheduler.c **** 
  71:../cleanflight/src/main/scheduler/scheduler.c **** bool queueContains(cfTask_t *task)
  72:../cleanflight/src/main/scheduler/scheduler.c **** {
 120              	 .loc 1 72 0
 121              	 .cfi_startproc
 122              	 
 123              	 
 124              	 
 125 0000 80B4     	 push {r7}
 126              	.LCFI2:
 127              	 .cfi_def_cfa_offset 4
 128              	 .cfi_offset 7,-4
 129 0002 85B0     	 sub sp,sp,#20
 130              	.LCFI3:
 131              	 .cfi_def_cfa_offset 24
 132 0004 00AF     	 add r7,sp,#0
 133              	.LCFI4:
 134              	 .cfi_def_cfa_register 7
 135 0006 7860     	 str r0,[r7,#4]
 136              	.LBB2:
  73:../cleanflight/src/main/scheduler/scheduler.c ****     for (int ii = 0; ii < taskQueueSize; ++ii) {
 137              	 .loc 1 73 0
 138 0008 0023     	 movs r3,#0
 139 000a FB60     	 str r3,[r7,#12]
 140 000c 0BE0     	 b .L5
 141              	.L8:
  74:../cleanflight/src/main/scheduler/scheduler.c ****         if (taskQueueArray[ii] == task) {
 142              	 .loc 1 74 0
 143 000e 0C4A     	 ldr r2,.L9
 144 0010 FB68     	 ldr r3,[r7,#12]
 145 0012 52F82320 	 ldr r2,[r2,r3,lsl#2]
 146 0016 7B68     	 ldr r3,[r7,#4]
 147 0018 9A42     	 cmp r2,r3
 148 001a 01D1     	 bne .L6
  75:../cleanflight/src/main/scheduler/scheduler.c ****             return true;
 149              	 .loc 1 75 0
 150 001c 0123     	 movs r3,#1
 151 001e 08E0     	 b .L7
 152              	.L6:
  73:../cleanflight/src/main/scheduler/scheduler.c ****     for (int ii = 0; ii < taskQueueSize; ++ii) {
 153              	 .loc 1 73 0 discriminator 2
 154 0020 FB68     	 ldr r3,[r7,#12]
 155 0022 0133     	 adds r3,r3,#1
 156 0024 FB60     	 str r3,[r7,#12]
 157              	.L5:
  73:../cleanflight/src/main/scheduler/scheduler.c ****     for (int ii = 0; ii < taskQueueSize; ++ii) {
 158              	 .loc 1 73 0 is_stmt 0 discriminator 1
 159 0026 074B     	 ldr r3,.L9+4
 160 0028 1B68     	 ldr r3,[r3]
 161 002a FA68     	 ldr r2,[r7,#12]
 162 002c 9A42     	 cmp r2,r3
 163 002e EEDB     	 blt .L8
 164              	.LBE2:
  76:../cleanflight/src/main/scheduler/scheduler.c ****         }
  77:../cleanflight/src/main/scheduler/scheduler.c ****     }
  78:../cleanflight/src/main/scheduler/scheduler.c ****     return false;
 165              	 .loc 1 78 0 is_stmt 1
 166 0030 0023     	 movs r3,#0
 167              	.L7:
  79:../cleanflight/src/main/scheduler/scheduler.c **** }
 168              	 .loc 1 79 0
 169 0032 1846     	 mov r0,r3
 170 0034 1437     	 adds r7,r7,#20
 171              	.LCFI5:
 172              	 .cfi_def_cfa_offset 4
 173 0036 BD46     	 mov sp,r7
 174              	.LCFI6:
 175              	 .cfi_def_cfa_register 13
 176              	 
 177 0038 5DF8047B 	 ldr r7,[sp],#4
 178              	.LCFI7:
 179              	 .cfi_restore 7
 180              	 .cfi_def_cfa_offset 0
 181 003c 7047     	 bx lr
 182              	.L10:
 183 003e 00BF     	 .align 2
 184              	.L9:
 185 0040 00000000 	 .word taskQueueArray
 186 0044 00000000 	 .word taskQueueSize
 187              	 .cfi_endproc
 188              	.LFE530:
 190              	 .section .text.queueAdd,"ax",%progbits
 191              	 .align 2
 192              	 .global queueAdd
 193              	 .thumb
 194              	 .thumb_func
 196              	queueAdd:
 197              	.LFB531:
  80:../cleanflight/src/main/scheduler/scheduler.c **** 
  81:../cleanflight/src/main/scheduler/scheduler.c **** bool queueAdd(cfTask_t *task)
  82:../cleanflight/src/main/scheduler/scheduler.c **** {
 198              	 .loc 1 82 0
 199              	 .cfi_startproc
 200              	 
 201              	 
 202 0000 80B5     	 push {r7,lr}
 203              	.LCFI8:
 204              	 .cfi_def_cfa_offset 8
 205              	 .cfi_offset 7,-8
 206              	 .cfi_offset 14,-4
 207 0002 84B0     	 sub sp,sp,#16
 208              	.LCFI9:
 209              	 .cfi_def_cfa_offset 24
 210 0004 00AF     	 add r7,sp,#0
 211              	.LCFI10:
 212              	 .cfi_def_cfa_register 7
 213 0006 7860     	 str r0,[r7,#4]
  83:../cleanflight/src/main/scheduler/scheduler.c ****     if ((taskQueueSize >= TASK_COUNT) || queueContains(task)) {
 214              	 .loc 1 83 0
 215 0008 234B     	 ldr r3,.L19
 216 000a 1B68     	 ldr r3,[r3]
 217 000c 142B     	 cmp r3,#20
 218 000e 05DC     	 bgt .L12
 219              	 .loc 1 83 0 is_stmt 0 discriminator 1
 220 0010 7868     	 ldr r0,[r7,#4]
 221 0012 FFF7FEFF 	 bl queueContains
 222 0016 0346     	 mov r3,r0
 223 0018 002B     	 cmp r3,#0
 224 001a 01D0     	 beq .L13
 225              	.L12:
  84:../cleanflight/src/main/scheduler/scheduler.c ****         return false;
 226              	 .loc 1 84 0 is_stmt 1
 227 001c 0023     	 movs r3,#0
 228 001e 37E0     	 b .L14
 229              	.L13:
 230              	.LBB3:
  85:../cleanflight/src/main/scheduler/scheduler.c ****     }
  86:../cleanflight/src/main/scheduler/scheduler.c ****     for (int ii = 0; ii <= taskQueueSize; ++ii) {
 231              	 .loc 1 86 0
 232 0020 0023     	 movs r3,#0
 233 0022 FB60     	 str r3,[r7,#12]
 234 0024 2EE0     	 b .L15
 235              	.L18:
  87:../cleanflight/src/main/scheduler/scheduler.c ****         if (taskQueueArray[ii] == NULL || taskQueueArray[ii]->staticPriority < task->staticPriority
 236              	 .loc 1 87 0
 237 0026 1D4A     	 ldr r2,.L19+4
 238 0028 FB68     	 ldr r3,[r7,#12]
 239 002a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 240 002e 002B     	 cmp r3,#0
 241 0030 08D0     	 beq .L16
 242              	 .loc 1 87 0 is_stmt 0 discriminator 1
 243 0032 1A4A     	 ldr r2,.L19+4
 244 0034 FB68     	 ldr r3,[r7,#12]
 245 0036 52F82330 	 ldr r3,[r2,r3,lsl#2]
 246 003a 1A7D     	 ldrb r2,[r3,#20]
 247 003c 7B68     	 ldr r3,[r7,#4]
 248 003e 1B7D     	 ldrb r3,[r3,#20]
 249 0040 9A42     	 cmp r2,r3
 250 0042 1CD2     	 bcs .L17
 251              	.L16:
  88:../cleanflight/src/main/scheduler/scheduler.c ****             memmove(&taskQueueArray[ii+1], &taskQueueArray[ii], sizeof(task) * (taskQueueSize - ii)
 252              	 .loc 1 88 0 is_stmt 1
 253 0044 FB68     	 ldr r3,[r7,#12]
 254 0046 0133     	 adds r3,r3,#1
 255 0048 9B00     	 lsls r3,r3,#2
 256 004a 144A     	 ldr r2,.L19+4
 257 004c 9818     	 adds r0,r3,r2
 258 004e FB68     	 ldr r3,[r7,#12]
 259 0050 9B00     	 lsls r3,r3,#2
 260 0052 124A     	 ldr r2,.L19+4
 261 0054 9918     	 adds r1,r3,r2
 262 0056 104B     	 ldr r3,.L19
 263 0058 1A68     	 ldr r2,[r3]
 264 005a FB68     	 ldr r3,[r7,#12]
 265 005c D31A     	 subs r3,r2,r3
 266 005e 9B00     	 lsls r3,r3,#2
 267 0060 1A46     	 mov r2,r3
 268 0062 FFF7FEFF 	 bl memmove
  89:../cleanflight/src/main/scheduler/scheduler.c ****             taskQueueArray[ii] = task;
 269              	 .loc 1 89 0
 270 0066 0D49     	 ldr r1,.L19+4
 271 0068 FB68     	 ldr r3,[r7,#12]
 272 006a 7A68     	 ldr r2,[r7,#4]
 273 006c 41F82320 	 str r2,[r1,r3,lsl#2]
  90:../cleanflight/src/main/scheduler/scheduler.c ****             ++taskQueueSize;
 274              	 .loc 1 90 0
 275 0070 094B     	 ldr r3,.L19
 276 0072 1B68     	 ldr r3,[r3]
 277 0074 0133     	 adds r3,r3,#1
 278 0076 084A     	 ldr r2,.L19
 279 0078 1360     	 str r3,[r2]
  91:../cleanflight/src/main/scheduler/scheduler.c ****             return true;
 280              	 .loc 1 91 0
 281 007a 0123     	 movs r3,#1
 282 007c 08E0     	 b .L14
 283              	.L17:
  86:../cleanflight/src/main/scheduler/scheduler.c ****         if (taskQueueArray[ii] == NULL || taskQueueArray[ii]->staticPriority < task->staticPriority
 284              	 .loc 1 86 0 discriminator 2
 285 007e FB68     	 ldr r3,[r7,#12]
 286 0080 0133     	 adds r3,r3,#1
 287 0082 FB60     	 str r3,[r7,#12]
 288              	.L15:
  86:../cleanflight/src/main/scheduler/scheduler.c ****         if (taskQueueArray[ii] == NULL || taskQueueArray[ii]->staticPriority < task->staticPriority
 289              	 .loc 1 86 0 is_stmt 0 discriminator 1
 290 0084 044B     	 ldr r3,.L19
 291 0086 1B68     	 ldr r3,[r3]
 292 0088 FA68     	 ldr r2,[r7,#12]
 293 008a 9A42     	 cmp r2,r3
 294 008c CBDD     	 ble .L18
 295              	.LBE3:
  92:../cleanflight/src/main/scheduler/scheduler.c ****         }
  93:../cleanflight/src/main/scheduler/scheduler.c ****     }
  94:../cleanflight/src/main/scheduler/scheduler.c ****     return false;
 296              	 .loc 1 94 0 is_stmt 1
 297 008e 0023     	 movs r3,#0
 298              	.L14:
  95:../cleanflight/src/main/scheduler/scheduler.c **** }
 299              	 .loc 1 95 0
 300 0090 1846     	 mov r0,r3
 301 0092 1037     	 adds r7,r7,#16
 302              	.LCFI11:
 303              	 .cfi_def_cfa_offset 8
 304 0094 BD46     	 mov sp,r7
 305              	.LCFI12:
 306              	 .cfi_def_cfa_register 13
 307              	 
 308 0096 80BD     	 pop {r7,pc}
 309              	.L20:
 310              	 .align 2
 311              	.L19:
 312 0098 00000000 	 .word taskQueueSize
 313 009c 00000000 	 .word taskQueueArray
 314              	 .cfi_endproc
 315              	.LFE531:
 317              	 .section .text.queueRemove,"ax",%progbits
 318              	 .align 2
 319              	 .global queueRemove
 320              	 .thumb
 321              	 .thumb_func
 323              	queueRemove:
 324              	.LFB532:
  96:../cleanflight/src/main/scheduler/scheduler.c **** 
  97:../cleanflight/src/main/scheduler/scheduler.c **** bool queueRemove(cfTask_t *task)
  98:../cleanflight/src/main/scheduler/scheduler.c **** {
 325              	 .loc 1 98 0
 326              	 .cfi_startproc
 327              	 
 328              	 
 329 0000 80B5     	 push {r7,lr}
 330              	.LCFI13:
 331              	 .cfi_def_cfa_offset 8
 332              	 .cfi_offset 7,-8
 333              	 .cfi_offset 14,-4
 334 0002 84B0     	 sub sp,sp,#16
 335              	.LCFI14:
 336              	 .cfi_def_cfa_offset 24
 337 0004 00AF     	 add r7,sp,#0
 338              	.LCFI15:
 339              	 .cfi_def_cfa_register 7
 340 0006 7860     	 str r0,[r7,#4]
 341              	.LBB4:
  99:../cleanflight/src/main/scheduler/scheduler.c ****     for (int ii = 0; ii < taskQueueSize; ++ii) {
 342              	 .loc 1 99 0
 343 0008 0023     	 movs r3,#0
 344 000a FB60     	 str r3,[r7,#12]
 345 000c 21E0     	 b .L22
 346              	.L25:
 100:../cleanflight/src/main/scheduler/scheduler.c ****         if (taskQueueArray[ii] == task) {
 347              	 .loc 1 100 0
 348 000e 164A     	 ldr r2,.L26
 349 0010 FB68     	 ldr r3,[r7,#12]
 350 0012 52F82320 	 ldr r2,[r2,r3,lsl#2]
 351 0016 7B68     	 ldr r3,[r7,#4]
 352 0018 9A42     	 cmp r2,r3
 353 001a 17D1     	 bne .L23
 101:../cleanflight/src/main/scheduler/scheduler.c ****             memmove(&taskQueueArray[ii], &taskQueueArray[ii+1], sizeof(task) * (taskQueueSize - ii)
 354              	 .loc 1 101 0
 355 001c FB68     	 ldr r3,[r7,#12]
 356 001e 9B00     	 lsls r3,r3,#2
 357 0020 114A     	 ldr r2,.L26
 358 0022 9818     	 adds r0,r3,r2
 359 0024 FB68     	 ldr r3,[r7,#12]
 360 0026 0133     	 adds r3,r3,#1
 361 0028 9B00     	 lsls r3,r3,#2
 362 002a 0F4A     	 ldr r2,.L26
 363 002c 9918     	 adds r1,r3,r2
 364 002e 0F4B     	 ldr r3,.L26+4
 365 0030 1A68     	 ldr r2,[r3]
 366 0032 FB68     	 ldr r3,[r7,#12]
 367 0034 D31A     	 subs r3,r2,r3
 368 0036 9B00     	 lsls r3,r3,#2
 369 0038 1A46     	 mov r2,r3
 370 003a FFF7FEFF 	 bl memmove
 102:../cleanflight/src/main/scheduler/scheduler.c ****             --taskQueueSize;
 371              	 .loc 1 102 0
 372 003e 0B4B     	 ldr r3,.L26+4
 373 0040 1B68     	 ldr r3,[r3]
 374 0042 013B     	 subs r3,r3,#1
 375 0044 094A     	 ldr r2,.L26+4
 376 0046 1360     	 str r3,[r2]
 103:../cleanflight/src/main/scheduler/scheduler.c ****             return true;
 377              	 .loc 1 103 0
 378 0048 0123     	 movs r3,#1
 379 004a 08E0     	 b .L24
 380              	.L23:
  99:../cleanflight/src/main/scheduler/scheduler.c ****         if (taskQueueArray[ii] == task) {
 381              	 .loc 1 99 0 discriminator 2
 382 004c FB68     	 ldr r3,[r7,#12]
 383 004e 0133     	 adds r3,r3,#1
 384 0050 FB60     	 str r3,[r7,#12]
 385              	.L22:
  99:../cleanflight/src/main/scheduler/scheduler.c ****         if (taskQueueArray[ii] == task) {
 386              	 .loc 1 99 0 is_stmt 0 discriminator 1
 387 0052 064B     	 ldr r3,.L26+4
 388 0054 1B68     	 ldr r3,[r3]
 389 0056 FA68     	 ldr r2,[r7,#12]
 390 0058 9A42     	 cmp r2,r3
 391 005a D8DB     	 blt .L25
 392              	.LBE4:
 104:../cleanflight/src/main/scheduler/scheduler.c ****         }
 105:../cleanflight/src/main/scheduler/scheduler.c ****     }
 106:../cleanflight/src/main/scheduler/scheduler.c ****     return false;
 393              	 .loc 1 106 0 is_stmt 1
 394 005c 0023     	 movs r3,#0
 395              	.L24:
 107:../cleanflight/src/main/scheduler/scheduler.c **** }
 396              	 .loc 1 107 0
 397 005e 1846     	 mov r0,r3
 398 0060 1037     	 adds r7,r7,#16
 399              	.LCFI16:
 400              	 .cfi_def_cfa_offset 8
 401 0062 BD46     	 mov sp,r7
 402              	.LCFI17:
 403              	 .cfi_def_cfa_register 13
 404              	 
 405 0064 80BD     	 pop {r7,pc}
 406              	.L27:
 407 0066 00BF     	 .align 2
 408              	.L26:
 409 0068 00000000 	 .word taskQueueArray
 410 006c 00000000 	 .word taskQueueSize
 411              	 .cfi_endproc
 412              	.LFE532:
 414              	 .section .text.queueFirst,"ax",%progbits
 415              	 .align 2
 416              	 .global queueFirst
 417              	 .thumb
 418              	 .thumb_func
 420              	queueFirst:
 421              	.LFB533:
 108:../cleanflight/src/main/scheduler/scheduler.c **** 
 109:../cleanflight/src/main/scheduler/scheduler.c **** /*
 110:../cleanflight/src/main/scheduler/scheduler.c ****  * Returns first item queue or NULL if queue empty
 111:../cleanflight/src/main/scheduler/scheduler.c ****  */
 112:../cleanflight/src/main/scheduler/scheduler.c **** FAST_CODE cfTask_t *queueFirst(void)
 113:../cleanflight/src/main/scheduler/scheduler.c **** {
 422              	 .loc 1 113 0
 423              	 .cfi_startproc
 424              	 
 425              	 
 426              	 
 427 0000 80B4     	 push {r7}
 428              	.LCFI18:
 429              	 .cfi_def_cfa_offset 4
 430              	 .cfi_offset 7,-4
 431 0002 00AF     	 add r7,sp,#0
 432              	.LCFI19:
 433              	 .cfi_def_cfa_register 7
 114:../cleanflight/src/main/scheduler/scheduler.c ****     taskQueuePos = 0;
 434              	 .loc 1 114 0
 435 0004 044B     	 ldr r3,.L30
 436 0006 0022     	 movs r2,#0
 437 0008 1A60     	 str r2,[r3]
 115:../cleanflight/src/main/scheduler/scheduler.c ****     return taskQueueArray[0]; // guaranteed to be NULL if queue is empty
 438              	 .loc 1 115 0
 439 000a 044B     	 ldr r3,.L30+4
 440 000c 1B68     	 ldr r3,[r3]
 116:../cleanflight/src/main/scheduler/scheduler.c **** }
 441              	 .loc 1 116 0
 442 000e 1846     	 mov r0,r3
 443 0010 BD46     	 mov sp,r7
 444              	.LCFI20:
 445              	 .cfi_def_cfa_register 13
 446              	 
 447 0012 5DF8047B 	 ldr r7,[sp],#4
 448              	.LCFI21:
 449              	 .cfi_restore 7
 450              	 .cfi_def_cfa_offset 0
 451 0016 7047     	 bx lr
 452              	.L31:
 453              	 .align 2
 454              	.L30:
 455 0018 00000000 	 .word taskQueuePos
 456 001c 00000000 	 .word taskQueueArray
 457              	 .cfi_endproc
 458              	.LFE533:
 460              	 .section .text.queueNext,"ax",%progbits
 461              	 .align 2
 462              	 .global queueNext
 463              	 .thumb
 464              	 .thumb_func
 466              	queueNext:
 467              	.LFB534:
 117:../cleanflight/src/main/scheduler/scheduler.c **** 
 118:../cleanflight/src/main/scheduler/scheduler.c **** /*
 119:../cleanflight/src/main/scheduler/scheduler.c ****  * Returns next item in queue or NULL if at end of queue
 120:../cleanflight/src/main/scheduler/scheduler.c ****  */
 121:../cleanflight/src/main/scheduler/scheduler.c **** FAST_CODE cfTask_t *queueNext(void)
 122:../cleanflight/src/main/scheduler/scheduler.c **** {
 468              	 .loc 1 122 0
 469              	 .cfi_startproc
 470              	 
 471              	 
 472              	 
 473 0000 80B4     	 push {r7}
 474              	.LCFI22:
 475              	 .cfi_def_cfa_offset 4
 476              	 .cfi_offset 7,-4
 477 0002 00AF     	 add r7,sp,#0
 478              	.LCFI23:
 479              	 .cfi_def_cfa_register 7
 123:../cleanflight/src/main/scheduler/scheduler.c ****     return taskQueueArray[++taskQueuePos]; // guaranteed to be NULL at end of queue
 480              	 .loc 1 123 0
 481 0004 074B     	 ldr r3,.L34
 482 0006 1B68     	 ldr r3,[r3]
 483 0008 0133     	 adds r3,r3,#1
 484 000a 064A     	 ldr r2,.L34
 485 000c 1360     	 str r3,[r2]
 486 000e 054B     	 ldr r3,.L34
 487 0010 1B68     	 ldr r3,[r3]
 488 0012 054A     	 ldr r2,.L34+4
 489 0014 52F82330 	 ldr r3,[r2,r3,lsl#2]
 124:../cleanflight/src/main/scheduler/scheduler.c **** }
 490              	 .loc 1 124 0
 491 0018 1846     	 mov r0,r3
 492 001a BD46     	 mov sp,r7
 493              	.LCFI24:
 494              	 .cfi_def_cfa_register 13
 495              	 
 496 001c 5DF8047B 	 ldr r7,[sp],#4
 497              	.LCFI25:
 498              	 .cfi_restore 7
 499              	 .cfi_def_cfa_offset 0
 500 0020 7047     	 bx lr
 501              	.L35:
 502 0022 00BF     	 .align 2
 503              	.L34:
 504 0024 00000000 	 .word taskQueuePos
 505 0028 00000000 	 .word taskQueueArray
 506              	 .cfi_endproc
 507              	.LFE534:
 509              	 .section .text.taskSystemLoad,"ax",%progbits
 510              	 .align 2
 511              	 .global taskSystemLoad
 512              	 .thumb
 513              	 .thumb_func
 515              	taskSystemLoad:
 516              	.LFB535:
 125:../cleanflight/src/main/scheduler/scheduler.c **** 
 126:../cleanflight/src/main/scheduler/scheduler.c **** void taskSystemLoad(timeUs_t currentTimeUs)
 127:../cleanflight/src/main/scheduler/scheduler.c **** {
 517              	 .loc 1 127 0
 518              	 .cfi_startproc
 519              	 
 520              	 
 521              	 
 522 0000 80B4     	 push {r7}
 523              	.LCFI26:
 524              	 .cfi_def_cfa_offset 4
 525              	 .cfi_offset 7,-4
 526 0002 83B0     	 sub sp,sp,#12
 527              	.LCFI27:
 528              	 .cfi_def_cfa_offset 16
 529 0004 00AF     	 add r7,sp,#0
 530              	.LCFI28:
 531              	 .cfi_def_cfa_register 7
 532 0006 7860     	 str r0,[r7,#4]
 128:../cleanflight/src/main/scheduler/scheduler.c ****     UNUSED(currentTimeUs);
 129:../cleanflight/src/main/scheduler/scheduler.c **** 
 130:../cleanflight/src/main/scheduler/scheduler.c ****     // Calculate system load
 131:../cleanflight/src/main/scheduler/scheduler.c ****     if (totalWaitingTasksSamples > 0) {
 533              	 .loc 1 131 0
 534 0008 0D4B     	 ldr r3,.L38
 535 000a 1B68     	 ldr r3,[r3]
 536 000c 002B     	 cmp r3,#0
 537 000e 11D0     	 beq .L36
 132:../cleanflight/src/main/scheduler/scheduler.c ****         averageSystemLoadPercent = 100 * totalWaitingTasks / totalWaitingTasksSamples;
 538              	 .loc 1 132 0
 539 0010 0C4B     	 ldr r3,.L38+4
 540 0012 1B68     	 ldr r3,[r3]
 541 0014 6422     	 movs r2,#100
 542 0016 02FB03F2 	 mul r2,r2,r3
 543 001a 094B     	 ldr r3,.L38
 544 001c 1B68     	 ldr r3,[r3]
 545 001e B2FBF3F3 	 udiv r3,r2,r3
 546 0022 9AB2     	 uxth r2,r3
 547 0024 084B     	 ldr r3,.L38+8
 548 0026 1A80     	 strh r2,[r3]
 133:../cleanflight/src/main/scheduler/scheduler.c ****         totalWaitingTasksSamples = 0;
 549              	 .loc 1 133 0
 550 0028 054B     	 ldr r3,.L38
 551 002a 0022     	 movs r2,#0
 552 002c 1A60     	 str r2,[r3]
 134:../cleanflight/src/main/scheduler/scheduler.c ****         totalWaitingTasks = 0;
 553              	 .loc 1 134 0
 554 002e 054B     	 ldr r3,.L38+4
 555 0030 0022     	 movs r2,#0
 556 0032 1A60     	 str r2,[r3]
 557              	.L36:
 135:../cleanflight/src/main/scheduler/scheduler.c ****     }
 136:../cleanflight/src/main/scheduler/scheduler.c **** #if defined(SIMULATOR_BUILD)
 137:../cleanflight/src/main/scheduler/scheduler.c ****     averageSystemLoadPercent = 0;
 138:../cleanflight/src/main/scheduler/scheduler.c **** #endif
 139:../cleanflight/src/main/scheduler/scheduler.c **** }
 558              	 .loc 1 139 0
 559 0034 0C37     	 adds r7,r7,#12
 560              	.LCFI29:
 561              	 .cfi_def_cfa_offset 4
 562 0036 BD46     	 mov sp,r7
 563              	.LCFI30:
 564              	 .cfi_def_cfa_register 13
 565              	 
 566 0038 5DF8047B 	 ldr r7,[sp],#4
 567              	.LCFI31:
 568              	 .cfi_restore 7
 569              	 .cfi_def_cfa_offset 0
 570 003c 7047     	 bx lr
 571              	.L39:
 572 003e 00BF     	 .align 2
 573              	.L38:
 574 0040 00000000 	 .word totalWaitingTasksSamples
 575 0044 00000000 	 .word totalWaitingTasks
 576 0048 00000000 	 .word averageSystemLoadPercent
 577              	 .cfi_endproc
 578              	.LFE535:
 580              	 .comm checkFuncMaxExecutionTime,4,4
 581              	 .comm checkFuncTotalExecutionTime,4,4
 582              	 .comm checkFuncMovingSumExecutionTime,4,4
 583              	 .section .text.getCheckFuncInfo,"ax",%progbits
 584              	 .align 2
 585              	 .global getCheckFuncInfo
 586              	 .thumb
 587              	 .thumb_func
 589              	getCheckFuncInfo:
 590              	.LFB536:
 140:../cleanflight/src/main/scheduler/scheduler.c **** 
 141:../cleanflight/src/main/scheduler/scheduler.c **** #ifndef SKIP_TASK_STATISTICS
 142:../cleanflight/src/main/scheduler/scheduler.c **** #define MOVING_SUM_COUNT 32
 143:../cleanflight/src/main/scheduler/scheduler.c **** timeUs_t checkFuncMaxExecutionTime;
 144:../cleanflight/src/main/scheduler/scheduler.c **** timeUs_t checkFuncTotalExecutionTime;
 145:../cleanflight/src/main/scheduler/scheduler.c **** timeUs_t checkFuncMovingSumExecutionTime;
 146:../cleanflight/src/main/scheduler/scheduler.c **** 
 147:../cleanflight/src/main/scheduler/scheduler.c **** void getCheckFuncInfo(cfCheckFuncInfo_t *checkFuncInfo)
 148:../cleanflight/src/main/scheduler/scheduler.c **** {
 591              	 .loc 1 148 0
 592              	 .cfi_startproc
 593              	 
 594              	 
 595              	 
 596 0000 80B4     	 push {r7}
 597              	.LCFI32:
 598              	 .cfi_def_cfa_offset 4
 599              	 .cfi_offset 7,-4
 600 0002 83B0     	 sub sp,sp,#12
 601              	.LCFI33:
 602              	 .cfi_def_cfa_offset 16
 603 0004 00AF     	 add r7,sp,#0
 604              	.LCFI34:
 605              	 .cfi_def_cfa_register 7
 606 0006 7860     	 str r0,[r7,#4]
 149:../cleanflight/src/main/scheduler/scheduler.c ****     checkFuncInfo->maxExecutionTime = checkFuncMaxExecutionTime;
 607              	 .loc 1 149 0
 608 0008 084B     	 ldr r3,.L41
 609 000a 1A68     	 ldr r2,[r3]
 610 000c 7B68     	 ldr r3,[r7,#4]
 611 000e 1A60     	 str r2,[r3]
 150:../cleanflight/src/main/scheduler/scheduler.c ****     checkFuncInfo->totalExecutionTime = checkFuncTotalExecutionTime;
 612              	 .loc 1 150 0
 613 0010 074B     	 ldr r3,.L41+4
 614 0012 1A68     	 ldr r2,[r3]
 615 0014 7B68     	 ldr r3,[r7,#4]
 616 0016 5A60     	 str r2,[r3,#4]
 151:../cleanflight/src/main/scheduler/scheduler.c ****     checkFuncInfo->averageExecutionTime = checkFuncMovingSumExecutionTime / MOVING_SUM_COUNT;
 617              	 .loc 1 151 0
 618 0018 064B     	 ldr r3,.L41+8
 619 001a 1B68     	 ldr r3,[r3]
 620 001c 5A09     	 lsrs r2,r3,#5
 621 001e 7B68     	 ldr r3,[r7,#4]
 622 0020 9A60     	 str r2,[r3,#8]
 152:../cleanflight/src/main/scheduler/scheduler.c **** }
 623              	 .loc 1 152 0
 624 0022 0C37     	 adds r7,r7,#12
 625              	.LCFI35:
 626              	 .cfi_def_cfa_offset 4
 627 0024 BD46     	 mov sp,r7
 628              	.LCFI36:
 629              	 .cfi_def_cfa_register 13
 630              	 
 631 0026 5DF8047B 	 ldr r7,[sp],#4
 632              	.LCFI37:
 633              	 .cfi_restore 7
 634              	 .cfi_def_cfa_offset 0
 635 002a 7047     	 bx lr
 636              	.L42:
 637              	 .align 2
 638              	.L41:
 639 002c 00000000 	 .word checkFuncMaxExecutionTime
 640 0030 00000000 	 .word checkFuncTotalExecutionTime
 641 0034 00000000 	 .word checkFuncMovingSumExecutionTime
 642              	 .cfi_endproc
 643              	.LFE536:
 645              	 .section .text.getTaskInfo,"ax",%progbits
 646              	 .align 2
 647              	 .global getTaskInfo
 648              	 .thumb
 649              	 .thumb_func
 651              	getTaskInfo:
 652              	.LFB537:
 153:../cleanflight/src/main/scheduler/scheduler.c **** 
 154:../cleanflight/src/main/scheduler/scheduler.c **** void getTaskInfo(cfTaskId_e taskId, cfTaskInfo_t * taskInfo)
 155:../cleanflight/src/main/scheduler/scheduler.c **** {
 653              	 .loc 1 155 0
 654              	 .cfi_startproc
 655              	 
 656              	 
 657 0000 80B5     	 push {r7,lr}
 658              	.LCFI38:
 659              	 .cfi_def_cfa_offset 8
 660              	 .cfi_offset 7,-8
 661              	 .cfi_offset 14,-4
 662 0002 82B0     	 sub sp,sp,#8
 663              	.LCFI39:
 664              	 .cfi_def_cfa_offset 16
 665 0004 00AF     	 add r7,sp,#0
 666              	.LCFI40:
 667              	 .cfi_def_cfa_register 7
 668 0006 0346     	 mov r3,r0
 669 0008 3960     	 str r1,[r7]
 670 000a FB71     	 strb r3,[r7,#7]
 156:../cleanflight/src/main/scheduler/scheduler.c ****     taskInfo->taskName = cfTasks[taskId].taskName;
 671              	 .loc 1 156 0
 672 000c FA79     	 ldrb r2,[r7,#7]
 673 000e 3C49     	 ldr r1,.L44
 674 0010 1346     	 mov r3,r2
 675 0012 DB00     	 lsls r3,r3,#3
 676 0014 9B1A     	 subs r3,r3,r2
 677 0016 DA00     	 lsls r2,r3,#3
 678 0018 D21A     	 subs r2,r2,r3
 679 001a 8B18     	 adds r3,r1,r2
 680 001c 1A68     	 ldr r2,[r3]
 681 001e 3B68     	 ldr r3,[r7]
 682 0020 1A60     	 str r2,[r3]
 157:../cleanflight/src/main/scheduler/scheduler.c ****     taskInfo->subTaskName = cfTasks[taskId].subTaskName;
 683              	 .loc 1 157 0
 684 0022 FA79     	 ldrb r2,[r7,#7]
 685 0024 3649     	 ldr r1,.L44
 686 0026 1346     	 mov r3,r2
 687 0028 DB00     	 lsls r3,r3,#3
 688 002a 9B1A     	 subs r3,r3,r2
 689 002c DA00     	 lsls r2,r3,#3
 690 002e D21A     	 subs r2,r2,r3
 691 0030 8B18     	 adds r3,r1,r2
 692 0032 5A68     	 ldr r2,[r3,#4]
 693 0034 3B68     	 ldr r3,[r7]
 694 0036 5A60     	 str r2,[r3,#4]
 158:../cleanflight/src/main/scheduler/scheduler.c ****     taskInfo->isEnabled = queueContains(&cfTasks[taskId]);
 695              	 .loc 1 158 0
 696 0038 FA79     	 ldrb r2,[r7,#7]
 697 003a 1346     	 mov r3,r2
 698 003c DB00     	 lsls r3,r3,#3
 699 003e 9B1A     	 subs r3,r3,r2
 700 0040 DA00     	 lsls r2,r3,#3
 701 0042 D21A     	 subs r2,r2,r3
 702 0044 2E4B     	 ldr r3,.L44
 703 0046 1344     	 add r3,r3,r2
 704 0048 1846     	 mov r0,r3
 705 004a FFF7FEFF 	 bl queueContains
 706 004e 0346     	 mov r3,r0
 707 0050 1A46     	 mov r2,r3
 708 0052 3B68     	 ldr r3,[r7]
 709 0054 1A72     	 strb r2,[r3,#8]
 159:../cleanflight/src/main/scheduler/scheduler.c ****     taskInfo->desiredPeriod = cfTasks[taskId].desiredPeriod;
 710              	 .loc 1 159 0
 711 0056 FA79     	 ldrb r2,[r7,#7]
 712 0058 2949     	 ldr r1,.L44
 713 005a 1346     	 mov r3,r2
 714 005c DB00     	 lsls r3,r3,#3
 715 005e 9B1A     	 subs r3,r3,r2
 716 0060 DA00     	 lsls r2,r3,#3
 717 0062 D21A     	 subs r2,r2,r3
 718 0064 8B18     	 adds r3,r1,r2
 719 0066 1033     	 adds r3,r3,#16
 720 0068 1A68     	 ldr r2,[r3]
 721 006a 3B68     	 ldr r3,[r7]
 722 006c C3F80A20 	 str r2,[r3,#10]
 160:../cleanflight/src/main/scheduler/scheduler.c ****     taskInfo->staticPriority = cfTasks[taskId].staticPriority;
 723              	 .loc 1 160 0
 724 0070 FA79     	 ldrb r2,[r7,#7]
 725 0072 2349     	 ldr r1,.L44
 726 0074 1346     	 mov r3,r2
 727 0076 DB00     	 lsls r3,r3,#3
 728 0078 9B1A     	 subs r3,r3,r2
 729 007a DA00     	 lsls r2,r3,#3
 730 007c D21A     	 subs r2,r2,r3
 731 007e 8B18     	 adds r3,r1,r2
 732 0080 1033     	 adds r3,r3,#16
 733 0082 1A79     	 ldrb r2,[r3,#4]
 734 0084 3B68     	 ldr r3,[r7]
 735 0086 5A72     	 strb r2,[r3,#9]
 161:../cleanflight/src/main/scheduler/scheduler.c ****     taskInfo->maxExecutionTime = cfTasks[taskId].maxExecutionTime;
 736              	 .loc 1 161 0
 737 0088 FA79     	 ldrb r2,[r7,#7]
 738 008a 1D49     	 ldr r1,.L44
 739 008c 1346     	 mov r3,r2
 740 008e DB00     	 lsls r3,r3,#3
 741 0090 9B1A     	 subs r3,r3,r2
 742 0092 DA00     	 lsls r2,r3,#3
 743 0094 D21A     	 subs r2,r2,r3
 744 0096 8B18     	 adds r3,r1,r2
 745 0098 2833     	 adds r3,r3,#40
 746 009a D3F80120 	 ldr r2,[r3,#1]
 747 009e 3B68     	 ldr r3,[r7]
 748 00a0 C3F81220 	 str r2,[r3,#18]
 162:../cleanflight/src/main/scheduler/scheduler.c ****     taskInfo->totalExecutionTime = cfTasks[taskId].totalExecutionTime;
 749              	 .loc 1 162 0
 750 00a4 FA79     	 ldrb r2,[r7,#7]
 751 00a6 1649     	 ldr r1,.L44
 752 00a8 1346     	 mov r3,r2
 753 00aa DB00     	 lsls r3,r3,#3
 754 00ac 9B1A     	 subs r3,r3,r2
 755 00ae DA00     	 lsls r2,r3,#3
 756 00b0 D21A     	 subs r2,r2,r3
 757 00b2 8B18     	 adds r3,r1,r2
 758 00b4 2833     	 adds r3,r3,#40
 759 00b6 D3F80520 	 ldr r2,[r3,#5]
 760 00ba 3B68     	 ldr r3,[r7]
 761 00bc C3F81620 	 str r2,[r3,#22]
 163:../cleanflight/src/main/scheduler/scheduler.c ****     taskInfo->averageExecutionTime = cfTasks[taskId].movingSumExecutionTime / MOVING_SUM_COUNT;
 762              	 .loc 1 163 0
 763 00c0 FA79     	 ldrb r2,[r7,#7]
 764 00c2 0F49     	 ldr r1,.L44
 765 00c4 1346     	 mov r3,r2
 766 00c6 DB00     	 lsls r3,r3,#3
 767 00c8 9B1A     	 subs r3,r3,r2
 768 00ca DA00     	 lsls r2,r3,#3
 769 00cc D21A     	 subs r2,r2,r3
 770 00ce 8B18     	 adds r3,r1,r2
 771 00d0 2033     	 adds r3,r3,#32
 772 00d2 D3F80530 	 ldr r3,[r3,#5]
 773 00d6 5A09     	 lsrs r2,r3,#5
 774 00d8 3B68     	 ldr r3,[r7]
 775 00da C3F81A20 	 str r2,[r3,#26]
 164:../cleanflight/src/main/scheduler/scheduler.c ****     taskInfo->latestDeltaTime = cfTasks[taskId].taskLatestDeltaTime;
 776              	 .loc 1 164 0
 777 00de FA79     	 ldrb r2,[r7,#7]
 778 00e0 0749     	 ldr r1,.L44
 779 00e2 1346     	 mov r3,r2
 780 00e4 DB00     	 lsls r3,r3,#3
 781 00e6 9B1A     	 subs r3,r3,r2
 782 00e8 DA00     	 lsls r2,r3,#3
 783 00ea D21A     	 subs r2,r2,r3
 784 00ec 8B18     	 adds r3,r1,r2
 785 00ee 1833     	 adds r3,r3,#24
 786 00f0 D3F80120 	 ldr r2,[r3,#1]
 787 00f4 3B68     	 ldr r3,[r7]
 788 00f6 C3F80E20 	 str r2,[r3,#14]
 165:../cleanflight/src/main/scheduler/scheduler.c **** }
 789              	 .loc 1 165 0
 790 00fa 0837     	 adds r7,r7,#8
 791              	.LCFI41:
 792              	 .cfi_def_cfa_offset 8
 793 00fc BD46     	 mov sp,r7
 794              	.LCFI42:
 795              	 .cfi_def_cfa_register 13
 796              	 
 797 00fe 80BD     	 pop {r7,pc}
 798              	.L45:
 799              	 .align 2
 800              	.L44:
 801 0100 00000000 	 .word cfTasks
 802              	 .cfi_endproc
 803              	.LFE537:
 805              	 .section .text.rescheduleTask,"ax",%progbits
 806              	 .align 2
 807              	 .global rescheduleTask
 808              	 .thumb
 809              	 .thumb_func
 811              	rescheduleTask:
 812              	.LFB538:
 166:../cleanflight/src/main/scheduler/scheduler.c **** #endif
 167:../cleanflight/src/main/scheduler/scheduler.c **** 
 168:../cleanflight/src/main/scheduler/scheduler.c **** void rescheduleTask(cfTaskId_e taskId, uint32_t newPeriodMicros)
 169:../cleanflight/src/main/scheduler/scheduler.c **** {
 813              	 .loc 1 169 0
 814              	 .cfi_startproc
 815              	 
 816              	 
 817              	 
 818 0000 80B4     	 push {r7}
 819              	.LCFI43:
 820              	 .cfi_def_cfa_offset 4
 821              	 .cfi_offset 7,-4
 822 0002 89B0     	 sub sp,sp,#36
 823              	.LCFI44:
 824              	 .cfi_def_cfa_offset 40
 825 0004 00AF     	 add r7,sp,#0
 826              	.LCFI45:
 827              	 .cfi_def_cfa_register 7
 828 0006 0346     	 mov r3,r0
 829 0008 3960     	 str r1,[r7]
 830 000a FB71     	 strb r3,[r7,#7]
 170:../cleanflight/src/main/scheduler/scheduler.c ****     if (taskId == TASK_SELF) {
 831              	 .loc 1 170 0
 832 000c FB79     	 ldrb r3,[r7,#7]
 833 000e 162B     	 cmp r3,#22
 834 0010 0ED1     	 bne .L47
 835              	.LBB5:
 171:../cleanflight/src/main/scheduler/scheduler.c ****         cfTask_t *task = currentTask;
 836              	 .loc 1 171 0
 837 0012 154B     	 ldr r3,.L49
 838 0014 1B68     	 ldr r3,[r3]
 839 0016 FB61     	 str r3,[r7,#28]
 840              	.LBB6:
 172:../cleanflight/src/main/scheduler/scheduler.c ****         task->desiredPeriod = MAX(SCHEDULER_DELAY_LIMIT, (timeDelta_t)newPeriodMicros);  // Limit d
 841              	 .loc 1 172 0
 842 0018 6423     	 movs r3,#100
 843 001a BB61     	 str r3,[r7,#24]
 844 001c 3B68     	 ldr r3,[r7]
 845 001e 7B61     	 str r3,[r7,#20]
 846 0020 7A69     	 ldr r2,[r7,#20]
 847 0022 BB69     	 ldr r3,[r7,#24]
 848 0024 9A42     	 cmp r2,r3
 849 0026 B8BF     	 it lt
 850 0028 1A46     	 movlt r2,r3
 851              	.LBE6:
 852 002a FB69     	 ldr r3,[r7,#28]
 853 002c 1A61     	 str r2,[r3,#16]
 854              	.LBE5:
 855 002e 16E0     	 b .L46
 856              	.L47:
 173:../cleanflight/src/main/scheduler/scheduler.c ****     } else if (taskId < TASK_COUNT) {
 857              	 .loc 1 173 0
 858 0030 FB79     	 ldrb r3,[r7,#7]
 859 0032 142B     	 cmp r3,#20
 860 0034 13D8     	 bhi .L46
 861              	.LBB7:
 174:../cleanflight/src/main/scheduler/scheduler.c ****         cfTask_t *task = &cfTasks[taskId];
 862              	 .loc 1 174 0
 863 0036 FA79     	 ldrb r2,[r7,#7]
 864 0038 1346     	 mov r3,r2
 865 003a DB00     	 lsls r3,r3,#3
 866 003c 9B1A     	 subs r3,r3,r2
 867 003e DA00     	 lsls r2,r3,#3
 868 0040 D21A     	 subs r2,r2,r3
 869 0042 0A4B     	 ldr r3,.L49+4
 870 0044 1344     	 add r3,r3,r2
 871 0046 3B61     	 str r3,[r7,#16]
 872              	.LBB8:
 175:../cleanflight/src/main/scheduler/scheduler.c ****         task->desiredPeriod = MAX(SCHEDULER_DELAY_LIMIT, (timeDelta_t)newPeriodMicros);  // Limit d
 873              	 .loc 1 175 0
 874 0048 6423     	 movs r3,#100
 875 004a FB60     	 str r3,[r7,#12]
 876 004c 3B68     	 ldr r3,[r7]
 877 004e BB60     	 str r3,[r7,#8]
 878 0050 BA68     	 ldr r2,[r7,#8]
 879 0052 FB68     	 ldr r3,[r7,#12]
 880 0054 9A42     	 cmp r2,r3
 881 0056 B8BF     	 it lt
 882 0058 1A46     	 movlt r2,r3
 883              	.LBE8:
 884 005a 3B69     	 ldr r3,[r7,#16]
 885 005c 1A61     	 str r2,[r3,#16]
 886              	.L46:
 887              	.LBE7:
 176:../cleanflight/src/main/scheduler/scheduler.c ****     }
 177:../cleanflight/src/main/scheduler/scheduler.c **** }
 888              	 .loc 1 177 0
 889 005e 2437     	 adds r7,r7,#36
 890              	.LCFI46:
 891              	 .cfi_def_cfa_offset 4
 892 0060 BD46     	 mov sp,r7
 893              	.LCFI47:
 894              	 .cfi_def_cfa_register 13
 895              	 
 896 0062 5DF8047B 	 ldr r7,[sp],#4
 897              	.LCFI48:
 898              	 .cfi_restore 7
 899              	 .cfi_def_cfa_offset 0
 900 0066 7047     	 bx lr
 901              	.L50:
 902              	 .align 2
 903              	.L49:
 904 0068 00000000 	 .word currentTask
 905 006c 00000000 	 .word cfTasks
 906              	 .cfi_endproc
 907              	.LFE538:
 909              	 .section .text.setTaskEnabled,"ax",%progbits
 910              	 .align 2
 911              	 .global setTaskEnabled
 912              	 .thumb
 913              	 .thumb_func
 915              	setTaskEnabled:
 916              	.LFB539:
 178:../cleanflight/src/main/scheduler/scheduler.c **** 
 179:../cleanflight/src/main/scheduler/scheduler.c **** void setTaskEnabled(cfTaskId_e taskId, bool enabled)
 180:../cleanflight/src/main/scheduler/scheduler.c **** {
 917              	 .loc 1 180 0
 918              	 .cfi_startproc
 919              	 
 920              	 
 921 0000 80B5     	 push {r7,lr}
 922              	.LCFI49:
 923              	 .cfi_def_cfa_offset 8
 924              	 .cfi_offset 7,-8
 925              	 .cfi_offset 14,-4
 926 0002 84B0     	 sub sp,sp,#16
 927              	.LCFI50:
 928              	 .cfi_def_cfa_offset 24
 929 0004 00AF     	 add r7,sp,#0
 930              	.LCFI51:
 931              	 .cfi_def_cfa_register 7
 932 0006 0346     	 mov r3,r0
 933 0008 0A46     	 mov r2,r1
 934 000a FB71     	 strb r3,[r7,#7]
 935 000c 1346     	 mov r3,r2
 936 000e BB71     	 strb r3,[r7,#6]
 181:../cleanflight/src/main/scheduler/scheduler.c ****     if (taskId == TASK_SELF || taskId < TASK_COUNT) {
 937              	 .loc 1 181 0
 938 0010 FB79     	 ldrb r3,[r7,#7]
 939 0012 162B     	 cmp r3,#22
 940 0014 02D0     	 beq .L52
 941              	 .loc 1 181 0 is_stmt 0 discriminator 1
 942 0016 FB79     	 ldrb r3,[r7,#7]
 943 0018 142B     	 cmp r3,#20
 944 001a 1CD8     	 bhi .L51
 945              	.L52:
 946              	.LBB9:
 182:../cleanflight/src/main/scheduler/scheduler.c ****         cfTask_t *task = taskId == TASK_SELF ? currentTask : &cfTasks[taskId];
 947              	 .loc 1 182 0 is_stmt 1
 948 001c FB79     	 ldrb r3,[r7,#7]
 949 001e 162B     	 cmp r3,#22
 950 0020 08D0     	 beq .L54
 951              	 .loc 1 182 0 is_stmt 0 discriminator 1
 952 0022 FA79     	 ldrb r2,[r7,#7]
 953 0024 1346     	 mov r3,r2
 954 0026 DB00     	 lsls r3,r3,#3
 955 0028 9B1A     	 subs r3,r3,r2
 956 002a DA00     	 lsls r2,r3,#3
 957 002c D21A     	 subs r2,r2,r3
 958 002e 0B4B     	 ldr r3,.L57
 959 0030 1344     	 add r3,r3,r2
 960 0032 01E0     	 b .L55
 961              	.L54:
 962              	 .loc 1 182 0 discriminator 2
 963 0034 0A4B     	 ldr r3,.L57+4
 964 0036 1B68     	 ldr r3,[r3]
 965              	.L55:
 966              	 .loc 1 182 0 discriminator 4
 967 0038 FB60     	 str r3,[r7,#12]
 183:../cleanflight/src/main/scheduler/scheduler.c ****         if (enabled && task->taskFunc) {
 968              	 .loc 1 183 0 is_stmt 1 discriminator 4
 969 003a BB79     	 ldrb r3,[r7,#6]
 970 003c 002B     	 cmp r3,#0
 971 003e 07D0     	 beq .L56
 972              	 .loc 1 183 0 is_stmt 0 discriminator 1
 973 0040 FB68     	 ldr r3,[r7,#12]
 974 0042 DB68     	 ldr r3,[r3,#12]
 975 0044 002B     	 cmp r3,#0
 976 0046 03D0     	 beq .L56
 184:../cleanflight/src/main/scheduler/scheduler.c ****             queueAdd(task);
 977              	 .loc 1 184 0 is_stmt 1
 978 0048 F868     	 ldr r0,[r7,#12]
 979 004a FFF7FEFF 	 bl queueAdd
 980 004e 02E0     	 b .L51
 981              	.L56:
 185:../cleanflight/src/main/scheduler/scheduler.c ****         } else {
 186:../cleanflight/src/main/scheduler/scheduler.c ****             queueRemove(task);
 982              	 .loc 1 186 0
 983 0050 F868     	 ldr r0,[r7,#12]
 984 0052 FFF7FEFF 	 bl queueRemove
 985              	.L51:
 986              	.LBE9:
 187:../cleanflight/src/main/scheduler/scheduler.c ****         }
 188:../cleanflight/src/main/scheduler/scheduler.c ****     }
 189:../cleanflight/src/main/scheduler/scheduler.c **** }
 987              	 .loc 1 189 0
 988 0056 1037     	 adds r7,r7,#16
 989              	.LCFI52:
 990              	 .cfi_def_cfa_offset 8
 991 0058 BD46     	 mov sp,r7
 992              	.LCFI53:
 993              	 .cfi_def_cfa_register 13
 994              	 
 995 005a 80BD     	 pop {r7,pc}
 996              	.L58:
 997              	 .align 2
 998              	.L57:
 999 005c 00000000 	 .word cfTasks
 1000 0060 00000000 	 .word currentTask
 1001              	 .cfi_endproc
 1002              	.LFE539:
 1004              	 .section .text.getTaskDeltaTime,"ax",%progbits
 1005              	 .align 2
 1006              	 .global getTaskDeltaTime
 1007              	 .thumb
 1008              	 .thumb_func
 1010              	getTaskDeltaTime:
 1011              	.LFB540:
 190:../cleanflight/src/main/scheduler/scheduler.c **** 
 191:../cleanflight/src/main/scheduler/scheduler.c **** timeDelta_t getTaskDeltaTime(cfTaskId_e taskId)
 192:../cleanflight/src/main/scheduler/scheduler.c **** {
 1012              	 .loc 1 192 0
 1013              	 .cfi_startproc
 1014              	 
 1015              	 
 1016              	 
 1017 0000 80B4     	 push {r7}
 1018              	.LCFI54:
 1019              	 .cfi_def_cfa_offset 4
 1020              	 .cfi_offset 7,-4
 1021 0002 83B0     	 sub sp,sp,#12
 1022              	.LCFI55:
 1023              	 .cfi_def_cfa_offset 16
 1024 0004 00AF     	 add r7,sp,#0
 1025              	.LCFI56:
 1026              	 .cfi_def_cfa_register 7
 1027 0006 0346     	 mov r3,r0
 1028 0008 FB71     	 strb r3,[r7,#7]
 193:../cleanflight/src/main/scheduler/scheduler.c ****     if (taskId == TASK_SELF) {
 1029              	 .loc 1 193 0
 1030 000a FB79     	 ldrb r3,[r7,#7]
 1031 000c 162B     	 cmp r3,#22
 1032 000e 04D1     	 bne .L60
 194:../cleanflight/src/main/scheduler/scheduler.c ****         return currentTask->taskLatestDeltaTime;
 1033              	 .loc 1 194 0
 1034 0010 0D4B     	 ldr r3,.L63
 1035 0012 1B68     	 ldr r3,[r3]
 1036 0014 D3F81930 	 ldr r3,[r3,#25]
 1037 0018 0FE0     	 b .L61
 1038              	.L60:
 195:../cleanflight/src/main/scheduler/scheduler.c ****     } else if (taskId < TASK_COUNT) {
 1039              	 .loc 1 195 0
 1040 001a FB79     	 ldrb r3,[r7,#7]
 1041 001c 142B     	 cmp r3,#20
 1042 001e 0BD8     	 bhi .L62
 196:../cleanflight/src/main/scheduler/scheduler.c ****         return cfTasks[taskId].taskLatestDeltaTime;
 1043              	 .loc 1 196 0
 1044 0020 FA79     	 ldrb r2,[r7,#7]
 1045 0022 0A49     	 ldr r1,.L63+4
 1046 0024 1346     	 mov r3,r2
 1047 0026 DB00     	 lsls r3,r3,#3
 1048 0028 9B1A     	 subs r3,r3,r2
 1049 002a DA00     	 lsls r2,r3,#3
 1050 002c D21A     	 subs r2,r2,r3
 1051 002e 8B18     	 adds r3,r1,r2
 1052 0030 1833     	 adds r3,r3,#24
 1053 0032 D3F80130 	 ldr r3,[r3,#1]
 1054 0036 00E0     	 b .L61
 1055              	.L62:
 197:../cleanflight/src/main/scheduler/scheduler.c ****     } else {
 198:../cleanflight/src/main/scheduler/scheduler.c ****         return 0;
 1056              	 .loc 1 198 0
 1057 0038 0023     	 movs r3,#0
 1058              	.L61:
 199:../cleanflight/src/main/scheduler/scheduler.c ****     }
 200:../cleanflight/src/main/scheduler/scheduler.c **** }
 1059              	 .loc 1 200 0
 1060 003a 1846     	 mov r0,r3
 1061 003c 0C37     	 adds r7,r7,#12
 1062              	.LCFI57:
 1063              	 .cfi_def_cfa_offset 4
 1064 003e BD46     	 mov sp,r7
 1065              	.LCFI58:
 1066              	 .cfi_def_cfa_register 13
 1067              	 
 1068 0040 5DF8047B 	 ldr r7,[sp],#4
 1069              	.LCFI59:
 1070              	 .cfi_restore 7
 1071              	 .cfi_def_cfa_offset 0
 1072 0044 7047     	 bx lr
 1073              	.L64:
 1074 0046 00BF     	 .align 2
 1075              	.L63:
 1076 0048 00000000 	 .word currentTask
 1077 004c 00000000 	 .word cfTasks
 1078              	 .cfi_endproc
 1079              	.LFE540:
 1081              	 .section .text.schedulerSetCalulateTaskStatistics,"ax",%progbits
 1082              	 .align 2
 1083              	 .global schedulerSetCalulateTaskStatistics
 1084              	 .thumb
 1085              	 .thumb_func
 1087              	schedulerSetCalulateTaskStatistics:
 1088              	.LFB541:
 201:../cleanflight/src/main/scheduler/scheduler.c **** 
 202:../cleanflight/src/main/scheduler/scheduler.c **** void schedulerSetCalulateTaskStatistics(bool calculateTaskStatisticsToUse)
 203:../cleanflight/src/main/scheduler/scheduler.c **** {
 1089              	 .loc 1 203 0
 1090              	 .cfi_startproc
 1091              	 
 1092              	 
 1093              	 
 1094 0000 80B4     	 push {r7}
 1095              	.LCFI60:
 1096              	 .cfi_def_cfa_offset 4
 1097              	 .cfi_offset 7,-4
 1098 0002 83B0     	 sub sp,sp,#12
 1099              	.LCFI61:
 1100              	 .cfi_def_cfa_offset 16
 1101 0004 00AF     	 add r7,sp,#0
 1102              	.LCFI62:
 1103              	 .cfi_def_cfa_register 7
 1104 0006 0346     	 mov r3,r0
 1105 0008 FB71     	 strb r3,[r7,#7]
 204:../cleanflight/src/main/scheduler/scheduler.c ****     calculateTaskStatistics = calculateTaskStatisticsToUse;
 1106              	 .loc 1 204 0
 1107 000a 044A     	 ldr r2,.L66
 1108 000c FB79     	 ldrb r3,[r7,#7]
 1109 000e 1370     	 strb r3,[r2]
 205:../cleanflight/src/main/scheduler/scheduler.c **** }
 1110              	 .loc 1 205 0
 1111 0010 0C37     	 adds r7,r7,#12
 1112              	.LCFI63:
 1113              	 .cfi_def_cfa_offset 4
 1114 0012 BD46     	 mov sp,r7
 1115              	.LCFI64:
 1116              	 .cfi_def_cfa_register 13
 1117              	 
 1118 0014 5DF8047B 	 ldr r7,[sp],#4
 1119              	.LCFI65:
 1120              	 .cfi_restore 7
 1121              	 .cfi_def_cfa_offset 0
 1122 0018 7047     	 bx lr
 1123              	.L67:
 1124 001a 00BF     	 .align 2
 1125              	.L66:
 1126 001c 00000000 	 .word calculateTaskStatistics
 1127              	 .cfi_endproc
 1128              	.LFE541:
 1130              	 .section .text.schedulerResetTaskStatistics,"ax",%progbits
 1131              	 .align 2
 1132              	 .global schedulerResetTaskStatistics
 1133              	 .thumb
 1134              	 .thumb_func
 1136              	schedulerResetTaskStatistics:
 1137              	.LFB542:
 206:../cleanflight/src/main/scheduler/scheduler.c **** 
 207:../cleanflight/src/main/scheduler/scheduler.c **** void schedulerResetTaskStatistics(cfTaskId_e taskId)
 208:../cleanflight/src/main/scheduler/scheduler.c **** {
 1138              	 .loc 1 208 0
 1139              	 .cfi_startproc
 1140              	 
 1141              	 
 1142              	 
 1143 0000 80B4     	 push {r7}
 1144              	.LCFI66:
 1145              	 .cfi_def_cfa_offset 4
 1146              	 .cfi_offset 7,-4
 1147 0002 83B0     	 sub sp,sp,#12
 1148              	.LCFI67:
 1149              	 .cfi_def_cfa_offset 16
 1150 0004 00AF     	 add r7,sp,#0
 1151              	.LCFI68:
 1152              	 .cfi_def_cfa_register 7
 1153 0006 0346     	 mov r3,r0
 1154 0008 FB71     	 strb r3,[r7,#7]
 209:../cleanflight/src/main/scheduler/scheduler.c **** #ifdef SKIP_TASK_STATISTICS
 210:../cleanflight/src/main/scheduler/scheduler.c ****     UNUSED(taskId);
 211:../cleanflight/src/main/scheduler/scheduler.c **** #else
 212:../cleanflight/src/main/scheduler/scheduler.c ****     if (taskId == TASK_SELF) {
 1155              	 .loc 1 212 0
 1156 000a FB79     	 ldrb r3,[r7,#7]
 1157 000c 162B     	 cmp r3,#22
 1158 000e 2AD1     	 bne .L69
 213:../cleanflight/src/main/scheduler/scheduler.c ****         currentTask->movingSumExecutionTime = 0;
 1159              	 .loc 1 213 0
 1160 0010 324B     	 ldr r3,.L71
 1161 0012 1B68     	 ldr r3,[r3]
 1162 0014 0022     	 movs r2,#0
 1163 0016 83F82520 	 strb r2,[r3,#37]
 1164 001a 0022     	 movs r2,#0
 1165 001c 83F82620 	 strb r2,[r3,#38]
 1166 0020 0022     	 movs r2,#0
 1167 0022 83F82720 	 strb r2,[r3,#39]
 1168 0026 0022     	 movs r2,#0
 1169 0028 83F82820 	 strb r2,[r3,#40]
 214:../cleanflight/src/main/scheduler/scheduler.c ****         currentTask->totalExecutionTime = 0;
 1170              	 .loc 1 214 0
 1171 002c 2B4B     	 ldr r3,.L71
 1172 002e 1B68     	 ldr r3,[r3]
 1173 0030 0022     	 movs r2,#0
 1174 0032 83F82D20 	 strb r2,[r3,#45]
 1175 0036 0022     	 movs r2,#0
 1176 0038 83F82E20 	 strb r2,[r3,#46]
 1177 003c 0022     	 movs r2,#0
 1178 003e 83F82F20 	 strb r2,[r3,#47]
 1179 0042 0022     	 movs r2,#0
 1180 0044 83F83020 	 strb r2,[r3,#48]
 215:../cleanflight/src/main/scheduler/scheduler.c ****         currentTask->maxExecutionTime = 0;
 1181              	 .loc 1 215 0
 1182 0048 244B     	 ldr r3,.L71
 1183 004a 1B68     	 ldr r3,[r3]
 1184 004c 0022     	 movs r2,#0
 1185 004e 83F82920 	 strb r2,[r3,#41]
 1186 0052 0022     	 movs r2,#0
 1187 0054 83F82A20 	 strb r2,[r3,#42]
 1188 0058 0022     	 movs r2,#0
 1189 005a 83F82B20 	 strb r2,[r3,#43]
 1190 005e 0022     	 movs r2,#0
 1191 0060 83F82C20 	 strb r2,[r3,#44]
 1192 0064 35E0     	 b .L68
 1193              	.L69:
 216:../cleanflight/src/main/scheduler/scheduler.c ****     } else if (taskId < TASK_COUNT) {
 1194              	 .loc 1 216 0
 1195 0066 FB79     	 ldrb r3,[r7,#7]
 1196 0068 142B     	 cmp r3,#20
 1197 006a 32D8     	 bhi .L68
 217:../cleanflight/src/main/scheduler/scheduler.c ****         cfTasks[taskId].movingSumExecutionTime = 0;
 1198              	 .loc 1 217 0
 1199 006c FA79     	 ldrb r2,[r7,#7]
 1200 006e 1C49     	 ldr r1,.L71+4
 1201 0070 1346     	 mov r3,r2
 1202 0072 DB00     	 lsls r3,r3,#3
 1203 0074 9B1A     	 subs r3,r3,r2
 1204 0076 DA00     	 lsls r2,r3,#3
 1205 0078 D21A     	 subs r2,r2,r3
 1206 007a 8B18     	 adds r3,r1,r2
 1207 007c 2033     	 adds r3,r3,#32
 1208 007e 0022     	 movs r2,#0
 1209 0080 5A71     	 strb r2,[r3,#5]
 1210 0082 0022     	 movs r2,#0
 1211 0084 9A71     	 strb r2,[r3,#6]
 1212 0086 0022     	 movs r2,#0
 1213 0088 DA71     	 strb r2,[r3,#7]
 1214 008a 0022     	 movs r2,#0
 1215 008c 1A72     	 strb r2,[r3,#8]
 218:../cleanflight/src/main/scheduler/scheduler.c ****         cfTasks[taskId].totalExecutionTime = 0;
 1216              	 .loc 1 218 0
 1217 008e FA79     	 ldrb r2,[r7,#7]
 1218 0090 1349     	 ldr r1,.L71+4
 1219 0092 1346     	 mov r3,r2
 1220 0094 DB00     	 lsls r3,r3,#3
 1221 0096 9B1A     	 subs r3,r3,r2
 1222 0098 DA00     	 lsls r2,r3,#3
 1223 009a D21A     	 subs r2,r2,r3
 1224 009c 8B18     	 adds r3,r1,r2
 1225 009e 2833     	 adds r3,r3,#40
 1226 00a0 0022     	 movs r2,#0
 1227 00a2 5A71     	 strb r2,[r3,#5]
 1228 00a4 0022     	 movs r2,#0
 1229 00a6 9A71     	 strb r2,[r3,#6]
 1230 00a8 0022     	 movs r2,#0
 1231 00aa DA71     	 strb r2,[r3,#7]
 1232 00ac 0022     	 movs r2,#0
 1233 00ae 1A72     	 strb r2,[r3,#8]
 219:../cleanflight/src/main/scheduler/scheduler.c ****         cfTasks[taskId].maxExecutionTime = 0;
 1234              	 .loc 1 219 0
 1235 00b0 FA79     	 ldrb r2,[r7,#7]
 1236 00b2 0B49     	 ldr r1,.L71+4
 1237 00b4 1346     	 mov r3,r2
 1238 00b6 DB00     	 lsls r3,r3,#3
 1239 00b8 9B1A     	 subs r3,r3,r2
 1240 00ba DA00     	 lsls r2,r3,#3
 1241 00bc D21A     	 subs r2,r2,r3
 1242 00be 8B18     	 adds r3,r1,r2
 1243 00c0 2833     	 adds r3,r3,#40
 1244 00c2 0022     	 movs r2,#0
 1245 00c4 5A70     	 strb r2,[r3,#1]
 1246 00c6 0022     	 movs r2,#0
 1247 00c8 9A70     	 strb r2,[r3,#2]
 1248 00ca 0022     	 movs r2,#0
 1249 00cc DA70     	 strb r2,[r3,#3]
 1250 00ce 0022     	 movs r2,#0
 1251 00d0 1A71     	 strb r2,[r3,#4]
 1252              	.L68:
 220:../cleanflight/src/main/scheduler/scheduler.c ****     }
 221:../cleanflight/src/main/scheduler/scheduler.c **** #endif
 222:../cleanflight/src/main/scheduler/scheduler.c **** }
 1253              	 .loc 1 222 0
 1254 00d2 0C37     	 adds r7,r7,#12
 1255              	.LCFI69:
 1256              	 .cfi_def_cfa_offset 4
 1257 00d4 BD46     	 mov sp,r7
 1258              	.LCFI70:
 1259              	 .cfi_def_cfa_register 13
 1260              	 
 1261 00d6 5DF8047B 	 ldr r7,[sp],#4
 1262              	.LCFI71:
 1263              	 .cfi_restore 7
 1264              	 .cfi_def_cfa_offset 0
 1265 00da 7047     	 bx lr
 1266              	.L72:
 1267              	 .align 2
 1268              	.L71:
 1269 00dc 00000000 	 .word currentTask
 1270 00e0 00000000 	 .word cfTasks
 1271              	 .cfi_endproc
 1272              	.LFE542:
 1274              	 .section .text.schedulerResetTaskMaxExecutionTime,"ax",%progbits
 1275              	 .align 2
 1276              	 .global schedulerResetTaskMaxExecutionTime
 1277              	 .thumb
 1278              	 .thumb_func
 1280              	schedulerResetTaskMaxExecutionTime:
 1281              	.LFB543:
 223:../cleanflight/src/main/scheduler/scheduler.c **** 
 224:../cleanflight/src/main/scheduler/scheduler.c **** void schedulerResetTaskMaxExecutionTime(cfTaskId_e taskId)
 225:../cleanflight/src/main/scheduler/scheduler.c **** {
 1282              	 .loc 1 225 0
 1283              	 .cfi_startproc
 1284              	 
 1285              	 
 1286              	 
 1287 0000 80B4     	 push {r7}
 1288              	.LCFI72:
 1289              	 .cfi_def_cfa_offset 4
 1290              	 .cfi_offset 7,-4
 1291 0002 83B0     	 sub sp,sp,#12
 1292              	.LCFI73:
 1293              	 .cfi_def_cfa_offset 16
 1294 0004 00AF     	 add r7,sp,#0
 1295              	.LCFI74:
 1296              	 .cfi_def_cfa_register 7
 1297 0006 0346     	 mov r3,r0
 1298 0008 FB71     	 strb r3,[r7,#7]
 226:../cleanflight/src/main/scheduler/scheduler.c **** #ifdef SKIP_TASK_STATISTICS
 227:../cleanflight/src/main/scheduler/scheduler.c ****     UNUSED(taskId);
 228:../cleanflight/src/main/scheduler/scheduler.c **** #else
 229:../cleanflight/src/main/scheduler/scheduler.c ****     if (taskId == TASK_SELF) {
 1299              	 .loc 1 229 0
 1300 000a FB79     	 ldrb r3,[r7,#7]
 1301 000c 162B     	 cmp r3,#22
 1302 000e 0ED1     	 bne .L74
 230:../cleanflight/src/main/scheduler/scheduler.c ****         currentTask->maxExecutionTime = 0;
 1303              	 .loc 1 230 0
 1304 0010 134B     	 ldr r3,.L76
 1305 0012 1B68     	 ldr r3,[r3]
 1306 0014 0022     	 movs r2,#0
 1307 0016 83F82920 	 strb r2,[r3,#41]
 1308 001a 0022     	 movs r2,#0
 1309 001c 83F82A20 	 strb r2,[r3,#42]
 1310 0020 0022     	 movs r2,#0
 1311 0022 83F82B20 	 strb r2,[r3,#43]
 1312 0026 0022     	 movs r2,#0
 1313 0028 83F82C20 	 strb r2,[r3,#44]
 1314 002c 13E0     	 b .L73
 1315              	.L74:
 231:../cleanflight/src/main/scheduler/scheduler.c ****     } else if (taskId < TASK_COUNT) {
 1316              	 .loc 1 231 0
 1317 002e FB79     	 ldrb r3,[r7,#7]
 1318 0030 142B     	 cmp r3,#20
 1319 0032 10D8     	 bhi .L73
 232:../cleanflight/src/main/scheduler/scheduler.c ****         cfTasks[taskId].maxExecutionTime = 0;
 1320              	 .loc 1 232 0
 1321 0034 FA79     	 ldrb r2,[r7,#7]
 1322 0036 0B49     	 ldr r1,.L76+4
 1323 0038 1346     	 mov r3,r2
 1324 003a DB00     	 lsls r3,r3,#3
 1325 003c 9B1A     	 subs r3,r3,r2
 1326 003e DA00     	 lsls r2,r3,#3
 1327 0040 D21A     	 subs r2,r2,r3
 1328 0042 8B18     	 adds r3,r1,r2
 1329 0044 2833     	 adds r3,r3,#40
 1330 0046 0022     	 movs r2,#0
 1331 0048 5A70     	 strb r2,[r3,#1]
 1332 004a 0022     	 movs r2,#0
 1333 004c 9A70     	 strb r2,[r3,#2]
 1334 004e 0022     	 movs r2,#0
 1335 0050 DA70     	 strb r2,[r3,#3]
 1336 0052 0022     	 movs r2,#0
 1337 0054 1A71     	 strb r2,[r3,#4]
 1338              	.L73:
 233:../cleanflight/src/main/scheduler/scheduler.c ****     }
 234:../cleanflight/src/main/scheduler/scheduler.c **** #endif
 235:../cleanflight/src/main/scheduler/scheduler.c **** }
 1339              	 .loc 1 235 0
 1340 0056 0C37     	 adds r7,r7,#12
 1341              	.LCFI75:
 1342              	 .cfi_def_cfa_offset 4
 1343 0058 BD46     	 mov sp,r7
 1344              	.LCFI76:
 1345              	 .cfi_def_cfa_register 13
 1346              	 
 1347 005a 5DF8047B 	 ldr r7,[sp],#4
 1348              	.LCFI77:
 1349              	 .cfi_restore 7
 1350              	 .cfi_def_cfa_offset 0
 1351 005e 7047     	 bx lr
 1352              	.L77:
 1353              	 .align 2
 1354              	.L76:
 1355 0060 00000000 	 .word currentTask
 1356 0064 00000000 	 .word cfTasks
 1357              	 .cfi_endproc
 1358              	.LFE543:
 1360              	 .section .text.schedulerInit,"ax",%progbits
 1361              	 .align 2
 1362              	 .global schedulerInit
 1363              	 .thumb
 1364              	 .thumb_func
 1366              	schedulerInit:
 1367              	.LFB544:
 236:../cleanflight/src/main/scheduler/scheduler.c **** 
 237:../cleanflight/src/main/scheduler/scheduler.c **** void schedulerInit(void)
 238:../cleanflight/src/main/scheduler/scheduler.c **** {
 1368              	 .loc 1 238 0
 1369              	 .cfi_startproc
 1370              	 
 1371              	 
 1372 0000 80B5     	 push {r7,lr}
 1373              	.LCFI78:
 1374              	 .cfi_def_cfa_offset 8
 1375              	 .cfi_offset 7,-8
 1376              	 .cfi_offset 14,-4
 1377 0002 00AF     	 add r7,sp,#0
 1378              	.LCFI79:
 1379              	 .cfi_def_cfa_register 7
 239:../cleanflight/src/main/scheduler/scheduler.c ****     calculateTaskStatistics = true;
 1380              	 .loc 1 239 0
 1381 0004 044B     	 ldr r3,.L79
 1382 0006 0122     	 movs r2,#1
 1383 0008 1A70     	 strb r2,[r3]
 240:../cleanflight/src/main/scheduler/scheduler.c ****     queueClear();
 1384              	 .loc 1 240 0
 1385 000a FFF7FEFF 	 bl queueClear
 241:../cleanflight/src/main/scheduler/scheduler.c ****     queueAdd(&cfTasks[TASK_SYSTEM]);
 1386              	 .loc 1 241 0
 1387 000e 0348     	 ldr r0,.L79+4
 1388 0010 FFF7FEFF 	 bl queueAdd
 242:../cleanflight/src/main/scheduler/scheduler.c **** }
 1389              	 .loc 1 242 0
 1390 0014 80BD     	 pop {r7,pc}
 1391              	.L80:
 1392 0016 00BF     	 .align 2
 1393              	.L79:
 1394 0018 00000000 	 .word calculateTaskStatistics
 1395 001c 00000000 	 .word cfTasks
 1396              	 .cfi_endproc
 1397              	.LFE544:
 1399              	 .section .text.scheduler,"ax",%progbits
 1400              	 .align 2
 1401              	 .global scheduler
 1402              	 .thumb
 1403              	 .thumb_func
 1405              	scheduler:
 1406              	.LFB545:
 243:../cleanflight/src/main/scheduler/scheduler.c **** 
 244:../cleanflight/src/main/scheduler/scheduler.c **** FAST_CODE void scheduler(void)
 245:../cleanflight/src/main/scheduler/scheduler.c **** {
 1407              	 .loc 1 245 0
 1408              	 .cfi_startproc
 1409              	 
 1410              	 
 1411 0000 80B5     	 push {r7,lr}
 1412              	.LCFI80:
 1413              	 .cfi_def_cfa_offset 8
 1414              	 .cfi_offset 7,-8
 1415              	 .cfi_offset 14,-4
 1416 0002 90B0     	 sub sp,sp,#64
 1417              	.LCFI81:
 1418              	 .cfi_def_cfa_offset 72
 1419 0004 00AF     	 add r7,sp,#0
 1420              	.LCFI82:
 1421              	 .cfi_def_cfa_register 7
 246:../cleanflight/src/main/scheduler/scheduler.c ****     // Cache currentTime
 247:../cleanflight/src/main/scheduler/scheduler.c ****     const timeUs_t currentTimeUs = micros();
 1422              	 .loc 1 247 0
 1423 0006 FFF7FEFF 	 bl micros
 1424 000a B862     	 str r0,[r7,#40]
 248:../cleanflight/src/main/scheduler/scheduler.c **** 
 249:../cleanflight/src/main/scheduler/scheduler.c ****     // Check for realtime tasks
 250:../cleanflight/src/main/scheduler/scheduler.c ****     bool outsideRealtimeGuardInterval = true;
 1425              	 .loc 1 250 0
 1426 000c 0123     	 movs r3,#1
 1427 000e 87F83F30 	 strb r3,[r7,#63]
 1428              	.LBB10:
 251:../cleanflight/src/main/scheduler/scheduler.c ****     for (const cfTask_t *task = queueFirst(); task != NULL && task->staticPriority >= TASK_PRIORITY
 1429              	 .loc 1 251 0
 1430 0012 FFF7FEFF 	 bl queueFirst
 1431 0016 B863     	 str r0,[r7,#56]
 1432 0018 12E0     	 b .L82
 1433              	.L85:
 1434              	.LBB11:
 252:../cleanflight/src/main/scheduler/scheduler.c ****         const timeUs_t nextExecuteAt = task->lastExecutedAt + task->desiredPeriod;
 1435              	 .loc 1 252 0
 1436 001a BB6B     	 ldr r3,[r7,#56]
 1437 001c D3F81D30 	 ldr r3,[r3,#29]
 1438 0020 BA6B     	 ldr r2,[r7,#56]
 1439 0022 1269     	 ldr r2,[r2,#16]
 1440 0024 1344     	 add r3,r3,r2
 1441 0026 7B62     	 str r3,[r7,#36]
 253:../cleanflight/src/main/scheduler/scheduler.c ****         if ((timeDelta_t)(currentTimeUs - nextExecuteAt) >= 0) {
 1442              	 .loc 1 253 0
 1443 0028 BA6A     	 ldr r2,[r7,#40]
 1444 002a 7B6A     	 ldr r3,[r7,#36]
 1445 002c D31A     	 subs r3,r2,r3
 1446 002e 002B     	 cmp r3,#0
 1447 0030 03DB     	 blt .L83
 254:../cleanflight/src/main/scheduler/scheduler.c ****             outsideRealtimeGuardInterval = false;
 1448              	 .loc 1 254 0
 1449 0032 0023     	 movs r3,#0
 1450 0034 87F83F30 	 strb r3,[r7,#63]
 255:../cleanflight/src/main/scheduler/scheduler.c ****             break;
 1451              	 .loc 1 255 0
 1452 0038 09E0     	 b .L84
 1453              	.L83:
 1454              	.LBE11:
 251:../cleanflight/src/main/scheduler/scheduler.c ****         const timeUs_t nextExecuteAt = task->lastExecutedAt + task->desiredPeriod;
 1455              	 .loc 1 251 0 discriminator 2
 1456 003a FFF7FEFF 	 bl queueNext
 1457 003e B863     	 str r0,[r7,#56]
 1458              	.L82:
 251:../cleanflight/src/main/scheduler/scheduler.c ****         const timeUs_t nextExecuteAt = task->lastExecutedAt + task->desiredPeriod;
 1459              	 .loc 1 251 0 is_stmt 0 discriminator 1
 1460 0040 BB6B     	 ldr r3,[r7,#56]
 1461 0042 002B     	 cmp r3,#0
 1462 0044 03D0     	 beq .L84
 251:../cleanflight/src/main/scheduler/scheduler.c ****         const timeUs_t nextExecuteAt = task->lastExecutedAt + task->desiredPeriod;
 1463              	 .loc 1 251 0 discriminator 3
 1464 0046 BB6B     	 ldr r3,[r7,#56]
 1465 0048 1B7D     	 ldrb r3,[r3,#20]
 1466 004a 052B     	 cmp r3,#5
 1467 004c E5D8     	 bhi .L85
 1468              	.L84:
 1469              	.LBE10:
 256:../cleanflight/src/main/scheduler/scheduler.c ****         }
 257:../cleanflight/src/main/scheduler/scheduler.c ****     }
 258:../cleanflight/src/main/scheduler/scheduler.c **** 
 259:../cleanflight/src/main/scheduler/scheduler.c ****     // The task to be invoked
 260:../cleanflight/src/main/scheduler/scheduler.c ****     cfTask_t *selectedTask = NULL;
 1470              	 .loc 1 260 0 is_stmt 1
 1471 004e 0023     	 movs r3,#0
 1472 0050 7B63     	 str r3,[r7,#52]
 261:../cleanflight/src/main/scheduler/scheduler.c ****     uint16_t selectedTaskDynamicPriority = 0;
 1473              	 .loc 1 261 0
 1474 0052 0023     	 movs r3,#0
 1475 0054 7B86     	 strh r3,[r7,#50]
 262:../cleanflight/src/main/scheduler/scheduler.c **** 
 263:../cleanflight/src/main/scheduler/scheduler.c ****     // Update task dynamic priorities
 264:../cleanflight/src/main/scheduler/scheduler.c ****     uint16_t waitingTasks = 0;
 1476              	 .loc 1 264 0
 1477 0056 0023     	 movs r3,#0
 1478 0058 3B86     	 strh r3,[r7,#48]
 1479              	.LBB12:
 265:../cleanflight/src/main/scheduler/scheduler.c ****     for (cfTask_t *task = queueFirst(); task != NULL; task = queueNext()) {
 1480              	 .loc 1 265 0
 1481 005a FFF7FEFF 	 bl queueFirst
 1482 005e F862     	 str r0,[r7,#44]
 1483 0060 CEE0     	 b .L86
 1484              	.L97:
 266:../cleanflight/src/main/scheduler/scheduler.c ****         // Task has checkFunc - event driven
 267:../cleanflight/src/main/scheduler/scheduler.c ****         if (task->checkFunc) {
 1485              	 .loc 1 267 0
 1486 0062 FB6A     	 ldr r3,[r7,#44]
 1487 0064 9B68     	 ldr r3,[r3,#8]
 1488 0066 002B     	 cmp r3,#0
 1489 0068 7AD0     	 beq .L87
 1490              	.LBB13:
 268:../cleanflight/src/main/scheduler/scheduler.c **** #if defined(SCHEDULER_DEBUG)
 269:../cleanflight/src/main/scheduler/scheduler.c ****             const timeUs_t currentTimeBeforeCheckFuncCall = micros();
 270:../cleanflight/src/main/scheduler/scheduler.c **** #else
 271:../cleanflight/src/main/scheduler/scheduler.c ****             const timeUs_t currentTimeBeforeCheckFuncCall = currentTimeUs;
 1491              	 .loc 1 271 0
 1492 006a BB6A     	 ldr r3,[r7,#40]
 1493 006c 3B62     	 str r3,[r7,#32]
 272:../cleanflight/src/main/scheduler/scheduler.c **** #endif
 273:../cleanflight/src/main/scheduler/scheduler.c ****             // Increase priority for event driven tasks
 274:../cleanflight/src/main/scheduler/scheduler.c ****             if (task->dynamicPriority > 0) {
 1494              	 .loc 1 274 0
 1495 006e FB6A     	 ldr r3,[r7,#44]
 1496 0070 B3F81530 	 ldrh r3,[r3,#21]
 1497 0074 9BB2     	 uxth r3,r3
 1498 0076 002B     	 cmp r3,#0
 1499 0078 21D0     	 beq .L88
 275:../cleanflight/src/main/scheduler/scheduler.c ****                 task->taskAgeCycles = 1 + ((currentTimeUs - task->lastSignaledAt) / task->desiredPe
 1500              	 .loc 1 275 0
 1501 007a FB6A     	 ldr r3,[r7,#44]
 1502 007c D3F82130 	 ldr r3,[r3,#33]
 1503 0080 BA6A     	 ldr r2,[r7,#40]
 1504 0082 D31A     	 subs r3,r2,r3
 1505 0084 FA6A     	 ldr r2,[r7,#44]
 1506 0086 1269     	 ldr r2,[r2,#16]
 1507 0088 B3FBF2F3 	 udiv r3,r3,r2
 1508 008c 9BB2     	 uxth r3,r3
 1509 008e 0133     	 adds r3,r3,#1
 1510 0090 9AB2     	 uxth r2,r3
 1511 0092 FB6A     	 ldr r3,[r7,#44]
 1512 0094 A3F81720 	 strh r2,[r3,#23]
 276:../cleanflight/src/main/scheduler/scheduler.c ****                 task->dynamicPriority = 1 + task->staticPriority * task->taskAgeCycles;
 1513              	 .loc 1 276 0
 1514 0098 FB6A     	 ldr r3,[r7,#44]
 1515 009a 1B7D     	 ldrb r3,[r3,#20]
 1516 009c 9AB2     	 uxth r2,r3
 1517 009e FB6A     	 ldr r3,[r7,#44]
 1518 00a0 B3F81730 	 ldrh r3,[r3,#23]
 1519 00a4 9BB2     	 uxth r3,r3
 1520 00a6 12FB03F3 	 smulbb r3,r2,r3
 1521 00aa 9BB2     	 uxth r3,r3
 1522 00ac 0133     	 adds r3,r3,#1
 1523 00ae 9AB2     	 uxth r2,r3
 1524 00b0 FB6A     	 ldr r3,[r7,#44]
 1525 00b2 A3F81520 	 strh r2,[r3,#21]
 277:../cleanflight/src/main/scheduler/scheduler.c ****                 waitingTasks++;
 1526              	 .loc 1 277 0
 1527 00b6 3B8E     	 ldrh r3,[r7,#48]
 1528 00b8 0133     	 adds r3,r3,#1
 1529 00ba 3B86     	 strh r3,[r7,#48]
 1530 00bc 4FE0     	 b .L89
 1531              	.L88:
 278:../cleanflight/src/main/scheduler/scheduler.c ****             } else if (task->checkFunc(currentTimeBeforeCheckFuncCall, currentTimeBeforeCheckFuncCa
 1532              	 .loc 1 278 0
 1533 00be FB6A     	 ldr r3,[r7,#44]
 1534 00c0 9B68     	 ldr r3,[r3,#8]
 1535 00c2 FA6A     	 ldr r2,[r7,#44]
 1536 00c4 D2F81D20 	 ldr r2,[r2,#29]
 1537 00c8 396A     	 ldr r1,[r7,#32]
 1538 00ca 8A1A     	 subs r2,r1,r2
 1539 00cc 386A     	 ldr r0,[r7,#32]
 1540 00ce 1146     	 mov r1,r2
 1541 00d0 9847     	 blx r3
 1542 00d2 0346     	 mov r3,r0
 1543 00d4 002B     	 cmp r3,#0
 1544 00d6 3CD0     	 beq .L90
 279:../cleanflight/src/main/scheduler/scheduler.c **** #if defined(SCHEDULER_DEBUG)
 280:../cleanflight/src/main/scheduler/scheduler.c ****                 DEBUG_SET(DEBUG_SCHEDULER, 3, micros() - currentTimeBeforeCheckFuncCall);
 281:../cleanflight/src/main/scheduler/scheduler.c **** #endif
 282:../cleanflight/src/main/scheduler/scheduler.c **** #ifndef SKIP_TASK_STATISTICS
 283:../cleanflight/src/main/scheduler/scheduler.c ****                 if (calculateTaskStatistics) {
 1545              	 .loc 1 283 0
 1546 00d8 7B4B     	 ldr r3,.L100
 1547 00da 1B78     	 ldrb r3,[r3]
 1548 00dc 002B     	 cmp r3,#0
 1549 00de 21D0     	 beq .L91
 1550              	.LBB14:
 284:../cleanflight/src/main/scheduler/scheduler.c ****                     const uint32_t checkFuncExecutionTime = micros() - currentTimeBeforeCheckFuncCa
 1551              	 .loc 1 284 0
 1552 00e0 FFF7FEFF 	 bl micros
 1553 00e4 0246     	 mov r2,r0
 1554 00e6 3B6A     	 ldr r3,[r7,#32]
 1555 00e8 D31A     	 subs r3,r2,r3
 1556 00ea FB61     	 str r3,[r7,#28]
 285:../cleanflight/src/main/scheduler/scheduler.c ****                     checkFuncMovingSumExecutionTime += checkFuncExecutionTime - checkFuncMovingSumE
 1557              	 .loc 1 285 0
 1558 00ec 774B     	 ldr r3,.L100+4
 1559 00ee 1B68     	 ldr r3,[r3]
 1560 00f0 5B09     	 lsrs r3,r3,#5
 1561 00f2 FA69     	 ldr r2,[r7,#28]
 1562 00f4 D21A     	 subs r2,r2,r3
 1563 00f6 754B     	 ldr r3,.L100+4
 1564 00f8 1B68     	 ldr r3,[r3]
 1565 00fa 1344     	 add r3,r3,r2
 1566 00fc 734A     	 ldr r2,.L100+4
 1567 00fe 1360     	 str r3,[r2]
 286:../cleanflight/src/main/scheduler/scheduler.c ****                     checkFuncTotalExecutionTime += checkFuncExecutionTime;   // time consumed by sc
 1568              	 .loc 1 286 0
 1569 0100 734B     	 ldr r3,.L100+8
 1570 0102 1A68     	 ldr r2,[r3]
 1571 0104 FB69     	 ldr r3,[r7,#28]
 1572 0106 1344     	 add r3,r3,r2
 1573 0108 714A     	 ldr r2,.L100+8
 1574 010a 1360     	 str r3,[r2]
 1575              	.LBB15:
 287:../cleanflight/src/main/scheduler/scheduler.c ****                     checkFuncMaxExecutionTime = MAX(checkFuncMaxExecutionTime, checkFuncExecutionTi
 1576              	 .loc 1 287 0
 1577 010c 714B     	 ldr r3,.L100+12
 1578 010e 1B68     	 ldr r3,[r3]
 1579 0110 BB61     	 str r3,[r7,#24]
 1580 0112 FB69     	 ldr r3,[r7,#28]
 1581 0114 7B61     	 str r3,[r7,#20]
 1582 0116 7A69     	 ldr r2,[r7,#20]
 1583 0118 BB69     	 ldr r3,[r7,#24]
 1584 011a 9342     	 cmp r3,r2
 1585 011c 38BF     	 it cc
 1586 011e 1346     	 movcc r3,r2
 1587              	.LBE15:
 1588 0120 6C4A     	 ldr r2,.L100+12
 1589 0122 1360     	 str r3,[r2]
 1590              	.L91:
 1591              	.LBE14:
 288:../cleanflight/src/main/scheduler/scheduler.c ****                 }
 289:../cleanflight/src/main/scheduler/scheduler.c **** #endif
 290:../cleanflight/src/main/scheduler/scheduler.c ****                 task->lastSignaledAt = currentTimeBeforeCheckFuncCall;
 1592              	 .loc 1 290 0
 1593 0124 FB6A     	 ldr r3,[r7,#44]
 1594 0126 3A6A     	 ldr r2,[r7,#32]
 1595 0128 C3F82120 	 str r2,[r3,#33]
 291:../cleanflight/src/main/scheduler/scheduler.c ****                 task->taskAgeCycles = 1;
 1596              	 .loc 1 291 0
 1597 012c FB6A     	 ldr r3,[r7,#44]
 1598 012e 0022     	 movs r2,#0
 1599 0130 42F00102 	 orr r2,r2,#1
 1600 0134 DA75     	 strb r2,[r3,#23]
 1601 0136 0022     	 movs r2,#0
 1602 0138 1A76     	 strb r2,[r3,#24]
 292:../cleanflight/src/main/scheduler/scheduler.c ****                 task->dynamicPriority = 1 + task->staticPriority;
 1603              	 .loc 1 292 0
 1604 013a FB6A     	 ldr r3,[r7,#44]
 1605 013c 1B7D     	 ldrb r3,[r3,#20]
 1606 013e 9BB2     	 uxth r3,r3
 1607 0140 0133     	 adds r3,r3,#1
 1608 0142 9AB2     	 uxth r2,r3
 1609 0144 FB6A     	 ldr r3,[r7,#44]
 1610 0146 A3F81520 	 strh r2,[r3,#21]
 293:../cleanflight/src/main/scheduler/scheduler.c ****                 waitingTasks++;
 1611              	 .loc 1 293 0
 1612 014a 3B8E     	 ldrh r3,[r7,#48]
 1613 014c 0133     	 adds r3,r3,#1
 1614 014e 3B86     	 strh r3,[r7,#48]
 1615 0150 05E0     	 b .L89
 1616              	.L90:
 294:../cleanflight/src/main/scheduler/scheduler.c ****             } else {
 295:../cleanflight/src/main/scheduler/scheduler.c ****                 task->taskAgeCycles = 0;
 1617              	 .loc 1 295 0
 1618 0152 FB6A     	 ldr r3,[r7,#44]
 1619 0154 0022     	 movs r2,#0
 1620 0156 DA75     	 strb r2,[r3,#23]
 1621 0158 0022     	 movs r2,#0
 1622 015a 1A76     	 strb r2,[r3,#24]
 1623              	.LBE13:
 1624 015c 25E0     	 b .L92
 1625              	.L89:
 1626 015e 24E0     	 b .L92
 1627              	.L87:
 296:../cleanflight/src/main/scheduler/scheduler.c ****             }
 297:../cleanflight/src/main/scheduler/scheduler.c ****         } else {
 298:../cleanflight/src/main/scheduler/scheduler.c ****             // Task is time-driven, dynamicPriority is last execution age (measured in desiredPerio
 299:../cleanflight/src/main/scheduler/scheduler.c ****             // Task age is calculated from last execution
 300:../cleanflight/src/main/scheduler/scheduler.c ****             task->taskAgeCycles = ((currentTimeUs - task->lastExecutedAt) / task->desiredPeriod);
 1628              	 .loc 1 300 0
 1629 0160 FB6A     	 ldr r3,[r7,#44]
 1630 0162 D3F81D30 	 ldr r3,[r3,#29]
 1631 0166 BA6A     	 ldr r2,[r7,#40]
 1632 0168 D31A     	 subs r3,r2,r3
 1633 016a FA6A     	 ldr r2,[r7,#44]
 1634 016c 1269     	 ldr r2,[r2,#16]
 1635 016e B3FBF2F3 	 udiv r3,r3,r2
 1636 0172 9AB2     	 uxth r2,r3
 1637 0174 FB6A     	 ldr r3,[r7,#44]
 1638 0176 A3F81720 	 strh r2,[r3,#23]
 301:../cleanflight/src/main/scheduler/scheduler.c ****             if (task->taskAgeCycles > 0) {
 1639              	 .loc 1 301 0
 1640 017a FB6A     	 ldr r3,[r7,#44]
 1641 017c B3F81730 	 ldrh r3,[r3,#23]
 1642 0180 9BB2     	 uxth r3,r3
 1643 0182 002B     	 cmp r3,#0
 1644 0184 11D0     	 beq .L92
 302:../cleanflight/src/main/scheduler/scheduler.c ****                 task->dynamicPriority = 1 + task->staticPriority * task->taskAgeCycles;
 1645              	 .loc 1 302 0
 1646 0186 FB6A     	 ldr r3,[r7,#44]
 1647 0188 1B7D     	 ldrb r3,[r3,#20]
 1648 018a 9AB2     	 uxth r2,r3
 1649 018c FB6A     	 ldr r3,[r7,#44]
 1650 018e B3F81730 	 ldrh r3,[r3,#23]
 1651 0192 9BB2     	 uxth r3,r3
 1652 0194 12FB03F3 	 smulbb r3,r2,r3
 1653 0198 9BB2     	 uxth r3,r3
 1654 019a 0133     	 adds r3,r3,#1
 1655 019c 9AB2     	 uxth r2,r3
 1656 019e FB6A     	 ldr r3,[r7,#44]
 1657 01a0 A3F81520 	 strh r2,[r3,#21]
 303:../cleanflight/src/main/scheduler/scheduler.c ****                 waitingTasks++;
 1658              	 .loc 1 303 0
 1659 01a4 3B8E     	 ldrh r3,[r7,#48]
 1660 01a6 0133     	 adds r3,r3,#1
 1661 01a8 3B86     	 strh r3,[r7,#48]
 1662              	.L92:
 304:../cleanflight/src/main/scheduler/scheduler.c ****             }
 305:../cleanflight/src/main/scheduler/scheduler.c ****         }
 306:../cleanflight/src/main/scheduler/scheduler.c **** 
 307:../cleanflight/src/main/scheduler/scheduler.c ****         if (task->dynamicPriority > selectedTaskDynamicPriority) {
 1663              	 .loc 1 307 0
 1664 01aa FB6A     	 ldr r3,[r7,#44]
 1665 01ac B3F81530 	 ldrh r3,[r3,#21]
 1666 01b0 9BB2     	 uxth r3,r3
 1667 01b2 7A8E     	 ldrh r2,[r7,#50]
 1668 01b4 9A42     	 cmp r2,r3
 1669 01b6 20D2     	 bcs .L93
 1670              	.LBB16:
 308:../cleanflight/src/main/scheduler/scheduler.c ****             const bool taskCanBeChosenForScheduling =
 309:../cleanflight/src/main/scheduler/scheduler.c ****                 (outsideRealtimeGuardInterval) ||
 310:../cleanflight/src/main/scheduler/scheduler.c ****                 (task->taskAgeCycles > 1) ||
 1671              	 .loc 1 310 0
 1672 01b8 97F83F30 	 ldrb r3,[r7,#63]
 1673 01bc 002B     	 cmp r3,#0
 1674 01be 09D1     	 bne .L94
 1675              	 .loc 1 310 0 is_stmt 0 discriminator 2
 1676 01c0 FB6A     	 ldr r3,[r7,#44]
 1677 01c2 B3F81730 	 ldrh r3,[r3,#23]
 1678 01c6 9BB2     	 uxth r3,r3
 309:../cleanflight/src/main/scheduler/scheduler.c ****                 (task->taskAgeCycles > 1) ||
 1679              	 .loc 1 309 0 is_stmt 1 discriminator 2
 1680 01c8 012B     	 cmp r3,#1
 1681 01ca 03D8     	 bhi .L94
 311:../cleanflight/src/main/scheduler/scheduler.c ****                 (task->staticPriority == TASK_PRIORITY_REALTIME);
 1682              	 .loc 1 311 0 discriminator 3
 1683 01cc FB6A     	 ldr r3,[r7,#44]
 1684 01ce 1B7D     	 ldrb r3,[r3,#20]
 310:../cleanflight/src/main/scheduler/scheduler.c ****                 (task->staticPriority == TASK_PRIORITY_REALTIME);
 1685              	 .loc 1 310 0 discriminator 3
 1686 01d0 062B     	 cmp r3,#6
 1687 01d2 01D1     	 bne .L95
 1688              	.L94:
 310:../cleanflight/src/main/scheduler/scheduler.c ****                 (task->staticPriority == TASK_PRIORITY_REALTIME);
 1689              	 .loc 1 310 0 is_stmt 0 discriminator 1
 1690 01d4 0123     	 movs r3,#1
 1691 01d6 00E0     	 b .L96
 1692              	.L95:
 310:../cleanflight/src/main/scheduler/scheduler.c ****                 (task->staticPriority == TASK_PRIORITY_REALTIME);
 1693              	 .loc 1 310 0 discriminator 4
 1694 01d8 0023     	 movs r3,#0
 1695              	.L96:
 308:../cleanflight/src/main/scheduler/scheduler.c ****                 (outsideRealtimeGuardInterval) ||
 1696              	 .loc 1 308 0 is_stmt 1
 1697 01da FB74     	 strb r3,[r7,#19]
 1698 01dc FB7C     	 ldrb r3,[r7,#19]
 1699 01de 03F00103 	 and r3,r3,#1
 1700 01e2 FB74     	 strb r3,[r7,#19]
 312:../cleanflight/src/main/scheduler/scheduler.c ****             if (taskCanBeChosenForScheduling) {
 1701              	 .loc 1 312 0
 1702 01e4 FB7C     	 ldrb r3,[r7,#19]
 1703 01e6 002B     	 cmp r3,#0
 1704 01e8 07D0     	 beq .L93
 313:../cleanflight/src/main/scheduler/scheduler.c ****                 selectedTaskDynamicPriority = task->dynamicPriority;
 1705              	 .loc 1 313 0
 1706 01ea FB6A     	 ldr r3,[r7,#44]
 1707 01ec 5A7D     	 ldrb r2,[r3,#21]
 1708 01ee 9B7D     	 ldrb r3,[r3,#22]
 1709 01f0 1B02     	 lsls r3,r3,#8
 1710 01f2 1343     	 orrs r3,r3,r2
 1711 01f4 7B86     	 strh r3,[r7,#50]
 314:../cleanflight/src/main/scheduler/scheduler.c ****                 selectedTask = task;
 1712              	 .loc 1 314 0
 1713 01f6 FB6A     	 ldr r3,[r7,#44]
 1714 01f8 7B63     	 str r3,[r7,#52]
 1715              	.L93:
 1716              	.LBE16:
 265:../cleanflight/src/main/scheduler/scheduler.c ****         // Task has checkFunc - event driven
 1717              	 .loc 1 265 0 discriminator 2
 1718 01fa FFF7FEFF 	 bl queueNext
 1719 01fe F862     	 str r0,[r7,#44]
 1720              	.L86:
 265:../cleanflight/src/main/scheduler/scheduler.c ****         // Task has checkFunc - event driven
 1721              	 .loc 1 265 0 is_stmt 0 discriminator 1
 1722 0200 FB6A     	 ldr r3,[r7,#44]
 1723 0202 002B     	 cmp r3,#0
 1724 0204 7FF42DAF 	 bne .L97
 1725              	.LBE12:
 315:../cleanflight/src/main/scheduler/scheduler.c ****             }
 316:../cleanflight/src/main/scheduler/scheduler.c ****         }
 317:../cleanflight/src/main/scheduler/scheduler.c ****     }
 318:../cleanflight/src/main/scheduler/scheduler.c **** 
 319:../cleanflight/src/main/scheduler/scheduler.c ****     totalWaitingTasksSamples++;
 1726              	 .loc 1 319 0 is_stmt 1
 1727 0208 334B     	 ldr r3,.L100+16
 1728 020a 1B68     	 ldr r3,[r3]
 1729 020c 0133     	 adds r3,r3,#1
 1730 020e 324A     	 ldr r2,.L100+16
 1731 0210 1360     	 str r3,[r2]
 320:../cleanflight/src/main/scheduler/scheduler.c ****     totalWaitingTasks += waitingTasks;
 1732              	 .loc 1 320 0
 1733 0212 3A8E     	 ldrh r2,[r7,#48]
 1734 0214 314B     	 ldr r3,.L100+20
 1735 0216 1B68     	 ldr r3,[r3]
 1736 0218 1344     	 add r3,r3,r2
 1737 021a 304A     	 ldr r2,.L100+20
 1738 021c 1360     	 str r3,[r2]
 321:../cleanflight/src/main/scheduler/scheduler.c **** 
 322:../cleanflight/src/main/scheduler/scheduler.c ****     currentTask = selectedTask;
 1739              	 .loc 1 322 0
 1740 021e 304A     	 ldr r2,.L100+24
 1741 0220 7B6B     	 ldr r3,[r7,#52]
 1742 0222 1360     	 str r3,[r2]
 323:../cleanflight/src/main/scheduler/scheduler.c **** 
 324:../cleanflight/src/main/scheduler/scheduler.c ****     if (selectedTask) {
 1743              	 .loc 1 324 0
 1744 0224 7B6B     	 ldr r3,[r7,#52]
 1745 0226 002B     	 cmp r3,#0
 1746 0228 4AD0     	 beq .L81
 325:../cleanflight/src/main/scheduler/scheduler.c ****         // Found a task that should be run
 326:../cleanflight/src/main/scheduler/scheduler.c ****         selectedTask->taskLatestDeltaTime = currentTimeUs - selectedTask->lastExecutedAt;
 1747              	 .loc 1 326 0
 1748 022a 7B6B     	 ldr r3,[r7,#52]
 1749 022c D3F81D30 	 ldr r3,[r3,#29]
 1750 0230 BA6A     	 ldr r2,[r7,#40]
 1751 0232 D31A     	 subs r3,r2,r3
 1752 0234 1A46     	 mov r2,r3
 1753 0236 7B6B     	 ldr r3,[r7,#52]
 1754 0238 C3F81920 	 str r2,[r3,#25]
 327:../cleanflight/src/main/scheduler/scheduler.c ****         selectedTask->lastExecutedAt = currentTimeUs;
 1755              	 .loc 1 327 0
 1756 023c 7B6B     	 ldr r3,[r7,#52]
 1757 023e BA6A     	 ldr r2,[r7,#40]
 1758 0240 C3F81D20 	 str r2,[r3,#29]
 328:../cleanflight/src/main/scheduler/scheduler.c ****         selectedTask->dynamicPriority = 0;
 1759              	 .loc 1 328 0
 1760 0244 7B6B     	 ldr r3,[r7,#52]
 1761 0246 0022     	 movs r2,#0
 1762 0248 5A75     	 strb r2,[r3,#21]
 1763 024a 0022     	 movs r2,#0
 1764 024c 9A75     	 strb r2,[r3,#22]
 329:../cleanflight/src/main/scheduler/scheduler.c **** 
 330:../cleanflight/src/main/scheduler/scheduler.c ****         // Execute task
 331:../cleanflight/src/main/scheduler/scheduler.c **** #ifdef SKIP_TASK_STATISTICS
 332:../cleanflight/src/main/scheduler/scheduler.c ****         selectedTask->taskFunc(currentTimeUs);
 333:../cleanflight/src/main/scheduler/scheduler.c **** #else
 334:../cleanflight/src/main/scheduler/scheduler.c ****         if (calculateTaskStatistics) {
 1765              	 .loc 1 334 0
 1766 024e 1E4B     	 ldr r3,.L100
 1767 0250 1B78     	 ldrb r3,[r3]
 1768 0252 002B     	 cmp r3,#0
 1769 0254 30D0     	 beq .L99
 1770              	.LBB17:
 335:../cleanflight/src/main/scheduler/scheduler.c ****             const timeUs_t currentTimeBeforeTaskCall = micros();
 1771              	 .loc 1 335 0
 1772 0256 FFF7FEFF 	 bl micros
 1773 025a F860     	 str r0,[r7,#12]
 336:../cleanflight/src/main/scheduler/scheduler.c ****             selectedTask->taskFunc(currentTimeBeforeTaskCall);
 1774              	 .loc 1 336 0
 1775 025c 7B6B     	 ldr r3,[r7,#52]
 1776 025e DB68     	 ldr r3,[r3,#12]
 1777 0260 F868     	 ldr r0,[r7,#12]
 1778 0262 9847     	 blx r3
 337:../cleanflight/src/main/scheduler/scheduler.c ****             const timeUs_t taskExecutionTime = micros() - currentTimeBeforeTaskCall;
 1779              	 .loc 1 337 0
 1780 0264 FFF7FEFF 	 bl micros
 1781 0268 0246     	 mov r2,r0
 1782 026a FB68     	 ldr r3,[r7,#12]
 1783 026c D31A     	 subs r3,r2,r3
 1784 026e BB60     	 str r3,[r7,#8]
 338:../cleanflight/src/main/scheduler/scheduler.c ****             selectedTask->movingSumExecutionTime += taskExecutionTime - selectedTask->movingSumExec
 1785              	 .loc 1 338 0
 1786 0270 7B6B     	 ldr r3,[r7,#52]
 1787 0272 D3F82520 	 ldr r2,[r3,#37]
 1788 0276 7B6B     	 ldr r3,[r7,#52]
 1789 0278 D3F82530 	 ldr r3,[r3,#37]
 1790 027c 5B09     	 lsrs r3,r3,#5
 1791 027e B968     	 ldr r1,[r7,#8]
 1792 0280 CB1A     	 subs r3,r1,r3
 1793 0282 1A44     	 add r2,r2,r3
 1794 0284 7B6B     	 ldr r3,[r7,#52]
 1795 0286 C3F82520 	 str r2,[r3,#37]
 339:../cleanflight/src/main/scheduler/scheduler.c ****             selectedTask->totalExecutionTime += taskExecutionTime;   // time consumed by scheduler 
 1796              	 .loc 1 339 0
 1797 028a 7B6B     	 ldr r3,[r7,#52]
 1798 028c D3F82D20 	 ldr r2,[r3,#45]
 1799 0290 BB68     	 ldr r3,[r7,#8]
 1800 0292 1A44     	 add r2,r2,r3
 1801 0294 7B6B     	 ldr r3,[r7,#52]
 1802 0296 C3F82D20 	 str r2,[r3,#45]
 1803              	.LBB18:
 340:../cleanflight/src/main/scheduler/scheduler.c ****             selectedTask->maxExecutionTime = MAX(selectedTask->maxExecutionTime, taskExecutionTime)
 1804              	 .loc 1 340 0
 1805 029a 7B6B     	 ldr r3,[r7,#52]
 1806 029c D3F82930 	 ldr r3,[r3,#41]
 1807 02a0 7B60     	 str r3,[r7,#4]
 1808 02a2 BB68     	 ldr r3,[r7,#8]
 1809 02a4 3B60     	 str r3,[r7]
 1810 02a6 3A68     	 ldr r2,[r7]
 1811 02a8 7B68     	 ldr r3,[r7,#4]
 1812 02aa 9A42     	 cmp r2,r3
 1813 02ac 38BF     	 it cc
 1814 02ae 1A46     	 movcc r2,r3
 1815              	.LBE18:
 1816 02b0 7B6B     	 ldr r3,[r7,#52]
 1817 02b2 C3F82920 	 str r2,[r3,#41]
 1818              	.LBE17:
 1819 02b6 03E0     	 b .L81
 1820              	.L99:
 341:../cleanflight/src/main/scheduler/scheduler.c ****         } else {
 342:../cleanflight/src/main/scheduler/scheduler.c ****             selectedTask->taskFunc(currentTimeUs);
 1821              	 .loc 1 342 0
 1822 02b8 7B6B     	 ldr r3,[r7,#52]
 1823 02ba DB68     	 ldr r3,[r3,#12]
 1824 02bc B86A     	 ldr r0,[r7,#40]
 1825 02be 9847     	 blx r3
 1826              	.L81:
 343:../cleanflight/src/main/scheduler/scheduler.c ****         }
 344:../cleanflight/src/main/scheduler/scheduler.c **** 
 345:../cleanflight/src/main/scheduler/scheduler.c **** #endif
 346:../cleanflight/src/main/scheduler/scheduler.c **** #if defined(SCHEDULER_DEBUG)
 347:../cleanflight/src/main/scheduler/scheduler.c ****         DEBUG_SET(DEBUG_SCHEDULER, 2, micros() - currentTimeUs - taskExecutionTime); // time spent 
 348:../cleanflight/src/main/scheduler/scheduler.c ****     } else {
 349:../cleanflight/src/main/scheduler/scheduler.c ****         DEBUG_SET(DEBUG_SCHEDULER, 2, micros() - currentTimeUs);
 350:../cleanflight/src/main/scheduler/scheduler.c **** #endif
 351:../cleanflight/src/main/scheduler/scheduler.c ****     }
 352:../cleanflight/src/main/scheduler/scheduler.c **** 
 353:../cleanflight/src/main/scheduler/scheduler.c ****     GET_SCHEDULER_LOCALS();
 354:../cleanflight/src/main/scheduler/scheduler.c **** }
 1827              	 .loc 1 354 0
 1828 02c0 4037     	 adds r7,r7,#64
 1829              	.LCFI83:
 1830              	 .cfi_def_cfa_offset 8
 1831 02c2 BD46     	 mov sp,r7
 1832              	.LCFI84:
 1833              	 .cfi_def_cfa_register 13
 1834              	 
 1835 02c4 80BD     	 pop {r7,pc}
 1836              	.L101:
 1837 02c6 00BF     	 .align 2
 1838              	.L100:
 1839 02c8 00000000 	 .word calculateTaskStatistics
 1840 02cc 00000000 	 .word checkFuncMovingSumExecutionTime
 1841 02d0 00000000 	 .word checkFuncTotalExecutionTime
 1842 02d4 00000000 	 .word checkFuncMaxExecutionTime
 1843 02d8 00000000 	 .word totalWaitingTasksSamples
 1844 02dc 00000000 	 .word totalWaitingTasks
 1845 02e0 00000000 	 .word currentTask
 1846              	 .cfi_endproc
 1847              	.LFE545:
 1849              	 .text
 1850              	.Letext0:
 1851              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1852              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1853              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 1854              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 1855              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 1856              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/scheduler/scheduler.h"
 1857              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 1858              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 scheduler.c
    {standard input}:20     .bss.currentTask:00000000 $d
    {standard input}:23     .bss.currentTask:00000000 currentTask
    {standard input}:26     .bss.totalWaitingTasks:00000000 $d
    {standard input}:29     .bss.totalWaitingTasks:00000000 totalWaitingTasks
    {standard input}:32     .bss.totalWaitingTasksSamples:00000000 $d
    {standard input}:35     .bss.totalWaitingTasksSamples:00000000 totalWaitingTasksSamples
    {standard input}:40     .bss.calculateTaskStatistics:00000000 calculateTaskStatistics
    {standard input}:41     .bss.calculateTaskStatistics:00000000 $d
    {standard input}:47     .bss.averageSystemLoadPercent:00000000 averageSystemLoadPercent
    {standard input}:44     .bss.averageSystemLoadPercent:00000000 $d
    {standard input}:50     .bss.taskQueuePos:00000000 $d
    {standard input}:53     .bss.taskQueuePos:00000000 taskQueuePos
    {standard input}:56     .bss.taskQueueSize:00000000 $d
    {standard input}:59     .bss.taskQueueSize:00000000 taskQueueSize
    {standard input}:62     .bss.taskQueueArray:00000000 $d
    {standard input}:65     .bss.taskQueueArray:00000000 taskQueueArray
    {standard input}:68     .text.queueClear:00000000 $t
    {standard input}:73     .text.queueClear:00000000 queueClear
    {standard input}:106    .text.queueClear:0000001c $d
    {standard input}:113    .text.queueContains:00000000 $t
    {standard input}:118    .text.queueContains:00000000 queueContains
    {standard input}:185    .text.queueContains:00000040 $d
    {standard input}:191    .text.queueAdd:00000000 $t
    {standard input}:196    .text.queueAdd:00000000 queueAdd
    {standard input}:312    .text.queueAdd:00000098 $d
    {standard input}:318    .text.queueRemove:00000000 $t
    {standard input}:323    .text.queueRemove:00000000 queueRemove
    {standard input}:409    .text.queueRemove:00000068 $d
    {standard input}:415    .text.queueFirst:00000000 $t
    {standard input}:420    .text.queueFirst:00000000 queueFirst
    {standard input}:455    .text.queueFirst:00000018 $d
    {standard input}:461    .text.queueNext:00000000 $t
    {standard input}:466    .text.queueNext:00000000 queueNext
    {standard input}:504    .text.queueNext:00000024 $d
    {standard input}:510    .text.taskSystemLoad:00000000 $t
    {standard input}:515    .text.taskSystemLoad:00000000 taskSystemLoad
    {standard input}:574    .text.taskSystemLoad:00000040 $d
                            *COM*:00000004 checkFuncMaxExecutionTime
                            *COM*:00000004 checkFuncTotalExecutionTime
                            *COM*:00000004 checkFuncMovingSumExecutionTime
    {standard input}:584    .text.getCheckFuncInfo:00000000 $t
    {standard input}:589    .text.getCheckFuncInfo:00000000 getCheckFuncInfo
    {standard input}:639    .text.getCheckFuncInfo:0000002c $d
    {standard input}:646    .text.getTaskInfo:00000000 $t
    {standard input}:651    .text.getTaskInfo:00000000 getTaskInfo
    {standard input}:801    .text.getTaskInfo:00000100 $d
    {standard input}:806    .text.rescheduleTask:00000000 $t
    {standard input}:811    .text.rescheduleTask:00000000 rescheduleTask
    {standard input}:904    .text.rescheduleTask:00000068 $d
    {standard input}:910    .text.setTaskEnabled:00000000 $t
    {standard input}:915    .text.setTaskEnabled:00000000 setTaskEnabled
    {standard input}:999    .text.setTaskEnabled:0000005c $d
    {standard input}:1005   .text.getTaskDeltaTime:00000000 $t
    {standard input}:1010   .text.getTaskDeltaTime:00000000 getTaskDeltaTime
    {standard input}:1076   .text.getTaskDeltaTime:00000048 $d
    {standard input}:1082   .text.schedulerSetCalulateTaskStatistics:00000000 $t
    {standard input}:1087   .text.schedulerSetCalulateTaskStatistics:00000000 schedulerSetCalulateTaskStatistics
    {standard input}:1126   .text.schedulerSetCalulateTaskStatistics:0000001c $d
    {standard input}:1131   .text.schedulerResetTaskStatistics:00000000 $t
    {standard input}:1136   .text.schedulerResetTaskStatistics:00000000 schedulerResetTaskStatistics
    {standard input}:1269   .text.schedulerResetTaskStatistics:000000dc $d
    {standard input}:1275   .text.schedulerResetTaskMaxExecutionTime:00000000 $t
    {standard input}:1280   .text.schedulerResetTaskMaxExecutionTime:00000000 schedulerResetTaskMaxExecutionTime
    {standard input}:1355   .text.schedulerResetTaskMaxExecutionTime:00000060 $d
    {standard input}:1361   .text.schedulerInit:00000000 $t
    {standard input}:1366   .text.schedulerInit:00000000 schedulerInit
    {standard input}:1394   .text.schedulerInit:00000018 $d
    {standard input}:1400   .text.scheduler:00000000 $t
    {standard input}:1405   .text.scheduler:00000000 scheduler
    {standard input}:1839   .text.scheduler:000002c8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
memmove
cfTasks
micros
