   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "adcinternal.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.getVrefMv,"ax",%progbits
  20              	 .align 2
  21              	 .global getVrefMv
  22              	 .thumb
  23              	 .thumb_func
  25              	getVrefMv:
  26              	.LFB521:
  27              	 .file 1 "../cleanflight/src/main/sensors/adcinternal.c"
   1:../cleanflight/src/main/sensors/adcinternal.c **** /*
   2:../cleanflight/src/main/sensors/adcinternal.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/sensors/adcinternal.c ****  *
   4:../cleanflight/src/main/sensors/adcinternal.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/sensors/adcinternal.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/sensors/adcinternal.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/sensors/adcinternal.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/sensors/adcinternal.c ****  * any later version.
   9:../cleanflight/src/main/sensors/adcinternal.c ****  *
  10:../cleanflight/src/main/sensors/adcinternal.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/sensors/adcinternal.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/sensors/adcinternal.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/sensors/adcinternal.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/sensors/adcinternal.c ****  *
  15:../cleanflight/src/main/sensors/adcinternal.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/sensors/adcinternal.c ****  * along with this software.
  17:../cleanflight/src/main/sensors/adcinternal.c ****  *
  18:../cleanflight/src/main/sensors/adcinternal.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/sensors/adcinternal.c ****  */
  20:../cleanflight/src/main/sensors/adcinternal.c **** 
  21:../cleanflight/src/main/sensors/adcinternal.c **** #include <stdbool.h>
  22:../cleanflight/src/main/sensors/adcinternal.c **** #include <stdint.h>
  23:../cleanflight/src/main/sensors/adcinternal.c **** 
  24:../cleanflight/src/main/sensors/adcinternal.c **** #include "platform.h"
  25:../cleanflight/src/main/sensors/adcinternal.c **** 
  26:../cleanflight/src/main/sensors/adcinternal.c **** #if defined(USE_ADC) && defined(USE_ADC_INTERNAL)
  27:../cleanflight/src/main/sensors/adcinternal.c **** 
  28:../cleanflight/src/main/sensors/adcinternal.c **** #include "build/debug.h"
  29:../cleanflight/src/main/sensors/adcinternal.c **** 
  30:../cleanflight/src/main/sensors/adcinternal.c **** #include "common/utils.h"
  31:../cleanflight/src/main/sensors/adcinternal.c **** 
  32:../cleanflight/src/main/sensors/adcinternal.c **** #include "drivers/adc.h"
  33:../cleanflight/src/main/sensors/adcinternal.c **** 
  34:../cleanflight/src/main/sensors/adcinternal.c **** typedef struct movingAverageStateUint16_s {
  35:../cleanflight/src/main/sensors/adcinternal.c ****     uint32_t sum;
  36:../cleanflight/src/main/sensors/adcinternal.c ****     uint16_t *values;
  37:../cleanflight/src/main/sensors/adcinternal.c ****     uint8_t size;
  38:../cleanflight/src/main/sensors/adcinternal.c ****     uint8_t pos;
  39:../cleanflight/src/main/sensors/adcinternal.c **** } movingAverageStateUint16_t;
  40:../cleanflight/src/main/sensors/adcinternal.c **** 
  41:../cleanflight/src/main/sensors/adcinternal.c **** uint16_t updateMovingAverageUint16(movingAverageStateUint16_t *state, uint16_t newValue)
  42:../cleanflight/src/main/sensors/adcinternal.c **** {
  43:../cleanflight/src/main/sensors/adcinternal.c ****     state->sum -= state->values[state->pos];
  44:../cleanflight/src/main/sensors/adcinternal.c ****     state->values[state->pos] = newValue;
  45:../cleanflight/src/main/sensors/adcinternal.c ****     state->sum += newValue;
  46:../cleanflight/src/main/sensors/adcinternal.c ****     state->pos = (state->pos + 1) % state->size;
  47:../cleanflight/src/main/sensors/adcinternal.c **** 
  48:../cleanflight/src/main/sensors/adcinternal.c ****     return state->sum / state->size;
  49:../cleanflight/src/main/sensors/adcinternal.c **** }
  50:../cleanflight/src/main/sensors/adcinternal.c **** 
  51:../cleanflight/src/main/sensors/adcinternal.c **** static uint16_t adcVrefintValue;
  52:../cleanflight/src/main/sensors/adcinternal.c **** static uint16_t adcVrefintValues[8];
  53:../cleanflight/src/main/sensors/adcinternal.c **** movingAverageStateUint16_t adcVrefintAverageState = { 0, adcVrefintValues, 8, 0 } ;
  54:../cleanflight/src/main/sensors/adcinternal.c **** 
  55:../cleanflight/src/main/sensors/adcinternal.c **** static uint16_t adcTempsensorValue;
  56:../cleanflight/src/main/sensors/adcinternal.c **** static uint16_t adcTempsensorValues[8];
  57:../cleanflight/src/main/sensors/adcinternal.c **** movingAverageStateUint16_t adcTempsensorAverageState = { 0, adcTempsensorValues, 8, 0 } ;
  58:../cleanflight/src/main/sensors/adcinternal.c **** 
  59:../cleanflight/src/main/sensors/adcinternal.c **** static int16_t coreTemperature;
  60:../cleanflight/src/main/sensors/adcinternal.c **** 
  61:../cleanflight/src/main/sensors/adcinternal.c **** uint16_t getVrefMv(void)
  62:../cleanflight/src/main/sensors/adcinternal.c **** {
  63:../cleanflight/src/main/sensors/adcinternal.c **** #ifdef ADC_VOLTAGE_REFERENCE_MV
  64:../cleanflight/src/main/sensors/adcinternal.c ****     return ADC_VOLTAGE_REFERENCE_MV;
  65:../cleanflight/src/main/sensors/adcinternal.c **** #else
  66:../cleanflight/src/main/sensors/adcinternal.c ****     return 3300 * adcVrefintValue / adcVREFINTCAL;
  67:../cleanflight/src/main/sensors/adcinternal.c **** #endif
  68:../cleanflight/src/main/sensors/adcinternal.c **** }
  69:../cleanflight/src/main/sensors/adcinternal.c **** 
  70:../cleanflight/src/main/sensors/adcinternal.c **** int16_t getCoreTemperatureCelsius(void)
  71:../cleanflight/src/main/sensors/adcinternal.c **** {
  72:../cleanflight/src/main/sensors/adcinternal.c ****     return coreTemperature;
  73:../cleanflight/src/main/sensors/adcinternal.c **** }
  74:../cleanflight/src/main/sensors/adcinternal.c **** 
  75:../cleanflight/src/main/sensors/adcinternal.c **** void adcInternalProcess(timeUs_t currentTimeUs)
  76:../cleanflight/src/main/sensors/adcinternal.c **** {
  77:../cleanflight/src/main/sensors/adcinternal.c ****     UNUSED(currentTimeUs);
  78:../cleanflight/src/main/sensors/adcinternal.c **** 
  79:../cleanflight/src/main/sensors/adcinternal.c ****     if (adcInternalIsBusy()) {
  80:../cleanflight/src/main/sensors/adcinternal.c ****         return;
  81:../cleanflight/src/main/sensors/adcinternal.c ****     }
  82:../cleanflight/src/main/sensors/adcinternal.c **** 
  83:../cleanflight/src/main/sensors/adcinternal.c ****     uint16_t vrefintSample = adcInternalReadVrefint();
  84:../cleanflight/src/main/sensors/adcinternal.c ****     uint16_t tempsensorSample = adcInternalReadTempsensor();
  85:../cleanflight/src/main/sensors/adcinternal.c **** 
  86:../cleanflight/src/main/sensors/adcinternal.c ****     adcVrefintValue = updateMovingAverageUint16(&adcVrefintAverageState, vrefintSample);
  87:../cleanflight/src/main/sensors/adcinternal.c ****     adcTempsensorValue = updateMovingAverageUint16(&adcTempsensorAverageState, tempsensorSample);
  88:../cleanflight/src/main/sensors/adcinternal.c **** 
  89:../cleanflight/src/main/sensors/adcinternal.c ****     int32_t adcTempsensorAdjusted = (int32_t)adcTempsensorValue * 3300 / getVrefMv();
  90:../cleanflight/src/main/sensors/adcinternal.c ****     coreTemperature = ((adcTempsensorAdjusted - adcTSCAL1) * adcTSSlopeK + 30 * 1000 + 500) / 1000;
  91:../cleanflight/src/main/sensors/adcinternal.c **** 
  92:../cleanflight/src/main/sensors/adcinternal.c ****     DEBUG_SET(DEBUG_CORE_TEMP, 0, coreTemperature);
  93:../cleanflight/src/main/sensors/adcinternal.c **** 
  94:../cleanflight/src/main/sensors/adcinternal.c ****     adcInternalStartConversion(); // Start next conversion
  95:../cleanflight/src/main/sensors/adcinternal.c **** }
  96:../cleanflight/src/main/sensors/adcinternal.c **** 
  97:../cleanflight/src/main/sensors/adcinternal.c **** void adcInternalInit(void)
  98:../cleanflight/src/main/sensors/adcinternal.c **** {
  99:../cleanflight/src/main/sensors/adcinternal.c ****     // Call adcInternalProcess repeatedly to fill moving average array
 100:../cleanflight/src/main/sensors/adcinternal.c ****     for (int i = 0 ; i < 9 ; i++) {
 101:../cleanflight/src/main/sensors/adcinternal.c ****         while (adcInternalIsBusy()) {
 102:../cleanflight/src/main/sensors/adcinternal.c ****             // empty
 103:../cleanflight/src/main/sensors/adcinternal.c ****         }
 104:../cleanflight/src/main/sensors/adcinternal.c ****         adcInternalProcess(0);
 105:../cleanflight/src/main/sensors/adcinternal.c ****     }
 106:../cleanflight/src/main/sensors/adcinternal.c **** }
 107:../cleanflight/src/main/sensors/adcinternal.c **** #else
 108:../cleanflight/src/main/sensors/adcinternal.c **** uint16_t getVrefMv(void)
 109:../cleanflight/src/main/sensors/adcinternal.c **** {
  28              	 .loc 1 109 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  33 0000 80B4     	 push {r7}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 4
  36              	 .cfi_offset 7,-4
  37 0002 00AF     	 add r7,sp,#0
  38              	.LCFI1:
  39              	 .cfi_def_cfa_register 7
 110:../cleanflight/src/main/sensors/adcinternal.c **** #ifdef ADC_VOLTAGE_REFERENCE_MV
 111:../cleanflight/src/main/sensors/adcinternal.c ****     return ADC_VOLTAGE_REFERENCE_MV;
 112:../cleanflight/src/main/sensors/adcinternal.c **** #else
 113:../cleanflight/src/main/sensors/adcinternal.c ****     return 3300;
  40              	 .loc 1 113 0
  41 0004 40F6E443 	 movw r3,#3300
 114:../cleanflight/src/main/sensors/adcinternal.c **** #endif
 115:../cleanflight/src/main/sensors/adcinternal.c **** }
  42              	 .loc 1 115 0
  43 0008 1846     	 mov r0,r3
  44 000a BD46     	 mov sp,r7
  45              	.LCFI2:
  46              	 .cfi_def_cfa_register 13
  47              	 
  48 000c 5DF8047B 	 ldr r7,[sp],#4
  49              	.LCFI3:
  50              	 .cfi_restore 7
  51              	 .cfi_def_cfa_offset 0
  52 0010 7047     	 bx lr
  53              	 .cfi_endproc
  54              	.LFE521:
  56 0012 00BF     	 .text
  57              	.Letext0:
  58              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
  59              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
  60              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
  61              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 adcinternal.c
    {standard input}:20     .text.getVrefMv:00000000 $t
    {standard input}:25     .text.getVrefMv:00000000 getVrefMv
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
