   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "battery.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.cmp32,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	cmp32:
  25              	.LFB520:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/utils.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #include <stddef.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #include <stdint.h>
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define NOOP do {} while (0)
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define ARRAYLEN(x) (sizeof(x) / sizeof((x)[0]))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define ARRAYEND(x) (&(x)[ARRAYLEN(x)])
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONST_CAST(type, value) ((type)(value))
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT_HELPER(x,y) x ## y
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT(x,y) CONCAT_HELPER(x, y)
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT2(_1,_2) CONCAT(_1, _2)
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT3(_1,_2,_3)  CONCAT(CONCAT(_1, _2), _3)
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define CONCAT4(_1,_2,_3,_4)  CONCAT(CONCAT3(_1, _2, _3), _4)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STR_HELPER(x) #x
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STR(x) STR_HELPER(x)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define EXPAND_I(x) x
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define EXPAND(x) EXPAND_I(x)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // expand to t if bit is 1, f when bit is 0. Other bit values are not supported
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF(bit, t, f) PP_IIF_I(bit, t, f)
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_I(bit, t, f) PP_IIF_ ## bit(t, f)
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_0(t, f) f
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_IIF_1(t, f) t
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // Expand all argumens and call macro with them. When expansion of some argument contains ',', it w
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // #define TAKE3(_1,_2,_3) CONCAT3(_1,_2,_3)
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // #define MULTI2 A,B
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // PP_CALL(TAKE3, MULTI2, C) expands to ABC
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define PP_CALL(macro, ...) macro(__VA_ARGS__)
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #if !defined(UNUSED)
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define UNUSED(x) (void)(x)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #endif
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BUILD_BUG_ON(condition) ((void)sizeof(char[1 - 2*!!(condition)]))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define STATIC_ASSERT(condition, name) \
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****     typedef char assert_failed_ ## name [(condition) ? 1 : -1 ] __attribute__((unused))
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BIT(x) (1 << (x))
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** http://resnet.uoregon.edu/~gurney_j/jmpc/bitwise.html
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** */
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BITCOUNT(x) (((BX_(x)+(BX_(x)>>4)) & 0x0F0F0F0F) % 255)
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define BX_(x) ((x) - (((x)>>1)&0x77777777) - (((x)>>2)&0x33333333) - (((x)>>3)&0x11111111))
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** /*
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * https://groups.google.com/forum/?hl=en#!msg/comp.lang.c/attFnqwhvGk/sGBKXvIkY3AJ
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Return (v ? floor(log2(v)) : 0) when 0 <= v < 1<<[8, 16, 32, 64].
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  * Inefficient algorithm, intended for compile-time constants.
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****  */
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_8BIT(v)  (8 - 90/(((v)/4+14)|1) - 2/((v)/2+1))
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_16BIT(v) (8*((v)>255) + LOG2_8BIT((v) >>8*((v)>255)))
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_32BIT(v) (16*((v)>65535L) + LOG2_16BIT((v)*1L >>16*((v)>65535L)))
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2_64BIT(v) \
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****     (32*((v)/2L>>31 > 0) \
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****      + LOG2_32BIT((v)*1L >>16*((v)/2L>>31 > 0) \
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****                          >>16*((v)/2L>>31 > 0)))
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define LOG2(v) LOG2_64BIT(v)
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #if 0
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // ISO C version, but no type checking
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define container_of(ptr, type, member) \
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****                       ((type *) ((char *)(ptr) - offsetof(type, member)))
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #else
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** // non ISO variant from linux kernel; checks ptr type, but triggers 'ISO C forbids braced-groups wi
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** //  __extension__ is here to disable this warning
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** #define container_of(ptr, type, member)  ( __extension__ ({     \
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****         const typeof( ((type *)0)->member ) *__mptr = (ptr);    \
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h ****         (type *)( (char *)__mptr - offsetof(type,member) );}))
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** 
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** static inline int16_t cmp16(uint16_t a, uint16_t b) { return (int16_t)(a-b); }
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\utils.h **** static inline int32_t cmp32(uint32_t a, uint32_t b) { return (int32_t)(a-b); }
  27              	 .loc 1 100 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
  44              	 .loc 1 100 0
  45 000a 7A68     	 ldr r2,[r7,#4]
  46 000c 3B68     	 ldr r3,[r7]
  47 000e D31A     	 subs r3,r2,r3
  48 0010 1846     	 mov r0,r3
  49 0012 0C37     	 adds r7,r7,#12
  50              	.LCFI3:
  51              	 .cfi_def_cfa_offset 4
  52 0014 BD46     	 mov sp,r7
  53              	.LCFI4:
  54              	 .cfi_def_cfa_register 13
  55              	 
  56 0016 5DF8047B 	 ldr r7,[sp],#4
  57              	.LCFI5:
  58              	 .cfi_restore 7
  59              	 .cfi_def_cfa_offset 0
  60 001a 7047     	 bx lr
  61              	 .cfi_endproc
  62              	.LFE520:
  64              	 .section .text.constrain,"ax",%progbits
  65              	 .align 2
  66              	 .thumb
  67              	 .thumb_func
  69              	constrain:
  70              	.LFB521:
  71              	 .file 2 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/maths.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #include <stdint.h>
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #ifndef sq
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sq(x) ((x)*(x))
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define power3(x) ((x)*(x)*(x))
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Undefine this for use libc sinf/cosf. Keep this defined to use fast sin/cos approximations
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define FAST_MATH             // order 9 approximation
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define VERY_FAST_MATH      // order 7 approximation
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Use floating point M_PI instead explicitly.
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define M_PIf       3.14159265358979323846f
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define RAD    (M_PIf / 180.0f)
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_DECIDEGREES(angle) ((angle) * 10)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_DEGREES(angle) ((angle) / 10)
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DECIDEGREES_TO_RADIANS(angle) ((angle) / 10.0f * 0.0174532925f)
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define DEGREES_TO_RADIANS(angle) ((angle) * 0.0174532925f)
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_KM_H(centimetersPerSecond) ((centimetersPerSecond) * 36 / 1000)
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define CM_S_TO_MPH(centimetersPerSecond) ((centimetersPerSecond) * 10000 / 5080 / 88)
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MIN(a,b) \
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a < _b ? _a : _b; })
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define MAX(a,b) \
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (a) _a = (a); \
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __typeof__ (b) _b = (b); \
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _a > _b ? _a : _b; })
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define ABS(x) \
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   __extension__ ({ __typeof__ (x) _x = (x); \
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****   _x > 0 ? _x : -_x; })
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define Q12 (1 << 12)
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define HZ_TO_INTERVAL_US(x) (1000000 / (x))
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef int32_t fix12_t;
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct stdev_s
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float m_oldM, m_newM, m_oldS, m_newS;
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     int m_n;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } stdev_t;
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point 3 vector.
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_vector {
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float X;
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Y;
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float Z;
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector_def;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union u_fp_vector {
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float A[3];
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     t_fp_vector_def V;
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } t_fp_vector;
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Floating point Euler angles.
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** // Be carefull, could be either of degrees or radians.
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef struct fp_angles {
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float roll;
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float pitch;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float yaw;
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_def;
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** typedef union {
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     float raw[3];
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     fp_angles_def angles;
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** } fp_angles_t;
  94:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
  95:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int gcd(int num, int denom);
  96:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float powerf(float base, int exp);
  97:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t applyDeadband(int32_t value, int32_t deadband);
  98:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float fapplyDeadband(float value, float deadband);
  99:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 100:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devClear(stdev_t *dev);
 101:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void devPush(stdev_t *dev, float x);
 102:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devVariance(stdev_t *dev);
 103:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float devStandardDeviation(stdev_t *dev);
 104:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float degreesToRadians(int16_t degrees);
 105:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 106:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int scaleRange(int x, int srcFrom, int srcTo, int destFrom, int destTo);
 107:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float scaleRangef(float x, float srcFrom, float srcTo, float destFrom, float destTo);
 108:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 109:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void normalizeV(struct fp_vector *src, struct fp_vector *dest);
 110:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 111:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void rotateV(struct fp_vector *v, fp_angles_t *delta);
 112:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void buildRotationMatrix(fp_angles_t *delta, float matrix[3][3]);
 113:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 114:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter3(int32_t * v);
 115:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter5(int32_t * v);
 116:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter7(int32_t * v);
 117:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int32_t quickMedianFilter9(int32_t * v);
 118:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 119:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter3f(float * v);
 120:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter5f(float * v);
 121:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter7f(float * v);
 122:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float quickMedianFilter9f(float * v);
 123:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 124:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #if defined(FAST_MATH) || defined(VERY_FAST_MATH)
 125:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float sin_approx(float x);
 126:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float cos_approx(float x);
 127:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float atan2_approx(float y, float x);
 128:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float acos_approx(float x);
 129:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       (sin_approx(x) / cos_approx(x))
 130:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float exp_approx(float val);
 131:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float log_approx(float val);
 132:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** float pow_approx(float a, float b);
 133:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #else
 134:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define sin_approx(x)   sinf(x)
 135:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define cos_approx(x)   cosf(x)
 136:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define atan2_approx(y,x)   atan2f(y,x)
 137:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define acos_approx(x)      acosf(x)
 138:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define tan_approx(x)       tanf(x)
 139:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define exp_approx(x)       expf(x)
 140:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define log_approx(x)       logf(x)
 141:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #define pow_approx(a, b)    powf(b, a)
 142:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** #endif
 143:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 144:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** void arraySubInt32(int32_t *dest, int32_t *array1, int32_t *array2, int count);
 145:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 146:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qPercent(fix12_t q);
 147:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** int16_t qMultiply(fix12_t q, int16_t input);
 148:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** fix12_t qConstruct(int16_t num, int16_t den);
 149:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 150:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline int constrain(int amt, int low, int high)
 151:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
  72              	 .loc 2 151 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 85B0     	 sub sp,sp,#20
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 24
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 F860     	 str r0,[r7,#12]
  88 0008 B960     	 str r1,[r7,#8]
  89 000a 7A60     	 str r2,[r7,#4]
 152:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
  90              	 .loc 2 152 0
  91 000c FA68     	 ldr r2,[r7,#12]
  92 000e BB68     	 ldr r3,[r7,#8]
  93 0010 9A42     	 cmp r2,r3
  94 0012 01DA     	 bge .L4
 153:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
  95              	 .loc 2 153 0
  96 0014 BB68     	 ldr r3,[r7,#8]
  97 0016 06E0     	 b .L5
  98              	.L4:
 154:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
  99              	 .loc 2 154 0
 100 0018 FA68     	 ldr r2,[r7,#12]
 101 001a 7B68     	 ldr r3,[r7,#4]
 102 001c 9A42     	 cmp r2,r3
 103 001e 01DD     	 ble .L6
 155:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 104              	 .loc 2 155 0
 105 0020 7B68     	 ldr r3,[r7,#4]
 106 0022 00E0     	 b .L5
 107              	.L6:
 156:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 157:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 108              	 .loc 2 157 0
 109 0024 FB68     	 ldr r3,[r7,#12]
 110              	.L5:
 158:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 111              	 .loc 2 158 0
 112 0026 1846     	 mov r0,r3
 113 0028 1437     	 adds r7,r7,#20
 114              	.LCFI9:
 115              	 .cfi_def_cfa_offset 4
 116 002a BD46     	 mov sp,r7
 117              	.LCFI10:
 118              	 .cfi_def_cfa_register 13
 119              	 
 120 002c 5DF8047B 	 ldr r7,[sp],#4
 121              	.LCFI11:
 122              	 .cfi_restore 7
 123              	 .cfi_def_cfa_offset 0
 124 0030 7047     	 bx lr
 125              	 .cfi_endproc
 126              	.LFE521:
 128 0032 00BF     	 .section .text.constrainf,"ax",%progbits
 129              	 .align 2
 130              	 .thumb
 131              	 .thumb_func
 133              	constrainf:
 134              	.LFB522:
 159:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** 
 160:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** static inline float constrainf(float amt, float low, float high)
 161:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** {
 135              	 .loc 2 161 0
 136              	 .cfi_startproc
 137              	 
 138              	 
 139              	 
 140 0000 80B4     	 push {r7}
 141              	.LCFI12:
 142              	 .cfi_def_cfa_offset 4
 143              	 .cfi_offset 7,-4
 144 0002 85B0     	 sub sp,sp,#20
 145              	.LCFI13:
 146              	 .cfi_def_cfa_offset 24
 147 0004 00AF     	 add r7,sp,#0
 148              	.LCFI14:
 149              	 .cfi_def_cfa_register 7
 150 0006 87ED030A 	 fsts s0,[r7,#12]
 151 000a C7ED020A 	 fsts s1,[r7,#8]
 152 000e 87ED011A 	 fsts s2,[r7,#4]
 162:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     if (amt < low)
 153              	 .loc 2 162 0
 154 0012 97ED037A 	 flds s14,[r7,#12]
 155 0016 D7ED027A 	 flds s15,[r7,#8]
 156 001a B4EEE77A 	 fcmpes s14,s15
 157 001e F1EE10FA 	 fmstat
 158 0022 01D5     	 bpl .L15
 163:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return low;
 159              	 .loc 2 163 0
 160 0024 BB68     	 ldr r3,[r7,#8]
 161 0026 0BE0     	 b .L10
 162              	.L15:
 164:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else if (amt > high)
 163              	 .loc 2 164 0
 164 0028 97ED037A 	 flds s14,[r7,#12]
 165 002c D7ED017A 	 flds s15,[r7,#4]
 166 0030 B4EEE77A 	 fcmpes s14,s15
 167 0034 F1EE10FA 	 fmstat
 168 0038 01DD     	 ble .L16
 165:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return high;
 169              	 .loc 2 165 0
 170 003a 7B68     	 ldr r3,[r7,#4]
 171 003c 00E0     	 b .L10
 172              	.L16:
 166:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****     else
 167:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h ****         return amt;
 173              	 .loc 2 167 0
 174 003e FB68     	 ldr r3,[r7,#12]
 175              	.L10:
 176 0040 07EE903A 	 fmsr s15,r3
 168:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common\maths.h **** }
 177              	 .loc 2 168 0
 178 0044 B0EE670A 	 fcpys s0,s15
 179 0048 1437     	 adds r7,r7,#20
 180              	.LCFI15:
 181              	 .cfi_def_cfa_offset 4
 182 004a BD46     	 mov sp,r7
 183              	.LCFI16:
 184              	 .cfi_def_cfa_register 13
 185              	 
 186 004c 5DF8047B 	 ldr r7,[sp],#4
 187              	.LCFI17:
 188              	 .cfi_restore 7
 189              	 .cfi_def_cfa_offset 0
 190 0050 7047     	 bx lr
 191              	 .cfi_endproc
 192              	.LFE522:
 194 0052 00BF     	 .section .text.batteryConfig,"ax",%progbits
 195              	 .align 2
 196              	 .thumb
 197              	 .thumb_func
 199              	batteryConfig:
 200              	.LFB548:
 201              	 .file 3 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/battery.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "pg/pg.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/filter.h"
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "common/time.h"
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/current.h"
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** #include "sensors/voltage.h"
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct batteryConfig_s {
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // voltage
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmaxcellvoltage;             // maximum voltage per cell, used for auto-detecting ba
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatmincellvoltage;             // minimum voltage per cell, this triggers battery crit
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatwarningcellvoltage;         // warning voltage per cell, this triggers battery warn
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatnotpresentcellvoltage;      // Between vbatmaxcellvoltage and 2*this is considered 
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t lvcPercentage;                  // Percentage of throttle when lvc is triggered
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     voltageMeterSource_e voltageMeterSource; // source of battery voltage meter used, either ADC or
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // current
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     currentMeterSource_e currentMeterSource; // source of battery current meter used, either ADC, V
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint16_t batteryCapacity;               // mAh
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     // warnings / alerts
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useVBatAlerts;                     // Issue alerts based on VBat readings
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool useConsumptionAlerts;              // Issue alerts based on total power consumption
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t consumptionWarningPercentage;   // Percentage of remaining capacity that should trigger
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbathysteresis;                 // hysteresis for alarm, default 1 = 0.1V
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t vbatfullcellvoltage;            // Cell voltage at which the battery is deemed to be "f
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } batteryConfig_t;
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** typedef struct lowVoltageCutoff_s {
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     bool enabled;
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     uint8_t percentage;
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h ****     timeUs_t startTime;
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** } lowVoltageCutoff_t;
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** 
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\battery.h **** PG_DECLARE(batteryConfig_t, batteryConfig);
 202              	 .loc 3 59 0
 203              	 .cfi_startproc
 204              	 
 205              	 
 206              	 
 207 0000 80B4     	 push {r7}
 208              	.LCFI18:
 209              	 .cfi_def_cfa_offset 4
 210              	 .cfi_offset 7,-4
 211 0002 00AF     	 add r7,sp,#0
 212              	.LCFI19:
 213              	 .cfi_def_cfa_register 7
 214              	 .loc 3 59 0
 215 0004 024B     	 ldr r3,.L19
 216 0006 1846     	 mov r0,r3
 217 0008 BD46     	 mov sp,r7
 218              	.LCFI20:
 219              	 .cfi_def_cfa_register 13
 220              	 
 221 000a 5DF8047B 	 ldr r7,[sp],#4
 222              	.LCFI21:
 223              	 .cfi_restore 7
 224              	 .cfi_def_cfa_offset 0
 225 000e 7047     	 bx lr
 226              	.L20:
 227              	 .align 2
 228              	.L19:
 229 0010 00000000 	 .word batteryConfig_System
 230              	 .cfi_endproc
 231              	.LFE548:
 233              	 .comm batteryCellCount,1,1
 234              	 .comm batteryWarningVoltage,2,2
 235              	 .comm batteryCriticalVoltage,2,2
 236              	 .section .bss.lowVoltageCutoff,"aw",%nobits
 237              	 .align 2
 240              	lowVoltageCutoff:
 241 0000 00000000 	 .space 6
 241      0000
 242 0006 0000     	 .section .bss.currentMeter,"aw",%nobits
 243              	 .align 2
 246              	currentMeter:
 247 0000 00000000 	 .space 12
 247      00000000 
 247      00000000 
 248              	 .section .bss.voltageMeter,"aw",%nobits
 249              	 .align 2
 252              	voltageMeter:
 253 0000 00000000 	 .space 5
 253      00
 254 0005 000000   	 .section .bss.batteryState,"aw",%nobits
 257              	batteryState:
 258 0000 00       	 .space 1
 259              	 .section .bss.voltageState,"aw",%nobits
 262              	voltageState:
 263 0000 00       	 .space 1
 264              	 .section .bss.consumptionState,"aw",%nobits
 267              	consumptionState:
 268 0000 00       	 .space 1
 269              	 .comm batteryConfig_System,14,4
 270              	 .comm batteryConfig_Copy,14,4
 271              	 .global batteryConfig_Registry
 272              	 .section .pg_registry,"a",%progbits
 273              	 .align 2
 276              	batteryConfig_Registry:
 277 0000 0B20     	 .short 8203
 278 0002 0E00     	 .short 14
 279 0004 00000000 	 .word batteryConfig_System
 280 0008 00000000 	 .word batteryConfig_Copy
 281 000c 00000000 	 .word 0
 282 0010 00000000 	 .word pgResetTemplate_batteryConfig
 283              	 .global pgResetTemplate_batteryConfig
 284              	 .section .pg_resetdata,"a",%progbits
 285              	 .align 1
 288              	pgResetTemplate_batteryConfig:
 289 0000 2B       	 .byte 43
 290 0001 21       	 .byte 33
 291 0002 23       	 .byte 35
 292 0003 1E       	 .byte 30
 293 0004 64       	 .byte 100
 294 0005 00       	 .byte 0
 295 0006 02       	 .byte 2
 296 0007 0000     	 .2byte 0
 297 0009 01       	 .byte 1
 298 000a 00       	 .byte 0
 299 000b 0A       	 .byte 10
 300 000c 01       	 .byte 1
 301 000d 29       	 .byte 41
 302              	 .section .text.batteryUpdateVoltage,"ax",%progbits
 303              	 .align 2
 304              	 .global batteryUpdateVoltage
 305              	 .thumb
 306              	 .thumb_func
 308              	batteryUpdateVoltage:
 309              	.LFB550:
 310              	 .file 4 "../cleanflight/src/main/sensors/battery.c"
   1:../cleanflight/src/main/sensors/battery.c **** /*
   2:../cleanflight/src/main/sensors/battery.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/sensors/battery.c ****  *
   4:../cleanflight/src/main/sensors/battery.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/sensors/battery.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/sensors/battery.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/sensors/battery.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/sensors/battery.c ****  * any later version.
   9:../cleanflight/src/main/sensors/battery.c ****  *
  10:../cleanflight/src/main/sensors/battery.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/sensors/battery.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/sensors/battery.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/sensors/battery.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/sensors/battery.c ****  *
  15:../cleanflight/src/main/sensors/battery.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/sensors/battery.c ****  * along with this software.
  17:../cleanflight/src/main/sensors/battery.c ****  *
  18:../cleanflight/src/main/sensors/battery.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/sensors/battery.c ****  */
  20:../cleanflight/src/main/sensors/battery.c **** 
  21:../cleanflight/src/main/sensors/battery.c **** #include "stdbool.h"
  22:../cleanflight/src/main/sensors/battery.c **** #include "stdint.h"
  23:../cleanflight/src/main/sensors/battery.c **** 
  24:../cleanflight/src/main/sensors/battery.c **** #include "platform.h"
  25:../cleanflight/src/main/sensors/battery.c **** 
  26:../cleanflight/src/main/sensors/battery.c **** #include "build/debug.h"
  27:../cleanflight/src/main/sensors/battery.c **** 
  28:../cleanflight/src/main/sensors/battery.c **** #include "common/filter.h"
  29:../cleanflight/src/main/sensors/battery.c **** #include "common/maths.h"
  30:../cleanflight/src/main/sensors/battery.c **** #include "common/utils.h"
  31:../cleanflight/src/main/sensors/battery.c **** 
  32:../cleanflight/src/main/sensors/battery.c **** #include "config/feature.h"
  33:../cleanflight/src/main/sensors/battery.c **** #include "pg/pg.h"
  34:../cleanflight/src/main/sensors/battery.c **** #include "pg/pg_ids.h"
  35:../cleanflight/src/main/sensors/battery.c **** 
  36:../cleanflight/src/main/sensors/battery.c **** #include "drivers/adc.h"
  37:../cleanflight/src/main/sensors/battery.c **** 
  38:../cleanflight/src/main/sensors/battery.c **** #include "fc/runtime_config.h"
  39:../cleanflight/src/main/sensors/battery.c **** #include "fc/config.h"
  40:../cleanflight/src/main/sensors/battery.c **** #include "fc/rc_controls.h"
  41:../cleanflight/src/main/sensors/battery.c **** 
  42:../cleanflight/src/main/sensors/battery.c **** #include "io/beeper.h"
  43:../cleanflight/src/main/sensors/battery.c **** 
  44:../cleanflight/src/main/sensors/battery.c **** #include "sensors/battery.h"
  45:../cleanflight/src/main/sensors/battery.c **** 
  46:../cleanflight/src/main/sensors/battery.c **** /**
  47:../cleanflight/src/main/sensors/battery.c ****  * terminology: meter vs sensors
  48:../cleanflight/src/main/sensors/battery.c ****  *
  49:../cleanflight/src/main/sensors/battery.c ****  * voltage and current sensors are used to collect data.
  50:../cleanflight/src/main/sensors/battery.c ****  * - e.g. voltage at an MCU ADC input pin, value from an ESC sensor.
  51:../cleanflight/src/main/sensors/battery.c ****  *   sensors require very specific configuration, such as resistor values.
  52:../cleanflight/src/main/sensors/battery.c ****  * voltage and current meters are used to process and expose data collected from sensors to the res
  53:../cleanflight/src/main/sensors/battery.c ****  * - e.g. a meter exposes normalized, and often filtered, values from a sensor.
  54:../cleanflight/src/main/sensors/battery.c ****  *   meters require different or little configuration.
  55:../cleanflight/src/main/sensors/battery.c ****  *   meters also have different precision concerns, and may use different units to the sensors.
  56:../cleanflight/src/main/sensors/battery.c ****  *
  57:../cleanflight/src/main/sensors/battery.c ****  */
  58:../cleanflight/src/main/sensors/battery.c **** 
  59:../cleanflight/src/main/sensors/battery.c **** static void batteryUpdateConsumptionState(void); // temporary forward reference
  60:../cleanflight/src/main/sensors/battery.c **** 
  61:../cleanflight/src/main/sensors/battery.c **** #define VBAT_STABLE_MAX_DELTA 2
  62:../cleanflight/src/main/sensors/battery.c **** #define LVC_AFFECT_TIME 10000000 //10 secs for the LVC to slowly kick in
  63:../cleanflight/src/main/sensors/battery.c **** 
  64:../cleanflight/src/main/sensors/battery.c **** // Battery monitoring stuff
  65:../cleanflight/src/main/sensors/battery.c **** uint8_t batteryCellCount; // Note: this can be 0 when no battery is detected or when the battery vo
  66:../cleanflight/src/main/sensors/battery.c **** uint16_t batteryWarningVoltage;
  67:../cleanflight/src/main/sensors/battery.c **** uint16_t batteryCriticalVoltage;
  68:../cleanflight/src/main/sensors/battery.c **** static lowVoltageCutoff_t lowVoltageCutoff;
  69:../cleanflight/src/main/sensors/battery.c **** //
  70:../cleanflight/src/main/sensors/battery.c **** static currentMeter_t currentMeter;
  71:../cleanflight/src/main/sensors/battery.c **** static voltageMeter_t voltageMeter;
  72:../cleanflight/src/main/sensors/battery.c **** 
  73:../cleanflight/src/main/sensors/battery.c **** static batteryState_e batteryState;
  74:../cleanflight/src/main/sensors/battery.c **** static batteryState_e voltageState;
  75:../cleanflight/src/main/sensors/battery.c **** static batteryState_e consumptionState;
  76:../cleanflight/src/main/sensors/battery.c **** 
  77:../cleanflight/src/main/sensors/battery.c **** #ifndef DEFAULT_CURRENT_METER_SOURCE
  78:../cleanflight/src/main/sensors/battery.c **** #ifdef USE_VIRTUAL_CURRENT_METER
  79:../cleanflight/src/main/sensors/battery.c **** #define DEFAULT_CURRENT_METER_SOURCE CURRENT_METER_VIRTUAL
  80:../cleanflight/src/main/sensors/battery.c **** #else
  81:../cleanflight/src/main/sensors/battery.c **** #ifdef USE_MSP_CURRENT_METER
  82:../cleanflight/src/main/sensors/battery.c **** #define DEFAULT_CURRENT_METER_SOURCE CURRENT_METER_MSP
  83:../cleanflight/src/main/sensors/battery.c **** #else
  84:../cleanflight/src/main/sensors/battery.c **** #define DEFAULT_CURRENT_METER_SOURCE CURRENT_METER_NONE
  85:../cleanflight/src/main/sensors/battery.c **** #endif
  86:../cleanflight/src/main/sensors/battery.c **** #endif
  87:../cleanflight/src/main/sensors/battery.c **** #endif
  88:../cleanflight/src/main/sensors/battery.c **** 
  89:../cleanflight/src/main/sensors/battery.c **** #ifndef DEFAULT_VOLTAGE_METER_SOURCE
  90:../cleanflight/src/main/sensors/battery.c **** #define DEFAULT_VOLTAGE_METER_SOURCE VOLTAGE_METER_NONE
  91:../cleanflight/src/main/sensors/battery.c **** #endif
  92:../cleanflight/src/main/sensors/battery.c **** 
  93:../cleanflight/src/main/sensors/battery.c **** PG_REGISTER_WITH_RESET_TEMPLATE(batteryConfig_t, batteryConfig, PG_BATTERY_CONFIG, 2);
  94:../cleanflight/src/main/sensors/battery.c **** 
  95:../cleanflight/src/main/sensors/battery.c **** PG_RESET_TEMPLATE(batteryConfig_t, batteryConfig,
  96:../cleanflight/src/main/sensors/battery.c ****     // voltage
  97:../cleanflight/src/main/sensors/battery.c ****     .vbatmaxcellvoltage = 43,
  98:../cleanflight/src/main/sensors/battery.c ****     .vbatmincellvoltage = 33,
  99:../cleanflight/src/main/sensors/battery.c ****     .vbatwarningcellvoltage = 35,
 100:../cleanflight/src/main/sensors/battery.c ****     .vbatnotpresentcellvoltage = 30, //A cell below 3 will be ignored
 101:../cleanflight/src/main/sensors/battery.c ****     .voltageMeterSource = DEFAULT_VOLTAGE_METER_SOURCE,
 102:../cleanflight/src/main/sensors/battery.c ****     .lvcPercentage = 100, //Off by default at 100%
 103:../cleanflight/src/main/sensors/battery.c **** 
 104:../cleanflight/src/main/sensors/battery.c ****     // current
 105:../cleanflight/src/main/sensors/battery.c ****     .batteryCapacity = 0,
 106:../cleanflight/src/main/sensors/battery.c ****     .currentMeterSource = DEFAULT_CURRENT_METER_SOURCE,
 107:../cleanflight/src/main/sensors/battery.c **** 
 108:../cleanflight/src/main/sensors/battery.c ****     // warnings / alerts
 109:../cleanflight/src/main/sensors/battery.c ****     .useVBatAlerts = true,
 110:../cleanflight/src/main/sensors/battery.c ****     .useConsumptionAlerts = false,
 111:../cleanflight/src/main/sensors/battery.c ****     .consumptionWarningPercentage = 10,
 112:../cleanflight/src/main/sensors/battery.c ****     .vbathysteresis = 1,
 113:../cleanflight/src/main/sensors/battery.c **** 
 114:../cleanflight/src/main/sensors/battery.c ****     .vbatfullcellvoltage = 41
 115:../cleanflight/src/main/sensors/battery.c **** );
 116:../cleanflight/src/main/sensors/battery.c **** 
 117:../cleanflight/src/main/sensors/battery.c **** void batteryUpdateVoltage(timeUs_t currentTimeUs)
 118:../cleanflight/src/main/sensors/battery.c **** {
 311              	 .loc 4 118 0
 312              	 .cfi_startproc
 313              	 
 314              	 
 315 0000 80B5     	 push {r7,lr}
 316              	.LCFI22:
 317              	 .cfi_def_cfa_offset 8
 318              	 .cfi_offset 7,-8
 319              	 .cfi_offset 14,-4
 320 0002 82B0     	 sub sp,sp,#8
 321              	.LCFI23:
 322              	 .cfi_def_cfa_offset 16
 323 0004 00AF     	 add r7,sp,#0
 324              	.LCFI24:
 325              	 .cfi_def_cfa_register 7
 326 0006 7860     	 str r0,[r7,#4]
 119:../cleanflight/src/main/sensors/battery.c ****     UNUSED(currentTimeUs);
 120:../cleanflight/src/main/sensors/battery.c **** 
 121:../cleanflight/src/main/sensors/battery.c ****     switch (batteryConfig()->voltageMeterSource) {
 327              	 .loc 4 121 0
 328 0008 FFF7FEFF 	 bl batteryConfig
 329 000c 0346     	 mov r3,r0
 330 000e 5B79     	 ldrb r3,[r3,#5]
 331 0010 012B     	 cmp r3,#1
 332 0012 06D1     	 bne .L26
 122:../cleanflight/src/main/sensors/battery.c **** #ifdef USE_ESC_SENSOR
 123:../cleanflight/src/main/sensors/battery.c ****         case VOLTAGE_METER_ESC:
 124:../cleanflight/src/main/sensors/battery.c ****             if (feature(FEATURE_ESC_SENSOR)) {
 125:../cleanflight/src/main/sensors/battery.c ****                 voltageMeterESCRefresh();
 126:../cleanflight/src/main/sensors/battery.c ****                 voltageMeterESCReadCombined(&voltageMeter);
 127:../cleanflight/src/main/sensors/battery.c ****             }
 128:../cleanflight/src/main/sensors/battery.c ****             break;
 129:../cleanflight/src/main/sensors/battery.c **** #endif
 130:../cleanflight/src/main/sensors/battery.c ****         case VOLTAGE_METER_ADC:
 131:../cleanflight/src/main/sensors/battery.c ****             voltageMeterADCRefresh();
 333              	 .loc 4 131 0
 334 0014 FFF7FEFF 	 bl voltageMeterADCRefresh
 132:../cleanflight/src/main/sensors/battery.c ****             voltageMeterADCRead(VOLTAGE_SENSOR_ADC_VBAT, &voltageMeter);
 335              	 .loc 4 132 0
 336 0018 0020     	 movs r0,#0
 337 001a 0C49     	 ldr r1,.L27
 338 001c FFF7FEFF 	 bl voltageMeterADCRead
 133:../cleanflight/src/main/sensors/battery.c ****             break;
 339              	 .loc 4 133 0
 340 0020 03E0     	 b .L24
 341              	.L26:
 134:../cleanflight/src/main/sensors/battery.c **** 
 135:../cleanflight/src/main/sensors/battery.c ****         default:
 136:../cleanflight/src/main/sensors/battery.c ****         case VOLTAGE_METER_NONE:
 137:../cleanflight/src/main/sensors/battery.c ****             voltageMeterReset(&voltageMeter);
 342              	 .loc 4 137 0
 343 0022 0A48     	 ldr r0,.L27
 344 0024 FFF7FEFF 	 bl voltageMeterReset
 138:../cleanflight/src/main/sensors/battery.c ****             break;
 345              	 .loc 4 138 0
 346 0028 00BF     	 nop
 347              	.L24:
 139:../cleanflight/src/main/sensors/battery.c ****     }
 140:../cleanflight/src/main/sensors/battery.c **** 
 141:../cleanflight/src/main/sensors/battery.c ****     if (debugMode == DEBUG_BATTERY) {
 348              	 .loc 4 141 0
 349 002a 094B     	 ldr r3,.L27+4
 350 002c 1B78     	 ldrb r3,[r3]
 351 002e 022B     	 cmp r3,#2
 352 0030 09D1     	 bne .L21
 142:../cleanflight/src/main/sensors/battery.c ****         debug[0] = voltageMeter.unfiltered;
 353              	 .loc 4 142 0
 354 0032 064B     	 ldr r3,.L27
 355 0034 5B88     	 ldrh r3,[r3,#2]
 356 0036 9AB2     	 uxth r2,r3
 357 0038 064B     	 ldr r3,.L27+8
 358 003a 1A80     	 strh r2,[r3]
 143:../cleanflight/src/main/sensors/battery.c ****         debug[1] = voltageMeter.filtered;
 359              	 .loc 4 143 0
 360 003c 034B     	 ldr r3,.L27
 361 003e 1B88     	 ldrh r3,[r3]
 362 0040 9AB2     	 uxth r2,r3
 363 0042 044B     	 ldr r3,.L27+8
 364 0044 5A80     	 strh r2,[r3,#2]
 365              	.L21:
 144:../cleanflight/src/main/sensors/battery.c ****     }
 145:../cleanflight/src/main/sensors/battery.c **** }
 366              	 .loc 4 145 0
 367 0046 0837     	 adds r7,r7,#8
 368              	.LCFI25:
 369              	 .cfi_def_cfa_offset 8
 370 0048 BD46     	 mov sp,r7
 371              	.LCFI26:
 372              	 .cfi_def_cfa_register 13
 373              	 
 374 004a 80BD     	 pop {r7,pc}
 375              	.L28:
 376              	 .align 2
 377              	.L27:
 378 004c 00000000 	 .word voltageMeter
 379 0050 00000000 	 .word debugMode
 380 0054 00000000 	 .word debug
 381              	 .cfi_endproc
 382              	.LFE550:
 384              	 .section .text.updateBatteryBeeperAlert,"ax",%progbits
 385              	 .align 2
 386              	 .thumb
 387              	 .thumb_func
 389              	updateBatteryBeeperAlert:
 390              	.LFB551:
 146:../cleanflight/src/main/sensors/battery.c **** 
 147:../cleanflight/src/main/sensors/battery.c **** static void updateBatteryBeeperAlert(void)
 148:../cleanflight/src/main/sensors/battery.c **** {
 391              	 .loc 4 148 0
 392              	 .cfi_startproc
 393              	 
 394              	 
 395 0000 80B5     	 push {r7,lr}
 396              	.LCFI27:
 397              	 .cfi_def_cfa_offset 8
 398              	 .cfi_offset 7,-8
 399              	 .cfi_offset 14,-4
 400 0002 00AF     	 add r7,sp,#0
 401              	.LCFI28:
 402              	 .cfi_def_cfa_register 7
 149:../cleanflight/src/main/sensors/battery.c ****     switch (getBatteryState()) {
 403              	 .loc 4 149 0
 404 0004 FFF7FEFF 	 bl getBatteryState
 405 0008 0346     	 mov r3,r0
 406 000a 042B     	 cmp r3,#4
 407 000c 14D8     	 bhi .L29
 408 000e 01A2     	 adr r2,.L32
 409 0010 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 410              	 .p2align 2
 411              	.L32:
 412 0014 39000000 	 .word .L29+1
 413 0018 29000000 	 .word .L33+1
 414 001c 31000000 	 .word .L34+1
 415 0020 39000000 	 .word .L29+1
 416 0024 39000000 	 .word .L29+1
 417              	 .p2align 1
 418              	.L33:
 150:../cleanflight/src/main/sensors/battery.c ****         case BATTERY_WARNING:
 151:../cleanflight/src/main/sensors/battery.c ****             beeper(BEEPER_BAT_LOW);
 419              	 .loc 4 151 0
 420 0028 0820     	 movs r0,#8
 421 002a FFF7FEFF 	 bl beeper
 152:../cleanflight/src/main/sensors/battery.c **** 
 153:../cleanflight/src/main/sensors/battery.c ****             break;
 422              	 .loc 4 153 0
 423 002e 03E0     	 b .L29
 424              	.L34:
 154:../cleanflight/src/main/sensors/battery.c ****         case BATTERY_CRITICAL:
 155:../cleanflight/src/main/sensors/battery.c ****             beeper(BEEPER_BAT_CRIT_LOW);
 425              	 .loc 4 155 0
 426 0030 0720     	 movs r0,#7
 427 0032 FFF7FEFF 	 bl beeper
 156:../cleanflight/src/main/sensors/battery.c **** 
 157:../cleanflight/src/main/sensors/battery.c ****             break;
 428              	 .loc 4 157 0
 429 0036 00BF     	 nop
 430              	.L29:
 158:../cleanflight/src/main/sensors/battery.c ****         case BATTERY_OK:
 159:../cleanflight/src/main/sensors/battery.c ****         case BATTERY_NOT_PRESENT:
 160:../cleanflight/src/main/sensors/battery.c ****         case BATTERY_INIT:
 161:../cleanflight/src/main/sensors/battery.c ****             break;
 162:../cleanflight/src/main/sensors/battery.c ****     }
 163:../cleanflight/src/main/sensors/battery.c **** }
 431              	 .loc 4 163 0
 432 0038 80BD     	 pop {r7,pc}
 433              	 .cfi_endproc
 434              	.LFE551:
 436 003a 00BF     	 .section .text.batteryUpdatePresence,"ax",%progbits
 437              	 .align 2
 438              	 .global batteryUpdatePresence
 439              	 .thumb
 440              	 .thumb_func
 442              	batteryUpdatePresence:
 443              	.LFB552:
 164:../cleanflight/src/main/sensors/battery.c **** 
 165:../cleanflight/src/main/sensors/battery.c **** void batteryUpdatePresence(void)
 166:../cleanflight/src/main/sensors/battery.c **** {
 444              	 .loc 4 166 0
 445              	 .cfi_startproc
 446              	 
 447              	 
 448 0000 90B5     	 push {r4,r7,lr}
 449              	.LCFI29:
 450              	 .cfi_def_cfa_offset 12
 451              	 .cfi_offset 4,-12
 452              	 .cfi_offset 7,-8
 453              	 .cfi_offset 14,-4
 454 0002 85B0     	 sub sp,sp,#20
 455              	.LCFI30:
 456              	 .cfi_def_cfa_offset 32
 457 0004 00AF     	 add r7,sp,#0
 458              	.LCFI31:
 459              	 .cfi_def_cfa_register 7
 460              	.LBB2:
 167:../cleanflight/src/main/sensors/battery.c ****     bool isVoltageStable = ABS(voltageMeter.filtered - voltageMeter.unfiltered) <= VBAT_STABLE_MAX_
 461              	 .loc 4 167 0
 462 0006 564B     	 ldr r3,.L45
 463 0008 1B88     	 ldrh r3,[r3]
 464 000a 1A46     	 mov r2,r3
 465 000c 544B     	 ldr r3,.L45
 466 000e 5B88     	 ldrh r3,[r3,#2]
 467 0010 D31A     	 subs r3,r2,r3
 468 0012 BB60     	 str r3,[r7,#8]
 469 0014 BB68     	 ldr r3,[r7,#8]
 470 0016 002B     	 cmp r3,#0
 471 0018 B8BF     	 it lt
 472 001a 5B42     	 rsblt r3,r3,#0
 473              	.LBE2:
 474 001c 022B     	 cmp r3,#2
 475 001e D4BF     	 ite le
 476 0020 0123     	 movle r3,#1
 477 0022 0023     	 movgt r3,#0
 478 0024 FB71     	 strb r3,[r7,#7]
 168:../cleanflight/src/main/sensors/battery.c **** 
 169:../cleanflight/src/main/sensors/battery.c ****     bool isVoltageFromBat = (voltageMeter.filtered >= batteryConfig()->vbatnotpresentcellvoltage  /
 479              	 .loc 4 169 0
 480 0026 4E4B     	 ldr r3,.L45
 481 0028 1C88     	 ldrh r4,[r3]
 482 002a FFF7FEFF 	 bl batteryConfig
 483 002e 0346     	 mov r3,r0
 484 0030 DB78     	 ldrb r3,[r3,#3]
 485 0032 9BB2     	 uxth r3,r3
 170:../cleanflight/src/main/sensors/battery.c ****                             && voltageMeter.filtered <= batteryConfig()->vbatmaxcellvoltage)  //1s 
 171:../cleanflight/src/main/sensors/battery.c ****                             || voltageMeter.filtered > batteryConfig()->vbatnotpresentcellvoltage*2
 486              	 .loc 4 171 0
 487 0034 9C42     	 cmp r4,r3
 488 0036 08D3     	 bcc .L36
 170:../cleanflight/src/main/sensors/battery.c ****                             && voltageMeter.filtered <= batteryConfig()->vbatmaxcellvoltage)  //1s 
 489              	 .loc 4 170 0
 490 0038 494B     	 ldr r3,.L45
 491 003a 1C88     	 ldrh r4,[r3]
 492 003c FFF7FEFF 	 bl batteryConfig
 493 0040 0346     	 mov r3,r0
 494 0042 1B78     	 ldrb r3,[r3]
 495 0044 9BB2     	 uxth r3,r3
 496 0046 9C42     	 cmp r4,r3
 497 0048 09D9     	 bls .L37
 498              	.L36:
 499              	 .loc 4 171 0 discriminator 1
 500 004a 454B     	 ldr r3,.L45
 501 004c 1B88     	 ldrh r3,[r3]
 502 004e 1C46     	 mov r4,r3
 503 0050 FFF7FEFF 	 bl batteryConfig
 504 0054 0346     	 mov r3,r0
 505 0056 DB78     	 ldrb r3,[r3,#3]
 506 0058 5B00     	 lsls r3,r3,#1
 507 005a 9C42     	 cmp r4,r3
 508 005c 01DD     	 ble .L38
 509              	.L37:
 510              	 .loc 4 171 0 is_stmt 0 discriminator 2
 511 005e 0123     	 movs r3,#1
 512 0060 00E0     	 b .L39
 513              	.L38:
 514              	 .loc 4 171 0 discriminator 3
 515 0062 0023     	 movs r3,#0
 516              	.L39:
 169:../cleanflight/src/main/sensors/battery.c ****                             && voltageMeter.filtered <= batteryConfig()->vbatmaxcellvoltage)  //1s 
 517              	 .loc 4 169 0 is_stmt 1
 518 0064 BB71     	 strb r3,[r7,#6]
 519 0066 BB79     	 ldrb r3,[r7,#6]
 520 0068 03F00103 	 and r3,r3,#1
 521 006c BB71     	 strb r3,[r7,#6]
 172:../cleanflight/src/main/sensors/battery.c **** 
 173:../cleanflight/src/main/sensors/battery.c **** 
 174:../cleanflight/src/main/sensors/battery.c ****     if (
 175:../cleanflight/src/main/sensors/battery.c ****         (voltageState == BATTERY_NOT_PRESENT || voltageState == BATTERY_INIT)
 522              	 .loc 4 175 0
 523 006e 3D4B     	 ldr r3,.L45+4
 524 0070 1B78     	 ldrb r3,[r3]
 174:../cleanflight/src/main/sensors/battery.c ****         (voltageState == BATTERY_NOT_PRESENT || voltageState == BATTERY_INIT)
 525              	 .loc 4 174 0
 526 0072 032B     	 cmp r3,#3
 527 0074 03D0     	 beq .L40
 528              	 .loc 4 175 0
 529 0076 3B4B     	 ldr r3,.L45+4
 530 0078 1B78     	 ldrb r3,[r3]
 531 007a 042B     	 cmp r3,#4
 532 007c 43D1     	 bne .L41
 533              	.L40:
 176:../cleanflight/src/main/sensors/battery.c ****         && isVoltageFromBat
 534              	 .loc 4 176 0
 535 007e BB79     	 ldrb r3,[r7,#6]
 536 0080 002B     	 cmp r3,#0
 537 0082 40D0     	 beq .L41
 177:../cleanflight/src/main/sensors/battery.c ****         && isVoltageStable
 538              	 .loc 4 177 0
 539 0084 FB79     	 ldrb r3,[r7,#7]
 540 0086 002B     	 cmp r3,#0
 541 0088 3DD0     	 beq .L41
 542              	.LBB3:
 178:../cleanflight/src/main/sensors/battery.c ****     ) {
 179:../cleanflight/src/main/sensors/battery.c ****         /* Want to disable battery getting detected around USB voltage or 0V*/
 180:../cleanflight/src/main/sensors/battery.c ****         /* battery has just been connected - calculate cells, warning voltages and reset state */
 181:../cleanflight/src/main/sensors/battery.c **** 
 182:../cleanflight/src/main/sensors/battery.c **** 
 183:../cleanflight/src/main/sensors/battery.c ****         unsigned cells = (voltageMeter.filtered / batteryConfig()->vbatmaxcellvoltage) + 1;
 543              	 .loc 4 183 0
 544 008a 354B     	 ldr r3,.L45
 545 008c 1B88     	 ldrh r3,[r3]
 546 008e 1C46     	 mov r4,r3
 547 0090 FFF7FEFF 	 bl batteryConfig
 548 0094 0346     	 mov r3,r0
 549 0096 1B78     	 ldrb r3,[r3]
 550 0098 94FBF3F3 	 sdiv r3,r4,r3
 551 009c 0133     	 adds r3,r3,#1
 552 009e FB60     	 str r3,[r7,#12]
 184:../cleanflight/src/main/sensors/battery.c ****         if (cells > 8) {
 553              	 .loc 4 184 0
 554 00a0 FB68     	 ldr r3,[r7,#12]
 555 00a2 082B     	 cmp r3,#8
 556 00a4 01D9     	 bls .L42
 185:../cleanflight/src/main/sensors/battery.c ****             // something is wrong, we expect 8 cells maximum (and autodetection will be problematic
 186:../cleanflight/src/main/sensors/battery.c ****             cells = 8;
 557              	 .loc 4 186 0
 558 00a6 0823     	 movs r3,#8
 559 00a8 FB60     	 str r3,[r7,#12]
 560              	.L42:
 187:../cleanflight/src/main/sensors/battery.c ****         }
 188:../cleanflight/src/main/sensors/battery.c **** 
 189:../cleanflight/src/main/sensors/battery.c ****         consumptionState = voltageState = BATTERY_OK;
 561              	 .loc 4 189 0
 562 00aa 2E4B     	 ldr r3,.L45+4
 563 00ac 0022     	 movs r2,#0
 564 00ae 1A70     	 strb r2,[r3]
 565 00b0 2C4B     	 ldr r3,.L45+4
 566 00b2 1A78     	 ldrb r2,[r3]
 567 00b4 2C4B     	 ldr r3,.L45+8
 568 00b6 1A70     	 strb r2,[r3]
 190:../cleanflight/src/main/sensors/battery.c ****         batteryCellCount = cells;
 569              	 .loc 4 190 0
 570 00b8 FB68     	 ldr r3,[r7,#12]
 571 00ba DAB2     	 uxtb r2,r3
 572 00bc 2B4B     	 ldr r3,.L45+12
 573 00be 1A70     	 strb r2,[r3]
 191:../cleanflight/src/main/sensors/battery.c ****         batteryWarningVoltage = batteryCellCount * batteryConfig()->vbatwarningcellvoltage;
 574              	 .loc 4 191 0
 575 00c0 2A4B     	 ldr r3,.L45+12
 576 00c2 1B78     	 ldrb r3,[r3]
 577 00c4 9CB2     	 uxth r4,r3
 578 00c6 FFF7FEFF 	 bl batteryConfig
 579 00ca 0346     	 mov r3,r0
 580 00cc 9B78     	 ldrb r3,[r3,#2]
 581 00ce 9BB2     	 uxth r3,r3
 582 00d0 14FB03F3 	 smulbb r3,r4,r3
 583 00d4 9AB2     	 uxth r2,r3
 584 00d6 264B     	 ldr r3,.L45+16
 585 00d8 1A80     	 strh r2,[r3]
 192:../cleanflight/src/main/sensors/battery.c ****         batteryCriticalVoltage = batteryCellCount * batteryConfig()->vbatmincellvoltage;
 586              	 .loc 4 192 0
 587 00da 244B     	 ldr r3,.L45+12
 588 00dc 1B78     	 ldrb r3,[r3]
 589 00de 9CB2     	 uxth r4,r3
 590 00e0 FFF7FEFF 	 bl batteryConfig
 591 00e4 0346     	 mov r3,r0
 592 00e6 5B78     	 ldrb r3,[r3,#1]
 593 00e8 9BB2     	 uxth r3,r3
 594 00ea 14FB03F3 	 smulbb r3,r4,r3
 595 00ee 9AB2     	 uxth r2,r3
 596 00f0 204B     	 ldr r3,.L45+20
 597 00f2 1A80     	 strh r2,[r3]
 193:../cleanflight/src/main/sensors/battery.c ****         lowVoltageCutoff.percentage = 100;
 598              	 .loc 4 193 0
 599 00f4 204B     	 ldr r3,.L45+24
 600 00f6 6422     	 movs r2,#100
 601 00f8 5A70     	 strb r2,[r3,#1]
 194:../cleanflight/src/main/sensors/battery.c ****         lowVoltageCutoff.startTime = 0;
 602              	 .loc 4 194 0
 603 00fa 1F4B     	 ldr r3,.L45+24
 604 00fc 0022     	 movs r2,#0
 605 00fe 5A80     	 strh r2,[r3,#2]
 606 0100 0022     	 movs r2,#0
 607 0102 9A80     	 strh r2,[r3,#4]
 608              	.LBE3:
 178:../cleanflight/src/main/sensors/battery.c ****         /* Want to disable battery getting detected around USB voltage or 0V*/
 609              	 .loc 4 178 0
 610 0104 1CE0     	 b .L43
 611              	.L41:
 195:../cleanflight/src/main/sensors/battery.c ****     } else if (
 196:../cleanflight/src/main/sensors/battery.c ****         voltageState != BATTERY_NOT_PRESENT
 612              	 .loc 4 196 0
 613 0106 174B     	 ldr r3,.L45+4
 614 0108 1B78     	 ldrb r3,[r3]
 195:../cleanflight/src/main/sensors/battery.c ****     } else if (
 615              	 .loc 4 195 0
 616 010a 032B     	 cmp r3,#3
 617 010c 18D0     	 beq .L43
 197:../cleanflight/src/main/sensors/battery.c ****         && isVoltageStable
 618              	 .loc 4 197 0
 619 010e FB79     	 ldrb r3,[r7,#7]
 620 0110 002B     	 cmp r3,#0
 621 0112 15D0     	 beq .L43
 198:../cleanflight/src/main/sensors/battery.c ****         && !isVoltageFromBat
 622              	 .loc 4 198 0
 623 0114 BB79     	 ldrb r3,[r7,#6]
 624 0116 83F00103 	 eor r3,r3,#1
 625 011a DBB2     	 uxtb r3,r3
 626 011c 002B     	 cmp r3,#0
 627 011e 0FD0     	 beq .L43
 199:../cleanflight/src/main/sensors/battery.c ****     ) {
 200:../cleanflight/src/main/sensors/battery.c ****         /* battery has been disconnected - can take a while for filter cap to disharge so we use a 
 201:../cleanflight/src/main/sensors/battery.c **** 
 202:../cleanflight/src/main/sensors/battery.c ****         consumptionState = voltageState = BATTERY_NOT_PRESENT;
 628              	 .loc 4 202 0
 629 0120 104B     	 ldr r3,.L45+4
 630 0122 0322     	 movs r2,#3
 631 0124 1A70     	 strb r2,[r3]
 632 0126 0F4B     	 ldr r3,.L45+4
 633 0128 1A78     	 ldrb r2,[r3]
 634 012a 0F4B     	 ldr r3,.L45+8
 635 012c 1A70     	 strb r2,[r3]
 203:../cleanflight/src/main/sensors/battery.c **** 
 204:../cleanflight/src/main/sensors/battery.c ****         batteryCellCount = 0;
 636              	 .loc 4 204 0
 637 012e 0F4B     	 ldr r3,.L45+12
 638 0130 0022     	 movs r2,#0
 639 0132 1A70     	 strb r2,[r3]
 205:../cleanflight/src/main/sensors/battery.c ****         batteryWarningVoltage = 0;
 640              	 .loc 4 205 0
 641 0134 0E4B     	 ldr r3,.L45+16
 642 0136 0022     	 movs r2,#0
 643 0138 1A80     	 strh r2,[r3]
 206:../cleanflight/src/main/sensors/battery.c ****         batteryCriticalVoltage = 0;
 644              	 .loc 4 206 0
 645 013a 0E4B     	 ldr r3,.L45+20
 646 013c 0022     	 movs r2,#0
 647 013e 1A80     	 strh r2,[r3]
 648              	.L43:
 207:../cleanflight/src/main/sensors/battery.c ****     }
 208:../cleanflight/src/main/sensors/battery.c ****     if (debugMode == DEBUG_BATTERY) {
 649              	 .loc 4 208 0
 650 0140 0E4B     	 ldr r3,.L45+28
 651 0142 1B78     	 ldrb r3,[r3]
 652 0144 022B     	 cmp r3,#2
 653 0146 08D1     	 bne .L35
 209:../cleanflight/src/main/sensors/battery.c ****         debug[2] = batteryCellCount;
 654              	 .loc 4 209 0
 655 0148 084B     	 ldr r3,.L45+12
 656 014a 1B78     	 ldrb r3,[r3]
 657 014c 9AB2     	 uxth r2,r3
 658 014e 0C4B     	 ldr r3,.L45+32
 659 0150 9A80     	 strh r2,[r3,#4]
 210:../cleanflight/src/main/sensors/battery.c ****         debug[3] = isVoltageStable;
 660              	 .loc 4 210 0
 661 0152 FB79     	 ldrb r3,[r7,#7]
 662 0154 9AB2     	 uxth r2,r3
 663 0156 0A4B     	 ldr r3,.L45+32
 664 0158 DA80     	 strh r2,[r3,#6]
 665              	.L35:
 211:../cleanflight/src/main/sensors/battery.c ****     }
 212:../cleanflight/src/main/sensors/battery.c **** }
 666              	 .loc 4 212 0
 667 015a 1437     	 adds r7,r7,#20
 668              	.LCFI32:
 669              	 .cfi_def_cfa_offset 12
 670 015c BD46     	 mov sp,r7
 671              	.LCFI33:
 672              	 .cfi_def_cfa_register 13
 673              	 
 674 015e 90BD     	 pop {r4,r7,pc}
 675              	.L46:
 676              	 .align 2
 677              	.L45:
 678 0160 00000000 	 .word voltageMeter
 679 0164 00000000 	 .word voltageState
 680 0168 00000000 	 .word consumptionState
 681 016c 00000000 	 .word batteryCellCount
 682 0170 00000000 	 .word batteryWarningVoltage
 683 0174 00000000 	 .word batteryCriticalVoltage
 684 0178 00000000 	 .word lowVoltageCutoff
 685 017c 00000000 	 .word debugMode
 686 0180 00000000 	 .word debug
 687              	 .cfi_endproc
 688              	.LFE552:
 690              	 .section .text.batteryUpdateVoltageState,"ax",%progbits
 691              	 .align 2
 692              	 .thumb
 693              	 .thumb_func
 695              	batteryUpdateVoltageState:
 696              	.LFB553:
 213:../cleanflight/src/main/sensors/battery.c **** 
 214:../cleanflight/src/main/sensors/battery.c **** static void batteryUpdateVoltageState(void)
 215:../cleanflight/src/main/sensors/battery.c **** {
 697              	 .loc 4 215 0
 698              	 .cfi_startproc
 699              	 
 700              	 
 701 0000 B0B5     	 push {r4,r5,r7,lr}
 702              	.LCFI34:
 703              	 .cfi_def_cfa_offset 16
 704              	 .cfi_offset 4,-16
 705              	 .cfi_offset 5,-12
 706              	 .cfi_offset 7,-8
 707              	 .cfi_offset 14,-4
 708 0002 00AF     	 add r7,sp,#0
 709              	.LCFI35:
 710              	 .cfi_def_cfa_register 7
 216:../cleanflight/src/main/sensors/battery.c ****     // alerts are currently used by beeper, osd and other subsystems
 217:../cleanflight/src/main/sensors/battery.c ****     switch (voltageState) {
 711              	 .loc 4 217 0
 712 0004 214B     	 ldr r3,.L58
 713 0006 1B78     	 ldrb r3,[r3]
 714 0008 012B     	 cmp r3,#1
 715 000a 16D0     	 beq .L49
 716 000c 022B     	 cmp r3,#2
 717 000e 30D0     	 beq .L50
 718 0010 002B     	 cmp r3,#0
 719 0012 00D0     	 beq .L51
 218:../cleanflight/src/main/sensors/battery.c ****         case BATTERY_OK:
 219:../cleanflight/src/main/sensors/battery.c ****             if (voltageMeter.filtered <= (batteryWarningVoltage - batteryConfig()->vbathysteresis))
 220:../cleanflight/src/main/sensors/battery.c ****                 voltageState = BATTERY_WARNING;
 221:../cleanflight/src/main/sensors/battery.c ****             }
 222:../cleanflight/src/main/sensors/battery.c ****             break;
 223:../cleanflight/src/main/sensors/battery.c **** 
 224:../cleanflight/src/main/sensors/battery.c ****         case BATTERY_WARNING:
 225:../cleanflight/src/main/sensors/battery.c ****             if (voltageMeter.filtered <= (batteryCriticalVoltage - batteryConfig()->vbathysteresis)
 226:../cleanflight/src/main/sensors/battery.c ****                 voltageState = BATTERY_CRITICAL;
 227:../cleanflight/src/main/sensors/battery.c ****             } else if (voltageMeter.filtered > batteryWarningVoltage) {
 228:../cleanflight/src/main/sensors/battery.c ****                 voltageState = BATTERY_OK;
 229:../cleanflight/src/main/sensors/battery.c ****             }
 230:../cleanflight/src/main/sensors/battery.c ****             break;
 231:../cleanflight/src/main/sensors/battery.c **** 
 232:../cleanflight/src/main/sensors/battery.c ****         case BATTERY_CRITICAL:
 233:../cleanflight/src/main/sensors/battery.c ****             if (voltageMeter.filtered > batteryCriticalVoltage) {
 234:../cleanflight/src/main/sensors/battery.c ****                 voltageState = BATTERY_WARNING;
 235:../cleanflight/src/main/sensors/battery.c ****             }
 236:../cleanflight/src/main/sensors/battery.c ****             break;
 237:../cleanflight/src/main/sensors/battery.c **** 
 238:../cleanflight/src/main/sensors/battery.c ****         default:
 239:../cleanflight/src/main/sensors/battery.c ****             break;
 720              	 .loc 4 239 0
 721 0014 38E0     	 b .L47
 722              	.L51:
 219:../cleanflight/src/main/sensors/battery.c ****                 voltageState = BATTERY_WARNING;
 723              	 .loc 4 219 0
 724 0016 1E4B     	 ldr r3,.L58+4
 725 0018 1B88     	 ldrh r3,[r3]
 726 001a 1C46     	 mov r4,r3
 727 001c 1D4B     	 ldr r3,.L58+8
 728 001e 1B88     	 ldrh r3,[r3]
 729 0020 1D46     	 mov r5,r3
 730 0022 FFF7FEFF 	 bl batteryConfig
 731 0026 0346     	 mov r3,r0
 732 0028 1B7B     	 ldrb r3,[r3,#12]
 733 002a EB1A     	 subs r3,r5,r3
 734 002c 9C42     	 cmp r4,r3
 735 002e 03DC     	 bgt .L52
 220:../cleanflight/src/main/sensors/battery.c ****             }
 736              	 .loc 4 220 0
 737 0030 164B     	 ldr r3,.L58
 738 0032 0122     	 movs r2,#1
 739 0034 1A70     	 strb r2,[r3]
 222:../cleanflight/src/main/sensors/battery.c **** 
 740              	 .loc 4 222 0
 741 0036 27E0     	 b .L47
 742              	.L52:
 743 0038 26E0     	 b .L47
 744              	.L49:
 225:../cleanflight/src/main/sensors/battery.c ****                 voltageState = BATTERY_CRITICAL;
 745              	 .loc 4 225 0
 746 003a 154B     	 ldr r3,.L58+4
 747 003c 1B88     	 ldrh r3,[r3]
 748 003e 1C46     	 mov r4,r3
 749 0040 154B     	 ldr r3,.L58+12
 750 0042 1B88     	 ldrh r3,[r3]
 751 0044 1D46     	 mov r5,r3
 752 0046 FFF7FEFF 	 bl batteryConfig
 753 004a 0346     	 mov r3,r0
 754 004c 1B7B     	 ldrb r3,[r3,#12]
 755 004e EB1A     	 subs r3,r5,r3
 756 0050 9C42     	 cmp r4,r3
 757 0052 03DC     	 bgt .L54
 226:../cleanflight/src/main/sensors/battery.c ****             } else if (voltageMeter.filtered > batteryWarningVoltage) {
 758              	 .loc 4 226 0
 759 0054 0D4B     	 ldr r3,.L58
 760 0056 0222     	 movs r2,#2
 761 0058 1A70     	 strb r2,[r3]
 762 005a 09E0     	 b .L55
 763              	.L54:
 227:../cleanflight/src/main/sensors/battery.c ****                 voltageState = BATTERY_OK;
 764              	 .loc 4 227 0
 765 005c 0C4B     	 ldr r3,.L58+4
 766 005e 1A88     	 ldrh r2,[r3]
 767 0060 0C4B     	 ldr r3,.L58+8
 768 0062 1B88     	 ldrh r3,[r3]
 769 0064 9A42     	 cmp r2,r3
 770 0066 03D9     	 bls .L55
 228:../cleanflight/src/main/sensors/battery.c ****             }
 771              	 .loc 4 228 0
 772 0068 084B     	 ldr r3,.L58
 773 006a 0022     	 movs r2,#0
 774 006c 1A70     	 strb r2,[r3]
 230:../cleanflight/src/main/sensors/battery.c **** 
 775              	 .loc 4 230 0
 776 006e 0BE0     	 b .L47
 777              	.L55:
 778 0070 0AE0     	 b .L47
 779              	.L50:
 233:../cleanflight/src/main/sensors/battery.c ****                 voltageState = BATTERY_WARNING;
 780              	 .loc 4 233 0
 781 0072 074B     	 ldr r3,.L58+4
 782 0074 1A88     	 ldrh r2,[r3]
 783 0076 084B     	 ldr r3,.L58+12
 784 0078 1B88     	 ldrh r3,[r3]
 785 007a 9A42     	 cmp r2,r3
 786 007c 03D9     	 bls .L56
 234:../cleanflight/src/main/sensors/battery.c ****             }
 787              	 .loc 4 234 0
 788 007e 034B     	 ldr r3,.L58
 789 0080 0122     	 movs r2,#1
 790 0082 1A70     	 strb r2,[r3]
 236:../cleanflight/src/main/sensors/battery.c **** 
 791              	 .loc 4 236 0
 792 0084 FFE7     	 b .L57
 793              	.L56:
 794              	.L57:
 795 0086 00BF     	 nop
 796              	.L47:
 240:../cleanflight/src/main/sensors/battery.c ****     }
 241:../cleanflight/src/main/sensors/battery.c **** 
 242:../cleanflight/src/main/sensors/battery.c **** }
 797              	 .loc 4 242 0
 798 0088 B0BD     	 pop {r4,r5,r7,pc}
 799              	.L59:
 800 008a 00BF     	 .align 2
 801              	.L58:
 802 008c 00000000 	 .word voltageState
 803 0090 00000000 	 .word voltageMeter
 804 0094 00000000 	 .word batteryWarningVoltage
 805 0098 00000000 	 .word batteryCriticalVoltage
 806              	 .cfi_endproc
 807              	.LFE553:
 809              	 .section .text.batteryUpdateLVC,"ax",%progbits
 810              	 .align 2
 811              	 .thumb
 812              	 .thumb_func
 814              	batteryUpdateLVC:
 815              	.LFB554:
 243:../cleanflight/src/main/sensors/battery.c **** 
 244:../cleanflight/src/main/sensors/battery.c **** static void batteryUpdateLVC(timeUs_t currentTimeUs)
 245:../cleanflight/src/main/sensors/battery.c **** {
 816              	 .loc 4 245 0
 817              	 .cfi_startproc
 818              	 
 819              	 
 820 0000 90B5     	 push {r4,r7,lr}
 821              	.LCFI36:
 822              	 .cfi_def_cfa_offset 12
 823              	 .cfi_offset 4,-12
 824              	 .cfi_offset 7,-8
 825              	 .cfi_offset 14,-4
 826 0002 83B0     	 sub sp,sp,#12
 827              	.LCFI37:
 828              	 .cfi_def_cfa_offset 24
 829 0004 00AF     	 add r7,sp,#0
 830              	.LCFI38:
 831              	 .cfi_def_cfa_register 7
 832 0006 7860     	 str r0,[r7,#4]
 246:../cleanflight/src/main/sensors/battery.c ****     if (batteryConfig()->lvcPercentage < 100) {
 833              	 .loc 4 246 0
 834 0008 FFF7FEFF 	 bl batteryConfig
 835 000c 0346     	 mov r3,r0
 836 000e 1B79     	 ldrb r3,[r3,#4]
 837 0010 632B     	 cmp r3,#99
 838 0012 46D8     	 bhi .L60
 247:../cleanflight/src/main/sensors/battery.c ****         if (voltageState == BATTERY_CRITICAL && !lowVoltageCutoff.enabled) {
 839              	 .loc 4 247 0
 840 0014 244B     	 ldr r3,.L64
 841 0016 1B78     	 ldrb r3,[r3]
 842 0018 022B     	 cmp r3,#2
 843 001a 10D1     	 bne .L62
 844              	 .loc 4 247 0 is_stmt 0 discriminator 1
 845 001c 234B     	 ldr r3,.L64+4
 846 001e 1B78     	 ldrb r3,[r3]
 847 0020 83F00103 	 eor r3,r3,#1
 848 0024 DBB2     	 uxtb r3,r3
 849 0026 002B     	 cmp r3,#0
 850 0028 09D0     	 beq .L62
 248:../cleanflight/src/main/sensors/battery.c ****             lowVoltageCutoff.enabled = true;
 851              	 .loc 4 248 0 is_stmt 1
 852 002a 204B     	 ldr r3,.L64+4
 853 002c 0122     	 movs r2,#1
 854 002e 1A70     	 strb r2,[r3]
 249:../cleanflight/src/main/sensors/battery.c ****             lowVoltageCutoff.startTime = currentTimeUs;
 855              	 .loc 4 249 0
 856 0030 1E4A     	 ldr r2,.L64+4
 857 0032 7B68     	 ldr r3,[r7,#4]
 858 0034 C2F80230 	 str r3,[r2,#2]
 250:../cleanflight/src/main/sensors/battery.c ****             lowVoltageCutoff.percentage = 100;
 859              	 .loc 4 250 0
 860 0038 1C4B     	 ldr r3,.L64+4
 861 003a 6422     	 movs r2,#100
 862 003c 5A70     	 strb r2,[r3,#1]
 863              	.L62:
 251:../cleanflight/src/main/sensors/battery.c ****         }
 252:../cleanflight/src/main/sensors/battery.c ****         if (lowVoltageCutoff.enabled) {
 864              	 .loc 4 252 0
 865 003e 1B4B     	 ldr r3,.L64+4
 866 0040 1B78     	 ldrb r3,[r3]
 867 0042 002B     	 cmp r3,#0
 868 0044 2DD0     	 beq .L60
 253:../cleanflight/src/main/sensors/battery.c ****             if (cmp32(currentTimeUs,lowVoltageCutoff.startTime) < LVC_AFFECT_TIME) {
 869              	 .loc 4 253 0
 870 0046 194B     	 ldr r3,.L64+4
 871 0048 D3F80230 	 ldr r3,[r3,#2]
 872 004c 7868     	 ldr r0,[r7,#4]
 873 004e 1946     	 mov r1,r3
 874 0050 FFF7FEFF 	 bl cmp32
 875 0054 0246     	 mov r2,r0
 876 0056 164B     	 ldr r3,.L64+8
 877 0058 9A42     	 cmp r2,r3
 878 005a 1CDC     	 bgt .L63
 254:../cleanflight/src/main/sensors/battery.c ****                 lowVoltageCutoff.percentage = 100 - (cmp32(currentTimeUs,lowVoltageCutoff.startTime
 879              	 .loc 4 254 0
 880 005c 134B     	 ldr r3,.L64+4
 881 005e D3F80230 	 ldr r3,[r3,#2]
 882 0062 7868     	 ldr r0,[r7,#4]
 883 0064 1946     	 mov r1,r3
 884 0066 FFF7FEFF 	 bl cmp32
 885 006a 0446     	 mov r4,r0
 886 006c FFF7FEFF 	 bl batteryConfig
 887 0070 0346     	 mov r3,r0
 888 0072 1B79     	 ldrb r3,[r3,#4]
 889 0074 C3F16403 	 rsb r3,r3,#100
 890 0078 03FB04F3 	 mul r3,r3,r4
 891 007c 0D4A     	 ldr r2,.L64+12
 892 007e 82FB0312 	 smull r1,r2,r2,r3
 893 0082 9215     	 asrs r2,r2,#22
 894 0084 DB17     	 asrs r3,r3,#31
 895 0086 D31A     	 subs r3,r2,r3
 896 0088 DBB2     	 uxtb r3,r3
 897 008a C3F16403 	 rsb r3,r3,#100
 898 008e DAB2     	 uxtb r2,r3
 899 0090 064B     	 ldr r3,.L64+4
 900 0092 5A70     	 strb r2,[r3,#1]
 901 0094 05E0     	 b .L60
 902              	.L63:
 255:../cleanflight/src/main/sensors/battery.c ****             }
 256:../cleanflight/src/main/sensors/battery.c ****             else {
 257:../cleanflight/src/main/sensors/battery.c ****                 lowVoltageCutoff.percentage = batteryConfig()->lvcPercentage;
 903              	 .loc 4 257 0
 904 0096 FFF7FEFF 	 bl batteryConfig
 905 009a 0346     	 mov r3,r0
 906 009c 1A79     	 ldrb r2,[r3,#4]
 907 009e 034B     	 ldr r3,.L64+4
 908 00a0 5A70     	 strb r2,[r3,#1]
 909              	.L60:
 258:../cleanflight/src/main/sensors/battery.c ****             }
 259:../cleanflight/src/main/sensors/battery.c ****         }
 260:../cleanflight/src/main/sensors/battery.c ****     }
 261:../cleanflight/src/main/sensors/battery.c **** 
 262:../cleanflight/src/main/sensors/battery.c **** }
 910              	 .loc 4 262 0
 911 00a2 0C37     	 adds r7,r7,#12
 912              	.LCFI39:
 913              	 .cfi_def_cfa_offset 12
 914 00a4 BD46     	 mov sp,r7
 915              	.LCFI40:
 916              	 .cfi_def_cfa_register 13
 917              	 
 918 00a6 90BD     	 pop {r4,r7,pc}
 919              	.L65:
 920              	 .align 2
 921              	.L64:
 922 00a8 00000000 	 .word voltageState
 923 00ac 00000000 	 .word lowVoltageCutoff
 924 00b0 7F969800 	 .word 9999999
 925 00b4 6BCA5F6B 	 .word 1801439851
 926              	 .cfi_endproc
 927              	.LFE554:
 929              	 .section .text.batteryUpdateStates,"ax",%progbits
 930              	 .align 2
 931              	 .global batteryUpdateStates
 932              	 .thumb
 933              	 .thumb_func
 935              	batteryUpdateStates:
 936              	.LFB555:
 263:../cleanflight/src/main/sensors/battery.c **** 
 264:../cleanflight/src/main/sensors/battery.c **** void batteryUpdateStates(timeUs_t currentTimeUs)
 265:../cleanflight/src/main/sensors/battery.c **** {
 937              	 .loc 4 265 0
 938              	 .cfi_startproc
 939              	 
 940              	 
 941 0000 80B5     	 push {r7,lr}
 942              	.LCFI41:
 943              	 .cfi_def_cfa_offset 8
 944              	 .cfi_offset 7,-8
 945              	 .cfi_offset 14,-4
 946 0002 84B0     	 sub sp,sp,#16
 947              	.LCFI42:
 948              	 .cfi_def_cfa_offset 24
 949 0004 00AF     	 add r7,sp,#0
 950              	.LCFI43:
 951              	 .cfi_def_cfa_register 7
 952 0006 7860     	 str r0,[r7,#4]
 266:../cleanflight/src/main/sensors/battery.c ****     batteryUpdateVoltageState();
 953              	 .loc 4 266 0
 954 0008 FFF7FEFF 	 bl batteryUpdateVoltageState
 267:../cleanflight/src/main/sensors/battery.c ****     batteryUpdateConsumptionState();
 955              	 .loc 4 267 0
 956 000c FFF7FEFF 	 bl batteryUpdateConsumptionState
 268:../cleanflight/src/main/sensors/battery.c ****     batteryUpdateLVC(currentTimeUs);
 957              	 .loc 4 268 0
 958 0010 7868     	 ldr r0,[r7,#4]
 959 0012 FFF7FEFF 	 bl batteryUpdateLVC
 960              	.LBB4:
 269:../cleanflight/src/main/sensors/battery.c ****     batteryState = MAX(voltageState, consumptionState);
 961              	 .loc 4 269 0
 962 0016 094B     	 ldr r3,.L67
 963 0018 1B78     	 ldrb r3,[r3]
 964 001a FB73     	 strb r3,[r7,#15]
 965 001c 084B     	 ldr r3,.L67+4
 966 001e 1B78     	 ldrb r3,[r3]
 967 0020 BB73     	 strb r3,[r7,#14]
 968 0022 BA7B     	 ldrb r2,[r7,#14]
 969 0024 FB7B     	 ldrb r3,[r7,#15]
 970 0026 9342     	 cmp r3,r2
 971 0028 38BF     	 it cc
 972 002a 1346     	 movcc r3,r2
 973 002c DBB2     	 uxtb r3,r3
 974              	.LBE4:
 975 002e DAB2     	 uxtb r2,r3
 976 0030 044B     	 ldr r3,.L67+8
 977 0032 1A70     	 strb r2,[r3]
 270:../cleanflight/src/main/sensors/battery.c **** }
 978              	 .loc 4 270 0
 979 0034 1037     	 adds r7,r7,#16
 980              	.LCFI44:
 981              	 .cfi_def_cfa_offset 8
 982 0036 BD46     	 mov sp,r7
 983              	.LCFI45:
 984              	 .cfi_def_cfa_register 13
 985              	 
 986 0038 80BD     	 pop {r7,pc}
 987              	.L68:
 988 003a 00BF     	 .align 2
 989              	.L67:
 990 003c 00000000 	 .word voltageState
 991 0040 00000000 	 .word consumptionState
 992 0044 00000000 	 .word batteryState
 993              	 .cfi_endproc
 994              	.LFE555:
 996              	 .section .text.getLowVoltageCutoff,"ax",%progbits
 997              	 .align 2
 998              	 .global getLowVoltageCutoff
 999              	 .thumb
 1000              	 .thumb_func
 1002              	getLowVoltageCutoff:
 1003              	.LFB556:
 271:../cleanflight/src/main/sensors/battery.c **** 
 272:../cleanflight/src/main/sensors/battery.c **** const lowVoltageCutoff_t *getLowVoltageCutoff(void)
 273:../cleanflight/src/main/sensors/battery.c **** {
 1004              	 .loc 4 273 0
 1005              	 .cfi_startproc
 1006              	 
 1007              	 
 1008              	 
 1009 0000 80B4     	 push {r7}
 1010              	.LCFI46:
 1011              	 .cfi_def_cfa_offset 4
 1012              	 .cfi_offset 7,-4
 1013 0002 00AF     	 add r7,sp,#0
 1014              	.LCFI47:
 1015              	 .cfi_def_cfa_register 7
 274:../cleanflight/src/main/sensors/battery.c ****     return &lowVoltageCutoff;
 1016              	 .loc 4 274 0
 1017 0004 024B     	 ldr r3,.L71
 275:../cleanflight/src/main/sensors/battery.c **** }
 1018              	 .loc 4 275 0
 1019 0006 1846     	 mov r0,r3
 1020 0008 BD46     	 mov sp,r7
 1021              	.LCFI48:
 1022              	 .cfi_def_cfa_register 13
 1023              	 
 1024 000a 5DF8047B 	 ldr r7,[sp],#4
 1025              	.LCFI49:
 1026              	 .cfi_restore 7
 1027              	 .cfi_def_cfa_offset 0
 1028 000e 7047     	 bx lr
 1029              	.L72:
 1030              	 .align 2
 1031              	.L71:
 1032 0010 00000000 	 .word lowVoltageCutoff
 1033              	 .cfi_endproc
 1034              	.LFE556:
 1036              	 .section .text.getBatteryState,"ax",%progbits
 1037              	 .align 2
 1038              	 .global getBatteryState
 1039              	 .thumb
 1040              	 .thumb_func
 1042              	getBatteryState:
 1043              	.LFB557:
 276:../cleanflight/src/main/sensors/battery.c **** 
 277:../cleanflight/src/main/sensors/battery.c **** batteryState_e getBatteryState(void)
 278:../cleanflight/src/main/sensors/battery.c **** {
 1044              	 .loc 4 278 0
 1045              	 .cfi_startproc
 1046              	 
 1047              	 
 1048              	 
 1049 0000 80B4     	 push {r7}
 1050              	.LCFI50:
 1051              	 .cfi_def_cfa_offset 4
 1052              	 .cfi_offset 7,-4
 1053 0002 00AF     	 add r7,sp,#0
 1054              	.LCFI51:
 1055              	 .cfi_def_cfa_register 7
 279:../cleanflight/src/main/sensors/battery.c ****     return batteryState;
 1056              	 .loc 4 279 0
 1057 0004 034B     	 ldr r3,.L75
 1058 0006 1B78     	 ldrb r3,[r3]
 280:../cleanflight/src/main/sensors/battery.c **** }
 1059              	 .loc 4 280 0
 1060 0008 1846     	 mov r0,r3
 1061 000a BD46     	 mov sp,r7
 1062              	.LCFI52:
 1063              	 .cfi_def_cfa_register 13
 1064              	 
 1065 000c 5DF8047B 	 ldr r7,[sp],#4
 1066              	.LCFI53:
 1067              	 .cfi_restore 7
 1068              	 .cfi_def_cfa_offset 0
 1069 0010 7047     	 bx lr
 1070              	.L76:
 1071 0012 00BF     	 .align 2
 1072              	.L75:
 1073 0014 00000000 	 .word batteryState
 1074              	 .cfi_endproc
 1075              	.LFE557:
 1077              	 .global batteryStateStrings
 1078              	 .section .rodata
 1079              	 .align 2
 1080              	.LC0:
 1081 0000 4F4B00   	 .ascii "OK\000"
 1082 0003 00       	 .align 2
 1083              	.LC1:
 1084 0004 5741524E 	 .ascii "WARNING\000"
 1084      494E4700 
 1085              	 .align 2
 1086              	.LC2:
 1087 000c 43524954 	 .ascii "CRITICAL\000"
 1087      4943414C 
 1087      00
 1088 0015 000000   	 .align 2
 1089              	.LC3:
 1090 0018 4E4F5420 	 .ascii "NOT PRESENT\000"
 1090      50524553 
 1090      454E5400 
 1091              	 .align 2
 1092              	.LC4:
 1093 0024 494E4954 	 .ascii "INIT\000"
 1093      00
 1094 0029 000000   	 .section .rodata.batteryStateStrings,"a",%progbits
 1095              	 .align 2
 1098              	batteryStateStrings:
 1099 0000 00000000 	 .word .LC0
 1100 0004 04000000 	 .word .LC1
 1101 0008 0C000000 	 .word .LC2
 1102 000c 18000000 	 .word .LC3
 1103 0010 24000000 	 .word .LC4
 1104              	 .section .text.getBatteryStateString,"ax",%progbits
 1105              	 .align 2
 1106              	 .global getBatteryStateString
 1107              	 .thumb
 1108              	 .thumb_func
 1110              	getBatteryStateString:
 1111              	.LFB558:
 281:../cleanflight/src/main/sensors/battery.c **** 
 282:../cleanflight/src/main/sensors/battery.c **** const char * const batteryStateStrings[] = {"OK", "WARNING", "CRITICAL", "NOT PRESENT", "INIT"};
 283:../cleanflight/src/main/sensors/battery.c **** 
 284:../cleanflight/src/main/sensors/battery.c **** const char * getBatteryStateString(void)
 285:../cleanflight/src/main/sensors/battery.c **** {
 1112              	 .loc 4 285 0
 1113              	 .cfi_startproc
 1114              	 
 1115              	 
 1116 0000 80B5     	 push {r7,lr}
 1117              	.LCFI54:
 1118              	 .cfi_def_cfa_offset 8
 1119              	 .cfi_offset 7,-8
 1120              	 .cfi_offset 14,-4
 1121 0002 00AF     	 add r7,sp,#0
 1122              	.LCFI55:
 1123              	 .cfi_def_cfa_register 7
 286:../cleanflight/src/main/sensors/battery.c ****     return batteryStateStrings[getBatteryState()];
 1124              	 .loc 4 286 0
 1125 0004 FFF7FEFF 	 bl getBatteryState
 1126 0008 0346     	 mov r3,r0
 1127 000a 1A46     	 mov r2,r3
 1128 000c 024B     	 ldr r3,.L79
 1129 000e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 287:../cleanflight/src/main/sensors/battery.c **** }
 1130              	 .loc 4 287 0
 1131 0012 1846     	 mov r0,r3
 1132 0014 80BD     	 pop {r7,pc}
 1133              	.L80:
 1134 0016 00BF     	 .align 2
 1135              	.L79:
 1136 0018 00000000 	 .word batteryStateStrings
 1137              	 .cfi_endproc
 1138              	.LFE558:
 1140              	 .section .text.batteryInit,"ax",%progbits
 1141              	 .align 2
 1142              	 .global batteryInit
 1143              	 .thumb
 1144              	 .thumb_func
 1146              	batteryInit:
 1147              	.LFB559:
 288:../cleanflight/src/main/sensors/battery.c **** 
 289:../cleanflight/src/main/sensors/battery.c **** void batteryInit(void)
 290:../cleanflight/src/main/sensors/battery.c **** {
 1148              	 .loc 4 290 0
 1149              	 .cfi_startproc
 1150              	 
 1151              	 
 1152 0000 80B5     	 push {r7,lr}
 1153              	.LCFI56:
 1154              	 .cfi_def_cfa_offset 8
 1155              	 .cfi_offset 7,-8
 1156              	 .cfi_offset 14,-4
 1157 0002 00AF     	 add r7,sp,#0
 1158              	.LCFI57:
 1159              	 .cfi_def_cfa_register 7
 291:../cleanflight/src/main/sensors/battery.c ****     //
 292:../cleanflight/src/main/sensors/battery.c ****     // presence
 293:../cleanflight/src/main/sensors/battery.c ****     //
 294:../cleanflight/src/main/sensors/battery.c ****     batteryState = BATTERY_INIT;
 1160              	 .loc 4 294 0
 1161 0004 244B     	 ldr r3,.L95
 1162 0006 0422     	 movs r2,#4
 1163 0008 1A70     	 strb r2,[r3]
 295:../cleanflight/src/main/sensors/battery.c ****     batteryCellCount = 0;
 1164              	 .loc 4 295 0
 1165 000a 244B     	 ldr r3,.L95+4
 1166 000c 0022     	 movs r2,#0
 1167 000e 1A70     	 strb r2,[r3]
 296:../cleanflight/src/main/sensors/battery.c **** 
 297:../cleanflight/src/main/sensors/battery.c ****     //
 298:../cleanflight/src/main/sensors/battery.c ****     // voltage
 299:../cleanflight/src/main/sensors/battery.c ****     //
 300:../cleanflight/src/main/sensors/battery.c ****     voltageState = BATTERY_INIT;
 1168              	 .loc 4 300 0
 1169 0010 234B     	 ldr r3,.L95+8
 1170 0012 0422     	 movs r2,#4
 1171 0014 1A70     	 strb r2,[r3]
 301:../cleanflight/src/main/sensors/battery.c ****     batteryWarningVoltage = 0;
 1172              	 .loc 4 301 0
 1173 0016 234B     	 ldr r3,.L95+12
 1174 0018 0022     	 movs r2,#0
 1175 001a 1A80     	 strh r2,[r3]
 302:../cleanflight/src/main/sensors/battery.c ****     batteryCriticalVoltage = 0;
 1176              	 .loc 4 302 0
 1177 001c 224B     	 ldr r3,.L95+16
 1178 001e 0022     	 movs r2,#0
 1179 0020 1A80     	 strh r2,[r3]
 303:../cleanflight/src/main/sensors/battery.c ****     lowVoltageCutoff.enabled = false;
 1180              	 .loc 4 303 0
 1181 0022 224B     	 ldr r3,.L95+20
 1182 0024 0022     	 movs r2,#0
 1183 0026 1A70     	 strb r2,[r3]
 304:../cleanflight/src/main/sensors/battery.c ****     lowVoltageCutoff.percentage = 100;
 1184              	 .loc 4 304 0
 1185 0028 204B     	 ldr r3,.L95+20
 1186 002a 6422     	 movs r2,#100
 1187 002c 5A70     	 strb r2,[r3,#1]
 305:../cleanflight/src/main/sensors/battery.c ****     lowVoltageCutoff.startTime = 0;
 1188              	 .loc 4 305 0
 1189 002e 1F4B     	 ldr r3,.L95+20
 1190 0030 0022     	 movs r2,#0
 1191 0032 5A80     	 strh r2,[r3,#2]
 1192 0034 0022     	 movs r2,#0
 1193 0036 9A80     	 strh r2,[r3,#4]
 306:../cleanflight/src/main/sensors/battery.c **** 
 307:../cleanflight/src/main/sensors/battery.c ****     voltageMeterReset(&voltageMeter);
 1194              	 .loc 4 307 0
 1195 0038 1D48     	 ldr r0,.L95+24
 1196 003a FFF7FEFF 	 bl voltageMeterReset
 308:../cleanflight/src/main/sensors/battery.c ****     switch (batteryConfig()->voltageMeterSource) {
 1197              	 .loc 4 308 0
 1198 003e FFF7FEFF 	 bl batteryConfig
 1199 0042 0346     	 mov r3,r0
 1200 0044 5B79     	 ldrb r3,[r3,#5]
 1201 0046 012B     	 cmp r3,#1
 1202 0048 02D0     	 beq .L83
 1203 004a 022B     	 cmp r3,#2
 1204 004c 03D0     	 beq .L93
 309:../cleanflight/src/main/sensors/battery.c ****         case VOLTAGE_METER_ESC:
 310:../cleanflight/src/main/sensors/battery.c **** #ifdef USE_ESC_SENSOR
 311:../cleanflight/src/main/sensors/battery.c ****             voltageMeterESCInit();
 312:../cleanflight/src/main/sensors/battery.c **** #endif
 313:../cleanflight/src/main/sensors/battery.c ****             break;
 314:../cleanflight/src/main/sensors/battery.c **** 
 315:../cleanflight/src/main/sensors/battery.c ****         case VOLTAGE_METER_ADC:
 316:../cleanflight/src/main/sensors/battery.c ****             voltageMeterADCInit();
 317:../cleanflight/src/main/sensors/battery.c ****             break;
 318:../cleanflight/src/main/sensors/battery.c **** 
 319:../cleanflight/src/main/sensors/battery.c ****         default:
 320:../cleanflight/src/main/sensors/battery.c ****             break;
 1205              	 .loc 4 320 0
 1206 004e 03E0     	 b .L85
 1207              	.L83:
 316:../cleanflight/src/main/sensors/battery.c ****             break;
 1208              	 .loc 4 316 0
 1209 0050 FFF7FEFF 	 bl voltageMeterADCInit
 317:../cleanflight/src/main/sensors/battery.c **** 
 1210              	 .loc 4 317 0
 1211 0054 00E0     	 b .L85
 1212              	.L93:
 313:../cleanflight/src/main/sensors/battery.c **** 
 1213              	 .loc 4 313 0
 1214 0056 00BF     	 nop
 1215              	.L85:
 321:../cleanflight/src/main/sensors/battery.c ****     }
 322:../cleanflight/src/main/sensors/battery.c **** 
 323:../cleanflight/src/main/sensors/battery.c ****     //
 324:../cleanflight/src/main/sensors/battery.c ****     // current
 325:../cleanflight/src/main/sensors/battery.c ****     //
 326:../cleanflight/src/main/sensors/battery.c ****     consumptionState = BATTERY_OK;
 1216              	 .loc 4 326 0
 1217 0058 164B     	 ldr r3,.L95+28
 1218 005a 0022     	 movs r2,#0
 1219 005c 1A70     	 strb r2,[r3]
 327:../cleanflight/src/main/sensors/battery.c ****     currentMeterReset(&currentMeter);
 1220              	 .loc 4 327 0
 1221 005e 1648     	 ldr r0,.L95+32
 1222 0060 FFF7FEFF 	 bl currentMeterReset
 328:../cleanflight/src/main/sensors/battery.c ****     switch (batteryConfig()->currentMeterSource) {
 1223              	 .loc 4 328 0
 1224 0064 FFF7FEFF 	 bl batteryConfig
 1225 0068 0346     	 mov r3,r0
 1226 006a 9B79     	 ldrb r3,[r3,#6]
 1227 006c 013B     	 subs r3,r3,#1
 1228 006e 032B     	 cmp r3,#3
 1229 0070 10D8     	 bhi .L94
 1230 0072 01A2     	 adr r2,.L88
 1231 0074 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1232              	 .p2align 2
 1233              	.L88:
 1234 0078 89000000 	 .word .L87+1
 1235 007c 8F000000 	 .word .L89+1
 1236 0080 95000000 	 .word .L94+1
 1237 0084 95000000 	 .word .L94+1
 1238              	 .p2align 1
 1239              	.L87:
 329:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_ADC:
 330:../cleanflight/src/main/sensors/battery.c ****             currentMeterADCInit();
 1240              	 .loc 4 330 0
 1241 0088 FFF7FEFF 	 bl currentMeterADCInit
 331:../cleanflight/src/main/sensors/battery.c ****             break;
 1242              	 .loc 4 331 0
 1243 008c 03E0     	 b .L81
 1244              	.L89:
 332:../cleanflight/src/main/sensors/battery.c **** 
 333:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_VIRTUAL:
 334:../cleanflight/src/main/sensors/battery.c **** #ifdef USE_VIRTUAL_CURRENT_METER
 335:../cleanflight/src/main/sensors/battery.c ****             currentMeterVirtualInit();
 1245              	 .loc 4 335 0
 1246 008e FFF7FEFF 	 bl currentMeterVirtualInit
 336:../cleanflight/src/main/sensors/battery.c **** #endif
 337:../cleanflight/src/main/sensors/battery.c ****             break;
 1247              	 .loc 4 337 0
 1248 0092 00E0     	 b .L81
 1249              	.L94:
 338:../cleanflight/src/main/sensors/battery.c **** 
 339:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_ESC:
 340:../cleanflight/src/main/sensors/battery.c **** #ifdef ESC_SENSOR
 341:../cleanflight/src/main/sensors/battery.c ****             currentMeterESCInit();
 342:../cleanflight/src/main/sensors/battery.c **** #endif
 343:../cleanflight/src/main/sensors/battery.c ****             break;
 344:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_MSP:
 345:../cleanflight/src/main/sensors/battery.c **** #ifdef USE_MSP_CURRENT_METER
 346:../cleanflight/src/main/sensors/battery.c ****             currentMeterMSPInit();
 347:../cleanflight/src/main/sensors/battery.c **** #endif
 348:../cleanflight/src/main/sensors/battery.c ****             break;
 349:../cleanflight/src/main/sensors/battery.c **** 
 350:../cleanflight/src/main/sensors/battery.c ****         default:
 351:../cleanflight/src/main/sensors/battery.c ****             break;
 1250              	 .loc 4 351 0
 1251 0094 00BF     	 nop
 1252              	.L81:
 352:../cleanflight/src/main/sensors/battery.c ****     }
 353:../cleanflight/src/main/sensors/battery.c **** 
 354:../cleanflight/src/main/sensors/battery.c **** }
 1253              	 .loc 4 354 0
 1254 0096 80BD     	 pop {r7,pc}
 1255              	.L96:
 1256              	 .align 2
 1257              	.L95:
 1258 0098 00000000 	 .word batteryState
 1259 009c 00000000 	 .word batteryCellCount
 1260 00a0 00000000 	 .word voltageState
 1261 00a4 00000000 	 .word batteryWarningVoltage
 1262 00a8 00000000 	 .word batteryCriticalVoltage
 1263 00ac 00000000 	 .word lowVoltageCutoff
 1264 00b0 00000000 	 .word voltageMeter
 1265 00b4 00000000 	 .word consumptionState
 1266 00b8 00000000 	 .word currentMeter
 1267              	 .cfi_endproc
 1268              	.LFE559:
 1270              	 .section .text.batteryUpdateConsumptionState,"ax",%progbits
 1271              	 .align 2
 1272              	 .thumb
 1273              	 .thumb_func
 1275              	batteryUpdateConsumptionState:
 1276              	.LFB560:
 355:../cleanflight/src/main/sensors/battery.c **** 
 356:../cleanflight/src/main/sensors/battery.c **** static void batteryUpdateConsumptionState(void)
 357:../cleanflight/src/main/sensors/battery.c **** {
 1277              	 .loc 4 357 0
 1278              	 .cfi_startproc
 1279              	 
 1280              	 
 1281 0000 80B5     	 push {r7,lr}
 1282              	.LCFI58:
 1283              	 .cfi_def_cfa_offset 8
 1284              	 .cfi_offset 7,-8
 1285              	 .cfi_offset 14,-4
 1286 0002 82B0     	 sub sp,sp,#8
 1287              	.LCFI59:
 1288              	 .cfi_def_cfa_offset 16
 1289 0004 00AF     	 add r7,sp,#0
 1290              	.LCFI60:
 1291              	 .cfi_def_cfa_register 7
 358:../cleanflight/src/main/sensors/battery.c ****     if (batteryConfig()->useConsumptionAlerts && batteryConfig()->batteryCapacity > 0 && batteryCel
 1292              	 .loc 4 358 0
 1293 0006 FFF7FEFF 	 bl batteryConfig
 1294 000a 0346     	 mov r3,r0
 1295 000c 9B7A     	 ldrb r3,[r3,#10]
 1296 000e 002B     	 cmp r3,#0
 1297 0010 24D0     	 beq .L97
 1298              	 .loc 4 358 0 is_stmt 0 discriminator 1
 1299 0012 FFF7FEFF 	 bl batteryConfig
 1300 0016 0346     	 mov r3,r0
 1301 0018 B3F80730 	 ldrh r3,[r3,#7]
 1302 001c 9BB2     	 uxth r3,r3
 1303 001e 002B     	 cmp r3,#0
 1304 0020 1CD0     	 beq .L97
 1305              	 .loc 4 358 0 discriminator 2
 1306 0022 104B     	 ldr r3,.L101
 1307 0024 1B78     	 ldrb r3,[r3]
 1308 0026 002B     	 cmp r3,#0
 1309 0028 18D0     	 beq .L97
 1310              	.LBB5:
 359:../cleanflight/src/main/sensors/battery.c ****         uint8_t batteryPercentageRemaining = calculateBatteryPercentageRemaining();
 1311              	 .loc 4 359 0 is_stmt 1
 1312 002a FFF7FEFF 	 bl calculateBatteryPercentageRemaining
 1313 002e 0346     	 mov r3,r0
 1314 0030 FB71     	 strb r3,[r7,#7]
 360:../cleanflight/src/main/sensors/battery.c **** 
 361:../cleanflight/src/main/sensors/battery.c ****         if (batteryPercentageRemaining == 0) {
 1315              	 .loc 4 361 0
 1316 0032 FB79     	 ldrb r3,[r7,#7]
 1317 0034 002B     	 cmp r3,#0
 1318 0036 03D1     	 bne .L99
 362:../cleanflight/src/main/sensors/battery.c ****             consumptionState = BATTERY_CRITICAL;
 1319              	 .loc 4 362 0
 1320 0038 0B4B     	 ldr r3,.L101+4
 1321 003a 0222     	 movs r2,#2
 1322 003c 1A70     	 strb r2,[r3]
 1323 003e 0DE0     	 b .L97
 1324              	.L99:
 363:../cleanflight/src/main/sensors/battery.c ****         } else if (batteryPercentageRemaining <= batteryConfig()->consumptionWarningPercentage) {
 1325              	 .loc 4 363 0
 1326 0040 FFF7FEFF 	 bl batteryConfig
 1327 0044 0346     	 mov r3,r0
 1328 0046 DB7A     	 ldrb r3,[r3,#11]
 1329 0048 FA79     	 ldrb r2,[r7,#7]
 1330 004a 9A42     	 cmp r2,r3
 1331 004c 03D8     	 bhi .L100
 364:../cleanflight/src/main/sensors/battery.c ****             consumptionState = BATTERY_WARNING;
 1332              	 .loc 4 364 0
 1333 004e 064B     	 ldr r3,.L101+4
 1334 0050 0122     	 movs r2,#1
 1335 0052 1A70     	 strb r2,[r3]
 1336 0054 02E0     	 b .L97
 1337              	.L100:
 365:../cleanflight/src/main/sensors/battery.c ****         } else {
 366:../cleanflight/src/main/sensors/battery.c ****             consumptionState = BATTERY_OK;
 1338              	 .loc 4 366 0
 1339 0056 044B     	 ldr r3,.L101+4
 1340 0058 0022     	 movs r2,#0
 1341 005a 1A70     	 strb r2,[r3]
 1342              	.L97:
 1343              	.LBE5:
 367:../cleanflight/src/main/sensors/battery.c ****         }
 368:../cleanflight/src/main/sensors/battery.c ****     }
 369:../cleanflight/src/main/sensors/battery.c **** }
 1344              	 .loc 4 369 0
 1345 005c 0837     	 adds r7,r7,#8
 1346              	.LCFI61:
 1347              	 .cfi_def_cfa_offset 8
 1348 005e BD46     	 mov sp,r7
 1349              	.LCFI62:
 1350              	 .cfi_def_cfa_register 13
 1351              	 
 1352 0060 80BD     	 pop {r7,pc}
 1353              	.L102:
 1354 0062 00BF     	 .align 2
 1355              	.L101:
 1356 0064 00000000 	 .word batteryCellCount
 1357 0068 00000000 	 .word consumptionState
 1358              	 .cfi_endproc
 1359              	.LFE560:
 1361              	 .section .text.batteryUpdateCurrentMeter,"ax",%progbits
 1362              	 .align 2
 1363              	 .global batteryUpdateCurrentMeter
 1364              	 .thumb
 1365              	 .thumb_func
 1367              	batteryUpdateCurrentMeter:
 1368              	.LFB561:
 370:../cleanflight/src/main/sensors/battery.c **** 
 371:../cleanflight/src/main/sensors/battery.c **** void batteryUpdateCurrentMeter(timeUs_t currentTimeUs)
 372:../cleanflight/src/main/sensors/battery.c **** {
 1369              	 .loc 4 372 0
 1370              	 .cfi_startproc
 1371              	 
 1372              	 
 1373 0000 80B5     	 push {r7,lr}
 1374              	.LCFI63:
 1375              	 .cfi_def_cfa_offset 8
 1376              	 .cfi_offset 7,-8
 1377              	 .cfi_offset 14,-4
 1378 0002 86B0     	 sub sp,sp,#24
 1379              	.LCFI64:
 1380              	 .cfi_def_cfa_offset 32
 1381 0004 00AF     	 add r7,sp,#0
 1382              	.LCFI65:
 1383              	 .cfi_def_cfa_register 7
 1384 0006 7860     	 str r0,[r7,#4]
 373:../cleanflight/src/main/sensors/battery.c ****     UNUSED(currentTimeUs);
 374:../cleanflight/src/main/sensors/battery.c ****     if (batteryCellCount == 0) {
 1385              	 .loc 4 374 0
 1386 0008 334B     	 ldr r3,.L115
 1387 000a 1B78     	 ldrb r3,[r3]
 1388 000c 002B     	 cmp r3,#0
 1389 000e 03D1     	 bne .L104
 375:../cleanflight/src/main/sensors/battery.c ****         currentMeterReset(&currentMeter);
 1390              	 .loc 4 375 0
 1391 0010 3248     	 ldr r0,.L115+4
 1392 0012 FFF7FEFF 	 bl currentMeterReset
 376:../cleanflight/src/main/sensors/battery.c ****         return;
 1393              	 .loc 4 376 0
 1394 0016 5BE0     	 b .L103
 1395              	.L104:
 377:../cleanflight/src/main/sensors/battery.c ****     }
 378:../cleanflight/src/main/sensors/battery.c **** 
 379:../cleanflight/src/main/sensors/battery.c ****     static uint32_t ibatLastServiced = 0;
 380:../cleanflight/src/main/sensors/battery.c ****     const int32_t lastUpdateAt = cmp32(currentTimeUs, ibatLastServiced);
 1396              	 .loc 4 380 0
 1397 0018 314B     	 ldr r3,.L115+8
 1398 001a 1B68     	 ldr r3,[r3]
 1399 001c 7868     	 ldr r0,[r7,#4]
 1400 001e 1946     	 mov r1,r3
 1401 0020 FFF7FEFF 	 bl cmp32
 1402 0024 7861     	 str r0,[r7,#20]
 381:../cleanflight/src/main/sensors/battery.c ****     ibatLastServiced = currentTimeUs;
 1403              	 .loc 4 381 0
 1404 0026 2E4A     	 ldr r2,.L115+8
 1405 0028 7B68     	 ldr r3,[r7,#4]
 1406 002a 1360     	 str r3,[r2]
 382:../cleanflight/src/main/sensors/battery.c **** 
 383:../cleanflight/src/main/sensors/battery.c ****     switch (batteryConfig()->currentMeterSource) {
 1407              	 .loc 4 383 0
 1408 002c FFF7FEFF 	 bl batteryConfig
 1409 0030 0346     	 mov r3,r0
 1410 0032 9B79     	 ldrb r3,[r3,#6]
 1411 0034 013B     	 subs r3,r3,#1
 1412 0036 032B     	 cmp r3,#3
 1413 0038 44D8     	 bhi .L106
 1414 003a 01A2     	 adr r2,.L108
 1415 003c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1416              	 .p2align 2
 1417              	.L108:
 1418 0040 51000000 	 .word .L107+1
 1419 0044 5F000000 	 .word .L109+1
 1420 0048 CF000000 	 .word .L114+1
 1421 004c CF000000 	 .word .L114+1
 1422              	 .p2align 1
 1423              	.L107:
 384:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_ADC:
 385:../cleanflight/src/main/sensors/battery.c ****             currentMeterADCRefresh(lastUpdateAt);
 1424              	 .loc 4 385 0
 1425 0050 7869     	 ldr r0,[r7,#20]
 1426 0052 FFF7FEFF 	 bl currentMeterADCRefresh
 386:../cleanflight/src/main/sensors/battery.c ****             currentMeterADCRead(&currentMeter);
 1427              	 .loc 4 386 0
 1428 0056 2148     	 ldr r0,.L115+4
 1429 0058 FFF7FEFF 	 bl currentMeterADCRead
 387:../cleanflight/src/main/sensors/battery.c ****             break;
 1430              	 .loc 4 387 0
 1431 005c 38E0     	 b .L103
 1432              	.L109:
 1433              	.LBB6:
 388:../cleanflight/src/main/sensors/battery.c **** 
 389:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_VIRTUAL: {
 390:../cleanflight/src/main/sensors/battery.c **** #ifdef USE_VIRTUAL_CURRENT_METER
 391:../cleanflight/src/main/sensors/battery.c ****             throttleStatus_e throttleStatus = calculateThrottleStatus();
 1434              	 .loc 4 391 0
 1435 005e FFF7FEFF 	 bl calculateThrottleStatus
 1436 0062 0346     	 mov r3,r0
 1437 0064 FB74     	 strb r3,[r7,#19]
 392:../cleanflight/src/main/sensors/battery.c ****             bool throttleLowAndMotorStop = (throttleStatus == THROTTLE_LOW && feature(FEATURE_MOTOR
 1438              	 .loc 4 392 0
 1439 0066 FB7C     	 ldrb r3,[r7,#19]
 1440 0068 002B     	 cmp r3,#0
 1441 006a 07D1     	 bne .L112
 1442              	 .loc 4 392 0 is_stmt 0 discriminator 1
 1443 006c 1020     	 movs r0,#16
 1444 006e FFF7FEFF 	 bl feature
 1445 0072 0346     	 mov r3,r0
 1446 0074 002B     	 cmp r3,#0
 1447 0076 01D0     	 beq .L112
 1448              	 .loc 4 392 0 discriminator 3
 1449 0078 0123     	 movs r3,#1
 1450 007a 00E0     	 b .L113
 1451              	.L112:
 1452              	 .loc 4 392 0 discriminator 4
 1453 007c 0023     	 movs r3,#0
 1454              	.L113:
 1455              	 .loc 4 392 0 discriminator 6
 1456 007e BB74     	 strb r3,[r7,#18]
 1457 0080 BB7C     	 ldrb r3,[r7,#18]
 1458 0082 03F00103 	 and r3,r3,#1
 1459 0086 BB74     	 strb r3,[r7,#18]
 393:../cleanflight/src/main/sensors/battery.c ****             int32_t throttleOffset = (int32_t)rcCommand[THROTTLE] - 1000;
 1460              	 .loc 4 393 0 is_stmt 1 discriminator 6
 1461 0088 164B     	 ldr r3,.L115+12
 1462 008a D3ED037A 	 flds s15,[r3,#12]
 1463 008e FDEEE77A 	 ftosizs s15,s15
 1464 0092 17EE903A 	 fmrs r3,s15
 1465 0096 A3F57A73 	 sub r3,r3,#1000
 1466 009a FB60     	 str r3,[r7,#12]
 394:../cleanflight/src/main/sensors/battery.c **** 
 395:../cleanflight/src/main/sensors/battery.c ****             currentMeterVirtualRefresh(lastUpdateAt, ARMING_FLAG(ARMED), throttleLowAndMotorStop, t
 1467              	 .loc 4 395 0 discriminator 6
 1468 009c 124B     	 ldr r3,.L115+16
 1469 009e 1B78     	 ldrb r3,[r3]
 1470 00a0 03F00103 	 and r3,r3,#1
 1471 00a4 002B     	 cmp r3,#0
 1472 00a6 14BF     	 ite ne
 1473 00a8 0123     	 movne r3,#1
 1474 00aa 0023     	 moveq r3,#0
 1475 00ac DAB2     	 uxtb r2,r3
 1476 00ae BB7C     	 ldrb r3,[r7,#18]
 1477 00b0 7869     	 ldr r0,[r7,#20]
 1478 00b2 1146     	 mov r1,r2
 1479 00b4 1A46     	 mov r2,r3
 1480 00b6 FB68     	 ldr r3,[r7,#12]
 1481 00b8 FFF7FEFF 	 bl currentMeterVirtualRefresh
 396:../cleanflight/src/main/sensors/battery.c ****             currentMeterVirtualRead(&currentMeter);
 1482              	 .loc 4 396 0 discriminator 6
 1483 00bc 0748     	 ldr r0,.L115+4
 1484 00be FFF7FEFF 	 bl currentMeterVirtualRead
 397:../cleanflight/src/main/sensors/battery.c **** #endif
 398:../cleanflight/src/main/sensors/battery.c ****             break;
 1485              	 .loc 4 398 0 discriminator 6
 1486 00c2 05E0     	 b .L103
 1487              	.L106:
 1488              	.LBE6:
 399:../cleanflight/src/main/sensors/battery.c ****         }
 400:../cleanflight/src/main/sensors/battery.c **** 
 401:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_ESC:
 402:../cleanflight/src/main/sensors/battery.c **** #ifdef USE_ESC_SENSOR
 403:../cleanflight/src/main/sensors/battery.c ****             if (feature(FEATURE_ESC_SENSOR)) {
 404:../cleanflight/src/main/sensors/battery.c ****                 currentMeterESCRefresh(lastUpdateAt);
 405:../cleanflight/src/main/sensors/battery.c ****                 currentMeterESCReadCombined(&currentMeter);
 406:../cleanflight/src/main/sensors/battery.c ****             }
 407:../cleanflight/src/main/sensors/battery.c **** #endif
 408:../cleanflight/src/main/sensors/battery.c ****             break;
 409:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_MSP:
 410:../cleanflight/src/main/sensors/battery.c **** #ifdef USE_MSP_CURRENT_METER
 411:../cleanflight/src/main/sensors/battery.c ****             currentMeterMSPRefresh(currentTimeUs);
 412:../cleanflight/src/main/sensors/battery.c ****             currentMeterMSPRead(&currentMeter);
 413:../cleanflight/src/main/sensors/battery.c **** #endif
 414:../cleanflight/src/main/sensors/battery.c ****             break;
 415:../cleanflight/src/main/sensors/battery.c **** 
 416:../cleanflight/src/main/sensors/battery.c ****         default:
 417:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_NONE:
 418:../cleanflight/src/main/sensors/battery.c ****             currentMeterReset(&currentMeter);
 1489              	 .loc 4 418 0
 1490 00c4 0548     	 ldr r0,.L115+4
 1491 00c6 FFF7FEFF 	 bl currentMeterReset
 419:../cleanflight/src/main/sensors/battery.c ****             break;
 1492              	 .loc 4 419 0
 1493 00ca 00BF     	 nop
 1494 00cc 00E0     	 b .L103
 1495              	.L114:
 408:../cleanflight/src/main/sensors/battery.c ****         case CURRENT_METER_MSP:
 1496              	 .loc 4 408 0
 1497 00ce 00BF     	 nop
 1498              	.L103:
 420:../cleanflight/src/main/sensors/battery.c ****     }
 421:../cleanflight/src/main/sensors/battery.c **** }
 1499              	 .loc 4 421 0
 1500 00d0 1837     	 adds r7,r7,#24
 1501              	.LCFI66:
 1502              	 .cfi_def_cfa_offset 8
 1503 00d2 BD46     	 mov sp,r7
 1504              	.LCFI67:
 1505              	 .cfi_def_cfa_register 13
 1506              	 
 1507 00d4 80BD     	 pop {r7,pc}
 1508              	.L116:
 1509 00d6 00BF     	 .align 2
 1510              	.L115:
 1511 00d8 00000000 	 .word batteryCellCount
 1512 00dc 00000000 	 .word currentMeter
 1513 00e0 00000000 	 .word ibatLastServiced.12635
 1514 00e4 00000000 	 .word rcCommand
 1515 00e8 00000000 	 .word armingFlags
 1516              	 .cfi_endproc
 1517              	.LFE561:
 1519              	 .section .text.calculateVbatPidCompensation,"ax",%progbits
 1520              	 .align 2
 1521              	 .global calculateVbatPidCompensation
 1522              	 .thumb
 1523              	 .thumb_func
 1525              	calculateVbatPidCompensation:
 1526              	.LFB562:
 422:../cleanflight/src/main/sensors/battery.c **** 
 423:../cleanflight/src/main/sensors/battery.c **** float calculateVbatPidCompensation(void) {
 1527              	 .loc 4 423 0
 1528              	 .cfi_startproc
 1529              	 
 1530              	 
 1531 0000 80B5     	 push {r7,lr}
 1532              	.LCFI68:
 1533              	 .cfi_def_cfa_offset 8
 1534              	 .cfi_offset 7,-8
 1535              	 .cfi_offset 14,-4
 1536 0002 82B0     	 sub sp,sp,#8
 1537              	.LCFI69:
 1538              	 .cfi_def_cfa_offset 16
 1539 0004 00AF     	 add r7,sp,#0
 1540              	.LCFI70:
 1541              	 .cfi_def_cfa_register 7
 424:../cleanflight/src/main/sensors/battery.c ****     float batteryScaler =  1.0f;
 1542              	 .loc 4 424 0
 1543 0006 4FF07E53 	 mov r3,#1065353216
 1544 000a 7B60     	 str r3,[r7,#4]
 425:../cleanflight/src/main/sensors/battery.c ****     if (batteryConfig()->voltageMeterSource != VOLTAGE_METER_NONE && batteryCellCount > 0) {
 1545              	 .loc 4 425 0
 1546 000c FFF7FEFF 	 bl batteryConfig
 1547 0010 0346     	 mov r3,r0
 1548 0012 5B79     	 ldrb r3,[r3,#5]
 1549 0014 002B     	 cmp r3,#0
 1550 0016 25D0     	 beq .L118
 1551              	 .loc 4 425 0 is_stmt 0 discriminator 1
 1552 0018 154B     	 ldr r3,.L120
 1553 001a 1B78     	 ldrb r3,[r3]
 1554 001c 002B     	 cmp r3,#0
 1555 001e 21D0     	 beq .L118
 426:../cleanflight/src/main/sensors/battery.c ****         // Up to 33% PID gain. Should be fine for 4,2to 3,3 difference
 427:../cleanflight/src/main/sensors/battery.c ****         batteryScaler =  constrainf((( (float)batteryConfig()->vbatmaxcellvoltage * batteryCellCoun
 1556              	 .loc 4 427 0 is_stmt 1
 1557 0020 FFF7FEFF 	 bl batteryConfig
 1558 0024 0346     	 mov r3,r0
 1559 0026 1B78     	 ldrb r3,[r3]
 1560 0028 07EE903A 	 fmsr s15,r3
 1561 002c B8EE677A 	 fuitos s14,s15
 1562 0030 0F4B     	 ldr r3,.L120
 1563 0032 1B78     	 ldrb r3,[r3]
 1564 0034 07EE903A 	 fmsr s15,r3
 1565 0038 F8EEE77A 	 fsitos s15,s15
 1566 003c 27EE277A 	 fmuls s14,s14,s15
 1567 0040 0C4B     	 ldr r3,.L120+4
 1568 0042 1B88     	 ldrh r3,[r3]
 1569 0044 07EE903A 	 fmsr s15,r3
 1570 0048 F8EE677A 	 fuitos s15,s15
 1571 004c C7EE277A 	 fdivs s15,s14,s15
 1572 0050 B0EE670A 	 fcpys s0,s15
 1573 0054 F7EE000A 	 fconsts s1,#112
 1574 0058 9FED071A 	 flds s2,.L120+8
 1575 005c FFF7FEFF 	 bl constrainf
 1576 0060 87ED010A 	 fsts s0,[r7,#4]
 1577              	.L118:
 428:../cleanflight/src/main/sensors/battery.c ****     }
 429:../cleanflight/src/main/sensors/battery.c ****     return batteryScaler;
 1578              	 .loc 4 429 0
 1579 0064 7B68     	 ldr r3,[r7,#4]
 430:../cleanflight/src/main/sensors/battery.c **** }
 1580              	 .loc 4 430 0
 1581 0066 1846     	 mov r0,r3
 1582 0068 0837     	 adds r7,r7,#8
 1583              	.LCFI71:
 1584              	 .cfi_def_cfa_offset 8
 1585 006a BD46     	 mov sp,r7
 1586              	.LCFI72:
 1587              	 .cfi_def_cfa_register 13
 1588              	 
 1589 006c 80BD     	 pop {r7,pc}
 1590              	.L121:
 1591 006e 00BF     	 .align 2
 1592              	.L120:
 1593 0070 00000000 	 .word batteryCellCount
 1594 0074 00000000 	 .word voltageMeter
 1595 0078 713DAA3F 	 .word 1068121457
 1596              	 .cfi_endproc
 1597              	.LFE562:
 1599              	 .section .text.calculateBatteryPercentageRemaining,"ax",%progbits
 1600              	 .align 2
 1601              	 .global calculateBatteryPercentageRemaining
 1602              	 .thumb
 1603              	 .thumb_func
 1605              	calculateBatteryPercentageRemaining:
 1606              	.LFB563:
 431:../cleanflight/src/main/sensors/battery.c **** 
 432:../cleanflight/src/main/sensors/battery.c **** uint8_t calculateBatteryPercentageRemaining(void)
 433:../cleanflight/src/main/sensors/battery.c **** {
 1607              	 .loc 4 433 0
 1608              	 .cfi_startproc
 1609              	 
 1610              	 
 1611 0000 B0B5     	 push {r4,r5,r7,lr}
 1612              	.LCFI73:
 1613              	 .cfi_def_cfa_offset 16
 1614              	 .cfi_offset 4,-16
 1615              	 .cfi_offset 5,-12
 1616              	 .cfi_offset 7,-8
 1617              	 .cfi_offset 14,-4
 1618 0002 82B0     	 sub sp,sp,#8
 1619              	.LCFI74:
 1620              	 .cfi_def_cfa_offset 24
 1621 0004 00AF     	 add r7,sp,#0
 1622              	.LCFI75:
 1623              	 .cfi_def_cfa_register 7
 434:../cleanflight/src/main/sensors/battery.c ****     uint8_t batteryPercentage = 0;
 1624              	 .loc 4 434 0
 1625 0006 0023     	 movs r3,#0
 1626 0008 FB71     	 strb r3,[r7,#7]
 435:../cleanflight/src/main/sensors/battery.c ****     if (batteryCellCount > 0) {
 1627              	 .loc 4 435 0
 1628 000a 2F4B     	 ldr r3,.L126
 1629 000c 1B78     	 ldrb r3,[r3]
 1630 000e 002B     	 cmp r3,#0
 1631 0010 54D0     	 beq .L123
 1632              	.LBB7:
 436:../cleanflight/src/main/sensors/battery.c ****         uint16_t batteryCapacity = batteryConfig()->batteryCapacity;
 1633              	 .loc 4 436 0
 1634 0012 FFF7FEFF 	 bl batteryConfig
 1635 0016 0346     	 mov r3,r0
 1636 0018 DA79     	 ldrb r2,[r3,#7]
 1637 001a 1B7A     	 ldrb r3,[r3,#8]
 1638 001c 1B02     	 lsls r3,r3,#8
 1639 001e 1343     	 orrs r3,r3,r2
 1640 0020 BB80     	 strh r3,[r7,#4]
 437:../cleanflight/src/main/sensors/battery.c **** 
 438:../cleanflight/src/main/sensors/battery.c ****         if (batteryCapacity > 0) {
 1641              	 .loc 4 438 0
 1642 0022 BB88     	 ldrh r3,[r7,#4]
 1643 0024 002B     	 cmp r3,#0
 1644 0026 22D0     	 beq .L124
 439:../cleanflight/src/main/sensors/battery.c ****             batteryPercentage = constrain(((float)batteryCapacity - currentMeter.mAhDrawn) * 100 / 
 1645              	 .loc 4 439 0
 1646 0028 BB88     	 ldrh r3,[r7,#4]
 1647 002a 07EE903A 	 fmsr s15,r3
 1648 002e B8EE677A 	 fuitos s14,s15
 1649 0032 264B     	 ldr r3,.L126+4
 1650 0034 9B68     	 ldr r3,[r3,#8]
 1651 0036 07EE903A 	 fmsr s15,r3
 1652 003a F8EEE77A 	 fsitos s15,s15
 1653 003e 77EE677A 	 fsubs s15,s14,s15
 1654 0042 9FED237A 	 flds s14,.L126+8
 1655 0046 27EE877A 	 fmuls s14,s15,s14
 1656 004a BB88     	 ldrh r3,[r7,#4]
 1657 004c 07EE903A 	 fmsr s15,r3
 1658 0050 F8EEE77A 	 fsitos s15,s15
 1659 0054 C7EE277A 	 fdivs s15,s14,s15
 1660 0058 FDEEE77A 	 ftosizs s15,s15
 1661 005c 17EE900A 	 fmrs r0,s15
 1662 0060 0021     	 movs r1,#0
 1663 0062 6422     	 movs r2,#100
 1664 0064 FFF7FEFF 	 bl constrain
 1665 0068 0346     	 mov r3,r0
 1666 006a FB71     	 strb r3,[r7,#7]
 1667 006c 26E0     	 b .L123
 1668              	.L124:
 440:../cleanflight/src/main/sensors/battery.c ****         } else {
 441:../cleanflight/src/main/sensors/battery.c ****             batteryPercentage = constrain((((uint32_t)voltageMeter.filtered - (batteryConfig()->vba
 1669              	 .loc 4 441 0
 1670 006e 194B     	 ldr r3,.L126+12
 1671 0070 1B88     	 ldrh r3,[r3]
 1672 0072 1C46     	 mov r4,r3
 1673 0074 FFF7FEFF 	 bl batteryConfig
 1674 0078 0346     	 mov r3,r0
 1675 007a 5B78     	 ldrb r3,[r3,#1]
 1676 007c 1A46     	 mov r2,r3
 1677 007e 124B     	 ldr r3,.L126
 1678 0080 1B78     	 ldrb r3,[r3]
 1679 0082 03FB02F3 	 mul r3,r3,r2
 1680 0086 E31A     	 subs r3,r4,r3
 1681 0088 6422     	 movs r2,#100
 1682 008a 02FB03F4 	 mul r4,r2,r3
 1683 008e FFF7FEFF 	 bl batteryConfig
 1684 0092 0346     	 mov r3,r0
 1685 0094 1B78     	 ldrb r3,[r3]
 1686 0096 1D46     	 mov r5,r3
 1687 0098 FFF7FEFF 	 bl batteryConfig
 1688 009c 0346     	 mov r3,r0
 1689 009e 5B78     	 ldrb r3,[r3,#1]
 1690 00a0 EB1A     	 subs r3,r5,r3
 1691 00a2 094A     	 ldr r2,.L126
 1692 00a4 1278     	 ldrb r2,[r2]
 1693 00a6 02FB03F3 	 mul r3,r2,r3
 1694 00aa B4FBF3F3 	 udiv r3,r4,r3
 1695 00ae 1846     	 mov r0,r3
 1696 00b0 0021     	 movs r1,#0
 1697 00b2 6422     	 movs r2,#100
 1698 00b4 FFF7FEFF 	 bl constrain
 1699 00b8 0346     	 mov r3,r0
 1700 00ba FB71     	 strb r3,[r7,#7]
 1701              	.L123:
 1702              	.LBE7:
 442:../cleanflight/src/main/sensors/battery.c ****         }
 443:../cleanflight/src/main/sensors/battery.c ****     }
 444:../cleanflight/src/main/sensors/battery.c **** 
 445:../cleanflight/src/main/sensors/battery.c ****     return batteryPercentage;
 1703              	 .loc 4 445 0
 1704 00bc FB79     	 ldrb r3,[r7,#7]
 446:../cleanflight/src/main/sensors/battery.c **** }
 1705              	 .loc 4 446 0
 1706 00be 1846     	 mov r0,r3
 1707 00c0 0837     	 adds r7,r7,#8
 1708              	.LCFI76:
 1709              	 .cfi_def_cfa_offset 16
 1710 00c2 BD46     	 mov sp,r7
 1711              	.LCFI77:
 1712              	 .cfi_def_cfa_register 13
 1713              	 
 1714 00c4 B0BD     	 pop {r4,r5,r7,pc}
 1715              	.L127:
 1716 00c6 00BF     	 .align 2
 1717              	.L126:
 1718 00c8 00000000 	 .word batteryCellCount
 1719 00cc 00000000 	 .word currentMeter
 1720 00d0 0000C842 	 .word 1120403456
 1721 00d4 00000000 	 .word voltageMeter
 1722              	 .cfi_endproc
 1723              	.LFE563:
 1725              	 .section .text.batteryUpdateAlarms,"ax",%progbits
 1726              	 .align 2
 1727              	 .global batteryUpdateAlarms
 1728              	 .thumb
 1729              	 .thumb_func
 1731              	batteryUpdateAlarms:
 1732              	.LFB564:
 447:../cleanflight/src/main/sensors/battery.c **** 
 448:../cleanflight/src/main/sensors/battery.c **** void batteryUpdateAlarms(void)
 449:../cleanflight/src/main/sensors/battery.c **** {
 1733              	 .loc 4 449 0
 1734              	 .cfi_startproc
 1735              	 
 1736              	 
 1737 0000 80B5     	 push {r7,lr}
 1738              	.LCFI78:
 1739              	 .cfi_def_cfa_offset 8
 1740              	 .cfi_offset 7,-8
 1741              	 .cfi_offset 14,-4
 1742 0002 00AF     	 add r7,sp,#0
 1743              	.LCFI79:
 1744              	 .cfi_def_cfa_register 7
 450:../cleanflight/src/main/sensors/battery.c ****     // use the state to trigger beeper alerts
 451:../cleanflight/src/main/sensors/battery.c ****     if (batteryConfig()->useVBatAlerts) {
 1745              	 .loc 4 451 0
 1746 0004 FFF7FEFF 	 bl batteryConfig
 1747 0008 0346     	 mov r3,r0
 1748 000a 5B7A     	 ldrb r3,[r3,#9]
 1749 000c 002B     	 cmp r3,#0
 1750 000e 01D0     	 beq .L128
 452:../cleanflight/src/main/sensors/battery.c ****         updateBatteryBeeperAlert();
 1751              	 .loc 4 452 0
 1752 0010 FFF7FEFF 	 bl updateBatteryBeeperAlert
 1753              	.L128:
 453:../cleanflight/src/main/sensors/battery.c ****     }
 454:../cleanflight/src/main/sensors/battery.c **** }
 1754              	 .loc 4 454 0
 1755 0014 80BD     	 pop {r7,pc}
 1756              	 .cfi_endproc
 1757              	.LFE564:
 1759 0016 00BF     	 .section .text.isBatteryVoltageConfigured,"ax",%progbits
 1760              	 .align 2
 1761              	 .global isBatteryVoltageConfigured
 1762              	 .thumb
 1763              	 .thumb_func
 1765              	isBatteryVoltageConfigured:
 1766              	.LFB565:
 455:../cleanflight/src/main/sensors/battery.c **** 
 456:../cleanflight/src/main/sensors/battery.c **** bool isBatteryVoltageConfigured(void)
 457:../cleanflight/src/main/sensors/battery.c **** {
 1767              	 .loc 4 457 0
 1768              	 .cfi_startproc
 1769              	 
 1770              	 
 1771 0000 80B5     	 push {r7,lr}
 1772              	.LCFI80:
 1773              	 .cfi_def_cfa_offset 8
 1774              	 .cfi_offset 7,-8
 1775              	 .cfi_offset 14,-4
 1776 0002 00AF     	 add r7,sp,#0
 1777              	.LCFI81:
 1778              	 .cfi_def_cfa_register 7
 458:../cleanflight/src/main/sensors/battery.c ****     return batteryConfig()->voltageMeterSource != VOLTAGE_METER_NONE;
 1779              	 .loc 4 458 0
 1780 0004 FFF7FEFF 	 bl batteryConfig
 1781 0008 0346     	 mov r3,r0
 1782 000a 5B79     	 ldrb r3,[r3,#5]
 1783 000c 002B     	 cmp r3,#0
 1784 000e 14BF     	 ite ne
 1785 0010 0123     	 movne r3,#1
 1786 0012 0023     	 moveq r3,#0
 1787 0014 DBB2     	 uxtb r3,r3
 459:../cleanflight/src/main/sensors/battery.c **** }
 1788              	 .loc 4 459 0
 1789 0016 1846     	 mov r0,r3
 1790 0018 80BD     	 pop {r7,pc}
 1791              	 .cfi_endproc
 1792              	.LFE565:
 1794 001a 00BF     	 .section .text.getBatteryVoltage,"ax",%progbits
 1795              	 .align 2
 1796              	 .global getBatteryVoltage
 1797              	 .thumb
 1798              	 .thumb_func
 1800              	getBatteryVoltage:
 1801              	.LFB566:
 460:../cleanflight/src/main/sensors/battery.c **** 
 461:../cleanflight/src/main/sensors/battery.c **** uint16_t getBatteryVoltage(void)
 462:../cleanflight/src/main/sensors/battery.c **** {
 1802              	 .loc 4 462 0
 1803              	 .cfi_startproc
 1804              	 
 1805              	 
 1806              	 
 1807 0000 80B4     	 push {r7}
 1808              	.LCFI82:
 1809              	 .cfi_def_cfa_offset 4
 1810              	 .cfi_offset 7,-4
 1811 0002 00AF     	 add r7,sp,#0
 1812              	.LCFI83:
 1813              	 .cfi_def_cfa_register 7
 463:../cleanflight/src/main/sensors/battery.c ****     return voltageMeter.filtered;
 1814              	 .loc 4 463 0
 1815 0004 034B     	 ldr r3,.L134
 1816 0006 1B88     	 ldrh r3,[r3]
 464:../cleanflight/src/main/sensors/battery.c **** }
 1817              	 .loc 4 464 0
 1818 0008 1846     	 mov r0,r3
 1819 000a BD46     	 mov sp,r7
 1820              	.LCFI84:
 1821              	 .cfi_def_cfa_register 13
 1822              	 
 1823 000c 5DF8047B 	 ldr r7,[sp],#4
 1824              	.LCFI85:
 1825              	 .cfi_restore 7
 1826              	 .cfi_def_cfa_offset 0
 1827 0010 7047     	 bx lr
 1828              	.L135:
 1829 0012 00BF     	 .align 2
 1830              	.L134:
 1831 0014 00000000 	 .word voltageMeter
 1832              	 .cfi_endproc
 1833              	.LFE566:
 1835              	 .section .text.getBatteryVoltageLatest,"ax",%progbits
 1836              	 .align 2
 1837              	 .global getBatteryVoltageLatest
 1838              	 .thumb
 1839              	 .thumb_func
 1841              	getBatteryVoltageLatest:
 1842              	.LFB567:
 465:../cleanflight/src/main/sensors/battery.c **** 
 466:../cleanflight/src/main/sensors/battery.c **** uint16_t getBatteryVoltageLatest(void)
 467:../cleanflight/src/main/sensors/battery.c **** {
 1843              	 .loc 4 467 0
 1844              	 .cfi_startproc
 1845              	 
 1846              	 
 1847              	 
 1848 0000 80B4     	 push {r7}
 1849              	.LCFI86:
 1850              	 .cfi_def_cfa_offset 4
 1851              	 .cfi_offset 7,-4
 1852 0002 00AF     	 add r7,sp,#0
 1853              	.LCFI87:
 1854              	 .cfi_def_cfa_register 7
 468:../cleanflight/src/main/sensors/battery.c ****     return voltageMeter.unfiltered;
 1855              	 .loc 4 468 0
 1856 0004 034B     	 ldr r3,.L138
 1857 0006 5B88     	 ldrh r3,[r3,#2]
 469:../cleanflight/src/main/sensors/battery.c **** }
 1858              	 .loc 4 469 0
 1859 0008 1846     	 mov r0,r3
 1860 000a BD46     	 mov sp,r7
 1861              	.LCFI88:
 1862              	 .cfi_def_cfa_register 13
 1863              	 
 1864 000c 5DF8047B 	 ldr r7,[sp],#4
 1865              	.LCFI89:
 1866              	 .cfi_restore 7
 1867              	 .cfi_def_cfa_offset 0
 1868 0010 7047     	 bx lr
 1869              	.L139:
 1870 0012 00BF     	 .align 2
 1871              	.L138:
 1872 0014 00000000 	 .word voltageMeter
 1873              	 .cfi_endproc
 1874              	.LFE567:
 1876              	 .section .text.getBatteryCellCount,"ax",%progbits
 1877              	 .align 2
 1878              	 .global getBatteryCellCount
 1879              	 .thumb
 1880              	 .thumb_func
 1882              	getBatteryCellCount:
 1883              	.LFB568:
 470:../cleanflight/src/main/sensors/battery.c **** 
 471:../cleanflight/src/main/sensors/battery.c **** uint8_t getBatteryCellCount(void)
 472:../cleanflight/src/main/sensors/battery.c **** {
 1884              	 .loc 4 472 0
 1885              	 .cfi_startproc
 1886              	 
 1887              	 
 1888              	 
 1889 0000 80B4     	 push {r7}
 1890              	.LCFI90:
 1891              	 .cfi_def_cfa_offset 4
 1892              	 .cfi_offset 7,-4
 1893 0002 00AF     	 add r7,sp,#0
 1894              	.LCFI91:
 1895              	 .cfi_def_cfa_register 7
 473:../cleanflight/src/main/sensors/battery.c ****     return batteryCellCount;
 1896              	 .loc 4 473 0
 1897 0004 034B     	 ldr r3,.L142
 1898 0006 1B78     	 ldrb r3,[r3]
 474:../cleanflight/src/main/sensors/battery.c **** }
 1899              	 .loc 4 474 0
 1900 0008 1846     	 mov r0,r3
 1901 000a BD46     	 mov sp,r7
 1902              	.LCFI92:
 1903              	 .cfi_def_cfa_register 13
 1904              	 
 1905 000c 5DF8047B 	 ldr r7,[sp],#4
 1906              	.LCFI93:
 1907              	 .cfi_restore 7
 1908              	 .cfi_def_cfa_offset 0
 1909 0010 7047     	 bx lr
 1910              	.L143:
 1911 0012 00BF     	 .align 2
 1912              	.L142:
 1913 0014 00000000 	 .word batteryCellCount
 1914              	 .cfi_endproc
 1915              	.LFE568:
 1917              	 .section .text.getBatteryAverageCellVoltage,"ax",%progbits
 1918              	 .align 2
 1919              	 .global getBatteryAverageCellVoltage
 1920              	 .thumb
 1921              	 .thumb_func
 1923              	getBatteryAverageCellVoltage:
 1924              	.LFB569:
 475:../cleanflight/src/main/sensors/battery.c **** 
 476:../cleanflight/src/main/sensors/battery.c **** uint16_t getBatteryAverageCellVoltage(void)
 477:../cleanflight/src/main/sensors/battery.c **** {
 1925              	 .loc 4 477 0
 1926              	 .cfi_startproc
 1927              	 
 1928              	 
 1929              	 
 1930 0000 80B4     	 push {r7}
 1931              	.LCFI94:
 1932              	 .cfi_def_cfa_offset 4
 1933              	 .cfi_offset 7,-4
 1934 0002 00AF     	 add r7,sp,#0
 1935              	.LCFI95:
 1936              	 .cfi_def_cfa_register 7
 478:../cleanflight/src/main/sensors/battery.c ****     return voltageMeter.filtered / batteryCellCount;
 1937              	 .loc 4 478 0
 1938 0004 064B     	 ldr r3,.L146
 1939 0006 1B88     	 ldrh r3,[r3]
 1940 0008 1A46     	 mov r2,r3
 1941 000a 064B     	 ldr r3,.L146+4
 1942 000c 1B78     	 ldrb r3,[r3]
 1943 000e 92FBF3F3 	 sdiv r3,r2,r3
 1944 0012 9BB2     	 uxth r3,r3
 479:../cleanflight/src/main/sensors/battery.c **** }
 1945              	 .loc 4 479 0
 1946 0014 1846     	 mov r0,r3
 1947 0016 BD46     	 mov sp,r7
 1948              	.LCFI96:
 1949              	 .cfi_def_cfa_register 13
 1950              	 
 1951 0018 5DF8047B 	 ldr r7,[sp],#4
 1952              	.LCFI97:
 1953              	 .cfi_restore 7
 1954              	 .cfi_def_cfa_offset 0
 1955 001c 7047     	 bx lr
 1956              	.L147:
 1957 001e 00BF     	 .align 2
 1958              	.L146:
 1959 0020 00000000 	 .word voltageMeter
 1960 0024 00000000 	 .word batteryCellCount
 1961              	 .cfi_endproc
 1962              	.LFE569:
 1964              	 .section .text.isAmperageConfigured,"ax",%progbits
 1965              	 .align 2
 1966              	 .global isAmperageConfigured
 1967              	 .thumb
 1968              	 .thumb_func
 1970              	isAmperageConfigured:
 1971              	.LFB570:
 480:../cleanflight/src/main/sensors/battery.c **** 
 481:../cleanflight/src/main/sensors/battery.c **** bool isAmperageConfigured(void)
 482:../cleanflight/src/main/sensors/battery.c **** {
 1972              	 .loc 4 482 0
 1973              	 .cfi_startproc
 1974              	 
 1975              	 
 1976 0000 80B5     	 push {r7,lr}
 1977              	.LCFI98:
 1978              	 .cfi_def_cfa_offset 8
 1979              	 .cfi_offset 7,-8
 1980              	 .cfi_offset 14,-4
 1981 0002 00AF     	 add r7,sp,#0
 1982              	.LCFI99:
 1983              	 .cfi_def_cfa_register 7
 483:../cleanflight/src/main/sensors/battery.c ****     return batteryConfig()->currentMeterSource != CURRENT_METER_NONE;
 1984              	 .loc 4 483 0
 1985 0004 FFF7FEFF 	 bl batteryConfig
 1986 0008 0346     	 mov r3,r0
 1987 000a 9B79     	 ldrb r3,[r3,#6]
 1988 000c 002B     	 cmp r3,#0
 1989 000e 14BF     	 ite ne
 1990 0010 0123     	 movne r3,#1
 1991 0012 0023     	 moveq r3,#0
 1992 0014 DBB2     	 uxtb r3,r3
 484:../cleanflight/src/main/sensors/battery.c **** }
 1993              	 .loc 4 484 0
 1994 0016 1846     	 mov r0,r3
 1995 0018 80BD     	 pop {r7,pc}
 1996              	 .cfi_endproc
 1997              	.LFE570:
 1999 001a 00BF     	 .section .text.getAmperage,"ax",%progbits
 2000              	 .align 2
 2001              	 .global getAmperage
 2002              	 .thumb
 2003              	 .thumb_func
 2005              	getAmperage:
 2006              	.LFB571:
 485:../cleanflight/src/main/sensors/battery.c **** 
 486:../cleanflight/src/main/sensors/battery.c **** int32_t getAmperage(void) {
 2007              	 .loc 4 486 0
 2008              	 .cfi_startproc
 2009              	 
 2010              	 
 2011              	 
 2012 0000 80B4     	 push {r7}
 2013              	.LCFI100:
 2014              	 .cfi_def_cfa_offset 4
 2015              	 .cfi_offset 7,-4
 2016 0002 00AF     	 add r7,sp,#0
 2017              	.LCFI101:
 2018              	 .cfi_def_cfa_register 7
 487:../cleanflight/src/main/sensors/battery.c ****     return currentMeter.amperage;
 2019              	 .loc 4 487 0
 2020 0004 034B     	 ldr r3,.L152
 2021 0006 1B68     	 ldr r3,[r3]
 488:../cleanflight/src/main/sensors/battery.c **** }
 2022              	 .loc 4 488 0
 2023 0008 1846     	 mov r0,r3
 2024 000a BD46     	 mov sp,r7
 2025              	.LCFI102:
 2026              	 .cfi_def_cfa_register 13
 2027              	 
 2028 000c 5DF8047B 	 ldr r7,[sp],#4
 2029              	.LCFI103:
 2030              	 .cfi_restore 7
 2031              	 .cfi_def_cfa_offset 0
 2032 0010 7047     	 bx lr
 2033              	.L153:
 2034 0012 00BF     	 .align 2
 2035              	.L152:
 2036 0014 00000000 	 .word currentMeter
 2037              	 .cfi_endproc
 2038              	.LFE571:
 2040              	 .section .text.getAmperageLatest,"ax",%progbits
 2041              	 .align 2
 2042              	 .global getAmperageLatest
 2043              	 .thumb
 2044              	 .thumb_func
 2046              	getAmperageLatest:
 2047              	.LFB572:
 489:../cleanflight/src/main/sensors/battery.c **** 
 490:../cleanflight/src/main/sensors/battery.c **** int32_t getAmperageLatest(void)
 491:../cleanflight/src/main/sensors/battery.c **** {
 2048              	 .loc 4 491 0
 2049              	 .cfi_startproc
 2050              	 
 2051              	 
 2052              	 
 2053 0000 80B4     	 push {r7}
 2054              	.LCFI104:
 2055              	 .cfi_def_cfa_offset 4
 2056              	 .cfi_offset 7,-4
 2057 0002 00AF     	 add r7,sp,#0
 2058              	.LCFI105:
 2059              	 .cfi_def_cfa_register 7
 492:../cleanflight/src/main/sensors/battery.c ****     return currentMeter.amperageLatest;
 2060              	 .loc 4 492 0
 2061 0004 034B     	 ldr r3,.L156
 2062 0006 5B68     	 ldr r3,[r3,#4]
 493:../cleanflight/src/main/sensors/battery.c **** }
 2063              	 .loc 4 493 0
 2064 0008 1846     	 mov r0,r3
 2065 000a BD46     	 mov sp,r7
 2066              	.LCFI106:
 2067              	 .cfi_def_cfa_register 13
 2068              	 
 2069 000c 5DF8047B 	 ldr r7,[sp],#4
 2070              	.LCFI107:
 2071              	 .cfi_restore 7
 2072              	 .cfi_def_cfa_offset 0
 2073 0010 7047     	 bx lr
 2074              	.L157:
 2075 0012 00BF     	 .align 2
 2076              	.L156:
 2077 0014 00000000 	 .word currentMeter
 2078              	 .cfi_endproc
 2079              	.LFE572:
 2081              	 .section .text.getMAhDrawn,"ax",%progbits
 2082              	 .align 2
 2083              	 .global getMAhDrawn
 2084              	 .thumb
 2085              	 .thumb_func
 2087              	getMAhDrawn:
 2088              	.LFB573:
 494:../cleanflight/src/main/sensors/battery.c **** 
 495:../cleanflight/src/main/sensors/battery.c **** int32_t getMAhDrawn(void)
 496:../cleanflight/src/main/sensors/battery.c **** {
 2089              	 .loc 4 496 0
 2090              	 .cfi_startproc
 2091              	 
 2092              	 
 2093              	 
 2094 0000 80B4     	 push {r7}
 2095              	.LCFI108:
 2096              	 .cfi_def_cfa_offset 4
 2097              	 .cfi_offset 7,-4
 2098 0002 00AF     	 add r7,sp,#0
 2099              	.LCFI109:
 2100              	 .cfi_def_cfa_register 7
 497:../cleanflight/src/main/sensors/battery.c ****     return currentMeter.mAhDrawn;
 2101              	 .loc 4 497 0
 2102 0004 034B     	 ldr r3,.L160
 2103 0006 9B68     	 ldr r3,[r3,#8]
 498:../cleanflight/src/main/sensors/battery.c **** }
 2104              	 .loc 4 498 0
 2105 0008 1846     	 mov r0,r3
 2106 000a BD46     	 mov sp,r7
 2107              	.LCFI110:
 2108              	 .cfi_def_cfa_register 13
 2109              	 
 2110 000c 5DF8047B 	 ldr r7,[sp],#4
 2111              	.LCFI111:
 2112              	 .cfi_restore 7
 2113              	 .cfi_def_cfa_offset 0
 2114 0010 7047     	 bx lr
 2115              	.L161:
 2116 0012 00BF     	 .align 2
 2117              	.L160:
 2118 0014 00000000 	 .word currentMeter
 2119              	 .cfi_endproc
 2120              	.LFE573:
 2122              	 .section .bss.ibatLastServiced.12635,"aw",%nobits
 2123              	 .align 2
 2126              	ibatLastServiced.12635:
 2127 0000 00000000 	 .space 4
 2128              	 .text
 2129              	.Letext0:
 2130              	 .file 5 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2131              	 .file 6 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2132              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 2133              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 2134              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 2135              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/config/feature.h"
 2136              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 2137              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/runtime_config.h"
 2138              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/config.h"
 2139              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/fc/rc_controls.h"
 2140              	 .file 15 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/beeper.h"
 2141              	 .file 16 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
 2142              	 .file 17 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/voltage.h"
 2143              	 .file 18 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 2144              	 .file 19 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 battery.c
    {standard input}:20     .text.cmp32:00000000 $t
    {standard input}:24     .text.cmp32:00000000 cmp32
    {standard input}:65     .text.constrain:00000000 $t
    {standard input}:69     .text.constrain:00000000 constrain
    {standard input}:129    .text.constrainf:00000000 $t
    {standard input}:133    .text.constrainf:00000000 constrainf
    {standard input}:195    .text.batteryConfig:00000000 $t
    {standard input}:199    .text.batteryConfig:00000000 batteryConfig
    {standard input}:229    .text.batteryConfig:00000010 $d
                            *COM*:0000000e batteryConfig_System
                            *COM*:00000001 batteryCellCount
                            *COM*:00000002 batteryWarningVoltage
                            *COM*:00000002 batteryCriticalVoltage
    {standard input}:237    .bss.lowVoltageCutoff:00000000 $d
    {standard input}:240    .bss.lowVoltageCutoff:00000000 lowVoltageCutoff
    {standard input}:243    .bss.currentMeter:00000000 $d
    {standard input}:246    .bss.currentMeter:00000000 currentMeter
    {standard input}:249    .bss.voltageMeter:00000000 $d
    {standard input}:252    .bss.voltageMeter:00000000 voltageMeter
    {standard input}:257    .bss.batteryState:00000000 batteryState
    {standard input}:258    .bss.batteryState:00000000 $d
    {standard input}:262    .bss.voltageState:00000000 voltageState
    {standard input}:263    .bss.voltageState:00000000 $d
    {standard input}:267    .bss.consumptionState:00000000 consumptionState
    {standard input}:268    .bss.consumptionState:00000000 $d
                            *COM*:0000000e batteryConfig_Copy
    {standard input}:276    .pg_registry:00000000 batteryConfig_Registry
    {standard input}:273    .pg_registry:00000000 $d
    {standard input}:288    .pg_resetdata:00000000 pgResetTemplate_batteryConfig
    {standard input}:285    .pg_resetdata:00000000 $d
    {standard input}:303    .text.batteryUpdateVoltage:00000000 $t
    {standard input}:308    .text.batteryUpdateVoltage:00000000 batteryUpdateVoltage
    {standard input}:378    .text.batteryUpdateVoltage:0000004c $d
    {standard input}:385    .text.updateBatteryBeeperAlert:00000000 $t
    {standard input}:389    .text.updateBatteryBeeperAlert:00000000 updateBatteryBeeperAlert
    {standard input}:1042   .text.getBatteryState:00000000 getBatteryState
    {standard input}:412    .text.updateBatteryBeeperAlert:00000014 $d
    {standard input}:417    .text.updateBatteryBeeperAlert:00000028 $t
    {standard input}:437    .text.batteryUpdatePresence:00000000 $t
    {standard input}:442    .text.batteryUpdatePresence:00000000 batteryUpdatePresence
    {standard input}:678    .text.batteryUpdatePresence:00000160 $d
    {standard input}:691    .text.batteryUpdateVoltageState:00000000 $t
    {standard input}:695    .text.batteryUpdateVoltageState:00000000 batteryUpdateVoltageState
    {standard input}:802    .text.batteryUpdateVoltageState:0000008c $d
    {standard input}:810    .text.batteryUpdateLVC:00000000 $t
    {standard input}:814    .text.batteryUpdateLVC:00000000 batteryUpdateLVC
    {standard input}:922    .text.batteryUpdateLVC:000000a8 $d
    {standard input}:930    .text.batteryUpdateStates:00000000 $t
    {standard input}:935    .text.batteryUpdateStates:00000000 batteryUpdateStates
    {standard input}:1275   .text.batteryUpdateConsumptionState:00000000 batteryUpdateConsumptionState
    {standard input}:990    .text.batteryUpdateStates:0000003c $d
    {standard input}:997    .text.getLowVoltageCutoff:00000000 $t
    {standard input}:1002   .text.getLowVoltageCutoff:00000000 getLowVoltageCutoff
    {standard input}:1032   .text.getLowVoltageCutoff:00000010 $d
    {standard input}:1037   .text.getBatteryState:00000000 $t
    {standard input}:1073   .text.getBatteryState:00000014 $d
    {standard input}:1098   .rodata.batteryStateStrings:00000000 batteryStateStrings
    {standard input}:1079   .rodata:00000000 $d
    {standard input}:1095   .rodata.batteryStateStrings:00000000 $d
    {standard input}:1105   .text.getBatteryStateString:00000000 $t
    {standard input}:1110   .text.getBatteryStateString:00000000 getBatteryStateString
    {standard input}:1136   .text.getBatteryStateString:00000018 $d
    {standard input}:1141   .text.batteryInit:00000000 $t
    {standard input}:1146   .text.batteryInit:00000000 batteryInit
    {standard input}:1234   .text.batteryInit:00000078 $d
    {standard input}:1238   .text.batteryInit:00000088 $t
    {standard input}:1258   .text.batteryInit:00000098 $d
    {standard input}:1271   .text.batteryUpdateConsumptionState:00000000 $t
    {standard input}:1605   .text.calculateBatteryPercentageRemaining:00000000 calculateBatteryPercentageRemaining
    {standard input}:1356   .text.batteryUpdateConsumptionState:00000064 $d
    {standard input}:1362   .text.batteryUpdateCurrentMeter:00000000 $t
    {standard input}:1367   .text.batteryUpdateCurrentMeter:00000000 batteryUpdateCurrentMeter
    {standard input}:1418   .text.batteryUpdateCurrentMeter:00000040 $d
    {standard input}:1422   .text.batteryUpdateCurrentMeter:00000050 $t
    {standard input}:1511   .text.batteryUpdateCurrentMeter:000000d8 $d
    {standard input}:2126   .bss.ibatLastServiced.12635:00000000 ibatLastServiced.12635
    {standard input}:1520   .text.calculateVbatPidCompensation:00000000 $t
    {standard input}:1525   .text.calculateVbatPidCompensation:00000000 calculateVbatPidCompensation
    {standard input}:1593   .text.calculateVbatPidCompensation:00000070 $d
    {standard input}:1600   .text.calculateBatteryPercentageRemaining:00000000 $t
    {standard input}:1718   .text.calculateBatteryPercentageRemaining:000000c8 $d
    {standard input}:1726   .text.batteryUpdateAlarms:00000000 $t
    {standard input}:1731   .text.batteryUpdateAlarms:00000000 batteryUpdateAlarms
    {standard input}:1760   .text.isBatteryVoltageConfigured:00000000 $t
    {standard input}:1765   .text.isBatteryVoltageConfigured:00000000 isBatteryVoltageConfigured
    {standard input}:1795   .text.getBatteryVoltage:00000000 $t
    {standard input}:1800   .text.getBatteryVoltage:00000000 getBatteryVoltage
    {standard input}:1831   .text.getBatteryVoltage:00000014 $d
    {standard input}:1836   .text.getBatteryVoltageLatest:00000000 $t
    {standard input}:1841   .text.getBatteryVoltageLatest:00000000 getBatteryVoltageLatest
    {standard input}:1872   .text.getBatteryVoltageLatest:00000014 $d
    {standard input}:1877   .text.getBatteryCellCount:00000000 $t
    {standard input}:1882   .text.getBatteryCellCount:00000000 getBatteryCellCount
    {standard input}:1913   .text.getBatteryCellCount:00000014 $d
    {standard input}:1918   .text.getBatteryAverageCellVoltage:00000000 $t
    {standard input}:1923   .text.getBatteryAverageCellVoltage:00000000 getBatteryAverageCellVoltage
    {standard input}:1959   .text.getBatteryAverageCellVoltage:00000020 $d
    {standard input}:1965   .text.isAmperageConfigured:00000000 $t
    {standard input}:1970   .text.isAmperageConfigured:00000000 isAmperageConfigured
    {standard input}:2000   .text.getAmperage:00000000 $t
    {standard input}:2005   .text.getAmperage:00000000 getAmperage
    {standard input}:2036   .text.getAmperage:00000014 $d
    {standard input}:2041   .text.getAmperageLatest:00000000 $t
    {standard input}:2046   .text.getAmperageLatest:00000000 getAmperageLatest
    {standard input}:2077   .text.getAmperageLatest:00000014 $d
    {standard input}:2082   .text.getMAhDrawn:00000000 $t
    {standard input}:2087   .text.getMAhDrawn:00000000 getMAhDrawn
    {standard input}:2118   .text.getMAhDrawn:00000014 $d
    {standard input}:2123   .bss.ibatLastServiced.12635:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
voltageMeterADCRefresh
voltageMeterADCRead
voltageMeterReset
debugMode
debug
beeper
voltageMeterADCInit
currentMeterReset
currentMeterADCInit
currentMeterVirtualInit
currentMeterADCRefresh
currentMeterADCRead
calculateThrottleStatus
feature
currentMeterVirtualRefresh
currentMeterVirtualRead
rcCommand
armingFlags
