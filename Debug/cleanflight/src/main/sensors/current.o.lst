   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "current.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.currentSensorADCConfig,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	currentSensorADCConfig:
  25              	.LFB529:
  26              	 .file 1 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current.h"
   1:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** /*
   2:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * This file is part of Cleanflight and Betaflight.
   3:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
   4:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * this software and/or modify this software under the terms of the
   6:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * GNU General Public License as published by the Free Software
   7:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * Foundation, either version 3 of the License, or (at your option)
   8:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * any later version.
   9:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
  10:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * See the GNU General Public License for more details.
  14:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
  15:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * You should have received a copy of the GNU General Public License
  16:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * along with this software.
  17:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  *
  18:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  * If not, see <http://www.gnu.org/licenses/>.
  19:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****  */
  20:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  21:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** #pragma once
  22:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  23:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** #include "common/time.h"
  24:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** #include "current_ids.h"
  25:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  26:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef enum {
  27:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_NONE = 0,
  28:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_ADC,
  29:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_VIRTUAL,
  30:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_ESC,
  31:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_MSP,
  32:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_METER_COUNT
  33:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeterSource_e;
  34:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  35:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** extern const char * const currentMeterSourceNames[CURRENT_METER_COUNT];
  36:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  37:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeter_s {
  38:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperage;           // current read by current sensor in centiampere (1/100th A)
  39:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperageLatest;     // current read by current sensor in centiampere (1/100th A) (unfil
  40:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t mAhDrawn;           // milliampere hours drawn from the battery since start
  41:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeter_t;
  42:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  43:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // WARNING - do not mix usage of CURRENT_SENSOR_* and CURRENT_METER_*, they are separate concerns.
  44:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  45:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeterMAhDrawnState_s {
  46:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t mAhDrawn;           // milliampere hours drawn from the battery since start
  47:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     float mAhDrawnF;
  48:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeterMAhDrawnState_t;
  49:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  50:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  51:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // Sensors
  52:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  53:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  54:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef enum {
  55:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_VIRTUAL = 0,
  56:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_ADC,
  57:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_ESC,
  58:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     CURRENT_SENSOR_MSP
  59:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensor_e;
  60:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  61:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  62:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  63:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // ADC
  64:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  65:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  66:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeterADCState_s {
  67:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     currentMeterMAhDrawnState_t mahDrawnState;
  68:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperage;           // current read by current sensor in centiampere (1/100th A)
  69:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperageLatest;     // current read by current sensor in centiampere (1/100th A) (unfil
  70:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentMeterADCState_t;
  71:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  72:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentSensorADCConfig_s {
  73:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int16_t scale;              // scale the current sensor output voltage to milliamps. Value in m
  74:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int16_t offset;             // offset of the current sensor in mA
  75:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensorADCConfig_t;
  76:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  77:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** PG_DECLARE(currentSensorADCConfig_t, currentSensorADCConfig);
  27              	 .loc 1 77 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
  39              	 .loc 1 77 0
  40 0004 024B     	 ldr r3,.L3
  41 0006 1846     	 mov r0,r3
  42 0008 BD46     	 mov sp,r7
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 13
  45              	 
  46 000a 5DF8047B 	 ldr r7,[sp],#4
  47              	.LCFI3:
  48              	 .cfi_restore 7
  49              	 .cfi_def_cfa_offset 0
  50 000e 7047     	 bx lr
  51              	.L4:
  52              	 .align 2
  53              	.L3:
  54 0010 00000000 	 .word currentSensorADCConfig_System
  55              	 .cfi_endproc
  56              	.LFE529:
  58              	 .section .text.currentSensorVirtualConfig,"ax",%progbits
  59              	 .align 2
  60              	 .thumb
  61              	 .thumb_func
  63              	currentSensorVirtualConfig:
  64              	.LFB531:
  78:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  79:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  80:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** // Virtual
  81:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** //
  82:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  83:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentMeterVirtualState_s {
  84:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     currentMeterMAhDrawnState_t mahDrawnState;
  85:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int32_t amperage;           // current read by current sensor in centiampere (1/100th A)
  86:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensorVirtualState_t;
  87:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  88:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** typedef struct currentSensorVirtualConfig_s {
  89:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     int16_t scale;              // scale the current sensor output voltage to milliamps. Value in 1
  90:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h ****     uint16_t offset;            // offset of the current sensor in millivolt steps
  91:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** } currentSensorVirtualConfig_t;
  92:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** 
  93:D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors\current.h **** PG_DECLARE(currentSensorVirtualConfig_t, currentSensorVirtualConfig);
  65              	 .loc 1 93 0
  66              	 .cfi_startproc
  67              	 
  68              	 
  69              	 
  70 0000 80B4     	 push {r7}
  71              	.LCFI4:
  72              	 .cfi_def_cfa_offset 4
  73              	 .cfi_offset 7,-4
  74 0002 00AF     	 add r7,sp,#0
  75              	.LCFI5:
  76              	 .cfi_def_cfa_register 7
  77              	 .loc 1 93 0
  78 0004 024B     	 ldr r3,.L7
  79 0006 1846     	 mov r0,r3
  80 0008 BD46     	 mov sp,r7
  81              	.LCFI6:
  82              	 .cfi_def_cfa_register 13
  83              	 
  84 000a 5DF8047B 	 ldr r7,[sp],#4
  85              	.LCFI7:
  86              	 .cfi_restore 7
  87              	 .cfi_def_cfa_offset 0
  88 000e 7047     	 bx lr
  89              	.L8:
  90              	 .align 2
  91              	.L7:
  92 0010 00000000 	 .word currentSensorVirtualConfig_System
  93              	 .cfi_endproc
  94              	.LFE531:
  96              	 .global currentMeterSourceNames
  97              	 .section .rodata
  98              	 .align 2
  99              	.LC0:
 100 0000 4E4F4E45 	 .ascii "NONE\000"
 100      00
 101 0005 000000   	 .align 2
 102              	.LC1:
 103 0008 41444300 	 .ascii "ADC\000"
 104              	 .align 2
 105              	.LC2:
 106 000c 56495254 	 .ascii "VIRTUAL\000"
 106      55414C00 
 107              	 .align 2
 108              	.LC3:
 109 0014 45534300 	 .ascii "ESC\000"
 110              	 .align 2
 111              	.LC4:
 112 0018 4D535000 	 .ascii "MSP\000"
 113              	 .section .rodata.currentMeterSourceNames,"a",%progbits
 114              	 .align 2
 117              	currentMeterSourceNames:
 118 0000 00000000 	 .word .LC0
 119 0004 08000000 	 .word .LC1
 120 0008 0C000000 	 .word .LC2
 121 000c 14000000 	 .word .LC3
 122 0010 18000000 	 .word .LC4
 123              	 .global currentMeterIds
 124              	 .section .rodata.currentMeterIds,"a",%progbits
 125              	 .align 2
 128              	currentMeterIds:
 129 0000 0A       	 .byte 10
 130 0001 50       	 .byte 80
 131              	 .global supportedCurrentMeterCount
 132 0002 0000     	 .section .rodata.supportedCurrentMeterCount,"a",%progbits
 135              	supportedCurrentMeterCount:
 136 0000 02       	 .byte 2
 137              	 .section .text.currentMeterReset,"ax",%progbits
 138              	 .align 2
 139              	 .global currentMeterReset
 140              	 .thumb
 141              	 .thumb_func
 143              	currentMeterReset:
 144              	.LFB535:
 145              	 .file 2 "../cleanflight/src/main/sensors/current.c"
   1:../cleanflight/src/main/sensors/current.c **** /*
   2:../cleanflight/src/main/sensors/current.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/sensors/current.c ****  *
   4:../cleanflight/src/main/sensors/current.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/sensors/current.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/sensors/current.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/sensors/current.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/sensors/current.c ****  * any later version.
   9:../cleanflight/src/main/sensors/current.c ****  *
  10:../cleanflight/src/main/sensors/current.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/sensors/current.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/sensors/current.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/sensors/current.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/sensors/current.c ****  *
  15:../cleanflight/src/main/sensors/current.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/sensors/current.c ****  * along with this software.
  17:../cleanflight/src/main/sensors/current.c ****  *
  18:../cleanflight/src/main/sensors/current.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/sensors/current.c ****  */
  20:../cleanflight/src/main/sensors/current.c **** 
  21:../cleanflight/src/main/sensors/current.c **** #include "stdbool.h"
  22:../cleanflight/src/main/sensors/current.c **** #include "stdint.h"
  23:../cleanflight/src/main/sensors/current.c **** #include "string.h"
  24:../cleanflight/src/main/sensors/current.c **** 
  25:../cleanflight/src/main/sensors/current.c **** #include "platform.h"
  26:../cleanflight/src/main/sensors/current.c **** #include "build/build_config.h"
  27:../cleanflight/src/main/sensors/current.c **** #include "build/debug.h"
  28:../cleanflight/src/main/sensors/current.c **** 
  29:../cleanflight/src/main/sensors/current.c **** #include "common/maths.h"
  30:../cleanflight/src/main/sensors/current.c **** #include "common/utils.h"
  31:../cleanflight/src/main/sensors/current.c **** #include "common/filter.h"
  32:../cleanflight/src/main/sensors/current.c **** 
  33:../cleanflight/src/main/sensors/current.c **** #include "drivers/adc.h"
  34:../cleanflight/src/main/sensors/current.c **** 
  35:../cleanflight/src/main/sensors/current.c **** #include "pg/pg.h"
  36:../cleanflight/src/main/sensors/current.c **** #include "pg/pg_ids.h"
  37:../cleanflight/src/main/sensors/current.c **** #include "config/config_reset.h"
  38:../cleanflight/src/main/sensors/current.c **** 
  39:../cleanflight/src/main/sensors/current.c **** #include "sensors/adcinternal.h"
  40:../cleanflight/src/main/sensors/current.c **** #include "sensors/current.h"
  41:../cleanflight/src/main/sensors/current.c **** #include "sensors/esc_sensor.h"
  42:../cleanflight/src/main/sensors/current.c **** 
  43:../cleanflight/src/main/sensors/current.c **** const char * const currentMeterSourceNames[CURRENT_METER_COUNT] = {
  44:../cleanflight/src/main/sensors/current.c ****     "NONE", "ADC", "VIRTUAL", "ESC", "MSP"
  45:../cleanflight/src/main/sensors/current.c **** };
  46:../cleanflight/src/main/sensors/current.c **** 
  47:../cleanflight/src/main/sensors/current.c **** const uint8_t currentMeterIds[] = {
  48:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_BATTERY_1,
  49:../cleanflight/src/main/sensors/current.c **** #ifdef USE_VIRTUAL_CURRENT_METER
  50:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_VIRTUAL_1,
  51:../cleanflight/src/main/sensors/current.c **** #endif
  52:../cleanflight/src/main/sensors/current.c **** #ifdef USE_ESC_SENSOR
  53:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_COMBINED_1,
  54:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_1,
  55:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_2,
  56:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_3,
  57:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_4,
  58:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_5,
  59:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_6,
  60:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_7,
  61:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_8,
  62:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_9,
  63:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_10,
  64:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_11,
  65:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_ESC_MOTOR_12,
  66:../cleanflight/src/main/sensors/current.c **** #endif
  67:../cleanflight/src/main/sensors/current.c **** #ifdef USE_MSP_CURRENT_METER
  68:../cleanflight/src/main/sensors/current.c ****     CURRENT_METER_ID_MSP_1,
  69:../cleanflight/src/main/sensors/current.c **** #endif
  70:../cleanflight/src/main/sensors/current.c **** };
  71:../cleanflight/src/main/sensors/current.c **** 
  72:../cleanflight/src/main/sensors/current.c **** const uint8_t supportedCurrentMeterCount = ARRAYLEN(currentMeterIds);
  73:../cleanflight/src/main/sensors/current.c **** 
  74:../cleanflight/src/main/sensors/current.c **** //
  75:../cleanflight/src/main/sensors/current.c **** // ADC/Virtual/ESC/MSP shared
  76:../cleanflight/src/main/sensors/current.c **** //
  77:../cleanflight/src/main/sensors/current.c **** 
  78:../cleanflight/src/main/sensors/current.c **** void currentMeterReset(currentMeter_t *meter)
  79:../cleanflight/src/main/sensors/current.c **** {
 146              	 .loc 2 79 0
 147              	 .cfi_startproc
 148              	 
 149              	 
 150              	 
 151 0000 80B4     	 push {r7}
 152              	.LCFI8:
 153              	 .cfi_def_cfa_offset 4
 154              	 .cfi_offset 7,-4
 155 0002 83B0     	 sub sp,sp,#12
 156              	.LCFI9:
 157              	 .cfi_def_cfa_offset 16
 158 0004 00AF     	 add r7,sp,#0
 159              	.LCFI10:
 160              	 .cfi_def_cfa_register 7
 161 0006 7860     	 str r0,[r7,#4]
  80:../cleanflight/src/main/sensors/current.c ****     meter->amperage = 0;
 162              	 .loc 2 80 0
 163 0008 7B68     	 ldr r3,[r7,#4]
 164 000a 0022     	 movs r2,#0
 165 000c 1A70     	 strb r2,[r3]
 166 000e 0022     	 movs r2,#0
 167 0010 5A70     	 strb r2,[r3,#1]
 168 0012 0022     	 movs r2,#0
 169 0014 9A70     	 strb r2,[r3,#2]
 170 0016 0022     	 movs r2,#0
 171 0018 DA70     	 strb r2,[r3,#3]
  81:../cleanflight/src/main/sensors/current.c ****     meter->amperageLatest = 0;
 172              	 .loc 2 81 0
 173 001a 7B68     	 ldr r3,[r7,#4]
 174 001c 0022     	 movs r2,#0
 175 001e 1A71     	 strb r2,[r3,#4]
 176 0020 0022     	 movs r2,#0
 177 0022 5A71     	 strb r2,[r3,#5]
 178 0024 0022     	 movs r2,#0
 179 0026 9A71     	 strb r2,[r3,#6]
 180 0028 0022     	 movs r2,#0
 181 002a DA71     	 strb r2,[r3,#7]
  82:../cleanflight/src/main/sensors/current.c ****     meter->mAhDrawn = 0;
 182              	 .loc 2 82 0
 183 002c 7B68     	 ldr r3,[r7,#4]
 184 002e 0022     	 movs r2,#0
 185 0030 1A72     	 strb r2,[r3,#8]
 186 0032 0022     	 movs r2,#0
 187 0034 5A72     	 strb r2,[r3,#9]
 188 0036 0022     	 movs r2,#0
 189 0038 9A72     	 strb r2,[r3,#10]
 190 003a 0022     	 movs r2,#0
 191 003c DA72     	 strb r2,[r3,#11]
  83:../cleanflight/src/main/sensors/current.c **** }
 192              	 .loc 2 83 0
 193 003e 0C37     	 adds r7,r7,#12
 194              	.LCFI11:
 195              	 .cfi_def_cfa_offset 4
 196 0040 BD46     	 mov sp,r7
 197              	.LCFI12:
 198              	 .cfi_def_cfa_register 13
 199              	 
 200 0042 5DF8047B 	 ldr r7,[sp],#4
 201              	.LCFI13:
 202              	 .cfi_restore 7
 203              	 .cfi_def_cfa_offset 0
 204 0046 7047     	 bx lr
 205              	 .cfi_endproc
 206              	.LFE535:
 208              	 .section .bss.adciBatFilter,"aw",%nobits
 209              	 .align 2
 212              	adciBatFilter:
 213 0000 00000000 	 .space 36
 213      00000000 
 213      00000000 
 213      00000000 
 213      00000000 
 214              	 .comm currentSensorADCConfig_System,4,4
 215              	 .comm currentSensorADCConfig_Copy,4,4
 216              	 .global currentSensorADCConfig_Registry
 217              	 .section .pg_registry,"a",%progbits
 218              	 .align 2
 221              	currentSensorADCConfig_Registry:
 222 0000 0001     	 .short 256
 223 0002 0400     	 .short 4
 224 0004 00000000 	 .word currentSensorADCConfig_System
 225 0008 00000000 	 .word currentSensorADCConfig_Copy
 226 000c 00000000 	 .word 0
 227 0010 00000000 	 .word pgResetTemplate_currentSensorADCConfig
 228              	 .global pgResetTemplate_currentSensorADCConfig
 229              	 .section .pg_resetdata,"a",%progbits
 230              	 .align 1
 233              	pgResetTemplate_currentSensorADCConfig:
 234 0000 9001     	 .short 400
 235 0002 0000     	 .short 0
 236              	 .comm currentSensorVirtualConfig_System,4,4
 237              	 .comm currentSensorVirtualConfig_Copy,4,4
 238              	 .global currentSensorVirtualConfig_Registry
 239              	 .section .pg_registry
 240              	 .align 2
 243              	currentSensorVirtualConfig_Registry:
 244 0014 0101     	 .short 257
 245 0016 0400     	 .short 4
 246 0018 00000000 	 .word currentSensorVirtualConfig_System
 247 001c 00000000 	 .word currentSensorVirtualConfig_Copy
 248 0020 00000000 	 .word 0
 249 0024 00000000 	 .word 0
 250              	 .section .text.currentMeterADCToCentiamps,"ax",%progbits
 251              	 .align 2
 252              	 .thumb
 253              	 .thumb_func
 255              	currentMeterADCToCentiamps:
 256              	.LFB536:
  84:../cleanflight/src/main/sensors/current.c **** 
  85:../cleanflight/src/main/sensors/current.c **** //
  86:../cleanflight/src/main/sensors/current.c **** // ADC/Virtual shared
  87:../cleanflight/src/main/sensors/current.c **** //
  88:../cleanflight/src/main/sensors/current.c **** 
  89:../cleanflight/src/main/sensors/current.c **** #define IBAT_LPF_FREQ  0.4f
  90:../cleanflight/src/main/sensors/current.c **** static biquadFilter_t adciBatFilter;
  91:../cleanflight/src/main/sensors/current.c **** 
  92:../cleanflight/src/main/sensors/current.c **** #ifndef CURRENT_METER_SCALE_DEFAULT
  93:../cleanflight/src/main/sensors/current.c **** #define CURRENT_METER_SCALE_DEFAULT 400 // for Allegro ACS758LCB-100U (40mV/A)
  94:../cleanflight/src/main/sensors/current.c **** #endif
  95:../cleanflight/src/main/sensors/current.c **** 
  96:../cleanflight/src/main/sensors/current.c **** #ifndef CURRENT_METER_OFFSET_DEFAULT
  97:../cleanflight/src/main/sensors/current.c **** #define CURRENT_METER_OFFSET_DEFAULT 0
  98:../cleanflight/src/main/sensors/current.c **** #endif
  99:../cleanflight/src/main/sensors/current.c **** 
 100:../cleanflight/src/main/sensors/current.c **** PG_REGISTER_WITH_RESET_TEMPLATE(currentSensorADCConfig_t, currentSensorADCConfig, PG_CURRENT_SENSOR
 101:../cleanflight/src/main/sensors/current.c **** 
 102:../cleanflight/src/main/sensors/current.c **** PG_RESET_TEMPLATE(currentSensorADCConfig_t, currentSensorADCConfig,
 103:../cleanflight/src/main/sensors/current.c ****     .scale = CURRENT_METER_SCALE_DEFAULT,
 104:../cleanflight/src/main/sensors/current.c ****     .offset = CURRENT_METER_OFFSET_DEFAULT,
 105:../cleanflight/src/main/sensors/current.c **** );
 106:../cleanflight/src/main/sensors/current.c **** 
 107:../cleanflight/src/main/sensors/current.c **** #ifdef USE_VIRTUAL_CURRENT_METER
 108:../cleanflight/src/main/sensors/current.c **** PG_REGISTER(currentSensorVirtualConfig_t, currentSensorVirtualConfig, PG_CURRENT_SENSOR_VIRTUAL_CON
 109:../cleanflight/src/main/sensors/current.c **** #endif
 110:../cleanflight/src/main/sensors/current.c **** 
 111:../cleanflight/src/main/sensors/current.c **** static int32_t currentMeterADCToCentiamps(const uint16_t src)
 112:../cleanflight/src/main/sensors/current.c **** {
 257              	 .loc 2 112 0
 258              	 .cfi_startproc
 259              	 
 260              	 
 261 0000 90B5     	 push {r4,r7,lr}
 262              	.LCFI14:
 263              	 .cfi_def_cfa_offset 12
 264              	 .cfi_offset 4,-12
 265              	 .cfi_offset 7,-8
 266              	 .cfi_offset 14,-4
 267 0002 87B0     	 sub sp,sp,#28
 268              	.LCFI15:
 269              	 .cfi_def_cfa_offset 40
 270 0004 00AF     	 add r7,sp,#0
 271              	.LCFI16:
 272              	 .cfi_def_cfa_register 7
 273 0006 0346     	 mov r3,r0
 274 0008 FB80     	 strh r3,[r7,#6]
 113:../cleanflight/src/main/sensors/current.c **** 
 114:../cleanflight/src/main/sensors/current.c ****     const currentSensorADCConfig_t *config = currentSensorADCConfig();
 275              	 .loc 2 114 0
 276 000a FFF7FEFF 	 bl currentSensorADCConfig
 277 000e 7861     	 str r0,[r7,#20]
 115:../cleanflight/src/main/sensors/current.c **** 
 116:../cleanflight/src/main/sensors/current.c ****     int32_t millivolts = ((uint32_t)src * getVrefMv()) / 4096;
 278              	 .loc 2 116 0
 279 0010 FC88     	 ldrh r4,[r7,#6]
 280 0012 FFF7FEFF 	 bl getVrefMv
 281 0016 0346     	 mov r3,r0
 282 0018 03FB04F3 	 mul r3,r3,r4
 283 001c 1B0B     	 lsrs r3,r3,#12
 284 001e 3B61     	 str r3,[r7,#16]
 117:../cleanflight/src/main/sensors/current.c ****     // y=x/m+b m is scale in (mV/10A) and b is offset in (mA)
 118:../cleanflight/src/main/sensors/current.c ****     int32_t centiAmps = (millivolts * 10000 / (int32_t)config->scale + (int32_t)config->offset) / 1
 285              	 .loc 2 118 0
 286 0020 3B69     	 ldr r3,[r7,#16]
 287 0022 42F21072 	 movw r2,#10000
 288 0026 02FB03F2 	 mul r2,r2,r3
 289 002a 7B69     	 ldr r3,[r7,#20]
 290 002c B3F90030 	 ldrsh r3,[r3]
 291 0030 9BB2     	 uxth r3,r3
 292 0032 1BB2     	 sxth r3,r3
 293 0034 92FBF3F2 	 sdiv r2,r2,r3
 294 0038 7B69     	 ldr r3,[r7,#20]
 295 003a B3F90230 	 ldrsh r3,[r3,#2]
 296 003e 9BB2     	 uxth r3,r3
 297 0040 1BB2     	 sxth r3,r3
 298 0042 1344     	 add r3,r3,r2
 299 0044 0D4A     	 ldr r2,.L14
 300 0046 82FB0312 	 smull r1,r2,r2,r3
 301 004a 9210     	 asrs r2,r2,#2
 302 004c DB17     	 asrs r3,r3,#31
 303 004e D31A     	 subs r3,r2,r3
 304 0050 FB60     	 str r3,[r7,#12]
 119:../cleanflight/src/main/sensors/current.c **** 
 120:../cleanflight/src/main/sensors/current.c ****     DEBUG_SET(DEBUG_CURRENT, 0, millivolts);
 305              	 .loc 2 120 0
 306 0052 0B4B     	 ldr r3,.L14+4
 307 0054 1B78     	 ldrb r3,[r3]
 308 0056 222B     	 cmp r3,#34
 309 0058 03D1     	 bne .L11
 310              	 .loc 2 120 0 is_stmt 0 discriminator 1
 311 005a 3B69     	 ldr r3,[r7,#16]
 312 005c 9AB2     	 uxth r2,r3
 313 005e 094B     	 ldr r3,.L14+8
 314 0060 1A80     	 strh r2,[r3]
 315              	.L11:
 121:../cleanflight/src/main/sensors/current.c ****     DEBUG_SET(DEBUG_CURRENT, 1, centiAmps);
 316              	 .loc 2 121 0 is_stmt 1
 317 0062 074B     	 ldr r3,.L14+4
 318 0064 1B78     	 ldrb r3,[r3]
 319 0066 222B     	 cmp r3,#34
 320 0068 03D1     	 bne .L12
 321              	 .loc 2 121 0 is_stmt 0 discriminator 1
 322 006a FB68     	 ldr r3,[r7,#12]
 323 006c 9AB2     	 uxth r2,r3
 324 006e 054B     	 ldr r3,.L14+8
 325 0070 5A80     	 strh r2,[r3,#2]
 326              	.L12:
 122:../cleanflight/src/main/sensors/current.c **** 
 123:../cleanflight/src/main/sensors/current.c ****     return centiAmps; // Returns Centiamps to maintain compatability with the rest of the code
 327              	 .loc 2 123 0 is_stmt 1
 328 0072 FB68     	 ldr r3,[r7,#12]
 124:../cleanflight/src/main/sensors/current.c **** }
 329              	 .loc 2 124 0
 330 0074 1846     	 mov r0,r3
 331 0076 1C37     	 adds r7,r7,#28
 332              	.LCFI17:
 333              	 .cfi_def_cfa_offset 12
 334 0078 BD46     	 mov sp,r7
 335              	.LCFI18:
 336              	 .cfi_def_cfa_register 13
 337              	 
 338 007a 90BD     	 pop {r4,r7,pc}
 339              	.L15:
 340              	 .align 2
 341              	.L14:
 342 007c 67666666 	 .word 1717986919
 343 0080 00000000 	 .word debugMode
 344 0084 00000000 	 .word debug
 345              	 .cfi_endproc
 346              	.LFE536:
 348              	 .section .text.updateCurrentmAhDrawnState,"ax",%progbits
 349              	 .align 2
 350              	 .thumb
 351              	 .thumb_func
 353              	updateCurrentmAhDrawnState:
 354              	.LFB537:
 125:../cleanflight/src/main/sensors/current.c **** 
 126:../cleanflight/src/main/sensors/current.c **** #if defined(USE_ADC) || defined(USE_VIRTUAL_CURRENT_METER)
 127:../cleanflight/src/main/sensors/current.c **** static void updateCurrentmAhDrawnState(currentMeterMAhDrawnState_t *state, int32_t amperageLatest, 
 128:../cleanflight/src/main/sensors/current.c **** {
 355              	 .loc 2 128 0
 356              	 .cfi_startproc
 357              	 
 358              	 
 359              	 
 360 0000 80B4     	 push {r7}
 361              	.LCFI19:
 362              	 .cfi_def_cfa_offset 4
 363              	 .cfi_offset 7,-4
 364 0002 85B0     	 sub sp,sp,#20
 365              	.LCFI20:
 366              	 .cfi_def_cfa_offset 24
 367 0004 00AF     	 add r7,sp,#0
 368              	.LCFI21:
 369              	 .cfi_def_cfa_register 7
 370 0006 F860     	 str r0,[r7,#12]
 371 0008 B960     	 str r1,[r7,#8]
 372 000a 7A60     	 str r2,[r7,#4]
 129:../cleanflight/src/main/sensors/current.c ****     state->mAhDrawnF = state->mAhDrawnF + (amperageLatest * lastUpdateAt / (100.0f * 1000 * 3600));
 373              	 .loc 2 129 0
 374 000c FB68     	 ldr r3,[r7,#12]
 375 000e 5968     	 ldr r1,[r3,#4]
 376 0010 0B46     	 mov r3,r1
 377 0012 1946     	 mov r1,r3
 378 0014 BB68     	 ldr r3,[r7,#8]
 379 0016 7A68     	 ldr r2,[r7,#4]
 380 0018 02FB03F3 	 mul r3,r2,r3
 381 001c 07EE903A 	 fmsr s15,r3
 382 0020 F8EEE77A 	 fsitos s15,s15
 383 0024 9FED0D7A 	 flds s14,.L17
 384 0028 C7EE877A 	 fdivs s15,s15,s14
 385 002c 07EE101A 	 fmsr s14,r1
 386 0030 77EE277A 	 fadds s15,s14,s15
 387 0034 FB68     	 ldr r3,[r7,#12]
 388 0036 17EE902A 	 fmrs r2,s15
 389 003a 5A60     	 str r2,[r3,#4]
 130:../cleanflight/src/main/sensors/current.c ****     state->mAhDrawn = state->mAhDrawnF;
 390              	 .loc 2 130 0
 391 003c FB68     	 ldr r3,[r7,#12]
 392 003e 5B68     	 ldr r3,[r3,#4]
 393 0040 07EE903A 	 fmsr s15,r3
 394 0044 FDEEE77A 	 ftosizs s15,s15
 395 0048 17EE902A 	 fmrs r2,s15
 396 004c FB68     	 ldr r3,[r7,#12]
 397 004e 1A60     	 str r2,[r3]
 131:../cleanflight/src/main/sensors/current.c **** }
 398              	 .loc 2 131 0
 399 0050 1437     	 adds r7,r7,#20
 400              	.LCFI22:
 401              	 .cfi_def_cfa_offset 4
 402 0052 BD46     	 mov sp,r7
 403              	.LCFI23:
 404              	 .cfi_def_cfa_register 13
 405              	 
 406 0054 5DF8047B 	 ldr r7,[sp],#4
 407              	.LCFI24:
 408              	 .cfi_restore 7
 409              	 .cfi_def_cfa_offset 0
 410 0058 7047     	 bx lr
 411              	.L18:
 412 005a 00BF     	 .align 2
 413              	.L17:
 414 005c 50A9AB4D 	 .word 1303095632
 415              	 .cfi_endproc
 416              	.LFE537:
 418              	 .comm currentMeterADCState,16,4
 419              	 .section .text.currentMeterADCInit,"ax",%progbits
 420              	 .align 2
 421              	 .global currentMeterADCInit
 422              	 .thumb
 423              	 .thumb_func
 425              	currentMeterADCInit:
 426              	.LFB538:
 132:../cleanflight/src/main/sensors/current.c **** #endif
 133:../cleanflight/src/main/sensors/current.c **** 
 134:../cleanflight/src/main/sensors/current.c **** //
 135:../cleanflight/src/main/sensors/current.c **** // ADC
 136:../cleanflight/src/main/sensors/current.c **** //
 137:../cleanflight/src/main/sensors/current.c **** 
 138:../cleanflight/src/main/sensors/current.c **** currentMeterADCState_t currentMeterADCState;
 139:../cleanflight/src/main/sensors/current.c **** 
 140:../cleanflight/src/main/sensors/current.c **** void currentMeterADCInit(void)
 141:../cleanflight/src/main/sensors/current.c **** {
 427              	 .loc 2 141 0
 428              	 .cfi_startproc
 429              	 
 430              	 
 431 0000 80B5     	 push {r7,lr}
 432              	.LCFI25:
 433              	 .cfi_def_cfa_offset 8
 434              	 .cfi_offset 7,-8
 435              	 .cfi_offset 14,-4
 436 0002 00AF     	 add r7,sp,#0
 437              	.LCFI26:
 438              	 .cfi_def_cfa_register 7
 142:../cleanflight/src/main/sensors/current.c ****     memset(&currentMeterADCState, 0, sizeof(currentMeterADCState_t));
 439              	 .loc 2 142 0
 440 0004 0548     	 ldr r0,.L20
 441 0006 0021     	 movs r1,#0
 442 0008 1022     	 movs r2,#16
 443 000a FFF7FEFF 	 bl memset
 143:../cleanflight/src/main/sensors/current.c ****     biquadFilterInitLPF(&adciBatFilter, IBAT_LPF_FREQ, HZ_TO_INTERVAL_US(50));
 444              	 .loc 2 143 0
 445 000e 0448     	 ldr r0,.L20+4
 446 0010 0449     	 ldr r1,.L20+8
 447 0012 44F62062 	 movw r2,#20000
 448 0016 FFF7FEFF 	 bl biquadFilterInitLPF
 144:../cleanflight/src/main/sensors/current.c **** }
 449              	 .loc 2 144 0
 450 001a 80BD     	 pop {r7,pc}
 451              	.L21:
 452              	 .align 2
 453              	.L20:
 454 001c 00000000 	 .word currentMeterADCState
 455 0020 00000000 	 .word adciBatFilter
 456 0024 CDCCCC3E 	 .word 1053609165
 457              	 .cfi_endproc
 458              	.LFE538:
 460              	 .section .text.currentMeterADCRefresh,"ax",%progbits
 461              	 .align 2
 462              	 .global currentMeterADCRefresh
 463              	 .thumb
 464              	 .thumb_func
 466              	currentMeterADCRefresh:
 467              	.LFB539:
 145:../cleanflight/src/main/sensors/current.c **** 
 146:../cleanflight/src/main/sensors/current.c **** void currentMeterADCRefresh(int32_t lastUpdateAt)
 147:../cleanflight/src/main/sensors/current.c **** {
 468              	 .loc 2 147 0
 469              	 .cfi_startproc
 470              	 
 471              	 
 472 0000 80B5     	 push {r7,lr}
 473              	.LCFI27:
 474              	 .cfi_def_cfa_offset 8
 475              	 .cfi_offset 7,-8
 476              	 .cfi_offset 14,-4
 477 0002 84B0     	 sub sp,sp,#16
 478              	.LCFI28:
 479              	 .cfi_def_cfa_offset 24
 480 0004 00AF     	 add r7,sp,#0
 481              	.LCFI29:
 482              	 .cfi_def_cfa_register 7
 483 0006 7860     	 str r0,[r7,#4]
 148:../cleanflight/src/main/sensors/current.c **** #ifdef USE_ADC
 149:../cleanflight/src/main/sensors/current.c ****     const uint16_t iBatSample = adcGetChannel(ADC_CURRENT);
 484              	 .loc 2 149 0
 485 0008 0120     	 movs r0,#1
 486 000a FFF7FEFF 	 bl adcGetChannel
 487 000e 0346     	 mov r3,r0
 488 0010 FB81     	 strh r3,[r7,#14]
 150:../cleanflight/src/main/sensors/current.c ****     currentMeterADCState.amperageLatest = currentMeterADCToCentiamps(iBatSample);
 489              	 .loc 2 150 0
 490 0012 FB89     	 ldrh r3,[r7,#14]
 491 0014 1846     	 mov r0,r3
 492 0016 FFF7FEFF 	 bl currentMeterADCToCentiamps
 493 001a 0246     	 mov r2,r0
 494 001c 114B     	 ldr r3,.L23
 495 001e DA60     	 str r2,[r3,#12]
 151:../cleanflight/src/main/sensors/current.c ****     currentMeterADCState.amperage = currentMeterADCToCentiamps(biquadFilterApply(&adciBatFilter, iB
 496              	 .loc 2 151 0
 497 0020 FB89     	 ldrh r3,[r7,#14]
 498 0022 07EE903A 	 fmsr s15,r3
 499 0026 F8EE677A 	 fuitos s15,s15
 500 002a 0F48     	 ldr r0,.L23+4
 501 002c 17EE901A 	 fmrs r1,s15
 502 0030 FFF7FEFF 	 bl biquadFilterApply
 503 0034 07EE900A 	 fmsr s15,r0
 504 0038 FCEEE77A 	 ftouizs s15,s15
 505 003c C7ED007A 	 fsts s15,[r7]
 506 0040 3B88     	 ldrh r3,[r7]
 507 0042 9BB2     	 uxth r3,r3
 508 0044 1846     	 mov r0,r3
 509 0046 FFF7FEFF 	 bl currentMeterADCToCentiamps
 510 004a 0246     	 mov r2,r0
 511 004c 054B     	 ldr r3,.L23
 512 004e 9A60     	 str r2,[r3,#8]
 152:../cleanflight/src/main/sensors/current.c **** 
 153:../cleanflight/src/main/sensors/current.c ****     updateCurrentmAhDrawnState(&currentMeterADCState.mahDrawnState, currentMeterADCState.amperageLa
 513              	 .loc 2 153 0
 514 0050 044B     	 ldr r3,.L23
 515 0052 DB68     	 ldr r3,[r3,#12]
 516 0054 0348     	 ldr r0,.L23
 517 0056 1946     	 mov r1,r3
 518 0058 7A68     	 ldr r2,[r7,#4]
 519 005a FFF7FEFF 	 bl updateCurrentmAhDrawnState
 154:../cleanflight/src/main/sensors/current.c **** #else
 155:../cleanflight/src/main/sensors/current.c ****     UNUSED(lastUpdateAt);
 156:../cleanflight/src/main/sensors/current.c ****     UNUSED(currentMeterADCToCentiamps);
 157:../cleanflight/src/main/sensors/current.c **** 
 158:../cleanflight/src/main/sensors/current.c ****     currentMeterADCState.amperageLatest = 0;
 159:../cleanflight/src/main/sensors/current.c ****     currentMeterADCState.amperage = 0;
 160:../cleanflight/src/main/sensors/current.c **** #endif
 161:../cleanflight/src/main/sensors/current.c **** }
 520              	 .loc 2 161 0
 521 005e 1037     	 adds r7,r7,#16
 522              	.LCFI30:
 523              	 .cfi_def_cfa_offset 8
 524 0060 BD46     	 mov sp,r7
 525              	.LCFI31:
 526              	 .cfi_def_cfa_register 13
 527              	 
 528 0062 80BD     	 pop {r7,pc}
 529              	.L24:
 530              	 .align 2
 531              	.L23:
 532 0064 00000000 	 .word currentMeterADCState
 533 0068 00000000 	 .word adciBatFilter
 534              	 .cfi_endproc
 535              	.LFE539:
 537              	 .section .text.currentMeterADCRead,"ax",%progbits
 538              	 .align 2
 539              	 .global currentMeterADCRead
 540              	 .thumb
 541              	 .thumb_func
 543              	currentMeterADCRead:
 544              	.LFB540:
 162:../cleanflight/src/main/sensors/current.c **** 
 163:../cleanflight/src/main/sensors/current.c **** void currentMeterADCRead(currentMeter_t *meter)
 164:../cleanflight/src/main/sensors/current.c **** {
 545              	 .loc 2 164 0
 546              	 .cfi_startproc
 547              	 
 548              	 
 549              	 
 550 0000 80B4     	 push {r7}
 551              	.LCFI32:
 552              	 .cfi_def_cfa_offset 4
 553              	 .cfi_offset 7,-4
 554 0002 83B0     	 sub sp,sp,#12
 555              	.LCFI33:
 556              	 .cfi_def_cfa_offset 16
 557 0004 00AF     	 add r7,sp,#0
 558              	.LCFI34:
 559              	 .cfi_def_cfa_register 7
 560 0006 7860     	 str r0,[r7,#4]
 165:../cleanflight/src/main/sensors/current.c ****     meter->amperageLatest = currentMeterADCState.amperageLatest;
 561              	 .loc 2 165 0
 562 0008 114B     	 ldr r3,.L28
 563 000a DA68     	 ldr r2,[r3,#12]
 564 000c 7B68     	 ldr r3,[r7,#4]
 565 000e 5A60     	 str r2,[r3,#4]
 166:../cleanflight/src/main/sensors/current.c ****     meter->amperage = currentMeterADCState.amperage;
 566              	 .loc 2 166 0
 567 0010 0F4B     	 ldr r3,.L28
 568 0012 9A68     	 ldr r2,[r3,#8]
 569 0014 7B68     	 ldr r3,[r7,#4]
 570 0016 1A60     	 str r2,[r3]
 167:../cleanflight/src/main/sensors/current.c ****     meter->mAhDrawn = currentMeterADCState.mahDrawnState.mAhDrawn;
 571              	 .loc 2 167 0
 572 0018 0D4B     	 ldr r3,.L28
 573 001a 1A68     	 ldr r2,[r3]
 574 001c 7B68     	 ldr r3,[r7,#4]
 575 001e 9A60     	 str r2,[r3,#8]
 168:../cleanflight/src/main/sensors/current.c **** 
 169:../cleanflight/src/main/sensors/current.c ****     DEBUG_SET(DEBUG_CURRENT, 2, meter->amperageLatest);
 576              	 .loc 2 169 0
 577 0020 0C4B     	 ldr r3,.L28+4
 578 0022 1B78     	 ldrb r3,[r3]
 579 0024 222B     	 cmp r3,#34
 580 0026 04D1     	 bne .L26
 581              	 .loc 2 169 0 is_stmt 0 discriminator 1
 582 0028 7B68     	 ldr r3,[r7,#4]
 583 002a 5B68     	 ldr r3,[r3,#4]
 584 002c 9AB2     	 uxth r2,r3
 585 002e 0A4B     	 ldr r3,.L28+8
 586 0030 9A80     	 strh r2,[r3,#4]
 587              	.L26:
 170:../cleanflight/src/main/sensors/current.c ****     DEBUG_SET(DEBUG_CURRENT, 3, meter->mAhDrawn);
 588              	 .loc 2 170 0 is_stmt 1
 589 0032 084B     	 ldr r3,.L28+4
 590 0034 1B78     	 ldrb r3,[r3]
 591 0036 222B     	 cmp r3,#34
 592 0038 04D1     	 bne .L25
 593              	 .loc 2 170 0 is_stmt 0 discriminator 1
 594 003a 7B68     	 ldr r3,[r7,#4]
 595 003c 9B68     	 ldr r3,[r3,#8]
 596 003e 9AB2     	 uxth r2,r3
 597 0040 054B     	 ldr r3,.L28+8
 598 0042 DA80     	 strh r2,[r3,#6]
 599              	.L25:
 171:../cleanflight/src/main/sensors/current.c **** }
 600              	 .loc 2 171 0 is_stmt 1
 601 0044 0C37     	 adds r7,r7,#12
 602              	.LCFI35:
 603              	 .cfi_def_cfa_offset 4
 604 0046 BD46     	 mov sp,r7
 605              	.LCFI36:
 606              	 .cfi_def_cfa_register 13
 607              	 
 608 0048 5DF8047B 	 ldr r7,[sp],#4
 609              	.LCFI37:
 610              	 .cfi_restore 7
 611              	 .cfi_def_cfa_offset 0
 612 004c 7047     	 bx lr
 613              	.L29:
 614 004e 00BF     	 .align 2
 615              	.L28:
 616 0050 00000000 	 .word currentMeterADCState
 617 0054 00000000 	 .word debugMode
 618 0058 00000000 	 .word debug
 619              	 .cfi_endproc
 620              	.LFE540:
 622              	 .comm currentMeterVirtualState,12,4
 623              	 .section .text.currentMeterVirtualInit,"ax",%progbits
 624              	 .align 2
 625              	 .global currentMeterVirtualInit
 626              	 .thumb
 627              	 .thumb_func
 629              	currentMeterVirtualInit:
 630              	.LFB541:
 172:../cleanflight/src/main/sensors/current.c **** 
 173:../cleanflight/src/main/sensors/current.c **** //
 174:../cleanflight/src/main/sensors/current.c **** // VIRTUAL
 175:../cleanflight/src/main/sensors/current.c **** //
 176:../cleanflight/src/main/sensors/current.c **** 
 177:../cleanflight/src/main/sensors/current.c **** #ifdef USE_VIRTUAL_CURRENT_METER
 178:../cleanflight/src/main/sensors/current.c **** currentSensorVirtualState_t currentMeterVirtualState;
 179:../cleanflight/src/main/sensors/current.c **** 
 180:../cleanflight/src/main/sensors/current.c **** void currentMeterVirtualInit(void)
 181:../cleanflight/src/main/sensors/current.c **** {
 631              	 .loc 2 181 0
 632              	 .cfi_startproc
 633              	 
 634              	 
 635 0000 80B5     	 push {r7,lr}
 636              	.LCFI38:
 637              	 .cfi_def_cfa_offset 8
 638              	 .cfi_offset 7,-8
 639              	 .cfi_offset 14,-4
 640 0002 00AF     	 add r7,sp,#0
 641              	.LCFI39:
 642              	 .cfi_def_cfa_register 7
 182:../cleanflight/src/main/sensors/current.c ****     memset(&currentMeterVirtualState, 0, sizeof(currentSensorVirtualState_t));
 643              	 .loc 2 182 0
 644 0004 0248     	 ldr r0,.L31
 645 0006 0021     	 movs r1,#0
 646 0008 0C22     	 movs r2,#12
 647 000a FFF7FEFF 	 bl memset
 183:../cleanflight/src/main/sensors/current.c **** }
 648              	 .loc 2 183 0
 649 000e 80BD     	 pop {r7,pc}
 650              	.L32:
 651              	 .align 2
 652              	.L31:
 653 0010 00000000 	 .word currentMeterVirtualState
 654              	 .cfi_endproc
 655              	.LFE541:
 657              	 .section .text.currentMeterVirtualRefresh,"ax",%progbits
 658              	 .align 2
 659              	 .global currentMeterVirtualRefresh
 660              	 .thumb
 661              	 .thumb_func
 663              	currentMeterVirtualRefresh:
 664              	.LFB542:
 184:../cleanflight/src/main/sensors/current.c **** 
 185:../cleanflight/src/main/sensors/current.c **** void currentMeterVirtualRefresh(int32_t lastUpdateAt, bool armed, bool throttleLowAndMotorStop, int
 186:../cleanflight/src/main/sensors/current.c **** {
 665              	 .loc 2 186 0
 666              	 .cfi_startproc
 667              	 
 668              	 
 669 0000 80B5     	 push {r7,lr}
 670              	.LCFI40:
 671              	 .cfi_def_cfa_offset 8
 672              	 .cfi_offset 7,-8
 673              	 .cfi_offset 14,-4
 674 0002 86B0     	 sub sp,sp,#24
 675              	.LCFI41:
 676              	 .cfi_def_cfa_offset 32
 677 0004 00AF     	 add r7,sp,#0
 678              	.LCFI42:
 679              	 .cfi_def_cfa_register 7
 680 0006 F860     	 str r0,[r7,#12]
 681 0008 7B60     	 str r3,[r7,#4]
 682 000a 0B46     	 mov r3,r1
 683 000c FB72     	 strb r3,[r7,#11]
 684 000e 1346     	 mov r3,r2
 685 0010 BB72     	 strb r3,[r7,#10]
 187:../cleanflight/src/main/sensors/current.c ****     currentMeterVirtualState.amperage = (int32_t)currentSensorVirtualConfig()->offset;
 686              	 .loc 2 187 0
 687 0012 FFF7FEFF 	 bl currentSensorVirtualConfig
 688 0016 0346     	 mov r3,r0
 689 0018 5B88     	 ldrh r3,[r3,#2]
 690 001a 9BB2     	 uxth r3,r3
 691 001c 1A46     	 mov r2,r3
 692 001e 1B4B     	 ldr r3,.L36
 693 0020 9A60     	 str r2,[r3,#8]
 188:../cleanflight/src/main/sensors/current.c ****     if (armed) {
 694              	 .loc 2 188 0
 695 0022 FB7A     	 ldrb r3,[r7,#11]
 696 0024 002B     	 cmp r3,#0
 697 0026 26D0     	 beq .L34
 698              	.LBB2:
 189:../cleanflight/src/main/sensors/current.c ****         if (throttleLowAndMotorStop) {
 699              	 .loc 2 189 0
 700 0028 BB7A     	 ldrb r3,[r7,#10]
 701 002a 002B     	 cmp r3,#0
 702 002c 01D0     	 beq .L35
 190:../cleanflight/src/main/sensors/current.c ****             throttleOffset = 0;
 703              	 .loc 2 190 0
 704 002e 0023     	 movs r3,#0
 705 0030 7B60     	 str r3,[r7,#4]
 706              	.L35:
 191:../cleanflight/src/main/sensors/current.c ****         }
 192:../cleanflight/src/main/sensors/current.c **** 
 193:../cleanflight/src/main/sensors/current.c ****         int throttleFactor = throttleOffset + (throttleOffset * throttleOffset / 50); // FIXME magi
 707              	 .loc 2 193 0
 708 0032 7B68     	 ldr r3,[r7,#4]
 709 0034 7A68     	 ldr r2,[r7,#4]
 710 0036 02FB03F3 	 mul r3,r2,r3
 711 003a 154A     	 ldr r2,.L36+4
 712 003c 82FB0312 	 smull r1,r2,r2,r3
 713 0040 1211     	 asrs r2,r2,#4
 714 0042 DB17     	 asrs r3,r3,#31
 715 0044 D21A     	 subs r2,r2,r3
 716 0046 7B68     	 ldr r3,[r7,#4]
 717 0048 1344     	 add r3,r3,r2
 718 004a 7B61     	 str r3,[r7,#20]
 194:../cleanflight/src/main/sensors/current.c ****         currentMeterVirtualState.amperage += throttleFactor * (int32_t)currentSensorVirtualConfig()
 719              	 .loc 2 194 0
 720 004c FFF7FEFF 	 bl currentSensorVirtualConfig
 721 0050 0346     	 mov r3,r0
 722 0052 B3F90030 	 ldrsh r3,[r3]
 723 0056 9BB2     	 uxth r3,r3
 724 0058 1BB2     	 sxth r3,r3
 725 005a 7A69     	 ldr r2,[r7,#20]
 726 005c 02FB03F3 	 mul r3,r2,r3
 727 0060 0C4A     	 ldr r2,.L36+8
 728 0062 82FB0312 	 smull r1,r2,r2,r3
 729 0066 9211     	 asrs r2,r2,#6
 730 0068 DB17     	 asrs r3,r3,#31
 731 006a D31A     	 subs r3,r2,r3
 732 006c 074A     	 ldr r2,.L36
 733 006e 9268     	 ldr r2,[r2,#8]
 734 0070 1344     	 add r3,r3,r2
 735 0072 064A     	 ldr r2,.L36
 736 0074 9360     	 str r3,[r2,#8]
 737              	.L34:
 738              	.LBE2:
 195:../cleanflight/src/main/sensors/current.c ****     }
 196:../cleanflight/src/main/sensors/current.c ****     updateCurrentmAhDrawnState(&currentMeterVirtualState.mahDrawnState, currentMeterVirtualState.am
 739              	 .loc 2 196 0
 740 0076 054B     	 ldr r3,.L36
 741 0078 9B68     	 ldr r3,[r3,#8]
 742 007a 0448     	 ldr r0,.L36
 743 007c 1946     	 mov r1,r3
 744 007e FA68     	 ldr r2,[r7,#12]
 745 0080 FFF7FEFF 	 bl updateCurrentmAhDrawnState
 197:../cleanflight/src/main/sensors/current.c **** }
 746              	 .loc 2 197 0
 747 0084 1837     	 adds r7,r7,#24
 748              	.LCFI43:
 749              	 .cfi_def_cfa_offset 8
 750 0086 BD46     	 mov sp,r7
 751              	.LCFI44:
 752              	 .cfi_def_cfa_register 13
 753              	 
 754 0088 80BD     	 pop {r7,pc}
 755              	.L37:
 756 008a 00BF     	 .align 2
 757              	.L36:
 758 008c 00000000 	 .word currentMeterVirtualState
 759 0090 1F85EB51 	 .word 1374389535
 760 0094 D34D6210 	 .word 274877907
 761              	 .cfi_endproc
 762              	.LFE542:
 764              	 .section .text.currentMeterVirtualRead,"ax",%progbits
 765              	 .align 2
 766              	 .global currentMeterVirtualRead
 767              	 .thumb
 768              	 .thumb_func
 770              	currentMeterVirtualRead:
 771              	.LFB543:
 198:../cleanflight/src/main/sensors/current.c **** 
 199:../cleanflight/src/main/sensors/current.c **** void currentMeterVirtualRead(currentMeter_t *meter)
 200:../cleanflight/src/main/sensors/current.c **** {
 772              	 .loc 2 200 0
 773              	 .cfi_startproc
 774              	 
 775              	 
 776              	 
 777 0000 80B4     	 push {r7}
 778              	.LCFI45:
 779              	 .cfi_def_cfa_offset 4
 780              	 .cfi_offset 7,-4
 781 0002 83B0     	 sub sp,sp,#12
 782              	.LCFI46:
 783              	 .cfi_def_cfa_offset 16
 784 0004 00AF     	 add r7,sp,#0
 785              	.LCFI47:
 786              	 .cfi_def_cfa_register 7
 787 0006 7860     	 str r0,[r7,#4]
 201:../cleanflight/src/main/sensors/current.c ****     meter->amperageLatest = currentMeterVirtualState.amperage;
 788              	 .loc 2 201 0
 789 0008 084B     	 ldr r3,.L39
 790 000a 9A68     	 ldr r2,[r3,#8]
 791 000c 7B68     	 ldr r3,[r7,#4]
 792 000e 5A60     	 str r2,[r3,#4]
 202:../cleanflight/src/main/sensors/current.c ****     meter->amperage = currentMeterVirtualState.amperage;
 793              	 .loc 2 202 0
 794 0010 064B     	 ldr r3,.L39
 795 0012 9A68     	 ldr r2,[r3,#8]
 796 0014 7B68     	 ldr r3,[r7,#4]
 797 0016 1A60     	 str r2,[r3]
 203:../cleanflight/src/main/sensors/current.c ****     meter->mAhDrawn = currentMeterVirtualState.mahDrawnState.mAhDrawn;
 798              	 .loc 2 203 0
 799 0018 044B     	 ldr r3,.L39
 800 001a 1A68     	 ldr r2,[r3]
 801 001c 7B68     	 ldr r3,[r7,#4]
 802 001e 9A60     	 str r2,[r3,#8]
 204:../cleanflight/src/main/sensors/current.c **** }
 803              	 .loc 2 204 0
 804 0020 0C37     	 adds r7,r7,#12
 805              	.LCFI48:
 806              	 .cfi_def_cfa_offset 4
 807 0022 BD46     	 mov sp,r7
 808              	.LCFI49:
 809              	 .cfi_def_cfa_register 13
 810              	 
 811 0024 5DF8047B 	 ldr r7,[sp],#4
 812              	.LCFI50:
 813              	 .cfi_restore 7
 814              	 .cfi_def_cfa_offset 0
 815 0028 7047     	 bx lr
 816              	.L40:
 817 002a 00BF     	 .align 2
 818              	.L39:
 819 002c 00000000 	 .word currentMeterVirtualState
 820              	 .cfi_endproc
 821              	.LFE543:
 823              	 .section .text.currentMeterRead,"ax",%progbits
 824              	 .align 2
 825              	 .global currentMeterRead
 826              	 .thumb
 827              	 .thumb_func
 829              	currentMeterRead:
 830              	.LFB544:
 205:../cleanflight/src/main/sensors/current.c **** #endif
 206:../cleanflight/src/main/sensors/current.c **** 
 207:../cleanflight/src/main/sensors/current.c **** //
 208:../cleanflight/src/main/sensors/current.c **** // ESC
 209:../cleanflight/src/main/sensors/current.c **** //
 210:../cleanflight/src/main/sensors/current.c **** 
 211:../cleanflight/src/main/sensors/current.c **** #ifdef USE_ESC_SENSOR
 212:../cleanflight/src/main/sensors/current.c **** currentMeterESCState_t currentMeterESCState;
 213:../cleanflight/src/main/sensors/current.c **** 
 214:../cleanflight/src/main/sensors/current.c **** void currentMeterESCInit(void)
 215:../cleanflight/src/main/sensors/current.c **** {
 216:../cleanflight/src/main/sensors/current.c ****     memset(&currentMeterESCState, 0, sizeof(currentMeterESCState_t));
 217:../cleanflight/src/main/sensors/current.c **** }
 218:../cleanflight/src/main/sensors/current.c **** 
 219:../cleanflight/src/main/sensors/current.c **** void currentMeterESCRefresh(int32_t lastUpdateAt)
 220:../cleanflight/src/main/sensors/current.c **** {
 221:../cleanflight/src/main/sensors/current.c ****     UNUSED(lastUpdateAt);
 222:../cleanflight/src/main/sensors/current.c **** 
 223:../cleanflight/src/main/sensors/current.c ****     escSensorData_t *escData = getEscSensorData(ESC_SENSOR_COMBINED);
 224:../cleanflight/src/main/sensors/current.c ****     if (escData && escData->dataAge <= ESC_BATTERY_AGE_MAX) {
 225:../cleanflight/src/main/sensors/current.c ****         currentMeterESCState.amperage = escData->current + escSensorConfig()->offset / 10;
 226:../cleanflight/src/main/sensors/current.c ****         currentMeterESCState.mAhDrawn = escData->consumption + escSensorConfig()->offset * millis()
 227:../cleanflight/src/main/sensors/current.c ****     } else {
 228:../cleanflight/src/main/sensors/current.c ****         currentMeterESCState.amperage = 0;
 229:../cleanflight/src/main/sensors/current.c ****         currentMeterESCState.mAhDrawn = 0;
 230:../cleanflight/src/main/sensors/current.c ****     }
 231:../cleanflight/src/main/sensors/current.c **** }
 232:../cleanflight/src/main/sensors/current.c **** 
 233:../cleanflight/src/main/sensors/current.c **** void currentMeterESCReadCombined(currentMeter_t *meter)
 234:../cleanflight/src/main/sensors/current.c **** {
 235:../cleanflight/src/main/sensors/current.c ****     meter->amperageLatest = currentMeterESCState.amperage;
 236:../cleanflight/src/main/sensors/current.c ****     meter->amperage = currentMeterESCState.amperage;
 237:../cleanflight/src/main/sensors/current.c ****     meter->mAhDrawn = currentMeterESCState.mAhDrawn;
 238:../cleanflight/src/main/sensors/current.c **** }
 239:../cleanflight/src/main/sensors/current.c **** 
 240:../cleanflight/src/main/sensors/current.c **** void currentMeterESCReadMotor(uint8_t motorNumber, currentMeter_t *meter)
 241:../cleanflight/src/main/sensors/current.c **** {
 242:../cleanflight/src/main/sensors/current.c ****     escSensorData_t *escData = getEscSensorData(motorNumber);
 243:../cleanflight/src/main/sensors/current.c ****     if (escData && escData->dataAge <= ESC_BATTERY_AGE_MAX) {
 244:../cleanflight/src/main/sensors/current.c ****         meter->amperage = escData->current;
 245:../cleanflight/src/main/sensors/current.c ****         meter->amperageLatest = escData->current;
 246:../cleanflight/src/main/sensors/current.c ****         meter->mAhDrawn = escData->consumption;
 247:../cleanflight/src/main/sensors/current.c ****     } else {
 248:../cleanflight/src/main/sensors/current.c ****         currentMeterReset(meter);
 249:../cleanflight/src/main/sensors/current.c ****     }
 250:../cleanflight/src/main/sensors/current.c **** }
 251:../cleanflight/src/main/sensors/current.c **** #endif
 252:../cleanflight/src/main/sensors/current.c **** 
 253:../cleanflight/src/main/sensors/current.c **** 
 254:../cleanflight/src/main/sensors/current.c **** #ifdef USE_MSP_CURRENT_METER
 255:../cleanflight/src/main/sensors/current.c **** #include "common/streambuf.h"
 256:../cleanflight/src/main/sensors/current.c **** #include "interface/msp_protocol.h"
 257:../cleanflight/src/main/sensors/current.c **** #include "msp/msp_serial.h"
 258:../cleanflight/src/main/sensors/current.c **** 
 259:../cleanflight/src/main/sensors/current.c **** currentMeterMSPState_t currentMeterMSPState;
 260:../cleanflight/src/main/sensors/current.c **** 
 261:../cleanflight/src/main/sensors/current.c **** void currentMeterMSPSet(uint16_t amperage, uint16_t mAhDrawn)
 262:../cleanflight/src/main/sensors/current.c **** {
 263:../cleanflight/src/main/sensors/current.c ****     // We expect the FC's MSP_ANALOG response handler to call this function
 264:../cleanflight/src/main/sensors/current.c ****     currentMeterMSPState.amperage = amperage;
 265:../cleanflight/src/main/sensors/current.c ****     currentMeterMSPState.mAhDrawn = mAhDrawn;
 266:../cleanflight/src/main/sensors/current.c **** }
 267:../cleanflight/src/main/sensors/current.c **** 
 268:../cleanflight/src/main/sensors/current.c **** void currentMeterMSPInit(void)
 269:../cleanflight/src/main/sensors/current.c **** {
 270:../cleanflight/src/main/sensors/current.c ****     memset(&currentMeterMSPState, 0, sizeof(currentMeterMSPState_t));
 271:../cleanflight/src/main/sensors/current.c **** }
 272:../cleanflight/src/main/sensors/current.c **** 
 273:../cleanflight/src/main/sensors/current.c **** void currentMeterMSPRefresh(timeUs_t currentTimeUs)
 274:../cleanflight/src/main/sensors/current.c **** {
 275:../cleanflight/src/main/sensors/current.c ****     // periodically request MSP_ANALOG
 276:../cleanflight/src/main/sensors/current.c ****     static timeUs_t streamRequestAt = 0;
 277:../cleanflight/src/main/sensors/current.c ****     if (cmp32(currentTimeUs, streamRequestAt) > 0) {
 278:../cleanflight/src/main/sensors/current.c ****         streamRequestAt = currentTimeUs + ((1000 * 1000) / 10); // 10hz
 279:../cleanflight/src/main/sensors/current.c **** 
 280:../cleanflight/src/main/sensors/current.c ****         mspSerialPush(MSP_ANALOG, NULL, 0, MSP_DIRECTION_REQUEST);
 281:../cleanflight/src/main/sensors/current.c ****     }
 282:../cleanflight/src/main/sensors/current.c **** }
 283:../cleanflight/src/main/sensors/current.c **** 
 284:../cleanflight/src/main/sensors/current.c **** void currentMeterMSPRead(currentMeter_t *meter)
 285:../cleanflight/src/main/sensors/current.c **** {
 286:../cleanflight/src/main/sensors/current.c ****     meter->amperageLatest = currentMeterMSPState.amperage;
 287:../cleanflight/src/main/sensors/current.c ****     meter->amperage = currentMeterMSPState.amperage;
 288:../cleanflight/src/main/sensors/current.c ****     meter->mAhDrawn = currentMeterMSPState.mAhDrawn;
 289:../cleanflight/src/main/sensors/current.c **** }
 290:../cleanflight/src/main/sensors/current.c **** #endif
 291:../cleanflight/src/main/sensors/current.c **** 
 292:../cleanflight/src/main/sensors/current.c **** //
 293:../cleanflight/src/main/sensors/current.c **** // API for current meters using IDs
 294:../cleanflight/src/main/sensors/current.c **** //
 295:../cleanflight/src/main/sensors/current.c **** // This API is used by MSP, for configuration/status.
 296:../cleanflight/src/main/sensors/current.c **** //
 297:../cleanflight/src/main/sensors/current.c **** 
 298:../cleanflight/src/main/sensors/current.c **** void currentMeterRead(currentMeterId_e id, currentMeter_t *meter)
 299:../cleanflight/src/main/sensors/current.c **** {
 831              	 .loc 2 299 0
 832              	 .cfi_startproc
 833              	 
 834              	 
 835 0000 80B5     	 push {r7,lr}
 836              	.LCFI51:
 837              	 .cfi_def_cfa_offset 8
 838              	 .cfi_offset 7,-8
 839              	 .cfi_offset 14,-4
 840 0002 82B0     	 sub sp,sp,#8
 841              	.LCFI52:
 842              	 .cfi_def_cfa_offset 16
 843 0004 00AF     	 add r7,sp,#0
 844              	.LCFI53:
 845              	 .cfi_def_cfa_register 7
 846 0006 0346     	 mov r3,r0
 847 0008 3960     	 str r1,[r7]
 848 000a FB71     	 strb r3,[r7,#7]
 300:../cleanflight/src/main/sensors/current.c ****     if (id == CURRENT_METER_ID_BATTERY_1) {
 849              	 .loc 2 300 0
 850 000c FB79     	 ldrb r3,[r7,#7]
 851 000e 0A2B     	 cmp r3,#10
 852 0010 03D1     	 bne .L42
 301:../cleanflight/src/main/sensors/current.c ****         currentMeterADCRead(meter);
 853              	 .loc 2 301 0
 854 0012 3868     	 ldr r0,[r7]
 855 0014 FFF7FEFF 	 bl currentMeterADCRead
 856 0018 09E0     	 b .L41
 857              	.L42:
 302:../cleanflight/src/main/sensors/current.c ****     }
 303:../cleanflight/src/main/sensors/current.c **** #ifdef USE_VIRTUAL_CURRENT_METER
 304:../cleanflight/src/main/sensors/current.c ****     else if (id == CURRENT_METER_ID_VIRTUAL_1) {
 858              	 .loc 2 304 0
 859 001a FB79     	 ldrb r3,[r7,#7]
 860 001c 502B     	 cmp r3,#80
 861 001e 03D1     	 bne .L44
 305:../cleanflight/src/main/sensors/current.c ****         currentMeterVirtualRead(meter);
 862              	 .loc 2 305 0
 863 0020 3868     	 ldr r0,[r7]
 864 0022 FFF7FEFF 	 bl currentMeterVirtualRead
 865 0026 02E0     	 b .L41
 866              	.L44:
 306:../cleanflight/src/main/sensors/current.c ****     }
 307:../cleanflight/src/main/sensors/current.c **** #endif
 308:../cleanflight/src/main/sensors/current.c **** #ifdef USE_MSP_CURRENT_METER
 309:../cleanflight/src/main/sensors/current.c ****     else if (id == CURRENT_METER_ID_MSP_1) {
 310:../cleanflight/src/main/sensors/current.c ****         currentMeterMSPRead(meter);
 311:../cleanflight/src/main/sensors/current.c ****     }
 312:../cleanflight/src/main/sensors/current.c **** #endif
 313:../cleanflight/src/main/sensors/current.c **** #ifdef USE_ESC_SENSOR
 314:../cleanflight/src/main/sensors/current.c ****     else if (id == CURRENT_METER_ID_ESC_COMBINED_1) {
 315:../cleanflight/src/main/sensors/current.c ****         currentMeterESCReadCombined(meter);
 316:../cleanflight/src/main/sensors/current.c ****     }
 317:../cleanflight/src/main/sensors/current.c ****     else if (id >= CURRENT_METER_ID_ESC_MOTOR_1 && id <= CURRENT_METER_ID_ESC_MOTOR_20 ) {
 318:../cleanflight/src/main/sensors/current.c ****         int motor = id - CURRENT_METER_ID_ESC_MOTOR_1;
 319:../cleanflight/src/main/sensors/current.c ****         currentMeterESCReadMotor(motor, meter);
 320:../cleanflight/src/main/sensors/current.c ****     }
 321:../cleanflight/src/main/sensors/current.c **** #endif
 322:../cleanflight/src/main/sensors/current.c ****     else {
 323:../cleanflight/src/main/sensors/current.c ****         currentMeterReset(meter);
 867              	 .loc 2 323 0
 868 0028 3868     	 ldr r0,[r7]
 869 002a FFF7FEFF 	 bl currentMeterReset
 870              	.L41:
 324:../cleanflight/src/main/sensors/current.c ****     }
 325:../cleanflight/src/main/sensors/current.c **** }
 871              	 .loc 2 325 0
 872 002e 0837     	 adds r7,r7,#8
 873              	.LCFI54:
 874              	 .cfi_def_cfa_offset 8
 875 0030 BD46     	 mov sp,r7
 876              	.LCFI55:
 877              	 .cfi_def_cfa_register 13
 878              	 
 879 0032 80BD     	 pop {r7,pc}
 880              	 .cfi_endproc
 881              	.LFE544:
 883              	 .text
 884              	.Letext0:
 885              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 886              	 .file 4 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 887              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/XMCLib/inc/xmc_usic.h"
 888              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/filter.h"
 889              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/pg/pg.h"
 890              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/build/debug.h"
 891              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/common/time.h"
 892              	 .file 10 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/adc.h"
 893              	 .file 11 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/current_ids.h"
 894              	 .file 12 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/sensors/esc_sensor.h"
 895              	 .file 13 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 896              	 .file 14 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 current.c
    {standard input}:20     .text.currentSensorADCConfig:00000000 $t
    {standard input}:24     .text.currentSensorADCConfig:00000000 currentSensorADCConfig
    {standard input}:54     .text.currentSensorADCConfig:00000010 $d
                            *COM*:00000004 currentSensorADCConfig_System
    {standard input}:59     .text.currentSensorVirtualConfig:00000000 $t
    {standard input}:63     .text.currentSensorVirtualConfig:00000000 currentSensorVirtualConfig
    {standard input}:92     .text.currentSensorVirtualConfig:00000010 $d
                            *COM*:00000004 currentSensorVirtualConfig_System
    {standard input}:117    .rodata.currentMeterSourceNames:00000000 currentMeterSourceNames
    {standard input}:98     .rodata:00000000 $d
    {standard input}:114    .rodata.currentMeterSourceNames:00000000 $d
    {standard input}:128    .rodata.currentMeterIds:00000000 currentMeterIds
    {standard input}:125    .rodata.currentMeterIds:00000000 $d
    {standard input}:135    .rodata.supportedCurrentMeterCount:00000000 supportedCurrentMeterCount
    {standard input}:138    .text.currentMeterReset:00000000 $t
    {standard input}:143    .text.currentMeterReset:00000000 currentMeterReset
    {standard input}:209    .bss.adciBatFilter:00000000 $d
    {standard input}:212    .bss.adciBatFilter:00000000 adciBatFilter
                            *COM*:00000004 currentSensorADCConfig_Copy
    {standard input}:221    .pg_registry:00000000 currentSensorADCConfig_Registry
    {standard input}:218    .pg_registry:00000000 $d
    {standard input}:233    .pg_resetdata:00000000 pgResetTemplate_currentSensorADCConfig
    {standard input}:230    .pg_resetdata:00000000 $d
                            *COM*:00000004 currentSensorVirtualConfig_Copy
    {standard input}:243    .pg_registry:00000014 currentSensorVirtualConfig_Registry
    {standard input}:251    .text.currentMeterADCToCentiamps:00000000 $t
    {standard input}:255    .text.currentMeterADCToCentiamps:00000000 currentMeterADCToCentiamps
    {standard input}:342    .text.currentMeterADCToCentiamps:0000007c $d
    {standard input}:349    .text.updateCurrentmAhDrawnState:00000000 $t
    {standard input}:353    .text.updateCurrentmAhDrawnState:00000000 updateCurrentmAhDrawnState
    {standard input}:414    .text.updateCurrentmAhDrawnState:0000005c $d
                            *COM*:00000010 currentMeterADCState
    {standard input}:420    .text.currentMeterADCInit:00000000 $t
    {standard input}:425    .text.currentMeterADCInit:00000000 currentMeterADCInit
    {standard input}:454    .text.currentMeterADCInit:0000001c $d
    {standard input}:461    .text.currentMeterADCRefresh:00000000 $t
    {standard input}:466    .text.currentMeterADCRefresh:00000000 currentMeterADCRefresh
    {standard input}:532    .text.currentMeterADCRefresh:00000064 $d
    {standard input}:538    .text.currentMeterADCRead:00000000 $t
    {standard input}:543    .text.currentMeterADCRead:00000000 currentMeterADCRead
    {standard input}:616    .text.currentMeterADCRead:00000050 $d
                            *COM*:0000000c currentMeterVirtualState
    {standard input}:624    .text.currentMeterVirtualInit:00000000 $t
    {standard input}:629    .text.currentMeterVirtualInit:00000000 currentMeterVirtualInit
    {standard input}:653    .text.currentMeterVirtualInit:00000010 $d
    {standard input}:658    .text.currentMeterVirtualRefresh:00000000 $t
    {standard input}:663    .text.currentMeterVirtualRefresh:00000000 currentMeterVirtualRefresh
    {standard input}:758    .text.currentMeterVirtualRefresh:0000008c $d
    {standard input}:765    .text.currentMeterVirtualRead:00000000 $t
    {standard input}:770    .text.currentMeterVirtualRead:00000000 currentMeterVirtualRead
    {standard input}:819    .text.currentMeterVirtualRead:0000002c $d
    {standard input}:824    .text.currentMeterRead:00000000 $t
    {standard input}:829    .text.currentMeterRead:00000000 currentMeterRead
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
getVrefMv
debugMode
debug
memset
biquadFilterInitLPF
adcGetChannel
biquadFilterApply
