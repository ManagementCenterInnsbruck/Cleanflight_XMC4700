   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "ibus_shared.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.calculateChecksum,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	calculateChecksum:
  25              	.LFB530:
  26              	 .file 1 "../cleanflight/src/main/telemetry/ibus_shared.c"
   1:../cleanflight/src/main/telemetry/ibus_shared.c **** /*
   2:../cleanflight/src/main/telemetry/ibus_shared.c ****  * This file is part of Cleanflight and Betaflight.
   3:../cleanflight/src/main/telemetry/ibus_shared.c ****  *
   4:../cleanflight/src/main/telemetry/ibus_shared.c ****  * Cleanflight and Betaflight are free software. You can redistribute
   5:../cleanflight/src/main/telemetry/ibus_shared.c ****  * this software and/or modify this software under the terms of the
   6:../cleanflight/src/main/telemetry/ibus_shared.c ****  * GNU General Public License as published by the Free Software
   7:../cleanflight/src/main/telemetry/ibus_shared.c ****  * Foundation, either version 3 of the License, or (at your option)
   8:../cleanflight/src/main/telemetry/ibus_shared.c ****  * any later version.
   9:../cleanflight/src/main/telemetry/ibus_shared.c ****  *
  10:../cleanflight/src/main/telemetry/ibus_shared.c ****  * Cleanflight and Betaflight are distributed in the hope that they
  11:../cleanflight/src/main/telemetry/ibus_shared.c ****  * will be useful, but WITHOUT ANY WARRANTY; without even the implied
  12:../cleanflight/src/main/telemetry/ibus_shared.c ****  * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  13:../cleanflight/src/main/telemetry/ibus_shared.c ****  * See the GNU General Public License for more details.
  14:../cleanflight/src/main/telemetry/ibus_shared.c ****  *
  15:../cleanflight/src/main/telemetry/ibus_shared.c ****  * You should have received a copy of the GNU General Public License
  16:../cleanflight/src/main/telemetry/ibus_shared.c ****  * along with this software.
  17:../cleanflight/src/main/telemetry/ibus_shared.c ****  *
  18:../cleanflight/src/main/telemetry/ibus_shared.c ****  * If not, see <http://www.gnu.org/licenses/>.
  19:../cleanflight/src/main/telemetry/ibus_shared.c ****  */
  20:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  21:../cleanflight/src/main/telemetry/ibus_shared.c **** /*
  22:../cleanflight/src/main/telemetry/ibus_shared.c ****  * FlySky iBus telemetry implementation by CraigJPerry.
  23:../cleanflight/src/main/telemetry/ibus_shared.c ****  * Unit tests and some additions by Unitware
  24:../cleanflight/src/main/telemetry/ibus_shared.c ****  *
  25:../cleanflight/src/main/telemetry/ibus_shared.c ****  * Many thanks to Dave Borthwick's iBus telemetry dongle converter for
  26:../cleanflight/src/main/telemetry/ibus_shared.c ****  * PIC 12F1572 (also distributed under GPLv3) which was referenced to
  27:../cleanflight/src/main/telemetry/ibus_shared.c ****  * clarify the protocol.
  28:../cleanflight/src/main/telemetry/ibus_shared.c ****  */
  29:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  30:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  31:../cleanflight/src/main/telemetry/ibus_shared.c **** #include <stdbool.h>
  32:../cleanflight/src/main/telemetry/ibus_shared.c **** #include <stdint.h>
  33:../cleanflight/src/main/telemetry/ibus_shared.c **** #include <stdlib.h>
  34:../cleanflight/src/main/telemetry/ibus_shared.c **** // #include <string.h>
  35:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  36:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "platform.h"
  37:../cleanflight/src/main/telemetry/ibus_shared.c **** //#include "common/utils.h"
  38:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "telemetry/telemetry.h"
  39:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "telemetry/ibus_shared.h"
  40:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  41:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint16_t calculateChecksum(const uint8_t *ibusPacket);
  42:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  43:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_TELEMETRY) && defined(USE_TELEMETRY_IBUS)
  44:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "config/feature.h"
  45:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "pg/pg.h"
  46:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "pg/pg_ids.h"
  47:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "sensors/battery.h"
  48:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "fc/rc_controls.h"
  49:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "fc/config.h"
  50:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "sensors/gyro.h"
  51:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "drivers/accgyro/accgyro.h"
  52:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "fc/runtime_config.h"
  53:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "sensors/acceleration.h"
  54:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "sensors/sensors.h"
  55:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "sensors/barometer.h"
  56:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "flight/imu.h"
  57:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "flight/position.h"
  58:../cleanflight/src/main/telemetry/ibus_shared.c **** #include "io/gps.h"
  59:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  60:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  61:../cleanflight/src/main/telemetry/ibus_shared.c **** #define IBUS_TEMPERATURE_OFFSET     400
  62:../cleanflight/src/main/telemetry/ibus_shared.c **** #define INVALID_IBUS_ADDRESS        0
  63:../cleanflight/src/main/telemetry/ibus_shared.c **** #define IBUS_BUFFSIZE               33 // biggest iBus message seen so far + 1
  64:../cleanflight/src/main/telemetry/ibus_shared.c **** #define IBUS_HEADER_FOOTER_SIZE     4
  65:../cleanflight/src/main/telemetry/ibus_shared.c **** #define IBUS_2BYTE_SESNSOR          2
  66:../cleanflight/src/main/telemetry/ibus_shared.c **** #define IBUS_4BYTE_SESNSOR          4
  67:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  68:../cleanflight/src/main/telemetry/ibus_shared.c **** typedef uint8_t ibusAddress_t;
  69:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  70:../cleanflight/src/main/telemetry/ibus_shared.c **** typedef enum {
  71:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_COMMAND_DISCOVER_SENSOR      = 0x80,
  72:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_COMMAND_SENSOR_TYPE          = 0x90,
  73:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_COMMAND_MEASUREMENT          = 0xA0
  74:../cleanflight/src/main/telemetry/ibus_shared.c **** } ibusCommand_e;
  75:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  76:../cleanflight/src/main/telemetry/ibus_shared.c **** typedef union ibusTelemetry {
  77:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t uint16;
  78:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint32_t uint32;
  79:../cleanflight/src/main/telemetry/ibus_shared.c ****     int16_t int16;
  80:../cleanflight/src/main/telemetry/ibus_shared.c ****     int32_t int32;
  81:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint8_t byte[4];
  82:../cleanflight/src/main/telemetry/ibus_shared.c **** } ibusTelemetry_s;
  83:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  84:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_GPS)
  85:../cleanflight/src/main/telemetry/ibus_shared.c **** 
  86:../cleanflight/src/main/telemetry/ibus_shared.c **** const uint8_t GPS_IDS[] = {
  87:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GPS_STATUS,
  88:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_SPE,
  89:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GPS_LAT,
  90:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GPS_LON,
  91:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GPS_ALT,
  92:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GROUND_SPEED,
  93:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_ODO1,
  94:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_ODO2,
  95:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GPS_DIST,
  96:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_COG,
  97:../cleanflight/src/main/telemetry/ibus_shared.c **** };
  98:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif
  99:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 100:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_TELEMETRY_IBUS_EXTENDED)
 101:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 102:../cleanflight/src/main/telemetry/ibus_shared.c **** const uint8_t FULL_GPS_IDS[] = {
 103:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GPS_STATUS,
 104:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GPS_LAT,
 105:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GPS_LON,
 106:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_GPS_ALT,
 107:../cleanflight/src/main/telemetry/ibus_shared.c **** };
 108:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 109:../cleanflight/src/main/telemetry/ibus_shared.c **** const uint8_t FULL_VOLT_IDS[] = {
 110:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_EXTERNAL_VOLTAGE,
 111:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_CELL,
 112:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_BAT_CURR,
 113:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_FUEL,
 114:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_RPM,
 115:../cleanflight/src/main/telemetry/ibus_shared.c **** };
 116:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 117:../cleanflight/src/main/telemetry/ibus_shared.c **** const uint8_t FULL_ACC_IDS[] = {
 118:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_ACC_X,
 119:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_ACC_Y,
 120:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_ACC_Z,
 121:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_ROLL,
 122:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_PITCH,
 123:../cleanflight/src/main/telemetry/ibus_shared.c ****     IBUS_SENSOR_TYPE_YAW,
 124:../cleanflight/src/main/telemetry/ibus_shared.c **** };
 125:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 126:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif //defined(USE_TELEMETRY_IBUS_EXTENDED)
 127:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 128:../cleanflight/src/main/telemetry/ibus_shared.c **** static serialPort_t *ibusSerialPort = NULL;
 129:../cleanflight/src/main/telemetry/ibus_shared.c **** static ibusAddress_t ibusBaseAddress = INVALID_IBUS_ADDRESS;
 130:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint8_t sendBuffer[IBUS_BUFFSIZE];
 131:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 132:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 133:../cleanflight/src/main/telemetry/ibus_shared.c **** static void setValue(uint8_t* bufferPtr, uint8_t sensorType, uint8_t length);
 134:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 135:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint8_t getSensorID(ibusAddress_t address)
 136:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 137:../cleanflight/src/main/telemetry/ibus_shared.c ****     //all checks are done in theAddressIsWithinOurRange
 138:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint32_t index = address - ibusBaseAddress;
 139:../cleanflight/src/main/telemetry/ibus_shared.c ****     return telemetryConfig()->flysky_sensors[index];
 140:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 141:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 142:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint8_t getSensorLength(uint8_t sensorID)
 143:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 144:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (sensorID == IBUS_SENSOR_TYPE_PRES || (sensorID >= IBUS_SENSOR_TYPE_GPS_LAT && sensorID <= I
 145:../cleanflight/src/main/telemetry/ibus_shared.c ****         return IBUS_4BYTE_SESNSOR;
 146:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 147:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_TELEMETRY_IBUS_EXTENDED)
 148:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (sensorID == IBUS_SENSOR_TYPE_GPS_FULL) {
 149:../cleanflight/src/main/telemetry/ibus_shared.c ****         return 14;
 150:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 151:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (sensorID == IBUS_SENSOR_TYPE_VOLT_FULL) {
 152:../cleanflight/src/main/telemetry/ibus_shared.c ****         return 10;
 153:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 154:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (sensorID == IBUS_SENSOR_TYPE_VOLT_FULL) {
 155:../cleanflight/src/main/telemetry/ibus_shared.c ****         return 12;
 156:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 157:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif
 158:../cleanflight/src/main/telemetry/ibus_shared.c ****     return IBUS_2BYTE_SESNSOR;
 159:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 160:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 161:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint8_t transmitIbusPacket()
 162:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 163:../cleanflight/src/main/telemetry/ibus_shared.c ****     unsigned frameLength = sendBuffer[0];
 164:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (frameLength == INVALID_IBUS_ADDRESS) {
 165:../cleanflight/src/main/telemetry/ibus_shared.c ****         return 0;
 166:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 167:../cleanflight/src/main/telemetry/ibus_shared.c ****     unsigned payloadLength = frameLength - IBUS_CHECKSUM_SIZE;
 168:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t checksum = calculateChecksum(sendBuffer);
 169:../cleanflight/src/main/telemetry/ibus_shared.c ****     for (unsigned i = 0; i < payloadLength; i++) {
 170:../cleanflight/src/main/telemetry/ibus_shared.c ****         serialWrite(ibusSerialPort, sendBuffer[i]);
 171:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 172:../cleanflight/src/main/telemetry/ibus_shared.c ****     serialWrite(ibusSerialPort, checksum & 0xFF);
 173:../cleanflight/src/main/telemetry/ibus_shared.c ****     serialWrite(ibusSerialPort, checksum >> 8);
 174:../cleanflight/src/main/telemetry/ibus_shared.c ****     return frameLength;
 175:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 176:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 177:../cleanflight/src/main/telemetry/ibus_shared.c **** static void setIbusDiscoverSensorReply(ibusAddress_t address)
 178:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 179:../cleanflight/src/main/telemetry/ibus_shared.c ****     sendBuffer[0] = IBUS_HEADER_FOOTER_SIZE;
 180:../cleanflight/src/main/telemetry/ibus_shared.c ****     sendBuffer[1] = IBUS_COMMAND_DISCOVER_SENSOR | address;
 181:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 182:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 183:../cleanflight/src/main/telemetry/ibus_shared.c **** static void setIbusSensorType(ibusAddress_t address)
 184:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 185:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint8_t sensorID = getSensorID(address);
 186:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint8_t sensorLength = getSensorLength(sensorID);
 187:../cleanflight/src/main/telemetry/ibus_shared.c ****     sendBuffer[0] = IBUS_HEADER_FOOTER_SIZE + 2;
 188:../cleanflight/src/main/telemetry/ibus_shared.c ****     sendBuffer[1] = IBUS_COMMAND_SENSOR_TYPE | address;
 189:../cleanflight/src/main/telemetry/ibus_shared.c ****     sendBuffer[2] = sensorID;
 190:../cleanflight/src/main/telemetry/ibus_shared.c ****     sendBuffer[3] = sensorLength;
 191:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 192:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 193:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint16_t getVoltage()
 194:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 195:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t voltage = getBatteryVoltage() *10;
 196:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (telemetryConfig()->report_cell_voltage) {
 197:../cleanflight/src/main/telemetry/ibus_shared.c ****         voltage /= getBatteryCellCount();
 198:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 199:../cleanflight/src/main/telemetry/ibus_shared.c ****     return voltage;
 200:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 201:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 202:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint16_t getTemperature()
 203:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 204:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t temperature = gyroGetTemperature() * 10;
 205:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_BARO)
 206:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (sensors(SENSOR_BARO)) {
 207:../cleanflight/src/main/telemetry/ibus_shared.c ****         temperature = (uint16_t) ((baro.baroTemperature + 50) / 10);
 208:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 209:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif
 210:../cleanflight/src/main/telemetry/ibus_shared.c ****     return temperature + IBUS_TEMPERATURE_OFFSET;
 211:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 212:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 213:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 214:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint16_t getFuel()
 215:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 216:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t fuel = 0;
 217:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (batteryConfig()->batteryCapacity > 0) {
 218:../cleanflight/src/main/telemetry/ibus_shared.c ****         fuel = (uint16_t)calculateBatteryPercentageRemaining();
 219:../cleanflight/src/main/telemetry/ibus_shared.c ****     } else {
 220:../cleanflight/src/main/telemetry/ibus_shared.c ****         fuel = (uint16_t)constrain(getMAhDrawn(), 0, 0xFFFF);
 221:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 222:../cleanflight/src/main/telemetry/ibus_shared.c ****     return fuel;
 223:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 224:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 225:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint16_t getRPM()
 226:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 227:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t rpm = 0;
 228:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (ARMING_FLAG(ARMED)) {
 229:../cleanflight/src/main/telemetry/ibus_shared.c ****         const throttleStatus_e throttleStatus = calculateThrottleStatus();
 230:../cleanflight/src/main/telemetry/ibus_shared.c ****         rpm = rcCommand[THROTTLE];  // / BLADE_NUMBER_DIVIDER;
 231:../cleanflight/src/main/telemetry/ibus_shared.c ****         if (throttleStatus == THROTTLE_LOW && feature(FEATURE_MOTOR_STOP)) rpm = 0;
 232:../cleanflight/src/main/telemetry/ibus_shared.c ****     } else {
 233:../cleanflight/src/main/telemetry/ibus_shared.c ****         rpm = (uint16_t)(batteryConfig()->batteryCapacity); //  / BLADE_NUMBER_DIVIDER
 234:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 235:../cleanflight/src/main/telemetry/ibus_shared.c ****     return rpm;
 236:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 237:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 238:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint16_t getMode()
 239:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 240:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t flightMode = 1; //Acro
 241:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (FLIGHT_MODE(ANGLE_MODE)) {
 242:../cleanflight/src/main/telemetry/ibus_shared.c ****          flightMode = 0; //Stab
 243:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 244:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (FLIGHT_MODE(BARO_MODE)) {
 245:../cleanflight/src/main/telemetry/ibus_shared.c ****          flightMode = 2; //AltHold
 246:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 247:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (FLIGHT_MODE(PASSTHRU_MODE)) {
 248:../cleanflight/src/main/telemetry/ibus_shared.c ****         flightMode = 3; //Auto
 249:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 250:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (FLIGHT_MODE(HEADFREE_MODE) || FLIGHT_MODE(MAG_MODE)) {
 251:../cleanflight/src/main/telemetry/ibus_shared.c ****         flightMode = 4; //Guided! (there in no HEAD, MAG so use Guided)
 252:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 253:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (FLIGHT_MODE(GPS_HOLD_MODE) && FLIGHT_MODE(BARO_MODE)) {
 254:../cleanflight/src/main/telemetry/ibus_shared.c ****         flightMode = 5; //Loiter
 255:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 256:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (FLIGHT_MODE(GPS_HOME_MODE)) {
 257:../cleanflight/src/main/telemetry/ibus_shared.c ****         flightMode = 6; //RTL
 258:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 259:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (FLIGHT_MODE(HORIZON_MODE)) {
 260:../cleanflight/src/main/telemetry/ibus_shared.c ****         flightMode = 7; //Circle! (there in no horizon so use Circle)
 261:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 262:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (FLIGHT_MODE(GPS_HOLD_MODE)) {
 263:../cleanflight/src/main/telemetry/ibus_shared.c ****         flightMode = 8; //PosHold
 264:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 265:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (FLIGHT_MODE(FAILSAFE_MODE)) {
 266:../cleanflight/src/main/telemetry/ibus_shared.c ****         flightMode = 9; //Land
 267:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 268:../cleanflight/src/main/telemetry/ibus_shared.c ****     return flightMode;
 269:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 270:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 271:../cleanflight/src/main/telemetry/ibus_shared.c **** static int16_t getACC(uint8_t index)
 272:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 273:../cleanflight/src/main/telemetry/ibus_shared.c ****     return (int16_t)((acc.accADC[index] / acc.dev.acc_1G) * 1000);
 274:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 275:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 276:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_TELEMETRY_IBUS_EXTENDED)
 277:../cleanflight/src/main/telemetry/ibus_shared.c **** static void setCombinedFrame(uint8_t* bufferPtr, const uint8_t* structure, uint8_t itemCount)
 278:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 279:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint8_t offset = 0;
 280:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint8_t size = 0;
 281:../cleanflight/src/main/telemetry/ibus_shared.c ****     for (unsigned i = 0; i < itemCount; i++) {
 282:../cleanflight/src/main/telemetry/ibus_shared.c ****         size = getSensorLength(structure[i]);
 283:../cleanflight/src/main/telemetry/ibus_shared.c ****         setValue(bufferPtr + offset, structure[i], size);
 284:../cleanflight/src/main/telemetry/ibus_shared.c ****         offset += size;
 285:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 286:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 287:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif
 288:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 289:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 290:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 291:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_GPS)
 292:../cleanflight/src/main/telemetry/ibus_shared.c **** static bool setGPS(uint8_t sensorType, ibusTelemetry_s* value)
 293:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 294:../cleanflight/src/main/telemetry/ibus_shared.c ****     bool result = false;
 295:../cleanflight/src/main/telemetry/ibus_shared.c ****     for (unsigned i = 0; i < sizeof(GPS_IDS); i++) {
 296:../cleanflight/src/main/telemetry/ibus_shared.c ****         if (sensorType == GPS_IDS[i]) {
 297:../cleanflight/src/main/telemetry/ibus_shared.c ****             result = true;
 298:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 299:../cleanflight/src/main/telemetry/ibus_shared.c ****         }
 300:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 301:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (!result) return result;
 302:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 303:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t gpsFixType = 0;
 304:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t sats = 0;
 305:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (sensors(SENSOR_GPS)) {
 306:../cleanflight/src/main/telemetry/ibus_shared.c ****         gpsFixType = !STATE(GPS_FIX) ? 1 : (gpsSol.numSat < 5 ? 2 : 3);
 307:../cleanflight/src/main/telemetry/ibus_shared.c ****         sats = gpsSol.numSat;
 308:../cleanflight/src/main/telemetry/ibus_shared.c ****         if (STATE(GPS_FIX) || sensorType == IBUS_SENSOR_TYPE_GPS_STATUS) {
 309:../cleanflight/src/main/telemetry/ibus_shared.c ****             result = true;
 310:../cleanflight/src/main/telemetry/ibus_shared.c ****             switch (sensorType) {
 311:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_SPE:
 312:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value->uint16 = gpsSol.groundSpeed * 36 / 100;
 313:../cleanflight/src/main/telemetry/ibus_shared.c ****                 break;
 314:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_GPS_LAT:
 315:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value->int32 = gpsSol.llh.lat;
 316:../cleanflight/src/main/telemetry/ibus_shared.c ****                 break;
 317:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_GPS_LON:
 318:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value->int32 = gpsSol.llh.lon;
 319:../cleanflight/src/main/telemetry/ibus_shared.c ****                 break;
 320:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_GPS_ALT:
 321:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value->int32 = (int32_t)gpsSol.llh.alt;
 322:../cleanflight/src/main/telemetry/ibus_shared.c ****                 break;
 323:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_GROUND_SPEED:
 324:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value->uint16 = gpsSol.groundSpeed;
 325:../cleanflight/src/main/telemetry/ibus_shared.c ****                 break;
 326:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_ODO1:
 327:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_ODO2:
 328:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_GPS_DIST:
 329:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value->uint16 = GPS_distanceToHome;
 330:../cleanflight/src/main/telemetry/ibus_shared.c ****                 break;
 331:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_COG:
 332:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value->uint16 = gpsSol.groundCourse * 100;
 333:../cleanflight/src/main/telemetry/ibus_shared.c ****                 break;
 334:../cleanflight/src/main/telemetry/ibus_shared.c ****             case IBUS_SENSOR_TYPE_GPS_STATUS:
 335:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value->byte[0] = gpsFixType;
 336:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value->byte[1] = sats;
 337:../cleanflight/src/main/telemetry/ibus_shared.c ****                 break;
 338:../cleanflight/src/main/telemetry/ibus_shared.c ****             }
 339:../cleanflight/src/main/telemetry/ibus_shared.c ****         }
 340:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 341:../cleanflight/src/main/telemetry/ibus_shared.c ****     return result;
 342:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 343:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif //defined(USE_GPS)
 344:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 345:../cleanflight/src/main/telemetry/ibus_shared.c **** static void setValue(uint8_t* bufferPtr, uint8_t sensorType, uint8_t length)
 346:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 347:../cleanflight/src/main/telemetry/ibus_shared.c ****     ibusTelemetry_s value;
 348:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 349:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_TELEMETRY_IBUS_EXTENDED)
 350:../cleanflight/src/main/telemetry/ibus_shared.c ****     const uint8_t* structure = 0;
 351:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint8_t itemCount;
 352:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (sensorType == IBUS_SENSOR_TYPE_GPS_FULL) {
 353:../cleanflight/src/main/telemetry/ibus_shared.c ****         structure = FULL_GPS_IDS;
 354:../cleanflight/src/main/telemetry/ibus_shared.c ****         itemCount = sizeof(FULL_GPS_IDS);
 355:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 356:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (sensorType == IBUS_SENSOR_TYPE_VOLT_FULL) {
 357:../cleanflight/src/main/telemetry/ibus_shared.c ****         structure = FULL_VOLT_IDS;
 358:../cleanflight/src/main/telemetry/ibus_shared.c ****         itemCount = sizeof(FULL_VOLT_IDS);
 359:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 360:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (sensorType == IBUS_SENSOR_TYPE_ACC_FULL) {
 361:../cleanflight/src/main/telemetry/ibus_shared.c ****         structure = FULL_ACC_IDS;
 362:../cleanflight/src/main/telemetry/ibus_shared.c ****         itemCount = sizeof(FULL_ACC_IDS);
 363:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 364:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (structure != 0) {
 365:../cleanflight/src/main/telemetry/ibus_shared.c ****         setCombinedFrame(bufferPtr, structure, sizeof(itemCount));
 366:../cleanflight/src/main/telemetry/ibus_shared.c ****         return;
 367:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 368:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif //defined(USE_TELEMETRY_IBUS_EXTENDED)
 369:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 370:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_GPS)
 371:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (setGPS(sensorType, &value)) {
 372:../cleanflight/src/main/telemetry/ibus_shared.c ****         return;
 373:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 374:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif //defined(USE_TELEMETRY_IBUS_EXTENDED)
 375:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 376:../cleanflight/src/main/telemetry/ibus_shared.c ****     for (unsigned i = 0; i < length; i++) {
 377:../cleanflight/src/main/telemetry/ibus_shared.c ****         bufferPtr[i] = value.byte[i] = 0;
 378:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 379:../cleanflight/src/main/telemetry/ibus_shared.c ****     switch (sensorType) {
 380:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_EXTERNAL_VOLTAGE:
 381:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint16 = getVoltage();
 382:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 383:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_TEMPERATURE:
 384:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint16 = getTemperature();
 385:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 386:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_RPM_FLYSKY:
 387:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.int16 = (int16_t)rcCommand[THROTTLE];
 388:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 389:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_FUEL:
 390:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint16 = getFuel();
 391:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 392:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_RPM:
 393:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint16 = getRPM();
 394:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 395:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_FLIGHT_MODE:
 396:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint16 = getMode();
 397:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 398:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_CELL:
 399:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint16 = (uint16_t)(getBatteryAverageCellVoltage() *10);
 400:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 401:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_BAT_CURR:
 402:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint16 = (uint16_t)getAmperage();
 403:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 404:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_ACC_X:
 405:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_ACC_Y:
 406:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_ACC_Z:
 407:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.int16 = getACC(sensorType - IBUS_SENSOR_TYPE_ACC_X);
 408:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 409:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_ROLL:
 410:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_PITCH:
 411:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_YAW:
 412:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.int16 = attitude.raw[sensorType - IBUS_SENSOR_TYPE_ROLL] *10;
 413:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 414:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_ARMED:
 415:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint16 = ARMING_FLAG(ARMED) ? 1 : 0;
 416:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 417:../cleanflight/src/main/telemetry/ibus_shared.c **** #if defined(USE_TELEMETRY_IBUS_EXTENDED)
 418:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_CMP_HEAD:
 419:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint16 = DECIDEGREES_TO_DEGREES(attitude.values.yaw);
 420:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 421:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_VERTICAL_SPEED:
 422:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_CLIMB_RATE:
 423:../cleanflight/src/main/telemetry/ibus_shared.c ****             if(sensors(SENSOR_SONAR) || sensors(SENSOR_BARO)) {
 424:../cleanflight/src/main/telemetry/ibus_shared.c ****                 value.int16 = (int16_t)getEstimatedVario();
 425:../cleanflight/src/main/telemetry/ibus_shared.c ****             }
 426:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 427:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_ALT:
 428:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_ALT_MAX:
 429:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.int32 = baro.BaroAlt;
 430:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 431:../cleanflight/src/main/telemetry/ibus_shared.c ****         case IBUS_SENSOR_TYPE_PRES:
 432:../cleanflight/src/main/telemetry/ibus_shared.c ****             value.uint32 = baro.baroPressure | (((uint32_t)getTemperature()) << 19);
 433:../cleanflight/src/main/telemetry/ibus_shared.c ****             break;
 434:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif //defined(TELEMETRY_IBUS_EXTENDED)
 435:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 436:../cleanflight/src/main/telemetry/ibus_shared.c ****     for (unsigned i = 0; i < length; i++) {
 437:../cleanflight/src/main/telemetry/ibus_shared.c ****         bufferPtr[i] = value.byte[i];
 438:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 439:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 440:../cleanflight/src/main/telemetry/ibus_shared.c **** static void setIbusMeasurement(ibusAddress_t address)
 441:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 442:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint8_t sensorID = getSensorID(address);
 443:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint8_t sensorLength = getSensorLength(sensorID);
 444:../cleanflight/src/main/telemetry/ibus_shared.c ****     sendBuffer[0] = IBUS_HEADER_FOOTER_SIZE + sensorLength;
 445:../cleanflight/src/main/telemetry/ibus_shared.c ****     sendBuffer[1] = IBUS_COMMAND_MEASUREMENT | address;
 446:../cleanflight/src/main/telemetry/ibus_shared.c ****     setValue(sendBuffer + 2, sensorID, sensorLength);
 447:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 448:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 449:../cleanflight/src/main/telemetry/ibus_shared.c **** static bool isCommand(ibusCommand_e expected, const uint8_t *ibusPacket)
 450:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 451:../cleanflight/src/main/telemetry/ibus_shared.c ****     return (ibusPacket[1] & 0xF0) == expected;
 452:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 453:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 454:../cleanflight/src/main/telemetry/ibus_shared.c **** static ibusAddress_t getAddress(const uint8_t *ibusPacket)
 455:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 456:../cleanflight/src/main/telemetry/ibus_shared.c ****     return (ibusPacket[1] & 0x0F);
 457:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 458:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 459:../cleanflight/src/main/telemetry/ibus_shared.c **** static void autodetectFirstReceivedAddressAsBaseAddress(ibusAddress_t returnAddress)
 460:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 461:../cleanflight/src/main/telemetry/ibus_shared.c ****     if ((INVALID_IBUS_ADDRESS == ibusBaseAddress) &&
 462:../cleanflight/src/main/telemetry/ibus_shared.c ****     (INVALID_IBUS_ADDRESS != returnAddress)) {
 463:../cleanflight/src/main/telemetry/ibus_shared.c ****         ibusBaseAddress = returnAddress;
 464:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 465:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 466:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 467:../cleanflight/src/main/telemetry/ibus_shared.c **** static bool theAddressIsWithinOurRange(ibusAddress_t returnAddress)
 468:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 469:../cleanflight/src/main/telemetry/ibus_shared.c ****     return (returnAddress >= ibusBaseAddress) &&
 470:../cleanflight/src/main/telemetry/ibus_shared.c ****     (ibusAddress_t)(returnAddress - ibusBaseAddress) < ARRAYLEN(telemetryConfig()->flysky_sensors) 
 471:../cleanflight/src/main/telemetry/ibus_shared.c ****     telemetryConfig()->flysky_sensors[(returnAddress - ibusBaseAddress)] != IBUS_SENSOR_TYPE_NONE;
 472:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 473:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 474:../cleanflight/src/main/telemetry/ibus_shared.c **** uint8_t respondToIbusRequest(uint8_t const * const ibusPacket)
 475:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 476:../cleanflight/src/main/telemetry/ibus_shared.c ****     ibusAddress_t returnAddress = getAddress(ibusPacket);
 477:../cleanflight/src/main/telemetry/ibus_shared.c ****     autodetectFirstReceivedAddressAsBaseAddress(returnAddress);
 478:../cleanflight/src/main/telemetry/ibus_shared.c ****     //set buffer to invalid
 479:../cleanflight/src/main/telemetry/ibus_shared.c ****     sendBuffer[0] = INVALID_IBUS_ADDRESS;
 480:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 481:../cleanflight/src/main/telemetry/ibus_shared.c ****     if (theAddressIsWithinOurRange(returnAddress)) {
 482:../cleanflight/src/main/telemetry/ibus_shared.c ****         if (isCommand(IBUS_COMMAND_DISCOVER_SENSOR, ibusPacket)) {
 483:../cleanflight/src/main/telemetry/ibus_shared.c ****             setIbusDiscoverSensorReply(returnAddress);
 484:../cleanflight/src/main/telemetry/ibus_shared.c ****         } else if (isCommand(IBUS_COMMAND_SENSOR_TYPE, ibusPacket)) {
 485:../cleanflight/src/main/telemetry/ibus_shared.c ****             setIbusSensorType(returnAddress);
 486:../cleanflight/src/main/telemetry/ibus_shared.c ****         } else if (isCommand(IBUS_COMMAND_MEASUREMENT, ibusPacket)) {
 487:../cleanflight/src/main/telemetry/ibus_shared.c ****             setIbusMeasurement(returnAddress);
 488:../cleanflight/src/main/telemetry/ibus_shared.c ****         }
 489:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 490:../cleanflight/src/main/telemetry/ibus_shared.c ****     //transmit if content was set
 491:../cleanflight/src/main/telemetry/ibus_shared.c ****     return transmitIbusPacket();
 492:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 493:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 494:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 495:../cleanflight/src/main/telemetry/ibus_shared.c **** void initSharedIbusTelemetry(serialPort_t *port)
 496:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 497:../cleanflight/src/main/telemetry/ibus_shared.c ****     ibusSerialPort = port;
 498:../cleanflight/src/main/telemetry/ibus_shared.c ****     ibusBaseAddress = INVALID_IBUS_ADDRESS;
 499:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 500:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 501:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 502:../cleanflight/src/main/telemetry/ibus_shared.c **** #endif //defined(USE_TELEMETRY) && defined(USE_TELEMETRY_IBUS)
 503:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 504:../cleanflight/src/main/telemetry/ibus_shared.c **** static uint16_t calculateChecksum(const uint8_t *ibusPacket)
 505:../cleanflight/src/main/telemetry/ibus_shared.c **** {
  27              	 .loc 1 505 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 87B0     	 sub sp,sp,#28
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 32
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 506:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t checksum = 0xFFFF;
  43              	 .loc 1 506 0
  44 0008 4FF6FF73 	 movw r3,#65535
  45 000c FB82     	 strh r3,[r7,#22]
 507:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint8_t dataSize = ibusPacket[0] - IBUS_CHECKSUM_SIZE;
  46              	 .loc 1 507 0
  47 000e 7B68     	 ldr r3,[r7,#4]
  48 0010 1B78     	 ldrb r3,[r3]
  49 0012 023B     	 subs r3,r3,#2
  50 0014 FB73     	 strb r3,[r7,#15]
  51              	.LBB2:
 508:../cleanflight/src/main/telemetry/ibus_shared.c ****     for (unsigned i = 0; i < dataSize; i++) {
  52              	 .loc 1 508 0
  53 0016 0023     	 movs r3,#0
  54 0018 3B61     	 str r3,[r7,#16]
  55 001a 0AE0     	 b .L2
  56              	.L3:
 509:../cleanflight/src/main/telemetry/ibus_shared.c ****         checksum -= ibusPacket[i];
  57              	 .loc 1 509 0 discriminator 3
  58 001c 7A68     	 ldr r2,[r7,#4]
  59 001e 3B69     	 ldr r3,[r7,#16]
  60 0020 1344     	 add r3,r3,r2
  61 0022 1B78     	 ldrb r3,[r3]
  62 0024 9BB2     	 uxth r3,r3
  63 0026 FA8A     	 ldrh r2,[r7,#22]
  64 0028 D31A     	 subs r3,r2,r3
  65 002a FB82     	 strh r3,[r7,#22]
 508:../cleanflight/src/main/telemetry/ibus_shared.c ****     for (unsigned i = 0; i < dataSize; i++) {
  66              	 .loc 1 508 0 discriminator 3
  67 002c 3B69     	 ldr r3,[r7,#16]
  68 002e 0133     	 adds r3,r3,#1
  69 0030 3B61     	 str r3,[r7,#16]
  70              	.L2:
 508:../cleanflight/src/main/telemetry/ibus_shared.c ****     for (unsigned i = 0; i < dataSize; i++) {
  71              	 .loc 1 508 0 is_stmt 0 discriminator 1
  72 0032 FA7B     	 ldrb r2,[r7,#15]
  73 0034 3B69     	 ldr r3,[r7,#16]
  74 0036 9A42     	 cmp r2,r3
  75 0038 F0D8     	 bhi .L3
  76              	.LBE2:
 510:../cleanflight/src/main/telemetry/ibus_shared.c ****     }
 511:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 512:../cleanflight/src/main/telemetry/ibus_shared.c ****     return checksum;
  77              	 .loc 1 512 0 is_stmt 1
  78 003a FB8A     	 ldrh r3,[r7,#22]
 513:../cleanflight/src/main/telemetry/ibus_shared.c **** }
  79              	 .loc 1 513 0
  80 003c 1846     	 mov r0,r3
  81 003e 1C37     	 adds r7,r7,#28
  82              	.LCFI3:
  83              	 .cfi_def_cfa_offset 4
  84 0040 BD46     	 mov sp,r7
  85              	.LCFI4:
  86              	 .cfi_def_cfa_register 13
  87              	 
  88 0042 5DF8047B 	 ldr r7,[sp],#4
  89              	.LCFI5:
  90              	 .cfi_restore 7
  91              	 .cfi_def_cfa_offset 0
  92 0046 7047     	 bx lr
  93              	 .cfi_endproc
  94              	.LFE530:
  96              	 .section .text.isChecksumOkIa6b,"ax",%progbits
  97              	 .align 2
  98              	 .global isChecksumOkIa6b
  99              	 .thumb
 100              	 .thumb_func
 102              	isChecksumOkIa6b:
 103              	.LFB531:
 514:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 515:../cleanflight/src/main/telemetry/ibus_shared.c **** bool isChecksumOkIa6b(const uint8_t *ibusPacket, const uint8_t length)
 516:../cleanflight/src/main/telemetry/ibus_shared.c **** {
 104              	 .loc 1 516 0
 105              	 .cfi_startproc
 106              	 
 107              	 
 108 0000 80B5     	 push {r7,lr}
 109              	.LCFI6:
 110              	 .cfi_def_cfa_offset 8
 111              	 .cfi_offset 7,-8
 112              	 .cfi_offset 14,-4
 113 0002 84B0     	 sub sp,sp,#16
 114              	.LCFI7:
 115              	 .cfi_def_cfa_offset 24
 116 0004 00AF     	 add r7,sp,#0
 117              	.LCFI8:
 118              	 .cfi_def_cfa_register 7
 119 0006 7860     	 str r0,[r7,#4]
 120 0008 0B46     	 mov r3,r1
 121 000a FB70     	 strb r3,[r7,#3]
 517:../cleanflight/src/main/telemetry/ibus_shared.c ****     uint16_t calculatedChecksum = calculateChecksum(ibusPacket);
 122              	 .loc 1 517 0
 123 000c 7868     	 ldr r0,[r7,#4]
 124 000e FFF7FEFF 	 bl calculateChecksum
 125 0012 0346     	 mov r3,r0
 126 0014 FB81     	 strh r3,[r7,#14]
 518:../cleanflight/src/main/telemetry/ibus_shared.c **** 
 519:../cleanflight/src/main/telemetry/ibus_shared.c ****     // Note that there's a byte order swap to little endian here
 520:../cleanflight/src/main/telemetry/ibus_shared.c ****     return (calculatedChecksum >> 8) == ibusPacket[length - 1]
 127              	 .loc 1 520 0
 128 0016 FB89     	 ldrh r3,[r7,#14]
 129 0018 1B0A     	 lsrs r3,r3,#8
 130 001a 9AB2     	 uxth r2,r3
 131 001c FB78     	 ldrb r3,[r7,#3]
 132 001e 013B     	 subs r3,r3,#1
 133 0020 7968     	 ldr r1,[r7,#4]
 134 0022 0B44     	 add r3,r3,r1
 135 0024 1B78     	 ldrb r3,[r3]
 136 0026 9BB2     	 uxth r3,r3
 521:../cleanflight/src/main/telemetry/ibus_shared.c ****            && (calculatedChecksum & 0xFF) == ibusPacket[length - 2];
 137              	 .loc 1 521 0
 138 0028 9A42     	 cmp r2,r3
 139 002a 0AD1     	 bne .L6
 140              	 .loc 1 521 0 is_stmt 0 discriminator 1
 141 002c FB89     	 ldrh r3,[r7,#14]
 142 002e DBB2     	 uxtb r3,r3
 143 0030 FA78     	 ldrb r2,[r7,#3]
 144 0032 023A     	 subs r2,r2,#2
 145 0034 7968     	 ldr r1,[r7,#4]
 146 0036 0A44     	 add r2,r2,r1
 147 0038 1278     	 ldrb r2,[r2]
 148 003a 9342     	 cmp r3,r2
 149 003c 01D1     	 bne .L6
 150              	 .loc 1 521 0 discriminator 3
 151 003e 0123     	 movs r3,#1
 152 0040 00E0     	 b .L7
 153              	.L6:
 154              	 .loc 1 521 0 discriminator 4
 155 0042 0023     	 movs r3,#0
 156              	.L7:
 520:../cleanflight/src/main/telemetry/ibus_shared.c ****            && (calculatedChecksum & 0xFF) == ibusPacket[length - 2];
 157              	 .loc 1 520 0 is_stmt 1
 158 0044 03F00103 	 and r3,r3,#1
 159 0048 DBB2     	 uxtb r3,r3
 522:../cleanflight/src/main/telemetry/ibus_shared.c **** }
 160              	 .loc 1 522 0
 161 004a 1846     	 mov r0,r3
 162 004c 1037     	 adds r7,r7,#16
 163              	.LCFI9:
 164              	 .cfi_def_cfa_offset 8
 165 004e BD46     	 mov sp,r7
 166              	.LCFI10:
 167              	 .cfi_def_cfa_register 13
 168              	 
 169 0050 80BD     	 pop {r7,pc}
 170              	 .cfi_endproc
 171              	.LFE531:
 173 0052 00BF     	 .text
 174              	.Letext0:
 175              	 .file 2 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 176              	 .file 3 "d:\\xmc\\dave-ide-4.4.2-64bit\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 177              	 .file 4 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/io_types.h"
 178              	 .file 5 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/drivers/serial.h"
 179              	 .file 6 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/io/serial.h"
 180              	 .file 7 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/src/main/telemetry/telemetry.h"
 181              	 .file 8 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/CMSIS/Core/Include/core_cm4.h"
 182              	 .file 9 "D:/XMC/Projekte/Temp/CF_XMC4700/cleanflight/lib/main/XMC4000/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ibus_shared.c
    {standard input}:20     .text.calculateChecksum:00000000 $t
    {standard input}:24     .text.calculateChecksum:00000000 calculateChecksum
    {standard input}:97     .text.isChecksumOkIa6b:00000000 $t
    {standard input}:102    .text.isChecksumOkIa6b:00000000 isChecksumOkIa6b
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
